pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
673475836,Improve `TransferFunction` docs and add `to_expr`,"<!-- Your title above should be a short description of what
was changed. Do not include the issue number in the title. -->

#### References to other Issues or PRs
<!-- If this pull request fixes an issue, write ""Fixes #NNNN"" in that exact
format, e.g. ""Fixes #1234"" (see
https://tinyurl.com/auto-closing for more information). Also, please
write a comment on that issue linking back to this pull request once it is
open. -->


#### Brief description of what is fixed or changed
* Updated the documentation of `TransferFunction`. Made it more beginner-friendly.
* Added a method `to_expr()` for conversion from `TransferFunction` type to `Expr` along with unit tests.
* Added a classmethod for instantiating `TransferFunction` objects from rational expressions (`from_rational_expression`).
#### Other comments


#### Release Notes

<!-- Write the release notes for this release below between the BEGIN and END
statements. The basic format is a bulleted list with the name of the subpackage
and the release note for this PR. For example:

* solvers
  * Added a new solver for logarithmic equations.

* functions
  * Fixed a bug with log of integers.

or if no release note(s) should be included use:

NO ENTRY

See https://github.com/sympy/sympy/wiki/Writing-Release-Notes for more
information on how to write release notes. The bot will check your release
notes automatically to see if they are formatted correctly. -->

<!-- BEGIN RELEASE NOTES -->
* physics.control
  * `to_expr` method added in `TransferFunction` for converting `TransferFunction` to sympy expr.
  * `from_rational_expression` classmethod added for creating `TransferFunction` objects directly from rational expressions.
<!-- END RELEASE NOTES -->
",True,21634,https://api.github.com/repos/sympy/sympy/pulls/21634,https://github.com/sympy/sympy/pull/21634,closed,220,18,2,13,16,27,2,0,"[{'name': 'GSoC'}, {'name': 'physics.control'}]",2021-06-18 13:29:11+00:00,2021-06-22 13:44:44+00:00,346533.0,"4 days, 0:15:33","[{'comment_id': 654661111, 'comment_body': 'I missed these on first pass. Scratch my other comment.', 'comment_created': datetime.datetime(2021, 6, 18, 20, 24, 44, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 654661512, 'comment_body': 'What is the purpose of simplify and sympify here? You can use `S(0)` to get a SymPy zero if needed.', 'comment_created': datetime.datetime(2021, 6, 18, 20, 25, 55, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 654750491, 'comment_body': '```suggestion\r\n            raise ValueError(""{} cannot be subtracted from a TransferFunction.""\r\n```\r\nThis should remain a `ValueError`, no? `TypeError` is raised when an operation or a function is applied to an object of inappropriate type.', 'comment_created': datetime.datetime(2021, 6, 19, 5, 17, 32, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 654752110, 'comment_body': '```suggestion\r\n    Generally, a dynamical system representing a physical model can be described in terms of Linear\r\n```', 'comment_created': datetime.datetime(2021, 6, 19, 5, 36, 8, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 654752828, 'comment_body': 'Can you add one line above describing what is $s$?', 'comment_created': datetime.datetime(2021, 6, 19, 5, 44, 44, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 654752909, 'comment_body': 'Make this one line?', 'comment_created': datetime.datetime(2021, 6, 19, 5, 46, 12, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 654754410, 'comment_body': 'Why private though? This could be a way for users to convert a transfer function to an elementary function.', 'comment_created': datetime.datetime(2021, 6, 19, 6, 3, 20, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 654756895, 'comment_body': '> Why private though? This could be a way for users to convert a transfer function to an elementary function.\r\n\r\nSince the only possible use case, in my view at the time of its implementation, was the internal conversion of `TransferFunction` objects to `Expr` to make them compatible with the native matrix operations (since non-expr matrix operations were deprecated).\r\nIf there are other possible use cases that a user might find helpful, I will make it a public method. I will do whatever you suggest.', 'comment_created': datetime.datetime(2021, 6, 19, 6, 32, 2, tzinfo=datetime.timezone.utc), 'commenter': 'akshanshbhatt', 'type': 'User'}, {'comment_id': 654760623, 'comment_body': 'I think it should be `TypeError`. Here the exception is raised when the type of object we are subtracting from the `TransferFunction` is incompatible. The placeholder, too (in the print expression), logs the type of the object passed. Say I try to subtract a `Symbol` object from a `TransferFunction`, it will prompt an error -\r\n\r\n```python\r\n>>> from sympy.physics.control.lti import *\r\n>>> from sympy.abc import *\r\n>>> TransferFunction(1, s, s)\r\nTransferFunction(1, s, s)\r\n>>> _ - a\r\nTraceback (most recent call last):   \r\n  File ""<stdin>"", line 1, in <module>\r\n  File ""d:\\sympy\\sympy\\physics\\control\\lti.py"", line 436, in __sub__\r\n    raise TypeError(""{} cannot be subtracted from a TransferFunction.""\r\nTypeError: <class \'sympy.core.symbol.Symbol\'> cannot be subtracted from a TransferFunction.\r\n```\r\nIt makes sense as the type of object passed is incompatible for tf subtraction. Had this exception been raised when both the params were of the same type, there would have been a possibility for `ValueError`.\r\nI used this as the reference - https://docs.python.org/3/library/exceptions.html#TypeError.\r\n\r\nI was anyways, planning to revert to the old error types as suggested by @moorepants since this module has already gone through two release cycles. What is your opinion?', 'comment_created': datetime.datetime(2021, 6, 19, 7, 14, 14, tzinfo=datetime.timezone.utc), 'commenter': 'akshanshbhatt', 'type': 'User'}, {'comment_id': 654761023, 'comment_body': ""The errors shouldn't be changed due to backwards incompatibility. It's more trouble for end users to break their code than worring about if the correct error types were originally selected."", 'comment_created': datetime.datetime(2021, 6, 19, 7, 19, 18, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 654762017, 'comment_body': ""> The errors shouldn't be changed due to backwards incompatibility. It's more trouble for end users to break their code than worring about if the correct error types were originally selected.\r\n\r\nI will revert the error-type changes."", 'comment_created': datetime.datetime(2021, 6, 19, 7, 29, 52, tzinfo=datetime.timezone.utc), 'commenter': 'akshanshbhatt', 'type': 'User'}, {'comment_id': 654765544, 'comment_body': ""```suggestion\r\n    $s$, also known as complex frequency, is a complex variable in the Laplace domain. It corresponds to the\r\n    equivalent variable $t$, in the time domain.\r\n```\r\nThis looks sufficient. Since we are explaining this so well, it's also worth mentioning that a transfer function is the Laplace transform of the system's impulse response.\r\n"", 'comment_created': datetime.datetime(2021, 6, 19, 8, 8, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 654765922, 'comment_body': ""> Since we are explaining this so well, it's also worth mentioning that a transfer function is the Laplace transform of the system's impulse response.\r\n\r\nWhere exactly should I mention this?"", 'comment_created': datetime.datetime(2021, 6, 19, 8, 11, 46, tzinfo=datetime.timezone.utc), 'commenter': 'akshanshbhatt', 'type': 'User'}, {'comment_id': 654795576, 'comment_body': '```python\r\n>>> tf = TransferFunction(s + 1, s**2 + 2, s)\r\n>>> delay = exp(-s/tau)\r\n>>> expr = delay*tf.to_expr()\r\n>>> H1 = TransferFunction.from_rational_expression(expr, s)\r\n>>> \r\n>>> H2 = TransferFunction(exp(-s/tau)*(s + 1), s**2 + 2, s)\r\n```\r\n\r\nBoth `H1` and `H2` should work, I guess.', 'comment_created': datetime.datetime(2021, 6, 19, 13, 18, 41, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 654821284, 'comment_body': '> Both `H1` and `H2` should work, I guess.\r\n\r\nThis example looks fine but in the call which we had, @moorepants suggested not to implement `from_rational_expression()` classmethod.', 'comment_created': datetime.datetime(2021, 6, 19, 17, 40, 9, tzinfo=datetime.timezone.utc), 'commenter': 'akshanshbhatt', 'type': 'User'}, {'comment_id': 654944089, 'comment_body': ""\r\n> ```python\r\n> >>> tf = TransferFunction(s + 1, s**2 + 2, s)\r\n> >>> delay = exp(-s/tau)\r\n> >>> expr = delay*tf.to_expr()\r\n> >>> H1 = TransferFunction.from_rational_expression(expr, s)\r\n> >>> \r\n> >>> H2 = TransferFunction(exp(-s/tau)*(s + 1), s**2 + 2, s)\r\n> ```\r\n\r\nI think it's alright to go with that. I see similar classmethods being used in the codebase. See https://github.com/sympy/sympy/pull/21556#discussion_r654877091\r\n\r\nThere's a `to_expr` method in _holonomic.py_ that converts a holonomic function back to elementary function:\r\nhttps://github.com/sympy/sympy/blob/8b783d15caae900e05c9236bf001fde908befe7a/sympy/holonomic/holonomic.py#L2066\r\n\r\nIt would be nice if ours did too. This PR is almost ready after that."", 'comment_created': datetime.datetime(2021, 6, 20, 14, 30, 40, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 654944742, 'comment_body': 'I will complete the docstrings and tests for `from_rational_expression` by today. Hopefully, we can merge this PR after that. ', 'comment_created': datetime.datetime(2021, 6, 20, 14, 35, 18, tzinfo=datetime.timezone.utc), 'commenter': 'akshanshbhatt', 'type': 'User'}, {'comment_id': 654957866, 'comment_body': ""```suggestion\r\n    The numerator of the transfer function is, therefore, the Laplace transform of the output signal\r\n    (The signals are represented as functions of time) and similarly, the denominator\r\n    of the transfer function is the Laplace transform of the input signal. It is also a convention\r\n    to denote the input and output signal's Laplace transform with capital alphabets like shown below.\r\n\r\n            $H(s) = \\frac{Y(s)}{X(s)} = \\frac{ \\mathcal{L}\\left\\{y(t)\\right\\} }{ \\mathcal{L}\\left\\{x(t)\\right\\} }$\r\n\r\n    $s$, also known as complex frequency, is a complex variable in the Laplace domain. It corresponds to the\r\n    equivalent variable $t$, in the time domain. Transfer functions are sometimes also referred to as the Laplace\r\n    transform of the system's impulse response. Transfer function, $H$, is represented as a rational\r\n    function in $s$ like,\r\n```"", 'comment_created': datetime.datetime(2021, 6, 20, 16, 20, 59, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 654966702, 'comment_body': '```suggestion\r\n    # Conversion to Expr with to_expr()\r\n```', 'comment_created': datetime.datetime(2021, 6, 20, 17, 38, 52, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 654967574, 'comment_body': 'Add `H1` and `H2` as tests? 2-3 similar examples will suffice. ', 'comment_created': datetime.datetime(2021, 6, 20, 17, 47, 17, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 654968190, 'comment_body': '```suggestion\r\n        Converts a ``TransferFunction`` object to SymPy Expr.\r\n```', 'comment_created': datetime.datetime(2021, 6, 20, 17, 52, 41, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 654968657, 'comment_body': '```suggestion\r\n\r\n        expr : Expr, Number\r\n```', 'comment_created': datetime.datetime(2021, 6, 20, 17, 56, 56, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 654969681, 'comment_body': '```suggestion\r\n        Creates a new ``TransferFunction`` efficiently from a rational expression.\r\n```\r\n', 'comment_created': datetime.datetime(2021, 6, 20, 18, 6, 54, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 654969886, 'comment_body': '```suggestion\r\n            When ``expr`` has more than one variables and an optional parameter\r\n```', 'comment_created': datetime.datetime(2021, 6, 20, 18, 8, 34, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 654973838, 'comment_body': 'Delay is not supported as of now. \r\n\r\nIt prompts -\r\n\r\n```\r\nTypeError: Unsupported type for numerator or denominator of TransferFunction.\r\n```\r\n\r\nIt is due to `not num.has(exp)` condition. Should I remove it?\r\n\r\nhttps://github.com/sympy/sympy/blob/8b783d15caae900e05c9236bf001fde908befe7a/sympy/physics/control/lti.py#L155-L158', 'comment_created': datetime.datetime(2021, 6, 20, 18, 45, 31, tzinfo=datetime.timezone.utc), 'commenter': 'akshanshbhatt', 'type': 'User'}, {'comment_id': 655056864, 'comment_body': 'Yes. Time delay is needed in several LTI models: https://www.mathworks.com/help/control/ug/time-delays-in-linear-systems.html', 'comment_created': datetime.datetime(2021, 6, 21, 3, 52, 19, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 655059071, 'comment_body': 'Add one example in the docstring for `expr: Number`?', 'comment_created': datetime.datetime(2021, 6, 21, 4, 1, 16, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}]","[{'commit_sha': '536b493c9d5d45e37987bcdc9c5bbba4b4eba147', 'committer_username': 'akshanshbhatt', 'committer_name': 'akshānsh', 'committer_email': 'info@akshansh.me', 'commit_date': datetime.datetime(2019, 7, 23, 14, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '00da6bb75010a7059fdf36b3dd931d3731b7d3ff', 'committer_username': 'akshanshbhatt', 'committer_name': 'akshānsh', 'committer_email': 'info@akshansh.me', 'commit_date': datetime.datetime(2019, 7, 23, 14, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd54ca7484f696560efc670594eccb2679b95342a', 'committer_username': 'akshanshbhatt', 'committer_name': 'akshānsh', 'committer_email': 'info@akshansh.me', 'commit_date': datetime.datetime(2019, 7, 23, 14, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a52bc1683e6b29ee54a57bcb86cea965221f3ccc', 'committer_username': 'akshanshbhatt', 'committer_name': 'akshānsh', 'committer_email': 'info@akshansh.me', 'commit_date': datetime.datetime(2019, 7, 23, 14, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '17dcd68ea04c7171860bd4776828e9f6c02f2762', 'committer_username': 'akshanshbhatt', 'committer_name': 'akshānsh', 'committer_email': 'info@akshansh.me', 'commit_date': datetime.datetime(2019, 7, 23, 14, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '40a0cf75af755a6ed301106f6047a862844e0432', 'committer_username': 'akshanshbhatt', 'committer_name': 'akshānsh', 'committer_email': 'info@akshansh.me', 'commit_date': datetime.datetime(2019, 7, 23, 14, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5a5ae001e46d3938d963e5beed4f98cb54ea30ee', 'committer_username': 'namannimmo10', 'committer_name': 'Naman Gera', 'committer_email': 'namangera15@gmail.com', 'commit_date': datetime.datetime(2018, 9, 5, 15, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c21b5da6cf5f463d787226fbffce99e6c9f7b82e', 'committer_username': 'akshanshbhatt', 'committer_name': 'akshānsh', 'committer_email': 'info@akshansh.me', 'commit_date': datetime.datetime(2019, 7, 23, 14, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '99f91c7d61983c606af8485b82950a8edcb61763', 'committer_username': 'akshanshbhatt', 'committer_name': 'akshānsh', 'committer_email': 'info@akshansh.me', 'commit_date': datetime.datetime(2019, 7, 23, 14, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e8f0d2849a8b6ff25956d5674e7a44bdea2b0f44', 'committer_username': 'akshanshbhatt', 'committer_name': 'akshānsh', 'committer_email': 'info@akshansh.me', 'commit_date': datetime.datetime(2019, 7, 23, 14, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1731d51192468d7817ab4409f0b4b12a26027a4f', 'committer_username': 'akshanshbhatt', 'committer_name': 'akshānsh', 'committer_email': 'info@akshansh.me', 'commit_date': datetime.datetime(2019, 7, 23, 14, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '85b45bd7c5e1c095f71b31914456c4843a6ad304', 'committer_username': 'akshanshbhatt', 'committer_name': 'akshānsh', 'committer_email': 'info@akshansh.me', 'commit_date': datetime.datetime(2019, 7, 23, 14, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd7bb3b23a01e0e035f9f7e07d5b009ace3601fed', 'committer_username': 'akshanshbhatt', 'committer_name': 'akshānsh', 'committer_email': 'info@akshansh.me', 'commit_date': datetime.datetime(2019, 7, 23, 14, 35, 25, tzinfo=datetime.timezone.utc)}]",akshānsh,53227127,info@akshansh.me,User,,18,,21,32
675970286,[GSoC] Add `TransferFunctionMatrix` class,"<!-- Your title above should be a short description of what
was changed. Do not include the issue number in the title. -->

#### References to other Issues or PRs
<!-- If this pull request fixes an issue, write ""Fixes #NNNN"" in that exact
format, e.g. ""Fixes #1234"" (see
https://tinyurl.com/auto-closing for more information). Also, please
write a comment on that issue linking back to this pull request once it is
open. -->

#21556 
#### Brief description of what is fixed or changed

Support for Multiple-Input Multiple-Output (MIMO) Control Systems will be added along with documentation and examples of use cases.

#### Other comments

Chunking down PR #21556 into multiple smaller PRs for reviewing purposes.

#### Release Notes

<!-- Write the release notes for this release below between the BEGIN and END
statements. The basic format is a bulleted list with the name of the subpackage
and the release note for this PR. For example:

* solvers
  * Added a new solver for logarithmic equations.

* functions
  * Fixed a bug with log of integers.

or if no release note(s) should be included use:

NO ENTRY

See https://github.com/sympy/sympy/wiki/Writing-Release-Notes for more
information on how to write release notes. The bot will check your release
notes automatically to see if they are formatted correctly. -->

<!-- BEGIN RELEASE NOTES -->
* physics.control
  * Added `TransferFunctionMatrix` class, enabling support for MIMO systems.
<!-- END RELEASE NOTES -->
",True,21653,https://api.github.com/repos/sympy/sympy/pulls/21653,https://github.com/sympy/sympy/pull/21653,closed,780,16,10,65,38,80,2,0,"[{'name': 'GSoC'}, {'name': 'physics.control'}]",2021-06-23 05:48:01+00:00,2021-07-02 18:09:28+00:00,822087.0,"9 days, 12:21:27","[{'comment_id': 657411034, 'comment_body': 'I would have thought that a Matrix was a more natural input', 'comment_created': datetime.datetime(2021, 6, 23, 19, 43, 14, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 657412102, 'comment_body': 'You should avoid storing additional objects on the instance if possible. Ideally all of these would be derived through property methods from the args. Does this class satisfy `obj == obj.func(*obj.args)`?', 'comment_created': datetime.datetime(2021, 6, 23, 19, 45, 13, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 657422003, 'comment_body': ""Yes. It does satisfy the `obj.func(*obj.args)` condition. In the old PR by @namannimmo10 it was failing and had a `@XFAIL` decorator, which I've removed after it was passing. You can check the changes in test_args.py file. "", 'comment_created': datetime.datetime(2021, 6, 23, 20, 1, 9, tzinfo=datetime.timezone.utc), 'commenter': 'akshanshbhatt', 'type': 'User'}, {'comment_id': 657430576, 'comment_body': 'It would seem more extensible to have a common superclass of `TransferFunction, Series, Parallel` that could be tested here.', 'comment_created': datetime.datetime(2021, 6, 23, 20, 14, 59, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 657435364, 'comment_body': 'Basic subclasses should not override subs and should not define it to mean that it returns a different kind of object.', 'comment_created': datetime.datetime(2021, 6, 23, 20, 23, 17, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 657558828, 'comment_body': ""Based on the constructor down below, I suppose `TransferFunctionMatrix.subs(some_variable, value)` should just work. Var substitution in a transfer function returns a transfer function; TFM must follow the same principle, no?\r\n\r\nWe don't yet allow the substitution of `var` in `TransferFunction`;\r\n```python\r\nIn [19]: G = TransferFunction(x - s, x**2 + 1, s)                      \r\n\r\nIn [20]: G.subs(x, 2)                                                  \r\nOut[20]: TransferFunction(2 - s, 5, s)\r\n\r\nIn [21]: G.subs({s: 2, x: 2})                                          \r\nOut[21]: TransferFunction(2 - s, 5, s)\r\n```\r\nBut your example here (for TFM) shows otherwise.\r\n"", 'comment_created': datetime.datetime(2021, 6, 24, 1, 18, 27, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 657560682, 'comment_body': 'Update the docstring here.', 'comment_created': datetime.datetime(2021, 6, 24, 1, 24, 36, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 657566154, 'comment_body': 'Extra square brackets look redundant. Do we really have to restrict `arg` to be nested list? Can this work like Matrix?\r\n```\r\nIn [28]: Matrix([TransferFunction(s**2, s - 1, s).to_expr()])          \r\nOut[28]: Matrix([[s**2/(s - 1)]])\r\n```', 'comment_created': datetime.datetime(2021, 6, 24, 1, 42, 40, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 657568284, 'comment_body': 'More tests can be added here.', 'comment_created': datetime.datetime(2021, 6, 24, 1, 49, 47, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 657641448, 'comment_body': ""I don't get it. Creating an instance of one matrix-type class by inputting another matrix-type object seems a bit odd to me. And since non-expr objects are getting deprecated from matrix class, how can I possibly have Matrix of `TransferFunction`s as a valid input?"", 'comment_created': datetime.datetime(2021, 6, 24, 5, 42, 10, tzinfo=datetime.timezone.utc), 'commenter': 'akshanshbhatt', 'type': 'User'}, {'comment_id': 657641595, 'comment_body': 'I will remove the existing `subs` method then and update the example.', 'comment_created': datetime.datetime(2021, 6, 24, 5, 42, 35, tzinfo=datetime.timezone.utc), 'commenter': 'akshanshbhatt', 'type': 'User'}, {'comment_id': 657641875, 'comment_body': 'I first planned to do it like this but it required another conditional expression in the constructor. Since I wanted to object creation to be as fast and efficient as possible, I thought it would be better to put it as a compulsory condition for the user.\r\n\r\nThis was there in my implementation in PR #21556. \r\nhttps://github.com/sympy/sympy/blob/f6bd2f18eff977ea094a6b9606f352ac1224337a/sympy/physics/control/lti.py#L1981-L1983\r\n\r\nI also thought it would be better for beginners to have a simple API (PEP 20). If we allow regular lists, we would have to explain that it is supposed to be a column matrix and not a row. For new users who are not accustomed to sympy matrices might find it difficult to adapt. \r\n\r\nI would do whatever you suggest but allowing simple lists as `arg` might be a performance tradeoff.', 'comment_created': datetime.datetime(2021, 6, 24, 5, 43, 19, tzinfo=datetime.timezone.utc), 'commenter': 'akshanshbhatt', 'type': 'User'}, {'comment_id': 657641930, 'comment_body': ""I will add more tests after reviewing process of the code is complete. That's why I have also not added any tests of other functions of `TransferFunctionMatrix` (like `subs`, `transpose` etc.). I will add them once the API changes are finalized."", 'comment_created': datetime.datetime(2021, 6, 24, 5, 43, 29, tzinfo=datetime.timezone.utc), 'commenter': 'akshanshbhatt', 'type': 'User'}, {'comment_id': 657830426, 'comment_body': 'If I can create a `TransferFunction` as `TransferFunction(expr, s)` then why not `TransferFunctionMatrix` as `TransferFunctionMatrix(M, s)` where `M` is a matrix of expressions involving `s`?\r\n\r\nThat seems to be how it works in Mathematica:\r\nhttps://reference.wolfram.com/language/ref/TransferFunctionModel.html', 'comment_created': datetime.datetime(2021, 6, 24, 10, 36, 6, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 657831183, 'comment_body': 'More tests are not needed. There are already too many tests. The function being tested here is a trivial forwarding method so a single test is fine.', 'comment_created': datetime.datetime(2021, 6, 24, 10, 37, 27, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 657831445, 'comment_body': 'Use raw strings', 'comment_created': datetime.datetime(2021, 6, 24, 10, 37, 54, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 657840921, 'comment_body': 'Maybe update `expected4` with the test in which `Series` or `Parallel` instances are passed into the nested list.', 'comment_created': datetime.datetime(2021, 6, 24, 10, 53, 23, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 657846239, 'comment_body': 'Alphabetical order in absolute imports.', 'comment_created': datetime.datetime(2021, 6, 24, 11, 2, 5, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 657874779, 'comment_body': '> If I can create a `TransferFunction` as `TransferFunction(expr, s)` then why not `TransferFunctionMatrix` as `TransferFunctionMatrix(M, s)` where `M` is a matrix of expressions involving `s`?\r\n> \r\n> That seems to be how it works in Mathematica:\r\n> https://reference.wolfram.com/language/ref/TransferFunctionModel.html\r\n\r\nOh, you meant a classmethod. I get your point now. It seems to be a good idea. @namannimmo10, what do you say? Should I make a classmethod for creating `TransferFunctionMatrix` objects this way?', 'comment_created': datetime.datetime(2021, 6, 24, 11, 48, 46, tzinfo=datetime.timezone.utc), 'commenter': 'akshanshbhatt', 'type': 'User'}, {'comment_id': 657889637, 'comment_body': 'Now that we have an option to create a new transfer function from a rational expression, a similar thing can be done for TFM. ', 'comment_created': datetime.datetime(2021, 6, 24, 12, 11, 38, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 657893396, 'comment_body': ""> We don't yet allow the substitution of `var` in `TransferFunction`;\r\n\r\nAlthough, I think we might need this while evaluating a transfer function over a range of frequencies."", 'comment_created': datetime.datetime(2021, 6, 24, 12, 17, 39, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 657920061, 'comment_body': ""Basic instances should extract properties from their args and should not use other internal variables e.g.:\r\n```\r\nclass My(Basic):\r\n    def __new__(cls, var):\r\n        obj = super().__new__(var)\r\n    @property\r\n    def var(self):\r\n        return self.args[0]\r\n```\r\nThere can be exceptions to this but the classes in this module don't have any reason to be exceptional."", 'comment_created': datetime.datetime(2021, 6, 24, 12, 54, 45, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 657921117, 'comment_body': ""> We don't yet allow the substitution of `var` in `TransferFunction`;\r\n\r\nWhy doesn't that work?"", 'comment_created': datetime.datetime(2021, 6, 24, 12, 55, 57, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 657998311, 'comment_body': 'See https://github.com/sympy/sympy/pull/19390#issuecomment-640556483.', 'comment_created': datetime.datetime(2021, 6, 24, 14, 26, 41, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 658176344, 'comment_body': 'Why are we calling `doit()` here? In my previous PR, I defined a `doit()` method in TFM class which:\r\n```\r\n        Returns the resultant transfer function matrix obtained after evaluating\r\n        the transfer functions in series or parallel configurations (if any present)\r\n        for all entries in a transfer function matrix.\r\n```\r\nNow it does simplify things, but is this the right way of ""doing"" it?', 'comment_created': datetime.datetime(2021, 6, 24, 18, 11, 41, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 658181140, 'comment_body': ""OK, let's go with this."", 'comment_created': datetime.datetime(2021, 6, 24, 18, 18, 35, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 658195475, 'comment_body': '> Why are we calling `doit()` here? In my previous PR, I defined a `doit()` method in TFM class which:\r\n> \r\n> ```\r\n>         Returns the resultant transfer function matrix obtained after evaluating\r\n>         the transfer functions in series or parallel configurations (if any present)\r\n>         for all entries in a transfer function matrix.\r\n> ```\r\n> \r\n> Now it does simplify things, but is this the right way of ""doing"" it?\r\n\r\nI am calling `doit` here for the formation of the `obj._expr_mat`. The actual state of the `Series` or `Parallel` element passed is not changed. \r\n\r\nhttps://github.com/sympy/sympy/blob/7a6c86302e7fc02cdcfabfee733dc17c5d34cdbc/sympy/physics/control/lti.py#L1661-L1663', 'comment_created': datetime.datetime(2021, 6, 24, 18, 41, 10, tzinfo=datetime.timezone.utc), 'commenter': 'akshanshbhatt', 'type': 'User'}, {'comment_id': 658540104, 'comment_body': 'I got your point. I have removed `doit()`.', 'comment_created': datetime.datetime(2021, 6, 25, 7, 37, 30, tzinfo=datetime.timezone.utc), 'commenter': 'akshanshbhatt', 'type': 'User'}, {'comment_id': 658987786, 'comment_body': '```suggestion\r\n    def from_Matrix(cls, matrix, var):\r\n```', 'comment_created': datetime.datetime(2021, 6, 25, 19, 21, 39, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 658991450, 'comment_body': '```suggestion\r\n        >>> expr_1 = (s + 5)/(3*s**2 + 2*s + 1)\r\n        >>> expr_2 = 1/s\r\n        >>> expr_3 = 1/s**2\r\n        >>> expr_4 = 1/(s + 1)\r\n```', 'comment_created': datetime.datetime(2021, 6, 25, 19, 29, 9, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 658997174, 'comment_body': 'and Series/Parallel configurations too. ', 'comment_created': datetime.datetime(2021, 6, 25, 19, 40, 35, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 659001503, 'comment_body': '```suggestion\r\n            A complex variable of the Laplace transform which will be used by\r\n            all the ``TransferFunction`` objects in ``TransferFunctionMatrix``.\r\n```\r\nAvoid writing _object(s)_ everywhere. ', 'comment_created': datetime.datetime(2021, 6, 25, 19, 49, 16, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 659002865, 'comment_body': '```suggestion\r\nfrom sympy import (symbols, factor, Function, simplify, exp, oo, I, \r\n    S, Mul, Pow, Add, Rational, sqrt, CRootOf)\r\nfrom sympy.core.containers import Tuple\r\nfrom sympy.matrices import ImmutableMatrix, Matrix\r\nfrom sympy.physics.control import (TransferFunction, Series, Parallel,\r\n    Feedback, TransferFunctionMatrix)\r\n```', 'comment_created': datetime.datetime(2021, 6, 25, 19, 51, 58, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 659589342, 'comment_body': 'Consider using `enumerate`?', 'comment_created': datetime.datetime(2021, 6, 28, 8, 37, 16, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 659592976, 'comment_body': 'All public methods need docstrings.', 'comment_created': datetime.datetime(2021, 6, 28, 8, 42, 5, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 659600452, 'comment_body': '```suggestion\r\n\r\n```', 'comment_created': datetime.datetime(2021, 6, 28, 8, 52, 1, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 659602570, 'comment_body': 'Add one such example in the class level docstring?', 'comment_created': datetime.datetime(2021, 6, 28, 8, 54, 49, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 659615612, 'comment_body': ""I don't understand this. If you say the following is true:\r\n>  Actual poles of a MIMO system are NOT the poles of individual elements.\r\n\r\nThen why are you doing it this way? I don't think we need two methods to find poles."", 'comment_created': datetime.datetime(2021, 6, 28, 9, 12, 44, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 659755950, 'comment_body': ""This block seems to be repeated in a few places. Why don't all classes just have a method of the same name?"", 'comment_created': datetime.datetime(2021, 6, 28, 12, 49, 18, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 659766516, 'comment_body': 'I thought that the `to_expr` method for `Series` and `Parallel` objects might not have any application for the end-user. However, in the `TransferFunction` class, @namannimmo10 demonstrated a few use cases (https://github.com/sympy/sympy/pull/21634#discussion_r654944089) where it was genuinely helpful for the user.', 'comment_created': datetime.datetime(2021, 6, 28, 13, 3, 51, tzinfo=datetime.timezone.utc), 'commenter': 'akshanshbhatt', 'type': 'User'}, {'comment_id': 659782486, 'comment_body': 'Firstly, what I meant was - _Actual poles of a MIMO system are NOT **always** the poles of individual elements_. For an uncoupled TFM, the poles of the system are **poles of the individual components**. It might be beneficial for the user to visualize all the poles and zeros of the elements at once. Later, when adding the Poles and Zeros of the system, a beginner user might find it convenient to compare the poles and zeros to element-wise poles and zeros and get an intuitive understanding of the MIMO system stability. We can add an example in the textbook problems section where we could ask the user to find the poles and zeros of the system and compare them with the poles and zeros of the individual elements. In my opinion, these methods have practical use cases, and we should keep them.', 'comment_created': datetime.datetime(2021, 6, 28, 13, 24, 29, tzinfo=datetime.timezone.utc), 'commenter': 'akshanshbhatt', 'type': 'User'}, {'comment_id': 659908658, 'comment_body': 'This code is somewhat convoluted:\r\n```\r\narg = [[element.doit() for element in row] for row in self.args[0]]\r\nreturn TransferFunctionMatrix(arg)\r\n```\r\nThen again is that even needed?\r\n\r\nSurely the `Basic.doit` method already handles this.', 'comment_created': datetime.datetime(2021, 6, 28, 15, 49, 42, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 659909433, 'comment_body': 'Do you need to test `isinstance` here? Why not just call `doit` on the argument regardless?', 'comment_created': datetime.datetime(2021, 6, 28, 15, 50, 45, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 659910147, 'comment_body': ""The methods should just have the same name for all classes so you don't have to check `isinstance` like this"", 'comment_created': datetime.datetime(2021, 6, 28, 15, 51, 39, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 659910870, 'comment_body': ""These should have a common superclass that you can check for so you don't need an explicit list of types in a situation like this."", 'comment_created': datetime.datetime(2021, 6, 28, 15, 52, 29, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 659915160, 'comment_body': ""These tests are very repetitive and seem excessive for testing something as basic as this. If there are no corner cases to handle then one test is fine.\r\n\r\nNote that having too many tests is actually a problem - it's a waste of code as well as a waste of time every time the test suite runs. The excessive tests make it harder to see what is meaningfully being tested when looking at the test suite."", 'comment_created': datetime.datetime(2021, 6, 28, 15, 57, 50, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 659916215, 'comment_body': 'Should this not look different from an ordinary matrix in some way? It can be very confusing when different objects print the same but behave differently.', 'comment_created': datetime.datetime(2021, 6, 28, 15, 59, 9, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 659917423, 'comment_body': 'This could have a `see also` for poles.', 'comment_created': datetime.datetime(2021, 6, 28, 16, 0, 39, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 659953963, 'comment_body': 'I have removed redundant tests.', 'comment_created': datetime.datetime(2021, 6, 28, 16, 52, 4, tzinfo=datetime.timezone.utc), 'commenter': 'akshanshbhatt', 'type': 'User'}, {'comment_id': 659958909, 'comment_body': 'It is represented like a typical matrix in every academic material I have read related to it, even in control packages in other modules. If you have any suggestions then maybe we can discuss them.', 'comment_created': datetime.datetime(2021, 6, 28, 16, 57, 11, tzinfo=datetime.timezone.utc), 'commenter': 'akshanshbhatt', 'type': 'User'}, {'comment_id': 659963147, 'comment_body': ""Don't access `args` directly like this. You should not presume the layout of the args of a class from outside. Instead the class should provide accessors like `mat.cols`.\r\n\r\nIn any case this code can just be:\r\n```python\r\nto_tf = lambda expr: TransferFunction.from_rational_expression(expr, var)\r\narg = [[to_tf(expr) for expr in row] for row in mat.tolist()]\r\n```"", 'comment_created': datetime.datetime(2021, 6, 28, 17, 2, 19, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 659963602, 'comment_body': 'Can you give an example?\r\nI am very clear about what you are trying to say, but what should I name the class?', 'comment_created': datetime.datetime(2021, 6, 28, 17, 2, 58, tzinfo=datetime.timezone.utc), 'commenter': 'akshanshbhatt', 'type': 'User'}, {'comment_id': 659968423, 'comment_body': ""Is it really necessary to have so many examples and for them to be so long?\r\n\r\nNote that these examples are for the documentation and are to be seen by users. If they do not convey information to users then they shouldn't be there.\r\n\r\nI would have thought that this could just be one example:\r\n```python\r\n>>> M = Matrix([[s, 1/s], [1/(s+1), s]])\r\n>>> Mtf = TransferFunctionMatrix(M, s)\r\n>>> pprint(Mtf)\r\n```\r\nAs far as I can tell the other examples don't really convey any meaningful information. Since this prints the same as normal matrix, printing the matrix is not really informative. Perhaps it would be better to also show some property that `Mtf` has that `M` does not like the poles or var or something.\r\n\r\nAlso why does this need to be `ImmutableMatrix`. Normal `Matrix` sympifies to `ImmutableMatrix` so if you use `sympify` then a normal `Matrix` could be used here.\r\n\r\nAlso Mathematica's version of this allows a matrix of numerators and a matrix of denominators. Is that supported here? Perhaps there could be a separate method for that."", 'comment_created': datetime.datetime(2021, 6, 28, 17, 10, 35, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 659971583, 'comment_body': 'I would aim for the simplest demonstration possible here:\r\n```\r\n>>> TFM = TransferFunction.from_Matrix([[s], [1/s]], s)\r\n>>> print(TFM)\r\n>>> TFM.num_outputs\r\n2\r\n```\r\nMultiple examples are hardly needed for something this simple. What would be more useful is an explicit statement that this is just the number of rows in the matrix.\r\n\r\nThis could have a see also for `num_inputs`', 'comment_created': datetime.datetime(2021, 6, 28, 17, 15, 19, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 659974043, 'comment_body': 'Do we really need more than one of these? ', 'comment_created': datetime.datetime(2021, 6, 28, 17, 19, 10, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 659974601, 'comment_body': ""I can imagine that maybe two or three might be needed for full line coverage but we certainly don't need to repeat this 7 times"", 'comment_created': datetime.datetime(2021, 6, 28, 17, 19, 59, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 659977809, 'comment_body': ""The lazy is to call it something like `TransferFunctionBase`. That's clear to programmers but makes no mathematical sense to users. For users it's better if you have a meaningful name for the kinds of objects that can go into a `TransferFunctionMatrix`.\r\n\r\nIt would be the superclass of the others and would define the common methods like `to_expr`. The name should match up with whatever these conceptually represent if possible."", 'comment_created': datetime.datetime(2021, 6, 28, 17, 24, 49, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 659978799, 'comment_body': ""If it is a Matrix then we don't need a separate class. Apparently it needs to be different from a matrix so it should probably look a little different. For example in Mathematica it seems to display with a funny `tau` next to it."", 'comment_created': datetime.datetime(2021, 6, 28, 17, 26, 24, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 659980693, 'comment_body': 'There can be a reason for having multiple cases in order to test the corner cases like `TransferFunctionMatrix([])`.', 'comment_created': datetime.datetime(2021, 6, 28, 17, 29, 8, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 659991959, 'comment_body': 'It makes sense, but what can be the best way to add this `tau` here? \r\nThe `tau` in Mathematica is reminiscent of `TransferFunction`, and similarly, they have curly `S` for State Space representation. A comparable argument should be valid for `TransferFunction` and `Expr`. Should we also consider adding `tau` to `TransferFunction`?', 'comment_created': datetime.datetime(2021, 6, 28, 17, 42, 9, tzinfo=datetime.timezone.utc), 'commenter': 'akshanshbhatt', 'type': 'User'}, {'comment_id': 659999948, 'comment_body': "">Also Mathematica's version of this allows a matrix of numerators and a matrix of denominators. Is that supported here? Perhaps there could be a separate method for that.\r\n\r\nThe API has not been finalized yet, so I plan to add it in a separate PR later."", 'comment_created': datetime.datetime(2021, 6, 28, 17, 53, 32, tzinfo=datetime.timezone.utc), 'commenter': 'akshanshbhatt', 'type': 'User'}, {'comment_id': 660008669, 'comment_body': '@namannimmo10, what do you suggest?', 'comment_created': datetime.datetime(2021, 6, 28, 18, 7, 21, tzinfo=datetime.timezone.utc), 'commenter': 'akshanshbhatt', 'type': 'User'}, {'comment_id': 660030529, 'comment_body': ""We did consider introducing a class called `TransferFunctionExpr` last year so that we could subclass `TransferFunction`, `Series`, and `Parallel` from it and make `__add__`, `__mul__` overloaded for `TransferFunctionExpr` with `Series` and `Parallel`. It could somewhat mimic the `MatrixExpr` superclass in the matrices module:\r\nhttps://github.com/sympy/sympy/blob/200788d6d52657ae36d21737ed780471ec38be27/sympy/matrices/expressions/matexpr.py#L35\r\nFinally, though, didn't find any harm in overloading operators in Series and Parallel classes. \r\n\r\nI'm not sure if we really need to introduce such a class even now, but since @oscarbenjamin is well versed with the matrices module, maybe it _is_ needed to structure the code. Can this be done later on?"", 'comment_created': datetime.datetime(2021, 6, 28, 18, 42, 39, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 660050355, 'comment_body': ""I wouldn't try to emulate the design of the matrices module. The reason for wanting a superclass is not so the subclasses can share code but rather:\r\n\r\n1. Be able to define in a meaningful way what kinds of objects can be used in what situations\r\n2. Define the interface that is expected of those objects\r\n3. Document that clearly for users and contributors"", 'comment_created': datetime.datetime(2021, 6, 28, 19, 14, 39, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 660292480, 'comment_body': '@namannimmo10 @oscarbenjamin, should I go ahead with adding `tau` as a subscript?\r\n\r\n![image](https://user-images.githubusercontent.com/53227127/123742290-0773fc80-d8c9-11eb-83ef-034fa31701c6.png)\r\n\r\nAfter it is implemented, `TransferFunctionMatrix` would render like this.\r\n\r\n', 'comment_created': datetime.datetime(2021, 6, 29, 5, 31, 49, tzinfo=datetime.timezone.utc), 'commenter': 'akshanshbhatt', 'type': 'User'}, {'comment_id': 661677692, 'comment_body': 'Not yet tested: `doit`, `elem_poles`, `elem_zeros`, `subs`, et al.', 'comment_created': datetime.datetime(2021, 6, 30, 17, 28, 34, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 661685208, 'comment_body': '```python\r\n>>> G = TransferFunction(s, s + 1, s)\r\n>>> TransferFunctionMatrix([G])\r\nTraceback (most recent call last):\r\n  File ""<stdin>"", line 1, in <module>\r\n  File ""/home/namannimmo/oss/sympy/sympy/physics/control/lti.py"", line 1703, in __new__\r\n    var = arg[0][0].var\r\nTypeError: \'TransferFunction\' object is not subscriptable\r\n```\r\nRaise an error mentioning `arg` can only be a nested list. Add test for that as well.', 'comment_created': datetime.datetime(2021, 6, 30, 17, 39, 57, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 661686607, 'comment_body': '```suggestion\r\n    # length of all the lists in TFM should be equal.\r\n    raises(ValueError, lambda: TransferFunctionMatrix([[TF1], [TF3, tf5]]))\r\n    raises(ValueError, lambda: TransferFunctionMatrix([[TF1, TF3], [tf5]]))\r\n\r\n    # lists only support transfer functions in them.\r\n    raises(TypeError, lambda: TransferFunctionMatrix([[TF1, TF2], [TF3, Matrix([1, 2])]]))\r\n    raises(TypeError, lambda: TransferFunctionMatrix([[TF1, Matrix([1, 2])], [TF3, TF2]]))\r\n```', 'comment_created': datetime.datetime(2021, 6, 30, 17, 41, 57, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 661952780, 'comment_body': 'We can add `tau` as a superscript for it to look different from an ordinary matrix.', 'comment_created': datetime.datetime(2021, 7, 1, 3, 56, 9, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 661978579, 'comment_body': '> We can add `tau` as a superscript for it to look different from an ordinary matrix.\r\n\r\nSuperscript might confuse users with exponent. Subscript is more apt, in my opinion.', 'comment_created': datetime.datetime(2021, 7, 1, 5, 8, 26, tzinfo=datetime.timezone.utc), 'commenter': 'akshanshbhatt', 'type': 'User'}, {'comment_id': 661979182, 'comment_body': 'Also, should I change only the latex method or both latex and pprint?', 'comment_created': datetime.datetime(2021, 7, 1, 5, 10, 16, tzinfo=datetime.timezone.utc), 'commenter': 'akshanshbhatt', 'type': 'User'}, {'comment_id': 662067716, 'comment_body': 'Both of them.', 'comment_created': datetime.datetime(2021, 7, 1, 7, 58, 49, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 662100905, 'comment_body': ""Using `temp` as a variable name is almost always a bad choice. The `temp` list isn't needed anyway:\r\n```\r\nreturn Mul(*(arg.to_expr() for arg in self.args))\r\n```"", 'comment_created': datetime.datetime(2021, 7, 1, 8, 44, 57, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 662105425, 'comment_body': 'This is\r\n```\r\nreturn [element.doit().zeros() for row in self.args[0] for element in row]\r\n```\r\nIt would probably be useful to add a `._flat()` method that returns all elements as a flattened list and then this would just be:\r\n```\r\nreturn [element.doit().zeros() for element in self._flat()]\r\n```', 'comment_created': datetime.datetime(2021, 7, 1, 8, 51, 2, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 662370725, 'comment_body': '@namannimmo10, I have updated the latex support for TFM, and it renders as expected. Here is a sample -\r\n\r\n![image](https://user-images.githubusercontent.com/53227127/124145286-490fcd80-daaa-11eb-8e93-371f87c890d2.png)\r\n\r\nHowever, I am not well versed with the `pprint` parser. I tried to implement subscript in `pprint`, and the results were unsatisfactory. If you could help.\r\n', 'comment_created': datetime.datetime(2021, 7, 1, 15, 3, 44, tzinfo=datetime.timezone.utc), 'commenter': 'akshanshbhatt', 'type': 'User'}, {'comment_id': 662379173, 'comment_body': '> This is\r\n> \r\n> ```\r\n> return [element.doit().zeros() for row in self.args[0] for element in row]\r\n> ```\r\n\r\n@oscarbenjamin, actually, the `zeros_list` variable mentioned above is not a flat list. I have anyways added the `_flat()` method as it would surely be useful in later phases.\r\n\r\n', 'comment_created': datetime.datetime(2021, 7, 1, 15, 14, 5, tzinfo=datetime.timezone.utc), 'commenter': 'akshanshbhatt', 'type': 'User'}, {'comment_id': 662410964, 'comment_body': ""I think in this case you need to define `_print_TransferFunctionMatrix` in _mathml.py_ file. Once you're done with that, one test can be added in _test_mathml.py_."", 'comment_created': datetime.datetime(2021, 7, 1, 15, 54, 45, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 662427709, 'comment_body': ""> I think in this case you need to define `_print_TransferFunctionMatrix` in _mathml.py_ file. Once you're done with that, one test can be added in _test_mathml.py_.\r\n\r\nI'll do that, but how will the MathML parser help us in getting the pretty-printed output?"", 'comment_created': datetime.datetime(2021, 7, 1, 16, 17, 48, tzinfo=datetime.timezone.utc), 'commenter': 'akshanshbhatt', 'type': 'User'}, {'comment_id': 662445491, 'comment_body': ""Both `Matrix` and `pprint` can be imported as \r\n```\r\nfrom sympy import Matrix, pprint\r\n```\r\nIn the docs we should recommend that top-level names be imported in this way because we don't want users to import directly from submodules like `sympy.matrices`."", 'comment_created': datetime.datetime(2021, 7, 1, 16, 45, 11, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 662528346, 'comment_body': 'This comment applies to all of the docstrings', 'comment_created': datetime.datetime(2021, 7, 1, 19, 3, 49, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}]","[{'commit_sha': 'bea4dead1f73b4a330bd2d56b8be20b382ded1ee', 'committer_username': 'namannimmo10', 'committer_name': 'Naman Gera', 'committer_email': 'namangera15@gmail.com', 'commit_date': datetime.datetime(2018, 9, 5, 15, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fee062f7fac80f809387d99b1886d2d0d3c206e1', 'committer_username': 'namannimmo10', 'committer_name': 'Naman Gera', 'committer_email': 'namangera15@gmail.com', 'commit_date': datetime.datetime(2018, 9, 5, 15, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f0d6824fbff17e3aeecdfdfa50302dd6d46c8110', 'committer_username': 'namannimmo10', 'committer_name': 'Naman Gera', 'committer_email': 'namangera15@gmail.com', 'commit_date': datetime.datetime(2018, 9, 5, 15, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '52031aa49802f65c1a96a7ffb1a13460fff1f3e9', 'committer_username': 'namannimmo10', 'committer_name': 'Naman Gera', 'committer_email': 'namangera15@gmail.com', 'commit_date': datetime.datetime(2018, 9, 5, 15, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '67f0342e1e5d6af9a99e0409246ef4cd0191781e', 'committer_username': 'namannimmo10', 'committer_name': 'Naman Gera', 'committer_email': 'namangera15@gmail.com', 'commit_date': datetime.datetime(2018, 9, 5, 15, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '862dfefe3d862a492f06fc438f305c0a1de12029', 'committer_username': 'namannimmo10', 'committer_name': 'Naman Gera', 'committer_email': 'namangera15@gmail.com', 'commit_date': datetime.datetime(2018, 9, 5, 15, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bb1e375f0f777c468682fef96858c03a000261a6', 'committer_username': 'namannimmo10', 'committer_name': 'Naman Gera', 'committer_email': 'namangera15@gmail.com', 'commit_date': datetime.datetime(2018, 9, 5, 15, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '490ee3ac6319cf700d0353c3391bedd88e3f3b96', 'committer_username': 'namannimmo10', 'committer_name': 'Naman Gera', 'committer_email': 'namangera15@gmail.com', 'commit_date': datetime.datetime(2018, 9, 5, 15, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e8de54042aba8af1f33b868d3458ba630a5e8d68', 'committer_username': 'namannimmo10', 'committer_name': 'Naman Gera', 'committer_email': 'namangera15@gmail.com', 'commit_date': datetime.datetime(2018, 9, 5, 15, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '017a75e558c5fae6ee4bf15def743402c4708945', 'committer_username': 'namannimmo10', 'committer_name': 'Naman Gera', 'committer_email': 'namangera15@gmail.com', 'commit_date': datetime.datetime(2018, 9, 5, 15, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cda75975e3851e7e392dce5799d145162e40e979', 'committer_username': 'namannimmo10', 'committer_name': 'Naman Gera', 'committer_email': 'namangera15@gmail.com', 'commit_date': datetime.datetime(2018, 9, 5, 15, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '69b0bcaf8e6cb76ed0e6badf12121ac31ba947b7', 'committer_username': 'namannimmo10', 'committer_name': 'Naman Gera', 'committer_email': 'namangera15@gmail.com', 'commit_date': datetime.datetime(2018, 9, 5, 15, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0d463de45f00f757d4a42bf6996391083b252576', 'committer_username': 'namannimmo10', 'committer_name': 'Naman Gera', 'committer_email': 'namangera15@gmail.com', 'commit_date': datetime.datetime(2018, 9, 5, 15, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '36e53efc73b7a8ac804c184cebe77a8d33805004', 'committer_username': 'namannimmo10', 'committer_name': 'Naman Gera', 'committer_email': 'namangera15@gmail.com', 'commit_date': datetime.datetime(2018, 9, 5, 15, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '932606bd8b7295fd25ede50f3f97120db8516824', 'committer_username': 'namannimmo10', 'committer_name': 'Naman Gera', 'committer_email': 'namangera15@gmail.com', 'commit_date': datetime.datetime(2018, 9, 5, 15, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '880fb24190ba3b8bae9cfaa90565cb51345addbe', 'committer_username': 'namannimmo10', 'committer_name': 'Naman Gera', 'committer_email': 'namangera15@gmail.com', 'commit_date': datetime.datetime(2018, 9, 5, 15, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'faad68410f5d99115c1af5a8b553fc3ab8264f43', 'committer_username': 'namannimmo10', 'committer_name': 'Naman Gera', 'committer_email': 'namangera15@gmail.com', 'commit_date': datetime.datetime(2018, 9, 5, 15, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7cc4c9eea3d50e4ed6d9644a24d315c5dcf1494b', 'committer_username': 'namannimmo10', 'committer_name': 'Naman Gera', 'committer_email': 'namangera15@gmail.com', 'commit_date': datetime.datetime(2018, 9, 5, 15, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dc8dae74840c1407f7cdff62bf331d8db76a5693', 'committer_username': 'namannimmo10', 'committer_name': 'Naman Gera', 'committer_email': 'namangera15@gmail.com', 'commit_date': datetime.datetime(2018, 9, 5, 15, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'efa73aec1f6ef9a9b675c6f5c8993cc1070c13ca', 'committer_username': 'namannimmo10', 'committer_name': 'Naman Gera', 'committer_email': 'namangera15@gmail.com', 'commit_date': datetime.datetime(2018, 9, 5, 15, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '481e692d0235b937a9acd10861bff993c81f78b1', 'committer_username': 'namannimmo10', 'committer_name': 'Naman Gera', 'committer_email': 'namangera15@gmail.com', 'commit_date': datetime.datetime(2018, 9, 5, 15, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '77eff9a43b4d45e9a990d95d13d1dff0c566d771', 'committer_username': 'namannimmo10', 'committer_name': 'Naman Gera', 'committer_email': 'namangera15@gmail.com', 'commit_date': datetime.datetime(2018, 9, 5, 15, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fb7e7f52e2635ef4b8aed349ae49c6add2862bba', 'committer_username': 'namannimmo10', 'committer_name': 'Naman Gera', 'committer_email': 'namangera15@gmail.com', 'commit_date': datetime.datetime(2018, 9, 5, 15, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '10e3f86a34e3fb785ded0e5e00c7eafa0d977b8c', 'committer_username': 'namannimmo10', 'committer_name': 'Naman Gera', 'committer_email': 'namangera15@gmail.com', 'commit_date': datetime.datetime(2018, 9, 5, 15, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3e443ed4aff436e1cd9e1cd433217ea2b854ebb1', 'committer_username': 'namannimmo10', 'committer_name': 'Naman Gera', 'committer_email': 'namangera15@gmail.com', 'commit_date': datetime.datetime(2018, 9, 5, 15, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd7fe3e25be8791147597f02af6799b45b4bc2b6d', 'committer_username': 'namannimmo10', 'committer_name': 'Naman Gera', 'committer_email': 'namangera15@gmail.com', 'commit_date': datetime.datetime(2018, 9, 5, 15, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e138dea9f7b0aff453af1fc3b71a6d459c817078', 'committer_username': 'namannimmo10', 'committer_name': 'Naman Gera', 'committer_email': 'namangera15@gmail.com', 'commit_date': datetime.datetime(2018, 9, 5, 15, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e81d7ad929ef14b6b6b94df75f87be4f7b66e1a7', 'committer_username': 'namannimmo10', 'committer_name': 'Naman Gera', 'committer_email': 'namangera15@gmail.com', 'commit_date': datetime.datetime(2018, 9, 5, 15, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '42d890f4d6faeb8cb956d69a716e73db8923e1c0', 'committer_username': 'namannimmo10', 'committer_name': 'Naman Gera', 'committer_email': 'namangera15@gmail.com', 'commit_date': datetime.datetime(2018, 9, 5, 15, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c5394f264b511c0dc0d04a7ce1bd62ab271ed20e', 'committer_username': 'namannimmo10', 'committer_name': 'Naman Gera', 'committer_email': 'namangera15@gmail.com', 'commit_date': datetime.datetime(2018, 9, 5, 15, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1bb809cd005df5a3eb7deb1e355c84a885818394', 'committer_username': 'namannimmo10', 'committer_name': 'Naman Gera', 'committer_email': 'namangera15@gmail.com', 'commit_date': datetime.datetime(2018, 9, 5, 15, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '515346aa482c30e2f92c8118b60bc2657e250a18', 'committer_username': 'namannimmo10', 'committer_name': 'Naman Gera', 'committer_email': 'namangera15@gmail.com', 'commit_date': datetime.datetime(2018, 9, 5, 15, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1b2a12623a243ccd34598dccc6c593b3544ebf56', 'committer_username': 'namannimmo10', 'committer_name': 'Naman Gera', 'committer_email': 'namangera15@gmail.com', 'commit_date': datetime.datetime(2018, 9, 5, 15, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c570e04dd4433fda757d0ce6106d299a32f98ff7', 'committer_username': 'namannimmo10', 'committer_name': 'Naman Gera', 'committer_email': 'namangera15@gmail.com', 'commit_date': datetime.datetime(2018, 9, 5, 15, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2d2f192e6ba1c523b84952bd2b97ede3f7516328', 'committer_username': 'namannimmo10', 'committer_name': 'Naman Gera', 'committer_email': 'namangera15@gmail.com', 'commit_date': datetime.datetime(2018, 9, 5, 15, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2b8aa82324b1b713ec69dc75867d33a30c4b39db', 'committer_username': 'namannimmo10', 'committer_name': 'Naman Gera', 'committer_email': 'namangera15@gmail.com', 'commit_date': datetime.datetime(2018, 9, 5, 15, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '19a4c3c0e39ac0d2e571e4f55b8dd636f3b28f25', 'committer_username': 'namannimmo10', 'committer_name': 'Naman Gera', 'committer_email': 'namangera15@gmail.com', 'commit_date': datetime.datetime(2018, 9, 5, 15, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4eb606eb38746abb9b19d92229abaa196ff1c16e', 'committer_username': 'namannimmo10', 'committer_name': 'Naman Gera', 'committer_email': 'namangera15@gmail.com', 'commit_date': datetime.datetime(2018, 9, 5, 15, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c35ae698384e58aa145a25370a0d3d458e179b78', 'committer_username': 'akshanshbhatt', 'committer_name': 'akshānsh', 'committer_email': 'info@akshansh.me', 'commit_date': datetime.datetime(2019, 7, 23, 14, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cab365907d01bcdf1c81d32f31929f9ed9bb3eb0', 'committer_username': 'akshanshbhatt', 'committer_name': 'akshānsh', 'committer_email': 'info@akshansh.me', 'commit_date': datetime.datetime(2019, 7, 23, 14, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '24356e2bd55f451be1062763a6f0560920beb529', 'committer_username': 'akshanshbhatt', 'committer_name': 'akshānsh', 'committer_email': 'info@akshansh.me', 'commit_date': datetime.datetime(2019, 7, 23, 14, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7a7949eabe385ee6dc5bb4668299738d953c55a8', 'committer_username': 'akshanshbhatt', 'committer_name': 'akshānsh', 'committer_email': 'info@akshansh.me', 'commit_date': datetime.datetime(2019, 7, 23, 14, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1ce1d2579ccfa4781c35eeab37b812a3d065fd71', 'committer_username': 'akshanshbhatt', 'committer_name': 'akshānsh', 'committer_email': 'info@akshansh.me', 'commit_date': datetime.datetime(2019, 7, 23, 14, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a8b2c1c42bbbaa73f375a864d70d1516986b4379', 'committer_username': 'akshanshbhatt', 'committer_name': 'akshānsh', 'committer_email': 'info@akshansh.me', 'commit_date': datetime.datetime(2019, 7, 23, 14, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b3d6fa82ad71b1a23ce49cca1483b7482b12da7e', 'committer_username': 'akshanshbhatt', 'committer_name': 'akshānsh', 'committer_email': 'info@akshansh.me', 'commit_date': datetime.datetime(2019, 7, 23, 14, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2265ae1b53cbb93bcc61e73740e9697990b97af4', 'committer_username': 'akshanshbhatt', 'committer_name': 'akshānsh', 'committer_email': 'info@akshansh.me', 'commit_date': datetime.datetime(2019, 7, 23, 14, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8b92ca825ea607127e367de11d2e07eb79ed9d3b', 'committer_username': 'akshanshbhatt', 'committer_name': 'akshānsh', 'committer_email': 'info@akshansh.me', 'commit_date': datetime.datetime(2019, 7, 23, 14, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'efd02e254fdc66d94d95068c5b6f824f47869336', 'committer_username': 'akshanshbhatt', 'committer_name': 'akshānsh', 'committer_email': 'info@akshansh.me', 'commit_date': datetime.datetime(2019, 7, 23, 14, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ccc4aeca5dcd17a56a609ab7d8dc6a31dec647d7', 'committer_username': 'akshanshbhatt', 'committer_name': 'akshānsh', 'committer_email': 'info@akshansh.me', 'commit_date': datetime.datetime(2019, 7, 23, 14, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8131ee664b60614d0faf1499351fa3d4f493a01c', 'committer_username': 'akshanshbhatt', 'committer_name': 'akshānsh', 'committer_email': 'info@akshansh.me', 'commit_date': datetime.datetime(2019, 7, 23, 14, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7a6c86302e7fc02cdcfabfee733dc17c5d34cdbc', 'committer_username': 'akshanshbhatt', 'committer_name': 'akshānsh', 'committer_email': 'info@akshansh.me', 'commit_date': datetime.datetime(2019, 7, 23, 14, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd3c152af7ef23a1c3ffbbd497064a4499281ffb6', 'committer_username': 'akshanshbhatt', 'committer_name': 'akshānsh', 'committer_email': 'info@akshansh.me', 'commit_date': datetime.datetime(2019, 7, 23, 14, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6ed29affac2acf99153a32b6e9ce7370fc940a42', 'committer_username': 'akshanshbhatt', 'committer_name': 'akshānsh', 'committer_email': 'info@akshansh.me', 'commit_date': datetime.datetime(2019, 7, 23, 14, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8f39267694ff8dfa126a46097753e19ba57d6fe4', 'committer_username': 'akshanshbhatt', 'committer_name': 'akshānsh', 'committer_email': 'info@akshansh.me', 'commit_date': datetime.datetime(2019, 7, 23, 14, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '08103ce289990171bc86c0dba7a769e6f1232778', 'committer_username': 'akshanshbhatt', 'committer_name': 'akshānsh', 'committer_email': 'info@akshansh.me', 'commit_date': datetime.datetime(2019, 7, 23, 14, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cdf1a9d98a353df2e96b0395d41fbde91122b7f0', 'committer_username': 'akshanshbhatt', 'committer_name': 'akshānsh', 'committer_email': 'info@akshansh.me', 'commit_date': datetime.datetime(2019, 7, 23, 14, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'eb26da8f878d06ac733428f596a4eb66dd24ce8d', 'committer_username': 'akshanshbhatt', 'committer_name': 'akshānsh', 'committer_email': 'info@akshansh.me', 'commit_date': datetime.datetime(2019, 7, 23, 14, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '06b9657a0ba4304435cd511867bc7ba64856cda7', 'committer_username': 'akshanshbhatt', 'committer_name': 'akshānsh', 'committer_email': 'info@akshansh.me', 'commit_date': datetime.datetime(2019, 7, 23, 14, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e687d2b53943b576cc0c6d027334ee9c464d93c2', 'committer_username': 'akshanshbhatt', 'committer_name': 'akshānsh', 'committer_email': 'info@akshansh.me', 'commit_date': datetime.datetime(2019, 7, 23, 14, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '97d0f08177473f8d2ff6c5d652c843634daffb15', 'committer_username': 'akshanshbhatt', 'committer_name': 'akshānsh', 'committer_email': 'info@akshansh.me', 'commit_date': datetime.datetime(2019, 7, 23, 14, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f251721f5eed43dbb3a2550f28e961c3834ae1fb', 'committer_username': 'akshanshbhatt', 'committer_name': 'akshānsh', 'committer_email': 'info@akshansh.me', 'commit_date': datetime.datetime(2019, 7, 23, 14, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '380b01b87fafdfb0d6f550dcf2e51b1b6a075e01', 'committer_username': 'akshanshbhatt', 'committer_name': 'akshānsh', 'committer_email': 'info@akshansh.me', 'commit_date': datetime.datetime(2019, 7, 23, 14, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b07b20f276db7dcf024df420d7a748e354dd21e2', 'committer_username': 'akshanshbhatt', 'committer_name': 'akshānsh', 'committer_email': 'info@akshansh.me', 'commit_date': datetime.datetime(2019, 7, 23, 14, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8f71ec4fce47f15196df220bb98011be45228fb4', 'committer_username': 'akshanshbhatt', 'committer_name': 'akshānsh', 'committer_email': 'info@akshansh.me', 'commit_date': datetime.datetime(2019, 7, 23, 14, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cba99f47417e596310940c7b3692dc2dd321974b', 'committer_username': 'akshanshbhatt', 'committer_name': 'akshānsh', 'committer_email': 'info@akshansh.me', 'commit_date': datetime.datetime(2019, 7, 23, 14, 35, 25, tzinfo=datetime.timezone.utc)}]",akshānsh,53227127,info@akshansh.me,User,,18,,21,32
448567569,[GSoC] Add TransferFunctionMatrix class in physics.control,"<!-- Your title above should be a short description of what
was changed. Do not include the issue number in the title. -->

#### References to other Issues or PRs
<!-- If this pull request fixes an issue, write ""Fixes #NNNN"" in that exact
format, e.g. ""Fixes #1234"" (see
https://tinyurl.com/auto-closing for more information). Also, please
write a comment on that issue linking back to this pull request once it is
open. -->
https://github.com/sympy/sympy/issues/19352

#### Brief description of what is fixed or changed
This PR introduces MIMO transfer functions in `sympy.physics.control`.

#### Other comments


#### Release Notes

<!-- Write the release notes for this release below. See
https://github.com/sympy/sympy/wiki/Writing-Release-Notes for more information
on how to write release notes. The bot will check your release notes
automatically to see if they are formatted correctly. -->

<!-- BEGIN RELEASE NOTES -->
*  physics.control
    * Added `TransferFunctionMatrix` class in physics.control
<!-- END RELEASE NOTES -->",True,19761,https://api.github.com/repos/sympy/sympy/pulls/19761,https://github.com/sympy/sympy/pull/19761,closed,1847,197,9,38,53,95,3,0,"[{'name': 'GSoC'}, {'name': 'Please take over'}, {'name': 'physics.control'}]",2020-07-14 00:02:56+00:00,2021-07-02 18:09:37+00:00,30564401.0,"353 days, 18:06:41","[{'comment_id': 456262857, 'comment_body': 'Why did you xfail this argument test? ', 'comment_created': datetime.datetime(2020, 7, 17, 7, 17, 31, tzinfo=datetime.timezone.utc), 'commenter': 'Sc0rpi0n101', 'type': 'User'}, {'comment_id': 456280728, 'comment_body': ""How many times have you used the same TFs for the tests?\nIf you've used any of these for multiple tests, just declare them globally on the top instead of doing it for every function."", 'comment_created': datetime.datetime(2020, 7, 17, 7, 55, 6, tzinfo=datetime.timezone.utc), 'commenter': 'Sc0rpi0n101', 'type': 'User'}, {'comment_id': 456306764, 'comment_body': 'https://github.com/sympy/sympy/blob/a1218a6324e023de4777dbe5c47fccbaa582e067/sympy/core/tests/test_args.py#L1\r\n\r\nArgument of `TransferFunctionMatrix` is a list of lists. ', 'comment_created': datetime.datetime(2020, 7, 17, 8, 44, 43, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 458008666, 'comment_body': 'What if someone calls this for an SISO function? Maybe you should add a raise statement for that case. ', 'comment_created': datetime.datetime(2020, 7, 21, 10, 53, 20, tzinfo=datetime.timezone.utc), 'commenter': 'Sc0rpi0n101', 'type': 'User'}, {'comment_id': 458010734, 'comment_body': 'Same here', 'comment_created': datetime.datetime(2020, 7, 21, 10, 57, 1, tzinfo=datetime.timezone.utc), 'commenter': 'Sc0rpi0n101', 'type': 'User'}, {'comment_id': 458230782, 'comment_body': 'My opinion is that SISO function can be 1*1 transfer function matrix than scalar', 'comment_created': datetime.datetime(2020, 7, 21, 16, 29, 51, tzinfo=datetime.timezone.utc), 'commenter': 'sylee957', 'type': 'User'}, {'comment_id': 463995363, 'comment_body': 'I think that this should dispatch to `__add__`', 'comment_created': datetime.datetime(2020, 8, 1, 20, 3, 11, tzinfo=datetime.timezone.utc), 'commenter': 'sylee957', 'type': 'User'}, {'comment_id': 463996029, 'comment_body': 'This can make use of extra slots to store shape and variable attributes', 'comment_created': datetime.datetime(2020, 8, 1, 20, 11, 15, tzinfo=datetime.timezone.utc), 'commenter': 'sylee957', 'type': 'User'}, {'comment_id': 464056743, 'comment_body': 'Thanks! :sweat_smile: ', 'comment_created': datetime.datetime(2020, 8, 2, 9, 47, 13, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 464064755, 'comment_body': 'I think using `Basic.__new__(cls, arg, shape, var)` would be unnecessary because `shape` and `var` attributes can be derived from `arg`.', 'comment_created': datetime.datetime(2020, 8, 2, 11, 16, 28, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 464070725, 'comment_body': ""Unfortunately, I don't think that you were deriving them, but you were storing _inputs, _outputs as mutable parametets and reusing them, and it is worse than storing them in slots"", 'comment_created': datetime.datetime(2020, 8, 2, 12, 21, 18, tzinfo=datetime.timezone.utc), 'commenter': 'sylee957', 'type': 'User'}, {'comment_id': 464082301, 'comment_body': ""OK, I will apply this suggestion. Also, note that the `str` representation of `Series` and `Parallel` will get way too longer. Just saying... \r\nAnyways, It's better for the user to use pretty-printing because normal printing is already too long and unreadable for every object. "", 'comment_created': datetime.datetime(2020, 8, 2, 14, 6, 51, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 465513423, 'comment_body': 'For future reference, it would be best to move the capitalization of these variable names to a different PR, as it makes it difficult for the reader to see the changes that are actually related to the new TransferFunctionMatrix class.', 'comment_created': datetime.datetime(2020, 8, 5, 6, 57, 34, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 465514198, 'comment_body': 'The attribute names ""outputs"" and ""inputs"" imply that they\'d return what they are. But this returns the number of outputs and number of inputs. I think that ""num_outputs"" and ""num_inputs"" are better name choices (or something similar.', 'comment_created': datetime.datetime(2020, 8, 5, 6, 59, 12, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 465515009, 'comment_body': ""Why does the user have to pass in the shape to initialize? Can't this be inferred from the dimensions of the list of transferfunctions? SymPy Matrix and NumPy array infer these, for example."", 'comment_created': datetime.datetime(2020, 8, 5, 7, 0, 54, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 465515933, 'comment_body': 'Why is this invalid? Because of ""Matrix""? I think you should follow duck typing principles here, just like other matrix-like classes. Any container class that looks like a list or list of lists with proper dimensions should work.\r\n\r\nThis example also seems to have two errors. The second one being the shape mismatch. These tests should expose one error at a time.', 'comment_created': datetime.datetime(2020, 8, 5, 7, 3, 1, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 465516248, 'comment_body': 'Why is the var ""s"" needed when it is already defined in TF1 and TF2? This should be able to be inferred.', 'comment_created': datetime.datetime(2020, 8, 5, 7, 3, 46, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 465517250, 'comment_body': 'I think this should work if dimensions match. The Matrix should be converted to a compatible TransferFunctionMatrix if possible.', 'comment_created': datetime.datetime(2020, 8, 5, 7, 5, 53, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 465517773, 'comment_body': ""It would be helpful to write a comment for each of these explaining what they are testing as it isn't apparent without searching for the definitions of the transfer functions."", 'comment_created': datetime.datetime(2020, 8, 5, 7, 7, 1, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 465685102, 'comment_body': 'Please see https://github.com/sympy/sympy/pull/19761#discussion_r463996029.', 'comment_created': datetime.datetime(2020, 8, 5, 12, 19, 53, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 465727674, 'comment_body': ""I don't see how that comment answers my question. I don't see why the shape arg or the var arg are necessary when initializing a TransferFunctionMatrix. This information is already present (implicitly) in the first argument."", 'comment_created': datetime.datetime(2020, 8, 5, 13, 30, 42, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 465730992, 'comment_body': ""Well, that's what I did in the first place. I guess I have to revert the commit because `shape` and `var` attributes can be taken out from the first argument. "", 'comment_created': datetime.datetime(2020, 8, 5, 13, 35, 47, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 465751761, 'comment_body': 'Why should you have to drop parameters if there are alternative ways like making them as optional parameters', 'comment_created': datetime.datetime(2020, 8, 5, 14, 5, 44, tzinfo=datetime.timezone.utc), 'commenter': 'sylee957', 'type': 'User'}, {'comment_id': 465785291, 'comment_body': "">  Well, that's what I did in the first place. I guess I have to revert the commit because shape and var attributes can be taken out from the first argument.\r\n\r\nWhat was the reason for adding them?\r\n"", 'comment_created': datetime.datetime(2020, 8, 5, 14, 51, 14, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 465792316, 'comment_body': 'There are some reasons from matrix computation perspective that shape parameter cannot always be dropped because it cannot represent the shape of (0, 0), (0, n), (n, 0), ..., which are often useful for describing zero rank matrix.', 'comment_created': datetime.datetime(2020, 8, 5, 15, 0, 46, tzinfo=datetime.timezone.utc), 'commenter': 'sylee957', 'type': 'User'}, {'comment_id': 465799267, 'comment_body': ""I'm not sure I understand that. sympy.Matrix doesn't require declaring the shape on instantiation, so why would this matrix-like object need to?"", 'comment_created': datetime.datetime(2020, 8, 5, 15, 10, 30, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 465801751, 'comment_body': 'Sympy matrix automatically looks up the shape from the lists if they are not explicitly stated, but stores the shape in the Basic.args\r\nSame thing can be done for transfer function matrix.', 'comment_created': datetime.datetime(2020, 8, 5, 15, 13, 55, tzinfo=datetime.timezone.utc), 'commenter': 'sylee957', 'type': 'User'}, {'comment_id': 465803320, 'comment_body': '> Same thing can be done for transfer function matrix\r\n\r\nThat sounds good to me!', 'comment_created': datetime.datetime(2020, 8, 5, 15, 16, 2, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 467314509, 'comment_body': ""> Any container class that looks like a list or list of lists with proper dimensions should work.\r\n\r\nFor now, I know how to allow `MutableMatrix` and `ImmutableMatrix` in the first argument. I'm not sure how any container class that looks like a list or list of lists will work."", 'comment_created': datetime.datetime(2020, 8, 7, 22, 36, 36, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 467367515, 'comment_body': 'You should be able to do, at least, all of these:\r\n\r\n```python\r\nTransferFunctionMatrix([[tf1, tf2], [tf3, tf4]])\r\nTransferFunctionMatrix(((tf1, tf2), (tf3, tf4)))\r\nTransferFunctionMatrix(Matrix[[tf1, tf2], [tf3, tf4]])\r\n```', 'comment_created': datetime.datetime(2020, 8, 8, 6, 1, 1, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 467455411, 'comment_body': ""> You should be able to do, at least, all of these:\r\n> \r\n> ```python\r\n> TransferFunctionMatrix([[tf1, tf2], [tf3, tf4]])\r\n> TransferFunctionMatrix(((tf1, tf2), (tf3, tf4)))\r\n> TransferFunctionMatrix(Matrix[[tf1, tf2], [tf3, tf4]])\r\n> ```\r\n\r\nAllowing multiple types like this seems like poor API to me. I personally think that it is better just to require the argument to be a Matrix if it is supposed to be a Matrix.\r\n\r\nIf you do want to allow all of these types of input then the simplest way is just to call `Matrix` on the arguments.\r\n\r\nI plan to deprecate using non-Expr classes in `Matrix`. They make it very difficult to improve matrix performance e.g. as in #19686 and lead to many bugs. Many methods need to be changed or disabled to make it possible to have non-Expr in a Matrix in a way that is vaguely consistent (see #19567 that tries to make a Matrix subclass with `Poly` as the elements).\r\n\r\nSo I think that `Matrix([[tf1, tf2], [tf3, tf4]])` should be an error. It is conceivable that we could create a mechanism that makes it possible for that to automatically translate to a different class such as `TransferFunctionMatrix` but that seems out of scope here.\r\n\r\nMy suggestion is to document that the argument should be a list of lists but allow any sequence of sequences by doing something like:\r\n```\r\ndef __new__(self, rows):\r\n    rows = [list(row) for row in rows]\r\n    ...\r\n```\r\n(Or otherwise convert to tuple of tuples in a similar way)\r\n\r\nI don't think that `Matrix([[tf1, tf2], [tf3, tf4]])` should be allowed because `TransferFunction` is non-Expr. It would make sense to have a method for converting a `TransferFunctionMatrix` to a `Matrix` but the elements of the resulting `Matrix` should be `Expr`. It could also make sense to have a function for converting from a `Matrix` to a `TransferFunctionMatrix` but it should be analogous to the way that a `TransferFunction` is constructed from an `Expr` (if there is already a way to do that)."", 'comment_created': datetime.datetime(2020, 8, 8, 11, 21, 50, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 467456207, 'comment_body': ""> Allowing multiple types like this seems like poor API to me. I personally think that it is better just to require the argument to be a Matrix if it is supposed to be a Matrix.\r\n\r\nThis is the API of NumPy and SymPy Matrix for over a decade, over 15 years for NumPy. Users of these libraries are accustom to this and I think we should support it here because of that. We have no performance issues at the moment, so you may be trying to solve a problem that doesn't exist."", 'comment_created': datetime.datetime(2020, 8, 8, 11, 32, 4, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 467456412, 'comment_body': 'My point is this should be duck typed. If you want to deprecate what arguments are allowed in Matrix, that is a separate issue. TransferFunctionMatrix should accept anything that behaves like a lists of lists, in the iterable sense.', 'comment_created': datetime.datetime(2020, 8, 8, 11, 34, 45, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 467457078, 'comment_body': ""> We have no performance issues at the moment\r\n\r\nThere are massive performance issues with matrices. Many of the performance issues listed on github were opened by you!\r\n\r\nHere's a simple example:\r\n```julia\r\nIn [1]: rref = lambda n: (randMatrix(n) + I*randMatrix(n)).rref()                                                                              \r\n\r\nIn [2]: for n in range(10): \r\n   ...:     %time ok = rref(n) \r\n   ...:                                                                                                                                        \r\nCPU times: user 1.05 ms, sys: 770 µs, total: 1.82 ms\r\nWall time: 1.21 ms\r\nCPU times: user 43.5 ms, sys: 6.59 ms, total: 50.1 ms\r\nWall time: 48.6 ms\r\nCPU times: user 321 ms, sys: 11.3 ms, total: 332 ms\r\nWall time: 333 ms\r\nCPU times: user 262 ms, sys: 1.24 ms, total: 263 ms\r\nWall time: 264 ms\r\nCPU times: user 917 ms, sys: 3.87 ms, total: 921 ms\r\nWall time: 924 ms\r\nCPU times: user 2.73 s, sys: 9.24 ms, total: 2.74 s\r\nWall time: 2.74 s\r\n^C---------------------------------------------------------------------------\r\nKeyboardInterrupt\r\n```\r\n\r\nIn any case having non-Expr in a Matrix is buggy so I think that the solution here is not allowing `Matrix([[tf1, ...]])` If `tf1` is a non-Expr `TransferFunction`. We're quite close to being able to eliminate the other cases that have non-Expr in a Matrix around the sympy codebase after #19882 "", 'comment_created': datetime.datetime(2020, 8, 8, 11, 43, 46, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 467457228, 'comment_body': '> TransferFunctionMatrix should accept anything that behaves like a lists of lists, in the iterable sense.\r\n\r\nAgreed. (That was my suggestion)', 'comment_created': datetime.datetime(2020, 8, 8, 11, 45, 26, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 467457576, 'comment_body': ""Sounds like we were on the same page. We just shouldn't add unit tests for the Matrix() input then, so we don't encode that use."", 'comment_created': datetime.datetime(2020, 8, 8, 11, 50, 18, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 467457716, 'comment_body': '> There are massive performance issues with matrices. Many of the performance issues listed on github were opened by you!\r\n\r\nI meant that we have no performance issues with `TransferFunctionMatrix`.', 'comment_created': datetime.datetime(2020, 8, 8, 11, 52, 8, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 467460578, 'comment_body': ""> I meant that we have no performance issues with TransferFunctionMatrix.\r\n\r\nAh, yes. Well not yet.\r\n\r\nI don't know what sort of calculations you intend to do with the transfer function matrix later but matrices of rational functions are handled *much* faster by #19686. See e.g. discussion in #19887.\r\n\r\nThe performance issues I refer to are actually performance issues in Matrix itself. Some of the obvious fixes are hard to implement because the implementation is limited by the fact that the class is also used with non-Expr elements in various parts of the codebase. Since it happens around sympy's own codebase I assume that a lot of downstream libraries/users are putting non-Expr into matrices as well so it's a significant backward compatibility problem. Possibly the solution is a new Matrix class (which also presents an opportunity to clean up a lot of other stuff)."", 'comment_created': datetime.datetime(2020, 8, 8, 12, 30, 36, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 467461549, 'comment_body': ""If we are not supporting Matrix() input, then I guess there's no point of converting a `Matrix` into a compatible `TransferFunctionMatrix` here."", 'comment_created': datetime.datetime(2020, 8, 8, 12, 43, 59, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 467461726, 'comment_body': '> I don\'t know what sort of calculations you intend to do with the transfer function matrix later but matrices of rational functions are handled much faster by #19686. See e.g. discussion in #19887.\r\n\r\nI don\'t fully either. This is the problem of trying to design a class without drawing up a broad set of unit tests and examples to show what we\'d like the class to do.\r\n\r\nI\'m a strong proponent of ""documentation driven development"" where we have some rich examples of intended use to be the guide. This PR is shooting in the dark.', 'comment_created': datetime.datetime(2020, 8, 8, 12, 46, 4, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 467464086, 'comment_body': 'We are implicitly supportin Matrix because it acts like a lists of lists and can contain TransferFunction objects (currently). No error should be raised for `TransferFunctionMatrix(Matrix([[TF, TF],[TF,TF]]))`.', 'comment_created': datetime.datetime(2020, 8, 8, 13, 16, 19, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 467464935, 'comment_body': '> This PR is shooting in the dark\r\n\r\nIf you think of it this way, can we just focus on writing a tutorial showing how to solve basic control problems using the already implemented functionality and also improving the documentation further in a different PR? A good set of examples can be added showing the usage of SISO transfer function and `Feedback` class. If some time would be left, I can continue my work on this PR. ', 'comment_created': datetime.datetime(2020, 8, 8, 13, 26, 31, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 467466824, 'comment_body': 'For the final weeks of GSoC I think that you should 1) finish this PR, 2) improve the documentation for the control module, and 3) add new methods to the classes you created to make them more useful (in that order of importance). But, you should be creating 2) documentation and examples as the first step to figuring out 1), otherwise noone knows what functionality you are trying to attain (including you!).', 'comment_created': datetime.datetime(2020, 8, 8, 13, 49, 10, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 467468975, 'comment_body': ""Unfortunately that's not the case for sympy's Matrix which iterates differently to numpy's 2D arrays or the deprecated `np.matrix`:\r\n```julia\r\nIn [27]: npa = np.array([[1, 2], [3, 4]])                                                                                                      \r\n\r\nIn [28]: npm = np.matrix([[1, 2], [3, 4]])                                                                                                     \r\n\r\nIn [29]: sym = Matrix([[1, 2], [3, 4]])                                                                                                        \r\n\r\nIn [30]: list(npa)                                                                                                                             \r\nOut[30]: [array([1, 2]), array([3, 4])]\r\n\r\nIn [31]: list(npm)                                                                                                                             \r\nOut[31]: [matrix([[1, 2]]), matrix([[3, 4]])]\r\n\r\nIn [32]: list(sym)                                                                                                                             \r\nOut[32]: [1, 2, 3, 4]\r\n```\r\nBoth numpy versions iterate over rows with the rows represented as 1D arrays or 1xn matrices. Iterating over a sympy Matrix yields the elements of the flattened matrix analogous to `np.array.flat`."", 'comment_created': datetime.datetime(2020, 8, 8, 14, 13, 21, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 468910919, 'comment_body': 'Why add the test at all then?', 'comment_created': datetime.datetime(2020, 8, 11, 22, 59, 40, tzinfo=datetime.timezone.utc), 'commenter': 'eric-wieser', 'type': 'User'}, {'comment_id': 468911818, 'comment_body': 'Why not just `return self._num_inputs, self._num_outputs`? Are these ever different?', 'comment_created': datetime.datetime(2020, 8, 11, 23, 2, 15, tzinfo=datetime.timezone.utc), 'commenter': 'eric-wieser', 'type': 'User'}, {'comment_id': 468912031, 'comment_body': '`SparseMatrix` is forbidden?', 'comment_created': datetime.datetime(2020, 8, 11, 23, 2, 59, tzinfo=datetime.timezone.utc), 'commenter': 'eric-wieser', 'type': 'User'}, {'comment_id': 468912149, 'comment_body': ""There's a Travis build failure due to absence of it. "", 'comment_created': datetime.datetime(2020, 8, 11, 23, 3, 20, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 468913095, 'comment_body': '```suggestion\r\n        if not (isinstance(arg, (list, tuple, DenseMatrix)) and\r\n```\r\n`sympy.matrices.dense.DenseMatrix` is the common base class I think', 'comment_created': datetime.datetime(2020, 8, 11, 23, 6, 30, tzinfo=datetime.timezone.utc), 'commenter': 'eric-wieser', 'type': 'User'}, {'comment_id': 469054820, 'comment_body': 'No, MatrixBase is the most common class', 'comment_created': datetime.datetime(2020, 8, 12, 7, 18, 41, tzinfo=datetime.timezone.utc), 'commenter': 'sylee957', 'type': 'User'}, {'comment_id': 469056324, 'comment_body': 'Depends if omitting `SparseMatrix` was deliberate.', 'comment_created': datetime.datetime(2020, 8, 12, 7, 21, 37, tzinfo=datetime.timezone.utc), 'commenter': 'eric-wieser', 'type': 'User'}, {'comment_id': 470178244, 'comment_body': 'Ok, I will allow the most common class, i.e. `MatrixBase`.', 'comment_created': datetime.datetime(2020, 8, 13, 18, 56, 44, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 475429024, 'comment_body': ""Is there any reason to have these special cases? I don't think trying to optimize out `for i in range(1)` is worthwhile."", 'comment_created': datetime.datetime(2020, 8, 24, 8, 35, 30, tzinfo=datetime.timezone.utc), 'commenter': 'eric-wieser', 'type': 'User'}, {'comment_id': 476102799, 'comment_body': 'Thanks! I have those special cases for several reasons.\r\n For instance: consider `tfm1` with shape (2, 3), `tfm2` with shape (3, 1), and `tfm6` with shape (2, 1). I get the following traceback:\r\n``` python\r\n________________________________________________________________________ sympy/physics/control/tests/test_lti.py:test_Series_functions ________________________________________________________________________\r\nTraceback (most recent call last):\r\n  File ""/home/namannimmo/sympy/sympy/physics/control/tests/test_lti.py"", line 512, in test_Series_functions\r\n    assert tfm1*tfm2 + tfm6 == Parallel(Series(tfm1, tfm2), tfm6)\r\n  File ""/home/namannimmo/sympy/sympy/physics/control/lti.py"", line 607, in __add__\r\n    return Parallel(self, other)\r\n  File ""/home/namannimmo/sympy/sympy/physics/control/lti.py"", line 826, in __new__\r\n    obj.is_SISO = True if all(isinstance(arg.doit(), TransferFunction) for arg in args) \\\r\n  File ""/home/namannimmo/sympy/sympy/physics/control/lti.py"", line 826, in <genexpr>\r\n    obj.is_SISO = True if all(isinstance(arg.doit(), TransferFunction) for arg in args) \\\r\n  File ""/home/namannimmo/sympy/sympy/physics/control/lti.py"", line 566, in doit\r\n    a[i][j] = res.args[0][i][k] * arg.args[0][k][j]\r\nTypeError: \'TransferFunction\' object is not subscriptable\r\n```\r\nThat\'s because `tfm2` is a column matrix, and also we need to make `[None, None]` (`(2, 3)` x `(3, 1)` -> `(2, 1)`) as the default list instead of `[[None], [None]]` which will then be passed into a `TransferFunctionMatrix` down below.\r\n\r\nSimilarly, we consider other cases...', 'comment_created': datetime.datetime(2020, 8, 25, 3, 10, 26, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 476182864, 'comment_body': 'Why not always store the entries as a nested list, ie use `[[None, None]]`?', 'comment_created': datetime.datetime(2020, 8, 25, 5, 16, 53, tzinfo=datetime.timezone.utc), 'commenter': 'eric-wieser', 'type': 'User'}, {'comment_id': 476184382, 'comment_body': 'You can simplify a lot by adding\r\n```\r\n# make a column vector\r\narg = [(a,) for a in arg]\r\n```\r\nhere. Then you can remove all the special cases.', 'comment_created': datetime.datetime(2020, 8, 25, 5, 22, 26, tzinfo=datetime.timezone.utc), 'commenter': 'eric-wieser', 'type': 'User'}, {'comment_id': 476332252, 'comment_body': '`True if c else False` is just `c`\r\n```suggestion\r\n        obj.is_SISO = all(isinstance(arg.doit(), TransferFunction) for arg in args)\r\n```', 'comment_created': datetime.datetime(2020, 8, 25, 10, 3, 53, tzinfo=datetime.timezone.utc), 'commenter': 'eric-wieser', 'type': 'User'}, {'comment_id': 476333557, 'comment_body': '```suggestion\r\n                if self.is_SISO != other.is_SISO:\r\n```', 'comment_created': datetime.datetime(2020, 8, 25, 10, 6, 10, tzinfo=datetime.timezone.utc), 'commenter': 'eric-wieser', 'type': 'User'}, {'comment_id': 477108047, 'comment_body': ""> Why not always store the entries as a nested list, ie use `[[None, None]]`?\r\n\r\nI don't understand how it's a column vector. Its shape would be (1, 2), no??"", 'comment_created': datetime.datetime(2020, 8, 26, 7, 58, 15, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 477112145, 'comment_body': 'Oh, I see. Thanks!!', 'comment_created': datetime.datetime(2020, 8, 26, 8, 5, 20, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 478697098, 'comment_body': 'The error log shows _print_Matrix is not a PrettyPrinter attribute.\r\nMight be `_print_MatrixBase`  https://github.com/sympy/sympy/blob/516b0b2bdab790f5b9b402a88b90f50c2af10d8c/sympy/printing/pretty/pretty.py#L763', 'comment_created': datetime.datetime(2020, 8, 27, 21, 9, 30, tzinfo=datetime.timezone.utc), 'commenter': 'Sc0rpi0n101', 'type': 'User'}, {'comment_id': 478706248, 'comment_body': '@namannimmo10 you left the instance here.', 'comment_created': datetime.datetime(2020, 8, 27, 21, 28, 57, tzinfo=datetime.timezone.utc), 'commenter': 'Sc0rpi0n101', 'type': 'User'}, {'comment_id': 478707266, 'comment_body': 'and here', 'comment_created': datetime.datetime(2020, 8, 27, 21, 31, 7, tzinfo=datetime.timezone.utc), 'commenter': 'Sc0rpi0n101', 'type': 'User'}, {'comment_id': 478707611, 'comment_body': 'Same here', 'comment_created': datetime.datetime(2020, 8, 27, 21, 31, 58, tzinfo=datetime.timezone.utc), 'commenter': 'Sc0rpi0n101', 'type': 'User'}, {'comment_id': 478707897, 'comment_body': 'here too', 'comment_created': datetime.datetime(2020, 8, 27, 21, 32, 37, tzinfo=datetime.timezone.utc), 'commenter': 'Sc0rpi0n101', 'type': 'User'}, {'comment_id': 478711112, 'comment_body': 'A better message might be ""The provided Shape does not match the shape of the input. Shape must be equal to ...""', 'comment_created': datetime.datetime(2020, 8, 27, 21, 40, 1, tzinfo=datetime.timezone.utc), 'commenter': 'Sc0rpi0n101', 'type': 'User'}, {'comment_id': 478711211, 'comment_body': 'Same at other instances', 'comment_created': datetime.datetime(2020, 8, 27, 21, 40, 16, tzinfo=datetime.timezone.utc), 'commenter': 'Sc0rpi0n101', 'type': 'User'}, {'comment_id': 478721519, 'comment_body': 'Yep, I removed this attribute recently', 'comment_created': datetime.datetime(2020, 8, 27, 22, 4, 34, tzinfo=datetime.timezone.utc), 'commenter': 'eric-wieser', 'type': 'User'}, {'comment_id': 478721685, 'comment_body': 'This should be just\r\n```suggestion\r\n        return self._print(Matrix(expr.args[0]))\r\n```', 'comment_created': datetime.datetime(2020, 8, 27, 22, 4, 53, tzinfo=datetime.timezone.utc), 'commenter': 'eric-wieser', 'type': 'User'}, {'comment_id': 479268000, 'comment_body': 'Please add a class docstring', 'comment_created': datetime.datetime(2020, 8, 28, 13, 5, 8, tzinfo=datetime.timezone.utc), 'commenter': 'Sc0rpi0n101', 'type': 'User'}, {'comment_id': 479268228, 'comment_body': 'and docstring here', 'comment_created': datetime.datetime(2020, 8, 28, 13, 5, 23, tzinfo=datetime.timezone.utc), 'commenter': 'Sc0rpi0n101', 'type': 'User'}, {'comment_id': 479274464, 'comment_body': 'Yeah, will add the docstrings by tonight. ', 'comment_created': datetime.datetime(2020, 8, 28, 13, 12, 28, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 479327128, 'comment_body': 'This comment still applies', 'comment_created': datetime.datetime(2020, 8, 28, 14, 8, 48, tzinfo=datetime.timezone.utc), 'commenter': 'eric-wieser', 'type': 'User'}, {'comment_id': 479331515, 'comment_body': 'This `[0]` causes `Series()` with no arguments to crash', 'comment_created': datetime.datetime(2020, 8, 28, 14, 13, 24, tzinfo=datetime.timezone.utc), 'commenter': 'eric-wieser', 'type': 'User'}, {'comment_id': 479333881, 'comment_body': 'As above, breaks if `len(args) == 0`', 'comment_created': datetime.datetime(2020, 8, 28, 14, 16, 1, tzinfo=datetime.timezone.utc), 'commenter': 'eric-wieser', 'type': 'User'}, {'comment_id': 479338011, 'comment_body': 'I think this would be clearer with functools reduce:\r\n\r\n```python\r\nif self.is_SISO:\r\n    def mul(res, arg):\r\n        arg = arg.doit()\r\n        if res.den == arg.den:\r\n            num_, den_ = res.num + arg.num, res.den\r\n        else:\r\n            num_, den_ = res.num * arg.den + res.den * arg.num, res.den * arg.den\r\n        return TransferFunction(num_, den_, self.var)\r\nelse:\r\n    def mul(res, arg):\r\n        arg = arg.doit()\r\n        if self.num_inputs == 1:\r\n            a = [None] * self.num_outputs\r\n            for x in range(self.num_outputs):\r\n                a[x] = res.args[0][x] + arg.args[0][x]\r\n        else:\r\n            a = [[None] * self.num_inputs for _ in range(self.num_outputs)]\r\n            for row in range(self.num_outputs):\r\n                for col in range(self.num_inputs):\r\n                    a[row][col] = res.args[0][row][col] + arg.args[0][row][col]\r\n        return TransferFunctionMatrix(a, self.shape, self.var)\r\n\r\nreturn functools.reduce(self.args, mul)\r\n```', 'comment_created': datetime.datetime(2020, 8, 28, 14, 21, 41, tzinfo=datetime.timezone.utc), 'commenter': 'eric-wieser', 'type': 'User'}, {'comment_id': 479348605, 'comment_body': 'This path needs to check that `Series` and `Parallel` are all `is_SISO`, right?', 'comment_created': datetime.datetime(2020, 8, 28, 14, 38, 23, tzinfo=datetime.timezone.utc), 'commenter': 'eric-wieser', 'type': 'User'}, {'comment_id': 479350680, 'comment_body': ""`is_SISO` is a weird name.  A TFM with shape `(1, 1)` has a single input and output, but is not siso. I'd be inclined to either :\r\n\r\n* give this a private name like `_is_not_matrix` (so that it can be removed later)\r\n* create separate `ParallelMatrix` and `SeriesMatrix` classes - almost every method starts with `if is_SISO`, which is a big flag that you should have two different classes"", 'comment_created': datetime.datetime(2020, 8, 28, 14, 41, 44, tzinfo=datetime.timezone.utc), 'commenter': 'eric-wieser', 'type': 'User'}, {'comment_id': 479401719, 'comment_body': 'Separate classes might be a good idea, but I think it would be better to do that as a different patch. \r\nAlso, (1,1) TFMatrix should be considered SISO.', 'comment_created': datetime.datetime(2020, 8, 28, 16, 11, 25, tzinfo=datetime.timezone.utc), 'commenter': 'Sc0rpi0n101', 'type': 'User'}, {'comment_id': 479401955, 'comment_body': '@namannimmo10 You should also add test cases for these after resolving this. ', 'comment_created': datetime.datetime(2020, 8, 28, 16, 11, 53, tzinfo=datetime.timezone.utc), 'commenter': 'Sc0rpi0n101', 'type': 'User'}, {'comment_id': 479404517, 'comment_body': '> Also, (1,1) TFMatrix should be considered SISO.\r\n\r\nIf this is the case, then all of the places where `is_SISO` is used need to be changed to check something else instead - because what they actually care about is ""are any of my arguments `TFMatrix` instances""?', 'comment_created': datetime.datetime(2020, 8, 28, 16, 16, 42, tzinfo=datetime.timezone.utc), 'commenter': 'eric-wieser', 'type': 'User'}, {'comment_id': 479405736, 'comment_body': 'This worries me a little: `.doit()` is no longer quite ""doing it"", it\'s leaving the internal `Series` and `Parallel` object unexpanded. Is this intended behavior?', 'comment_created': datetime.datetime(2020, 8, 28, 16, 18, 53, tzinfo=datetime.timezone.utc), 'commenter': 'eric-wieser', 'type': 'User'}, {'comment_id': 479682612, 'comment_body': '@eric-wieser, yes, this is intended behavior. I think `doit()` needs to be called stepwise, that is, upon calling `doit()` again, it expands those `Series` and `Parallel` objects.', 'comment_created': datetime.datetime(2020, 8, 29, 19, 35, 16, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 479685286, 'comment_body': ""In this case, I think it's fine to use `_is_not_matrix`. \r\n\r\n> create separate `ParallelMatrix` and `SeriesMatrix` classes - almost every method starts with `if is_SISO`, which is a big flag that you should have two different classes\r\n\r\nI have had a look at other packages/libraries like python-control and Harold and what they have is a single transfer function object. Their algebraic code also does the same, that is, uses an [attribute](https://github.com/ilayn/harold/blob/517e57f119f05d0c10b1ff35f0b0e18fcdcfab39/harold/_classes.py#L658) to differentiate SISO and MIMO TF. I wanted to introduce two new classes for Transfer function matrix interconnection in the beginning, but we could also use these existing `Series` and `Parallel` classes for TFM interconnection, so I did that instead."", 'comment_created': datetime.datetime(2020, 8, 29, 20, 7, 17, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 479685300, 'comment_body': ""I don't know enough about the `doit()` architecture to know if that's sensible (so will take your word for it). Mind putting a remark to that effect in the docstring? And maybe a test of `.doit().doit()`, if there isn't one already."", 'comment_created': datetime.datetime(2020, 8, 29, 20, 7, 34, tzinfo=datetime.timezone.utc), 'commenter': 'eric-wieser', 'type': 'User'}, {'comment_id': 479805896, 'comment_body': 'using this diff, I get:\r\n> TypeError: reduce() arg 2 must support iteration', 'comment_created': datetime.datetime(2020, 8, 30, 19, 20, 34, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 479806122, 'comment_body': 'I got the arguments in the wrong order, like I always do', 'comment_created': datetime.datetime(2020, 8, 30, 19, 23, 14, tzinfo=datetime.timezone.utc), 'commenter': 'eric-wieser', 'type': 'User'}, {'comment_id': 479824102, 'comment_body': 'just by adding this line of code seems to do nothing because `obj` is created above. I tried the following diff to remove the special cases, but I get a bunch of other test failures:\r\n``` julia\r\n                    # Now we multiply two transfer function matrices...\r\n                    # If we have two TFMs with shape (a, b) and (b, d), respectively,\r\n                    # then the resultant TFM will be of shape (a, d).\r\n                    a = [[None] * arg.num_inputs for _ in range(res.num_outputs)]\r\n                    l1, l2 = res.args[0], arg.args[0]\r\n                    if res.num_outputs == 1:\r\n                        l1 = [(a,) for a in l1]\r\n                    if arg.num_inputs == 1:\r\n                        l2 = [(a,) for a in l2]\r\n                    for i in range(res.num_outputs):\r\n                        for j in range(arg.num_inputs):\r\n                            for k in range(arg.num_outputs):\r\n                                if a[i][j] is None:     # First operation.\r\n                                    if res.num_inputs == 1:\r\n                                        a[i][j] = l1[i] * l2[k][j]\r\n                                    else:\r\n                                        a[i][j] = l1[i][k] * l2[k][j]\r\n                                else:\r\n                                    a[i][j] += l1[i][k] * l2[k][j]\r\n\r\n                    res = TransferFunctionMatrix(a, (res.num_outputs, arg.num_inputs), arg.var)\r\n```\r\nWhat do you say? I think we need to consider a bunch of other cases here also.', 'comment_created': datetime.datetime(2020, 8, 30, 22, 31, 24, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 479824873, 'comment_body': '@oscarbenjamin, is there any way we could escape the implementation of matrix multiplication here? ', 'comment_created': datetime.datetime(2020, 8, 30, 22, 40, 33, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 479957662, 'comment_body': '> seems to do nothing because obj is created above.\r\n\r\nRight, you should normalize this _before_ you construct `obj`.', 'comment_created': datetime.datetime(2020, 8, 31, 7, 50, 28, tzinfo=datetime.timezone.utc), 'commenter': 'eric-wieser', 'type': 'User'}, {'comment_id': 480016212, 'comment_body': 'I\'m starting to think you really do want to reuse the matrix classes here. So I\'d propose `__new__` looks like:\r\n```python\r\ndef __new__(cls, arg, shape, var):\r\n    if var is not None and not isinstance(var, Symbol):\r\n        raise TypeError(""Var must be a Symbol, not {}."".format(type(var)))\r\n    if shape is not None and not isinstance(shape, tuple):\r\n        raise TypeError(""Shape must be a tuple, not {}."".format(type(shape)))\r\n\r\n    # let matrix handle conversion from lists\r\n    matrix = ImmutableDenseMatrix(arg)\r\n\r\n    # args[2] is the flattened entries\r\n    for entry in matrix.args[2]:\r\n        if not isinstance(entry, (TransferFunction, Parallel, Series)):\r\n            raise TypeError(""Unsupported type for argument of TransferFunctionMatrix."")\r\n        if var is not None and entry.var != var:\r\n            raise ValueError(""All transfer functions should use the same complex""\r\n                        "" variable (var) of the Laplace transform."")\r\n    \r\n    if shape is not None and matrix.shape != shape:\r\n        raise ValueError(""wrong shape"")  # or a better message\r\n\r\n    obj = super(TransferFunctionMatrix, cls).__new__(cls, matrix)\r\n    obj._var = var\r\n    # etc\r\n    return obj\r\n```\r\n\r\nA big advantage of this approach is that `TransferFunctionMatrix.subs(some_variable, 0)` will just work.', 'comment_created': datetime.datetime(2020, 8, 31, 9, 45, 44, tzinfo=datetime.timezone.utc), 'commenter': 'eric-wieser', 'type': 'User'}, {'comment_id': 480288003, 'comment_body': ""Does `subs` not work with this class?\r\n\r\nThere is a basic problem in sympy with allowing non-Expr (even non-Basic) instances in places such as Matrix entries that are clearly written for Expr instances. I intend to eliminate all places where non-Expr instances are used in a Matrix from the codebase and deprecate having non-Expr in a Matrix.\r\n\r\nI don't think that it is a big deal to implement something like matrix multiplication which is fairly trivial although perhaps it would be better if there was a reusable function somewhere for doing that calculation. It is still a work in progress and not at all documented but I have implemented various matrix routines in such a way that they can be applied to a standard Python list of lists based on only assuming that the elements support the field operations `+`, `-`, `*` and `/` so do not need to Expr or even Basic. My intention was that it should not be necessary to subclass Matrix and insert objects that don't belong there just to reuse the routines for standard matrix operations. Matrix multiplication is handled by this function:\r\nhttps://github.com/sympy/sympy/blob/500f3c9a75020adc7239b50d4deac6144f342396/sympy/polys/domainmatrix.py#L220-L226\r\nThat implementation is optimised for large matrices and cheap elementary arithmetic (e.g. `int` or `mpz` as the elements)."", 'comment_created': datetime.datetime(2020, 8, 31, 17, 47, 20, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 480368353, 'comment_body': ""> Does subs not work with this class?\r\n\r\nMy impression was that `subs` would not recurse into list arguments, but perhaps I missed a sympify somewhere.\r\n\r\nAt any rate, my suggestion above is more about letting the matrix constructor handle the normalization, and less about the multiplication itself. The thing I don't like about this PR is how the special cases for `TFM([tf])` vs `TFM([[tf]])` are in every single method, when they should just be in the constructor."", 'comment_created': datetime.datetime(2020, 8, 31, 20, 3, 15, tzinfo=datetime.timezone.utc), 'commenter': 'eric-wieser', 'type': 'User'}, {'comment_id': 480369110, 'comment_body': ""> I intend to eliminate all places where non-Expr instances are used in a Matrix from the codebase and deprecate having non-Expr in a Matrix.\r\n\r\nIf you do this, I'd argue that it might be worth introducing a base class that works over non-exprs too. In my mind, this control stuff is really trying to work with a new `TransferFunctionExpr` type, just like matrices work with a `Matexpr` type."", 'comment_created': datetime.datetime(2020, 8, 31, 20, 4, 57, tzinfo=datetime.timezone.utc), 'commenter': 'eric-wieser', 'type': 'User'}, {'comment_id': 480404152, 'comment_body': ""> I'd argue that it might be worth introducing a base class\r\n\r\nThe Matrix class is already arranged into a bunch of different base classes:\r\n```julia\r\nIn [1]: Matrix.mro()                                                                                                                                          \r\nOut[1]: \r\n[sympy.matrices.dense.MutableDenseMatrix,\r\n sympy.matrices.dense.DenseMatrix,\r\n sympy.matrices.matrices.MatrixBase,\r\n sympy.matrices.matrices.MatrixDeprecated,\r\n sympy.matrices.matrices.MatrixCalculus,\r\n sympy.matrices.matrices.MatrixEigen,\r\n sympy.matrices.matrices.MatrixSubspaces,\r\n sympy.matrices.matrices.MatrixReductions,\r\n sympy.matrices.matrices.MatrixDeterminant,\r\n sympy.matrices.common.MatrixCommon,\r\n sympy.matrices.common.MatrixArithmetic,\r\n sympy.matrices.common.MatrixOperations,\r\n sympy.matrices.common.MatrixProperties,\r\n sympy.matrices.common.MatrixSpecial,\r\n sympy.matrices.common.MatrixShaping,\r\n sympy.matrices.common.MatrixRequired,\r\n sympy.printing.defaults.Printable,\r\n object]\r\n```\r\nIt's just not really clear how you could make use of any of those classes separately."", 'comment_created': datetime.datetime(2020, 8, 31, 21, 17, 6, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}]","[{'commit_sha': 'bea4dead1f73b4a330bd2d56b8be20b382ded1ee', 'committer_username': 'namannimmo10', 'committer_name': 'Naman Gera', 'committer_email': 'namangera15@gmail.com', 'commit_date': datetime.datetime(2018, 9, 5, 15, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fee062f7fac80f809387d99b1886d2d0d3c206e1', 'committer_username': 'namannimmo10', 'committer_name': 'Naman Gera', 'committer_email': 'namangera15@gmail.com', 'commit_date': datetime.datetime(2018, 9, 5, 15, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f0d6824fbff17e3aeecdfdfa50302dd6d46c8110', 'committer_username': 'namannimmo10', 'committer_name': 'Naman Gera', 'committer_email': 'namangera15@gmail.com', 'commit_date': datetime.datetime(2018, 9, 5, 15, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '52031aa49802f65c1a96a7ffb1a13460fff1f3e9', 'committer_username': 'namannimmo10', 'committer_name': 'Naman Gera', 'committer_email': 'namangera15@gmail.com', 'commit_date': datetime.datetime(2018, 9, 5, 15, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '67f0342e1e5d6af9a99e0409246ef4cd0191781e', 'committer_username': 'namannimmo10', 'committer_name': 'Naman Gera', 'committer_email': 'namangera15@gmail.com', 'commit_date': datetime.datetime(2018, 9, 5, 15, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '862dfefe3d862a492f06fc438f305c0a1de12029', 'committer_username': 'namannimmo10', 'committer_name': 'Naman Gera', 'committer_email': 'namangera15@gmail.com', 'commit_date': datetime.datetime(2018, 9, 5, 15, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bb1e375f0f777c468682fef96858c03a000261a6', 'committer_username': 'namannimmo10', 'committer_name': 'Naman Gera', 'committer_email': 'namangera15@gmail.com', 'commit_date': datetime.datetime(2018, 9, 5, 15, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '490ee3ac6319cf700d0353c3391bedd88e3f3b96', 'committer_username': 'namannimmo10', 'committer_name': 'Naman Gera', 'committer_email': 'namangera15@gmail.com', 'commit_date': datetime.datetime(2018, 9, 5, 15, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e8de54042aba8af1f33b868d3458ba630a5e8d68', 'committer_username': 'namannimmo10', 'committer_name': 'Naman Gera', 'committer_email': 'namangera15@gmail.com', 'commit_date': datetime.datetime(2018, 9, 5, 15, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '017a75e558c5fae6ee4bf15def743402c4708945', 'committer_username': 'namannimmo10', 'committer_name': 'Naman Gera', 'committer_email': 'namangera15@gmail.com', 'commit_date': datetime.datetime(2018, 9, 5, 15, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cda75975e3851e7e392dce5799d145162e40e979', 'committer_username': 'namannimmo10', 'committer_name': 'Naman Gera', 'committer_email': 'namangera15@gmail.com', 'commit_date': datetime.datetime(2018, 9, 5, 15, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '69b0bcaf8e6cb76ed0e6badf12121ac31ba947b7', 'committer_username': 'namannimmo10', 'committer_name': 'Naman Gera', 'committer_email': 'namangera15@gmail.com', 'commit_date': datetime.datetime(2018, 9, 5, 15, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0d463de45f00f757d4a42bf6996391083b252576', 'committer_username': 'namannimmo10', 'committer_name': 'Naman Gera', 'committer_email': 'namangera15@gmail.com', 'commit_date': datetime.datetime(2018, 9, 5, 15, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '36e53efc73b7a8ac804c184cebe77a8d33805004', 'committer_username': 'namannimmo10', 'committer_name': 'Naman Gera', 'committer_email': 'namangera15@gmail.com', 'commit_date': datetime.datetime(2018, 9, 5, 15, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '932606bd8b7295fd25ede50f3f97120db8516824', 'committer_username': 'namannimmo10', 'committer_name': 'Naman Gera', 'committer_email': 'namangera15@gmail.com', 'commit_date': datetime.datetime(2018, 9, 5, 15, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '880fb24190ba3b8bae9cfaa90565cb51345addbe', 'committer_username': 'namannimmo10', 'committer_name': 'Naman Gera', 'committer_email': 'namangera15@gmail.com', 'commit_date': datetime.datetime(2018, 9, 5, 15, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'faad68410f5d99115c1af5a8b553fc3ab8264f43', 'committer_username': 'namannimmo10', 'committer_name': 'Naman Gera', 'committer_email': 'namangera15@gmail.com', 'commit_date': datetime.datetime(2018, 9, 5, 15, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7cc4c9eea3d50e4ed6d9644a24d315c5dcf1494b', 'committer_username': 'namannimmo10', 'committer_name': 'Naman Gera', 'committer_email': 'namangera15@gmail.com', 'commit_date': datetime.datetime(2018, 9, 5, 15, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dc8dae74840c1407f7cdff62bf331d8db76a5693', 'committer_username': 'namannimmo10', 'committer_name': 'Naman Gera', 'committer_email': 'namangera15@gmail.com', 'commit_date': datetime.datetime(2018, 9, 5, 15, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'efa73aec1f6ef9a9b675c6f5c8993cc1070c13ca', 'committer_username': 'namannimmo10', 'committer_name': 'Naman Gera', 'committer_email': 'namangera15@gmail.com', 'commit_date': datetime.datetime(2018, 9, 5, 15, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '481e692d0235b937a9acd10861bff993c81f78b1', 'committer_username': 'namannimmo10', 'committer_name': 'Naman Gera', 'committer_email': 'namangera15@gmail.com', 'commit_date': datetime.datetime(2018, 9, 5, 15, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '77eff9a43b4d45e9a990d95d13d1dff0c566d771', 'committer_username': 'namannimmo10', 'committer_name': 'Naman Gera', 'committer_email': 'namangera15@gmail.com', 'commit_date': datetime.datetime(2018, 9, 5, 15, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fb7e7f52e2635ef4b8aed349ae49c6add2862bba', 'committer_username': 'namannimmo10', 'committer_name': 'Naman Gera', 'committer_email': 'namangera15@gmail.com', 'commit_date': datetime.datetime(2018, 9, 5, 15, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '10e3f86a34e3fb785ded0e5e00c7eafa0d977b8c', 'committer_username': 'namannimmo10', 'committer_name': 'Naman Gera', 'committer_email': 'namangera15@gmail.com', 'commit_date': datetime.datetime(2018, 9, 5, 15, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3e443ed4aff436e1cd9e1cd433217ea2b854ebb1', 'committer_username': 'namannimmo10', 'committer_name': 'Naman Gera', 'committer_email': 'namangera15@gmail.com', 'commit_date': datetime.datetime(2018, 9, 5, 15, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd7fe3e25be8791147597f02af6799b45b4bc2b6d', 'committer_username': 'namannimmo10', 'committer_name': 'Naman Gera', 'committer_email': 'namangera15@gmail.com', 'commit_date': datetime.datetime(2018, 9, 5, 15, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e138dea9f7b0aff453af1fc3b71a6d459c817078', 'committer_username': 'namannimmo10', 'committer_name': 'Naman Gera', 'committer_email': 'namangera15@gmail.com', 'commit_date': datetime.datetime(2018, 9, 5, 15, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e81d7ad929ef14b6b6b94df75f87be4f7b66e1a7', 'committer_username': 'namannimmo10', 'committer_name': 'Naman Gera', 'committer_email': 'namangera15@gmail.com', 'commit_date': datetime.datetime(2018, 9, 5, 15, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '42d890f4d6faeb8cb956d69a716e73db8923e1c0', 'committer_username': 'namannimmo10', 'committer_name': 'Naman Gera', 'committer_email': 'namangera15@gmail.com', 'commit_date': datetime.datetime(2018, 9, 5, 15, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c5394f264b511c0dc0d04a7ce1bd62ab271ed20e', 'committer_username': 'namannimmo10', 'committer_name': 'Naman Gera', 'committer_email': 'namangera15@gmail.com', 'commit_date': datetime.datetime(2018, 9, 5, 15, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1bb809cd005df5a3eb7deb1e355c84a885818394', 'committer_username': 'namannimmo10', 'committer_name': 'Naman Gera', 'committer_email': 'namangera15@gmail.com', 'commit_date': datetime.datetime(2018, 9, 5, 15, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '515346aa482c30e2f92c8118b60bc2657e250a18', 'committer_username': 'namannimmo10', 'committer_name': 'Naman Gera', 'committer_email': 'namangera15@gmail.com', 'commit_date': datetime.datetime(2018, 9, 5, 15, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1b2a12623a243ccd34598dccc6c593b3544ebf56', 'committer_username': 'namannimmo10', 'committer_name': 'Naman Gera', 'committer_email': 'namangera15@gmail.com', 'commit_date': datetime.datetime(2018, 9, 5, 15, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c570e04dd4433fda757d0ce6106d299a32f98ff7', 'committer_username': 'namannimmo10', 'committer_name': 'Naman Gera', 'committer_email': 'namangera15@gmail.com', 'commit_date': datetime.datetime(2018, 9, 5, 15, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2d2f192e6ba1c523b84952bd2b97ede3f7516328', 'committer_username': 'namannimmo10', 'committer_name': 'Naman Gera', 'committer_email': 'namangera15@gmail.com', 'commit_date': datetime.datetime(2018, 9, 5, 15, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2b8aa82324b1b713ec69dc75867d33a30c4b39db', 'committer_username': 'namannimmo10', 'committer_name': 'Naman Gera', 'committer_email': 'namangera15@gmail.com', 'commit_date': datetime.datetime(2018, 9, 5, 15, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '19a4c3c0e39ac0d2e571e4f55b8dd636f3b28f25', 'committer_username': 'namannimmo10', 'committer_name': 'Naman Gera', 'committer_email': 'namangera15@gmail.com', 'commit_date': datetime.datetime(2018, 9, 5, 15, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4eb606eb38746abb9b19d92229abaa196ff1c16e', 'committer_username': 'namannimmo10', 'committer_name': 'Naman Gera', 'committer_email': 'namangera15@gmail.com', 'commit_date': datetime.datetime(2018, 9, 5, 15, 12, 45, tzinfo=datetime.timezone.utc)}]",Naman Gera,43007653,namangera15@gmail.com,User,,47,,0,62
683154500,Implement `MIMOSeries` and `MIMOParallel`.,"<!-- Your title above should be a short description of what
was changed. Do not include the issue number in the title. -->

#### References to other Issues or PRs
<!-- If this pull request fixes an issue, write ""Fixes #NNNN"" in that exact
format, e.g. ""Fixes #1234"" (see
https://tinyurl.com/auto-closing for more information). Also, please
write a comment on that issue linking back to this pull request once it is
open. -->


#### Brief description of what is fixed or changed

`MIMOSeries` and `MIMOParallel` classes will support [valid] MIMO transfer functions as arguments. `*` and `+` operators between two `TransferFunctionMatrix` object will return equivalent `MIMOSeries` and `MIMOParallel` objects.

#### Other comments

Checklist:

- [x] ~~Add MIMO support in the constructor of `Series` and `Parallel` classes respectively.~~ Add `MIMOSeries` and `MIMOParallel` classes.
- [x] Implement `doit()` in both `MIMOSeries` and `MIMOParallel`.
- [x] Add `num_input`, `num_output`, and `shape` properties in `MIMOSeries` and `MIMOParallel`.
- [x] ~~Modify `to_expr`, `is_proper`, `is_strictly_proper` and `is_biproper` in `Series` and `Parallel`.~~
- [x] Implement `_eval_rewrite_as_TransferFunctionMatrix()` method in both the classes.
- [x] Modify `__add__` and `__mul__` of the `TransferFunctionMatrix` class to return `MIMOParallel` and `MIMOSeries` objects respectively.
- [x] Modify `__add__`, `__mul__` and `__neg__` in `MIMOSeries` and `MIMOParallel`.
- [x] Add proper docstrings in both the classes with examples.
- [x] Add a common superclass for all the LTI systems.
- [x] Add unit tests for MIMO `Series` and `Parallel` classes covering all the possible outcomes.
  - [x] Tests for `MIMOSeries`
  - [x] Tests for `MIMOParallel`
- [x] Modify `latex.py` and add tests.
  - [x] Update `_print_MIMOSeries()`.
  - [x] Update `_print_MIMOParallel()`.
  - [x] Add tests.
- [x] Modify `pretty.py` and add tests.
  - [x] Update `_print_MIMOSeries()`.
  - [x] Update `_print_MIMOParallel()`.
  - [x] Add tests.
- [x] Modify `_SISO_doit()` to return `Add(*args)` and `Mul(*args)` instead of present implementation. Some tests need to be modified in that case. (**Disussion required before implementing**)
- [x] Add `evalf`, `expand` and `simplify` methods in `TransferFunctionMatrix` class.

#### Release Notes

<!-- Write the release notes for this release below between the BEGIN and END
statements. The basic format is a bulleted list with the name of the subpackage
and the release note for this PR. For example:

* solvers
  * Added a new solver for logarithmic equations.

* functions
  * Fixed a bug with log of integers.

or if no release note(s) should be included use:

NO ENTRY

See https://github.com/sympy/sympy/wiki/Writing-Release-Notes for more
information on how to write release notes. The bot will check your release
notes automatically to see if they are formatted correctly. -->

<!-- BEGIN RELEASE NOTES -->
* physics.control
  * Added Series and Parallel configuration's support for MIMO systems (`MIMOSeries` and `MIMOParallel` classes).
<!-- END RELEASE NOTES -->
",True,21703,https://api.github.com/repos/sympy/sympy/pulls/21703,https://github.com/sympy/sympy/pull/21703,closed,1215,200,11,35,23,75,2,0,"[{'name': 'GSoC'}, {'name': 'physics.control'}]",2021-07-04 11:01:11+00:00,2021-08-03 04:19:13+00:00,2567882.0,"29 days, 17:18:02","[{'comment_id': 664782573, 'comment_body': ""@namannimmo10, In my opinion, we should change this function. First of all, it is not printing equivalent to `expr`'s pretty form, and secondly, it adds unnecessary parentheses. It is just the Series' latex parsing function. If you can, suggest any good fix.\r\n\r\n![image](https://user-images.githubusercontent.com/53227127/124648579-0e949f00-deb5-11eb-9315-bda6afca9868.png)\r\n\r\ncompared to\r\n```\r\n                                       [   3      ]   \r\n                                       [5*s    s  ]\r\n[5]                                    [----   -  ]\r\n[-]                                    [ 1     1  ]\r\n[1]                                    [          ]\r\n[ ]    /[      3]      [      3]   \\   [         2]\r\n[5]    |[5  6*s ]      [5  6*s ]   |   [ 5    5*s ]\r\n[-]    |[-  ----]      [-  ----]   |   [ -    ----]\r\n[1]{t}*\\[1   1  ]{t} + [1   1  ]{t}/ + [ 1     1  ]{t}\r\n```\r\nFor Series too we should consider adding dot instead of space."", 'comment_created': datetime.datetime(2021, 7, 6, 18, 22, 9, tzinfo=datetime.timezone.utc), 'commenter': 'akshanshbhatt', 'type': 'User'}, {'comment_id': 665510455, 'comment_body': '```suggestion\r\n    MIMO-System Examples -\r\n```', 'comment_created': datetime.datetime(2021, 7, 7, 16, 2, 26, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 665569974, 'comment_body': ""Let's pass `use_unicode=True` in the docstrings? It's much readable for the users.\r\n```python\r\nIn [76]: G1 = TransferFunctionMatrix.from_Matrix(Matrix([[5*s], [5]]), s)                 \r\n\r\nIn [77]: G2 = TransferFunctionMatrix.from_Matrix(Matrix([[5, 1/(6*s**2)]]), s)            \r\n\r\nIn [78]: G3 = TransferFunctionMatrix.from_Matrix(Matrix([[1, s], [5/s, 1]]), s)           \r\n\r\nIn [79]: pprint(Series(G3, G2, G1))                                                       \r\n⎡5⋅s⎤             ⎡1  s⎤ \r\n⎢───⎥             ⎢─  ─⎥ \r\n⎢ 1 ⎥             ⎢1  1⎥ \r\n⎢   ⎥  ⎡5   1  ⎤  ⎢    ⎥ \r\n⎢ 5 ⎥  ⎢─  ────⎥  ⎢5  1⎥ \r\n⎢ ─ ⎥  ⎢1     2⎥  ⎢─  ─⎥ \r\n⎣ 1 ⎦τ⋅⎣   6⋅s ⎦τ⋅⎣s  1⎦τ\r\n```\r\nDot should be placed slightly above; notice how it is done here:\r\n```python\r\nIn [27]: mat_a = Matrix([[5*s], [5]])                                                 \r\n\r\nIn [28]: mat_b = Matrix([[5, 1/(6*s**2)]])                                                                              \r\n                                                  \r\nIn [32]: pprint(MatMul(mat_a, mat_b))                                                                    \r\n      ⎡    1  ⎤\r\n⎡5⋅s⎤ ⎢5  ────⎥\r\n⎢   ⎥⋅⎢      2⎥\r\n⎣ 5 ⎦ ⎣   6⋅s ⎦\r\n```"", 'comment_created': datetime.datetime(2021, 7, 7, 17, 24, 52, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 665619402, 'comment_body': 'I see. This is what you meant. \r\nMore like, \r\n```python\r\n                try:\r\n                    if not element.is_SISO:\r\n                        raise TypeError(""MIMO Series/Parallel object found as the element of ""\r\n                            f""TransferFunctionMatrix at index {(row_index, col_index)}."")\r\n                except AttributeError as err:\r\n                    raise TypeError(""Incompatible type found as the element of ""\r\n                        f""TransferFunctionMatrix at index {(row_index, col_index)}."") from err\r\n```', 'comment_created': datetime.datetime(2021, 7, 7, 18, 39, 1, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 665635377, 'comment_body': 'We shouldn\'t catch AttributeError. AttributeError is usually raised because of bugs in the code. Instead just use `getattr`:\r\n```python\r\nif getattr(element, \'is_SISO\', False):\r\n    ...\r\n```\r\nWhy are you checking if this attribute exists anyway?\r\n\r\nIt would be better to check the type of the arguments and then ensure that all acceptable types have the `is_SISO` attribute:\r\n```python\r\nrows_list = arg\r\nvar = rows_list[0][0]  # Can there be zero rows or columns?\r\n\r\nvalues = set.union(*rows_list)\r\nif not all(isinstance(v, SomeCls) for v in values):\r\n    raise TypeError(""Inputs should be SomeCls"")\r\nif not all(v.is_SISO for v in values):\r\n    raise TypeError(""Inputs should be SISO"")\r\n\r\nexpr_mat = ImmutableMatrix([[v.to_expr() for v in row] for row in rows_list])\r\n```\r\nAs I mentioned somewhere else there should be a class `SomeCls` that you can test for here.', 'comment_created': datetime.datetime(2021, 7, 7, 19, 3, 56, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 665879022, 'comment_body': ""> Let's pass `use_unicode=True` in the docstrings? It's much readable for the users.\r\n\r\nIt cannot be done, in my opinion. I've already tried asking for a solution in the past -\r\n\r\nhttps://github.com/sympy/sympy/pull/21556#issuecomment-862621542\r\n\r\nI also tried to lookup for Unicode-containing `pprint` examples in docstrings, but I couldn't find one."", 'comment_created': datetime.datetime(2021, 7, 8, 5, 25, 35, tzinfo=datetime.timezone.utc), 'commenter': 'akshanshbhatt', 'type': 'User'}, {'comment_id': 665881536, 'comment_body': ""> Dot should be placed slightly above; notice how it is done here:\r\n\r\nI had already noticed that and tried to make it equivalent to the `MatMul`'s output but even after multiple attempts, couldn't get it done."", 'comment_created': datetime.datetime(2021, 7, 8, 5, 32, 33, tzinfo=datetime.timezone.utc), 'commenter': 'akshanshbhatt', 'type': 'User'}, {'comment_id': 665882926, 'comment_body': '@namannimmo10, should I reintroduce the `TransferFunctionExpr` class, or you prefer some other name?', 'comment_created': datetime.datetime(2021, 7, 8, 5, 36, 10, tzinfo=datetime.timezone.utc), 'commenter': 'akshanshbhatt', 'type': 'User'}, {'comment_id': 665921889, 'comment_body': 'I think that TransferFunctionExpr sounds like a restrictive superclass that only applies to transfer function like instances.\r\nWe could have other objects like StateSpace (to appear), so a common name like ControlSystems could be appropriate for separating the objects from this library from the rest of the sympy.\r\n\r\nBut I don’t know if others prefer duck typing (like SISO statespace can also be recognized as something like SISO transferfunction) or they should be in a completely different and incompatible objects.\r\n\r\nBut I believe that this is fine since I think that we can have many references how these are taxonomically organized.', 'comment_created': datetime.datetime(2021, 7, 8, 7, 0, 27, tzinfo=datetime.timezone.utc), 'commenter': 'sylee957', 'type': 'User'}, {'comment_id': 666045181, 'comment_body': '> I also tried to lookup for Unicode-containing pprint examples in docstrings, but I couldn\'t find one.\r\n\r\n```\r\n$ git grep "">>> pprint("" | grep ""use_unicode=True)""\r\ndoc/src/modules/rewriting.rst:    >>> pprint(cse(sqrt(sin(x))), use_unicode=True)\r\ndoc/src/modules/rewriting.rst:    >>> pprint(cse(sqrt(sin(x)+5)*sqrt(sin(x)+4)), use_unicode=True)\r\ndoc/src/modules/rewriting.rst:    >>> pprint(cse((x-y)*(z-y) + sqrt((x-y)*(z-y))), use_unicode=True)\r\ndoc/src/modules/solvers/solveset.rst:   >>> pprint(ImageSet(Lambda(n, 2*pi*n), S.Integers), use_unicode=True)\r\ndoc/src/modules/solvers/solveset.rst:   >>> pprint(ComplexRegion(FiniteSet(1)*Interval(0, 2*pi), polar=True), use_unicode=True)\r\ndoc/src/modules/solvers/solveset.rst:   >>> pprint(ComplexRegion(Interval(-oo, oo)*Interval(0, oo)), use_unicode=True)\r\ndoc/src/modules/solvers/solveset.rst:    >>> pprint(solveset(abs(x) - n, x, domain=S.Reals), use_unicode=True)\r\ndoc/src/tutorial/printing.rst:    >>> pprint(Integral(sqrt(1/x), x), use_unicode=True)\r\nsympy/physics/optics/polarization.py:>>> pprint(x0, use_unicode=True)\r\nsympy/physics/optics/polarization.py:>>> pprint(s0, use_unicode=True)\r\nsympy/physics/optics/polarization.py:    >>> pprint(jones_vector(psi, chi), use_unicode=True)\r\nsympy/physics/optics/polarization.py:    >>> pprint(jones_vector(0, 0), use_unicode=True)\r\nsympy/physics/optics/polarization.py:    >>> pprint(jones_vector(pi/2, 0), use_unicode=True)\r\nsympy/physics/optics/polarization.py:    >>> pprint(jones_vector(pi/4, 0), use_unicode=True)\r\nsympy/physics/optics/polarization.py:    >>> pprint(jones_vector(-pi/4, 0), use_unicode=True)\r\nsympy/physics/optics/polarization.py:    >>> pprint(jones_vector(0, pi/4), use_unicode=True)\r\nsympy/physics/optics/polarization.py:    >>> pprint(jones_vector(0, -pi/4), use_unicode=True)\r\nsympy/physics/optics/polarization.py:    >>> pprint(stokes_vector(psi, chi, p, I), use_unicode=True)\r\nsympy/physics/optics/polarization.py:    >>> pprint(stokes_vector(0, 0), use_unicode=True)\r\nsympy/physics/optics/polarization.py:    >>> pprint(stokes_vector(pi/2, 0), use_unicode=True)\r\nsympy/physics/optics/polarization.py:    >>> pprint(stokes_vector(pi/4, 0), use_unicode=True)\r\nsympy/physics/optics/polarization.py:    >>> pprint(stokes_vector(-pi/4, 0), use_unicode=True)\r\nsympy/physics/optics/polarization.py:    >>> pprint(stokes_vector(0, pi/4), use_unicode=True)\r\nsympy/physics/optics/polarization.py:    >>> pprint(stokes_vector(0, -pi/4), use_unicode=True)\r\nsympy/physics/optics/polarization.py:    >>> pprint(stokes_vector(0, 0, 0), use_unicode=True)\r\nsympy/physics/optics/polarization.py:    >>> pprint(J, use_unicode=True)\r\nsympy/physics/optics/polarization.py:    >>> pprint(R, use_unicode=True)\r\nsympy/physics/optics/polarization.py:    >>> pprint(HWP, use_unicode=True)\r\nsympy/physics/optics/polarization.py:    >>> pprint(QWP, use_unicode=True)\r\nsympy/physics/optics/polarization.py:    >>> pprint(NDF, use_unicode=True)\r\nsympy/physics/optics/polarization.py:    >>> pprint(reflective_filter(R), use_unicode=True)\r\nsympy/physics/optics/polarization.py:    >>> pprint(mueller_matrix(linear_polarizer(theta)), use_unicode=True)\r\nsympy/physics/optics/polarization.py:    >>> pprint(mueller_matrix(half_wave_retarder(theta)), use_unicode=True)\r\nsympy/physics/optics/polarization.py:    >>> pprint(mueller_matrix(quarter_wave_retarder(theta)), use_unicode=True)\r\nsympy/physics/wigner.py:    >>> pprint(wigner_d_small(half, beta), use_unicode=True)\r\nsympy/physics/wigner.py:    >>> pprint(wigner_d_small(2*half, beta), use_unicode=True)\r\nsympy/physics/wigner.py:    >>> pprint(wigner_d_small(half, beta).subs({beta:pi/2}), use_unicode=True)\r\nsympy/physics/wigner.py:    >>> pprint(wigner_d(half, alpha, beta, gamma), use_unicode=True)\r\n```', 'comment_created': datetime.datetime(2021, 7, 8, 9, 52, 31, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 666052842, 'comment_body': 'There needs to be a decision about using unicode in docstrings. It is deliberately not used in most of the codebase even if there are some exceptions.', 'comment_created': datetime.datetime(2021, 7, 8, 10, 3, 1, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 666101290, 'comment_body': 'The unicode test seems to be entirely based around conventions from python 2:\r\n\r\nhttps://github.com/sympy/sympy/blob/cc67e93c1e05a46fb3d5c4f445086aa89dc09353/sympy/testing/quality_unicode.py#L5-L28\r\n', 'comment_created': datetime.datetime(2021, 7, 8, 11, 18, 10, tzinfo=datetime.timezone.utc), 'commenter': 'eric-wieser', 'type': 'User'}, {'comment_id': 666101945, 'comment_body': 'This will falsely claim that the args contain a mixture when `args=[]`', 'comment_created': datetime.datetime(2021, 7, 8, 11, 19, 20, tzinfo=datetime.timezone.utc), 'commenter': 'eric-wieser', 'type': 'User'}, {'comment_id': 666103005, 'comment_body': '```suggestion\r\n            raise TypeError(""`to_expr` method is only valid for SISO Series."")\r\n```', 'comment_created': datetime.datetime(2021, 7, 8, 11, 21, 7, tzinfo=datetime.timezone.utc), 'commenter': 'eric-wieser', 'type': 'User'}, {'comment_id': 666104291, 'comment_body': 'I encourage not to use unicode in source files and docstrings because they need special monospace fonts to look not misaligned.', 'comment_created': datetime.datetime(2021, 7, 8, 11, 23, 9, tzinfo=datetime.timezone.utc), 'commenter': 'sylee957', 'type': 'User'}, {'comment_id': 667715551, 'comment_body': '**Update:**\r\n\r\nLatex\r\n\r\n![image](https://user-images.githubusercontent.com/53227127/125252799-63ea0980-e316-11eb-874f-02e357d34400.png)\r\n\r\nPretty-Print\r\n\r\n```\r\n                                       [   3      ]   \r\n                                       [5*s    s  ]   \r\n[5]                                    [----   -  ]   \r\n[-]    /[      3]      [      3]   \\   [ 1     1  ]   \r\n[1]    |[5  6*s ]      [5  6*s ]   |   [          ]   \r\n[ ]   *|[-  ----]    + [-  ----]   | + [         2]   \r\n[5]    \\[1   1  ]{t}   [1   1  ]{t}/   [ 5    5*s ]   \r\n[-]                                    [ -    ----]   \r\n[1]{t}                                 [ 1     1  ]{t}\r\n```', 'comment_created': datetime.datetime(2021, 7, 12, 8, 8, 52, tzinfo=datetime.timezone.utc), 'commenter': 'akshanshbhatt', 'type': 'User'}, {'comment_id': 668165236, 'comment_body': 'More like,\r\n```python\r\n        def _SISO_doit():\r\n            _arg = (arg.doit().to_expr() for arg in self.args)\r\n            res = Add(*_arg, evaluate=False)\r\n            return TransferFunction.from_rational_expression(res, self.var)\r\n\r\n        def _MIMO_doit():\r\n            _arg = (arg.doit()._expr_mat for arg in self.args)\r\n            res = MatAdd(*_arg, evaluate=False)\r\n            return TransferFunctionMatrix.from_Matrix(res, self.var)\r\n        \r\n        return _SISO_doit() if self.is_SISO else _MIMO_doit()\r\n```\r\nSimilarly, pass `evaluate=False` in `Series` class.', 'comment_created': datetime.datetime(2021, 7, 12, 18, 35, 41, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 668225200, 'comment_body': 'Why not just make LTICommon a subclass of Basic and EvalfMixin?', 'comment_created': datetime.datetime(2021, 7, 12, 20, 15, 1, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 668225958, 'comment_body': 'I wonder if a better name is possible than `LTICommon`. Ideally the name would be usable in the docs to describe what is allowed as e.g. input to a particular function.', 'comment_created': datetime.datetime(2021, 7, 12, 20, 16, 12, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 668227824, 'comment_body': ""Avoid using double underscore private variables in Python as a general rule.\r\n\r\nAvoid having any attributes in a Basic subclass. Presumably these private attributes are not used anywhere if they aren't used in this class so maybe just get rid of them.\r\n\r\nThe base classes should be passing their args to this class but it calls `super.__new__` without any args."", 'comment_created': datetime.datetime(2021, 7, 12, 20, 19, 16, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 668228066, 'comment_body': 'This docstring could describe what properties or methods can be expected to be provided by any instance of LTICommon', 'comment_created': datetime.datetime(2021, 7, 12, 20, 19, 40, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 668228920, 'comment_body': 'Special-casing on subclasses is not really how these things usually work: just implement this method on each subclass.', 'comment_created': datetime.datetime(2021, 7, 12, 20, 21, 6, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 668849356, 'comment_body': '@namannimmo10 \r\nI don\'t get why `evaluate` should be `False`. If we pass `evaluate=False` there is no purpose of having `doit` as it will return the same output as input.\r\n\r\n```\r\n>>> pprint(Series(tfm_c, tfm_b, tfm_a), use_unicode=False)\r\n[5*s]                 [1  s]\r\n[---]    [5   1  ]    [-  -]\r\n[ 1 ]    [-  ----]    [1  1]\r\n[   ]   *[1     2]   *[    ]\r\n[ 5 ]    [   6*s ]{t} [5  1]\r\n[ - ]                 [-  -]\r\n[ 1 ]{t}              [s  1]{t}\r\n\r\nFile ""d:\\sympy\\sympy\\physics\\control\\lti.py"", line 812, in sympy.physics.control.lti.Series\r\nFailed example:\r\n    pprint(Series(tfm_c, tfm_b, tfm_a).doit(), use_unicode=False)  # (2 Inputs -A-> 2 Outputs) -> (2 Inputs -B-> 1 Output) -> (1 Input -C-> 2 Outputs) is equivalent to (2 Inputs -Series Equivalent-> 2 Outputs).\r\nExpected:\r\n    [   /   3    \\    /    3    \\]\r\n    [25*\\6*s  + 1/  5*\\30*s  + 1/]\r\n    [-------------  -------------]\r\n    [        2           6*s     ]\r\n    [     6*s                    ]\r\n    [                            ]\r\n    [   /   3    \\    /    3    \\]\r\n    [25*\\6*s  + 1/  5*\\30*s  + 1/]\r\n    [-------------  -------------]\r\n    [        3              2    ]\r\n    [     6*s            6*s     ]{t}\r\nGot:\r\n    [5*s]                 [1  s]\r\n    [---]    [5   1  ]    [-  -]\r\n    [ 1 ]    [-  ----]    [1  1]\r\n    [   ]   *[1     2]   *[    ]\r\n    [ 5 ]    [   6*s ]{t} [5  1]\r\n    [ - ]                 [-  -]\r\n    [ 1 ]{t}              [s  1]{t}\r\n```', 'comment_created': datetime.datetime(2021, 7, 13, 14, 59, 37, tzinfo=datetime.timezone.utc), 'commenter': 'akshanshbhatt', 'type': 'User'}, {'comment_id': 668890931, 'comment_body': ""You're right!"", 'comment_created': datetime.datetime(2021, 7, 13, 15, 45, 38, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 669907918, 'comment_body': '`raises(TypeError, lambda: Series(Matrix([1/p]), tfm_3))`?', 'comment_created': datetime.datetime(2021, 7, 14, 19, 52, 19, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 669909170, 'comment_body': 'Remove this line? Already there on the top.', 'comment_created': datetime.datetime(2021, 7, 14, 19, 54, 16, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 669917310, 'comment_body': 'Add one test with `Parallel` instance as the argument and call `.rewrite(TransferFunctionMatrix)`? ', 'comment_created': datetime.datetime(2021, 7, 14, 20, 7, 7, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 669920824, 'comment_body': 'This applies to all such declarations.', 'comment_created': datetime.datetime(2021, 7, 14, 20, 13, 2, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 670572127, 'comment_body': 'Whichever method you modify in Series and Parallel, update the docstring and add one example related to MIMO TF.', 'comment_created': datetime.datetime(2021, 7, 15, 15, 30, 52, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 670583811, 'comment_body': 'I had modified the tests for this particular change.', 'comment_created': datetime.datetime(2021, 7, 15, 15, 43, 51, tzinfo=datetime.timezone.utc), 'commenter': 'akshanshbhatt', 'type': 'User'}, {'comment_id': 670592303, 'comment_body': 'This use of enumerate is probably more confusing then just using an integer index like:\r\n```\r\nreturn all(args[i].num_outputs == args[i+1].num_inputs for i in range(len(args)-1))\r\n```\r\nOtherwise `zip` is the tool to use rather than enumerate:\r\n```\r\npairs = zip(args[:-1], args[1:])\r\nreturn all(a.num_outputs == b.num_inputs for a, b in pairs)\r\n```', 'comment_created': datetime.datetime(2021, 7, 15, 15, 53, 6, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 670593548, 'comment_body': 'AttributeError should not be caught. Why is it necessary to catch this?\r\n\r\nWhatever raises the error can be handled in a better way.', 'comment_created': datetime.datetime(2021, 7, 15, 15, 54, 35, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 670595525, 'comment_body': 'Why would `self.args[0]` sometimes be an object that has this attribute and sometimes not?\r\n\r\nThat suggests a messy design somewhere.', 'comment_created': datetime.datetime(2021, 7, 15, 15, 56, 50, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 670598104, 'comment_body': ""Don't catch `AttributeError`. An `__add__` method should not raise if the argument is not of the expected type. Rather it should return `NotImplemented` which will lead to `TypeError` if the other object also returns `NotImplemented`."", 'comment_created': datetime.datetime(2021, 7, 15, 15, 59, 33, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 673458416, 'comment_body': ""\r\n> I had modified the tests for this particular change.\r\n\r\nI don't get it.  The docstrings of `doit()` methods in `Series` and `Parallel` should include at least one example for MIMO system.\r\n"", 'comment_created': datetime.datetime(2021, 7, 20, 20, 15, 49, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 675027324, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 7, 22, 17, 43, 6, tzinfo=datetime.timezone.utc), 'commenter': 'akshanshbhatt', 'type': 'User'}, {'comment_id': 680328924, 'comment_body': ""```suggestion\r\n__all__ = ['TransferFunction', 'Series', 'MIMOSeries', 'Parallel', 'MIMOParallel',\r\n```\r\nA backslash does nothing inside square brackets."", 'comment_created': datetime.datetime(2021, 7, 31, 8, 23, 52, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 680329219, 'comment_body': '```suggestion\r\n        SISO systems in a series configuration.\r\n```', 'comment_created': datetime.datetime(2021, 7, 31, 8, 26, 24, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 680330261, 'comment_body': '```suggestion\r\n    A class for representing a series configuration of MIMO systems.\r\n\r\n    Parameters\r\n    ==========\r\n\r\n    args : TransferFunctionMatrix, MIMOSeries, MIMOParallel\r\n        MIMO systems in a series configuration.\r\n```', 'comment_created': datetime.datetime(2021, 7, 31, 8, 36, 27, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 680330982, 'comment_body': ""I'd remove this line because now we have separate classes."", 'comment_created': datetime.datetime(2021, 7, 31, 8, 44, 2, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 680331626, 'comment_body': 'adjacent missing?', 'comment_created': datetime.datetime(2021, 7, 31, 8, 50, 19, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 680331769, 'comment_body': 'This is `MIMOSeries` class.', 'comment_created': datetime.datetime(2021, 7, 31, 8, 51, 57, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 680332003, 'comment_body': 'transfer function matrix it is.', 'comment_created': datetime.datetime(2021, 7, 31, 8, 54, 16, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 680332403, 'comment_body': 'Similarly, update the first line in `Parallel` ', 'comment_created': datetime.datetime(2021, 7, 31, 8, 57, 45, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 680333184, 'comment_body': 'Similarly, update the docstring in `MIMOParallel`.', 'comment_created': datetime.datetime(2021, 7, 31, 9, 6, 10, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 680333684, 'comment_body': 'Similarly, update the docstring in `MIMOParallel`', 'comment_created': datetime.datetime(2021, 7, 31, 9, 10, 30, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 680333973, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2021, 7, 31, 9, 13, 9, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 680334730, 'comment_body': ""I see this code block getting repeated in these four classes -- let's make a helper function which will check the `args` passed."", 'comment_created': datetime.datetime(2021, 7, 31, 9, 20, 55, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 680339874, 'comment_body': 'I don\'t really see the point in checking for a mix of MIMO and SISO, then checking for any MIMO. Why not just check SISO from the beginning?\r\n```suggestion\r\n        if not all(arg.is_SISO for arg in args):\r\n            raise TypeError(""MIMO systems are not allowed in `Series`. Use `MIMOSeries` instead."")\r\n\r\n        var_set = {arg.var for arg in args}\r\n        if len(var_set) != 1:\r\n            raise ValueError(""All transfer functions should use the same complex variable""\r\n                f"" of the Laplace transform. {len(var_set)} different values found."")\r\n\r\n        obj = super().__new__(cls, *args)\r\n        obj._is_SISO = True\r\n```\r\n', 'comment_created': datetime.datetime(2021, 7, 31, 10, 11, 43, tzinfo=datetime.timezone.utc), 'commenter': 'eric-wieser', 'type': 'User'}, {'comment_id': 680340039, 'comment_body': ""```suggestion\r\n    A class for representing parallel configuration of SISO transfer functions.\r\n```\r\nthis one doesn't support MIMO, right?"", 'comment_created': datetime.datetime(2021, 7, 31, 10, 13, tzinfo=datetime.timezone.utc), 'commenter': 'eric-wieser', 'type': 'User'}, {'comment_id': 680352434, 'comment_body': 'I guess this could be a class attribute', 'comment_created': datetime.datetime(2021, 7, 31, 12, 16, 54, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 680355960, 'comment_body': 'There are lots of places that do this:\r\n```python\r\nif not all(isinstance(arg, LinearTimeInvariant) for arg in args):\r\n    raise ...\r\n\r\nif not all(arg.is_SISO for arg in args):\r\n    raise ...\r\n\r\nvar_set = {arg.var for arg in args}\r\nif len(var_set) != 1:\r\n    raise ...\r\n```\r\nNow that SISO and MIMO are always distinct classes it would be possible to make a common superclass for SISO like `SISOLinearTimeInvariant`. Then the first two tests could be combined like:\r\n```python\r\nif not all(isinstance(arg, SISOLinearTimeInvariant) for arg in args):\r\n    raise...\r\n```\r\nAlso since this checking is quite common it should be factored out into a helper in the super class so it looks like this:\r\n```python\r\nclass LinearTimeInvariant:\r\n\r\n    @classmethod\r\n    def _check_args(cls, args):\r\n        if not all(isinstance(arg, cls._clstype) for arg in args):\r\n            raise ...        \r\n        var_set = {arg.var for arg in args}\r\n        if len(var_set) != 1:\r\n            raise ...\r\n        (var,) = var_set\r\n        return var  # does the caller need this?\r\n\r\n    @property\r\n    def is_SISO(self):\r\n        return self._is_SISO\r\n\r\n\r\nclass SISOLinearTimeInvariant(LinearTimeInvariant):\r\n    _is_SISO = True\r\n\r\n\r\nclass MIMOLinearTimeInvariant(LinearTimeInvariant\r\n    _is_SISO = False\r\n\r\n\r\nSISOLinearTimeInvariant._clstype = SISOLinearTimeInvariant\r\nMIMOLinearTimeInvariant._clstype = MIMOLinearTimeInvariant\r\n\r\n\r\nclass Series(SISOLinearTimeInvariant):\r\n\r\n    def __new__(cls, *args):\r\n        if not args:\r\n            raise ... # maybe this could be handled in _check_args as well?\r\n        var = cls._check_args(args)\r\n        return super().__new__(cls, *args)\r\n```', 'comment_created': datetime.datetime(2021, 7, 31, 12, 53, 22, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 680356131, 'comment_body': 'Using `Mul` here could lead to pole-zero cancellation. Is that intended?', 'comment_created': datetime.datetime(2021, 7, 31, 12, 54, 57, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 680356351, 'comment_body': 'Maybe this flattening should be handled in `Parallel.__new__`. Are these supposed to be equivalent:\r\n```python\r\ntf1 + tf2 + tf3\r\nParallel(tf1, Parallel(tf2, tf3))\r\n```', 'comment_created': datetime.datetime(2021, 7, 31, 12, 56, 55, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 680356423, 'comment_body': 'This should return `NotImplemented` if `other` is not a recognised type.', 'comment_created': datetime.datetime(2021, 7, 31, 12, 57, 45, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 680356457, 'comment_body': 'This should check the type of other and return `NotImplemented` if other is not a recognised type.', 'comment_created': datetime.datetime(2021, 7, 31, 12, 58, 9, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 680356526, 'comment_body': 'Is this still correct?', 'comment_created': datetime.datetime(2021, 7, 31, 12, 59, 22, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 680356595, 'comment_body': 'If there was a common superclass for MIMO then it could mentioned as the type here rather than listing all the particular classes.', 'comment_created': datetime.datetime(2021, 7, 31, 13, 0, 12, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 680357388, 'comment_body': 'Long lines should be broken. You can use `(` to extend them e.g.:\r\n```python\r\nassert (asdsdfsdfsd\r\n        == asdasdasdasd\r\n        == asdasdasdasdasd)\r\n```\r\nIs there not a less verbose way of creating a `TransferFunctionMatrix`?', 'comment_created': datetime.datetime(2021, 7, 31, 13, 8, 15, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 680357813, 'comment_body': ""When you find yourself using `map` with `lambda` it is usually clearer just to use a comprehension:\r\n```python\r\nreturn '+'.join(self._print(arg) for arg in expr.args)\r\n```\r\nSometimes `lambda` is useful for breaking long lines (I prefer not to have a multiline comprehension) but that doesn't apply here.\r\n\r\nShould this have spaces around the `+` like `1 + 2`?"", 'comment_created': datetime.datetime(2021, 7, 31, 13, 11, 31, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 680392093, 'comment_body': 'It ultimately calls `__add__(self, -other)`, and I have handled it there. So, should I do it again?', 'comment_created': datetime.datetime(2021, 7, 31, 18, 11, 36, tzinfo=datetime.timezone.utc), 'commenter': 'akshanshbhatt', 'type': 'User'}, {'comment_id': 680404278, 'comment_body': 'Does this method actually return NotImplemented of other is not a recognised type?\r\n\r\nThat is what is needed for cooperative dispatch.', 'comment_created': datetime.datetime(2021, 7, 31, 20, 12, 21, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 680491507, 'comment_body': 'Is it possible that this can lead to pole-zero cancellation?', 'comment_created': datetime.datetime(2021, 8, 1, 10, 46, 25, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 680491594, 'comment_body': 'Can this lead to pole-zero cancellation?', 'comment_created': datetime.datetime(2021, 8, 1, 10, 47, 19, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 680492350, 'comment_body': 'The prec passed to `_eval_evalf` is binary but this passes it as the decimal prec to `evalf`.', 'comment_created': datetime.datetime(2021, 8, 1, 10, 53, 16, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 680492627, 'comment_body': 'After #21626 Matrix has a `.flat` method which could be used here.', 'comment_created': datetime.datetime(2021, 8, 1, 10, 55, 15, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 680492877, 'comment_body': ""If flattening is happening here in `__add__` but not in `__new__` then it won't work if `Parallel` is used directly like `Parallel(tf1, Parallel(tf2, tf3))`.\r\n\r\nIs that intentional?"", 'comment_created': datetime.datetime(2021, 8, 1, 10, 57, 3, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 680492993, 'comment_body': 'Maybe there should be a decorator to do this check and return `NotImplemented` since it is used so many times. Already int he codebase there is `sympifyit` and `polyfyit` that do something similar', 'comment_created': datetime.datetime(2021, 8, 1, 10, 57, 54, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 680493152, 'comment_body': 'I would just make this: `return (self.num_outputs, self.num_inputs)`.', 'comment_created': datetime.datetime(2021, 8, 1, 10, 59, 13, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 680496373, 'comment_body': ""I guess this is analogous to multiplying a scalar and a matrix. Should that be allowed?\r\n\r\nAlso is it important to show this particular error message because this second check wouldn't be needed if the first check was for SISOLinearTimeInvariant"", 'comment_created': datetime.datetime(2021, 8, 1, 11, 24, 21, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 680814494, 'comment_body': '> I guess this is analogous to multiplying a scalar and a matrix. Should that be allowed?\r\n> \r\nWe can make that work later on if needed.\r\n', 'comment_created': datetime.datetime(2021, 8, 2, 9, 24, 37, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 680815217, 'comment_body': ""> I guess this is analogous to multiplying a scalar and a matrix. Should that be allowed?\r\n\r\nWe can allow that, but I don't think that it would have any physical significance."", 'comment_created': datetime.datetime(2021, 8, 2, 9, 25, 41, tzinfo=datetime.timezone.utc), 'commenter': 'akshanshbhatt', 'type': 'User'}, {'comment_id': 680822498, 'comment_body': ""I tried a few cases where there was a possibility of pole-zero cancelation, but that didn't happen."", 'comment_created': datetime.datetime(2021, 8, 2, 9, 35, 59, tzinfo=datetime.timezone.utc), 'commenter': 'akshanshbhatt', 'type': 'User'}, {'comment_id': 680832051, 'comment_body': 'Taken from [`SystemsModelParallelConnect`](https://reference.wolfram.com/language/ref/SystemsModelParallelConnect.html):\r\n\r\n> Add a disturbance model to the output of a system:\r\n> ![image](https://user-images.githubusercontent.com/43007653/127840848-0c7a7ee8-9513-4a30-a35c-75716221feb2.png)\r\n> ![image](https://user-images.githubusercontent.com/43007653/127840870-3fd2ece5-a701-4851-9ec5-05e4bb12b970.png)\r\n> ![image](https://user-images.githubusercontent.com/43007653/127840908-567ac3a1-c321-4eee-ab69-05af4c91c157.png)\r\n\r\n', 'comment_created': datetime.datetime(2021, 8, 2, 9, 49, 2, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 680851596, 'comment_body': ""In some cases, yes. I've fixed it and added a test case."", 'comment_created': datetime.datetime(2021, 8, 2, 10, 18, 49, tzinfo=datetime.timezone.utc), 'commenter': 'akshanshbhatt', 'type': 'User'}]","[{'commit_sha': 'a7248643931187832278e687110c57fef2eb52ab', 'committer_username': 'akshanshbhatt', 'committer_name': 'akshānsh', 'committer_email': 'info@akshansh.me', 'commit_date': datetime.datetime(2019, 7, 23, 14, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '83dafd70a31d0f210839ed4656a45bf4752c38ec', 'committer_username': 'akshanshbhatt', 'committer_name': 'akshānsh', 'committer_email': 'info@akshansh.me', 'commit_date': datetime.datetime(2019, 7, 23, 14, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '059a2fe9004868dc25e149aff8658cb630bf499c', 'committer_username': 'akshanshbhatt', 'committer_name': 'akshānsh', 'committer_email': 'info@akshansh.me', 'commit_date': datetime.datetime(2019, 7, 23, 14, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fcd2e12d5e6ac15694dfca797fe22e4f5dc23a53', 'committer_username': 'akshanshbhatt', 'committer_name': 'akshānsh', 'committer_email': 'info@akshansh.me', 'commit_date': datetime.datetime(2019, 7, 23, 14, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ee2a9bb7d213372d6d7e4659b5bfe45dddbd2ecd', 'committer_username': 'akshanshbhatt', 'committer_name': 'akshānsh', 'committer_email': 'info@akshansh.me', 'commit_date': datetime.datetime(2019, 7, 23, 14, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd84ae20454f9212855a947c1620340c7869a1c36', 'committer_username': 'akshanshbhatt', 'committer_name': 'akshānsh', 'committer_email': 'info@akshansh.me', 'commit_date': datetime.datetime(2019, 7, 23, 14, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '967228aa8d8a8e41aee75760d989d67c57d4560f', 'committer_username': 'akshanshbhatt', 'committer_name': 'akshānsh', 'committer_email': 'info@akshansh.me', 'commit_date': datetime.datetime(2019, 7, 23, 14, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8bc9326c2ba39f48080e77a86cfeb8581becb320', 'committer_username': 'akshanshbhatt', 'committer_name': 'akshānsh', 'committer_email': 'info@akshansh.me', 'commit_date': datetime.datetime(2019, 7, 23, 14, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1a2c741de7e0c3c78bb5239522c34b907d363465', 'committer_username': 'akshanshbhatt', 'committer_name': 'akshānsh', 'committer_email': 'info@akshansh.me', 'commit_date': datetime.datetime(2019, 7, 23, 14, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6bda311fb2a9d0f9181052f578036bec83f16273', 'committer_username': 'akshanshbhatt', 'committer_name': 'akshānsh', 'committer_email': 'info@akshansh.me', 'commit_date': datetime.datetime(2019, 7, 23, 14, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9cc609f2a3a82e3ec54125ae069f4db5df5176df', 'committer_username': 'akshanshbhatt', 'committer_name': 'akshānsh', 'committer_email': 'info@akshansh.me', 'commit_date': datetime.datetime(2019, 7, 23, 14, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9c4276df3cdb1c7ac81286c1e95ec6f843425679', 'committer_username': 'akshanshbhatt', 'committer_name': 'akshānsh', 'committer_email': 'info@akshansh.me', 'commit_date': datetime.datetime(2019, 7, 23, 14, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7ff8b1a3eaa44f5abf31c3161515adf401f94f17', 'committer_username': 'akshanshbhatt', 'committer_name': 'akshānsh', 'committer_email': 'info@akshansh.me', 'commit_date': datetime.datetime(2019, 7, 23, 14, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4f25d86b18da8d6ba4faf41ddc8e6574a3342338', 'committer_username': 'akshanshbhatt', 'committer_name': 'akshānsh', 'committer_email': 'info@akshansh.me', 'commit_date': datetime.datetime(2019, 7, 23, 14, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8adef96ddf967756f68f08d5e5b513a63a64fe7d', 'committer_username': 'akshanshbhatt', 'committer_name': 'akshānsh', 'committer_email': 'info@akshansh.me', 'commit_date': datetime.datetime(2019, 7, 23, 14, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '74c4700a040a63c6b2792092d365245f09d68e37', 'committer_username': 'akshanshbhatt', 'committer_name': 'akshānsh', 'committer_email': 'info@akshansh.me', 'commit_date': datetime.datetime(2019, 7, 23, 14, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '564adb1aeee597309b51cbc4d71cc57605b5fb9d', 'committer_username': 'akshanshbhatt', 'committer_name': 'akshānsh', 'committer_email': 'info@akshansh.me', 'commit_date': datetime.datetime(2019, 7, 23, 14, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5a347768f24a21a3320abcab0346ddc6210175d1', 'committer_username': 'akshanshbhatt', 'committer_name': 'akshānsh', 'committer_email': 'info@akshansh.me', 'commit_date': datetime.datetime(2019, 7, 23, 14, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ad600b7ef5eb348dc7614abccc8ae479c0670bf3', 'committer_username': 'akshanshbhatt', 'committer_name': 'akshānsh', 'committer_email': 'info@akshansh.me', 'commit_date': datetime.datetime(2019, 7, 23, 14, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5fb520ed577f3eca9aabe784041ea0caa050cf72', 'committer_username': 'akshanshbhatt', 'committer_name': 'akshānsh', 'committer_email': 'info@akshansh.me', 'commit_date': datetime.datetime(2019, 7, 23, 14, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7b616c82ce3a9cba964c27df2620a03b351898a7', 'committer_username': 'akshanshbhatt', 'committer_name': 'akshānsh', 'committer_email': 'info@akshansh.me', 'commit_date': datetime.datetime(2019, 7, 23, 14, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '22f1d559c1a1a38425fecf847edbcc0716aedae5', 'committer_username': 'akshanshbhatt', 'committer_name': 'akshānsh', 'committer_email': 'info@akshansh.me', 'commit_date': datetime.datetime(2019, 7, 23, 14, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a5edd68dcfdc449f88ef501ee2e7a26a0fd10e6c', 'committer_username': 'akshanshbhatt', 'committer_name': 'akshānsh', 'committer_email': 'info@akshansh.me', 'commit_date': datetime.datetime(2019, 7, 23, 14, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '34ed15b94a220c2d0a9f5e0ddf9eac31e0ce5444', 'committer_username': 'akshanshbhatt', 'committer_name': 'akshānsh', 'committer_email': 'info@akshansh.me', 'commit_date': datetime.datetime(2019, 7, 23, 14, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '414b85def13c05548198035de9eab3f576970290', 'committer_username': 'akshanshbhatt', 'committer_name': 'akshānsh', 'committer_email': 'info@akshansh.me', 'commit_date': datetime.datetime(2019, 7, 23, 14, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bd55c07e9e55c793137dca71c1497cb26c67304d', 'committer_username': 'akshanshbhatt', 'committer_name': 'akshānsh', 'committer_email': 'info@akshansh.me', 'commit_date': datetime.datetime(2019, 7, 23, 14, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5c2a1ef8b1fa396d92c6152c6d4304ef635ccfc3', 'committer_username': 'akshanshbhatt', 'committer_name': 'akshānsh', 'committer_email': 'info@akshansh.me', 'commit_date': datetime.datetime(2019, 7, 23, 14, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '72ea7e392aaf4b661b4fd7979143bd866f04ff16', 'committer_username': 'akshanshbhatt', 'committer_name': 'akshānsh', 'committer_email': 'info@akshansh.me', 'commit_date': datetime.datetime(2019, 7, 23, 14, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'de5670917e9e77e2b0b1b22e5ea46daeb53209d9', 'committer_username': 'akshanshbhatt', 'committer_name': 'akshānsh', 'committer_email': 'info@akshansh.me', 'commit_date': datetime.datetime(2019, 7, 23, 14, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '67b7cb14d810638b31bd4a750f5f984ce2d70b26', 'committer_username': 'akshanshbhatt', 'committer_name': 'akshānsh', 'committer_email': 'info@akshansh.me', 'commit_date': datetime.datetime(2019, 7, 23, 14, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f356a70caafcaec26ea14b249a6afd6a991ac660', 'committer_username': 'akshanshbhatt', 'committer_name': 'akshānsh', 'committer_email': 'info@akshansh.me', 'commit_date': datetime.datetime(2019, 7, 23, 14, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a756876726907357b93a59d869d5ddc3395bf19c', 'committer_username': 'akshanshbhatt', 'committer_name': 'akshānsh', 'committer_email': 'info@akshansh.me', 'commit_date': datetime.datetime(2019, 7, 23, 14, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f9b92a262becd013f9908c58360929caf7bbe43d', 'committer_username': 'akshanshbhatt', 'committer_name': 'akshānsh', 'committer_email': 'info@akshansh.me', 'commit_date': datetime.datetime(2019, 7, 23, 14, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2b1cd6a440ea3e8085e7eb12f4e09d683f10f356', 'committer_username': 'akshanshbhatt', 'committer_name': 'akshānsh', 'committer_email': 'info@akshansh.me', 'commit_date': datetime.datetime(2019, 7, 23, 14, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c18790458ee65ab46a93e05f4b8fa6425718cca5', 'committer_username': 'akshanshbhatt', 'committer_name': 'akshānsh', 'committer_email': 'info@akshansh.me', 'commit_date': datetime.datetime(2019, 7, 23, 14, 35, 25, tzinfo=datetime.timezone.utc)}]",akshānsh,53227127,info@akshansh.me,User,,18,,21,32
693300658,Add graphical analyses in `physics.control`,"<!-- Your title above should be a short description of what
was changed. Do not include the issue number in the title. -->

#### References to other Issues or PRs
<!-- If this pull request fixes an issue, write ""Fixes #NNNN"" in that exact
format, e.g. ""Fixes #1234"" (see
https://tinyurl.com/auto-closing for more information). Also, please
write a comment on that issue linking back to this pull request once it is
open. -->


#### Brief description of what is fixed or changed

Implement common graphical analyses related to control theory.

#### Other comments

__Checklist:__

- [x] Pole-Zero Plot
- [x] Step Response
- [x] Impulse Response
- [x] Ramp Response
- [x] Bode Plot
- [x] Methods for getting numerical data
- [x] Docs
- [x] Tests

__Future Work:__

- [ ] ~~Root Locus~~ (Effective sampling needed. See https://github.com/sympy/sympy/pull/21763#discussion_r675772024 and https://github.com/sympy/sympy/pull/21763#discussion_r675882746)
- [ ] ~~Nyquist Plot **~~ (Out of scope of my proposed project. Will add sometime in the future along with Nichols plot)

#### Release Notes

<!-- Write the release notes for this release below between the BEGIN and END
statements. The basic format is a bulleted list with the name of the subpackage
and the release note for this PR. For example:

* solvers
  * Added a new solver for logarithmic equations.

* functions
  * Fixed a bug with log of integers.

or if no release note(s) should be included use:

NO ENTRY

See https://github.com/sympy/sympy/wiki/Writing-Release-Notes for more
information on how to write release notes. The bot will check your release
notes automatically to see if they are formatted correctly. -->

<!-- BEGIN RELEASE NOTES -->
* physics.control
  * Added common plots related to control theory.
<!-- END RELEASE NOTES -->",True,21763,https://api.github.com/repos/sympy/sympy/pulls/21763,https://github.com/sympy/sympy/pull/21763,closed,1310,2,7,29,39,49,2,0,"[{'name': 'GSoC'}, {'name': 'physics.control'}]",2021-07-20 09:15:25+00:00,2021-08-17 16:17:02+00:00,2444497.0,"28 days, 7:01:37","[{'comment_id': 674018828, 'comment_body': ""```suggestion\r\n    plt.plot(x_poles, y_poles, 'x', mfc='none', markersize=10)\r\n    plt.plot(x_zeros, y_zeros, 'o', markersize=7)\r\n```\r\nA small markersize will help us point out the zeros more precisely, no? "", 'comment_created': datetime.datetime(2021, 7, 21, 14, 20, 59, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 674020861, 'comment_body': '```suggestion\r\n        xlabel=""Time (s)"", ylabel=""Amplitude"")\r\n```\r\n', 'comment_created': datetime.datetime(2021, 7, 21, 14, 23, 17, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 675432705, 'comment_body': ""```suggestion\r\ndef bode(system, initial_exp=-5, final_exp=5, show=True, **kwargs):\r\n```\r\nNaming should be consistent for all the plots. Although, I wonder if we really want this naming style. `pole_zero`, by itself, doesn't make much sense."", 'comment_created': datetime.datetime(2021, 7, 23, 9, 38, 1, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 675448267, 'comment_body': 'What if the system is MIMO? ', 'comment_created': datetime.datetime(2021, 7, 23, 9, 56, 11, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 675464659, 'comment_body': 'I would not use `Poly` for this implementation; It doesn\'t work well with time-delay terms.\r\n```python\r\n>>> G = TransferFunction(s*exp(-s), s**2 + 2*s + 1, s)\r\n>>> pole_zero(G)\r\nTraceback (most recent call last):\r\n  File ""/home/namannimmo/oss/sympy/sympy/polys/polyutils.py"", line 211, in _parallel_dict_from_expr_if_gens\r\n    monom[indices[base]] = exp\r\nKeyError: exp(-s)\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File ""<stdin>"", line 1, in <module>\r\n  File ""/home/namannimmo/oss/sympy/sympy/physics/control/control_plots.py"", line 28, in pole_zero\r\n    num_poly = Poly(system.num, system.var).all_coeffs()\r\n  File ""/home/namannimmo/oss/sympy/sympy/polys/polytools.py"", line 164, in __new__\r\n    return cls._from_expr(rep, opt)\r\n  File ""/home/namannimmo/oss/sympy/sympy/polys/polytools.py"", line 293, in _from_expr\r\n    rep, opt = _dict_from_expr(rep, opt)\r\n  File ""/home/namannimmo/oss/sympy/sympy/polys/polyutils.py"", line 368, in _dict_from_expr\r\n    rep, gens = _dict_from_expr_if_gens(expr, opt)\r\n  File ""/home/namannimmo/oss/sympy/sympy/polys/polyutils.py"", line 307, in _dict_from_expr_if_gens\r\n    (poly,), gens = _parallel_dict_from_expr_if_gens((expr,), opt)\r\n  File ""/home/namannimmo/oss/sympy/sympy/polys/polyutils.py"", line 216, in _parallel_dict_from_expr_if_gens\r\n    raise PolynomialError(""%s contains an element of ""\r\nsympy.polys.polyerrors.PolynomialError: exp(-s) contains an element of the set of generators.\r\n\r\n```', 'comment_created': datetime.datetime(2021, 7, 23, 10, 24, 47, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 675467190, 'comment_body': 'Why are you using NumPy to do these computations? SymPy can do all of that. I guess the helper function below should also follow this.', 'comment_created': datetime.datetime(2021, 7, 23, 10, 29, 32, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 675473093, 'comment_body': '```suggestion\r\n    return plot(y, (x, 0, upper_limit), show=True, title=""Impulse Response"",\r\n```\r\n', 'comment_created': datetime.datetime(2021, 7, 23, 10, 40, 36, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 675487778, 'comment_body': 'Check the arguments of the plotting functions?', 'comment_created': datetime.datetime(2021, 7, 23, 11, 10, 38, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 675493210, 'comment_body': ""Unfortunately, I don't think this is so easy. Can you give me some links which you followed so that I could check the correctness? "", 'comment_created': datetime.datetime(2021, 7, 23, 11, 22, 30, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 675562006, 'comment_body': 'As I said earlier --\r\n\r\n> Some minor API changes are required, along with docs and tests, which I will try to finish before next week.\r\n\r\nThis was one of them. All of these plots are meant for SISO lti systems with no time delay term.\r\n', 'comment_created': datetime.datetime(2021, 7, 23, 13, 24, 55, tzinfo=datetime.timezone.utc), 'commenter': 'akshanshbhatt', 'type': 'User'}, {'comment_id': 675563728, 'comment_body': ""The reason behind using `Poly()` was speed. I was using NumPy for root-locus and getting a huge performance advantage because- (a) SymPy is a symbolic computation library and NumPy is a numeric computation library. (b) Matplotlib requires NumPy for internal numeric computation and hence NumPy is also a listed dependency for matplotlib. It is installed **with** matplotlib.\r\n\r\n![image](https://user-images.githubusercontent.com/53227127/126779816-0781e6ce-abcd-4e2c-8522-b66820b96a7c.png)\r\n\r\nAlso just to be clear, these plots will not support transfer functions with time delay. Maybe I'll allow time-delay in Pole-Zero because time delay doesn't affect the poles and zeroes of the system.\r\n"", 'comment_created': datetime.datetime(2021, 7, 23, 13, 27, 26, tzinfo=datetime.timezone.utc), 'commenter': 'akshanshbhatt', 'type': 'User'}, {'comment_id': 675563816, 'comment_body': 'SymPy can do it but by taking 1000x more time. SymPy is not optimized for large numerical computations, NumPy however, is a numerical computation library. Let me explain.\r\n\r\nThis root computation operation in SymPy took about 50ms per operation.\r\n```python \r\nfrom sympy import Poly, roots, nroots\r\nfrom sympy.abc import x\r\n\r\nroot_list = []\r\n\r\nfor k in range(0, 100):\r\n    s = Poly(k*x**8 + 9*x**7 + 7*x**6 + 32*x**5 + 89*x**2 + 78*x + 10, x)\r\n    %time root_list.append(nroots(s, n=8))\r\n\r\nprint(root_list)\r\n```\r\n\r\nOUTPUT:\r\n```\r\nWall time: 59 ms\r\nWall time: 58.3 ms\r\nWall time: 86.6 ms\r\nWall time: 62 ms\r\nWall time: 82 ms\r\nWall time: 53 ms\r\nWall time: 67.8 ms\r\nWall time: 51 ms\r\nWall time: 54 ms\r\nWall time: 53.1 ms\r\nWall time: 47 ms\r\nWall time: 54 ms\r\nWall time: 59 ms\r\nWall time: 57 ms\r\nWall time: 71 ms\r\nWall time: 50 ms\r\nWall time: 50 ms\r\nWall time: 51 ms\r\nWall time: 65.2 ms\r\nWall time: 45.8 ms\r\nWall time: 46.3 ms\r\nWall time: 67.7 ms\r\nWall time: 44.9 ms\r\nWall time: 47.9 ms\r\nWall time: 61.8 ms\r\nWall time: 55.9 ms\r\nWall time: 44.4 ms\r\nWall time: 48.9 ms\r\nWall time: 42.7 ms\r\nWall time: 42.1 ms\r\nWall time: 48 ms\r\nWall time: 55.9 ms\r\nWall time: 70.4 ms\r\nWall time: 111 ms\r\nWall time: 68.2 ms\r\nWall time: 41.7 ms\r\nWall time: 44 ms\r\nWall time: 47 ms\r\nWall time: 39.3 ms\r\nWall time: 45 ms\r\nWall time: 23 ms\r\nWall time: 21 ms\r\nWall time: 23 ms\r\nWall time: 22.6 ms\r\nWall time: 24 ms\r\nWall time: 29 ms\r\nWall time: 22 ms\r\nWall time: 20 ms\r\nWall time: 19.5 ms\r\nWall time: 18.7 ms\r\nWall time: 24.4 ms\r\nWall time: 30.4 ms\r\nWall time: 35 ms\r\nWall time: 24 ms\r\nWall time: 20 ms\r\nWall time: 25 ms\r\nWall time: 27 ms\r\nWall time: 21 ms\r\nWall time: 23 ms\r\nWall time: 17 ms\r\nWall time: 18 ms\r\nWall time: 20 ms\r\nWall time: 22.1 ms\r\nWall time: 21 ms\r\nWall time: 22.8 ms\r\nWall time: 15.6 ms\r\nWall time: 16.6 ms\r\nWall time: 15.6 ms\r\nWall time: 18.7 ms\r\nWall time: 20 ms\r\nWall time: 28 ms\r\nWall time: 16 ms\r\nWall time: 16 ms\r\nWall time: 16 ms\r\nWall time: 19 ms\r\nWall time: 17.9 ms\r\nWall time: 21 ms\r\nWall time: 24 ms\r\nWall time: 16.6 ms\r\nWall time: 16.7 ms\r\nWall time: 18.7 ms\r\nWall time: 17.8 ms\r\nWall time: 19.5 ms\r\nWall time: 22.1 ms\r\nWall time: 24.9 ms\r\nWall time: 35 ms\r\nWall time: 29 ms\r\nWall time: 35 ms\r\nWall time: 19 ms\r\nWall time: 23 ms\r\nWall time: 16 ms\r\nWall time: 4.44 ms\r\nWall time: 15.6 ms\r\nWall time: 36.5 ms\r\nWall time: 11 ms\r\nWall time: 28.3 ms\r\nWall time: 33.1 ms\r\nWall time: 31 ms\r\nWall time: 31 ms\r\nWall time: 24 ms\r\n```\r\n\r\nThe same operation on NumPy took:\r\n```python \r\nimport numpy as np\r\n\r\nroot_list = []\r\n\r\nfor k in range(0, 100):\r\n    s = np.array([k, 9, 7, 32, 0, 0, 89, 78, 10])\r\n    %time root_list.append(np.roots(s))\r\n\r\nprint(root_list)\r\n```\r\nOUTPUT:\r\n\r\n```\r\nWall time: 29.7 ms\r\nWall time: 0 ns\r\nWall time: 1e+03 µs\r\nWall time: 0 ns\r\nWall time: 0 ns\r\nWall time: 0 ns\r\nWall time: 0 ns\r\nWall time: 0 ns\r\nWall time: 1 ms\r\nWall time: 0 ns\r\nWall time: 0 ns\r\nWall time: 996 µs\r\nWall time: 0 ns\r\nWall time: 0 ns\r\nWall time: 1 ms\r\nWall time: 0 ns\r\nWall time: 0 ns\r\nWall time: 0 ns\r\nWall time: 0 ns\r\nWall time: 0 ns\r\nWall time: 0 ns\r\nWall time: 0 ns\r\nWall time: 0 ns\r\nWall time: 0 ns\r\nWall time: 0 ns\r\nWall time: 0 ns\r\nWall time: 0 ns\r\nWall time: 0 ns\r\nWall time: 0 ns\r\nWall time: 0 ns\r\nWall time: 0 ns\r\nWall time: 0 ns\r\nWall time: 0 ns\r\nWall time: 0 ns\r\nWall time: 0 ns\r\nWall time: 0 ns\r\nWall time: 1.01 ms\r\nWall time: 0 ns\r\nWall time: 998 µs\r\nWall time: 0 ns\r\nWall time: 1.02 ms\r\nWall time: 0 ns\r\nWall time: 1.01 ms\r\nWall time: 0 ns\r\nWall time: 0 ns\r\nWall time: 1.01 ms\r\nWall time: 0 ns\r\nWall time: 0 ns\r\nWall time: 0 ns\r\nWall time: 0 ns\r\nWall time: 0 ns\r\nWall time: 0 ns\r\nWall time: 0 ns\r\nWall time: 0 ns\r\nWall time: 0 ns\r\nWall time: 0 ns\r\nWall time: 0 ns\r\nWall time: 0 ns\r\nWall time: 0 ns\r\nWall time: 0 ns\r\nWall time: 1e+03 µs\r\nWall time: 0 ns\r\nWall time: 0 ns\r\nWall time: 999 µs\r\nWall time: 0 ns\r\nWall time: 0 ns\r\nWall time: 1 ms\r\nWall time: 0 ns\r\nWall time: 998 µs\r\nWall time: 0 ns\r\nWall time: 0 ns\r\nWall time: 0 ns\r\nWall time: 0 ns\r\nWall time: 0 ns\r\nWall time: 0 ns\r\nWall time: 0 ns\r\nWall time: 0 ns\r\nWall time: 0 ns\r\nWall time: 0 ns\r\nWall time: 997 µs\r\nWall time: 0 ns\r\nWall time: 0 ns\r\nWall time: 0 ns\r\nWall time: 0 ns\r\nWall time: 0 ns\r\nWall time: 0 ns\r\nWall time: 0 ns\r\nWall time: 0 ns\r\nWall time: 0 ns\r\nWall time: 0 ns\r\nWall time: 0 ns\r\nWall time: 0 ns\r\nWall time: 0 ns\r\nWall time: 0 ns\r\nWall time: 0 ns\r\nWall time: 0 ns\r\nWall time: 0 ns\r\nWall time: 0 ns\r\nWall time: 0 ns\r\nWall time: 0 ns\r\n```\r\n\r\nAnd yes, the results are not cached. you can try this on your local.\r\n\r\nThis speed in computation is required especially during plotting. This is not something out of the blue. NumPy is used internally in the SymPy plotting module too. Using NumPy is not a choice rather a necessity.\r\n\r\nhttps://github.com/sympy/sympy/blob/645bbb06cd289165a9144d4c2c64bf17b664f8ac/sympy/plotting/plot.py#L1322-L1335\r\n\r\n', 'comment_created': datetime.datetime(2021, 7, 23, 13, 27, 31, tzinfo=datetime.timezone.utc), 'commenter': 'akshanshbhatt', 'type': 'User'}, {'comment_id': 675563943, 'comment_body': 'As told earlier, the user API is crude now. I have not dealt with input checking yet. Even the keyword arguments passed are unused in most of the function signatures.', 'comment_created': datetime.datetime(2021, 7, 23, 13, 27, 41, tzinfo=datetime.timezone.utc), 'commenter': 'akshanshbhatt', 'type': 'User'}, {'comment_id': 675564004, 'comment_body': ""> Can you give me some links which you followed so that I could check the correctness?\r\n\r\nhttps://en.wikipedia.org/wiki/Bode_plot\r\nhttps://www.youtube.com/watch?v=_eh1conN6YM\r\nhttps://www.youtube.com/watch?v=CSAp9ooQRT0\r\n\r\nI didn't look at someone's implementation if that was what you meant. I just read the Wikipedia page saw a couple of related videos/univ lectures. I tested it with 10s of different examples which I could find online and all the plots matched exactly. There might be few vulnerabilities, if you find any particular case just let me know.\r\n\r\n> Unfortunately, I don't think this is so easy.\r\n\r\nThe point here is not about being easy. It is the **definition** of the Bode plot. This is how it is defined. I really don't get that how can it be wrong if the calculation of points is done by the sole definition of the plot."", 'comment_created': datetime.datetime(2021, 7, 23, 13, 27, 46, tzinfo=datetime.timezone.utc), 'commenter': 'akshanshbhatt', 'type': 'User'}, {'comment_id': 675586041, 'comment_body': 'I forgot to add that the time results that I shared were only for 100 different `k` values.\r\nAs you can see here, for root locus, we are computing the roots 10000 times (`num=10000`) so there is absolutely no point in using sympy.\r\n\r\nhttps://github.com/sympy/sympy/blob/ec68ebf5b089f9166b759c4fe7fd5ef42fcf2e7b/sympy/physics/control/control_plots.py#L133-L140\r\n\r\nhttps://github.com/sympy/sympy/blob/ec68ebf5b089f9166b759c4fe7fd5ef42fcf2e7b/sympy/physics/control/control_plots.py#L114-L121', 'comment_created': datetime.datetime(2021, 7, 23, 13, 57, 58, tzinfo=datetime.timezone.utc), 'commenter': 'akshanshbhatt', 'type': 'User'}, {'comment_id': 675618807, 'comment_body': ""It is possible to use sympy with other plotting backends that do not necessarily use numpy:\r\nhttps://pypi.org/project/sympy-plot-backends/\r\n\r\nGenerally when sympy has numeric routines they are more accurate than numpy's:\r\n```python\r\nIn [8]: p = expand(prod(x - i for i in range(1, 21)))\r\n\r\nIn [9]: nroots(p)\r\nOut[9]: \r\n[1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15\r\n.0, 16.0, 17.0, 18.0, 19.0, 20.0]\r\n\r\nIn [10]: numpy.roots(Poly(p).all_coeffs())\r\nOut[10]: \r\narray([19.99980929, 19.00190982, 17.99092135, 17.02542715, 15.94628672,\r\n       15.0754938 , 13.91475559, 13.07431403, 11.95328325, 11.02502293,\r\n        9.99041304,  9.00291529,  7.99935583,  7.000102  ,  5.99998925,\r\n        5.00000067,  3.99999998,  3.        ,  2.        ,  1.        ])\r\n```"", 'comment_created': datetime.datetime(2021, 7, 23, 14, 42, 10, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 675684810, 'comment_body': 'Plotting backend is not an issue here. Whichever backend we may use, it requires efficient sampling to generate plots. Some form of numerical computation will always occur under the hood. SymPy undoubtedly is more accurate in numerical operations. Still, during sampling with a large number of points (10000), accuracy hardly matters, especially when a much faster approach (more than 1000 times) is accurate up to 3-4 decimal places.', 'comment_created': datetime.datetime(2021, 7, 23, 16, 19, 17, tzinfo=datetime.timezone.utc), 'commenter': 'akshanshbhatt', 'type': 'User'}, {'comment_id': 675728067, 'comment_body': ""> is accurate up to 3-4 decimal places.\r\n\r\nThe accuracy can degrade much more than that.\r\n\r\nThe idea with using a symbolic library is that you should have greater confidence in things like the accuracy of any computed result even if that means waiting longer for things to be computed. It also means that different approaches are often better to make something efficient.\r\n\r\nAs an example your `root_locus` function computes the roots of 10000 different polynomials. Why 10000? No one needs that many points in the plot. Many of the lines are just joining points on the real axis. To plot a straight line you only need to know its start and end and those can be computed exactly. Then you don't need to evaluate the polynomial at 10000 points.\r\n\r\nI'm not sure I've understood the calculation that you want precisely but I think it's something like this:\r\n```python\r\nIn [35]: eq\r\nOut[35]: k⋅(s + 7) + s⋅(s + 5)⋅(s + 15)⋅(s + 20)\r\n\r\nIn [36]: discriminant(eq)\r\nOut[36]: \r\n      4          3             2                               \r\n- 27⋅k  + 47088⋅k  - 37907500⋅k  + 3881250000⋅k + 1265625000000\r\n\r\nIn [37]: nroots(discriminant(eq))\r\nOut[37]: [-130.564918275438, 307.765516989741, 783.399700642849 - 743.513266939402⋅ⅈ, 783.399700642849 + 743.513266939402⋅ⅈ]\r\n```\r\nThe positive real roots for `k` are the points on the real axis where lines start and end. This now shows you what values of `k` are interesting for the plot."", 'comment_created': datetime.datetime(2021, 7, 23, 17, 35, 55, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 675772024, 'comment_body': ""For `TransferFunction(2*s**2 + 5*s + 1, s**2 + 3*s + 5, s)`\r\n\r\n* If `num=10000` (sampled 10000 times, default)\r\n\r\n  ![scatter_rootLocus_10k](https://user-images.githubusercontent.com/53227127/126822686-13cbd6f9-93be-4cea-b875-3cb028c68a23.png)\r\n\r\n  The scatter plot looks like this.\r\n  And the actual root-locus plot (corresponding to the regression of these sampled points) looks like this-\r\n\r\n  ![rl](https://user-images.githubusercontent.com/53227127/126823088-eb022288-22a0-43a7-beb4-7188cffaab6c.png)\r\n\r\nSimilarly,\r\n\r\n* If `num=1000`\r\n  \r\n  ![1k](https://user-images.githubusercontent.com/53227127/126823358-4adab831-8f77-416c-8723-b1adf9523e87.png)\r\n\r\n  ![1k_plot](https://user-images.githubusercontent.com/53227127/126823475-4c76b035-15e1-4a8e-8987-405fb38b73c3.png)\r\n\r\n* If `num=300`\r\n\r\n  ![scatter_300](https://user-images.githubusercontent.com/53227127/126823639-bfad7f26-01ed-467a-aad7-bee08e37ddc5.png)\r\n\r\n  ![plot_300](https://user-images.githubusercontent.com/53227127/126823657-29f2a022-1e8e-4ae6-8515-cd98a8613ac8.png)\r\n\r\n\r\n> To plot a straight line you only need to know its start and end and those can be computed exactly. Then you don't need to evaluate the polynomial at 10000 points.\r\n\r\nStraight Lines in root locus plots are not very common. In root-locus plots, we plot the movement of the roots of the polynomial `den+ k*num` when k varies from 0 to inf. As you can tell when k is 0 we get the roots of den (poles) and as k approaches inf, the roots of `den + k*num` are roots of num only (zeros). Therefore, when num and den have the same degree, the root locus plot is a path from poles to zeros of the transfer function. This is not always a straight line. \r\n\r\n![equal](https://user-images.githubusercontent.com/53227127/126824861-58e4de4a-24a5-4f94-b97f-8655e7ad22a7.png)\r\n\r\nOnly one is a straight line path here and knowing this fact can't help us in any way. I don't understand how knowing the discriminant of the polynomial will help us in knowing the points on the rl plot. Maybe I'm missing something.\r\n\r\n"", 'comment_created': datetime.datetime(2021, 7, 23, 18, 29, 54, tzinfo=datetime.timezone.utc), 'commenter': 'akshanshbhatt', 'type': 'User'}, {'comment_id': 675882746, 'comment_body': ""> Straight Lines in root locus plots are not very common.\r\n\r\nYour example with `num=1000` illustrates the point I wanted to make perfectly. To generate the plot you compute the roots of the polynomial for 1000 different values of k ranging from 0 to kmax where kmax is arbitrarily chosen to be 400. Out of those 1000 values of k only 4 have non-real roots so the other 996 polynomials whose roots are computed are only used to plot two straight lines. The straight line could be computed more efficiently and more accurately by simply computing its start and end points which you can do like this:\r\n```python\r\nIn [93]: k, s = symbols('k, s')\r\n\r\nIn [94]: n, d = 2*s**2 + 5*s + 1, s**2 + 3*s + 5\r\n\r\nIn [95]: eq = d + k*n\r\n\r\nIn [96]: eq\r\nOut[96]: \r\n  ⎛   2          ⎞    2          \r\nk⋅⎝2⋅s  + 5⋅s + 1⎠ + s  + 3⋅s + 5\r\n\r\nIn [97]: nroots(n) # k = oo\r\nOut[97]: [-2.28077640640441, -0.219223593595585]\r\n\r\nIn [98]: discriminant(eq, s)\r\nOut[98]: \r\n    2            \r\n17⋅k  - 14⋅k - 11\r\n\r\nIn [99]: nroots(discriminant(eq, s))\r\nOut[99]: [-0.491899499749248, 1.31542891151395]\r\n\r\nIn [100]: roots(discriminant(eq, s), multiple=True)\r\nOut[100]: \r\n⎡7    2⋅√59  7    2⋅√59⎤\r\n⎢── - ─────, ── + ─────⎥\r\n⎣17     17   17     17 ⎦\r\n\r\nIn [101]: eq.subs(k, roots(discriminant(eq, s), multiple=True)[1])\r\nOut[101]: \r\n 2         ⎛7    2⋅√59⎞ ⎛   2          ⎞    \r\ns  + 3⋅s + ⎜── + ─────⎟⋅⎝2⋅s  + 5⋅s + 1⎠ + 5\r\n           ⎝17     17 ⎠                     \r\n\r\nIn [102]: roots(eq.subs(k, roots(discriminant(eq, s), multiple=True)[1]), s)\r\nOut[102]: {-9 + √59: 2}\r\n\r\nIn [103]: list(_)[0].n()\r\nOut[103]: -1.31885425213139\r\n```\r\nYour suggestion to use num=10000 and compute the roots of 10000 polynomials is a workaround for having the wrong value of kmax. In fact by computing the roots of the discriminant it is possible to compute what the relevant values of k are."", 'comment_created': datetime.datetime(2021, 7, 23, 21, 50, 25, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 675988722, 'comment_body': 'Fine. I get your point now. But there is still an issue. You see, with your calculations, we get these points:\r\n\r\n![image](https://user-images.githubusercontent.com/53227127/126862739-a8c6b068-176d-4bc1-8051-5a2d2866e88f.png)\r\n\r\nWhich is basically poles and zeroes of the Transfer Function + The point where the discriminant is zero (equal roots). I agree that for the two straight lines on the axis, this will work fine but what about the two symmetric arms of the curve?\r\nWe cannot plot them by simply knowing the start and endpoints. We still need to compute the roots of the polynomials from 0 to `k_c` (value of k for which the 0 discriminant point is reached) in uniform intervals.\r\n', 'comment_created': datetime.datetime(2021, 7, 24, 11, 41, 9, tzinfo=datetime.timezone.utc), 'commenter': 'akshanshbhatt', 'type': 'User'}, {'comment_id': 675992906, 'comment_body': ""> We still need to compute the roots of the polynomials from 0 to `k_c`\r\n\r\nYes, but we don't need 10000 points to plot the curve. The `num=10000` plot above shows that an acceptable plot is obtained from only 40 points (since the other 9960 points are on the real axis).\r\n\r\nI expect that uniform spacing is not optimal. Naturally I would guess that something like logarithmic or harmonic spacing would be better. You can see in the `num=10000` plot that using uniform intervals for `k` does not lead to a uniform distance between the points in the plot.\r\n\r\nIdeally the curve would be generated using pseudo-arc-length continuation so you can generate them at a fixed 2D distance within the plot but that's probably more complicated than it is worth."", 'comment_created': datetime.datetime(2021, 7, 24, 12, 22, 37, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 676127608, 'comment_body': ""> I really don't get that how can it be wrong if the calculation of points is done by the sole definition of the plot.\r\n\r\nI did not say that you are wrong. I just had some doubts and wanted to verify the correctness myself so I asked you to provide me some links.\r\n\r\n> I tested it with 10s of different examples which I could find online and all the plots matched exactly. \r\n\r\nThanks!\r\n"", 'comment_created': datetime.datetime(2021, 7, 25, 11, 4, 31, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 676128107, 'comment_body': 'You could have just said, ""I\'m using NumPy for a better computation speed."" :) \r\nThanks, I\'m satisfied now.', 'comment_created': datetime.datetime(2021, 7, 25, 11, 8, 27, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 678464385, 'comment_body': 'What if `expr` already contains a symbol called `""x""`?', 'comment_created': datetime.datetime(2021, 7, 28, 16, 25, 49, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 678468861, 'comment_body': ""I'll replace it with a dummy variable."", 'comment_created': datetime.datetime(2021, 7, 28, 16, 31, 33, tzinfo=datetime.timezone.utc), 'commenter': 'akshanshbhatt', 'type': 'User'}, {'comment_id': 678544128, 'comment_body': 'Do these even work with high order systems?', 'comment_created': datetime.datetime(2021, 7, 28, 18, 14, 56, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 678601720, 'comment_body': ""> There might be few vulnerabilities, if you find any particular case just let me know.\r\n\r\n@akshanshbhatt it is your job to figure these out and show us that you've fully thought this through. Right now, it doesn't look like you have."", 'comment_created': datetime.datetime(2021, 7, 28, 19, 43, 12, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 689817972, 'comment_body': 'This test seems fragile by testing for exact equality with floats.', 'comment_created': datetime.datetime(2021, 8, 16, 19, 56, 49, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 689820636, 'comment_body': 'Is there any better alternative? ', 'comment_created': datetime.datetime(2021, 8, 16, 20, 1, 32, tzinfo=datetime.timezone.utc), 'commenter': 'akshanshbhatt', 'type': 'User'}, {'comment_id': 689824906, 'comment_body': 'I think this should be added in the integrals module somewhere so that someone who looks at the Laplace transform code will see it there.', 'comment_created': datetime.datetime(2021, 8, 16, 20, 8, 49, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 689827575, 'comment_body': ""It's better to test that the numbers are close to some precision e.g. `abs(result - expected) < 1e-15` or something like that."", 'comment_created': datetime.datetime(2021, 8, 16, 20, 13, 24, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 689827818, 'comment_body': 'It should probably be in the same place as the `inverse_laplace_transform` function', 'comment_created': datetime.datetime(2021, 8, 16, 20, 13, 49, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 689842714, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2021, 8, 16, 20, 37, 16, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 689845471, 'comment_body': '```suggestion\r\n    tuple : (poles, zeros)\r\n```', 'comment_created': datetime.datetime(2021, 8, 16, 20, 41, 57, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 689850435, 'comment_body': ""```suggestion\r\n    Returns the Pole-Zero plot (also known as PZ plot or PZ map) of a system.\r\n    \r\n    A Pole-Zero plot is a graphical representation of a system's poles and\r\n    zeros. It is plotted on a complex plane, with circular markers representing\r\n    the system's zeros and 'x' shaped markers representing the system's poles.\r\n```"", 'comment_created': datetime.datetime(2021, 8, 16, 20, 50, 19, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 689869387, 'comment_body': 'See [PEP 257](https://www.python.org/dev/peps/pep-0257/);\r\n\r\n> Multi-line docstrings consist of a summary line just like a one-line docstring, followed by a blank line, followed by a more elaborate description', 'comment_created': datetime.datetime(2021, 8, 16, 21, 23, 14, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 689872975, 'comment_body': ""```suggestion\r\ndef step_response_plot(system, color='b', prec=8, lower_limit=0,\r\n    upper_limit=10, show_axes=False, grid=True, show=True, **kwargs):\r\n```\r\nI'd try to keep the order consistent."", 'comment_created': datetime.datetime(2021, 8, 16, 21, 30, 2, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 689875513, 'comment_body': '```suggestion\r\n    Returns the ramp response of a continuous-time system.\r\n    \r\n    Ramp function is defined as the straight line passing through\r\n    origin ($f(x) = mx$). The slope of the ramp function can be\r\n    varied by the user and the default value is 1.\r\n```', 'comment_created': datetime.datetime(2021, 8, 16, 21, 34, 34, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 690136665, 'comment_body': 'I guess the order is fine. Zeros should be first because arg order of tf is `(num, den)` - so it makes sense to return `(root(num), roots(den))`. This might confuse the user.', 'comment_created': datetime.datetime(2021, 8, 17, 8, 9, 22, tzinfo=datetime.timezone.utc), 'commenter': 'akshanshbhatt', 'type': 'User'}, {'comment_id': 690170145, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 8, 17, 8, 53, 24, tzinfo=datetime.timezone.utc), 'commenter': 'akshanshbhatt', 'type': 'User'}, {'comment_id': 690238223, 'comment_body': '`nm` can never be equal to `1`.', 'comment_created': datetime.datetime(2021, 8, 17, 10, 25, 33, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 690239499, 'comment_body': '```suggestion\r\n\r\n                return t**(-nm-1)*exp(-(bm/am)*t)/(am**-nm*gamma(-nm))\r\n```', 'comment_created': datetime.datetime(2021, 8, 17, 10, 27, 26, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 690240666, 'comment_body': 'Can you test this? Also, include in the release notes?', 'comment_created': datetime.datetime(2021, 8, 17, 10, 29, 19, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 690265900, 'comment_body': 'It should be tested.\r\n\r\nIt should either be private (with a leading underscore name) or it should have a proper docstring etc. It should only be mentioned in the release notes if it is public.', 'comment_created': datetime.datetime(2021, 8, 17, 11, 7, 25, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 690395048, 'comment_body': ""> It should either be private (with a leading underscore name) or it should have a proper docstring etc.\r\n\r\nI have made it private since I don't know much about the inner implementation. You can make it a public function later and add docs/tests later according to the need."", 'comment_created': datetime.datetime(2021, 8, 17, 13, 54, 46, tzinfo=datetime.timezone.utc), 'commenter': 'akshanshbhatt', 'type': 'User'}, {'comment_id': 690401735, 'comment_body': '```suggestion\r\n        Default zero markersize is 7.\r\n```', 'comment_created': datetime.datetime(2021, 8, 17, 14, 1, 28, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 690406818, 'comment_body': '```suggestion\r\n    Ramp function is defined as the straight line\r\n```', 'comment_created': datetime.datetime(2021, 8, 17, 14, 7, 7, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 690413865, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2021, 8, 17, 14, 14, 34, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}]","[{'commit_sha': '44819e766de1a2c5b53d46cb18bc1be5dc2a94bc', 'committer_username': 'akshanshbhatt', 'committer_name': 'akshānsh', 'committer_email': 'info@akshansh.me', 'commit_date': datetime.datetime(2019, 7, 23, 14, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c901ba1e97e392451092b7e5c0134da7ba8fc1ec', 'committer_username': 'akshanshbhatt', 'committer_name': 'akshānsh', 'committer_email': 'info@akshansh.me', 'commit_date': datetime.datetime(2019, 7, 23, 14, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '859a63b2199c0b284677e1a35db0a861026610ed', 'committer_username': 'akshanshbhatt', 'committer_name': 'akshānsh', 'committer_email': 'info@akshansh.me', 'commit_date': datetime.datetime(2019, 7, 23, 14, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ba7f43182bc702dfb752027bbe9072568c4fc3ba', 'committer_username': 'akshanshbhatt', 'committer_name': 'akshānsh', 'committer_email': 'info@akshansh.me', 'commit_date': datetime.datetime(2019, 7, 23, 14, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '25efd4d21628696dead1295adcc6bf799c8236a4', 'committer_username': 'akshanshbhatt', 'committer_name': 'akshānsh', 'committer_email': 'info@akshansh.me', 'commit_date': datetime.datetime(2019, 7, 23, 14, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fc7ba5fc976cb244f4005c6959593937699fbe84', 'committer_username': 'akshanshbhatt', 'committer_name': 'akshānsh', 'committer_email': 'info@akshansh.me', 'commit_date': datetime.datetime(2019, 7, 23, 14, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '39fb0e44497aee879b1b877d3719b7cf60f081da', 'committer_username': 'akshanshbhatt', 'committer_name': 'akshānsh', 'committer_email': 'info@akshansh.me', 'commit_date': datetime.datetime(2019, 7, 23, 14, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c162c48b490166bd82995babadb697b3f7f09823', 'committer_username': 'akshanshbhatt', 'committer_name': 'akshānsh', 'committer_email': 'info@akshansh.me', 'commit_date': datetime.datetime(2019, 7, 23, 14, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ec68ebf5b089f9166b759c4fe7fd5ef42fcf2e7b', 'committer_username': 'akshanshbhatt', 'committer_name': 'akshānsh', 'committer_email': 'info@akshansh.me', 'commit_date': datetime.datetime(2019, 7, 23, 14, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '30153ebeb5554e54073236ed1aff5cd6cb22e976', 'committer_username': 'akshanshbhatt', 'committer_name': 'akshānsh', 'committer_email': 'info@akshansh.me', 'commit_date': datetime.datetime(2019, 7, 23, 14, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ac45deb0a731c632abb6f81117e5f71ccb5ea07b', 'committer_username': 'akshanshbhatt', 'committer_name': 'akshānsh', 'committer_email': 'info@akshansh.me', 'commit_date': datetime.datetime(2019, 7, 23, 14, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '58f6bf672a5a67fbcc8feda54b7dd337ad811eb3', 'committer_username': 'akshanshbhatt', 'committer_name': 'akshānsh', 'committer_email': 'info@akshansh.me', 'commit_date': datetime.datetime(2019, 7, 23, 14, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '31fba89e6126e72d4942789e9ce77e9914e1d07a', 'committer_username': 'akshanshbhatt', 'committer_name': 'akshānsh', 'committer_email': 'info@akshansh.me', 'commit_date': datetime.datetime(2019, 7, 23, 14, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '85fc6e1b13c46ef1a110617d5cb72697eda91320', 'committer_username': 'akshanshbhatt', 'committer_name': 'akshānsh', 'committer_email': 'info@akshansh.me', 'commit_date': datetime.datetime(2019, 7, 23, 14, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ecec4c5f9bcc17bfa22a6f546e97204f2002cbcc', 'committer_username': 'akshanshbhatt', 'committer_name': 'akshānsh', 'committer_email': 'info@akshansh.me', 'commit_date': datetime.datetime(2019, 7, 23, 14, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '34fbe909d9f6c9cf9809d1bdfc9428add67a0aaa', 'committer_username': 'akshanshbhatt', 'committer_name': 'akshānsh', 'committer_email': 'info@akshansh.me', 'commit_date': datetime.datetime(2019, 7, 23, 14, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '250784ef2f643aec3951a61d8a59bcb005f29d1b', 'committer_username': 'akshanshbhatt', 'committer_name': 'akshānsh', 'committer_email': 'info@akshansh.me', 'commit_date': datetime.datetime(2019, 7, 23, 14, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '62f302361c83e6e78009ae3df1e44ee4f6f68dba', 'committer_username': 'akshanshbhatt', 'committer_name': 'akshānsh', 'committer_email': 'info@akshansh.me', 'commit_date': datetime.datetime(2019, 7, 23, 14, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fa1392cd4b3407a401dc0fb019ae31e5a1d0ff2d', 'committer_username': 'akshanshbhatt', 'committer_name': 'akshānsh', 'committer_email': 'info@akshansh.me', 'commit_date': datetime.datetime(2019, 7, 23, 14, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd8c62ca6814b9da5a13790665c97e639079fe00f', 'committer_username': 'akshanshbhatt', 'committer_name': 'akshānsh', 'committer_email': 'info@akshansh.me', 'commit_date': datetime.datetime(2019, 7, 23, 14, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cf171a26a8d1a5ed7a564b981c64e8bd486ccfe7', 'committer_username': 'akshanshbhatt', 'committer_name': 'akshānsh', 'committer_email': 'info@akshansh.me', 'commit_date': datetime.datetime(2019, 7, 23, 14, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e1f0a727ad7bbb0c3a3d60b1bf2ae3e4e049b621', 'committer_username': 'akshanshbhatt', 'committer_name': 'akshānsh', 'committer_email': 'info@akshansh.me', 'commit_date': datetime.datetime(2019, 7, 23, 14, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '15ae45d64aca244f567f962ef935a5ce43c22a8e', 'committer_username': 'akshanshbhatt', 'committer_name': 'akshānsh', 'committer_email': 'info@akshansh.me', 'commit_date': datetime.datetime(2019, 7, 23, 14, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5fe10ebfdebc82194a7281ce29482ab8cc697915', 'committer_username': 'akshanshbhatt', 'committer_name': 'akshānsh', 'committer_email': 'info@akshansh.me', 'commit_date': datetime.datetime(2019, 7, 23, 14, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e3361e1888389ab1252ac58808147dc9d2b4eedd', 'committer_username': 'akshanshbhatt', 'committer_name': 'akshānsh', 'committer_email': 'info@akshansh.me', 'commit_date': datetime.datetime(2019, 7, 23, 14, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '37e505b5c6e2df7bfa4d8f9d7bf5f167082333ed', 'committer_username': 'akshanshbhatt', 'committer_name': 'akshānsh', 'committer_email': 'info@akshansh.me', 'commit_date': datetime.datetime(2019, 7, 23, 14, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6b98d6ffd73e22bfb37d5db8d007ad91cc6ff460', 'committer_username': 'namannimmo10', 'committer_name': 'Naman Gera', 'committer_email': 'namangera15@gmail.com', 'commit_date': datetime.datetime(2018, 9, 5, 15, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4231c5f565dacf572318ac2a17897b88572d5e2a', 'committer_username': 'namannimmo10', 'committer_name': 'Naman Gera', 'committer_email': 'namangera15@gmail.com', 'commit_date': datetime.datetime(2018, 9, 5, 15, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b5d65c3812a464b124bd098d35f02e7d2340c8fb', 'committer_username': 'namannimmo10', 'committer_name': 'Naman Gera', 'committer_email': 'namangera15@gmail.com', 'commit_date': datetime.datetime(2018, 9, 5, 15, 12, 45, tzinfo=datetime.timezone.utc)}]",akshānsh,53227127,info@akshansh.me,User,,18,,21,32
705636481,Implement `MIMOFeedback`,"<!-- Your title above should be a short description of what
was changed. Do not include the issue number in the title. -->

#### References to other Issues or PRs
<!-- If this pull request fixes an issue, write ""Fixes #NNNN"" in that exact
format, e.g. ""Fixes #1234"" (see
https://tinyurl.com/auto-closing for more information). Also, please
write a comment on that issue linking back to this pull request once it is
open. -->


#### Brief description of what is fixed or changed

- Support for closed-loop feedback with MIMO systems.
- Support for positive feedback loop added.
- Made the doc for the `Feedback` class more beginner-friendly.
- Fixed bugs in the `Feedback` class from previous releases.

#### Other comments


#### Release Notes

<!-- Write the release notes for this release below between the BEGIN and END
statements. The basic format is a bulleted list with the name of the subpackage
and the release note for this PR. For example:

* solvers
  * Added a new solver for logarithmic equations.

* functions
  * Fixed a bug with log of integers.

or if no release note(s) should be included use:

NO ENTRY

See https://github.com/sympy/sympy/wiki/Writing-Release-Notes for more
information on how to write release notes. The bot will check your release
notes automatically to see if they are formatted correctly. -->

<!-- BEGIN RELEASE NOTES -->
* physics.control
  * Added `MIMOFeedback` class to support closed-loop MIMO systems.
<!-- END RELEASE NOTES -->
",True,21833,https://api.github.com/repos/sympy/sympy/pulls/21833,https://github.com/sympy/sympy/pull/21833,closed,858,144,11,48,7,87,2,0,"[{'name': 'GSoC'}, {'name': 'physics.control'}]",2021-08-06 17:21:03+00:00,2021-08-18 17:03:14+00:00,1035731.0,"11 days, 23:42:11","[{'comment_id': 684760591, 'comment_body': 'typo: contoller', 'comment_created': datetime.datetime(2021, 8, 8, 11, 34, 43, tzinfo=datetime.timezone.utc), 'commenter': 'plaes', 'type': 'User'}, {'comment_id': 684760604, 'comment_body': 'typoe: contoller', 'comment_created': datetime.datetime(2021, 8, 8, 11, 34, 51, tzinfo=datetime.timezone.utc), 'commenter': 'plaes', 'type': 'User'}, {'comment_id': 684761409, 'comment_body': ""Don't you want to make the feedback to enum-like variable? `Feedback.Positive`, `Feedback.Negative`?\r\nAnd then use the `cls._ftype` to silently handle the conversion to `{+,-}1`?"", 'comment_created': datetime.datetime(2021, 8, 8, 11, 40, 49, tzinfo=datetime.timezone.utc), 'commenter': 'plaes', 'type': 'User'}, {'comment_id': 685432229, 'comment_body': 'I think the classes can be shown to the users in the following way.\r\n```\r\nTransferFunction\r\nSeries\r\nParallel\r\nFeedback\r\nTransferFunctionMatrix\r\nMIMOSeries\r\nMIMOParallel\r\nMIMOFeedback\r\n```\r\n`MIMOSeries` / `MIMOParallel` should come after `TransferFunctionMatrix`', 'comment_created': datetime.datetime(2021, 8, 9, 18, 38, 56, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 685434770, 'comment_body': 'Perhaps we could add more literature here if the examples go in _control_problems.rst_?', 'comment_created': datetime.datetime(2021, 8, 9, 18, 43, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 685677029, 'comment_body': ""Why this change? Don't you think we need to negate only the primary plant? `Feedback` is a ratio of expressions, and similar to `TransferFunction`, we should negate only the numerator.\r\n\r\n"", 'comment_created': datetime.datetime(2021, 8, 10, 4, 15, 43, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 685678382, 'comment_body': '```suggestion\r\n        /    [  s      1  ]     [10  0]   \\-1  [  s      1  ]\r\n        |    [-----    -  ]     [--  -]   |    [-----    -  ]\r\n        |    [1 - s    s  ]     [1   1]   |    [1 - s    s  ]\r\n        |I + [            ]   * [     ]   |  * [            ]\r\n        |    [ 10    s - 1]     [0   0]   |    [ 10    s - 1]\r\n        |    [ --    -----]     [-   -]   |    [ --    -----]\r\n        \\    [ 1       1  ]{t}  [1   1]{t}/    [ 1       1  ]{t}\r\n```', 'comment_created': datetime.datetime(2021, 8, 10, 4, 20, 33, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 685686180, 'comment_body': 'I guess this should work!\r\n```python\r\n>>> F = Feedback(TransferFunction(1, 1, s), TransferFunction(1, 1, s)) \r\n>>> F.doit()\r\nTransferFunction(1, 2, s)\r\n>>>\r\n```', 'comment_created': datetime.datetime(2021, 8, 10, 4, 45, 34, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 685688972, 'comment_body': 'One test for the negation of MIMOFeedback can be added.', 'comment_created': datetime.datetime(2021, 8, 10, 4, 54, 16, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 685689817, 'comment_body': 'Move these under `test_MIMOFeedback_construction()`?', 'comment_created': datetime.datetime(2021, 8, 10, 4, 56, 50, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 685701838, 'comment_body': 'That can perhaps be added in the subsequent _control_problems_ PR.', 'comment_created': datetime.datetime(2021, 8, 10, 5, 30, 54, tzinfo=datetime.timezone.utc), 'commenter': 'akshanshbhatt', 'type': 'User'}, {'comment_id': 685703023, 'comment_body': 'Add one test in which `feedback_controller=None`?', 'comment_created': datetime.datetime(2021, 8, 10, 5, 34, 15, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 685704552, 'comment_body': 'Superb!', 'comment_created': datetime.datetime(2021, 8, 10, 5, 38, 32, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 685714399, 'comment_body': '```suggestion\r\n        If the user wants the resultant ``TransferFunctionMatrix`` object without\r\n        canceling the common factors then the ``cancel`` arg should be passed ``False``.\r\n```\r\nCan we provide an example where it actually avoids canceling the common factors? It is not apparent in this one.', 'comment_created': datetime.datetime(2021, 8, 10, 6, 2, 31, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 685719179, 'comment_body': 'I was a bit confused on this one.\r\nThis is what I thought -\r\n```\r\nP => Plant\r\nC => Feedback Controller\r\nF => Feedback\r\n```\r\nThen,\r\n```\r\nF(P, C) = P/(1 + PC)\r\n-F(P, C) = -P/(1 + PC) = -P/(1 + (-P)*(-C)) = F(-P, -C)\r\n```', 'comment_created': datetime.datetime(2021, 8, 10, 6, 13, 30, tzinfo=datetime.timezone.utc), 'commenter': 'akshanshbhatt', 'type': 'User'}, {'comment_id': 685732804, 'comment_body': '```\r\n>>> P = TransferFunction(1, s, s)\r\n>>> C = TransferFunction(s, s - 1, s)\r\n>>> P*C == (-P)*(-C)\r\nFalse\r\n```\r\n', 'comment_created': datetime.datetime(2021, 8, 10, 6, 40, 27, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 685795600, 'comment_body': 'Indeed both these expressions would not be ""symbolically"" equal per se, but they are both identical in every other way. It reminds me of the comment by @moorepants (https://github.com/sympy/sympy/pull/21634#issuecomment-864504405). In symbolic, as there are a dozen different ways to write a single expression, there is no definitive approach to check for equality. Let me know what you think.\r\nIs there a better way to implement this? I am open to suggestions.\r\n\r\n', 'comment_created': datetime.datetime(2021, 8, 10, 8, 15, 9, tzinfo=datetime.timezone.utc), 'commenter': 'akshanshbhatt', 'type': 'User'}, {'comment_id': 685873186, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 8, 10, 9, 58, 20, tzinfo=datetime.timezone.utc), 'commenter': 'akshanshbhatt', 'type': 'User'}, {'comment_id': 686069635, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 8, 10, 14, 23, 3, tzinfo=datetime.timezone.utc), 'commenter': 'akshanshbhatt', 'type': 'User'}, {'comment_id': 686165783, 'comment_body': '(Marked unresolved!)\r\n\r\nThis need to be fixed:\r\n```python\r\n>>> Feedback(TransferFunction(1, 1, s), TransferFunction(1, 1, s))\r\nTraceback (most recent call last):\r\n  File ""<stdin>"", line 1, in <module>\r\n  File ""/home/namannimmo/oss/sympy/sympy/physics/control/lti.py"", line 1770, in __new__\r\n    raise ValueError(""The equivalent system will have zero denominator."")\r\nValueError: The equivalent system will have zero denominator.\r\n```', 'comment_created': datetime.datetime(2021, 8, 10, 17, 10, 51, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 686177156, 'comment_body': '> (Marked unresolved!)\r\n\r\nThank for pointing this out. I almost forgot this one. Fixed now - was a minor sign error in the conditional.', 'comment_created': datetime.datetime(2021, 8, 10, 17, 25, 48, tzinfo=datetime.timezone.utc), 'commenter': 'akshanshbhatt', 'type': 'User'}, {'comment_id': 686639242, 'comment_body': 'This needs to be tested for both positive or negative feedback.', 'comment_created': datetime.datetime(2021, 8, 11, 9, 0, 23, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 686672464, 'comment_body': '`evaluate=True` is the default argument in `Mul`.', 'comment_created': datetime.datetime(2021, 8, 11, 9, 45, 8, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 686676064, 'comment_body': 'This needs a more explicit error message.', 'comment_created': datetime.datetime(2021, 8, 11, 9, 50, 2, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 686703154, 'comment_body': '```suggestion\r\n    def __new__(cls, plant, feedback_controller=None, sign=-1):\r\n```', 'comment_created': datetime.datetime(2021, 8, 11, 10, 28, 38, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 686706987, 'comment_body': '```suggestion\r\n    sign : int, optional\r\n```', 'comment_created': datetime.datetime(2021, 8, 11, 10, 34, 37, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 686710411, 'comment_body': '```suggestion\r\n    MIMOFeedback, Series, Parallel\r\n```', 'comment_created': datetime.datetime(2021, 8, 11, 10, 40, 1, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 686715189, 'comment_body': 'Just like in the `Feedback` class, these can be equal, no?\r\nAlso, it currently does not raise any `ValueError` when the plant is equal to the controller, given `sign=-1`.', 'comment_created': datetime.datetime(2021, 8, 11, 10, 47, 38, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 686733474, 'comment_body': '```suggestion\r\n        return self.doit()\r\n```\r\n', 'comment_created': datetime.datetime(2021, 8, 11, 11, 16, 53, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 686737926, 'comment_body': '> I guess this should work!\r\n> \r\n> ```python\r\n> >>> F = Feedback(TransferFunction(1, 1, s), TransferFunction(1, 1, s)) \r\n> >>> F.doit()\r\n> TransferFunction(1, 2, s)\r\n> >>>\r\n> ```\r\n\r\nCan you test this?  Unit tests should cover all corner cases.', 'comment_created': datetime.datetime(2021, 8, 11, 11, 24, 12, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 686740839, 'comment_body': 'This line is too long.', 'comment_created': datetime.datetime(2021, 8, 11, 11, 28, 36, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 686742564, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2021, 8, 11, 11, 31, 19, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 686745394, 'comment_body': 'Line too long.', 'comment_created': datetime.datetime(2021, 8, 11, 11, 36, 4, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 686780194, 'comment_body': '> Can you test this? Unit tests should cover all corner cases.\r\n\r\nAdded this test in test_lti.py', 'comment_created': datetime.datetime(2021, 8, 11, 12, 25, 46, tzinfo=datetime.timezone.utc), 'commenter': 'akshanshbhatt', 'type': 'User'}, {'comment_id': 686782332, 'comment_body': '> This needs to be tested for both positive or negative feedback.\r\n\r\n```py\r\nif Mul(plant.to_expr(), feedback_controller.to_expr()) == sign:\r\n```\r\nI assume you are talking about this line?\r\nIt already covers both cases.', 'comment_created': datetime.datetime(2021, 8, 11, 12, 28, 39, tzinfo=datetime.timezone.utc), 'commenter': 'akshanshbhatt', 'type': 'User'}, {'comment_id': 686787272, 'comment_body': '> Just like in the Feedback class, these can be equal, no?\r\n\r\nYes.', 'comment_created': datetime.datetime(2021, 8, 11, 12, 35, 18, tzinfo=datetime.timezone.utc), 'commenter': 'akshanshbhatt', 'type': 'User'}, {'comment_id': 686807624, 'comment_body': '```suggestion\r\n\r\n        resultant_tf = TransferFunction(F_n.num * F_d.den, F_n.den * F_d.num, F_n.var)\r\n\r\n        if cancel:\r\n            resultant_tf = resultant_tf.simplify()\r\n        if expand:\r\n            resultant_tf = resultant_tf.expand()\r\n\r\n        return resultant_tf\r\n```', 'comment_created': datetime.datetime(2021, 8, 11, 13, 1, 10, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 686819243, 'comment_body': ""What's the purpose of having this as a separate method?"", 'comment_created': datetime.datetime(2021, 8, 11, 13, 15, 5, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 686822369, 'comment_body': 'Sensitivity can be thought of as a property of closed-loop feedback systems. It should be helpful later.\r\nhttps://www.mathworks.com/help/robust/ref/lti.loopsens.html', 'comment_created': datetime.datetime(2021, 8, 11, 13, 18, 43, tzinfo=datetime.timezone.utc), 'commenter': 'akshanshbhatt', 'type': 'User'}, {'comment_id': 686853810, 'comment_body': '```suggestion\r\n        Returns the resultant transfer function matrix obtained by the\r\n```\r\n', 'comment_created': datetime.datetime(2021, 8, 11, 13, 53, 22, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 686855323, 'comment_body': '```suggestion\r\n        If the user wants the resultant ``TransferFunctionMatrix`` object without\r\n        canceling the common factors then the ``cancel`` kwarg should be passed ``False``.\r\n```', 'comment_created': datetime.datetime(2021, 8, 11, 13, 54, 57, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 686857799, 'comment_body': 'More like,\r\n```python\r\n        _mat = self.sensitivity * self.plant.doit()._expr_mat\r\n        _resultant_tfm = _to_TFM(_mat, self.var)\r\n\r\n        if cancel:\r\n            _resultant_tfm = _resultant_tfm.simplify()\r\n        if expand:\r\n            _resultant_tfm = _resultant_tfm.expand()\r\n\r\n        return _resultant_tfm\r\n```', 'comment_created': datetime.datetime(2021, 8, 11, 13, 57, 29, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 686869798, 'comment_body': 'Add this one test:\r\n```\r\n>>> mat = Matrix([[1, 1/s], [0, 1]])\r\n>>> plant = controller = TransferFunctionMatrix.from_Matrix(mat, s)\r\n>>> MIMOFeedback(plant, controller)\r\n```', 'comment_created': datetime.datetime(2021, 8, 11, 14, 10, 14, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 686871976, 'comment_body': 'Add test for this method?', 'comment_created': datetime.datetime(2021, 8, 11, 14, 12, 41, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 687004807, 'comment_body': '```suggestion\r\n    def __new__(cls, plant, controller=None, sign=-1):\r\n```', 'comment_created': datetime.datetime(2021, 8, 11, 16, 46, 43, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 687054883, 'comment_body': '```suggestion\r\n        if plant.shape != controller.shape or plant.num_outputs != plant.num_inputs:\r\n```\r\n', 'comment_created': datetime.datetime(2021, 8, 11, 17, 58, 12, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 687998391, 'comment_body': 'I removed these lines of code and all tests passed. Can you test this properly?', 'comment_created': datetime.datetime(2021, 8, 12, 18, 46, 6, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 688001695, 'comment_body': '```suggestion\r\n        if sign not in [-1, 1]:\r\n            raise ValueError(""Unsupported type for feedback. `sign` arg should ""\r\n                ""either be 1 (positive feedback loop) or -1 (negative feedback loop)."")\r\n```', 'comment_created': datetime.datetime(2021, 8, 12, 18, 51, 5, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 688005515, 'comment_body': 'Same comment as above; not tested properly!', 'comment_created': datetime.datetime(2021, 8, 12, 18, 56, 54, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 688012633, 'comment_body': '```suggestion\r\n        If the user wants the expanded form of the resultant transfer function matrix,\r\n        the ``expand`` kwarg should be passed as ``True``.\r\n```', 'comment_created': datetime.datetime(2021, 8, 12, 19, 8, 2, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 688015623, 'comment_body': '```suggestion\r\n        If the user wants the resultant ``TransferFunctionMatrix`` object without\r\n        canceling the common factors then the ``cancel`` kwarg should be passed ``False``.\r\n```\r\nSymPy generally follows American spelling: https://docs.sympy.org/dev/documentation-style-guide.html#spelling-and-punctuation', 'comment_created': datetime.datetime(2021, 8, 12, 19, 12, 40, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 688022144, 'comment_body': 'More precisely it should be:  Forward path model should have an equal number of inputs/outputs to the feedback path outputs/inputs.', 'comment_created': datetime.datetime(2021, 8, 12, 19, 22, 54, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 688024255, 'comment_body': '```suggestion\r\n        Returns the type of feedback interconnection of two models. ``1``\r\n```', 'comment_created': datetime.datetime(2021, 8, 12, 19, 26, 16, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 688057632, 'comment_body': 'It seems like you are extending the concepts of sensitivity in SISO systems to MIMO systems -- and this can be problematic. There are many issues in designing this using SISO techniques. I would not have a separate property in `MIMOFeedback`.', 'comment_created': datetime.datetime(2021, 8, 12, 20, 21, 36, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 688062665, 'comment_body': ""I don't know why `plant` and `controller` have to be square matrices. \r\n\r\nSay the plant has _m_ inputs and _n_ outputs; hence a matrix with (n, m) shape. Now the controller can be an (m, n) matrix. "", 'comment_created': datetime.datetime(2021, 8, 12, 20, 29, 38, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 688067817, 'comment_body': '```suggestion\r\n        Returns the sensitivity function of the feedback loop.\r\n        \r\n        Sensitivity of a closed-loop system is the ratio of change in the open\r\n        loop gain to the change in the closed loop gain.\r\n```', 'comment_created': datetime.datetime(2021, 8, 12, 20, 38, 1, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 688068117, 'comment_body': '```suggestion\r\n    function of the feedback controlling system which is generally a sensor system that constantly\r\n```', 'comment_created': datetime.datetime(2021, 8, 12, 20, 38, 29, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 688229972, 'comment_body': ""@ilayn,  what's your take on it?"", 'comment_created': datetime.datetime(2021, 8, 13, 4, 9, 42, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 688265844, 'comment_body': ""This is typically true however, in the block diagram algebra the first item doesn't have to be the plant. Nor the second should be controller. You could very well composing different parts of a dynamical system. Hence this might confuse users. sys1, sys2 terminology is fine I think. \r\n\r\nBesides in the SISO case, the order won't matter since closed loop is GK/(1+GK) and G and K commutes. "", 'comment_created': datetime.datetime(2021, 8, 13, 6, 5, 50, tzinfo=datetime.timezone.utc), 'commenter': 'ilayn', 'type': 'User'}, {'comment_id': 688266036, 'comment_body': 'Transfer function is not mandatory can be any dynamical model. ', 'comment_created': datetime.datetime(2021, 8, 13, 6, 6, 26, tzinfo=datetime.timezone.utc), 'commenter': 'ilayn', 'type': 'User'}, {'comment_id': 688266355, 'comment_body': 'Do you need all this explanation here? Feels a bit more like a textbook rather than a docstring.', 'comment_created': datetime.datetime(2021, 8, 13, 6, 7, 15, tzinfo=datetime.timezone.utc), 'commenter': 'ilayn', 'type': 'User'}, {'comment_id': 688267209, 'comment_body': 'Just mention that you can change the feedback sign leading to either direct sum or a negated sum. This paragraph is a bit wordy.', 'comment_created': datetime.datetime(2021, 8, 13, 6, 9, 17, tzinfo=datetime.timezone.utc), 'commenter': 'ilayn', 'type': 'User'}, {'comment_id': 688267765, 'comment_body': 'Primary is misplaced here. plant has no significance. Also open-loop gain is `plant*controller` shown with `L` in many textbooks. Hence this needs correction.', 'comment_created': datetime.datetime(2021, 8, 13, 6, 10, 37, tzinfo=datetime.timezone.utc), 'commenter': 'ilayn', 'type': 'User'}, {'comment_id': 688268008, 'comment_body': 'The model sitting on the feedback path. ', 'comment_created': datetime.datetime(2021, 8, 13, 6, 11, 15, tzinfo=datetime.timezone.utc), 'commenter': 'ilayn', 'type': 'User'}, {'comment_id': 688268134, 'comment_body': 'Never heard of a `feedback factor`', 'comment_created': datetime.datetime(2021, 8, 13, 6, 11, 32, tzinfo=datetime.timezone.utc), 'commenter': 'ilayn', 'type': 'User'}, {'comment_id': 688268282, 'comment_body': 'assumed to be 1.0 since this is SISO ', 'comment_created': datetime.datetime(2021, 8, 13, 6, 11, 55, tzinfo=datetime.timezone.utc), 'commenter': 'ilayn', 'type': 'User'}, {'comment_id': 688268593, 'comment_body': 'you want int but you have only two options maybe convert this to a bool with keyword name `feedback_sign` or something like that? ', 'comment_created': datetime.datetime(2021, 8, 13, 6, 12, 42, tzinfo=datetime.timezone.utc), 'commenter': 'ilayn', 'type': 'User'}, {'comment_id': 688269389, 'comment_body': ""Again I don't know what primary controller means but now it is pointing to plant"", 'comment_created': datetime.datetime(2021, 8, 13, 6, 14, 42, tzinfo=datetime.timezone.utc), 'commenter': 'ilayn', 'type': 'User'}, {'comment_id': 688304889, 'comment_body': ""I understand what you are trying to say. I initially chose the sys1-sys2 naming convention since it was used in both MATLAB and python-control. I went ahead with the `plant` and `feedback_controller` convention as the goal was to make it beginner-friendly. \r\n`plant` and `feedback_controller` made more sense than `plant` and `controller` because the controller doesn't need to be always in the feedback path. Some controller systems can also be placed in the feedforward path. `feedback_controller` specified this fact."", 'comment_created': datetime.datetime(2021, 8, 13, 7, 30, 19, tzinfo=datetime.timezone.utc), 'commenter': 'akshanshbhatt', 'type': 'User'}, {'comment_id': 688306047, 'comment_body': ""I can add this explanation in an explanation section as I did in `TransferFunction`'s doc.\r\n@namannimmo10?"", 'comment_created': datetime.datetime(2021, 8, 13, 7, 32, 22, tzinfo=datetime.timezone.utc), 'commenter': 'akshanshbhatt', 'type': 'User'}, {'comment_id': 688310423, 'comment_body': 'https://www.electronics-tutorials.ws/systems/feedback-systems.html\r\n\r\n![image](https://user-images.githubusercontent.com/53227127/129321867-3767a2fb-38a1-44fc-86ef-3565c94dfc10.png)\r\n\r\nI referred to this block diagram.', 'comment_created': datetime.datetime(2021, 8, 13, 7, 40, 24, tzinfo=datetime.timezone.utc), 'commenter': 'akshanshbhatt', 'type': 'User'}, {'comment_id': 688315699, 'comment_body': ""> you want int but you have only two options maybe convert this to a bool with keyword name `feedback_sign` or something like that?\r\n\r\nI tried that but that didn't work, some tests failed. `Feedback` has `Basic` as its superclass, therefore it must satisfy the `obj.func(*obj.args)` criteria. Only Basic instances can be passed as args.\r\n\r\nhttps://github.com/sympy/sympy/blob/19c5014a9f324d59e2fddb44f239ccf6c8f7b1ba/sympy/core/tests/test_args.py#L90\r\n\r\nThe same reason why I have to sympify the `sign` arg.\r\n\r\nhttps://github.com/sympy/sympy/blob/4196e76bffb061c60a498ad6a3f300cf8626c95b/sympy/physics/control/lti.py#L1779"", 'comment_created': datetime.datetime(2021, 8, 13, 7, 49, 35, tzinfo=datetime.timezone.utc), 'commenter': 'akshanshbhatt', 'type': 'User'}, {'comment_id': 688319303, 'comment_body': ""Factor is basically a scalar, here they probably don't consider an LTI system apparently since both the reference and the output is of the same kind."", 'comment_created': datetime.datetime(2021, 8, 13, 7, 55, 30, tzinfo=datetime.timezone.utc), 'commenter': 'ilayn', 'type': 'User'}, {'comment_id': 688323962, 'comment_body': 'If `plant`-`controller` is not a general terminology, then maybe we can go with the `open_loop_gain`-`feedback_gain` or `sys1`-`sys2`. Whichever suits better.', 'comment_created': datetime.datetime(2021, 8, 13, 8, 3, 24, tzinfo=datetime.timezone.utc), 'commenter': 'akshanshbhatt', 'type': 'User'}, {'comment_id': 688325742, 'comment_body': 'I think we can go with sys1-sys2 terminology.', 'comment_created': datetime.datetime(2021, 8, 13, 8, 6, 37, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 688342330, 'comment_body': 'G-H is also fine if we do a very simple ASCII-art of the loop', 'comment_created': datetime.datetime(2021, 8, 13, 8, 33, 18, tzinfo=datetime.timezone.utc), 'commenter': 'ilayn', 'type': 'User'}, {'comment_id': 688372952, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2021, 8, 13, 9, 22, 30, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 688373702, 'comment_body': '```suggestion\r\n        return self.args[0]\r\n```', 'comment_created': datetime.datetime(2021, 8, 13, 9, 23, 39, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 688374031, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2021, 8, 13, 9, 24, 8, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 691256112, 'comment_body': '\r\nI agree with @ilayn here.  Can we remove this explanation part? To be honest, it does look a bit unrelated for a class by the introduction of the error signal, or the ""signal"" keyword in general.', 'comment_created': datetime.datetime(2021, 8, 18, 13, 48, 29, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 691264098, 'comment_body': '```suggestion\r\n    A class for representing a feedback interconnection between two\r\n    SISO input/output systems.\r\n    \r\n    The first argument, ``sys1``, is the feedforward part of the feedback interconnection\r\n    or in simple words, the dynamical model representing the process to be controlled.\r\n    The second argument, ``sys2``, is the feedback process and controls the fed back\r\n    signal to ``sys1``. Both ``sys1`` and ``sys2`` can either be ``Series`` or\r\n    ``TransferFunction`` objects.\r\n```', 'comment_created': datetime.datetime(2021, 8, 18, 13, 57, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 691271319, 'comment_body': '```suggestion\r\n        The sign of feedback. Can either be ``1``\r\n```', 'comment_created': datetime.datetime(2021, 8, 18, 14, 4, 45, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 691273884, 'comment_body': '```suggestion\r\n```\r\nSee https://github.com/sympy/sympy/pull/21833#discussion_r688267765.', 'comment_created': datetime.datetime(2021, 8, 18, 14, 7, 30, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 691278692, 'comment_body': '```suggestion\r\n        Returns the feedforward system of the feedback interconnection.\r\n```\r\nI\'d refrain from using ""closed-loop"" in all the docstrings.', 'comment_created': datetime.datetime(2021, 8, 18, 14, 12, 29, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 691279314, 'comment_body': 'Same comment as in `sys1` property.', 'comment_created': datetime.datetime(2021, 8, 18, 14, 13, 11, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 691311432, 'comment_body': 'There are two types of sensitivities, right?\r\n```\r\nS = (I + P*C)^-1\r\nT = (I + P*C)^-1 * (P*C)\r\nS + T = I\r\n```\r\nCheck out [this video](https://www.youtube.com/watch?v=hTu36q5yx20).\r\nYou should also mention here:\r\nThis would not return the complementary sensitivity.\r\n\r\n', 'comment_created': datetime.datetime(2021, 8, 18, 14, 47, 23, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 691395194, 'comment_body': 'Added a note.', 'comment_created': datetime.datetime(2021, 8, 18, 16, 0, 20, tzinfo=datetime.timezone.utc), 'commenter': 'akshanshbhatt', 'type': 'User'}]","[{'commit_sha': '2d0d45f429acd07324030418756fa824a32259a3', 'committer_username': 'akshanshbhatt', 'committer_name': 'akshānsh', 'committer_email': 'info@akshansh.me', 'commit_date': datetime.datetime(2019, 7, 23, 14, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e5febfc2d07d55f365b0031b872a5173c3371eb6', 'committer_username': 'akshanshbhatt', 'committer_name': 'akshānsh', 'committer_email': 'info@akshansh.me', 'commit_date': datetime.datetime(2019, 7, 23, 14, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ac8662379d2a3feae88640675c1d296f924ca731', 'committer_username': 'akshanshbhatt', 'committer_name': 'akshānsh', 'committer_email': 'info@akshansh.me', 'commit_date': datetime.datetime(2019, 7, 23, 14, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '07af0977dd5da3341d36334b5244f7a8efa2da9e', 'committer_username': 'akshanshbhatt', 'committer_name': 'akshānsh', 'committer_email': 'info@akshansh.me', 'commit_date': datetime.datetime(2019, 7, 23, 14, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e7c84da401b4d464d8107d8636b8d3b0598e8eb7', 'committer_username': 'akshanshbhatt', 'committer_name': 'akshānsh', 'committer_email': 'info@akshansh.me', 'commit_date': datetime.datetime(2019, 7, 23, 14, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '605007f2b84e0f4efb968f381da4b3439971e312', 'committer_username': 'akshanshbhatt', 'committer_name': 'akshānsh', 'committer_email': 'info@akshansh.me', 'commit_date': datetime.datetime(2019, 7, 23, 14, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a6703b604dde127f45961eff0b147bccef87fb15', 'committer_username': 'akshanshbhatt', 'committer_name': 'akshānsh', 'committer_email': 'info@akshansh.me', 'commit_date': datetime.datetime(2019, 7, 23, 14, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '068910392c5994f1016c17b2e1f2970555313585', 'committer_username': 'akshanshbhatt', 'committer_name': 'akshānsh', 'committer_email': 'info@akshansh.me', 'commit_date': datetime.datetime(2019, 7, 23, 14, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4d9e9d76ee954728da5b27e2794819dfdf374397', 'committer_username': 'akshanshbhatt', 'committer_name': 'akshānsh', 'committer_email': 'info@akshansh.me', 'commit_date': datetime.datetime(2019, 7, 23, 14, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '73ec1a81de986bbce868fff8e08a4178d32015a9', 'committer_username': 'akshanshbhatt', 'committer_name': 'akshānsh', 'committer_email': 'info@akshansh.me', 'commit_date': datetime.datetime(2019, 7, 23, 14, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c33ea00566d75551ecaa31238af4ede662af28f7', 'committer_username': 'akshanshbhatt', 'committer_name': 'akshānsh', 'committer_email': 'info@akshansh.me', 'commit_date': datetime.datetime(2019, 7, 23, 14, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '99b688c40e1970aef56e2526f6f8b38554895994', 'committer_username': 'akshanshbhatt', 'committer_name': 'akshānsh', 'committer_email': 'info@akshansh.me', 'commit_date': datetime.datetime(2019, 7, 23, 14, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1321e0957421f405f5371426ce1426763f54558f', 'committer_username': 'akshanshbhatt', 'committer_name': 'akshānsh', 'committer_email': 'info@akshansh.me', 'commit_date': datetime.datetime(2019, 7, 23, 14, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '93c8690bb0db3d1ddf351322647a033423f962da', 'committer_username': 'akshanshbhatt', 'committer_name': 'akshānsh', 'committer_email': 'info@akshansh.me', 'commit_date': datetime.datetime(2019, 7, 23, 14, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '559b001c7e0dc99d57455bcf5d72fe6ab51df3f8', 'committer_username': 'akshanshbhatt', 'committer_name': 'akshānsh', 'committer_email': 'info@akshansh.me', 'commit_date': datetime.datetime(2019, 7, 23, 14, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3d1bb9c1f29d0d72592b431efa592fd21e703b5b', 'committer_username': 'akshanshbhatt', 'committer_name': 'akshānsh', 'committer_email': 'info@akshansh.me', 'commit_date': datetime.datetime(2019, 7, 23, 14, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ce1dced7d988394543aec1d8a7e0f6a3a83d2a74', 'committer_username': 'akshanshbhatt', 'committer_name': 'akshānsh', 'committer_email': 'info@akshansh.me', 'commit_date': datetime.datetime(2019, 7, 23, 14, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8b928b208826ba35ea01c031c2c3212008fef45e', 'committer_username': 'akshanshbhatt', 'committer_name': 'akshānsh', 'committer_email': 'info@akshansh.me', 'commit_date': datetime.datetime(2019, 7, 23, 14, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '994260b7d02afc044f353d5935ff49ad9dffb5b2', 'committer_username': 'akshanshbhatt', 'committer_name': 'akshānsh', 'committer_email': 'info@akshansh.me', 'commit_date': datetime.datetime(2019, 7, 23, 14, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ae199a75c1e5017277d03724bdf4c61f33d2dad2', 'committer_username': 'akshanshbhatt', 'committer_name': 'akshānsh', 'committer_email': 'info@akshansh.me', 'commit_date': datetime.datetime(2019, 7, 23, 14, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6bb6658d0d57f01c007fe7ded9714b64759a8ce8', 'committer_username': 'akshanshbhatt', 'committer_name': 'akshānsh', 'committer_email': 'info@akshansh.me', 'commit_date': datetime.datetime(2019, 7, 23, 14, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '67ec40c96aa0018adbd6d4da64dda9838361f0dd', 'committer_username': 'akshanshbhatt', 'committer_name': 'akshānsh', 'committer_email': 'info@akshansh.me', 'commit_date': datetime.datetime(2019, 7, 23, 14, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '552298f3a93826c0d77c8dd697eda82c635f5100', 'committer_username': 'akshanshbhatt', 'committer_name': 'akshānsh', 'committer_email': 'info@akshansh.me', 'commit_date': datetime.datetime(2019, 7, 23, 14, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a252d6d220dd9d2bd7c2d5ab4d1e6ca22034e4dd', 'committer_username': 'akshanshbhatt', 'committer_name': 'akshānsh', 'committer_email': 'info@akshansh.me', 'commit_date': datetime.datetime(2019, 7, 23, 14, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ccd84c5d088e4221d24d2971b6fbb37e9ac1aa5a', 'committer_username': 'akshanshbhatt', 'committer_name': 'akshānsh', 'committer_email': 'info@akshansh.me', 'commit_date': datetime.datetime(2019, 7, 23, 14, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f825d7fc76daee0df563f04d1d8e6975b8ce5a56', 'committer_username': 'akshanshbhatt', 'committer_name': 'akshānsh', 'committer_email': 'info@akshansh.me', 'commit_date': datetime.datetime(2019, 7, 23, 14, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7650cde48d8e3bc6c301e965f0154e89d787f333', 'committer_username': 'akshanshbhatt', 'committer_name': 'akshānsh', 'committer_email': 'info@akshansh.me', 'commit_date': datetime.datetime(2019, 7, 23, 14, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fa850346c0b7bfe2cd00614130f2f1260d80c54f', 'committer_username': 'akshanshbhatt', 'committer_name': 'akshānsh', 'committer_email': 'info@akshansh.me', 'commit_date': datetime.datetime(2019, 7, 23, 14, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b05966cb676e1b61baa3cc463a34f21973cf77be', 'committer_username': 'akshanshbhatt', 'committer_name': 'akshānsh', 'committer_email': 'info@akshansh.me', 'commit_date': datetime.datetime(2019, 7, 23, 14, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '642a13a81a118f5461284936c0f74afa67565a32', 'committer_username': 'akshanshbhatt', 'committer_name': 'akshānsh', 'committer_email': 'info@akshansh.me', 'commit_date': datetime.datetime(2019, 7, 23, 14, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4db304725f76b1954a3b7e00bbc349f3858fe39d', 'committer_username': 'akshanshbhatt', 'committer_name': 'akshānsh', 'committer_email': 'info@akshansh.me', 'commit_date': datetime.datetime(2019, 7, 23, 14, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5772fee5f60ccf47def6ac9647db88e48a61cec5', 'committer_username': 'akshanshbhatt', 'committer_name': 'akshānsh', 'committer_email': 'info@akshansh.me', 'commit_date': datetime.datetime(2019, 7, 23, 14, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '92a8d909d00b63d13124e334d278bd5429e2d9b3', 'committer_username': 'akshanshbhatt', 'committer_name': 'akshānsh', 'committer_email': 'info@akshansh.me', 'commit_date': datetime.datetime(2019, 7, 23, 14, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '40eaea88c6b0d11a5860aef47a5a4eae152d1ac4', 'committer_username': 'akshanshbhatt', 'committer_name': 'akshānsh', 'committer_email': 'info@akshansh.me', 'commit_date': datetime.datetime(2019, 7, 23, 14, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '61858038e992caa9e0905fb05ffdc63be0ebfb1d', 'committer_username': 'akshanshbhatt', 'committer_name': 'akshānsh', 'committer_email': 'info@akshansh.me', 'commit_date': datetime.datetime(2019, 7, 23, 14, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4196e76bffb061c60a498ad6a3f300cf8626c95b', 'committer_username': 'akshanshbhatt', 'committer_name': 'akshānsh', 'committer_email': 'info@akshansh.me', 'commit_date': datetime.datetime(2019, 7, 23, 14, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'afbefe2852fd2ae25b52de54a55eaec4a6cf4000', 'committer_username': 'akshanshbhatt', 'committer_name': 'akshānsh', 'committer_email': 'info@akshansh.me', 'commit_date': datetime.datetime(2019, 7, 23, 14, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3910bb2bc96e0059b743e19819ab7a21f462866d', 'committer_username': 'akshanshbhatt', 'committer_name': 'akshānsh', 'committer_email': 'info@akshansh.me', 'commit_date': datetime.datetime(2019, 7, 23, 14, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1b8805cbd105a0a36ab584e9a2a2883d10dfbda9', 'committer_username': 'akshanshbhatt', 'committer_name': 'akshānsh', 'committer_email': 'info@akshansh.me', 'commit_date': datetime.datetime(2019, 7, 23, 14, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e88a429906bd230231233e67d21583408f67478d', 'committer_username': 'akshanshbhatt', 'committer_name': 'akshānsh', 'committer_email': 'info@akshansh.me', 'commit_date': datetime.datetime(2019, 7, 23, 14, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '098c6e7b74ac5931bd800c9416a56329f8268273', 'committer_username': 'akshanshbhatt', 'committer_name': 'akshānsh', 'committer_email': 'info@akshansh.me', 'commit_date': datetime.datetime(2019, 7, 23, 14, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd5f9c914c9ccfc5f049094137c22a692ba0be016', 'committer_username': 'akshanshbhatt', 'committer_name': 'akshānsh', 'committer_email': 'info@akshansh.me', 'commit_date': datetime.datetime(2019, 7, 23, 14, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3436fac9a896d5aaf97aaef2da9279a4d089cf29', 'committer_username': 'akshanshbhatt', 'committer_name': 'akshānsh', 'committer_email': 'info@akshansh.me', 'commit_date': datetime.datetime(2019, 7, 23, 14, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd1e86dc9838f062bdbe77ec12ad0fb4bd73ec150', 'committer_username': 'akshanshbhatt', 'committer_name': 'akshānsh', 'committer_email': 'info@akshansh.me', 'commit_date': datetime.datetime(2019, 7, 23, 14, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c53c67dc81c611910b44dcb1951e07669d1c760c', 'committer_username': 'akshanshbhatt', 'committer_name': 'akshānsh', 'committer_email': 'info@akshansh.me', 'commit_date': datetime.datetime(2019, 7, 23, 14, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '30c5ab9315e263b78382db1cdaf96b36862b54b0', 'committer_username': 'akshanshbhatt', 'committer_name': 'akshānsh', 'committer_email': 'info@akshansh.me', 'commit_date': datetime.datetime(2019, 7, 23, 14, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6aa103d85ea1ce7f662032bdb6964eb0b4fcf5e9', 'committer_username': 'akshanshbhatt', 'committer_name': 'akshānsh', 'committer_email': 'info@akshansh.me', 'commit_date': datetime.datetime(2019, 7, 23, 14, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '71e61d1d2ea706f853bf91d9b83d54a5df889229', 'committer_username': 'akshanshbhatt', 'committer_name': 'akshānsh', 'committer_email': 'info@akshansh.me', 'commit_date': datetime.datetime(2019, 7, 23, 14, 35, 25, tzinfo=datetime.timezone.utc)}]",akshānsh,53227127,info@akshansh.me,User,,18,,21,32
664294437,fix(physics.control): order of classes in doc,"<!-- Your title above should be a short description of what
was changed. Do not include the issue number in the title. -->

#### References to other Issues or PRs
<!-- If this pull request fixes an issue, write ""Fixes #NNNN"" in that exact
format, e.g. ""Fixes #1234"" (see
https://tinyurl.com/auto-closing for more information). Also, please
write a comment on that issue linking back to this pull request once it is
open. -->


#### Brief description of what is fixed or changed

The way in which the classes are ordered in the docs of `sympy.physics.control.lti` is not appropriate for beginners. I fixed it according to the general relevance.

#### Other comments


#### Release Notes

<!-- Write the release notes for this release below between the BEGIN and END
statements. The basic format is a bulleted list with the name of the subpackage
and the release note for this PR. For example:

* solvers
  * Added a new solver for logarithmic equations.

* functions
  * Fixed a bug with log of integers.

or if no release note(s) should be included use:

NO ENTRY

See https://github.com/sympy/sympy/wiki/Writing-Release-Notes for more
information on how to write release notes. The bot will check your release
notes automatically to see if they are formatted correctly. -->

<!-- BEGIN RELEASE NOTES -->
NO ENTRY
<!-- END RELEASE NOTES -->
",True,21587,https://api.github.com/repos/sympy/sympy/pulls/21587,https://github.com/sympy/sympy/pull/21587,closed,12,1,1,1,3,0,1,0,[{'name': 'Documentation'}],2021-06-08 05:22:47+00:00,2021-06-08 07:24:07+00:00,7280.0,2:01:20,[],"[{'commit_sha': '4b02484b61d331c7b88ce26ba5ae67b087cf522d', 'committer_username': 'akshanshbhatt', 'committer_name': 'akshānsh', 'committer_email': 'info@akshansh.me', 'commit_date': datetime.datetime(2019, 7, 23, 14, 35, 25, tzinfo=datetime.timezone.utc)}]",akshānsh,53227127,info@akshansh.me,User,,18,,21,32
702485872,Update example in `MIMOParallel.var`,"<!-- Your title above should be a short description of what
was changed. Do not include the issue number in the title. -->

#### References to other Issues or PRs
<!-- If this pull request fixes an issue, write ""Fixes #NNNN"" in that exact
format, e.g. ""Fixes #1234"" (see
https://tinyurl.com/auto-closing for more information). Also, please
write a comment on that issue linking back to this pull request once it is
open. -->


#### Brief description of what is fixed or changed

Updated the example in `MIMOParallel.var`

#### Other comments


#### Release Notes

<!-- Write the release notes for this release below between the BEGIN and END
statements. The basic format is a bulleted list with the name of the subpackage
and the release note for this PR. For example:

* solvers
  * Added a new solver for logarithmic equations.

* functions
  * Fixed a bug with log of integers.

or if no release note(s) should be included use:

NO ENTRY

See https://github.com/sympy/sympy/wiki/Writing-Release-Notes for more
information on how to write release notes. The bot will check your release
notes automatically to see if they are formatted correctly. -->

<!-- BEGIN RELEASE NOTES -->
NO ENTRY
<!-- END RELEASE NOTES -->
",True,21820,https://api.github.com/repos/sympy/sympy/pulls/21820,https://github.com/sympy/sympy/pull/21820,closed,5,4,1,1,1,0,1,0,[{'name': 'Documentation'}],2021-08-03 18:01:50+00:00,2021-08-03 19:18:00+00:00,4570.0,1:16:10,[],"[{'commit_sha': '856b8b384a2819cc55d5ea4f4a7e83dd86443972', 'committer_username': 'akshanshbhatt', 'committer_name': 'akshānsh', 'committer_email': 'info@akshansh.me', 'commit_date': datetime.datetime(2019, 7, 23, 14, 35, 25, tzinfo=datetime.timezone.utc)}]",akshānsh,53227127,info@akshansh.me,User,,18,,21,32
693300658,Add graphical analyses in `physics.control`,"<!-- Your title above should be a short description of what
was changed. Do not include the issue number in the title. -->

#### References to other Issues or PRs
<!-- If this pull request fixes an issue, write ""Fixes #NNNN"" in that exact
format, e.g. ""Fixes #1234"" (see
https://tinyurl.com/auto-closing for more information). Also, please
write a comment on that issue linking back to this pull request once it is
open. -->


#### Brief description of what is fixed or changed

Implement common graphical analyses related to control theory.

#### Other comments

__Checklist:__

- [x] Pole-Zero Plot
- [x] Step Response
- [x] Impulse Response
- [x] Ramp Response
- [x] Bode Plot
- [x] Methods for getting numerical data
- [x] Docs
- [x] Tests

__Future Work:__

- [ ] ~~Root Locus~~ (Effective sampling needed. See https://github.com/sympy/sympy/pull/21763#discussion_r675772024 and https://github.com/sympy/sympy/pull/21763#discussion_r675882746)
- [ ] ~~Nyquist Plot **~~ (Out of scope of my proposed project. Will add sometime in the future along with Nichols plot)

#### Release Notes

<!-- Write the release notes for this release below between the BEGIN and END
statements. The basic format is a bulleted list with the name of the subpackage
and the release note for this PR. For example:

* solvers
  * Added a new solver for logarithmic equations.

* functions
  * Fixed a bug with log of integers.

or if no release note(s) should be included use:

NO ENTRY

See https://github.com/sympy/sympy/wiki/Writing-Release-Notes for more
information on how to write release notes. The bot will check your release
notes automatically to see if they are formatted correctly. -->

<!-- BEGIN RELEASE NOTES -->
* physics.control
  * Added common plots related to control theory.
<!-- END RELEASE NOTES -->",True,21763,https://api.github.com/repos/sympy/sympy/pulls/21763,https://github.com/sympy/sympy/pull/21763,closed,1310,2,7,29,39,49,2,0,"[{'name': 'GSoC'}, {'name': 'physics.control'}]",2021-07-20 09:15:25+00:00,2021-08-17 16:17:02+00:00,2444497.0,"28 days, 7:01:37","[{'comment_id': 674018828, 'comment_body': ""```suggestion\r\n    plt.plot(x_poles, y_poles, 'x', mfc='none', markersize=10)\r\n    plt.plot(x_zeros, y_zeros, 'o', markersize=7)\r\n```\r\nA small markersize will help us point out the zeros more precisely, no? "", 'comment_created': datetime.datetime(2021, 7, 21, 14, 20, 59, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 674020861, 'comment_body': '```suggestion\r\n        xlabel=""Time (s)"", ylabel=""Amplitude"")\r\n```\r\n', 'comment_created': datetime.datetime(2021, 7, 21, 14, 23, 17, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 675432705, 'comment_body': ""```suggestion\r\ndef bode(system, initial_exp=-5, final_exp=5, show=True, **kwargs):\r\n```\r\nNaming should be consistent for all the plots. Although, I wonder if we really want this naming style. `pole_zero`, by itself, doesn't make much sense."", 'comment_created': datetime.datetime(2021, 7, 23, 9, 38, 1, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 675448267, 'comment_body': 'What if the system is MIMO? ', 'comment_created': datetime.datetime(2021, 7, 23, 9, 56, 11, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 675464659, 'comment_body': 'I would not use `Poly` for this implementation; It doesn\'t work well with time-delay terms.\r\n```python\r\n>>> G = TransferFunction(s*exp(-s), s**2 + 2*s + 1, s)\r\n>>> pole_zero(G)\r\nTraceback (most recent call last):\r\n  File ""/home/namannimmo/oss/sympy/sympy/polys/polyutils.py"", line 211, in _parallel_dict_from_expr_if_gens\r\n    monom[indices[base]] = exp\r\nKeyError: exp(-s)\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File ""<stdin>"", line 1, in <module>\r\n  File ""/home/namannimmo/oss/sympy/sympy/physics/control/control_plots.py"", line 28, in pole_zero\r\n    num_poly = Poly(system.num, system.var).all_coeffs()\r\n  File ""/home/namannimmo/oss/sympy/sympy/polys/polytools.py"", line 164, in __new__\r\n    return cls._from_expr(rep, opt)\r\n  File ""/home/namannimmo/oss/sympy/sympy/polys/polytools.py"", line 293, in _from_expr\r\n    rep, opt = _dict_from_expr(rep, opt)\r\n  File ""/home/namannimmo/oss/sympy/sympy/polys/polyutils.py"", line 368, in _dict_from_expr\r\n    rep, gens = _dict_from_expr_if_gens(expr, opt)\r\n  File ""/home/namannimmo/oss/sympy/sympy/polys/polyutils.py"", line 307, in _dict_from_expr_if_gens\r\n    (poly,), gens = _parallel_dict_from_expr_if_gens((expr,), opt)\r\n  File ""/home/namannimmo/oss/sympy/sympy/polys/polyutils.py"", line 216, in _parallel_dict_from_expr_if_gens\r\n    raise PolynomialError(""%s contains an element of ""\r\nsympy.polys.polyerrors.PolynomialError: exp(-s) contains an element of the set of generators.\r\n\r\n```', 'comment_created': datetime.datetime(2021, 7, 23, 10, 24, 47, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 675467190, 'comment_body': 'Why are you using NumPy to do these computations? SymPy can do all of that. I guess the helper function below should also follow this.', 'comment_created': datetime.datetime(2021, 7, 23, 10, 29, 32, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 675473093, 'comment_body': '```suggestion\r\n    return plot(y, (x, 0, upper_limit), show=True, title=""Impulse Response"",\r\n```\r\n', 'comment_created': datetime.datetime(2021, 7, 23, 10, 40, 36, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 675487778, 'comment_body': 'Check the arguments of the plotting functions?', 'comment_created': datetime.datetime(2021, 7, 23, 11, 10, 38, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 675493210, 'comment_body': ""Unfortunately, I don't think this is so easy. Can you give me some links which you followed so that I could check the correctness? "", 'comment_created': datetime.datetime(2021, 7, 23, 11, 22, 30, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 675562006, 'comment_body': 'As I said earlier --\r\n\r\n> Some minor API changes are required, along with docs and tests, which I will try to finish before next week.\r\n\r\nThis was one of them. All of these plots are meant for SISO lti systems with no time delay term.\r\n', 'comment_created': datetime.datetime(2021, 7, 23, 13, 24, 55, tzinfo=datetime.timezone.utc), 'commenter': 'akshanshbhatt', 'type': 'User'}, {'comment_id': 675563728, 'comment_body': ""The reason behind using `Poly()` was speed. I was using NumPy for root-locus and getting a huge performance advantage because- (a) SymPy is a symbolic computation library and NumPy is a numeric computation library. (b) Matplotlib requires NumPy for internal numeric computation and hence NumPy is also a listed dependency for matplotlib. It is installed **with** matplotlib.\r\n\r\n![image](https://user-images.githubusercontent.com/53227127/126779816-0781e6ce-abcd-4e2c-8522-b66820b96a7c.png)\r\n\r\nAlso just to be clear, these plots will not support transfer functions with time delay. Maybe I'll allow time-delay in Pole-Zero because time delay doesn't affect the poles and zeroes of the system.\r\n"", 'comment_created': datetime.datetime(2021, 7, 23, 13, 27, 26, tzinfo=datetime.timezone.utc), 'commenter': 'akshanshbhatt', 'type': 'User'}, {'comment_id': 675563816, 'comment_body': 'SymPy can do it but by taking 1000x more time. SymPy is not optimized for large numerical computations, NumPy however, is a numerical computation library. Let me explain.\r\n\r\nThis root computation operation in SymPy took about 50ms per operation.\r\n```python \r\nfrom sympy import Poly, roots, nroots\r\nfrom sympy.abc import x\r\n\r\nroot_list = []\r\n\r\nfor k in range(0, 100):\r\n    s = Poly(k*x**8 + 9*x**7 + 7*x**6 + 32*x**5 + 89*x**2 + 78*x + 10, x)\r\n    %time root_list.append(nroots(s, n=8))\r\n\r\nprint(root_list)\r\n```\r\n\r\nOUTPUT:\r\n```\r\nWall time: 59 ms\r\nWall time: 58.3 ms\r\nWall time: 86.6 ms\r\nWall time: 62 ms\r\nWall time: 82 ms\r\nWall time: 53 ms\r\nWall time: 67.8 ms\r\nWall time: 51 ms\r\nWall time: 54 ms\r\nWall time: 53.1 ms\r\nWall time: 47 ms\r\nWall time: 54 ms\r\nWall time: 59 ms\r\nWall time: 57 ms\r\nWall time: 71 ms\r\nWall time: 50 ms\r\nWall time: 50 ms\r\nWall time: 51 ms\r\nWall time: 65.2 ms\r\nWall time: 45.8 ms\r\nWall time: 46.3 ms\r\nWall time: 67.7 ms\r\nWall time: 44.9 ms\r\nWall time: 47.9 ms\r\nWall time: 61.8 ms\r\nWall time: 55.9 ms\r\nWall time: 44.4 ms\r\nWall time: 48.9 ms\r\nWall time: 42.7 ms\r\nWall time: 42.1 ms\r\nWall time: 48 ms\r\nWall time: 55.9 ms\r\nWall time: 70.4 ms\r\nWall time: 111 ms\r\nWall time: 68.2 ms\r\nWall time: 41.7 ms\r\nWall time: 44 ms\r\nWall time: 47 ms\r\nWall time: 39.3 ms\r\nWall time: 45 ms\r\nWall time: 23 ms\r\nWall time: 21 ms\r\nWall time: 23 ms\r\nWall time: 22.6 ms\r\nWall time: 24 ms\r\nWall time: 29 ms\r\nWall time: 22 ms\r\nWall time: 20 ms\r\nWall time: 19.5 ms\r\nWall time: 18.7 ms\r\nWall time: 24.4 ms\r\nWall time: 30.4 ms\r\nWall time: 35 ms\r\nWall time: 24 ms\r\nWall time: 20 ms\r\nWall time: 25 ms\r\nWall time: 27 ms\r\nWall time: 21 ms\r\nWall time: 23 ms\r\nWall time: 17 ms\r\nWall time: 18 ms\r\nWall time: 20 ms\r\nWall time: 22.1 ms\r\nWall time: 21 ms\r\nWall time: 22.8 ms\r\nWall time: 15.6 ms\r\nWall time: 16.6 ms\r\nWall time: 15.6 ms\r\nWall time: 18.7 ms\r\nWall time: 20 ms\r\nWall time: 28 ms\r\nWall time: 16 ms\r\nWall time: 16 ms\r\nWall time: 16 ms\r\nWall time: 19 ms\r\nWall time: 17.9 ms\r\nWall time: 21 ms\r\nWall time: 24 ms\r\nWall time: 16.6 ms\r\nWall time: 16.7 ms\r\nWall time: 18.7 ms\r\nWall time: 17.8 ms\r\nWall time: 19.5 ms\r\nWall time: 22.1 ms\r\nWall time: 24.9 ms\r\nWall time: 35 ms\r\nWall time: 29 ms\r\nWall time: 35 ms\r\nWall time: 19 ms\r\nWall time: 23 ms\r\nWall time: 16 ms\r\nWall time: 4.44 ms\r\nWall time: 15.6 ms\r\nWall time: 36.5 ms\r\nWall time: 11 ms\r\nWall time: 28.3 ms\r\nWall time: 33.1 ms\r\nWall time: 31 ms\r\nWall time: 31 ms\r\nWall time: 24 ms\r\n```\r\n\r\nThe same operation on NumPy took:\r\n```python \r\nimport numpy as np\r\n\r\nroot_list = []\r\n\r\nfor k in range(0, 100):\r\n    s = np.array([k, 9, 7, 32, 0, 0, 89, 78, 10])\r\n    %time root_list.append(np.roots(s))\r\n\r\nprint(root_list)\r\n```\r\nOUTPUT:\r\n\r\n```\r\nWall time: 29.7 ms\r\nWall time: 0 ns\r\nWall time: 1e+03 µs\r\nWall time: 0 ns\r\nWall time: 0 ns\r\nWall time: 0 ns\r\nWall time: 0 ns\r\nWall time: 0 ns\r\nWall time: 1 ms\r\nWall time: 0 ns\r\nWall time: 0 ns\r\nWall time: 996 µs\r\nWall time: 0 ns\r\nWall time: 0 ns\r\nWall time: 1 ms\r\nWall time: 0 ns\r\nWall time: 0 ns\r\nWall time: 0 ns\r\nWall time: 0 ns\r\nWall time: 0 ns\r\nWall time: 0 ns\r\nWall time: 0 ns\r\nWall time: 0 ns\r\nWall time: 0 ns\r\nWall time: 0 ns\r\nWall time: 0 ns\r\nWall time: 0 ns\r\nWall time: 0 ns\r\nWall time: 0 ns\r\nWall time: 0 ns\r\nWall time: 0 ns\r\nWall time: 0 ns\r\nWall time: 0 ns\r\nWall time: 0 ns\r\nWall time: 0 ns\r\nWall time: 0 ns\r\nWall time: 1.01 ms\r\nWall time: 0 ns\r\nWall time: 998 µs\r\nWall time: 0 ns\r\nWall time: 1.02 ms\r\nWall time: 0 ns\r\nWall time: 1.01 ms\r\nWall time: 0 ns\r\nWall time: 0 ns\r\nWall time: 1.01 ms\r\nWall time: 0 ns\r\nWall time: 0 ns\r\nWall time: 0 ns\r\nWall time: 0 ns\r\nWall time: 0 ns\r\nWall time: 0 ns\r\nWall time: 0 ns\r\nWall time: 0 ns\r\nWall time: 0 ns\r\nWall time: 0 ns\r\nWall time: 0 ns\r\nWall time: 0 ns\r\nWall time: 0 ns\r\nWall time: 0 ns\r\nWall time: 1e+03 µs\r\nWall time: 0 ns\r\nWall time: 0 ns\r\nWall time: 999 µs\r\nWall time: 0 ns\r\nWall time: 0 ns\r\nWall time: 1 ms\r\nWall time: 0 ns\r\nWall time: 998 µs\r\nWall time: 0 ns\r\nWall time: 0 ns\r\nWall time: 0 ns\r\nWall time: 0 ns\r\nWall time: 0 ns\r\nWall time: 0 ns\r\nWall time: 0 ns\r\nWall time: 0 ns\r\nWall time: 0 ns\r\nWall time: 0 ns\r\nWall time: 997 µs\r\nWall time: 0 ns\r\nWall time: 0 ns\r\nWall time: 0 ns\r\nWall time: 0 ns\r\nWall time: 0 ns\r\nWall time: 0 ns\r\nWall time: 0 ns\r\nWall time: 0 ns\r\nWall time: 0 ns\r\nWall time: 0 ns\r\nWall time: 0 ns\r\nWall time: 0 ns\r\nWall time: 0 ns\r\nWall time: 0 ns\r\nWall time: 0 ns\r\nWall time: 0 ns\r\nWall time: 0 ns\r\nWall time: 0 ns\r\nWall time: 0 ns\r\nWall time: 0 ns\r\n```\r\n\r\nAnd yes, the results are not cached. you can try this on your local.\r\n\r\nThis speed in computation is required especially during plotting. This is not something out of the blue. NumPy is used internally in the SymPy plotting module too. Using NumPy is not a choice rather a necessity.\r\n\r\nhttps://github.com/sympy/sympy/blob/645bbb06cd289165a9144d4c2c64bf17b664f8ac/sympy/plotting/plot.py#L1322-L1335\r\n\r\n', 'comment_created': datetime.datetime(2021, 7, 23, 13, 27, 31, tzinfo=datetime.timezone.utc), 'commenter': 'akshanshbhatt', 'type': 'User'}, {'comment_id': 675563943, 'comment_body': 'As told earlier, the user API is crude now. I have not dealt with input checking yet. Even the keyword arguments passed are unused in most of the function signatures.', 'comment_created': datetime.datetime(2021, 7, 23, 13, 27, 41, tzinfo=datetime.timezone.utc), 'commenter': 'akshanshbhatt', 'type': 'User'}, {'comment_id': 675564004, 'comment_body': ""> Can you give me some links which you followed so that I could check the correctness?\r\n\r\nhttps://en.wikipedia.org/wiki/Bode_plot\r\nhttps://www.youtube.com/watch?v=_eh1conN6YM\r\nhttps://www.youtube.com/watch?v=CSAp9ooQRT0\r\n\r\nI didn't look at someone's implementation if that was what you meant. I just read the Wikipedia page saw a couple of related videos/univ lectures. I tested it with 10s of different examples which I could find online and all the plots matched exactly. There might be few vulnerabilities, if you find any particular case just let me know.\r\n\r\n> Unfortunately, I don't think this is so easy.\r\n\r\nThe point here is not about being easy. It is the **definition** of the Bode plot. This is how it is defined. I really don't get that how can it be wrong if the calculation of points is done by the sole definition of the plot."", 'comment_created': datetime.datetime(2021, 7, 23, 13, 27, 46, tzinfo=datetime.timezone.utc), 'commenter': 'akshanshbhatt', 'type': 'User'}, {'comment_id': 675586041, 'comment_body': 'I forgot to add that the time results that I shared were only for 100 different `k` values.\r\nAs you can see here, for root locus, we are computing the roots 10000 times (`num=10000`) so there is absolutely no point in using sympy.\r\n\r\nhttps://github.com/sympy/sympy/blob/ec68ebf5b089f9166b759c4fe7fd5ef42fcf2e7b/sympy/physics/control/control_plots.py#L133-L140\r\n\r\nhttps://github.com/sympy/sympy/blob/ec68ebf5b089f9166b759c4fe7fd5ef42fcf2e7b/sympy/physics/control/control_plots.py#L114-L121', 'comment_created': datetime.datetime(2021, 7, 23, 13, 57, 58, tzinfo=datetime.timezone.utc), 'commenter': 'akshanshbhatt', 'type': 'User'}, {'comment_id': 675618807, 'comment_body': ""It is possible to use sympy with other plotting backends that do not necessarily use numpy:\r\nhttps://pypi.org/project/sympy-plot-backends/\r\n\r\nGenerally when sympy has numeric routines they are more accurate than numpy's:\r\n```python\r\nIn [8]: p = expand(prod(x - i for i in range(1, 21)))\r\n\r\nIn [9]: nroots(p)\r\nOut[9]: \r\n[1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15\r\n.0, 16.0, 17.0, 18.0, 19.0, 20.0]\r\n\r\nIn [10]: numpy.roots(Poly(p).all_coeffs())\r\nOut[10]: \r\narray([19.99980929, 19.00190982, 17.99092135, 17.02542715, 15.94628672,\r\n       15.0754938 , 13.91475559, 13.07431403, 11.95328325, 11.02502293,\r\n        9.99041304,  9.00291529,  7.99935583,  7.000102  ,  5.99998925,\r\n        5.00000067,  3.99999998,  3.        ,  2.        ,  1.        ])\r\n```"", 'comment_created': datetime.datetime(2021, 7, 23, 14, 42, 10, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 675684810, 'comment_body': 'Plotting backend is not an issue here. Whichever backend we may use, it requires efficient sampling to generate plots. Some form of numerical computation will always occur under the hood. SymPy undoubtedly is more accurate in numerical operations. Still, during sampling with a large number of points (10000), accuracy hardly matters, especially when a much faster approach (more than 1000 times) is accurate up to 3-4 decimal places.', 'comment_created': datetime.datetime(2021, 7, 23, 16, 19, 17, tzinfo=datetime.timezone.utc), 'commenter': 'akshanshbhatt', 'type': 'User'}, {'comment_id': 675728067, 'comment_body': ""> is accurate up to 3-4 decimal places.\r\n\r\nThe accuracy can degrade much more than that.\r\n\r\nThe idea with using a symbolic library is that you should have greater confidence in things like the accuracy of any computed result even if that means waiting longer for things to be computed. It also means that different approaches are often better to make something efficient.\r\n\r\nAs an example your `root_locus` function computes the roots of 10000 different polynomials. Why 10000? No one needs that many points in the plot. Many of the lines are just joining points on the real axis. To plot a straight line you only need to know its start and end and those can be computed exactly. Then you don't need to evaluate the polynomial at 10000 points.\r\n\r\nI'm not sure I've understood the calculation that you want precisely but I think it's something like this:\r\n```python\r\nIn [35]: eq\r\nOut[35]: k⋅(s + 7) + s⋅(s + 5)⋅(s + 15)⋅(s + 20)\r\n\r\nIn [36]: discriminant(eq)\r\nOut[36]: \r\n      4          3             2                               \r\n- 27⋅k  + 47088⋅k  - 37907500⋅k  + 3881250000⋅k + 1265625000000\r\n\r\nIn [37]: nroots(discriminant(eq))\r\nOut[37]: [-130.564918275438, 307.765516989741, 783.399700642849 - 743.513266939402⋅ⅈ, 783.399700642849 + 743.513266939402⋅ⅈ]\r\n```\r\nThe positive real roots for `k` are the points on the real axis where lines start and end. This now shows you what values of `k` are interesting for the plot."", 'comment_created': datetime.datetime(2021, 7, 23, 17, 35, 55, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 675772024, 'comment_body': ""For `TransferFunction(2*s**2 + 5*s + 1, s**2 + 3*s + 5, s)`\r\n\r\n* If `num=10000` (sampled 10000 times, default)\r\n\r\n  ![scatter_rootLocus_10k](https://user-images.githubusercontent.com/53227127/126822686-13cbd6f9-93be-4cea-b875-3cb028c68a23.png)\r\n\r\n  The scatter plot looks like this.\r\n  And the actual root-locus plot (corresponding to the regression of these sampled points) looks like this-\r\n\r\n  ![rl](https://user-images.githubusercontent.com/53227127/126823088-eb022288-22a0-43a7-beb4-7188cffaab6c.png)\r\n\r\nSimilarly,\r\n\r\n* If `num=1000`\r\n  \r\n  ![1k](https://user-images.githubusercontent.com/53227127/126823358-4adab831-8f77-416c-8723-b1adf9523e87.png)\r\n\r\n  ![1k_plot](https://user-images.githubusercontent.com/53227127/126823475-4c76b035-15e1-4a8e-8987-405fb38b73c3.png)\r\n\r\n* If `num=300`\r\n\r\n  ![scatter_300](https://user-images.githubusercontent.com/53227127/126823639-bfad7f26-01ed-467a-aad7-bee08e37ddc5.png)\r\n\r\n  ![plot_300](https://user-images.githubusercontent.com/53227127/126823657-29f2a022-1e8e-4ae6-8515-cd98a8613ac8.png)\r\n\r\n\r\n> To plot a straight line you only need to know its start and end and those can be computed exactly. Then you don't need to evaluate the polynomial at 10000 points.\r\n\r\nStraight Lines in root locus plots are not very common. In root-locus plots, we plot the movement of the roots of the polynomial `den+ k*num` when k varies from 0 to inf. As you can tell when k is 0 we get the roots of den (poles) and as k approaches inf, the roots of `den + k*num` are roots of num only (zeros). Therefore, when num and den have the same degree, the root locus plot is a path from poles to zeros of the transfer function. This is not always a straight line. \r\n\r\n![equal](https://user-images.githubusercontent.com/53227127/126824861-58e4de4a-24a5-4f94-b97f-8655e7ad22a7.png)\r\n\r\nOnly one is a straight line path here and knowing this fact can't help us in any way. I don't understand how knowing the discriminant of the polynomial will help us in knowing the points on the rl plot. Maybe I'm missing something.\r\n\r\n"", 'comment_created': datetime.datetime(2021, 7, 23, 18, 29, 54, tzinfo=datetime.timezone.utc), 'commenter': 'akshanshbhatt', 'type': 'User'}, {'comment_id': 675882746, 'comment_body': ""> Straight Lines in root locus plots are not very common.\r\n\r\nYour example with `num=1000` illustrates the point I wanted to make perfectly. To generate the plot you compute the roots of the polynomial for 1000 different values of k ranging from 0 to kmax where kmax is arbitrarily chosen to be 400. Out of those 1000 values of k only 4 have non-real roots so the other 996 polynomials whose roots are computed are only used to plot two straight lines. The straight line could be computed more efficiently and more accurately by simply computing its start and end points which you can do like this:\r\n```python\r\nIn [93]: k, s = symbols('k, s')\r\n\r\nIn [94]: n, d = 2*s**2 + 5*s + 1, s**2 + 3*s + 5\r\n\r\nIn [95]: eq = d + k*n\r\n\r\nIn [96]: eq\r\nOut[96]: \r\n  ⎛   2          ⎞    2          \r\nk⋅⎝2⋅s  + 5⋅s + 1⎠ + s  + 3⋅s + 5\r\n\r\nIn [97]: nroots(n) # k = oo\r\nOut[97]: [-2.28077640640441, -0.219223593595585]\r\n\r\nIn [98]: discriminant(eq, s)\r\nOut[98]: \r\n    2            \r\n17⋅k  - 14⋅k - 11\r\n\r\nIn [99]: nroots(discriminant(eq, s))\r\nOut[99]: [-0.491899499749248, 1.31542891151395]\r\n\r\nIn [100]: roots(discriminant(eq, s), multiple=True)\r\nOut[100]: \r\n⎡7    2⋅√59  7    2⋅√59⎤\r\n⎢── - ─────, ── + ─────⎥\r\n⎣17     17   17     17 ⎦\r\n\r\nIn [101]: eq.subs(k, roots(discriminant(eq, s), multiple=True)[1])\r\nOut[101]: \r\n 2         ⎛7    2⋅√59⎞ ⎛   2          ⎞    \r\ns  + 3⋅s + ⎜── + ─────⎟⋅⎝2⋅s  + 5⋅s + 1⎠ + 5\r\n           ⎝17     17 ⎠                     \r\n\r\nIn [102]: roots(eq.subs(k, roots(discriminant(eq, s), multiple=True)[1]), s)\r\nOut[102]: {-9 + √59: 2}\r\n\r\nIn [103]: list(_)[0].n()\r\nOut[103]: -1.31885425213139\r\n```\r\nYour suggestion to use num=10000 and compute the roots of 10000 polynomials is a workaround for having the wrong value of kmax. In fact by computing the roots of the discriminant it is possible to compute what the relevant values of k are."", 'comment_created': datetime.datetime(2021, 7, 23, 21, 50, 25, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 675988722, 'comment_body': 'Fine. I get your point now. But there is still an issue. You see, with your calculations, we get these points:\r\n\r\n![image](https://user-images.githubusercontent.com/53227127/126862739-a8c6b068-176d-4bc1-8051-5a2d2866e88f.png)\r\n\r\nWhich is basically poles and zeroes of the Transfer Function + The point where the discriminant is zero (equal roots). I agree that for the two straight lines on the axis, this will work fine but what about the two symmetric arms of the curve?\r\nWe cannot plot them by simply knowing the start and endpoints. We still need to compute the roots of the polynomials from 0 to `k_c` (value of k for which the 0 discriminant point is reached) in uniform intervals.\r\n', 'comment_created': datetime.datetime(2021, 7, 24, 11, 41, 9, tzinfo=datetime.timezone.utc), 'commenter': 'akshanshbhatt', 'type': 'User'}, {'comment_id': 675992906, 'comment_body': ""> We still need to compute the roots of the polynomials from 0 to `k_c`\r\n\r\nYes, but we don't need 10000 points to plot the curve. The `num=10000` plot above shows that an acceptable plot is obtained from only 40 points (since the other 9960 points are on the real axis).\r\n\r\nI expect that uniform spacing is not optimal. Naturally I would guess that something like logarithmic or harmonic spacing would be better. You can see in the `num=10000` plot that using uniform intervals for `k` does not lead to a uniform distance between the points in the plot.\r\n\r\nIdeally the curve would be generated using pseudo-arc-length continuation so you can generate them at a fixed 2D distance within the plot but that's probably more complicated than it is worth."", 'comment_created': datetime.datetime(2021, 7, 24, 12, 22, 37, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 676127608, 'comment_body': ""> I really don't get that how can it be wrong if the calculation of points is done by the sole definition of the plot.\r\n\r\nI did not say that you are wrong. I just had some doubts and wanted to verify the correctness myself so I asked you to provide me some links.\r\n\r\n> I tested it with 10s of different examples which I could find online and all the plots matched exactly. \r\n\r\nThanks!\r\n"", 'comment_created': datetime.datetime(2021, 7, 25, 11, 4, 31, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 676128107, 'comment_body': 'You could have just said, ""I\'m using NumPy for a better computation speed."" :) \r\nThanks, I\'m satisfied now.', 'comment_created': datetime.datetime(2021, 7, 25, 11, 8, 27, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 678464385, 'comment_body': 'What if `expr` already contains a symbol called `""x""`?', 'comment_created': datetime.datetime(2021, 7, 28, 16, 25, 49, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 678468861, 'comment_body': ""I'll replace it with a dummy variable."", 'comment_created': datetime.datetime(2021, 7, 28, 16, 31, 33, tzinfo=datetime.timezone.utc), 'commenter': 'akshanshbhatt', 'type': 'User'}, {'comment_id': 678544128, 'comment_body': 'Do these even work with high order systems?', 'comment_created': datetime.datetime(2021, 7, 28, 18, 14, 56, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 678601720, 'comment_body': ""> There might be few vulnerabilities, if you find any particular case just let me know.\r\n\r\n@akshanshbhatt it is your job to figure these out and show us that you've fully thought this through. Right now, it doesn't look like you have."", 'comment_created': datetime.datetime(2021, 7, 28, 19, 43, 12, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 689817972, 'comment_body': 'This test seems fragile by testing for exact equality with floats.', 'comment_created': datetime.datetime(2021, 8, 16, 19, 56, 49, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 689820636, 'comment_body': 'Is there any better alternative? ', 'comment_created': datetime.datetime(2021, 8, 16, 20, 1, 32, tzinfo=datetime.timezone.utc), 'commenter': 'akshanshbhatt', 'type': 'User'}, {'comment_id': 689824906, 'comment_body': 'I think this should be added in the integrals module somewhere so that someone who looks at the Laplace transform code will see it there.', 'comment_created': datetime.datetime(2021, 8, 16, 20, 8, 49, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 689827575, 'comment_body': ""It's better to test that the numbers are close to some precision e.g. `abs(result - expected) < 1e-15` or something like that."", 'comment_created': datetime.datetime(2021, 8, 16, 20, 13, 24, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 689827818, 'comment_body': 'It should probably be in the same place as the `inverse_laplace_transform` function', 'comment_created': datetime.datetime(2021, 8, 16, 20, 13, 49, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 689842714, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2021, 8, 16, 20, 37, 16, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 689845471, 'comment_body': '```suggestion\r\n    tuple : (poles, zeros)\r\n```', 'comment_created': datetime.datetime(2021, 8, 16, 20, 41, 57, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 689850435, 'comment_body': ""```suggestion\r\n    Returns the Pole-Zero plot (also known as PZ plot or PZ map) of a system.\r\n    \r\n    A Pole-Zero plot is a graphical representation of a system's poles and\r\n    zeros. It is plotted on a complex plane, with circular markers representing\r\n    the system's zeros and 'x' shaped markers representing the system's poles.\r\n```"", 'comment_created': datetime.datetime(2021, 8, 16, 20, 50, 19, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 689869387, 'comment_body': 'See [PEP 257](https://www.python.org/dev/peps/pep-0257/);\r\n\r\n> Multi-line docstrings consist of a summary line just like a one-line docstring, followed by a blank line, followed by a more elaborate description', 'comment_created': datetime.datetime(2021, 8, 16, 21, 23, 14, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 689872975, 'comment_body': ""```suggestion\r\ndef step_response_plot(system, color='b', prec=8, lower_limit=0,\r\n    upper_limit=10, show_axes=False, grid=True, show=True, **kwargs):\r\n```\r\nI'd try to keep the order consistent."", 'comment_created': datetime.datetime(2021, 8, 16, 21, 30, 2, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 689875513, 'comment_body': '```suggestion\r\n    Returns the ramp response of a continuous-time system.\r\n    \r\n    Ramp function is defined as the straight line passing through\r\n    origin ($f(x) = mx$). The slope of the ramp function can be\r\n    varied by the user and the default value is 1.\r\n```', 'comment_created': datetime.datetime(2021, 8, 16, 21, 34, 34, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 690136665, 'comment_body': 'I guess the order is fine. Zeros should be first because arg order of tf is `(num, den)` - so it makes sense to return `(root(num), roots(den))`. This might confuse the user.', 'comment_created': datetime.datetime(2021, 8, 17, 8, 9, 22, tzinfo=datetime.timezone.utc), 'commenter': 'akshanshbhatt', 'type': 'User'}, {'comment_id': 690170145, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 8, 17, 8, 53, 24, tzinfo=datetime.timezone.utc), 'commenter': 'akshanshbhatt', 'type': 'User'}, {'comment_id': 690238223, 'comment_body': '`nm` can never be equal to `1`.', 'comment_created': datetime.datetime(2021, 8, 17, 10, 25, 33, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 690239499, 'comment_body': '```suggestion\r\n\r\n                return t**(-nm-1)*exp(-(bm/am)*t)/(am**-nm*gamma(-nm))\r\n```', 'comment_created': datetime.datetime(2021, 8, 17, 10, 27, 26, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 690240666, 'comment_body': 'Can you test this? Also, include in the release notes?', 'comment_created': datetime.datetime(2021, 8, 17, 10, 29, 19, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 690265900, 'comment_body': 'It should be tested.\r\n\r\nIt should either be private (with a leading underscore name) or it should have a proper docstring etc. It should only be mentioned in the release notes if it is public.', 'comment_created': datetime.datetime(2021, 8, 17, 11, 7, 25, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 690395048, 'comment_body': ""> It should either be private (with a leading underscore name) or it should have a proper docstring etc.\r\n\r\nI have made it private since I don't know much about the inner implementation. You can make it a public function later and add docs/tests later according to the need."", 'comment_created': datetime.datetime(2021, 8, 17, 13, 54, 46, tzinfo=datetime.timezone.utc), 'commenter': 'akshanshbhatt', 'type': 'User'}, {'comment_id': 690401735, 'comment_body': '```suggestion\r\n        Default zero markersize is 7.\r\n```', 'comment_created': datetime.datetime(2021, 8, 17, 14, 1, 28, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 690406818, 'comment_body': '```suggestion\r\n    Ramp function is defined as the straight line\r\n```', 'comment_created': datetime.datetime(2021, 8, 17, 14, 7, 7, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 690413865, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2021, 8, 17, 14, 14, 34, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}]","[{'commit_sha': '44819e766de1a2c5b53d46cb18bc1be5dc2a94bc', 'committer_username': 'akshanshbhatt', 'committer_name': 'akshānsh', 'committer_email': 'info@akshansh.me', 'commit_date': datetime.datetime(2019, 7, 23, 14, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c901ba1e97e392451092b7e5c0134da7ba8fc1ec', 'committer_username': 'akshanshbhatt', 'committer_name': 'akshānsh', 'committer_email': 'info@akshansh.me', 'commit_date': datetime.datetime(2019, 7, 23, 14, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '859a63b2199c0b284677e1a35db0a861026610ed', 'committer_username': 'akshanshbhatt', 'committer_name': 'akshānsh', 'committer_email': 'info@akshansh.me', 'commit_date': datetime.datetime(2019, 7, 23, 14, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ba7f43182bc702dfb752027bbe9072568c4fc3ba', 'committer_username': 'akshanshbhatt', 'committer_name': 'akshānsh', 'committer_email': 'info@akshansh.me', 'commit_date': datetime.datetime(2019, 7, 23, 14, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '25efd4d21628696dead1295adcc6bf799c8236a4', 'committer_username': 'akshanshbhatt', 'committer_name': 'akshānsh', 'committer_email': 'info@akshansh.me', 'commit_date': datetime.datetime(2019, 7, 23, 14, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fc7ba5fc976cb244f4005c6959593937699fbe84', 'committer_username': 'akshanshbhatt', 'committer_name': 'akshānsh', 'committer_email': 'info@akshansh.me', 'commit_date': datetime.datetime(2019, 7, 23, 14, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '39fb0e44497aee879b1b877d3719b7cf60f081da', 'committer_username': 'akshanshbhatt', 'committer_name': 'akshānsh', 'committer_email': 'info@akshansh.me', 'commit_date': datetime.datetime(2019, 7, 23, 14, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c162c48b490166bd82995babadb697b3f7f09823', 'committer_username': 'akshanshbhatt', 'committer_name': 'akshānsh', 'committer_email': 'info@akshansh.me', 'commit_date': datetime.datetime(2019, 7, 23, 14, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ec68ebf5b089f9166b759c4fe7fd5ef42fcf2e7b', 'committer_username': 'akshanshbhatt', 'committer_name': 'akshānsh', 'committer_email': 'info@akshansh.me', 'commit_date': datetime.datetime(2019, 7, 23, 14, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '30153ebeb5554e54073236ed1aff5cd6cb22e976', 'committer_username': 'akshanshbhatt', 'committer_name': 'akshānsh', 'committer_email': 'info@akshansh.me', 'commit_date': datetime.datetime(2019, 7, 23, 14, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ac45deb0a731c632abb6f81117e5f71ccb5ea07b', 'committer_username': 'akshanshbhatt', 'committer_name': 'akshānsh', 'committer_email': 'info@akshansh.me', 'commit_date': datetime.datetime(2019, 7, 23, 14, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '58f6bf672a5a67fbcc8feda54b7dd337ad811eb3', 'committer_username': 'akshanshbhatt', 'committer_name': 'akshānsh', 'committer_email': 'info@akshansh.me', 'commit_date': datetime.datetime(2019, 7, 23, 14, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '31fba89e6126e72d4942789e9ce77e9914e1d07a', 'committer_username': 'akshanshbhatt', 'committer_name': 'akshānsh', 'committer_email': 'info@akshansh.me', 'commit_date': datetime.datetime(2019, 7, 23, 14, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '85fc6e1b13c46ef1a110617d5cb72697eda91320', 'committer_username': 'akshanshbhatt', 'committer_name': 'akshānsh', 'committer_email': 'info@akshansh.me', 'commit_date': datetime.datetime(2019, 7, 23, 14, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ecec4c5f9bcc17bfa22a6f546e97204f2002cbcc', 'committer_username': 'akshanshbhatt', 'committer_name': 'akshānsh', 'committer_email': 'info@akshansh.me', 'commit_date': datetime.datetime(2019, 7, 23, 14, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '34fbe909d9f6c9cf9809d1bdfc9428add67a0aaa', 'committer_username': 'akshanshbhatt', 'committer_name': 'akshānsh', 'committer_email': 'info@akshansh.me', 'commit_date': datetime.datetime(2019, 7, 23, 14, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '250784ef2f643aec3951a61d8a59bcb005f29d1b', 'committer_username': 'akshanshbhatt', 'committer_name': 'akshānsh', 'committer_email': 'info@akshansh.me', 'commit_date': datetime.datetime(2019, 7, 23, 14, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '62f302361c83e6e78009ae3df1e44ee4f6f68dba', 'committer_username': 'akshanshbhatt', 'committer_name': 'akshānsh', 'committer_email': 'info@akshansh.me', 'commit_date': datetime.datetime(2019, 7, 23, 14, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fa1392cd4b3407a401dc0fb019ae31e5a1d0ff2d', 'committer_username': 'akshanshbhatt', 'committer_name': 'akshānsh', 'committer_email': 'info@akshansh.me', 'commit_date': datetime.datetime(2019, 7, 23, 14, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd8c62ca6814b9da5a13790665c97e639079fe00f', 'committer_username': 'akshanshbhatt', 'committer_name': 'akshānsh', 'committer_email': 'info@akshansh.me', 'commit_date': datetime.datetime(2019, 7, 23, 14, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cf171a26a8d1a5ed7a564b981c64e8bd486ccfe7', 'committer_username': 'akshanshbhatt', 'committer_name': 'akshānsh', 'committer_email': 'info@akshansh.me', 'commit_date': datetime.datetime(2019, 7, 23, 14, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e1f0a727ad7bbb0c3a3d60b1bf2ae3e4e049b621', 'committer_username': 'akshanshbhatt', 'committer_name': 'akshānsh', 'committer_email': 'info@akshansh.me', 'commit_date': datetime.datetime(2019, 7, 23, 14, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '15ae45d64aca244f567f962ef935a5ce43c22a8e', 'committer_username': 'akshanshbhatt', 'committer_name': 'akshānsh', 'committer_email': 'info@akshansh.me', 'commit_date': datetime.datetime(2019, 7, 23, 14, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5fe10ebfdebc82194a7281ce29482ab8cc697915', 'committer_username': 'akshanshbhatt', 'committer_name': 'akshānsh', 'committer_email': 'info@akshansh.me', 'commit_date': datetime.datetime(2019, 7, 23, 14, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e3361e1888389ab1252ac58808147dc9d2b4eedd', 'committer_username': 'akshanshbhatt', 'committer_name': 'akshānsh', 'committer_email': 'info@akshansh.me', 'commit_date': datetime.datetime(2019, 7, 23, 14, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '37e505b5c6e2df7bfa4d8f9d7bf5f167082333ed', 'committer_username': 'akshanshbhatt', 'committer_name': 'akshānsh', 'committer_email': 'info@akshansh.me', 'commit_date': datetime.datetime(2019, 7, 23, 14, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6b98d6ffd73e22bfb37d5db8d007ad91cc6ff460', 'committer_username': 'namannimmo10', 'committer_name': 'Naman Gera', 'committer_email': 'namangera15@gmail.com', 'commit_date': datetime.datetime(2018, 9, 5, 15, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4231c5f565dacf572318ac2a17897b88572d5e2a', 'committer_username': 'namannimmo10', 'committer_name': 'Naman Gera', 'committer_email': 'namangera15@gmail.com', 'commit_date': datetime.datetime(2018, 9, 5, 15, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b5d65c3812a464b124bd098d35f02e7d2340c8fb', 'committer_username': 'namannimmo10', 'committer_name': 'Naman Gera', 'committer_email': 'namangera15@gmail.com', 'commit_date': datetime.datetime(2018, 9, 5, 15, 12, 45, tzinfo=datetime.timezone.utc)}]",akshānsh,53227127,info@akshansh.me,User,,18,,21,32

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
640534,sympy,sympy/sympy,Python,4367,12714,293,1320,58687,5125,14,718,"[{'id': 1938122826, 'number': 26738, 'closed': datetime.datetime(2024, 6, 26, 18, 34, 49, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 6, 25, 16, 23, 40, tzinfo=datetime.timezone.utc), 'time_taken': 94269.0, 'time_delta': '1 day, 2:11:09', 'additions': 30, 'deletions': 47, 'state': 'closed'}, {'id': 858669321, 'number': 23128, 'closed': datetime.datetime(2022, 7, 4, 15, 36, 57, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 2, 19, 18, 47, 24, tzinfo=datetime.timezone.utc), 'time_taken': 11652573.0, 'time_delta': '134 days, 20:49:33', 'additions': 38, 'deletions': 35, 'state': 'closed'}, {'id': 737119314, 'number': 22124, 'closed': datetime.datetime(2023, 6, 18, 13, 37, 39, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 9, 19, 18, 16, 36, tzinfo=datetime.timezone.utc), 'time_taken': 55020063.0, 'time_delta': '636 days, 19:21:03', 'additions': 219, 'deletions': 0, 'state': 'closed'}, {'id': 705636481, 'number': 21833, 'closed': datetime.datetime(2021, 8, 18, 17, 3, 14, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 6, 17, 21, 3, tzinfo=datetime.timezone.utc), 'time_taken': 1035731.0, 'time_delta': '11 days, 23:42:11', 'additions': 858, 'deletions': 144, 'state': 'closed'}, {'id': 702485872, 'number': 21820, 'closed': datetime.datetime(2021, 8, 3, 19, 18, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 3, 18, 1, 50, tzinfo=datetime.timezone.utc), 'time_taken': 4570.0, 'time_delta': '1:16:10', 'additions': 5, 'deletions': 4, 'state': 'closed'}, {'id': 693300658, 'number': 21763, 'closed': datetime.datetime(2021, 8, 17, 16, 17, 2, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 20, 9, 15, 25, tzinfo=datetime.timezone.utc), 'time_taken': 2444497.0, 'time_delta': '28 days, 7:01:37', 'additions': 1310, 'deletions': 2, 'state': 'closed'}, {'id': 683154500, 'number': 21703, 'closed': datetime.datetime(2021, 8, 3, 4, 19, 13, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 4, 11, 1, 11, tzinfo=datetime.timezone.utc), 'time_taken': 2567882.0, 'time_delta': '29 days, 17:18:02', 'additions': 1215, 'deletions': 200, 'state': 'closed'}, {'id': 675970286, 'number': 21653, 'closed': datetime.datetime(2021, 7, 2, 18, 9, 28, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 23, 5, 48, 1, tzinfo=datetime.timezone.utc), 'time_taken': 822087.0, 'time_delta': '9 days, 12:21:27', 'additions': 780, 'deletions': 16, 'state': 'closed'}, {'id': 673475836, 'number': 21634, 'closed': datetime.datetime(2021, 6, 22, 13, 44, 44, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 18, 13, 29, 11, tzinfo=datetime.timezone.utc), 'time_taken': 346533.0, 'time_delta': '4 days, 0:15:33', 'additions': 220, 'deletions': 18, 'state': 'closed'}, {'id': 664294437, 'number': 21587, 'closed': datetime.datetime(2021, 6, 8, 7, 24, 7, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 8, 5, 22, 47, tzinfo=datetime.timezone.utc), 'time_taken': 7280.0, 'time_delta': '2:01:20', 'additions': 12, 'deletions': 1, 'state': 'closed'}, {'id': 658974485, 'number': 21556, 'closed': datetime.datetime(2021, 8, 3, 5, 13, 58, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 1, 12, 47, tzinfo=datetime.timezone.utc), 'time_taken': 5416018.0, 'time_delta': '62 days, 16:26:58', 'additions': 2559, 'deletions': 336, 'state': 'closed'}, {'id': 609127319, 'number': 21250, 'closed': datetime.datetime(2021, 4, 7, 10, 51, 6, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 4, 5, 18, 47, 23, tzinfo=datetime.timezone.utc), 'time_taken': 144223.0, 'time_delta': '1 day, 16:03:43', 'additions': 21, 'deletions': 4, 'state': 'closed'}, {'id': 605988521, 'number': 21208, 'closed': datetime.datetime(2021, 4, 1, 19, 1, 47, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 3, 31, 16, 28, 48, tzinfo=datetime.timezone.utc), 'time_taken': 95579.0, 'time_delta': '1 day, 2:32:59', 'additions': 17, 'deletions': 4, 'state': 'closed'}, {'id': 602221100, 'number': 21182, 'closed': datetime.datetime(2021, 3, 28, 18, 34, 3, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 3, 28, 10, 41, 45, tzinfo=datetime.timezone.utc), 'time_taken': 28338.0, 'time_delta': '7:52:18', 'additions': 6, 'deletions': 2, 'state': 'closed'}, {'id': 601387464, 'number': 21171, 'closed': datetime.datetime(2021, 4, 1, 14, 53, 11, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 3, 26, 7, 48, 35, tzinfo=datetime.timezone.utc), 'time_taken': 543876.0, 'time_delta': '6 days, 7:04:36', 'additions': 16, 'deletions': 1, 'state': 'closed'}]"
