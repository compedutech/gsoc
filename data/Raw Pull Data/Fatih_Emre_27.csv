pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
878399104,BasePlaylistFeature: add popup asking deletion playlist,"to avoid accidental deletion due to Remove on playlist.

[Forum Thread Link](https://mixxx.discourse.group/t/suggestion-ask-for-confirmation-before-deleting-a-playlist/24451)
[Launchpad Bug Link](https://bugs.launchpad.net/mixxx/+bug/1912475)

I want to contribute this project via GSOC. In order to get used to project, I saw this bug and tried to fix it. 

**ScreenShot**

![image](https://user-images.githubusercontent.com/67206006/158064395-a0e65fa2-f182-42e0-8a75-96dbc22fc5d5.png)
",True,4697,https://api.github.com/repos/mixxxdj/mixxx/pulls/4697,https://github.com/mixxxdj/mixxx/pull/4697,closed,9,0,1,1,8,0,2,0,"[{'name': 'library'}, {'name': 'changelog'}]",2022-03-13 14:24:48+00:00,2022-03-13 15:57:43+00:00,5575.0,1:32:55,[],"[{'commit_sha': 'b6c4fd76c95f2d8f05370ce485092b54aab68afd', 'committer_username': 'fatihemreyildiz', 'committer_name': 'Emre', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 20, 20, 2, 55, tzinfo=datetime.timezone.utc)}]",Emre,67206006,,User,,5,,21,10
883759055,CrateFeature: add popup to avoid accidental remove of Crate,"I have fixed the accidental remove issue for crates as well by adding a popup just like I did for the playlists. 

I know making popups everywhere is not a proper solution for accidental removal issues because these popups are affecting usability a lot. There are better solutions for that like discussed on the [other Pull request](https://github.com/mixxxdj/mixxx/pull/4697); redo/undo button, check-boxes that we can change on the Options>Preferences “Warn before deleting a playlist\crate” or a checkbox like “Don’t show this again”, etc. 

After adding this popup for the playlists, a few people wanted it for crates too. Therefore I did it. I want to contribute more so any feedback will be good for me :)

In my opinion for now popups can be our problem solver, then later on better solution can be implemented.

![image](https://user-images.githubusercontent.com/67206006/159073426-b57d0b3b-956e-4b09-a531-d0156d85cf62.png)",True,4700,https://api.github.com/repos/mixxxdj/mixxx/pulls/4700,https://github.com/mixxxdj/mixxx/pull/4700,closed,11,2,1,1,2,0,2,0,"[{'name': 'library'}, {'name': 'changelog'}]",2022-03-18 19:59:25+00:00,2022-03-22 21:18:39+00:00,350354.0,"4 days, 1:19:14",[],"[{'commit_sha': 'f2644f2d009cdf5fd819ac06a708acae6b0f13ec', 'committer_username': 'fatihemreyildiz', 'committer_name': 'Emre', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 20, 20, 2, 55, tzinfo=datetime.timezone.utc)}]",Emre,67206006,,User,,5,,21,10
932983227,Parserm3u export,"I was trying to Export and Import my playlists. Then I realized when I tried to export my playlist with m3u there were some missing tracks. That was because of non encodable characters in Turkish. m3u8 was totally fine tho.

According to our conversation on Zulipchat, with your suggestion I tried to use URL Locations for m3u.

After I tried URL Locations, there were no missing tracks with m3u export/import.",True,4752,https://api.github.com/repos/mixxxdj/mixxx/pulls/4752,https://github.com/mixxxdj/mixxx/pull/4752,closed,29,5,1,6,7,6,2,0,"[{'name': 'library'}, {'name': 'changelog'}]",2022-05-10 23:31:27+00:00,2022-05-16 06:51:39+00:00,458412.0,"5 days, 7:20:12","[{'comment_id': 871798688, 'comment_body': 'This line requires a source code comment comment. \r\n\r\nIt uses QString::toUtf8() see: https://doc.qt.io/qt-5/qbytearray.html#operator-eq-eq\r\n\r\nSo you compare the ""Windows-1250"" encoding with the Utf8 encoding. I think they match for all ASCII characters, but not for Ä and friends. \r\nYou approach should work when using QTextCodec::toUnicode(trackByteArray); \r\n\r\nIt would be also nice if the check is bypassed when useUtf8 is set. \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n', 'comment_created': datetime.datetime(2022, 5, 12, 20, 50, 36, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 871805153, 'comment_body': 'I am not sure if this is working. For my understanding file URLs are always absolute. \r\nI would just delete the useRelativePath branch and add a source code comment about the issue. ', 'comment_created': datetime.datetime(2022, 5, 12, 20, 59, 16, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 872051945, 'comment_body': ""So we don't need any URL location for relative paths right? "", 'comment_created': datetime.datetime(2022, 5, 13, 6, 46, 6, tzinfo=datetime.timezone.utc), 'commenter': 'fatihemreyildiz', 'type': 'User'}, {'comment_id': 872053316, 'comment_body': 'Thanks for your review. \r\n\r\nI will work on it :+1: ', 'comment_created': datetime.datetime(2022, 5, 13, 6, 48, 20, tzinfo=datetime.timezone.utc), 'commenter': 'fatihemreyildiz', 'type': 'User'}, {'comment_id': 872064991, 'comment_body': 'I am not aware of relative paths in URLs\r\nYou may verify it with VLC player wether it excepts such paths, or reimporting with Mixxx. If it turns out that it works flawlessly we can consider to add a solution. In general I prefer to stick with standards. ', 'comment_created': datetime.datetime(2022, 5, 13, 7, 5, 55, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 872089308, 'comment_body': 'I have tried to re import relative paths on Mixxx and it worked. But it is not working on VLC. It was giving an error for the tracks which has missing characters for all URL located tracks(error is called ""VLC is unable to open the MRL"").\r\n\r\nVLC is also giving that error in normal way when there are missing characters aswell.\r\n\r\nI think as you said it is better to stick with standards. So, I will leave there a source code comment such as //URL Location is not working for Relative Paths', 'comment_created': datetime.datetime(2022, 5, 13, 7, 36, 6, tzinfo=datetime.timezone.utc), 'commenter': 'fatihemreyildiz', 'type': 'User'}]","[{'commit_sha': '51d8ea12bd2ba4a1580baa0c38b975f65132c7bc', 'committer_username': 'fatihemreyildiz', 'committer_name': 'Emre', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 20, 20, 2, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': '380d672e12edfcc4daac09b4377982e18a725757', 'committer_username': 'fatihemreyildiz', 'committer_name': 'Emre', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 20, 20, 2, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': '378124d600d20ed017a3ca34095d1676291e3cd5', 'committer_username': 'fatihemreyildiz', 'committer_name': 'Emre', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 20, 20, 2, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': '93a786fec6974ee245417951e961205509b7d239', 'committer_username': 'fatihemreyildiz', 'committer_name': 'Emre', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 20, 20, 2, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1d21ca25fa3417238e4c150224e59cdae5193216', 'committer_username': 'fatihemreyildiz', 'committer_name': 'Emre', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 20, 20, 2, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': '214dbbcb1a5fd9494bed9dca1479c822fb876347', 'committer_username': 'fatihemreyildiz', 'committer_name': 'Emre', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 20, 20, 2, 55, tzinfo=datetime.timezone.utc)}]",Emre,67206006,,User,,5,,21,10
949658985,WFindOnWebMenu: Menu for to find track properties in online music databases,"This is a draft PR.

As we mentioned on the Zulip #gsoc stream Web search Box feature topic, I wanted to add a small feature, that can help users to save time. A shortcut to find Artists on different services. For now I tried on SoundCloud.

I am facing with an issue. I couldn't fetch artist name on wtrackmenu. I have tried few things but they didn't work. At last, i tried something and it returns an error, which is signal and slot is not equal. I have looked at it, couldn't find a solution. 

For the future of this feature, there can be one main row called as ""Find on..."" Then many rows could be there. Such as, ""Find the artist on Discogs"", ""Find the track on LastFm"" etc. In my estimation to make it bigger feature there should be something like search related track menu.
",True,4772,https://api.github.com/repos/mixxxdj/mixxx/pulls/4772,https://github.com/mixxxdj/mixxx/pull/4772,closed,266,1,8,35,41,150,6,0,"[{'name': 'controller mappings'}, {'name': 'skins'}, {'name': 'library'}, {'name': 'ui'}, {'name': 'build'}, {'name': 'changelog'}]",2022-05-27 19:08:42+00:00,2022-07-07 21:02:20+00:00,3549218.0,"41 days, 1:53:38","[{'comment_id': 883946893, 'comment_body': 'instead of including the entire header here, can Track be forward-declared?', 'comment_created': datetime.datetime(2022, 5, 27, 20, 2, 21, tzinfo=datetime.timezone.utc), 'commenter': 'ronso0', 'type': 'User'}, {'comment_id': 883994841, 'comment_body': 'I think you can use     \r\n`TrackPointer pTrack = getFirstTrackPointer();`\r\nto obtain the track. \r\n', 'comment_created': datetime.datetime(2022, 5, 27, 21, 42, 3, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 884031111, 'comment_body': 'Yes. I have deleted this line.', 'comment_created': datetime.datetime(2022, 5, 27, 23, 38, 2, tzinfo=datetime.timezone.utc), 'commenter': 'fatihemreyildiz', 'type': 'User'}, {'comment_id': 884032375, 'comment_body': 'This could be empty. Use album artist as fallback?\r\nIf that is also empty, ask the user? Or just open the soundcloud search and let the user type there?\r\n\r\n', 'comment_created': datetime.datetime(2022, 5, 27, 23, 44, 35, tzinfo=datetime.timezone.utc), 'commenter': 'ronso0', 'type': 'User'}, {'comment_id': 884033389, 'comment_body': 'That worked.\r\n\r\nThank you :)', 'comment_created': datetime.datetime(2022, 5, 27, 23, 49, 26, tzinfo=datetime.timezone.utc), 'commenter': 'fatihemreyildiz', 'type': 'User'}, {'comment_id': 884033802, 'comment_body': ""Yeah, album artist and asking the user might be good option. I can implement that, If it's okay.\r\n\r\nRight now it opens SoundCloud with a blank page."", 'comment_created': datetime.datetime(2022, 5, 27, 23, 51, 47, tzinfo=datetime.timezone.utc), 'commenter': 'fatihemreyildiz', 'type': 'User'}, {'comment_id': 884040092, 'comment_body': 'I think we need to % encode the artist name. \r\n\r\nOpening SoundCloud with a blank page sounds good enough for me, to realize that the artist is empty. \r\n\r\nWhat exactly do we want to ask the user? What will be the alternative? We may gray out the menu entry or open the track property dialog to add an artist. \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n', 'comment_created': datetime.datetime(2022, 5, 28, 0, 28, 25, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 884040460, 'comment_body': '> I think we need to % encode the artist name.\r\n\r\nOh I just realized that QUrl is smart enough to do it automatically.', 'comment_created': datetime.datetime(2022, 5, 28, 0, 30, 58, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 884105820, 'comment_body': ""I recommend not to use naive string composition for creating URLs, see `QUrl::setQuery()`.\r\n\r\nPlease also externalize all the business logic into separate classes/files, don't bother `WTrackMenu` with this extra stuff. It is already too big."", 'comment_created': datetime.datetime(2022, 5, 28, 9, 7, 43, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 884113210, 'comment_body': 'Thanks for the feedback, I will take a look at QUrl::setQuery() and work on business logic.', 'comment_created': datetime.datetime(2022, 5, 28, 10, 8, 58, tzinfo=datetime.timezone.utc), 'commenter': 'fatihemreyildiz', 'type': 'User'}, {'comment_id': 884187395, 'comment_body': ""> What exactly do we want to ask the user? What will be the alternative? We may gray out the menu entry or open the track property dialog to add an artist.\r\n\r\nGraying out the menu action is not helpful IMO. Initially I thought of a simple textbox dialog asking for the track artist, apply that to the track, then attempting to open soundcloud again. But that's too cumbersome UX-wise and to program for this first step.\r\n\r\nSince an empty soundcloud query would not solve the missing tag issue we could show a dialog\r\n> This track has no artist or album artist tag.\r\nTry again after filling the tag(s) in the track properties dialog or inline in the tracks table.\r\n[ Open track properties] [ Okay ]\r\n\r\n\r\n\r\n"", 'comment_created': datetime.datetime(2022, 5, 28, 23, 5, 26, tzinfo=datetime.timezone.utc), 'commenter': 'ronso0', 'type': 'User'}, {'comment_id': 884190228, 'comment_body': 'Keep it simple without requiring any additional user input, see the ""Search related Tracks"" feature. If I need to type I could open a browser myself.\r\n\r\nMixxx should not become a launcher for external applications. Opening the file explorer is a notable but useful exception. If a feature can\'t be integrated properly into Mixxx it should not become part of Mixxx. The feature as currently planned is already an edge case IMHO.', 'comment_created': datetime.datetime(2022, 5, 28, 23, 44, 19, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 884237763, 'comment_body': 'I have looked at ""Search Related Tracks"" feature it is so nice. When there is no artist info. It doesn\'t show the find artist row. This feature can be like this too, so no user input needed and also can be extended, such as find the artist, albumartist, track on lastfm discogs or musicbrainz in a single menu such as ""Search on web"".\r\n\r\nOpening the file browser is a must and it is very useful. Launching the web browser can be useful too. I think for some users It can be helpful to find the artists on different services. If they are looking for information on the web a lot about the artist, such as latest releases, albums etc. It can save their time.\r\n', 'comment_created': datetime.datetime(2022, 5, 29, 9, 7, 11, tzinfo=datetime.timezone.utc), 'commenter': 'fatihemreyildiz', 'type': 'User'}, {'comment_id': 895131291, 'comment_body': 'Hey again,\r\n\r\nI was trying to move all the logic into other classes and I was working on `QUrl::setQuery()`. I just have a question, \r\n\r\nI have a function, which takes 2 arguments one is the URL itself and the second one is query (in this case, Artist, Album artist, Album, Track title). My Url is `https://www.last.fm/search/artists?q=` and the artist is `Eminem`. \r\n\r\nWhen I call the method `QUrl::setQuery()`, it works just fine, the Url is created. When the Url is opened I realized the opened Url is `https://www.last.fm/search/artists?Eminem` which opens a page without any results. \'q=\' part is gone. \r\n\r\nShould I pass all the queries with the prefix ""=q"" into my function or should I use another method which fits into key value pattern?\r\n\r\nBecause when I looked into documentation it says about \'setQuery\'.\r\n> This function is useful if you need to pass a query string that does not fit into the key-value pattern', 'comment_created': datetime.datetime(2022, 6, 12, 8, 18, 31, tzinfo=datetime.timezone.utc), 'commenter': 'fatihemreyildiz', 'type': 'User'}, {'comment_id': 895151315, 'comment_body': 'From the Qt doc, For me it seems like you should use [QUrlQuery](https://doc.qt.io/qt-5/qurlquery.html) and then use the `QUrl::setQuery(QUrlQuery)` overload. QUrlQuery:\r\n> The QUrlQuery class provides a way to manipulate a key-value pairs in a URL\'s query. [More...](https://doc.qt.io/qt-5/qurlquery.html#details)\r\n\r\nThe QUrl class does much more than just concatenate strings. When you pass it an a URL with a query and then call `setQuery`, it will overwrite the previous query, which is why `setQuery(""Eminem"")` results in the previous query (`q=` being overwritten). Since you are dealing with key-value pairs here, use `QUrlQuery`.', 'comment_created': datetime.datetime(2022, 6, 12, 10, 38, 6, tzinfo=datetime.timezone.utc), 'commenter': 'Swiftb0y', 'type': 'User'}, {'comment_id': 895152169, 'comment_body': ""Thanks for your feedback. \r\n\r\nNow I realized that I should use both the QUrlQuery and setQuery. For two different things.\r\n\r\nIf pagination is simple and I can directly open the artist-track-album page. I can simply use setQuery. Because there is no key and value pairs. There will be no queries. \r\n\r\nIf we can't open artist-track-album page directly and if we need to do search on the service, I should use QUrlQuery, to have key q= and the value artist-track-album name."", 'comment_created': datetime.datetime(2022, 6, 12, 10, 44, 31, tzinfo=datetime.timezone.utc), 'commenter': 'fatihemreyildiz', 'type': 'User'}, {'comment_id': 897225951, 'comment_body': '```suggestion\r\ninline QString actionPrefixSuffixSeparator(const QString& propertyType, const QString& text) {\r\n```', 'comment_created': datetime.datetime(2022, 6, 14, 19, 4, 26, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 897230299, 'comment_body': 'I think ""inline"" should not be used to try to do better optimization than the compiler. The compiler will probably inline it anyway. Just don\'t care. ', 'comment_created': datetime.datetime(2022, 6, 14, 19, 10, 1, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 897241424, 'comment_body': 'The function should be named like what it does. Something like \r\ncomposeActionText() or such.  ', 'comment_created': datetime.datetime(2022, 6, 14, 19, 24, 35, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 897243258, 'comment_body': 'this creates a new string on every call. Since Mixxx is no library we can do \r\n`QString searchUrlSoundCloudArtist = QStringLiteral(""https://soundcloud.com/search/people?"");`', 'comment_created': datetime.datetime(2022, 6, 14, 19, 27, 2, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 897249461, 'comment_body': '```suggestion\r\nvoid WFindOnMenu::addActionsAlbum(Services serviceTitle, const QString& albumName, QMenu* m_pService) {\r\n```', 'comment_created': datetime.datetime(2022, 6, 14, 19, 34, 57, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 897253337, 'comment_body': 'we use p as prefix for pointers. In this case you can use partented_ptr, to express that it is owned by the Qt Object tree and it must net be deleted explicit. ', 'comment_created': datetime.datetime(2022, 6, 14, 19, 40, 19, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 897254063, 'comment_body': 'openInBrowser?\r\n\r\nThe serviceUrl should not be part of the public API.', 'comment_created': datetime.datetime(2022, 6, 14, 19, 41, 17, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 897254689, 'comment_body': '""create all services""? I don\'t understand what this method is supposed to do.', 'comment_created': datetime.datetime(2022, 6, 14, 19, 42, 13, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 897255132, 'comment_body': 'You probably do not ""create"" any service. Maybe you initialize some internal data structures.\r\n\r\nThe meaning of the `serviceMenu` parameter is unclear for a method with an implicit `this` of type `QMenu`. Is it supposed to be the parent? Please name parameters according to their role.\r\n\r\nWhy is this a member functions instead of a hidden utility functions that builds and returns a `QMenu*`?', 'comment_created': datetime.datetime(2022, 6, 14, 19, 42, 48, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 897258636, 'comment_body': ""What's the difference between those 2 arguments with similar names and identical types? Very error prone."", 'comment_created': datetime.datetime(2022, 6, 14, 19, 47, 40, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 897260752, 'comment_body': 'Each value of this enum denotes a single service, not multiple. The type name is confusing.', 'comment_created': datetime.datetime(2022, 6, 14, 19, 50, 22, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 897261682, 'comment_body': 'The order is swapped compared to the ""Find Similar"" feature. I think I like the ""Find Similar"" order more. ', 'comment_created': datetime.datetime(2022, 6, 14, 19, 51, 43, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 897265015, 'comment_body': 'Please check the naming of parameters:\r\n- The `enum` variants do not denote a ""title"", they only refer to some external service.\r\n- The prefix `m_` is reserved for members\r\n- `QString` is supposed to be passed by const-ref', 'comment_created': datetime.datetime(2022, 6, 14, 19, 55, 6, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 897286429, 'comment_body': 'My Discogs use case is searching for: \r\n`https://www.discogs.com/search/?q=The%20Cure%20-%20Friday%20I%27m%20In%20Love&type=release`\r\nThis gives good Result in this case. \r\n`https://www.discogs.com/search/?type=release&title=Dancing+Queen&artist=ABBA` \r\nFinds only exact matches, which is probably not what we want, but OK in this case.  \r\n\r\nI also like the ""Artist"" only search, to look up track from a particular artist. \r\n\r\nI am not sure about the ""Album"" only and the ""Track"" only search. This reveals similar named albums and tracks. \r\nNot too useful if the album has a common name like ""Greatest Hits""   \r\n\r\nDo we have a real use case for this?\r\n\r\nDo we have other interesting use cases? \r\n\r\n\r\n\r\n', 'comment_created': datetime.datetime(2022, 6, 14, 20, 22, 31, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 897382703, 'comment_body': 'We can have a specific search for discogs, which can have multiple queries. So that will give us better results.', 'comment_created': datetime.datetime(2022, 6, 14, 22, 49, 15, tzinfo=datetime.timezone.utc), 'commenter': 'fatihemreyildiz', 'type': 'User'}, {'comment_id': 897586809, 'comment_body': 'I think the use case question is valid for all lookups:\r\n* For Title only: find remixes \r\n* For Album only: no idea, remove? \r\n* Artist + Track: lookup additional info.\r\n', 'comment_created': datetime.datetime(2022, 6, 15, 6, 35, 41, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 897695305, 'comment_body': 'Should Title only search configured to find remixes? Or should it stay still?\r\n\r\nI think, that would be nice to have just album to look up if there are any other tracks in that album. But I can remove it too.\r\n\r\nArtist + Track lookup would be so nice, we can have exact search and not lost in similar artists and tracks. But I have checked now, only discogs have search with multiple queries. Others accepts just a query which is ""q="", artist and track search is done over different pagination.  ', 'comment_created': datetime.datetime(2022, 6, 15, 8, 34, 4, tzinfo=datetime.timezone.utc), 'commenter': 'fatihemreyildiz', 'type': 'User'}, {'comment_id': 897729109, 'comment_body': '> Should Title only search configured to find remixes? Or should it stay still?\r\n\r\nIs this possible? Currently it reveals all titles with the same name, the original Track is at a random place in the result. \r\n\r\n> I think, that would be nice to have just album to look up if there are any other tracks in that album. \r\n\r\nFor that use case you have to look up the Artist + Album. Else you the desired album might be listed among many by-catch.\r\n\r\n> Artist + Track lookup would be so nice, we can have exact search and not lost in similar artists and tracks. \r\n\r\nI think when we just append Artist + Title, the result will Be good for most services. Check it out. \r\n ', 'comment_created': datetime.datetime(2022, 6, 15, 9, 5, 48, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 897753197, 'comment_body': '> Is this possible? Currently it reveals all titles with the same name, the original Track is at a random place in the result.\r\n\r\nWe can simply add Remix next to the title, most of the time Remix are shown. There can be title + ""Remix"". \r\nFor to look at exact track maybe we should combine it with artist + track.\r\n\r\n>  For that use case you have to look up the Artist + Album. Else you the desired album might be listed among many by-catch.\r\n\r\nSo for that one too we should combine artist + album.\r\n\r\n> I think when we just append Artist + Title, the result will Be good for most services. Check it out.\r\n\r\nBefore that I was trying to search with not popular track titles. I have tried it with Track Title ""I Want You"" (I\'ve read that that\'s the most popular track title) and it is better to have like ""Artist"" + ""Title"". \r\n\r\nSo at the end, there should be no single search with ""Title"" and ""Album"". At-least there should be another property too, in this case it is artist. At the end I should edit the album and title search methods. Right?\r\n', 'comment_created': datetime.datetime(2022, 6, 15, 9, 27, 46, tzinfo=datetime.timezone.utc), 'commenter': 'fatihemreyildiz', 'type': 'User'}, {'comment_id': 897848413, 'comment_body': 'The menu is controlled by signals and should not expose implementation details as public member functions.', 'comment_created': datetime.datetime(2022, 6, 15, 11, 13, 28, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 897849455, 'comment_body': 'As long as this enum is not needed by consumers of the menu make it private or hide it in the .cpp file in an anonymous namespace.', 'comment_created': datetime.datetime(2022, 6, 15, 11, 14, 45, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 897875695, 'comment_body': 'Sounds good. \r\n\r\nThe Remix addition works only sometimes. I think If we just using the title, remixes will be in the result.\r\n\r\nEspecially on SoundCloud it works perfect. ', 'comment_created': datetime.datetime(2022, 6, 15, 11, 41, 39, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 898064798, 'comment_body': 'Since WFindOnMenu is owned by the Q_OBJECT? So something like \r\n`pserviceMenu = new WFindOnMenu(this);`\r\nwould solve this issue? ', 'comment_created': datetime.datetime(2022, 6, 15, 14, 35, 42, tzinfo=datetime.timezone.utc), 'commenter': 'fatihemreyildiz', 'type': 'User'}, {'comment_id': 898137764, 'comment_body': '`auto pServiceMenu = make_parented<QMenu>(this);`\r\n\r\nSince WFindOnMenu is inherited from QObject, it will delete all child QObjects once it is deleted, during the inherited QObject destructor.\r\n\r\nparented_ptr makes sure that this is the case and will be still the case after refactoring. ', 'comment_created': datetime.datetime(2022, 6, 15, 15, 37, 40, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 898777723, 'comment_body': 'I think this function can be moved to the anonymous namespace in the cpp file, because it does not use any members from ""this"" ', 'comment_created': datetime.datetime(2022, 6, 16, 7, 25, 16, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 898783499, 'comment_body': 'I agree, without a comment, it looks like this function created the whole service itself. \r\nHow about createSubmenusForAllWebLookups() or such.  \r\n\r\n\r\nBy the way, in header we use /// comments that are picked up by doxygen and asigned to the following function which is able to automatically create an API decryption along with a class hierarchy. ', 'comment_created': datetime.datetime(2022, 6, 16, 7, 32, 8, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 898785829, 'comment_body': 'maybe webLookupQuerry and porperty, or such. \r\nYou may also consider to use enums to release the menu from implementation details.  ', 'comment_created': datetime.datetime(2022, 6, 16, 7, 35, 10, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 898788817, 'comment_body': 'serviceMenu is already a ""service related submenu"" the name should reveal this. \r\nThis function is also a candidate to be moved into the anonymous namespace. \r\n\r\nMaybe the function can be called ""populateWebLookUpQueries"" ... It depends in which direction you will turn the interface. \r\n', 'comment_created': datetime.datetime(2022, 6, 16, 7, 38, 57, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 899404944, 'comment_body': 'I tried to make the URL private. But since I am using this method in WTrackMenu, this is a bit difficult. Or is it too easy and am I missing something?\r\n\r\nI made private the Url in an another way. I defined a function in anonymous namespace that can return URL\'s according to chosen service, I am calling this function in openInBrowser, to return the urls from anonymous namespace. This time openInBrowser gets 2 arguments, which is the service and the query. But this time I needed to make ""enum Service"" public. So I am not sure which should be public and the other one private, is it okay to make Enum Service public?', 'comment_created': datetime.datetime(2022, 6, 16, 18, 28, 28, tzinfo=datetime.timezone.utc), 'commenter': 'fatihemreyildiz', 'type': 'User'}, {'comment_id': 900280688, 'comment_body': 'Here you should add \r\n`public slots:`\r\n\r\nBecause this function will be connected to a signal.', 'comment_created': datetime.datetime(2022, 6, 17, 15, 54, 7, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 900478634, 'comment_body': 'Thank you. I have added it in my last commit.', 'comment_created': datetime.datetime(2022, 6, 17, 20, 18, 53, tzinfo=datetime.timezone.utc), 'commenter': 'fatihemreyildiz', 'type': 'User'}, {'comment_id': 900530215, 'comment_body': ""Are these supposed to be i18n strings that need to be translated? Then this won't work."", 'comment_created': datetime.datetime(2022, 6, 17, 22, 22, 49, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 900531235, 'comment_body': 'This terminology is confusing, because there actually is a property that is named ""album artist"". If you intend to mean `ArtistAndAlbum` then please be explicit about it.\r\n\r\nIf the enum variants denote a conjunction of one or more individual properties then `TrackSearchProperties` would be a better name.', 'comment_created': datetime.datetime(2022, 6, 17, 22, 25, 52, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 900531941, 'comment_body': 'Why does this need to be a public slot? It is invoked as an ordinary member function.', 'comment_created': datetime.datetime(2022, 6, 17, 22, 28, 10, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 900534696, 'comment_body': '""find on"", ""web lookups"", now we have already 2 different terms for the same thing. The name of the member functions should also not redundantly repeat the purpose of the class.\r\n\r\nImho a name like `populateFromTrackProperties()` would be more suitable here. That this task involves sub menus is an implementation detail that should not be revealed and doesn\'t matter for the caller.', 'comment_created': datetime.datetime(2022, 6, 17, 22, 37, 35, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 900535931, 'comment_body': 'Repeating the type name in lowercase is not a good choice for naming a variable. Even the `Q` prefix is repeated.', 'comment_created': datetime.datetime(2022, 6, 17, 22, 41, 49, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 900536043, 'comment_body': 'What\'s an ""artist title""??', 'comment_created': datetime.datetime(2022, 6, 17, 22, 42, 16, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 900536415, 'comment_body': 'addActionsTrackTitle() that is invoked with a parameter ArtistTitle? Sorry, you lost me.', 'comment_created': datetime.datetime(2022, 6, 17, 22, 43, 31, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 900726497, 'comment_body': 'I think this needs to be translated. In order to make them i18n strings, According to QT Doc: [Writing Source Code for Translation](https://doc.qt.io/qt-5/i18n-source-translation.html) I should return QString instead of QStringLiteral, right?', 'comment_created': datetime.datetime(2022, 6, 18, 8, 18, 12, tzinfo=datetime.timezone.utc), 'commenter': 'fatihemreyildiz', 'type': 'User'}, {'comment_id': 900728368, 'comment_body': 'For ArtistTitle and ArtistAlbum, I wasn\'t sure to use ""and"". Next time I will be more explicit and precise. I will make them ""ArtistAndAlbum"", ""ArtistAndTitle"" \r\n\r\nRight now I am fully aware about the enum naming. If they denote single property, they should be named Singular and if they denote conjunction, they should be named Plural. Thanks for this review! I will make it ""TrackSearchProperties"" as you suggested.', 'comment_created': datetime.datetime(2022, 6, 18, 8, 21, 5, tzinfo=datetime.timezone.utc), 'commenter': 'fatihemreyildiz', 'type': 'User'}, {'comment_id': 900730253, 'comment_body': 'Oh, Okay. I will be more careful about not naming by repeating the type name. Thanks for this review. I will named it as ""urlQuery"".', 'comment_created': datetime.datetime(2022, 6, 18, 8, 23, 48, tzinfo=datetime.timezone.utc), 'commenter': 'fatihemreyildiz', 'type': 'User'}, {'comment_id': 900730416, 'comment_body': 'I will change it as ""primaryArtist"".', 'comment_created': datetime.datetime(2022, 6, 18, 8, 24, tzinfo=datetime.timezone.utc), 'commenter': 'fatihemreyildiz', 'type': 'User'}, {'comment_id': 900730550, 'comment_body': 'Sorry. Same as before, all ArtistTitle\'s are going to be ""primaryArtist"".', 'comment_created': datetime.datetime(2022, 6, 18, 8, 24, 8, tzinfo=datetime.timezone.utc), 'commenter': 'fatihemreyildiz', 'type': 'User'}, {'comment_id': 900744098, 'comment_body': '> Why does this need to be a public slot? It is invoked as an ordinary member function.\r\n\r\nI was calling these functions to connect signals in WTrackMenu.\r\n\r\n> The name of the member functions should also not redundantly repeat the purpose of the class.\r\n\r\nI will be also careful about that too.  \r\n\r\n> Imho a name like populateFromTrackProperties() would be more suitable here. That this task involves sub menus is an implementation detail that should not be revealed and doesn\'t matter for the caller.\r\n\r\nThis function is generating submenus named with the ""services-websites"" and it is called in WTrackMenu. IMHO, I would like to use ""addMenusForWebSearch"". Since it is called in WTrackMenu, that would be easier to understand what this function does.\r\n\r\nThe naming also can be createAllMenusForWebSites or createMenuForServices. I think we should decide it later on what this feature will be called.\r\n\r\nBTW this function ""createAllSubmenusForWebLookups"" is calling another functions right now, they are named ""populateWebLookUpQueries"", this can be named as ""populateFromTrackProperties"" which is more like they are intended to do. \r\n\r\nWhat do you think?', 'comment_created': datetime.datetime(2022, 6, 18, 8, 44, 55, tzinfo=datetime.timezone.utc), 'commenter': 'fatihemreyildiz', 'type': 'User'}, {'comment_id': 900754149, 'comment_body': '```suggestion\r\n        return QObject::tr(""Title"");\r\n```\r\nShould do the trick. ', 'comment_created': datetime.datetime(2022, 6, 18, 9, 0, 47, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 900756507, 'comment_body': 'Why not just artist?\r\n\r\nSometimes I have artists like\r\n""Foo feat. Bar""\r\n\r\nI don\'t think we will be able to extract the primary artist. ', 'comment_created': datetime.datetime(2022, 6, 18, 9, 4, 48, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 900759524, 'comment_body': 'Thank you! :)', 'comment_created': datetime.datetime(2022, 6, 18, 9, 10, 16, tzinfo=datetime.timezone.utc), 'commenter': 'fatihemreyildiz', 'type': 'User'}, {'comment_id': 900761412, 'comment_body': 'Just artist is okay :+1: .\r\n\r\nI thought for later, we might want to add something with ""album artist"" as a second artist lookup. So if this become wanted addition, we can think about adding this primaryArtist and secondaryArtist as album artist.', 'comment_created': datetime.datetime(2022, 6, 18, 9, 13, 27, tzinfo=datetime.timezone.utc), 'commenter': 'fatihemreyildiz', 'type': 'User'}, {'comment_id': 900768363, 'comment_body': 'That route is not easy because the album artist ist often not even populate. It is interesting If it is a featuring Album like Apocalyptica, recording their track with different vocal artists. \r\n', 'comment_created': datetime.datetime(2022, 6, 18, 9, 25, 46, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 900771948, 'comment_body': '> It is interesting If it is a featuring Album like Apocalyptica, recording their track with different vocal artists.\r\n\r\nWould be nice to have then, but should I implement it right now or the later?', 'comment_created': datetime.datetime(2022, 6, 18, 9, 31, 40, tzinfo=datetime.timezone.utc), 'commenter': 'fatihemreyildiz', 'type': 'User'}, {'comment_id': 900797891, 'comment_body': 'I realized that I am repeating the purpose of the class by using ""addMenusForWebSearch"". ""WebSearch"" part is revealing the purpose.\r\n\r\nSince I named the websites as Service. This function creates QMenu named with service names. Should I make it something like ""addSubmenusForServices""?', 'comment_created': datetime.datetime(2022, 6, 18, 10, 18, 4, tzinfo=datetime.timezone.utc), 'commenter': 'fatihemreyildiz', 'type': 'User'}, {'comment_id': 901136687, 'comment_body': 'The escaped & can be a translator trap.\r\nHow about  +?', 'comment_created': datetime.datetime(2022, 6, 19, 17, 30, 8, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 901136890, 'comment_body': 'We can refine Discogs search, by utilize the detailed search.\r\nBut it is fine to postpone it to a follow up PR ', 'comment_created': datetime.datetime(2022, 6, 19, 17, 32, 15, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 901139155, 'comment_body': ""Oh okay, didn't notice that & would be an issue to translating. I will change it as + ."", 'comment_created': datetime.datetime(2022, 6, 19, 17, 56, 5, tzinfo=datetime.timezone.utc), 'commenter': 'fatihemreyildiz', 'type': 'User'}, {'comment_id': 901139340, 'comment_body': 'Exactly, I was waiting for reviews before i dive into detailed Discogs search. Because there are many queries needed for Discogs, which is different than other services.', 'comment_created': datetime.datetime(2022, 6, 19, 17, 57, 37, tzinfo=datetime.timezone.utc), 'commenter': 'fatihemreyildiz', 'type': 'User'}, {'comment_id': 901155227, 'comment_body': 'Why are these strings not constants? Please also obey the naming conventions for constants.', 'comment_created': datetime.datetime(2022, 6, 19, 20, 42, 36, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 901155485, 'comment_body': 'All other URLs start with `search` while this does not.', 'comment_created': datetime.datetime(2022, 6, 19, 20, 45, 5, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 901155536, 'comment_body': 'These extra curly braces are not needed', 'comment_created': datetime.datetime(2022, 6, 19, 20, 45, 34, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 901155654, 'comment_body': 'Pleaese only enclose the case block into curly braces by placing the opening brace after the colon, i.e. `: {`, Imho this improves readability and clarifies their purpose.\r\n\r\nScoping with curly braces is only needed when initializing local variables. Only add them if the compiler complains. Here they seem  to be redundant.', 'comment_created': datetime.datetime(2022, 6, 19, 20, 47, 2, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 901155876, 'comment_body': 'The `break` statement is unreachable and should be removed.', 'comment_created': datetime.datetime(2022, 6, 19, 20, 48, 57, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 901156013, 'comment_body': 'This `break` statement is also unreachable and redundant. Remove all of them if the compiler is able to recognize this fact correctly.', 'comment_created': datetime.datetime(2022, 6, 19, 20, 50, 22, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 901156619, 'comment_body': ""This assignment effectively ignores and discards the function parameter by reinitializing it. It's memory on the stack is simply overwritten and used as an ordinary local variable in function scope. This could not be intended."", 'comment_created': datetime.datetime(2022, 6, 19, 20, 57, 16, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 901168974, 'comment_body': 'Thanks for this feedback. I have missed that somehow but I find out where I was mistaken. It helped me a lot!', 'comment_created': datetime.datetime(2022, 6, 19, 23, 5, 26, tzinfo=datetime.timezone.utc), 'commenter': 'fatihemreyildiz', 'type': 'User'}, {'comment_id': 902812148, 'comment_body': 'Naming conventions are still violated -> `kSearchUrlSoundCloudArtist`', 'comment_created': datetime.datetime(2022, 6, 21, 16, 10, 56, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 902813323, 'comment_body': 'redundant break', 'comment_created': datetime.datetime(2022, 6, 21, 16, 12, 6, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 902814705, 'comment_body': ""This could be memory leak if `m_pServiceMenu` is re-initialized while not being owned by someone else.\r\n\r\nWhy a member variable? I don't see that it is used anywhere?"", 'comment_created': datetime.datetime(2022, 6, 21, 16, 13, 32, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 903050093, 'comment_body': ""Done :+1:. I have changed all constant URL to start with k.\r\n\r\nWhat is k stands for? I am just asking to learn. I have checked the coding guidelines and google for naming conventions of constants couldn't find it."", 'comment_created': datetime.datetime(2022, 6, 21, 20, 41, 59, tzinfo=datetime.timezone.utc), 'commenter': 'fatihemreyildiz', 'type': 'User'}, {'comment_id': 903050474, 'comment_body': 'Deleted.', 'comment_created': datetime.datetime(2022, 6, 21, 20, 42, 21, tzinfo=datetime.timezone.utc), 'commenter': 'fatihemreyildiz', 'type': 'User'}, {'comment_id': 903112629, 'comment_body': 'For the German ""konstant"" in contrast for c prefix which is sometime used for char or Class ', 'comment_created': datetime.datetime(2022, 6, 21, 22, 13, 59, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 903114561, 'comment_body': 'Makes sense. Thank you', 'comment_created': datetime.datetime(2022, 6, 21, 22, 17, 49, tzinfo=datetime.timezone.utc), 'commenter': 'fatihemreyildiz', 'type': 'User'}, {'comment_id': 904648683, 'comment_body': '```suggestion\r\nconst QString kSearchUrlSoundCloudArtist = QStringLiteral(""https://soundcloud.com/search/people?"");\r\n```\r\n(Sorry for keeping nitpicking ...) ', 'comment_created': datetime.datetime(2022, 6, 23, 6, 59, 4, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 904660254, 'comment_body': ""It's totally okay. I have must missed that."", 'comment_created': datetime.datetime(2022, 6, 23, 7, 13, 44, tzinfo=datetime.timezone.utc), 'commenter': 'fatihemreyildiz', 'type': 'User'}, {'comment_id': 904988354, 'comment_body': 'This one is unused now.', 'comment_created': datetime.datetime(2022, 6, 23, 12, 55, 44, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 905600223, 'comment_body': ""Why don't you use switch/case here?"", 'comment_created': datetime.datetime(2022, 6, 23, 23, 56, 15, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 905601282, 'comment_body': 'Result should be validated and failures not ignored silently.', 'comment_created': datetime.datetime(2022, 6, 23, 23, 59, 13, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 905601605, 'comment_body': 'This switch/case seems to be completely redundant and could be removed.', 'comment_created': datetime.datetime(2022, 6, 24, 0, 0, 16, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 905602836, 'comment_body': 'If pTrack is null the menu contents become stale and the menu remains enabled.', 'comment_created': datetime.datetime(2022, 6, 24, 0, 3, 21, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 905604068, 'comment_body': 'This switch/case seems to be completely redundant and could be removed.', 'comment_created': datetime.datetime(2022, 6, 24, 0, 4, 42, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 905604417, 'comment_body': 'This switch/case seems to be completely redundant and could be removed.', 'comment_created': datetime.datetime(2022, 6, 24, 0, 5, 4, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 905990403, 'comment_body': 'since the failure is unexpected, using Verify_or_Drbugassert() should be used.', 'comment_created': datetime.datetime(2022, 6, 24, 11, 54, 19, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 906439751, 'comment_body': 'It is confusing to compute a value that might get discarded by the following if statement. Abort early.', 'comment_created': datetime.datetime(2022, 6, 24, 22, 18, 18, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 906439932, 'comment_body': 'Once again.', 'comment_created': datetime.datetime(2022, 6, 24, 22, 18, 49, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 906440456, 'comment_body': 'However. But at least a warning log message should be logged to allow tracing unexpected failures.', 'comment_created': datetime.datetime(2022, 6, 24, 22, 20, 36, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 906445309, 'comment_body': 'What would be the best use-case in this scenario? is qWarning okay, or should qDebug be used? Should URL be in the log warning?', 'comment_created': datetime.datetime(2022, 6, 24, 22, 36, 21, tzinfo=datetime.timezone.utc), 'commenter': 'fatihemreyildiz', 'type': 'User'}, {'comment_id': 906445655, 'comment_body': 'Solved :+1: ', 'comment_created': datetime.datetime(2022, 6, 24, 22, 37, 25, tzinfo=datetime.timezone.utc), 'commenter': 'fatihemreyildiz', 'type': 'User'}, {'comment_id': 906445790, 'comment_body': 'Solved :+1: ', 'comment_created': datetime.datetime(2022, 6, 24, 22, 37, 53, tzinfo=datetime.timezone.utc), 'commenter': 'fatihemreyildiz', 'type': 'User'}, {'comment_id': 906797026, 'comment_body': 'Oh I see the debug assertion is a already above. I did some test and I was not able to fail openUrl() even with obscure urls. \r\n\r\nSo I guess an error only happens when the users system is miss-configured.\r\nhttps://github.com/qt/qtbase/blob/42e13b7c61693ca95e119106d4f6dbd2bcf2308d/src/gui/util/qdesktopservices.cpp#L195 \r\nAnd many of those cases have already a qWarning when digging deeper. \r\n\r\nConclusion: A normal qWarning() including the URL is sufficient. \r\nMaybe just technical: \r\n""QDesktopServices::openUrl() failed for <URL>""\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n ', 'comment_created': datetime.datetime(2022, 6, 26, 11, 9, 49, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 906802569, 'comment_body': ""I have tried to check URL's in two different ways.\r\nFirst with [QUrl::isValid()](https://doc.qt.io/qt-6/qurl.html#isValid) which returns always false because the propoerties have white spaces and they are not encoded, that is because it is always returning false.\r\nSecond is (Which I used for now) [QUrl::isEmpty()](https://doc.qt.io/qt-6/qurl.html#isEmpty) which returns always true because the URL is not empty at all. But IDK if this one makes wanted validation.\r\n\r\nMy question is should I keep using isEmpty() with existing configuration, can it make validation or should I make encoding with white spaces and use isValid()? \r\n\r\n---\r\n\r\nWhile I was writing my question, I have tried it again, I realised that isValid() is returning true with the existing URL's which everything was fine in the first place. Then I realised that VERIFY_OR_DEBUG_ASSERT() is executed if the condition is false, so I should of use it like VODA(isValid()) instead of VODA(!isValid())\r\n\r\nSo long story short, I guess, It's better to use isValid() with the technical qWarning().  "", 'comment_created': datetime.datetime(2022, 6, 26, 11, 54, 20, tzinfo=datetime.timezone.utc), 'commenter': 'fatihemreyildiz', 'type': 'User'}, {'comment_id': 906803597, 'comment_body': 'All URLs produced by this code must be valid. Anything else would be a programming error, hence a DEBUG_ASSERT without a log is appropriate.\r\n\r\nBut QDesktopServices::openUrl() might fail for other reasons out of our control when launching the application, even if the URL is valid.', 'comment_created': datetime.datetime(2022, 6, 26, 12, 0, 59, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 906804792, 'comment_body': 'I think right now with the last commits URL is validated. \r\n\r\nAnd for the QDesktopServices::openUrl() we can not do anything, right?', 'comment_created': datetime.datetime(2022, 6, 26, 12, 9, 48, tzinfo=datetime.timezone.utc), 'commenter': 'fatihemreyildiz', 'type': 'User'}, {'comment_id': 906827020, 'comment_body': 'Please log a warning message inlcuding the URL as already suggested, wrapped into VERIFY_AND_DEBUG_ASSERT.', 'comment_created': datetime.datetime(2022, 6, 26, 14, 27, 33, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 906827120, 'comment_body': ""The warning message is wrong at this point. QDesktopServices::openUrl() wasn't event invoked."", 'comment_created': datetime.datetime(2022, 6, 26, 14, 28, 15, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 907096348, 'comment_body': 'openUrl() has a URL validation inside. [openUrl() URL validation](https://github.com/qt/qtbase/blob/42e13b7c61693ca95e119106d4f6dbd2bcf2308d/src/gui/util/qdesktopservices.cpp#L210)\r\n\r\nSo my check was duplication of an existing check and redundant. So instead, it is better to check if ""QDesktopServices::openUrl()"" fails itself and warn the developers with ""DEBUG_ASSERT(false)"", so it logged before Mixxx quits the assertion.\r\n\r\nAlso about the first check, I was checking if the URL is empty, this wasn\'t the best validation for Url\'s and also it was redundant too.  \r\n\r\nI will now commit the URL validation again, I hope this time we will have a well working URL validation.', 'comment_created': datetime.datetime(2022, 6, 27, 8, 9, 24, tzinfo=datetime.timezone.utc), 'commenter': 'fatihemreyildiz', 'type': 'User'}, {'comment_id': 907343374, 'comment_body': 'This condition is not sufficient for both actions', 'comment_created': datetime.datetime(2022, 6, 27, 12, 41, 32, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 907453504, 'comment_body': ""How does WTrackMenu know that at least an *artist* and an *album* are property are required? The decision looks arbitrary. The name `checkTrackProperties` also doesn't reveal any information about the purpose of this boolean condition."", 'comment_created': datetime.datetime(2022, 6, 27, 14, 26, 57, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 907456182, 'comment_body': 'If `pTrack = nullptr` then Mixxx has already crashed at this point.', 'comment_created': datetime.datetime(2022, 6, 27, 14, 29, 15, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 907513117, 'comment_body': 'It checks if the track is available for the online lookup, if these properties are missing there is nothing to look for that track, the menus are not displayed. ', 'comment_created': datetime.datetime(2022, 6, 27, 15, 25, 15, tzinfo=datetime.timezone.utc), 'commenter': 'fatihemreyildiz', 'type': 'User'}, {'comment_id': 907609488, 'comment_body': 'The code is not self-explaining and needs to be improved. During the review I am not speaking for myself but for everyone who will read this code in the future.\r\n\r\n-> `static bool WFindOnWebMenu::hasEntriesForTrack(const Track& track);`', 'comment_created': datetime.datetime(2022, 6, 27, 17, 7, 43, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 907633281, 'comment_body': '> The code is not self-explaining and needs to be improved. During the review I am not speaking for myself but for everyone who will read this code in the future.\r\n\r\nThanks for the feedback I totally understand that reviews are for the everyone and the community\r\n \r\n> -> `static bool WFindOnWebMenu::hasEntriesForTrack(const Track& track);`\r\n\r\nWith this suggestion I can easily understand what is this function actually does and how to implement into the WTrackMenu. \r\nThanks!', 'comment_created': datetime.datetime(2022, 6, 27, 17, 35, 24, tzinfo=datetime.timezone.utc), 'commenter': 'fatihemreyildiz', 'type': 'User'}, {'comment_id': 907813933, 'comment_body': ""In C++ it is assumed that a reference can't be null. But this is only the case if the programmer takes care of it. \r\nIn this case the pTrack can be null and the assumption is void. So please ass a check for null to fix that. "", 'comment_created': datetime.datetime(2022, 6, 27, 21, 29, 52, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 908240362, 'comment_body': 'So as far as I understood, before we set enable if the track has entries, we should check the pointer is null or not.  I think we should do that twice because we set enable two times first while creating the menu second while updating the menu right? ', 'comment_created': datetime.datetime(2022, 6, 28, 9, 13, 58, tzinfo=datetime.timezone.utc), 'commenter': 'fatihemreyildiz', 'type': 'User'}, {'comment_id': 908415342, 'comment_body': 'Yes right. But I suggest to give the pointer to WFindOnWebMenu::hasEntriesForTrack and return false in that case. \r\nThis way we have not much code duplication. \r\n', 'comment_created': datetime.datetime(2022, 6, 28, 12, 25, 11, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 908488162, 'comment_body': '@daschuer Passing a shared pointer is conceptually wrong if you do not plan to store it.', 'comment_created': datetime.datetime(2022, 6, 28, 13, 34, 12, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 908554851, 'comment_body': 'Yes, right. It should be the plain pointer.\r\nVia pTrack.get()', 'comment_created': datetime.datetime(2022, 6, 28, 14, 28, 56, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 908597325, 'comment_body': ""No. It should be a const-ref that is also used by all other public methods. Passing a pointer is pointless and wrong. The whole menu would be obsolete without a valid `Track` object. Please don't confuse this!"", 'comment_created': datetime.datetime(2022, 6, 28, 15, 3, 29, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 908630743, 'comment_body': ""It is hard to guess which solution do you have in mind without more details. I don't understand why passing a raw pointer is pointless and wrong and doing the null check inside hasEntriesForTrack()\r\n\r\nMy suggestion was this: \r\n\r\n```suggestion\r\n        m_pFindOnMenu->setEnabled(!WFindOnWebMenu::hasEntriesForTrack(pTrack.get()));\r\n```\r\n\r\nWith a null check inside hasEntriesForTrack() \r\n\r\nDo you wish this solution? \r\n\r\n```suggestion\r\n        const bool hasEntries = pTrack ? WFindOnWebMenu::hasEntriesForTrack(*pTrack) : false; \r\n        m_pFindOnMenu->setEnabled(!hasEntries);\r\n```\r\n\r\nor do you have something else in mind? \r\n\r\n\r\n\r\n"", 'comment_created': datetime.datetime(2022, 6, 28, 15, 33, 19, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 908682325, 'comment_body': 'WFindOnWebMenu must not be bothered with nullptr checks. This would be ridiculous.', 'comment_created': datetime.datetime(2022, 6, 28, 16, 21, 52, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 908683085, 'comment_body': 'It does not need a pointer as an argument nor does it store one.', 'comment_created': datetime.datetime(2022, 6, 28, 16, 22, 27, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 908719938, 'comment_body': 'Since we are talking here about a static function this argument is void. But anyhow, this is a matter of taste finally. You have not yet commented my alternatives. Is the second one OK to you? ', 'comment_created': datetime.datetime(2022, 6, 28, 16, 47, 35, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 908745099, 'comment_body': ""This is not a matter of taste and it doesn't matter if this is a static function or not. It's about scopes and responsibilities. The 2nd alternative is correct, because it keeps the nullptr check where it belongs. This also matches my initial proposal."", 'comment_created': datetime.datetime(2022, 6, 28, 17, 8, 2, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 908749764, 'comment_body': '`const auto enableMenu = pTrack && WFindOnWebMenu::hasEntriesForTrack(*pTrack);`\r\n\r\nThe name `hasEntries` is inappropriate in this context.', 'comment_created': datetime.datetime(2022, 6, 28, 17, 13, 37, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 908751104, 'comment_body': 'You will hopefully notice that the implementation of `hasEntriesForTrack()` is also still wrong.', 'comment_created': datetime.datetime(2022, 6, 28, 17, 15, 9, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 908752224, 'comment_body': 'What do you suggest? hasActions / hasSubmenus ... ', 'comment_created': datetime.datetime(2022, 6, 28, 17, 16, 20, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 908755608, 'comment_body': 'Ah, scratch that, you mean enableMenu instead of hasEntries for the local variable. Ok.', 'comment_created': datetime.datetime(2022, 6, 28, 17, 19, 58, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 908769021, 'comment_body': '> You will hopefully notice that the implementation of hasEntriesForTrack() is also still wrong. \r\n\r\nYes, the whole PR suffers from unconditinal use of auto. This makes the code hard to review. \r\n@fatihemreyildiz, please replace auto everywhere where the actual type is out of sight. \r\nSee: https://github.com/mixxxdj/mixxx/wiki/Coding-Guidelines#auto\r\n', 'comment_created': datetime.datetime(2022, 6, 28, 17, 34, 19, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 908772212, 'comment_body': ""> Yes, the whole PR suffers from unconditinal use of auto. This makes the code hard to review.\r\n\r\nI disagree strongly. This isn't even an issue."", 'comment_created': datetime.datetime(2022, 6, 28, 17, 38, 28, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 908804200, 'comment_body': 'You speak in riddles. Please give us more hints why the function is still wrong. \r\n\r\n> I disagree strongly. \r\n\r\nThat is you personal preference and not part of our style guide. It even lists the following cases as bad:  \r\n```const auto artist = track.getArtist();```\r\nThis is because in a review you cannot be certain what type auto is. \r\n\r\n\r\n', 'comment_created': datetime.datetime(2022, 6, 28, 18, 17, 19, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 908814650, 'comment_body': '@daschuer If all those properties are empty the menu _has entries_. Sure?\r\n\r\nInstead of complaining about the usage of `auto` I recommend to focus on what really matters.\r\n\r\nThe expression `track.getArtist().isEmpty()` also doesn\'t reveal the type of the intermediate result and would be permitted according to our rules. Your ""the type is out of sight"" arguments are invalid.', 'comment_created': datetime.datetime(2022, 6, 28, 18, 30, 37, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 908915666, 'comment_body': 'Good catch.', 'comment_created': datetime.datetime(2022, 6, 28, 20, 27, 13, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 908919333, 'comment_body': '```suggestion\r\n    return !(track.getArtist().isEmpty() && \r\n        track.getAlbum().isEmpty() && \r\n        track.getTitle().isEmpty());\r\n```', 'comment_created': datetime.datetime(2022, 6, 28, 20, 32, 3, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 909651901, 'comment_body': 'this variable name is ambiguous. \r\nIt becomes ""qerry"" down in the stack.  \r\nI suggest to call it queryValue or such. ', 'comment_created': datetime.datetime(2022, 6, 29, 13, 42, 56, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 909653808, 'comment_body': 'This connection is redundant. Instead of emit triggerBrowser form a lamda passed to the action, you can call directly openInBrowser() there.', 'comment_created': datetime.datetime(2022, 6, 29, 13, 44, 27, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 909674119, 'comment_body': 'query is not the whole query, it is only the queryValue, or trackPropertyValue or ...  ', 'comment_created': datetime.datetime(2022, 6, 29, 14, 0, 45, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 909680459, 'comment_body': 'trackSearchProperties, because it can also be two ', 'comment_created': datetime.datetime(2022, 6, 29, 14, 6, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 910978249, 'comment_body': '```suggestion\r\n            const QString& queryValue);\r\n```', 'comment_created': datetime.datetime(2022, 6, 30, 12, 40, 25, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 910979758, 'comment_body': '```suggestion\r\n                openInBrowser(service, trackSearchProperties, queryValue);\r\n```', 'comment_created': datetime.datetime(2022, 6, 30, 12, 42, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 911515541, 'comment_body': ""I don't think these have to / should be translatable."", 'comment_created': datetime.datetime(2022, 6, 30, 23, 41, 22, tzinfo=datetime.timezone.utc), 'commenter': 'Swiftb0y', 'type': 'User'}, {'comment_id': 911517911, 'comment_body': ""this will cause a warning on C++20. You'll want to capture this by copy. \r\n```suggestion\r\n                [*this] {\r\n```"", 'comment_created': datetime.datetime(2022, 6, 30, 23, 48, 36, tzinfo=datetime.timezone.utc), 'commenter': 'Swiftb0y', 'type': 'User'}, {'comment_id': 911706610, 'comment_body': 'Are your sure? QWidget are not copyable and  you always want to ~~pass~~capture the pointer. We use this pattern everywhere else, but never `[*this]`.', 'comment_created': datetime.datetime(2022, 7, 1, 7, 50, 15, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 911887474, 'comment_body': ""What should I do? I'm a bit confused. [this] or [*this]? \r\n\r\nI used [this] because I saw it in other lambdas in codebase."", 'comment_created': datetime.datetime(2022, 7, 1, 11, 42, 27, tzinfo=datetime.timezone.utc), 'commenter': 'fatihemreyildiz', 'type': 'User'}, {'comment_id': 911888180, 'comment_body': 'Thank you for the feedback. \r\n\r\nI will change them to QStringLiteral. ', 'comment_created': datetime.datetime(2022, 7, 1, 11, 43, 34, tzinfo=datetime.timezone.utc), 'commenter': 'fatihemreyildiz', 'type': 'User'}, {'comment_id': 912238568, 'comment_body': 'With [this] the this pointer and it is captured by value, so everything is OK. \r\nThis way all member variables are captured by reference via the this pointer as usual in member functions.\r\n \r\n[*this] will capture the whole object by value. For my understanding changes to the member variables are not visible in other member variables. This is surprising, and and the copy an unnecessary overhead. ', 'comment_created': datetime.datetime(2022, 7, 1, 20, 37, 33, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 912253009, 'comment_body': 'Thanks for the explanation. Every feedback is golden for me.\r\n\r\nThis time I will go with `[this]`', 'comment_created': datetime.datetime(2022, 7, 1, 21, 14, 19, tzinfo=datetime.timezone.utc), 'commenter': 'fatihemreyildiz', 'type': 'User'}, {'comment_id': 912358008, 'comment_body': ""I thought copies of QObjects are just reference-counted internally? But sure we can capture by reference if we can guarantee that `this` won't become dangling. "", 'comment_created': datetime.datetime(2022, 7, 2, 12, 28, 40, tzinfo=datetime.timezone.utc), 'commenter': 'Swiftb0y', 'type': 'User'}]","[{'commit_sha': 'f17093480aa6a87648e0f85327a47f1827346752', 'committer_username': 'fatihemreyildiz', 'committer_name': 'Emre', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 20, 20, 2, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fc7106a43cea1b2f0248f48160854c495fce600e', 'committer_username': 'fatihemreyildiz', 'committer_name': 'Emre', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 20, 20, 2, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6c95cf1ac264ab5e6526c1d4f0884ecba58936be', 'committer_username': 'fatihemreyildiz', 'committer_name': 'Emre', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 20, 20, 2, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': '76153f2e2d4d58073a880d579714c0ceb0770217', 'committer_username': 'fatihemreyildiz', 'committer_name': 'Emre', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 20, 20, 2, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b49203225d48f9924ac23948b9f631529fa9320c', 'committer_username': 'fatihemreyildiz', 'committer_name': 'Emre', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 20, 20, 2, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': '305021ccda898a00c82510bb60a78e30a049f546', 'committer_username': 'fatihemreyildiz', 'committer_name': 'Emre', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 20, 20, 2, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c978e0ef4ebb9cb417dd3d032bdd29239def7e38', 'committer_username': 'fatihemreyildiz', 'committer_name': 'Emre', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 20, 20, 2, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c800b6fbabee8f54fd93c83a83bd68373c3f0c96', 'committer_username': 'fatihemreyildiz', 'committer_name': 'Emre', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 20, 20, 2, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': '24ffe03646a3def0b37db59a55fa2592e24ba557', 'committer_username': 'fatihemreyildiz', 'committer_name': 'Emre', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 20, 20, 2, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a2aaa6c0c3bdb71dd0bb5f440bc8396d44061f03', 'committer_username': 'fatihemreyildiz', 'committer_name': 'Emre', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 20, 20, 2, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5fd95e136d20b8e6f0134f06e960b57f87888107', 'committer_username': 'fatihemreyildiz', 'committer_name': 'Emre', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 20, 20, 2, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6a2d5ffc105863d4aca683cc1d32e18dd3598481', 'committer_username': 'fatihemreyildiz', 'committer_name': 'Emre', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 20, 20, 2, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'df37a7095333cab7340b60c930fb6310d8c15ae7', 'committer_username': 'fatihemreyildiz', 'committer_name': 'Emre', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 20, 20, 2, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ad5cc13a710f5f00c2a96f4f49cc3b5097b866b2', 'committer_username': 'fatihemreyildiz', 'committer_name': 'Emre', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 20, 20, 2, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': '83db586c383654b3f10e7cf3ac145a4e82ed6828', 'committer_username': 'fatihemreyildiz', 'committer_name': 'Emre', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 20, 20, 2, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': '246dfbcb7d600b9f8e8ced980f12028a84f2f30e', 'committer_username': 'fatihemreyildiz', 'committer_name': 'Emre', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 20, 20, 2, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1ef7152c8520736b6307525b796df3d38bcad5c4', 'committer_username': 'fatihemreyildiz', 'committer_name': 'Emre', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 20, 20, 2, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2195417e66a776d334d4041aa0c20ffb7eae57c2', 'committer_username': 'fatihemreyildiz', 'committer_name': 'Emre', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 20, 20, 2, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1410b2bc09d50a34a89425f032de4ea1dfff3f48', 'committer_username': 'fatihemreyildiz', 'committer_name': 'Emre', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 20, 20, 2, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ed9a529524fac5c01b08019b8860f4f8514b3230', 'committer_username': 'fatihemreyildiz', 'committer_name': 'Emre', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 20, 20, 2, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3e54e6b3f4a74f2137d029996c58dcaeb1aef798', 'committer_username': 'fatihemreyildiz', 'committer_name': 'Emre', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 20, 20, 2, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9d088358f524c8fee6c2eebde6ce2ca87337564d', 'committer_username': 'fatihemreyildiz', 'committer_name': 'Emre', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 20, 20, 2, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4d506a5efbc819746dbf88c728bcefc5375bd27e', 'committer_username': 'fatihemreyildiz', 'committer_name': 'Emre', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 20, 20, 2, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cfda73c284811f58c6e766a1667976a6ef915f0e', 'committer_username': 'fatihemreyildiz', 'committer_name': 'Emre', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 20, 20, 2, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': '836d7406aee2311f7ceba34ebc9ac905a2dac542', 'committer_username': 'fatihemreyildiz', 'committer_name': 'Emre', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 20, 20, 2, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': '25eab73e1dee479ada47620a321c059c995ae194', 'committer_username': 'fatihemreyildiz', 'committer_name': 'Emre', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 20, 20, 2, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': '966d7f56f160d4328a630b9e86d24e76fb67660b', 'committer_username': 'fatihemreyildiz', 'committer_name': 'Emre', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 20, 20, 2, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f5e145bb4b664a36e02068f4b56546e5ba6cc424', 'committer_username': 'fatihemreyildiz', 'committer_name': 'Emre', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 20, 20, 2, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5a3864f35d031ed43b3e040a337e65517d754ec8', 'committer_username': 'fatihemreyildiz', 'committer_name': 'Emre', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 20, 20, 2, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bf25e6393e059c9422aab3210da09372e90873ac', 'committer_username': 'fatihemreyildiz', 'committer_name': 'Emre', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 20, 20, 2, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': '57b2840f4dccd18b9ffe61ac19422ca9666d6f76', 'committer_username': 'fatihemreyildiz', 'committer_name': 'Emre', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 20, 20, 2, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f684256f0777b3117f78319063d1849805999547', 'committer_username': 'fatihemreyildiz', 'committer_name': 'Emre', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 20, 20, 2, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': '72fc625a4d6acb508e6eecc2876b952d7ca330f4', 'committer_username': 'fatihemreyildiz', 'committer_name': 'Emre', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 20, 20, 2, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8f309b821ff046deed1d051132ed165940cbaa2f', 'committer_username': 'fatihemreyildiz', 'committer_name': 'Emre', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 20, 20, 2, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8be548a0f5e32fa57d7223c416db3dd8711b20f7', 'committer_username': 'fatihemreyildiz', 'committer_name': 'Emre', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 20, 20, 2, 55, tzinfo=datetime.timezone.utc)}]",Emre,67206006,,User,,5,,21,10
985815421,WFindOnWebMenu: Implementing the factory pattern,"Hey everyone, this PR is the continue of #4772

This feature is called Find On Web. Which is located under the Metadata menu, with a sub menus of different online databases that can help users to look up track properties on online databases. It will populate the fav browser of the user with the given service and query. It basically looks like this:
![FindOn](https://user-images.githubusercontent.com/67206006/177057261-0bea1360-507a-49f4-982d-dc2b39f7f6fe.png)

This feature is aimed for the users who accordingly looks additional info about the tracks. There are few queries with the chosen track. We can lookup for only for the artist, only for the track title (It is good for to look for remixes), track title + artist (make sure we find the correct song), artist + album (To find the other songs in that album). If has no property, the menu is grayed out.

This can be also helpful for later for to find suggested songs on the online services as discussed on the Zulip channel.

Factory Method used for this feature, so for later on another online databases (services) can be added easily by just changing the URL of the searches.",True,4836,https://api.github.com/repos/mixxxdj/mixxx/pulls/4836,https://github.com/mixxxdj/mixxx/pull/4836,closed,339,195,13,1,6,29,2,0,"[{'name': 'ui'}, {'name': 'build'}]",2022-07-03 21:09:54+00:00,2022-07-15 18:07:31+00:00,1025857.0,"11 days, 20:57:37","[{'comment_id': 916271334, 'comment_body': ""We're not writing Java, this could just be a single (namespaced) free function."", 'comment_created': datetime.datetime(2022, 7, 7, 20, 51, 4, tzinfo=datetime.timezone.utc), 'commenter': 'Swiftb0y', 'type': 'User'}, {'comment_id': 917269782, 'comment_body': '```suggestion\r\n```\r\nthis is quite a heavy include and I see no reason to include it here. ', 'comment_created': datetime.datetime(2022, 7, 9, 13, 40, 25, tzinfo=datetime.timezone.utc), 'commenter': 'Swiftb0y', 'type': 'User'}, {'comment_id': 917270366, 'comment_body': 'I find this implementation ""leaky"". The query parameters are service specific. Its only a coincidence that they are shared between all three services. IMO it should `void WFindOnWebMenu::openInBrowser(const QUrl& url)` and each service implementation should compose their own QUrl. \r\nThere is already evidence of this leakage in the implementation of the DiscogsService: This `openInBrowser` overload with the `queryType` argument exists only because Discogs URL-Schema is different from the rest. ', 'comment_created': datetime.datetime(2022, 7, 9, 13, 46, 58, tzinfo=datetime.timezone.utc), 'commenter': 'Swiftb0y', 'type': 'User'}, {'comment_id': 917280839, 'comment_body': 'Thanks for reviewing and giving feedback :+1: \r\n\r\nI have a little question. Should the class and file be removed or moved to WFindOnMenuWeb menu or WTrackMenu then? I think it can be extended with the preferences option in this class and file. Users can choose which services will be populated later on if this option is implemented.', 'comment_created': datetime.datetime(2022, 7, 9, 15, 43, 10, tzinfo=datetime.timezone.utc), 'commenter': 'fatihemreyildiz', 'type': 'User'}, {'comment_id': 917281088, 'comment_body': 'I have included `#include ""track/track.h""` into all of the service menus. I think including them in every service classes is heavy too. I have deleted them, there are no problems after deleting them.\r\n\r\nBut I couldn\'t delete the line 5 on wfindonwebmenu.h, because this time, service classes are giving me an error. Is there any other way to solve this issue?', 'comment_created': datetime.datetime(2022, 7, 9, 15, 46, 25, tzinfo=datetime.timezone.utc), 'commenter': 'fatihemreyildiz', 'type': 'User'}, {'comment_id': 917281552, 'comment_body': ""Oh, yeah. That's right. At first I thought that `void WFindOnWebMenu::openInBrowser` can be overloaded for the services, but at the end it will be not the best case. So it is better for to services compose their URL's.\r\n\r\nThanks for this feedback. I will change it to `void WFindOnWebMenu::openInBrowser(const QUrl& url)` and every service will be composing their own :+1: "", 'comment_created': datetime.datetime(2022, 7, 9, 15, 51, 51, tzinfo=datetime.timezone.utc), 'commenter': 'fatihemreyildiz', 'type': 'User'}, {'comment_id': 917281667, 'comment_body': ""IMO just keep it where it is. The point was just that we don't need unnecessary classes.\r\n\r\n```suggestion\r\nnamespace mixxx {\r\nnamespace library {\r\nvoid createFindOnWebSubmenus(QMenu* pFindOnWebMenu, const Track& track);\r\n}\r\n}\r\n```\r\n\r\nThe problem with that is that it changes some visibility rules in regards to linkage which I don't fully understand. @daschuer what do you think about this proposal?"", 'comment_created': datetime.datetime(2022, 7, 9, 15, 52, 53, tzinfo=datetime.timezone.utc), 'commenter': 'Swiftb0y', 'type': 'User'}, {'comment_id': 917282524, 'comment_body': 'Headers are only included once in each translation unit (each cpp file being compiled). Since you included them in `wfindonwebmenu.h`, which you then included in each service-menu header, they all automatically included `track.h` too. This is called a transitive dependency. Since every header gets only `#include`d once (or rather there is a thing called ""include guards"" (which we have in the form of `#pragma once`) for headers which takes care of that), when you included them in service menu, they actually didn\'t get included because they already were from the `#include wfindonwebmenu.h`. So the solution here is to eliminate the transitive dependency, `#include track/track.h` in the service menus and delete the include in `wfindonwebmenu.h`. ', 'comment_created': datetime.datetime(2022, 7, 9, 16, 2, 5, tzinfo=datetime.timezone.utc), 'commenter': 'Swiftb0y', 'type': 'User'}, {'comment_id': 917287483, 'comment_body': ""Thanks for this detailed explanation. I am just asking for to be make sure before my next commit. The solution might be something that is so simple, I'm sorry to ask something like that.\r\n\r\nI have added `#include track/track.h` in service menus. After I have tried to delete the `#include track/track.h` in `wfindonwebmenu.h`. I am having an error related to Track. \r\n\r\nWhich is `'Track' does not name a type`. I have looked at the code base, I have seen the `track_decl.h` and I tried it, still an error `invalid use of incomplete type` occurs. I have used forward declaration still the same.\r\n\r\nI can try to move this function out of the class, maybe in WTrackMenu, But when I first started to work on it, we made decision about not bothering the WTrackMenu. \r\n\r\nI'm a bit confused. What should I do?"", 'comment_created': datetime.datetime(2022, 7, 9, 16, 58, 5, tzinfo=datetime.timezone.utc), 'commenter': 'fatihemreyildiz', 'type': 'User'}, {'comment_id': 917288175, 'comment_body': ""I can't really help you with the error message unless you include the files and linenumbers they occur on. In general, use `track_decl.h` or forward declaration in the headers, use the full `track.h` in the implementation (`.cpp`) files. "", 'comment_created': datetime.datetime(2022, 7, 9, 17, 5, 4, tzinfo=datetime.timezone.utc), 'commenter': 'Swiftb0y', 'type': 'User'}, {'comment_id': 917288596, 'comment_body': 'Ohh, okay. So instead of including `""track/track.h""` in `wfindonwebmenu.h` i can include `""track/track.h""` in `wfindonwebmenu.cpp` and forward declare in `wfindonwebmenu.h` right?', 'comment_created': datetime.datetime(2022, 7, 9, 17, 10, 18, tzinfo=datetime.timezone.utc), 'commenter': 'fatihemreyildiz', 'type': 'User'}, {'comment_id': 917289175, 'comment_body': ""Exactly (if I'm not mistaken :sweat_smile:), Though since `Track` actually does not occur in `wfindonwebmenu.h` you don't even need to forward declare it in the header. "", 'comment_created': datetime.datetime(2022, 7, 9, 17, 17, 16, tzinfo=datetime.timezone.utc), 'commenter': 'Swiftb0y', 'type': 'User'}, {'comment_id': 917290052, 'comment_body': ""Thanks a lot for the help :octopus:\r\n\r\nI tried to delete the forward declare, it gives error. So It's better to keep it there :sweat_smile: . \r\n\r\nIn a bit I will commit the header includes."", 'comment_created': datetime.datetime(2022, 7, 9, 17, 27, 25, tzinfo=datetime.timezone.utc), 'commenter': 'fatihemreyildiz', 'type': 'User'}, {'comment_id': 917290375, 'comment_body': ""Ah yes, I didn't see there was `static bool hasEntriesForTrack(const Track& track)` which obviously needs that forward-declaration. "", 'comment_created': datetime.datetime(2022, 7, 9, 17, 31, 38, tzinfo=datetime.timezone.utc), 'commenter': 'Swiftb0y', 'type': 'User'}, {'comment_id': 917290688, 'comment_body': 'I have pushed the include changes with a little commit. I hope that little commit is matched with the requested changes.', 'comment_created': datetime.datetime(2022, 7, 9, 17, 35, 16, tzinfo=datetime.timezone.utc), 'commenter': 'fatihemreyildiz', 'type': 'User'}, {'comment_id': 917312674, 'comment_body': 'I have added one composer method in WFindOnWeb in order to prevent duplication, so all the services who has basic pagination can use this method and no need to define new method for similar services. \r\n\r\nI have added a function only to Discogs in the anon namespace for the detailed search. Any other services has different query types can have their own composer functions. \r\n\r\nSorry for the delay, I was trying to figure out Cover Art fetcher meanwhile. I just had a time to look at it.\r\n\r\nIf it is not the best case, I can solve them. For the first requested change, I am waiting for @daschuer feedback, about the single free function.', 'comment_created': datetime.datetime(2022, 7, 9, 21, 59, 4, tzinfo=datetime.timezone.utc), 'commenter': 'fatihemreyildiz', 'type': 'User'}, {'comment_id': 917386457, 'comment_body': 'I don\'t really mind. The current implementations visualizes the factory pattern better. Static classes is the traditional solution for grouping free functions. Since this is what a namespace does, using it for this purpose is more ""correct"".\r\nSo I suggest to follow @Swiftb0y here.  ', 'comment_created': datetime.datetime(2022, 7, 10, 12, 9, 32, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 917391433, 'comment_body': ""Done :+1:, I hope It's correct."", 'comment_created': datetime.datetime(2022, 7, 10, 12, 49, 53, tzinfo=datetime.timezone.utc), 'commenter': 'fatihemreyildiz', 'type': 'User'}, {'comment_id': 917393188, 'comment_body': ""> I have added one composer method in WFindOnWeb in order to prevent duplication, so all the services who has basic pagination can use this method and no need to define new method for similar services.\r\n\r\nEven though DRY is an important principle, sometimes duplicated code makes sense. In this case it does because the actual query is still dependent on each service. Deduplicating them between different services doesn't make sense. See https://schneide.blog/2019/12/27/code-duplication-is-not-always-evil/\r\n\r\nHowever, what does make sense is to deduplicate some of the code in each `WFindOnWebMenu` childclass constructor. You are essentially copy pasting the same `!.isEmpty() {menu->addAction}` shenanigans everywhere. It would be trivial to extract the few variables and then do the rest in the helper function. \r\n\r\n"", 'comment_created': datetime.datetime(2022, 7, 10, 13, 3, 35, tzinfo=datetime.timezone.utc), 'commenter': 'Swiftb0y', 'type': 'User'}, {'comment_id': 917393390, 'comment_body': 'Should be correct as long as it compiles.', 'comment_created': datetime.datetime(2022, 7, 10, 13, 5, 15, tzinfo=datetime.timezone.utc), 'commenter': 'Swiftb0y', 'type': 'User'}, {'comment_id': 917402423, 'comment_body': ""That's fair enough. Every service should have their own composer.\r\n\r\nAlso I will try to get rid of all the `!.isEmpty() {menu->addAction}`'s. \r\n\r\nWhat I roughly think about it. There should be one main function in `wfindonwebmenu` which can create all the actions by taking few parameters, these can be the `service menu` `defaultUrl` `Enumaration of the Track Properties` (I'm back again with these) `defaulturl` as a string. So by calling this function in services, we can create all the actions and get rid of the duplication. "", 'comment_created': datetime.datetime(2022, 7, 10, 14, 14, 29, tzinfo=datetime.timezone.utc), 'commenter': 'fatihemreyildiz', 'type': 'User'}, {'comment_id': 917402543, 'comment_body': 'Yeap, It compiles. I compile few times (just making sure hehe) before every commit :sweat_smile: ', 'comment_created': datetime.datetime(2022, 7, 10, 14, 15, 27, tzinfo=datetime.timezone.utc), 'commenter': 'fatihemreyildiz', 'type': 'User'}, {'comment_id': 917404497, 'comment_body': 'I don\'t think shifting everything into the base-class is correct either. At that point we\'re back where we started. Start simple. By far the most common piece of code something like this:\r\n```cpp\r\npDiscogsMenu->addAction(composeActionText(tr(""Album""), album),\r\n  this,\r\n  [this, discogsUrlAlbum] {\r\n      openInBrowser(discogsUrlAlbum);\r\n  });\r\n```\r\nCan  you reduce this to a single function call that still makes sense?', 'comment_created': datetime.datetime(2022, 7, 10, 14, 31, 20, tzinfo=datetime.timezone.utc), 'commenter': 'Swiftb0y', 'type': 'User'}, {'comment_id': 917405479, 'comment_body': ""Yeap, I think I can reduce this simply by\r\n\r\n`addActionForService(pDiscogsMenu, actionText, serviceUrl)`\r\n\r\n\r\nI have reduced all the block with this but as you said that wouldn't be 100% correct. I could also check if the track property is empty or not. The method was like this;\r\n\r\n`createAction(pDiscogsMenu, track, kSearchUrl, WFindOnWebMenu::TrackSearchProperties::ArtistAndAlbum);`"", 'comment_created': datetime.datetime(2022, 7, 10, 14, 39, 52, tzinfo=datetime.timezone.utc), 'commenter': 'fatihemreyildiz', 'type': 'User'}, {'comment_id': 917406824, 'comment_body': 'IMO the first one is sufficient. The second one is ""leaky"" again because then the capabilities of the child-classes are limited by the parent class.', 'comment_created': datetime.datetime(2022, 7, 10, 14, 50, 52, tzinfo=datetime.timezone.utc), 'commenter': 'Swiftb0y', 'type': 'User'}, {'comment_id': 917408886, 'comment_body': 'Oh okay, thanks for this feedback. I will only make this addActions in the parent class. But this time, I also need to check if the track property is empty in the sub menu class, would it be correct?', 'comment_created': datetime.datetime(2022, 7, 10, 15, 8, 34, tzinfo=datetime.timezone.utc), 'commenter': 'fatihemreyildiz', 'type': 'User'}, {'comment_id': 917409135, 'comment_body': 'Yes.', 'comment_created': datetime.datetime(2022, 7, 10, 15, 10, 23, tzinfo=datetime.timezone.utc), 'commenter': 'Swiftb0y', 'type': 'User'}, {'comment_id': 917409267, 'comment_body': 'We can further iterate once you implemented that.', 'comment_created': datetime.datetime(2022, 7, 10, 15, 10, 59, tzinfo=datetime.timezone.utc), 'commenter': 'Swiftb0y', 'type': 'User'}, {'comment_id': 917440078, 'comment_body': 'Sorry for the delay, I was working on the Cover Art Fetcher again. \r\n\r\nNow I have pushed 2 commits. First I have added the method for creating the actions, second commit is the composer for each service. \r\n\r\nI gave a break with the cover art so I will be focusing on this PR after that.', 'comment_created': datetime.datetime(2022, 7, 10, 19, 58, 58, tzinfo=datetime.timezone.utc), 'commenter': 'fatihemreyildiz', 'type': 'User'}]","[{'commit_sha': 'a932ff55a3f751f017214549566f11598060d615', 'committer_username': 'fatihemreyildiz', 'committer_name': 'Emre', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 20, 20, 2, 55, tzinfo=datetime.timezone.utc)}]",Emre,67206006,,User,,5,,21,10
993429228,Cover Art Fetcher,"Hey everyone!

My goal is to get cover arts of the tracks by using `coverartarchive` on the ""Import Metadata from Musicbrainz"" menu, aka Tag Fetcher Menu. I am working on this feature right now. This is the initial PR to get your ideas-thoughts and of course feedback about the GUI of this feature. More information about this PR can be found on our Zulip chat https://mixxx.zulipchat.com/#narrow/stream/109215-gsoc/topic/cover.20art.20lookup

This is the first interaction for now. I have displayed the existing cover art of the track on the Tag Fetcher Menu. The Tag Fetcher Menu seems like this. ![Tag Fetcher Menu](https://user-images.githubusercontent.com/67206006/178327695-4e9e0fb1-dc8c-4fc0-bc48-2672028f86fd.png)

Right now I can send the metadata of the Suggested track to coverartarchive and get a response via a button. It is better to first decide what should GUI look like? Then we can implement that (or something similar) later on. 

For to decide about GUI, we should decide how this feature can be used?
* I think there should be a button called ""look for cover art"" which triggers the request when pressed, and can get cover art of the selected `Suggested Tags`.
* Should we have separate buttons for the metadata and cover art? Can cover-art be updated separate then the metadata or apply button should update both the cover art and the metadata? 

Do you have any other use-case comes to your mind? These few buttons would make this menu crowded and complicated? What do you think generally? 

(This feature also needs your feedback about technical stuff, the first thing is how to store the cover-arts, cover-arts has thumbnails should we use them, if the cover art updated, should we save it as a file or embed in the file, should user choose between these storing options and so on...)",True,4851,https://api.github.com/repos/mixxxdj/mixxx/pulls/4851,https://github.com/mixxxdj/mixxx/pull/4851,closed,1268,64,24,24,46,66,4,0,"[{'name': 'library'}, {'name': 'ui'}, {'name': 'changelog'}, {'name': 'coverart'}]",2022-07-11 18:37:32+00:00,2023-02-07 22:50:50+00:00,18245598.0,"211 days, 4:13:18","[{'comment_id': 920797816, 'comment_body': 'Since this is still a widget, I had expect to find this is the widget folder. \r\nWe two names, one for the base without edit menu and one for the parent class with edit menu. \r\n\r\nHow about \r\nWCoverArtLabelBase and WCoverArtLabelWithEditMenu\r\n\r\nOr \r\n\r\nWCoverArtDisplay and WCoverArtDisplayEditable \r\n\r\n\r\nor such\r\n\r\n@ronso0 what do yo think ', 'comment_created': datetime.datetime(2022, 7, 14, 6, 32, 20, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 920802076, 'comment_body': 'Is there a use case to use a cover form a different release than the actual release of the metadata? \r\nIf yes, that should be probably rare. So I think I would conciser to just go with a single ""Apply"" button that applies all metadata at once. ', 'comment_created': datetime.datetime(2022, 7, 14, 6, 37, 18, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 921125196, 'comment_body': ""I think we should allow disabling the menu on demand by adding `bool enableMenu` (defaults to `true`) argument to the constructor [src/widget/wcoverart.cpp](https://github.com/mixxxdj/mixxx/blob/8a40dd99ef09728b2dea18a9fe563116461074d3/src/widget/wcoverart.cpp#L21-L24) and make some parts of that class conditional via `if (m_pMenu)` or `if (m_menuEnabled)`, instead of duplicating the entire class.\r\n(if the menu is the only difference, I didn't take a closer look)\r\n\r\nThough, as I said this is not high prio IMO and can be adressed later on."", 'comment_created': datetime.datetime(2022, 7, 14, 12, 57, 54, tzinfo=datetime.timezone.utc), 'commenter': 'ronso0', 'type': 'User'}, {'comment_id': 921273330, 'comment_body': 'There are some use cases which metadata can be applied from results 1 and cover art applied from release 2. But as you mentioned, this is pretty rare. I was thinking about the same, just a single button would look better :)', 'comment_created': datetime.datetime(2022, 7, 14, 15, 14, 26, tzinfo=datetime.timezone.utc), 'commenter': 'fatihemreyildiz', 'type': 'User'}, {'comment_id': 921277634, 'comment_body': 'Actually, I didn\'t want to duplicate the whole class, I just took some part of it and made it base class, the other part (wcoverartmenu) is in the derived class. \r\n\r\nFor now only the menu is the difference, but I can not be sure about the future steps. Maybe later, just for ""Fetched Cover Art"" there could be a menu such as ""apply this cover"" or ""find the album"" etc.\r\n\r\nSo about making a `bool enableMenu` or another base class which can derive different classes for different menus. What would be the final version of these? Or should we decide it at the last step for now, it can be like this, or it can be like in the first place. \r\n\r\nWhat do you think generally?\r\n \r\n> Though, as I said this is not high prio IMO and can be adressed later on.\r\n\r\n:+1: ', 'comment_created': datetime.datetime(2022, 7, 14, 15, 18, 24, tzinfo=datetime.timezone.utc), 'commenter': 'fatihemreyildiz', 'type': 'User'}, {'comment_id': 967726888, 'comment_body': 'Why is disconnecting and reconnect required?  ', 'comment_created': datetime.datetime(2022, 9, 11, 1, 13, 55, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 967727000, 'comment_body': 'Can we get around this?', 'comment_created': datetime.datetime(2022, 9, 11, 1, 14, 42, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 967728157, 'comment_body': 'Can we avoid this extra signal? Is Webtask::onNetworkError() sufficient? ', 'comment_created': datetime.datetime(2022, 9, 11, 1, 21, 14, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 967790169, 'comment_body': 'As far as I remember, onNetworkError was related with the TagFetcher, so when this signal is emitted, Tag Fetcher Dialog refreshes itself, so the results from MusicBrainz were lost. I am not sure if this can be handled from slot of onNetworkError.', 'comment_created': datetime.datetime(2022, 9, 11, 9, 4, 23, tzinfo=datetime.timezone.utc), 'commenter': 'fatihemreyildiz', 'type': 'User'}, {'comment_id': 967790309, 'comment_body': 'If it is okay, I will mark these two conversation as resolved since we continue them on #4871 .', 'comment_created': datetime.datetime(2022, 9, 11, 9, 5, 22, tzinfo=datetime.timezone.utc), 'commenter': 'fatihemreyildiz', 'type': 'User'}, {'comment_id': 967800846, 'comment_body': 'Yes, dies it make sence to rebase this on #4871? ', 'comment_created': datetime.datetime(2022, 9, 11, 10, 25, 28, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 967801028, 'comment_body': 'Yeah, that would be nice. should I wait for it to be in final situation?', 'comment_created': datetime.datetime(2022, 9, 11, 10, 26, 56, tzinfo=datetime.timezone.utc), 'commenter': 'fatihemreyildiz', 'type': 'User'}, {'comment_id': 1010168525, 'comment_body': 'The function name does not reveal this special case. ', 'comment_created': datetime.datetime(2022, 11, 1, 7, 35, 50, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 1010170041, 'comment_body': 'This line needsto be translatable with tr() and can be joint with the call below.', 'comment_created': datetime.datetime(2022, 11, 1, 7, 38, 36, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 1010170946, 'comment_body': 'Is this a general issue of this class or only in the new code? In the later case it would be nice to have that fixed. ', 'comment_created': datetime.datetime(2022, 11, 1, 7, 40, 13, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 1010171833, 'comment_body': 'I think it should be possible to move that to the *.UI file ', 'comment_created': datetime.datetime(2022, 11, 1, 7, 41, 40, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 1010172691, 'comment_body': 'The two lines can be joint. ', 'comment_created': datetime.datetime(2022, 11, 1, 7, 43, 14, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 1010177393, 'comment_body': 'The lines can be joined', 'comment_created': datetime.datetime(2022, 11, 1, 7, 51, 14, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 1010178133, 'comment_body': 'Join the two lines ', 'comment_created': datetime.datetime(2022, 11, 1, 7, 52, 32, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 1010611623, 'comment_body': '```suggestion\r\n    loadingProgressBar->setFormat(tr(""Looking for cover art""));\r\n    loadingProgressBar->setValue(kPercentForCoverArtLinksTask);\r\n    loadingProgressBar->setVisible(true);\r\n```', 'comment_created': datetime.datetime(2022, 11, 1, 16, 5, 29, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 1010613252, 'comment_body': 'unused?', 'comment_created': datetime.datetime(2022, 11, 1, 16, 7, 3, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 1010617744, 'comment_body': 'This can be joint with the above. ', 'comment_created': datetime.datetime(2022, 11, 1, 16, 10, 41, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 1010637362, 'comment_body': 'A check for 2 is missing ', 'comment_created': datetime.datetime(2022, 11, 1, 16, 28, 23, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 1010637633, 'comment_body': 'A check for 1 is missing ', 'comment_created': datetime.datetime(2022, 11, 1, 16, 28, 40, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 1010638071, 'comment_body': 'an isEmpty() check is missing ', 'comment_created': datetime.datetime(2022, 11, 1, 16, 29, 7, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 1010638361, 'comment_body': 'isEmpty() check is missing', 'comment_created': datetime.datetime(2022, 11, 1, 16, 29, 25, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 1010640593, 'comment_body': '```suggestion\r\n    statusMessage->setText(tr(""Cover art is ready to be applied""));\r\n    statusMessage->setVisible(true);\r\n```', 'comment_created': datetime.datetime(2022, 11, 1, 16, 31, 53, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 1010641890, 'comment_body': '```suggestion\r\n    QString coverArtMessage = tr(""Cover art found, receiving image."");\r\n```', 'comment_created': datetime.datetime(2022, 11, 1, 16, 33, 7, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 1010642962, 'comment_body': '```suggestion\r\n    QString message = tr(""Cover Art is not available for selected row"");\r\n```\r\nor metadata, or release ', 'comment_created': datetime.datetime(2022, 11, 1, 16, 34, 13, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 1010645228, 'comment_body': '```suggestion\r\n    enum class CoverArtFetcherQuality {\r\n```', 'comment_created': datetime.datetime(2022, 11, 1, 16, 36, 33, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 1020887842, 'comment_body': 'This issue only exists in the new code. Whenever the highest cover art is applied (now the cover art is not fetched but existed), nothing wrong with the scaling.\r\n\r\nSuch as: \r\n<img width=""150"" alt=""FetchedCoverArt"" src=""https://user-images.githubusercontent.com/67206006/201518595-f0c03cd2-53f4-4abf-9a6e-8860fd80ca4c.png""> <img width=""150"" alt=""AfterApplied"" src=""https://user-images.githubusercontent.com/67206006/201518597-3a8c66a3-a2db-4672-80a3-08207ed295b0.png"">\r\n', 'comment_created': datetime.datetime(2022, 11, 13, 11, 41, 36, tzinfo=datetime.timezone.utc), 'commenter': 'fatihemreyildiz', 'type': 'User'}, {'comment_id': 1020889116, 'comment_body': ""Normally all the responses at least have 2 cover art's URL, I haven't seen any response with one cover art URL.\r\n\r\nSo for all of the checks above would it be better to check if the allUrls is not empty and then the if block would do the rest? Will it work? What do you think?"", 'comment_created': datetime.datetime(2022, 11, 13, 11, 50, 6, tzinfo=datetime.timezone.utc), 'commenter': 'fatihemreyildiz', 'type': 'User'}, {'comment_id': 1020922755, 'comment_body': 'Only the insertWidget left now, the rest in the .ui file.', 'comment_created': datetime.datetime(2022, 11, 13, 15, 38, 1, tzinfo=datetime.timezone.utc), 'commenter': 'fatihemreyildiz', 'type': 'User'}, {'comment_id': 1020962662, 'comment_body': 'Both of the screen shot belongs the one fetched cover art but in different states, first screen shot when pressed on the fetched cover art (if the highest option is selected), it is not populated correctly, second one after it is applied (for the highest option), it populates just fine. ', 'comment_created': datetime.datetime(2022, 11, 13, 20, 55, 49, tzinfo=datetime.timezone.utc), 'commenter': 'fatihemreyildiz', 'type': 'User'}, {'comment_id': 1027144568, 'comment_body': ""Loading the data to `m_pixmap` solves the zoom issues I described.\r\nFor the actual resizing (adjusting to screen size) we need a lot of stuff from `DlgCoverArtFullSize::slotCoverFound` below, though this is not a stored cover, obviously we can't call that with all required arguments. Code duplication is pointless so maybe split out the resizing into a new function?"", 'comment_created': datetime.datetime(2022, 11, 19, 21, 18, 27, tzinfo=datetime.timezone.utc), 'commenter': 'ronso0', 'type': 'User'}, {'comment_id': 1027163470, 'comment_body': 'Since these radio buttons are in the same widget ""groupBox_cover_art_fetcher"" you only need to check one to disable the others. In slotUpdate() it\'s done correctly.\r\nThis also applies to the other radio buttons (Double-click action) where you copied this behavior from.\r\n\r\n> Radio buttons are autoExclusive by default. If auto-exclusive is enabled, radio buttons that belong to the same parent widget behave as if they were part of the same exclusive button group. \r\nhttps://doc.qt.io/qt-6/qradiobutton.html#details\r\n\r\nFeel free to pick 3f66b569a3', 'comment_created': datetime.datetime(2022, 11, 20, 0, 23, 48, tzinfo=datetime.timezone.utc), 'commenter': 'ronso0', 'type': 'User'}, {'comment_id': 1027163861, 'comment_body': '""Tag Fetcher: Preferred Cover Art Resolution""?\r\nor\r\n""Tag Fetcher: Preferred Cover Art Size""?\r\nthe the radio buttons could be labeled `XXL` / `XL` / `M` / `S` (is this more clear in terms of internationaization?) and would fit into one row.\r\nJust an idea..', 'comment_created': datetime.datetime(2022, 11, 20, 0, 29, 22, tzinfo=datetime.timezone.utc), 'commenter': 'ronso0', 'type': 'User'}, {'comment_id': 1027163919, 'comment_body': 'Those labels should go above the radio buttons IMO', 'comment_created': datetime.datetime(2022, 11, 20, 0, 30, 28, tzinfo=datetime.timezone.utc), 'commenter': 'ronso0', 'type': 'User'}, {'comment_id': 1027163984, 'comment_body': '""Note: \'Highest\' can fetch very large cover arts.', 'comment_created': datetime.datetime(2022, 11, 20, 0, 31, 14, tzinfo=datetime.timezone.utc), 'commenter': 'ronso0', 'type': 'User'}, {'comment_id': 1027355464, 'comment_body': '> the the radio buttons could be labeled XXL / XL / M / S\r\n\r\ndismissed, see my comment https://github.com/mixxxdj/mixxx/pull/4851#issuecomment-1321244868', 'comment_created': datetime.datetime(2022, 11, 20, 21, 21, 51, tzinfo=datetime.timezone.utc), 'commenter': 'ronso0', 'type': 'User'}, {'comment_id': 1027370698, 'comment_body': ""Why is this a separate method?\r\nIIUC it's not called from anywhere else so it can be part of `onFinished` above, no?"", 'comment_created': datetime.datetime(2022, 11, 20, 23, 10, 2, tzinfo=datetime.timezone.utc), 'commenter': 'ronso0', 'type': 'User'}, {'comment_id': 1028556923, 'comment_body': 'why jpeg? can we be sure about that?\r\n\r\nbesides, how about\r\n```suggestion\r\n        QString coverArtCopyFilePath =\r\n                trackFileInfo.canonicalPath() + trackFileInfo.baseName() + "".jpeg"";\r\n```\r\nIdk if that\'s faster but it\'s more readable IMO.', 'comment_created': datetime.datetime(2022, 11, 21, 22, 5, 12, tzinfo=datetime.timezone.utc), 'commenter': 'ronso0', 'type': 'User'}, {'comment_id': 1028633095, 'comment_body': ""Sorry I've missed that review.\r\n\r\nSo this is separate method because AFAIK it is on that method it checks if the signal is connected to Tagfetcher just in case of any missing connections. Correct me please If I am wrong. On other tasks such as [acoustidlookuptask.cpp](https://github.com/mixxxdj/mixxx/blob/8affbbb2c5e429b9aa8e6ea7410b65c8a50e46b1/src/musicbrainz/web/acoustidlookuptask.cpp#L213) and [musicbrainzrecordingtask.cpp](https://github.com/mixxxdj/mixxx/blob/8affbbb2c5e429b9aa8e6ea7410b65c8a50e46b1/src/musicbrainz/web/musicbrainzrecordingstask.cpp#L199). I just went with the flow. \r\n\r\nThere were two missing methods in image task. First missing method was for succeeded. It was okay I guess. But the failed signal was missing (IDK If we needed it at all, because all the failings are handled in Links task, if there were no links image task was not starting to work, if there are links there was no failing in image task), now it is added with the method 👍 "", 'comment_created': datetime.datetime(2022, 11, 22, 0, 22, 55, tzinfo=datetime.timezone.utc), 'commenter': 'fatihemreyildiz', 'type': 'User'}, {'comment_id': 1029025879, 'comment_body': ""> On other tasks such as [acoustidlookuptask.cpp](https://github.com/mixxxdj/mixxx/blob/8affbbb2c5e429b9aa8e6ea7410b65c8a50e46b1/src/musicbrainz/web/acoustidlookuptask.cpp#L213) and [musicbrainzrecordingtask.cpp](https://github.com/mixxxdj/mixxx/blob/8affbbb2c5e429b9aa8e6ea7410b65c8a50e46b1/src/musicbrainz/web/musicbrainzrecordingstask.cpp#L199). I just went with the flow.\r\n\r\nOkay then. In musicbrainzrecordingstask the emitFailed methode is actually needed more than once, but not here.\r\n[YAGNI](https://en.wikipedia.org/wiki/You_aren%27t_gonna_need_it)\r\nAnyway, I don't care enough to insist on merging this method here."", 'comment_created': datetime.datetime(2022, 11, 22, 8, 44, 19, tzinfo=datetime.timezone.utc), 'commenter': 'ronso0', 'type': 'User'}, {'comment_id': 1030594840, 'comment_body': 'Thank you for the feedback @ronso0 \r\n\r\n> why jpeg? can we be sure about that?\r\n\r\nWhen I first implement this i used ""jpg"" because all of the responses were ""jpg"" on the links, that worked fine. After implementation of cover art copy worker, there was an error because the actual file extension was ""jpeg"" and on the name it was ""jpg"".  So I changed to jpeg.\r\n\r\n> Idk if that\'s faster but it\'s more readable IMO.\r\n\r\nThat looks way better obviously. But with this change when we download the cover art there is one slash ""/"" is missing and that will download the cover art in wrong path. \r\n\r\nIn my case the file paths are:\r\nOld file path = ""/home/username/Desktop/music/supertrouper.jpeg""\r\nNew file path =  ""/home/username/Desktop/musicsupertrouper.jpeg""\r\n\r\nWhen I implement it at first time, I wanted to use something easy to read in terms of file path, such as (canonicalpath() + \'/\' + trackBaseName + "".jpeg"") but then I realized that might not work for windows since the file paths are separated with \'\\\', I\'m not sure about other operating systems.\r\n\r\nSo because of the various file path formats, I just deleted the extension of the track and added jpeg. I couldn\'t find a better way to compose the cover art file path, is there a better way to do this?', 'comment_created': datetime.datetime(2022, 11, 23, 15, 38, 54, tzinfo=datetime.timezone.utc), 'commenter': 'fatihemreyildiz', 'type': 'User'}, {'comment_id': 1030599777, 'comment_body': ""I couldn't fully understand, sorry. \r\n\r\nShould we remove the methods? If yes, In other tasks some of the methods are also used once. So should we also remove them too?\r\n\r\nThanks for sharing the YAGNI principle by the way."", 'comment_created': datetime.datetime(2022, 11, 23, 15, 42, 58, tzinfo=datetime.timezone.utc), 'commenter': 'fatihemreyildiz', 'type': 'User'}, {'comment_id': 1030903938, 'comment_body': 'Oh sorry, I didn\'t notice the missing dir separator.\r\n\r\nAnyway, adding the suffix manually might not even be required. Please correct me if I\'m wrong:\r\nThat you saw only `jpg` until now and no official info (I found) that musicbrainz only stores jpg... means we could get other formats and run into a format mismatch.\r\nAnd then [`ImageFileData::saveFile`](https://github.com/mixxxdj/mixxx/blob/9965d55f6e00cd1982f78cf09ac6196887869487/src/util/imagefiledata.cpp#L52) would throw an error but use the potentially wrong suffix anyway?\r\nThat\'s probably\r\n> When I first implement this i used ""jpg"" because all of the responses were ""jpg"" on the links, that worked fine. After implementation of cover art copy worker, there was an error because the actual file extension was ""jpeg"" and on the name it was ""jpg"".\r\n\r\nSo, why specify the format at all when `ImageFileData` can figure out the correct extension from the fetched bytes array https://github.com/mixxxdj/mixxx/blob/9965d55f6e00cd1982f78cf09ac6196887869487/src/util/imagefiledata.cpp#L12-L16 \r\nDid I overlook something?\r\n\r\nBtw [m_oldCoverArtFilePath](https://github.com/mixxxdj/mixxx/blob/9965d55f6e00cd1982f78cf09ac6196887869487/src/library/export/coverartcopyworker.h#L27) should actually be m_**new**CoverArtFilePath, since that\'s the file that is written, no? ', 'comment_created': datetime.datetime(2022, 11, 23, 22, 9, 10, tzinfo=datetime.timezone.utc), 'commenter': 'ronso0', 'type': 'User'}, {'comment_id': 1030907299, 'comment_body': 'You may add here a comment with a reference to the JSON schema. ', 'comment_created': datetime.datetime(2022, 11, 23, 22, 15, 53, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 1030910710, 'comment_body': '```suggestion\r\n        const auto smallThumbnailUrl = thumbnails.value(QLatin1String(""250"")).toString();\r\n```', 'comment_created': datetime.datetime(2022, 11, 23, 22, 23, 5, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 1030910898, 'comment_body': '```suggestion\r\n        const auto largeThumbnailUrl = thumbnails.value(QLatin1String(""500"")).toString();\r\n```', 'comment_created': datetime.datetime(2022, 11, 23, 22, 23, 31, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 1030915931, 'comment_body': 'It is up to you to either copy the function content to CoverArtArchiveLinksTask::onFinished or not. \r\nFor me it is fine to keep it like that for symmetry with emitFailed()', 'comment_created': datetime.datetime(2022, 11, 23, 22, 33, 51, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 1030922288, 'comment_body': 'Currently 500 px is never fetched. \r\n\r\nThe whole block can be simplified as:\r\n```\r\n  \tif (allUrls.size() > static_cast<int>(fetcherQuality)) {\r\n  \t\tgetCoverArt(allUrls.at(static_cast<int>(fetcherQuality)));\r\n  \t} else {\r\n  \t\tgetCoverArt(allUrls.last());\r\n  \t}\r\n```', 'comment_created': datetime.datetime(2022, 11, 23, 22, 47, 38, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 1031210206, 'comment_body': 'I will simply add a link to a reference (A release with the most cover arts) instead of the whole JSON, that will look a bit better in shape, what do you think?', 'comment_created': datetime.datetime(2022, 11, 24, 8, 56, 27, tzinfo=datetime.timezone.utc), 'commenter': 'fatihemreyildiz', 'type': 'User'}, {'comment_id': 1031212100, 'comment_body': 'This might fail and hit the assertions for the last tag in Abba - Super Trouper. \r\n\r\nThe link of the release is: https://coverartarchive.org/release/5240094f-9d79-44fd-9985-77c7287bcc16\r\n\r\nAs far as I tested, I\'ve only found this release as a different response than the others. Maybe there are others that might don\'t have small-large and have 250-500, I\'m not sure.\r\n\r\nShould we cover both ""250"" and ""small"" if small doesn\'t exists then try 250 or vice versa?', 'comment_created': datetime.datetime(2022, 11, 24, 8, 58, 13, tzinfo=datetime.timezone.utc), 'commenter': 'fatihemreyildiz', 'type': 'User'}, {'comment_id': 1031213107, 'comment_body': 'I will keep it like this for the symmetry 👍 \r\n\r\nThank you.', 'comment_created': datetime.datetime(2022, 11, 24, 8, 59, 11, tzinfo=datetime.timezone.utc), 'commenter': 'fatihemreyildiz', 'type': 'User'}, {'comment_id': 1031213559, 'comment_body': 'This is way better block, thank you!', 'comment_created': datetime.datetime(2022, 11, 24, 8, 59, 38, tzinfo=datetime.timezone.utc), 'commenter': 'fatihemreyildiz', 'type': 'User'}, {'comment_id': 1031382660, 'comment_body': 'The link to a real Json is a good idea.\r\nPlease add also:\r\nhttps://wiki.musicbrainz.org/Cover_Art_Archive/API\r\n', 'comment_created': datetime.datetime(2022, 11, 24, 11, 4, 43, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 1031386742, 'comment_body': ""No, than don't change the code.\r\nJust add a comment about our decision. "", 'comment_created': datetime.datetime(2022, 11, 24, 11, 9, 9, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 1031392731, 'comment_body': ""Thanks.\r\nThough, instead of creating and intermediate QString, let's compose the path in one step:\r\n```suggestion\r\n        // Compose the Cover Art file path. Use the correct file extension\r\n        // by checking from the fetched image bytes (disregard extension\r\n        // from file link).\r\n        QString coverArtCopyFilePath = trackFileInfo.absoluteFilePath().left(\r\n                trackFileInfo.absoluteFilePath().lastIndexOf('.') + 1) +\r\n                ImageFileData::readFormatFrom(m_fetchedCoverArtByteArrays);\r\n```"", 'comment_created': datetime.datetime(2022, 11, 24, 11, 15, 45, tzinfo=datetime.timezone.utc), 'commenter': 'ronso0', 'type': 'User'}, {'comment_id': 1031404962, 'comment_body': 'Done, thank you!', 'comment_created': datetime.datetime(2022, 11, 24, 11, 29, 40, tzinfo=datetime.timezone.utc), 'commenter': 'fatihemreyildiz', 'type': 'User'}, {'comment_id': 1031405574, 'comment_body': 'Done! Thank you! 👍 ', 'comment_created': datetime.datetime(2022, 11, 24, 11, 30, 24, tzinfo=datetime.timezone.utc), 'commenter': 'fatihemreyildiz', 'type': 'User'}, {'comment_id': 1031410437, 'comment_body': ""Thanks for the review! There is no overlook, everything is fine. So no worries! 🐙 \r\n\r\nI think everything is solved under this comment, except the [m_oldCoverArtFilePath](https://github.com/mixxxdj/mixxx/blob/9965d55f6e00cd1982f78cf09ac6196887869487/src/library/export/coverartcopyworker.h#L27) . \r\n\r\nIt is actually both new and old cover art file path. Because we have an existing cover art (old) and user is choosing new cover art (selected), then selected is replaced at where the old cover art is. So as I said it can be considered as both new and old. I'm not sure though. Should we rename it under this PR (Since I changed the related file on this PR already that will be ok IMHO), or this can be done in separate PR (A Pr with not big changes would make the PR history more crowded), or just not rename it at all. What do you think @ronso0 @daschuer ?"", 'comment_created': datetime.datetime(2022, 11, 24, 11, 36, 3, tzinfo=datetime.timezone.utc), 'commenter': 'fatihemreyildiz', 'type': 'User'}, {'comment_id': 1033329652, 'comment_body': ""leftover? throws a warning in case it already disconnected above.\r\nand let's make it `m_pTrack` everywhere (p prefix)"", 'comment_created': datetime.datetime(2022, 11, 28, 9, 50, 53, tzinfo=datetime.timezone.utc), 'commenter': 'ronso0', 'type': 'User'}, {'comment_id': 1034120252, 'comment_body': 'This seems to assume that if `m_fetchedCoverArtByteArrays` is null `m_pWFetchedCoverArtLabel` was already cleared (default cover image) and wants to avoid unnecessary clearing?\r\n```suggestion\r\n    m_fetchedCoverArtByteArrays.clear();\r\n    m_pWFetchedCoverArtLabel->loadData(QByteArray());\r\n    m_pWFetchedCoverArtLabel->setCoverArt(CoverInfo{},\r\n    QPixmap(CoverArtUtils::defaultCoverLocation()));\r\n```', 'comment_created': datetime.datetime(2022, 11, 28, 22, 35, 58, tzinfo=datetime.timezone.utc), 'commenter': 'ronso0', 'type': 'User'}, {'comment_id': 1037319054, 'comment_body': 'Yeah that was the purpose. But with the suggested changes it looks better ', 'comment_created': datetime.datetime(2022, 12, 1, 16, 22, 1, tzinfo=datetime.timezone.utc), 'commenter': 'fatihemreyildiz', 'type': 'User'}, {'comment_id': 1037320369, 'comment_body': ""Probably leftover, thanks for noticing , I also added other pointer's prefixes as well. "", 'comment_created': datetime.datetime(2022, 12, 1, 16, 23, 13, tzinfo=datetime.timezone.utc), 'commenter': 'fatihemreyildiz', 'type': 'User'}]","[{'commit_sha': '40e21b0c6f6792348fe62623ce7efae483e53b24', 'committer_username': 'fatihemreyildiz', 'committer_name': 'Emre', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 20, 20, 2, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': '200f37ec4b532314e84e8f6f97b11038440bb485', 'committer_username': 'fatihemreyildiz', 'committer_name': 'Emre', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 20, 20, 2, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bb7ec6df7ccfcf14a1e0d313a839770921c7b81d', 'committer_username': 'fatihemreyildiz', 'committer_name': 'Emre', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 20, 20, 2, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6885b359b94128bfe09b317156f6e8e0dcde4c6c', 'committer_username': 'fatihemreyildiz', 'committer_name': 'Emre', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 20, 20, 2, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': '50318f10113054fb0baffa2c8e6446b6474e2d4e', 'committer_username': 'fatihemreyildiz', 'committer_name': 'Emre', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 20, 20, 2, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8a0dc28672a5b0748e4982024a1274a87a5c3a51', 'committer_username': 'fatihemreyildiz', 'committer_name': 'Emre', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 20, 20, 2, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b1379dbd7889ab2fe979377db370b44273444469', 'committer_username': 'fatihemreyildiz', 'committer_name': 'Emre', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 20, 20, 2, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b4bb70e212705d869d9d1d1d53d01dfcc7176a47', 'committer_username': 'fatihemreyildiz', 'committer_name': 'Emre', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 20, 20, 2, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': '69ac2d603df31a4a78b2aca94157e894fb9aa35d', 'committer_username': 'fatihemreyildiz', 'committer_name': 'Emre', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 20, 20, 2, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ceb3978dfa0aa8ccb1f6c70136a39f195bd590d0', 'committer_username': 'fatihemreyildiz', 'committer_name': 'Emre', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 20, 20, 2, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': '850db448a3f9b685d99a9bf03a500267db89130d', 'committer_username': 'fatihemreyildiz', 'committer_name': 'Emre', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 20, 20, 2, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': '01d04004226a77ffd4406eb0ed9bd6e40cda662e', 'committer_username': 'fatihemreyildiz', 'committer_name': 'Emre', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 20, 20, 2, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4e53b079c37c17525ed16e6a526c3da7a95fd269', 'committer_username': 'ronso0', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2013, 11, 13, 23, 39, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cf54d53516ceebf4ff42dccb3e34de0cf4b089ca', 'committer_username': 'ronso0', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2013, 11, 13, 23, 39, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a79b1bbe0af94a44b6eb20a9cd88e9dde1c8af63', 'committer_username': 'fatihemreyildiz', 'committer_name': 'Emre', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 20, 20, 2, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4c1cc06ed35118e461bb44e82fad746ba982b78d', 'committer_username': 'fatihemreyildiz', 'committer_name': 'Emre', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 20, 20, 2, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c3cd36883da354e18dfd624115ddb070971d6168', 'committer_username': 'fatihemreyildiz', 'committer_name': 'Emre', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 20, 20, 2, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd59da65fc7ab891df72efb5381be4f1d6aecea50', 'committer_username': 'fatihemreyildiz', 'committer_name': 'Emre', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 20, 20, 2, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b5a5e7293da110a59b591ff3afbe1a2033889ba8', 'committer_username': 'fatihemreyildiz', 'committer_name': 'Emre', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 20, 20, 2, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': '74550683578f1a859ca7dafe84ec40682eb1869b', 'committer_username': 'fatihemreyildiz', 'committer_name': 'Emre', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 20, 20, 2, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': '32e95f9fd44e623aca0da62a6ea0b0c9ff830ed0', 'committer_username': 'fatihemreyildiz', 'committer_name': 'Emre', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 20, 20, 2, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6bb4db1db7ef3d1d13757c9dc33494949bbb59c9', 'committer_username': 'fatihemreyildiz', 'committer_name': 'Emre', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 20, 20, 2, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5e48d83e84b56e4a60e1c40ccc1a90eeb28c6d56', 'committer_username': 'fatihemreyildiz', 'committer_name': 'Emre', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 20, 20, 2, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': '697f41a74707eec4eb1ecb4932f5b3404daa11ea', 'committer_username': 'fatihemreyildiz', 'committer_name': 'Emre', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 20, 20, 2, 55, tzinfo=datetime.timezone.utc)}]",Emre,67206006,,User,,5,,21,10
1004409580,Cover Art Label & Cover Art Full Size composition with menu,"Hey everyone! 

I want to add cover art fetcher [[on this PR]](https://github.com/mixxxdj/mixxx/pull/4851), but for to do that I need to have another cover art label's without/different menu and DlgCoverArtFullSize. I have tried to make a base class without menu and inherit the existing label-full-size from that. But this caused as code duplication and new files which can make the code base crowded. Also, adding everything in a huge pr would make it difficult to review and also to merge. So, we wanted to move with small steps. Here is the first little PR of the cover art-fetcher.

To display cover arts without menu, I have tried composition approach, according to my tests, if there is no cover art menu passed to these two classes, it doesn't pop-up the menu on right click. In order for me to move forward, I need to find a best solution for to display cover art's with or without menu. 

Any feedback would be so good!

Thanks in advance.    ",True,4864,https://api.github.com/repos/mixxxdj/mixxx/pulls/4864,https://github.com/mixxxdj/mixxx/pull/4864,closed,63,46,9,3,9,20,3,0,"[{'name': 'library'}, {'name': 'ui'}, {'name': 'needs review'}]",2022-07-21 16:11:47+00:00,2022-08-10 19:13:55+00:00,1738928.0,"20 days, 3:02:08","[{'comment_id': 927300096, 'comment_body': 'We use the stacked style of initialization list. Please revert to the style change (and help clang-format)', 'comment_created': datetime.datetime(2022, 7, 22, 5, 25, 5, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 927308091, 'comment_body': 'This can also become make_parented<WCoverArtMenu>', 'comment_created': datetime.datetime(2022, 7, 22, 5, 43, 52, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 927754021, 'comment_body': ""Oh, pre-commit fixed this initialization list, I didn't even noticed. Thank you for letting me now! I fixed it."", 'comment_created': datetime.datetime(2022, 7, 22, 15, 16, 18, tzinfo=datetime.timezone.utc), 'commenter': 'fatihemreyildiz', 'type': 'User'}, {'comment_id': 927754166, 'comment_body': 'Done! :+1: ', 'comment_created': datetime.datetime(2022, 7, 22, 15, 16, 27, tzinfo=datetime.timezone.utc), 'commenter': 'fatihemreyildiz', 'type': 'User'}, {'comment_id': 927804817, 'comment_body': ""I didn't do that intentionally this too, I think pre-commit made me do it in this way, is it correct or should it be like before?"", 'comment_created': datetime.datetime(2022, 7, 22, 16, 11, 51, tzinfo=datetime.timezone.utc), 'commenter': 'fatihemreyildiz', 'type': 'User'}, {'comment_id': 928069323, 'comment_body': 'I think it is better to use here a common base class that has only the signals.\r\n', 'comment_created': datetime.datetime(2022, 7, 23, 2, 54, 28, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 928091696, 'comment_body': ""So Instead of QMenu should I use WCoverArtMenu in this case? For now I think only WCoverArtMenu can work so we can continue with the fetcher itself. A menu for fetcher can be implemented later on IMHO.\r\n\r\nWouldn't QObject casting work? Since it doesn't use RTTI, wouldn't it be faster and solve the issue regarding with the dynamic_casting? \r\n\r\nOr the problems with the casting it is not only the performance is it also technical stuff too? "", 'comment_created': datetime.datetime(2022, 7, 23, 7, 33, 53, tzinfo=datetime.timezone.utc), 'commenter': 'fatihemreyildiz', 'type': 'User'}, {'comment_id': 928122283, 'comment_body': 'Yes technical, a QOject cast will also work and should indeed be preferred.\r\n\r\nThe main issue with upcasting, is that the expected child class is hidden in the implementation of the function body. \r\n\r\n', 'comment_created': datetime.datetime(2022, 7, 23, 13, 12, 3, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 928129277, 'comment_body': 'If i understand it correctly, we should go with the WCoverArtMenu instead of QMenu in the constructor right?', 'comment_created': datetime.datetime(2022, 7, 23, 14, 24, 8, tzinfo=datetime.timezone.utc), 'commenter': 'fatihemreyildiz', 'type': 'User'}, {'comment_id': 928145997, 'comment_body': 'Yes, that was my idea. We can alter the code later again if we introduce a second menu class. ', 'comment_created': datetime.datetime(2022, 7, 23, 17, 22, 5, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 928146239, 'comment_body': ""Thank you for explaining, that's fair enough in the first place as you mentioned, with the second menu class it can be changed :+1:"", 'comment_created': datetime.datetime(2022, 7, 23, 17, 24, 32, tzinfo=datetime.timezone.utc), 'commenter': 'fatihemreyildiz', 'type': 'User'}, {'comment_id': 928154126, 'comment_body': 'Done :+1: I tested it with label without menu, it worked fine.', 'comment_created': datetime.datetime(2022, 7, 23, 18, 53, 48, tzinfo=datetime.timezone.utc), 'commenter': 'fatihemreyildiz', 'type': 'User'}, {'comment_id': 928229952, 'comment_body': 'here you can directly connect the menu and remove the connection and signals from the label.\r\nIf this is the only dependency the WCoverArtLabel can take the generic QMenu.  ', 'comment_created': datetime.datetime(2022, 7, 24, 9, 53, 20, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 928230841, 'comment_body': 'I actually tried it before, as far as I remember that was causing a bug. I click on the cover art layout, full size populated, after right click - clear cover was just clearing the cover art for the DlgTrackInfo, not in all of them which was not like in the original use-case. ', 'comment_created': datetime.datetime(2022, 7, 24, 9, 59, 59, tzinfo=datetime.timezone.utc), 'commenter': 'fatihemreyildiz', 'type': 'User'}, {'comment_id': 928737480, 'comment_body': ""Can you try this again? I see no reason that it can cause a bug, because it is only a signal signal connection. without it we remove a redirection loop, that's all. (make sure to change the pointer AND the base class of the connected signal function pointer)"", 'comment_created': datetime.datetime(2022, 7, 25, 10, 46, 55, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 929271434, 'comment_body': 'I deleted the signal signal connection, and it works just fine, but whenever I want to pass the QMenu, i can not because they have dependency.\r\n\r\nWCoverArtLabel takes WCoverArtMenu and DlgCoverArtFullSize, DlgCoverArtFullSize also take WCoverArtMenu, so they have highly related dependency.', 'comment_created': datetime.datetime(2022, 7, 25, 20, 29, 10, tzinfo=datetime.timezone.utc), 'commenter': 'fatihemreyildiz', 'type': 'User'}, {'comment_id': 942344834, 'comment_body': 'This means if there is no menu instance the cover window can not be dragged anymore.\r\nHow about this:\r\n```suggestion\r\n    if (event->button() != Qt::LeftButton) {\r\n        return;\r\n    }\r\n    if ((m_pCoverMenu != nullptr && !m_pCoverMenu->isVisible()) ||\r\n            m_pCoverMenu == nullptr) {\r\n```', 'comment_created': datetime.datetime(2022, 8, 10, 11, 37, 29, tzinfo=datetime.timezone.utc), 'commenter': 'ronso0', 'type': 'User'}, {'comment_id': 942351963, 'comment_body': 'not required, please remove', 'comment_created': datetime.datetime(2022, 8, 10, 11, 46, 21, tzinfo=datetime.timezone.utc), 'commenter': 'ronso0', 'type': 'User'}, {'comment_id': 942721134, 'comment_body': 'deleted. ', 'comment_created': datetime.datetime(2022, 8, 10, 17, 31, 34, tzinfo=datetime.timezone.utc), 'commenter': 'fatihemreyildiz', 'type': 'User'}, {'comment_id': 942722572, 'comment_body': ""I didn't notice that, I tested it before the requested changes, when there was no menu label, left click wasn't working probably and wasn't able to turn off the full size. With this change now it can. Thank you! :) "", 'comment_created': datetime.datetime(2022, 8, 10, 17, 33, 14, tzinfo=datetime.timezone.utc), 'commenter': 'fatihemreyildiz', 'type': 'User'}]","[{'commit_sha': '8cf22063b23b57f68abe5fde3a9acc38a9056d9d', 'committer_username': 'fatihemreyildiz', 'committer_name': 'Emre', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 20, 20, 2, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': '10a1c469a85804bb7e4b0a848b4b609ba448ba33', 'committer_username': 'fatihemreyildiz', 'committer_name': 'Emre', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 20, 20, 2, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': '102d1fbc267c4d040db99a2999c67d635710d92a', 'committer_username': 'fatihemreyildiz', 'committer_name': 'Emre', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 20, 20, 2, 55, tzinfo=datetime.timezone.utc)}]",Emre,67206006,,User,,5,,21,10
1011002212,DlgTagFetcher new feedback system,"As we discussed that on [Zulip](https://mixxx.zulipchat.com/#narrow/stream/109215-gsoc/topic/cover.20art.20lookup/near/291075452), we wanted to get rid of the full screen status page in `Import metadata from MusicBrainz` - `DlgTagFetcher`.

The new GUI is simply like this:

- On startup, progress ![progress](https://user-images.githubusercontent.com/67206006/181578582-fc17b5ff-dec7-4101-86de-61393d8d3c92.png)

- After fetching completed, successful ![successful](https://user-images.githubusercontent.com/67206006/181578657-4816fb79-3559-4196-890d-6e9fed271869.png)

- Any case of error, failure: 
![Failure 1](https://user-images.githubusercontent.com/67206006/181579003-8d0614dd-9caa-4db7-80f0-777b39104af3.png)
![Failure 2](https://user-images.githubusercontent.com/67206006/181579040-e91f7468-3ceb-4606-bed8-0bb9dea53b4d.png)

What do you think generally?

",True,4871,https://api.github.com/repos/mixxxdj/mixxx/pulls/4871,https://github.com/mixxxdj/mixxx/pull/4871,closed,282,532,7,29,30,96,2,0,"[{'name': 'library'}, {'name': 'changelog'}]",2022-07-28 15:39:20+00:00,2022-09-29 07:08:35+00:00,5412555.0,"62 days, 15:29:15","[{'comment_id': 932644367, 'comment_body': '```suggestion\r\n        QString emptyMessage = tr(""Could not find this track in the MusicBrainz database."");\r\n```', 'comment_created': datetime.datetime(2022, 7, 28, 20, 32, 54, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 932645809, 'comment_body': 'Mabye:\r\n```suggestion\r\n    QString finishedMessage = tr(""Results ready to select and apply."");\r\n```\r\nor such .. ', 'comment_created': datetime.datetime(2022, 7, 28, 20, 34, 58, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 932683247, 'comment_body': 'Done :+1: ', 'comment_created': datetime.datetime(2022, 7, 28, 21, 26, 29, tzinfo=datetime.timezone.utc), 'commenter': 'fatihemreyildiz', 'type': 'User'}, {'comment_id': 932693333, 'comment_body': 'The original message was including `Mixxx` in the feedback, should It be deleted or remain still?', 'comment_created': datetime.datetime(2022, 7, 28, 21, 29, 54, tzinfo=datetime.timezone.utc), 'commenter': 'fatihemreyildiz', 'type': 'User'}, {'comment_id': 933024187, 'comment_body': 'IMHO that should be deleted, because in all Error messages Mixxx speaks to us.', 'comment_created': datetime.datetime(2022, 7, 29, 8, 58, 29, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 933385484, 'comment_body': 'Oh, yeah I understand that. There are also two other messages which says `Mixxx` in the messages. These should be deleted too then?  ', 'comment_created': datetime.datetime(2022, 7, 29, 15, 27, 37, tzinfo=datetime.timezone.utc), 'commenter': 'fatihemreyildiz', 'type': 'User'}, {'comment_id': 933387843, 'comment_body': 'Yes, as long they are still unambiguous afterwards. ', 'comment_created': datetime.datetime(2022, 7, 29, 15, 30, 23, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 933404935, 'comment_body': 'Okay then all of them are going to be fixed :+1: ', 'comment_created': datetime.datetime(2022, 7, 29, 15, 49, 47, tzinfo=datetime.timezone.utc), 'commenter': 'fatihemreyildiz', 'type': 'User'}, {'comment_id': 933629936, 'comment_body': 'This requires a comment. ', 'comment_created': datetime.datetime(2022, 7, 29, 21, 33, 43, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 933638233, 'comment_body': 'This also grays out the item. does something like this work: \r\n```suggestion\r\n        results->currentItem()->setFlags(results->currentItem()->flags() & ~Qt::ItemIsSelectable);\r\n```\r\nor \r\n\r\n```suggestion\r\n        results->currentItem()->setFlags(Qt::ItemIsEnabled);\r\n```\r\n', 'comment_created': datetime.datetime(2022, 7, 29, 21, 53, 42, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 933780432, 'comment_body': ""Both of them worked :+1: . Thanks. \r\n\r\nThe thing that I didn't understand what is the difference between these two lines. \r\n\r\nI have a question regarding with the second suggested change.\r\n\r\nI saw ItemIsEnabled too on the documentation, but it says `The user can interact with the item.`. After I read it, I said to myself 'okay I need the reverse of it definitely not this one'. But somehow it disables the selection. Is there anything that I missed? Isn't that mean this can be selected by the user, how it can disable the selection of it. "", 'comment_created': datetime.datetime(2022, 7, 30, 9, 53, 24, tzinfo=datetime.timezone.utc), 'commenter': 'fatihemreyildiz', 'type': 'User'}, {'comment_id': 933781598, 'comment_body': 'Done :+1: ', 'comment_created': datetime.datetime(2022, 7, 30, 10, 6, 39, tzinfo=datetime.timezone.utc), 'commenter': 'fatihemreyildiz', 'type': 'User'}, {'comment_id': 934906097, 'comment_body': 'We can speed it up, by starting a timer before issue the first request and use here the remaining time to complete a second. This way 20 requests will take 20 s. Now it takes as long as before + 20 s.   ', 'comment_created': datetime.datetime(2022, 8, 1, 20, 45, 22, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 934907353, 'comment_body': 'You may use https://github.com/mixxxdj/mixxx/blob/f2d670edeb483efb066bf7f00255d01df2f0017c/src/util/timer.h#L18\r\nfor that. \r\n', 'comment_created': datetime.datetime(2022, 8, 1, 20, 47, 17, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 934960040, 'comment_body': ""I tried to use Timer class. I'm not sure if it is the best approach to check if it is not passed 1 seconds by using while loop."", 'comment_created': datetime.datetime(2022, 8, 1, 22, 16, 8, tzinfo=datetime.timezone.utc), 'commenter': 'fatihemreyildiz', 'type': 'User'}, {'comment_id': 934971230, 'comment_body': 'This is a hoot loop that burns CPU. Even worse than sleeping.', 'comment_created': datetime.datetime(2022, 8, 1, 22, 39, 5, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 934991037, 'comment_body': 'Ah, yes you are right. Thanks for the feedback. \r\n\r\nNow I tried to solve this issue by extract the time passed until we reach to the next request from 1 second.', 'comment_created': datetime.datetime(2022, 8, 1, 23, 27, 53, tzinfo=datetime.timezone.utc), 'commenter': 'fatihemreyildiz', 'type': 'User'}, {'comment_id': 934998254, 'comment_body': 'Please get familiar how timers in conjunction with the Qt event loop are supposed to be used, i.e. connect their signals to slots. No sleeps, no hot loops. You need to do all the state management in your class manually. Getting familiar on how finite state machines (FSM) work helps.\r\n\r\nhttps://doc.qt.io/qt-5/qtimer.html', 'comment_created': datetime.datetime(2022, 8, 1, 23, 47, 8, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 935101421, 'comment_body': 'I will take a look, do my search and try to find the best way possible. As you mentioned, no sleep - no hot loop. \n\nThank you for this cool tip and the doc link. That will be really helpful for me. ', 'comment_created': datetime.datetime(2022, 8, 2, 4, 24, 59, tzinfo=datetime.timezone.utc), 'commenter': 'fatihemreyildiz', 'type': 'User'}, {'comment_id': 935137966, 'comment_body': 'You need to query the elapsed time only once.\r\nThis avoids that the timer elapses between the first and the second call.', 'comment_created': datetime.datetime(2022, 8, 2, 5, 49, 15, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 935146936, 'comment_body': 'In this case we have the issue that a possible abort() signal is ignored during the sleep. \r\nThis was actually already Ignoted her before due to the direct slotStart() call.\r\n\r\nA QTimer::timeout() signal will solve both. It is put into the Qt message queue after a possible abort() signal.\r\nSo in case of abort the timeout() handled after the abort(). You need to stop the timer in this case that the process does not start over after abort(), and also expect timeouts() that may happen concurrently. ', 'comment_created': datetime.datetime(2022, 8, 2, 6, 5, 39, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 967728298, 'comment_body': 'Can we remove the connect/reconnect cycle? ', 'comment_created': datetime.datetime(2022, 9, 11, 1, 23, 7, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 967728323, 'comment_body': 'Can we remove this code or find a workaround that this can be removed? ', 'comment_created': datetime.datetime(2022, 9, 11, 1, 23, 34, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 967728559, 'comment_body': 'Avoid magic numbers. Can this be expressed by a formular derived from constants? ', 'comment_created': datetime.datetime(2022, 9, 11, 1, 24, 42, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 967728613, 'comment_body': 'What is 60? ', 'comment_created': datetime.datetime(2022, 9, 11, 1, 25, 35, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 967728680, 'comment_body': 'Also a magic number. ', 'comment_created': datetime.datetime(2022, 9, 11, 1, 26, 38, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 967728932, 'comment_body': 'What does -1 mean here? ', 'comment_created': datetime.datetime(2022, 9, 11, 1, 28, 26, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 967784930, 'comment_body': '-1 is the index of the actual track metadata. The results fetched from musicbrainz starts from index 0. ', 'comment_created': datetime.datetime(2022, 9, 11, 8, 32, 18, tzinfo=datetime.timezone.utc), 'commenter': 'fatihemreyildiz', 'type': 'User'}, {'comment_id': 967786630, 'comment_body': 'The magic numbers added in order to have a better scaling, before that I was making assumptions about the results coming from AcoustID. This assumptions were causing unwanted behavior such as jumping from 0 to 100 or backward loading from 40 to 30. \r\n\r\nRight now it starts from 10%, then goes to %25 and then %40 between the fingerprinting, identifying and retrieving. \r\n\r\nI will try to do it with the derived from constants.\r\n', 'comment_created': datetime.datetime(2022, 9, 11, 8, 42, 47, tzinfo=datetime.timezone.utc), 'commenter': 'fatihemreyildiz', 'type': 'User'}, {'comment_id': 967790951, 'comment_body': '40% is the first 3 steps that is ""Finger printing"" - ""Identifying from AcoustID"" - ""Retrieving metadata from MusicBrainz"". 60 percent belongs to the actual fetching from Musicbrainz. \r\n\r\nAccording to Recording IDs returned from AcoustID, the progress bar can jump from 40% to 100% if just a recording ID found. Or either jump in slow steps if there are many recording IDs found.\r\n\r\nI made 50% in the beginning but this time the steps were really small for a popular tracks. \r\n\r\nThis percent can be changed according with your feedback.', 'comment_created': datetime.datetime(2022, 9, 11, 9, 10, 5, tzinfo=datetime.timezone.utc), 'commenter': 'fatihemreyildiz', 'type': 'User'}, {'comment_id': 967794300, 'comment_body': 'Changed with the last commit 👍 ', 'comment_created': datetime.datetime(2022, 9, 11, 9, 34, 2, tzinfo=datetime.timezone.utc), 'commenter': 'fatihemreyildiz', 'type': 'User'}, {'comment_id': 967798281, 'comment_body': 'Yes, we can. That was added in the first commits when the retry button was always available even for success results. \r\n\r\nFor now this is no needed IMHO.', 'comment_created': datetime.datetime(2022, 9, 11, 10, 5, 2, tzinfo=datetime.timezone.utc), 'commenter': 'fatihemreyildiz', 'type': 'User'}, {'comment_id': 967798565, 'comment_body': 'done 👍 ', 'comment_created': datetime.datetime(2022, 9, 11, 10, 7, 41, tzinfo=datetime.timezone.utc), 'commenter': 'fatihemreyildiz', 'type': 'User'}, {'comment_id': 968229525, 'comment_body': 'Ok please use a constant for this. Something like\r\nkOriginalTrackIndex or such.   ', 'comment_created': datetime.datetime(2022, 9, 12, 10, 10, 7, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 968232500, 'comment_body': 'Ok, please use also a constant and add some comments. ', 'comment_created': datetime.datetime(2022, 9, 12, 10, 12, 25, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 968236360, 'comment_body': '```suggestion\r\n// Percent of QProgressBar when dialog populated, ""fingerprinting"".\r\nconstexpr int kPercentOfPopulation = 10;\r\n\r\n// Percent of ""identifying"" and ""retrieving"" metadata.\r\nconstexpr int kPercentOfConstantTask = 15;\r\n\r\n// Percent left for Recording ID\'s found, ""Fetching track data from Musicbrainz"".\r\nconstexpr int kPercentOfRecordingsFound = 60;\r\n```\r\n\r\nThe comment does not really match the variable names. Please include the information in the variable name and replace the comment by a brief overview how the progress is calculated. So that later authors know where to adjust the values if required. ', 'comment_created': datetime.datetime(2022, 9, 12, 10, 16, 44, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 968238926, 'comment_body': 'What makes the UnknownError special? ', 'comment_created': datetime.datetime(2022, 9, 12, 10, 19, 31, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 968258245, 'comment_body': 'The error codes and messages are helpful, in case of digging down user issues. \r\nWe need to find here a good balance here. \r\nIs there a need to short down the message? If yes, we may log a qWarning with the original message and put only the the `message` into the progress bar. \r\nWill this work?   ', 'comment_created': datetime.datetime(2022, 9, 12, 10, 41, 51, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 968258940, 'comment_body': 'Do we have still a stack? ', 'comment_created': datetime.datetime(2022, 9, 12, 10, 42, 44, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 968260326, 'comment_body': 'Is it correct to always reset the progress bar value here? If yes, this should be reflected in the function name. ', 'comment_created': datetime.datetime(2022, 9, 12, 10, 44, 30, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 968260787, 'comment_body': 'Yes IMHO. I guess we need it just in case of if the track changed via buttons.', 'comment_created': datetime.datetime(2022, 9, 12, 10, 45, 5, tzinfo=datetime.timezone.utc), 'commenter': 'fatihemreyildiz', 'type': 'User'}, {'comment_id': 968264310, 'comment_body': 'This is only available in the first population. We update the stack in case of ""Import Metadata From Musicbrainz"" pressed or track changed via buttons.\r\n\r\nThe progress bar value changes after each WebTask, but it never updates stack. \r\n\r\nStack is updated just in case of failure (the bar set to maximum in this case).\r\nWhen the fetching is success (it is also set to maximum).\r\nWhen it is started (down to the percent of population).\r\n\r\nAs far as I tried, that was the correct way to populate the progress bar with the percent of population.\r\n\r\n', 'comment_created': datetime.datetime(2022, 9, 12, 10, 49, 15, tzinfo=datetime.timezone.utc), 'commenter': 'fatihemreyildiz', 'type': 'User'}, {'comment_id': 968281843, 'comment_body': ""I am not sure actually, It was like this before I started the New GUI. I didn't want to break it down, so I tried make it with the new GUI as it was before. \r\n\r\nAfter the rate limit bug occurred and the tasks changed a bit, I lost the track of it. I'm sorry.\r\n\r\nI would like to find out if it is special case, and have the better user feedback.\r\n\r\nShould I work on it?"", 'comment_created': datetime.datetime(2022, 9, 12, 11, 8, 30, tzinfo=datetime.timezone.utc), 'commenter': 'fatihemreyildiz', 'type': 'User'}, {'comment_id': 968282065, 'comment_body': 'Done 👍 , I hope the new changes are ok.', 'comment_created': datetime.datetime(2022, 9, 12, 11, 8, 43, tzinfo=datetime.timezone.utc), 'commenter': 'fatihemreyildiz', 'type': 'User'}, {'comment_id': 968288883, 'comment_body': 'There can be 2 messages that comes to my mind that we can use it to inform users, ""Can\'t connect"" and ""Can\'t find in the database"".\r\n\r\nRelated messages can be logged to qWarning. \r\n\r\nWhat do you think?', 'comment_created': datetime.datetime(2022, 9, 12, 11, 16, 6, tzinfo=datetime.timezone.utc), 'commenter': 'fatihemreyildiz', 'type': 'User'}, {'comment_id': 970089925, 'comment_body': 'Yes, I suggest do dispose these artificial strings and rely on the strings received in the error message. \r\nIf it turns out that this is ugly. We may adjust them instead. ', 'comment_created': datetime.datetime(2022, 9, 13, 21, 16, 58, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 970096631, 'comment_body': 'OK. ', 'comment_created': datetime.datetime(2022, 9, 13, 21, 26, 58, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 970099430, 'comment_body': 'Ok, than we have a naming issue here. updateStack() sounds as it is regularly called, but for my understanding it is called only once and kPercentOfPopulation is the initial of the progress bar progress.', 'comment_created': datetime.datetime(2022, 9, 13, 21, 31, 24, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 970169716, 'comment_body': ""I couldn't find a better name for kPercentOfPopulation but kInitialPercentOfProgress sounds better IMHO. \r\n\r\nFor the updateStack(), I can't be sure about the naming, it can be reloadStack() maybe or refreshStack(). It actually called many time during a few track fetching process, If we consider changing tracks, having results or not found errors. \r\n\r\nOn the other hand if we think about a single Tag fetching progress, it is called once when the progress is finished, so we can call it also showResults(). So think in that way, It can be no result -on fetching and network error- or results -finished successfully-."", 'comment_created': datetime.datetime(2022, 9, 13, 23, 39, 7, tzinfo=datetime.timezone.utc), 'commenter': 'fatihemreyildiz', 'type': 'User'}, {'comment_id': 970377476, 'comment_body': 'No clear answer to this question can be an indicator, that some refactoring is required... ', 'comment_created': datetime.datetime(2022, 9, 14, 6, 40, 30, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 970390465, 'comment_body': 'It looks like as if the progress Is reset to the initial value each time updateStack() is called. \r\nHow about this: \r\n* Rename the function to a more generic updateView() Or such.\r\n* rewrite the function that it is obvious that it can be called repeated at any time.\r\n* Dispose  m_progressBarValue and replace it by an instant calculation of progress taken from the the other state and progress variables we already have.\r\n* encapsulate the acces to the progress bar by one or two functions, and remove all other accesses to it.\r\n', 'comment_created': datetime.datetime(2022, 9, 14, 6, 51, 25, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 970662690, 'comment_body': 'How about I separate this function into two? Such as createView() and updateView().\r\n\r\nThis looks like this function is actually doing two things, creating the stack and meanwhile updates the stacks without touching the created stack which is difficult to maintain.', 'comment_created': datetime.datetime(2022, 9, 14, 11, 6, 27, tzinfo=datetime.timezone.utc), 'commenter': 'fatihemreyildiz', 'type': 'User'}, {'comment_id': 970677569, 'comment_body': ""Since there is only one QTreeWidget and it is filled by the results from web it needs to be cleared in each update stack called. But the problem is the actual track metadata is also considered as results. So clearing the results after each updateStack() can clear the actual track metadata, which we don't want to.\r\n\r\nSo when we start a new fetching,  this happens:\r\nFetching Starts.   -> createView()\r\nTrack Changes    -> createView()\r\nUser Click Retry  -> createView()\r\nThis can be the first state of the tag fetcher, the related buttons are disabled. Track tag is listed and it never deletes. Progress bar can be set to 0 in this state.\r\n\r\nNetwork Error.        -> updateView()\r\nFetching Success  -> updateView()\r\nThese doesn't clear the results, it will just add them. We can update the progress bar in this state.\r\n\r\nMeanwhile, If this works, I am not sure but this will be more easy to list the results after each success musicbrainz result, but I guess this can be postponed for the benefit of cover art fetcher."", 'comment_created': datetime.datetime(2022, 9, 14, 11, 23, 14, tzinfo=datetime.timezone.utc), 'commenter': 'fatihemreyildiz', 'type': 'User'}, {'comment_id': 971039846, 'comment_body': 'Done +1', 'comment_created': datetime.datetime(2022, 9, 14, 16, 20, 52, tzinfo=datetime.timezone.utc), 'commenter': 'fatihemreyildiz', 'type': 'User'}, {'comment_id': 971042094, 'comment_body': 'I think we can now dispose the whole if branch. ', 'comment_created': datetime.datetime(2022, 9, 14, 16, 22, 49, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 971043873, 'comment_body': 'Can you also add m_networkResult to the warning? ', 'comment_created': datetime.datetime(2022, 9, 14, 16, 24, 12, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 971048581, 'comment_body': 'We can probably dispose the whole m_networkResult', 'comment_created': datetime.datetime(2022, 9, 14, 16, 28, 56, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 971050206, 'comment_body': 'If the httpError is 0, that means that is unknown right?', 'comment_created': datetime.datetime(2022, 9, 14, 16, 30, 38, tzinfo=datetime.timezone.utc), 'commenter': 'fatihemreyildiz', 'type': 'User'}, {'comment_id': 971050303, 'comment_body': 'No, m_networkResult, has no extra information. ', 'comment_created': datetime.datetime(2022, 9, 14, 16, 30, 44, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 971053353, 'comment_body': 'So on [here](https://github.com/mixxxdj/mixxx/blob/b4dd4743a70ad0b75cfcae7f2ef36b1f2dc011fc/src/library/dlgtagfetcher.cpp#L349), there should be an indicator that we received a network error, right?', 'comment_created': datetime.datetime(2022, 9, 14, 16, 33, 48, tzinfo=datetime.timezone.utc), 'commenter': 'fatihemreyildiz', 'type': 'User'}, {'comment_id': 971053395, 'comment_body': ""I have answerd my own comment.\r\nI think we don't need to distinguish different errors. This info is also not relevant for the warning. "", 'comment_created': datetime.datetime(2022, 9, 14, 16, 33, 51, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 971057071, 'comment_body': 'Yes it is currently used in updateStack()\r\nMaybe you can remove that usage during the refactoring or replace it with a state variable specific for this class. ', 'comment_created': datetime.datetime(2022, 9, 14, 16, 37, 34, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 971080887, 'comment_body': ""I have tried to refactor the update stack, Before disposing the network result is it okay if I can get a feedback about it? So I can learn if I am on the right way or not.  I will push it as a try-out commit. I would be so happy if I get a feedback on it. If that's the wrong way, I can revert it easily.\r\n\r\nWhat do you think?"", 'comment_created': datetime.datetime(2022, 9, 14, 17, 0, 41, tzinfo=datetime.timezone.utc), 'commenter': 'fatihemreyildiz', 'type': 'User'}, {'comment_id': 971309780, 'comment_body': 'This still sound like function that can be called unconditionally repeatedly. But that is not true, because it must be only called after a ConstantTask for my understanding. But I see that this is called from three places. Is that what your are testing in the if branches below? \r\n \r\nprogressBarSetCurrentStep() Is also confusing, because it is not universal for all ""Steps"" only for recordings. Is that correct? ', 'comment_created': datetime.datetime(2022, 9, 14, 21, 25, 12, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 971310600, 'comment_body': '```suggestion\r\nvoid DlgTagFetcher::slotNetworkError(\r\n```\r\nis only called in the error case. ', 'comment_created': datetime.datetime(2022, 9, 14, 21, 26, 27, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 971311442, 'comment_body': 'Can we remove the entire updateView() and copy its content to the callers? ', 'comment_created': datetime.datetime(2022, 9, 14, 21, 27, 43, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 971314581, 'comment_body': 'Done with the last commit 👍 ', 'comment_created': datetime.datetime(2022, 9, 14, 21, 32, 40, tzinfo=datetime.timezone.utc), 'commenter': 'fatihemreyildiz', 'type': 'User'}, {'comment_id': 972015034, 'comment_body': 'Done 👍 ', 'comment_created': datetime.datetime(2022, 9, 15, 13, 51, 16, tzinfo=datetime.timezone.utc), 'commenter': 'fatihemreyildiz', 'type': 'User'}, {'comment_id': 973772591, 'comment_body': '```suggestion\r\n// 3. -> ""Retrieving metadata from MusicBrainz""\r\n```', 'comment_created': datetime.datetime(2022, 9, 18, 20, 40, 4, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 973772716, 'comment_body': '```suggestion\r\n// These step can be changed according to the number of recordings fetched from AcoustID\r\n```', 'comment_created': datetime.datetime(2022, 9, 18, 20, 41, 11, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 973772936, 'comment_body': '```suggestion\r\n// Last step uses the remaining percentage and it is divided by recordings found from AcoustID.\r\n```', 'comment_created': datetime.datetime(2022, 9, 18, 20, 43, 14, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 973773001, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2022, 9, 18, 20, 43, 36, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 973773177, 'comment_body': '```suggestion\r\n// The remaining 55% are divided by the number of recordings received from AcoustID.\r\n```\r\nThis sentence is now redundant with the one above, can you join them? ', 'comment_created': datetime.datetime(2022, 9, 18, 20, 45, 38, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 973773733, 'comment_body': ""```suggestion\r\n        // Track has not change: This is a Retry. \r\n```\r\n\r\nThe other explanations should be moved closer to the code. To be honest, I don't understand them well. Maybe you can improve them along the way. \r\n"", 'comment_created': datetime.datetime(2022, 9, 18, 20, 50, 59, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 973774140, 'comment_body': 'the name ""result"" is hard to understand. I think it is the QTreeWidget showing the results. Can we find a better name for it?  ', 'comment_created': datetime.datetime(2022, 9, 18, 20, 55, 37, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 973774485, 'comment_body': '```suggestion\r\nvoid DlgTagFetcher::showNextConstantTask(const QString& text) {\r\n```\r\nor such ', 'comment_created': datetime.datetime(2022, 9, 18, 20, 59, 24, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 973774745, 'comment_body': '```suggestion\r\n    m_percentForOneRecording = kPercentLeftForRecordingsFound / totalRecordingsFound;\r\n```\r\nor such', 'comment_created': datetime.datetime(2022, 9, 18, 21, 2, 7, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 973774899, 'comment_body': '```suggestion\r\nvoid DlgTagFetcher::recordingProgress() {\r\n```', 'comment_created': datetime.datetime(2022, 9, 18, 21, 3, 50, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 973857346, 'comment_body': '""Tag""s maybe?', 'comment_created': datetime.datetime(2022, 9, 19, 4, 38, 52, tzinfo=datetime.timezone.utc), 'commenter': 'fatihemreyildiz', 'type': 'User'}, {'comment_id': 973861217, 'comment_body': ""I've changed the whole comment section, now it looks a bit more cleaner and easier to understand IMHO."", 'comment_created': datetime.datetime(2022, 9, 19, 4, 51, 53, tzinfo=datetime.timezone.utc), 'commenter': 'fatihemreyildiz', 'type': 'User'}, {'comment_id': 973861503, 'comment_body': 'Yes 👍 , there will be different scaling for the cover art fetcher as well, so more of these comments will be needed IMHO. ', 'comment_created': datetime.datetime(2022, 9, 19, 4, 52, 57, tzinfo=datetime.timezone.utc), 'commenter': 'fatihemreyildiz', 'type': 'User'}, {'comment_id': 982018899, 'comment_body': 'Second line can be seen from the code, and is kind of misleading.\r\nRemove? ', 'comment_created': datetime.datetime(2022, 9, 28, 7, 0, 49, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 982024707, 'comment_body': 'Is all this below really necessary, or can we just update the single line of the original track? ', 'comment_created': datetime.datetime(2022, 9, 28, 7, 8, 8, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 982039168, 'comment_body': 'This code is redundant with loadTrackInternal', 'comment_created': datetime.datetime(2022, 9, 28, 7, 24, 41, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 982133844, 'comment_body': 'this can be moved in front of the if condition  ... or removed, because it is hidden anyway? ', 'comment_created': datetime.datetime(2022, 9, 28, 8, 54, 22, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 982139324, 'comment_body': 'The comment does not match the code entirely. How about invert the condition and use ""continue"" or rephrase the comment. ', 'comment_created': datetime.datetime(2022, 9, 28, 8, 59, 18, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 982141394, 'comment_body': '```suggestion\r\n    qWarning() << ""Error while fetching track metadata!""\r\n```', 'comment_created': datetime.datetime(2022, 9, 28, 9, 1, 14, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 982186410, 'comment_body': 'Yes 👍 ', 'comment_created': datetime.datetime(2022, 9, 28, 9, 43, 34, tzinfo=datetime.timezone.utc), 'commenter': 'fatihemreyildiz', 'type': 'User'}, {'comment_id': 982187417, 'comment_body': 'Done 👍 ', 'comment_created': datetime.datetime(2022, 9, 28, 9, 44, 34, tzinfo=datetime.timezone.utc), 'commenter': 'fatihemreyildiz', 'type': 'User'}, {'comment_id': 982192742, 'comment_body': 'Yeah, I just saw that is duplicated, and I tested it nothing changes between making it maximum-hidden, only hidden. \r\n\r\nSo that will be removed.', 'comment_created': datetime.datetime(2022, 9, 28, 9, 49, 43, tzinfo=datetime.timezone.utc), 'commenter': 'fatihemreyildiz', 'type': 'User'}, {'comment_id': 982205347, 'comment_body': 'loadTrackInternal is called when the track is changed via buttons Next and Prev and in the first population, IMHO we need it in order to show the actual metadata of the track when the menu is changed.\r\n\r\nslotTrackChanged is called when the new metadata applied. ', 'comment_created': datetime.datetime(2022, 9, 28, 10, 2, 15, tzinfo=datetime.timezone.utc), 'commenter': 'fatihemreyildiz', 'type': 'User'}, {'comment_id': 982265592, 'comment_body': ""I tried that before a week ago or something, that didn't worked at that time. Because tags were displayed and editing their data wasn't changing their appearance on the QTreeItem.\r\n\r\nNow I tried it again, and changing their text actually worked. No need to update the whole tags again IMHO 👍 "", 'comment_created': datetime.datetime(2022, 9, 28, 11, 8, 41, tzinfo=datetime.timezone.utc), 'commenter': 'fatihemreyildiz', 'type': 'User'}, {'comment_id': 982304923, 'comment_body': 'Changed, hope that is matching with the code', 'comment_created': datetime.datetime(2022, 9, 28, 11, 51, 28, tzinfo=datetime.timezone.utc), 'commenter': 'fatihemreyildiz', 'type': 'User'}, {'comment_id': 982335064, 'comment_body': 'prefix pointer with p', 'comment_created': datetime.datetime(2022, 9, 28, 12, 22, 59, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 982335237, 'comment_body': '```suggestion\r\n    const mixxx::TrackMetadata trackMetadata = track.getMetadata();\r\n```', 'comment_created': datetime.datetime(2022, 9, 28, 12, 23, 10, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 982365453, 'comment_body': 'Then it should be changed in other functions too, I will rename all.', 'comment_created': datetime.datetime(2022, 9, 28, 12, 52, 11, tzinfo=datetime.timezone.utc), 'commenter': 'fatihemreyildiz', 'type': 'User'}]","[{'commit_sha': '7ce10107d8359b79d3df3ea809a4c82ecec7494b', 'committer_username': 'fatihemreyildiz', 'committer_name': 'Emre', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 20, 20, 2, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': '15f95cf7c821c89126335fb2c1066ffba19266a8', 'committer_username': 'fatihemreyildiz', 'committer_name': 'Emre', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 20, 20, 2, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0133b2a807641089f425375b1ee8e2d6b2b98358', 'committer_username': 'fatihemreyildiz', 'committer_name': 'Emre', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 20, 20, 2, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd5ce8df50bbe3fd5ad92c28edd05baa40f8ae4f2', 'committer_username': 'fatihemreyildiz', 'committer_name': 'Emre', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 20, 20, 2, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': '32ddb9eb6b7b373a08c73e8e91dc86c3a09f473e', 'committer_username': 'fatihemreyildiz', 'committer_name': 'Emre', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 20, 20, 2, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b73e7047053e91fb148f99bf163560e29e3730cb', 'committer_username': 'fatihemreyildiz', 'committer_name': 'Emre', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 20, 20, 2, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': '28dd4b3524a18f50920d01c17f868bd071441bc0', 'committer_username': 'fatihemreyildiz', 'committer_name': 'Emre', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 20, 20, 2, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b2c8e4265ad69cf09daf57f9760fd3cc950b669b', 'committer_username': 'fatihemreyildiz', 'committer_name': 'Emre', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 20, 20, 2, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': '545bb198a3d94d33d9b7bebfb28080a268becbda', 'committer_username': 'fatihemreyildiz', 'committer_name': 'Emre', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 20, 20, 2, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fe9276995dc2daaa70221d4cdcbe0a9aaf31616c', 'committer_username': 'fatihemreyildiz', 'committer_name': 'Emre', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 20, 20, 2, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8f3f195ee4f4d7a7541f40e71634117ed72db237', 'committer_username': 'fatihemreyildiz', 'committer_name': 'Emre', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 20, 20, 2, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': '787e2121b8acfc8c5f6bf07368815c525358d1e0', 'committer_username': 'fatihemreyildiz', 'committer_name': 'Emre', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 20, 20, 2, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0371268b174df6ab4a205eee3b81fee98a2006ff', 'committer_username': 'fatihemreyildiz', 'committer_name': 'Emre', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 20, 20, 2, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4d6a0454e86c1620e6fa094388bd2a675b96c586', 'committer_username': 'fatihemreyildiz', 'committer_name': 'Emre', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 20, 20, 2, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': '15893d5668bb5dd3aa830e90b1b88874f4b098b8', 'committer_username': 'fatihemreyildiz', 'committer_name': 'Emre', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 20, 20, 2, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8a4a3089d81c94adad6844e10d11741b24745ba9', 'committer_username': 'fatihemreyildiz', 'committer_name': 'Emre', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 20, 20, 2, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd34a85d385bd5fcccb2f00f22a927f382f152d25', 'committer_username': 'fatihemreyildiz', 'committer_name': 'Emre', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 20, 20, 2, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9cda679a4e34267944ed5f375ad69a97dcdb99ab', 'committer_username': 'fatihemreyildiz', 'committer_name': 'Emre', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 20, 20, 2, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': '349b73914da2b47d251b1258b4b69840036fc3f7', 'committer_username': 'fatihemreyildiz', 'committer_name': 'Emre', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 20, 20, 2, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3d9b241d300154b265509c32ebb16b87a5c609b1', 'committer_username': 'fatihemreyildiz', 'committer_name': 'Emre', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 20, 20, 2, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f0b45efd0a94e418538ba44dd456c9b62ed83a99', 'committer_username': 'fatihemreyildiz', 'committer_name': 'Emre', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 20, 20, 2, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f11534d617327b21e8716778e9af1767882b1ebd', 'committer_username': 'fatihemreyildiz', 'committer_name': 'Emre', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 20, 20, 2, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cc672d43ef8e0c413767df83f9053f8edb8890f2', 'committer_username': 'fatihemreyildiz', 'committer_name': 'Emre', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 20, 20, 2, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2061945759c61e37c30e4865a1499437a9223585', 'committer_username': 'fatihemreyildiz', 'committer_name': 'Emre', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 20, 20, 2, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': '47bbc157885b4f343479d7f4291970fc67744f3e', 'committer_username': 'fatihemreyildiz', 'committer_name': 'Emre', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 20, 20, 2, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c7001a551746c4a755ff2d0e6e735b36ed042adb', 'committer_username': 'fatihemreyildiz', 'committer_name': 'Emre', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 20, 20, 2, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5182072177134f43ea54a9daec6ab752955346d1', 'committer_username': 'fatihemreyildiz', 'committer_name': 'Emre', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 20, 20, 2, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': '79ce66b4e9e9018b1978e7d8d6a61f37e3f8dc02', 'committer_username': 'fatihemreyildiz', 'committer_name': 'Emre', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 20, 20, 2, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5fdf038cfb7b349d1ef3754ad6f222ea0a5a6fdd', 'committer_username': 'fatihemreyildiz', 'committer_name': 'Emre', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 20, 20, 2, 55, tzinfo=datetime.timezone.utc)}]",Emre,67206006,,User,,5,,21,10
1023542384,Ask user after changing the cover art.,"Hey everyone!

This is a PR about TODO that was in the code base. The TODO was this:

// TODO(rryan): Ask if user wants to copy the file.

I think the TODO's aim was to create a copy of the cover art where the track located, so if Mixxx looks for the possible cover arts, the cover art will be picked automatically.

But adding pop-ups everywhere is not nice for the use case as we talked before. 

For now, it is just for to give us the idea about this TODO and how it can be improved. We can have a preference option for this usability or maybe a checkbox while choosing a cover art. 

What do you think?

---
Current State of the PR.

![CompareCoverArts](https://user-images.githubusercontent.com/67206006/189941556-09344b93-dbc3-450f-8470-6ee71a211377.png)
",False,4887,https://api.github.com/repos/mixxxdj/mixxx/pulls/4887,https://github.com/mixxxdj/mixxx/pull/4887,open,1086,308,27,12,26,33,3,0,"[{'name': 'library'}, {'name': 'ui'}, {'name': 'coverart'}]",2022-08-11 07:48:35+00:00,,0.0,,"[{'comment_id': 943208587, 'comment_body': ""I think you can add a check if the cover is not already in the location before asking. \r\nIf the picked cover is in a different location, we need to consider if it is OK to overwrite the existing. \r\n\r\nThis is similar to change track metadata on one hand, on the other hand, we can't be sure if the file is not referenced from something else. "", 'comment_created': datetime.datetime(2022, 8, 11, 8, 8, 5, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 943216216, 'comment_body': 'Maybe we can inform the  user here where that would be. ', 'comment_created': datetime.datetime(2022, 8, 11, 8, 16, 53, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 943221630, 'comment_body': 'Fair Enough. Normally with my tests the cover art overwritten again and again, so it is a must to have these checks. \r\n\r\nIf they are in the same location no need to ask about it.\r\nIf the cover art has the same name we should ask if is it okay to overwrite it - same pop up with the different message maybe?\r\n\r\nIs there a way for us to check if the file is referenced?\r\n\r\n', 'comment_created': datetime.datetime(2022, 8, 11, 8, 23, 16, tzinfo=datetime.timezone.utc), 'commenter': 'fatihemreyildiz', 'type': 'User'}, {'comment_id': 947804612, 'comment_body': 'Here the full file path should be shown. ', 'comment_created': datetime.datetime(2022, 8, 17, 11, 18, 6, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 947805632, 'comment_body': '""The file already exists ... "" the cover art guesser looks for more locations, I consider all as related.  ', 'comment_created': datetime.datetime(2022, 8, 17, 11, 19, 20, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 947806938, 'comment_body': 'Cover Art saved as <full file path> ', 'comment_created': datetime.datetime(2022, 8, 17, 11, 20, 59, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 947808647, 'comment_body': 'We should try to make this atomic, in a way that in case of a follow up error the original file remains. ', 'comment_created': datetime.datetime(2022, 8, 17, 11, 23, 2, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 947809559, 'comment_body': 'All file operations should be done in a separate thread, to not stall the waveforms or such during disk access. ', 'comment_created': datetime.datetime(2022, 8, 17, 11, 24, 6, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 947812725, 'comment_body': 'You may take a look at TrackExportWorker how we can do it. ', 'comment_created': datetime.datetime(2022, 8, 17, 11, 27, 39, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 967797530, 'comment_body': 'The function body can be replaced with `= default;`', 'comment_created': datetime.datetime(2022, 9, 11, 9, 59, 45, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 967797872, 'comment_body': 'The parent needs to be passed to the QObject constructor. The member variable can be disposed.\r\nUse `parent()` instead. ', 'comment_created': datetime.datetime(2022, 9, 11, 10, 2, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 967798248, 'comment_body': 'When is this code used? Is there a way to cancel this single file operation? ', 'comment_created': datetime.datetime(2022, 9, 11, 10, 4, 47, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 967798744, 'comment_body': 'Does this call a dialog from a worker thread? \r\nI am not sure if this works under all circumstances.\r\nAt least it is more clean to do GUI stuff from the main thread. ', 'comment_created': datetime.datetime(2022, 9, 11, 10, 9, 3, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 967798777, 'comment_body': ""Thank you, I must've forgotten that."", 'comment_created': datetime.datetime(2022, 9, 11, 10, 9, 21, tzinfo=datetime.timezone.utc), 'commenter': 'fatihemreyildiz', 'type': 'User'}, {'comment_id': 967798944, 'comment_body': ""I am sorry I couldn't fully understand, what exactly means `cancel single file operation`?"", 'comment_created': datetime.datetime(2022, 9, 11, 10, 10, 31, tzinfo=datetime.timezone.utc), 'commenter': 'fatihemreyildiz', 'type': 'User'}, {'comment_id': 967799224, 'comment_body': 'This should be done in a more atomic way. \r\nCopy the new file in the destination folder with a temp name, delete the old file and renale the new file.\r\nWe have a class for this. ', 'comment_created': datetime.datetime(2022, 9, 11, 10, 12, 37, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 967800343, 'comment_body': 'We have https://github.com/mixxxdj/mixxx/blob/2fe0fc58b1be4813b6a3f73288d3468eb775ba6b/src/sources/metadatasourcetaglib.cpp#L635\r\nFor this. \r\nNot sure if this class suits. If yes, you may crate a Par for moving this class into a separate file in the utility folder. ', 'comment_created': datetime.datetime(2022, 9, 11, 10, 21, 18, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 967801091, 'comment_body': 'Does the code implement a feature, or is it a left-over? That was my original question. ', 'comment_created': datetime.datetime(2022, 9, 11, 10, 27, 30, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 967801212, 'comment_body': 'Ah I see this is the pattern used in the export worker. So it is probably OK. ', 'comment_created': datetime.datetime(2022, 9, 11, 10, 28, 13, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 967802062, 'comment_body': 'This comes up already as a critical errer.\r\n```suggestion\r\n```', 'comment_created': datetime.datetime(2022, 9, 11, 10, 34, 39, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 967810896, 'comment_body': 'Member variable used on [here](https://github.com/mixxxdj/mixxx/blob/b9e082c2f8285ea11dec7ea0980f66081d3b33e9/src/library/export/coverartcopywizard.cpp#L5). If passing parent to QObject constructor needed, should it be also adjusted as well?', 'comment_created': datetime.datetime(2022, 9, 11, 11, 32, 32, tzinfo=datetime.timezone.utc), 'commenter': 'fatihemreyildiz', 'type': 'User'}, {'comment_id': 967816456, 'comment_body': ""I don't think that is a left over IMHO. That starts the copying cover art. It overrides the QThread's run() method. Could you please correct me if I am wrong."", 'comment_created': datetime.datetime(2022, 9, 11, 12, 9, 25, tzinfo=datetime.timezone.utc), 'commenter': 'fatihemreyildiz', 'type': 'User'}, {'comment_id': 967816957, 'comment_body': 'Okay 👍 . I will take a look, and if it works, new PR will be opened. ', 'comment_created': datetime.datetime(2022, 9, 11, 12, 12, 3, tzinfo=datetime.timezone.utc), 'commenter': 'fatihemreyildiz', 'type': 'User'}, {'comment_id': 967817090, 'comment_body': 'Should `kLogger.critical()` would work?', 'comment_created': datetime.datetime(2022, 9, 11, 12, 13, 18, tzinfo=datetime.timezone.utc), 'commenter': 'fatihemreyildiz', 'type': 'User'}, {'comment_id': 968262284, 'comment_body': 'Just remove the qDebug() VERIFY_OR_DEBUG_ASSERT has an internal logging that is sufficient. ', 'comment_created': datetime.datetime(2022, 9, 12, 10, 46, 49, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 968264982, 'comment_body': 'Perfect, thank you. ', 'comment_created': datetime.datetime(2022, 9, 12, 10, 50, 4, tzinfo=datetime.timezone.utc), 'commenter': 'fatihemreyildiz', 'type': 'User'}, {'comment_id': 968569168, 'comment_body': 'This is redundant. In combination with the Title and the ""Override"" button.\r\nIn addition this is hard to read due to line wrap. \r\n\r\n---\r\n**Cover art file already exists.**\r\n\r\nFile:       artist - title.jpg \r\nFolder:  /home/User/Music/Group \r\n\r\nOverride existing file?  This can not be undone!\r\n\r\n                          [Cancel] [OK] \r\n---\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n ', 'comment_created': datetime.datetime(2022, 9, 12, 15, 34, 7, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 968569627, 'comment_body': 'The user case for ""Update without Overwrite"" does not work on case of a MusikBrainz cover, because we have no alternative location. ', 'comment_created': datetime.datetime(2022, 9, 12, 15, 34, 34, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 968571942, 'comment_body': 'This message is hidden behind the override question, which looks kind of cluttered. \r\nCan we remove that? ', 'comment_created': datetime.datetime(2022, 9, 12, 15, 36, 44, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 968689753, 'comment_body': 'Yeah, that can be removed.\r\n\r\nLater on we can also add two little cover art labels for comparison. ', 'comment_created': datetime.datetime(2022, 9, 12, 17, 16, 49, tzinfo=datetime.timezone.utc), 'commenter': 'fatihemreyildiz', 'type': 'User'}, {'comment_id': 968691871, 'comment_body': ""So we either overwrite or not update the cover art. Would it be okay in the use case, maybe we don't show this button for MusicBrainz and we show it for manual cover art selection.\r\n\r\nWhat do you think?"", 'comment_created': datetime.datetime(2022, 9, 12, 17, 18, 2, tzinfo=datetime.timezone.utc), 'commenter': 'fatihemreyildiz', 'type': 'User'}, {'comment_id': 968693272, 'comment_body': 'That seems way better also the warning is really nice to have, Thank you 👍 ', 'comment_created': datetime.datetime(2022, 9, 12, 17, 19, 9, tzinfo=datetime.timezone.utc), 'commenter': 'fatihemreyildiz', 'type': 'User'}, {'comment_id': 969778826, 'comment_body': 'I have added this class in the try-out commit.  So I will mark this as a resolved for now.', 'comment_created': datetime.datetime(2022, 9, 13, 15, 28, 20, tzinfo=datetime.timezone.utc), 'commenter': 'fatihemreyildiz', 'type': 'User'}]","[{'commit_sha': 'bf3be1810a5813ae87df30bdd4cc95ada76ba70b', 'committer_username': 'fatihemreyildiz', 'committer_name': 'Emre', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 20, 20, 2, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7c27562a0c5983da02ba6bdf713d21dc9de48cc3', 'committer_username': 'fatihemreyildiz', 'committer_name': 'Emre', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 20, 20, 2, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ade547f6216c69dbb50800600782225ab64cdc8f', 'committer_username': 'fatihemreyildiz', 'committer_name': 'Emre', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 20, 20, 2, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ee5b532e719405167ff5ea053763db5ac9297495', 'committer_username': 'fatihemreyildiz', 'committer_name': 'Emre', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 20, 20, 2, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': '66c0fa580a5defe83ef38ca421671e934f5e6b40', 'committer_username': 'fatihemreyildiz', 'committer_name': 'Emre', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 20, 20, 2, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b9e082c2f8285ea11dec7ea0980f66081d3b33e9', 'committer_username': 'fatihemreyildiz', 'committer_name': 'Emre', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 20, 20, 2, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ebf22f2bc99abd46776616bd3b0449becf5dd8c1', 'committer_username': 'fatihemreyildiz', 'committer_name': 'Emre', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 20, 20, 2, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': '852086e87f1014906398e8b7f3f172dc6af612e1', 'committer_username': 'fatihemreyildiz', 'committer_name': 'Emre', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 20, 20, 2, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3b2fc5ec785c3f1566172881db26e27673122c74', 'committer_username': 'fatihemreyildiz', 'committer_name': 'Emre', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 20, 20, 2, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd6b56314c7a330a879605b0589ebeb165de167ff', 'committer_username': 'fatihemreyildiz', 'committer_name': 'Emre', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 20, 20, 2, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f02e277a3adf1d14c1fa8ddf5f92c5b3b1b9fb08', 'committer_username': 'fatihemreyildiz', 'committer_name': 'Emre', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 20, 20, 2, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': '693ab90bff30f88bf4bbaaae64a574a251dd4c72', 'committer_username': 'fatihemreyildiz', 'committer_name': 'Emre', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 20, 20, 2, 55, tzinfo=datetime.timezone.utc)}]",Emre,67206006,,User,,5,,21,10
1032637807,"CoverArtUtils: Fix Reload From File/Folder, Updates Wrong Cover Art","This PR aims to solve this bug mentioned on [Launchpad](https://bugs.launchpad.net/mixxx/+bug/1985843).

This simply fixes to wrong cover art update if the names has more than one ""."" dot. I
track.1.mp3
track.2.mp3
track.3.mp3
track.4.jpg
track.5.jpg
 
If track.1-track.2-track.3's cover arts updated via ""Reload from file/folder"" it updates it with track.4.jpg. 

With this change, it looks for the complete full name, so track.1.mp3 won't be updated with track.4.jpg. 

But with that change, this can change the old behavior, if the files named as;
track.1.mp3.jpg
track.1.mp3
updating wouldn't not update the cover art, to not change the behavior of old updating, there is an another block added. If complete full name is not working, this will look for file name of the track `""track.1.mp3""` and complete name of the cover art `""track.1.mp3"".jpg`",True,4909,https://api.github.com/repos/mixxxdj/mixxx/pulls/4909,https://github.com/mixxxdj/mixxx/pull/4909,closed,8,3,1,2,7,2,2,0,"[{'name': 'controller mappings'}, {'name': 'library'}]",2022-08-22 10:37:59+00:00,2022-08-23 17:31:54+00:00,111235.0,"1 day, 6:53:55","[{'comment_id': 951455815, 'comment_body': '```suggestion\r\n                bestType = TRACK_BASENAME;\r\n                bestInfo = &file;\r\n```', 'comment_created': datetime.datetime(2022, 8, 22, 13, 41, 17, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 951481547, 'comment_body': ""I've added the missing line. "", 'comment_created': datetime.datetime(2022, 8, 22, 14, 3, 29, tzinfo=datetime.timezone.utc), 'commenter': 'fatihemreyildiz', 'type': 'User'}]","[{'commit_sha': '49d621858ffa456313a0f14ea162ce0bacd73d87', 'committer_username': 'fatihemreyildiz', 'committer_name': 'Emre', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 20, 20, 2, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e7bfa37b29bed70286ae7a7a8150698a86da2d3a', 'committer_username': 'fatihemreyildiz', 'committer_name': 'Emre', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 20, 20, 2, 55, tzinfo=datetime.timezone.utc)}]",Emre,67206006,,User,,5,,21,10
1036951882,Fix: Rate limit exceeds for Musicbrainztask.,This PR aims to fix bug [#10795 Rate Limit exceeds for some songs while Importing Metadata From Musicbrainz](https://github.com/mixxxdj/mixxx/issues/10795).,False,10822,https://api.github.com/repos/mixxxdj/mixxx/pulls/10822,https://github.com/mixxxdj/mixxx/pull/10822,closed,88,26,7,5,10,20,0,0,[],2022-08-25 15:46:28+00:00,2022-09-12 10:52:27+00:00,1537559.0,"17 days, 19:05:59","[{'comment_id': 955149642, 'comment_body': ""This new state does not belong to the low-level network task. `WebTask` has no notion of retries and doesn't need this state for implementing its internal state machine."", 'comment_created': datetime.datetime(2022, 8, 25, 15, 56, 29, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 955218905, 'comment_body': 'This does NOT control retries and the state IS used in WebTask itself. \r\n\r\nIt controls the new state where the WebTask is in the idle loop between two requests. Before there was no need for this state because the new request was issued just after the old one. So the solution looks like a valid one.\r\n\r\nI am not saying this is the only possible solution, so if you like to see another solution for this Bugfix. Please give some hints how. ', 'comment_created': datetime.datetime(2022, 8, 25, 17, 0, 55, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 955402933, 'comment_body': 'A task models the lifecycle of a single request. It could be restarted while not pending. Retries have to be controlled by the calling code.\r\n\r\nIntroducing a Trojan Horse into the base class just because some derived class wants to do implicit retries is the wrong approach.\r\n\r\nI strongly recommend not to merge this PR. It introduces unneeded complexity.', 'comment_created': datetime.datetime(2022, 8, 25, 20, 38, 41, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 955469134, 'comment_body': ""You could create multiple tasks performing concurrent requests. Adding an isolated and independent inhibit timer for each instance doesn't make any sense at all."", 'comment_created': datetime.datetime(2022, 8, 25, 22, 25, 34, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 955473981, 'comment_body': '> A task models the lifecycle of a single request.\r\n\r\nSorry, that is not correct. You may have designed it like that original, but since MusicBrainzRecordingsTask that inherits from WebTask works with a couple of request this no longer the case. See: MusicBrainzRecordingsTask::continueWithNextRequest();\r\n\r\n> Retries have to be controlled by the calling code.\r\n\r\nAgain, this change has nothing to do with reties.  \r\n\r\nThis PR is a valid solution for a real issue, maybe not perfect. So it would be helpful to suggest improvements instead of to title it with striking words.  \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n', 'comment_created': datetime.datetime(2022, 8, 25, 22, 36, 37, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 955485851, 'comment_body': 'Sorry, I overlooked that. Long ago. I was confused by the wording ""Looping"" which is used out of context and has no meaning in the context of `WebTask`. This misunderstanding also reveals why adding this logic to `WebTask` would be wrong.\r\n\r\n`continueWithNextRequest()` is undefined, probably a left over, please delete it.\r\n\r\nI suggest to use a local timer in MusicBrainzRecordingsTask and invoke the next slotStart() with a delay. You could even override slotStart()/slotAbort() locally to detect a pending timer if needed.', 'comment_created': datetime.datetime(2022, 8, 25, 23, 2, 37, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 955506585, 'comment_body': 'We must not perform concurrent requests. Only one per second is allowed. Using multiple tasks for this is out of scope of this bugfix PR. ', 'comment_created': datetime.datetime(2022, 8, 25, 23, 49, 39, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 955511972, 'comment_body': '```suggestion\r\n        Waiting,\r\n```\r\nThis is the state where the task is waiting until the time for rate limiting is over. \r\nOr WaitingForNextRequestSlot. \r\n', 'comment_created': datetime.datetime(2022, 8, 26, 0, 0, 20, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 955512631, 'comment_body': '...then implement the throttling locally in the convoluted MusicBrainzRecordingsTask class and keep the base and all other classes clean.', 'comment_created': datetime.datetime(2022, 8, 26, 0, 1, 58, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 955513068, 'comment_body': '> I suggest to use a local timer in MusicBrainzRecordingsTask and invoke the next slotStart() with a delay. \r\n\r\nDone \r\n\r\n> You could even override slotStart()/slotAbort() locally to detect a pending timer if needed.\r\n\r\nWe have discussed that but rejected the idea because it either introduces code duplication or is a bugger refactoring. \r\nThe additional state is a good solution because the Task is actually in that state. ', 'comment_created': datetime.datetime(2022, 8, 26, 0, 3, 8, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 955514281, 'comment_body': '```suggestion\r\n    void doWaitingTaskAborted() override;\r\n```', 'comment_created': datetime.datetime(2022, 8, 26, 0, 6, 11, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 955514552, 'comment_body': 'We need finally rename it according to the name of the new state.  ', 'comment_created': datetime.datetime(2022, 8, 26, 0, 6, 54, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 955516059, 'comment_body': '```suggestion\r\n    auto timerSinceLastRequest = m_measurementTimer.elapsed(true);\r\n```', 'comment_created': datetime.datetime(2022, 8, 26, 0, 9, 39, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 955518522, 'comment_body': ""I still disagree. It's a move in the wrong direction."", 'comment_created': datetime.datetime(2022, 8, 26, 0, 16, 15, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 955519111, 'comment_body': 'Which code duplication? It would just be a shallow wrapper around the base class slots that handles the pending timer. It is actually an supervision or overlay state and reflects the target design for a future refactoring, i.e. when extracting the looping into an orchestration task.', 'comment_created': datetime.datetime(2022, 8, 26, 0, 17, 57, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 955523143, 'comment_body': ""If you really want to implement a throttling between subsequent requests then you could implement it entirely in the base class by adding a configuration parameter. But I don't recommend it, because the base class with its state machine is already complex.\r\n\r\nThe distributed approach introduced by this PR is hard to maintain and not needed."", 'comment_created': datetime.datetime(2022, 8, 26, 0, 29, 24, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 955524340, 'comment_body': 'Which code duplication?\r\n\r\nslotStart() and slotAbort()\r\n\r\n> It is actually an supervision or overlay state and reflects the target design for a future refactoring\r\n\r\nThe additional state is a much more clean and maintainable solution. Less code duplication and a clear distinguished state from the other states that actually exists. I am pretty confident with the current solution and do not plan a future refactoring.  \r\n\r\n\r\n', 'comment_created': datetime.datetime(2022, 8, 26, 0, 31, 51, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 955524955, 'comment_body': 'This sound like a giant scope creep. No interest for this simple bugfix.  ', 'comment_created': datetime.datetime(2022, 8, 26, 0, 33, 41, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 955525978, 'comment_body': 'I wish you luck.', 'comment_created': datetime.datetime(2022, 8, 26, 0, 36, 48, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 955724186, 'comment_body': 'Thank you for the review. Done :+1: ', 'comment_created': datetime.datetime(2022, 8, 26, 7, 5, 31, tzinfo=datetime.timezone.utc), 'commenter': 'fatihemreyildiz', 'type': 'User'}]","[{'commit_sha': '518c7c2eb091c966605b2e211680796a3c1c5549', 'committer_username': 'fatihemreyildiz', 'committer_name': 'Emre', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 20, 20, 2, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': '17ddcf77bb4e5a5e8e863ebe48115ced68649871', 'committer_username': 'fatihemreyildiz', 'committer_name': 'Emre', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 20, 20, 2, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ec26d8de80da1e9ba70d41ce21f56ea5c77486cf', 'committer_username': 'fatihemreyildiz', 'committer_name': 'Emre', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 20, 20, 2, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': '29e6e55079e8fdc70168766e19676dba7c50d50e', 'committer_username': 'fatihemreyildiz', 'committer_name': 'Emre', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 20, 20, 2, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': '372c85f0432ce47d95c9cad15b6a4472cc7f0d78', 'committer_username': 'fatihemreyildiz', 'committer_name': 'Emre', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 20, 20, 2, 55, tzinfo=datetime.timezone.utc)}]",Emre,67206006,,User,,5,,21,10
1049283145,2.3 Musicbrainz fixes,"This includes a couple of fixes regarding non fatal errors and missing GUI feedback after client timeout.
This also improves the error message that is shown in some cases. 

Fixes https://github.com/mixxxdj/mixxx/issues/10883",True,10875,https://api.github.com/repos/mixxxdj/mixxx/pulls/10875,https://github.com/mixxxdj/mixxx/pull/10875,closed,546,167,14,23,20,10,4,0,"[{'name': 'library'}, {'name': 'build'}, {'name': 'code quality'}, {'name': 'bug'}]",2022-09-07 22:28:19+00:00,2022-11-03 14:00:41+00:00,4894342.0,"56 days, 15:32:22","[{'comment_id': 965363775, 'comment_body': 'How could you be sure that this only happens for invalid URLs? Derived classes may return `nullptr` for whatever obstacles they encounter during doStartNetworkRequest(). Making such implicit assumptions is incorrect.', 'comment_created': datetime.datetime(2022, 9, 7, 22, 57, 52, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 965366266, 'comment_body': 'Client- and server-side abort should be distinguished. Why did you merge them? The state `TimedOut` is wrong when manually aborting a request.', 'comment_created': datetime.datetime(2022, 9, 7, 23, 1, 13, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 965368439, 'comment_body': 'How could the internal state be already Failed when a network reply arrives?', 'comment_created': datetime.datetime(2022, 9, 7, 23, 4, 18, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 965370888, 'comment_body': 'The `do` prefix indicates the *Template Method* pattern with a pure virtual function that is only invoked by the base class and inaccessible for derived classes. Derived classes are supposed to implement those functions, but are not allowed to invoke them at arbitrary times.\r\n\r\nIn contrast this seems to be an ordinary, overridable virtual function. It is also unclear even clear why and when you should override it?', 'comment_created': datetime.datetime(2022, 9, 7, 23, 9, 33, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 965575340, 'comment_body': 'This is because this function is also called, before the request is issued and the state goes to the pending state.\r\nhttps://github.com/mixxxdj/mixxx/blob/41abb4da5f68b796db44a3b52f8903115c3bcd3b/src/network/webtask.cpp#L200\r\nBefore, the state was artificially set to State::Pending, even though there was already a failure detected.\r\nProbably just to trick the original assertion.\r\nThis is fixed now for a traceable usage of states.', 'comment_created': datetime.datetime(2022, 9, 8, 6, 58, 44, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 965580514, 'comment_body': 'We are here in onNetworkError() this is only called if a start request fails.\r\nThe case you mention is handled in slotAbort().\r\nThe change was required, because sometime MusicBrainz does not respond at all.\r\nIn that case the client Timothy of 60 s takes place. This case is a network error as well, and leads to a proper feedback about this situation to the user. ', 'comment_created': datetime.datetime(2022, 9, 8, 7, 5, 15, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 965583780, 'comment_body': 'Ok, I will change the message accordingly. ', 'comment_created': datetime.datetime(2022, 9, 8, 7, 9, 14, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 965588445, 'comment_body': 'What is you suggestion to improve this situation.\r\n', 'comment_created': datetime.datetime(2022, 9, 8, 7, 14, 37, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 967314679, 'comment_body': 'O have renamed onNetworkError() to doNetworkError()', 'comment_created': datetime.datetime(2022, 9, 9, 17, 25, 27, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 967391043, 'comment_body': 'https://github.com/mixxxdj/mixxx/pull/10884\r\n\r\nWriting code is easier than fruitless arguing and explaining.\r\n\r\nOverride `doNetworkReplyAborted()` in the derived class and do whatever needs to be done.', 'comment_created': datetime.datetime(2022, 9, 9, 19, 14, 17, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}]","[{'commit_sha': '04bbef654a20c2976be403a2afdeedab089d6b0f', 'committer_username': 'daschuer', 'committer_name': 'Daniel Schürmann', 'committer_email': None, 'commit_date': datetime.datetime(2012, 5, 25, 9, 53, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2d78c63918a1993ba99647e529c09ecd59201d89', 'committer_username': 'daschuer', 'committer_name': 'Daniel Schürmann', 'committer_email': None, 'commit_date': datetime.datetime(2012, 5, 25, 9, 53, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '48d037822c91e855cf0d7649e74e2965f6ecd134', 'committer_username': 'fatihemreyildiz', 'committer_name': 'Emre', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 20, 20, 2, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a75d93f9c309ad904edf2b6c14a5051273ffe4e0', 'committer_username': 'daschuer', 'committer_name': 'Daniel Schürmann', 'committer_email': None, 'commit_date': datetime.datetime(2012, 5, 25, 9, 53, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ad3172dcd647dbd87dafb8567c6a692ffaac79cd', 'committer_username': 'daschuer', 'committer_name': 'Daniel Schürmann', 'committer_email': None, 'commit_date': datetime.datetime(2012, 5, 25, 9, 53, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '404d30890135d0deb2d0a753ee4b7d63803cf876', 'committer_username': 'daschuer', 'committer_name': 'Daniel Schürmann', 'committer_email': None, 'commit_date': datetime.datetime(2012, 5, 25, 9, 53, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ef94bb0faa688382b3fbdda99c3db80e3ca47c0e', 'committer_username': 'daschuer', 'committer_name': 'Daniel Schürmann', 'committer_email': None, 'commit_date': datetime.datetime(2012, 5, 25, 9, 53, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '41abb4da5f68b796db44a3b52f8903115c3bcd3b', 'committer_username': 'daschuer', 'committer_name': 'Daniel Schürmann', 'committer_email': None, 'commit_date': datetime.datetime(2012, 5, 25, 9, 53, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7ba6ae4bce1d20d50dc56d1a4766c76a47c19a33', 'committer_username': 'daschuer', 'committer_name': 'Daniel Schürmann', 'committer_email': None, 'commit_date': datetime.datetime(2012, 5, 25, 9, 53, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '498e828fb0811386ffd5cd94d107fb0f565ab4de', 'committer_username': 'daschuer', 'committer_name': 'Daniel Schürmann', 'committer_email': None, 'commit_date': datetime.datetime(2012, 5, 25, 9, 53, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '86f4c076f332c6bc0258e0fcc06c80f77ffc0bb1', 'committer_username': 'daschuer', 'committer_name': 'Daniel Schürmann', 'committer_email': None, 'commit_date': datetime.datetime(2012, 5, 25, 9, 53, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1e34da3ceb30b1497bff862fcddc5b88c5425fa8', 'committer_username': 'daschuer', 'committer_name': 'Daniel Schürmann', 'committer_email': None, 'commit_date': datetime.datetime(2012, 5, 25, 9, 53, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a29fa9480a0e456ed81e7a1ffed17aa8f1b3fd47', 'committer_username': 'daschuer', 'committer_name': 'Daniel Schürmann', 'committer_email': None, 'commit_date': datetime.datetime(2012, 5, 25, 9, 53, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9f69b962d141201becedf000db6d9b280059885a', 'committer_username': 'daschuer', 'committer_name': 'Daniel Schürmann', 'committer_email': None, 'commit_date': datetime.datetime(2012, 5, 25, 9, 53, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ba501bcf6434b0529f2069627d22509541086538', 'committer_username': 'daschuer', 'committer_name': 'Daniel Schürmann', 'committer_email': None, 'commit_date': datetime.datetime(2012, 5, 25, 9, 53, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7c388fad36472d88134b1f42c2abe7e73b6ccff9', 'committer_username': 'daschuer', 'committer_name': 'Daniel Schürmann', 'committer_email': None, 'commit_date': datetime.datetime(2012, 5, 25, 9, 53, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8b1fffcccbd637e370746ebc24a5dab6a51dcc54', 'committer_username': 'daschuer', 'committer_name': 'Daniel Schürmann', 'committer_email': None, 'commit_date': datetime.datetime(2012, 5, 25, 9, 53, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '10326bc81e17ac9b5ac76e5e9834869448664e2b', 'committer_username': 'daschuer', 'committer_name': 'Daniel Schürmann', 'committer_email': None, 'commit_date': datetime.datetime(2012, 5, 25, 9, 53, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e53c5581f0ae6d42bdbb380b947552f2e862b8d4', 'committer_username': 'daschuer', 'committer_name': 'Daniel Schürmann', 'committer_email': None, 'commit_date': datetime.datetime(2012, 5, 25, 9, 53, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a4d8b70a8142b1becf869119462c176c8f62bdef', 'committer_username': 'daschuer', 'committer_name': 'Daniel Schürmann', 'committer_email': None, 'commit_date': datetime.datetime(2012, 5, 25, 9, 53, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'eb217e948b1def01e5a47ab0c21446e9c122e10a', 'committer_username': 'daschuer', 'committer_name': 'Daniel Schürmann', 'committer_email': None, 'commit_date': datetime.datetime(2012, 5, 25, 9, 53, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ec097541af3c18b2872eb43ace2af2d6d31816f7', 'committer_username': 'daschuer', 'committer_name': 'Daniel Schürmann', 'committer_email': None, 'commit_date': datetime.datetime(2012, 5, 25, 9, 53, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bb21444e66f48ad8e006a8b2a7cc889b1f8ee541', 'committer_username': 'daschuer', 'committer_name': 'Daniel Schürmann', 'committer_email': None, 'commit_date': datetime.datetime(2012, 5, 25, 9, 53, 25, tzinfo=datetime.timezone.utc)}]",Daniel Schürmann,1777442,,User,,44,,2,42
1045116814,Track Suggestion Feature: Get tracks suggestions according to the track playing on the decks.,"Hey everyone!

This is a PR about track suggestion feature. As we talked on the [Zulip Channel](https://mixxx.zulipchat.com/#narrow/stream/109215-gsoc/topic/GSoC.20Project.3A.20Track.20Suggestion.20Feature/near/283740040) before, I have opened this PR as a POC.

This has been discussed before as a feature before on the bug tracker [#6106](https://github.com/mixxxdj/mixxx/issues/6106) and on the [forum](https://mixxx.discourse.group/t/individual-possible-followers-for-each-track-track-mind/11893). These discussions were my starting points. Also there is a PR which uses last.fm's API to add a related artist #4885. First of all I would like to thank everyone who is participated in those discussions. 

This PR aims to get track suggestions via Last.fm API. Which uses the track information which is placed on the deck. In order to get suggestions, we need to send the title and the artist as a parameter. MBID can be also used too for this endpoint (This is an important detail and maybe can be used later).

In this PR as a POC, I have added a external library on the library side bar called ""Track Suggestion"", I have made an icon roughly for that. This library can be turned on-off on the preferences->library, just like any other external libraries. Here how this external library looks like on the library side bar:
![LibrarySideBar](https://user-images.githubusercontent.com/67206006/188196291-0836b6cd-6c10-4b95-8581-02cf67e550ca.png)

There are 4 decks as a Tree Item, when a track loaded to the deck this item's labels are changed to track's Title&Artist. ![Example](https://user-images.githubusercontent.com/67206006/188197533-e5a6b723-2d2b-4ac1-9be6-e770d339168d.png)

If user clicks on this Tree-item and there is no suggestion fetched before, the button shows up 
![button](https://user-images.githubusercontent.com/67206006/188197880-2aedb287-93fd-4358-9dc6-35bc15866f0d.png)

After pressing this button, to show the process has begun, I have added QProgressBar as a busy indicator, it simply looks like this ![BusyIndicatorProgress](https://user-images.githubusercontent.com/67206006/188198246-5c5f5134-d075-4fde-8861-20a4f61ea189.png)

If the fetching is success, we can see the suggested tracks. These suggested tracks are saved to the database in a new table called ""suggestion_library"". As a POC, the response is saved as an XML file in the same location as where track located. This can be improved of course.
![Deck1 Suggestions](https://user-images.githubusercontent.com/67206006/188198630-309df18e-8b3b-40e9-bcac-eb7167653859.png)

For the most of the times, last.fm response can only consists just the artist name (no tracks, no additional info). For this sort of tracks, the result saved to the database as a single track named as:
![NoSuggestionAvailable](https://user-images.githubusercontent.com/67206006/188199102-03f27420-85c4-4ade-b315-238d358a4b0e.png)

If the network fails for some reason, the button label changed to this
![FailFeedback](https://user-images.githubusercontent.com/67206006/188199476-346838bc-6ebf-4bc5-8076-005def4b26d2.png)

There are few problems regarding to this feature, first as we talked before the miss-typed track title and artist. To get suggestions, the track's title and artist should be spelled correctly. Also, even tho they are correct, the response can be empty for some tracks. I have also left some comments on the code. 

This feature can be expended to show the cover arts, get the similar artists (just like #4885), find if the suggestions are actually **exists**.

What do you think?

If you would like to try this PR, since this is a POC and I've added a table to the Database, just in case, it would be nice to **backup the database**.

I would be very happy to see your ideas-feedbacks-comments.

Thanks in advance :) 

*Latest Status Screenshot *

![TrackSuggestionFeatureLastStatus](https://user-images.githubusercontent.com/67206006/192157962-98541d58-c05a-4772-9d90-2bf84c854893.png)
",False,10860,https://api.github.com/repos/mixxxdj/mixxx/pulls/10860,https://github.com/mixxxdj/mixxx/pull/10860,open,1321,10,24,12,21,48,4,0,"[{'name': 'library'}, {'name': 'ui'}, {'name': 'build'}, {'name': 'code quality'}]",2022-09-02 16:53:19+00:00,,0.0,,"[{'comment_id': 962288223, 'comment_body': 'How about using a light bulb here? https://icon-sets.iconify.design/mdi/lightbulb-on/\r\nMaybe with an exclamation mark or surrounded by a speech bubble. ', 'comment_created': datetime.datetime(2022, 9, 4, 10, 21, 26, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 962288512, 'comment_body': 'What is the use of this column, it contains currently always the same data.', 'comment_created': datetime.datetime(2022, 9, 4, 10, 23, 50, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 962289119, 'comment_body': 'How is this men to work? Do the suggestions change according to the listeners habits? Doe we finally require a personal account for each user? ', 'comment_created': datetime.datetime(2022, 9, 4, 10, 28, 34, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 962289409, 'comment_body': 'Ah, so this is only a workaround for a segfault. So we should probably track that down instead. ', 'comment_created': datetime.datetime(2022, 9, 4, 10, 31, 18, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 962289915, 'comment_body': ""Oh, that's a good icon. It's shows like the Mixxx has an idea to show suggestions."", 'comment_created': datetime.datetime(2022, 9, 4, 10, 34, 30, tzinfo=datetime.timezone.utc), 'commenter': 'fatihemreyildiz', 'type': 'User'}, {'comment_id': 962290033, 'comment_body': 'I am considering if it makes sense to perfix the last.fm specific columns with Last.FM This way we may reuse the entry for other providers after adding their measures. ', 'comment_created': datetime.datetime(2022, 9, 4, 10, 35, 9, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 962290172, 'comment_body': ""This meant to work with all the user's listening habits on last.fm. We don't need to require a personal account for any user. It doesn't require any authentication for this end point. Can be seen [on here](https://www.last.fm/api/show/track.getSimilar) "", 'comment_created': datetime.datetime(2022, 9, 4, 10, 36, 14, tzinfo=datetime.timezone.utc), 'commenter': 'fatihemreyildiz', 'type': 'User'}, {'comment_id': 962290261, 'comment_body': 'How about the threading. It the DB lookup this done in an extra thread? ', 'comment_created': datetime.datetime(2022, 9, 4, 10, 36, 58, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 962290289, 'comment_body': ""I had to add a dummy location in order to not have seg fault.I tried ITunes, the tracks location doesn't exists on my device but it works nice, so I had came up with this solution :sweat_smile: "", 'comment_created': datetime.datetime(2022, 9, 4, 10, 37, 14, tzinfo=datetime.timezone.utc), 'commenter': 'fatihemreyildiz', 'type': 'User'}, {'comment_id': 962290593, 'comment_body': 'That makes sense, as you said we can have different providers.', 'comment_created': datetime.datetime(2022, 9, 4, 10, 39, 37, tzinfo=datetime.timezone.utc), 'commenter': 'fatihemreyildiz', 'type': 'User'}, {'comment_id': 962370774, 'comment_body': 'There is already `timesplayed` with a non-trivial synchronization mechanism to keep it in sync with the history playlists. What is this new column for?', 'comment_created': datetime.datetime(2022, 9, 4, 21, 19, 21, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 962371154, 'comment_body': ""I don't see any reason for adding an unrelated, generic `match` column to the `library` table. It doesn't belong there. If you want to sort than use a join or a view."", 'comment_created': datetime.datetime(2022, 9, 4, 21, 23, 12, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 962371664, 'comment_body': ""If it is some external play count then it doesn't belong here anyway."", 'comment_created': datetime.datetime(2022, 9, 4, 21, 28, 56, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 962376696, 'comment_body': 'It is the play count of last.fm. It can be used to compare tracks for popularity. I have already suggested to rename this column to make it clear. ', 'comment_created': datetime.datetime(2022, 9, 4, 22, 18, 52, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 962376904, 'comment_body': 'This is the match value returned by last.fm. It should also be renamed to make this clear. ', 'comment_created': datetime.datetime(2022, 9, 4, 22, 21, 12, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 962377158, 'comment_body': 'OK, maybe you should add this info here as well. ', 'comment_created': datetime.datetime(2022, 9, 4, 22, 24, 8, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 962379633, 'comment_body': 'I will add it :+1: ', 'comment_created': datetime.datetime(2022, 9, 4, 22, 48, 51, tzinfo=datetime.timezone.utc), 'commenter': 'fatihemreyildiz', 'type': 'User'}, {'comment_id': 962385816, 'comment_body': ""It still doesn't belong into this table."", 'comment_created': datetime.datetime(2022, 9, 4, 23, 40, 9, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 962386012, 'comment_body': 'last.fm metadata should be stored separately. As for any other external library integration.', 'comment_created': datetime.datetime(2022, 9, 4, 23, 41, 28, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 962536647, 'comment_body': 'Yes, that\'s right, this dies not at all belongs to the library table. This data makes only sense for the ""suggestion_library"" where the relation of two tracks can be expressed. ', 'comment_created': datetime.datetime(2022, 9, 5, 6, 43, 54, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 962537088, 'comment_body': 'Right, it is the wrong table.', 'comment_created': datetime.datetime(2022, 9, 5, 6, 44, 31, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 966355429, 'comment_body': 'These two columns are deleted now.', 'comment_created': datetime.datetime(2022, 9, 8, 19, 40, 35, tzinfo=datetime.timezone.utc), 'commenter': 'fatihemreyildiz', 'type': 'User'}, {'comment_id': 974952386, 'comment_body': '@ronso0\r\nDo you have intest to help with the suggestion icon? \r\nI have something in mind like a lighting bulb or a speech bubble.', 'comment_created': datetime.datetime(2022, 9, 20, 6, 53, 33, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 974954724, 'comment_body': '```suggestion\r\n        lastfm_playcount INTEGER,\r\n```', 'comment_created': datetime.datetime(2022, 9, 20, 6, 56, 20, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 974956471, 'comment_body': 'This field dis not belong here, because it describes the relation of two tracks. \r\nIt belongs to the list if suggestions if one track.\r\nPlease prefix this column also with `lastfm_`', 'comment_created': datetime.datetime(2022, 9, 20, 6, 58, 25, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 974958642, 'comment_body': 'I can imagine to link here an URL of the track.\r\nBut the use case is not really clear for me.\r\nRemove? ', 'comment_created': datetime.datetime(2022, 9, 20, 7, 1, 8, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 974962994, 'comment_body': 'Not sure how the name is generated.\r\nDo we have a use case for an individual playlist name? \r\n\r\nMaybe it is a good idea to keep this table for future suggestion playlist metadata.\r\n\r\nI think we have always a reference track ID.\r\nThis needs to be added. \r\n\r\n\r\n\r\n', 'comment_created': datetime.datetime(2022, 9, 20, 7, 6, 36, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 974984225, 'comment_body': 'How is this calculated? ', 'comment_created': datetime.datetime(2022, 9, 20, 7, 30, 39, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 974985036, 'comment_body': 'This need to be perfied that it is clearly not the Mixxx track ID ', 'comment_created': datetime.datetime(2022, 9, 20, 7, 31, 28, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 974985860, 'comment_body': 'The lastfm_match column belongs here. ', 'comment_created': datetime.datetime(2022, 9, 20, 7, 32, 19, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 975006379, 'comment_body': 'That makes sense IMHO, this can use it to have a specialized suggestion menu maybe? Such as show this on LastFM?', 'comment_created': datetime.datetime(2022, 9, 20, 7, 53, 40, tzinfo=datetime.timezone.utc), 'commenter': 'fatihemreyildiz', 'type': 'User'}, {'comment_id': 975010770, 'comment_body': '👍 ', 'comment_created': datetime.datetime(2022, 9, 20, 7, 57, 47, tzinfo=datetime.timezone.utc), 'commenter': 'fatihemreyildiz', 'type': 'User'}, {'comment_id': 975023645, 'comment_body': ""This is actually order of the responses, I've added it due to setPlaylist method."", 'comment_created': datetime.datetime(2022, 9, 20, 8, 10, 17, tzinfo=datetime.timezone.utc), 'commenter': 'fatihemreyildiz', 'type': 'User'}, {'comment_id': 975024633, 'comment_body': ""Yes that should be suggestion_id, I've also added like this as a track id for setPlaylist"", 'comment_created': datetime.datetime(2022, 9, 20, 8, 11, 12, tzinfo=datetime.timezone.utc), 'commenter': 'fatihemreyildiz', 'type': 'User'}, {'comment_id': 975025344, 'comment_body': ""Actually the ID and the Name is both saved with the trackId for now, I have used the (Track Title and Artist) name to save and look up playlists but that didn't work, so I tried to reference the both track_id as a POC.\r\n\r\nThat shows that, a new external playlist table model is needed such as suggestionPlaylistModel."", 'comment_created': datetime.datetime(2022, 9, 20, 8, 11, 53, tzinfo=datetime.timezone.utc), 'commenter': 'fatihemreyildiz', 'type': 'User'}, {'comment_id': 975602969, 'comment_body': 'I have this assertion when I added URL\'s as a location `DEBUG ASSERT: ""hasLocation(fileInfo)"" in function static QString mixxx::FileInfo::canonicalLocation(const QFileInfo&) at /home/whoami/mixxx/src/util/fileinfo``\r\n\r\nShould we track it down?', 'comment_created': datetime.datetime(2022, 9, 20, 16, 48, 34, tzinfo=datetime.timezone.utc), 'commenter': 'fatihemreyildiz', 'type': 'User'}, {'comment_id': 975816039, 'comment_body': ""A light bulb is perfect!\r\nI'll see if I can come up with some clean SVG icon"", 'comment_created': datetime.datetime(2022, 9, 20, 21, 9, 21, tzinfo=datetime.timezone.utc), 'commenter': 'ronso0', 'type': 'User'}, {'comment_id': 975816542, 'comment_body': 'Yes, that is easy. Just run Mixxx with GDB and enable `--debug-assert-break`\r\n```\r\ngdb ./mixxx\r\nrun --debug-assert-break\r\n   <make it crash> \r\nbt\r\n``', 'comment_created': datetime.datetime(2022, 9, 20, 21, 10, 3, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 975817088, 'comment_body': 'Great, Thank you :-)', 'comment_created': datetime.datetime(2022, 9, 20, 21, 10, 53, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 979465331, 'comment_body': 'I just skimmed though this and feel the redundant TreeItem code could be reduced to someting like this:\r\n``` c++\r\nQRegularExpression chanRegEx(""^(\\\\[Channel)([1-4])(\\\\])$"");\r\nQRegularExpressionMatch chanMatch = chanRegEx.match(group);\r\nif (!chanMatch.hasMatch()) {\r\n    // debug output\r\n    return;\r\n}\r\nTreeItem* deckTreeItem;\r\nswitch (chanMatch.captured(2).toInt()) {\r\ncase 1:\r\n    deckTreeItem = treeItemDeckOne;\r\n    break;\r\n// etc.\r\ndefault:\r\n    return;\r\n}\r\ndeckTreeItem->setLabel(composeTreeItemLabel(artist, title));\r\ndeckTreeItem->setData(trackId.toVariant());\r\n\r\n```\r\nIt\'s definitely not shorter, but maybe cleaner.\r\nAlso, `[Master], num_decks` could be used instead of fixed `[1-4]`.\r\n\r\nNote this is not a change request since you probably have more important stuff to do to finish this, but maybe it can be put on a _Polish / NiceToHave_ list for later on.', 'comment_created': datetime.datetime(2022, 9, 25, 21, 48, 55, tzinfo=datetime.timezone.utc), 'commenter': 'ronso0', 'type': 'User'}, {'comment_id': 979465510, 'comment_body': 'Side note:\r\nwhy are there 5 items in the last screenshot in https://github.com/mixxxdj/mixxx/pull/10860#issue-1360422117 (also used for the blogpost)?', 'comment_created': datetime.datetime(2022, 9, 25, 21, 51, 3, tzinfo=datetime.timezone.utc), 'commenter': 'ronso0', 'type': 'User'}, {'comment_id': 979466815, 'comment_body': 'Hey ronso0, thanks a lot for the feedback! 🐙\n\nQRegularExpression looks nice to have, I will definitely add in the ""TO DO"" list and try that. \n\nThe new TreeItem is added just to give the user a chance to look for suggestions without placing the track on the deck. Whenever a new track is selected from library, the first TreeItem changes.', 'comment_created': datetime.datetime(2022, 9, 25, 22, 5, 1, tzinfo=datetime.timezone.utc), 'commenter': 'fatihemreyildiz', 'type': 'User'}, {'comment_id': 979470322, 'comment_body': ""Oh, nice feature. Is this refreshed every time another library view is selected? Because in that case the previous selection is restored and IIRC that would emit selectionChanged or something, though I'm not sure about it (and didn't test this branch, yet, obviously...)"", 'comment_created': datetime.datetime(2022, 9, 25, 22, 41, 14, tzinfo=datetime.timezone.utc), 'commenter': 'ronso0', 'type': 'User'}, {'comment_id': 979553453, 'comment_body': ""Thank you! That was Daniel's idea and I found it very useful so we have it :)\r\n\r\n> Is this refreshed every time another library view is selected?\r\n\r\nI'm sorry, I couldn't understand the question correctly. Was this question for the TreeItem connected to the chosen track? If yes, That is only changed/refreshed if a Track exists in the internal library, other than that I haven't tried it with other Libraries. As far as I remember, this wasn't related with the another libraries. Could you please correct me, if I miss-understood the question?\r\n\r\n\r\n"", 'comment_created': datetime.datetime(2022, 9, 26, 4, 36, 38, tzinfo=datetime.timezone.utc), 'commenter': 'fatihemreyildiz', 'type': 'User'}, {'comment_id': 981788945, 'comment_body': ""> Is this refreshed every time another library view is selected?\r\n\r\nWhat I meant was: is this tree item (track artist + title) updated\r\nA) every I switch to another library view which has 1+ tracks selected?\r\nB) only when I explicitely select a track?\r\n\r\nI just tested, and it's A : )\r\nDon't know if that's a bug or a feature in terms if UX."", 'comment_created': datetime.datetime(2022, 9, 27, 22, 46, 30, tzinfo=datetime.timezone.utc), 'commenter': 'ronso0', 'type': 'User'}, {'comment_id': 981789830, 'comment_body': '```suggestion\r\n    } else if (group == ""[Channel3]"") {\r\n        treeItemDeckThree->setLabel(composeTreeItemLabel(artist, title));\r\n        treeItemDeckThree->setData(trackId.toVariant());\r\n    } else if (group == ""[Channel4]"") {\r\n        treeItemDeckFour->setLabel(composeTreeItemLabel(artist, title));\r\n        treeItemDeckFour->setData(trackId.toVariant());\r\n    }\r\n```\r\nbecause otherwise this branch receives track load signals from samplers, for example when starting Mixxx.', 'comment_created': datetime.datetime(2022, 9, 27, 22, 48, 33, tzinfo=datetime.timezone.utc), 'commenter': 'ronso0', 'type': 'User'}, {'comment_id': 982341348, 'comment_body': 'Thank you for this feedback! Just changed it 👍 ', 'comment_created': datetime.datetime(2022, 9, 28, 12, 29, 1, tzinfo=datetime.timezone.utc), 'commenter': 'fatihemreyildiz', 'type': 'User'}, {'comment_id': 982364100, 'comment_body': 'Yeah, I just tested it and this is discussable what would be the best for the UX.', 'comment_created': datetime.datetime(2022, 9, 28, 12, 50, 49, tzinfo=datetime.timezone.utc), 'commenter': 'fatihemreyildiz', 'type': 'User'}]","[{'commit_sha': 'd37a0e7938de775ff001b51274de7526576ccdf8', 'committer_username': 'fatihemreyildiz', 'committer_name': 'Emre', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 20, 20, 2, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0bd12c069afb708f4e4d7e551af88d9db3ebc750', 'committer_username': 'fatihemreyildiz', 'committer_name': 'Emre', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 20, 20, 2, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cdac156c959c7e2695e7a334c613c8a3096c2817', 'committer_username': 'fatihemreyildiz', 'committer_name': 'Emre', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 20, 20, 2, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': '74f8c6f2e5b5b9abbeaaacac1481b5a290719d5e', 'committer_username': 'fatihemreyildiz', 'committer_name': 'Emre', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 20, 20, 2, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4881337e2dfda0932b85e6d14b54fa9f8e0d70db', 'committer_username': 'fatihemreyildiz', 'committer_name': 'Emre', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 20, 20, 2, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1b083e59b89e0e95ccfd9ff033a1dde2b34e9c4e', 'committer_username': 'fatihemreyildiz', 'committer_name': 'Emre', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 20, 20, 2, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fb314f1a071ec54a353229649271a1b3001cffe2', 'committer_username': 'fatihemreyildiz', 'committer_name': 'Emre', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 20, 20, 2, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0f00b9f4d6dcd4fd926f3d8120f1719010a4b622', 'committer_username': 'fatihemreyildiz', 'committer_name': 'Emre', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 20, 20, 2, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': '63ba90ea797cecbb0d9f076359f0a49fd3887d1d', 'committer_username': 'fatihemreyildiz', 'committer_name': 'Emre', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 20, 20, 2, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': '03b1b6831e15428745398c20e36ef704db336c29', 'committer_username': 'fatihemreyildiz', 'committer_name': 'Emre', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 20, 20, 2, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0c020741edc5a4f9c3dcb7916bad959744c72602', 'committer_username': 'fatihemreyildiz', 'committer_name': 'Emre', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 20, 20, 2, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b54eed31c49d7596b06969b5ed675539c2565459', 'committer_username': 'fatihemreyildiz', 'committer_name': 'Emre', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 20, 20, 2, 55, tzinfo=datetime.timezone.utc)}]",Emre,67206006,,User,,5,,21,10
1045235291,BaseSqlTableModel: remove duplicated line.,"While I was working on the track suggestion feature, I was looking at the code base for sorting the tracks. I realized that there is a duplicated line on `basesqltablemodel.cpp`. The same block of code can be found [here.](https://github.com/mixxxdj/mixxx/blob/6fbc27d653772b438c41c41015af010a00eca6b2/src/library/basesqltablemodel.cpp#L124-L126)",True,10861,https://api.github.com/repos/mixxxdj/mixxx/pulls/10861,https://github.com/mixxxdj/mixxx/pull/10861,closed,0,3,1,1,0,0,1,0,[{'name': 'library'}],2022-09-02 19:55:49+00:00,2022-09-03 15:21:34+00:00,69945.0,19:25:45,[],"[{'commit_sha': '6bec09eb98ecd5f79d95e8f426d88dce7e160d51', 'committer_username': 'fatihemreyildiz', 'committer_name': 'Emre', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 20, 20, 2, 55, tzinfo=datetime.timezone.utc)}]",Emre,67206006,,User,,5,,21,10
1050365535,FIX: Tag Fetcher close button doesn't abort task ,"I mentioned the bug earlier #10877 .

As far as I tested, it aborts the tasks now without any problem. 

I hope that is the correct approach.",True,10878,https://api.github.com/repos/mixxxdj/mixxx/pulls/10878,https://github.com/mixxxdj/mixxx/pull/10878,closed,6,0,2,1,0,0,1,0,[{'name': 'library'}],2022-09-08 14:29:29+00:00,2022-09-09 05:53:22+00:00,55433.0,15:23:53,[],"[{'commit_sha': '7ca292deeac80769f342f1b21f226048612e1437', 'committer_username': 'fatihemreyildiz', 'committer_name': 'Emre', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 20, 20, 2, 55, tzinfo=datetime.timezone.utc)}]",Emre,67206006,,User,,5,,21,10
1055266232,Moving SafelyWritableFile class to the utility folder.,As mentioned on here #4887 this PR is about moving the SafelyWritableFile into utility folder. ,True,10897,https://api.github.com/repos/mixxxdj/mixxx/pulls/10897,https://github.com/mixxxdj/mixxx/pull/10897,closed,326,287,4,1,0,0,1,0,[{'name': 'build'}],2022-09-13 23:04:39+00:00,2022-09-14 05:20:44+00:00,22565.0,6:16:05,[],"[{'commit_sha': '8c4681383674f6e21c4bc572c2e182ad5110386f', 'committer_username': 'fatihemreyildiz', 'committer_name': 'Emre', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 20, 20, 2, 55, tzinfo=datetime.timezone.utc)}]",Emre,67206006,,User,,5,,21,10
1059294271,Update Getting Involved,"Hi, 

I was checking through the manual and I realized the bug related links were directing to the Launchpad, So I wanted to change them to the Git-Hub Issues also deleted related Launchpad Links. I couldn't find the equal related link to the Launchpad Links, I can add them back - or add related links if needed.",True,517,https://api.github.com/repos/mixxxdj/manual/pulls/517,https://github.com/mixxxdj/manual/pull/517,closed,4,8,1,1,2,0,0,0,[],2022-09-17 10:07:30+00:00,2022-09-17 16:26:53+00:00,22763.0,6:19:23,[],"[{'commit_sha': '3115116e2bd32102e7194c846b222edebacfdf10', 'committer_username': 'fatihemreyildiz', 'committer_name': 'Emre', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 20, 20, 2, 55, tzinfo=datetime.timezone.utc)}]",Emre,67206006,,User,,5,,21,10
1057284785,Cover Art Copy Worker,"As I mentioned earlier on #4887 , this is the basic of the cover art copy worker. 

We need it for to have a cover art fetcher #4851 .

Technical details of this PR is, it only works for 'JPG' extension for now and the copying process is default. The rest detailed version of this worker will be improved on #4887 . Such as preferences and comparison page.

For now it looks like this:

![coverartcopyworker](https://user-images.githubusercontent.com/67206006/190396070-c5404dd6-450b-4c86-879d-b73d093933bd.jpeg)


",True,10902,https://api.github.com/repos/mixxxdj/mixxx/pulls/10902,https://github.com/mixxxdj/mixxx/pull/10902,closed,304,33,8,18,10,149,4,0,"[{'name': 'library'}, {'name': 'ui'}, {'name': 'build'}, {'name': 'changelog'}]",2022-09-15 11:50:13+00:00,2022-10-05 21:34:36+00:00,1763063.0,"20 days, 9:44:23","[{'comment_id': 972151126, 'comment_body': ' You need to pass here the parent to the QObject destructor.  \r\nm_parent can become m_parentWidget', 'comment_created': datetime.datetime(2022, 9, 15, 15, 42, 8, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 972173114, 'comment_body': 'this can become a parented_ptr\r\nelse the ownership is at the QObject tree and the QScopedPointer', 'comment_created': datetime.datetime(2022, 9, 15, 16, 3, 17, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 972175764, 'comment_body': 'I think we should remove the dialog part from this PR ', 'comment_created': datetime.datetime(2022, 9, 15, 16, 5, 58, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 972176573, 'comment_body': 'I think this bock can be removed', 'comment_created': datetime.datetime(2022, 9, 15, 16, 6, 38, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 972178810, 'comment_body': 'Just ""Error"" is a bit puzzling in the logs. ', 'comment_created': datetime.datetime(2022, 9, 15, 16, 8, 16, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 972182162, 'comment_body': 'Why is this a stateful class? Can saveCoverArt() become a free fucntion in the anonymous namespace?  ', 'comment_created': datetime.datetime(2022, 9, 15, 16, 10, 40, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 972214291, 'comment_body': ""Fair Enough, when we decided to make it smaller, I wasn't sure if we should remove the dialog part or not. Removing it would be smaller and ofc better 👍 "", 'comment_created': datetime.datetime(2022, 9, 15, 16, 40, 48, tzinfo=datetime.timezone.utc), 'commenter': 'fatihemreyildiz', 'type': 'User'}, {'comment_id': 972309764, 'comment_body': ""I'm sorry, I couldn't understand. Could you please explain it a bit more?\r\n\r\nIf I do `QObject(parent)`would it be ok in this case?"", 'comment_created': datetime.datetime(2022, 9, 15, 18, 33, 26, tzinfo=datetime.timezone.utc), 'commenter': 'fatihemreyildiz', 'type': 'User'}, {'comment_id': 972429439, 'comment_body': 'I have just realized that this discovers an underlying issue. Instead of reading the cover art file bit by bit, it is uncompressed into an QImage and when writing it is encoded again. In case of a lossy format like jpg this process will put additional noise to the picture, which should not happen. Instead the copy should be done with the compressed data without the encoding decoding round trip. \r\n', 'comment_created': datetime.datetime(2022, 9, 15, 21, 20, 34, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 972624177, 'comment_body': 'Yes', 'comment_created': datetime.datetime(2022, 9, 16, 5, 24, 59, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 972626289, 'comment_body': 'So you may use a QByteArray to keep the compressed data in memory. \r\nThis can be filled with either the file content or the downloaded data from the web. Maybe a tiny wrapper class is handy that holds the data and the file format. I just had a look to the QT classes but there seems to be nothing suitable already there. ', 'comment_created': datetime.datetime(2022, 9, 16, 5, 29, 47, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 972697690, 'comment_body': 'Thank you! ', 'comment_created': datetime.datetime(2022, 9, 16, 7, 26, 3, tzinfo=datetime.timezone.utc), 'commenter': 'fatihemreyildiz', 'type': 'User'}, {'comment_id': 973240418, 'comment_body': 'You should use QFileInfo::canonicalPath() to sort out symbolic link issues ', 'comment_created': datetime.datetime(2022, 9, 16, 17, 27, 21, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 973452435, 'comment_body': 'This function can become a static ImageFileData::FromFilePath() function that calls that the `ImageFileData::ImageFileData(const QByteArray& coverArtBytes)`\r\nto avoid to read the file twice. ', 'comment_created': datetime.datetime(2022, 9, 16, 22, 2, 47, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 973460823, 'comment_body': 'This should become: \r\nImageFileData::ImageFileData(const QByteArray &data, const char *format = nullptr)', 'comment_created': datetime.datetime(2022, 9, 16, 22, 7, 50, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 973467465, 'comment_body': ""I am just for asking for to learn. Sorry if that is too obvious, I just couldn't get it. How the file can be read twice? By override?"", 'comment_created': datetime.datetime(2022, 9, 16, 22, 12, 23, tzinfo=datetime.timezone.utc), 'commenter': 'fatihemreyildiz', 'type': 'User'}, {'comment_id': 973469941, 'comment_body': 'Again, I am just asking for to learn, this is for the extension of the cover art?', 'comment_created': datetime.datetime(2022, 9, 16, 22, 13, 56, tzinfo=datetime.timezone.utc), 'commenter': 'fatihemreyildiz', 'type': 'User'}, {'comment_id': 973487476, 'comment_body': 'do we know the format in case of web download, to populate m_coverArtExtension? \r\nElse we may copy:\r\nhttps://github.com/qt/qtbase/blob/ee3ac3a3bfb4c4a0802f6530f61995297c573646/src/gui/image/qimage.cpp#L3485\r\nhere and use ``QImageReader::imageFormat(QIODevice *device)``` to request the extensions form the file content. ', 'comment_created': datetime.datetime(2022, 9, 16, 22, 32, 10, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 973488469, 'comment_body': 'you can just \r\n```\r\nQFile file(basePath + format extension );\r\nfile.open(QIODevice::WriteOnly);\r\nfile.write(m_coverArtBytes);\r\nfile.close();\r\n```', 'comment_created': datetime.datetime(2022, 9, 16, 22, 35, 26, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 973488605, 'comment_body': ""most of the cover arts that I've seen were `jpg`. Do we still need the extension. If we need it, does it need to be static?"", 'comment_created': datetime.datetime(2022, 9, 16, 22, 35, 49, tzinfo=datetime.timezone.utc), 'commenter': 'fatihemreyildiz', 'type': 'User'}, {'comment_id': 973488621, 'comment_body': 'The threading can be done outside of this class.  ', 'comment_created': datetime.datetime(2022, 9, 16, 22, 35, 53, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 973488849, 'comment_body': ""Thank you! Then we can replace it with the function in CoverArtWorker's anon namespace IMHO "", 'comment_created': datetime.datetime(2022, 9, 16, 22, 36, 45, tzinfo=datetime.timezone.utc), 'commenter': 'fatihemreyildiz', 'type': 'User'}, {'comment_id': 973489401, 'comment_body': ""> The threading can be done outside of this class.\r\n\r\nSo does it mean we don't need to do any disk work in this class? only caching?\r\n"", 'comment_created': datetime.datetime(2022, 9, 16, 22, 38, 45, tzinfo=datetime.timezone.utc), 'commenter': 'fatihemreyildiz', 'type': 'User'}, {'comment_id': 973509489, 'comment_body': ""I've moved the function saveCoverArt() in cover art worker namespace into here. "", 'comment_created': datetime.datetime(2022, 9, 16, 23, 59, 3, tzinfo=datetime.timezone.utc), 'commenter': 'fatihemreyildiz', 'type': 'User'}, {'comment_id': 973554947, 'comment_body': ""> So does it mean we don't need to do any disk work in this class? only caching?\r\n\r\nMy idea was to have ImageFileData::saveFile() as simple QImage::save() replacement, without any atomic or threading logic. \r\n\r\n\r\n\r\n\r\n"", 'comment_created': datetime.datetime(2022, 9, 17, 7, 45, 46, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 973556350, 'comment_body': 'The part of detecting the file extension is missing here. \r\n\r\nMy original idea was to use something like: \r\n\r\n```\r\n    QBuffer b = coverArtBytes;\r\n    b.open(QIODevice::ReadOnly);\r\n    auto reader = QImageReader(&b);\r\n    m_format = reader.format(); \r\n    VERIFY_OR_DEBUG_ASSERT(!m_format.isEmpty()) {\r\n       return {};\r\n    }\r\n    return ImageFileData(coverArtBytes, m_format);\r\n```\r\n\r\n\r\n\r\n\r\n\r\n\r\n', 'comment_created': datetime.datetime(2022, 9, 17, 8, 1, 4, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 973557250, 'comment_body': 'That loops unpredictable. \r\nThe only thing we need to consider to add the right extension. \r\nHow about: \r\n`ImageFileData::saveFileAddSuffix(QString pathWithoutSuffix)`\r\n\r\nThe other option would by just saveFile and assert for the correct suffix. \r\n\r\n\r\n\r\n\r\n\r\n', 'comment_created': datetime.datetime(2022, 9, 17, 8, 10, 56, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 973562525, 'comment_body': ""Oh, I see. I'm just guessing, instead of trying to read the suffix by the file name, we are reading the image and find the correct suffix from the image not name.\r\n\r\nAnother assumption, Image suffix could be changed by user and this can cause errors(?maybe) and this way we have a better approach, right?"", 'comment_created': datetime.datetime(2022, 9, 17, 9, 7, 24, tzinfo=datetime.timezone.utc), 'commenter': 'fatihemreyildiz', 'type': 'User'}, {'comment_id': 973569473, 'comment_body': 'I guess now it is already replaced with the QImage::save(), right? Only the extension , format is missing. I guess...', 'comment_created': datetime.datetime(2022, 9, 17, 10, 26, 10, tzinfo=datetime.timezone.utc), 'commenter': 'fatihemreyildiz', 'type': 'User'}, {'comment_id': 973574352, 'comment_body': 'Yes, you mean if the user renames the png to jpg ... this is a nice side-effect :-)  ', 'comment_created': datetime.datetime(2022, 9, 17, 11, 21, 14, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 973575199, 'comment_body': 'This should be a QByteArray to match the original API. There is also a += operator for QString https://doc.qt.io/qt-5/qstring.html#operator-2b-eq-7', 'comment_created': datetime.datetime(2022, 9, 17, 11, 30, 32, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 973575821, 'comment_body': ""Thank you, I've changed it 👍 "", 'comment_created': datetime.datetime(2022, 9, 17, 11, 37, 41, tzinfo=datetime.timezone.utc), 'commenter': 'fatihemreyildiz', 'type': 'User'}, {'comment_id': 973624887, 'comment_body': 'This is no longer required .. ', 'comment_created': datetime.datetime(2022, 9, 17, 20, 21, 32, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 973625715, 'comment_body': 'After the latest changes a format is mandatory. This can become a QByteArray, to get around the ""\\0"" check for the string end. ', 'comment_created': datetime.datetime(2022, 9, 17, 20, 31, 14, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 973625913, 'comment_body': '~~The default to nullptr is misleading, because we need the format in this implementation.~~\r\n\r\n~~We may end~~ \r\n```fromByteArray(const QByteArray& data);```\r\n~~for the case we have only the data but do not know the format yet.~~\r\n', 'comment_created': datetime.datetime(2022, 9, 17, 20, 33, 49, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 973626179, 'comment_body': 'Wait, we can make the format optional in the constructor. Than we need to lookup the format from the QByteArray like in fromFilePath() ', 'comment_created': datetime.datetime(2022, 9, 17, 20, 36, 41, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 973635771, 'comment_body': 'I have tried to do it with a new static method getFormat(), I am not sure if that should\'ve been in anon namespace or not.\r\n\r\nAlso, is there a way to get a cover art without format specified? Should we also take care of this circumstance? Such as hard coded ""jpg"" format?', 'comment_created': datetime.datetime(2022, 9, 17, 22, 41, 4, tzinfo=datetime.timezone.utc), 'commenter': 'fatihemreyildiz', 'type': 'User'}, {'comment_id': 973637025, 'comment_body': 'A static function is OK. However getFormat() sound like a member that return the format. Maybe readFormat() or such? \r\n ', 'comment_created': datetime.datetime(2022, 9, 17, 22, 58, 37, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 973637164, 'comment_body': 'It actually returns the format, but still readFormat is also well explanatory', 'comment_created': datetime.datetime(2022, 9, 17, 23, 1, 19, tzinfo=datetime.timezone.utc), 'commenter': 'fatihemreyildiz', 'type': 'User'}, {'comment_id': 973637199, 'comment_body': 'This function is not really relevant here. ', 'comment_created': datetime.datetime(2022, 9, 17, 23, 1, 45, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 973637328, 'comment_body': 'This function must fail in case m_coverArtBytes or m_coverArtFormat is empty', 'comment_created': datetime.datetime(2022, 9, 17, 23, 3, 36, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 973637424, 'comment_body': 'this one can default to QImage::save in case m_coverArtBytes is empty. ', 'comment_created': datetime.datetime(2022, 9, 17, 23, 5, 20, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 973640168, 'comment_body': 'I guess that is done with the last commit ', 'comment_created': datetime.datetime(2022, 9, 17, 23, 48, tzinfo=datetime.timezone.utc), 'commenter': 'fatihemreyildiz', 'type': 'User'}, {'comment_id': 973640187, 'comment_body': 'Was this review about the comment or the whole function?', 'comment_created': datetime.datetime(2022, 9, 17, 23, 48, 24, tzinfo=datetime.timezone.utc), 'commenter': 'fatihemreyildiz', 'type': 'User'}, {'comment_id': 973640211, 'comment_body': ""I've added verify or debug assert, I hope that's ok"", 'comment_created': datetime.datetime(2022, 9, 17, 23, 48, 52, tzinfo=datetime.timezone.utc), 'commenter': 'fatihemreyildiz', 'type': 'User'}, {'comment_id': 973707004, 'comment_body': 'The function name getXXX is ""reserved"" for getter functions, like \r\n```\r\nQByteArray getFormat() const {\r\n   return m_coverArtFormat;\r\n```\r\nInternally it defaults to someting like\r\n```\r\nQMimeDatabase().mimeTypeForFile(\r\n            fileInfo, QMimeDatabase::MatchContent); \r\n```\r\nhow about rename this to `readFormat(..)` or `formatFromContent(..)` or `getFormatFrom(..)`\r\n\r\n', 'comment_created': datetime.datetime(2022, 9, 18, 11, 42, 6, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 973708600, 'comment_body': 'Thank you for the information.\r\n\r\nchanged to readFormatFrom(..) 👍 ', 'comment_created': datetime.datetime(2022, 9, 18, 11, 54, 6, tzinfo=datetime.timezone.utc), 'commenter': 'fatihemreyildiz', 'type': 'User'}, {'comment_id': 973717638, 'comment_body': '```suggestion\r\n    QByteArray getCoverArtBytes() const {\r\n```', 'comment_created': datetime.datetime(2022, 9, 18, 13, 0, 35, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 973718110, 'comment_body': '```suggestion\r\n    m_coverArtFormat = coverArtFormat.isEmty() ? readFormatFrom(m_coverArtBytes) : coverArtFormat;\r\n```\r\nto match the assertion in saveFileAddSuffix()', 'comment_created': datetime.datetime(2022, 9, 18, 13, 3, 53, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 973718436, 'comment_body': '```suggestion\r\n    if (m_coverArtBytes.isEmty()) {\r\n```', 'comment_created': datetime.datetime(2022, 9, 18, 13, 6, 6, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 973718504, 'comment_body': '```suggestion\r\n        return save(coverArtAbsoluteFilePath);\r\n```', 'comment_created': datetime.datetime(2022, 9, 18, 13, 6, 32, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 973718596, 'comment_body': 'Close in the branch above is missing. ', 'comment_created': datetime.datetime(2022, 9, 18, 13, 7, 26, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 973719442, 'comment_body': 'I just realized that QFile is closed automatically after falling out of scope. \r\nSo this close() is redundant. \r\n\r\nAt least both branches should behave the same. ', 'comment_created': datetime.datetime(2022, 9, 18, 13, 13, 16, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 973719554, 'comment_body': 'redundant', 'comment_created': datetime.datetime(2022, 9, 18, 13, 14, 8, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 973719706, 'comment_body': 'return value is not checked. We should do it to not hit assertions inside QT and crash Mixxx', 'comment_created': datetime.datetime(2022, 9, 18, 13, 15, 22, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 973719746, 'comment_body': 'Please check the return value. ', 'comment_created': datetime.datetime(2022, 9, 18, 13, 15, 50, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 973719954, 'comment_body': 'this todo is now done. ', 'comment_created': datetime.datetime(2022, 9, 18, 13, 17, 18, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 973720415, 'comment_body': 'This is a file access in the main thread ... not sure if we want to remove that? ', 'comment_created': datetime.datetime(2022, 9, 18, 13, 20, 17, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 973724394, 'comment_body': '```suggestion\r\n            trackFileInfo.absoluteFilePath().left(\r\n```\r\nfileInfo can be null see above. Can this case happen? If yes we need to handle it. Otherwise assert that it not happens', 'comment_created': datetime.datetime(2022, 9, 18, 13, 49, 30, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 973724594, 'comment_body': 'can we replace this with completeBaseName()?', 'comment_created': datetime.datetime(2022, 9, 18, 13, 50, 58, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 973724761, 'comment_body': 'Is this a left over? ', 'comment_created': datetime.datetime(2022, 9, 18, 13, 52, 21, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 973729547, 'comment_body': ""Generally no.\r\nIf the question meant to be for the block. That was added if the cover art is the same path in the track, if that happens we will just update the cover art instead of copying it.\r\n\r\nIf the question meant to be for the debug message `slotChange emit` was placed related cover art updaters, as far as I tested this debug message always appears after each cover art update, so I didn't want to delete it."", 'comment_created': datetime.datetime(2022, 9, 18, 14, 26, 45, tzinfo=datetime.timezone.utc), 'commenter': 'fatihemreyildiz', 'type': 'User'}, {'comment_id': 973731782, 'comment_body': 'We must delete that IMHO, according to my tests i come across with freezing in small amount of time. I am not sure what would be the solution for this. My first assumption is:\r\n\r\nInstead of getting ImageFileData on here, we can leave it as QImage. Then we can pass the \'location\' of the cover art instead of the ""QImage or ImageFileData"" to the CoverArtCopyWizard. Then we can call the ImageFileData on the worker via location.\r\n\r\nWhat do you think?', 'comment_created': datetime.datetime(2022, 9, 18, 14, 42, 11, tzinfo=datetime.timezone.utc), 'commenter': 'fatihemreyildiz', 'type': 'User'}, {'comment_id': 973732168, 'comment_body': ""File info comes from the cover info's track location. As far as I know, Track location can not be empty because I was having assertion while I was working on the Track Suggestion Feature. I am not 100% sure though\r\n\r\nEDIT: I have just checked, [on coverart.h](https://github.com/mixxxdj/mixxx/blob/eddade7196af6cbfffa050a8552dec1f5eec1475/src/library/coverart.h#L130) but I couldn't be sure. What do you think? Is there a possibility that a coverInfo without track location maybe in external libraries or such?"", 'comment_created': datetime.datetime(2022, 9, 18, 14, 45, 14, tzinfo=datetime.timezone.utc), 'commenter': 'fatihemreyildiz', 'type': 'User'}, {'comment_id': 973733771, 'comment_body': 'This can be replaced with the ~~absolutePath~~ canonicalPath() + completeBaseName() + extension. ', 'comment_created': datetime.datetime(2022, 9, 18, 14, 57, 52, tzinfo=datetime.timezone.utc), 'commenter': 'fatihemreyildiz', 'type': 'User'}, {'comment_id': 973743438, 'comment_body': ""I also need to add '/' between the path and the name, and also '.' between the name and extension. I guess that wouldn't be ok between the different OS. \r\n\r\nIf that's the case, it is better to stay like this, this basically just removes the trackfilepath.'trackExtension' and then adds the selected extension. I have looked for it but couldn't find. Is there a better way to do this without errors in different OS?"", 'comment_created': datetime.datetime(2022, 9, 18, 16, 11, 53, tzinfo=datetime.timezone.utc), 'commenter': 'fatihemreyildiz', 'type': 'User'}, {'comment_id': 973775794, 'comment_body': 'OK', 'comment_created': datetime.datetime(2022, 9, 18, 21, 11, 45, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 973776315, 'comment_body': 'Oh yes, i see it above. OK.', 'comment_created': datetime.datetime(2022, 9, 18, 21, 16, 40, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 973776560, 'comment_body': ""i don't think so. Just assert for it in the condition above and we will learn during testing if our assumption is correct. "", 'comment_created': datetime.datetime(2022, 9, 18, 21, 18, 53, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 973776835, 'comment_body': 'QImage does also the disc access. Our new class should not have a performance regression, has it? \r\nFor now the code can remain, just add a TODO that this should be done in a thread. ', 'comment_created': datetime.datetime(2022, 9, 18, 21, 21, 31, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 973850520, 'comment_body': ""> QImage does also the disc access. \r\n\r\nHmm maybe that was like this before we have ImageFileData, I can not remember.\r\n\r\n> Our new class should not have a performance regression, has it? \r\n\r\nI have tried with the QImage aswell, didn't see any difference.\r\n\r\n> For now the code can remain, just add a TODO that this should be done in a thread.\r\n\r\n👍 \r\n"", 'comment_created': datetime.datetime(2022, 9, 19, 4, 13, 34, tzinfo=datetime.timezone.utc), 'commenter': 'fatihemreyildiz', 'type': 'User'}, {'comment_id': 975889580, 'comment_body': 'This is not used. We have the issue here, that it adds the extension ""temp"" and than requires to write to that file . \r\nThis will fail our assertions in ImageFileData ... ', 'comment_created': datetime.datetime(2022, 9, 20, 23, 25, 15, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 977600903, 'comment_body': '```suggestion\r\n    bool useTempFileWithPrefix();\r\n    bool useTempFileWithSuffix();\r\n```\r\n\r\nThis functions should be unrelated to coverArts. This functions should instruct the SafelyWritableFile class to reserve a a new temporary file name without copy the original file. Since the Prefix is added to the original file name which already has the suffix, we do not need the parameter. \r\n\r\n`useTempFileWithSuffix();` can be added for symmetry and can be used internally from the constructor.  \r\n\r\nIdea: Since this functions must not called after  writing, we may consider to add another boolean flag or enum to control that from the constructor. (for the next step)\r\n\r\n\r\n\r\n   \r\n \r\n\r\n\r\n', 'comment_created': datetime.datetime(2022, 9, 22, 12, 35, 47, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 977602703, 'comment_body': 'This function must not copy. It should calculate the temp file name only and store it as m_tempFileName.', 'comment_created': datetime.datetime(2022, 9, 22, 12, 37, 42, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 977607563, 'comment_body': '```suggestion\r\n```\r\n\r\nThis can be removed we may assert the return value of `fileName().isEmpty()` later. ', 'comment_created': datetime.datetime(2022, 9, 22, 12, 42, 37, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 977608824, 'comment_body': 'This should be the very next call after the constructor', 'comment_created': datetime.datetime(2022, 9, 22, 12, 43, 51, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 977610144, 'comment_body': '```suggestion\r\n        if (m_coverArtImage.saveFile(safelyWritableFile.fileName())) {\r\n```', 'comment_created': datetime.datetime(2022, 9, 22, 12, 45, 11, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 977611975, 'comment_body': 'safelyWritableFile.commit();\r\n```suggestion\r\n                     << ""copied successfully"";\r\n               safelyWritableFile.commit();\r\n```', 'comment_created': datetime.datetime(2022, 9, 22, 12, 46, 59, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 977812492, 'comment_body': 'I guess the member variables for orig and temp files are not set until the end of the constructor. There is a bug related with this, so In order to have these two methods I assume that I should pass there the `QString origFileName` what do you think?', 'comment_created': datetime.datetime(2022, 9, 22, 15, 37, 18, tzinfo=datetime.timezone.utc), 'commenter': 'fatihemreyildiz', 'type': 'User'}, {'comment_id': 977882530, 'comment_body': 'I think we should pass the original File name in the constructor and fix the bug. ', 'comment_created': datetime.datetime(2022, 9, 22, 16, 47, 19, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 977885241, 'comment_body': 'You just need to reorder the constructor that your call happens after:\r\nhttps://github.com/mixxxdj/mixxx/blob/36e86965debbdd5a0a78024d2efae54f8c8165e4/src/util/safelywritablefile.cpp#L89', 'comment_created': datetime.datetime(2022, 9, 22, 16, 50, 20, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 979189241, 'comment_body': 'This sounds if the parameter is used constitutional. Is this the case? I do not understand the IfNotPrefix part.  ', 'comment_created': datetime.datetime(2022, 9, 24, 7, 49, 5, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 979190086, 'comment_body': 'This is set in the else branch as well. After std::move the origFileName is a default constructed QString()', 'comment_created': datetime.datetime(2022, 9, 24, 7, 53, 9, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 979190095, 'comment_body': 'I wanted to make it descriptive, if it is true that uses suffix, if not uses prefix.\r\n\r\nAt first, I named it `useSuffix`, but when it is passed as false, it sounds like we are not going to use suffix, so that sounded like we are using nothing. \r\n\r\nI also thought, I can name it `useSuffix`, but if it is passed false in any other class, we could have a bool constant which says, `usePrefix`', 'comment_created': datetime.datetime(2022, 9, 24, 7, 53, 21, tzinfo=datetime.timezone.utc), 'commenter': 'fatihemreyildiz', 'type': 'User'}, {'comment_id': 979190543, 'comment_body': 'Oh yes, sorry I have missed that. No need to do it in else branch. Thank you for noticing me 👍 ', 'comment_created': datetime.datetime(2022, 9, 24, 7, 55, 4, tzinfo=datetime.timezone.utc), 'commenter': 'fatihemreyildiz', 'type': 'User'}, {'comment_id': 979190566, 'comment_body': 'This copy is lost now. ', 'comment_created': datetime.datetime(2022, 9, 24, 7, 55, 17, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 979190699, 'comment_body': 'How about invert his condition and return early to reduce nesting. ', 'comment_created': datetime.datetime(2022, 9, 24, 7, 55, 58, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 979190891, 'comment_body': 'The return value is not used in the constructor. ', 'comment_created': datetime.datetime(2022, 9, 24, 7, 56, 39, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 979191125, 'comment_body': 'This check is common for all and should be moved to the constructor. The move to m_origFileName should be happen afterwards. ', 'comment_created': datetime.datetime(2022, 9, 24, 7, 58, 34, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 979191139, 'comment_body': 'I have made an method exactly the way it is.\r\nThat should be the copy.\r\nhttps://github.com/mixxxdj/mixxx/blob/9a52cd354ef840ffd924a3a87358447fea1b20cf/src/util/safelywritablefile.cpp#L281', 'comment_created': datetime.datetime(2022, 9, 24, 7, 58, 56, tzinfo=datetime.timezone.utc), 'commenter': 'fatihemreyildiz', 'type': 'User'}, {'comment_id': 979192096, 'comment_body': 'I am afraid this deletes any file that has by luck already the temp name. this must not happen. ', 'comment_created': datetime.datetime(2022, 9, 24, 8, 1, 21, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 979203035, 'comment_body': 'I have deleted it.', 'comment_created': datetime.datetime(2022, 9, 24, 8, 46, 15, tzinfo=datetime.timezone.utc), 'commenter': 'fatihemreyildiz', 'type': 'User'}, {'comment_id': 979203696, 'comment_body': ""That comment was for `useTempFileWithPrefix()`. This function is now not used in `useTempFileWithPrefix()`. I will mark this as resolved if that's okay."", 'comment_created': datetime.datetime(2022, 9, 24, 8, 48, 52, tzinfo=datetime.timezone.utc), 'commenter': 'fatihemreyildiz', 'type': 'User'}, {'comment_id': 979205915, 'comment_body': 'This is pointless, because we need to wait for the worker thread to be updated. ', 'comment_created': datetime.datetime(2022, 9, 24, 9, 3, 56, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 979206278, 'comment_body': ""We don't want the copy right? "", 'comment_created': datetime.datetime(2022, 9, 24, 9, 5, 37, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 979217297, 'comment_body': 'So we need to have signal&slots right? ', 'comment_created': datetime.datetime(2022, 9, 24, 10, 12, 52, tzinfo=datetime.timezone.utc), 'commenter': 'fatihemreyildiz', 'type': 'User'}, {'comment_id': 979268206, 'comment_body': 'Do we need a feedback in the GUI? If yes, or does it already work via the track object signals? \r\nIf we need a feedback, we need a signal slot connection.   ', 'comment_created': datetime.datetime(2022, 9, 24, 16, 9, 56, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 979296222, 'comment_body': 'Now with the last changes naming is more logical IMHO', 'comment_created': datetime.datetime(2022, 9, 24, 19, 48, 39, tzinfo=datetime.timezone.utc), 'commenter': 'fatihemreyildiz', 'type': 'User'}, {'comment_id': 979296263, 'comment_body': 'Done 👍 ', 'comment_created': datetime.datetime(2022, 9, 24, 19, 48, 52, tzinfo=datetime.timezone.utc), 'commenter': 'fatihemreyildiz', 'type': 'User'}, {'comment_id': 979296294, 'comment_body': 'Copy is not used with the latest changes 👍 ', 'comment_created': datetime.datetime(2022, 9, 24, 19, 49, 9, tzinfo=datetime.timezone.utc), 'commenter': 'fatihemreyildiz', 'type': 'User'}, {'comment_id': 979333031, 'comment_body': 'This is used for `isReady()` so we must not repair this somehow. ', 'comment_created': datetime.datetime(2022, 9, 25, 0, 7, 4, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 979333126, 'comment_body': 'usePrefixForTempName is not used in this branch ', 'comment_created': datetime.datetime(2022, 9, 25, 0, 8, 36, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 979333321, 'comment_body': 'There is no need to slit off the suffix', 'comment_created': datetime.datetime(2022, 9, 25, 0, 10, 50, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 979333390, 'comment_body': 'This does not belong here, because the function name doe snot mention the copy', 'comment_created': datetime.datetime(2022, 9, 25, 0, 11, 44, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 979404664, 'comment_body': ""I guess we don't need a feedback in the gui, because cover art updated after the thread ended (atleast for now, there is a TODO to move that in another thread as we discussed). I thought we could do it with the signal&slots, I have searched about it a bit now, can this be achieved by using [QFuture::waitForFinished()](https://doc.qt.io/qt-5/qfuture.html#waitForFinished)?"", 'comment_created': datetime.datetime(2022, 9, 25, 13, 4, 58, tzinfo=datetime.timezone.utc), 'commenter': 'fatihemreyildiz', 'type': 'User'}, {'comment_id': 979404871, 'comment_body': 'So I guess we should rename the function name in this case. Because we need to copy the file for the `MetadataSourceTaglib` right?', 'comment_created': datetime.datetime(2022, 9, 25, 13, 7, 1, tzinfo=datetime.timezone.utc), 'commenter': 'fatihemreyildiz', 'type': 'User'}, {'comment_id': 979405141, 'comment_body': ""I'm sorry, I am a bit confused now, should we call the usePrefixForTempName out side of the constructor?"", 'comment_created': datetime.datetime(2022, 9, 25, 13, 9, 54, tzinfo=datetime.timezone.utc), 'commenter': 'fatihemreyildiz', 'type': 'User'}, {'comment_id': 979410251, 'comment_body': 'completeBaseName() returned without the suffix, I had to add the suffix in order to not hit the format checks that will come later on, or did i compose the the temp file name wrong?', 'comment_created': datetime.datetime(2022, 9, 25, 13, 53, 17, tzinfo=datetime.timezone.utc), 'commenter': 'fatihemreyildiz', 'type': 'User'}, {'comment_id': 979412716, 'comment_body': ""As I've mentioned this is moved back to the constructor now"", 'comment_created': datetime.datetime(2022, 9, 25, 14, 13, 46, tzinfo=datetime.timezone.utc), 'commenter': 'fatihemreyildiz', 'type': 'User'}, {'comment_id': 981425627, 'comment_body': '```suggestion\r\n    enum class SafetyMode {\r\n```\r\n\r\nI did not know that the enum prefix even works without ""class""\r\nWe use CamelCase enum names for new enum classes', 'comment_created': datetime.datetime(2022, 9, 27, 15, 53, 44, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 981426433, 'comment_body': 'The comment can also be removed ', 'comment_created': datetime.datetime(2022, 9, 27, 15, 54, 24, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 981431746, 'comment_body': 'Please use here CamelCase as well', 'comment_created': datetime.datetime(2022, 9, 27, 15, 58, 57, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 981977654, 'comment_body': 'Oh, this slipped through. I think this condition can be removed. ', 'comment_created': datetime.datetime(2022, 9, 28, 6, 3, 40, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 981983144, 'comment_body': 'This smart pointer will delete the worker even though it might still be running. \r\nWe need to wait for the task to be finished in the destructor of this class. Check out other places in the code for a template. ', 'comment_created': datetime.datetime(2022, 9, 28, 6, 12, 3, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 981984021, 'comment_body': 'If you plan to use this from two threads this needs to become an atomic ', 'comment_created': datetime.datetime(2022, 9, 28, 6, 13, 30, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 981985604, 'comment_body': 'It needs to be replaced with a signal slot connection from the worker thread. ', 'comment_created': datetime.datetime(2022, 9, 28, 6, 15, 51, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 983955922, 'comment_body': 'Deleted 👍 ', 'comment_created': datetime.datetime(2022, 9, 29, 19, 41, 55, tzinfo=datetime.timezone.utc), 'commenter': 'fatihemreyildiz', 'type': 'User'}, {'comment_id': 983957154, 'comment_body': ""I've added a quit() in the last method of the worker, and this triggers a bool member in WCoverArtMenu, I've added a VERIFY_OR_DEBUG_ASSERT(m_isWorkerRunning == false), IDK if that solves this issue."", 'comment_created': datetime.datetime(2022, 9, 29, 19, 43, 36, tzinfo=datetime.timezone.utc), 'commenter': 'fatihemreyildiz', 'type': 'User'}, {'comment_id': 983957737, 'comment_body': 'Added signal&slot 👍 ', 'comment_created': datetime.datetime(2022, 9, 29, 19, 44, 20, tzinfo=datetime.timezone.utc), 'commenter': 'fatihemreyildiz', 'type': 'User'}, {'comment_id': 984227186, 'comment_body': 'Please make this protected? ', 'comment_created': datetime.datetime(2022, 9, 30, 5, 47, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 984227514, 'comment_body': '```suggestion\r\n    ~CoverArtCopyWorker() override = default;\r\n```', 'comment_created': datetime.datetime(2022, 9, 30, 5, 47, 38, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 984227964, 'comment_body': '```suggestion\r\n    void coverArtUpdtated(const CoverInfoRelative& coverInfo);\r\n```\r\nThat is a status imformation no imperative ', 'comment_created': datetime.datetime(2022, 9, 30, 5, 48, 35, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 984228748, 'comment_body': 'Did you manage to run the message box from this thread? Is it a third swim lane? ', 'comment_created': datetime.datetime(2022, 9, 30, 5, 50, 22, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 984230314, 'comment_body': '```suggestion\r\n    auto selectedCoverFileAccess = mixxx::FileAccess(mixxx::FileInfo(m_selectedCoverArtFilePath));\r\n```', 'comment_created': datetime.datetime(2022, 9, 30, 5, 54, 1, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 984232118, 'comment_body': 'Error handling is missing here: isReadable() ..\r\n', 'comment_created': datetime.datetime(2022, 9, 30, 5, 57, 58, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 984236549, 'comment_body': 'FileAccess already has e FileInfo member that should be used. QFileInfo is heavy, and makes use of caching.\r\nIt is the best to have only one instance per file.  ', 'comment_created': datetime.datetime(2022, 9, 30, 6, 4, 55, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 984236890, 'comment_body': 'I think this block can be moved up a bit. ', 'comment_created': datetime.datetime(2022, 9, 30, 6, 5, 39, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 984238393, 'comment_body': 'This is redundant, because the thread ends after run() anyway. It is also misplaced in the sub function.  ', 'comment_created': datetime.datetime(2022, 9, 30, 6, 8, 50, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 984239201, 'comment_body': 'all the error conditions should be also emitted. Not sure if we should go for an extra signal or an error enum in the existing signal. ', 'comment_created': datetime.datetime(2022, 9, 30, 6, 10, 22, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 984239958, 'comment_body': 'the waiting code in the destructor is missing. ', 'comment_created': datetime.datetime(2022, 9, 30, 6, 12, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 984271983, 'comment_body': 'Yeah, this is the main thread. There is no third lane.', 'comment_created': datetime.datetime(2022, 9, 30, 7, 2, 22, tzinfo=datetime.timezone.utc), 'commenter': 'fatihemreyildiz', 'type': 'User'}, {'comment_id': 984290105, 'comment_body': ""> FileAccess already has e FileInfo member that should be used. QFileInfo is heavy, and makes use of caching. It is the best to have only one instance per file.\r\n\r\nDone 👍 \r\n\r\nThank you for this thip.\r\n\r\n> I think this block can be moved up a bit.\r\n\r\nIn order to update the cover art we need cover info, before this block we coverInfo comes. I couldn't understand where to move exactly. Could you please explain it a bit more?"", 'comment_created': datetime.datetime(2022, 9, 30, 7, 25, 8, tzinfo=datetime.timezone.utc), 'commenter': 'fatihemreyildiz', 'type': 'User'}, {'comment_id': 984299042, 'comment_body': 'IMHO Enums would make this class a bit complicated, we can just emit the signal via QString and inform user about the copying cover art failed. Just in case if they might want to check the situation.\r\n\r\nThe info message can be something like,\r\n`Error while copying the cover art to location:`\r\n`Error while copying the _temp cover art to location.`\r\n\r\nIf that happens we can get instant feedback from the user and then fix it.', 'comment_created': datetime.datetime(2022, 9, 30, 7, 35, 51, tzinfo=datetime.timezone.utc), 'commenter': 'fatihemreyildiz', 'type': 'User'}, {'comment_id': 984340469, 'comment_body': ""I couldn't understand it could you please explain it a bit more please? Thanks in advance."", 'comment_created': datetime.datetime(2022, 9, 30, 8, 23, 31, tzinfo=datetime.timezone.utc), 'commenter': 'fatihemreyildiz', 'type': 'User'}, {'comment_id': 984620988, 'comment_body': 'Something like this: \r\nhttps://github.com/mixxxdj/mixxx/blob/0580818bf89b2d709f222ab2d315eccc47f31ec5/src/engine/engineworkerscheduler.cpp#L19', 'comment_created': datetime.datetime(2022, 9, 30, 13, 53, 11, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 984623813, 'comment_body': 'Logging the warning is probably sufficient. Just signal the caller whether copying was not successful or not.  ', 'comment_created': datetime.datetime(2022, 9, 30, 13, 56, 2, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 984624537, 'comment_body': 'Oh, destructor should have this in order to not terminate the working thread, right? ', 'comment_created': datetime.datetime(2022, 9, 30, 13, 56, 44, tzinfo=datetime.timezone.utc), 'commenter': 'fatihemreyildiz', 'type': 'User'}, {'comment_id': 984624977, 'comment_body': 'Oh, I missed that. ', 'comment_created': datetime.datetime(2022, 9, 30, 13, 57, 9, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 984625779, 'comment_body': 'Perfect. ', 'comment_created': datetime.datetime(2022, 9, 30, 13, 57, 49, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 984639074, 'comment_body': 'This will issue a message box from this thread. I am not an apply guy. Is this necessary at all? ', 'comment_created': datetime.datetime(2022, 9, 30, 14, 11, 6, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 984640164, 'comment_body': 'We need also check for failure in the second path. if this code remains.  ', 'comment_created': datetime.datetime(2022, 9, 30, 14, 12, 11, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 984642389, 'comment_body': 'right. ', 'comment_created': datetime.datetime(2022, 9, 30, 14, 14, 31, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 984643207, 'comment_body': 'Oh, I just noticed that you have already implemented the message box. Nice, no need for a change. ', 'comment_created': datetime.datetime(2022, 9, 30, 14, 15, 22, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 984689623, 'comment_body': ""Oh, I didn't notice that the askForAccess populates message box. That will cause a SEG fault according to my experience with this worker. So I just check if it is readable, if it is not readable emitting fail signal would work IMHO. What do you think?"", 'comment_created': datetime.datetime(2022, 9, 30, 15, 3, 43, tzinfo=datetime.timezone.utc), 'commenter': 'fatihemreyildiz', 'type': 'User'}, {'comment_id': 984690739, 'comment_body': 'So double check `isReadable` for both of the paths would work?', 'comment_created': datetime.datetime(2022, 9, 30, 15, 4, 52, tzinfo=datetime.timezone.utc), 'commenter': 'fatihemreyildiz', 'type': 'User'}, {'comment_id': 984710168, 'comment_body': 'We need the isReadable() == true state at least. I have no clue about the implications on macOS. ', 'comment_created': datetime.datetime(2022, 9, 30, 15, 26, 16, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 987321122, 'comment_body': 'This variable is not initialized in the constructor ', 'comment_created': datetime.datetime(2022, 10, 4, 20, 53, 29, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}]","[{'commit_sha': '048beb340701e73373e44282874f89d607a3ca78', 'committer_username': 'fatihemreyildiz', 'committer_name': 'Emre', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 20, 20, 2, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': '643272ef85ef1499e5f15d7182e86092f0820dee', 'committer_username': 'fatihemreyildiz', 'committer_name': 'Emre', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 20, 20, 2, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': '36e86965debbdd5a0a78024d2efae54f8c8165e4', 'committer_username': 'fatihemreyildiz', 'committer_name': 'Emre', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 20, 20, 2, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9a52cd354ef840ffd924a3a87358447fea1b20cf', 'committer_username': 'fatihemreyildiz', 'committer_name': 'Emre', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 20, 20, 2, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': '690c6457a1a28d8a01dbd7fb902da83085deaec1', 'committer_username': 'fatihemreyildiz', 'committer_name': 'Emre', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 20, 20, 2, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': '76b9dc82949e4dbe02cfe04d5c03fe331d232b3a', 'committer_username': 'fatihemreyildiz', 'committer_name': 'Emre', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 20, 20, 2, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2e13c64705390e3dd58526ec66a28c126347792c', 'committer_username': 'fatihemreyildiz', 'committer_name': 'Emre', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 20, 20, 2, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a333bcf86ae8feb79a4089d2c28ab224f03fe4c2', 'committer_username': 'fatihemreyildiz', 'committer_name': 'Emre', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 20, 20, 2, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': '372741f10706be57257e517b97448c2a851a35fa', 'committer_username': 'fatihemreyildiz', 'committer_name': 'Emre', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 20, 20, 2, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': '775eed12978fec638620a6760db6bcff5f7379d3', 'committer_username': 'fatihemreyildiz', 'committer_name': 'Emre', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 20, 20, 2, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c63be19320a51e709e1321fbc051c13ead083a08', 'committer_username': 'fatihemreyildiz', 'committer_name': 'Emre', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 20, 20, 2, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd6102b0feeb45a0ce5b237dd4529aff389450115', 'committer_username': 'fatihemreyildiz', 'committer_name': 'Emre', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 20, 20, 2, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f974a48942b32fe28c3108ac7c0fd721c3a14d21', 'committer_username': 'fatihemreyildiz', 'committer_name': 'Emre', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 20, 20, 2, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e5558a2b79989122b4c3f1d5146c2efe487c66de', 'committer_username': 'fatihemreyildiz', 'committer_name': 'Emre', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 20, 20, 2, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': '97196d842be57b96f7e765971aa6b420b336601d', 'committer_username': 'fatihemreyildiz', 'committer_name': 'Emre', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 20, 20, 2, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': '48977b324c7859573f06804cece802807ec7af30', 'committer_username': 'fatihemreyildiz', 'committer_name': 'Emre', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 20, 20, 2, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': '388fe59035f1c4cbc515d5c121e65113bcf6a429', 'committer_username': 'fatihemreyildiz', 'committer_name': 'Emre', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 20, 20, 2, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a615bed626d9fc0bb19d2c190310c1c46be2b874', 'committer_username': 'fatihemreyildiz', 'committer_name': 'Emre', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 20, 20, 2, 55, tzinfo=datetime.timezone.utc)}]",Emre,67206006,,User,,5,,21,10
1060905811,ImageFileData class added to write images without loss,"As we talked on here #10902 before. This class aims to write images without loss especially for ""jpg-jpeg"" and also that will be useful when we want to write a file from online sources, in other words cover art fetcher.",True,10908,https://api.github.com/repos/mixxxdj/mixxx/pulls/10908,https://github.com/mixxxdj/mixxx/pull/10908,closed,118,0,3,2,0,1,1,0,[{'name': 'build'}],2022-09-19 23:25:41+00:00,2022-09-20 11:46:20+00:00,44439.0,12:20:39,"[{'comment_id': 974918096, 'comment_body': 'I think save() will fail if the extension is not detected: \r\nhttps://github.com/qt/qtbase/blob/9d2cc4dd766ca6538e17040b6ac845ed880ab0fe/tests/auto/gui/image/qimagewriter/tst_qimagewriter.cpp#L373\r\n\r\nBelow we write the m_coverArtBytes unconditionally. \r\nI think we should also fail if the extension in coverArtAbsoluteFilePath does not match the m_coverArtFormat.\r\n\r\n ', 'comment_created': datetime.datetime(2022, 9, 20, 6, 5, 14, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}]","[{'commit_sha': 'cf55a3ddc6961501d1cd0fb4698777a2d1ae7d8e', 'committer_username': 'fatihemreyildiz', 'committer_name': 'Emre', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 20, 20, 2, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': '925edab66431d47ada9d0173f1478efcab141436', 'committer_username': 'fatihemreyildiz', 'committer_name': 'Emre', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 20, 20, 2, 55, tzinfo=datetime.timezone.utc)}]",Emre,67206006,,User,,5,,21,10

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
10126031,mixxx,mixxxdj/mixxx,C++,1253,4341,136,357,48321,2136,16,251,"[{'id': 1060905811, 'number': 10908, 'closed': datetime.datetime(2022, 9, 20, 11, 46, 20, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 9, 19, 23, 25, 41, tzinfo=datetime.timezone.utc), 'time_taken': 44439.0, 'time_delta': '12:20:39', 'additions': 118, 'deletions': 0, 'state': 'closed'}, {'id': 1057284785, 'number': 10902, 'closed': datetime.datetime(2022, 10, 5, 21, 34, 36, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 9, 15, 11, 50, 13, tzinfo=datetime.timezone.utc), 'time_taken': 1763063.0, 'time_delta': '20 days, 9:44:23', 'additions': 304, 'deletions': 33, 'state': 'closed'}, {'id': 1055266232, 'number': 10897, 'closed': datetime.datetime(2022, 9, 14, 5, 20, 44, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 9, 13, 23, 4, 39, tzinfo=datetime.timezone.utc), 'time_taken': 22565.0, 'time_delta': '6:16:05', 'additions': 326, 'deletions': 287, 'state': 'closed'}, {'id': 1050365535, 'number': 10878, 'closed': datetime.datetime(2022, 9, 9, 5, 53, 22, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 9, 8, 14, 29, 29, tzinfo=datetime.timezone.utc), 'time_taken': 55433.0, 'time_delta': '15:23:53', 'additions': 6, 'deletions': 0, 'state': 'closed'}, {'id': 1045235291, 'number': 10861, 'closed': datetime.datetime(2022, 9, 3, 15, 21, 34, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 9, 2, 19, 55, 49, tzinfo=datetime.timezone.utc), 'time_taken': 69945.0, 'time_delta': '19:25:45', 'additions': 0, 'deletions': 3, 'state': 'closed'}, {'id': 1045116814, 'number': 10860, 'closed': None, 'created': datetime.datetime(2022, 9, 2, 16, 53, 19, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 1321, 'deletions': 10, 'state': 'open'}, {'id': 1036951882, 'number': 10822, 'closed': datetime.datetime(2022, 9, 12, 10, 52, 27, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 25, 15, 46, 28, tzinfo=datetime.timezone.utc), 'time_taken': 1537559.0, 'time_delta': '17 days, 19:05:59', 'additions': 88, 'deletions': 26, 'state': 'closed'}, {'id': 1032637807, 'number': 4909, 'closed': datetime.datetime(2022, 8, 23, 17, 31, 54, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 22, 10, 37, 59, tzinfo=datetime.timezone.utc), 'time_taken': 111235.0, 'time_delta': '1 day, 6:53:55', 'additions': 8, 'deletions': 3, 'state': 'closed'}, {'id': 1023542384, 'number': 4887, 'closed': None, 'created': datetime.datetime(2022, 8, 11, 7, 48, 35, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 1086, 'deletions': 308, 'state': 'open'}, {'id': 1011002212, 'number': 4871, 'closed': datetime.datetime(2022, 9, 29, 7, 8, 35, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 28, 15, 39, 20, tzinfo=datetime.timezone.utc), 'time_taken': 5412555.0, 'time_delta': '62 days, 15:29:15', 'additions': 282, 'deletions': 532, 'state': 'closed'}, {'id': 1004409580, 'number': 4864, 'closed': datetime.datetime(2022, 8, 10, 19, 13, 55, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 21, 16, 11, 47, tzinfo=datetime.timezone.utc), 'time_taken': 1738928.0, 'time_delta': '20 days, 3:02:08', 'additions': 63, 'deletions': 46, 'state': 'closed'}, {'id': 993429228, 'number': 4851, 'closed': datetime.datetime(2023, 2, 7, 22, 50, 50, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 11, 18, 37, 32, tzinfo=datetime.timezone.utc), 'time_taken': 18245598.0, 'time_delta': '211 days, 4:13:18', 'additions': 1268, 'deletions': 64, 'state': 'closed'}, {'id': 985815421, 'number': 4836, 'closed': datetime.datetime(2022, 7, 15, 18, 7, 31, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 3, 21, 9, 54, tzinfo=datetime.timezone.utc), 'time_taken': 1025857.0, 'time_delta': '11 days, 20:57:37', 'additions': 339, 'deletions': 195, 'state': 'closed'}, {'id': 949658985, 'number': 4772, 'closed': datetime.datetime(2022, 7, 7, 21, 2, 20, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 5, 27, 19, 8, 42, tzinfo=datetime.timezone.utc), 'time_taken': 3549218.0, 'time_delta': '41 days, 1:53:38', 'additions': 266, 'deletions': 1, 'state': 'closed'}, {'id': 932983227, 'number': 4752, 'closed': datetime.datetime(2022, 5, 16, 6, 51, 39, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 5, 10, 23, 31, 27, tzinfo=datetime.timezone.utc), 'time_taken': 458412.0, 'time_delta': '5 days, 7:20:12', 'additions': 29, 'deletions': 5, 'state': 'closed'}, {'id': 883759055, 'number': 4700, 'closed': datetime.datetime(2022, 3, 22, 21, 18, 39, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 3, 18, 19, 59, 25, tzinfo=datetime.timezone.utc), 'time_taken': 350354.0, 'time_delta': '4 days, 1:19:14', 'additions': 11, 'deletions': 2, 'state': 'closed'}, {'id': 878399104, 'number': 4697, 'closed': datetime.datetime(2022, 3, 13, 15, 57, 43, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 3, 13, 14, 24, 48, tzinfo=datetime.timezone.utc), 'time_taken': 5575.0, 'time_delta': '1:32:55', 'additions': 9, 'deletions': 0, 'state': 'closed'}]"
12713164,manual,mixxxdj/manual,Python,118,50,10,80,2513,178,9,33,"[{'id': 1059294271, 'number': 517, 'closed': datetime.datetime(2022, 9, 17, 16, 26, 53, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 9, 17, 10, 7, 30, tzinfo=datetime.timezone.utc), 'time_taken': 22763.0, 'time_delta': '6:19:23', 'additions': 4, 'deletions': 8, 'state': 'closed'}]"
