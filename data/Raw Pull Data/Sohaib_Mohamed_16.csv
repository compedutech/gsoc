pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
573939890,Add SysArchMeter,,True,1213,https://api.github.com/repos/performancecopilot/pcp/pulls/1213,https://github.com/performancecopilot/pcp/pull/1213,closed,103,0,5,5,0,0,1,0,[{'name': 'feature'}],2021-02-16 05:40:19+00:00,2021-02-16 06:45:16+00:00,3897.0,1:04:57,[],"[{'commit_sha': 'eea089480c62d80072362f2fce247f6b5912816b', 'committer_username': 'smalinux', 'committer_name': 'Sohaib Mohamed', 'committer_email': None, 'commit_date': datetime.datetime(2014, 7, 17, 23, 59, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9931613110c5150349124a2d0c95605a310f53d8', 'committer_username': 'smalinux', 'committer_name': 'Sohaib Mohamed', 'committer_email': None, 'commit_date': datetime.datetime(2014, 7, 17, 23, 59, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '05e24744c5424a83df5d3f4fa3f7007627d57bb3', 'committer_username': 'smalinux', 'committer_name': 'Sohaib Mohamed', 'committer_email': None, 'commit_date': datetime.datetime(2014, 7, 17, 23, 59, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8694f6834c92c244aac23476ae6b0122870b1101', 'committer_username': 'smalinux', 'committer_name': 'Sohaib Mohamed', 'committer_email': None, 'commit_date': datetime.datetime(2014, 7, 17, 23, 59, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c7109e59d91c30e4da8aadb7501cc1163d9cf75b', 'committer_username': 'smalinux', 'committer_name': 'Sohaib Mohamed', 'committer_email': None, 'commit_date': datetime.datetime(2014, 7, 17, 23, 59, 52, tzinfo=datetime.timezone.utc)}]",Sohaib Mohamed,8196176,,User,,124,,57,159
577001245,pcp-htop: Add ZFS ARC statistics,,True,1218,https://api.github.com/repos/performancecopilot/pcp/pulls/1218,https://github.com/performancecopilot/pcp/pull/1218,closed,341,1,11,1,0,0,0,0,[],2021-02-20 20:22:50+00:00,2021-02-22 03:41:26+00:00,112716.0,"1 day, 7:18:36",[],"[{'commit_sha': '762bc3047ddebbdcc7f03566b943d6d5a29ad5d8', 'committer_username': 'smalinux', 'committer_name': 'Sohaib Mohamed', 'committer_email': None, 'commit_date': datetime.datetime(2014, 7, 17, 23, 59, 52, tzinfo=datetime.timezone.utc)}]",Sohaib Mohamed,8196176,,User,,124,,57,159
676045826,Introduce the DynamicMeter class for runtime extension,"This commit is based on exploratory work by Sohaib Mohamed.

The end goal is two-fold - to support addition of Meters we
build via configuration files for both the PCP platform and
for scripts ( https://github.com/htop-dev/htop/issues/526 )

Here, we focus on generic code and the PCP support.  A new
class DynamicMeter is introduced - its use the special case
'param' field handling that previously was used only by the
CPUMeter, such that every runtime-configured Meter is given
a unique identifier.  Unlike with the CPUMeter this is used
internally only.  When reading/writing to htoprc instead of
CPU(N) - where N is an integer param (CPU number) - we use
the string name for each meter.  For example, if we have a
configuration for a DynamicMeter for some Redis metrics, we
might read and write ""Dynamic(redis)"".  This identifier is
subsequently matched (back) up to the configuration file so
we're able to re-create arbitrary user configurations.

The PCP platform configuration file format is fairly simple.
We expand configs from several directories, including the
users homedir alongside htoprc (below htop/meters/) and also
/etc/pcp/htop/meters.  The format will be described via a
new pcp-htop(5) man page, but its basically ini-style and
each Meter has one or more metric expressions associated, as
well as specifications for labels, color and so on via a dot
separated notation for individual metrics within the Meter.

A few initial sample configuration files are provided below
./pcp/meters that give the general idea.  The PCP ""derived""
metric specification - see pmRegisterDerived(3) - is used
as the syntax for specifying metrics in PCP DynamicMeters.",True,669,https://api.github.com/repos/htop-dev/htop/pulls/669,https://github.com/htop-dev/htop/pull/669,closed,1144,83,49,7,0,26,2,0,"[{'name': 'new feature'}, {'name': 'PCP'}]",2021-06-23 08:01:21+00:00,2021-07-08 06:31:22+00:00,1290601.0,"14 days, 22:30:01","[{'comment_id': 656871493, 'comment_body': '```suggestion\r\n   const char* label = meter->description ? meter->description : meter->name;\r\n```', 'comment_created': datetime.datetime(2021, 6, 23, 8, 23, 23, tzinfo=datetime.timezone.utc), 'commenter': 'BenBE', 'type': 'User'}, {'comment_id': 656873730, 'comment_body': '```suggestion\r\n\r\n\r\n```', 'comment_created': datetime.datetime(2021, 6, 23, 8, 26, 15, tzinfo=datetime.timezone.utc), 'commenter': 'BenBE', 'type': 'User'}, {'comment_id': 656874337, 'comment_body': 'Why not also offer dark gray too?', 'comment_created': datetime.datetime(2021, 6, 23, 8, 27, 2, tzinfo=datetime.timezone.utc), 'commenter': 'BenBE', 'type': 'User'}, {'comment_id': 656876461, 'comment_body': ""Missing NULL check for keys that don't exist?"", 'comment_created': datetime.datetime(2021, 6, 23, 8, 29, 45, tzinfo=datetime.timezone.utc), 'commenter': 'BenBE', 'type': 'User'}, {'comment_id': 656877876, 'comment_body': 'Possible NULL deref on `meter`', 'comment_created': datetime.datetime(2021, 6, 23, 8, 31, 35, tzinfo=datetime.timezone.utc), 'commenter': 'BenBE', 'type': 'User'}, {'comment_id': 656878558, 'comment_body': 'Missing argument name for second parameter.', 'comment_created': datetime.datetime(2021, 6, 23, 8, 32, 29, tzinfo=datetime.timezone.utc), 'commenter': 'BenBE', 'type': 'User'}, {'comment_id': 656884270, 'comment_body': 'NULL deref on platforms w/o dynamic meters (when `DynamicMeters_new` returns NULL).', 'comment_created': datetime.datetime(2021, 6, 23, 8, 40, 7, tzinfo=datetime.timezone.utc), 'commenter': 'BenBE', 'type': 'User'}, {'comment_id': 657605237, 'comment_body': 'Fixed, thanks.', 'comment_created': datetime.datetime(2021, 6, 24, 3, 52, 5, tzinfo=datetime.timezone.utc), 'commenter': 'natoscott', 'type': 'User'}, {'comment_id': 657605310, 'comment_body': 'Sure.', 'comment_created': datetime.datetime(2021, 6, 24, 3, 52, 15, tzinfo=datetime.timezone.utc), 'commenter': 'natoscott', 'type': 'User'}, {'comment_id': 657605364, 'comment_body': 'OK, will add a guard.', 'comment_created': datetime.datetime(2021, 6, 24, 3, 52, 35, tzinfo=datetime.timezone.utc), 'commenter': 'natoscott', 'type': 'User'}, {'comment_id': 657606152, 'comment_body': ""Hmm - that would require the platform to have a DynamicMeter_class entry in its Platform_meterTypes array though, which would be a monumental botch.  So, I don't think this one warrants extra special case handling."", 'comment_created': datetime.datetime(2021, 6, 24, 3, 55, 16, tzinfo=datetime.timezone.utc), 'commenter': 'natoscott', 'type': 'User'}, {'comment_id': 657648048, 'comment_body': 'Then this at least should get a proper `assert` (if not here, then at least in the `Hashtable_foreach` to check things are non-NULL … ', 'comment_created': datetime.datetime(2021, 6, 24, 5, 58, 42, tzinfo=datetime.timezone.utc), 'commenter': 'BenBE', 'type': 'User'}, {'comment_id': 657649845, 'comment_body': 'Indentation', 'comment_created': datetime.datetime(2021, 6, 24, 6, 3, tzinfo=datetime.timezone.utc), 'commenter': 'BenBE', 'type': 'User'}, {'comment_id': 657675155, 'comment_body': 'ah, accidental tab - fixed thanks.', 'comment_created': datetime.datetime(2021, 6, 24, 6, 55, 16, tzinfo=datetime.timezone.utc), 'commenter': 'natoscott', 'type': 'User'}, {'comment_id': 657676095, 'comment_body': ""Shouldn't ever happen but added this one to be on the safe side."", 'comment_created': datetime.datetime(2021, 6, 24, 6, 56, 56, tzinfo=datetime.timezone.utc), 'commenter': 'natoscott', 'type': 'User'}, {'comment_id': 659224520, 'comment_body': 'Missing headers for `Hashtable` and `ProcessList`', 'comment_created': datetime.datetime(2021, 6, 26, 21, 13, 10, tzinfo=datetime.timezone.utc), 'commenter': 'BenBE', 'type': 'User'}, {'comment_id': 659226146, 'comment_body': 'May crash htop on overlong meter names (from config file?)', 'comment_created': datetime.datetime(2021, 6, 26, 21, 32, 39, tzinfo=datetime.timezone.utc), 'commenter': 'BenBE', 'type': 'User'}, {'comment_id': 659227318, 'comment_body': 'Missing `Hashtable.h` and `RichString.h`', 'comment_created': datetime.datetime(2021, 6, 26, 21, 47, 32, tzinfo=datetime.timezone.utc), 'commenter': 'BenBE', 'type': 'User'}, {'comment_id': 659368544, 'comment_body': 'I think the color here should be fixed to match the rest of the htop theme, I suggest this instead:\r\n```\r\nRichString_appendnAscii(out, CRT_colors[METER_TEXT], buffer, len);\r\n```', 'comment_created': datetime.datetime(2021, 6, 27, 19, 54, 40, tzinfo=datetime.timezone.utc), 'commenter': 'smalinux', 'type': 'User'}, {'comment_id': 664968826, 'comment_body': ""It'd have to be either the file path that was super long I guess, or the libpcp-supplied error message.  We're about to call CRT_fatalError here, so its mainly a matter of how we fail.  Looking into the xSnprintf internals, we're not going to return from that if we would overrun the buffer - its going to call _exit internally - so there's probably not anything meaningful we can do here."", 'comment_created': datetime.datetime(2021, 7, 7, 1, 7, 17, tzinfo=datetime.timezone.utc), 'commenter': 'natoscott', 'type': 'User'}, {'comment_id': 664969063, 'comment_body': 'Yep, agreed - will fix up, thanks @smalinux', 'comment_created': datetime.datetime(2021, 7, 7, 1, 7, 56, tzinfo=datetime.timezone.utc), 'commenter': 'natoscott', 'type': 'User'}, {'comment_id': 665061113, 'comment_body': 'We could use `xAsprintf` here and avoid the whole buffer length issue. Just need to make sure the returned string is freed subsequently.', 'comment_created': datetime.datetime(2021, 7, 7, 5, 47, 48, tzinfo=datetime.timezone.utc), 'commenter': 'BenBE', 'type': 'User'}, {'comment_id': 665092393, 'comment_body': ""OK, will make that change.  There is no 'subsequently' though - the string is passed to CRT_fatalError."", 'comment_created': datetime.datetime(2021, 7, 7, 6, 53, 28, tzinfo=datetime.timezone.utc), 'commenter': 'natoscott', 'type': 'User'}, {'comment_id': 665402551, 'comment_body': 'Indentation', 'comment_created': datetime.datetime(2021, 7, 7, 14, 2, 51, tzinfo=datetime.timezone.utc), 'commenter': 'BenBE', 'type': 'User'}, {'comment_id': 665403951, 'comment_body': 'Customarily the program name is prefixed in an error message. So what about this?\r\n```suggestion\r\n                   ""%s: Failed to parse expression in %s at line %u\\n%s\\n"",\r\n                   pmGetProgname(), path, line, error);\r\n```', 'comment_created': datetime.datetime(2021, 7, 7, 14, 4, 17, tzinfo=datetime.timezone.utc), 'commenter': 'BenBE', 'type': 'User'}, {'comment_id': 665404714, 'comment_body': 'Indentation', 'comment_created': datetime.datetime(2021, 7, 7, 14, 5, 8, tzinfo=datetime.timezone.utc), 'commenter': 'BenBE', 'type': 'User'}]","[{'commit_sha': 'a0f758009bcab8baaff0ba8aaf972445371c13b9', 'committer_username': 'natoscott', 'committer_name': 'Nathan Scott', 'committer_email': None, 'commit_date': datetime.datetime(2011, 8, 5, 4, 23, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': '865b85eb2d31321e9c37334838fa514ac348d61a', 'committer_username': 'natoscott', 'committer_name': 'Nathan Scott', 'committer_email': None, 'commit_date': datetime.datetime(2011, 8, 5, 4, 23, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f0ed0fdafb9ecefc9d103ffb8f5d91bf723518f6', 'committer_username': 'natoscott', 'committer_name': 'Nathan Scott', 'committer_email': None, 'commit_date': datetime.datetime(2011, 8, 5, 4, 23, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': '93be3211aeb3bccc198d5d19596e198888c94d3e', 'committer_username': 'smalinux', 'committer_name': 'Sohaib Mohamed', 'committer_email': None, 'commit_date': datetime.datetime(2014, 7, 17, 23, 59, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '15a71f32fe1636d24bc8c2ae5e1eb689d2e28c7e', 'committer_username': 'natoscott', 'committer_name': 'Nathan Scott', 'committer_email': None, 'commit_date': datetime.datetime(2011, 8, 5, 4, 23, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': '149774209be588fb0da001e5d9cac224862cc5da', 'committer_username': 'natoscott', 'committer_name': 'Nathan Scott', 'committer_email': None, 'commit_date': datetime.datetime(2011, 8, 5, 4, 23, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': '01f5b892785014db30db4d6b4b7c23e042c7ffe4', 'committer_username': 'natoscott', 'committer_name': 'Nathan Scott', 'committer_email': None, 'commit_date': datetime.datetime(2011, 8, 5, 4, 23, 27, tzinfo=datetime.timezone.utc)}]",Nathan Scott,960510,,User,,39,,27,66
695662466,PCP: Dynamic columns,"Implements support for arbitrary Performance Co-Pilot
metrics with per-process instance domains to form new
htop columns.  The column-to-metric mappings are setup
using configuration files which will be documented via
man pages as part of a follow-up commit.

We provide an initial set of column configurations so
as to provide new capabilities to pcp-htop: including
configs for containers, open fd counts, scheduler run
queue time, tcp/udp bytes/calls sent/recv, delay acct,
virtual machine guests, detailed virtual memory, swap.

Note there is a change to the configuration file path
resolution algorithm introduced for 'dynamic meters'.
First, look in any custom PCP_HTOP_DIR location.  Then
iterate, in priority order, users home directory, then
local sysadmins files in /etc/pcp/htop, then readonly
configuration files below /usr/share/pcp/htop.  This
final location becomes the preferred place for our own
shipped meter and column files.

The Settings file (htoprc) writing code is updated to
not using the numeric identifier for dynamic columns.
The same strategy used for dynamic meters is used here
where we write Dynamic(name) so the name can be setup
once more at start.  Regular (static) columns writing
to htoprc - i.e. numerically indexed - is unchanged.",True,707,https://api.github.com/repos/htop-dev/htop/pulls/707,https://github.com/htop-dev/htop/pull/707,closed,1063,174,59,1,19,99,2,0,"[{'name': 'new feature'}, {'name': 'PCP'}]",2021-07-23 04:35:01+00:00,2021-08-13 05:58:39+00:00,1819418.0,"21 days, 1:23:38","[{'comment_id': 675348563, 'comment_body': 'Avoid dead/commented-out code', 'comment_created': datetime.datetime(2021, 7, 23, 7, 6, 53, tzinfo=datetime.timezone.utc), 'commenter': 'BenBE', 'type': 'User'}, {'comment_id': 675349290, 'comment_body': '```suggestion\r\n   if (column)\r\n```', 'comment_created': datetime.datetime(2021, 7, 23, 7, 8, 17, tzinfo=datetime.timezone.utc), 'commenter': 'BenBE', 'type': 'User'}, {'comment_id': 675350509, 'comment_body': 'Still not quite happy including Linux stuff on PCP explicitly …', 'comment_created': datetime.datetime(2021, 7, 23, 7, 10, 43, tzinfo=datetime.timezone.utc), 'commenter': 'BenBE', 'type': 'User'}, {'comment_id': 675350644, 'comment_body': 'dito.', 'comment_created': datetime.datetime(2021, 7, 23, 7, 10, 57, tzinfo=datetime.timezone.utc), 'commenter': 'BenBE', 'type': 'User'}, {'comment_id': 675350835, 'comment_body': 'No need for extra parens …', 'comment_created': datetime.datetime(2021, 7, 23, 7, 11, 22, tzinfo=datetime.timezone.utc), 'commenter': 'BenBE', 'type': 'User'}, {'comment_id': 675350924, 'comment_body': 'dito.', 'comment_created': datetime.datetime(2021, 7, 23, 7, 11, 38, tzinfo=datetime.timezone.utc), 'commenter': 'BenBE', 'type': 'User'}, {'comment_id': 675352855, 'comment_body': '```suggestion\r\n#include ""pcp/PCPProcess.h""\r\n```\r\n\r\nPlus proper sorting below', 'comment_created': datetime.datetime(2021, 7, 23, 7, 15, 47, tzinfo=datetime.timezone.utc), 'commenter': 'BenBE', 'type': 'User'}, {'comment_id': 675353564, 'comment_body': 'Maybe also allow ``-``?', 'comment_created': datetime.datetime(2021, 7, 23, 7, 17, 21, tzinfo=datetime.timezone.utc), 'commenter': 'BenBE', 'type': 'User'}, {'comment_id': 675354016, 'comment_body': 'Indentation', 'comment_created': datetime.datetime(2021, 7, 23, 7, 18, 19, tzinfo=datetime.timezone.utc), 'commenter': 'BenBE', 'type': 'User'}, {'comment_id': 675354399, 'comment_body': 'Indentation of this whole block …', 'comment_created': datetime.datetime(2021, 7, 23, 7, 19, 7, tzinfo=datetime.timezone.utc), 'commenter': 'BenBE', 'type': 'User'}, {'comment_id': 675354591, 'comment_body': 'Also note the rule on consistent embracing of blocks …', 'comment_created': datetime.datetime(2021, 7, 23, 7, 19, 32, tzinfo=datetime.timezone.utc), 'commenter': 'BenBE', 'type': 'User'}, {'comment_id': 675354724, 'comment_body': 'Sort order …', 'comment_created': datetime.datetime(2021, 7, 23, 7, 19, 48, tzinfo=datetime.timezone.utc), 'commenter': 'BenBE', 'type': 'User'}, {'comment_id': 676014497, 'comment_body': 'IMHO no real need to make the `!= NULL` explicit.', 'comment_created': datetime.datetime(2021, 7, 24, 15, 51, 38, tzinfo=datetime.timezone.utc), 'commenter': 'BenBE', 'type': 'User'}, {'comment_id': 676014512, 'comment_body': 'Formatting …', 'comment_created': datetime.datetime(2021, 7, 24, 15, 51, 51, tzinfo=datetime.timezone.utc), 'commenter': 'BenBE', 'type': 'User'}, {'comment_id': 676014896, 'comment_body': ""Shouldn't there be a check for this actually being a dynamic column?"", 'comment_created': datetime.datetime(2021, 7, 24, 15, 54, 9, tzinfo=datetime.timezone.utc), 'commenter': 'BenBE', 'type': 'User'}, {'comment_id': 676015104, 'comment_body': 'Is this really the correct spelling/punctuation?', 'comment_created': datetime.datetime(2021, 7, 24, 15, 55, 57, tzinfo=datetime.timezone.utc), 'commenter': 'BenBE', 'type': 'User'}, {'comment_id': 676015421, 'comment_body': 'Put this into the `default` case of the switch statement and safe one level of indentation.  Also makes the patch much cleaner.', 'comment_created': datetime.datetime(2021, 7, 24, 15, 59, 10, tzinfo=datetime.timezone.utc), 'commenter': 'BenBE', 'type': 'User'}, {'comment_id': 676015537, 'comment_body': 'Buffer uninitialized on non-existing columns.', 'comment_created': datetime.datetime(2021, 7, 24, 16, 0, 19, tzinfo=datetime.timezone.utc), 'commenter': 'BenBE', 'type': 'User'}, {'comment_id': 676015659, 'comment_body': 'Please do so and cleanup before final revision … ;-)', 'comment_created': datetime.datetime(2021, 7, 24, 16, 1, 29, tzinfo=datetime.timezone.utc), 'commenter': 'BenBE', 'type': 'User'}, {'comment_id': 676015721, 'comment_body': 'Alignment of those comments seems odd.', 'comment_created': datetime.datetime(2021, 7, 24, 16, 2, 4, tzinfo=datetime.timezone.utc), 'commenter': 'BenBE', 'type': 'User'}, {'comment_id': 676015981, 'comment_body': 'This artifact seems odd to be part of the PR …', 'comment_created': datetime.datetime(2021, 7, 24, 16, 4, 29, tzinfo=datetime.timezone.utc), 'commenter': 'BenBE', 'type': 'User'}, {'comment_id': 676016167, 'comment_body': 'Beware of possibly quadratic behavior on repeated calls of this function.', 'comment_created': datetime.datetime(2021, 7, 24, 16, 6, 39, tzinfo=datetime.timezone.utc), 'commenter': 'BenBE', 'type': 'User'}, {'comment_id': 676016467, 'comment_body': 'Beware of const correctness on caller-side of this function.', 'comment_created': datetime.datetime(2021, 7, 24, 16, 8, 55, tzinfo=datetime.timezone.utc), 'commenter': 'BenBE', 'type': 'User'}, {'comment_id': 676016562, 'comment_body': 'Better message/less dots?', 'comment_created': datetime.datetime(2021, 7, 24, 16, 9, 34, tzinfo=datetime.timezone.utc), 'commenter': 'BenBE', 'type': 'User'}, {'comment_id': 676016809, 'comment_body': ""```suggestion\r\n      if (!trimmed || !trimmed[0] || trimmed[0] == '#') {\r\n```"", 'comment_created': datetime.datetime(2021, 7, 24, 16, 11, 30, tzinfo=datetime.timezone.utc), 'commenter': 'BenBE', 'type': 'User'}, {'comment_id': 676016992, 'comment_body': ""Shouldn't the heading check for `[` appear before trying to split the line at `=`?"", 'comment_created': datetime.datetime(2021, 7, 24, 16, 13, 15, tzinfo=datetime.timezone.utc), 'commenter': 'BenBE', 'type': 'User'}, {'comment_id': 676017136, 'comment_body': ""This effectively tries to read from the filesystem root, which is unlikely what's intended …"", 'comment_created': datetime.datetime(2021, 7, 24, 16, 14, 30, tzinfo=datetime.timezone.utc), 'commenter': 'BenBE', 'type': 'User'}, {'comment_id': 676017348, 'comment_body': 'Given that the display expression may trigger arbitrarily complex calculations, this is possibly not a good idea IMHO.', 'comment_created': datetime.datetime(2021, 7, 24, 16, 16, 28, tzinfo=datetime.timezone.utc), 'commenter': 'BenBE', 'type': 'User'}, {'comment_id': 676017518, 'comment_body': 'Switch order of conditions for consistency with the other location with this check in place.\r\n```suggestion\r\n   int width = (this->super.width && abs(this->super.width) < 28) ? this->super.width : -12;\r\n```', 'comment_created': datetime.datetime(2021, 7, 24, 16, 18, 20, tzinfo=datetime.timezone.utc), 'commenter': 'BenBE', 'type': 'User'}, {'comment_id': 676017885, 'comment_body': 'Alignment of comments seems all over the place.', 'comment_created': datetime.datetime(2021, 7, 24, 16, 21, 45, tzinfo=datetime.timezone.utc), 'commenter': 'BenBE', 'type': 'User'}, {'comment_id': 676017906, 'comment_body': 'Alignment of comments seems all over the place.', 'comment_created': datetime.datetime(2021, 7, 24, 16, 21, 58, tzinfo=datetime.timezone.utc), 'commenter': 'BenBE', 'type': 'User'}, {'comment_id': 676017964, 'comment_body': 'Debug code …', 'comment_created': datetime.datetime(2021, 7, 24, 16, 22, 31, tzinfo=datetime.timezone.utc), 'commenter': 'BenBE', 'type': 'User'}, {'comment_id': 676018125, 'comment_body': '```suggestion\r\n# pcp-htop(1) configuration file - see pcp-htop(5)\r\n```\r\nOne comment line at the top oughta be enough …', 'comment_created': datetime.datetime(2021, 7, 24, 16, 24, 9, tzinfo=datetime.timezone.utc), 'commenter': 'BenBE', 'type': 'User'}, {'comment_id': 676018327, 'comment_body': 'Ordered as subdir …', 'comment_created': datetime.datetime(2021, 7, 24, 16, 26, 52, tzinfo=datetime.timezone.utc), 'commenter': 'BenBE', 'type': 'User'}, {'comment_id': 676023460, 'comment_body': '@BenBE any suggestions, please', 'comment_created': datetime.datetime(2021, 7, 24, 17, 16, 30, tzinfo=datetime.timezone.utc), 'commenter': 'smalinux', 'type': 'User'}, {'comment_id': 676026467, 'comment_body': '@BenBE I think this happened accidentally while trying to resolve rebase conflicts.', 'comment_created': datetime.datetime(2021, 7, 24, 17, 47, 52, tzinfo=datetime.timezone.utc), 'commenter': 'smalinux', 'type': 'User'}, {'comment_id': 676031437, 'comment_body': 'Still needs the proper error when this is not a dynamic column …', 'comment_created': datetime.datetime(2021, 7, 24, 18, 40, 23, tzinfo=datetime.timezone.utc), 'commenter': 'BenBE', 'type': 'User'}, {'comment_id': 676033358, 'comment_body': 'Avoid this explicit `else` block, by exiting from the `true` path early.', 'comment_created': datetime.datetime(2021, 7, 24, 19, 0, 27, tzinfo=datetime.timezone.utc), 'commenter': 'BenBE', 'type': 'User'}, {'comment_id': 676033515, 'comment_body': 'Avoid this extra indentation similar to the other large `switch` statement.', 'comment_created': datetime.datetime(2021, 7, 24, 19, 2, 9, tzinfo=datetime.timezone.utc), 'commenter': 'BenBE', 'type': 'User'}, {'comment_id': 676120641, 'comment_body': 'There are constants `true` and `false` in `stdbool.h` for this.', 'comment_created': datetime.datetime(2021, 7, 25, 10, 9, 16, tzinfo=datetime.timezone.utc), 'commenter': 'BenBE', 'type': 'User'}, {'comment_id': 676120700, 'comment_body': 'Accidental revert?', 'comment_created': datetime.datetime(2021, 7, 25, 10, 9, 39, tzinfo=datetime.timezone.utc), 'commenter': 'BenBE', 'type': 'User'}, {'comment_id': 676120985, 'comment_body': 'Integrate the last check into the default case as with the other large `switch` statement …', 'comment_created': datetime.datetime(2021, 7, 25, 10, 11, 53, tzinfo=datetime.timezone.utc), 'commenter': 'BenBE', 'type': 'User'}, {'comment_id': 676121564, 'comment_body': '`has_` vs. `is_`\r\n This is duplicated elsewhere too …', 'comment_created': datetime.datetime(2021, 7, 25, 10, 16, 45, tzinfo=datetime.timezone.utc), 'commenter': 'BenBE', 'type': 'User'}, {'comment_id': 676122284, 'comment_body': '```suggestion\r\nstatic void alignedDynamicColumnTitle(const ProcessList* this, int field, char* buffer, int size) {\r\n```', 'comment_created': datetime.datetime(2021, 7, 25, 10, 21, 57, tzinfo=datetime.timezone.utc), 'commenter': 'BenBE', 'type': 'User'}, {'comment_id': 676122903, 'comment_body': 'Make things consistent with other platforms …\r\n\r\n```suggestion\r\nstatic inline Hashtable* Platform_dynamicMeters(void) { return NULL; }\r\n\r\nstatic inline void Platform_dynamicColumnWriteField(ATTR_UNUSED const Process* proc, ATTR_UNUSED RichString* str, ATTR_UNUSED int param) { }\r\n```', 'comment_created': datetime.datetime(2021, 7, 25, 10, 27, 19, tzinfo=datetime.timezone.utc), 'commenter': 'BenBE', 'type': 'User'}, {'comment_id': 676285284, 'comment_body': 'Hyphen (minus) is the syntax used for subtraction in the PCP derived metrics specification, so we must exclude it here when checking name validity.', 'comment_created': datetime.datetime(2021, 7, 26, 4, 37, 27, tzinfo=datetime.timezone.utc), 'commenter': 'natoscott', 'type': 'User'}, {'comment_id': 676285928, 'comment_body': 'One alternative would be moving all *Meter.[ch] code into generic/ or a new meters/ ... either could make sense I think.  Might also serve to de-clutter the base htop source directory too I guess.\r\n\r\nEither way, this is a topic for a follow-up series of commits.', 'comment_created': datetime.datetime(2021, 7, 26, 4, 40, 1, tzinfo=datetime.timezone.utc), 'commenter': 'natoscott', 'type': 'User'}, {'comment_id': 676330639, 'comment_body': '@smalinux I think we need to handle this differently here.  When we write the config, we should write it like we do for dynamic meters - i.e. ""Dynamic(name)"" for those columns that are dynamic.  Then here in readFields we should lookup \'name\' and use that column.  For dynamic columns, like meters, these identifiers must be for use internally within htop.\r\n\r\nThe biggest problem with not doing that is that each time new column definitions are added, or removed, or even scanned in a different order from the filesystem scanning, we\'ll map those identifiers to different dynamic columns.', 'comment_created': datetime.datetime(2021, 7, 26, 6, 42, 53, tzinfo=datetime.timezone.utc), 'commenter': 'natoscott', 'type': 'User'}, {'comment_id': 676333150, 'comment_body': ""You tell me!  ;-)  What is this comment about?  I'm guessing that any flags for dynamic flags should come from parsing the configuration files... but at this stage I'd just default to zero here.  We may want the ability for a column to adjust the 'defaultSortDesc' (same data structure as flags) - this would need a new columns config file setting I think."", 'comment_created': datetime.datetime(2021, 7, 26, 6, 48, 9, tzinfo=datetime.timezone.utc), 'commenter': 'natoscott', 'type': 'User'}, {'comment_id': 676334522, 'comment_body': ""Do we really need distinct colours for columns?  I suspect not, its not really consistent with how other columns are handled.  Down the track we might want some more settings to adjust the way fields are coloured, but for now I'd keep it simple and just use the default colouring schemes used by other columns."", 'comment_created': datetime.datetime(2021, 7, 26, 6, 50, 58, tzinfo=datetime.timezone.utc), 'commenter': 'natoscott', 'type': 'User'}, {'comment_id': 676334679, 'comment_body': ""I don't think this label is used, is it?"", 'comment_created': datetime.datetime(2021, 7, 26, 6, 51, 17, tzinfo=datetime.timezone.utc), 'commenter': 'natoscott', 'type': 'User'}, {'comment_id': 676334892, 'comment_body': ""I don't think suffix makes sense for columns either."", 'comment_created': datetime.datetime(2021, 7, 26, 6, 51, 40, tzinfo=datetime.timezone.utc), 'commenter': 'natoscott', 'type': 'User'}, {'comment_id': 676335446, 'comment_body': 'In theory yes.  In practice its harmless and just makes the code slightly more convoluted/repetitive.  (this code is the same as dynamic meters)', 'comment_created': datetime.datetime(2021, 7, 26, 6, 52, 52, tzinfo=datetime.timezone.utc), 'commenter': 'natoscott', 'type': 'User'}, {'comment_id': 676335613, 'comment_body': ""Don't need maximum, thats for meters only I think?"", 'comment_created': datetime.datetime(2021, 7, 26, 6, 53, 12, tzinfo=datetime.timezone.utc), 'commenter': 'natoscott', 'type': 'User'}, {'comment_id': 676337507, 'comment_body': 'I don\'t think it makes sense to handle metrics in *exactly* the same was as dynamic meters.  Its simpler in the case of columns - it only ever makes sense to have one metric, so let\'s reflect that in the config file syntax.  In other words, just check for the keyword ""metric"" here (like we do with ""width"" for example) and parse the value as a derived metric.  We can use the column name as the first part of the metric name after ""htop."".', 'comment_created': datetime.datetime(2021, 7, 26, 6, 56, 46, tzinfo=datetime.timezone.utc), 'commenter': 'natoscott', 'type': 'User'}, {'comment_id': 676338554, 'comment_body': 'Again, not convinced we should allow users to specify the colours for columns like this.', 'comment_created': datetime.datetime(2021, 7, 26, 6, 58, 56, tzinfo=datetime.timezone.utc), 'commenter': 'natoscott', 'type': 'User'}, {'comment_id': 676338988, 'comment_body': ""I don't think we need this PCPDynamicColumnMetric type - we can only have one metric for one dynamic column (unlike dynamic meters which may have multiple metrics to a meter)."", 'comment_created': datetime.datetime(2021, 7, 26, 6, 59, 52, tzinfo=datetime.timezone.utc), 'commenter': 'natoscott', 'type': 'User'}, {'comment_id': 676339169, 'comment_body': ""Don't need 'totalMetrics' - there can be only one."", 'comment_created': datetime.datetime(2021, 7, 26, 7, 0, 14, tzinfo=datetime.timezone.utc), 'commenter': 'natoscott', 'type': 'User'}, {'comment_id': 676339555, 'comment_body': ""So we don't need to make this change - PCPDynamicMetric can be used as before."", 'comment_created': datetime.datetime(2021, 7, 26, 7, 0, 55, tzinfo=datetime.timezone.utc), 'commenter': 'natoscott', 'type': 'User'}, {'comment_id': 676339792, 'comment_body': 'Missing whitespace there.', 'comment_created': datetime.datetime(2021, 7, 26, 7, 1, 21, tzinfo=datetime.timezone.utc), 'commenter': 'natoscott', 'type': 'User'}, {'comment_id': 676341771, 'comment_body': ""Hmm, not loving the name 'dc' - its a bit cryptic for me.  Maybe 'dynamic'?"", 'comment_created': datetime.datetime(2021, 7, 26, 7, 5, 2, tzinfo=datetime.timezone.utc), 'commenter': 'natoscott', 'type': 'User'}, {'comment_id': 676343259, 'comment_body': ""Whitespace missing on 'for' - and this isn't a great approach in general.  We really only want to enable sampling of these metrics once they've been selected in the UI or read from htoprc (i.e. disabled by default, enabled only if used).  Otherwise we'll be sampling more and more metrics as more configurations are added, for no gain - only do it if needed."", 'comment_created': datetime.datetime(2021, 7, 26, 7, 7, 52, tzinfo=datetime.timezone.utc), 'commenter': 'natoscott', 'type': 'User'}, {'comment_id': 676344234, 'comment_body': ""We shouldn't provide dynamic column configs that mirror static columns.  Remove this file & I'll send through some other realistic samples we should use shortly."", 'comment_created': datetime.datetime(2021, 7, 26, 7, 9, 39, tzinfo=datetime.timezone.utc), 'commenter': 'natoscott', 'type': 'User'}, {'comment_id': 676344820, 'comment_body': ""To clarify something mentioned earlier in the review, we should not have this cmd.metric syntax for columns - just use 'metric'."", 'comment_created': datetime.datetime(2021, 7, 26, 7, 10, 46, tzinfo=datetime.timezone.utc), 'commenter': 'natoscott', 'type': 'User'}, {'comment_id': 676345077, 'comment_body': 'Remove this file, not a useful DynamicColumn in practice.', 'comment_created': datetime.datetime(2021, 7, 26, 7, 11, 16, tzinfo=datetime.timezone.utc), 'commenter': 'natoscott', 'type': 'User'}, {'comment_id': 676345145, 'comment_body': 'Remove this file, not a useful DynamicColumn in practice.', 'comment_created': datetime.datetime(2021, 7, 26, 7, 11, 23, tzinfo=datetime.timezone.utc), 'commenter': 'natoscott', 'type': 'User'}, {'comment_id': 676345536, 'comment_body': 'Remove this file, not a useful DynamicColumn in practice - this is already a static column.', 'comment_created': datetime.datetime(2021, 7, 26, 7, 12, 1, tzinfo=datetime.timezone.utc), 'commenter': 'natoscott', 'type': 'User'}, {'comment_id': 676346804, 'comment_body': 'Let\'s improve the description.  Use ""pminfo -t proc.psinfo.wchan"" output, as a sentence (start with upper case letter).', 'comment_created': datetime.datetime(2021, 7, 26, 7, 13, 52, tzinfo=datetime.timezone.utc), 'commenter': 'natoscott', 'type': 'User'}, {'comment_id': 676366222, 'comment_body': ""Doesn't this negate the actual check?\r\n\r\nBetter without the `?:` altogether …\r\n```suggestion\r\n   return !!column;\r\n```"", 'comment_created': datetime.datetime(2021, 7, 26, 7, 42, 23, tzinfo=datetime.timezone.utc), 'commenter': 'BenBE', 'type': 'User'}, {'comment_id': 677029934, 'comment_body': 'Perhaps even more clear as ""return column != NULL;"" ... ?', 'comment_created': datetime.datetime(2021, 7, 27, 0, 25, 57, tzinfo=datetime.timezone.utc), 'commenter': 'natoscott', 'type': 'User'}, {'comment_id': 677213359, 'comment_body': 'Fine with both `return !!column;` and `return column != NULL;`, though I prefer the first variant …', 'comment_created': datetime.datetime(2021, 7, 27, 8, 0, 40, tzinfo=datetime.timezone.utc), 'commenter': 'BenBE', 'type': 'User'}, {'comment_id': 678388869, 'comment_body': 'Indentation', 'comment_created': datetime.datetime(2021, 7, 28, 15, 1, 42, tzinfo=datetime.timezone.utc), 'commenter': 'BenBE', 'type': 'User'}, {'comment_id': 678390464, 'comment_body': '`name` can be `NULL` if the column is not found. Intentional? Checked that every code using that final list copes with `NULL` values?', 'comment_created': datetime.datetime(2021, 7, 28, 15, 3, 27, tzinfo=datetime.timezone.utc), 'commenter': 'BenBE', 'type': 'User'}, {'comment_id': 678391208, 'comment_body': 'Indentation', 'comment_created': datetime.datetime(2021, 7, 28, 15, 4, 15, tzinfo=datetime.timezone.utc), 'commenter': 'BenBE', 'type': 'User'}, {'comment_id': 678393497, 'comment_body': 'Maybe ""unregister"" those objects from the CRT for shutdown …', 'comment_created': datetime.datetime(2021, 7, 28, 15, 6, 47, tzinfo=datetime.timezone.utc), 'commenter': 'BenBE', 'type': 'User'}, {'comment_id': 678396111, 'comment_body': 'Please explain these changes. Hashtable functions are always assumed to be called on live objects, thus `this!=NULL` …', 'comment_created': datetime.datetime(2021, 7, 28, 15, 9, 29, tzinfo=datetime.timezone.utc), 'commenter': 'BenBE', 'type': 'User'}, {'comment_id': 678399960, 'comment_body': ""Okay, that's a chance for cleanup of both locations in another PR then …"", 'comment_created': datetime.datetime(2021, 7, 28, 15, 13, 36, tzinfo=datetime.timezone.utc), 'commenter': 'BenBE', 'type': 'User'}, {'comment_id': 678416223, 'comment_body': '@BenBE I got errors from GitHub CI ""error: null pointer dereference"" [here](https://github.com/natoscott/htop/runs/3179357083)\r\nSo I added this last commit to trying to fix that', 'comment_created': datetime.datetime(2021, 7, 28, 15, 30, 20, tzinfo=datetime.timezone.utc), 'commenter': 'smalinux', 'type': 'User'}, {'comment_id': 678417587, 'comment_body': 'Yep. Indicating that you at one place call it without a proper NULL check ;-)', 'comment_created': datetime.datetime(2021, 7, 28, 15, 31, 41, tzinfo=datetime.timezone.utc), 'commenter': 'BenBE', 'type': 'User'}, {'comment_id': 678421321, 'comment_body': '@BenBE I will revert this last commit now to see what will happen. thank you :)', 'comment_created': datetime.datetime(2021, 7, 28, 15, 35, 54, tzinfo=datetime.timezone.utc), 'commenter': 'smalinux', 'type': 'User'}, {'comment_id': 678540912, 'comment_body': 'These two calls lack a NULL check. Adding the check should resolve the compile issue.\r\n\r\nAn alternative would be to always initialize this Hashtable instead of using `NULL` when a platform does not support dynamic columns.', 'comment_created': datetime.datetime(2021, 7, 28, 18, 10, 14, tzinfo=datetime.timezone.utc), 'commenter': 'BenBE', 'type': 'User'}, {'comment_id': 678731710, 'comment_body': 'Like Settings, we want these to hang around until the last pssible minute because the htoprc writing code may be called from segv handler and it needs to be able to map e.g. column identifiers to column names.', 'comment_created': datetime.datetime(2021, 7, 29, 0, 8, 38, tzinfo=datetime.timezone.utc), 'commenter': 'natoscott', 'type': 'User'}, {'comment_id': 678919252, 'comment_body': '@BenBE Done.', 'comment_created': datetime.datetime(2021, 7, 29, 8, 2, 14, tzinfo=datetime.timezone.utc), 'commenter': 'smalinux', 'type': 'User'}, {'comment_id': 678919786, 'comment_body': ""The SIGSEGV handler should cope with any state of the system, in particular because it can be called in any situation, especially if the system is partly broken. Not properly unwinding here invites UAF bugs and other hardly reproducible states. I can live with some columns not being resolved in the SIGSEGV handler upon shutdown more than getting my system pwn'd by a UAF bug."", 'comment_created': datetime.datetime(2021, 7, 29, 8, 3, 3, tzinfo=datetime.timezone.utc), 'commenter': 'BenBE', 'type': 'User'}, {'comment_id': 679532484, 'comment_body': ""@smalinux @BenBE I'll update this shortly, thanks"", 'comment_created': datetime.datetime(2021, 7, 29, 22, 45, 40, tzinfo=datetime.timezone.utc), 'commenter': 'natoscott', 'type': 'User'}, {'comment_id': 679532980, 'comment_body': 'This behaviour is mirroring the way Settings_new() works over in Settings.c ... I agree its a bit odd though.  Will tweak it.', 'comment_created': datetime.datetime(2021, 7, 29, 22, 47, 11, tzinfo=datetime.timezone.utc), 'commenter': 'natoscott', 'type': 'User'}, {'comment_id': 684597060, 'comment_body': '```suggestion\r\n   for (unsigned int i = pcp->columns.offset; i < pcp->columns.offset + pcp->columns.count; i++)\r\n```', 'comment_created': datetime.datetime(2021, 8, 7, 7, 14, 50, tzinfo=datetime.timezone.utc), 'commenter': 'BenBE', 'type': 'User'}, {'comment_id': 684597546, 'comment_body': '```suggestion\r\ntypedef struct PCPDynamicColumn_ {\r\n```', 'comment_created': datetime.datetime(2021, 8, 7, 7, 20, 23, tzinfo=datetime.timezone.utc), 'commenter': 'BenBE', 'type': 'User'}, {'comment_id': 684597575, 'comment_body': '```suggestion\r\ntypedef struct PCPDynamicColumns_ {\r\n```', 'comment_created': datetime.datetime(2021, 8, 7, 7, 20, 36, tzinfo=datetime.timezone.utc), 'commenter': 'BenBE', 'type': 'User'}, {'comment_id': 684597675, 'comment_body': '```suggestion\r\ntypedef struct PCPDynamicMetric_ {\r\n```\r\n\r\nAlso fix `PCPDynamicMeter` and `PCPDynamicMeters`.', 'comment_created': datetime.datetime(2021, 8, 7, 7, 21, 29, tzinfo=datetime.timezone.utc), 'commenter': 'BenBE', 'type': 'User'}, {'comment_id': 684664813, 'comment_body': ""Shouldn't this also `free(atom2.cp)`?"", 'comment_created': datetime.datetime(2021, 8, 7, 18, 40, 45, tzinfo=datetime.timezone.utc), 'commenter': 'BenBE', 'type': 'User'}, {'comment_id': 684667808, 'comment_body': 'please take a look @natoscott ', 'comment_created': datetime.datetime(2021, 8, 7, 19, 14, 10, tzinfo=datetime.timezone.utc), 'commenter': 'smalinux', 'type': 'User'}, {'comment_id': 687461020, 'comment_body': '```suggestion\r\n   size_t totalMetrics; /* total number of all metrics */\r\n```', 'comment_created': datetime.datetime(2021, 8, 12, 7, 32, 26, tzinfo=datetime.timezone.utc), 'commenter': 'BenBE', 'type': 'User'}, {'comment_id': 688093556, 'comment_body': '```suggestion\r\n   return !DynamicMeter_search(meters->table, key, NULL);\r\n```\r\n\r\nRemove the `return false;` accordingly.', 'comment_created': datetime.datetime(2021, 8, 12, 21, 21, 54, tzinfo=datetime.timezone.utc), 'commenter': 'BenBE', 'type': 'User'}, {'comment_id': 688094539, 'comment_body': 'Indentation of line comment …', 'comment_created': datetime.datetime(2021, 8, 12, 21, 23, 23, tzinfo=datetime.timezone.utc), 'commenter': 'BenBE', 'type': 'User'}, {'comment_id': 688095476, 'comment_body': 'Why change this grouping of statements? Previously this was aligned with the loop that initializes this (IMHO better) vs. as prelude to the `PCPDynamicMeters_init` call (IMHO less optimal).', 'comment_created': datetime.datetime(2021, 8, 12, 21, 25, 12, tzinfo=datetime.timezone.utc), 'commenter': 'BenBE', 'type': 'User'}, {'comment_id': 688095967, 'comment_body': 'IMHO no real need to update the alignment of that line comment …', 'comment_created': datetime.datetime(2021, 8, 12, 21, 26, 9, tzinfo=datetime.timezone.utc), 'commenter': 'BenBE', 'type': 'User'}, {'comment_id': 688096848, 'comment_body': 'Requires `#include <stddef.h>` …', 'comment_created': datetime.datetime(2021, 8, 12, 21, 27, 43, tzinfo=datetime.timezone.utc), 'commenter': 'BenBE', 'type': 'User'}, {'comment_id': 688147611, 'comment_body': 'reverted.', 'comment_created': datetime.datetime(2021, 8, 12, 23, 26, 48, tzinfo=datetime.timezone.utc), 'commenter': 'smalinux', 'type': 'User'}]","[{'commit_sha': '6f2021f3d95e02fc54e59fdeeb006e34c209b9c3', 'committer_username': 'smalinux', 'committer_name': 'Sohaib Mohamed', 'committer_email': None, 'commit_date': datetime.datetime(2014, 7, 17, 23, 59, 52, tzinfo=datetime.timezone.utc)}]",Sohaib Mohamed,8196176,,User,,124,,57,159
927338524,PCP: add File Descriptor Meter,"Related: #990

Signed-off-by: Sohaib Mohamed <sohaib.amhmd@gmail.com>",False,992,https://api.github.com/repos/htop-dev/htop/pulls/992,https://github.com/htop-dev/htop/pull/992,closed,154,0,10,2,9,5,0,0,[],2022-05-04 08:00:43+00:00,2023-03-24 23:40:45+00:00,28050002.0,"324 days, 15:40:02","[{'comment_id': 865029604, 'comment_body': ""Shouldn't they be read from the same field in `value`? They got the same `PM_TYPE_32` as their type after all …"", 'comment_created': datetime.datetime(2022, 5, 4, 16, 20, 55, tzinfo=datetime.timezone.utc), 'commenter': 'BenBE', 'type': 'User'}, {'comment_id': 865048568, 'comment_body': 'I am not yet familiar with PCP platform, but would you please comment on where this magic number is from?', 'comment_created': datetime.datetime(2022, 5, 4, 16, 42, 6, tzinfo=datetime.timezone.utc), 'commenter': 'Explorer09', 'type': 'User'}, {'comment_id': 865051968, 'comment_body': 'I got it from the Linux Platform! but I think this is wrong! maybe I should use `NAN` also here.', 'comment_created': datetime.datetime(2022, 5, 4, 16, 46, 1, tzinfo=datetime.timezone.utc), 'commenter': 'smalinux', 'type': 'User'}, {'comment_id': 865066951, 'comment_body': '`max` should not be `NAN`. See `FileDescriptorMeter.c` re `FileDescriptorMeter_updateValues`.', 'comment_created': datetime.datetime(2022, 5, 4, 16, 58, 29, tzinfo=datetime.timezone.utc), 'commenter': 'BenBE', 'type': 'User'}, {'comment_id': 868791638, 'comment_body': 'Need to initialize max here... may as well use what @BenBE used for Linux.\r\n\r\n`*max = 65536;`', 'comment_created': datetime.datetime(2022, 5, 10, 4, 1, 8, tzinfo=datetime.timezone.utc), 'commenter': 'natoscott', 'type': 'User'}]","[{'commit_sha': '4ac31495c209ec15654b5c5e06e2975dd75436f9', 'committer_username': 'BenBE', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2009, 8, 2, 21, 52, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4d481e366e8b94e7e98174ba0b9c4aa3cc4bfc21', 'committer_username': 'smalinux', 'committer_name': 'Sohaib Mohamed', 'committer_email': None, 'commit_date': datetime.datetime(2014, 7, 17, 23, 59, 52, tzinfo=datetime.timezone.utc)}]",Sohaib Mohamed,8196176,,User,,124,,57,159
885088138,pmdabpf: Add CO-RE execsnoop tool,,True,1565,https://api.github.com/repos/performancecopilot/pcp/pulls/1565,https://github.com/performancecopilot/pcp/pull/1565,closed,727,331100,10,5,1,54,0,0,[],2022-03-21 17:05:57+00:00,2022-05-13 19:52:43+00:00,4589206.0,"53 days, 2:46:46","[{'comment_id': 831397310, 'comment_body': 'Instances count have to be more dynamic and Read its value from bpf.conf (env.process_count)', 'comment_created': datetime.datetime(2022, 3, 21, 17, 59, 27, tzinfo=datetime.timezone.utc), 'commenter': 'smalinux', 'type': 'User'}, {'comment_id': 831400175, 'comment_body': 'Is there a better way? I think so.', 'comment_created': datetime.datetime(2022, 3, 21, 18, 2, 46, tzinfo=datetime.timezone.utc), 'commenter': 'smalinux', 'type': 'User'}, {'comment_id': 831402607, 'comment_body': '*handle_args', 'comment_created': datetime.datetime(2022, 3, 21, 18, 5, 46, tzinfo=datetime.timezone.utc), 'commenter': 'smalinux', 'type': 'User'}, {'comment_id': 831404537, 'comment_body': 'I do not know when to use this function!', 'comment_created': datetime.datetime(2022, 3, 21, 18, 8, 14, tzinfo=datetime.timezone.utc), 'commenter': 'smalinux', 'type': 'User'}, {'comment_id': 831407709, 'comment_body': '`meterics[1]`: Use enum instead of hardcoded numbers.', 'comment_created': datetime.datetime(2022, 3, 21, 18, 12, tzinfo=datetime.timezone.utc), 'commenter': 'smalinux', 'type': 'User'}, {'comment_id': 839908345, 'comment_body': ""nitpick: let's include the underscore in the rule, i.e. `%_helpers.o: %_helpers.c`"", 'comment_created': datetime.datetime(2022, 3, 31, 18, 31, 19, tzinfo=datetime.timezone.utc), 'commenter': 'andreasgerstmayr', 'type': 'User'}, {'comment_id': 839910898, 'comment_body': '`strcat` after `strdup` is a problem: `strdup` allocates exactly `strlen (s) + 1` bytes, so adding three more characters to this memory will result in a buffer overflow.\r\nSee the `strdup` implementation: https://github.com/bminor/glibc/blob/master/string/strdup.c#L41', 'comment_created': datetime.datetime(2022, 3, 31, 18, 34, 36, tzinfo=datetime.timezone.utc), 'commenter': 'andreasgerstmayr', 'type': 'User'}, {'comment_id': 839914643, 'comment_body': ""@natoscott: Do we need any additional information in the header for files copied 1:1?\r\n\r\nI'd add the source and the project name, for example: `// Copied from the iovisor/bcc project at https://github.com/iovisor/bcc/blob/5f2a64ec101b2916558bb934c436d4a6d4ed157c/libbpf-tools/errno_helpers.c` or something like that."", 'comment_created': datetime.datetime(2022, 3, 31, 18, 39, 48, tzinfo=datetime.timezone.utc), 'commenter': 'andreasgerstmayr', 'type': 'User'}, {'comment_id': 839917961, 'comment_body': 'Process ID of **the** parent process', 'comment_created': datetime.datetime(2022, 3, 31, 18, 44, 15, tzinfo=datetime.timezone.utc), 'commenter': 'andreasgerstmayr', 'type': 'User'}, {'comment_id': 839918434, 'comment_body': ""I'd remove `the`, but not 100% sure."", 'comment_created': datetime.datetime(2022, 3, 31, 18, 44, 55, tzinfo=datetime.timezone.utc), 'commenter': 'andreasgerstmayr', 'type': 'User'}, {'comment_id': 839918616, 'comment_body': 'same note as above', 'comment_created': datetime.datetime(2022, 3, 31, 18, 45, 7, tzinfo=datetime.timezone.utc), 'commenter': 'andreasgerstmayr', 'type': 'User'}, {'comment_id': 839923781, 'comment_body': 'the `quote` parameter seems unused', 'comment_created': datetime.datetime(2022, 3, 31, 18, 52, 3, tzinfo=datetime.timezone.utc), 'commenter': 'andreasgerstmayr', 'type': 'User'}, {'comment_id': 839928636, 'comment_body': 'If there was an error resizing the memory block, the function should exit with an error code. The code after that line will fail inevitably in weird ways otherwise.', 'comment_created': datetime.datetime(2022, 3, 31, 18, 58, 37, tzinfo=datetime.timezone.utc), 'commenter': 'andreasgerstmayr', 'type': 'User'}, {'comment_id': 839942704, 'comment_body': 'This line allocates 100 bytes, but in the next line the pointer to these 100 bytes gets overridden.\r\nThese 100 bytes in memory will be lost forever, because there is no pointer to this memory block anymore (resulting in a memory leak). Afaics this line should just be deleted, in the next line the `string` variable is assigned to it, which contains memory allocated by the `asprintf` function.', 'comment_created': datetime.datetime(2022, 3, 31, 19, 18, 10, tzinfo=datetime.timezone.utc), 'commenter': 'andreasgerstmayr', 'type': 'User'}, {'comment_id': 839953991, 'comment_body': ""The refresh function is used to fetch the metric values in bulk, and is called once per cluster. It should cache the values, so that the fetch method can return them quickly. `module.h` has a small explanation.\r\n\r\nThe execsnoop PMDA operates on external events (`perf_buffer__poll`) and afaics doesn't need that callback."", 'comment_created': datetime.datetime(2022, 3, 31, 19, 34, 4, tzinfo=datetime.timezone.utc), 'commenter': 'andreasgerstmayr', 'type': 'User'}, {'comment_id': 839973221, 'comment_body': ""This function blocks for `PERF_POLL_TIMEOUT_MS` and then returns the number of perf events of the queue it processed. It can return 0 if no new events were found. In our case, a new event is the execution of a new binary (`execve` syscall).\r\n\r\nThere is a perf event queue and we have a fixed maximum number of instances in PCP (i.e. we don't want one instance for every single `execve` syscall, that could accumulate to tens of thousands over time). In the bcc PMDA we solved this by having a `cache` queue with a maximum size of `process_count`, which holds the most recent perf events (first in first out), and a background thread which polls the perf event queue and adds new events to the `cache` queue. Then, the PMDA returns items from this queue when asked by the `fetch` callback.\r\n\r\n@natoscott, @jasonk000 what approach do you recommend for this PMDA?\r\nI'd suggest to poll for new perf events with a short timeout (I'd set it to less than 100ms, imho 100ms is already too long to block in a callback) in the `refresh` function, and store the events in a C array of the size `process_count`, where each value of this array is one event, and `execsnoop_fetch_to_atom` returns values from `cache_array[inst][item]`. When there are more than `process_count` events processed, it should start overwriting the oldest instance (event) of the `cache_array`.\r\n\r\n@smalinux: I think this tool is one of the most difficult libbpf tools to port over to PCP. Quite a challenge for the first module! :100: "", 'comment_created': datetime.datetime(2022, 3, 31, 20, 1, 40, tzinfo=datetime.timezone.utc), 'commenter': 'andreasgerstmayr', 'type': 'User'}, {'comment_id': 840125207, 'comment_body': '> // Copied from the iovisor/bcc project at https://github.com/iovisor/bcc/blob/5f2a64ec101b2916558bb934c436d4a6d4ed157c/libbpf-tools/errno_helpers.c\r\n\r\nI think it will be useful to add this for the commit message also...', 'comment_created': datetime.datetime(2022, 4, 1, 0, 24, 36, tzinfo=datetime.timezone.utc), 'commenter': 'smalinux', 'type': 'User'}, {'comment_id': 840127733, 'comment_body': '@andreasgerstmayr Yes, I believe that once I have execsnoop, porting many other tools would be a piece of cake! :)', 'comment_created': datetime.datetime(2022, 4, 1, 0, 32, 46, tzinfo=datetime.timezone.utc), 'commenter': 'smalinux', 'type': 'User'}, {'comment_id': 841313086, 'comment_body': 'Updated.', 'comment_created': datetime.datetime(2022, 4, 4, 1, 29, 44, tzinfo=datetime.timezone.utc), 'commenter': 'smalinux', 'type': 'User'}, {'comment_id': 841313120, 'comment_body': 'Updated.\r\nI have used exit(1); see: https://github.com/performancecopilot/pcp/blob/e5d6db0c0b6a925a01b43f2de3adef22c0a8528c/src/pmdas/linux_zfs/zfs_pools.c#-L66-L67', 'comment_created': datetime.datetime(2022, 4, 4, 1, 29, 56, tzinfo=datetime.timezone.utc), 'commenter': 'smalinux', 'type': 'User'}, {'comment_id': 844780157, 'comment_body': '@andreasgerstmayr Done. Thanks.', 'comment_created': datetime.datetime(2022, 4, 7, 6, 59, 56, tzinfo=datetime.timezone.utc), 'commenter': 'smalinux', 'type': 'User'}, {'comment_id': 848615504, 'comment_body': 'Personally I would prefer directly vendored files to be moved into a separate directory. There is a pattern for this in `/vendor/*`, that maybe we could use.\r\n\r\nI assume these are completely unmodified from upstream?', 'comment_created': datetime.datetime(2022, 4, 12, 16, 5, 21, tzinfo=datetime.timezone.utc), 'commenter': 'jasonk000', 'type': 'User'}, {'comment_id': 848620349, 'comment_body': 'do we require a branch in case `asprintf` fails?', 'comment_created': datetime.datetime(2022, 4, 12, 16, 10, 27, tzinfo=datetime.timezone.utc), 'commenter': 'jasonk000', 'type': 'User'}, {'comment_id': 848626865, 'comment_body': ""I'm a little confused by the flow here (but just waking up to C again). It seems to me that:\r\n- for `i == 0` -> allocate `sizeof(pmdaInstid)`\r\n- for `i == 1` -> reallocate to `2 * sizeof(pmdaInstid)`\r\n- for `i == 2` -> reallocate to `3 * sizeof(pmadInstid)`\r\n\r\nIf so, is it sufficient to allocate in a single pass on entry to fn, before entering the for loop?"", 'comment_created': datetime.datetime(2022, 4, 12, 16, 17, 6, tzinfo=datetime.timezone.utc), 'commenter': 'jasonk000', 'type': 'User'}, {'comment_id': 848634139, 'comment_body': 'I feel this should not be an error but at most warning (?), or, perhaps we could increment a counter of missed events by CPU and made available as a metric? If the system is busy enough to be dropping events, we should try to be gentle :).', 'comment_created': datetime.datetime(2022, 4, 12, 16, 24, 48, tzinfo=datetime.timezone.utc), 'commenter': 'jasonk000', 'type': 'User'}, {'comment_id': 848649822, 'comment_body': ""I'm not clear on the expected interaction between `TOTAL_MAX_ARGS` in the for loop, with `max_args`, should this be `&args[min(max_args, TOTAL_MAX_ARGS)]`?"", 'comment_created': datetime.datetime(2022, 4, 12, 16, 43, tzinfo=datetime.timezone.utc), 'commenter': 'jasonk000', 'type': 'User'}, {'comment_id': 848655143, 'comment_body': 'I think some dead branching here.', 'comment_created': datetime.datetime(2022, 4, 12, 16, 49, 9, tzinfo=datetime.timezone.utc), 'commenter': 'jasonk000', 'type': 'User'}, {'comment_id': 848655858, 'comment_body': 'If we return early here, the `allocElm()` will have leaked since it is never `push()ed` (same for line below).', 'comment_created': datetime.datetime(2022, 4, 12, 16, 49, 58, tzinfo=datetime.timezone.utc), 'commenter': 'jasonk000', 'type': 'User'}, {'comment_id': 848656305, 'comment_body': 'Should these lines be swapped?\r\n', 'comment_created': datetime.datetime(2022, 4, 12, 16, 50, 28, tzinfo=datetime.timezone.utc), 'commenter': 'jasonk000', 'type': 'User'}, {'comment_id': 848661012, 'comment_body': '@natoscott could you validate this approach please? It seems that in `_refresh` we are loading the tail, and then after each `_fetch_to_atom` we reverse iterate the queue. I guess this would be a problem if this iteration happens out-of-order. Is this safe or do we need a different approach here?', 'comment_created': datetime.datetime(2022, 4, 12, 16, 55, 45, tzinfo=datetime.timezone.utc), 'commenter': 'jasonk000', 'type': 'User'}, {'comment_id': 848662060, 'comment_body': ""In theory it's not a problem, but I'd personally feel better if these were size-constrained copies."", 'comment_created': datetime.datetime(2022, 4, 12, 16, 56, 55, tzinfo=datetime.timezone.utc), 'commenter': 'jasonk000', 'type': 'User'}, {'comment_id': 855959166, 'comment_body': 'I think this will never happen because I have a fixed size buffer with max = `env.process_count` elements (this is max number of events I need) and always save the count of elements of this buffer into a global variable `queuelength` (this is the actual number of events.)\r\nif `queuelength` > `env.process_count`, the oldest element will drop & free from the list.\r\nand I start overwriting this buffer all the time with the latest events, \r\nThis seems like a circular buffer,\r\nand I reset the head whole point to the first element of that buffer every `_refresh`.\r\nand I loop over this buffer while through `_fetch_to_atom`\r\n\r\nAlso, I did a very simple a draft before starting this If you would like to check the logic behind that:\r\nhttps://github.com/smalinux/tailq-example\r\n`$ clone & make & ./tailq_ex`', 'comment_created': datetime.datetime(2022, 4, 22, 9, 10, 8, tzinfo=datetime.timezone.utc), 'commenter': 'smalinux', 'type': 'User'}, {'comment_id': 855959340, 'comment_body': 'updated.', 'comment_created': datetime.datetime(2022, 4, 22, 9, 10, 21, tzinfo=datetime.timezone.utc), 'commenter': 'smalinux', 'type': 'User'}, {'comment_id': 855959668, 'comment_body': 'updated. Thanks. ', 'comment_created': datetime.datetime(2022, 4, 22, 9, 10, 45, tzinfo=datetime.timezone.utc), 'commenter': 'smalinux', 'type': 'User'}, {'comment_id': 855959956, 'comment_body': 'Updated.', 'comment_created': datetime.datetime(2022, 4, 22, 9, 11, 5, tzinfo=datetime.timezone.utc), 'commenter': 'smalinux', 'type': 'User'}, {'comment_id': 855960287, 'comment_body': 'Updated.', 'comment_created': datetime.datetime(2022, 4, 22, 9, 11, 27, tzinfo=datetime.timezone.utc), 'commenter': 'smalinux', 'type': 'User'}, {'comment_id': 855960464, 'comment_body': 'Nice Note, Just added one commit for this, I added `bpf.execsnoop.lost`  in a separate InDom has one instance represent the count of lost events.\r\nExpected output: ( because I don\'t know how I could make my system busy enough to drop some events!)\r\n```\r\n$ pminfo -f bpf.execsnoop.lost\r\n\r\nbpf.execsnoop.lost\r\n    inst [0 or ""0""] value 0\r\n```\r\nI know. It\'s not that much perfect, I think It will be better if I did something like that:\r\nmultiple instance each one represents one CPU (hence external instance name)\r\n```\r\n$ pminfo -f bpf.execsnoop.lost\r\n\r\nbpf.execsnoop.lost\r\n    inst [0 or ""CPU 0""] value 10\r\n    inst [0 or ""CPU 10""] value 4\r\n    inst [0 or ""CPU 100""] value 20\r\n```\r\nbut since I didn\'t test that even with iovisor/execsnoop, I couldn\'t handle that,\r\nIt seems not a big deal but It will need surgery ^^""\r\nMaybe I could handle this later after merging this PR...\r\n\r\nThanks : )', 'comment_created': datetime.datetime(2022, 4, 22, 9, 11, 39, tzinfo=datetime.timezone.utc), 'commenter': 'smalinux', 'type': 'User'}, {'comment_id': 855960746, 'comment_body': ""Updated. It's become so simple I don't know why I did it like that. Thanks!"", 'comment_created': datetime.datetime(2022, 4, 22, 9, 11, 55, tzinfo=datetime.timezone.utc), 'commenter': 'smalinux', 'type': 'User'}, {'comment_id': 855960972, 'comment_body': 'I got a warning from gcc:\r\n```\r\nmodule.h:152:9: warning: ignoring return value of ‘asprintf’ declared with attribute ‘warn_unused_result’ [-Wunused-result]\r\n  152 |         asprintf(&string, ""%d"", i);                                                               \r\n      |         ^~~~~~~~~~~~~~~~~~~~~~~~~~ \r\n```\r\nAlso, I did that inspired by this line [[Link](https://github.com/performancecopilot/pcp/blob/47093257c1ec139b4c36030cad6ba7a8deef1aca/src/pmdas/bpf/modules/module.h#L137)] ...', 'comment_created': datetime.datetime(2022, 4, 22, 9, 12, 12, tzinfo=datetime.timezone.utc), 'commenter': 'smalinux', 'type': 'User'}, {'comment_id': 855961126, 'comment_body': '| I assume these are completely unmodified from upstream?\r\nYes, If I go in this direction I think I have to clone the whole `iovisor/bcc` repo under `vendor/` like the reset other repositories under this dir.\r\nAre you okay with that? @jasonk000 @natoscott ', 'comment_created': datetime.datetime(2022, 4, 22, 9, 12, 23, tzinfo=datetime.timezone.utc), 'commenter': 'smalinux', 'type': 'User'}, {'comment_id': 856413066, 'comment_body': 'i still see `strcpy` here? maybe github is confused', 'comment_created': datetime.datetime(2022, 4, 22, 16, 56, 14, tzinfo=datetime.timezone.utc), 'commenter': 'jasonk000', 'type': 'User'}, {'comment_id': 856417310, 'comment_body': ""I was more concerned that this assumes `fetch_to_atom` is called in a specific order. I'm not sure if that is guaranteed to hold in all scenarios as part of the API contract. As per the contract `inst` argument should be used to look up the correct instance in the tailq for each fetch:\r\n\r\n```\r\nFor each instance listed in the profile (see\r\n[pmdaprofile](https://linux.die.net/man/3/pmdaprofile)(3)) of each metric listed in pmidlist,\r\nthe pmdaFetchCallBack method is called to fill the pmAtomValue structure identified by\r\navp with a value for a specific metric-instance pair identified by the metric descriptor\r\nmdesc and the instance inst. This value is then copied into the pmResult structure.\r\n```\r\nhttps://linux.die.net/man/3/pmdasetfetchcallback\r\n"", 'comment_created': datetime.datetime(2022, 4, 22, 17, 2, 13, tzinfo=datetime.timezone.utc), 'commenter': 'jasonk000', 'type': 'User'}, {'comment_id': 856418848, 'comment_body': 'oh sorry, updated now', 'comment_created': datetime.datetime(2022, 4, 22, 17, 4, 30, tzinfo=datetime.timezone.utc), 'commenter': 'smalinux', 'type': 'User'}, {'comment_id': 856419599, 'comment_body': 'I would defer to @natoscott or @andreasgerstmayr ', 'comment_created': datetime.datetime(2022, 4, 22, 17, 5, 41, tzinfo=datetime.timezone.utc), 'commenter': 'jasonk000', 'type': 'User'}, {'comment_id': 856685656, 'comment_body': ""Yeah, hmm, that's alot of relatively fast-moving code to be vendoring - I'm hesitant to do so.  Could we vendor just the bcc content below bcc/libbpf-tools or do we need more than that?  (is a subdir even possible with git-subtree @andreasgerstmayr , I wonder?)  That'd be more in keeping with the kind of thing we tend to vendor into PCP (small libraries for the most part)."", 'comment_created': datetime.datetime(2022, 4, 23, 0, 26, 21, tzinfo=datetime.timezone.utc), 'commenter': 'natoscott', 'type': 'User'}, {'comment_id': 856687086, 'comment_body': ""From memory I don't think there's a guarantee of any specific inst ordering for the fetch routine.  It'd be worth checking the fetch code below src/libpcp_pmda/src though.\r\n\r\nAnother option may be to provide a custom fetch routine instead of pmdaFetch if that helps, then you could take control over how the instances are traversed - an example of a PMDA doing this is src/pmdas/sample/src/sample.c\r\n"", 'comment_created': datetime.datetime(2022, 4, 23, 0, 35, 25, tzinfo=datetime.timezone.utc), 'commenter': 'natoscott', 'type': 'User'}, {'comment_id': 856687330, 'comment_body': 'Sorry, missed this question earlier - @andreasgerstmayr as mentioned below, I wonder if we can vendor the libbpf-tools directory?', 'comment_created': datetime.datetime(2022, 4, 23, 0, 37, 4, tzinfo=datetime.timezone.utc), 'commenter': 'natoscott', 'type': 'User'}, {'comment_id': 858801860, 'comment_body': ""> I'm hesitant to do so. Could we vendor just the bcc content below bcc/libbpf-tools or do we need more than that? (is a subdir even possible with git-subtree @andreasgerstmayr , I wonder?)\r\n\r\nYep, vendoring subdirectories of repositories using git subtree is actually possible.\r\nI found a few complicated instructions, and one comprehensible guide: https://jrsmith3.github.io/merging-a-subdirectory-from-another-repo-via-git-subtree.html\r\nBasically it uses `git subtree split` to split off one directory of the remote repository (bcc in our case) into a new branch, and then `git subtree add` to include this new branch into `vendor/...` of the PCP repo.\r\n\r\nI've added instructions to our `CONTRIBUTING.md`: https://github.com/performancecopilot/pcp/pull/1581 (it's a bit more complicated than vendoring the entire repository).\r\n\r\nShall I go ahead and vendor the `libbpf-tools` directory of the iovisor/bcc repository? We only need the `*_helpers.*` files of that directory, however it's not possible to just vendor specific files - either the entire repository or a subdirectory thereof."", 'comment_created': datetime.datetime(2022, 4, 26, 14, 41, 53, tzinfo=datetime.timezone.utc), 'commenter': 'andreasgerstmayr', 'type': 'User'}, {'comment_id': 858810294, 'comment_body': '| We only need the *_helpers.*\r\n\r\n`*_helpers.*` and `*.bpf.[ch]`', 'comment_created': datetime.datetime(2022, 4, 26, 14, 49, tzinfo=datetime.timezone.utc), 'commenter': 'smalinux', 'type': 'User'}, {'comment_id': 858828752, 'comment_body': 'Yep, we can. I went ahead and created #1582 for it, and also manually added the `LICENSE.txt` of the root directory of iovisor/bcc.', 'comment_created': datetime.datetime(2022, 4, 26, 15, 3, 23, tzinfo=datetime.timezone.utc), 'commenter': 'andreasgerstmayr', 'type': 'User'}, {'comment_id': 858837938, 'comment_body': ""> and `*.bpf.[ch]`\r\n\r\nThat's a good idea to use the bpf code directory :+1: .\r\nWhen we update the vendored files, we have to keep in mind to also look for any changes required to the corresponding `<module>.c` files, as they're interweaved. Thanks to using a static language, hopefully most errors will be picked up by the compiler (and the rest by unit tests hopefully! ;))"", 'comment_created': datetime.datetime(2022, 4, 26, 15, 9, 54, tzinfo=datetime.timezone.utc), 'commenter': 'andreasgerstmayr', 'type': 'User'}, {'comment_id': 858840223, 'comment_body': ""fyi, I've created #1582 for the vendoring of the `libbpf-tools` subdirectory"", 'comment_created': datetime.datetime(2022, 4, 26, 15, 10, 52, tzinfo=datetime.timezone.utc), 'commenter': 'andreasgerstmayr', 'type': 'User'}, {'comment_id': 858851476, 'comment_body': 'ah, I see, thanks a lot, I suggest adding something like this to GNUMakefile: \r\n`$ cp vendor/bpf-tools/*.bpf.ch  pmda/bpf/modules/`', 'comment_created': datetime.datetime(2022, 4, 26, 15, 19, 43, tzinfo=datetime.timezone.utc), 'commenter': 'smalinux', 'type': 'User'}, {'comment_id': 858873243, 'comment_body': 'I suggest using symbolic links, for example: https://github.com/performancecopilot/pcp/blob/07dc727f9eb5749669dd2ea213b7d360d2554b63/src/libpcp_web/src/GNUmakefile#L121-L122', 'comment_created': datetime.datetime(2022, 4, 26, 15, 39, 16, tzinfo=datetime.timezone.utc), 'commenter': 'andreasgerstmayr', 'type': 'User'}]","[{'commit_sha': 'd987c2776a085be8c738e441c6e31e5a40bf05ff', 'committer_username': 'smalinux', 'committer_name': 'Sohaib Mohamed', 'committer_email': None, 'commit_date': datetime.datetime(2014, 7, 17, 23, 59, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '51a71a83250a8c1b76ba8060ac3177bc62bebbff', 'committer_username': 'smalinux', 'committer_name': 'Sohaib Mohamed', 'committer_email': None, 'commit_date': datetime.datetime(2014, 7, 17, 23, 59, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cfd0ce07015a1aa567635afa0f33220af18d7ea3', 'committer_username': 'smalinux', 'committer_name': 'Sohaib Mohamed', 'committer_email': None, 'commit_date': datetime.datetime(2014, 7, 17, 23, 59, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5c3e7ea4d45a3bb80349497b6872a01ca3155332', 'committer_username': 'smalinux', 'committer_name': 'Sohaib Mohamed', 'committer_email': None, 'commit_date': datetime.datetime(2014, 7, 17, 23, 59, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4d66746eadd3005cdf9e2c04e2de49b0ea01fd72', 'committer_username': 'smalinux', 'committer_name': 'Sohaib Mohamed', 'committer_email': None, 'commit_date': datetime.datetime(2014, 7, 17, 23, 59, 52, tzinfo=datetime.timezone.utc)}]",Sohaib Mohamed,8196176,,User,,124,,57,159
949392271,qa for execsnoop and code style cleanups,,True,1604,https://api.github.com/repos/performancecopilot/pcp/pulls/1604,https://github.com/performancecopilot/pcp/pull/1604,closed,209,78,4,2,2,0,0,0,[],2022-05-27 14:54:26+00:00,2022-05-30 23:21:48+00:00,289642.0,"3 days, 8:27:22",[],"[{'commit_sha': '2d9476cb0df2248e547f347bbc45be22d1268965', 'committer_username': 'smalinux', 'committer_name': 'Sohaib Mohamed', 'committer_email': None, 'commit_date': datetime.datetime(2014, 7, 17, 23, 59, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ef9161584a9481599d271734b08c5afc8be41989', 'committer_username': 'smalinux', 'committer_name': 'Sohaib Mohamed', 'committer_email': None, 'commit_date': datetime.datetime(2014, 7, 17, 23, 59, 52, tzinfo=datetime.timezone.utc)}]",Sohaib Mohamed,8196176,,User,,124,,57,159
972710256,Introduce 10 of bpf tools to pmdabpf,,True,1612,https://api.github.com/repos/performancecopilot/pcp/pulls/1612,https://github.com/performancecopilot/pcp/pull/1612,closed,6385,88,62,14,0,102,0,1,[],2022-06-20 23:06:01+00:00,2022-08-11 10:05:52+00:00,4445991.0,"51 days, 10:59:51","[{'comment_id': 916649341, 'comment_body': 'Do all of the new tools actually require libbpf 0.7, or do some of them also work with an old version of libbpf (e.g. biolatency and runqlat work fine with libbpf 0.4)?\r\n\r\nFor example the latest [Ubuntu LTS 22.04 still has libbpf 0.5, CentOS Stream 9 has libbpf 0.6 etc](https://repology.org/project/libbpf/versions). - would be great if (some?) of the new tools also work there.', 'comment_created': datetime.datetime(2022, 7, 8, 9, 40, 21, tzinfo=datetime.timezone.utc), 'commenter': 'andreasgerstmayr', 'type': 'User'}, {'comment_id': 916652666, 'comment_body': 'nitpick: by using `\\` and the newlines, this variable looks like this:\r\n```\r\nbiolatency.so runqlat.so        bashreadline.so         biolatency.so         execsnoop.so         exitsnoop.so         fsslower.so         mountsnoop.so         oomkill.so         opensnoop.so         runqlat.so         statsnoop.so         tcpconnect.so         tcpconnlat.so         vfsstat.so\r\n```\r\n(i.e. with many spaces between) - would be better to drop the extra spaces by declaring it like\r\n```\r\npmdabpf_modules=""${pmdabpf_modules} bashreadline.so biolatency.so""\r\n```\r\netc. (or some other way to clean up the spaces)', 'comment_created': datetime.datetime(2022, 7, 8, 9, 44, 30, tzinfo=datetime.timezone.utc), 'commenter': 'andreasgerstmayr', 'type': 'User'}, {'comment_id': 916656896, 'comment_body': ""When I run `man 8 execsnoop`, I'm getting the manpage of the execsnoop bpftrace tool. While it should be similar to the bpf PMDA module, it's still a different codebase, and for example the execsnoop bpftrace tool could get an update meanwhile and our bpf PMDA module doesn't get updated, then the manpage doesn't match with our tool, and users will get confused.\r\nSo I'd remove the references to manpages of bpftrace tools."", 'comment_created': datetime.datetime(2022, 7, 8, 9, 49, 56, tzinfo=datetime.timezone.utc), 'commenter': 'andreasgerstmayr', 'type': 'User'}, {'comment_id': 916668891, 'comment_body': ""@natoscott @jasonk000 do we want to enable all tools by default, or disable by default and only enable a minimal set by default?\r\nI'm leaning towards enabling only a smaller set by default (not sure yet which ones)."", 'comment_created': datetime.datetime(2022, 7, 8, 10, 5, 11, tzinfo=datetime.timezone.utc), 'commenter': 'andreasgerstmayr', 'type': 'User'}, {'comment_id': 916712105, 'comment_body': ""Nice, I didn't know that it's possible to initialize arrays this way :+1: \r\n\r\nA quick Google search shows that it's a C99 feature, afaics we also need to update the `GNUmakefile` then, similar to the htop makefile: https://github.com/performancecopilot/pcp/blob/db147f97b0f2ec073fff6fc075be38777783a9d1/src/pcp/htop/GNUmakefile#L24"", 'comment_created': datetime.datetime(2022, 7, 8, 11, 5, 19, tzinfo=datetime.timezone.utc), 'commenter': 'andreasgerstmayr', 'type': 'User'}, {'comment_id': 916739262, 'comment_body': ""Does this condition ever evaluate to true?\r\nAt initialization `libreadline_path` is set to `NULL`, it doesn't get set anywhere else as far as I can see."", 'comment_created': datetime.datetime(2022, 7, 8, 11, 45, 20, tzinfo=datetime.timezone.utc), 'commenter': 'andreasgerstmayr', 'type': 'User'}, {'comment_id': 916751590, 'comment_body': '`static void push(struct tailq_entry *elm)` and `static bool get_item(unsigned int offset, struct tailq_entry** val)` are duplicated code for all 11 tools.\r\n\r\nAfaics the problem are the macros, and the fact that each queue head and queue entry is a different struct.\r\n@natoscott do you see an easy/elegant solution to factor out these functions? One option is to create another macro, which then uses the `TAILQ_` macros. But another macro is not exactly elegant :smiley: ', 'comment_created': datetime.datetime(2022, 7, 8, 12, 3, 46, tzinfo=datetime.timezone.utc), 'commenter': 'andreasgerstmayr', 'type': 'User'}, {'comment_id': 916762288, 'comment_body': 'Indoms are only required if a metric has multiple instances (i.e. multiple values, for example one metric value per hard drive). The lost metric has only a single value, therefore you can set indom = `PM_INDOM_NULL`.  See https://pcp.readthedocs.io/en/5.2.5/PG/WritingPMDA.html#example-2-5-trivial-pmda', 'comment_created': datetime.datetime(2022, 7, 8, 12, 19, 34, tzinfo=datetime.timezone.utc), 'commenter': 'andreasgerstmayr', 'type': 'User'}, {'comment_id': 916768479, 'comment_body': 'I really like your usage of designated initializers to declare the metric metadata :+1:\r\n:100: ', 'comment_created': datetime.datetime(2022, 7, 8, 12, 28, 4, tzinfo=datetime.timezone.utc), 'commenter': 'andreasgerstmayr', 'type': 'User'}, {'comment_id': 916782137, 'comment_body': 'Indoms are only required if a metric has multiple instances (i.e. multiple values, for example one metric value per hard drive). The lost metric has only a single value, therefore you can set indom = `PM_INDOM_NULL`.  See https://pcp.readthedocs.io/en/5.2.5/PG/WritingPMDA.html#example-2-5-trivial-pmda', 'comment_created': datetime.datetime(2022, 7, 8, 12, 46, 20, tzinfo=datetime.timezone.utc), 'commenter': 'andreasgerstmayr', 'type': 'User'}, {'comment_id': 916782315, 'comment_body': 'Indoms are only required if a metric has multiple instances (i.e. multiple values, for example one metric value per hard drive). The lost metric has only a single value, therefore you can set indom = `PM_INDOM_NULL`.  See https://pcp.readthedocs.io/en/5.2.5/PG/WritingPMDA.html#example-2-5-trivial-pmda', 'comment_created': datetime.datetime(2022, 7, 8, 12, 46, 35, tzinfo=datetime.timezone.utc), 'commenter': 'andreasgerstmayr', 'type': 'User'}, {'comment_id': 916784216, 'comment_body': 'Does this need to be a global variable? Afaics this global variable is only accessed in `handle_event`.', 'comment_created': datetime.datetime(2022, 7, 8, 12, 48, 58, tzinfo=datetime.timezone.utc), 'commenter': 'andreasgerstmayr', 'type': 'User'}, {'comment_id': 916784335, 'comment_body': 'Does this need to be a global variable? Afaics this global variable is only accessed in `handle_event`.', 'comment_created': datetime.datetime(2022, 7, 8, 12, 49, 9, tzinfo=datetime.timezone.utc), 'commenter': 'andreasgerstmayr', 'type': 'User'}, {'comment_id': 916792361, 'comment_body': 'Is there a QA test for this module?', 'comment_created': datetime.datetime(2022, 7, 8, 12, 59, 28, tzinfo=datetime.timezone.utc), 'commenter': 'andreasgerstmayr', 'type': 'User'}, {'comment_id': 916802535, 'comment_body': 'Indoms are only required if a metric has multiple instances (i.e. multiple values, for example one metric value per hard drive). The lost metric has only a single value, therefore you can set indom = `PM_INDOM_NULL`.  See https://pcp.readthedocs.io/en/5.2.5/PG/WritingPMDA.html#example-2-5-trivial-pmda', 'comment_created': datetime.datetime(2022, 7, 8, 13, 11, 59, tzinfo=datetime.timezone.utc), 'commenter': 'andreasgerstmayr', 'type': 'User'}, {'comment_id': 916802794, 'comment_body': 'Does this need to be a global variable? Afaics this global variable is only accessed in `handle_event`.', 'comment_created': datetime.datetime(2022, 7, 8, 13, 12, 19, tzinfo=datetime.timezone.utc), 'commenter': 'andreasgerstmayr', 'type': 'User'}, {'comment_id': 916808386, 'comment_body': ""I'd suggest to name the enum field for `fsslower.file_op` something like `FILE_OP`.\r\nWhat does `T` stand for?"", 'comment_created': datetime.datetime(2022, 7, 8, 13, 18, 54, tzinfo=datetime.timezone.utc), 'commenter': 'andreasgerstmayr', 'type': 'User'}, {'comment_id': 916816729, 'comment_body': 'This test will fail on any system not using ext4 on `$tmp`.\r\nI suggest we either skip this test (`_notrun`) on non-ext4 configurations or mount a ext4 filesystem explicitly: https://github.com/performancecopilot/pcp/blob/7adaaedd665d947d94b5e7acd045f7fbb53d127c/qa/1126#L39-L41', 'comment_created': datetime.datetime(2022, 7, 8, 13, 28, 16, tzinfo=datetime.timezone.utc), 'commenter': 'andreasgerstmayr', 'type': 'User'}, {'comment_id': 916818508, 'comment_body': '""select filesystem type to trace (btrfs, ext4, nfs, xfs)""', 'comment_created': datetime.datetime(2022, 7, 8, 13, 30, 18, tzinfo=datetime.timezone.utc), 'commenter': 'andreasgerstmayr', 'type': 'User'}, {'comment_id': 916818710, 'comment_body': '""trace filesystem operations slower than 10 ms""', 'comment_created': datetime.datetime(2022, 7, 8, 13, 30, 30, tzinfo=datetime.timezone.utc), 'commenter': 'andreasgerstmayr', 'type': 'User'}, {'comment_id': 916829140, 'comment_body': ""`file_op` is an array of single characters, `file_op[value->event.op]` is a single character (a single byte)\r\n`atom->cp` wants a string (a sequence of bytes with a terminating null byte, i.e. a byte with value zero at the end)\r\n\r\nNow when you pass a pointer to this single character to something which expects a null-terminated string, it will continue reading the next byte in memory until it reaches a null byte - however, in this case the next byte in memory is undefined (because it's a pointer to a single character instead of a null-terminated string), which is a problem.\r\n\r\nI suggest to declare `file_op` as a char* array, then the compiler will add the terminating null byte automatically."", 'comment_created': datetime.datetime(2022, 7, 8, 13, 41, 59, tzinfo=datetime.timezone.utc), 'commenter': 'andreasgerstmayr', 'type': 'User'}, {'comment_id': 916832661, 'comment_body': ""Using the full name (`read/write/open/fsync`) instead of `R/W/O/F` for the metric value would be even more user-friendly in my opinion, but I don't have a strong opinion on that - you can decide which output you prefer."", 'comment_created': datetime.datetime(2022, 7, 8, 13, 45, 50, tzinfo=datetime.timezone.utc), 'commenter': 'andreasgerstmayr', 'type': 'User'}, {'comment_id': 916851011, 'comment_body': ""The calculation should include exit_**time** and not exit_**code**.\r\nPCP includes support for different metric units and resolutions - let's use the raw resolution (nanoseconds, according to the bpf sources) and let the PCP client tools (pmval, pmrep, htop etc.) decide in which unit they want to display that metric value.\r\ntl;dr don't divide by `1e9`, let's use the raw resolution"", 'comment_created': datetime.datetime(2022, 7, 8, 14, 4, 55, tzinfo=datetime.timezone.utc), 'commenter': 'andreasgerstmayr', 'type': 'User'}, {'comment_id': 916862214, 'comment_body': 'PCP metric metadata includes the metric value units. In this case we can tell the PCP client tools the metric value is in nanoseconds (`PM_TIME_NSEC`).\r\nExample in the runqlat module: https://github.com/performancecopilot/pcp/blob/7adaaedd665d947d94b5e7acd045f7fbb53d127c/src/pmdas/bpf/modules/runqlat.c#L71\r\nDetailed docs: https://man7.org/linux/man-pages/man3/pmLookupDesc.3.html', 'comment_created': datetime.datetime(2022, 7, 8, 14, 17, 3, tzinfo=datetime.timezone.utc), 'commenter': 'andreasgerstmayr', 'type': 'User'}, {'comment_id': 916869365, 'comment_body': 'Please specify the metric unit as exact as possible - the PCP client tools use that information.\r\nExample (bytes): https://github.com/performancecopilot/pcp/blob/7adaaedd665d947d94b5e7acd045f7fbb53d127c/src/pmdas/bcc/modules/bioperpid.python#L40\r\nDocs: https://man7.org/linux/man-pages/man3/pmLookupDesc.3.html', 'comment_created': datetime.datetime(2022, 7, 8, 14, 24, 27, tzinfo=datetime.timezone.utc), 'commenter': 'andreasgerstmayr', 'type': 'User'}, {'comment_id': 916871115, 'comment_body': ""Let's use the raw value and not convert it to kilobytes. PCP client tools can convert it using various PCP library functions."", 'comment_created': datetime.datetime(2022, 7, 8, 14, 26, 17, tzinfo=datetime.timezone.utc), 'commenter': 'andreasgerstmayr', 'type': 'User'}, {'comment_id': 916871219, 'comment_body': 'Same as above.', 'comment_created': datetime.datetime(2022, 7, 8, 14, 26, 23, tzinfo=datetime.timezone.utc), 'commenter': 'andreasgerstmayr', 'type': 'User'}, {'comment_id': 917250292, 'comment_body': ""@andreasgerstmayr The problem with bashreadline is I can't invoke it via QA scripts, bashreadline sniff only bash command written by hands, not by scripts"", 'comment_created': datetime.datetime(2022, 7, 9, 10, 3, 18, tzinfo=datetime.timezone.utc), 'commenter': 'smalinux', 'type': 'User'}, {'comment_id': 917843553, 'comment_body': 'There is a handy tool called expect(1) to simulate interactive terminal sessions, which we can use here. It supports commands like this:\r\n```\r\nspawn bash\r\nsend ""echo this is a test from bash\\r""\r\nsend ""exit\\r""\r\nexpect eof\r\n```\r\nThis tells expect to start bash, send the echo command, send the exit command, and wait until bash is closed.\r\n\r\nYou can embed the above expect script in a PCP QA test like this:\r\n```\r\ncat <<EOF | expect\r\nspawn bash\r\nsend ""echo this is a test from bash\\r""\r\nsend ""exit\\r""\r\nexpect eof\r\nEOF\r\n```\r\n\r\nI tested it with the bashreadline bpf PMDA tool, and it works as expected - the bashreadline will have two instances, one for the echo command and one for the exit command.', 'comment_created': datetime.datetime(2022, 7, 11, 11, 52, 17, tzinfo=datetime.timezone.utc), 'commenter': 'andreasgerstmayr', 'type': 'User'}, {'comment_id': 917847222, 'comment_body': 'One more note, when using the expect tool add the following line somewhere at the beginning of the QA test:\r\n```\r\nwhich expect >/dev/null 2>&1 || _notrun ""expect binary not installed""\r\n```\r\nSo the test will be skipped if the expect program is not installed.', 'comment_created': datetime.datetime(2022, 7, 11, 11, 57, 12, tzinfo=datetime.timezone.utc), 'commenter': 'andreasgerstmayr', 'type': 'User'}, {'comment_id': 919677055, 'comment_body': '@andreasgerstmayr yep, makes sense to me to go for a default subset - particularly as the set is likely to grow over time.  Guess we want to consider those tools that are a/ most generally useful, b/ lowest overheads, and c/ least likely to break over time.', 'comment_created': datetime.datetime(2022, 7, 13, 6, 0, 11, tzinfo=datetime.timezone.utc), 'commenter': 'natoscott', 'type': 'User'}, {'comment_id': 924480160, 'comment_body': 'All these tools (except CO-RE vfsstat) use `perf_buffer__poll` and this function is part of libbpf 0.7\r\nTest:\r\n```\r\n$ git clone libbpf\r\n$ git checkout v0.6.0\r\n$ ack perf_buffer__poll\r\n```', 'comment_created': datetime.datetime(2022, 7, 19, 13, 8, 11, tzinfo=datetime.timezone.utc), 'commenter': 'smalinux', 'type': 'User'}, {'comment_id': 924546576, 'comment_body': ""Done. but I'm not sure if I did it the right way."", 'comment_created': datetime.datetime(2022, 7, 19, 14, 5, 9, tzinfo=datetime.timezone.utc), 'commenter': 'smalinux', 'type': 'User'}, {'comment_id': 924587758, 'comment_body': 'I added LCFLAGS at the beginning of modules/GNUMakefile, which breaks trace_helpers.c!\r\nso I want to enable std=c99 for all modules, expect *_helpers.c files...\r\n', 'comment_created': datetime.datetime(2022, 7, 19, 14, 39, 46, tzinfo=datetime.timezone.utc), 'commenter': 'smalinux', 'type': 'User'}, {'comment_id': 924592948, 'comment_body': '@natoscott @a3f ', 'comment_created': datetime.datetime(2022, 7, 19, 14, 44, 10, tzinfo=datetime.timezone.utc), 'commenter': 'smalinux', 'type': 'User'}, {'comment_id': 924610851, 'comment_body': 'Thanks to @a3f, I got this from his code review via email. :)', 'comment_created': datetime.datetime(2022, 7, 19, 14, 59, 3, tzinfo=datetime.timezone.utc), 'commenter': 'smalinux', 'type': 'User'}, {'comment_id': 924626624, 'comment_body': 'I tried that and this break the bpf.execsnoop.lost metric \r\n```\r\n$ git diff\r\ndiff --git a/src/pmdas/bpf/modules/execsnoop.c b/src/pmdas/bpf/modules/execsnoop.c\r\nindex 8b1b88034..e9239b6a5 100644\r\n--- a/src/pmdas/bpf/modules/execsnoop.c\r\n+++ b/src/pmdas/bpf/modules/execsnoop.c\r\n@@ -237,7 +237,7 @@ static void execsnoop_register(unsigned int cluster_id, pmdaMetric *metrics, pmd\r\n         .m_desc = {\r\n             .pmid  = PMDA_PMID(cluster_id, 6),\r\n             .type  = PM_TYPE_U32,\r\n-            .indom = indom_id_mapping[LOST_EVENTS],\r\n+            .indom = PM_INDOM_NULL,\r\n             .sem   = PM_SEM_INSTANT,\r\n             .units = PMDA_PMUNITS(0, 0, 0, 0, 0, 0),\r\n         }\r\n@@ -254,7 +254,7 @@ static void execsnoop_register(unsigned int cluster_id, pmdaMetric *metrics, pmd\r\n     /* LOST_EVENTS InDom */\r\n     indoms[1] = (struct pmdaIndom)\r\n     {\r\n-        indom_id_mapping[LOST_EVENTS],\r\n+        PM_INDOM_NULL,\r\n         1,\r\n         execsnoop_lost,\r\n     };\r\n\r\n```', 'comment_created': datetime.datetime(2022, 7, 19, 15, 10, 3, tzinfo=datetime.timezone.utc), 'commenter': 'smalinux', 'type': 'User'}, {'comment_id': 924688961, 'comment_body': ""Done. but I have a problem with installing expect(1) on my machine! 😏 so I couldn't test it for now."", 'comment_created': datetime.datetime(2022, 7, 19, 15, 58, 39, tzinfo=datetime.timezone.utc), 'commenter': 'smalinux', 'type': 'User'}, {'comment_id': 925039908, 'comment_body': ""Yes, subset definitely. Primarily security concerns (eg: 'bashreadline'). Secondly, there may be some performance penalty, however I think most of the tracepoints I've seen so far _should_ be minimal overhead _most_ of the time."", 'comment_created': datetime.datetime(2022, 7, 19, 23, 35, 16, tzinfo=datetime.timezone.utc), 'commenter': 'jasonk000', 'type': 'User'}, {'comment_id': 925040322, 'comment_body': 'I like this approach :+1: ', 'comment_created': datetime.datetime(2022, 7, 19, 23, 36, 27, tzinfo=datetime.timezone.utc), 'commenter': 'jasonk000', 'type': 'User'}, {'comment_id': 925041157, 'comment_body': 'Should we exercise this? eg: `touch /tmp/test-file && stat /tmp/test-file`, and then check the stat occurred?', 'comment_created': datetime.datetime(2022, 7, 19, 23, 38, 18, tzinfo=datetime.timezone.utc), 'commenter': 'jasonk000', 'type': 'User'}, {'comment_id': 925047327, 'comment_body': ""It's not immediately clear to me how this interacts with the values in `/configure`\r\n\r\nTo confirm, we should not have `runqlat.so` and `biolatency.so` built here, because they are not in the vendor path?\r\n\r\nThey are not included as part of the vendor'd code, however they are available in local file with `make biolatency.so`, so, I assume the existing `pmdabpf_modules` from `configure` is passed through."", 'comment_created': datetime.datetime(2022, 7, 19, 23, 54, 1, tzinfo=datetime.timezone.utc), 'commenter': 'jasonk000', 'type': 'User'}, {'comment_id': 925050981, 'comment_body': 'Should this removal happen _after_ the insertion, we will always stay one off of the process_count value?\r\n\r\n(might be something to be covered in a test)', 'comment_created': datetime.datetime(2022, 7, 20, 0, 3, 11, tzinfo=datetime.timezone.utc), 'commenter': 'jasonk000', 'type': 'User'}, {'comment_id': 925053731, 'comment_body': ""I don't see how we tell the PMDA how long the string is; should this be null-terminated?"", 'comment_created': datetime.datetime(2022, 7, 20, 0, 10, 24, tzinfo=datetime.timezone.utc), 'commenter': 'jasonk000', 'type': 'User'}, {'comment_id': 925096584, 'comment_body': ""I think we don't need this anymore?"", 'comment_created': datetime.datetime(2022, 7, 20, 2, 6, 16, tzinfo=datetime.timezone.utc), 'commenter': 'jasonk000', 'type': 'User'}, {'comment_id': 925097994, 'comment_body': ""should this be `+=`; I'm not sure about perf_events and the docs aren't too clear, it looks [here](https://elixir.bootlin.com/linux/latest/source/kernel/events/ring_buffer.c#L245) like it is cleared?"", 'comment_created': datetime.datetime(2022, 7, 20, 2, 10, 2, tzinfo=datetime.timezone.utc), 'commenter': 'jasonk000', 'type': 'User'}, {'comment_id': 925100335, 'comment_body': 'I wonder for unusual OS (nixos) whether this path length is sufficient?', 'comment_created': datetime.datetime(2022, 7, 20, 2, 12, 41, tzinfo=datetime.timezone.utc), 'commenter': 'jasonk000', 'type': 'User'}, {'comment_id': 925101612, 'comment_body': 'I think this should be last step, although it makes more cleanup work for TAILQ etc, otherwise the callback handler might find uninitialised values.', 'comment_created': datetime.datetime(2022, 7, 20, 2, 16, 12, tzinfo=datetime.timezone.utc), 'commenter': 'jasonk000', 'type': 'User'}, {'comment_id': 925103204, 'comment_body': 'note: applies to many modules', 'comment_created': datetime.datetime(2022, 7, 20, 2, 20, 31, tzinfo=datetime.timezone.utc), 'commenter': 'jasonk000', 'type': 'User'}, {'comment_id': 925103242, 'comment_body': 'note: applies to many modules', 'comment_created': datetime.datetime(2022, 7, 20, 2, 20, 38, tzinfo=datetime.timezone.utc), 'commenter': 'jasonk000', 'type': 'User'}, {'comment_id': 925103262, 'comment_body': 'note: applies to many modules', 'comment_created': datetime.datetime(2022, 7, 20, 2, 20, 41, tzinfo=datetime.timezone.utc), 'commenter': 'jasonk000', 'type': 'User'}, {'comment_id': 925103307, 'comment_body': 'note: applies to many modules', 'comment_created': datetime.datetime(2022, 7, 20, 2, 20, 47, tzinfo=datetime.timezone.utc), 'commenter': 'jasonk000', 'type': 'User'}, {'comment_id': 925103319, 'comment_body': 'note: applies to many modules where we return any string values', 'comment_created': datetime.datetime(2022, 7, 20, 2, 20, 49, tzinfo=datetime.timezone.utc), 'commenter': 'jasonk000', 'type': 'User'}, {'comment_id': 925109128, 'comment_body': 'can we name it `interval_sec` for clarity', 'comment_created': datetime.datetime(2022, 7, 20, 2, 35, 24, tzinfo=datetime.timezone.utc), 'commenter': 'jasonk000', 'type': 'User'}, {'comment_id': 925112100, 'comment_body': 'should this be `ipversion` or `ip_proto` or something?', 'comment_created': datetime.datetime(2022, 7, 20, 2, 43, 17, tzinfo=datetime.timezone.utc), 'commenter': 'jasonk000', 'type': 'User'}, {'comment_id': 925112414, 'comment_body': 'I think for `strdup` we should return `PMDA_FETCH_DYNAMIC`', 'comment_created': datetime.datetime(2022, 7, 20, 2, 44, 11, tzinfo=datetime.timezone.utc), 'commenter': 'jasonk000', 'type': 'User'}, {'comment_id': 925115254, 'comment_body': ""Is this better as a string? I'm not sure what the use case would be."", 'comment_created': datetime.datetime(2022, 7, 20, 2, 51, 30, tzinfo=datetime.timezone.utc), 'commenter': 'jasonk000', 'type': 'User'}, {'comment_id': 925115927, 'comment_body': '`strncat()` should be used, I think.\r\n', 'comment_created': datetime.datetime(2022, 7, 20, 2, 53, 17, tzinfo=datetime.timezone.utc), 'commenter': 'jasonk000', 'type': 'User'}, {'comment_id': 925116453, 'comment_body': ""I am still wary of null-termination here, `strncat` doesn't guarantee null termination."", 'comment_created': datetime.datetime(2022, 7, 20, 2, 54, 31, tzinfo=datetime.timezone.utc), 'commenter': 'jasonk000', 'type': 'User'}, {'comment_id': 925117162, 'comment_body': '`U32`? .. and below', 'comment_created': datetime.datetime(2022, 7, 20, 2, 56, 31, tzinfo=datetime.timezone.utc), 'commenter': 'jasonk000', 'type': 'User'}, {'comment_id': 925118260, 'comment_body': 'same as prior, this could be `proto` or something?, (mainly because I assume `ip` will have an IP address)', 'comment_created': datetime.datetime(2022, 7, 20, 2, 59, 29, tzinfo=datetime.timezone.utc), 'commenter': 'jasonk000', 'type': 'User'}, {'comment_id': 925118486, 'comment_body': 'nit: typo, `execsnoop.{uid,lost}`', 'comment_created': datetime.datetime(2022, 7, 20, 3, 0, 1, tzinfo=datetime.timezone.utc), 'commenter': 'jasonk000', 'type': 'User'}, {'comment_id': 925119944, 'comment_body': 'on a big machine, this could take a while, are there solutions like cgroup/ulimit that could achieve it quickly?', 'comment_created': datetime.datetime(2022, 7, 20, 3, 2, 58, tzinfo=datetime.timezone.utc), 'commenter': 'jasonk000', 'type': 'User'}, {'comment_id': 925120058, 'comment_body': 'we should sleep some time here, or do something?', 'comment_created': datetime.datetime(2022, 7, 20, 3, 3, 18, tzinfo=datetime.timezone.utc), 'commenter': 'jasonk000', 'type': 'User'}, {'comment_id': 925221865, 'comment_body': '`const char` here and elsewhere with same pattern', 'comment_created': datetime.datetime(2022, 7, 20, 6, 29, 38, tzinfo=datetime.timezone.utc), 'commenter': 'a3f', 'type': 'User'}, {'comment_id': 925222408, 'comment_body': '`(void)`', 'comment_created': datetime.datetime(2022, 7, 20, 6, 30, 32, tzinfo=datetime.timezone.utc), 'commenter': 'a3f', 'type': 'User'}, {'comment_id': 927552429, 'comment_body': 'Ok, thanks for checking. Then I only suggest to rename (checking) `if the bpf PMDA modules should be included` to (checking) `if bpf PMDA modules using perf_buffer__poll should be included`, because otherwise it sounds like no module gets included for libbpf < 0.7, which is not true (as we include biolatency and runqlat).', 'comment_created': datetime.datetime(2022, 7, 22, 11, 15, 45, tzinfo=datetime.timezone.utc), 'commenter': 'andreasgerstmayr', 'type': 'User'}, {'comment_id': 927568253, 'comment_body': ""Jason is excited about oomkill, so I'd suggest let's start by enabling oomkill by default. It ticks the boxes for most generally useful and low overhead. It's using a kprobe though, which will break if the kernel devs decide to rename that kernel function.\r\n\r\nThere's one (minor?) issue though: we ship the same default `bpf.conf` on all systems, but some systems don't have libbpf 0.7 so we don't include oomkill there. This results in an error in the bpf PMDA log file. Should we template the config file?\r\n```\r\n[oomkill.so]\r\nenabled = @BPF_PMDA_OOMKILL_ENABLED@\r\n```\r\netc., like in other places?"", 'comment_created': datetime.datetime(2022, 7, 22, 11, 39, 25, tzinfo=datetime.timezone.utc), 'commenter': 'andreasgerstmayr', 'type': 'User'}, {'comment_id': 927614559, 'comment_body': ""Hm, that's weird. Apparently:\r\n\r\n* `typeof` is not part of the C99 standard (it will be a standard in C23), but it's available as a GNU extension (clang supports it as well)\r\n* when we use `--std=c99` we disable GNU extensions [1] (therefore `typeof` doesn't work)\r\n* when we don't use `--std=c99`, the gcc on my system (version 12.1.1) defaults to `--std=gnu17` [2], i.e. C17 with GNU extensions (therefore `typeof` works)\r\n* however, we can use `__typeof__` instead of `typeof` and then it also works with `--std=c99`\r\n\r\nSo the irony is that by using `--std=c99` on a modern compiler we effectively downgrade the used C standard version. To fix this issue, I suggest to just change `typeof` to `__typeof__` in `trace_helpers.c`, then it compiles fine when using `LCFLAGS = $(C99_CFLAGS)` in the `GNUmakefile`.\r\n\r\n[1] https://stackoverflow.com/a/17156740\r\n[2] you can check this with `info gcc` --> `Standards` which reads `The default, if no C language dialect options are given, is\r\n'-std=gnu17'.` on my system."", 'comment_created': datetime.datetime(2022, 7, 22, 12, 44, 15, tzinfo=datetime.timezone.utc), 'commenter': 'andreasgerstmayr', 'type': 'User'}, {'comment_id': 927627393, 'comment_body': ""```\r\n--- a/src/pmdas/bpf/modules/execsnoop.c\r\n+++ b/src/pmdas/bpf/modules/execsnoop.c\r\n@@ -237,7 +237,7 @@ static void execsnoop_register(unsigned int cluster_id, pmdaMetric *metrics, pmd\r\n         .m_desc = {\r\n             .pmid  = PMDA_PMID(cluster_id, 6),\r\n             .type  = PM_TYPE_U32,\r\n-            .indom = indom_id_mapping[LOST_EVENTS],\r\n+            .indom = PM_INDOM_NULL,\r\n             .sem   = PM_SEM_INSTANT,\r\n             .units = PMDA_PMUNITS(0, 0, 0, 0, 0, 0),\r\n         }\r\n```\r\n:+1:\r\n\r\nYou don't need the `indoms[1]` declaration anymore. And in `execsnoop_fetch_to_atom` currently you have\r\n```\r\n    if (inst == PM_IN_NULL) {\r\n        return PM_ERR_INST;\r\n    }\r\n```\r\n(i.e., return if the `inst` is `PM_IN_NULL`), but in case of the lost metric without indom, inst will be `PM_IN_NULL`. You can move\r\n```\r\n    /* bpf.execsnoop.lost */\r\n    if (item == LOST) {\r\n        atom->ul = lost_events;\r\n        return PMDA_FETCH_STATIC;\r\n    }\r\n```\r\nup before this check for example, then it will work."", 'comment_created': datetime.datetime(2022, 7, 22, 12, 59, 33, tzinfo=datetime.timezone.utc), 'commenter': 'andreasgerstmayr', 'type': 'User'}, {'comment_id': 927630127, 'comment_body': ""Let me know if you need help - I'm by no means an expert in expect(1), but maybe I can help troubleshooting the issue."", 'comment_created': datetime.datetime(2022, 7, 22, 13, 2, 58, tzinfo=datetime.timezone.utc), 'commenter': 'andreasgerstmayr', 'type': 'User'}, {'comment_id': 927636203, 'comment_body': ""I'm getting the following warning now:\r\n```\r\nfsslower.c: In function 'fsslower_fetch_to_atom':\r\nfsslower.c:572:18: warning: assignment to 'char *' from incompatible pointer type 'char **' [-Wincompatible-pointer-types]\r\n  572 |         atom->cp = &file_op[value->event.op];\r\n      |                  ^\r\n```\r\n(it's a `char*` array now, you need to remove the `&`)"", 'comment_created': datetime.datetime(2022, 7, 22, 13, 10, 19, tzinfo=datetime.timezone.utc), 'commenter': 'andreasgerstmayr', 'type': 'User'}, {'comment_id': 927640226, 'comment_body': ""The second parameter to `PMDA_PMUNITS` needs to be `1` to specify that it's a time unit."", 'comment_created': datetime.datetime(2022, 7, 22, 13, 14, 43, tzinfo=datetime.timezone.utc), 'commenter': 'andreasgerstmayr', 'type': 'User'}, {'comment_id': 927642399, 'comment_body': ""I think there's a copy&paste error, the unit of `bpf.fsslower.bytes` shouldn't be `PMDA_PMUNITS(0, 0, 0, 0, PM_TIME_NSEC, 0),`, it should be\r\n```\r\nPMDA_PMUNITS(1, 0, 0, PM_SPACE_BYTE, 0, 0) \r\n```"", 'comment_created': datetime.datetime(2022, 7, 22, 13, 17, 10, tzinfo=datetime.timezone.utc), 'commenter': 'andreasgerstmayr', 'type': 'User'}, {'comment_id': 927646724, 'comment_body': ""The configure script sets `PMDABPF_MODULES` to `runqlat.so biolatency.so` for example, and in the Makefile we have `$(PMDABPF_MODULES)` as a dependency of the `default_pcp default` targets - so only the modules listed in `PMDABPF_MODULES` are built.\r\n\r\nThe symlinks are created in any case though, but afaics that's not a problem as the files are not getting compiled."", 'comment_created': datetime.datetime(2022, 7, 22, 13, 21, 54, tzinfo=datetime.timezone.utc), 'commenter': 'andreasgerstmayr', 'type': 'User'}, {'comment_id': 934904551, 'comment_body': 'I just added this: `touch /tmp/test-file && stat /tmp/test-file 1> /dev/null`,', 'comment_created': datetime.datetime(2022, 8, 1, 20, 42, 54, tzinfo=datetime.timezone.utc), 'commenter': 'smalinux', 'type': 'User'}, {'comment_id': 937890590, 'comment_body': ""Since str_t.str is a fixed size array of chars, isn't it a null-terminated string?\r\nhttps://github.com/performancecopilot/pcp/blob/main/vendor/github.com/iovisor/bcc/libbpf-tools/bashreadline.h#L10"", 'comment_created': datetime.datetime(2022, 8, 4, 14, 51, 11, tzinfo=datetime.timezone.utc), 'commenter': 'smalinux', 'type': 'User'}, {'comment_id': 937969775, 'comment_body': 'Done. thanks. \r\nI applied this change to all other tools. \r\nhowever, still I got many instances from `bpf.bashreadline.lost` for example!', 'comment_created': datetime.datetime(2022, 8, 4, 15, 54, 32, tzinfo=datetime.timezone.utc), 'commenter': 'smalinux', 'type': 'User'}, {'comment_id': 938032223, 'comment_body': ""Good point - I guess it is in this case, I'm not sure about all cases."", 'comment_created': datetime.datetime(2022, 8, 4, 16, 46, 58, tzinfo=datetime.timezone.utc), 'commenter': 'jasonk000', 'type': 'User'}, {'comment_id': 938074401, 'comment_body': 'Any suggestions for a better length? \r\nI got this number from `bcc/libbpf-tools/bashreadline.c`:\r\nhttps://github.com/iovisor/bcc/blob/0e29f7032897f2ebdd4c617910aa8ade74bc4b23/libbpf-tools/bashreadline.c#L100', 'comment_created': datetime.datetime(2022, 8, 4, 17, 35, 28, tzinfo=datetime.timezone.utc), 'commenter': 'smalinux', 'type': 'User'}, {'comment_id': 938105317, 'comment_body': 'I think it this easy to change it to a string,\r\nI used U32 because of this line:\r\nhttps://github.com/iovisor/bcc/blob/0e29f7032897f2ebdd4c617910aa8ade74bc4b23/libbpf-tools/mountsnoop.h#L30', 'comment_created': datetime.datetime(2022, 8, 4, 18, 6, 29, tzinfo=datetime.timezone.utc), 'commenter': 'smalinux', 'type': 'User'}, {'comment_id': 938130950, 'comment_body': '@jasonk000 So, I think I need change `char* (*metric_name_fn_t)` to `const char* (*metric_name_fn_t)`?', 'comment_created': datetime.datetime(2022, 8, 4, 18, 38, 25, tzinfo=datetime.timezone.utc), 'commenter': 'smalinux', 'type': 'User'}, {'comment_id': 938149162, 'comment_body': 'Done! Thanks\r\n```\r\n$ git diff\r\ndiff --git a/qa/1795 b/qa/1795\r\nindex 44752897d..68e5c7818 100755\r\n--- a/qa/1795\r\n+++ b/qa/1795\r\n@@ -35,6 +35,9 @@ enabled=true\r\n EOF\r\n _pmdabpf_wait_for_metric\r\n\r\n+# Wait for values to appear\r\n+pmsleep 2\r\n+\r\n```', 'comment_created': datetime.datetime(2022, 8, 4, 18, 51, 13, tzinfo=datetime.timezone.utc), 'commenter': 'smalinux', 'type': 'User'}, {'comment_id': 938151261, 'comment_body': '@andreasgerstmayr any suggestions here, please? \r\nMy reference: https://github.com/iovisor/bcc/blob/0e29f7032897f2ebdd4c617910aa8ade74bc4b23/tools/oomkill_example.txt#L36', 'comment_created': datetime.datetime(2022, 8, 4, 18, 54, 5, tzinfo=datetime.timezone.utc), 'commenter': 'smalinux', 'type': 'User'}, {'comment_id': 938332895, 'comment_body': '`fd`, `err` and `flags` are based on integer data type, so maybe PM_TYPE_32 is enough...\r\nhttps://github.com/iovisor/bcc/blob/0e29f7032897f2ebdd4c617910aa8ade74bc4b23/libbpf-tools/opensnoop.h#L19-L20', 'comment_created': datetime.datetime(2022, 8, 4, 23, 39, 44, tzinfo=datetime.timezone.utc), 'commenter': 'smalinux', 'type': 'User'}, {'comment_id': 938334535, 'comment_body': 'https://github.com/iovisor/bcc/blob/0e29f7032897f2ebdd4c617910aa8ade74bc4b23/libbpf-tools/mountsnoop.h#L33', 'comment_created': datetime.datetime(2022, 8, 4, 23, 43, 57, tzinfo=datetime.timezone.utc), 'commenter': 'smalinux', 'type': 'User'}, {'comment_id': 938335545, 'comment_body': 'Done. Thanks!', 'comment_created': datetime.datetime(2022, 8, 4, 23, 46, 28, tzinfo=datetime.timezone.utc), 'commenter': 'smalinux', 'type': 'User'}, {'comment_id': 938335712, 'comment_body': 'Done. Thanks!', 'comment_created': datetime.datetime(2022, 8, 4, 23, 46, 54, tzinfo=datetime.timezone.utc), 'commenter': 'smalinux', 'type': 'User'}, {'comment_id': 938335923, 'comment_body': 'Done. Thanks!', 'comment_created': datetime.datetime(2022, 8, 4, 23, 47, 24, tzinfo=datetime.timezone.utc), 'commenter': 'smalinux', 'type': 'User'}, {'comment_id': 938343277, 'comment_body': ""Thank you for this informative comment,\r\nSince we are using `trace_helpers.c` from symlink, maybe It's not a good idea to patch that file? especially since this file changes quickly..."", 'comment_created': datetime.datetime(2022, 8, 5, 0, 7, 47, tzinfo=datetime.timezone.utc), 'commenter': 'smalinux', 'type': 'User'}, {'comment_id': 938351978, 'comment_body': 'It seems that the issue also already exists in the original tool, dito:\r\nhttps://github.com/iovisor/bcc/blob/0e29f7032897f2ebdd4c617910aa8ade74bc4b23/libbpf-tools/bashreadline.c#L163-L168\r\nDo you suggest deleting this code block? I removed it and everything works fine...', 'comment_created': datetime.datetime(2022, 8, 5, 0, 32, 43, tzinfo=datetime.timezone.utc), 'commenter': 'smalinux', 'type': 'User'}, {'comment_id': 938352197, 'comment_body': 'Done. Thanks!', 'comment_created': datetime.datetime(2022, 8, 5, 0, 33, 16, tzinfo=datetime.timezone.utc), 'commenter': 'smalinux', 'type': 'User'}, {'comment_id': 938352678, 'comment_body': 'I think this one was for @a3f ?', 'comment_created': datetime.datetime(2022, 8, 5, 0, 34, 35, tzinfo=datetime.timezone.utc), 'commenter': 'jasonk000', 'type': 'User'}, {'comment_id': 938354418, 'comment_body': 'Oh, sorry ^^\r\n', 'comment_created': datetime.datetime(2022, 8, 5, 0, 39, 52, tzinfo=datetime.timezone.utc), 'commenter': 'smalinux', 'type': 'User'}, {'comment_id': 938846059, 'comment_body': 'Done. Thanks!', 'comment_created': datetime.datetime(2022, 8, 5, 14, 0, 10, tzinfo=datetime.timezone.utc), 'commenter': 'smalinux', 'type': 'User'}, {'comment_id': 942329931, 'comment_body': ""Good question. I'm not sure about the exact algorithm the oomkiller uses when deciding which process to kill, I think it's also possible that it kills another, unrelated process (which we want to avoid). I think it's a bit risky to trigger the oomkiller in a QA test.\r\n\r\nWhat do you think @natoscott @kmcdonell, should we try to trigger the oom-killer as part of a QA test?"", 'comment_created': datetime.datetime(2022, 8, 10, 11, 18, 42, tzinfo=datetime.timezone.utc), 'commenter': 'andreasgerstmayr', 'type': 'User'}, {'comment_id': 942342875, 'comment_body': 'In the original tool you can set `libreadline_path`: https://github.com/iovisor/bcc/blob/0e29f7032897f2ebdd4c617910aa8ade74bc4b23/libbpf-tools/bashreadline.c#L50-L54\r\nSo I suggest to either make it also configurable, or remove this block.', 'comment_created': datetime.datetime(2022, 8, 10, 11, 34, 56, tzinfo=datetime.timezone.utc), 'commenter': 'andreasgerstmayr', 'type': 'User'}, {'comment_id': 942681513, 'comment_body': 'Here\'s a cgroup example:\r\n\r\nSingle concat, runs inside 10MB\r\n```\r\njkoch@jkoch:/sys/fs/cgroup/user.slice$ sudo systemd-run --scope -p MemoryLimit=10M perl -e \'$a .= ""A"" x 1024\'\r\nRunning scope as unit: run-r43d2f5e56b8847fea964d1d1a0bc19ec.scope\r\n[completes]\r\n```\r\n\r\nWith a loop, is terminated:\r\n```\r\njkoch@jkoch:/sys/fs/cgroup/user.slice$ sudo systemd-run --scope -p MemoryLimit=10M perl -e \'while (1) { $a .= ""A"" x 1024 }\'\r\nRunning scope as unit: run-r9ae1c624743547f58b4abdb773a73498.scope\r\nKilled\r\n```\r\n\r\nVerifying:\r\n```\r\njkoch@jkoch:/sys/fs/cgroup/user.slice$ sudo journalctl --since -5m | grep oom-kill\r\nAug 10 09:45:38 jkoch kernel: perl invoked oom-killer: gfp_mask=0xcc0(GFP_KERNEL), order=0, oom_score_adj=0\r\nAug 10 09:45:38 jkoch kernel: oom-kill:constraint=CONSTRAINT_MEMCG,nodemask=(null),cpuset=run-r9ae1c624743547f58b4abdb773a73498.scope,mems_allowed=0,oom_memcg=/system.slice/run-r9ae1c624743547f58b4abdb773a73498.scope,task_memcg=/system.slice/run-r9ae1c624743547f58b4abdb773a73498.scope,task=perl,pid=100884,uid=0\r\n```', 'comment_created': datetime.datetime(2022, 8, 10, 16, 46, 27, tzinfo=datetime.timezone.utc), 'commenter': 'jasonk000', 'type': 'User'}, {'comment_id': 942970115, 'comment_body': ""@andreasgerstmayr it does sound a little risky, and maybe also something that will be difficult to make reliable/deterministic across many kernel versions.  FWIW, there's also /proc/pid/oom_score that may help with focusing the oom-killer's attention, from memory its writable."", 'comment_created': datetime.datetime(2022, 8, 10, 22, 55, 33, tzinfo=datetime.timezone.utc), 'commenter': 'natoscott', 'type': 'User'}, {'comment_id': 943264108, 'comment_body': ""afaics git automatically merges it, so unless there is a change in exactly that line, it shouldn't be an issue to modify this file from the remote repo."", 'comment_created': datetime.datetime(2022, 8, 11, 9, 9, 28, tzinfo=datetime.timezone.utc), 'commenter': 'andreasgerstmayr', 'type': 'User'}, {'comment_id': 943274547, 'comment_body': 'Yes.\r\n\r\n`metric_text_oneline` and `metric_text_long` could also be constants, however they get passed down to `dp->version.four.text` (in `bpf.c`) which expects a `char**`', 'comment_created': datetime.datetime(2022, 8, 11, 9, 21, 8, tzinfo=datetime.timezone.utc), 'commenter': 'andreasgerstmayr', 'type': 'User'}, {'comment_id': 943289883, 'comment_body': ""`event.fs` comes from `struct trace_event_raw_sys_enter *ctx` by `(const char *)ctx->args[2]`. I'd expect it to be null-terminated coming from the kernel. The upstream tool at https://github.com/iovisor/bcc/blob/a416a82/libbpf-tools/mountsnoop.c#L234 doesn't perform anything special, just prints it (where `printf` expects a null-terminated string)."", 'comment_created': datetime.datetime(2022, 8, 11, 9, 38, 20, tzinfo=datetime.timezone.utc), 'commenter': 'andreasgerstmayr', 'type': 'User'}]","[{'commit_sha': 'b576d4be83aac136a28b1b6a5a8b3931636ca50c', 'committer_username': 'smalinux', 'committer_name': 'Sohaib Mohamed', 'committer_email': None, 'commit_date': datetime.datetime(2014, 7, 17, 23, 59, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8f9798ac3a30c963701031cc8cbe06809051c8c9', 'committer_username': 'smalinux', 'committer_name': 'Sohaib Mohamed', 'committer_email': None, 'commit_date': datetime.datetime(2014, 7, 17, 23, 59, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '08a2ff2239df8ac0618f510324c8facb1b0dcd9e', 'committer_username': 'smalinux', 'committer_name': 'Sohaib Mohamed', 'committer_email': None, 'commit_date': datetime.datetime(2014, 7, 17, 23, 59, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e986ede1635d19530b2f4cb940718765af79cf5a', 'committer_username': 'smalinux', 'committer_name': 'Sohaib Mohamed', 'committer_email': None, 'commit_date': datetime.datetime(2014, 7, 17, 23, 59, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '272fe991e558969bb0969243a08cbca053c575af', 'committer_username': 'smalinux', 'committer_name': 'Sohaib Mohamed', 'committer_email': None, 'commit_date': datetime.datetime(2014, 7, 17, 23, 59, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dfa51304defc6398fe77b337865b31f1ef3ec780', 'committer_username': 'smalinux', 'committer_name': 'Sohaib Mohamed', 'committer_email': None, 'commit_date': datetime.datetime(2014, 7, 17, 23, 59, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '208857d404b54a81c84d831a55ff9c90cb2ed978', 'committer_username': 'smalinux', 'committer_name': 'Sohaib Mohamed', 'committer_email': None, 'commit_date': datetime.datetime(2014, 7, 17, 23, 59, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '968302d871c4c155d97d1b3d20c5cd16c04234fe', 'committer_username': 'smalinux', 'committer_name': 'Sohaib Mohamed', 'committer_email': None, 'commit_date': datetime.datetime(2014, 7, 17, 23, 59, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0a5f10f2fe4a62348bd5000afb67f1971637d594', 'committer_username': 'smalinux', 'committer_name': 'Sohaib Mohamed', 'committer_email': None, 'commit_date': datetime.datetime(2014, 7, 17, 23, 59, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e268d8f1c112480c1c0bad3f4e7f6b76f1b14515', 'committer_username': 'smalinux', 'committer_name': 'Sohaib Mohamed', 'committer_email': None, 'commit_date': datetime.datetime(2014, 7, 17, 23, 59, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8268241c0b11bb209545c7960ed5868d97ef7294', 'committer_username': 'smalinux', 'committer_name': 'Sohaib Mohamed', 'committer_email': None, 'commit_date': datetime.datetime(2014, 7, 17, 23, 59, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a87a2ad5c66a69b45fd106d78bd1738d27630676', 'committer_username': 'smalinux', 'committer_name': 'Sohaib Mohamed', 'committer_email': None, 'commit_date': datetime.datetime(2014, 7, 17, 23, 59, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '992cb7981b933c0837c52502bf6144efd0fc6f3d', 'committer_username': 'smalinux', 'committer_name': 'Sohaib Mohamed', 'committer_email': None, 'commit_date': datetime.datetime(2014, 7, 17, 23, 59, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1333c19fafa256034e103d8b96311e9e8d39298a', 'committer_username': 'andreasgerstmayr', 'committer_name': 'Andreas Gerstmayr', 'committer_email': None, 'commit_date': datetime.datetime(2010, 12, 27, 16, 40, 10, tzinfo=datetime.timezone.utc)}]",Sohaib Mohamed,8196176,,User,,124,,57,159
1078124103,PCP: DynamicScreens,,False,1102,https://api.github.com/repos/htop-dev/htop/pulls/1102,https://github.com/htop-dev/htop/pull/1102,closed,2131,82,57,10,3,37,0,0,[],2022-10-06 02:47:16+00:00,2023-06-19 06:18:57+00:00,22131101.0,"256 days, 3:31:41","[{'comment_id': 988936037, 'comment_body': 'Stray additional blank line inserted', 'comment_created': datetime.datetime(2022, 10, 6, 11, 51, 44, tzinfo=datetime.timezone.utc), 'commenter': 'BenBE', 'type': 'User'}, {'comment_id': 988942929, 'comment_body': 'Could you try to split off these name changes into their own commit?', 'comment_created': datetime.datetime(2022, 10, 6, 11, 55, 59, tzinfo=datetime.timezone.utc), 'commenter': 'BenBE', 'type': 'User'}, {'comment_id': 988946667, 'comment_body': 'Missing field descriptions', 'comment_created': datetime.datetime(2022, 10, 6, 11, 58, 6, tzinfo=datetime.timezone.utc), 'commenter': 'BenBE', 'type': 'User'}, {'comment_id': 988948457, 'comment_body': 'Duplicate include', 'comment_created': datetime.datetime(2022, 10, 6, 11, 58, 48, tzinfo=datetime.timezone.utc), 'commenter': 'BenBE', 'type': 'User'}, {'comment_id': 988951495, 'comment_body': ""Shouldn't this be `ht_key_t`, as this is effectively directly passed to the `Hashtable` implementation?"", 'comment_created': datetime.datetime(2022, 10, 6, 12, 0, 31, tzinfo=datetime.timezone.utc), 'commenter': 'BenBE', 'type': 'User'}, {'comment_id': 988952275, 'comment_body': '```suggestion\r\nbool DynamicScreen_search(Hashtable* dynamics, const char* name, ht_key_t* key) {\r\n```', 'comment_created': datetime.datetime(2022, 10, 6, 12, 1, 8, tzinfo=datetime.timezone.utc), 'commenter': 'BenBE', 'type': 'User'}, {'comment_id': 988952653, 'comment_body': '```suggestion\r\nconst char* DynamicScreen_lookup(Hashtable* dynamics, ht_key_t key) {\r\n```', 'comment_created': datetime.datetime(2022, 10, 6, 12, 1, 22, tzinfo=datetime.timezone.utc), 'commenter': 'BenBE', 'type': 'User'}, {'comment_id': 988954945, 'comment_body': 'Missing implementation? Or missing documentation/comment?', 'comment_created': datetime.datetime(2022, 10, 6, 12, 2, 50, tzinfo=datetime.timezone.utc), 'commenter': 'BenBE', 'type': 'User'}, {'comment_id': 988957849, 'comment_body': '```suggestion\r\ntypedef GenericData* (*GenericData_New)(const Settings* settings);\r\n```', 'comment_created': datetime.datetime(2022, 10, 6, 12, 4, 48, tzinfo=datetime.timezone.utc), 'commenter': 'BenBE', 'type': 'User'}, {'comment_id': 988960813, 'comment_body': '```suggestion\r\n   const Settings* settings;\r\n```', 'comment_created': datetime.datetime(2022, 10, 6, 12, 6, 50, tzinfo=datetime.timezone.utc), 'commenter': 'BenBE', 'type': 'User'}, {'comment_id': 988963493, 'comment_body': 'AFAICS the explicit import for `ProcessField` seems missing from this header.', 'comment_created': datetime.datetime(2022, 10, 6, 12, 8, 37, tzinfo=datetime.timezone.utc), 'commenter': 'BenBE', 'type': 'User'}, {'comment_id': 988967154, 'comment_body': '```suggestion\r\n   GenericData* g = constructor(this->settings);\r\n```', 'comment_created': datetime.datetime(2022, 10, 6, 12, 11, 1, tzinfo=datetime.timezone.utc), 'commenter': 'BenBE', 'type': 'User'}, {'comment_id': 988969300, 'comment_body': 'Why not use `size_t`?', 'comment_created': datetime.datetime(2022, 10, 6, 12, 12, 27, tzinfo=datetime.timezone.utc), 'commenter': 'BenBE', 'type': 'User'}, {'comment_id': 988972151, 'comment_body': 'Header sort order.', 'comment_created': datetime.datetime(2022, 10, 6, 12, 14, 14, tzinfo=datetime.timezone.utc), 'commenter': 'BenBE', 'type': 'User'}, {'comment_id': 988977993, 'comment_body': '```suggestion\r\n#include ""Object.h""\r\n```\r\n\r\nNo need to repeat headers already present in the header file.', 'comment_created': datetime.datetime(2022, 10, 6, 12, 20, 6, tzinfo=datetime.timezone.utc), 'commenter': 'BenBE', 'type': 'User'}, {'comment_id': 988980877, 'comment_body': 'Check indentation', 'comment_created': datetime.datetime(2022, 10, 6, 12, 22, 49, tzinfo=datetime.timezone.utc), 'commenter': 'BenBE', 'type': 'User'}, {'comment_id': 988985997, 'comment_body': 'This looks very repetetive in the following blocks … Only thing changing is the accessed field and the `PM_TYPE_*` specifier. Care to use a `define` for this?', 'comment_created': datetime.datetime(2022, 10, 6, 12, 28, 4, tzinfo=datetime.timezone.utc), 'commenter': 'BenBE', 'type': 'User'}, {'comment_id': 988986552, 'comment_body': '```suggestion\r\n   if (key < 0)\r\n      return 0;\r\n```', 'comment_created': datetime.datetime(2022, 10, 6, 12, 28, 36, tzinfo=datetime.timezone.utc), 'commenter': 'BenBE', 'type': 'User'}, {'comment_id': 988987731, 'comment_body': 'Header order', 'comment_created': datetime.datetime(2022, 10, 6, 12, 29, 51, tzinfo=datetime.timezone.utc), 'commenter': 'BenBE', 'type': 'User'}, {'comment_id': 988989017, 'comment_body': '```suggestion\r\n   return (count > 0) ? count : 0;\r\n```', 'comment_created': datetime.datetime(2022, 10, 6, 12, 31, 7, tzinfo=datetime.timezone.utc), 'commenter': 'BenBE', 'type': 'User'}, {'comment_id': 988989297, 'comment_body': '```suggestion\r\n   if (currentRowsCount != requiredRows) {\r\n```', 'comment_created': datetime.datetime(2022, 10, 6, 12, 31, 25, tzinfo=datetime.timezone.utc), 'commenter': 'BenBE', 'type': 'User'}, {'comment_id': 988990263, 'comment_body': '```suggestion\r\n   // alloc\r\n```', 'comment_created': datetime.datetime(2022, 10, 6, 12, 32, 26, tzinfo=datetime.timezone.utc), 'commenter': 'BenBE', 'type': 'User'}, {'comment_id': 988990591, 'comment_body': '```suggestion\r\n   // fill\r\n```', 'comment_created': datetime.datetime(2022, 10, 6, 12, 32, 45, tzinfo=datetime.timezone.utc), 'commenter': 'BenBE', 'type': 'User'}, {'comment_id': 989675213, 'comment_body': 'Should this be ... ?\r\n```\r\n   MainPanel_setState(panel, &state);\r\n   MainPanel_setState(genericDataPanel, &state);\r\n```', 'comment_created': datetime.datetime(2022, 10, 7, 4, 40, 18, tzinfo=datetime.timezone.utc), 'commenter': 'natoscott', 'type': 'User'}, {'comment_id': 989678420, 'comment_body': ""@smalinux let's make this a percentage utilization - currently it's showing the sum of the other two (user / kernel) columns (i.e. its essentially repeating existing info there).\r\n```\r\n-cusage.heading = CPU\r\n-cusage.caption = CPU Time\r\n-cusage.width = -8\r\n-cusage.metric = 1000 * rate(cgroup.cpu.stat.usage)\r\n+cusage.heading = CPU%\r\n+cusage.caption = CPU Utilization\r\n+cusage.width = 6\r\n+cusage.metric = 100 * (rate(cgroup.cpu.stat.usage) / hinv.ncpu)\r\n```"", 'comment_created': datetime.datetime(2022, 10, 7, 4, 48, 59, tzinfo=datetime.timezone.utc), 'commenter': 'natoscott', 'type': 'User'}, {'comment_id': 989678775, 'comment_body': ""As discussed earlier, let's drop this 'scale' field and make this automatically do the right thing everywhere."", 'comment_created': datetime.datetime(2022, 10, 7, 4, 49, 56, tzinfo=datetime.timezone.utc), 'commenter': 'natoscott', 'type': 'User'}, {'comment_id': 989679036, 'comment_body': ""For me, this screen doesn't function correctly.  The headings don't seem to match the data displayed."", 'comment_created': datetime.datetime(2022, 10, 7, 4, 50, 37, tzinfo=datetime.timezone.utc), 'commenter': 'natoscott', 'type': 'User'}, {'comment_id': 990373601, 'comment_body': ""Please take another look. There are seven columns? But the alignment is completely messy here since the headings took the width from config files and `Process helpers` didn't.\xa0\r\nIf my conclusion is correct, I think this issue is easy to fix, but only after fixing the pmConvScale issue first."", 'comment_created': datetime.datetime(2022, 10, 7, 17, 59, 30, tzinfo=datetime.timezone.utc), 'commenter': 'smalinux', 'type': 'User'}, {'comment_id': 990410205, 'comment_body': '@natoscott I think we need a new panel working in parallel with/instead MainPanel. This is a big part of what I\'m talking about so far...\r\nthis panel will be minimal and doesn\'t have `Nice (f7)` or `Kill (f9)` panels [[dito](https://github.com/htop-dev/htop/blob/main/MainPanel.c#L25)]\r\nThis will fix a lot of issues, maybe one of them is the issue mentioned above `--enable-debug`, not sure, this part needs surgery ^^"" \r\nbut MainPanel has `Class(Process)`: https://github.com/htop-dev/htop/blob/bc22bee6505a4953d20eed96899d929e769a7baa/MainPanel.c#L215\r\n\r\nalso, @BenBE told me before how to do that: @natoscott I need your help here...\r\n> BenBe: I think it might be worth looking into a direction where the current Panel code is just used as a derived class ProcessListPanel (showing a process list), while most of its code is split into a base class GenericPanel (doing mostly nothing). From that GenericPanel class you could then split another derived class ""FancyPanel"" for doing all the Fancy stuff ;-)\r\n> \r\n> Sohaib: Could you explain this more please?\r\n> \r\n> BenBe: Basically what I was going at was not adopting the current Panel class to also show generic stuff, but to use the existing inheritance stuff so you can just push different kinds of Panels (""Process Lists"" vs. ""Generic Panels"") into the list of tabs handled by the ScreenManager code.\r\n> The way to do this mostly boils down to split the current Panel implementation into the basic ""draw the panel"" code (extracted from current source BasePanel class) and the code drawing the process list (a new ProcessListPanel class).\r\n> The ScreenManager then instead of listing plain Panels would list BasePanels, which could be ProcessListPanels (working like they do now) or GenricStuffPanels (doing something generic).\r\n\r\n', 'comment_created': datetime.datetime(2022, 10, 7, 18, 48, 4, tzinfo=datetime.timezone.utc), 'commenter': 'smalinux', 'type': 'User'}, {'comment_id': 990743046, 'comment_body': 'Done! Thanks!', 'comment_created': datetime.datetime(2022, 10, 9, 6, 43, 20, tzinfo=datetime.timezone.utc), 'commenter': 'smalinux', 'type': 'User'}, {'comment_id': 990743083, 'comment_body': 'Done! Thanks!\r\n', 'comment_created': datetime.datetime(2022, 10, 9, 6, 43, 36, tzinfo=datetime.timezone.utc), 'commenter': 'smalinux', 'type': 'User'}, {'comment_id': 1018643717, 'comment_body': '@BenBE any chance you can help @smalinux here with some sample code changes to get him started on this aspect?  thanks!', 'comment_created': datetime.datetime(2022, 11, 10, 4, 35, 7, tzinfo=datetime.timezone.utc), 'commenter': 'natoscott', 'type': 'User'}, {'comment_id': 1019144148, 'comment_body': 'Will have to wait for next week; not in town tomorrow and the day after (giving a talk for a small conference). Changes-wise it boils down to creating inherited classes similar to what can be seen with `ProcessList` and `<Platform>ProcessList` with the Panel managing the `ProcessList` stuff getting most of the current process list draw code. Extra points when rendering the header/list items is split in a way so that for the generic tabs and the process list the actual rendering code is the same, but only creating/filling the content buffers differs. As said, I can elaborate next week …', 'comment_created': datetime.datetime(2022, 11, 10, 13, 45, 55, tzinfo=datetime.timezone.utc), 'commenter': 'BenBE', 'type': 'User'}, {'comment_id': 1036632266, 'comment_body': '@BenBE ping - can you post that detailed writeup here when you get a free minute?  :) Thanks!', 'comment_created': datetime.datetime(2022, 12, 1, 2, 28, 17, tzinfo=datetime.timezone.utc), 'commenter': 'natoscott', 'type': 'User'}, {'comment_id': 1036632388, 'comment_body': 'I have a branch with this working now, will post an update soon.', 'comment_created': datetime.datetime(2022, 12, 1, 2, 28, 36, tzinfo=datetime.timezone.utc), 'commenter': 'natoscott', 'type': 'User'}, {'comment_id': 1111427748, 'comment_body': 'This was resolved with the refactoring awhile back that improved the generic value scaling algorithm used.  Code referred to here now lives in PCPDynamicColumn.c FWIW.', 'comment_created': datetime.datetime(2023, 2, 20, 3, 41, 22, tzinfo=datetime.timezone.utc), 'commenter': 'natoscott', 'type': 'User'}, {'comment_id': 1111429722, 'comment_body': 'The generic value scaling work is now merged, marking this one resolved.', 'comment_created': datetime.datetime(2023, 2, 20, 3, 46, 55, tzinfo=datetime.timezone.utc), 'commenter': 'natoscott', 'type': 'User'}]","[{'commit_sha': '6a27de7ef9dbaca0736019668307f7cbdc785a71', 'committer_username': 'natoscott', 'committer_name': 'Nathan Scott', 'committer_email': None, 'commit_date': datetime.datetime(2011, 8, 5, 4, 23, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6f4d75a73be914863c3a31efeeb0a19b8b2e9d94', 'committer_username': 'smalinux', 'committer_name': 'Sohaib Mohamed', 'committer_email': None, 'commit_date': datetime.datetime(2014, 7, 17, 23, 59, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2069fb9f8f7f9ae58dd1eaac367e0fc758be8ea6', 'committer_username': 'smalinux', 'committer_name': 'Sohaib Mohamed', 'committer_email': None, 'commit_date': datetime.datetime(2014, 7, 17, 23, 59, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '383dfcfe2ef2053611c47c179df9278d2389d665', 'committer_username': 'natoscott', 'committer_name': 'Nathan Scott', 'committer_email': None, 'commit_date': datetime.datetime(2011, 8, 5, 4, 23, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2dc6d1fce9e20b360abdeb426233cfd5a8e3bb9c', 'committer_username': 'natoscott', 'committer_name': 'Nathan Scott', 'committer_email': None, 'commit_date': datetime.datetime(2011, 8, 5, 4, 23, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fbc824221ec38241cf635edc24696fd31812ad04', 'committer_username': 'natoscott', 'committer_name': 'Nathan Scott', 'committer_email': None, 'commit_date': datetime.datetime(2011, 8, 5, 4, 23, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a0b143914664be04be61d025e0ee2ab8684bc0bc', 'committer_username': 'natoscott', 'committer_name': 'Nathan Scott', 'committer_email': None, 'commit_date': datetime.datetime(2011, 8, 5, 4, 23, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1e585f3590c9112e359cdde21ef0e40a404821c8', 'committer_username': 'natoscott', 'committer_name': 'Nathan Scott', 'committer_email': None, 'commit_date': datetime.datetime(2011, 8, 5, 4, 23, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f65ef79beb4dfd0391471ded38a97618ff028f30', 'committer_username': 'natoscott', 'committer_name': 'Nathan Scott', 'committer_email': None, 'commit_date': datetime.datetime(2011, 8, 5, 4, 23, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a920974ab148a7dcc91869494ee3de66e55de4c1', 'committer_username': 'natoscott', 'committer_name': 'Nathan Scott', 'committer_email': None, 'commit_date': datetime.datetime(2011, 8, 5, 4, 23, 27, tzinfo=datetime.timezone.utc)}]",Sohaib Mohamed,8196176,,User,,124,,57,159
1052932775,PCP: DynamicMeters: Add Meter Choice framework,Related: https://github.com/htop-dev/htop/pull/200 && https://github.com/htop-dev/htop/pull/669,False,1081,https://api.github.com/repos/htop-dev/htop/pulls/1081,https://github.com/htop-dev/htop/pull/1081,open,1921,125,46,10,2,15,0,0,[],2022-09-12 08:01:57+00:00,,0.0,,"[{'comment_id': 968114214, 'comment_body': ""I tried to return raw directly, but I got a Segfault. I don't know why!\xa0\r\nSo I had to copy `raw` into `ret`"", 'comment_created': datetime.datetime(2022, 9, 12, 8, 15, 21, tzinfo=datetime.timezone.utc), 'commenter': 'smalinux', 'type': 'User'}, {'comment_id': 968126632, 'comment_body': '```suggestion\r\n   char** ret = xCalloc(count, sizeof(char*));\r\n```', 'comment_created': datetime.datetime(2022, 9, 12, 8, 26, 16, tzinfo=datetime.timezone.utc), 'commenter': 'BenBE', 'type': 'User'}, {'comment_id': 968127258, 'comment_body': 'OOB write', 'comment_created': datetime.datetime(2022, 9, 12, 8, 26, 55, tzinfo=datetime.timezone.utc), 'commenter': 'BenBE', 'type': 'User'}, {'comment_id': 968129868, 'comment_body': 'Probably because `pmGetInDom` sets up references in `raw` to point into the same memory allocation.', 'comment_created': datetime.datetime(2022, 9, 12, 8, 29, 30, tzinfo=datetime.timezone.utc), 'commenter': 'BenBE', 'type': 'User'}, {'comment_id': 968131129, 'comment_body': '```suggestion\r\n   (void)choice;\r\n```', 'comment_created': datetime.datetime(2022, 9, 12, 8, 30, 49, tzinfo=datetime.timezone.utc), 'commenter': 'BenBE', 'type': 'User'}, {'comment_id': 968131764, 'comment_body': '```suggestion\r\n   (void)choice;\r\n   (void)buffer;\r\n   (void)size;\r\n```', 'comment_created': datetime.datetime(2022, 9, 12, 8, 31, 26, tzinfo=datetime.timezone.utc), 'commenter': 'BenBE', 'type': 'User'}, {'comment_id': 968132023, 'comment_body': '```suggestion\r\n   (void)choice;\r\n   (void)data;\r\n```', 'comment_created': datetime.datetime(2022, 9, 12, 8, 31, 40, tzinfo=datetime.timezone.utc), 'commenter': 'BenBE', 'type': 'User'}, {'comment_id': 968132760, 'comment_body': '```suggestion\r\n   (void)choice;\r\n   (void)buffer;\r\n   (void)size;\r\n```', 'comment_created': datetime.datetime(2022, 9, 12, 8, 32, 27, tzinfo=datetime.timezone.utc), 'commenter': 'BenBE', 'type': 'User'}, {'comment_id': 969147700, 'comment_body': ""@smalinux I think we don't need this function - we have already done a descriptor lookup of each metric during initialization, and they're stashed off the main Platform structure for PCP.  It's better to use the cached values since pmLookupName and pmLookupDesc here involve round-trips to pmcd.  I'll send through some small cleanups including this little improvement shortly."", 'comment_created': datetime.datetime(2022, 9, 13, 4, 52, 6, tzinfo=datetime.timezone.utc), 'commenter': 'natoscott', 'type': 'User'}, {'comment_id': 969149943, 'comment_body': ""Still need to do something for each of these.  It makes me wonder though, for PCP we have all of the component instance names readily available to us for a meter - could we make a generic implementation of getChoices() for PCP and have every meter that uses metrics with an instance domain be one of these 'choice' meters, automatically?"", 'comment_created': datetime.datetime(2022, 9, 13, 4, 57, 22, tzinfo=datetime.timezone.utc), 'commenter': 'natoscott', 'type': 'User'}, {'comment_id': 969158422, 'comment_body': ""> could we make a generic implementation of getChoices() for PCP and have every meter that uses metrics with an instance domain be one of these 'choice' meters, automatically?\r\n\r\nSorry, I don't understand this part! I have a generic function that returns all the choices here:\r\n(that is actually return the external instance name list)\r\nhttps://github.com/htop-dev/htop/blob/7d6d345e286fe890cd504be7522a02ed76bee8c8/DynamicMeter.c#L132\r\nhttps://github.com/htop-dev/htop/blob/7d6d345e286fe890cd504be7522a02ed76bee8c8/pcp/Platform.c#L869\r\nhttps://github.com/htop-dev/htop/blob/7d6d345e286fe890cd504be7522a02ed76bee8c8/pcp/PCPDynamicMeter.c#L480\r\n"", 'comment_created': datetime.datetime(2022, 9, 13, 5, 15, 40, tzinfo=datetime.timezone.utc), 'commenter': 'smalinux', 'type': 'User'}, {'comment_id': 969159185, 'comment_body': 'and the `curChoice` got saved in htoprc...', 'comment_created': datetime.datetime(2022, 9, 13, 5, 17, 18, tzinfo=datetime.timezone.utc), 'commenter': 'smalinux', 'type': 'User'}, {'comment_id': 969163784, 'comment_body': '@smalinux aha, right you are - so the remaining piece then is those TODO items in the code relating to specific meters like network/hostname ... can we just call Platform_getDynamicMeterChoices there too?', 'comment_created': datetime.datetime(2022, 9, 13, 5, 26, 56, tzinfo=datetime.timezone.utc), 'commenter': 'natoscott', 'type': 'User'}, {'comment_id': 969174797, 'comment_body': '> ... can we just call Platform_getDynamicMeterChoices there too?\r\n\r\nI do not think so! these Meters (network/hostname) depend on these Metrics: https://github.com/htop-dev/htop/pull/200#discussion_r907890905\r\nI think I should provide a static implementation for them like any normal Meter... like this: #992\r\n\r\nor we could ignore these TODO items completely and provide the same Meters as DynamicMeters via pcp/meters/ config files...', 'comment_created': datetime.datetime(2022, 9, 13, 5, 48, 3, tzinfo=datetime.timezone.utc), 'commenter': 'smalinux', 'type': 'User'}, {'comment_id': 971411879, 'comment_body': '@natoscott done!', 'comment_created': datetime.datetime(2022, 9, 15, 0, 36, 44, tzinfo=datetime.timezone.utc), 'commenter': 'smalinux', 'type': 'User'}]","[{'commit_sha': 'caeb7dd13d6538369630a45071f5ca0e76949300', 'committer_username': 'cgzones', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2013, 12, 7, 20, 28, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fbedffae4a0f5e6e9c65386bd91c887e2f23dedd', 'committer_username': 'cgzones', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2013, 12, 7, 20, 28, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '99cbcd4fb1a248de1a477539ddc3ad3379ad12cf', 'committer_username': 'cgzones', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2013, 12, 7, 20, 28, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8125aad882b2135bea6312d997ebd19e05afed73', 'committer_username': 'cgzones', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2013, 12, 7, 20, 28, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3ff4a40f7a49717e0c8d0ee9bb877cededeec19d', 'committer_username': 'cgzones', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2013, 12, 7, 20, 28, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '40a2bd530d8e1dd946fa8f8dea568876ba75b754', 'committer_username': 'cgzones', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2013, 12, 7, 20, 28, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '05b9ec9e7f8fe8872625a2da78432101e3cae39f', 'committer_username': 'cgzones', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2013, 12, 7, 20, 28, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '864117d050295c909cdce6fbd1c2dcbcd58521b1', 'committer_username': 'cgzones', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2013, 12, 7, 20, 28, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '24fd99800bdc25e39020faee16c0460b701dd2b9', 'committer_username': 'smalinux', 'committer_name': 'Sohaib Mohamed', 'committer_email': None, 'commit_date': datetime.datetime(2014, 7, 17, 23, 59, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2f005cc2a19815a21e86d59357e6c7f4b694b518', 'committer_username': 'natoscott', 'committer_name': 'Nathan Scott', 'committer_email': None, 'commit_date': datetime.datetime(2011, 8, 5, 4, 23, 27, tzinfo=datetime.timezone.utc)}]",Sohaib Mohamed,8196176,,User,,124,,57,159
1065267034,pmdabpf: add CO-RE biosnoop,,True,1679,https://api.github.com/repos/performancecopilot/pcp/pulls/1679,https://github.com/performancecopilot/pcp/pull/1679,closed,217495,98248,82,3,0,0,0,0,[],2022-09-23 12:31:45+00:00,2022-09-26 05:05:58+00:00,232453.0,"2 days, 16:34:13",[],"[{'commit_sha': 'edbd1d9e9dc5aacb6a36dd4fb2e83a2578c1c596', 'committer_username': 'smalinux', 'committer_name': 'Sohaib Mohamed', 'committer_email': None, 'commit_date': datetime.datetime(2014, 7, 17, 23, 59, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cbd2376707a6ea0bd1c5f44c5b408ad709a8e0a6', 'committer_username': 'smalinux', 'committer_name': 'Sohaib Mohamed', 'committer_email': None, 'commit_date': datetime.datetime(2014, 7, 17, 23, 59, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a29b96855b231f6e180139e41388dc1d44d1c1ca', 'committer_username': 'smalinux', 'committer_name': 'Sohaib Mohamed', 'committer_email': None, 'commit_date': datetime.datetime(2014, 7, 17, 23, 59, 52, tzinfo=datetime.timezone.utc)}]",Sohaib Mohamed,8196176,,User,,124,,57,159

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
23028937,pcp,performancecopilot/pcp,C,234,958,52,237,32004,159,6,16,"[{'id': 1118994725, 'number': 1712, 'closed': datetime.datetime(2022, 11, 16, 22, 19, 4, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 11, 11, 11, 40, 37, tzinfo=datetime.timezone.utc), 'time_taken': 470307.0, 'time_delta': '5 days, 10:38:27', 'additions': 2, 'deletions': 2, 'state': 'closed'}, {'id': 1065267034, 'number': 1679, 'closed': datetime.datetime(2022, 9, 26, 5, 5, 58, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 9, 23, 12, 31, 45, tzinfo=datetime.timezone.utc), 'time_taken': 232453.0, 'time_delta': '2 days, 16:34:13', 'additions': 217495, 'deletions': 98248, 'state': 'closed'}, {'id': 972710256, 'number': 1612, 'closed': datetime.datetime(2022, 8, 11, 10, 5, 52, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 6, 20, 23, 6, 1, tzinfo=datetime.timezone.utc), 'time_taken': 4445991.0, 'time_delta': '51 days, 10:59:51', 'additions': 6385, 'deletions': 88, 'state': 'closed'}, {'id': 953827695, 'number': 1607, 'closed': datetime.datetime(2022, 6, 2, 23, 49, 43, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 6, 1, 12, 50, 18, tzinfo=datetime.timezone.utc), 'time_taken': 125965.0, 'time_delta': '1 day, 10:59:25', 'additions': 11, 'deletions': 0, 'state': 'closed'}, {'id': 949392271, 'number': 1604, 'closed': datetime.datetime(2022, 5, 30, 23, 21, 48, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 5, 27, 14, 54, 26, tzinfo=datetime.timezone.utc), 'time_taken': 289642.0, 'time_delta': '3 days, 8:27:22', 'additions': 209, 'deletions': 78, 'state': 'closed'}, {'id': 885088138, 'number': 1565, 'closed': datetime.datetime(2022, 5, 13, 19, 52, 43, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 3, 21, 17, 5, 57, tzinfo=datetime.timezone.utc), 'time_taken': 4589206.0, 'time_delta': '53 days, 2:46:46', 'additions': 727, 'deletions': 331100, 'state': 'closed'}, {'id': 628259927, 'number': 1251, 'closed': datetime.datetime(2021, 5, 1, 11, 10, 1, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 4, 30, 22, 38, 31, tzinfo=datetime.timezone.utc), 'time_taken': 45090.0, 'time_delta': '12:31:30', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 577001245, 'number': 1218, 'closed': datetime.datetime(2021, 2, 22, 3, 41, 26, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 2, 20, 20, 22, 50, tzinfo=datetime.timezone.utc), 'time_taken': 112716.0, 'time_delta': '1 day, 7:18:36', 'additions': 341, 'deletions': 1, 'state': 'closed'}, {'id': 576996708, 'number': 1217, 'closed': datetime.datetime(2021, 2, 22, 3, 41, 26, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 2, 20, 19, 45, 37, tzinfo=datetime.timezone.utc), 'time_taken': 114949.0, 'time_delta': '1 day, 7:55:49', 'additions': 3, 'deletions': 0, 'state': 'closed'}, {'id': 573939890, 'number': 1213, 'closed': datetime.datetime(2021, 2, 16, 6, 45, 16, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 2, 16, 5, 40, 19, tzinfo=datetime.timezone.utc), 'time_taken': 3897.0, 'time_delta': '1:04:57', 'additions': 103, 'deletions': 0, 'state': 'closed'}]"
288082909,htop,htop-dev/htop,C,423,6245,61,210,3162,273,1,48,"[{'id': 1078124103, 'number': 1102, 'closed': datetime.datetime(2023, 6, 19, 6, 18, 57, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 10, 6, 2, 47, 16, tzinfo=datetime.timezone.utc), 'time_taken': 22131101.0, 'time_delta': '256 days, 3:31:41', 'additions': 2131, 'deletions': 82, 'state': 'closed'}, {'id': 1052932775, 'number': 1081, 'closed': None, 'created': datetime.datetime(2022, 9, 12, 8, 1, 57, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 1921, 'deletions': 125, 'state': 'open'}, {'id': 927338524, 'number': 992, 'closed': datetime.datetime(2023, 3, 24, 23, 40, 45, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 5, 4, 8, 0, 43, tzinfo=datetime.timezone.utc), 'time_taken': 28050002.0, 'time_delta': '324 days, 15:40:02', 'additions': 154, 'deletions': 0, 'state': 'closed'}, {'id': 773479007, 'number': 867, 'closed': datetime.datetime(2021, 11, 4, 22, 13, 39, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 11, 4, 16, 27, 35, tzinfo=datetime.timezone.utc), 'time_taken': 20764.0, 'time_delta': '5:46:04', 'additions': 4, 'deletions': 4, 'state': 'closed'}, {'id': 746195606, 'number': 823, 'closed': datetime.datetime(2021, 10, 1, 13, 1, 52, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 9, 29, 22, 57, 51, tzinfo=datetime.timezone.utc), 'time_taken': 137041.0, 'time_delta': '1 day, 14:04:01', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 712844955, 'number': 743, 'closed': datetime.datetime(2021, 8, 16, 15, 23, 8, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 14, 22, 36, 28, tzinfo=datetime.timezone.utc), 'time_taken': 146800.0, 'time_delta': '1 day, 16:46:40', 'additions': 527, 'deletions': 463, 'state': 'closed'}, {'id': 695662466, 'number': 707, 'closed': datetime.datetime(2021, 8, 13, 5, 58, 39, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 23, 4, 35, 1, tzinfo=datetime.timezone.utc), 'time_taken': 1819418.0, 'time_delta': '21 days, 1:23:38', 'additions': 1063, 'deletions': 174, 'state': 'closed'}, {'id': 695635675, 'number': 706, 'closed': datetime.datetime(2021, 7, 23, 3, 50, 32, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 23, 3, 7, 54, tzinfo=datetime.timezone.utc), 'time_taken': 2558.0, 'time_delta': '0:42:38', 'additions': 1570, 'deletions': 628, 'state': 'closed'}, {'id': 692067973, 'number': 702, 'closed': datetime.datetime(2021, 7, 18, 11, 3, 40, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 18, 10, 44, 50, tzinfo=datetime.timezone.utc), 'time_taken': 1130.0, 'time_delta': '0:18:50', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 692048547, 'number': 701, 'closed': datetime.datetime(2021, 7, 18, 8, 28, 53, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 18, 8, 7, 41, tzinfo=datetime.timezone.utc), 'time_taken': 1272.0, 'time_delta': '0:21:12', 'additions': 1, 'deletions': 0, 'state': 'closed'}, {'id': 692027785, 'number': 700, 'closed': datetime.datetime(2021, 7, 18, 7, 36, 59, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 18, 4, 33, 13, tzinfo=datetime.timezone.utc), 'time_taken': 11026.0, 'time_delta': '3:03:46', 'additions': 5, 'deletions': 0, 'state': 'closed'}, {'id': 690329936, 'number': 695, 'closed': datetime.datetime(2021, 7, 15, 2, 11, 10, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 15, 1, 48, 55, tzinfo=datetime.timezone.utc), 'time_taken': 1335.0, 'time_delta': '0:22:15', 'additions': 36, 'deletions': 35, 'state': 'closed'}, {'id': 687087752, 'number': 682, 'closed': datetime.datetime(2021, 7, 12, 8, 7, 14, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 9, 23, 41, 3, tzinfo=datetime.timezone.utc), 'time_taken': 203171.0, 'time_delta': '2 days, 8:26:11', 'additions': 10, 'deletions': 0, 'state': 'closed'}, {'id': 680475508, 'number': 671, 'closed': datetime.datetime(2021, 6, 30, 5, 45, 47, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 30, 2, 2, 16, tzinfo=datetime.timezone.utc), 'time_taken': 13411.0, 'time_delta': '3:43:31', 'additions': 5, 'deletions': 5, 'state': 'closed'}, {'id': 598383383, 'number': 574, 'closed': datetime.datetime(2021, 4, 7, 5, 20, 11, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 3, 22, 22, 35, 25, tzinfo=datetime.timezone.utc), 'time_taken': 1320286.0, 'time_delta': '15 days, 6:44:46', 'additions': 220, 'deletions': 87, 'state': 'closed'}]"
