pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
439925053,Add BaggageContext property to ChannelHandlerContext,"‚ö†Ô∏è This PR is not intended to ever be merged but rather meant as a playground to inspire a ""real"" PR once the `BaggageContext` has matured and was accepted by the SSWG.

Publicly expose a `BaggageContext` through the `ChannelHandlerContext`.

### Motivation:

As already discussed in slashmo/gsoc-swift-tracing#48, in order to share a `BaggageContext` between multiple handlers on the same channel, we want to store a `BaggageContext` on a `Channel`, which is publicly accessible through the `ChannelHandlerContext`.

### Modifications:

- NIO depends on [slashmo/gsoc-swift-baggage-context](https://github.com/slashmo/gsoc-swift-baggage-context)

### Result:

Users of `BaggageContext` and [related APIs](https://github.com/slashmo/gsoc-swift-tracing) will be able to access a `BaggageContext` through the `ChannelHandlerContext`. This has the side-effect of NIO now depending on [slashmo/gsoc-swift-baggage-context](slashmo/gsoc-swift-baggage-context).",False,1574,https://api.github.com/repos/apple/swift-nio/pulls/1574,https://github.com/apple/swift-nio/pull/1574,open,107,1,8,5,13,1,0,0,[],2020-06-25 10:20:28+00:00,,0.0,,"[{'comment_id': 445556107, 'comment_body': ""not sure about usage of DeadChannelCore, but sounds like it may be safer to never store baggage values in here, there's no real purpose to propagate using a dead channel it feels like?"", 'comment_created': datetime.datetime(2020, 6, 25, 13, 26, 6, tzinfo=datetime.timezone.utc), 'commenter': 'ktoso', 'type': 'User'}]","[{'commit_sha': 'df43c9202ae2f4c54135c85a9c5e67d865fd19d6', 'committer_username': 'slashmo', 'committer_name': 'Moritz Lang', 'committer_email': 'hi@slashmo.codes', 'commit_date': datetime.datetime(2015, 12, 7, 15, 3, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7f98af62481bba63a02ead74f7c14c2bb6947b26', 'committer_username': 'slashmo', 'committer_name': 'Moritz Lang', 'committer_email': 'hi@slashmo.codes', 'commit_date': datetime.datetime(2015, 12, 7, 15, 3, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6604efccc7ab882b5e8171f90c60f6916bc30770', 'committer_username': 'slashmo', 'committer_name': 'Moritz Lang', 'committer_email': 'hi@slashmo.codes', 'commit_date': datetime.datetime(2015, 12, 7, 15, 3, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4b7f5de4f6469f92a98a5bfb1d455036d4660486', 'committer_username': 'slashmo', 'committer_name': 'Moritz Lang', 'committer_email': 'hi@slashmo.codes', 'commit_date': datetime.datetime(2015, 12, 7, 15, 3, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ad1bc154f5b6f3e9efcf4f30a61be2e134a4183a', 'committer_username': 'slashmo', 'committer_name': 'Moritz Lang', 'committer_email': 'hi@slashmo.codes', 'commit_date': datetime.datetime(2015, 12, 7, 15, 3, 59, tzinfo=datetime.timezone.utc)}]",Moritz Lang,16192401,hi@slashmo.codes,User,,77,,188,152
462685394,[DO NOT MERGE] Add tracing instrumentation,"Very much WIP.

- Closes slashmo/gsoc-swift-tracing#46
- Closes slashmo/gsoc-swift-tracing#95",False,289,https://api.github.com/repos/swift-server/async-http-client/pulls/289,https://github.com/swift-server/async-http-client/pull/289,open,498,411,7,11,14,28,0,0,[],2020-08-04 10:45:43+00:00,,0.0,,"[{'comment_id': 465111876, 'comment_body': 'for backward compatibility, the context should be optional or have default (static?) value?', 'comment_created': datetime.datetime(2020, 8, 4, 14, 53, 40, tzinfo=datetime.timezone.utc), 'commenter': 'pokryfka', 'type': 'User'}, {'comment_id': 465113634, 'comment_body': 'should be the (new) span context, no?\r\n\r\n```swift\r\nInstrumentationSystem.instrument.inject(span.context, into: &request.headers, using: HTTPHeadersInjector())\r\n```\r\n', 'comment_created': datetime.datetime(2020, 8, 4, 14, 56, 3, tzinfo=datetime.timezone.utc), 'commenter': 'pokryfka', 'type': 'User'}, {'comment_id': 465118352, 'comment_body': '@ktoso @slashmo could this is be propagated in baggage shared by tracers (??)', 'comment_created': datetime.datetime(2020, 8, 4, 15, 2, 18, tzinfo=datetime.timezone.utc), 'commenter': 'pokryfka', 'type': 'User'}, {'comment_id': 465377875, 'comment_body': 'It should record error if it was failure per https://github.com/slashmo/gsoc-swift-tracing/issues/90', 'comment_created': datetime.datetime(2020, 8, 4, 23, 4, 6, tzinfo=datetime.timezone.utc), 'commenter': 'pokryfka', 'type': 'User'}, {'comment_id': 465380659, 'comment_body': 'other that the http attributes it should set Span Status depending on the httpResponse.status.code,\r\n\r\nOTel provides a table how to map one to the other: https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/trace/semantic_conventions/http.md#status', 'comment_created': datetime.datetime(2020, 8, 4, 23, 12, 44, tzinfo=datetime.timezone.utc), 'commenter': 'pokryfka', 'type': 'User'}, {'comment_id': 465386367, 'comment_body': ""No, contexts should never be defaulted to nothing/empty - that leads to fragile APIs where dropping the traces becomes the default operation, rather than doing the right thing -- keep passing along contexts. We want our APIs to help people do the right thing. Note in a same way, Go's context values must _never_ be defaulted to empty, we're in the same boat.\r\n\r\nIt's another discussion _how and when_ this PR will be merged though; I do strongly believe contexts _must not_ be optional, as that leads to breaking traces accidentally (been there, done that). See discussions in https://forums.swift.org/t/server-distributed-tracing/37464/10 and the guidelines in https://github.com/slashmo/gsoc-swift-baggage-context#argument-namingpositioning"", 'comment_created': datetime.datetime(2020, 8, 4, 23, 30, 59, tzinfo=datetime.timezone.utc), 'commenter': 'ktoso', 'type': 'User'}, {'comment_id': 465390133, 'comment_body': 'Makes sense. This will, however, affect integration in a big way.\r\n\r\nPlease see my comment about an integration branch below.', 'comment_created': datetime.datetime(2020, 8, 4, 23, 43, 43, tzinfo=datetime.timezone.utc), 'commenter': 'pokryfka', 'type': 'User'}, {'comment_id': 465390439, 'comment_body': 'that\'s an interesting question here: so... `deadline` was defaulted in the public API, but on execute it\'s not...\r\nTechnically our rules say ""context last, before defaulted"" so... Technically this would mean `self.execute(.DELETE, url: url, deadline: deadline, context: context)` I wonder if it matters / if it is worth it to be strict about this hm...', 'comment_created': datetime.datetime(2020, 8, 4, 23, 44, 40, tzinfo=datetime.timezone.utc), 'commenter': 'ktoso', 'type': 'User'}, {'comment_id': 465390601, 'comment_body': ""~Sure it will, it breaks API, we're aware.~\r\n\r\nMy wording here was not very nice, sorry about that.\r\n\r\nWhat I mean that this is a PoC branch and it's breaking here. An adoption plan will be laid forward, see https://forums.swift.org/t/the-context-passing-problem/39162/27 (AHC plan incomming there)"", 'comment_created': datetime.datetime(2020, 8, 4, 23, 45, 10, tzinfo=datetime.timezone.utc), 'commenter': 'ktoso', 'type': 'User'}, {'comment_id': 465397355, 'comment_body': 'note that its typically propagated in `X-Forwarded-For` header', 'comment_created': datetime.datetime(2020, 8, 5, 0, 7, 51, tzinfo=datetime.timezone.utc), 'commenter': 'pokryfka', 'type': 'User'}, {'comment_id': 465399850, 'comment_body': 'there is `http.url` attribute in [OTel example](https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/trace/semantic_conventions/http.md#http-client-server-example)\r\n\r\n> \r\n\r\nhttp.url | ""https://example.com:8080/webshop/articles/4?s=1""\r\n-- | --\r\n', 'comment_created': datetime.datetime(2020, 8, 5, 0, 16, 39, tzinfo=datetime.timezone.utc), 'commenter': 'pokryfka', 'type': 'User'}, {'comment_id': 469325974, 'comment_body': '@ktoso @slashmo please have a look and let me know if I understand the context propagation in the same way\r\n\r\nI think you should inject `span.context` not `context`\r\n\r\nSee also https://github.com/pokryfka/aws-xray-sdk-swift#context-propagation', 'comment_created': datetime.datetime(2020, 8, 12, 15, 1, 9, tzinfo=datetime.timezone.utc), 'commenter': 'pokryfka', 'type': 'User'}, {'comment_id': 469662957, 'comment_body': '?', 'comment_created': datetime.datetime(2020, 8, 13, 2, 39, 26, tzinfo=datetime.timezone.utc), 'commenter': 'ktoso', 'type': 'User'}, {'comment_id': 469922526, 'comment_body': 'Updated üëç', 'comment_created': datetime.datetime(2020, 8, 13, 12, 43, 37, tzinfo=datetime.timezone.utc), 'commenter': 'slashmo', 'type': 'User'}, {'comment_id': 469924441, 'comment_body': '```suggestion\r\n// TODO: Comment back in once failure was resolved\r\n//            (""testEventLoopArgument"", testEventLoopArgument),\r\n```', 'comment_created': datetime.datetime(2020, 8, 13, 12, 46, 48, tzinfo=datetime.timezone.utc), 'commenter': 'slashmo', 'type': 'User'}, {'comment_id': 469924578, 'comment_body': '```suggestion\r\n// TODO: Comment back in once failure was resolved\r\n//            (""testRaceNewRequestsVsShutdown"", testRaceNewRequestsVsShutdown),\r\n```', 'comment_created': datetime.datetime(2020, 8, 13, 12, 47, 1, tzinfo=datetime.timezone.utc), 'commenter': 'slashmo', 'type': 'User'}, {'comment_id': 469927630, 'comment_body': 'Needs investigation as it currently leads to a failing precondition. Commented out, for now, to be able to run the full test-suite.', 'comment_created': datetime.datetime(2020, 8, 13, 12, 52, 16, tzinfo=datetime.timezone.utc), 'commenter': 'slashmo', 'type': 'User'}, {'comment_id': 469929195, 'comment_body': 'Needs investigation as it currently leads to a failing assertion. Commented out, for now, to be able to run the full test-suite.', 'comment_created': datetime.datetime(2020, 8, 13, 12, 55, 2, tzinfo=datetime.timezone.utc), 'commenter': 'slashmo', 'type': 'User'}, {'comment_id': 469931644, 'comment_body': 'I guess this should move to `OpenTelemetryInstrumentationSupport`?\r\n\r\nBtw, been thinking if that should be called `OpenTelemetrySemanticConventions`? ', 'comment_created': datetime.datetime(2020, 8, 13, 12, 58, 59, tzinfo=datetime.timezone.utc), 'commenter': 'ktoso', 'type': 'User'}, {'comment_id': 470954179, 'comment_body': 'I think mapping of HTTP status code (UInt) to `SpanStatus` is very much reusable and as such should be provided in `TracingInstrumentation`, sth like\r\n\r\n```swift\r\nSpanStatus(code: UInt, message: String?)\r\n``` \r\n\r\notherwise each library making HTTP calls and not using AHC will need to map it on its own', 'comment_created': datetime.datetime(2020, 8, 15, 8, 28, 39, tzinfo=datetime.timezone.utc), 'commenter': 'pokryfka', 'type': 'User'}, {'comment_id': 471201447, 'comment_body': 'Hah, this reminded me I had an not submitted review here, yeah this seems like a good candidate to move up into OpenTelemetryInstrumentationSupport/OpenTelemetrySemanticConventions üëç ', 'comment_created': datetime.datetime(2020, 8, 17, 2, 28, 22, tzinfo=datetime.timezone.utc), 'commenter': 'ktoso', 'type': 'User'}, {'comment_id': 473114167, 'comment_body': 'Or not such a good candidate after all üòÅüëâ https://github.com/slashmo/gsoc-swift-tracing/issues/134', 'comment_created': datetime.datetime(2020, 8, 19, 15, 23, 57, tzinfo=datetime.timezone.utc), 'commenter': 'slashmo', 'type': 'User'}, {'comment_id': 474547229, 'comment_body': ""I just reread the Otel definition for HTTP client spans. Your correct, the combination of host/scheme/target is not their recommended way for client spans: https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/trace/semantic_conventions/http.md#http-client\n\n> One of the following sets of attributes is required (in order of usual preference unless for a particular web client/framework it is known that some other set is preferable for some reason; all strings must be non-empty):\n\n> - http.url\n> - http.scheme, http.host, http.target\n> - http.scheme, net.peer.name, net.peer.port, http.target\n> - http.scheme, net.peer.ip, net.peer.port, http.target\n\nTherefore I'll be replacing scheme/host/target with the full url. Thanks for pointing this out üëç"", 'comment_created': datetime.datetime(2020, 8, 21, 8, 58, 17, tzinfo=datetime.timezone.utc), 'commenter': 'slashmo', 'type': 'User'}, {'comment_id': 478365468, 'comment_body': 'the context should be updated, see https://github.com/slashmo/gsoc-swift-tracing/issues/126#issuecomment-674630622', 'comment_created': datetime.datetime(2020, 8, 27, 12, 3, 21, tzinfo=datetime.timezone.utc), 'commenter': 'pokryfka', 'type': 'User'}, {'comment_id': 478461213, 'comment_body': '@ktoso @slashmo \r\n\r\nthis updates an instance of logger,\r\nshould it not set requestId in baggage (which then would be used to setup logger)?\r\n\r\notherwise the requestId metadata will be lost in the logger passed via context  ', 'comment_created': datetime.datetime(2020, 8, 27, 14, 27, 32, tzinfo=datetime.timezone.utc), 'commenter': 'pokryfka', 'type': 'User'}, {'comment_id': 478510822, 'comment_body': '(copied from https://github.com/swift-aws/aws-sdk-swift-core/pull/348#discussion_r478508462)\r\n\r\nhow about sth like:\r\n\r\n```swift\r\n    private struct RequestMetadata: CustomStringConvertible {\r\n        var requestId: Int\r\n        var service: String\r\n        var operation: String\r\n\r\n        var description: String {\r\n            ""aws-request-id=\\(requestId) aws-service=\\(service) aws-operation=\\(operation)""\r\n        }\r\n    }\r\n    \r\n    private enum RequestKey: BaggageContextKey {\r\n        typealias Value = RequestMetadata\r\n        var name: String { ""AWSRequest"" }\r\n    }\r\n ```\r\n\r\nthen updating the baggage like:\r\n\r\n```swift\r\ncontext.baggage[RequestKey.self] = RequestMetadata(requestId: Self.globalRequestID.add(1),\r\n    service: serviceConfig.service,\r\n    operation: ""signURL"")\r\n```\r\n\r\ninstead of updating the logger directly (current):\r\n\r\n```swift\r\ncontext.logger = context.logger.attachingRequestId(Self.globalRequestID.add(1), operation: ""signURL"", service: serviceConfig.service)\r\n```', 'comment_created': datetime.datetime(2020, 8, 27, 15, 34, 25, tzinfo=datetime.timezone.utc), 'commenter': 'pokryfka', 'type': 'User'}]","[{'commit_sha': 'd0fac6cb1f8c9380e6f7c5e57558a2930b656202', 'committer_username': 'slashmo', 'committer_name': 'Moritz Lang', 'committer_email': 'hi@slashmo.codes', 'commit_date': datetime.datetime(2015, 12, 7, 15, 3, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5ae42f19887669a8b8aeb5c16c96ef578a20e95b', 'committer_username': 'slashmo', 'committer_name': 'Moritz Lang', 'committer_email': 'hi@slashmo.codes', 'commit_date': datetime.datetime(2015, 12, 7, 15, 3, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7ca5a97b2d80ea083b5a7c5b18804f9043983efa', 'committer_username': 'slashmo', 'committer_name': 'Moritz Lang', 'committer_email': 'hi@slashmo.codes', 'commit_date': datetime.datetime(2015, 12, 7, 15, 3, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6853807ca2b04dc470f4ad98628039715b6d31ed', 'committer_username': 'slashmo', 'committer_name': 'Moritz Lang', 'committer_email': 'hi@slashmo.codes', 'commit_date': datetime.datetime(2015, 12, 7, 15, 3, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'af829158fc64b90068d38e9a723b08edb261b95f', 'committer_username': 'slashmo', 'committer_name': 'Moritz Lang', 'committer_email': 'hi@slashmo.codes', 'commit_date': datetime.datetime(2015, 12, 7, 15, 3, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e9a880fb9f95ef73e7608be203bdb9952ca4944b', 'committer_username': 'slashmo', 'committer_name': 'Moritz Lang', 'committer_email': 'hi@slashmo.codes', 'commit_date': datetime.datetime(2015, 12, 7, 15, 3, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': '01672ed0f802a4c540784e0364f079298d9a7e88', 'committer_username': 'slashmo', 'committer_name': 'Moritz Lang', 'committer_email': 'hi@slashmo.codes', 'commit_date': datetime.datetime(2015, 12, 7, 15, 3, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': '63d0d44aa45bc8661f4f1add32cc17e664e43c0b', 'committer_username': 'slashmo', 'committer_name': 'Moritz Lang', 'committer_email': 'hi@slashmo.codes', 'commit_date': datetime.datetime(2015, 12, 7, 15, 3, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0aa7e5cc760fd6e282219ec685fd0b05a90883e7', 'committer_username': 'slashmo', 'committer_name': 'Moritz Lang', 'committer_email': 'hi@slashmo.codes', 'commit_date': datetime.datetime(2015, 12, 7, 15, 3, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': '094674939a1baea9c9abf0fad2da494db1acca5b', 'committer_username': 'slashmo', 'committer_name': 'Moritz Lang', 'committer_email': 'hi@slashmo.codes', 'commit_date': datetime.datetime(2015, 12, 7, 15, 3, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1a980759d6faa2f1f72ab76df51d83f4c0af53ae', 'committer_username': 'slashmo', 'committer_name': 'Moritz Lang', 'committer_email': 'hi@slashmo.codes', 'commit_date': datetime.datetime(2015, 12, 7, 15, 3, 59, tzinfo=datetime.timezone.utc)}]",Moritz Lang,16192401,hi@slashmo.codes,User,,77,,188,152
468474330,[DO NOT MERGE] Add tracing instrumentation,This is a WIP for tracing gRPC services. It's meant as a playground for experimenting with how such instrumentation will look like.,False,941,https://api.github.com/repos/grpc/grpc-swift/pulls/941,https://github.com/grpc/grpc-swift/pull/941,closed,411,34,11,12,8,6,0,0,[],2020-08-16 17:46:58+00:00,2024-01-15 10:51:00+00:00,107715842.0,"1246 days, 17:04:02","[{'comment_id': 472150391, 'comment_body': ""FYI: I just filed #942 -- `doNotUse` made it's way over from the old gRPC Swift implementation which in turn came from [here](https://github.com/grpc/grpc/blob/c79bef55ee348c298cbdcc60448d8e70e4972a19/include/grpcpp/impl/codegen/status_code_enum.h#L138). Its purpose was to force a `default` branch, which we should do here."", 'comment_created': datetime.datetime(2020, 8, 18, 12, 42, 4, tzinfo=datetime.timezone.utc), 'commenter': 'glbrntt', 'type': 'User'}, {'comment_id': 472321785, 'comment_body': 'Cool üëç Updated it to use `default` instead.', 'comment_created': datetime.datetime(2020, 8, 18, 16, 22, 55, tzinfo=datetime.timezone.utc), 'commenter': 'slashmo', 'type': 'User'}, {'comment_id': 472335267, 'comment_body': ""This is a great start by the way; please @ me if there's anything you want me to look at specifically :) "", 'comment_created': datetime.datetime(2020, 8, 18, 16, 43, 47, tzinfo=datetime.timezone.utc), 'commenter': 'glbrntt', 'type': 'User'}, {'comment_id': 472764364, 'comment_body': 'Thanks, I appreciate that! üòé', 'comment_created': datetime.datetime(2020, 8, 19, 6, 39, 49, tzinfo=datetime.timezone.utc), 'commenter': 'slashmo', 'type': 'User'}, {'comment_id': 476485159, 'comment_body': ""hmm good question though I guess replace here.\r\ntechnically the same header could be added a few times (is that also true in h2, i dont remember?, but i think for our purposes it's a set()"", 'comment_created': datetime.datetime(2020, 8, 25, 14, 18, 5, tzinfo=datetime.timezone.utc), 'commenter': 'ktoso', 'type': 'User'}, {'comment_id': 476486055, 'comment_body': 'üëç ', 'comment_created': datetime.datetime(2020, 8, 25, 14, 19, 19, tzinfo=datetime.timezone.utc), 'commenter': 'ktoso', 'type': 'User'}]","[{'commit_sha': '12c6c173ed316bd9fa4b9088e4d9e813876151ee', 'committer_username': 'slashmo', 'committer_name': 'Moritz Lang', 'committer_email': 'hi@slashmo.codes', 'commit_date': datetime.datetime(2015, 12, 7, 15, 3, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8b429493dda08bf1caf10109f3e709793bb02a38', 'committer_username': 'slashmo', 'committer_name': 'Moritz Lang', 'committer_email': 'hi@slashmo.codes', 'commit_date': datetime.datetime(2015, 12, 7, 15, 3, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0b0f854ff86c5ed18eda1fe84642fabf9e1ad626', 'committer_username': 'slashmo', 'committer_name': 'Moritz Lang', 'committer_email': 'hi@slashmo.codes', 'commit_date': datetime.datetime(2015, 12, 7, 15, 3, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dba6fe4aa80bf17bf6f85e42ea84d3634524ca79', 'committer_username': 'slashmo', 'committer_name': 'Moritz Lang', 'committer_email': 'hi@slashmo.codes', 'commit_date': datetime.datetime(2015, 12, 7, 15, 3, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9fa770e3106d74b1b8254caf52957ea829cb72e0', 'committer_username': 'slashmo', 'committer_name': 'Moritz Lang', 'committer_email': 'hi@slashmo.codes', 'commit_date': datetime.datetime(2015, 12, 7, 15, 3, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5dc49072cb55422711515469913a07dceca02be0', 'committer_username': 'slashmo', 'committer_name': 'Moritz Lang', 'committer_email': 'hi@slashmo.codes', 'commit_date': datetime.datetime(2015, 12, 7, 15, 3, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': '153f6065986e08c1f05676e8ad991b1e11ac45a6', 'committer_username': 'slashmo', 'committer_name': 'Moritz Lang', 'committer_email': 'hi@slashmo.codes', 'commit_date': datetime.datetime(2015, 12, 7, 15, 3, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ca9ebd54d43cb482a3e3f959561daa94cc08135c', 'committer_username': 'slashmo', 'committer_name': 'Moritz Lang', 'committer_email': 'hi@slashmo.codes', 'commit_date': datetime.datetime(2015, 12, 7, 15, 3, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': '45210a7ebd64a9895059c59adf6727f4732f68b6', 'committer_username': 'slashmo', 'committer_name': 'Moritz Lang', 'committer_email': 'hi@slashmo.codes', 'commit_date': datetime.datetime(2015, 12, 7, 15, 3, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a7816b462b2e9461194b51259cca18a2f88dc973', 'committer_username': 'slashmo', 'committer_name': 'Moritz Lang', 'committer_email': 'hi@slashmo.codes', 'commit_date': datetime.datetime(2015, 12, 7, 15, 3, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd252c4fe3749b38c0a576036fb4845d959e4f355', 'committer_username': 'slashmo', 'committer_name': 'Moritz Lang', 'committer_email': 'hi@slashmo.codes', 'commit_date': datetime.datetime(2015, 12, 7, 15, 3, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6590980965229d9f4876a147ffdc890e757f2964', 'committer_username': 'slashmo', 'committer_name': 'Moritz Lang', 'committer_email': 'hi@slashmo.codes', 'commit_date': datetime.datetime(2015, 12, 7, 15, 3, 59, tzinfo=datetime.timezone.utc)}]",Moritz Lang,16192401,hi@slashmo.codes,User,,77,,188,152
453295695,feat: create XRayInstrument,,False,16,https://api.github.com/repos/pokryfka/aws-xray-sdk-swift/pulls/16,https://github.com/pokryfka/aws-xray-sdk-swift/pull/16,open,9121,49,17,52,8,45,0,0,[],2020-07-20 10:21:40+00:00,,0.0,,"[{'comment_id': 457442882, 'comment_body': 'Here\'s a little snippet of how this could look like:\r\n\r\n```swift\r\nprivate enum AmazonTraceIDKey: BaggageContextKey {\r\n    typealias Value = String\r\n}\r\n\r\nextension BaggageContext {\r\n    var xRayTraceID: String? {\r\n        get {\r\n            self[AmazonTraceIDKey.self]\r\n        }\r\n        set {\r\n            self[AmazonTraceIDKey.self] = newValue\r\n        }\r\n    }\r\n}\r\n\r\n// extract\r\nif let traceID = extractor.extract(key: ""X-Amzn-Trace-Id"", from: carrier) {\r\n    baggage.xRayTraceID = traceID\r\n}\r\n\r\n// inject\r\nif let traceID = baggage.xRayTraceID {\r\n    injector.inject(traceID, forKey: ""X-Amzn-Trace-Id"", into: &carrier)\r\n}\r\n```\r\n\r\nInstead of storing a plain `String` in the context, I could also imagine it being your ID-Type provided you can initialize it with a `String` and convert it to a `String` so that it can be used in the injector/extractor APIs.', 'comment_created': datetime.datetime(2020, 7, 20, 14, 33, 34, tzinfo=datetime.timezone.utc), 'commenter': 'slashmo', 'type': 'User'}, {'comment_id': 457445587, 'comment_body': '+1 \r\nHere we could look at whether the context contains a parent id to create a subsegment if needed.', 'comment_created': datetime.datetime(2020, 7, 20, 14, 36, 21, tzinfo=datetime.timezone.utc), 'commenter': 'slashmo', 'type': 'User'}, {'comment_id': 457580397, 'comment_body': ""> To avoid continuous back and forth copying of data between ‚Äúmetadata containers‚Äù it would be optimal for specific tracer implementations to depend on\xa0Baggage\xa0and have it be the storage for span identifiers and such\r\n@ktoso\r\n\r\nOther than performance this also has the potential benefit of using XRay-agnostic libraries to pass around the `BaggageContext`. For that to work, we'd have to have `baggage` be a stored property on `Segment`. Would that be okay with you? The actual `Instrument` on the other hand could still be implemented in a separate library so that the main library wouldn't need to depend on `Instrumentation`."", 'comment_created': datetime.datetime(2020, 7, 20, 17, 38, 10, tzinfo=datetime.timezone.utc), 'commenter': 'slashmo', 'type': 'User'}, {'comment_id': 457585335, 'comment_body': ""While poking around I bridged `Annotations` <-> `SpanAttributes` like this. Note that I had access to `_annotations` as I added this to the `Segment` file directly. If the `TracingInstrument` and `Span` conformance ends up in a separate library there'd have to be a way to access the annotations. One way would be to create a `forEach` similar to what we have [in the `SpanAttributes` type](https://github.com/slashmo/gsoc-swift-tracing/blob/main/Sources/Instrumentation/Tracing/Span.swift#L193).\r\n\r\n```swift\r\npublic var attributes: SpanAttributes {\r\n    get {\r\n        SpanAttributes(self._annotations.mapValues(SpanAttribute.init))\r\n    }\r\n    set(attributes) {\r\n        attributes.forEach { key, attribute in\r\n            self.setAnnotation(key, attribute: attribute)\r\n        }\r\n    }\r\n}\r\n\r\nextension SpanAttribute {\r\n    init(_ annotationValue: XRayRecorder.Segment.AnnotationValue) {\r\n        switch annotationValue {\r\n        case let .string(string):\r\n            self = .string(string)\r\n        case let .bool(bool):\r\n            self = .bool(bool)\r\n        case let .float(float):\r\n            self = .double(Double(float))\r\n        case let .int(int):\r\n            self = .int(int)\r\n        }\r\n    }\r\n}\r\n\r\nextension XRayRecorder.Segment {\r\n    func setAnnotation(_ key: String, attribute: SpanAttribute) {\r\n        switch attribute {\r\n        case let .string(string):\r\n            self.setAnnotation(key, value: string)\r\n        case let .int(int):\r\n            self.setAnnotation(key, value: int)\r\n        case let .double(double):\r\n            self.setAnnotation(key, value: Float(double))\r\n        case let .bool(bool):\r\n            self.setAnnotation(key, value: bool)\r\n        case let .stringConvertible(stringConvertible):\r\n            self.setAnnotation(key, value: String(describing: stringConvertible))\r\n        case .array:\r\n            break\r\n        }\r\n    }\r\n}\r\n```"", 'comment_created': datetime.datetime(2020, 7, 20, 17, 46, 39, tzinfo=datetime.timezone.utc), 'commenter': 'slashmo', 'type': 'User'}, {'comment_id': 457586479, 'comment_body': ""We might consider returning a `SpanLink` instance if there's a `traceId`. Not sure though what's the benefit of that. cc @ktoso"", 'comment_created': datetime.datetime(2020, 7, 20, 17, 48, 41, tzinfo=datetime.timezone.utc), 'commenter': 'slashmo', 'type': 'User'}, {'comment_id': 457748060, 'comment_body': 'my TODO at the moment as far as the baggage is concerned:\r\n\r\n- define Context type, this will be equivalent of the TracingHeader but it feels weird to use ""TracingHeader"" in Segment\r\n- add attribute of Context type to subsegment (will contain traceId, optionally parent and samplng decision which are separate attributes at the moment; the sampling decision is related with isRecording defined in Span)\r\n- the Context type should eventually be the BaggageContext though it may be in 2nd iteration of changes', 'comment_created': datetime.datetime(2020, 7, 20, 23, 29, 10, tzinfo=datetime.timezone.utc), 'commenter': 'pokryfka', 'type': 'User'}, {'comment_id': 457751470, 'comment_body': ""Thank you for the snippet - useful!\r\n\r\nI think I'd like the `Value` type to be a `RawRepresentable` (with Raw type String) struct if that makes sense (?) - will get familiar with `BaggageContext` later on."", 'comment_created': datetime.datetime(2020, 7, 20, 23, 40, 26, tzinfo=datetime.timezone.utc), 'commenter': 'pokryfka', 'type': 'User'}, {'comment_id': 457827599, 'comment_body': '@slashmo \r\n\r\nnot sure if DispatchTime is the best choice here as it uses relative uptime\r\nXRayRecorder.Segment internally uses DispatchWallTime,\r\ncurrently it exposes seconds since which used to be internal', 'comment_created': datetime.datetime(2020, 7, 21, 4, 22, 45, tzinfo=datetime.timezone.utc), 'commenter': 'pokryfka', 'type': 'User'}, {'comment_id': 457828006, 'comment_body': '@slashmo ?', 'comment_created': datetime.datetime(2020, 7, 21, 4, 24, 28, tzinfo=datetime.timezone.utc), 'commenter': 'pokryfka', 'type': 'User'}, {'comment_id': 457828748, 'comment_body': '@slashmo not sure it should be exposed, but thats what arguably every instrument will need to do\r\n\r\nin case of containers this will probably need to be called just before program exists,\r\nin case of Lambda - events need to be flushed while the lambda is running\r\n\r\n\r\nthe recorder currently exposes ""NIO"" flush:\r\n\r\n```swift\r\n    public func flush(on eventLoop: EventLoop) -> EventLoopFuture<Void> {\r\n```\r\n\r\nas well as blocking wait without NIO dependency:\r\n\r\n```swift\r\n    public func wait(_ callback: ((Error?) -> Void)? = nil) {\r\n\r\n```', 'comment_created': datetime.datetime(2020, 7, 21, 4, 27, 32, tzinfo=datetime.timezone.utc), 'commenter': 'pokryfka', 'type': 'User'}, {'comment_id': 457924581, 'comment_body': ""Does the bridging here make sense with XRay's semantics (I don't know :-))?\r\n\r\nAnd extra question, if it does, the current xray seems to only define `float` but not `double`s is this on purpose following some xray roles or an omission?\r\n\r\nIt'd cause this potential trouble: `           self.setAnnotation(key, value: Float(double))` when invoked through the generic API."", 'comment_created': datetime.datetime(2020, 7, 21, 8, 25, 14, tzinfo=datetime.timezone.utc), 'commenter': 'ktoso', 'type': 'User'}, {'comment_id': 457955388, 'comment_body': ""Whoops we messed up here, you're right it should be based on `DispatchWallTime`, fixing.\r\nI think I'll hide it as a Timestamp type though, so people don't need to import dispatch _too_ to use the tracing APIs."", 'comment_created': datetime.datetime(2020, 7, 21, 9, 16, 59, tzinfo=datetime.timezone.utc), 'commenter': 'ktoso', 'type': 'User'}, {'comment_id': 457962432, 'comment_body': 'Fixed in https://github.com/slashmo/gsoc-swift-tracing/pull/82 thanks again', 'comment_created': datetime.datetime(2020, 7, 21, 9, 28, 37, tzinfo=datetime.timezone.utc), 'commenter': 'ktoso', 'type': 'User'}, {'comment_id': 457965303, 'comment_body': 'Note this PR about timestamps: https://github.com/slashmo/gsoc-swift-tracing/pull/82', 'comment_created': datetime.datetime(2020, 7, 21, 9, 33, 25, tzinfo=datetime.timezone.utc), 'commenter': 'ktoso', 'type': 'User'}, {'comment_id': 457965919, 'comment_body': 'üëç ', 'comment_created': datetime.datetime(2020, 7, 21, 9, 34, 29, tzinfo=datetime.timezone.utc), 'commenter': 'ktoso', 'type': 'User'}, {'comment_id': 457967406, 'comment_body': ""I'm not sure tracing instrument needs to  indicate how to deal with that, various tracers can do various things.\r\n\r\n> AWS_XRAY_CONTEXT_MISSING ‚Äì Set to LOG_ERROR to avoid throwing exceptions when your instrumented code attempts to record data when no segment is open.\r\n> \r\n> - RUNTIME_ERROR ‚Äì Throw a runtime exception (default).\r\n> - LOG_ERROR ‚Äì Log an error and continue.\r\n\r\nthe throwing is an interesting question... It's a bit annoying to make those funcs throwing to be honest... WDYT?"", 'comment_created': datetime.datetime(2020, 7, 21, 9, 37, 6, tzinfo=datetime.timezone.utc), 'commenter': 'ktoso', 'type': 'User'}, {'comment_id': 457968994, 'comment_body': ""> the Context type should eventually be the BaggageContext though it may be in 2nd iteration of changes\r\n\r\nYeah that should be the goal IMO; let us know if you'd like us to tag the baggage, we could also rename its package to skip the gsoc- already I think"", 'comment_created': datetime.datetime(2020, 7, 21, 9, 39, 54, tzinfo=datetime.timezone.utc), 'commenter': 'ktoso', 'type': 'User'}, {'comment_id': 457970212, 'comment_body': ""Could you handle this in the recorder's shutdown?\r\n\r\nWe'd offer a `shutdown(...)` on the tracing SPI which is the general thing we're after, rather than exposing a flush;\r\n\r\nGenerally following the spec:\r\n\r\n\r\n> ### Shutdown and explicit flushing could block\r\n> \r\n> The language library could block the end-user application when it shut down. On shutdown, it has to flush data to prevent information loss. The language library should support user-configurable timeout if it blocks on shut down.\r\n> \r\n> If the language library supports an explicit flush operation, it could block also. But should support a configurable timeout.\r\n"", 'comment_created': datetime.datetime(2020, 7, 21, 9, 41, 56, tzinfo=datetime.timezone.utc), 'commenter': 'ktoso', 'type': 'User'}, {'comment_id': 458048243, 'comment_body': ""> And extra question, if it does, the current xray seems to only define float but not doubles is this on purpose following some xray roles or an omission?\r\n> It'd cause this potential trouble: self.setAnnotation(key, value: Float(double)) when invoked through the generic API.\r\n\r\nthat's a omission, also please check https://github.com/slashmo/gsoc-swift-tracing/issues/83"", 'comment_created': datetime.datetime(2020, 7, 21, 12, 11, 24, tzinfo=datetime.timezone.utc), 'commenter': 'pokryfka', 'type': 'User'}, {'comment_id': 458064501, 'comment_body': '@ktoso\r\n\r\n> Could you handle this in the recorder\'s shutdown?\r\n\r\nyes for ""services"" (Vapor, Kitara, ...)\r\n\r\nhowever in case of ""lambda runtime"", my understanding is that we do need to emit all the segments during event handling (event though it will make the request handling longer) because otherwise lambda may be suspended (and potentially never wake up again) before emitting finishes, example:\r\n\r\n```swift\r\nprivate struct ExampleLambdaHandler: EventLoopLambdaHandler {\r\n    typealias In = Cloudwatch.ScheduledEvent\r\n    typealias Out = Void\r\n\r\n    private let recorder = XRayRecorder()\r\n\r\n    private func doWork(on eventLoop: EventLoop) -> EventLoopFuture<Void> {\r\n        eventLoop.submit { usleep(100_000) }.map { _ in }\r\n    }\r\n\r\n    func handle(context: Lambda.Context, event: In) -> EventLoopFuture<Void> {\r\n        recorder.segment(name: ""ExampleLambdaHandler"", context: context) {\r\n            self.doWork(on: context.eventLoop)\r\n        }.flatMap {\r\n            self.recorder.flush(on: context.eventLoop)\r\n        }\r\n    }\r\n}\r\n\r\nLambda.run(ExampleLambdaHandler())\r\n```\r\n\r\nto be honest, while my explanation above does make sense to me, I do plan checking more in details how its implemented/enforced in ""official"" XRay SDKs;\r\n\r\nalso note that while in case of XRay emitting = sending UDP in local network, which should be comparatively inexpensive and may be finished (subject of more testing) before lambda is suspended even without explicit flushing;\r\nemitting spans using different `TracingInstrument` in lambda handler will be typically much mroe expensive and will take more time;', 'comment_created': datetime.datetime(2020, 7, 21, 12, 41, 1, tzinfo=datetime.timezone.utc), 'commenter': 'pokryfka', 'type': 'User'}, {'comment_id': 458490375, 'comment_body': ""let's follow up on https://github.com/slashmo/gsoc-swift-tracing/issues/85"", 'comment_created': datetime.datetime(2020, 7, 22, 2, 4, 28, tzinfo=datetime.timezone.utc), 'commenter': 'pokryfka', 'type': 'User'}, {'comment_id': 459211458, 'comment_body': 'this breaks one of the tests, will revisit in the evening', 'comment_created': datetime.datetime(2020, 7, 23, 4, 43, 46, tzinfo=datetime.timezone.utc), 'commenter': 'pokryfka', 'type': 'User'}, {'comment_id': 459211596, 'comment_body': '!', 'comment_created': datetime.datetime(2020, 7, 23, 4, 44, 18, tzinfo=datetime.timezone.utc), 'commenter': 'pokryfka', 'type': 'User'}, {'comment_id': 459213322, 'comment_body': 'for testing purposes will log event as both subsegment and metadata,\r\nplanning to make it configurable with some env and document in README', 'comment_created': datetime.datetime(2020, 7, 23, 4, 51, 43, tzinfo=datetime.timezone.utc), 'commenter': 'pokryfka', 'type': 'User'}, {'comment_id': 459213453, 'comment_body': 'also storing links as metadata\r\n', 'comment_created': datetime.datetime(2020, 7, 23, 4, 52, 31, tzinfo=datetime.timezone.utc), 'commenter': 'pokryfka', 'type': 'User'}, {'comment_id': 459260355, 'comment_body': ""Not sure why a cast to `HTTPHeaders` and `HTTPHeadersExtractor` is necessary. That way you'll limit the use cases of your instrument to just HTTP headers."", 'comment_created': datetime.datetime(2020, 7, 23, 7, 25, 24, tzinfo=datetime.timezone.utc), 'commenter': 'slashmo', 'type': 'User'}, {'comment_id': 459260875, 'comment_body': 'Same thing for `inject`. Why the cast to `HTTPHeaders`?', 'comment_created': datetime.datetime(2020, 7, 23, 7, 26, 43, tzinfo=datetime.timezone.utc), 'commenter': 'slashmo', 'type': 'User'}, {'comment_id': 459275113, 'comment_body': 'üíØ \r\n\r\nyou are absolutely right, I think Xcode had some type resolving problems when I was writing it\r\nremoved casting and works now, plus it fixed the unit test :-)', 'comment_created': datetime.datetime(2020, 7, 23, 7, 57, 21, tzinfo=datetime.timezone.utc), 'commenter': 'pokryfka', 'type': 'User'}, {'comment_id': 459325539, 'comment_body': 'fixed, thanks!', 'comment_created': datetime.datetime(2020, 7, 23, 9, 31, 26, tzinfo=datetime.timezone.utc), 'commenter': 'pokryfka', 'type': 'User'}, {'comment_id': 459333831, 'comment_body': 'Nice, glad to see this part of the API turned out useful üòä', 'comment_created': datetime.datetime(2020, 7, 23, 9, 47, 9, tzinfo=datetime.timezone.utc), 'commenter': 'slashmo', 'type': 'User'}, {'comment_id': 459588564, 'comment_body': '@slashmo created a simple example, we do need HTTP client for full demo ;-)\r\n\r\n```\r\n2020-07-24T00:44:47+0800 info xray.recorder.fb8fcf5e : Segment de3cbcd15bad637b ended @ 1595522687.695928\r\n2020-07-24T00:44:47+0800 debug xray.recorder.fb8fcf5e : Segment de3cbcd15bad637b parent has not been sent\r\n2020-07-24T00:44:47+0800 info xray.recorder.fb8fcf5e : Segment aaa77a1bb787f81d ended @ 1595522687.696883\r\n2020-07-24T00:44:47+0800 info xray.recorder.fb8fcf5e : Segment aaa77a1bb787f81d emitted @ 1595522687.696967\r\n2020-07-24T00:44:47+0800 info xray.recorder.fb8fcf5e : Segment b16ba007e58ea1ac ended @ 1595522687.696969\r\n2020-07-24T00:44:47+0800 debug xray.recorder.fb8fcf5e : Segment aaa77a1bb787f81d has 0 subsegments inProgress\r\n2020-07-24T00:44:47+0800 info xray.log_emitter.d0ec65f4 : \r\n{\r\n  ""service"" : {\r\n    ""version"" : ""aws-xray-sdk-swift""\r\n  },\r\n  ""end_time"" : 1595522687.696883,\r\n  ""subsegments"" : [\r\n    {\r\n      ""end_time"" : 1595522687.6959281,\r\n      ""id"" : ""de3cbcd15bad637b"",\r\n      ""start_time"" : 1595522687.6959109,\r\n      ""parent_id"" : ""aaa77a1bb787f81d"",\r\n      ""type"" : ""subsegment"",\r\n      ""trace_id"" : ""1-5759e988-bd862e3fe1be46a994272793"",\r\n      ""name"" : ""Event""\r\n    }\r\n  ],\r\n  ""id"" : ""aaa77a1bb787f81d"",\r\n  ""annotations"" : {\r\n    ""key1"" : ""Attribute 1"",\r\n    ""key2"" : ""Attribute 2""\r\n  },\r\n  ""start_time"" : 1595522687.695787,\r\n  ""trace_id"" : ""1-5759e988-bd862e3fe1be46a994272793"",\r\n  ""name"" : ""Span 1""\r\n}\r\n2020-07-24T00:44:47+0800 info xray.recorder.fb8fcf5e : Segment b16ba007e58ea1ac emitted @ 1595522687.702642\r\n2020-07-24T00:44:47+0800 debug xray.recorder.fb8fcf5e : Segment b16ba007e58ea1ac has 0 subsegments inProgress\r\n2020-07-24T00:44:47+0800 info xray.log_emitter.d0ec65f4 : \r\n{\r\n  ""trace_id"" : ""1-5759e988-bd862e3fe1be46a994272793"",\r\n  ""id"" : ""b16ba007e58ea1ac"",\r\n  ""service"" : {\r\n    ""version"" : ""aws-xray-sdk-swift""\r\n  },\r\n  ""name"" : ""Span 2"",\r\n  ""start_time"" : 1595522687.6968629,\r\n  ""end_time"" : 1595522687.696969\r\n}\r\n```', 'comment_created': datetime.datetime(2020, 7, 23, 16, 48, 56, tzinfo=datetime.timezone.utc), 'commenter': 'pokryfka', 'type': 'User'}, {'comment_id': 459664337, 'comment_body': 'Cool üòé Until I finished the `AsyncHTTPClient` integration you could also copy our `InstrumentedHTTPClient` which just wraps the `HTTPClient`: https://github.com/slashmo/gsoc-swift-tracing/blob/main/UseCases/Sources/ManualAsyncHTTPClient/main.swift#L38', 'comment_created': datetime.datetime(2020, 7, 23, 19, 1, 28, tzinfo=datetime.timezone.utc), 'commenter': 'slashmo', 'type': 'User'}, {'comment_id': 459982493, 'comment_body': '@ktoso\r\n\r\nI do agree its extreme, its seems AWS does it consistently though, see https://github.com/awslabs/aws-xray-sdk-with-opentelemetry/blob/master/sdk/src/main/java/com/amazonaws/xray/opentelemetry/tracing/propagation/HttpTraceContext.java\r\n\r\n```java\r\n  @Override\r\n  //TODO - Accept w3c headers\r\n  public <C> SpanContext extract(final C carrier, final Getter<C> getter) {\r\n    String xrayHeader = getter.get(carrier, XRAY_HEADER_NAME);\r\n    if (xrayHeader != null) {\r\n      return ContextUtils.headerToSpanContext(TraceHeader.fromString(xrayHeader));\r\n    } else {\r\n      throw new RuntimeException(""Could not extract X-Ray Trace Header."");\r\n    }\r\n  }\r\n```', 'comment_created': datetime.datetime(2020, 7, 24, 10, 51, 9, tzinfo=datetime.timezone.utc), 'commenter': 'pokryfka', 'type': 'User'}, {'comment_id': 459999662, 'comment_body': 'the problem is it only prints headers ;-)\r\nI made a quick proof of concept implementation of a `BetterHTTPClient` see https://github.com/slashmo/gsoc-swift-tracing/issues/95', 'comment_created': datetime.datetime(2020, 7, 24, 11, 35, 13, tzinfo=datetime.timezone.utc), 'commenter': 'pokryfka', 'type': 'User'}, {'comment_id': 460159786, 'comment_body': 'to be followed up in https://github.com/pokryfka/aws-xray-sdk-swift/issues/28#issue-665280618', 'comment_created': datetime.datetime(2020, 7, 24, 16, 28, 44, tzinfo=datetime.timezone.utc), 'commenter': 'pokryfka', 'type': 'User'}]","[{'commit_sha': '0fd427cc6c4b7f308d781215afd5555308e1348f', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '50c5da154373ae64f88c269f6b74b36a1d9b3d00', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'a27628dce553674dfe9668dced5b96a272d56bcb', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'b26c5f0bb875c3ec81261cdf6b33894e3f95dfa4', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '3ae1d294c1435f3e92f27a7e7dc768b007fcaf5b', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'ac2d5ac6971b042e30145ab5974d8b7ab8b6c571', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '38f9a639090cd0b084eca3f1d843ce4dfeff0b45', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '3d4d0041bc4a43897454c79923f1e2d8b9483b25', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '0f5d4159ac7c726bd3b2b61f53c4e169fa3dd016', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '29ff160a1ba0543f80241a44429404d878d07130', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '6c1d3c996c56277af0a04b5fdbe7f747c4fb86de', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '80ed11fa7473f88e0f0eeacc1d1117f6de67865e', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'e43ed8678b0f6e258b5818bcec47a186983ee59d', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'e50851c15aa3ada650e4b8baa59438c6d54a8598', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'a807dccf5092e161adee449e0c98527a3cc7c2fd', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '1a35ffabed4844d755bb53bdffa6af8b8ad9f96e', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'd749d4c4a20b16927742ed1a31e8d5d17fd59073', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'ec93186db43441f5e4f628fbbac0a89408315512', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'cf7d6fe8d717a9e97b55ad65b302fd1b09f34b42', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'c5e7d2af4827aff5abf3e8c5c6f8f73754ba8f90', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '94c313e57ae30659625ee188b6020827a0b1bcfc', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'e8aeb31c125b8881b380da4520f5299a1fc62bc0', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'c7a1bbd5a9c865f5d188e6140d8b8516f65ad4bc', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'd8a597d1a4eddf7c71f60c7db66b318b3bffd3a9', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'b12b94b0bd0c7619707d45427af21fc152b9cd7b', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '8e606f261311d64e8463a656d4e40f5daa83ddac', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '8bcb38686e0646b6f6c3f3c8fc8432432f9b41b3', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '393963ae6d11df36e312744d070474f6c59968b0', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '924d1644e53a88809228dd757cb75d4905c59ff1', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '7a1e1062113c51b587c41b34b4ef5ef3364904ec', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '4ef217381df5fa85c172a98dab26d148c003ebcc', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'd27ba09bb7cc8c57872affefc9a3c4f8ea4e4f36', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '868aad21157c63217dcc2905633f389844d76965', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '5b2d7897dd944b9cc0dea5c66a30b659c0c372ce', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '189a3aaff2c4d0320dfbcb153f03db175b57310b', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '0c634c7492e921a18fff6a3d0ba8b02b421f7a60', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '1af7dee78d3f1f651f78e7e529cf927f2f919d90', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'd6cdd15d76792158fc852af249025aa18c3b6886', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '93e39f78c390ff1a3c2e2516ce8fffc27a4a1306', 'committer_username': 'pokryfka', 'committer_name': 'pokryfka', 'committer_email': None, 'commit_date': datetime.datetime(2013, 7, 25, 16, 42, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'de286051fdd57187a504f8af8bea494d21f132a4', 'committer_username': 'pokryfka', 'committer_name': 'pokryfka', 'committer_email': None, 'commit_date': datetime.datetime(2013, 7, 25, 16, 42, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '683ff2686179d385de74901e4c5be0d6926262d3', 'committer_username': 'pokryfka', 'committer_name': 'pokryfka', 'committer_email': None, 'commit_date': datetime.datetime(2013, 7, 25, 16, 42, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '97c63f9f12a732d0a0d61fdf7f6bfe43ed19a79b', 'committer_username': 'pokryfka', 'committer_name': 'pokryfka', 'committer_email': None, 'commit_date': datetime.datetime(2013, 7, 25, 16, 42, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bb72833135343ba91d5aad736d947ba331253e00', 'committer_username': 'pokryfka', 'committer_name': 'pokryfka', 'committer_email': None, 'commit_date': datetime.datetime(2013, 7, 25, 16, 42, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e317cddd340e3d23f3ec39943550d612bd524400', 'committer_username': 'pokryfka', 'committer_name': 'pokryfka', 'committer_email': None, 'commit_date': datetime.datetime(2013, 7, 25, 16, 42, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0ac28494bf941ed11b14fdcae520aa3b9d3fef98', 'committer_username': 'pokryfka', 'committer_name': 'pokryfka', 'committer_email': None, 'commit_date': datetime.datetime(2013, 7, 25, 16, 42, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '096b12e515216cad3487179b6973e0f50f5fbe6d', 'committer_username': 'pokryfka', 'committer_name': 'pokryfka', 'committer_email': None, 'commit_date': datetime.datetime(2013, 7, 25, 16, 42, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '99bd603c8780f679a48075e8dbc60a9d38d44b3d', 'committer_username': 'pokryfka', 'committer_name': 'pokryfka', 'committer_email': None, 'commit_date': datetime.datetime(2013, 7, 25, 16, 42, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e09bc8ecf288e292e8962945f8941e85351fe47f', 'committer_username': 'pokryfka', 'committer_name': 'pokryfka', 'committer_email': None, 'commit_date': datetime.datetime(2013, 7, 25, 16, 42, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a0e21094e64abd7ebc9d7edd7ecedd21acf9bbde', 'committer_username': 'pokryfka', 'committer_name': 'pokryfka', 'committer_email': None, 'commit_date': datetime.datetime(2013, 7, 25, 16, 42, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ed287b82590b64575321c21e97fe08d06ce15f4d', 'committer_username': 'pokryfka', 'committer_name': 'pokryfka', 'committer_email': None, 'commit_date': datetime.datetime(2013, 7, 25, 16, 42, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7e93fd8da6f3b892915b0de921769116e7b52dc0', 'committer_username': 'pokryfka', 'committer_name': 'pokryfka', 'committer_email': None, 'commit_date': datetime.datetime(2013, 7, 25, 16, 42, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '857c1c3bc12717a847b15f48eaa2bff4094854a3', 'committer_username': 'pokryfka', 'committer_name': 'pokryfka', 'committer_email': None, 'commit_date': datetime.datetime(2013, 7, 25, 16, 42, 11, tzinfo=datetime.timezone.utc)}]",pokryfka,5090827,,User,,17,,2,9
475629975,Add instructions to README üìñ,,True,139,https://api.github.com/repos/slashmo/gsoc-swift-tracing/pulls/139,https://github.com/slashmo/gsoc-swift-tracing/pull/139,closed,240,4,2,6,0,27,1,1,[{'name': 'documentation'}],2020-08-28 20:35:48+00:00,2020-08-31 15:09:22+00:00,239614.0,"2 days, 18:33:34","[{'comment_id': 479599047, 'comment_body': 'üëç ', 'comment_created': datetime.datetime(2020, 8, 29, 3, 3, 40, tzinfo=datetime.timezone.utc), 'commenter': 'ktoso', 'type': 'User'}, {'comment_id': 479599272, 'comment_body': '```suggestion\r\nFor applications to be instrumented correctly these\r\n```\r\n\r\nshort is good üëç ', 'comment_created': datetime.datetime(2020, 8, 29, 3, 5, 59, tzinfo=datetime.timezone.utc), 'commenter': 'ktoso', 'type': 'User'}, {'comment_id': 479599371, 'comment_body': ""```suggestion\r\n1. [End users](#end-users-setting-up-instruments) developing server-side applications\r\n```\r\n\r\nEnd users or End-users; see https://en.wikipedia.org/wiki/End_user since we don't do Authors or Developers upper cased below either"", 'comment_created': datetime.datetime(2020, 8, 29, 3, 7, 12, tzinfo=datetime.timezone.utc), 'commenter': 'ktoso', 'type': 'User'}, {'comment_id': 479599488, 'comment_body': '```suggestion\r\n2. [Library/Framework developers](#libraryframework-authors-instrumenting-your-software) providing building blocks to create these applications\r\n```\r\n\r\nTry to limit ""different words for same thing"".\r\n\r\nMaybe we should call the first category ""Application developers"" actually?', 'comment_created': datetime.datetime(2020, 8, 29, 3, 8, 39, tzinfo=datetime.timezone.utc), 'commenter': 'ktoso', 'type': 'User'}, {'comment_id': 479599690, 'comment_body': ""```suggestion\r\nLet's say you build an API service for a fruit store that has two endpoints, one for ordering goods and one that checks what\r\n```\r\n\r\nSince API has many meanings"", 'comment_created': datetime.datetime(2020, 8, 29, 3, 10, 32, tzinfo=datetime.timezone.utc), 'commenter': 'ktoso', 'type': 'User'}, {'comment_id': 479600192, 'comment_body': ""üòâ Yeah let's finally do it -- and rename TracingInstrument -> Tracer, I ticketified."", 'comment_created': datetime.datetime(2020, 8, 29, 3, 16, 8, tzinfo=datetime.timezone.utc), 'commenter': 'ktoso', 'type': 'User'}, {'comment_id': 479600384, 'comment_body': ""While Swift Tracing allows building all kinds of _instruments_ which can co-exist in applications transparently, it's primary use is instrumenting multi-threaded and distributed systems with Distributed Traces.\r\n\r\n> The tracing API is compatible with the [Open Telemetry specification](https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/trace/api.md)."", 'comment_created': datetime.datetime(2020, 8, 29, 3, 18, 40, tzinfo=datetime.timezone.utc), 'commenter': 'ktoso', 'type': 'User'}, {'comment_id': 479600581, 'comment_body': '```suggestion\r\n### Use-case Example\r\n```', 'comment_created': datetime.datetime(2020, 8, 29, 3, 20, 48, tzinfo=datetime.timezone.utc), 'commenter': 'ktoso', 'type': 'User'}, {'comment_id': 479600612, 'comment_body': 'üëç ', 'comment_created': datetime.datetime(2020, 8, 29, 3, 21, tzinfo=datetime.timezone.utc), 'commenter': 'ktoso', 'type': 'User'}, {'comment_id': 479600782, 'comment_body': '```suggestion\r\n\r\nSpans naturally form a parent-child relationship, and by visually analyzing a trace we can easily spot bottlenecks for performance profiling use-cases, and for failure debugging situations we can benefit from the application specific metadata that spans can carry (such as noticing that failures only occur e.g. when the username contains some illegal character or some other otherwise hard to notice situation).\r\n```', 'comment_created': datetime.datetime(2020, 8, 29, 3, 23, 31, tzinfo=datetime.timezone.utc), 'commenter': 'ktoso', 'type': 'User'}, {'comment_id': 479600959, 'comment_body': ""```suggestion\r\nFor instrumentation and tracing to work, certain pieces of metadata (usually in the form of identifiers), must be carried throughout the entire system‚Äìincluding across process and service boundaries. Because of that, it's essential for a context\r\n```"", 'comment_created': datetime.datetime(2020, 8, 29, 3, 25, 34, tzinfo=datetime.timezone.utc), 'commenter': 'ktoso', 'type': 'User'}, {'comment_id': 479601065, 'comment_body': '```suggestion\r\n\r\n```\r\n\r\nI think we explained this already above.', 'comment_created': datetime.datetime(2020, 8, 29, 3, 26, 51, tzinfo=datetime.timezone.utc), 'commenter': 'ktoso', 'type': 'User'}, {'comment_id': 479601198, 'comment_body': 'Be more authoritative:\r\n\r\n```suggestion\r\nIn Swift this is done by passing a **`BaggageContext`** explicitly through APIs which participate in instrumentation/tracing. \r\n\r\nBaggage context is vendored in its own library,\r\n```', 'comment_created': datetime.datetime(2020, 8, 29, 3, 28, 23, tzinfo=datetime.timezone.utc), 'commenter': 'ktoso', 'type': 'User'}, {'comment_id': 479601455, 'comment_body': '```suggestion\r\n\r\n--- \r\n\r\n## Adoption\r\n\r\nThe following libraries already support swift tracing or baggage context in their APIs:\r\n\r\n// TODO: Table\r\n\r\n\r\n- SwiftNIO, Integrates: Baggage, Status: PoC\r\n- AsyncHTTPClient, Integrates: Tracing, Status: PoC\r\n- Swift gRPC, Integrates: Tracing, Status: PoC\r\n- ...\r\n- If you know of any other library please send in a PR to add it to the list, thank you!\r\n```', 'comment_created': datetime.datetime(2020, 8, 29, 3, 31, 21, tzinfo=datetime.timezone.utc), 'commenter': 'ktoso', 'type': 'User'}, {'comment_id': 479601543, 'comment_body': '```suggestion\r\n### Passing BaggageContext\r\n```\r\n\r\nless informal', 'comment_created': datetime.datetime(2020, 8, 29, 3, 32, 17, tzinfo=datetime.timezone.utc), 'commenter': 'ktoso', 'type': 'User'}, {'comment_id': 479601551, 'comment_body': 'Please link to the baggage context here, it explains the rules in depth', 'comment_created': datetime.datetime(2020, 8, 29, 3, 32, 35, tzinfo=datetime.timezone.utc), 'commenter': 'ktoso', 'type': 'User'}, {'comment_id': 479601574, 'comment_body': 'good üëç ', 'comment_created': datetime.datetime(2020, 8, 29, 3, 32, 47, tzinfo=datetime.timezone.utc), 'commenter': 'ktoso', 'type': 'User'}, {'comment_id': 479601629, 'comment_body': '```suggestion\r\n### Tracing your library\r\n```', 'comment_created': datetime.datetime(2020, 8, 29, 3, 33, 43, tzinfo=datetime.timezone.utc), 'commenter': 'ktoso', 'type': 'User'}, {'comment_id': 479601828, 'comment_body': '```suggestion\r\n> ‚ö†Ô∏è Make sure to ALWAYS end spans. Ensure that all paths taken by the code will result in ending the span.\r\n> Make sure that error cases also set the error attribute and end the span.\r\n```', 'comment_created': datetime.datetime(2020, 8, 29, 3, 35, 43, tzinfo=datetime.timezone.utc), 'commenter': 'ktoso', 'type': 'User'}, {'comment_id': 479601889, 'comment_body': ""```suggestion\r\n### Creating a `Tracer`\r\n```\r\n\r\nand let's do the rename soon"", 'comment_created': datetime.datetime(2020, 8, 29, 3, 36, 34, tzinfo=datetime.timezone.utc), 'commenter': 'ktoso', 'type': 'User'}, {'comment_id': 479601961, 'comment_body': '```suggestion\r\n> The `Span` conforms to the standard rules defined in [OpenTelemetry](https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/trace/api.md#span), so if unsure about usage patterns, you can refer to this specification and examples referring to it.\r\n```', 'comment_created': datetime.datetime(2020, 8, 29, 3, 37, 30, tzinfo=datetime.timezone.utc), 'commenter': 'ktoso', 'type': 'User'}, {'comment_id': 479632417, 'comment_body': '> Maybe we should call the first category ""Application developers"" actually?\n\nYeah, I like that üëç', 'comment_created': datetime.datetime(2020, 8, 29, 9, 52, 42, tzinfo=datetime.timezone.utc), 'commenter': 'slashmo', 'type': 'User'}, {'comment_id': 479632579, 'comment_body': ""Two endpoints on one service might be a bit confusing. I'd say it should mention that it's using two distinct services that each offer an API with a certain functionality (Order & Storage)."", 'comment_created': datetime.datetime(2020, 8, 29, 9, 54, 29, tzinfo=datetime.timezone.utc), 'commenter': 'slashmo', 'type': 'User'}, {'comment_id': 479636970, 'comment_body': '```suggestion\r\n1. [Application developers](#end-users-setting-up-instruments) creating server-side applications\r\n```', 'comment_created': datetime.datetime(2020, 8, 29, 10, 49, 42, tzinfo=datetime.timezone.utc), 'commenter': 'slashmo', 'type': 'User'}, {'comment_id': 479846533, 'comment_body': 'Ah i see what you mean, okey sounds good üëç ', 'comment_created': datetime.datetime(2020, 8, 31, 1, 31, 43, tzinfo=datetime.timezone.utc), 'commenter': 'ktoso', 'type': 'User'}, {'comment_id': 479847268, 'comment_body': 'Assuming the thumbs up ok to merge in the patch? :-)', 'comment_created': datetime.datetime(2020, 8, 31, 1, 35, 49, tzinfo=datetime.timezone.utc), 'commenter': 'ktoso', 'type': 'User'}, {'comment_id': 480194378, 'comment_body': 'üëç great btw, this on was bothering me for a while hehe', 'comment_created': datetime.datetime(2020, 8, 31, 15, 8, 29, tzinfo=datetime.timezone.utc), 'commenter': 'ktoso', 'type': 'User'}]","[{'commit_sha': '0fb04a205c168113bc7e288dd056e932614cbe15', 'committer_username': 'slashmo', 'committer_name': 'Moritz Lang', 'committer_email': 'hi@slashmo.codes', 'commit_date': datetime.datetime(2015, 12, 7, 15, 3, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e1becb7477fe554ecb71233508ad2303c44d94d5', 'committer_username': 'slashmo', 'committer_name': 'Moritz Lang', 'committer_email': 'hi@slashmo.codes', 'commit_date': datetime.datetime(2015, 12, 7, 15, 3, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c50a8592b8d34b1ad841c14a6d68efc5c9b65de8', 'committer_username': 'slashmo', 'committer_name': 'Moritz Lang', 'committer_email': 'hi@slashmo.codes', 'commit_date': datetime.datetime(2015, 12, 7, 15, 3, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': '62b5a7bf43aa156e4bc7f80c03009d0bbd23728f', 'committer_username': 'slashmo', 'committer_name': 'Moritz Lang', 'committer_email': 'hi@slashmo.codes', 'commit_date': datetime.datetime(2015, 12, 7, 15, 3, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b16893597ec2fa80bd996a9c1b9f596fc17778ea', 'committer_username': 'slashmo', 'committer_name': 'Moritz Lang', 'committer_email': 'hi@slashmo.codes', 'commit_date': datetime.datetime(2015, 12, 7, 15, 3, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b0778826b418edab742458892b206c68147e1c6f', 'committer_username': 'slashmo', 'committer_name': 'Moritz Lang', 'committer_email': 'hi@slashmo.codes', 'commit_date': datetime.datetime(2015, 12, 7, 15, 3, 59, tzinfo=datetime.timezone.utc)}]",Moritz Lang,16192401,hi@slashmo.codes,User,,77,,188,152
474833085,Improve documentation & test coverage,"This PR aims to make `BaggageContext` somewhat release worthy. While we still have some major things to discuss like naming #23, this at least gets us on the path towards a stable release.

Closes #27 ",True,29,https://api.github.com/repos/slashmo/gsoc-swift-baggage-context/pulls/29,https://github.com/slashmo/gsoc-swift-baggage-context/pull/29,closed,326,72,14,13,0,39,1,1,[{'name': 'documentation'}],2020-08-27 17:03:00+00:00,2020-08-31 13:03:57+00:00,331257.0,"3 days, 20:00:57","[{'comment_id': 478569503, 'comment_body': 'I removed `ValueContainer` to make the implementation a bit more concise.', 'comment_created': datetime.datetime(2020, 8, 27, 17, 8, 1, tzinfo=datetime.timezone.utc), 'commenter': 'slashmo', 'type': 'User'}, {'comment_id': 478570125, 'comment_body': 'New naming and slightly tweaked docs inspired by [`Sequence.forEach`](https://github.com/apple/swift/blob/master/stdlib/public/core/Sequence.swift#L684).', 'comment_created': datetime.datetime(2020, 8, 27, 17, 9, 8, tzinfo=datetime.timezone.utc), 'commenter': 'slashmo', 'type': 'User'}, {'comment_id': 478570920, 'comment_body': ""I'm not sure whether we should recommend exposing things publicly in any way as it could lead people to put non-meta data values in the `BaggageContext` too. @ktoso WDYT?"", 'comment_created': datetime.datetime(2020, 8, 27, 17, 10, 31, tzinfo=datetime.timezone.utc), 'commenter': 'slashmo', 'type': 'User'}, {'comment_id': 478571763, 'comment_body': ""There's no need to have this be publicly initializable, right? Maybe we can even make it private and have a method on `BaggageContextKey` like `eraseToAnyBaggageContextKey()`, similar to Combines `eraseToAnyPublisher()`."", 'comment_created': datetime.datetime(2020, 8, 27, 17, 12, 1, tzinfo=datetime.timezone.utc), 'commenter': 'slashmo', 'type': 'User'}, {'comment_id': 478572240, 'comment_body': 'I also made it rethrowing, because why not üòä', 'comment_created': datetime.datetime(2020, 8, 27, 17, 12, 52, tzinfo=datetime.timezone.utc), 'commenter': 'slashmo', 'type': 'User'}, {'comment_id': 478787554, 'comment_body': '```suggestion\r\n[Context-Passing Guidelines](#Context-Passing-Guidelines).\r\n```', 'comment_created': datetime.datetime(2020, 8, 28, 1, 53, 32, tzinfo=datetime.timezone.utc), 'commenter': 'ktoso', 'type': 'User'}, {'comment_id': 478813941, 'comment_body': '```suggestion\r\nGenerally speaking, frameworks and libraries should treat baggage as an _opaque container_ and simply thread it along all asynchronous boundaries a call may have to go through. Libraries and frameworks should not attempt to reuse context as a means of passing values that they need for ""normal"" operation.\r\n```', 'comment_created': datetime.datetime(2020, 8, 28, 3, 43, 31, tzinfo=datetime.timezone.utc), 'commenter': 'ktoso', 'type': 'User'}, {'comment_id': 478818523, 'comment_body': '```suggestion\r\nAt cross-cutting boundaries, e.g. right before sending an HTTP\r\n```', 'comment_created': datetime.datetime(2020, 8, 28, 4, 4, 14, tzinfo=datetime.timezone.utc), 'commenter': 'ktoso', 'type': 'User'}, {'comment_id': 478818645, 'comment_body': '```suggestion\r\nrequest, they inject the `BaggageContext` into the HTTP headers, allowing context propagation. On the receiving side, an\r\n```\r\n\r\n\r\nless colloquial ', 'comment_created': datetime.datetime(2020, 8, 28, 4, 4, 43, tzinfo=datetime.timezone.utc), 'commenter': 'ktoso', 'type': 'User'}, {'comment_id': 478818796, 'comment_body': '```suggestion\r\nrequest, they\'d inject the `BaggageContext` into the HTTP headers, allowing context propagation. On the receiving side, an\r\n```\r\n\r\n(was typo anyway with ""sight"" üòâ )', 'comment_created': datetime.datetime(2020, 8, 28, 4, 5, 21, tzinfo=datetime.timezone.utc), 'commenter': 'ktoso', 'type': 'User'}, {'comment_id': 478819405, 'comment_body': 'Please do take the extra step to always define:\r\n\r\n```swift\r\nextension BaggageContextProtocol {\r\n    var traceID: TraceIDKey.Value? {\r\n        get {\r\n            return self[TraceIDKey.self]\r\n        }\r\n        set {\r\n            self[TraceIDKey.self] = newValue\r\n        }\r\n    }\r\n```', 'comment_created': datetime.datetime(2020, 8, 28, 4, 8, 20, tzinfo=datetime.timezone.utc), 'commenter': 'ktoso', 'type': 'User'}, {'comment_id': 478819476, 'comment_body': 'The keys are an implementation detail', 'comment_created': datetime.datetime(2020, 8, 28, 4, 8, 48, tzinfo=datetime.timezone.utc), 'commenter': 'ktoso', 'type': 'User'}, {'comment_id': 478819899, 'comment_body': ""I see, you added it below. I'd fold it all into 1 snippet; It's not optional, noone should be using the Bla.self style but always though these accessors.\r\n\r\nWe can also consider if what we do with attributes in tracing can work here or not ü§î  New ticket perhaps."", 'comment_created': datetime.datetime(2020, 8, 28, 4, 10, 34, tzinfo=datetime.timezone.utc), 'commenter': 'ktoso', 'type': 'User'}, {'comment_id': 478820374, 'comment_body': 'I\'d rename to \r\n\r\n```suggestion\r\n### End Users - explicit context passing\r\n```\r\n\r\nor something like that; It is crucial to not scare away people from this concept. People may not be really fully aware they\'re building distributed systems (""but i just call the database"" etc). We should absolutely normalize passing around contexts, it is not weird or special, it\'s just status quo of today\'s server development ecosystem.', 'comment_created': datetime.datetime(2020, 8, 28, 4, 12, 36, tzinfo=datetime.timezone.utc), 'commenter': 'ktoso', 'type': 'User'}, {'comment_id': 478820476, 'comment_body': 'Please make this sub-section the _first_ of the three.\r\n\r\nWe should go in increasing order of complexity:\r\n\r\n- end users\r\n- library authors\r\n- instrumentation authors', 'comment_created': datetime.datetime(2020, 8, 28, 4, 13, 10, tzinfo=datetime.timezone.utc), 'commenter': 'ktoso', 'type': 'User'}, {'comment_id': 478820627, 'comment_body': '```suggestion\r\n### Instrumentation Authors - defining, injecting and extracting baggage\r\n```', 'comment_created': datetime.datetime(2020, 8, 28, 4, 13, 41, tzinfo=datetime.timezone.utc), 'commenter': 'ktoso', 'type': 'User'}, {'comment_id': 478820876, 'comment_body': '```suggestion\r\n### Library & Framework Authors - passing context and instrumenting libraries\r\n```\r\n', 'comment_created': datetime.datetime(2020, 8, 28, 4, 14, 39, tzinfo=datetime.timezone.utc), 'commenter': 'ktoso', 'type': 'User'}, {'comment_id': 478821366, 'comment_body': 'this resolves https://github.com/slashmo/gsoc-swift-baggage-context/issues/27', 'comment_created': datetime.datetime(2020, 8, 28, 4, 16, 37, tzinfo=datetime.timezone.utc), 'commenter': 'ktoso', 'type': 'User'}, {'comment_id': 478821534, 'comment_body': 'Yeah seems okey', 'comment_created': datetime.datetime(2020, 8, 28, 4, 17, 21, tzinfo=datetime.timezone.utc), 'commenter': 'ktoso', 'type': 'User'}, {'comment_id': 478822204, 'comment_body': ""This needs a slight rewording I feel:\r\n\r\na) it is strongly recommended to do those extensions, using the keys directly is an anti pattern.\r\nb) the example extension should be `var someID: ...` without public in front. People should not have to make those public unless some super blessed values -- i.e. `deadline` which we'll get to some day would most likley be a public thing."", 'comment_created': datetime.datetime(2020, 8, 28, 4, 20, 17, tzinfo=datetime.timezone.utc), 'commenter': 'ktoso', 'type': 'User'}, {'comment_id': 478822488, 'comment_body': 'good', 'comment_created': datetime.datetime(2020, 8, 28, 4, 21, 38, tzinfo=datetime.timezone.utc), 'commenter': 'ktoso', 'type': 'User'}, {'comment_id': 478822513, 'comment_body': 'also good', 'comment_created': datetime.datetime(2020, 8, 28, 4, 21, 44, tzinfo=datetime.timezone.utc), 'commenter': 'ktoso', 'type': 'User'}, {'comment_id': 478822639, 'comment_body': 'maybe remove the `set` (see my other PR on this)\r\n\r\nOR\r\n\r\nmake it a separate snippet where we say: \r\n\r\n```\r\n/// Optionally, the underlying logger may be `set` as well, to allow users to e.g. the log level of the used logger.\r\n```', 'comment_created': datetime.datetime(2020, 8, 28, 4, 22, 17, tzinfo=datetime.timezone.utc), 'commenter': 'ktoso', 'type': 'User'}, {'comment_id': 478824224, 'comment_body': ""I think that composes right... If I'm a framework I should not necessarily change the log level of a logger that was passed to me -- I.e. I was passed a generic Carrier.\r\n\r\nBut if I'm user land and I have the specific framework context, everything goes and I may want to change the logger hmm...\r\n\r\nI wonder if we're overdoing it or being helpful though"", 'comment_created': datetime.datetime(2020, 8, 28, 4, 29, 46, tzinfo=datetime.timezone.utc), 'commenter': 'ktoso', 'type': 'User'}, {'comment_id': 478824711, 'comment_body': ""(Need to think more about that PR https://github.com/slashmo/gsoc-swift-baggage-context/pull/31 what REALLY composes and what's annoying)"", 'comment_created': datetime.datetime(2020, 8, 28, 4, 32, 4, tzinfo=datetime.timezone.utc), 'commenter': 'ktoso', 'type': 'User'}, {'comment_id': 478824735, 'comment_body': 'üëç ', 'comment_created': datetime.datetime(2020, 8, 28, 4, 32, 12, tzinfo=datetime.timezone.utc), 'commenter': 'ktoso', 'type': 'User'}, {'comment_id': 478825189, 'comment_body': 'I\'d not prefix this with ""when creating distributed systems ..."" at all, but simply say ""you see some API that takes context, you pass whatever context you already have""\r\n\r\nYou can get inspiration on wording here: https://golang.org/pkg/context/\r\n\r\nWe should really focus on ""you see a context? you pass one"" if you don\'t have one, stop and think why, if you really dont have one, pass an empty one -- this relates to: https://github.com/slashmo/gsoc-swift-baggage-context/issues/26 as well ', 'comment_created': datetime.datetime(2020, 8, 28, 4, 34, 20, tzinfo=datetime.timezone.utc), 'commenter': 'ktoso', 'type': 'User'}, {'comment_id': 478825810, 'comment_body': 'Then after we explain ""just always pass the context""\r\n\r\nwe can add a section on ""This will enable you to enable tracing whenever your application grows"", there will be no ""oh no, now we have to fix all places to pass context"" -- once you _suddenly_ need tracing because there\'s a fire on production or you\'re profiling some troublesome performance regressions, no-one will have the time to go through the entire system and start passing contexts around. You should always pass it, so that you\'re ready for when you need it -- your future self will be thankful for it üëç \r\n\r\nOr something like that', 'comment_created': datetime.datetime(2020, 8, 28, 4, 36, 49, tzinfo=datetime.timezone.utc), 'commenter': 'ktoso', 'type': 'User'}, {'comment_id': 478825935, 'comment_body': 'I think we can remove this sentence; passing context is simply everywhere, and we have some convenience for the many libraries case where all have their own context things.', 'comment_created': datetime.datetime(2020, 8, 28, 4, 37, 24, tzinfo=datetime.timezone.utc), 'commenter': 'ktoso', 'type': 'User'}, {'comment_id': 478826162, 'comment_body': '```suggestion\r\nPropagating baggage context through your system is to be done explicitly, meaning as a parameter in function calls, following the ""flow"" of execution. \r\n\r\n> Do not store the context object in your classes or structs as this will inevitably lead to mistakes and hard to track bugs.\r\n```', 'comment_created': datetime.datetime(2020, 8, 28, 4, 38, 39, tzinfo=datetime.timezone.utc), 'commenter': 'ktoso', 'type': 'User'}, {'comment_id': 478826181, 'comment_body': 'üëç ', 'comment_created': datetime.datetime(2020, 8, 28, 4, 38, 47, tzinfo=datetime.timezone.utc), 'commenter': 'ktoso', 'type': 'User'}, {'comment_id': 478826209, 'comment_body': 'üëç ', 'comment_created': datetime.datetime(2020, 8, 28, 4, 38, 56, tzinfo=datetime.timezone.utc), 'commenter': 'ktoso', 'type': 'User'}, {'comment_id': 478826424, 'comment_body': 'I see, will sanity check if we actually needed it for something but you may be right. Will get to this later today', 'comment_created': datetime.datetime(2020, 8, 28, 4, 39, 41, tzinfo=datetime.timezone.utc), 'commenter': 'ktoso', 'type': 'User'}, {'comment_id': 479103393, 'comment_body': 'Added through https://github.com/slashmo/gsoc-swift-baggage-context/pull/29/files#r478818645', 'comment_created': datetime.datetime(2020, 8, 28, 10, 37, 58, tzinfo=datetime.timezone.utc), 'commenter': 'slashmo', 'type': 'User'}, {'comment_id': 479105763, 'comment_body': '```suggestion\r\n}\r\n\r\nextension BaggageContextProtocol {\r\n    var traceID: TraceIDKey.Value? {\r\n        get {\r\n            return self[TraceIDKey.self]\r\n        }\r\n        set {\r\n            self[TraceIDKey.self] = newValue\r\n        }\r\n    }\r\n}\r\n```', 'comment_created': datetime.datetime(2020, 8, 28, 10, 40, 2, tzinfo=datetime.timezone.utc), 'commenter': 'slashmo', 'type': 'User'}, {'comment_id': 479108841, 'comment_body': ""Yeah, that's a good point. I agree that distributed systems might be a bit intimidating. The reordering also makes sense to me as that's probably also the decreasing order of the amounts of developers in these fields."", 'comment_created': datetime.datetime(2020, 8, 28, 10, 42, 45, tzinfo=datetime.timezone.utc), 'commenter': 'slashmo', 'type': 'User'}, {'comment_id': 479111173, 'comment_body': ""Okay, I'll leave it as `Any` for now but am open to adding `ValueContainer` back in if there are advantages to using it."", 'comment_created': datetime.datetime(2020, 8, 28, 10, 44, 50, tzinfo=datetime.timezone.utc), 'commenter': 'slashmo', 'type': 'User'}, {'comment_id': 479144246, 'comment_body': 'üëç', 'comment_created': datetime.datetime(2020, 8, 28, 11, 13, 28, tzinfo=datetime.timezone.utc), 'commenter': 'slashmo', 'type': 'User'}, {'comment_id': 479870811, 'comment_body': 'Yeap, please apply', 'comment_created': datetime.datetime(2020, 8, 31, 3, 35, 4, tzinfo=datetime.timezone.utc), 'commenter': 'ktoso', 'type': 'User'}]","[{'commit_sha': '8bb7eea6392809f662cd53d665d3562ec99fe43d', 'committer_username': 'slashmo', 'committer_name': 'Moritz Lang', 'committer_email': 'hi@slashmo.codes', 'commit_date': datetime.datetime(2015, 12, 7, 15, 3, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c4407f35c0baf88ce231f878838f79591746a598', 'committer_username': 'slashmo', 'committer_name': 'Moritz Lang', 'committer_email': 'hi@slashmo.codes', 'commit_date': datetime.datetime(2015, 12, 7, 15, 3, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd64ef3ee61c409aad936d35a69a4fb736936dba4', 'committer_username': 'slashmo', 'committer_name': 'Moritz Lang', 'committer_email': 'hi@slashmo.codes', 'commit_date': datetime.datetime(2015, 12, 7, 15, 3, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': '61481c85e7e50cc29322de6e5dd5a3c19825d47d', 'committer_username': 'slashmo', 'committer_name': 'Moritz Lang', 'committer_email': 'hi@slashmo.codes', 'commit_date': datetime.datetime(2015, 12, 7, 15, 3, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9fe93daf7c163ed5f7ee011a657bc84c992db8d9', 'committer_username': 'slashmo', 'committer_name': 'Moritz Lang', 'committer_email': 'hi@slashmo.codes', 'commit_date': datetime.datetime(2015, 12, 7, 15, 3, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4cd8d617d6c4e60f41d6e3cd723384bf144a1bd4', 'committer_username': 'slashmo', 'committer_name': 'Moritz Lang', 'committer_email': 'hi@slashmo.codes', 'commit_date': datetime.datetime(2015, 12, 7, 15, 3, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f2c2c2b2fec8833712bf6983c5e338e13a624169', 'committer_username': 'slashmo', 'committer_name': 'Moritz Lang', 'committer_email': 'hi@slashmo.codes', 'commit_date': datetime.datetime(2015, 12, 7, 15, 3, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e71be2395a61166e5702834ceba6f377415c0ea8', 'committer_username': 'slashmo', 'committer_name': 'Moritz Lang', 'committer_email': 'hi@slashmo.codes', 'commit_date': datetime.datetime(2015, 12, 7, 15, 3, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': '47da3bf1916395365a4575b793d0b689f3b3f486', 'committer_username': 'slashmo', 'committer_name': 'Moritz Lang', 'committer_email': 'hi@slashmo.codes', 'commit_date': datetime.datetime(2015, 12, 7, 15, 3, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': '303667654b15b081a8e4a454fb1d8d8e1ba02b1e', 'committer_username': 'slashmo', 'committer_name': 'Moritz Lang', 'committer_email': 'hi@slashmo.codes', 'commit_date': datetime.datetime(2015, 12, 7, 15, 3, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f5b01a413012f34f9cf5597b86881cb85a1f4036', 'committer_username': 'slashmo', 'committer_name': 'Moritz Lang', 'committer_email': 'hi@slashmo.codes', 'commit_date': datetime.datetime(2015, 12, 7, 15, 3, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b4cf9971423a1b41e344391c45d2a81a6be20d5b', 'committer_username': 'slashmo', 'committer_name': 'Moritz Lang', 'committer_email': 'hi@slashmo.codes', 'commit_date': datetime.datetime(2015, 12, 7, 15, 3, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e9f697d5a9f8c1ab31c10f1af4f0dbc3155b5c04', 'committer_username': 'slashmo', 'committer_name': 'Moritz Lang', 'committer_email': 'hi@slashmo.codes', 'commit_date': datetime.datetime(2015, 12, 7, 15, 3, 59, tzinfo=datetime.timezone.utc)}]",Moritz Lang,16192401,hi@slashmo.codes,User,,77,,188,152

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
120498971,swift-nio,apple/swift-nio,Swift,638,7900,192,185,2458,253,28,73,"[{'id': 439925053, 'number': 1574, 'closed': None, 'created': datetime.datetime(2020, 6, 25, 10, 20, 28, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 107, 'deletions': 1, 'state': 'open'}, {'id': 268876643, 'number': 959, 'closed': datetime.datetime(2019, 4, 9, 20, 8, 59, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2019, 4, 9, 18, 49, 50, tzinfo=datetime.timezone.utc), 'time_taken': 4749.0, 'time_delta': '1:19:09', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 268655497, 'number': 958, 'closed': datetime.datetime(2019, 4, 10, 10, 53, 7, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2019, 4, 9, 9, 29, 16, tzinfo=datetime.timezone.utc), 'time_taken': 91431.0, 'time_delta': '1 day, 1:23:51', 'additions': 31, 'deletions': 2, 'state': 'closed'}, {'id': 249257269, 'number': 794, 'closed': datetime.datetime(2019, 1, 31, 14, 54, 21, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2019, 1, 31, 14, 0, 18, tzinfo=datetime.timezone.utc), 'time_taken': 3243.0, 'time_delta': '0:54:03', 'additions': 5, 'deletions': 5, 'state': 'closed'}, {'id': 172380123, 'number': 56, 'closed': datetime.datetime(2018, 3, 2, 1, 10, 5, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2018, 3, 1, 23, 9, 12, tzinfo=datetime.timezone.utc), 'time_taken': 7253.0, 'time_delta': '2:00:53', 'additions': 1, 'deletions': 1, 'state': 'closed'}]"
178287727,async-http-client,swift-server/async-http-client,Swift,113,899,26,53,449,105,17,19,"[{'id': 533051064, 'number': 320, 'closed': None, 'created': datetime.datetime(2020, 12, 5, 17, 8, 5, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 2075, 'deletions': 364, 'state': 'open'}, {'id': 462685394, 'number': 289, 'closed': None, 'created': datetime.datetime(2020, 8, 4, 10, 45, 43, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 498, 'deletions': 411, 'state': 'open'}]"
68841963,grpc-swift,grpc/grpc-swift,Swift,413,2002,75,109,1926,105,9,7,"[{'id': 468474330, 'number': 941, 'closed': datetime.datetime(2024, 1, 15, 10, 51, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 16, 17, 46, 58, tzinfo=datetime.timezone.utc), 'time_taken': 107715842.0, 'time_delta': '1246 days, 17:04:02', 'additions': 411, 'deletions': 34, 'state': 'closed'}]"
274431822,aws-xray-sdk-swift,pokryfka/aws-xray-sdk-swift,Swift,4,14,3,4,108,16,5,4,"[{'id': 440055139, 'number': 2, 'closed': datetime.datetime(2020, 6, 25, 14, 48, 1, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 25, 14, 23, 7, tzinfo=datetime.timezone.utc), 'time_taken': 1494.0, 'time_delta': '0:24:54', 'additions': 9, 'deletions': 9, 'state': 'closed'}]"
262987807,gsoc-swift-tracing,slashmo/gsoc-swift-tracing,Swift,1,20,6,4,180,19,2,1,"[{'id': 499509953, 'number': 152, 'closed': datetime.datetime(2020, 10, 8, 13, 57, 49, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 10, 7, 20, 51, 21, tzinfo=datetime.timezone.utc), 'time_taken': 61588.0, 'time_delta': '17:06:28', 'additions': 145, 'deletions': 68, 'state': 'closed'}, {'id': 496319311, 'number': 150, 'closed': datetime.datetime(2020, 10, 7, 11, 7, 52, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 10, 1, 14, 46, 47, tzinfo=datetime.timezone.utc), 'time_taken': 505265.0, 'time_delta': '5 days, 20:21:05', 'additions': 178, 'deletions': 98, 'state': 'closed'}, {'id': 495635353, 'number': 148, 'closed': datetime.datetime(2020, 10, 1, 9, 12, 29, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 9, 30, 16, 31, 7, tzinfo=datetime.timezone.utc), 'time_taken': 60082.0, 'time_delta': '16:41:22', 'additions': 214, 'deletions': 310, 'state': 'closed'}, {'id': 494781458, 'number': 147, 'closed': datetime.datetime(2020, 9, 29, 12, 22, 10, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 9, 29, 12, 7, 18, tzinfo=datetime.timezone.utc), 'time_taken': 892.0, 'time_delta': '0:14:52', 'additions': 15, 'deletions': 2, 'state': 'closed'}, {'id': 481919045, 'number': 146, 'closed': datetime.datetime(2020, 9, 9, 8, 20, 55, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 9, 8, 9, 44, 32, tzinfo=datetime.timezone.utc), 'time_taken': 81383.0, 'time_delta': '22:36:23', 'additions': 102, 'deletions': 1, 'state': 'closed'}, {'id': 476357447, 'number': 143, 'closed': datetime.datetime(2020, 9, 1, 8, 49, 20, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 31, 15, 5, 43, tzinfo=datetime.timezone.utc), 'time_taken': 63817.0, 'time_delta': '17:43:37', 'additions': 270, 'deletions': 165, 'state': 'closed'}, {'id': 476315275, 'number': 142, 'closed': datetime.datetime(2020, 8, 31, 14, 8, 58, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 31, 13, 55, 25, tzinfo=datetime.timezone.utc), 'time_taken': 813.0, 'time_delta': '0:13:33', 'additions': 27, 'deletions': 53, 'state': 'closed'}, {'id': 476309433, 'number': 141, 'closed': datetime.datetime(2020, 8, 31, 13, 58, 16, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 31, 13, 45, 37, tzinfo=datetime.timezone.utc), 'time_taken': 759.0, 'time_delta': '0:12:39', 'additions': 94, 'deletions': 76, 'state': 'closed'}, {'id': 475629975, 'number': 139, 'closed': datetime.datetime(2020, 8, 31, 15, 9, 22, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 28, 20, 35, 48, tzinfo=datetime.timezone.utc), 'time_taken': 239614.0, 'time_delta': '2 days, 18:33:34', 'additions': 240, 'deletions': 4, 'state': 'closed'}, {'id': 470722210, 'number': 136, 'closed': datetime.datetime(2020, 8, 20, 8, 17, 11, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 20, 7, 23, 43, tzinfo=datetime.timezone.utc), 'time_taken': 3208.0, 'time_delta': '0:53:28', 'additions': 89, 'deletions': 77, 'state': 'closed'}, {'id': 470071243, 'number': 133, 'closed': datetime.datetime(2020, 8, 19, 14, 51, 16, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 19, 10, 28, 54, tzinfo=datetime.timezone.utc), 'time_taken': 15742.0, 'time_delta': '4:22:22', 'additions': 126, 'deletions': 31, 'state': 'closed'}, {'id': 469987374, 'number': 131, 'closed': datetime.datetime(2020, 8, 20, 8, 31, 36, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 19, 7, 53, 16, tzinfo=datetime.timezone.utc), 'time_taken': 88700.0, 'time_delta': '1 day, 0:38:20', 'additions': 139, 'deletions': 0, 'state': 'closed'}, {'id': 468729024, 'number': 128, 'closed': datetime.datetime(2020, 8, 18, 14, 34, 12, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 17, 10, 3, 42, tzinfo=datetime.timezone.utc), 'time_taken': 102630.0, 'time_delta': '1 day, 4:30:30', 'additions': 870, 'deletions': 202, 'state': 'closed'}, {'id': 467386706, 'number': 124, 'closed': datetime.datetime(2020, 8, 13, 13, 34, 35, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 13, 13, 30, 19, tzinfo=datetime.timezone.utc), 'time_taken': 256.0, 'time_delta': '0:04:16', 'additions': 3, 'deletions': 2, 'state': 'closed'}, {'id': 466771231, 'number': 122, 'closed': datetime.datetime(2020, 8, 12, 13, 32, 19, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 12, 13, 26, 47, tzinfo=datetime.timezone.utc), 'time_taken': 332.0, 'time_delta': '0:05:32', 'additions': 10, 'deletions': 10, 'state': 'closed'}, {'id': 466744980, 'number': 121, 'closed': datetime.datetime(2020, 8, 13, 8, 22, 30, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 12, 12, 40, 4, tzinfo=datetime.timezone.utc), 'time_taken': 70946.0, 'time_delta': '19:42:26', 'additions': 18, 'deletions': 2, 'state': 'closed'}, {'id': 466708177, 'number': 120, 'closed': datetime.datetime(2020, 8, 12, 13, 5, 4, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 12, 11, 39, 16, tzinfo=datetime.timezone.utc), 'time_taken': 5148.0, 'time_delta': '1:25:48', 'additions': 4, 'deletions': 4, 'state': 'closed'}, {'id': 466036107, 'number': 115, 'closed': datetime.datetime(2020, 8, 12, 11, 19, 20, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 11, 11, 9, 45, tzinfo=datetime.timezone.utc), 'time_taken': 86975.0, 'time_delta': '1 day, 0:09:35', 'additions': 18, 'deletions': 0, 'state': 'closed'}, {'id': 463931765, 'number': 114, 'closed': datetime.datetime(2020, 8, 6, 10, 19, 16, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 6, 10, 16, 6, tzinfo=datetime.timezone.utc), 'time_taken': 190.0, 'time_delta': '0:03:10', 'additions': 30, 'deletions': 32, 'state': 'closed'}, {'id': 463908258, 'number': 113, 'closed': datetime.datetime(2020, 8, 7, 9, 59, 1, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 6, 9, 29, 16, tzinfo=datetime.timezone.utc), 'time_taken': 88185.0, 'time_delta': '1 day, 0:29:45', 'additions': 124, 'deletions': 197, 'state': 'closed'}, {'id': 463290036, 'number': 111, 'closed': datetime.datetime(2020, 8, 6, 13, 37, 16, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 5, 10, 21, 3, tzinfo=datetime.timezone.utc), 'time_taken': 98173.0, 'time_delta': '1 day, 3:16:13', 'additions': 14, 'deletions': 2, 'state': 'closed'}, {'id': 462789179, 'number': 110, 'closed': datetime.datetime(2020, 8, 4, 14, 32, 21, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 4, 14, 5, 21, tzinfo=datetime.timezone.utc), 'time_taken': 1620.0, 'time_delta': '0:27:00', 'additions': 41, 'deletions': 14, 'state': 'closed'}, {'id': 462780303, 'number': 109, 'closed': datetime.datetime(2020, 8, 5, 3, 32, 33, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 4, 13, 52, 17, tzinfo=datetime.timezone.utc), 'time_taken': 49216.0, 'time_delta': '13:40:16', 'additions': 8, 'deletions': 7, 'state': 'closed'}, {'id': 462753116, 'number': 107, 'closed': datetime.datetime(2020, 8, 4, 13, 34, 47, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 4, 13, 3, 13, tzinfo=datetime.timezone.utc), 'time_taken': 1894.0, 'time_delta': '0:31:34', 'additions': 103, 'deletions': 111, 'state': 'closed'}, {'id': 462228187, 'number': 106, 'closed': datetime.datetime(2020, 8, 3, 14, 58, 43, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 3, 14, 58, 34, tzinfo=datetime.timezone.utc), 'time_taken': 9.0, 'time_delta': '0:00:09', 'additions': 2, 'deletions': 1, 'state': 'closed'}, {'id': 459135969, 'number': 103, 'closed': datetime.datetime(2020, 8, 3, 9, 9, 5, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 30, 12, 36, 4, tzinfo=datetime.timezone.utc), 'time_taken': 333181.0, 'time_delta': '3 days, 20:33:01', 'additions': 576, 'deletions': 131, 'state': 'closed'}, {'id': 459041859, 'number': 102, 'closed': datetime.datetime(2020, 7, 30, 10, 8, 38, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 30, 10, 8, 24, tzinfo=datetime.timezone.utc), 'time_taken': 14.0, 'time_delta': '0:00:14', 'additions': 0, 'deletions': 7, 'state': 'closed'}, {'id': 458325385, 'number': 100, 'closed': datetime.datetime(2020, 7, 30, 9, 52, 28, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 29, 9, 52, 41, tzinfo=datetime.timezone.utc), 'time_taken': 86387.0, 'time_delta': '23:59:47', 'additions': 197, 'deletions': 40, 'state': 'closed'}, {'id': 455261087, 'number': 94, 'closed': datetime.datetime(2020, 7, 24, 12, 11, 32, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 22, 17, 39, 30, tzinfo=datetime.timezone.utc), 'time_taken': 153122.0, 'time_delta': '1 day, 18:32:02', 'additions': 2, 'deletions': 6, 'state': 'closed'}, {'id': 455251880, 'number': 93, 'closed': datetime.datetime(2020, 7, 23, 2, 10, 23, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 22, 17, 20, 29, tzinfo=datetime.timezone.utc), 'time_taken': 31794.0, 'time_delta': '8:49:54', 'additions': 2, 'deletions': 11, 'state': 'closed'}, {'id': 455234571, 'number': 92, 'closed': datetime.datetime(2020, 10, 16, 8, 20, 3, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 22, 16, 45, 27, tzinfo=datetime.timezone.utc), 'time_taken': 7400076.0, 'time_delta': '85 days, 15:34:36', 'additions': 193, 'deletions': 15, 'state': 'closed'}, {'id': 455223915, 'number': 91, 'closed': datetime.datetime(2020, 7, 22, 16, 31, 27, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 22, 16, 23, 53, tzinfo=datetime.timezone.utc), 'time_taken': 454.0, 'time_delta': '0:07:34', 'additions': 29, 'deletions': 21, 'state': 'closed'}, {'id': 454490957, 'number': 84, 'closed': datetime.datetime(2020, 7, 21, 13, 32, 17, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 21, 13, 4, 24, tzinfo=datetime.timezone.utc), 'time_taken': 1673.0, 'time_delta': '0:27:53', 'additions': 76, 'deletions': 0, 'state': 'closed'}, {'id': 452830902, 'number': 77, 'closed': datetime.datetime(2020, 7, 20, 0, 46, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 19, 22, 50, 32, tzinfo=datetime.timezone.utc), 'time_taken': 6928.0, 'time_delta': '1:55:28', 'additions': 6, 'deletions': 0, 'state': 'closed'}, {'id': 452779388, 'number': 76, 'closed': datetime.datetime(2020, 7, 20, 0, 47, 5, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 19, 21, 15, 32, tzinfo=datetime.timezone.utc), 'time_taken': 12693.0, 'time_delta': '3:31:33', 'additions': 0, 'deletions': 3, 'state': 'closed'}, {'id': 452460953, 'number': 75, 'closed': datetime.datetime(2020, 7, 20, 0, 44, 38, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 19, 9, 37, 48, tzinfo=datetime.timezone.utc), 'time_taken': 54410.0, 'time_delta': '15:06:50', 'additions': 0, 'deletions': 10, 'state': 'closed'}, {'id': 450367436, 'number': 73, 'closed': datetime.datetime(2020, 7, 17, 10, 6, 4, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 16, 17, 25, 44, tzinfo=datetime.timezone.utc), 'time_taken': 60020.0, 'time_delta': '16:40:20', 'additions': 45, 'deletions': 2, 'state': 'closed'}, {'id': 449354517, 'number': 71, 'closed': datetime.datetime(2020, 7, 15, 14, 34, 17, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 15, 9, 16, 28, tzinfo=datetime.timezone.utc), 'time_taken': 19069.0, 'time_delta': '5:17:49', 'additions': 89, 'deletions': 14, 'state': 'closed'}, {'id': 448244340, 'number': 66, 'closed': datetime.datetime(2020, 7, 13, 13, 12, 3, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 13, 13, 8, 22, tzinfo=datetime.timezone.utc), 'time_taken': 221.0, 'time_delta': '0:03:41', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 445433054, 'number': 62, 'closed': datetime.datetime(2020, 7, 14, 12, 38, 59, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 7, 13, 59, 30, tzinfo=datetime.timezone.utc), 'time_taken': 599969.0, 'time_delta': '6 days, 22:39:29', 'additions': 892, 'deletions': 15, 'state': 'closed'}, {'id': 443471111, 'number': 61, 'closed': datetime.datetime(2020, 7, 2, 12, 5, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 2, 12, 0, 58, tzinfo=datetime.timezone.utc), 'time_taken': 242.0, 'time_delta': '0:04:02', 'additions': 835, 'deletions': 9, 'state': 'closed'}, {'id': 442328203, 'number': 57, 'closed': datetime.datetime(2020, 6, 30, 22, 27, 8, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 30, 22, 24, 7, tzinfo=datetime.timezone.utc), 'time_taken': 181.0, 'time_delta': '0:03:01', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 442326635, 'number': 56, 'closed': datetime.datetime(2020, 7, 1, 8, 19, 31, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 30, 22, 19, 47, tzinfo=datetime.timezone.utc), 'time_taken': 35984.0, 'time_delta': '9:59:44', 'additions': 167, 'deletions': 0, 'state': 'closed'}, {'id': 442017446, 'number': 55, 'closed': datetime.datetime(2020, 6, 30, 21, 41, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 30, 13, 9, 44, tzinfo=datetime.timezone.utc), 'time_taken': 30676.0, 'time_delta': '8:31:16', 'additions': 315, 'deletions': 226, 'state': 'closed'}, {'id': 440488010, 'number': 53, 'closed': datetime.datetime(2020, 6, 26, 9, 47, 52, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 26, 9, 45, 11, tzinfo=datetime.timezone.utc), 'time_taken': 161.0, 'time_delta': '0:02:41', 'additions': 58, 'deletions': 56, 'state': 'closed'}, {'id': 439946511, 'number': 52, 'closed': datetime.datetime(2020, 6, 25, 11, 10, 5, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 25, 11, 3, 28, tzinfo=datetime.timezone.utc), 'time_taken': 397.0, 'time_delta': '0:06:37', 'additions': 4, 'deletions': 0, 'state': 'closed'}, {'id': 439913970, 'number': 51, 'closed': datetime.datetime(2020, 6, 25, 10, 47, 23, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 25, 9, 58, 38, tzinfo=datetime.timezone.utc), 'time_taken': 2925.0, 'time_delta': '0:48:45', 'additions': 29, 'deletions': 209, 'state': 'closed'}, {'id': 438827629, 'number': 49, 'closed': datetime.datetime(2020, 6, 24, 12, 13, 37, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 23, 21, 19, 28, tzinfo=datetime.timezone.utc), 'time_taken': 53649.0, 'time_delta': '14:54:09', 'additions': 36, 'deletions': 0, 'state': 'closed'}, {'id': 437867920, 'number': 42, 'closed': datetime.datetime(2020, 6, 23, 12, 49, 19, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 22, 11, 13, 26, tzinfo=datetime.timezone.utc), 'time_taken': 92153.0, 'time_delta': '1 day, 1:35:53', 'additions': 245, 'deletions': 4, 'state': 'closed'}, {'id': 436629715, 'number': 40, 'closed': datetime.datetime(2020, 6, 18, 16, 57, 59, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 18, 16, 55, 21, tzinfo=datetime.timezone.utc), 'time_taken': 158.0, 'time_delta': '0:02:38', 'additions': 25, 'deletions': 20, 'state': 'closed'}, {'id': 435078957, 'number': 35, 'closed': datetime.datetime(2020, 6, 16, 9, 11, 56, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 16, 9, 8, 43, tzinfo=datetime.timezone.utc), 'time_taken': 193.0, 'time_delta': '0:03:13', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 435071984, 'number': 34, 'closed': datetime.datetime(2020, 6, 18, 9, 3, 37, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 16, 8, 56, 8, tzinfo=datetime.timezone.utc), 'time_taken': 173249.0, 'time_delta': '2 days, 0:07:29', 'additions': 137, 'deletions': 6, 'state': 'closed'}, {'id': 433588024, 'number': 29, 'closed': datetime.datetime(2020, 6, 12, 10, 7, 30, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 12, 10, 4, 37, tzinfo=datetime.timezone.utc), 'time_taken': 173.0, 'time_delta': '0:02:53', 'additions': 18, 'deletions': 18, 'state': 'closed'}, {'id': 433583742, 'number': 28, 'closed': datetime.datetime(2020, 6, 12, 10, 20, 28, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 12, 9, 56, 1, tzinfo=datetime.timezone.utc), 'time_taken': 1467.0, 'time_delta': '0:24:27', 'additions': 2, 'deletions': 3, 'state': 'closed'}, {'id': 432965673, 'number': 22, 'closed': datetime.datetime(2020, 6, 11, 14, 4, 52, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 11, 9, 51, 19, tzinfo=datetime.timezone.utc), 'time_taken': 15213.0, 'time_delta': '4:13:33', 'additions': 428, 'deletions': 275, 'state': 'closed'}, {'id': 431298894, 'number': 20, 'closed': datetime.datetime(2020, 6, 11, 9, 1, 33, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 8, 17, 49, 35, tzinfo=datetime.timezone.utc), 'time_taken': 227518.0, 'time_delta': '2 days, 15:11:58', 'additions': 189, 'deletions': 7, 'state': 'closed'}, {'id': 431031524, 'number': 19, 'closed': datetime.datetime(2020, 6, 8, 10, 28, 39, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 8, 10, 22, 12, tzinfo=datetime.timezone.utc), 'time_taken': 387.0, 'time_delta': '0:06:27', 'additions': 5, 'deletions': 0, 'state': 'closed'}, {'id': 428584343, 'number': 16, 'closed': datetime.datetime(2020, 6, 6, 12, 34, 22, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 5, 16, 58, 54, tzinfo=datetime.timezone.utc), 'time_taken': 70528.0, 'time_delta': '19:35:28', 'additions': 138, 'deletions': 48, 'state': 'closed'}, {'id': 427723382, 'number': 13, 'closed': datetime.datetime(2020, 6, 5, 15, 59, 14, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 4, 9, 57, 28, tzinfo=datetime.timezone.utc), 'time_taken': 108106.0, 'time_delta': '1 day, 6:01:46', 'additions': 155, 'deletions': 3, 'state': 'closed'}, {'id': 426102423, 'number': 11, 'closed': datetime.datetime(2020, 6, 3, 8, 39, 37, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 1, 16, 58, 1, tzinfo=datetime.timezone.utc), 'time_taken': 142896.0, 'time_delta': '1 day, 15:41:36', 'additions': 162, 'deletions': 1, 'state': 'closed'}, {'id': 423124710, 'number': 4, 'closed': datetime.datetime(2020, 5, 26, 13, 38, 43, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 5, 26, 10, 38, 49, tzinfo=datetime.timezone.utc), 'time_taken': 10794.0, 'time_delta': '2:59:54', 'additions': 49, 'deletions': 8, 'state': 'closed'}]"
274856953,gsoc-swift-baggage-context,slashmo/gsoc-swift-baggage-context,Swift,2,4,4,3,42,0,2,0,"[{'id': 474833085, 'number': 29, 'closed': datetime.datetime(2020, 8, 31, 13, 3, 57, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 27, 17, 3, tzinfo=datetime.timezone.utc), 'time_taken': 331257.0, 'time_delta': '3 days, 20:00:57', 'additions': 326, 'deletions': 72, 'state': 'closed'}, {'id': 469244014, 'number': 21, 'closed': datetime.datetime(2020, 8, 18, 6, 53, 9, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 18, 6, 47, 35, tzinfo=datetime.timezone.utc), 'time_taken': 334.0, 'time_delta': '0:05:34', 'additions': 5, 'deletions': 5, 'state': 'closed'}, {'id': 468709668, 'number': 20, 'closed': datetime.datetime(2020, 8, 17, 9, 30, 35, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 17, 9, 27, 45, tzinfo=datetime.timezone.utc), 'time_taken': 170.0, 'time_delta': '0:02:50', 'additions': 2, 'deletions': 1, 'state': 'closed'}, {'id': 468704418, 'number': 19, 'closed': datetime.datetime(2020, 8, 17, 9, 18, 53, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 17, 9, 18, 44, tzinfo=datetime.timezone.utc), 'time_taken': 9.0, 'time_delta': '0:00:09', 'additions': 3, 'deletions': 1, 'state': 'closed'}, {'id': 468696106, 'number': 18, 'closed': datetime.datetime(2020, 8, 17, 9, 7, 54, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 17, 9, 4, 21, tzinfo=datetime.timezone.utc), 'time_taken': 213.0, 'time_delta': '0:03:33', 'additions': 458, 'deletions': 88, 'state': 'closed'}, {'id': 463441636, 'number': 15, 'closed': datetime.datetime(2020, 8, 6, 5, 7, 2, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 5, 15, 1, 58, tzinfo=datetime.timezone.utc), 'time_taken': 50704.0, 'time_delta': '14:05:04', 'additions': 3, 'deletions': 3, 'state': 'closed'}, {'id': 455110962, 'number': 11, 'closed': datetime.datetime(2020, 7, 22, 14, 54, 33, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 22, 13, 13, 21, tzinfo=datetime.timezone.utc), 'time_taken': 6072.0, 'time_delta': '1:41:12', 'additions': 14, 'deletions': 6, 'state': 'closed'}, {'id': 454492088, 'number': 10, 'closed': datetime.datetime(2020, 7, 22, 12, 59, 12, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 21, 13, 6, 29, tzinfo=datetime.timezone.utc), 'time_taken': 85963.0, 'time_delta': '23:52:43', 'additions': 76, 'deletions': 0, 'state': 'closed'}, {'id': 443461118, 'number': 4, 'closed': datetime.datetime(2020, 7, 2, 11, 42, 28, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 2, 11, 40, 9, tzinfo=datetime.timezone.utc), 'time_taken': 139.0, 'time_delta': '0:02:19', 'additions': 233, 'deletions': 1, 'state': 'closed'}]"
