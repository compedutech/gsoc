pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
1016319111,bump version constraint of package:analyzer,"The [usage](https://github.com/dart-lang/mockito/blob/2acf22f4d400c6e1eee0f6ca595092220fba8b34/lib/src/builder.dart#L412) of the `libraryExports` property (of the `LibraryOrAugmentationElement` class which is implemented by `LibraryElement`) stipulates at least v4.3.0 of `package:analyzer`
- see https://github.com/dart-lang/sdk/commit/e23101a16fedf090127b52142ac96a6091d2f617#diff-4d31b9e465218793b506aee1f5156d6d80a86c26e6c480b33eb306f20817bdb5R1614 where `libraryExports` was added
- also see the changelog entry https://github.com/dart-lang/sdk/blob/main/pkg/analyzer/CHANGELOG.md#430",False,558,https://api.github.com/repos/dart-lang/mockito/pulls/558,https://github.com/dart-lang/mockito/pull/558,closed,1,1,1,1,1,0,0,0,[],2022-08-03 13:31:58+00:00,2022-09-14 18:15:50+00:00,3645832.0,"42 days, 4:43:52",[],"[{'commit_sha': '60c1509aac67b9aeee4237db9bee689dd02928ed', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}]",,52425971,,User,,39,,5,5
951213664,Produce basic JSON summary of a specified package,"This will include the names of public symbols and their kind (function, variable, class, etc)",True,1,https://api.github.com/repos/CicadaCinema/pana/pulls/1,https://github.com/CicadaCinema/pana/pull/1,closed,1621,0,20,31,0,58,0,0,[],2022-05-30 17:36:32+00:00,2022-06-29 16:21:29+00:00,2587497.0,"29 days, 22:44:57","[{'comment_id': 885006750, 'comment_body': 'The analyser will have a number of distinct functions (creating a JSON summary, comparing two JSON summaries, comparing two package versions directly), so it probably makes sense to introduce subcommands for each of these functions', 'comment_created': datetime.datetime(2022, 5, 30, 17, 37, 6, tzinfo=datetime.timezone.utc), 'commenter': 'CicadaCinema', 'type': 'User'}, {'comment_id': 885006872, 'comment_body': 'There are 3 kinds of libraries in a package which can be imported:\r\n1. `lib/my_package.dart` (we usually import this library when we want to use the package)\r\n2. `lib/*.dart` (could be in a sub-folder of `lib`, eg `lib/feature/*.dart`)\r\n3. `lib/src/*.dart` (not in a sub-folder)\r\n\r\nEven type 3 libraries can be imported for use, but it might make sense to exclude these libraries from analysis (by default, adding a switch to disable this).', 'comment_created': datetime.datetime(2022, 5, 30, 17, 37, 23, tzinfo=datetime.timezone.utc), 'commenter': 'CicadaCinema', 'type': 'User'}, {'comment_id': 885286725, 'comment_body': 'Yeah - anything under lib/src (also sub-folders) is considered private to the package by convention, and should not be included in the summary of the exported API surface.\r\n\r\nhttps://dart.dev/guides/libraries/create-library-packages#what-makes-a-library-package', 'comment_created': datetime.datetime(2022, 5, 31, 7, 21, 28, tzinfo=datetime.timezone.utc), 'commenter': 'sigurdm', 'type': 'User'}, {'comment_id': 885287502, 'comment_body': 'Yes, but also the functionality can be exposed as dart api, such that pana can call directly into it.\r\n\r\n', 'comment_created': datetime.datetime(2022, 5, 31, 7, 22, 20, tzinfo=datetime.timezone.utc), 'commenter': 'sigurdm', 'type': 'User'}, {'comment_id': 886059642, 'comment_body': ""okay - for now I think I will try to create a separate CLI interface which will call the dart api (at least that's what I think I am doing)"", 'comment_created': datetime.datetime(2022, 5, 31, 19, 30, 51, tzinfo=datetime.timezone.utc), 'commenter': 'CicadaCinema', 'type': 'User'}, {'comment_id': 886689453, 'comment_body': 'I would suggest throwing a custom subclass of `Exception`. Then catching that in `SummaryCommand` and exiting non-zero.', 'comment_created': datetime.datetime(2022, 6, 1, 11, 21, 57, tzinfo=datetime.timezone.utc), 'commenter': 'jonasfj', 'type': 'User'}, {'comment_id': 886689884, 'comment_body': '```suggestion\r\n  if (!await Directory.exists(packageLocation)) {\r\n```', 'comment_created': datetime.datetime(2022, 6, 1, 11, 22, 29, tzinfo=datetime.timezone.utc), 'commenter': 'jonasfj', 'type': 'User'}, {'comment_id': 886701912, 'comment_body': 'Consider using: `AnalysisContextCollection`, see:\r\nhttps://pub.dev/documentation/analyzer/latest/dart_analysis_analysis_context_collection/AnalysisContextCollection-class.html\r\n\r\n', 'comment_created': datetime.datetime(2022, 6, 1, 11, 37, 22, tzinfo=datetime.timezone.utc), 'commenter': 'jonasfj', 'type': 'User'}, {'comment_id': 886702545, 'comment_body': ""Isn't it more like that analysis of the specified file failed?"", 'comment_created': datetime.datetime(2022, 6, 1, 11, 38, 4, tzinfo=datetime.timezone.utc), 'commenter': 'jonasfj', 'type': 'User'}, {'comment_id': 886704816, 'comment_body': 'Also instead of writing to `stderr` consider creating an context object like:\r\n```dart\r\nabstract class PackageAnalysisContext {\r\n  AnalysisContextCollection get analysisContextCollection;\r\n  AnalysisContext contextFor(String path) => analysisContextCollection.contextFor(path);\r\n\r\n  /// Log [message] as warning that something unexpected happened.\r\n  void warning(String message);\r\n}\r\n```\r\n\r\nThen people calling `generateSummary` can provide an instance of `PackageAnalysisContext` and they can decide whether to print to stderr or write a log file.', 'comment_created': datetime.datetime(2022, 6, 1, 11, 40, 56, tzinfo=datetime.timezone.utc), 'commenter': 'jonasfj', 'type': 'User'}, {'comment_id': 886707043, 'comment_body': ""Be ware that packages may contain an `analysis_options.yaml` file.\r\nWe can use a `OverlayResourceProvider` to override this file in-memory, if we want to:\r\nhttps://github.com/dart-lang/pub/blob/ea070238f14d31e28fe448cb136d31bed96705e5/lib/src/dart.dart#L45-L53\r\n\r\nIt has pros/cons, if we override it then users can't opt files out of analysis. On the other hand, we might not want to analyse the package with whatever options they've enabled."", 'comment_created': datetime.datetime(2022, 6, 1, 11, 43, 39, tzinfo=datetime.timezone.utc), 'commenter': 'jonasfj', 'type': 'User'}, {'comment_id': 886708674, 'comment_body': ""Take a look at, various visitors:\r\nhttps://pub.dev/documentation/analyzer/latest/dart_element_element/ElementVisitor-class.html\r\n\r\nAlso it's probably a good idea if we read the tutorial:\r\nhttps://github.com/dart-lang/sdk/blob/main/pkg/analyzer/doc/tutorial/tutorial.md\r\n\r\nIt's probably a little outdated/incomplete, like I think new types have been introduced with the null-safety migration."", 'comment_created': datetime.datetime(2022, 6, 1, 11, 45, 36, tzinfo=datetime.timezone.utc), 'commenter': 'jonasfj', 'type': 'User'}, {'comment_id': 886719309, 'comment_body': ""I like this sanity check, we might want to check that `$packageLocation/.dart_tool/package_config.json` exists.\r\n\r\nIn short, `dart pub get` will:\r\n * Solve dependencies to satisfy constraints (only one version of each package).\r\n * Download/extract dependencies into `$PUB_CACHE` (default `$HOME/.pub-cache/`)\r\n * Write a `pubspec.lock` file (if one doesn't exist)\r\n * Write a `.dart_tool/package_config.json` file which maps package names to folders in `PUB_CACHE`.\r\n  (This is how dependencies are resolved).\r\n\r\nDetails see:\r\nhttps://github.com/dart-lang/language/blob/master/accepted/2.8/language-versioning/package-config-file-v2.md\r\n\r\nThis isn't important, but I'm guessing we don't want to analyze code without fetching dependencies first. Ofcourse it's possible that we only want to do a AST level analysis. There are pros/cons here.. If we do an AST level analysis we won't be able to see which methods are inherited when creating a subclass of a class from a dependency, or at-least if we want to we'll have to find the summary of the dependency and do some work..."", 'comment_created': datetime.datetime(2022, 6, 1, 11, 58, 18, tzinfo=datetime.timezone.utc), 'commenter': 'jonasfj', 'type': 'User'}, {'comment_id': 886946030, 'comment_body': 'hmm, I\'ve read those but I\'m still not quite sure how visitors would be useful in this case (compared to getters), because:\r\n- we\'re not interested in private elements such as functions inside functions\r\n- we don\'t have a goal as broad as \'count the number of elements of a certain kind in an entire CompilationUnit\'\r\n\r\nAlso, the schema of the JSON summary I have in mind is rather rigid - I would assume it \'mirrors\' the way getters are used to traverse the AST structure:\r\n\r\n<details>\r\n  <summary>what the JSON summary could look like</summary>\r\n\r\n```json\r\n{\r\n  ""libraries"": [\r\n    {\r\n      ""name"": ""library_1"",\r\n      ""exports"": [\r\n        {\r\n          ""name"": ""myClass"",\r\n          ""kind"": ""class""\r\n        },\r\n        {\r\n          ""name"": ""myFunction"",\r\n          ""kind"": ""function""\r\n        }\r\n      ]\r\n    }\r\n  ]\r\n}\r\n```\r\n</details>\r\n\r\nStill, I concede that the visitor model is probably more flexible and will pay off in the long run. Given that we\'re still two weeks away from the start of the coding period, maybe I will experiment with visitors, instead of repeating the getter model I used in my sample project.\r\n', 'comment_created': datetime.datetime(2022, 6, 1, 15, 29, 6, tzinfo=datetime.timezone.utc), 'commenter': 'CicadaCinema', 'type': 'User'}, {'comment_id': 887002808, 'comment_body': ""Also reading that document, I realise I haven't touched a `CompilationUnit` at all in my sample project at all - I obtained a `LibraryElement` instead for every .dart file in the package folder. What's the difference between the two?\r\n\r\nIt looks like both represent a resolved AST, but a library has to be explicitly defined using the `library` directive (and can be split between different files using `part`). Does every .dart file have its own `CompilationUnit` and vice versa?\r\n\r\nIt looks like symbols don't have to be part of a library in order to be public and importable, so I should probably work with units instead of libraries. Right?"", 'comment_created': datetime.datetime(2022, 6, 1, 16, 23, 25, tzinfo=datetime.timezone.utc), 'commenter': 'CicadaCinema', 'type': 'User'}, {'comment_id': 887018870, 'comment_body': ""> Isn't it more like that analysis of the specified file failed?\r\n\r\nMore specifically, I might say 'Building a resolved AST for this library returned an invalid result.' (Not sure if this is too verbose)\r\n\r\n\r\n\r\n> Then people calling `generateSummary` can provide an instance of `PackageAnalysisContext` and they can decide whether to print to stderr or write a log file.\r\n\r\nRight, so they would have to provide their own handler? In case of a fatal error I could throw an exception instead of calling the handler (well, I suppose I could call the handler, let the user log the error and THEN throw the exception), like `InconsistentAnalysisException` in the case of `AnalysisSession`."", 'comment_created': datetime.datetime(2022, 6, 1, 16, 41, 44, tzinfo=datetime.timezone.utc), 'commenter': 'CicadaCinema', 'type': 'User'}, {'comment_id': 887129673, 'comment_body': ""Yeah, that sounds like a good idea. Is there a way for the analyser (or some other API) to fetch dependencies? I'm guessing not, we'll have to throw an exception and ask the user to run `dart pub get` themselves (if running through the CLI), or use `Process.run()`. Neither option is ideal really..."", 'comment_created': datetime.datetime(2022, 6, 1, 17, 36, 56, tzinfo=datetime.timezone.utc), 'commenter': 'CicadaCinema', 'type': 'User'}, {'comment_id': 887690714, 'comment_body': 'I think each dart file is represented by a `CompilationUnit`, and a LibraryElement that is split in parts is then represented as several `CompilationUnit`s\r\n\r\n(I think `CompilationUnit` is kind of a mis-nomer as I would expect the unit of compilation to actually be the library...)', 'comment_created': datetime.datetime(2022, 6, 2, 8, 14, 10, tzinfo=datetime.timezone.utc), 'commenter': 'sigurdm', 'type': 'User'}, {'comment_id': 896754970, 'comment_body': 'You can also use `ArgumentError`', 'comment_created': datetime.datetime(2022, 6, 14, 12, 29, 54, tzinfo=datetime.timezone.utc), 'commenter': 'jonasfj', 'type': 'User'}, {'comment_id': 900269256, 'comment_body': 'Consider:\r\n```suggestion\r\n  final configTemplate = json.encode({\r\n  ""configVersion"": 2,\r\n  ""packages"": [\r\n    {\r\n      ""name"": ""test_package"",\r\n      ""rootUri"": ""../"",\r\n      ""packageUri"": ""lib/"",\r\n      ""languageVersion"": ""2.10""\r\n    }\r\n  ],\r\n  ""generated"": ""2022-01-01T00:00:00.000000Z"",\r\n  ""generator"": ""pub"",\r\n  ""generatorVersion"": ""2.17.3""\r\n});\r\n```', 'comment_created': datetime.datetime(2022, 6, 17, 15, 39, 23, tzinfo=datetime.timezone.utc), 'commenter': 'jonasfj', 'type': 'User'}, {'comment_id': 900269729, 'comment_body': ""Also consider not using language version 2.10 anywhere... ensure that lower-bound SDK constraint is always `>= 2.12`, so that you've opted into null-safety."", 'comment_created': datetime.datetime(2022, 6, 17, 15, 40, 3, tzinfo=datetime.timezone.utc), 'commenter': 'jonasfj', 'type': 'User'}, {'comment_id': 900271953, 'comment_body': 'nit: there is no specification for it in dart... but in golang, people tend to through data used for testing into a testdata/ folder.\r\n\r\nConsider a folder layout like:\r\n```\r\nlib/\r\n  src/\r\n    package_analysis/\r\n      package_analysis.dart // exports everything you want to make publicly visible\r\n      summary.dart\r\n      ... // all the other files\r\ntest/\r\n  package_analysis/\r\n    package_analysis_test.dart\r\n    testdata/\r\n      basic.yaml\r\n      ...\r\n```', 'comment_created': datetime.datetime(2022, 6, 17, 15, 42, 50, tzinfo=datetime.timezone.utc), 'commenter': 'jonasfj', 'type': 'User'}, {'comment_id': 900272701, 'comment_body': 'Prefer `exportedClasses`, see: https://google.github.io/styleguide/jsoncstyleguide.xml\r\n\r\n', 'comment_created': datetime.datetime(2022, 6, 17, 15, 43, 46, tzinfo=datetime.timezone.utc), 'commenter': 'jonasfj', 'type': 'User'}, {'comment_id': 900275062, 'comment_body': 'Should we call this `path`, `importPath` or `filepath` or? maybe `path` is fine?', 'comment_created': datetime.datetime(2022, 6, 17, 15, 46, 55, tzinfo=datetime.timezone.utc), 'commenter': 'jonasfj', 'type': 'User'}, {'comment_id': 900276925, 'comment_body': 'You might want to do something like:\r\n```suggestion\r\n  ClassShape({required this.id, required this.name, required this.methods});\r\n```\r\n\r\nThat way there is less risk something will blow up.', 'comment_created': datetime.datetime(2022, 6, 17, 15, 49, 25, tzinfo=datetime.timezone.utc), 'commenter': 'jonasfj', 'type': 'User'}, {'comment_id': 900277620, 'comment_body': 'This property is probably worth documenting.\r\n```suggestion\r\n  /// Unique identifier for this [ClassShape] within the given [PackageShape].\r\n  ///\r\n  /// Classes will be referenced using their [id] in other shapes.\r\n  final int id;\r\n```', 'comment_created': datetime.datetime(2022, 6, 17, 15, 50, 14, tzinfo=datetime.timezone.utc), 'commenter': 'jonasfj', 'type': 'User'}, {'comment_id': 900278663, 'comment_body': 'I would suggest documenting this property too... something saying that this is `[ClassShape.id]` of the classes that are exported.', 'comment_created': datetime.datetime(2022, 6, 17, 15, 51, 32, tzinfo=datetime.timezone.utc), 'commenter': 'jonasfj', 'type': 'User'}, {'comment_id': 900282884, 'comment_body': ""nit: but instead of making a class that a single member that can be called once.\r\n\r\nHave you considered creating a function with nested functions?\r\n\r\nBecause this isn't really a class that you create an instance of and then you do things to it... or pass it around.\r\nIt's a class you instantiate and then you call a function on it.\r\n\r\n```dart\r\nFuture<PackageShape> summarizePackage(\r\n    PackageAnalysisContext packageAnalysisContext,\r\n    String packageLocation,\r\n) async {\r\n  var _classCounter = 0;\r\n  final _package = PackageShape(<LibraryShape>[], <ClassShape>[]);\r\n\r\n  /// Ids of classes defined in a given library\r\n  final _classDefinitions = <String, Set<int>>{};\r\n\r\n  /// Identifiers of libraries exported in a given library\r\n  final _libraryExports = <String, List<String>>{};\r\n\r\n  /// Ids of classes exported in a given library\r\n  final _classExports = <String, Set<int>>{};\r\n  \r\n  //#region Methods for summarizing elements\r\n\r\nvoid summarizeLibraryElement(\r\n      LibraryElement libraryElement, String libraryPath) {\r\n    var identifier = libraryElement.identifier;\r\n\r\n    // classes defined in this library\r\n    var classes = libraryElement.topLevelElements\r\n        .where((element) => (element.isPublic && element is ClassElement))\r\n        .map((element) => summarizeClassElement(element as ClassElement))\r\n        .toList();\r\n    var classIds = classes.map((thisClass) => thisClass.id).toSet();\r\n\r\n    _package.classes.addAll(classes);\r\n    _package.libraries.add(LibraryShape(identifier, <int>{}));\r\n\r\n    _classDefinitions[identifier] = classIds;\r\n    _libraryExports[identifier] = libraryElement.exportedLibraries\r\n        .map((library) => library.identifier)\r\n        .toList();\r\n  }\r\n\r\n  ClassShape summarizeClassElement(ClassElement classElement) {\r\n    var methods = classElement.methods\r\n        .where((element) => element.isPublic)\r\n        .map(summarizeMethodElement)\r\n        .toList();\r\n    _classCounter += 1;\r\n    return ClassShape(_classCounter, classElement.name, methods);\r\n  }\r\n\r\n  MethodShape summarizeMethodElement(MethodElement methodElement) {\r\n    return MethodShape(methodElement.name);\r\n  }\r\n\r\n  //#endregion\r\n  \r\n  var collection = packageAnalysisContext.analysisContextCollection;\r\n\r\n    for (var context in collection.contexts) {\r\n      for (var filePath in context.contextRoot.analyzedFiles().sorted()) {\r\n        final session = context.currentSession;\r\n        final library = await session.getResolvedLibrary(filePath);\r\n\r\n        // match [packageLocation]/lib/*.dart\r\n        // but exclude [packageLocation]/lib/src/*.dart\r\n        if (!(path.isWithin(path.join(packageLocation, 'lib'), filePath) &&\r\n            !path.isWithin(\r\n                path.join(packageLocation, 'lib', 'src'), filePath) &&\r\n            path.extension(filePath) == '.dart')) {\r\n          continue;\r\n        }\r\n\r\n        // this file is just part of another library\r\n        if (library is NotLibraryButPartResult) {\r\n          continue;\r\n        }\r\n\r\n        // ensure that resolving has been successful\r\n        if (library is! ResolvedLibraryResult) {\r\n          packageAnalysisContext\r\n              .warning('analysis of $filePath as a library failed');\r\n          continue;\r\n        }\r\n\r\n        summarizeLibraryElement(\r\n            library.element, path.relative(filePath, from: packageLocation));\r\n      }\r\n    }\r\n\r\n    final allLibraryIdentifiers = _classDefinitions.keys.toList();\r\n\r\n    // add classes exported in the same library they are defined\r\n    for (final libraryIdentifier in allLibraryIdentifiers) {\r\n      _classExports[libraryIdentifier] = <int>{};\r\n      _classExports[libraryIdentifier]!\r\n          .addAll(_classDefinitions[libraryIdentifier]!);\r\n    }\r\n\r\n    var hasFixedPoint = false;\r\n    while (!hasFixedPoint) {\r\n      // initially assume we have a fixed point\r\n      hasFixedPoint = true;\r\n      for (final libraryIdentifier in allLibraryIdentifiers) {\r\n        for (final exportedLibrary in _libraryExports[libraryIdentifier]!) {\r\n          // everything in `exportedLibrary` is also exported in\r\n          // `libraryIdentifier` if it isn't already\r\n          if (!_classExports[libraryIdentifier]!\r\n              .containsAll(_classExports[exportedLibrary]!)) {\r\n            // at least some symbols aren't already exported\r\n            _classExports[libraryIdentifier]!\r\n                .addAll(_classExports[exportedLibrary]!);\r\n            // we made some changes\r\n            hasFixedPoint = false;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    // fill in `_package` with information from _classExports\r\n    for (var library in _package.libraries) {\r\n      library.exportedClasses.addAll(_classExports[library.identifier]!);\r\n    }\r\n\r\n    return _package;\r\n}\r\n```\r\n\r\nThis is the same, just that now everything is private and exists inside a single function...\r\n"", 'comment_created': datetime.datetime(2022, 6, 17, 15, 56, 54, tzinfo=datetime.timezone.utc), 'commenter': 'jonasfj', 'type': 'User'}, {'comment_id': 900286278, 'comment_body': 'Consider adding `@sealed` from `package:meta`.\r\n```suggestion\r\n@sealed\r\n@JsonSerializable()\r\nclass PackageShape {\r\n```\r\n\r\nThis is a nice way to indicate to anyone else that they should not extend or implement you subclasses of your class.\r\nThis is a data class, I hope we can all agree that no-one should ever extend it.', 'comment_created': datetime.datetime(2022, 6, 17, 16, 1, 6, tzinfo=datetime.timezone.utc), 'commenter': 'jonasfj', 'type': 'User'}, {'comment_id': 900358964, 'comment_body': ""alright! not sure why languageVersion isn't the same as generatorVersion here, though - I've had Dart 2.17.3 installed on my machine throughout"", 'comment_created': datetime.datetime(2022, 6, 17, 17, 9, 19, tzinfo=datetime.timezone.utc), 'commenter': 'CicadaCinema', 'type': 'User'}, {'comment_id': 900366653, 'comment_body': ""can `package:my_package/library.dart` really be called a path? I specifically didn't call this `path` because it's NOT the filesystem path for this library file"", 'comment_created': datetime.datetime(2022, 6, 17, 17, 14, 40, tzinfo=datetime.timezone.utc), 'commenter': 'CicadaCinema', 'type': 'User'}, {'comment_id': 900367598, 'comment_body': 'I suppose the same should go for all the other Shape classes?', 'comment_created': datetime.datetime(2022, 6, 17, 17, 15, 53, tzinfo=datetime.timezone.utc), 'commenter': 'CicadaCinema', 'type': 'User'}, {'comment_id': 900368696, 'comment_body': 'See: https://dart.dev/guides/language/evolution#language-versioning\r\n\r\n', 'comment_created': datetime.datetime(2022, 6, 17, 17, 17, 22, tzinfo=datetime.timezone.utc), 'commenter': 'jonasfj', 'type': 'User'}, {'comment_id': 900369057, 'comment_body': 'uri? ', 'comment_created': datetime.datetime(2022, 6, 17, 17, 17, 52, tzinfo=datetime.timezone.utc), 'commenter': 'jonasfj', 'type': 'User'}, {'comment_id': 900369910, 'comment_body': 'Yeah, in fact it probably applies to almost all classes you create... maybe not the AnalysisContext, that one is nice that people can implement themselves, if they want to report warnings differently.', 'comment_created': datetime.datetime(2022, 6, 17, 17, 19, 3, tzinfo=datetime.timezone.utc), 'commenter': 'jonasfj', 'type': 'User'}, {'comment_id': 901624360, 'comment_body': 'Sort maybe?', 'comment_created': datetime.datetime(2022, 6, 20, 12, 46, 47, tzinfo=datetime.timezone.utc), 'commenter': 'jonasfj', 'type': 'User'}, {'comment_id': 901768376, 'comment_body': 'In my mind, the `exported` prefix tells us that this property uses integer ids as pointers.', 'comment_created': datetime.datetime(2022, 6, 20, 14, 58, 14, tzinfo=datetime.timezone.utc), 'commenter': 'CicadaCinema', 'type': 'User'}, {'comment_id': 901925893, 'comment_body': 'Maybe this can be called something like `ExecutableShape` seeing as analyzer has the class `ExecutableElement` which is a superclass for both `FunctionElement` and `MethodElement`?', 'comment_created': datetime.datetime(2022, 6, 20, 18, 27, 14, tzinfo=datetime.timezone.utc), 'commenter': 'CicadaCinema', 'type': 'User'}, {'comment_id': 902740337, 'comment_body': ""added an check for `File(path.join(packageLocation, '.dart_tool', 'package_config.json')).exists()`"", 'comment_created': datetime.datetime(2022, 6, 21, 15, 5, 34, tzinfo=datetime.timezone.utc), 'commenter': 'CicadaCinema', 'type': 'User'}, {'comment_id': 903402810, 'comment_body': '++, or ` CallableShape`, but yes `ExecutableShape` is very nice! :D', 'comment_created': datetime.datetime(2022, 6, 22, 7, 48, 29, tzinfo=datetime.timezone.utc), 'commenter': 'jonasfj', 'type': 'User'}, {'comment_id': 903406507, 'comment_body': 'nit: perhaps we should rename the files `shapes.dart` and `shapes.g.dart`', 'comment_created': datetime.datetime(2022, 6, 22, 7, 52, 19, tzinfo=datetime.timezone.utc), 'commenter': 'jonasfj', 'type': 'User'}, {'comment_id': 903423687, 'comment_body': '```suggestion\r\n/// A Shape for describing a library, which may consist of multiple parts.\r\n```', 'comment_created': datetime.datetime(2022, 6, 22, 8, 6, 56, tzinfo=datetime.timezone.utc), 'commenter': 'jonasfj', 'type': 'User'}, {'comment_id': 903424621, 'comment_body': '```suggestion\r\n  final Set<int> exportedClasses;\r\n```', 'comment_created': datetime.datetime(2022, 6, 22, 8, 7, 56, tzinfo=datetime.timezone.utc), 'commenter': 'jonasfj', 'type': 'User'}, {'comment_id': 903425975, 'comment_body': 'I would personally use trailing comma, but I know others feel differently, do whatever you like :shrug: \r\n\r\nI just wanted to point out that it can also be written as:\r\n```suggestion\r\n  LibraryShape({\r\n    required this.uri,\r\n    required this.getters,\r\n    required this.setters,\r\n    required this.functions,\r\n    required this.exportedClasses,\r\n  });\r\n```', 'comment_created': datetime.datetime(2022, 6, 22, 8, 9, 22, tzinfo=datetime.timezone.utc), 'commenter': 'jonasfj', 'type': 'User'}, {'comment_id': 903426232, 'comment_body': '```suggestion\r\n  final int id;\r\n```', 'comment_created': datetime.datetime(2022, 6, 22, 8, 9, 41, tzinfo=datetime.timezone.utc), 'commenter': 'jonasfj', 'type': 'User'}, {'comment_id': 903430234, 'comment_body': 'Just saying trailing comma is also allowed here, but do whatever you want :rofl: \r\n```suggestion\r\n  final package = PackageShape(\r\n    libraries: <LibraryShape>[],\r\n    classes: <ClassShape>[]\r\n  );\r\n```', 'comment_created': datetime.datetime(2022, 6, 22, 8, 13, 43, tzinfo=datetime.timezone.utc), 'commenter': 'jonasfj', 'type': 'User'}, {'comment_id': 903433740, 'comment_body': ""Just a suggestion, it's doesn't matter...\r\n```suggestion\r\n  /// A mapping from [LibraryShape.uri] to [ClassShape.id] of each class defined in a given library.\r\n  final libraryUriToDefinedClassID = <String, Set<int>>{};\r\n```\r\n\r\nBut for all these maps, it might be preferable to write them as: `<something>To<something>`, like:\r\n * `libraryUriToExportedLibraryUris` instead of `libraryExports`\r\n * `libraryUriToExportedClassIDs` instead of `classExports`\r\n\r\n-----\r\n\r\nGiven that all of these are `libraryUriTo....` maybe we could do something like:\r\n```dart\r\n\r\n/// Structure that holds intermediate information used during construction of [PackageShape].\r\n///\r\n/// This is only intended for use inside [summarizePackage].\r\nclass _LibraryEntry {\r\n  final Set<int> definedClassIDs;\r\n  final List<String> exportedLibraryUris;\r\n  final Set<int> exportedClassIDs;\r\n}\r\n\r\nFuture<PackageShape> summarizePackage(\r\n  PackageAnalysisContext packageAnalysisContext,\r\n  String packageLocation,\r\n) async {\r\n  ...\r\n\r\n  // A map from [Library.uri] to [_LibraryEntry] which holds information about:\r\n  //  * defined classes,\r\n  //  * exported library uris,\r\n  //  * exported classes.\r\n  //\r\n  // This is used for fixed-point computation of transitively exported classes.\r\n  final libraries = <String, _LibraryEntry>{};\r\n```\r\n\r\nThis is just to make the code easier to read / follow... we could even a step further can rename `_LibraryEntry` to `_LibraryShapeBuilder`, because that's kind of what it is... It's a thing that is used to build a `LibraryShape`.\r\n```dart\r\n\r\nclass _LibraryShapeBuilder {\r\n  final Set<int> definedClassIDs;\r\n  final List<String> exportedLibraryUris;\r\n  final Set<int> exportedClassIDs;\r\n\r\n  ShapeBuilder build() => LibraryShape(....);\r\n}\r\n```\r\n\r\nPlease feel free to ignore all these suggestions... I'm just seeing patterns :rofl: and we don't have to over-engineer this -- keeping it simple is certainly a good idea, I think this is something we could consider doing later..."", 'comment_created': datetime.datetime(2022, 6, 22, 8, 17, 8, tzinfo=datetime.timezone.utc), 'commenter': 'jonasfj', 'type': 'User'}, {'comment_id': 903464650, 'comment_body': ""I propose putting this into a separate library / file, and making it a post-processing step.\r\n```dart\r\n/// Given a [PackageShape] create a new [PackageShape] structure where all [ClassShape.id] values\r\n/// have been canonicalized by sorting by class names blablabla. \r\nPackageShape canonicalizePackageShape(PackageShape summary) {\r\n  ...\r\n  return PackageShape(...); // create a new PackageShape.\r\n}\r\n```\r\n\r\nAnd maybe put this logic into `canonicalize_shape.dart` or something like that.\r\n\r\nYes, this is a bit wasteful since we are re-creating all the objects.. so we'll use more memory.\r\nBut it allows us to keep `ClassShape.id` as `final int id`, and if in the future we decide that this is expensive and we don't need to do it, we can just stop calling the function."", 'comment_created': datetime.datetime(2022, 6, 22, 8, 47, 26, tzinfo=datetime.timezone.utc), 'commenter': 'jonasfj', 'type': 'User'}, {'comment_id': 903468212, 'comment_body': ""here you need to look at `show` and `hide`\r\n\r\nIt is possible to do:\r\n```dart\r\nexport 'foo.dart' show retry;\r\n```\r\nThis exports only the symbol named `retry` from `foo.dart`.\r\n\r\nWe have to account for this, that's why `libraryExports` is probably too simple...\r\nYou need to remember what symbols are show/hide..."", 'comment_created': datetime.datetime(2022, 6, 22, 8, 50, 49, tzinfo=datetime.timezone.utc), 'commenter': 'jonasfj', 'type': 'User'}, {'comment_id': 903473564, 'comment_body': ""We might need to do something here too..\r\nLet's say we have `lib/foo.dart` which exports `lib/src/foo_impl.dart`, then clearly you need to scan through all of `foo_impl.dart`.\r\n\r\nBut the `LibraryShape` we get from `lib/src/foo_impl.dart` is not part of the `PackageShape`.\r\n\r\nThis means that we risk ending up in a situation where `PackageShape.classes` contains classes that aren't exported from anything, but was add there because we had to scan `lib/src/foo_impl.dart` because we didn't know yet if it was exported or not..\r\n\r\nWe can try to do an analysis upfront to figure out what is exported, before we create the `ClassShape` objects, or we can simple make a post-processing step there filters out any `PackageShape.classes` entries that aren't referenced elsewhere in the `PackageShape`."", 'comment_created': datetime.datetime(2022, 6, 22, 8, 55, 56, tzinfo=datetime.timezone.utc), 'commenter': 'jonasfj', 'type': 'User'}, {'comment_id': 905065922, 'comment_body': ""Should we consider making this a `List` because `Set` is probably unordered..\r\nAnd it's nice to store things ordered when saving to JSON, maybe?"", 'comment_created': datetime.datetime(2022, 6, 23, 14, 5, 34, tzinfo=datetime.timezone.utc), 'commenter': 'jonasfj', 'type': 'User'}, {'comment_id': 905075761, 'comment_body': ""Maybe we should start by checking if `package.classes` contains a `ClassShape.id == classElement.id`?\r\n\r\nSo we don't create duplicates.."", 'comment_created': datetime.datetime(2022, 6, 23, 14, 13, 23, tzinfo=datetime.timezone.utc), 'commenter': 'jonasfj', 'type': 'User'}, {'comment_id': 905077828, 'comment_body': 'I think we should consider creating `id`s for these as well... because of importing two conflicting definitions work, we probably need to consider it a breaking change to re-defined a previous re-exported symbol.', 'comment_created': datetime.datetime(2022, 6, 23, 14, 15, 14, tzinfo=datetime.timezone.utc), 'commenter': 'jonasfj', 'type': 'User'}, {'comment_id': 905119788, 'comment_body': 'yeah I think I agree - rather than relying on Sets it might be better to do this kind of check here', 'comment_created': datetime.datetime(2022, 6, 23, 14, 51, 10, tzinfo=datetime.timezone.utc), 'commenter': 'CicadaCinema', 'type': 'User'}, {'comment_id': 905274632, 'comment_body': ""putting this logic into `summarizeClassElement` will probably result in making its return type nullable - I've performed this check outside this function:\r\n\r\n```dart\r\npackage.classes.addAll(classes.where((thisClass) => !package.classes.contains(thisClass)));\r\n```"", 'comment_created': datetime.datetime(2022, 6, 23, 17, 12, 58, tzinfo=datetime.timezone.utc), 'commenter': 'CicadaCinema', 'type': 'User'}, {'comment_id': 906311990, 'comment_body': '```suggestion\r\nabstract class GlobalShapeBase {\r\n```', 'comment_created': datetime.datetime(2022, 6, 24, 18, 45, 9, tzinfo=datetime.timezone.utc), 'commenter': 'jonasfj', 'type': 'User'}, {'comment_id': 906312409, 'comment_body': 'because all global things have IDs, or we could call it something else.. but Base is the typical suffix.', 'comment_created': datetime.datetime(2022, 6, 24, 18, 45, 49, tzinfo=datetime.timezone.utc), 'commenter': 'jonasfj', 'type': 'User'}, {'comment_id': 906314513, 'comment_body': ""You're still creating a ClassShape object with the same ID as one that exists in `pacakge.classes` I would suggest not doing that... and just return the value that exists in `package.classes`.\r\n\r\n```dart\r\nfinal shape = package.classes.firstWhere((s) => s.id == classElement.id, else: () => null);\r\nif (shape != null) {\r\n  return shape;\r\n}\r\n```"", 'comment_created': datetime.datetime(2022, 6, 24, 18, 49, 17, tzinfo=datetime.timezone.utc), 'commenter': 'jonasfj', 'type': 'User'}]","[{'commit_sha': '0a7535811504638a1184bdb7fa7ce98db22fb481', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2b7c02b23b3486ea51c5fe3c8b846463ea919f86', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c840c5050d754b47a28ceae8a28230b48a32250b', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'de3628ade7b2b9ee458f9aebe232fd1e180fdf23', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b7319c0036f601a2a3a8cae193667efe136ade04', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd0f542b7ddde8cc5f410f9e0dfc5771cd68a87f4', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '525cd763689b0f9ef2fbce827a07e4a318d3cb25', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4b34b28e0f084b372aa64151232826dd0a2c57c7', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8825e45c0c1dcf60233b3d5b0aa9c4ff6ccb6c9c', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7e96efe7a432732a6654a5360c959df6525e41e6', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5e94836a4c48e9c87368b749cbadbdb98a47a87c', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8168fc68e7f669a5de6d2513fc131eb8e631a7a3', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0b64ba4e4b5660099c33e7ff4f2bc0911e7dc2c7', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3eb6862d19bcc27cb276da9a6263302dac35d906', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '63b1398ce5258869dfc04985c2c555c72b875741', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a1e0d274668841f8ecd359d8b25ec594d2f34f8c', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2cf89e23b4d6a1eb163f203c9c7a9c60e98e58a6', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '69447bb04e82681db9573381ad66f7cc8606c5ea', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b92f3d26607ff71c1e5dff857c9dcef0b5243354', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '01caf613bdd20a595d4c3722ac9045e9229edc4c', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '15a5718fe19d87bf0f91ac0f48171dc0627c6235', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '121ba5e11de18847a83d9bdaeb391746f769f088', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '948f1139e9ee95e2f76b7c012657e0ca9c21e4cc', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd4bbadffba273178fdb40226be4ab53c5cf31799', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a4ca6163efe04e00097dd1da0b2254c64811c40b', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6bb7940aca70d0ec771bbd857e3d4dde80298c40', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '00977d1db2375533db2a69c0c9301234343ed51f', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '03a02b09cbcc3c89e580ce865c77489008cb4692', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '34fa49b72625ec30bfd844305ae6ecfb4361e553', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '92db4cff4c1a89e4864c10fdfccdb030c9226565', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e3ec03e513bc0a26ecd667f78f0e5a272b1f3291', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}]",,52425971,,User,,39,,5,5
984064782,Perform basic lower bound constraint analysis,,True,2,https://api.github.com/repos/CicadaCinema/pana/pulls/2,https://github.com/CicadaCinema/pana/pull/2,closed,6470,935,57,117,3,68,0,0,[],2022-06-30 16:33:35+00:00,2022-08-30 14:48:44+00:00,5264109.0,"60 days, 22:15:09","[{'comment_id': 919797593, 'comment_body': ""Don't use `get...` names..\r\n```suggestion\r\n  List<String> get functionNames {\r\n    return functions.map((function) => function.name).toList();\r\n  }\r\n```"", 'comment_created': datetime.datetime(2022, 7, 13, 8, 27, 50, tzinfo=datetime.timezone.utc), 'commenter': 'jonasfj', 'type': 'User'}, {'comment_id': 919798994, 'comment_body': '```suggestion\r\n  List<String> get allMethodNames {\r\n```\r\n\r\nBut consider doing `bool hasSomeClassWithMethod(String name)`', 'comment_created': datetime.datetime(2022, 7, 13, 8, 29, 19, tzinfo=datetime.timezone.utc), 'commenter': 'jonasfj', 'type': 'User'}, {'comment_id': 919800807, 'comment_body': 'Just a suggestion to make your life easier :D\r\n```suggestion\r\n  PackageAnalysisContext context,\r\n```', 'comment_created': datetime.datetime(2022, 7, 13, 8, 31, tzinfo=datetime.timezone.utc), 'commenter': 'jonasfj', 'type': 'User'}, {'comment_id': 919804078, 'comment_body': '```suggestion\r\n  resource.File file(String path) =>\r\n      analysisSession.resourceProvider.getFile(path);\r\n\r\n  resource.Folder folder(String path) =>\r\n      analysisSession.resourceProvider.getFolder(path);\r\n```', 'comment_created': datetime.datetime(2022, 7, 13, 8, 34, 19, tzinfo=datetime.timezone.utc), 'commenter': 'jonasfj', 'type': 'User'}, {'comment_id': 919806010, 'comment_body': 'Not important, just a suggestion..', 'comment_created': datetime.datetime(2022, 7, 13, 8, 36, 13, tzinfo=datetime.timezone.utc), 'commenter': 'jonasfj', 'type': 'User'}, {'comment_id': 919806639, 'comment_body': 'What kind of URIs to what kind of paths, can we document this?\r\n\r\nAlso elaborate on what cases it might return `null`.', 'comment_created': datetime.datetime(2022, 7, 13, 8, 36, 51, tzinfo=datetime.timezone.utc), 'commenter': 'jonasfj', 'type': 'User'}, {'comment_id': 919808437, 'comment_body': ""Just a suggestion:\r\n```suggestion\r\n    'dependencies': {\r\n      name: version,\r\n    },\r\n  };\r\n```"", 'comment_created': datetime.datetime(2022, 7, 13, 8, 38, 36, tzinfo=datetime.timezone.utc), 'commenter': 'jonasfj', 'type': 'User'}, {'comment_id': 919811378, 'comment_body': ""Consider using dot in the package name:\r\n```suggestion\r\n    'name': 'dummy.package',\r\n```\r\n\r\nThat way it can't be published, so it can't conflict with a package that exists on pub.dev :D"", 'comment_created': datetime.datetime(2022, 7, 13, 8, 41, 27, tzinfo=datetime.timezone.utc), 'commenter': 'jonasfj', 'type': 'User'}, {'comment_id': 919811856, 'comment_body': 'I might call it something else... like `createDummyPackageWithDependency` or `fetchUsingDummyPackage`', 'comment_created': datetime.datetime(2022, 7, 13, 8, 41, 56, tzinfo=datetime.timezone.utc), 'commenter': 'jonasfj', 'type': 'User'}, {'comment_id': 919812534, 'comment_body': 'Maybe skip this print line :D', 'comment_created': datetime.datetime(2022, 7, 13, 8, 42, 38, tzinfo=datetime.timezone.utc), 'commenter': 'jonasfj', 'type': 'User'}, {'comment_id': 919813482, 'comment_body': ""Why the `dirname`? Maybe leave a comment explaining that it's because you go a level up to move out of `lib/`, right?"", 'comment_created': datetime.datetime(2022, 7, 13, 8, 43, 36, tzinfo=datetime.timezone.utc), 'commenter': 'jonasfj', 'type': 'User'}, {'comment_id': 919814722, 'comment_body': ""We don't need `packageLocation` as an argument\r\n```suggestion\r\n```"", 'comment_created': datetime.datetime(2022, 7, 13, 8, 44, 51, tzinfo=datetime.timezone.utc), 'commenter': 'jonasfj', 'type': 'User'}, {'comment_id': 919815240, 'comment_body': ""```suggestion\r\nFuture<String?> findPackageDirectory(\r\n```\r\n\r\nOr maybe just make an extension method on `packageAnalysisContext`? or even a method on `packageAnalysisContext` called `packageAnalysisContext.packageDirectory(String packageName)` or even just `packageAnalysisContext.packageFolder(String packageName)`.\r\n\r\nMaybe, I also suggest that we make it non-nullable?\r\nIf the package doesn't exist then something is wrong, right? Like we failed to run `dart pub get` or we have a bug in our analysis code because we are looking for a package that wasn't a dependency or transitive dependency?\r\nSo it should never return null, correct? unless there is a bug in our code.\r\n\r\nThus, I suggest that we simply make it non-nullable and if we fail to resolve it (in cases where `dependencyFilePath == null`), we just throw  an `StateError` saying that the referenced package doesn't exist.\r\nBecause it's always an error if we try to analyze a package that we don't depend on.."", 'comment_created': datetime.datetime(2022, 7, 13, 8, 45, 20, tzinfo=datetime.timezone.utc), 'commenter': 'jonasfj', 'type': 'User'}, {'comment_id': 919818857, 'comment_body': 'Just a suggestion, feel free to ignore.\r\n```suggestion\r\nFuture<Map<String, HostedDependency>> getHostedDependencies(\r\n  String targetPackageDir,\r\n) async {\r\n```', 'comment_created': datetime.datetime(2022, 7, 13, 8, 49, tzinfo=datetime.timezone.utc), 'commenter': 'jonasfj', 'type': 'User'}, {'comment_id': 919822030, 'comment_body': 'Just an idea... Because FormatException and IOException should never happen here, if they do then it\'s because we gave a path that\'s not really a package.\r\nHandling them and throwing a generic StateError is nice because we don\'t want someone calling  `getHostedDependencies` to handle `FormatException` or `IOException`, someone calling `getHostedDependencies` should always ensure they are pointing to a real package.\r\n\r\n```suggestion\r\ntry {\r\n  final allDependencies = Pubspec.parseYaml(\r\n          await File(path.join(targetPackageDir, \'pubspec.yaml\'))\r\n              .readAsString())\r\n      .dependencies;\r\n} on FormatException {\r\n  throw StateError(\'Failed to parse pubspec.yaml from ""$targetPackageDir"" check that it is a valid package\');\r\n} on IOException {\r\n  throw StateError(\'Failed to read pubspec.yaml from ""$targetPackageDir"" check that it is a valid package\');\r\n}\r\n```', 'comment_created': datetime.datetime(2022, 7, 13, 8, 52, 14, tzinfo=datetime.timezone.utc), 'commenter': 'jonasfj', 'type': 'User'}, {'comment_id': 919824170, 'comment_body': ""Do we need this special case? Isn't it fine to just always do the thing below.\r\nI bet that this isn't slow, so keeping the code simple is probably better than optimizing for a fast-path (which might not be that fast)."", 'comment_created': datetime.datetime(2022, 7, 13, 8, 54, 15, tzinfo=datetime.timezone.utc), 'commenter': 'jonasfj', 'type': 'User'}, {'comment_id': 919825407, 'comment_body': 'You might not even need a method for doing this :D\r\n```suggestion\r\n  return versions.firstWhere(constraint.allows, orElse: () => null);\r\n```', 'comment_created': datetime.datetime(2022, 7, 13, 8, 55, 28, tzinfo=datetime.timezone.utc), 'commenter': 'jonasfj', 'type': 'User'}, {'comment_id': 919832505, 'comment_body': '```suggestion\r\nString _createPackageConfig({\r\n```', 'comment_created': datetime.datetime(2022, 7, 13, 9, 2, 28, tzinfo=datetime.timezone.utc), 'commenter': 'jonasfj', 'type': 'User'}, {'comment_id': 919833513, 'comment_body': '```suggestion\r\nString _createPubspec({\r\n  required String packageName,\r\n```', 'comment_created': datetime.datetime(2022, 7, 13, 9, 3, 30, tzinfo=datetime.timezone.utc), 'commenter': 'jonasfj', 'type': 'User'}, {'comment_id': 919833856, 'comment_body': ""```suggestion\r\n    'name: $packageName\\nversion: $packageVersion\\n';\r\n```"", 'comment_created': datetime.datetime(2022, 7, 13, 9, 3, 51, tzinfo=datetime.timezone.utc), 'commenter': 'jonasfj', 'type': 'User'}, {'comment_id': 919850547, 'comment_body': ""```suggestion\r\n  /// The package URI for the currently analyzed unit, typically on the form: `package:foo/foo.dart`.\r\n  ///\r\n  /// Defaults to a dummy value, to ensure it's never `null`.\r\n  Uri currentFile = Uri.parse('package:$rootPackage/'); // we might have to set this in the constructor.\r\n\r\n  @override\r\n  void visitCompilationUnit(ResolvedUnitResult unit) {\r\n    currentFile = unit.uri;\r\n    //TODO: Investigate if we have to use: packageAnalysisContext.analysisSession.uriConverter.pathToUri(unit.path);\r\n    \r\n    super.visitCompilationUnit(unit);\r\n    \r\n    // Restore dummy value\r\n    currentFile = Uri.parse('package:$rootPackage/');\r\n  }\r\n```"", 'comment_created': datetime.datetime(2022, 7, 13, 9, 20, 55, tzinfo=datetime.timezone.utc), 'commenter': 'jonasfj', 'type': 'User'}, {'comment_id': 919851102, 'comment_body': 'Now you have the path to the file being analyzed, so you can use the filename in the `SourceSpan`...\r\nand you create the contents as necessary for creating source spans..', 'comment_created': datetime.datetime(2022, 7, 13, 9, 21, 32, tzinfo=datetime.timezone.utc), 'commenter': 'jonasfj', 'type': 'User'}, {'comment_id': 919852713, 'comment_body': ""```suggestion\r\n    if (element == null) {\r\n      // We cannot statically resolve what is invoked when a method is called on a variable with\r\n      // dynamic type. In this case we just do nothing, since we can't know what is being called.\r\n      return;\r\n    }\r\n```"", 'comment_created': datetime.datetime(2022, 7, 13, 9, 23, 13, tzinfo=datetime.timezone.utc), 'commenter': 'jonasfj', 'type': 'User'}, {'comment_id': 919853037, 'comment_body': 'No need to print a warning, since this is an expect case that can naturally happen.', 'comment_created': datetime.datetime(2022, 7, 13, 9, 23, 34, tzinfo=datetime.timezone.utc), 'commenter': 'jonasfj', 'type': 'User'}, {'comment_id': 919855768, 'comment_body': ""There are other dependencies SDK dependencies than just `flutter´.\r\nMaybe we should explicitly ignore all packages that are not `HostedDependencies`.\r\n\r\nWe don't care about git-dependencies and path-dependencies. Those won't exist on pub.dev, but if someone were to analyze their local application then they might have such dependencies."", 'comment_created': datetime.datetime(2022, 7, 13, 9, 26, 15, tzinfo=datetime.timezone.utc), 'commenter': 'jonasfj', 'type': 'User'}, {'comment_id': 919857591, 'comment_body': 'Using a switch here is a bit messy, hehe :D\r\n\r\nBut the logic seems okay..', 'comment_created': datetime.datetime(2022, 7, 13, 9, 28, 5, tzinfo=datetime.timezone.utc), 'commenter': 'jonasfj', 'type': 'User'}, {'comment_id': 919917680, 'comment_body': '```suggestion\r\n    bool constraintIssue = false;\r\n```', 'comment_created': datetime.datetime(2022, 7, 13, 10, 26, 14, tzinfo=datetime.timezone.utc), 'commenter': 'jonasfj', 'type': 'User'}, {'comment_id': 919925011, 'comment_body': '```suggestion\r\nFuture<List<LowerBoundConstraintIssue>> lowerBoundConstraintAnalysis({\r\n```', 'comment_created': datetime.datetime(2022, 7, 13, 10, 34, 56, tzinfo=datetime.timezone.utc), 'commenter': 'jonasfj', 'type': 'User'}, {'comment_id': 919930144, 'comment_body': 'add field `packageName` - root package name, for error messages\r\nadd field `dependencies` with type Map<String,Version> that maps from (hosted) dependency name to installed version\r\nalso add field `pubspec` and field `packagePath`', 'comment_created': datetime.datetime(2022, 7, 13, 10, 41, 24, tzinfo=datetime.timezone.utc), 'commenter': 'CicadaCinema', 'type': 'User'}, {'comment_id': 934436471, 'comment_body': 'How is this different from `packageName`, do we ever need to know `packageName` after the initial setup (if these two are different?)', 'comment_created': datetime.datetime(2022, 8, 1, 11, 44, 36, tzinfo=datetime.timezone.utc), 'commenter': 'jonasfj', 'type': 'User'}, {'comment_id': 934436969, 'comment_body': 'Why do we need both?', 'comment_created': datetime.datetime(2022, 8, 1, 11, 45, 19, tzinfo=datetime.timezone.utc), 'commenter': 'jonasfj', 'type': 'User'}, {'comment_id': 934441462, 'comment_body': ""Don't it make more sense to make this a `FileSpan` for the current file (and rename it `sourceFile`).\r\n\r\n```dart\r\nsourceFile = SourceFile.fromString(\r\n  context.readFile(context.uriToPath(currentUri)!),\r\n  url: currentUri,\r\n)\r\n```\r\n\r\nThen later you just do:\r\n```dart\r\nissues[elementId]?.references.add(sourceFile.span(identifier.offset, identifier.end));\r\n```"", 'comment_created': datetime.datetime(2022, 8, 1, 11, 51, 9, tzinfo=datetime.timezone.utc), 'commenter': 'jonasfj', 'type': 'User'}, {'comment_id': 934442947, 'comment_body': 'We could also return some data class that holds the different properties, that might be less confusing.', 'comment_created': datetime.datetime(2022, 8, 1, 11, 53, tzinfo=datetime.timezone.utc), 'commenter': 'jonasfj', 'type': 'User'}, {'comment_id': 934443466, 'comment_body': 'Ah, this is populated by `processIdentifier`, in that case you might want to document it.. this is slightly confusing. Another option is to return values from `processIdentifier`.', 'comment_created': datetime.datetime(2022, 8, 1, 11, 53, 43, tzinfo=datetime.timezone.utc), 'commenter': 'jonasfj', 'type': 'User'}, {'comment_id': 935758664, 'comment_body': 'addressed in https://github.com/CicadaCinema/pana/pull/2/commits/7e09995c47283da2c271325567dc918abe7f00c8', 'comment_created': datetime.datetime(2022, 8, 2, 15, 48, 18, tzinfo=datetime.timezone.utc), 'commenter': 'CicadaCinema', 'type': 'User'}, {'comment_id': 935758774, 'comment_body': 'addressed in https://github.com/CicadaCinema/pana/pull/2/commits/7e09995c47283da2c271325567dc918abe7f00c8', 'comment_created': datetime.datetime(2022, 8, 2, 15, 48, 25, tzinfo=datetime.timezone.utc), 'commenter': 'CicadaCinema', 'type': 'User'}, {'comment_id': 943846515, 'comment_body': 'Does this only execute if the analysis command times out? (if the analysis crashes then `process` should end with a non-zero exit code, right?)', 'comment_created': datetime.datetime(2022, 8, 11, 19, 16, 39, tzinfo=datetime.timezone.utc), 'commenter': 'CicadaCinema', 'type': 'User'}, {'comment_id': 943849975, 'comment_body': ""How should we handle deletion of the temporary folder(s) created by the analysis command if it times out? Maybe it's okay that they can't be handled if the analysis crashes _unexpectedly_... Should the analysis command have its own timeout so it can gracefully deal with packages like `google_fonts` which take a long time to analyse?"", 'comment_created': datetime.datetime(2022, 8, 11, 19, 20, 44, tzinfo=datetime.timezone.utc), 'commenter': 'CicadaCinema', 'type': 'User'}, {'comment_id': 950042611, 'comment_body': 'rename this class? it is still useful to have this structure even if we are not sure whether this is a _real_ issue or a _false positive_ - consider `LowerBoundConstraintIssueResult` or similar', 'comment_created': datetime.datetime(2022, 8, 19, 10, 20, 55, tzinfo=datetime.timezone.utc), 'commenter': 'CicadaCinema', 'type': 'User'}, {'comment_id': 950042986, 'comment_body': 'Use enumeration somehow to assert that this member is one of several supported values', 'comment_created': datetime.datetime(2022, 8, 19, 10, 21, 28, tzinfo=datetime.timezone.utc), 'commenter': 'CicadaCinema', 'type': 'User'}, {'comment_id': 950043089, 'comment_body': 'Use enumeration somehow to assert that this member is one of several supported values', 'comment_created': datetime.datetime(2022, 8, 19, 10, 21, 37, tzinfo=datetime.timezone.utc), 'commenter': 'CicadaCinema', 'type': 'User'}, {'comment_id': 950044515, 'comment_body': 'any way to make this cleaner? we need to switch/branch depending on the value of `kind` as well as `parentKind`', 'comment_created': datetime.datetime(2022, 8, 19, 10, 23, 37, tzinfo=datetime.timezone.utc), 'commenter': 'CicadaCinema', 'type': 'User'}, {'comment_id': 950044897, 'comment_body': ""not sure if nested try-finally here is OK\r\nI'm doing this because usually there are no found issues and no need to create an http client"", 'comment_created': datetime.datetime(2022, 8, 19, 10, 24, 7, tzinfo=datetime.timezone.utc), 'commenter': 'CicadaCinema', 'type': 'User'}, {'comment_id': 950047823, 'comment_body': 'can we rely on this path being empty and our testing not conflicting with physical files on disk?\r\nwe do not need to create a unique temporary directory _on disk_ because in this case the tests are run on an in-memory test package\r\nno IO disk operations take place during the test\r\nit is enough to know that we have a path which does not coincide with an existing directory', 'comment_created': datetime.datetime(2022, 8, 19, 10, 28, 7, tzinfo=datetime.timezone.utc), 'commenter': 'CicadaCinema', 'type': 'User'}, {'comment_id': 950048604, 'comment_body': 'does `element.declaration` help here?\r\nwhat kind of syntax does it cover?', 'comment_created': datetime.datetime(2022, 8, 19, 10, 29, 12, tzinfo=datetime.timezone.utc), 'commenter': 'CicadaCinema', 'type': 'User'}, {'comment_id': 950051280, 'comment_body': 'do we need visitPropertyAccess too?\r\nhttps://pub.dev/documentation/analyzer/latest/dart_ast_ast/PropertyAccess-class.html\r\n> The access of a property of an object.\r\n> Note, however, that accesses to properties of objects can also be represented as [PrefixedIdentifier](https://pub.dev/documentation/analyzer/latest/dart_ast_ast/PrefixedIdentifier-class.html) nodes in cases where the target is also a simple identifier.\r\n\r\nWhat is [Expression](https://pub.dev/documentation/analyzer/latest/dart_ast_ast/Expression-class.html) and should we consider cases where it is the `node.target`?', 'comment_created': datetime.datetime(2022, 8, 19, 10, 33, 7, tzinfo=datetime.timezone.utc), 'commenter': 'CicadaCinema', 'type': 'User'}, {'comment_id': 950543374, 'comment_body': ""Because we are downloading packages using a dummy, we have no package metadata other than the name of the package when executing `lbcanalysis` - when the SDK constraints are too low, `pub get` fails here.\r\n\r\nMaybe we can query an endpoint like https://pub.dev/api/packages/retry BEFORE spawning the `lbcanalysis` process, and only spawn this process if two conditions are met:\r\n1) the lower bound sdk constraint is >= 2.12.0\r\n2) the current sdk version satisfies the sdk constraint\r\n\r\notherwise, do not launch `lbcanalysis` and skip onto the next package\r\n\r\nalthough I'm not sure whether making ~30,000 http requests over the course of ~8 hours (between 1 and 2 requests per second) is OK, with no cache in place. though making one GET request is certainly faster than: launching analysis, writing the pubspec to disk and seeing whether `pub get` succeeds/fails"", 'comment_created': datetime.datetime(2022, 8, 19, 20, 38, 3, tzinfo=datetime.timezone.utc), 'commenter': 'CicadaCinema', 'type': 'User'}, {'comment_id': 950543957, 'comment_body': 'https://pub.dev/documentation/analyzer/latest/dart_element_element/Element/declaration.html', 'comment_created': datetime.datetime(2022, 8, 19, 20, 39, 10, tzinfo=datetime.timezone.utc), 'commenter': 'CicadaCinema', 'type': 'User'}, {'comment_id': 951368262, 'comment_body': 'PotentialLowerBoundConstraintIssue', 'comment_created': datetime.datetime(2022, 8, 22, 12, 18, 11, tzinfo=datetime.timezone.utc), 'commenter': 'CicadaCinema', 'type': 'User'}, {'comment_id': 951377050, 'comment_body': 'close client in outer finally', 'comment_created': datetime.datetime(2022, 8, 22, 12, 27, 29, tzinfo=datetime.timezone.utc), 'commenter': 'CicadaCinema', 'type': 'User'}, {'comment_id': 951382367, 'comment_body': 'OK', 'comment_created': datetime.datetime(2022, 8, 22, 12, 32, 43, tzinfo=datetime.timezone.utc), 'commenter': 'CicadaCinema', 'type': 'User'}, {'comment_id': 951389724, 'comment_body': 'OK - `node.methodName.staticElement!` already gets us to the required `Element`', 'comment_created': datetime.datetime(2022, 8, 22, 12, 39, 49, tzinfo=datetime.timezone.utc), 'commenter': 'CicadaCinema', 'type': 'User'}, {'comment_id': 951395608, 'comment_body': 'test:\r\n```\r\nclass Foo {\r\n  int a = 5;\r\n}\r\nFoo f() => Foo();\r\n\r\nf().a; // property access ??\r\n\r\nfinal t = f();\r\nt.a; // prefixed identifier\r\n\r\n```', 'comment_created': datetime.datetime(2022, 8, 22, 12, 45, 56, tzinfo=datetime.timezone.utc), 'commenter': 'CicadaCinema', 'type': 'User'}, {'comment_id': 951604617, 'comment_body': 'create my own `ElementKind`s and enums', 'comment_created': datetime.datetime(2022, 8, 22, 15, 50, 10, tzinfo=datetime.timezone.utc), 'commenter': 'CicadaCinema', 'type': 'User'}, {'comment_id': 951604704, 'comment_body': 'create my own `ElementKind`s and enums', 'comment_created': datetime.datetime(2022, 8, 22, 15, 50, 14, tzinfo=datetime.timezone.utc), 'commenter': 'CicadaCinema', 'type': 'User'}, {'comment_id': 951605145, 'comment_body': 'do this by nesting if statements', 'comment_created': datetime.datetime(2022, 8, 22, 15, 50, 38, tzinfo=datetime.timezone.utc), 'commenter': 'CicadaCinema', 'type': 'User'}, {'comment_id': 951605562, 'comment_body': 'OK to pre-compute this before starting any analysis operations', 'comment_created': datetime.datetime(2022, 8, 22, 15, 51, 4, tzinfo=datetime.timezone.utc), 'commenter': 'CicadaCinema', 'type': 'User'}, {'comment_id': 953653080, 'comment_body': 'This can throw a `TimeoutException`', 'comment_created': datetime.datetime(2022, 8, 24, 11, 0, 38, tzinfo=datetime.timezone.utc), 'commenter': 'jonasfj', 'type': 'User'}, {'comment_id': 953653957, 'comment_body': 'You might want to do `} on TimeoutException {` and handle this separately, because then you can display a message specific to timeout issues..\r\n\r\nAlso, catching all exceptions/errors can hide internal error that you then fail to discover.', 'comment_created': datetime.datetime(2022, 8, 24, 11, 1, 46, tzinfo=datetime.timezone.utc), 'commenter': 'jonasfj', 'type': 'User'}, {'comment_id': 955363290, 'comment_body': 'did it with nested switches since both members were enums', 'comment_created': datetime.datetime(2022, 8, 25, 19, 52, 21, tzinfo=datetime.timezone.utc), 'commenter': 'CicadaCinema', 'type': 'User'}, {'comment_id': 956570615, 'comment_body': 'OK to capitalise the values in this enum? ignore lint constant_identifier_names? `class`,  `extension` and `enum` are already keywords. maybe `classKind` (or `classK` for brevity) instead? ideally the notation for `Kind` and `ParentKind` should be identical.', 'comment_created': datetime.datetime(2022, 8, 27, 11, 14, 15, tzinfo=datetime.timezone.utc), 'commenter': 'CicadaCinema', 'type': 'User'}, {'comment_id': 956571502, 'comment_body': 'TODO: test to see if https://dart-lang.github.io/linter/lints/comment_references.html no longer triggers here (and elsewhere in this file) now that https://github.com/Dart-Code/Dart-Code/issues/4114 is fixed', 'comment_created': datetime.datetime(2022, 8, 27, 11, 24, 53, tzinfo=datetime.timezone.utc), 'commenter': 'CicadaCinema', 'type': 'User'}, {'comment_id': 957091696, 'comment_body': 'I would go with `classKind` etc.', 'comment_created': datetime.datetime(2022, 8, 29, 9, 30, 56, tzinfo=datetime.timezone.utc), 'commenter': 'sigurdm', 'type': 'User'}, {'comment_id': 957369894, 'comment_body': '### before\r\n```\r\nC:\\Users\\Atom\\Desktop\\pana>dart --version\r\nDart SDK version: 2.17.6 (stable) (Tue Jul 12 12:54:37 2022 +0200) on ""windows_x64""\r\n\r\nC:\\Users\\Atom\\Desktop\\pana>dart analyze .\\lib\\src\\package_analysis\r\nAnalyzing package_analysis...\r\n\r\n   info • shapes.dart:69:18 • Only reference in scope identifiers in doc comments. • comment_references\r\n   info • shapes.dart:73:18 • Only reference in scope identifiers in doc comments. • comment_references\r\n   info • shapes.dart:77:18 • Only reference in scope identifiers in doc comments. • comment_references\r\n   info • shapes.dart:81:18 • Only reference in scope identifiers in doc comments. • comment_references\r\n   info • shapes.dart:85:18 • Only reference in scope identifiers in doc comments. • comment_references\r\n   info • shapes.dart:89:18 • Only reference in scope identifiers in doc comments. • comment_references\r\n   info • shapes.dart:242:12 • Only reference in scope identifiers in doc comments. • comment_references\r\n\r\n7 issues found.\r\n```\r\n\r\n### after\r\n```\r\nC:\\Users\\Atom\\Desktop\\pana>dart --version\r\nDart SDK version: 2.19.0-146.0.dev (dev) (Fri Aug 26 18:55:25 2022 -0700) on ""windows_x64""\r\n\r\nC:\\Users\\Atom\\Desktop\\pana>dart analyze .\\lib\\src\\package_analysis\r\nAnalyzing package_analysis...\r\nNo issues found!\r\n```', 'comment_created': datetime.datetime(2022, 8, 29, 13, 55, 11, tzinfo=datetime.timezone.utc), 'commenter': 'CicadaCinema', 'type': 'User'}, {'comment_id': 957376246, 'comment_body': 'yes, now we do `} on TimeoutException {`', 'comment_created': datetime.datetime(2022, 8, 29, 14, 0, 25, tzinfo=datetime.timezone.utc), 'commenter': 'CicadaCinema', 'type': 'User'}, {'comment_id': 958533741, 'comment_body': 'wait for https://github.com/dart-lang/sdk/issues/49861 to be fixed, then delete the temp directory within the child process on receiving a sigterm, like this cross-platform approach https://github.com/dart-lang/webdev/pull/370/files#diff-75e84e99a12c4a689b4e5e202ad664388b38c852a465edff8fd8bbe384c18a11R59', 'comment_created': datetime.datetime(2022, 8, 30, 14, 9, 31, tzinfo=datetime.timezone.utc), 'commenter': 'CicadaCinema', 'type': 'User'}, {'comment_id': 958575272, 'comment_body': ""I don't think this error handling is necessary\r\n\r\nPubspec.parseYaml() is invoked in three places so far - in two of them the relevant pubspec file is generated beforehand, and in the last its presence is verified (before the summary is generated):\r\n```dart\r\nif (!await File(path.join(packageLocation, 'pubspec.yaml')).exists()) {\r\n  throw StateError('The target directory must contain a package.');\r\n}\r\n```"", 'comment_created': datetime.datetime(2022, 8, 30, 14, 42, 16, tzinfo=datetime.timezone.utc), 'commenter': 'CicadaCinema', 'type': 'User'}, {'comment_id': 958579268, 'comment_body': 'done:\r\n```dart\r\n/// The package URI for the currently analyzed unit, typically on the form\r\n/// `package:package_name/library_name.dart`.\r\nlate Uri currentUri;\r\n  ```', 'comment_created': datetime.datetime(2022, 8, 30, 14, 45, 21, tzinfo=datetime.timezone.utc), 'commenter': 'CicadaCinema', 'type': 'User'}]","[{'commit_sha': '949425e0a90d551cbda50cb3dc8528b24e7aa97c', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b066a3bce84f72c51b615f7f861dd248f15b8596', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '750c74969dfcac86b5de120fdc65d6cc1476bc80', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd49fb4a58dd0f83108a293c078e88ffb36f6bc6e', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b15c5d463794d99cee5f6d589399f841a83da65e', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '72af07bb3beff5e461ef4cbfbfb88fbac57cad1d', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0ec6f70fb45bcb63090c0c47a29f8563eb3ca63a', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e35447ba53c59884de4bca4c94c9c92b6606c1d7', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '60c09c12ef3e6516fa2d48821c26e80eda387c68', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '85fc697380a4b35a6084b3b933640474092866d0', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '90d25896ab6ecbbeb797118d5f50ee0dface5149', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '22a3a49bb2fda23925597172c808ecc6a1726cea', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '70f98dd8bed130415ce12b8d658d1cfae2aea625', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3249ab6cadf88641afad3369a77d1dc588928fe9', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '46d08d0d3f554ac998faa04506aa7e6d26122e87', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd546d16a0443d1405e96c92a5f4dc43c73f06b61', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '19b3a1cbcda88fbc29ae6e0513881d6a1040ac99', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f6b3f2059d9e21ff0f5d3ef2edea6a1607a6e852', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8a1b5cc7e76df0ed386cebdd51e9b2b3abd136c4', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ec107bb680e0b41da63649832e72231216a7e201', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cb7e464c1f4af392dc6d016fcf5ede892fdfdd1d', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '495e12966f60b27156d1a0f6a897bbec3849f3b9', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '06e9b53863b8aa46e024e0abc1a73eb845a3bad2', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0e6664ddb3be3383b758d02be7a37499362afa5e', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '09c0d56cc859a83710e3b5138c7b945f11fa0ded', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e323d9ba36c19b5aa8b2ec039c4702e3a0810d71', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c93a5713652f02cd70b8effa5f31c1aab35b9192', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5051b5413129b224eef31236256dd79b9811fe64', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '19cdeb705dd51794faee07ba40187ccc8f6cd21e', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2be3fbb3891953f60b13b03a824f97d467a851a7', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e641ad7b211846170d9e087ab004633af6fbbae7', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '356f370712440c04ee06a18ac7352d974983b0ee', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '46558960cf5c0bddf3ca331bc6bb5e891b067f19', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '090ce56ba343bd159c4f17dc06a602387da86196', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4d5b6604bd17243bf10fc9da18e440edca8a83d3', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ae04b006294f258c9e18934c3311595613d871c2', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '23b89ccd34f759b007a6dae12243772bbb2c13bf', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2fce6c3bc70bb3decad06426b62819c48cd20cae', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd27c8010dbb19a0bfba0916e57d3a4a707deaf11', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '69a6f6c9614b85227ec4ce59fa6000047ce130a9', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '13d67e7acc923407bd00c91f483a7e877a9a5420', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7534b8a21b7440c014894a27c9b6902c61291ebe', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5c6a6c6ebb41ec2c85d2204ef8f0626fd8230477', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1c82a71d12789b2eb2f3a46157c7d8f0410224a9', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0a223df8c5cc65e411a2f8a826d7ad79cb9f96dd', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b82ca17b8aaff050e2507fd7deb38c415829bcbb', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '09bab99d9d3c227bdf389584b99d9d17bc91f969', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c28c282ae5b2236d697988281915996dbfdcd372', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '714338dcd0bdab31ae9383ebcd95b8d53ebcdd21', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7e09995c47283da2c271325567dc918abe7f00c8', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'de4b0b036833c6a67c6dbeb6cce42880c0cc6987', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f8ba1d2e0790adabfb297c56efe6c25c478fc989', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '87579d383bbb888ae9cfb4a421d2265a2878aec8', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5d2bf8fd81db95517f97a3f65fa7d778f85db979', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a9226040f0ffd7bb626eed32df68384003f2e595', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1bcf844f95b61ea0de9689da4f84682c8bf0c1a5', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '049fa346fb901701f440a11a6545385c2bbc55ca', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7608b7faa5dc127346ec791709e6bf16acd5b188', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e0b7fad164e637b64eb817989a7113e08094e3be', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b0fd73ccc66610573bdcf60de0a8f0e8e12745ca', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '94f51b62654c8fa23a96e7e41740ebf989b9aa05', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '39655ac331a5bbbdcbf3efaf4daa8223632fa9bf', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6dcf88b87ee73f54683a4b797750e2e74a185e8f', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ea56d2e8cc6ce40f7f3b6b654460546ce9faf4bf', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '12b55fb0d8f028ac4e0060b161395ea5fe959e2d', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2ef26becc5c1e513125acdd439c9f9a8b289ed49', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6f36df989e013f41fbc7b60f11dd1695fcdda985', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0e1a339b9aea0ab36fadef8e657bbf5a43828bf6', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '243287f0da5c57aaa8343bc2570576cf7432bdae', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'deca49cbfdff1b078909531a90e91226bfeafad8', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd6943ac5b0c0921793c55dd36743cdd584cef383', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ab45ec5c61f898c271ceb8e7c8cf2f36a29e26c3', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2b7db99308a32aa6c24f600fe3cde09705884e46', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ab8b9b8541e68dbfea75e986b7638d3296ebd9f3', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0658fb38febd4712e924a57991fd6f29b984987c', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd028b5081db61b7bfb69f2913d157bf65bbe1e8a', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ba16c1ea4c81ecc357f110f45e7a4240c33d72e6', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6342c09beb4122c70eae6b7e27ed0b240e6d0047', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ad0a6ff3a2250d3c1a2c36b346531441272e113a', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3ff59eb2cf78a471118fdd1ab43f52aa193c3299', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ede46d88ea91d7931333f92bf33a1f3529feb77f', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b32853e3c6e454cbe8c963ffbbfa1a937f8e91cc', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6dee68067cfb8ab1daa08240e819a5764cbeaab3', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '476c8c65ed401a378905498a3f2b3e71e3f942b6', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3b536bfeef211eba4da264a46a55c3b05eae78ba', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4e0899718a8625477f6426b0df3580f4e08ab6cc', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '51c037b5516030d2e0437b62beed8de953bb2088', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'be4a3c10574c4e212a465e7babb7a4b5a7be342c', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a67fcdb2f6e210753870ffc0d890015aeef589e8', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '75ad2532bbf35d1898bfc384e8c3e684f2770ee3', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9afc6f650a4a729c8da61f13337d25891ff95296', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '441ec4363d0d3660ba11fb110c3750fe01a0b600', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c6471e4ee518c0556eda850e61371ed55af5b699', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '18f2a93a9cf40c520e7785efbd80aacd602a5ec6', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '289451fe96df1a90a888691dd490651163341f79', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '289d0b3605bfeb3e4a4a6bc1fd8c711e50449681', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bf3b693037adb9e05cc4f4b674c93009da48f33b', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cd808e7936048f24616867e916a1afb5f5d3b317', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8b546fd70470f876e377b9ab0c9795924cbfd4f7', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4baf2c1748b40bc1933de6f84a4f235f52f58676', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '65cea2c0762b5a22b2d716434c0ae95ecb07749e', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6df3596cb6b4d98a1e072ceb4d90b60558174d9b', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '34158fb8d81fb9ec41916f16899b9c4d0defd422', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1558c6b4918be139e20128cb6cb64b724fff2003', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '65bf866c75ad98af8b933974d688193f40d035c8', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7fe9d881a26fea2859c8d959a72337275c64ab94', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8e40ac7337363c247e107a8f21b4ca2fc01782e9', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9c4e8e9c97a824396466cbed5fe7ca0e27322fcf', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f53bc02d4a6e34ed443fd560cde1a1eede318296', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8231a692fb8e1c19f8b38b7b00768acf7e5c946f', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6b6e1193ea2d5cac328d0ee384966c37d391b9a0', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c7613fa582b5fd093e146f53d86c26253a464c95', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3c73e9f88f8de03096dc199c5e36752d9e81d621', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1f7c6f031c23490996d743e9d4a3699bd58d28bf', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '951f3a5251d1858f57f46dc41383760192e1d66e', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f8dd1a68f4f89fae1c9256c02df48b283cd7431c', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e5548e34a4db985e3b538dfc634bf498cb2ca32f', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}]",,52425971,,User,,39,,5,5
1041102764,(GSOC) Add experimental public API analysis,"read https://arseny.uk/posts/gsoc2022/ for an introduction to the analysis features which are implemented here
also reviewed at https://github.com/CicadaCinema/pana/pull/1 and https://github.com/CicadaCinema/pana/pull/2",False,1121,https://api.github.com/repos/dart-lang/pana/pulls/1121,https://github.com/dart-lang/pana/pull/1121,closed,7044,1,48,204,1,72,0,0,[],2022-08-30 14:53:12+00:00,2024-03-12 09:13:33+00:00,48363621.0,"559 days, 18:20:21","[{'comment_id': 962783798, 'comment_body': 'You should probably do `.toList()` on these to avoid calculating the iterators twice. Not sure how much difference it makes...', 'comment_created': datetime.datetime(2022, 9, 5, 11, 8, 4, tzinfo=datetime.timezone.utc), 'commenter': 'sigurdm', 'type': 'User'}, {'comment_id': 962785096, 'comment_body': 'Nit, make comments full sentences.\r\n```suggestion\r\n    // Public top-level elements which are exported by this library.\r\n```', 'comment_created': datetime.datetime(2022, 9, 5, 11, 9, 39, tzinfo=datetime.timezone.utc), 'commenter': 'sigurdm', 'type': 'User'}, {'comment_id': 962787638, 'comment_body': 'nit: These could just be top-level private methods, or inline functions expressions where used.', 'comment_created': datetime.datetime(2022, 9, 5, 11, 12, 37, tzinfo=datetime.timezone.utc), 'commenter': 'jonasfj', 'type': 'User'}, {'comment_id': 962796104, 'comment_body': ""Shouldn't we just try with a higher version? How frequently does this happen?\r\n\r\nJust because the lowest possible version doesn't work, doesn't mean that there isn't a problem. It's possible that a more recent version can be resolved, but still is missing features available in the latest version.."", 'comment_created': datetime.datetime(2022, 9, 5, 11, 22, 50, tzinfo=datetime.timezone.utc), 'commenter': 'jonasfj', 'type': 'User'}, {'comment_id': 962798473, 'comment_body': 'It worries me a bit to see the sided effects happen inside the closure passed to `where`. The closure will run every time the iterator is iterated - and if you are not careful it could easily happen != once.\r\n\r\nPerhaps rewrite like this:\r\n```suggestion\r\n for (final getter in publicSymbols\r\n        .whereType<PropertyAccessorElement>()\r\n        .where((element) => element.isGetter)) {\r\n      exportedGetters.add(getter.id);\r\n      if (!package.getters.any((g) => getter.id == g.id)) {\r\n        package.getters.add(summarizeGlobalProperty(getter));\r\n      }\r\n    }\r\n```\r\n\r\nAlso note that these are O(N^2) in the number of elements of a given type. You probably should have a `Set` of already added ids for doing the deduplication.\r\n\r\n   ', 'comment_created': datetime.datetime(2022, 9, 5, 11, 25, 42, tzinfo=datetime.timezone.utc), 'commenter': 'sigurdm', 'type': 'User'}, {'comment_id': 962802697, 'comment_body': 'This sentence confuses me, do you mean something like:\r\n```suggestion\r\n  /// The name of the package on which the analyzed package has an incorrect lower bound dependency constraint.\r\n```', 'comment_created': datetime.datetime(2022, 9, 5, 11, 30, 40, tzinfo=datetime.timezone.utc), 'commenter': 'sigurdm', 'type': 'User'}, {'comment_id': 962803972, 'comment_body': 'Is this not always `constraint.min!`?\r\n\r\nIf so, this could be a getter:\r\n```suggestion\r\n  Version get lowestVersion => constraint.min!;\r\n```', 'comment_created': datetime.datetime(2022, 9, 5, 11, 31, 49, tzinfo=datetime.timezone.utc), 'commenter': 'sigurdm', 'type': 'User'}, {'comment_id': 962809005, 'comment_body': 'I would call this method `withId`.', 'comment_created': datetime.datetime(2022, 9, 5, 11, 37, 39, tzinfo=datetime.timezone.utc), 'commenter': 'sigurdm', 'type': 'User'}, {'comment_id': 962814114, 'comment_body': 'Why not just use the LibraryShape constructor with the current uri?', 'comment_created': datetime.datetime(2022, 9, 5, 11, 43, 56, tzinfo=datetime.timezone.utc), 'commenter': 'sigurdm', 'type': 'User'}, {'comment_id': 962815013, 'comment_body': 'Why not put these extensions in shapes.dart? Do they even need to be extensions', 'comment_created': datetime.datetime(2022, 9, 5, 11, 45, tzinfo=datetime.timezone.utc), 'commenter': 'sigurdm', 'type': 'User'}, {'comment_id': 962816730, 'comment_body': 'This does something very specialized. Can we find a better name than `add`?\r\nPerhaps `extendWith`... ', 'comment_created': datetime.datetime(2022, 9, 5, 11, 47, 13, tzinfo=datetime.timezone.utc), 'commenter': 'sigurdm', 'type': 'User'}, {'comment_id': 962817161, 'comment_body': ""Subclasses also don't inherit static members."", 'comment_created': datetime.datetime(2022, 9, 5, 11, 47, 43, tzinfo=datetime.timezone.utc), 'commenter': 'sigurdm', 'type': 'User'}, {'comment_id': 962823490, 'comment_body': 'It feels wasteful to create the concatenated list just to throw it away afterwards. Not sure it really matters, but could be written something like:\r\n```suggestion\r\n      for (final method in thisClass.methods.followedBy(thisClass.staticMethods)) {\r\n        if (method.name == name) {\r\n          return true;\r\n        }\r\n      }\r\n```\r\n\r\n', 'comment_created': datetime.datetime(2022, 9, 5, 11, 55, 6, tzinfo=datetime.timezone.utc), 'commenter': 'sigurdm', 'type': 'User'}, {'comment_id': 962830731, 'comment_body': ""> It's possible that a more recent version can be resolved, but still is missing features available in the latest version..\r\n\r\nTrue, this is worth trying."", 'comment_created': datetime.datetime(2022, 9, 5, 12, 1, 58, tzinfo=datetime.timezone.utc), 'commenter': 'CicadaCinema', 'type': 'User'}, {'comment_id': 962837146, 'comment_body': ""I don't think this needs to be marked `@internal` as it is inside `lib/src`.\r\n"", 'comment_created': datetime.datetime(2022, 9, 5, 12, 7, 35, tzinfo=datetime.timezone.utc), 'commenter': 'sigurdm', 'type': 'User'}, {'comment_id': 962837964, 'comment_body': 'Why do we have this class? Do you ever create instances of the super-class? I think they can be merged. If you really want to divert to different streams give a bool or even a stream in the constructor.', 'comment_created': datetime.datetime(2022, 9, 5, 12, 8, 33, tzinfo=datetime.timezone.utc), 'commenter': 'sigurdm', 'type': 'User'}, {'comment_id': 962838994, 'comment_body': 'This looks slow - could you not look up all of these on the pubspec.lock on the analyzed package?', 'comment_created': datetime.datetime(2022, 9, 5, 12, 9, 50, tzinfo=datetime.timezone.utc), 'commenter': 'sigurdm', 'type': 'User'}, {'comment_id': 962842149, 'comment_body': ""Do you mean 'by the exports'?"", 'comment_created': datetime.datetime(2022, 9, 5, 12, 13, 27, tzinfo=datetime.timezone.utc), 'commenter': 'sigurdm', 'type': 'User'}, {'comment_id': 962845144, 'comment_body': 'Could this be called something like: `exportedTypeAliases`?', 'comment_created': datetime.datetime(2022, 9, 5, 12, 17, 3, tzinfo=datetime.timezone.utc), 'commenter': 'sigurdm', 'type': 'User'}, {'comment_id': 962846925, 'comment_body': 'I think this can be made private (and perhaps even inlined).', 'comment_created': datetime.datetime(2022, 9, 5, 12, 19, 18, tzinfo=datetime.timezone.utc), 'commenter': 'sigurdm', 'type': 'User'}, {'comment_id': 962854041, 'comment_body': ""Maybe, this one isn't necessary..."", 'comment_created': datetime.datetime(2022, 9, 5, 12, 27, 50, tzinfo=datetime.timezone.utc), 'commenter': 'jonasfj', 'type': 'User'}, {'comment_id': 962854294, 'comment_body': 'I think it auto generates some output for `--help`', 'comment_created': datetime.datetime(2022, 9, 5, 12, 28, 10, tzinfo=datetime.timezone.utc), 'commenter': 'jonasfj', 'type': 'User'}, {'comment_id': 962855901, 'comment_body': ""Try: `  String get argumentsDescription => '[arguments...]';` instead, see:\r\nhttps://github.com/dart-lang/pub/blob/master/lib/src/command/add.dart#L42\r\n"", 'comment_created': datetime.datetime(2022, 9, 5, 12, 29, 42, tzinfo=datetime.timezone.utc), 'commenter': 'jonasfj', 'type': 'User'}, {'comment_id': 962861871, 'comment_body': 'It is so weird to me that the `identifier` of a `Library` gives a package Uri as a String... There really should be a better way of finding that. Not sure how though. Maybe `element.library!.source.uri`.', 'comment_created': datetime.datetime(2022, 9, 5, 12, 36, 36, tzinfo=datetime.timezone.utc), 'commenter': 'sigurdm', 'type': 'User'}, {'comment_id': 962862371, 'comment_body': ""```suggestion\r\n          'The defining package is not a hosted dependency of the target package.');\r\n```"", 'comment_created': datetime.datetime(2022, 9, 5, 12, 37, 12, tzinfo=datetime.timezone.utc), 'commenter': 'sigurdm', 'type': 'User'}, {'comment_id': 962866974, 'comment_body': 'Remove this if no longer needed.', 'comment_created': datetime.datetime(2022, 9, 5, 12, 41, 18, tzinfo=datetime.timezone.utc), 'commenter': 'sigurdm', 'type': 'User'}, {'comment_id': 962873598, 'comment_body': ""Nit: you can save a lookup and a null-check like this\r\n```suggestion\r\n    // If we have seen this symbol before, we need to do no further analysis.\r\n    final existingIssue = issues[identifierMetadata.elementId];\r\n    if (existingIssue != null) {\r\n      // If we have seen this element before and there is an issue with it,\r\n      // add this usage/invocation to its list of references.\r\n      existingIssue.references.add(identifierMetadata.span);\r\n      // Skip further analysis.\r\n      throw AnalysisException(\r\n          'The definition of this Element has already been visited.');\r\n    }\r\n```"", 'comment_created': datetime.datetime(2022, 9, 5, 12, 48, 49, tzinfo=datetime.timezone.utc), 'commenter': 'sigurdm', 'type': 'User'}, {'comment_id': 962877692, 'comment_body': 'Instead of maintaining the currentUri you could probably use `element.source.uri`', 'comment_created': datetime.datetime(2022, 9, 5, 12, 53, 32, tzinfo=datetime.timezone.utc), 'commenter': 'sigurdm', 'type': 'User'}, {'comment_id': 962880365, 'comment_body': 'I would do the super-call last, I think that way the issue with the method invocation will be listed before issues inside the arguments.', 'comment_created': datetime.datetime(2022, 9, 5, 12, 56, 35, tzinfo=datetime.timezone.utc), 'commenter': 'sigurdm', 'type': 'User'}, {'comment_id': 962880741, 'comment_body': 'Remove commented code.', 'comment_created': datetime.datetime(2022, 9, 5, 12, 56, 57, tzinfo=datetime.timezone.utc), 'commenter': 'sigurdm', 'type': 'User'}, {'comment_id': 963063930, 'comment_body': ""`constraint` can be a version range which doesn't include the min, like `>1.2.3`.\r\nwe have to iterate over the available versions of `dependencyPackageName` to find the minimum allowed version (which itself passes dependency version solving) that can be summarized"", 'comment_created': datetime.datetime(2022, 9, 5, 17, 20, 35, tzinfo=datetime.timezone.utc), 'commenter': 'CicadaCinema', 'type': 'User'}, {'comment_id': 963562705, 'comment_body': 'Is turning an `Iterable` into a `List` beneficial for cases where it is accessed more than once?\r\nOr is there also a performance penalty associated with chaining `.where()` calls?\r\nOr both?', 'comment_created': datetime.datetime(2022, 9, 6, 10, 54, 28, tzinfo=datetime.timezone.utc), 'commenter': 'CicadaCinema', 'type': 'User'}, {'comment_id': 963563114, 'comment_body': 'TODO: https://dart.dev/guides/language/effective-dart/documentation#do-format-comments-like-sentences', 'comment_created': datetime.datetime(2022, 9, 6, 10, 54, 47, tzinfo=datetime.timezone.utc), 'commenter': 'CicadaCinema', 'type': 'User'}, {'comment_id': 963572189, 'comment_body': ""yes, that's a better way of wording it!"", 'comment_created': datetime.datetime(2022, 9, 6, 11, 3, 40, tzinfo=datetime.timezone.utc), 'commenter': 'CicadaCinema', 'type': 'User'}, {'comment_id': 963582764, 'comment_body': 'renamed instances of `replaceWithNewId` to `withId` and instances of `replaceWithNewIds` to `withIds`', 'comment_created': datetime.datetime(2022, 9, 6, 11, 16, 7, tzinfo=datetime.timezone.utc), 'commenter': 'CicadaCinema', 'type': 'User'}, {'comment_id': 963592493, 'comment_body': ""I think we did this initially to make the structure of the various *Shape classes easier to interpret.\r\n\r\nSome of the extension methods in `shapes_ext.dart` are only required to produce a normalized PackageShape (needed for deterministic tests) - only `ClassShapeExt.add()` and the methods `PackageShapeExt.contains...()` are needed for analysis itself.\r\n\r\nI think it makes sense to separate the methods related to reassigning ids from the ones which are strictly necessary for analysis to run (maybe I'll put them in different files) - does it matter whether the 'necessary' methods are extension members or class members of the appropriate Shape?"", 'comment_created': datetime.datetime(2022, 9, 6, 11, 27, 26, tzinfo=datetime.timezone.utc), 'commenter': 'CicadaCinema', 'type': 'User'}, {'comment_id': 963615387, 'comment_body': 'renamed', 'comment_created': datetime.datetime(2022, 9, 6, 12, 1, 2, tzinfo=datetime.timezone.utc), 'commenter': 'CicadaCinema', 'type': 'User'}, {'comment_id': 963639139, 'comment_body': ""no, 'by the imports'\r\n\r\nsee https://github.com/CicadaCinema/pana/blob/gsoc-2022/test/api_analysis/testdata/lower_bound_constraint_issues/typedefs.yaml\r\n\r\nif someone renames a class and adds a typedef for backwards compatibility, the analyzer does not indicate that a class is being accessed through a typedef, so we have to go through all the typedefs that are in scope (made available by the imports) and discover the old name of the class (the typedef's name)"", 'comment_created': datetime.datetime(2022, 9, 6, 12, 23, 22, tzinfo=datetime.timezone.utc), 'commenter': 'CicadaCinema', 'type': 'User'}, {'comment_id': 963641963, 'comment_body': 'do you mean absorbing it into the only function that uses `fetchDependencies` or just moving it inside as a nested function? or does it not make a difference?', 'comment_created': datetime.datetime(2022, 9, 6, 12, 26, 5, tzinfo=datetime.timezone.utc), 'commenter': 'CicadaCinema', 'type': 'User'}, {'comment_id': 963644731, 'comment_body': ""I'm doing it this way because I can `return` in case something cannot be resolved or the analysis reaches unexpected syntax - would it be better to do the super call last and use something like try-finally instead of returning?"", 'comment_created': datetime.datetime(2022, 9, 6, 12, 28, 50, tzinfo=datetime.timezone.utc), 'commenter': 'CicadaCinema', 'type': 'User'}, {'comment_id': 963699821, 'comment_body': 'removed all `@internal` annotations', 'comment_created': datetime.datetime(2022, 9, 6, 13, 20, 5, tzinfo=datetime.timezone.utc), 'commenter': 'CicadaCinema', 'type': 'User'}, {'comment_id': 963734032, 'comment_body': 'replaced all 6 instances of this pattern in `shapes_ext.dart` as suggested', 'comment_created': datetime.datetime(2022, 9, 6, 13, 49, 12, tzinfo=datetime.timezone.utc), 'commenter': 'CicadaCinema', 'type': 'User'}, {'comment_id': 963784010, 'comment_body': ""I don't think it matters technically (there are subtle differences, extension methods are statically resolved, I don't think it matters here) - I would just think that not using extensions is the simpler choice. So I was looking for a reason extensions was chosen."", 'comment_created': datetime.datetime(2022, 9, 6, 14, 30, 34, tzinfo=datetime.timezone.utc), 'commenter': 'sigurdm', 'type': 'User'}, {'comment_id': 963784284, 'comment_body': 'Good point', 'comment_created': datetime.datetime(2022, 9, 6, 14, 30, 47, tzinfo=datetime.timezone.utc), 'commenter': 'sigurdm', 'type': 'User'}, {'comment_id': 963792798, 'comment_body': '> Is turning an Iterable into a List beneficial for cases where it is accessed more than once?\r\nIt will avoid calculating the condition twice - for very simple conditions calculating twice might be cheaper than allocating the list:\r\n\r\n```\r\nmain() {\r\n  final x = [1,2,3].where((x) {\r\n    print(x);\r\n    return x.isOdd;\r\n  });\r\n  x.toList();\r\n  x.toList();\r\n}\r\n```\r\nprints\r\n```\r\n1\r\n2\r\n3\r\n1\r\n2\r\n3\r\n```\r\n\r\nwhile\r\n```dart\r\nmain() {\r\n  final x = [1,2,3].where((x) {\r\n    print(x);\r\n    return x.isOdd;\r\n  }).toList();\r\n  x.toList();\r\n  x.toList();\r\n}\r\n```\r\nprints:\r\n```\r\n1\r\n2\r\n3\r\n```\r\n\r\n> Or is there also a performance penalty associated with chaining .where() calls?\r\n\r\nYou would have to benchmark, but I very much doubt that the compiler can optimize chained `.where()` calls.\r\n\r\nThat means chained where calls has the overhead of invoking a closure (up to) twice as often. I think it is better to combine the conditions if performance is a concern.\r\n\r\n\r\n', 'comment_created': datetime.datetime(2022, 9, 6, 14, 38, 3, tzinfo=datetime.timezone.utc), 'commenter': 'sigurdm', 'type': 'User'}, {'comment_id': 963795026, 'comment_body': 'I would just absorb it - it is quite simple - but up to you.', 'comment_created': datetime.datetime(2022, 9, 6, 14, 39, 54, tzinfo=datetime.timezone.utc), 'commenter': 'sigurdm', 'type': 'User'}, {'comment_id': 963797784, 'comment_body': 'ah, good point about early returns.\r\n\r\nIf the order matters as I suggest, then you should probably rewrite to avoid early returns (a finally block would also be invoked in case of an exception, not really what you want).\r\n', 'comment_created': datetime.datetime(2022, 9, 6, 14, 42, 16, tzinfo=datetime.timezone.utc), 'commenter': 'sigurdm', 'type': 'User'}, {'comment_id': 963847468, 'comment_body': 'what makes you believe that the order might matter in some cases?', 'comment_created': datetime.datetime(2022, 9, 6, 15, 24, 13, tzinfo=datetime.timezone.utc), 'commenter': 'CicadaCinema', 'type': 'User'}, {'comment_id': 965623613, 'comment_body': ""It just feels more consistent to get the list of issues in reading order (from top->bottom, left->right.) I guess it doesn't really matter."", 'comment_created': datetime.datetime(2022, 9, 8, 7, 52, 5, tzinfo=datetime.timezone.utc), 'commenter': 'sigurdm', 'type': 'User'}, {'comment_id': 965929977, 'comment_body': 'started checking all allowed versions (except the installed one) to try to find one that passes version solving, beginning with the smallest', 'comment_created': datetime.datetime(2022, 9, 8, 12, 50, 28, tzinfo=datetime.timezone.utc), 'commenter': 'CicadaCinema', 'type': 'User'}, {'comment_id': 967021754, 'comment_body': 'made these top-level private functions', 'comment_created': datetime.datetime(2022, 9, 9, 12, 35, 33, tzinfo=datetime.timezone.utc), 'commenter': 'CicadaCinema', 'type': 'User'}, {'comment_id': 967067816, 'comment_body': 'refactored closures here, replaced `List`s with `Set`s where relevant', 'comment_created': datetime.datetime(2022, 9, 9, 13, 23, 32, tzinfo=datetime.timezone.utc), 'commenter': 'CicadaCinema', 'type': 'User'}, {'comment_id': 967070982, 'comment_body': 'absorbed fetchDependencies() into fetchUsingDummyPackage()', 'comment_created': datetime.datetime(2022, 9, 9, 13, 26, 38, tzinfo=datetime.timezone.utc), 'commenter': 'CicadaCinema', 'type': 'User'}, {'comment_id': 967666265, 'comment_body': 'It looks like that getter is specific to https://github.com/dart-lang/pub :\r\nsee https://github.com/dart-lang/pub/blob/bc32a30ea5c86653e2a1899613c0a19d91b9a21c/lib/src/command.dart#L47 where they define `PubCommand`', 'comment_created': datetime.datetime(2022, 9, 10, 15, 18, 31, tzinfo=datetime.timezone.utc), 'commenter': 'CicadaCinema', 'type': 'User'}, {'comment_id': 967686959, 'comment_body': 'I tried to replicate this with https://github.com/dart-lang/pana/pull/1121/commits/c1914f227ea5c019640c828bfcc0a57cd47b0210', 'comment_created': datetime.datetime(2022, 9, 10, 18, 22, 18, tzinfo=datetime.timezone.utc), 'commenter': 'CicadaCinema', 'type': 'User'}, {'comment_id': 967902849, 'comment_body': 'addressed in https://github.com/dart-lang/pana/pull/1121/commits/533fdc392707cf89fb6eb8794a705c1ed123a6fc', 'comment_created': datetime.datetime(2022, 9, 11, 23, 16, 13, tzinfo=datetime.timezone.utc), 'commenter': 'CicadaCinema', 'type': 'User'}, {'comment_id': 967902921, 'comment_body': 'addressed in https://github.com/dart-lang/pana/pull/1121/commits/d0d9b68d25ef7ee105528e69ec67916b19aa85c8', 'comment_created': datetime.datetime(2022, 9, 11, 23, 16, 45, tzinfo=datetime.timezone.utc), 'commenter': 'CicadaCinema', 'type': 'User'}, {'comment_id': 967906783, 'comment_body': 'addressed in https://github.com/dart-lang/pana/pull/1121/commits/02fa6f392f5986492f9b5d680b75c810ea278eba', 'comment_created': datetime.datetime(2022, 9, 11, 23, 44, 8, tzinfo=datetime.timezone.utc), 'commenter': 'CicadaCinema', 'type': 'User'}, {'comment_id': 968625272, 'comment_body': 'addressed in https://github.com/dart-lang/pana/pull/1121/commits/1c3d811f11b0cd498aa87008af667a3853fb8ae0', 'comment_created': datetime.datetime(2022, 9, 12, 16, 28, 1, tzinfo=datetime.timezone.utc), 'commenter': 'CicadaCinema', 'type': 'User'}, {'comment_id': 969546447, 'comment_body': 'addressed in https://github.com/dart-lang/pana/pull/1121/commits/a86cdd444191bbd3a1581b0d4927209bd157f78c', 'comment_created': datetime.datetime(2022, 9, 13, 12, 15, 19, tzinfo=datetime.timezone.utc), 'commenter': 'CicadaCinema', 'type': 'User'}, {'comment_id': 969557474, 'comment_body': 'these are extension methods so that the code in `normalizePackageShape()` is less cluttered\r\nI made any extensions which are only used for normalization private and moved them into [normalize_shape.dart](https://github.com/dart-lang/pana/blob/a86cdd444191bbd3a1581b0d4927209bd157f78c/lib/src/api_analysis/normalize_shape.dart)', 'comment_created': datetime.datetime(2022, 9, 13, 12, 26, tzinfo=datetime.timezone.utc), 'commenter': 'CicadaCinema', 'type': 'User'}, {'comment_id': 969558778, 'comment_body': 'given the discussion in https://github.com/dart-lang/pana/pull/1121#discussion_r962842149 , maybe I should rename this to `typeAliasesInScope`?', 'comment_created': datetime.datetime(2022, 9, 13, 12, 27, 13, tzinfo=datetime.timezone.utc), 'commenter': 'CicadaCinema', 'type': 'User'}, {'comment_id': 969597087, 'comment_body': 'addressed in https://github.com/dart-lang/pana/pull/1121/commits/da8c35a1c5c2393220fef1da322d33056c80af8a', 'comment_created': datetime.datetime(2022, 9, 13, 13, 1, 55, tzinfo=datetime.timezone.utc), 'commenter': 'CicadaCinema', 'type': 'User'}, {'comment_id': 969615175, 'comment_body': 'addressed and simplified this part of the code in https://github.com/dart-lang/pana/pull/1121/commits/9ab28a03d39ca04757bf796b3f37fe298128a9b1', 'comment_created': datetime.datetime(2022, 9, 13, 13, 17, 2, tzinfo=datetime.timezone.utc), 'commenter': 'CicadaCinema', 'type': 'User'}, {'comment_id': 969644464, 'comment_body': 'addressed in https://github.com/dart-lang/pana/pull/1121/commits/ad30e68fb224be7fb2b391ebb5a3adcaec503a2a', 'comment_created': datetime.datetime(2022, 9, 13, 13, 40, 58, tzinfo=datetime.timezone.utc), 'commenter': 'CicadaCinema', 'type': 'User'}, {'comment_id': 969659558, 'comment_body': 'here https://github.com/dart-lang/pana/pull/1121/commits/775ba8411e9526619027e501fcb79d757ce13db3 I optimized iterables which are accessed more than once by converting them to lists, but I think chained `.where()` calls can be left as-is for readability, as opposed to being merged with logical operators', 'comment_created': datetime.datetime(2022, 9, 13, 13, 52, 49, tzinfo=datetime.timezone.utc), 'commenter': 'CicadaCinema', 'type': 'User'}, {'comment_id': 969666095, 'comment_body': '```suggestion\r\nUsage: api-analysis lower-bounds-batch <max-packages> <concurrency> <log-path>\r\n```', 'comment_created': datetime.datetime(2022, 9, 13, 13, 57, 52, tzinfo=datetime.timezone.utc), 'commenter': 'jonasfj', 'type': 'User'}, {'comment_id': 969670747, 'comment_body': ""doesn't `max-packages` suggest that fewer packages may be analysed? typically when the user specifies this package number n, exactly n many eligible packages will be analysed\r\n\r\nso we look for more eligible packages to meet the user given number"", 'comment_created': datetime.datetime(2022, 9, 13, 14, 1, 32, tzinfo=datetime.timezone.utc), 'commenter': 'CicadaCinema', 'type': 'User'}, {'comment_id': 969673942, 'comment_body': 'yeah, it does...\r\n\r\nMaybe just `N` is classic, or `<number-of-packages>` or `<package-count>` or `<package-limit>`', 'comment_created': datetime.datetime(2022, 9, 13, 14, 4, 10, tzinfo=datetime.timezone.utc), 'commenter': 'jonasfj', 'type': 'User'}, {'comment_id': 969674872, 'comment_body': ""Or maybe we should make this an optional option... `--max-packages=1000`, since it's not strictly necessary."", 'comment_created': datetime.datetime(2022, 9, 13, 14, 4, 52, tzinfo=datetime.timezone.utc), 'commenter': 'jonasfj', 'type': 'User'}, {'comment_id': 969678640, 'comment_body': ""yeah I think `<N>` is good\r\n\r\ndo you mean _another_ option max-packages, so that we don't keep looking for eligible packages past this number?"", 'comment_created': datetime.datetime(2022, 9, 13, 14, 8, 1, tzinfo=datetime.timezone.utc), 'commenter': 'CicadaCinema', 'type': 'User'}, {'comment_id': 969685355, 'comment_body': 'addressed in https://github.com/dart-lang/pana/pull/1121/commits/f98b8b3256292d58397861076d7ba1d3b9ddfc67', 'comment_created': datetime.datetime(2022, 9, 13, 14, 13, 23, tzinfo=datetime.timezone.utc), 'commenter': 'CicadaCinema', 'type': 'User'}]","[{'commit_sha': '0a7535811504638a1184bdb7fa7ce98db22fb481', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2b7c02b23b3486ea51c5fe3c8b846463ea919f86', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c840c5050d754b47a28ceae8a28230b48a32250b', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'de3628ade7b2b9ee458f9aebe232fd1e180fdf23', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b7319c0036f601a2a3a8cae193667efe136ade04', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd0f542b7ddde8cc5f410f9e0dfc5771cd68a87f4', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '525cd763689b0f9ef2fbce827a07e4a318d3cb25', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4b34b28e0f084b372aa64151232826dd0a2c57c7', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8825e45c0c1dcf60233b3d5b0aa9c4ff6ccb6c9c', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7e96efe7a432732a6654a5360c959df6525e41e6', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5e94836a4c48e9c87368b749cbadbdb98a47a87c', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8168fc68e7f669a5de6d2513fc131eb8e631a7a3', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0b64ba4e4b5660099c33e7ff4f2bc0911e7dc2c7', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3eb6862d19bcc27cb276da9a6263302dac35d906', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '63b1398ce5258869dfc04985c2c555c72b875741', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a1e0d274668841f8ecd359d8b25ec594d2f34f8c', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2cf89e23b4d6a1eb163f203c9c7a9c60e98e58a6', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '69447bb04e82681db9573381ad66f7cc8606c5ea', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b92f3d26607ff71c1e5dff857c9dcef0b5243354', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '01caf613bdd20a595d4c3722ac9045e9229edc4c', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '15a5718fe19d87bf0f91ac0f48171dc0627c6235', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '121ba5e11de18847a83d9bdaeb391746f769f088', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '948f1139e9ee95e2f76b7c012657e0ca9c21e4cc', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd4bbadffba273178fdb40226be4ab53c5cf31799', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a4ca6163efe04e00097dd1da0b2254c64811c40b', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6bb7940aca70d0ec771bbd857e3d4dde80298c40', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '00977d1db2375533db2a69c0c9301234343ed51f', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '03a02b09cbcc3c89e580ce865c77489008cb4692', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '34fa49b72625ec30bfd844305ae6ecfb4361e553', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '92db4cff4c1a89e4864c10fdfccdb030c9226565', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e3ec03e513bc0a26ecd667f78f0e5a272b1f3291', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd8f4aac4d193ffdeb978b60ce7b44964aacc2b22', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '949425e0a90d551cbda50cb3dc8528b24e7aa97c', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b066a3bce84f72c51b615f7f861dd248f15b8596', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '750c74969dfcac86b5de120fdc65d6cc1476bc80', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd49fb4a58dd0f83108a293c078e88ffb36f6bc6e', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b15c5d463794d99cee5f6d589399f841a83da65e', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '72af07bb3beff5e461ef4cbfbfb88fbac57cad1d', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0ec6f70fb45bcb63090c0c47a29f8563eb3ca63a', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e35447ba53c59884de4bca4c94c9c92b6606c1d7', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '60c09c12ef3e6516fa2d48821c26e80eda387c68', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '85fc697380a4b35a6084b3b933640474092866d0', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '90d25896ab6ecbbeb797118d5f50ee0dface5149', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '22a3a49bb2fda23925597172c808ecc6a1726cea', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '70f98dd8bed130415ce12b8d658d1cfae2aea625', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3249ab6cadf88641afad3369a77d1dc588928fe9', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '46d08d0d3f554ac998faa04506aa7e6d26122e87', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd546d16a0443d1405e96c92a5f4dc43c73f06b61', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '19b3a1cbcda88fbc29ae6e0513881d6a1040ac99', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f6b3f2059d9e21ff0f5d3ef2edea6a1607a6e852', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8a1b5cc7e76df0ed386cebdd51e9b2b3abd136c4', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ec107bb680e0b41da63649832e72231216a7e201', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cb7e464c1f4af392dc6d016fcf5ede892fdfdd1d', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '495e12966f60b27156d1a0f6a897bbec3849f3b9', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '06e9b53863b8aa46e024e0abc1a73eb845a3bad2', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0e6664ddb3be3383b758d02be7a37499362afa5e', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '09c0d56cc859a83710e3b5138c7b945f11fa0ded', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e323d9ba36c19b5aa8b2ec039c4702e3a0810d71', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c93a5713652f02cd70b8effa5f31c1aab35b9192', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5051b5413129b224eef31236256dd79b9811fe64', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '19cdeb705dd51794faee07ba40187ccc8f6cd21e', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2be3fbb3891953f60b13b03a824f97d467a851a7', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e641ad7b211846170d9e087ab004633af6fbbae7', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '356f370712440c04ee06a18ac7352d974983b0ee', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '46558960cf5c0bddf3ca331bc6bb5e891b067f19', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '090ce56ba343bd159c4f17dc06a602387da86196', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4d5b6604bd17243bf10fc9da18e440edca8a83d3', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ae04b006294f258c9e18934c3311595613d871c2', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '23b89ccd34f759b007a6dae12243772bbb2c13bf', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2fce6c3bc70bb3decad06426b62819c48cd20cae', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd27c8010dbb19a0bfba0916e57d3a4a707deaf11', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '69a6f6c9614b85227ec4ce59fa6000047ce130a9', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '13d67e7acc923407bd00c91f483a7e877a9a5420', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7534b8a21b7440c014894a27c9b6902c61291ebe', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5c6a6c6ebb41ec2c85d2204ef8f0626fd8230477', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1c82a71d12789b2eb2f3a46157c7d8f0410224a9', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0a223df8c5cc65e411a2f8a826d7ad79cb9f96dd', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b82ca17b8aaff050e2507fd7deb38c415829bcbb', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '09bab99d9d3c227bdf389584b99d9d17bc91f969', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c28c282ae5b2236d697988281915996dbfdcd372', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '714338dcd0bdab31ae9383ebcd95b8d53ebcdd21', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7e09995c47283da2c271325567dc918abe7f00c8', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'de4b0b036833c6a67c6dbeb6cce42880c0cc6987', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f8ba1d2e0790adabfb297c56efe6c25c478fc989', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '87579d383bbb888ae9cfb4a421d2265a2878aec8', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5d2bf8fd81db95517f97a3f65fa7d778f85db979', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a9226040f0ffd7bb626eed32df68384003f2e595', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1bcf844f95b61ea0de9689da4f84682c8bf0c1a5', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '049fa346fb901701f440a11a6545385c2bbc55ca', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7608b7faa5dc127346ec791709e6bf16acd5b188', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e0b7fad164e637b64eb817989a7113e08094e3be', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b0fd73ccc66610573bdcf60de0a8f0e8e12745ca', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '94f51b62654c8fa23a96e7e41740ebf989b9aa05', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '39655ac331a5bbbdcbf3efaf4daa8223632fa9bf', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6dcf88b87ee73f54683a4b797750e2e74a185e8f', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ea56d2e8cc6ce40f7f3b6b654460546ce9faf4bf', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '12b55fb0d8f028ac4e0060b161395ea5fe959e2d', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2ef26becc5c1e513125acdd439c9f9a8b289ed49', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6f36df989e013f41fbc7b60f11dd1695fcdda985', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0e1a339b9aea0ab36fadef8e657bbf5a43828bf6', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '243287f0da5c57aaa8343bc2570576cf7432bdae', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'deca49cbfdff1b078909531a90e91226bfeafad8', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd6943ac5b0c0921793c55dd36743cdd584cef383', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ab45ec5c61f898c271ceb8e7c8cf2f36a29e26c3', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2b7db99308a32aa6c24f600fe3cde09705884e46', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ab8b9b8541e68dbfea75e986b7638d3296ebd9f3', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0658fb38febd4712e924a57991fd6f29b984987c', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd028b5081db61b7bfb69f2913d157bf65bbe1e8a', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ba16c1ea4c81ecc357f110f45e7a4240c33d72e6', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6342c09beb4122c70eae6b7e27ed0b240e6d0047', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ad0a6ff3a2250d3c1a2c36b346531441272e113a', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3ff59eb2cf78a471118fdd1ab43f52aa193c3299', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ede46d88ea91d7931333f92bf33a1f3529feb77f', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b32853e3c6e454cbe8c963ffbbfa1a937f8e91cc', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6dee68067cfb8ab1daa08240e819a5764cbeaab3', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '476c8c65ed401a378905498a3f2b3e71e3f942b6', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3b536bfeef211eba4da264a46a55c3b05eae78ba', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4e0899718a8625477f6426b0df3580f4e08ab6cc', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '51c037b5516030d2e0437b62beed8de953bb2088', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'be4a3c10574c4e212a465e7babb7a4b5a7be342c', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a67fcdb2f6e210753870ffc0d890015aeef589e8', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '75ad2532bbf35d1898bfc384e8c3e684f2770ee3', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9afc6f650a4a729c8da61f13337d25891ff95296', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '441ec4363d0d3660ba11fb110c3750fe01a0b600', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c6471e4ee518c0556eda850e61371ed55af5b699', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '18f2a93a9cf40c520e7785efbd80aacd602a5ec6', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '289451fe96df1a90a888691dd490651163341f79', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '289d0b3605bfeb3e4a4a6bc1fd8c711e50449681', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bf3b693037adb9e05cc4f4b674c93009da48f33b', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cd808e7936048f24616867e916a1afb5f5d3b317', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8b546fd70470f876e377b9ab0c9795924cbfd4f7', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4baf2c1748b40bc1933de6f84a4f235f52f58676', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '65cea2c0762b5a22b2d716434c0ae95ecb07749e', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6df3596cb6b4d98a1e072ceb4d90b60558174d9b', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '34158fb8d81fb9ec41916f16899b9c4d0defd422', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1558c6b4918be139e20128cb6cb64b724fff2003', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '65bf866c75ad98af8b933974d688193f40d035c8', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7fe9d881a26fea2859c8d959a72337275c64ab94', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8e40ac7337363c247e107a8f21b4ca2fc01782e9', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9c4e8e9c97a824396466cbed5fe7ca0e27322fcf', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f53bc02d4a6e34ed443fd560cde1a1eede318296', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8231a692fb8e1c19f8b38b7b00768acf7e5c946f', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6b6e1193ea2d5cac328d0ee384966c37d391b9a0', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c7613fa582b5fd093e146f53d86c26253a464c95', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3c73e9f88f8de03096dc199c5e36752d9e81d621', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1f7c6f031c23490996d743e9d4a3699bd58d28bf', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '951f3a5251d1858f57f46dc41383760192e1d66e', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f8dd1a68f4f89fae1c9256c02df48b283cd7431c', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e5548e34a4db985e3b538dfc634bf498cb2ca32f', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '70cd8006209d495d2aa9b42d42862dc179efee7f', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b7cecf8ed5f2b5423ee72a1012183f82cc0a39c8', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b4f5d19dc4acb589bd9053f2de5ff13741641606', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0f616f5aa8718fce9d5d3c14f6cf7b4b594352b6', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1d00f1900e21adc5108fec1b8183bbcac82f4a3b', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c8c96791052d9e88ea80ba5cb2c0a7c906ec5b5c', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2da1559c9d5722de43cd0d00948d9001f075fb06', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '51966f5f076765cdbc36753f223a77a83407e968', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '52615c006f92d47092222ea0f7c570f42cf95773', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '46794b23e0918ec283d2e08708b49d075846c4b1', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '01602e1e62067c46da2628a8b73dc75cfa9d9287', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7ff394d4f4a20608aefe7b2c2a77bf3270a02dda', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3724e915ee078d709168acfca551f0a699fdaa98', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5d37516f240ae42789a7359eb29251804079cd60', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8ecb4379ca1451a05313ba7c8cf71260b32c11e8', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e89094e7d1f0e40f3bbd825186cd93fc7f30d282', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bac29e3605bff387e694d035b0673967b1429b59', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f145dfb5ae6fc6cc2f2f77c9bedbe0ff30fee7b5', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fb269a013bec28c3b5f620f1e2c4513ef877df5c', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a4beca7759e7e496d4d035cf15a6c948c087ab15', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3d1d4f377167e8477e0597e380e8f8fad711c0f2', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '07351ba6721d7bc20714e93dba568e4e22b18923', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '71ad1a274793768dc0ff77bfaa2094a7e0b3c259', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0bf391cf5f9b5b67151ac2121678b589dcf384ee', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2bfa4a4bba8314aff9dd8b26efcedfe40cf12fb1', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e1b85a56f25ac6be363cd9f4f1cadc833bf279fb', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0554f8850527cc3a9777cd50a82c00e753415167', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bcb44929369366ef8ee4b5f8409595059d199a83', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '23d92c00c56deca504b55b1ee0bf5b6ec9f44872', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '25313003cc6c7faac2649c351708659a9c4b4ec6', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c06fe4b1d0cedb48a3e6de0c120d40f33c42f33f', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e384c0f3707da85fd81b56cce9f73b901f447465', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '084a34eca691f700b75a3c243c6a6fdace0b9cd1', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0f4b486d9ae800cc9b4712d68f6c2d8315f3f07a', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a40a46920c4e6edbc36208e996ee0b28fe7d8bb9', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e1988057ce3b680491386da5a1a1e29fcf1adb7e', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '38b9d239fb79ecdc16ad34f55501e3b4d7e11ee1', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '55c3aa07be35d5f0a9f11446b42f2f4af27c68df', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a653418805c0dc2b891660327bb5350a59ec16e0', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8b17760be5739be0cb9e7f60662201d51778cdfb', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd15d4041cd630007efff46a448f50408106c0f03', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c1914f227ea5c019640c828bfcc0a57cd47b0210', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd068e09343335749e9d8813a376d0d90932377cc', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f49269219dbc83fdbf940630d965d141b5b66120', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '533fdc392707cf89fb6eb8794a705c1ed123a6fc', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd0d9b68d25ef7ee105528e69ec67916b19aa85c8', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '02fa6f392f5986492f9b5d680b75c810ea278eba', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1c3d811f11b0cd498aa87008af667a3853fb8ae0', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '236a7dd60d388cf050888b705def4205b3c67f96', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a86cdd444191bbd3a1581b0d4927209bd157f78c', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'da8c35a1c5c2393220fef1da322d33056c80af8a', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9ab28a03d39ca04757bf796b3f37fe298128a9b1', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ad30e68fb224be7fb2b391ebb5a3adcaec503a2a', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '775ba8411e9526619027e501fcb79d757ce13db3', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f98b8b3256292d58397861076d7ba1d3b9ddfc67', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}]",,52425971,,User,,39,,5,5
1010882104,bump package:analyzer version in dependencies of analyzer_plugin to support new property names,,False,49552,https://api.github.com/repos/dart-lang/sdk/pulls/49552,https://github.com/dart-lang/sdk/pull/49552,closed,1,1,1,1,0,0,0,0,[],2022-07-28 14:11:30+00:00,2022-07-28 14:48:14+00:00,2204.0,0:36:44,[],"[{'commit_sha': '74117d8fa48526c0eb6eb5c72c665ad3ea8df7ed', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}]",,52425971,,User,,39,,5,5
1011374132,Bump version constraint of pubspec_parse,The [usage](https://github.com/dart-lang/pana/blob/903a15ff305369d17a54d1f4aa4ae0add79acbd0/lib/src/pubspec.dart#L46) of the screenshots field stipulates at least v1.2.0 of package:pubspec_parse - see https://github.com/dart-lang/pubspec_parse/commit/47fa52db323ff3a3315c4462756e38a7020cb91d,True,1098,https://api.github.com/repos/dart-lang/pana/pulls/1098,https://github.com/dart-lang/pana/pull/1098,closed,1,1,1,1,1,0,0,0,[],2022-07-28 22:24:24+00:00,2022-07-29 06:22:40+00:00,28696.0,7:58:16,[],"[{'commit_sha': '2080caeaf41f920ab38bf59a5d8ec28a92e00296', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}]",,52425971,,User,,39,,5,5
1015244497,bump version constraint of package:http,"The [usage](https://github.com/dart-lang/pana/blob/efcfd1d8e917900817a8fd72bf16c795ab508a96/lib/src/download_utils.dart#L39) of the `RetryClient` class (imported from `package:http/retry.dart`) stipulates at least v0.13.2 of `package:http`
- see https://github.com/dart-lang/http/commit/69d6064dd92470ed7ccd50a808fc789ee7716fe8 where it was moved from `package:http_retry`
- also see https://github.com/dart-lang/http/blob/master/pkgs/http/CHANGELOG.md#0132",True,1103,https://api.github.com/repos/dart-lang/pana/pulls/1103,https://github.com/dart-lang/pana/pull/1103,closed,1,1,1,1,1,0,0,0,[],2022-08-02 15:10:09+00:00,2022-08-03 14:57:16+00:00,85627.0,23:47:07,[],"[{'commit_sha': 'be5d537516cdd29e97393f31b56d3015306adcbe', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}]",,52425971,,User,,39,,5,5
1016257366,[path_provider_windows] bump dependency version of package:win32 in path_provider_windows,"The usage https://github.com/flutter/plugins/blob/b0bfab678f83bebd49e9f9d0a83fe9b40774e853/packages/path_provider/path_provider_windows/lib/src/path_provider_windows_real.dart#L195 of the `wsalloc` function stipulates at least v2.1.0 of `package:win32`
- see https://github.com/timsneath/win32/commit/1ef183040381d89ed2cf27daf5d86afe403ee79c#diff-17db63ed2e34bd40b2bf89c04f997ba760e4fd75b04e6cf03f58349bd458477dR35 where `wsalloc` was introduced
- also see https://pub.dev/documentation/win32/2.1.0/win32/wsalloc.html and https://pub.dev/documentation/win32/2.0.5/win32/wsalloc.html (`wsalloc` not present in v2.0.5 of `package:win32`)

## Pre-launch Checklist

- [x] I read the [Contributor Guide] and followed the process outlined there for submitting PRs.
- [x] I read the [Tree Hygiene] wiki page, which explains my responsibilities.
- [x] I read and followed the [relevant style guides] and ran [the auto-formatter]. (Unlike the flutter/flutter repo, the flutter/plugins repo does use `dart format`.)
- [x] I signed the [CLA].
- [x] The title of the PR starts with the name of the plugin surrounded by square brackets, e.g. `[shared_preferences]`
- [x] I listed at least one issue that this PR fixes in the description above.
- [x] I updated pubspec.yaml with an appropriate new version according to the [pub versioning philosophy](https://dart.dev/tools/pub/versioning)
- [x] I updated `CHANGELOG.md` to add a description of the change, [following repository CHANGELOG style].
- [x] I updated/added relevant documentation (doc comments with `///`).
- [x] this PR is [test-exempt].
- [x] All existing and new tests are passing.

<!-- Links -->
[Contributor Guide]: https://github.com/flutter/plugins/blob/main/CONTRIBUTING.md
[Tree Hygiene]: https://github.com/flutter/flutter/wiki/Tree-hygiene
[relevant style guides]: https://github.com/flutter/plugins/blob/main/CONTRIBUTING.md#style
[CLA]: https://cla.developers.google.com/
[flutter/tests]: https://github.com/flutter/tests
[breaking change policy]: https://github.com/flutter/flutter/wiki/Tree-hygiene#handling-breaking-changes
[Discord]: https://github.com/flutter/flutter/wiki/Chat
[pub versioning philosophy]: https://dart.dev/tools/pub/versioning
[exempt from version changes]: https://github.com/flutter/flutter/wiki/Contributing-to-Plugins-and-Packages#version-and-changelog-updates
[following repository CHANGELOG style]: https://github.com/flutter/flutter/wiki/Contributing-to-Plugins-and-Packages#changelog-style
[the auto-formatter]: https://github.com/flutter/plugins/blob/main/script/tool/README.md#format-code
[test-exempt]: https://github.com/flutter/flutter/wiki/Tree-hygiene#tests
",True,6176,https://api.github.com/repos/flutter/plugins/pulls/6176,https://github.com/flutter/plugins/pull/6176,closed,6,2,2,3,2,0,3,0,"[{'name': 'p: path_provider'}, {'name': 'platform-windows'}, {'name': 'autosubmit'}]",2022-08-03 12:37:35+00:00,2022-08-03 22:09:06+00:00,34291.0,9:31:31,[],"[{'commit_sha': 'eaa715af4c5476b0a673c420bb8e41f18b3cfe17', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2ab54dcedcc719304e85751d515abb64b15d17c1', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '57e1724340094b2ae59fed01f28e001022dcacec', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}]",,52425971,,User,,39,,5,5
1016319111,bump version constraint of package:analyzer,"The [usage](https://github.com/dart-lang/mockito/blob/2acf22f4d400c6e1eee0f6ca595092220fba8b34/lib/src/builder.dart#L412) of the `libraryExports` property (of the `LibraryOrAugmentationElement` class which is implemented by `LibraryElement`) stipulates at least v4.3.0 of `package:analyzer`
- see https://github.com/dart-lang/sdk/commit/e23101a16fedf090127b52142ac96a6091d2f617#diff-4d31b9e465218793b506aee1f5156d6d80a86c26e6c480b33eb306f20817bdb5R1614 where `libraryExports` was added
- also see the changelog entry https://github.com/dart-lang/sdk/blob/main/pkg/analyzer/CHANGELOG.md#430",False,558,https://api.github.com/repos/dart-lang/mockito/pulls/558,https://github.com/dart-lang/mockito/pull/558,closed,1,1,1,1,1,0,0,0,[],2022-08-03 13:31:58+00:00,2022-09-14 18:15:50+00:00,3645832.0,"42 days, 4:43:52",[],"[{'commit_sha': '60c1509aac67b9aeee4237db9bee689dd02928ed', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}]",,52425971,,User,,39,,5,5
1017611200,[image_picker_android] bump dependency version of package:image_picker_platform_interface,"The usage https://github.com/flutter/plugins/blob/95a1f2cb00a316440d0bd8ba7e9a81c37a538917/packages/image_picker/image_picker_android/lib/image_picker_android.dart#L174 of the `ImagePickerOptions` class stipulates at least v2.5.0 of `package:image_picker_platform_interface`
- see https://github.com/flutter/plugins/commit/c13e8a50688b65b740a47adc1f6149ffcb9640eb#diff-22398a12b080f477ab1716a09c1e91ac492cd2255f5f7dc335033da535c02dfaR8 where `ImagePickerOptions` was introduced
- also see https://github.com/flutter/plugins/blob/main/packages/image_picker/image_picker_platform_interface/CHANGELOG.md#250

## Pre-launch Checklist

- [x] I read the [Contributor Guide] and followed the process outlined there for submitting PRs.
- [x] I read the [Tree Hygiene] wiki page, which explains my responsibilities.
- [x] I read and followed the [relevant style guides] and ran [the auto-formatter]. (Unlike the flutter/flutter repo, the flutter/plugins repo does use `dart format`.)
- [x] I signed the [CLA].
- [x] The title of the PR starts with the name of the plugin surrounded by square brackets, e.g. `[shared_preferences]`
- [x] I listed at least one issue that this PR fixes in the description above.
- [x] I updated `pubspec.yaml` with an appropriate new version according to the [pub versioning philosophy], or this PR is [exempt from version changes].
- [x] I updated `CHANGELOG.md` to add a description of the change, [following repository CHANGELOG style].
- [x] I updated/added relevant documentation (doc comments with `///`).
- [x] this PR is [test-exempt].
- [x] All existing and new tests are passing.

If you need help, consider asking for advice on the #hackers-new channel on [Discord].

<!-- Links -->
[Contributor Guide]: https://github.com/flutter/plugins/blob/main/CONTRIBUTING.md
[Tree Hygiene]: https://github.com/flutter/flutter/wiki/Tree-hygiene
[relevant style guides]: https://github.com/flutter/plugins/blob/main/CONTRIBUTING.md#style
[CLA]: https://cla.developers.google.com/
[flutter/tests]: https://github.com/flutter/tests
[breaking change policy]: https://github.com/flutter/flutter/wiki/Tree-hygiene#handling-breaking-changes
[Discord]: https://github.com/flutter/flutter/wiki/Chat
[pub versioning philosophy]: https://dart.dev/tools/pub/versioning
[exempt from version changes]: https://github.com/flutter/flutter/wiki/Contributing-to-Plugins-and-Packages#version-and-changelog-updates
[following repository CHANGELOG style]: https://github.com/flutter/flutter/wiki/Contributing-to-Plugins-and-Packages#changelog-style
[the auto-formatter]: https://github.com/flutter/plugins/blob/main/script/tool/README.md#format-code
[test-exempt]: https://github.com/flutter/flutter/wiki/Tree-hygiene#tests
",False,6202,https://api.github.com/repos/flutter/plugins/pulls/6202,https://github.com/flutter/plugins/pull/6202,closed,6,2,2,2,2,0,2,0,"[{'name': 'p: image_picker'}, {'name': 'platform-android'}]",2022-08-04 14:18:06+00:00,2022-08-05 01:44:36+00:00,41190.0,11:26:30,[],"[{'commit_sha': '6c195e3ef16efffe8e193c3b6b1bea94ff1d4492', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c02c014d0a8957b47be6fa55d30f0c69b24d609e', 'committer_username': 'CicadaCinema', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc)}]",,52425971,,User,,39,,5,5
1018154480,[ci] Run analyze with minimum resolved packages,"Since our CI always runs on clean projects, they always get the latest resolved versions of dependencies, so won't catch the easy-to-make mistake of introducing use of a new dependency API without updating the minimum version of that dependency to the version that introduced that API.

This adds a new `--downgrade` flag to `analyze` to run `flutter pub downgrade` before analyzing, and adds a new CI step to run in that mode. (This won't catch runtime mistakes, but as with the ""legacy analyze"" runs this catches the most common type of mistake at a fraction of the CI cost of running all tests again.)

Also fixes all the existing violations flagged by the new step.

Fixes https://github.com/flutter/flutter/issues/108992

## Pre-launch Checklist

- [x] I read the [Contributor Guide] and followed the process outlined there for submitting PRs.
- [x] I read the [Tree Hygiene] wiki page, which explains my responsibilities.
- [x] I read and followed the [relevant style guides] and ran [the auto-formatter]. (Unlike the flutter/flutter repo, the flutter/plugins repo does use `dart format`.)
- [x] I signed the [CLA].
- [x] The title of the PR starts with the name of the plugin surrounded by square brackets, e.g. `[shared_preferences]`
- [x] I listed at least one issue that this PR fixes in the description above.
- [x] I updated `pubspec.yaml` with an appropriate new version according to the [pub versioning philosophy], or this PR is [exempt from version changes].
- [x] I updated `CHANGELOG.md` to add a description of the change, [following repository CHANGELOG style].
- [x] I updated/added relevant documentation (doc comments with `///`).
- [x] I added new tests to check the change I am making, or this PR is [test-exempt].
- [x] All existing and new tests are passing.

<!-- Links -->
[Contributor Guide]: https://github.com/flutter/plugins/blob/main/CONTRIBUTING.md
[Tree Hygiene]: https://github.com/flutter/flutter/wiki/Tree-hygiene
[relevant style guides]: https://github.com/flutter/plugins/blob/main/CONTRIBUTING.md#style
[CLA]: https://cla.developers.google.com/
[flutter/tests]: https://github.com/flutter/tests
[breaking change policy]: https://github.com/flutter/flutter/wiki/Tree-hygiene#handling-breaking-changes
[Discord]: https://github.com/flutter/flutter/wiki/Chat
[pub versioning philosophy]: https://dart.dev/tools/pub/versioning
[exempt from version changes]: https://github.com/flutter/flutter/wiki/Contributing-to-Plugins-and-Packages#version-and-changelog-updates
[following repository CHANGELOG style]: https://github.com/flutter/flutter/wiki/Contributing-to-Plugins-and-Packages#changelog-style
[the auto-formatter]: https://github.com/flutter/plugins/blob/main/script/tool/README.md#format-code
[test-exempt]: https://github.com/flutter/flutter/wiki/Tree-hygiene#tests
",True,6207,https://api.github.com/repos/flutter/plugins/pulls/6207,https://github.com/flutter/plugins/pull/6207,closed,124,18,17,4,1,6,9,0,"[{'name': 'p: webview_flutter'}, {'name': 'p: image_picker'}, {'name': 'p: local_auth'}, {'name': 'p: url_launcher'}, {'name': 'platform-ios'}, {'name': 'platform-android'}, {'name': 'platform-windows'}, {'name': 'platform-web'}, {'name': 'autosubmit'}]",2022-08-05 01:31:35+00:00,2022-08-05 20:33:05+00:00,68490.0,19:01:30,"[{'comment_id': 938589344, 'comment_body': 'nit: remove comma', 'comment_created': datetime.datetime(2022, 8, 5, 8, 41, 42, tzinfo=datetime.timezone.utc), 'commenter': 'GaryQian', 'type': 'User'}, {'comment_id': 938594695, 'comment_body': 'From https://dart.dev/tools/pub/cmd/pub-downgrade:\r\n`The dart pub downgrade command creates a lockfile. If one already exists, pub ignores that file and generates a new one from scratch, using the lowest versions of all dependencies.`\r\n\r\nAre we okay with the analyze command creating artifacts? If so, we should note it.', 'comment_created': datetime.datetime(2022, 8, 5, 8, 47, 44, tzinfo=datetime.timezone.utc), 'commenter': 'GaryQian', 'type': 'User'}, {'comment_id': 938595304, 'comment_body': 'I guess pub get also does a similar thing, so this should be fine.', 'comment_created': datetime.datetime(2022, 8, 5, 8, 48, 26, tzinfo=datetime.timezone.utc), 'commenter': 'GaryQian', 'type': 'User'}, {'comment_id': 938633979, 'comment_body': 'Awesome! This check seems useful.', 'comment_created': datetime.datetime(2022, 8, 5, 9, 30, tzinfo=datetime.timezone.utc), 'commenter': 'GaryQian', 'type': 'User'}, {'comment_id': 938901829, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2022, 8, 5, 14, 56, 47, tzinfo=datetime.timezone.utc), 'commenter': 'stuartmorgan', 'type': 'User'}, {'comment_id': 938902731, 'comment_body': 'Yes, analyze always creates a lock file because we always have to fetch packages.', 'comment_created': datetime.datetime(2022, 8, 5, 14, 57, 44, tzinfo=datetime.timezone.utc), 'commenter': 'stuartmorgan', 'type': 'User'}]","[{'commit_sha': '425daf8ec7d5653d344c2557788cae9467fe7725', 'committer_username': 'stuartmorgan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2009, 9, 2, 3, 2, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': '12d460a4baee1f8ea2bbef62a71f98c855db4612', 'committer_username': 'stuartmorgan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2009, 9, 2, 3, 2, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6fbe6eb898329728a5cc34c6e12dc2ed027ac4f8', 'committer_username': 'stuartmorgan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2009, 9, 2, 3, 2, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'db5791a3cf265dd953b0efaf30c65905b192a038', 'committer_username': 'stuartmorgan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2009, 9, 2, 3, 2, 59, tzinfo=datetime.timezone.utc)}]",,122189,,User,,20,,0,435

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
21815540,mockito,dart-lang/mockito,Dart,161,628,44,72,620,63,4,4,"[{'id': 1016319111, 'number': 558, 'closed': datetime.datetime(2022, 9, 14, 18, 15, 50, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 3, 13, 31, 58, tzinfo=datetime.timezone.utc), 'time_taken': 3645832.0, 'time_delta': '42 days, 4:43:52', 'additions': 1, 'deletions': 1, 'state': 'closed'}]"
496400013,pana,CicadaCinema/pana,Dart,0,1,0,23,1142,0,5,0,"[{'id': 984064782, 'number': 2, 'closed': datetime.datetime(2022, 8, 30, 14, 48, 44, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 6, 30, 16, 33, 35, tzinfo=datetime.timezone.utc), 'time_taken': 5264109.0, 'time_delta': '60 days, 22:15:09', 'additions': 6470, 'deletions': 935, 'state': 'closed'}, {'id': 951213664, 'number': 1, 'closed': datetime.datetime(2022, 6, 29, 16, 21, 29, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 5, 30, 17, 36, 32, tzinfo=datetime.timezone.utc), 'time_taken': 2587497.0, 'time_delta': '29 days, 22:44:57', 'additions': 1621, 'deletions': 0, 'state': 'closed'}]"
43093613,pana,dart-lang/pana,Dart,44,203,38,27,1217,24,4,0,"[{'id': 1041102764, 'number': 1121, 'closed': datetime.datetime(2024, 3, 12, 9, 13, 33, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 30, 14, 53, 12, tzinfo=datetime.timezone.utc), 'time_taken': 48363621.0, 'time_delta': '559 days, 18:20:21', 'additions': 7044, 'deletions': 1, 'state': 'closed'}, {'id': 1015244497, 'number': 1103, 'closed': datetime.datetime(2022, 8, 3, 14, 57, 16, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 2, 15, 10, 9, tzinfo=datetime.timezone.utc), 'time_taken': 85627.0, 'time_delta': '23:47:07', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 1011374132, 'number': 1098, 'closed': datetime.datetime(2022, 7, 29, 6, 22, 40, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 28, 22, 24, 24, tzinfo=datetime.timezone.utc), 'time_taken': 28696.0, 'time_delta': '7:58:16', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 991649103, 'number': 1088, 'closed': datetime.datetime(2022, 7, 15, 12, 0, 44, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 8, 13, 8, 8, tzinfo=datetime.timezone.utc), 'time_taken': 600756.0, 'time_delta': '6 days, 22:52:36', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 951202014, 'number': 1067, 'closed': datetime.datetime(2022, 5, 30, 17, 34, 8, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 5, 30, 17, 17, 54, tzinfo=datetime.timezone.utc), 'time_taken': 974.0, 'time_delta': '0:16:14', 'additions': 60, 'deletions': 0, 'state': 'closed'}]"
35726310,sdk,dart-lang/sdk,Dart,1548,10039,289,646,102684,7253,17,5,"[{'id': 1010882104, 'number': 49552, 'closed': datetime.datetime(2022, 7, 28, 14, 48, 14, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 28, 14, 11, 30, tzinfo=datetime.timezone.utc), 'time_taken': 2204.0, 'time_delta': '0:36:44', 'additions': 1, 'deletions': 1, 'state': 'closed'}]"
88650014,plugins,flutter/plugins,Dart,9824,17425,540,597,4548,0,30,0,"[{'id': 1017611200, 'number': 6202, 'closed': datetime.datetime(2022, 8, 5, 1, 44, 36, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 4, 14, 18, 6, tzinfo=datetime.timezone.utc), 'time_taken': 41190.0, 'time_delta': '11:26:30', 'additions': 6, 'deletions': 2, 'state': 'closed'}, {'id': 1016257366, 'number': 6176, 'closed': datetime.datetime(2022, 8, 3, 22, 9, 6, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 3, 12, 37, 35, tzinfo=datetime.timezone.utc), 'time_taken': 34291.0, 'time_delta': '9:31:31', 'additions': 6, 'deletions': 2, 'state': 'closed'}, {'id': 602053110, 'number': 3762, 'closed': datetime.datetime(2021, 3, 29, 16, 49, 7, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 3, 27, 11, 41, 15, tzinfo=datetime.timezone.utc), 'time_taken': 191272.0, 'time_delta': '2 days, 5:07:52', 'additions': 2, 'deletions': 2, 'state': 'closed'}]"
