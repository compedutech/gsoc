pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
419905881,Improve performance of lib_oval.py 's getElementById method,"This came up at https://github.com/nexB/vulnerablecode/pull/179 as we wanted to make parser for OVAL documents to obtain mappings of vulnerabilities and packages. 

I have used  https://people.canonical.com/~ubuntu-security/oval/com.ubuntu.xenial.cve.oval.xml.bz2 which is about 40 MB to obtain these below stats
Before performance tweaks :  
```

...: p = pstats.Stats('perf.txt') 
   ...: p.sort_stats('cumulative').print_stats(10)                                                                           
Sat May 16 15:19:18 2020    perf.txt

         769968949 function calls (769934359 primitive calls) in 383.945 seconds

   Ordered by: cumulative time
   List reduced from 469 to 10 due to restriction <10>

   ncalls  tottime  percall  cumtime  percall filename:lineno(function)
     27/1    0.000    0.000  383.945  383.945 {built-in method builtins.exec}
        1    0.000    0.000  383.945  383.945 profiler.py:1(<module>)
        1    0.434    0.434  382.571  382.571 /home/shivam/coding/opensource/oriv/vulnerablecode/vulnerabilities/scraper/oval_parser.py:22(get_data)
    84661   12.240    0.000  205.191    0.002 /home/shivam/coding/opensource/oriv/vulnerablecode/vulnerabilities/scraper/lib_oval.py:408(getElementByID)
    33373    9.235    0.000  195.203    0.006 /home/shivam/coding/opensource/oriv/vulnerablecode/vulnerabilities/scraper/oval_parser.py:115(get_object_state_of_test)
    15267   59.637    0.004  162.846    0.011 /home/shivam/coding/opensource/oriv/vulnerablecode/vulnerabilities/scraper/oval_parser.py:95(get_tests_of_definition)
289921428   75.677    0.000  123.842    0.000 /home/shivam/coding/opensource/oriv/vulnerablecode/vulnerabilities/scraper/lib_oval.py:734(getId)
    33373    2.101    0.000  112.006    0.003 /home/shivam/coding/opensource/oriv/vulnerablecode/vulnerabilities/scraper/lib_oval.py:356(getStates)
    33373   52.569    0.002  109.479    0.003 /home/shivam/coding/opensource/oriv/vulnerablecode/vulnerabilities/scraper/lib_oval.py:377(<listcomp>)
110130900   56.909    0.000   56.909    0.000 /home/shivam/coding/opensource/oriv/vulnerablecode/vulnerabilities/scraper/lib_oval.py:1358(__init__)
```
As you can see the old getElementById method was the culprit.
The new getElementById method(the one included in the PR)  gives these stats 

```
Sat May 16 17:18:32 2020    perf3.txt

         4094392 function calls (4059802 primitive calls) in 5.144 seconds

   Ordered by: cumulative time
   List reduced from 476 to 10 due to restriction <10>

   ncalls  tottime  percall  cumtime  percall filename:lineno(function)
     27/1    0.000    0.000    5.144    5.144 {built-in method builtins.exec}
        1    0.000    0.000    5.144    5.144 profiler.py:1(<module>)
        1    0.140    0.140    3.727    3.727 /home/shivam/coding/opensource/oriv/vulnerablecode/vulnerabilities/scraper/oval_parser.py:60(get_data)
    33373    0.072    0.000    1.665    0.000 /home/shivam/coding/opensource/oriv/vulnerablecode/vulnerabilities/scraper/oval_parser.py:173(get_versionsrngs_from_state)
    33371    0.110    0.000    1.581    0.000 /home/shivam/coding/opensource/oriv/vulnerablecode/venv/lib/python3.8/site-packages/dephell_specifier/range_specifier.py:20(__init__)
        1    0.000    0.000    1.325    1.325 /usr/lib/python3.8/xml/etree/ElementTree.py:1192(parse)
        1    0.000    0.000    1.325    1.325 /usr/lib/python3.8/xml/etree/ElementTree.py:571(parse)
        1    1.325    1.325    1.325    1.325 {method '_parse_whole' of 'xml.etree.ElementTree.XMLParser' objects}
    33371    0.107    0.000    1.300    0.000 /home/shivam/coding/opensource/oriv/vulnerablecode/venv/lib/python3.8/site-packages/dephell_specifier/range_specifier.py:44(_parse)
    33382    0.152    0.000    0.808    0.000 /home/shivam/coding/opensource/oriv/vulnerablecode/venv/lib/python3.8/site-packages/dephell_specifier/specifier.py:51(__init__)
```
As you can see the new `getElementById` doesn't even make to top 10 time consuming function. 

**How this is acheived** 
The old `getElementById ` works something as , take an OVAL id, check every element for it's id ,if this matches to the requested id, return this element. **Old time complexity O(N)**.

The new `getElementById` instead, maintains  a dictionary [id->element]  and uses it. **New time complexity O(1)**.
Signed-off-by: Shivam Sandbhor <shivam.sandbhor@gmail.com>",True,1820,https://api.github.com/repos/CISecurity/OVALRepo/pulls/1820,https://github.com/CISecurity/OVALRepo/pull/1820,closed,18,18,1,1,0,6,0,0,[],2020-05-19 06:28:17+00:00,2020-05-19 15:43:35+00:00,33318.0,9:15:18,"[{'comment_id': 427352468, 'comment_body': ""I'd recommend:\r\n- because this cache is really only used by getElementByID, I suggest moving this into that method, adding code to getElementByID (e.g. `if not hasattr(self, 'id_to_test'): self.id_to_test = ...`\r\n- because oval ids must be unique in this scope, simplify by changing cache to 1 dictionary (oval_id:element) with all element types\r\n- then you can simplify getElementByID, removing all of the oval_type related code"", 'comment_created': datetime.datetime(2020, 5, 19, 14, 35, 27, tzinfo=datetime.timezone.utc), 'commenter': 'DavidRies', 'type': 'User'}, {'comment_id': 427353524, 'comment_body': ""If you move the caches into getElementByID as suggested above, put this line under an `if hasattr(self, 'ovalid_to_element'):`"", 'comment_created': datetime.datetime(2020, 5, 19, 14, 36, 48, tzinfo=datetime.timezone.utc), 'commenter': 'DavidRies', 'type': 'User'}, {'comment_id': 427353899, 'comment_body': 'And, you will only need one of these lines.', 'comment_created': datetime.datetime(2020, 5, 19, 14, 37, 18, tzinfo=datetime.timezone.utc), 'commenter': 'DavidRies', 'type': 'User'}, {'comment_id': 427360113, 'comment_body': 'Yeah that is  better, I will make the changes. ', 'comment_created': datetime.datetime(2020, 5, 19, 14, 44, 34, tzinfo=datetime.timezone.utc), 'commenter': 'sbs2001', 'type': 'User'}, {'comment_id': 427362439, 'comment_body': ""Thank you! This code doesn't get a lot of attention and so long as we're all looking at it, it's terrific if we can simplify it a bit along with your performance improvements!"", 'comment_created': datetime.datetime(2020, 5, 19, 14, 47, 37, tzinfo=datetime.timezone.utc), 'commenter': 'DavidRies', 'type': 'User'}, {'comment_id': 427386656, 'comment_body': ""Sure , it has a (big) room for improvement , by the way how are the tests supposed to be run on this one? I didn't find any documentation regarding it."", 'comment_created': datetime.datetime(2020, 5, 19, 15, 18, 54, tzinfo=datetime.timezone.utc), 'commenter': 'sbs2001', 'type': 'User'}]","[{'commit_sha': '8bed5313c8740d14435c1db8c47358becf42b0cf', 'committer_username': 'sbs2001', 'committer_name': 'Shivam Sandbhor', 'committer_email': 'shivam.sandbhor@gmail.com', 'commit_date': datetime.datetime(2017, 5, 26, 7, 20, 21, tzinfo=datetime.timezone.utc)}]",Shivam Sandbhor,28975399,shivam.sandbhor@gmail.com,User,,96,,0,44
418655961, Add OVAL parser for Ubuntu,"TODOs : 

- [x] Use typed python instead of comments

**How  is  this implemented ?**  

Oval files basically contain the following elements : OvalObjects, OvalStates , OvalTests, OvalDefinitions, OvalVariables . 

What the parser does, is take in  the OVAL document(xml file), get all the definitions. Then iterate over each definition, while doing so it does the following for every definition. 
0.Every definition has enclosed within a vulnerability id and the vulnerability description, we collect these.
1.Collect all the OvalTests which are referred to , within the OvalDefinition's body
2.This OvalTest has a OvalObject and OvalState nested within. 
3.From (2) go take the OvalObject, this has generally a OvalVariable nested within (or it may directly has a single package name enclosed within )
4.Iterate  over the children of the OvalVariable element, each child encloses a package name  within we collect this.
5.From (2) go take the OvalState element, this encloses a version range,, which denotes vulnerable versions we also collect this.
6.Repeat this until we cover all the definitions.

I really suggest to take a look at `vulnerabilities/tests/test_data/ubuntu_oval._data.xml` to get a quick idea of how a OVAL document is structured.

**High level overview**
This is a repaste  from  chat, which provides a gist of the parser's intended implementation:

> The way I am trying to implement the OVAL parser is , by creating a OvalParser base class which has abstract methods required to import data from an Oval document , these need to be implemented for the specific provider(eg ubuntu,suse etc), and a extract_data method which basically orchestrates these methods to return the data in appropriate form.
> 
> Best case scenario : All the implementations of the parser for each provider, end up looking similar , in that case we could have a single OvalParser in which we could just throw in a OVAL file and get the data back.
> 
> Worst case scenario : We end up having UbuntuOvalParser SUSEOvalParser with slight modifications, which is not bad.

The following is a link to interactive google colab notebook https://colab.research.google.com/drive/1-NVbGwF80bYxzDYLXk5A4yvn0L-Qdgpe?usp=sharing for the OVAL parser.

Fixes https://github.com/nexB/vulnerablecode/issues/145
 


",True,179,https://api.github.com/repos/aboutcode-org/vulnerablecode/pulls/179,https://github.com/aboutcode-org/vulnerablecode/pull/179,closed,1856,2,6,9,3,4,0,0,[],2020-05-15 15:26:31+00:00,2020-05-19 11:39:31+00:00,331980.0,"3 days, 20:13:00","[{'comment_id': 426659977, 'comment_body': 'We should probably add the content of [this file](https://github.com/CISecurity/OVALRepo/blob/master/TERMS_OF_USE.md) as a license & copyright header here.', 'comment_created': datetime.datetime(2020, 5, 18, 14, 17, 32, tzinfo=datetime.timezone.utc), 'commenter': 'haikoschol', 'type': 'User'}, {'comment_id': 426666958, 'comment_body': 'nit: Since this may return `None`, `Optional[OvalElement]` would be a more precise type annotation for the return value.', 'comment_created': datetime.datetime(2020, 5, 18, 14, 27, 27, tzinfo=datetime.timezone.utc), 'commenter': 'haikoschol', 'type': 'User'}, {'comment_id': 426673527, 'comment_body': 'nit: Could this test be moved to the beginning of the `for` loop to avoid calls to the other methods like `get_urls_from_definition()` in case we skip this definition?', 'comment_created': datetime.datetime(2020, 5, 18, 14, 36, 41, tzinfo=datetime.timezone.utc), 'commenter': 'haikoschol', 'type': 'User'}, {'comment_id': 426717009, 'comment_body': 'Good catch !', 'comment_created': datetime.datetime(2020, 5, 18, 15, 37, 45, tzinfo=datetime.timezone.utc), 'commenter': 'sbs2001', 'type': 'User'}]","[{'commit_sha': '5cbe40533529344b911c76106f7bfa609166dbdd', 'committer_username': 'sbs2001', 'committer_name': 'Shivam Sandbhor', 'committer_email': 'shivam.sandbhor@gmail.com', 'commit_date': datetime.datetime(2017, 5, 26, 7, 20, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '30c813a09686281a641d03ed710b683ec4b75d2d', 'committer_username': 'sbs2001', 'committer_name': 'Shivam Sandbhor', 'committer_email': 'shivam.sandbhor@gmail.com', 'commit_date': datetime.datetime(2017, 5, 26, 7, 20, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fa531a652fc680a7c9a82688418d593d1db5f627', 'committer_username': 'sbs2001', 'committer_name': 'Shivam Sandbhor', 'committer_email': 'shivam.sandbhor@gmail.com', 'commit_date': datetime.datetime(2017, 5, 26, 7, 20, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1a0ba3d08441c734d545a8cf60969c247d8e9a0a', 'committer_username': 'sbs2001', 'committer_name': 'Shivam Sandbhor', 'committer_email': 'shivam.sandbhor@gmail.com', 'commit_date': datetime.datetime(2017, 5, 26, 7, 20, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '44a8843259c87b695a485a023d255f7e03a37e79', 'committer_username': 'sbs2001', 'committer_name': 'Shivam Sandbhor', 'committer_email': 'shivam.sandbhor@gmail.com', 'commit_date': datetime.datetime(2017, 5, 26, 7, 20, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f4405dbcfd5709c2168d48a511eb2af323279b10', 'committer_username': 'sbs2001', 'committer_name': 'Shivam Sandbhor', 'committer_email': 'shivam.sandbhor@gmail.com', 'commit_date': datetime.datetime(2017, 5, 26, 7, 20, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0f5de5587e25a25fbe040fe9f4ad4d340b33a036', 'committer_username': 'sbs2001', 'committer_name': 'Shivam Sandbhor', 'committer_email': 'shivam.sandbhor@gmail.com', 'commit_date': datetime.datetime(2017, 5, 26, 7, 20, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '88dcb9c9e7dabd252596982a311d5920283ad574', 'committer_username': 'sbs2001', 'committer_name': 'Shivam Sandbhor', 'committer_email': 'shivam.sandbhor@gmail.com', 'commit_date': datetime.datetime(2017, 5, 26, 7, 20, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1490508414020f2e66a1aceaeefa5d5628753daa', 'committer_username': 'sbs2001', 'committer_name': 'Shivam Sandbhor', 'committer_email': 'shivam.sandbhor@gmail.com', 'commit_date': datetime.datetime(2017, 5, 26, 7, 20, 21, tzinfo=datetime.timezone.utc)}]",Shivam Sandbhor,28975399,shivam.sandbhor@gmail.com,User,,96,,0,44
420538490,Update lib_oval.py and remove PerformantOvalDocument from oval_parser.py,"No need for `PerformantOvalDocument` in oval_parser.py as lib_oval.py is now improved(check https://github.com/CISecurity/OVALRepo/pull/1820).
Signed-off-by: Shivam Sandbhor <shivam.sandbhor@gmail.com>",True,182,https://api.github.com/repos/aboutcode-org/vulnerablecode/pulls/182,https://github.com/aboutcode-org/vulnerablecode/pull/182,closed,20,58,2,1,0,0,0,0,[],2020-05-20 06:35:44+00:00,2020-05-20 06:39:12+00:00,208.0,0:03:28,[],"[{'commit_sha': 'bcb0ff4610fb782b028c5162ba66b93ac05bea24', 'committer_username': 'sbs2001', 'committer_name': 'Shivam Sandbhor', 'committer_email': 'shivam.sandbhor@gmail.com', 'commit_date': datetime.datetime(2017, 5, 26, 7, 20, 21, tzinfo=datetime.timezone.utc)}]",Shivam Sandbhor,28975399,shivam.sandbhor@gmail.com,User,,96,,0,44
420668522,Generalise the UbuntuOvalParser to work with SUSE oval files,"Fortunately we hit the **Best Case scenario** in regards to OVAL parser. For context I first  made a OVAL parser for Ubuntu, then other for SUSE,  the plan was to have single OVAL parser for both, i.e to merge these into one. This is done by this PR

I also checked it with debian OVAL files, and those are working fine as expected .  

Competely fixes https://github.com/nexB/vulnerablecode/issues/145
Gets us very close to fix https://github.com/nexB/vulnerablecode/issues/59 , https://github.com/nexB/vulnerablecode/issues/62",True,183,https://api.github.com/repos/aboutcode-org/vulnerablecode/pulls/183,https://github.com/aboutcode-org/vulnerablecode/pull/183,closed,381,51,6,3,0,0,0,0,[],2020-05-20 10:47:44+00:00,2020-05-20 11:10:09+00:00,1345.0,0:22:25,[],"[{'commit_sha': '707f3db728133445a1df7a86bb0f2d64ed969991', 'committer_username': 'sbs2001', 'committer_name': 'Shivam Sandbhor', 'committer_email': 'shivam.sandbhor@gmail.com', 'commit_date': datetime.datetime(2017, 5, 26, 7, 20, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4318ea9594db121327f9b47200f76242713aeb3e', 'committer_username': 'sbs2001', 'committer_name': 'Shivam Sandbhor', 'committer_email': 'shivam.sandbhor@gmail.com', 'commit_date': datetime.datetime(2017, 5, 26, 7, 20, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '063ed35309026af2f3f61266be0a7e2725cbfe7c', 'committer_username': 'sbs2001', 'committer_name': 'Shivam Sandbhor', 'committer_email': 'shivam.sandbhor@gmail.com', 'commit_date': datetime.datetime(2017, 5, 26, 7, 20, 21, tzinfo=datetime.timezone.utc)}]",Shivam Sandbhor,28975399,shivam.sandbhor@gmail.com,User,,96,,0,44
434092280,Add Gentoo Linux Security Advisory importer and it's tests,"Fixes https://github.com/nexB/vulnerablecode/issues/69
Signed-off-by: Shivam Sandbhor <shivam.sandbhor@gmail.com>",True,203,https://api.github.com/repos/aboutcode-org/vulnerablecode/pulls/203,https://github.com/aboutcode-org/vulnerablecode/pull/203,closed,377,0,5,1,0,0,0,0,[],2020-06-14 04:20:15+00:00,2020-06-14 10:57:51+00:00,23856.0,6:37:36,[],"[{'commit_sha': '2feb32cb030b2434f40692d5f0a1c9063498e1b0', 'committer_username': 'sbs2001', 'committer_name': 'Shivam Sandbhor', 'committer_email': 'shivam.sandbhor@gmail.com', 'commit_date': datetime.datetime(2017, 5, 26, 7, 20, 21, tzinfo=datetime.timezone.utc)}]",Shivam Sandbhor,28975399,shivam.sandbhor@gmail.com,User,,96,,0,44
429892133,Add SUSE backport data source and it's tests,"This data is imported from http://ftp.suse.com/pub/projects/security/yaml/ , these are backports of previously vulnerable versions of packages, hence don't result into creation of `ImpactedPackages`. 

**Note**  : This data is different from SUSE OVAL files.

Gets close to  fix : https://github.com/nexB/vulnerablecode/issues/62  https://github.com/nexB/vulnerablecode/issues/84

Signed-off-by: Shivam Sandbhor <shivam.sandbhor@gmail.com>",True,194,https://api.github.com/repos/aboutcode-org/vulnerablecode/pulls/194,https://github.com/aboutcode-org/vulnerablecode/pull/194,closed,313,0,5,2,0,0,0,0,[],2020-06-07 09:10:32+00:00,2020-06-09 18:32:35+00:00,206523.0,"2 days, 9:22:03",[],"[{'commit_sha': '05fec1d9224845827d32def023bd18c714012f71', 'committer_username': 'sbs2001', 'committer_name': 'Shivam Sandbhor', 'committer_email': 'shivam.sandbhor@gmail.com', 'commit_date': datetime.datetime(2017, 5, 26, 7, 20, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2a1cf66a0ae54750b4c3ae49d66e03a82dfe26ea', 'committer_username': 'sbs2001', 'committer_name': 'Shivam Sandbhor', 'committer_email': 'shivam.sandbhor@gmail.com', 'commit_date': datetime.datetime(2017, 5, 26, 7, 20, 21, tzinfo=datetime.timezone.utc)}]",Shivam Sandbhor,28975399,shivam.sandbhor@gmail.com,User,,96,,0,44
429745804,Add importer for RetireDotnet,"Data is collected from https://github.com/RetireNet/Packages .

Fixes https://github.com/nexB/vulnerablecode/issues/197
Signed-off-by: Shivam Sandbhor <shivam.sandbhor@gmail.com>",True,193,https://api.github.com/repos/aboutcode-org/vulnerablecode/pulls/193,https://github.com/aboutcode-org/vulnerablecode/pull/193,closed,314,0,5,1,0,0,0,0,[],2020-06-07 05:27:45+00:00,2020-06-09 16:21:27+00:00,212022.0,"2 days, 10:53:42",[],"[{'commit_sha': '4eb29ea8886fb0782ae2c515004b2e5226f5b9a4', 'committer_username': 'sbs2001', 'committer_name': 'Shivam Sandbhor', 'committer_email': 'shivam.sandbhor@gmail.com', 'commit_date': datetime.datetime(2017, 5, 26, 7, 20, 21, tzinfo=datetime.timezone.utc)}]",Shivam Sandbhor,28975399,shivam.sandbhor@gmail.com,User,,96,,0,44
433062420,Add red hat importer and it's tests,"Data is imported from  https://access.redhat.com/hydra/rest/securitydata/cve.json 

Fixes https://github.com/nexB/vulnerablecode/issues/44

Here is a glimpse of the data provided by this importer 
![Screenshot_20200611_182105](https://user-images.githubusercontent.com/28975399/84388394-234f2680-ac12-11ea-9b64-b96ca021be94.png)


Signed-off-by: Shivam Sandbhor <shivam.sandbhor@gmail.com>",True,202,https://api.github.com/repos/aboutcode-org/vulnerablecode/pulls/202,https://github.com/aboutcode-org/vulnerablecode/pull/202,closed,350,0,5,1,0,0,0,0,[],2020-06-11 13:04:31+00:00,2020-06-12 12:32:59+00:00,84508.0,23:28:28,[],"[{'commit_sha': 'fcfb32b99a0ce25f4b05a266807d5dce00166ab3', 'committer_username': 'sbs2001', 'committer_name': 'Shivam Sandbhor', 'committer_email': 'shivam.sandbhor@gmail.com', 'commit_date': datetime.datetime(2017, 5, 26, 7, 20, 21, tzinfo=datetime.timezone.utc)}]",Shivam Sandbhor,28975399,shivam.sandbhor@gmail.com,User,,96,,0,44
432279749,Add Debian OVAL importer,"Fixes https://github.com/nexB/vulnerablecode/issues/198

Collects debian OVALs from https://www.debian.org/security/oval/
Signed-off-by: Shivam Sandbhor <shivam.sandbhor@gmail.com>",True,200,https://api.github.com/repos/aboutcode-org/vulnerablecode/pulls/200,https://github.com/aboutcode-org/vulnerablecode/pull/200,closed,437,1,8,1,0,0,0,0,[],2020-06-10 08:06:58+00:00,2020-06-10 11:36:16+00:00,12558.0,3:29:18,[],"[{'commit_sha': '5c13ce68adcefec4820b0c1a74f10eec9b94eb08', 'committer_username': 'sbs2001', 'committer_name': 'Shivam Sandbhor', 'committer_email': 'shivam.sandbhor@gmail.com', 'commit_date': datetime.datetime(2017, 5, 26, 7, 20, 21, tzinfo=datetime.timezone.utc)}]",Shivam Sandbhor,28975399,shivam.sandbhor@gmail.com,User,,96,,0,44
437673998,Add ubuntu usn importer and it's tests,"Fixes https://github.com/nexB/vulnerablecode/issues/212
Data is imported from https://usn.ubuntu.com/usn-db/database-all.json.bz2
Signed-off-by: Shivam Sandbhor <shivam.sandbhor@gmail.com>",True,213,https://api.github.com/repos/aboutcode-org/vulnerablecode/pulls/213,https://github.com/aboutcode-org/vulnerablecode/pull/213,closed,381,0,5,1,3,0,0,0,[],2020-06-22 04:31:15+00:00,2020-06-30 13:14:38+00:00,722603.0,"8 days, 8:43:23",[],"[{'commit_sha': 'bfba423ec51b63fc6bc13e5a431cf963309e5611', 'committer_username': 'sbs2001', 'committer_name': 'Shivam Sandbhor', 'committer_email': 'shivam.sandbhor@gmail.com', 'commit_date': datetime.datetime(2017, 5, 26, 7, 20, 21, tzinfo=datetime.timezone.utc)}]",Shivam Sandbhor,28975399,shivam.sandbhor@gmail.com,User,,96,,0,44
434345067,Add GitHub API importer,"TODOs

- [x] Add Nuget, Maven and Composer package manager's version API

- [x]  Add tests for everything 

I will file another separate PR to move all these VersionAPI classes to one separate module.

Signed-off-by: Shivam Sandbhor <shivam.sandbhor@gmail.com>",True,204,https://api.github.com/repos/aboutcode-org/vulnerablecode/pulls/204,https://github.com/aboutcode-org/vulnerablecode/pull/204,closed,9147,0,9,8,2,54,0,0,[],2020-06-15 07:30:48+00:00,2020-07-22 12:35:11+00:00,3215063.0,"37 days, 5:04:23","[{'comment_id': 441327456, 'comment_body': 'Nit: best to remove the date IMHO here or add 2020', 'comment_created': datetime.datetime(2020, 6, 17, 7, 9, 48, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 441328050, 'comment_body': 'This may be a left over debug print?', 'comment_created': datetime.datetime(2020, 6, 17, 7, 10, 57, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 441328362, 'comment_body': 'why the line breaks?', 'comment_created': datetime.datetime(2020, 6, 17, 7, 11, 39, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 441331865, 'comment_body': 'What about this instead?\r\n```\r\n    def set_version_api(self, ecosystem: str) -> None:\r\n        versioners = dict(\r\n            MAVEN=MavenVersionAPI,\r\n            NUGET=NugetVersionAPI,\r\n            COMPOSER=ComposerVersionAPI,\r\n        )\r\n        versioner = self.get_versioner(ecosystem)\r\n        if versioner:\r\n            self.version_api = versioner()\r\n```\r\nUsing a mapping for long conditionals is a useful idiom :)  .... and here I expect that list to be growing, right? ', 'comment_created': datetime.datetime(2020, 6, 17, 7, 18, 32, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 441332060, 'comment_body': 'why not put everything on one line?', 'comment_created': datetime.datetime(2020, 6, 17, 7, 18, 56, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 441332313, 'comment_body': 'nit: no blank needed here', 'comment_created': datetime.datetime(2020, 6, 17, 7, 19, 28, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 441332754, 'comment_body': 'nit: no need for line wrapping here', 'comment_created': datetime.datetime(2020, 6, 17, 7, 20, 19, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 441332876, 'comment_body': 'nit: no blank needed here', 'comment_created': datetime.datetime(2020, 6, 17, 7, 20, 34, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 441332907, 'comment_body': 'nit: no blank needed here', 'comment_created': datetime.datetime(2020, 6, 17, 7, 20, 38, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 441332954, 'comment_body': 'nit: no blank needed here', 'comment_created': datetime.datetime(2020, 6, 17, 7, 20, 43, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 441333028, 'comment_body': 'nit: no blank needed here', 'comment_created': datetime.datetime(2020, 6, 17, 7, 20, 52, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 441334806, 'comment_body': 'Why a set vs. a list? do you expect duplicates? and would using a set means that any original order may be lost? ', 'comment_created': datetime.datetime(2020, 6, 17, 7, 24, 11, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 441335328, 'comment_body': 'Is there some code share between the various ""VersionAPI"" classes? What about moving the common parts in a super class? or some helper?', 'comment_created': datetime.datetime(2020, 6, 17, 7, 25, 8, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 441335812, 'comment_body': 'You should see if that would be useful to reuse either scancode, or at least pymaven here... may not worth for a single function, but at least this may be worth sharing?', 'comment_created': datetime.datetime(2020, 6, 17, 7, 25, 59, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 441338055, 'comment_body': 'Why a set? Would the order of versions matter?', 'comment_created': datetime.datetime(2020, 6, 17, 7, 30, 10, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 441338998, 'comment_body': 'What does this means exactly?What about using a cascade of get() instead to understand exactly why there are these key errors? Can you show me the problematic JSON?', 'comment_created': datetime.datetime(2020, 6, 17, 7, 31, 42, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 441339914, 'comment_body': 'A `pass` would be clearer... BUT the reason for swallowing the KeyError is what I would like to understand', 'comment_created': datetime.datetime(2020, 6, 17, 7, 32, 50, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 441344631, 'comment_body': 'always prefer a more robust partition() or rpartition():\r\n```\r\n>>> vendor, name = pkg_name.split(\'/\')\r\nTraceback (most recent call last):\r\n  File ""<stdin>"", line 1, in <module>\r\nNameError: name \'pkg_name\' is not defined\r\n>>> vendor, _, name = \'foo\'.partition(\'/\')\r\n>>> vendor, name\r\n(\'foo\', \'\')\r\n>>> vendor, _, name = \'foo/bar\'.partition(\'/\')\r\n>>> vendor, name\r\n(\'foo\', \'bar\')\r\n```', 'comment_created': datetime.datetime(2020, 6, 17, 7, 40, 51, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 441345195, 'comment_body': 'What has this response data mapping anything to do with JSON at this stage of processing?', 'comment_created': datetime.datetime(2020, 6, 17, 7, 41, 47, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 441396983, 'comment_body': '>I expect that list to be growing, right?\r\n\r\nNo, actually check https://github.com/nexB/vulnerablecode/issues/74#issuecomment-642041958 ', 'comment_created': datetime.datetime(2020, 6, 17, 9, 6, 24, tzinfo=datetime.timezone.utc), 'commenter': 'sbs2001', 'type': 'User'}, {'comment_id': 441398857, 'comment_body': 'That will be done in another separate PR, because this is not just limited to  this importer, rather almost every other importer in `vulnerabilities/importers` has one such `VersionAPI` class thingie.', 'comment_created': datetime.datetime(2020, 6, 17, 9, 9, 33, tzinfo=datetime.timezone.utc), 'commenter': 'sbs2001', 'type': 'User'}, {'comment_id': 441411526, 'comment_body': ""my linter had  pep8 72 character line limit. Apparently we use 100 characters and this could've easily fitted into one line. I will make the changes(to the code and the linter). Thanks "", 'comment_created': datetime.datetime(2020, 6, 17, 9, 29, 40, tzinfo=datetime.timezone.utc), 'commenter': 'sbs2001', 'type': 'User'}, {'comment_id': 441411838, 'comment_body': 'Done', 'comment_created': datetime.datetime(2020, 6, 17, 9, 30, 8, tzinfo=datetime.timezone.utc), 'commenter': 'sbs2001', 'type': 'User'}, {'comment_id': 441412191, 'comment_body': 'Done', 'comment_created': datetime.datetime(2020, 6, 17, 9, 30, 41, tzinfo=datetime.timezone.utc), 'commenter': 'sbs2001', 'type': 'User'}, {'comment_id': 441412372, 'comment_body': 'Done', 'comment_created': datetime.datetime(2020, 6, 17, 9, 30, 56, tzinfo=datetime.timezone.utc), 'commenter': 'sbs2001', 'type': 'User'}, {'comment_id': 441414491, 'comment_body': 'Your approach is better, I will use that instead\r\n', 'comment_created': datetime.datetime(2020, 6, 17, 9, 34, 21, tzinfo=datetime.timezone.utc), 'commenter': 'sbs2001', 'type': 'User'}, {'comment_id': 441415910, 'comment_body': ' Done', 'comment_created': datetime.datetime(2020, 6, 17, 9, 36, 36, tzinfo=datetime.timezone.utc), 'commenter': 'sbs2001', 'type': 'User'}, {'comment_id': 441416278, 'comment_body': 'Done', 'comment_created': datetime.datetime(2020, 6, 17, 9, 37, 16, tzinfo=datetime.timezone.utc), 'commenter': 'sbs2001', 'type': 'User'}, {'comment_id': 441417731, 'comment_body': 'Done', 'comment_created': datetime.datetime(2020, 6, 17, 9, 39, 40, tzinfo=datetime.timezone.utc), 'commenter': 'sbs2001', 'type': 'User'}, {'comment_id': 441418289, 'comment_body': 'Done', 'comment_created': datetime.datetime(2020, 6, 17, 9, 40, 34, tzinfo=datetime.timezone.utc), 'commenter': 'sbs2001', 'type': 'User'}, {'comment_id': 441418723, 'comment_body': 'Done', 'comment_created': datetime.datetime(2020, 6, 17, 9, 41, 13, tzinfo=datetime.timezone.utc), 'commenter': 'sbs2001', 'type': 'User'}, {'comment_id': 441419145, 'comment_body': 'Done', 'comment_created': datetime.datetime(2020, 6, 17, 9, 41, 58, tzinfo=datetime.timezone.utc), 'commenter': 'sbs2001', 'type': 'User'}, {'comment_id': 441424136, 'comment_body': "">do you expect duplicates?\r\n\r\nNo\r\n\r\n> and would using a set means that any original order may be lost?\r\n\r\nYes, I use sets wherever  order doesn't matter, the rationale behind being I'd rather have guaranteed  unique elements at the cost of  losing the order which I don't care about here. \r\n\r\nIf there are any significant performance gains(I will research about this) , I will switch to lists instead."", 'comment_created': datetime.datetime(2020, 6, 17, 9, 50, 10, tzinfo=datetime.timezone.utc), 'commenter': 'sbs2001', 'type': 'User'}, {'comment_id': 441427133, 'comment_body': ""I'm not sure I understand this correctly, \r\n\r\nDo you mean, like there is function like `artifact_url` in pymaven or scancode and I reuse that here instead ?   "", 'comment_created': datetime.datetime(2020, 6, 17, 9, 55, 7, tzinfo=datetime.timezone.utc), 'commenter': 'sbs2001', 'type': 'User'}, {'comment_id': 441428341, 'comment_body': ""Check my comment above, \r\n\r\n> Would the order of versions matter?\r\n\r\nNo\r\n\r\n>Why a set?\r\n\r\nBecause order doesn't matter ;) .\r\n"", 'comment_created': datetime.datetime(2020, 6, 17, 9, 57, 6, tzinfo=datetime.timezone.utc), 'commenter': 'sbs2001', 'type': 'User'}, {'comment_id': 441430179, 'comment_body': 'Renaming this `json_resp` to `resp`', 'comment_created': datetime.datetime(2020, 6, 17, 10, 0, 3, tzinfo=datetime.timezone.utc), 'commenter': 'sbs2001', 'type': 'User'}, {'comment_id': 441431086, 'comment_body': 'Good catch, removing this', 'comment_created': datetime.datetime(2020, 6, 17, 10, 1, 35, tzinfo=datetime.timezone.utc), 'commenter': 'sbs2001', 'type': 'User'}, {'comment_id': 441432143, 'comment_body': 'Done', 'comment_created': datetime.datetime(2020, 6, 17, 10, 3, 24, tzinfo=datetime.timezone.utc), 'commenter': 'sbs2001', 'type': 'User'}, {'comment_id': 441444346, 'comment_body': "">Can you show me the problematic JSON?\r\n\r\nThis is raising that exception https://api.nuget.org/v3/registration5-semver1/yamldotnet.signed/index.json \r\nAll others follow this schema instead https://api.nuget.org/v3/registration5-semver1/sustainsys.saml2/index.json \r\n\r\n>What about using a cascade of get() instead to understand exactly why there are these key errors? \r\n\r\nThat can be done, but I thought catching an exception would be more 'pythonic' (EAFP).  "", 'comment_created': datetime.datetime(2020, 6, 17, 10, 25, 26, tzinfo=datetime.timezone.utc), 'commenter': 'sbs2001', 'type': 'User'}, {'comment_id': 441445053, 'comment_body': ""I have no idea how to handle https://api.nuget.org/v3/registration5-semver1/yamldotnet.signed/index.json which is causing the exception, hence the 'swallowing' of the KeyError"", 'comment_created': datetime.datetime(2020, 6, 17, 10, 26, 42, tzinfo=datetime.timezone.utc), 'commenter': 'sbs2001', 'type': 'User'}, {'comment_id': 441451882, 'comment_body': "" >always prefer a more robust partition() or rpartition():\r\n\r\nI didn't knew about this function. Thanks.\r\nRobust in the sense it doesn't raise `ValueError: not enough values to unpack` .\r\n\r\n But in this case it makes more sense to me to use `split` because that would raise an exception and crash out VulnerableCode, instead of  ending up writing garbage in the DB.  \r\n"", 'comment_created': datetime.datetime(2020, 6, 17, 10, 40, 1, tzinfo=datetime.timezone.utc), 'commenter': 'sbs2001', 'type': 'User'}, {'comment_id': 445469979, 'comment_body': ""yes I think there is one. That's minor though"", 'comment_created': datetime.datetime(2020, 6, 25, 10, 46, 33, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 445470768, 'comment_body': 'The performance does not matter here, this is more about ordered and unique vs. unordered\r\nI think that the order may matter though as this is the version orders? ', 'comment_created': datetime.datetime(2020, 6, 25, 10, 48, 17, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 445478370, 'comment_body': ""> That can be done, but I thought catching an exception would be more 'pythonic' (EAFP).\r\n\r\nWell, the key is readability and clarity first: here when I read the code in `json_resp['items'][0]['items']` I wonder immediately. What if there is no items or this is not a mapping? What is [0]? Is this a list or a mapping with a key `0`? if this is a list, what about the other items in that list? and what is this second `items` about?\r\n\r\nHere we could have something instead like that:\r\n```\r\nfor item in json_resp.get('items', []):\r\n    for entry in item.get('items', []):\r\n        ...\r\n```\r\nWhen I read it I get these are mapping that return lists and I have no problem to understand the underlying data structure that I do not know about. Otherwise, I feel I need to do quite a bit of effort to read the code and it assumes that I know about the upstream JSON data structure before hand. So EAFP is fine, but it matters more to think about the readability of the code IMHO and how it will resist to future changes in the API and how that will make it easy to debug or not.\r\n\r\n\r\n\r\n> This is raising that exception https://api.nuget.org/v3/registration5-semver1/yamldotnet.signed/index.json\r\n> All others follow this schema instead https://api.nuget.org/v3/registration5-semver1/sustainsys.saml2/index.json\r\n\r\nThis is the kind of comment that is needed in the code :)\r\n\r\n"", 'comment_created': datetime.datetime(2020, 6, 25, 11, 4, 20, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 445481840, 'comment_body': ""Order doesn't matter here."", 'comment_created': datetime.datetime(2020, 6, 25, 11, 11, 43, tzinfo=datetime.timezone.utc), 'commenter': 'sbs2001', 'type': 'User'}, {'comment_id': 445626268, 'comment_body': ""I agree with everything you said. \r\n\r\nI am wondering what's the best answer in this context to the question you asked.\r\n\r\n>how it will resist to future changes in the API and how that will make it easy to debug or not.\r\n\r\nBecause in this case, during an occurence of API change  the outcome of both approaches  EAFP(try-except) and LBYL(get cascade)  is same. The code won't crash in an event of API changes in both the cases, resulting in not collecting the data, and that will go unnoticed, unless someone decides to look into the db. "", 'comment_created': datetime.datetime(2020, 6, 25, 15, 1, 37, tzinfo=datetime.timezone.utc), 'commenter': 'sbs2001', 'type': 'User'}, {'comment_id': 445743465, 'comment_body': '1. you can still keep inside your direct items access as `all_versions.add(entry[\'catalogEntry\'][\'version\'])` so if that part changes if will fail.\r\n2. we should have tests too\r\n3. we could think about a very limited subset of ""canary""-like tests that are doing live queries on the web and fail if the API changes by returning different data. \r\n', 'comment_created': datetime.datetime(2020, 6, 25, 18, 7, 11, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 458579295, 'comment_body': 'nit: Envirnomental -> Environment', 'comment_created': datetime.datetime(2020, 7, 22, 7, 6, 43, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 458581331, 'comment_body': 'May be you could reuse that function (with a comment you did) instead?\r\nhttps://github.com/nexB/scancode-toolkit/blob/develop/src/packagedcode/maven.py#L225\r\nThis way we can eventually evolve a common maven library out of ScanCode\r\nhttps://repo.maven.apache.org/maven2 is not the most common base URL too', 'comment_created': datetime.datetime(2020, 7, 22, 7, 11, 10, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 458701000, 'comment_body': ""that's minor though and could wait"", 'comment_created': datetime.datetime(2020, 7, 22, 10, 42, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 458754169, 'comment_body': 'Fixed', 'comment_created': datetime.datetime(2020, 7, 22, 12, 28, 29, tzinfo=datetime.timezone.utc), 'commenter': 'sbs2001', 'type': 'User'}, {'comment_id': 458755464, 'comment_body': 'In general it is often better to yield rather than to accumulate in a list, FWIW', 'comment_created': datetime.datetime(2020, 7, 22, 12, 30, 41, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 458756907, 'comment_body': 'ok', 'comment_created': datetime.datetime(2020, 7, 22, 12, 33, 15, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 458757649, 'comment_body': 'Same as above... yielding rather than returning a list is always a good option', 'comment_created': datetime.datetime(2020, 7, 22, 12, 34, 32, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}]","[{'commit_sha': '445612372c12394da1558ddb1820e2bef635c972', 'committer_username': 'sbs2001', 'committer_name': 'Shivam Sandbhor', 'committer_email': 'shivam.sandbhor@gmail.com', 'commit_date': datetime.datetime(2017, 5, 26, 7, 20, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bec7309bdce81293a0394583d142e30082686abb', 'committer_username': 'sbs2001', 'committer_name': 'Shivam Sandbhor', 'committer_email': 'shivam.sandbhor@gmail.com', 'commit_date': datetime.datetime(2017, 5, 26, 7, 20, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '56126ab09d02c07d7dc1c8a4dd31b248132e9935', 'committer_username': 'sbs2001', 'committer_name': 'Shivam Sandbhor', 'committer_email': 'shivam.sandbhor@gmail.com', 'commit_date': datetime.datetime(2017, 5, 26, 7, 20, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3e5b00e47503c7982ee863c24b3332fb8ac288e9', 'committer_username': 'sbs2001', 'committer_name': 'Shivam Sandbhor', 'committer_email': 'shivam.sandbhor@gmail.com', 'commit_date': datetime.datetime(2017, 5, 26, 7, 20, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3ccb9ccbd95895e7e30144dc7c0db0ce46736c8b', 'committer_username': 'sbs2001', 'committer_name': 'Shivam Sandbhor', 'committer_email': 'shivam.sandbhor@gmail.com', 'commit_date': datetime.datetime(2017, 5, 26, 7, 20, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd7d25f0883d4dcda5214ebf499664bbf588624e9', 'committer_username': 'sbs2001', 'committer_name': 'Shivam Sandbhor', 'committer_email': 'shivam.sandbhor@gmail.com', 'commit_date': datetime.datetime(2017, 5, 26, 7, 20, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '16371fad76b17a3de319ca2238f0bfbfa855eb5c', 'committer_username': 'sbs2001', 'committer_name': 'Shivam Sandbhor', 'committer_email': 'shivam.sandbhor@gmail.com', 'commit_date': datetime.datetime(2017, 5, 26, 7, 20, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fe442bf6c1851a23a066b5d03457be77ee773a54', 'committer_username': 'sbs2001', 'committer_name': 'Shivam Sandbhor', 'committer_email': 'shivam.sandbhor@gmail.com', 'commit_date': datetime.datetime(2017, 5, 26, 7, 20, 21, tzinfo=datetime.timezone.utc)}]",Shivam Sandbhor,28975399,shivam.sandbhor@gmail.com,User,,96,,0,44
465285621,Add NVD importer,"This branch is based on https://github.com/nexB/vulnerablecode/pull/227. 

Finally an importer for NVD. 

Fixes https://github.com/nexB/vulnerablecode/issues/71",True,243,https://api.github.com/repos/aboutcode-org/vulnerablecode/pulls/243,https://github.com/aboutcode-org/vulnerablecode/pull/243,closed,581,0,5,3,0,15,0,0,[],2020-08-10 05:40:52+00:00,2020-09-24 13:51:40+00:00,3917448.0,"45 days, 8:10:48","[{'comment_id': 468512341, 'comment_body': 'nit: can you sort your imports?', 'comment_created': datetime.datetime(2020, 8, 11, 11, 32, 35, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 468512547, 'comment_body': 'What is this magic number about?', 'comment_created': datetime.datetime(2020, 8, 11, 11, 32, 58, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 468512984, 'comment_body': 'Can you elaborate what are etags about in comments? ', 'comment_created': datetime.datetime(2020, 8, 11, 11, 33, 55, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 468513805, 'comment_body': 'What about joining them with \'\\n\' to handle all the cases nicely?\r\n```Python\r\nsummaries = (desc[""value""] for desc in cve_item[""cve""][""description""][""description_data""])\r\nsummaries = (s.strip() for s in summaries if s)\r\nreturn ""\\n"".join(s for s in summaries if s)\r\n```', 'comment_created': datetime.datetime(2020, 8, 11, 11, 35, 35, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 468515848, 'comment_body': 'Ouch ... if you have a reference that crashes your schema, then your schema needs to be updated. Do not skip the data!', 'comment_created': datetime.datetime(2020, 8, 11, 11, 39, 43, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 468517388, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 8, 11, 11, 42, 36, tzinfo=datetime.timezone.utc), 'commenter': 'sbs2001', 'type': 'User'}, {'comment_id': 468521992, 'comment_body': ""Thanks your solution is better with a caveat, in such cases , the `Summary` would be the joined summaries\r\n![image](https://user-images.githubusercontent.com/28975399/89893921-d8906180-dbf6-11ea-837b-838c40e8ba56.png)\r\n\r\nIt probably won't make sense when reading such cases. \r\n\r\nBtw I only found only 1 CVE from NVD 2019 which had multiple(2) summaries.\r\n"", 'comment_created': datetime.datetime(2020, 8, 11, 11, 51, 43, tzinfo=datetime.timezone.utc), 'commenter': 'sbs2001', 'type': 'User'}, {'comment_id': 468522869, 'comment_body': ""Oopsie, that's a remenant of past implementation. Removing.  "", 'comment_created': datetime.datetime(2020, 8, 11, 11, 53, 29, tzinfo=datetime.timezone.utc), 'commenter': 'sbs2001', 'type': 'User'}, {'comment_id': 468530255, 'comment_body': 'How does it look now? Does this make sense?', 'comment_created': datetime.datetime(2020, 8, 11, 12, 6, 53, tzinfo=datetime.timezone.utc), 'commenter': 'sbs2001', 'type': 'User'}, {'comment_id': 468548174, 'comment_body': 'perfect!', 'comment_created': datetime.datetime(2020, 8, 11, 12, 40, 2, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 468549350, 'comment_body': 'Your call... Since this is only  one case in many... this is best to have one weird summary and all other being correct (so IMHO the join is still better ;) )', 'comment_created': datetime.datetime(2020, 8, 11, 12, 41, 59, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 468549511, 'comment_body': 'This would mean a model change IMHO', 'comment_created': datetime.datetime(2020, 8, 11, 12, 42, 16, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 468562414, 'comment_body': 'Let me first find the long ref id first. \r\n\r\nI found some bugs after adding the length filter. Things may have changed', 'comment_created': datetime.datetime(2020, 8, 11, 13, 3, 54, tzinfo=datetime.timezone.utc), 'commenter': 'sbs2001', 'type': 'User'}, {'comment_id': 475485926, 'comment_body': 'There are bunch of them in older CVE records. Choosing the longest one is the way to go  IMHo', 'comment_created': datetime.datetime(2020, 8, 24, 10, 0, 20, tzinfo=datetime.timezone.utc), 'commenter': 'sbs2001', 'type': 'User'}, {'comment_id': 490145780, 'comment_body': ""The extraction of reference ids from  NVD is  complicated, it contains lots of noise, I've skipped collecting the reference ids for now ."", 'comment_created': datetime.datetime(2020, 9, 17, 10, 42, 15, tzinfo=datetime.timezone.utc), 'commenter': 'sbs2001', 'type': 'User'}]","[{'commit_sha': 'b80e2efb112a593607c146aed3dc363439bcbe51', 'committer_username': 'sbs2001', 'committer_name': 'Shivam Sandbhor', 'committer_email': 'shivam.sandbhor@gmail.com', 'commit_date': datetime.datetime(2017, 5, 26, 7, 20, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '81b533824f2db48a69244a63f08d9db6559eaafc', 'committer_username': 'sbs2001', 'committer_name': 'Shivam Sandbhor', 'committer_email': 'shivam.sandbhor@gmail.com', 'commit_date': datetime.datetime(2017, 5, 26, 7, 20, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1d691584b7d94f4e259166103dd226000925703c', 'committer_username': 'sbs2001', 'committer_name': 'Shivam Sandbhor', 'committer_email': 'shivam.sandbhor@gmail.com', 'commit_date': datetime.datetime(2017, 5, 26, 7, 20, 21, tzinfo=datetime.timezone.utc)}]",Shivam Sandbhor,28975399,shivam.sandbhor@gmail.com,User,,96,,0,44
429892133,Add SUSE backport data source and it's tests,"This data is imported from http://ftp.suse.com/pub/projects/security/yaml/ , these are backports of previously vulnerable versions of packages, hence don't result into creation of `ImpactedPackages`. 

**Note**  : This data is different from SUSE OVAL files.

Gets close to  fix : https://github.com/nexB/vulnerablecode/issues/62  https://github.com/nexB/vulnerablecode/issues/84

Signed-off-by: Shivam Sandbhor <shivam.sandbhor@gmail.com>",True,194,https://api.github.com/repos/aboutcode-org/vulnerablecode/pulls/194,https://github.com/aboutcode-org/vulnerablecode/pull/194,closed,313,0,5,2,0,0,0,0,[],2020-06-07 09:10:32+00:00,2020-06-09 18:32:35+00:00,206523.0,"2 days, 9:22:03",[],"[{'commit_sha': '05fec1d9224845827d32def023bd18c714012f71', 'committer_username': 'sbs2001', 'committer_name': 'Shivam Sandbhor', 'committer_email': 'shivam.sandbhor@gmail.com', 'commit_date': datetime.datetime(2017, 5, 26, 7, 20, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2a1cf66a0ae54750b4c3ae49d66e03a82dfe26ea', 'committer_username': 'sbs2001', 'committer_name': 'Shivam Sandbhor', 'committer_email': 'shivam.sandbhor@gmail.com', 'commit_date': datetime.datetime(2017, 5, 26, 7, 20, 21, tzinfo=datetime.timezone.utc)}]",Shivam Sandbhor,28975399,shivam.sandbhor@gmail.com,User,,96,,0,44
432433696,Use JSONField instead of CharField to store a Package's qualifers,"This how it looks in the DB now, after completing the debian importer.

Fixes https://github.com/nexB/vulnerablecode/issues/149, now our models are capable of capturing qualifiers properly. 

![qualifiers](https://user-images.githubusercontent.com/28975399/84269622-144f7200-ab47-11ea-87ee-1f7c5e3cd336.png)

Signed-off-by: Shivam Sandbhor <shivam.sandbhor@gmail.com>",True,201,https://api.github.com/repos/aboutcode-org/vulnerablecode/pulls/201,https://github.com/aboutcode-org/vulnerablecode/pull/201,closed,33,4,5,1,1,0,0,0,[],2020-06-10 12:51:29+00:00,2020-06-10 17:12:11+00:00,15642.0,4:20:42,[],"[{'commit_sha': 'c6e95666a031ea925f3b5d1bf2076670b5db11b5', 'committer_username': 'sbs2001', 'committer_name': 'Shivam Sandbhor', 'committer_email': 'shivam.sandbhor@gmail.com', 'commit_date': datetime.datetime(2017, 5, 26, 7, 20, 21, tzinfo=datetime.timezone.utc)}]",Shivam Sandbhor,28975399,shivam.sandbhor@gmail.com,User,,96,,0,44
441021306,Refactor ImpactedPackage and ResolvedPackage,"Changes are made in import_runner.py to refactor the models.
Other major changes in import_runner.py is to change the _process_updated_advisories
method to use less db queries and increase performance by several times.

Having a single table for these, fixes the following: 

**Issue 1 :**

You can do this, which doesn't make any sense.
```python

In [1]: from vulnerabilities import models                                                                                   

In [2]: v1 = models.Vulnerability.objects.create(cve_id=""CVE-foo"")                                                           

In [3]: p1 = models.Package.objects.create(name=""cream"",type=""ice"",version='mango') 
   
In [4]: vp1 = models.ImpactedPackage.objects.create(vulnerability=v1, package=p1)                                            

In [5]: vp2 = models.ResolvedPackage.objects.create(vulnerability=v1, package=p1)   
``` 

This is pure garbage, nothing can be interpreted from these entries.

With a single table + flag, we  can use a unique_together=('vulnerability','package')

**Issue 2 :** 

Updating the vulnerability status of a package is not possible due to  cascade deletes. 

Check https://github.com/nexB/vulnerablecode/blob/58d0376e7319d06387662cb393f3c39d9893088d/vulnerabilities/import_runner.py#L121 . 

And also check for more details https://github.com/nexB/vulnerablecode/blob/58d0376e7319d06387662cb393f3c39d9893088d/vulnerabilities/tests/test_import_runner.py#L201


Signed-off-by: Shivam Sandbhor <shivam.sandbhor@gmail.com>",True,219,https://api.github.com/repos/aboutcode-org/vulnerablecode/pulls/219,https://github.com/aboutcode-org/vulnerablecode/pull/219,closed,49507,47570,13,5,5,47,0,0,[],2020-06-28 08:16:48+00:00,2020-07-22 11:14:24+00:00,2084256.0,"24 days, 2:57:36","[{'comment_id': 447087581, 'comment_body': 'Property getters should not have side-effects. IMHO this approach has too much magic, including the need for the `__del__()` method.', 'comment_created': datetime.datetime(2020, 6, 29, 16, 10, 23, tzinfo=datetime.timezone.utc), 'commenter': 'haikoschol', 'type': 'User'}, {'comment_id': 447087989, 'comment_body': 'Are you sure the performance gains are not mostly due to `ignore_conflicts=True`?', 'comment_created': datetime.datetime(2020, 6, 29, 16, 10, 54, tzinfo=datetime.timezone.utc), 'commenter': 'haikoschol', 'type': 'User'}, {'comment_id': 447409116, 'comment_body': ""No. The performance gain is due to removing the excess `get_or_create` and utilising the fact that, if \r\n\r\nA Vulnerability row didn't previously existed(created=True), then we for sure know that all objects which it is a foreign key in, don't exist too, hence use bulk create. Same goes with `Package`.\r\n\r\nI had gotten it to work by simply having lists at a `Advisory` level for bulk inserts without ignore_conflicts, but that way sometimes I would bulk_create on a single item, or sometimes thousand items, everything depended on the nature Advisory being passed. \r\n\r\nThe conflicts are caused due to duplicate model instances in. \r\n  ```\r\n        self._bulk_create_vuln_pkg_refs = []\r\n        self._bulk_update_vuln_pkg_refs = []\r\n        self._bulk_create_vuln_refs = []\r\n\r\n```\r\n I learned the hard way that I can't put these instances in a `set` because their hashes are created on basis of pk(which they get after being written to db) :) . \r\n"", 'comment_created': datetime.datetime(2020, 6, 30, 4, 55, 50, tzinfo=datetime.timezone.utc), 'commenter': 'sbs2001', 'type': 'User'}, {'comment_id': 447410436, 'comment_body': ""Agreed this  and `ignore_conflicts=True` are totally bad practices. Good news is after tinkering about this, I can totally get rid of these magic methods and properties, even maintain `ImporterRunner`'s API like the old one."", 'comment_created': datetime.datetime(2020, 6, 30, 5, 0, 44, tzinfo=datetime.timezone.utc), 'commenter': 'sbs2001', 'type': 'User'}, {'comment_id': 453563314, 'comment_body': 'Please use TitleCase for classes, not a mix of Title_and_snake case', 'comment_created': datetime.datetime(2020, 7, 13, 10, 48, 29, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 453563684, 'comment_body': 'Same as above and elsewhere: stick to TitleCase for classes and snake_case elsewhere', 'comment_created': datetime.datetime(2020, 7, 13, 10, 49, 11, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 453564063, 'comment_body': 'Does this comment still applies?', 'comment_created': datetime.datetime(2020, 7, 13, 10, 49, 57, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 453564419, 'comment_body': 'Why this blank line?', 'comment_created': datetime.datetime(2020, 7, 13, 10, 50, 36, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 453565326, 'comment_body': 'What benefit do you get from calling `bulk_create` vs creating as you go above?', 'comment_created': datetime.datetime(2020, 7, 13, 10, 52, 26, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 453567432, 'comment_body': 'Is this comment still relevant here?', 'comment_created': datetime.datetime(2020, 7, 13, 10, 56, 41, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 453567701, 'comment_body': 'Why prefix these with _? Is this because they are not tested? ', 'comment_created': datetime.datetime(2020, 7, 13, 10, 57, 11, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 453568340, 'comment_body': 'Why making a set here since you also insert in a set?', 'comment_created': datetime.datetime(2020, 7, 13, 10, 58, 29, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 453569058, 'comment_body': 'Why do you treat the reference_id and url separately? a URL for a reference_id should not lead to multiple references. ', 'comment_created': datetime.datetime(2020, 7, 13, 11, 0, 1, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 453569381, 'comment_body': 'using one declaration per line is always more readable', 'comment_created': datetime.datetime(2020, 7, 13, 11, 0, 42, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 453570827, 'comment_body': 'Is there a better name than qs?', 'comment_created': datetime.datetime(2020, 7, 13, 11, 3, 48, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 453571197, 'comment_body': ""What does ==2  mean? that's pretty cryptic"", 'comment_created': datetime.datetime(2020, 7, 13, 11, 4, 34, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 453571710, 'comment_body': 'If you need a copy of the items list, use may be: `foo = qs[:]`', 'comment_created': datetime.datetime(2020, 7, 13, 11, 5, 27, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 453572045, 'comment_body': 'Is there a need to couple these two objects?', 'comment_created': datetime.datetime(2020, 7, 13, 11, 6, 7, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 453573386, 'comment_body': ""Have you enabled type checking at least in the CI?\r\nOtherwise, type hints are not always helpful and if the types are not checked somehow, they can be misleading and i most case they are not conducive to improve readability... So let's not get carried away with type hints for the sake of them. Instead enter a ticket so we can discuss and plan for their possible usage  "", 'comment_created': datetime.datetime(2020, 7, 13, 11, 8, 54, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 453574882, 'comment_body': 'I understand the zip here, but is there a simpler way to get there?\r\nI am always nervous when we start using ""parallel lists"" to later zip them.', 'comment_created': datetime.datetime(2020, 7, 13, 11, 11, 51, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 453575431, 'comment_body': 'What is this int about?', 'comment_created': datetime.datetime(2020, 7, 13, 11, 13, 1, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 453575860, 'comment_body': 'is p a package or a package_id?', 'comment_created': datetime.datetime(2020, 7, 13, 11, 13, 55, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 453576151, 'comment_body': 'What are the benefits of using ids vs objects there?', 'comment_created': datetime.datetime(2020, 7, 13, 11, 14, 31, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 454227198, 'comment_body': ""This is whole another issue, with the Advisory dataclass which you pointed out before. In this PR I haven't fixed that issue yet, so this mimics the already buggy code. I'll file another PR to fix the reference issue. "", 'comment_created': datetime.datetime(2020, 7, 14, 9, 30, 27, tzinfo=datetime.timezone.utc), 'commenter': 'sbs2001', 'type': 'User'}, {'comment_id': 454238615, 'comment_body': ""This definitely needs an explanation. I have changed  `len(vuln_impact) == 2` to `vuln_impact == {True, False}`, having done that, it still deserves an explanation, I've added the following comments to the code. I hope this clarifies things. \r\n```\r\n               is_vulnerable is a boolean which indicates the relationship of\r\n                a vulnerability's impact on a package. vuln_impact is a set of\r\n                all such booleans for a pair of (vulnerability, package). In cases\r\n                where  vuln_impact == {True, False}, we know that conflicting relationships\r\n                of (vulnerability, package) ALREADY EXIST in the DB.\r\n                The other check `is_vulnerable not in vuln_impact` is used to know whether the\r\n                data we just found is not conflicting with the data already existing in DB.\r\n                In any of the above two cases we move the entries involved in ImportProblem\r\n```"", 'comment_created': datetime.datetime(2020, 7, 14, 9, 50, 30, tzinfo=datetime.timezone.utc), 'commenter': 'sbs2001', 'type': 'User'}, {'comment_id': 454250748, 'comment_body': ""@haikoschol  went with following https://pep8.org/#descriptive-naming-styles I continued with it. These methods won't be used in other modules anyways, java eq of `private` so it makes sense to me.  \r\n\r\nIs a prefix of _  used to indicate the method is not tested ? That's new. \r\n\r\nI'm confused with these conventions now ;)   "", 'comment_created': datetime.datetime(2020, 7, 14, 10, 13, tzinfo=datetime.timezone.utc), 'commenter': 'sbs2001', 'type': 'User'}, {'comment_id': 454259520, 'comment_body': ""Yes, did you read the comments in code? There only purpose  is to `remove duplicates of model instances(these dont yet have pk ) from a list` . It's terrible approach, but I can't think of a better way to do this. There's naive way  doing it as @haikoschol  suggested above, but that will probably more or less neutralize the performance gained by bulk inserts as that approach has time complexity of O(N^2) while this dataclass approach has O(N)  "", 'comment_created': datetime.datetime(2020, 7, 14, 10, 29, 31, tzinfo=datetime.timezone.utc), 'commenter': 'sbs2001', 'type': 'User'}, {'comment_id': 454277810, 'comment_body': 'Done', 'comment_created': datetime.datetime(2020, 7, 14, 11, 6, 7, tzinfo=datetime.timezone.utc), 'commenter': 'sbs2001', 'type': 'User'}, {'comment_id': 454277908, 'comment_body': 'Done', 'comment_created': datetime.datetime(2020, 7, 14, 11, 6, 19, tzinfo=datetime.timezone.utc), 'commenter': 'sbs2001', 'type': 'User'}, {'comment_id': 454277995, 'comment_body': 'No', 'comment_created': datetime.datetime(2020, 7, 14, 11, 6, 29, tzinfo=datetime.timezone.utc), 'commenter': 'sbs2001', 'type': 'User'}, {'comment_id': 454278082, 'comment_body': 'Removed', 'comment_created': datetime.datetime(2020, 7, 14, 11, 6, 39, tzinfo=datetime.timezone.utc), 'commenter': 'sbs2001', 'type': 'User'}, {'comment_id': 454278200, 'comment_body': ':) Removed', 'comment_created': datetime.datetime(2020, 7, 14, 11, 6, 53, tzinfo=datetime.timezone.utc), 'commenter': 'sbs2001', 'type': 'User'}, {'comment_id': 454278496, 'comment_body': 'We had this discussion in the chat. I think this is justified', 'comment_created': datetime.datetime(2020, 7, 14, 11, 7, 29, tzinfo=datetime.timezone.utc), 'commenter': 'sbs2001', 'type': 'User'}, {'comment_id': 454278804, 'comment_body': 'Yes, rephrased it albeit to make it hopefully more clear :)', 'comment_created': datetime.datetime(2020, 7, 14, 11, 8, 9, tzinfo=datetime.timezone.utc), 'commenter': 'sbs2001', 'type': 'User'}, {'comment_id': 454278968, 'comment_body': 'Good catch, removed the cast to set', 'comment_created': datetime.datetime(2020, 7, 14, 11, 8, 31, tzinfo=datetime.timezone.utc), 'commenter': 'sbs2001', 'type': 'User'}, {'comment_id': 454279418, 'comment_body': ""Turns out I don't need updated_refs anymore. This PR is mess ;) "", 'comment_created': datetime.datetime(2020, 7, 14, 11, 9, 34, tzinfo=datetime.timezone.utc), 'commenter': 'sbs2001', 'type': 'User'}, {'comment_id': 454279778, 'comment_body': 'Using `existing_pkg_vuln_refs` instead, hope that makes sense', 'comment_created': datetime.datetime(2020, 7, 14, 11, 10, 18, tzinfo=datetime.timezone.utc), 'commenter': 'sbs2001', 'type': 'User'}, {'comment_id': 454280218, 'comment_body': ""Thanks, that's nice I'm using your suggested way now :)"", 'comment_created': datetime.datetime(2020, 7, 14, 11, 11, 12, tzinfo=datetime.timezone.utc), 'commenter': 'sbs2001', 'type': 'User'}, {'comment_id': 454280691, 'comment_body': 'Reverted to previous approach, which was more readable.', 'comment_created': datetime.datetime(2020, 7, 14, 11, 12, 17, tzinfo=datetime.timezone.utc), 'commenter': 'sbs2001', 'type': 'User'}, {'comment_id': 454283829, 'comment_body': 'Reverting this. p is a package.', 'comment_created': datetime.datetime(2020, 7, 14, 11, 18, 58, tzinfo=datetime.timezone.utc), 'commenter': 'sbs2001', 'type': 'User'}, {'comment_id': 454283852, 'comment_body': ' Overenginnering/pre-mature optimization . The idea was to use Dict[PackageURL, int] where the int is pk of Package , to save some memory because these dictionaries would grow big very fast. Carrying the Objects is way more expensive than pks so  I had used it . \r\n\r\nReverting this. ', 'comment_created': datetime.datetime(2020, 7, 14, 11, 19, 1, tzinfo=datetime.timezone.utc), 'commenter': 'sbs2001', 'type': 'User'}, {'comment_id': 454284222, 'comment_body': 'As mentioned above this is : \r\n\r\nOverenginnering/pre-mature optimization . The idea was to use Dict[PackageURL, int] where the int is pk of Package , to save some memory because these dictionaries would grow big very fast. Carrying the Objects is way more expensive than pks so I had used it .\r\n\r\nReverting this.\r\n', 'comment_created': datetime.datetime(2020, 7, 14, 11, 19, 48, tzinfo=datetime.timezone.utc), 'commenter': 'sbs2001', 'type': 'User'}, {'comment_id': 455177683, 'comment_body': ""Agreed. In the CI it would be something along the lines of running  a simple Mypy check right ? That probably won't be much of pain. \r\n\r\nIMHO using `typing` help in most cases to atleast know what's going in and out, way better than comments, but that's just my opinion. Looking at this again I feel rather ashamed of this case though, it really seems I've used  `typing` in  a rather cryptic way.  \r\n\r\nReverting this method, to the old one which was readable."", 'comment_created': datetime.datetime(2020, 7, 15, 16, 28, 35, tzinfo=datetime.timezone.utc), 'commenter': 'sbs2001', 'type': 'User'}, {'comment_id': 455185414, 'comment_body': 'the ticket https://github.com/nexB/vulnerablecode/issues/226 :)', 'comment_created': datetime.datetime(2020, 7, 15, 16, 41, 5, tzinfo=datetime.timezone.utc), 'commenter': 'sbs2001', 'type': 'User'}, {'comment_id': 458708948, 'comment_body': 'ok', 'comment_created': datetime.datetime(2020, 7, 22, 10, 58, 9, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 458715546, 'comment_body': 'Just asking :)', 'comment_created': datetime.datetime(2020, 7, 22, 11, 11, 31, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 458715786, 'comment_body': ""OK, that's quite important to get right!"", 'comment_created': datetime.datetime(2020, 7, 22, 11, 12, 2, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}]","[{'commit_sha': 'c421fe1ed912572fd41cfb666a2d3f72be06e7a8', 'committer_username': 'sbs2001', 'committer_name': 'Shivam Sandbhor', 'committer_email': 'shivam.sandbhor@gmail.com', 'commit_date': datetime.datetime(2017, 5, 26, 7, 20, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bfda9af785b7fe60404529f1f7c82bb0748bdcb6', 'committer_username': 'sbs2001', 'committer_name': 'Shivam Sandbhor', 'committer_email': 'shivam.sandbhor@gmail.com', 'commit_date': datetime.datetime(2017, 5, 26, 7, 20, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5fcb5ea0808204d4a6494c79c9fadd027182bd3b', 'committer_username': 'sbs2001', 'committer_name': 'Shivam Sandbhor', 'committer_email': 'shivam.sandbhor@gmail.com', 'commit_date': datetime.datetime(2017, 5, 26, 7, 20, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '35280ff7683e2f650b70d91defefc74486e8d48d', 'committer_username': 'sbs2001', 'committer_name': 'Shivam Sandbhor', 'committer_email': 'shivam.sandbhor@gmail.com', 'commit_date': datetime.datetime(2017, 5, 26, 7, 20, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '189582d38c2da0edbc3991865e6a25c685964d59', 'committer_username': 'sbs2001', 'committer_name': 'Shivam Sandbhor', 'committer_email': 'shivam.sandbhor@gmail.com', 'commit_date': datetime.datetime(2017, 5, 26, 7, 20, 21, tzinfo=datetime.timezone.utc)}]",Shivam Sandbhor,28975399,shivam.sandbhor@gmail.com,User,,96,,0,44
462673945,[DO NOT MERGE]Handle conflicts within in-memory advisories,Due to  this we had to add 'is_vulnerable' in PackageRelatedVulnerability. This happened because we were unable to  handle conflicts within in-memory advisories. This is fixed and the db constraints are changed too ,False,239,https://api.github.com/repos/aboutcode-org/vulnerablecode/pulls/239,https://github.com/aboutcode-org/vulnerablecode/pull/239,closed,75,75,3,3,2,0,0,0,[],2020-08-04 10:23:04+00:00,2020-09-14 13:14:39+00:00,3552695.0,"41 days, 2:51:35",[],"[{'commit_sha': 'b80597b845effe2c2d33516cce13c57dff0b603a', 'committer_username': 'sbs2001', 'committer_name': 'Shivam Sandbhor', 'committer_email': 'shivam.sandbhor@gmail.com', 'commit_date': datetime.datetime(2017, 5, 26, 7, 20, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6f312e67d7833d3be1301d96380d85ca4ced8aa6', 'committer_username': 'sbs2001', 'committer_name': 'Shivam Sandbhor', 'committer_email': 'shivam.sandbhor@gmail.com', 'commit_date': datetime.datetime(2017, 5, 26, 7, 20, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aa16e7db4b6b6c7a6cba9e8695c67cc68c17213f', 'committer_username': 'sbs2001', 'committer_name': 'Shivam Sandbhor', 'committer_email': 'shivam.sandbhor@gmail.com', 'commit_date': datetime.datetime(2017, 5, 26, 7, 20, 21, tzinfo=datetime.timezone.utc)}]",Shivam Sandbhor,28975399,shivam.sandbhor@gmail.com,User,,96,,0,44
450235314,Stick ref ids with urls,"This is based on https://github.com/nexB/vulnerablecode/pull/219 so please review that before this. 

This PR is implementation of https://github.com/nexB/vulnerablecode/pull/216#issuecomment-653778007

Fixes https://github.com/nexB/vulnerablecode/issues/223",True,227,https://api.github.com/repos/aboutcode-org/vulnerablecode/pulls/227,https://github.com/aboutcode-org/vulnerablecode/pull/227,closed,808,554,28,9,0,8,0,0,[],2020-07-16 14:20:59+00:00,2020-08-10 13:46:55+00:00,2157956.0,"24 days, 23:25:56","[{'comment_id': 457043524, 'comment_body': ""@pombredanne  and @haikoschol  what's the best way to handle this ? The way this is being done atm is obviously not the idel way."", 'comment_created': datetime.datetime(2020, 7, 20, 4, 41, 44, tzinfo=datetime.timezone.utc), 'commenter': 'sbs2001', 'type': 'User'}, {'comment_id': 459384730, 'comment_body': 'VulnerabilityReferenceUnit is not my preferred name, but your design above looks OK.\r\nIf youe question is about the `__hash__` do not override hash. Especially since you use mutable sequences. \r\nWhy do you think you need a hash here?', 'comment_created': datetime.datetime(2020, 7, 23, 11, 34, 50, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 459882699, 'comment_body': ""> Why do you think you need a hash here? \r\n\r\nNot 100% sure as @haikoschol  implemented this, most likely  because we want to put multiple Advisory's in  a set to avoid duplicates. \r\n\r\n~I think Advisory can be made immutable with no pain, that way we won't need to expicitly implement __hash__~ . "", 'comment_created': datetime.datetime(2020, 7, 24, 6, 59, 49, tzinfo=datetime.timezone.utc), 'commenter': 'sbs2001', 'type': 'User'}, {'comment_id': 459971821, 'comment_body': 'The hash is there for a reason :) . \r\n\r\nI\'m getting this  even after making Advisory immutable(by passing frozen=True in the dataclass decorator.) \r\n\r\n```\r\n  File ""/home/shivam/coding/opensource/vulnerablecode/vulnerabilities/data_source.py"", line 191, in batch_advisories\r\n    yield set(b)\r\n  File ""<string>"", line 3, in __hash__\r\nTypeError: unhashable type: \'set\'\r\n\r\n```', 'comment_created': datetime.datetime(2020, 7, 24, 10, 24, 33, tzinfo=datetime.timezone.utc), 'commenter': 'sbs2001', 'type': 'User'}, {'comment_id': 460382727, 'comment_body': '@sbs2001 avoid using set. They are unordered and are seldom needed and you will no longer need hashing override', 'comment_created': datetime.datetime(2020, 7, 25, 8, 43, 35, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 460382820, 'comment_body': 'Why not call it what it is? Simply either a `VulnerabilityReference` or a `Reference`', 'comment_created': datetime.datetime(2020, 7, 25, 8, 44, 45, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 462054708, 'comment_body': 'Calling it Reference', 'comment_created': datetime.datetime(2020, 7, 29, 5, 54, 22, tzinfo=datetime.timezone.utc), 'commenter': 'sbs2001', 'type': 'User'}, {'comment_id': 462055675, 'comment_body': ""@pombredanne  order doesn't matter in many places, since all Advisories will be dumped to database, it is just an intermediate data structure. Having said that, we really don't to have duplicate Advisories as those will cause IntegrityError "", 'comment_created': datetime.datetime(2020, 7, 29, 5, 57, 20, tzinfo=datetime.timezone.utc), 'commenter': 'sbs2001', 'type': 'User'}]","[{'commit_sha': '9f3496f193e443ea1ae0b10c336ab855c4ceeb09', 'committer_username': 'sbs2001', 'committer_name': 'Shivam Sandbhor', 'committer_email': 'shivam.sandbhor@gmail.com', 'commit_date': datetime.datetime(2017, 5, 26, 7, 20, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f5c100d29f1756d6e5fd98461afa8de728d49afd', 'committer_username': 'sbs2001', 'committer_name': 'Shivam Sandbhor', 'committer_email': 'shivam.sandbhor@gmail.com', 'commit_date': datetime.datetime(2017, 5, 26, 7, 20, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6eaf82cf5487f4c8cf46911714eb98eb6c022cc0', 'committer_username': 'sbs2001', 'committer_name': 'Shivam Sandbhor', 'committer_email': 'shivam.sandbhor@gmail.com', 'commit_date': datetime.datetime(2017, 5, 26, 7, 20, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'eb4b1c4ea2a4553737cadff888d180ef538fe5b9', 'committer_username': 'sbs2001', 'committer_name': 'Shivam Sandbhor', 'committer_email': 'shivam.sandbhor@gmail.com', 'commit_date': datetime.datetime(2017, 5, 26, 7, 20, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd0e4b95d017d882008b0ea0219324585b26e8b8d', 'committer_username': 'sbs2001', 'committer_name': 'Shivam Sandbhor', 'committer_email': 'shivam.sandbhor@gmail.com', 'commit_date': datetime.datetime(2017, 5, 26, 7, 20, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '747b9efc0ba1abfe3bd4678a7baf9c4c6fd27663', 'committer_username': 'sbs2001', 'committer_name': 'Shivam Sandbhor', 'committer_email': 'shivam.sandbhor@gmail.com', 'commit_date': datetime.datetime(2017, 5, 26, 7, 20, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c53176670eab18268a9938f6dff359366287d1cd', 'committer_username': 'sbs2001', 'committer_name': 'Shivam Sandbhor', 'committer_email': 'shivam.sandbhor@gmail.com', 'commit_date': datetime.datetime(2017, 5, 26, 7, 20, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a195a5dd952527b5f42d3688f8cf92e216c30f41', 'committer_username': 'sbs2001', 'committer_name': 'Shivam Sandbhor', 'committer_email': 'shivam.sandbhor@gmail.com', 'commit_date': datetime.datetime(2017, 5, 26, 7, 20, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '52c7e89200bdd397351d4a3cc8449300269a55a9', 'committer_username': 'sbs2001', 'committer_name': 'Shivam Sandbhor', 'committer_email': 'shivam.sandbhor@gmail.com', 'commit_date': datetime.datetime(2017, 5, 26, 7, 20, 21, tzinfo=datetime.timezone.utc)}]",Shivam Sandbhor,28975399,shivam.sandbhor@gmail.com,User,,96,,0,44
454353799,Add UI for VulnerableCode,"This is based on the models of https://github.com/nexB/vulnerablecode/pull/219 .

Finally a UI for VulnerableCode ! 

Uses CSS framework Bulma . Vanilla JS. Fully featured CRUD. 

Addresses https://github.com/nexB/vulnerablecode/issues/218

![zz_comp](https://user-images.githubusercontent.com/28975399/89056138-2c8a8300-d379-11ea-882e-f28f38789cdc.png)

**./**
![Screenshot_2020-07-27 Login](https://user-images.githubusercontent.com/28975399/88498646-517d9f80-cfe1-11ea-9253-f146d4c180cc.png)

**./vulnerabilities/search**
![Screenshot_2020-07-27 Login(1)](https://user-images.githubusercontent.com/28975399/88498669-64906f80-cfe1-11ea-875b-2e94d6cef983.png)

**/vulnerabilities/search?vuln_id=CVE-2019**
![Screenshot_2020-07-27 Login(2)](https://user-images.githubusercontent.com/28975399/88498694-75d97c00-cfe1-11ea-9afc-b772c2e916ab.png)

**/vulnerabilities/23**
![Screenshot_2020-07-27 Login(3)](https://user-images.githubusercontent.com/28975399/88498793-c2bd5280-cfe1-11ea-84de-b6d8a6bcfff0.png)


**./packages/search**
![Screenshot_2020-07-27 Login(4)](https://user-images.githubusercontent.com/28975399/88498893-087a1b00-cfe2-11ea-91da-e88348032073.png)

**./packages/21**
![Screenshot_2020-07-27 Login(5)](https://user-images.githubusercontent.com/28975399/88498943-247dbc80-cfe2-11ea-8ff0-317762fe4469.png)

**./packages/create***
![Screenshot_2020-07-27 Login(6)](https://user-images.githubusercontent.com/28975399/88498978-38292300-cfe2-11ea-97b4-5992db82a753.png)

**vulnerabilities/create**

![Screenshot_2020-07-27 Login(7)](https://user-images.githubusercontent.com/28975399/88499045-60b11d00-cfe2-11ea-8bdd-70049cc854f0.png)
",True,230,https://api.github.com/repos/aboutcode-org/vulnerablecode/pulls/230,https://github.com/aboutcode-org/vulnerablecode/pull/230,closed,17529,8,38,28,4,13,0,0,[],2020-07-21 10:17:50+00:00,2020-08-26 07:39:35+00:00,3100905.0,"35 days, 21:21:45","[{'comment_id': 468547086, 'comment_body': ':+1: ', 'comment_created': datetime.datetime(2020, 8, 11, 12, 38, 3, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 471027004, 'comment_body': 'I am puzzled by the repetition.', 'comment_created': datetime.datetime(2020, 8, 15, 19, 36, 25, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 471027080, 'comment_body': 'What is ` ""package type""` about? I am also puzzled by the repetition (a bit of docstring would help I guess?', 'comment_created': datetime.datetime(2020, 8, 15, 19, 37, 20, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 471027381, 'comment_body': 'All our licenses are ScanCode keys and are lowercase (e.g. case does not matter and is always normalized to lower).\r\nAlso based on the .LICENSE below it looks like the license may be rather: `mit  AND ofl-1.1 AND cc-by-4.0` and we would also need the text of each of these too.', 'comment_created': datetime.datetime(2020, 8, 15, 19, 41, 31, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 471084866, 'comment_body': 'https://docs.djangoproject.com/en/3.1/ref/forms/fields/#django.forms.ChoiceField.choices \r\n\r\nExample:  For the tuple (""x"",""1"")  the user will be able to select ""1"" in the frontend which will be interpreted as  ""x"" in the backend.   \r\n\r\nIn this case I want the user to select namespace for what it is in the frontend as well as backend. This whole  thing is done because I want to use `ChoiceField` instead of `CharField` which is provided by the `ModelForm`.  ', 'comment_created': datetime.datetime(2020, 8, 16, 8, 43, 49, tzinfo=datetime.timezone.utc), 'commenter': 'sbs2001', 'type': 'User'}, {'comment_id': 471249232, 'comment_body': '`package type` is just another choice , which roughly translates into  the user not caring about the pkg type of results obtained', 'comment_created': datetime.datetime(2020, 8, 17, 6, 6, 2, tzinfo=datetime.timezone.utc), 'commenter': 'sbs2001', 'type': 'User'}, {'comment_id': 474519353, 'comment_body': ""According to https://github.com/FortAwesome/Font-Awesome/tree/v4.7.0#license I'm pretty sure we won't need `AND` . \r\n\r\nUsing scancode keys now  ."", 'comment_created': datetime.datetime(2020, 8, 21, 8, 28, 1, tzinfo=datetime.timezone.utc), 'commenter': 'sbs2001', 'type': 'User'}, {'comment_id': 475584639, 'comment_body': 'I am still not clear at all why you need that?', 'comment_created': datetime.datetime(2020, 8, 24, 13, 4, 9, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 475587759, 'comment_body': 'Not sure you need all these empty lines, do you?', 'comment_created': datetime.datetime(2020, 8, 24, 13, 9, 44, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 475588063, 'comment_body': 'Nit: sort your imports', 'comment_created': datetime.datetime(2020, 8, 24, 13, 10, 16, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 475588901, 'comment_body': 'Niit: sort your imports', 'comment_created': datetime.datetime(2020, 8, 24, 13, 11, 43, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 475624761, 'comment_body': 'placeholder\r\n', 'comment_created': datetime.datetime(2020, 8, 24, 13, 53, 8, tzinfo=datetime.timezone.utc), 'commenter': 'sbs2001', 'type': 'User'}, {'comment_id': 477095712, 'comment_body': 'Ah, you mean a placeholder in the UI dropdown?', 'comment_created': datetime.datetime(2020, 8, 26, 7, 37, 34, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}]","[{'commit_sha': '6dbeabd3fd8917d1e9ead5fd233400459ccbf2a9', 'committer_username': 'sbs2001', 'committer_name': 'Shivam Sandbhor', 'committer_email': 'shivam.sandbhor@gmail.com', 'commit_date': datetime.datetime(2017, 5, 26, 7, 20, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0b4e8fb13fc782a69b8877d1cc26718c55c9367f', 'committer_username': 'sbs2001', 'committer_name': 'Shivam Sandbhor', 'committer_email': 'shivam.sandbhor@gmail.com', 'commit_date': datetime.datetime(2017, 5, 26, 7, 20, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6df8c1f85d996bddc30e53a9a484ed295a3aa01a', 'committer_username': 'sbs2001', 'committer_name': 'Shivam Sandbhor', 'committer_email': 'shivam.sandbhor@gmail.com', 'commit_date': datetime.datetime(2017, 5, 26, 7, 20, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9c71ff12690378128d5c41eb8a9cdd6e70c6c4d5', 'committer_username': 'sbs2001', 'committer_name': 'Shivam Sandbhor', 'committer_email': 'shivam.sandbhor@gmail.com', 'commit_date': datetime.datetime(2017, 5, 26, 7, 20, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '14d1fc73fd96f8316ad83ea025bd45af8c6d3603', 'committer_username': 'sbs2001', 'committer_name': 'Shivam Sandbhor', 'committer_email': 'shivam.sandbhor@gmail.com', 'commit_date': datetime.datetime(2017, 5, 26, 7, 20, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4e0f7415564b421a29f67ffc9d6d4866742b4dd6', 'committer_username': 'sbs2001', 'committer_name': 'Shivam Sandbhor', 'committer_email': 'shivam.sandbhor@gmail.com', 'commit_date': datetime.datetime(2017, 5, 26, 7, 20, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e3d421b36523eb830caf09fd7f0b2c37cecc7821', 'committer_username': 'sbs2001', 'committer_name': 'Shivam Sandbhor', 'committer_email': 'shivam.sandbhor@gmail.com', 'commit_date': datetime.datetime(2017, 5, 26, 7, 20, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ef9028528793b6da50e08ce3fa012b3a40334f28', 'committer_username': 'sbs2001', 'committer_name': 'Shivam Sandbhor', 'committer_email': 'shivam.sandbhor@gmail.com', 'commit_date': datetime.datetime(2017, 5, 26, 7, 20, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f8e9e2df31b3ce738af9b869a2de446c93ae40a8', 'committer_username': 'sbs2001', 'committer_name': 'Shivam Sandbhor', 'committer_email': 'shivam.sandbhor@gmail.com', 'commit_date': datetime.datetime(2017, 5, 26, 7, 20, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8e03a2e512df9604d307c53f8652c5a685f38634', 'committer_username': 'sbs2001', 'committer_name': 'Shivam Sandbhor', 'committer_email': 'shivam.sandbhor@gmail.com', 'commit_date': datetime.datetime(2017, 5, 26, 7, 20, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '776af5c7aaf243180f58d3216cdd8c96c50e78b7', 'committer_username': 'sbs2001', 'committer_name': 'Shivam Sandbhor', 'committer_email': 'shivam.sandbhor@gmail.com', 'commit_date': datetime.datetime(2017, 5, 26, 7, 20, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7b8835a0c18045613f8ca13f4d37dcac4ff42ab6', 'committer_username': 'sbs2001', 'committer_name': 'Shivam Sandbhor', 'committer_email': 'shivam.sandbhor@gmail.com', 'commit_date': datetime.datetime(2017, 5, 26, 7, 20, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '38d90a0244b6b7d951f777b215faede8a66d86ba', 'committer_username': 'sbs2001', 'committer_name': 'Shivam Sandbhor', 'committer_email': 'shivam.sandbhor@gmail.com', 'commit_date': datetime.datetime(2017, 5, 26, 7, 20, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b99675df3762adeca91aa4ef370f04f8a0bd5bce', 'committer_username': 'sbs2001', 'committer_name': 'Shivam Sandbhor', 'committer_email': 'shivam.sandbhor@gmail.com', 'commit_date': datetime.datetime(2017, 5, 26, 7, 20, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fda98d2baab04515ce2078545b253bf4d94c3db9', 'committer_username': 'sbs2001', 'committer_name': 'Shivam Sandbhor', 'committer_email': 'shivam.sandbhor@gmail.com', 'commit_date': datetime.datetime(2017, 5, 26, 7, 20, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a18d4527748a96f81df9a8e93e70af1b8523856a', 'committer_username': 'sbs2001', 'committer_name': 'Shivam Sandbhor', 'committer_email': 'shivam.sandbhor@gmail.com', 'commit_date': datetime.datetime(2017, 5, 26, 7, 20, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0a1d007c99e1c0af5df6c67aba04727478647e69', 'committer_username': 'sbs2001', 'committer_name': 'Shivam Sandbhor', 'committer_email': 'shivam.sandbhor@gmail.com', 'commit_date': datetime.datetime(2017, 5, 26, 7, 20, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2a0b6d10ff7762049281476d4ed6fe368eb7c601', 'committer_username': 'sbs2001', 'committer_name': 'Shivam Sandbhor', 'committer_email': 'shivam.sandbhor@gmail.com', 'commit_date': datetime.datetime(2017, 5, 26, 7, 20, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '398311920f532c513f00af9f54150358bdfd14d3', 'committer_username': 'sbs2001', 'committer_name': 'Shivam Sandbhor', 'committer_email': 'shivam.sandbhor@gmail.com', 'commit_date': datetime.datetime(2017, 5, 26, 7, 20, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '38905e06be5359fc96cb28d6be64d1e90fbe6557', 'committer_username': 'sbs2001', 'committer_name': 'Shivam Sandbhor', 'committer_email': 'shivam.sandbhor@gmail.com', 'commit_date': datetime.datetime(2017, 5, 26, 7, 20, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd8afc735bcea55d87e4708ea9c4806caac8837cf', 'committer_username': 'sbs2001', 'committer_name': 'Shivam Sandbhor', 'committer_email': 'shivam.sandbhor@gmail.com', 'commit_date': datetime.datetime(2017, 5, 26, 7, 20, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4340264e985a8f41f59890f527a7c1db6d3e897f', 'committer_username': 'sbs2001', 'committer_name': 'Shivam Sandbhor', 'committer_email': 'shivam.sandbhor@gmail.com', 'commit_date': datetime.datetime(2017, 5, 26, 7, 20, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c09bbdd7d018545d831fe002535b2f9d9491341c', 'committer_username': 'sbs2001', 'committer_name': 'Shivam Sandbhor', 'committer_email': 'shivam.sandbhor@gmail.com', 'commit_date': datetime.datetime(2017, 5, 26, 7, 20, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd6897b8c53e4f989525f9ac4e991bed303d3efd3', 'committer_username': 'sbs2001', 'committer_name': 'Shivam Sandbhor', 'committer_email': 'shivam.sandbhor@gmail.com', 'commit_date': datetime.datetime(2017, 5, 26, 7, 20, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2443fc185e9f94cc29fdc8dde6eab52f9a38b933', 'committer_username': 'sbs2001', 'committer_name': 'Shivam Sandbhor', 'committer_email': 'shivam.sandbhor@gmail.com', 'commit_date': datetime.datetime(2017, 5, 26, 7, 20, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5d3ee7f66b9a4e5a67ed315726e1f36333871a0a', 'committer_username': 'sbs2001', 'committer_name': 'Shivam Sandbhor', 'committer_email': 'shivam.sandbhor@gmail.com', 'commit_date': datetime.datetime(2017, 5, 26, 7, 20, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c735c3585fcf78728db81b57f7c132aebabef94f', 'committer_username': 'sbs2001', 'committer_name': 'Shivam Sandbhor', 'committer_email': 'shivam.sandbhor@gmail.com', 'commit_date': datetime.datetime(2017, 5, 26, 7, 20, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1caad9577ab030622767bc802914fccfeba38c36', 'committer_username': 'sbs2001', 'committer_name': 'Shivam Sandbhor', 'committer_email': 'shivam.sandbhor@gmail.com', 'commit_date': datetime.datetime(2017, 5, 26, 7, 20, 21, tzinfo=datetime.timezone.utc)}]",Shivam Sandbhor,28975399,shivam.sandbhor@gmail.com,User,,96,,0,44
458260232,Use ayncio for making  API  calls to obtain package versions,This works by  creating coroutines for all API calls at once in bulk. This cuts the time waiting for server to respond before making another request. ,True,236,https://api.github.com/repos/aboutcode-org/vulnerablecode/pulls/236,https://github.com/aboutcode-org/vulnerablecode/pull/236,closed,742,620,16,9,1,0,0,0,[],2020-07-29 07:51:28+00:00,2020-08-11 16:15:02+00:00,1153414.0,"13 days, 8:23:34",[],"[{'commit_sha': 'a36232d2272ecc9af976927279f6c8aba8e72e6e', 'committer_username': 'sbs2001', 'committer_name': 'Shivam Sandbhor', 'committer_email': 'shivam.sandbhor@gmail.com', 'commit_date': datetime.datetime(2017, 5, 26, 7, 20, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7a4f3e26f97065d69d0a98c63fb0e21430c7b760', 'committer_username': 'sbs2001', 'committer_name': 'Shivam Sandbhor', 'committer_email': 'shivam.sandbhor@gmail.com', 'commit_date': datetime.datetime(2017, 5, 26, 7, 20, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '56b6ed279d403c016cc6d4166c654643e70cf100', 'committer_username': 'sbs2001', 'committer_name': 'Shivam Sandbhor', 'committer_email': 'shivam.sandbhor@gmail.com', 'commit_date': datetime.datetime(2017, 5, 26, 7, 20, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3c4ffdf91f0f2a72b70fbe3907d01efa51a46a96', 'committer_username': 'sbs2001', 'committer_name': 'Shivam Sandbhor', 'committer_email': 'shivam.sandbhor@gmail.com', 'commit_date': datetime.datetime(2017, 5, 26, 7, 20, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3d4e202f930416996baa9d517efb3db6f43fafba', 'committer_username': 'sbs2001', 'committer_name': 'Shivam Sandbhor', 'committer_email': 'shivam.sandbhor@gmail.com', 'commit_date': datetime.datetime(2017, 5, 26, 7, 20, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '877a9f5fff6ddf94394911154806dd1df3ed2324', 'committer_username': 'sbs2001', 'committer_name': 'Shivam Sandbhor', 'committer_email': 'shivam.sandbhor@gmail.com', 'commit_date': datetime.datetime(2017, 5, 26, 7, 20, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bbc094b264ee0471bda56f51a1818ac7e0897d8d', 'committer_username': 'sbs2001', 'committer_name': 'Shivam Sandbhor', 'committer_email': 'shivam.sandbhor@gmail.com', 'commit_date': datetime.datetime(2017, 5, 26, 7, 20, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f58daecd002153a3bfb4d24de44dca3d3a913196', 'committer_username': 'sbs2001', 'committer_name': 'Shivam Sandbhor', 'committer_email': 'shivam.sandbhor@gmail.com', 'commit_date': datetime.datetime(2017, 5, 26, 7, 20, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '39937184e362c1c641bdb1814f76a56d5c3d7f31', 'committer_username': 'sbs2001', 'committer_name': 'Shivam Sandbhor', 'committer_email': 'shivam.sandbhor@gmail.com', 'commit_date': datetime.datetime(2017, 5, 26, 7, 20, 21, tzinfo=datetime.timezone.utc)}]",Shivam Sandbhor,28975399,shivam.sandbhor@gmail.com,User,,96,,0,44
471489234, Redesign  the rest API,"TODOs 

1. Update documentation. ~Add tests specific to checking new API additions~
~2. Deal with inputting  packageurls as query param.~",True,247,https://api.github.com/repos/aboutcode-org/vulnerablecode/pulls/247,https://github.com/aboutcode-org/vulnerablecode/pull/247,closed,739,615,9,7,0,11,0,0,[],2020-08-21 08:19:53+00:00,2020-09-03 10:21:41+00:00,1130508.0,"13 days, 2:01:48","[{'comment_id': 477131805, 'comment_body': 'Use Many2Many QuerySet syntax instead.', 'comment_created': datetime.datetime(2020, 8, 26, 8, 36, 44, tzinfo=datetime.timezone.utc), 'commenter': 'tdruez', 'type': 'User'}, {'comment_id': 477132142, 'comment_body': 'Same as above, use Many2Many syntax.', 'comment_created': datetime.datetime(2020, 8, 26, 8, 37, 14, tzinfo=datetime.timezone.utc), 'commenter': 'tdruez', 'type': 'User'}, {'comment_id': 477133994, 'comment_body': 'Why are we overriding the default method from PackageURLMixin?', 'comment_created': datetime.datetime(2020, 8, 26, 8, 40, 12, tzinfo=datetime.timezone.utc), 'commenter': 'tdruez', 'type': 'User'}, {'comment_id': 477135754, 'comment_body': 'What is the need for `re_path` instead of `path` here?', 'comment_created': datetime.datetime(2020, 8, 26, 8, 42, 56, tzinfo=datetime.timezone.utc), 'commenter': 'tdruez', 'type': 'User'}, {'comment_id': 477136635, 'comment_body': ""What's the reasoning behind overriding the default trailing_slash convention?"", 'comment_created': datetime.datetime(2020, 8, 26, 8, 44, 20, tzinfo=datetime.timezone.utc), 'commenter': 'tdruez', 'type': 'User'}, {'comment_id': 477221782, 'comment_body': 'This one uses JSONField the old`set_package_url` converts qualifiers into normalized string. More on this https://github.com/package-url/packageurl-python/pull/35#discussion_r434320271', 'comment_created': datetime.datetime(2020, 8, 26, 11, 14, 29, tzinfo=datetime.timezone.utc), 'commenter': 'sbs2001', 'type': 'User'}, {'comment_id': 477223839, 'comment_body': ""I haven't touched that, that's black doing it's thing.  Having said that  we can use `path` their alright."", 'comment_created': datetime.datetime(2020, 8, 26, 11, 18, 21, tzinfo=datetime.timezone.utc), 'commenter': 'sbs2001', 'type': 'User'}, {'comment_id': 477225867, 'comment_body': 'I had to discuss this with you guys. \r\n\r\nFor the `ListView` using trailing_slash the endpoints look  odd. The endpoints with queries look like :\r\n`/api/vulnerabilities/?vulnerability_id=foo`\r\n\r\nAfter the override you get the :\r\n`/api/vulnerabilities?vulnerability_id=foo`\r\n\r\nNot sure this matter tho, so I might be missing something here.\r\n', 'comment_created': datetime.datetime(2020, 8, 26, 11, 22, 17, tzinfo=datetime.timezone.utc), 'commenter': 'sbs2001', 'type': 'User'}, {'comment_id': 477290234, 'comment_body': ""I don't see the benefit of removing the trailing slash.\r\n\r\nFrom https://www.django-rest-framework.org/api-guide/routers/\r\n\r\n> Trailing slashes are conventional in Django, but are not used by default in some other frameworks such as Rails.\r\n\r\nI think we should follow Django's conventions."", 'comment_created': datetime.datetime(2020, 8, 26, 13, 14, 53, tzinfo=datetime.timezone.utc), 'commenter': 'tdruez', 'type': 'User'}, {'comment_id': 478261089, 'comment_body': ':+1: ', 'comment_created': datetime.datetime(2020, 8, 27, 8, 52, 16, tzinfo=datetime.timezone.utc), 'commenter': 'sbs2001', 'type': 'User'}, {'comment_id': 478348493, 'comment_body': ""I don't think this lookup is necessary since the related manager is starting on `self`."", 'comment_created': datetime.datetime(2020, 8, 27, 11, 33, 7, tzinfo=datetime.timezone.utc), 'commenter': 'tdruez', 'type': 'User'}]","[{'commit_sha': '3b966c01e497fd168a902b2efba27ab4e9ed7171', 'committer_username': 'sbs2001', 'committer_name': 'Shivam Sandbhor', 'committer_email': 'shivam.sandbhor@gmail.com', 'commit_date': datetime.datetime(2017, 5, 26, 7, 20, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '52d2990078731c449097a65bcd06a2ad5ee03b07', 'committer_username': 'sbs2001', 'committer_name': 'Shivam Sandbhor', 'committer_email': 'shivam.sandbhor@gmail.com', 'commit_date': datetime.datetime(2017, 5, 26, 7, 20, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '929d544de2534e4445dffab8a79a13386f33e5d6', 'committer_username': 'sbs2001', 'committer_name': 'Shivam Sandbhor', 'committer_email': 'shivam.sandbhor@gmail.com', 'commit_date': datetime.datetime(2017, 5, 26, 7, 20, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '647edd46ff7463434d74e708aeb9e53a673d8b43', 'committer_username': 'sbs2001', 'committer_name': 'Shivam Sandbhor', 'committer_email': 'shivam.sandbhor@gmail.com', 'commit_date': datetime.datetime(2017, 5, 26, 7, 20, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4ae838c38b773cd9eda0ea401b1721bf8641aa96', 'committer_username': 'sbs2001', 'committer_name': 'Shivam Sandbhor', 'committer_email': 'shivam.sandbhor@gmail.com', 'commit_date': datetime.datetime(2017, 5, 26, 7, 20, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f5bd3bc96ecf2ec35b6da0618ff5ea0895538d1e', 'committer_username': 'sbs2001', 'committer_name': 'Shivam Sandbhor', 'committer_email': 'shivam.sandbhor@gmail.com', 'commit_date': datetime.datetime(2017, 5, 26, 7, 20, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '153f256163045c5d383bdb79b3a9a8a8e96ff140', 'committer_username': 'sbs2001', 'committer_name': 'Shivam Sandbhor', 'committer_email': 'shivam.sandbhor@gmail.com', 'commit_date': datetime.datetime(2017, 5, 26, 7, 20, 21, tzinfo=datetime.timezone.utc)}]",Shivam Sandbhor,28975399,shivam.sandbhor@gmail.com,User,,96,,0,44
428974743,Make the config of Importer  'updateable',"This will enable the us to update the config of an Importer after each run.  Essential to utilise Etags, and for https://github.com/nexB/vulnerablecode/pull/188
Signed-off-by: Shivam Sandbhor <shivam.sandbhor@gmail.com>",True,191,https://api.github.com/repos/aboutcode-org/vulnerablecode/pulls/191,https://github.com/aboutcode-org/vulnerablecode/pull/191,closed,8,5,4,1,0,2,0,0,[],2020-06-06 04:37:30+00:00,2020-06-06 15:04:41+00:00,37631.0,10:27:11,"[{'comment_id': 436273200, 'comment_body': 'please remove the line instead of commenting it out', 'comment_created': datetime.datetime(2020, 6, 6, 14, 29, 46, tzinfo=datetime.timezone.utc), 'commenter': 'haikoschol', 'type': 'User'}, {'comment_id': 436274038, 'comment_body': 'Done', 'comment_created': datetime.datetime(2020, 6, 6, 14, 42, 1, tzinfo=datetime.timezone.utc), 'commenter': 'sbs2001', 'type': 'User'}]","[{'commit_sha': '0a7c6fc01b0d0b4d8b09be63926e58504c7d861a', 'committer_username': 'sbs2001', 'committer_name': 'Shivam Sandbhor', 'committer_email': 'shivam.sandbhor@gmail.com', 'commit_date': datetime.datetime(2017, 5, 26, 7, 20, 21, tzinfo=datetime.timezone.utc)}]",Shivam Sandbhor,28975399,shivam.sandbhor@gmail.com,User,,96,,0,44
458478145,Save  etags to importers wherever possible,"Signed-off-by: Shivam Sandbhor <shivam.sandbhor@gmail.com>

This enables the importers to know whether they already have the latest data by checking the changes in  etags.",True,237,https://api.github.com/repos/aboutcode-org/vulnerablecode/pulls/237,https://github.com/aboutcode-org/vulnerablecode/pull/237,closed,67,11,4,2,0,0,0,0,[],2020-07-29 14:30:02+00:00,2020-08-13 17:13:49+00:00,1305827.0,"15 days, 2:43:47",[],"[{'commit_sha': 'f6e1bca51b432c0a8cc3aa6a5a8eac13659da7bd', 'committer_username': 'sbs2001', 'committer_name': 'Shivam Sandbhor', 'committer_email': 'shivam.sandbhor@gmail.com', 'commit_date': datetime.datetime(2017, 5, 26, 7, 20, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '091d479f12bcb48f9b06532cc1b1e4ec08db6b37', 'committer_username': 'sbs2001', 'committer_name': 'Shivam Sandbhor', 'committer_email': 'shivam.sandbhor@gmail.com', 'commit_date': datetime.datetime(2017, 5, 26, 7, 20, 21, tzinfo=datetime.timezone.utc)}]",Shivam Sandbhor,28975399,shivam.sandbhor@gmail.com,User,,96,,0,44
441251330,Remove migrations and add importer yielder module,"Fixes https://github.com/nexB/vulnerablecode/issues/208. 

 A registry/fixture of importers are added. The ~class `ImporterYielder`~ module `importer_yielder` yields Importer objects as required. No need to  add any commands. ",True,221,https://api.github.com/repos/aboutcode-org/vulnerablecode/pulls/221,https://github.com/aboutcode-org/vulnerablecode/pull/221,closed,272,820,19,8,0,7,0,0,[],2020-06-29 07:23:06+00:00,2020-07-22 11:17:05+00:00,2001239.0,"23 days, 3:53:59","[{'comment_id': 450693089, 'comment_body': 'Looks like the line endings here need fixing.', 'comment_created': datetime.datetime(2020, 7, 7, 8, 24, 58, tzinfo=datetime.timezone.utc), 'commenter': 'haikoschol', 'type': 'User'}, {'comment_id': 450727133, 'comment_body': ""I don't understand what you mean.\r\nCan you elaborate ? Do you mean ^M , that is not me ;) it's a stupid way of rendering json github uses, try raw mode."", 'comment_created': datetime.datetime(2020, 7, 7, 9, 21, 33, tzinfo=datetime.timezone.utc), 'commenter': 'sbs2001', 'type': 'User'}, {'comment_id': 451488869, 'comment_body': ""> Can you elaborate ? Do you mean ^M , that is not me ;) it's a stupid way of rendering json github uses, try raw mode.\r\n\r\nInteresting. Never seen that before. Looks like DOS line endings. nvm then :)"", 'comment_created': datetime.datetime(2020, 7, 8, 12, 2, 55, tzinfo=datetime.timezone.utc), 'commenter': 'haikoschol', 'type': 'User'}, {'comment_id': 451553573, 'comment_body': 'The line endings are DOS indeed. We should use LF *nix instead:\r\n```\r\n$ wget https://raw.githubusercontent.com/nexB/vulnerablecode/7bfa1c57d3cb4846067ff59ca2d6cde667fee29d/vulnerabilities/importer_registry.json\r\n$ file importer_registry.json \r\nimporter_registry.json: ASCII text, with CRLF, CR line terminators\r\n```', 'comment_created': datetime.datetime(2020, 7, 8, 13, 42, 30, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 451554353, 'comment_body': 'Why using a JSON file as opposed to a plain Python script? What is the benefit?', 'comment_created': datetime.datetime(2020, 7, 8, 13, 43, 31, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 451566245, 'comment_body': ""Plain python  works too. I can't think of any benefit of using one over another, except some difference in resulting syntax. \r\n\r\nI think I went with JSON, since python script is not usually used for storing data. "", 'comment_created': datetime.datetime(2020, 7, 8, 13, 58, 53, tzinfo=datetime.timezone.utc), 'commenter': 'sbs2001', 'type': 'User'}, {'comment_id': 453748665, 'comment_body': ""This made sense after the discussion.\r\n\r\n Will use python script, because the data isn't too much to warrant a separate JSON, because doing so will introduce more unnecessary complexity. `importer_yielder.py` would encapsulate data+logic to seed the project."", 'comment_created': datetime.datetime(2020, 7, 13, 15, 46, 47, tzinfo=datetime.timezone.utc), 'commenter': 'sbs2001', 'type': 'User'}]","[{'commit_sha': '7b6c51f8bb6d4b30cc4836de31c0ea18a231483c', 'committer_username': 'sbs2001', 'committer_name': 'Shivam Sandbhor', 'committer_email': 'shivam.sandbhor@gmail.com', 'commit_date': datetime.datetime(2017, 5, 26, 7, 20, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '762fa1e62a376154ebbc8f407cd1a6c725ab9195', 'committer_username': 'sbs2001', 'committer_name': 'Shivam Sandbhor', 'committer_email': 'shivam.sandbhor@gmail.com', 'commit_date': datetime.datetime(2017, 5, 26, 7, 20, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '14ff4dd0bef77adb5ed718eee489ff5b3e2110a4', 'committer_username': 'sbs2001', 'committer_name': 'Shivam Sandbhor', 'committer_email': 'shivam.sandbhor@gmail.com', 'commit_date': datetime.datetime(2017, 5, 26, 7, 20, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0a87a7fe7d585afdc1cdc12f3c1e26ea8424ec2e', 'committer_username': 'sbs2001', 'committer_name': 'Shivam Sandbhor', 'committer_email': 'shivam.sandbhor@gmail.com', 'commit_date': datetime.datetime(2017, 5, 26, 7, 20, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b5049a80327400320e109860a536cf1285b8e208', 'committer_username': 'sbs2001', 'committer_name': 'Shivam Sandbhor', 'committer_email': 'shivam.sandbhor@gmail.com', 'commit_date': datetime.datetime(2017, 5, 26, 7, 20, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f67e11e48c8da195c94c3d5fa6c198f501e81303', 'committer_username': 'sbs2001', 'committer_name': 'Shivam Sandbhor', 'committer_email': 'shivam.sandbhor@gmail.com', 'commit_date': datetime.datetime(2017, 5, 26, 7, 20, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd876a78b2e2dc69322bf16e292a980b97be6e1e7', 'committer_username': 'sbs2001', 'committer_name': 'Shivam Sandbhor', 'committer_email': 'shivam.sandbhor@gmail.com', 'commit_date': datetime.datetime(2017, 5, 26, 7, 20, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b5927b30f69430be6d737918e38be9cc12409e9c', 'committer_username': 'sbs2001', 'committer_name': 'Shivam Sandbhor', 'committer_email': 'shivam.sandbhor@gmail.com', 'commit_date': datetime.datetime(2017, 5, 26, 7, 20, 21, tzinfo=datetime.timezone.utc)}]",Shivam Sandbhor,28975399,shivam.sandbhor@gmail.com,User,,96,,0,44
470655068,Use New README,Signed-off-by: Shivam Sandbhor <shivam.sandbhor@gmail.com>,True,246,https://api.github.com/repos/aboutcode-org/vulnerablecode/pulls/246,https://github.com/aboutcode-org/vulnerablecode/pull/246,closed,38,37,1,1,0,0,0,0,[],2020-08-20 04:54:47+00:00,2020-08-20 04:59:33+00:00,286.0,0:04:46,[],"[{'commit_sha': '79bbf05cccd7d3b079439b2cf7b84a22d1ba7226', 'committer_username': 'sbs2001', 'committer_name': 'Shivam Sandbhor', 'committer_email': 'shivam.sandbhor@gmail.com', 'commit_date': datetime.datetime(2017, 5, 26, 7, 20, 21, tzinfo=datetime.timezone.utc)}]",Shivam Sandbhor,28975399,shivam.sandbhor@gmail.com,User,,96,,0,44
437703114,Add docs directory and add tutorial about adding new importer,"A start to adding documentation

Signed-off-by: Shivam Sandbhor <shivam.sandbhor@gmail.com>",True,214,https://api.github.com/repos/aboutcode-org/vulnerablecode/pulls/214,https://github.com/aboutcode-org/vulnerablecode/pull/214,closed,199,0,1,1,3,0,0,0,[],2020-06-22 06:00:40+00:00,2020-06-25 07:58:05+00:00,266245.0,"3 days, 1:57:25",[],"[{'commit_sha': '19e19f69fef6d9bcfea1d51bb338fac1aa823308', 'committer_username': 'sbs2001', 'committer_name': 'Shivam Sandbhor', 'committer_email': 'shivam.sandbhor@gmail.com', 'commit_date': datetime.datetime(2017, 5, 26, 7, 20, 21, tzinfo=datetime.timezone.utc)}]",Shivam Sandbhor,28975399,shivam.sandbhor@gmail.com,User,,96,,0,44
462674876, Update docs for importer_yielder.py,Things have changed. The docs now show the new procedure to register an importer,True,240,https://api.github.com/repos/aboutcode-org/vulnerablecode/pulls/240,https://github.com/aboutcode-org/vulnerablecode/pull/240,closed,10,53,1,1,0,0,0,0,[],2020-08-04 10:24:47+00:00,2020-08-04 10:30:37+00:00,350.0,0:05:50,[],"[{'commit_sha': '1551700fe561291ed8512129415da2424517f347', 'committer_username': 'sbs2001', 'committer_name': 'Shivam Sandbhor', 'committer_email': 'shivam.sandbhor@gmail.com', 'commit_date': datetime.datetime(2017, 5, 26, 7, 20, 21, tzinfo=datetime.timezone.utc)}]",Shivam Sandbhor,28975399,shivam.sandbhor@gmail.com,User,,96,,0,44

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
36813835,OVALRepo,CISecurity/OVALRepo,,121,259,48,57,5673,64,1,0,"[{'id': 419905881, 'number': 1820, 'closed': datetime.datetime(2020, 5, 19, 15, 43, 35, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 5, 19, 6, 28, 17, tzinfo=datetime.timezone.utc), 'time_taken': 33318.0, 'time_delta': '9:15:18', 'additions': 18, 'deletions': 18, 'state': 'closed'}]"
91780998,vulnerablecode,aboutcode-org/vulnerablecode,Python,188,512,25,48,2247,566,17,16,"[{'id': 764051956, 'number': 570, 'closed': datetime.datetime(2021, 10, 26, 13, 10, 43, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 10, 22, 10, 8, 53, tzinfo=datetime.timezone.utc), 'time_taken': 356510.0, 'time_delta': '4 days, 3:01:50', 'additions': 5, 'deletions': 0, 'state': 'closed'}, {'id': 719616389, 'number': 542, 'closed': datetime.datetime(2021, 9, 8, 14, 12, 33, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 25, 13, 43, 9, tzinfo=datetime.timezone.utc), 'time_taken': 1211364.0, 'time_delta': '14 days, 0:29:24', 'additions': 1002, 'deletions': 21, 'state': 'closed'}, {'id': 718901146, 'number': 539, 'closed': datetime.datetime(2021, 8, 24, 16, 39, 51, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 24, 16, 38, 48, tzinfo=datetime.timezone.utc), 'time_taken': 63.0, 'time_delta': '0:01:03', 'additions': 4, 'deletions': 1, 'state': 'closed'}, {'id': 678341085, 'number': 491, 'closed': datetime.datetime(2021, 6, 26, 14, 6, 28, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 26, 14, 3, 56, tzinfo=datetime.timezone.utc), 'time_taken': 152.0, 'time_delta': '0:02:32', 'additions': 66, 'deletions': 1, 'state': 'closed'}, {'id': 669005917, 'number': 480, 'closed': datetime.datetime(2021, 6, 20, 5, 28, 21, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 13, 7, 18, 47, tzinfo=datetime.timezone.utc), 'time_taken': 598174.0, 'time_delta': '6 days, 22:09:34', 'additions': 109, 'deletions': 302, 'state': 'closed'}, {'id': 668988520, 'number': 479, 'closed': datetime.datetime(2021, 6, 13, 4, 39, 1, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 13, 4, 28, 2, tzinfo=datetime.timezone.utc), 'time_taken': 659.0, 'time_delta': '0:10:59', 'additions': 4, 'deletions': 4, 'state': 'closed'}, {'id': 657676925, 'number': 467, 'closed': datetime.datetime(2021, 7, 3, 6, 5, 13, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 5, 30, 11, 42, 36, tzinfo=datetime.timezone.utc), 'time_taken': 2917357.0, 'time_delta': '33 days, 18:22:37', 'additions': 682, 'deletions': 234, 'state': 'closed'}, {'id': 645320543, 'number': 453, 'closed': datetime.datetime(2021, 5, 16, 15, 26, 14, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 5, 16, 14, 2, 47, tzinfo=datetime.timezone.utc), 'time_taken': 5007.0, 'time_delta': '1:23:27', 'additions': 33, 'deletions': 19, 'state': 'closed'}, {'id': 628429908, 'number': 450, 'closed': datetime.datetime(2021, 5, 3, 6, 54, 23, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 5, 1, 13, 9, 5, tzinfo=datetime.timezone.utc), 'time_taken': 150318.0, 'time_delta': '1 day, 17:45:18', 'additions': 110, 'deletions': 0, 'state': 'closed'}, {'id': 619091260, 'number': 445, 'closed': datetime.datetime(2021, 4, 29, 7, 13, 9, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 4, 20, 8, 0, 46, tzinfo=datetime.timezone.utc), 'time_taken': 774743.0, 'time_delta': '8 days, 23:12:23', 'additions': 152, 'deletions': 169, 'state': 'closed'}, {'id': 612183023, 'number': 436, 'closed': datetime.datetime(2021, 4, 22, 10, 53, 24, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 4, 9, 6, 17, 41, tzinfo=datetime.timezone.utc), 'time_taken': 1139743.0, 'time_delta': '13 days, 4:35:43', 'additions': 6605, 'deletions': 9997, 'state': 'closed'}, {'id': 607900393, 'number': 421, 'closed': datetime.datetime(2021, 4, 8, 4, 37, 43, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 4, 2, 8, 16, 20, tzinfo=datetime.timezone.utc), 'time_taken': 505283.0, 'time_delta': '5 days, 20:21:23', 'additions': 510, 'deletions': 265, 'state': 'closed'}, {'id': 592856616, 'number': 378, 'closed': datetime.datetime(2021, 3, 24, 3, 56, 10, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 3, 15, 8, 21, 42, tzinfo=datetime.timezone.utc), 'time_taken': 761668.0, 'time_delta': '8 days, 19:34:28', 'additions': 151, 'deletions': 3, 'state': 'closed'}, {'id': 585634946, 'number': 369, 'closed': datetime.datetime(2021, 3, 11, 4, 10, 33, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 3, 5, 14, 1, 59, tzinfo=datetime.timezone.utc), 'time_taken': 482914.0, 'time_delta': '5 days, 14:08:34', 'additions': 291, 'deletions': 182, 'state': 'closed'}, {'id': 585546439, 'number': 368, 'closed': datetime.datetime(2021, 3, 5, 12, 2, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 3, 5, 11, 59, 47, tzinfo=datetime.timezone.utc), 'time_taken': 133.0, 'time_delta': '0:02:13', 'additions': 10, 'deletions': 16, 'state': 'closed'}, {'id': 582910644, 'number': 365, 'closed': datetime.datetime(2021, 4, 4, 4, 31, 57, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 3, 2, 10, 23, 12, tzinfo=datetime.timezone.utc), 'time_taken': 2830125.0, 'time_delta': '32 days, 18:08:45', 'additions': 71, 'deletions': 2, 'state': 'closed'}, {'id': 580124460, 'number': 363, 'closed': datetime.datetime(2021, 3, 4, 10, 50, 34, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 2, 25, 14, 5, 45, tzinfo=datetime.timezone.utc), 'time_taken': 593089.0, 'time_delta': '6 days, 20:44:49', 'additions': 1703, 'deletions': 1390, 'state': 'closed'}, {'id': 576310549, 'number': 360, 'closed': datetime.datetime(2021, 2, 23, 14, 30, 6, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 2, 19, 9, 13, 40, tzinfo=datetime.timezone.utc), 'time_taken': 364586.0, 'time_delta': '4 days, 5:16:26', 'additions': 11, 'deletions': 6, 'state': 'closed'}, {'id': 574865279, 'number': 358, 'closed': datetime.datetime(2021, 2, 23, 14, 23, 45, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 2, 17, 12, 2, 35, tzinfo=datetime.timezone.utc), 'time_taken': 526870.0, 'time_delta': '6 days, 2:21:10', 'additions': 228, 'deletions': 132, 'state': 'closed'}, {'id': 574133156, 'number': 355, 'closed': datetime.datetime(2021, 2, 16, 11, 51, 56, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 2, 16, 11, 39, 36, tzinfo=datetime.timezone.utc), 'time_taken': 740.0, 'time_delta': '0:12:20', 'additions': 14, 'deletions': 0, 'state': 'closed'}, {'id': 573953889, 'number': 354, 'closed': datetime.datetime(2021, 2, 16, 10, 6, 59, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 2, 16, 6, 12, 43, tzinfo=datetime.timezone.utc), 'time_taken': 14056.0, 'time_delta': '3:54:16', 'additions': 265, 'deletions': 2, 'state': 'closed'}, {'id': 573473855, 'number': 353, 'closed': datetime.datetime(2021, 2, 15, 13, 51, 32, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 2, 15, 10, 58, tzinfo=datetime.timezone.utc), 'time_taken': 10412.0, 'time_delta': '2:53:32', 'additions': 32, 'deletions': 33, 'state': 'closed'}, {'id': 573048319, 'number': 350, 'closed': datetime.datetime(2021, 2, 14, 7, 16, 58, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 2, 14, 6, 47, 9, tzinfo=datetime.timezone.utc), 'time_taken': 1789.0, 'time_delta': '0:29:49', 'additions': 17, 'deletions': 9, 'state': 'closed'}, {'id': 572496308, 'number': 347, 'closed': datetime.datetime(2021, 2, 13, 4, 43, 52, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 2, 12, 12, 48, 43, tzinfo=datetime.timezone.utc), 'time_taken': 57309.0, 'time_delta': '15:55:09', 'additions': 5, 'deletions': 4, 'state': 'closed'}, {'id': 570254284, 'number': 342, 'closed': datetime.datetime(2021, 2, 13, 6, 17, 34, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 2, 9, 12, 14, 52, tzinfo=datetime.timezone.utc), 'time_taken': 324162.0, 'time_delta': '3 days, 18:02:42', 'additions': 270, 'deletions': 0, 'state': 'closed'}, {'id': 568941965, 'number': 339, 'closed': datetime.datetime(2021, 2, 7, 10, 12, 57, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 2, 7, 9, 29, 10, tzinfo=datetime.timezone.utc), 'time_taken': 2627.0, 'time_delta': '0:43:47', 'additions': 165, 'deletions': 131, 'state': 'closed'}, {'id': 566755225, 'number': 335, 'closed': datetime.datetime(2021, 2, 13, 4, 43, 26, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 2, 3, 11, 25, 23, tzinfo=datetime.timezone.utc), 'time_taken': 839883.0, 'time_delta': '9 days, 17:18:03', 'additions': 139, 'deletions': 134, 'state': 'closed'}, {'id': 565145673, 'number': 331, 'closed': datetime.datetime(2021, 2, 1, 12, 45, 47, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 2, 1, 12, 34, 13, tzinfo=datetime.timezone.utc), 'time_taken': 694.0, 'time_delta': '0:11:34', 'additions': 53, 'deletions': 16, 'state': 'closed'}, {'id': 564402808, 'number': 330, 'closed': datetime.datetime(2021, 2, 5, 8, 9, 23, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 1, 30, 11, 4, 41, tzinfo=datetime.timezone.utc), 'time_taken': 507882.0, 'time_delta': '5 days, 21:04:42', 'additions': 11, 'deletions': 6, 'state': 'closed'}, {'id': 564394307, 'number': 329, 'closed': datetime.datetime(2021, 1, 30, 10, 0, 49, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 1, 30, 9, 53, 23, tzinfo=datetime.timezone.utc), 'time_taken': 446.0, 'time_delta': '0:07:26', 'additions': 3, 'deletions': 1, 'state': 'closed'}, {'id': 559390143, 'number': 313, 'closed': datetime.datetime(2021, 1, 21, 16, 41, 50, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 1, 21, 16, 35, 11, tzinfo=datetime.timezone.utc), 'time_taken': 399.0, 'time_delta': '0:06:39', 'additions': 3, 'deletions': 3, 'state': 'closed'}, {'id': 556294766, 'number': 310, 'closed': datetime.datetime(2021, 1, 17, 7, 42, 25, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 1, 17, 7, 40, 14, tzinfo=datetime.timezone.utc), 'time_taken': 131.0, 'time_delta': '0:02:11', 'additions': 15, 'deletions': 13, 'state': 'closed'}, {'id': 543605392, 'number': 303, 'closed': datetime.datetime(2021, 1, 17, 12, 16, 20, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 12, 21, 16, 58, 55, tzinfo=datetime.timezone.utc), 'time_taken': 2315845.0, 'time_delta': '26 days, 19:17:25', 'additions': 238, 'deletions': 13, 'state': 'closed'}, {'id': 542466117, 'number': 301, 'closed': datetime.datetime(2020, 12, 18, 11, 37, 3, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 12, 18, 10, 52, 32, tzinfo=datetime.timezone.utc), 'time_taken': 2671.0, 'time_delta': '0:44:31', 'additions': 571, 'deletions': 1, 'state': 'closed'}, {'id': 536895039, 'number': 298, 'closed': datetime.datetime(2020, 12, 17, 4, 53, 4, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 12, 11, 13, 25, 21, tzinfo=datetime.timezone.utc), 'time_taken': 487663.0, 'time_delta': '5 days, 15:27:43', 'additions': 50, 'deletions': 5, 'state': 'closed'}, {'id': 536591315, 'number': 295, 'closed': datetime.datetime(2020, 12, 16, 17, 20, 3, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 12, 11, 7, 29, 17, tzinfo=datetime.timezone.utc), 'time_taken': 467446.0, 'time_delta': '5 days, 9:50:46', 'additions': 49, 'deletions': 1, 'state': 'closed'}, {'id': 530179066, 'number': 292, 'closed': datetime.datetime(2020, 12, 17, 6, 2, 57, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 12, 1, 10, 0, 14, tzinfo=datetime.timezone.utc), 'time_taken': 1368163.0, 'time_delta': '15 days, 20:02:43', 'additions': 527, 'deletions': 0, 'state': 'closed'}, {'id': 529494202, 'number': 291, 'closed': datetime.datetime(2020, 12, 18, 5, 43, 29, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 11, 30, 11, 48, 11, tzinfo=datetime.timezone.utc), 'time_taken': 1533318.0, 'time_delta': '17 days, 17:55:18', 'additions': 66, 'deletions': 30, 'state': 'closed'}, {'id': 529089871, 'number': 290, 'closed': datetime.datetime(2021, 2, 9, 14, 13, 21, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 11, 29, 10, 42, 36, tzinfo=datetime.timezone.utc), 'time_taken': 6233445.0, 'time_delta': '72 days, 3:30:45', 'additions': 587, 'deletions': 668, 'state': 'closed'}, {'id': 527347325, 'number': 285, 'closed': datetime.datetime(2020, 12, 18, 5, 49, 50, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 11, 25, 10, 38, 17, tzinfo=datetime.timezone.utc), 'time_taken': 1969893.0, 'time_delta': '22 days, 19:11:33', 'additions': 30, 'deletions': 0, 'state': 'closed'}, {'id': 525086386, 'number': 281, 'closed': datetime.datetime(2020, 12, 15, 13, 44, 39, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 11, 21, 6, 19, 19, tzinfo=datetime.timezone.utc), 'time_taken': 2100320.0, 'time_delta': '24 days, 7:25:20', 'additions': 264, 'deletions': 66, 'state': 'closed'}, {'id': 524631251, 'number': 278, 'closed': datetime.datetime(2020, 12, 17, 5, 46, 45, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 11, 20, 11, 9, 56, tzinfo=datetime.timezone.utc), 'time_taken': 2313409.0, 'time_delta': '26 days, 18:36:49', 'additions': 233, 'deletions': 236, 'state': 'closed'}, {'id': 512891584, 'number': 274, 'closed': datetime.datetime(2020, 11, 17, 22, 51, 51, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 10, 30, 10, 11, 57, tzinfo=datetime.timezone.utc), 'time_taken': 1600794.0, 'time_delta': '18 days, 12:39:54', 'additions': 240, 'deletions': 0, 'state': 'closed'}, {'id': 512830460, 'number': 273, 'closed': datetime.datetime(2021, 2, 24, 8, 48, 19, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 10, 30, 8, 10, 55, tzinfo=datetime.timezone.utc), 'time_taken': 10111044.0, 'time_delta': '117 days, 0:37:24', 'additions': 55, 'deletions': 40, 'state': 'closed'}, {'id': 512784479, 'number': 271, 'closed': datetime.datetime(2020, 12, 14, 11, 55, 10, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 10, 30, 6, 18, 41, tzinfo=datetime.timezone.utc), 'time_taken': 3908189.0, 'time_delta': '45 days, 5:36:29', 'additions': 26, 'deletions': 6, 'state': 'closed'}, {'id': 508981447, 'number': 270, 'closed': datetime.datetime(2021, 3, 4, 11, 58, 50, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 10, 23, 13, 51, 55, tzinfo=datetime.timezone.utc), 'time_taken': 11398015.0, 'time_delta': '131 days, 22:06:55', 'additions': 183, 'deletions': 6, 'state': 'closed'}, {'id': 499114159, 'number': 265, 'closed': datetime.datetime(2020, 11, 17, 22, 16, 44, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 10, 7, 9, 32, 37, tzinfo=datetime.timezone.utc), 'time_taken': 3588247.0, 'time_delta': '41 days, 12:44:07', 'additions': 362, 'deletions': 22, 'state': 'closed'}, {'id': 499024035, 'number': 264, 'closed': datetime.datetime(2020, 11, 17, 17, 2, 52, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 10, 7, 6, 47, 29, tzinfo=datetime.timezone.utc), 'time_taken': 3579323.0, 'time_delta': '41 days, 10:15:23', 'additions': 233, 'deletions': 22, 'state': 'closed'}, {'id': 497251077, 'number': 263, 'closed': datetime.datetime(2020, 11, 17, 16, 49, 22, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 10, 3, 10, 6, 28, tzinfo=datetime.timezone.utc), 'time_taken': 3912174.0, 'time_delta': '45 days, 6:42:54', 'additions': 97, 'deletions': 2, 'state': 'closed'}, {'id': 493749270, 'number': 262, 'closed': datetime.datetime(2020, 9, 28, 10, 38, 55, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 9, 27, 17, 11, 16, tzinfo=datetime.timezone.utc), 'time_taken': 62859.0, 'time_delta': '17:27:39', 'additions': 2, 'deletions': 2, 'state': 'closed'}, {'id': 493724286, 'number': 261, 'closed': datetime.datetime(2020, 11, 17, 16, 38, 34, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 9, 27, 13, 49, 53, tzinfo=datetime.timezone.utc), 'time_taken': 4416521.0, 'time_delta': '51 days, 2:48:41', 'additions': 116, 'deletions': 0, 'state': 'closed'}, {'id': 493711924, 'number': 260, 'closed': datetime.datetime(2020, 9, 28, 12, 31, 16, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 9, 27, 11, 57, 58, tzinfo=datetime.timezone.utc), 'time_taken': 88398.0, 'time_delta': '1 day, 0:33:18', 'additions': 107, 'deletions': 2, 'state': 'closed'}, {'id': 493497417, 'number': 259, 'closed': datetime.datetime(2021, 2, 23, 12, 43, 52, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 9, 26, 6, 16, 45, tzinfo=datetime.timezone.utc), 'time_taken': 12983227.0, 'time_delta': '150 days, 6:27:07', 'additions': 501, 'deletions': 387, 'state': 'closed'}, {'id': 492481870, 'number': 258, 'closed': datetime.datetime(2020, 9, 24, 14, 21, 55, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 9, 24, 14, 18, 45, tzinfo=datetime.timezone.utc), 'time_taken': 190.0, 'time_delta': '0:03:10', 'additions': 1, 'deletions': 0, 'state': 'closed'}, {'id': 490169172, 'number': 257, 'closed': datetime.datetime(2020, 9, 21, 10, 10, 55, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 9, 21, 9, 41, 52, tzinfo=datetime.timezone.utc), 'time_taken': 1743.0, 'time_delta': '0:29:03', 'additions': 8, 'deletions': 7, 'state': 'closed'}, {'id': 489863673, 'number': 256, 'closed': datetime.datetime(2020, 9, 24, 13, 48, 49, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 9, 20, 6, 18, 43, tzinfo=datetime.timezone.utc), 'time_taken': 372606.0, 'time_delta': '4 days, 7:30:06', 'additions': 60, 'deletions': 22, 'state': 'closed'}, {'id': 486355915, 'number': 255, 'closed': datetime.datetime(2020, 9, 15, 17, 5, 19, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 9, 14, 6, 9, 41, tzinfo=datetime.timezone.utc), 'time_taken': 125738.0, 'time_delta': '1 day, 10:55:38', 'additions': 44547, 'deletions': 49540, 'state': 'closed'}, {'id': 484670207, 'number': 254, 'closed': datetime.datetime(2020, 9, 11, 5, 46, 23, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 9, 11, 5, 38, 20, tzinfo=datetime.timezone.utc), 'time_taken': 483.0, 'time_delta': '0:08:03', 'additions': 5, 'deletions': 10, 'state': 'closed'}, {'id': 471489234, 'number': 247, 'closed': datetime.datetime(2020, 9, 3, 10, 21, 41, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 21, 8, 19, 53, tzinfo=datetime.timezone.utc), 'time_taken': 1130508.0, 'time_delta': '13 days, 2:01:48', 'additions': 739, 'deletions': 615, 'state': 'closed'}, {'id': 470655068, 'number': 246, 'closed': datetime.datetime(2020, 8, 20, 4, 59, 33, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 20, 4, 54, 47, tzinfo=datetime.timezone.utc), 'time_taken': 286.0, 'time_delta': '0:04:46', 'additions': 38, 'deletions': 37, 'state': 'closed'}, {'id': 470212950, 'number': 245, 'closed': datetime.datetime(2020, 8, 19, 16, 20, 40, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 19, 14, 43, 6, tzinfo=datetime.timezone.utc), 'time_taken': 5854.0, 'time_delta': '1:37:34', 'additions': 60, 'deletions': 57, 'state': 'closed'}, {'id': 465285621, 'number': 243, 'closed': datetime.datetime(2020, 9, 24, 13, 51, 40, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 10, 5, 40, 52, tzinfo=datetime.timezone.utc), 'time_taken': 3917448.0, 'time_delta': '45 days, 8:10:48', 'additions': 581, 'deletions': 0, 'state': 'closed'}, {'id': 463297708, 'number': 241, 'closed': datetime.datetime(2020, 8, 13, 16, 50, 39, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 5, 10, 36, 13, tzinfo=datetime.timezone.utc), 'time_taken': 713666.0, 'time_delta': '8 days, 6:14:26', 'additions': 53, 'deletions': 33, 'state': 'closed'}, {'id': 462674876, 'number': 240, 'closed': datetime.datetime(2020, 8, 4, 10, 30, 37, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 4, 10, 24, 47, tzinfo=datetime.timezone.utc), 'time_taken': 350.0, 'time_delta': '0:05:50', 'additions': 10, 'deletions': 53, 'state': 'closed'}, {'id': 462673945, 'number': 239, 'closed': datetime.datetime(2020, 9, 14, 13, 14, 39, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 4, 10, 23, 4, tzinfo=datetime.timezone.utc), 'time_taken': 3552695.0, 'time_delta': '41 days, 2:51:35', 'additions': 75, 'deletions': 75, 'state': 'closed'}, {'id': 458478145, 'number': 237, 'closed': datetime.datetime(2020, 8, 13, 17, 13, 49, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 29, 14, 30, 2, tzinfo=datetime.timezone.utc), 'time_taken': 1305827.0, 'time_delta': '15 days, 2:43:47', 'additions': 67, 'deletions': 11, 'state': 'closed'}, {'id': 458260232, 'number': 236, 'closed': datetime.datetime(2020, 8, 11, 16, 15, 2, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 29, 7, 51, 28, tzinfo=datetime.timezone.utc), 'time_taken': 1153414.0, 'time_delta': '13 days, 8:23:34', 'additions': 742, 'deletions': 620, 'state': 'closed'}, {'id': 457799523, 'number': 235, 'closed': datetime.datetime(2020, 7, 28, 13, 14, 44, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 28, 13, 11, 27, tzinfo=datetime.timezone.utc), 'time_taken': 197.0, 'time_delta': '0:03:17', 'additions': 0, 'deletions': 4, 'state': 'closed'}, {'id': 457796686, 'number': 234, 'closed': datetime.datetime(2020, 8, 21, 14, 4, 50, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 28, 13, 6, 17, tzinfo=datetime.timezone.utc), 'time_taken': 2077113.0, 'time_delta': '24 days, 0:58:33', 'additions': 9, 'deletions': 9, 'state': 'closed'}, {'id': 455485343, 'number': 231, 'closed': datetime.datetime(2020, 8, 13, 13, 57, 19, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 23, 5, 17, 31, tzinfo=datetime.timezone.utc), 'time_taken': 1845588.0, 'time_delta': '21 days, 8:39:48', 'additions': 549, 'deletions': 523, 'state': 'closed'}, {'id': 454353799, 'number': 230, 'closed': datetime.datetime(2020, 8, 26, 7, 39, 35, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 21, 10, 17, 50, tzinfo=datetime.timezone.utc), 'time_taken': 3100905.0, 'time_delta': '35 days, 21:21:45', 'additions': 17529, 'deletions': 8, 'state': 'closed'}, {'id': 450949017, 'number': 228, 'closed': datetime.datetime(2020, 7, 23, 12, 35, 55, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 17, 9, 15, 55, tzinfo=datetime.timezone.utc), 'time_taken': 530400.0, 'time_delta': '6 days, 3:20:00', 'additions': 67, 'deletions': 190, 'state': 'closed'}, {'id': 450235314, 'number': 227, 'closed': datetime.datetime(2020, 8, 10, 13, 46, 55, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 16, 14, 20, 59, tzinfo=datetime.timezone.utc), 'time_taken': 2157956.0, 'time_delta': '24 days, 23:25:56', 'additions': 808, 'deletions': 554, 'state': 'closed'}, {'id': 447242780, 'number': 225, 'closed': datetime.datetime(2020, 7, 22, 11, 23, 32, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 10, 5, 58, 18, tzinfo=datetime.timezone.utc), 'time_taken': 1056314.0, 'time_delta': '12 days, 5:25:14', 'additions': 206, 'deletions': 72, 'state': 'closed'}, {'id': 441251330, 'number': 221, 'closed': datetime.datetime(2020, 7, 22, 11, 17, 5, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 29, 7, 23, 6, tzinfo=datetime.timezone.utc), 'time_taken': 2001239.0, 'time_delta': '23 days, 3:53:59', 'additions': 272, 'deletions': 820, 'state': 'closed'}, {'id': 441022447, 'number': 220, 'closed': datetime.datetime(2020, 6, 28, 8, 30, 56, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 28, 8, 27, 26, tzinfo=datetime.timezone.utc), 'time_taken': 210.0, 'time_delta': '0:03:30', 'additions': 1, 'deletions': 3, 'state': 'closed'}, {'id': 441021306, 'number': 219, 'closed': datetime.datetime(2020, 7, 22, 11, 14, 24, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 28, 8, 16, 48, tzinfo=datetime.timezone.utc), 'time_taken': 2084256.0, 'time_delta': '24 days, 2:57:36', 'additions': 49507, 'deletions': 47570, 'state': 'closed'}, {'id': 440051509, 'number': 216, 'closed': datetime.datetime(2020, 9, 24, 14, 53, 47, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 25, 14, 17, 21, tzinfo=datetime.timezone.utc), 'time_taken': 7864586.0, 'time_delta': '91 days, 0:36:26', 'additions': 78, 'deletions': 81, 'state': 'closed'}, {'id': 437703114, 'number': 214, 'closed': datetime.datetime(2020, 6, 25, 7, 58, 5, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 22, 6, 0, 40, tzinfo=datetime.timezone.utc), 'time_taken': 266245.0, 'time_delta': '3 days, 1:57:25', 'additions': 199, 'deletions': 0, 'state': 'closed'}, {'id': 437673998, 'number': 213, 'closed': datetime.datetime(2020, 6, 30, 13, 14, 38, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 22, 4, 31, 15, tzinfo=datetime.timezone.utc), 'time_taken': 722603.0, 'time_delta': '8 days, 8:43:23', 'additions': 381, 'deletions': 0, 'state': 'closed'}, {'id': 437421840, 'number': 211, 'closed': datetime.datetime(2020, 6, 22, 11, 14, 21, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 20, 14, 56, 13, tzinfo=datetime.timezone.utc), 'time_taken': 159488.0, 'time_delta': '1 day, 20:18:08', 'additions': 1, 'deletions': 2027, 'state': 'closed'}, {'id': 434345067, 'number': 204, 'closed': datetime.datetime(2020, 7, 22, 12, 35, 11, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 15, 7, 30, 48, tzinfo=datetime.timezone.utc), 'time_taken': 3215063.0, 'time_delta': '37 days, 5:04:23', 'additions': 9147, 'deletions': 0, 'state': 'closed'}, {'id': 434092280, 'number': 203, 'closed': datetime.datetime(2020, 6, 14, 10, 57, 51, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 14, 4, 20, 15, tzinfo=datetime.timezone.utc), 'time_taken': 23856.0, 'time_delta': '6:37:36', 'additions': 377, 'deletions': 0, 'state': 'closed'}, {'id': 433062420, 'number': 202, 'closed': datetime.datetime(2020, 6, 12, 12, 32, 59, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 11, 13, 4, 31, tzinfo=datetime.timezone.utc), 'time_taken': 84508.0, 'time_delta': '23:28:28', 'additions': 350, 'deletions': 0, 'state': 'closed'}, {'id': 432433696, 'number': 201, 'closed': datetime.datetime(2020, 6, 10, 17, 12, 11, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 10, 12, 51, 29, tzinfo=datetime.timezone.utc), 'time_taken': 15642.0, 'time_delta': '4:20:42', 'additions': 33, 'deletions': 4, 'state': 'closed'}, {'id': 432279749, 'number': 200, 'closed': datetime.datetime(2020, 6, 10, 11, 36, 16, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 10, 8, 6, 58, tzinfo=datetime.timezone.utc), 'time_taken': 12558.0, 'time_delta': '3:29:18', 'additions': 437, 'deletions': 1, 'state': 'closed'}, {'id': 431076262, 'number': 196, 'closed': datetime.datetime(2020, 6, 8, 11, 49, 36, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 8, 11, 48, 33, tzinfo=datetime.timezone.utc), 'time_taken': 63.0, 'time_delta': '0:01:03', 'additions': 121, 'deletions': 485, 'state': 'closed'}, {'id': 429892133, 'number': 194, 'closed': datetime.datetime(2020, 6, 9, 18, 32, 35, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 7, 9, 10, 32, tzinfo=datetime.timezone.utc), 'time_taken': 206523.0, 'time_delta': '2 days, 9:22:03', 'additions': 313, 'deletions': 0, 'state': 'closed'}, {'id': 429745804, 'number': 193, 'closed': datetime.datetime(2020, 6, 9, 16, 21, 27, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 7, 5, 27, 45, tzinfo=datetime.timezone.utc), 'time_taken': 212022.0, 'time_delta': '2 days, 10:53:42', 'additions': 314, 'deletions': 0, 'state': 'closed'}, {'id': 428978974, 'number': 192, 'closed': datetime.datetime(2020, 6, 6, 4, 49, 14, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 6, 4, 49, tzinfo=datetime.timezone.utc), 'time_taken': 14.0, 'time_delta': '0:00:14', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 428974743, 'number': 191, 'closed': datetime.datetime(2020, 6, 6, 15, 4, 41, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 6, 4, 37, 30, tzinfo=datetime.timezone.utc), 'time_taken': 37631.0, 'time_delta': '10:27:11', 'additions': 8, 'deletions': 5, 'state': 'closed'}, {'id': 426470177, 'number': 188, 'closed': datetime.datetime(2020, 6, 8, 9, 19, 36, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 2, 9, 40, 13, tzinfo=datetime.timezone.utc), 'time_taken': 517163.0, 'time_delta': '5 days, 23:39:23', 'additions': 493, 'deletions': 126, 'state': 'closed'}, {'id': 423190155, 'number': 186, 'closed': datetime.datetime(2020, 5, 26, 13, 4, 30, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 5, 26, 12, 59, 25, tzinfo=datetime.timezone.utc), 'time_taken': 305.0, 'time_delta': '0:05:05', 'additions': 8, 'deletions': 3, 'state': 'closed'}, {'id': 422793168, 'number': 185, 'closed': datetime.datetime(2020, 5, 28, 10, 56, 26, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 5, 25, 15, 1, 14, tzinfo=datetime.timezone.utc), 'time_taken': 244512.0, 'time_delta': '2 days, 19:55:12', 'additions': 420, 'deletions': 76, 'state': 'closed'}, {'id': 422378360, 'number': 184, 'closed': datetime.datetime(2020, 5, 24, 7, 59, 5, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 5, 24, 7, 55, 17, tzinfo=datetime.timezone.utc), 'time_taken': 228.0, 'time_delta': '0:03:48', 'additions': 8, 'deletions': 2, 'state': 'closed'}, {'id': 420668522, 'number': 183, 'closed': datetime.datetime(2020, 5, 20, 11, 10, 9, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 5, 20, 10, 47, 44, tzinfo=datetime.timezone.utc), 'time_taken': 1345.0, 'time_delta': '0:22:25', 'additions': 381, 'deletions': 51, 'state': 'closed'}, {'id': 420538490, 'number': 182, 'closed': datetime.datetime(2020, 5, 20, 6, 39, 12, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 5, 20, 6, 35, 44, tzinfo=datetime.timezone.utc), 'time_taken': 208.0, 'time_delta': '0:03:28', 'additions': 20, 'deletions': 58, 'state': 'closed'}, {'id': 420126708, 'number': 181, 'closed': datetime.datetime(2020, 5, 20, 10, 48, 9, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 5, 19, 13, 39, 38, tzinfo=datetime.timezone.utc), 'time_taken': 76111.0, 'time_delta': '21:08:31', 'additions': 419, 'deletions': 62, 'state': 'closed'}, {'id': 419068934, 'number': 180, 'closed': datetime.datetime(2020, 5, 19, 13, 40, 37, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 5, 17, 6, 33, 5, tzinfo=datetime.timezone.utc), 'time_taken': 198452.0, 'time_delta': '2 days, 7:07:32', 'additions': 402, 'deletions': 5, 'state': 'closed'}, {'id': 418655961, 'number': 179, 'closed': datetime.datetime(2020, 5, 19, 11, 39, 31, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 5, 15, 15, 26, 31, tzinfo=datetime.timezone.utc), 'time_taken': 331980.0, 'time_delta': '3 days, 20:13:00', 'additions': 1856, 'deletions': 2, 'state': 'closed'}, {'id': 416060437, 'number': 178, 'closed': datetime.datetime(2020, 6, 7, 5, 28, 29, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 5, 11, 12, 2, 6, tzinfo=datetime.timezone.utc), 'time_taken': 2309183.0, 'time_delta': '26 days, 17:26:23', 'additions': 48, 'deletions': 0, 'state': 'closed'}, {'id': 414159954, 'number': 177, 'closed': datetime.datetime(2020, 5, 6, 17, 7, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 5, 6, 15, 12, 39, tzinfo=datetime.timezone.utc), 'time_taken': 6861.0, 'time_delta': '1:54:21', 'additions': 0, 'deletions': 235, 'state': 'closed'}, {'id': 409229485, 'number': 176, 'closed': datetime.datetime(2020, 5, 1, 14, 31, 29, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 4, 27, 3, 35, 27, tzinfo=datetime.timezone.utc), 'time_taken': 384962.0, 'time_delta': '4 days, 10:56:02', 'additions': 0, 'deletions': 2, 'state': 'closed'}, {'id': 406091818, 'number': 174, 'closed': datetime.datetime(2020, 5, 1, 14, 30, 9, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 4, 20, 14, 15, 54, tzinfo=datetime.timezone.utc), 'time_taken': 951255.0, 'time_delta': '11 days, 0:14:15', 'additions': 43, 'deletions': 10, 'state': 'closed'}, {'id': 403823324, 'number': 173, 'closed': datetime.datetime(2020, 5, 21, 5, 21, 49, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 4, 15, 15, 14, 47, tzinfo=datetime.timezone.utc), 'time_taken': 3074822.0, 'time_delta': '35 days, 14:07:02', 'additions': 8786, 'deletions': 164, 'state': 'closed'}, {'id': 402600053, 'number': 172, 'closed': datetime.datetime(2020, 4, 16, 16, 10, 17, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 4, 13, 11, 19, 57, tzinfo=datetime.timezone.utc), 'time_taken': 276620.0, 'time_delta': '3 days, 4:50:20', 'additions': 62, 'deletions': 2, 'state': 'closed'}, {'id': 401885428, 'number': 171, 'closed': datetime.datetime(2020, 4, 11, 14, 39, 47, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 4, 10, 12, 13, 26, tzinfo=datetime.timezone.utc), 'time_taken': 95181.0, 'time_delta': '1 day, 2:26:21', 'additions': 22, 'deletions': 1, 'state': 'closed'}, {'id': 398593793, 'number': 170, 'closed': datetime.datetime(2020, 4, 4, 16, 30, 33, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 4, 4, 14, 35, 2, tzinfo=datetime.timezone.utc), 'time_taken': 6931.0, 'time_delta': '1:55:31', 'additions': 10, 'deletions': 8, 'state': 'closed'}, {'id': 397738414, 'number': 169, 'closed': datetime.datetime(2020, 6, 6, 13, 30, 10, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 4, 2, 18, 12, 42, tzinfo=datetime.timezone.utc), 'time_taken': 5599048.0, 'time_delta': '64 days, 19:17:28', 'additions': 104, 'deletions': 13, 'state': 'closed'}, {'id': 394604349, 'number': 167, 'closed': datetime.datetime(2020, 4, 7, 13, 6, 23, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 3, 27, 7, 54, 32, tzinfo=datetime.timezone.utc), 'time_taken': 969111.0, 'time_delta': '11 days, 5:11:51', 'additions': 75, 'deletions': 1, 'state': 'closed'}, {'id': 390236539, 'number': 166, 'closed': datetime.datetime(2020, 3, 22, 21, 1, 33, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 3, 18, 6, 3, 36, tzinfo=datetime.timezone.utc), 'time_taken': 399477.0, 'time_delta': '4 days, 14:57:57', 'additions': 13, 'deletions': 3, 'state': 'closed'}, {'id': 387780283, 'number': 163, 'closed': datetime.datetime(2020, 3, 15, 17, 5, 32, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 3, 13, 13, 35, 22, tzinfo=datetime.timezone.utc), 'time_taken': 185410.0, 'time_delta': '2 days, 3:30:10', 'additions': 35, 'deletions': 41, 'state': 'closed'}, {'id': 382871106, 'number': 153, 'closed': datetime.datetime(2020, 3, 14, 12, 55, 8, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 3, 3, 10, 38, 6, tzinfo=datetime.timezone.utc), 'time_taken': 958622.0, 'time_delta': '11 days, 2:17:02', 'additions': 98, 'deletions': 1, 'state': 'closed'}, {'id': 373230893, 'number': 148, 'closed': datetime.datetime(2020, 2, 15, 17, 59, 20, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 2, 10, 16, 29, 32, tzinfo=datetime.timezone.utc), 'time_taken': 437388.0, 'time_delta': '5 days, 1:29:48', 'additions': 133, 'deletions': 1, 'state': 'closed'}, {'id': 364261975, 'number': 143, 'closed': datetime.datetime(2020, 1, 26, 17, 34, 28, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 1, 17, 18, 19, 14, tzinfo=datetime.timezone.utc), 'time_taken': 774914.0, 'time_delta': '8 days, 23:15:14', 'additions': 153, 'deletions': 23, 'state': 'closed'}, {'id': 356003141, 'number': 138, 'closed': datetime.datetime(2019, 12, 22, 14, 6, 2, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2019, 12, 21, 14, 3, 54, tzinfo=datetime.timezone.utc), 'time_taken': 86528.0, 'time_delta': '1 day, 0:02:08', 'additions': 7, 'deletions': 10, 'state': 'closed'}, {'id': 355558930, 'number': 137, 'closed': datetime.datetime(2019, 12, 20, 10, 29, 54, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2019, 12, 20, 6, 27, 25, tzinfo=datetime.timezone.utc), 'time_taken': 14549.0, 'time_delta': '4:02:29', 'additions': 3, 'deletions': 0, 'state': 'closed'}, {'id': 355239971, 'number': 135, 'closed': datetime.datetime(2019, 12, 19, 16, 47, 12, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2019, 12, 19, 16, 44, tzinfo=datetime.timezone.utc), 'time_taken': 192.0, 'time_delta': '0:03:12', 'additions': 1, 'deletions': 6, 'state': 'closed'}, {'id': 353193301, 'number': 133, 'closed': datetime.datetime(2019, 12, 19, 9, 41, 13, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2019, 12, 14, 17, 3, 46, tzinfo=datetime.timezone.utc), 'time_taken': 405447.0, 'time_delta': '4 days, 16:37:27', 'additions': 422, 'deletions': 425, 'state': 'closed'}]"
