pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
985744096,Implement `saveGif` as a native p5 function,"<!--
  Thank you for contributing! Please use this pull request (PR) template.


 In the description field of this PR, include ""resolves #XXXX"" tagging the issue you are fixing. If this PR addresses the issue but doesn't completely resolve it (ie the issue should remain open after your PR is merged), write ""addresses #XXXX"".-->

#### ðŸš§ This branch will be the work in progress for the implementation of the public `saveGif` function for the **'22 GSoC** edition. ðŸš§

# Save Gif

resolves #5118 

This PR **resolves issue #5118**, in which a thorough discussion is had about whether p5.js should include a native GIF encoding solution or not. 

## How it works
In the previously mentioned issue some proposals were discussed about how the interface for this functionality should be. The easiest I found to both implement and use was the following. The `saveGif` function admits at most 3 arguments for now:

```javascript
saveGif(filename, duration, delay)
```

- `filename` for the name of the file downloaded to your computer
- `duration` duration **in seconds** that you wish to download from your animation
- `delay` delay **in seconds** that you wish to wait before recording the animation. The animation will nevertheless have a duration of what you specified on the `duration` argument.

As an example, I think it is best to use it within the mouse/keyboard events:
```javascript
 function mousePressed() {
   if (mouseButton === RIGHT) {
     saveGif('mySketch', 3, 1);
   }
 }
```

This function will take all the current frames of the present animation, save them in a buffer and then proceed to generate a palette, apply this palette to every frame, optimize for transparency and encode it in a GIF blob, that will then force to download.

Functionality can be extended in lots of places but I believe that the current state works very conveniently by adding just 3 extra lines of familiar code. I plan on keep contributing to this functionality even after the GSoC to make it as convenient as possible.

 ## Changes
<!-- Add here what changes were made in this pull request and if possible provide links showcasing the changes. -->

1. Most important change is in [src/image/loading_displaying.js](https://github.com/jesi-rgb/p5.js/blob/ae03db0c62863387933f5dfd88ed3cb7dfbde411/src/image/loading_displaying.js), which is where the main `saveGif` function lives. Alongside this function, the functions `_generateGlobalPalette` and `_pixelEquals` were also added.
2. Second important change is in [src/image/image.js](https://github.com/jesi-rgb/p5.js/blob/73acfb183744179ea03a5f8f8e6bd1778205b6d7/src/image/image.js), where the old `saveGif` function was renamed to a more obscure and explicit `encodeAndDownloadGif`.
	1. Alongside this change, the file [src/image/p5.Image.js](https://github.com/jesi-rgb/p5.js/blob/73acfb183744179ea03a5f8f8e6bd1778205b6d7/src/image/p5.Image.js) was also changed to consider this new function name.
	2. Same goes with the test [test/unit/image/downloading.js](https://github.com/jesi-rgb/p5.js/blob/629d7448d4dc0cf562bc9214ab6cc76d04f5a680/test/unit/image/downloading.js), which was updated to evaluate the `encodeAndDownloadGif` function.

### âš  Some other changes
Some other changes were made for the sake of either speed or convenience. These changes are completely opinionated and may include breaking changes that I may not be aware of, so please consider them carefully. 

1. The `package.json` file is modified to include the package [gifenc](https://www.npmjs.com/package/gifenc), created by [Matt DesLauriers](https://twitter.com/mattdesl). He personally reached out to me regarding this topic and it turns out that the package includes two key functions that make the GIF rendering not only much easier, but also much faster.
	1. Naturally, the `package-lock.json` file also changes.
2. The `Gruntfile.js` is also changed. In order to include Matt's package, we needed to first compile the javascript code to babel code, before _uglifying_ it. The uglify module wouldn't process the ES6 notation for some reason, although I've seen in some places that the project is already accounting for that. That is the `babel` module that appears in lines like `grunt.loadNpmTasks('grunt-babel');`
	1. Also, the `ecmaVersion` wouldn't pass the `npm run build` nor `npm run lint` nor any other command of this kind altogether. So I bumped up the version to 8 and it seems to be working fine.

Again, all these changes are considered from a rather ignorant and novel standpoint, so maybe I am making very questionable decisions here. I ask the community to pay special attention here, though it does not need to be said that I will try my best for this to be as close to perfect as it can be.
	
	


 ## Screenshots of the change:
<!-- If applicable, add screenshots depicting the changes. -->

These are some screenshots of the tool in use. We wrote the function keyPressed and we are tracking the 's' key. When pressed, a gif will be rendered and downloaded. A beautiful sketch by @TomasMiskov is presented.

![SCR-20220808-ixh](https://user-images.githubusercontent.com/50735312/183411389-36373e7b-b7b6-4377-bbb1-ab4d50762fd8.png)

During the saving and rendering, a little paragraph appears indicating the progress. I feel like this is very important since, even though it usually only takes a couple of seconds, a couple of seconds in web time is an almost infinite amount of time.

![SCR-20220808-ixk](https://user-images.githubusercontent.com/50735312/183411401-6e4b16bc-1ff0-410b-9c72-a7c17f537a7a.png)

The resulting gif is presented here, just shy over 1MB in size: 
![mySketch (36)](https://user-images.githubusercontent.com/50735312/183409902-2b060699-b72f-479b-9885-51b4be001fd7.gif)



## PR Checklist
<!--
  To check any option, replace the ""[ ]"" with a ""[x]"". Be sure to check out how it looks in the Preview tab! Feel free to remove any portion of the template that is not relevant for your issue.
-->

- [x] `npm run lint` passes
- [x] [Inline documentation] is included / updated
- [x] [Unit tests] are included / updated

[Inline documentation]: https://github.com/processing/p5.js/blob/main/contributor_docs/inline_documentation.md
[Unit tests]: https://github.com/processing/p5.js/tree/main/contributor_docs#unit-tests
",True,5709,https://api.github.com/repos/processing/p5.js/pulls/5709,https://github.com/processing/p5.js/pull/5709,closed,491,15,10,64,8,51,0,0,[],2022-07-03 15:05:28+00:00,2022-09-05 20:52:05+00:00,5550397.0,"64 days, 5:46:37","[{'comment_id': 944451900, 'comment_body': 'This is a clever way to keep the UI updating, nice!', 'comment_created': datetime.datetime(2022, 8, 12, 13, 15, 42, tzinfo=datetime.timezone.utc), 'commenter': 'davepagurek', 'type': 'User'}, {'comment_id': 944451946, 'comment_body': ""Since `p` is already a number, I think you can use `Math.floor()` instead of `parseInt()`. Although since `p` is iterating by 4, I think maybe we don't need to do anything extra to ensure it's an integer here?"", 'comment_created': datetime.datetime(2022, 8, 12, 13, 15, 45, tzinfo=datetime.timezone.utc), 'commenter': 'davepagurek', 'type': 'User'}, {'comment_id': 944455863, 'comment_body': ""I think there's a slight performance cost to getting and storing the pixels array each frame. This is fine for sketches that use `frameCount`, but for ones that use `millis()` (so they drop frames to keep timing correct rather than letting timing slow down to not drop frames), do you think it's worth changing how `millis()` works while saving a gif? We could use fake time increments so the sketch thinks only `1000/targetFrameRate` milliseconds pass each frame to ensure the resulting gif doesn't look sped up because it took slightly longer than usual to render each frame. (Maybe this could be something for a follow-up PR since even without that, gif saving is super useful)"", 'comment_created': datetime.datetime(2022, 8, 12, 13, 20, 27, tzinfo=datetime.timezone.utc), 'commenter': 'davepagurek', 'type': 'User'}, {'comment_id': 944602126, 'comment_body': ""I had no idea `millis()` worked like that! As for your question, I am not sure what to do about it.\r\n\r\nAnother related thing is that the delay functionality implemented will only work with sketches that use `frameCount`, as you said. I had a sketch from a friend that just updated the speed from some particles by adding up a value each frame and, since the simulation was not depending on the `frameCount` value, it just does nothing. \r\n\r\nAlthough it doesn't break, it does not behave as expected but have no idea how to solve it. :/"", 'comment_created': datetime.datetime(2022, 8, 12, 15, 54, 30, tzinfo=datetime.timezone.utc), 'commenter': 'jesi-rgb', 'type': 'User'}, {'comment_id': 946304383, 'comment_body': 'i came across *babelify*, which seems to be compatible with existing bundler technology *browserify*.\r\n\r\nWe need a good walkthrough why we are not using babelify and instead simply using babel directly.', 'comment_created': datetime.datetime(2022, 8, 16, 3, 28, 16, tzinfo=datetime.timezone.utc), 'commenter': 'endurance21', 'type': 'User'}, {'comment_id': 946307134, 'comment_body': ' [here](https://github.com/processing/p5.js/blob/ae8fe7554e40094d7aedd4e7ee0782b8d9dc447e/package.json#L44) we already use a library called babelify, which is i believe capable of transpiling the ecma versions.\r\n\r\nwhy dont we take advantage of already setup tool like this instead adding *grunt-bable* as some new dependecy.\r\n\r\n', 'comment_created': datetime.datetime(2022, 8, 16, 3, 36, 56, tzinfo=datetime.timezone.utc), 'commenter': 'endurance21', 'type': 'User'}, {'comment_id': 946310620, 'comment_body': 'the *seconds* parameters being initilized to 3 seconds does not make it intuitive for both developers as well as the consumers of this api.\r\n\r\nwe can have more options, like :\r\n1. dont initlize the parameter and instead a check to this parameter to ensure it is being passed by consumer itself.\r\n\r\n', 'comment_created': datetime.datetime(2022, 8, 16, 3, 47, 24, tzinfo=datetime.timezone.utc), 'commenter': 'endurance21', 'type': 'User'}, {'comment_id': 946310852, 'comment_body': 'also do we mind to keep this seconds argument as integer?', 'comment_created': datetime.datetime(2022, 8, 16, 3, 47, 58, tzinfo=datetime.timezone.utc), 'commenter': 'endurance21', 'type': 'User'}, {'comment_id': 946311263, 'comment_body': 'is there any particular reason we did not  use Math.floor() and used Math.ceil() instead?', 'comment_created': datetime.datetime(2022, 8, 16, 3, 49, 10, tzinfo=datetime.timezone.utc), 'commenter': 'endurance21', 'type': 'User'}, {'comment_id': 946311477, 'comment_body': 'i believe global variable initialization is not we encourage?\r\nwe can keep it to `let` or ` const` as per uses.', 'comment_created': datetime.datetime(2022, 8, 16, 3, 49, 48, tzinfo=datetime.timezone.utc), 'commenter': 'endurance21', 'type': 'User'}, {'comment_id': 946313448, 'comment_body': 'I think this will bring coupling of concerns.\r\n\r\nsaveGif() api will be used to various platforms and we are not sure there will a progressBar present, if we have to show the progress, we can opt for the methods which will result in less coupling and very generic in nature.\r\n\r\nwe can exposer  a callback  argument in order to keep track of progress.\r\n```js\r\nsaveGif(name, seconds, delay, progressCallback)\r\n```\r\n\r\n', 'comment_created': datetime.datetime(2022, 8, 16, 3, 55, 16, tzinfo=datetime.timezone.utc), 'commenter': 'endurance21', 'type': 'User'}, {'comment_id': 946315799, 'comment_body': ' ðŸš§   this might be a serious breaking point, we have to take care of it    ðŸš§', 'comment_created': datetime.datetime(2022, 8, 16, 4, 0, 53, tzinfo=datetime.timezone.utc), 'commenter': 'endurance21', 'type': 'User'}, {'comment_id': 946316995, 'comment_body': 'can we add more checks of downloaded gif parameters?\r\nsomething like this pseudoCode \r\n```js\r\nlet gif= saveGif(filename, seconds, delay) ;\r\n\r\nassert(gif.properties.duration === seconds )\r\n\r\n```', 'comment_created': datetime.datetime(2022, 8, 16, 4, 4, 18, tzinfo=datetime.timezone.utc), 'commenter': 'endurance21', 'type': 'User'}, {'comment_id': 946690318, 'comment_body': ""We probably shouldn't force it to be an integer in case, for example, we have a perfect loop in 90 frames, or 1.5s. (Although I think forcing it to be an integer would make sense if we use frames as a unit instead of seconds, which could also be an option)"", 'comment_created': datetime.datetime(2022, 8, 16, 12, 3, 4, tzinfo=datetime.timezone.utc), 'commenter': 'davepagurek', 'type': 'User'}, {'comment_id': 947525849, 'comment_body': ""So sorry! Missed that one. I'll check if babelify works and remove babel!"", 'comment_created': datetime.datetime(2022, 8, 17, 7, 5, 33, tzinfo=datetime.timezone.utc), 'commenter': 'jesi-rgb', 'type': 'User'}, {'comment_id': 947528208, 'comment_body': 'Using frames as units is incredibly useful for advanced users and not intuitive for newcomers. Having the ability to switch between the two seems ideal. How do we do that? Using another argument like `frameUnits = true`?', 'comment_created': datetime.datetime(2022, 8, 17, 7, 8, 31, tzinfo=datetime.timezone.utc), 'commenter': 'jesi-rgb', 'type': 'User'}, {'comment_id': 947530137, 'comment_body': 'Just because I thought it was a bit more convenient to have some extra frames (because ceil rounded to higher integer). If you have extra unnecessary frames, you can drop them down easily, but if you missed the last frames, you need to re-render the whole thing again.\r\n\r\nDoes it make sense? Or is it better to floor it?', 'comment_created': datetime.datetime(2022, 8, 17, 7, 10, 51, tzinfo=datetime.timezone.utc), 'commenter': 'jesi-rgb', 'type': 'User'}, {'comment_id': 947530990, 'comment_body': ""Being honest, that was at a very early stage and didn't know much of the difference between let and var, haha. Will fix it immediately!"", 'comment_created': datetime.datetime(2022, 8, 17, 7, 11, 54, tzinfo=datetime.timezone.utc), 'commenter': 'jesi-rgb', 'type': 'User'}, {'comment_id': 947532724, 'comment_body': 'Sounds good! But how would the `progressCallback` function work? Return the number of frames that we already processed and let the user do whatever they want with that info?', 'comment_created': datetime.datetime(2022, 8, 17, 7, 14, tzinfo=datetime.timezone.utc), 'commenter': 'jesi-rgb', 'type': 'User'}, {'comment_id': 947534694, 'comment_body': ""I made sure to substitute the old `saveGif` function with the `encodeAndDownloadGif`, which is the original function that was already present in the repo. Even the tests were considered. This ensures backwards compatibility with all the code.\r\n\r\nI am just following the discussion at #5118, where they start with this:\r\n> To enable this feature, we would have to add a separate public method (probably saveGif and the private one would be renamed)\r\n\r\nIt indeed is risky though! I'll keep close attention to that!"", 'comment_created': datetime.datetime(2022, 8, 17, 7, 16, 19, tzinfo=datetime.timezone.utc), 'commenter': 'jesi-rgb', 'type': 'User'}, {'comment_id': 947538707, 'comment_body': ""Sure! I just couldn't think of more tests at the time, but I'll add as much as I can."", 'comment_created': datetime.datetime(2022, 8, 17, 7, 20, 43, tzinfo=datetime.timezone.utc), 'commenter': 'jesi-rgb', 'type': 'User'}, {'comment_id': 947826841, 'comment_body': 'After an extensive session of researching how to make babelify transpile the ES6 code to ES5, I could not get it to work. I don\'t know if I am doing something wrong.\r\n\r\nWith the `grunt-babel` package, the `grunt` command runs no problem. Without it, the uglify module spits out a problem saying ""`Unexpected token: \'>\'`"", which comes from the fact that there are some arrow functions in the code that should, by that point, been already transpiled to ES5 (no arrow functions). Either we can see how to make it work (I am probably missing something) or leave this as is, as it is a well-known, maintained package.', 'comment_created': datetime.datetime(2022, 8, 17, 11, 44, 30, tzinfo=datetime.timezone.utc), 'commenter': 'jesi-rgb', 'type': 'User'}, {'comment_id': 947922058, 'comment_body': ""Maybe adding an optional object with extra options at the end? e.g.:\r\n```js\r\nfunction(fileName, time, { delay = 0, units = 'seconds' }) {\r\n  const frames = units === 'seconds' ? time * 60 : time\r\n  // etc\r\n}\r\n\r\n// Usage:\r\nsaveGif('test.gif', 30, { units: 'frames' })\r\n```\r\n\r\nMight make it easier to read at call sites with the key: value syntax rather than having `true` as a parameter without extra context around it. P5 does something similar when there are advanced options, e.g. in `textToPoints`: https://p5js.org/reference/#/p5.Font/textToPoints"", 'comment_created': datetime.datetime(2022, 8, 17, 13, 20, 16, tzinfo=datetime.timezone.utc), 'commenter': 'davepagurek', 'type': 'User'}, {'comment_id': 947933280, 'comment_body': 'Oh interesting, do you have a link to that sketch or an example that works similarly?\r\n\r\nAlso for `millis`, I think a solution would be, when we start recording, to replace the implementation of `millis` with a fake implementation. something like:\r\n```js\r\n// Replace with a fake implementation\r\nconst oldMillis = p5.prototype.millis\r\nlet time = millis()\r\np5.prototype.millis = () => time\r\n\r\nwhile (count < nFrames + nFramesDelay) {\r\n  time += 1000 / this._targetFrameRate // Fake time increment\r\n  // render the frame here\r\n}\r\n\r\n// Put the old function back\r\np5.prototype.millis = oldMillis\r\n```', 'comment_created': datetime.datetime(2022, 8, 17, 13, 28, 25, tzinfo=datetime.timezone.utc), 'commenter': 'davepagurek', 'type': 'User'}, {'comment_id': 948003212, 'comment_body': 'Sounds ideal!', 'comment_created': datetime.datetime(2022, 8, 17, 14, 20, 43, tzinfo=datetime.timezone.utc), 'commenter': 'jesi-rgb', 'type': 'User'}, {'comment_id': 948173191, 'comment_body': 'yes definetly makes sense. @jesi-rgb we can do that !', 'comment_created': datetime.datetime(2022, 8, 17, 16, 26, 22, tzinfo=datetime.timezone.utc), 'commenter': 'endurance21', 'type': 'User'}, {'comment_id': 948175285, 'comment_body': 'given the main focus is on the gif and its appearence, i think an extra frame wont be producing much glitch.\r\nwe can go with it.', 'comment_created': datetime.datetime(2022, 8, 17, 16, 28, 30, tzinfo=datetime.timezone.utc), 'commenter': 'endurance21', 'type': 'User'}, {'comment_id': 948176468, 'comment_body': 'no problem.\r\nalways on for better !', 'comment_created': datetime.datetime(2022, 8, 17, 16, 29, 18, tzinfo=datetime.timezone.utc), 'commenter': 'endurance21', 'type': 'User'}, {'comment_id': 948178822, 'comment_body': 'yes, we shall do that.\r\n\r\nbut it has a downside as well , suppose if someone passes a callback function which is taking too much to finish, that would slow down the our processing too.\r\n', 'comment_created': datetime.datetime(2022, 8, 17, 16, 31, 27, tzinfo=datetime.timezone.utc), 'commenter': 'endurance21', 'type': 'User'}, {'comment_id': 948182091, 'comment_body': 'can you please make a gist of what this function is doing  and  how your replacement does not affects  this functionality in terms of programming.\r\n\r\nalso did you run every examples using this function, perhaps this would be present in examples folder!\r\n\r\n\r\n\r\n', 'comment_created': datetime.datetime(2022, 8, 17, 16, 34, 52, tzinfo=datetime.timezone.utc), 'commenter': 'endurance21', 'type': 'User'}, {'comment_id': 948182548, 'comment_body': 'sure, keep up the good work , eh!', 'comment_created': datetime.datetime(2022, 8, 17, 16, 35, 23, tzinfo=datetime.timezone.utc), 'commenter': 'endurance21', 'type': 'User'}, {'comment_id': 948847314, 'comment_body': '# Main problem\r\nTo understand the main problem, let me explicitly state it here. The current build pipeline takes all the code and runs `browserify` on it, which makes a single file, and that is passed on to `uglify`, which makes it very small, browser ready.\r\n\r\n\r\n`Uglify` does not understand ES6 code, so it needs to be transpiled before it gets here. This is `browserify\'s` (and more specifically,`babelify\'s`) job. `Browserify` can be coupled with babelify to transpile between javascript versions before compiling and bundling. \r\n\r\n# Babelify and options\r\nInside the `tasks/build/browserify.js` file we have, among other things, this important variable:\r\n\r\n```javascript\r\nconst babelifyOpts = {\r\n  // add some options\r\n  plugins: [\'static-fs\']\r\n};\r\n```\r\n\r\nwhich lets us modify the behaviour of `babelify`. As of right now, it only has a plugin called `static-fs`, which converts all asynchronous file system calls to their ""hardcoded"" version, statically inlining these calls.\r\n\r\nWe can pass in more options to change the behaviour:\r\n\r\n```javascript\r\nconst babelifyOpts = {\r\n  // add some options\r\n  plugins: [\'static-fs\'],\r\n  presets: [\'@babel/preset-env\'],\r\n  global: true,\r\n};\r\n```\r\n\r\nThis uses the `present-env` preset, recommended for our use case and the `global` option tells `babelify` to also process and transpile code coming from `node_modules`. The default behavior does not do that.\r\n\r\n# No solution found\r\n\r\nAfter playing with every combination, some problem arises.\r\n\r\n- If we don\'t include `global`, we cannot have `node_modules` transpiling so future dependencies from other contributors that also work similarly to `gifenc` won\'t work during build time.\r\n- If we don\'t include the `static-fs`, `mochaChrome` breaks:\r\n```javascript\r\nRunning ""mochaChrome:yui"" (mochaChrome) task\r\np5.js translator called before translations were loaded\r\np5.js translator called before translations were loaded\r\n[stuck here forever]\r\n```\r\n- Including `static-fs` AND `global` breaks the `static-fs` since it cannot compile other libraries (like `opentype`) with their file calls.\r\n```javascript\r\nFatal error: /Users/jesi/repositorios/p5.js/node_modules/opentype.js/dist/opentype.js: Not able to statically evaluate the expression(s) for babel-plugin-static-fs.\r\nTry changing your source code to something that can be evaluated at build-time, e.g.\r\n    const src = fs.readFileSync(__dirname + \'/foo.txt\', \'utf8\');\r\n while parsing file: /Users/jesi/repositorios/p5.js/node_modules/opentype.js/dist/opentype.js\r\n```\r\n\r\n# My initial solution\r\nInitially, I simply included the `grunt-babel` option since the main problem was I could not get `Uglify` to work. This worked fine immediately, albeit not knowing why and not knowing that `babelify` was already present.\r\n\r\nFor what it\'s worth, the `grunt-babel` has not given absolutely any problem, since it is set after the `browserify` task which means it gets to transpile the already bundled app. I believe this can open a door for future contributors that won\'t have to deal with this topic but just develop a better experience for p5.js.\r\n\r\nIf this is not enough to justify the `grunt-babel` inclusion, my only guess is that I should not include `gifenc` at all and figure out another way of using that code. Totally open for discussion!', 'comment_created': datetime.datetime(2022, 8, 18, 9, 4, 50, tzinfo=datetime.timezone.utc), 'commenter': 'jesi-rgb', 'type': 'User'}, {'comment_id': 949007309, 'comment_body': '`encodeAndDownloadGif` is exactly the same function that was before, just that it was called `saveGif`. They call it as _private_, in the sense that the normal users won\'t know about the function. \r\n\r\nThat\'s why it does not appear in the documentation (as of right now, of course), and that\'s why there are no examples. This was an utility function that\'s used on the publicly available `save()` function, as a wrapper for an all purpose save solution.\r\n<img width=""400"" alt=""image"" src=""https://user-images.githubusercontent.com/50735312/185383232-f8ef1271-d8f8-44c4-b65f-dc5f9838d1c8.png"">\r\n\r\nI simply changed the name from `saveGif` to `encodeAndDownloadGif` and also changed every ocurrence of that throughout the repo. \r\n\r\n', 'comment_created': datetime.datetime(2022, 8, 18, 11, 21, 47, tzinfo=datetime.timezone.utc), 'commenter': 'jesi-rgb', 'type': 'User'}, {'comment_id': 950808653, 'comment_body': 'taking jesus solution as of now and moving ahead...', 'comment_created': datetime.datetime(2022, 8, 21, 8, 35, 39, tzinfo=datetime.timezone.utc), 'commenter': 'endurance21', 'type': 'User'}, {'comment_id': 950809181, 'comment_body': 'since the second argument is signifying both time and number of frame, is it okay to name it as duration? \r\n\r\nhow about, `count` or `number` ?', 'comment_created': datetime.datetime(2022, 8, 21, 8, 39, 30, tzinfo=datetime.timezone.utc), 'commenter': 'endurance21', 'type': 'User'}, {'comment_id': 950809432, 'comment_body': 'progressBar sounds so common name, lets name it something that would be unique that perhaps user wont be using .\r\n\r\n\r\nsomething like - p5.gif.progressBar\r\n', 'comment_created': datetime.datetime(2022, 8, 21, 8, 41, 7, tzinfo=datetime.timezone.utc), 'commenter': 'endurance21', 'type': 'User'}, {'comment_id': 950809738, 'comment_body': '\r\n1. count variable is not intuitive ( what type of count ?) \r\n2. nframes+ nFrameDelay is making this less perciveable,cannot we make another variable and name it significantly like let xyz = a +b , whree xyz would be some intuitive name rather than writing a+b.\r\n', 'comment_created': datetime.datetime(2022, 8, 21, 8, 43, 39, tzinfo=datetime.timezone.utc), 'commenter': 'endurance21', 'type': 'User'}, {'comment_id': 950810173, 'comment_body': 'cannot we let the loop run as it is and meanwhile we extract the pixel colors ?\r\nusing this maybe - https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API/Tutorial/Pixel_manipulation_with_canvas', 'comment_created': datetime.datetime(2022, 8, 21, 8, 46, 51, tzinfo=datetime.timezone.utc), 'commenter': 'endurance21', 'type': 'User'}, {'comment_id': 950810203, 'comment_body': 'same as above', 'comment_created': datetime.datetime(2022, 8, 21, 8, 47, 5, tzinfo=datetime.timezone.utc), 'commenter': 'endurance21', 'type': 'User'}, {'comment_id': 950811240, 'comment_body': '`Count` or `number` are, in my honest opinion, more confusing. In the end, the animation will have a duration of either 30 seconds or 30 frames, which, I think, is understood correctly. Also, the default behaviour is seconds, so those who do not mess with the options will be comfortable. \r\n\r\nWhat do you think?', 'comment_created': datetime.datetime(2022, 8, 21, 8, 54, 56, tzinfo=datetime.timezone.utc), 'commenter': 'jesi-rgb', 'type': 'User'}, {'comment_id': 950811307, 'comment_body': 'Sounds great, will fix it ASAP!', 'comment_created': datetime.datetime(2022, 8, 21, 8, 55, 13, tzinfo=datetime.timezone.utc), 'commenter': 'jesi-rgb', 'type': 'User'}, {'comment_id': 950811625, 'comment_body': 'We are doing exactly what you say! We are enabling the loop back just before extracting the pixel colors and start encoding.\r\n\r\nWhat we cannot do is loop while recording the frames, because we need all the frames in order, one by one, and we extract the frame information from the current Canvas context. ', 'comment_created': datetime.datetime(2022, 8, 21, 8, 57, 33, tzinfo=datetime.timezone.utc), 'commenter': 'jesi-rgb', 'type': 'User'}, {'comment_id': 950818106, 'comment_body': 'Oh that make sense a lot!\r\nGreat !', 'comment_created': datetime.datetime(2022, 8, 21, 9, 49, 56, tzinfo=datetime.timezone.utc), 'commenter': 'endurance21', 'type': 'User'}, {'comment_id': 950831942, 'comment_body': 'yes, lets make it more user friendly.\r\nWe will go with the current name then.', 'comment_created': datetime.datetime(2022, 8, 21, 11, 42, 1, tzinfo=datetime.timezone.utc), 'commenter': 'endurance21', 'type': 'User'}, {'comment_id': 951338002, 'comment_body': '> if someone passes a callback function which is taking too much to finish, that would slow down the our processing too.\r\n\r\nIt could be good to add a little warning about this in the documentation for the method. Maybe something like: ""the next frame is only recorded when the progress callback is finished, so placing heavy computation in it may slow down exports.""', 'comment_created': datetime.datetime(2022, 8, 22, 11, 43, 33, tzinfo=datetime.timezone.utc), 'commenter': 'davepagurek', 'type': 'User'}, {'comment_id': 951340671, 'comment_body': 'I think it would be possible to use the existing `loop()`, but I believe that would require augmenting `draw()` to keep track of the export frame count, and to record a frame at the end of each export frame. That said, I think I personally prefer this method where we manually call `redraw()`, as it keeps `draw()` simple and also it means you can read the gif saving function more easily without having to jump around the codebase to see the data flow.', 'comment_created': datetime.datetime(2022, 8, 22, 11, 46, 49, tzinfo=datetime.timezone.utc), 'commenter': 'davepagurek', 'type': 'User'}, {'comment_id': 958787395, 'comment_body': 'I am wondering if it is good to set the system variable from here? and also could you please elaborate why it is necessary ?', 'comment_created': datetime.datetime(2022, 8, 30, 18, 8, 42, tzinfo=datetime.timezone.utc), 'commenter': 'endurance21', 'type': 'User'}, {'comment_id': 958934803, 'comment_body': '`frameCount` is a variable exposed by the p5.js library upon instancing. Accesing `frameCount` returns the index of the frame we are currently in, and we can overwrite it in order to _travel_ to a given frame.\r\n\r\nThis is part of the delay feature. We calculate how many frames we should wait for before recording. Imagine setting `delay = 3`, which makes it `3 * 60 = 180` (assuming a frameRate of 60). We have to wait until frame 180 to start recording. Cool, simply set `frameCount = 180` and then keep on as usual. \r\n\r\nThis also makes sure that the user, if `delay = 0`, can record their sketch from the very beginning without extra hassle, since this would effectively set `frameCount = 0`, even if the animation has already started.', 'comment_created': datetime.datetime(2022, 8, 30, 21, 13, 37, tzinfo=datetime.timezone.utc), 'commenter': 'jesi-rgb', 'type': 'User'}, {'comment_id': 959003548, 'comment_body': ""Btw, could this be related to the sketch you mentioned earlier that doesn't work correctly when recording? If a sketch depends partially on `frameCount` but also has some updates that don't (e.g. a physics simulation that updates each `draw()`), I wonder if rewinding `frameCount` might put the sketch into an unexpected state. Maybe there should be a way to keep counting from the current state? e.g. passing `undefined` instead of a number?"", 'comment_created': datetime.datetime(2022, 8, 30, 23, 4, 31, tzinfo=datetime.timezone.utc), 'commenter': 'davepagurek', 'type': 'User'}, {'comment_id': 959239609, 'comment_body': ""Yes, it probably will do that. But for sketches not based on that, I cannot think of a way to somehow attach their time component to something. \r\n\r\nI don't know how other systems approach this, but I thought at least we could have support for those who use `frameCount` as a way of dealing with time, since it is a common practice in shader languages. I myself find using it a lot, and also learned about it in some Coding Train video, which may increase the chance of people using it.\r\n\r\nThis does not solve the problem at all, of course, but at least we are considering a subset of the users for this matter.\r\n\r\nI don't know if implementing a robust solution for every sketch is very difficult, but being already familiar with the codebase, I can work on improving it over the next year independently of GSoC or other events, if I can find a way to do it!"", 'comment_created': datetime.datetime(2022, 8, 31, 7, 18, 56, tzinfo=datetime.timezone.utc), 'commenter': 'jesi-rgb', 'type': 'User'}, {'comment_id': 959504923, 'comment_body': ""For sure! I think just supporting frameCount for now is totally fine, as long as we leave space in the API to support other things in the future without breaking older code. So the future uses to consider are:\r\n- sketches that rely on state updates in `draw()`: I did some tests, it seems like doing state updates in `draw()` works fine for gif recording! so this is handled already\r\n- sketches that rely on `millis()`: that can be done later if we provide a mock implementation of `millis`, which won't affect any of the code you've already written, so everything's good here for this PR!\r\n- sketches that mix `frameCount` with state updates (or `millis()`): the only issue is that rewinding will bring `frameCount` out of sync with the others. If we don't rewind, then they're in sync. We don't have to support no rewinding in this PR, e.g. in the future we could support it by supplying `delay: undefined` and removing the check to ensure it's a number. If that looks ok, then everything here is good without changes ðŸ™‚  I just want to make sure we're aware of it in case there's a different API we want for it in the future"", 'comment_created': datetime.datetime(2022, 8, 31, 12, 8, 32, tzinfo=datetime.timezone.utc), 'commenter': 'davepagurek', 'type': 'User'}]","[{'commit_sha': '6f43aa8a01a708dd4b6a4ed2455ab275b78df5e4', 'committer_username': 'jesi-rgb', 'committer_name': 'JesÃºs Enrique RascÃ³n', 'committer_email': 'blograso@gmail.com', 'commit_date': datetime.datetime(2019, 5, 17, 8, 48, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b19d572dd1442c5145c4d8463374a5c0b44e37cf', 'committer_username': 'jesi-rgb', 'committer_name': 'JesÃºs Enrique RascÃ³n', 'committer_email': 'blograso@gmail.com', 'commit_date': datetime.datetime(2019, 5, 17, 8, 48, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': '228ae550e4e7364732360eef4459138d54042a05', 'committer_username': 'jesi-rgb', 'committer_name': 'JesÃºs Enrique RascÃ³n', 'committer_email': 'blograso@gmail.com', 'commit_date': datetime.datetime(2019, 5, 17, 8, 48, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': '98be55f3ac4487c28452957c8a8e93a70a409bd8', 'committer_username': 'jesi-rgb', 'committer_name': 'JesÃºs Enrique RascÃ³n', 'committer_email': 'blograso@gmail.com', 'commit_date': datetime.datetime(2019, 5, 17, 8, 48, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f84cedc894629e9f87c9b36db18e5260bb9dcbbb', 'committer_username': 'jesi-rgb', 'committer_name': 'JesÃºs Enrique RascÃ³n', 'committer_email': 'blograso@gmail.com', 'commit_date': datetime.datetime(2019, 5, 17, 8, 48, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': '99d1a0e1b0a31732fe8a228b9627b4e8871ac605', 'committer_username': 'jesi-rgb', 'committer_name': 'JesÃºs Enrique RascÃ³n', 'committer_email': 'blograso@gmail.com', 'commit_date': datetime.datetime(2019, 5, 17, 8, 48, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4f0b3f65c663d5dca755526ce352a3f5b5012a41', 'committer_username': 'jesi-rgb', 'committer_name': 'JesÃºs Enrique RascÃ³n', 'committer_email': 'blograso@gmail.com', 'commit_date': datetime.datetime(2019, 5, 17, 8, 48, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9f066e08cc06730ec39ea420ecda720c32431419', 'committer_username': 'jesi-rgb', 'committer_name': 'JesÃºs Enrique RascÃ³n', 'committer_email': 'blograso@gmail.com', 'commit_date': datetime.datetime(2019, 5, 17, 8, 48, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fb8af2d818e9ba36cd74a94f67566eb23e6ae3e2', 'committer_username': 'jesi-rgb', 'committer_name': 'JesÃºs Enrique RascÃ³n', 'committer_email': 'blograso@gmail.com', 'commit_date': datetime.datetime(2019, 5, 17, 8, 48, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7f158a78b071c5bd39d742cf08aea92dbee6e375', 'committer_username': 'jesi-rgb', 'committer_name': 'JesÃºs Enrique RascÃ³n', 'committer_email': 'blograso@gmail.com', 'commit_date': datetime.datetime(2019, 5, 17, 8, 48, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2674e40248536efef623c177ab9000a4f6586990', 'committer_username': 'jesi-rgb', 'committer_name': 'JesÃºs Enrique RascÃ³n', 'committer_email': 'blograso@gmail.com', 'commit_date': datetime.datetime(2019, 5, 17, 8, 48, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': '99def1eaf0d8f75c93f93cbd0b716411c8ff0993', 'committer_username': 'jesi-rgb', 'committer_name': 'JesÃºs Enrique RascÃ³n', 'committer_email': 'blograso@gmail.com', 'commit_date': datetime.datetime(2019, 5, 17, 8, 48, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f7c3a87b0d58fced2852d1a758a2226ac3159901', 'committer_username': 'jesi-rgb', 'committer_name': 'JesÃºs Enrique RascÃ³n', 'committer_email': 'blograso@gmail.com', 'commit_date': datetime.datetime(2019, 5, 17, 8, 48, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0decfc05b011ebc2c08bd84acbe5c9efebc7dd06', 'committer_username': 'jesi-rgb', 'committer_name': 'JesÃºs Enrique RascÃ³n', 'committer_email': 'blograso@gmail.com', 'commit_date': datetime.datetime(2019, 5, 17, 8, 48, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8d1d93490b67be9780eec9e3ece9e4a70f2146a8', 'committer_username': 'jesi-rgb', 'committer_name': 'JesÃºs Enrique RascÃ³n', 'committer_email': 'blograso@gmail.com', 'commit_date': datetime.datetime(2019, 5, 17, 8, 48, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6928988db407296a14856e98915a528b714fe2c6', 'committer_username': 'jesi-rgb', 'committer_name': 'JesÃºs Enrique RascÃ³n', 'committer_email': 'blograso@gmail.com', 'commit_date': datetime.datetime(2019, 5, 17, 8, 48, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': '739385cb6b1cde0952513b0a57c7187766e15e0d', 'committer_username': 'jesi-rgb', 'committer_name': 'JesÃºs Enrique RascÃ³n', 'committer_email': 'blograso@gmail.com', 'commit_date': datetime.datetime(2019, 5, 17, 8, 48, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': '07ba8a444f2b6223620b61ec8fcb1e9f76c61a14', 'committer_username': 'jesi-rgb', 'committer_name': 'JesÃºs Enrique RascÃ³n', 'committer_email': 'blograso@gmail.com', 'commit_date': datetime.datetime(2019, 5, 17, 8, 48, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e13735566be0b1c48456110c6406ca109a3a92db', 'committer_username': 'jesi-rgb', 'committer_name': 'JesÃºs Enrique RascÃ³n', 'committer_email': 'blograso@gmail.com', 'commit_date': datetime.datetime(2019, 5, 17, 8, 48, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6632a24e688911bd5c15fbb8cf97074b723d683a', 'committer_username': 'jesi-rgb', 'committer_name': 'JesÃºs Enrique RascÃ³n', 'committer_email': 'blograso@gmail.com', 'commit_date': datetime.datetime(2019, 5, 17, 8, 48, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': '10dc92627d614285716ddf2f24f12c1f972b0e51', 'committer_username': 'jesi-rgb', 'committer_name': 'JesÃºs Enrique RascÃ³n', 'committer_email': 'blograso@gmail.com', 'commit_date': datetime.datetime(2019, 5, 17, 8, 48, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b495c6798b629675535a7772d10561a6712f7a18', 'committer_username': 'jesi-rgb', 'committer_name': 'JesÃºs Enrique RascÃ³n', 'committer_email': 'blograso@gmail.com', 'commit_date': datetime.datetime(2019, 5, 17, 8, 48, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f46d0eb5b49ea2ca7628a81be55c3000968454db', 'committer_username': 'jesi-rgb', 'committer_name': 'JesÃºs Enrique RascÃ³n', 'committer_email': 'blograso@gmail.com', 'commit_date': datetime.datetime(2019, 5, 17, 8, 48, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f775062ecf02e095bc330807c3fdcf92f7c80f22', 'committer_username': 'jesi-rgb', 'committer_name': 'JesÃºs Enrique RascÃ³n', 'committer_email': 'blograso@gmail.com', 'commit_date': datetime.datetime(2019, 5, 17, 8, 48, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f9e4735d86056b3a203b920a2b72dcc6cbc2391c', 'committer_username': 'jesi-rgb', 'committer_name': 'JesÃºs Enrique RascÃ³n', 'committer_email': 'blograso@gmail.com', 'commit_date': datetime.datetime(2019, 5, 17, 8, 48, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': '01f393939348718c82d91f7a5276078027c600ee', 'committer_username': 'jesi-rgb', 'committer_name': 'JesÃºs Enrique RascÃ³n', 'committer_email': 'blograso@gmail.com', 'commit_date': datetime.datetime(2019, 5, 17, 8, 48, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0326f85fbd01df4a7e5760fff180a36a75e0234d', 'committer_username': 'jesi-rgb', 'committer_name': 'JesÃºs Enrique RascÃ³n', 'committer_email': 'blograso@gmail.com', 'commit_date': datetime.datetime(2019, 5, 17, 8, 48, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7256b1cd9d0aa655e5cb03b1723bf5dd2ca1cef2', 'committer_username': 'jesi-rgb', 'committer_name': 'JesÃºs Enrique RascÃ³n', 'committer_email': 'blograso@gmail.com', 'commit_date': datetime.datetime(2019, 5, 17, 8, 48, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'de52c273f3f3ae691d094c5e90538e59ded7fd27', 'committer_username': 'jesi-rgb', 'committer_name': 'JesÃºs Enrique RascÃ³n', 'committer_email': 'blograso@gmail.com', 'commit_date': datetime.datetime(2019, 5, 17, 8, 48, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': '647a7ca329e7e4da7e7544b70cf264f1510de002', 'committer_username': 'jesi-rgb', 'committer_name': 'JesÃºs Enrique RascÃ³n', 'committer_email': 'blograso@gmail.com', 'commit_date': datetime.datetime(2019, 5, 17, 8, 48, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f222c9b91d20cddac99754b3e1bff19b9cab00c8', 'committer_username': 'jesi-rgb', 'committer_name': 'JesÃºs Enrique RascÃ³n', 'committer_email': 'blograso@gmail.com', 'commit_date': datetime.datetime(2019, 5, 17, 8, 48, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': '592bb79379ba97bfecc830bdfa5abc82911b828a', 'committer_username': 'jesi-rgb', 'committer_name': 'JesÃºs Enrique RascÃ³n', 'committer_email': 'blograso@gmail.com', 'commit_date': datetime.datetime(2019, 5, 17, 8, 48, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': '18aabac1a923e6e297e82000bc66f5cab294632f', 'committer_username': 'jesi-rgb', 'committer_name': 'JesÃºs Enrique RascÃ³n', 'committer_email': 'blograso@gmail.com', 'commit_date': datetime.datetime(2019, 5, 17, 8, 48, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9e3cc61311558709e4b0189f42482dacb77600d0', 'committer_username': 'jesi-rgb', 'committer_name': 'JesÃºs Enrique RascÃ³n', 'committer_email': 'blograso@gmail.com', 'commit_date': datetime.datetime(2019, 5, 17, 8, 48, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b0e07dc7d910f7694eded7dac263323fb464beef', 'committer_username': 'jesi-rgb', 'committer_name': 'JesÃºs Enrique RascÃ³n', 'committer_email': 'blograso@gmail.com', 'commit_date': datetime.datetime(2019, 5, 17, 8, 48, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': '540b2f2198449a07ef9bd56fb62afd71a1daa86b', 'committer_username': 'jesi-rgb', 'committer_name': 'JesÃºs Enrique RascÃ³n', 'committer_email': 'blograso@gmail.com', 'commit_date': datetime.datetime(2019, 5, 17, 8, 48, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8bd536e388709ede94ee351ea3d2ad178bf6c566', 'committer_username': 'jesi-rgb', 'committer_name': 'JesÃºs Enrique RascÃ³n', 'committer_email': 'blograso@gmail.com', 'commit_date': datetime.datetime(2019, 5, 17, 8, 48, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': '571f8a52345d2a8ba172e59bded25a6f7c95ec9c', 'committer_username': 'jesi-rgb', 'committer_name': 'JesÃºs Enrique RascÃ³n', 'committer_email': 'blograso@gmail.com', 'commit_date': datetime.datetime(2019, 5, 17, 8, 48, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': '73acfb183744179ea03a5f8f8e6bd1778205b6d7', 'committer_username': 'jesi-rgb', 'committer_name': 'JesÃºs Enrique RascÃ³n', 'committer_email': 'blograso@gmail.com', 'commit_date': datetime.datetime(2019, 5, 17, 8, 48, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ae03db0c62863387933f5dfd88ed3cb7dfbde411', 'committer_username': 'jesi-rgb', 'committer_name': 'JesÃºs Enrique RascÃ³n', 'committer_email': 'blograso@gmail.com', 'commit_date': datetime.datetime(2019, 5, 17, 8, 48, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': '629d7448d4dc0cf562bc9214ab6cc76d04f5a680', 'committer_username': 'jesi-rgb', 'committer_name': 'JesÃºs Enrique RascÃ³n', 'committer_email': 'blograso@gmail.com', 'commit_date': datetime.datetime(2019, 5, 17, 8, 48, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0ebf9b712d609132511fde841d314620bef315c1', 'committer_username': 'jesi-rgb', 'committer_name': 'JesÃºs Enrique RascÃ³n', 'committer_email': 'blograso@gmail.com', 'commit_date': datetime.datetime(2019, 5, 17, 8, 48, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': '566474400be8c4293f0abbcf6ae6a87e015bcaf3', 'committer_username': 'jesi-rgb', 'committer_name': 'JesÃºs Enrique RascÃ³n', 'committer_email': 'blograso@gmail.com', 'commit_date': datetime.datetime(2019, 5, 17, 8, 48, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': '02c44be28c3eccc942026e2d767bb602fbb27d72', 'committer_username': 'jesi-rgb', 'committer_name': 'JesÃºs Enrique RascÃ³n', 'committer_email': 'blograso@gmail.com', 'commit_date': datetime.datetime(2019, 5, 17, 8, 48, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7557cf8024dcfe34bdae64f489a99572f87ad763', 'committer_username': 'jesi-rgb', 'committer_name': 'JesÃºs Enrique RascÃ³n', 'committer_email': 'blograso@gmail.com', 'commit_date': datetime.datetime(2019, 5, 17, 8, 48, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bed8cfa01c94c03c49757b5ea8ad3f4ce2e93efb', 'committer_username': 'jesi-rgb', 'committer_name': 'JesÃºs Enrique RascÃ³n', 'committer_email': 'blograso@gmail.com', 'commit_date': datetime.datetime(2019, 5, 17, 8, 48, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': '79452ecff64d11f14d73a3c254cba25db896628b', 'committer_username': 'jesi-rgb', 'committer_name': 'JesÃºs Enrique RascÃ³n', 'committer_email': 'blograso@gmail.com', 'commit_date': datetime.datetime(2019, 5, 17, 8, 48, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5b582000403012633c73461182a912bb11ad7271', 'committer_username': 'jesi-rgb', 'committer_name': 'JesÃºs Enrique RascÃ³n', 'committer_email': 'blograso@gmail.com', 'commit_date': datetime.datetime(2019, 5, 17, 8, 48, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': '547b533d0c73dfa0bd3d81adeda832f8f9b3cd9d', 'committer_username': 'jesi-rgb', 'committer_name': 'JesÃºs Enrique RascÃ³n', 'committer_email': 'blograso@gmail.com', 'commit_date': datetime.datetime(2019, 5, 17, 8, 48, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': '57158e5ae5aaabaf0cca6bebfa4e9a2248135cd4', 'committer_username': 'jesi-rgb', 'committer_name': 'JesÃºs Enrique RascÃ³n', 'committer_email': 'blograso@gmail.com', 'commit_date': datetime.datetime(2019, 5, 17, 8, 48, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5fd17662403afc7c974b3ecce9d757306c68590d', 'committer_username': 'jesi-rgb', 'committer_name': 'JesÃºs Enrique RascÃ³n', 'committer_email': 'blograso@gmail.com', 'commit_date': datetime.datetime(2019, 5, 17, 8, 48, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ebd2d6146bd80b44897733798a8347157468afc6', 'committer_username': 'jesi-rgb', 'committer_name': 'JesÃºs Enrique RascÃ³n', 'committer_email': 'blograso@gmail.com', 'commit_date': datetime.datetime(2019, 5, 17, 8, 48, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': '133eafa037790aac193af84866c3669f7d1dc64a', 'committer_username': 'jesi-rgb', 'committer_name': 'JesÃºs Enrique RascÃ³n', 'committer_email': 'blograso@gmail.com', 'commit_date': datetime.datetime(2019, 5, 17, 8, 48, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f42fef88112c3fb422409cd3ec6a8a5b355c99ef', 'committer_username': 'jesi-rgb', 'committer_name': 'JesÃºs Enrique RascÃ³n', 'committer_email': 'blograso@gmail.com', 'commit_date': datetime.datetime(2019, 5, 17, 8, 48, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7daec8ed88c2735c6155c6aa9000c874ed4d8795', 'committer_username': 'jesi-rgb', 'committer_name': 'JesÃºs Enrique RascÃ³n', 'committer_email': 'blograso@gmail.com', 'commit_date': datetime.datetime(2019, 5, 17, 8, 48, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c8baf6e3f036ecf89ed6879d608fe91a7808d6d9', 'committer_username': 'jesi-rgb', 'committer_name': 'JesÃºs Enrique RascÃ³n', 'committer_email': 'blograso@gmail.com', 'commit_date': datetime.datetime(2019, 5, 17, 8, 48, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd9c5fe0a022a130c5742ca68d4ed5aa23b2ebc1e', 'committer_username': 'jesi-rgb', 'committer_name': 'JesÃºs Enrique RascÃ³n', 'committer_email': 'blograso@gmail.com', 'commit_date': datetime.datetime(2019, 5, 17, 8, 48, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7be6a621c42290e97998bd52ff2d16c1dd7e364f', 'committer_username': 'jesi-rgb', 'committer_name': 'JesÃºs Enrique RascÃ³n', 'committer_email': 'blograso@gmail.com', 'commit_date': datetime.datetime(2019, 5, 17, 8, 48, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': '928ee37d3f365196b06aa3d70167f799b3592cb0', 'committer_username': 'jesi-rgb', 'committer_name': 'JesÃºs Enrique RascÃ³n', 'committer_email': 'blograso@gmail.com', 'commit_date': datetime.datetime(2019, 5, 17, 8, 48, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': '64c4d7afc1dea3ceb35997e5e10851c03713222b', 'committer_username': 'jesi-rgb', 'committer_name': 'JesÃºs Enrique RascÃ³n', 'committer_email': 'blograso@gmail.com', 'commit_date': datetime.datetime(2019, 5, 17, 8, 48, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': '95c414734c058b6509566e349ebfb8e5ffbd6f20', 'committer_username': 'jesi-rgb', 'committer_name': 'JesÃºs Enrique RascÃ³n', 'committer_email': 'blograso@gmail.com', 'commit_date': datetime.datetime(2019, 5, 17, 8, 48, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8931fb1703ed6493567967c1215e0e0afff23391', 'committer_username': 'jesi-rgb', 'committer_name': 'JesÃºs Enrique RascÃ³n', 'committer_email': 'blograso@gmail.com', 'commit_date': datetime.datetime(2019, 5, 17, 8, 48, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': '79fd7c15ff239e926310af1667647d17e2d51b0e', 'committer_username': 'jesi-rgb', 'committer_name': 'JesÃºs Enrique RascÃ³n', 'committer_email': 'blograso@gmail.com', 'commit_date': datetime.datetime(2019, 5, 17, 8, 48, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ac2964219b36f1fd832e0c47064134ce211e3da5', 'committer_username': 'jesi-rgb', 'committer_name': 'JesÃºs Enrique RascÃ³n', 'committer_email': 'blograso@gmail.com', 'commit_date': datetime.datetime(2019, 5, 17, 8, 48, 28, tzinfo=datetime.timezone.utc)}]",JesÃºs Enrique RascÃ³n,50735312,blograso@gmail.com,User,,99,,83,49

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
8424040,p5.js,processing/p5.js,JavaScript,3256,21322,498,753,13061,313,7,40,"[{'id': 985744096, 'number': 5709, 'closed': datetime.datetime(2022, 9, 5, 20, 52, 5, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 3, 15, 5, 28, tzinfo=datetime.timezone.utc), 'time_taken': 5550397.0, 'time_delta': '64 days, 5:46:37', 'additions': 491, 'deletions': 15, 'state': 'closed'}, {'id': 971446678, 'number': 5694, 'closed': datetime.datetime(2022, 7, 3, 14, 54, 49, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 6, 19, 9, 45, 21, tzinfo=datetime.timezone.utc), 'time_taken': 1228168.0, 'time_delta': '14 days, 5:09:28', 'additions': 7, 'deletions': 3, 'state': 'closed'}]"
