pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
992485538,Benchmarking utilities,"After talking with Mircea over slack, the decision was made to look at upstreaming my benchmarking utilities (for chromium and the llvm test suite). I have separated everything over a couple of different python files. There are three scripts that get added in `benchmark_chromium.py`, `benchmark_llvm_test_suite.py`, and `list_gtests.py`.
* `benchmark_chromium.py` contains all of the facilities to run the chromium gtest executables, also automating model integration into LLVM and compiling the tests with different models.
* `benchmark_llvm_test_suite.py` is quite similar to `benchmark_chromium.py`, but focused on the LLVM test suite. By default, it executes most of the MicroBenchmarks from the llvm test suite repository, and also automates the building of the test suite using a two-stage PGO build, as well as compiling models into LLVM.
* `list_gtests.py` is just a utility script that was used for collecting all of the test names in the chromium gtest executables. It doesn't need to be used unless you're preparing your own chromium test suite as I have prepared a default corpus of tests (methodology for that available [here](https://github.com/boomanaiden154/gsoc2022-notes/blob/master/july/3/analysis1.ipynb)), but that might need to be done in the future and I had already written the utility, so it should probably be included.
Then there are the two utility files:
* `benchmarking_utils.py` - contains common benchmarking utils such as the function to build LLVM, and also the microbenchmark runner
* `gtest_executable_utils.py` - contains a bunch of utilities to work with/run gtest executables.

The instrumentation for the microbenchmarks is built into google benchmark, so that is used for the llvm test suite. Since chromium only uses google test and there is no built in perf counter instrumentation, I'm just using perf stat to grab performance counters. It's not perfect, but based on my analysis the run to run variability is quite low (definitely good enough to see the changes that we're expecting) and seem to be fairly valid as well (showing a reduction in loads over the default heuristic). 

Design decisions to note:
* I'm compiling the model into LLVM rather than just using the development mode advisor as we don't need any of the features that the development mode advisor has, and since in release mode the model is ahead of time compiled, it should also be faster (which is important as the chromium benchmark compile takes several hours on a decent sized machine and has about 60000 build steps).
* I haven't written any unit tests for these files, as a major component of their functionality is how they interact with the environment around them. I'm planning on writing one or two integration tests that can be used to verify functionality, although we won't be able to easily plug those into CI.
* I'm currently using `joblib` in order to run some of the tests in parallel. Based on some of my testing some of the perf counters are reliable enough even when run in parallel (data/analysis availabe [here](https://github.com/boomanaiden154/gsoc2022-notes/blob/master/july/4/analysis.ipynb)). However, `joblib` isn't used anywhere else in the project as the built-in `multiprocessing` library is. I can refactor this if needed. The chromium tests by default take about 3-4 hours to run single threaded, so running them in parallel provides an immense speed-up.

TODO:
* [x] Add type annotations to all of the new functions/classes
* [x] Add in documentation on running the new benchmarking scripts
* ~~Write integration test shell scripts~~
* [x] Adjust output of scripts to match what the existing benchmark compare function is expecting",True,47,https://api.github.com/repos/google/ml-compiler-opt/pulls/47,https://github.com/google/ml-compiler-opt/pull/47,closed,17409,5,16,37,2,9,0,0,[],2022-07-10 19:41:40+00:00,2022-07-13 19:26:31+00:00,258291.0,"2 days, 23:44:51","[{'comment_id': 919623143, 'comment_body': 'since there are a bunch of files related to benchmarking, probably makes sense to have compiler_opt/benchmark for benchmark related stuffs', 'comment_created': datetime.datetime(2022, 7, 13, 3, 50, 52, tzinfo=datetime.timezone.utc), 'commenter': 'yundiqian', 'type': 'User'}, {'comment_id': 919627401, 'comment_body': 'make it ### so that it is under Benchmarking Chromium, and also add the explanation about it in your PR description to the md file here', 'comment_created': datetime.datetime(2022, 7, 13, 4, 3, 34, tzinfo=datetime.timezone.utc), 'commenter': 'yundiqian', 'type': 'User'}, {'comment_id': 919683497, 'comment_body': 'Adjusted the heading level and added in all the relevant info from the PR description into the file.', 'comment_created': datetime.datetime(2022, 7, 13, 6, 11, 30, tzinfo=datetime.timezone.utc), 'commenter': 'boomanaiden154', 'type': 'User'}, {'comment_id': 920163430, 'comment_body': 'how do we evolve this file over time? ', 'comment_created': datetime.datetime(2022, 7, 13, 14, 40, 3, tzinfo=datetime.timezone.utc), 'commenter': 'mtrofin', 'type': 'User'}, {'comment_id': 920163932, 'comment_body': '(same q for the other jsons)', 'comment_created': datetime.datetime(2022, 7, 13, 14, 40, 28, tzinfo=datetime.timezone.utc), 'commenter': 'mtrofin', 'type': 'User'}, {'comment_id': 920165464, 'comment_body': ""oh, nevermind - list_gtests?\r\n\r\nI'm curious, why check in the jsons though?"", 'comment_created': datetime.datetime(2022, 7, 13, 14, 41, 45, tzinfo=datetime.timezone.utc), 'commenter': 'mtrofin', 'type': 'User'}, {'comment_id': 920168537, 'comment_body': ""this is only for the benchmarks, right? let's have a separate requirements.txt in `./benchmark/`, and maybe we can follow the same pattern elsewhere we have optional modules with extra requirements?\r\n\r\n(if there's already a pythonic way to do this, let's do that instead)"", 'comment_created': datetime.datetime(2022, 7, 13, 14, 44, 10, tzinfo=datetime.timezone.utc), 'commenter': 'mtrofin', 'type': 'User'}, {'comment_id': 920366127, 'comment_body': ""I'm including it within the repository for a couple of different reasons. First of all so that `list_gtests.py` doesn't need to be run whenever you want to run benchmarks. Also, it standardizes the test set, so you might be able to use the same baseline/default data, but getting baseline results again is probably best practice. I'm also placing them here since the methodology that I'm using to generate them is different than just running `list_gtests.py`. I did some analysis [here](https://github.com/boomanaiden154/gsoc2022-notes/blob/master/july/3/analysis1.ipynb) so that I could minimize run-to-run variability among the tests. There are a lot of tests within some of the sets (especially `base_perftests` and `components_perftests`) that have an extremely high run to run variability (well over +/- 10%) with the perf counters, I wanted to make sure those weren't included in the test set so that we can get reliable results."", 'comment_created': datetime.datetime(2022, 7, 13, 18, 6, 8, tzinfo=datetime.timezone.utc), 'commenter': 'boomanaiden154', 'type': 'User'}, {'comment_id': 920372179, 'comment_body': 'That should be the pythonic way to do it. You can include all the base dependencies with a `-r /path/to/requirements.txt` line at the top of the file, and then if you run `pip -r`, it will install all dependencies in the file that you give it and all dependencies in ""included"" requirements files. We could probably do this for the development dependencies too.', 'comment_created': datetime.datetime(2022, 7, 13, 18, 13, 40, tzinfo=datetime.timezone.utc), 'commenter': 'boomanaiden154', 'type': 'User'}]","[{'commit_sha': '50fa70e9d821691e24518b7241557eaab3d1ae64', 'committer_username': 'boomanaiden154', 'committer_name': 'Aiden Grossman', 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 17, 21, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8dde4fc0559e289e83b5d68f8ccba6a024b3813b', 'committer_username': 'boomanaiden154', 'committer_name': 'Aiden Grossman', 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 17, 21, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a864c407cb5a285958b0c0e4ec3cacf7c08bd5c9', 'committer_username': 'boomanaiden154', 'committer_name': 'Aiden Grossman', 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 17, 21, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd59ab21bf53e50dec82ceaffbc4a1389dbf3d3a3', 'committer_username': 'boomanaiden154', 'committer_name': 'Aiden Grossman', 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 17, 21, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'beb1c99b32a0237d57ad58c707722120f7238d7c', 'committer_username': 'boomanaiden154', 'committer_name': 'Aiden Grossman', 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 17, 21, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a4198ca65d8d4b4a460d10c0b182ecb3660057b6', 'committer_username': 'boomanaiden154', 'committer_name': 'Aiden Grossman', 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 17, 21, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd1794a24114ed29668dbfd60a1a7d9107473abbc', 'committer_username': 'boomanaiden154', 'committer_name': 'Aiden Grossman', 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 17, 21, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bfe4dc14807dcd3396c968765310d0be3018d71c', 'committer_username': 'boomanaiden154', 'committer_name': 'Aiden Grossman', 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 17, 21, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3abe3a1ccb6e140b4b27b0d07977817a696d7490', 'committer_username': 'boomanaiden154', 'committer_name': 'Aiden Grossman', 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 17, 21, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '804d9ec78ba3938e953af33f5e8ef0659cb3f2de', 'committer_username': 'boomanaiden154', 'committer_name': 'Aiden Grossman', 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 17, 21, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '78101978c11dd7dc4e79245d6102545122c6e5c0', 'committer_username': 'boomanaiden154', 'committer_name': 'Aiden Grossman', 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 17, 21, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3e9f585e244523f035ed81377ba90c3eaf898a1c', 'committer_username': 'boomanaiden154', 'committer_name': 'Aiden Grossman', 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 17, 21, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '59ab152c76fb42343d50b87d86f395f95d15612e', 'committer_username': 'boomanaiden154', 'committer_name': 'Aiden Grossman', 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 17, 21, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '985de1522f3c25b38949459907b3ab5bef5e001c', 'committer_username': 'boomanaiden154', 'committer_name': 'Aiden Grossman', 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 17, 21, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2d5b9e073b91f728c50b8fa9fc589b0d71c2dcde', 'committer_username': 'boomanaiden154', 'committer_name': 'Aiden Grossman', 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 17, 21, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '27de98db8865301be9fa75e89f4e46a9c5ce3265', 'committer_username': 'boomanaiden154', 'committer_name': 'Aiden Grossman', 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 17, 21, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c8a2eabfc3fc11d8b6e571a9b04d0cd755c308de', 'committer_username': 'boomanaiden154', 'committer_name': 'Aiden Grossman', 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 17, 21, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd5e6522ed2c38f5d8316f74213afd0cda13b4cc1', 'committer_username': 'boomanaiden154', 'committer_name': 'Aiden Grossman', 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 17, 21, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '72bbd50bf49512e6f9d07b61b0b30235936144fa', 'committer_username': 'boomanaiden154', 'committer_name': 'Aiden Grossman', 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 17, 21, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9ea6d8e23f7a5ecec7d660fd7a117e11c79b40c6', 'committer_username': 'boomanaiden154', 'committer_name': 'Aiden Grossman', 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 17, 21, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '157863a00bfb5dce42cee2dc1dccb238438ca68e', 'committer_username': 'boomanaiden154', 'committer_name': 'Aiden Grossman', 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 17, 21, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b5da0f838c6ff6045b49feeeb8a7d1e2f88117d6', 'committer_username': 'boomanaiden154', 'committer_name': 'Aiden Grossman', 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 17, 21, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3cae293f5164ad170e7287141b08cb023eb08350', 'committer_username': 'boomanaiden154', 'committer_name': 'Aiden Grossman', 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 17, 21, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1fd3fc572a2c287189ccfb33285c33534b205a4d', 'committer_username': 'boomanaiden154', 'committer_name': 'Aiden Grossman', 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 17, 21, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a755b8933733800c2e3aa03b2984a3f0619b8375', 'committer_username': 'boomanaiden154', 'committer_name': 'Aiden Grossman', 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 17, 21, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '90831bb7a3b3dac20bc5b34003566d0ce0c8e9b6', 'committer_username': 'boomanaiden154', 'committer_name': 'Aiden Grossman', 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 17, 21, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a1598c6b8ef363fc86497b31ebac7ecf77d706ca', 'committer_username': 'boomanaiden154', 'committer_name': 'Aiden Grossman', 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 17, 21, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fe025a9705cfc71bddfa8975c31ada38e514ba1e', 'committer_username': 'boomanaiden154', 'committer_name': 'Aiden Grossman', 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 17, 21, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f2f07d554396f1d1e8baae1bf8201c56f3adc4fa', 'committer_username': 'boomanaiden154', 'committer_name': 'Aiden Grossman', 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 17, 21, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9cdcec0b8fbd57601ded3fa6fe4a9f913b4a2e5b', 'committer_username': 'boomanaiden154', 'committer_name': 'Aiden Grossman', 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 17, 21, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '118816458ac7a2b0011bddbcfec82eaf94adab18', 'committer_username': 'boomanaiden154', 'committer_name': 'Aiden Grossman', 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 17, 21, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a52f07af8d1883256bc0377470fe4b0f7d13ecf5', 'committer_username': 'boomanaiden154', 'committer_name': 'Aiden Grossman', 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 17, 21, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1bb0f40624f7206137ab900ed3d8b5d671d758ca', 'committer_username': 'boomanaiden154', 'committer_name': 'Aiden Grossman', 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 17, 21, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c568d09713f838b2fa42363929adf23f26f31074', 'committer_username': 'boomanaiden154', 'committer_name': 'Aiden Grossman', 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 17, 21, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f1cfc1d80c2765120c5c056f0958c9bdbc1f41e2', 'committer_username': 'boomanaiden154', 'committer_name': 'Aiden Grossman', 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 17, 21, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c12e216661235c7708d69443e32dbe3c8194e29f', 'committer_username': 'boomanaiden154', 'committer_name': 'Aiden Grossman', 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 17, 21, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '80b81324d917fd9eed4eec7b110e6d7d1cc0d0a6', 'committer_username': 'boomanaiden154', 'committer_name': 'Aiden Grossman', 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 17, 21, 46, 24, tzinfo=datetime.timezone.utc)}]",Aiden Grossman,39388941,,User,,49,,0,25
1045398134,Misc improvements to benchmarking infrastructure,"This PR makes a couple minor improvements for the benchmarking code.
  - Actually checks that the tests being run pass.
  - Added more tests from the Chromium unittests and removed the
    chromium browser_tests that won't run headlessly.
  - Add a new utility, filter_tests.py, that runs through all of the
    tests in a test suite description and makes sure they pass.
  - Fixed list_gtests.py (single character fix, main didn't have a
    parameter before)
  - Add some info on the new utility to the documentation
  - Add debugging info in benchmark_report_converter for when there is
    a difference between two benchmark sets, it actually prints out
    what the exact difference is.
  - Remove advisor flag from list of required flags when building the
    LLVM test suite as it isn't required when the no compile flags are
    set.",True,130,https://api.github.com/repos/google/ml-compiler-opt/pulls/130,https://github.com/google/ml-compiler-opt/pull/130,closed,40377,15731,13,1,4,0,0,0,[],2022-09-03 04:34:18+00:00,2022-09-26 17:37:03+00:00,2034165.0,"23 days, 13:02:45",[],"[{'commit_sha': '18d9bc7a7a62a11559b98999f0f309416130078c', 'committer_username': 'boomanaiden154', 'committer_name': 'Aiden Grossman', 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 17, 21, 46, 24, tzinfo=datetime.timezone.utc)}]",Aiden Grossman,39388941,,User,,49,,0,25
1022093028,Prevent TF from logging info messages during data collection,"Currently, whenever a TF model gets loaded in by LLVM in the
development mode advisors, TF outputs a slew of info messages
to STDOUT that aren't particularly useful. This patch gets
rid of those messages by setting an environment variable when
running the compilation commands that only enables warnings
and errors to be printed to the console. This makes it much
easier to see progress/results in several of the scripts within
this repository such as train_locally.py and
generate_default_trace.py when grabbing performance data for a
policy.",True,93,https://api.github.com/repos/google/ml-compiler-opt/pulls/93,https://github.com/google/ml-compiler-opt/pull/93,closed,10,1,1,1,1,2,0,0,[],2022-08-10 00:26:25+00:00,2022-08-10 05:31:44+00:00,18319.0,5:05:19,"[{'comment_id': 941964615, 'comment_body': 'can you make this configurable via an abseil flag? I\'d just do ""quiet"" (default) vs not quiet - i.e. no need to elaborate on other values of TF_CPP_MIN_LOG_LEVEL or anything.', 'comment_created': datetime.datetime(2022, 8, 10, 3, 2, 28, tzinfo=datetime.timezone.utc), 'commenter': 'mtrofin', 'type': 'User'}, {'comment_id': 942004575, 'comment_body': 'Added a `--quiet`/`--noquiet` flag that toggles this.', 'comment_created': datetime.datetime(2022, 8, 10, 4, 26, 34, tzinfo=datetime.timezone.utc), 'commenter': 'boomanaiden154', 'type': 'User'}]","[{'commit_sha': '0af5b770e13d125f072d491dfc6b9a6c4b756470', 'committer_username': 'boomanaiden154', 'committer_name': 'Aiden Grossman', 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 17, 21, 46, 24, tzinfo=datetime.timezone.utc)}]",Aiden Grossman,39388941,,User,,49,,0,25
1029339294,Add tooling for feature importance,"This PR adds in tooling to use [shap](https://github.com/slundberg/shap) for approximating the contribution of features to the overall output of the model. The tooling seems to work decently well (other than for some reason thinking the `mask` feature in the regalloc model contributes significantly to the overall output when it just gets discarded). More validation might be needed there. This patch should also work with the inliner although I haven't tried it on any data from the inliner yet.

If we decide to go forward with this, I'll work on adding in typing information and write some unit tests along with documentation.",True,109,https://api.github.com/repos/google/ml-compiler-opt/pulls/109,https://github.com/google/ml-compiler-opt/pull/109,closed,734,3,9,22,8,8,0,0,[],2022-08-17 22:02:29+00:00,2022-09-15 05:40:27+00:00,2446678.0,"28 days, 7:37:58","[{'comment_id': 948483625, 'comment_body': ""so I understand: it's not like the CI actually needs this right now, correct?"", 'comment_created': datetime.datetime(2022, 8, 17, 22, 18, 59, tzinfo=datetime.timezone.utc), 'commenter': 'mtrofin', 'type': 'User'}, {'comment_id': 948489038, 'comment_body': ""The CI needs it for this patch or otherwise the `pytype` check will fail because it won't be able to import `shap` when checking the files that include it."", 'comment_created': datetime.datetime(2022, 8, 17, 22, 25, 42, tzinfo=datetime.timezone.utc), 'commenter': 'boomanaiden154', 'type': 'User'}, {'comment_id': 948607313, 'comment_body': 'aa! thanks.', 'comment_created': datetime.datetime(2022, 8, 18, 3, 2, 18, tzinfo=datetime.timezone.utc), 'commenter': 'mtrofin', 'type': 'User'}, {'comment_id': 949515840, 'comment_body': 'avoid inner functions when possible', 'comment_created': datetime.datetime(2022, 8, 18, 19, 22, 36, tzinfo=datetime.timezone.utc), 'commenter': 'yundiqian', 'type': 'User'}, {'comment_id': 949575732, 'comment_body': 'can we avoid this?', 'comment_created': datetime.datetime(2022, 8, 18, 20, 35, 1, tzinfo=datetime.timezone.utc), 'commenter': 'yundiqian', 'type': 'User'}, {'comment_id': 949878150, 'comment_body': 'We could avoid it if we refactored out all the data formatting functions into a separate module and then tested that rather than the script.', 'comment_created': datetime.datetime(2022, 8, 19, 7, 16, 57, tzinfo=datetime.timezone.utc), 'commenter': 'boomanaiden154', 'type': 'User'}, {'comment_id': 950613016, 'comment_body': 'Refactored to create a new function `create_run_model_function` that returns a `run_model` function with the correct signature. Similar pattern to what has been used in other parts of the repository.', 'comment_created': datetime.datetime(2022, 8, 19, 23, 47, 7, tzinfo=datetime.timezone.utc), 'commenter': 'boomanaiden154', 'type': 'User'}, {'comment_id': 950615963, 'comment_body': ""Refactored all of the utilities into a separate file, `feature_importance_utils.py`, so that they can be unit tested independently of the script and we don't run into any flag conflicts."", 'comment_created': datetime.datetime(2022, 8, 20, 0, 1, 32, tzinfo=datetime.timezone.utc), 'commenter': 'boomanaiden154', 'type': 'User'}]","[{'commit_sha': 'c62095411f4e27317b80a59618518b1585e17a78', 'committer_username': 'boomanaiden154', 'committer_name': 'Aiden Grossman', 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 17, 21, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '57f4a1e8b28a7d4f650bd4a2c2d248d59793bf51', 'committer_username': 'boomanaiden154', 'committer_name': 'Aiden Grossman', 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 17, 21, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e0a2132097488125aa5a74eeb25892c898cfa94b', 'committer_username': 'boomanaiden154', 'committer_name': 'Aiden Grossman', 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 17, 21, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0500ff9ba469d016dff8c237e76ad659799a8c47', 'committer_username': 'boomanaiden154', 'committer_name': 'Aiden Grossman', 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 17, 21, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '36eb6bafe4d9aa1b6c5a1770de960f5c241ae6f8', 'committer_username': 'boomanaiden154', 'committer_name': 'Aiden Grossman', 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 17, 21, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '74a8347de799dbc4c89f8e8de96a78f1142dd2e4', 'committer_username': 'boomanaiden154', 'committer_name': 'Aiden Grossman', 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 17, 21, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0b636224069a445dacc3f3891c31a28fdbebadd0', 'committer_username': 'boomanaiden154', 'committer_name': 'Aiden Grossman', 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 17, 21, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '60a541decc130c0bf6536734a30cf6232b1ef60c', 'committer_username': 'boomanaiden154', 'committer_name': 'Aiden Grossman', 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 17, 21, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '39a3feec324ae729ec2fba8739161fd41218b129', 'committer_username': 'boomanaiden154', 'committer_name': 'Aiden Grossman', 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 17, 21, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7277cd83343772d71c0c11c8affc9ca7a49ae9a4', 'committer_username': 'boomanaiden154', 'committer_name': 'Aiden Grossman', 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 17, 21, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6a2d5778090dbad06c4260e07b916926525f04c2', 'committer_username': 'boomanaiden154', 'committer_name': 'Aiden Grossman', 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 17, 21, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dc30df6fb22ec6d7243548b9a37bc0bf3388b8a5', 'committer_username': 'boomanaiden154', 'committer_name': 'Aiden Grossman', 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 17, 21, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5d6688f65add3c47aa1d72759f592950f25a84d2', 'committer_username': 'boomanaiden154', 'committer_name': 'Aiden Grossman', 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 17, 21, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '79f1884a891005c84f2ddd4066ab99b71dce03fc', 'committer_username': 'boomanaiden154', 'committer_name': 'Aiden Grossman', 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 17, 21, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6c960f9483d36e5989da167b9a511dab6d232bc1', 'committer_username': 'boomanaiden154', 'committer_name': 'Aiden Grossman', 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 17, 21, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7edc83814c9d916834d9f1a40b01cde9f6407309', 'committer_username': 'boomanaiden154', 'committer_name': 'Aiden Grossman', 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 17, 21, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7544d8fba32f201a68bec46b9bc4b048abc19e9f', 'committer_username': 'boomanaiden154', 'committer_name': 'Aiden Grossman', 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 17, 21, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd6e94ed9e17806ea9fd0063361aa58828cf3dc6e', 'committer_username': 'boomanaiden154', 'committer_name': 'Aiden Grossman', 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 17, 21, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c9b78fe1eaf9729c2ea0ac012364e63e409d2809', 'committer_username': 'boomanaiden154', 'committer_name': 'Aiden Grossman', 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 17, 21, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9d0a2ea1e62fd9cae2e24172455712b76a0753d9', 'committer_username': 'boomanaiden154', 'committer_name': 'Aiden Grossman', 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 17, 21, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5d160b0d1a2236d737bc2c5d55991db4aa1aae6b', 'committer_username': 'boomanaiden154', 'committer_name': 'Aiden Grossman', 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 17, 21, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '42af849819b17862c7490e3a6aee9063093a2c51', 'committer_username': 'yundiqian', 'committer_name': 'Yundi Qian', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 8, 2, 15, 21, tzinfo=datetime.timezone.utc)}]",Aiden Grossman,39388941,,User,,49,,0,25
1029339294,Add tooling for feature importance,"This PR adds in tooling to use [shap](https://github.com/slundberg/shap) for approximating the contribution of features to the overall output of the model. The tooling seems to work decently well (other than for some reason thinking the `mask` feature in the regalloc model contributes significantly to the overall output when it just gets discarded). More validation might be needed there. This patch should also work with the inliner although I haven't tried it on any data from the inliner yet.

If we decide to go forward with this, I'll work on adding in typing information and write some unit tests along with documentation.",True,109,https://api.github.com/repos/google/ml-compiler-opt/pulls/109,https://github.com/google/ml-compiler-opt/pull/109,closed,734,3,9,22,8,8,0,0,[],2022-08-17 22:02:29+00:00,2022-09-15 05:40:27+00:00,2446678.0,"28 days, 7:37:58","[{'comment_id': 948483625, 'comment_body': ""so I understand: it's not like the CI actually needs this right now, correct?"", 'comment_created': datetime.datetime(2022, 8, 17, 22, 18, 59, tzinfo=datetime.timezone.utc), 'commenter': 'mtrofin', 'type': 'User'}, {'comment_id': 948489038, 'comment_body': ""The CI needs it for this patch or otherwise the `pytype` check will fail because it won't be able to import `shap` when checking the files that include it."", 'comment_created': datetime.datetime(2022, 8, 17, 22, 25, 42, tzinfo=datetime.timezone.utc), 'commenter': 'boomanaiden154', 'type': 'User'}, {'comment_id': 948607313, 'comment_body': 'aa! thanks.', 'comment_created': datetime.datetime(2022, 8, 18, 3, 2, 18, tzinfo=datetime.timezone.utc), 'commenter': 'mtrofin', 'type': 'User'}, {'comment_id': 949515840, 'comment_body': 'avoid inner functions when possible', 'comment_created': datetime.datetime(2022, 8, 18, 19, 22, 36, tzinfo=datetime.timezone.utc), 'commenter': 'yundiqian', 'type': 'User'}, {'comment_id': 949575732, 'comment_body': 'can we avoid this?', 'comment_created': datetime.datetime(2022, 8, 18, 20, 35, 1, tzinfo=datetime.timezone.utc), 'commenter': 'yundiqian', 'type': 'User'}, {'comment_id': 949878150, 'comment_body': 'We could avoid it if we refactored out all the data formatting functions into a separate module and then tested that rather than the script.', 'comment_created': datetime.datetime(2022, 8, 19, 7, 16, 57, tzinfo=datetime.timezone.utc), 'commenter': 'boomanaiden154', 'type': 'User'}, {'comment_id': 950613016, 'comment_body': 'Refactored to create a new function `create_run_model_function` that returns a `run_model` function with the correct signature. Similar pattern to what has been used in other parts of the repository.', 'comment_created': datetime.datetime(2022, 8, 19, 23, 47, 7, tzinfo=datetime.timezone.utc), 'commenter': 'boomanaiden154', 'type': 'User'}, {'comment_id': 950615963, 'comment_body': ""Refactored all of the utilities into a separate file, `feature_importance_utils.py`, so that they can be unit tested independently of the script and we don't run into any flag conflicts."", 'comment_created': datetime.datetime(2022, 8, 20, 0, 1, 32, tzinfo=datetime.timezone.utc), 'commenter': 'boomanaiden154', 'type': 'User'}]","[{'commit_sha': 'c62095411f4e27317b80a59618518b1585e17a78', 'committer_username': 'boomanaiden154', 'committer_name': 'Aiden Grossman', 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 17, 21, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '57f4a1e8b28a7d4f650bd4a2c2d248d59793bf51', 'committer_username': 'boomanaiden154', 'committer_name': 'Aiden Grossman', 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 17, 21, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e0a2132097488125aa5a74eeb25892c898cfa94b', 'committer_username': 'boomanaiden154', 'committer_name': 'Aiden Grossman', 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 17, 21, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0500ff9ba469d016dff8c237e76ad659799a8c47', 'committer_username': 'boomanaiden154', 'committer_name': 'Aiden Grossman', 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 17, 21, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '36eb6bafe4d9aa1b6c5a1770de960f5c241ae6f8', 'committer_username': 'boomanaiden154', 'committer_name': 'Aiden Grossman', 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 17, 21, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '74a8347de799dbc4c89f8e8de96a78f1142dd2e4', 'committer_username': 'boomanaiden154', 'committer_name': 'Aiden Grossman', 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 17, 21, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0b636224069a445dacc3f3891c31a28fdbebadd0', 'committer_username': 'boomanaiden154', 'committer_name': 'Aiden Grossman', 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 17, 21, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '60a541decc130c0bf6536734a30cf6232b1ef60c', 'committer_username': 'boomanaiden154', 'committer_name': 'Aiden Grossman', 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 17, 21, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '39a3feec324ae729ec2fba8739161fd41218b129', 'committer_username': 'boomanaiden154', 'committer_name': 'Aiden Grossman', 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 17, 21, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7277cd83343772d71c0c11c8affc9ca7a49ae9a4', 'committer_username': 'boomanaiden154', 'committer_name': 'Aiden Grossman', 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 17, 21, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6a2d5778090dbad06c4260e07b916926525f04c2', 'committer_username': 'boomanaiden154', 'committer_name': 'Aiden Grossman', 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 17, 21, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dc30df6fb22ec6d7243548b9a37bc0bf3388b8a5', 'committer_username': 'boomanaiden154', 'committer_name': 'Aiden Grossman', 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 17, 21, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5d6688f65add3c47aa1d72759f592950f25a84d2', 'committer_username': 'boomanaiden154', 'committer_name': 'Aiden Grossman', 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 17, 21, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '79f1884a891005c84f2ddd4066ab99b71dce03fc', 'committer_username': 'boomanaiden154', 'committer_name': 'Aiden Grossman', 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 17, 21, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6c960f9483d36e5989da167b9a511dab6d232bc1', 'committer_username': 'boomanaiden154', 'committer_name': 'Aiden Grossman', 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 17, 21, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7edc83814c9d916834d9f1a40b01cde9f6407309', 'committer_username': 'boomanaiden154', 'committer_name': 'Aiden Grossman', 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 17, 21, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7544d8fba32f201a68bec46b9bc4b048abc19e9f', 'committer_username': 'boomanaiden154', 'committer_name': 'Aiden Grossman', 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 17, 21, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd6e94ed9e17806ea9fd0063361aa58828cf3dc6e', 'committer_username': 'boomanaiden154', 'committer_name': 'Aiden Grossman', 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 17, 21, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c9b78fe1eaf9729c2ea0ac012364e63e409d2809', 'committer_username': 'boomanaiden154', 'committer_name': 'Aiden Grossman', 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 17, 21, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9d0a2ea1e62fd9cae2e24172455712b76a0753d9', 'committer_username': 'boomanaiden154', 'committer_name': 'Aiden Grossman', 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 17, 21, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5d160b0d1a2236d737bc2c5d55991db4aa1aae6b', 'committer_username': 'boomanaiden154', 'committer_name': 'Aiden Grossman', 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 17, 21, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '42af849819b17862c7490e3a6aee9063093a2c51', 'committer_username': 'yundiqian', 'committer_name': 'Yundi Qian', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 8, 2, 15, 21, tzinfo=datetime.timezone.utc)}]",Aiden Grossman,39388941,,User,,49,,0,25
1036278498,WIP: Integration tests,"This PR adds in integration tests to ensure that (most) of the current training workflows work as expected. This patch adds in one workflow based on the current demo that evaluates the workflow for the inlining case using fuschia as a corpus (not currently working, need to do some more debugging). For the regalloc case, I'm currently evaluating it against a chromium corpus with the bitcode embedding patch added in #117. The only major workflows that I think I'm currently missing would be corpora with ThinLTO, particularly inlining for chromium since that got upstreamed recently, but I'm planning on working on that in a separate patch if so desired.

TODO:
* [ ] Get Fuchsia inlining demo fully functional. Fuchsia build currently fails due to a missing `.code_patches` segment when the build system tries to run `llvm-objcopy` on something.
* [ ] Rebase against main once #117 gets merged.
* [ ] Move everything over to TFLite. Probably will be a separate patch to make the docker setup similar to what the buildbots are doing currently.",False,121,https://api.github.com/repos/google/ml-compiler-opt/pulls/121,https://github.com/google/ml-compiler-opt/pull/121,open,295,0,8,1,0,0,0,0,[],2022-08-25 05:42:59+00:00,,0.0,,[],"[{'commit_sha': 'f639f3101af04f4e622d05638aa3ba5f928d92da', 'committer_username': 'boomanaiden154', 'committer_name': 'Aiden Grossman', 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 17, 21, 46, 24, tzinfo=datetime.timezone.utc)}]",Aiden Grossman,39388941,,User,,49,,0,25
950134896,fix issues with gin bindings in demo,"With the recent transition to using gin to handle configuration so that adding more problem types is significantly more scalable (2ba448732b5c9aa9ed221ac70a0009293651701e), it seems like a couple things were overlooked in the inlining demo. The `compile_task` flag has been deprecated, but it was still present in the demo. There is also no mapping between `clang_path` and `llvm_size_path` and the actual config variables they need to alter (`runners.InliningRunner.*`). Finally, there is no flag providing the configuration implementation, which is needed according to the documentation in `compiler_opt/rl/problem_configuration.py`. This PR makes a couple quick fixes so that the demo functions as intended.",True,22,https://api.github.com/repos/google/ml-compiler-opt/pulls/22,https://github.com/google/ml-compiler-opt/pull/22,closed,3,1,1,1,0,0,0,0,[],2022-05-28 20:57:56+00:00,2022-05-28 23:16:33+00:00,8317.0,2:18:37,[],"[{'commit_sha': 'dade10c4c0141e3c477e85e39f6ba73f44dac7b3', 'committer_username': 'boomanaiden154', 'committer_name': 'Aiden Grossman', 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 17, 21, 46, 24, tzinfo=datetime.timezone.utc)}]",Aiden Grossman,39388941,,User,,49,,0,25
911725150,Update demo to add in notes on depot_tools and tensorflow versioning,"Added some misc notes to the documentation regarding tensorflow versioning. When I tried getting my initial compile setup working, I'm highly confident that compiling with Tensorflow v2.8.0 caused the build to fail (Tensorflow v2.7.0 isn't compatible with Python 3.10 on Ubuntu 22.04, so I had to downgrade to 20.04), and then I ran into some linking issues when I tried building with a more recent version of libtensorflow to try and make things compatible. This seems to have been noticed in commit e11c886edd7e1e362fae6bbae4f2fca659b22fb3, and I'm going to try and do some more investigation into this issue to see if I can get the libtensorflow version upgraded. However, the buildbot script seems to be using v2.6.0 happily, so maybe there's just something specific with the configuration of the demo?",True,19,https://api.github.com/repos/google/ml-compiler-opt/pulls/19,https://github.com/google/ml-compiler-opt/pull/19,closed,15,2,1,2,10,4,0,0,[],2022-04-18 05:46:40+00:00,2022-05-29 00:33:04+00:00,3523584.0,"40 days, 18:46:24","[{'comment_id': 852173132, 'comment_body': 'Can you add a comment on what those issues are and how to mitigate them?', 'comment_created': datetime.datetime(2022, 4, 18, 14, 53, 19, tzinfo=datetime.timezone.utc), 'commenter': 'mtrofin', 'type': 'User'}, {'comment_id': 852299082, 'comment_body': ""This shouldn't be needed. Jiri downloads CIPD and installs it in `${FUCHSIA_SRCDIR}/.jiri_root/bin/cipd`. If you follow the instructions at https://fuchsia.dev/fuchsia-src/get-started/get_fuchsia_source#set-up-environment-variables and set the environment variables as suggested, `cipd` should be in your `PATH`."", 'comment_created': datetime.datetime(2022, 4, 18, 18, 0, 56, tzinfo=datetime.timezone.utc), 'commenter': 'petrhosek', 'type': 'User'}, {'comment_id': 884188974, 'comment_body': 'Thanks for catching that. Should be fixed after the latest force push.', 'comment_created': datetime.datetime(2022, 5, 28, 23, 27, 50, tzinfo=datetime.timezone.utc), 'commenter': 'boomanaiden154', 'type': 'User'}, {'comment_id': 884192182, 'comment_body': 'Should be fixed in the latest version. I specified the specific type of issue (version incompatibility, pip will refuse to install required Python version), as well as potential mitigations (using a distro with a compatible python version/python virtual environment with a compatible python version).', 'comment_created': datetime.datetime(2022, 5, 29, 0, 13, 22, tzinfo=datetime.timezone.utc), 'commenter': 'boomanaiden154', 'type': 'User'}]","[{'commit_sha': 'ac008692d706dba9afa0ceb56a0a35998e30c124', 'committer_username': 'boomanaiden154', 'committer_name': 'Aiden Grossman', 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 17, 21, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '322f8d8e3fb6bfbc512b400c2567e99c8a3d8a89', 'committer_username': 'boomanaiden154', 'committer_name': 'Aiden Grossman', 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 17, 21, 46, 24, tzinfo=datetime.timezone.utc)}]",Aiden Grossman,39388941,,User,,49,,0,25
961217394,Modify regalloc runner to prevent needing a ThinLTO corpus for generating a default trace,"Currently, when running `generate_default_trace.py` against the regalloc problem, it errors out when not using a ThinLTO corpus due to the expansion of the `file_paths` variable. This patch preserves functionality for the ThinLTO case while also allowing running `generate_default_trace` against the regalloc runner without using a ThinLTO corpus.",True,23,https://api.github.com/repos/google/ml-compiler-opt/pulls/23,https://github.com/google/ml-compiler-opt/pull/23,closed,5,1,1,1,4,0,0,0,[],2022-06-08 06:02:19+00:00,2022-06-08 14:56:42+00:00,32063.0,8:54:23,[],"[{'commit_sha': '6b4570898099022d5c01cd19eb90ea840be6f9e8', 'committer_username': 'boomanaiden154', 'committer_name': 'Aiden Grossman', 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 17, 21, 46, 24, tzinfo=datetime.timezone.utc)}]",Aiden Grossman,39388941,,User,,49,,0,25
962222591,Added assert to ensure length of file_paths is valid,"Adds an assert to make sure that the length of `file_paths` in `_compile_fn` in `regalloc_runner.py` is valid. Should theoretically be limited by the declaration of the parameters as a tuple, but this still allows for smaller values, which we also want to detect and throw an error before anything else happens.",True,24,https://api.github.com/repos/google/ml-compiler-opt/pulls/24,https://github.com/google/ml-compiler-opt/pull/24,closed,6,2,1,1,4,4,0,0,[],2022-06-08 22:27:48+00:00,2022-06-10 01:21:03+00:00,96795.0,"1 day, 2:53:15","[{'comment_id': 894004780, 'comment_body': 'nit: could you use \'\' instead of """" for the consistency of the file, otherwise lgtm\r\n\r\nthanks for the fix!', 'comment_created': datetime.datetime(2022, 6, 9, 22, 15, 31, tzinfo=datetime.timezone.utc), 'commenter': 'yundiqian', 'type': 'User'}, {'comment_id': 894029739, 'comment_body': 'I just changed it to `""Instead of 2 or 3 file paths, got unexpected value""`. Let me know if you want me to change it from this.', 'comment_created': datetime.datetime(2022, 6, 9, 23, 11, 28, tzinfo=datetime.timezone.utc), 'commenter': 'boomanaiden154', 'type': 'User'}, {'comment_id': 894057557, 'comment_body': 'oh, i just mean use single quote \'\' instead of double quote """" for the string message cause the other places in this files are all using single quote \'\' (see line 72 and 73 above).\r\n\r\nSorry for the confusion -_-!', 'comment_created': datetime.datetime(2022, 6, 10, 0, 14, 16, tzinfo=datetime.timezone.utc), 'commenter': 'yundiqian', 'type': 'User'}, {'comment_id': 894071885, 'comment_body': 'That makes so much more sense. Sorry for the confusion. Should be fixed in the latest version.', 'comment_created': datetime.datetime(2022, 6, 10, 0, 57, 7, tzinfo=datetime.timezone.utc), 'commenter': 'boomanaiden154', 'type': 'User'}]","[{'commit_sha': 'e253a179e08f9e3465d764d566a01e2ccb187521', 'committer_username': 'boomanaiden154', 'committer_name': 'Aiden Grossman', 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 17, 21, 46, 24, tzinfo=datetime.timezone.utc)}]",Aiden Grossman,39388941,,User,,49,,0,25
971164139,Fixed regalloc behavioral cloning,"This patch adds the flag `regalloc.config.get_observation_processing_layer_creator.with_sqrt = False` to the regalloc behavioral cloning config. Without this flag explicitly being set to false, the models created by the behavioral cloning script for the regalloc model are not compatible with the local training script.",True,27,https://api.github.com/repos/google/ml-compiler-opt/pulls/27,https://github.com/google/ml-compiler-opt/pull/27,closed,1,0,1,1,0,0,0,0,[],2022-06-18 02:41:57+00:00,2022-06-18 03:16:41+00:00,2084.0,0:34:44,[],"[{'commit_sha': 'c71836a0b8641db231b59edce48b5817383c1c88', 'committer_username': 'boomanaiden154', 'committer_name': 'Aiden Grossman', 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 17, 21, 46, 24, tzinfo=datetime.timezone.utc)}]",Aiden Grossman,39388941,,User,,49,,0,25
978733003,Refactored regalloc gin configs,"This should help mitigate issues in the future like the one fixed in #27 as it refactors the gin configs for regalloc so that the common network parameters are stored in their own file and imported into the behavioral cloning and agent configs. Reducing code duplication and having a central place to make changes to the model should allow for easier changes and changes that are more likely to be correct. The same thing could probably also be done with the inlining config although with some differences due to the fact that there are many more configs (multiple common network configs need to be refactored out), and the standard behavioral cloning and agent configs use different network classes. Could be done with gin macros, but it doesn't refactor as nicely as the regalloc configs.",True,29,https://api.github.com/repos/google/ml-compiler-opt/pulls/29,https://github.com/google/ml-compiler-opt/pull/29,closed,17,19,3,1,0,2,0,0,[],2022-06-24 21:15:50+00:00,2022-06-27 06:51:44+00:00,207354.0,"2 days, 9:35:54","[{'comment_id': 906565245, 'comment_body': ""just call it network.gin as it's essentially defining the network"", 'comment_created': datetime.datetime(2022, 6, 24, 23, 51, 10, tzinfo=datetime.timezone.utc), 'commenter': 'yundiqian', 'type': 'User'}, {'comment_id': 906584045, 'comment_body': 'you may also move this to network.gin', 'comment_created': datetime.datetime(2022, 6, 24, 23, 54, 26, tzinfo=datetime.timezone.utc), 'commenter': 'yundiqian', 'type': 'User'}]","[{'commit_sha': '1393af083ebcf2c067de97e9c144dafc0adc29cd', 'committer_username': 'boomanaiden154', 'committer_name': 'Aiden Grossman', 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 17, 21, 46, 24, tzinfo=datetime.timezone.utc)}]",Aiden Grossman,39388941,,User,,49,,0,25
979388878,Only generate/use vocab when needed,"Currently, the vocab generator generates quantile buckets for all the different features regardless of whether or not they are relevant. This patch adds an option into the problem config so that features that don't require quantile buckets won't have them generated. This saves on some performance during vocab generation and prevents having to load a couple things during the preprocessing layer generation (although the latter difference is extremely insignificant). In addition to the config option, this patch also ties the config option into the vocab generator and both current problem configs. The major advantage of this feature is that it skips vocab generation for extremely large features (eg the new instruction based features for the regalloc model) that don't need vocab generated and use up a massive amount of memory (hundreds of gigabytes) during vocab generation for no real reason. I have already validated the changes against both the inlining config (based on the demo), and the regalloc config (based on [these](https://github.com/boomanaiden154/gsoc2022-notes/blob/master/june/3/regalloc-model-training.md) instructions).",True,30,https://api.github.com/repos/google/ml-compiler-opt/pulls/30,https://github.com/google/ml-compiler-opt/pull/30,closed,68,20,8,1,0,7,0,0,[],2022-06-26 20:44:23+00:00,2022-06-30 07:18:06+00:00,297223.0,"3 days, 10:33:43","[{'comment_id': 907683674, 'comment_body': 'can this have a default implementation returning []?', 'comment_created': datetime.datetime(2022, 6, 27, 18, 34, 14, tzinfo=datetime.timezone.utc), 'commenter': 'mtrofin', 'type': 'User'}, {'comment_id': 907705531, 'comment_body': ""Fixed. Also removed the `@abc.abstractmethod` decorator so that if it doesn't have to be overridden."", 'comment_created': datetime.datetime(2022, 6, 27, 19, 0, 16, tzinfo=datetime.timezone.utc), 'commenter': 'boomanaiden154', 'type': 'User'}, {'comment_id': 907730062, 'comment_body': 'nit: make them in the same line?', 'comment_created': datetime.datetime(2022, 6, 27, 19, 32, 56, tzinfo=datetime.timezone.utc), 'commenter': 'yundiqian', 'type': 'User'}, {'comment_id': 907732547, 'comment_body': 'nit: move it after get_preprocessing_layer_creator and before runner to be consistent of other files', 'comment_created': datetime.datetime(2022, 6, 27, 19, 36, 9, tzinfo=datetime.timezone.utc), 'commenter': 'yundiqian', 'type': 'User'}, {'comment_id': 907739099, 'comment_body': ""this is not needed cause it's in the first line of common.gin"", 'comment_created': datetime.datetime(2022, 6, 27, 19, 45, 10, tzinfo=datetime.timezone.utc), 'commenter': 'yundiqian', 'type': 'User'}, {'comment_id': 907740038, 'comment_body': 'nit: move it right after line 140 cause logically they are closer --- we parse the gin in order to get features_to_not_process', 'comment_created': datetime.datetime(2022, 6, 27, 19, 46, 31, tzinfo=datetime.timezone.utc), 'commenter': 'yundiqian', 'type': 'User'}, {'comment_id': 907947320, 'comment_body': ""The `--gin_bindings` flag should also probably be removed on a couple other parts of the demo where it is just used to set the config. I can probably open up a PR to fix that, but it isn't a super critical issue."", 'comment_created': datetime.datetime(2022, 6, 28, 1, 50, 46, tzinfo=datetime.timezone.utc), 'commenter': 'boomanaiden154', 'type': 'User'}]","[{'commit_sha': '48c26da5771c45cd36e1316b4ced81d251454964', 'committer_username': 'boomanaiden154', 'committer_name': 'Aiden Grossman', 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 17, 21, 46, 24, tzinfo=datetime.timezone.utc)}]",Aiden Grossman,39388941,,User,,49,,0,25
995821144,Refactor dev dependencies to separate requirements file,"This patch refactors the development dependencies in the current CI workflow into a new requirements file, `dev-requirements.txt`. This file then replaces the manually specified packages within the CI config and allows for easy installation of the development dependencies inside of a dev environment for performing tasks like running tests locally rather than hiding them away within the CI.",True,51,https://api.github.com/repos/google/ml-compiler-opt/pulls/51,https://github.com/google/ml-compiler-opt/pull/51,closed,6,6,3,1,2,0,0,0,[],2022-07-13 18:35:45+00:00,2022-07-13 20:12:14+00:00,5789.0,1:36:29,[],"[{'commit_sha': 'ee645b84a61bc049cbdbc4d5724d9e2fb15f4428', 'committer_username': 'boomanaiden154', 'committer_name': 'Aiden Grossman', 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 17, 21, 46, 24, tzinfo=datetime.timezone.utc)}]",Aiden Grossman,39388941,,User,,49,,0,25
997271496,Add yapf to CI and dev dependencies,"Since we are now using yapf to format the repository, it makes sense to
have yapf in the development requirements. This commit also adds a yapf
format check to the CI to ensure that all new code changes are properly
formatted.",True,59,https://api.github.com/repos/google/ml-compiler-opt/pulls/59,https://github.com/google/ml-compiler-opt/pull/59,closed,4,0,2,1,0,0,0,0,[],2022-07-15 01:53:52+00:00,2022-07-15 15:18:02+00:00,48250.0,13:24:10,[],"[{'commit_sha': '86d1ff72085ca53b75e3c19ea24e1e32378544bd', 'committer_username': 'boomanaiden154', 'committer_name': 'Aiden Grossman', 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 17, 21, 46, 24, tzinfo=datetime.timezone.utc)}]",Aiden Grossman,39388941,,User,,49,,0,25
993882020,Added dockerfile with base dependencies,"@petrhosek Here are the base dependencies for `ml-compiler-opt` based on the buildbot dependencies. I'm assuming you're just using all of these dependencies for building LLVM/clang? This is what I guess would be considered the ""official"" dependency setup for LLVM, but depending upon what you need, I can change it up. Just let me know.",True,49,https://api.github.com/repos/google/ml-compiler-opt/pulls/49,https://github.com/google/ml-compiler-opt/pull/49,closed,10,0,1,1,2,14,0,1,[],2022-07-12 06:23:14+00:00,2022-07-18 14:50:23+00:00,548829.0,"6 days, 8:27:09","[{'comment_id': 919367176, 'comment_body': ""IIUC, the goal is to just enable running the training tool from docker, not to also build llvm. So we don't need to apt-get install more than python and whatever else needed for ml-compiler-opt project tools."", 'comment_created': datetime.datetime(2022, 7, 12, 19, 55, 27, tzinfo=datetime.timezone.utc), 'commenter': 'mtrofin', 'type': 'User'}, {'comment_id': 919387445, 'comment_body': 'Training as in just running behavioral cloning or also running RL training? Training the model after warmstart would still require a LLVM checkout and a compile if I understand correctly.', 'comment_created': datetime.datetime(2022, 7, 12, 20, 13, 7, tzinfo=datetime.timezone.utc), 'commenter': 'boomanaiden154', 'type': 'User'}, {'comment_id': 919559285, 'comment_body': ""I don't think that LLVM should be a part of the container, `clang` and `llvm-size` should be provided by the user and every user would likely want to use their own version."", 'comment_created': datetime.datetime(2022, 7, 13, 1, 19, 34, tzinfo=datetime.timezone.utc), 'commenter': 'petrhosek', 'type': 'User'}, {'comment_id': 919559779, 'comment_body': 'Okay. So the only things that you need would be the python runtime/dependencies?', 'comment_created': datetime.datetime(2022, 7, 13, 1, 21, 2, tzinfo=datetime.timezone.utc), 'commenter': 'boomanaiden154', 'type': 'User'}, {'comment_id': 919570491, 'comment_body': 'We should avoid any temporary files since become part of the container and take up extra space. The typical way to achieve that is to use `curl` and `tar` in the streaming mode:\r\n\r\n```\r\nmkdir /tensorflow && curl -s https://storage.googleapis.com/tensorflow/libtensorflow/libtensorflow-cpu-linux-x86_64-1.15.0.tar.gz | tar xzv -C /tensorflow\r\n```', 'comment_created': datetime.datetime(2022, 7, 13, 1, 49, 19, tzinfo=datetime.timezone.utc), 'commenter': 'petrhosek', 'type': 'User'}, {'comment_id': 919584305, 'comment_body': 'We also need define a volume for any input and output data, see https://docs.docker.com/engine/reference/builder/#volume. This will be used for toolchain, corpus, vocab, warmstart, and the trained model.', 'comment_created': datetime.datetime(2022, 7, 13, 2, 4, 19, tzinfo=datetime.timezone.utc), 'commenter': 'petrhosek', 'type': 'User'}, {'comment_id': 919585158, 'comment_body': 'Yes that should be sufficient.', 'comment_created': datetime.datetime(2022, 7, 13, 2, 6, 40, tzinfo=datetime.timezone.utc), 'commenter': 'petrhosek', 'type': 'User'}, {'comment_id': 919597575, 'comment_body': ""btw, you don't need that tar for running training. That's for the clang side - building and running it (clang)"", 'comment_created': datetime.datetime(2022, 7, 13, 2, 39, 6, tzinfo=datetime.timezone.utc), 'commenter': 'mtrofin', 'type': 'User'}, {'comment_id': 919603934, 'comment_body': ""Like Mircea mentioned, this isn't needed for just running training, so I've removed it."", 'comment_created': datetime.datetime(2022, 7, 13, 2, 55, 28, tzinfo=datetime.timezone.utc), 'commenter': 'boomanaiden154', 'type': 'User'}, {'comment_id': 919604268, 'comment_body': ""I defined one volume mounted at `/external`. I'm thinking it might be better to have individual volumes for all of the components listed above though? Let me know what works better for your workflow."", 'comment_created': datetime.datetime(2022, 7, 13, 2, 56, 25, tzinfo=datetime.timezone.utc), 'commenter': 'boomanaiden154', 'type': 'User'}, {'comment_id': 923050309, 'comment_body': ""I think that's fine for now, we can always add more volumes later if needed."", 'comment_created': datetime.datetime(2022, 7, 18, 7, 43, 2, tzinfo=datetime.timezone.utc), 'commenter': 'petrhosek', 'type': 'User'}, {'comment_id': 923051688, 'comment_body': 'Sounds good. Should be good to merge then?', 'comment_created': datetime.datetime(2022, 7, 18, 7, 44, 58, tzinfo=datetime.timezone.utc), 'commenter': 'boomanaiden154', 'type': 'User'}, {'comment_id': 923052608, 'comment_body': 'This is just a nit, but there should be a newline at end of file.', 'comment_created': datetime.datetime(2022, 7, 18, 7, 46, 10, tzinfo=datetime.timezone.utc), 'commenter': 'petrhosek', 'type': 'User'}, {'comment_id': 923054497, 'comment_body': 'Fixed.', 'comment_created': datetime.datetime(2022, 7, 18, 7, 48, 37, tzinfo=datetime.timezone.utc), 'commenter': 'boomanaiden154', 'type': 'User'}]","[{'commit_sha': 'cb982191069387a934cdcb7dbb8089476f934118', 'committer_username': 'boomanaiden154', 'committer_name': 'Aiden Grossman', 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 17, 21, 46, 24, tzinfo=datetime.timezone.utc)}]",Aiden Grossman,39388941,,User,,49,,0,25
1014589881,Add development mode dockerfile and info on use,Development mode dockerfile and instructions on use in a `README.md` inside a newly created `docker/` directory. Should be something useful for anyone working on the project who is struggling with creating a working build environment and also general development workflows that use docker.,True,78,https://api.github.com/repos/google/ml-compiler-opt/pulls/78,https://github.com/google/ml-compiler-opt/pull/78,closed,76,0,2,1,0,2,0,0,[],2022-08-02 04:07:57+00:00,2022-08-02 14:19:08+00:00,36671.0,10:11:11,"[{'comment_id': 935104234, 'comment_body': ""a thought: should we name the directory `experimental`, and then there's even more hinting that this is... well... experimental/best effort support?\r\n"", 'comment_created': datetime.datetime(2022, 8, 2, 4, 32, 7, tzinfo=datetime.timezone.utc), 'commenter': 'mtrofin', 'type': 'User'}, {'comment_id': 935182546, 'comment_body': 'Sounds like a decent idea to me. I moved the entire `docker/` directory to `experimental/docker/` in case we want to put anything else in there later and also to segment it a little bit better. Thanks for the suggestion.', 'comment_created': datetime.datetime(2022, 8, 2, 6, 57, 15, tzinfo=datetime.timezone.utc), 'commenter': 'boomanaiden154', 'type': 'User'}]","[{'commit_sha': '3778deaae8c4047affe32c7a49e4e43225ed033d', 'committer_username': 'boomanaiden154', 'committer_name': 'Aiden Grossman', 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 17, 21, 46, 24, tzinfo=datetime.timezone.utc)}]",Aiden Grossman,39388941,,User,,49,,0,25
1021922474,Fix formatting for CI,One line diff that should fix the formatting error currently breaking the CI.,True,92,https://api.github.com/repos/google/ml-compiler-opt/pulls/92,https://github.com/google/ml-compiler-opt/pull/92,closed,1,0,1,1,0,0,0,0,[],2022-08-09 19:58:39+00:00,2022-08-09 20:00:37+00:00,118.0,0:01:58,[],"[{'commit_sha': '13e9fa0b95ee0aa80b6793ab520d0c1b77efca98', 'committer_username': 'boomanaiden154', 'committer_name': 'Aiden Grossman', 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 17, 21, 46, 24, tzinfo=datetime.timezone.utc)}]",Aiden Grossman,39388941,,User,,49,,0,25
1037552446,Pin all tensorflow nightly dependencies,"Currently, some of the dependencies that get pulled in by the tensorflow nightly packages pull in the current nightly version rather than the nightly version that is currently set in `requirements.txt`. This PR pins all of these dependencies to the correct versions, removes some of the older dependencies that need to be replaced by a nightly version, and bumps some other tensorflow related packages.",True,122,https://api.github.com/repos/google/ml-compiler-opt/pulls/122,https://github.com/google/ml-compiler-opt/pull/122,closed,6,6,1,1,0,0,0,0,[],2022-08-26 06:09:48+00:00,2022-08-26 14:57:55+00:00,31687.0,8:48:07,[],"[{'commit_sha': '9d1442b7d8e496435c5509831291d2f08f86ebb1', 'committer_username': 'boomanaiden154', 'committer_name': 'Aiden Grossman', 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 17, 21, 46, 24, tzinfo=datetime.timezone.utc)}]",Aiden Grossman,39388941,,User,,49,,0,25
1037717187,Migrate to Python 3.10,This PR changes the Github CI to test against Python 3.9 and 3.10 instead of 3.8 and 3.9. Could be adjusted if we still want to support 3.8 though. Also adjusts the versions of some dependencies so that they are compatible with 3.10. There are a couple new deprecation warnings internal to tensorflow that I've excluded in the `pytest.ini`. Nothing super major and I'm guessing it will get fixed by the time anything gets even close to being deprecated.,True,123,https://api.github.com/repos/google/ml-compiler-opt/pulls/123,https://github.com/google/ml-compiler-opt/pull/123,closed,15,5,3,1,1,2,0,0,[],2022-08-26 09:11:07+00:00,2022-08-26 16:06:23+00:00,24916.0,6:55:16,"[{'comment_id': 956038653, 'comment_body': 'keep 3.8', 'comment_created': datetime.datetime(2022, 8, 26, 13, 22, 59, tzinfo=datetime.timezone.utc), 'commenter': 'mtrofin', 'type': 'User'}, {'comment_id': 956039296, 'comment_body': ""leave to 3.8 - it's where the most errors will likely pop, stuff like type annotations. 3.10 is what probably people have already, so they can just run pytest and whatnot by hand."", 'comment_created': datetime.datetime(2022, 8, 26, 13, 23, 43, tzinfo=datetime.timezone.utc), 'commenter': 'mtrofin', 'type': 'User'}]","[{'commit_sha': '98f6789e49d10e6de9dd5c2427c9353e6638b6ae', 'committer_username': 'boomanaiden154', 'committer_name': 'Aiden Grossman', 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 17, 21, 46, 24, tzinfo=datetime.timezone.utc)}]",Aiden Grossman,39388941,,User,,49,,0,25
1037731426,Update dockerfiles,"Update the dockerfiles to take advantage of the fact that we can now use newer versions of Python. The base image gets bumped to Ubuntu 22.04 which ships Python 3.10 by default, and the development docker image has all of the TFLite stuff ready to compile LLVM with in the `/tflite` directory.

Currently blocked on #123 due to some of the versions that need to be adjusted so that everything installs smoothly when using Python 3.10.",True,124,https://api.github.com/repos/google/ml-compiler-opt/pulls/124,https://github.com/google/ml-compiler-opt/pull/124,closed,15,23,2,1,1,0,0,0,[],2022-08-26 09:25:23+00:00,2022-09-07 17:28:47+00:00,1065804.0,"12 days, 8:03:24",[],"[{'commit_sha': '52071fbb472ab50a2330ded592d5dbe710881016', 'committer_username': 'boomanaiden154', 'committer_name': 'Aiden Grossman', 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 17, 21, 46, 24, tzinfo=datetime.timezone.utc)}]",Aiden Grossman,39388941,,User,,49,,0,25
1044557369,Move to using lockfiles and pip install --no-deps,"This patch moves from using a somewhat standard `requirements.txt` (it seems to have been a lockfile at somepoint in the past) to making all of the `requirements*.txt` files into lockfiles and then installing with `pip3 install --no-deps`. This is done for two reasons:

* It gives some more flexibility in what dependencies of what packages we're installing. This is essentially in #94 so that we don't end up with two separate tensorboard installations (`tensorboard` and `tb-nightly`) due to how upstream has setup their dependencies.
* It allows for more reproducible builds as all packages are tagged with a specific version.

This PR also includes a couple other minor improvements:
* upgrade `grpcio` - With the version that we were using previously, there was no downloadable version for Python 3.10, meaning it got compiled from source everytime the CI ran. This made the Python 3.10 jobs take significantly longer to run.
* Removed quiet switch from pip - This makes debugging easier and doesn't really hurt anything given that the output of each step in Github actions is collapsed by default and the pip installation is in its own step.
* Added a new warning to pytest ignore from tf_agents. Some package version changed and it popped up (also somewhat hard to debug given it only shows up on Python 3.10.6 and not Python 3.10.4).",False,128,https://api.github.com/repos/google/ml-compiler-opt/pulls/128,https://github.com/google/ml-compiler-opt/pull/128,closed,106,47,6,5,7,0,0,0,[],2022-09-02 06:52:09+00:00,2022-10-29 00:33:20+00:00,4902071.0,"56 days, 17:41:11",[],"[{'commit_sha': '13667ba715b4b016ce638cc78772f5eb9e682ab0', 'committer_username': 'boomanaiden154', 'committer_name': 'Aiden Grossman', 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 17, 21, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5590f2abb59ec8f992d14e79c18820f9fb7de9f6', 'committer_username': 'boomanaiden154', 'committer_name': 'Aiden Grossman', 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 17, 21, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '67560f8d55aabc16cf987ef7e9ecbc0f3cd87e38', 'committer_username': 'boomanaiden154', 'committer_name': 'Aiden Grossman', 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 17, 21, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3d6367de6b0401d0348514dc3929138b0712f5e5', 'committer_username': 'boomanaiden154', 'committer_name': 'Aiden Grossman', 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 17, 21, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cc71b350aba9bf3380f417737809f55c58fe29fd', 'committer_username': 'boomanaiden154', 'committer_name': 'Aiden Grossman', 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 17, 21, 46, 24, tzinfo=datetime.timezone.utc)}]",Aiden Grossman,39388941,,User,,49,,0,25
995909656,Refactored train_eval to use num_modules from gin configs,"This patch refactors the passed `num_modules` flag in `train_locally.py` into a setting in the gin configs while preserving the default value of 100. This is a parameter that can have a major impact on the performance of a trained model (at least with the regalloc case) and thus should probably be specified in the gin configs (when it deviates from the default value of 100) for the sake of reproducibility. 

Eg for the regalloc case, the result with `num_modules` set to 512 is a graph of the mean reward per iteration which displays the characteristic shape of a model that is training properly (only trained for 100k iterations):
![image](https://user-images.githubusercontent.com/39388941/178826981-b7c25bc5-2148-4e62-8221-99feb7e3416c.png)
 And this is the same model trained for 600k iterations with `num_modules` set to 100:
![image](https://user-images.githubusercontent.com/39388941/178827443-43d7c7ed-18e1-4c3e-9488-3b4bf5fcc0f4.png)
",True,53,https://api.github.com/repos/google/ml-compiler-opt/pulls/53,https://github.com/google/ml-compiler-opt/pull/53,closed,4,3,3,1,2,4,0,0,[],2022-07-13 20:24:45+00:00,2022-07-15 00:09:03+00:00,99858.0,"1 day, 3:44:18","[{'comment_id': 920512116, 'comment_body': 'also add the flag to inlining ppo gin file', 'comment_created': datetime.datetime(2022, 7, 13, 21, 3, 34, tzinfo=datetime.timezone.utc), 'commenter': 'yundiqian', 'type': 'User'}, {'comment_id': 920513332, 'comment_body': 'can you add num_modules between num_policy_iterations and num_iterations, just want to group relevant parameters together', 'comment_created': datetime.datetime(2022, 7, 13, 21, 5, 19, tzinfo=datetime.timezone.utc), 'commenter': 'yundiqian', 'type': 'User'}, {'comment_id': 920560006, 'comment_body': 'With the same value?', 'comment_created': datetime.datetime(2022, 7, 13, 22, 23, 8, tzinfo=datetime.timezone.utc), 'commenter': 'boomanaiden154', 'type': 'User'}, {'comment_id': 920619703, 'comment_body': 'keep 100 here', 'comment_created': datetime.datetime(2022, 7, 14, 0, 51, 12, tzinfo=datetime.timezone.utc), 'commenter': 'yundiqian', 'type': 'User'}]","[{'commit_sha': '6c8bcac43e95bf6066dddb81cf83e1dae55dceb3', 'committer_username': 'boomanaiden154', 'committer_name': 'Aiden Grossman', 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 17, 21, 46, 24, tzinfo=datetime.timezone.utc)}]",Aiden Grossman,39388941,,User,,49,,0,25
998564123,Make the tensorboard data interval adjustable,"Currently, all of the tensorboard variables get updated every
single iteration. This is quite costly in terms of performance. I'm
seeing about a 25% performance improvement by just running this once
every 100 iterations instead of running it every iteration. The data
showing up in tensorboard will definitely be more sparse, but when
running everything locally, it seems to all appear just fine, and I'm not sure
getting data down to the iteration level is quite necessary, especially
given the large performance penalty.

I implemented this as an optional flag that can be passed from the command
line with what I believe is a reasonable default (once every 100 iterations), 
so it can be easily adjusted by the user if necessary while also being
a completely reasonable default for good tensorboard data/little
performance loss.",True,62,https://api.github.com/repos/google/ml-compiler-opt/pulls/62,https://github.com/google/ml-compiler-opt/pull/62,closed,45,36,2,1,0,14,0,0,[],2022-07-17 05:18:28+00:00,2022-07-19 02:23:06+00:00,162278.0,"1 day, 21:04:38","[{'comment_id': 923665200, 'comment_body': ""looks a good idea to set it to be 100 here, let's just make it as default"", 'comment_created': datetime.datetime(2022, 7, 18, 17, 56, 33, tzinfo=datetime.timezone.utc), 'commenter': 'yundiqian', 'type': 'User'}, {'comment_id': 923667047, 'comment_body': 'and call it summary_log_interval to be consistent and move it between log_interval and summary_interval\r\n\r\nalso add it to Args in docstring below', 'comment_created': datetime.datetime(2022, 7, 18, 17, 58, 17, tzinfo=datetime.timezone.utc), 'commenter': 'yundiqian', 'type': 'User'}, {'comment_id': 923669144, 'comment_body': 'no need to add a flag cause users can set it with gin config if they really want to change it', 'comment_created': datetime.datetime(2022, 7, 18, 18, 0, 21, tzinfo=datetime.timezone.utc), 'commenter': 'yundiqian', 'type': 'User'}, {'comment_id': 923865936, 'comment_body': 'nit: can you change it to summary_export_interval to be more clear?', 'comment_created': datetime.datetime(2022, 7, 18, 21, 14, 40, tzinfo=datetime.timezone.utc), 'commenter': 'yundiqian', 'type': 'User'}, {'comment_id': 923866923, 'comment_body': 'why the test doesnot fail?', 'comment_created': datetime.datetime(2022, 7, 18, 21, 16, 9, tzinfo=datetime.timezone.utc), 'commenter': 'yundiqian', 'type': 'User'}, {'comment_id': 923868053, 'comment_body': 'nit: move it above between self._log_interval = log_interval and self._summary_interval = summary_interval', 'comment_created': datetime.datetime(2022, 7, 18, 21, 18, 1, tzinfo=datetime.timezone.utc), 'commenter': 'yundiqian', 'type': 'User'}, {'comment_id': 923868425, 'comment_body': 'nit: move it below after self._last_log_step = 0', 'comment_created': datetime.datetime(2022, 7, 18, 21, 18, 36, tzinfo=datetime.timezone.utc), 'commenter': 'yundiqian', 'type': 'User'}, {'comment_id': 923875752, 'comment_body': ""It will fail on this revision because I forgot to change the variable name here (will fix). I forget the exact details, but with all the mocking that is setup for that test, I think it only runs ten iterations or something and then expects tensorboard data to be written after that, which it isn't getting because the new default summary export interval is significantly longer. I can rework the test if you want, but I felt that just changing the parameter was sufficient while still having the test touch on all the functionality that it needs to."", 'comment_created': datetime.datetime(2022, 7, 18, 21, 29, 15, tzinfo=datetime.timezone.utc), 'commenter': 'boomanaiden154', 'type': 'User'}, {'comment_id': 923876521, 'comment_body': ""Just refactored to get rid of the command line option. Do you want me to put default values in the gin config files so that it's easier to find the flag to change there in the future?"", 'comment_created': datetime.datetime(2022, 7, 18, 21, 30, 20, tzinfo=datetime.timezone.utc), 'commenter': 'boomanaiden154', 'type': 'User'}, {'comment_id': 923886231, 'comment_body': 'sorry for the confusion...github is not clear in terms of what line i choose -_-!\r\n\r\ni mean to have summary_log_interval for the ones you added, and rename summary_interval to be summary_export_interval to make these two flags more clear', 'comment_created': datetime.datetime(2022, 7, 18, 21, 43, 1, tzinfo=datetime.timezone.utc), 'commenter': 'yundiqian', 'type': 'User'}, {'comment_id': 923887655, 'comment_body': 'yeah, just changing the parameter is good enough, the mock thing in the unit test is intended to make it a ""unit test"" :)', 'comment_created': datetime.datetime(2022, 7, 18, 21, 44, 59, tzinfo=datetime.timezone.utc), 'commenter': 'yundiqian', 'type': 'User'}, {'comment_id': 923887944, 'comment_body': ""not needed cause we don't really expect to change these values"", 'comment_created': datetime.datetime(2022, 7, 18, 21, 45, 32, tzinfo=datetime.timezone.utc), 'commenter': 'yundiqian', 'type': 'User'}, {'comment_id': 923900730, 'comment_body': ""Should be fixed now. I should probably also pay more attention to what line a comment indicates (since it's the bottom one), and also think about what I'm doing a little bit more. :p"", 'comment_created': datetime.datetime(2022, 7, 18, 22, 8, 32, tzinfo=datetime.timezone.utc), 'commenter': 'boomanaiden154', 'type': 'User'}, {'comment_id': 923922102, 'comment_body': 'nit: _summary_last_log_step', 'comment_created': datetime.datetime(2022, 7, 18, 22, 53, 29, tzinfo=datetime.timezone.utc), 'commenter': 'yundiqian', 'type': 'User'}]","[{'commit_sha': 'aa83fa8f9540ed3e0093223a69409155d7993fb6', 'committer_username': 'boomanaiden154', 'committer_name': 'Aiden Grossman', 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 17, 21, 46, 24, tzinfo=datetime.timezone.utc)}]",Aiden Grossman,39388941,,User,,49,,0,25
1018137527,Refactor generate_default_trace to accept build command CLI modification,"options from gin_configs

Currently there are two places where we are specifying
deletions/additional flags when processing commands for building object
files, in ppo_nn_agent.gin for both the inlining and regalloc case. This
patch refactors generate_default_trace.py into two separate files so
that the actual function that handles the tracing can be configured in a
gin file. There are new gin files for the regalloc and inliner case that
specify options specifically for the default trace. This makes
maintenance easier as if these flag options need to change, they only
have to be changed in one place (per optimization case). This also makes
it possible to still warmstart models easily if the flags between the
two cases diverge, and it makes it possible to specify other options for
the default trace at the gin config level. This also makes it easier to
enable development mode features such as those added in at https://reviews.llvm.org/D131209
(gated behind a LLVM flag).",True,84,https://api.github.com/repos/google/ml-compiler-opt/pulls/84,https://github.com/google/ml-compiler-opt/pull/84,closed,30,35,6,1,3,16,0,0,[],2022-08-05 00:50:36+00:00,2022-08-09 19:43:01+00:00,413545.0,"4 days, 18:52:25","[{'comment_id': 939165563, 'comment_body': 'update the comments here', 'comment_created': datetime.datetime(2022, 8, 5, 19, 30, 47, tzinfo=datetime.timezone.utc), 'commenter': 'yundiqian', 'type': 'User'}, {'comment_id': 939167913, 'comment_body': 'nit: reverse the order', 'comment_created': datetime.datetime(2022, 8, 5, 19, 34, 50, tzinfo=datetime.timezone.utc), 'commenter': 'yundiqian', 'type': 'User'}, {'comment_id': 939256573, 'comment_body': 'Removing these lines will break the google internal trainer (train_with_rpc.py) since this gin file is shared by train_locally.py and train_with_rpc.py. \r\n\r\nI think to avoid such unexpected conflicts we should have a separate internal-only copy of gin files. What do you think @yundiqian?\r\n', 'comment_created': datetime.datetime(2022, 8, 5, 21, 36, 58, tzinfo=datetime.timezone.utc), 'commenter': 'kshiteejm', 'type': 'User'}, {'comment_id': 939353235, 'comment_body': ""we don't need to, we can also do similar things internally, but yes, there needs to be a fix"", 'comment_created': datetime.datetime(2022, 8, 5, 22, 8, 25, tzinfo=datetime.timezone.utc), 'commenter': 'yundiqian', 'type': 'User'}, {'comment_id': 939372043, 'comment_body': ""what is the problem if you don't have the mocking here?"", 'comment_created': datetime.datetime(2022, 8, 5, 22, 13, 12, tzinfo=datetime.timezone.utc), 'commenter': 'yundiqian', 'type': 'User'}, {'comment_id': 939372598, 'comment_body': 'can you still make them gin configurable?', 'comment_created': datetime.datetime(2022, 8, 5, 22, 13, 32, tzinfo=datetime.timezone.utc), 'commenter': 'yundiqian', 'type': 'User'}, {'comment_id': 939383461, 'comment_body': 'agreed', 'comment_created': datetime.datetime(2022, 8, 5, 22, 16, 36, tzinfo=datetime.timezone.utc), 'commenter': 'kshiteejm', 'type': 'User'}, {'comment_id': 939385658, 'comment_body': ""It will error out as `registry.get_configuration` relies on being configured through gin and it doesn't get configured by pytest, so we need to mock it so that it doesn't rely on being configured through a gin file."", 'comment_created': datetime.datetime(2022, 8, 5, 22, 17, 18, tzinfo=datetime.timezone.utc), 'commenter': 'boomanaiden154', 'type': 'User'}, {'comment_id': 939408435, 'comment_body': ""I believe we should be able to. In the problem-specific implementation of this flag we can create a function that takes in a parameter of flags to return and then return that list from `flags_to_add` and `flags_to_delete` within that implementation. It's not a super elegant way to do it though. I can't really think of anything better, but that doesn't mean something better doesn't exist."", 'comment_created': datetime.datetime(2022, 8, 5, 22, 23, 52, tzinfo=datetime.timezone.utc), 'commenter': 'boomanaiden154', 'type': 'User'}, {'comment_id': 940679071, 'comment_body': 'use Tuple here, same below', 'comment_created': datetime.datetime(2022, 8, 8, 21, 27, 38, tzinfo=datetime.timezone.utc), 'commenter': 'yundiqian', 'type': 'User'}, {'comment_id': 940683490, 'comment_body': ""you can have gin configs following the code in line 112~115\r\n\r\ni have the runner mock here because we don't want to really run compilation here; for you change, you don't need the mock"", 'comment_created': datetime.datetime(2022, 8, 8, 21, 34, 26, tzinfo=datetime.timezone.utc), 'commenter': 'yundiqian', 'type': 'User'}, {'comment_id': 940722000, 'comment_body': 'bindings=None would work', 'comment_created': datetime.datetime(2022, 8, 8, 22, 38, 39, tzinfo=datetime.timezone.utc), 'commenter': 'yundiqian', 'type': 'User'}, {'comment_id': 940724692, 'comment_body': 'does it need to happen here?\r\n\r\ndoes it work if you move it to the setUp of the test class?', 'comment_created': datetime.datetime(2022, 8, 8, 22, 44, tzinfo=datetime.timezone.utc), 'commenter': 'yundiqian', 'type': 'User'}, {'comment_id': 940749867, 'comment_body': ""Moving it to the `setUp` function causes gin to complain that the config is locked. This makes sense as `unlock_config` creates a context manager designed to be used with a `with` statement, so all the context will get destroyed before the actual test functions get called. I don't see any easy way to create this context in a function that covers the entire test class."", 'comment_created': datetime.datetime(2022, 8, 8, 23, 36, 3, tzinfo=datetime.timezone.utc), 'commenter': 'boomanaiden154', 'type': 'User'}, {'comment_id': 940880027, 'comment_body': ""have you tried that? gin complains here for config is locked as well, that's why there is the with gin.unlock_config() here\r\n\r\ni think you only need the gin.parse_... in the gin.unlock_config() context for it to work. after running it, the gin overwritten is already happening, and you don't need the rest of your code to be in the context."", 'comment_created': datetime.datetime(2022, 8, 9, 4, 20, 16, tzinfo=datetime.timezone.utc), 'commenter': 'yundiqian', 'type': 'User'}, {'comment_id': 941718759, 'comment_body': 'Moving both the `gin.unlock_config` statement and the config parsing to the `setUp()` function works. For some reason initially I only thought to move the `gin.unlock_config()` statement to the setup which definitely did not work. Thanks for the suggestion and your persistence.', 'comment_created': datetime.datetime(2022, 8, 9, 19, 18, 20, tzinfo=datetime.timezone.utc), 'commenter': 'boomanaiden154', 'type': 'User'}]","[{'commit_sha': '623fdccf3a47f559c0ca219d8879cbd3c9b3acb2', 'committer_username': 'boomanaiden154', 'committer_name': 'Aiden Grossman', 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 17, 21, 46, 24, tzinfo=datetime.timezone.utc)}]",Aiden Grossman,39388941,,User,,49,,0,25
1022093028,Prevent TF from logging info messages during data collection,"Currently, whenever a TF model gets loaded in by LLVM in the
development mode advisors, TF outputs a slew of info messages
to STDOUT that aren't particularly useful. This patch gets
rid of those messages by setting an environment variable when
running the compilation commands that only enables warnings
and errors to be printed to the console. This makes it much
easier to see progress/results in several of the scripts within
this repository such as train_locally.py and
generate_default_trace.py when grabbing performance data for a
policy.",True,93,https://api.github.com/repos/google/ml-compiler-opt/pulls/93,https://github.com/google/ml-compiler-opt/pull/93,closed,10,1,1,1,1,2,0,0,[],2022-08-10 00:26:25+00:00,2022-08-10 05:31:44+00:00,18319.0,5:05:19,"[{'comment_id': 941964615, 'comment_body': 'can you make this configurable via an abseil flag? I\'d just do ""quiet"" (default) vs not quiet - i.e. no need to elaborate on other values of TF_CPP_MIN_LOG_LEVEL or anything.', 'comment_created': datetime.datetime(2022, 8, 10, 3, 2, 28, tzinfo=datetime.timezone.utc), 'commenter': 'mtrofin', 'type': 'User'}, {'comment_id': 942004575, 'comment_body': 'Added a `--quiet`/`--noquiet` flag that toggles this.', 'comment_created': datetime.datetime(2022, 8, 10, 4, 26, 34, tzinfo=datetime.timezone.utc), 'commenter': 'boomanaiden154', 'type': 'User'}]","[{'commit_sha': '0af5b770e13d125f072d491dfc6b9a6c4b756470', 'committer_username': 'boomanaiden154', 'committer_name': 'Aiden Grossman', 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 17, 21, 46, 24, tzinfo=datetime.timezone.utc)}]",Aiden Grossman,39388941,,User,,49,,0,25
1033510364,Add chromium patch,This PR adds the chromium patch that was worked on in [this CL](https://chromium-review.googlesource.com/c/chromium/src/+/3731216) that we have decided to maintain downstream. I've put it in the `./experimenal` directory currently. Let me know if it would be better off somewhere else.,True,117,https://api.github.com/repos/google/ml-compiler-opt/pulls/117,https://github.com/google/ml-compiler-opt/pull/117,closed,26,0,1,2,1,2,0,0,[],2022-08-23 00:53:12+00:00,2022-09-12 22:44:43+00:00,1806691.0,"20 days, 21:51:31","[{'comment_id': 952160130, 'comment_body': 'do we need the change to AUTHORS - since this is likely used a s an on the fly patch, at most it may cause patching problems', 'comment_created': datetime.datetime(2022, 8, 23, 5, 16, 29, tzinfo=datetime.timezone.utc), 'commenter': 'mtrofin', 'type': 'User'}, {'comment_id': 952165241, 'comment_body': ""Good point. Definitely something unnecessary that could potentially hurt maintainability. I've removed it from the patch."", 'comment_created': datetime.datetime(2022, 8, 23, 5, 27, 12, tzinfo=datetime.timezone.utc), 'commenter': 'boomanaiden154', 'type': 'User'}]","[{'commit_sha': '4a845dddbe009d5a3afbb2b975338754c136dbcb', 'committer_username': 'boomanaiden154', 'committer_name': 'Aiden Grossman', 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 17, 21, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '569fc4398d21898a17817d19c085115bad719eda', 'committer_username': 'boomanaiden154', 'committer_name': 'Aiden Grossman', 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 17, 21, 46, 24, tzinfo=datetime.timezone.utc)}]",Aiden Grossman,39388941,,User,,49,,0,25
1045773088,Update Oz inlining demo to work with TFLite,"Some minor changes to the inlining demo, just changing all of the info
on using the Tensorflow C library to using TFLite, including adding info
on compilation of the library using the buildbot script.",True,131,https://api.github.com/repos/google/ml-compiler-opt/pulls/131,https://github.com/google/ml-compiler-opt/pull/131,closed,12,535,2,1,3,0,0,0,[],2022-09-04 19:37:23+00:00,2022-09-26 17:05:10+00:00,1891667.0,"21 days, 21:27:47",[],"[{'commit_sha': '5a0aaaa5df2629c4286b01c64676af65bf7fdb41', 'committer_username': 'boomanaiden154', 'committer_name': 'Aiden Grossman', 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 17, 21, 46, 24, tzinfo=datetime.timezone.utc)}]",Aiden Grossman,39388941,,User,,49,,0,25

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
267719344,ml-compiler-opt,google/ml-compiler-opt,Python,91,607,22,25,436,48,19,10,"[{'id': 1986679495, 'number': 347, 'closed': datetime.datetime(2024, 7, 25, 5, 0, 21, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 7, 25, 4, 52, 13, tzinfo=datetime.timezone.utc), 'time_taken': 488.0, 'time_delta': '0:08:08', 'additions': 2, 'deletions': 2, 'state': 'closed'}, {'id': 1948357859, 'number': 345, 'closed': datetime.datetime(2024, 7, 8, 17, 50, 2, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 7, 2, 0, 40, 34, tzinfo=datetime.timezone.utc), 'time_taken': 580168.0, 'time_delta': '6 days, 17:09:28', 'additions': 9, 'deletions': 11, 'state': 'closed'}, {'id': 1804061944, 'number': 341, 'closed': datetime.datetime(2024, 4, 9, 2, 48, 55, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 4, 3, 8, 17, 11, tzinfo=datetime.timezone.utc), 'time_taken': 498704.0, 'time_delta': '5 days, 18:31:44', 'additions': 3, 'deletions': 4, 'state': 'closed'}, {'id': 1698090006, 'number': 336, 'closed': datetime.datetime(2024, 1, 27, 6, 35, 52, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 1, 27, 6, 20, 12, tzinfo=datetime.timezone.utc), 'time_taken': 940.0, 'time_delta': '0:15:40', 'additions': 0, 'deletions': 147, 'state': 'closed'}, {'id': 1697755656, 'number': 335, 'closed': datetime.datetime(2024, 1, 26, 20, 49, 36, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 1, 26, 20, 39, 9, tzinfo=datetime.timezone.utc), 'time_taken': 627.0, 'time_delta': '0:10:27', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 1688569759, 'number': 334, 'closed': datetime.datetime(2024, 1, 21, 22, 46, 34, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 1, 21, 7, 51, 3, tzinfo=datetime.timezone.utc), 'time_taken': 53731.0, 'time_delta': '14:55:31', 'additions': 26, 'deletions': 1172, 'state': 'closed'}, {'id': 1603907166, 'number': 316, 'closed': datetime.datetime(2023, 11, 16, 15, 1, 14, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 11, 16, 8, 13, 47, tzinfo=datetime.timezone.utc), 'time_taken': 24447.0, 'time_delta': '6:47:27', 'additions': 0, 'deletions': 6, 'state': 'closed'}, {'id': 1499347892, 'number': 295, 'closed': datetime.datetime(2023, 9, 1, 20, 18, 10, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 9, 1, 19, 39, 57, tzinfo=datetime.timezone.utc), 'time_taken': 2293.0, 'time_delta': '0:38:13', 'additions': 25, 'deletions': 2, 'state': 'closed'}, {'id': 1498246285, 'number': 293, 'closed': datetime.datetime(2023, 9, 1, 15, 18, 59, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 9, 1, 5, 0, 24, tzinfo=datetime.timezone.utc), 'time_taken': 37115.0, 'time_delta': '10:18:35', 'additions': 25, 'deletions': 2, 'state': 'closed'}, {'id': 1469131254, 'number': 290, 'closed': datetime.datetime(2023, 8, 9, 21, 27, 25, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 8, 9, 18, 49, 23, tzinfo=datetime.timezone.utc), 'time_taken': 9482.0, 'time_delta': '2:38:02', 'additions': 35, 'deletions': 9, 'state': 'closed'}, {'id': 1469097362, 'number': 289, 'closed': datetime.datetime(2023, 8, 9, 18, 28, 27, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 8, 9, 18, 21, 1, tzinfo=datetime.timezone.utc), 'time_taken': 446.0, 'time_delta': '0:07:26', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 1459049207, 'number': 284, 'closed': datetime.datetime(2023, 8, 2, 3, 16, 23, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 8, 2, 3, 10, 50, tzinfo=datetime.timezone.utc), 'time_taken': 333.0, 'time_delta': '0:05:33', 'additions': 5, 'deletions': 4, 'state': 'closed'}, {'id': 1459046409, 'number': 283, 'closed': datetime.datetime(2023, 8, 2, 19, 11, 51, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 8, 2, 3, 5, 46, tzinfo=datetime.timezone.utc), 'time_taken': 57965.0, 'time_delta': '16:06:05', 'additions': 14, 'deletions': 7, 'state': 'closed'}, {'id': 1434097512, 'number': 278, 'closed': datetime.datetime(2023, 7, 20, 23, 27, 9, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 7, 14, 3, 47, 40, tzinfo=datetime.timezone.utc), 'time_taken': 589169.0, 'time_delta': '6 days, 19:39:29', 'additions': 12, 'deletions': 4, 'state': 'closed'}, {'id': 1405977202, 'number': 276, 'closed': datetime.datetime(2023, 7, 1, 21, 56, 40, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 6, 24, 6, 25, 55, tzinfo=datetime.timezone.utc), 'time_taken': 660645.0, 'time_delta': '7 days, 15:30:45', 'additions': 206, 'deletions': 0, 'state': 'closed'}, {'id': 1405908173, 'number': 275, 'closed': datetime.datetime(2023, 6, 24, 2, 55, 22, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 6, 24, 2, 48, 55, tzinfo=datetime.timezone.utc), 'time_taken': 387.0, 'time_delta': '0:06:27', 'additions': 8, 'deletions': 4, 'state': 'closed'}, {'id': 1405773536, 'number': 274, 'closed': datetime.datetime(2023, 6, 23, 23, 41, 57, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 6, 23, 22, 52, 57, tzinfo=datetime.timezone.utc), 'time_taken': 2940.0, 'time_delta': '0:49:00', 'additions': 6, 'deletions': 17, 'state': 'closed'}, {'id': 1404194292, 'number': 273, 'closed': datetime.datetime(2023, 6, 22, 22, 21, 15, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 6, 22, 21, 45, 14, tzinfo=datetime.timezone.utc), 'time_taken': 2161.0, 'time_delta': '0:36:01', 'additions': 45, 'deletions': 2, 'state': 'closed'}, {'id': 1399141201, 'number': 269, 'closed': datetime.datetime(2023, 6, 20, 20, 13, 42, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 6, 20, 3, 58, 48, tzinfo=datetime.timezone.utc), 'time_taken': 58494.0, 'time_delta': '16:14:54', 'additions': 40, 'deletions': 3, 'state': 'closed'}, {'id': 1399066649, 'number': 268, 'closed': datetime.datetime(2023, 6, 20, 15, 6, 16, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 6, 20, 2, 4, 29, tzinfo=datetime.timezone.utc), 'time_taken': 46907.0, 'time_delta': '13:01:47', 'additions': 130, 'deletions': 34, 'state': 'closed'}, {'id': 1397865622, 'number': 267, 'closed': datetime.datetime(2023, 6, 19, 14, 35, 13, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 6, 19, 9, 27, 53, tzinfo=datetime.timezone.utc), 'time_taken': 18440.0, 'time_delta': '5:07:20', 'additions': 352, 'deletions': 294, 'state': 'closed'}, {'id': 1397694476, 'number': 266, 'closed': datetime.datetime(2023, 6, 21, 1, 22, 59, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 6, 19, 7, 35, 48, tzinfo=datetime.timezone.utc), 'time_taken': 150431.0, 'time_delta': '1 day, 17:47:11', 'additions': 52, 'deletions': 1, 'state': 'closed'}, {'id': 1389852681, 'number': 263, 'closed': datetime.datetime(2023, 6, 17, 0, 31, 1, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 6, 13, 4, 56, 21, tzinfo=datetime.timezone.utc), 'time_taken': 329680.0, 'time_delta': '3 days, 19:34:40', 'additions': 27, 'deletions': 0, 'state': 'closed'}, {'id': 1386867470, 'number': 262, 'closed': datetime.datetime(2023, 6, 9, 23, 56, 58, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 6, 9, 23, 45, 13, tzinfo=datetime.timezone.utc), 'time_taken': 705.0, 'time_delta': '0:11:45', 'additions': 7, 'deletions': 5, 'state': 'closed'}, {'id': 1386810828, 'number': 261, 'closed': datetime.datetime(2023, 6, 9, 22, 55, 6, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 6, 9, 22, 48, 4, tzinfo=datetime.timezone.utc), 'time_taken': 422.0, 'time_delta': '0:07:02', 'additions': 1, 'deletions': 0, 'state': 'closed'}, {'id': 1378093145, 'number': 252, 'closed': None, 'created': datetime.datetime(2023, 6, 5, 2, 21, 48, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 25, 'deletions': 0, 'state': 'open'}, {'id': 1378067097, 'number': 251, 'closed': datetime.datetime(2023, 6, 5, 1, 59, 59, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 6, 5, 1, 49, 59, tzinfo=datetime.timezone.utc), 'time_taken': 600.0, 'time_delta': '0:10:00', 'additions': 5, 'deletions': 10, 'state': 'closed'}, {'id': 1340575154, 'number': 229, 'closed': datetime.datetime(2023, 5, 6, 4, 21, 15, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 5, 6, 2, 58, 48, tzinfo=datetime.timezone.utc), 'time_taken': 4947.0, 'time_delta': '1:22:27', 'additions': 2, 'deletions': 79, 'state': 'closed'}, {'id': 1334666209, 'number': 220, 'closed': datetime.datetime(2023, 5, 2, 15, 19, 19, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 5, 2, 4, 35, 1, tzinfo=datetime.timezone.utc), 'time_taken': 38658.0, 'time_delta': '10:44:18', 'additions': 8, 'deletions': 0, 'state': 'closed'}, {'id': 1289941263, 'number': 213, 'closed': datetime.datetime(2023, 3, 25, 16, 17, 52, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 3, 25, 6, 25, 40, tzinfo=datetime.timezone.utc), 'time_taken': 35532.0, 'time_delta': '9:52:12', 'additions': 24, 'deletions': 24, 'state': 'closed'}, {'id': 1202092707, 'number': 208, 'closed': datetime.datetime(2023, 1, 18, 18, 58, 35, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 1, 18, 18, 25, 12, tzinfo=datetime.timezone.utc), 'time_taken': 2003.0, 'time_delta': '0:33:23', 'additions': 8, 'deletions': 10, 'state': 'closed'}, {'id': 1201296185, 'number': 206, 'closed': datetime.datetime(2023, 1, 18, 15, 29, 46, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 1, 18, 8, 4, 23, tzinfo=datetime.timezone.utc), 'time_taken': 26723.0, 'time_delta': '7:25:23', 'additions': 0, 'deletions': 14, 'state': 'closed'}, {'id': 1169334716, 'number': 196, 'closed': datetime.datetime(2022, 12, 17, 18, 18, 54, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 12, 17, 9, 0, 16, tzinfo=datetime.timezone.utc), 'time_taken': 33518.0, 'time_delta': '9:18:38', 'additions': 13, 'deletions': 9, 'state': 'closed'}, {'id': 1167744709, 'number': 194, 'closed': datetime.datetime(2022, 12, 16, 4, 46, 30, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 12, 16, 3, 19, 19, tzinfo=datetime.timezone.utc), 'time_taken': 5231.0, 'time_delta': '1:27:11', 'additions': 5, 'deletions': 5, 'state': 'closed'}, {'id': 1167725369, 'number': 193, 'closed': datetime.datetime(2022, 12, 16, 4, 13, 59, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 12, 16, 2, 54, 22, tzinfo=datetime.timezone.utc), 'time_taken': 4777.0, 'time_delta': '1:19:37', 'additions': 16, 'deletions': 4, 'state': 'closed'}, {'id': 1167603008, 'number': 191, 'closed': datetime.datetime(2022, 12, 16, 4, 47, 20, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 12, 16, 0, 31, 20, tzinfo=datetime.timezone.utc), 'time_taken': 15360.0, 'time_delta': '4:16:00', 'additions': 3, 'deletions': 2, 'state': 'closed'}, {'id': 1167567749, 'number': 190, 'closed': datetime.datetime(2022, 12, 22, 12, 29, 58, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 12, 15, 23, 56, 45, tzinfo=datetime.timezone.utc), 'time_taken': 563593.0, 'time_delta': '6 days, 12:33:13', 'additions': 3, 'deletions': 2, 'state': 'closed'}, {'id': 1165996448, 'number': 189, 'closed': datetime.datetime(2022, 12, 15, 20, 56, 51, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 12, 14, 23, 7, 21, tzinfo=datetime.timezone.utc), 'time_taken': 78570.0, 'time_delta': '21:49:30', 'additions': 1689, 'deletions': 85, 'state': 'closed'}, {'id': 1129369273, 'number': 182, 'closed': datetime.datetime(2022, 11, 21, 17, 45, 53, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 11, 21, 2, 3, 2, tzinfo=datetime.timezone.utc), 'time_taken': 56571.0, 'time_delta': '15:42:51', 'additions': 7, 'deletions': 6, 'state': 'closed'}, {'id': 1118624594, 'number': 179, 'closed': datetime.datetime(2022, 11, 16, 22, 23, 44, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 11, 11, 4, 49, 35, tzinfo=datetime.timezone.utc), 'time_taken': 495249.0, 'time_delta': '5 days, 17:34:09', 'additions': 2, 'deletions': 0, 'state': 'closed'}, {'id': 1110188519, 'number': 177, 'closed': datetime.datetime(2022, 11, 3, 22, 56, 27, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 11, 3, 22, 44, 1, tzinfo=datetime.timezone.utc), 'time_taken': 746.0, 'time_delta': '0:12:26', 'additions': 2, 'deletions': 2, 'state': 'closed'}, {'id': 1081563493, 'number': 164, 'closed': datetime.datetime(2022, 10, 12, 19, 10, 55, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 10, 10, 5, 37, 31, tzinfo=datetime.timezone.utc), 'time_taken': 221604.0, 'time_delta': '2 days, 13:33:24', 'additions': 35, 'deletions': 0, 'state': 'closed'}, {'id': 1066223137, 'number': 150, 'closed': datetime.datetime(2022, 9, 26, 15, 24, 20, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 9, 25, 6, 26, 28, tzinfo=datetime.timezone.utc), 'time_taken': 118672.0, 'time_delta': '1 day, 8:57:52', 'additions': 3, 'deletions': 15, 'state': 'closed'}, {'id': 1066118022, 'number': 149, 'closed': datetime.datetime(2022, 9, 24, 22, 26, 19, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 9, 24, 18, 18, 25, tzinfo=datetime.timezone.utc), 'time_taken': 14874.0, 'time_delta': '4:07:54', 'additions': 0, 'deletions': 1, 'state': 'closed'}, {'id': 1045773088, 'number': 131, 'closed': datetime.datetime(2022, 9, 26, 17, 5, 10, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 9, 4, 19, 37, 23, tzinfo=datetime.timezone.utc), 'time_taken': 1891667.0, 'time_delta': '21 days, 21:27:47', 'additions': 12, 'deletions': 535, 'state': 'closed'}, {'id': 1045398134, 'number': 130, 'closed': datetime.datetime(2022, 9, 26, 17, 37, 3, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 9, 3, 4, 34, 18, tzinfo=datetime.timezone.utc), 'time_taken': 2034165.0, 'time_delta': '23 days, 13:02:45', 'additions': 40377, 'deletions': 15731, 'state': 'closed'}, {'id': 1044557369, 'number': 128, 'closed': datetime.datetime(2022, 10, 29, 0, 33, 20, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 9, 2, 6, 52, 9, tzinfo=datetime.timezone.utc), 'time_taken': 4902071.0, 'time_delta': '56 days, 17:41:11', 'additions': 106, 'deletions': 47, 'state': 'closed'}, {'id': 1044315868, 'number': 127, 'closed': datetime.datetime(2022, 9, 2, 22, 43, 15, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 9, 1, 23, 5, 20, tzinfo=datetime.timezone.utc), 'time_taken': 85075.0, 'time_delta': '23:37:55', 'additions': 3, 'deletions': 14, 'state': 'closed'}, {'id': 1040224267, 'number': 126, 'closed': datetime.datetime(2022, 11, 16, 22, 29, 40, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 29, 21, 36, 11, tzinfo=datetime.timezone.utc), 'time_taken': 6828809.0, 'time_delta': '79 days, 0:53:29', 'additions': 556, 'deletions': 1, 'state': 'closed'}, {'id': 1037731426, 'number': 124, 'closed': datetime.datetime(2022, 9, 7, 17, 28, 47, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 26, 9, 25, 23, tzinfo=datetime.timezone.utc), 'time_taken': 1065804.0, 'time_delta': '12 days, 8:03:24', 'additions': 15, 'deletions': 23, 'state': 'closed'}, {'id': 1037717187, 'number': 123, 'closed': datetime.datetime(2022, 8, 26, 16, 6, 23, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 26, 9, 11, 7, tzinfo=datetime.timezone.utc), 'time_taken': 24916.0, 'time_delta': '6:55:16', 'additions': 15, 'deletions': 5, 'state': 'closed'}, {'id': 1037552446, 'number': 122, 'closed': datetime.datetime(2022, 8, 26, 14, 57, 55, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 26, 6, 9, 48, tzinfo=datetime.timezone.utc), 'time_taken': 31687.0, 'time_delta': '8:48:07', 'additions': 6, 'deletions': 6, 'state': 'closed'}, {'id': 1036278498, 'number': 121, 'closed': None, 'created': datetime.datetime(2022, 8, 25, 5, 42, 59, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 295, 'deletions': 0, 'state': 'open'}, {'id': 1033510364, 'number': 117, 'closed': datetime.datetime(2022, 9, 12, 22, 44, 43, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 23, 0, 53, 12, tzinfo=datetime.timezone.utc), 'time_taken': 1806691.0, 'time_delta': '20 days, 21:51:31', 'additions': 26, 'deletions': 0, 'state': 'closed'}, {'id': 1029339294, 'number': 109, 'closed': datetime.datetime(2022, 9, 15, 5, 40, 27, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 17, 22, 2, 29, tzinfo=datetime.timezone.utc), 'time_taken': 2446678.0, 'time_delta': '28 days, 7:37:58', 'additions': 734, 'deletions': 3, 'state': 'closed'}, {'id': 1023149900, 'number': 94, 'closed': None, 'created': datetime.datetime(2022, 8, 10, 19, 58, 44, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 197, 'deletions': 2, 'state': 'open'}, {'id': 1022093028, 'number': 93, 'closed': datetime.datetime(2022, 8, 10, 5, 31, 44, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 10, 0, 26, 25, tzinfo=datetime.timezone.utc), 'time_taken': 18319.0, 'time_delta': '5:05:19', 'additions': 10, 'deletions': 1, 'state': 'closed'}, {'id': 1021922474, 'number': 92, 'closed': datetime.datetime(2022, 8, 9, 20, 0, 37, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 9, 19, 58, 39, tzinfo=datetime.timezone.utc), 'time_taken': 118.0, 'time_delta': '0:01:58', 'additions': 1, 'deletions': 0, 'state': 'closed'}, {'id': 1018137527, 'number': 84, 'closed': datetime.datetime(2022, 8, 9, 19, 43, 1, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 5, 0, 50, 36, tzinfo=datetime.timezone.utc), 'time_taken': 413545.0, 'time_delta': '4 days, 18:52:25', 'additions': 30, 'deletions': 35, 'state': 'closed'}, {'id': 1014589881, 'number': 78, 'closed': datetime.datetime(2022, 8, 2, 14, 19, 8, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 2, 4, 7, 57, tzinfo=datetime.timezone.utc), 'time_taken': 36671.0, 'time_delta': '10:11:11', 'additions': 76, 'deletions': 0, 'state': 'closed'}, {'id': 998564123, 'number': 62, 'closed': datetime.datetime(2022, 7, 19, 2, 23, 6, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 17, 5, 18, 28, tzinfo=datetime.timezone.utc), 'time_taken': 162278.0, 'time_delta': '1 day, 21:04:38', 'additions': 45, 'deletions': 36, 'state': 'closed'}, {'id': 997271496, 'number': 59, 'closed': datetime.datetime(2022, 7, 15, 15, 18, 2, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 15, 1, 53, 52, tzinfo=datetime.timezone.utc), 'time_taken': 48250.0, 'time_delta': '13:24:10', 'additions': 4, 'deletions': 0, 'state': 'closed'}, {'id': 995909656, 'number': 53, 'closed': datetime.datetime(2022, 7, 15, 0, 9, 3, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 13, 20, 24, 45, tzinfo=datetime.timezone.utc), 'time_taken': 99858.0, 'time_delta': '1 day, 3:44:18', 'additions': 4, 'deletions': 3, 'state': 'closed'}, {'id': 995821144, 'number': 51, 'closed': datetime.datetime(2022, 7, 13, 20, 12, 14, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 13, 18, 35, 45, tzinfo=datetime.timezone.utc), 'time_taken': 5789.0, 'time_delta': '1:36:29', 'additions': 6, 'deletions': 6, 'state': 'closed'}, {'id': 993882020, 'number': 49, 'closed': datetime.datetime(2022, 7, 18, 14, 50, 23, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 12, 6, 23, 14, tzinfo=datetime.timezone.utc), 'time_taken': 548829.0, 'time_delta': '6 days, 8:27:09', 'additions': 10, 'deletions': 0, 'state': 'closed'}, {'id': 992485538, 'number': 47, 'closed': datetime.datetime(2022, 7, 13, 19, 26, 31, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 10, 19, 41, 40, tzinfo=datetime.timezone.utc), 'time_taken': 258291.0, 'time_delta': '2 days, 23:44:51', 'additions': 17409, 'deletions': 5, 'state': 'closed'}, {'id': 979388878, 'number': 30, 'closed': datetime.datetime(2022, 6, 30, 7, 18, 6, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 6, 26, 20, 44, 23, tzinfo=datetime.timezone.utc), 'time_taken': 297223.0, 'time_delta': '3 days, 10:33:43', 'additions': 68, 'deletions': 20, 'state': 'closed'}, {'id': 978733003, 'number': 29, 'closed': datetime.datetime(2022, 6, 27, 6, 51, 44, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 6, 24, 21, 15, 50, tzinfo=datetime.timezone.utc), 'time_taken': 207354.0, 'time_delta': '2 days, 9:35:54', 'additions': 17, 'deletions': 19, 'state': 'closed'}, {'id': 971164139, 'number': 27, 'closed': datetime.datetime(2022, 6, 18, 3, 16, 41, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 6, 18, 2, 41, 57, tzinfo=datetime.timezone.utc), 'time_taken': 2084.0, 'time_delta': '0:34:44', 'additions': 1, 'deletions': 0, 'state': 'closed'}, {'id': 966285689, 'number': 26, 'closed': datetime.datetime(2022, 6, 13, 23, 22, 7, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 6, 13, 23, 21, 52, tzinfo=datetime.timezone.utc), 'time_taken': 15.0, 'time_delta': '0:00:15', 'additions': 23944, 'deletions': 21916, 'state': 'closed'}, {'id': 962222591, 'number': 24, 'closed': datetime.datetime(2022, 6, 10, 1, 21, 3, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 6, 8, 22, 27, 48, tzinfo=datetime.timezone.utc), 'time_taken': 96795.0, 'time_delta': '1 day, 2:53:15', 'additions': 6, 'deletions': 2, 'state': 'closed'}, {'id': 961217394, 'number': 23, 'closed': datetime.datetime(2022, 6, 8, 14, 56, 42, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 6, 8, 6, 2, 19, tzinfo=datetime.timezone.utc), 'time_taken': 32063.0, 'time_delta': '8:54:23', 'additions': 5, 'deletions': 1, 'state': 'closed'}, {'id': 950134896, 'number': 22, 'closed': datetime.datetime(2022, 5, 28, 23, 16, 33, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 5, 28, 20, 57, 56, tzinfo=datetime.timezone.utc), 'time_taken': 8317.0, 'time_delta': '2:18:37', 'additions': 3, 'deletions': 1, 'state': 'closed'}, {'id': 911725150, 'number': 19, 'closed': datetime.datetime(2022, 5, 29, 0, 33, 4, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 4, 18, 5, 46, 40, tzinfo=datetime.timezone.utc), 'time_taken': 3523584.0, 'time_delta': '40 days, 18:46:24', 'additions': 15, 'deletions': 2, 'state': 'closed'}]"
