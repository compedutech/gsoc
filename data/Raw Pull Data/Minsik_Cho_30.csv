pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
428343886,Feat: Bickelhaupt Charges,"This adds a new routine `cclib.cclib.method.bpa` which calculates Bickelhaupt charges as described in Bickelhaupt, F. M.; Hommes, N. J. R.; Guerra, C. F.; Baerends, E. The Carbon-Lithium Electron Pair Bond in (CH3Li)_n (n=1,2,4). _Organometallics_ **1996**, _15_ (13), 2923-2931.

Tests are invoked in Travis using inputs from Gaussian 16 and are compared against the values obtained using Multiwfn.
",True,869,https://api.github.com/repos/cclib/cclib/pulls/869,https://github.com/cclib/cclib/pull/869,closed,316,7,7,5,6,25,2,0,"[{'name': 'feature'}, {'name': 'methods'}]",2020-06-05 09:46:40+00:00,2020-06-16 14:34:06+00:00,967646.0,"11 days, 4:47:26","[{'comment_id': 437459745, 'comment_body': 'nit: update to 2020', 'comment_created': datetime.datetime(2020, 6, 9, 14, 19, 10, tzinfo=datetime.timezone.utc), 'commenter': 'langner', 'type': 'User'}, {'comment_id': 437462940, 'comment_body': 'nit: update copyright year to 2020 :)', 'comment_created': datetime.datetime(2020, 6, 9, 14, 23, 17, tzinfo=datetime.timezone.utc), 'commenter': 'langner', 'type': 'User'}, {'comment_id': 437464007, 'comment_body': 'Just to be prudent, add a `super(GaussianBPATest, self).setUp()` call. We should be doing that everywhere.', 'comment_created': datetime.datetime(2020, 6, 9, 14, 24, 39, tzinfo=datetime.timezone.utc), 'commenter': 'langner', 'type': 'User'}, {'comment_id': 437466151, 'comment_body': ""I would prefer to have a more verbose name here, perhaps just `Bickelhaput`? I know we've been using abbreviations, but I don't think `BPA` is that common this will likely break down in the future for the more advanced methods. @berquist @shivupa thoughts?"", 'comment_created': datetime.datetime(2020, 6, 9, 14, 27, 22, tzinfo=datetime.timezone.utc), 'commenter': 'langner', 'type': 'User'}, {'comment_id': 437478361, 'comment_body': '+1, I also think (separately) that `MPA` should be renamed to `Mulliken`, etc.', 'comment_created': datetime.datetime(2020, 6, 9, 14, 43, tzinfo=datetime.timezone.utc), 'commenter': 'berquist', 'type': 'User'}, {'comment_id': 437481170, 'comment_body': 'Yup, we should definitely rename and leave aliases to the old abbreviations, which we could drop in 2.x.', 'comment_created': datetime.datetime(2020, 6, 9, 14, 46, 21, tzinfo=datetime.timezone.utc), 'commenter': 'langner', 'type': 'User'}, {'comment_id': 438812971, 'comment_body': 'Can you update the name here as well', 'comment_created': datetime.datetime(2020, 6, 11, 14, 6, 6, tzinfo=datetime.timezone.utc), 'commenter': 'shivupa', 'type': 'User'}, {'comment_id': 439207911, 'comment_body': 'Could you break this up into several line, for better readability?', 'comment_created': datetime.datetime(2020, 6, 12, 5, 3, 36, tzinfo=datetime.timezone.utc), 'commenter': 'langner', 'type': 'User'}, {'comment_id': 439304248, 'comment_body': ""I've just done it. Thanks!"", 'comment_created': datetime.datetime(2020, 6, 12, 9, 13, 48, tzinfo=datetime.timezone.utc), 'commenter': 'mscho527', 'type': 'User'}, {'comment_id': 439383601, 'comment_body': 'Can this (and others) be updated to the new string formatting (e.g. `""Bickelhaupt charges of {}"".format(self.data)`)', 'comment_created': datetime.datetime(2020, 6, 12, 12, 17, 21, tzinfo=datetime.timezone.utc), 'commenter': 'shivupa', 'type': 'User'}, {'comment_id': 439384030, 'comment_body': 'Can you clarify this to ""The size of W...""', 'comment_created': datetime.datetime(2020, 6, 12, 12, 18, 15, tzinfo=datetime.timezone.utc), 'commenter': 'shivupa', 'type': 'User'}, {'comment_id': 439386137, 'comment_body': ""alternatively the link could point to [https://doi.org/10.1021/om950966x](https://doi.org/10.1021/om950966x). Doesn't need to change just a tip if you come across a DOI with no link in the future"", 'comment_created': datetime.datetime(2020, 6, 12, 12, 23, 14, tzinfo=datetime.timezone.utc), 'commenter': 'shivupa', 'type': 'User'}, {'comment_id': 439443185, 'comment_body': ""@shivupa Thanks for the comments! I've updated them just now."", 'comment_created': datetime.datetime(2020, 6, 12, 14, 11, 39, tzinfo=datetime.timezone.utc), 'commenter': 'mscho527', 'type': 'User'}, {'comment_id': 439454142, 'comment_body': 'Can you break this up into several lines as well (use variables for the indices)?', 'comment_created': datetime.datetime(2020, 6, 12, 14, 29, 58, tzinfo=datetime.timezone.utc), 'commenter': 'langner', 'type': 'User'}, {'comment_id': 439461067, 'comment_body': 'Perhaps move this to the comment at the top of the block, and perhaps also add a short description of the weight matrix.', 'comment_created': datetime.datetime(2020, 6, 12, 14, 41, 34, tzinfo=datetime.timezone.utc), 'commenter': 'langner', 'type': 'User'}, {'comment_id': 439868520, 'comment_body': ""I'd replace all usage of `add`, `subtract`, and `multiply` with their overloaded versions (`+`, `-`, `*`). I always need to look up whether or not the named functions are elementwise or something else weird..."", 'comment_created': datetime.datetime(2020, 6, 14, 21, 19, 10, tzinfo=datetime.timezone.utc), 'commenter': 'berquist', 'type': 'User'}, {'comment_id': 439868693, 'comment_body': ""Do you think we can drop `temp` from these three lines, and just do it all in one go? It'll look a lot more like the equation then."", 'comment_created': datetime.datetime(2020, 6, 14, 21, 21, 14, tzinfo=datetime.timezone.utc), 'commenter': 'berquist', 'type': 'User'}, {'comment_id': 439868813, 'comment_body': 'Since this is a fresh file, what do you think about running Black on it with a line length of 100?', 'comment_created': datetime.datetime(2020, 6, 14, 21, 22, 50, tzinfo=datetime.timezone.utc), 'commenter': 'berquist', 'type': 'User'}, {'comment_id': 439868907, 'comment_body': 'Can you put this in alphabetical order?', 'comment_created': datetime.datetime(2020, 6, 14, 21, 24, 27, tzinfo=datetime.timezone.utc), 'commenter': 'berquist', 'type': 'User'}, {'comment_id': 439869308, 'comment_body': 'Related to https://github.com/cclib/cclib/pull/869#issuecomment-642323035, it is not immediately obvious to me how equation 11 in the paper is converted to this. Could you at least say that this leads to the same results?', 'comment_created': datetime.datetime(2020, 6, 14, 21, 28, 58, tzinfo=datetime.timezone.utc), 'commenter': 'berquist', 'type': 'User'}, {'comment_id': 439880582, 'comment_body': ""I'd be in support of this!"", 'comment_created': datetime.datetime(2020, 6, 14, 23, 53, 38, tzinfo=datetime.timezone.utc), 'commenter': 'shivupa', 'type': 'User'}, {'comment_id': 439883350, 'comment_body': ""I was the one who asked to break this up. I'm OK with merging back into one expression, as long as the formatting is done better. Another option would be to use better variable names (do those intermediate products have names?)."", 'comment_created': datetime.datetime(2020, 6, 15, 0, 20, 46, tzinfo=datetime.timezone.utc), 'commenter': 'langner', 'type': 'User'}, {'comment_id': 439956353, 'comment_body': ""I've merged it back to one expression after replacing `numpy.multiply` with `*` and running `Black` as suggested by @berquist . The whole expression fits in one line (of length 100) this way. Let me know if using different variable names and splitting into 2-3 lines would be more readable."", 'comment_created': datetime.datetime(2020, 6, 15, 6, 33, 20, tzinfo=datetime.timezone.utc), 'commenter': 'mscho527', 'type': 'User'}, {'comment_id': 440231232, 'comment_body': '...each term is...', 'comment_created': datetime.datetime(2020, 6, 15, 14, 48, 24, tzinfo=datetime.timezone.utc), 'commenter': 'langner', 'type': 'User'}, {'comment_id': 440889146, 'comment_body': '> do those intermediate products have names?\r\n\r\nThe quantity that isn\'t multiplied by the weight is the ""unsummed"" Mulliken population over one index (don\'t have it right in front of me), but that\'s not a very useful intermediate.', 'comment_created': datetime.datetime(2020, 6, 16, 14, 20, 56, tzinfo=datetime.timezone.utc), 'commenter': 'berquist', 'type': 'User'}]","[{'commit_sha': '24d9158a9c71c148adb437d4c8ba486003be79c0', 'committer_username': 'mscho527', 'committer_name': 'Minsik', 'committer_email': None, 'commit_date': datetime.datetime(2014, 3, 12, 12, 13, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '18f9c8cba86e694864dc8f63a636d8cd14c5f964', 'committer_username': 'mscho527', 'committer_name': 'Minsik', 'committer_email': None, 'commit_date': datetime.datetime(2014, 3, 12, 12, 13, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5eb43ea00670ab416e9ff75e49233b6620676df6', 'committer_username': 'mscho527', 'committer_name': 'Minsik', 'committer_email': None, 'commit_date': datetime.datetime(2014, 3, 12, 12, 13, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6138b2c8d804857eddfd94764669e285ec9456d9', 'committer_username': 'mscho527', 'committer_name': 'Minsik', 'committer_email': None, 'commit_date': datetime.datetime(2014, 3, 12, 12, 13, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7997ce544ab035898fd3e55b406f9d6e5dc316df', 'committer_username': 'mscho527', 'committer_name': 'Minsik', 'committer_email': None, 'commit_date': datetime.datetime(2014, 3, 12, 12, 13, 11, tzinfo=datetime.timezone.utc)}]",Minsik,6929314,,User,,11,,5,13
436881198,Add horton in Travis configurations to enable testing,"Related Issue : #880 

This PR is the first step in the Issue #880. This adds horton 2 into the list of packages that will be fetched for Python 2.7 test and adds IOData, which is part of horton 3, into the list of packages that will be fetched for Python 3.7 test.

`Cython` is added in Python 3.7 test to satisfy requirements for IOData package.
",True,881,https://api.github.com/repos/cclib/cclib/pulls/881,https://github.com/cclib/cclib/pull/881,closed,24,2,1,1,4,3,2,0,"[{'name': 'maintenance'}, {'name': 'bridge'}]",2020-06-19 04:25:52+00:00,2020-06-22 16:50:48+00:00,303896.0,"3 days, 12:24:56","[{'comment_id': 442872266, 'comment_body': ""@shivupa This is the line that would trigger installation of Horton 3's iodata package."", 'comment_created': datetime.datetime(2020, 6, 19, 14, 27, 30, tzinfo=datetime.timezone.utc), 'commenter': 'mscho527', 'type': 'User'}, {'comment_id': 443316524, 'comment_body': ""According to https://github.com/theochem/iodata we can also do\r\n```bash\r\nconda install -c theochem iodata\r\n```\r\nbut I'm not sure if we want the one from Anaconda or the master branch. Maybe this is fine."", 'comment_created': datetime.datetime(2020, 6, 22, 4, 54, 55, tzinfo=datetime.timezone.utc), 'commenter': 'berquist', 'type': 'User'}, {'comment_id': 443351973, 'comment_body': '@berquist From what I have tested, `iodata` on conda is old and the name of the attributes have changed since when the latest conda package was built. I think that the `pip` install line can be pegged into a specific commit though, if that fits better.', 'comment_created': datetime.datetime(2020, 6, 22, 6, 58, 6, tzinfo=datetime.timezone.utc), 'commenter': 'mscho527', 'type': 'User'}]","[{'commit_sha': '03ee29d1bc693e60a290d59fb01007e9a3c1c726', 'committer_username': 'mscho527', 'committer_name': 'Minsik', 'committer_email': None, 'commit_date': datetime.datetime(2014, 3, 12, 12, 13, 11, tzinfo=datetime.timezone.utc)}]",Minsik,6929314,,User,,11,,5,13
436909546,Add stencil code that detects horton version,"Related Issue : #880

This PR is related to the Issue #880 and builds upon PR #881 . This PR adds a stencil code for the bridge between `cclib` and `horton`, along with a function that detects whether horton 2 (`horton) or horton 3 (`iodata`) is available for the bridge functions.",True,882,https://api.github.com/repos/cclib/cclib/pulls/882,https://github.com/cclib/cclib/pull/882,closed,79,1,2,1,1,1,2,0,"[{'name': 'maintenance'}, {'name': 'bridge'}]",2020-06-19 06:06:23+00:00,2020-06-23 14:33:29+00:00,376026.0,"4 days, 8:27:06",[],"[{'commit_sha': '75bdf7eae4946c62c29daa1bcc0bf7751088230a', 'committer_username': 'mscho527', 'committer_name': 'Minsik', 'committer_email': None, 'commit_date': datetime.datetime(2014, 3, 12, 12, 13, 11, tzinfo=datetime.timezone.utc)}]",Minsik,6929314,,User,,11,,5,13
432535034,"Add horton 2 --> cclib bridge, along with tests","Related Issue : #880

This PR is related to Issue #880 and builds upon #882 . This PR adds a bridging function that constructs ccData object from horton 2's IOData object.

Test compares the parsed results (from cclib.io) and converted results (IOData converted using the bridge function).",True,873,https://api.github.com/repos/cclib/cclib/pulls/873,https://github.com/cclib/cclib/pull/873,closed,161,26,4,1,0,26,2,0,"[{'name': 'feature'}, {'name': 'bridge'}]",2020-06-10 15:29:32+00:00,2020-06-24 14:46:04+00:00,1206992.0,"13 days, 23:16:32","[{'comment_id': 440226484, 'comment_body': 'Could you reference an issue here (maybe create one)? (unless you plan on doing this soon)', 'comment_created': datetime.datetime(2020, 6, 15, 14, 41, 59, tzinfo=datetime.timezone.utc), 'commenter': 'langner', 'type': 'User'}, {'comment_id': 440227987, 'comment_body': 'Would it be better to just pass in a ccData object?', 'comment_created': datetime.datetime(2020, 6, 15, 14, 44, 5, tzinfo=datetime.timezone.utc), 'commenter': 'langner', 'type': 'User'}, {'comment_id': 440597800, 'comment_body': '@langner I was thinking of doing that (and actually wrote the first version this way) but then found out that all other bridges are implemented to ask for each value as args. I chose to keep it consistent with other bridge methods, but I see that passing in a `ccData` object would likely be cleaner. I am open to making modifications so that `ccData` object is passed as argument instead.', 'comment_created': datetime.datetime(2020, 6, 16, 5, 40, 36, tzinfo=datetime.timezone.utc), 'commenter': 'mscho527', 'type': 'User'}, {'comment_id': 440606236, 'comment_body': '@langner I am planning to add bridge for horton 3 today or tomorrow. Thanks!', 'comment_created': datetime.datetime(2020, 6, 16, 6, 7, 50, tzinfo=datetime.timezone.utc), 'commenter': 'mscho527', 'type': 'User'}, {'comment_id': 440898549, 'comment_body': 'Can you add an `else:` that raises an error?', 'comment_created': datetime.datetime(2020, 6, 16, 14, 33, 6, tzinfo=datetime.timezone.utc), 'commenter': 'berquist', 'type': 'User'}, {'comment_id': 440898729, 'comment_body': 'Same as above.', 'comment_created': datetime.datetime(2020, 6, 16, 14, 33, 20, tzinfo=datetime.timezone.utc), 'commenter': 'berquist', 'type': 'User'}, {'comment_id': 441570014, 'comment_body': 'As far as I know, `atomcharges` are not always present in input data? The if statement is supposed to detect whether any valid information was passed on or not (since default value for `atomcharges` argument in this function is `None`). I see that this may not be the cleanest way to do this -- let me know if I could modify this in a more sensible way. Thanks!', 'comment_created': datetime.datetime(2020, 6, 17, 14, 2, 59, tzinfo=datetime.timezone.utc), 'commenter': 'mscho527', 'type': 'User'}, {'comment_id': 441612156, 'comment_body': 'This would be a good thing to send in a separate PR.', 'comment_created': datetime.datetime(2020, 6, 17, 14, 58, 38, tzinfo=datetime.timezone.utc), 'commenter': 'langner', 'type': 'User'}, {'comment_id': 441613319, 'comment_body': ""I think this might be a good place to not be consistent; IMO passing the object would be better and we just didn't think about it before. We can update the remaining bridges later. @berquist for thoughts"", 'comment_created': datetime.datetime(2020, 6, 17, 15, 0, 7, tzinfo=datetime.timezone.utc), 'commenter': 'langner', 'type': 'User'}, {'comment_id': 441614050, 'comment_body': 'This would be more natural if we passed in the ccData object.', 'comment_created': datetime.datetime(2020, 6, 17, 15, 1, 1, tzinfo=datetime.timezone.utc), 'commenter': 'langner', 'type': 'User'}, {'comment_id': 441621169, 'comment_body': 'Yes -- I will try to split this into a separate PR tomorrow. The commits for horton 2 and 3 are readily separable, so I think should be able to do so without much issue. Thanks.', 'comment_created': datetime.datetime(2020, 6, 17, 15, 9, 48, tzinfo=datetime.timezone.utc), 'commenter': 'mscho527', 'type': 'User'}, {'comment_id': 442303086, 'comment_body': 'Could you add a comment here shortly explaining the difference between horton and the iodata you try to import below?', 'comment_created': datetime.datetime(2020, 6, 18, 15, 13, 51, tzinfo=datetime.timezone.utc), 'commenter': 'langner', 'type': 'User'}, {'comment_id': 442304604, 'comment_body': 'nit: unnecessary blank line', 'comment_created': datetime.datetime(2020, 6, 18, 15, 16, 7, tzinfo=datetime.timezone.utc), 'commenter': 'langner', 'type': 'User'}, {'comment_id': 442304839, 'comment_body': 'Could you be more specific here? Which ""both"" packages?\r\n\r\nAlso, please end sentences in comments with periods.', 'comment_created': datetime.datetime(2020, 6, 18, 15, 16, 30, tzinfo=datetime.timezone.utc), 'commenter': 'langner', 'type': 'User'}, {'comment_id': 443305101, 'comment_body': 'Can you put these in alphabetical order?', 'comment_created': datetime.datetime(2020, 6, 22, 3, 52, 14, tzinfo=datetime.timezone.utc), 'commenter': 'berquist', 'type': 'User'}, {'comment_id': 443312307, 'comment_body': ""In general, can you put comments like this on the line above of the code they're describing, and also reflow them so they don't go over ~100 characters?"", 'comment_created': datetime.datetime(2020, 6, 22, 4, 32, 45, tzinfo=datetime.timezone.utc), 'commenter': 'berquist', 'type': 'User'}, {'comment_id': 443313456, 'comment_body': 'I think in other parts of the code we use assertion functions from `numpy.testing`. There should be at least one that is ""almost equal"" with a delta or tolerance that can be specified.', 'comment_created': datetime.datetime(2020, 6, 22, 4, 39, 2, tzinfo=datetime.timezone.utc), 'commenter': 'berquist', 'type': 'User'}, {'comment_id': 443314607, 'comment_body': ""I feel there must be a better way to handle the case when the dictionary hasn't been made yet, so you don't need the NPA logic in two places."", 'comment_created': datetime.datetime(2020, 6, 22, 4, 45, 15, tzinfo=datetime.timezone.utc), 'commenter': 'berquist', 'type': 'User'}, {'comment_id': 443315658, 'comment_body': ""I think `collections.defaultdict` would make this part of the code cleaner but I'm not sure if it is worth importing another module for this. I also feel that there must be something else -- I'll look for it and comment later."", 'comment_created': datetime.datetime(2020, 6, 22, 4, 50, 31, tzinfo=datetime.timezone.utc), 'commenter': 'mscho527', 'type': 'User'}, {'comment_id': 443361183, 'comment_body': '> I think in other parts of the code we use assertion functions from `numpy.testing`. There should be at least one that is ""almost equal"" with a delta or tolerance that can be specified.\r\n\r\nLooks like `numpy.testing.assert_array_almost_equal` would do. Thanks!', 'comment_created': datetime.datetime(2020, 6, 22, 7, 20, 11, tzinfo=datetime.timezone.utc), 'commenter': 'mscho527', 'type': 'User'}, {'comment_id': 443363714, 'comment_body': ""> In general, can you put comments like this on the line above of the code they're describing, and also reflow them so they don't go over ~100 characters?\r\n\r\nYes - I've just fixed them and ran `black` on the files that were modified in this PR. Thank you!"", 'comment_created': datetime.datetime(2020, 6, 22, 7, 25, 23, tzinfo=datetime.timezone.utc), 'commenter': 'mscho527', 'type': 'User'}, {'comment_id': 443598184, 'comment_body': '@mscho527 Note for myself -- `pseudo_numbers` attribute has different syntax (atomic number - ignored e) in `horton`. This should be corrected.', 'comment_created': datetime.datetime(2020, 6, 22, 14, 26, 34, tzinfo=datetime.timezone.utc), 'commenter': 'mscho527', 'type': 'User'}, {'comment_id': 444942616, 'comment_body': 'Yes, I agree.', 'comment_created': datetime.datetime(2020, 6, 24, 14, 37, 26, tzinfo=datetime.timezone.utc), 'commenter': 'berquist', 'type': 'User'}, {'comment_id': 444948603, 'comment_body': ""Actually, this would lead down a path that isn't worthwhile right now, it'd take too much time."", 'comment_created': datetime.datetime(2020, 6, 24, 14, 45, 14, tzinfo=datetime.timezone.utc), 'commenter': 'berquist', 'type': 'User'}]","[{'commit_sha': '1f07e7e5c72edd868820c2215411a8bafaa4540d', 'committer_username': 'mscho527', 'committer_name': 'Minsik', 'committer_email': None, 'commit_date': datetime.datetime(2014, 3, 12, 12, 13, 11, tzinfo=datetime.timezone.utc)}]",Minsik,6929314,,User,,11,,5,13
437052820,"Add horton 2 <-- cclib bridge, along with tests","Related Issue : #880

This PR is related to Issue #880 and builds upon #873 . This PR adds a bridging function that constructs horton 2's IOData object from ccData object.

Test compares the parsed results (from horton.io.IOData.from_file) and converted results (ccData object converted using the bridge function).",True,883,https://api.github.com/repos/cclib/cclib/pulls/883,https://github.com/cclib/cclib/pull/883,closed,85,8,2,1,2,7,1,0,[{'name': 'bridge'}],2020-06-19 11:37:47+00:00,2020-06-25 15:58:45+00:00,534058.0,"6 days, 4:20:58","[{'comment_id': 444958090, 'comment_body': 'nit: please end sentences with periods', 'comment_created': datetime.datetime(2020, 6, 24, 14, 57, 17, tzinfo=datetime.timezone.utc), 'commenter': 'langner', 'type': 'User'}, {'comment_id': 444965279, 'comment_body': ""So I'm a little confused, because IIUC we want to pass in attribute to this function but we are passing a ccData object. What will you do in the end? For your project, I don't think it matters much.\r\n\r\nFor long term standardization, created #890 "", 'comment_created': datetime.datetime(2020, 6, 24, 15, 6, 47, tzinfo=datetime.timezone.utc), 'commenter': 'langner', 'type': 'User'}, {'comment_id': 445392752, 'comment_body': ""@langner I've modified the function so accept `ccData` object after your suggestion on PR #873. Modifying from this to a function that asks for the attributes directly should not be too difficult, if that is the way we will be standardizing the bridge functions."", 'comment_created': datetime.datetime(2020, 6, 25, 8, 27, 43, tzinfo=datetime.timezone.utc), 'commenter': 'mscho527', 'type': 'User'}, {'comment_id': 445595003, 'comment_body': 'If you get rid of the type check, you can do\r\n```suggestion\r\n            attributes[""pseudo_numbers""] = ccdat.atomnos - np.asanyarray(ccdat.coreelectrons)\r\n```\r\nwhich will avoid making a copy if `ccdat.coreelectrons` is already an ndarray, but do the conversion if it isn\'t.', 'comment_created': datetime.datetime(2020, 6, 25, 14, 20, 7, tzinfo=datetime.timezone.utc), 'commenter': 'berquist', 'type': 'User'}, {'comment_id': 445600330, 'comment_body': ""This is tricky because this bridge can take many more attributes than all the other existing ones. It might be unreasonable to ask users to come up with all of these function arguments and have most default to `None` (or require explicitly setting to `None`). I agree that we shouldn't fuss over it and any changes we want can be made later."", 'comment_created': datetime.datetime(2020, 6, 25, 14, 27, 13, tzinfo=datetime.timezone.utc), 'commenter': 'berquist', 'type': 'User'}, {'comment_id': 445602899, 'comment_body': ""@berquist Thanks! I didn't know about `asanyarray`. That definitely simplifies and make it more efficient!"", 'comment_created': datetime.datetime(2020, 6, 25, 14, 30, 42, tzinfo=datetime.timezone.utc), 'commenter': 'mscho527', 'type': 'User'}, {'comment_id': 445665513, 'comment_body': 'Sounds good.', 'comment_created': datetime.datetime(2020, 6, 25, 15, 57, 58, tzinfo=datetime.timezone.utc), 'commenter': 'langner', 'type': 'User'}]","[{'commit_sha': '5a257268308f15b6a4e711098f40f40dbbace423', 'committer_username': 'mscho527', 'committer_name': 'Minsik', 'committer_email': None, 'commit_date': datetime.datetime(2014, 3, 12, 12, 13, 11, tzinfo=datetime.timezone.utc)}]",Minsik,6929314,,User,,11,,5,13
437104427,"Add horton 3 --> cclib bridge, along with tests","Related Issue : #880

This PR is related to Issue #880 and builds upon #883 . This PR adds a bridging function that constructs ccData object from Horton 3 IOData object.

Test compares the parsed results (cclib.io) and converted results (horton 3 IOData object converted into ccData object using the bridge function).",True,884,https://api.github.com/repos/cclib/cclib/pulls/884,https://github.com/cclib/cclib/pull/884,closed,52,25,3,1,1,6,1,0,[{'name': 'bridge'}],2020-06-19 13:32:47+00:00,2020-06-29 14:44:44+00:00,868317.0,"10 days, 1:11:57","[{'comment_id': 446222781, 'comment_body': 'Could we rename `ccdat` to just `data`?', 'comment_created': datetime.datetime(2020, 6, 26, 14, 35, 33, tzinfo=datetime.timezone.utc), 'commenter': 'langner', 'type': 'User'}, {'comment_id': 446226012, 'comment_body': ""I'm not familiar with Horton, but `atcorenums` sounds like it could be the number of core electrons. Is that correct? "", 'comment_created': datetime.datetime(2020, 6, 26, 14, 41, 3, tzinfo=datetime.timezone.utc), 'commenter': 'langner', 'type': 'User'}, {'comment_id': 446226797, 'comment_body': 'In cclib, `atomcharges` is a dictionary - is that what it ends up here?', 'comment_created': datetime.datetime(2020, 6, 26, 14, 42, 22, tzinfo=datetime.timezone.utc), 'commenter': 'langner', 'type': 'User'}, {'comment_id': 446743057, 'comment_body': ""Yes, I've just renamed it to `data`. Thanks!"", 'comment_created': datetime.datetime(2020, 6, 29, 2, 43, 10, tzinfo=datetime.timezone.utc), 'commenter': 'mscho527', 'type': 'User'}, {'comment_id': 446743422, 'comment_body': ""Yes, in `horton`, it looks like # of electrons after applying the pseudopotentials are stored (from what is parsed using its `from_file` method). `cclib` stores # of electrons that are approximated out with the pseudopotentials. I've added a comment right above the line to reduce confusion. Thanks!"", 'comment_created': datetime.datetime(2020, 6, 29, 2, 45, 1, tzinfo=datetime.timezone.utc), 'commenter': 'mscho527', 'type': 'User'}, {'comment_id': 446743506, 'comment_body': 'Yes. Both packages use `dict` here.', 'comment_created': datetime.datetime(2020, 6, 29, 2, 45, 22, tzinfo=datetime.timezone.utc), 'commenter': 'mscho527', 'type': 'User'}]","[{'commit_sha': '14fe0456289171c09fc3f6e0b4b769ed53e1ba99', 'committer_username': 'mscho527', 'committer_name': 'Minsik', 'committer_email': None, 'commit_date': datetime.datetime(2014, 3, 12, 12, 13, 11, tzinfo=datetime.timezone.utc)}]",Minsik,6929314,,User,,11,,5,13
436444532,"Add cclib --> horton 3 bridge, along with tests","Related Issue : #880

This PR is related to Issue #880 and builds upon #884 . This PR adds a bridging function that constructs Horton 3 IOData object from ccData object.

Test compares the parsed results (iodata.api.load_one) and converted results (horton 3 IOData object converted from ccData object using the bridge function).",True,879,https://api.github.com/repos/cclib/cclib/pulls/879,https://github.com/cclib/cclib/pull/879,closed,193,51,3,1,1,33,1,0,[{'name': 'bridge'}],2020-06-18 12:38:01+00:00,2020-07-07 14:07:38+00:00,1646977.0,"19 days, 1:29:37","[{'comment_id': 442306801, 'comment_body': 'This is all the same as in #873 - could you separate it out into a smaller separate PR?', 'comment_created': datetime.datetime(2020, 6, 18, 15, 19, 12, tzinfo=datetime.timezone.utc), 'commenter': 'langner', 'type': 'User'}, {'comment_id': 442314431, 'comment_body': '@langner I am a bit confused here -- I thought that the changes in Travis should be included in the PR so that there can be tests run for the new methods? If you meant that the Travis configurations / test functions should be a separate PR and the bridge functions in another PR, I can definitely work it out tomorrow. Thanks!', 'comment_created': datetime.datetime(2020, 6, 18, 15, 30, 7, tzinfo=datetime.timezone.utc), 'commenter': 'mscho527', 'type': 'User'}, {'comment_id': 442352864, 'comment_body': ""Yeah, if it's something that's useful in both PRs and can exist in master before either of them, why not merge it in earlier? Trimming down your PRs is always good."", 'comment_created': datetime.datetime(2020, 6, 18, 16, 27, 58, tzinfo=datetime.timezone.utc), 'commenter': 'langner', 'type': 'User'}, {'comment_id': 442355273, 'comment_body': ""Don't these variables live at module level? You don't need to pass them in as arguments."", 'comment_created': datetime.datetime(2020, 6, 18, 16, 31, 43, tzinfo=datetime.timezone.utc), 'commenter': 'langner', 'type': 'User'}, {'comment_id': 442355766, 'comment_body': 'Another thing you could have done is put makehorton and makecclib in separate PRs.', 'comment_created': datetime.datetime(2020, 6, 18, 16, 32, 33, tzinfo=datetime.timezone.utc), 'commenter': 'langner', 'type': 'User'}, {'comment_id': 442644570, 'comment_body': ""Yes those variables do live at module level. I've wrote the function this way to be consistent with other bridges, but I can modify this to make it more readable and efficient. Thanks!"", 'comment_created': datetime.datetime(2020, 6, 19, 5, 53, 30, tzinfo=datetime.timezone.utc), 'commenter': 'mscho527', 'type': 'User'}, {'comment_id': 446215853, 'comment_body': ""Let's use `np.asanyarray` to do conversions throughout again, otherwise these attributes will silently get ignored when you really want them to be added.\r\n\r\nThough, at the point you have a `ccData` instance, all of these should already be `ndarray`s. so I wonder if any of that is necessary."", 'comment_created': datetime.datetime(2020, 6, 26, 14, 24, 8, tzinfo=datetime.timezone.utc), 'commenter': 'berquist', 'type': 'User'}, {'comment_id': 446218075, 'comment_body': 'Can you explain why?', 'comment_created': datetime.datetime(2020, 6, 26, 14, 27, 44, tzinfo=datetime.timezone.utc), 'commenter': 'berquist', 'type': 'User'}, {'comment_id': 446227282, 'comment_body': 'Alright, thanks for being consistent.', 'comment_created': datetime.datetime(2020, 6, 26, 14, 43, 8, tzinfo=datetime.timezone.utc), 'commenter': 'langner', 'type': 'User'}, {'comment_id': 446777164, 'comment_body': ""I think it's meant so that the multiplicity is derived from MO and rather not be overridden by the `spinpol` attribute. This is mentioned in `IOData` [code](https://github.com/theochem/iodata/blob/b36513d162f99b57264005583701c6987037839c/iodata/iodata.py#L174). I'll add this as comment for reference. Thanks."", 'comment_created': datetime.datetime(2020, 6, 29, 5, 18, 6, tzinfo=datetime.timezone.utc), 'commenter': 'mscho527', 'type': 'User'}, {'comment_id': 446778889, 'comment_body': ""I've removed the unnecessary checks you have mentioned. Thanks for the comment!"", 'comment_created': datetime.datetime(2020, 6, 29, 5, 24, 48, tzinfo=datetime.timezone.utc), 'commenter': 'mscho527', 'type': 'User'}, {'comment_id': 447035529, 'comment_body': 'These comments were placed in a wrong (a block above) location in the previous PR. This should fix it.', 'comment_created': datetime.datetime(2020, 6, 29, 14, 56, 35, tzinfo=datetime.timezone.utc), 'commenter': 'mscho527', 'type': 'User'}, {'comment_id': 447674871, 'comment_body': ""Shouldn't these be key access rather than attribute access?"", 'comment_created': datetime.datetime(2020, 6, 30, 13, 19, 14, tzinfo=datetime.timezone.utc), 'commenter': 'berquist', 'type': 'User'}, {'comment_id': 447676827, 'comment_body': '`asanyarray` trick?', 'comment_created': datetime.datetime(2020, 6, 30, 13, 21, 49, tzinfo=datetime.timezone.utc), 'commenter': 'berquist', 'type': 'User'}, {'comment_id': 447681815, 'comment_body': 'Should this be a `not hasattr` instead?', 'comment_created': datetime.datetime(2020, 6, 30, 13, 28, 36, tzinfo=datetime.timezone.utc), 'commenter': 'berquist', 'type': 'User'}, {'comment_id': 447682243, 'comment_body': ""I think `mult` will always be an integer when present, unless you've found otherwise."", 'comment_created': datetime.datetime(2020, 6, 30, 13, 29, 5, tzinfo=datetime.timezone.utc), 'commenter': 'berquist', 'type': 'User'}, {'comment_id': 447682696, 'comment_body': 'Can you reflow this comment?', 'comment_created': datetime.datetime(2020, 6, 30, 13, 29, 35, tzinfo=datetime.timezone.utc), 'commenter': 'berquist', 'type': 'User'}, {'comment_id': 447712224, 'comment_body': 'Yep, you can assume the types specified in [data.py](https://github.com/cclib/cclib/blob/master/cclib/parser/data.py#L103) will hold.', 'comment_created': datetime.datetime(2020, 6, 30, 14, 8, 52, tzinfo=datetime.timezone.utc), 'commenter': 'langner', 'type': 'User'}, {'comment_id': 447712528, 'comment_body': 'Another redundant check.', 'comment_created': datetime.datetime(2020, 6, 30, 14, 9, 17, tzinfo=datetime.timezone.utc), 'commenter': 'langner', 'type': 'User'}, {'comment_id': 447713818, 'comment_body': 'Can you please make a separate test class for 2 and 3 versions?', 'comment_created': datetime.datetime(2020, 6, 30, 14, 10, 57, tzinfo=datetime.timezone.utc), 'commenter': 'langner', 'type': 'User'}, {'comment_id': 447725485, 'comment_body': ""As far as I know, these indeed are attribute access since an instance of horton3's `MolecularOrbital` class needs to be created beforehand. [This ](https://github.com/theochem/iodata/blob/b36513d162f99b57264005583701c6987037839c/iodata/orbitals.py#L30)is the code block that is relevant. I will recheck this soon to make sure."", 'comment_created': datetime.datetime(2020, 6, 30, 14, 25, 53, tzinfo=datetime.timezone.utc), 'commenter': 'mscho527', 'type': 'User'}, {'comment_id': 447762686, 'comment_body': 'But in the previous expression `moattr` is created as a dictionary.', 'comment_created': datetime.datetime(2020, 6, 30, 15, 13, 14, tzinfo=datetime.timezone.utc), 'commenter': 'langner', 'type': 'User'}, {'comment_id': 448093860, 'comment_body': ""My bad -- sorry for the confusion. I've modified this. Thanks for catching this!"", 'comment_created': datetime.datetime(2020, 7, 1, 3, 23, 56, tzinfo=datetime.timezone.utc), 'commenter': 'mscho527', 'type': 'User'}, {'comment_id': 448214245, 'comment_body': ""Yes -- I've swapped the check with `asanyarray`. Thanks!"", 'comment_created': datetime.datetime(2020, 7, 1, 8, 48, 28, tzinfo=datetime.timezone.utc), 'commenter': 'mscho527', 'type': 'User'}, {'comment_id': 448214469, 'comment_body': ""Thanks for finding this! I've changed it to `not hasattr`."", 'comment_created': datetime.datetime(2020, 7, 1, 8, 48, 49, tzinfo=datetime.timezone.utc), 'commenter': 'mscho527', 'type': 'User'}, {'comment_id': 448214849, 'comment_body': ""I've removed the unnecessary type checks. Thank you!"", 'comment_created': datetime.datetime(2020, 7, 1, 8, 49, 27, tzinfo=datetime.timezone.utc), 'commenter': 'mscho527', 'type': 'User'}, {'comment_id': 448215065, 'comment_body': ""I've reflowed it for line length of 100. Thanks."", 'comment_created': datetime.datetime(2020, 7, 1, 8, 49, 48, tzinfo=datetime.timezone.utc), 'commenter': 'mscho527', 'type': 'User'}, {'comment_id': 448215264, 'comment_body': ""I've removed the unnecessary checks. Thanks."", 'comment_created': datetime.datetime(2020, 7, 1, 8, 50, 6, tzinfo=datetime.timezone.utc), 'commenter': 'mscho527', 'type': 'User'}, {'comment_id': 448217607, 'comment_body': ""I've separated horton 2 and 3 test classes. Thanks!"", 'comment_created': datetime.datetime(2020, 7, 1, 8, 54, 9, tzinfo=datetime.timezone.utc), 'commenter': 'mscho527', 'type': 'User'}, {'comment_id': 448541302, 'comment_body': 'Could you add a comment here explaining what this is?', 'comment_created': datetime.datetime(2020, 7, 1, 18, 24, 10, tzinfo=datetime.timezone.utc), 'commenter': 'langner', 'type': 'User'}, {'comment_id': 448541622, 'comment_body': ""Isn't `len(data.mocoeffs[0]) == data.nbasis`?"", 'comment_created': datetime.datetime(2020, 7, 1, 18, 24, 47, tzinfo=datetime.timezone.utc), 'commenter': 'langner', 'type': 'User'}, {'comment_id': 448842560, 'comment_body': ""I've added a comment about the MolecularOrbital class and the structure of `occs`."", 'comment_created': datetime.datetime(2020, 7, 2, 8, 39, 55, tzinfo=datetime.timezone.utc), 'commenter': 'mscho527', 'type': 'User'}, {'comment_id': 448842736, 'comment_body': ""Yes. Thanks for pointing that out. I've just replaced it."", 'comment_created': datetime.datetime(2020, 7, 2, 8, 40, 9, tzinfo=datetime.timezone.utc), 'commenter': 'mscho527', 'type': 'User'}]","[{'commit_sha': '23df354bf56eb61bd950a752512a2eeab80259f6', 'committer_username': 'mscho527', 'committer_name': 'Minsik', 'committer_email': None, 'commit_date': datetime.datetime(2014, 3, 12, 12, 13, 11, tzinfo=datetime.timezone.utc)}]",Minsik,6929314,,User,,11,,5,13
438497594,Add docs for horton bridge,"Related Issue: #880

This is a PR that adds documentation for bridge to horton and how Hirshfeld charges & related charges in horton can be calculated using the bridge.
",True,888,https://api.github.com/repos/cclib/cclib/pulls/888,https://github.com/cclib/cclib/pull/888,closed,124,0,3,1,0,2,2,0,"[{'name': 'bridge'}, {'name': 'docs'}]",2020-06-23 11:09:23+00:00,2020-07-06 14:36:42+00:00,1135639.0,"13 days, 3:27:19","[{'comment_id': 449602659, 'comment_body': 'Does `HirshfeldWPart` need to be imported from somewhere?', 'comment_created': datetime.datetime(2020, 7, 3, 14, 10, 8, tzinfo=datetime.timezone.utc), 'commenter': 'shivupa', 'type': 'User'}, {'comment_id': 449606404, 'comment_body': ""Yes -- thanks for finding this! I'll fix this right away. This is applies for the BeckeWPart as well."", 'comment_created': datetime.datetime(2020, 7, 3, 14, 18, 43, tzinfo=datetime.timezone.utc), 'commenter': 'mscho527', 'type': 'User'}]","[{'commit_sha': 'a82d9240d1600919650664a1dd5ea85ea2beb52c', 'committer_username': 'mscho527', 'committer_name': 'Minsik', 'committer_email': None, 'commit_date': datetime.datetime(2014, 3, 12, 12, 13, 11, tzinfo=datetime.timezone.utc)}]",Minsik,6929314,,User,,11,,5,13
441404085,Add pyquante2 to Travis configuration,"Related Issue: #886 

This is a first PR associated with issue #886. It adds pyquante2 into the list of packages to install for Travis builds. Subsequent PRs will build upon this PR.",True,893,https://api.github.com/repos/cclib/cclib/pulls/893,https://github.com/cclib/cclib/pull/893,closed,1,0,1,1,1,2,1,0,[{'name': 'maintenance'}],2020-06-29 13:11:10+00:00,2020-07-01 14:34:29+00:00,177799.0,"2 days, 1:23:19","[{'comment_id': 447689156, 'comment_body': 'I think what we should do instead of having this added in two separate ways (`pip` installing `master` and `conda` installing an older tagged version) is to have this `pip install git...` line after lines 13 and 14 in `requirements.txt`: https://github.com/cclib/cclib/blob/0217c94cb06e1c812459fc87ee65b877c7ba3599/requirements.txt#L14\r\nso that we can just drop PyQuante (1) later if possible.', 'comment_created': datetime.datetime(2020, 6, 30, 13, 38, 25, tzinfo=datetime.timezone.utc), 'commenter': 'berquist', 'type': 'User'}, {'comment_id': 448260472, 'comment_body': ""I've made the changes that you suggested -- PyQuante 1.6.5 should be installed for Python 2.x.x machine in Travis (from sourceforge) and pyquante2 should be installed for Python 3.x.x machine (from github) in Travis."", 'comment_created': datetime.datetime(2020, 7, 1, 10, 10, 26, tzinfo=datetime.timezone.utc), 'commenter': 'mscho527', 'type': 'User'}]","[{'commit_sha': '80527f585fc793d8ca90f5910a82abedb561f7fc', 'committer_username': 'mscho527', 'committer_name': 'Minsik', 'committer_email': None, 'commit_date': datetime.datetime(2014, 3, 12, 12, 13, 11, tzinfo=datetime.timezone.utc)}]",Minsik,6929314,,User,,11,,5,13
441975819,Update pyquante bridge for pyquante2 support,"_Related Issue: #886_
_Builds upon: #893_

This PR updates the bridge from `cclib` to `pyquante` so that it works with pyquante2. Both the bridge function and test routine have been updated. Input for the bridge function has been modified into `ccData` object as well in the process to partially address #890.

A future PR that updates `cclib.method.volume` will depend on the changes made in this PR.",True,894,https://api.github.com/repos/cclib/cclib/pulls/894,https://github.com/cclib/cclib/pull/894,closed,108,19,4,1,0,21,1,0,[{'name': 'bridge'}],2020-06-30 11:51:59+00:00,2020-07-06 14:31:05+00:00,527946.0,"6 days, 2:39:06","[{'comment_id': 448410899, 'comment_body': 'Can you run black on this file?', 'comment_created': datetime.datetime(2020, 7, 1, 14, 39, 44, tzinfo=datetime.timezone.utc), 'commenter': 'berquist', 'type': 'User'}, {'comment_id': 448537326, 'comment_body': 'Where is MissingAttributeError defined?', 'comment_created': datetime.datetime(2020, 7, 1, 18, 16, 5, tzinfo=datetime.timezone.utc), 'commenter': 'langner', 'type': 'User'}, {'comment_id': 448538506, 'comment_body': ""Build this up more incrementally in a few lines, so that it's more readable."", 'comment_created': datetime.datetime(2020, 7, 1, 18, 18, 34, tzinfo=datetime.timezone.utc), 'commenter': 'langner', 'type': 'User'}, {'comment_id': 448539383, 'comment_body': ""Could you rephrase this so that it's imperative and clearly a TODO?"", 'comment_created': datetime.datetime(2020, 7, 1, 18, 20, 25, tzinfo=datetime.timezone.utc), 'commenter': 'langner', 'type': 'User'}, {'comment_id': 448539716, 'comment_body': 'Is it possible to read in the file and grab the data instead?', 'comment_created': datetime.datetime(2020, 7, 1, 18, 21, 6, tzinfo=datetime.timezone.utc), 'commenter': 'langner', 'type': 'User'}, {'comment_id': 448805754, 'comment_body': ""I've just added it. Thanks for finding this."", 'comment_created': datetime.datetime(2020, 7, 2, 7, 35, 53, tzinfo=datetime.timezone.utc), 'commenter': 'mscho527', 'type': 'User'}, {'comment_id': 448806078, 'comment_body': ""I've split this into two lines. Thanks."", 'comment_created': datetime.datetime(2020, 7, 2, 7, 36, 31, tzinfo=datetime.timezone.utc), 'commenter': 'mscho527', 'type': 'User'}, {'comment_id': 448806242, 'comment_body': ""I've clarified this comment. Thanks"", 'comment_created': datetime.datetime(2020, 7, 2, 7, 36, 48, tzinfo=datetime.timezone.utc), 'commenter': 'mscho527', 'type': 'User'}, {'comment_id': 448808993, 'comment_body': ""From what I know, `pyquante2` only has xyz reader as a means of directly reading in files. I suppose that it is possible to read in from xyz files in turbomole 7.2 data files, although I am not sure if this is what we want given that parsing turbomole is still under development. (`atomcoords` and `atomnos` are already fully implemented for turbomole parser. `atomcharges` isn't, but it shouldn't be an issue here.)"", 'comment_created': datetime.datetime(2020, 7, 2, 7, 41, 57, tzinfo=datetime.timezone.utc), 'commenter': 'mscho527', 'type': 'User'}, {'comment_id': 449044357, 'comment_body': ""Doesn't this do the same thing as line 48 above? I think that approach is easier to understand, even if it isn't idiomatic NumPy."", 'comment_created': datetime.datetime(2020, 7, 2, 14, 30, 18, tzinfo=datetime.timezone.utc), 'commenter': 'berquist', 'type': 'User'}, {'comment_id': 449070306, 'comment_body': 'Do you think we can avoid duplicating function calls by storing the function name in a variable based on the module found and then calling that?', 'comment_created': datetime.datetime(2020, 7, 2, 15, 8, 7, tzinfo=datetime.timezone.utc), 'commenter': 'berquist', 'type': 'User'}, {'comment_id': 449406803, 'comment_body': ""There is a very small difference -- In old pyquante, the format is: `[(3,( .0000000000, .0000000000, .0000000000)), (1,( .0000000000, .0000000000,1.629912))]` whereas in pyquante2, it is `[(3,.0000000000, .0000000000, .0000000000), (1, .0000000000, .0000000000,1.629912)]`. I'll add this difference as a comment in the code. Thanks."", 'comment_created': datetime.datetime(2020, 7, 3, 6, 50, 56, tzinfo=datetime.timezone.utc), 'commenter': 'mscho527', 'type': 'User'}, {'comment_id': 449408148, 'comment_body': ""I was separating the code thinking that older PyQuante code will be eventually removed when python 2.x.x support is dropped from `cclib`. If that's not happening too soon, I think your suggestion is a great idea."", 'comment_created': datetime.datetime(2020, 7, 3, 6, 54, 25, tzinfo=datetime.timezone.utc), 'commenter': 'mscho527', 'type': 'User'}, {'comment_id': 449531659, 'comment_body': ""Yes -- I've just run black on this. Thanks."", 'comment_created': datetime.datetime(2020, 7, 3, 11, 22, 15, tzinfo=datetime.timezone.utc), 'commenter': 'mscho527', 'type': 'User'}, {'comment_id': 449582769, 'comment_body': ""Eh, I don't think it's worth it after all, it's such a small piece of code, and the arguments are just different enough."", 'comment_created': datetime.datetime(2020, 7, 3, 13, 25, 45, tzinfo=datetime.timezone.utc), 'commenter': 'berquist', 'type': 'User'}, {'comment_id': 449597347, 'comment_body': 'Should this go elsewhere like `cclib/parser/data.py` or something so we can use this in other methods in the future? @langner @berquist ', 'comment_created': datetime.datetime(2020, 7, 3, 13, 58, 23, tzinfo=datetime.timezone.utc), 'commenter': 'shivupa', 'type': 'User'}, {'comment_id': 449598159, 'comment_body': '`... attribute: {}"".format(missing)` is a little neater', 'comment_created': datetime.datetime(2020, 7, 3, 14, 0, 12, tzinfo=datetime.timezone.utc), 'commenter': 'shivupa', 'type': 'User'}, {'comment_id': 449598586, 'comment_body': ""I'm going to mark this resolved"", 'comment_created': datetime.datetime(2020, 7, 3, 14, 1, 10, tzinfo=datetime.timezone.utc), 'commenter': 'shivupa', 'type': 'User'}, {'comment_id': 449598830, 'comment_body': ""I'm going to mark this resolved"", 'comment_created': datetime.datetime(2020, 7, 3, 14, 1, 40, tzinfo=datetime.timezone.utc), 'commenter': 'shivupa', 'type': 'User'}, {'comment_id': 449599611, 'comment_body': ""Just an fyi, I've copied this from `cclib.method.calculationmethod` -- most methods use this as well."", 'comment_created': datetime.datetime(2020, 7, 3, 14, 3, 27, tzinfo=datetime.timezone.utc), 'commenter': 'mscho527', 'type': 'User'}, {'comment_id': 449988276, 'comment_body': ""I've updated just updated this. Thanks for the suggestion!"", 'comment_created': datetime.datetime(2020, 7, 6, 5, 18, 10, tzinfo=datetime.timezone.utc), 'commenter': 'mscho527', 'type': 'User'}]","[{'commit_sha': '03a22f27d31ab84cf807ae3c45b3aae257add806', 'committer_username': 'mscho527', 'committer_name': 'Minsik', 'committer_email': None, 'commit_date': datetime.datetime(2014, 3, 12, 12, 13, 11, tzinfo=datetime.timezone.utc)}]",Minsik,6929314,,User,,11,,5,13
443528438,Update volume method for updated cclib2pyquante bridge,"
_Related Issue: #886
Builds upon: #894_

This PR updates volume method to match updated pyquante bridge.

Subsequent PR would build upon this PR and would add pyquante2 equivalent code for `volume.py`.",True,896,https://api.github.com/repos/cclib/cclib/pulls/896,https://github.com/cclib/cclib/pull/896,closed,67,40,3,1,1,11,2,0,"[{'name': 'methods'}, {'name': 'bridge'}]",2020-07-02 13:46:22+00:00,2020-07-09 14:32:30+00:00,607568.0,"7 days, 0:46:08","[{'comment_id': 449553117, 'comment_body': ""I'm not too sure why this comment was left in the original implementation -- `electrondensity` function calculates the charge density from a list of orbitals specified in as an input to the function anyway (which can be entire occupied orbitals or just a few frontier orbitals). If the calculation is restricted, it would just be fine to multiply by two here."", 'comment_created': datetime.datetime(2020, 7, 3, 12, 16, 46, tzinfo=datetime.timezone.utc), 'commenter': 'mscho527', 'type': 'User'}, {'comment_id': 449593672, 'comment_body': ""Wouldn't that only be the case if it was a restricted closed shell system? For ROHF, we would need to only multiply the `wavefn**2` by 2 for the doubly occupied orbitals and by 1 otherwise? "", 'comment_created': datetime.datetime(2020, 7, 3, 13, 50, 35, tzinfo=datetime.timezone.utc), 'commenter': 'shivupa', 'type': 'User'}, {'comment_id': 449603242, 'comment_body': 'Yes -- but I thought that what the original author meant was to call the function using something like this for ROHF:\r\n`volume.electrondensity(data.atomcoords[0], [data.mocoeffs[0][:data.homos[0]], data.mocoeffs[0][:data.homos[0] + 1])\r\n`\r\nto indicate different number of orbitals to consider for ROHF calculations.\r\n\r\nThis is how the function was used in the test suite:\r\n```\r\nfrontierorbs = [data_sp.mocoeffs[0][(data_sp.homos[0] - 3):(data_sp.homos[0] + 1)]]\r\n        density = volume.electrondensity(data_sp.atomcoords[0],\r\n                                         frontierorbs, data_basis.gbasis, vol)\r\n```\r\n\r\nChecking the double/single occupancy inside the function makes a lot more sense though and adding it would be pretty simple.', 'comment_created': datetime.datetime(2020, 7, 3, 14, 11, 20, tzinfo=datetime.timezone.utc), 'commenter': 'mscho527', 'type': 'User'}, {'comment_id': 450894370, 'comment_body': ""It would be better to have this guard the full definition of `getbfs`, rather than call the function and have nothing happen. (I know that's not how it's done in other parts of the code.)"", 'comment_created': datetime.datetime(2020, 7, 7, 14, 10, 43, tzinfo=datetime.timezone.utc), 'commenter': 'berquist', 'type': 'User'}, {'comment_id': 450894596, 'comment_body': 'Same comment here.', 'comment_created': datetime.datetime(2020, 7, 7, 14, 11, 2, tzinfo=datetime.timezone.utc), 'commenter': 'berquist', 'type': 'User'}, {'comment_id': 450897350, 'comment_body': ""I've noticed a bunch of these comments, but don't think they add much. Did you have a hard time understanding the code? I'd rather have a descriptive code comment toward the top of the function in that case."", 'comment_created': datetime.datetime(2020, 7, 7, 14, 14, 48, tzinfo=datetime.timezone.utc), 'commenter': 'berquist', 'type': 'User'}, {'comment_id': 450898638, 'comment_body': ""We concluded that we aren't going to worry about this right now, right?"", 'comment_created': datetime.datetime(2020, 7, 7, 14, 16, 22, tzinfo=datetime.timezone.utc), 'commenter': 'berquist', 'type': 'User'}, {'comment_id': 451307340, 'comment_body': ""@berquist Yes, that's correct."", 'comment_created': datetime.datetime(2020, 7, 8, 6, 17, 46, tzinfo=datetime.timezone.utc), 'commenter': 'mscho527', 'type': 'User'}, {'comment_id': 451309046, 'comment_body': 'If `_found_pyquante` or `_found_pyquante2` (in the next PR) are not `True`, `cclib2pyquante.makepyquante`, which is the first line to be executed in both functions should trigger an Exception. Would the exception be enough? Adding something like `if not _found_pyquante: raise someException` could be more explicit?', 'comment_created': datetime.datetime(2020, 7, 8, 6, 22, 41, tzinfo=datetime.timezone.utc), 'commenter': 'mscho527', 'type': 'User'}, {'comment_id': 451336378, 'comment_body': ""No -- I've written those when I was reading it and forgot to remove them back. Thanks."", 'comment_created': datetime.datetime(2020, 7, 8, 7, 25, 23, tzinfo=datetime.timezone.utc), 'commenter': 'mscho527', 'type': 'User'}, {'comment_id': 452262426, 'comment_body': 'No, the exception is fine for now.', 'comment_created': datetime.datetime(2020, 7, 9, 14, 32, 8, tzinfo=datetime.timezone.utc), 'commenter': 'berquist', 'type': 'User'}]","[{'commit_sha': 'bc1b40e5607c08ef2ec4c18d69685ca09ca5ca63', 'committer_username': 'mscho527', 'committer_name': 'Minsik', 'committer_email': None, 'commit_date': datetime.datetime(2014, 3, 12, 12, 13, 11, tzinfo=datetime.timezone.utc)}]",Minsik,6929314,,User,,11,,5,13
444578121,Add pyquante2 routines in volume method,"_Related Issue: #886
Builds upon: #896_ 


This PR updates volume method to support pyquante2.

Subsequent PR would build upon this PR and would add more testing to the volume method (which built upon existing method and was updated in #896 and #897) so that the calculated electron densities are verified for individual points in Cartesian coordinates.",True,897,https://api.github.com/repos/cclib/cclib/pulls/897,https://github.com/cclib/cclib/pull/897,closed,119,66,3,1,0,5,1,0,[{'name': 'methods'}],2020-07-06 06:54:56+00:00,2020-07-13 14:40:43+00:00,632747.0,"7 days, 7:45:47","[{'comment_id': 452270332, 'comment_body': ""I'm more convinced now that these checks should be outside the function definition for performance reasons and general consistency with what functions return (the desired value vs. `None`)."", 'comment_created': datetime.datetime(2020, 7, 9, 14, 43, 7, tzinfo=datetime.timezone.utc), 'commenter': 'berquist', 'type': 'User'}, {'comment_id': 452271396, 'comment_body': 'Shouldn\'t this be\r\n```suggestion\r\n    """"""Calculate the magnitude of the total electron density at every point in a volume\r\n```\r\n?', 'comment_created': datetime.datetime(2020, 7, 9, 14, 44, 35, tzinfo=datetime.timezone.utc), 'commenter': 'berquist', 'type': 'User'}, {'comment_id': 452628237, 'comment_body': ""I've added a check that raises ImportError when pyquante is not present outside the functions. Thanks."", 'comment_created': datetime.datetime(2020, 7, 10, 5, 24, 16, tzinfo=datetime.timezone.utc), 'commenter': 'mscho527', 'type': 'User'}, {'comment_id': 452628374, 'comment_body': 'Looks like I forgot to change the comment here. Thanks for pointing this out!', 'comment_created': datetime.datetime(2020, 7, 10, 5, 24, 49, tzinfo=datetime.timezone.utc), 'commenter': 'mscho527', 'type': 'User'}, {'comment_id': 453666729, 'comment_body': 'This looks good for now but in the future this should be modified to take a `coeffslist` that would either be 2D or 1D and an occupation number list that scales the spin density by (2D case) `1*occno[i]` or (1D case) `2*occno[i]`. This would require changes in `electrondensity_spin` but it would allow us to use NOs as well as MOs. Not necessary for this PR, but I thought I would add a note.', 'comment_created': datetime.datetime(2020, 7, 13, 13, 54, 15, tzinfo=datetime.timezone.utc), 'commenter': 'shivupa', 'type': 'User'}]","[{'commit_sha': '089ac674f85668ea32d5a7e40469143de0869c12', 'committer_username': 'mscho527', 'committer_name': 'Minsik', 'committer_email': None, 'commit_date': datetime.datetime(2014, 3, 12, 12, 13, 11, tzinfo=datetime.timezone.utc)}]",Minsik,6929314,,User,,11,,5,13
445238485,Fix formula that determine number of grid points in volume function,"_Related Issue: #886
Builds upon: #897_ 

This small PR fixes the formula used in `wavefunction` and `electrondensity` functions to determine the number of grid points.
Current formula uses `topcorner+spacing` as the end point for numpy's `arange` function to make sure that `topcorner` is included as one of grid points when `topcorner-origin` is divisible by `spacing`. This causes off-by-one error for some grids where `topcorner-origin` is indivisible by `spacing`. Substituting `topcorner+spacing` into `topcorner+epsilon*spacing` solves this off-by-one error.",True,898,https://api.github.com/repos/cclib/cclib/pulls/898,https://github.com/cclib/cclib/pull/898,closed,8,6,1,1,2,11,2,0,"[{'name': 'bug'}, {'name': 'methods'}]",2020-07-07 08:13:21+00:00,2020-07-14 15:13:34+00:00,630013.0,"7 days, 7:00:13","[{'comment_id': 450916121, 'comment_body': 'Perhaps call this `data` or `ccdata`.', 'comment_created': datetime.datetime(2020, 7, 7, 14, 39, 16, tzinfo=datetime.timezone.utc), 'commenter': 'langner', 'type': 'User'}, {'comment_id': 450916251, 'comment_body': 'objectS?', 'comment_created': datetime.datetime(2020, 7, 7, 14, 39, 25, tzinfo=datetime.timezone.utc), 'commenter': 'langner', 'type': 'User'}, {'comment_id': 450919097, 'comment_body': 'What if both of these are false?', 'comment_created': datetime.datetime(2020, 7, 7, 14, 43, 9, tzinfo=datetime.timezone.utc), 'commenter': 'langner', 'type': 'User'}, {'comment_id': 450919402, 'comment_body': '`ccdata`?', 'comment_created': datetime.datetime(2020, 7, 7, 14, 43, 31, tzinfo=datetime.timezone.utc), 'commenter': 'langner', 'type': 'User'}, {'comment_id': 451338332, 'comment_body': ""This applies to PR #896 as well, so I've modified both of those. Thanks!"", 'comment_created': datetime.datetime(2020, 7, 8, 7, 29, 2, tzinfo=datetime.timezone.utc), 'commenter': 'mscho527', 'type': 'User'}, {'comment_id': 451340127, 'comment_body': ""If both are false, `pyamp` wouldn't be called by `wavefunction` or `electrondensity` because each of the function's first lines -- getbfs include checking the existence of the packages and would throw Exception if any of pyquante or pyquante2 is not present. I could add the exception here as well if that would make things more explicit?"", 'comment_created': datetime.datetime(2020, 7, 8, 7, 32, 12, tzinfo=datetime.timezone.utc), 'commenter': 'mscho527', 'type': 'User'}, {'comment_id': 451547245, 'comment_body': ""I've updated this. Thanks!"", 'comment_created': datetime.datetime(2020, 7, 8, 13, 33, 12, tzinfo=datetime.timezone.utc), 'commenter': 'mscho527', 'type': 'User'}, {'comment_id': 454383149, 'comment_body': 'Can you factor this back out into a constant?', 'comment_created': datetime.datetime(2020, 7, 14, 14, 7, 54, tzinfo=datetime.timezone.utc), 'commenter': 'berquist', 'type': 'User'}, {'comment_id': 454383948, 'comment_body': 'Is there a reason for this comment?', 'comment_created': datetime.datetime(2020, 7, 14, 14, 9, 4, tzinfo=datetime.timezone.utc), 'commenter': 'berquist', 'type': 'User'}, {'comment_id': 454388107, 'comment_body': ""I've just factored this out as a constant. Thanks for the comment!"", 'comment_created': datetime.datetime(2020, 7, 14, 14, 14, 47, tzinfo=datetime.timezone.utc), 'commenter': 'mscho527', 'type': 'User'}, {'comment_id': 454389239, 'comment_body': ""This looks like one of the comments that I've left in the earlier PR while reading through the code and forgot to remove. It looks like somehow this comment found its way back in :0 I've removed this. Thanks for letting me know."", 'comment_created': datetime.datetime(2020, 7, 14, 14, 16, 23, tzinfo=datetime.timezone.utc), 'commenter': 'mscho527', 'type': 'User'}]","[{'commit_sha': '76650138fbd6c24a72ef5a91f7520c7ff808f5e1', 'committer_username': 'mscho527', 'committer_name': 'Minsik', 'committer_email': None, 'commit_date': datetime.datetime(2014, 3, 12, 12, 13, 11, tzinfo=datetime.timezone.utc)}]",Minsik,6929314,,User,,11,,5,13
446191805,Update test routine for volume method to include verify data from each point on a grid,"_Related Issue: #886
Builds upon: #898_ 

This PR updates the test routine for volume method and adds a new test suite `test_cube`. The new test will ensure that the calculated charge densities from the volume method are usable for calculating the QTAIM charges.

",True,899,https://api.github.com/repos/cclib/cclib/pulls/899,https://github.com/cclib/cclib/pull/899,closed,668,111,5,1,1,24,2,0,"[{'name': 'methods'}, {'name': 'tests'}]",2020-07-08 11:51:44+00:00,2020-07-16 03:43:25+00:00,661901.0,"7 days, 15:51:41","[{'comment_id': 454385709, 'comment_body': ""Change this to\r\n```suggestion\r\nmp2_e, scf_wfn = energy('mp2', return_wfn=True)\r\n```\r\nbecause this doesn't actually calculate the MP2 wavefunction, only the Hartree-Fock wavefunction."", 'comment_created': datetime.datetime(2020, 7, 14, 14, 11, 32, tzinfo=datetime.timezone.utc), 'commenter': 'berquist', 'type': 'User'}, {'comment_id': 454386792, 'comment_body': 'This should not be in the `basicPsi4-1.2.1` folder correct? Either modify the psi4 1.3.1 tests or it can be added as a regression test', 'comment_created': datetime.datetime(2020, 7, 14, 14, 13, 3, tzinfo=datetime.timezone.utc), 'commenter': 'shivupa', 'type': 'User'}, {'comment_id': 454387780, 'comment_body': ""You've accidentally run Psi4 1.3.2 in the folder for 1.2.1. 1.2.1 should be available from their conda channel, so you can make a new env with that version."", 'comment_created': datetime.datetime(2020, 7, 14, 14, 14, 19, tzinfo=datetime.timezone.utc), 'commenter': 'berquist', 'type': 'User'}, {'comment_id': 454389296, 'comment_body': 'I think you can avoid the loop with append by using `np.fromtxt` and skipping the first 6 rows.', 'comment_created': datetime.datetime(2020, 7, 14, 14, 16, 27, tzinfo=datetime.timezone.utc), 'commenter': 'berquist', 'type': 'User'}, {'comment_id': 454390099, 'comment_body': ""No -- I didn't notice this. I'll modify the 1.3.1 test instead and add it back. Thanks for letting me know about this!"", 'comment_created': datetime.datetime(2020, 7, 14, 14, 17, 33, tzinfo=datetime.timezone.utc), 'commenter': 'mscho527', 'type': 'User'}, {'comment_id': 454394812, 'comment_body': ""I see. Thanks for letting me know. I'll change this to scf_wfn."", 'comment_created': datetime.datetime(2020, 7, 14, 14, 24, 6, tzinfo=datetime.timezone.utc), 'commenter': 'mscho527', 'type': 'User'}, {'comment_id': 454395053, 'comment_body': ""Yes. I'm fetching 1.2.1 from conda now. Thanks."", 'comment_created': datetime.datetime(2020, 7, 14, 14, 24, 23, tzinfo=datetime.timezone.utc), 'commenter': 'mscho527', 'type': 'User'}, {'comment_id': 454395761, 'comment_body': ""Yes. I'll try using `np.fromtxt` with `skiprows = 6` after the call and update this. Thanks for the comment!"", 'comment_created': datetime.datetime(2020, 7, 14, 14, 25, 17, tzinfo=datetime.timezone.utc), 'commenter': 'mscho527', 'type': 'User'}, {'comment_id': 454615315, 'comment_body': 'Unnecessary extra lines.', 'comment_created': datetime.datetime(2020, 7, 14, 20, 11, 31, tzinfo=datetime.timezone.utc), 'commenter': 'langner', 'type': 'User'}, {'comment_id': 454616145, 'comment_body': 'These 4 lines you could probably put in a little helper function and pass in `density` or `wanefn` above.', 'comment_created': datetime.datetime(2020, 7, 14, 20, 13, 7, tzinfo=datetime.timezone.utc), 'commenter': 'langner', 'type': 'User'}, {'comment_id': 454809490, 'comment_body': ""I've reformatted the file with `black`. Thanks!"", 'comment_created': datetime.datetime(2020, 7, 15, 5, 56, 43, tzinfo=datetime.timezone.utc), 'commenter': 'mscho527', 'type': 'User'}, {'comment_id': 454810170, 'comment_body': ""I've made the necessary changes here. Thanks!"", 'comment_created': datetime.datetime(2020, 7, 15, 5, 58, 57, tzinfo=datetime.timezone.utc), 'commenter': 'mscho527', 'type': 'User'}, {'comment_id': 454811575, 'comment_body': ""@berquist I've tried using `np.loadtxt` and it looks like `loadtxt` expects every row to have same number of elements. This is not the case for cube files generated by Psi4. I can still use `loadtxt` for the first N-1 lines then do `fromstring` for the last line -- I'm not sure which would be better though."", 'comment_created': datetime.datetime(2020, 7, 15, 6, 3, 28, tzinfo=datetime.timezone.utc), 'commenter': 'mscho527', 'type': 'User'}, {'comment_id': 454811802, 'comment_body': ""I've replaced this with 1.2.1 output file. Thanks!"", 'comment_created': datetime.datetime(2020, 7, 15, 6, 4, 16, tzinfo=datetime.timezone.utc), 'commenter': 'mscho527', 'type': 'User'}, {'comment_id': 454818369, 'comment_body': 'Could you add a comment here explaining what this dictionary contains?', 'comment_created': datetime.datetime(2020, 7, 15, 6, 22, 46, tzinfo=datetime.timezone.utc), 'commenter': 'langner', 'type': 'User'}, {'comment_id': 454818611, 'comment_body': 'These parentheses here are unnecessary.', 'comment_created': datetime.datetime(2020, 7, 15, 6, 23, 20, tzinfo=datetime.timezone.utc), 'commenter': 'langner', 'type': 'User'}, {'comment_id': 454818703, 'comment_body': 'Also unnecessary.', 'comment_created': datetime.datetime(2020, 7, 15, 6, 23, 33, tzinfo=datetime.timezone.utc), 'commenter': 'langner', 'type': 'User'}, {'comment_id': 454818872, 'comment_body': 'What is the purpose of this this `del`?', 'comment_created': datetime.datetime(2020, 7, 15, 6, 24, 2, tzinfo=datetime.timezone.utc), 'commenter': 'langner', 'type': 'User'}, {'comment_id': 454822697, 'comment_body': ""Yes. I've added a helper function for this part of the code. Thanks."", 'comment_created': datetime.datetime(2020, 7, 15, 6, 33, 48, tzinfo=datetime.timezone.utc), 'commenter': 'mscho527', 'type': 'User'}, {'comment_id': 454830740, 'comment_body': ""I've added a short comment about this dict. Thanks."", 'comment_created': datetime.datetime(2020, 7, 15, 6, 52, 34, tzinfo=datetime.timezone.utc), 'commenter': 'mscho527', 'type': 'User'}, {'comment_id': 454830917, 'comment_body': ""I've removed both parentheses. Thanks!"", 'comment_created': datetime.datetime(2020, 7, 15, 6, 52, 55, tzinfo=datetime.timezone.utc), 'commenter': 'mscho527', 'type': 'User'}, {'comment_id': 454831478, 'comment_body': ""This looks like something from the existing code. I'll see how the tests go, but I don't think it serves any purpose here. Thanks for letting me know about this!"", 'comment_created': datetime.datetime(2020, 7, 15, 6, 54, 9, tzinfo=datetime.timezone.utc), 'commenter': 'mscho527', 'type': 'User'}, {'comment_id': 455056399, 'comment_body': 'In that case, I would read the file as a list of lists of strings, and then have a single call to `np.asanyarray` where the dtype is set to floats, and then call the `resize` method on that.', 'comment_created': datetime.datetime(2020, 7, 15, 13, 36, 9, tzinfo=datetime.timezone.utc), 'commenter': 'berquist', 'type': 'User'}, {'comment_id': 455090330, 'comment_body': 'I have just updated this to read in as strings first and then construct numpy array in a single call. Thanks.', 'comment_created': datetime.datetime(2020, 7, 15, 14, 22, 4, tzinfo=datetime.timezone.utc), 'commenter': 'mscho527', 'type': 'User'}]","[{'commit_sha': '984be6c10b6ff7444cb2002cd80e33d543ac3897', 'committer_username': 'mscho527', 'committer_name': 'Minsik', 'committer_email': None, 'commit_date': datetime.datetime(2014, 3, 12, 12, 13, 11, tzinfo=datetime.timezone.utc)}]",Minsik,6929314,,User,,11,,5,13
446821571,Add QTAIM method,"_Related Issue: #886
Builds upon: #899_

This PR adds Bader's QTAIM charges to `cclib`, based on the on-grid algorithm proposed by Henkelman group in the paper doi:10.1016/j.commatsci.2005.04.010



",True,900,https://api.github.com/repos/cclib/cclib/pulls/900,https://github.com/cclib/cclib/pull/900,closed,285,7,5,1,1,50,2,0,"[{'name': 'feature'}, {'name': 'methods'}]",2020-07-09 12:14:46+00:00,2020-07-21 16:57:25+00:00,1053759.0,"12 days, 4:42:39","[{'comment_id': 455088147, 'comment_body': 'typo here? `pt2s` should be `pt2` right?', 'comment_created': datetime.datetime(2020, 7, 15, 14, 19, 11, tzinfo=datetime.timezone.utc), 'commenter': 'shivupa', 'type': 'User'}, {'comment_id': 455492049, 'comment_body': 'I would make this a private function at the module level.', 'comment_created': datetime.datetime(2020, 7, 16, 3, 44, 53, tzinfo=datetime.timezone.utc), 'commenter': 'berquist', 'type': 'User'}, {'comment_id': 455492112, 'comment_body': 'Can you make this private?', 'comment_created': datetime.datetime(2020, 7, 16, 3, 45, 5, tzinfo=datetime.timezone.utc), 'commenter': 'berquist', 'type': 'User'}, {'comment_id': 455493501, 'comment_body': 'Can you mark this as being equation (2)? And maybe this is better called `delta_rho` or something similar, since this is a more significant quantity than implied by `tmp`.', 'comment_created': datetime.datetime(2020, 7, 16, 3, 50, 30, tzinfo=datetime.timezone.utc), 'commenter': 'berquist', 'type': 'User'}, {'comment_id': 455493795, 'comment_body': 'Can you mark this as being equation (1)? And call it something like `grad_rho_dot_r` or `grad_density_dot_r`?', 'comment_created': datetime.datetime(2020, 7, 16, 3, 51, 38, tzinfo=datetime.timezone.utc), 'commenter': 'berquist', 'type': 'User'}, {'comment_id': 455522256, 'comment_body': ""I've made this function private. Thanks!"", 'comment_created': datetime.datetime(2020, 7, 16, 5, 42, 6, tzinfo=datetime.timezone.utc), 'commenter': 'mscho527', 'type': 'User'}, {'comment_id': 455522302, 'comment_body': ""Yes -- I've just updated this variable to be private. Thanks."", 'comment_created': datetime.datetime(2020, 7, 16, 5, 42, 18, tzinfo=datetime.timezone.utc), 'commenter': 'mscho527', 'type': 'User'}, {'comment_id': 455522592, 'comment_body': ""Yes. I've just made the changes. Thanks!"", 'comment_created': datetime.datetime(2020, 7, 16, 5, 43, 18, tzinfo=datetime.timezone.utc), 'commenter': 'mscho527', 'type': 'User'}, {'comment_id': 455522731, 'comment_body': ""I've just made the comments and renamed the variables. The code looks much more readable this way. Thanks!"", 'comment_created': datetime.datetime(2020, 7, 16, 5, 43, 51, tzinfo=datetime.timezone.utc), 'commenter': 'mscho527', 'type': 'User'}, {'comment_id': 456215741, 'comment_body': 'Can you add a logger call for ""Obtaining charge density on a grid.""?', 'comment_created': datetime.datetime(2020, 7, 17, 4, 46, 12, tzinfo=datetime.timezone.utc), 'commenter': 'berquist', 'type': 'User'}, {'comment_id': 456218559, 'comment_body': ""Store `list(zip(maxat[0], maxat[1], maxat[2]))` as `directions` so you don't need to keep remaking it..."", 'comment_created': datetime.datetime(2020, 7, 17, 4, 58, 14, tzinfo=datetime.timezone.utc), 'commenter': 'berquist', 'type': 'User'}, {'comment_id': 456218644, 'comment_body': '...and then you can do\r\n```suggestion\r\n                            nextDirection = [ind - 1 for ind in directions[0]]\r\n```\r\nhere.', 'comment_created': datetime.datetime(2020, 7, 17, 4, 58, 41, tzinfo=datetime.timezone.utc), 'commenter': 'berquist', 'type': 'User'}, {'comment_id': 456219248, 'comment_body': ""The body of this conditional is the same as the previous conditional, let's combine them."", 'comment_created': datetime.datetime(2020, 7, 17, 5, 0, 59, tzinfo=datetime.timezone.utc), 'commenter': 'berquist', 'type': 'User'}, {'comment_id': 456219890, 'comment_body': 'Can you store this outside the conditional as something like `bader_candidate_index` so you can reuse it inside the block?', 'comment_created': datetime.datetime(2020, 7, 17, 5, 3, 45, tzinfo=datetime.timezone.utc), 'commenter': 'berquist', 'type': 'User'}, {'comment_id': 456220197, 'comment_body': 'I think you can replace `gridpt` with `xgrid, ygrid, zgrid` and also have `dtype=int` to avoid a separate conversion.', 'comment_created': datetime.datetime(2020, 7, 17, 5, 5, 5, tzinfo=datetime.timezone.utc), 'commenter': 'berquist', 'type': 'User'}, {'comment_id': 456221145, 'comment_body': ""Is there a way to rewrite this using `Volume.integrate()`? (I can't tell, kinda tired...)"", 'comment_created': datetime.datetime(2020, 7, 17, 5, 9, 40, tzinfo=datetime.timezone.utc), 'commenter': 'berquist', 'type': 'User'}, {'comment_id': 456221661, 'comment_body': ""Looking at it again, I'm surprised this works since `_griddist` isn't an `ndarray`. Can you try making it one and make sure the results don't change?"", 'comment_created': datetime.datetime(2020, 7, 17, 5, 11, 42, tzinfo=datetime.timezone.utc), 'commenter': 'berquist', 'type': 'User'}, {'comment_id': 456223468, 'comment_body': ""Sure! I've added the logs already on a PR that depends on this (907) but it looks like the logger call should be present in this PR as well. Thanks."", 'comment_created': datetime.datetime(2020, 7, 17, 5, 18, 36, tzinfo=datetime.timezone.utc), 'commenter': 'mscho527', 'type': 'User'}, {'comment_id': 456232697, 'comment_body': ""I've just stored it as `directions`. Thanks for the suggestion."", 'comment_created': datetime.datetime(2020, 7, 17, 5, 52, 43, tzinfo=datetime.timezone.utc), 'commenter': 'mscho527', 'type': 'User'}, {'comment_id': 456232770, 'comment_body': ""I've combined them. Thanks!"", 'comment_created': datetime.datetime(2020, 7, 17, 5, 52, 56, tzinfo=datetime.timezone.utc), 'commenter': 'mscho527', 'type': 'User'}, {'comment_id': 456232864, 'comment_body': ""Yes -- I've just stored this and reused in the subsequent blocks. Thanks."", 'comment_created': datetime.datetime(2020, 7, 17, 5, 53, 19, tzinfo=datetime.timezone.utc), 'commenter': 'mscho527', 'type': 'User'}, {'comment_id': 456232976, 'comment_body': ""Yes. I've just replaced it to make it simpler and more readable. Thanks."", 'comment_created': datetime.datetime(2020, 7, 17, 5, 53, 44, tzinfo=datetime.timezone.utc), 'commenter': 'mscho527', 'type': 'User'}, {'comment_id': 456234534, 'comment_body': ""It is definitely possible and I've considered using `Volume.integrate()`. I think to use `Volume.integrate()`, though, n (# of atoms) number of Volume objects would have to be created each with appropriate masks to call on the method. So line 218-220 would still be there and line 221 would only be modified to a constructor for `Volume` object and call to `integrate()` method.\r\n\r\nI think using `integrate()` method here would make it easier to follow any future changes in the method/object at an expense of a few more lines of code. I can make the necessary modifications if this fits better. Thanks!"", 'comment_created': datetime.datetime(2020, 7, 17, 5, 59, 6, tzinfo=datetime.timezone.utc), 'commenter': 'mscho527', 'type': 'User'}, {'comment_id': 456236020, 'comment_body': ""I think this worked because division operator for Python on lists are elementwise divide as well? I've changed this into ndarray for consistency. As a side note, I forced pushed the commit by mistake -- this became some sort of a reflex :0"", 'comment_created': datetime.datetime(2020, 7, 17, 6, 3, 47, tzinfo=datetime.timezone.utc), 'commenter': 'mscho527', 'type': 'User'}, {'comment_id': 456253171, 'comment_body': ""I've changed this part of the code back -- because indices to the array should not be numpy.ndarray, I think replacing gridpt with xgrid, ygrid, zgrid will still require separate line of int() conversion. Let me know if there is a way that is simpler."", 'comment_created': datetime.datetime(2020, 7, 17, 6, 52, 59, tzinfo=datetime.timezone.utc), 'commenter': 'mscho527', 'type': 'User'}, {'comment_id': 456434909, 'comment_body': 'This comment and some blank lines got put back in', 'comment_created': datetime.datetime(2020, 7, 17, 13, 16, 21, tzinfo=datetime.timezone.utc), 'commenter': 'shivupa', 'type': 'User'}, {'comment_id': 456444421, 'comment_body': 'Is this necessary?', 'comment_created': datetime.datetime(2020, 7, 17, 13, 32, 52, tzinfo=datetime.timezone.utc), 'commenter': 'shivupa', 'type': 'User'}, {'comment_id': 456452061, 'comment_body': 'Can we maybe check if the data object has pseudopotentials (I think by checking `coreelectrons`) and issue a warning per the paper. \r\n\r\nThe paper says: ""Some caution is needed when analyzing charge density obtained by calculations based on pseudopotential representation of core electrons. An accurate representation of the density in the core region where the pseudowavefunction differs from the true wavefunction is not needed as long as there are no artificial minima in the charge density. Such minima can form, for example, close to the nucleus when using pseudopotentials for elements with few valence electrons. In some cases this problem can be alleviated by treating sub-valence electrons explicitly and representing fewer electrons with the pseudopotential. Otherwise, the value of the core electron density can be added to the value of the valence electron density at the grid points.""\r\n\r\nMaybe something along the lines of ""Analyzing a charge density from a calculation that used pseudopotentials. This can lead to unexpected results see doi....""', 'comment_created': datetime.datetime(2020, 7, 17, 13, 45, 32, tzinfo=datetime.timezone.utc), 'commenter': 'shivupa', 'type': 'User'}, {'comment_id': 456971694, 'comment_body': 'Yes, try it and see what it looks like.', 'comment_created': datetime.datetime(2020, 7, 19, 23, 53, 6, tzinfo=datetime.timezone.utc), 'commenter': 'berquist', 'type': 'User'}, {'comment_id': 457003482, 'comment_body': ""For some reason I can't figure out how to do this cleanly, so it's fine as it currently is."", 'comment_created': datetime.datetime(2020, 7, 20, 2, 59, 19, tzinfo=datetime.timezone.utc), 'commenter': 'berquist', 'type': 'User'}, {'comment_id': 457198568, 'comment_body': ""I've modified this part of the code to use `integrate()` method. Let me know if this is good to go!"", 'comment_created': datetime.datetime(2020, 7, 20, 9, 2, 29, tzinfo=datetime.timezone.utc), 'commenter': 'mscho527', 'type': 'User'}, {'comment_id': 457444552, 'comment_body': 'nit: please end sentences with periods.', 'comment_created': datetime.datetime(2020, 7, 20, 14, 35, 22, tzinfo=datetime.timezone.utc), 'commenter': 'langner', 'type': 'User'}, {'comment_id': 457445069, 'comment_body': 'Same here.', 'comment_created': datetime.datetime(2020, 7, 20, 14, 35, 50, tzinfo=datetime.timezone.utc), 'commenter': 'langner', 'type': 'User'}, {'comment_id': 457446965, 'comment_body': 'Why not just use {x,y,z}index right away?', 'comment_created': datetime.datetime(2020, 7, 20, 14, 37, 48, tzinfo=datetime.timezone.utc), 'commenter': 'langner', 'type': 'User'}, {'comment_id': 457448305, 'comment_body': ""Could you take advantage of this variable's name to convey information about the condition of the loop? (choose a better name)"", 'comment_created': datetime.datetime(2020, 7, 20, 14, 39, 14, tzinfo=datetime.timezone.utc), 'commenter': 'langner', 'type': 'User'}, {'comment_id': 457454561, 'comment_body': 'Like we discussed, consider decreasing the indentation. One way to achieve this is helper functions. Another is to use a generator for the triple loop. Likely other good ideas as well, and anything that decreases the indent will help readability.', 'comment_created': datetime.datetime(2020, 7, 20, 14, 46, 14, tzinfo=datetime.timezone.utc), 'commenter': 'langner', 'type': 'User'}, {'comment_id': 457922365, 'comment_body': ""I've fixed this. Thanks!"", 'comment_created': datetime.datetime(2020, 7, 21, 8, 21, 51, tzinfo=datetime.timezone.utc), 'commenter': 'mscho527', 'type': 'User'}, {'comment_id': 457923362, 'comment_body': ""Yes -- I've removed this. Thanks!"", 'comment_created': datetime.datetime(2020, 7, 21, 8, 23, 24, tzinfo=datetime.timezone.utc), 'commenter': 'mscho527', 'type': 'User'}, {'comment_id': 457924542, 'comment_body': ""I'm actually not sure about this. I've noticed that this line is included in every test script in `method` so I assumed that this is needed for Travis. Can someone let me know what the intended function of these were? "", 'comment_created': datetime.datetime(2020, 7, 21, 8, 25, 10, tzinfo=datetime.timezone.utc), 'commenter': 'mscho527', 'type': 'User'}, {'comment_id': 457924915, 'comment_body': ""I've added a log that checks the contents of `coreelectrons` and lets the user know about this information through the log. Thanks!"", 'comment_created': datetime.datetime(2020, 7, 21, 8, 25, 48, tzinfo=datetime.timezone.utc), 'commenter': 'mscho527', 'type': 'User'}, {'comment_id': 457925016, 'comment_body': ""I've changed this. Thanks!"", 'comment_created': datetime.datetime(2020, 7, 21, 8, 25, 59, tzinfo=datetime.timezone.utc), 'commenter': 'mscho527', 'type': 'User'}, {'comment_id': 457925095, 'comment_body': ""I've changed this. Thanks!\r\n\r\n"", 'comment_created': datetime.datetime(2020, 7, 21, 8, 26, 7, tzinfo=datetime.timezone.utc), 'commenter': 'mscho527', 'type': 'User'}, {'comment_id': 457925368, 'comment_body': ""I've cleaned this up while reformatting the triple loop. Thanks!"", 'comment_created': datetime.datetime(2020, 7, 21, 8, 26, 34, tzinfo=datetime.timezone.utc), 'commenter': 'mscho527', 'type': 'User'}, {'comment_id': 457926116, 'comment_body': ""I've changed this variable to `local_max_reached`, since the loop exits when the local maximum is reached. Let me know if this should be improved further."", 'comment_created': datetime.datetime(2020, 7, 21, 8, 27, 48, tzinfo=datetime.timezone.utc), 'commenter': 'mscho527', 'type': 'User'}, {'comment_id': 457926996, 'comment_body': ""I've used a generator for the triple loop to reduce the indent by two. Thanks!"", 'comment_created': datetime.datetime(2020, 7, 21, 8, 29, 21, tzinfo=datetime.timezone.utc), 'commenter': 'mscho527', 'type': 'User'}, {'comment_id': 458136261, 'comment_body': ""See 3026637b51b205ae9fcc32188d226c9d3da3a1c6.\r\n\r\nThe reason we manipulate `sys.path` at all (I think) is because the main `test` directory isn't in `PYTHONPATH`, and we need the relative `test_data` import to work.\r\n\r\nWe might be able to rip all of these out in the future, since now we're using `pytest` and not `unittest`, and I'd like to move the tests under the main `cclib` directory."", 'comment_created': datetime.datetime(2020, 7, 21, 14, 22, 41, tzinfo=datetime.timezone.utc), 'commenter': 'berquist', 'type': 'User'}, {'comment_id': 458151147, 'comment_body': ""Sounds about right. Sometimes it's hard to tell which legacy maintenance/test code can be removed. It's also somewhat unrewarding to work on it :)"", 'comment_created': datetime.datetime(2020, 7, 21, 14, 41, 41, tzinfo=datetime.timezone.utc), 'commenter': 'langner', 'type': 'User'}, {'comment_id': 458151838, 'comment_body': ""One follow up question here that shouldn't stop the merge: why didn't this break any test?"", 'comment_created': datetime.datetime(2020, 7, 21, 14, 42, 28, tzinfo=datetime.timezone.utc), 'commenter': 'langner', 'type': 'User'}, {'comment_id': 458177408, 'comment_body': ""@langner This didn't break any test because this function isn't (yet) used in the method. It is meant for use when support for non-uniform grids are added. For now, hard coded values (`_griddist`) is used instead."", 'comment_created': datetime.datetime(2020, 7, 21, 15, 15, 55, tzinfo=datetime.timezone.utc), 'commenter': 'mscho527', 'type': 'User'}, {'comment_id': 458178635, 'comment_body': ""I've removed this line. I'll add an issue for other test functions. Thanks!"", 'comment_created': datetime.datetime(2020, 7, 21, 15, 17, 32, tzinfo=datetime.timezone.utc), 'commenter': 'mscho527', 'type': 'User'}]","[{'commit_sha': 'e516fbf10187532b7a1bca1eadf0e5a976aae72e', 'committer_username': 'mscho527', 'committer_name': 'Minsik', 'committer_email': None, 'commit_date': datetime.datetime(2014, 3, 12, 12, 13, 11, tzinfo=datetime.timezone.utc)}]",Minsik,6929314,,User,,11,,5,13
450157239,Add the ability to use precalculated charge densities in Bader method,"_Related Issue: #886 
Depends on: #900_ 

This PR adds the ability to prepare `Volume` objects from pre-calculated `.cube` files and allows this pre-calculated charge densities to be used to initiate Bader charges calculations. A test that does a round-trip conversion from `Volume` to cube file to `Volume` are included to verify the functionalities.

",True,907,https://api.github.com/repos/cclib/cclib/pulls/907,https://github.com/cclib/cclib/pull/907,closed,117,30,4,1,1,6,2,0,"[{'name': 'feature'}, {'name': 'methods'}]",2020-07-16 12:29:00+00:00,2020-07-24 14:32:50+00:00,698630.0,"8 days, 2:03:50","[{'comment_id': 457443280, 'comment_body': 'Can you run Black on this?', 'comment_created': datetime.datetime(2020, 7, 20, 14, 34, 1, tzinfo=datetime.timezone.utc), 'commenter': 'berquist', 'type': 'User'}, {'comment_id': 458031474, 'comment_body': 'Yes -- I have just run black for this code. Thanks.', 'comment_created': datetime.datetime(2020, 7, 21, 11, 39, 17, tzinfo=datetime.timezone.utc), 'commenter': 'mscho527', 'type': 'User'}, {'comment_id': 459179045, 'comment_body': ""Do you think there's a better way to check this?"", 'comment_created': datetime.datetime(2020, 7, 23, 2, 4, 47, tzinfo=datetime.timezone.utc), 'commenter': 'berquist', 'type': 'User'}, {'comment_id': 459857648, 'comment_body': 'Yes -- `numpy.any` should do the job. Thanks for pointing this out!', 'comment_created': datetime.datetime(2020, 7, 24, 5, 26, 7, tzinfo=datetime.timezone.utc), 'commenter': 'mscho527', 'type': 'User'}, {'comment_id': 460067300, 'comment_body': ""`covertor(x, 'bohr', 'Angstrom')` isn't much longer and is more explicit when used. could this function be removed and just use the full call below"", 'comment_created': datetime.datetime(2020, 7, 24, 13, 55, 11, tzinfo=datetime.timezone.utc), 'commenter': 'shivupa', 'type': 'User'}, {'comment_id': 460071264, 'comment_body': ""I've modified this into a full call. Thanks!"", 'comment_created': datetime.datetime(2020, 7, 24, 14, 1, 39, tzinfo=datetime.timezone.utc), 'commenter': 'mscho527', 'type': 'User'}]","[{'commit_sha': '25e5066beb986ea09f36d95040b89154ea3bf712', 'committer_username': 'mscho527', 'committer_name': 'Minsik', 'committer_email': None, 'commit_date': datetime.datetime(2014, 3, 12, 12, 13, 11, tzinfo=datetime.timezone.utc)}]",Minsik,6929314,,User,,11,,5,13
449319899,Add a few more tests for Bader's QTAIM method,"_Related Issue: #886 
Depends on: #900_ 

This PR adds a few more tests for Bader's QTAIM method. The aim is to add more checks into the code integrity without causing the test suite to take too long to complete by using the pre-calculated cube file.

Added tests compare
* Sum of charges assigned to HF vs. Total number of electrons in HF
* Charges assigned to carbon atoms in benzene",True,902,https://api.github.com/repos/cclib/cclib/pulls/902,https://github.com/cclib/cclib/pull/902,closed,368141,7,6,1,0,12,1,0,[{'name': 'tests'}],2020-07-15 08:11:10+00:00,2020-07-30 14:32:46+00:00,1318896.0,"15 days, 6:21:36","[{'comment_id': 460550579, 'comment_body': 'Prefer `os.path.join` rather than hard-coding the separator `/` (If this happened in other PRs, I missed it.)', 'comment_created': datetime.datetime(2020, 7, 26, 17, 5, 29, tzinfo=datetime.timezone.utc), 'commenter': 'berquist', 'type': 'User'}, {'comment_id': 460551148, 'comment_body': ""I don't think any of the new variables created in both of these methods need to be part of `self`, since they're only used in their respective methods."", 'comment_created': datetime.datetime(2020, 7, 26, 17, 11, 26, tzinfo=datetime.timezone.utc), 'commenter': 'berquist', 'type': 'User'}, {'comment_id': 460644662, 'comment_body': ""Thanks for letting me know of this. I've just change this to use `os.path.join`."", 'comment_created': datetime.datetime(2020, 7, 27, 4, 48, 27, tzinfo=datetime.timezone.utc), 'commenter': 'mscho527', 'type': 'User'}, {'comment_id': 460644738, 'comment_body': ""Yes, I agree. I've changed the variables not to be part of self."", 'comment_created': datetime.datetime(2020, 7, 27, 4, 48, 57, tzinfo=datetime.timezone.utc), 'commenter': 'mscho527', 'type': 'User'}, {'comment_id': 461567941, 'comment_body': 'The value for each component of `vol.origin` is -5.05001036. Can you make both the reference value and the `atol` stricter?', 'comment_created': datetime.datetime(2020, 7, 28, 13, 12, 49, tzinfo=datetime.timezone.utc), 'commenter': 'berquist', 'type': 'User'}, {'comment_id': 461575747, 'comment_body': 'Looking at the resulting charges\r\n```\r\narray([4.36361172, 4.83148531, 4.66353415, 4.36361172, 4.8317697 ,\r\n       4.66353415, 0.67225235, 0.51518601, 0.82588478, 0.67225235,\r\n       0.51518601, 0.82588478])\r\n```\r\ndo you know why there is such a large discrepancy?', 'comment_created': datetime.datetime(2020, 7, 28, 13, 23, 59, tzinfo=datetime.timezone.utc), 'commenter': 'berquist', 'type': 'User'}, {'comment_id': 461577747, 'comment_body': ""Sure -- I'll change this right away."", 'comment_created': datetime.datetime(2020, 7, 28, 13, 26, 50, tzinfo=datetime.timezone.utc), 'commenter': 'mscho527', 'type': 'User'}, {'comment_id': 461579616, 'comment_body': 'My understanding is that the discrepancy is due to the shape of the grid (which is a cube). Now that you commented this, I guess I could check whether adjusting the grid improves the discrepancy?', 'comment_created': datetime.datetime(2020, 7, 28, 13, 29, 27, tzinfo=datetime.timezone.utc), 'commenter': 'mscho527', 'type': 'User'}, {'comment_id': 461642274, 'comment_body': ""I think just checking it by hand and leaving a code comment about the grid coarseness is enough (if that's the reason), since we don't want to introduce a finer grid in the tests themselves due to time constraints."", 'comment_created': datetime.datetime(2020, 7, 28, 14, 48, 46, tzinfo=datetime.timezone.utc), 'commenter': 'berquist', 'type': 'User'}, {'comment_id': 462248515, 'comment_body': ""I've just added a comment about this. Thanks!"", 'comment_created': datetime.datetime(2020, 7, 29, 12, 7, 36, tzinfo=datetime.timezone.utc), 'commenter': 'mscho527', 'type': 'User'}, {'comment_id': 462329903, 'comment_body': ""Can you word it so that it's clear `bader` is referring to the original reference program?"", 'comment_created': datetime.datetime(2020, 7, 29, 14, 11, 52, tzinfo=datetime.timezone.utc), 'commenter': 'berquist', 'type': 'User'}, {'comment_id': 462337288, 'comment_body': ""Sure -- I've just made the necessary changes. Thanks."", 'comment_created': datetime.datetime(2020, 7, 29, 14, 21, 17, tzinfo=datetime.timezone.utc), 'commenter': 'mscho527', 'type': 'User'}]","[{'commit_sha': 'c3c3ea887e5333b57dfd8bdd614b4266fe203626', 'committer_username': 'mscho527', 'committer_name': 'Minsik', 'committer_email': None, 'commit_date': datetime.datetime(2014, 3, 12, 12, 13, 11, tzinfo=datetime.timezone.utc)}]",Minsik,6929314,,User,,11,,5,13
449444090,Add docs for QTAIM method,"_Related Issue: #886_

This PR adds documentations on how to use Bader's QTAIM method in `cclib`.",True,903,https://api.github.com/repos/cclib/cclib/pulls/903,https://github.com/cclib/cclib/pull/903,closed,55,0,1,1,0,9,1,0,[{'name': 'docs'}],2020-07-15 12:18:06+00:00,2020-07-28 14:33:29+00:00,1131323.0,"13 days, 2:15:23","[{'comment_id': 460078522, 'comment_body': '""The following code....""', 'comment_created': datetime.datetime(2020, 7, 24, 14, 13, 31, tzinfo=datetime.timezone.utc), 'commenter': 'shivupa', 'type': 'User'}, {'comment_id': 460079522, 'comment_body': '""is classified into"" -> ""belongs to""', 'comment_created': datetime.datetime(2020, 7, 24, 14, 15, 8, tzinfo=datetime.timezone.utc), 'commenter': 'shivupa', 'type': 'User'}, {'comment_id': 460080501, 'comment_body': 'is this in the third bader space or actually the third atom?', 'comment_created': datetime.datetime(2020, 7, 24, 14, 16, 35, tzinfo=datetime.timezone.utc), 'commenter': 'shivupa', 'type': 'User'}, {'comment_id': 460081079, 'comment_body': 'To do so, a ``Volume`` object should be prepared by reading in a cube file and should be passed into a Bader object as shown below:', 'comment_created': datetime.datetime(2020, 7, 24, 14, 17, 31, tzinfo=datetime.timezone.utc), 'commenter': 'shivupa', 'type': 'User'}, {'comment_id': 460660681, 'comment_body': ""I've corrected this. Thanks!"", 'comment_created': datetime.datetime(2020, 7, 27, 5, 52, 28, tzinfo=datetime.timezone.utc), 'commenter': 'mscho527', 'type': 'User'}, {'comment_id': 460660732, 'comment_body': ""I've fixed this. Thanks!"", 'comment_created': datetime.datetime(2020, 7, 27, 5, 52, 35, tzinfo=datetime.timezone.utc), 'commenter': 'mscho527', 'type': 'User'}, {'comment_id': 460660970, 'comment_body': ""It's third atom (as in the order of the atoms in ccData object's `atomcoords`.)"", 'comment_created': datetime.datetime(2020, 7, 27, 5, 53, 34, tzinfo=datetime.timezone.utc), 'commenter': 'mscho527', 'type': 'User'}, {'comment_id': 460922641, 'comment_body': 'We might want to say that this would be considerably faster and is recommended for larger systems?', 'comment_created': datetime.datetime(2020, 7, 27, 14, 16, 36, tzinfo=datetime.timezone.utc), 'commenter': 'shivupa', 'type': 'User'}, {'comment_id': 460928609, 'comment_body': ""That's true :) I've updated this line to emphasize this. Thanks!"", 'comment_created': datetime.datetime(2020, 7, 27, 14, 24, 40, tzinfo=datetime.timezone.utc), 'commenter': 'mscho527', 'type': 'User'}]","[{'commit_sha': 'a5bcca055a39392e2f63cd036073f3f0be356d2f', 'committer_username': 'mscho527', 'committer_name': 'Minsik', 'committer_email': None, 'commit_date': datetime.datetime(2014, 3, 12, 12, 13, 11, tzinfo=datetime.timezone.utc)}]",Minsik,6929314,,User,,11,,5,13
457764009,Add a function to read in proatom densities from chargemol's atomic_densities,"_Related Issue: #885_ 

This PR adds a small function that reads in the pro-atomic (radial) densities from files that are formatted in `chargemol` and `horton`. These charges are used as reference charge densities for the first and second step of DDEC algorithm. Some layout of DDEC class has been added here as well.
",True,914,https://api.github.com/repos/cclib/cclib/pulls/914,https://github.com/cclib/cclib/pull/914,closed,265,2,7,1,3,21,1,0,[{'name': 'methods'}],2020-07-28 12:02:38+00:00,2020-08-03 14:33:21+00:00,527443.0,"6 days, 2:30:43","[{'comment_id': 462333100, 'comment_body': 'I know that the `requirements.txt` / `setup.py` / Travis (optional) dependencies are messy right now, but can you remove h5py from here for now?\r\n\r\nAlso, is it automatically installed as a Horton dependency on Travis?', 'comment_created': datetime.datetime(2020, 7, 29, 14, 15, 54, tzinfo=datetime.timezone.utc), 'commenter': 'berquist', 'type': 'User'}, {'comment_id': 462333589, 'comment_body': 'Thanks Psi4. Can you remove this file and add it to `.gitignore`?', 'comment_created': datetime.datetime(2020, 7, 29, 14, 16, 33, tzinfo=datetime.timezone.utc), 'commenter': 'berquist', 'type': 'User'}, {'comment_id': 462335953, 'comment_body': ""Does Horton have an enum or listing of grid types in their code that can be imported? We should also have an `else` that raises an exception when the grid type is something we don't know how to handle."", 'comment_created': datetime.datetime(2020, 7, 29, 14, 19, 43, tzinfo=datetime.timezone.utc), 'commenter': 'berquist', 'type': 'User'}, {'comment_id': 462338128, 'comment_body': 'Oops -- sure! Thanks for letting me know!', 'comment_created': datetime.datetime(2020, 7, 29, 14, 22, 19, tzinfo=datetime.timezone.utc), 'commenter': 'mscho527', 'type': 'User'}, {'comment_id': 462339921, 'comment_body': ""In Python 2.7 machine, `h5py` is installed as a horton dependency. In Python 3.x machines, though, it isn't since horton is not installed there. Should h5py be moved to conda configuration then?"", 'comment_created': datetime.datetime(2020, 7, 29, 14, 24, 43, tzinfo=datetime.timezone.utc), 'commenter': 'mscho527', 'type': 'User'}, {'comment_id': 462340881, 'comment_body': ""There might be a list -- I'll take a look. This part of the code is implemented in cpp so I suppose that a list might reside somewhere in the python binding. I'll add the else / exception soon! Thanks."", 'comment_created': datetime.datetime(2020, 7, 29, 14, 25, 53, tzinfo=datetime.timezone.utc), 'commenter': 'mscho527', 'type': 'User'}, {'comment_id': 462346446, 'comment_body': 'For now, yes.', 'comment_created': datetime.datetime(2020, 7, 29, 14, 32, 50, tzinfo=datetime.timezone.utc), 'commenter': 'berquist', 'type': 'User'}, {'comment_id': 462989992, 'comment_body': ""I've ended up adding a list (of supported grid types) and an assert statement because I wasn't able to find a list anywhere other than the documentation"", 'comment_created': datetime.datetime(2020, 7, 30, 13, 19, 54, tzinfo=datetime.timezone.utc), 'commenter': 'mscho527', 'type': 'User'}, {'comment_id': 463122533, 'comment_body': '`self.parse()` here? Unless you were planning to do this on an even coarser grid since its not used in this test?', 'comment_created': datetime.datetime(2020, 7, 30, 16, 30, 3, tzinfo=datetime.timezone.utc), 'commenter': 'shivupa', 'type': 'User'}, {'comment_id': 463443281, 'comment_body': ""Yes -- thanks for catching this! I've made the necessary changes."", 'comment_created': datetime.datetime(2020, 7, 31, 7, 11, 50, tzinfo=datetime.timezone.utc), 'commenter': 'mscho527', 'type': 'User'}, {'comment_id': 464038854, 'comment_body': 'Could you perhaps add a docstring here describing the initializer arguments?', 'comment_created': datetime.datetime(2020, 8, 2, 6, 34, 38, tzinfo=datetime.timezone.utc), 'commenter': 'langner', 'type': 'User'}, {'comment_id': 464039569, 'comment_body': 'I think this comment applies to lines up to 56 in current numbering. Perhaps add a line before the comment, and eliminate the blank lines in this block, for readability.', 'comment_created': datetime.datetime(2020, 8, 2, 6, 42, 44, tzinfo=datetime.timezone.utc), 'commenter': 'langner', 'type': 'User'}, {'comment_id': 464039821, 'comment_body': 'Are these guaranteed to be floats? If not, can be problematic for Python2.', 'comment_created': datetime.datetime(2020, 8, 2, 6, 45, 25, tzinfo=datetime.timezone.utc), 'commenter': 'langner', 'type': 'User'}, {'comment_id': 464039880, 'comment_body': 'Do you need the temp var?', 'comment_created': datetime.datetime(2020, 8, 2, 6, 46, 10, tzinfo=datetime.timezone.utc), 'commenter': 'langner', 'type': 'User'}, {'comment_id': 464039991, 'comment_body': ""It looks like there's one file in the Horton case. Do we need do read it multiple times?"", 'comment_created': datetime.datetime(2020, 8, 2, 6, 47, 29, tzinfo=datetime.timezone.utc), 'commenter': 'langner', 'type': 'User'}, {'comment_id': 464199728, 'comment_body': ""horton indeed has only one file and it would be more efficient to read in once in `__init__` and store it somewhere for future reference. Can I revisit this point after finishing up rest of the DDEC algorithms though? I am just not sure yet in which form proatomic densities will be needed in later steps. I'll add a `TODO` comment referring to this at the top of this code block. Thanks!"", 'comment_created': datetime.datetime(2020, 8, 3, 5, 22, 45, tzinfo=datetime.timezone.utc), 'commenter': 'mscho527', 'type': 'User'}, {'comment_id': 464199747, 'comment_body': ""No this wouldn't be necessary. I've removed this extraneous variable. Thanks."", 'comment_created': datetime.datetime(2020, 8, 3, 5, 22, 50, tzinfo=datetime.timezone.utc), 'commenter': 'mscho527', 'type': 'User'}, {'comment_id': 464199754, 'comment_body': 'To my knowledge, these would be guaranteed to be floats due to lines 115-116\r\n\r\n```\r\ngridmin = convertor(float(gridmin), ""bohr"", ""Angstrom"")\r\ngridmax = convertor(float(gridmax), ""bohr"", ""Angstrom"")\r\n```\r\n\r\nbut if I missed anything, please let me know.', 'comment_created': datetime.datetime(2020, 8, 3, 5, 22, 51, tzinfo=datetime.timezone.utc), 'commenter': 'mscho527', 'type': 'User'}, {'comment_id': 464199762, 'comment_body': ""I've added a comment & reflowed the code for better readability. Thanks!"", 'comment_created': datetime.datetime(2020, 8, 3, 5, 22, 54, tzinfo=datetime.timezone.utc), 'commenter': 'mscho527', 'type': 'User'}, {'comment_id': 464199771, 'comment_body': ""Sure -- I've added them. Thanks!"", 'comment_created': datetime.datetime(2020, 8, 3, 5, 22, 56, tzinfo=datetime.timezone.utc), 'commenter': 'mscho527', 'type': 'User'}, {'comment_id': 464205130, 'comment_body': 'SG, excllent plan.', 'comment_created': datetime.datetime(2020, 8, 3, 5, 46, 50, tzinfo=datetime.timezone.utc), 'commenter': 'langner', 'type': 'User'}]","[{'commit_sha': '788b8c9823564da12ec7c93bda2a7588adb0421c', 'committer_username': 'mscho527', 'committer_name': 'Minsik', 'committer_email': None, 'commit_date': datetime.datetime(2014, 3, 12, 12, 13, 11, tzinfo=datetime.timezone.utc)}]",Minsik,6929314,,User,,11,,5,13
462534903,Add optional weight argument for integrate method in volume,"From [#915](https://github.com/cclib/cclib/pull/915#discussion_r464784099)
Related: #885 

This PR adds an optional argument of weights applied on each grid point for `integrate` and `integrate_square` method of `Volume` class.
`Bader` class has been modified as well to take advantage of the optional argument.

`DDEC6` class will also be modified accordingly based on this PR.",True,917,https://api.github.com/repos/cclib/cclib/pulls/917,https://github.com/cclib/cclib/pull/917,closed,12,9,2,1,0,0,1,0,[{'name': 'methods'}],2020-08-04 05:20:23+00:00,2020-08-04 13:48:41+00:00,30498.0,8:28:18,[],"[{'commit_sha': 'e4a93a7e5337801186793b20c8c78176f3b3d0fb', 'committer_username': 'mscho527', 'committer_name': 'Minsik', 'committer_email': None, 'commit_date': datetime.datetime(2014, 3, 12, 12, 13, 11, tzinfo=datetime.timezone.utc)}]",Minsik,6929314,,User,,11,,5,13
458944771,Set up the grid and calculate localized charge and stockholder-type charge for DDEC6,"_Related Issue: #885 
Builds upon: #914 and #917_

This PR finishes setting up the integration grid for DDEC6 charges based on what has been read through the function added in PR 914. Also, it calculates stockholder charges and localized charges to evaluate reference charges. This amounts to the 'first' step in the seven-step-long DDEC6 algorithm as described in the original paper.

Test suite compares the results with what was obtained in `chargemol`.",True,915,https://api.github.com/repos/cclib/cclib/pulls/915,https://github.com/cclib/cclib/pull/915,closed,139466,12,4,1,0,8,1,0,[{'name': 'methods'}],2020-07-30 07:53:05+00:00,2020-08-05 00:28:11+00:00,491706.0,"5 days, 16:35:06","[{'comment_id': 464180613, 'comment_body': 'can you add some parentheses to group this a bit.', 'comment_created': datetime.datetime(2020, 8, 3, 3, 50, 9, tzinfo=datetime.timezone.utc), 'commenter': 'shivupa', 'type': 'User'}, {'comment_id': 464217890, 'comment_body': ""I've added some parentheses and a comment here. Thanks!"", 'comment_created': datetime.datetime(2020, 8, 3, 6, 30, 52, tzinfo=datetime.timezone.utc), 'commenter': 'mscho527', 'type': 'User'}, {'comment_id': 464784099, 'comment_body': ""` self._localizedcharges[atomi] = self.data.atomnos[atomi] - (self.chgdensity.integrate()*localized_weight)` should do what you want and remove the deepcopy. In a `Volume`object, the sum of the grid data is multiplied by the spacings in x,y,z. Pulling the weighting out of the sum is fine so we can do the above. This prevents the need for a new function.\r\n\r\nYou may have already checked this out, but in case you didn't!"", 'comment_created': datetime.datetime(2020, 8, 4, 3, 56, 46, tzinfo=datetime.timezone.utc), 'commenter': 'shivupa', 'type': 'User'}, {'comment_id': 464790284, 'comment_body': 'I could be mistaken, but since `localized_weight` is three-dimensional (on x, y, z) and `self.chgdensity.integrate()` returns a float, the dimensions would not match? Let me know if I misunderstood your comment. Thanks!', 'comment_created': datetime.datetime(2020, 8, 4, 4, 21, 21, tzinfo=datetime.timezone.utc), 'commenter': 'mscho527', 'type': 'User'}, {'comment_id': 464791092, 'comment_body': ""Oh you are right. I wasn't thinking about the shape of localized_weight. I wanted to see if there was a way around adding the function to volume, but it is necessary."", 'comment_created': datetime.datetime(2020, 8, 4, 4, 24, 50, tzinfo=datetime.timezone.utc), 'commenter': 'shivupa', 'type': 'User'}, {'comment_id': 464827949, 'comment_body': ""#917 should take care of this issue. I'll modify this PR soon based on 917."", 'comment_created': datetime.datetime(2020, 8, 4, 6, 30, 15, tzinfo=datetime.timezone.utc), 'commenter': 'mscho527', 'type': 'User'}, {'comment_id': 465071468, 'comment_body': 'Docstring?', 'comment_created': datetime.datetime(2020, 8, 4, 14, 0, 11, tzinfo=datetime.timezone.utc), 'commenter': 'berquist', 'type': 'User'}, {'comment_id': 465083653, 'comment_body': ""I've added a short docstring here. Thanks!"", 'comment_created': datetime.datetime(2020, 8, 4, 14, 16, 38, tzinfo=datetime.timezone.utc), 'commenter': 'mscho527', 'type': 'User'}]","[{'commit_sha': '84a5da0132f48a2f04d1960ad8a8070cf9ed96db', 'committer_username': 'mscho527', 'committer_name': 'Minsik', 'committer_email': None, 'commit_date': datetime.datetime(2014, 3, 12, 12, 13, 11, tzinfo=datetime.timezone.utc)}]",Minsik,6929314,,User,,11,,5,13
461994089,Calculate step 2 reference ion charge value of DDEC6,"_Related Issue: #885 
Depends upon: #915_ 

This PR adds a functionality to interpolate proatomic densities for non-integer charge values. Also, it evaluates step 2 reference charges of DDEC6 algorithm.
",True,916,https://api.github.com/repos/cclib/cclib/pulls/916,https://github.com/cclib/cclib/pull/916,closed,143,68,2,1,2,17,1,0,[{'name': 'methods'}],2020-08-03 07:15:09+00:00,2020-08-10 14:31:00+00:00,630951.0,"7 days, 7:15:51","[{'comment_id': 466425196, 'comment_body': ""Without my understanding of where this comes from, isn't it more likely to be something like\r\n```python\r\nif atom_num >= charge_ceil:\r\n    density_ceil = numpy.array([charge_ceil])\r\n```\r\n?"", 'comment_created': datetime.datetime(2020, 8, 6, 13, 48, 15, tzinfo=datetime.timezone.utc), 'commenter': 'berquist', 'type': 'User'}, {'comment_id': 466425752, 'comment_body': 'Can you explain where this comes from?', 'comment_created': datetime.datetime(2020, 8, 6, 13, 49, 3, tzinfo=datetime.timezone.utc), 'commenter': 'berquist', 'type': 'User'}, {'comment_id': 466427955, 'comment_body': 'I would put a code comment above each line referencing the exact equation number from the paper.', 'comment_created': datetime.datetime(2020, 8, 6, 13, 52, 6, tzinfo=datetime.timezone.utc), 'commenter': 'berquist', 'type': 'User'}, {'comment_id': 466432058, 'comment_body': 'From step 1 of the algorithm, non-integer reference charges will be assigned to each atom. So in step 2 of the algorithm, the proatom densities have to be linearly interpolated between the densities of the ion/atom with floor(charge) and ceiling(charge). Let me know if I missed anything. Thanks.', 'comment_created': datetime.datetime(2020, 8, 6, 13, 57, 42, tzinfo=datetime.timezone.utc), 'commenter': 'mscho527', 'type': 'User'}, {'comment_id': 466433156, 'comment_body': 'Yes. Thanks for catching this!', 'comment_created': datetime.datetime(2020, 8, 6, 13, 59, 10, tzinfo=datetime.timezone.utc), 'commenter': 'mscho527', 'type': 'User'}, {'comment_id': 466872562, 'comment_body': ""I've added the equation numbers above the appropriate lines. Thanks."", 'comment_created': datetime.datetime(2020, 8, 7, 7, 33, 56, tzinfo=datetime.timezone.utc), 'commenter': 'mscho527', 'type': 'User'}, {'comment_id': 467079039, 'comment_body': 'Can you add this as a code comment right above?', 'comment_created': datetime.datetime(2020, 8, 7, 14, 32, 52, tzinfo=datetime.timezone.utc), 'commenter': 'berquist', 'type': 'User'}, {'comment_id': 467090557, 'comment_body': 'Were you going to add Horton values as well? And comment on where you think the chargemol discrepancy comes from?', 'comment_created': datetime.datetime(2020, 8, 7, 14, 51, 43, tzinfo=datetime.timezone.utc), 'commenter': 'langner', 'type': 'User'}, {'comment_id': 467335374, 'comment_body': ""I was thinking of adding `horton` values after full implementation when I add other simple molecules into the test suite. It looks like I've added the comments about the discrepancy only on the Step 3 PR. I've included them here as well. Thanks!"", 'comment_created': datetime.datetime(2020, 8, 8, 0, 17, 51, tzinfo=datetime.timezone.utc), 'commenter': 'mscho527', 'type': 'User'}, {'comment_id': 467335906, 'comment_body': ""Yes -- I've just added it as a comment. Thanks!"", 'comment_created': datetime.datetime(2020, 8, 8, 0, 21, 19, tzinfo=datetime.timezone.utc), 'commenter': 'mscho527', 'type': 'User'}, {'comment_id': 467681969, 'comment_body': 'It took me a second to realize that their `Stock/Loc` superscript means Stockholder or localized (`{Stock,Loc}`), not one divided by the other...', 'comment_created': datetime.datetime(2020, 8, 10, 4, 23, 57, tzinfo=datetime.timezone.utc), 'commenter': 'berquist', 'type': 'User'}, {'comment_id': 467684430, 'comment_body': ""Coverage says this block isn't being tested. I still don't think it's right, but don't know what it should be."", 'comment_created': datetime.datetime(2020, 8, 10, 4, 37, 56, tzinfo=datetime.timezone.utc), 'commenter': 'berquist', 'type': 'User'}, {'comment_id': 467686088, 'comment_body': ""This block wouldn't be tested in the test suite because `chargemol` densities cannot be included in the code as discussed in   #914. That could be why the block is being tested?"", 'comment_created': datetime.datetime(2020, 8, 10, 4, 47, 5, tzinfo=datetime.timezone.utc), 'commenter': 'mscho527', 'type': 'User'}, {'comment_id': 467686376, 'comment_body': 'Yes -- the notations in the paper puzzled me for a while too!', 'comment_created': datetime.datetime(2020, 8, 10, 4, 48, 51, tzinfo=datetime.timezone.utc), 'commenter': 'mscho527', 'type': 'User'}, {'comment_id': 467877295, 'comment_body': 'Discussed offline but this also eq 50', 'comment_created': datetime.datetime(2020, 8, 10, 12, 45, 1, tzinfo=datetime.timezone.utc), 'commenter': 'shivupa', 'type': 'User'}, {'comment_id': 467878053, 'comment_body': 'Just added this into the comment. Thanks!', 'comment_created': datetime.datetime(2020, 8, 10, 12, 46, 28, tzinfo=datetime.timezone.utc), 'commenter': 'mscho527', 'type': 'User'}, {'comment_id': 467887444, 'comment_body': ""Yes, that's why. Just pointing out that this is dead code (for now at least)."", 'comment_created': datetime.datetime(2020, 8, 10, 13, 3, 52, tzinfo=datetime.timezone.utc), 'commenter': 'berquist', 'type': 'User'}]","[{'commit_sha': '61bc5cdf51c8251fc2acb4303b0733221af57c7a', 'committer_username': 'mscho527', 'committer_name': 'Minsik', 'committer_email': None, 'commit_date': datetime.datetime(2014, 3, 12, 12, 13, 11, tzinfo=datetime.timezone.utc)}]",Minsik,6929314,,User,,11,,5,13
462747512,Add a function that conditions reference density in DDEC6,"_Related Issue: #885
Depends upon: #916_

This PR adds a functionality to apply conditioning for the proatomic densities and thus implements the third step of DDEC6 algorithm. Tests ensure that the integrated charges of conditioned densities match expected values and that tau values (equation 66) match values reported by `chargemol`.

",True,919,https://api.github.com/repos/cclib/cclib/pulls/919,https://github.com/cclib/cclib/pull/919,closed,417,22,3,1,0,28,1,0,[{'name': 'methods'}],2020-08-04 12:52:48+00:00,2020-08-12 13:52:11+00:00,694763.0,"8 days, 0:59:23","[{'comment_id': 465077860, 'comment_body': 'can we assert that weights is the right size', 'comment_created': datetime.datetime(2020, 8, 4, 14, 8, 57, tzinfo=datetime.timezone.utc), 'commenter': 'shivupa', 'type': 'User'}, {'comment_id': 465085534, 'comment_body': ""Yes -- I'll add it in. Thanks!"", 'comment_created': datetime.datetime(2020, 8, 4, 14, 19, tzinfo=datetime.timezone.utc), 'commenter': 'mscho527', 'type': 'User'}, {'comment_id': 468610655, 'comment_body': 'Docstring?', 'comment_created': datetime.datetime(2020, 8, 11, 14, 12, tzinfo=datetime.timezone.utc), 'commenter': 'berquist', 'type': 'User'}, {'comment_id': 468610822, 'comment_body': 'Can you do a += here?', 'comment_created': datetime.datetime(2020, 8, 11, 14, 12, 14, tzinfo=datetime.timezone.utc), 'commenter': 'berquist', 'type': 'User'}, {'comment_id': 468611987, 'comment_body': 'All the symbols in the SI are actually big and little phi (excluding rho).', 'comment_created': datetime.datetime(2020, 8, 11, 14, 13, 44, tzinfo=datetime.timezone.utc), 'commenter': 'berquist', 'type': 'User'}, {'comment_id': 468613468, 'comment_body': '+= here', 'comment_created': datetime.datetime(2020, 8, 11, 14, 14, 51, tzinfo=datetime.timezone.utc), 'commenter': 'berquist', 'type': 'User'}, {'comment_id': 468616272, 'comment_body': '*= here', 'comment_created': datetime.datetime(2020, 8, 11, 14, 16, 59, tzinfo=datetime.timezone.utc), 'commenter': 'berquist', 'type': 'User'}, {'comment_id': 468617475, 'comment_body': 'Can you explain why you need to reverse, accumulate, then reverse again?', 'comment_created': datetime.datetime(2020, 8, 11, 14, 17, 59, tzinfo=datetime.timezone.utc), 'commenter': 'berquist', 'type': 'User'}, {'comment_id': 468617993, 'comment_body': 'Unused variable?', 'comment_created': datetime.datetime(2020, 8, 11, 14, 18, 31, tzinfo=datetime.timezone.utc), 'commenter': 'berquist', 'type': 'User'}, {'comment_id': 468621636, 'comment_body': 'Docstring for where this comes from (second box in S1?)', 'comment_created': datetime.datetime(2020, 8, 11, 14, 23, 30, tzinfo=datetime.timezone.utc), 'commenter': 'berquist', 'type': 'User'}, {'comment_id': 468621999, 'comment_body': 'Sorry to nitpick but as I was going through and checking the equations I realized these are phi not psi. Can we change that to stay consistent with the paper?', 'comment_created': datetime.datetime(2020, 8, 11, 14, 23, 59, tzinfo=datetime.timezone.utc), 'commenter': 'shivupa', 'type': 'User'}, {'comment_id': 468622471, 'comment_body': '(This applies throughout this function)', 'comment_created': datetime.datetime(2020, 8, 11, 14, 24, 37, tzinfo=datetime.timezone.utc), 'commenter': 'shivupa', 'type': 'User'}, {'comment_id': 468622910, 'comment_body': ""Oh, it's S100, better to say that."", 'comment_created': datetime.datetime(2020, 8, 11, 14, 25, 8, tzinfo=datetime.timezone.utc), 'commenter': 'berquist', 'type': 'User'}, {'comment_id': 468624453, 'comment_body': 'Can you use `numpy.NINF`?', 'comment_created': datetime.datetime(2020, 8, 11, 14, 27, 16, tzinfo=datetime.timezone.utc), 'commenter': 'berquist', 'type': 'User'}, {'comment_id': 468624467, 'comment_body': 'can we use something like np.inf here and above', 'comment_created': datetime.datetime(2020, 8, 11, 14, 27, 17, tzinfo=datetime.timezone.utc), 'commenter': 'shivupa', 'type': 'User'}, {'comment_id': 468624586, 'comment_body': 'This would be `numpy.PINF`.', 'comment_created': datetime.datetime(2020, 8, 11, 14, 27, 27, tzinfo=datetime.timezone.utc), 'commenter': 'berquist', 'type': 'User'}, {'comment_id': 469031342, 'comment_body': ""I've changed the variables into phi. Thanks for noting this!"", 'comment_created': datetime.datetime(2020, 8, 12, 6, 25, 9, tzinfo=datetime.timezone.utc), 'commenter': 'mscho527', 'type': 'User'}, {'comment_id': 469031567, 'comment_body': ""I've used np.PINF and np.NINF which were suggested by Eric in a comment below this. Thanks!"", 'comment_created': datetime.datetime(2020, 8, 12, 6, 25, 43, tzinfo=datetime.timezone.utc), 'commenter': 'mscho527', 'type': 'User'}, {'comment_id': 469031708, 'comment_body': ""Looks like I've added the docstring only to the later (dependent) PRs of this. If added here as well. Thanks!"", 'comment_created': datetime.datetime(2020, 8, 12, 6, 26, 11, tzinfo=datetime.timezone.utc), 'commenter': 'mscho527', 'type': 'User'}, {'comment_id': 469031835, 'comment_body': ""Yes! I've tried to change any other similar cases as well. Thanks!"", 'comment_created': datetime.datetime(2020, 8, 12, 6, 26, 31, tzinfo=datetime.timezone.utc), 'commenter': 'mscho527', 'type': 'User'}, {'comment_id': 469031879, 'comment_body': ""Yes! I've tried to change any other similar cases as well. Thanks!"", 'comment_created': datetime.datetime(2020, 8, 12, 6, 26, 38, tzinfo=datetime.timezone.utc), 'commenter': 'mscho527', 'type': 'User'}, {'comment_id': 469031932, 'comment_body': ""Yes! I've tried to change any other similar cases as well. Thanks!"", 'comment_created': datetime.datetime(2020, 8, 12, 6, 26, 45, tzinfo=datetime.timezone.utc), 'commenter': 'mscho527', 'type': 'User'}, {'comment_id': 469031998, 'comment_body': ""I've changed this. Thanks!"", 'comment_created': datetime.datetime(2020, 8, 12, 6, 26, 55, tzinfo=datetime.timezone.utc), 'commenter': 'mscho527', 'type': 'User'}, {'comment_id': 469032131, 'comment_body': 'I must have forgot to remove this. Thanks!', 'comment_created': datetime.datetime(2020, 8, 12, 6, 27, 17, tzinfo=datetime.timezone.utc), 'commenter': 'mscho527', 'type': 'User'}, {'comment_id': 469035836, 'comment_body': ""This was in the `module_reshaping_functions.f08:77-79`. I've added a comment about this. Thanks."", 'comment_created': datetime.datetime(2020, 8, 12, 6, 36, 40, tzinfo=datetime.timezone.utc), 'commenter': 'mscho527', 'type': 'User'}, {'comment_id': 469035926, 'comment_body': ""I've added this. Thanks!"", 'comment_created': datetime.datetime(2020, 8, 12, 6, 36, 53, tzinfo=datetime.timezone.utc), 'commenter': 'mscho527', 'type': 'User'}, {'comment_id': 469035998, 'comment_body': 'Sure. This looks much neater! Thanks.', 'comment_created': datetime.datetime(2020, 8, 12, 6, 37, 7, tzinfo=datetime.timezone.utc), 'commenter': 'mscho527', 'type': 'User'}, {'comment_id': 469036034, 'comment_body': 'Sure. This looks much neater! Thanks.\r\n\r\n', 'comment_created': datetime.datetime(2020, 8, 12, 6, 37, 12, tzinfo=datetime.timezone.utc), 'commenter': 'mscho527', 'type': 'User'}]","[{'commit_sha': '8e847438b1c7beb992b59afb0486f8dc3d5acc53', 'committer_username': 'mscho527', 'committer_name': 'Minsik', 'committer_email': None, 'commit_date': datetime.datetime(2014, 3, 12, 12, 13, 11, tzinfo=datetime.timezone.utc)}]",Minsik,6929314,,User,,11,,5,13
465428486,Calculate weights assigned to each grid point in DDEC6,"_Related Issue: #885
Depends upon: #919_

This PR implements parts 1-4 of the fourth through seventh steps of DDEC6 algorithm. It uses the conditioned proatom densities and weighed average densities to perform stockholder type partition. Later PR will involve calculating quantities that update the densities based on this stockholder partition.
",True,920,https://api.github.com/repos/cclib/cclib/pulls/920,https://github.com/cclib/cclib/pull/920,closed,139,19,2,1,0,8,1,0,[{'name': 'methods'}],2020-08-10 10:59:56+00:00,2020-08-13 14:31:58+00:00,271922.0,"3 days, 3:32:02","[{'comment_id': 469684187, 'comment_body': ""`atoms` doesn't indicate that this is a count, prefer\r\n```suggestion\r\n        natoms = len(self.data.atomnos)\r\n```"", 'comment_created': datetime.datetime(2020, 8, 13, 4, 6, 30, tzinfo=datetime.timezone.utc), 'commenter': 'berquist', 'type': 'User'}, {'comment_id': 469685812, 'comment_body': 'I think this method should be private.', 'comment_created': datetime.datetime(2020, 8, 13, 4, 12, 47, tzinfo=datetime.timezone.utc), 'commenter': 'berquist', 'type': 'User'}, {'comment_id': 469688994, 'comment_body': ""(4) doesn't look like the right reference."", 'comment_created': datetime.datetime(2020, 8, 13, 4, 25, 49, tzinfo=datetime.timezone.utc), 'commenter': 'berquist', 'type': 'User'}, {'comment_id': 469737505, 'comment_body': ""Yes. I've made the necessary changes. Thanks!"", 'comment_created': datetime.datetime(2020, 8, 13, 6, 59, 56, tzinfo=datetime.timezone.utc), 'commenter': 'mscho527', 'type': 'User'}, {'comment_id': 469737570, 'comment_body': ""I've made this private. Thanks!"", 'comment_created': datetime.datetime(2020, 8, 13, 7, 0, 4, tzinfo=datetime.timezone.utc), 'commenter': 'mscho527', 'type': 'User'}, {'comment_id': 469737690, 'comment_body': ""I've updated this to a correct reference. Thanks!"", 'comment_created': datetime.datetime(2020, 8, 13, 7, 0, 17, tzinfo=datetime.timezone.utc), 'commenter': 'mscho527', 'type': 'User'}, {'comment_id': 469978330, 'comment_body': 'if you change the if statement below to `if update_kappa and steps < 7:` then it will just exit the loop if steps == 7', 'comment_created': datetime.datetime(2020, 8, 13, 14, 7, 56, tzinfo=datetime.timezone.utc), 'commenter': 'shivupa', 'type': 'User'}, {'comment_id': 469992471, 'comment_body': 'I was trying to wait until the full implementation of steps 4-7 (with PR921) before I add the exit conditions here. The exit condition is present in PR921 now. Thanks!', 'comment_created': datetime.datetime(2020, 8, 13, 14, 26, 21, tzinfo=datetime.timezone.utc), 'commenter': 'mscho527', 'type': 'User'}]","[{'commit_sha': 'c333374fd7a8d4c8e126c6b61a4e9336f026f389', 'committer_username': 'mscho527', 'committer_name': 'Minsik', 'committer_email': None, 'commit_date': datetime.datetime(2014, 3, 12, 12, 13, 11, tzinfo=datetime.timezone.utc)}]",Minsik,6929314,,User,,11,,5,13
466120171,Add function that evaluates G_A(r_A) and H_A(r_A) for DDEC6,"_Related Issue: #885
Depends upon: #920_

This PR implements parts 5-7 of the fourth through seventh steps of DDEC6 algorithm. It evaluates G_A and H_A described in the paper and uses those values to update the weights placed on the densities that are afterwards used for stockholder-type partition. This PR completes the implementation of the method and will be supplemented by subsequent PRs that expand testing and docs.",True,921,https://api.github.com/repos/cclib/cclib/pulls/921,https://github.com/cclib/cclib/pull/921,closed,572,255,2,1,3,75,1,0,[{'name': 'methods'}],2020-08-11 13:54:08+00:00,2020-08-19 14:33:51+00:00,693583.0,"8 days, 0:39:43","[{'comment_id': 469997385, 'comment_body': 'Could you put this into a docstring?', 'comment_created': datetime.datetime(2020, 8, 13, 14, 32, 45, tzinfo=datetime.timezone.utc), 'commenter': 'langner', 'type': 'User'}, {'comment_id': 470000525, 'comment_body': 'Think about writing this in an unrolled way with helper functions.', 'comment_created': datetime.datetime(2020, 8, 13, 14, 36, 49, tzinfo=datetime.timezone.utc), 'commenter': 'langner', 'type': 'User'}, {'comment_id': 470001460, 'comment_body': 'This can be `[0.0] * self.natom`.', 'comment_created': datetime.datetime(2020, 8, 13, 14, 38, 11, tzinfo=datetime.timezone.utc), 'commenter': 'langner', 'type': 'User'}, {'comment_id': 470002519, 'comment_body': 'It would be great if you could also add some flavor for how steps 4-7 are different, if at all. Unless you decide to go with the unrolled form, there just comment above each step.', 'comment_created': datetime.datetime(2020, 8, 13, 14, 39, 39, tzinfo=datetime.timezone.utc), 'commenter': 'langner', 'type': 'User'}, {'comment_id': 470002921, 'comment_body': 'Short name. Could you either comment what this is or use a more verbose name?', 'comment_created': datetime.datetime(2020, 8, 13, 14, 40, 10, tzinfo=datetime.timezone.utc), 'commenter': 'langner', 'type': 'User'}, {'comment_id': 470003004, 'comment_body': 'Same here.', 'comment_created': datetime.datetime(2020, 8, 13, 14, 40, 16, tzinfo=datetime.timezone.utc), 'commenter': 'langner', 'type': 'User'}, {'comment_id': 470005087, 'comment_body': ""So the definition of `numpy.diff` tells me this will actually be `self.N_A[0] - self.N_A[-1]` - is that what you wanted? Perhaps it's more clear to just write that out if the elements are scalars."", 'comment_created': datetime.datetime(2020, 8, 13, 14, 43, 10, tzinfo=datetime.timezone.utc), 'commenter': 'langner', 'type': 'User'}, {'comment_id': 470006156, 'comment_body': ""Why not just use `self.data.natom` - it doesn't seem too long."", 'comment_created': datetime.datetime(2020, 8, 13, 14, 44, 37, tzinfo=datetime.timezone.utc), 'commenter': 'langner', 'type': 'User'}, {'comment_id': 470010934, 'comment_body': ""You only use this for indexing, and I believe it's the same as iterating over `for xindex, yindex, zindex in numpy.ndindex(xshape, yshape, zshape)`."", 'comment_created': datetime.datetime(2020, 8, 13, 14, 51, 11, tzinfo=datetime.timezone.utc), 'commenter': 'langner', 'type': 'User'}, {'comment_id': 470011391, 'comment_body': ""Perhaps pay slightly more attention to naming these vars. `xshape` makes it sound like that var holds a shape (tuple), but it doesn't (it's the size of a dimension)."", 'comment_created': datetime.datetime(2020, 8, 13, 14, 51, 51, tzinfo=datetime.timezone.utc), 'commenter': 'langner', 'type': 'User'}, {'comment_id': 470012455, 'comment_body': 'Then why not call this variable converged or similar?', 'comment_created': datetime.datetime(2020, 8, 13, 14, 53, 24, tzinfo=datetime.timezone.utc), 'commenter': 'langner', 'type': 'User'}, {'comment_id': 470012701, 'comment_body': 'Consider breaking this up into two statements.', 'comment_created': datetime.datetime(2020, 8, 13, 14, 53, 44, tzinfo=datetime.timezone.utc), 'commenter': 'langner', 'type': 'User'}, {'comment_id': 470013234, 'comment_body': ""Don't you mean largest positive and smallest negative? It sounds like these are bounds."", 'comment_created': datetime.datetime(2020, 8, 13, 14, 54, 31, tzinfo=datetime.timezone.utc), 'commenter': 'langner', 'type': 'User'}, {'comment_id': 470424957, 'comment_body': ""Wouldn't this be `self.N_A[-1] - self.N_A[-2]`? I'll add a comment what this is. Thanks!"", 'comment_created': datetime.datetime(2020, 8, 14, 5, 56, 1, tzinfo=datetime.timezone.utc), 'commenter': 'mscho527', 'type': 'User'}, {'comment_id': 470428342, 'comment_body': ""I've made this into a docstring. Thanks."", 'comment_created': datetime.datetime(2020, 8, 14, 6, 8, 18, tzinfo=datetime.timezone.utc), 'commenter': 'mscho527', 'type': 'User'}, {'comment_id': 470428795, 'comment_body': ""I've unrolled steps 4 and 7 and left steps 5 and 6 in the while loop, because in these two steps, step index is not incremented if update_kappa is true. Thanks."", 'comment_created': datetime.datetime(2020, 8, 14, 6, 9, 54, tzinfo=datetime.timezone.utc), 'commenter': 'mscho527', 'type': 'User'}, {'comment_id': 470428842, 'comment_body': ""I've modified this. Thanks!"", 'comment_created': datetime.datetime(2020, 8, 14, 6, 10, 5, tzinfo=datetime.timezone.utc), 'commenter': 'mscho527', 'type': 'User'}, {'comment_id': 470428918, 'comment_body': ""I've added some details prior to each step. Thanks."", 'comment_created': datetime.datetime(2020, 8, 14, 6, 10, 19, tzinfo=datetime.timezone.utc), 'commenter': 'mscho527', 'type': 'User'}, {'comment_id': 470429023, 'comment_body': ""These were from the paper. I've added equation number reference for both of them. Thanks."", 'comment_created': datetime.datetime(2020, 8, 14, 6, 10, 41, tzinfo=datetime.timezone.utc), 'commenter': 'mscho527', 'type': 'User'}, {'comment_id': 470429042, 'comment_body': ""These were from the paper. I've added equation number reference for both of them. Thanks."", 'comment_created': datetime.datetime(2020, 8, 14, 6, 10, 44, tzinfo=datetime.timezone.utc), 'commenter': 'mscho527', 'type': 'User'}, {'comment_id': 470429223, 'comment_body': ""I've modified all occurrences of it into directly using `self.data.natom`. Thanks."", 'comment_created': datetime.datetime(2020, 8, 14, 6, 11, 18, tzinfo=datetime.timezone.utc), 'commenter': 'mscho527', 'type': 'User'}, {'comment_id': 470429297, 'comment_body': ""I've changed this. Thanks!"", 'comment_created': datetime.datetime(2020, 8, 14, 6, 11, 35, tzinfo=datetime.timezone.utc), 'commenter': 'mscho527', 'type': 'User'}, {'comment_id': 470429478, 'comment_body': ""I've updated this to be ngridx, ngridy, and ngridz instead. Thanks!"", 'comment_created': datetime.datetime(2020, 8, 14, 6, 12, 9, tzinfo=datetime.timezone.utc), 'commenter': 'mscho527', 'type': 'User'}, {'comment_id': 470429716, 'comment_body': ""I've changed this to `phiconverged`. Thanks."", 'comment_created': datetime.datetime(2020, 8, 14, 6, 12, 56, tzinfo=datetime.timezone.utc), 'commenter': 'mscho527', 'type': 'User'}, {'comment_id': 470429811, 'comment_body': ""I've added a temp variable here for the denominator. Thanks."", 'comment_created': datetime.datetime(2020, 8, 14, 6, 13, 22, tzinfo=datetime.timezone.utc), 'commenter': 'mscho527', 'type': 'User'}, {'comment_id': 470430160, 'comment_body': 'These are largest negative and smallest positive, because the algorithm tries to find two closest numbers to zero. (details are in Figure S1) Let me know if I missed something. Thanks.', 'comment_created': datetime.datetime(2020, 8, 14, 6, 14, 35, tzinfo=datetime.timezone.utc), 'commenter': 'mscho527', 'type': 'User'}, {'comment_id': 470707654, 'comment_body': 'Could you document in the docstring what this returns?', 'comment_created': datetime.datetime(2020, 8, 14, 15, 48, 16, tzinfo=datetime.timezone.utc), 'commenter': 'langner', 'type': 'User'}, {'comment_id': 470710400, 'comment_body': 'Could you create an issue for this please?', 'comment_created': datetime.datetime(2020, 8, 14, 15, 53, 21, tzinfo=datetime.timezone.utc), 'commenter': 'langner', 'type': 'User'}, {'comment_id': 471227253, 'comment_body': ""I've added information about which quantities this function returns. Thanks!"", 'comment_created': datetime.datetime(2020, 8, 17, 4, 36, 20, tzinfo=datetime.timezone.utc), 'commenter': 'mscho527', 'type': 'User'}, {'comment_id': 471227310, 'comment_body': ""I've added issue #925 regarding this. Thank you!"", 'comment_created': datetime.datetime(2020, 8, 17, 4, 36, 40, tzinfo=datetime.timezone.utc), 'commenter': 'mscho527', 'type': 'User'}, {'comment_id': 471479313, 'comment_body': 'Something with ""the smallest magnitude negative and positive phi"" would be less confusing.', 'comment_created': datetime.datetime(2020, 8, 17, 13, 30, tzinfo=datetime.timezone.utc), 'commenter': 'berquist', 'type': 'User'}, {'comment_id': 471484287, 'comment_body': 'Bader -> DDEC6?', 'comment_created': datetime.datetime(2020, 8, 17, 13, 38, 23, tzinfo=datetime.timezone.utc), 'commenter': 'shivupa', 'type': 'User'}, {'comment_id': 471486077, 'comment_body': '```suggestion\r\n                    lowerbigPhi = numpy.NINF\r\n```\r\nand same for positive.', 'comment_created': datetime.datetime(2020, 8, 17, 13, 40, 59, tzinfo=datetime.timezone.utc), 'commenter': 'berquist', 'type': 'User'}, {'comment_id': 471487739, 'comment_body': ""It looks like I've mixed up PRs while writing up the docs. I've removed this part -- the docs are in a separate PR. Thanks for letting me know!"", 'comment_created': datetime.datetime(2020, 8, 17, 13, 43, 35, tzinfo=datetime.timezone.utc), 'commenter': 'mscho527', 'type': 'User'}, {'comment_id': 471488198, 'comment_body': 'Yes, this looks to be true for the `while phiI` block at least.', 'comment_created': datetime.datetime(2020, 8, 17, 13, 44, 17, tzinfo=datetime.timezone.utc), 'commenter': 'berquist', 'type': 'User'}, {'comment_id': 471488354, 'comment_body': 'nvm i didnt see the other PR\r\n', 'comment_created': datetime.datetime(2020, 8, 17, 13, 44, 31, tzinfo=datetime.timezone.utc), 'commenter': 'shivupa', 'type': 'User'}, {'comment_id': 471488973, 'comment_body': 'Code comment for what this does, referring back to the paper?', 'comment_created': datetime.datetime(2020, 8, 17, 13, 45, 27, tzinfo=datetime.timezone.utc), 'commenter': 'berquist', 'type': 'User'}, {'comment_id': 471490183, 'comment_body': 'Can you change this to something else? `iter` is a Python built-in function name.', 'comment_created': datetime.datetime(2020, 8, 17, 13, 47, 20, tzinfo=datetime.timezone.utc), 'commenter': 'berquist', 'type': 'User'}, {'comment_id': 471495840, 'comment_body': ""Yes. I think I'll try to factor this out after moving stockholder routines into a separate object."", 'comment_created': datetime.datetime(2020, 8, 17, 13, 55, 53, tzinfo=datetime.timezone.utc), 'commenter': 'mscho527', 'type': 'User'}, {'comment_id': 471497561, 'comment_body': ""I've added a comment that refers back to the paper. Thanks!"", 'comment_created': datetime.datetime(2020, 8, 17, 13, 58, 26, tzinfo=datetime.timezone.utc), 'commenter': 'mscho527', 'type': 'User'}, {'comment_id': 471497944, 'comment_body': ""I've changed this (and analogous block in phiai) to `iteration`. Thanks!"", 'comment_created': datetime.datetime(2020, 8, 17, 13, 58, 56, tzinfo=datetime.timezone.utc), 'commenter': 'mscho527', 'type': 'User'}, {'comment_id': 471498151, 'comment_body': ""I've just modified this. Thanks!"", 'comment_created': datetime.datetime(2020, 8, 17, 13, 59, 15, tzinfo=datetime.timezone.utc), 'commenter': 'mscho527', 'type': 'User'}, {'comment_id': 471922564, 'comment_body': ""Perhaps separate this out into a separate paragraph and and explain more. It would be wonderful if you could even summarize what proatom densities are and what role they play in DDEC6. Super great if you can perhaps summarize how the the DDEC6 method works, at a high level. Don't assume everyone looking at the code has read the paper and/or known the ins and outs of all methods out there. However, I think you can assume basic understanding of quantum chemistry and population analysis."", 'comment_created': datetime.datetime(2020, 8, 18, 5, 27, 41, tzinfo=datetime.timezone.utc), 'commenter': 'langner', 'type': 'User'}, {'comment_id': 471924667, 'comment_body': 'The comment above says ""determining ion charge value"" but here we see ""ref"", ""loc"" and ""stock"". It would be good to make it clear which one(s) ""ion charge value"" refers to.\r\n\r\nAlso, prefer longer, more descriptive names: ""reference_charges"", ""stockholder"", etc. I know these are temporary, but it\'s good to have this habit in Python.', 'comment_created': datetime.datetime(2020, 8, 18, 5, 34, 40, tzinfo=datetime.timezone.utc), 'commenter': 'langner', 'type': 'User'}, {'comment_id': 471925827, 'comment_body': ""This is the same comment as in step 2 - it's not clear how this is different."", 'comment_created': datetime.datetime(2020, 8, 18, 5, 38, 31, tzinfo=datetime.timezone.utc), 'commenter': 'langner', 'type': 'User'}, {'comment_id': 471926901, 'comment_body': ""I don't think you use update_kappa in step 4."", 'comment_created': datetime.datetime(2020, 8, 18, 5, 42, 1, tzinfo=datetime.timezone.utc), 'commenter': 'langner', 'type': 'User'}, {'comment_id': 471927159, 'comment_body': 'It would help the readability if you placed these logging calls right below the section comments.', 'comment_created': datetime.datetime(2020, 8, 18, 5, 42, 42, tzinfo=datetime.timezone.utc), 'commenter': 'langner', 'type': 'User'}, {'comment_id': 471927754, 'comment_body': 'Is this comment about the two lines below? Does ""calculate G_A"" mean the same thing as ""reshape G"" and I don\'t see anything related to w_A.', 'comment_created': datetime.datetime(2020, 8, 18, 5, 44, 45, tzinfo=datetime.timezone.utc), 'commenter': 'langner', 'type': 'User'}, {'comment_id': 471927988, 'comment_body': ""Ah, this is where w_A is updated... it is mildly confusing to read comments that don't pertain to the code directly below them."", 'comment_created': datetime.datetime(2020, 8, 18, 5, 45, 28, tzinfo=datetime.timezone.utc), 'commenter': 'langner', 'type': 'User'}, {'comment_id': 471930158, 'comment_body': ""This is the first time `self._cond_density` shows up  when reading through `calculate`. I'm sure it's set somewhere in something called above, but that's not obvious. You're also overwriting it... so why not just create from scratch?\r\n\r\nAlso what is `range(len(self._cond_density))` really iterating over? If I'm looking at the right loop below, it's simply iterating over `natom`, so why not use that here?"", 'comment_created': datetime.datetime(2020, 8, 18, 5, 51, 54, tzinfo=datetime.timezone.utc), 'commenter': 'langner', 'type': 'User'}, {'comment_id': 471930360, 'comment_body': 'Create a shape object and reuse it.', 'comment_created': datetime.datetime(2020, 8, 18, 5, 52, 38, tzinfo=datetime.timezone.utc), 'commenter': 'langner', 'type': 'User'}, {'comment_id': 471931204, 'comment_body': 'This will raise `AssertionError`. Perhaps on `not phiconverged` raise a more appropriate error?', 'comment_created': datetime.datetime(2020, 8, 18, 5, 55, 17, tzinfo=datetime.timezone.utc), 'commenter': 'langner', 'type': 'User'}, {'comment_id': 471931715, 'comment_body': 'Typically in Python we typically use snake case, so this could be `phi_converged`.', 'comment_created': datetime.datetime(2020, 8, 18, 5, 56, 54, tzinfo=datetime.timezone.utc), 'commenter': 'langner', 'type': 'User'}, {'comment_id': 471931818, 'comment_body': 'Is it possible for phiconverged to be True at this point?', 'comment_created': datetime.datetime(2020, 8, 18, 5, 57, 15, tzinfo=datetime.timezone.utc), 'commenter': 'langner', 'type': 'User'}, {'comment_id': 471932016, 'comment_body': 'Do you think a for loop and break on convergence would be more natural here?', 'comment_created': datetime.datetime(2020, 8, 18, 5, 57, 49, tzinfo=datetime.timezone.utc), 'commenter': 'langner', 'type': 'User'}, {'comment_id': 471932298, 'comment_body': 'If you break out of the loop here you could obviate some branching here.', 'comment_created': datetime.datetime(2020, 8, 18, 5, 58, 41, tzinfo=datetime.timezone.utc), 'commenter': 'langner', 'type': 'User'}, {'comment_id': 471932832, 'comment_body': 'Is there any interpretation for this H quantity? It would be helpful to know what is hiding behind the symbol', 'comment_created': datetime.datetime(2020, 8, 18, 6, 0, 17, tzinfo=datetime.timezone.utc), 'commenter': 'langner', 'type': 'User'}, {'comment_id': 471933003, 'comment_body': 'Better method name?', 'comment_created': datetime.datetime(2020, 8, 18, 6, 0, 46, tzinfo=datetime.timezone.utc), 'commenter': 'langner', 'type': 'User'}, {'comment_id': 471987668, 'comment_body': ""I've added some more information below this comment which provides some general idea of how the proatom densities are used and DDEC6 charges are calculated. Please let me know if I missed any important points. Thanks."", 'comment_created': datetime.datetime(2020, 8, 18, 7, 56, 13, tzinfo=datetime.timezone.utc), 'commenter': 'mscho527', 'type': 'User'}, {'comment_id': 471988365, 'comment_body': ""I've changed them into longer names. Thanks."", 'comment_created': datetime.datetime(2020, 8, 18, 7, 57, 17, tzinfo=datetime.timezone.utc), 'commenter': 'mscho527', 'type': 'User'}, {'comment_id': 471988551, 'comment_body': ""I've added some information here about the third step. Thanks."", 'comment_created': datetime.datetime(2020, 8, 18, 7, 57, 34, tzinfo=datetime.timezone.utc), 'commenter': 'mscho527', 'type': 'User'}, {'comment_id': 471989317, 'comment_body': ""I've moved declaration of update_kappa just before step 5. Thanks."", 'comment_created': datetime.datetime(2020, 8, 18, 7, 58, 48, tzinfo=datetime.timezone.utc), 'commenter': 'mscho527', 'type': 'User'}, {'comment_id': 471989716, 'comment_body': ""I've moved the log calls to right below the section comment. Thanks."", 'comment_created': datetime.datetime(2020, 8, 18, 7, 59, 29, tzinfo=datetime.timezone.utc), 'commenter': 'mscho527', 'type': 'User'}, {'comment_id': 471990450, 'comment_body': ""I was trying to say that G_A and H_A are calculated here to update w_A, since G_A and H_A do not serve any other purpose than to make sure that w_A does not diverge in the numerical algorithm. I've rephrased this a bit. Thanks."", 'comment_created': datetime.datetime(2020, 8, 18, 8, 0, 37, tzinfo=datetime.timezone.utc), 'commenter': 'mscho527', 'type': 'User'}, {'comment_id': 471990731, 'comment_body': ""As mentioned in the previous comment, I've rephrased this a bit for clarity.  Thanks."", 'comment_created': datetime.datetime(2020, 8, 18, 8, 1, 5, tzinfo=datetime.timezone.utc), 'commenter': 'mscho527', 'type': 'User'}, {'comment_id': 471992087, 'comment_body': ""`self._cond_density` is first populated in Step 3, within the function `self.condition_densities()`. I've moved the declaration of the list to the calculate() function to prevent confusion. In each steps that follow (4-6), `self._cond_density` is updated with new values.\r\n\r\nI've changed the range to use natom instead. Thanks."", 'comment_created': datetime.datetime(2020, 8, 18, 8, 3, 38, tzinfo=datetime.timezone.utc), 'commenter': 'mscho527', 'type': 'User'}, {'comment_id': 471992292, 'comment_body': ""I've added `grid_shape` for this. Thanks."", 'comment_created': datetime.datetime(2020, 8, 18, 8, 4, 1, tzinfo=datetime.timezone.utc), 'commenter': 'mscho527', 'type': 'User'}, {'comment_id': 471994409, 'comment_body': ""I've added `ConvergenceError` here. Thanks."", 'comment_created': datetime.datetime(2020, 8, 18, 8, 7, 43, tzinfo=datetime.timezone.utc), 'commenter': 'mscho527', 'type': 'User'}, {'comment_id': 471995034, 'comment_body': ""This was possible before I made some changes on the while loop. I must've forgotten to account for the change. Thanks for noting this!"", 'comment_created': datetime.datetime(2020, 8, 18, 8, 8, 48, tzinfo=datetime.timezone.utc), 'commenter': 'mscho527', 'type': 'User'}, {'comment_id': 471996522, 'comment_body': 'Yes. That would remove the need of `phiconverged`. Thanks.', 'comment_created': datetime.datetime(2020, 8, 18, 8, 11, 22, tzinfo=datetime.timezone.utc), 'commenter': 'mscho527', 'type': 'User'}, {'comment_id': 471996846, 'comment_body': ""Yes. I've added break statements and reduced the indent here. Thanks."", 'comment_created': datetime.datetime(2020, 8, 18, 8, 11, 52, tzinfo=datetime.timezone.utc), 'commenter': 'mscho527', 'type': 'User'}, {'comment_id': 471997306, 'comment_body': ""I've added a comment on both reshape_G and calculate_H for more clarity. Basically, both G an H are constraints set on the tail of the proatom density."", 'comment_created': datetime.datetime(2020, 8, 18, 8, 12, 42, tzinfo=datetime.timezone.utc), 'commenter': 'mscho527', 'type': 'User'}, {'comment_id': 471997741, 'comment_body': ""I've changed this (and _phiaii) into _update_phiai (and update_phiaii). Thanks."", 'comment_created': datetime.datetime(2020, 8, 18, 8, 13, 27, tzinfo=datetime.timezone.utc), 'commenter': 'mscho527', 'type': 'User'}, {'comment_id': 472223409, 'comment_body': 'Can this be an argument with a  default value of 49', 'comment_created': datetime.datetime(2020, 8, 18, 14, 5, 49, tzinfo=datetime.timezone.utc), 'commenter': 'shivupa', 'type': 'User'}, {'comment_id': 472236170, 'comment_body': ""I've just modified this. Thanks!"", 'comment_created': datetime.datetime(2020, 8, 18, 14, 23, 21, tzinfo=datetime.timezone.utc), 'commenter': 'mscho527', 'type': 'User'}]","[{'commit_sha': '3df6636257f3decdf114fca03a0540c67dcd5860', 'committer_username': 'mscho527', 'committer_name': 'Minsik', 'committer_email': None, 'commit_date': datetime.datetime(2014, 3, 12, 12, 13, 11, tzinfo=datetime.timezone.utc)}]",Minsik,6929314,,User,,11,,5,13
467231733,Add a few more tests for DDEC6,"_Related Issue: #885
Depends upon: #921_

Two more tests for DDEC6 (H2 and CO) are added to the test suite in this PR. Some changes on DDEC6 code were made to account for divide-by-zero errors in nonpolar diatomics.",True,922,https://api.github.com/repos/cclib/cclib/pulls/922,https://github.com/cclib/cclib/pull/922,closed,162207,54,7,1,1,6,2,0,"[{'name': 'methods'}, {'name': 'tests'}]",2020-08-13 08:27:28+00:00,2020-08-21 14:47:08+00:00,713980.0,"8 days, 6:19:40","[{'comment_id': 473589155, 'comment_body': 'Since these are supposed to be equal, I would make the delta much tighter:\r\n```\r\n(Pdb) pp analysis.fragcharges\r\narray([0.0014376, 0.0014376])\r\n(Pdb) interact\r\n*interactive*\r\n>>> analysis.fragcharges[0] - analysis.fragcharges[1]\r\n9.992007221626409e-16\r\n```', 'comment_created': datetime.datetime(2020, 8, 20, 4, 59, 24, tzinfo=datetime.timezone.utc), 'commenter': 'berquist', 'type': 'User'}, {'comment_id': 473591082, 'comment_body': 'Come to think of it, is it expected that these charges are both\r\n1. non-negligible and\r\n2. the same sign?\r\nIt should actually be the `sum` test that has a very tight threshold, and the opposite test would be comparing the absolute value of the difference to zero.', 'comment_created': datetime.datetime(2020, 8, 20, 5, 2, 46, tzinfo=datetime.timezone.utc), 'commenter': 'berquist', 'type': 'User'}, {'comment_id': 473596897, 'comment_body': ""Intuitively, this answer makes more sense than the H2 answer. It's still a little concerning that there is such a deviation from a total of zero (-0.00682). What does chargemol give?"", 'comment_created': datetime.datetime(2020, 8, 20, 5, 13, tzinfo=datetime.timezone.utc), 'commenter': 'berquist', 'type': 'User'}, {'comment_id': 473669659, 'comment_body': ""This should most likely come from the fact that `self.charge_density.integrate()` returns 14.006876594937234. I've added a note about this. Thanks.\r\n\r\n`chargemol` seems to be free from this because they normalize the density to total number of electrons before partitioning them (as in `module_DDEC6_valence_iterator.f08:149`). I'm not sure if this normalization step should be added given that this was not mentioned in the paper?"", 'comment_created': datetime.datetime(2020, 8, 20, 6, 59, 58, tzinfo=datetime.timezone.utc), 'commenter': 'mscho527', 'type': 'User'}, {'comment_id': 473669726, 'comment_body': ""The charges for H2 should just be zero. Using much denser grid (spacing of 0.1 rather than 0.2 which is the cube file included in the test) gives [0.00046066, 0.00046066].\r\n\r\nI've modified this test so that the delta is smaller, and left a note why the values are not exactly zero in the test. Thanks!"", 'comment_created': datetime.datetime(2020, 8, 20, 7, 0, 1, tzinfo=datetime.timezone.utc), 'commenter': 'mscho527', 'type': 'User'}, {'comment_id': 474327914, 'comment_body': 'As a follow-up, using finer grid (spacing of 0.05) reduces the difference:\r\n\r\n```\r\n>>> ddec.fragcharges\r\narray([ 0.13149808, -0.13052562])\r\n>>> ddec.fragcharges.sum()\r\n0.0009724637203740727\r\n>>> ddec.charge_density.integrate()\r\n13.999027536279629\r\n```\r\n', 'comment_created': datetime.datetime(2020, 8, 20, 23, 35, 57, tzinfo=datetime.timezone.utc), 'commenter': 'mscho527', 'type': 'User'}]","[{'commit_sha': '296affeca5908344f200bbba9d06ef3b228e7faf', 'committer_username': 'mscho527', 'committer_name': 'Minsik', 'committer_email': None, 'commit_date': datetime.datetime(2014, 3, 12, 12, 13, 11, tzinfo=datetime.timezone.utc)}]",Minsik,6929314,,User,,11,,5,13
468579774,Add docs for DDEC6,"_Related Issue: #885
Depends upon: #922_

This PR adds documentation for DDEC6.",True,926,https://api.github.com/repos/cclib/cclib/pulls/926,https://github.com/cclib/cclib/pull/926,closed,45,0,1,1,0,4,2,0,"[{'name': 'methods'}, {'name': 'docs'}]",2020-08-17 05:01:18+00:00,2020-08-24 12:47:20+00:00,632762.0,"7 days, 7:46:02","[{'comment_id': 473046718, 'comment_body': '> ""For DDEC6 calculations, it is recommended that electron densities are imported from cube files. Because a lot of numerical integrations are present in DDEC6 algorithm, fine grid is necessary to obtain satisfying results.""\r\n\r\nThe DDEC6 algorithm requires many numerical integrations so a fine grid is necessary to obtain accurate results. Calculating the electron density on a fine grid using a `Volume` object is slow, therefore we recommend that electron densities are imported from cube files.\r\n\r\nBecause a lot of numerical integrations are present in DDEC6 algorithm, fine grid is necessary to obtain satisfying results.', 'comment_created': datetime.datetime(2020, 8, 19, 13, 53, 23, tzinfo=datetime.timezone.utc), 'commenter': 'shivupa', 'type': 'User'}, {'comment_id': 473055545, 'comment_body': ""I've updated this. Thanks for the comment!"", 'comment_created': datetime.datetime(2020, 8, 19, 14, 5, 26, tzinfo=datetime.timezone.utc), 'commenter': 'mscho527', 'type': 'User'}, {'comment_id': 475100001, 'comment_body': 'Is this meant to be here?', 'comment_created': datetime.datetime(2020, 8, 22, 15, 11, 23, tzinfo=datetime.timezone.utc), 'commenter': 'berquist', 'type': 'User'}, {'comment_id': 475286567, 'comment_body': ""I've removed this. Thanks for noting!"", 'comment_created': datetime.datetime(2020, 8, 24, 0, 15, 4, tzinfo=datetime.timezone.utc), 'commenter': 'mscho527', 'type': 'User'}]","[{'commit_sha': 'f2ab42f03002d71233fb124212e9f30e3c604ddb', 'committer_username': 'mscho527', 'committer_name': 'Minsik', 'committer_email': None, 'commit_date': datetime.datetime(2014, 3, 12, 12, 13, 11, tzinfo=datetime.timezone.utc)}]",Minsik,6929314,,User,,11,,5,13
469467986,Separate out Hirshfeld method from DDEC6 as a standalone method,"_Related Issue: #885
Depends upon: #926_

This PR separates out Hirshfeld method (which was part of Step 1 in DDEC6) as a standalone method.",True,927,https://api.github.com/repos/cclib/cclib/pulls/927,https://github.com/cclib/cclib/pull/927,closed,514,160,6,1,0,0,2,0,"[{'name': 'maintenance'}, {'name': 'methods'}]",2020-08-18 12:32:47+00:00,2020-08-24 14:05:29+00:00,523962.0,"6 days, 1:32:42",[],"[{'commit_sha': '9f7663793f31962e0cd10c839b59ea367115ab81', 'committer_username': 'mscho527', 'committer_name': 'Minsik', 'committer_email': None, 'commit_date': datetime.datetime(2014, 3, 12, 12, 13, 11, tzinfo=datetime.timezone.utc)}]",Minsik,6929314,,User,,11,,5,13
470138075,Add docs for Hirshfeld method,"_Related Issue: #885
Depends upon: #927_ 

This PR adds documentation for Hirshfeld method.",True,928,https://api.github.com/repos/cclib/cclib/pulls/928,https://github.com/cclib/cclib/pull/928,closed,61,2,2,1,0,0,2,0,"[{'name': 'methods'}, {'name': 'docs'}]",2020-08-19 12:40:48+00:00,2020-08-24 16:13:28+00:00,444760.0,"5 days, 3:32:40",[],"[{'commit_sha': '7bf57d7a5d3c3e5006b355de92ce81b44c03d5a0', 'committer_username': 'mscho527', 'committer_name': 'Minsik', 'committer_email': None, 'commit_date': datetime.datetime(2014, 3, 12, 12, 13, 11, tzinfo=datetime.timezone.utc)}]",Minsik,6929314,,User,,11,,5,13
470679885,Clean up DDEC6 code,"_Related Issue: #885
Depends upon: #928_

This PR cleans up DDEC6 code by

1. Separating out duplicate code (phi optimization routine in step 3 and 4-6) into a function
2. Add more comments on the phi optimization routine
3. Modify order of class functions
4. Separate out if logic that determines update_kappa

Attempts to address issue #929 ",True,930,https://api.github.com/repos/cclib/cclib/pulls/930,https://github.com/cclib/cclib/pull/930,closed,259,317,2,1,1,4,2,0,"[{'name': 'maintenance'}, {'name': 'methods'}]",2020-08-20 05:59:59+00:00,2020-08-26 13:12:00+00:00,544321.0,"6 days, 7:12:01","[{'comment_id': 476462064, 'comment_body': 'Both of these should be removed, since the check already exists on line 108. Make sure to remove the already-existing extra one too.', 'comment_created': datetime.datetime(2020, 8, 25, 13, 48, 1, tzinfo=datetime.timezone.utc), 'commenter': 'berquist', 'type': 'User'}, {'comment_id': 476470130, 'comment_body': ""I've removed these. Thanks for letting me know!"", 'comment_created': datetime.datetime(2020, 8, 25, 13, 58, 43, tzinfo=datetime.timezone.utc), 'commenter': 'mscho527', 'type': 'User'}, {'comment_id': 476482955, 'comment_body': 'can you run black on this file so there are no changes in the test?', 'comment_created': datetime.datetime(2020, 8, 25, 14, 15, 11, tzinfo=datetime.timezone.utc), 'commenter': 'shivupa', 'type': 'User'}, {'comment_id': 476486346, 'comment_body': ""I've re-run black on both files to make sure. It seems to me that the PR before this wasn't cleansed with black. Thanks!"", 'comment_created': datetime.datetime(2020, 8, 25, 14, 19, 44, tzinfo=datetime.timezone.utc), 'commenter': 'mscho527', 'type': 'User'}]","[{'commit_sha': '7f53ef2145235db1fccbb16683546c6ba4c464b9', 'committer_username': 'mscho527', 'committer_name': 'Minsik', 'committer_email': None, 'commit_date': datetime.datetime(2014, 3, 12, 12, 13, 11, tzinfo=datetime.timezone.utc)}]",Minsik,6929314,,User,,11,,5,13

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
15514912,cclib,cclib/cclib,Python,166,324,20,83,5037,179,25,19,"[{'id': 509761177, 'number': 965, 'closed': datetime.datetime(2021, 2, 2, 13, 37, 9, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 10, 26, 5, 10, 46, tzinfo=datetime.timezone.utc), 'time_taken': 8583983.0, 'time_delta': '99 days, 8:26:23', 'additions': 105, 'deletions': 0, 'state': 'closed'}, {'id': 475856355, 'number': 940, 'closed': datetime.datetime(2020, 9, 3, 4, 22, 10, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 30, 3, 19, 36, tzinfo=datetime.timezone.utc), 'time_taken': 349354.0, 'time_delta': '4 days, 1:02:34', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 475847288, 'number': 938, 'closed': datetime.datetime(2020, 9, 3, 4, 22, 38, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 30, 1, 10, 59, tzinfo=datetime.timezone.utc), 'time_taken': 357099.0, 'time_delta': '4 days, 3:11:39', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 473217431, 'number': 934, 'closed': datetime.datetime(2020, 9, 3, 3, 14, 50, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 25, 13, 49, 2, tzinfo=datetime.timezone.utc), 'time_taken': 739548.0, 'time_delta': '8 days, 13:25:48', 'additions': 40, 'deletions': 2, 'state': 'closed'}, {'id': 470679885, 'number': 930, 'closed': datetime.datetime(2020, 8, 26, 13, 12, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 20, 5, 59, 59, tzinfo=datetime.timezone.utc), 'time_taken': 544321.0, 'time_delta': '6 days, 7:12:01', 'additions': 259, 'deletions': 317, 'state': 'closed'}, {'id': 470138075, 'number': 928, 'closed': datetime.datetime(2020, 8, 24, 16, 13, 28, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 19, 12, 40, 48, tzinfo=datetime.timezone.utc), 'time_taken': 444760.0, 'time_delta': '5 days, 3:32:40', 'additions': 61, 'deletions': 2, 'state': 'closed'}, {'id': 469467986, 'number': 927, 'closed': datetime.datetime(2020, 8, 24, 14, 5, 29, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 18, 12, 32, 47, tzinfo=datetime.timezone.utc), 'time_taken': 523962.0, 'time_delta': '6 days, 1:32:42', 'additions': 514, 'deletions': 160, 'state': 'closed'}, {'id': 468579774, 'number': 926, 'closed': datetime.datetime(2020, 8, 24, 12, 47, 20, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 17, 5, 1, 18, tzinfo=datetime.timezone.utc), 'time_taken': 632762.0, 'time_delta': '7 days, 7:46:02', 'additions': 45, 'deletions': 0, 'state': 'closed'}, {'id': 467231733, 'number': 922, 'closed': datetime.datetime(2020, 8, 21, 14, 47, 8, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 13, 8, 27, 28, tzinfo=datetime.timezone.utc), 'time_taken': 713980.0, 'time_delta': '8 days, 6:19:40', 'additions': 162207, 'deletions': 54, 'state': 'closed'}, {'id': 466120171, 'number': 921, 'closed': datetime.datetime(2020, 8, 19, 14, 33, 51, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 11, 13, 54, 8, tzinfo=datetime.timezone.utc), 'time_taken': 693583.0, 'time_delta': '8 days, 0:39:43', 'additions': 572, 'deletions': 255, 'state': 'closed'}, {'id': 465428486, 'number': 920, 'closed': datetime.datetime(2020, 8, 13, 14, 31, 58, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 10, 10, 59, 56, tzinfo=datetime.timezone.utc), 'time_taken': 271922.0, 'time_delta': '3 days, 3:32:02', 'additions': 139, 'deletions': 19, 'state': 'closed'}, {'id': 462747512, 'number': 919, 'closed': datetime.datetime(2020, 8, 12, 13, 52, 11, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 4, 12, 52, 48, tzinfo=datetime.timezone.utc), 'time_taken': 694763.0, 'time_delta': '8 days, 0:59:23', 'additions': 417, 'deletions': 22, 'state': 'closed'}, {'id': 462534903, 'number': 917, 'closed': datetime.datetime(2020, 8, 4, 13, 48, 41, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 4, 5, 20, 23, tzinfo=datetime.timezone.utc), 'time_taken': 30498.0, 'time_delta': '8:28:18', 'additions': 12, 'deletions': 9, 'state': 'closed'}, {'id': 461994089, 'number': 916, 'closed': datetime.datetime(2020, 8, 10, 14, 31, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 3, 7, 15, 9, tzinfo=datetime.timezone.utc), 'time_taken': 630951.0, 'time_delta': '7 days, 7:15:51', 'additions': 143, 'deletions': 68, 'state': 'closed'}, {'id': 458944771, 'number': 915, 'closed': datetime.datetime(2020, 8, 5, 0, 28, 11, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 30, 7, 53, 5, tzinfo=datetime.timezone.utc), 'time_taken': 491706.0, 'time_delta': '5 days, 16:35:06', 'additions': 139466, 'deletions': 12, 'state': 'closed'}, {'id': 457764009, 'number': 914, 'closed': datetime.datetime(2020, 8, 3, 14, 33, 21, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 28, 12, 2, 38, tzinfo=datetime.timezone.utc), 'time_taken': 527443.0, 'time_delta': '6 days, 2:30:43', 'additions': 265, 'deletions': 2, 'state': 'closed'}, {'id': 457114724, 'number': 912, 'closed': datetime.datetime(2020, 7, 28, 6, 33, 34, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 27, 11, 55, 13, tzinfo=datetime.timezone.utc), 'time_taken': 67101.0, 'time_delta': '18:38:21', 'additions': 33, 'deletions': 11, 'state': 'closed'}, {'id': 450157239, 'number': 907, 'closed': datetime.datetime(2020, 7, 24, 14, 32, 50, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 16, 12, 29, tzinfo=datetime.timezone.utc), 'time_taken': 698630.0, 'time_delta': '8 days, 2:03:50', 'additions': 117, 'deletions': 30, 'state': 'closed'}, {'id': 450000246, 'number': 906, 'closed': datetime.datetime(2020, 7, 17, 8, 0, 5, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 16, 8, 20, 54, tzinfo=datetime.timezone.utc), 'time_taken': 85151.0, 'time_delta': '23:39:11', 'additions': 387, 'deletions': 29, 'state': 'closed'}, {'id': 449444090, 'number': 903, 'closed': datetime.datetime(2020, 7, 28, 14, 33, 29, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 15, 12, 18, 6, tzinfo=datetime.timezone.utc), 'time_taken': 1131323.0, 'time_delta': '13 days, 2:15:23', 'additions': 55, 'deletions': 0, 'state': 'closed'}, {'id': 449319899, 'number': 902, 'closed': datetime.datetime(2020, 7, 30, 14, 32, 46, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 15, 8, 11, 10, tzinfo=datetime.timezone.utc), 'time_taken': 1318896.0, 'time_delta': '15 days, 6:21:36', 'additions': 368141, 'deletions': 7, 'state': 'closed'}, {'id': 446821571, 'number': 900, 'closed': datetime.datetime(2020, 7, 21, 16, 57, 25, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 9, 12, 14, 46, tzinfo=datetime.timezone.utc), 'time_taken': 1053759.0, 'time_delta': '12 days, 4:42:39', 'additions': 285, 'deletions': 7, 'state': 'closed'}, {'id': 446191805, 'number': 899, 'closed': datetime.datetime(2020, 7, 16, 3, 43, 25, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 8, 11, 51, 44, tzinfo=datetime.timezone.utc), 'time_taken': 661901.0, 'time_delta': '7 days, 15:51:41', 'additions': 668, 'deletions': 111, 'state': 'closed'}, {'id': 445238485, 'number': 898, 'closed': datetime.datetime(2020, 7, 14, 15, 13, 34, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 7, 8, 13, 21, tzinfo=datetime.timezone.utc), 'time_taken': 630013.0, 'time_delta': '7 days, 7:00:13', 'additions': 8, 'deletions': 6, 'state': 'closed'}, {'id': 444578121, 'number': 897, 'closed': datetime.datetime(2020, 7, 13, 14, 40, 43, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 6, 6, 54, 56, tzinfo=datetime.timezone.utc), 'time_taken': 632747.0, 'time_delta': '7 days, 7:45:47', 'additions': 119, 'deletions': 66, 'state': 'closed'}, {'id': 443528438, 'number': 896, 'closed': datetime.datetime(2020, 7, 9, 14, 32, 30, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 2, 13, 46, 22, tzinfo=datetime.timezone.utc), 'time_taken': 607568.0, 'time_delta': '7 days, 0:46:08', 'additions': 67, 'deletions': 40, 'state': 'closed'}, {'id': 441975819, 'number': 894, 'closed': datetime.datetime(2020, 7, 6, 14, 31, 5, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 30, 11, 51, 59, tzinfo=datetime.timezone.utc), 'time_taken': 527946.0, 'time_delta': '6 days, 2:39:06', 'additions': 108, 'deletions': 19, 'state': 'closed'}, {'id': 441404085, 'number': 893, 'closed': datetime.datetime(2020, 7, 1, 14, 34, 29, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 29, 13, 11, 10, tzinfo=datetime.timezone.utc), 'time_taken': 177799.0, 'time_delta': '2 days, 1:23:19', 'additions': 1, 'deletions': 0, 'state': 'closed'}, {'id': 440516283, 'number': 892, 'closed': datetime.datetime(2020, 6, 29, 11, 1, 34, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 26, 10, 49, 28, tzinfo=datetime.timezone.utc), 'time_taken': 259926.0, 'time_delta': '3 days, 0:12:06', 'additions': 138, 'deletions': 32, 'state': 'closed'}, {'id': 438497594, 'number': 888, 'closed': datetime.datetime(2020, 7, 6, 14, 36, 42, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 23, 11, 9, 23, tzinfo=datetime.timezone.utc), 'time_taken': 1135639.0, 'time_delta': '13 days, 3:27:19', 'additions': 124, 'deletions': 0, 'state': 'closed'}, {'id': 438411977, 'number': 887, 'closed': datetime.datetime(2020, 6, 24, 7, 9, 19, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 23, 8, 38, 21, tzinfo=datetime.timezone.utc), 'time_taken': 81058.0, 'time_delta': '22:30:58', 'additions': 458, 'deletions': 3, 'state': 'closed'}, {'id': 437104427, 'number': 884, 'closed': datetime.datetime(2020, 6, 29, 14, 44, 44, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 19, 13, 32, 47, tzinfo=datetime.timezone.utc), 'time_taken': 868317.0, 'time_delta': '10 days, 1:11:57', 'additions': 52, 'deletions': 25, 'state': 'closed'}, {'id': 437052820, 'number': 883, 'closed': datetime.datetime(2020, 6, 25, 15, 58, 45, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 19, 11, 37, 47, tzinfo=datetime.timezone.utc), 'time_taken': 534058.0, 'time_delta': '6 days, 4:20:58', 'additions': 85, 'deletions': 8, 'state': 'closed'}, {'id': 436909546, 'number': 882, 'closed': datetime.datetime(2020, 6, 23, 14, 33, 29, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 19, 6, 6, 23, tzinfo=datetime.timezone.utc), 'time_taken': 376026.0, 'time_delta': '4 days, 8:27:06', 'additions': 79, 'deletions': 1, 'state': 'closed'}, {'id': 436881198, 'number': 881, 'closed': datetime.datetime(2020, 6, 22, 16, 50, 48, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 19, 4, 25, 52, tzinfo=datetime.timezone.utc), 'time_taken': 303896.0, 'time_delta': '3 days, 12:24:56', 'additions': 24, 'deletions': 2, 'state': 'closed'}, {'id': 436444532, 'number': 879, 'closed': datetime.datetime(2020, 7, 7, 14, 7, 38, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 18, 12, 38, 1, tzinfo=datetime.timezone.utc), 'time_taken': 1646977.0, 'time_delta': '19 days, 1:29:37', 'additions': 193, 'deletions': 51, 'state': 'closed'}, {'id': 432535034, 'number': 873, 'closed': datetime.datetime(2020, 6, 24, 14, 46, 4, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 10, 15, 29, 32, tzinfo=datetime.timezone.utc), 'time_taken': 1206992.0, 'time_delta': '13 days, 23:16:32', 'additions': 161, 'deletions': 26, 'state': 'closed'}, {'id': 428343886, 'number': 869, 'closed': datetime.datetime(2020, 6, 16, 14, 34, 6, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 5, 9, 46, 40, tzinfo=datetime.timezone.utc), 'time_taken': 967646.0, 'time_delta': '11 days, 4:47:26', 'additions': 316, 'deletions': 7, 'state': 'closed'}, {'id': 384302196, 'number': 801, 'closed': datetime.datetime(2020, 3, 8, 3, 42, 4, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 3, 5, 14, 18, 37, tzinfo=datetime.timezone.utc), 'time_taken': 221007.0, 'time_delta': '2 days, 13:23:27', 'additions': 1, 'deletions': 1, 'state': 'closed'}]"
