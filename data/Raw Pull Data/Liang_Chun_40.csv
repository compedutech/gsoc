pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
1006486469,[GSoC 2022] large ghost sparse file support ,"<!--
Please make sure you've read and understood our contributing guidelines:
https://github.com/checkpoint-restore/criu/blob/criu-dev/CONTRIBUTING.md

In short you need to:

- Describe What you do and How you do it;
- Separate each logical change into a separate commit;
- Add a ""Signed-off-by:"" line identifying that you certify your work with DCO;
- If you fix some specific bug or commit, please add ""Fixes: ..."" line;
- Review fixes should be made by amending the original commits. For example:
  a) fix the code (e.g. this fixes commit with hash aaa1111)
  b) git commit -a --fixup aaa1111
  c) git rebase --interactive --autosquash aaa1111^
- Pull request integration tests should generally be passing;
- If you change something non-obvious, please consider adding a ZDTM test for it;

-->
CRIU checked the size of sparse ghosts with `st_size`, this shows the file length not the actual file size(disk size), so the check can't deal with a large sparse ghost file.

In this PR, I fixed this bug by replacing `st_size` with `st_blocks`, which shows the actual size of a file. Moreover,  I created a test with large sparse ghost file, it will break the previous check but not the fixed one.",True,1944,https://api.github.com/repos/checkpoint-restore/criu/pulls/1944,https://github.com/checkpoint-restore/criu/pull/1944,closed,160,3,6,3,2,4,0,0,[],2022-07-24 07:30:22+00:00,2022-08-04 11:27:42+00:00,964640.0,"11 days, 3:57:20","[{'comment_id': 928540445, 'comment_body': 'minor nit: I believe we need to reword ""hole"" -> ""data"", looks like a leftover.', 'comment_created': datetime.datetime(2022, 7, 25, 7, 14, 24, tzinfo=datetime.timezone.utc), 'commenter': 'Snorch', 'type': 'User'}, {'comment_id': 928544125, 'comment_body': ""You've updated the check but error message is not updated, please do."", 'comment_created': datetime.datetime(2022, 7, 25, 7, 19, 25, tzinfo=datetime.timezone.utc), 'commenter': 'Snorch', 'type': 'User'}, {'comment_id': 931816020, 'comment_body': ""Sure, I've done it.\r\n"", 'comment_created': datetime.datetime(2022, 7, 28, 6, 9, 12, tzinfo=datetime.timezone.utc), 'commenter': 'featherchen', 'type': 'User'}, {'comment_id': 931816397, 'comment_body': 'OK, I have fixed them.\r\n', 'comment_created': datetime.datetime(2022, 7, 28, 6, 9, 54, tzinfo=datetime.timezone.utc), 'commenter': 'featherchen', 'type': 'User'}]","[{'commit_sha': 'd7e2b22a7916aa846ec4edbf2660e2e9742a1ac7', 'committer_username': 'featherchen', 'committer_name': 'Liang Chun', 'committer_email': 'liangchun@apache.org', 'commit_date': datetime.datetime(2019, 11, 19, 10, 43, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6f6d703fdb37960c59504215e42bb024a357583c', 'committer_username': 'featherchen', 'committer_name': 'Liang Chun', 'committer_email': 'liangchun@apache.org', 'commit_date': datetime.datetime(2019, 11, 19, 10, 43, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f55b40f86c8232251a8eb76fb1481999fa069a56', 'committer_username': 'featherchen', 'committer_name': 'Liang Chun', 'committer_email': 'liangchun@apache.org', 'commit_date': datetime.datetime(2019, 11, 19, 10, 43, 45, tzinfo=datetime.timezone.utc)}]",Liang Chun,57944334,liangchun@apache.org,User,,19,,1,5
1036326548,[GSoC 2022] Improve copy file algorithm in dump_ghost_file,"In order to reduce the frequency of using system call, I created a new algorithm
of copying chunk via fiemap.(copy_file_to_chunks_fiemap)

Also, I modified the sendfile-related inequality (e.g. from <= to =) to
avoid corresponding error.

Signed-off-by: Liang-Chun Chen <featherclc@gmail.com>

<!--
Please make sure you've read and understood our contributing guidelines:
https://github.com/checkpoint-restore/criu/blob/criu-dev/CONTRIBUTING.md

In short you need to:

- Describe What you do and How you do it;
- Separate each logical change into a separate commit;
- Add a ""Signed-off-by:"" line identifying that you certify your work with DCO;
- If you fix some specific bug or commit, please add ""Fixes: ..."" line;
- Review fixes should be made by amending the original commits. For example:
  a) fix the code (e.g. this fixes commit with hash aaa1111)
  b) git commit -a --fixup aaa1111
  c) git rebase --interactive --autosquash aaa1111^
- Pull request integration tests should generally be passing;
- If you change something non-obvious, please consider adding a ZDTM test for it;

-->
",True,1963,https://api.github.com/repos/checkpoint-restore/criu/pulls/1963,https://github.com/checkpoint-restore/criu/pull/1963,closed,237,4,8,2,6,39,0,1,[],2022-08-25 06:50:13+00:00,2022-11-30 17:28:02+00:00,8419069.0,"97 days, 10:37:49","[{'comment_id': 954608805, 'comment_body': 'please run `make indent`', 'comment_created': datetime.datetime(2022, 8, 25, 7, 41, 28, tzinfo=datetime.timezone.utc), 'commenter': 'mihalicyn', 'type': 'User'}, {'comment_id': 954609969, 'comment_body': '`pr_perror`', 'comment_created': datetime.datetime(2022, 8, 25, 7, 42, 41, tzinfo=datetime.timezone.utc), 'commenter': 'mihalicyn', 'type': 'User'}, {'comment_id': 954610137, 'comment_body': '`pr_perror`', 'comment_created': datetime.datetime(2022, 8, 25, 7, 42, 50, tzinfo=datetime.timezone.utc), 'commenter': 'mihalicyn', 'type': 'User'}, {'comment_id': 954749499, 'comment_body': ""Thanks, I've correct them all."", 'comment_created': datetime.datetime(2022, 8, 25, 9, 41, 18, tzinfo=datetime.timezone.utc), 'commenter': 'featherchen', 'type': 'User'}, {'comment_id': 955319800, 'comment_body': '@featherchen Would you be able to add braces for both branches of the conditional statement? We tend to follow the [Kernel Coding Style](https://www.kernel.org/doc/html/latest/process/coding-style.html?highlight=coding+style#placing-braces-and-spaces) in CRIU.', 'comment_created': datetime.datetime(2022, 8, 25, 19, 2, 41, tzinfo=datetime.timezone.utc), 'commenter': 'rst0git', 'type': 'User'}, {'comment_id': 955625397, 'comment_body': 'Sure, I have added them.\r\nbtw, is there any  auto way to do this (similar to make indent)', 'comment_created': datetime.datetime(2022, 8, 26, 3, 50, 17, tzinfo=datetime.timezone.utc), 'commenter': 'featherchen', 'type': 'User'}, {'comment_id': 956981563, 'comment_body': '> btw, is there any auto way to do this (similar to make indent)\r\n\r\nI believe no, there is no automatic way to enforce this. The clang-format 15 have only ""use brackets everywhere"" option which is not what LKCS says.', 'comment_created': datetime.datetime(2022, 8, 29, 7, 28, 43, tzinfo=datetime.timezone.utc), 'commenter': 'Snorch', 'type': 'User'}, {'comment_id': 958997500, 'comment_body': 'We know exact size that we want to copy and so we have to return an error if sendfail return 0. Do I miss something?', 'comment_created': datetime.datetime(2022, 8, 30, 22, 50, 36, tzinfo=datetime.timezone.utc), 'commenter': 'avagin', 'type': 'User'}, {'comment_id': 959005754, 'comment_body': ""type casting isn't required here.\r\npls don't set variables in if statements.\r\n```\r\nfiemap = xrealloc(fiemap, sizeof(struct fiemap) + extents_size));\r\nif (!fiemap)\r\n    return -1;\r\n```\r\n"", 'comment_created': datetime.datetime(2022, 8, 30, 23, 9, 46, tzinfo=datetime.timezone.utc), 'commenter': 'avagin', 'type': 'User'}, {'comment_id': 959006222, 'comment_body': 'you can use xzalloc... do we really need to zero fiemap here?', 'comment_created': datetime.datetime(2022, 8, 30, 23, 10, 48, tzinfo=datetime.timezone.utc), 'commenter': 'avagin', 'type': 'User'}, {'comment_id': 959006899, 'comment_body': ""It looks like all these code has been copy-pasted from https://github.com/ColinIanKing/debug-code/blob/master/fiemap/fiemap.c#L71\r\n\r\nIt isn't bad, but we need to reformat according with the criu coding style..."", 'comment_created': datetime.datetime(2022, 8, 30, 23, 12, 26, tzinfo=datetime.timezone.utc), 'commenter': 'avagin', 'type': 'User'}, {'comment_id': 959008268, 'comment_body': 'FS_IOC_FIEMAP fails if fm_extent_count is greater than FIEMAP_MAX_EXTENTS:\r\nhttps://elixir.bootlin.com/linux/latest/source/fs/ioctl.c#L212\r\n', 'comment_created': datetime.datetime(2022, 8, 30, 23, 15, 43, tzinfo=datetime.timezone.utc), 'commenter': 'avagin', 'type': 'User'}, {'comment_id': 959009160, 'comment_body': ""FS_IOC_FIEMAP returns -EOPNOTSUPP if a file system doesn't support extents."", 'comment_created': datetime.datetime(2022, 8, 30, 23, 17, 39, tzinfo=datetime.timezone.utc), 'commenter': 'avagin', 'type': 'User'}, {'comment_id': 963525812, 'comment_body': ""Thanks for the reminder, I have added this check so criu can fall back to original way if a file system doesn't support extents.\r\n"", 'comment_created': datetime.datetime(2022, 9, 6, 10, 13, 24, tzinfo=datetime.timezone.utc), 'commenter': 'featherchen', 'type': 'User'}, {'comment_id': 963526780, 'comment_body': 'I am sorry about the wrong coding style, I hope now it looks better after the new patch.', 'comment_created': datetime.datetime(2022, 9, 6, 10, 14, 29, tzinfo=datetime.timezone.utc), 'commenter': 'featherchen', 'type': 'User'}, {'comment_id': 963528499, 'comment_body': ""Thanks, I don't know that earlier.\r\nI have used it in the new patch."", 'comment_created': datetime.datetime(2022, 9, 6, 10, 16, 24, tzinfo=datetime.timezone.utc), 'commenter': 'featherchen', 'type': 'User'}, {'comment_id': 963528814, 'comment_body': 'Thanks. Fixed', 'comment_created': datetime.datetime(2022, 9, 6, 10, 16, 46, tzinfo=datetime.timezone.utc), 'commenter': 'featherchen', 'type': 'User'}, {'comment_id': 965336394, 'comment_body': 'Looks like a leftover - printing error on successful codepath. -> Please remove.', 'comment_created': datetime.datetime(2022, 9, 7, 22, 0, 32, tzinfo=datetime.timezone.utc), 'commenter': 'Snorch', 'type': 'User'}, {'comment_id': 965338757, 'comment_body': 'Please remove leftovers.', 'comment_created': datetime.datetime(2022, 9, 7, 22, 4, 53, tzinfo=datetime.timezone.utc), 'commenter': 'Snorch', 'type': 'User'}, {'comment_id': 965346204, 'comment_body': 'We need a rename here. From just ""fiemap""/""use_fiemap"" it is not clear what the option is intended to do.\r\n\r\nIt enables fiemap mode of saving sparce ghost files. so let\'s call it ""ghost-fiemap"" and use ""ghost_fiemap"" field name.', 'comment_created': datetime.datetime(2022, 9, 7, 22, 19, 38, tzinfo=datetime.timezone.utc), 'commenter': 'Snorch', 'type': 'User'}, {'comment_id': 965358624, 'comment_body': 'It does not work like this.\r\n\r\nFrom ioctl man:\r\n```\r\nOn error, -1 is returned, and errno is set to  indicate  the\r\n       error.\r\n```\r\n\r\nSo you return -1 on any error here, thus the check for -EOPNOTSUP in dump_ghost_file would never be true.\r\n\r\nInstead of returning ret, you need to check errno variable here and then return e.g. -EOPNOTSUPP if errno is EOPNOTSUPP, and in other cases return -1.\r\n\r\nSee an example here https://github.com/checkpoint-restore/criu/blob/criu-dev/criu/kerndat.c#L64 on how you normally check errno from glibc call.', 'comment_created': datetime.datetime(2022, 9, 7, 22, 46, 39, tzinfo=datetime.timezone.utc), 'commenter': 'Snorch', 'type': 'User'}, {'comment_id': 965370253, 'comment_body': ""Fiemap returns page-alligned extents, so if the extent is only partially initialized send file can return 0 in the middle. Example:\r\n\r\n```\r\necho test > testfile\r\n\r\nsync\r\n\r\nfilefrag -v testfile\r\nFilesystem type is: 9123683e\r\nFile size of testfile is 5 (1 block of 4096 bytes)\r\n ext:     logical_offset:        physical_offset: length:   expected: flags:\r\n   0:        0..    4095:          0..      4095:   4096:             last,not_aligned,inline,eof\r\ntestfile: 1 extent found\r\n\r\ntouch testcopy\r\n\r\nxfs_io -c 'sendfile -i testfile 0 4096' testcopy\r\nsent 5/4096 bytes at offset 0\r\n5,000000 bytes, 1 ops; 0.0000 sec (180,845 KiB/sec and 37037,0370 ops/sec)\r\n\r\nxfs_io -c 'sendfile -i testfile 5 4091' testcopy\r\nsent 0/4091 bytes at offset 5\r\n0,000000 bytes, 0 ops; 0.0000 sec (0,000000 bytes/sec and 0,0000 ops/sec)\r\n```\r\n\r\nSo for convenience of passing fiemap extents directly to sendfile we need to handle 0 return as success even if len is not zero.\r\n\r\n@featherchen  please add this example to your patch commit message."", 'comment_created': datetime.datetime(2022, 9, 7, 23, 8, 10, tzinfo=datetime.timezone.utc), 'commenter': 'Snorch', 'type': 'User'}, {'comment_id': 965510959, 'comment_body': 'Thanks, fixed', 'comment_created': datetime.datetime(2022, 9, 8, 5, 20, 2, tzinfo=datetime.timezone.utc), 'commenter': 'featherchen', 'type': 'User'}, {'comment_id': 965511024, 'comment_body': 'Thanks, fixed', 'comment_created': datetime.datetime(2022, 9, 8, 5, 20, 12, tzinfo=datetime.timezone.utc), 'commenter': 'featherchen', 'type': 'User'}, {'comment_id': 965511476, 'comment_body': ""OK, that's more clear, I have renamed it in the next commit.\r\n"", 'comment_created': datetime.datetime(2022, 9, 8, 5, 21, 16, tzinfo=datetime.timezone.utc), 'commenter': 'featherchen', 'type': 'User'}, {'comment_id': 965514783, 'comment_body': ""Oh, That's my miss, thanks for pointing that out for me.\r\nIs that OK I just return -errno instead of -1?\r\n```C\r\nret = ioctl(fd, FS_IOC_FIEMAP, fiemap_buf);\r\nif (ret < 0) {\r\n\tret = errno;\r\n\tgoto out;\r\n} else if (fiemap_buf->fm_mapped_extents == 0)\r\n\tgoto out;\r\n```"", 'comment_created': datetime.datetime(2022, 9, 8, 5, 28, 27, tzinfo=datetime.timezone.utc), 'commenter': 'featherchen', 'type': 'User'}, {'comment_id': 965582066, 'comment_body': ""Technically you can. Though I don't like returning custom exit codes from function when those exit codes would not be used. We only care about errno == EOPNOTSUP, so please return -1 in all other cases, it would be much less confusing when we later read this code."", 'comment_created': datetime.datetime(2022, 9, 8, 7, 7, 12, tzinfo=datetime.timezone.utc), 'commenter': 'Snorch', 'type': 'User'}, {'comment_id': 967614844, 'comment_body': 'Sure, I have changed it.\r\n', 'comment_created': datetime.datetime(2022, 9, 10, 7, 40, 18, tzinfo=datetime.timezone.utc), 'commenter': 'featherchen', 'type': 'User'}, {'comment_id': 967614991, 'comment_body': 'This issue should be disappeared after using fiemap with fixed number of chunks (512) per call, please see the updated patch.', 'comment_created': datetime.datetime(2022, 9, 10, 7, 41, 55, tzinfo=datetime.timezone.utc), 'commenter': 'featherchen', 'type': 'User'}, {'comment_id': 967615050, 'comment_body': 'Thanks, I have added it to the commit message, please check.', 'comment_created': datetime.datetime(2022, 9, 10, 7, 42, 49, tzinfo=datetime.timezone.utc), 'commenter': 'featherchen', 'type': 'User'}, {'comment_id': 971689588, 'comment_body': 'Heh, as we have FIEMAP_DEFAULT true, we probably wanted to have --no-ghost-fiemap in hole00 test instead.', 'comment_created': datetime.datetime(2022, 9, 15, 8, 30, 24, tzinfo=datetime.timezone.utc), 'commenter': 'Snorch', 'type': 'User'}, {'comment_id': 974851220, 'comment_body': 'Indeed. Thanks for pointing out.\r\nFixed.', 'comment_created': datetime.datetime(2022, 9, 20, 3, 25, 47, tzinfo=datetime.timezone.utc), 'commenter': 'featherchen', 'type': 'User'}, {'comment_id': 985143274, 'comment_body': '@featherchen Would you be able to move these two include before `#include <sys/mount.h>`?\r\nThis should fix the CI errors we see for Arch Linux and Fedora Rawhide.', 'comment_created': datetime.datetime(2022, 10, 1, 20, 49, 31, tzinfo=datetime.timezone.utc), 'commenter': 'rst0git', 'type': 'User'}, {'comment_id': 986076902, 'comment_body': 'OK, I have done this change.\r\nHowever, it seems somehow cause more errors happends(looks like related to `<sys/mount.h>`)', 'comment_created': datetime.datetime(2022, 10, 3, 18, 0, 57, tzinfo=datetime.timezone.utc), 'commenter': 'featherchen', 'type': 'User'}, {'comment_id': 999575042, 'comment_body': ""@Snorch it returns 0 only if an uninitialized extent is beyond the file size, doesn't it?"", 'comment_created': datetime.datetime(2022, 10, 19, 14, 51, 18, tzinfo=datetime.timezone.utc), 'commenter': 'avagin', 'type': 'User'}, {'comment_id': 999581082, 'comment_body': 'pls use the exit_code pattern. We have many examples of using it in the CRIU code. ', 'comment_created': datetime.datetime(2022, 10, 19, 14, 55, 52, tzinfo=datetime.timezone.utc), 'commenter': 'avagin', 'type': 'User'}, {'comment_id': 1009392726, 'comment_body': ""OK, I've changed the code to exit_code pattern.\r\n"", 'comment_created': datetime.datetime(2022, 10, 31, 13, 0, 36, tzinfo=datetime.timezone.utc), 'commenter': 'featherchen', 'type': 'User'}, {'comment_id': 1011300988, 'comment_body': '@avagin Yes, and we call sendfile on uninitialized extent beyond the file size due to 1) fiemap 4k granularity 2) copy_chunk_from_file retry logic when len is yet not 0', 'comment_created': datetime.datetime(2022, 11, 2, 7, 22, 48, tzinfo=datetime.timezone.utc), 'commenter': 'Snorch', 'type': 'User'}, {'comment_id': 1012316059, 'comment_body': ""@featherchen We've discussed it with Andrei.\r\n\r\nCurrent approach is to make copy_chunk_from_file() do not fail on chunk which end is beyond the end of file.\r\n\r\nInstead of it we can just never provide such a chunk. We can cut the chunk at the end of the file before passing it to copy_chunk_from_file() so that we would never have 0 returned from sendfile().\r\n\r\nThis is more preferable because it allows us to have copy_chunk_from_file() with more strict error handling and fail in case we didn't write as many bytes as were asked in function arguments.\r\n\r\nSomething like below should work:\r\n```\r\ndiff --git a/criu/files-reg.c b/criu/files-reg.c\r\nindex 2b9cbc3e3..9a80ee215 100644\r\n--- a/criu/files-reg.c\r\n+++ b/criu/files-reg.c\r\n@@ -278,6 +278,10 @@ static int copy_file_to_chunks_fiemap(int fd, struct cr_img *img, size_t file_si\r\n                                goto out;\r\n                        }\r\n \r\n+                       if (ce.off > file_size)\r\n+                               ce.len = 0;\r\n+                       else if (ce.off + ce.len > file_size)\r\n+                               ce.len = file_size - ce.off;\r\n                        if (copy_chunk_from_file(fd, img_raw_fd(img), ce.off, ce.len)) {\r\n                                exit_code = -1;\r\n                                goto out;\r\n```"", 'comment_created': datetime.datetime(2022, 11, 2, 21, 32, 2, tzinfo=datetime.timezone.utc), 'commenter': 'Snorch', 'type': 'User'}]","[{'commit_sha': 'ea2cbd70e5c0cb34aae8570f4919fc3a64ce20c5', 'committer_username': 'featherchen', 'committer_name': 'Liang Chun', 'committer_email': 'liangchun@apache.org', 'commit_date': datetime.datetime(2019, 11, 19, 10, 43, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b948ff763dd9697ab4abb0c7ee491243868aa042', 'committer_username': 'featherchen', 'committer_name': 'Liang Chun', 'committer_email': 'liangchun@apache.org', 'commit_date': datetime.datetime(2019, 11, 19, 10, 43, 45, tzinfo=datetime.timezone.utc)}]",Liang Chun,57944334,liangchun@apache.org,User,,19,,1,5

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
15999638,criu,checkpoint-restore/criu,C,570,2827,67,206,11469,211,10,26,"[{'id': 1036326548, 'number': 1963, 'closed': datetime.datetime(2022, 11, 30, 17, 28, 2, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 25, 6, 50, 13, tzinfo=datetime.timezone.utc), 'time_taken': 8419069.0, 'time_delta': '97 days, 10:37:49', 'additions': 237, 'deletions': 4, 'state': 'closed'}, {'id': 1006486469, 'number': 1944, 'closed': datetime.datetime(2022, 8, 4, 11, 27, 42, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 24, 7, 30, 22, tzinfo=datetime.timezone.utc), 'time_taken': 964640.0, 'time_delta': '11 days, 3:57:20', 'additions': 160, 'deletions': 3, 'state': 'closed'}]"
