pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
663714990,Bounding Box Camera,"## üéâ New feature

related to [#135](https://github.com/ignitionrobotics/ign-sensors/issues/135)

## Summary
Bounding boxes camera to extract labeled item's bounding boxes from the scene using OGRE 2.1

## Visible Bounding Boxes
- Supports visible bounding boxes which shows a box on the visible part of the item (box dosen't include the occluded part of the object) (datasets ex: COCO & PASCAL VOC datasets) 
- Idea: Rendering a map which contains ogre Ids of objects, and by looping on its pixels to get the the objects boundaries 

<img src=""https://user-images.githubusercontent.com/35613645/121053995-37454e00-c7bc-11eb-809a-5fd556494039.gif"" width=""640"" height=""480"" />


## Full Bounding Boxes
- Supports full bbox which shows all the object boundaries even if occluded (datasets ex: KITTI, nuscenes)
- Idea: accessing all item's vertices and projecting them to get the boundaries of the object, and check visibility by rendering a map which contains ogre Ids of objects

<img src=""https://user-images.githubusercontent.com/35613645/121054371-91deaa00-c7bc-11eb-8040-8de7a7eec221.gif"" width=""640"" height=""480"" />


## Features:
- The user label each item by setting its UserData
- Each unlabeled item is considered as a background (not finished yet)
- Added example in ign-rendering/examples to try it easily
- User can change the mode (Visible / Full) through the rendering API

",True,334,https://api.github.com/repos/gazebosim/gz-rendering/pulls/334,https://github.com/gazebosim/gz-rendering/pull/334,closed,3820,10,27,57,53,56,1,2,[{'name': 'üèØ fortress'}],2021-06-07 16:23:01+00:00,2022-06-15 17:01:23+00:00,32229502.0,"373 days, 0:38:22","[{'comment_id': 647923514, 'comment_body': 'There is a problem in reading UserData of the visual, when the visual has no user data of the label key ( ""label"" ) .. ```the std::get<int>(labelKey) ```\r\nreturns 0 and dosn\'t through the bad_variant_access exception\r\nAny idea about why is that ?', 'comment_created': datetime.datetime(2021, 6, 9, 2, 39, 55, tzinfo=datetime.timezone.utc), 'commenter': 'AmrElsersy', 'type': 'User'}, {'comment_id': 652348292, 'comment_body': ""You could use `ignition::math::AxisAlignedBox` instead of creating a new type. That's meant for 3D boxes, but I think it should be ok to leave the Z dimension as zero when doing 2D :thinking: "", 'comment_created': datetime.datetime(2021, 6, 16, 4, 52, 3, tzinfo=datetime.timezone.utc), 'commenter': 'chapulina', 'type': 'User'}, {'comment_id': 652806045, 'comment_body': '@chapulina \r\nIt only provides the bounding boxes, that RGB image because in the example I have 2 cameras, and I draw the bboxes on the image of the rgb camera (just for seek of visualization and trying the example)\r\n\r\nmmmm, yeah I have a plan to see how to provide the 3d boxes with the lidar data, but that after I finish all thing in the project :D .. do you think we should support 3d boxes with images instead of lidar ?\r\n\r\nabout the `math::AxisAlignedBox ` .. I created a new struct because I had to store the label of the bounding box with the dimensions ', 'comment_created': datetime.datetime(2021, 6, 16, 15, 31, 29, tzinfo=datetime.timezone.utc), 'commenter': 'AmrElsersy', 'type': 'User'}, {'comment_id': 653175978, 'comment_body': ""> It only provides the bounding boxes, that RGB image because in the example I have 2 cameras,\r\n\r\nAh perfect!\r\n\r\n> do you think we should support 3d boxes with images instead of lidar ?\r\n\r\nWe have access to the ground truth from simulation, so I think we could just get the 3D bounding box of the visuals that are within a given volume (like a camera frustum?). If we want to take occlusion into account, I think we need to define the observation point, like a camera's image plane.\r\n\r\n> I created a new struct because I had to store the label of the bounding box with the dimensions\r\n\r\nYeah I noticed that. You could use the `AxisAlignedBox` inside your struct. The advantage is that the class offers various helper functions that could be useful for users."", 'comment_created': datetime.datetime(2021, 6, 17, 2, 16, 39, tzinfo=datetime.timezone.utc), 'commenter': 'chapulina', 'type': 'User'}, {'comment_id': 671091677, 'comment_body': '@adlarkin ', 'comment_created': datetime.datetime(2021, 7, 16, 9, 9, 5, tzinfo=datetime.timezone.utc), 'commenter': 'AmrElsersy', 'type': 'User'}, {'comment_id': 671934391, 'comment_body': 'nit: please make all uppercase', 'comment_created': datetime.datetime(2021, 7, 19, 1, 31, 5, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 671934464, 'comment_body': '```suggestion\r\n#include ""ignition/rendering/Camera.hh""\r\n\r\nnamespace ignition\r\n```\r\nnit: remove extra whitespace', 'comment_created': datetime.datetime(2021, 7, 19, 1, 31, 29, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 671934852, 'comment_body': '```suggestion\r\n    enum class BoundingBoxType {\r\n      /// FullBox2D: 2D box that shows the full box of occluded objects\r\n```\r\nnit: remove blank line', 'comment_created': datetime.datetime(2021, 7, 19, 1, 33, 9, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 671935139, 'comment_body': ""The variable names in the enum should all be uppercase - here's an example: https://github.com/ignitionrobotics/ign-rendering/blob/7b9ac811c6f6489935681047987291c4cb938b6b/include/ignition/rendering/ShaderType.hh#L34-L53\r\n\r\nYou'll also need to update any other repositories that use this enum to be uppercase as well :grimacing: "", 'comment_created': datetime.datetime(2021, 7, 19, 1, 34, 31, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 671935930, 'comment_body': 'Now that we have various bounding box types in https://github.com/ignitionrobotics/ign-msgs/pull/165, can we replace this struct with the message types used there? It seems like creating a new struct for this is unnecessary.', 'comment_created': datetime.datetime(2021, 7, 19, 1, 38, 6, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 671936080, 'comment_body': '```suggestion\r\n    /// \\class BoundingBoxCamera BoundingBoxCamera.hh ignition/rendering/BoundingBoxCamera.hh\r\n```', 'comment_created': datetime.datetime(2021, 7, 19, 1, 38, 54, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 671936322, 'comment_body': '```suggestion\r\n      /// \\brief Destructor\r\n      public: virtual ~BoundingBoxCamera();\r\n```\r\nWe should declare class methods in the `.hh` file and then place the implementation in the corresponding `.cc` file', 'comment_created': datetime.datetime(2021, 7, 19, 1, 40, 1, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 671936430, 'comment_body': 'nit: add a constructor for this class?', 'comment_created': datetime.datetime(2021, 7, 19, 1, 40, 25, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 671936571, 'comment_body': ""nit: return a reference here so we don't have to copy the vector?"", 'comment_created': datetime.datetime(2021, 7, 19, 1, 41, 2, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 671936762, 'comment_body': '```suggestion\r\n      public: virtual BoundingBoxType Type() const = 0;\r\n```', 'comment_created': datetime.datetime(2021, 7, 19, 1, 41, 46, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 671936851, 'comment_body': '```suggestion\r\n        const BoundingBox &_box) = 0;\r\n```', 'comment_created': datetime.datetime(2021, 7, 19, 1, 42, 5, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 671937383, 'comment_body': ""Documentation is incorrect, please update it (it's the same documentation for the `CreateBoundingBoxCamera` method with the `_id` parameter, but this method takes a `_name` parameter)"", 'comment_created': datetime.datetime(2021, 7, 19, 1, 44, 36, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 671937481, 'comment_body': '```suggestion\r\n      /// \\brief Create new BoundingBox camera with the given ID and name. If\r\n```', 'comment_created': datetime.datetime(2021, 7, 19, 1, 45, 2, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 671937803, 'comment_body': '```suggestion\r\n                  }\r\n\r\n      /// \\brief Implementation for creating GpuRays sensor.\r\n```\r\nnit: remove extra blank line', 'comment_created': datetime.datetime(2021, 7, 19, 1, 46, 38, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 671938137, 'comment_body': '```suggestion\r\nusing namespace rendering;\r\n\r\nnamespace ignition\r\n```\r\nnit: remove extra blank line', 'comment_created': datetime.datetime(2021, 7, 19, 1, 48, 12, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 671939092, 'comment_body': '```suggestion\r\n      private: const std::string labelKey = ""label"";\r\n```\r\nnit: mark as `const` since this key shouldn\'t ever change', 'comment_created': datetime.datetime(2021, 7, 19, 1, 52, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 671942260, 'comment_body': ""Looking at the code, I don't see anything strange that sticks out to me. Do you have an example setup I can try that replicates the issue? Maybe an SDF file or something like that"", 'comment_created': datetime.datetime(2021, 7, 19, 2, 5, 29, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 674651989, 'comment_body': 'That is because this PR is done before doing the msgs PR\r\nBut it is much simpler to use the struct instead of the msg, as i pass this class everywhere in the code\r\ncan we just keep it ?', 'comment_created': datetime.datetime(2021, 7, 22, 9, 47, 53, tzinfo=datetime.timezone.utc), 'commenter': 'AmrElsersy', 'type': 'User'}, {'comment_id': 674652787, 'comment_body': 'It will not be readable here if it becomes uppercase :D \r\nI see that notation is also used .. https://github.com/ignitionrobotics/ign-gazebo/blob/ign-gazebo5/include/ignition/gazebo/Types.hh#L63\r\n\r\ncan we keep that also :D ', 'comment_created': datetime.datetime(2021, 7, 22, 9, 49, 5, tzinfo=datetime.timezone.utc), 'commenter': 'AmrElsersy', 'type': 'User'}, {'comment_id': 674656313, 'comment_body': 'I need to clear the bounding boxes data inside the class, so i have to return by copy', 'comment_created': datetime.datetime(2021, 7, 22, 9, 54, 28, tzinfo=datetime.timezone.utc), 'commenter': 'AmrElsersy', 'type': 'User'}, {'comment_id': 674738810, 'comment_body': 'is there any problem with using the internal functions of OGRE ??', 'comment_created': datetime.datetime(2021, 7, 22, 12, 12, tzinfo=datetime.timezone.utc), 'commenter': 'AmrElsersy', 'type': 'User'}, {'comment_id': 679591904, 'comment_body': ""I'm not sure, @iche033 what are your thoughts? I would think that we should try to shy away from internal OGRE methods (i.e., ones that start with `_`), but it does seem like they're being used in a few other places in `ign-rendering`."", 'comment_created': datetime.datetime(2021, 7, 30, 1, 46, 34, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 679599808, 'comment_body': 'these should be fine. If possible, use the `_getDerivedPosition` (without `Updated`) version to avoid extra node updates.', 'comment_created': datetime.datetime(2021, 7, 30, 2, 11, 53, tzinfo=datetime.timezone.utc), 'commenter': 'iche033', 'type': 'User'}, {'comment_id': 688733222, 'comment_body': '```suggestion\r\n      /// \\brief Orientation of the 3D box in camera coord.\r\n      /// The 2D boxes are axis aligned (oreintation = 0)\r\n      ignition::math::Quaterniond orientation;\r\n```', 'comment_created': datetime.datetime(2021, 8, 13, 19, 23, 24, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 691494195, 'comment_body': 'make this all uppercase', 'comment_created': datetime.datetime(2021, 8, 18, 18, 13, 1, tzinfo=datetime.timezone.utc), 'commenter': 'iche033', 'type': 'User'}, {'comment_id': 691494800, 'comment_body': 'set to `nullptr`', 'comment_created': datetime.datetime(2021, 8, 18, 18, 13, 53, tzinfo=datetime.timezone.utc), 'commenter': 'iche033', 'type': 'User'}, {'comment_id': 691495060, 'comment_body': 'style nitpick: remove `Get` prefix', 'comment_created': datetime.datetime(2021, 8, 18, 18, 14, 17, tzinfo=datetime.timezone.utc), 'commenter': 'iche033', 'type': 'User'}, {'comment_id': 691495836, 'comment_body': '`Oriented3dBoxes`', 'comment_created': datetime.datetime(2021, 8, 18, 18, 15, 30, tzinfo=datetime.timezone.utc), 'commenter': 'iche033', 'type': 'User'}, {'comment_id': 691496022, 'comment_body': 'can you add some brief comments to describe the tests?', 'comment_created': datetime.datetime(2021, 8, 18, 18, 15, 46, tzinfo=datetime.timezone.utc), 'commenter': 'iche033', 'type': 'User'}, {'comment_id': 691496441, 'comment_body': '`oreinted` -> `oriented`', 'comment_created': datetime.datetime(2021, 8, 18, 18, 16, 23, tzinfo=datetime.timezone.utc), 'commenter': 'iche033', 'type': 'User'}, {'comment_id': 691499372, 'comment_body': 'the `math::Vector3d` and `math::Quaterniond` implements the `<<` operator so you should be able to just do ` << box.center << "" "" << box.size << "" "" << box.orientation`', 'comment_created': datetime.datetime(2021, 8, 18, 18, 20, 53, tzinfo=datetime.timezone.utc), 'commenter': 'iche033', 'type': 'User'}, {'comment_id': 691499586, 'comment_body': 'given', 'comment_created': datetime.datetime(2021, 8, 18, 18, 21, 14, tzinfo=datetime.timezone.utc), 'commenter': 'iche033', 'type': 'User'}, {'comment_id': 691499895, 'comment_body': '`givin` -> `given`', 'comment_created': datetime.datetime(2021, 8, 18, 18, 21, 42, tzinfo=datetime.timezone.utc), 'commenter': 'iche033', 'type': 'User'}, {'comment_id': 691501789, 'comment_body': 'can we make functions that are not used outside this class `private`? Same applies to the `OgreBoundingBoxCamera` class', 'comment_created': datetime.datetime(2021, 8, 18, 18, 24, 30, tzinfo=datetime.timezone.utc), 'commenter': 'iche033', 'type': 'User'}, {'comment_id': 691502383, 'comment_body': 'can you add an entry for `s`?', 'comment_created': datetime.datetime(2021, 8, 18, 18, 25, 33, tzinfo=datetime.timezone.utc), 'commenter': 'iche033', 'type': 'User'}, {'comment_id': 691503018, 'comment_body': 'change this to all to uppercase', 'comment_created': datetime.datetime(2021, 8, 18, 18, 26, 29, tzinfo=datetime.timezone.utc), 'commenter': 'iche033', 'type': 'User'}, {'comment_id': 691504703, 'comment_body': ""let's make these uppercase for consistency within ign-rendering. It should also have a prefix, i.e. `BBT_FULLBOX2D`"", 'comment_created': datetime.datetime(2021, 8, 18, 18, 28, 54, tzinfo=datetime.timezone.utc), 'commenter': 'iche033', 'type': 'User'}, {'comment_id': 691505219, 'comment_body': '`SEGMENTATION` -> `BOUNDINGBOX`', 'comment_created': datetime.datetime(2021, 8, 18, 18, 29, 41, tzinfo=datetime.timezone.utc), 'commenter': 'iche033', 'type': 'User'}, {'comment_id': 691508339, 'comment_body': 'is selection buffer needed?', 'comment_created': datetime.datetime(2021, 8, 18, 18, 34, 19, tzinfo=datetime.timezone.utc), 'commenter': 'iche033', 'type': 'User'}, {'comment_id': 691509867, 'comment_body': 'I think only the `OgreBitwise.h` is needed here and others can be removed?', 'comment_created': datetime.datetime(2021, 8, 18, 18, 36, 37, tzinfo=datetime.timezone.utc), 'commenter': 'iche033', 'type': 'User'}, {'comment_id': 691514806, 'comment_body': 'add separator line:\r\n\r\n```\r\n//////////////////////////////////////////////////\r\n```', 'comment_created': datetime.datetime(2021, 8, 18, 18, 44, 3, tzinfo=datetime.timezone.utc), 'commenter': 'iche033', 'type': 'User'}, {'comment_id': 691559233, 'comment_body': 'no', 'comment_created': datetime.datetime(2021, 8, 18, 19, 54, 16, tzinfo=datetime.timezone.utc), 'commenter': 'AmrElsersy', 'type': 'User'}, {'comment_id': 693240790, 'comment_body': '`NORMALCAMERA_INDEX` and `BOUNDINGBOX_INDEX` are not used and can be removed?', 'comment_created': datetime.datetime(2021, 8, 20, 22, 6, 34, tzinfo=datetime.timezone.utc), 'commenter': 'iche033', 'type': 'User'}, {'comment_id': 693244079, 'comment_body': '`oreinted` -> `oriented`', 'comment_created': datetime.datetime(2021, 8, 20, 22, 17, 8, tzinfo=datetime.timezone.utc), 'commenter': 'iche033', 'type': 'User'}, {'comment_id': 693244405, 'comment_body': 'remove?', 'comment_created': datetime.datetime(2021, 8, 20, 22, 18, 16, tzinfo=datetime.timezone.utc), 'commenter': 'iche033', 'type': 'User'}, {'comment_id': 868446722, 'comment_body': '```suggestion\r\n  mergedBox.Size({static_cast<double>(width), static_cast<double>(height), 0});\r\n  \r\n  mergedBox.Center({static_cast<double>(minX) + width / 2,\r\n      static_cast<double>(minY) + height / 2, 0});\r\n```\r\n\r\nPrevent narrowing conversion warning.', 'comment_created': datetime.datetime(2022, 5, 9, 20, 49, 21, tzinfo=datetime.timezone.utc), 'commenter': 'WilliamLewww', 'type': 'User'}, {'comment_id': 868448153, 'comment_body': '```suggestion\r\n    box.second->Center({static_cast<double>(boundary->minX) + boxWidth / 2,\r\n        static_cast<double>(boundary->minY) + boxHeight / 2, 0});\r\n\r\n    box.second->Size({static_cast<double>(boxWidth),\r\n        static_cast<double>(boxHeight), 0});\r\n```\r\n\r\nPrevent narrowing conversion warning.', 'comment_created': datetime.datetime(2022, 5, 9, 20, 50, 45, tzinfo=datetime.timezone.utc), 'commenter': 'WilliamLewww', 'type': 'User'}, {'comment_id': 888289810, 'comment_body': 'Looks like the issue has to do with calculating the maxVertex. \r\n\r\nThe example crashes when the bottom boundary line touches the bottom of the screen. Unlike the top, when the line reaches the bottom of the screen it either disappears or crashes the application.\r\n\r\nSetting this line to the following code fixes the crash and also bounds the bottom line to the screen.\r\n```\r\n    {uint32_t(minVertex.Y()), uint32_t(maxVertexY() - 1)};\r\n```\r\n\r\n**Update\r\nThe example now only crashes when the bounding boxes are in the top right of the screen.', 'comment_created': datetime.datetime(2022, 6, 2, 18, 59, 29, tzinfo=datetime.timezone.utc), 'commenter': 'WilliamLewww', 'type': 'User'}, {'comment_id': 888367243, 'comment_body': '```suggestion\r\n    {uint32_t(minVertex.X()),\r\n        std::min(this->ImageWidth() - 1, uint32_t(maxVertex.X()))};\r\n```', 'comment_created': datetime.datetime(2022, 6, 2, 20, 1, tzinfo=datetime.timezone.utc), 'commenter': 'WilliamLewww', 'type': 'User'}, {'comment_id': 888367706, 'comment_body': '```suggestion\r\n    {uint32_t(minVertex.Y()),\r\n        std::min(this->ImageHeight() - 1, uint32_t(maxVertex.Y()))};\r\n```', 'comment_created': datetime.datetime(2022, 6, 2, 20, 1, 33, tzinfo=datetime.timezone.utc), 'commenter': 'WilliamLewww', 'type': 'User'}, {'comment_id': 890324179, 'comment_body': 'Worked like a charm! Thanks!', 'comment_created': datetime.datetime(2022, 6, 6, 16, 27, 42, tzinfo=datetime.timezone.utc), 'commenter': 'chapulina', 'type': 'User'}]","[{'commit_sha': '8ffe11de299a58acf3c7d92c0eea8f44a9ea9a8a', 'committer_username': 'AmrElsersy', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 19, 21, 42, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '40a15d52c2229c3af3444cfa77785929ad1fbf82', 'committer_username': 'AmrElsersy', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 19, 21, 42, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aa027b7621ab8b158a27361732e9fb8c2ad63b4a', 'committer_username': 'AmrElsersy', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 19, 21, 42, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dee519d5556da2ac960597fb0cf29566803c4ffe', 'committer_username': 'AmrElsersy', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 19, 21, 42, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9007ae1831573e6d75aad38da9c2b93d19ac5e2b', 'committer_username': 'AmrElsersy', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 19, 21, 42, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '673cb6dc0e7f6e350256ffcd7991ba6a93cbf58a', 'committer_username': 'AmrElsersy', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 19, 21, 42, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '15bacc7ac09bf56a55674175b71b6e8a3a7455bd', 'committer_username': 'AmrElsersy', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 19, 21, 42, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd7905ae6e6acba433ced60bfb62d8250fc04ef9d', 'committer_username': 'AmrElsersy', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 19, 21, 42, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2c3433131cd3d70abf48b0ff912e4e34f043ff72', 'committer_username': 'AmrElsersy', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 19, 21, 42, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dd6e64aea30581e6533eb2edf477fffb7ca4af68', 'committer_username': 'AmrElsersy', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 19, 21, 42, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5692a255aff9eb785a299bf16b1f37572c9e8517', 'committer_username': 'AmrElsersy', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 19, 21, 42, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '668c56c58f9773eb992a2fd80a7e3cde0fabaea8', 'committer_username': 'AmrElsersy', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 19, 21, 42, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '22733276c8e5eda4109feb6a6164e59ee638d8cd', 'committer_username': 'AmrElsersy', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 19, 21, 42, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1e09827af75086d5ce980a8cacd61f5f1ca71fbc', 'committer_username': 'AmrElsersy', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 19, 21, 42, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '930573de33027317e683cb8610b2125975155647', 'committer_username': 'AmrElsersy', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 19, 21, 42, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '323e45663ddd76f10f19be4f331541ff212b90ce', 'committer_username': 'AmrElsersy', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 19, 21, 42, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '653d60af0a1f38ddf67b55392350cb739fbad2b1', 'committer_username': 'AmrElsersy', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 19, 21, 42, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'adbb7bb500f087fe2c30b0f005ea6082d831ac75', 'committer_username': 'AmrElsersy', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 19, 21, 42, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '872c7f0b2b0fbc0ab8416b2465e6339b6fb8af5b', 'committer_username': 'AmrElsersy', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 19, 21, 42, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '19db42516b63041741f517d9ba6fca7a8d3a2f1a', 'committer_username': 'AmrElsersy', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 19, 21, 42, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fa70909c0f6cb693ff995dd63f6f163fbb413133', 'committer_username': 'AmrElsersy', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 19, 21, 42, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e7cfb647bd92758cafe352741a78706b85d477c9', 'committer_username': 'AmrElsersy', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 19, 21, 42, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4e80532fc65d714e1b8a19f11787c07ae83f10a5', 'committer_username': 'adlarkin', 'committer_name': 'Ashton Larkin', 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 2, 17, 1, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e544c9c0a47f2bdcee8bd6a907b02bc2c5448370', 'committer_username': 'AmrElsersy', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 19, 21, 42, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a4da149deb791aa2e524cde6009de8ff617b4f37', 'committer_username': 'AmrElsersy', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 19, 21, 42, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ce201f7fde19dac01fa4633855b7116a6ca2902c', 'committer_username': 'AmrElsersy', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 19, 21, 42, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '25ac55a87f856730f3cea956a9ce47786ac5876b', 'committer_username': 'AmrElsersy', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 19, 21, 42, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd0a300a8d4b8f6cf3b58e77de61997692670a3af', 'committer_username': 'AmrElsersy', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 19, 21, 42, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '73a6e553ba84c88c7c05bbae99a9934a66e46ee2', 'committer_username': 'AmrElsersy', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 19, 21, 42, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '132bc7ed6dabb96d9715a814861510c004893627', 'committer_username': 'adlarkin', 'committer_name': 'Ashton Larkin', 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 2, 17, 1, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c526174a39a8525099cf7c439d2431909eafb623', 'committer_username': 'AmrElsersy', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 19, 21, 42, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6a7cc112892261a514e852c0562add5b6300a465', 'committer_username': 'AmrElsersy', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 19, 21, 42, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8ce2c830b651b230d791240fbd45dddbec0ba496', 'committer_username': 'AmrElsersy', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 19, 21, 42, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '61ef3365634126218becfbdafe49a7715c775ebc', 'committer_username': 'adlarkin', 'committer_name': 'Ashton Larkin', 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 2, 17, 1, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': '929deb7fc6f34970d21c23aa6afb3f20c7094ede', 'committer_username': 'adlarkin', 'committer_name': 'Ashton Larkin', 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 2, 17, 1, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5467cd981e207a3618486c82c1bb587fce39f145', 'committer_username': 'adlarkin', 'committer_name': 'Ashton Larkin', 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 2, 17, 1, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8a4008b2be3f0fddd50e9265b57d61f3bc1089f5', 'committer_username': 'adlarkin', 'committer_name': 'Ashton Larkin', 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 2, 17, 1, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': '399b7d83cecb632839bf12d63b8b820252968dea', 'committer_username': 'adlarkin', 'committer_name': 'Ashton Larkin', 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 2, 17, 1, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7d4d6406ac73e3dacfeb03fd09ff0aa20e60fd47', 'committer_username': 'adlarkin', 'committer_name': 'Ashton Larkin', 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 2, 17, 1, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f7d0fecc60450ad9381b5022e41bd298630729bf', 'committer_username': 'AmrElsersy', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 19, 21, 42, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4162fd7b95969691d6ef4918d795172a66e3053a', 'committer_username': 'AmrElsersy', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 19, 21, 42, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '950d32c61bcf020c923bf1fd46b7029d3bb4a956', 'committer_username': 'adlarkin', 'committer_name': 'Ashton Larkin', 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 2, 17, 1, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dd2a78131502d7a97dbc32009af83e4a48dd3c92', 'committer_username': 'adlarkin', 'committer_name': 'Ashton Larkin', 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 2, 17, 1, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': '301a83b4fa8ca9db846bdefa0a88272a884554e5', 'committer_username': 'chapulina', 'committer_name': 'Louise Poubel', 'committer_email': None, 'commit_date': datetime.datetime(2013, 10, 22, 22, 20, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '226b9fa82e9ad13d54affb98e7e7141d16e95ffc', 'committer_username': 'chapulina', 'committer_name': 'Louise Poubel', 'committer_email': None, 'commit_date': datetime.datetime(2013, 10, 22, 22, 20, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4a60d7921ac388cb62ce8be4b70fd97c6fa1e5e6', 'committer_username': 'chapulina', 'committer_name': 'Louise Poubel', 'committer_email': None, 'commit_date': datetime.datetime(2013, 10, 22, 22, 20, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '024c4a7de3ae0649383ca40e3316cb738d6b4a4d', 'committer_username': 'chapulina', 'committer_name': 'Louise Poubel', 'committer_email': None, 'commit_date': datetime.datetime(2013, 10, 22, 22, 20, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '59f6ca260f55c8b54bf4efa970ef62b0ae3a6f73', 'committer_username': 'chapulina', 'committer_name': 'Louise Poubel', 'committer_email': None, 'commit_date': datetime.datetime(2013, 10, 22, 22, 20, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5e009ac1d4121c1c1664a671a8a1001c4978f586', 'committer_username': 'chapulina', 'committer_name': 'Louise Poubel', 'committer_email': None, 'commit_date': datetime.datetime(2013, 10, 22, 22, 20, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c682a5da48fe9e0b8338dcaa2c4f2864bd8349b7', 'committer_username': 'chapulina', 'committer_name': 'Louise Poubel', 'committer_email': None, 'commit_date': datetime.datetime(2013, 10, 22, 22, 20, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f77c40a49fc66dc3405409d876dea6b57f2791ff', 'committer_username': 'chapulina', 'committer_name': 'Louise Poubel', 'committer_email': None, 'commit_date': datetime.datetime(2013, 10, 22, 22, 20, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '24204799f3dc7eac2159af5896fab9a704f36ad4', 'committer_username': 'chapulina', 'committer_name': 'Louise Poubel', 'committer_email': None, 'commit_date': datetime.datetime(2013, 10, 22, 22, 20, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '729ad3385ea6789fc96b697d82490f36cf969e18', 'committer_username': 'chapulina', 'committer_name': 'Louise Poubel', 'committer_email': None, 'commit_date': datetime.datetime(2013, 10, 22, 22, 20, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4c638d2da3ecb6818af9118786193881ae38dff1', 'committer_username': 'chapulina', 'committer_name': 'Louise Poubel', 'committer_email': None, 'commit_date': datetime.datetime(2013, 10, 22, 22, 20, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '36d4142910085843ea47e84ea4c7ff4caee306c8', 'committer_username': 'chapulina', 'committer_name': 'Louise Poubel', 'committer_email': None, 'commit_date': datetime.datetime(2013, 10, 22, 22, 20, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd3f80b9e0d13d7fb7517972b5e38da3724fd7aed', 'committer_username': 'chapulina', 'committer_name': 'Louise Poubel', 'committer_email': None, 'commit_date': datetime.datetime(2013, 10, 22, 22, 20, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '47b4456efcd2de0ba0f69522cf18eb023c7870a4', 'committer_username': 'chapulina', 'committer_name': 'Louise Poubel', 'committer_email': None, 'commit_date': datetime.datetime(2013, 10, 22, 22, 20, 7, tzinfo=datetime.timezone.utc)}]",,35613645,,User,,53,,9,85
656932079,Segmentation Camera,"### üéâ New feature

related to [#134](https://github.com/ignitionrobotics/ign-sensors/issues/134)

## Summary
Segmentation Camera to capture semantic information, Implemented using OGRE 2 by using the material switching to provide Semantic & Panoptic Segmentation

## Semantic Segmentation

<img src=""https://user-images.githubusercontent.com/35613645/120026932-0f532f00-bff3-11eb-95b0-3bf51f87a6c5.gif"" width=""640"" height=""480"" />


- Pixels of same label from different items, have the same color & id


## Panoptic Segmentation
<img src=""https://user-images.githubusercontent.com/35613645/120026944-137f4c80-bff3-11eb-9ad8-ac03d7624766.png"" width=""640"" height=""480"" />

- Pixels of same label from different items, have different color & id
- 1 channel for label id & 2 channels for instance id


## Features:
- Supports both Semantic Ids map(where each pixel has a value = label id) & Colored map(where each pixel has a color) for visualization purposes 
- The user label each item by setting its UserData
- Each unlabeled item is considered as a background
- Added example in ign-rendering/examples to try it easily

",True,329,https://api.github.com/repos/gazebosim/gz-rendering/pulls/329,https://github.com/gazebosim/gz-rendering/pull/329,closed,2597,4,25,34,8,213,2,2,"[{'name': 'beta'}, {'name': 'üèØ fortress'}]",2021-05-28 18:47:28+00:00,2021-09-20 22:10:41+00:00,9948193.0,"115 days, 3:23:13","[{'comment_id': 641760519, 'comment_body': '```suggestion\r\n      /// \\brief Create new segmentation camera. A unique ID and name will\r\n```', 'comment_created': datetime.datetime(2021, 5, 28, 19, 2, 30, tzinfo=datetime.timezone.utc), 'commenter': 'mjcarroll', 'type': 'User'}, {'comment_id': 641760642, 'comment_body': '```suggestion\r\n      /// \\brief Create new segmentation camera with the given ID. A unique name\r\n```', 'comment_created': datetime.datetime(2021, 5, 28, 19, 2, 39, tzinfo=datetime.timezone.utc), 'commenter': 'mjcarroll', 'type': 'User'}, {'comment_id': 641760799, 'comment_body': '```suggestion\r\n      /// \\brief Create new segmentation camera with the given name. A unique ID\r\n```', 'comment_created': datetime.datetime(2021, 5, 28, 19, 2, 50, tzinfo=datetime.timezone.utc), 'commenter': 'mjcarroll', 'type': 'User'}, {'comment_id': 641760975, 'comment_body': '```suggestion\r\n      /// \\brief Create new segmentation camera with the given name. If either the\r\n```', 'comment_created': datetime.datetime(2021, 5, 28, 19, 3, 2, tzinfo=datetime.timezone.utc), 'commenter': 'mjcarroll', 'type': 'User'}, {'comment_id': 641761113, 'comment_body': '```suggestion\r\n * Copyright (C) 2021 Open Source Robotics Foundation\r\n```', 'comment_created': datetime.datetime(2021, 5, 28, 19, 3, 12, tzinfo=datetime.timezone.utc), 'commenter': 'mjcarroll', 'type': 'User'}, {'comment_id': 641761260, 'comment_body': '```suggestion\r\n * Copyright (C) 2021 Open Source Robotics Foundation\r\n```', 'comment_created': datetime.datetime(2021, 5, 28, 19, 3, 21, tzinfo=datetime.timezone.utc), 'commenter': 'mjcarroll', 'type': 'User'}, {'comment_id': 641761561, 'comment_body': '```suggestion\r\n * Copyright (C) 2021 Open Source Robotics Foundation\r\n```', 'comment_created': datetime.datetime(2021, 5, 28, 19, 3, 42, tzinfo=datetime.timezone.utc), 'commenter': 'mjcarroll', 'type': 'User'}, {'comment_id': 641761860, 'comment_body': '```suggestion\r\n#ifndef IGNITION_RENDERING_EXAMPLES_SEGMENTATION_CAMERA_GLUTWINDOW_HH_\r\n#define IGNITION_RENDERING_EXAMPLES_SEGMENTATION_CAMERA_GLUTWINDOW_HH_\r\n```', 'comment_created': datetime.datetime(2021, 5, 28, 19, 4, 1, tzinfo=datetime.timezone.utc), 'commenter': 'mjcarroll', 'type': 'User'}, {'comment_id': 641762015, 'comment_body': '```suggestion\r\n * Copyright (C) 2021 Open Source Robotics Foundation\r\n```', 'comment_created': datetime.datetime(2021, 5, 28, 19, 4, 13, tzinfo=datetime.timezone.utc), 'commenter': 'mjcarroll', 'type': 'User'}, {'comment_id': 641762708, 'comment_body': 'I think it would be helpful to document the behavior of each choice here.', 'comment_created': datetime.datetime(2021, 5, 28, 19, 5, 3, tzinfo=datetime.timezone.utc), 'commenter': 'mjcarroll', 'type': 'User'}, {'comment_id': 641763246, 'comment_body': '```suggestion\r\n#ifndef IGNITION_RENDERING_BASE_BASESEGMENTATIONCAMERA_HH_\r\n#define IGNITION_RENDERING_BASE_BASESEGMENTATIONCAMERA_HH_\r\n```', 'comment_created': datetime.datetime(2021, 5, 28, 19, 5, 41, tzinfo=datetime.timezone.utc), 'commenter': 'mjcarroll', 'type': 'User'}, {'comment_id': 641763350, 'comment_body': '```suggestion\r\n * Copyright (C) 2021 Open Source Robotics Foundation\r\n```', 'comment_created': datetime.datetime(2021, 5, 28, 19, 5, 51, tzinfo=datetime.timezone.utc), 'commenter': 'mjcarroll', 'type': 'User'}, {'comment_id': 641763816, 'comment_body': '```suggestion\r\n * Copyright (C) 2021 Open Source Robotics Foundation\r\n```', 'comment_created': datetime.datetime(2021, 5, 28, 19, 6, 24, tzinfo=datetime.timezone.utc), 'commenter': 'mjcarroll', 'type': 'User'}, {'comment_id': 641764161, 'comment_body': '```suggestion\r\n#ifndef IGNITION_RENDERING_OGRE2_OGRE2SEGMENTATIONCAMERA_HH_\r\n#define IGNITION_RENDERING_OGRE2_OGRE2SEGMENTATIONCAMERA_HH_\r\n```', 'comment_created': datetime.datetime(2021, 5, 28, 19, 6, 49, tzinfo=datetime.timezone.utc), 'commenter': 'mjcarroll', 'type': 'User'}, {'comment_id': 641764680, 'comment_body': '```suggestion\r\n * Copyright (C) 2021 Open Source Robotics Foundation\r\n```', 'comment_created': datetime.datetime(2021, 5, 28, 19, 7, 25, tzinfo=datetime.timezone.utc), 'commenter': 'mjcarroll', 'type': 'User'}, {'comment_id': 641765864, 'comment_body': 'As a future enhancement, it may be helpful to have a configurable colormap so that we can have more deterministic ordering.', 'comment_created': datetime.datetime(2021, 5, 28, 19, 9, 48, tzinfo=datetime.timezone.utc), 'commenter': 'mjcarroll', 'type': 'User'}, {'comment_id': 641766480, 'comment_body': ""Initialize all of these pointers to `nullptr`.  We've had bugs in the past when they weren't initialized."", 'comment_created': datetime.datetime(2021, 5, 28, 19, 11, 6, tzinfo=datetime.timezone.utc), 'commenter': 'mjcarroll', 'type': 'User'}, {'comment_id': 641767333, 'comment_body': 'Do you main to add support for windows in the CMakelists and example ? [here a reference](https://github.com/ignitionrobotics/ign-rendering/pull/291)', 'comment_created': datetime.datetime(2021, 5, 28, 19, 12, 58, tzinfo=datetime.timezone.utc), 'commenter': 'ahcorde', 'type': 'User'}, {'comment_id': 641767415, 'comment_body': '```suggestion\r\n * Copyright (C) 2021 Open Source Robotics Foundation\r\n```', 'comment_created': datetime.datetime(2021, 5, 28, 19, 13, 7, tzinfo=datetime.timezone.utc), 'commenter': 'ahcorde', 'type': 'User'}, {'comment_id': 641767748, 'comment_body': 'magic number? add a constant', 'comment_created': datetime.datetime(2021, 5, 28, 19, 13, 44, tzinfo=datetime.timezone.utc), 'commenter': 'ahcorde', 'type': 'User'}, {'comment_id': 641767847, 'comment_body': 'remove', 'comment_created': datetime.datetime(2021, 5, 28, 19, 13, 56, tzinfo=datetime.timezone.utc), 'commenter': 'ahcorde', 'type': 'User'}, {'comment_id': 641767898, 'comment_body': 'remove', 'comment_created': datetime.datetime(2021, 5, 28, 19, 14, 4, tzinfo=datetime.timezone.utc), 'commenter': 'ahcorde', 'type': 'User'}, {'comment_id': 641767938, 'comment_body': '```suggestion\r\n\r\n```', 'comment_created': datetime.datetime(2021, 5, 28, 19, 14, 9, tzinfo=datetime.timezone.utc), 'commenter': 'ahcorde', 'type': 'User'}, {'comment_id': 641768498, 'comment_body': '```suggestion\r\n      for (auto &camera : g_cameras)\r\n```', 'comment_created': datetime.datetime(2021, 5, 28, 19, 15, 21, tzinfo=datetime.timezone.utc), 'commenter': 'ahcorde', 'type': 'User'}, {'comment_id': 641768604, 'comment_body': '```suggestion\r\n      for (auto &camera : g_cameras)\r\n```', 'comment_created': datetime.datetime(2021, 5, 28, 19, 15, 37, tzinfo=datetime.timezone.utc), 'commenter': 'ahcorde', 'type': 'User'}, {'comment_id': 641768657, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2021, 5, 28, 19, 15, 44, tzinfo=datetime.timezone.utc), 'commenter': 'ahcorde', 'type': 'User'}, {'comment_id': 641768707, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2021, 5, 28, 19, 15, 50, tzinfo=datetime.timezone.utc), 'commenter': 'ahcorde', 'type': 'User'}, {'comment_id': 641768942, 'comment_body': '```suggestion\r\n * Copyright (C) 2021 Open Source Robotics Foundation\r\n```', 'comment_created': datetime.datetime(2021, 5, 28, 19, 16, 20, tzinfo=datetime.timezone.utc), 'commenter': 'ahcorde', 'type': 'User'}, {'comment_id': 641769039, 'comment_body': '```suggestion\r\n * Copyright (C) 2021 Open Source Robotics Foundation\r\n```', 'comment_created': datetime.datetime(2021, 5, 28, 19, 16, 32, tzinfo=datetime.timezone.utc), 'commenter': 'ahcorde', 'type': 'User'}, {'comment_id': 641769269, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2021, 5, 28, 19, 17, 1, tzinfo=datetime.timezone.utc), 'commenter': 'ahcorde', 'type': 'User'}, {'comment_id': 641769308, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2021, 5, 28, 19, 17, 7, tzinfo=datetime.timezone.utc), 'commenter': 'ahcorde', 'type': 'User'}, {'comment_id': 641769441, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2021, 5, 28, 19, 17, 23, tzinfo=datetime.timezone.utc), 'commenter': 'ahcorde', 'type': 'User'}, {'comment_id': 641770776, 'comment_body': 'can you include this logic?\r\n\r\nhttps://github.com/WilliamLewww/ign-rendering/blob/cc618741a43d86eaab6d0419a205f5d862e336f2/examples/actor_animation/Main.cc#L180-L188', 'comment_created': datetime.datetime(2021, 5, 28, 19, 20, 31, tzinfo=datetime.timezone.utc), 'commenter': 'ahcorde', 'type': 'User'}, {'comment_id': 641771002, 'comment_body': '```suggestion\r\n * Copyright (C) 20121 Open Source Robotics Foundation\r\n```', 'comment_created': datetime.datetime(2021, 5, 28, 19, 21, 1, tzinfo=datetime.timezone.utc), 'commenter': 'ahcorde', 'type': 'User'}, {'comment_id': 641771278, 'comment_body': 'Review', 'comment_created': datetime.datetime(2021, 5, 28, 19, 21, 38, tzinfo=datetime.timezone.utc), 'commenter': 'ahcorde', 'type': 'User'}, {'comment_id': 641771400, 'comment_body': 'review', 'comment_created': datetime.datetime(2021, 5, 28, 19, 21, 50, tzinfo=datetime.timezone.utc), 'commenter': 'ahcorde', 'type': 'User'}, {'comment_id': 641771664, 'comment_body': 'add \\return', 'comment_created': datetime.datetime(2021, 5, 28, 19, 22, 24, tzinfo=datetime.timezone.utc), 'commenter': 'ahcorde', 'type': 'User'}, {'comment_id': 641771728, 'comment_body': '```suggestion\r\n * Copyright (C) 2021 Open Source Robotics Foundation\r\n```', 'comment_created': datetime.datetime(2021, 5, 28, 19, 22, 33, tzinfo=datetime.timezone.utc), 'commenter': 'ahcorde', 'type': 'User'}, {'comment_id': 641771941, 'comment_body': 'add docs or at least `// Documentation inherited`', 'comment_created': datetime.datetime(2021, 5, 28, 19, 23, 4, tzinfo=datetime.timezone.utc), 'commenter': 'ahcorde', 'type': 'User'}, {'comment_id': 641772272, 'comment_body': '```suggestion\r\n * Copyright (C) 2021 Open Source Robotics Foundation\r\n```', 'comment_created': datetime.datetime(2021, 5, 28, 19, 23, 47, tzinfo=datetime.timezone.utc), 'commenter': 'ahcorde', 'type': 'User'}, {'comment_id': 641772451, 'comment_body': 'review', 'comment_created': datetime.datetime(2021, 5, 28, 19, 24, 12, tzinfo=datetime.timezone.utc), 'commenter': 'ahcorde', 'type': 'User'}, {'comment_id': 641772507, 'comment_body': 'review', 'comment_created': datetime.datetime(2021, 5, 28, 19, 24, 21, tzinfo=datetime.timezone.utc), 'commenter': 'ahcorde', 'type': 'User'}, {'comment_id': 641772918, 'comment_body': 'remove', 'comment_created': datetime.datetime(2021, 5, 28, 19, 25, 9, tzinfo=datetime.timezone.utc), 'commenter': 'ahcorde', 'type': 'User'}, {'comment_id': 641805611, 'comment_body': '@mjcarroll do you mean storing the color for each label id of all 255 id ?', 'comment_created': datetime.datetime(2021, 5, 28, 20, 41, 49, tzinfo=datetime.timezone.utc), 'commenter': 'AmrElsersy', 'type': 'User'}, {'comment_id': 641817982, 'comment_body': 'This code is needed, it is not working now(it crashes on setting the query from the camera), but i am working on fixing it :D \r\n', 'comment_created': datetime.datetime(2021, 5, 28, 21, 14, 9, tzinfo=datetime.timezone.utc), 'commenter': 'AmrElsersy', 'type': 'User'}, {'comment_id': 642271660, 'comment_body': '```suggestion\r\n  engineNames.push_back(ogreEngineName);\r\n```', 'comment_created': datetime.datetime(2021, 5, 31, 7, 26, 54, tzinfo=datetime.timezone.utc), 'commenter': 'ahcorde', 'type': 'User'}, {'comment_id': 642272320, 'comment_body': '```suggestion\r\n      /// \\param[in] _enable ..\r\n```', 'comment_created': datetime.datetime(2021, 5, 31, 7, 27, 54, tzinfo=datetime.timezone.utc), 'commenter': 'ahcorde', 'type': 'User'}, {'comment_id': 642272570, 'comment_body': '```suggestion\r\n      /// \\param[in] _label label of background & unlabeled items\r\n```', 'comment_created': datetime.datetime(2021, 5, 31, 7, 28, 17, tzinfo=datetime.timezone.utc), 'commenter': 'ahcorde', 'type': 'User'}, {'comment_id': 642273381, 'comment_body': '```suggestion\r\n  if (this->takenColors.count(colorId))\r\n  {\r\n      return true;\r\n  }\r\n```', 'comment_created': datetime.datetime(2021, 5, 31, 7, 29, 34, tzinfo=datetime.timezone.utc), 'commenter': 'ahcorde', 'type': 'User'}, {'comment_id': 642274506, 'comment_body': '```suggestion\r\n  this->dataPtr->ogreCompositorManager->createBasicWorkspaceDef(\r\n    this->dataPtr->workspaceDefinition, backgroundColor);\r\n```', 'comment_created': datetime.datetime(2021, 5, 31, 7, 31, 24, tzinfo=datetime.timezone.utc), 'commenter': 'ahcorde', 'type': 'User'}, {'comment_id': 642274681, 'comment_body': '```suggestion\r\n  return this->dataPtr->buffer;\r\n```', 'comment_created': datetime.datetime(2021, 5, 31, 7, 31, 40, tzinfo=datetime.timezone.utc), 'commenter': 'ahcorde', 'type': 'User'}, {'comment_id': 642595215, 'comment_body': ""No, I don't know how to add it :D, i just copied that from the examples "", 'comment_created': datetime.datetime(2021, 5, 31, 16, 38, 14, tzinfo=datetime.timezone.utc), 'commenter': 'AmrElsersy', 'type': 'User'}, {'comment_id': 643173662, 'comment_body': ""It looks like this breaks ABI: https://build.osrfoundation.org/job/ignition_rendering-abichecker-any_to_any-ubuntu_auto-amd64/598/API_5fABI_20report/compat_report.html#Type_Binary_Problems_High\r\n\r\nAccording to the [ABI guide from KDE](https://community.kde.org/Policies/Binary_Compatibility_Issues_With_C%2B%2B):\r\n\r\n> You cannot...\r\n> \r\n> add new virtual functions to non-leaf classes as this will break subclasses. Note that a class designed to be sub-classed by applications is always a non-leaf class.\r\n>\r\n> Reason: the addition of a new virtual function to a class that is non-leaf (that is, there is at least one class deriving from this class) changes the layout of the virtual table (the virtual table is basically a list of function pointers, pointing to the functions that are active in this class level). To accommodate the new virtual, the compiler must add a new entry to this table, but existing derived classes won't know about it and will not have the entry in their virtual tables.\r\n\r\nSo, unless there's a way for us to achieve this functionality without adding any virtual methods to `BaseScene`, we may need to re-target this for Fortress :grimacing: "", 'comment_created': datetime.datetime(2021, 6, 1, 14, 47, 43, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 644274585, 'comment_body': '> the addition of a new virtual function to a class that is non-leaf (that is, there is at least one class deriving from this class) changes the layout of the virtual table\r\n\r\nI actually believe that the ABI breaking code are the pure virtual methods added to the `Scene` class, since the `Scene` class is a non-leaf class (I accidentally commented on the `BaseScene` code, which could be considered a leaf class):\r\n\r\nhttps://github.com/ignitionrobotics/ign-rendering/blob/3b8c51ea827996f56331ef7ff08b45f67ccc78ed/include/ignition/rendering/Scene.hh#L660-L687', 'comment_created': datetime.datetime(2021, 6, 2, 19, 51, 5, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 645821212, 'comment_body': 'ok yeah these will break ABI and It would be difficult to work around it. I recommend targeting at `main`', 'comment_created': datetime.datetime(2021, 6, 4, 20, 4, 47, tzinfo=datetime.timezone.utc), 'commenter': 'iche033', 'type': 'User'}, {'comment_id': 646688576, 'comment_body': 'I went ahead and updated this PR to target `main` and updated the segmentation example `CMakeLists.txt` to depend on `ign-rendering6` in https://github.com/ignitionrobotics/ign-rendering/pull/329/commits/8813531a2df28210d292445afc4f5081806b3f8d: https://github.com/ignitionrobotics/ign-rendering/blob/8813531a2df28210d292445afc4f5081806b3f8d/examples/segmentation_camera/CMakeLists.txt#L3\r\n\r\nI believe everything should be up-to-date for Fortress now, but it looks like DCO is giving a lot of complaints: https://github.com/ignitionrobotics/ign-rendering/pull/329/checks?check_run_id=2765358606\r\n\r\nI know we can set DCO to manually pass, but there seem to be a lot more failures in the check I linked above than usual. @iche033, any thoughts?', 'comment_created': datetime.datetime(2021, 6, 7, 15, 16, 4, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 646766666, 'comment_body': ""not sure how DCO got into that state but it's complaining about commits outside of this PR. You can probably just set DCO to pass on this one."", 'comment_created': datetime.datetime(2021, 6, 7, 16, 40, 8, tzinfo=datetime.timezone.utc), 'commenter': 'iche033', 'type': 'User'}, {'comment_id': 646830385, 'comment_body': '> not sure how DCO got into that state\r\n\r\nIt looks like it had to do with the fact that I reset the branch of this PR to `main` and committed this change before updating the PR itself to target `main`. I pushed another commit to address some warnings, and now, DCO seems fine. So, I think we can mark this as resolved :+1: ', 'comment_created': datetime.datetime(2021, 6, 7, 18, 11, 20, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 649439477, 'comment_body': '```suggestion\r\n  for (const auto &engineName : engineNames)\r\n```', 'comment_created': datetime.datetime(2021, 6, 10, 18, 49, 35, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 649441119, 'comment_body': ""```suggestion\r\n#include <iostream>\r\n#include <string>\r\n#include <vector>\r\n```\r\n\r\nIt's good practice to `#include` headers for everything you use. That way, you're not depending on another header you're including to provide the `#include` for you: https://google.github.io/styleguide/cppguide.html#Include_What_You_Use"", 'comment_created': datetime.datetime(2021, 6, 10, 18, 51, 57, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 649455364, 'comment_body': 'In this code, you assign the boxes to the `green` material, and the spheres to the `red` material. However, on my machine, it looks like my spheres are green, and my boxes are red/orange. So, is there a chance that the variable names got mixed up for these materials? If so, can you update them?', 'comment_created': datetime.datetime(2021, 6, 10, 19, 14, 1, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 649461841, 'comment_body': ""Pressing `ESC` doesn't exit the demo for me. And since the segmentation camera only supports Ogre2, pressing `TAB` has no use case for this demo. So, I think we can remove the `TAB` from the usage message, and will need to figure out why `ESC` isn't exiting the demo"", 'comment_created': datetime.datetime(2021, 6, 10, 19, 24, 2, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 649463629, 'comment_body': ""@AmrElsersy if you're going to work on fixing it, can you at least leave a TODO note that mentions what needs to be fixed/why this code is needed so that we have some more context until it's fixed?"", 'comment_created': datetime.datetime(2021, 6, 10, 19, 25, 23, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 649470877, 'comment_body': '```suggestion\r\n#include <memory>\r\n#include <mutex>\r\n#include <string>\r\n#include <vector>\r\n\r\n#include <ignition/common/Console.hh>\r\n#include <ignition/math/Vector2.hh>\r\n#include <ignition/rendering/Camera.hh>\r\n#include <ignition/rendering/Image.hh>\r\n#include <ignition/rendering/RayQuery.hh>\r\n#include <ignition/rendering/Scene.hh>\r\n#include <ignition/rendering/OrbitViewController.hh>\r\n#include <ignition/rendering/SegmentationCamera.hh>\r\n```\r\n\r\nsame comment here about ""include what you use"" (memory, string, vector, math/vector2)', 'comment_created': datetime.datetime(2021, 6, 10, 19, 31, 11, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 649471798, 'comment_body': '```suggestion\r\n  }\r\n}\r\n```\r\n\r\nnit: remove whitespace between these curly braces', 'comment_created': datetime.datetime(2021, 6, 10, 19, 32, 40, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 649472558, 'comment_body': ""It doesn't seem like I'm able to zoom in/out with my right mouse button (or maybe I just don't know how), were you able to do this on your machine?"", 'comment_created': datetime.datetime(2021, 6, 10, 19, 34, 2, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 649472808, 'comment_body': '```suggestion\r\n}\r\n\r\n//////////////////////////////////////////////////\r\n```', 'comment_created': datetime.datetime(2021, 6, 10, 19, 34, 25, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 649476158, 'comment_body': '```suggestion\r\n      /// \\brief Create new segmentation camera with the given name.\r\n      /// A unique ID will automatically be assigned to the camera.\r\n      /// If the given name is already in use, NULL will be returned.\r\n```', 'comment_created': datetime.datetime(2021, 6, 10, 19, 40, 14, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 649480449, 'comment_body': ""Can you make this an enum class? Here's why enum classes are preferred over enums: https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#Renum-class\r\n\r\nAlso, can you follow the documentation/style conventions that we have for enums? Here's an example: https://github.com/ignitionrobotics/ign-rendering/blob/7b9ac811c6f6489935681047987291c4cb938b6b/include/ignition/rendering/Text.hh#L29-L57"", 'comment_created': datetime.datetime(2021, 6, 10, 19, 47, 12, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 649481869, 'comment_body': '```suggestion\r\n    /// \\class SegmentationCamera SegmentationCamera.hh ignition/rendering/SegmentationCamera.hh\r\n```', 'comment_created': datetime.datetime(2021, 6, 10, 19, 49, 26, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 649482340, 'comment_body': '```suggestion\r\n    /// This camera is designed to produce segmentation data, instead of a 2D\r\n```', 'comment_created': datetime.datetime(2021, 6, 10, 19, 50, 13, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 649488314, 'comment_body': 'Also, this enum (`SegmentationType`) should be in the `ignition::rendering` namespace to avoid potential naming collisions. The example I shared above shows how to do this.', 'comment_created': datetime.datetime(2021, 6, 10, 20, 0, 12, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 649490755, 'comment_body': ""```suggestion\r\n```\r\nWe don't need to inherit from the `Sensor` class because the `Camera` class already inherits from it: https://github.com/ignitionrobotics/ign-rendering/blob/ignition-rendering5_5.0.0/include/ignition/rendering/Camera.hh#L40-L41"", 'comment_created': datetime.datetime(2021, 6, 10, 20, 4, 17, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 649491972, 'comment_body': '```suggestion\r\n      /// \\brief Connect to the new Segmentation image event\r\n```', 'comment_created': datetime.datetime(2021, 6, 10, 20, 6, 36, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 649492997, 'comment_body': 'Can you also document what the parameters represent in the callback function? For example, something like (edit this as needed; I am assuming that this is how the function arguments should be interpreted):\r\n```\r\nThe callback function arguments are: <segmentation data, width, height, depth, format>\r\n```', 'comment_created': datetime.datetime(2021, 6, 10, 20, 8, 25, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 649493938, 'comment_body': '```suggestion\r\n      /// \\brief Get the segmented image data\r\n```\r\n""All things needed"" is a little confusing, I think. Can we just say this instead?', 'comment_created': datetime.datetime(2021, 6, 10, 20, 9, 59, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 649494991, 'comment_body': ""```suggestion\r\n      /// \\brief Set Segmentation Type\r\n      /// \\param[in] _type Segmentation Type\r\n```\r\nThere's no need to explicitly document the values for `SegmentationType` since we already have this enum documented"", 'comment_created': datetime.datetime(2021, 6, 10, 20, 11, 43, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 649495352, 'comment_body': '```suggestion\r\n      /// \\brief Enable Color map mode to generate colored semantics\r\n```', 'comment_created': datetime.datetime(2021, 6, 10, 20, 12, 22, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 649495810, 'comment_body': '```suggestion\r\n      public: virtual void SetBackgroundColor(const math::Color &_color) = 0;\r\n```', 'comment_created': datetime.datetime(2021, 6, 10, 20, 13, 6, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 649496996, 'comment_body': '```suggestion\r\n      public: virtual const math::Color &BackgroundColor() const = 0;\r\n```', 'comment_created': datetime.datetime(2021, 6, 10, 20, 15, 6, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 649497086, 'comment_body': '```suggestion\r\n      public: virtual int BackgroundLabel() const = 0;\r\n```', 'comment_created': datetime.datetime(2021, 6, 10, 20, 15, 15, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 649499315, 'comment_body': '```suggestion\r\n#include <functional>\r\n#include <string>\r\n\r\n#include <ignition/common/Event.hh>\r\n#include <ignition/math/Color.hh>\r\n#include ""ignition/rendering/Camera.hh""\r\n```\r\n\r\nThis can be re-ordered to follow the header include order that we follow in our style guide: https://google.github.io/styleguide/cppguide.html#Names_and_Order_of_Includes\r\n\r\nWe should also make sure we have `#include`s for everything we use: https://google.github.io/styleguide/cppguide.html#Include_What_You_Use', 'comment_created': datetime.datetime(2021, 6, 10, 20, 19, 15, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 649502499, 'comment_body': '```suggestion\r\n      /// \\brief Constructor\r\n      protected: BaseSegmentationCamera();\r\n```', 'comment_created': datetime.datetime(2021, 6, 10, 20, 24, 33, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 649502984, 'comment_body': '```suggestion\r\n      /// \\brief Destructor\r\n      public: virtual ~BaseSegmentationCamera();\r\n```', 'comment_created': datetime.datetime(2021, 6, 10, 20, 25, 24, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 649563278, 'comment_body': '```suggestion\r\n      // Documentation inherited\r\n      public: virtual void Init() override;\r\n\r\n      // Documentation inherited\r\n      public: virtual void Destroy() override;\r\n\r\n      // Documentation inherited\r\n      public: virtual void CreateSegmentationTexture() override;\r\n```\r\n\r\nFor functions that are an `override`, we can just use `// Documentation inherited` to avoid duplicate documentation that needs to be maintained/updated whenever changes are made.\r\n\r\nCan you update all of the documentation for all of the other methods in this class that are `override` to be `// Documentation inherited`?', 'comment_created': datetime.datetime(2021, 6, 10, 22, 6, 7, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 649567206, 'comment_body': ""Is this needed? I don't think we need it"", 'comment_created': datetime.datetime(2021, 6, 10, 22, 14, 33, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 649568586, 'comment_body': '```suggestion\r\n#include ""ignition/rendering/base/BaseSegmentationCamera.hh""\r\n\r\n#include <memory>\r\n#include <string>\r\n\r\n#include <ignition/common/Console.hh>\r\n#include <ignition/common/Event.hh>\r\n#include ""ignition/rendering/ogre2/Ogre2Includes.hh""\r\n#include ""ignition/rendering/ogre2/Ogre2Sensor.hh""\r\n```\r\n\r\nhttps://google.github.io/styleguide/cppguide.html#Names_and_Order_of_Includes', 'comment_created': datetime.datetime(2021, 6, 10, 22, 17, 43, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 649574745, 'comment_body': ""Can you re-order these headers to follow the [style guide for header include order](https://google.github.io/styleguide/cppguide.html#Names_and_Order_of_Includes), and also make sure you're including headers for whatever you're using? For example, I see you're missing an `#include <string>`, so double-check other c/c++ headers that you may be missing."", 'comment_created': datetime.datetime(2021, 6, 10, 22, 32, 44, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 649575553, 'comment_body': ""nit: you don't need to indent for this - see the thermal camera as an example:\r\n\r\nhttps://github.com/ignitionrobotics/ign-rendering/blob/df77bf5ef752e5c0489973d9f856184df5a1d081/ogre2/src/Ogre2ThermalCamera.cc#L60-L69"", 'comment_created': datetime.datetime(2021, 6, 10, 22, 34, 40, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 649575696, 'comment_body': '```suggestion\r\n    class Ogre2SegmentationMaterialSwitcher : public Ogre::RenderTargetListener\r\n```', 'comment_created': datetime.datetime(2021, 6, 10, 22, 35, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 649576009, 'comment_body': 'Can you add documentation for `\\param[in] _scene`? ', 'comment_created': datetime.datetime(2021, 6, 10, 22, 35, 43, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 649576297, 'comment_body': '```suggestion\r\n      public: ~SegmentationMaterialSwitcher() = default;\r\n```', 'comment_created': datetime.datetime(2021, 6, 10, 22, 36, 22, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 649576705, 'comment_body': '```suggestion\r\n                  const Ogre::RenderTargetEvent &_evt) override;\r\n```', 'comment_created': datetime.datetime(2021, 6, 10, 22, 37, 34, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 649576737, 'comment_body': '```suggestion\r\n                  const Ogre::RenderTargetEvent &_evt) override;\r\n```', 'comment_created': datetime.datetime(2021, 6, 10, 22, 37, 42, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 649579384, 'comment_body': ""The method signature and name can make this method difficult to understand without the documentation. I'd recommend modifying the method to be something like this (you'll probably need to update the implementation slightly and any code that uses this method):\r\n\r\n```c++\r\n/// \\brief Store a color if it hasn't been stored yet\r\n/// \\param[in] _color The color to be stored\r\n/// \\return True if _color was stored. False otherwise\r\nprivate: bool StoreColor(const math::Color &_color);\r\n```"", 'comment_created': datetime.datetime(2021, 6, 10, 22, 44, 53, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 649580032, 'comment_body': '```suggestion\r\n      /// \\brief A map of ogre sub item pointer to its original hlms material\r\n      private: std::unordered_map<Ogre::SubItem *, Ogre::HlmsDatablock *> datablockMap;\r\n```\r\n\r\nI recommend using [`std::unordered_map`](https://en.cppreference.com/w/cpp/container/unordered_map) for faster runtime operations.', 'comment_created': datetime.datetime(2021, 6, 10, 22, 46, 45, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 649580506, 'comment_body': 'What is ""mouse picking""?', 'comment_created': datetime.datetime(2021, 6, 10, 22, 47, 54, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 649580689, 'comment_body': '```suggestion\r\n      /// \\brief User Data Key to set the label\r\n      private: const std::string labelKey{""label""};\r\n```', 'comment_created': datetime.datetime(2021, 6, 10, 22, 48, 22, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 649581293, 'comment_body': '```suggestion\r\n      /// \\brief Segmentation Type\r\n      private: SegmentationType type {SegmentationType::Semantic};\r\n```\r\nNo need to document the values for `SegmentationType` since `SegmentationType` has its own documentation', 'comment_created': datetime.datetime(2021, 6, 10, 22, 49, 57, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 649582173, 'comment_body': ""If the values in these maps are always true, then why do we need to store a key/value pairing? Wouldn't storing just the keys be enough? I'd recommend storing the keys only in a [`std::unordered_set`](https://en.cppreference.com/w/cpp/container/unordered_set)."", 'comment_created': datetime.datetime(2021, 6, 10, 22, 52, 25, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 649582802, 'comment_body': 'Can we initialize this to some default value to avoid weird bugs related to initialization behavior?', 'comment_created': datetime.datetime(2021, 6, 10, 22, 54, 8, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 649582974, 'comment_body': 'Same comment about initialization - can we initialize this to some default value?', 'comment_created': datetime.datetime(2021, 6, 10, 22, 54, 28, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 649583626, 'comment_body': '```suggestion\r\n      /// Key: label id, value: num of instances\r\n      private: std::unordered_map<int, unsigned int> instancesCount;\r\n```\r\nThe number of instances can never be < 0, right? If so, then maybe the value of this map should be an `unsigned int`. Also, should we make label ids of type `unsigned int`, or are there scenarios where we can have labels that are < 0?', 'comment_created': datetime.datetime(2021, 6, 10, 22, 56, 3, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 649584077, 'comment_body': '```suggestion\r\n      private: Ogre2ScenePtr scene = nullptr;\r\n```', 'comment_created': datetime.datetime(2021, 6, 10, 22, 57, 21, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 649587207, 'comment_body': 'Is this supposed to be a unique ID? Is there any chance that 2 different RGB combinations could yield the same ID with this formula?', 'comment_created': datetime.datetime(2021, 6, 10, 23, 6, 48, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 649588570, 'comment_body': ""```suggestion\r\n    // don't check for taken colors in that case, all items\r\n```"", 'comment_created': datetime.datetime(2021, 6, 10, 23, 10, 34, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 649588879, 'comment_body': 'This can be consolidated into a single `if` statement:\r\n```c++\r\nif (this->type == SegmentationType::Semantic && this->coloredLabel.count(_label))\r\n  return color;\r\n```', 'comment_created': datetime.datetime(2021, 6, 10, 23, 11, 25, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 649589895, 'comment_body': '```suggestion\r\n      // get class user data\r\n      Variant labelAny = ogreVisual->UserData(this->labelKey);\r\n      int label;\r\n```\r\nnit: whitespace', 'comment_created': datetime.datetime(2021, 6, 10, 23, 14, 22, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 649592014, 'comment_body': ""I'm concerned that this won't be very useful for users. Users want labels to be unique, and want labels to be something that is easy to work with (like an int). However, here, it looks like we are normalizing labels as floats between 0 and 1, right? If so, it would be difficult for users to compare pixels to see if they have the same label or not due to floating point roundoff error."", 'comment_created': datetime.datetime(2021, 6, 10, 23, 21, 11, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 649593826, 'comment_body': ""Is there a reason why we have to reset this after every pre-render? This makes me think that we'd have to re-compute colors each time around, and since we are using a random number generator to compute colors, this could mean that we don't have consistent colors for objects on each update."", 'comment_created': datetime.datetime(2021, 6, 10, 23, 27, 2, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 649594256, 'comment_body': 'I think this could be simplified to look something like this:\r\n\r\nhttps://github.com/ignitionrobotics/ign-rendering/blob/df77bf5ef752e5c0489973d9f856184df5a1d081/ogre2/src/Ogre2ThermalCamera.cc#L427-L432', 'comment_created': datetime.datetime(2021, 6, 10, 23, 28, 27, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 649595145, 'comment_body': 'nit: the `Ogre2SegmentationCameraPrivate` class definition should come right after the `SegmentationMaterialSwitcher` class definition. All of the method definitions for both the `SegmentationMaterialSwitcher` and `Ogre2SegmentationCameraPrivate` class should then come after each of these class definitions.', 'comment_created': datetime.datetime(2021, 6, 10, 23, 31, 3, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 649597196, 'comment_body': 'Can we use `std::unique_ptr` for these types instead of raw pointers? Same comment applies to all of the other raw pointers being used in the `Ogre2SegmentationCameraPrivate` class', 'comment_created': datetime.datetime(2021, 6, 10, 23, 37, 24, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 649598069, 'comment_body': ""Make sure you are deleting all of the raw pointers in the `Ogre2SegmentationPrivate` class (`dataPtr` member variable) here. Or, if you use `std::unique_ptr` instead of raw pointers as I suggested in my other comment, you don't need to worry about this :slightly_smiling_face: "", 'comment_created': datetime.datetime(2021, 6, 10, 23, 40, 11, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 649598381, 'comment_body': 'Can this variable be marked `const`?', 'comment_created': datetime.datetime(2021, 6, 10, 23, 41, 11, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 649598896, 'comment_body': ""Can you document the template parameter of this variable? It looks like it's a callback method with a few arguments, so don't forget to document the arguments to the callback as well :slightly_smiling_face: "", 'comment_created': datetime.datetime(2021, 6, 10, 23, 43, 1, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 650590215, 'comment_body': 'actually materials are useless here, i will remove it\r\nthe one that is shown the material of the material switcher, and these materials you mention will not appear anyway', 'comment_created': datetime.datetime(2021, 6, 13, 23, 15, 16, tzinfo=datetime.timezone.utc), 'commenter': 'AmrElsersy', 'type': 'User'}, {'comment_id': 650590506, 'comment_body': 'ok i will remove the TAB, but ESC is working for me\r\n', 'comment_created': datetime.datetime(2021, 6, 13, 23, 18, 13, tzinfo=datetime.timezone.utc), 'commenter': 'AmrElsersy', 'type': 'User'}, {'comment_id': 650595681, 'comment_body': ""Actually I copied that documentation from the implementation of all other material switchers, but don't know what is actually used for"", 'comment_created': datetime.datetime(2021, 6, 14, 0, 8, 30, tzinfo=datetime.timezone.utc), 'commenter': 'AmrElsersy', 'type': 'User'}, {'comment_id': 650601945, 'comment_body': 'No, always >= 0', 'comment_created': datetime.datetime(2021, 6, 14, 0, 58, 4, tzinfo=datetime.timezone.utc), 'commenter': 'AmrElsersy', 'type': 'User'}, {'comment_id': 650602701, 'comment_body': 'Yes, we have 3 channels each is 8 bit, that ID gets the decimal value of that 24 bit numbers, and there is no change to have the same ID twice\r\n\r\nbtw, this is the same way the panoptic is  handled in the official panoptic API proposed by COCO dataset (which introduced the panoptic format)\r\n\r\ncheck that if you want to make sure\r\nhttps://github.com/cocodataset/panopticapi/blob/master/panopticapi/utils.py#L30', 'comment_created': datetime.datetime(2021, 6, 14, 1, 2, 52, tzinfo=datetime.timezone.utc), 'commenter': 'AmrElsersy', 'type': 'User'}, {'comment_id': 650603172, 'comment_body': 'It is in the range of [0-255], that normalization is just required to pass it to the function, but OGRE map it again to [0-255] in the buffer that the segmentation data is stored in', 'comment_created': datetime.datetime(2021, 6, 14, 1, 6, 19, tzinfo=datetime.timezone.utc), 'commenter': 'AmrElsersy', 'type': 'User'}, {'comment_id': 650603580, 'comment_body': 'Yeah, It is calculated each iteration. but the same colors will be produced for the objects !\r\nbecause in the random generator, I use the unique encoded ID of each item as a seed. so it generates the same color each time', 'comment_created': datetime.datetime(2021, 6, 14, 1, 8, 59, tzinfo=datetime.timezone.utc), 'commenter': 'AmrElsersy', 'type': 'User'}, {'comment_id': 650608236, 'comment_body': ""mmm, I tried to make that but didn't succeed and got many errors because of OGRE, it expects in all functions to deal with raw pointers\r\n"", 'comment_created': datetime.datetime(2021, 6, 14, 1, 36, 3, tzinfo=datetime.timezone.utc), 'commenter': 'AmrElsersy', 'type': 'User'}, {'comment_id': 650611836, 'comment_body': 'mmm, I think it will is also difficult to understand in ""StoreColor"" name :D \r\nbut ok will take a look at it ', 'comment_created': datetime.datetime(2021, 6, 14, 1, 55, 20, tzinfo=datetime.timezone.utc), 'commenter': 'AmrElsersy', 'type': 'User'}, {'comment_id': 650890354, 'comment_body': ""No, it is not working yet, it crashes when using the RayQuery, I am working on it, but can't solve it till now :D "", 'comment_created': datetime.datetime(2021, 6, 14, 12, 11, 35, tzinfo=datetime.timezone.utc), 'commenter': 'AmrElsersy', 'type': 'User'}, {'comment_id': 671942595, 'comment_body': '```suggestion\r\n    enum class SegmentationType {\r\n      /// \\brief Pixels of same label from different items\r\n```\r\nnit: remove whitespace', 'comment_created': datetime.datetime(2021, 7, 19, 2, 7, 10, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 671942829, 'comment_body': ""The variable names in the enum should all be uppercase - here's an example: https://github.com/ignitionrobotics/ign-rendering/blob/7b9ac811c6f6489935681047987291c4cb938b6b/include/ignition/rendering/ShaderType.hh#L34-L53\r\n\r\nYou'll also need to update any other repositories that use this enum to be uppercase as well :grimacing: "", 'comment_created': datetime.datetime(2021, 7, 19, 2, 8, 7, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 699548510, 'comment_body': 'add prefix to be consistent with other enum styles in ign-rendering, i.e. `ST_SEMANTIC `and `ST_PANOPTIC`', 'comment_created': datetime.datetime(2021, 8, 31, 17, 48, 59, tzinfo=datetime.timezone.utc), 'commenter': 'iche033', 'type': 'User'}, {'comment_id': 699549769, 'comment_body': '`math::Color _color` -> `const math::Color &_color`', 'comment_created': datetime.datetime(2021, 8, 31, 17, 50, 37, tzinfo=datetime.timezone.utc), 'commenter': 'iche033', 'type': 'User'}, {'comment_id': 699551127, 'comment_body': 'add `override` keyword for functions that override the pure virtual functions from the `SegmentationCamera` class\r\n\r\nSame applies to other functions in this class.', 'comment_created': datetime.datetime(2021, 8, 31, 17, 52, 36, tzinfo=datetime.timezone.utc), 'commenter': 'iche033', 'type': 'User'}, {'comment_id': 699552250, 'comment_body': 'add `override` keyword for functions that override the base class.', 'comment_created': datetime.datetime(2021, 8, 31, 17, 54, 4, tzinfo=datetime.timezone.utc), 'commenter': 'iche033', 'type': 'User'}, {'comment_id': 699553007, 'comment_body': '`const`?\r\n\r\nkeep the function signature consistent with the base class.', 'comment_created': datetime.datetime(2021, 8, 31, 17, 55, 4, tzinfo=datetime.timezone.utc), 'commenter': 'iche033', 'type': 'User'}, {'comment_id': 699553174, 'comment_body': '`const`?', 'comment_created': datetime.datetime(2021, 8, 31, 17, 55, 18, tzinfo=datetime.timezone.utc), 'commenter': 'iche033', 'type': 'User'}, {'comment_id': 699555285, 'comment_body': 'set to `nullptr` after `delete`', 'comment_created': datetime.datetime(2021, 8, 31, 17, 58, 13, tzinfo=datetime.timezone.utc), 'commenter': 'iche033', 'type': 'User'}, {'comment_id': 699555901, 'comment_body': 'delete this in `Destroy` or use `std::unique_ptr`?', 'comment_created': datetime.datetime(2021, 8, 31, 17, 59, 8, tzinfo=datetime.timezone.utc), 'commenter': 'iche033', 'type': 'User'}, {'comment_id': 699558272, 'comment_body': '`vecotr` -> `vector`', 'comment_created': datetime.datetime(2021, 8, 31, 18, 2, 36, tzinfo=datetime.timezone.utc), 'commenter': 'iche033', 'type': 'User'}, {'comment_id': 699559374, 'comment_body': '`givin` -> `given`', 'comment_created': datetime.datetime(2021, 8, 31, 18, 4, 9, tzinfo=datetime.timezone.utc), 'commenter': 'iche033', 'type': 'User'}, {'comment_id': 699560304, 'comment_body': '`const math::Color &`', 'comment_created': datetime.datetime(2021, 8, 31, 18, 5, 37, tzinfo=datetime.timezone.utc), 'commenter': 'iche033', 'type': 'User'}, {'comment_id': 699562329, 'comment_body': ""Omit `Get` prefix. I think the problem you'll run into is that the function name conflicts with the enum type `SegmentationType`. For cases like this, this function can just be named `Type()`, [similar example here](https://github.com/ignitionrobotics/ign-rendering/blob/ign-rendering5/include/ignition/rendering/Marker.hh#L104-L109)"", 'comment_created': datetime.datetime(2021, 8, 31, 18, 8, 48, tzinfo=datetime.timezone.utc), 'commenter': 'iche033', 'type': 'User'}, {'comment_id': 699562791, 'comment_body': 'can this be `const`?', 'comment_created': datetime.datetime(2021, 8, 31, 18, 9, 29, tzinfo=datetime.timezone.utc), 'commenter': 'iche033', 'type': 'User'}, {'comment_id': 699564653, 'comment_body': ""what's the status of ray query issue?\r\n\r\nHow about adding a todo note if the issue will not be fixed in this PR?"", 'comment_created': datetime.datetime(2021, 8, 31, 18, 12, 13, tzinfo=datetime.timezone.utc), 'commenter': 'iche033', 'type': 'User'}, {'comment_id': 699575530, 'comment_body': 'instead of searching for a hardcoded name string, how about checking to see if the visual shares the same parent as the previous visual, something like:\r\n\r\n```\r\nauto parent = visual->Parent();\r\nif (parent && parent == prevParent)\r\n  isMultiLink = true;\r\n```', 'comment_created': datetime.datetime(2021, 8, 31, 18, 29, 6, tzinfo=datetime.timezone.utc), 'commenter': 'iche033', 'type': 'User'}, {'comment_id': 699576102, 'comment_body': ""can you add a small comment that it also adds the color to the list if it's not taken?"", 'comment_created': datetime.datetime(2021, 8, 31, 18, 30, 3, tzinfo=datetime.timezone.utc), 'commenter': 'iche033', 'type': 'User'}, {'comment_id': 699670443, 'comment_body': '> keep the function signature consistent\r\n\r\nIt also looks like this method should return a reference (`math::Color &`), not a copy: https://github.com/AmrElsersy/ign-rendering/blob/f4f376101f48bf4586630ab69d0e031123e8a1fc/include/ignition/rendering/SegmentationCamera.hh#L99', 'comment_created': datetime.datetime(2021, 8, 31, 21, 1, 5, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 701997092, 'comment_body': ""I cannot make it a reference as it needs to be implemented in the BaseSegmentationCamera class, which should return a referece for the color when we implement the function ... but we don't have that color yet, it is in the dataPtr object, so when I try to return a reference to a local variable it gives me a warning .. so i make it return a copy"", 'comment_created': datetime.datetime(2021, 9, 3, 15, 43, 13, tzinfo=datetime.timezone.utc), 'commenter': 'AmrElsersy', 'type': 'User'}, {'comment_id': 702052192, 'comment_body': '@iche033 \r\nmmm, but It is not the direct parent in all cases, I check if all the visuals has the same top parent, and it might be not the direct parent\r\n\r\nfor example, if we have a model which contains many links, so the visuals names will be something like:\r\n`model::link1::visual1` & `model::link2::visual2` , so I need to check the top parent which is `model` but not the direct parent which is `link1` or `link2`\r\n\r\n', 'comment_created': datetime.datetime(2021, 9, 3, 17, 15, 4, tzinfo=datetime.timezone.utc), 'commenter': 'AmrElsersy', 'type': 'User'}, {'comment_id': 705807994, 'comment_body': 'I see, how about adding a convenient function to get the top level model visual?\r\n\r\n```cpp\r\n////////////////////////////////////////////////\r\nVisualPtr Ogre2SegmentationMaterialSwitcher::TopLevelVisual(VisualPtr _visual)\r\n{ \r\n  if (!_visual)\r\n    return _visual;\r\n  VisualPtr p = _visual;\r\n  while (p->Parent() && p->Parent() != _visual->Scene()->RootVisual())\r\n    p = std::dynamic_pointer_cast<Visual>(p->Parent());\r\n  return p;\r\n}\r\n```\r\n\r\nthen you can get the parent name here by calling \r\n\r\n```cpp\r\n   parentName = this->TopLevelVisual(visual)->Name();\r\n```\r\n\r\nthis is just to prevent relying on hardcoded name prefixes in case the visual naming style changes in the future.', 'comment_created': datetime.datetime(2021, 9, 10, 0, 23, 57, tzinfo=datetime.timezone.utc), 'commenter': 'iche033', 'type': 'User'}, {'comment_id': 709416120, 'comment_body': ""This doesn't appear to be used, can we remove it?"", 'comment_created': datetime.datetime(2021, 9, 15, 17, 40, 27, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 709419124, 'comment_body': ""scrolling with the mouse wheel doesn't zoom in for me. Instead, it moves the displated GUI content either up or down"", 'comment_created': datetime.datetime(2021, 9, 15, 17, 43, 23, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 709420960, 'comment_body': 'Pressing `ESC` does not exit the example for me. When I press `ESC`, nothing happens', 'comment_created': datetime.datetime(2021, 9, 15, 17, 45, 13, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 709421792, 'comment_body': '```suggestion\r\nvoid run(ir::CameraPtr _camera);\r\n```', 'comment_created': datetime.datetime(2021, 9, 15, 17, 45, 59, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 709425713, 'comment_body': '```suggestion\r\n      /// \\brief Create new segmentation camera with the given name and ID. If\r\n```', 'comment_created': datetime.datetime(2021, 9, 15, 17, 49, 24, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 709427136, 'comment_body': '```suggestion\r\n      /// \\brief Pixels of same label from different items have different\r\n```', 'comment_created': datetime.datetime(2021, 9, 15, 17, 50, 29, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 709428006, 'comment_body': '```suggestion\r\n    /// This camera is designed to produce segmentation data, instead of a 2D\r\n```', 'comment_created': datetime.datetime(2021, 9, 15, 17, 51, 7, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 709430090, 'comment_body': '```suggestion\r\n      /// \\return The labels-buffer as an array of unsigned ints\r\n```', 'comment_created': datetime.datetime(2021, 9, 15, 17, 52, 43, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 709431077, 'comment_body': '```suggestion\r\n      /// \\param[in] _subscriber Subscriber callback function\r\n      /// The callback function arguments are:\r\n      /// <segmentation data, width, height, channels, format>\r\n      /// \\return Pointer to the new Connection. This must be kept in scope\r\n```', 'comment_created': datetime.datetime(2021, 9, 15, 17, 53, 25, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 709433712, 'comment_body': '```suggestion\r\n      /// \\brief Check if color map mode is enabled\r\n```', 'comment_created': datetime.datetime(2021, 9, 15, 17, 55, 23, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 709441025, 'comment_body': '```suggestion\r\n      /// IDs map, so users get both the colored map and the corresponding IDs map.\r\n```', 'comment_created': datetime.datetime(2021, 9, 15, 18, 0, 8, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 709442511, 'comment_body': '```suggestion\r\n      /// \\param[out] _labelBuffer A buffer that contains the label IDs map data.\r\n      /// This output buffer must be allocated with the same size before calling\r\n```', 'comment_created': datetime.datetime(2021, 9, 15, 18, 1, 9, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 709444945, 'comment_body': '```suggestion\r\n      public: virtual void SegmentationType(SegmentationType _type) = 0;\r\n```\r\nI believe that we don\'t typically use ""Set"" or ""Get"" prefixes for setters/getters, so the ""Set"" prefix can probably be removed from this method', 'comment_created': datetime.datetime(2021, 9, 15, 18, 3, 14, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 709445318, 'comment_body': 'Same comment about removing ""Set"" prefix for setter method', 'comment_created': datetime.datetime(2021, 9, 15, 18, 3, 36, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 709445420, 'comment_body': 'Same comment about removing ""Set"" prefix for setter method', 'comment_created': datetime.datetime(2021, 9, 15, 18, 3, 42, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 709450393, 'comment_body': ""```suggestion\r\n      public: virtual const math::Color &BackgroundColor() const = 0;\r\n```\r\nnit: return a reference here so that the `math::Color` object isn't copied?"", 'comment_created': datetime.datetime(2021, 9, 15, 18, 7, 32, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 709452412, 'comment_body': ""If a method in the `BaseSegmentationCamera` class has an empty implementation, I think that it's better to mark the method as pure virtual in `BaseSegmentationCamera` and then have the rendering engine implementation handle the method definition"", 'comment_created': datetime.datetime(2021, 9, 15, 18, 10, 3, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 709458463, 'comment_body': '```suggestion\r\n    /// \\brief Segmentation camera used to label each pixel with a label id.\r\n    /// Supports Semantic / Panoptic Segmentation\r\n```', 'comment_created': datetime.datetime(2021, 9, 15, 18, 19, 10, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 709460812, 'comment_body': '```suggestion\r\n      /// \\brief Make scene our friend so it can create a camera\r\n      private: friend class Ogre2Scene;\r\n```', 'comment_created': datetime.datetime(2021, 9, 15, 18, 22, 30, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 709481666, 'comment_body': ""```suggestion\r\n  /// \\brief Convert label of semantic map to a unique color for colored map and\r\n  /// add the color of the label to the taken colors if it doesn't exist\r\n```"", 'comment_created': datetime.datetime(2021, 9, 15, 18, 43, 53, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 709482795, 'comment_body': '```suggestion\r\n  /// \\brief Check if the color is already taken and add it to taken colors\r\n  /// if it does not exist\r\n```', 'comment_created': datetime.datetime(2021, 9, 15, 18, 45, 32, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 709482948, 'comment_body': '```suggestion\r\n  /// \\return True if taken, False otherwise\r\n```', 'comment_created': datetime.datetime(2021, 9, 15, 18, 45, 48, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 709483866, 'comment_body': 'ogre v1? It that a typo? This is an ogre2 implementation', 'comment_created': datetime.datetime(2021, 9, 15, 18, 46, 58, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 709483969, 'comment_body': 'ogre v1? It that a typo? This is an ogre2 implementation', 'comment_created': datetime.datetime(2021, 9, 15, 18, 47, 9, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 709485378, 'comment_body': ""It looks like this is only used once (https://github.com/AmrElsersy/ign-rendering/blob/3d24d2c7975ca569b3eb06ce7a750a35d010cb71/ogre2/src/Ogre2SegmentationCamera.cc#L335), so I don't think we need a variable for this"", 'comment_created': datetime.datetime(2021, 9, 15, 18, 49, 9, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 709486321, 'comment_body': '```suggestion\r\n  /// \\brief keep track of the labels which are already colored.\r\n  /// Useful for coloring items in semantic mode in LabelToColor()\r\n```', 'comment_created': datetime.datetime(2021, 9, 15, 18, 50, 33, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 709487499, 'comment_body': '```suggestion\r\n  /// or composite id (8 bit label + 16 bit instances) in instance type\r\n```', 'comment_created': datetime.datetime(2021, 9, 15, 18, 52, 21, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 709519962, 'comment_body': ""I understand that if it's a multi link model, all links should have the same color, but shouldn't there still be a check to make sure that this is a unique color before returning it? "", 'comment_created': datetime.datetime(2021, 9, 15, 19, 42, 40, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 709523594, 'comment_body': ""```suggestion\r\n          // semantic material (each pixel has item's color)\r\n```"", 'comment_created': datetime.datetime(2021, 9, 15, 19, 48, 14, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 709534829, 'comment_body': '```suggestion\r\n        auto it = this->instancesCount.find(label);\r\n        if (it == this->instancesCount.end())\r\n          it = this->instancesCount.insert(std::make_pair(label, 0)).first;\r\n\r\n        // Multi link model has many links with the same first name and should\r\n        // have the same pixels color\r\n        bool isMultiLink = false;\r\n        if (parentName == prevParentName)\r\n        {\r\n          isMultiLink = true;\r\n        }\r\n        else\r\n        {\r\n          it->second++;\r\n          prevParentName = parentName;\r\n        }\r\n\r\n        int instanceCount = it->second;\r\n```\r\nConsider using [insert](https://en.cppreference.com/w/cpp/container/unordered_map/insert) and an iterator to avoid excess lookups', 'comment_created': datetime.datetime(2021, 9, 15, 20, 6, 17, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 709536375, 'comment_body': ""nit: I don't think that `int` is always guaranteed to be 64 bits. Most of the time, it probably will be, but this is really platform dependent. If you need to guarantee a 64 bit int, consider using [int64_t](https://en.cppreference.com/w/cpp/types/integer). If you don't need to guarantee a 64 bit int, then can you update the comment to say int instead of int64?"", 'comment_created': datetime.datetime(2021, 9, 15, 20, 8, 57, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 709537187, 'comment_body': ""Also, `compositeId` is only used in the `else` block below, so can you move it to the `else` block so that it's only created when needed?"", 'comment_created': datetime.datetime(2021, 9, 15, 20, 10, 8, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 709538973, 'comment_body': ""can you add some more comments/documentation about what these calculations are doing, and why you are using the calculations you chose? I think it's a little confusing to understand without more context"", 'comment_created': datetime.datetime(2021, 9, 15, 20, 13, 11, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 709541452, 'comment_body': '```suggestion\r\n  // restore item to use pbs hlms material\r\n  for (const auto &[subItem, dataBlock] : this->datablockMap)\r\n    subItem->setDatablock(dataBlock);\r\n```', 'comment_created': datetime.datetime(2021, 9, 15, 20, 17, 23, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 709546167, 'comment_body': ""Should we also check if `this->dataPtr->ogreCompositorManager` isn't `nullptr` and clean that up accordingly?"", 'comment_created': datetime.datetime(2021, 9, 15, 20, 24, 42, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 709547405, 'comment_body': ""```suggestion\r\n    ogreCompMgr->removeWorkspace(\r\n        this->dataPtr->ogreCompositorWorkspace);\r\n    this->dataPtr->ogreCompositorWorkspace = nullptr;\r\n```\r\nnit: set to null after cleanup? I'm not sure if `delete` should also be called here since the pointer was retrieved via [`ogreCompositorManager->addWorkspace`](https://github.com/AmrElsersy/ign-rendering/blob/3d24d2c7975ca569b3eb06ce7a750a35d010cb71/ogre2/src/Ogre2SegmentationCamera.cc#L632-L633)"", 'comment_created': datetime.datetime(2021, 9, 15, 20, 26, 40, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 709547801, 'comment_body': ""```suggestion\r\n    Ogre::TextureManager::getSingleton().remove(\r\n        this->dataPtr->ogreRenderTexture->getName());\r\n    this->dataPtr->ogreRenderTexture = nullptr;\r\n```\r\nnit: set to null after cleanup? I'm not sure if `delete` should also be called here since the pointer was retrieved via [`hardwareBuffer->getRenderTarget()`](https://github.com/AmrElsersy/ign-rendering/blob/3d24d2c7975ca569b3eb06ce7a750a35d010cb71/ogre2/src/Ogre2SegmentationCamera.cc#L609)"", 'comment_created': datetime.datetime(2021, 9, 15, 20, 27, 20, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 709550504, 'comment_body': ""Should this be here? I don't think it hurts to take it out. That way, we ensure that everything else is destroyed/cleaned up, even if the ogreCamera is nullptr"", 'comment_created': datetime.datetime(2021, 9, 15, 20, 31, 33, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 709553000, 'comment_body': '```suggestion\r\n    ogreCompMgr->removeWorkspaceDefinition(\r\n        this->dataPtr->workspaceDefinition);\r\n    this->workspaceDefinition = """";\r\n```', 'comment_created': datetime.datetime(2021, 9, 15, 20, 35, 27, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 709556254, 'comment_body': ""```suggestion\r\n  if (this->dataPtr->buffer)\r\n    delete [] this->dataPtr->buffer;\r\n  this->dataPtr->buffer = new uint8_t[bufferSize];\r\n  if (this->dataPtr->pixelBox)\r\n    delete this->dataPtr->pixelBox;\r\n  this->dataPtr->pixelBox = new Ogre::PixelBox(width, height, 1,\r\n    this->dataPtr->format, this->dataPtr->buffer);\r\n```\r\nsanity check: make sure the pointers haven't already allocated memory before re-allocating here in order to prevent memory leaks"", 'comment_created': datetime.datetime(2021, 9, 15, 20, 40, 42, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 709559225, 'comment_body': ""Is there a particular reason why this is a pointer? I don't believe that is needs to be a pointer. I think it can be just a `Ogre::PixelBox`"", 'comment_created': datetime.datetime(2021, 9, 15, 20, 44, 53, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 709560787, 'comment_body': ""Is this needed? I see that it's initialized in `Ogre2SegmentationCamera::CreateRenderTexture`, but I never see it actually being used"", 'comment_created': datetime.datetime(2021, 9, 15, 20, 47, 27, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 709564376, 'comment_body': '```suggestion\r\n  const auto &colorToLabel = this->dataPtr->materialSwitcher->colorToLabel;\r\n```\r\nnit: use a reference here to avoid unnecessary copy', 'comment_created': datetime.datetime(2021, 9, 15, 20, 52, 44, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 709567949, 'comment_body': ""I'm seeing this conversion between color -> ID and ID -> color pop up several times throughout the code. How about we create methods for these conversions: `ColorToId` and `IdToColor`? That way, we don't have to worry about fully typing out the conversion formula every time we need it (we can just call the method). Calling a method will help ensure no bugs that could arise from entering the formula incorrectly at some point elsewhere in the code"", 'comment_created': datetime.datetime(2021, 9, 15, 20, 58, 15, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 709570915, 'comment_body': '```suggestion\r\n  ASSERT_NE(nullptr, camera);\r\n```', 'comment_created': datetime.datetime(2021, 9, 15, 21, 3, 9, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 709573307, 'comment_body': 'We should probably make sure that `_renderEngine` is ogre2 since the segmentation camera has only been implemented in ogre2', 'comment_created': datetime.datetime(2021, 9, 15, 21, 6, 52, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 709574059, 'comment_body': '```suggestion\r\n/// the 2 outer boxes have the same label & the middle is different\r\n```', 'comment_created': datetime.datetime(2021, 9, 15, 21, 8, 4, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 709575276, 'comment_body': '```suggestion\r\n  // Only ogre2 is supported\r\n  if (_renderEngine.compare(""ogre2"") != 0)\r\n  {\r\n    igndbg << ""Engine \'"" << _renderEngine\r\n              << ""\' doesn\'t support segmentation cameras"" << std::endl;\r\n    return;\r\n  }\r\n```\r\nThe only engine we currently support for segmentation camera is ogre2, so we should check for this before proceeding', 'comment_created': datetime.datetime(2021, 9, 15, 21, 9, 59, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 709576115, 'comment_body': '```suggestion\r\n    igndbg << ""Failed to create scene with engine `"" << _renderEngine << ""`\\n"";\r\n```', 'comment_created': datetime.datetime(2021, 9, 15, 21, 11, 15, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 709577303, 'comment_body': '```suggestion\r\n  ignition::rendering::ScenePtr scene = engine->CreateScene(""scene"");\r\n  ASSERT_NE(nullptr, scene);\r\n  BuildScene(scene);\r\n```', 'comment_created': datetime.datetime(2021, 9, 15, 21, 12, 33, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 709577566, 'comment_body': '```suggestion\r\n  camera->SetSegmentationType(SegmentationType::ST_SEMANTIC);\r\n  EXPECT_EQ(camera->Type(), SegmentationType::ST_SEMANTIC);\r\n```', 'comment_created': datetime.datetime(2021, 9, 15, 21, 12, 56, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 709578128, 'comment_body': ""```suggestion\r\n  double aspectRatio = static_cast<double>(width) / static_cast<double>(height);\r\n```\r\nIn order to get proper division here, the ints need to be casted to doubles before dividing. Otherwise, integer division will occur, resulting in `1`, and then `1` will be converted to a double when assigned to `aspectRatio`. Here's an example of what I'm describing: https://godbolt.org/z/6dcMKqhrW"", 'comment_created': datetime.datetime(2021, 9, 15, 21, 13, 13, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 709584302, 'comment_body': '```suggestion\r\n  // Update once to create image\r\n  camera->Update();\r\n  EXPECT_EQ(1, g_counter);\r\n```', 'comment_created': datetime.datetime(2021, 9, 15, 21, 21, 17, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 709585170, 'comment_body': ""```suggestion\r\n  // cast the unsigned char to unsigned int to read it\r\n  uint8_t leftLabel =   g_buffer[leftIndex];\r\n  uint8_t rightLabel =  g_buffer[rightIndex];\r\n  uint8_t middleLabel = g_buffer[middleIndex];\r\n\r\n  // check the label\r\n  EXPECT_EQ(leftLabel  , 1);\r\n  EXPECT_EQ(middleLabel, 2);\r\n  EXPECT_EQ(rightLabel , 1);\r\n\r\n  // check if the first pixel(background) = the background label\r\n  int background = g_buffer[0];\r\n  EXPECT_EQ(background, backgroundLabel);\r\n```\r\nI don't think you need to lock/unlock the mutex since you're not calling `camera->Update`"", 'comment_created': datetime.datetime(2021, 9, 15, 21, 22, 48, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 709585845, 'comment_body': '```suggestion\r\n  // Instance/Panoptic test\r\n```', 'comment_created': datetime.datetime(2021, 9, 15, 21, 23, 57, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 709586246, 'comment_body': '```suggestion\r\n  // Update once to create image\r\n  g_counter = 0;\r\n  camera->Update();\r\n  EXPECT_EQ(1, g_counter);\r\n```', 'comment_created': datetime.datetime(2021, 9, 15, 21, 24, 45, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 709586928, 'comment_body': ""```suggestion\r\n  // check the label\r\n  EXPECT_EQ(leftLabel  , 1);\r\n  EXPECT_EQ(middleLabel, 2);\r\n  EXPECT_EQ(rightLabel , 1);\r\n\r\n  // instance count\r\n  EXPECT_EQ(middleCount, 1);\r\n  EXPECT_EQ(rightCount, 1);\r\n  EXPECT_EQ(leftCount, 2);\r\n```\r\nI don't think you need to lock/unlock the mutex since you're not calling `camera->Update`"", 'comment_created': datetime.datetime(2021, 9, 15, 21, 25, 56, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 709588645, 'comment_body': ""Can you add a comment that explains why `rightCount` is 1 and `leftCount` is 2 instead of it being the other way around? Is it due to the names of the left and right boxes, and how they're processed in the material switcher?"", 'comment_created': datetime.datetime(2021, 9, 15, 21, 28, 44, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 709660539, 'comment_body': ""@iche033 I went ahead and took your `TopLevelModelVisual` approach in https://github.com/ignitionrobotics/ign-rendering/pull/329/commits/4f0209d5697d7b58684a0772568c2e916fd1179f, and it seems to work well for models with multiple links. So, I'll mark this as resolved"", 'comment_created': datetime.datetime(2021, 9, 16, 0, 14, 11, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 711363326, 'comment_body': ""I think when we save the output image in the `ign-sensors::SegmentationCameraSensor` this will produce an Image with channels in the same order `(instanceColor2, instanceColor1, labelColor)` , and we don't want that, since the famous format of the panoptic map is to have the order `(labelColor, instanceColor1, instanceColor2)`\r\n\r\nso why is that reversing ?"", 'comment_created': datetime.datetime(2021, 9, 17, 21, 34, 41, tzinfo=datetime.timezone.utc), 'commenter': 'AmrElsersy', 'type': 'User'}, {'comment_id': 711385782, 'comment_body': ""It was reversed as part of the changes made for `ogre2.2`. If I recall correctly, tests were failing on Ogre2.2 before this change.\r\n\r\n> the famous format of the panoptic map is to have the order `(labelColor, instanceColor1, instanceColor2)`\r\n\r\nAre you saying that the label should be in the first channel, and the instance count should be the last two channels? If so, I think that the implementation you originally wrote is reverse. Looking at the integration test, the label is the last channel, and the instance count is the first 2 channels: https://github.com/AmrElsersy/ign-rendering/blob/segmentation/test/integration/segmentation_camera.cc#L215-L223\r\n\r\nIt's worth mentioning that although the order of the parameters were reversed for `Ogre2.2`, the code segment I linked above which checks for label/instance count did not change, so functionality/behavior should be the same on Ogre2.2 even though we had to update some API calls like this one."", 'comment_created': datetime.datetime(2021, 9, 17, 22, 38, 26, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 711389326, 'comment_body': 'Also, looking at your tutorial in `ign-sensors`, I see that the label is the last channel, and the instance count is in the first two channels: https://github.com/ignitionrobotics/ign-sensors/blob/7f8f045a7f39a13fccdb847b0aa55d70423cc3db/tutorials/05_segmentation_camera.md#processing-the-segmentation-sensor-via-ign-transport\r\n\r\nSo, I think that the change we had to make for Ogre2.2 is okay since this behavior of label in the last channel and instance count in first two channels is preserved', 'comment_created': datetime.datetime(2021, 9, 17, 22, 50, 34, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 711401024, 'comment_body': ""Yeah, It was reversed via the C++ API (when we loop over pixels), but when we get the image buffer and save it locally, the saved image was in the correct order (in the order of the parameters we passed `(labelColor, instanceColor1, instanceColor2)`) ... the order of the C++ API dosn't really matter, it is ok to be any order \r\n\r\nBut ok I will check the order in the saved images again"", 'comment_created': datetime.datetime(2021, 9, 17, 23, 37, 29, tzinfo=datetime.timezone.utc), 'commenter': 'AmrElsersy', 'type': 'User'}, {'comment_id': 712382856, 'comment_body': ""yeah it was reversed as the test was expecting the label to be in the 3rd channel. Same thing was done to the bounding camera when converting it to ogre 2.2. I never ran the tests before the conversion though. so I don't know if it was passing or not. How about adding a brief comment documenting what each component in the pixel is in the public API? https://github.com/ignitionrobotics/ign-rendering/blob/4ed1b40b0985b20e43388506080f1e268520e5d8/include/ignition/rendering/SegmentationCamera.hh#L62"", 'comment_created': datetime.datetime(2021, 9, 20, 17, 44, 14, tzinfo=datetime.timezone.utc), 'commenter': 'iche033', 'type': 'User'}, {'comment_id': 712456092, 'comment_body': ""> the test was expecting the label to be in the 3rd channel. Same thing was done to the bounding camera when converting it to ogre 2.2. I never ran the tests before the conversion though. so I don't know if it was passing or not.\r\n\r\nYes, you're right about the test expecting the label to be in the 3rd channel. The tests were passing before the conversion to ogre 2.2, so the changes you made for the ogre 2.2 conversion are okay :+1: \r\n\r\n> How about adding a brief comment documenting what each component in the pixel is in the public API?\r\n\r\nDone: https://github.com/ignitionrobotics/ign-rendering/pull/329/commits/3e3711bd49c6641a5a78247eac71a93676e0481b"", 'comment_created': datetime.datetime(2021, 9, 20, 19, 33, 11, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}]","[{'commit_sha': '8813531a2df28210d292445afc4f5081806b3f8d', 'committer_username': 'AmrElsersy', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 19, 21, 42, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'df77bf5ef752e5c0489973d9f856184df5a1d081', 'committer_username': 'adlarkin', 'committer_name': 'Ashton Larkin', 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 2, 17, 1, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6dd5624e93a5ed096cbccd119ca257e15dc82cac', 'committer_username': 'AmrElsersy', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 19, 21, 42, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '53dec8d7f856837c4814edc1cb2922c43ddbf9f8', 'committer_username': 'AmrElsersy', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 19, 21, 42, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ec14e66feaef207ed504c5a525c73ffe70511a6e', 'committer_username': 'AmrElsersy', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 19, 21, 42, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '05913c491ea183a1dd7e5448341d2c7685f6aba0', 'committer_username': 'AmrElsersy', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 19, 21, 42, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '12408598dc1f7d3fb9a639e8439ce69f13235613', 'committer_username': 'AmrElsersy', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 19, 21, 42, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'df6eda1113c32bad612f03789be48d3232ca52cd', 'committer_username': 'adlarkin', 'committer_name': 'Ashton Larkin', 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 2, 17, 1, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f4f376101f48bf4586630ab69d0e031123e8a1fc', 'committer_username': 'AmrElsersy', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 19, 21, 42, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1cef1921eeb17f563e9f861b94ce28fee0c19c08', 'committer_username': 'AmrElsersy', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 19, 21, 42, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b8415a3fd401f85b48162a39aed0d3911816e454', 'committer_username': 'AmrElsersy', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 19, 21, 42, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '81390287bd4ad743b63236a8254b56b58f95de11', 'committer_username': 'adlarkin', 'committer_name': 'Ashton Larkin', 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 2, 17, 1, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': '798c0edb1fe00202833a15e7da93b95e259c6f99', 'committer_username': 'AmrElsersy', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 19, 21, 42, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '35f5dfdf1af4679486bfe0b9597140c53b7b8c39', 'committer_username': 'adlarkin', 'committer_name': 'Ashton Larkin', 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 2, 17, 1, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3d24d2c7975ca569b3eb06ce7a750a35d010cb71', 'committer_username': 'AmrElsersy', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 19, 21, 42, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b18f3775dcfdb2bfb5add63c4a735193196431e1', 'committer_username': 'AmrElsersy', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 19, 21, 42, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ac4b60474fc33cd54d6f6331d7d2c8cbef2ac7b8', 'committer_username': 'adlarkin', 'committer_name': 'Ashton Larkin', 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 2, 17, 1, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4f0209d5697d7b58684a0772568c2e916fd1179f', 'committer_username': 'adlarkin', 'committer_name': 'Ashton Larkin', 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 2, 17, 1, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2cbfe914da828563c151fbae89ad4eda13ca80c8', 'committer_username': 'adlarkin', 'committer_name': 'Ashton Larkin', 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 2, 17, 1, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'de63a5600cb967261365b57f03826a3fecb25564', 'committer_username': 'mjcarroll', 'committer_name': 'Michael Carroll', 'committer_email': 'mjcarroll@intrinsic.ai', 'commit_date': datetime.datetime(2010, 5, 17, 21, 25, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4ff40eed61bb9258ac9b6d8efe9d63b35fca5c52', 'committer_username': 'mjcarroll', 'committer_name': 'Michael Carroll', 'committer_email': 'mjcarroll@intrinsic.ai', 'commit_date': datetime.datetime(2010, 5, 17, 21, 25, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '05da8049e3ab2af6dcf30f4654af948978c42ef5', 'committer_username': 'mjcarroll', 'committer_name': 'Michael Carroll', 'committer_email': 'mjcarroll@intrinsic.ai', 'commit_date': datetime.datetime(2010, 5, 17, 21, 25, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3dff4dc23e10b7f4fe525ed55a4e11ae6ebbbd9b', 'committer_username': 'mjcarroll', 'committer_name': 'Michael Carroll', 'committer_email': 'mjcarroll@intrinsic.ai', 'commit_date': datetime.datetime(2010, 5, 17, 21, 25, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8f90b625a2232e6b724f4a6006e34d2086ba017b', 'committer_username': 'mjcarroll', 'committer_name': 'Michael Carroll', 'committer_email': 'mjcarroll@intrinsic.ai', 'commit_date': datetime.datetime(2010, 5, 17, 21, 25, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3c2e70b1de7d2698fd55f07e0eb2c097e9374c72', 'committer_username': 'mjcarroll', 'committer_name': 'Michael Carroll', 'committer_email': 'mjcarroll@intrinsic.ai', 'commit_date': datetime.datetime(2010, 5, 17, 21, 25, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5e78c7657c092010495d09092a0484fa817d0db6', 'committer_username': 'mjcarroll', 'committer_name': 'Michael Carroll', 'committer_email': 'mjcarroll@intrinsic.ai', 'commit_date': datetime.datetime(2010, 5, 17, 21, 25, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c4e06851605bda75e2ca45a35f0e9bd86fbd7f2f', 'committer_username': 'iche033', 'committer_name': 'Ian Chen', 'committer_email': None, 'commit_date': datetime.datetime(2013, 3, 28, 22, 46, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e185ecd74c3dd979a06740d54fd010bf146eb15b', 'committer_username': 'adlarkin', 'committer_name': 'Ashton Larkin', 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 2, 17, 1, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': '31547f97b44055e9f861e579e1ea9a2953f79f55', 'committer_username': 'adlarkin', 'committer_name': 'Ashton Larkin', 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 2, 17, 1, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8f25b092d70eaf5ce0318197d1d437a14534971b', 'committer_username': 'adlarkin', 'committer_name': 'Ashton Larkin', 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 2, 17, 1, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4ed1b40b0985b20e43388506080f1e268520e5d8', 'committer_username': 'adlarkin', 'committer_name': 'Ashton Larkin', 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 2, 17, 1, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3e3711bd49c6641a5a78247eac71a93676e0481b', 'committer_username': 'adlarkin', 'committer_name': 'Ashton Larkin', 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 2, 17, 1, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e6e7579815f4d54c6a2876b1a8f0944890639b11', 'committer_username': 'iche033', 'committer_name': 'Ian Chen', 'committer_email': None, 'commit_date': datetime.datetime(2013, 3, 28, 22, 46, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b40fa21cbd7de22d009c438be574b4e787afb3bc', 'committer_username': 'adlarkin', 'committer_name': 'Ashton Larkin', 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 2, 17, 1, 37, tzinfo=datetime.timezone.utc)}]",,35613645,,User,,53,,9,85
668984484,Add segmentation and bounding box sensor types,"# üéâ New feature

related to [#134](https://github.com/ignitionrobotics/ign-sensors/issues/134) [#135](https://github.com/ignitionrobotics/ign-sensors/issues/135)

## Summary
Added new types for SDF::Sensor to support Segmentation & BoundingBox Sensors

## Checklist
- [x] Signed all commits for DCO
- [ ] Added tests
- [ ] Added example and/or tutorial
- [ ] Updated documentation (as needed)
- [ ] Updated migration guide (as needed)
- [x] Code check passed (In source directory, run `sh tools/code_check.sh`)
- [x] All tests passed (See [test coverage](https://ignitionrobotics.org/docs/all/contributing#test-coverage))
- [ ] While waiting for a review on your PR, please help review

",True,592,https://api.github.com/repos/gazebosim/sdformat/pulls/592,https://github.com/gazebosim/sdformat/pull/592,closed,326,2,10,16,9,35,1,2,[{'name': 'üèØ fortress'}],2021-06-13 03:34:49+00:00,2021-08-19 01:54:11+00:00,5782762.0,"66 days, 22:19:22","[{'comment_id': 671887182, 'comment_body': 'nit: remove this extra empty line', 'comment_created': datetime.datetime(2021, 7, 18, 19, 33, 44, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 671887389, 'comment_body': '```suggestion\r\n\r\n```\r\nnit: only have one new line separating the sensors instead of two new lines', 'comment_created': datetime.datetime(2021, 7, 18, 19, 35, 32, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 671887941, 'comment_body': 'Codecheck is failing on this line:\r\n```\r\n./test/integration/link_dom.cc:362:  Lines should be <= 80 characters long  [whitespace/line_length] [2]\r\n```', 'comment_created': datetime.datetime(2021, 7, 18, 19, 40, 23, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 681374773, 'comment_body': '```suggestion\r\n        - 2d | visible_2d | visible_box_2d: a visible 2d box mode which provides axis aligned 2d boxes\r\n```', 'comment_created': datetime.datetime(2021, 8, 3, 1, 48, 21, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 681374849, 'comment_body': '```suggestion\r\n        - full_2d | full_box_2d: a full 2d box mode which provides axis aligned 2d boxes that fills the\r\n```', 'comment_created': datetime.datetime(2021, 8, 3, 1, 48, 37, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 681374945, 'comment_body': '```suggestion\r\n                                 object dimensions, even if it has an occluded part\r\n```', 'comment_created': datetime.datetime(2021, 8, 3, 1, 48, 53, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 681375298, 'comment_body': 'Are the 3D bounding boxes supposed to be full or visible? We should add this information to the documentation', 'comment_created': datetime.datetime(2021, 8, 3, 1, 49, 52, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 681375794, 'comment_body': '```suggestion\r\n  <description>These elements are specific to a boundingbox camera sensor.</description>\r\n```', 'comment_created': datetime.datetime(2021, 8, 3, 1, 50, 52, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 681376011, 'comment_body': '```suggestion\r\n      The boundingbox type of the boundingbox camera. Valid options are:\r\n```', 'comment_created': datetime.datetime(2021, 8, 3, 1, 51, 26, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 681376274, 'comment_body': '```suggestion\r\n  <description>These elements are specific to a segmentation camera sensor.</description>\r\n```', 'comment_created': datetime.datetime(2021, 8, 3, 1, 52, 17, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 681376496, 'comment_body': '```suggestion\r\n      The segmentation type of the segmentation camera. Valid options are:\r\n```', 'comment_created': datetime.datetime(2021, 8, 3, 1, 52, 52, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 681377497, 'comment_body': '```suggestion\r\n        - semantic: Semantic segmentation, which provides 2 images:\r\n                    1. A gray image, with the pixel values representing the label of an object\r\n                    2. A colored image, with the pixel values being a unique color for each label\r\n```', 'comment_created': datetime.datetime(2021, 8, 3, 1, 55, 34, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 681381939, 'comment_body': '```suggestion\r\n        - panoptic | instance: Panoptic segmentation, which provides 2 images:\r\n                               1. A 3-channel image, where each pixel has 1 channel for the label value of the object and 2 channels for the number of the instances of that label\r\n                               2. A colored image, with the pixel values being a unique color for each instance\r\n```\r\n\r\n@chapulina or @azeey: for the 3-channel image described here, should we specify which channel is associated with the label and which 2 channels are associated with the instance count? Or should we not define this here so that it can be defined by downstream users of SDF?', 'comment_created': datetime.datetime(2021, 8, 3, 2, 9, 32, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 681382994, 'comment_body': ""Can we also test the unique elements for a segmentation sensor (`segmentation_type`)? You'll need to add the unique elements to `test/sdf/sensors.sdf`"", 'comment_created': datetime.datetime(2021, 8, 3, 2, 13, 16, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 681383209, 'comment_body': ""Can we also test the unique elements for a boundingbox sensor (`box_type`)? You'll need to add the unique elements to `test/sdf/sensors.sdf`"", 'comment_created': datetime.datetime(2021, 8, 3, 2, 13, 55, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 687318067, 'comment_body': 'Full, because they are a real 3d position and dimentions ... there is no meaning in visible concept here ... no body will suppose the visible concept in the 3d', 'comment_created': datetime.datetime(2021, 8, 12, 2, 18, 23, tzinfo=datetime.timezone.utc), 'commenter': 'AmrElsersy', 'type': 'User'}, {'comment_id': 687319332, 'comment_body': 'We discussed that before in the above comments, we agreed that the approach of accessing that types from ign-sensors (via the SDF API) should be fine\r\n\r\nhere\r\n> I do these configurations in ign-sensors, by getting them through the SDF\r\n> like that: https://github.com/ignitionrobotics/ign-sensors/pull/133/files#diff-3a47a41297adece53d9e25cb71940e30d655d1a491020c1a8fe918a4f1a95ac2R146\r\n> \r\n> ```c++\r\n> std::string type = sdfElement->Get<std::string>(""segmentation_type"");\r\n> ```\r\n> \r\n> is that a bad way to do that ? :D\r\n\r\nto add this unique elements, i think I should create a new SDF sensor type for the semgnetation type for example', 'comment_created': datetime.datetime(2021, 8, 12, 2, 22, 26, tzinfo=datetime.timezone.utc), 'commenter': 'AmrElsersy', 'type': 'User'}, {'comment_id': 687319404, 'comment_body': 'same', 'comment_created': datetime.datetime(2021, 8, 12, 2, 22, 38, tzinfo=datetime.timezone.utc), 'commenter': 'AmrElsersy', 'type': 'User'}, {'comment_id': 688228488, 'comment_body': ""Hmm okay so after looking through the SDF repo for a bit, I actually think that there's a better way than `sdfElement->Get<std::string>` for retrieving the unique element that's associated with a sensor. I think that we should follow the `depth_camera` as an example for creating a camera with a few custom parameters.\r\n\r\nIf we look at the `depth_camera`, it has a few unique elements on top of all the other `camera` elements: https://github.com/ignitionrobotics/sdformat/blob/sdformat11_11.2.2/sdf/1.8/camera.sdf#L47-L63\r\n\r\nThese unique elements are accessed via getters/setters in the `sdf::Camera` class:\r\n* https://github.com/ignitionrobotics/sdformat/blob/sdformat11_11.2.2/include/sdf/Camera.hh#L139-L153\r\n* https://github.com/ignitionrobotics/sdformat/blob/sdformat11_11.2.2/include/sdf/Camera.hh#L163-L189\r\n\r\nHere's an example of how this looks in sdf (notice `depth_camera` being used in lines 54-59):\r\n* https://github.com/osrf/subt/blob/bff4f4898fa9c2aabeef1b69833d7cf04ee356fa/submitted_models/ctu_cras_norlab_absolem_sensor_config_1/urdf/realsense.gazebo.xacro#L25-L69\r\n\r\n---\r\n\r\nSo, I think we should actually do the following:\r\n1. Add getters/setters to the `sdf::Camera` class for the segmentation and bounding box types\r\n2. Update the camera SDF docs (`sdf/1.9/camera.sdf`) to include unique elements for segmentation and bounding box cameras (see the [depth camera elements](https://github.com/ignitionrobotics/sdformat/blob/sdformat11_11.2.2/sdf/1.8/camera.sdf#L47-L63) as an example). This shouldn't be too difficult - just move the content of your new `sdf/1.9/*.sdf` files over to `sdf/1.9/camera.sdf`. Once everything is moved to `sdf/1.9/camera.sdf`, you can delete the other `sdf/1.9/*.sdf` files that you created and also remove lines [60](https://github.com/ignitionrobotics/sdformat/blob/178ae03abe3f93d1a9eb89b49e68093c52b20b3d/sdf/1.9/sensor.sdf#L60) and [72](https://github.com/ignitionrobotics/sdformat/blob/178ae03abe3f93d1a9eb89b49e68093c52b20b3d/sdf/1.9/sensor.sdf#L72) from `sdf/1.9/sensors.sdf` \r\n3. Update SDF files that use these sensors (both in this PR and other PRs) to call the unique elements (`segmentation_type` and `box_type`) inside of the `<camera>` element instead of the `<sensor>` element, since we are adding this functionality to the `sdf::Camera` class\r\n4. Update the `sdf::Camera` unit test to cover these new getters/setters (example from the `depth_camera` elements: https://github.com/ignitionrobotics/sdformat/blob/sdformat11_11.2.2/src/Camera_TEST.cc#L45-L55)\r\n5. Double-check all other related PRs that use these sensors and update them to use the newly added `sdf::Camera` APIs as needed\r\n\r\nHere's the commit that adds a few unique elements to `depth_camera` that you can use as a reference/example: https://github.com/ignitionrobotics/sdformat/commit/1cbdfe4121f9b4bb51ddfeb0bac9bd6a0153e2a6#\r\n\r\nAfter you make these changes, we should no longer need to use `sdfElement->Get<std::string>` for getting the segmentation and bounding box type elements (it will now be a part of the `sdf::Camera` API). Let me know if you have any questions!"", 'comment_created': datetime.datetime(2021, 8, 13, 4, 4, 19, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 688228563, 'comment_body': 'See https://github.com/ignitionrobotics/sdformat/pull/592#discussion_r688228488', 'comment_created': datetime.datetime(2021, 8, 13, 4, 4, 34, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 690015385, 'comment_body': '```suggestion\r\n    /// \\return The segmentation type.\r\n```', 'comment_created': datetime.datetime(2021, 8, 17, 3, 57, 16, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 690015702, 'comment_body': '```suggestion\r\n    public: void SetSegmentationType(const std::string &_type);\r\n```', 'comment_created': datetime.datetime(2021, 8, 17, 3, 58, 15, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 690015826, 'comment_body': '```suggestion\r\n    /// \\return The boundingbox type.\r\n```', 'comment_created': datetime.datetime(2021, 8, 17, 3, 58, 45, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 690015952, 'comment_body': '```suggestion\r\n    public: void SetBoundingBoxType(const std::string &_type);\r\n```', 'comment_created': datetime.datetime(2021, 8, 17, 3, 59, 10, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 690016247, 'comment_body': '```suggestion\r\n                    1. A grayscale image, with the pixel values representing the label of an object\r\n```', 'comment_created': datetime.datetime(2021, 8, 17, 4, 0, 15, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 690016472, 'comment_body': '```suggestion\r\n        - panoptic | instance: Panoptic segmentation, which provides an image where each pixel\r\n```', 'comment_created': datetime.datetime(2021, 8, 17, 4, 0, 59, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 690018390, 'comment_body': ""This doesn't seem related to this PR, can it be removed?"", 'comment_created': datetime.datetime(2021, 8, 17, 4, 7, 26, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 690019328, 'comment_body': 'Can you also add test coverage for the `SetHasSegmentationType` and `SetHasBoundingBoxType` methods?', 'comment_created': datetime.datetime(2021, 8, 17, 4, 10, 20, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 690020351, 'comment_body': '```suggestion\r\n  EXPECT_EQUAL(""semantic"", cam.SegmentationType());\r\n  cam.SetSegmentationType(""panoptic"");\r\n```\r\nThe segmentation type should be `semantic` by default according to `sdf/1.9/camera.sdf`, so, can you check that the default value is correct and then test setting it to something that\'s not the default value?', 'comment_created': datetime.datetime(2021, 8, 17, 4, 13, 51, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 690020822, 'comment_body': '```suggestion\r\n  EXPECT_EQ(""2d"", cam.BoundingBoxType())\r\n  cam.SetBoundingBoxType(""3d"");\r\n```\r\nThe bbox type is `2d` by default according to `sdf/1.9/camera.sdf`, so can you check that the default value is correct first before setting it to a different type?', 'comment_created': datetime.datetime(2021, 8, 17, 4, 15, 20, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 690023165, 'comment_body': '```suggestion\r\n  EXPECT_EQ(""my_segmentation_camera"", segmentationCameraSensor->Name());\r\n  EXPECT_TRUE(segmentationCameraSensor->HasSegmentationType());\r\n  EXPECT_EQ(""semantic"", segmentationCameraSensor->SegmentationType());\r\n```\r\nNow that the segmentation type is a part of the `sdf::Camera` API, can you add a check for the camera\'s segmentation type?', 'comment_created': datetime.datetime(2021, 8, 17, 4, 23, 40, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 690024170, 'comment_body': '```suggestion\r\n  EXPECT_EQ(""my_boundingbox_camera"", boundingboxCamSensor->Name());\r\n  EXPECT_TRUE(boundingboxCamSensor->HasBoundingBoxType());\r\n  EXPECT_EQ(""2d"", boundingboxCamSensor->BoundingBoxType());\r\n```\r\nNow that the bbox type is a part of the sdf::Camera API, can you add a check for the camera\'s bbox type?', 'comment_created': datetime.datetime(2021, 8, 17, 4, 27, 10, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 690025552, 'comment_body': 'these variables should be initialized to their default values that were specified in `sdf/1.9/camera.sdf`', 'comment_created': datetime.datetime(2021, 8, 17, 4, 31, 51, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 691594900, 'comment_body': 'nit: Can this return a `const std::string &`?', 'comment_created': datetime.datetime(2021, 8, 18, 20, 52, 44, tzinfo=datetime.timezone.utc), 'commenter': 'azeey', 'type': 'User'}, {'comment_id': 691595107, 'comment_body': 'nit: Can this return a `const std::string &`?', 'comment_created': datetime.datetime(2021, 8, 18, 20, 53, 8, tzinfo=datetime.timezone.utc), 'commenter': 'azeey', 'type': 'User'}]","[{'commit_sha': 'f84427ce38a559f0cfafc675d8521e3baa00a2cf', 'committer_username': 'AmrElsersy', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 19, 21, 42, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '77df1c61d075e0f663b69de55534d8634f178b19', 'committer_username': 'AmrElsersy', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 19, 21, 42, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '644657a3299f406615a1aadb6be3642c1b0e2738', 'committer_username': 'AmrElsersy', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 19, 21, 42, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7e759ad9c4403390cb1a0fee1a05a48f99b6a647', 'committer_username': 'adlarkin', 'committer_name': 'Ashton Larkin', 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 2, 17, 1, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': '23629102ebb7a93bdfa684d7a4739f1366169ff9', 'committer_username': 'AmrElsersy', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 19, 21, 42, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '09b467f9d4ee1af093d9cc6b1f519eced4cd9a01', 'committer_username': 'AmrElsersy', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 19, 21, 42, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7dece88b8a274a3edf3e815e65ae5cebe8b1ffa3', 'committer_username': 'AmrElsersy', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 19, 21, 42, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e4c99e464966dbd15d9610c0ec589001eb4243e1', 'committer_username': 'AmrElsersy', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 19, 21, 42, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5bb366fb9e0ec26837cc89b03b6ca6b0856af4c2', 'committer_username': 'AmrElsersy', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 19, 21, 42, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9cca8df5279e19bde12406ebc1abc3d115d33b3b', 'committer_username': 'AmrElsersy', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 19, 21, 42, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '178ae03abe3f93d1a9eb89b49e68093c52b20b3d', 'committer_username': 'AmrElsersy', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 19, 21, 42, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7f5d9d0aed8dfec440d3302b4d1d737549dc4531', 'committer_username': 'AmrElsersy', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 19, 21, 42, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a7b5c14793a1595ba7075c38c7e520c68895d704', 'committer_username': 'AmrElsersy', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 19, 21, 42, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '99f2c61564aa593d8143838cf4d8dc0e6c07145b', 'committer_username': 'adlarkin', 'committer_name': 'Ashton Larkin', 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 2, 17, 1, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c400093eb2e4d2aa6889a05b2188ee5a46501e30', 'committer_username': 'AmrElsersy', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 19, 21, 42, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c705b8054b3a91569a3423bba1195f7f98aa100d', 'committer_username': 'AmrElsersy', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 19, 21, 42, 16, tzinfo=datetime.timezone.utc)}]",,35613645,,User,,53,,9,85
671847782,Add BoundingBox Msg,"# üéâ New feature

## Summary
Related to https://github.com/ignitionrobotics/ign-sensors/issues/135

Add BoundingBox Msg & BoundingBoxes Msg to be used in the BoundingBoxCameraSensor in [PR #136](https://github.com/ignitionrobotics/ign-sensors/pull/136)

## Checklist
- [x] Signed all commits for DCO
- [ ] Added tests
- [ ] Added example and/or tutorial
- [ ] Updated documentation (as needed)
- [ ] Updated migration guide (as needed)
- [x] `codecheck` passed (See [contributing](https://ignitionrobotics.org/docs/all/contributing#contributing-code))
- [x] All tests passed (See [test coverage](https://ignitionrobotics.org/docs/all/contributing#test-coverage))
- [ ] While waiting for a review on your PR, please help review [another open pull request](https://github.com/pulls?q=is%3Aopen+is%3Apr+user%3Aignitionrobotics+repo%3Aosrf%2Fsdformat+archived%3Afalse+) to support the maintainers",True,165,https://api.github.com/repos/gazebosim/gz-msgs/pulls/165,https://github.com/gazebosim/gz-msgs/pull/165,closed,238,0,6,5,2,22,1,2,[{'name': 'üèØ fortress'}],2021-06-16 20:04:07+00:00,2021-08-18 20:37:38+00:00,5445211.0,"63 days, 0:33:31","[{'comment_id': 653154842, 'comment_body': 'Is this using integers because the unit is pixels? I think it may be worth it using `double`s because often algorithms working on images return floating point values. Not sure what other people think.', 'comment_created': datetime.datetime(2021, 6, 17, 1, 10, 40, tzinfo=datetime.timezone.utc), 'commenter': 'chapulina', 'type': 'User'}, {'comment_id': 653155192, 'comment_body': 'Can we also add `min` / `max` `Z` values so the message can be used for 3D boxes too?', 'comment_created': datetime.datetime(2021, 6, 17, 1, 11, 42, tzinfo=datetime.timezone.utc), 'commenter': 'chapulina', 'type': 'User'}, {'comment_id': 653156465, 'comment_body': 'This message looks very similar to [AxisAlignedBox](https://github.com/ignitionrobotics/ign-msgs/blob/ign-msgs7/proto/ignition/msgs/axis_aligned_box.proto), except for this field. Have you considered nesting that message into the new message? For example, you could add a `SemanticBoundingBox` message that has an `AxisAlignedBox` and a label inside?', 'comment_created': datetime.datetime(2021, 6, 17, 1, 15, 27, tzinfo=datetime.timezone.utc), 'commenter': 'chapulina', 'type': 'User'}, {'comment_id': 653156973, 'comment_body': ""We've been using the `_v` convention for messages that hold an array of another message:\r\n\r\n```\r\ndouble_v.proto\r\nentity_factory_v.proto\r\nfloat_v.proto\r\nint32_v.proto\r\nint64_v.proto\r\nmarker_v.proto\r\nmodel_v.proto\r\nparam_v.proto\r\nplugin_v.proto\r\npose_v.proto\r\nsensor_v.proto\r\nstringmsg_v.proto\r\nuint32_v.proto\r\nuint64_v.proto\r\nvisual_v.proto\r\n```\r\n\r\nLet's use that pattern here too for consistency, instead of a plural"", 'comment_created': datetime.datetime(2021, 6, 17, 1, 17, 1, tzinfo=datetime.timezone.utc), 'commenter': 'chapulina', 'type': 'User'}, {'comment_id': 660055759, 'comment_body': 'Ok will do that ', 'comment_created': datetime.datetime(2021, 6, 28, 19, 23, 53, tzinfo=datetime.timezone.utc), 'commenter': 'AmrElsersy', 'type': 'User'}, {'comment_id': 660056776, 'comment_body': 'Actually the annotation boxes(in 3D specially) are not axis aligned, so I think we should support our own type.\r\nWe can discuss the approach in https://github.com/ignitionrobotics/ign-sensors/issues/135', 'comment_created': datetime.datetime(2021, 6, 28, 19, 25, 35, tzinfo=datetime.timezone.utc), 'commenter': 'AmrElsersy', 'type': 'User'}, {'comment_id': 662519502, 'comment_body': ""+1 for using `double` instead of `uint32` so that this message type can be used across various contexts (it's important to remember that while this PR may be creating a bounding box message type for https://github.com/ignitionrobotics/ign-sensors/issues/135, there may be others who use `ign-msgs` for projects of a different context)."", 'comment_created': datetime.datetime(2021, 7, 1, 18, 47, 35, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 662528504, 'comment_body': 'I think we should actually have separate message types for 2D and 3D messages - see https://github.com/ignitionrobotics/ign-sensors/issues/135#issuecomment-872480774', 'comment_created': datetime.datetime(2021, 7, 1, 19, 4, 10, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 671421451, 'comment_body': 'Oops typo\r\n\r\n```suggestion\r\nimport ""ignition/msgs/oriented_3d_box.proto"";\r\n```', 'comment_created': datetime.datetime(2021, 7, 16, 17, 36, 13, tzinfo=datetime.timezone.utc), 'commenter': 'chapulina', 'type': 'User'}, {'comment_id': 671423575, 'comment_body': 'We usually use this convention on 3D:\r\n\r\n* X: forward\r\n* Z: up\r\n\r\nI believe this would make the size be:\r\n\r\n```suggestion\r\n  /// \\brief The size of the bounding box on XYZ (depth/width/height)\r\n```', 'comment_created': datetime.datetime(2021, 7, 16, 17, 40, 4, tzinfo=datetime.timezone.utc), 'commenter': 'chapulina', 'type': 'User'}, {'comment_id': 671603978, 'comment_body': 'Actually i provide it in camera coord not world coord\r\n@chapulina ', 'comment_created': datetime.datetime(2021, 7, 17, 3, 52, 59, tzinfo=datetime.timezone.utc), 'commenter': 'AmrElsersy', 'type': 'User'}, {'comment_id': 671889217, 'comment_body': ""> Actually i provide it in camera coord not world coord\r\n\r\nIf that's the case, and @chapulina is okay with this being in camera coordinates, then would you mind adding a comment here that mentions this is in camera coordinates? However, I believe that the message types should be as generic as possible, so I wonder if it makes more sense to have it be in world coordinates instead of camera coordinates, and then updating code that uses this message type in other repositories to use world coordinates instead."", 'comment_created': datetime.datetime(2021, 7, 18, 19, 51, 49, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 671889348, 'comment_body': '```suggestion\r\n/*\r\n```\r\nnit: remove the empty line at the beginning of this file', 'comment_created': datetime.datetime(2021, 7, 18, 19, 52, 44, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 671889400, 'comment_body': '```suggestion\r\n/*\r\n```\r\n\r\nnit: remove the empty line at the beginning of this file', 'comment_created': datetime.datetime(2021, 7, 18, 19, 53, 20, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 671889536, 'comment_body': '```suggestion\r\n/*\r\n```\r\n\r\nnit: remove the empty line at the beginning of this file', 'comment_created': datetime.datetime(2021, 7, 18, 19, 54, 41, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 671889613, 'comment_body': '```suggestion\r\n/*\r\n```\r\n\r\nnit: remove the empty line at the beginning of this file', 'comment_created': datetime.datetime(2021, 7, 18, 19, 55, 23, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 671889771, 'comment_body': '```suggestion\r\n/*\r\n```\r\nnit: remove the empty line at the beginning of this file', 'comment_created': datetime.datetime(2021, 7, 18, 19, 56, 49, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 671889857, 'comment_body': '```suggestion\r\n/*\r\n```\r\nnit: remove the empty line at the beginning of this file', 'comment_created': datetime.datetime(2021, 7, 18, 19, 57, 36, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 671890011, 'comment_body': 'what coordinate frame is this in? Should we add a note about this in the documentation, or can this be application-specific, which means we should leave the documentation as-is? cc @chapulina ', 'comment_created': datetime.datetime(2021, 7, 18, 19, 59, 15, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 671910696, 'comment_body': 'ok, I want to clarify that the world coord that can be used is not the OGRE world coord ... but it must be a coordinates from the camera view, we should have the 3d boxes wrt the camera position and orientation\r\n\r\nwhat we are talking about now, is just changing the axes by multiplying with the matrix that swap the axes\r\n```\r\nmath::Matrix3d tf(\r\n  0, 0, -1,\r\n  -1, 0,  0,\r\n  0, 1,  0);\r\n```\r\n\r\nAnyway, when we use that code to generate a 3D dataset, usually datasets have a calibration file that maps lidar coord to camera coord or vise versa, so I think we will put a matrix that swaps the axes for conversion ', 'comment_created': datetime.datetime(2021, 7, 18, 23, 3, tzinfo=datetime.timezone.utc), 'commenter': 'AmrElsersy', 'type': 'User'}, {'comment_id': 672463168, 'comment_body': ""Gazebo and ROS generally use X-forward, Z-up convention, even for cameras. So strictly speaking, if you're using the camera frame, the X is sticking into the image and represents depth.\r\n\r\nThen besides that, there's an extra optical frame which is Z-forward, Y-down (like in most computer vision applications). If we're talking about the optical frame, then the original documentation is correct. \r\n\r\n[REP-103](https://www.ros.org/reps/rep-0103.html#id22) documents some frame conventions.\r\n\r\nCamera frames can get confusing, so I think it's worth making the frames clear on the message documentation. I don't have a preference about the frame, as long as it's documented.\r\n"", 'comment_created': datetime.datetime(2021, 7, 19, 16, 44, 20, tzinfo=datetime.timezone.utc), 'commenter': 'chapulina', 'type': 'User'}, {'comment_id': 675462816, 'comment_body': 'Ok, I used the 3d camera coordinates and documented the msg with that.\r\nBtw, I am trying to make the dataset generation to be in the same format of the famous datasets, and the 3d dataset am following is [KITTI dataset](http://www.cvlibs.net/datasets/kitti/eval_object.php?obj_benchmark=3d) and it provides the 3d boxes in 3d camera coordinates [KITTI format](https://github.com/bostondiditeam/kitti/blob/master/resources/devkit_object/readme.txt#L60)\r\n\r\n@chapulina  @adlarkin ', 'comment_created': datetime.datetime(2021, 7, 23, 10, 21, 22, tzinfo=datetime.timezone.utc), 'commenter': 'AmrElsersy', 'type': 'User'}]","[{'commit_sha': '50443fef814fbfcb96ddfe32e1466da8d3635aed', 'committer_username': 'AmrElsersy', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 19, 21, 42, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '838bb1b287786255ae4f053a6e93c184f50dccdc', 'committer_username': 'AmrElsersy', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 19, 21, 42, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '14c567e2494867b1908d564fa18af50f320ba45b', 'committer_username': 'AmrElsersy', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 19, 21, 42, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '03974bf5a3392b73d32e721e6ced37eb46b8426c', 'committer_username': 'AmrElsersy', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 19, 21, 42, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd09686db3b05b71aa1f4a3bd3d9f1f6515a104b1', 'committer_username': 'chapulina', 'committer_name': 'Louise Poubel', 'committer_email': None, 'commit_date': datetime.datetime(2013, 10, 22, 22, 20, 7, tzinfo=datetime.timezone.utc)}]",,35613645,,User,,53,,9,85
715366025,Add eigen utils to convert mesh 3d vertices to oriented box,"Signed-off-by: AmrElsersy <amrelsersay@gmail.com>

# üéâ New feature

## Summary
Adding helper functions to convert 3d vertices of a mesh to an oriented bounding box to be used in the bounding box camera 
[rendering#334](https://github.com/ignitionrobotics/ign-rendering/pull/334)

## Checklist
- [x] Signed all commits for DCO
- [ ] Added tests
- [ ] Added example and/or tutorial
- [ ] Updated documentation (as needed)
- [ ] Updated migration guide (as needed)
- [ ] `codecheck` passed (See [contributing](https://ignitionrobotics.org/docs/all/contributing#contributing-code))
- [ ] All tests passed (See [test coverage](https://ignitionrobotics.org/docs/all/contributing#test-coverage))
- [ ] While waiting for a review on your PR, please help review [another open pull request](https://github.com/pulls?q=is%3Aopen+is%3Apr+user%3Aignitionrobotics+repo%3Aosrf%2Fsdformat+archived%3Afalse+) to support the maintainers
",True,224,https://api.github.com/repos/gazebosim/gz-math/pulls/224,https://github.com/gazebosim/gz-math/pull/224,closed,333,0,2,17,10,67,4,0,"[{'name': 'üè∞ citadel'}, {'name': 'üîÆ dome'}, {'name': 'üè¢ edifice'}, {'name': 'üèØ fortress'}]",2021-08-18 19:40:43+00:00,2021-09-07 16:59:49+00:00,1718346.0,"19 days, 21:19:06","[{'comment_id': 691602890, 'comment_body': '```suggestion\r\n*/\r\n\r\n#include <gtest/gtest.h>\r\n```\r\nnit: remove extra whitespace', 'comment_created': datetime.datetime(2021, 8, 18, 21, 5, 25, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 691604093, 'comment_body': '```suggestion\r\nTEST(EigenUtil, MeshToOrientedBox)\r\n```', 'comment_created': datetime.datetime(2021, 8, 18, 21, 7, 29, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 691607704, 'comment_body': 'Reminder to add tests for the `MeshToOrientedBox` method. You could have two different sets of mesh points (a simple case and a more complicated case), where you know the ground truth oriented box for each of them. Then, call `MeshToOrientedBox` on these points, and make sure that the oriented box produced by the algorithm is with some tolerance of the ground truth oriented box.', 'comment_created': datetime.datetime(2021, 8, 18, 21, 12, 38, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 691609838, 'comment_body': '```suggestion\r\n#include <vector>\r\n\r\n#include <Eigen/Geometry>\r\n#include <Eigen/Eigenvalues>\r\n\r\n#include <ignition/math/AxisAlignedBox.hh>\r\n#include <ignition/math/Matrix3.hh>\r\n#include <ignition/math/OrientedBox.hh>\r\n#include <ignition/math/Pose3.hh>\r\n#include <ignition/math/Quaternion.hh>\r\n#include <ignition/math/Vector3.hh>\r\n#include <ignition/math/eigen3/Conversions.hh>\r\n```\r\nhttps://google.github.io/styleguide/cppguide.html#Names_and_Order_of_Includes', 'comment_created': datetime.datetime(2021, 8, 18, 21, 16, 12, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 691610294, 'comment_body': 'Can you add documentation to this method?', 'comment_created': datetime.datetime(2021, 8, 18, 21, 17, 3, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 691610412, 'comment_body': '```suggestion\r\n        const std::vector<math::Vector3d> &_mesh,\r\n        const Eigen::Vector3d &_centroid)\r\n```', 'comment_created': datetime.datetime(2021, 8, 18, 21, 17, 15, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 691610650, 'comment_body': '```suggestion\r\n        covariance.setZero();\r\n```', 'comment_created': datetime.datetime(2021, 8, 18, 21, 17, 38, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 691614121, 'comment_body': ""```suggestion\r\n        for (const auto &point : mesh)\r\n```\r\nLet's pass a reference here in order to avoid copying the `math::Vector3d` object"", 'comment_created': datetime.datetime(2021, 8, 18, 21, 23, 35, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 691620165, 'comment_body': ""```suggestion\r\n          auto pt = math::eigen3::convert(point);\r\n```\r\nWould you mind adding the namespace here? Since `convert` is a vague function name, it's hard to know which function is being referred to without the namespace."", 'comment_created': datetime.datetime(2021, 8, 18, 21, 34, 10, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 691621634, 'comment_body': ""```suggestion\r\n      inline Eigen::Matrix3d covarianceMatrix(\r\n```\r\nnit: I don't think the word `compute` is necessary. `covarianceMatrix` is clear enough when looking at the method inputs/outputs"", 'comment_created': datetime.datetime(2021, 8, 18, 21, 36, 48, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 691624474, 'comment_body': 'This comment can be removed since the loop below reads/gives the same information', 'comment_created': datetime.datetime(2021, 8, 18, 21, 42, 3, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 691626318, 'comment_body': '```suggestion\r\n          pt *= pt.x();\r\n```', 'comment_created': datetime.datetime(2021, 8, 18, 21, 45, 39, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 691630069, 'comment_body': ""I understand the covariance formula as follows, with `E(X)` and `E(Y)` being the expected values for X and Y (I've also seen this noted as x-bar and y-bar): \r\n\r\n![image](https://user-images.githubusercontent.com/42042756/129976913-c5aaefc2-5e05-43d6-84b4-f21ed5597165.png)\r\n\r\nIt looks like you've taken care of the summation, but you have not divided by `n`. Should that be done before returning the matrix?\r\n\r\n"", 'comment_created': datetime.datetime(2021, 8, 18, 21, 53, 6, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 691630682, 'comment_body': '```suggestion\r\n      inline ignition::math::OrientedBoxd meshToOrientedBox(\r\n```\r\nnit: we keep methods in namespaces lowercase. Methods that are a part of a class are usually uppercase', 'comment_created': datetime.datetime(2021, 8, 18, 21, 54, 16, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 691631018, 'comment_body': 'Can you document this input parameter?', 'comment_created': datetime.datetime(2021, 8, 18, 21, 54, 51, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 691632987, 'comment_body': 'I believe this can be replaced with `ignition::math::mean`: https://github.com/ignitionrobotics/ign-math/blob/dbfddd437306b93959142a1f45ecd0d1cdff40e7/include/ignition/math/Helpers.hh#L499-L509', 'comment_created': datetime.datetime(2021, 8, 18, 21, 58, 38, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 691633643, 'comment_body': 'Can you also add reference for the algorithm you used? I believe this is the link you mentioned in the past, right? http://codextechnicanum.blogspot.com/2015/04/find-minimum-oriented-bounding-box-of.html', 'comment_created': datetime.datetime(2021, 8, 18, 22, 0, 10, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 691634305, 'comment_body': '```suggestion\r\n        Eigen::Vector3d centroid = math::eigen3::convert(mean);\r\n```\r\nSame as my other comment about using the namespace to avoid ambiguity', 'comment_created': datetime.datetime(2021, 8, 18, 22, 1, 27, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 691634576, 'comment_body': '```suggestion\r\n        Eigen::Matrix3d covariance = computeCovarianceMatrix(_mesh, centroid);\r\n```\r\nThe comment here is redundant since the method and variable name explain what is going on here', 'comment_created': datetime.datetime(2021, 8, 18, 22, 2, 2, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 691635285, 'comment_body': '```suggestion\r\n        projectionTransform.block<3, 3>(0, 0) = eigenVectorsPCA.transpose();\r\n        projectionTransform.block<3, 1>(0, 3) =\r\n```', 'comment_created': datetime.datetime(2021, 8, 18, 22, 3, 35, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 691635405, 'comment_body': '```suggestion\r\n          -1.0f * (projectionTransform.block<3, 3>(0, 0) * centroid);\r\n```', 'comment_created': datetime.datetime(2021, 8, 18, 22, 3, 52, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 691636538, 'comment_body': '```suggestion\r\n        for (const auto &point : _mesh)\r\n```\r\nPass by reference to avoid copying a `math::Vector3d` object', 'comment_created': datetime.datetime(2021, 8, 18, 22, 6, 16, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 691636630, 'comment_body': '```suggestion\r\n        const Eigen::Vector3d meanDiagonal = 0.5f * (maxPoint + minPoint);\r\n```', 'comment_created': datetime.datetime(2021, 8, 18, 22, 6, 28, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 691637233, 'comment_body': ""What's the significance of this comment? It's confusing me :thinking: :grimacing: "", 'comment_created': datetime.datetime(2021, 8, 18, 22, 7, 46, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 691648246, 'comment_body': 'I was debugging something, will remove it :D', 'comment_created': datetime.datetime(2021, 8, 18, 22, 31, 46, tzinfo=datetime.timezone.utc), 'commenter': 'AmrElsersy', 'type': 'User'}, {'comment_id': 691666477, 'comment_body': 'it gives me error \r\n```\r\nignition/ign-math/include/ignition/math/Helpers.hh:505:15: error: conversion from ‚Äòint‚Äô to non-scalar type ‚Äòignition::math::v6::Vector3<double>‚Äô requested\r\n  505 |       T sum = 0;\r\n```\r\n\r\nit seems that it is not suitable for double stuff', 'comment_created': datetime.datetime(2021, 8, 18, 23, 17, 31, tzinfo=datetime.timezone.utc), 'commenter': 'AmrElsersy', 'type': 'User'}, {'comment_id': 691675678, 'comment_body': '+1', 'comment_created': datetime.datetime(2021, 8, 18, 23, 42, 48, tzinfo=datetime.timezone.utc), 'commenter': 'scpeters', 'type': 'User'}, {'comment_id': 691675938, 'comment_body': 'need Doxygen for parameters and return value', 'comment_created': datetime.datetime(2021, 8, 18, 23, 43, 33, tzinfo=datetime.timezone.utc), 'commenter': 'scpeters', 'type': 'User'}, {'comment_id': 691676072, 'comment_body': '+1', 'comment_created': datetime.datetime(2021, 8, 18, 23, 43, 56, tzinfo=datetime.timezone.utc), 'commenter': 'scpeters', 'type': 'User'}, {'comment_id': 691678539, 'comment_body': ""It was the implemntation of [PCL](https://github.com/PointCloudLibrary/pcl/blob/master/common/include/pcl/common/impl/centroid.hpp#L180)\r\n\r\nI replaced it with the [implementation](https://github.com/isl-org/Open3D/blob/76c2baf9debd460900f056a9b51e9a80de9c0e64/cpp/open3d/utility/Eigen.cpp#L305) of `Open3D`  and it gave me the same result, let's keep it "", 'comment_created': datetime.datetime(2021, 8, 18, 23, 50, 50, tzinfo=datetime.timezone.utc), 'commenter': 'AmrElsersy', 'type': 'User'}, {'comment_id': 691699138, 'comment_body': 'This line should be removed, the method only has one input parameter (`_mesh`)', 'comment_created': datetime.datetime(2021, 8, 19, 0, 52, 19, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 691699246, 'comment_body': '```suggestion\r\n      /// \\param[in] _mesh a mesh of 3d vertices\r\n```', 'comment_created': datetime.datetime(2021, 8, 19, 0, 52, 30, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 691700587, 'comment_body': '```suggestion\r\n      /// \\param[in] _mesh a mesh of 3d vertices\r\n```', 'comment_created': datetime.datetime(2021, 8, 19, 0, 56, 59, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 691701409, 'comment_body': ""windows CI throws a warning at this line: https://build.osrfoundation.org/job/ignition_math-ci-pr_any-windows7-amd64/1045/msbuild/new/\r\n\r\nI believe it's because you're dividing `double` by `size_t`, and there's an implicit type mismatch. Try doing this, and let's see if it resolves the warning:\r\n```c++\r\nmean /= static_cast<double>(_mesh.size());\r\n```"", 'comment_created': datetime.datetime(2021, 8, 19, 0, 59, 49, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 691704829, 'comment_body': ""nit: this isn't used until line 66, so can we define this variable there?"", 'comment_created': datetime.datetime(2021, 8, 19, 1, 11, 11, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 691705253, 'comment_body': ""nit: this isn't used until the end of the method, so can we define this variable there?"", 'comment_created': datetime.datetime(2021, 8, 19, 1, 12, 32, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 691705373, 'comment_body': '```suggestion\r\n        for (const auto &point : _mesh)\r\n```\r\nUse a reference to avoid copying a `math::Vector3d` object', 'comment_created': datetime.datetime(2021, 8, 19, 1, 13, 2, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 691705667, 'comment_body': '```suggestion\r\n        pose.Rot() = math::eigen3::convert(bboxQuaternion);\r\n        pose.Pos() = math::eigen3::convert(bboxTransform);\r\n```\r\nwe can also add namespaces here to help clarify the code', 'comment_created': datetime.datetime(2021, 8, 19, 1, 13, 55, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 692334269, 'comment_body': 'nit: I would name this `_vertices` instead of `_vertex`', 'comment_created': datetime.datetime(2021, 8, 19, 17, 17, 15, tzinfo=datetime.timezone.utc), 'commenter': 'scpeters', 'type': 'User'}, {'comment_id': 692335031, 'comment_body': 'nit: `_vertices`', 'comment_created': datetime.datetime(2021, 8, 19, 17, 18, 20, tzinfo=datetime.timezone.utc), 'commenter': 'scpeters', 'type': 'User'}, {'comment_id': 692336711, 'comment_body': 'nit: consider rephrasing\r\n\r\n`\\brief Get the oriented 3d bounding box of a group of vertices using PCA`', 'comment_created': datetime.datetime(2021, 8, 19, 17, 20, 42, tzinfo=datetime.timezone.utc), 'commenter': 'scpeters', 'type': 'User'}, {'comment_id': 692337147, 'comment_body': 'nit: `verticesToOrientedBox`', 'comment_created': datetime.datetime(2021, 8, 19, 17, 21, 19, tzinfo=datetime.timezone.utc), 'commenter': 'scpeters', 'type': 'User'}, {'comment_id': 692337864, 'comment_body': 'should we check the vector size and exit early if the vector is empty to avoid dividing by zero?', 'comment_created': datetime.datetime(2021, 8, 19, 17, 22, 17, tzinfo=datetime.timezone.utc), 'commenter': 'scpeters', 'type': 'User'}, {'comment_id': 692353367, 'comment_body': 'also here: I think we should check the size and exit early if there are no vertices', 'comment_created': datetime.datetime(2021, 8, 19, 17, 45, 9, tzinfo=datetime.timezone.utc), 'commenter': 'scpeters', 'type': 'User'}, {'comment_id': 692457763, 'comment_body': 'this is uninitialized. I would consider returning `Eigen::Matrix3d::Zero()`', 'comment_created': datetime.datetime(2021, 8, 19, 20, 22, 18, tzinfo=datetime.timezone.utc), 'commenter': 'scpeters', 'type': 'User'}, {'comment_id': 697554581, 'comment_body': 'nit: you can use the `empty` method here instead of checking if the size is 0: https://en.cppreference.com/w/cpp/container/vector/empty', 'comment_created': datetime.datetime(2021, 8, 27, 16, 1, 48, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 697555165, 'comment_body': 'Can we move this below the empty vertices check so that we only construct the `Eigen::Matrix3d` object if we actually need it?', 'comment_created': datetime.datetime(2021, 8, 27, 16, 2, 45, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 697555787, 'comment_body': ""Also, I would move the empty vertices check to the very beginning of this method so that we don't construct the `cumulants` object if we don't need to"", 'comment_created': datetime.datetime(2021, 8, 27, 16, 3, 42, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 697558409, 'comment_body': 'It looks like `Open3D` returns an identity matrix if the input vertices is empty. Would it make more sense to return an identity matrix instead of `Matrix3d::Zero`? (https://github.com/isl-org/Open3D/blob/76c2baf9debd460900f056a9b51e9a80de9c0e64/cpp/open3d/utility/Eigen.cpp#L305)', 'comment_created': datetime.datetime(2021, 8, 27, 16, 7, 50, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 697560028, 'comment_body': 'Can you add a reference at the beginning of this method implementation to the Open3D method you are using? That would help provide clarity if we ever had to revisit this later (https://github.com/isl-org/Open3D/blob/76c2baf9debd460900f056a9b51e9a80de9c0e64/cpp/open3d/utility/Eigen.cpp#L305)', 'comment_created': datetime.datetime(2021, 8, 27, 16, 10, 9, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 697561035, 'comment_body': '```suggestion\r\n      /// \\brief Get the oriented 3d bounding box of a set of 3d vertices using PCA\r\n```', 'comment_created': datetime.datetime(2021, 8, 27, 16, 11, 33, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 697561939, 'comment_body': ""similar to my other comment, consider using the vector's `empty` method instead of checking if the size is 0"", 'comment_created': datetime.datetime(2021, 8, 27, 16, 12, 55, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 697562252, 'comment_body': '`box` is not initialized at this point. Should it be initialized to something before we return it?', 'comment_created': datetime.datetime(2021, 8, 27, 16, 13, 24, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 697563244, 'comment_body': '```suggestion\r\n        // The numbers come out the same without it, but the signs are\r\n```', 'comment_created': datetime.datetime(2021, 8, 27, 16, 14, 59, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 697573073, 'comment_body': 'In response to https://github.com/ignitionrobotics/ign-math/pull/224#issuecomment-904056028 and https://github.com/ignitionrobotics/ign-math/pull/224#issuecomment-906721192, I would like to see a few more test cases written. Since this is being used for things like the bounding box sensor (https://github.com/ignitionrobotics/ign-rendering/pull/334), we need to make sure that the `verticesToOrientedBox` method is accurate. Otherwise, the data produced by things like the bounding box sensor would be useless.\r\n\r\nWould you mind adding the following 2 test cases:\r\n1. A ""sanity check"" where an empty set of vertices are passed to `verticesToOrientedBox`. An empty box should be returned\r\n2. A ""baseline check"" where you have a ""unit box"" that is centered about the origin with a pose of `(0,0,0)` (i.e., a box made of the following 8 points: `(1,1,1)`, `(1,-1,1)`, `(-1,1,1)`, `(-1,-1,1)`, `(1,1,-1)`, `(1,-1,-1)`, `(-1,1,-1)`, and `(-1,-1,-1)`). I\'d expect `verticesToOrientedBox` to produce a box with this exact size, center and orientation for a simple case like this.', 'comment_created': datetime.datetime(2021, 8, 27, 16, 30, 57, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 697574250, 'comment_body': ""Can you add a unit test for this method? Currently, there's a unit test for the `verticesToOrientedBox` method, but not the `covarianceMatrix` method. It would be nice to see a test that handles an empty set of vertices, and another test that handles a simple set of vertices."", 'comment_created': datetime.datetime(2021, 8, 27, 16, 32, 49, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 697663361, 'comment_body': 'It is already there, in the brief comment above the method\r\n', 'comment_created': datetime.datetime(2021, 8, 27, 19, 9, 29, tzinfo=datetime.timezone.utc), 'commenter': 'AmrElsersy', 'type': 'User'}, {'comment_id': 697664450, 'comment_body': 'It is already initialized to zeros in the ignition::math::OrientedBox class', 'comment_created': datetime.datetime(2021, 8, 27, 19, 11, 37, tzinfo=datetime.timezone.utc), 'commenter': 'AmrElsersy', 'type': 'User'}, {'comment_id': 697738586, 'comment_body': ""Will not give us the same box, and it will be a bounding box that is rotated along the diagonal of the box itself ... I tried it before\r\n\r\nThat dosn't surprise me because that 8 points of the box can be encloused in that rotated box in the result .. And that is an approximate solution ... but visually through many other multi-links objects, I find that the output is correct .. I will send you some videos for that samples I tried"", 'comment_created': datetime.datetime(2021, 8, 27, 21, 54, 50, tzinfo=datetime.timezone.utc), 'commenter': 'AmrElsersy', 'type': 'User'}, {'comment_id': 697740334, 'comment_body': '> Will not give us the same box, and it will be a bounding box that is rotated along the diagonal of the box itself ... I tried it before\r\n> That doesn\'t surprise me because that 8 points of the box can be encloused in that rotated box in the result\r\n\r\nThe center of the box should still be the same though, right?\r\n\r\n> I will send you some videos for that samples I tried\r\n\r\nWould you mind posting the videos here in the PR so that we have a record of the tests you ran in case we need to re-visit it later?\r\n\r\n---\r\n\r\nAnd could you still at least add test case 1 that I mentioned above (the ""sanity check"" where the input is an empty set of vertices)?', 'comment_created': datetime.datetime(2021, 8, 27, 22, 0, 10, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 697741558, 'comment_body': 'Yes the center will be the same \r\n\r\nOk will post the videos and will make the test ', 'comment_created': datetime.datetime(2021, 8, 27, 22, 3, 41, tzinfo=datetime.timezone.utc), 'commenter': 'AmrElsersy', 'type': 'User'}, {'comment_id': 697742526, 'comment_body': ""Thanks :+1: for the simple unit box, you can at least write a test for it where you check that the center is the same. I still think that would be worthwhile. In the comments for that test, you can mention that the orientation won't be the same due to the reasons you just explained in your previous comment"", 'comment_created': datetime.datetime(2021, 8, 27, 22, 6, 37, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 697775455, 'comment_body': ""mmmm the Simple box approach worked ! and gave me the exact box \r\n\r\nI tried that before but on a rotated box in all directions, and it didn't gave me the same box, so that is why I told you that it will not work"", 'comment_created': datetime.datetime(2021, 8, 28, 0, 26, 13, tzinfo=datetime.timezone.utc), 'commenter': 'AmrElsersy', 'type': 'User'}, {'comment_id': 697775490, 'comment_body': 'Ok ', 'comment_created': datetime.datetime(2021, 8, 28, 0, 26, 26, tzinfo=datetime.timezone.utc), 'commenter': 'AmrElsersy', 'type': 'User'}, {'comment_id': 698571991, 'comment_body': ""Is this one of the `math::eigen3::convert` methods? If so, we can add the `math::eigen3` namespace so that it's easy for code readers to know which function is being used (adding this namespace would also help avoid potential collisions since `convert` is a generic method name)."", 'comment_created': datetime.datetime(2021, 8, 30, 15, 10, 13, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 698573798, 'comment_body': '```suggestion\r\n  EXPECT_DOUBLE_EQ(rotation.Pitch(), 0);\r\n  EXPECT_DOUBLE_EQ(rotation.Yaw(), 0);\r\n```\r\nnit: fix whitespace', 'comment_created': datetime.datetime(2021, 8, 30, 15, 12, 27, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 698576190, 'comment_body': 'Can you add one more test for `math::eigen3::covarianceMatrix` where an empty set of vertices is passed in? We should receive an identity matrix in this case.', 'comment_created': datetime.datetime(2021, 8, 30, 15, 15, 18, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}]","[{'commit_sha': 'a649400fb6f8caa5aab4a9b0bb58bc702ca927df', 'committer_username': 'AmrElsersy', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 19, 21, 42, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e548258b1581fcf28d560bd988f35657613e87b1', 'committer_username': 'AmrElsersy', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 19, 21, 42, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '616998af6d8e27d181e4c2b151e974d8a392eab7', 'committer_username': 'AmrElsersy', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 19, 21, 42, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4d9332ea620946964d854b4ef8cf9a9745778ec1', 'committer_username': 'adlarkin', 'committer_name': 'Ashton Larkin', 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 2, 17, 1, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': '092666292b4c3381130c4371d106b0597b14f4f6', 'committer_username': 'AmrElsersy', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 19, 21, 42, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ff57eb9c1879eae1fc1cb9751e1cbd50dae636b2', 'committer_username': 'AmrElsersy', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 19, 21, 42, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e9b854d83fe093af4a2d95d8c3e6ab650f1fe376', 'committer_username': 'AmrElsersy', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 19, 21, 42, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '377623315f5396bf9f51183e84fa31699e259185', 'committer_username': 'adlarkin', 'committer_name': 'Ashton Larkin', 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 2, 17, 1, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': '45a4766cbeaa25aec1fd506291f66483817a4590', 'committer_username': 'AmrElsersy', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 19, 21, 42, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ffeef06e48d1bc0f15d94d06dedb0de7675b608d', 'committer_username': 'AmrElsersy', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 19, 21, 42, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '172ff6c8eb9dd877c0a25ce842a3c6a8260acb35', 'committer_username': 'adlarkin', 'committer_name': 'Ashton Larkin', 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 2, 17, 1, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd0932a28df0efc55b14a3dc742949b5d484a38da', 'committer_username': 'AmrElsersy', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 19, 21, 42, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '12824bd9ae2d2c7a2237fcbdc5dd43c2de22dc56', 'committer_username': 'AmrElsersy', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 19, 21, 42, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e9fd22a269ba89ce752a6e5a3c03776b0032c6ed', 'committer_username': 'AmrElsersy', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 19, 21, 42, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd1d9ec55616087bfce2b5f5906125508bf07ce84', 'committer_username': 'adlarkin', 'committer_name': 'Ashton Larkin', 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 2, 17, 1, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': '73adbf2a9f1cea35f2c722da0fe3ba7d96c251da', 'committer_username': 'scpeters', 'committer_name': 'Steve Peters', 'committer_email': 'scpeters@openrobotics.org', 'commit_date': datetime.datetime(2013, 2, 20, 19, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ee7f15669b05fc4f04bc0e10a307f5d35d115b6b', 'committer_username': 'scpeters', 'committer_name': 'Steve Peters', 'committer_email': 'scpeters@openrobotics.org', 'commit_date': datetime.datetime(2013, 2, 20, 19, 5, 35, tzinfo=datetime.timezone.utc)}]",,35613645,,User,,53,,9,85
671858902,Add BoundingBox Sensor,"Signed-off-by: AmrElsersy <amrelsersay@gmail.com>

# üéâ New feature

related to [#135](https://github.com/ignitionrobotics/ign-sensors/issues/135)

## Summary
BoundingBox Camera Sensor that allow users to use it easily in SDF, and It publishes the sensor data (bounding boxes) to ign-transport. <br>
It published both BoundingBoxes Msg & Image (with drawn boxes on it for visualization) 

### Depends on
[Gazebo #853](https://github.com/ignitionrobotics/ign-gazebo/pull/853)
[SDF #592](https://github.com/osrf/sdformat/pull/592)
[Rendering #334](https://github.com/ignitionrobotics/ign-rendering/pull/334)
[Msgs #165](https://github.com/ignitionrobotics/ign-msgs/pull/165)

## Demo
![demo](https://user-images.githubusercontent.com/35613645/122286610-58aae600-cef0-11eb-814c-5b91be47fbdc.png)


## Test it
Will add a tutorial later. <br>
Format 
```xml
        <sensor name=""boundingbox_camera"" type=""boundingbox_camera"">
          <box_type>visible_box</box_type>
          <camera>
            <horizontal_fov>1.047</horizontal_fov>
            <image>
              <width>800</width>
              <height>600</height>
            </image>
            <clip>
              <near>0.01</near>
              <far>1000</far>
            </clip>
          </camera>
          <always_on>1</always_on>
          <update_rate>30</update_rate>
          <visualize>true</visualize>
          <topic>camera</topic>
        </sensor>
```

It requires visuals annotating in the sdf via [Gazeb #853](https://github.com/ignitionrobotics/ign-gazebo/pull/853)

## Checklist
- [x] Signed all commits for DCO
- [ ] Added tests
- [ ] Added example and/or tutorial
- [ ] Updated documentation (as needed)
- [ ] Updated migration guide (as needed)
- [x] `codecheck` passed (See [contributing](https://ignitionrobotics.org/docs/all/contributing#contributing-code))
- [x] All tests passed (See [test coverage](https://ignitionrobotics.org/docs/all/contributing#test-coverage))
- [ ] While waiting for a review on your PR, please help review [another open pull request](https://github.com/pulls?q=is%3Aopen+is%3Apr+user%3Aignitionrobotics+repo%3Aosrf%2Fsdformat+archived%3Afalse+) to support the maintainers


### Notes
Full Bounding Boxes mode dosn't work yet here, But it works in rendering::BoundingBoxCamera, I think because the view matrix of the ogre camera dosn't change with the change of the node's pose ... still searching :D ",True,136,https://api.github.com/repos/gazebosim/gz-sensors/pulls/136,https://github.com/gazebosim/gz-sensors/pull/136,closed,1919,1,14,37,3,63,1,2,[{'name': 'üèØ fortress'}],2021-06-16 20:15:32+00:00,2022-06-17 16:00:17+00:00,31607085.0,"365 days, 19:44:45","[{'comment_id': 671903195, 'comment_body': '```suggestion\r\n#ifndef IGNITION_SENSORS_BOUNDINGBOXCAMERASENSOR_HH_\r\n#define IGNITION_SENSORS_BOUNDINGBOXCAMERASENSOR_HH_\r\n```\r\nnit: remove the `2` from the end?', 'comment_created': datetime.datetime(2021, 7, 18, 21, 54, 42, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 671903467, 'comment_body': 'Please update the header include order/conventions (`< ... >` vs `"" ... ""`) to follow the style guide: https://google.github.io/styleguide/cppguide.html#Names_and_Order_of_Includes\r\n\r\n`< ... >` should be used for headers that don\'t belong to `ign-sensors`, and `"" ... ""` should be used for headers that belong to `ign-sensors`. Would you mind making sure that all other header files in this PR are also updated as needed?', 'comment_created': datetime.datetime(2021, 7, 18, 21, 56, 59, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 671903752, 'comment_body': 'Can you also add `IGNITION_SENSORS_BOUNDINGBOX_CAMERA_VISIBLE`? (recall that we discussed this in https://github.com/ignitionrobotics/ign-sensors/pull/133#discussion_r652862567)', 'comment_created': datetime.datetime(2021, 7, 18, 22, 0, 26, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 671903961, 'comment_body': '```suggestion\r\n        const std::vector<rendering::BoundingBox> &_boxes);\r\n```', 'comment_created': datetime.datetime(2021, 7, 18, 22, 1, 58, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 671904034, 'comment_body': '```suggestion\r\n      public: virtual rendering::BoundingBoxCameraPtr BoundingBoxCamera() const;\r\n```\r\nnit: since this is just a getter, can we mark it `const`?', 'comment_created': datetime.datetime(2021, 7, 18, 22, 2, 37, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 671924887, 'comment_body': '```suggestion\r\n)\r\n```', 'comment_created': datetime.datetime(2021, 7, 19, 0, 43, 34, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 671925273, 'comment_body': ""```suggestion\r\nusing namespace ignition;\r\nusing namespace sensors;\r\n```\r\n\r\nWe shouldn't be using namespaces from other ignition libraries here to avoid naming collisions"", 'comment_created': datetime.datetime(2021, 7, 19, 0, 45, 16, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 671925681, 'comment_body': 'The documentation is the same for both variables here, although they seem to serve different purposes. Would you mind updating the documentation so that the difference in the variables is explained?', 'comment_created': datetime.datetime(2021, 7, 19, 0, 47, 45, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 671925823, 'comment_body': '```suggestion\r\n  public: bool isPublishedImage {false};\r\n```', 'comment_created': datetime.datetime(2021, 7, 19, 0, 48, 39, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 671926068, 'comment_body': '```suggestion\r\n  /// \\brief True when the sensor published image with drawn boxes\r\n  /// False when the sensor published only the boxes message\r\n```\r\nIs this what you mean with this documentation? The current docs are a little confusing', 'comment_created': datetime.datetime(2021, 7, 19, 0, 50, 4, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 671926254, 'comment_body': ""This documentation appears incorrect, please update it (it looks like it's the same documentation that you used for the `imageBuffer` variable"", 'comment_created': datetime.datetime(2021, 7, 19, 0, 51, 1, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 671929110, 'comment_body': '```suggestion\r\n    ignerr << ""Unable to create publisher on topic [""\r\n```', 'comment_created': datetime.datetime(2021, 7, 19, 1, 6, 23, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 671929126, 'comment_body': '```suggestion\r\n    ignerr << ""Unable to create publisher on topic [""\r\n```', 'comment_created': datetime.datetime(2021, 7, 19, 1, 6, 32, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 671929312, 'comment_body': ""If `this->Scene()` returns false (which means a scene doesn't exist), should we display an error message and return false?"", 'comment_created': datetime.datetime(2021, 7, 19, 1, 7, 23, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 671929950, 'comment_body': ""```suggestion\r\n  for (const auto &box : boxes)\r\n```\r\nnit: use a reference to avoid a copy. I also believe you can use a `const` reference since we aren't changing the bounding box here"", 'comment_created': datetime.datetime(2021, 7, 19, 1, 10, 22, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 671930742, 'comment_body': '```suggestion\r\n    for (const auto &box : this->dataPtr->boundingBoxes)\r\n```', 'comment_created': datetime.datetime(2021, 7, 19, 1, 14, 14, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 671931194, 'comment_body': ""```suggestion\r\n  public: rendering::CameraPtr rgbCamera {nullptr};\r\n```\r\nnit: re-name to `rgbCamera` so that it's clear this camera isn't responsible for bounding boxes"", 'comment_created': datetime.datetime(2021, 7, 19, 1, 16, 29, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 671931397, 'comment_body': '```suggestion\r\n    for (const auto &box : this->dataPtr->boundingBoxes)\r\n```', 'comment_created': datetime.datetime(2021, 7, 19, 1, 17, 32, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 671931906, 'comment_body': '```suggestion\r\n    for (const auto &box : this->dataPtr->boundingBoxes)\r\n```', 'comment_created': datetime.datetime(2021, 7, 19, 1, 20, 10, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 674679919, 'comment_body': 'cannot do that here, since it is refused by the function DrawBoundingBox', 'comment_created': datetime.datetime(2021, 7, 22, 10, 31, 51, tzinfo=datetime.timezone.utc), 'commenter': 'AmrElsersy', 'type': 'User'}, {'comment_id': 679575152, 'comment_body': '```suggestion\r\n#include <ignition/rendering/BoundingBoxCamera.hh>\r\n#include <ignition/transport/Node.hh>\r\n#include <ignition/transport/Publisher.hh>\r\n```\r\nnit: alphabetical order', 'comment_created': datetime.datetime(2021, 7, 30, 0, 54, 6, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 679576284, 'comment_body': 'This should be re-arranged to look like:\r\n\r\n```c++\r\n#include <ignition/common/Console.hh>\r\n#include <ignition/common/Profiler.hh>\r\n#include <ignition/common/Image.hh>\r\n#include <ignition/msgs.hh>\r\n#include <ignition/rendering/BoundingBoxCamera.hh>\r\n#include <ignition/transport/Node.hh>\r\n#include <ignition/transport/Publisher.hh>\r\n\r\n#include ""ignition/sensors/BoundingBoxCameraSensor.hh""\r\n#include ""ignition/sensors/RenderingEvents.hh""\r\n#include ""ignition/sensors/SensorFactory.hh""\r\n```', 'comment_created': datetime.datetime(2021, 7, 30, 0, 57, 35, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 679576634, 'comment_body': '```suggestion\r\n\r\nusing namespace ignition;\r\n```\r\nnit: only one empty line between the `#include`s and `using namespace`', 'comment_created': datetime.datetime(2021, 7, 30, 0, 58, 59, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 679578451, 'comment_body': '```suggestion\r\n#include <vector>\r\n\r\n#include <sdf/sdf.hh>\r\n```\r\nnit: whitespace to separate c headers and other library headers', 'comment_created': datetime.datetime(2021, 7, 30, 1, 4, 42, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 679578541, 'comment_body': '```suggestion\r\n    /// This class creates a BoundingBox image from an ignition rendering scene.\r\n```', 'comment_created': datetime.datetime(2021, 7, 30, 1, 5, 2, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 679579657, 'comment_body': '```suggestion\r\n#include ""ignition/sensors/BoundingBoxCameraSensor.hh""\r\n\r\n#include <memory>\r\n#include <mutex>\r\n\r\n#include <ignition/common/Console.hh>\r\n#include <ignition/common/Image.hh>\r\n#include <ignition/common/Profiler.hh>\r\n#include <ignition/msgs.hh>\r\n#include <ignition/rendering/BoundingBoxCamera.hh>\r\n#include <ignition/transport/Node.hh>\r\n#include <ignition/transport/Publisher.hh>\r\n\r\n#include ""ignition/sensors/RenderingEvents.hh""\r\n#include ""ignition/sensors/SensorFactory.hh""\r\n```\r\n\r\nhttps://google.github.io/styleguide/cppguide.html#Names_and_Order_of_Includes', 'comment_created': datetime.datetime(2021, 7, 30, 1, 8, 39, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 679579776, 'comment_body': '```suggestion\r\n\r\nusing namespace ignition;\r\n```\r\nnit: one empty line between `#include`s and `using namespace`', 'comment_created': datetime.datetime(2021, 7, 30, 1, 9, 3, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 679582951, 'comment_body': ""I wonder if it would be better to use `/image` as the suffix instead of `_image`. I will check with other people on the team and follow-up on this, so let's leave this open for now."", 'comment_created': datetime.datetime(2021, 7, 30, 1, 18, 40, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 679584534, 'comment_body': ""```suggestion\r\n  this->dataPtr->rgbCamera->SetNearClipPlane(sdfCamera->NearClip());\r\n  this->dataPtr->rgbCamera->SetFarClipPlane(sdfCamera->FarClip());\r\n```\r\nit looks like you're overriding the sdf parameters with hardcoded values. We should stick with the sdf parameters"", 'comment_created': datetime.datetime(2021, 7, 30, 1, 23, 25, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 679585749, 'comment_body': ""```suggestion\r\n  // don't render if there are no subscribers\r\n```"", 'comment_created': datetime.datetime(2021, 7, 30, 1, 27, 21, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 679587049, 'comment_body': 'Why would it not work with `DrawBoundingBox`? That method takes a const reference:\r\nhttps://github.com/ignitionrobotics/ign-rendering/blob/653d60af0a1f38ddf67b55392350cb739fbad2b1/include/ignition/rendering/BoundingBoxCamera.hh#L104', 'comment_created': datetime.datetime(2021, 7, 30, 1, 31, 25, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 679587737, 'comment_body': 'Is there a chance for memory leaks here? It looks like these variables are added to the message, but when/how are they de-allocated?', 'comment_created': datetime.datetime(2021, 7, 30, 1, 33, 29, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 679588133, 'comment_body': 'same question as my previous comment about memory leaks', 'comment_created': datetime.datetime(2021, 7, 30, 1, 34, 45, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 683309724, 'comment_body': 'No it just will mark the initialized variable, then when the SetScene() is called will create the camera', 'comment_created': datetime.datetime(2021, 8, 5, 9, 57, 46, tzinfo=datetime.timezone.utc), 'commenter': 'AmrElsersy', 'type': 'User'}, {'comment_id': 683334497, 'comment_body': ""I don't know yet a way about how to deallocate it\r\nis it deleted when we call the MSG_NAME.clear() function ?\r\n\r\nI mean the whole msg, the AnnotatedAxisAligned2DBox_V"", 'comment_created': datetime.datetime(2021, 8, 5, 10, 34, 48, tzinfo=datetime.timezone.utc), 'commenter': 'AmrElsersy', 'type': 'User'}, {'comment_id': 688729902, 'comment_body': ""```suggestion\r\n```\r\nWe shouldn't be using the `rendering` namespace in this repository since it's `ign-sensors`, not `ign-rendering`"", 'comment_created': datetime.datetime(2021, 8, 13, 19, 16, 27, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 688731675, 'comment_body': '```suggestion\r\n  for (int i = 0; i < size; ++i)\r\n```\r\nThe style guide says to use the prefix operator in for loops: https://ignitionrobotics.org/docs/all/contributing#style-guides', 'comment_created': datetime.datetime(2021, 8, 13, 19, 20, 13, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 688732306, 'comment_body': '```suggestion\r\n  for (int i = 0; i < size; ++i)\r\n```\r\nThe style guide says to use the prefix operator in for loops: https://ignitionrobotics.org/docs/all/contributing#style-guides\r\n\r\n', 'comment_created': datetime.datetime(2021, 8, 13, 19, 21, 23, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 688736704, 'comment_body': '`frontBox` already has a label of 2. Should the label of `invisibleBox` be 3?', 'comment_created': datetime.datetime(2021, 8, 13, 19, 30, 56, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 688737778, 'comment_body': ""```suggestion\r\n/// \\brief Build a scene with 3 overlapping boxes - one box will be fully visible,\r\n/// another box will be partially visible, and the last box won't be visible\r\n/// (it's occluded by the other 2 boxes)\r\n```"", 'comment_created': datetime.datetime(2021, 8, 13, 19, 33, 21, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 688738180, 'comment_body': '```suggestion\r\n/// \\brief Build a scene with 3d oriented box\r\n```', 'comment_created': datetime.datetime(2021, 8, 13, 19, 34, 7, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 688738612, 'comment_body': 'Would it be possible to add a model with multiple links to the 3d oriented box test so that we can make sure the bounding boxes for each link get combined/merged correctly?', 'comment_created': datetime.datetime(2021, 8, 13, 19, 35, 2, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 688738851, 'comment_body': 'Would it be possible to add a model with multiple links to the 2d box test so that we can make sure the bounding boxes for each link get combined/merged correctly?', 'comment_created': datetime.datetime(2021, 8, 13, 19, 35, 26, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 688739870, 'comment_body': '```suggestion\r\nvoid BuildScene2d(rendering::ScenePtr _scene)\r\n```\r\nSince the other method is called `BuildScene3d`, I am assuming that this is building scenes for `2d`?', 'comment_created': datetime.datetime(2021, 8, 13, 19, 37, 34, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 688740778, 'comment_body': '```suggestion\r\nvoid BuildScene3D(rendering::ScenePtr _scene)\r\n```', 'comment_created': datetime.datetime(2021, 8, 13, 19, 39, 31, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 688741072, 'comment_body': '```suggestion\r\n  public: void Boxes3DWithBuiltinSDF(const std::string &_renderEngine);\r\n```', 'comment_created': datetime.datetime(2021, 8, 13, 19, 40, 10, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 688741152, 'comment_body': '```suggestion\r\nvoid OnNewBoundingBoxes(const msgs::AnnotatedAxisAligned2DBox_V &_boxes)\r\n```', 'comment_created': datetime.datetime(2021, 8, 13, 19, 40, 19, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 688741249, 'comment_body': '```suggestion\r\nvoid OnNew3DBoundingBoxes(const msgs::AnnotatedOriented3DBox_V &_boxes)\r\n```', 'comment_created': datetime.datetime(2021, 8, 13, 19, 40, 29, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 688742173, 'comment_body': '```suggestion\r\n  auto *sensor =\r\n    mgr.CreateSensor<ignition::sensors::BoundingBoxCameraSensor>(sdfSensor);\r\n```\r\nUse `auto` to avoid duplicate decleration of the type, which is in the template', 'comment_created': datetime.datetime(2021, 8, 13, 19, 42, 21, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 688742537, 'comment_body': '```suggestion\r\n  ASSERT_NE(sensor, nullptr);\r\n```\r\nuse `ASSERT` instead of `EXPECT` for `nullptr` checks to prevent code to continue running and accidentally de-referencing `nullptr`s', 'comment_created': datetime.datetime(2021, 8, 13, 19, 43, 7, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 688742833, 'comment_body': '```suggestion\r\n  ASSERT_NE(camera, nullptr);\r\n```\r\nSame comment about `ASSERT` instead of `EXPECT` for `nullptr` checks', 'comment_created': datetime.datetime(2021, 8, 13, 19, 43, 44, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 688745030, 'comment_body': '```suggestion\r\n  // wait for a new box\r\n```', 'comment_created': datetime.datetime(2021, 8, 13, 19, 48, 28, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 688745166, 'comment_body': '```suggestion\r\n  double margin_error = 1.0;\r\n```', 'comment_created': datetime.datetime(2021, 8, 13, 19, 48, 46, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 688745384, 'comment_body': '```suggestion\r\n  // check that the invisible 3rd box does not exist\r\n```', 'comment_created': datetime.datetime(2021, 8, 13, 19, 49, 14, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 688746320, 'comment_body': '```suggestion\r\n  auto *sensor =\r\n    mgr.CreateSensor<ignition::sensors::BoundingBoxCameraSensor>(sdfSensor);\r\n```\r\nSince the type is defined in the template, use `auto` to avoid duplicate type declaration', 'comment_created': datetime.datetime(2021, 8, 13, 19, 51, 12, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 688746506, 'comment_body': '```suggestion\r\n  ASSERT_NE(sensor, nullptr);\r\n```\r\nAlways use `ASSERT` when doing `nullptr` checks', 'comment_created': datetime.datetime(2021, 8, 13, 19, 51, 34, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 688746744, 'comment_body': '```suggestion\r\n  ASSERT_NE(camera, nullptr);\r\n```\r\n\r\nAlways use `ASSERT` when doing `nullptr` checks', 'comment_created': datetime.datetime(2021, 8, 13, 19, 52, 2, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 688747562, 'comment_body': ""It looks like the box type is specified in SDF: https://github.com/ignitionrobotics/ign-sensors/blob/cfdece730bc6a09d98b658cb27fca0ba69c8831f/test/integration/boundingbox_3d_camera_sensor_builtin.sdf#L8\r\n\r\nSo, can you just retrieve the type from SDF and do a `EXPECT_EQ` check to make sure that it's correct instead of calling `camera->SetBoundingBoxType`?"", 'comment_created': datetime.datetime(2021, 8, 13, 19, 53, 45, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 688748040, 'comment_body': 'This comment seems out of place since there are no hidden boxes in the 3D boxes test. Can you remove it?', 'comment_created': datetime.datetime(2021, 8, 13, 19, 54, 47, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 689821769, 'comment_body': ""It dosn't matter what label it has ... it will not be visible .. and i am not checking for its label in the tests, i just check the number of boxes to check that the invisible box is not included (i have some label-checking in the rendering PR tests, but not here) "", 'comment_created': datetime.datetime(2021, 8, 16, 20, 3, 21, tzinfo=datetime.timezone.utc), 'commenter': 'AmrElsersy', 'type': 'User'}, {'comment_id': 689822375, 'comment_body': 'how can we do that .. through rendering APIs ??', 'comment_created': datetime.datetime(2021, 8, 16, 20, 4, 25, tzinfo=datetime.timezone.utc), 'commenter': 'AmrElsersy', 'type': 'User'}, {'comment_id': 689822754, 'comment_body': 'same as prev question', 'comment_created': datetime.datetime(2021, 8, 16, 20, 5, 5, tzinfo=datetime.timezone.utc), 'commenter': 'AmrElsersy', 'type': 'User'}, {'comment_id': 700441574, 'comment_body': ""As mentioned in https://github.com/ignitionrobotics/ign-sensors/pull/133#issuecomment-910513149, can you change this to use `ignition::common::DirIter` so that we don't have compilation issues?"", 'comment_created': datetime.datetime(2021, 9, 1, 17, 56, 49, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}]","[{'commit_sha': '9c0f77c4cb6074b98fe64498ac4a4b9e5298374d', 'committer_username': 'AmrElsersy', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 19, 21, 42, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '207f3bb8cd1dfa8ae1c40f8ab4472b0cb287e27a', 'committer_username': 'AmrElsersy', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 19, 21, 42, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6429fb9bb85ade0c3b0ccf2a868eeb14311a471c', 'committer_username': 'AmrElsersy', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 19, 21, 42, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8a4ea0dbee4a6a278d42bb851e4e61ef249b0046', 'committer_username': 'AmrElsersy', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 19, 21, 42, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '907302b617f645c2cf5ec835c69737485521593c', 'committer_username': 'AmrElsersy', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 19, 21, 42, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '026a8697b24c685daf3736013d7f759915f59982', 'committer_username': 'AmrElsersy', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 19, 21, 42, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f7cecfbbf14985354d2d98f3cc66d13a04cfcbdc', 'committer_username': 'AmrElsersy', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 19, 21, 42, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8a6b5e38f6a8b67fb4fbb1f5d90c17d950aa27d1', 'committer_username': 'adlarkin', 'committer_name': 'Ashton Larkin', 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 2, 17, 1, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': '79355fb104d832782c48d1f3c0421f25395a7f4c', 'committer_username': 'AmrElsersy', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 19, 21, 42, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f7741e80b7967ae423db68d9ae6f158e300b7c46', 'committer_username': 'AmrElsersy', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 19, 21, 42, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a5732c49c25062cdc1466bc162dda6a034bee6b5', 'committer_username': 'adlarkin', 'committer_name': 'Ashton Larkin', 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 2, 17, 1, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ff5e94a3cfe7120d9ac618c2ef38e5ec7f5f6e05', 'committer_username': 'AmrElsersy', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 19, 21, 42, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cfdece730bc6a09d98b658cb27fca0ba69c8831f', 'committer_username': 'AmrElsersy', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 19, 21, 42, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '46b0a6eafe131eb56bfb313802ceab8d9ecd9958', 'committer_username': 'AmrElsersy', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 19, 21, 42, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ea6dab51f0ef03cf24277005d5132beb5f4df3cc', 'committer_username': 'AmrElsersy', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 19, 21, 42, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd4608e35e9550c837328b3a4b99e41c051f435c5', 'committer_username': 'AmrElsersy', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 19, 21, 42, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8ec4daf84ec8e3363a682fedb8eef3db42c92b8a', 'committer_username': 'AmrElsersy', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 19, 21, 42, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f7f43c698684f911bbb76f935240aeb712798565', 'committer_username': 'AmrElsersy', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 19, 21, 42, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e48a9d3523244ffc935b6495c86fb3f10fec24a1', 'committer_username': 'AmrElsersy', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 19, 21, 42, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f022c263cb642d613bb2c5bc690d1a17d9167372', 'committer_username': 'AmrElsersy', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 19, 21, 42, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '460391dfe256e933cf4925a6032d3bb85990c308', 'committer_username': 'AmrElsersy', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 19, 21, 42, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '182e75537f401369a3a48c5e183518a0d471f759', 'committer_username': 'AmrElsersy', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 19, 21, 42, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4b8ec6f65c8a0738d576a001c83e4e4aa1eb4de8', 'committer_username': 'AmrElsersy', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 19, 21, 42, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cb190349ffa637354404ab30b7468a0353884a84', 'committer_username': 'adlarkin', 'committer_name': 'Ashton Larkin', 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 2, 17, 1, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': '21b5d578c9bcc3563ce94dd6c8de1260629b4f04', 'committer_username': 'AmrElsersy', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 19, 21, 42, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6985194fc3892d2992fc138f1b108cb9ab46aaec', 'committer_username': 'AmrElsersy', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 19, 21, 42, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '06d18ed45ec2ba1d1626ebec12dcdf63d43bbb2f', 'committer_username': 'AmrElsersy', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 19, 21, 42, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2dde81c552d543580ff7572f11bc7b4e3c562170', 'committer_username': 'AmrElsersy', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 19, 21, 42, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '91a5babe6bb2edf3991f54d1a0ae3331caf8804f', 'committer_username': 'AmrElsersy', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 19, 21, 42, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ab95793ebf05e9ebd9a4a15cb91115a08e5a83de', 'committer_username': 'chapulina', 'committer_name': 'Louise Poubel', 'committer_email': None, 'commit_date': datetime.datetime(2013, 10, 22, 22, 20, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '80052d2a88e0d024175545968b0d4cbea79b60a5', 'committer_username': 'chapulina', 'committer_name': 'Louise Poubel', 'committer_email': None, 'commit_date': datetime.datetime(2013, 10, 22, 22, 20, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '83e6084429195128e73b71a84638e694b95434b4', 'committer_username': 'chapulina', 'committer_name': 'Louise Poubel', 'committer_email': None, 'commit_date': datetime.datetime(2013, 10, 22, 22, 20, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd638a57eff2c19f1300c6f2cbe5ad17a9aeb4572', 'committer_username': 'chapulina', 'committer_name': 'Louise Poubel', 'committer_email': None, 'commit_date': datetime.datetime(2013, 10, 22, 22, 20, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c951ec7892bccb521043fdba8ad895cde9afc885', 'committer_username': 'chapulina', 'committer_name': 'Louise Poubel', 'committer_email': None, 'commit_date': datetime.datetime(2013, 10, 22, 22, 20, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6ce248d2619dcd329d98c27a211cd5e883fe5228', 'committer_username': 'chapulina', 'committer_name': 'Louise Poubel', 'committer_email': None, 'commit_date': datetime.datetime(2013, 10, 22, 22, 20, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '22d52720dc5add04d734f7ac4fe4947913999d2e', 'committer_username': 'chapulina', 'committer_name': 'Louise Poubel', 'committer_email': None, 'commit_date': datetime.datetime(2013, 10, 22, 22, 20, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '79dd5b366c8d3fc0ed9d61194e5c9d2a0643ecad', 'committer_username': 'chapulina', 'committer_name': 'Louise Poubel', 'committer_email': None, 'commit_date': datetime.datetime(2013, 10, 22, 22, 20, 7, tzinfo=datetime.timezone.utc)}]",,35613645,,User,,53,,9,85
669055046,Segmentation Sensor,"# üéâ New feature

related to [#134](https://github.com/ignitionrobotics/ign-sensors/issues/134)

## Summary
Segmentation Camera Sensor that allow users to use it easily in SDF, and It publishes the sensor data image to ign-transport 

##### Depends on
[SDF #592](https://github.com/osrf/sdformat/pull/592)
[Rendering #329](https://github.com/ignitionrobotics/ign-rendering/pull/329)

## Demo
#### Semantic
![seamantic](https://user-images.githubusercontent.com/35613645/121809465-3188b600-cc5d-11eb-9513-383f9e1b16d6.png)

#### Instance
![instance](https://user-images.githubusercontent.com/35613645/121809499-4bc29400-cc5d-11eb-90fc-f0dfd8386df1.png)


## Test it
Will add a tutorial later. <br>
Format 
```xml
        <sensor name=""segmentation_camera"" type=""segmentation"">
          <camera>
            <horizontal_fov>1.047</horizontal_fov>
            <image>
              <width>320</width>
              <height>240</height>
            </image>
            <clip>
              <near>0.1</near>
              <far>100</far>
            </clip>
          </camera>
          <always_on>1</always_on>
          <update_rate>30</update_rate>
          <visualize>true</visualize>
          <topic>camera</topic>
          <colored>true</colored>
          <segmentation_type>semantic</segmentation_type>
        </sensor>
```

It requires visuals annotating in the sdf via [Gazeb #853](https://github.com/ignitionrobotics/ign-gazebo/pull/853)

## Checklist
- [x] Signed all commits for DCO
- [x] Added tests
- [x] Added example and/or tutorial
- [ ] Updated documentation (as needed)
- [ ] Updated migration guide (as needed)
- [x] `codecheck` passed (See [contributing](https://ignitionrobotics.org/docs/all/contributing#contributing-code))
- [x] All tests passed (See [test coverage](https://ignitionrobotics.org/docs/all/contributing#test-coverage))
- [ ] While waiting for a review on your PR, please help review [another open pull request](https://github.com/pulls?q=is%3Aopen+is%3Apr+user%3Aignitionrobotics+repo%3Aosrf%2Fsdformat+archived%3Afalse+) to support the maintainers
",True,133,https://api.github.com/repos/gazebosim/gz-sensors/pulls/133,https://github.com/gazebosim/gz-sensors/pull/133,closed,1626,2,14,29,9,121,3,2,"[{'name': 'needs upstream release'}, {'name': 'beta'}, {'name': 'üèØ fortress'}]",2021-06-13 13:38:54+00:00,2021-09-22 15:07:36+00:00,8731722.0,"101 days, 1:28:42","[{'comment_id': 650710134, 'comment_body': 'I believe you can remove this method, you are targeting `ign-sensors`.', 'comment_created': datetime.datetime(2021, 6, 14, 7, 35, 39, tzinfo=datetime.timezone.utc), 'commenter': 'ahcorde', 'type': 'User'}, {'comment_id': 650710312, 'comment_body': 'wrong doc', 'comment_created': datetime.datetime(2021, 6, 14, 7, 35, 59, tzinfo=datetime.timezone.utc), 'commenter': 'ahcorde', 'type': 'User'}, {'comment_id': 650710615, 'comment_body': 'include the name of the param', 'comment_created': datetime.datetime(2021, 6, 14, 7, 36, 27, tzinfo=datetime.timezone.utc), 'commenter': 'ahcorde', 'type': 'User'}, {'comment_id': 650711207, 'comment_body': '```suggestion\r\n  /// \\brief True if Load() has been called and was successful\r\n```', 'comment_created': datetime.datetime(2021, 6, 14, 7, 37, 25, tzinfo=datetime.timezone.utc), 'commenter': 'ahcorde', 'type': 'User'}, {'comment_id': 650711405, 'comment_body': 'Start comments with upper case\r\n\r\n```suggestion\r\n  /// \\brief Rendering Segmentation Camera\r\n```', 'comment_created': datetime.datetime(2021, 6, 14, 7, 37, 44, tzinfo=datetime.timezone.utc), 'commenter': 'ahcorde', 'type': 'User'}, {'comment_id': 650711496, 'comment_body': '```suggestion\r\n  /// \\brief Node to create publisher\r\n```', 'comment_created': datetime.datetime(2021, 6, 14, 7, 37, 51, tzinfo=datetime.timezone.utc), 'commenter': 'ahcorde', 'type': 'User'}, {'comment_id': 650711552, 'comment_body': '```suggestion\r\n  /// \\brief Publisher to publish segmentation image\r\n```', 'comment_created': datetime.datetime(2021, 6, 14, 7, 37, 57, tzinfo=datetime.timezone.utc), 'commenter': 'ahcorde', 'type': 'User'}, {'comment_id': 650711674, 'comment_body': '```suggestion\r\n  /// \\brief Path directory to where images are saved\r\n```', 'comment_created': datetime.datetime(2021, 6, 14, 7, 38, 11, tzinfo=datetime.timezone.utc), 'commenter': 'ahcorde', 'type': 'User'}, {'comment_id': 650711738, 'comment_body': '```suggestion\r\n  /// \\brief Counter used to set the image filename\r\n```', 'comment_created': datetime.datetime(2021, 6, 14, 7, 38, 17, tzinfo=datetime.timezone.utc), 'commenter': 'ahcorde', 'type': 'User'}, {'comment_id': 650711963, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2021, 6, 14, 7, 38, 44, tzinfo=datetime.timezone.utc), 'commenter': 'ahcorde', 'type': 'User'}, {'comment_id': 650712517, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2021, 6, 14, 7, 39, 39, tzinfo=datetime.timezone.utc), 'commenter': 'ahcorde', 'type': 'User'}, {'comment_id': 650712683, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2021, 6, 14, 7, 39, 53, tzinfo=datetime.timezone.utc), 'commenter': 'ahcorde', 'type': 'User'}, {'comment_id': 650712801, 'comment_body': 'remove?', 'comment_created': datetime.datetime(2021, 6, 14, 7, 40, 5, tzinfo=datetime.timezone.utc), 'commenter': 'ahcorde', 'type': 'User'}, {'comment_id': 651363164, 'comment_body': 'Yeah it was a problem that makes the code crashes because of the rendering::SegmentationCamera destructor\r\nIt is solved now :D ', 'comment_created': datetime.datetime(2021, 6, 15, 0, 29, 29, tzinfo=datetime.timezone.utc), 'commenter': 'AmrElsersy', 'type': 'User'}, {'comment_id': 651531906, 'comment_body': '```suggestion\r\n      public: void OnNewSegmentationFrame(const uint8_t * _scan, unsigned int _width,\r\n        unsigned int _height, unsigned int _channel, const std::string &_format);\r\n```', 'comment_created': datetime.datetime(2021, 6, 15, 7, 42, 47, tzinfo=datetime.timezone.utc), 'commenter': 'ahcorde', 'type': 'User'}, {'comment_id': 651532482, 'comment_body': '```suggestion\r\n  public: common::ConnectionPtr sceneChangeConnection{nullptr};\r\n```', 'comment_created': datetime.datetime(2021, 6, 15, 7, 43, 29, tzinfo=datetime.timezone.utc), 'commenter': 'ahcorde', 'type': 'User'}, {'comment_id': 651532940, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2021, 6, 15, 7, 44, 9, tzinfo=datetime.timezone.utc), 'commenter': 'ahcorde', 'type': 'User'}, {'comment_id': 651533474, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2021, 6, 15, 7, 44, 49, tzinfo=datetime.timezone.utc), 'commenter': 'ahcorde', 'type': 'User'}, {'comment_id': 652858556, 'comment_body': ""The header include order/format here does not comply with the style guide. Please take a look at the [Google C++ style guide](https://google.github.io/styleguide/cppguide.html) (in particular, the [names and order of includes section](https://google.github.io/styleguide/cppguide.html#Names_and_Order_of_Includes)) and follow the guidelines for any new additions you make. As stated in the [Ignition contributing - style guide section](https://ignitionrobotics.org/docs/all/contributing#style-guides), we follow the Google C++ style guide.\r\n\r\nWould you also mind checking all of the other header includes in other files you have modified to make sure that you're following the style guide?"", 'comment_created': datetime.datetime(2021, 6, 16, 16, 33, 48, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 652862567, 'comment_body': ""Based on what I'm seeing in other camera sensor classes, I believe you may need to add `IGNITION_SENSORS_SEGMENTATION_CAMERA_VISIBLE` (this is usually to help with symbol visibility and warnings for platforms like Windows):\r\nhttps://github.com/ignitionrobotics/ign-sensors/blob/3dfb50d1b51c3a022ffb2191a6e0b3ddfa64d0e3/include/ignition/sensors/DepthCameraSensor.hh#L73-L74"", 'comment_created': datetime.datetime(2021, 6, 16, 16, 39, 30, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 652864562, 'comment_body': '```suggestion\r\n      /// \\return true if the update was successful\r\n```', 'comment_created': datetime.datetime(2021, 6, 16, 16, 42, 16, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 652869811, 'comment_body': '```suggestion\r\n)\r\n```', 'comment_created': datetime.datetime(2021, 6, 16, 16, 49, 19, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 652870449, 'comment_body': ""I've noticed that other camera sensors have a `target_compile_definitions` call: https://github.com/ignitionrobotics/ign-sensors/blob/3dfb50d1b51c3a022ffb2191a6e0b3ddfa64d0e3/src/CMakeLists.txt#L70\r\n\r\nI'm not sure if this is needed though. It could be related to Windows. @ahcorde, do you know if this is needed? "", 'comment_created': datetime.datetime(2021, 6, 16, 16, 50, 11, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 652876044, 'comment_body': ""```suggestion\r\nusing namespace ignition;\r\nusing namespace sensors;\r\n```\r\nIn general, I don't think it's good practice to use namespaces from other libraries (we want to avoid naming collisions) - so, since this is `ign-sensors`, we should only be using the `sensors` namespace, and calling other namespaces (like `rendering`) in the code whenever they are needed."", 'comment_created': datetime.datetime(2021, 6, 16, 16, 56, 13, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 652877787, 'comment_body': ""As we discussed offline, we may want to provide users with **_both_** a colored image and label ID image (the colored image doesn't help users if they don't know which colors map to which label). So, let's leave this comment open/unresolved for now to serve as a reminder for us to re-visit this later."", 'comment_created': datetime.datetime(2021, 6, 16, 16, 58, 22, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 652878615, 'comment_body': '```suggestion\r\n  /// \\brief Connection to the new segmentation frames data\r\n  public: common::ConnectionPtr newSegmentationConnection {nullptr};\r\n```', 'comment_created': datetime.datetime(2021, 6, 16, 16, 59, 31, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 652888738, 'comment_body': ""Can we move this code to the top of the `Load` method? That way, we don't go through the effort of checking/parsing user input if the sensor type/configuration is invalid."", 'comment_created': datetime.datetime(2021, 6, 16, 17, 12, 30, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 652890162, 'comment_body': '```suggestion\r\n    auto type = sdfElement->Get<std::string>(""segmentation_type"");\r\n```\r\nTo avoid redundancy in the declared types, you can use `auto` since you\'re already specifying `std::string` as a template parameter.', 'comment_created': datetime.datetime(2021, 6, 16, 17, 14, 33, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 652895484, 'comment_body': 'Can we check the return value of `this->CreateCamera()`? If the call returns `false`, we probably want to print an error message and exit the method call early instead of setting `this->dataPtr->initialized` to `true` and returning `true` later on.', 'comment_created': datetime.datetime(2021, 6, 16, 17, 21, 42, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 652899027, 'comment_body': '```suggestion\r\n  const auto sdfCamera = this->dataPtr->sdfSensor.CameraSensor();\r\n```', 'comment_created': datetime.datetime(2021, 6, 16, 17, 26, 25, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 652904519, 'comment_body': 'The documentation in the related header file uses `_scan` instead of `_data`, and `_channel` instead of `_channels`. Can you make sure the names of the parameters in both files (the source and header) match?', 'comment_created': datetime.datetime(2021, 6, 16, 17, 33, 46, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 652907278, 'comment_body': ""```suggestion\r\n    this->dataPtr->imageEvent.ConnectionCount() == 0u &&\r\n```\r\n`ConnectionCount` returns an `unsigned int`, so there's no way the number of connections can be less than 0: https://github.com/ignitionrobotics/ign-common/blob/d04423e3a56fe8138217cc42aff2f73e8e494451/events/include/ignition/common/Event.hh#L125-L127"", 'comment_created': datetime.datetime(2021, 6, 16, 17, 37, 47, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 652908116, 'comment_body': ""```suggestion\r\n```\r\nShould this check be here? I don't think so - perhaps users want to view rendered images without saving them."", 'comment_created': datetime.datetime(2021, 6, 16, 17, 39, 1, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 652913464, 'comment_body': '```suggestion\r\n  std::lock_guard<std::mutex> lock(this->dataPtr->mutex);\r\n  \r\n  // segmentation data\r\n  this->dataPtr->segmentationMsg.set_data(this->dataPtr->segmentationBuffer,\r\n      rendering::PixelUtil::MemorySize(rendering::PF_R8G8B8,\r\n      width, height));\r\n```\r\nI believe that the mutex lock should come before the `set_data` call in order to preserve the data being saved from `this->dataPtr->segmentationBuffer`', 'comment_created': datetime.datetime(2021, 6, 16, 17, 46, 49, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 652914609, 'comment_body': '```suggestion\r\n  if (this->dataPtr->imageEvent.ConnectionCount() > 0u)\r\n```\r\nSee my other comment about `ConnectionCount` returning an `unsigned int`', 'comment_created': datetime.datetime(2021, 6, 16, 17, 48, 23, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 652916078, 'comment_body': ""We should include checks here to make sure `camera` isn't `nullptr`. Here's an example: https://github.com/ignitionrobotics/ign-sensors/blob/a9517f8b7788838d373143fe87582ca02a8d7c89/src/ThermalCameraSensor.cc#L515-L529"", 'comment_created': datetime.datetime(2021, 6, 16, 17, 50, 34, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 653001036, 'comment_body': ""```suggestion\r\nusing namespace ignition;\r\n```\r\n\r\nSimilar to my other comment, it's good practice to use only the `ignition::sensors` namespace in `ign-sensors`."", 'comment_created': datetime.datetime(2021, 6, 16, 19, 56, 19, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 653043700, 'comment_body': 'Can you move this to be below all of the helper variables/methods?', 'comment_created': datetime.datetime(2021, 6, 16, 20, 50, 45, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 653049395, 'comment_body': ""Can we add more test cases for things like the `<colored>` and `<segmentation_type>` options? Maybe we can add a few more models with segmentation cameras attached to them that have different configurations.\r\n\r\nI realize that you have manually written tests for instance and panoptic segmentation in `test/integration/segmentation_camera_plugin.cc`, but I think it would be worth testing it with these options set from SDF. You'll probably need to do some re-factoring in `test/integration/segmentation_camera_plugin.cc` to accomodate for multiple `SDF` options in order to avoid having duplicate code."", 'comment_created': datetime.datetime(2021, 6, 16, 20, 58, 51, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 653061386, 'comment_body': ""```suggestion\r\n/// \\brief Segmentation buffer\r\nuint8_t *g_buffer = nullptr;\r\n```\r\nThe segmentation camera sensor uses `uint8_t`: https://github.com/AmrElsersy/ign-sensors/blob/d2457899bbcd353c25cc0f56f342e2da9d05631e/src/SegmentationCameraSensor.cc#L73-L74\r\n\r\nFor consistency, we should also be using `uint8_t` in the tests, not `unsigned char` (in case you're curious, using `unsigned char` instead of `uint8_t` works because `uint8_t` is an alias for `unsigned char` - however, it's still better to use `uint8_t` because it makes it clear that we are storing numbers)."", 'comment_created': datetime.datetime(2021, 6, 16, 21, 19, 14, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 653061869, 'comment_body': '```suggestion\r\n    g_buffer = new uint8_t[size];\r\n```\r\nSimilar to my other comment about `uint8_t` instead of `unsigned char`', 'comment_created': datetime.datetime(2021, 6, 16, 21, 20, 2, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 653065504, 'comment_body': '```suggestion\r\n  // the image has 3 channels\r\n  unsigned int size = _msg.width() * _msg.height() * 3;\r\n```\r\nIt\'s good to add documentation for ""magic numbers"" so that we can remember what they represent.', 'comment_created': datetime.datetime(2021, 6, 16, 21, 26, 58, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 653071988, 'comment_body': '```suggestion\r\n/// the 2 outer boxes have the same label & the middle is different\r\n```', 'comment_created': datetime.datetime(2021, 6, 16, 21, 38, 48, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 653073866, 'comment_body': ""I'd like to see a few more test cases:\r\n1. 2 boxes with slight overlap. We should confirm that we can see one box completely, and the other box partially\r\n2. 2 boxes with complete overlap (i.e., one box blocks the other). We should only see the box that isn't blocked"", 'comment_created': datetime.datetime(2021, 6, 16, 21, 42, 26, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 653078176, 'comment_body': 'Do we need to set the [local scale](https://github.com/ignitionrobotics/ign-rendering/blob/ign-rendering5/include/ignition/rendering/Node.hh#L176-L185) of these boxes (length, width, height)? In the thermal camera test, ""unit boxes"" (i.e., LWH of 1) are created: https://github.com/ignitionrobotics/ign-sensors/blob/a9517f8b7788838d373143fe87582ca02a8d7c89/test/integration/thermal_camera_plugin.cc#L167', 'comment_created': datetime.datetime(2021, 6, 16, 21, 51, 6, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 653085648, 'comment_body': ""Before getting the engine, we should also make sure that `_renderEngine` is `ogre2` since the segmentation camera has only been implemented for `ogre2`. Here's an example from the thermal camera (in the thermal camera, `ogre` and `ogre2` are supported, but in our case, we just want `ogre2`): https://github.com/ignitionrobotics/ign-sensors/blob/a9517f8b7788838d373143fe87582ca02a8d7c89/test/integration/thermal_camera_plugin.cc#L137-L144"", 'comment_created': datetime.datetime(2021, 6, 16, 22, 1, 21, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 653091271, 'comment_body': '```suggestion\r\n  ASSERT_NE(sensor, nullptr);\r\n```\r\nWe want to use `ASSERT` here instead of `EXPECT` because if the sensor is `nullptr`, we should stop the test here instead of continuing and de-referencing a `nullptr`.', 'comment_created': datetime.datetime(2021, 6, 16, 22, 13, 50, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 653091545, 'comment_body': '```suggestion\r\n  ASSERT_NE(camera, nullptr);\r\n```\r\nSame comment about `ASSERT` instead of `EXPECT` for `nullptr`', 'comment_created': datetime.datetime(2021, 6, 16, 22, 14, 28, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 653092159, 'comment_body': ""Is there a reason for picking `23` here? Or does `backgroundLabel` just have to be a label that isn't used for the box objects?"", 'comment_created': datetime.datetime(2021, 6, 16, 22, 15, 47, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 653093725, 'comment_body': ""It would also be good to check the camera info topic. Here's an example from the thermal camera: https://github.com/ignitionrobotics/ign-sensors/blob/a9517f8b7788838d373143fe87582ca02a8d7c89/test/integration/thermal_camera_plugin.cc#L192-L204"", 'comment_created': datetime.datetime(2021, 6, 16, 22, 19, 45, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 653098747, 'comment_body': ""My concern with this method is that it doesn't actually tell us if we received an image or not - it will tell us if `g_counter` isn't zero, but it won't tell us if `g_counter` has changed (if `g_counter` is already > 0 when this method is called, then this method doesn't do us any good). I recommend making the following changes: pass in the `ignition::sensors::Manager` as an argument, set `g_counter` to 0, and THEN call `mgr.RunOnce` in the `WaitForNewFrame` method. That way, when the `EXPECT_GT(counter, 0)` call is reached at the end of the method, that lets us know if an image was actually received or not. Once you make these changes, you can modify the actual test method to call just `WaitForNewFrame(mgr)` instead of calling `mgr.RunOnce` followed by `WaitForNewFrame()`."", 'comment_created': datetime.datetime(2021, 6, 16, 22, 32, 6, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 653099522, 'comment_body': '```suggestion\r\n  // get their index in the buffer\r\n  const uint32_t imgChannels = 3;\r\n  uint32_t leftIndex = (leftProj.Y() * width + leftProj.X()) * imgChannels;\r\n  uint32_t rightIndex = (rightProj.Y() * width + rightProj.X()) * imgChannels;\r\n  uint32_t middleIndex = (middleProj.Y() * width + middleProj.X()) * imgChannels;\r\n```\r\nWe should refrain from using ""magic numbers"" if possible', 'comment_created': datetime.datetime(2021, 6, 16, 22, 34, 4, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 653099876, 'comment_body': '```suggestion\r\n  EXPECT_EQ(leftLabel, 1);\r\n  EXPECT_EQ(middleLabel, 2);\r\n  EXPECT_EQ(rightLabel, 1);\r\n```', 'comment_created': datetime.datetime(2021, 6, 16, 22, 35, 1, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 653100356, 'comment_body': ""I don't think that locking the mutex provides any benefit since we have already called `mgr.RunOnce` above. Did you mean to lock the mutex before calling `mgr.RunOnce`?"", 'comment_created': datetime.datetime(2021, 6, 16, 22, 36, 13, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 653100880, 'comment_body': 'Same comment here about locking the mutex after calling `mgr.RunOnce`', 'comment_created': datetime.datetime(2021, 6, 16, 22, 37, 29, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 653101954, 'comment_body': '```suggestion\r\n  // the label is in the last channel\r\n```', 'comment_created': datetime.datetime(2021, 6, 16, 22, 40, 4, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 653102030, 'comment_body': '```suggestion\r\n  // the instance count is in the first channel\r\n```', 'comment_created': datetime.datetime(2021, 6, 16, 22, 40, 18, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 653102148, 'comment_body': '```suggestion\r\n  EXPECT_EQ(leftLabel, 1);\r\n  EXPECT_EQ(middleLabel, 2);\r\n  EXPECT_EQ(rightLabel, 1);\r\n```', 'comment_created': datetime.datetime(2021, 6, 16, 22, 40, 35, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 661113893, 'comment_body': ""Couldn't add it, as it is not defined, where should I define that ?"", 'comment_created': datetime.datetime(2021, 6, 30, 4, 3, 39, tzinfo=datetime.timezone.utc), 'commenter': 'AmrElsersy', 'type': 'User'}, {'comment_id': 661118931, 'comment_body': ""Yeah we should, in this if statement, we check if all of them are disabled (publishing, saving, events) so we return and don't render\r\n\r\nit dosn't affect the publishing, we can still publish without saving"", 'comment_created': datetime.datetime(2021, 6, 30, 4, 20, 27, tzinfo=datetime.timezone.utc), 'commenter': 'AmrElsersy', 'type': 'User'}, {'comment_id': 661120661, 'comment_body': 'I already removed the <colored> tag, it will not be available since the sensor will publish both maps (colored & labels maps)', 'comment_created': datetime.datetime(2021, 6, 30, 4, 26, tzinfo=datetime.timezone.utc), 'commenter': 'AmrElsersy', 'type': 'User'}, {'comment_id': 661125033, 'comment_body': ""No, it is a random choice.\r\n> just have to be a label that isn't used for the box objects?\r\n\r\nExactly, a number that is not used for boxes and not the default number for background(which is 0)"", 'comment_created': datetime.datetime(2021, 6, 30, 4, 39, 52, tzinfo=datetime.timezone.utc), 'commenter': 'AmrElsersy', 'type': 'User'}, {'comment_id': 661140315, 'comment_body': ""I added number 2 .. the complete overlap.\r\nabout the partial overlap, I don't know a way to test that .. also since the camera is based on material switching, then partial overlapping is done by OGRE, we will not actually test any logic we wrote "", 'comment_created': datetime.datetime(2021, 6, 30, 5, 25, 44, tzinfo=datetime.timezone.utc), 'commenter': 'AmrElsersy', 'type': 'User'}, {'comment_id': 668930251, 'comment_body': 'Since `ignition/transport`, `ignition/msgs`, and `sdf` are different projects, can we move these `#include`s to the group above with the `ignition/common` includes? We should also use `<...>` instead of `""...""` for separate project headers, and make sure that the grouping of `#include`s for other project headers are in alphabetical order (see https://google.github.io/styleguide/cppguide.html#Names_and_Order_of_Includes)', 'comment_created': datetime.datetime(2021, 7, 13, 16, 33, 32, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 668935108, 'comment_body': 'Following the [style guide](https://google.github.io/styleguide/cppguide.html#Names_and_Order_of_Includes), the headers here should look like this:\r\n\r\n```c++\r\n#include <ignition/common/Console.hh>\r\n#include <ignition/common/Profiler.hh>\r\n#include <ignition/common/Image.hh>\r\n#include <ignition/msgs.hh>\r\n#include <ignition/rendering/SegmentationCamera.hh>\r\n#include <ignition/transport/Node.hh>\r\n#include <ignition/transport/Publisher.hh>\r\n\r\n#include ""ignition/sensors/RenderingEvents.hh""\r\n#include ""ignition/sensors/SegmentationCameraSensor.hh""\r\n#include ""ignition/sensors/SensorFactory.hh""\r\n```', 'comment_created': datetime.datetime(2021, 7, 13, 16, 39, 46, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 668936072, 'comment_body': '```suggestion\r\n  /// \\brief Segmentation colored image message\r\n```', 'comment_created': datetime.datetime(2021, 7, 13, 16, 41, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 668936383, 'comment_body': '```suggestion\r\n  /// \\brief Segmentation labels image message\r\n```', 'comment_created': datetime.datetime(2021, 7, 13, 16, 41, 23, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 668937950, 'comment_body': '```suggestion\r\n  /// \\brief Topic suffix to publish the segmentation colored map\r\n  public: const std::string topicColoredMapSuffix = ""/colored_map"";\r\n```\r\n\r\nI see that this is being used as the suffix of the topic: https://github.com/ignitionrobotics/ign-sensors/blob/c851f1e24ac039b7b40c962bff4b6ead1d34c40a/src/SegmentationCameraSensor.cc#L189-L192\r\n\r\nSo, I think it\'d be good to make that clear in the variable name and documentation. We can also mark this as `const` since the variable\'s value never changes.', 'comment_created': datetime.datetime(2021, 7, 13, 16, 43, 9, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 668940543, 'comment_body': '```suggestion\r\n  /// \\brief Topic suffix to publish the segmentation labels map\r\n  public: const std::string topicLabelsMapSuffix = ""/labels_map"";\r\n```\r\nSame comment as above about using this as the suffix of the topic', 'comment_created': datetime.datetime(2021, 7, 13, 16, 46, 20, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 668943432, 'comment_body': ""Would it be possible to use [smart pointers](https://en.cppreference.com/w/cpp/memory) here instead of raw pointers so that we don't have to worry about manually deleting/de-allocating them?"", 'comment_created': datetime.datetime(2021, 7, 13, 16, 49, 56, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 668950202, 'comment_body': ""nit: it may be worth adding a `igndbg` statement after this `if` block that prints what type of segmentation is being used (semantic or panoptic). That way, users have this information if they want it (`igndbg` won't print to the console by default unless users specify the proper verbose settings). You'd have to print a human-readable string instead of the enum though since enums would just print an integer value, which won't be helpful for users."", 'comment_created': datetime.datetime(2021, 7, 13, 16, 58, 43, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 668952224, 'comment_body': 'Instead of one error check that displays a generic error message for both the `labelsMapPublisher` and `coloredMapPublisher`, can we have two separate error checks that display the full topic (`this->Topic()` + ...)?', 'comment_created': datetime.datetime(2021, 7, 13, 17, 1, 22, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 668952844, 'comment_body': 'Is there a way to prevent `/camera_info` from being hardcoded?', 'comment_created': datetime.datetime(2021, 7, 13, 17, 2, 10, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 668958585, 'comment_body': ""```suggestion\r\n  // don't render if there are no subscribers\r\n```"", 'comment_created': datetime.datetime(2021, 7, 13, 17, 10, 23, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 668963088, 'comment_body': ""> it doesn't affect the publishing, we can still publish without saving\r\n\r\nLooking at the code in this method, the publishing occurs below this `if` block, but if this `if` block is `true` (which means  we `return false`), then we never reach the publishing code below, which means that nothing is ever published, right? If so, then I think that we actually cannot publish without saving. And I still think that we should remove the `saveImage` check from this `if` block, because like I said before, users may want to run this sensor to view segmentation results without actually saving the data (I don't think that we should assume that the only time users want to view rendered images is when they're saving images, because that's not always true)."", 'comment_created': datetime.datetime(2021, 7, 13, 17, 16, 41, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 668968066, 'comment_body': 'Should we save the label map image as well so that users can have labels to refer to when using this data later? We will need to make sure that we have a way to ""connect"" the segmentation and label image from the same time step when saving so that users know which labels image corresponds to which segmentation image', 'comment_created': datetime.datetime(2021, 7, 13, 17, 23, 54, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 668973751, 'comment_body': ""nit: can this be unsigned (`uint64_t`) since the count can't be < 0?"", 'comment_created': datetime.datetime(2021, 7, 13, 17, 32, 5, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 668974865, 'comment_body': ""```suggestion\r\n  const auto waitTime = std::chrono::duration_cast< std::chrono::milliseconds >(\r\n    std::chrono::duration<double>(0.001));\r\n```\r\nnit: indent the second line so that it's clear to readers that this is a continuation of the first line. This should also be marked `const`"", 'comment_created': datetime.datetime(2021, 7, 13, 17, 33, 46, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 668976008, 'comment_body': 'Similar to my other comment, can this be unsigned?', 'comment_created': datetime.datetime(2021, 7, 13, 17, 35, 28, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 668977154, 'comment_body': '```suggestion\r\n/// the 2 outer boxes have the same label & the middle is different.\r\n/// There is also another box with a unique label that is hidden behind the middle box\r\n```', 'comment_created': datetime.datetime(2021, 7, 13, 17, 37, 3, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 668977319, 'comment_body': '```suggestion\r\n  const double unitBoxSize = 1.0;\r\n```', 'comment_created': datetime.datetime(2021, 7, 13, 17, 37, 19, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 668978991, 'comment_body': 'Can we use variables for the labels of the visible boxes (outer and middle) as well so that we don\'t use ""magic numbers"" for those? Also, the labels should be marked as `const` since they don\'t change', 'comment_created': datetime.datetime(2021, 7, 13, 17, 39, 47, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 668979893, 'comment_body': 'nit: these can all be `const`', 'comment_created': datetime.datetime(2021, 7, 13, 17, 40, 57, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 668983887, 'comment_body': 'Thanks for the explanation :+1: would you mind adding a comment here that states what you just explained, so that we have it documented in case we need to re-visit this later?', 'comment_created': datetime.datetime(2021, 7, 13, 17, 46, 31, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 668986150, 'comment_body': 'Can we check a few more pixel locations for the background label? maybe we can add another check for below the boxes and between the boxes', 'comment_created': datetime.datetime(2021, 7, 13, 17, 49, 45, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 668987747, 'comment_body': '```suggestion\r\n  const int labelOffset = 2;\r\n  leftLabel =   g_buffer[leftIndex   + labelOffset];\r\n  rightLabel =  g_buffer[rightIndex  + labelOffset];\r\n  middleLabel = g_buffer[middleIndex + labelOffset];\r\n```', 'comment_created': datetime.datetime(2021, 7, 13, 17, 51, 57, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 668995285, 'comment_body': ""Can we add one more box that is partially hidden? Perhaps it can be poking out of the right of the left-most box. It'd be nice to add test coverage to make sure that for partially hidden objects, we only see the part that is visible in the segmented image"", 'comment_created': datetime.datetime(2021, 7, 13, 18, 2, 58, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 669001209, 'comment_body': ""```suggestion\r\n  g_counter = 0;\r\n  \r\n  // wait for a few segmentation camera frames\r\n  mgr.RunOnce(std::chrono::steady_clock::duration::zero(), true);\r\n```\r\nIn order to prevent any weird timing bugs (especially on server machines where computing speed varies), I believe the counter should be set to zero before `RunOnce`. That way, we don't run the risk of receiving the image before setting the counter to 0 and then overriding that by setting the counter to 0 before we check if something was received in the loop below"", 'comment_created': datetime.datetime(2021, 7, 13, 18, 12, 10, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 669001865, 'comment_body': 'nit: I believe all of this can be removed', 'comment_created': datetime.datetime(2021, 7, 13, 18, 13, 15, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 669016967, 'comment_body': 'Is this needed so that you can subscribe to the topic below successfully?', 'comment_created': datetime.datetime(2021, 7, 13, 18, 36, 12, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 669017168, 'comment_body': '```suggestion\r\n  EXPECT_TRUE(node.Subscribe(topic, &OnNewSegmentationFrame));\r\n```', 'comment_created': datetime.datetime(2021, 7, 13, 18, 36, 30, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 669027010, 'comment_body': 'Try doing the following:\r\n\r\n```diff\r\ndiff --git a/include/ignition/sensors/SegmentationCameraSensor.hh b/include/ignition/sensors/SegmentationCameraSensor.hh\r\nindex 10230f9..df8d387 100644\r\n--- a/include/ignition/sensors/SegmentationCameraSensor.hh\r\n+++ b/include/ignition/sensors/SegmentationCameraSensor.hh\r\n@@ -33,6 +33,8 @@\r\n #include ""ignition/msgs.hh""\r\n #include <sdf/sdf.hh>\r\n \r\n+#include ""ignition/sensors/segmentation_camera/Export.hh""\r\n+\r\n namespace ignition\r\n {\r\n   namespace sensors\r\n@@ -49,7 +51,8 @@ namespace ignition\r\n     /// It offers both an ignition-transport interface and a direct C++ API\r\n     /// to access the image data. The API works by setting a callback to be\r\n     /// called with image data.\r\n-    class SegmentationCameraSensor : public CameraSensor\r\n+    class IGNITION_SENSORS_SEGMENTATION_CAMERA_VISIBLE\r\n+      SegmentationCameraSensor : public CameraSensor\r\n     {\r\n       /// \\brief constructor\r\n       public: SegmentationCameraSensor();\r\n```\r\n\r\nThe `segmentation_camera/Export.hh` file is creating during the build/install process by `ign-cmake`, and this is the file that defines the macro. If you\'d like to take a look at this file, you can search for them in the root of your colcon workspace. Here\'s what I see when I search for them:\r\n```\r\n$ find . | grep ""segmentation_camera/Export""\r\n./install/include/ignition/sensors6/ignition/sensors/segmentation_camera/Export.hh\r\n./build/ignition-sensors6/include/ignition/sensors/segmentation_camera/Export.hh\r\n```', 'comment_created': datetime.datetime(2021, 7, 13, 18, 51, 51, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 671120979, 'comment_body': ""mmm, I can't do that, because i copy the data from the buffer coming from the rendering camera (which is in the format of raw pointer) and copy its content with memcpy (and it refuses to do that with smart pointers)"", 'comment_created': datetime.datetime(2021, 7, 16, 9, 55, 47, tzinfo=datetime.timezone.utc), 'commenter': 'AmrElsersy', 'type': 'User'}, {'comment_id': 671180766, 'comment_body': 'In all similar sensors implementations, they just call  `this->AdvertiseInfo()` directly .. but it publishes on topic ""/camera_info"" .. which may conflict with other camera ... so i add its name to the topic first \r\n\r\nI cannot access the ""/camera_info"" string other than hardcoding it .. because it is hardcoded in the parent camera class', 'comment_created': datetime.datetime(2021, 7, 16, 11, 46, 4, tzinfo=datetime.timezone.utc), 'commenter': 'AmrElsersy', 'type': 'User'}, {'comment_id': 671586841, 'comment_body': 'It is already tested in the rendering::SegmentationCamera', 'comment_created': datetime.datetime(2021, 7, 17, 1, 20, 3, tzinfo=datetime.timezone.utc), 'commenter': 'AmrElsersy', 'type': 'User'}, {'comment_id': 671891404, 'comment_body': '> I cannot access the ""/camera_info"" string other than hardcoding it .. because it is hardcoded in the parent camera class\r\n\r\n:+1: \r\n\r\nIt looks like there\'s a `TODO` note about making the camera info topic configurable in the parent camera class:\r\n\r\nhttps://github.com/ignitionrobotics/ign-sensors/blob/53c87ea5be1796fa4c3c5fce376a07c8bd695101/src/CameraSensor.cc#L491-L492\r\n\r\nSo, would you mind adding a `TODO` note here as well to update the hardcoded topic once the parent camera class is changed to make this topic configurable? That way, we keep this class up-to-date whenever the parent camera class is updated.', 'comment_created': datetime.datetime(2021, 7, 18, 20, 11, 25, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 671891878, 'comment_body': '```suggestion\r\n#include <sdf/sdf.hh>\r\n\r\n#include ""ignition/sensors/CameraSensor.hh""\r\n```\r\n\r\nnit: add whitespace to separate other project headers from local project headers', 'comment_created': datetime.datetime(2021, 7, 18, 20, 15, 30, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 671892050, 'comment_body': '```suggestion\r\n#include <ignition/common/Time.hh>\r\n#include <ignition/msgs.hh>\r\n#include <ignition/transport/Node.hh>\r\n#include <ignition/transport/Publisher.hh>\r\n```\r\nnit: alphabetical order', 'comment_created': datetime.datetime(2021, 7, 18, 20, 16, 48, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 671892126, 'comment_body': '```suggestion\r\n#include <ignition/common/Console.hh>\r\n#include <ignition/common/Image.hh>\r\n#include <ignition/common/Profiler.hh>\r\n```\r\nnit: alphabetical order', 'comment_created': datetime.datetime(2021, 7, 18, 20, 17, 27, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 671892874, 'comment_body': '```suggestion\r\n  public: const std::string topicLabelsMapSuffix = ""/labels_map"";\r\n```', 'comment_created': datetime.datetime(2021, 7, 18, 20, 24, 7, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 671893015, 'comment_body': '```suggestion\r\n    ignerr << ""Unable to create publisher on topic [""\r\n```', 'comment_created': datetime.datetime(2021, 7, 18, 20, 25, 33, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 671893046, 'comment_body': '```suggestion\r\n    ignerr << ""Unable to create publisher on topic [""\r\n```', 'comment_created': datetime.datetime(2021, 7, 18, 20, 25, 55, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 671893134, 'comment_body': ""```suggestion\r\n```\r\nnit: delete this line, it looks like it's a leftover `cout` from debugging"", 'comment_created': datetime.datetime(2021, 7, 18, 20, 26, 54, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 671894115, 'comment_body': '```suggestion\r\n    this->dataPtr->SaveImage(this->dataPtr->segmentationColoredBuffer,\r\n      this->dataPtr->segmentationLabelsBuffer, width, height);\r\n```\r\nLooking at the `SaveImage` method, the colored buffer is the first parameter, not the labels buffer https://github.com/ignitionrobotics/ign-sensors/blob/4ac74b351c91fa0dfde1ad93b819b07590159ed2/src/SegmentationCameraSensor.cc#L38-L48', 'comment_created': datetime.datetime(2021, 7, 18, 20, 34, 43, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 671894736, 'comment_body': '```suggestion\r\n  std::string coloredName = this->saveImagePrefix + ""colored_"" +\r\n                         std::to_string(this->saveImageCounter) + "".png"";\r\n  std::string labelsName = this->saveImagePrefix + ""labels_"" +\r\n```\r\nit looks like the strings were assigned to the wrong variable names, probably because this method was called with parameters in reverse order as I mentioned in my previous comment', 'comment_created': datetime.datetime(2021, 7, 18, 20, 40, 14, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 671895090, 'comment_body': '```suggestion\r\n  // check a pixel between 2 boxes & a pixel below a box\r\n  uint32_t betweenBoxesIndex = (120 * width + 230) * channels;\r\n  uint32_t belowBoxesIndex = (200 * width + 280) * channels;\r\n  uint8_t betweenBoxes = g_buffer[betweenBoxesIndex];\r\n  uint8_t belowBoxes = g_buffer[belowBoxesIndex];\r\n  // check if the first pixel(background) = the background label\r\n  uint8_t background = g_buffer[0];\r\n```\r\nnit: re-arrange code to avoid confusion with the comments', 'comment_created': datetime.datetime(2021, 7, 18, 20, 43, 1, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 671896069, 'comment_body': ""Hmm, it seems like there is some overlap/redundancy in testing between `ign-sensors` and `ign-rendering`, but I'm not sure what kind of tests should go in which repository for a given sensor and its rendering capabilities... @iche033 would you mind chiming in to help clarify which tests belong to which repository?"", 'comment_created': datetime.datetime(2021, 7, 18, 20, 52, 31, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 680081326, 'comment_body': '```suggestion\r\n#include <memory>\r\n#include <string>\r\n```\r\nnit: alphabetical order', 'comment_created': datetime.datetime(2021, 7, 30, 16, 42, 37, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 680087342, 'comment_body': '```suggestion\r\n#include <memory>\r\n#include <mutex>\r\n```\r\nnit: alphabetical order', 'comment_created': datetime.datetime(2021, 7, 30, 16, 48, 29, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 680088593, 'comment_body': '```suggestion\r\n  /// \\return True if the image was saved successfully. False can mean\r\n  /// that the image save path does not exist and creation\r\n  /// of the path was not possible.\r\n```', 'comment_created': datetime.datetime(2021, 7, 30, 16, 50, 28, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 680089271, 'comment_body': ""```suggestion\r\n```\r\nremove this line? I can't seem to find a reference of `ImageSaver` anywhere else"", 'comment_created': datetime.datetime(2021, 7, 30, 16, 51, 40, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 680092308, 'comment_body': '```suggestion\r\n      igndbg << ""Wrong type ["" << type <<\r\n        ""], type should be semantic or instance or panoptic"" << std::endl;\r\n```\r\nnit: we typically use `[ ... ]` to enclose data when printing error/debug messages', 'comment_created': datetime.datetime(2021, 7, 30, 16, 57, 1, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 680098975, 'comment_body': ""```suggestion\r\n      public: virtual rendering::SegmentationCameraPtr SegmentationCamera() const;\r\n```\r\nsince this is a getter, can it be marked `const`? Or does it need to be non-const because it's used to be modified somewhere else?"", 'comment_created': datetime.datetime(2021, 7, 30, 17, 8, 40, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 680108161, 'comment_body': ""Do these messages need to be data members of the `SegmentationCameraSensorPrivate` class? It looks like the're only used in the `Update` method, so I think it would be better to create new message variables in that method instead."", 'comment_created': datetime.datetime(2021, 7, 30, 17, 25, 1, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 680112247, 'comment_body': '```suggestion\r\n/// \\brief Label of the boxes in the scene\r\n```', 'comment_created': datetime.datetime(2021, 7, 30, 17, 31, 51, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 680114662, 'comment_body': '```suggestion\r\n  EXPECT_EQ(width, static_cast<int>(sensor->ImageWidth()));\r\n  EXPECT_EQ(height, static_cast<int>(sensor->ImageHeight()));\r\n```\r\nnit: use static_cast instead of c-style cast: https://en.cppreference.com/w/cpp/language/static_cast', 'comment_created': datetime.datetime(2021, 7, 30, 17, 36, 15, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 680152314, 'comment_body': 'Would it be better to call this in `OnNewSegmentationFrame`, so that we save images whenever they are received?', 'comment_created': datetime.datetime(2021, 7, 30, 18, 45, 47, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 683424675, 'comment_body': 'That is to avoid creating them each time in Update as it is called periodically ', 'comment_created': datetime.datetime(2021, 8, 5, 12, 54, 16, tzinfo=datetime.timezone.utc), 'commenter': 'AmrElsersy', 'type': 'User'}, {'comment_id': 683427218, 'comment_body': ""We don't want to save all images unless the user want to save them, so if the user didn't specify that he wants to save in the SDF, nothing will be saved"", 'comment_created': datetime.datetime(2021, 8, 5, 12, 57, 27, tzinfo=datetime.timezone.utc), 'commenter': 'AmrElsersy', 'type': 'User'}, {'comment_id': 713495659, 'comment_body': ""These indices may need to be swapped to RGB instead of GBR - let's see what happens in https://github.com/ignitionrobotics/ign-rendering/pull/419"", 'comment_created': datetime.datetime(2021, 9, 21, 23, 54, 39, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 713542976, 'comment_body': 'Indexing has been updated to follow RGB instead of GBR in order to match https://github.com/ignitionrobotics/ign-rendering/pull/419: see https://github.com/ignitionrobotics/ign-sensors/pull/133/commits/8642b60fdac3e03b8712d6a39b62737c49bcc9bb', 'comment_created': datetime.datetime(2021, 9, 22, 2, 24, 26, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}]","[{'commit_sha': '1c5eec6796e8015eaf7de298742d5501b5e39011', 'committer_username': 'AmrElsersy', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 19, 21, 42, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6bde206516437772c2208089161ff0671503cea8', 'committer_username': 'AmrElsersy', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 19, 21, 42, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4ea873a49e96ca3be0c8ad8fb21936e9cc132b84', 'committer_username': 'AmrElsersy', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 19, 21, 42, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd2457899bbcd353c25cc0f56f342e2da9d05631e', 'committer_username': 'AmrElsersy', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 19, 21, 42, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '08486833fe5e226c0c005d655ae621e214bc844b', 'committer_username': 'AmrElsersy', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 19, 21, 42, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c851f1e24ac039b7b40c962bff4b6ead1d34c40a', 'committer_username': 'AmrElsersy', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 19, 21, 42, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6589a829dda295a765dbd75829fd61443783efc9', 'committer_username': 'AmrElsersy', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 19, 21, 42, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4ac74b351c91fa0dfde1ad93b819b07590159ed2', 'committer_username': 'adlarkin', 'committer_name': 'Ashton Larkin', 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 2, 17, 1, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8a771167d2a042aa11326cfc4c78949936315781', 'committer_username': 'AmrElsersy', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 19, 21, 42, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ffa767ee9780c770716c621e5a7d650cdf7bc9dc', 'committer_username': 'AmrElsersy', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 19, 21, 42, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1059bdc3c061be619c84a8399530bdcfeceac5f6', 'committer_username': 'adlarkin', 'committer_name': 'Ashton Larkin', 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 2, 17, 1, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': '031179069829353b1a02b33de0853ea26809169b', 'committer_username': 'AmrElsersy', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 19, 21, 42, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e2c5b52ed569d1cc2fafec4eba651e1befde7380', 'committer_username': 'AmrElsersy', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 19, 21, 42, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ed5c13600f5f357c656978c6fe55ff30b57f8e4f', 'committer_username': 'AmrElsersy', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 19, 21, 42, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e9741dc9f2e4209970e80264f77778b8426d66ce', 'committer_username': 'AmrElsersy', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 19, 21, 42, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a9624b783cc97012d7f40ff3c437a8cd56fbbd7c', 'committer_username': 'AmrElsersy', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 19, 21, 42, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4b543d3382766880827228577c32af0781ead797', 'committer_username': 'AmrElsersy', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 19, 21, 42, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '40d86fe78cb173227c0dc019e019d7d4da7a4b0e', 'committer_username': 'adlarkin', 'committer_name': 'Ashton Larkin', 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 2, 17, 1, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd08e138decfa6067ca01422d82994d1af62e171a', 'committer_username': 'AmrElsersy', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 19, 21, 42, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7e2fc2b08d731806d70d988031020bbeda9cf4d7', 'committer_username': 'AmrElsersy', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 19, 21, 42, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3f8b0c81eec49e3c97464bbdd79422691cb42fa0', 'committer_username': 'AmrElsersy', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 19, 21, 42, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'be756cf7057874e151c417e2fce0cb2cb02c7b60', 'committer_username': 'AmrElsersy', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 19, 21, 42, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7f8f045a7f39a13fccdb847b0aa55d70423cc3db', 'committer_username': 'AmrElsersy', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 19, 21, 42, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd655cb3ba67ee6d85a9f71196a7a77e6e9ef7454', 'committer_username': 'chapulina', 'committer_name': 'Louise Poubel', 'committer_email': None, 'commit_date': datetime.datetime(2013, 10, 22, 22, 20, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '32c4f6a03aac7b18a285de62163dc116fc847ec3', 'committer_username': 'adlarkin', 'committer_name': 'Ashton Larkin', 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 2, 17, 1, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': '686757ae853dfaf78bcdacc5eeef05ede4ecd7e3', 'committer_username': 'adlarkin', 'committer_name': 'Ashton Larkin', 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 2, 17, 1, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ba6d2cec7b3c7d6d86f6759e736979d197b5b259', 'committer_username': 'adlarkin', 'committer_name': 'Ashton Larkin', 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 2, 17, 1, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': '42a3e5b91fa954534c9183946eadf7b3f4cf2c89', 'committer_username': 'adlarkin', 'committer_name': 'Ashton Larkin', 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 2, 17, 1, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8642b60fdac3e03b8712d6a39b62737c49bcc9bb', 'committer_username': 'adlarkin', 'committer_name': 'Ashton Larkin', 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 2, 17, 1, 37, tzinfo=datetime.timezone.utc)}]",,35613645,,User,,53,,9,85
665450112,Label Component & System,"#### üéâ New feature

related to [#134](https://github.com/ignitionrobotics/ign-sensors/issues/134) [#135](https://github.com/ignitionrobotics/ign-sensors/issues/135)

## Summary
The goal of the PR is to add a way to add labels to visuals via SDF to be used in Segmentation & BoundingBox cameras.

##### Depends on
[SDF #592](https://github.com/osrf/sdformat/pull/592)

### Features
- Label Component
- Label Configure System that creates Label component to the visual
- Editing RenderUtil to pass these label components as UserData to the visuals

### How to use
use that plugin format to add label in the <label> tag (for ex: 1)
```
  <visual>
      <plugin filename=""ignition-gazebo-label-system"" name=""ignition::gazebo::systems::Label"">
        <label>1</label>
      </plugin>
  </visual>
```

The plugin can be added also to the parent model
```
 <model>
      <plugin filename=""ignition-gazebo-label-system"" name=""ignition::gazebo::systems::Label"">
        <label>1</label>
      </plugin>
      <visual> ... </visual>
  </model>
```


Or to the <include> tag of fuel models
```
    <include>
      <uri> ... </uri>
      <plugin filename=""ignition-gazebo-label-system"" name=""ignition::gazebo::systems::Label"">
        <label>1</label>
      </plugin>
    </include>
```
## Checklist
- [x] Signed all commits for DCO
- [ ] Added tests
- [ ] Added example and/or tutorial
- [ ] Updated documentation (as needed)
- [ ] Updated migration guide (as needed)
- [x] Code check passed (In source directory, run `sh tools/code_check.sh`)
- [x] All tests passed (See [test coverage](https://ignitionrobotics.org/docs/all/contributing#test-coverage))
- [ ] While waiting for a review on your PR, please help review


Notes:
- The code supposes that each model in sdf will have 1 link and that link will have 1 visual, tell me if you think there is any problems of that 
- I deleted some curly bracket lines because I had a warning that RenderUtil::Update function has exceed 500 line",True,853,https://api.github.com/repos/gazebosim/gz-sim/pulls/853,https://github.com/gazebosim/gz-sim/pull/853,closed,1301,509,12,19,12,59,2,2,"[{'name': 'beta'}, {'name': 'üèØ fortress'}]",2021-06-09 00:15:19+00:00,2021-09-22 22:56:33+00:00,9153674.0,"105 days, 22:41:14","[{'comment_id': 648027042, 'comment_body': '```suggestion\r\n * Copyright (C) 2021 Open Source Robotics Foundation\r\n```', 'comment_created': datetime.datetime(2021, 6, 9, 7, 10, 13, tzinfo=datetime.timezone.utc), 'commenter': 'ahcorde', 'type': 'User'}, {'comment_id': 648027538, 'comment_body': '```suggestion\r\n#include ""ignition/gazebo/Export.hh""\r\n#include ""ignition/gazebo/components/Component.hh""\r\n#include ""ignition/gazebo/components/Factory.hh""\r\n#include ""ignition/gazebo/config.hh""\r\n```', 'comment_created': datetime.datetime(2021, 6, 9, 7, 10, 58, tzinfo=datetime.timezone.utc), 'commenter': 'ahcorde', 'type': 'User'}, {'comment_id': 648027844, 'comment_body': 'Restore', 'comment_created': datetime.datetime(2021, 6, 9, 7, 11, 25, tzinfo=datetime.timezone.utc), 'commenter': 'ahcorde', 'type': 'User'}, {'comment_id': 648027956, 'comment_body': 'Restore', 'comment_created': datetime.datetime(2021, 6, 9, 7, 11, 34, tzinfo=datetime.timezone.utc), 'commenter': 'ahcorde', 'type': 'User'}, {'comment_id': 648028293, 'comment_body': 'add `{}`', 'comment_created': datetime.datetime(2021, 6, 9, 7, 12, 5, tzinfo=datetime.timezone.utc), 'commenter': 'ahcorde', 'type': 'User'}, {'comment_id': 648028395, 'comment_body': 'add `{}`', 'comment_created': datetime.datetime(2021, 6, 9, 7, 12, 16, tzinfo=datetime.timezone.utc), 'commenter': 'ahcorde', 'type': 'User'}, {'comment_id': 648028997, 'comment_body': '```suggestion\r\n * Copyright (C) 2021 Open Source Robotics Foundation\r\n```', 'comment_created': datetime.datetime(2021, 6, 9, 7, 13, 10, tzinfo=datetime.timezone.utc), 'commenter': 'ahcorde', 'type': 'User'}, {'comment_id': 648029165, 'comment_body': '```suggestion\r\n#include ""ignition/gazebo/config.hh""\r\n#include ""ignition/gazebo/System.hh""\r\n```', 'comment_created': datetime.datetime(2021, 6, 9, 7, 13, 28, tzinfo=datetime.timezone.utc), 'commenter': 'ahcorde', 'type': 'User'}, {'comment_id': 648192736, 'comment_body': 'I got codecheck error that RenderUtil::Update function has exceed 500 line, so that is why i removed these and the others\r\nis that ok ?', 'comment_created': datetime.datetime(2021, 6, 9, 10, 58, 16, tzinfo=datetime.timezone.utc), 'commenter': 'AmrElsersy', 'type': 'User'}, {'comment_id': 650463821, 'comment_body': 'Had to remove some ""{ }"" because the RenderUtil::Update function produce a codecheck error as it exceeded 500 non-comment line', 'comment_created': datetime.datetime(2021, 6, 13, 3, 37, 55, tzinfo=datetime.timezone.utc), 'commenter': 'AmrElsersy', 'type': 'User'}, {'comment_id': 651926073, 'comment_body': '```suggestion\r\n    ignerr << ""Failed to load Label system; label tag not found.\\n"";\r\n```', 'comment_created': datetime.datetime(2021, 6, 15, 15, 49, 55, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 651926635, 'comment_body': '```suggestion\r\n    ignerr << ""Failed to configure Label system; value "" << label\r\n      << "" is not in [0-255] range.\\n"";\r\n```', 'comment_created': datetime.datetime(2021, 6, 15, 15, 50, 35, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 651927862, 'comment_body': '```suggestion\r\n    // Documentation inherited\r\n```', 'comment_created': datetime.datetime(2021, 6, 15, 15, 51, 57, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 651939778, 'comment_body': '```suggestion\r\n * Copyright (C) 2021 Open Source Robotics Foundation\r\n```', 'comment_created': datetime.datetime(2021, 6, 15, 16, 6, 37, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 651939971, 'comment_body': '```suggestion\r\n * Copyright (C) 2021 Open Source Robotics Foundation\r\n```', 'comment_created': datetime.datetime(2021, 6, 15, 16, 6, 51, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 652208731, 'comment_body': ""I've opened a PR that refactors `RenderUtil::Update` to be less than 500 lines (see #858). So, would you mind reverting any curly braces you have removed/other changes you made to meet the 500 line limit? Once #858 is merged and forward-ported to `main`, the codecheck error for exceeding 500 lines should no longer be an issue."", 'comment_created': datetime.datetime(2021, 6, 15, 23, 1, 27, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 652211245, 'comment_body': ""```suggestion\r\n  /// \\brief A component that holds the label of an entity. One example use\r\n  /// case of the Label component is with Segmentation & Bounding box \r\n  /// sensors to generate dataset annotations.\r\n```\r\nThere's a chance that users may want to use this component for applications other than segmentation and bounding box sensors. So, we should make the documentation as generic as possible."", 'comment_created': datetime.datetime(2021, 6, 15, 23, 8, 11, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 652222263, 'comment_body': 'I\'ve got a few thoughts/questions about this component that I\'d like to get other people\'s thoughts on:\r\n1. While we like to make components as generic as possible so that they can be re-used, I wonder if the name ""Label"" is _too generic_. Would it be worth renaming this component to something a little more specific? If so, what could we rename it to that keeps generality?\r\n2. Is it okay to keep the data for this component as an `int`, or should we use a [fixed width integer type](https://en.cppreference.com/w/cpp/types/integer)? For example, I see that in the visibility component, we are using `uint32_t`: https://github.com/ignitionrobotics/ign-gazebo/blob/773eea520cfac060733449bfe0a15b77ab80a6f1/include/ignition/gazebo/components/Visibility.hh#L34', 'comment_created': datetime.datetime(2021, 6, 15, 23, 20, 55, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 652229757, 'comment_body': '```suggestion\r\n#include ""ignition/gazebo/components/BoundingBoxCamera.hh""\r\n#include ""ignition/gazebo/components/Camera.hh""\r\n#include ""ignition/gazebo/components/CastShadows.hh""\r\n#include ""ignition/gazebo/components/Collision.hh""\r\n```\r\nnit: alphabetical order', 'comment_created': datetime.datetime(2021, 6, 15, 23, 29, 1, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 652243456, 'comment_body': '```suggestion\r\n  /// \\brief A map of entity ids and label data for dataset annotations\r\n  public: std::unordered_map<Entity, int> entityLabel;\r\n```\r\nWe can use a `std::unordered_map` for faster runtime performance', 'comment_created': datetime.datetime(2021, 6, 15, 23, 43, 20, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 652247395, 'comment_body': ""Would you mind placing this code in a helper function, and then calling the helper function in `RenderUtil::Update`? That way, we don't re-create the issue of making `RenderUtil::Update` more than 500 lines when new features are added. See #858 for an example."", 'comment_created': datetime.datetime(2021, 6, 15, 23, 47, 43, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 652253501, 'comment_body': '```suggestion\r\n#include <memory>\r\n\r\n#include ""ignition/gazebo/config.hh""\r\n#include ""ignition/gazebo/System.hh""\r\n```\r\nnit: whitespace (see https://google.github.io/styleguide/cppguide.html#Names_and_Order_of_Includes)', 'comment_created': datetime.datetime(2021, 6, 16, 0, 2, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 652254830, 'comment_body': ""```suggestion\r\n  const std::string parentName = _sdf->GetParent()->GetName();\r\n```\r\nBased on how you're using this variable, it looks like you can mark it `const`. Also, it looks like you're not using this variable until later in this method when it's time to set the component for the visual, so would you mind moving the initialization of this variable down to where it's being used? That way, it's easier for readers to understand the variable's purpose."", 'comment_created': datetime.datetime(2021, 6, 16, 0, 6, 22, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 652255519, 'comment_body': '```suggestion\r\n */\r\n \r\n#include ""Label.hh""\r\n\r\n#include <string>\r\n\r\n#include <ignition/plugin/Register.hh>\r\n\r\n#include ""ignition/gazebo/EntityComponentManager.hh""\r\n#include ""ignition/gazebo/components/Label.hh""\r\n#include ""ignition/gazebo/components/Link.hh""\r\n#include ""ignition/gazebo/components/Visual.hh""\r\n```\r\n\r\nSee https://google.github.io/styleguide/cppguide.html#Names_and_Order_of_Includes\r\n\r\nIt also seems like you never use the `World` component, so I don\'t think you need to include the header for it. I also don\'t think you\'re using anything from `<limits>`, so I removed that include statement as well.', 'comment_created': datetime.datetime(2021, 6, 16, 0, 8, 34, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 652255998, 'comment_body': '```suggestion\r\n  auto label = _sdf->Get<int>(labelTag);\r\n```\r\nSince the parameter type is defined as a template argument when calling `Get`, you can use `auto` here to avoid redundancy.', 'comment_created': datetime.datetime(2021, 6, 16, 0, 10, 4, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 652256180, 'comment_body': '```suggestion\r\n  // Set the component to the visual to set its user data, but\r\n  // if the plugin is inside the <model> tag, get its visual child\r\n```', 'comment_created': datetime.datetime(2021, 6, 16, 0, 10, 36, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 652258703, 'comment_body': ""A few comments here:\r\n1. if `parentName` is not `visual` or `model`, I think it would be worth adding an `else` block that prints a warning so that users are aware that the plugin was not used correctly, and the label will be ignored.\r\n2. You have code for if `links.size()` and `visuals.size()` are > 0, but what if they aren't? In these cases, I think that we should again print a warning so that users are aware that links/models are missing, and the label is being ignored."", 'comment_created': datetime.datetime(2021, 6, 16, 0, 18, 26, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 652260120, 'comment_body': ""Another question I have that I'd like to get other people's feedback on: if the plugin is attached to a model, the label is attached to the visual of the first link. Is it a safe/valid assumption to always use the visual of the first link? Or are there cases where a model has several links, and a visual of a different link should be used instead?"", 'comment_created': datetime.datetime(2021, 6, 16, 0, 22, 44, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 652260849, 'comment_body': ""Can you add some more documentation about how this plugin can be used in SDF? I'd like to have all of the SDF tag options specified (for this plugin, I believe the only tag is `<label>`), including valid/invalid input for each tag. Here's an example: https://github.com/ignitionrobotics/ign-gazebo/blob/d3ef3c2233a42ffeb771274b27eb3d6ace0dbf29/src/systems/logical_audio_sensor_plugin/LogicalAudioSensorPlugin.hh#L35-L131"", 'comment_created': datetime.datetime(2021, 6, 16, 0, 25, 3, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 652261237, 'comment_body': '```suggestion\r\n#include ""ignition/gazebo/components/Atmosphere.hh""\r\n#include ""ignition/gazebo/components/BoundingBoxCamera.hh""\r\n#include ""ignition/gazebo/components/Camera.hh""\r\n```\r\nnit: alphabetical order', 'comment_created': datetime.datetime(2021, 6, 16, 0, 26, 24, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 652875788, 'comment_body': '> I wonder if the name ""Label"" is too generic.\r\n\r\nGood point, maybe `SemanticLabel`?\r\n\r\n> should we use a fixed width integer type?\r\n\r\n+1', 'comment_created': datetime.datetime(2021, 6, 16, 16, 56, 2, tzinfo=datetime.timezone.utc), 'commenter': 'chapulina', 'type': 'User'}, {'comment_id': 652877343, 'comment_body': 'Ok great ', 'comment_created': datetime.datetime(2021, 6, 16, 16, 57, 48, tzinfo=datetime.timezone.utc), 'commenter': 'AmrElsersy', 'type': 'User'}, {'comment_id': 652878464, 'comment_body': ""As a user, if I label a model, I'd expect all visuals on the model to get the label. If I want different labels for each visual, I can label the visuals separately."", 'comment_created': datetime.datetime(2021, 6, 16, 16, 59, 20, tzinfo=datetime.timezone.utc), 'commenter': 'chapulina', 'type': 'User'}, {'comment_id': 653204821, 'comment_body': 'Ok, I made it loop over all links and their all visuals to set their user data all instead of the first link / visual, \r\nbut is there any sdf world that has models like that ? (has many links and many visuals) to try on it \r\n@chapulina  @adlarkin ', 'comment_created': datetime.datetime(2021, 6, 17, 3, 50, 37, tzinfo=datetime.timezone.utc), 'commenter': 'AmrElsersy', 'type': 'User'}, {'comment_id': 653825606, 'comment_body': 'I like to use this model to test this kind of thing: https://app.ignitionrobotics.org/OpenRobotics/fuel/models/Double%20pendulum%20with%20base', 'comment_created': datetime.datetime(2021, 6, 17, 18, 18, 38, tzinfo=datetime.timezone.utc), 'commenter': 'chapulina', 'type': 'User'}, {'comment_id': 672041244, 'comment_body': 'it works, it specify the label for every visual inside the model but there is another probelm :D, will put it in a separate comment @chapulina  @adlarkin ', 'comment_created': datetime.datetime(2021, 7, 19, 7, 11, 55, tzinfo=datetime.timezone.utc), 'commenter': 'AmrElsersy', 'type': 'User'}, {'comment_id': 691581970, 'comment_body': ""Similar to my [other comment](https://github.com/ignitionrobotics/ign-gazebo/pull/853#discussion_r707488292), I think it's best to remove these comments in the PR and to comment out as-needed locally when testing a particular sensor"", 'comment_created': datetime.datetime(2021, 8, 18, 20, 31, 20, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 693397229, 'comment_body': 'There is a problem with actors \r\n\r\nI am trying here to create a component of the `<visual>` of the model, so that i can set its user data in the RenderUtil.cc\r\n\r\nAnyway, there is a problem with actor models only, as actors SDF has `<actor>` tag instead of `<model>` tag, so i cannot access its `<visual>` tag, so how can i do that ?\r\n\r\n@adlarkin  @chapulina  @ahcorde @iche033 ', 'comment_created': datetime.datetime(2021, 8, 21, 20, 23, 5, tzinfo=datetime.timezone.utc), 'commenter': 'AmrElsersy', 'type': 'User'}, {'comment_id': 707477225, 'comment_body': '> Anyway, there is a problem with actor models only, as actors SDF has <actor> tag instead of <model> tag, so i cannot access its <visual> tag, so how can i do that ?\r\n\r\nI took a look, but I\'m not sure either. Looking at the [actor SDF spec](http://sdformat.org/spec?ver=1.6&elem=actor), actors can have links, but this is optional. The `<skin>` element description says the following:\r\n```\r\nSkin file which defines a visual and the underlying skeleton which moves it.\r\n```\r\n\r\nSo, perhaps if  a `<skin>` tag is nested in the `<actor>` tag, a visual is stored somewhere? If so, I\'m not sure where the visual would be though. I tried the following code with the [`actor.sdf` example world](https://github.com/ignitionrobotics/ign-gazebo/blob/main/examples/worlds/actor.sdf), but did not see any printed link or visual information:\r\n```c++\r\n    ignerr << ""checking actors..."" << std::endl << std::endl;\r\n    _ecm.Each<components::Actor>(\r\n        [&](const Entity &_entity, const components::Actor *)\r\n        {\r\n          ignerr << ""Actor "" << _entity << std::endl;\r\n\r\n          // see if an actor has links. If so, see if visuals are attached\r\n          // to these links\r\n          auto links = _ecm.ChildrenByComponents<components::Link>(\r\n              _entity, components::Link());\r\n          for (const auto &link : links)\r\n          {\r\n            ignerr << ""\\ton link "" << link << std::endl;\r\n            auto visuals = _ecm.ChildrenByComponents<components::Visual>(\r\n                link, components::Visual());\r\n            for (const auto &visual : visuals)\r\n              ignerr << ""\\t\\thas visual "" << visual << std::endl;\r\n          }\r\n\r\n          // see if visuals are attached to actors directly\r\n          auto visuals = _ecm.ChildrenByComponents<components::Visual>(\r\n              _entity, components::Visual());\r\n          for (const auto &visual : visuals)\r\n            ignerr << ""\\thas visual "" << visual << std::endl;\r\n          return true;\r\n        });\r\n```\r\n\r\nMaybe someone else can chime in to give more thoughts/ideas about this issue :grin: ', 'comment_created': datetime.datetime(2021, 9, 13, 16, 3, 18, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 707483919, 'comment_body': 'Instead of checking the parent SDF for hardcoded strings like `visual` or `model`, you should be able to check if `_entity` is a `visual` or `model` by seeing if it has a [`components::Visual`](https://github.com/ignitionrobotics/ign-gazebo/blob/main/include/ignition/gazebo/components/Visual.hh#L32) or [`components::Model`](https://github.com/ignitionrobotics/ign-gazebo/blob/main/include/ignition/gazebo/components/Model.hh#L85) attached to it:\r\n\r\n```c++\r\n// see if _entity is a visual\r\nif (_ecm.EntityHasComponentType(_entity, components::Visual::typeId)\r\n{\r\n  // do something with the visual entity here\r\n}\r\n\r\n// see if _entity is a model\r\nif (_ecm.EntityHasComponentType(_entity, components::Model::typeId)\r\n{\r\n  // do something with the model entity here\r\n}\r\n```', 'comment_created': datetime.datetime(2021, 9, 13, 16, 11, 42, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 707488292, 'comment_body': ""I know that you commented this out so that you could build this PR with just the Bounding Box PRs in `ign-rendering`/`ign-sensors`, but can you go ahead and uncomment this line? In the PR itself, we should have everything uncommented to avoid accidentally merging code with missing functionality. If you need to comment out certain things for testing a particular sensor locally, that's fine :+1: but, I think we should avoid having these comments in the PR itself"", 'comment_created': datetime.datetime(2021, 9, 13, 16, 17, 19, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 709389400, 'comment_body': ""@adlarkin is right, the closest that an actor has to a visual in the SDF is the skin. But when it comes to entities, we're not creating separate entities for the skin and animation, we only have a single entity for the whole actor. So I think it makes sense to attach the component directly to the actor entity."", 'comment_created': datetime.datetime(2021, 9, 15, 17, 16, 10, tzinfo=datetime.timezone.utc), 'commenter': 'chapulina', 'type': 'User'}, {'comment_id': 709646595, 'comment_body': '> So I think it makes sense to attach the component directly to the actor entity.\r\n\r\nIf this approach were to be taken, is there still a way to get the visual of the actor in `ign-rendering`? The reason why we are attaching a component to something here is so that we can pass this information along to rendering, so that rendering knows what label is associated with a certain visual', 'comment_created': datetime.datetime(2021, 9, 15, 23, 34, 50, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 709662291, 'comment_body': 'Update comment', 'comment_created': datetime.datetime(2021, 9, 16, 0, 19, 17, tzinfo=datetime.timezone.utc), 'commenter': 'chapulina', 'type': 'User'}, {'comment_id': 709662697, 'comment_body': 'Nit: alphabetize', 'comment_created': datetime.datetime(2021, 9, 16, 0, 20, 33, tzinfo=datetime.timezone.utc), 'commenter': 'chapulina', 'type': 'User'}, {'comment_id': 709662845, 'comment_body': 'These can be removed', 'comment_created': datetime.datetime(2021, 9, 16, 0, 20, 52, tzinfo=datetime.timezone.utc), 'commenter': 'chapulina', 'type': 'User'}, {'comment_id': 709663614, 'comment_body': '> is there still a way to get the visual of the actor in ign-rendering? \r\n\r\nI think you can update `SceneManager::NodeById` to also return actor nodes.', 'comment_created': datetime.datetime(2021, 9, 16, 0, 23, tzinfo=datetime.timezone.utc), 'commenter': 'chapulina', 'type': 'User'}, {'comment_id': 709663995, 'comment_body': ""Nit: this include isn't needed"", 'comment_created': datetime.datetime(2021, 9, 16, 0, 24, 15, tzinfo=datetime.timezone.utc), 'commenter': 'chapulina', 'type': 'User'}, {'comment_id': 709664087, 'comment_body': 'alphabetize', 'comment_created': datetime.datetime(2021, 9, 16, 0, 24, 34, tzinfo=datetime.timezone.utc), 'commenter': 'chapulina', 'type': 'User'}, {'comment_id': 709668040, 'comment_body': ""I don't think that will work :disappointed: `SceneManager::NodeById` returns a `rendering::NodePtr`, but the actors are of type `rendering::MeshPtr`: https://github.com/ignitionrobotics/ign-gazebo/blob/f0e235b9c65f84128988648e9f3111ca7ed82c50/src/rendering/SceneManager.cc#L83\r\n\r\nThe problem is that a mesh is a geometry, and a geometry is an object... so, it doesn't look like the inheritance structure allows for this, since a mesh doesn't inherit from the node class at all"", 'comment_created': datetime.datetime(2021, 9, 16, 0, 37, 2, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 709671785, 'comment_body': 'Oh I just realized that actor visuals (which contain those meshes) are already tracked together with other visuals:\r\n\r\nhttps://github.com/ignitionrobotics/ign-gazebo/blob/1e1d0bab44b516d8ae419f3f614630c5a20f82ab/src/rendering/SceneManager.cc#L990-L997\r\n\r\nSo it may already work', 'comment_created': datetime.datetime(2021, 9, 16, 0, 48, 52, tzinfo=datetime.timezone.utc), 'commenter': 'chapulina', 'type': 'User'}, {'comment_id': 711348676, 'comment_body': 'Thanks for that conversation :D @chapulina @adlarkin ', 'comment_created': datetime.datetime(2021, 9, 17, 21, 1, 17, tzinfo=datetime.timezone.utc), 'commenter': 'AmrElsersy', 'type': 'User'}, {'comment_id': 713113588, 'comment_body': '```suggestion\r\n      <name>home</name>\r\n```', 'comment_created': datetime.datetime(2021, 9, 21, 14, 42, 33, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 713115179, 'comment_body': '```suggestion\r\n            <save enabled=""true"">\r\n              <path>segmentation_data/instance_camera</path>\r\n            </save>\r\n```\r\n\r\nLet\'s remove personal paths and use generic, relative paths', 'comment_created': datetime.datetime(2021, 9, 21, 14, 44, 12, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 713115420, 'comment_body': '```suggestion\r\n    <model name=""instance_camera"">\r\n```', 'comment_created': datetime.datetime(2021, 9, 21, 14, 44, 26, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 713116454, 'comment_body': '```suggestion\r\n            <save enabled=""true"">\r\n              <path>segmentation_data/semantic_camera</path>\r\n            </save>\r\n```\r\n\r\nLet\'s remove personal paths and use generic, relative paths', 'comment_created': datetime.datetime(2021, 9, 21, 14, 45, 31, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 713586540, 'comment_body': 'This code works fine for most models, but will not work for nested models (the code only checks for child links/visuals, but not child models). Should we add a `TODO` note to add support for nested models and/or create an issue to track this?', 'comment_created': datetime.datetime(2021, 9, 22, 4, 44, 50, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}, {'comment_id': 713587096, 'comment_body': 'Issue + TODO with link to issue would be ideal, thanks!', 'comment_created': datetime.datetime(2021, 9, 22, 4, 46, 40, tzinfo=datetime.timezone.utc), 'commenter': 'chapulina', 'type': 'User'}, {'comment_id': 713593198, 'comment_body': 'All done: see https://github.com/ignitionrobotics/ign-gazebo/pull/853/commits/cc6a1919340bbc11b6ccd9ed4900f6f1e8e12d47 and https://github.com/ignitionrobotics/ign-gazebo/issues/1041', 'comment_created': datetime.datetime(2021, 9, 22, 5, 5, 32, tzinfo=datetime.timezone.utc), 'commenter': 'adlarkin', 'type': 'User'}]","[{'commit_sha': '902099e50a6e7c8f3eb418f6cff1b4c0709ac3eb', 'committer_username': 'AmrElsersy', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 19, 21, 42, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '472a228b5a18e282c2a9dd1cc8be86aeb4fdb54f', 'committer_username': 'AmrElsersy', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 19, 21, 42, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cc18cb6631736c068be466d06f96d52edb2e90ba', 'committer_username': 'AmrElsersy', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 19, 21, 42, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ebbd916b8251ba8112f80ad00b3e10d981deaa22', 'committer_username': 'AmrElsersy', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 19, 21, 42, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6ac61187702a52bb4c90123b08cdb3e6505847d1', 'committer_username': 'AmrElsersy', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 19, 21, 42, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b119a31e2824a32d8d241f4b35656ba796b78c91', 'committer_username': 'AmrElsersy', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 19, 21, 42, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a8a2bc00644f7b4eda9629403428c291276bb83c', 'committer_username': 'AmrElsersy', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 19, 21, 42, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fc7de7f7f97267c57f8047f54ca869f2eef97238', 'committer_username': 'AmrElsersy', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 19, 21, 42, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '86bf2df5b25e2d3fe233811b2cee25b84aef1502', 'committer_username': 'AmrElsersy', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 19, 21, 42, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f5b786da97c04e741c4af40595bce64ab6d14eaa', 'committer_username': 'AmrElsersy', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 19, 21, 42, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '545c83c6c455c7387734a9df9f6a52b57f0d4a53', 'committer_username': 'AmrElsersy', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 19, 21, 42, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a7a2ad1afef507ae7b216266584e9da5d92d9b33', 'committer_username': 'AmrElsersy', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 19, 21, 42, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'baae9580ac3a1df1f14b306efeb2d554078f6eac', 'committer_username': 'adlarkin', 'committer_name': 'Ashton Larkin', 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 2, 17, 1, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ecc178393238219a812fdcac4aa6f5009b74f89b', 'committer_username': 'adlarkin', 'committer_name': 'Ashton Larkin', 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 2, 17, 1, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4b3e0e8ee7bbfd700a6ec3d9b31b2c2c62786001', 'committer_username': 'adlarkin', 'committer_name': 'Ashton Larkin', 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 2, 17, 1, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': '27c89dee7eba290f5c127e8c4b5490dae2dc694c', 'committer_username': 'adlarkin', 'committer_name': 'Ashton Larkin', 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 2, 17, 1, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cc6a1919340bbc11b6ccd9ed4900f6f1e8e12d47', 'committer_username': 'adlarkin', 'committer_name': 'Ashton Larkin', 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 2, 17, 1, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bfbdc5d936246ce0d71a2caa4fac58ad0f62a2df', 'committer_username': 'chapulina', 'committer_name': 'Louise Poubel', 'committer_email': None, 'commit_date': datetime.datetime(2013, 10, 22, 22, 20, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a72d3422693a37bc8bc624d4e359698003070a76', 'committer_username': 'chapulina', 'committer_name': 'Louise Poubel', 'committer_email': None, 'commit_date': datetime.datetime(2013, 10, 22, 22, 20, 7, tzinfo=datetime.timezone.utc)}]",,35613645,,User,,53,,9,85

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
255865342,gz-rendering,gazebosim/gz-rendering,C++,50,54,11,68,2596,114,96,3,"[{'id': 663714990, 'number': 334, 'closed': datetime.datetime(2022, 6, 15, 17, 1, 23, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 7, 16, 23, 1, tzinfo=datetime.timezone.utc), 'time_taken': 32229502.0, 'time_delta': '373 days, 0:38:22', 'additions': 3820, 'deletions': 10, 'state': 'closed'}, {'id': 656932079, 'number': 329, 'closed': datetime.datetime(2021, 9, 20, 22, 10, 41, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 5, 28, 18, 47, 28, tzinfo=datetime.timezone.utc), 'time_taken': 9948193.0, 'time_delta': '115 days, 3:23:13', 'additions': 2597, 'deletions': 4, 'state': 'closed'}]"
254823084,sdformat,gazebosim/sdformat,C++,91,160,13,99,5290,247,141,9,"[{'id': 668984484, 'number': 592, 'closed': datetime.datetime(2021, 8, 19, 1, 54, 11, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 13, 3, 34, 49, tzinfo=datetime.timezone.utc), 'time_taken': 5782762.0, 'time_delta': '66 days, 22:19:22', 'additions': 326, 'deletions': 2, 'state': 'closed'}]"
255865313,gz-msgs,gazebosim/gz-msgs,C++,44,21,11,54,1539,11,62,1,"[{'id': 671847782, 'number': 165, 'closed': datetime.datetime(2021, 8, 18, 20, 37, 38, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 16, 20, 4, 7, tzinfo=datetime.timezone.utc), 'time_taken': 5445211.0, 'time_delta': '63 days, 0:33:31', 'additions': 238, 'deletions': 0, 'state': 'closed'}]"
255865300,gz-math,gazebosim/gz-math,C++,63,54,8,75,2999,61,85,4,"[{'id': 715366025, 'number': 224, 'closed': datetime.datetime(2021, 9, 7, 16, 59, 49, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 18, 19, 40, 43, tzinfo=datetime.timezone.utc), 'time_taken': 1718346.0, 'time_delta': '19 days, 21:19:06', 'additions': 333, 'deletions': 0, 'state': 'closed'}]"
255865360,gz-sensors,gazebosim/gz-sensors,C++,56,56,11,50,1303,42,47,5,"[{'id': 705401719, 'number': 148, 'closed': datetime.datetime(2021, 8, 6, 11, 32, 1, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 6, 11, 13, 43, tzinfo=datetime.timezone.utc), 'time_taken': 1098.0, 'time_delta': '0:18:18', 'additions': 1159, 'deletions': 0, 'state': 'closed'}, {'id': 671858902, 'number': 136, 'closed': datetime.datetime(2022, 6, 17, 16, 0, 17, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 16, 20, 15, 32, tzinfo=datetime.timezone.utc), 'time_taken': 31607085.0, 'time_delta': '365 days, 19:44:45', 'additions': 1919, 'deletions': 1, 'state': 'closed'}, {'id': 669055046, 'number': 133, 'closed': datetime.datetime(2021, 9, 22, 15, 7, 36, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 13, 13, 38, 54, tzinfo=datetime.timezone.utc), 'time_taken': 8731722.0, 'time_delta': '101 days, 1:28:42', 'additions': 1626, 'deletions': 2, 'state': 'closed'}]"
255865265,gz-sim,gazebosim/gz-sim,C++,253,654,17,136,6994,330,176,24,"[{'id': 665450112, 'number': 853, 'closed': datetime.datetime(2021, 9, 22, 22, 56, 33, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 9, 0, 15, 19, tzinfo=datetime.timezone.utc), 'time_taken': 9153674.0, 'time_delta': '105 days, 22:41:14', 'additions': 1301, 'deletions': 509, 'state': 'closed'}, {'id': 463086654, 'number': 270, 'closed': datetime.datetime(2020, 9, 23, 1, 9, 8, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 5, 1, 8, 21, tzinfo=datetime.timezone.utc), 'time_taken': 4233647.0, 'time_delta': '49 days, 0:00:47', 'additions': 939, 'deletions': 50, 'state': 'closed'}, {'id': 462287707, 'number': 267, 'closed': datetime.datetime(2020, 8, 3, 16, 54, 52, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 3, 16, 52, 58, tzinfo=datetime.timezone.utc), 'time_taken': 114.0, 'time_delta': '0:01:54', 'additions': 8860, 'deletions': 1201, 'state': 'closed'}, {'id': 416751947, 'number': 133, 'closed': datetime.datetime(2020, 6, 7, 0, 51, 41, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 5, 12, 14, 10, 22, tzinfo=datetime.timezone.utc), 'time_taken': 2198479.0, 'time_delta': '25 days, 10:41:19', 'additions': 818, 'deletions': 0, 'state': 'closed'}]"
