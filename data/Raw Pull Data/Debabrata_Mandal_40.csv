pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
425361555,Add histogram class and related functionality,"<!-- Pull Requests MUST come from topic branch based on develop, and NEVER on `master) --->

### Description

This contains the initial implementation of **histogram** functionality for STL containers for GIL images. Basic tests checking for correctness of histogram have been provided. Usage syntax and distinction between compatible and incompatible containers have been illustrated in a example file.

There was some dicussion regarding the name of the function (which now is **image_histogram**) in the mailing thread ([link](https://lists.boost.org/boost-gil/2020/05/0433.php)). I chose on 'image_histogram' since the name 'histogram' is used as the class name in Boost.Histogram and might cause problems in namespace mix-up. Another option could be **histogram_1d** since these functions are meant for that purpose.
<!-- What does this pull request do? -->

### Dependency

Optional - Docs for the this implementation are running in a parallel PR #503.

### References

[Discussions](https://lists.boost.org/boost-gil/2020/05/0410.php) on boost-gil mailing threads.

<!-- Any links related to this PR: issues, other PRs, mailing list threads, StackOverflow questions, etc. -->

### Tasklist

<!-- Add YOUR OWN TASK(s), especially if your PR is a work in progress -->

- [x] Add test case(s)
- [x] Provide documentation
- [x] Ensure all CI builds pass  - R.I.P. Travis CI
- [x] Review and approve
",True,499,https://api.github.com/repos/boostorg/gil/pulls/499,https://github.com/boostorg/gil/pull/499,closed,2244,34,26,31,14,44,2,0,"[{'name': 'cat/feature'}, {'name': 'google-summer-of-code'}]",2020-05-29 22:33:38+00:00,2021-01-23 23:02:51+00:00,20651353.0,"239 days, 0:29:13","[{'comment_id': 432919365, 'comment_body': ""This macro should be accroding to the file path in this case it should be `BOOST_GIL_HISTOGRAM_HPP`\r\n\r\nOn the other hand it makes me thing is this the right place for this directly in the main GIL folder! shouldn't it have some histogram directory or maybe in image_processing directory!?"", 'comment_created': datetime.datetime(2020, 5, 31, 7, 36, 33, tzinfo=datetime.timezone.utc), 'commenter': 'lpranam', 'type': 'User'}, {'comment_id': 432919764, 'comment_body': 'I think the right place for this section is in gil/concepts', 'comment_created': datetime.datetime(2020, 5, 31, 7, 42, 6, tzinfo=datetime.timezone.utc), 'commenter': 'lpranam', 'type': 'User'}, {'comment_id': 432920483, 'comment_body': 'use `histogram` instead of `hist`. variable names which are exposed to the user should be as clear as possible.', 'comment_created': datetime.datetime(2020, 5, 31, 7, 51, 58, tzinfo=datetime.timezone.utc), 'commenter': 'lpranam', 'type': 'User'}, {'comment_id': 432921713, 'comment_body': 'this is code repetition you should consider calling `image_histogram(SrcView const& srcview, Container &hist)`', 'comment_created': datetime.datetime(2020, 5, 31, 8, 9, 52, tzinfo=datetime.timezone.utc), 'commenter': 'lpranam', 'type': 'User'}, {'comment_id': 432923388, 'comment_body': ""instead shouldn't this create equal size bins and store the data according to the bins!?"", 'comment_created': datetime.datetime(2020, 5, 31, 8, 32, 7, tzinfo=datetime.timezone.utc), 'commenter': 'lpranam', 'type': 'User'}, {'comment_id': 432923997, 'comment_body': 'missing endline', 'comment_created': datetime.datetime(2020, 5, 31, 8, 40, 6, tzinfo=datetime.timezone.utc), 'commenter': 'lpranam', 'type': 'User'}, {'comment_id': 432924015, 'comment_body': 'missing endline', 'comment_created': datetime.datetime(2020, 5, 31, 8, 40, 12, tzinfo=datetime.timezone.utc), 'commenter': 'lpranam', 'type': 'User'}, {'comment_id': 432924033, 'comment_body': 'missing endline', 'comment_created': datetime.datetime(2020, 5, 31, 8, 40, 32, tzinfo=datetime.timezone.utc), 'commenter': 'lpranam', 'type': 'User'}, {'comment_id': 432924270, 'comment_body': ""I don't think this is a good idea! We also have pixel types like RGB64!"", 'comment_created': datetime.datetime(2020, 5, 31, 8, 43, 33, tzinfo=datetime.timezone.utc), 'commenter': 'lpranam', 'type': 'User'}, {'comment_id': 432929046, 'comment_body': ""Yes, the first is a typo. It was first in the extension directory I forgot to update it later. I was myself not sure of the correct directory for it. Lets wait for others' opinions."", 'comment_created': datetime.datetime(2020, 5, 31, 9, 46, 27, tzinfo=datetime.timezone.utc), 'commenter': 'codejaeger', 'type': 'User'}, {'comment_id': 432929162, 'comment_body': 'Should I add it to concepts/detail/type_traits.hpp?', 'comment_created': datetime.datetime(2020, 5, 31, 9, 47, 57, tzinfo=datetime.timezone.utc), 'commenter': 'codejaeger', 'type': 'User'}, {'comment_id': 432929196, 'comment_body': 'Will do.\r\n', 'comment_created': datetime.datetime(2020, 5, 31, 9, 48, 11, tzinfo=datetime.timezone.utc), 'commenter': 'codejaeger', 'type': 'User'}, {'comment_id': 432929327, 'comment_body': 'Maybe make a image_histogram_impl(SrcView const& srcview, Container &hist) without the constraints on the template type is what you meant?', 'comment_created': datetime.datetime(2020, 5, 31, 9, 50, 18, tzinfo=datetime.timezone.utc), 'commenter': 'codejaeger', 'type': 'User'}, {'comment_id': 432929474, 'comment_body': 'I was not sure how we could convey that piece of information to the end user i.e. specify what the bin size they should use when accessing the values.', 'comment_created': datetime.datetime(2020, 5, 31, 9, 52, 6, tzinfo=datetime.timezone.utc), 'commenter': 'codejaeger', 'type': 'User'}, {'comment_id': 432929780, 'comment_body': ""Could we put a check on the channel size for specific container types? It wouldn't be clean though."", 'comment_created': datetime.datetime(2020, 5, 31, 9, 55, 56, tzinfo=datetime.timezone.utc), 'commenter': 'codejaeger', 'type': 'User'}, {'comment_id': 435413594, 'comment_body': '@lpranam \r\n> I have some objections with the code format(template parameters)\r\n\r\nWhat are the objections exactly?\r\n\r\nGenerally, as it was agreed quite some time ago, we try to keep the lines up to [100 characters long](https://github.com/boostorg/gil/blob/develop/CONTRIBUTING.md#guidelines).\r\nSecond, parameters are often long (e.g. `mp11::mp_size<typename Layout::color_space_t>::value`) and it is often a good idea to keep names of template parameters self-descriptive, avoid cryptic abbreviation.\r\n\r\nSo, this for example would fit that limit:\r\n\r\n```cpp\r\ntemplate <typename T>\r\nstruct is_indexable<T, decltype((void) ++declval<T>()[0] , 0)> : std::true_type {} ;\r\n```\r\n\r\nbut this would not, hence each parameter goes into separate lines and `<` and `>` are formatted similarly to blocks delimited with `{` and `}` \r\n\r\n```cpp\r\ntemplate <typename ChannelValue, typename Layout>\r\nstruct pixel :\r\n    detail::homogeneous_color_base\r\n    <\r\n        ChannelValue,\r\n        Layout,\r\n        mp11::mp_size<typename Layout::color_space_t>::value\r\n    >\r\n{\r\n...\r\n};\r\n```\r\n\r\nThat makes the whole guideline very simple, without too many exceptions or sub-rules.\r\n\r\nThe only other, subjectively, readable formatting of highly templated source code that I know is one used by Boost.Spirit or other libraries by [Joel de Guzman](https://github.com/cycfi/), Michael Caisse et. al. ', 'comment_created': datetime.datetime(2020, 6, 4, 17, 5, 53, tzinfo=datetime.timezone.utc), 'commenter': 'mloskot', 'type': 'User'}, {'comment_id': 435414512, 'comment_body': 'Or have our own containers as @lpranam suggested in https://lists.boost.org/boost-gil/2020/06/0437.php', 'comment_created': datetime.datetime(2020, 6, 4, 17, 7, 32, tzinfo=datetime.timezone.utc), 'commenter': 'mloskot', 'type': 'User'}, {'comment_id': 443014478, 'comment_body': ""@lpranam If you don't have any proposal on better formatting fitting template parameters list in 100 characters long lines, then I'd suggest to mark this conversation as resolved.\r\n\r\nPersonally, I find reading this much more difficult:\r\n\r\n```cpp\r\nusing tp = boost::mp11::mp_list<typename std::is_convertible<\r\n                    boost::mp11::mp_at<bin_t, boost::mp11::mp_size_t<I>>,\r\n                    typename std::tuple_element<I, Tuple>::type>::type...>;\r\n```\r\nthan\r\n```cpp\r\nusing tp = boost::mp11::mp_list\r\n<\r\n    typename std::is_convertible\r\n    <\r\n        boost::mp11::mp_at<bin_t, boost::mp11::mp_size_t<I>>,\r\n        typename std::tuple_element<I, Tuple>::type\r\n    >::type...\r\n>;\r\n```"", 'comment_created': datetime.datetime(2020, 6, 19, 19, 40, 3, tzinfo=datetime.timezone.utc), 'commenter': 'mloskot', 'type': 'User'}, {'comment_id': 443015531, 'comment_body': 'Please, try to stick to these guidelines https://github.com/boostorg/gil/wiki/Include-Directives-Order', 'comment_created': datetime.datetime(2020, 6, 19, 19, 42, 55, tzinfo=datetime.timezone.utc), 'commenter': 'mloskot', 'type': 'User'}, {'comment_id': 443015661, 'comment_body': 'Again, `{` in new line please ', 'comment_created': datetime.datetime(2020, 6, 19, 19, 43, 14, tzinfo=datetime.timezone.utc), 'commenter': 'mloskot', 'type': 'User'}, {'comment_id': 443016344, 'comment_body': ""I suggest to mark such comments about improvements suggested or planned in future with `TODO`, i.e.\r\n```\r\n// TODO: With C++14 and using auto we don't need the decltype anymore\r\n```\r\nor, if it is about public interface, then the Doxygen way:\r\n```\r\n/// \\todo With C++14 and using auto we don't need the decltype anymore\r\n```"", 'comment_created': datetime.datetime(2020, 6, 19, 19, 45, 13, tzinfo=datetime.timezone.utc), 'commenter': 'mloskot', 'type': 'User'}, {'comment_id': 443016733, 'comment_body': 'I think `base_t` is better than `parent_t`. It is canonical that we derive from *base class*.', 'comment_created': datetime.datetime(2020, 6, 19, 19, 46, 14, tzinfo=datetime.timezone.utc), 'commenter': 'mloskot', 'type': 'User'}, {'comment_id': 443017143, 'comment_body': 'Again, `{` in new line.\r\n\r\nIf it is annoying to keep track of such details, then just use `clang-format` and your code will be consistent at least\r\nSee https://github.com/boostorg/gil/tree/develop/example/clang-format', 'comment_created': datetime.datetime(2020, 6, 19, 19, 47, 29, tzinfo=datetime.timezone.utc), 'commenter': 'mloskot', 'type': 'User'}, {'comment_id': 443017549, 'comment_body': ""Since you've been following the East Const convention, you may do here `size_t const` too.\r\n\r\nSecond, please always qualify `size_t` as `std::size_t`  (I assume we never do `using namespace std;`)"", 'comment_created': datetime.datetime(2020, 6, 19, 19, 48, 42, tzinfo=datetime.timezone.utc), 'commenter': 'mloskot', 'type': 'User'}, {'comment_id': 443020730, 'comment_body': 'I\'d suggest to rename `stl_histogram.hpp` to `std.hpp`, because, IMO:\r\n\r\n1. It is clearer name: a thing related to the `std::` stuff.\r\n\r\n2. Nowadays, 99.99% of us use the C++ Standard Library, not the [C++ Standard Template Library](https://en.wikipedia.org/wiki/Standard_Template_Library) that, *""that influenced many parts of the C++ Standard Library""*. C++ STD != C++ STL\r\n\r\n3. Boost convention, de-facto, is `std.hpp`\r\n\r\n    ```\r\n    $ find . -name std.hpp\r\n    ./assign/include/boost/assign/std.hpp\r\n    ./hana/include/boost/hana/ext/std.hpp\r\n    ./proto/include/boost/proto/functional/std.hpp\r\n    ```', 'comment_created': datetime.datetime(2020, 6, 19, 19, 58, 20, tzinfo=datetime.timezone.utc), 'commenter': 'mloskot', 'type': 'User'}, {'comment_id': 443371571, 'comment_body': '@mloskot should the **container_hash/extensions.hpp** be shifted? It is actually quite confusing because boost::hash_value is actually found in another place at boost/functional/hash.hpp. I will look into this and report back.', 'comment_created': datetime.datetime(2020, 6, 22, 7, 41, 33, tzinfo=datetime.timezone.utc), 'commenter': 'codejaeger', 'type': 'User'}, {'comment_id': 443401352, 'comment_body': '@mloskot Is it necessary to break \r\n\r\n`histogram<boost::mp11::mp_at<bin_t, boost::mp11::mp_size_t<Dimensions>>...> sub_histogram() {}`\r\n\r\ninto \r\n\r\n```\r\n    histogram\r\n    <   \r\n        boost::mp11::mp_at\r\n        <\r\n            bin_t,\r\n            boost::mp11::mp_size_t<Dimensions>\r\n        >...\r\n    > sub_histogram() \r\n    {}\r\n```\r\n\r\nThe former fits within 100 characters.', 'comment_created': datetime.datetime(2020, 6, 22, 8, 36, 43, tzinfo=datetime.timezone.utc), 'commenter': 'codejaeger', 'type': 'User'}, {'comment_id': 443489249, 'comment_body': '@codejaeger No, if it fits in line long for 100 characters, then no need for breaking it.\r\nIn my earlier comments I just used the snippet based on your code as an example.', 'comment_created': datetime.datetime(2020, 6, 22, 11, 20, 38, tzinfo=datetime.timezone.utc), 'commenter': 'mloskot', 'type': 'User'}, {'comment_id': 443491987, 'comment_body': '@codejaeger I meant something like this, which is groups, then folder-based and alphabetical order within groups:\r\n\r\n```\r\n#include <boost/gil/metafunctions.hpp>\r\n#include <boost/gil/pixel.hpp>\r\n#include <boost/gil/concepts/concept_check.hpp>\r\n\r\n#include <boost/mp11.hpp>\r\n#include <boost/container_hash/extensions.hpp>\r\n\r\n#include <type_traits>\r\n#include <unordered_map>\r\n```', 'comment_created': datetime.datetime(2020, 6, 22, 11, 26, 37, tzinfo=datetime.timezone.utc), 'commenter': 'mloskot', 'type': 'User'}, {'comment_id': 447110154, 'comment_body': 'could use `interleaved_view` maybe?', 'comment_created': datetime.datetime(2020, 6, 29, 16, 45, 48, tzinfo=datetime.timezone.utc), 'commenter': 'lpranam', 'type': 'User'}, {'comment_id': 447110367, 'comment_body': 'could use `interleaved_view` maybe?', 'comment_created': datetime.datetime(2020, 6, 29, 16, 46, 10, tzinfo=datetime.timezone.utc), 'commenter': 'lpranam', 'type': 'User'}, {'comment_id': 447110703, 'comment_body': 'missing end line', 'comment_created': datetime.datetime(2020, 6, 29, 16, 46, 44, tzinfo=datetime.timezone.utc), 'commenter': 'lpranam', 'type': 'User'}, {'comment_id': 447110929, 'comment_body': 'missing end line', 'comment_created': datetime.datetime(2020, 6, 29, 16, 47, 8, tzinfo=datetime.timezone.utc), 'commenter': 'lpranam', 'type': 'User'}, {'comment_id': 447117105, 'comment_body': 'missing end line', 'comment_created': datetime.datetime(2020, 6, 29, 16, 57, 12, tzinfo=datetime.timezone.utc), 'commenter': 'lpranam', 'type': 'User'}, {'comment_id': 447118049, 'comment_body': 'missing end line', 'comment_created': datetime.datetime(2020, 6, 29, 16, 58, 31, tzinfo=datetime.timezone.utc), 'commenter': 'lpranam', 'type': 'User'}, {'comment_id': 447118272, 'comment_body': 'missing end line', 'comment_created': datetime.datetime(2020, 6, 29, 16, 58, 53, tzinfo=datetime.timezone.utc), 'commenter': 'lpranam', 'type': 'User'}, {'comment_id': 447118428, 'comment_body': 'missing end line', 'comment_created': datetime.datetime(2020, 6, 29, 16, 59, 6, tzinfo=datetime.timezone.utc), 'commenter': 'lpranam', 'type': 'User'}, {'comment_id': 453189945, 'comment_body': 'though you have changed the entire file, but it still the same file you can not remove the copyright.', 'comment_created': datetime.datetime(2020, 7, 11, 12, 24, 26, tzinfo=datetime.timezone.utc), 'commenter': 'lpranam', 'type': 'User'}, {'comment_id': 453203793, 'comment_body': 'nitpicking: remove the additional space before `=`', 'comment_created': datetime.datetime(2020, 7, 11, 15, 8, 47, tzinfo=datetime.timezone.utc), 'commenter': 'lpranam', 'type': 'User'}, {'comment_id': 453209088, 'comment_body': 'The previous histogram.cpp got renamed to tutorial_histogram.cpp. I will add the copyright otherwise if needed.\r\n', 'comment_created': datetime.datetime(2020, 7, 11, 16, 6, 16, tzinfo=datetime.timezone.utc), 'commenter': 'codejaeger', 'type': 'User'}, {'comment_id': 453209602, 'comment_body': 'I think it got added when I used clang-format, maybe to keep the equal signs in line 473 and 474 at the same position. This has been done in many other places also I think.', 'comment_created': datetime.datetime(2020, 7, 11, 16, 12, 18, tzinfo=datetime.timezone.utc), 'commenter': 'codejaeger', 'type': 'User'}, {'comment_id': 460558206, 'comment_body': ""Yes, I think I was suggesting that renaming and to sum it up\r\n- `histogram.cpp` is @codejaeger 's new example\r\n- `tutorial_histogram.cpp` is the old one"", 'comment_created': datetime.datetime(2020, 7, 26, 18, 24, 45, tzinfo=datetime.timezone.utc), 'commenter': 'mloskot', 'type': 'User'}, {'comment_id': 562953256, 'comment_body': '@codejaeger Which clang-format configuration file did you use?', 'comment_created': datetime.datetime(2021, 1, 22, 22, 36, 55, tzinfo=datetime.timezone.utc), 'commenter': 'mloskot', 'type': 'User'}, {'comment_id': 563196909, 'comment_body': '@mloskot I believe I had used the one linked below:\r\n[https://github.com/boostorg/gil/blob/develop/example/clang-format/.clang-format](https://github.com/boostorg/gil/blob/develop/example/clang-format/.clang-format)', 'comment_created': datetime.datetime(2021, 1, 23, 20, 40, 24, tzinfo=datetime.timezone.utc), 'commenter': 'codejaeger', 'type': 'User'}]","[{'commit_sha': '6f9be17670bdbcdaaef24b6ac9d071b50816eb5c', 'committer_username': 'codejaeger', 'committer_name': 'Debabrata Mandal', 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 21, 13, 50, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1912366939be8c9fadb0295a062288d3e7d367dc', 'committer_username': 'codejaeger', 'committer_name': 'Debabrata Mandal', 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 21, 13, 50, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cb69be71fdc402d2a64d73cdbd50f1ca3b00e8a7', 'committer_username': 'codejaeger', 'committer_name': 'Debabrata Mandal', 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 21, 13, 50, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f043750487c8e41fe486799c4dec483a83ede70d', 'committer_username': 'codejaeger', 'committer_name': 'Debabrata Mandal', 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 21, 13, 50, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5f24786d384cc7817b68280f2e7b828567122766', 'committer_username': 'codejaeger', 'committer_name': 'Debabrata Mandal', 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 21, 13, 50, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'deb9f0f895f21f7f6e75da9f71f39d6361091808', 'committer_username': 'codejaeger', 'committer_name': 'Debabrata Mandal', 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 21, 13, 50, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9580792c09d68b4c12464186981a48320e028d1d', 'committer_username': 'codejaeger', 'committer_name': 'Debabrata Mandal', 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 21, 13, 50, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4606a17d99101afa00a559aee1f6951985a03869', 'committer_username': 'codejaeger', 'committer_name': 'Debabrata Mandal', 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 21, 13, 50, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0631223dc4dd236968606e747b5e75adf5395c51', 'committer_username': 'codejaeger', 'committer_name': 'Debabrata Mandal', 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 21, 13, 50, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '10c2faf3b03e3a6ea32f88113de79fdbfddfe83f', 'committer_username': 'codejaeger', 'committer_name': 'Debabrata Mandal', 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 21, 13, 50, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6160b67e1d966d01f964b2ddbf9a70e78a26fa0c', 'committer_username': 'codejaeger', 'committer_name': 'Debabrata Mandal', 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 21, 13, 50, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '795760fbeb2bfc279c3c5ce66061e8614da2b9e9', 'committer_username': 'codejaeger', 'committer_name': 'Debabrata Mandal', 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 21, 13, 50, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c332397ea2e37288d30666433f10bced658179f1', 'committer_username': 'codejaeger', 'committer_name': 'Debabrata Mandal', 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 21, 13, 50, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'de90ff6f49dfc4959a827c6644a2585431fe4a67', 'committer_username': 'codejaeger', 'committer_name': 'Debabrata Mandal', 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 21, 13, 50, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '771d3448b3f2936f08b2dee0f44eea5865e60ce2', 'committer_username': 'codejaeger', 'committer_name': 'Debabrata Mandal', 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 21, 13, 50, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '28bf4ecf0046698fc98a3cae376425455dbc2eb5', 'committer_username': 'codejaeger', 'committer_name': 'Debabrata Mandal', 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 21, 13, 50, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '043c3e1345b31f2444e34e0ed682079f7860751b', 'committer_username': 'codejaeger', 'committer_name': 'Debabrata Mandal', 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 21, 13, 50, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '06bccfe840207e417bbd920e13f908a9563a1f87', 'committer_username': 'codejaeger', 'committer_name': 'Debabrata Mandal', 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 21, 13, 50, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ace3e716214c7c7895ce4388667b30ad2f9d77d7', 'committer_username': 'codejaeger', 'committer_name': 'Debabrata Mandal', 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 21, 13, 50, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '90dd9e263d902b4bf62cf42a51b70aaf8f82b9ca', 'committer_username': 'codejaeger', 'committer_name': 'Debabrata Mandal', 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 21, 13, 50, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '42b76979d6d35b326f5ec2f6bd983ef698ae5440', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '3fa023fac1f62c77e756945414ae4781c7e12087', 'committer_username': 'codejaeger', 'committer_name': 'Debabrata Mandal', 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 21, 13, 50, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd24b725ab089083dde1882991d785c308dcb723a', 'committer_username': 'codejaeger', 'committer_name': 'Debabrata Mandal', 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 21, 13, 50, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '68d210986c315356f004e50948027eae78bc0a76', 'committer_username': 'codejaeger', 'committer_name': 'Debabrata Mandal', 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 21, 13, 50, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '678923202e65a7fc10669c4ad4fbb8f1320ba6ab', 'committer_username': 'codejaeger', 'committer_name': 'Debabrata Mandal', 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 21, 13, 50, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5f10c81f23c152bf22d8187e35bcce07a9bf8828', 'committer_username': 'codejaeger', 'committer_name': 'Debabrata Mandal', 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 21, 13, 50, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8c2280036364e264aa061cea75d58f757f165fe3', 'committer_username': 'codejaeger', 'committer_name': 'Debabrata Mandal', 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 21, 13, 50, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '897778db5869e253e7b6cea0d978dc9f9f4927a6', 'committer_username': 'codejaeger', 'committer_name': 'Debabrata Mandal', 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 21, 13, 50, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e9e8ce60549f3a475d5c418489b062ba7d3c5edc', 'committer_username': 'codejaeger', 'committer_name': 'Debabrata Mandal', 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 21, 13, 50, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '43562e19e5969ebf3d9d613fe993f13f710ecdcd', 'committer_username': 'codejaeger', 'committer_name': 'Debabrata Mandal', 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 21, 13, 50, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c8330a75b74730926981667283bef0ed6f8b5cf3', 'committer_username': 'codejaeger', 'committer_name': 'Debabrata Mandal', 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 21, 13, 50, 49, tzinfo=datetime.timezone.utc)}]",Debabrata Mandal,32168969,,User,,57,,53,9
425361555,Add histogram class and related functionality,"<!-- Pull Requests MUST come from topic branch based on develop, and NEVER on `master) --->

### Description

This contains the initial implementation of **histogram** functionality for STL containers for GIL images. Basic tests checking for correctness of histogram have been provided. Usage syntax and distinction between compatible and incompatible containers have been illustrated in a example file.

There was some dicussion regarding the name of the function (which now is **image_histogram**) in the mailing thread ([link](https://lists.boost.org/boost-gil/2020/05/0433.php)). I chose on 'image_histogram' since the name 'histogram' is used as the class name in Boost.Histogram and might cause problems in namespace mix-up. Another option could be **histogram_1d** since these functions are meant for that purpose.
<!-- What does this pull request do? -->

### Dependency

Optional - Docs for the this implementation are running in a parallel PR #503.

### References

[Discussions](https://lists.boost.org/boost-gil/2020/05/0410.php) on boost-gil mailing threads.

<!-- Any links related to this PR: issues, other PRs, mailing list threads, StackOverflow questions, etc. -->

### Tasklist

<!-- Add YOUR OWN TASK(s), especially if your PR is a work in progress -->

- [x] Add test case(s)
- [x] Provide documentation
- [x] Ensure all CI builds pass  - R.I.P. Travis CI
- [x] Review and approve
",True,499,https://api.github.com/repos/boostorg/gil/pulls/499,https://github.com/boostorg/gil/pull/499,closed,2244,34,26,31,14,44,2,0,"[{'name': 'cat/feature'}, {'name': 'google-summer-of-code'}]",2020-05-29 22:33:38+00:00,2021-01-23 23:02:51+00:00,20651353.0,"239 days, 0:29:13","[{'comment_id': 432919365, 'comment_body': ""This macro should be accroding to the file path in this case it should be `BOOST_GIL_HISTOGRAM_HPP`\r\n\r\nOn the other hand it makes me thing is this the right place for this directly in the main GIL folder! shouldn't it have some histogram directory or maybe in image_processing directory!?"", 'comment_created': datetime.datetime(2020, 5, 31, 7, 36, 33, tzinfo=datetime.timezone.utc), 'commenter': 'lpranam', 'type': 'User'}, {'comment_id': 432919764, 'comment_body': 'I think the right place for this section is in gil/concepts', 'comment_created': datetime.datetime(2020, 5, 31, 7, 42, 6, tzinfo=datetime.timezone.utc), 'commenter': 'lpranam', 'type': 'User'}, {'comment_id': 432920483, 'comment_body': 'use `histogram` instead of `hist`. variable names which are exposed to the user should be as clear as possible.', 'comment_created': datetime.datetime(2020, 5, 31, 7, 51, 58, tzinfo=datetime.timezone.utc), 'commenter': 'lpranam', 'type': 'User'}, {'comment_id': 432921713, 'comment_body': 'this is code repetition you should consider calling `image_histogram(SrcView const& srcview, Container &hist)`', 'comment_created': datetime.datetime(2020, 5, 31, 8, 9, 52, tzinfo=datetime.timezone.utc), 'commenter': 'lpranam', 'type': 'User'}, {'comment_id': 432923388, 'comment_body': ""instead shouldn't this create equal size bins and store the data according to the bins!?"", 'comment_created': datetime.datetime(2020, 5, 31, 8, 32, 7, tzinfo=datetime.timezone.utc), 'commenter': 'lpranam', 'type': 'User'}, {'comment_id': 432923997, 'comment_body': 'missing endline', 'comment_created': datetime.datetime(2020, 5, 31, 8, 40, 6, tzinfo=datetime.timezone.utc), 'commenter': 'lpranam', 'type': 'User'}, {'comment_id': 432924015, 'comment_body': 'missing endline', 'comment_created': datetime.datetime(2020, 5, 31, 8, 40, 12, tzinfo=datetime.timezone.utc), 'commenter': 'lpranam', 'type': 'User'}, {'comment_id': 432924033, 'comment_body': 'missing endline', 'comment_created': datetime.datetime(2020, 5, 31, 8, 40, 32, tzinfo=datetime.timezone.utc), 'commenter': 'lpranam', 'type': 'User'}, {'comment_id': 432924270, 'comment_body': ""I don't think this is a good idea! We also have pixel types like RGB64!"", 'comment_created': datetime.datetime(2020, 5, 31, 8, 43, 33, tzinfo=datetime.timezone.utc), 'commenter': 'lpranam', 'type': 'User'}, {'comment_id': 432929046, 'comment_body': ""Yes, the first is a typo. It was first in the extension directory I forgot to update it later. I was myself not sure of the correct directory for it. Lets wait for others' opinions."", 'comment_created': datetime.datetime(2020, 5, 31, 9, 46, 27, tzinfo=datetime.timezone.utc), 'commenter': 'codejaeger', 'type': 'User'}, {'comment_id': 432929162, 'comment_body': 'Should I add it to concepts/detail/type_traits.hpp?', 'comment_created': datetime.datetime(2020, 5, 31, 9, 47, 57, tzinfo=datetime.timezone.utc), 'commenter': 'codejaeger', 'type': 'User'}, {'comment_id': 432929196, 'comment_body': 'Will do.\r\n', 'comment_created': datetime.datetime(2020, 5, 31, 9, 48, 11, tzinfo=datetime.timezone.utc), 'commenter': 'codejaeger', 'type': 'User'}, {'comment_id': 432929327, 'comment_body': 'Maybe make a image_histogram_impl(SrcView const& srcview, Container &hist) without the constraints on the template type is what you meant?', 'comment_created': datetime.datetime(2020, 5, 31, 9, 50, 18, tzinfo=datetime.timezone.utc), 'commenter': 'codejaeger', 'type': 'User'}, {'comment_id': 432929474, 'comment_body': 'I was not sure how we could convey that piece of information to the end user i.e. specify what the bin size they should use when accessing the values.', 'comment_created': datetime.datetime(2020, 5, 31, 9, 52, 6, tzinfo=datetime.timezone.utc), 'commenter': 'codejaeger', 'type': 'User'}, {'comment_id': 432929780, 'comment_body': ""Could we put a check on the channel size for specific container types? It wouldn't be clean though."", 'comment_created': datetime.datetime(2020, 5, 31, 9, 55, 56, tzinfo=datetime.timezone.utc), 'commenter': 'codejaeger', 'type': 'User'}, {'comment_id': 435413594, 'comment_body': '@lpranam \r\n> I have some objections with the code format(template parameters)\r\n\r\nWhat are the objections exactly?\r\n\r\nGenerally, as it was agreed quite some time ago, we try to keep the lines up to [100 characters long](https://github.com/boostorg/gil/blob/develop/CONTRIBUTING.md#guidelines).\r\nSecond, parameters are often long (e.g. `mp11::mp_size<typename Layout::color_space_t>::value`) and it is often a good idea to keep names of template parameters self-descriptive, avoid cryptic abbreviation.\r\n\r\nSo, this for example would fit that limit:\r\n\r\n```cpp\r\ntemplate <typename T>\r\nstruct is_indexable<T, decltype((void) ++declval<T>()[0] , 0)> : std::true_type {} ;\r\n```\r\n\r\nbut this would not, hence each parameter goes into separate lines and `<` and `>` are formatted similarly to blocks delimited with `{` and `}` \r\n\r\n```cpp\r\ntemplate <typename ChannelValue, typename Layout>\r\nstruct pixel :\r\n    detail::homogeneous_color_base\r\n    <\r\n        ChannelValue,\r\n        Layout,\r\n        mp11::mp_size<typename Layout::color_space_t>::value\r\n    >\r\n{\r\n...\r\n};\r\n```\r\n\r\nThat makes the whole guideline very simple, without too many exceptions or sub-rules.\r\n\r\nThe only other, subjectively, readable formatting of highly templated source code that I know is one used by Boost.Spirit or other libraries by [Joel de Guzman](https://github.com/cycfi/), Michael Caisse et. al. ', 'comment_created': datetime.datetime(2020, 6, 4, 17, 5, 53, tzinfo=datetime.timezone.utc), 'commenter': 'mloskot', 'type': 'User'}, {'comment_id': 435414512, 'comment_body': 'Or have our own containers as @lpranam suggested in https://lists.boost.org/boost-gil/2020/06/0437.php', 'comment_created': datetime.datetime(2020, 6, 4, 17, 7, 32, tzinfo=datetime.timezone.utc), 'commenter': 'mloskot', 'type': 'User'}, {'comment_id': 443014478, 'comment_body': ""@lpranam If you don't have any proposal on better formatting fitting template parameters list in 100 characters long lines, then I'd suggest to mark this conversation as resolved.\r\n\r\nPersonally, I find reading this much more difficult:\r\n\r\n```cpp\r\nusing tp = boost::mp11::mp_list<typename std::is_convertible<\r\n                    boost::mp11::mp_at<bin_t, boost::mp11::mp_size_t<I>>,\r\n                    typename std::tuple_element<I, Tuple>::type>::type...>;\r\n```\r\nthan\r\n```cpp\r\nusing tp = boost::mp11::mp_list\r\n<\r\n    typename std::is_convertible\r\n    <\r\n        boost::mp11::mp_at<bin_t, boost::mp11::mp_size_t<I>>,\r\n        typename std::tuple_element<I, Tuple>::type\r\n    >::type...\r\n>;\r\n```"", 'comment_created': datetime.datetime(2020, 6, 19, 19, 40, 3, tzinfo=datetime.timezone.utc), 'commenter': 'mloskot', 'type': 'User'}, {'comment_id': 443015531, 'comment_body': 'Please, try to stick to these guidelines https://github.com/boostorg/gil/wiki/Include-Directives-Order', 'comment_created': datetime.datetime(2020, 6, 19, 19, 42, 55, tzinfo=datetime.timezone.utc), 'commenter': 'mloskot', 'type': 'User'}, {'comment_id': 443015661, 'comment_body': 'Again, `{` in new line please ', 'comment_created': datetime.datetime(2020, 6, 19, 19, 43, 14, tzinfo=datetime.timezone.utc), 'commenter': 'mloskot', 'type': 'User'}, {'comment_id': 443016344, 'comment_body': ""I suggest to mark such comments about improvements suggested or planned in future with `TODO`, i.e.\r\n```\r\n// TODO: With C++14 and using auto we don't need the decltype anymore\r\n```\r\nor, if it is about public interface, then the Doxygen way:\r\n```\r\n/// \\todo With C++14 and using auto we don't need the decltype anymore\r\n```"", 'comment_created': datetime.datetime(2020, 6, 19, 19, 45, 13, tzinfo=datetime.timezone.utc), 'commenter': 'mloskot', 'type': 'User'}, {'comment_id': 443016733, 'comment_body': 'I think `base_t` is better than `parent_t`. It is canonical that we derive from *base class*.', 'comment_created': datetime.datetime(2020, 6, 19, 19, 46, 14, tzinfo=datetime.timezone.utc), 'commenter': 'mloskot', 'type': 'User'}, {'comment_id': 443017143, 'comment_body': 'Again, `{` in new line.\r\n\r\nIf it is annoying to keep track of such details, then just use `clang-format` and your code will be consistent at least\r\nSee https://github.com/boostorg/gil/tree/develop/example/clang-format', 'comment_created': datetime.datetime(2020, 6, 19, 19, 47, 29, tzinfo=datetime.timezone.utc), 'commenter': 'mloskot', 'type': 'User'}, {'comment_id': 443017549, 'comment_body': ""Since you've been following the East Const convention, you may do here `size_t const` too.\r\n\r\nSecond, please always qualify `size_t` as `std::size_t`  (I assume we never do `using namespace std;`)"", 'comment_created': datetime.datetime(2020, 6, 19, 19, 48, 42, tzinfo=datetime.timezone.utc), 'commenter': 'mloskot', 'type': 'User'}, {'comment_id': 443020730, 'comment_body': 'I\'d suggest to rename `stl_histogram.hpp` to `std.hpp`, because, IMO:\r\n\r\n1. It is clearer name: a thing related to the `std::` stuff.\r\n\r\n2. Nowadays, 99.99% of us use the C++ Standard Library, not the [C++ Standard Template Library](https://en.wikipedia.org/wiki/Standard_Template_Library) that, *""that influenced many parts of the C++ Standard Library""*. C++ STD != C++ STL\r\n\r\n3. Boost convention, de-facto, is `std.hpp`\r\n\r\n    ```\r\n    $ find . -name std.hpp\r\n    ./assign/include/boost/assign/std.hpp\r\n    ./hana/include/boost/hana/ext/std.hpp\r\n    ./proto/include/boost/proto/functional/std.hpp\r\n    ```', 'comment_created': datetime.datetime(2020, 6, 19, 19, 58, 20, tzinfo=datetime.timezone.utc), 'commenter': 'mloskot', 'type': 'User'}, {'comment_id': 443371571, 'comment_body': '@mloskot should the **container_hash/extensions.hpp** be shifted? It is actually quite confusing because boost::hash_value is actually found in another place at boost/functional/hash.hpp. I will look into this and report back.', 'comment_created': datetime.datetime(2020, 6, 22, 7, 41, 33, tzinfo=datetime.timezone.utc), 'commenter': 'codejaeger', 'type': 'User'}, {'comment_id': 443401352, 'comment_body': '@mloskot Is it necessary to break \r\n\r\n`histogram<boost::mp11::mp_at<bin_t, boost::mp11::mp_size_t<Dimensions>>...> sub_histogram() {}`\r\n\r\ninto \r\n\r\n```\r\n    histogram\r\n    <   \r\n        boost::mp11::mp_at\r\n        <\r\n            bin_t,\r\n            boost::mp11::mp_size_t<Dimensions>\r\n        >...\r\n    > sub_histogram() \r\n    {}\r\n```\r\n\r\nThe former fits within 100 characters.', 'comment_created': datetime.datetime(2020, 6, 22, 8, 36, 43, tzinfo=datetime.timezone.utc), 'commenter': 'codejaeger', 'type': 'User'}, {'comment_id': 443489249, 'comment_body': '@codejaeger No, if it fits in line long for 100 characters, then no need for breaking it.\r\nIn my earlier comments I just used the snippet based on your code as an example.', 'comment_created': datetime.datetime(2020, 6, 22, 11, 20, 38, tzinfo=datetime.timezone.utc), 'commenter': 'mloskot', 'type': 'User'}, {'comment_id': 443491987, 'comment_body': '@codejaeger I meant something like this, which is groups, then folder-based and alphabetical order within groups:\r\n\r\n```\r\n#include <boost/gil/metafunctions.hpp>\r\n#include <boost/gil/pixel.hpp>\r\n#include <boost/gil/concepts/concept_check.hpp>\r\n\r\n#include <boost/mp11.hpp>\r\n#include <boost/container_hash/extensions.hpp>\r\n\r\n#include <type_traits>\r\n#include <unordered_map>\r\n```', 'comment_created': datetime.datetime(2020, 6, 22, 11, 26, 37, tzinfo=datetime.timezone.utc), 'commenter': 'mloskot', 'type': 'User'}, {'comment_id': 447110154, 'comment_body': 'could use `interleaved_view` maybe?', 'comment_created': datetime.datetime(2020, 6, 29, 16, 45, 48, tzinfo=datetime.timezone.utc), 'commenter': 'lpranam', 'type': 'User'}, {'comment_id': 447110367, 'comment_body': 'could use `interleaved_view` maybe?', 'comment_created': datetime.datetime(2020, 6, 29, 16, 46, 10, tzinfo=datetime.timezone.utc), 'commenter': 'lpranam', 'type': 'User'}, {'comment_id': 447110703, 'comment_body': 'missing end line', 'comment_created': datetime.datetime(2020, 6, 29, 16, 46, 44, tzinfo=datetime.timezone.utc), 'commenter': 'lpranam', 'type': 'User'}, {'comment_id': 447110929, 'comment_body': 'missing end line', 'comment_created': datetime.datetime(2020, 6, 29, 16, 47, 8, tzinfo=datetime.timezone.utc), 'commenter': 'lpranam', 'type': 'User'}, {'comment_id': 447117105, 'comment_body': 'missing end line', 'comment_created': datetime.datetime(2020, 6, 29, 16, 57, 12, tzinfo=datetime.timezone.utc), 'commenter': 'lpranam', 'type': 'User'}, {'comment_id': 447118049, 'comment_body': 'missing end line', 'comment_created': datetime.datetime(2020, 6, 29, 16, 58, 31, tzinfo=datetime.timezone.utc), 'commenter': 'lpranam', 'type': 'User'}, {'comment_id': 447118272, 'comment_body': 'missing end line', 'comment_created': datetime.datetime(2020, 6, 29, 16, 58, 53, tzinfo=datetime.timezone.utc), 'commenter': 'lpranam', 'type': 'User'}, {'comment_id': 447118428, 'comment_body': 'missing end line', 'comment_created': datetime.datetime(2020, 6, 29, 16, 59, 6, tzinfo=datetime.timezone.utc), 'commenter': 'lpranam', 'type': 'User'}, {'comment_id': 453189945, 'comment_body': 'though you have changed the entire file, but it still the same file you can not remove the copyright.', 'comment_created': datetime.datetime(2020, 7, 11, 12, 24, 26, tzinfo=datetime.timezone.utc), 'commenter': 'lpranam', 'type': 'User'}, {'comment_id': 453203793, 'comment_body': 'nitpicking: remove the additional space before `=`', 'comment_created': datetime.datetime(2020, 7, 11, 15, 8, 47, tzinfo=datetime.timezone.utc), 'commenter': 'lpranam', 'type': 'User'}, {'comment_id': 453209088, 'comment_body': 'The previous histogram.cpp got renamed to tutorial_histogram.cpp. I will add the copyright otherwise if needed.\r\n', 'comment_created': datetime.datetime(2020, 7, 11, 16, 6, 16, tzinfo=datetime.timezone.utc), 'commenter': 'codejaeger', 'type': 'User'}, {'comment_id': 453209602, 'comment_body': 'I think it got added when I used clang-format, maybe to keep the equal signs in line 473 and 474 at the same position. This has been done in many other places also I think.', 'comment_created': datetime.datetime(2020, 7, 11, 16, 12, 18, tzinfo=datetime.timezone.utc), 'commenter': 'codejaeger', 'type': 'User'}, {'comment_id': 460558206, 'comment_body': ""Yes, I think I was suggesting that renaming and to sum it up\r\n- `histogram.cpp` is @codejaeger 's new example\r\n- `tutorial_histogram.cpp` is the old one"", 'comment_created': datetime.datetime(2020, 7, 26, 18, 24, 45, tzinfo=datetime.timezone.utc), 'commenter': 'mloskot', 'type': 'User'}, {'comment_id': 562953256, 'comment_body': '@codejaeger Which clang-format configuration file did you use?', 'comment_created': datetime.datetime(2021, 1, 22, 22, 36, 55, tzinfo=datetime.timezone.utc), 'commenter': 'mloskot', 'type': 'User'}, {'comment_id': 563196909, 'comment_body': '@mloskot I believe I had used the one linked below:\r\n[https://github.com/boostorg/gil/blob/develop/example/clang-format/.clang-format](https://github.com/boostorg/gil/blob/develop/example/clang-format/.clang-format)', 'comment_created': datetime.datetime(2021, 1, 23, 20, 40, 24, tzinfo=datetime.timezone.utc), 'commenter': 'codejaeger', 'type': 'User'}]","[{'commit_sha': '6f9be17670bdbcdaaef24b6ac9d071b50816eb5c', 'committer_username': 'codejaeger', 'committer_name': 'Debabrata Mandal', 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 21, 13, 50, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1912366939be8c9fadb0295a062288d3e7d367dc', 'committer_username': 'codejaeger', 'committer_name': 'Debabrata Mandal', 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 21, 13, 50, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cb69be71fdc402d2a64d73cdbd50f1ca3b00e8a7', 'committer_username': 'codejaeger', 'committer_name': 'Debabrata Mandal', 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 21, 13, 50, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f043750487c8e41fe486799c4dec483a83ede70d', 'committer_username': 'codejaeger', 'committer_name': 'Debabrata Mandal', 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 21, 13, 50, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5f24786d384cc7817b68280f2e7b828567122766', 'committer_username': 'codejaeger', 'committer_name': 'Debabrata Mandal', 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 21, 13, 50, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'deb9f0f895f21f7f6e75da9f71f39d6361091808', 'committer_username': 'codejaeger', 'committer_name': 'Debabrata Mandal', 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 21, 13, 50, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9580792c09d68b4c12464186981a48320e028d1d', 'committer_username': 'codejaeger', 'committer_name': 'Debabrata Mandal', 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 21, 13, 50, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4606a17d99101afa00a559aee1f6951985a03869', 'committer_username': 'codejaeger', 'committer_name': 'Debabrata Mandal', 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 21, 13, 50, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0631223dc4dd236968606e747b5e75adf5395c51', 'committer_username': 'codejaeger', 'committer_name': 'Debabrata Mandal', 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 21, 13, 50, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '10c2faf3b03e3a6ea32f88113de79fdbfddfe83f', 'committer_username': 'codejaeger', 'committer_name': 'Debabrata Mandal', 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 21, 13, 50, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6160b67e1d966d01f964b2ddbf9a70e78a26fa0c', 'committer_username': 'codejaeger', 'committer_name': 'Debabrata Mandal', 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 21, 13, 50, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '795760fbeb2bfc279c3c5ce66061e8614da2b9e9', 'committer_username': 'codejaeger', 'committer_name': 'Debabrata Mandal', 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 21, 13, 50, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c332397ea2e37288d30666433f10bced658179f1', 'committer_username': 'codejaeger', 'committer_name': 'Debabrata Mandal', 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 21, 13, 50, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'de90ff6f49dfc4959a827c6644a2585431fe4a67', 'committer_username': 'codejaeger', 'committer_name': 'Debabrata Mandal', 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 21, 13, 50, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '771d3448b3f2936f08b2dee0f44eea5865e60ce2', 'committer_username': 'codejaeger', 'committer_name': 'Debabrata Mandal', 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 21, 13, 50, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '28bf4ecf0046698fc98a3cae376425455dbc2eb5', 'committer_username': 'codejaeger', 'committer_name': 'Debabrata Mandal', 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 21, 13, 50, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '043c3e1345b31f2444e34e0ed682079f7860751b', 'committer_username': 'codejaeger', 'committer_name': 'Debabrata Mandal', 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 21, 13, 50, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '06bccfe840207e417bbd920e13f908a9563a1f87', 'committer_username': 'codejaeger', 'committer_name': 'Debabrata Mandal', 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 21, 13, 50, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ace3e716214c7c7895ce4388667b30ad2f9d77d7', 'committer_username': 'codejaeger', 'committer_name': 'Debabrata Mandal', 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 21, 13, 50, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '90dd9e263d902b4bf62cf42a51b70aaf8f82b9ca', 'committer_username': 'codejaeger', 'committer_name': 'Debabrata Mandal', 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 21, 13, 50, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '42b76979d6d35b326f5ec2f6bd983ef698ae5440', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '3fa023fac1f62c77e756945414ae4781c7e12087', 'committer_username': 'codejaeger', 'committer_name': 'Debabrata Mandal', 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 21, 13, 50, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd24b725ab089083dde1882991d785c308dcb723a', 'committer_username': 'codejaeger', 'committer_name': 'Debabrata Mandal', 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 21, 13, 50, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '68d210986c315356f004e50948027eae78bc0a76', 'committer_username': 'codejaeger', 'committer_name': 'Debabrata Mandal', 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 21, 13, 50, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '678923202e65a7fc10669c4ad4fbb8f1320ba6ab', 'committer_username': 'codejaeger', 'committer_name': 'Debabrata Mandal', 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 21, 13, 50, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5f10c81f23c152bf22d8187e35bcce07a9bf8828', 'committer_username': 'codejaeger', 'committer_name': 'Debabrata Mandal', 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 21, 13, 50, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8c2280036364e264aa061cea75d58f757f165fe3', 'committer_username': 'codejaeger', 'committer_name': 'Debabrata Mandal', 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 21, 13, 50, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '897778db5869e253e7b6cea0d978dc9f9f4927a6', 'committer_username': 'codejaeger', 'committer_name': 'Debabrata Mandal', 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 21, 13, 50, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e9e8ce60549f3a475d5c418489b062ba7d3c5edc', 'committer_username': 'codejaeger', 'committer_name': 'Debabrata Mandal', 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 21, 13, 50, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '43562e19e5969ebf3d9d613fe993f13f710ecdcd', 'committer_username': 'codejaeger', 'committer_name': 'Debabrata Mandal', 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 21, 13, 50, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c8330a75b74730926981667283bef0ed6f8b5cf3', 'committer_username': 'codejaeger', 'committer_name': 'Debabrata Mandal', 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 21, 13, 50, 49, tzinfo=datetime.timezone.utc)}]",Debabrata Mandal,32168969,,User,,57,,53,9
425361555,Add histogram class and related functionality,"<!-- Pull Requests MUST come from topic branch based on develop, and NEVER on `master) --->

### Description

This contains the initial implementation of **histogram** functionality for STL containers for GIL images. Basic tests checking for correctness of histogram have been provided. Usage syntax and distinction between compatible and incompatible containers have been illustrated in a example file.

There was some dicussion regarding the name of the function (which now is **image_histogram**) in the mailing thread ([link](https://lists.boost.org/boost-gil/2020/05/0433.php)). I chose on 'image_histogram' since the name 'histogram' is used as the class name in Boost.Histogram and might cause problems in namespace mix-up. Another option could be **histogram_1d** since these functions are meant for that purpose.
<!-- What does this pull request do? -->

### Dependency

Optional - Docs for the this implementation are running in a parallel PR #503.

### References

[Discussions](https://lists.boost.org/boost-gil/2020/05/0410.php) on boost-gil mailing threads.

<!-- Any links related to this PR: issues, other PRs, mailing list threads, StackOverflow questions, etc. -->

### Tasklist

<!-- Add YOUR OWN TASK(s), especially if your PR is a work in progress -->

- [x] Add test case(s)
- [x] Provide documentation
- [x] Ensure all CI builds pass  - R.I.P. Travis CI
- [x] Review and approve
",True,499,https://api.github.com/repos/boostorg/gil/pulls/499,https://github.com/boostorg/gil/pull/499,closed,2244,34,26,31,14,44,2,0,"[{'name': 'cat/feature'}, {'name': 'google-summer-of-code'}]",2020-05-29 22:33:38+00:00,2021-01-23 23:02:51+00:00,20651353.0,"239 days, 0:29:13","[{'comment_id': 432919365, 'comment_body': ""This macro should be accroding to the file path in this case it should be `BOOST_GIL_HISTOGRAM_HPP`\r\n\r\nOn the other hand it makes me thing is this the right place for this directly in the main GIL folder! shouldn't it have some histogram directory or maybe in image_processing directory!?"", 'comment_created': datetime.datetime(2020, 5, 31, 7, 36, 33, tzinfo=datetime.timezone.utc), 'commenter': 'lpranam', 'type': 'User'}, {'comment_id': 432919764, 'comment_body': 'I think the right place for this section is in gil/concepts', 'comment_created': datetime.datetime(2020, 5, 31, 7, 42, 6, tzinfo=datetime.timezone.utc), 'commenter': 'lpranam', 'type': 'User'}, {'comment_id': 432920483, 'comment_body': 'use `histogram` instead of `hist`. variable names which are exposed to the user should be as clear as possible.', 'comment_created': datetime.datetime(2020, 5, 31, 7, 51, 58, tzinfo=datetime.timezone.utc), 'commenter': 'lpranam', 'type': 'User'}, {'comment_id': 432921713, 'comment_body': 'this is code repetition you should consider calling `image_histogram(SrcView const& srcview, Container &hist)`', 'comment_created': datetime.datetime(2020, 5, 31, 8, 9, 52, tzinfo=datetime.timezone.utc), 'commenter': 'lpranam', 'type': 'User'}, {'comment_id': 432923388, 'comment_body': ""instead shouldn't this create equal size bins and store the data according to the bins!?"", 'comment_created': datetime.datetime(2020, 5, 31, 8, 32, 7, tzinfo=datetime.timezone.utc), 'commenter': 'lpranam', 'type': 'User'}, {'comment_id': 432923997, 'comment_body': 'missing endline', 'comment_created': datetime.datetime(2020, 5, 31, 8, 40, 6, tzinfo=datetime.timezone.utc), 'commenter': 'lpranam', 'type': 'User'}, {'comment_id': 432924015, 'comment_body': 'missing endline', 'comment_created': datetime.datetime(2020, 5, 31, 8, 40, 12, tzinfo=datetime.timezone.utc), 'commenter': 'lpranam', 'type': 'User'}, {'comment_id': 432924033, 'comment_body': 'missing endline', 'comment_created': datetime.datetime(2020, 5, 31, 8, 40, 32, tzinfo=datetime.timezone.utc), 'commenter': 'lpranam', 'type': 'User'}, {'comment_id': 432924270, 'comment_body': ""I don't think this is a good idea! We also have pixel types like RGB64!"", 'comment_created': datetime.datetime(2020, 5, 31, 8, 43, 33, tzinfo=datetime.timezone.utc), 'commenter': 'lpranam', 'type': 'User'}, {'comment_id': 432929046, 'comment_body': ""Yes, the first is a typo. It was first in the extension directory I forgot to update it later. I was myself not sure of the correct directory for it. Lets wait for others' opinions."", 'comment_created': datetime.datetime(2020, 5, 31, 9, 46, 27, tzinfo=datetime.timezone.utc), 'commenter': 'codejaeger', 'type': 'User'}, {'comment_id': 432929162, 'comment_body': 'Should I add it to concepts/detail/type_traits.hpp?', 'comment_created': datetime.datetime(2020, 5, 31, 9, 47, 57, tzinfo=datetime.timezone.utc), 'commenter': 'codejaeger', 'type': 'User'}, {'comment_id': 432929196, 'comment_body': 'Will do.\r\n', 'comment_created': datetime.datetime(2020, 5, 31, 9, 48, 11, tzinfo=datetime.timezone.utc), 'commenter': 'codejaeger', 'type': 'User'}, {'comment_id': 432929327, 'comment_body': 'Maybe make a image_histogram_impl(SrcView const& srcview, Container &hist) without the constraints on the template type is what you meant?', 'comment_created': datetime.datetime(2020, 5, 31, 9, 50, 18, tzinfo=datetime.timezone.utc), 'commenter': 'codejaeger', 'type': 'User'}, {'comment_id': 432929474, 'comment_body': 'I was not sure how we could convey that piece of information to the end user i.e. specify what the bin size they should use when accessing the values.', 'comment_created': datetime.datetime(2020, 5, 31, 9, 52, 6, tzinfo=datetime.timezone.utc), 'commenter': 'codejaeger', 'type': 'User'}, {'comment_id': 432929780, 'comment_body': ""Could we put a check on the channel size for specific container types? It wouldn't be clean though."", 'comment_created': datetime.datetime(2020, 5, 31, 9, 55, 56, tzinfo=datetime.timezone.utc), 'commenter': 'codejaeger', 'type': 'User'}, {'comment_id': 435413594, 'comment_body': '@lpranam \r\n> I have some objections with the code format(template parameters)\r\n\r\nWhat are the objections exactly?\r\n\r\nGenerally, as it was agreed quite some time ago, we try to keep the lines up to [100 characters long](https://github.com/boostorg/gil/blob/develop/CONTRIBUTING.md#guidelines).\r\nSecond, parameters are often long (e.g. `mp11::mp_size<typename Layout::color_space_t>::value`) and it is often a good idea to keep names of template parameters self-descriptive, avoid cryptic abbreviation.\r\n\r\nSo, this for example would fit that limit:\r\n\r\n```cpp\r\ntemplate <typename T>\r\nstruct is_indexable<T, decltype((void) ++declval<T>()[0] , 0)> : std::true_type {} ;\r\n```\r\n\r\nbut this would not, hence each parameter goes into separate lines and `<` and `>` are formatted similarly to blocks delimited with `{` and `}` \r\n\r\n```cpp\r\ntemplate <typename ChannelValue, typename Layout>\r\nstruct pixel :\r\n    detail::homogeneous_color_base\r\n    <\r\n        ChannelValue,\r\n        Layout,\r\n        mp11::mp_size<typename Layout::color_space_t>::value\r\n    >\r\n{\r\n...\r\n};\r\n```\r\n\r\nThat makes the whole guideline very simple, without too many exceptions or sub-rules.\r\n\r\nThe only other, subjectively, readable formatting of highly templated source code that I know is one used by Boost.Spirit or other libraries by [Joel de Guzman](https://github.com/cycfi/), Michael Caisse et. al. ', 'comment_created': datetime.datetime(2020, 6, 4, 17, 5, 53, tzinfo=datetime.timezone.utc), 'commenter': 'mloskot', 'type': 'User'}, {'comment_id': 435414512, 'comment_body': 'Or have our own containers as @lpranam suggested in https://lists.boost.org/boost-gil/2020/06/0437.php', 'comment_created': datetime.datetime(2020, 6, 4, 17, 7, 32, tzinfo=datetime.timezone.utc), 'commenter': 'mloskot', 'type': 'User'}, {'comment_id': 443014478, 'comment_body': ""@lpranam If you don't have any proposal on better formatting fitting template parameters list in 100 characters long lines, then I'd suggest to mark this conversation as resolved.\r\n\r\nPersonally, I find reading this much more difficult:\r\n\r\n```cpp\r\nusing tp = boost::mp11::mp_list<typename std::is_convertible<\r\n                    boost::mp11::mp_at<bin_t, boost::mp11::mp_size_t<I>>,\r\n                    typename std::tuple_element<I, Tuple>::type>::type...>;\r\n```\r\nthan\r\n```cpp\r\nusing tp = boost::mp11::mp_list\r\n<\r\n    typename std::is_convertible\r\n    <\r\n        boost::mp11::mp_at<bin_t, boost::mp11::mp_size_t<I>>,\r\n        typename std::tuple_element<I, Tuple>::type\r\n    >::type...\r\n>;\r\n```"", 'comment_created': datetime.datetime(2020, 6, 19, 19, 40, 3, tzinfo=datetime.timezone.utc), 'commenter': 'mloskot', 'type': 'User'}, {'comment_id': 443015531, 'comment_body': 'Please, try to stick to these guidelines https://github.com/boostorg/gil/wiki/Include-Directives-Order', 'comment_created': datetime.datetime(2020, 6, 19, 19, 42, 55, tzinfo=datetime.timezone.utc), 'commenter': 'mloskot', 'type': 'User'}, {'comment_id': 443015661, 'comment_body': 'Again, `{` in new line please ', 'comment_created': datetime.datetime(2020, 6, 19, 19, 43, 14, tzinfo=datetime.timezone.utc), 'commenter': 'mloskot', 'type': 'User'}, {'comment_id': 443016344, 'comment_body': ""I suggest to mark such comments about improvements suggested or planned in future with `TODO`, i.e.\r\n```\r\n// TODO: With C++14 and using auto we don't need the decltype anymore\r\n```\r\nor, if it is about public interface, then the Doxygen way:\r\n```\r\n/// \\todo With C++14 and using auto we don't need the decltype anymore\r\n```"", 'comment_created': datetime.datetime(2020, 6, 19, 19, 45, 13, tzinfo=datetime.timezone.utc), 'commenter': 'mloskot', 'type': 'User'}, {'comment_id': 443016733, 'comment_body': 'I think `base_t` is better than `parent_t`. It is canonical that we derive from *base class*.', 'comment_created': datetime.datetime(2020, 6, 19, 19, 46, 14, tzinfo=datetime.timezone.utc), 'commenter': 'mloskot', 'type': 'User'}, {'comment_id': 443017143, 'comment_body': 'Again, `{` in new line.\r\n\r\nIf it is annoying to keep track of such details, then just use `clang-format` and your code will be consistent at least\r\nSee https://github.com/boostorg/gil/tree/develop/example/clang-format', 'comment_created': datetime.datetime(2020, 6, 19, 19, 47, 29, tzinfo=datetime.timezone.utc), 'commenter': 'mloskot', 'type': 'User'}, {'comment_id': 443017549, 'comment_body': ""Since you've been following the East Const convention, you may do here `size_t const` too.\r\n\r\nSecond, please always qualify `size_t` as `std::size_t`  (I assume we never do `using namespace std;`)"", 'comment_created': datetime.datetime(2020, 6, 19, 19, 48, 42, tzinfo=datetime.timezone.utc), 'commenter': 'mloskot', 'type': 'User'}, {'comment_id': 443020730, 'comment_body': 'I\'d suggest to rename `stl_histogram.hpp` to `std.hpp`, because, IMO:\r\n\r\n1. It is clearer name: a thing related to the `std::` stuff.\r\n\r\n2. Nowadays, 99.99% of us use the C++ Standard Library, not the [C++ Standard Template Library](https://en.wikipedia.org/wiki/Standard_Template_Library) that, *""that influenced many parts of the C++ Standard Library""*. C++ STD != C++ STL\r\n\r\n3. Boost convention, de-facto, is `std.hpp`\r\n\r\n    ```\r\n    $ find . -name std.hpp\r\n    ./assign/include/boost/assign/std.hpp\r\n    ./hana/include/boost/hana/ext/std.hpp\r\n    ./proto/include/boost/proto/functional/std.hpp\r\n    ```', 'comment_created': datetime.datetime(2020, 6, 19, 19, 58, 20, tzinfo=datetime.timezone.utc), 'commenter': 'mloskot', 'type': 'User'}, {'comment_id': 443371571, 'comment_body': '@mloskot should the **container_hash/extensions.hpp** be shifted? It is actually quite confusing because boost::hash_value is actually found in another place at boost/functional/hash.hpp. I will look into this and report back.', 'comment_created': datetime.datetime(2020, 6, 22, 7, 41, 33, tzinfo=datetime.timezone.utc), 'commenter': 'codejaeger', 'type': 'User'}, {'comment_id': 443401352, 'comment_body': '@mloskot Is it necessary to break \r\n\r\n`histogram<boost::mp11::mp_at<bin_t, boost::mp11::mp_size_t<Dimensions>>...> sub_histogram() {}`\r\n\r\ninto \r\n\r\n```\r\n    histogram\r\n    <   \r\n        boost::mp11::mp_at\r\n        <\r\n            bin_t,\r\n            boost::mp11::mp_size_t<Dimensions>\r\n        >...\r\n    > sub_histogram() \r\n    {}\r\n```\r\n\r\nThe former fits within 100 characters.', 'comment_created': datetime.datetime(2020, 6, 22, 8, 36, 43, tzinfo=datetime.timezone.utc), 'commenter': 'codejaeger', 'type': 'User'}, {'comment_id': 443489249, 'comment_body': '@codejaeger No, if it fits in line long for 100 characters, then no need for breaking it.\r\nIn my earlier comments I just used the snippet based on your code as an example.', 'comment_created': datetime.datetime(2020, 6, 22, 11, 20, 38, tzinfo=datetime.timezone.utc), 'commenter': 'mloskot', 'type': 'User'}, {'comment_id': 443491987, 'comment_body': '@codejaeger I meant something like this, which is groups, then folder-based and alphabetical order within groups:\r\n\r\n```\r\n#include <boost/gil/metafunctions.hpp>\r\n#include <boost/gil/pixel.hpp>\r\n#include <boost/gil/concepts/concept_check.hpp>\r\n\r\n#include <boost/mp11.hpp>\r\n#include <boost/container_hash/extensions.hpp>\r\n\r\n#include <type_traits>\r\n#include <unordered_map>\r\n```', 'comment_created': datetime.datetime(2020, 6, 22, 11, 26, 37, tzinfo=datetime.timezone.utc), 'commenter': 'mloskot', 'type': 'User'}, {'comment_id': 447110154, 'comment_body': 'could use `interleaved_view` maybe?', 'comment_created': datetime.datetime(2020, 6, 29, 16, 45, 48, tzinfo=datetime.timezone.utc), 'commenter': 'lpranam', 'type': 'User'}, {'comment_id': 447110367, 'comment_body': 'could use `interleaved_view` maybe?', 'comment_created': datetime.datetime(2020, 6, 29, 16, 46, 10, tzinfo=datetime.timezone.utc), 'commenter': 'lpranam', 'type': 'User'}, {'comment_id': 447110703, 'comment_body': 'missing end line', 'comment_created': datetime.datetime(2020, 6, 29, 16, 46, 44, tzinfo=datetime.timezone.utc), 'commenter': 'lpranam', 'type': 'User'}, {'comment_id': 447110929, 'comment_body': 'missing end line', 'comment_created': datetime.datetime(2020, 6, 29, 16, 47, 8, tzinfo=datetime.timezone.utc), 'commenter': 'lpranam', 'type': 'User'}, {'comment_id': 447117105, 'comment_body': 'missing end line', 'comment_created': datetime.datetime(2020, 6, 29, 16, 57, 12, tzinfo=datetime.timezone.utc), 'commenter': 'lpranam', 'type': 'User'}, {'comment_id': 447118049, 'comment_body': 'missing end line', 'comment_created': datetime.datetime(2020, 6, 29, 16, 58, 31, tzinfo=datetime.timezone.utc), 'commenter': 'lpranam', 'type': 'User'}, {'comment_id': 447118272, 'comment_body': 'missing end line', 'comment_created': datetime.datetime(2020, 6, 29, 16, 58, 53, tzinfo=datetime.timezone.utc), 'commenter': 'lpranam', 'type': 'User'}, {'comment_id': 447118428, 'comment_body': 'missing end line', 'comment_created': datetime.datetime(2020, 6, 29, 16, 59, 6, tzinfo=datetime.timezone.utc), 'commenter': 'lpranam', 'type': 'User'}, {'comment_id': 453189945, 'comment_body': 'though you have changed the entire file, but it still the same file you can not remove the copyright.', 'comment_created': datetime.datetime(2020, 7, 11, 12, 24, 26, tzinfo=datetime.timezone.utc), 'commenter': 'lpranam', 'type': 'User'}, {'comment_id': 453203793, 'comment_body': 'nitpicking: remove the additional space before `=`', 'comment_created': datetime.datetime(2020, 7, 11, 15, 8, 47, tzinfo=datetime.timezone.utc), 'commenter': 'lpranam', 'type': 'User'}, {'comment_id': 453209088, 'comment_body': 'The previous histogram.cpp got renamed to tutorial_histogram.cpp. I will add the copyright otherwise if needed.\r\n', 'comment_created': datetime.datetime(2020, 7, 11, 16, 6, 16, tzinfo=datetime.timezone.utc), 'commenter': 'codejaeger', 'type': 'User'}, {'comment_id': 453209602, 'comment_body': 'I think it got added when I used clang-format, maybe to keep the equal signs in line 473 and 474 at the same position. This has been done in many other places also I think.', 'comment_created': datetime.datetime(2020, 7, 11, 16, 12, 18, tzinfo=datetime.timezone.utc), 'commenter': 'codejaeger', 'type': 'User'}, {'comment_id': 460558206, 'comment_body': ""Yes, I think I was suggesting that renaming and to sum it up\r\n- `histogram.cpp` is @codejaeger 's new example\r\n- `tutorial_histogram.cpp` is the old one"", 'comment_created': datetime.datetime(2020, 7, 26, 18, 24, 45, tzinfo=datetime.timezone.utc), 'commenter': 'mloskot', 'type': 'User'}, {'comment_id': 562953256, 'comment_body': '@codejaeger Which clang-format configuration file did you use?', 'comment_created': datetime.datetime(2021, 1, 22, 22, 36, 55, tzinfo=datetime.timezone.utc), 'commenter': 'mloskot', 'type': 'User'}, {'comment_id': 563196909, 'comment_body': '@mloskot I believe I had used the one linked below:\r\n[https://github.com/boostorg/gil/blob/develop/example/clang-format/.clang-format](https://github.com/boostorg/gil/blob/develop/example/clang-format/.clang-format)', 'comment_created': datetime.datetime(2021, 1, 23, 20, 40, 24, tzinfo=datetime.timezone.utc), 'commenter': 'codejaeger', 'type': 'User'}]","[{'commit_sha': '6f9be17670bdbcdaaef24b6ac9d071b50816eb5c', 'committer_username': 'codejaeger', 'committer_name': 'Debabrata Mandal', 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 21, 13, 50, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1912366939be8c9fadb0295a062288d3e7d367dc', 'committer_username': 'codejaeger', 'committer_name': 'Debabrata Mandal', 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 21, 13, 50, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cb69be71fdc402d2a64d73cdbd50f1ca3b00e8a7', 'committer_username': 'codejaeger', 'committer_name': 'Debabrata Mandal', 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 21, 13, 50, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f043750487c8e41fe486799c4dec483a83ede70d', 'committer_username': 'codejaeger', 'committer_name': 'Debabrata Mandal', 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 21, 13, 50, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5f24786d384cc7817b68280f2e7b828567122766', 'committer_username': 'codejaeger', 'committer_name': 'Debabrata Mandal', 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 21, 13, 50, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'deb9f0f895f21f7f6e75da9f71f39d6361091808', 'committer_username': 'codejaeger', 'committer_name': 'Debabrata Mandal', 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 21, 13, 50, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9580792c09d68b4c12464186981a48320e028d1d', 'committer_username': 'codejaeger', 'committer_name': 'Debabrata Mandal', 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 21, 13, 50, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4606a17d99101afa00a559aee1f6951985a03869', 'committer_username': 'codejaeger', 'committer_name': 'Debabrata Mandal', 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 21, 13, 50, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0631223dc4dd236968606e747b5e75adf5395c51', 'committer_username': 'codejaeger', 'committer_name': 'Debabrata Mandal', 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 21, 13, 50, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '10c2faf3b03e3a6ea32f88113de79fdbfddfe83f', 'committer_username': 'codejaeger', 'committer_name': 'Debabrata Mandal', 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 21, 13, 50, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6160b67e1d966d01f964b2ddbf9a70e78a26fa0c', 'committer_username': 'codejaeger', 'committer_name': 'Debabrata Mandal', 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 21, 13, 50, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '795760fbeb2bfc279c3c5ce66061e8614da2b9e9', 'committer_username': 'codejaeger', 'committer_name': 'Debabrata Mandal', 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 21, 13, 50, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c332397ea2e37288d30666433f10bced658179f1', 'committer_username': 'codejaeger', 'committer_name': 'Debabrata Mandal', 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 21, 13, 50, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'de90ff6f49dfc4959a827c6644a2585431fe4a67', 'committer_username': 'codejaeger', 'committer_name': 'Debabrata Mandal', 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 21, 13, 50, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '771d3448b3f2936f08b2dee0f44eea5865e60ce2', 'committer_username': 'codejaeger', 'committer_name': 'Debabrata Mandal', 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 21, 13, 50, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '28bf4ecf0046698fc98a3cae376425455dbc2eb5', 'committer_username': 'codejaeger', 'committer_name': 'Debabrata Mandal', 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 21, 13, 50, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '043c3e1345b31f2444e34e0ed682079f7860751b', 'committer_username': 'codejaeger', 'committer_name': 'Debabrata Mandal', 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 21, 13, 50, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '06bccfe840207e417bbd920e13f908a9563a1f87', 'committer_username': 'codejaeger', 'committer_name': 'Debabrata Mandal', 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 21, 13, 50, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ace3e716214c7c7895ce4388667b30ad2f9d77d7', 'committer_username': 'codejaeger', 'committer_name': 'Debabrata Mandal', 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 21, 13, 50, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '90dd9e263d902b4bf62cf42a51b70aaf8f82b9ca', 'committer_username': 'codejaeger', 'committer_name': 'Debabrata Mandal', 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 21, 13, 50, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '42b76979d6d35b326f5ec2f6bd983ef698ae5440', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '3fa023fac1f62c77e756945414ae4781c7e12087', 'committer_username': 'codejaeger', 'committer_name': 'Debabrata Mandal', 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 21, 13, 50, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd24b725ab089083dde1882991d785c308dcb723a', 'committer_username': 'codejaeger', 'committer_name': 'Debabrata Mandal', 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 21, 13, 50, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '68d210986c315356f004e50948027eae78bc0a76', 'committer_username': 'codejaeger', 'committer_name': 'Debabrata Mandal', 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 21, 13, 50, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '678923202e65a7fc10669c4ad4fbb8f1320ba6ab', 'committer_username': 'codejaeger', 'committer_name': 'Debabrata Mandal', 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 21, 13, 50, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5f10c81f23c152bf22d8187e35bcce07a9bf8828', 'committer_username': 'codejaeger', 'committer_name': 'Debabrata Mandal', 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 21, 13, 50, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8c2280036364e264aa061cea75d58f757f165fe3', 'committer_username': 'codejaeger', 'committer_name': 'Debabrata Mandal', 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 21, 13, 50, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '897778db5869e253e7b6cea0d978dc9f9f4927a6', 'committer_username': 'codejaeger', 'committer_name': 'Debabrata Mandal', 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 21, 13, 50, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e9e8ce60549f3a475d5c418489b062ba7d3c5edc', 'committer_username': 'codejaeger', 'committer_name': 'Debabrata Mandal', 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 21, 13, 50, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '43562e19e5969ebf3d9d613fe993f13f710ecdcd', 'committer_username': 'codejaeger', 'committer_name': 'Debabrata Mandal', 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 21, 13, 50, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c8330a75b74730926981667283bef0ed6f8b5cf3', 'committer_username': 'codejaeger', 'committer_name': 'Debabrata Mandal', 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 21, 13, 50, 49, tzinfo=datetime.timezone.utc)}]",Debabrata Mandal,32168969,,User,,57,,53,9
425361555,Add histogram class and related functionality,"<!-- Pull Requests MUST come from topic branch based on develop, and NEVER on `master) --->

### Description

This contains the initial implementation of **histogram** functionality for STL containers for GIL images. Basic tests checking for correctness of histogram have been provided. Usage syntax and distinction between compatible and incompatible containers have been illustrated in a example file.

There was some dicussion regarding the name of the function (which now is **image_histogram**) in the mailing thread ([link](https://lists.boost.org/boost-gil/2020/05/0433.php)). I chose on 'image_histogram' since the name 'histogram' is used as the class name in Boost.Histogram and might cause problems in namespace mix-up. Another option could be **histogram_1d** since these functions are meant for that purpose.
<!-- What does this pull request do? -->

### Dependency

Optional - Docs for the this implementation are running in a parallel PR #503.

### References

[Discussions](https://lists.boost.org/boost-gil/2020/05/0410.php) on boost-gil mailing threads.

<!-- Any links related to this PR: issues, other PRs, mailing list threads, StackOverflow questions, etc. -->

### Tasklist

<!-- Add YOUR OWN TASK(s), especially if your PR is a work in progress -->

- [x] Add test case(s)
- [x] Provide documentation
- [x] Ensure all CI builds pass  - R.I.P. Travis CI
- [x] Review and approve
",True,499,https://api.github.com/repos/boostorg/gil/pulls/499,https://github.com/boostorg/gil/pull/499,closed,2244,34,26,31,14,44,2,0,"[{'name': 'cat/feature'}, {'name': 'google-summer-of-code'}]",2020-05-29 22:33:38+00:00,2021-01-23 23:02:51+00:00,20651353.0,"239 days, 0:29:13","[{'comment_id': 432919365, 'comment_body': ""This macro should be accroding to the file path in this case it should be `BOOST_GIL_HISTOGRAM_HPP`\r\n\r\nOn the other hand it makes me thing is this the right place for this directly in the main GIL folder! shouldn't it have some histogram directory or maybe in image_processing directory!?"", 'comment_created': datetime.datetime(2020, 5, 31, 7, 36, 33, tzinfo=datetime.timezone.utc), 'commenter': 'lpranam', 'type': 'User'}, {'comment_id': 432919764, 'comment_body': 'I think the right place for this section is in gil/concepts', 'comment_created': datetime.datetime(2020, 5, 31, 7, 42, 6, tzinfo=datetime.timezone.utc), 'commenter': 'lpranam', 'type': 'User'}, {'comment_id': 432920483, 'comment_body': 'use `histogram` instead of `hist`. variable names which are exposed to the user should be as clear as possible.', 'comment_created': datetime.datetime(2020, 5, 31, 7, 51, 58, tzinfo=datetime.timezone.utc), 'commenter': 'lpranam', 'type': 'User'}, {'comment_id': 432921713, 'comment_body': 'this is code repetition you should consider calling `image_histogram(SrcView const& srcview, Container &hist)`', 'comment_created': datetime.datetime(2020, 5, 31, 8, 9, 52, tzinfo=datetime.timezone.utc), 'commenter': 'lpranam', 'type': 'User'}, {'comment_id': 432923388, 'comment_body': ""instead shouldn't this create equal size bins and store the data according to the bins!?"", 'comment_created': datetime.datetime(2020, 5, 31, 8, 32, 7, tzinfo=datetime.timezone.utc), 'commenter': 'lpranam', 'type': 'User'}, {'comment_id': 432923997, 'comment_body': 'missing endline', 'comment_created': datetime.datetime(2020, 5, 31, 8, 40, 6, tzinfo=datetime.timezone.utc), 'commenter': 'lpranam', 'type': 'User'}, {'comment_id': 432924015, 'comment_body': 'missing endline', 'comment_created': datetime.datetime(2020, 5, 31, 8, 40, 12, tzinfo=datetime.timezone.utc), 'commenter': 'lpranam', 'type': 'User'}, {'comment_id': 432924033, 'comment_body': 'missing endline', 'comment_created': datetime.datetime(2020, 5, 31, 8, 40, 32, tzinfo=datetime.timezone.utc), 'commenter': 'lpranam', 'type': 'User'}, {'comment_id': 432924270, 'comment_body': ""I don't think this is a good idea! We also have pixel types like RGB64!"", 'comment_created': datetime.datetime(2020, 5, 31, 8, 43, 33, tzinfo=datetime.timezone.utc), 'commenter': 'lpranam', 'type': 'User'}, {'comment_id': 432929046, 'comment_body': ""Yes, the first is a typo. It was first in the extension directory I forgot to update it later. I was myself not sure of the correct directory for it. Lets wait for others' opinions."", 'comment_created': datetime.datetime(2020, 5, 31, 9, 46, 27, tzinfo=datetime.timezone.utc), 'commenter': 'codejaeger', 'type': 'User'}, {'comment_id': 432929162, 'comment_body': 'Should I add it to concepts/detail/type_traits.hpp?', 'comment_created': datetime.datetime(2020, 5, 31, 9, 47, 57, tzinfo=datetime.timezone.utc), 'commenter': 'codejaeger', 'type': 'User'}, {'comment_id': 432929196, 'comment_body': 'Will do.\r\n', 'comment_created': datetime.datetime(2020, 5, 31, 9, 48, 11, tzinfo=datetime.timezone.utc), 'commenter': 'codejaeger', 'type': 'User'}, {'comment_id': 432929327, 'comment_body': 'Maybe make a image_histogram_impl(SrcView const& srcview, Container &hist) without the constraints on the template type is what you meant?', 'comment_created': datetime.datetime(2020, 5, 31, 9, 50, 18, tzinfo=datetime.timezone.utc), 'commenter': 'codejaeger', 'type': 'User'}, {'comment_id': 432929474, 'comment_body': 'I was not sure how we could convey that piece of information to the end user i.e. specify what the bin size they should use when accessing the values.', 'comment_created': datetime.datetime(2020, 5, 31, 9, 52, 6, tzinfo=datetime.timezone.utc), 'commenter': 'codejaeger', 'type': 'User'}, {'comment_id': 432929780, 'comment_body': ""Could we put a check on the channel size for specific container types? It wouldn't be clean though."", 'comment_created': datetime.datetime(2020, 5, 31, 9, 55, 56, tzinfo=datetime.timezone.utc), 'commenter': 'codejaeger', 'type': 'User'}, {'comment_id': 435413594, 'comment_body': '@lpranam \r\n> I have some objections with the code format(template parameters)\r\n\r\nWhat are the objections exactly?\r\n\r\nGenerally, as it was agreed quite some time ago, we try to keep the lines up to [100 characters long](https://github.com/boostorg/gil/blob/develop/CONTRIBUTING.md#guidelines).\r\nSecond, parameters are often long (e.g. `mp11::mp_size<typename Layout::color_space_t>::value`) and it is often a good idea to keep names of template parameters self-descriptive, avoid cryptic abbreviation.\r\n\r\nSo, this for example would fit that limit:\r\n\r\n```cpp\r\ntemplate <typename T>\r\nstruct is_indexable<T, decltype((void) ++declval<T>()[0] , 0)> : std::true_type {} ;\r\n```\r\n\r\nbut this would not, hence each parameter goes into separate lines and `<` and `>` are formatted similarly to blocks delimited with `{` and `}` \r\n\r\n```cpp\r\ntemplate <typename ChannelValue, typename Layout>\r\nstruct pixel :\r\n    detail::homogeneous_color_base\r\n    <\r\n        ChannelValue,\r\n        Layout,\r\n        mp11::mp_size<typename Layout::color_space_t>::value\r\n    >\r\n{\r\n...\r\n};\r\n```\r\n\r\nThat makes the whole guideline very simple, without too many exceptions or sub-rules.\r\n\r\nThe only other, subjectively, readable formatting of highly templated source code that I know is one used by Boost.Spirit or other libraries by [Joel de Guzman](https://github.com/cycfi/), Michael Caisse et. al. ', 'comment_created': datetime.datetime(2020, 6, 4, 17, 5, 53, tzinfo=datetime.timezone.utc), 'commenter': 'mloskot', 'type': 'User'}, {'comment_id': 435414512, 'comment_body': 'Or have our own containers as @lpranam suggested in https://lists.boost.org/boost-gil/2020/06/0437.php', 'comment_created': datetime.datetime(2020, 6, 4, 17, 7, 32, tzinfo=datetime.timezone.utc), 'commenter': 'mloskot', 'type': 'User'}, {'comment_id': 443014478, 'comment_body': ""@lpranam If you don't have any proposal on better formatting fitting template parameters list in 100 characters long lines, then I'd suggest to mark this conversation as resolved.\r\n\r\nPersonally, I find reading this much more difficult:\r\n\r\n```cpp\r\nusing tp = boost::mp11::mp_list<typename std::is_convertible<\r\n                    boost::mp11::mp_at<bin_t, boost::mp11::mp_size_t<I>>,\r\n                    typename std::tuple_element<I, Tuple>::type>::type...>;\r\n```\r\nthan\r\n```cpp\r\nusing tp = boost::mp11::mp_list\r\n<\r\n    typename std::is_convertible\r\n    <\r\n        boost::mp11::mp_at<bin_t, boost::mp11::mp_size_t<I>>,\r\n        typename std::tuple_element<I, Tuple>::type\r\n    >::type...\r\n>;\r\n```"", 'comment_created': datetime.datetime(2020, 6, 19, 19, 40, 3, tzinfo=datetime.timezone.utc), 'commenter': 'mloskot', 'type': 'User'}, {'comment_id': 443015531, 'comment_body': 'Please, try to stick to these guidelines https://github.com/boostorg/gil/wiki/Include-Directives-Order', 'comment_created': datetime.datetime(2020, 6, 19, 19, 42, 55, tzinfo=datetime.timezone.utc), 'commenter': 'mloskot', 'type': 'User'}, {'comment_id': 443015661, 'comment_body': 'Again, `{` in new line please ', 'comment_created': datetime.datetime(2020, 6, 19, 19, 43, 14, tzinfo=datetime.timezone.utc), 'commenter': 'mloskot', 'type': 'User'}, {'comment_id': 443016344, 'comment_body': ""I suggest to mark such comments about improvements suggested or planned in future with `TODO`, i.e.\r\n```\r\n// TODO: With C++14 and using auto we don't need the decltype anymore\r\n```\r\nor, if it is about public interface, then the Doxygen way:\r\n```\r\n/// \\todo With C++14 and using auto we don't need the decltype anymore\r\n```"", 'comment_created': datetime.datetime(2020, 6, 19, 19, 45, 13, tzinfo=datetime.timezone.utc), 'commenter': 'mloskot', 'type': 'User'}, {'comment_id': 443016733, 'comment_body': 'I think `base_t` is better than `parent_t`. It is canonical that we derive from *base class*.', 'comment_created': datetime.datetime(2020, 6, 19, 19, 46, 14, tzinfo=datetime.timezone.utc), 'commenter': 'mloskot', 'type': 'User'}, {'comment_id': 443017143, 'comment_body': 'Again, `{` in new line.\r\n\r\nIf it is annoying to keep track of such details, then just use `clang-format` and your code will be consistent at least\r\nSee https://github.com/boostorg/gil/tree/develop/example/clang-format', 'comment_created': datetime.datetime(2020, 6, 19, 19, 47, 29, tzinfo=datetime.timezone.utc), 'commenter': 'mloskot', 'type': 'User'}, {'comment_id': 443017549, 'comment_body': ""Since you've been following the East Const convention, you may do here `size_t const` too.\r\n\r\nSecond, please always qualify `size_t` as `std::size_t`  (I assume we never do `using namespace std;`)"", 'comment_created': datetime.datetime(2020, 6, 19, 19, 48, 42, tzinfo=datetime.timezone.utc), 'commenter': 'mloskot', 'type': 'User'}, {'comment_id': 443020730, 'comment_body': 'I\'d suggest to rename `stl_histogram.hpp` to `std.hpp`, because, IMO:\r\n\r\n1. It is clearer name: a thing related to the `std::` stuff.\r\n\r\n2. Nowadays, 99.99% of us use the C++ Standard Library, not the [C++ Standard Template Library](https://en.wikipedia.org/wiki/Standard_Template_Library) that, *""that influenced many parts of the C++ Standard Library""*. C++ STD != C++ STL\r\n\r\n3. Boost convention, de-facto, is `std.hpp`\r\n\r\n    ```\r\n    $ find . -name std.hpp\r\n    ./assign/include/boost/assign/std.hpp\r\n    ./hana/include/boost/hana/ext/std.hpp\r\n    ./proto/include/boost/proto/functional/std.hpp\r\n    ```', 'comment_created': datetime.datetime(2020, 6, 19, 19, 58, 20, tzinfo=datetime.timezone.utc), 'commenter': 'mloskot', 'type': 'User'}, {'comment_id': 443371571, 'comment_body': '@mloskot should the **container_hash/extensions.hpp** be shifted? It is actually quite confusing because boost::hash_value is actually found in another place at boost/functional/hash.hpp. I will look into this and report back.', 'comment_created': datetime.datetime(2020, 6, 22, 7, 41, 33, tzinfo=datetime.timezone.utc), 'commenter': 'codejaeger', 'type': 'User'}, {'comment_id': 443401352, 'comment_body': '@mloskot Is it necessary to break \r\n\r\n`histogram<boost::mp11::mp_at<bin_t, boost::mp11::mp_size_t<Dimensions>>...> sub_histogram() {}`\r\n\r\ninto \r\n\r\n```\r\n    histogram\r\n    <   \r\n        boost::mp11::mp_at\r\n        <\r\n            bin_t,\r\n            boost::mp11::mp_size_t<Dimensions>\r\n        >...\r\n    > sub_histogram() \r\n    {}\r\n```\r\n\r\nThe former fits within 100 characters.', 'comment_created': datetime.datetime(2020, 6, 22, 8, 36, 43, tzinfo=datetime.timezone.utc), 'commenter': 'codejaeger', 'type': 'User'}, {'comment_id': 443489249, 'comment_body': '@codejaeger No, if it fits in line long for 100 characters, then no need for breaking it.\r\nIn my earlier comments I just used the snippet based on your code as an example.', 'comment_created': datetime.datetime(2020, 6, 22, 11, 20, 38, tzinfo=datetime.timezone.utc), 'commenter': 'mloskot', 'type': 'User'}, {'comment_id': 443491987, 'comment_body': '@codejaeger I meant something like this, which is groups, then folder-based and alphabetical order within groups:\r\n\r\n```\r\n#include <boost/gil/metafunctions.hpp>\r\n#include <boost/gil/pixel.hpp>\r\n#include <boost/gil/concepts/concept_check.hpp>\r\n\r\n#include <boost/mp11.hpp>\r\n#include <boost/container_hash/extensions.hpp>\r\n\r\n#include <type_traits>\r\n#include <unordered_map>\r\n```', 'comment_created': datetime.datetime(2020, 6, 22, 11, 26, 37, tzinfo=datetime.timezone.utc), 'commenter': 'mloskot', 'type': 'User'}, {'comment_id': 447110154, 'comment_body': 'could use `interleaved_view` maybe?', 'comment_created': datetime.datetime(2020, 6, 29, 16, 45, 48, tzinfo=datetime.timezone.utc), 'commenter': 'lpranam', 'type': 'User'}, {'comment_id': 447110367, 'comment_body': 'could use `interleaved_view` maybe?', 'comment_created': datetime.datetime(2020, 6, 29, 16, 46, 10, tzinfo=datetime.timezone.utc), 'commenter': 'lpranam', 'type': 'User'}, {'comment_id': 447110703, 'comment_body': 'missing end line', 'comment_created': datetime.datetime(2020, 6, 29, 16, 46, 44, tzinfo=datetime.timezone.utc), 'commenter': 'lpranam', 'type': 'User'}, {'comment_id': 447110929, 'comment_body': 'missing end line', 'comment_created': datetime.datetime(2020, 6, 29, 16, 47, 8, tzinfo=datetime.timezone.utc), 'commenter': 'lpranam', 'type': 'User'}, {'comment_id': 447117105, 'comment_body': 'missing end line', 'comment_created': datetime.datetime(2020, 6, 29, 16, 57, 12, tzinfo=datetime.timezone.utc), 'commenter': 'lpranam', 'type': 'User'}, {'comment_id': 447118049, 'comment_body': 'missing end line', 'comment_created': datetime.datetime(2020, 6, 29, 16, 58, 31, tzinfo=datetime.timezone.utc), 'commenter': 'lpranam', 'type': 'User'}, {'comment_id': 447118272, 'comment_body': 'missing end line', 'comment_created': datetime.datetime(2020, 6, 29, 16, 58, 53, tzinfo=datetime.timezone.utc), 'commenter': 'lpranam', 'type': 'User'}, {'comment_id': 447118428, 'comment_body': 'missing end line', 'comment_created': datetime.datetime(2020, 6, 29, 16, 59, 6, tzinfo=datetime.timezone.utc), 'commenter': 'lpranam', 'type': 'User'}, {'comment_id': 453189945, 'comment_body': 'though you have changed the entire file, but it still the same file you can not remove the copyright.', 'comment_created': datetime.datetime(2020, 7, 11, 12, 24, 26, tzinfo=datetime.timezone.utc), 'commenter': 'lpranam', 'type': 'User'}, {'comment_id': 453203793, 'comment_body': 'nitpicking: remove the additional space before `=`', 'comment_created': datetime.datetime(2020, 7, 11, 15, 8, 47, tzinfo=datetime.timezone.utc), 'commenter': 'lpranam', 'type': 'User'}, {'comment_id': 453209088, 'comment_body': 'The previous histogram.cpp got renamed to tutorial_histogram.cpp. I will add the copyright otherwise if needed.\r\n', 'comment_created': datetime.datetime(2020, 7, 11, 16, 6, 16, tzinfo=datetime.timezone.utc), 'commenter': 'codejaeger', 'type': 'User'}, {'comment_id': 453209602, 'comment_body': 'I think it got added when I used clang-format, maybe to keep the equal signs in line 473 and 474 at the same position. This has been done in many other places also I think.', 'comment_created': datetime.datetime(2020, 7, 11, 16, 12, 18, tzinfo=datetime.timezone.utc), 'commenter': 'codejaeger', 'type': 'User'}, {'comment_id': 460558206, 'comment_body': ""Yes, I think I was suggesting that renaming and to sum it up\r\n- `histogram.cpp` is @codejaeger 's new example\r\n- `tutorial_histogram.cpp` is the old one"", 'comment_created': datetime.datetime(2020, 7, 26, 18, 24, 45, tzinfo=datetime.timezone.utc), 'commenter': 'mloskot', 'type': 'User'}, {'comment_id': 562953256, 'comment_body': '@codejaeger Which clang-format configuration file did you use?', 'comment_created': datetime.datetime(2021, 1, 22, 22, 36, 55, tzinfo=datetime.timezone.utc), 'commenter': 'mloskot', 'type': 'User'}, {'comment_id': 563196909, 'comment_body': '@mloskot I believe I had used the one linked below:\r\n[https://github.com/boostorg/gil/blob/develop/example/clang-format/.clang-format](https://github.com/boostorg/gil/blob/develop/example/clang-format/.clang-format)', 'comment_created': datetime.datetime(2021, 1, 23, 20, 40, 24, tzinfo=datetime.timezone.utc), 'commenter': 'codejaeger', 'type': 'User'}]","[{'commit_sha': '6f9be17670bdbcdaaef24b6ac9d071b50816eb5c', 'committer_username': 'codejaeger', 'committer_name': 'Debabrata Mandal', 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 21, 13, 50, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1912366939be8c9fadb0295a062288d3e7d367dc', 'committer_username': 'codejaeger', 'committer_name': 'Debabrata Mandal', 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 21, 13, 50, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cb69be71fdc402d2a64d73cdbd50f1ca3b00e8a7', 'committer_username': 'codejaeger', 'committer_name': 'Debabrata Mandal', 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 21, 13, 50, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f043750487c8e41fe486799c4dec483a83ede70d', 'committer_username': 'codejaeger', 'committer_name': 'Debabrata Mandal', 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 21, 13, 50, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5f24786d384cc7817b68280f2e7b828567122766', 'committer_username': 'codejaeger', 'committer_name': 'Debabrata Mandal', 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 21, 13, 50, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'deb9f0f895f21f7f6e75da9f71f39d6361091808', 'committer_username': 'codejaeger', 'committer_name': 'Debabrata Mandal', 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 21, 13, 50, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9580792c09d68b4c12464186981a48320e028d1d', 'committer_username': 'codejaeger', 'committer_name': 'Debabrata Mandal', 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 21, 13, 50, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4606a17d99101afa00a559aee1f6951985a03869', 'committer_username': 'codejaeger', 'committer_name': 'Debabrata Mandal', 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 21, 13, 50, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0631223dc4dd236968606e747b5e75adf5395c51', 'committer_username': 'codejaeger', 'committer_name': 'Debabrata Mandal', 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 21, 13, 50, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '10c2faf3b03e3a6ea32f88113de79fdbfddfe83f', 'committer_username': 'codejaeger', 'committer_name': 'Debabrata Mandal', 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 21, 13, 50, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6160b67e1d966d01f964b2ddbf9a70e78a26fa0c', 'committer_username': 'codejaeger', 'committer_name': 'Debabrata Mandal', 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 21, 13, 50, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '795760fbeb2bfc279c3c5ce66061e8614da2b9e9', 'committer_username': 'codejaeger', 'committer_name': 'Debabrata Mandal', 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 21, 13, 50, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c332397ea2e37288d30666433f10bced658179f1', 'committer_username': 'codejaeger', 'committer_name': 'Debabrata Mandal', 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 21, 13, 50, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'de90ff6f49dfc4959a827c6644a2585431fe4a67', 'committer_username': 'codejaeger', 'committer_name': 'Debabrata Mandal', 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 21, 13, 50, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '771d3448b3f2936f08b2dee0f44eea5865e60ce2', 'committer_username': 'codejaeger', 'committer_name': 'Debabrata Mandal', 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 21, 13, 50, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '28bf4ecf0046698fc98a3cae376425455dbc2eb5', 'committer_username': 'codejaeger', 'committer_name': 'Debabrata Mandal', 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 21, 13, 50, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '043c3e1345b31f2444e34e0ed682079f7860751b', 'committer_username': 'codejaeger', 'committer_name': 'Debabrata Mandal', 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 21, 13, 50, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '06bccfe840207e417bbd920e13f908a9563a1f87', 'committer_username': 'codejaeger', 'committer_name': 'Debabrata Mandal', 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 21, 13, 50, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ace3e716214c7c7895ce4388667b30ad2f9d77d7', 'committer_username': 'codejaeger', 'committer_name': 'Debabrata Mandal', 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 21, 13, 50, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '90dd9e263d902b4bf62cf42a51b70aaf8f82b9ca', 'committer_username': 'codejaeger', 'committer_name': 'Debabrata Mandal', 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 21, 13, 50, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '42b76979d6d35b326f5ec2f6bd983ef698ae5440', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '3fa023fac1f62c77e756945414ae4781c7e12087', 'committer_username': 'codejaeger', 'committer_name': 'Debabrata Mandal', 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 21, 13, 50, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd24b725ab089083dde1882991d785c308dcb723a', 'committer_username': 'codejaeger', 'committer_name': 'Debabrata Mandal', 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 21, 13, 50, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '68d210986c315356f004e50948027eae78bc0a76', 'committer_username': 'codejaeger', 'committer_name': 'Debabrata Mandal', 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 21, 13, 50, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '678923202e65a7fc10669c4ad4fbb8f1320ba6ab', 'committer_username': 'codejaeger', 'committer_name': 'Debabrata Mandal', 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 21, 13, 50, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5f10c81f23c152bf22d8187e35bcce07a9bf8828', 'committer_username': 'codejaeger', 'committer_name': 'Debabrata Mandal', 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 21, 13, 50, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8c2280036364e264aa061cea75d58f757f165fe3', 'committer_username': 'codejaeger', 'committer_name': 'Debabrata Mandal', 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 21, 13, 50, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '897778db5869e253e7b6cea0d978dc9f9f4927a6', 'committer_username': 'codejaeger', 'committer_name': 'Debabrata Mandal', 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 21, 13, 50, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e9e8ce60549f3a475d5c418489b062ba7d3c5edc', 'committer_username': 'codejaeger', 'committer_name': 'Debabrata Mandal', 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 21, 13, 50, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '43562e19e5969ebf3d9d613fe993f13f710ecdcd', 'committer_username': 'codejaeger', 'committer_name': 'Debabrata Mandal', 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 21, 13, 50, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c8330a75b74730926981667283bef0ed6f8b5cf3', 'committer_username': 'codejaeger', 'committer_name': 'Debabrata Mandal', 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 21, 13, 50, 49, tzinfo=datetime.timezone.utc)}]",Debabrata Mandal,32168969,,User,,57,,53,9
472554563,Add histogram equalization feature,"<!-- Pull Requests MUST come from topic branch based on develop, and NEVER on `master) --->

### Description

Histogram equalization is an important contrast enhancement algorithm. It is an application of histograms to contrast stretch images.

<!-- What does this pull request do? -->

Contains code, tests, example and doc for the algorithm global histogram equalization started during GSOC'2020.
The code has been tested on variety of standard test images to find any noticeable errors. A comparison with implementations from other image processing libraries has also been made.

### Dependency

This PR requires support of GIL histogram class currently running in PR #499 . Reviewing and merging can only be done post completion of former PRs.

### References

Wiki - https://en.wikipedia.org/wiki/Histogram_equalization

<!-- Any links related to this PR: issues, other PRs, mailing list threads, StackOverflow questions, etc. -->

Related PRs - #435, #442

### Tasklist

<!-- Add YOUR OWN TASK(s), especially if your PR is a work in progress -->

- [x] Add test case(s)
- [x] Ensure all CI builds pass - R.I.P. Travis CI
- [x] Review and approve
",True,514,https://api.github.com/repos/boostorg/gil/pulls/514,https://github.com/boostorg/gil/pull/514,closed,550,0,7,5,2,0,2,0,"[{'name': 'cat/feature'}, {'name': 'google-summer-of-code'}]",2020-08-24 14:21:15+00:00,2021-01-24 20:32:40+00:00,13241485.0,"153 days, 6:11:25",[],"[{'commit_sha': 'cb6e86ac9c57bee95a5269152377245724754f3d', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '36b9c079c60cf40a1a052c1a517804602475fbe2', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'e6444d5cf36add14a6f6a0a23bd7f6bbbd3000a5', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '4644d833d761fb77a9952656508fd09685e736e6', 'committer_username': 'codejaeger', 'committer_name': 'Debabrata Mandal', 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 21, 13, 50, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cfcec68c71ffb00669d7ae19cfe2fa93b2439b54', 'committer_username': 'mloskot', 'committer_name': 'Mateusz Łoskot', 'committer_email': 'mateusz@loskot.net', 'commit_date': datetime.datetime(2009, 5, 4, 12, 1, tzinfo=datetime.timezone.utc)}]",Debabrata Mandal,32168969,,User,,57,,53,9
472632167,Add histogram matching algorithm,"<!-- Pull Requests MUST come from topic branch based on develop, and NEVER on `master) --->

### Description

Histogram matching is a generalised version of the algorithm histogram equalization. 
It aims to match the histogram obtained from one input image to another reference image, transforming the input image in the process.
 
<!-- What does this pull request do? -->

This PR adds code, tests, doc & an example to use the histogram matching feature implemented. 

### Dependency

This PR requires support of GIL histogram class currently running in PR #499. Reviewing and merging can only be done after completion of the former PR.

### References

<!-- Any links related to this PR: issues, other PRs, mailing list threads, StackOverflow questions, etc. -->

Wiki - https://en.wikipedia.org/wiki/Histogram_matching
Related PR - #442

### Tasklist

<!-- Add YOUR OWN TASK(s), especially if your PR is a work in progress -->

- [x] Add test case(s)
- [x] Ensure all CI builds pass - R.I.P. Travis CI
- [x] Review and approve
",True,515,https://api.github.com/repos/boostorg/gil/pulls/515,https://github.com/boostorg/gil/pull/515,closed,475,0,6,4,1,0,2,0,"[{'name': 'cat/feature'}, {'name': 'google-summer-of-code'}]",2020-08-24 16:30:44+00:00,2021-01-24 20:33:39+00:00,13233775.0,"153 days, 4:02:55",[],"[{'commit_sha': '0e7ae1ec0887a76f6ea865b7ed388c0e26a7ebbf', 'committer_username': 'codejaeger', 'committer_name': 'Debabrata Mandal', 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 21, 13, 50, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '286d6190f9ecda3efe7e60f9f9cab3199f41dc2a', 'committer_username': 'codejaeger', 'committer_name': 'Debabrata Mandal', 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 21, 13, 50, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6bc27adfb24d63b962b82f1a0bd90d9cdd30ef8e', 'committer_username': 'codejaeger', 'committer_name': 'Debabrata Mandal', 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 21, 13, 50, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9de246d283dc469c363978b1d6d009c118bde750', 'committer_username': 'mloskot', 'committer_name': 'Mateusz Łoskot', 'committer_email': 'mateusz@loskot.net', 'commit_date': datetime.datetime(2009, 5, 4, 12, 1, tzinfo=datetime.timezone.utc)}]",Debabrata Mandal,32168969,,User,,57,,53,9
472678998,Add adaptive histogram equalization algorithm,"<!-- Pull Requests MUST come from topic branch based on develop, and NEVER on `master) --->

### Description

Adaptive histogram equalization(AHE) is used in cases when histogram equalization cannot properly contrast enhance due to the presence of both very bright and very dark regions.
AHE brings out the local information in an image by dividing the image into tiles and then individually performs HE on each of them. Later to remove tiling artefacts  a bi-linear interpolation is performed using mappings from the adjacent tiles. Finally to suppress noise, use contrast clipping to limit the #pixels of a particular value.

This PR adds code, tests & an example to show how to use the GIL AHE algorithm.

### Dependency

This PR requires support of GIL histogram class and the global HE algorithm currently running in PR #499 & PR #514 respectively . Reviewing and merging can only be done post completion of former PRs.

<!-- What does this pull request do? -->

### References

1. [Graphics Gems 4 - Paul S. Heckbert](http://cas.xav.free.fr/Graphics%20Gems%204%20-%20Paul%20S.%20Heckbert.pdf) Pg. 474
2. [Adaptive Histogram Equalization and its Variations](http://www.cs.unc.edu/Research/Image/MIDAG/pubs/papers/Adaptive%20Histogram%20Equalization%20and%20Its%20Variations.pdf)
3. Discussion thread on [boost-gil](https://lists.boost.org/boost-gil/2020/08/0454.php) mailing list

<!-- Any links related to this PR: issues, other PRs, mailing list threads, StackOverflow questions, etc. -->

### Tasklist

<!-- Add YOUR OWN TASK(s), especially if your PR is a work in progress -->

- [x] Add test case(s)
- [x] Ensure all CI builds pass - RIP Travis CI
- [x] Review and approve
",True,516,https://api.github.com/repos/boostorg/gil/pulls/516,https://github.com/boostorg/gil/pull/516,closed,445,0,3,3,1,0,2,0,"[{'name': 'cat/feature'}, {'name': 'google-summer-of-code'}]",2020-08-24 18:03:56+00:00,2021-01-24 22:22:49+00:00,13234733.0,"153 days, 4:18:53",[],"[{'commit_sha': '6aeffec8785b14fffa068709e2acd640b32d5489', 'committer_username': 'codejaeger', 'committer_name': 'Debabrata Mandal', 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 21, 13, 50, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5ad6f43cfdf643722cc658243a65a610ac5cb911', 'committer_username': 'mloskot', 'committer_name': 'Mateusz Łoskot', 'committer_email': 'mateusz@loskot.net', 'commit_date': datetime.datetime(2009, 5, 4, 12, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c0ce60d317383519f95576095376b913062135e9', 'committer_username': 'mloskot', 'committer_name': 'Mateusz Łoskot', 'committer_email': 'mateusz@loskot.net', 'commit_date': datetime.datetime(2009, 5, 4, 12, 1, tzinfo=datetime.timezone.utc)}]",Debabrata Mandal,32168969,,User,,57,,53,9
440792741,Add docs for histogram,"<!-- Pull Requests MUST come from topic branch based on develop, and NEVER on `master) --->

### Description

<!-- What does this pull request do? -->

Add documentation for the histogram functionality provided in PR #499 .

### References

<!-- Any links related to this PR: issues, other PRs, mailing list threads, StackOverflow questions, etc. -->

- Blocked by #499

### Tasklist

<!-- Add YOUR OWN TASK(s), especially if your PR is a work in progress -->

- [x] Add test case(s)
- [x] Ensure all CI builds pass - RIP Travis CI, replaced with GitHub Actions
- [ ] Review and approve
",True,503,https://api.github.com/repos/boostorg/gil/pulls/503,https://github.com/boostorg/gil/pull/503,closed,493,0,17,10,2,17,2,0,"[{'name': 'cat/documentation'}, {'name': 'google-summer-of-code'}]",2020-06-26 21:24:47+00:00,2021-03-24 20:19:06+00:00,23410459.0,"270 days, 22:54:19","[{'comment_id': 460564927, 'comment_body': 'It would be good to indicate what distinguishes the Method 1 from 2:\r\n\r\n```\r\n- to create the histogram \r\n+ to create and fill the histogram based on the frequency of luminance in given image\r\n```', 'comment_created': datetime.datetime(2020, 7, 26, 19, 35, 51, tzinfo=datetime.timezone.utc), 'commenter': 'mloskot', 'type': 'User'}, {'comment_id': 460564964, 'comment_body': 'Please, use reStructuredText double backticks to indicate inline code or variable names in a sentence \r\n```\r\n\r\n- *image*\r\n+ ``image``\r\n```\r\n', 'comment_created': datetime.datetime(2020, 7, 26, 19, 36, 35, tzinfo=datetime.timezone.utc), 'commenter': 'mloskot', 'type': 'User'}, {'comment_id': 460565543, 'comment_body': ""Although most people should understand what you mean by\r\n> A cumulative histogram is exactly what it sounds like.\r\nI'm not sure if this is a suitable expression.\r\n\r\nI'd either remove this sentence and assume a reader is familiar notion of 'cumulative histogram' or provide clear explanation, for example:\r\n\r\n>  A cumulative histogram is a histogram where, each bin of given axis stores the counts for that bin plus all bins for smaller values (frequencies) along the given axis."", 'comment_created': datetime.datetime(2020, 7, 26, 19, 42, 30, tzinfo=datetime.timezone.utc), 'commenter': 'mloskot', 'type': 'User'}, {'comment_id': 460565669, 'comment_body': 'Nitpicking:\r\n\r\n> by the standard\r\n\r\nWhat standard? :-)', 'comment_created': datetime.datetime(2020, 7, 26, 19, 43, 58, tzinfo=datetime.timezone.utc), 'commenter': 'mloskot', 'type': 'User'}, {'comment_id': 460566130, 'comment_body': ""For example, let's consider..."", 'comment_created': datetime.datetime(2020, 7, 26, 19, 48, 55, tzinfo=datetime.timezone.utc), 'commenter': 'mloskot', 'type': 'User'}, {'comment_id': 460566227, 'comment_body': 'Nitpickign: A more C++11-thy code :)\r\n\r\n```cpp\r\nint a{0};\r\nTest() = default;\r\nTest(int c) : a(c) {}\r\n```', 'comment_created': datetime.datetime(2020, 7, 26, 19, 49, 41, tzinfo=datetime.timezone.utc), 'commenter': 'mloskot', 'type': 'User'}, {'comment_id': 460566293, 'comment_body': '```\r\n- to the main code.\r\n+ to the usage example.\r\n```', 'comment_created': datetime.datetime(2020, 7, 26, 19, 50, 24, tzinfo=datetime.timezone.utc), 'commenter': 'mloskot', 'type': 'User'}, {'comment_id': 460566517, 'comment_body': 'Perhaps this reads better:\r\n\r\n```\r\n- filling and getting in data into the histogram\r\n+ filling instance of `histogram` class with values\r\n```', 'comment_created': datetime.datetime(2020, 7, 26, 19, 52, 49, tzinfo=datetime.timezone.utc), 'commenter': 'mloskot', 'type': 'User'}, {'comment_id': 460567531, 'comment_body': ""I do not like the idea of storing 7MB files in GIL's repo.\r\nUnfortunately, I can not offer an ideal alternative yet.\r\n\r\nI'd suggest a temporary solution:\r\n1. Remove the images from this PR\r\n2. Paste the images as comments to this PR\r\n3. Replace filename with URLs from GitHub\r\n\r\n```\r\n.. figure:: https://user-images.githubusercontent.com/12345/12811123-3877a980-8375-11ea-9960-1b88a3f9f87b.png\r\n...\r\n```\r\n\r\nThe thing is, once we start adding big binary files to Git repo, then even if we find an optimal solution for hosting images for docs, we will not be able to get rid of them easily, from Git history.\r\n\r\nI have (slowly) started collecting externally hosted test images in dedicated repo https://github.com/boost-gil/test-images, so I perhaps we could have `examples/` folder there and link from docs to there.\r\n\r\nWhat do you think @lpranam ?"", 'comment_created': datetime.datetime(2020, 7, 26, 20, 4, 16, tzinfo=datetime.timezone.utc), 'commenter': 'mloskot', 'type': 'User'}, {'comment_id': 461757419, 'comment_body': ""In my opinion, in docs we don't have to use the full-size images. Docs just need to demonstrate what our algorithms can do and do not need to show the exact accurate images, we can use highly compressed and small resolution images in docs. Otherwise what @mloskot suggested the great. I have no other objections regarding this PR."", 'comment_created': datetime.datetime(2020, 7, 28, 17, 39, 53, tzinfo=datetime.timezone.utc), 'commenter': 'lpranam', 'type': 'User'}, {'comment_id': 463507846, 'comment_body': ""> @codejaeger Well done! It's great to see GSoC features covered with documentation :-) I'm happy to approve this PR.\r\n> \r\n\r\nThanks a lot @mloskot : )  \r\n\r\n> I'd suggest we merge it **after** we merge PR #499.\r\n> Next time you may prefer to stick docs in the same PR as implementation and tests.\r\n\r\nYes sure. Also this PR contains docs for the algorithm histogram equalization. I haven't pushed it yet since the histogram class is a dependency for it. Should I remove the docs for the algorithm?"", 'comment_created': datetime.datetime(2020, 7, 31, 9, 33, 11, tzinfo=datetime.timezone.utc), 'commenter': 'codejaeger', 'type': 'User'}, {'comment_id': 463508794, 'comment_body': 'I have compressed the images, they now occupy about 34 KB and 24 KB. I can also do what @mloskot suggested if needed.', 'comment_created': datetime.datetime(2020, 7, 31, 9, 35, 15, tzinfo=datetime.timezone.utc), 'commenter': 'codejaeger', 'type': 'User'}, {'comment_id': 463568444, 'comment_body': 'though it is compressed for doc would be great to add real one on that repo so we can have those images for later.', 'comment_created': datetime.datetime(2020, 7, 31, 11, 58, 34, tzinfo=datetime.timezone.utc), 'commenter': 'lpranam', 'type': 'User'}, {'comment_id': 464546262, 'comment_body': '@codejaeger If you want to try the idea outlined earlier, you should have now the write access to https://github.com/boost-gil/test-images Feel free to create `doc/` directory (and any necessary subfolders) and put your images in there.', 'comment_created': datetime.datetime(2020, 8, 3, 17, 10, 25, tzinfo=datetime.timezone.utc), 'commenter': 'mloskot', 'type': 'User'}, {'comment_id': 563343287, 'comment_body': '@codejaeger Could you add full size/resolution images to the `test-images` repo as @lpranam suggested?', 'comment_created': datetime.datetime(2021, 1, 24, 20, 12, 22, tzinfo=datetime.timezone.utc), 'commenter': 'mloskot', 'type': 'User'}, {'comment_id': 600314157, 'comment_body': '@codejaeger Ping ☝️ ', 'comment_created': datetime.datetime(2021, 3, 24, 9, 38, 55, tzinfo=datetime.timezone.utc), 'commenter': 'mloskot', 'type': 'User'}, {'comment_id': 600460176, 'comment_body': 'Yep doing it. Thanks for the reminder, sorry I had totally forgotten about it. ', 'comment_created': datetime.datetime(2021, 3, 24, 13, 8, 50, tzinfo=datetime.timezone.utc), 'commenter': 'codejaeger', 'type': 'User'}]","[{'commit_sha': 'b3a453da177813235633f7026b055415420614a7', 'committer_username': 'codejaeger', 'committer_name': 'Debabrata Mandal', 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 21, 13, 50, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7da2aa42dd9c5a64ac0b1c400c805053770ba851', 'committer_username': 'codejaeger', 'committer_name': 'Debabrata Mandal', 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 21, 13, 50, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3739b436e6884597676b5becc88daa75e04c29e0', 'committer_username': 'codejaeger', 'committer_name': 'Debabrata Mandal', 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 21, 13, 50, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd7233a66eb105b2f195ce7836db0b130fa43d67e', 'committer_username': 'codejaeger', 'committer_name': 'Debabrata Mandal', 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 21, 13, 50, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '909dd8308110e1914503af20fd83bd30615a9968', 'committer_username': 'codejaeger', 'committer_name': 'Debabrata Mandal', 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 21, 13, 50, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '79ca82f53202bf66eb99ab56917547c72df190cf', 'committer_username': 'codejaeger', 'committer_name': 'Debabrata Mandal', 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 21, 13, 50, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f96499974229b227c17cd6b06827fbc3000494ef', 'committer_username': 'codejaeger', 'committer_name': 'Debabrata Mandal', 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 21, 13, 50, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2fd0812de25f910d8f1a6adc7baea418b0ca8f53', 'committer_username': 'codejaeger', 'committer_name': 'Debabrata Mandal', 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 21, 13, 50, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '26d1d730c51b20b60a023fd2d528b6c28d15ca60', 'committer_username': 'mloskot', 'committer_name': 'Mateusz Łoskot', 'committer_email': 'mateusz@loskot.net', 'commit_date': datetime.datetime(2009, 5, 4, 12, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b09a0c245adf1b3d16c55e9d408029e7aaf5d8c6', 'committer_username': 'codejaeger', 'committer_name': 'Debabrata Mandal', 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 21, 13, 50, 49, tzinfo=datetime.timezone.utc)}]",Debabrata Mandal,32168969,,User,,57,,53,9
425361555,Add histogram class and related functionality,"<!-- Pull Requests MUST come from topic branch based on develop, and NEVER on `master) --->

### Description

This contains the initial implementation of **histogram** functionality for STL containers for GIL images. Basic tests checking for correctness of histogram have been provided. Usage syntax and distinction between compatible and incompatible containers have been illustrated in a example file.

There was some dicussion regarding the name of the function (which now is **image_histogram**) in the mailing thread ([link](https://lists.boost.org/boost-gil/2020/05/0433.php)). I chose on 'image_histogram' since the name 'histogram' is used as the class name in Boost.Histogram and might cause problems in namespace mix-up. Another option could be **histogram_1d** since these functions are meant for that purpose.
<!-- What does this pull request do? -->

### Dependency

Optional - Docs for the this implementation are running in a parallel PR #503.

### References

[Discussions](https://lists.boost.org/boost-gil/2020/05/0410.php) on boost-gil mailing threads.

<!-- Any links related to this PR: issues, other PRs, mailing list threads, StackOverflow questions, etc. -->

### Tasklist

<!-- Add YOUR OWN TASK(s), especially if your PR is a work in progress -->

- [x] Add test case(s)
- [x] Provide documentation
- [x] Ensure all CI builds pass  - R.I.P. Travis CI
- [x] Review and approve
",True,499,https://api.github.com/repos/boostorg/gil/pulls/499,https://github.com/boostorg/gil/pull/499,closed,2244,34,26,31,14,44,2,0,"[{'name': 'cat/feature'}, {'name': 'google-summer-of-code'}]",2020-05-29 22:33:38+00:00,2021-01-23 23:02:51+00:00,20651353.0,"239 days, 0:29:13","[{'comment_id': 432919365, 'comment_body': ""This macro should be accroding to the file path in this case it should be `BOOST_GIL_HISTOGRAM_HPP`\r\n\r\nOn the other hand it makes me thing is this the right place for this directly in the main GIL folder! shouldn't it have some histogram directory or maybe in image_processing directory!?"", 'comment_created': datetime.datetime(2020, 5, 31, 7, 36, 33, tzinfo=datetime.timezone.utc), 'commenter': 'lpranam', 'type': 'User'}, {'comment_id': 432919764, 'comment_body': 'I think the right place for this section is in gil/concepts', 'comment_created': datetime.datetime(2020, 5, 31, 7, 42, 6, tzinfo=datetime.timezone.utc), 'commenter': 'lpranam', 'type': 'User'}, {'comment_id': 432920483, 'comment_body': 'use `histogram` instead of `hist`. variable names which are exposed to the user should be as clear as possible.', 'comment_created': datetime.datetime(2020, 5, 31, 7, 51, 58, tzinfo=datetime.timezone.utc), 'commenter': 'lpranam', 'type': 'User'}, {'comment_id': 432921713, 'comment_body': 'this is code repetition you should consider calling `image_histogram(SrcView const& srcview, Container &hist)`', 'comment_created': datetime.datetime(2020, 5, 31, 8, 9, 52, tzinfo=datetime.timezone.utc), 'commenter': 'lpranam', 'type': 'User'}, {'comment_id': 432923388, 'comment_body': ""instead shouldn't this create equal size bins and store the data according to the bins!?"", 'comment_created': datetime.datetime(2020, 5, 31, 8, 32, 7, tzinfo=datetime.timezone.utc), 'commenter': 'lpranam', 'type': 'User'}, {'comment_id': 432923997, 'comment_body': 'missing endline', 'comment_created': datetime.datetime(2020, 5, 31, 8, 40, 6, tzinfo=datetime.timezone.utc), 'commenter': 'lpranam', 'type': 'User'}, {'comment_id': 432924015, 'comment_body': 'missing endline', 'comment_created': datetime.datetime(2020, 5, 31, 8, 40, 12, tzinfo=datetime.timezone.utc), 'commenter': 'lpranam', 'type': 'User'}, {'comment_id': 432924033, 'comment_body': 'missing endline', 'comment_created': datetime.datetime(2020, 5, 31, 8, 40, 32, tzinfo=datetime.timezone.utc), 'commenter': 'lpranam', 'type': 'User'}, {'comment_id': 432924270, 'comment_body': ""I don't think this is a good idea! We also have pixel types like RGB64!"", 'comment_created': datetime.datetime(2020, 5, 31, 8, 43, 33, tzinfo=datetime.timezone.utc), 'commenter': 'lpranam', 'type': 'User'}, {'comment_id': 432929046, 'comment_body': ""Yes, the first is a typo. It was first in the extension directory I forgot to update it later. I was myself not sure of the correct directory for it. Lets wait for others' opinions."", 'comment_created': datetime.datetime(2020, 5, 31, 9, 46, 27, tzinfo=datetime.timezone.utc), 'commenter': 'codejaeger', 'type': 'User'}, {'comment_id': 432929162, 'comment_body': 'Should I add it to concepts/detail/type_traits.hpp?', 'comment_created': datetime.datetime(2020, 5, 31, 9, 47, 57, tzinfo=datetime.timezone.utc), 'commenter': 'codejaeger', 'type': 'User'}, {'comment_id': 432929196, 'comment_body': 'Will do.\r\n', 'comment_created': datetime.datetime(2020, 5, 31, 9, 48, 11, tzinfo=datetime.timezone.utc), 'commenter': 'codejaeger', 'type': 'User'}, {'comment_id': 432929327, 'comment_body': 'Maybe make a image_histogram_impl(SrcView const& srcview, Container &hist) without the constraints on the template type is what you meant?', 'comment_created': datetime.datetime(2020, 5, 31, 9, 50, 18, tzinfo=datetime.timezone.utc), 'commenter': 'codejaeger', 'type': 'User'}, {'comment_id': 432929474, 'comment_body': 'I was not sure how we could convey that piece of information to the end user i.e. specify what the bin size they should use when accessing the values.', 'comment_created': datetime.datetime(2020, 5, 31, 9, 52, 6, tzinfo=datetime.timezone.utc), 'commenter': 'codejaeger', 'type': 'User'}, {'comment_id': 432929780, 'comment_body': ""Could we put a check on the channel size for specific container types? It wouldn't be clean though."", 'comment_created': datetime.datetime(2020, 5, 31, 9, 55, 56, tzinfo=datetime.timezone.utc), 'commenter': 'codejaeger', 'type': 'User'}, {'comment_id': 435413594, 'comment_body': '@lpranam \r\n> I have some objections with the code format(template parameters)\r\n\r\nWhat are the objections exactly?\r\n\r\nGenerally, as it was agreed quite some time ago, we try to keep the lines up to [100 characters long](https://github.com/boostorg/gil/blob/develop/CONTRIBUTING.md#guidelines).\r\nSecond, parameters are often long (e.g. `mp11::mp_size<typename Layout::color_space_t>::value`) and it is often a good idea to keep names of template parameters self-descriptive, avoid cryptic abbreviation.\r\n\r\nSo, this for example would fit that limit:\r\n\r\n```cpp\r\ntemplate <typename T>\r\nstruct is_indexable<T, decltype((void) ++declval<T>()[0] , 0)> : std::true_type {} ;\r\n```\r\n\r\nbut this would not, hence each parameter goes into separate lines and `<` and `>` are formatted similarly to blocks delimited with `{` and `}` \r\n\r\n```cpp\r\ntemplate <typename ChannelValue, typename Layout>\r\nstruct pixel :\r\n    detail::homogeneous_color_base\r\n    <\r\n        ChannelValue,\r\n        Layout,\r\n        mp11::mp_size<typename Layout::color_space_t>::value\r\n    >\r\n{\r\n...\r\n};\r\n```\r\n\r\nThat makes the whole guideline very simple, without too many exceptions or sub-rules.\r\n\r\nThe only other, subjectively, readable formatting of highly templated source code that I know is one used by Boost.Spirit or other libraries by [Joel de Guzman](https://github.com/cycfi/), Michael Caisse et. al. ', 'comment_created': datetime.datetime(2020, 6, 4, 17, 5, 53, tzinfo=datetime.timezone.utc), 'commenter': 'mloskot', 'type': 'User'}, {'comment_id': 435414512, 'comment_body': 'Or have our own containers as @lpranam suggested in https://lists.boost.org/boost-gil/2020/06/0437.php', 'comment_created': datetime.datetime(2020, 6, 4, 17, 7, 32, tzinfo=datetime.timezone.utc), 'commenter': 'mloskot', 'type': 'User'}, {'comment_id': 443014478, 'comment_body': ""@lpranam If you don't have any proposal on better formatting fitting template parameters list in 100 characters long lines, then I'd suggest to mark this conversation as resolved.\r\n\r\nPersonally, I find reading this much more difficult:\r\n\r\n```cpp\r\nusing tp = boost::mp11::mp_list<typename std::is_convertible<\r\n                    boost::mp11::mp_at<bin_t, boost::mp11::mp_size_t<I>>,\r\n                    typename std::tuple_element<I, Tuple>::type>::type...>;\r\n```\r\nthan\r\n```cpp\r\nusing tp = boost::mp11::mp_list\r\n<\r\n    typename std::is_convertible\r\n    <\r\n        boost::mp11::mp_at<bin_t, boost::mp11::mp_size_t<I>>,\r\n        typename std::tuple_element<I, Tuple>::type\r\n    >::type...\r\n>;\r\n```"", 'comment_created': datetime.datetime(2020, 6, 19, 19, 40, 3, tzinfo=datetime.timezone.utc), 'commenter': 'mloskot', 'type': 'User'}, {'comment_id': 443015531, 'comment_body': 'Please, try to stick to these guidelines https://github.com/boostorg/gil/wiki/Include-Directives-Order', 'comment_created': datetime.datetime(2020, 6, 19, 19, 42, 55, tzinfo=datetime.timezone.utc), 'commenter': 'mloskot', 'type': 'User'}, {'comment_id': 443015661, 'comment_body': 'Again, `{` in new line please ', 'comment_created': datetime.datetime(2020, 6, 19, 19, 43, 14, tzinfo=datetime.timezone.utc), 'commenter': 'mloskot', 'type': 'User'}, {'comment_id': 443016344, 'comment_body': ""I suggest to mark such comments about improvements suggested or planned in future with `TODO`, i.e.\r\n```\r\n// TODO: With C++14 and using auto we don't need the decltype anymore\r\n```\r\nor, if it is about public interface, then the Doxygen way:\r\n```\r\n/// \\todo With C++14 and using auto we don't need the decltype anymore\r\n```"", 'comment_created': datetime.datetime(2020, 6, 19, 19, 45, 13, tzinfo=datetime.timezone.utc), 'commenter': 'mloskot', 'type': 'User'}, {'comment_id': 443016733, 'comment_body': 'I think `base_t` is better than `parent_t`. It is canonical that we derive from *base class*.', 'comment_created': datetime.datetime(2020, 6, 19, 19, 46, 14, tzinfo=datetime.timezone.utc), 'commenter': 'mloskot', 'type': 'User'}, {'comment_id': 443017143, 'comment_body': 'Again, `{` in new line.\r\n\r\nIf it is annoying to keep track of such details, then just use `clang-format` and your code will be consistent at least\r\nSee https://github.com/boostorg/gil/tree/develop/example/clang-format', 'comment_created': datetime.datetime(2020, 6, 19, 19, 47, 29, tzinfo=datetime.timezone.utc), 'commenter': 'mloskot', 'type': 'User'}, {'comment_id': 443017549, 'comment_body': ""Since you've been following the East Const convention, you may do here `size_t const` too.\r\n\r\nSecond, please always qualify `size_t` as `std::size_t`  (I assume we never do `using namespace std;`)"", 'comment_created': datetime.datetime(2020, 6, 19, 19, 48, 42, tzinfo=datetime.timezone.utc), 'commenter': 'mloskot', 'type': 'User'}, {'comment_id': 443020730, 'comment_body': 'I\'d suggest to rename `stl_histogram.hpp` to `std.hpp`, because, IMO:\r\n\r\n1. It is clearer name: a thing related to the `std::` stuff.\r\n\r\n2. Nowadays, 99.99% of us use the C++ Standard Library, not the [C++ Standard Template Library](https://en.wikipedia.org/wiki/Standard_Template_Library) that, *""that influenced many parts of the C++ Standard Library""*. C++ STD != C++ STL\r\n\r\n3. Boost convention, de-facto, is `std.hpp`\r\n\r\n    ```\r\n    $ find . -name std.hpp\r\n    ./assign/include/boost/assign/std.hpp\r\n    ./hana/include/boost/hana/ext/std.hpp\r\n    ./proto/include/boost/proto/functional/std.hpp\r\n    ```', 'comment_created': datetime.datetime(2020, 6, 19, 19, 58, 20, tzinfo=datetime.timezone.utc), 'commenter': 'mloskot', 'type': 'User'}, {'comment_id': 443371571, 'comment_body': '@mloskot should the **container_hash/extensions.hpp** be shifted? It is actually quite confusing because boost::hash_value is actually found in another place at boost/functional/hash.hpp. I will look into this and report back.', 'comment_created': datetime.datetime(2020, 6, 22, 7, 41, 33, tzinfo=datetime.timezone.utc), 'commenter': 'codejaeger', 'type': 'User'}, {'comment_id': 443401352, 'comment_body': '@mloskot Is it necessary to break \r\n\r\n`histogram<boost::mp11::mp_at<bin_t, boost::mp11::mp_size_t<Dimensions>>...> sub_histogram() {}`\r\n\r\ninto \r\n\r\n```\r\n    histogram\r\n    <   \r\n        boost::mp11::mp_at\r\n        <\r\n            bin_t,\r\n            boost::mp11::mp_size_t<Dimensions>\r\n        >...\r\n    > sub_histogram() \r\n    {}\r\n```\r\n\r\nThe former fits within 100 characters.', 'comment_created': datetime.datetime(2020, 6, 22, 8, 36, 43, tzinfo=datetime.timezone.utc), 'commenter': 'codejaeger', 'type': 'User'}, {'comment_id': 443489249, 'comment_body': '@codejaeger No, if it fits in line long for 100 characters, then no need for breaking it.\r\nIn my earlier comments I just used the snippet based on your code as an example.', 'comment_created': datetime.datetime(2020, 6, 22, 11, 20, 38, tzinfo=datetime.timezone.utc), 'commenter': 'mloskot', 'type': 'User'}, {'comment_id': 443491987, 'comment_body': '@codejaeger I meant something like this, which is groups, then folder-based and alphabetical order within groups:\r\n\r\n```\r\n#include <boost/gil/metafunctions.hpp>\r\n#include <boost/gil/pixel.hpp>\r\n#include <boost/gil/concepts/concept_check.hpp>\r\n\r\n#include <boost/mp11.hpp>\r\n#include <boost/container_hash/extensions.hpp>\r\n\r\n#include <type_traits>\r\n#include <unordered_map>\r\n```', 'comment_created': datetime.datetime(2020, 6, 22, 11, 26, 37, tzinfo=datetime.timezone.utc), 'commenter': 'mloskot', 'type': 'User'}, {'comment_id': 447110154, 'comment_body': 'could use `interleaved_view` maybe?', 'comment_created': datetime.datetime(2020, 6, 29, 16, 45, 48, tzinfo=datetime.timezone.utc), 'commenter': 'lpranam', 'type': 'User'}, {'comment_id': 447110367, 'comment_body': 'could use `interleaved_view` maybe?', 'comment_created': datetime.datetime(2020, 6, 29, 16, 46, 10, tzinfo=datetime.timezone.utc), 'commenter': 'lpranam', 'type': 'User'}, {'comment_id': 447110703, 'comment_body': 'missing end line', 'comment_created': datetime.datetime(2020, 6, 29, 16, 46, 44, tzinfo=datetime.timezone.utc), 'commenter': 'lpranam', 'type': 'User'}, {'comment_id': 447110929, 'comment_body': 'missing end line', 'comment_created': datetime.datetime(2020, 6, 29, 16, 47, 8, tzinfo=datetime.timezone.utc), 'commenter': 'lpranam', 'type': 'User'}, {'comment_id': 447117105, 'comment_body': 'missing end line', 'comment_created': datetime.datetime(2020, 6, 29, 16, 57, 12, tzinfo=datetime.timezone.utc), 'commenter': 'lpranam', 'type': 'User'}, {'comment_id': 447118049, 'comment_body': 'missing end line', 'comment_created': datetime.datetime(2020, 6, 29, 16, 58, 31, tzinfo=datetime.timezone.utc), 'commenter': 'lpranam', 'type': 'User'}, {'comment_id': 447118272, 'comment_body': 'missing end line', 'comment_created': datetime.datetime(2020, 6, 29, 16, 58, 53, tzinfo=datetime.timezone.utc), 'commenter': 'lpranam', 'type': 'User'}, {'comment_id': 447118428, 'comment_body': 'missing end line', 'comment_created': datetime.datetime(2020, 6, 29, 16, 59, 6, tzinfo=datetime.timezone.utc), 'commenter': 'lpranam', 'type': 'User'}, {'comment_id': 453189945, 'comment_body': 'though you have changed the entire file, but it still the same file you can not remove the copyright.', 'comment_created': datetime.datetime(2020, 7, 11, 12, 24, 26, tzinfo=datetime.timezone.utc), 'commenter': 'lpranam', 'type': 'User'}, {'comment_id': 453203793, 'comment_body': 'nitpicking: remove the additional space before `=`', 'comment_created': datetime.datetime(2020, 7, 11, 15, 8, 47, tzinfo=datetime.timezone.utc), 'commenter': 'lpranam', 'type': 'User'}, {'comment_id': 453209088, 'comment_body': 'The previous histogram.cpp got renamed to tutorial_histogram.cpp. I will add the copyright otherwise if needed.\r\n', 'comment_created': datetime.datetime(2020, 7, 11, 16, 6, 16, tzinfo=datetime.timezone.utc), 'commenter': 'codejaeger', 'type': 'User'}, {'comment_id': 453209602, 'comment_body': 'I think it got added when I used clang-format, maybe to keep the equal signs in line 473 and 474 at the same position. This has been done in many other places also I think.', 'comment_created': datetime.datetime(2020, 7, 11, 16, 12, 18, tzinfo=datetime.timezone.utc), 'commenter': 'codejaeger', 'type': 'User'}, {'comment_id': 460558206, 'comment_body': ""Yes, I think I was suggesting that renaming and to sum it up\r\n- `histogram.cpp` is @codejaeger 's new example\r\n- `tutorial_histogram.cpp` is the old one"", 'comment_created': datetime.datetime(2020, 7, 26, 18, 24, 45, tzinfo=datetime.timezone.utc), 'commenter': 'mloskot', 'type': 'User'}, {'comment_id': 562953256, 'comment_body': '@codejaeger Which clang-format configuration file did you use?', 'comment_created': datetime.datetime(2021, 1, 22, 22, 36, 55, tzinfo=datetime.timezone.utc), 'commenter': 'mloskot', 'type': 'User'}, {'comment_id': 563196909, 'comment_body': '@mloskot I believe I had used the one linked below:\r\n[https://github.com/boostorg/gil/blob/develop/example/clang-format/.clang-format](https://github.com/boostorg/gil/blob/develop/example/clang-format/.clang-format)', 'comment_created': datetime.datetime(2021, 1, 23, 20, 40, 24, tzinfo=datetime.timezone.utc), 'commenter': 'codejaeger', 'type': 'User'}]","[{'commit_sha': '6f9be17670bdbcdaaef24b6ac9d071b50816eb5c', 'committer_username': 'codejaeger', 'committer_name': 'Debabrata Mandal', 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 21, 13, 50, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1912366939be8c9fadb0295a062288d3e7d367dc', 'committer_username': 'codejaeger', 'committer_name': 'Debabrata Mandal', 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 21, 13, 50, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cb69be71fdc402d2a64d73cdbd50f1ca3b00e8a7', 'committer_username': 'codejaeger', 'committer_name': 'Debabrata Mandal', 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 21, 13, 50, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f043750487c8e41fe486799c4dec483a83ede70d', 'committer_username': 'codejaeger', 'committer_name': 'Debabrata Mandal', 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 21, 13, 50, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5f24786d384cc7817b68280f2e7b828567122766', 'committer_username': 'codejaeger', 'committer_name': 'Debabrata Mandal', 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 21, 13, 50, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'deb9f0f895f21f7f6e75da9f71f39d6361091808', 'committer_username': 'codejaeger', 'committer_name': 'Debabrata Mandal', 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 21, 13, 50, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9580792c09d68b4c12464186981a48320e028d1d', 'committer_username': 'codejaeger', 'committer_name': 'Debabrata Mandal', 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 21, 13, 50, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4606a17d99101afa00a559aee1f6951985a03869', 'committer_username': 'codejaeger', 'committer_name': 'Debabrata Mandal', 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 21, 13, 50, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0631223dc4dd236968606e747b5e75adf5395c51', 'committer_username': 'codejaeger', 'committer_name': 'Debabrata Mandal', 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 21, 13, 50, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '10c2faf3b03e3a6ea32f88113de79fdbfddfe83f', 'committer_username': 'codejaeger', 'committer_name': 'Debabrata Mandal', 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 21, 13, 50, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6160b67e1d966d01f964b2ddbf9a70e78a26fa0c', 'committer_username': 'codejaeger', 'committer_name': 'Debabrata Mandal', 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 21, 13, 50, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '795760fbeb2bfc279c3c5ce66061e8614da2b9e9', 'committer_username': 'codejaeger', 'committer_name': 'Debabrata Mandal', 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 21, 13, 50, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c332397ea2e37288d30666433f10bced658179f1', 'committer_username': 'codejaeger', 'committer_name': 'Debabrata Mandal', 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 21, 13, 50, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'de90ff6f49dfc4959a827c6644a2585431fe4a67', 'committer_username': 'codejaeger', 'committer_name': 'Debabrata Mandal', 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 21, 13, 50, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '771d3448b3f2936f08b2dee0f44eea5865e60ce2', 'committer_username': 'codejaeger', 'committer_name': 'Debabrata Mandal', 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 21, 13, 50, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '28bf4ecf0046698fc98a3cae376425455dbc2eb5', 'committer_username': 'codejaeger', 'committer_name': 'Debabrata Mandal', 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 21, 13, 50, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '043c3e1345b31f2444e34e0ed682079f7860751b', 'committer_username': 'codejaeger', 'committer_name': 'Debabrata Mandal', 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 21, 13, 50, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '06bccfe840207e417bbd920e13f908a9563a1f87', 'committer_username': 'codejaeger', 'committer_name': 'Debabrata Mandal', 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 21, 13, 50, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ace3e716214c7c7895ce4388667b30ad2f9d77d7', 'committer_username': 'codejaeger', 'committer_name': 'Debabrata Mandal', 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 21, 13, 50, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '90dd9e263d902b4bf62cf42a51b70aaf8f82b9ca', 'committer_username': 'codejaeger', 'committer_name': 'Debabrata Mandal', 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 21, 13, 50, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '42b76979d6d35b326f5ec2f6bd983ef698ae5440', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '3fa023fac1f62c77e756945414ae4781c7e12087', 'committer_username': 'codejaeger', 'committer_name': 'Debabrata Mandal', 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 21, 13, 50, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd24b725ab089083dde1882991d785c308dcb723a', 'committer_username': 'codejaeger', 'committer_name': 'Debabrata Mandal', 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 21, 13, 50, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '68d210986c315356f004e50948027eae78bc0a76', 'committer_username': 'codejaeger', 'committer_name': 'Debabrata Mandal', 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 21, 13, 50, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '678923202e65a7fc10669c4ad4fbb8f1320ba6ab', 'committer_username': 'codejaeger', 'committer_name': 'Debabrata Mandal', 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 21, 13, 50, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5f10c81f23c152bf22d8187e35bcce07a9bf8828', 'committer_username': 'codejaeger', 'committer_name': 'Debabrata Mandal', 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 21, 13, 50, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8c2280036364e264aa061cea75d58f757f165fe3', 'committer_username': 'codejaeger', 'committer_name': 'Debabrata Mandal', 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 21, 13, 50, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '897778db5869e253e7b6cea0d978dc9f9f4927a6', 'committer_username': 'codejaeger', 'committer_name': 'Debabrata Mandal', 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 21, 13, 50, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e9e8ce60549f3a475d5c418489b062ba7d3c5edc', 'committer_username': 'codejaeger', 'committer_name': 'Debabrata Mandal', 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 21, 13, 50, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '43562e19e5969ebf3d9d613fe993f13f710ecdcd', 'committer_username': 'codejaeger', 'committer_name': 'Debabrata Mandal', 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 21, 13, 50, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c8330a75b74730926981667283bef0ed6f8b5cf3', 'committer_username': 'codejaeger', 'committer_name': 'Debabrata Mandal', 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 21, 13, 50, 49, tzinfo=datetime.timezone.utc)}]",Debabrata Mandal,32168969,,User,,57,,53,9
440792741,Add docs for histogram,"<!-- Pull Requests MUST come from topic branch based on develop, and NEVER on `master) --->

### Description

<!-- What does this pull request do? -->

Add documentation for the histogram functionality provided in PR #499 .

### References

<!-- Any links related to this PR: issues, other PRs, mailing list threads, StackOverflow questions, etc. -->

- Blocked by #499

### Tasklist

<!-- Add YOUR OWN TASK(s), especially if your PR is a work in progress -->

- [x] Add test case(s)
- [x] Ensure all CI builds pass - RIP Travis CI, replaced with GitHub Actions
- [ ] Review and approve
",True,503,https://api.github.com/repos/boostorg/gil/pulls/503,https://github.com/boostorg/gil/pull/503,closed,493,0,17,10,2,17,2,0,"[{'name': 'cat/documentation'}, {'name': 'google-summer-of-code'}]",2020-06-26 21:24:47+00:00,2021-03-24 20:19:06+00:00,23410459.0,"270 days, 22:54:19","[{'comment_id': 460564927, 'comment_body': 'It would be good to indicate what distinguishes the Method 1 from 2:\r\n\r\n```\r\n- to create the histogram \r\n+ to create and fill the histogram based on the frequency of luminance in given image\r\n```', 'comment_created': datetime.datetime(2020, 7, 26, 19, 35, 51, tzinfo=datetime.timezone.utc), 'commenter': 'mloskot', 'type': 'User'}, {'comment_id': 460564964, 'comment_body': 'Please, use reStructuredText double backticks to indicate inline code or variable names in a sentence \r\n```\r\n\r\n- *image*\r\n+ ``image``\r\n```\r\n', 'comment_created': datetime.datetime(2020, 7, 26, 19, 36, 35, tzinfo=datetime.timezone.utc), 'commenter': 'mloskot', 'type': 'User'}, {'comment_id': 460565543, 'comment_body': ""Although most people should understand what you mean by\r\n> A cumulative histogram is exactly what it sounds like.\r\nI'm not sure if this is a suitable expression.\r\n\r\nI'd either remove this sentence and assume a reader is familiar notion of 'cumulative histogram' or provide clear explanation, for example:\r\n\r\n>  A cumulative histogram is a histogram where, each bin of given axis stores the counts for that bin plus all bins for smaller values (frequencies) along the given axis."", 'comment_created': datetime.datetime(2020, 7, 26, 19, 42, 30, tzinfo=datetime.timezone.utc), 'commenter': 'mloskot', 'type': 'User'}, {'comment_id': 460565669, 'comment_body': 'Nitpicking:\r\n\r\n> by the standard\r\n\r\nWhat standard? :-)', 'comment_created': datetime.datetime(2020, 7, 26, 19, 43, 58, tzinfo=datetime.timezone.utc), 'commenter': 'mloskot', 'type': 'User'}, {'comment_id': 460566130, 'comment_body': ""For example, let's consider..."", 'comment_created': datetime.datetime(2020, 7, 26, 19, 48, 55, tzinfo=datetime.timezone.utc), 'commenter': 'mloskot', 'type': 'User'}, {'comment_id': 460566227, 'comment_body': 'Nitpickign: A more C++11-thy code :)\r\n\r\n```cpp\r\nint a{0};\r\nTest() = default;\r\nTest(int c) : a(c) {}\r\n```', 'comment_created': datetime.datetime(2020, 7, 26, 19, 49, 41, tzinfo=datetime.timezone.utc), 'commenter': 'mloskot', 'type': 'User'}, {'comment_id': 460566293, 'comment_body': '```\r\n- to the main code.\r\n+ to the usage example.\r\n```', 'comment_created': datetime.datetime(2020, 7, 26, 19, 50, 24, tzinfo=datetime.timezone.utc), 'commenter': 'mloskot', 'type': 'User'}, {'comment_id': 460566517, 'comment_body': 'Perhaps this reads better:\r\n\r\n```\r\n- filling and getting in data into the histogram\r\n+ filling instance of `histogram` class with values\r\n```', 'comment_created': datetime.datetime(2020, 7, 26, 19, 52, 49, tzinfo=datetime.timezone.utc), 'commenter': 'mloskot', 'type': 'User'}, {'comment_id': 460567531, 'comment_body': ""I do not like the idea of storing 7MB files in GIL's repo.\r\nUnfortunately, I can not offer an ideal alternative yet.\r\n\r\nI'd suggest a temporary solution:\r\n1. Remove the images from this PR\r\n2. Paste the images as comments to this PR\r\n3. Replace filename with URLs from GitHub\r\n\r\n```\r\n.. figure:: https://user-images.githubusercontent.com/12345/12811123-3877a980-8375-11ea-9960-1b88a3f9f87b.png\r\n...\r\n```\r\n\r\nThe thing is, once we start adding big binary files to Git repo, then even if we find an optimal solution for hosting images for docs, we will not be able to get rid of them easily, from Git history.\r\n\r\nI have (slowly) started collecting externally hosted test images in dedicated repo https://github.com/boost-gil/test-images, so I perhaps we could have `examples/` folder there and link from docs to there.\r\n\r\nWhat do you think @lpranam ?"", 'comment_created': datetime.datetime(2020, 7, 26, 20, 4, 16, tzinfo=datetime.timezone.utc), 'commenter': 'mloskot', 'type': 'User'}, {'comment_id': 461757419, 'comment_body': ""In my opinion, in docs we don't have to use the full-size images. Docs just need to demonstrate what our algorithms can do and do not need to show the exact accurate images, we can use highly compressed and small resolution images in docs. Otherwise what @mloskot suggested the great. I have no other objections regarding this PR."", 'comment_created': datetime.datetime(2020, 7, 28, 17, 39, 53, tzinfo=datetime.timezone.utc), 'commenter': 'lpranam', 'type': 'User'}, {'comment_id': 463507846, 'comment_body': ""> @codejaeger Well done! It's great to see GSoC features covered with documentation :-) I'm happy to approve this PR.\r\n> \r\n\r\nThanks a lot @mloskot : )  \r\n\r\n> I'd suggest we merge it **after** we merge PR #499.\r\n> Next time you may prefer to stick docs in the same PR as implementation and tests.\r\n\r\nYes sure. Also this PR contains docs for the algorithm histogram equalization. I haven't pushed it yet since the histogram class is a dependency for it. Should I remove the docs for the algorithm?"", 'comment_created': datetime.datetime(2020, 7, 31, 9, 33, 11, tzinfo=datetime.timezone.utc), 'commenter': 'codejaeger', 'type': 'User'}, {'comment_id': 463508794, 'comment_body': 'I have compressed the images, they now occupy about 34 KB and 24 KB. I can also do what @mloskot suggested if needed.', 'comment_created': datetime.datetime(2020, 7, 31, 9, 35, 15, tzinfo=datetime.timezone.utc), 'commenter': 'codejaeger', 'type': 'User'}, {'comment_id': 463568444, 'comment_body': 'though it is compressed for doc would be great to add real one on that repo so we can have those images for later.', 'comment_created': datetime.datetime(2020, 7, 31, 11, 58, 34, tzinfo=datetime.timezone.utc), 'commenter': 'lpranam', 'type': 'User'}, {'comment_id': 464546262, 'comment_body': '@codejaeger If you want to try the idea outlined earlier, you should have now the write access to https://github.com/boost-gil/test-images Feel free to create `doc/` directory (and any necessary subfolders) and put your images in there.', 'comment_created': datetime.datetime(2020, 8, 3, 17, 10, 25, tzinfo=datetime.timezone.utc), 'commenter': 'mloskot', 'type': 'User'}, {'comment_id': 563343287, 'comment_body': '@codejaeger Could you add full size/resolution images to the `test-images` repo as @lpranam suggested?', 'comment_created': datetime.datetime(2021, 1, 24, 20, 12, 22, tzinfo=datetime.timezone.utc), 'commenter': 'mloskot', 'type': 'User'}, {'comment_id': 600314157, 'comment_body': '@codejaeger Ping ☝️ ', 'comment_created': datetime.datetime(2021, 3, 24, 9, 38, 55, tzinfo=datetime.timezone.utc), 'commenter': 'mloskot', 'type': 'User'}, {'comment_id': 600460176, 'comment_body': 'Yep doing it. Thanks for the reminder, sorry I had totally forgotten about it. ', 'comment_created': datetime.datetime(2021, 3, 24, 13, 8, 50, tzinfo=datetime.timezone.utc), 'commenter': 'codejaeger', 'type': 'User'}]","[{'commit_sha': 'b3a453da177813235633f7026b055415420614a7', 'committer_username': 'codejaeger', 'committer_name': 'Debabrata Mandal', 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 21, 13, 50, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7da2aa42dd9c5a64ac0b1c400c805053770ba851', 'committer_username': 'codejaeger', 'committer_name': 'Debabrata Mandal', 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 21, 13, 50, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3739b436e6884597676b5becc88daa75e04c29e0', 'committer_username': 'codejaeger', 'committer_name': 'Debabrata Mandal', 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 21, 13, 50, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd7233a66eb105b2f195ce7836db0b130fa43d67e', 'committer_username': 'codejaeger', 'committer_name': 'Debabrata Mandal', 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 21, 13, 50, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '909dd8308110e1914503af20fd83bd30615a9968', 'committer_username': 'codejaeger', 'committer_name': 'Debabrata Mandal', 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 21, 13, 50, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '79ca82f53202bf66eb99ab56917547c72df190cf', 'committer_username': 'codejaeger', 'committer_name': 'Debabrata Mandal', 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 21, 13, 50, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f96499974229b227c17cd6b06827fbc3000494ef', 'committer_username': 'codejaeger', 'committer_name': 'Debabrata Mandal', 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 21, 13, 50, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2fd0812de25f910d8f1a6adc7baea418b0ca8f53', 'committer_username': 'codejaeger', 'committer_name': 'Debabrata Mandal', 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 21, 13, 50, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '26d1d730c51b20b60a023fd2d528b6c28d15ca60', 'committer_username': 'mloskot', 'committer_name': 'Mateusz Łoskot', 'committer_email': 'mateusz@loskot.net', 'commit_date': datetime.datetime(2009, 5, 4, 12, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b09a0c245adf1b3d16c55e9d408029e7aaf5d8c6', 'committer_username': 'codejaeger', 'committer_name': 'Debabrata Mandal', 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 21, 13, 50, 49, tzinfo=datetime.timezone.utc)}]",Debabrata Mandal,32168969,,User,,57,,53,9
472554563,Add histogram equalization feature,"<!-- Pull Requests MUST come from topic branch based on develop, and NEVER on `master) --->

### Description

Histogram equalization is an important contrast enhancement algorithm. It is an application of histograms to contrast stretch images.

<!-- What does this pull request do? -->

Contains code, tests, example and doc for the algorithm global histogram equalization started during GSOC'2020.
The code has been tested on variety of standard test images to find any noticeable errors. A comparison with implementations from other image processing libraries has also been made.

### Dependency

This PR requires support of GIL histogram class currently running in PR #499 . Reviewing and merging can only be done post completion of former PRs.

### References

Wiki - https://en.wikipedia.org/wiki/Histogram_equalization

<!-- Any links related to this PR: issues, other PRs, mailing list threads, StackOverflow questions, etc. -->

Related PRs - #435, #442

### Tasklist

<!-- Add YOUR OWN TASK(s), especially if your PR is a work in progress -->

- [x] Add test case(s)
- [x] Ensure all CI builds pass - R.I.P. Travis CI
- [x] Review and approve
",True,514,https://api.github.com/repos/boostorg/gil/pulls/514,https://github.com/boostorg/gil/pull/514,closed,550,0,7,5,2,0,2,0,"[{'name': 'cat/feature'}, {'name': 'google-summer-of-code'}]",2020-08-24 14:21:15+00:00,2021-01-24 20:32:40+00:00,13241485.0,"153 days, 6:11:25",[],"[{'commit_sha': 'cb6e86ac9c57bee95a5269152377245724754f3d', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '36b9c079c60cf40a1a052c1a517804602475fbe2', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'e6444d5cf36add14a6f6a0a23bd7f6bbbd3000a5', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '4644d833d761fb77a9952656508fd09685e736e6', 'committer_username': 'codejaeger', 'committer_name': 'Debabrata Mandal', 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 21, 13, 50, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cfcec68c71ffb00669d7ae19cfe2fa93b2439b54', 'committer_username': 'mloskot', 'committer_name': 'Mateusz Łoskot', 'committer_email': 'mateusz@loskot.net', 'commit_date': datetime.datetime(2009, 5, 4, 12, 1, tzinfo=datetime.timezone.utc)}]",Debabrata Mandal,32168969,,User,,57,,53,9
472632167,Add histogram matching algorithm,"<!-- Pull Requests MUST come from topic branch based on develop, and NEVER on `master) --->

### Description

Histogram matching is a generalised version of the algorithm histogram equalization. 
It aims to match the histogram obtained from one input image to another reference image, transforming the input image in the process.
 
<!-- What does this pull request do? -->

This PR adds code, tests, doc & an example to use the histogram matching feature implemented. 

### Dependency

This PR requires support of GIL histogram class currently running in PR #499. Reviewing and merging can only be done after completion of the former PR.

### References

<!-- Any links related to this PR: issues, other PRs, mailing list threads, StackOverflow questions, etc. -->

Wiki - https://en.wikipedia.org/wiki/Histogram_matching
Related PR - #442

### Tasklist

<!-- Add YOUR OWN TASK(s), especially if your PR is a work in progress -->

- [x] Add test case(s)
- [x] Ensure all CI builds pass - R.I.P. Travis CI
- [x] Review and approve
",True,515,https://api.github.com/repos/boostorg/gil/pulls/515,https://github.com/boostorg/gil/pull/515,closed,475,0,6,4,1,0,2,0,"[{'name': 'cat/feature'}, {'name': 'google-summer-of-code'}]",2020-08-24 16:30:44+00:00,2021-01-24 20:33:39+00:00,13233775.0,"153 days, 4:02:55",[],"[{'commit_sha': '0e7ae1ec0887a76f6ea865b7ed388c0e26a7ebbf', 'committer_username': 'codejaeger', 'committer_name': 'Debabrata Mandal', 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 21, 13, 50, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '286d6190f9ecda3efe7e60f9f9cab3199f41dc2a', 'committer_username': 'codejaeger', 'committer_name': 'Debabrata Mandal', 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 21, 13, 50, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6bc27adfb24d63b962b82f1a0bd90d9cdd30ef8e', 'committer_username': 'codejaeger', 'committer_name': 'Debabrata Mandal', 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 21, 13, 50, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9de246d283dc469c363978b1d6d009c118bde750', 'committer_username': 'mloskot', 'committer_name': 'Mateusz Łoskot', 'committer_email': 'mateusz@loskot.net', 'commit_date': datetime.datetime(2009, 5, 4, 12, 1, tzinfo=datetime.timezone.utc)}]",Debabrata Mandal,32168969,,User,,57,,53,9
472678998,Add adaptive histogram equalization algorithm,"<!-- Pull Requests MUST come from topic branch based on develop, and NEVER on `master) --->

### Description

Adaptive histogram equalization(AHE) is used in cases when histogram equalization cannot properly contrast enhance due to the presence of both very bright and very dark regions.
AHE brings out the local information in an image by dividing the image into tiles and then individually performs HE on each of them. Later to remove tiling artefacts  a bi-linear interpolation is performed using mappings from the adjacent tiles. Finally to suppress noise, use contrast clipping to limit the #pixels of a particular value.

This PR adds code, tests & an example to show how to use the GIL AHE algorithm.

### Dependency

This PR requires support of GIL histogram class and the global HE algorithm currently running in PR #499 & PR #514 respectively . Reviewing and merging can only be done post completion of former PRs.

<!-- What does this pull request do? -->

### References

1. [Graphics Gems 4 - Paul S. Heckbert](http://cas.xav.free.fr/Graphics%20Gems%204%20-%20Paul%20S.%20Heckbert.pdf) Pg. 474
2. [Adaptive Histogram Equalization and its Variations](http://www.cs.unc.edu/Research/Image/MIDAG/pubs/papers/Adaptive%20Histogram%20Equalization%20and%20Its%20Variations.pdf)
3. Discussion thread on [boost-gil](https://lists.boost.org/boost-gil/2020/08/0454.php) mailing list

<!-- Any links related to this PR: issues, other PRs, mailing list threads, StackOverflow questions, etc. -->

### Tasklist

<!-- Add YOUR OWN TASK(s), especially if your PR is a work in progress -->

- [x] Add test case(s)
- [x] Ensure all CI builds pass - RIP Travis CI
- [x] Review and approve
",True,516,https://api.github.com/repos/boostorg/gil/pulls/516,https://github.com/boostorg/gil/pull/516,closed,445,0,3,3,1,0,2,0,"[{'name': 'cat/feature'}, {'name': 'google-summer-of-code'}]",2020-08-24 18:03:56+00:00,2021-01-24 22:22:49+00:00,13234733.0,"153 days, 4:18:53",[],"[{'commit_sha': '6aeffec8785b14fffa068709e2acd640b32d5489', 'committer_username': 'codejaeger', 'committer_name': 'Debabrata Mandal', 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 21, 13, 50, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5ad6f43cfdf643722cc658243a65a610ac5cb911', 'committer_username': 'mloskot', 'committer_name': 'Mateusz Łoskot', 'committer_email': 'mateusz@loskot.net', 'commit_date': datetime.datetime(2009, 5, 4, 12, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c0ce60d317383519f95576095376b913062135e9', 'committer_username': 'mloskot', 'committer_name': 'Mateusz Łoskot', 'committer_email': 'mateusz@loskot.net', 'commit_date': datetime.datetime(2009, 5, 4, 12, 1, tzinfo=datetime.timezone.utc)}]",Debabrata Mandal,32168969,,User,,57,,53,9

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
7590006,gil,boostorg/gil,C++,165,177,18,68,1144,103,6,30,"[{'id': 599716382, 'number': 586, 'closed': datetime.datetime(2021, 3, 24, 20, 20, 12, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 3, 24, 13, 59, 45, tzinfo=datetime.timezone.utc), 'time_taken': 22827.0, 'time_delta': '6:20:27', 'additions': 4, 'deletions': 4, 'state': 'closed'}, {'id': 546586315, 'number': 532, 'closed': datetime.datetime(2021, 1, 4, 18, 47, 2, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 12, 29, 18, 14, 54, tzinfo=datetime.timezone.utc), 'time_taken': 520328.0, 'time_delta': '6 days, 0:32:08', 'additions': 23, 'deletions': 0, 'state': 'closed'}, {'id': 472678998, 'number': 516, 'closed': datetime.datetime(2021, 1, 24, 22, 22, 49, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 24, 18, 3, 56, tzinfo=datetime.timezone.utc), 'time_taken': 13234733.0, 'time_delta': '153 days, 4:18:53', 'additions': 445, 'deletions': 0, 'state': 'closed'}, {'id': 472632167, 'number': 515, 'closed': datetime.datetime(2021, 1, 24, 20, 33, 39, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 24, 16, 30, 44, tzinfo=datetime.timezone.utc), 'time_taken': 13233775.0, 'time_delta': '153 days, 4:02:55', 'additions': 475, 'deletions': 0, 'state': 'closed'}, {'id': 472554563, 'number': 514, 'closed': datetime.datetime(2021, 1, 24, 20, 32, 40, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 24, 14, 21, 15, tzinfo=datetime.timezone.utc), 'time_taken': 13241485.0, 'time_delta': '153 days, 6:11:25', 'additions': 550, 'deletions': 0, 'state': 'closed'}, {'id': 440792741, 'number': 503, 'closed': datetime.datetime(2021, 3, 24, 20, 19, 6, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 26, 21, 24, 47, tzinfo=datetime.timezone.utc), 'time_taken': 23410459.0, 'time_delta': '270 days, 22:54:19', 'additions': 493, 'deletions': 0, 'state': 'closed'}, {'id': 425361555, 'number': 499, 'closed': datetime.datetime(2021, 1, 23, 23, 2, 51, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 5, 29, 22, 33, 38, tzinfo=datetime.timezone.utc), 'time_taken': 20651353.0, 'time_delta': '239 days, 0:29:13', 'additions': 2244, 'deletions': 34, 'state': 'closed'}, {'id': 416818831, 'number': 494, 'closed': datetime.datetime(2020, 5, 20, 19, 44, 55, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 5, 12, 15, 57, 42, tzinfo=datetime.timezone.utc), 'time_taken': 704833.0, 'time_delta': '8 days, 3:47:13', 'additions': 4, 'deletions': 4, 'state': 'closed'}, {'id': 384199889, 'number': 441, 'closed': datetime.datetime(2020, 3, 10, 18, 46, 5, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 3, 5, 10, 44, 33, tzinfo=datetime.timezone.utc), 'time_taken': 460892.0, 'time_delta': '5 days, 8:01:32', 'additions': 13, 'deletions': 16, 'state': 'closed'}, {'id': 383772240, 'number': 440, 'closed': datetime.datetime(2020, 3, 4, 18, 34, 8, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 3, 4, 18, 32, 15, tzinfo=datetime.timezone.utc), 'time_taken': 113.0, 'time_delta': '0:01:53', 'additions': 2, 'deletions': 2, 'state': 'closed'}, {'id': 377031518, 'number': 435, 'closed': datetime.datetime(2020, 8, 25, 17, 37, 26, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 2, 19, 8, 31, 29, tzinfo=datetime.timezone.utc), 'time_taken': 16275957.0, 'time_delta': '188 days, 9:05:57', 'additions': 320, 'deletions': 0, 'state': 'closed'}]"
