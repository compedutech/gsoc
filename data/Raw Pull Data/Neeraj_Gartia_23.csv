pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
964973737,"removed ""saslmechanisms"" library dependency","**This PR resolves #73 .**

**Task**

- Remove saslmechanisms npm library dependency from the source code.

Currently, the client has saslmechanisms library dependency.

**Implementation**

- Removed the saslmechanisms dependency from package.json and imported its source code to the project. which is located in [sasl](https://github.com/infinispan/js-client/tree/main/lib/sasl) directory.
",True,76,https://api.github.com/repos/infinispan/js-client/pulls/76,https://github.com/infinispan/js-client/pull/76,closed,73,3,3,1,2,0,0,0,[],2022-06-12 11:03:31+00:00,2022-06-13 16:07:30+00:00,104639.0,"1 day, 5:03:59",[],"[{'commit_sha': 'd156aa68a86a806b2526e766e56048ea70362e16', 'committer_username': 'NeerajGartia21', 'committer_name': 'Neeraj Gartia', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 15, 17, 13, 38, tzinfo=datetime.timezone.utc)}]",Neeraj Gartia,80708727,,User,,34,,20,9
975422019,Implemented PING v3.0 operation.,"**This is the PR for the issue #74**
Currently client supports 2.9 hotrod protocol.

**Task of this PR**

- Implement PING operation v3.0 so client can work with hotrod 3.0 protocol

Version 3.0 extends PING operation response with additional information:

- the Hotrod server version
- the list of the Hotrod operations supported by the server

So implementing PING v3.0 will make the client compatible with  [Hotrod 3.0](https://infinispan.org/docs/stable/titles/hotrod_protocol/hotrod_protocol.html#hot_rod_protocol_3_0) protocol.

**Implementation:**

- Added option for the user to switch to protocol 3.0.
- added a decoder function for the ping response (i.e. added decodePingResponse reusing the decodeServerMediatypes function).",True,79,https://api.github.com/repos/infinispan/js-client/pulls/79,https://github.com/infinispan/js-client/pull/79,closed,58,3,3,4,0,3,1,0,[{'name': 'GSoC'}],2022-06-22 16:34:34+00:00,2022-07-08 13:43:23+00:00,1372129.0,"15 days, 21:08:49","[{'comment_id': 910207013, 'comment_body': 'If I get this correctly, this sets an assumption that protocol is 3.0 if we have more bytes', 'comment_created': datetime.datetime(2022, 6, 29, 17, 2, 27, tzinfo=datetime.timezone.utc), 'commenter': 'rigazilla', 'type': 'User'}, {'comment_id': 911029649, 'comment_body': 'Yeah this is making an assumption that protocol is >=3.0. but I guess here `version` is the maximum supported protocol version of the server.', 'comment_created': datetime.datetime(2022, 6, 30, 13, 29, 59, tzinfo=datetime.timezone.utc), 'commenter': 'NeerajGartia21', 'type': 'User'}, {'comment_id': 914881712, 'comment_body': ""I don't think we need to define decodePingResponse for protocol 22 and 25. \r\nWe should keep the current behavior, check on the main branch: `decodeServerMediaTypes` is undefined for 22/25 (see noMediaTypesMixin), then a check it's performed in [decodeBody](https://github.com/infinispan/js-client/blob/f7065100ed32d3983d8e67ed5f06fafc95295dc6/lib/protocols.js#L353) and the decode process terminates if decoder is undefined"", 'comment_created': datetime.datetime(2022, 7, 6, 14, 4, 23, tzinfo=datetime.timezone.utc), 'commenter': 'rigazilla', 'type': 'User'}]","[{'commit_sha': 'a9516bc52e1199993f54ef8f6c2b00d583466bb9', 'committer_username': 'NeerajGartia21', 'committer_name': 'Neeraj Gartia', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 15, 17, 13, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e39acf24cad775ee002323ff69cab666f61d7716', 'committer_username': 'NeerajGartia21', 'committer_name': 'Neeraj Gartia', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 15, 17, 13, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ff5954e077add729c44397b7d1dc10e374cc1a21', 'committer_username': 'NeerajGartia21', 'committer_name': 'Neeraj Gartia', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 15, 17, 13, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '84ae04c9043b2b1127b4d6ba3fe495d29bf6b416', 'committer_username': 'NeerajGartia21', 'committer_name': 'Neeraj Gartia', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 15, 17, 13, 38, tzinfo=datetime.timezone.utc)}]",Neeraj Gartia,80708727,,User,,34,,20,9
1013084243,Implemented protobuf messages encoding functionality,"**This is a follow-up PR of #82 .**

The proposed design for put operation in application/x-protostream mediatype is as follows:

1. register the protobuf schema using the registerProtostream function i.e.
` client.registerProtostreamType('.awesomepackage.AwesomeMessages',1000042);`
2. Encode the message object using the protobuf schema. i.e
 ` var encoded=root.encode(message)`
3. call the put method by providing the encoded message object as the argument. i.e.
 ` client.put(encoded)`

PUT operation on the client can be used by following above steps.

In this PR the functionality of the PUT operation is added. So now PUT operation can be used using application/x-protostream as mediatype.

**Next task**

1. Implement decodeProtobuf for GET operation.
2. Add unit tests for the new features.
",True,83,https://api.github.com/repos/infinispan/js-client/pulls/83,https://github.com/infinispan/js-client/pull/83,closed,1563,17,8,7,4,2,1,0,[{'name': 'GSoC'}],2022-07-31 17:59:49+00:00,2022-08-04 11:03:31+00:00,320622.0,"3 days, 17:03:42","[{'comment_id': 934317285, 'comment_body': 'Will the `message-wrapping.proto` file be shipped with the library? I mean are we sure that the `loadSync` will find it the lib will be installed on the user side?', 'comment_created': datetime.datetime(2022, 8, 1, 9, 20, 19, tzinfo=datetime.timezone.utc), 'commenter': 'rigazilla', 'type': 'User'}, {'comment_id': 934323077, 'comment_body': 'I think it will because the path of the file is not relative. Also I have tested it.', 'comment_created': datetime.datetime(2022, 8, 1, 9, 25, 58, tzinfo=datetime.timezone.utc), 'commenter': 'NeerajGartia21', 'type': 'User'}]","[{'commit_sha': 'fd4191ef5aecc42e8840de4fbf7adba737f629fd', 'committer_username': 'NeerajGartia21', 'committer_name': 'Neeraj Gartia', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 15, 17, 13, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c8efafb19d136d8dbd73aa818bdbaa5fe0443bec', 'committer_username': 'rigazilla', 'committer_name': 'Vittorio Rigamonti', 'committer_email': None, 'commit_date': datetime.datetime(2014, 3, 27, 12, 1, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f5c0469aa5b876b3dd55b0a4a9e00157c9b62edf', 'committer_username': 'rigazilla', 'committer_name': 'Vittorio Rigamonti', 'committer_email': None, 'commit_date': datetime.datetime(2014, 3, 27, 12, 1, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c66d999aa539a3687f101a4e793128d8522c91f2', 'committer_username': 'rigazilla', 'committer_name': 'Vittorio Rigamonti', 'committer_email': None, 'commit_date': datetime.datetime(2014, 3, 27, 12, 1, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': '02a2f5feea05604543b6daef78e11b523884112b', 'committer_username': 'rigazilla', 'committer_name': 'Vittorio Rigamonti', 'committer_email': None, 'commit_date': datetime.datetime(2014, 3, 27, 12, 1, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9305e69870c79124dbaa8d874de42e8c687b80ec', 'committer_username': 'rigazilla', 'committer_name': 'Vittorio Rigamonti', 'committer_email': None, 'commit_date': datetime.datetime(2014, 3, 27, 12, 1, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4644194340c92ee40051bb4cf458d9a535d03fd8', 'committer_username': 'rigazilla', 'committer_name': 'Vittorio Rigamonti', 'committer_email': None, 'commit_date': datetime.datetime(2014, 3, 27, 12, 1, 4, tzinfo=datetime.timezone.utc)}]",Neeraj Gartia,80708727,,User,,34,,20,9
1013084243,Implemented protobuf messages encoding functionality,"**This is a follow-up PR of #82 .**

The proposed design for put operation in application/x-protostream mediatype is as follows:

1. register the protobuf schema using the registerProtostream function i.e.
` client.registerProtostreamType('.awesomepackage.AwesomeMessages',1000042);`
2. Encode the message object using the protobuf schema. i.e
 ` var encoded=root.encode(message)`
3. call the put method by providing the encoded message object as the argument. i.e.
 ` client.put(encoded)`

PUT operation on the client can be used by following above steps.

In this PR the functionality of the PUT operation is added. So now PUT operation can be used using application/x-protostream as mediatype.

**Next task**

1. Implement decodeProtobuf for GET operation.
2. Add unit tests for the new features.
",True,83,https://api.github.com/repos/infinispan/js-client/pulls/83,https://github.com/infinispan/js-client/pull/83,closed,1563,17,8,7,4,2,1,0,[{'name': 'GSoC'}],2022-07-31 17:59:49+00:00,2022-08-04 11:03:31+00:00,320622.0,"3 days, 17:03:42","[{'comment_id': 934317285, 'comment_body': 'Will the `message-wrapping.proto` file be shipped with the library? I mean are we sure that the `loadSync` will find it the lib will be installed on the user side?', 'comment_created': datetime.datetime(2022, 8, 1, 9, 20, 19, tzinfo=datetime.timezone.utc), 'commenter': 'rigazilla', 'type': 'User'}, {'comment_id': 934323077, 'comment_body': 'I think it will because the path of the file is not relative. Also I have tested it.', 'comment_created': datetime.datetime(2022, 8, 1, 9, 25, 58, tzinfo=datetime.timezone.utc), 'commenter': 'NeerajGartia21', 'type': 'User'}]","[{'commit_sha': 'fd4191ef5aecc42e8840de4fbf7adba737f629fd', 'committer_username': 'NeerajGartia21', 'committer_name': 'Neeraj Gartia', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 15, 17, 13, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c8efafb19d136d8dbd73aa818bdbaa5fe0443bec', 'committer_username': 'rigazilla', 'committer_name': 'Vittorio Rigamonti', 'committer_email': None, 'commit_date': datetime.datetime(2014, 3, 27, 12, 1, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f5c0469aa5b876b3dd55b0a4a9e00157c9b62edf', 'committer_username': 'rigazilla', 'committer_name': 'Vittorio Rigamonti', 'committer_email': None, 'commit_date': datetime.datetime(2014, 3, 27, 12, 1, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c66d999aa539a3687f101a4e793128d8522c91f2', 'committer_username': 'rigazilla', 'committer_name': 'Vittorio Rigamonti', 'committer_email': None, 'commit_date': datetime.datetime(2014, 3, 27, 12, 1, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': '02a2f5feea05604543b6daef78e11b523884112b', 'committer_username': 'rigazilla', 'committer_name': 'Vittorio Rigamonti', 'committer_email': None, 'commit_date': datetime.datetime(2014, 3, 27, 12, 1, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9305e69870c79124dbaa8d874de42e8c687b80ec', 'committer_username': 'rigazilla', 'committer_name': 'Vittorio Rigamonti', 'committer_email': None, 'commit_date': datetime.datetime(2014, 3, 27, 12, 1, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4644194340c92ee40051bb4cf458d9a535d03fd8', 'committer_username': 'rigazilla', 'committer_name': 'Vittorio Rigamonti', 'committer_email': None, 'commit_date': datetime.datetime(2014, 3, 27, 12, 1, 4, tzinfo=datetime.timezone.utc)}]",Neeraj Gartia,80708727,,User,,34,,20,9
1028108923,code-refactored and added support of basic data types to protobuf encoder and decoder,"**In this PR code is refactored**

Functional programming is a paradigm of building computer programs using expressions and functions without mutating state and data. In the previous two PRs, the code added was only on implementing the new feature(added support of protobuf encoded cache) but the code wasn't written in functional programming style.This PR is based on re-factoring the code in a functional programming paradigm.The protobuf encoder and decoder for shipped to codec for reusability.

 Also till now, basic datatypes are not supported as `mediaTypes` for the cache configured in `application/x-protostream` (only protobuf message instances are supported). This PR extends the protobuf encoder and decoder to support basic datatypes also.

Now `integer, string , character , boolean` can be used as key or values for cache configured with `application/x-protostream`.

Also tests for GET and PUT operations with basic datatypes are included.

**Next task**

- [x] Add query operation without projection. related issue can be found [here](https://github.com/infinispan/js-client/issues/85).",True,88,https://api.github.com/repos/infinispan/js-client/pulls/88,https://github.com/infinispan/js-client/pull/88,closed,108,60,3,5,1,10,1,0,[{'name': 'GSoC'}],2022-08-16 21:47:46+00:00,2022-08-24 18:02:02+00:00,677656.0,"7 days, 20:14:16","[{'comment_id': 947917584, 'comment_body': 'is this used only above? If yes I would avoid a new function', 'comment_created': datetime.datetime(2022, 8, 17, 13, 16, 8, tzinfo=datetime.timezone.utc), 'commenter': 'rigazilla', 'type': 'User'}, {'comment_id': 947954155, 'comment_body': ""Can we move `WrappedMessage` inside `encodeWrappedMessage` since it's only used there?"", 'comment_created': datetime.datetime(2022, 8, 17, 13, 44, 58, tzinfo=datetime.timezone.utc), 'commenter': 'rigazilla', 'type': 'User'}, {'comment_id': 947969942, 'comment_body': 'Not used now but I think it will be used when we will encode basic data types ', 'comment_created': datetime.datetime(2022, 8, 17, 13, 57, 5, tzinfo=datetime.timezone.utc), 'commenter': 'NeerajGartia21', 'type': 'User'}, {'comment_id': 947974988, 'comment_body': 'Yeah, but I think it will also be used in the decodeWrappedMessage function.', 'comment_created': datetime.datetime(2022, 8, 17, 14, 1, 15, tzinfo=datetime.timezone.utc), 'commenter': 'NeerajGartia21', 'type': 'User'}, {'comment_id': 950202719, 'comment_body': 'Ok. Just a detail: I would have avoided the definition of `encode` and `decode` functions. Maybe returning `wrappedMessage` directly?', 'comment_created': datetime.datetime(2022, 8, 19, 13, 40, 53, tzinfo=datetime.timezone.utc), 'commenter': 'rigazilla', 'type': 'User'}, {'comment_id': 950205860, 'comment_body': 'Yes sir. That would be great imo also. I will change that.', 'comment_created': datetime.datetime(2022, 8, 19, 13, 44, 21, tzinfo=datetime.timezone.utc), 'commenter': 'NeerajGartia21', 'type': 'User'}, {'comment_id': 951529146, 'comment_body': 'Is this preferable to `typeId(message.$type.fullName)` ?', 'comment_created': datetime.datetime(2022, 8, 22, 14, 43, 27, tzinfo=datetime.timezone.utc), 'commenter': 'rigazilla', 'type': 'User'}, {'comment_id': 951560776, 'comment_body': ""I don't have such preference. Just wanted to do this in fp so written in that way.\r\nShould I change that?"", 'comment_created': datetime.datetime(2022, 8, 22, 15, 9, 20, tzinfo=datetime.timezone.utc), 'commenter': 'NeerajGartia21', 'type': 'User'}, {'comment_id': 951615399, 'comment_body': 'Why do you consider `.apply`more fp oriented than calling `typeId` directly?\r\nI would say that a direct call to `typeId` is more readable.', 'comment_created': datetime.datetime(2022, 8, 22, 16, 0, 14, tzinfo=datetime.timezone.utc), 'commenter': 'rigazilla', 'type': 'User'}, {'comment_id': 951621058, 'comment_body': 'Ok sir. I will change that.', 'comment_created': datetime.datetime(2022, 8, 22, 16, 6, tzinfo=datetime.timezone.utc), 'commenter': 'NeerajGartia21', 'type': 'User'}]","[{'commit_sha': '4a0d247750f3101f434542b843245f957ceae1cc', 'committer_username': 'NeerajGartia21', 'committer_name': 'Neeraj Gartia', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 15, 17, 13, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1edff1f692296b72175175782426ea22832ad177', 'committer_username': 'NeerajGartia21', 'committer_name': 'Neeraj Gartia', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 15, 17, 13, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e22215a766910b4c2505cda06ce44da54f2be185', 'committer_username': 'NeerajGartia21', 'committer_name': 'Neeraj Gartia', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 15, 17, 13, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8c9128017363e8cf2d58bc5944c0c9169c2270e1', 'committer_username': 'NeerajGartia21', 'committer_name': 'Neeraj Gartia', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 15, 17, 13, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4841cbd56d23607bc8cde92e36b8ffab473b61ab', 'committer_username': 'rigazilla', 'committer_name': 'Vittorio Rigamonti', 'committer_email': None, 'commit_date': datetime.datetime(2014, 3, 27, 12, 1, 4, tzinfo=datetime.timezone.utc)}]",Neeraj Gartia,80708727,,User,,34,,20,9
1036255657,added the support of query in protostream format (without projection),"**This PR resolved issue #85.**

Infinispan lets you query the infinispan server using its query language Ickle. See [here](https://infinispan.org/docs/stable/titles/query/query.html#ickle-queries_ickle-query-language) for more details about Ickle. The implementation of the query can be divided into two pull requests.

1. Query without projection i.e.
   `from sample_bank_account.User u where u.name = ""John""`  
2. Query with projection i.e.
   `select u.name, u.surname, u.age from sample_bank_account.User u where u.age is null`

This consists of the first part. In this PR only query without projection is implemented. Also simple tests are added.

**Next task**

- [x] Add support of query with projection.",True,89,https://api.github.com/repos/infinispan/js-client/pulls/89,https://github.com/infinispan/js-client/pull/89,closed,212,0,5,5,1,5,1,0,[{'name': 'GSoC'}],2022-08-25 05:05:51+00:00,2022-08-26 19:47:32+00:00,139301.0,"1 day, 14:41:41","[{'comment_id': 955265556, 'comment_body': 'IMO it would be great to return an empty Object[] for an empty result set. Wdyt?', 'comment_created': datetime.datetime(2022, 8, 25, 17, 56, 16, tzinfo=datetime.timezone.utc), 'commenter': 'rigazilla', 'type': 'User'}, {'comment_id': 955272154, 'comment_body': 'Yes sir. It will be great!\r\nI will add these changes.', 'comment_created': datetime.datetime(2022, 8, 25, 18, 4, 37, tzinfo=datetime.timezone.utc), 'commenter': 'NeerajGartia21', 'type': 'User'}, {'comment_id': 956279795, 'comment_body': 'why you need JSON?\r\n```suggestion\r\n            expect(queryResp3.length).toEqual(0);\r\n```\r\n', 'comment_created': datetime.datetime(2022, 8, 26, 17, 52, 47, tzinfo=datetime.timezone.utc), 'commenter': 'rigazilla', 'type': 'User'}, {'comment_id': 956280667, 'comment_body': ""better to also a little check on the content\r\n```suggestion\r\n            expect(queryResp2.length).toBe(1);\r\n            expect(queryResp2[0].awesomeField).toEqual('AwesomeString1');\r\n```"", 'comment_created': datetime.datetime(2022, 8, 26, 17, 53, 43, tzinfo=datetime.timezone.utc), 'commenter': 'rigazilla', 'type': 'User'}, {'comment_id': 956307403, 'comment_body': ""I added that for checking empty array of object but didn't change it."", 'comment_created': datetime.datetime(2022, 8, 26, 18, 19, 37, tzinfo=datetime.timezone.utc), 'commenter': 'NeerajGartia21', 'type': 'User'}]","[{'commit_sha': '9551d4dc9b9ca894334431e1b91baf85cf59ab4c', 'committer_username': 'NeerajGartia21', 'committer_name': 'Neeraj Gartia', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 15, 17, 13, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd0cbfeee03114521309e69be507047c70dcd3fb6', 'committer_username': 'NeerajGartia21', 'committer_name': 'Neeraj Gartia', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 15, 17, 13, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f66acbb3e831b3f6c210cb94ca1b039c2834a9b8', 'committer_username': 'NeerajGartia21', 'committer_name': 'Neeraj Gartia', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 15, 17, 13, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '487c0938a8afc0bb1d772842985c892d433759bd', 'committer_username': 'NeerajGartia21', 'committer_name': 'Neeraj Gartia', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 15, 17, 13, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3044e992414166eef54769e57bed9d78e5adb47c', 'committer_username': 'NeerajGartia21', 'committer_name': 'Neeraj Gartia', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 15, 17, 13, 38, tzinfo=datetime.timezone.utc)}]",Neeraj Gartia,80708727,,User,,34,,20,9
1038577287,Added support of query with projection,"**This is a follow-up PR of #89.**

In this PR query with projection is implemented. i.e. now users can use `select u.name, u.surname, u.age from sample_bank_account.User u where u.age is null`.",True,90,https://api.github.com/repos/infinispan/js-client/pulls/90,https://github.com/infinispan/js-client/pull/90,closed,67,5,2,2,2,0,0,0,[],2022-08-27 07:14:22+00:00,2022-08-29 15:18:08+00:00,201826.0,"2 days, 8:03:46",[],"[{'commit_sha': 'e7c37ee0c86a5a165178dfdf19137695d86ee607', 'committer_username': 'NeerajGartia21', 'committer_name': 'Neeraj Gartia', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 15, 17, 13, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd80e999951399dfe5e960ce44a93463e7a8b78bf', 'committer_username': 'rigazilla', 'committer_name': 'Vittorio Rigamonti', 'committer_email': None, 'commit_date': datetime.datetime(2014, 3, 27, 12, 1, 4, tzinfo=datetime.timezone.utc)}]",Neeraj Gartia,80708727,,User,,34,,20,9
1051944020,added typescript support,,True,93,https://api.github.com/repos/infinispan/js-client/pulls/93,https://github.com/infinispan/js-client/pull/93,closed,1021,57,4,11,53,18,0,0,[],2022-09-09 19:41:35+00:00,2022-12-12 15:10:55+00:00,8105360.0,"93 days, 19:29:20","[{'comment_id': 978418006, 'comment_body': 'I would not restrict the type for entry key and value, these are application entities and I would leave the possibility to add type checking to the user. Ideally, providing a proper encoder, entries key and value could be of `any` type at client level.', 'comment_created': datetime.datetime(2022, 9, 23, 8, 59, 47, tzinfo=datetime.timezone.utc), 'commenter': 'rigazilla', 'type': 'User'}, {'comment_id': 978419652, 'comment_body': 'do we need capital letters here?', 'comment_created': datetime.datetime(2022, 9, 23, 9, 1, 56, tzinfo=datetime.timezone.utc), 'commenter': 'rigazilla', 'type': 'User'}, {'comment_id': 978990110, 'comment_body': ""No, we don't. It was added by mistake. Actually, it's a good practice to use lowercase only. I will change it to lowercase."", 'comment_created': datetime.datetime(2022, 9, 23, 19, 10, 7, tzinfo=datetime.timezone.utc), 'commenter': 'NeerajGartia21', 'type': 'User'}, {'comment_id': 978994636, 'comment_body': ""Yeah, it also can be done. But I think it's better to provide the user with the type for mediatype. Although in client level the entry types will be of `any` type. This will make it easier for the user to make his own types of entries."", 'comment_created': datetime.datetime(2022, 9, 23, 19, 17, 14, tzinfo=datetime.timezone.utc), 'commenter': 'NeerajGartia21', 'type': 'User'}, {'comment_id': 979094950, 'comment_body': ""It's not clear to me how `mediaType = any` is intended to be used. How it can simplify things for the user?"", 'comment_created': datetime.datetime(2022, 9, 23, 22, 15, 34, tzinfo=datetime.timezone.utc), 'commenter': 'rigazilla', 'type': 'User'}, {'comment_id': 979250924, 'comment_body': 'At the client level, there will be no restriction on the type of media. But IMO if we export the mediaType with proper type definition then the user will have a reference of the media type, so that he can extend it to make its own,', 'comment_created': datetime.datetime(2022, 9, 24, 14, 8, 2, tzinfo=datetime.timezone.utc), 'commenter': 'NeerajGartia21', 'type': 'User'}, {'comment_id': 979327811, 'comment_body': 'mmm, yeah it could make sense. I guess we need two different mediatypes for key and value', 'comment_created': datetime.datetime(2022, 9, 24, 23, 1, 18, tzinfo=datetime.timezone.utc), 'commenter': 'rigazilla', 'type': 'User'}, {'comment_id': 979615419, 'comment_body': ""It's not clear to me, why there is a need for different mediatypes for key and value."", 'comment_created': datetime.datetime(2022, 9, 26, 6, 50, 57, tzinfo=datetime.timezone.utc), 'commenter': 'NeerajGartia21', 'type': 'User'}, {'comment_id': 979745771, 'comment_body': ""Yeah, TBH on second thought, it's not clear to me how to use the `mediaType` object type.\r\nLet's try with a use case: \r\nIdeally key and value could be of different types, suppose the user wants to work with a cache with entries `(key: number, value: protobuf)`.\r\nStarting from the current client definition:\r\n`get(key: config.mediaType): Promise<config.mediaType>`\r\nsince key and value refer to the same object type, how the user could enforce different type checking?"", 'comment_created': datetime.datetime(2022, 9, 26, 8, 58, 44, tzinfo=datetime.timezone.utc), 'commenter': 'rigazilla', 'type': 'User'}, {'comment_id': 980217678, 'comment_body': 'Yeah, in the above case if the user provides {key: number, value: JSON } as entries, then the ts compiler will not throw any error but the code will throw an error.\r\nI think more discussion is needed on this. \r\nWhat if, we only internally type check on the key and value, and the user will have its own type defn for the entries?', 'comment_created': datetime.datetime(2022, 9, 26, 15, 43, 28, tzinfo=datetime.timezone.utc), 'commenter': 'NeerajGartia21', 'type': 'User'}, {'comment_id': 980304965, 'comment_body': ""What kind of type checking could we enforce? Since key and value could be of any type, I'm not able to imagine a static type checking of some value."", 'comment_created': datetime.datetime(2022, 9, 26, 17, 9, 15, tzinfo=datetime.timezone.utc), 'commenter': 'rigazilla', 'type': 'User'}, {'comment_id': 980314364, 'comment_body': ""Like if the data format is `application/x-protostream` then the type of key/value should be of the `root` object.\r\nAlso if it's possible to dynamically change the type of key/value according to the data format entered by the user, then it will be a great solution."", 'comment_created': datetime.datetime(2022, 9, 26, 17, 20, 11, tzinfo=datetime.timezone.utc), 'commenter': 'NeerajGartia21', 'type': 'User'}, {'comment_id': 980893652, 'comment_body': ""I'm afraid is something hard to do since Typescript provides only static type checking, so we cannot make any assumption on the runtime/dynamics values.\r\n\r\nI would propose something different based on `typescript generics': I'm thinking of define key and value types as generic type for the client interface so to enforce the check that all the function methods are used accordingly.\r\nSomething like:\r\n```\r\ninterface client<keyType, valueType> {\r\n    connect(): Promise<any>,\r\n    disconnect(): Promise<any>,\r\n    get(key: keyType): Promise<valueType>,\r\n    put(key: keyType, value: valueType, options?: object): Promise<valueType>,\r\n```\r\nwdyt?\r\n\r\nMore info on generics:\r\nhttps://www.typescriptlang.org/docs/handbook/2/generics.html\r\nhttps://www.typescriptlang.org/docs/handbook/2/generics.html#generic-types\r\n"", 'comment_created': datetime.datetime(2022, 9, 27, 7, 59, 1, tzinfo=datetime.timezone.utc), 'commenter': 'rigazilla', 'type': 'User'}, {'comment_id': 982728177, 'comment_body': 'Hi @NeerajGartia21 @rigazilla \r\n\r\nyes, also related to capital letters if you plan to continue manually creating the `.d.ts` files, you would also need to keep the first letter of the interfaces in uppercase.', 'comment_created': datetime.datetime(2022, 9, 28, 18, 19, 20, tzinfo=datetime.timezone.utc), 'commenter': 'helio-frota', 'type': 'User'}, {'comment_id': 983062704, 'comment_body': ""It's a great idea to implement!\r\nI will try to change the PR according to this."", 'comment_created': datetime.datetime(2022, 9, 29, 4, 54, 4, tzinfo=datetime.timezone.utc), 'commenter': 'NeerajGartia21', 'type': 'User'}, {'comment_id': 1021783227, 'comment_body': '@NeerajGartia21 please check the formatter, seems that every line has an extra space added at the beginning ', 'comment_created': datetime.datetime(2022, 11, 14, 16, 26, 11, tzinfo=datetime.timezone.utc), 'commenter': 'rigazilla', 'type': 'User'}, {'comment_id': 1022294807, 'comment_body': ""Oh, sorry while committing it was fine, don't know how it happened. I will correct it."", 'comment_created': datetime.datetime(2022, 11, 15, 4, 2, 48, tzinfo=datetime.timezone.utc), 'commenter': 'NeerajGartia21', 'type': 'User'}, {'comment_id': 1025045373, 'comment_body': '> ...don\'t know how it happened\r\n\r\nI had similar issue in the past. After uninstalling prettier, and add this to the vscode settings `""editor.tabSize"": 2,` I never saw that kind of issue anymore.\r\n(not sure if it is the same case)  \r\n', 'comment_created': datetime.datetime(2022, 11, 17, 11, 1, 12, tzinfo=datetime.timezone.utc), 'commenter': 'helio-frota', 'type': 'User'}]","[{'commit_sha': 'a5898e0d724b5a9902926f879a4f0e1cbc9dd064', 'committer_username': 'NeerajGartia21', 'committer_name': 'Neeraj Gartia', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 15, 17, 13, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '13bca5e63d0ada86c1faa86e7aa947095494169e', 'committer_username': 'NeerajGartia21', 'committer_name': 'Neeraj Gartia', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 15, 17, 13, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b5b69d8ba6744445ba9e268268f1af7d6ce1e75d', 'committer_username': 'NeerajGartia21', 'committer_name': 'Neeraj Gartia', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 15, 17, 13, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ed2ca7293a54207c60e55953ac5a084b47ea5dc9', 'committer_username': 'NeerajGartia21', 'committer_name': 'Neeraj Gartia', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 15, 17, 13, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bfec1503cb71f321db33c272a7ba839554d3c493', 'committer_username': 'NeerajGartia21', 'committer_name': 'Neeraj Gartia', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 15, 17, 13, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5e483696ff8a254dc1a332eb08f33ee9beb9c6f0', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '152416f560c59d189c60e49096fa7a66ebac871b', 'committer_username': 'NeerajGartia21', 'committer_name': 'Neeraj Gartia', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 15, 17, 13, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5b827a13cc77391892e797861ecadb09ede8fea9', 'committer_username': 'rigazilla', 'committer_name': 'Vittorio Rigamonti', 'committer_email': None, 'commit_date': datetime.datetime(2014, 3, 27, 12, 1, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': '42081a9b1715b23cc3c4c9d798462c58286ffa4c', 'committer_username': 'NeerajGartia21', 'committer_name': 'Neeraj Gartia', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 15, 17, 13, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '81871f52b9ec06c9ced1fc29526f4f49fec27bb7', 'committer_username': 'NeerajGartia21', 'committer_name': 'Neeraj Gartia', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 15, 17, 13, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '73d4c28281aa54b07f9a912559f312d3bb1e52f8', 'committer_username': 'rigazilla', 'committer_name': 'Vittorio Rigamonti', 'committer_email': None, 'commit_date': datetime.datetime(2014, 3, 27, 12, 1, 4, tzinfo=datetime.timezone.utc)}]",Neeraj Gartia,80708727,,User,,34,,20,9

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
47264708,js-client,infinispan/js-client,JavaScript,27,14,20,21,269,2,2,0,"[{'id': 1051944020, 'number': 93, 'closed': datetime.datetime(2022, 12, 12, 15, 10, 55, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 9, 9, 19, 41, 35, tzinfo=datetime.timezone.utc), 'time_taken': 8105360.0, 'time_delta': '93 days, 19:29:20', 'additions': 1021, 'deletions': 57, 'state': 'closed'}, {'id': 1038577287, 'number': 90, 'closed': datetime.datetime(2022, 8, 29, 15, 18, 8, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 27, 7, 14, 22, tzinfo=datetime.timezone.utc), 'time_taken': 201826.0, 'time_delta': '2 days, 8:03:46', 'additions': 67, 'deletions': 5, 'state': 'closed'}, {'id': 1036255657, 'number': 89, 'closed': datetime.datetime(2022, 8, 26, 19, 47, 32, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 25, 5, 5, 51, tzinfo=datetime.timezone.utc), 'time_taken': 139301.0, 'time_delta': '1 day, 14:41:41', 'additions': 212, 'deletions': 0, 'state': 'closed'}, {'id': 1028108923, 'number': 88, 'closed': datetime.datetime(2022, 8, 24, 18, 2, 2, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 16, 21, 47, 46, tzinfo=datetime.timezone.utc), 'time_taken': 677656.0, 'time_delta': '7 days, 20:14:16', 'additions': 108, 'deletions': 60, 'state': 'closed'}, {'id': 1019463204, 'number': 84, 'closed': datetime.datetime(2022, 8, 8, 13, 52, 10, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 7, 4, 7, 12, tzinfo=datetime.timezone.utc), 'time_taken': 121498.0, 'time_delta': '1 day, 9:44:58', 'additions': 63, 'deletions': 4, 'state': 'closed'}, {'id': 1013084243, 'number': 83, 'closed': datetime.datetime(2022, 8, 4, 11, 3, 31, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 31, 17, 59, 49, tzinfo=datetime.timezone.utc), 'time_taken': 320622.0, 'time_delta': '3 days, 17:03:42', 'additions': 1563, 'deletions': 17, 'state': 'closed'}, {'id': 1008843931, 'number': 82, 'closed': datetime.datetime(2022, 7, 27, 18, 25, 47, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 26, 18, 30, 59, tzinfo=datetime.timezone.utc), 'time_taken': 86088.0, 'time_delta': '23:54:48', 'additions': 41, 'deletions': 0, 'state': 'closed'}, {'id': 975422019, 'number': 79, 'closed': datetime.datetime(2022, 7, 8, 13, 43, 23, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 6, 22, 16, 34, 34, tzinfo=datetime.timezone.utc), 'time_taken': 1372129.0, 'time_delta': '15 days, 21:08:49', 'additions': 58, 'deletions': 3, 'state': 'closed'}, {'id': 964973737, 'number': 76, 'closed': datetime.datetime(2022, 6, 13, 16, 7, 30, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 6, 12, 11, 3, 31, tzinfo=datetime.timezone.utc), 'time_taken': 104639.0, 'time_delta': '1 day, 5:03:59', 'additions': 73, 'deletions': 3, 'state': 'closed'}]"
