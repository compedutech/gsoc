pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
1526253002,[lldb][FreeBSD] Add dynamic loader handle class for FreeBSD Kernel,"This commit is moved from [llvm-phabricator](https://reviews.llvm.org/D159076).
The implemtation support parsing kernel module for FreeBSD Kernel and has been test on x86-64 and arm64.
In summary, this class parse the linked list resides in the kernel memory that record all kernel module and load the debug symbol file to facilitate debug process",True,67106,https://api.github.com/repos/llvm/llvm-project/pulls/67106,https://github.com/llvm/llvm-project/pull/67106,closed,1014,7,6,1,19,31,2,0,"[{'name': 'lldb'}, {'name': 'clangd'}]",2023-09-22 09:27:59+00:00,2023-10-03 18:16:32+00:00,982113.0,"11 days, 8:48:33","[{'comment_id': 1334839908, 'comment_body': 'These names are usually a bit shorter and lower case separated by ""-"", so maybe ""free-bsd-kernel"" would be sufficient. The only time this name is when someone wants to specify the exact dynamic loader to use.', 'comment_created': datetime.datetime(2023, 9, 22, 21, 49, 39, tzinfo=datetime.timezone.utc), 'commenter': 'clayborg', 'type': 'User'}, {'comment_id': 1334844435, 'comment_body': 'What does the kernel main executable currently return for ObjectFile::GetStrata()? Can we modify ObjectFileELF::CalculateStrata() to return eStrataKernel if there any way to tell if the main executable is a kernel image by looking at the ELF header, program headers, or section headers? I am worried this ""is_kernel()"" call might return true for too many binaries and possibly cause this plug-in to be selected for other free BSD targets', 'comment_created': datetime.datetime(2023, 9, 22, 21, 59, 54, tzinfo=datetime.timezone.utc), 'commenter': 'clayborg', 'type': 'User'}, {'comment_id': 1334845274, 'comment_body': 'This function is important that we make sure when ""force == false"" tha we don\'t say that this plug-in can handle another Free BSD debugging session. I would feel better if ""is_kernel()"" was rock solid. See comments in that function for details', 'comment_created': datetime.datetime(2023, 9, 22, 22, 1, 41, tzinfo=datetime.timezone.utc), 'commenter': 'clayborg', 'type': 'User'}, {'comment_id': 1334858601, 'comment_body': 'For my own understanding, why do we start at the 2nd section header?', 'comment_created': datetime.datetime(2023, 9, 22, 22, 28, 20, tzinfo=datetime.timezone.utc), 'commenter': 'bulbazord', 'type': 'User'}, {'comment_id': 1334858834, 'comment_body': 'This file needs a license header.', 'comment_created': datetime.datetime(2023, 9, 22, 22, 29, 5, tzinfo=datetime.timezone.utc), 'commenter': 'bulbazord', 'type': 'User'}, {'comment_id': 1334861083, 'comment_body': 'Is this log useful to you? Rather than saying ""Couldn\'t find symbol for step through"", it might be more accurate to say ""DynamicLoaderFreeBSDKernel::GetStepThroughTrampolinePlan is not yet implemented.""\r\n\r\nIf the log isn\'t useful though, I\'d recommend removing it.', 'comment_created': datetime.datetime(2023, 9, 22, 22, 31, 59, tzinfo=datetime.timezone.utc), 'commenter': 'bulbazord', 'type': 'User'}, {'comment_id': 1334864267, 'comment_body': ""Please avoid using `ConstString` unless you're calling a method which requires it. It looks like this is just to set a `std::string` in the `KModImageInfo` below. I'd recommend using `llvm::StringRef` here.\r\n\r\nFor context, anything you put into the `ConstString` string pool persists until LLDB exits. There is no way to reclaim that memory when you're done with it. This is useful in some cases (e.g. you have the same string a ton of times and will use them throughout the debug session). In this case, `kernel_name` only sticks around for a short amount of time."", 'comment_created': datetime.datetime(2023, 9, 22, 22, 36, 25, tzinfo=datetime.timezone.utc), 'commenter': 'bulbazord', 'type': 'User'}, {'comment_id': 1334865326, 'comment_body': 'What does this `return true` indicate? The `ParseKmods` invocation 2 lines above this could fail and all of the linker files could be blown away with the following call to `clear`. Is that not a condition you would want to consider?', 'comment_created': datetime.datetime(2023, 9, 22, 22, 39, 25, tzinfo=datetime.timezone.utc), 'commenter': 'bulbazord', 'type': 'User'}, {'comment_id': 1334865932, 'comment_body': ""Shouldn't you check the result of those memory reads above before mutating state here? Otherwise you may end up with stale or otherwise incorrect information, no?"", 'comment_created': datetime.datetime(2023, 9, 22, 22, 41, 9, tzinfo=datetime.timezone.utc), 'commenter': 'bulbazord', 'type': 'User'}, {'comment_id': 1334867365, 'comment_body': 'You can create an `llvm::StringRef` out of a `std::string`. Creating one from a `const char *` involves doing a `strlen`, but a `std::string` already knows the length.', 'comment_created': datetime.datetime(2023, 9, 22, 22, 45, 52, tzinfo=datetime.timezone.utc), 'commenter': 'bulbazord', 'type': 'User'}, {'comment_id': 1334867444, 'comment_body': 'It\'s always one word, FreeBSD, so ""freebsd-kernel""\r\n', 'comment_created': datetime.datetime(2023, 9, 22, 22, 46, 5, tzinfo=datetime.timezone.utc), 'commenter': 'emaste', 'type': 'User'}, {'comment_id': 1334867841, 'comment_body': 'No need to check if the log object is valid, the macro does it for you already.', 'comment_created': datetime.datetime(2023, 9, 22, 22, 47, 14, tzinfo=datetime.timezone.utc), 'commenter': 'bulbazord', 'type': 'User'}, {'comment_id': 1334868259, 'comment_body': 'Should we not also set `read_error` here too? and some of the places below.', 'comment_created': datetime.datetime(2023, 9, 22, 22, 48, 25, tzinfo=datetime.timezone.utc), 'commenter': 'bulbazord', 'type': 'User'}, {'comment_id': 1334870418, 'comment_body': ""We can identify a FreeBSD kernel by the bogus PT_INTERP it specifies:\r\n```\r\n  INTERP         0x000238 0xffffffff80200238 0x0000000000200238 0x00000d 0x00000d R   0x1\r\n      [Requesting program interpreter: /red/herring]\r\n```\r\n\r\nThere are a bunch of ELF notes, but nothing that would uniquely identify it as a FreeBSD kernel. I suspect the Xen notes are unique to kernels, but won't be present if built without Xen support I guess. (As an aside I guess we should teach llvm-readelf about those note types.)\r\n\r\n```\r\nDisplaying notes found in: .note.gnu.build-id\r\n  Owner                Data size        Description\r\n  GNU                  0x00000014       NT_GNU_BUILD_ID (unique build ID bitstring)\r\n    Build ID: 984b7de7a87159b85761dc6bdc9645e28407e890\r\n\r\nDisplaying notes found in: .note.Xen\r\n  Owner                Data size        Description\r\n  Xen                  0x00000008       Unknown note type: (0x00000006)\r\n   description data: 46 72 65 65 42 53 44 00\r\n  Xen                  0x00000009       Unknown note type: (0x00000007)\r\n   description data: 30 78 31 33 64 36 37 37 00\r\n  Xen                  0x00000008       Unknown note type: (0x00000005)\r\n   description data: 78 65 6e 2d 33 2e 30 00\r\n  Xen                  0x00000008       Unknown note type: (0x00000003)\r\n   description data: 00 00 00 80 ff ff ff ff\r\n  Xen                  0x00000008       Unknown note type: (0x00000004)\r\n   description data: 00 00 00 00 00 00 00 00\r\n  Xen                  0x00000008       NT_VERSION (version)\r\n   description data: 00 b0 03 81 ff ff ff ff\r\n  Xen                  0x00000008       NT_ARCH (architecture)\r\n   description data: 00 a0 03 81 ff ff ff ff\r\n  Xen                  0x00000008       Unknown note type: (0x0000000c)\r\n   description data: 00 00 00 00 00 80 ff ff\r\n  Xen                  0x0000005e       Unknown note type: (0x0000000a)\r\n   description data: 77 72 69 74 61 62 6c 65 5f 64 65 73 63 72 69 70 74 6f 72 5f 74 61 62 6c 65 73 7c 61 75 74 6f 5f 74 72 61 6e 73 6c 61 74 65 64 5f 70 68 79 73 6d 61 70 7c 73 75 70 65 72 76 69 73 6f 72 5f 6d 6f 64 65 5f 6b 65 72 6e 65 6c 7c 68 76 6d 5f 63 61 6c 6c 62 61 63 6b 5f 76 65 63 74 6f 72 00\r\n  Xen                  0x00000004       Unknown note type: (0x00000009)\r\n   description data: 79 65 73 00\r\n  Xen                  0x00000008       Unknown note type: (0x0000000d)\r\n   description data: 01 00 00 00 01 00 00 00\r\n  Xen                  0x00000008       Unknown note type: (0x00000008)\r\n   description data: 67 65 6e 65 72 69 63 00\r\n  Xen                  0x00000004       Unknown note type: (0x0000000e)\r\n   description data: 00 00 00 00\r\n  Xen                  0x00000004       Unknown note type: (0x0000000b)\r\n   description data: 79 65 73 00\r\n  Xen                  0x00000004       Unknown note type: (0x00000012)\r\n   description data: 30 b0 03 01\r\n```\r\n\r\nOh, I guess a section named `set_sysinit_set` could be a decent indication.\r\n```\r\nThere are 61 section headers, starting at offset 0x19a0c38:\r\n\r\nSection Headers:\r\n  [Nr] Name              Type            Address          Off    Size   ES Flg Lk Inf Al\r\n  [ 0]                   NULL            0000000000000000 000000 000000 00      0   0  0\r\n  [ 1] .interp           PROGBITS        ffffffff802002a8 0002a8 00000d 00   A  0   0  1\r\n  [ 2] .hash             HASH            ffffffff802002b8 0002b8 02dc10 04   A  4   0  4\r\n...\r\n  [49] set_sysinit_set   PROGBITS        ffffffff81746070 1546070 003878 00  WA  0   0  8\r\n```\r\n\r\nThere are a bunch of `set_*_set` sections but the SYSINT linker set is always going to be present."", 'comment_created': datetime.datetime(2023, 9, 22, 22, 55, 9, tzinfo=datetime.timezone.utc), 'commenter': 'emaste', 'type': 'User'}, {'comment_id': 1334872426, 'comment_body': '> For my own understanding, why do we start at the 2nd section header?\r\n\r\nThe first one is all zeroes in every ELF file', 'comment_created': datetime.datetime(2023, 9, 22, 23, 1, 43, tzinfo=datetime.timezone.utc), 'commenter': 'clayborg', 'type': 'User'}, {'comment_id': 1334872871, 'comment_body': ""> Shouldn't you check the result of those memory reads above before mutating state here? Otherwise you may end up with stale or otherwise incorrect information, no?\r\n\r\nThis will return LLDB_INVALID_ADDRESS if it fails, so you can check the error if you want, or just need to deal with LLDB_INVALID_ADDRESS correctly. "", 'comment_created': datetime.datetime(2023, 9, 22, 23, 3, 3, tzinfo=datetime.timezone.utc), 'commenter': 'clayborg', 'type': 'User'}, {'comment_id': 1334874577, 'comment_body': 'Nit: LLDB style would be `IsKernel`', 'comment_created': datetime.datetime(2023, 9, 22, 23, 8, 39, tzinfo=datetime.timezone.utc), 'commenter': 'augusto2112', 'type': 'User'}, {'comment_id': 1334874703, 'comment_body': 'yes, any of the above suggested checks would be fine. Anything that can help us return ""eStrataKernel"" in ObjectFileELF could be really nice to add.', 'comment_created': datetime.datetime(2023, 9, 22, 23, 9, 8, tzinfo=datetime.timezone.utc), 'commenter': 'clayborg', 'type': 'User'}, {'comment_id': 1334875375, 'comment_body': 'init this to false ', 'comment_created': datetime.datetime(2023, 9, 22, 23, 11, 10, tzinfo=datetime.timezone.utc), 'commenter': 'clayborg', 'type': 'User'}, {'comment_id': 1334879452, 'comment_body': 'You will want to check ""current_kld != LLDB_INVALID_ADDRESS && current_kld != 0"". Both linker_files_head_addr.GetLoadAddress(...) and m_process->ReadPointerFromMemory(...) will return LLDB_INVALID_ADDRESS which is not zero, but you probably might read a NULL pointer to terminate the module list.', 'comment_created': datetime.datetime(2023, 9, 22, 23, 25, 56, tzinfo=datetime.timezone.utc), 'commenter': 'clayborg', 'type': 'User'}, {'comment_id': 1334879996, 'comment_body': 'But yes, check if you got valid strings back for ""kld_filename"", ""kld_pathname"" and ""kld_load_addr != LLDB_INVALID_ADDRESS would be good idea before adding the to the kmods_list. The ""current_kld"" should be checked against zero and LLDB_INVALID_ADDRESS in the while loop', 'comment_created': datetime.datetime(2023, 9, 22, 23, 28, 8, tzinfo=datetime.timezone.utc), 'commenter': 'clayborg', 'type': 'User'}, {'comment_id': 1334897629, 'comment_body': 'I discussed with our kernel gdb maintainer and there PT_INTERP == /red/herring is used to identify a kernel for the main executable. ', 'comment_created': datetime.datetime(2023, 9, 23, 0, 59, 25, tzinfo=datetime.timezone.utc), 'commenter': 'emaste', 'type': 'User'}, {'comment_id': 1335096812, 'comment_body': '> I discussed with our kernel gdb maintainer and there PT_INTERP == /red/herring is used to identify a kernel for the main executable.\r\n\r\nThat is great. Can we have ObjectFileELF.cpp check for this and return eStrataKernel for the ObjectFileELF::GetStrata() and then use this value to return true to the is_kernel() function?\r\n\r\n', 'comment_created': datetime.datetime(2023, 9, 24, 3, 53, 3, tzinfo=datetime.timezone.utc), 'commenter': 'clayborg', 'type': 'User'}, {'comment_id': 1335180596, 'comment_body': ""Sorry about my late reply, I am preparing some programming contest these day. \r\nI don't know if we should consider other kernel like Linux in here. I will test it on Linux and make both kernel pass this test in ObjectFileELF.cpp."", 'comment_created': datetime.datetime(2023, 9, 24, 13, 48, 33, tzinfo=datetime.timezone.utc), 'commenter': 'aokblast', 'type': 'User'}, {'comment_id': 1335180980, 'comment_body': 'Oh, I check the coding style in DarwinKernel DynamicLoader and found that it uses snake case in static function.', 'comment_created': datetime.datetime(2023, 9, 24, 13, 52, 28, tzinfo=datetime.timezone.utc), 'commenter': 'aokblast', 'type': 'User'}, {'comment_id': 1335182423, 'comment_body': ""Oh, it does nothing for now because I don't do anything when the kmod reading failed.\r\nI leave it as a remind if I want to log anything when this function execute failed.\r\nI don't know if I should modify it to return void or just reserve it."", 'comment_created': datetime.datetime(2023, 9, 24, 14, 4, 46, tzinfo=datetime.timezone.utc), 'commenter': 'aokblast', 'type': 'User'}, {'comment_id': 1336309710, 'comment_body': 'It is ok if something only works for FreeBSD too, just check the OSABI in the ELF header if this only works for FreeBSD. If this works for linux as well, then feel free to make it work for both!', 'comment_created': datetime.datetime(2023, 9, 25, 19, 33, 10, tzinfo=datetime.timezone.utc), 'commenter': 'clayborg', 'type': 'User'}, {'comment_id': 1337167152, 'comment_body': 'Can I just check the error that was passed into the function?\r\nUpdate: I found the implementation in ProcessFreeBSDKernel and found that it will change the error parameter instead of return LLDB_INVALID_ADDRESS. So I think checking the error parameter is more reasonable in this case?', 'comment_created': datetime.datetime(2023, 9, 26, 12, 57, 53, tzinfo=datetime.timezone.utc), 'commenter': 'aokblast', 'type': 'User'}, {'comment_id': 1337530861, 'comment_body': 'Fix this comment line to be a single line and also include the C++ stuff for editors:\r\n```\r\n//===-- DynamicLoaderFreeBSDKernel.h -----------------------*- C++ -*-===//\r\n```', 'comment_created': datetime.datetime(2023, 9, 26, 16, 58, 12, tzinfo=datetime.timezone.utc), 'commenter': 'clayborg', 'type': 'User'}, {'comment_id': 1337558115, 'comment_body': ""Either one is fine, you could also do both? This is one place where LLDB can be a little frustrating because there are 2 ways to detect the error and it's not obvious which one you should be checking."", 'comment_created': datetime.datetime(2023, 9, 26, 17, 24, 32, tzinfo=datetime.timezone.utc), 'commenter': 'bulbazord', 'type': 'User'}, {'comment_id': 1337934652, 'comment_body': 'Fix it', 'comment_created': datetime.datetime(2023, 9, 27, 1, 32, 4, tzinfo=datetime.timezone.utc), 'commenter': 'aokblast', 'type': 'User'}]","[{'commit_sha': 'f4d7761c4abd2a16739a917ded31f90fdbbbf2fb', 'committer_username': 'aokblast', 'committer_name': None, 'committer_email': 'aokblast@FreeBSD.org', 'commit_date': datetime.datetime(2015, 12, 29, 13, 9, 19, tzinfo=datetime.timezone.utc)}]",,16476727,aokblast@FreeBSD.org,User,,38,,22,30

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
75821432,llvm-project,llvm/llvm-project,LLVM,11305,27525,588,6409,508892,25344,678,2861,"[{'id': 1933622495, 'number': 96400, 'closed': datetime.datetime(2024, 7, 14, 23, 15, 37, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 6, 22, 16, 4, 13, tzinfo=datetime.timezone.utc), 'time_taken': 1926684.0, 'time_delta': '22 days, 7:11:24', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 1712809437, 'number': 80785, 'closed': None, 'created': datetime.datetime(2024, 2, 6, 2, 24, 45, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 68, 'deletions': 8, 'state': 'open'}, {'id': 1541692459, 'number': 68210, 'closed': datetime.datetime(2023, 10, 4, 12, 12, 28, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 10, 4, 11, 56, 44, tzinfo=datetime.timezone.utc), 'time_taken': 944.0, 'time_delta': '0:15:44', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 1526253002, 'number': 67106, 'closed': datetime.datetime(2023, 10, 3, 18, 16, 32, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 9, 22, 9, 27, 59, tzinfo=datetime.timezone.utc), 'time_taken': 982113.0, 'time_delta': '11 days, 8:48:33', 'additions': 1014, 'deletions': 7, 'state': 'closed'}]"
