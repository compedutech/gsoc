pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
447668045,Changing tempos support,"This is my working product submission for [GSoC 2020](https://summerofcode.withgoogle.com/projects/#5309419128094720).
While the core of my project was adding a new rhythm analyzer #2877 that is still a working a progress.

The new analyzer however relies heavy on the current beat detector which works quite well, but suffers from two main issues that his pull request tries to solve and are necessary for detecting downbeat and phrases.

1. Fluctuating beat lengths (tempo) around a center a value.
2. Loosing track of ""right"" beat on percussion less or effects heavy parts.

Previously Mixxx solved this issue by not allowing any tempo changes and making a perfect fixed tempo grid using the beat detector output only to compute the average tempo and the most likely beat phase, while that work very well for tracks that have a unique constant tempo it failed heavy on tracks that have a abrupt tempo change or an unsteady tempo.

This pull request on the other hand attempts to find regions of stable tempo and make a independently grid for each of them. To allow unsteady tempos, instead of making a fixed tempo grid it tries to attempts to a grid for all the beats that fall within a 25ms threshold which is close to the human hearing perception threshold of distinguishable sounds.

It works very well for unsteady tempo and is able to follow smooth or abrupt tempo changes well while keep a constant grid, but still fails on some case when the beat detector output is ""very"" problematic and does not completely eliminate the need for current fixed tempo grid approach.

This can still be improved by combining the fixed grid approach with the stable regions and make one fixed grid instead of the ironing approach of 25ms, the challenge is then to determine which algorithm to use.

Some comparisons with the 2.3 results, showing where it does well and where it still fails: (blue is 2.3, red this PR) 

Tracks with unsteady tempos:
![unsteady](https://user-images.githubusercontent.com/61819301/91675961-9468f080-eb14-11ea-9084-822d2044d740.png)

Tracks that have more than one constant tempo:
![abruptChange](https://user-images.githubusercontent.com/61819301/91676117-253fcc00-eb15-11ea-9416-e50da8c0ff20.png)

Track with one constant tempo:
![constant](https://user-images.githubusercontent.com/61819301/91676201-69cb6780-eb15-11ea-8fd1-68674f221cfe.png)

",False,2930,https://api.github.com/repos/mixxxdj/mixxx/pulls/2930,https://github.com/mixxxdj/mixxx/pull/2930,open,677,56,19,29,40,222,1,0,[{'name': 'stale'}],2020-07-10 22:24:55+00:00,,0.0,,"[{'comment_id': 453108657, 'comment_body': 'Use doxygen-style /// comments here', 'comment_created': datetime.datetime(2020, 7, 10, 22, 42, 56, tzinfo=datetime.timezone.utc), 'commenter': 'Holzhaus', 'type': 'User'}, {'comment_id': 453108918, 'comment_body': 'Please put member variables below the functions. ', 'comment_created': datetime.datetime(2020, 7, 10, 22, 43, 54, tzinfo=datetime.timezone.utc), 'commenter': 'Holzhaus', 'type': 'User'}, {'comment_id': 453109281, 'comment_body': 'Add a blank line between these classes. ', 'comment_created': datetime.datetime(2020, 7, 10, 22, 45, 16, tzinfo=datetime.timezone.utc), 'commenter': 'Holzhaus', 'type': 'User'}, {'comment_id': 453109459, 'comment_body': 'One blank suffices though :D', 'comment_created': datetime.datetime(2020, 7, 10, 22, 45, 55, tzinfo=datetime.timezone.utc), 'commenter': 'Holzhaus', 'type': 'User'}, {'comment_id': 453110036, 'comment_body': ""Can you include the unit in the name? Then we don't need the comment and also have that information where it's used. "", 'comment_created': datetime.datetime(2020, 7, 10, 22, 48, 31, tzinfo=datetime.timezone.utc), 'commenter': 'Holzhaus', 'type': 'User'}, {'comment_id': 453110701, 'comment_body': 'Please use separate lines. ', 'comment_created': datetime.datetime(2020, 7, 10, 22, 51, 10, tzinfo=datetime.timezone.utc), 'commenter': 'Holzhaus', 'type': 'User'}, {'comment_id': 453111739, 'comment_body': 'If you initialize currentBeat to -1 and increment it before the if case, you can use continue here. Not sure if that would be better. ', 'comment_created': datetime.datetime(2020, 7, 10, 22, 55, 20, tzinfo=datetime.timezone.utc), 'commenter': 'Holzhaus', 'type': 'User'}, {'comment_id': 453137375, 'comment_body': 'That would be cleaner I guess', 'comment_created': datetime.datetime(2020, 7, 11, 1, 19, 15, tzinfo=datetime.timezone.utc), 'commenter': 'crisclacerda', 'type': 'User'}, {'comment_id': 453311315, 'comment_body': 'Legacy issue: \r\n\r\nI think we should immediately hand over the raw pointer after construction to clarify the ownership. \r\nsubVersion can also be set during the constructor. \r\n```\r\nreturn mixxx::BeatsPointer(\r\n        new mixxx::BeatMap(track, iSampleRate, fixedBeats, subVersion),\r\n        &BeatFactory::deleteBeats);\r\n```\r\n\r\nThe same above. \r\n\r\n\r\n', 'comment_created': datetime.datetime(2020, 7, 12, 12, 36, 44, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 453311559, 'comment_body': 'kMaxBpmError', 'comment_created': datetime.datetime(2020, 7, 12, 12, 39, 13, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 453311793, 'comment_body': 'This whole PR contains some formatting issues. Did you try to install our pre-commit hook? ', 'comment_created': datetime.datetime(2020, 7, 12, 12, 41, 24, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 453312261, 'comment_body': 'Due to the median we introduce a delay of 1/2 median window. Is this considered? ', 'comment_created': datetime.datetime(2020, 7, 12, 12, 45, 58, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 453312616, 'comment_body': 'This is hard to understand. I guess we need some more comments. ', 'comment_created': datetime.datetime(2020, 7, 12, 12, 49, 43, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 453312895, 'comment_body': 'Is this ""stableTemposByPosition""? ', 'comment_created': datetime.datetime(2020, 7, 12, 12, 52, 12, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 453313556, 'comment_body': 'I wonder why the kMaxSecsPhaseError is not relevant here? \r\n\r\nLets say we have a continuously increasing tempo.  We can keep the grid constant until the kMaxSecsPhaseError is exceeded, right? \r\n\r\nOnce we are behind by 25 ms we can try to catch up with a faster tempo, but will fall behind soon because of the increasing tempo.  \r\n\r\nSo we are always behind ... :-/ difficult. \r\n\r\nWhat do you think?  \r\n\r\n\r\n', 'comment_created': datetime.datetime(2020, 7, 12, 12, 58, 48, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 453313886, 'comment_body': 'Cool, Can we force a minimum fixed region of one measure? Can we align the change to downbeats? \r\nThat makes musically pretty much sense. But do we have the info? ', 'comment_created': datetime.datetime(2020, 7, 12, 13, 1, 49, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 453586874, 'comment_body': 'Here we do not care about the beat positions just trying to understand tempo changes.', 'comment_created': datetime.datetime(2020, 7, 13, 11, 35, 44, tzinfo=datetime.timezone.utc), 'commenter': 'crisclacerda', 'type': 'User'}, {'comment_id': 453587309, 'comment_body': 'Yes, key is position of a new stable tempo and value the tempo', 'comment_created': datetime.datetime(2020, 7, 13, 11, 36, 39, tzinfo=datetime.timezone.utc), 'commenter': 'crisclacerda', 'type': 'User'}, {'comment_id': 453587946, 'comment_body': 'Yes, this is considered when assigning currrentBeat value to lastBeatChanhge ', 'comment_created': datetime.datetime(2020, 7, 13, 11, 37, 54, tzinfo=datetime.timezone.utc), 'commenter': 'crisclacerda', 'type': 'User'}, {'comment_id': 453588332, 'comment_body': 'Only clang-format. \r\nI will double check that', 'comment_created': datetime.datetime(2020, 7, 13, 11, 38, 45, tzinfo=datetime.timezone.utc), 'commenter': 'crisclacerda', 'type': 'User'}, {'comment_id': 453588938, 'comment_body': ""That's for #2877, we dont have that info here"", 'comment_created': datetime.datetime(2020, 7, 13, 11, 40, tzinfo=datetime.timezone.utc), 'commenter': 'crisclacerda', 'type': 'User'}, {'comment_id': 456144281, 'comment_body': ""No constructor of beatmap receives subversion as parameter, since we are getting rid of that anyways I think it's not worth the trouble, right?"", 'comment_created': datetime.datetime(2020, 7, 17, 0, 3, 28, tzinfo=datetime.timezone.utc), 'commenter': 'crisclacerda', 'type': 'User'}, {'comment_id': 462693470, 'comment_body': '```suggestion\r\n    // of tracks with a constant tempo as a different, unsteady tempo. \r\n```', 'comment_created': datetime.datetime(2020, 7, 30, 2, 14, 18, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 462694352, 'comment_body': 'I\'m unclear which meaning of ""fixed"" this is using. Are the beats ""fixed"" as in corrected, or ""fixed"" as in unmoved?', 'comment_created': datetime.datetime(2020, 7, 30, 2, 17, 31, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 462695297, 'comment_body': 'Add a brief TODO comment here about your ideas to improve this further in the future which you mentioned on Zulip.', 'comment_created': datetime.datetime(2020, 7, 30, 2, 21, 21, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 463335261, 'comment_body': 'This produces a compiler warning: \r\n```\r\n/home/daniel/workspace/advanced_autodj_2/src/track/beatstats.cpp:29:12: warning: ‘mode’ may be used uninitialized in this function [-Wmaybe-uninitialized]\r\n     return mode;\r\n```\r\n', 'comment_created': datetime.datetime(2020, 7, 31, 0, 0, 46, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 463342632, 'comment_body': 'Can we write the lines above as\r\n```\r\nauto  medianFilterTempo = MovingMedian(beatsToFilterMeterChanges); \r\nauto  modeFilterTempo = MovingMode(beatsToFilterMeterChanges);\r\n```\r\nAnd with improved names? \r\nThis is more pleasant to read. ', 'comment_created': datetime.datetime(2020, 7, 31, 0, 28, 16, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 463344581, 'comment_body': 'is this a BPM value? \r\nCan we call it ""medianBpm"" to clarify this?  ', 'comment_created': datetime.datetime(2020, 7, 31, 0, 35, 24, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 463345349, 'comment_body': 'beats... sounds as it is a list of beats. \r\nThis is the window size for the moving filters, right? \r\nCan we find a name that reflects this? \r\n\r\n', 'comment_created': datetime.datetime(2020, 7, 31, 0, 38, 47, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 463348571, 'comment_body': ""I struggle with the therm mode. \r\nIsn't this just a maximum filter?"", 'comment_created': datetime.datetime(2020, 7, 31, 0, 50, 9, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 463350860, 'comment_body': 'what is this value bpm? ', 'comment_created': datetime.datetime(2020, 7, 31, 0, 58, 48, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 463351224, 'comment_body': 'what is the rounding for? ', 'comment_created': datetime.datetime(2020, 7, 31, 1, 0, 8, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 463735759, 'comment_body': 'FilteringWindowInBeats? Do you have suggestions?', 'comment_created': datetime.datetime(2020, 7, 31, 17, 24, 14, tzinfo=datetime.timezone.utc), 'commenter': 'crisclacerda', 'type': 'User'}, {'comment_id': 463736970, 'comment_body': ""Mode is correct statistical term, https://en.wikipedia.org/wiki/Mode_(statistics).\r\nIt's the most frequent value. I am not familiar with the term maximum filter is it the same thing?"", 'comment_created': datetime.datetime(2020, 7, 31, 17, 26, 45, tzinfo=datetime.timezone.utc), 'commenter': 'crisclacerda', 'type': 'User'}, {'comment_id': 476697115, 'comment_body': 'The code suffers some formatting issues. Please run ""git clang-format"" on the whole PR.', 'comment_created': datetime.datetime(2020, 8, 25, 19, 48, 30, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 476702311, 'comment_body': 'We need here a new subVersion that reflects the new ironing stage and the preferences we need to decide for. ', 'comment_created': datetime.datetime(2020, 8, 25, 19, 58, 13, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 476703560, 'comment_body': 'There is no need for a cast. I think the Pentium processor has even a hardware that can divide a double by an int. ', 'comment_created': datetime.datetime(2020, 8, 25, 20, 0, 29, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 476706209, 'comment_body': 'Is this necessary to be a () operator? Usually the code is more easy to read with named function.', 'comment_created': datetime.datetime(2020, 8, 25, 20, 5, 38, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 476707053, 'comment_body': ""The same here. Can't we just remove this wrapper? "", 'comment_created': datetime.datetime(2020, 8, 25, 20, 7, 23, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 476708241, 'comment_body': ""What is period? The window size? Can't we call it just window size? "", 'comment_created': datetime.datetime(2020, 8, 25, 20, 9, 40, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 476718595, 'comment_body': 'QQueue is based on QList which is not optimized for a ring buffer. \r\nWe may consider to user PaUtilRingBuffer or something else.', 'comment_created': datetime.datetime(2020, 8, 25, 20, 30, 19, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 476721051, 'comment_body': 'This is hard to understand without comments. ', 'comment_created': datetime.datetime(2020, 8, 25, 20, 34, 59, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 476721716, 'comment_body': 'What is tempoFrequency?   This term is missleading, because tempo implies also a frequency how about:\r\nfreqencyOfValues', 'comment_created': datetime.datetime(2020, 8, 25, 20, 36, 14, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 476722325, 'comment_body': 'We use an explicit private block at the bottom of the class. ', 'comment_created': datetime.datetime(2020, 8, 25, 20, 37, 25, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 476723234, 'comment_body': 'I think the file can use a better name\r\nwindowedstatistics.cpp', 'comment_created': datetime.datetime(2020, 8, 25, 20, 39, 13, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 476725351, 'comment_body': 'Ah, got it. ', 'comment_created': datetime.datetime(2020, 8, 25, 20, 43, 21, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 476726316, 'comment_body': 'why we have the isnan check only for the later case? ', 'comment_created': datetime.datetime(2020, 8, 25, 20, 45, 19, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 476734936, 'comment_body': 'Do we really need a dynamic growing window? \r\nIt would be nice to have a way to pre-allocate all the memory during the constructor. \r\nWe can even consider to give the window size as template parameter. \r\n', 'comment_created': datetime.datetime(2020, 8, 25, 21, 1, 51, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 476738465, 'comment_body': 'This value needs a view lines of comments', 'comment_created': datetime.datetime(2020, 8, 25, 21, 9, 2, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 476741059, 'comment_body': 'Do you want to return false here as well? ', 'comment_created': datetime.datetime(2020, 8, 25, 21, 14, 14, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 476741505, 'comment_body': 'The fabs call can be optimized away if we integrate the check into the above conditions. ', 'comment_created': datetime.datetime(2020, 8, 25, 21, 15, 6, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 476742075, 'comment_body': 'frequencyOfTempos ? ', 'comment_created': datetime.datetime(2020, 8, 25, 21, 16, 15, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 476744190, 'comment_body': 'please explain also why ', 'comment_created': datetime.datetime(2020, 8, 25, 21, 19, 39, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 476746140, 'comment_body': 'instead  ... ? ', 'comment_created': datetime.datetime(2020, 8, 25, 21, 21, 44, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 476749983, 'comment_body': 'Please explain as a code comment ', 'comment_created': datetime.datetime(2020, 8, 25, 21, 26, 1, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 476753292, 'comment_body': 'How does this work? Double values are never equal. \r\nI think we need a precision parameter and round the value before counting them. ', 'comment_created': datetime.datetime(2020, 8, 25, 21, 29, 42, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 476758319, 'comment_body': 'Yes, but for what? Please improve the comment. ', 'comment_created': datetime.datetime(2020, 8, 25, 21, 35, 26, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 476764853, 'comment_body': '""Raw"" is misleading, why not just beats?  ', 'comment_created': datetime.datetime(2020, 8, 25, 21, 43, 8, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 476771790, 'comment_body': 'Can we call the function findStableTempoRegions or such? This way it matches the returned container. ', 'comment_created': datetime.datetime(2020, 8, 25, 21, 51, 23, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 476788601, 'comment_body': 'I think that needs to be removed.\r\n\r\nIf we add beats here, the later ironing will treat them as strong reference points and will apply the 0,25 ms rule to it. But that is not necessary.  We can just advance to the next beat and put them later exactly on the calculated average. \r\n', 'comment_created': datetime.datetime(2020, 8, 25, 22, 12, 33, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 476794522, 'comment_body': ""Isn't this a unnecessary deep copy? \r\n\r\nI guess it shool be possible to edit the beats on the fly. "", 'comment_created': datetime.datetime(2020, 8, 25, 22, 20, 31, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 476801598, 'comment_body': 'I did not get the consideration for this test. \r\nPlease describe in a code comment. ', 'comment_created': datetime.datetime(2020, 8, 25, 22, 29, 59, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 476803701, 'comment_body': 'Can we find a term? At least it should start with a lower case letter. \r\nI have no idea what he prefix ""Fix"" means ', 'comment_created': datetime.datetime(2020, 8, 25, 22, 32, 50, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 476806935, 'comment_body': 'Normally the calculateIronedBeatMap should give quite similar results. \r\nDo you have a track where this is not the case?', 'comment_created': datetime.datetime(2020, 8, 25, 22, 37, 11, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 476852201, 'comment_body': 'Similar yes, but not as good for true const tempo.\r\nWith this, we avoid any change at all when the tempo is const but the ironing will still have some changes, so I think this works better...', 'comment_created': datetime.datetime(2020, 8, 25, 23, 24, 52, tzinfo=datetime.timezone.utc), 'commenter': 'crisclacerda', 'type': 'User'}, {'comment_id': 476853418, 'comment_body': 'Yes, fo example https://www.youtube.com/watch?v=W-nrHptw4Ow\r\nAnd actually any edm track with const tempo.', 'comment_created': datetime.datetime(2020, 8, 25, 23, 25, 59, tzinfo=datetime.timezone.utc), 'commenter': 'crisclacerda', 'type': 'User'}, {'comment_id': 477027111, 'comment_body': 'std::deque? ', 'comment_created': datetime.datetime(2020, 8, 26, 4, 30, 17, tzinfo=datetime.timezone.utc), 'commenter': 'crisclacerda', 'type': 'User'}, {'comment_id': 477028052, 'comment_body': ""That's because of the way I implemented the window, when it's not full it returns a nan so we know not to remove any element. Makes sense? We are actually not testing if it`s nan but if the window is not full yet"", 'comment_created': datetime.datetime(2020, 8, 26, 4, 34, tzinfo=datetime.timezone.utc), 'commenter': 'crisclacerda', 'type': 'User'}, {'comment_id': 477029293, 'comment_body': 'It only works because all tempo values pushed into this are rounded to 2 decimals only.', 'comment_created': datetime.datetime(2020, 8, 26, 4, 38, 54, tzinfo=datetime.timezone.utc), 'commenter': 'crisclacerda', 'type': 'User'}, {'comment_id': 477031780, 'comment_body': 'I do not understand this', 'comment_created': datetime.datetime(2020, 8, 26, 4, 48, 48, tzinfo=datetime.timezone.utc), 'commenter': 'crisclacerda', 'type': 'User'}, {'comment_id': 477033218, 'comment_body': ""I don't think so..\r\nIf the current is positive and previous is negative, the current is bigger and error is growing, no?\r\nThinking about this now though, I don't think we need these conditions, and just save the absolute value in these variables, we only care about the magnitude after all?"", 'comment_created': datetime.datetime(2020, 8, 26, 4, 54, 13, tzinfo=datetime.timezone.utc), 'commenter': 'crisclacerda', 'type': 'User'}, {'comment_id': 477033957, 'comment_body': ""it's 2 lines below. \r\nShould just make all the comment together, right?"", 'comment_created': datetime.datetime(2020, 8, 26, 4, 56, 59, tzinfo=datetime.timezone.utc), 'commenter': 'crisclacerda', 'type': 'User'}, {'comment_id': 477034105, 'comment_body': 'explain what?', 'comment_created': datetime.datetime(2020, 8, 26, 4, 57, 33, tzinfo=datetime.timezone.utc), 'commenter': 'crisclacerda', 'type': 'User'}, {'comment_id': 477034557, 'comment_body': 'Not a hard requirement, but it helps, especially on the moving average that I have abused in the iron code, but that`s was probably a poor decision as well..', 'comment_created': datetime.datetime(2020, 8, 26, 4, 59, 30, tzinfo=datetime.timezone.utc), 'commenter': 'crisclacerda', 'type': 'User'}, {'comment_id': 477035137, 'comment_body': ""Do not get this too, it's just the arbitrary reasoning for choosing the window instead of any other? Or do you mean specifically about the double of that?"", 'comment_created': datetime.datetime(2020, 8, 26, 5, 1, 44, tzinfo=datetime.timezone.utc), 'commenter': 'crisclacerda', 'type': 'User'}, {'comment_id': 477038176, 'comment_body': 'hm, just removing the beats was my first idea but that does not work without an additional structure to keep track that we need to add the beats in this region later, and the big jump will result in very large beat length that will completely mess the average so removing them adds a lot of bookkeeping.\r\nMaybe we can set the beats to -1 or something like that and use that idea of beats not increasing as a way to tell not to consider these beats on iron code and just add the avarage length. I will try that, should work...', 'comment_created': datetime.datetime(2020, 8, 26, 5, 13, 10, tzinfo=datetime.timezone.utc), 'commenter': 'crisclacerda', 'type': 'User'}, {'comment_id': 477039902, 'comment_body': 'We need to copy either way, because by editing them on the fly we may need to shift almost the whole vector that will be copying in the same way, right?\r\nThen this makes it the code easier at a reasonable cost? Because then we are also iterating on the same vector we are editing and things can get messy easily', 'comment_created': datetime.datetime(2020, 8, 26, 5, 19, 33, tzinfo=datetime.timezone.utc), 'commenter': 'crisclacerda', 'type': 'User'}, {'comment_id': 477041039, 'comment_body': 'smoothBeatmap?\r\nironBeatmap?\r\nadjustBeatmap?', 'comment_created': datetime.datetime(2020, 8, 26, 5, 23, 37, tzinfo=datetime.timezone.utc), 'commenter': 'crisclacerda', 'type': 'User'}, {'comment_id': 477043327, 'comment_body': 'There is also another class that is not windowed in this file. Also like I mention somewhere in another comment that we use a double as the key it`s ""tuned"" to work only on the bpm values and may fail elsewhere.\r\nbpmStatics would be more truthful, but, beatStastics will keep it close to the beatutils where it belongs...', 'comment_created': datetime.datetime(2020, 8, 26, 5, 30, 59, tzinfo=datetime.timezone.utc), 'commenter': 'crisclacerda', 'type': 'User'}, {'comment_id': 477061837, 'comment_body': 'We need something where we are sure that the same memory is used without any malloc or new call during the processing. \r\nThe issue with the all std:: containers is that it is implementation defined. So you need a wrapper around it that reuses the already allocated memory or just use an established ring buffer solution. ', 'comment_created': datetime.datetime(2020, 8, 26, 6, 25, 37, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 477062884, 'comment_body': 'Normally we use a file per class. So finally it would be the best to spit the file up and name it according to the class. \r\nThe statistic functions have nothing to do with beats. The calling context defines what is in the values. So I think we should keep the names neutral. ', 'comment_created': datetime.datetime(2020, 8, 26, 6, 28, 10, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 477063891, 'comment_body': 'Ah Ok, Please comment that in the code. \r\nPlease also secure it against input data being nan. ', 'comment_created': datetime.datetime(2020, 8, 26, 6, 30, 18, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 477064306, 'comment_body': 'Please explain the purpose of the kMaxSecsPhaseError value and why we pick 25 ms ', 'comment_created': datetime.datetime(2020, 8, 26, 6, 31, 22, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 477064781, 'comment_body': ""I don't know. Please describe your decision in source code comments. "", 'comment_created': datetime.datetime(2020, 8, 26, 6, 32, 31, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 477066328, 'comment_body': 'Not really. \r\n""A median filter need an odd number to be able to return a single center value.""\r\n\r\nThinking about this, I think it is wrong to randomly drop a value. What if you accidentally drop the median value? \r\nI think it is better to not drop a value, but return one of the candidates or the average values of both. \r\n\r\n  ', 'comment_created': datetime.datetime(2020, 8, 26, 6, 36, 29, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 477067453, 'comment_body': 'I think we just need a longer comments. \r\nIn all the comments be sure not to explain the code we can read anyway, but describe why it is there. \r\nIn this case the advantages against the obvious solution, that was abandoned are interesting.', 'comment_created': datetime.datetime(2020, 8, 26, 6, 39, 7, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 477068149, 'comment_body': 'What the values are about.', 'comment_created': datetime.datetime(2020, 8, 26, 6, 40, 51, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 477069106, 'comment_body': 'Please explain as a code comments. \r\nCan we rely on this? I am in doubt. \r\n\r\nWe have already quantize beat length in the original complex SD.\r\nI think it would be more reliable to switch to integer numbers counting these samples. \r\n\r\n', 'comment_created': datetime.datetime(2020, 8, 26, 6, 43, 6, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 477069500, 'comment_body': 'Ah Ok, I Understand. \r\nPlease describe this as code comment. ', 'comment_created': datetime.datetime(2020, 8, 26, 6, 44, 2, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 477072168, 'comment_body': 'Yes, I would pick ""iron"", because ""smooth"" sounds like just applying a smoothing filter. The opposite is true, like ironing a shirt. The fabrics is smoothed, but the button bar and arms and so on are put in shape.   ', 'comment_created': datetime.datetime(2020, 8, 26, 6, 49, 57, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 477619264, 'comment_body': 'you can omit ""? true : false;""', 'comment_created': datetime.datetime(2020, 8, 26, 22, 14, 45, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 477619997, 'comment_body': 'please comment this condition. Why we allow to go behind the last beat?  ', 'comment_created': datetime.datetime(2020, 8, 26, 22, 16, 34, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 477620606, 'comment_body': 'can we avoid the bpm round trip here, and use the beat length instead? ', 'comment_created': datetime.datetime(2020, 8, 26, 22, 18, 13, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 477621945, 'comment_body': 'We actually want the beats at fractional position. Only this allows a real const tempo.  ', 'comment_created': datetime.datetime(2020, 8, 26, 22, 22, 6, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 477622574, 'comment_body': 'I think here we can also use samples directly. No need for converting to seconds and back. ', 'comment_created': datetime.datetime(2020, 8, 26, 22, 23, 52, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 477623352, 'comment_body': 'please comment that. ', 'comment_created': datetime.datetime(2020, 8, 26, 22, 25, 45, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 477624462, 'comment_body': 'I think this is the ironedBeat, right? Can we rename it? ', 'comment_created': datetime.datetime(2020, 8, 26, 22, 29, 1, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 477630086, 'comment_body': 'Why are you only go to the ""errorStartedGrowing"" beat? \r\nBut you use the average until the secondOutlier.\r\nThis way the average is not optimal. because it is calculated from the outlier and you do not reach zero error for the current beat.  ', 'comment_created': datetime.datetime(2020, 8, 26, 22, 42, 10, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 477640412, 'comment_body': 'Please change the algorithm to what I have done in the spread sheet.\r\nI have noticed to achieve better results going backwards from a longest region.  \r\n\r\n* loop backwards through the raw beats. and calculate the average beat length from the first beat.  \r\n* add an inner loop and check for outliers using the momentary average as  beat length.\r\n* once you have found an average with only single outlyers, store the beats using the current avarage.\r\n* reset and do the loop again, starting with the region from the found beat to the end.  \r\n\r\n\r\n\r\n', 'comment_created': datetime.datetime(2020, 8, 26, 22, 55, 44, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 477645158, 'comment_body': 'We even can omit the  use of bpmAvarageCalculator. \r\nJust \r\n```\r\n(rawbeats[rightIndex] - rawbeats[leftIndex]) /  (rightIndex - leftIndex) \r\n```', 'comment_created': datetime.datetime(2020, 8, 26, 23, 2, 7, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 477656453, 'comment_body': 'Ok, thanks for the clear explanation. I think I finally got it.', 'comment_created': datetime.datetime(2020, 8, 26, 23, 14, 30, tzinfo=datetime.timezone.utc), 'commenter': 'crisclacerda', 'type': 'User'}, {'comment_id': 477879634, 'comment_body': '> Why are you only go to the ""errorStartedGrowing"" beat?\r\n> But you use the average until the secondOutlier.\r\n> This way the average is not optimal. because it is calculated from the outlier and you do not reach zero error for the current beat.\r\n\r\nThe idea is to use it to reduce a growing offset instead of arbitrarily split the region into four like you originally suggested a few days ago.\r\nI know you just request me to implemented the latest algorithm on the spreadsheet and I agreed, but I made a simple two line change to this algorithm to use the average only until errorStartedGrowing like you pointed and I think it now works really well. IMHO maybe the curve looks even better (more changes, but smaller jumps) and I did not notice any phase problems on the beatgrid.\r\n\r\nYellow curve is the next commit.\r\n\r\n![newIroning](https://user-images.githubusercontent.com/61819301/91373152-03c8a280-e7ec-11ea-8508-662eb86d9fab.png)\r\n\r\n', 'comment_created': datetime.datetime(2020, 8, 27, 1, 35, 50, tzinfo=datetime.timezone.utc), 'commenter': 'crisclacerda', 'type': 'User'}, {'comment_id': 477920734, 'comment_body': 'No. This is the offset we add the mean beat lenght use to test the phase error.\r\nCorrectedOffset is the ironedBeat, which I just renamed.\r\nDo have suggestions for this name as well?', 'comment_created': datetime.datetime(2020, 8, 27, 2, 5, 35, tzinfo=datetime.timezone.utc), 'commenter': 'crisclacerda', 'type': 'User'}, {'comment_id': 477929876, 'comment_body': 'Right, changed. I remembered read that in some comment somewhere though. Maybe a different context..', 'comment_created': datetime.datetime(2020, 8, 27, 2, 12, 19, tzinfo=datetime.timezone.utc), 'commenter': 'crisclacerda', 'type': 'User'}, {'comment_id': 477930155, 'comment_body': 'Done', 'comment_created': datetime.datetime(2020, 8, 27, 2, 12, 30, tzinfo=datetime.timezone.utc), 'commenter': 'crisclacerda', 'type': 'User'}, {'comment_id': 477930370, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 8, 27, 2, 12, 38, tzinfo=datetime.timezone.utc), 'commenter': 'crisclacerda', 'type': 'User'}, {'comment_id': 477931082, 'comment_body': 'Awesome, done!', 'comment_created': datetime.datetime(2020, 8, 27, 2, 13, 9, tzinfo=datetime.timezone.utc), 'commenter': 'crisclacerda', 'type': 'User'}, {'comment_id': 477931402, 'comment_body': 'Done!', 'comment_created': datetime.datetime(2020, 8, 27, 2, 13, 21, tzinfo=datetime.timezone.utc), 'commenter': 'crisclacerda', 'type': 'User'}, {'comment_id': 477932075, 'comment_body': 'Right, done. No need for this function at all. Removed.', 'comment_created': datetime.datetime(2020, 8, 27, 2, 13, 51, tzinfo=datetime.timezone.utc), 'commenter': 'crisclacerda', 'type': 'User'}, {'comment_id': 478082533, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 8, 27, 4, 12, 2, tzinfo=datetime.timezone.utc), 'commenter': 'crisclacerda', 'type': 'User'}, {'comment_id': 478082794, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 8, 27, 4, 12, 16, tzinfo=datetime.timezone.utc), 'commenter': 'crisclacerda', 'type': 'User'}, {'comment_id': 478083064, 'comment_body': 'The whole point is that we can not use the average of the values because it might be an outlier from our frequencyOfTempos table. \r\nReturning both candidates will work though. But honestly, I don`t think we are likely to remove the median. The median is very likely to be a repeated value in the list. Also we just use it as a rough guess for the tempo to have something to start working with, if we actually remove the true median, the ""next median"" should be an equally good rough guess', 'comment_created': datetime.datetime(2020, 8, 27, 4, 12, 32, tzinfo=datetime.timezone.utc), 'commenter': 'crisclacerda', 'type': 'User'}, {'comment_id': 478083276, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 8, 27, 4, 12, 43, tzinfo=datetime.timezone.utc), 'commenter': 'crisclacerda', 'type': 'User'}, {'comment_id': 478083360, 'comment_body': ""I think it`s reliable. It's the same approach used all over beatutils all over for almost a decade."", 'comment_created': datetime.datetime(2020, 8, 27, 4, 12, 49, tzinfo=datetime.timezone.utc), 'commenter': 'crisclacerda', 'type': 'User'}, {'comment_id': 478083450, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 8, 27, 4, 12, 56, tzinfo=datetime.timezone.utc), 'commenter': 'crisclacerda', 'type': 'User'}, {'comment_id': 478083525, 'comment_body': 'changed', 'comment_created': datetime.datetime(2020, 8, 27, 4, 13, 1, tzinfo=datetime.timezone.utc), 'commenter': 'crisclacerda', 'type': 'User'}, {'comment_id': 478083642, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 8, 27, 4, 13, 8, tzinfo=datetime.timezone.utc), 'commenter': 'crisclacerda', 'type': 'User'}, {'comment_id': 478083734, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 8, 27, 4, 13, 15, tzinfo=datetime.timezone.utc), 'commenter': 'crisclacerda', 'type': 'User'}, {'comment_id': 478083834, 'comment_body': 'changed', 'comment_created': datetime.datetime(2020, 8, 27, 4, 13, 21, tzinfo=datetime.timezone.utc), 'commenter': 'crisclacerda', 'type': 'User'}, {'comment_id': 478086909, 'comment_body': 'changed to anchored', 'comment_created': datetime.datetime(2020, 8, 27, 4, 16, 38, tzinfo=datetime.timezone.utc), 'commenter': 'crisclacerda', 'type': 'User'}, {'comment_id': 478087006, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 8, 27, 4, 16, 43, tzinfo=datetime.timezone.utc), 'commenter': 'crisclacerda', 'type': 'User'}, {'comment_id': 478172407, 'comment_body': 'The issue for me is that this ""beatOffset"" reads to me as an offset, a delta value, compared to a beat which is not the case. I think it is a possible new beat position, with the average beat length applied. \r\n""possibleIronedBeat"" ... ', 'comment_created': datetime.datetime(2020, 8, 27, 6, 20, 19, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 478185163, 'comment_body': 'Maybe I did not understand the code. \r\n\r\nYou add here the meanBeatLength that changes per loop iteration to the beatOffset. \r\nThan you calculate the phaseError above from that. \r\nThis phase error has nothing to do with the final phase Error for the ironed beats, because they are calculated using the\r\nmeanBeatLength, stored when the error is growing.   \r\n\r\n', 'comment_created': datetime.datetime(2020, 8, 27, 6, 37, 10, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 478185684, 'comment_body': ""I don't get the idea here. Please comment.  "", 'comment_created': datetime.datetime(2020, 8, 27, 6, 37, 54, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 478867753, 'comment_body': 'I think this is only true because the values are quantized already bx our 0,011 Ms sample rate.\r\n\r\nAfter any ironing stage this will be broken.\r\nI think we need to add something that verifies this.\r\n\r\nCan we express that in a sample rate or precision parameter? \r\n', 'comment_created': datetime.datetime(2020, 8, 28, 6, 55, 20, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 478869034, 'comment_body': 'Ok, drop a note of that into the source.', 'comment_created': datetime.datetime(2020, 8, 28, 6, 58, 32, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 478871416, 'comment_body': 'The last section in the magic track is the real issue.\r\nDo we detect that as arrythmic section?\r\n\r\nPlease describe the issue as comment.\r\n', 'comment_created': datetime.datetime(2020, 8, 28, 7, 4, 33, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 478874586, 'comment_body': ""Don't use auto here, the real type is out of sight.\r\nWhenever unsure don't use auto."", 'comment_created': datetime.datetime(2020, 8, 28, 7, 12, 20, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 478876004, 'comment_body': 'What makes this call different from the one above? Please comment.', 'comment_created': datetime.datetime(2020, 8, 28, 7, 14, 41, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 478879508, 'comment_body': 'This disabled the const region algorithm.\r\nWill you abdomen it?\r\nHow about the last region in the ""magic"" track?', 'comment_created': datetime.datetime(2020, 8, 28, 7, 22, 47, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 478888155, 'comment_body': 'I am not sure if we should either drop the condition her or integrate it into the loop below.\r\nFrom a technical aspect this storm will work on two beats, but I am in doubt that is sensible.\r\n\r\nFinal our minimum size of real tempo is one measure. How about using 4 here in place of the most common 4/4 measure?', 'comment_created': datetime.datetime(2020, 8, 28, 7, 33, 24, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 478892281, 'comment_body': ""Nice. This allows one outlier per const section.\r\nProbably a good choice.\r\nMy first idea was to allow any number, bug permit two consecutive.\r\n\r\nThis can be finally a consideration how strict our ironing should work. I am unsure if this is worth a preference option.\r\nWe can postpone that. Let's make this branch mergsble first."", 'comment_created': datetime.datetime(2020, 8, 28, 7, 38, 25, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 478895725, 'comment_body': 'Please describe.\r\nThis becomes 32 for an everage 120 BPM track, right?', 'comment_created': datetime.datetime(2020, 8, 28, 7, 42, 30, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 478898855, 'comment_body': '32 beast = 8 measures = 16 s', 'comment_created': datetime.datetime(2020, 8, 28, 7, 46, 9, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 478927416, 'comment_body': 'This is quite rough as only condition.\r\nRemember that we replace the detected beats wirh random values.\r\nDoes it make sense to check if the tempo before and after are equal?\r\nI think we need also check if the phase roughly matches. \r\nMaybe we can also apply our 25 ms rule.\r\nIf that matches the ironing code will replace all three regions with a nice const beat-grid.', 'comment_created': datetime.datetime(2020, 8, 28, 8, 16, 39, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 479316658, 'comment_body': 'I was trying to see how the iron performed on const tempo. \r\nI think we still need the other algorithm after all', 'comment_created': datetime.datetime(2020, 8, 28, 13, 57, 40, tzinfo=datetime.timezone.utc), 'commenter': 'crisclacerda', 'type': 'User'}, {'comment_id': 479470165, 'comment_body': 'We have one now! ', 'comment_created': datetime.datetime(2020, 8, 28, 18, 30, 15, tzinfo=datetime.timezone.utc), 'commenter': 'crisclacerda', 'type': 'User'}, {'comment_id': 479548139, 'comment_body': 'I think we need to change this text and the algorithm to: \r\n""making them conform to the surrounding stable detected tempo', 'comment_created': datetime.datetime(2020, 8, 28, 21, 46, 10, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 479598653, 'comment_body': ""Won't the sample rate have the same problem since our samples are in double too and we allow fractional sample positions?\r\nA precision parameter will not work here because the comparison is made by qt container itself.\r\nUnless we add a class wrapper and overload ==\r\nShould do it like that or do you have better ideas?"", 'comment_created': datetime.datetime(2020, 8, 29, 2, 58, 42, tzinfo=datetime.timezone.utc), 'commenter': 'crisclacerda', 'type': 'User'}, {'comment_id': 479636503, 'comment_body': 'The idea is to round  double value to a number of bins with an int key. \r\nI think I works OK currently, because we already have quatization due to our sample rate of 0,011.. ms.\r\nIf we rewrite the algorithm to use the beat length in samples, we have already integer bins.\r\n\r\nWith an additional bin size parameter, we can allow any sample rate.', 'comment_created': datetime.datetime(2020, 8, 29, 10, 44, 18, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 479775990, 'comment_body': 'I think you can use just ""isnan"" and include ""util/fpclassify.h"" ', 'comment_created': datetime.datetime(2020, 8, 30, 14, 22, 10, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 479781980, 'comment_body': 'missing newline at EOF', 'comment_created': datetime.datetime(2020, 8, 30, 15, 15, 53, tzinfo=datetime.timezone.utc), 'commenter': 'Holzhaus', 'type': 'User'}, {'comment_id': 479782155, 'comment_body': 'Is this code supposed to be merged?', 'comment_created': datetime.datetime(2020, 8, 30, 15, 17, 37, tzinfo=datetime.timezone.utc), 'commenter': 'Holzhaus', 'type': 'User'}, {'comment_id': 479782236, 'comment_body': '```suggestion\r\n            const QHash<QString, QString>& extraVersionInfo);\r\n```', 'comment_created': datetime.datetime(2020, 8, 30, 15, 18, 32, tzinfo=datetime.timezone.utc), 'commenter': 'Holzhaus', 'type': 'User'}, {'comment_id': 479782354, 'comment_body': '```suggestion\r\n        const QMap<double, int>& frequencyOfTempos, const QList<double>& tempoList) {\r\n```', 'comment_created': datetime.datetime(2020, 8, 30, 15, 19, 47, tzinfo=datetime.timezone.utc), 'commenter': 'Holzhaus', 'type': 'User'}, {'comment_id': 479782575, 'comment_body': '```suggestion\r\n    if (sortedTempoList.size() % 2 == 0 && sortedTempoList.size() > 1) {\r\n```', 'comment_created': datetime.datetime(2020, 8, 30, 15, 21, 43, tzinfo=datetime.timezone.utc), 'commenter': 'Holzhaus', 'type': 'User'}, {'comment_id': 479782649, 'comment_body': 'I think this is easier to grasp:\r\n\r\n```suggestion\r\n    if (numberOfBeatsInFilteringWindow % 2 == 0) {\r\n```', 'comment_created': datetime.datetime(2020, 8, 30, 15, 22, 22, tzinfo=datetime.timezone.utc), 'commenter': 'Holzhaus', 'type': 'User'}, {'comment_id': 479782762, 'comment_body': 'IIRC we have a special sample rate type in `src/audio/types.h` that we should use here.', 'comment_created': datetime.datetime(2020, 8, 30, 15, 23, 45, tzinfo=datetime.timezone.utc), 'commenter': 'Holzhaus', 'type': 'User'}, {'comment_id': 479782923, 'comment_body': '```suggestion\r\n        const QVector<double>& rawbeats, const SampleRate& sampleRate, const double localBpm) {\r\n```', 'comment_created': datetime.datetime(2020, 8, 30, 15, 25, 6, tzinfo=datetime.timezone.utc), 'commenter': 'Holzhaus', 'type': 'User'}, {'comment_id': 479783211, 'comment_body': '```suggestion\r\n        const QVector<double>& rawbeats, const SampleRate& sampleRate) {\r\n```\r\n\r\nand elsewhere', 'comment_created': datetime.datetime(2020, 8, 30, 15, 28, 20, tzinfo=datetime.timezone.utc), 'commenter': 'Holzhaus', 'type': 'User'}, {'comment_id': 479783382, 'comment_body': '```suggestion\r\n        const QVector<double>& beats, int windowSize, const int windowStep,\r\n        const SampleRate& sampleRate, QMap<double, int>* pFrequencyHistogram) {\r\n```', 'comment_created': datetime.datetime(2020, 8, 30, 15, 30, 4, tzinfo=datetime.timezone.utc), 'commenter': 'Holzhaus', 'type': 'User'}, {'comment_id': 479783533, 'comment_body': 'DEBUG_ASSERT that `pFrequenceHistogram` is not null here?', 'comment_created': datetime.datetime(2020, 8, 30, 15, 31, 44, tzinfo=datetime.timezone.utc), 'commenter': 'Holzhaus', 'type': 'User'}, {'comment_id': 479783681, 'comment_body': ""```suggestion\r\n            QVector<double>& rawBeats, const SampleRate& sampleRate, double minBpm, double maxBpm, bool removeArrythmic);\r\n```\r\n\r\nusing enum class/QFlags instead of a bool would also increase readability from the caller's perspective."", 'comment_created': datetime.datetime(2020, 8, 30, 15, 32, 59, tzinfo=datetime.timezone.utc), 'commenter': 'Holzhaus', 'type': 'User'}, {'comment_id': 479783720, 'comment_body': 'newline at EOF', 'comment_created': datetime.datetime(2020, 8, 30, 15, 33, 27, tzinfo=datetime.timezone.utc), 'commenter': 'Holzhaus', 'type': 'User'}, {'comment_id': 479783768, 'comment_body': 'missing newline at eof', 'comment_created': datetime.datetime(2020, 8, 30, 15, 34, 5, tzinfo=datetime.timezone.utc), 'commenter': 'Holzhaus', 'type': 'User'}, {'comment_id': 479783801, 'comment_body': 'missing newline at eof', 'comment_created': datetime.datetime(2020, 8, 30, 15, 34, 20, tzinfo=datetime.timezone.utc), 'commenter': 'Holzhaus', 'type': 'User'}, {'comment_id': 479783837, 'comment_body': 'missing newline at eof', 'comment_created': datetime.datetime(2020, 8, 30, 15, 34, 33, tzinfo=datetime.timezone.utc), 'commenter': 'Holzhaus', 'type': 'User'}, {'comment_id': 479783908, 'comment_body': '```suggestion\r\n    static double median(const QList<double>& sortedItems);\r\n```', 'comment_created': datetime.datetime(2020, 8, 30, 15, 34, 57, tzinfo=datetime.timezone.utc), 'commenter': 'Holzhaus', 'type': 'User'}, {'comment_id': 479783936, 'comment_body': '```suggestion\r\n    static double mode(const QHash<double, int>& frequencyOfValues);\r\n```', 'comment_created': datetime.datetime(2020, 8, 30, 15, 35, 10, tzinfo=datetime.timezone.utc), 'commenter': 'Holzhaus', 'type': 'User'}, {'comment_id': 479784037, 'comment_body': '```suggestion\r\n    void update(double, double) override;\r\n    double compute() override;\r\n    \r\n    QHash<double, int> m_frequencyOfValues;\r\n```', 'comment_created': datetime.datetime(2020, 8, 30, 15, 36, 22, tzinfo=datetime.timezone.utc), 'commenter': 'Holzhaus', 'type': 'User'}, {'comment_id': 479786662, 'comment_body': 'I think we need to get rid here if the sample rate dependency. At this stage everything is sampled by the 0,01133 ms raster we use initialy.\r\nUsing BPM as intermediate values turns integer int doubles, which are harder to handle in the statistics filter. See my comments about bin size parameter there.', 'comment_created': datetime.datetime(2020, 8, 30, 16, 2, 34, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 479789889, 'comment_body': 'Why are these preferences? What is the use case for not using them?', 'comment_created': datetime.datetime(2020, 8, 30, 16, 35, 45, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 479790139, 'comment_body': '```suggestion\r\n// to tell the MSVC compiler about `isnan`\r\n```', 'comment_created': datetime.datetime(2020, 8, 30, 16, 38, 27, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 479790271, 'comment_body': '```suggestion\r\n/// of a series of tempo values and are called from BeatUtils\r\nclass WindowedStatistics {\r\n```\r\nNo newline between documentation and the class declaration.', 'comment_created': datetime.datetime(2020, 8, 30, 16, 39, 54, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 479790545, 'comment_body': '```suggestion\r\n// a 25ms tolerence because this small of a difference is inaudible\r\n```\r\n?', 'comment_created': datetime.datetime(2020, 8, 30, 16, 42, 20, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 479790991, 'comment_body': ""```suggestion\r\n// maximum difference for BPMs to be considered the same\r\n```\r\nI'm unclear why both this and kMaxSecsPhaseError exist. Could this be defined in terms of kMaxSecsPhaseError?"", 'comment_created': datetime.datetime(2020, 8, 30, 16, 46, 15, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 479791384, 'comment_body': ""I don't understand what this is saying."", 'comment_created': datetime.datetime(2020, 8, 30, 16, 50, 5, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 479791560, 'comment_body': '```suggestion\r\n    auto tempoMedianFilter = movingMedian(numberOfBeatsInFilteringWindow);\r\n```\r\nUse camelCase for function names.', 'comment_created': datetime.datetime(2020, 8, 30, 16, 51, 39, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 479791677, 'comment_body': '```suggestion\r\n    // regions of stable tempos and independently make const tempo or ironed grid for them\r\n```', 'comment_created': datetime.datetime(2020, 8, 30, 16, 52, 45, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 479791984, 'comment_body': ""```suggestion\r\n        // value so we don't consider changes to a neighboring value in the ordered tempo table\r\n```"", 'comment_created': datetime.datetime(2020, 8, 30, 16, 55, 40, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 479792019, 'comment_body': '```suggestion\r\n        // Check if the new tempo is the right neighbor of the previous tempo\r\n```', 'comment_created': datetime.datetime(2020, 8, 30, 16, 56, 3, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 479792046, 'comment_body': '```suggestion\r\n        } else if (stableTemposByPosition.last() != frequencyOfTempos.lastKey() &&\r\n```', 'comment_created': datetime.datetime(2020, 8, 30, 16, 56, 19, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 479792718, 'comment_body': '```suggestion\r\n        // Check if the new tempo is the left neighboor of the previous tempo\r\n        } else if (stableTemposByPosition.last() != frequencyOfTempos.firstKey() &&\r\n```', 'comment_created': datetime.datetime(2020, 8, 30, 17, 3, 23, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 479792857, 'comment_body': 'I don\'t understand this comment. What may not be the case? ""We will *""??', 'comment_created': datetime.datetime(2020, 8, 30, 17, 4, 51, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 479793256, 'comment_body': 'I do not understand this, can you elaborate, please?', 'comment_created': datetime.datetime(2020, 8, 30, 17, 9, 17, tzinfo=datetime.timezone.utc), 'commenter': 'crisclacerda', 'type': 'User'}, {'comment_id': 479793601, 'comment_body': 'I would say so, it`s protected under a new command-line argument ""--analyzerDebug"" and will be going very useful for future improvements on this...', 'comment_created': datetime.datetime(2020, 8, 30, 17, 13, 19, tzinfo=datetime.timezone.utc), 'commenter': 'crisclacerda', 'type': 'User'}, {'comment_id': 479794063, 'comment_body': 'Enable arrhythmic may remove a intentional musical change and be unwanted, not sure about the ironing I can`t think of why not use it actually, maybe on some super edge cases it will perform worse than the raw fluctuations..', 'comment_created': datetime.datetime(2020, 8, 30, 17, 17, 53, tzinfo=datetime.timezone.utc), 'commenter': 'crisclacerda', 'type': 'User'}, {'comment_id': 479794424, 'comment_body': 'Interesting idea. Originally these are independent and used in a very different context but I guess it makes sense to be defined in terms of the phase error.', 'comment_created': datetime.datetime(2020, 8, 30, 17, 21, 29, tzinfo=datetime.timezone.utc), 'commenter': 'crisclacerda', 'type': 'User'}, {'comment_id': 479795647, 'comment_body': 'Have you ever actually had that be a problem? I have not.', 'comment_created': datetime.datetime(2020, 8, 30, 17, 33, 49, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 479795824, 'comment_body': 'We should use Qt logging categories instead of command line options... #2782', 'comment_created': datetime.datetime(2020, 8, 30, 17, 35, 30, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 479795867, 'comment_body': ""I'm fine with using the command line option for now though."", 'comment_created': datetime.datetime(2020, 8, 30, 17, 36, 1, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 479798400, 'comment_body': '```suggestion\r\n    // A common problem the analyzer encounters is to detect the tempo in regions without\r\n    // prominent rhythmic sounds. This happens frequently on builds and breaks\r\n    // with heavy effects in EDM. These occur mostly on beatless regions,\r\n    // so we do not want them to be marked as a different tempo because they are\r\n    // still syncable in the true tempo. We remove these arrhythmic regions if they are shorter\r\n    // than a 16s threshold and return to same tempo they start deviating from.\r\n    // 16s is 32 beats or 8 measure on a typical 4/4 120 bpm which is a reasonable\r\n    // guess for an intended musical change.\r\n    // TODO(Cristiano) Use a better heuristic for ""finding"" these regions\r\n    // like for example the average energy of the beats.\r\n```', 'comment_created': datetime.datetime(2020, 8, 30, 18, 1, 10, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 479798485, 'comment_body': 'Should the threshold be calculated using the tempo instead of an arbitrary assumption of 120 BPM?', 'comment_created': datetime.datetime(2020, 8, 30, 18, 2, 13, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 479798794, 'comment_body': '```suggestion\r\n            double regionLengthInFrames = beats[limitAtRight] - beats[limitAtLeft];\r\n```\r\n?', 'comment_created': datetime.datetime(2020, 8, 30, 18, 4, 51, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 479798919, 'comment_body': '```suggestion\r\n        // Since we changed our beats vector we need to recalculate its tempos\r\n```', 'comment_created': datetime.datetime(2020, 8, 30, 18, 5, 54, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 479798973, 'comment_body': '```suggestion\r\n        double leftRightDiff = 1.0;\r\n```\r\n?', 'comment_created': datetime.datetime(2020, 8, 30, 18, 6, 35, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 479799051, 'comment_body': '```suggestion\r\n        int partLength = beatEnd - beatStart;\r\n```', 'comment_created': datetime.datetime(2020, 8, 30, 18, 7, 3, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 479799154, 'comment_body': 'Either delete commented code, add a TODO explaining what remains to be done, or uncomment it.', 'comment_created': datetime.datetime(2020, 8, 30, 18, 8, 15, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 479799544, 'comment_body': '```suggestion\r\n        // not const, make ironed grid of longest sequence within a 25ms phase error\r\n```', 'comment_created': datetime.datetime(2020, 8, 30, 18, 12, 10, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 479799665, 'comment_body': '```suggestion\r\n    // Length of a beat at localBpm in frames.\r\n```', 'comment_created': datetime.datetime(2020, 8, 30, 18, 13, 51, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 479799753, 'comment_body': '```suggestion\r\n    // a hi hat was detect instead of a kick drum - but there is nothing we can do\r\n```', 'comment_created': datetime.datetime(2020, 8, 30, 18, 14, 45, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 479800214, 'comment_body': 'red? What is red about this?', 'comment_created': datetime.datetime(2020, 8, 30, 18, 19, 48, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 479800253, 'comment_body': '```suggestion\r\n    // once you have found an average with only single outliers, store the beats using the current average.\r\n```', 'comment_created': datetime.datetime(2020, 8, 30, 18, 19, 59, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 479803789, 'comment_body': 'More like an internal joke, it was red on the graph on the spreadsheet @daschuer made it, and he left me a big todo to implement the red algorithm. Should remove or ok to keep?', 'comment_created': datetime.datetime(2020, 8, 30, 18, 57, 28, tzinfo=datetime.timezone.utc), 'commenter': 'crisclacerda', 'type': 'User'}, {'comment_id': 479803897, 'comment_body': 'Nobody who reads this code in 10 years is going to know that. Please remove it.', 'comment_created': datetime.datetime(2020, 8, 30, 18, 59, 7, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 479818459, 'comment_body': ""These are classes constructors, aren't those suppose to start with a Capital letter?"", 'comment_created': datetime.datetime(2020, 8, 30, 21, 36, 26, tzinfo=datetime.timezone.utc), 'commenter': 'crisclacerda', 'type': 'User'}, {'comment_id': 479819177, 'comment_body': 'sorry, I misunderstood then', 'comment_created': datetime.datetime(2020, 8, 30, 21, 44, 19, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 479819512, 'comment_body': ""We have only tested a few tracks. For a good community feedback we need a way to easily revert back to the 2.3 algorithm. That's the main reason for this option. \r\nIf it turns out that there is no other use case than that we can remove the preferences option. \r\nI think we can also remove the pure constant option in turn, but let us collect opinions first.   \r\n\r\nThe ironing comes with the cost to not follow the musician. \r\nWe have discussed to put this into an abstract strength parameter that tweaks the internal parameter for a certain type of track. \r\n\r\nFor now we are quite happy with the defaults though.    \r\n"", 'comment_created': datetime.datetime(2020, 8, 30, 21, 48, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 479820631, 'comment_body': 'I am opposed to adding more options without good reason. The ultimate goal here is to not require any manual intervention from the user.\r\n\r\n> For a good community feedback we need a way to easily revert back to the 2.3 algorithm.\r\n\r\nHuh? Why? Few people even knew it existed before.', 'comment_created': datetime.datetime(2020, 8, 30, 21, 55, 4, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 479824225, 'comment_body': ""Do you mean the bool removeArrythmic?\r\nI don't understand how a enum would be helpful, can you clarify?"", 'comment_created': datetime.datetime(2020, 8, 30, 22, 33, 18, tzinfo=datetime.timezone.utc), 'commenter': 'crisclacerda', 'type': 'User'}, {'comment_id': 479827720, 'comment_body': 'Consider this an intermediate state until we have the experience which preferences options we really need. \r\n\r\nJust after merge we need a way to revert back to the old behavior, in case we have messed up something for some tracks. ', 'comment_created': datetime.datetime(2020, 8, 30, 23, 11, 35, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 479828447, 'comment_body': ""If we add a TODO to our release checklist and remove that option before releasing 2.4 I think it's okay to add it now. "", 'comment_created': datetime.datetime(2020, 8, 30, 23, 18, 55, tzinfo=datetime.timezone.utc), 'commenter': 'Holzhaus', 'type': 'User'}, {'comment_id': 479828998, 'comment_body': 'Nobody has provided a good reason why these should ever be disabled. Please remove them.', 'comment_created': datetime.datetime(2020, 8, 30, 23, 24, 3, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 479829876, 'comment_body': '```suggestion\r\n    resultHeader = ""\\nCorrected beat length\\n"";\r\n```', 'comment_created': datetime.datetime(2020, 8, 30, 23, 32, 25, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 479829907, 'comment_body': '```suggestion\r\n    resultHeader = ""\\nRaw beat length\\n"";\r\n```', 'comment_created': datetime.datetime(2020, 8, 30, 23, 32, 37, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 479833442, 'comment_body': ""This doesn't build now. Please use the syntax\r\n```\r\nMovingMedian tempoMedianFilter(numberOfBeatsInFilteringWindow);\r\n```\r\nThis makes it clear that MovingMedian is a class name even when looking at the diff on GitHub without syntax highlighting. "", 'comment_created': datetime.datetime(2020, 8, 31, 0, 4, 26, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 479836627, 'comment_body': 'I agree with @daschuer that we should have the preferences at least while this is in an ""experimental"" state.\r\nIt allows to simply fallback to the old behavior if we unaware mess something up.', 'comment_created': datetime.datetime(2020, 8, 31, 0, 29, 52, tzinfo=datetime.timezone.utc), 'commenter': 'crisclacerda', 'type': 'User'}, {'comment_id': 479837644, 'comment_body': 'If you want to keep these, please provide an example track where the outcome is worse with them. Otherwise we are just adding more clutter to the preferences.', 'comment_created': datetime.datetime(2020, 8, 31, 0, 36, 57, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 479845688, 'comment_body': '@daschuer asked to write like this', 'comment_created': datetime.datetime(2020, 8, 31, 1, 27, 26, tzinfo=datetime.timezone.utc), 'commenter': 'crisclacerda', 'type': 'User'}, {'comment_id': 479845878, 'comment_body': ""```suggestion\r\n    // to compute the median value and it must belong to frequencyOfTempos.\r\n    // The median is only used as rough guess of the tempo so it's ok that\r\n```"", 'comment_created': datetime.datetime(2020, 8, 31, 1, 28, 35, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 479846060, 'comment_body': '```suggestion\r\n    // we accidentally change the median by popping the last value.\r\n```', 'comment_created': datetime.datetime(2020, 8, 31, 1, 29, 26, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 479846277, 'comment_body': ""I don't care much either way, but @daschuer could you explain why you prefer it this way?"", 'comment_created': datetime.datetime(2020, 8, 31, 1, 30, 21, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 479847130, 'comment_body': ""```suggestion\r\n    DEBUG_ASSERT(pFrequencyHistogram);\r\n```\r\n`NULL` is a legacy hack from before C++11. You could use `nullptr` instead, but that's not even necessary in this case."", 'comment_created': datetime.datetime(2020, 8, 31, 1, 35, 9, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 479929344, 'comment_body': 'The issues is that we don\'t have the overview yet. We need an easy way for the average user to switch between old an new behavior to compare the results.  \r\n\r\nThe ""The Learning Process"" track is a good example where the arrhythmic detection fails for instance. The vocals are detected as beats. If we now improve the algorithm using this track, we make it worse for other tracks where beats are detected as vocals. In this case user may need to disable the arrhythmic detection.\r\n\r\nMusic is so different that we IMHO need to provide different strategies even in the release version, reflected in preferences option. These will finally be part of a release version of Mixxx, but will look totally different, without turning implementation details to the outside. \r\n\r\nThis is just an in-progress state.  ', 'comment_created': datetime.datetime(2020, 8, 31, 6, 48, 38, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 479939138, 'comment_body': 'With =  it is obvious that we assign a new variable. In the other version the variable name can be misread as a function call. We use this pattern in many places in Mixxx and I prefer this whenever possible. \r\n\r\nWe had also a discussion about his, but I cannot find it. It looks like we failed to put that into the Wiki. \r\n\r\n\r\n\r\n', 'comment_created': datetime.datetime(2020, 8, 31, 7, 11, 49, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 482701033, 'comment_body': 'I think the main use case for the preferences is developer wise than anything else. \r\nInstead of the need to recompile the code to use/see different results a preference makes it so much easier.', 'comment_created': datetime.datetime(2020, 9, 3, 4, 45, 46, tzinfo=datetime.timezone.utc), 'commenter': 'crisclacerda', 'type': 'User'}, {'comment_id': 482729816, 'comment_body': ""The preferences are not a place for developer tools, they're for users."", 'comment_created': datetime.datetime(2020, 9, 3, 6, 21, 24, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 482731566, 'comment_body': 'Yes, right. We have already explained that we will change them according to our growing experience during user tests. \r\nSo what is your issue? ', 'comment_created': datetime.datetime(2020, 9, 3, 6, 25, 25, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 482734014, 'comment_body': 'In that case I agree with @Holzhaus. We can merge them, but they should be removed before we release 2.4, probably before releasing 2.4 beta.', 'comment_created': datetime.datetime(2020, 9, 3, 6, 31, 21, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 483745265, 'comment_body': 'Sounds good to me!', 'comment_created': datetime.datetime(2020, 9, 4, 16, 53, 39, tzinfo=datetime.timezone.utc), 'commenter': 'crisclacerda', 'type': 'User'}, {'comment_id': 484073854, 'comment_body': 'Please use new-style signal/slot syntax.', 'comment_created': datetime.datetime(2020, 9, 6, 14, 1, 1, tzinfo=datetime.timezone.utc), 'commenter': 'Holzhaus', 'type': 'User'}, {'comment_id': 484074063, 'comment_body': '```suggestion\r\n    /// The median is the middle value of a sorted sequence\r\n    /// If sequence is even the mean of both middle values.\r\n    static double median(const QList<double>& sortedItems);\r\n    /// The mode is most repeated value in a sequence\r\n    static double mode(const QHash<int, int>& frequencyOfValues);\r\n```', 'comment_created': datetime.datetime(2020, 9, 6, 14, 2, 56, tzinfo=datetime.timezone.utc), 'commenter': 'Holzhaus', 'type': 'User'}]","[{'commit_sha': '4236315a4e439f8afd2c9f9bb168de299d4a1a29', 'committer_username': 'crisclacerda', 'committer_name': 'Cristiano Lacerda', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 5, 6, 24, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '21adb5be3cde952638c475ef5deeafcf8a41c998', 'committer_username': 'crisclacerda', 'committer_name': 'Cristiano Lacerda', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 5, 6, 24, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4b60566852318c31f53798f1cf7de853a5eb074a', 'committer_username': 'crisclacerda', 'committer_name': 'Cristiano Lacerda', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 5, 6, 24, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8cd56e6d02c795e32740b5d8b473c91c7a02ba8e', 'committer_username': 'crisclacerda', 'committer_name': 'Cristiano Lacerda', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 5, 6, 24, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '22119d13d0ef163e2dd987662e0b0d386ab9ec00', 'committer_username': 'crisclacerda', 'committer_name': 'Cristiano Lacerda', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 5, 6, 24, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '50e4afc5f839c2eccaaea696e039ab3f23d0726d', 'committer_username': 'crisclacerda', 'committer_name': 'Cristiano Lacerda', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 5, 6, 24, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '47a229880065b0816147fdcad31982d932173127', 'committer_username': 'crisclacerda', 'committer_name': 'Cristiano Lacerda', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 5, 6, 24, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9928587d6ba9560eb3b0ce5b0f261ca3d00da822', 'committer_username': 'crisclacerda', 'committer_name': 'Cristiano Lacerda', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 5, 6, 24, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b7b0b318a668dc51ed1b2386d0509a948df0c265', 'committer_username': 'crisclacerda', 'committer_name': 'Cristiano Lacerda', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 5, 6, 24, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2cc53e59d0858bd322731befdef1c5c0c4a264ac', 'committer_username': 'crisclacerda', 'committer_name': 'Cristiano Lacerda', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 5, 6, 24, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '35236ac2a789312b2ddda6fe2a82f4f8aa49157a', 'committer_username': 'crisclacerda', 'committer_name': 'Cristiano Lacerda', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 5, 6, 24, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '289ac87962966ada184783df4930ee558954c4fc', 'committer_username': 'crisclacerda', 'committer_name': 'Cristiano Lacerda', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 5, 6, 24, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '74a95a7bbcda3bc1259c8d7ec465aeabf8ee158a', 'committer_username': 'crisclacerda', 'committer_name': 'Cristiano Lacerda', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 5, 6, 24, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fb2b6ba9681f3b50c2f3c41c474c79044964123e', 'committer_username': 'crisclacerda', 'committer_name': 'Cristiano Lacerda', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 5, 6, 24, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f712f66c5c8450c794929dec83b54fc4eb319345', 'committer_username': 'crisclacerda', 'committer_name': 'Cristiano Lacerda', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 5, 6, 24, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4c1ed3cb5a9c99e42163b60171a3031017b400c6', 'committer_username': 'crisclacerda', 'committer_name': 'Cristiano Lacerda', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 5, 6, 24, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '43f19a062e10390b497919e4ed99606eabee0930', 'committer_username': 'crisclacerda', 'committer_name': 'Cristiano Lacerda', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 5, 6, 24, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '879603f599b39ae72212774b65eab428438ca186', 'committer_username': 'crisclacerda', 'committer_name': 'Cristiano Lacerda', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 5, 6, 24, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9031affb7c767bbc36985e052c17b073c5938f02', 'committer_username': 'crisclacerda', 'committer_name': 'Cristiano Lacerda', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 5, 6, 24, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '74cfc23d5e517192aa4a1d8e7b7a035025b5b518', 'committer_username': 'crisclacerda', 'committer_name': 'Cristiano Lacerda', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 5, 6, 24, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e144e9219df74aa1c3cdd14d61813218cd5b84fc', 'committer_username': 'crisclacerda', 'committer_name': 'Cristiano Lacerda', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 5, 6, 24, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e838292ca0cc442248641bac0f52fcc33d6056e8', 'committer_username': 'crisclacerda', 'committer_name': 'Cristiano Lacerda', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 5, 6, 24, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '266eadeb71390c70795e9647196c576146972da9', 'committer_username': 'crisclacerda', 'committer_name': 'Cristiano Lacerda', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 5, 6, 24, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'da6d27563b8205e3ddad74ca4b8d6cd8c52354d1', 'committer_username': 'crisclacerda', 'committer_name': 'Cristiano Lacerda', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 5, 6, 24, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7f4f0df272ac41c92e531c0eea0dfbca68bf50db', 'committer_username': 'crisclacerda', 'committer_name': 'Cristiano Lacerda', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 5, 6, 24, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9dfb9a0d2f8a89342ce2065770ae4bc900159447', 'committer_username': 'crisclacerda', 'committer_name': 'Cristiano Lacerda', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 5, 6, 24, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ea016e08c30a410c8cebb15941d7383a58dfd17b', 'committer_username': 'crisclacerda', 'committer_name': 'Cristiano Lacerda', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 5, 6, 24, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '583cbaaca05bf22832c014c7d9f238f8564ea8e1', 'committer_username': 'crisclacerda', 'committer_name': 'Cristiano Lacerda', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 5, 6, 24, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1aa3fbcffaefc04df148363579ae46d353ebb392', 'committer_username': 'crisclacerda', 'committer_name': 'Cristiano Lacerda', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 5, 6, 24, 17, tzinfo=datetime.timezone.utc)}]",Cristiano Lacerda,61819301,,User,,7,,0,3

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
10126031,mixxx,mixxxdj/mixxx,C++,1252,4341,136,357,48327,2136,16,251,"[{'id': 447668045, 'number': 2930, 'closed': None, 'created': datetime.datetime(2020, 7, 10, 22, 24, 55, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 677, 'deletions': 56, 'state': 'open'}, {'id': 435585556, 'number': 2877, 'closed': None, 'created': datetime.datetime(2020, 6, 17, 3, 51, 14, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 3474, 'deletions': 52, 'state': 'open'}, {'id': 428806229, 'number': 2847, 'closed': datetime.datetime(2020, 6, 18, 2, 22, 47, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 5, 22, 12, 45, tzinfo=datetime.timezone.utc), 'time_taken': 1051802.0, 'time_delta': '12 days, 4:10:02', 'additions': 345, 'deletions': 30, 'state': 'closed'}, {'id': 405597429, 'number': 2683, 'closed': datetime.datetime(2020, 4, 21, 14, 8, 12, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 4, 19, 3, 26, 58, tzinfo=datetime.timezone.utc), 'time_taken': 211274.0, 'time_delta': '2 days, 10:41:14', 'additions': 26, 'deletions': 39, 'state': 'closed'}, {'id': 384420404, 'number': 2531, 'closed': datetime.datetime(2020, 3, 8, 6, 52, 26, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 3, 5, 17, 57, 48, tzinfo=datetime.timezone.utc), 'time_taken': 219278.0, 'time_delta': '2 days, 12:54:38', 'additions': 19, 'deletions': 4, 'state': 'closed'}]"
