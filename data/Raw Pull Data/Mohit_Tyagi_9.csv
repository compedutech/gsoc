pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
440232003,Create additional image store for podman,"This is intended to create additional image store directory (in unpacked.cern.ch by ducc) to be used by podman as part of GSoC 2020 project.

The library creates the following directory structure: [podmanStore](https://github.com/Mohitty/PodmanAdditonalStore/tree/master/additionalstore_overlay)

And is described in detail [here](https://github.com/Mohitty/PodmanAdditonalStore/blob/master/README.md) and [here](https://medium.com/@mohit2501tyagi/lets-walk-through-podman-37636cf223c5)

@siscia ",True,2582,https://api.github.com/repos/cvmfs/cvmfs/pulls/2582,https://github.com/cvmfs/cvmfs/pull/2582,closed,1016,125,14,24,28,99,0,0,[],2020-06-25 20:08:05+00:00,2020-12-14 15:22:51+00:00,14843686.0,"171 days, 19:14:46","[{'comment_id': 446025385, 'comment_body': 'Long lists of `false`/`true` are usually prone to mistakes.  Can we instead pass a config struct with named parameters or at least comment the parameter names for each of the booleans?', 'comment_created': datetime.datetime(2020, 6, 26, 7, 51, 36, tzinfo=datetime.timezone.utc), 'commenter': 'jblomer', 'type': 'User'}, {'comment_id': 446026408, 'comment_body': 'Missing newline', 'comment_created': datetime.datetime(2020, 6, 26, 7, 53, 36, tzinfo=datetime.timezone.utc), 'commenter': 'jblomer', 'type': 'User'}, {'comment_id': 446026768, 'comment_body': 'Missing newline', 'comment_created': datetime.datetime(2020, 6, 26, 7, 54, 21, tzinfo=datetime.timezone.utc), 'commenter': 'jblomer', 'type': 'User'}, {'comment_id': 446027170, 'comment_body': 'Add comment', 'comment_created': datetime.datetime(2020, 6, 26, 7, 55, 15, tzinfo=datetime.timezone.utc), 'commenter': 'jblomer', 'type': 'User'}, {'comment_id': 446028102, 'comment_body': ""Please add a function comment.  Shouldn't there be a standard library routine that generates UUIDs?"", 'comment_created': datetime.datetime(2020, 6, 26, 7, 57, 11, tzinfo=datetime.timezone.utc), 'commenter': 'jblomer', 'type': 'User'}, {'comment_id': 446034135, 'comment_body': ""Why do we need lock files?  Shouldn't cvmfs transactions make sure that images are imported in an orderly fashion?"", 'comment_created': datetime.datetime(2020, 6, 26, 8, 10, 8, tzinfo=datetime.timezone.utc), 'commenter': 'jblomer', 'type': 'User'}, {'comment_id': 446036056, 'comment_body': 'This flag, can it be a negative flag?', 'comment_created': datetime.datetime(2020, 6, 26, 8, 14, 4, tzinfo=datetime.timezone.utc), 'commenter': 'siscia', 'type': 'User'}, {'comment_id': 446186977, 'comment_body': 'Hi @jblomer , these lock files are meant for podman to read. Podman expects lock files in the image store directories. I will add comments for the functions. Their role will be more clearer then', 'comment_created': datetime.datetime(2020, 6, 26, 13, 34, 4, tzinfo=datetime.timezone.utc), 'commenter': 'Mohitty', 'type': 'User'}, {'comment_id': 446318874, 'comment_body': 'updated the function to use github.com/google/uuid to generate uuid.', 'comment_created': datetime.datetime(2020, 6, 26, 17, 33, 51, tzinfo=datetime.timezone.utc), 'commenter': 'Mohitty', 'type': 'User'}, {'comment_id': 446833147, 'comment_body': 'Why this one is declared here?', 'comment_created': datetime.datetime(2020, 6, 29, 7, 45, 26, tzinfo=datetime.timezone.utc), 'commenter': 'siscia', 'type': 'User'}, {'comment_id': 454329312, 'comment_body': '@Mohitty This need to be declared here?', 'comment_created': datetime.datetime(2020, 7, 14, 12, 45, 49, tzinfo=datetime.timezone.utc), 'commenter': 'siscia', 'type': 'User'}, {'comment_id': 454330017, 'comment_body': 'It is not clear to me why we need all this. There is some interface that need to be Closer? Which one?', 'comment_created': datetime.datetime(2020, 7, 14, 12, 47, 11, tzinfo=datetime.timezone.utc), 'commenter': 'siscia', 'type': 'User'}, {'comment_id': 454332533, 'comment_body': 'Can we be any smarter here? To **download** the layer, I need to know if the layer will be used by the podman store?\r\n\r\nI would tend to say that, ""No, to **download** the layer, I don\'t need to know how the layer will be used"".', 'comment_created': datetime.datetime(2020, 7, 14, 12, 51, 31, tzinfo=datetime.timezone.utc), 'commenter': 'siscia', 'type': 'User'}, {'comment_id': 454336155, 'comment_body': 'All the method of `Image` take a pointer. This allow to modify internally the `Image` structure, which, in turn, is very useful for caching, especially for the manifest.\r\n\r\nIt is a good idea to have all the method on the same structure use the same calling convention if possible/appropriate.', 'comment_created': datetime.datetime(2020, 7, 14, 12, 57, 45, tzinfo=datetime.timezone.utc), 'commenter': 'siscia', 'type': 'User'}, {'comment_id': 457312035, 'comment_body': ""I don't really get why we need this"", 'comment_created': datetime.datetime(2020, 7, 20, 11, 50, 57, tzinfo=datetime.timezone.utc), 'commenter': 'siscia', 'type': 'User'}, {'comment_id': 457314653, 'comment_body': 'Similarly, why do we need this? A simple io.ReadCloser is not enough?', 'comment_created': datetime.datetime(2020, 7, 20, 11, 54, 48, tzinfo=datetime.timezone.utc), 'commenter': 'siscia', 'type': 'User'}, {'comment_id': 457315936, 'comment_body': 'Why this is declared here? Can we do without it?', 'comment_created': datetime.datetime(2020, 7, 20, 11, 56, 38, tzinfo=datetime.timezone.utc), 'commenter': 'siscia', 'type': 'User'}, {'comment_id': 457317748, 'comment_body': '@Mohitty Can you please address this comment as well?', 'comment_created': datetime.datetime(2020, 7, 20, 11, 59, 16, tzinfo=datetime.timezone.utc), 'commenter': 'siscia', 'type': 'User'}, {'comment_id': 457317946, 'comment_body': '@Mohitty', 'comment_created': datetime.datetime(2020, 7, 20, 11, 59, 34, tzinfo=datetime.timezone.utc), 'commenter': 'siscia', 'type': 'User'}, {'comment_id': 457328950, 'comment_body': ""@Mohitty hummm, I would say that we want something different.\n\nLook at the code, we invoke `GetPodmanInfo()` and we create (or get a previously allocated) pointer to a map. \nThen, throught that pointer, we update the map.\n\nWouldn't it be simpler a method like: `StoreDigestLayerMap` (awful name, so please pick something a little better) that would get the layer.Digest and the buffer, and it will do the same, but hiddend for this piece of bussines logic?\n\nWhat happens if we do this operation ALWAYS, no matter if we are storing podman stuff or not? It is a problem? Do we incur in a performance penality?"", 'comment_created': datetime.datetime(2020, 7, 20, 12, 16, 16, tzinfo=datetime.timezone.utc), 'commenter': 'siscia', 'type': 'User'}, {'comment_id': 457335332, 'comment_body': ""We introduced a `calculateID` function, didn't we? Either use it, or remove it altogether."", 'comment_created': datetime.datetime(2020, 7, 20, 12, 25, 42, tzinfo=datetime.timezone.utc), 'commenter': 'siscia', 'type': 'User'}, {'comment_id': 457358002, 'comment_body': 'Also, the use of TeeReadCloser against a bytes.Buffer implies that we keep everything in memory. Unfortunately I am not sure it is a suitable solution. We might have quite large layers... Like 1GB layers...', 'comment_created': datetime.datetime(2020, 7, 20, 12, 56, 52, tzinfo=datetime.timezone.utc), 'commenter': 'siscia', 'type': 'User'}, {'comment_id': 457402054, 'comment_body': 'For instance, consider this snippet: https://play.golang.org/p/YrPv33KRqgi\n\n', 'comment_created': datetime.datetime(2020, 7, 20, 13, 49, 55, tzinfo=datetime.timezone.utc), 'commenter': 'siscia', 'type': 'User'}, {'comment_id': 457403598, 'comment_body': 'Can we do the same without an external dependency?', 'comment_created': datetime.datetime(2020, 7, 20, 13, 51, 34, tzinfo=datetime.timezone.utc), 'commenter': 'siscia', 'type': 'User'}, {'comment_id': 457406373, 'comment_body': 'This function is not more appropriate in cvmfs.go?\n\nIt will make simpler to split the huge `lib` package in a smaller `cvmfs` package eventually.', 'comment_created': datetime.datetime(2020, 7, 20, 13, 54, 32, tzinfo=datetime.timezone.utc), 'commenter': 'siscia', 'type': 'User'}, {'comment_id': 457407361, 'comment_body': 'Unfortunately not all systems have a big and ready to use /tmp directory.\n\nWe create above the function `UserDefinedTempDir` just for this case.', 'comment_created': datetime.datetime(2020, 7, 20, 13, 55, 34, tzinfo=datetime.timezone.utc), 'commenter': 'siscia', 'type': 'User'}, {'comment_id': 457414513, 'comment_body': '`filepath.Join` maybe?', 'comment_created': datetime.datetime(2020, 7, 20, 14, 3, 18, tzinfo=datetime.timezone.utc), 'commenter': 'siscia', 'type': 'User'}, {'comment_id': 458638283, 'comment_body': 'Also maybe `calculateID` is a bad naming... it is not really calculating anything...', 'comment_created': datetime.datetime(2020, 7, 22, 8, 51, 6, tzinfo=datetime.timezone.utc), 'commenter': 'siscia', 'type': 'User'}, {'comment_id': 459182485, 'comment_body': ""@siscia Now that we store relevant information in image itself, we can download layers independently of podman. We can just store the podman related info in all cases. I'll update it."", 'comment_created': datetime.datetime(2020, 7, 23, 2, 20, 21, tzinfo=datetime.timezone.utc), 'commenter': 'Mohitty', 'type': 'User'}, {'comment_id': 459182838, 'comment_body': ""I will take a look again. I don't think this is the best way. I will try to change the implementation a bit. Will update accordingly"", 'comment_created': datetime.datetime(2020, 7, 23, 2, 21, 56, tzinfo=datetime.timezone.utc), 'commenter': 'Mohitty', 'type': 'User'}, {'comment_id': 459183342, 'comment_body': 'Yes, we can now. Will update!', 'comment_created': datetime.datetime(2020, 7, 23, 2, 24, 28, tzinfo=datetime.timezone.utc), 'commenter': 'Mohitty', 'type': 'User'}, {'comment_id': 459184807, 'comment_body': ""> What happens if we do this operation ALWAYS, no matter if we are storing podman stuff or not? It is a problem? Do we incur in a performance penality?\r\n\r\nWe can store this information always. This won't cause much performance penalty. Infact, with this we can download layers and convert for docker independently of podman. Will incorporate this.\r\nHow do you suggest using TeeReader?"", 'comment_created': datetime.datetime(2020, 7, 23, 2, 31, 55, tzinfo=datetime.timezone.utc), 'commenter': 'Mohitty', 'type': 'User'}, {'comment_id': 459329342, 'comment_body': ""There is no implementation of this in standard lib. We can generate one using rand.Reader.\r\nLike here: https://play.golang.org/p/4FkNSiUDMg\r\nBut isn't using a library better?"", 'comment_created': datetime.datetime(2020, 7, 23, 9, 38, 45, tzinfo=datetime.timezone.utc), 'commenter': 'Mohitty', 'type': 'User'}, {'comment_id': 459335316, 'comment_body': ""Well the implementation in github.com/google/uuid is also similar to above code snippet. Since we don't use any other library feature, I think we can go ahead without it!"", 'comment_created': datetime.datetime(2020, 7, 23, 9, 49, 58, tzinfo=datetime.timezone.utc), 'commenter': 'Mohitty', 'type': 'User'}, {'comment_id': 459358618, 'comment_body': ""I don't believe we need a whole UUID, but just some reasonably random characters. If we can avoid pulling in another library it would be better."", 'comment_created': datetime.datetime(2020, 7, 23, 10, 36, 40, tzinfo=datetime.timezone.utc), 'commenter': 'siscia', 'type': 'User'}, {'comment_id': 459362561, 'comment_body': 'Do we need a TeeReader at all?\r\n\r\nIf I understand the code correctly, we are using the TeeReader to create two stream of data, one is serialized into cvmfs and ingested, the other is used to compute the size and the hash. Am I wrong?\r\n\r\nIf we just override the Read method (or better, implement), so that it keep track of the size and compute the hash, one piece at the time we can do without the TeeReader.\r\nBasically we are re-implementing it, but we manage only one buffer.\r\n\r\nDefinitely open to more suggestions on this. We could TeeReader inside the hash function for instance. But then we need some way to keep track of the size...', 'comment_created': datetime.datetime(2020, 7, 23, 10, 44, 59, tzinfo=datetime.timezone.utc), 'commenter': 'siscia', 'type': 'User'}, {'comment_id': 459385467, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 7, 23, 11, 36, 23, tzinfo=datetime.timezone.utc), 'commenter': 'Mohitty', 'type': 'User'}, {'comment_id': 459385535, 'comment_body': 'Done', 'comment_created': datetime.datetime(2020, 7, 23, 11, 36, 32, tzinfo=datetime.timezone.utc), 'commenter': 'Mohitty', 'type': 'User'}, {'comment_id': 459385652, 'comment_body': 'Done', 'comment_created': datetime.datetime(2020, 7, 23, 11, 36, 48, tzinfo=datetime.timezone.utc), 'commenter': 'Mohitty', 'type': 'User'}, {'comment_id': 459967197, 'comment_body': 'We can use TeeReader to directly write to hash.Hash . We can add functionality to ReadAndHash for calculating the size as well. Something like this: https://play.golang.org/p/sZ-cHoWm2fr ', 'comment_created': datetime.datetime(2020, 7, 24, 10, 12, 51, tzinfo=datetime.timezone.utc), 'commenter': 'Mohitty', 'type': 'User'}, {'comment_id': 459968848, 'comment_body': 'Love it! Go for it!', 'comment_created': datetime.datetime(2020, 7, 24, 10, 17, 1, tzinfo=datetime.timezone.utc), 'commenter': 'siscia', 'type': 'User'}, {'comment_id': 460078009, 'comment_body': 'Done', 'comment_created': datetime.datetime(2020, 7, 24, 14, 12, 39, tzinfo=datetime.timezone.utc), 'commenter': 'Mohitty', 'type': 'User'}, {'comment_id': 460078099, 'comment_body': 'Done', 'comment_created': datetime.datetime(2020, 7, 24, 14, 12, 48, tzinfo=datetime.timezone.utc), 'commenter': 'Mohitty', 'type': 'User'}, {'comment_id': 460078293, 'comment_body': 'Done', 'comment_created': datetime.datetime(2020, 7, 24, 14, 13, 9, tzinfo=datetime.timezone.utc), 'commenter': 'Mohitty', 'type': 'User'}, {'comment_id': 460078416, 'comment_body': 'Done', 'comment_created': datetime.datetime(2020, 7, 24, 14, 13, 21, tzinfo=datetime.timezone.utc), 'commenter': 'Mohitty', 'type': 'User'}, {'comment_id': 460078955, 'comment_body': 'Updated.', 'comment_created': datetime.datetime(2020, 7, 24, 14, 14, 13, tzinfo=datetime.timezone.utc), 'commenter': 'Mohitty', 'type': 'User'}, {'comment_id': 460079093, 'comment_body': 'Removed this.', 'comment_created': datetime.datetime(2020, 7, 24, 14, 14, 25, tzinfo=datetime.timezone.utc), 'commenter': 'Mohitty', 'type': 'User'}, {'comment_id': 460079177, 'comment_body': 'Done', 'comment_created': datetime.datetime(2020, 7, 24, 14, 14, 34, tzinfo=datetime.timezone.utc), 'commenter': 'Mohitty', 'type': 'User'}, {'comment_id': 460079289, 'comment_body': 'Updated!', 'comment_created': datetime.datetime(2020, 7, 24, 14, 14, 47, tzinfo=datetime.timezone.utc), 'commenter': 'Mohitty', 'type': 'User'}, {'comment_id': 463482065, 'comment_body': '@Mohitty  For each .Read() we are creating a couple of `TeeReader`s. Maybe it is worth to create them once in the constructors.', 'comment_created': datetime.datetime(2020, 7, 31, 8, 40, 24, tzinfo=datetime.timezone.utc), 'commenter': 'siscia', 'type': 'User'}, {'comment_id': 463482491, 'comment_body': 'Very interesting approach! :) :+1: \r\n\r\n', 'comment_created': datetime.datetime(2020, 7, 31, 8, 41, 15, tzinfo=datetime.timezone.utc), 'commenter': 'siscia', 'type': 'User'}, {'comment_id': 463498867, 'comment_body': ""For this two to be correct, we must be sure that we have consumed all the buffers.\r\n\r\nMaybe we should call Read until it doesn't return `0, eof`, what you think?"", 'comment_created': datetime.datetime(2020, 7, 31, 9, 14, 34, tzinfo=datetime.timezone.utc), 'commenter': 'siscia', 'type': 'User'}, {'comment_id': 463500523, 'comment_body': 'We should also make sure that they somehow coordinates, right?', 'comment_created': datetime.datetime(2020, 7, 31, 9, 17, 53, tzinfo=datetime.timezone.utc), 'commenter': 'siscia', 'type': 'User'}, {'comment_id': 464216447, 'comment_body': 'Donr', 'comment_created': datetime.datetime(2020, 8, 3, 6, 26, 32, tzinfo=datetime.timezone.utc), 'commenter': 'Mohitty', 'type': 'User'}, {'comment_id': 464216558, 'comment_body': 'Thanks :)', 'comment_created': datetime.datetime(2020, 8, 3, 6, 26, 50, tzinfo=datetime.timezone.utc), 'commenter': 'Mohitty', 'type': 'User'}, {'comment_id': 464217407, 'comment_body': ""Well, these two methods are called once the layers are completely read and ingested. The call to read function is managed where it's called!\r\nAm I missing something?"", 'comment_created': datetime.datetime(2020, 8, 3, 6, 29, 29, tzinfo=datetime.timezone.utc), 'commenter': 'Mohitty', 'type': 'User'}, {'comment_id': 474572421, 'comment_body': 'here you can just:\r\n```suggestion\r\n\treturn IngestIntoCVMFS(CVMFSRepo, path, tmpFile.Name())\r\n```', 'comment_created': datetime.datetime(2020, 8, 21, 9, 26, 19, tzinfo=datetime.timezone.utc), 'commenter': 'siscia', 'type': 'User'}, {'comment_id': 474574388, 'comment_body': 'Why this change?', 'comment_created': datetime.datetime(2020, 8, 21, 9, 28, 29, tzinfo=datetime.timezone.utc), 'commenter': 'siscia', 'type': 'User'}, {'comment_id': 474596459, 'comment_body': 'Does this check if the catalog is already there?', 'comment_created': datetime.datetime(2020, 8, 21, 9, 52, 54, tzinfo=datetime.timezone.utc), 'commenter': 'siscia', 'type': 'User'}, {'comment_id': 474596823, 'comment_body': 'Does it checks before to ingest?', 'comment_created': datetime.datetime(2020, 8, 21, 9, 53, 40, tzinfo=datetime.timezone.utc), 'commenter': 'siscia', 'type': 'User'}, {'comment_id': 474596929, 'comment_body': 'Does it check before to ingest?', 'comment_created': datetime.datetime(2020, 8, 21, 9, 53, 54, tzinfo=datetime.timezone.utc), 'commenter': 'siscia', 'type': 'User'}, {'comment_id': 474602656, 'comment_body': 'How do we know it is not the same image? I mean, why the reference we found must refer to an old one?\r\n\r\nIf I run the conversion twice, would I call the `RemoveDirectory` the second time?', 'comment_created': datetime.datetime(2020, 8, 21, 10, 4, 57, tzinfo=datetime.timezone.utc), 'commenter': 'siscia', 'type': 'User'}, {'comment_id': 474613384, 'comment_body': 'Here, if some image somehow fail, we stop processing all the other images with the same tag.\r\n\r\nIt is not unreasonable, but sometimes an image just fail to convert for reason outside our control.\r\nI believe it is better to store the first error and continue the loop.', 'comment_created': datetime.datetime(2020, 8, 21, 10, 27, 16, tzinfo=datetime.timezone.utc), 'commenter': 'siscia', 'type': 'User'}, {'comment_id': 474614304, 'comment_body': 'Nope, if the image is already in the podman store, we want to move to the next image in the range, not return.', 'comment_created': datetime.datetime(2020, 8, 21, 10, 29, 9, tzinfo=datetime.timezone.utc), 'commenter': 'siscia', 'type': 'User'}, {'comment_id': 474614738, 'comment_body': ""Similar comment of above, an early return force the `for` loop to don't finish. I would prefer that we keep track of the first error but we try to convert all the images."", 'comment_created': datetime.datetime(2020, 8, 21, 10, 30, 10, tzinfo=datetime.timezone.utc), 'commenter': 'siscia', 'type': 'User'}, {'comment_id': 474619658, 'comment_body': 'Do not rely on reflection here: `layer.Path.(*ReadAndHash)` change directly the type.\r\n\r\nAfter all we want `layer.Path` to be something that has the Read and the Hash method.', 'comment_created': datetime.datetime(2020, 8, 21, 10, 42, 6, tzinfo=datetime.timezone.utc), 'commenter': 'siscia', 'type': 'User'}, {'comment_id': 474621117, 'comment_body': ""Here it is a little problematic.\r\n\r\nIf there is some error in pushing the image, we don't save the manifest.\r\n\r\nLet's keep this point on hold for a while though."", 'comment_created': datetime.datetime(2020, 8, 21, 10, 45, 44, tzinfo=datetime.timezone.utc), 'commenter': 'siscia', 'type': 'User'}, {'comment_id': 474770973, 'comment_body': 'I have explained it in the design doc', 'comment_created': datetime.datetime(2020, 8, 21, 15, 29, 13, tzinfo=datetime.timezone.utc), 'commenter': 'Mohitty', 'type': 'User'}, {'comment_id': 474771263, 'comment_body': 'yes. CreateCatalogIntoDir function does before it creates one.', 'comment_created': datetime.datetime(2020, 8, 21, 15, 29, 40, tzinfo=datetime.timezone.utc), 'commenter': 'Mohitty', 'type': 'User'}, {'comment_id': 474771849, 'comment_body': 'yes, we only ingest the image if the manifest is not already present', 'comment_created': datetime.datetime(2020, 8, 21, 15, 30, 30, tzinfo=datetime.timezone.utc), 'commenter': 'Mohitty', 'type': 'User'}, {'comment_id': 474772508, 'comment_body': 'Config file is ingested only if manifest is ingested, and we check for manifest file. But still I will add a check.', 'comment_created': datetime.datetime(2020, 8, 21, 15, 31, 36, tzinfo=datetime.timezone.utc), 'commenter': 'Mohitty', 'type': 'User'}, {'comment_id': 474774758, 'comment_body': 'No, we first check if the same image is present in store in ConvertWishPodman(). If we get past that check, it means the image is changed, since the name and tag of image are same but the digest/manifest is not the same.', 'comment_created': datetime.datetime(2020, 8, 21, 15, 35, 43, tzinfo=datetime.timezone.utc), 'commenter': 'Mohitty', 'type': 'User'}, {'comment_id': 474775213, 'comment_body': 'Ok, will do', 'comment_created': datetime.datetime(2020, 8, 21, 15, 36, 32, tzinfo=datetime.timezone.utc), 'commenter': 'Mohitty', 'type': 'User'}, {'comment_id': 474776230, 'comment_body': 'yes, will fix it. Btw this is the check I am referring to in the other comment of calling RemoveDirectory', 'comment_created': datetime.datetime(2020, 8, 21, 15, 38, 19, tzinfo=datetime.timezone.utc), 'commenter': 'Mohitty', 'type': 'User'}, {'comment_id': 475362672, 'comment_body': 'Done', 'comment_created': datetime.datetime(2020, 8, 24, 6, 11, tzinfo=datetime.timezone.utc), 'commenter': 'Mohitty', 'type': 'User'}, {'comment_id': 475362730, 'comment_body': 'Done\r\n', 'comment_created': datetime.datetime(2020, 8, 24, 6, 11, 12, tzinfo=datetime.timezone.utc), 'commenter': 'Mohitty', 'type': 'User'}, {'comment_id': 475362784, 'comment_body': 'Done', 'comment_created': datetime.datetime(2020, 8, 24, 6, 11, 25, tzinfo=datetime.timezone.utc), 'commenter': 'Mohitty', 'type': 'User'}, {'comment_id': 475362839, 'comment_body': 'Done', 'comment_created': datetime.datetime(2020, 8, 24, 6, 11, 33, tzinfo=datetime.timezone.utc), 'commenter': 'Mohitty', 'type': 'User'}, {'comment_id': 475362962, 'comment_body': 'Done', 'comment_created': datetime.datetime(2020, 8, 24, 6, 11, 55, tzinfo=datetime.timezone.utc), 'commenter': 'Mohitty', 'type': 'User'}, {'comment_id': 475363035, 'comment_body': 'Done', 'comment_created': datetime.datetime(2020, 8, 24, 6, 12, 15, tzinfo=datetime.timezone.utc), 'commenter': 'Mohitty', 'type': 'User'}, {'comment_id': 487547155, 'comment_body': ""What's the `super-directory`? The parent directory?"", 'comment_created': datetime.datetime(2020, 9, 13, 16, 7, 37, tzinfo=datetime.timezone.utc), 'commenter': 'jblomer', 'type': 'User'}, {'comment_id': 487548033, 'comment_body': 'see above', 'comment_created': datetime.datetime(2020, 9, 13, 16, 15, 11, tzinfo=datetime.timezone.utc), 'commenter': 'jblomer', 'type': 'User'}, {'comment_id': 487548226, 'comment_body': ""I think I don't understand the comment."", 'comment_created': datetime.datetime(2020, 9, 13, 16, 16, 52, tzinfo=datetime.timezone.utc), 'commenter': 'jblomer', 'type': 'User'}, {'comment_id': 487548538, 'comment_body': 'Rather ""publish"" than ""ingest"" since the ingestion term is charged with publishing tarballs.', 'comment_created': datetime.datetime(2020, 9, 13, 16, 19, 53, tzinfo=datetime.timezone.utc), 'commenter': 'jblomer', 'type': 'User'}, {'comment_id': 487549392, 'comment_body': ""I think `ingest` is a misleading name.  I'd rather call it `Link...`"", 'comment_created': datetime.datetime(2020, 9, 13, 16, 28, 20, tzinfo=datetime.timezone.utc), 'commenter': 'jblomer', 'type': 'User'}, {'comment_id': 487549520, 'comment_body': 'Is it the lower _layers_? I think that would make more sense than calling it `lower files`', 'comment_created': datetime.datetime(2020, 9, 13, 16, 29, 38, tzinfo=datetime.timezone.utc), 'commenter': 'jblomer', 'type': 'User'}, {'comment_id': 487549633, 'comment_body': 'blog --> blob (or rather `snippet` as I guess it is not binary data.  Of course it\'s still under the ""blob"" url, so unsure which one\'s better)', 'comment_created': datetime.datetime(2020, 9, 13, 16, 30, 34, tzinfo=datetime.timezone.utc), 'commenter': 'jblomer', 'type': 'User'}, {'comment_id': 487550124, 'comment_body': '`IngestInto` --> `PublishTo`?', 'comment_created': datetime.datetime(2020, 9, 13, 16, 36, 29, tzinfo=datetime.timezone.utc), 'commenter': 'jblomer', 'type': 'User'}, {'comment_id': 487550231, 'comment_body': ""Let's add that as a code comment here"", 'comment_created': datetime.datetime(2020, 9, 13, 16, 37, 20, tzinfo=datetime.timezone.utc), 'commenter': 'jblomer', 'type': 'User'}, {'comment_id': 487552168, 'comment_body': 'It would be good to add a link to the design doc somewhere in the code, perhaps best in `podman_store.go`', 'comment_created': datetime.datetime(2020, 9, 13, 16, 56, 18, tzinfo=datetime.timezone.utc), 'commenter': 'jblomer', 'type': 'User'}, {'comment_id': 487628695, 'comment_body': ""This and the above two comments refers to part of legacy code, I didn't modify them. They just needed restructuring to incorporate podman integration."", 'comment_created': datetime.datetime(2020, 9, 14, 3, 9, 53, tzinfo=datetime.timezone.utc), 'commenter': 'Mohitty', 'type': 'User'}, {'comment_id': 487629494, 'comment_body': 'No, actually they store the directory names of the lower layers. Podman names these files as ""lower"" , hence this name.', 'comment_created': datetime.datetime(2020, 9, 14, 3, 13, 55, tzinfo=datetime.timezone.utc), 'commenter': 'Mohitty', 'type': 'User'}, {'comment_id': 487630352, 'comment_body': 'I think, for now we can go with blob.', 'comment_created': datetime.datetime(2020, 9, 14, 3, 17, 59, tzinfo=datetime.timezone.utc), 'commenter': 'Mohitty', 'type': 'User'}, {'comment_id': 487690192, 'comment_body': 'I see, but then it\'s ""lower directories"" instead of ""lower files"", no?', 'comment_created': datetime.datetime(2020, 9, 14, 6, 58, 29, tzinfo=datetime.timezone.utc), 'commenter': 'jblomer', 'type': 'User'}, {'comment_id': 487696907, 'comment_body': ""Ok, let's still use the opportunity to improve the code (@siscia perhaps you can help)"", 'comment_created': datetime.datetime(2020, 9, 14, 7, 13, 23, tzinfo=datetime.timezone.utc), 'commenter': 'jblomer', 'type': 'User'}, {'comment_id': 487880675, 'comment_body': 'No, they are files which contain a string (name of the parent layers) as its content.  Podman names these files as ""lower"" ', 'comment_created': datetime.datetime(2020, 9, 14, 12, 42, 10, tzinfo=datetime.timezone.utc), 'commenter': 'Mohitty', 'type': 'User'}, {'comment_id': 487997641, 'comment_body': 'I see. Thanks!', 'comment_created': datetime.datetime(2020, 9, 14, 14, 56, 1, tzinfo=datetime.timezone.utc), 'commenter': 'jblomer', 'type': 'User'}, {'comment_id': 490065276, 'comment_body': ""The docker documentation says that it is not necessary to pass the authentication credential. If we don't pass the credentials it does not work. It is actually necessary to pass the credentials."", 'comment_created': datetime.datetime(2020, 9, 17, 8, 29, 3, tzinfo=datetime.timezone.utc), 'commenter': 'siscia', 'type': 'User'}, {'comment_id': 490096088, 'comment_body': ""Understood, thanks!  Let's take this as a code comment :)"", 'comment_created': datetime.datetime(2020, 9, 17, 9, 17, 2, tzinfo=datetime.timezone.utc), 'commenter': 'jblomer', 'type': 'User'}]","[{'commit_sha': '2df9d51c373d45551c2c7c4c91890d15f2c17195', 'committer_username': 'Mohitty', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 8, 6, 10, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4d847da4e54c43984574d1fc6b35b3e97ee4799b', 'committer_username': 'Mohitty', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 8, 6, 10, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fe989ae21cf6b225c149a7dfa4947c71c9d7b0fc', 'committer_username': 'Mohitty', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 8, 6, 10, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6c30a4ec52aafbd99332e65764517d6b87d5a54c', 'committer_username': 'Mohitty', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 8, 6, 10, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'eb0c40163e2cbf470d92c42908252dbed7d10d4c', 'committer_username': 'Mohitty', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 8, 6, 10, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3121a82758c71fe91cdbecccec88eb039bf9ac00', 'committer_username': 'Mohitty', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 8, 6, 10, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1f70b6975a4139258186bb17f4956224cd97a922', 'committer_username': 'Mohitty', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 8, 6, 10, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ff44c4b7f154a76eec3fecb6d886de37f99891ba', 'committer_username': 'Mohitty', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 8, 6, 10, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5a293eb1f0cae8e5990034a64081d968b8628a32', 'committer_username': 'Mohitty', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 8, 6, 10, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a1f6508f549a6d7a19e8511af0a8a3bb8278d125', 'committer_username': 'Mohitty', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 8, 6, 10, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '953e9fc4ce4a122d1caf011115ea40ad2cb07938', 'committer_username': 'Mohitty', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 8, 6, 10, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0fd0d405e2fa54e276556197b1adce64572c9e67', 'committer_username': 'Mohitty', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 8, 6, 10, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '801e2f4c845e947f44c47141b68e88365825835e', 'committer_username': 'Mohitty', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 8, 6, 10, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '49b4883f7f6a3df323a2d46d24d910803480cc63', 'committer_username': 'Mohitty', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 8, 6, 10, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'daaa3ca38d1599a86f86fc2e919d8d6ad91d2216', 'committer_username': 'Mohitty', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 8, 6, 10, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4095096ce99f50a95a408e23c300e00614559ff1', 'committer_username': 'Mohitty', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 8, 6, 10, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9f6cdd56b9d3184f6620d18edc757710a110a375', 'committer_username': 'Mohitty', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 8, 6, 10, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e6f924122014c6abbdff65848f01e24477c80361', 'committer_username': 'Mohitty', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 8, 6, 10, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4bc367e7fbedc2d58add8dd38024112940460a16', 'committer_username': 'Mohitty', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 8, 6, 10, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5fdf3056076757183373d840a8a7450572f7a2e2', 'committer_username': 'Mohitty', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 8, 6, 10, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd69641bc13f0db4702a2689ca276e536e580ac3c', 'committer_username': 'Mohitty', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 8, 6, 10, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a4b5e656b7d71147ec561c30ae893259c9ec5298', 'committer_username': 'Mohitty', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 8, 6, 10, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a04ace30105f0ee8d98ad7999168576854599579', 'committer_username': 'Mohitty', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 8, 6, 10, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4213506f3b442af526cb29e277392565290f9f75', 'committer_username': 'Mohitty', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 8, 6, 10, 45, tzinfo=datetime.timezone.utc)}]",,25630377,,User,,42,,6,3

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
3784908,cvmfs,cvmfs/cvmfs,C++,131,281,21,110,19338,256,164,59,"[{'id': 440232003, 'number': 2582, 'closed': datetime.datetime(2020, 12, 14, 15, 22, 51, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 25, 20, 8, 5, tzinfo=datetime.timezone.utc), 'time_taken': 14843686.0, 'time_delta': '171 days, 19:14:46', 'additions': 1016, 'deletions': 125, 'state': 'closed'}]"
