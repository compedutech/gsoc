pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
979331220,feat: added basic preprocess table configuration,"* This PR adds the preprocess table configuration.
* Add a compiler flag when [preprocess.cpp] is found in `manifest` file. ",True,715,https://api.github.com/repos/fortran-lang/fpm/pulls/715,https://github.com/fortran-lang/fpm/pull/715,closed,349,5,9,13,6,20,0,0,[],2022-06-26 15:17:03+00:00,2022-07-11 11:27:35+00:00,1282232.0,"14 days, 20:10:32","[{'comment_id': 907281084, 'comment_body': 'The current example won\'t test whether the preprocessing worked. Can you add the logic here that would do that?\r\n\r\nFor example, you could add an `#ifndef` block that encloses some invalid code that would break the compilation if that block wasn\'t correctly preprocessed:\r\n\r\n```fortran\r\n  subroutine say_hello\r\n    print *, ""Hello, preprocess_cpp!""\r\n#ifndef TESTMACRO\r\n    break me\r\n#endif\r\n  end subroutine say_hello\r\n```\r\n\r\nand `-DTESTMACRO` would need to be added to the flags for the example package build to succeed.\r\n\r\n@awvwgk @LKedward does this approach seem appropriate to you?', 'comment_created': datetime.datetime(2022, 6, 27, 11, 31, 17, tzinfo=datetime.timezone.utc), 'commenter': 'milancurcic', 'type': 'User'}, {'comment_id': 907500614, 'comment_body': 'Thanks, I will add these changes to the PR.\r\nBut, before proceeding with that I have few questions regarding this :\r\n\r\n- `-DTESTMACRO` should be added in `manifest` file under `macros` section and from there fpm should be able to add it to flags ? or It is something related to flags we discussed in the last GSoC meeting to add a compiler flag if `preprocess.cpp` table is detected ?\r\n- I went through the code, I found out there is a function named `get_default_flags` [here](https://github.com/fortran-lang/fpm/blob/main/src/fpm_compiler.f90#L183). Is it where I need to add the flags or am I missing something here ?', 'comment_created': datetime.datetime(2022, 6, 27, 15, 12, 24, tzinfo=datetime.timezone.utc), 'commenter': 'arteevraina', 'type': 'User'}, {'comment_id': 907548395, 'comment_body': '```suggestion\r\n!> macros = []\r\n!>```\r\n```', 'comment_created': datetime.datetime(2022, 6, 27, 16, 2, 51, tzinfo=datetime.timezone.utc), 'commenter': 'jvdp1', 'type': 'User'}, {'comment_id': 909112455, 'comment_body': 'Sorry, @arteevraina for the delay getting back to you. I think we should leave the macros in the manifest for a separate PR, to keep them small. What I meant by ""passing `-DTESTMACRO` to the flags"" is simply that a user who builds the example package would need to pass it explicitly to fpm, e.g. `fpm build --flag ""-DTESTMACRO"" for the example package to successfully build.\r\n\r\nLet\'s keep this PR small but complete. You\'ll still need to add a few tests (`test/fpm_test/test_manifest.f90` seems the appropriate file to add them to), and update the [manifest reference](https://github.com/fortran-lang/fpm-docs/blob/main/pages/spec/manifest.md) in a separate PR to fpm-docs.', 'comment_created': datetime.datetime(2022, 6, 29, 1, 4, 56, tzinfo=datetime.timezone.utc), 'commenter': 'milancurcic', 'type': 'User'}, {'comment_id': 909146395, 'comment_body': '@milancurcic Sure thing. ', 'comment_created': datetime.datetime(2022, 6, 29, 2, 38, 31, tzinfo=datetime.timezone.utc), 'commenter': 'arteevraina', 'type': 'User'}, {'comment_id': 909517935, 'comment_body': '@milancurcic I just once again read this comment. The command `fpm build --flag ""-DTESTMACRO""` is lacking the `-cpp` flag. This means the command should be like `fpm build --flag ""-cpp -DTESTMACRO""`. This means we are going to set -cpp flag if `process.cpp` is detected in `fpm.toml`. Right ?\r\n\r\nAnd regarding the files that need to be worked on for setting up -cpp flag. I went through the code, I found out there is a function named get_default_flags [here](https://github.com/fortran-lang/fpm/blob/main/src/fpm_compiler.f90#L183). Is it where I need to add the flags or am I missing something here ?', 'comment_created': datetime.datetime(2022, 6, 29, 11, 31, 46, tzinfo=datetime.timezone.utc), 'commenter': 'arteevraina', 'type': 'User'}, {'comment_id': 910135635, 'comment_body': 'No, the command should not include `-cpp` because this example package would have `[preprocess.cpp]` in the manifest, so fpm would add `-cpp` to the default flags under the hood.\r\n\r\nYes, src/fpm_compiler.f90 is the place to add definitions to enable the C-preprocessor flag for each of the supported compilers.', 'comment_created': datetime.datetime(2022, 6, 29, 15, 47, 29, tzinfo=datetime.timezone.utc), 'commenter': 'milancurcic', 'type': 'User'}, {'comment_id': 912490911, 'comment_body': 'Tiny and pedantic suggestion:\r\n```suggestion\r\n      This breaks the build.\r\n```', 'comment_created': datetime.datetime(2022, 7, 3, 13, 54, 5, tzinfo=datetime.timezone.utc), 'commenter': 'milancurcic', 'type': 'User'}, {'comment_id': 912493768, 'comment_body': ""UI question for @arteevraina and @fortran-lang/fpm: Should just\r\n\r\n```toml\r\n[preprocess]\r\n```\r\n\r\nbe allowed and imply\r\n\r\n```toml\r\n[preprocess]\r\n[preprocess.cpp]\r\n```\r\n?\r\n\r\nI'm split. On one side, explicit is more clear. On the other, requiring `[preprocess.cpp]` adds the needed boilerplate if one just wants CPP preprocessing everywhere as a sane default, it could be nice to just type `[preprocess]` in the manifest and be done with it, and a sane default philosophy is I think aligned with the original vision for fpm. But it would effectively make CPP the first-class preprocessor, for better or for worse. "", 'comment_created': datetime.datetime(2022, 7, 3, 14, 17, 15, tzinfo=datetime.timezone.utc), 'commenter': 'milancurcic', 'type': 'User'}, {'comment_id': 912494444, 'comment_body': '```suggestion\r\n    !> Check if there is a preprocess table\r\n```', 'comment_created': datetime.datetime(2022, 7, 3, 14, 22, 27, tzinfo=datetime.timezone.utc), 'commenter': 'milancurcic', 'type': 'User'}, {'comment_id': 912504576, 'comment_body': 'I would say being explicit about which preprocessors we want to use while building fortran projects using fpm would make the `manifest` file clear and what goes under the hood. But, if we are going to make `cpp` as first choice preprocessors for fpm-based projects then I think simply `[preprocess]` should be fine. I think more or less this decision depends on how we expect to see fpm in the future. Either it should have a favorite `cpp` preprocessor with allowing other preprocessors as well or just being preprocessor agnostic and leaving it to the user to be explicit.\r\n', 'comment_created': datetime.datetime(2022, 7, 3, 15, 46, 14, tzinfo=datetime.timezone.utc), 'commenter': 'arteevraina', 'type': 'User'}, {'comment_id': 913089645, 'comment_body': '`pr` is defined but not used.  Is it aimed to be used later?', 'comment_created': datetime.datetime(2022, 7, 4, 15, 8, 50, tzinfo=datetime.timezone.utc), 'commenter': 'jvdp1', 'type': 'User'}, {'comment_id': 913092768, 'comment_body': 'Do all compilers support the flag `-cpp` for the integrated preprocessor?\r\nI know that Intel Fortran compiler uses `-fpp` (but may support `-cpp` too). Therefore it might be good to add an option to modify this flag.', 'comment_created': datetime.datetime(2022, 7, 4, 15, 12, 58, tzinfo=datetime.timezone.utc), 'commenter': 'jvdp1', 'type': 'User'}, {'comment_id': 913096209, 'comment_body': 'I would prefer to be explicit too. For example, if a compiler does not support `cpp`, the default option would fail. Furthermore we don\'t know if `cpp` will still be the ""default""/preferred preprocessor in the future.', 'comment_created': datetime.datetime(2022, 7, 4, 15, 17, 48, tzinfo=datetime.timezone.utc), 'commenter': 'jvdp1', 'type': 'User'}, {'comment_id': 914730129, 'comment_body': 'Thanks for pointing it out. I think while writing code, I assumed all compilers support `-cpp` for preprocessing.\r\nDo I need to consider these compilers mentioned [here](https://github.com/fortran-lang/fpm/blob/main/src/fpm_compiler.f90#L5) ?', 'comment_created': datetime.datetime(2022, 7, 6, 11, 29, 52, tzinfo=datetime.timezone.utc), 'commenter': 'arteevraina', 'type': 'User'}, {'comment_id': 915275820, 'comment_body': ""In LFortran it's `--cpp` to be consistent with our other options."", 'comment_created': datetime.datetime(2022, 7, 6, 21, 36, 3, tzinfo=datetime.timezone.utc), 'commenter': 'certik', 'type': 'User'}, {'comment_id': 915773538, 'comment_body': ""Thanks for your great work @arteevraina. `id_intel_classic_windows` and `id_intel_llvm_windows` should be `/fpp`, and the preprocess option of Intel's Fortran compiler on Windows OS is `/fpp`, not `-fpp`.\r\n\r\nPS: It is worth noting that on Linux and Mac systems, most compilers enable preprocessing by default for `.F90` files, but on Windows systems, Intel's compilers do not enable preprocessing **by default** for `.F90` files."", 'comment_created': datetime.datetime(2022, 7, 7, 11, 39, 39, tzinfo=datetime.timezone.utc), 'commenter': 'zoziha', 'type': 'User'}, {'comment_id': 916075951, 'comment_body': 'Thanks for reviewing @zoziha. I think if we make changes as per the your comments. I think the final logic should look like this one :\r\n\r\n```\r\n    !> Modify the flag_cpp_preprocessor on the basis of the compiler.\r\n    select case(id)\r\n    case default\r\n        flag_cpp_preprocessor = """"\r\n    case(id_caf, id_gcc, id_f95, id_nvhpc)\r\n        flag_cpp_preprocessor = ""-cpp""\r\n    case(id_intel_classic_windows, id_intel_llvm_windows)\r\n        flag_cpp_preprocessor = ""/fpp""\r\n    case(id_intel_classic_nix, id_intel_classic_mac, id_intel_llvm_nix, id_nag)\r\n        flag_cpp_preprocessor = ""-fpp""\r\n    case(id_lfortran)\r\n        flag_cpp_preprocessor = ""--cpp""\r\n    end select\r\n```\r\nCan you confirm this ?', 'comment_created': datetime.datetime(2022, 7, 7, 16, 35, 44, tzinfo=datetime.timezone.utc), 'commenter': 'arteevraina', 'type': 'User'}, {'comment_id': 916081200, 'comment_body': 'Yes, I forgot to add the basic check using pr. I have added a new commit for this [here](https://github.com/fortran-lang/fpm/pull/715/commits/c5030f1e50fc89ff8be4d01764162854b6203ed6).', 'comment_created': datetime.datetime(2022, 7, 7, 16, 41, 50, tzinfo=datetime.timezone.utc), 'commenter': 'arteevraina', 'type': 'User'}, {'comment_id': 916082482, 'comment_body': 'LGTM❤️', 'comment_created': datetime.datetime(2022, 7, 7, 16, 43, 15, tzinfo=datetime.timezone.utc), 'commenter': 'zoziha', 'type': 'User'}]","[{'commit_sha': 'aa384054fc741ba13d42140acbbedf956d617b5a', 'committer_username': 'arteevraina', 'committer_name': 'Arteev Raina', 'committer_email': 'arteevraina@gmail.com', 'commit_date': datetime.datetime(2018, 10, 8, 17, 57, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9c4bf8d6cbeede274d74f92ea4f8142e0506575c', 'committer_username': 'arteevraina', 'committer_name': 'Arteev Raina', 'committer_email': 'arteevraina@gmail.com', 'commit_date': datetime.datetime(2018, 10, 8, 17, 57, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': '56ea50aab81a78b6bb913c13e9032fb676082d1d', 'committer_username': 'arteevraina', 'committer_name': 'Arteev Raina', 'committer_email': 'arteevraina@gmail.com', 'commit_date': datetime.datetime(2018, 10, 8, 17, 57, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3bcff3eb0e22123ce8d4ebe345541ea94ddaba19', 'committer_username': 'arteevraina', 'committer_name': 'Arteev Raina', 'committer_email': 'arteevraina@gmail.com', 'commit_date': datetime.datetime(2018, 10, 8, 17, 57, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'eeb2eb0fe9f81e4d388978497f187b35cd7480b7', 'committer_username': 'arteevraina', 'committer_name': 'Arteev Raina', 'committer_email': 'arteevraina@gmail.com', 'commit_date': datetime.datetime(2018, 10, 8, 17, 57, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': '337f30ccc0a6f1c50d76275df8ad76fa296ab5de', 'committer_username': 'arteevraina', 'committer_name': 'Arteev Raina', 'committer_email': 'arteevraina@gmail.com', 'commit_date': datetime.datetime(2018, 10, 8, 17, 57, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': '324e5b3aed4d25bbdc48727c4aadf7cda04155b1', 'committer_username': 'arteevraina', 'committer_name': 'Arteev Raina', 'committer_email': 'arteevraina@gmail.com', 'commit_date': datetime.datetime(2018, 10, 8, 17, 57, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'eb8ce4535eb9b69db743f541b4c72c1060eafcc4', 'committer_username': 'arteevraina', 'committer_name': 'Arteev Raina', 'committer_email': 'arteevraina@gmail.com', 'commit_date': datetime.datetime(2018, 10, 8, 17, 57, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0e8a9498f6d3985b782edb20b19c69b4522e0963', 'committer_username': 'arteevraina', 'committer_name': 'Arteev Raina', 'committer_email': 'arteevraina@gmail.com', 'commit_date': datetime.datetime(2018, 10, 8, 17, 57, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8b2d1e9e02015ed77660b8fb2ec9cd0fda25c7d5', 'committer_username': 'arteevraina', 'committer_name': 'Arteev Raina', 'committer_email': 'arteevraina@gmail.com', 'commit_date': datetime.datetime(2018, 10, 8, 17, 57, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1c2f23501a47975d9e9e7262e1267f0684d3d1c8', 'committer_username': 'arteevraina', 'committer_name': 'Arteev Raina', 'committer_email': 'arteevraina@gmail.com', 'commit_date': datetime.datetime(2018, 10, 8, 17, 57, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c5030f1e50fc89ff8be4d01764162854b6203ed6', 'committer_username': 'arteevraina', 'committer_name': 'Arteev Raina', 'committer_email': 'arteevraina@gmail.com', 'commit_date': datetime.datetime(2018, 10, 8, 17, 57, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': '276d432ee643fc2bf6d79df75b3d79610748d455', 'committer_username': 'arteevraina', 'committer_name': 'Arteev Raina', 'committer_email': 'arteevraina@gmail.com', 'commit_date': datetime.datetime(2018, 10, 8, 17, 57, 28, tzinfo=datetime.timezone.utc)}]",Arteev Raina,43968121,arteevraina@gmail.com,User,,118,,86,69
995615023,feat: ability to read macros from manifest,This pull request add the ability to parse and read the `macros` array defined in the manifest file for a preprocessor under `preprocess` section.,True,720,https://api.github.com/repos/fortran-lang/fpm/pulls/720,https://github.com/fortran-lang/fpm/pull/720,closed,278,18,15,13,18,10,0,0,[],2022-07-13 15:00:05+00:00,2022-08-04 12:29:18+00:00,1891753.0,"21 days, 21:29:13","[{'comment_id': 924586256, 'comment_body': ""Should we add:\r\n\r\n```fortran\r\nelse\r\n    write(stderr, '(a)') 'Warning: preprocessor ' // package%preprocess(i)%name // ' is not supported; will ignore it'\r\n```\r\nor similar? Otherwise the user gets a silent ignore.\r\n\r\nMore generally, @fortran-lang/fpm, does fpm have a style recommendation on emitting warnings or errors from fpm's internal modules? Is it OK to do it and is there a preferred format?\r\n"", 'comment_created': datetime.datetime(2022, 7, 19, 14, 38, 28, tzinfo=datetime.timezone.utc), 'commenter': 'milancurcic', 'type': 'User'}, {'comment_id': 924588179, 'comment_body': ""Is it possible to test this subroutine from fpm's test suite?"", 'comment_created': datetime.datetime(2022, 7, 19, 14, 40, 7, tzinfo=datetime.timezone.utc), 'commenter': 'milancurcic', 'type': 'User'}, {'comment_id': 924643040, 'comment_body': ""> does fpm have a style recommendation on emitting warnings or errors from fpm's internal modules? Is it OK to do it and is there a preferred format?\r\n\r\nNot yet, I'm hoping to upgrade the manifest reading to the upcoming TOML Fortran 0.3.0 release.\r\n\r\nThis would allow us to create warnings and errors with rich context information as shown in https://toml-f.readthedocs.io/en/latest/tutorial/fpm-lint.html and https://toml-f.readthedocs.io/en/latest/how-to/error.html."", 'comment_created': datetime.datetime(2022, 7, 19, 15, 19, 18, tzinfo=datetime.timezone.utc), 'commenter': 'awvwgk', 'type': 'User'}, {'comment_id': 925091584, 'comment_body': 'This line of code reads the `fpm.toml` file once, and I wonder if the `package` parameter can be passed in from `fpm_compiler.f90::set_preprocessor_flags::Line419`.', 'comment_created': datetime.datetime(2022, 7, 20, 1, 54, 28, tzinfo=datetime.timezone.utc), 'commenter': 'zoziha', 'type': 'User'}, {'comment_id': 925093007, 'comment_body': '```suggestion\r\n    case (id_intel_classic_windows, id_intel_llvm_windows)\r\n        macro_definition_symbol = ""/D""\r\n```\r\nHere `id_intel_llvm_windows` should also be `""/D""`.\r\n', 'comment_created': datetime.datetime(2022, 7, 20, 1, 58, tzinfo=datetime.timezone.utc), 'commenter': 'zoziha', 'type': 'User'}, {'comment_id': 925100568, 'comment_body': 'At the same time, the `package` parameter in `set_preprocessor_flags` can also be passed in from `fpm.f90::build_model::Line81`.\r\n(This may avoid opening and closing `fpm.toml` multiple times)', 'comment_created': datetime.datetime(2022, 7, 20, 2, 13, 27, tzinfo=datetime.timezone.utc), 'commenter': 'zoziha', 'type': 'User'}, {'comment_id': 926446126, 'comment_body': ""> Should we add:\r\n> \r\n> ```fortran\r\n> else\r\n>     write(stderr, '(a)') 'Warning: preprocessor ' // package%preprocess(i)%name // ' is not supported; will ignore it'\r\n> ```\r\n> \r\n> or similar? Otherwise the user gets a silent ignore.\r\n> \r\n\r\nThanks for noticing this. I fixed this in my new commits.\r\n\r\n"", 'comment_created': datetime.datetime(2022, 7, 21, 9, 12, 57, tzinfo=datetime.timezone.utc), 'commenter': 'arteevraina', 'type': 'User'}, {'comment_id': 926447075, 'comment_body': 'Added a test for this as well. I had to do a few minor changes in the subroutine to handle the edge cases that were causing the error.', 'comment_created': datetime.datetime(2022, 7, 21, 9, 14, 1, tzinfo=datetime.timezone.utc), 'commenter': 'arteevraina', 'type': 'User'}, {'comment_id': 934222369, 'comment_body': 'If you use `#ifdef FOO` the package would pass the build and we can safely run it as check in the CI.', 'comment_created': datetime.datetime(2022, 8, 1, 7, 34, 14, tzinfo=datetime.timezone.utc), 'commenter': 'awvwgk', 'type': 'User'}, {'comment_id': 934248987, 'comment_body': 'Yes, added the requested the changes.', 'comment_created': datetime.datetime(2022, 8, 1, 8, 6, 40, tzinfo=datetime.timezone.utc), 'commenter': 'arteevraina', 'type': 'User'}]","[{'commit_sha': '1bf26f22fedd82e185120ec5657809a300aab7e8', 'committer_username': 'arteevraina', 'committer_name': 'Arteev Raina', 'committer_email': 'arteevraina@gmail.com', 'commit_date': datetime.datetime(2018, 10, 8, 17, 57, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a818e1c40ece7c45d34c0749cc020fc3be90e85e', 'committer_username': 'arteevraina', 'committer_name': 'Arteev Raina', 'committer_email': 'arteevraina@gmail.com', 'commit_date': datetime.datetime(2018, 10, 8, 17, 57, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f3bb73528be033014f978360c7b028de064a1f03', 'committer_username': 'arteevraina', 'committer_name': 'Arteev Raina', 'committer_email': 'arteevraina@gmail.com', 'commit_date': datetime.datetime(2018, 10, 8, 17, 57, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': '771992fab228099e87218efa125ec14229c9904e', 'committer_username': 'arteevraina', 'committer_name': 'Arteev Raina', 'committer_email': 'arteevraina@gmail.com', 'commit_date': datetime.datetime(2018, 10, 8, 17, 57, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b62ada7c03f7d020221e58dae0b400dc84f74a41', 'committer_username': 'arteevraina', 'committer_name': 'Arteev Raina', 'committer_email': 'arteevraina@gmail.com', 'commit_date': datetime.datetime(2018, 10, 8, 17, 57, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f937ba7786a5ddfa5f95a8ea52fefb033c2b1c5f', 'committer_username': 'arteevraina', 'committer_name': 'Arteev Raina', 'committer_email': 'arteevraina@gmail.com', 'commit_date': datetime.datetime(2018, 10, 8, 17, 57, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4c283c08cd8bdddce962be4c25d7f85a2f3f248d', 'committer_username': 'arteevraina', 'committer_name': 'Arteev Raina', 'committer_email': 'arteevraina@gmail.com', 'commit_date': datetime.datetime(2018, 10, 8, 17, 57, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': '25802a3dc35c062d5527b79fc5670f6d0ed138ad', 'committer_username': 'zoziha', 'committer_name': 'ZUO Zhihua', 'committer_email': 'zuo.zhihua@qq.com', 'commit_date': datetime.datetime(2017, 9, 17, 12, 32, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9d8d2cc78932b39c516a89c8f0eaf96d7cb31657', 'committer_username': 'arteevraina', 'committer_name': 'Arteev Raina', 'committer_email': 'arteevraina@gmail.com', 'commit_date': datetime.datetime(2018, 10, 8, 17, 57, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': '08348392169c115b4f1e3e1eda01e96e458bb7ca', 'committer_username': 'arteevraina', 'committer_name': 'Arteev Raina', 'committer_email': 'arteevraina@gmail.com', 'commit_date': datetime.datetime(2018, 10, 8, 17, 57, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6874bc0755f7beef6eabe878832a2ba72bff5262', 'committer_username': 'arteevraina', 'committer_name': 'Arteev Raina', 'committer_email': 'arteevraina@gmail.com', 'commit_date': datetime.datetime(2018, 10, 8, 17, 57, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': '49cd3f2a6c67d05ccce1cd35e842db71cc861ae9', 'committer_username': 'arteevraina', 'committer_name': 'Arteev Raina', 'committer_email': 'arteevraina@gmail.com', 'commit_date': datetime.datetime(2018, 10, 8, 17, 57, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3da803fdfa9015aafffbfd3f1dbf6228d9f6c6d1', 'committer_username': 'arteevraina', 'committer_name': 'Arteev Raina', 'committer_email': 'arteevraina@gmail.com', 'commit_date': datetime.datetime(2018, 10, 8, 17, 57, 28, tzinfo=datetime.timezone.utc)}]",Arteev Raina,43968121,arteevraina@gmail.com,User,,118,,86,69
1025803571,Added Compiler Wrapper script for Preprocessing using fypp,"* This Pull Request adds a compiler wrapper script for preprocessing the `.fypp` files and storing them inside the `build` directory.
* Also makes the macros defined in manifest available while running tests.",False,729,https://api.github.com/repos/fortran-lang/fpm/pulls/729,https://github.com/fortran-lang/fpm/pull/729,open,82,4,8,9,27,4,0,0,[],2022-08-14 13:11:55+00:00,,0.0,,"[{'comment_id': 950671316, 'comment_body': 'You should filter the filename from `sys.argv` rather than globbing the whole source tree.', 'comment_created': datetime.datetime(2022, 8, 20, 9, 0, 40, tzinfo=datetime.timezone.utc), 'commenter': 'awvwgk', 'type': 'User'}, {'comment_id': 950672943, 'comment_body': 'I had tried using `filenames = [x for x in args if x.endswith("".fypp"")]` instead of using `filenames = [str(f) for f in Path(""."").glob(""**/*.fypp"")]`. But, the filenames list came as empty and in the build/preprocessed_files, I had no generated files which denoted that in` sys.argv[1:] ` or `args`, there are no file paths with `.fypp` extension', 'comment_created': datetime.datetime(2022, 8, 20, 9, 16, 34, tzinfo=datetime.timezone.utc), 'commenter': 'arteevraina', 'type': 'User'}, {'comment_id': 953446341, 'comment_body': 'While I know that it is a temporary solution, does this mean that only gfortran is supported currently with `fypp` files?', 'comment_created': datetime.datetime(2022, 8, 24, 7, 27, 38, tzinfo=datetime.timezone.utc), 'commenter': 'jvdp1', 'type': 'User'}, {'comment_id': 953574337, 'comment_body': 'We could pick up the  FC env variable here, but keep in mind that the name of the script is used by fpm to identify the compiler. For ifort we need a fypp-ifort.py with almost identical content.', 'comment_created': datetime.datetime(2022, 8, 24, 9, 34, 19, tzinfo=datetime.timezone.utc), 'commenter': 'awvwgk', 'type': 'User'}]","[{'commit_sha': '1487a92f6ebfa06bd2a8b251c248c71e03152fcf', 'committer_username': 'arteevraina', 'committer_name': 'Arteev Raina', 'committer_email': 'arteevraina@gmail.com', 'commit_date': datetime.datetime(2018, 10, 8, 17, 57, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9bcc10c43750980b3958cf0ebad20e376d4b5963', 'committer_username': 'arteevraina', 'committer_name': 'Arteev Raina', 'committer_email': 'arteevraina@gmail.com', 'commit_date': datetime.datetime(2018, 10, 8, 17, 57, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dcd7832532100e5dd185df059dcde36209e28352', 'committer_username': 'arteevraina', 'committer_name': 'Arteev Raina', 'committer_email': 'arteevraina@gmail.com', 'commit_date': datetime.datetime(2018, 10, 8, 17, 57, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'baaef3601be4f58d49d9bedc4889e8e0e5f3c522', 'committer_username': 'arteevraina', 'committer_name': 'Arteev Raina', 'committer_email': 'arteevraina@gmail.com', 'commit_date': datetime.datetime(2018, 10, 8, 17, 57, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': '38686a7b6757cde7ed627b719258a1a347e972de', 'committer_username': 'arteevraina', 'committer_name': 'Arteev Raina', 'committer_email': 'arteevraina@gmail.com', 'commit_date': datetime.datetime(2018, 10, 8, 17, 57, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': '689eed7e967212616cd272a763910eca0e0662b7', 'committer_username': 'arteevraina', 'committer_name': 'Arteev Raina', 'committer_email': 'arteevraina@gmail.com', 'commit_date': datetime.datetime(2018, 10, 8, 17, 57, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': '47ee6225b195c0468b4526602d659adee24411df', 'committer_username': 'awvwgk', 'committer_name': 'Sebastian Ehlert', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 13, 7, 58, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': '82d368c4e6bb328e43cd1bfc2534964c42a984a5', 'committer_username': 'arteevraina', 'committer_name': 'Arteev Raina', 'committer_email': 'arteevraina@gmail.com', 'commit_date': datetime.datetime(2018, 10, 8, 17, 57, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a49a97a7027c2ac6553ec5174e17917a8fe1ed93', 'committer_username': 'arteevraina', 'committer_name': 'Arteev Raina', 'committer_email': 'arteevraina@gmail.com', 'commit_date': datetime.datetime(2018, 10, 8, 17, 57, 28, tzinfo=datetime.timezone.utc)}]",Arteev Raina,43968121,arteevraina@gmail.com,User,,118,,86,69
1038568508,feat: added support for C++ files compilation,"* Added support for C++ files compilation.
* Added test for the same.",True,733,https://api.github.com/repos/fortran-lang/fpm/pulls/733,https://github.com/fortran-lang/fpm/pull/733,closed,209,21,15,18,13,19,0,0,[],2022-08-27 06:16:11+00:00,2022-08-31 12:48:11+00:00,369120.0,"4 days, 6:32:00","[{'comment_id': 956566078, 'comment_body': '```suggestion\r\n    character(len=*), intent(in) :: cxx\r\n```\r\n\r\nI think the convention for this variable name is `CXX` with other build systems.', 'comment_created': datetime.datetime(2022, 8, 27, 10, 20, 12, tzinfo=datetime.timezone.utc), 'commenter': 'LKedward', 'type': 'User'}, {'comment_id': 956566098, 'comment_body': '```suggestion\r\n    character(len=:), allocatable, intent(out) :: cpp_compiler\r\n```\r\n\r\nAnd also below in the rest of the routine', 'comment_created': datetime.datetime(2022, 8, 27, 10, 20, 38, tzinfo=datetime.timezone.utc), 'commenter': 'LKedward', 'type': 'User'}, {'comment_id': 957209075, 'comment_body': 'This needs to be added to `model%link_librarys` and we only want to add it once (not repeatedly for each cpp file).\r\n\r\n```suggestion\r\n                    if (.not. (""stdc++"" .in. model%link_libraries)) then\r\n                        model%link_libraries = [model%link_libraries, string_t(""stdc++"")]\r\n                    end if\r\n```', 'comment_created': datetime.datetime(2022, 8, 29, 11, 33, 45, tzinfo=datetime.timezone.utc), 'commenter': 'LKedward', 'type': 'User'}, {'comment_id': 957209548, 'comment_body': 'Let\'s run the test executable to check that it links correctly.\r\n```suggestion\r\n""$fpm"" test\r\n```', 'comment_created': datetime.datetime(2022, 8, 29, 11, 34, 26, tzinfo=datetime.timezone.utc), 'commenter': 'LKedward', 'type': 'User'}, {'comment_id': 957300538, 'comment_body': 'Should the added not be in another if condition (as `len_trim(cc)` might be = 0 while `len_trim(cxx)` being > 0? \r\n```suggestion\r\n      self%cc = cc\r\n    else\r\n      call get_default_c_compiler(self%fc, self%cc)\r\n    end if\r\n    if (len_trim(cxx) > 0) then\r\n      self%cxx = cxx\r\n    else\r\n      call get_default_cpp_compiler(self%fc, self%cxx)\r\n    end if\r\n```', 'comment_created': datetime.datetime(2022, 8, 29, 13, 6, 23, tzinfo=datetime.timezone.utc), 'commenter': 'jvdp1', 'type': 'User'}, {'comment_id': 957303195, 'comment_body': 'Why not:\r\n```suggestion\r\n                 str_ends_with(lower(file_names(i)%s),c_suffixes) ),i=1,size(file_names))]\r\n```\r\n?', 'comment_created': datetime.datetime(2022, 8, 29, 13, 8, 45, tzinfo=datetime.timezone.utc), 'commenter': 'jvdp1', 'type': 'User'}, {'comment_id': 957350108, 'comment_body': '```suggestion\r\n                                type = FPM_TARGET_CPP_OBJECT, &\r\n```', 'comment_created': datetime.datetime(2022, 8, 29, 13, 38, 57, tzinfo=datetime.timezone.utc), 'commenter': 'LKedward', 'type': 'User'}, {'comment_id': 957354225, 'comment_body': 'We need to add CPP targets to the library link objects as well.\r\n\r\n```suggestion\r\n\r\n                    if (with_lib .and. sources(i)%unit_scope == FPM_SCOPE_LIB) then\r\n                        ! Archive depends on object\r\n                        call add_dependency(targets(1)%ptr, targets(size(targets))%ptr)\r\n                    end if\r\n                    \r\n```', 'comment_created': datetime.datetime(2022, 8, 29, 13, 42, 1, tzinfo=datetime.timezone.utc), 'commenter': 'LKedward', 'type': 'User'}, {'comment_id': 957993598, 'comment_body': 'When I made this line change, fpm started to break when compiling .cpp files.\r\n\r\n`g++ -c ./src/hello_world.cpp  -o build/gfortran_00000000811C9DC5/cpp_files/src_hello_world.cpp.o` \r\n\r\nThis above command is a valid command. Right ?\r\n\r\ncpp_files.f90                          done.\r\nhello_world.cpp                        compiling...\r\n[ 33%] Compiling... \r\nFortran runtime error: EXECUTE_COMMAND_LINE: Invalid command line\r\n\r\nError termination. Backtrace:\r\n#0  0x7fc4c1caeae0 in ???\r\n#1  0x7fc4c1caf659 in ???\r\n#2  0x7fc4c1cafb09 in ???\r\n#3  0x7fc4c1f2183c in ???\r\n#4  0x7fc4c1f21ac9 in ???\r\n#5  0x7fc4c1f21b8f in ???\r\n#6  0x555bea2e3b15 in __fpm_filesystem_MOD_run\r\n        at ./src/fpm_filesystem.F90:907\r\n#7  0x555bea35e830 in __fpm_compiler_MOD_compile_cpp\r\n        at ./src/fpm_compiler.f90:934\r\n#8  0x555bea368c3f in build_target\r\n        at ./src/fpm_backend.F90:329\r\n#9  0x555bea36c745 in __fpm_backend_MOD_build_package\r\n        at ./src/fpm_backend.F90:126\r\n#10  0x555bea2c01b1 in __fpm_MOD_cmd_build\r\n        at ./src/fpm.f90:310\r\n#11  0x555bea2b516e in MAIN__\r\n        at app/main.f90:68\r\n#12  0x555bea2b56e8 in main\r\n        at app/main.f90:11', 'comment_created': datetime.datetime(2022, 8, 30, 4, 29, 9, tzinfo=datetime.timezone.utc), 'commenter': 'arteevraina', 'type': 'User'}, {'comment_id': 958013214, 'comment_body': 'Yes, it should work. What happens when you try to run that command directly in your terminal? ', 'comment_created': datetime.datetime(2022, 8, 30, 5, 13, 50, tzinfo=datetime.timezone.utc), 'commenter': 'LKedward', 'type': 'User'}, {'comment_id': 958050289, 'comment_body': 'My bad, I forgot that I reinstalled Ubuntu on my PC which means g++ is not installed on my system. I had to install it, and it is now working fine.', 'comment_created': datetime.datetime(2022, 8, 30, 6, 21, 41, tzinfo=datetime.timezone.utc), 'commenter': 'arteevraina', 'type': 'User'}, {'comment_id': 958345010, 'comment_body': '```suggestion\r\n      import :: c_int, c_size_t\r\n      integer(c_int), intent(in) :: array(*)\r\n      integer(c_size_t), intent(in), value :: n\r\n```', 'comment_created': datetime.datetime(2022, 8, 30, 11, 14, tzinfo=datetime.timezone.utc), 'commenter': 'awvwgk', 'type': 'User'}, {'comment_id': 958346027, 'comment_body': 'This should be consistent with `cxxflags`, so either `cxx_compiler` or `cppflags`.', 'comment_created': datetime.datetime(2022, 8, 30, 11, 15, 11, tzinfo=datetime.timezone.utc), 'commenter': 'awvwgk', 'type': 'User'}, {'comment_id': 958347038, 'comment_body': 'This is also inconsistent, given the environment variable choice we should use `cxx` consistently for all C++ related variables', 'comment_created': datetime.datetime(2022, 8, 30, 11, 16, 22, tzinfo=datetime.timezone.utc), 'commenter': 'awvwgk', 'type': 'User'}, {'comment_id': 958349401, 'comment_body': ""What about other C++ related suffixes? We don't have to support all of them, but `.hpp` seems important for headers at least."", 'comment_created': datetime.datetime(2022, 8, 30, 11, 19, 7, tzinfo=datetime.timezone.utc), 'commenter': 'awvwgk', 'type': 'User'}, {'comment_id': 958350483, 'comment_body': 'Is this generally true? In case we are using clang++, g++ or icpc on MacOS do we always need `-lc++`?', 'comment_created': datetime.datetime(2022, 8, 30, 11, 20, 22, tzinfo=datetime.timezone.utc), 'commenter': 'awvwgk', 'type': 'User'}, {'comment_id': 958403080, 'comment_body': ""Good point. I don't have an answer unfortunately but it's not a blocker for this PR. I'm know very little about the MacOS ecosystem and I don't have a Mac to test these things out. ~A quick test in the CI shows that it works with clang++ as well as g++ on MacOS-11.~"", 'comment_created': datetime.datetime(2022, 8, 30, 12, 15, 20, tzinfo=datetime.timezone.utc), 'commenter': 'LKedward', 'type': 'User'}, {'comment_id': 958412511, 'comment_body': ""Scratch that last sentence, it wasn't actually testing clang++ when I used `--cpp-compiler=clang++`"", 'comment_created': datetime.datetime(2022, 8, 30, 12, 25, 4, tzinfo=datetime.timezone.utc), 'commenter': 'LKedward', 'type': 'User'}, {'comment_id': 959458897, 'comment_body': ""Okay, with that fixed I've tried it again and clang++ works on MacOS with `-lc++`. I can't comment on other compiler combinations, and how supported that is in C++."", 'comment_created': datetime.datetime(2022, 8, 31, 11, 12, 52, tzinfo=datetime.timezone.utc), 'commenter': 'LKedward', 'type': 'User'}]","[{'commit_sha': '26468d2454e1ec4d61dc43de750f19126c9dbde7', 'committer_username': 'arteevraina', 'committer_name': 'Arteev Raina', 'committer_email': 'arteevraina@gmail.com', 'commit_date': datetime.datetime(2018, 10, 8, 17, 57, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9fc44cc22c0094603311131f3bc326027b4747f8', 'committer_username': 'arteevraina', 'committer_name': 'Arteev Raina', 'committer_email': 'arteevraina@gmail.com', 'commit_date': datetime.datetime(2018, 10, 8, 17, 57, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': '08b0815ac2063c67ad3a60c255e1fa71944d6df9', 'committer_username': 'arteevraina', 'committer_name': 'Arteev Raina', 'committer_email': 'arteevraina@gmail.com', 'commit_date': datetime.datetime(2018, 10, 8, 17, 57, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8e4e3f926b963bd9873d6abe61df62c8311e299e', 'committer_username': 'arteevraina', 'committer_name': 'Arteev Raina', 'committer_email': 'arteevraina@gmail.com', 'commit_date': datetime.datetime(2018, 10, 8, 17, 57, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8d695c595a984563dd66da0d1502001bc32a1c8c', 'committer_username': 'arteevraina', 'committer_name': 'Arteev Raina', 'committer_email': 'arteevraina@gmail.com', 'commit_date': datetime.datetime(2018, 10, 8, 17, 57, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ecac6ca4cd8082a39e50f1e77922c0f449724f2f', 'committer_username': 'arteevraina', 'committer_name': 'Arteev Raina', 'committer_email': 'arteevraina@gmail.com', 'commit_date': datetime.datetime(2018, 10, 8, 17, 57, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': '484d2b3b7255b4b8d64338a86cce7b2cc4b99611', 'committer_username': 'arteevraina', 'committer_name': 'Arteev Raina', 'committer_email': 'arteevraina@gmail.com', 'commit_date': datetime.datetime(2018, 10, 8, 17, 57, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd8de3ce72eeaa97a57026ddbc98f0b7aa216e8b4', 'committer_username': 'arteevraina', 'committer_name': 'Arteev Raina', 'committer_email': 'arteevraina@gmail.com', 'commit_date': datetime.datetime(2018, 10, 8, 17, 57, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': '39a304d8b61c6cf0b5ca151d53ef6f4eb2c6efb7', 'committer_username': 'arteevraina', 'committer_name': 'Arteev Raina', 'committer_email': 'arteevraina@gmail.com', 'commit_date': datetime.datetime(2018, 10, 8, 17, 57, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': '97ea8ce81b141a69900d464137e153460daea569', 'committer_username': 'arteevraina', 'committer_name': 'Arteev Raina', 'committer_email': 'arteevraina@gmail.com', 'commit_date': datetime.datetime(2018, 10, 8, 17, 57, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': '510082726aad0bd876437b438e03515dcf0dd648', 'committer_username': 'arteevraina', 'committer_name': 'Arteev Raina', 'committer_email': 'arteevraina@gmail.com', 'commit_date': datetime.datetime(2018, 10, 8, 17, 57, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': '97810e54b9d1a75c3fa91a4e0b30bc3864e060dd', 'committer_username': 'LKedward', 'committer_name': 'Laurence Kedward', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 25, 12, 24, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e6c8f31451abf2e54dcba2ae872711d2994569a4', 'committer_username': 'LKedward', 'committer_name': 'Laurence Kedward', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 25, 12, 24, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '24577d131fe133fe95982668c72aa9ae4003fe4a', 'committer_username': 'LKedward', 'committer_name': 'Laurence Kedward', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 25, 12, 24, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0235f3f3ee5718d0527e39955555ed06d4b57219', 'committer_username': 'LKedward', 'committer_name': 'Laurence Kedward', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 25, 12, 24, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'de1590575b1d17d693b69e06b8fb4b21a92d2838', 'committer_username': 'arteevraina', 'committer_name': 'Arteev Raina', 'committer_email': 'arteevraina@gmail.com', 'commit_date': datetime.datetime(2018, 10, 8, 17, 57, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c83802d4e9d0198eb03c66be36ed40b49e15a482', 'committer_username': 'arteevraina', 'committer_name': 'Arteev Raina', 'committer_email': 'arteevraina@gmail.com', 'commit_date': datetime.datetime(2018, 10, 8, 17, 57, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': '294f71b2b6b957795ce9f518045fddb6b6d64a7a', 'committer_username': 'arteevraina', 'committer_name': 'Arteev Raina', 'committer_email': 'arteevraina@gmail.com', 'commit_date': datetime.datetime(2018, 10, 8, 17, 57, 28, tzinfo=datetime.timezone.utc)}]",Arteev Raina,43968121,arteevraina@gmail.com,User,,118,,86,69
1047794467,refactor: change in structure of stdlib in order to compiler it using fypp script,"This Pull Request makes few structural changes in `stdlib` to make get it compiled using the compiler wrapper script [here](https://github.com/fortran-lang/fpm/pull/729).



<!--
Thank you for contributing to stdlib.
To help us get your pull request merged more quickly, please consider reviewing any of the already open pull requests.
-->
",False,675,https://api.github.com/repos/fortran-lang/stdlib/pulls/675,https://github.com/fortran-lang/stdlib/pull/675,open,130,44,13,17,13,8,0,0,[],2022-09-06 16:34:18+00:00,,0.0,,"[{'comment_id': 966136260, 'comment_body': 'This is the wrong place to add this option. Please append the option later or initialize the `fyppFlags` with the include directory and append the `MAXRANK` macro here.', 'comment_created': datetime.datetime(2022, 9, 8, 15, 49, 8, tzinfo=datetime.timezone.utc), 'commenter': 'awvwgk', 'type': 'User'}, {'comment_id': 966245939, 'comment_body': 'Here and other places: replace ""Rank 7"" by ""Rank >7"" or by ""Rank 8 or higher""\r\n```suggestion\r\n        call skip_test(error, ""Rank >7 is not supported"")\r\n```', 'comment_created': datetime.datetime(2022, 9, 8, 17, 35, 53, tzinfo=datetime.timezone.utc), 'commenter': 'jvdp1', 'type': 'User'}, {'comment_id': 967817756, 'comment_body': 'Should it be \r\n```suggestion\r\n[preprocess.fypp]\r\n```\r\n?\r\nAs far as I remember, CPP is not used within stdlib.', 'comment_created': datetime.datetime(2022, 9, 11, 12, 17, 47, tzinfo=datetime.timezone.utc), 'commenter': 'jvdp1', 'type': 'User'}, {'comment_id': 967826775, 'comment_body': 'Yes, that is not used. But, we have not enabled ``fypp`` inside ``fpm`` as of now. So, it cannot identity it as a valid preprocessor. Considering ``fypp-gfortran.py`` as a temporary solution, I think when we have ``fypp`` integrated inside fpm then I think we should rename it as fypp instead of cpp.', 'comment_created': datetime.datetime(2022, 9, 11, 13, 12, 8, tzinfo=datetime.timezone.utc), 'commenter': 'arteevraina', 'type': 'User'}, {'comment_id': 979434567, 'comment_body': 'Should we support extracting those values automatically in fpm?', 'comment_created': datetime.datetime(2022, 9, 25, 17, 22, 54, tzinfo=datetime.timezone.utc), 'commenter': 'awvwgk', 'type': 'User'}, {'comment_id': 979574117, 'comment_body': 'Yes, I think we should add support to extract them for the version number ?\r\nI will take up this task.', 'comment_created': datetime.datetime(2022, 9, 26, 5, 32, 59, tzinfo=datetime.timezone.utc), 'commenter': 'arteevraina', 'type': 'User'}, {'comment_id': 985199546, 'comment_body': 'PR created for this https://github.com/fortran-lang/fpm/pull/766', 'comment_created': datetime.datetime(2022, 10, 2, 8, 16, 59, tzinfo=datetime.timezone.utc), 'commenter': 'arteevraina', 'type': 'User'}, {'comment_id': 986125483, 'comment_body': 'Why is that provided? IMO a link to `fpm` should be sufficient.', 'comment_created': datetime.datetime(2022, 10, 3, 19, 1, 9, tzinfo=datetime.timezone.utc), 'commenter': 'jvdp1', 'type': 'User'}]","[{'commit_sha': 'c46d76e249f8de7d0422f9b3dffbb0f80fdd289d', 'committer_username': 'arteevraina', 'committer_name': 'Arteev Raina', 'committer_email': 'arteevraina@gmail.com', 'commit_date': datetime.datetime(2018, 10, 8, 17, 57, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6d0bbbc7edb5b2860938a30a47a1317cc13731c1', 'committer_username': 'arteevraina', 'committer_name': 'Arteev Raina', 'committer_email': 'arteevraina@gmail.com', 'commit_date': datetime.datetime(2018, 10, 8, 17, 57, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4e4b0d2c4d90e78912b19e2b20ea4f60df728eee', 'committer_username': 'arteevraina', 'committer_name': 'Arteev Raina', 'committer_email': 'arteevraina@gmail.com', 'commit_date': datetime.datetime(2018, 10, 8, 17, 57, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': '21212c8a6fcbd6a36b91907785b9aecaed62da47', 'committer_username': 'arteevraina', 'committer_name': 'Arteev Raina', 'committer_email': 'arteevraina@gmail.com', 'commit_date': datetime.datetime(2018, 10, 8, 17, 57, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': '35ed9b6489f22a324d0dc59cb92a8d068e9b97ae', 'committer_username': 'arteevraina', 'committer_name': 'Arteev Raina', 'committer_email': 'arteevraina@gmail.com', 'commit_date': datetime.datetime(2018, 10, 8, 17, 57, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1608e14665569d6e446334c93f9aa8011347e963', 'committer_username': 'arteevraina', 'committer_name': 'Arteev Raina', 'committer_email': 'arteevraina@gmail.com', 'commit_date': datetime.datetime(2018, 10, 8, 17, 57, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd0363113c7e9481d9b5ce645d427789000c3f64d', 'committer_username': 'arteevraina', 'committer_name': 'Arteev Raina', 'committer_email': 'arteevraina@gmail.com', 'commit_date': datetime.datetime(2018, 10, 8, 17, 57, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0d4fc9177c9b3bfd69efd9b76f5904c83b019fc1', 'committer_username': 'arteevraina', 'committer_name': 'Arteev Raina', 'committer_email': 'arteevraina@gmail.com', 'commit_date': datetime.datetime(2018, 10, 8, 17, 57, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e88c9222113e4bde35a16f5ea09337a51cde7dc4', 'committer_username': 'arteevraina', 'committer_name': 'Arteev Raina', 'committer_email': 'arteevraina@gmail.com', 'commit_date': datetime.datetime(2018, 10, 8, 17, 57, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9877ed4aabfddbdbf01bf0e799b4302a2dd51754', 'committer_username': 'arteevraina', 'committer_name': 'Arteev Raina', 'committer_email': 'arteevraina@gmail.com', 'commit_date': datetime.datetime(2018, 10, 8, 17, 57, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2a6c4292390a5d3d50dedc7258dafaefb4711af2', 'committer_username': 'arteevraina', 'committer_name': 'Arteev Raina', 'committer_email': 'arteevraina@gmail.com', 'commit_date': datetime.datetime(2018, 10, 8, 17, 57, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': '21748c016c5dc868b18a6fb6a7502cc95908ca96', 'committer_username': 'arteevraina', 'committer_name': 'Arteev Raina', 'committer_email': 'arteevraina@gmail.com', 'commit_date': datetime.datetime(2018, 10, 8, 17, 57, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f941556a113fe2474b299e52232106ace8158d7a', 'committer_username': 'arteevraina', 'committer_name': 'Arteev Raina', 'committer_email': 'arteevraina@gmail.com', 'commit_date': datetime.datetime(2018, 10, 8, 17, 57, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5904f32e8cb9a1f061cd9ee4579c6a64cd94baab', 'committer_username': 'arteevraina', 'committer_name': 'Arteev Raina', 'committer_email': 'arteevraina@gmail.com', 'commit_date': datetime.datetime(2018, 10, 8, 17, 57, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cdebc2041771fad6fc97dea549941388280797cb', 'committer_username': 'arteevraina', 'committer_name': 'Arteev Raina', 'committer_email': 'arteevraina@gmail.com', 'commit_date': datetime.datetime(2018, 10, 8, 17, 57, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2b63915d69d31398b9331665c84132417ed348ed', 'committer_username': 'arteevraina', 'committer_name': 'Arteev Raina', 'committer_email': 'arteevraina@gmail.com', 'commit_date': datetime.datetime(2018, 10, 8, 17, 57, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7c99e70ad51a80876a28a6dd21035d6cbc413abe', 'committer_username': 'arteevraina', 'committer_name': 'Arteev Raina', 'committer_email': 'arteevraina@gmail.com', 'commit_date': datetime.datetime(2018, 10, 8, 17, 57, 28, tzinfo=datetime.timezone.utc)}]",Arteev Raina,43968121,arteevraina@gmail.com,User,,118,,86,69
1042497407,docs: updated example packages README with new packages that were added,Updated the [README.md](https://github.com/fortran-lang/fpm/blob/main/example_packages/README.md) of example packages.,True,740,https://api.github.com/repos/fortran-lang/fpm/pulls/740,https://github.com/fortran-lang/fpm/pull/740,closed,4,0,1,2,2,3,0,0,[],2022-08-31 14:51:02+00:00,2022-09-08 11:42:55+00:00,679913.0,"7 days, 20:51:53","[{'comment_id': 964998456, 'comment_body': '```suggestion\r\n| preprocess_hello    | App only; Macros remain local to the package                  |            N            |  Y  |\r\n```', 'comment_created': datetime.datetime(2022, 9, 7, 15, 33, 31, tzinfo=datetime.timezone.utc), 'commenter': 'awvwgk', 'type': 'User'}, {'comment_id': 964998951, 'comment_body': '```suggestion\r\n| preprocess_cpp      | Lib only; C preprocessing; Macro parsing                      |            N            |  Y  |\r\n```', 'comment_created': datetime.datetime(2022, 9, 7, 15, 33, 58, tzinfo=datetime.timezone.utc), 'commenter': 'awvwgk', 'type': 'User'}, {'comment_id': 964999257, 'comment_body': '```suggestion\r\n| cpp_files           | C++ files get compiled using fpm                              |            N            |  Y  |\r\n```', 'comment_created': datetime.datetime(2022, 9, 7, 15, 34, 14, tzinfo=datetime.timezone.utc), 'commenter': 'awvwgk', 'type': 'User'}]","[{'commit_sha': 'da7c80ec0af723fe334d15fcbb3c42612b51f756', 'committer_username': 'arteevraina', 'committer_name': 'Arteev Raina', 'committer_email': 'arteevraina@gmail.com', 'commit_date': datetime.datetime(2018, 10, 8, 17, 57, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f7bc836b9a3564895ced7bb964643976dc29e94e', 'committer_username': 'arteevraina', 'committer_name': 'Arteev Raina', 'committer_email': 'arteevraina@gmail.com', 'commit_date': datetime.datetime(2018, 10, 8, 17, 57, 28, tzinfo=datetime.timezone.utc)}]",Arteev Raina,43968121,arteevraina@gmail.com,User,,118,,86,69
893196247,fix: remove remove unnecessary space in fpm new cmd,This Pull Request removed leading space in `fpm new` command.,True,684,https://api.github.com/repos/fortran-lang/fpm/pulls/684,https://github.com/fortran-lang/fpm/pull/684,closed,16,16,1,1,0,0,0,0,[],2022-03-29 15:17:13+00:00,2022-03-29 15:35:28+00:00,1095.0,0:18:15,[],"[{'commit_sha': 'a9dcdcc4970af0ec2666f62335d5c512927f8182', 'committer_username': 'arteevraina', 'committer_name': 'Arteev Raina', 'committer_email': 'arteevraina@gmail.com', 'commit_date': datetime.datetime(2018, 10, 8, 17, 57, 28, tzinfo=datetime.timezone.utc)}]",Arteev Raina,43968121,arteevraina@gmail.com,User,,118,,86,69
898058236,fix: remove extra space from help-test cmd,This is a similar fix as #684 but for `help-test`,True,686,https://api.github.com/repos/fortran-lang/fpm/pulls/686,https://github.com/fortran-lang/fpm/pull/686,closed,14,14,1,2,0,0,0,0,[],2022-04-02 13:11:25+00:00,2022-06-12 14:20:13+00:00,6138528.0,"71 days, 1:08:48",[],"[{'commit_sha': '180d8d668317ca8fe9613579ae67cf52a02a2e50', 'committer_username': 'arteevraina', 'committer_name': 'Arteev Raina', 'committer_email': 'arteevraina@gmail.com', 'commit_date': datetime.datetime(2018, 10, 8, 17, 57, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'eee91f0f2ca2197f38446b5cd5397441819a1ae5', 'committer_username': 'LKedward', 'committer_name': 'Laurence Kedward', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 25, 12, 24, 17, tzinfo=datetime.timezone.utc)}]",Arteev Raina,43968121,arteevraina@gmail.com,User,,118,,86,69
893196247,fix: remove remove unnecessary space in fpm new cmd,This Pull Request removed leading space in `fpm new` command.,True,684,https://api.github.com/repos/fortran-lang/fpm/pulls/684,https://github.com/fortran-lang/fpm/pull/684,closed,16,16,1,1,0,0,0,0,[],2022-03-29 15:17:13+00:00,2022-03-29 15:35:28+00:00,1095.0,0:18:15,[],"[{'commit_sha': 'a9dcdcc4970af0ec2666f62335d5c512927f8182', 'committer_username': 'arteevraina', 'committer_name': 'Arteev Raina', 'committer_email': 'arteevraina@gmail.com', 'commit_date': datetime.datetime(2018, 10, 8, 17, 57, 28, tzinfo=datetime.timezone.utc)}]",Arteev Raina,43968121,arteevraina@gmail.com,User,,118,,86,69

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
233763778,fpm,fortran-lang/fpm,Fortran,97,868,25,43,2246,200,6,12,"[{'id': 1922607583, 'number': 1050, 'closed': None, 'created': datetime.datetime(2024, 6, 16, 7, 42, 37, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 39, 'deletions': 3, 'state': 'open'}, {'id': 1073777075, 'number': 766, 'closed': None, 'created': datetime.datetime(2022, 10, 2, 8, 15, 20, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 96, 'deletions': 3, 'state': 'open'}, {'id': 1042497407, 'number': 740, 'closed': datetime.datetime(2022, 9, 8, 11, 42, 55, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 31, 14, 51, 2, tzinfo=datetime.timezone.utc), 'time_taken': 679913.0, 'time_delta': '7 days, 20:51:53', 'additions': 4, 'deletions': 0, 'state': 'closed'}, {'id': 1038568508, 'number': 733, 'closed': datetime.datetime(2022, 8, 31, 12, 48, 11, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 27, 6, 16, 11, tzinfo=datetime.timezone.utc), 'time_taken': 369120.0, 'time_delta': '4 days, 6:32:00', 'additions': 209, 'deletions': 21, 'state': 'closed'}, {'id': 1025803571, 'number': 729, 'closed': None, 'created': datetime.datetime(2022, 8, 14, 13, 11, 55, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 82, 'deletions': 4, 'state': 'open'}, {'id': 995615023, 'number': 720, 'closed': datetime.datetime(2022, 8, 4, 12, 29, 18, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 13, 15, 0, 5, tzinfo=datetime.timezone.utc), 'time_taken': 1891753.0, 'time_delta': '21 days, 21:29:13', 'additions': 278, 'deletions': 18, 'state': 'closed'}, {'id': 979331220, 'number': 715, 'closed': datetime.datetime(2022, 7, 11, 11, 27, 35, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 6, 26, 15, 17, 3, tzinfo=datetime.timezone.utc), 'time_taken': 1282232.0, 'time_delta': '14 days, 20:10:32', 'additions': 349, 'deletions': 5, 'state': 'closed'}, {'id': 898058236, 'number': 686, 'closed': datetime.datetime(2022, 6, 12, 14, 20, 13, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 4, 2, 13, 11, 25, tzinfo=datetime.timezone.utc), 'time_taken': 6138528.0, 'time_delta': '71 days, 1:08:48', 'additions': 14, 'deletions': 14, 'state': 'closed'}, {'id': 893867733, 'number': 685, 'closed': datetime.datetime(2022, 6, 12, 14, 4, 32, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 3, 30, 2, 38, 56, tzinfo=datetime.timezone.utc), 'time_taken': 6434736.0, 'time_delta': '74 days, 11:25:36', 'additions': 5, 'deletions': 10, 'state': 'closed'}, {'id': 893196247, 'number': 684, 'closed': datetime.datetime(2022, 3, 29, 15, 35, 28, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 3, 29, 15, 17, 13, tzinfo=datetime.timezone.utc), 'time_taken': 1095.0, 'time_delta': '0:18:15', 'additions': 16, 'deletions': 16, 'state': 'closed'}]"
228099010,stdlib,fortran-lang/stdlib,Fortran,164,1048,55,64,3103,253,5,24,"[{'id': 1047794467, 'number': 675, 'closed': None, 'created': datetime.datetime(2022, 9, 6, 16, 34, 18, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 130, 'deletions': 44, 'state': 'open'}]"
