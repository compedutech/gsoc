pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
950006009,dnsdist: add AF_XDP support for UDP,"Signed-off-by: Y7n05h <Y7n05h@protonmail.com>

### Short description

Added partial `AF_XDP Socket` (aka `xsk`) support for dnsdist's UDP client

### Checklist

I have:
- [x] read the [CONTRIBUTING.md](https://github.com/PowerDNS/pdns/blob/master/CONTRIBUTING.md) document
- [x] compiled this code
- [x] tested this code
- [ ] included documentation (including possible behaviour changes)
- [ ] documented the code
- [ ] added or modified regression test(s)
- [ ] added or modified unit test(s)

---

In order to maximize the advantages of `xsk`, I have tried to avoid the copying of `frame` to `PacketBuffer`. But this attempt was unsuccessful, because `PacketBuffer` is required by so much code that it is very difficult to change the implementation of `PacketBuffer`.",True,11652,https://api.github.com/repos/PowerDNS/pdns/pulls/11652,https://github.com/PowerDNS/pdns/pull/11652,closed,3979,438,66,51,71,58,2,1,"[{'name': 'enhancement'}, {'name': 'dnsdist'}]",2022-05-28 09:33:20+00:00,2024-01-30 10:56:58+00:00,52881818.0,"612 days, 1:23:38","[{'comment_id': 885595826, 'comment_body': 'It might make sense not to include this file in dnsdist.hh, and to instead do a forward declaration of class XskSocket; before the `ClientState` definition.', 'comment_created': datetime.datetime(2022, 5, 31, 12, 48, 48, tzinfo=datetime.timezone.utc), 'commenter': 'rgacogne', 'type': 'User'}, {'comment_id': 885597209, 'comment_body': 'We need to add xsk.cc and xsk.hh to `dnsdist_SOURCES` in Makefile.am. We will worry later about what happens if XDP/libxdp/... is not available.', 'comment_created': datetime.datetime(2022, 5, 31, 12, 50, 10, tzinfo=datetime.timezone.utc), 'commenter': 'rgacogne', 'type': 'User'}, {'comment_id': 885599859, 'comment_body': 'How is that function called? I guess the idea is to call that one instead of `udpClientThread` when XDP is enabled?', 'comment_created': datetime.datetime(2022, 5, 31, 12, 52, 43, tzinfo=datetime.timezone.utc), 'commenter': 'rgacogne', 'type': 'User'}, {'comment_id': 885604891, 'comment_body': 'Do you think it would be possible to refactor `processUDPQuery()` to use the same code as soon as we have copied the incoming payload to a PacketBuffer?\r\nI would not worry too much about the copy for now, by the way, we can see later how to best deal with that, either by enhancing PacketBuffer or by switching to a different type.', 'comment_created': datetime.datetime(2022, 5, 31, 12, 57, 32, tzinfo=datetime.timezone.utc), 'commenter': 'rgacogne', 'type': 'User'}, {'comment_id': 885702040, 'comment_body': 'Yes, but not exactly right. My current idea is to have `xskClientThread` replace `udpClientThread` and `tcpClientThread` when `XDP` is enabled. The work on the `tcpClientThrea` part here has not started yet. This is just a current idea, and may change in the future.', 'comment_created': datetime.datetime(2022, 5, 31, 14, 19, 20, tzinfo=datetime.timezone.utc), 'commenter': 'Y7n05h', 'type': 'User'}, {'comment_id': 885704179, 'comment_body': 'Understood! I wonder if that makes sense to support XDP for TCP in our case, do you know if the performance improvements are significant?', 'comment_created': datetime.datetime(2022, 5, 31, 14, 21, 6, tzinfo=datetime.timezone.utc), 'commenter': 'rgacogne', 'type': 'User'}, {'comment_id': 885719172, 'comment_body': ""I don't really agree. It seems to me that an AF_XDP Socket would correspond to a queue of NIC devices. Sending packets for different protocols from the same NIC queue to a different AF_XDP Socket, while feasible, doesn't make much sense. So our `xskClientThread` needs to support all types of network protocols. So refactoring `processUDPQuery()` is probably not a good practice."", 'comment_created': datetime.datetime(2022, 5, 31, 14, 33, 27, tzinfo=datetime.timezone.utc), 'commenter': 'Y7n05h', 'type': 'User'}, {'comment_id': 885722089, 'comment_body': 'Right, I missed that but it makes sense. Would that mean that we cannot get DoT or DoH traffic on that NIC queue?', 'comment_created': datetime.datetime(2022, 5, 31, 14, 35, 53, tzinfo=datetime.timezone.utc), 'commenter': 'rgacogne', 'type': 'User'}, {'comment_id': 885722443, 'comment_body': ""Sorry, I'm not entirely sure about that."", 'comment_created': datetime.datetime(2022, 5, 31, 14, 36, 11, tzinfo=datetime.timezone.utc), 'commenter': 'Y7n05h', 'type': 'User'}, {'comment_id': 885723972, 'comment_body': 'No worry, especially since I now understand that handling UDP but not TCP would likely be hard, so it looks like we will have to handle XDP for TCP anyway. ', 'comment_created': datetime.datetime(2022, 5, 31, 14, 37, 29, tzinfo=datetime.timezone.utc), 'commenter': 'rgacogne', 'type': 'User'}, {'comment_id': 885739002, 'comment_body': ""Sorry, I probably didn't get your point. But I think as long as we implement TCP support for XDP (which has some difficulty because of TCP's Seq and Window mechanisms, which are difficult to guarantee consistent state with the other side), then AF_XDP should also be able to support DoT and DoH. at least in principle it's possible. I can't think of anything stopping us from implementing it."", 'comment_created': datetime.datetime(2022, 5, 31, 14, 50, 33, tzinfo=datetime.timezone.utc), 'commenter': 'Y7n05h', 'type': 'User'}, {'comment_id': 885744605, 'comment_body': 'Sounds good, thanks!', 'comment_created': datetime.datetime(2022, 5, 31, 14, 55, 16, tzinfo=datetime.timezone.utc), 'commenter': 'rgacogne', 'type': 'User'}, {'comment_id': 892733333, 'comment_body': '## Unused local variable\n\nVariable len is not used\n\n[Show more details](https://github.com/PowerDNS/pdns/security/code-scanning/1174)', 'comment_created': datetime.datetime(2022, 6, 8, 18, 35, 45, tzinfo=datetime.timezone.utc), 'commenter': 'github-advanced-security[bot]', 'type': 'Bot'}, {'comment_id': 894627315, 'comment_body': ""I have implemented the compile argument `-with-xsk` to decide whether to use `xsk` or not. But it didn't complete the decision to link `libxdp` based on the presence or absence of `--with-xsk`."", 'comment_created': datetime.datetime(2022, 6, 10, 15, 2, 42, tzinfo=datetime.timezone.utc), 'commenter': 'Y7n05h', 'type': 'User'}, {'comment_id': 902811348, 'comment_body': 'Just a nit but this should go with the other unique_ptr to prevent losing space due to padding.', 'comment_created': datetime.datetime(2022, 6, 21, 16, 10, 13, tzinfo=datetime.timezone.utc), 'commenter': 'rgacogne', 'type': 'User'}, {'comment_id': 902815830, 'comment_body': 'return would terminate the thread, that does not seem right?', 'comment_created': datetime.datetime(2022, 6, 21, 16, 14, 40, tzinfo=datetime.timezone.utc), 'commenter': 'rgacogne', 'type': 'User'}, {'comment_id': 902819855, 'comment_body': 'Why is `setUp()` called here? Are the regular health-check mechanisms not working in that case?', 'comment_created': datetime.datetime(2022, 6, 21, 16, 18, 45, tzinfo=datetime.timezone.utc), 'commenter': 'rgacogne', 'type': 'User'}, {'comment_id': 902824932, 'comment_body': 'Likely needs to be guarded by `#ifdef HAVE_XSK` as well?', 'comment_created': datetime.datetime(2022, 6, 21, 16, 23, 46, tzinfo=datetime.timezone.utc), 'commenter': 'rgacogne', 'type': 'User'}, {'comment_id': 902826390, 'comment_body': 'Is that actually used?', 'comment_created': datetime.datetime(2022, 6, 21, 16, 25, 21, tzinfo=datetime.timezone.utc), 'commenter': 'rgacogne', 'type': 'User'}, {'comment_id': 903202029, 'comment_body': ""Oh yes.  Currently AF_XDP is wrong to work with health checks.  Because AF_XDP will intercept all packets and make the health check timeout.  I called setup() to avoid the trouble of health checks when debugging.  I forgot that this place wasn't handled properly.  I will fix it today."", 'comment_created': datetime.datetime(2022, 6, 22, 1, 40, 47, tzinfo=datetime.timezone.utc), 'commenter': 'Y7n05h', 'type': 'User'}, {'comment_id': 903243318, 'comment_body': 'The return here is just returning from the lambda function.', 'comment_created': datetime.datetime(2022, 6, 22, 3, 13, 10, tzinfo=datetime.timezone.utc), 'commenter': 'Y7n05h', 'type': 'User'}, {'comment_id': 903399803, 'comment_body': ""Oh, right, I don't know how I missed that, sorry!"", 'comment_created': datetime.datetime(2022, 6, 22, 7, 45, 22, tzinfo=datetime.timezone.utc), 'commenter': 'rgacogne', 'type': 'User'}, {'comment_id': 904527509, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2022, 6, 23, 5, 17, 28, tzinfo=datetime.timezone.utc), 'commenter': 'Y7n05h', 'type': 'User'}, {'comment_id': 904527933, 'comment_body': 'Now xsk works properly with healthcheck.', 'comment_created': datetime.datetime(2022, 6, 23, 5, 18, 25, tzinfo=datetime.timezone.utc), 'commenter': 'Y7n05h', 'type': 'User'}, {'comment_id': 904528146, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2022, 6, 23, 5, 18, 46, tzinfo=datetime.timezone.utc), 'commenter': 'Y7n05h', 'type': 'User'}, {'comment_id': 904528601, 'comment_body': 'The call to this function was missed earlier. Fixed now.', 'comment_created': datetime.datetime(2022, 6, 23, 5, 19, 43, tzinfo=datetime.timezone.utc), 'commenter': 'Y7n05h', 'type': 'User'}, {'comment_id': 907471130, 'comment_body': 'Is the `bool` option actually used?', 'comment_created': datetime.datetime(2022, 6, 27, 14, 43, 28, tzinfo=datetime.timezone.utc), 'commenter': 'rgacogne', 'type': 'User'}, {'comment_id': 907477762, 'comment_body': 'Given that the frame size is non-configurable, we might want to turn it into a constant inside the XskSocket class?', 'comment_created': datetime.datetime(2022, 6, 27, 14, 50, 1, tzinfo=datetime.timezone.utc), 'commenter': 'rgacogne', 'type': 'User'}, {'comment_id': 907480330, 'comment_body': ""Just a nit but it would be nice to move it with the other `shared_ptr` so we don't waste any space to padding."", 'comment_created': datetime.datetime(2022, 6, 27, 14, 52, 32, tzinfo=datetime.timezone.utc), 'commenter': 'rgacogne', 'type': 'User'}, {'comment_id': 907481381, 'comment_body': 'It would be nice to move these between the shared pointers and the `size_t`', 'comment_created': datetime.datetime(2022, 6, 27, 14, 53, 37, tzinfo=datetime.timezone.utc), 'commenter': 'rgacogne', 'type': 'User'}, {'comment_id': 907493231, 'comment_body': 'I think we could avoid a fair amount of the code duplication below that line, but that would require a bit of refactoring. I can do that later.', 'comment_created': datetime.datetime(2022, 6, 27, 15, 5, 1, tzinfo=datetime.timezone.utc), 'commenter': 'rgacogne', 'type': 'User'}, {'comment_id': 907495171, 'comment_body': 'I think it might make sense to keep `handleTimeouts()` separated from `updateStatisticsInfo()`. Or at least it would need a better name, because it was not clear to me that the timeouts would be handled in that function.', 'comment_created': datetime.datetime(2022, 6, 27, 15, 7, 2, tzinfo=datetime.timezone.utc), 'commenter': 'rgacogne', 'type': 'User'}, {'comment_id': 907499289, 'comment_body': '```suggestion\r\n    throw runtime_error(""Adding a server with xsk at runtime is not supported"");\r\n```', 'comment_created': datetime.datetime(2022, 6, 27, 15, 11, 6, tzinfo=datetime.timezone.utc), 'commenter': 'rgacogne', 'type': 'User'}, {'comment_id': 907508192, 'comment_body': '```suggestion\r\n    REWRITE = 1 << 4\r\n```', 'comment_created': datetime.datetime(2022, 6, 27, 15, 19, 58, tzinfo=datetime.timezone.utc), 'commenter': 'rgacogne', 'type': 'User'}, {'comment_id': 907521280, 'comment_body': 'It took me a while to understand what exactly the router does, and how it interacts with the other components, so perhaps a few comments about the general XSK design/architecture would help?', 'comment_created': datetime.datetime(2022, 6, 27, 15, 33, 45, tzinfo=datetime.timezone.utc), 'commenter': 'rgacogne', 'type': 'User'}, {'comment_id': 907994150, 'comment_body': 'Are you perhaps misreading the content? There are no shared pointers in `DownstreamState::Config`. you probably meant to say `string` ?', 'comment_created': datetime.datetime(2022, 6, 28, 3, 27, 22, tzinfo=datetime.timezone.utc), 'commenter': 'Y7n05h', 'type': 'User'}, {'comment_id': 907995040, 'comment_body': 'Oh, `bool` is not needed for now.', 'comment_created': datetime.datetime(2022, 6, 28, 3, 28, 23, tzinfo=datetime.timezone.utc), 'commenter': 'Y7n05h', 'type': 'User'}, {'comment_id': 907997612, 'comment_body': ""You are right. I was initially concerned that there might be a need to create multiple AF_XDP sockets with different frame sizes in dnsdist, and it's easier to scale when such a need arises. But it does seem a bit over-engineered."", 'comment_created': datetime.datetime(2022, 6, 28, 3, 35, 19, tzinfo=datetime.timezone.utc), 'commenter': 'Y7n05h', 'type': 'User'}, {'comment_id': 908131113, 'comment_body': 'Oops, I was wrong indeed! Yes, between the `string` and the `size_t` would be great, thanks!', 'comment_created': datetime.datetime(2022, 6, 28, 7, 26, 27, tzinfo=datetime.timezone.utc), 'commenter': 'rgacogne', 'type': 'User'}, {'comment_id': 909274544, 'comment_body': ""Ok, no problem. I added some comments.\r\nThe design here is indeed a bit complicated.\r\nSince `boost::lockfree::spsc_queue` does not accept `unique_ptr<XskPacket>` as a parameter (`unique_ptr` cannot be copy constructed), I made `XskPacket` as the parameter of `boost::lockfree::spsc_queue`. But I am worried about the copying overhead of XskPacket, so XskFrameInfo and XskDelayPacketInfo are constructed instead of XskPacket in many cases to reduce the copying overhead.\r\nThe presence of `XskFrameInfo` and `XskDelayPacketInfo` adds a lot of complexity here.\r\nI now use `XskPacket*` as an element in boost::lockfree::spsc_queue in my refactoring. In this way, the overhead of copying is eliminated, and `XskFrameInfo` and `XskDelayPacketInfo` are also eliminated. I also changed the name of `XskExtraInfo` to `XskWorker`, which may be more appropriate.\r\nThe code here is probably better understood now.\r\nI also added some comments, but I'm not sure if my comments are enough. I can add more comments if needed."", 'comment_created': datetime.datetime(2022, 6, 29, 7, 10, 51, tzinfo=datetime.timezone.utc), 'commenter': 'Y7n05h', 'type': 'User'}, {'comment_id': 909445967, 'comment_body': ""Thanks a lot, I'll have a look and do a new review tomorrow!"", 'comment_created': datetime.datetime(2022, 6, 29, 10, 4, 40, tzinfo=datetime.timezone.utc), 'commenter': 'rgacogne', 'type': 'User'}, {'comment_id': 915956665, 'comment_body': 'I think it would make sense to support routing the packets to the current endpoint based on the whole destination address, and not just the port, as we often see different endpoints with different configurations based on the destination address. And source address for backends, as well.', 'comment_created': datetime.datetime(2022, 7, 7, 14, 41, 9, tzinfo=datetime.timezone.utc), 'commenter': 'rgacogne', 'type': 'User'}, {'comment_id': 915962201, 'comment_body': '```suggestion\r\nvoid XskPacket::updatePacket() noexcept\r\n```', 'comment_created': datetime.datetime(2022, 7, 7, 14, 45, 59, tzinfo=datetime.timezone.utc), 'commenter': 'rgacogne', 'type': 'User'}, {'comment_id': 915970273, 'comment_body': '```suggestion\r\n  if (res != sizeof(value)) {\r\n```', 'comment_created': datetime.datetime(2022, 7, 7, 14, 52, 51, tzinfo=datetime.timezone.utc), 'commenter': 'rgacogne', 'type': 'User'}, {'comment_id': 916016748, 'comment_body': 'Getting an iterator with `find()` might prevent doing the lookup three times here, although it should not really matter for healthcheck responses.', 'comment_created': datetime.datetime(2022, 7, 7, 15, 35, 37, tzinfo=datetime.timezone.utc), 'commenter': 'rgacogne', 'type': 'User'}, {'comment_id': 916020113, 'comment_body': 'Do we want to munmap on failure?', 'comment_created': datetime.datetime(2022, 7, 7, 15, 38, 57, tzinfo=datetime.timezone.utc), 'commenter': 'rgacogne', 'type': 'User'}, {'comment_id': 916020616, 'comment_body': ""Perhaps munmap and freeing the umem? I wonder if it would be worth wrapping the umem object, and perhaps the socket, into unique_pointers to not have to worry about cleaning up if we don't reach the end of the constructor (and thus the destructor is never called)."", 'comment_created': datetime.datetime(2022, 7, 7, 15, 39, 29, tzinfo=datetime.timezone.utc), 'commenter': 'rgacogne', 'type': 'User'}, {'comment_id': 916028490, 'comment_body': 'It might make sense to use FDWrapper objects instead of `int`s here.', 'comment_created': datetime.datetime(2022, 7, 7, 15, 47, 9, tzinfo=datetime.timezone.utc), 'commenter': 'rgacogne', 'type': 'User'}, {'comment_id': 916920600, 'comment_body': ""No, we can't do that.\r\n`XskRouteInfo` does not take ownership of `xskSocketWaker`.\r\n`XskRouteInfo::xskSocketWaker` is just a copy of `XskRouteInfo::worker` pointing to `XskWorker::xskSocketWaker` so that `multi_index_container` can use it as an index.\r\n`XskWorker` takes ownership of `XskWorker::xskSocketWaker`.\r\nI'm sure `XskRouteInfo::xskSocketWaker` always works because of `XskRouteInfo::worker` . Closing `XskWorker::xskSocketWaker` is the responsibility of `XskWorker`.\r\n\r\nHowever, I should have used `FDWrapper` instead of `int` in `XskWorker`, I will correct now."", 'comment_created': datetime.datetime(2022, 7, 8, 15, 22, 18, tzinfo=datetime.timezone.utc), 'commenter': 'Y7n05h', 'type': 'User'}, {'comment_id': 917237741, 'comment_body': 'Yes, it was necessary. It has now been fixed.', 'comment_created': datetime.datetime(2022, 7, 9, 8, 11, 3, tzinfo=datetime.timezone.utc), 'commenter': 'Y7n05h', 'type': 'User'}, {'comment_id': 948273176, 'comment_body': '## Commented-out code\n\nThis comment appears to contain commented-out code\n\n[Show more details](https://github.com/PowerDNS/pdns/security/code-scanning/1200)', 'comment_created': datetime.datetime(2022, 8, 17, 18, 12, 34, tzinfo=datetime.timezone.utc), 'commenter': 'github-advanced-security[bot]', 'type': 'Bot'}, {'comment_id': 948273180, 'comment_body': '## Commented-out code\n\nThis comment appears to contain commented-out code\n\n[Show more details](https://github.com/PowerDNS/pdns/security/code-scanning/1201)', 'comment_created': datetime.datetime(2022, 8, 17, 18, 12, 34, tzinfo=datetime.timezone.utc), 'commenter': 'github-advanced-security[bot]', 'type': 'Bot'}, {'comment_id': 948273182, 'comment_body': '## Commented-out code\n\nThis comment appears to contain commented-out code\n\n[Show more details](https://github.com/PowerDNS/pdns/security/code-scanning/1202)', 'comment_created': datetime.datetime(2022, 8, 17, 18, 12, 34, tzinfo=datetime.timezone.utc), 'commenter': 'github-advanced-security[bot]', 'type': 'Bot'}, {'comment_id': 1470750550, 'comment_body': 'Just a nit but it may be moved to the end of the header.', 'comment_created': datetime.datetime(2024, 1, 30, 8, 17, 49, tzinfo=datetime.timezone.utc), 'commenter': 'chbruyand', 'type': 'User'}, {'comment_id': 1470753372, 'comment_body': 'Maybe there is no need for the `result` variable ?', 'comment_created': datetime.datetime(2024, 1, 30, 8, 20, 20, tzinfo=datetime.timezone.utc), 'commenter': 'chbruyand', 'type': 'User'}, {'comment_id': 1470786013, 'comment_body': '*retrieved', 'comment_created': datetime.datetime(2024, 1, 30, 8, 47, 41, tzinfo=datetime.timezone.utc), 'commenter': 'chbruyand', 'type': 'User'}, {'comment_id': 1470811099, 'comment_body': 'Maybe it would be nice to update the default interface name in `xdp.py` to reflect the examples bellow (`enp1s0` instead of `eth1`).', 'comment_created': datetime.datetime(2024, 1, 30, 9, 6, 56, tzinfo=datetime.timezone.utc), 'commenter': 'chbruyand', 'type': 'User'}, {'comment_id': 1470913907, 'comment_body': 'Done!', 'comment_created': datetime.datetime(2024, 1, 30, 9, 58, 55, tzinfo=datetime.timezone.utc), 'commenter': 'rgacogne', 'type': 'User'}]","[{'commit_sha': 'a61dd3f3b6fed8cc1233b101cdb538593f850aeb', 'committer_username': 'Y7n05h', 'committer_name': 'Y7n05h', 'committer_email': 'floss@y7n05h.dev', 'commit_date': datetime.datetime(2020, 8, 9, 1, 5, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bbb193ae199b7ab472311626266a443b8fc53925', 'committer_username': 'rgacogne', 'committer_name': 'Remi Gacogne', 'committer_email': 'github@coredump.fr', 'commit_date': datetime.datetime(2011, 9, 28, 8, 14, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd7a4f1fd253facecdd529d255fec713da2bd3bd3', 'committer_username': 'rgacogne', 'committer_name': 'Remi Gacogne', 'committer_email': 'github@coredump.fr', 'commit_date': datetime.datetime(2011, 9, 28, 8, 14, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f3eb5247672a5ba1ee6f67757d0961ec715a0247', 'committer_username': 'rgacogne', 'committer_name': 'Remi Gacogne', 'committer_email': 'github@coredump.fr', 'commit_date': datetime.datetime(2011, 9, 28, 8, 14, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c3cad015511c9df7b8a748a4302401572a6153c6', 'committer_username': 'rgacogne', 'committer_name': 'Remi Gacogne', 'committer_email': 'github@coredump.fr', 'commit_date': datetime.datetime(2011, 9, 28, 8, 14, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7d0d8ed6816816cf1193aee9147a1cf5bb45ddb3', 'committer_username': 'rgacogne', 'committer_name': 'Remi Gacogne', 'committer_email': 'github@coredump.fr', 'commit_date': datetime.datetime(2011, 9, 28, 8, 14, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bb8ab11ec3dc4bbd31aaaf5d8f696a6591c16ed5', 'committer_username': 'rgacogne', 'committer_name': 'Remi Gacogne', 'committer_email': 'github@coredump.fr', 'commit_date': datetime.datetime(2011, 9, 28, 8, 14, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b1dd62ee62d3c0da1815d9e1d5ec87d76354946e', 'committer_username': 'rgacogne', 'committer_name': 'Remi Gacogne', 'committer_email': 'github@coredump.fr', 'commit_date': datetime.datetime(2011, 9, 28, 8, 14, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '57131ee948ed9bef99470bd0bf598f863f0a95c0', 'committer_username': 'rgacogne', 'committer_name': 'Remi Gacogne', 'committer_email': 'github@coredump.fr', 'commit_date': datetime.datetime(2011, 9, 28, 8, 14, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '953dc1ee667d747add03a7eb038c9805b18a9478', 'committer_username': 'rgacogne', 'committer_name': 'Remi Gacogne', 'committer_email': 'github@coredump.fr', 'commit_date': datetime.datetime(2011, 9, 28, 8, 14, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ce2e13280ae62de8f93602738bac12968ee313fa', 'committer_username': 'rgacogne', 'committer_name': 'Remi Gacogne', 'committer_email': 'github@coredump.fr', 'commit_date': datetime.datetime(2011, 9, 28, 8, 14, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '961e2a7ef00b4f26a2cd4603f2fb7be75298b868', 'committer_username': 'rgacogne', 'committer_name': 'Remi Gacogne', 'committer_email': 'github@coredump.fr', 'commit_date': datetime.datetime(2011, 9, 28, 8, 14, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cad1ba8ccd06a6acd0ec603a07a716283921d7ab', 'committer_username': 'rgacogne', 'committer_name': 'Remi Gacogne', 'committer_email': 'github@coredump.fr', 'commit_date': datetime.datetime(2011, 9, 28, 8, 14, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4dd6b4b46314a0b9e7eab9a9b74104456f71fde3', 'committer_username': 'rgacogne', 'committer_name': 'Remi Gacogne', 'committer_email': 'github@coredump.fr', 'commit_date': datetime.datetime(2011, 9, 28, 8, 14, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '954a9898c2e1791d8eb62300c7e3c3c0b48612b4', 'committer_username': 'rgacogne', 'committer_name': 'Remi Gacogne', 'committer_email': 'github@coredump.fr', 'commit_date': datetime.datetime(2011, 9, 28, 8, 14, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '677f9d2b7da2e1c5833eb26003be307487b8099c', 'committer_username': 'rgacogne', 'committer_name': 'Remi Gacogne', 'committer_email': 'github@coredump.fr', 'commit_date': datetime.datetime(2011, 9, 28, 8, 14, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ea247879c44e957d91f4c22595810f4bef491be7', 'committer_username': 'rgacogne', 'committer_name': 'Remi Gacogne', 'committer_email': 'github@coredump.fr', 'commit_date': datetime.datetime(2011, 9, 28, 8, 14, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ae61f00ab206e812791838ddd9fe798e146e6ac4', 'committer_username': 'rgacogne', 'committer_name': 'Remi Gacogne', 'committer_email': 'github@coredump.fr', 'commit_date': datetime.datetime(2011, 9, 28, 8, 14, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f140f2b83d21fcbe7fb37b724a2a17ca2346c21b', 'committer_username': 'rgacogne', 'committer_name': 'Remi Gacogne', 'committer_email': 'github@coredump.fr', 'commit_date': datetime.datetime(2011, 9, 28, 8, 14, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2a5e9760ee8474ddfdfd5f2708a576972d2d3421', 'committer_username': 'rgacogne', 'committer_name': 'Remi Gacogne', 'committer_email': 'github@coredump.fr', 'commit_date': datetime.datetime(2011, 9, 28, 8, 14, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cce416f263ab6519a0621c2d0af8adf90f20a351', 'committer_username': 'rgacogne', 'committer_name': 'Remi Gacogne', 'committer_email': 'github@coredump.fr', 'commit_date': datetime.datetime(2011, 9, 28, 8, 14, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '682b927deaa11dc78de89763ecc5460b8e50bc6c', 'committer_username': 'rgacogne', 'committer_name': 'Remi Gacogne', 'committer_email': 'github@coredump.fr', 'commit_date': datetime.datetime(2011, 9, 28, 8, 14, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '39bbdd1b1e0761fe2d965f4b08b25a153b4bcfcc', 'committer_username': 'rgacogne', 'committer_name': 'Remi Gacogne', 'committer_email': 'github@coredump.fr', 'commit_date': datetime.datetime(2011, 9, 28, 8, 14, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '73a6da77257abc2fa21be05e9cbcda965b394b6f', 'committer_username': 'rgacogne', 'committer_name': 'Remi Gacogne', 'committer_email': 'github@coredump.fr', 'commit_date': datetime.datetime(2011, 9, 28, 8, 14, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '366cc4442e5400d9897fc289183dca13cd3d002b', 'committer_username': 'rgacogne', 'committer_name': 'Remi Gacogne', 'committer_email': 'github@coredump.fr', 'commit_date': datetime.datetime(2011, 9, 28, 8, 14, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1b4bfa786896d6a75abfefb1b89ed6fcb348db6f', 'committer_username': 'rgacogne', 'committer_name': 'Remi Gacogne', 'committer_email': 'github@coredump.fr', 'commit_date': datetime.datetime(2011, 9, 28, 8, 14, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bd1e67ab639ceb0aaceac2c5e9af2d1d2cfff02d', 'committer_username': 'rgacogne', 'committer_name': 'Remi Gacogne', 'committer_email': 'github@coredump.fr', 'commit_date': datetime.datetime(2011, 9, 28, 8, 14, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1c9b2109e8a12ea3a925f17bbbf88fb9449ed16a', 'committer_username': 'rgacogne', 'committer_name': 'Remi Gacogne', 'committer_email': 'github@coredump.fr', 'commit_date': datetime.datetime(2011, 9, 28, 8, 14, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '38244a9b699484dd8ab162fb18381bae25edf56b', 'committer_username': 'rgacogne', 'committer_name': 'Remi Gacogne', 'committer_email': 'github@coredump.fr', 'commit_date': datetime.datetime(2011, 9, 28, 8, 14, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '70b5d529ab3438bcc936d3f8a80089057c505466', 'committer_username': 'rgacogne', 'committer_name': 'Remi Gacogne', 'committer_email': 'github@coredump.fr', 'commit_date': datetime.datetime(2011, 9, 28, 8, 14, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c184b26aed67aebb7b0f45ddeb3b77db17115fbc', 'committer_username': 'rgacogne', 'committer_name': 'Remi Gacogne', 'committer_email': 'github@coredump.fr', 'commit_date': datetime.datetime(2011, 9, 28, 8, 14, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '991210c38e7370774a44b843e5ca13c8640dc6a5', 'committer_username': 'rgacogne', 'committer_name': 'Remi Gacogne', 'committer_email': 'github@coredump.fr', 'commit_date': datetime.datetime(2011, 9, 28, 8, 14, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f928337f89bdd81a6d9d45434bea31ee14ad9235', 'committer_username': 'rgacogne', 'committer_name': 'Remi Gacogne', 'committer_email': 'github@coredump.fr', 'commit_date': datetime.datetime(2011, 9, 28, 8, 14, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '73dc64aba93eda49a1a81b2e97b236afc9b2e00b', 'committer_username': 'rgacogne', 'committer_name': 'Remi Gacogne', 'committer_email': 'github@coredump.fr', 'commit_date': datetime.datetime(2011, 9, 28, 8, 14, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '40f605d2f05651668c1327eaf03ad9a9f9f49264', 'committer_username': 'rgacogne', 'committer_name': 'Remi Gacogne', 'committer_email': 'github@coredump.fr', 'commit_date': datetime.datetime(2011, 9, 28, 8, 14, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'db96b412c8563fd2a5d50670b868bd33a7a54bb6', 'committer_username': 'rgacogne', 'committer_name': 'Remi Gacogne', 'committer_email': 'github@coredump.fr', 'commit_date': datetime.datetime(2011, 9, 28, 8, 14, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4b99619110687818dac3de00805722d37c4ea4d5', 'committer_username': 'rgacogne', 'committer_name': 'Remi Gacogne', 'committer_email': 'github@coredump.fr', 'commit_date': datetime.datetime(2011, 9, 28, 8, 14, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '465bf9e23403a94a79f19de752dc1bc035032d00', 'committer_username': 'rgacogne', 'committer_name': 'Remi Gacogne', 'committer_email': 'github@coredump.fr', 'commit_date': datetime.datetime(2011, 9, 28, 8, 14, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '86b47ec8b89cdb54b3bf1999b2e863cf2ce6f3bb', 'committer_username': 'rgacogne', 'committer_name': 'Remi Gacogne', 'committer_email': 'github@coredump.fr', 'commit_date': datetime.datetime(2011, 9, 28, 8, 14, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f941004dcb9a4ec1d445b2c1e760ebae30b80226', 'committer_username': 'rgacogne', 'committer_name': 'Remi Gacogne', 'committer_email': 'github@coredump.fr', 'commit_date': datetime.datetime(2011, 9, 28, 8, 14, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cf66dd2224055ba1d994214ce0e933ec696f00e1', 'committer_username': 'rgacogne', 'committer_name': 'Remi Gacogne', 'committer_email': 'github@coredump.fr', 'commit_date': datetime.datetime(2011, 9, 28, 8, 14, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cd807ad2f610453cabac0fb9528435e10202547a', 'committer_username': 'rgacogne', 'committer_name': 'Remi Gacogne', 'committer_email': 'github@coredump.fr', 'commit_date': datetime.datetime(2011, 9, 28, 8, 14, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4a94ee50cf3fae71e823f91f9b375dc30d964850', 'committer_username': 'rgacogne', 'committer_name': 'Remi Gacogne', 'committer_email': 'github@coredump.fr', 'commit_date': datetime.datetime(2011, 9, 28, 8, 14, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e053dc9dc470c819fce7120e0cf68f949a7b4104', 'committer_username': 'rgacogne', 'committer_name': 'Remi Gacogne', 'committer_email': 'github@coredump.fr', 'commit_date': datetime.datetime(2011, 9, 28, 8, 14, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '94e3db7eed0ecc330ffe4ce26fd8ac1500f56c40', 'committer_username': 'rgacogne', 'committer_name': 'Remi Gacogne', 'committer_email': 'github@coredump.fr', 'commit_date': datetime.datetime(2011, 9, 28, 8, 14, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ffbc306cefa96ba26055b27880bb28b37429300e', 'committer_username': 'rgacogne', 'committer_name': 'Remi Gacogne', 'committer_email': 'github@coredump.fr', 'commit_date': datetime.datetime(2011, 9, 28, 8, 14, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2a42c6cba484f905df8697b4482dd344e98c6968', 'committer_username': 'rgacogne', 'committer_name': 'Remi Gacogne', 'committer_email': 'github@coredump.fr', 'commit_date': datetime.datetime(2011, 9, 28, 8, 14, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '265ece9c2de43073a9781596089925fe4f3fc80e', 'committer_username': 'rgacogne', 'committer_name': 'Remi Gacogne', 'committer_email': 'github@coredump.fr', 'commit_date': datetime.datetime(2011, 9, 28, 8, 14, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a8c3569cee960fd94aa5b1f6b1fa3967723611b5', 'committer_username': 'rgacogne', 'committer_name': 'Remi Gacogne', 'committer_email': 'github@coredump.fr', 'commit_date': datetime.datetime(2011, 9, 28, 8, 14, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7478036108eff737f163066ec23b3e2fd5051913', 'committer_username': 'rgacogne', 'committer_name': 'Remi Gacogne', 'committer_email': 'github@coredump.fr', 'commit_date': datetime.datetime(2011, 9, 28, 8, 14, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'feb2beadec0d539fdd310a3daa54a91e7d3a48db', 'committer_username': 'rgacogne', 'committer_name': 'Remi Gacogne', 'committer_email': 'github@coredump.fr', 'commit_date': datetime.datetime(2011, 9, 28, 8, 14, 58, tzinfo=datetime.timezone.utc)}]",Y7n05h,69407218,floss@y7n05h.dev,User,,22,,21,57

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
9693534,pdns,PowerDNS/pdns,C++,900,3583,128,353,29559,945,40,76,"[{'id': 1233113663, 'number': 12518, 'closed': datetime.datetime(2023, 2, 8, 14, 13, 14, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 2, 8, 7, 26, 9, tzinfo=datetime.timezone.utc), 'time_taken': 24425.0, 'time_delta': '6:47:05', 'additions': 185, 'deletions': 330, 'state': 'closed'}, {'id': 950006009, 'number': 11652, 'closed': datetime.datetime(2024, 1, 30, 10, 56, 58, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 5, 28, 9, 33, 20, tzinfo=datetime.timezone.utc), 'time_taken': 52881818.0, 'time_delta': '612 days, 1:23:38', 'additions': 3979, 'deletions': 438, 'state': 'closed'}, {'id': 947902398, 'number': 11651, 'closed': datetime.datetime(2022, 6, 17, 12, 20, 55, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 5, 26, 6, 5, 25, tzinfo=datetime.timezone.utc), 'time_taken': 1923330.0, 'time_delta': '22 days, 6:15:30', 'additions': 29, 'deletions': 39, 'state': 'closed'}, {'id': 934329582, 'number': 11620, 'closed': datetime.datetime(2022, 5, 17, 7, 43, 5, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 5, 12, 3, 23, 51, tzinfo=datetime.timezone.utc), 'time_taken': 447554.0, 'time_delta': '5 days, 4:19:14', 'additions': 4, 'deletions': 4, 'state': 'closed'}, {'id': 921553799, 'number': 11586, 'closed': datetime.datetime(2022, 4, 29, 7, 31, 16, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 4, 28, 8, 37, 41, tzinfo=datetime.timezone.utc), 'time_taken': 82415.0, 'time_delta': '22:53:35', 'additions': 2, 'deletions': 2, 'state': 'closed'}, {'id': 909244079, 'number': 11535, 'closed': datetime.datetime(2022, 4, 15, 15, 19, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 4, 13, 18, 46, 28, tzinfo=datetime.timezone.utc), 'time_taken': 160352.0, 'time_delta': '1 day, 20:32:32', 'additions': 58, 'deletions': 43, 'state': 'closed'}, {'id': 908645176, 'number': 11526, 'closed': datetime.datetime(2022, 6, 10, 13, 55, 19, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 4, 13, 8, 29, 48, tzinfo=datetime.timezone.utc), 'time_taken': 5030731.0, 'time_delta': '58 days, 5:25:31', 'additions': 502, 'deletions': 74, 'state': 'closed'}, {'id': 906187316, 'number': 11523, 'closed': datetime.datetime(2022, 4, 12, 9, 50, 16, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 4, 11, 15, 58, 32, tzinfo=datetime.timezone.utc), 'time_taken': 64304.0, 'time_delta': '17:51:44', 'additions': 10, 'deletions': 2, 'state': 'closed'}, {'id': 898199824, 'number': 11497, 'closed': datetime.datetime(2022, 4, 5, 7, 30, 34, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 4, 3, 4, 15, 37, tzinfo=datetime.timezone.utc), 'time_taken': 184497.0, 'time_delta': '2 days, 3:14:57', 'additions': 34, 'deletions': 1, 'state': 'closed'}]"
