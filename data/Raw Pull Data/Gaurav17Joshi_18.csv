pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
1388643730,Gaussian Processes Tool,"### Gaussian Processes Feature for QPO detection
Addressing #660 . This is an implementation for the GP tool (mainly for detection and parameter analysis for QPOs) . This addition makes use of tinygp library for Gaussian Processes implementation, and jaxns for nested sampling.
The new feature is in the `stingray.modeling.gpmodelling.py` file.
It has three main features:-

1. `get_prior`: This function makes the prior function for a specified prior dictionary.
2. `get_likelihood`: This function makes the log_likelihood function for the given Kernel, Mean model and lightcurve.
3. GPResult class: The class which takes a Lightcurve, and performs Nested Sampling for a given prior and likelihood.

Work Remaining To be done:-
* Add Object Oriented plotting to GPResult.
* Potentially change the name of file to GP (from GP modelling)
* Add the Demonstration notebook to Stingray Notebooks.
* Improve the documentation
",True,739,https://api.github.com/repos/StingraySoftware/stingray/pulls/739,https://github.com/StingraySoftware/stingray/pull/739,closed,1340,0,5,52,4,84,0,0,[],2023-06-12 12:44:27+00:00,2023-09-29 10:34:20+00:00,9409793.0,"108 days, 21:49:53","[{'comment_id': 1230817819, 'comment_body': 'This should probably be called ""attributes"", since they\'re not parameters that are put into the `__init__` function, but rather class attributes?', 'comment_created': datetime.datetime(2023, 6, 15, 10, 48, 31, tzinfo=datetime.timezone.utc), 'commenter': 'dhuppenkothen', 'type': 'User'}, {'comment_id': 1230820817, 'comment_body': 'in our coding style, we generally keep upper-case letters for class definition and make function definitions and attributes and variables all lower-case', 'comment_created': datetime.datetime(2023, 6, 15, 10, 51, 43, tzinfo=datetime.timezone.utc), 'commenter': 'dhuppenkothen', 'type': 'User'}, {'comment_id': 1230834532, 'comment_body': 'I think I would rename this to `plot_gp_samples` or something similar?', 'comment_created': datetime.datetime(2023, 6, 15, 10, 57, 55, tzinfo=datetime.timezone.utc), 'commenter': 'dhuppenkothen', 'type': 'User'}, {'comment_id': 1230836526, 'comment_body': ""I think the default behaviour for anything involving a random seed is that by default, it's set to the system time, and only if the user overrides that it gets set to a specific number. Otherwise if the user isn't careful, they might want to simulate lots of different examples but are only getting out the same one, because they haven't actively input random seeds. This is I think contrary to what I would expect from most packages."", 'comment_created': datetime.datetime(2023, 6, 15, 10, 59, 52, tzinfo=datetime.timezone.utc), 'commenter': 'dhuppenkothen', 'type': 'User'}, {'comment_id': 1230838604, 'comment_body': 'Does this also include the mean function? It might be useful to add an option here that the user can plot the mean function as well?', 'comment_created': datetime.datetime(2023, 6, 15, 11, 1, 43, tzinfo=datetime.timezone.utc), 'commenter': 'dhuppenkothen', 'type': 'User'}, {'comment_id': 1230839487, 'comment_body': 'I think this doctoring might need an example to help the user understand how to set this up.', 'comment_created': datetime.datetime(2023, 6, 15, 11, 2, 38, tzinfo=datetime.timezone.utc), 'commenter': 'dhuppenkothen', 'type': 'User'}, {'comment_id': 1230913190, 'comment_body': ""I think we should think about the `get_prior` function some more. This right now defines some standard priors, but users might want to choose different priors. I'll give this a thought."", 'comment_created': datetime.datetime(2023, 6, 15, 12, 9, 45, tzinfo=datetime.timezone.utc), 'commenter': 'dhuppenkothen', 'type': 'User'}, {'comment_id': 1280425678, 'comment_body': 'What do you need `pytest` for in this module?', 'comment_created': datetime.datetime(2023, 8, 1, 10, 22, 3, tzinfo=datetime.timezone.utc), 'commenter': 'dhuppenkothen', 'type': 'User'}, {'comment_id': 1305679830, 'comment_body': ""For a new big feature like this, I think a somewhat expanded explanation for the changelog would be appropriate. I think something similar to what you've detailed in the text for the PR (without the to-be-completed things) would be good here."", 'comment_created': datetime.datetime(2023, 8, 25, 13, 42, 23, tzinfo=datetime.timezone.utc), 'commenter': 'dhuppenkothen', 'type': 'User'}, {'comment_id': 1305680383, 'comment_body': 'remove space here', 'comment_created': datetime.datetime(2023, 8, 25, 13, 42, 52, tzinfo=datetime.timezone.utc), 'commenter': 'dhuppenkothen', 'type': 'User'}, {'comment_id': 1305681373, 'comment_body': ""It would be useful here to include a list of possible options, otherwise the user doesn't know what they can choose"", 'comment_created': datetime.datetime(2023, 8, 25, 13, 43, 50, tzinfo=datetime.timezone.utc), 'commenter': 'dhuppenkothen', 'type': 'User'}, {'comment_id': 1305682826, 'comment_body': 'Similarly here, it would be useful to include the possible options so that users know what they can choose', 'comment_created': datetime.datetime(2023, 8, 25, 13, 45, 11, tzinfo=datetime.timezone.utc), 'commenter': 'dhuppenkothen', 'type': 'User'}, {'comment_id': 1305683943, 'comment_body': 'I think it would be nice to have these functions without the leading underscore, so make them `gaussian` rather than `_gaussian`, because I think we might want to expose them to the user as useful functions they can use', 'comment_created': datetime.datetime(2023, 8, 25, 13, 46, 12, tzinfo=datetime.timezone.utc), 'commenter': 'dhuppenkothen', 'type': 'User'}, {'comment_id': 1305686363, 'comment_body': ""Doesn't the code below suggest that the parameters `A`, `t0` and `sig1` can be iterables, so that you can easily generate sums of Gaussians? Or did I understand that wrong? If so, the documentation should reflect that this could be a single Gaussian flare, or a superposition of multiple Gaussians, and that the parameters could be a number of an utterable. Note also, that I don't think `A` should be an integer? I hope that can be a float?"", 'comment_created': datetime.datetime(2023, 8, 25, 13, 48, 17, tzinfo=datetime.timezone.utc), 'commenter': 'dhuppenkothen', 'type': 'User'}, {'comment_id': 1305687159, 'comment_body': ""Also, minor suggestion: can we rename `mean_params` to just `params` in the flare shapes? Just because I'm worried that people will interpret `mean` wrong here. "", 'comment_created': datetime.datetime(2023, 8, 25, 13, 48, 58, tzinfo=datetime.timezone.utc), 'commenter': 'dhuppenkothen', 'type': 'User'}, {'comment_id': 1305687487, 'comment_body': 'same comments as for the gaussian flare shape', 'comment_created': datetime.datetime(2023, 8, 25, 13, 49, 15, tzinfo=datetime.timezone.utc), 'commenter': 'dhuppenkothen', 'type': 'User'}, {'comment_id': 1305791987, 'comment_body': 'Also, I realized I have a question about this docstring: The definition for the function says that it takes a variable called `mean_params`, but the docstring lists the individual parameters. Do you expect a list of parameters here or the individual parameters put in separately? I think that should be made clear in the docstring.', 'comment_created': datetime.datetime(2023, 8, 25, 15, 12, 51, tzinfo=datetime.timezone.utc), 'commenter': 'dhuppenkothen', 'type': 'User'}, {'comment_id': 1305794109, 'comment_body': ""I think this would look slightly nicer if you had a line `y = jnp.sum(...)` and then did `return y`, but that's a minor thing"", 'comment_created': datetime.datetime(2023, 8, 25, 15, 14, 46, tzinfo=datetime.timezone.utc), 'commenter': 'dhuppenkothen', 'type': 'User'}, {'comment_id': 1305794565, 'comment_body': 'same here, nicer to `return y` and define `y` on a previous line', 'comment_created': datetime.datetime(2023, 8, 25, 15, 15, 11, tzinfo=datetime.timezone.utc), 'commenter': 'dhuppenkothen', 'type': 'User'}, {'comment_id': 1305795890, 'comment_body': ""What's the difference between `t0` and the offset parameter `delta` here?"", 'comment_created': datetime.datetime(2023, 8, 25, 15, 16, 21, tzinfo=datetime.timezone.utc), 'commenter': 'dhuppenkothen', 'type': 'User'}, {'comment_id': 1305796805, 'comment_body': 'Here, too, I think it would be helpful to list all the possible options for `kernel_type` and `mean_type` if this function is exposed to the user', 'comment_created': datetime.datetime(2023, 8, 25, 15, 17, 8, tzinfo=datetime.timezone.utc), 'commenter': 'dhuppenkothen', 'type': 'User'}, {'comment_id': 1305797283, 'comment_body': 'How does this work if you have two Gaussians as a mean function? Does it work the same?', 'comment_created': datetime.datetime(2023, 8, 25, 15, 17, 36, tzinfo=datetime.timezone.utc), 'commenter': 'dhuppenkothen', 'type': 'User'}, {'comment_id': 1305798272, 'comment_body': 'Typo: Obtain', 'comment_created': datetime.datetime(2023, 8, 25, 15, 18, 31, tzinfo=datetime.timezone.utc), 'commenter': 'dhuppenkothen', 'type': 'User'}, {'comment_id': 1305800540, 'comment_body': 'I think it might be useful to add a comment here that these four lines are not part of the example, and only here to help execute the test suite', 'comment_created': datetime.datetime(2023, 8, 25, 15, 20, 33, tzinfo=datetime.timezone.utc), 'commenter': 'dhuppenkothen', 'type': 'User'}, {'comment_id': 1305801042, 'comment_body': 'Could you also add an example here that uses the JaxNS priors, since you talk about them above?', 'comment_created': datetime.datetime(2023, 8, 25, 15, 21, 2, tzinfo=datetime.timezone.utc), 'commenter': 'dhuppenkothen', 'type': 'User'}, {'comment_id': 1305810753, 'comment_body': ""So what happens if an element in `params_list` is neither a `tfpd.Distribution` or a `jaxns.Prior`? Will that just work? What happens if, for example, I misunderstood the documentation and thought I only needed to put in a list of minimum and maximum for my uniform prior into `prior_dict`, rather than the actual distribution? that should probably fail with a useful error message here? \r\n\r\nMy suggestion would be to use an `elif` to check whether the entry is a `jaxns.Prior`, and if it's also not that, have an `else` statement that raises a `TypeError`"", 'comment_created': datetime.datetime(2023, 8, 25, 15, 29, 53, tzinfo=datetime.timezone.utc), 'commenter': 'dhuppenkothen', 'type': 'User'}, {'comment_id': 1305815027, 'comment_body': 'As in previous cases, `kernel_type` and `mean_type` should list the possible options.', 'comment_created': datetime.datetime(2023, 8, 25, 15, 33, 1, tzinfo=datetime.timezone.utc), 'commenter': 'dhuppenkothen', 'type': 'User'}, {'comment_id': 1305816033, 'comment_body': 'If these are required parameters, why are they hidden in `**kwargs`, should they not be be upfront as required arguments?', 'comment_created': datetime.datetime(2023, 8, 25, 15, 34, tzinfo=datetime.timezone.utc), 'commenter': 'dhuppenkothen', 'type': 'User'}, {'comment_id': 1305816561, 'comment_body': 'Also, here and in the code, `Times` should be lowercase', 'comment_created': datetime.datetime(2023, 8, 25, 15, 34, 34, tzinfo=datetime.timezone.utc), 'commenter': 'dhuppenkothen', 'type': 'User'}, {'comment_id': 1305817756, 'comment_body': 'If you input the light curve, why do you also need to input `time` and `counts`?', 'comment_created': datetime.datetime(2023, 8, 25, 15, 35, 38, tzinfo=datetime.timezone.utc), 'commenter': 'dhuppenkothen', 'type': 'User'}, {'comment_id': 1305818334, 'comment_body': '`Lc` should be all lowercase. Note: we generally use uppercase characters only in class definitions and almost nowhere else. ', 'comment_created': datetime.datetime(2023, 8, 25, 15, 36, 11, tzinfo=datetime.timezone.utc), 'commenter': 'dhuppenkothen', 'type': 'User'}, {'comment_id': 1305818546, 'comment_body': 'same for `Result`, should be lowercase', 'comment_created': datetime.datetime(2023, 8, 25, 15, 36, 23, tzinfo=datetime.timezone.utc), 'commenter': 'dhuppenkothen', 'type': 'User'}, {'comment_id': 1305819068, 'comment_body': 'It might be worth mentioning here that this can be generated with the `get_prior` function', 'comment_created': datetime.datetime(2023, 8, 25, 15, 36, 50, tzinfo=datetime.timezone.utc), 'commenter': 'dhuppenkothen', 'type': 'User'}, {'comment_id': 1305819345, 'comment_body': 'should also mention here that this can be generated with the `get_likelihood` function', 'comment_created': datetime.datetime(2023, 8, 25, 15, 37, 6, tzinfo=datetime.timezone.utc), 'commenter': 'dhuppenkothen', 'type': 'User'}, {'comment_id': 1305819951, 'comment_body': 'Does `JaxNS` have more parameters? If so, could they passed through using `**jax_kwargs` or something like that?', 'comment_created': datetime.datetime(2023, 8, 25, 15, 37, 41, tzinfo=datetime.timezone.utc), 'commenter': 'dhuppenkothen', 'type': 'User'}, {'comment_id': 1305820575, 'comment_body': '`Exact_ns` should be lowercase :)', 'comment_created': datetime.datetime(2023, 8, 25, 15, 38, 17, tzinfo=datetime.timezone.utc), 'commenter': 'dhuppenkothen', 'type': 'User'}, {'comment_id': 1305820694, 'comment_body': '`NSModel` should be lowercase', 'comment_created': datetime.datetime(2023, 8, 25, 15, 38, 25, tzinfo=datetime.timezone.utc), 'commenter': 'dhuppenkothen', 'type': 'User'}, {'comment_id': 1305821347, 'comment_body': ""I think it would be useful to print the `Termination_reason` (also lowercase) here, if it's a useful message, because it would help the user identify whether things went wrong or not."", 'comment_created': datetime.datetime(2023, 8, 25, 15, 39, 2, tzinfo=datetime.timezone.utc), 'commenter': 'dhuppenkothen', 'type': 'User'}, {'comment_id': 1305822929, 'comment_body': ""I'm not sure I entirely understand what the difference is between the posterior histogram and the weighted posterior histogram? Weighted by what?"", 'comment_created': datetime.datetime(2023, 8, 25, 15, 40, 36, tzinfo=datetime.timezone.utc), 'commenter': 'dhuppenkothen', 'type': 'User'}, {'comment_id': 1305824358, 'comment_body': 'I think it would be great if this plotting could be moved to an object-oriented version of matplotlib, and include an `ax` parameter that allows the user to plot this into an existing `matplotlib.Axes` object, so that one can easily make multi-panel plots using this method', 'comment_created': datetime.datetime(2023, 8, 25, 15, 42, tzinfo=datetime.timezone.utc), 'commenter': 'dhuppenkothen', 'type': 'User'}, {'comment_id': 1305825056, 'comment_body': 'Oh, is this for cases where the mean function has multiple components? That would be useful to mention here', 'comment_created': datetime.datetime(2023, 8, 25, 15, 42, 29, tzinfo=datetime.timezone.utc), 'commenter': 'dhuppenkothen', 'type': 'User'}, {'comment_id': 1305826537, 'comment_body': ""I'm not sure we need our own implementation of a corner plot. I think we can just use the `corner.py` package here?"", 'comment_created': datetime.datetime(2023, 8, 25, 15, 44, 1, tzinfo=datetime.timezone.utc), 'commenter': 'dhuppenkothen', 'type': 'User'}, {'comment_id': 1305826768, 'comment_body': 'Or possibly the `pair plot` in seaborn', 'comment_created': datetime.datetime(2023, 8, 25, 15, 44, 16, tzinfo=datetime.timezone.utc), 'commenter': 'dhuppenkothen', 'type': 'User'}, {'comment_id': 1305902480, 'comment_body': 'Yes. It just gives a parameter list for given GP model (kernel + mean), so it gives the same parameters for two gaussians (a superposition/sum of two gaussians)', 'comment_created': datetime.datetime(2023, 8, 25, 16, 45, 3, tzinfo=datetime.timezone.utc), 'commenter': 'Gaurav17Joshi', 'type': 'User'}, {'comment_id': 1309934366, 'comment_body': 'Outdated now', 'comment_created': datetime.datetime(2023, 8, 30, 8, 57, 46, tzinfo=datetime.timezone.utc), 'commenter': 'Gaurav17Joshi', 'type': 'User'}, {'comment_id': 1309934680, 'comment_body': 'Outdated now', 'comment_created': datetime.datetime(2023, 8, 30, 8, 58, 1, tzinfo=datetime.timezone.utc), 'commenter': 'Gaurav17Joshi', 'type': 'User'}, {'comment_id': 1309935142, 'comment_body': 'Outdated now', 'comment_created': datetime.datetime(2023, 8, 30, 8, 58, 21, tzinfo=datetime.timezone.utc), 'commenter': 'Gaurav17Joshi', 'type': 'User'}, {'comment_id': 1309942192, 'comment_body': 'Outdated now, but interesting comment', 'comment_created': datetime.datetime(2023, 8, 30, 9, 3, 38, tzinfo=datetime.timezone.utc), 'commenter': 'Gaurav17Joshi', 'type': 'User'}, {'comment_id': 1309943620, 'comment_body': 'Outdated now', 'comment_created': datetime.datetime(2023, 8, 30, 9, 4, 38, tzinfo=datetime.timezone.utc), 'commenter': 'Gaurav17Joshi', 'type': 'User'}, {'comment_id': 1309945238, 'comment_body': 'Outdated now', 'comment_created': datetime.datetime(2023, 8, 30, 9, 5, 43, tzinfo=datetime.timezone.utc), 'commenter': 'Gaurav17Joshi', 'type': 'User'}, {'comment_id': 1309967027, 'comment_body': 'Outdated now', 'comment_created': datetime.datetime(2023, 8, 30, 9, 21, 51, tzinfo=datetime.timezone.utc), 'commenter': 'Gaurav17Joshi', 'type': 'User'}, {'comment_id': 1309967420, 'comment_body': 'Outdated now', 'comment_created': datetime.datetime(2023, 8, 30, 9, 22, 7, tzinfo=datetime.timezone.utc), 'commenter': 'Gaurav17Joshi', 'type': 'User'}, {'comment_id': 1309967949, 'comment_body': 'Have changed it now.', 'comment_created': datetime.datetime(2023, 8, 30, 9, 22, 30, tzinfo=datetime.timezone.utc), 'commenter': 'Gaurav17Joshi', 'type': 'User'}, {'comment_id': 1309970901, 'comment_body': 'Actually this is autospaced by Black. I am running `black -l 100 stingray`', 'comment_created': datetime.datetime(2023, 8, 30, 9, 24, 39, tzinfo=datetime.timezone.utc), 'commenter': 'Gaurav17Joshi', 'type': 'User'}, {'comment_id': 1309979447, 'comment_body': 'Written in new version', 'comment_created': datetime.datetime(2023, 8, 30, 9, 30, 53, tzinfo=datetime.timezone.utc), 'commenter': 'Gaurav17Joshi', 'type': 'User'}, {'comment_id': 1310010892, 'comment_body': 'Written now', 'comment_created': datetime.datetime(2023, 8, 30, 9, 53, 57, tzinfo=datetime.timezone.utc), 'commenter': 'Gaurav17Joshi', 'type': 'User'}, {'comment_id': 1310023264, 'comment_body': '1. The function is not intended to be used by the user.\r\n2. Yes, it seems right, I have made the change\r\n3. What `get_mean` function does is that it returns to us a function say gaussian(t), which would take a times array and return the y value for the gaussian. Here through `mean_params`, we feed in the gaussians parameters ie `mean_params =  {""A"" : 2.0, ""t0"" : 0.7 , ""sig"" : 1.2}` , the `_gaussian` function is just a helper function for it. So, we expect a dictionary of parameters.\r\n\r\nI think these were not very clear in the docs, I have made some changes, please tell if things are now properly explained or not.', 'comment_created': datetime.datetime(2023, 8, 30, 10, 3, 8, tzinfo=datetime.timezone.utc), 'commenter': 'Gaurav17Joshi', 'type': 'User'}, {'comment_id': 1310025976, 'comment_body': 'The parameters A, t0, etc can also be jnp.arrays for making sums of gaussians. Also, A can be float/jnp.array (there was a mistake in the docs). Have made those changes.', 'comment_created': datetime.datetime(2023, 8, 30, 10, 5, 24, tzinfo=datetime.timezone.utc), 'commenter': 'Gaurav17Joshi', 'type': 'User'}, {'comment_id': 1310028314, 'comment_body': 'Made those changes now', 'comment_created': datetime.datetime(2023, 8, 30, 10, 7, 22, tzinfo=datetime.timezone.utc), 'commenter': 'Gaurav17Joshi', 'type': 'User'}, {'comment_id': 1310030455, 'comment_body': 'This was just supposed to be an Example, not a doctest (Those lines were unnecessary). Have made some changes now.', 'comment_created': datetime.datetime(2023, 8, 30, 10, 9, 8, tzinfo=datetime.timezone.utc), 'commenter': 'Gaurav17Joshi', 'type': 'User'}, {'comment_id': 1310032552, 'comment_body': 'I think JaxNS prior would be rarely used and putting an example here would make things cluttered. I have added that case in the Demo notebooks.', 'comment_created': datetime.datetime(2023, 8, 30, 10, 10, 51, tzinfo=datetime.timezone.utc), 'commenter': 'Gaurav17Joshi', 'type': 'User'}, {'comment_id': 1310033999, 'comment_body': 'Have added that now', 'comment_created': datetime.datetime(2023, 8, 30, 10, 12, 6, tzinfo=datetime.timezone.utc), 'commenter': 'Gaurav17Joshi', 'type': 'User'}, {'comment_id': 1310035907, 'comment_body': 'Yes, they were necessary parameters so putting them in **kwargs was not required. Have made them as arguments and changed the Docstring.', 'comment_created': datetime.datetime(2023, 8, 30, 10, 13, 49, tzinfo=datetime.timezone.utc), 'commenter': 'Gaurav17Joshi', 'type': 'User'}, {'comment_id': 1310036545, 'comment_body': 'Yep, I have removed them now', 'comment_created': datetime.datetime(2023, 8, 30, 10, 14, 25, tzinfo=datetime.timezone.utc), 'commenter': 'Gaurav17Joshi', 'type': 'User'}, {'comment_id': 1310036728, 'comment_body': 'Done', 'comment_created': datetime.datetime(2023, 8, 30, 10, 14, 35, tzinfo=datetime.timezone.utc), 'commenter': 'Gaurav17Joshi', 'type': 'User'}, {'comment_id': 1310037034, 'comment_body': 'Done', 'comment_created': datetime.datetime(2023, 8, 30, 10, 14, 51, tzinfo=datetime.timezone.utc), 'commenter': 'Gaurav17Joshi', 'type': 'User'}, {'comment_id': 1310037613, 'comment_body': 'Updated the Docstring', 'comment_created': datetime.datetime(2023, 8, 30, 10, 15, 19, tzinfo=datetime.timezone.utc), 'commenter': 'Gaurav17Joshi', 'type': 'User'}, {'comment_id': 1310037792, 'comment_body': 'Updated the Docstring', 'comment_created': datetime.datetime(2023, 8, 30, 10, 15, 29, tzinfo=datetime.timezone.utc), 'commenter': 'Gaurav17Joshi', 'type': 'User'}, {'comment_id': 1310038046, 'comment_body': 'Done', 'comment_created': datetime.datetime(2023, 8, 30, 10, 15, 46, tzinfo=datetime.timezone.utc), 'commenter': 'Gaurav17Joshi', 'type': 'User'}, {'comment_id': 1310039841, 'comment_body': 'Updated the Docs', 'comment_created': datetime.datetime(2023, 8, 30, 10, 17, 19, tzinfo=datetime.timezone.utc), 'commenter': 'Gaurav17Joshi', 'type': 'User'}, {'comment_id': 1310040361, 'comment_body': 'Outdated now', 'comment_created': datetime.datetime(2023, 8, 30, 10, 17, 46, tzinfo=datetime.timezone.utc), 'commenter': 'Gaurav17Joshi', 'type': 'User'}, {'comment_id': 1310043431, 'comment_body': 'Done now', 'comment_created': datetime.datetime(2023, 8, 30, 10, 20, 26, tzinfo=datetime.timezone.utc), 'commenter': 'Gaurav17Joshi', 'type': 'User'}, {'comment_id': 1310093518, 'comment_body': 'Made some changes now. Have included a check for JaxNS prior, and a raised an Error.', 'comment_created': datetime.datetime(2023, 8, 30, 11, 2, 36, tzinfo=datetime.timezone.utc), 'commenter': 'Gaurav17Joshi', 'type': 'User'}, {'comment_id': 1310095171, 'comment_body': 'Made the changes.', 'comment_created': datetime.datetime(2023, 8, 30, 11, 4, 3, tzinfo=datetime.timezone.utc), 'commenter': 'Gaurav17Joshi', 'type': 'User'}, {'comment_id': 1310501734, 'comment_body': ' In the posterior_histogram, we use all the samples. The samples of a Nested Sampling run are not all of same weights so in the weighted_posterior histogram we use weighted samples. More info here: [Jaxns Discussion](https://github.com/Joshuaalbert/jaxns/discussions/100)', 'comment_created': datetime.datetime(2023, 8, 30, 16, 0, 6, tzinfo=datetime.timezone.utc), 'commenter': 'Gaurav17Joshi', 'type': 'User'}, {'comment_id': 1311566351, 'comment_body': 'Done now', 'comment_created': datetime.datetime(2023, 8, 31, 12, 39, 2, tzinfo=datetime.timezone.utc), 'commenter': 'Gaurav17Joshi', 'type': 'User'}, {'comment_id': 1315833043, 'comment_body': 'Actually `Termination_reason` is an integer. One can see the reason for termination in the summary of the sampling run using `GPResult.print_summary`.', 'comment_created': datetime.datetime(2023, 9, 5, 12, 35, 37, tzinfo=datetime.timezone.utc), 'commenter': 'Gaurav17Joshi', 'type': 'User'}, {'comment_id': 1315927778, 'comment_body': '`t0` is the maxima of the flare shape, and `delta` is an offset parameter which shifts the whole flare by the value delta. (like a horizontal transform)', 'comment_created': datetime.datetime(2023, 9, 5, 13, 48, 22, tzinfo=datetime.timezone.utc), 'commenter': 'Gaurav17Joshi', 'type': 'User'}, {'comment_id': 1315941288, 'comment_body': '`JaxNS` has a few other parameters, but they go into different functions. For now the sampler uses default options, but giving user flexibility to change them is something we would want to add.', 'comment_created': datetime.datetime(2023, 9, 5, 13, 57, 15, tzinfo=datetime.timezone.utc), 'commenter': 'Gaurav17Joshi', 'type': 'User'}, {'comment_id': 1338423417, 'comment_body': 'Minor thing: I think it\'s probably `stingray.modeling.gpmodeling` with one ""l""? ', 'comment_created': datetime.datetime(2023, 9, 27, 10, 50, 11, tzinfo=datetime.timezone.utc), 'commenter': 'dhuppenkothen', 'type': 'User'}, {'comment_id': 1338429178, 'comment_body': 'Why is `GPResult` the only thing in `__all__`. Should this not only contain other public functions such as `get_kernel`, `get_likelihood` etc?', 'comment_created': datetime.datetime(2023, 9, 27, 10, 55, 42, tzinfo=datetime.timezone.utc), 'commenter': 'dhuppenkothen', 'type': 'User'}, {'comment_id': 1338828265, 'comment_body': ""I think it would be useful to have `num_live_points` as a user-defined parameter. That's something I've seen people want to change. "", 'comment_created': datetime.datetime(2023, 9, 27, 15, 52, 45, tzinfo=datetime.timezone.utc), 'commenter': 'dhuppenkothen', 'type': 'User'}, {'comment_id': 1338833496, 'comment_body': 'OK, good, that makes sense!', 'comment_created': datetime.datetime(2023, 9, 27, 15, 56, 11, tzinfo=datetime.timezone.utc), 'commenter': 'dhuppenkothen', 'type': 'User'}, {'comment_id': 1339965844, 'comment_body': 'I just noticed this: `dict` is a protected name in Python (it defines dictionaries). We shouldn\'t use it as a variable name! I\'ve messed up my code many times by calling a list ""list"".', 'comment_created': datetime.datetime(2023, 9, 28, 11, 19, 2, tzinfo=datetime.timezone.utc), 'commenter': 'dhuppenkothen', 'type': 'User'}]","[{'commit_sha': 'c12c37074739c29b2a003d9abc8946808abdf18e', 'committer_username': 'Gaurav17Joshi', 'committer_name': 'Gaurav Joshi', 'committer_email': None, 'commit_date': datetime.datetime(2022, 8, 15, 13, 35, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '04b338b2ace4d69a44da9f60f299d1d58d51ad78', 'committer_username': 'Gaurav17Joshi', 'committer_name': 'Gaurav Joshi', 'committer_email': None, 'commit_date': datetime.datetime(2022, 8, 15, 13, 35, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7a44249c2e06bf32db51a419cac1e65a9fd21569', 'committer_username': 'Gaurav17Joshi', 'committer_name': 'Gaurav Joshi', 'committer_email': None, 'commit_date': datetime.datetime(2022, 8, 15, 13, 35, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3bb4972cd9ab5e67e63417d1ea2da42b0bf19d1d', 'committer_username': 'Gaurav17Joshi', 'committer_name': 'Gaurav Joshi', 'committer_email': None, 'commit_date': datetime.datetime(2022, 8, 15, 13, 35, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9fe6a4715d825f780f7e19ce5fb3cfcd1b355e87', 'committer_username': 'Gaurav17Joshi', 'committer_name': 'Gaurav Joshi', 'committer_email': None, 'commit_date': datetime.datetime(2022, 8, 15, 13, 35, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9b77f2a79c4a843a5066cf88c424fc05e1b2aadc', 'committer_username': 'Gaurav17Joshi', 'committer_name': 'Gaurav Joshi', 'committer_email': None, 'commit_date': datetime.datetime(2022, 8, 15, 13, 35, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2c296b1ae31301b9f976b7ac50a90bae5886f410', 'committer_username': 'Gaurav17Joshi', 'committer_name': 'Gaurav Joshi', 'committer_email': None, 'commit_date': datetime.datetime(2022, 8, 15, 13, 35, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '014826b8a50bc79cfa7ae2099051047300795b8b', 'committer_username': 'Gaurav17Joshi', 'committer_name': 'Gaurav Joshi', 'committer_email': None, 'commit_date': datetime.datetime(2022, 8, 15, 13, 35, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bb33727e4f10a41e289b1cf469a04f27786ff4fb', 'committer_username': 'Gaurav17Joshi', 'committer_name': 'Gaurav Joshi', 'committer_email': None, 'commit_date': datetime.datetime(2022, 8, 15, 13, 35, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '596c63b8fc20a58265bb05ecff05d897b3571ef7', 'committer_username': 'Gaurav17Joshi', 'committer_name': 'Gaurav Joshi', 'committer_email': None, 'commit_date': datetime.datetime(2022, 8, 15, 13, 35, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '01b52a3f2317e48b1d31dfdb8d36ebc5ce2709e8', 'committer_username': 'Gaurav17Joshi', 'committer_name': 'Gaurav Joshi', 'committer_email': None, 'commit_date': datetime.datetime(2022, 8, 15, 13, 35, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6069b4c762e0004c21abe4e57558953a756d006d', 'committer_username': 'Gaurav17Joshi', 'committer_name': 'Gaurav Joshi', 'committer_email': None, 'commit_date': datetime.datetime(2022, 8, 15, 13, 35, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2737824d63bcc6b6b44a014b1d782003ae74e5cf', 'committer_username': 'Gaurav17Joshi', 'committer_name': 'Gaurav Joshi', 'committer_email': None, 'commit_date': datetime.datetime(2022, 8, 15, 13, 35, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e9036f5ead3251a436540db7aee4faaed3af2cb2', 'committer_username': 'Gaurav17Joshi', 'committer_name': 'Gaurav Joshi', 'committer_email': None, 'commit_date': datetime.datetime(2022, 8, 15, 13, 35, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f89acdd674e52d5cc55975f3dc5629b5498629b1', 'committer_username': 'Gaurav17Joshi', 'committer_name': 'Gaurav Joshi', 'committer_email': None, 'commit_date': datetime.datetime(2022, 8, 15, 13, 35, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4f631e3bbc3d5c0f0116af4bc47f5b32abaad192', 'committer_username': 'Gaurav17Joshi', 'committer_name': 'Gaurav Joshi', 'committer_email': None, 'commit_date': datetime.datetime(2022, 8, 15, 13, 35, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6c8ae22a6ddc8a5c13f10bff0b76787620aa1f43', 'committer_username': 'Gaurav17Joshi', 'committer_name': 'Gaurav Joshi', 'committer_email': None, 'commit_date': datetime.datetime(2022, 8, 15, 13, 35, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bef7b1492c8d9b6945d67e0b6b7330c3f4f9e154', 'committer_username': 'Gaurav17Joshi', 'committer_name': 'Gaurav Joshi', 'committer_email': None, 'commit_date': datetime.datetime(2022, 8, 15, 13, 35, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8701ae7b280a73c1bf055bc93aed0ba9968b3f86', 'committer_username': 'Gaurav17Joshi', 'committer_name': 'Gaurav Joshi', 'committer_email': None, 'commit_date': datetime.datetime(2022, 8, 15, 13, 35, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '51a9cef3b251ad785549600ac52409ba7092115e', 'committer_username': 'Gaurav17Joshi', 'committer_name': 'Gaurav Joshi', 'committer_email': None, 'commit_date': datetime.datetime(2022, 8, 15, 13, 35, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f9d38ca8ee37059da5871ae64f88713c512835bc', 'committer_username': 'Gaurav17Joshi', 'committer_name': 'Gaurav Joshi', 'committer_email': None, 'commit_date': datetime.datetime(2022, 8, 15, 13, 35, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3a46a45e206ea85e3f89187b291455400aa2d997', 'committer_username': 'Gaurav17Joshi', 'committer_name': 'Gaurav Joshi', 'committer_email': None, 'commit_date': datetime.datetime(2022, 8, 15, 13, 35, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd86b27403a5de3566118363b7b96ef9c529d2dc0', 'committer_username': 'Gaurav17Joshi', 'committer_name': 'Gaurav Joshi', 'committer_email': None, 'commit_date': datetime.datetime(2022, 8, 15, 13, 35, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fa329cbcfc7a1577d591fac4d2d57b6d2e50e975', 'committer_username': 'Gaurav17Joshi', 'committer_name': 'Gaurav Joshi', 'committer_email': None, 'commit_date': datetime.datetime(2022, 8, 15, 13, 35, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '647c72ef422c2f10bd35c510f70bcbbd49302878', 'committer_username': 'Gaurav17Joshi', 'committer_name': 'Gaurav Joshi', 'committer_email': None, 'commit_date': datetime.datetime(2022, 8, 15, 13, 35, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0e091ae8c375dc7a5846d2bb7e3349732afa48cd', 'committer_username': 'Gaurav17Joshi', 'committer_name': 'Gaurav Joshi', 'committer_email': None, 'commit_date': datetime.datetime(2022, 8, 15, 13, 35, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dbaee735e8f5a10c7b9c1c167342d3bbb2191198', 'committer_username': 'Gaurav17Joshi', 'committer_name': 'Gaurav Joshi', 'committer_email': None, 'commit_date': datetime.datetime(2022, 8, 15, 13, 35, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ada63a016d777b97e53b3a118df716d0e2163a16', 'committer_username': 'Gaurav17Joshi', 'committer_name': 'Gaurav Joshi', 'committer_email': None, 'commit_date': datetime.datetime(2022, 8, 15, 13, 35, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c1a08a39ba292e5ca0ed4232746ffb62d41dc8dd', 'committer_username': 'Gaurav17Joshi', 'committer_name': 'Gaurav Joshi', 'committer_email': None, 'commit_date': datetime.datetime(2022, 8, 15, 13, 35, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '827cdf77d221f90a90fea3e0717ac61fee70c6ec', 'committer_username': 'Gaurav17Joshi', 'committer_name': 'Gaurav Joshi', 'committer_email': None, 'commit_date': datetime.datetime(2022, 8, 15, 13, 35, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8fa0059d74807936b96f27bc13bd08e5867c6628', 'committer_username': 'Gaurav17Joshi', 'committer_name': 'Gaurav Joshi', 'committer_email': None, 'commit_date': datetime.datetime(2022, 8, 15, 13, 35, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e00d43860db8b94a4c3e291bf2281f5da6db742b', 'committer_username': 'Gaurav17Joshi', 'committer_name': 'Gaurav Joshi', 'committer_email': None, 'commit_date': datetime.datetime(2022, 8, 15, 13, 35, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b031ed1f99ede09011301c028c814f8babcdff10', 'committer_username': 'Gaurav17Joshi', 'committer_name': 'Gaurav Joshi', 'committer_email': None, 'commit_date': datetime.datetime(2022, 8, 15, 13, 35, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5d95841494fc4765ef3621ef128bc2b8f085eeec', 'committer_username': 'Gaurav17Joshi', 'committer_name': 'Gaurav Joshi', 'committer_email': None, 'commit_date': datetime.datetime(2022, 8, 15, 13, 35, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c013d4ac149bbc2ae8d4f4d68406baa78156be58', 'committer_username': 'Gaurav17Joshi', 'committer_name': 'Gaurav Joshi', 'committer_email': None, 'commit_date': datetime.datetime(2022, 8, 15, 13, 35, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3bf207924d60efb89429f827b975371488c1300c', 'committer_username': 'Gaurav17Joshi', 'committer_name': 'Gaurav Joshi', 'committer_email': None, 'commit_date': datetime.datetime(2022, 8, 15, 13, 35, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a14ca4a51d4a657848563d0d8d5ab0092d683787', 'committer_username': 'Gaurav17Joshi', 'committer_name': 'Gaurav Joshi', 'committer_email': None, 'commit_date': datetime.datetime(2022, 8, 15, 13, 35, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f3bef3f86ad3b41635cf0354c154fb952c8dc302', 'committer_username': 'Gaurav17Joshi', 'committer_name': 'Gaurav Joshi', 'committer_email': None, 'commit_date': datetime.datetime(2022, 8, 15, 13, 35, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '181e90a67e252ee318c1eb08200af240370e5c1a', 'committer_username': 'Gaurav17Joshi', 'committer_name': 'Gaurav Joshi', 'committer_email': None, 'commit_date': datetime.datetime(2022, 8, 15, 13, 35, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b374d6bc27809a146b1c8e3ac4aa6deb99089fc8', 'committer_username': 'Gaurav17Joshi', 'committer_name': 'Gaurav Joshi', 'committer_email': None, 'commit_date': datetime.datetime(2022, 8, 15, 13, 35, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cb0a0f555c210eebfa43254f0bca417a01beab2b', 'committer_username': 'Gaurav17Joshi', 'committer_name': 'Gaurav Joshi', 'committer_email': None, 'commit_date': datetime.datetime(2022, 8, 15, 13, 35, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a2c03c0148dc26403de92600fd66c85724338e0a', 'committer_username': 'Gaurav17Joshi', 'committer_name': 'Gaurav Joshi', 'committer_email': None, 'commit_date': datetime.datetime(2022, 8, 15, 13, 35, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'eeb241afd7bb3b0e02266781df61652016cf6657', 'committer_username': 'Gaurav17Joshi', 'committer_name': 'Gaurav Joshi', 'committer_email': None, 'commit_date': datetime.datetime(2022, 8, 15, 13, 35, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c73620b4b778832af7ade1fc333b3a4c85a5eda1', 'committer_username': 'Gaurav17Joshi', 'committer_name': 'Gaurav Joshi', 'committer_email': None, 'commit_date': datetime.datetime(2022, 8, 15, 13, 35, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2d0ba466ec7b29130f268bffd30ecf063a7d82e0', 'committer_username': 'Gaurav17Joshi', 'committer_name': 'Gaurav Joshi', 'committer_email': None, 'commit_date': datetime.datetime(2022, 8, 15, 13, 35, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c3778a3ddb9f55a523dde76d04911eae528b7d2c', 'committer_username': 'Gaurav17Joshi', 'committer_name': 'Gaurav Joshi', 'committer_email': None, 'commit_date': datetime.datetime(2022, 8, 15, 13, 35, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd3447f41627754b0ee118a18be4d2342fb177922', 'committer_username': 'dhuppenkothen', 'committer_name': 'Daniela Huppenkothen', 'committer_email': None, 'commit_date': datetime.datetime(2013, 8, 15, 13, 18, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1fc9f84665e36e770b738dea2d8dd36dacdc38f7', 'committer_username': 'dhuppenkothen', 'committer_name': 'Daniela Huppenkothen', 'committer_email': None, 'commit_date': datetime.datetime(2013, 8, 15, 13, 18, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '78e13f4332f1934769865e9dc3c4113838493106', 'committer_username': 'dhuppenkothen', 'committer_name': 'Daniela Huppenkothen', 'committer_email': None, 'commit_date': datetime.datetime(2013, 8, 15, 13, 18, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f56c2765f44e16fa47eb263e17d627ae1fd6129c', 'committer_username': 'dhuppenkothen', 'committer_name': 'Daniela Huppenkothen', 'committer_email': None, 'commit_date': datetime.datetime(2013, 8, 15, 13, 18, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bd2fd598827b56f6d6e5c6af598c5be75a1f03af', 'committer_username': 'dhuppenkothen', 'committer_name': 'Daniela Huppenkothen', 'committer_email': None, 'commit_date': datetime.datetime(2013, 8, 15, 13, 18, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e9ef4df5db51d70a37a6be3bd5f1c3aed408b98f', 'committer_username': 'Gaurav17Joshi', 'committer_name': 'Gaurav Joshi', 'committer_email': None, 'commit_date': datetime.datetime(2022, 8, 15, 13, 35, 9, tzinfo=datetime.timezone.utc)}]",Gaurav Joshi,111291834,,User,,41,,3,2

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
43449839,stingray,StingraySoftware/stingray,Python,141,169,21,55,3974,44,26,9,"[{'id': 1388643730, 'number': 739, 'closed': datetime.datetime(2023, 9, 29, 10, 34, 20, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 6, 12, 12, 44, 27, tzinfo=datetime.timezone.utc), 'time_taken': 9409793.0, 'time_delta': '108 days, 21:49:53', 'additions': 1340, 'deletions': 0, 'state': 'closed'}, {'id': 1290391699, 'number': 711, 'closed': datetime.datetime(2023, 6, 12, 10, 59, 10, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 3, 26, 16, 1, 46, tzinfo=datetime.timezone.utc), 'time_taken': 6721044.0, 'time_delta': '77 days, 18:57:24', 'additions': 384, 'deletions': 0, 'state': 'closed'}, {'id': 1271980816, 'number': 703, 'closed': datetime.datetime(2024, 1, 8, 10, 50, 22, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 3, 11, 7, 35, 6, tzinfo=datetime.timezone.utc), 'time_taken': 26190916.0, 'time_delta': '303 days, 3:15:16', 'additions': 66, 'deletions': 11, 'state': 'closed'}, {'id': 1268090559, 'number': 701, 'closed': datetime.datetime(2023, 7, 26, 16, 31, 35, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 3, 8, 15, 59, 4, tzinfo=datetime.timezone.utc), 'time_taken': 12097951.0, 'time_delta': '140 days, 0:32:31', 'additions': 108, 'deletions': 1, 'state': 'closed'}, {'id': 1263420004, 'number': 699, 'closed': datetime.datetime(2023, 3, 7, 8, 14, 19, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 3, 5, 13, 56, 33, tzinfo=datetime.timezone.utc), 'time_taken': 152266.0, 'time_delta': '1 day, 18:17:46', 'additions': 63, 'deletions': 16, 'state': 'closed'}, {'id': 1262039400, 'number': 696, 'closed': datetime.datetime(2023, 3, 5, 11, 17, 21, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 3, 3, 12, 58, 51, tzinfo=datetime.timezone.utc), 'time_taken': 166710.0, 'time_delta': '1 day, 22:18:30', 'additions': 6056, 'deletions': 5113, 'state': 'closed'}, {'id': 1259175514, 'number': 694, 'closed': datetime.datetime(2023, 3, 8, 10, 14, 2, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 3, 1, 17, 18, 46, tzinfo=datetime.timezone.utc), 'time_taken': 579316.0, 'time_delta': '6 days, 16:55:16', 'additions': 40, 'deletions': 1, 'state': 'closed'}]"
