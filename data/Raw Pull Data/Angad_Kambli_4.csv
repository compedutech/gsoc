pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
706052869,Add pseudolocalization to Godot. (GSoC'21),"<!--
Pull requests should always be made for the `master` branch first, as that's
where development happens and the source of all future stable release branches.

Relevant fixes are cherry-picked for stable branches as needed.

Do not create a pull request for stable branches unless the change is already
available in the `master` branch and it cannot be easily cherry-picked.
Alternatively, if the change is only relevant for that branch (e.g. rendering
fixes for the 3.2 branch).
-->
Final PR for adding pseudolocalization to Godot. Take a look at #49361 to see the complete history.",True,51395,https://api.github.com/repos/godotengine/godot/pulls/51395,https://github.com/godotengine/godot/pull/51395,closed,335,5,5,1,1,3,3,0,"[{'name': 'feature proposal'}, {'name': 'topic:core'}, {'name': 'topic:editor'}]",2021-08-08 14:28:48+00:00,2021-08-08 15:55:31+00:00,5203.0,1:26:43,"[{'comment_id': 684787283, 'comment_body': ""Would be better to move this `ADD_PROPERTY` to the bottom, separated of the rest. This is how it's organized in the rest of the files."", 'comment_created': datetime.datetime(2021, 8, 8, 14, 56, 30, tzinfo=datetime.timezone.utc), 'commenter': 'YeldhamDev', 'type': 'User'}, {'comment_id': 684787560, 'comment_body': ""Remember @akien-mga's comment about using `EDITOR_DEF_RST` in the `TranslationServer` instead of this here."", 'comment_created': datetime.datetime(2021, 8, 8, 14, 58, 53, tzinfo=datetime.timezone.utc), 'commenter': 'YeldhamDev', 'type': 'User'}, {'comment_id': 684789414, 'comment_body': ""Yeah, using EDITOR_DEF_RST in TranslationServer isn't possible since the setup() function is called before EditorSettings is initialized. So, Godot crashes if I put an EDITOR_DEF_RST in TranslationServer::setup(). Instead, I declared a set_editor_pseudolocalization() function to set the editor_pseudolocalization variable and I am calling that function from EditorSettings::setup_language(). This also solves the issue of caching the editor_pseudolocalization instead of querying it from EditorSettings everytime."", 'comment_created': datetime.datetime(2021, 8, 8, 15, 13, 29, tzinfo=datetime.timezone.utc), 'commenter': 'angad-k', 'type': 'User'}]","[{'commit_sha': 'e79dde1cbb0e9a97c17bb5d535809efbcee1d965', 'committer_username': 'angad-k', 'committer_name': 'Angad Kambli', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 22, 18, 27, 14, tzinfo=datetime.timezone.utc)}]",Angad Kambli,54415525,,User,,38,,56,68
662934988,[WIP] Add pseudolocalization support to Godot,"<!--
Pull requests should always be made for the `master` branch first, as that's
where development happens and the source of all future stable release branches.

Relevant fixes are cherry-picked for stable branches as needed.

Do not create a pull request for stable branches unless the change is already
available in the `master` branch and it cannot be easily cherry-picked.
Alternatively, if the change is only relevant for that branch (e.g. rendering
fixes for the 3.2 branch).
-->
### GSoC Pseudolocalization project
<b> This is a work in progress PR </b>
This PR will be updated over the course of the next two months as I implement the pseudolocalization feature in Godot for GSoC'21. The GSoC project link for this can be found [here](https://summerofcode.withgoogle.com/projects/#5664030850547712) and the original proposal can be found [here](https://github.com/godotengine/godot-proposals/issues/1844).  Also check out the todo list [here](https://docs.google.com/document/d/1RsCikyEeviXC2xdFvKy7lQZUdTjTQL6jj3iF_6VxZ0k/edit?usp=sharing). Demo project for this feature can be found [here](https://github.com/angad-k/Pseudolocalization-Demo). PR for Godot-Docs tutorial can be found [here](https://github.com/godotengine/godot-docs/pull/5119). PR for Godot-Demo-Projects can be found [here](https://github.com/godotengine/godot-demo-projects/pull/637).",False,49361,https://api.github.com/repos/godotengine/godot/pulls/49361,https://github.com/godotengine/godot/pull/49361,closed,335,5,5,24,2,36,4,0,"[{'name': 'feature proposal'}, {'name': 'archived'}, {'name': 'topic:core'}, {'name': 'topic:editor'}]",2021-06-06 12:07:59+00:00,2021-08-08 15:00:02+00:00,5453523.0,"63 days, 2:52:03","[{'comment_id': 661331160, 'comment_body': 'It might be useful to pop override around formatting string parts (`%s` etc.), e.g. make it `(RLO)text text (PDF)%s(RLO) text text(PDF)` instead of `(RLO)text text %s text text(PDF)`.\r\n\r\nThis will help to identify strings which need additional control chars to display correctly, e.g. list of node names (not translated) in the middle of TRL text, like this one https://hosted.weblate.org/translate/godot-engine/godot/he/?checksum=3818bad5b65a4bef ', 'comment_created': datetime.datetime(2021, 6, 30, 10, 28, 17, tzinfo=datetime.timezone.utc), 'commenter': 'bruvzg', 'type': 'User'}, {'comment_id': 661531583, 'comment_body': 'So, should I just pop the FakeBiDi for formatting strings part or skip pseudolocalizing them altogether? Also, I should do this for all %s, %d, etc and also for {s} kind of parts, right?', 'comment_created': datetime.datetime(2021, 6, 30, 14, 30, 28, tzinfo=datetime.timezone.utc), 'commenter': 'angad-k', 'type': 'User'}, {'comment_id': 661534592, 'comment_body': 'Just pop it for `%s` (and other string type formatting if there are any).', 'comment_created': datetime.datetime(2021, 6, 30, 14, 33, 40, tzinfo=datetime.timezone.utc), 'commenter': 'bruvzg', 'type': 'User'}, {'comment_id': 663944616, 'comment_body': ""Shouldn't this be using `char32_t` instead of `wchat_t` and `char`? @bruvzg"", 'comment_created': datetime.datetime(2021, 7, 5, 13, 46, 38, tzinfo=datetime.timezone.utc), 'commenter': 'akien-mga', 'type': 'User'}, {'comment_id': 663946164, 'comment_body': ""I think this might be a bit overkill in terms of runtime customization (though it might be useful for some plugins I guess). You can leave it in for now and we'll see later on, this is easy to change without impacting the rest much.\r\n\r\nSince all the config is exposed in the project settings, we could instead have users set the project settings at runtime, and since their values are cached in the constructor, expose a method to force reloading the pseudolocalization configuration (i.e. reparse all settings)."", 'comment_created': datetime.datetime(2021, 7, 5, 13, 48, 52, tzinfo=datetime.timezone.utc), 'commenter': 'akien-mga', 'type': 'User'}, {'comment_id': 663946558, 'comment_body': ""Since they're used only in `translation.cpp`'s constructor, you can put the `GLOBAL_DEF` directly there, instead of `GLOBAL_GET`."", 'comment_created': datetime.datetime(2021, 7, 5, 13, 49, 24, tzinfo=datetime.timezone.utc), 'commenter': 'akien-mga', 'type': 'User'}, {'comment_id': 663947674, 'comment_body': 'It will work with `wchar_t` (there\'s nothing outside its range used here), but it causes extra  UTF-16 → UTF-32 conversion every time it\'s added to string, using `char32_t` and `U""x""` literals is better.', 'comment_created': datetime.datetime(2021, 7, 5, 13, 51, 4, tzinfo=datetime.timezone.utc), 'commenter': 'bruvzg', 'type': 'User'}, {'comment_id': 664505272, 'comment_body': ""```suggestion\r\n\tchar32_t fakebidiprefix = U'\\u202e';\r\n\tchar32_t fakebidisuffix = U'\\u202c';\r\n```"", 'comment_created': datetime.datetime(2021, 7, 6, 12, 23, 4, tzinfo=datetime.timezone.utc), 'commenter': 'bruvzg', 'type': 'User'}, {'comment_id': 674665656, 'comment_body': 'Hey! Should I do this now? I should remove all these functions and replace them with a `reload_pseudolocalization()` method that reparses the settings and reloads the translations, correct?', 'comment_created': datetime.datetime(2021, 7, 22, 10, 8, 37, tzinfo=datetime.timezone.utc), 'commenter': 'angad-k', 'type': 'User'}, {'comment_id': 674670384, 'comment_body': ""That's up for discussion, what do you think about it yourself in terms of usability?\r\n\r\nBut yeah, personally I think it would be good to avoid having too many methods dedicated to customizing this at runtime, which is a fairly niche use case."", 'comment_created': datetime.datetime(2021, 7, 22, 10, 16, 11, tzinfo=datetime.timezone.utc), 'commenter': 'akien-mga', 'type': 'User'}, {'comment_id': 674672419, 'comment_body': 'Yeah. I guess we could keep in two methods for toggling pseudolocalization and if someone wants to change other pseudolocalization settings, they could do it by directly changing the project settings and then calling `reload_pseudolocalization()`', 'comment_created': datetime.datetime(2021, 7, 22, 10, 19, 25, tzinfo=datetime.timezone.utc), 'commenter': 'angad-k', 'type': 'User'}, {'comment_id': 675473697, 'comment_body': '```suggestion\r\n\t\t\tSkip placeholders for string formatting like [code]%s[/code], [code]%f[/code] during pseudolocalization. Useful to identify strings which need additional control characters to display correctly.\r\n```', 'comment_created': datetime.datetime(2021, 7, 23, 10, 41, 43, tzinfo=datetime.timezone.utc), 'commenter': 'Calinou', 'type': 'User'}, {'comment_id': 675473765, 'comment_body': '```suggestion\r\n\t\t\tReplace all characters in the string with [code]*[/code]. Useful for finding non-localizable strings.\r\n```', 'comment_created': datetime.datetime(2021, 7, 23, 10, 41, 51, tzinfo=datetime.timezone.utc), 'commenter': 'Calinou', 'type': 'User'}, {'comment_id': 675473880, 'comment_body': '```suggestion\r\n\t\t\tThe expansion ratio to use during pseudolocalization. A value of [code]0.3[/code] is sufficient for most practical purposes, and will increase the length of each string by 30%.\r\n```', 'comment_created': datetime.datetime(2021, 7, 23, 10, 42, 6, tzinfo=datetime.timezone.utc), 'commenter': 'Calinou', 'type': 'User'}, {'comment_id': 675474277, 'comment_body': '```suggestion\r\n\t\t\tIf [code]true[/code], enables pseudolocalization for the project. This can be used to spot untranslatable strings or layout issues that may occur once the project is localized to languages that have longer strings than the source language.\r\n\t\t\t[b]Note:[/b] This property is only read when the project starts. To toggle pseudolocalization at run-time, use [method TranslationServer.set_pseudolocalization_enabled] instead.\r\n```', 'comment_created': datetime.datetime(2021, 7, 23, 10, 42, 56, tzinfo=datetime.timezone.utc), 'commenter': 'Calinou', 'type': 'User'}, {'comment_id': 675474506, 'comment_body': '```suggestion\r\n\t\t\t\tReturns [code]true[/code] if pseudolocalization is enabled, [code]false[/code] otherwise. See also [member ProjectSettings.internationalization/pseudolocalization/use_pseudolocalization].\r\n```', 'comment_created': datetime.datetime(2021, 7, 23, 10, 43, 26, tzinfo=datetime.timezone.utc), 'commenter': 'Calinou', 'type': 'User'}, {'comment_id': 675474963, 'comment_body': '```suggestion\r\n\t\t\t\tSets the state of pseudolocalization to the value of  [code]enabled[/code]. See also [member ProjectSettings.internationalization/pseudolocalization/use_pseudolocalization].\r\n```', 'comment_created': datetime.datetime(2021, 7, 23, 10, 44, 21, tzinfo=datetime.timezone.utc), 'commenter': 'Calinou', 'type': 'User'}, {'comment_id': 675475502, 'comment_body': '```suggestion\r\n\t\t\tIf [code]true[/code], emulate bidirectional (right-to-left) text when pseudolocalization is enabled. This can be used to spot issues with RTL layout and UI mirroring that will crop up if the project is localized to RTL languages such as Arabic or Hebrew.\r\n```', 'comment_created': datetime.datetime(2021, 7, 23, 10, 45, 36, tzinfo=datetime.timezone.utc), 'commenter': 'Calinou', 'type': 'User'}, {'comment_id': 683484344, 'comment_body': 'These should be given default values:\r\n```suggestion\r\n\tbool pseudolocalization_enabled = false;\r\n\tbool pseudolocalization_accents_enabled = false;\r\n\tbool pseudolocalization_double_vowels_enabled = false;\r\n\tbool pseudolocalization_fake_bidi_enabled = false;\r\n\tbool pseudolocalization_override_enabled = false;\r\n\tbool pseudolocalization_skip_placeholders_enabled = false;\r\n\tfloat expansion_ratio = 0.0;\r\n```', 'comment_created': datetime.datetime(2021, 8, 5, 14, 4, 15, tzinfo=datetime.timezone.utc), 'commenter': 'akien-mga', 'type': 'User'}, {'comment_id': 683485030, 'comment_body': 'I wondered if this could be made a bit more compact with some kind of lookup table instead of manual switch.', 'comment_created': datetime.datetime(2021, 8, 5, 14, 5, 4, tzinfo=datetime.timezone.utc), 'commenter': 'akien-mga', 'type': 'User'}, {'comment_id': 683486174, 'comment_body': 'You could use a ternary operator here:\r\n```suggestion\r\n\t\treturn pseudolocalization_enabled ? pseudolocalize(p_message) : p_message;\r\n```\r\nSame below.', 'comment_created': datetime.datetime(2021, 8, 5, 14, 6, 21, tzinfo=datetime.timezone.utc), 'commenter': 'akien-mga', 'type': 'User'}, {'comment_id': 683488550, 'comment_body': ""This should be cached, it's too costly to query the editor settings again for every single message that will be translated, each time a UI element is refreshed.\r\n\r\nI would instead check this in the `setup()` phase like for the normal project, and then do:\r\n```\r\nreturn editor_pseudolocalization ? tool_pseudolocalize(r) : r;\r\n```"", 'comment_created': datetime.datetime(2021, 8, 5, 14, 8, 35, tzinfo=datetime.timezone.utc), 'commenter': 'akien-mga', 'type': 'User'}, {'comment_id': 683489661, 'comment_body': 'Parameters should start with `p_`:\r\n```suggestion\r\nvoid TranslationServer::set_pseudolocalization_enabled(bool p_enabled) {\r\n```', 'comment_created': datetime.datetime(2021, 8, 5, 14, 9, 49, tzinfo=datetime.timezone.utc), 'commenter': 'akien-mga', 'type': 'User'}, {'comment_id': 683492940, 'comment_body': '`String` is default initialized to an empty string, so you don\'t need to assign one. Applies to all `String ... = """";` in this PR.', 'comment_created': datetime.datetime(2021, 8, 5, 14, 13, 32, tzinfo=datetime.timezone.utc), 'commenter': 'akien-mga', 'type': 'User'}, {'comment_id': 683493384, 'comment_body': '```suggestion\r\nString TranslationServer::get_override_string(String &p_message) const {\r\n```\r\n\r\nSame for other methods (and remember to also update the headers).', 'comment_created': datetime.datetime(2021, 8, 5, 14, 14, 3, tzinfo=datetime.timezone.utc), 'commenter': 'akien-mga', 'type': 'User'}, {'comment_id': 683493674, 'comment_body': 'Easier to parse with a separation between methods.\r\n```suggestion\r\n}\r\n\r\nString TranslationServer::double_vowels(String &message) const {\r\n```', 'comment_created': datetime.datetime(2021, 8, 5, 14, 14, 22, tzinfo=datetime.timezone.utc), 'commenter': 'akien-mga', 'type': 'User'}, {'comment_id': 683494624, 'comment_body': 'This is the preferred comment style (for new code at least), space after `//`, starts with a capital letter, ends with a dot (i.e. a normal sentence).\r\n```suggestion\r\n\t// The fake bidi unicode gets popped at every newline so pushing it back at every newline.\r\n```\r\n\r\nApplies to other comments in this PR.', 'comment_created': datetime.datetime(2021, 8, 5, 14, 15, 24, tzinfo=datetime.timezone.utc), 'commenter': 'akien-mga', 'type': 'User'}, {'comment_id': 683495787, 'comment_body': 'This can maybe be moved to a helper method to avoid the duplication in each method.', 'comment_created': datetime.datetime(2021, 8, 5, 14, 16, 42, tzinfo=datetime.timezone.utc), 'commenter': 'akien-mga', 'type': 'User'}, {'comment_id': 683496138, 'comment_body': '```suggestion\r\nString TranslationServer::add_padding(String &p_message, int p_length) const {\r\n```', 'comment_created': datetime.datetime(2021, 8, 5, 14, 17, 4, tzinfo=datetime.timezone.utc), 'commenter': 'akien-mga', 'type': 'User'}, {'comment_id': 683497106, 'comment_body': '```suggestion\r\n\treturn nullptr;\r\n```', 'comment_created': datetime.datetime(2021, 8, 5, 14, 18, 4, tzinfo=datetime.timezone.utc), 'commenter': 'akien-mga', 'type': 'User'}, {'comment_id': 683497868, 'comment_body': 'Those can probably be `private`?', 'comment_created': datetime.datetime(2021, 8, 5, 14, 18, 53, tzinfo=datetime.timezone.utc), 'commenter': 'akien-mga', 'type': 'User'}, {'comment_id': 683498701, 'comment_body': '```suggestion\r\n\t\t\tSkip placeholders for string formatting like [code]%s[/code] or [code]%f[/code] during pseudolocalization. Useful to identify strings which need additional control characters to display correctly.\r\n```', 'comment_created': datetime.datetime(2021, 8, 5, 14, 19, 49, tzinfo=datetime.timezone.utc), 'commenter': 'akien-mga', 'type': 'User'}, {'comment_id': 683501786, 'comment_body': 'You can add a `pseudolocalization_enabled` property with `ADD_PROPERTY` additionally to the setter and getter. This will remove the setter and getter from the docs and expose the property instead, which is more user-friendly.\r\n\r\nFor its documentation, you can copy what you had in the setter, and edit it to start following our style for boolean property descriptions: `If [code]true[/code], ...`. (No need to say what happens if false since nothing happens.)', 'comment_created': datetime.datetime(2021, 8, 5, 14, 23, 3, tzinfo=datetime.timezone.utc), 'commenter': 'akien-mga', 'type': 'User'}, {'comment_id': 683502425, 'comment_body': '```suggestion\r\n\tClassDB::bind_method(D_METHOD(""pseudolocalize"", ""message""), &TranslationServer::pseudolocalize);\r\n```\r\n\r\nThe `p_` prefix is used in C++, but not in the bindings.', 'comment_created': datetime.datetime(2021, 8, 5, 14, 23, 37, tzinfo=datetime.timezone.utc), 'commenter': 'akien-mga', 'type': 'User'}, {'comment_id': 683503807, 'comment_body': 'Instead of this here, you can use `EDITOR_DEF_RST` where you actually use it in `TranslationServer` directly. The `_RST` part will also enable restart if changed. (See my other comment about caching the value too.)', 'comment_created': datetime.datetime(2021, 8, 5, 14, 25, 5, tzinfo=datetime.timezone.utc), 'commenter': 'akien-mga', 'type': 'User'}, {'comment_id': 683504756, 'comment_body': '```suggestion\r\n\t\t\t\tEnables the use of pseudolocalization. See [member ProjectSettings.internationalization/pseudolocalization/use_pseudolocalization] for details.\r\n```', 'comment_created': datetime.datetime(2021, 8, 5, 14, 26, 5, tzinfo=datetime.timezone.utc), 'commenter': 'akien-mga', 'type': 'User'}]","[{'commit_sha': '8731f238fb082e8c3d2e6b41ae262de99555ab0e', 'committer_username': 'angad-k', 'committer_name': 'Angad Kambli', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 22, 18, 27, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0cb7cafef7ad42c86e9797285f8a62eef85515b9', 'committer_username': 'angad-k', 'committer_name': 'Angad Kambli', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 22, 18, 27, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '34e383caaab884ddd12882d3691a9d1b55be2205', 'committer_username': 'angad-k', 'committer_name': 'Angad Kambli', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 22, 18, 27, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ee300669f08c4fd647c1437bded15deb67c9a184', 'committer_username': 'angad-k', 'committer_name': 'Angad Kambli', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 22, 18, 27, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4e0075fa2c6ef7a72e1597aa2200f23c45690658', 'committer_username': 'angad-k', 'committer_name': 'Angad Kambli', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 22, 18, 27, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ac55e56aa8e92d4694c3634db2d7b224c8fc80f2', 'committer_username': 'angad-k', 'committer_name': 'Angad Kambli', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 22, 18, 27, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '53346ed65c3bdf5d381d3d35709c4336a6436bd5', 'committer_username': 'angad-k', 'committer_name': 'Angad Kambli', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 22, 18, 27, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3d4b6e48c335c6be27640c865125aadf443dbc66', 'committer_username': 'angad-k', 'committer_name': 'Angad Kambli', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 22, 18, 27, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c8b4f2da8e2edcd3ab8d738fe87c250ba41f3ce7', 'committer_username': 'angad-k', 'committer_name': 'Angad Kambli', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 22, 18, 27, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd7bd7cd971ede946940c6c902e9c53719229e549', 'committer_username': 'angad-k', 'committer_name': 'Angad Kambli', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 22, 18, 27, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3ab16826503e9df1ebdf6bf546d707cd063c8a2d', 'committer_username': 'angad-k', 'committer_name': 'Angad Kambli', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 22, 18, 27, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6ba7f9ec2aa30090c51704231a804fde18805e50', 'committer_username': 'angad-k', 'committer_name': 'Angad Kambli', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 22, 18, 27, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '523c501afb0c84233d9e46e98e347fd61d99fb3a', 'committer_username': 'angad-k', 'committer_name': 'Angad Kambli', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 22, 18, 27, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2b7185132246dcc704fe05a8705bdcc398673477', 'committer_username': 'angad-k', 'committer_name': 'Angad Kambli', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 22, 18, 27, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '272b94249be0d2978c0240ec450f40316327fa2f', 'committer_username': 'angad-k', 'committer_name': 'Angad Kambli', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 22, 18, 27, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'abc38399645a69ebe9927cb1d47e4895e6fd8b27', 'committer_username': 'angad-k', 'committer_name': 'Angad Kambli', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 22, 18, 27, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0ae14e204ad70411a41e7c6ce5ca39324665f088', 'committer_username': 'angad-k', 'committer_name': 'Angad Kambli', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 22, 18, 27, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '92942cdc377c03c65542f8f847d3a9170f5c8939', 'committer_username': 'angad-k', 'committer_name': 'Angad Kambli', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 22, 18, 27, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '11a1d41d72e7581898b6c3874216f6e0e5c79fcd', 'committer_username': 'angad-k', 'committer_name': 'Angad Kambli', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 22, 18, 27, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '74ed9494d95221c01662cdf0722305b63f622ff1', 'committer_username': 'angad-k', 'committer_name': 'Angad Kambli', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 22, 18, 27, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ef14e2a1bcf14920010e1ffbf13d0f24d255a8fa', 'committer_username': 'angad-k', 'committer_name': 'Angad Kambli', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 22, 18, 27, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4de2a1f3a53622f4b2f1ce88fba2005ae6c3ee0c', 'committer_username': 'angad-k', 'committer_name': 'Angad Kambli', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 22, 18, 27, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5e586bf798824f41e8f9cbd71aab1cf2773bb34a', 'committer_username': 'angad-k', 'committer_name': 'Angad Kambli', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 22, 18, 27, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dc537864250947d64e5e5dd3296e97448e1b1025', 'committer_username': 'angad-k', 'committer_name': 'Angad Kambli', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 22, 18, 27, 14, tzinfo=datetime.timezone.utc)}]",Angad Kambli,54415525,,User,,38,,56,68
706093382,Backport pseudolocalization to 3.x,"(cherry picked from commit e79dde1cbb0e9a97c17bb5d535809efbcee1d965)

<!--
Pull requests should always be made for the `master` branch first, as that's
where development happens and the source of all future stable release branches.

Relevant fixes are cherry-picked for stable branches as needed.

Do not create a pull request for stable branches unless the change is already
available in the `master` branch and it cannot be easily cherry-picked.
Alternatively, if the change is only relevant for that branch (e.g. rendering
fixes for the 3.2 branch).
-->
Backport of pseudolocalization to 3.x. See #49361",False,51404,https://api.github.com/repos/godotengine/godot/pulls/51404,https://github.com/godotengine/godot/pull/51404,open,298,5,5,1,5,0,2,0,"[{'name': 'enhancement'}, {'name': 'topic:core'}]",2021-08-08 19:18:26+00:00,,0.0,,[],"[{'commit_sha': '0951049e4af0be61edb382a3df105621efd0e2b8', 'committer_username': 'angad-k', 'committer_name': 'Angad Kambli', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 22, 18, 27, 14, tzinfo=datetime.timezone.utc)}]",Angad Kambli,54415525,,User,,38,,56,68
698743790,Add pseudolocalization tutorial,"<!--
**Note:** Pull Requests should be made against the `master` by default.

Only make Pull Requests against other branches (e.g. `2.1`) if your changes only apply to that specific version of Godot.

The type of content accepted into the documentation is explained here: https://docs.godotengine.org/en/latest/community/contributing/content_guidelines.html

-->
Tutorial PR for the [pseudolocalization feature I'm adding to Godot as part of GSoC](https://github.com/godotengine/godot/pull/49361).",True,5119,https://api.github.com/repos/godotengine/godot-docs/pulls/5119,https://github.com/godotengine/godot-docs/pull/5119,closed,86,0,3,6,10,15,2,0,"[{'name': 'enhancement'}, {'name': 'area:manual'}]",2021-07-28 14:24:44+00:00,2023-02-23 23:23:58+00:00,49712354.0,"575 days, 8:59:14","[{'comment_id': 678488483, 'comment_body': ""```suggestion\r\nWhen creating a game, the process of localization usually starts when development\r\nhas finished. This means that translations aren't available during development\r\nfor testing whether the project is internationalized properly.\r\n\r\nGodot offers pseudolocalization as a way to test how robust the project is\r\nwhen it comes to locale changes. Pseudolocalization simulates changes that\r\nmight take place during localization. This way, any issues regarding\r\ninternationalization can be recognized early on during development.\r\n```"", 'comment_created': datetime.datetime(2021, 7, 28, 16, 56, 33, tzinfo=datetime.timezone.utc), 'commenter': 'Calinou', 'type': 'User'}, {'comment_id': 678489123, 'comment_body': ""```suggestion\r\n.. note:: The official demo for pseudolocalization can be used to play around with \r\n          the various properties and observe their effects. You can\r\n          `download it from this GitHub repository <https://github.com/angad-k/Pseudolocalization-Demo>`_.\r\n```\r\n\r\nPS: It's not urgent, but consider opening a pull request against the `4.0-dev` branch of https://github.com/godotengine/godot-demo-projects to submit the demo there."", 'comment_created': datetime.datetime(2021, 7, 28, 16, 57, 24, tzinfo=datetime.timezone.utc), 'commenter': 'Calinou', 'type': 'User'}, {'comment_id': 678489676, 'comment_body': '```suggestion\r\nPseudolocalization in Godot can be set up according to the specific use case of the \r\nproject. Here are the pseudolocalization properties that can be configured through \r\nproject settings:\r\n```', 'comment_created': datetime.datetime(2021, 7, 28, 16, 58, 12, tzinfo=datetime.timezone.utc), 'commenter': 'Calinou', 'type': 'User'}, {'comment_id': 678491346, 'comment_body': '```suggestion\r\n- ``replace_with_accents``: Replaces all characters in the string with their accented \r\n   variants. *""The quick brown fox jumped over the lazy dog""* will be converted to \r\n   *""Ŧh̀é q́üíćḱ ḅŕôŵή f́ôx́ ǰüm̀ṕéd́ ôṽéŕ ŧh̀é łáźý d́ôǵ""* when this setting is enabled.\r\n   This can be used to spot untranslated strings that won\'t have accents,\r\n   but is also useful to check for missing glyphs in the font(s) used by the project.\r\n- ``double_vowels``: Doubles all the vowels in the string. It is a good approximation\r\n   to simulate expansion of text during localization.\r\n   This can be used to check for text that would overflow its container\r\n   (such as buttons).\r\n- ``fake_bidi``: Fake bidirectional text (simulates right-to-left text). This is useful to\r\n   simulate right-to-left writing systems to check for potential layout issues that would occur in languages using right-to-left scripts.\r\n- ``override``: Replaces all the characters in the string with an asterisk (``*``). This is useful for \r\n   quickly finding text that isn\'t being localized.\r\n- ``expansion_ratio``: Can be used in cases where doubling the vowels isn\'t a sufficient \r\n   approximation. This setting pads the string with underscores (``_``) and expands it by the given ratio.\r\n   An expansion ratio of ``0.3`` is sufficient for most practical cases; it will increase \r\n   the length of the string by 30%.\r\n- ``prefix`` and ``suffix``: These properties can be used to specify a prefix and suffix to wrap\r\n   the text in.\r\n- ``skip_placeholders``: Skips placeholders for string formatting like ``%s`` and ``%f``. \r\n   This is useful to identify places where more arguments are required for the formatted\r\n   string to display correctly.\r\n```', 'comment_created': datetime.datetime(2021, 7, 28, 17, 0, 24, tzinfo=datetime.timezone.utc), 'commenter': 'Calinou', 'type': 'User'}, {'comment_id': 678493721, 'comment_body': 'Use shorthand syntax for code blocks, and only add 1 newline at the end of file:\r\n\r\n```suggestion\r\nThe following code snippet shall turn on ``replace_with_accents`` and ``double_vowels`` properties\r\nand then call ``reload_pseudolocalization()`` for the changes to get reflected::\r\n\r\n    ProjectSettings.set(""internationalization/pseudolocalization/replace_with_accents"", true)\r\n    ProjectSettings.set(""internationalization/pseudolocalization/double_vowels"", true)\r\n\tTranslationServer.reload_pseudolocalization()\r\n\r\n```', 'comment_created': datetime.datetime(2021, 7, 28, 17, 3, 45, tzinfo=datetime.timezone.utc), 'commenter': 'Calinou', 'type': 'User'}, {'comment_id': 679769352, 'comment_body': 'Should I also submit the demo on the asset library?', 'comment_created': datetime.datetime(2021, 7, 30, 9, 2, 24, tzinfo=datetime.timezone.utc), 'commenter': 'angad-k', 'type': 'User'}, {'comment_id': 1087691891, 'comment_body': 'Pseudolocalization settings are not marked as basic, so the Advanced toggle must be used to see them:\r\n\r\n```suggestion\r\nEnabling pseudolocalization and the configurations related to it is as simple as\r\ntoggling a checkbox in the project settings. These settings can be found in\r\n**Project → Project Settings → General → Internationalization → Pseudolocalization**\r\nafter enabling the **Advanced** toggle in the project settings dialog:\r\n```', 'comment_created': datetime.datetime(2023, 1, 26, 11, 1, 7, tzinfo=datetime.timezone.utc), 'commenter': 'Calinou', 'type': 'User'}, {'comment_id': 1087692391, 'comment_body': 'Add a link reference (required for the above suggestion). Also, use ""runtime"" instead of ""run-time"" for consistency with the rest of the documentation:\r\n\r\n```suggestion\r\n.. _doc_pseudolocalization_runtime:\r\n\r\nConfiguring pseudolocalization at runtime\r\n-----------------------------------------\r\n```', 'comment_created': datetime.datetime(2023, 1, 26, 11, 1, 31, tzinfo=datetime.timezone.utc), 'commenter': 'Calinou', 'type': 'User'}, {'comment_id': 1087693162, 'comment_body': 'Link to the relevant section directly (requires the below suggestion to also be applied):\r\n\r\n```suggestion\r\nPseudolocalization can also be :ref:`toggled at runtime from a script <doc_pseudolocalization_runtime>`.\r\n```', 'comment_created': datetime.datetime(2023, 1, 26, 11, 2, 9, tzinfo=datetime.timezone.utc), 'commenter': 'Calinou', 'type': 'User'}, {'comment_id': 1087693522, 'comment_body': 'Use ""runtime"" instead of ""run-time"" for consistency with the rest of the documentation:\r\n\r\n```suggestion\r\nPseudolocalization can be toggled at runtime using the\r\n:ref:`pseudolocalization_enabled<class_TranslationServer_property_pseudolocalization_enabled>` property\r\nin TranslationServer.\r\nHowever, if runtime configuration of pseudolocalization properties is required, \r\n```', 'comment_created': datetime.datetime(2023, 1, 26, 11, 2, 27, tzinfo=datetime.timezone.utc), 'commenter': 'Calinou', 'type': 'User'}, {'comment_id': 1087697942, 'comment_body': 'Use WebP screenshot (see the ""changes requested"" review):\r\n\r\n```suggestion\r\n.. image:: img/pseudolocalization_settings.webp\r\n```', 'comment_created': datetime.datetime(2023, 1, 26, 11, 5, 40, tzinfo=datetime.timezone.utc), 'commenter': 'Calinou', 'type': 'User'}, {'comment_id': 1116310187, 'comment_body': '```suggestion\r\n:ref:`ProjectSettings.set_setting(property, value) <class_ProjectSettings_method_set_setting>`\r\n```', 'comment_created': datetime.datetime(2023, 2, 23, 22, 21, 39, tzinfo=datetime.timezone.utc), 'commenter': 'Calinou', 'type': 'User'}, {'comment_id': 1116310935, 'comment_body': '```suggestion\r\n    ProjectSettings.set_setting(""internationalization/pseudolocalization/replace_with_accents"", true)\r\n    ProjectSettings.set_setting(""internationalization/pseudolocalization/double_vowels"", true)\r\n```', 'comment_created': datetime.datetime(2023, 2, 23, 22, 22, 36, tzinfo=datetime.timezone.utc), 'commenter': 'Calinou', 'type': 'User'}, {'comment_id': 1116311789, 'comment_body': '```suggestion\r\n- ``replace_with_accents``: Replaces all characters in the string with their accented\r\n  variants. *""The quick brown fox jumped over the lazy dog""* will be converted to\r\n  *""Ŧh̀é q́üíćḱ ḅŕôŵή f́ôx́ ǰüm̀ṕéd́ ôṽéŕ ŧh̀é łáźý d́ôǵ""* when this setting is enabled.\r\n  This can be used to spot untranslated strings that won\'t have accents,\r\n  but is also useful to check for missing glyphs in the font(s) used by the project.\r\n- ``double_vowels``: Doubles all the vowels in the string. It is a good approximation\r\n  to simulate expansion of text during localization.\r\n  This can be used to check for text that would overflow its container\r\n  (such as buttons).\r\n- ``fake_bidi``: Fake bidirectional text (simulates right-to-left text). This is useful to\r\n  simulate right-to-left writing systems to check for potential layout issues that would occur in languages using right-to-left scripts.\r\n- ``override``: Replaces all the characters in the string with an asterisk (``*``). This is useful for\r\n  quickly finding text that isn\'t being localized.\r\n- ``expansion_ratio``: Can be used in cases where doubling the vowels isn\'t a sufficient\r\n  approximation. This setting pads the string with underscores (``_``) and expands it by the given ratio.\r\n  An expansion ratio of ``0.3`` is sufficient for most practical cases; it will increase\r\n  the length of the string by 30%.\r\n- ``prefix`` and ``suffix``: These properties can be used to specify a prefix and suffix to wrap\r\n  the text in.\r\n- ``skip_placeholders``: Skips placeholders for string formatting like ``%s`` and ``%f``.\r\n  This is useful to identify places where more arguments are required for the formatted\r\n  string to display correctly.\r\n```', 'comment_created': datetime.datetime(2023, 2, 23, 22, 23, 46, tzinfo=datetime.timezone.utc), 'commenter': 'Calinou', 'type': 'User'}, {'comment_id': 1116312833, 'comment_body': '```suggestion\r\n.. note:: The official demo for pseudolocalization can be used to play around with \r\n          the various properties and observe their effects. You can\r\n          `download it from the godot-demo-projects GitHub repository <https://github.com/godotengine/godot-demo-projects/tree/4.0-dev/gui/pseudolocalization>`_.\r\n```', 'comment_created': datetime.datetime(2023, 2, 23, 22, 25, 13, tzinfo=datetime.timezone.utc), 'commenter': 'Calinou', 'type': 'User'}]","[{'commit_sha': 'faa505d9a7b1f6e784949b697f1c95e47e39ccbc', 'committer_username': 'angad-k', 'committer_name': 'Angad Kambli', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 22, 18, 27, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '68121fa4374d40d038f7fc70add6aee59e44e8f9', 'committer_username': 'angad-k', 'committer_name': 'Angad Kambli', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 22, 18, 27, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '394dca82cfedb627b7d14c067be62d7f3e00d66f', 'committer_username': 'Calinou', 'committer_name': 'Hugo Locurcio', 'committer_email': 'hugo.locurcio@hugo.pro', 'commit_date': datetime.datetime(2010, 1, 11, 14, 9, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '42692958066f7902ee246649f33aa7263a6011e6', 'committer_username': 'Calinou', 'committer_name': 'Hugo Locurcio', 'committer_email': 'hugo.locurcio@hugo.pro', 'commit_date': datetime.datetime(2010, 1, 11, 14, 9, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b9c425ac12b379adc2f10c3430d89f7198938b64', 'committer_username': 'Calinou', 'committer_name': 'Hugo Locurcio', 'committer_email': 'hugo.locurcio@hugo.pro', 'commit_date': datetime.datetime(2010, 1, 11, 14, 9, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6dd175d6eda39e7c36f813bc71e20266810e9b32', 'committer_username': 'Calinou', 'committer_name': 'Hugo Locurcio', 'committer_email': 'hugo.locurcio@hugo.pro', 'commit_date': datetime.datetime(2010, 1, 11, 14, 9, 38, tzinfo=datetime.timezone.utc)}]",Angad Kambli,54415525,,User,,38,,56,68
700143235,Add pseudolocalization demo,"<!--
Only submit a pull request if all of the following conditions are met:

* It must work with the latest stable Godot version. Do not submit a
  pull request if it only works with alpha/beta builds.

* It must follow all of the Godot style guides, including the GDScript
  style guide and the C# style guide.

* The demo should not be overcomplicated. Simplicity is usually preferred.

* If you are submitting a new demo, please ensure that it includes a
  README file similar to the other demos.

* If you are submitting a copy of a demo translated to C# etc:

    * Please ensure that there is a good reason to have this demo translated.
      We don't want to have multiple copies of every single project.

    * Please ensure that the code mirrors the original closely.

    * In the project.godot file and in the README, include ""with C#"" etc in
      the title, and also include a link to the original in the README.
-->
Demo project PR for the [pseudolocalization feature I'm adding to Godot as part of GSoC](https://github.com/godotengine/godot/pull/49361).",True,637,https://api.github.com/repos/godotengine/godot-demo-projects/pulls/637,https://github.com/godotengine/godot-demo-projects/pull/637,closed,486,0,9,1,3,0,1,0,[{'name': 'new demo'}],2021-07-30 09:23:12+00:00,2022-03-26 10:04:14+00:00,20652062.0,"239 days, 0:41:02",[],"[{'commit_sha': 'e44e3521b6d58bebca0295c69a433b4e63e91693', 'committer_username': 'angad-k', 'committer_name': 'Angad Kambli', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 22, 18, 27, 14, tzinfo=datetime.timezone.utc)}]",Angad Kambli,54415525,,User,,38,,56,68

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
15634981,godot,godotengine/godot,C++,19910,88036,1518,2960,66428,13279,14,2812,"[{'id': 706093382, 'number': 51404, 'closed': None, 'created': datetime.datetime(2021, 8, 8, 19, 18, 26, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 298, 'deletions': 5, 'state': 'open'}, {'id': 706052869, 'number': 51395, 'closed': datetime.datetime(2021, 8, 8, 15, 55, 31, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 8, 14, 28, 48, tzinfo=datetime.timezone.utc), 'time_taken': 5203.0, 'time_delta': '1:26:43', 'additions': 335, 'deletions': 5, 'state': 'closed'}, {'id': 662934988, 'number': 49361, 'closed': datetime.datetime(2021, 8, 8, 15, 0, 2, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 6, 12, 7, 59, tzinfo=datetime.timezone.utc), 'time_taken': 5453523.0, 'time_delta': '63 days, 2:52:03', 'additions': 335, 'deletions': 5, 'state': 'closed'}, {'id': 586866708, 'number': 46795, 'closed': datetime.datetime(2021, 3, 8, 16, 30, 14, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 3, 8, 15, 28, 29, tzinfo=datetime.timezone.utc), 'time_taken': 3705.0, 'time_delta': '1:01:45', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 585572777, 'number': 46689, 'closed': datetime.datetime(2023, 2, 16, 12, 7, 9, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 3, 5, 12, 43, 13, tzinfo=datetime.timezone.utc), 'time_taken': 61601036.0, 'time_delta': '712 days, 23:23:56', 'additions': 11, 'deletions': 0, 'state': 'closed'}, {'id': 581352441, 'number': 46473, 'closed': datetime.datetime(2021, 2, 27, 15, 44, 40, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 2, 27, 15, 28, 7, tzinfo=datetime.timezone.utc), 'time_taken': 993.0, 'time_delta': '0:16:33', 'additions': 24, 'deletions': 12, 'state': 'closed'}, {'id': 578393649, 'number': 46341, 'closed': datetime.datetime(2021, 2, 24, 9, 52, 45, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 2, 23, 12, 1, 32, tzinfo=datetime.timezone.utc), 'time_taken': 78673.0, 'time_delta': '21:51:13', 'additions': 220, 'deletions': 0, 'state': 'closed'}, {'id': 577090056, 'number': 46277, 'closed': datetime.datetime(2021, 2, 21, 15, 39, 54, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 2, 21, 10, 50, 10, tzinfo=datetime.timezone.utc), 'time_taken': 17384.0, 'time_delta': '4:49:44', 'additions': 229, 'deletions': 0, 'state': 'closed'}, {'id': 575853246, 'number': 46176, 'closed': None, 'created': datetime.datetime(2021, 2, 18, 17, 20, 2, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 15, 'deletions': 1, 'state': 'open'}, {'id': 575605808, 'number': 46166, 'closed': datetime.datetime(2021, 2, 18, 13, 58, 20, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 2, 18, 11, 22, 48, tzinfo=datetime.timezone.utc), 'time_taken': 9332.0, 'time_delta': '2:35:32', 'additions': 1, 'deletions': 0, 'state': 'closed'}, {'id': 575596333, 'number': 46165, 'closed': datetime.datetime(2021, 2, 18, 12, 0, 17, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 2, 18, 11, 8, 20, tzinfo=datetime.timezone.utc), 'time_taken': 3117.0, 'time_delta': '0:51:57', 'additions': 1, 'deletions': 0, 'state': 'closed'}, {'id': 575018389, 'number': 46125, 'closed': datetime.datetime(2023, 7, 8, 16, 24, 34, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 2, 17, 15, 50, 1, tzinfo=datetime.timezone.utc), 'time_taken': 75256473.0, 'time_delta': '871 days, 0:34:33', 'additions': 5, 'deletions': 3, 'state': 'closed'}, {'id': 574976230, 'number': 46124, 'closed': datetime.datetime(2021, 2, 17, 15, 15, 23, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 2, 17, 14, 53, 16, tzinfo=datetime.timezone.utc), 'time_taken': 1327.0, 'time_delta': '0:22:07', 'additions': 3, 'deletions': 0, 'state': 'closed'}, {'id': 574753537, 'number': 46113, 'closed': datetime.datetime(2021, 2, 17, 9, 55, 42, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 2, 17, 9, 0, 16, tzinfo=datetime.timezone.utc), 'time_taken': 3326.0, 'time_delta': '0:55:26', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 572938591, 'number': 45955, 'closed': datetime.datetime(2021, 2, 17, 12, 25, 31, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 2, 13, 13, 38, 23, tzinfo=datetime.timezone.utc), 'time_taken': 341228.0, 'time_delta': '3 days, 22:47:08', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 572768631, 'number': 45934, 'closed': datetime.datetime(2021, 2, 22, 11, 38, 48, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 2, 12, 20, 44, 28, tzinfo=datetime.timezone.utc), 'time_taken': 831260.0, 'time_delta': '9 days, 14:54:20', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 572724953, 'number': 45929, 'closed': datetime.datetime(2021, 2, 12, 20, 40, 42, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 2, 12, 19, 12, 23, tzinfo=datetime.timezone.utc), 'time_taken': 5299.0, 'time_delta': '1:28:19', 'additions': 179, 'deletions': 32, 'state': 'closed'}]"
47882383,godot-docs,godotengine/godot-docs,reStructuredText,3028,3696,116,1503,9211,961,28,132,"[{'id': 698743790, 'number': 5119, 'closed': datetime.datetime(2023, 2, 23, 23, 23, 58, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 28, 14, 24, 44, tzinfo=datetime.timezone.utc), 'time_taken': 49712354.0, 'time_delta': '575 days, 8:59:14', 'additions': 86, 'deletions': 0, 'state': 'closed'}]"
60349380,godot-demo-projects,godotengine/godot-demo-projects,GDScript,1566,5617,166,171,1384,75,13,31,"[{'id': 700143235, 'number': 637, 'closed': datetime.datetime(2022, 3, 26, 10, 4, 14, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 30, 9, 23, 12, tzinfo=datetime.timezone.utc), 'time_taken': 20652062.0, 'time_delta': '239 days, 0:41:02', 'additions': 486, 'deletions': 0, 'state': 'closed'}]"
