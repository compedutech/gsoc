pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
474822727,GSoC 2020 report: André Perez Maselco,Report describing the work done during Google Summer of Code 2020.,True,1058,https://api.github.com/repos/google/graphicsfuzz/pulls/1058,https://github.com/google/graphicsfuzz/pull/1058,closed,330,0,1,4,2,20,1,0,[{'name': 'cla: yes'}],2020-08-27 16:42:29+00:00,2020-08-28 17:22:20+00:00,88791.0,"1 day, 0:39:51","[{'comment_id': 478946735, 'comment_body': 'Perhaps you could link to this URL for spirv-fuzz:\r\n\r\nhttps://github.com/google/graphicsfuzz/blob/master/docs/finding-a-vulkan-driver-bug-using-spirv-fuzz.md', 'comment_created': datetime.datetime(2020, 8, 28, 8, 35, 59, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 478947512, 'comment_body': 'I would rephrase to say that shaders are written in some shading language, and that the OpenGL shading language and SPIR-V are two examples.  (There are more, e.g. HLSL and MetalSL.)', 'comment_created': datetime.datetime(2020, 8, 28, 8, 36, 50, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 478948361, 'comment_body': 'I think ""sentence"" is a typo.  And the use of the word ""variant"" comes out of the blue - you should explain what you mean by reference and variant.', 'comment_created': datetime.datetime(2020, 8, 28, 8, 37, 49, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 478949131, 'comment_body': '""was concerned to use"" -> ""involved using""', 'comment_created': datetime.datetime(2020, 8, 28, 8, 38, 32, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 478949985, 'comment_body': 'I suggest using the first person here: ""that I developed"".', 'comment_created': datetime.datetime(2020, 8, 28, 8, 39, 23, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 478950793, 'comment_body': 'You can of course do another PR after the deadline to add the link for this if you like.', 'comment_created': datetime.datetime(2020, 8, 28, 8, 40, 3, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 478953877, 'comment_body': 'It\'s nice that you have references!\r\n\r\nYou should refer to the references earlier in the text.  E.g. you could refer to [1] if you mention the glsl-fuzz tool that was the precursor to spirv-fuzz.  (You might then also want to mention our paper ""Automated testing for Graphics Shader Compilers"" that has Paul as an author.)  I suppose you wanted to reference Abel and Jiradet\'s reports because you were inspired by their structure; in that case perhaps you should do it in a short note at the end of the conclusion.\r\n\r\nIn general when writing it\'s not good style to have items in a bibliography if you don\'t refer to those items from the main document.', 'comment_created': datetime.datetime(2020, 8, 28, 8, 43, 8, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 478954130, 'comment_body': 'Somewhere in the report it would be nice if you could say a little more about this.', 'comment_created': datetime.datetime(2020, 8, 28, 8, 43, 29, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 479088656, 'comment_body': 'I agree with Ally. Also, I would remove the word ""halfway"". \r\n\r\n\r\nIdeas:\r\n\r\nIt applies semantics-preserving transformations to a *SPIR-V* module, that we call the _reference_ module, to obtain a modified _variant_ module.\r\n\r\n\r\nshould not change the behaviour of the code\r\n\r\nIn this way, the reference and variant modules can be run, and the outputs compared. The output is usually an image. If the images differ, this probably indicates a shader compiler a bug. \r\n\r\n\r\nThis approach, known as fuzzing, is part of technique called metamorphic testing.\r\n->\r\nThis is a specialised form of _fuzzing_ that uses a technique called _metamorphic testing_.\r\n\r\n\r\nConsider making _metamorphic testing_ a link to our paper or another paper, or use this approach to link to a reference at the end: https://stackoverflow.com/questions/26587527/cite-a-paper-using-github-markdown-syntax', 'comment_created': datetime.datetime(2020, 8, 28, 10, 25, 23, tzinfo=datetime.timezone.utc), 'commenter': 'paulthomson', 'type': 'User'}, {'comment_id': 479090698, 'comment_body': 'As discussed, you could start a new section here. At least make sure you say something like ""The following is an example of transformation that I implemented"" or ""that I proposed and implemented"" (if true). ', 'comment_created': datetime.datetime(2020, 8, 28, 10, 27, 8, tzinfo=datetime.timezone.utc), 'commenter': 'paulthomson', 'type': 'User'}, {'comment_id': 479093950, 'comment_body': 'I would also remove: ""to cover features of *SPIR-V* that are not yet very widely-used, but that will be in the future""\r\n\r\nI don\'t think this is true. We want to target features that are used and will continue to be used. You could say that you added transformations to cover instructions and patterns of SPIR-V that were not previously covered by existing spirv-fuzz transformations. ', 'comment_created': datetime.datetime(2020, 8, 28, 10, 29, 53, tzinfo=datetime.timezone.utc), 'commenter': 'paulthomson', 'type': 'User'}, {'comment_id': 479218716, 'comment_body': ""As a counter-argument to what @paulthomson said: we have been keen to cover parts of SPIR-V that are not widely-used by GLSL shaders that get converted to SPIR-V by glslang.  I think some of the transformations that we make lead to SPIR-V that you could never get from one of the standard front-ends, so in that sense it's SPIR-V that isn't widely-used.  You might want to discuss that a bit Andre."", 'comment_created': datetime.datetime(2020, 8, 28, 12, 17, 17, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 479281136, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 8, 28, 13, 19, 41, tzinfo=datetime.timezone.utc), 'commenter': 'andreperezmaselco', 'type': 'User'}, {'comment_id': 479285067, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 8, 28, 13, 23, 51, tzinfo=datetime.timezone.utc), 'commenter': 'andreperezmaselco', 'type': 'User'}, {'comment_id': 479294464, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 8, 28, 13, 34, 2, tzinfo=datetime.timezone.utc), 'commenter': 'andreperezmaselco', 'type': 'User'}, {'comment_id': 479301927, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 8, 28, 13, 42, tzinfo=datetime.timezone.utc), 'commenter': 'andreperezmaselco', 'type': 'User'}, {'comment_id': 479304524, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 8, 28, 13, 44, 44, tzinfo=datetime.timezone.utc), 'commenter': 'andreperezmaselco', 'type': 'User'}, {'comment_id': 479308420, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 8, 28, 13, 48, 48, tzinfo=datetime.timezone.utc), 'commenter': 'andreperezmaselco', 'type': 'User'}, {'comment_id': 479308682, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 8, 28, 13, 49, 7, tzinfo=datetime.timezone.utc), 'commenter': 'andreperezmaselco', 'type': 'User'}, {'comment_id': 479366319, 'comment_body': 'About the reports of Abel and Jiradet, I would like to leave them as references since I got in touch with the concepts I learned via their reports first.', 'comment_created': datetime.datetime(2020, 8, 28, 15, 7, 43, tzinfo=datetime.timezone.utc), 'commenter': 'andreperezmaselco', 'type': 'User'}]","[{'commit_sha': 'd507a552d08899e46cf902a8bf49095409724e63', 'committer_username': 'andreperezmaselco', 'committer_name': 'André', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 11, 11, 36, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fcc063277ef46d32181206743578e01635af5ae4', 'committer_username': 'andreperezmaselco', 'committer_name': 'André', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 11, 11, 36, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1e9c3ec647e42b99cf7433a1a6ec0fc00d88c735', 'committer_username': 'andreperezmaselco', 'committer_name': 'André', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 11, 11, 36, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0bfd2e47dcbba05d239bd9fe38fc584eba0005f1', 'committer_username': 'andreperezmaselco', 'committer_name': 'André', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 11, 11, 36, 55, tzinfo=datetime.timezone.utc)}]",André,20969363,,User,,4,,0,0
382804197,spirv-fuzz: Add swap commutable operands transformation,"In this PR, the classes that represent the swap commutable operands transformation and the fuzzer pass were implemented.",True,3205,https://api.github.com/repos/KhronosGroup/SPIRV-Tools/pulls/3205,https://github.com/KhronosGroup/SPIRV-Tools/pull/3205,closed,699,2,13,7,1,20,0,0,[],2020-03-03 08:12:28+00:00,2020-03-05 08:18:40+00:00,173172.0,"2 days, 0:06:12","[{'comment_id': 387113427, 'comment_body': 'It looks like you do not make use of this field, so I suggest removing it.', 'comment_created': datetime.datetime(2020, 3, 3, 15, 51, 22, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 387127624, 'comment_body': 'For any files that you contribute from scratch, please use:\r\n\r\n// Copyright (c) 2020 [your name]', 'comment_created': datetime.datetime(2020, 3, 3, 16, 11, 34, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 387127780, 'comment_body': 'Ditto.', 'comment_created': datetime.datetime(2020, 3, 3, 16, 11, 45, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 387129313, 'comment_body': 'This needs a bit more work: you should check that the instruction descriptor refers to an instruction that actually exists (find the instruction and check that the pointer you get is not null, returning false if so).\r\n\r\nAs a sanity check you could also assert that the located instruction has the same opcode as in the descriptor.', 'comment_created': datetime.datetime(2020, 3, 3, 16, 13, 52, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 387131975, 'comment_body': 'Would it work to use GetInOperand(0) and GetInOperand(1) here?  I prefer to work with the ""In"" versions of operand getter methods when manipulating the input operands of an instruction.\r\n\r\nEither way, please add a comment explaining that, by design, the instructions defined to be commutative have exactly two input parameters.', 'comment_created': datetime.datetime(2020, 3, 3, 16, 17, 38, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 387132614, 'comment_body': 'Rephrase to make it clear that the instructions are chosen at random (the swapping itself is, of course, deterministic).', 'comment_created': datetime.datetime(2020, 3, 3, 16, 18, 28, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 387133398, 'comment_body': 'Please look at the comments associated with other transformation classes and try to follow that style, in particular adding a description of the precondition I mention above about the described instruction having to exist.', 'comment_created': datetime.datetime(2020, 3, 3, 16, 19, 25, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 387134240, 'comment_body': 'How about `spvOpcodeIsCommutativeBinaryOperator` as a name?', 'comment_created': datetime.datetime(2020, 3, 3, 16, 20, 34, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 387134708, 'comment_body': 'I would expand the comment a bit to say that it returns true for exactly those opcodes that are binary operators where the order of the operands is irrelevant.', 'comment_created': datetime.datetime(2020, 3, 3, 16, 21, 14, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 387136623, 'comment_body': 'Please update this test with some cases that fail due to the described instruction not existing, including:\r\n\r\n- the base instruction id not existing\r\n- there being no instruction with the desired opcode after the base instruction id\r\n- there being an instruction with the desired opcode after the base instruction id, but the skip count associated with the instruction descriptor being so high.', 'comment_created': datetime.datetime(2020, 3, 3, 16, 23, 33, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 387198466, 'comment_body': 'The name `spvOpcodeIsCommutativeBinaryOperator` is better, since the operator is binary.', 'comment_created': datetime.datetime(2020, 3, 3, 18, 5, 46, tzinfo=datetime.timezone.utc), 'commenter': 'andreperezmaselco', 'type': 'User'}, {'comment_id': 387355384, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 3, 3, 23, 25, 11, tzinfo=datetime.timezone.utc), 'commenter': 'andreperezmaselco', 'type': 'User'}, {'comment_id': 387355428, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 3, 3, 23, 25, 18, tzinfo=datetime.timezone.utc), 'commenter': 'andreperezmaselco', 'type': 'User'}, {'comment_id': 387355448, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 3, 3, 23, 25, 22, tzinfo=datetime.timezone.utc), 'commenter': 'andreperezmaselco', 'type': 'User'}, {'comment_id': 387355504, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 3, 3, 23, 25, 28, tzinfo=datetime.timezone.utc), 'commenter': 'andreperezmaselco', 'type': 'User'}, {'comment_id': 387355545, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 3, 3, 23, 25, 36, tzinfo=datetime.timezone.utc), 'commenter': 'andreperezmaselco', 'type': 'User'}, {'comment_id': 387355593, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 3, 3, 23, 25, 44, tzinfo=datetime.timezone.utc), 'commenter': 'andreperezmaselco', 'type': 'User'}, {'comment_id': 387355615, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 3, 3, 23, 25, 49, tzinfo=datetime.timezone.utc), 'commenter': 'andreperezmaselco', 'type': 'User'}, {'comment_id': 387355696, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 3, 3, 23, 26, tzinfo=datetime.timezone.utc), 'commenter': 'andreperezmaselco', 'type': 'User'}, {'comment_id': 387355723, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 3, 3, 23, 26, 5, tzinfo=datetime.timezone.utc), 'commenter': 'andreperezmaselco', 'type': 'User'}]","[{'commit_sha': 'bf75d8618b91ea6a22741ff112d6c3e339a55c2e', 'committer_username': 'andreperezmaselco', 'committer_name': 'André', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 11, 11, 36, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6441b12f6b3a8c17b5d7869ec9fd240e4c057254', 'committer_username': 'andreperezmaselco', 'committer_name': 'André', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 11, 11, 36, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9d17e73a9862ed7d969cd9784eb579aececfe52e', 'committer_username': 'andreperezmaselco', 'committer_name': 'André', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 11, 11, 36, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': '531f0f5e003bdab4ce359d3bccc13af4bc2615e2', 'committer_username': 'andreperezmaselco', 'committer_name': 'André', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 11, 11, 36, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': '836aba7e76c6707275c0a291a66c587840fe2acd', 'committer_username': 'andreperezmaselco', 'committer_name': 'André', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 11, 11, 36, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': '16d151bd4ca4234b8b6012ca7a4f29d055cc032a', 'committer_username': 'andreperezmaselco', 'committer_name': 'André', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 11, 11, 36, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': '91ff551abf8a1f1cf5bd9df5f674fdc2380ea5bd', 'committer_username': 'andreperezmaselco', 'committer_name': 'André', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 11, 11, 36, 55, tzinfo=datetime.timezone.utc)}]",André,20969363,,User,,4,,0,0
384525988,spirv-fuzz: Add toggle access chain instruction transformation,"In this PR, the classes that represent the toggle access chain instruction transformation and fuzzer pass were implemented. This transformation toggles the instructions `OpAccessChain` and `OpInBoundsAccessChain` between them.",True,3211,https://api.github.com/repos/KhronosGroup/SPIRV-Tools/pulls/3211,https://github.com/KhronosGroup/SPIRV-Tools/pull/3211,closed,673,0,12,3,1,12,0,0,[],2020-03-05 22:10:30+00:00,2020-03-08 22:33:25+00:00,260575.0,"3 days, 0:22:55","[{'comment_id': 388837196, 'comment_body': 'Rather than doing this with probability 0.5, could you add a new ""GetChanceOf"" method to FuzzerContext?  See e.g. what FuzzerPassAdjustSelectionControls does.', 'comment_created': datetime.datetime(2020, 3, 6, 10, 52, 37, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 388838274, 'comment_body': 'Please use braces for if statements in this project.', 'comment_created': datetime.datetime(2020, 3, 6, 10, 54, 56, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 388838499, 'comment_body': 'Turn this into a single return statement.', 'comment_created': datetime.datetime(2020, 3, 6, 10, 55, 28, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 388839684, 'comment_body': 'As by construction the opcode should be SpvOpInBoundsAccessChain if it is not SpvOpAccessChain I would turn the ""else if"" into an ""else"", and then in the ""else"" block assert that the opcode is SpvOpInBoundsAccessChain (using the ""&& ..."" trick to associate a string with the assertion).', 'comment_created': datetime.datetime(2020, 3, 6, 10, 58, 1, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 388839820, 'comment_body': 'Please use braces for if...then...else.', 'comment_created': datetime.datetime(2020, 3, 6, 10, 58, 19, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 388840094, 'comment_body': 'indent ""a"" to that it lines up with the ""|"" on the previous line.', 'comment_created': datetime.datetime(2020, 3, 6, 10, 58, 54, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 388874945, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 3, 6, 12, 27, 2, tzinfo=datetime.timezone.utc), 'commenter': 'andreperezmaselco', 'type': 'User'}, {'comment_id': 388875014, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 3, 6, 12, 27, 11, tzinfo=datetime.timezone.utc), 'commenter': 'andreperezmaselco', 'type': 'User'}, {'comment_id': 388876763, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 3, 6, 12, 31, 32, tzinfo=datetime.timezone.utc), 'commenter': 'andreperezmaselco', 'type': 'User'}, {'comment_id': 388877579, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 3, 6, 12, 33, 42, tzinfo=datetime.timezone.utc), 'commenter': 'andreperezmaselco', 'type': 'User'}, {'comment_id': 388877962, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 3, 6, 12, 34, 35, tzinfo=datetime.timezone.utc), 'commenter': 'andreperezmaselco', 'type': 'User'}, {'comment_id': 388884125, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 3, 6, 12, 49, 4, tzinfo=datetime.timezone.utc), 'commenter': 'andreperezmaselco', 'type': 'User'}]","[{'commit_sha': '98710aeba57354930bf9b0949478f68253715079', 'committer_username': 'andreperezmaselco', 'committer_name': 'André', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 11, 11, 36, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8fec2b41d0543c3ff8d1cd111637fb526d97f52e', 'committer_username': 'andreperezmaselco', 'committer_name': 'André', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 11, 11, 36, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': '042a3ea9f5b238b1e19615c3d3697eec38a1e681', 'committer_username': 'andreperezmaselco', 'committer_name': 'André', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 11, 11, 36, 55, tzinfo=datetime.timezone.utc)}]",André,20969363,,User,,4,,0,0
415344556,Add adjust branch weights transformation,"In this PR, the classes that represent the adjust branch weights transformation and fuzzer pass were implemented. This transformation adjusts the branch weights of a `OpBranchConditional` instruction.",True,3336,https://api.github.com/repos/KhronosGroup/SPIRV-Tools/pulls/3336,https://github.com/KhronosGroup/SPIRV-Tools/pull/3336,closed,655,0,14,8,0,37,0,0,[],2020-05-08 17:31:00+00:00,2020-05-14 10:38:34+00:00,493654.0,"5 days, 17:07:34","[{'comment_id': 423708477, 'comment_body': 'Can you restore the original method and add another method suitable for this new transformation?\r\n\r\nI know that means having two functions with different names that are otherwise identical, but we are keen to separate different requests that are made to the FuzzerContext.  This means that in the future we could change how a random access chain index is supplied independently from how an integer related to branch probabilities is supplied.', 'comment_created': datetime.datetime(2020, 5, 12, 12, 54, 4, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 423709148, 'comment_body': 'Nit: get rid of these locals and just use GetIRContext() and GetFuzzerContext() whenever you need access to one or the other.', 'comment_created': datetime.datetime(2020, 5, 12, 12, 55, 7, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 423710494, 'comment_body': ""I would get rid of this condition, and set things up so that branch weights can be added if they were not originally present.\r\n\r\nI think this is important because we probably won't see many branch weights in existing SPIR-V, so it would be good to be able to add them if not present, as well as replace them if they are present."", 'comment_created': datetime.datetime(2020, 5, 12, 12, 57, 11, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 423781495, 'comment_body': ""Looking at the SPIR-V spec: branch weights don't need to sum to anything particular - it's fine to choose any pair of uint32_t values, so long as they are not both zero and their sum doesn't overflow.\r\n\r\nI suggest you add a method, GetRandomBranchWeights, to FuzzerContext, and have it return a std::pair<uint32_t>.\r\n\r\nI like the way you use INT32_MAX, not UIN32_MAX, to avoid overflow problems - please use a code comment to explain that."", 'comment_created': datetime.datetime(2020, 5, 12, 14, 31, 4, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 423782960, 'comment_body': 'As mentioned earlier, drop the requirement for all operands to be present (as we can add weights if they are missing).', 'comment_created': datetime.datetime(2020, 5, 12, 14, 32, 52, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 423783736, 'comment_body': 'Use UInt32Pair instead of a repeated field here.', 'comment_created': datetime.datetime(2020, 5, 12, 14, 33, 52, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 423784171, 'comment_body': 'This can go if you use UInt32Pair in the protobuf message.', 'comment_created': datetime.datetime(2020, 5, 12, 14, 34, 27, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 423784893, 'comment_body': ""Let's change this to *assert* that at least one is non-zero, as we don't want a transformation where they are both zero to ever get created.\r\n\r\nYou can use death tests in your tests to check that the assert fails if such transformations are created."", 'comment_created': datetime.datetime(2020, 5, 12, 14, 35, 23, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 423788157, 'comment_body': 'Again, this could become an assertion.', 'comment_created': datetime.datetime(2020, 5, 12, 14, 39, 44, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 423789598, 'comment_body': ""You could split this into two cases: the case where there are not existing branch weights (in which case you need to add two new input operands), and the case where there are existing branch weights (in which you need to change existing input operands as you are doing here).\r\n\r\nCan you please introduce constants in an an anonymous namespace at the top of this CPP file for the magic numbers 3, 4 and 5, with descriptive names?\r\n\r\n(I'm guilty of not always doing this in my code but should get more disciplined about it.)"", 'comment_created': datetime.datetime(2020, 5, 12, 14, 41, 37, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 423790190, 'comment_body': ""This is not a condition that's checked inside IsApplicable.  The comments on IsApplicable should really match the various if statements in its implementation."", 'comment_created': datetime.datetime(2020, 5, 12, 14, 42, 23, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 423791234, 'comment_body': 'Before each ASSERT_FALSE, write a brief comment to explain why IsApplicable is false.\r\n\r\nYou may need to change some of these asserts to death tests if they will now trigger assertion failures in IsApplicable.', 'comment_created': datetime.datetime(2020, 5, 12, 14, 43, 37, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 423797827, 'comment_body': 'I thought about it. But if they were not present, adding them will preserve the semantics?', 'comment_created': datetime.datetime(2020, 5, 12, 14, 51, 53, tzinfo=datetime.timezone.utc), 'commenter': 'andreperezmaselco', 'type': 'User'}, {'comment_id': 423802793, 'comment_body': 'Yes, I believe so.  The spec says ""branch weights are only hints"".  So while they may change the performance of the code they should not change what it computes.', 'comment_created': datetime.datetime(2020, 5, 12, 14, 58, 3, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 423825241, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 5, 12, 15, 26, 38, tzinfo=datetime.timezone.utc), 'commenter': 'andreperezmaselco', 'type': 'User'}, {'comment_id': 423825322, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 5, 12, 15, 26, 45, tzinfo=datetime.timezone.utc), 'commenter': 'andreperezmaselco', 'type': 'User'}, {'comment_id': 423826291, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 5, 12, 15, 28, 5, tzinfo=datetime.timezone.utc), 'commenter': 'andreperezmaselco', 'type': 'User'}, {'comment_id': 423827460, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 5, 12, 15, 29, 34, tzinfo=datetime.timezone.utc), 'commenter': 'andreperezmaselco', 'type': 'User'}, {'comment_id': 423849931, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 5, 12, 15, 59, 24, tzinfo=datetime.timezone.utc), 'commenter': 'andreperezmaselco', 'type': 'User'}, {'comment_id': 423850001, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 5, 12, 15, 59, 31, tzinfo=datetime.timezone.utc), 'commenter': 'andreperezmaselco', 'type': 'User'}, {'comment_id': 423945381, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 5, 12, 18, 28, 6, tzinfo=datetime.timezone.utc), 'commenter': 'andreperezmaselco', 'type': 'User'}, {'comment_id': 423952277, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 5, 12, 18, 40, 9, tzinfo=datetime.timezone.utc), 'commenter': 'andreperezmaselco', 'type': 'User'}, {'comment_id': 423952403, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 5, 12, 18, 40, 23, tzinfo=datetime.timezone.utc), 'commenter': 'andreperezmaselco', 'type': 'User'}, {'comment_id': 424414173, 'comment_body': 'Its up to you, but I (within reason) like to avoid lots of temporaries, so I\'d be tempted to get rid of ""transformation"" and do ""ApplyTransformation(TranfsormationAdjustBranchWeights(....))"" - I would possibly go further and get rid of the ""instruction_descriptor"" and ""branch_weights"" temporaries.\r\n\r\nThis really is a matter if taste and I know sometimes @paulthomson would rather I used more temporaries when he reviews my code :)', 'comment_created': datetime.datetime(2020, 5, 13, 12, 55, 52, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 424414611, 'comment_body': 'Rephrase so that you could read it aloud, e..g ""- At least one of |branch_weights| must be non-zero and ...""', 'comment_created': datetime.datetime(2020, 5, 13, 12, 56, 31, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 424414927, 'comment_body': 'OpBranchCondition*al*', 'comment_created': datetime.datetime(2020, 5, 13, 12, 57, 3, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 424419083, 'comment_body': ""Don't make this 'inline' - make it a normal method and put the implementation in the .cpp file.  (We can promote it to inline in due course if profiling suggests that it is a hotspot.)"", 'comment_created': datetime.datetime(2020, 5, 13, 13, 3, 9, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 424419513, 'comment_body': 'Once this is in the cpp file, declare a constant in the anonymous namespace at the top of the file to avoid using the magic number 5.  Give the constant a suitable name to indicate that it represents the number of operands of a branch with weights.', 'comment_created': datetime.datetime(2020, 5, 13, 13, 3, 49, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 424473553, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 5, 13, 14, 17, 5, tzinfo=datetime.timezone.utc), 'commenter': 'andreperezmaselco', 'type': 'User'}, {'comment_id': 424477615, 'comment_body': 'Good. Avoiding temporaries can save memory if the argument is not passed by reference.\r\nDone.', 'comment_created': datetime.datetime(2020, 5, 13, 14, 22, 27, tzinfo=datetime.timezone.utc), 'commenter': 'andreperezmaselco', 'type': 'User'}, {'comment_id': 424478310, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 5, 13, 14, 23, 23, tzinfo=datetime.timezone.utc), 'commenter': 'andreperezmaselco', 'type': 'User'}, {'comment_id': 424481258, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 5, 13, 14, 27, tzinfo=datetime.timezone.utc), 'commenter': 'andreperezmaselco', 'type': 'User'}, {'comment_id': 424519287, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 5, 13, 15, 15, 34, tzinfo=datetime.timezone.utc), 'commenter': 'andreperezmaselco', 'type': 'User'}, {'comment_id': 424569965, 'comment_body': 'Looks like you missed this one @andreperezmaselco ', 'comment_created': datetime.datetime(2020, 5, 13, 16, 25, 20, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 424571015, 'comment_body': 'This will require a couple of corresponding changes.', 'comment_created': datetime.datetime(2020, 5, 13, 16, 26, 53, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 424645114, 'comment_body': 'I recommend removing the ""."" character or escaping it. Same thing below.', 'comment_created': datetime.datetime(2020, 5, 13, 18, 27, 46, tzinfo=datetime.timezone.utc), 'commenter': 'paulthomson', 'type': 'User'}, {'comment_id': 424655668, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 5, 13, 18, 45, 35, tzinfo=datetime.timezone.utc), 'commenter': 'andreperezmaselco', 'type': 'User'}]","[{'commit_sha': '8a4b1643b80421b78247979a6b5b9b5da868d19e', 'committer_username': 'andreperezmaselco', 'committer_name': 'André', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 11, 11, 36, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': '07add9e1c4a71783e82cd840047fe773685c2f7b', 'committer_username': 'andreperezmaselco', 'committer_name': 'André', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 11, 11, 36, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bc287cb2d12d2910edbf2a7598abff516bc2a593', 'committer_username': 'andreperezmaselco', 'committer_name': 'André', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 11, 11, 36, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2f1c56cdbfd7acca7105a68c326d89e86b9b646b', 'committer_username': 'andreperezmaselco', 'committer_name': 'André', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 11, 11, 36, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd5658502dcbf3ac879c67e2eb504a6318855fa9e', 'committer_username': 'andreperezmaselco', 'committer_name': 'André', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 11, 11, 36, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f41100edca80838439c90830fa62941c7917076e', 'committer_username': 'andreperezmaselco', 'committer_name': 'André', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 11, 11, 36, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': '82058564fdbb6e1237d3e5042c7f935e1c30626f', 'committer_username': 'andreperezmaselco', 'committer_name': 'André', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 11, 11, 36, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5ce240abd0f2ef93711a823d839d30596a985b1e', 'committer_username': 'andreperezmaselco', 'committer_name': 'André', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 11, 11, 36, 55, tzinfo=datetime.timezone.utc)}]",André,20969363,,User,,4,,0,0
420254779,spirv-fuzz: Add push id through variable transformation,Fixes #3192.,True,3359,https://api.github.com/repos/KhronosGroup/SPIRV-Tools/pulls/3359,https://github.com/KhronosGroup/SPIRV-Tools/pull/3359,closed,864,0,12,8,0,50,0,0,[],2020-05-19 17:15:54+00:00,2020-05-29 15:43:39+00:00,858465.0,"9 days, 22:27:45","[{'comment_id': 428626851, 'comment_body': 'This is a great catch!  As it seems irrelevant to your current PR perhaps you could do a tiny PR to fix it (you could incorporate the analogous fix for stores into the same PR).', 'comment_created': datetime.datetime(2020, 5, 21, 12, 40, 54, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 428627315, 'comment_body': 'See previous comment about doing these in a separate PR.', 'comment_created': datetime.datetime(2020, 5, 21, 12, 42, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 428628014, 'comment_body': 'I think I advised you previously that this transformation should assume that a variable already exists, hence you have used this field of the protobuf message to hold the id of that variable.\r\n\r\nHowever, on second thoughts, I think this we should not do this, for the following reason:\r\n\r\n- At fuzz time, your fuzzer pass would add the variable and then add the ""push id through variable"" transformation\r\n\r\n- At shrink time, it\'s possible that the transformation that adds the variable could get removed, but some other transformation might get changed so that it ends up adding a variable with the same id as the variable on which the ""push id through"" transformation depends.  The ""push id through"" transformation might then apply, and spoil the value of that variable.\r\n\r\nWe should stick to the rule that the applicability of a transformation should depend solely on the current state of the SPIR-V module and the fact manager.  It should not depend on the history of transformations that were applied.\r\n\r\nCould you rework this transformation so that it accepts:\r\n\r\n- A fresh id for the new variable (it can be this variable_id field)\r\n- A uint32 indicating the storage class for the new variable (it should be Private or Function)\r\n\r\nThe transformation should then create the variable in its Apply method.\r\n\r\nApologies for initially misleading you here!', 'comment_created': datetime.datetime(2020, 5, 21, 12, 43, 30, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 428763351, 'comment_body': 'belongs -> belong', 'comment_created': datetime.datetime(2020, 5, 21, 16, 21, 23, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 428764600, 'comment_body': ""@paulthomson What do you think of this?  We haven't done this before - used Apply methods from other transformations in a larger transformation."", 'comment_created': datetime.datetime(2020, 5, 21, 16, 23, 34, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 428767294, 'comment_body': ""I am unsure about making these global.  I'm not sure how gtest works but I would not be surprised if the state of globals persists between individual tests.  We do not want to require the tests to run in a particular order.\r\n\r\nI suggest you follow the style used by other tests, where each test creates its own IR context locally.  Alternatively you could look at other facilities that gtest might offer, such as test fixtures - they could be useful if you want to reduce redundancy between tests.\r\n\r\nThat said, I quite like each test to be pretty simple and self-contained, even if it ends up being a bit long.\r\n\r\n@paulthomson your feedback here would be great."", 'comment_created': datetime.datetime(2020, 5, 21, 16, 28, 9, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 428823838, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 5, 21, 18, 8, 3, tzinfo=datetime.timezone.utc), 'commenter': 'andreperezmaselco', 'type': 'User'}, {'comment_id': 428823887, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 5, 21, 18, 8, 8, tzinfo=datetime.timezone.utc), 'commenter': 'andreperezmaselco', 'type': 'User'}, {'comment_id': 430413411, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 5, 26, 13, 30, 56, tzinfo=datetime.timezone.utc), 'commenter': 'andreperezmaselco', 'type': 'User'}, {'comment_id': 430630026, 'comment_body': 'I agree with Ally here.', 'comment_created': datetime.datetime(2020, 5, 26, 18, 45, 6, tzinfo=datetime.timezone.utc), 'commenter': 'paulthomson', 'type': 'User'}, {'comment_id': 430631606, 'comment_body': 'This seems OK. Perhaps it is slightly confusing, but a comment will make it clear that the transformations are not being added to the list of transformations. Apply might update the fact manager, but that is OK too I think. ', 'comment_created': datetime.datetime(2020, 5, 26, 18, 47, 55, tzinfo=datetime.timezone.utc), 'commenter': 'paulthomson', 'type': 'User'}, {'comment_id': 430667219, 'comment_body': 'But actually, in this particular case, I think it is clearer to just add the code that adds the load and store instructions because there is not much code. ', 'comment_created': datetime.datetime(2020, 5, 26, 19, 47, 56, tzinfo=datetime.timezone.utc), 'commenter': 'paulthomson', 'type': 'User'}, {'comment_id': 431430749, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 5, 27, 20, 44, 52, tzinfo=datetime.timezone.utc), 'commenter': 'andreperezmaselco', 'type': 'User'}, {'comment_id': 431430809, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 5, 27, 20, 44, 57, tzinfo=datetime.timezone.utc), 'commenter': 'andreperezmaselco', 'type': 'User'}, {'comment_id': 431430900, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 5, 27, 20, 45, 6, tzinfo=datetime.timezone.utc), 'commenter': 'andreperezmaselco', 'type': 'User'}, {'comment_id': 431845931, 'comment_body': '-> The block containing the instruction we are going to insert before must be reachable\r\n', 'comment_created': datetime.datetime(2020, 5, 28, 13, 45, 14, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 431847341, 'comment_body': 'FYI, I would personally write this as:\r\n\r\n```\r\nauto variable_storage_class = GetFuzzerContext()->ChooseEven() ? SpvStorageClassPrivate : SpvStorageClassFunction;\r\n```\r\n\r\nNot saying that this is required.', 'comment_created': datetime.datetime(2020, 5, 28, 13, 47, 2, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 431848204, 'comment_body': 'I would say ""Looks for ids that we might wish to consider pushing through a variable.""', 'comment_created': datetime.datetime(2020, 5, 28, 13, 48, 6, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 431850255, 'comment_body': 'This comment describes how the pass is implemented.  That\'s OK, but something higher level that explains the overall effect of the pass would be better, e.g.:\r\n\r\n""Adds instructions to the module that store existing ids into fresh variables and immediately load from said variables into new ids, thus creating synonyms between the existing and fresh ids.""', 'comment_created': datetime.datetime(2020, 5, 28, 13, 50, 45, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 431851917, 'comment_body': 'I believe you should be able to remove all these.  In general try to avoid unused includes.', 'comment_created': datetime.datetime(2020, 5, 28, 13, 52, 55, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 431853856, 'comment_body': 'I suggest we get rid of this.\r\n\r\nIf value_id has type %t then we know we need a variable of type ""OpTypePointer %t variable_storage_class"".\r\n\r\nThis in ""IsApplicable"" we can require that such a type exists, and in ""Apply"" we can use the type.  There is no need to pass an id with the right type.  The fuzzer pass should find-or-create the type (so that it *will* exist) - which is what you already do.  But it shouldn\'t then pass in the type id.', 'comment_created': datetime.datetime(2020, 5, 28, 13, 55, 30, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 431854566, 'comment_body': ""I don't actually recall why this check is needed.  But if you're sure it is then fine.  Perhaps it is to do with dominance (and the fact that dominance is weird in unreachable code)."", 'comment_created': datetime.datetime(2020, 5, 28, 13, 56, 22, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 431855279, 'comment_body': ""As noted in my comment on the protobuf file, I would change this to query the type manager to see whether the required pointer type is present.\r\n\r\nYou could write a function that returns the id of the required type, or 0 if it doesn't exist.  You could call it here to check whether the type exists, and again in Apply to get the type."", 'comment_created': datetime.datetime(2020, 5, 28, 13, 57, 15, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 431855422, 'comment_body': 'This will become unnecessary.', 'comment_created': datetime.datetime(2020, 5, 28, 13, 57, 26, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 431856021, 'comment_body': 'This will also become unnecessary.', 'comment_created': datetime.datetime(2020, 5, 28, 13, 58, 17, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 431856689, 'comment_body': 'I suggest that you assert it is one of these.  We should never create this transformation with a different storage class, so we actually want to regard failure of this condition as a bug in the fuzzer / replayer / shrinker.', 'comment_created': datetime.datetime(2020, 5, 28, 13, 59, 12, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 431857476, 'comment_body': ""Instead of using pointer_type_id, you'll need to use the helper function I've suggested above to get that id."", 'comment_created': datetime.datetime(2020, 5, 28, 14, 0, 11, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 431858130, 'comment_body': 'Nit: I would use fewer lines and more of your 80-character width.  (Not important though.)', 'comment_created': datetime.datetime(2020, 5, 28, 14, 1, 5, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 431859001, 'comment_body': 'You may need to change some of your test assertions to death tests, of course.', 'comment_created': datetime.datetime(2020, 5, 28, 14, 2, 22, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 431878047, 'comment_body': ""You're right.\r\nDone."", 'comment_created': datetime.datetime(2020, 5, 28, 14, 28, 18, tzinfo=datetime.timezone.utc), 'commenter': 'andreperezmaselco', 'type': 'User'}, {'comment_id': 431878854, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 5, 28, 14, 29, 6, tzinfo=datetime.timezone.utc), 'commenter': 'andreperezmaselco', 'type': 'User'}, {'comment_id': 431879534, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 5, 28, 14, 29, 44, tzinfo=datetime.timezone.utc), 'commenter': 'andreperezmaselco', 'type': 'User'}, {'comment_id': 431880976, 'comment_body': ""You're right.\r\nI forgot to remove it.\r\nDone."", 'comment_created': datetime.datetime(2020, 5, 28, 14, 31, 5, tzinfo=datetime.timezone.utc), 'commenter': 'andreperezmaselco', 'type': 'User'}, {'comment_id': 431882925, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 5, 28, 14, 33, 7, tzinfo=datetime.timezone.utc), 'commenter': 'andreperezmaselco', 'type': 'User'}, {'comment_id': 431884063, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 5, 28, 14, 34, 15, tzinfo=datetime.timezone.utc), 'commenter': 'andreperezmaselco', 'type': 'User'}, {'comment_id': 431884464, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 5, 28, 14, 34, 38, tzinfo=datetime.timezone.utc), 'commenter': 'andreperezmaselco', 'type': 'User'}, {'comment_id': 431891166, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 5, 28, 14, 41, 34, tzinfo=datetime.timezone.utc), 'commenter': 'andreperezmaselco', 'type': 'User'}, {'comment_id': 431892561, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 5, 28, 14, 43, 26, tzinfo=datetime.timezone.utc), 'commenter': 'andreperezmaselco', 'type': 'User'}, {'comment_id': 432155953, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 5, 28, 22, 19, 54, tzinfo=datetime.timezone.utc), 'commenter': 'andreperezmaselco', 'type': 'User'}, {'comment_id': 432422843, 'comment_body': ""I'm gonna resolve this, assuming that it is required."", 'comment_created': datetime.datetime(2020, 5, 29, 11, 29, 16, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 432423470, 'comment_body': 'This is not right: we are in IsApplicable here.  If the required pointer type is not available we should return false.\r\n\r\nPlease make sure there is a test for this case - a test where the transformation is only inapplicable because the pointer type is not present.  There should be no assertion failure - just a return of false.', 'comment_created': datetime.datetime(2020, 5, 29, 11, 30, 42, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 432423783, 'comment_body': 'In contrast it is correct to use assertions here because - no matter what the shrinker does - we should never see a different storage class being passed as `variable_storage_class`.', 'comment_created': datetime.datetime(2020, 5, 29, 11, 31, 26, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 432424337, 'comment_body': 'It would be good to assert that pointer_type_id is non-zero here - basically the assert you have in IsApplicable that I complain about above :)', 'comment_created': datetime.datetime(2020, 5, 29, 11, 32, 39, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 432424973, 'comment_body': 'I did not scrutinise the tests carefully, but in your tests please make sure you have covered all the cases where IsApplicable can return false.', 'comment_created': datetime.datetime(2020, 5, 29, 11, 34, 4, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 432454959, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 5, 29, 12, 39, 30, tzinfo=datetime.timezone.utc), 'commenter': 'andreperezmaselco', 'type': 'User'}, {'comment_id': 432479732, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 5, 29, 13, 24, 22, tzinfo=datetime.timezone.utc), 'commenter': 'andreperezmaselco', 'type': 'User'}, {'comment_id': 432479863, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 5, 29, 13, 24, 34, tzinfo=datetime.timezone.utc), 'commenter': 'andreperezmaselco', 'type': 'User'}, {'comment_id': 432479998, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 5, 29, 13, 24, 48, tzinfo=datetime.timezone.utc), 'commenter': 'andreperezmaselco', 'type': 'User'}, {'comment_id': 432490743, 'comment_body': 'Nit: I like the way you have a comment before each condition - I would take the message from the assertion you removed and use it as a comment:\r\n\r\n// The required pointer type must be available.', 'comment_created': datetime.datetime(2020, 5, 29, 13, 42, 45, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 432503009, 'comment_body': ""My bad - I don't know how but I didn't see the comment (the diff must have confused me)."", 'comment_created': datetime.datetime(2020, 5, 29, 14, 2, 21, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}]","[{'commit_sha': '7dffb083141dcc5f3b297c3fa5162dead8371c91', 'committer_username': 'andreperezmaselco', 'committer_name': 'André', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 11, 11, 36, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5e0c53e7cc29b972576776ec358a285c9e093bb5', 'committer_username': 'andreperezmaselco', 'committer_name': 'André', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 11, 11, 36, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cbf711a112cb0cb2add28cc5cb2c21300f66ebc4', 'committer_username': 'andreperezmaselco', 'committer_name': 'André', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 11, 11, 36, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': '835b0def1cb3ea7d4e9897748fbf153b429b956f', 'committer_username': 'andreperezmaselco', 'committer_name': 'André', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 11, 11, 36, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4f7beb77facb3e9a1bee7e3281f8014a86b1d7df', 'committer_username': 'andreperezmaselco', 'committer_name': 'André', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 11, 11, 36, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b215c773a5254262c15188816ccaa64166aa935c', 'committer_username': 'andreperezmaselco', 'committer_name': 'André', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 11, 11, 36, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5bbf2273f79c29f2bd7d3ecc7c08e621b26d98b8', 'committer_username': 'andreperezmaselco', 'committer_name': 'André', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 11, 11, 36, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ede2f3303bda1b4cd74f44e96b553a9b830a44a9', 'committer_username': 'andreperezmaselco', 'committer_name': 'André', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 11, 11, 36, 55, tzinfo=datetime.timezone.utc)}]",André,20969363,,User,,4,,0,0
428563618,spirv-fuzz: Add replace linear algebra instruction transformation,"This PR implements a transformation that replaces
a linear algebra instruction with its mathematical definition.",True,3402,https://api.github.com/repos/KhronosGroup/SPIRV-Tools/pulls/3402,https://github.com/KhronosGroup/SPIRV-Tools/pull/3402,closed,919,0,14,3,0,26,0,0,[],2020-06-05 16:28:58+00:00,2020-06-16 10:20:52+00:00,928314.0,"10 days, 17:51:54","[{'comment_id': 437530692, 'comment_body': 'I would add a note explaining that the transformation is only applicable if the described instruction has one of a specific set of opcodes, and then list the opcodes that are currently supported (to be updated with more opcodes in future PRs).', 'comment_created': datetime.datetime(2020, 6, 9, 15, 41, 13, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 437532753, 'comment_body': ""We don't really want this part of the code base, which has nothing to do with spirv-fuzz, make reference to spirv-fuzz-specific stuff.\r\n\r\nI suggest you make this function complete - fill out the switch cases.  And then in the transformation add some code that restricts to the cases that we support.\r\n"", 'comment_created': datetime.datetime(2020, 6, 9, 15, 44, 7, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 437534414, 'comment_body': 'Here, add:\r\n\r\n```\r\n// TODO(url for bug for completing the other cases): ...\r\nif (instruction->opcode != ... && instruction->opcode != ...) {\r\n    return false;\r\n}\r\n```\r\n\r\nThen once all the cases covered by spvOpCodeIsLinearAlgebra are dealt with, the TODO and the conditional can go.\r\n\r\nAlso see my comment on spvOpcodeIsLinearAlgebra.', 'comment_created': datetime.datetime(2020, 6, 9, 15, 46, 23, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 437534643, 'comment_body': 'use static_cast<uint32_t>(...)', 'comment_created': datetime.datetime(2020, 6, 9, 15, 46, 40, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 437534906, 'comment_body': 'static_cast', 'comment_created': datetime.datetime(2020, 6, 9, 15, 47, 2, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 437535464, 'comment_body': 'I suggest adding an assert(false && ""Should be unreachable.""); before the break.', 'comment_created': datetime.datetime(2020, 6, 9, 15, 47, 46, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 437535745, 'comment_body': 'I suggest calling it GetRequiredFreshIdCount.', 'comment_created': datetime.datetime(2020, 6, 9, 15, 48, 12, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 437535921, 'comment_body': 'Change to a TODO(bug url) that links to the GitHub issue for finishing this off.', 'comment_created': datetime.datetime(2020, 6, 9, 15, 48, 29, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 437536343, 'comment_body': 'Add an ""unreachable"" assertion before the return.', 'comment_created': datetime.datetime(2020, 6, 9, 15, 49, 6, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 437538360, 'comment_body': 'I feel like there should be a way to harmonize this so that the two blocks of code that adjust the existing instruction are not both needed.\r\n\r\nGive it some thought but OK if not.', 'comment_created': datetime.datetime(2020, 6, 9, 15, 51, 25, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 437539257, 'comment_body': 'These can be private, I believe.', 'comment_created': datetime.datetime(2020, 6, 9, 15, 52, 28, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 437692125, 'comment_body': 'I was thinking about it. But for a 2-dimensional vector we make just an instruction replacement and not an insertion. For now, I guess that is the way it works better.\r\n', 'comment_created': datetime.datetime(2020, 6, 9, 20, 16, 17, tzinfo=datetime.timezone.utc), 'commenter': 'andreperezmaselco', 'type': 'User'}, {'comment_id': 437692632, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 6, 9, 20, 17, 15, tzinfo=datetime.timezone.utc), 'commenter': 'andreperezmaselco', 'type': 'User'}, {'comment_id': 437692685, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 6, 9, 20, 17, 22, tzinfo=datetime.timezone.utc), 'commenter': 'andreperezmaselco', 'type': 'User'}, {'comment_id': 437692866, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 6, 9, 20, 17, 42, tzinfo=datetime.timezone.utc), 'commenter': 'andreperezmaselco', 'type': 'User'}, {'comment_id': 437695012, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 6, 9, 20, 21, 44, tzinfo=datetime.timezone.utc), 'commenter': 'andreperezmaselco', 'type': 'User'}, {'comment_id': 437695068, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 6, 9, 20, 21, 49, tzinfo=datetime.timezone.utc), 'commenter': 'andreperezmaselco', 'type': 'User'}, {'comment_id': 437695147, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 6, 9, 20, 21, 58, tzinfo=datetime.timezone.utc), 'commenter': 'andreperezmaselco', 'type': 'User'}, {'comment_id': 437695622, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 6, 9, 20, 22, 57, tzinfo=datetime.timezone.utc), 'commenter': 'andreperezmaselco', 'type': 'User'}, {'comment_id': 437695690, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 6, 9, 20, 23, 4, tzinfo=datetime.timezone.utc), 'commenter': 'andreperezmaselco', 'type': 'User'}, {'comment_id': 437695761, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 6, 9, 20, 23, 12, tzinfo=datetime.timezone.utc), 'commenter': 'andreperezmaselco', 'type': 'User'}, {'comment_id': 438112433, 'comment_body': 'Cool - thanks for considering it.', 'comment_created': datetime.datetime(2020, 6, 10, 13, 16, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 438113735, 'comment_body': 'As well as the issue, leave a short description of why the TODO is here.  Along the lines of: ""Right now we only support certain operations.  When this issue is addressed the following conditional can be removed.""', 'comment_created': datetime.datetime(2020, 6, 10, 13, 17, 44, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 438114590, 'comment_body': 'I would change to ""To be supported in the future:""\r\n\r\nAnd I would add the TODO(issue) here as well.', 'comment_created': datetime.datetime(2020, 6, 10, 13, 19, 1, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 438114791, 'comment_body': '@andreperezmaselco did you see this one?', 'comment_created': datetime.datetime(2020, 6, 10, 13, 19, 18, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 438117972, 'comment_body': 'I did not see. Sorry.', 'comment_created': datetime.datetime(2020, 6, 10, 13, 23, 48, tzinfo=datetime.timezone.utc), 'commenter': 'andreperezmaselco', 'type': 'User'}]","[{'commit_sha': '80fc05e5ba0f8a0f5c3be1e8a0506862822c9e20', 'committer_username': 'andreperezmaselco', 'committer_name': 'André', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 11, 11, 36, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fb6e835e0d94ce290a3d847c9a705fc3766eb78d', 'committer_username': 'andreperezmaselco', 'committer_name': 'André', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 11, 11, 36, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': '84992409e875e683d27b276bd194a3c658cf11f2', 'committer_username': 'andreperezmaselco', 'committer_name': 'André', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 11, 11, 36, 55, tzinfo=datetime.timezone.utc)}]",André,20969363,,User,,4,,0,0
431272363,spirv-fuzz: Implement vector shuffle fuzzer pass,Fixes #3108.,True,3412,https://api.github.com/repos/KhronosGroup/SPIRV-Tools/pulls/3412,https://github.com/KhronosGroup/SPIRV-Tools/pull/3412,closed,208,12,6,4,0,5,0,0,[],2020-06-08 16:55:46+00:00,2020-06-16 10:21:32+00:00,667546.0,"7 days, 17:25:46","[{'comment_id': 437524954, 'comment_body': ""At first I was worried that there might not exist a compatible vector, and that the loop might run forever.\r\n\r\nOf course, that's not possible - because vector_1 is a choice that will definitely work.\r\n\r\nHowever, I suggest you use FuzzerContext::RemoveAtRandomIndex each time you consider a choice of vector2.  That way you gradually eliminate all the choices that won't work.\r\n\r\nThis could be really good if e.g. we need an int vector and there are thousands of float vectors available but not many int vectors.  The chance of choosing a float vector will decrease gradually as we remove them."", 'comment_created': datetime.datetime(2020, 6, 9, 15, 33, 15, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 437525172, 'comment_body': '""with"" -> ""as""', 'comment_created': datetime.datetime(2020, 6, 9, 15, 33, 32, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 437555470, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 6, 9, 16, 16, 43, tzinfo=datetime.timezone.utc), 'commenter': 'andreperezmaselco', 'type': 'User'}, {'comment_id': 438117081, 'comment_body': 'Can you add a comment that the loop is guaranteed to terminate because each iteration removes on possible choice for `vector_2`, and there is at least one choice that will cause the loop to exit - namely `vector_1`.', 'comment_created': datetime.datetime(2020, 6, 10, 13, 22, 37, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 438133519, 'comment_body': 'Sure.', 'comment_created': datetime.datetime(2020, 6, 10, 13, 45, 13, tzinfo=datetime.timezone.utc), 'commenter': 'andreperezmaselco', 'type': 'User'}]","[{'commit_sha': 'e1405a2b02fc61bcd533afe4eb620c1fd0a0510d', 'committer_username': 'andreperezmaselco', 'committer_name': 'André', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 11, 11, 36, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0d8ec0a3013d8e171d97a164d9679f775515acb8', 'committer_username': 'andreperezmaselco', 'committer_name': 'André', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 11, 11, 36, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7c6daa06fd6b1fcc798917b68442d93a532edb74', 'committer_username': 'andreperezmaselco', 'committer_name': 'André', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 11, 11, 36, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fe102e2c0a9bc3210d5ee6b2d0727bf8ac94e783', 'committer_username': 'andreperezmaselco', 'committer_name': 'André', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 11, 11, 36, 55, tzinfo=datetime.timezone.utc)}]",André,20969363,,User,,4,,0,0
435422720,spirv-fuzz: Add image sample unused components transformation,Fixes #3375.,True,3439,https://api.github.com/repos/KhronosGroup/SPIRV-Tools/pulls/3439,https://github.com/KhronosGroup/SPIRV-Tools/pull/3439,closed,734,0,14,7,0,10,0,0,[],2020-06-16 19:28:28+00:00,2020-07-08 16:07:05+00:00,1888717.0,"21 days, 20:38:37","[{'comment_id': 447644839, 'comment_body': '""because the module has changed."" -> ""because the module may have changed due to the use of FindOrCreateVectorType above.""', 'comment_created': datetime.datetime(2020, 6, 30, 12, 31, 11, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 447649183, 'comment_body': ""The following looks very good.  However, it is intricate and will be hard to understand for someone who doesn't already know this instruction.\r\n\r\nI suggest you add two worked examples, one where the existing type is int, the other where it is vec2 (i.e., a 2d floating point vector).  Then at each stage of the algorithm you show using psesudocode what would be computed in each case.\r\n\r\nTake a look at what I've done in transformation_add_function.cpp from lines 586-614 - there are little snippets of illustrative SPIR-V.  I think something along those lines could be useful here.  It will be different as you'll be describing existing SPIR-V and the types that will be needed based on it."", 'comment_created': datetime.datetime(2020, 6, 30, 12, 38, 33, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 447652461, 'comment_body': ""Am I correct that it doesn't have to be OpCompositeConstruct in order for the module to be valid, but rather we need it to be this instruction because we need to look inside the construction to check that the original components are there?  I think it would be good to clarify that slightly in the comment."", 'comment_created': datetime.datetime(2020, 6, 30, 12, 43, 54, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 447654625, 'comment_body': 'After this we should invalidate analyses since the module has changed.  I recommend invalidating all analyses - as is done in most other transformations - out of caution.', 'comment_created': datetime.datetime(2020, 6, 30, 12, 47, 31, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 447754251, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 6, 30, 15, 2, 1, tzinfo=datetime.timezone.utc), 'commenter': 'andreperezmaselco', 'type': 'User'}, {'comment_id': 447756600, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 6, 30, 15, 5, 5, tzinfo=datetime.timezone.utc), 'commenter': 'andreperezmaselco', 'type': 'User'}, {'comment_id': 447914619, 'comment_body': ""Don't you think the comments explain by themselves?\r\nI'm trying to explain with code, but I guess it is redundant."", 'comment_created': datetime.datetime(2020, 6, 30, 19, 3, 10, tzinfo=datetime.timezone.utc), 'commenter': 'andreperezmaselco', 'type': 'User'}, {'comment_id': 447916763, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 6, 30, 19, 7, 14, tzinfo=datetime.timezone.utc), 'commenter': 'andreperezmaselco', 'type': 'User'}, {'comment_id': 450866064, 'comment_body': 'For me, a worked example alongside the comments would be really useful.  The comments explain what the code does *in general*.   A worked example would show what the code does to a specific fragment of SPIR-V.  I think the two together would be great.\r\n\r\nCan you have a go?', 'comment_created': datetime.datetime(2020, 7, 7, 13, 31, 43, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 451054052, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 7, 7, 18, 13, 50, tzinfo=datetime.timezone.utc), 'commenter': 'andreperezmaselco', 'type': 'User'}]","[{'commit_sha': 'a2e71c79893f093b40dc2ef3195f2352809026bf', 'committer_username': 'andreperezmaselco', 'committer_name': 'André', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 11, 11, 36, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'db16799fa4bf9c78e9ff3a27590d17f473ecc421', 'committer_username': 'andreperezmaselco', 'committer_name': 'André', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 11, 11, 36, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6deae747b74f6be8f2cd6cd7cee62d3a65b3a1c9', 'committer_username': 'andreperezmaselco', 'committer_name': 'André', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 11, 11, 36, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a4f389dd0b4a5c30a3f1394bfb44cdddbe87d4fa', 'committer_username': 'andreperezmaselco', 'committer_name': 'André', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 11, 11, 36, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dfad2b732de354b09d3e44d8ad0833f9c6ffda56', 'committer_username': 'andreperezmaselco', 'committer_name': 'André', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 11, 11, 36, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': '574da150f61c4f6bacec81353575fb012b42f3c8', 'committer_username': 'andreperezmaselco', 'committer_name': 'André', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 11, 11, 36, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': '14fef26f6234373e1179323bfb805729e89cac2a', 'committer_username': 'andreperezmaselco', 'committer_name': 'André', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 11, 11, 36, 55, tzinfo=datetime.timezone.utc)}]",André,20969363,,User,,4,,0,0
457199986,spirv-fuzz: Add TransformationMakeVectorOperationDynamic,Fixes #3588.,True,3597,https://api.github.com/repos/KhronosGroup/SPIRV-Tools/pulls/3597,https://github.com/KhronosGroup/SPIRV-Tools/pull/3597,closed,687,0,12,8,0,40,0,0,[],2020-07-27 14:26:53+00:00,2020-08-06 14:50:20+00:00,865407.0,"10 days, 0:23:27","[{'comment_id': 461151053, 'comment_body': 'I would abbreviate a bit: ""Looks for OpCompositeExtract/Inser instructions on vectors, and replaces them with OpVectorExtract/InsertDynamic.""  The stuff about adding constants is more of an implementation detail.', 'comment_created': datetime.datetime(2020, 7, 27, 20, 30, 29, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 461152833, 'comment_body': ""I suggest moving this to the start of the innermost loop.  It's equivalent, and I think slightly nicer to do this check first, to avoid wasted work if in the end we decide not to proceed."", 'comment_created': datetime.datetime(2020, 7, 27, 20, 33, 52, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 461154736, 'comment_body': 'Because in general OpCompositeExtract and OpCompositeInsert can have many indices, I think it would be nice to have an assertion to document the fact that - given that we know this is a vector - it is guaranteed to have just one such index - i.e., an assertion that the number of in operands is (whatever it is guaranteed to be for the two cases).', 'comment_created': datetime.datetime(2020, 7, 27, 20, 37, 29, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 461155524, 'comment_body': ""How about `kChanceOfMakingVectorOperationDynamic`?  I don't like `VectoringDynamic`.  (Propagate change to getter method, etc.)"", 'comment_created': datetime.datetime(2020, 7, 27, 20, 39, 1, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 461157918, 'comment_body': 'I suggest you introduce a public static helper method in TransformationVectorDynamic that checks whether an instruction is suitable for being made dynamic - then you can avoid the duplication between here and the fuzzer pass.', 'comment_created': datetime.datetime(2020, 7, 27, 20, 43, 22, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 461159176, 'comment_body': ""Here you could then call MaybeGetConstantForIndex (the static method I've suggested you add)."", 'comment_created': datetime.datetime(2020, 7, 27, 20, 45, 45, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 461162045, 'comment_body': ""The index doesn't have to be unsigned.  I would like us to play more with mixing up sign.  Therefore I suggest you add a static method to the TransformationVectorDynamic class called MaybeGetConstantForIndex.  It should take the instruction as a const-ref, and:\r\nThe integer constant is allowed to be either signed or unsigned.\r\n\r\n- Use fuzzerutil::MaybeGet to look for an unsigned version of the constant\r\n- If that doesn't exist, use fuzzerutil::MaybeGet to look for a signed version\r\n- Return 0 if that doesn't exist either.\r\n\r\nThen if 0 gets returned, use FindOrCreate with ChooseEven() as the sign parameter, so signedness is random.\r\n\r\nSee corresponding review comment in the transformation class."", 'comment_created': datetime.datetime(2020, 7, 27, 20, 51, 20, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 461162530, 'comment_body': ""Again, you'd want to use the MaybeGetConstantForIndex function here."", 'comment_created': datetime.datetime(2020, 7, 27, 20, 52, 16, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 461541737, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 7, 28, 12, 30, 50, tzinfo=datetime.timezone.utc), 'commenter': 'andreperezmaselco', 'type': 'User'}, {'comment_id': 461543682, 'comment_body': 'Yes, I think about it. But sometimes it will randomly choose inapplicable instructions. This changes the conditional probability. I guess it makes sense randomly choose applicable instructions.', 'comment_created': datetime.datetime(2020, 7, 28, 12, 34, 3, tzinfo=datetime.timezone.utc), 'commenter': 'andreperezmaselco', 'type': 'User'}, {'comment_id': 461543918, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 7, 28, 12, 34, 30, tzinfo=datetime.timezone.utc), 'commenter': 'andreperezmaselco', 'type': 'User'}, {'comment_id': 461545337, 'comment_body': 'Do you think we could change the transformation name to `TransformationMakeVectorOperationDynamic`?', 'comment_created': datetime.datetime(2020, 7, 28, 12, 36, 56, tzinfo=datetime.timezone.utc), 'commenter': 'andreperezmaselco', 'type': 'User'}, {'comment_id': 461547928, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 7, 28, 12, 41, 10, tzinfo=datetime.timezone.utc), 'commenter': 'andreperezmaselco', 'type': 'User'}, {'comment_id': 461583836, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 7, 28, 13, 35, 3, tzinfo=datetime.timezone.utc), 'commenter': 'andreperezmaselco', 'type': 'User'}, {'comment_id': 461589630, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 7, 28, 13, 42, 57, tzinfo=datetime.timezone.utc), 'commenter': 'andreperezmaselco', 'type': 'User'}, {'comment_id': 461630870, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 7, 28, 14, 35, 3, tzinfo=datetime.timezone.utc), 'commenter': 'andreperezmaselco', 'type': 'User'}, {'comment_id': 461631217, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 7, 28, 14, 35, 28, tzinfo=datetime.timezone.utc), 'commenter': 'andreperezmaselco', 'type': 'User'}, {'comment_id': 461631352, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 7, 28, 14, 35, 37, tzinfo=datetime.timezone.utc), 'commenter': 'andreperezmaselco', 'type': 'User'}, {'comment_id': 465058038, 'comment_body': ""Don't forget to sort it alphabetically."", 'comment_created': datetime.datetime(2020, 8, 4, 13, 41, 23, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 465058213, 'comment_body': ""Don't forget to sort it alphabetically."", 'comment_created': datetime.datetime(2020, 8, 4, 13, 41, 42, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 465058463, 'comment_body': ""Don't forget to sort it alphabetically."", 'comment_created': datetime.datetime(2020, 8, 4, 13, 42, 4, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 465058611, 'comment_body': ""Don't forget to sort it alphabetically."", 'comment_created': datetime.datetime(2020, 8, 4, 13, 42, 20, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 465142089, 'comment_body': 'I think it might be good to elaborate a bit more on why we need this constant. Smth like ""OpCompositeExtract/Insert accepts integer literals as indices to the composite object. OpVectorInsert/ExtractDynamic, however, requires its single index to be an integral instruction. This is a result id of that instruction"".', 'comment_created': datetime.datetime(2020, 8, 4, 15, 35, 44, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 465155836, 'comment_body': ""I've checked and it seems that `OpVectorExtract/InsertDynamic` supports various kinds of indices (not necessarily constants). It might be better to just check that the index is an integer. That's not a big issue, though."", 'comment_created': datetime.datetime(2020, 8, 4, 15, 55, 52, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 465160462, 'comment_body': 'I would also add that an operand to this instruction must be a vector and that `constant_index_id` must be an integral instruction.', 'comment_created': datetime.datetime(2020, 8, 4, 16, 2, 37, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 465185682, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 8, 4, 16, 42, 14, tzinfo=datetime.timezone.utc), 'commenter': 'andreperezmaselco', 'type': 'User'}, {'comment_id': 465185752, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 8, 4, 16, 42, 22, tzinfo=datetime.timezone.utc), 'commenter': 'andreperezmaselco', 'type': 'User'}, {'comment_id': 465186357, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 8, 4, 16, 43, 27, tzinfo=datetime.timezone.utc), 'commenter': 'andreperezmaselco', 'type': 'User'}, {'comment_id': 465186472, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 8, 4, 16, 43, 36, tzinfo=datetime.timezone.utc), 'commenter': 'andreperezmaselco', 'type': 'User'}, {'comment_id': 465191173, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 8, 4, 16, 51, 22, tzinfo=datetime.timezone.utc), 'commenter': 'andreperezmaselco', 'type': 'User'}, {'comment_id': 465191424, 'comment_body': ""You're right.\r\nDone."", 'comment_created': datetime.datetime(2020, 8, 4, 16, 51, 45, tzinfo=datetime.timezone.utc), 'commenter': 'andreperezmaselco', 'type': 'User'}, {'comment_id': 465198050, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 8, 4, 17, 2, 45, tzinfo=datetime.timezone.utc), 'commenter': 'andreperezmaselco', 'type': 'User'}, {'comment_id': 466356583, 'comment_body': 'It is interesting because this transformation is designed assuming that ""constant_index"" is actually a constant, but I guess we indeed don\'t need to enforce that.', 'comment_created': datetime.datetime(2020, 8, 6, 11, 50, 14, tzinfo=datetime.timezone.utc), 'commenter': 'paulthomson', 'type': 'User'}, {'comment_id': 466357098, 'comment_body': 'Unlikely, but I suppose `constant_index_id` might indeed refer to an instruction, but it might not have a type id. So we should check that in the `if` as well. ', 'comment_created': datetime.datetime(2020, 8, 6, 11, 51, 16, tzinfo=datetime.timezone.utc), 'commenter': 'paulthomson', 'type': 'User'}, {'comment_id': 466359003, 'comment_body': 'Interesting. We normally apply the transformations and then compare the module to some SPIR-V assembly and check that it is valid. I feel like you might as well do this? But I can see that you do this kind of thing below in a separate test. ', 'comment_created': datetime.datetime(2020, 8, 6, 11, 55, tzinfo=datetime.timezone.utc), 'commenter': 'paulthomson', 'type': 'User'}, {'comment_id': 466359596, 'comment_body': 'I think it probably makes sense to ASSERT that each transformation is applicable. That way, we might get a test failure sooner, closer to the actual issue. ', 'comment_created': datetime.datetime(2020, 8, 6, 11, 56, 15, tzinfo=datetime.timezone.utc), 'commenter': 'paulthomson', 'type': 'User'}, {'comment_id': 466359741, 'comment_body': 'Yes. Initially I assumed it was a constant because it is related to a literal, but it can be the result id of any integer instruction.', 'comment_created': datetime.datetime(2020, 8, 6, 11, 56, 34, tzinfo=datetime.timezone.utc), 'commenter': 'andreperezmaselco', 'type': 'User'}, {'comment_id': 466391550, 'comment_body': ""You're right.\r\nDone."", 'comment_created': datetime.datetime(2020, 8, 6, 12, 56, 44, tzinfo=datetime.timezone.utc), 'commenter': 'andreperezmaselco', 'type': 'User'}, {'comment_id': 466393590, 'comment_body': 'It is in the `Apply` test.', 'comment_created': datetime.datetime(2020, 8, 6, 13, 0, 11, tzinfo=datetime.timezone.utc), 'commenter': 'andreperezmaselco', 'type': 'User'}, {'comment_id': 466395080, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 8, 6, 13, 2, 43, tzinfo=datetime.timezone.utc), 'commenter': 'andreperezmaselco', 'type': 'User'}]","[{'commit_sha': '43d3c9dea4dc6c9d39fea5f927944393d84febb3', 'committer_username': 'andreperezmaselco', 'committer_name': 'André', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 11, 11, 36, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b59860d19e43027ddd7e5ea5f24d9c64983484a6', 'committer_username': 'andreperezmaselco', 'committer_name': 'André', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 11, 11, 36, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': '03f733b272c76b49dd3adbab1109ee993887ff76', 'committer_username': 'andreperezmaselco', 'committer_name': 'André', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 11, 11, 36, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ba6e1cdae42013f6a69bca4c99cadaeec62fdbf3', 'committer_username': 'andreperezmaselco', 'committer_name': 'André', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 11, 11, 36, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a198de1776016472b57f778e2655604e7fc58e5f', 'committer_username': 'andreperezmaselco', 'committer_name': 'André', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 11, 11, 36, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b573f84817e45d30237bfbff4a4b0be8297cf6ce', 'committer_username': 'andreperezmaselco', 'committer_name': 'André', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 11, 11, 36, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9f8cbc8a1c46d06404d4bceda7977ba832816dbd', 'committer_username': 'andreperezmaselco', 'committer_name': 'André', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 11, 11, 36, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1408d7e34958a40038040bd96a72745ecda45670', 'committer_username': 'andreperezmaselco', 'committer_name': 'André', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 11, 11, 36, 55, tzinfo=datetime.timezone.utc)}]",André,20969363,,User,,4,,0,0
447811009,spirv-fuzz: Add inline function transformation,Fixes #3505.,True,3517,https://api.github.com/repos/KhronosGroup/SPIRV-Tools/pulls/3517,https://github.com/KhronosGroup/SPIRV-Tools/pull/3517,closed,1292,0,12,18,1,109,0,0,[],2020-07-11 20:04:29+00:00,2020-08-25 16:28:23+00:00,3875034.0,"44 days, 20:23:54","[{'comment_id': 453530948, 'comment_body': 'This comment would benefit from being a bit more descriptive.  Something like ""For each id defined by the called function, this map provides an associated fresh id that can be used in the inlined version of the function call.""\r\n\r\nGetting across that the values of the map must be fresh is important.', 'comment_created': datetime.datetime(2020, 7, 13, 9, 50, 33, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 454312782, 'comment_body': 'This takes a syntactic approach and identifies a return that is not in the last syntactic block.\r\n\r\nCan we change it so that it identifies early returns regardless of block layout?\r\n\r\nHere are some tests that illustrate what I mean:\r\n\r\n[patch.txt](https://github.com/KhronosGroup/SPIRV-Tools/files/4918650/patch.txt)\r\n\r\nAnd here is a proposed implementation of HasEarlyReturn that I think should give us what I think we need here:\r\n\r\n```\r\nbool Function::HasEarlyReturn() const {\r\n  auto postdominator_analysis = blocks_.front()->GetLabel()->context()->GetPostDominatorAnalysis(this);\r\n  for (auto& block : blocks_) {\r\n    if (spvOpcodeIsReturn(block->tail()->opcode()) &&\r\n        !postdominator_analysis->Dominates(block.get(), entry().get())) {\r\n      return true;\r\n    }\r\n  }\r\n  return false;\r\n}\r\n```\r\n\r\nWhat this does is checks that if a block ends in return then it must be the case that every path from the entry block ends up at this block.  That captures what we want independently from syntactic layout.', 'comment_created': datetime.datetime(2020, 7, 14, 12, 17, 2, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 454313450, 'comment_body': ""First of all: check that the values in the map are (a) all fresh, and (b) all distinct.  See TransformationOutlineFunction for an example.\r\n\r\nI think currently you don't check distinctness (later).  And it's good to do these checks first as they are cheap."", 'comment_created': datetime.datetime(2020, 7, 14, 12, 18, 25, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 454315694, 'comment_body': ""This loop checks that every key to the map does correspond to an instruction in the function being inlined, and complains if some key is not in the function.\r\n\r\nI believe it *does not* currently check whether every instruction in the function has some associated key.\r\n\r\nWe should turn this around:\r\n\r\n- It doesn't matter if the map contains redundant entries, and in fact it might happen during shrinking so we want to allow it\r\n\r\n- It *does* matter if the map doesn't contain enough entries - it has to have an entry for every result id in the function that we are inlining\r\n\r\nCan you change things to reflect this?"", 'comment_created': datetime.datetime(2020, 7, 14, 12, 22, 29, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 454320286, 'comment_body': ""Since we require the return value to map to the function result id, let's instead not require the return value to be captured in the map.  I.e., the map should contain entries for all of the result ids generated by the function, except for an id coming from a return instruction (if any)."", 'comment_created': datetime.datetime(2020, 7, 14, 12, 30, 11, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 455922420, 'comment_body': ""You're right. The block must have a return instruction and do not post dominate the entry block.\r\nThanks! "", 'comment_created': datetime.datetime(2020, 7, 16, 16, 39, 27, tzinfo=datetime.timezone.utc), 'commenter': 'andreperezmaselco', 'type': 'User'}, {'comment_id': 455924042, 'comment_body': ""Yes, this is a better explanation. I'm going to change it."", 'comment_created': datetime.datetime(2020, 7, 16, 16, 42, tzinfo=datetime.timezone.utc), 'commenter': 'andreperezmaselco', 'type': 'User'}, {'comment_id': 456106931, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 7, 16, 22, 10, tzinfo=datetime.timezone.utc), 'commenter': 'andreperezmaselco', 'type': 'User'}, {'comment_id': 456107009, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 7, 16, 22, 10, 11, tzinfo=datetime.timezone.utc), 'commenter': 'andreperezmaselco', 'type': 'User'}, {'comment_id': 456107546, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 7, 16, 22, 11, 37, tzinfo=datetime.timezone.utc), 'commenter': 'andreperezmaselco', 'type': 'User'}, {'comment_id': 456107780, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 7, 16, 22, 12, 15, tzinfo=datetime.timezone.utc), 'commenter': 'andreperezmaselco', 'type': 'User'}, {'comment_id': 457529443, 'comment_body': ""Please move this into the transformation class.  It only makes sense in the case where there is a single return instruction in the function.  That's something the transformation assumes, but not something that is true in general, so the function doesn't belong in function.cpp."", 'comment_created': datetime.datetime(2020, 7, 20, 16, 12, 32, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 457532693, 'comment_body': 'As mentioned above, please move this into the transformation.  Then the comment should be described as a precondition:\r\n\r\n- Requires that the function contains at most one OpReturnValue instruction.  Returns the id associated with this instruction if present, and 0 otherwise.', 'comment_created': datetime.datetime(2020, 7, 20, 16, 17, 36, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 457533357, 'comment_body': 'I would store the result of `called_function->GetReturnValueId()` in a temporary, computed before the outer loop, to avoid computing it again and again for every instruction that has a result id.', 'comment_created': datetime.datetime(2020, 7, 20, 16, 18, 39, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 457533728, 'comment_body': 'Please comment the statements in this loop more carefully to explain what is going on.', 'comment_created': datetime.datetime(2020, 7, 20, 16, 19, 13, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 457534759, 'comment_body': 'This isn\'t the right way to identify the function return instruction because it might not be the final instruction in the function.  Remember that it can be anywhere in the function so long as dominance rules are respected.\r\n\r\nI assume you\'re going to change the single ""OpReturn"" or ""OpReturnValue"" in the function into an ""OpBranch"" to the basic block that follows the block containing the function call?', 'comment_created': datetime.datetime(2020, 7, 20, 16, 21, 2, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 457537150, 'comment_body': 'This code should be moved to inside the ""if (cloned_instruction->HasResultId())"" above, otherwise you end up inspecting the result ids of instructions that don\'t have them and they may be spurious.', 'comment_created': datetime.datetime(2020, 7, 20, 16, 24, 48, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 457538565, 'comment_body': ""What happens to function_call_instruction - does it get removed from the module?  (It should right?  I didn't see the code to do it, though.)\r\n\r\nFrom your tests, the instruction appears to be gone, but I don't see how this happens.\r\n\r\nOh - in the test you kill the instruction!  That should be part of the transformation."", 'comment_created': datetime.datetime(2020, 7, 20, 16, 26, 57, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 457542334, 'comment_body': 'This should be done as part of Apply.', 'comment_created': datetime.datetime(2020, 7, 20, 16, 32, 50, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 457544019, 'comment_body': 'Some other things to be checked:\r\n- The OpFunctionCall instruction should be the penultimate instruction in its block\r\n- The block terminator should be OpBranch\r\n\r\nThis is important because:\r\n\r\n(a) it means that the block is not a loop header or selection header, which avoids various validity problems\r\n(b) it means that we can handle OpReturn / OpReturnValue instructions by turning them into OpBranch instructions to the successor of the original block', 'comment_created': datetime.datetime(2020, 7, 20, 16, 35, 36, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 458816927, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 7, 22, 14, 4, 6, tzinfo=datetime.timezone.utc), 'commenter': 'andreperezmaselco', 'type': 'User'}, {'comment_id': 458817786, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 7, 22, 14, 5, 14, tzinfo=datetime.timezone.utc), 'commenter': 'andreperezmaselco', 'type': 'User'}, {'comment_id': 458844765, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 7, 22, 14, 41, 27, tzinfo=datetime.timezone.utc), 'commenter': 'andreperezmaselco', 'type': 'User'}, {'comment_id': 458850060, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 7, 22, 14, 48, 10, tzinfo=datetime.timezone.utc), 'commenter': 'andreperezmaselco', 'type': 'User'}, {'comment_id': 461166200, 'comment_body': ""You're right."", 'comment_created': datetime.datetime(2020, 7, 27, 20, 59, 9, tzinfo=datetime.timezone.utc), 'commenter': 'andreperezmaselco', 'type': 'User'}, {'comment_id': 461220239, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 7, 27, 23, 6, 1, tzinfo=datetime.timezone.utc), 'commenter': 'andreperezmaselco', 'type': 'User'}, {'comment_id': 461220359, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 7, 27, 23, 6, 21, tzinfo=datetime.timezone.utc), 'commenter': 'andreperezmaselco', 'type': 'User'}, {'comment_id': 461253424, 'comment_body': ""I guess the return instruction must be changed to the last instruction in the block containing the function call instruction.\r\nI'll leave this changes to the next commit so that we can talk about this and the last comment."", 'comment_created': datetime.datetime(2020, 7, 28, 0, 52, 30, tzinfo=datetime.timezone.utc), 'commenter': 'andreperezmaselco', 'type': 'User'}, {'comment_id': 462451456, 'comment_body': '@andreperezmaselco:\r\n\r\n- OpReturn should turn into OpBranch (to the block following the original function call)\r\n\r\n- OpReturnValue %v should turn into %w = OpCopyObject %v; OpBranch (to the block following the original function call)\r\nwhere %w is the receiving variable for the original OpFunctionCall instruction.', 'comment_created': datetime.datetime(2020, 7, 29, 17, 4, 5, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 462542431, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 7, 29, 19, 40, 18, tzinfo=datetime.timezone.utc), 'commenter': 'andreperezmaselco', 'type': 'User'}, {'comment_id': 462576615, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 7, 29, 20, 43, 36, tzinfo=datetime.timezone.utc), 'commenter': 'andreperezmaselco', 'type': 'User'}, {'comment_id': 466602113, 'comment_body': ""As described in #3607, protobuf's are serialized non-deterministically. This can cause results of the fuzzer and the replayer to be different."", 'comment_created': datetime.datetime(2020, 8, 6, 18, 21, 29, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 466614018, 'comment_body': 'I think it would be better to make a separate PR for this change and ask guys from spirv-opt team to review it.', 'comment_created': datetime.datetime(2020, 8, 6, 18, 43, 53, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 466615868, 'comment_body': ""I'm most certainly missing something but I can't find this function anywhere."", 'comment_created': datetime.datetime(2020, 8, 6, 18, 47, 21, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 466616798, 'comment_body': 'Can this result in a segfault if `function_call_instruction` is a `nullptr`?', 'comment_created': datetime.datetime(2020, 8, 6, 18, 49, 5, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 466617731, 'comment_body': 'Do we support the case when `OpBranch` is preceded with `OpLoopMerge`?', 'comment_created': datetime.datetime(2020, 8, 6, 18, 50, 45, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 466618354, 'comment_body': 'Another approach would be to make this a static method of the transformation.', 'comment_created': datetime.datetime(2020, 8, 6, 18, 51, 57, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 466626048, 'comment_body': 'The assertion will never fail.', 'comment_created': datetime.datetime(2020, 8, 6, 19, 6, 21, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 466633498, 'comment_body': ""I see that we don't and that's good. One particular issue with this case is that once we inline the function, we might end up with a situation where a back-edge of the loop does not point to the loop's header.\r\n\r\nIt might be good to make an explicit comment about this and add a test for it."", 'comment_created': datetime.datetime(2020, 8, 6, 19, 20, 45, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 467862262, 'comment_body': 'It is in the `Transformation` class: `source/fuzz/transformation.cpp:304`.', 'comment_created': datetime.datetime(2020, 8, 10, 12, 15, 21, tzinfo=datetime.timezone.utc), 'commenter': 'andreperezmaselco', 'type': 'User'}, {'comment_id': 467862709, 'comment_body': ""Right, thanks! I've never used it myself :)"", 'comment_created': datetime.datetime(2020, 8, 10, 12, 16, 21, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 467888012, 'comment_body': ""I don't think so, because I've already checked that `function_call_instruction` is not `nullptr` and it is an `SpvOpFunctionCall` instruction. Therefore, `function_call_instruction_block` can not be `nullptr` because an `SpvOpFunctionCall` instruction is only valid inside a block."", 'comment_created': datetime.datetime(2020, 8, 10, 13, 4, 59, tzinfo=datetime.timezone.utc), 'commenter': 'andreperezmaselco', 'type': 'User'}, {'comment_id': 467892024, 'comment_body': 'It will fail if some instruction, inside `called_function`, is not mapped.', 'comment_created': datetime.datetime(2020, 8, 10, 13, 11, 48, tzinfo=datetime.timezone.utc), 'commenter': 'andreperezmaselco', 'type': 'User'}, {'comment_id': 467893460, 'comment_body': ""I've just noticed that condition in the `if` statement is the same (almost) as the one in the assertion (I believe `count` function returns `0` if `contains` returns `false`)."", 'comment_created': datetime.datetime(2020, 8, 10, 13, 14, 15, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 469150034, 'comment_body': ""`message_.function_call_id()` might not exist in the module. So `function_call_instruction = nullptr`. Then we call `ir_context->get_instr_block(nullptr);`. I believe this won't crash, but it is not ideal. I suggest you check that `function_call_instruction` is non-null immediately, like so:\r\n\r\n```\r\nauto function_call_instruction =\r\n      ir_context->get_def_use_mgr()->GetDef(message_.function_call_id());\r\nif (!function_call_instruction) {\r\n  return false;\r\n}\r\n```\r\n\r\nJust because this is clearer."", 'comment_created': datetime.datetime(2020, 8, 12, 10, 5, 21, tzinfo=datetime.timezone.utc), 'commenter': 'paulthomson', 'type': 'User'}, {'comment_id': 469155261, 'comment_body': 'I suggest adding to this comment to explain why we need this check.', 'comment_created': datetime.datetime(2020, 8, 12, 10, 15, 25, tzinfo=datetime.timezone.utc), 'commenter': 'paulthomson', 'type': 'User'}, {'comment_id': 469160058, 'comment_body': 'Minor style suggestion: \r\n\r\n\r\n```\r\nauto cloned_label_instruction = block.GetLabelInst()->Clone(ir_context);\r\n...\r\nfunction_call_instruction->InsertBefore(cloned_label_instruction); // no need to use unique_ptr\r\n```\r\n\r\nOr, if you do want to use unique_ptr (which is generally good):\r\n\r\n```\r\nstd::unique_ptr<opt::Instruction> cloned_label_instruction(\r\n          block.GetLabelInst()->Clone(ir_context));\r\n...\r\nfunction_call_instruction->InsertBefore(\r\n          std::move(cloned_label_instruction));\r\n```\r\n\r\nIt would be even better if Clone returned a unique_ptr, but this is next best thing I think.\r\n\r\n', 'comment_created': datetime.datetime(2020, 8, 12, 10, 24, 57, tzinfo=datetime.timezone.utc), 'commenter': 'paulthomson', 'type': 'User'}, {'comment_id': 469163739, 'comment_body': ""OK I think I see. We don't add mappings for function parameter ids. If they are in the map then something has gone wrong."", 'comment_created': datetime.datetime(2020, 8, 12, 10, 32, 5, tzinfo=datetime.timezone.utc), 'commenter': 'paulthomson', 'type': 'User'}, {'comment_id': 469164770, 'comment_body': 'Add a comment: We do + 1 because the first in-operand for OpFunctionCall is the function id that is being called.', 'comment_created': datetime.datetime(2020, 8, 12, 10, 34, 14, tzinfo=datetime.timezone.utc), 'commenter': 'paulthomson', 'type': 'User'}, {'comment_id': 469166036, 'comment_body': 'Optional: I suppose you could do this before checking the `result_id_map`. I suppose you could even go as far as removing the check (""The id mapping must not contain an entry for any parameter"") in IsApplicable, although I am not sure what the consequences would be. But this is up to you.', 'comment_created': datetime.datetime(2020, 8, 12, 10, 36, 52, tzinfo=datetime.timezone.utc), 'commenter': 'paulthomson', 'type': 'User'}, {'comment_id': 469180245, 'comment_body': 'I suggest removing this comment because it is unclear (_what_ erases the function instruction and _why_ is that information relevant here). ', 'comment_created': datetime.datetime(2020, 8, 12, 11, 7, 3, tzinfo=datetime.timezone.utc), 'commenter': 'paulthomson', 'type': 'User'}, {'comment_id': 469183796, 'comment_body': ""@Vasniktel I don't quite understand. Can you give an example? Edit: this comment was part of a comment chain that has been resolved. "", 'comment_created': datetime.datetime(2020, 8, 12, 11, 14, 45, tzinfo=datetime.timezone.utc), 'commenter': 'paulthomson', 'type': 'User'}, {'comment_id': 469185351, 'comment_body': 'Could you just get the returned value id from `instruction`? You could also rename it `original_instruction` for clarity and less chance of name clashes. ', 'comment_created': datetime.datetime(2020, 8, 12, 11, 18, 19, tzinfo=datetime.timezone.utc), 'commenter': 'paulthomson', 'type': 'User'}, {'comment_id': 469190555, 'comment_body': ""Actually, I don't think this will work. I think your tests might work because the functions always only have one basic block. But if you have additional basic blocks, you will need to add basic blocks, not just add label instructions. I _think_ adding a label instruction does not create a basic block automatically. See this example:\r\n\r\nhttps://github.com/KhronosGroup/SPIRV-Tools/blob/150be20d4334b66c31a8ed81230f85b814b14a9f/source/fuzz/transformation_add_function.cpp#L276"", 'comment_created': datetime.datetime(2020, 8, 12, 11, 29, 27, tzinfo=datetime.timezone.utc), 'commenter': 'paulthomson', 'type': 'User'}, {'comment_id': 469192551, 'comment_body': 'But see a later comment because I think this loop might not work. ', 'comment_created': datetime.datetime(2020, 8, 12, 11, 33, 47, tzinfo=datetime.timezone.utc), 'commenter': 'paulthomson', 'type': 'User'}, {'comment_id': 469295814, 'comment_body': 'Yes, you would need to invalidate analyses to make IRContext aware of the new basic blocks. But in this case, you will potentially invalidate all pointers as well.', 'comment_created': datetime.datetime(2020, 8, 12, 14, 20, 31, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 469300791, 'comment_body': 'Actually, I think invaliding analyzes is not even enough. I think the opt code base stores a module, not as a list of instructions, but as a list of functions, each with a list of basic blocks, each with a list of instructions. Thus, adding a label will not create a new basic block in the in-memory data structures, unless maybe you output the module as bytes and re-parsed it. ', 'comment_created': datetime.datetime(2020, 8, 12, 14, 27, 11, tzinfo=datetime.timezone.utc), 'commenter': 'paulthomson', 'type': 'User'}, {'comment_id': 469301665, 'comment_body': ""I've been thinking about this situation:\r\n```\r\n%1 = OpFunction %int None %type\r\n%2 = OpLabel\r\nOpBranch %3\r\n%3 = OpLabel\r\nOpReturnValue %int_constant\r\nOpFunctionEnd\r\n...\r\n%4 = OpLabel\r\n%5 = OpFunctionCall %int %1\r\nOpLoopMerge ....\r\nOpBranch %6\r\n...\r\n```\r\nIf we inline `%1`, we might get:\r\n```\r\n%4 = OpLabel\r\nOpBranch %7\r\n%7 = OpLabel\r\n%8 = OpCopyObject %int %inst_constant\r\nOpLoopMerge ...\r\nOpBranch %6\r\n...\r\n```\r\nIn this situation, there is a back-edge block somewhere branching to `%4` which is no longer a loop header."", 'comment_created': datetime.datetime(2020, 8, 12, 14, 28, 17, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 469303180, 'comment_body': 'Yes, right. OpLabels are not even stored in the instruction list. They are stored separately in each basic block.', 'comment_created': datetime.datetime(2020, 8, 12, 14, 30, 26, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 469304196, 'comment_body': 'Oh I see. You mean if we did not require the call to be the penultimate instruction then we could get the above situation. Yes, it is good that we avoid this. No action is needed for this comment chain, right?', 'comment_created': datetime.datetime(2020, 8, 12, 14, 31, 50, tzinfo=datetime.timezone.utc), 'commenter': 'paulthomson', 'type': 'User'}, {'comment_id': 469305183, 'comment_body': 'It would be good to comment and test it.', 'comment_created': datetime.datetime(2020, 8, 12, 14, 33, 16, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 469549582, 'comment_body': 'Ah right, yes you said that. Sounds good. E.g. a comment like ""This avoids the case where..."" and also a test that tries to inline a function call at the end of a loop header.', 'comment_created': datetime.datetime(2020, 8, 12, 21, 11, 48, tzinfo=datetime.timezone.utc), 'commenter': 'paulthomson', 'type': 'User'}, {'comment_id': 470643634, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 8, 14, 14, 4, 16, tzinfo=datetime.timezone.utc), 'commenter': 'andreperezmaselco', 'type': 'User'}, {'comment_id': 470651584, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 8, 14, 14, 17, 52, tzinfo=datetime.timezone.utc), 'commenter': 'andreperezmaselco', 'type': 'User'}, {'comment_id': 470994191, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 8, 15, 14, 9, 25, tzinfo=datetime.timezone.utc), 'commenter': 'andreperezmaselco', 'type': 'User'}, {'comment_id': 471012621, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 8, 15, 16, 41, 39, tzinfo=datetime.timezone.utc), 'commenter': 'andreperezmaselco', 'type': 'User'}, {'comment_id': 471014872, 'comment_body': ""You're right.\r\nDone."", 'comment_created': datetime.datetime(2020, 8, 15, 17, 6, 30, tzinfo=datetime.timezone.utc), 'commenter': 'andreperezmaselco', 'type': 'User'}, {'comment_id': 471015425, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 8, 15, 17, 13, 10, tzinfo=datetime.timezone.utc), 'commenter': 'andreperezmaselco', 'type': 'User'}, {'comment_id': 471803066, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 8, 17, 22, 11, 38, tzinfo=datetime.timezone.utc), 'commenter': 'andreperezmaselco', 'type': 'User'}, {'comment_id': 472032789, 'comment_body': 'Consider using `snake_case` here.', 'comment_created': datetime.datetime(2020, 8, 18, 9, 9, 38, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 472033078, 'comment_body': 'It might be better to use `std::any_of`.', 'comment_created': datetime.datetime(2020, 8, 18, 9, 10, 4, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 472060224, 'comment_body': ""I think we should be careful here. Concretely, TransformationAddSynonym can add OpCopyObject instructions of OpTypeVoid. That is, if we applied that transformation before inlining, we could get an undefined id error.\r\n\r\nUnfortunately, I see no way around this: we can create an id of void type only by calling a corresponding function. Thus, I'd suggest we check in the IsApplicable that the result id of the OpFunctionCall is not used anywhere if the function doesn't return anything."", 'comment_created': datetime.datetime(2020, 8, 18, 9, 56, 29, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 472062508, 'comment_body': ""Don't forget to remove this change once you've refactored it into a separate PR or a static method."", 'comment_created': datetime.datetime(2020, 8, 18, 10, 0, 28, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 472227796, 'comment_body': ""Actually, a recent PR added `fuzzerutil::FunctionContainsOpKillOrUnreachable` that I'm doing to use."", 'comment_created': datetime.datetime(2020, 8, 18, 14, 12, 2, tzinfo=datetime.timezone.utc), 'commenter': 'andreperezmaselco', 'type': 'User'}, {'comment_id': 472229423, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 8, 18, 14, 14, 5, tzinfo=datetime.timezone.utc), 'commenter': 'andreperezmaselco', 'type': 'User'}, {'comment_id': 472230185, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 8, 18, 14, 15, 6, tzinfo=datetime.timezone.utc), 'commenter': 'andreperezmaselco', 'type': 'User'}, {'comment_id': 473065287, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 8, 19, 14, 18, 53, tzinfo=datetime.timezone.utc), 'commenter': 'andreperezmaselco', 'type': 'User'}, {'comment_id': 473072835, 'comment_body': ""One solution I've just recalled is to use `OpUndef` of void type. However, this is controversial and there is a discussion (#3716) on whether this should be allowed: currently, it is not according to the spec but spirv-val doesn't mind."", 'comment_created': datetime.datetime(2020, 8, 19, 14, 28, 33, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 473073941, 'comment_body': 'Prohibiting this case is probably the best option.', 'comment_created': datetime.datetime(2020, 8, 19, 14, 29, 59, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 473975233, 'comment_body': ""Yes, you're right.\r\nI've added a condition that prohibits this case."", 'comment_created': datetime.datetime(2020, 8, 20, 13, 31, 7, tzinfo=datetime.timezone.utc), 'commenter': 'andreperezmaselco', 'type': 'User'}, {'comment_id': 474473674, 'comment_body': 'See [Google C++ style](https://github.com/KhronosGroup/SPIRV-Tools/pull/3728) - variable names should be lower case with underscores between words.', 'comment_created': datetime.datetime(2020, 8, 21, 7, 34, 33, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 474474703, 'comment_body': 'Add a comment that these are the instructions we are going to inline, and explain that we find them first, and then do the inlining, to avoid changing the module while we are inspecting it.', 'comment_created': datetime.datetime(2020, 8, 21, 7, 35, 49, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 474475297, 'comment_body': ""I would add a comment at this point to clarify that we have now decided which calls to inline, and it's time to actually create and apply the inlining transformations."", 'comment_created': datetime.datetime(2020, 8, 21, 7, 36, 32, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 474478042, 'comment_body': '""... whether to apply the transformation."" -> ""... which ones to inline.""', 'comment_created': datetime.datetime(2020, 8, 21, 7, 39, 47, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 474478982, 'comment_body': 'Indentation: the ""to"" should line up underneath ""|message_""', 'comment_created': datetime.datetime(2020, 8, 21, 7, 40, 57, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 474479394, 'comment_body': '(This is meant to come under the line ""to fresh ids"", but the CLion code review isn\'t letting me put it there.)', 'comment_created': datetime.datetime(2020, 8, 21, 7, 41, 27, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 474480963, 'comment_body': ""Similarly, fix indentation here.\n\nAlso add a note that the called function must not use OpUnreachable or OpKill, and briefly say that this is to guard against making hte module invalid when the caller is inside a continue construct.\n\nWith respect to this new bullet that I'm proposing: can you open an issue to note that we could make the spirv-fuzz inliner more aggressive by allowing functions that use OpKill / OpUnreachable to be inlined if the function call is *not* part of a continue construct, and do a TODO(issue URL) comment here?"", 'comment_created': datetime.datetime(2020, 8, 21, 7, 43, 17, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 474482907, 'comment_body': 'This comment describes the *implementation* of Apply.  It\'s better to try to express the overall effect of a function in a comment.\n\nFor example:\n\n""Replaces the OpFunctionCall instruction identified by |message_.function_call_id| with a copy of the function\'s body.  |message_.result_id_map| is used to provide fresh ids for duplicated instructions.""', 'comment_created': datetime.datetime(2020, 8, 21, 7, 45, 27, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 474484385, 'comment_body': 'This is good, but does the fuzzer pass guarantee that this is the case before applying a transformation?\n\nIf the fuzzer pass finds an OpFunctionCall instruction that can be inlined but doese *not* meet these conditions, it should apply TransformationSplitBlock so that the function call instruction now does meet the required conditions.', 'comment_created': datetime.datetime(2020, 8, 21, 7, 47, 17, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 474485701, 'comment_body': 'It looks to me like the transformation might not be applicable by construction, in particular if the function call is not the penultimate instruction in its block and if the block terminator is not OpBranch.\n\nTo avoid this problem you should detect when this is the case, and apply a TransformationSplitBlock before applying the inlining transformation.', 'comment_created': datetime.datetime(2020, 8, 21, 7, 48, 53, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 474488268, 'comment_body': ""I don't think we can assume that this never happens.  For example, OpName is allowed to target any result id, so it could target the result id of a function call.\n\nPlease:\n\n(1) Change this so that it returns false if there are uses\n(2) Add a test that confirms that a transformation will be inapplicable if the return type is void and there is a use (e.g. via OpName)\n(3) Adapt the fuzzer pass so that it skips function call instructions that would fail to be applicable due to this issue"", 'comment_created': datetime.datetime(2020, 8, 21, 7, 51, 59, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 474490822, 'comment_body': 'To limit duplication between the fuzzer pass and the transformation, how about you introduce a static helper function in the transformation class, IsSuitableForInlining.\n\nThis function could:\n\n- Check the void return type constraints\n- Ensure there are no early returns\n- Ensure that there are no uses of OpKill or OpUnreachable\n\nIn both the fuzzer pass and the transformation, those checks could be accounted for by calling the helper function.', 'comment_created': datetime.datetime(2020, 8, 21, 7, 54, 58, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 474491160, 'comment_body': ""This would be come unnecessary if you use the helper function that I'm proposing."", 'comment_created': datetime.datetime(2020, 8, 21, 7, 55, 20, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 474491993, 'comment_body': ""Can you open an issue for the fact that we could use overflow ids to be less conservative here, and add a TODO(comment)?  (The overflow ids stuff is not yet merged but it's coming soon.)"", 'comment_created': datetime.datetime(2020, 8, 21, 7, 56, 17, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 474494837, 'comment_body': ""I like this helper function but I do not like its name.\n\nThe reason I don't like its name is that you have *already* inserted the instruction by the time you call this helper, so in a sense the inlining has already been done, and now you are adapting the instruction to make it fit.\n\nHow about AdaptInlinedInstruction?"", 'comment_created': datetime.datetime(2020, 8, 21, 7, 59, 31, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 474648071, 'comment_body': ""You're right, but here I am going to use the `fuzzerutil::FunctionContainsOpKillOrUnreachable` function."", 'comment_created': datetime.datetime(2020, 8, 21, 11, 49, 52, tzinfo=datetime.timezone.utc), 'commenter': 'andreperezmaselco', 'type': 'User'}, {'comment_id': 474651750, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 8, 21, 11, 58, 41, tzinfo=datetime.timezone.utc), 'commenter': 'andreperezmaselco', 'type': 'User'}, {'comment_id': 474653203, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 8, 21, 12, 2, 3, tzinfo=datetime.timezone.utc), 'commenter': 'andreperezmaselco', 'type': 'User'}, {'comment_id': 474654418, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 8, 21, 12, 5, 1, tzinfo=datetime.timezone.utc), 'commenter': 'andreperezmaselco', 'type': 'User'}, {'comment_id': 474655556, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 8, 21, 12, 7, 35, tzinfo=datetime.timezone.utc), 'commenter': 'andreperezmaselco', 'type': 'User'}, {'comment_id': 474663044, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 8, 21, 12, 24, 9, tzinfo=datetime.timezone.utc), 'commenter': 'andreperezmaselco', 'type': 'User'}, {'comment_id': 474664513, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 8, 21, 12, 27, 6, tzinfo=datetime.timezone.utc), 'commenter': 'andreperezmaselco', 'type': 'User'}, {'comment_id': 474667203, 'comment_body': 'Yes, `AdaptInlinedInstruction` is better.\r\nDone.', 'comment_created': datetime.datetime(2020, 8, 21, 12, 32, 25, tzinfo=datetime.timezone.utc), 'commenter': 'andreperezmaselco', 'type': 'User'}, {'comment_id': 474709379, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 8, 21, 13, 48, 10, tzinfo=datetime.timezone.utc), 'commenter': 'andreperezmaselco', 'type': 'User'}, {'comment_id': 474720341, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 8, 21, 14, 7, 1, tzinfo=datetime.timezone.utc), 'commenter': 'andreperezmaselco', 'type': 'User'}, {'comment_id': 474726645, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 8, 21, 14, 16, 37, tzinfo=datetime.timezone.utc), 'commenter': 'andreperezmaselco', 'type': 'User'}, {'comment_id': 474758802, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 8, 21, 15, 9, 4, tzinfo=datetime.timezone.utc), 'commenter': 'andreperezmaselco', 'type': 'User'}, {'comment_id': 474759072, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 8, 21, 15, 9, 31, tzinfo=datetime.timezone.utc), 'commenter': 'andreperezmaselco', 'type': 'User'}, {'comment_id': 476578014, 'comment_body': 'I will take care of this.', 'comment_created': datetime.datetime(2020, 8, 25, 16, 26, 10, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}]","[{'commit_sha': 'f6d4f4d1d897d38feb6431286e53d11f0f8eabaa', 'committer_username': 'andreperezmaselco', 'committer_name': 'André', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 11, 11, 36, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': '314121e9d6f6c3084fa95e65f2f5912dee921bea', 'committer_username': 'andreperezmaselco', 'committer_name': 'André', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 11, 11, 36, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b9d4f05c3600d01d8742b330ce99270c7158cada', 'committer_username': 'andreperezmaselco', 'committer_name': 'André', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 11, 11, 36, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ca8dcfb5a2c2c33ed14112e47b456fb41061e0b2', 'committer_username': 'andreperezmaselco', 'committer_name': 'André', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 11, 11, 36, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9f20a93c106a71462b5625c5dcf93304888226c8', 'committer_username': 'andreperezmaselco', 'committer_name': 'André', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 11, 11, 36, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f7d136338069a4a2c9b7e2fba92eb1c72b316088', 'committer_username': 'andreperezmaselco', 'committer_name': 'André', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 11, 11, 36, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': '282e6f9ce0b792e87364a166ed5d602d7b6a1021', 'committer_username': 'andreperezmaselco', 'committer_name': 'André', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 11, 11, 36, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': '14fd8a93797a5f6060e2dc72e4255723c3cbf617', 'committer_username': 'andreperezmaselco', 'committer_name': 'André', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 11, 11, 36, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': '29104dd236edf891b50a7fd9f67a61d99386d8f4', 'committer_username': 'andreperezmaselco', 'committer_name': 'André', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 11, 11, 36, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2dec4cc03f4ec30142b2d14be69570d66d0b2e33', 'committer_username': 'andreperezmaselco', 'committer_name': 'André', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 11, 11, 36, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3a3d410b009f9fad63c7d6ca303594ef99b7d58e', 'committer_username': 'andreperezmaselco', 'committer_name': 'André', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 11, 11, 36, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd4bf7fd7b0a431c080af24f2fd9839c8b44cd477', 'committer_username': 'andreperezmaselco', 'committer_name': 'André', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 11, 11, 36, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8ab673f1863ca08b19e7b88db1ff65f1698e105f', 'committer_username': 'andreperezmaselco', 'committer_name': 'André', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 11, 11, 36, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ac853c508b5aaf1df08c74dc7158b76cc72466d1', 'committer_username': 'andreperezmaselco', 'committer_name': 'André', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 11, 11, 36, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd0eea8b02e9eb2254079f9cd6820cd379554d5b9', 'committer_username': 'andreperezmaselco', 'committer_name': 'André', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 11, 11, 36, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': '415e16923e412f5dd7838ebaf2b05b09e7a7f21d', 'committer_username': 'andreperezmaselco', 'committer_name': 'André', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 11, 11, 36, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2312fb0e8784c344014e2eee77ed4741c7afd6c0', 'committer_username': 'andreperezmaselco', 'committer_name': 'André', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 11, 11, 36, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3b57991def6e30c9fcb42d8ae79da7f5714c91ca', 'committer_username': 'andreperezmaselco', 'committer_name': 'André', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 11, 11, 36, 55, tzinfo=datetime.timezone.utc)}]",André,20969363,,User,,4,,0,0
383056138,spirv-fuzz: Refactor FuzzerPass::ApplyTransformation code duplication,"In this PR, the duplicated scope of  `FuzzerPass::ApplyTransformation` was replaced by its call.",True,3206,https://api.github.com/repos/KhronosGroup/SPIRV-Tools/pulls/3206,https://github.com/KhronosGroup/SPIRV-Tools/pull/3206,closed,7,38,6,1,0,0,0,0,[],2020-03-03 16:38:55+00:00,2020-03-04 06:56:38+00:00,51463.0,14:17:43,[],"[{'commit_sha': 'aad5228eda612e56666356854bdfabf9015ab20b', 'committer_username': 'andreperezmaselco', 'committer_name': 'André', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 11, 11, 36, 55, tzinfo=datetime.timezone.utc)}]",André,20969363,,User,,4,,0,0
385292945,spirv-fuzz: Allow OpPhi operand to be replaced with a composite synonym,"In this PR, the class `FuzzerPassApplyIdSynonyms` was updated to allow `OpPhi` operand to be replaced with a composite synonym.

Fixes #3209.",True,3221,https://api.github.com/repos/KhronosGroup/SPIRV-Tools/pulls/3221,https://github.com/KhronosGroup/SPIRV-Tools/pull/3221,closed,23,8,1,3,0,16,0,0,[],2020-03-08 17:40:25+00:00,2020-03-09 16:16:19+00:00,81354.0,22:35:54,"[{'comment_id': 389413806, 'comment_body': 'Could you replace 84-86 with a single call to RemoveAtRandomIndex (so that the synonym_index temporary disappears)?', 'comment_created': datetime.datetime(2020, 3, 8, 22, 46, 49, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 389414542, 'comment_body': 'I suggest you restructure the following as:\r\n\r\nif (synonym\'s index size > 0 && cannot insert instruction before opcode && opcode is not OpPhi) {\r\n  continue;\r\n}\r\n\r\nif (id is not available at use) {\r\n  continue;\r\n}\r\n\r\nThen start doing what is currently at line 131: ""// We either replace the use with an id known to be synonymous (when""\r\n\r\nYou can then fold your new work on OpPhi into the \'else\' branch that currently starts on line 139: it should be possible to just apply the composite extract with a different instruction descriptor depending on whether or not the use instruction is an OpPhi.  In the case that it is an OpPhi you need to get an instruction descriptor for the parent block\'s terminator (the code for getting the parent block looks good).', 'comment_created': datetime.datetime(2020, 3, 8, 22, 53, 46, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 389414743, 'comment_body': ""Using the terminator is basically correct.  However, the penultimate instruction in the block might be a merge instruction (OpLoopMerge or OpSelectionMerge), in which case you'd need to insert before that instruction, since you can't have an instruction after a merge instruction but before a block terminator.  I believe BasicBlock has methods to check whether there is a merge instruction and get it if so."", 'comment_created': datetime.datetime(2020, 3, 8, 22, 56, 27, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 389487192, 'comment_body': 'I would prefer you to leave this uninitialized, and then to set it to \'synonym_to_try->object()\' only in the \'else\' branch of the \'if\' statement that follows.  I\'m not a big fan of ""set it to this by default, then update it if needed"" code (though sometimes that can be convenient).', 'comment_created': datetime.datetime(2020, 3, 9, 6, 54, 58, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 389487300, 'comment_body': ""Rename to 'instruction_to_insert_before'.\r\n\r\nAnd similarly, leave it uninitialized and initialize it to the appropriate thing in the 'then' and 'else' branches of the 'if' that follows."", 'comment_created': datetime.datetime(2020, 3, 9, 6, 55, 25, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 389487855, 'comment_body': ""Rename to 'parent_block_id' - similar for the other variables."", 'comment_created': datetime.datetime(2020, 3, 9, 6, 57, 47, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 389488335, 'comment_body': 'I would replace all this with:\r\n\r\ninstruction_to_insert_before = parent_block->GetMergeInst() ? parent_block->GetMergeInst() : parent_block->terminator();\r\n\r\nthough I guess this just comes down to taste.', 'comment_created': datetime.datetime(2020, 3, 9, 6, 59, 50, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 389613482, 'comment_body': 'I thought about it, but as I would call the function `GetMergeInst` twice, I preferred to use the `if` statement.', 'comment_created': datetime.datetime(2020, 3, 9, 11, 54, 22, tzinfo=datetime.timezone.utc), 'commenter': 'andreperezmaselco', 'type': 'User'}, {'comment_id': 389613594, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 3, 9, 11, 54, 41, tzinfo=datetime.timezone.utc), 'commenter': 'andreperezmaselco', 'type': 'User'}, {'comment_id': 389614079, 'comment_body': 'Do I initialize it to `nullptr`? Because it is a pointer to an instruction object.', 'comment_created': datetime.datetime(2020, 3, 9, 11, 55, 43, tzinfo=datetime.timezone.utc), 'commenter': 'andreperezmaselco', 'type': 'User'}, {'comment_id': 389615283, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 3, 9, 11, 58, 13, tzinfo=datetime.timezone.utc), 'commenter': 'andreperezmaselco', 'type': 'User'}, {'comment_id': 389615379, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 3, 9, 11, 58, 26, tzinfo=datetime.timezone.utc), 'commenter': 'andreperezmaselco', 'type': 'User'}, {'comment_id': 389622906, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 3, 9, 12, 15, 59, tzinfo=datetime.timezone.utc), 'commenter': 'andreperezmaselco', 'type': 'User'}, {'comment_id': 389706315, 'comment_body': 'Either is fine, but I have a slight preference for not initializing it.  The reason is that both branches should initialize it.  If you forget in one of the branches, a pedantic compiler will complain because there are paths where it remains uninitialized.  If you initialize it to nullptr then it is initialized along every path, so if you accidentally forget to assign to it the compiler will not complain.  See what I mean?', 'comment_created': datetime.datetime(2020, 3, 9, 14, 6, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 389707596, 'comment_body': 'Yeah, I know what you mean.', 'comment_created': datetime.datetime(2020, 3, 9, 14, 7, 8, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 389829299, 'comment_body': 'Yes, I understood.', 'comment_created': datetime.datetime(2020, 3, 9, 17, 3, 16, tzinfo=datetime.timezone.utc), 'commenter': 'andreperezmaselco', 'type': 'User'}]","[{'commit_sha': 'e3b69a9869e4f57323b7a5836738a38b221743eb', 'committer_username': 'andreperezmaselco', 'committer_name': 'André', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 11, 11, 36, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7e38c2b63e0deef9658715e5b4551d98962f2eb0', 'committer_username': 'andreperezmaselco', 'committer_name': 'André', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 11, 11, 36, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b791810031bf78a6edd521c3bcf492e10893808d', 'committer_username': 'andreperezmaselco', 'committer_name': 'André', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 11, 11, 36, 55, tzinfo=datetime.timezone.utc)}]",André,20969363,,User,,4,,0,0
421497506,Fix function use,This PR fixes a function use of a `Instruction` object.,True,3372,https://api.github.com/repos/KhronosGroup/SPIRV-Tools/pulls/3372,https://github.com/KhronosGroup/SPIRV-Tools/pull/3372,closed,2,2,2,1,0,0,0,0,[],2020-05-21 18:06:19+00:00,2020-05-26 11:28:03+00:00,408104.0,"4 days, 17:21:44",[],"[{'commit_sha': '1a3c2ed68b2c8668960defd6fddf30b908a366ae', 'committer_username': 'andreperezmaselco', 'committer_name': 'André', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 11, 11, 36, 55, tzinfo=datetime.timezone.utc)}]",André,20969363,,User,,4,,0,0
422302955,Support bit width argument for int and float types,This PR add support to pass bit width of integer and float types as argument.,True,3378,https://api.github.com/repos/KhronosGroup/SPIRV-Tools/pulls/3378,https://github.com/KhronosGroup/SPIRV-Tools/pull/3378,closed,84,80,6,3,0,0,0,0,[],2020-05-23 17:26:29+00:00,2020-05-26 14:59:11+00:00,250362.0,"2 days, 21:32:42",[],"[{'commit_sha': 'c2d0e5d6a19a81524077b6de74467ef28ed4ab19', 'committer_username': 'andreperezmaselco', 'committer_name': 'André', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 11, 11, 36, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fbb066c8bf5b6290c289f52b4a550eef5c7217e6', 'committer_username': 'andreperezmaselco', 'committer_name': 'André', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 11, 11, 36, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3fd75e816b1d3705fc6ce85d76925ab8b8ca7fed', 'committer_username': 'andreperezmaselco', 'committer_name': 'André', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 11, 11, 36, 55, tzinfo=datetime.timezone.utc)}]",André,20969363,,User,,4,,0,0
425922632,spirv-fuzz: Fix assertion failure related to transformation applicability,"This change fixes an assertion failure related to the push
id through variable transformation. In the fuzzer pass class
it was missing the `IdIsAvailableBeforeInstruction` condition
that is checked in the `IsApplicable` function.",True,3385,https://api.github.com/repos/KhronosGroup/SPIRV-Tools/pulls/3385,https://github.com/KhronosGroup/SPIRV-Tools/pull/3385,closed,12,3,1,1,1,0,0,0,[],2020-06-01 11:32:16+00:00,2020-06-05 11:30:51+00:00,345515.0,"3 days, 23:58:35",[],"[{'commit_sha': '3aa86fad85546e54726dbc90294db16af9b53378', 'committer_username': 'andreperezmaselco', 'committer_name': 'André', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 11, 11, 36, 55, tzinfo=datetime.timezone.utc)}]",André,20969363,,User,,4,,0,0
426601323,spirv-fuzz: Fix instruction function use,"This change replaces the instruction function `GetSingleWordOperand`
with `GetSingleWordInOperand`. Debugging spirv-fuzz, `GetSingleWordOperand`
was returning the result id of an OpLoad instruction with memory operands.",True,3390,https://api.github.com/repos/KhronosGroup/SPIRV-Tools/pulls/3390,https://github.com/KhronosGroup/SPIRV-Tools/pull/3390,closed,1,1,1,1,1,0,0,0,[],2020-06-02 13:53:50+00:00,2020-06-05 11:29:23+00:00,250533.0,"2 days, 21:35:33",[],"[{'commit_sha': '20cbf8e737d03208d24bb8e4c5b655c9837d08f6', 'committer_username': 'andreperezmaselco', 'committer_name': 'André', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 11, 11, 36, 55, tzinfo=datetime.timezone.utc)}]",André,20969363,,User,,4,,0,0
437257833,spirv-fuzz: Implement the OpMatrixTimesScalar linear algebra case,"This PR implements the `OpMatrixTimesScalar` case for the
replace linear algebra instruction transformation.",True,3450,https://api.github.com/repos/KhronosGroup/SPIRV-Tools/pulls/3450,https://github.com/KhronosGroup/SPIRV-Tools/pull/3450,closed,383,3,5,1,0,0,0,0,[],2020-06-19 19:12:27+00:00,2020-06-26 14:54:34+00:00,589327.0,"6 days, 19:42:07",[],"[{'commit_sha': 'e4a957b884f6a7b1bd8e58f98f80f50ed9b7622e', 'committer_username': 'andreperezmaselco', 'committer_name': 'André', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 11, 11, 36, 55, tzinfo=datetime.timezone.utc)}]",André,20969363,,User,,4,,0,0
443023233,spirv-fuzz: Add variables with workgroup storage class,Fixes #3274.,True,3485,https://api.github.com/repos/KhronosGroup/SPIRV-Tools/pulls/3485,https://github.com/KhronosGroup/SPIRV-Tools/pull/3485,closed,32,8,4,3,0,3,0,0,[],2020-07-01 22:19:32+00:00,2020-07-07 22:46:48+00:00,520036.0,"6 days, 0:27:16","[{'comment_id': 450870036, 'comment_body': ""Instead of hard-coding this as 50:50, could you add a constant to FuzzerContext for the probability of choosing workgroup storage class for a variable?  I'm fine with it being 50:50 by default, but I'd like to give it a name so that we can control it later."", 'comment_created': datetime.datetime(2020, 7, 7, 13, 37, 9, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 450870213, 'comment_body': 'Nit: I prefer ""return"" since there\'s no more work to do.', 'comment_created': datetime.datetime(2020, 7, 7, 13, 37, 24, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 450947514, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 7, 7, 15, 21, 1, tzinfo=datetime.timezone.utc), 'commenter': 'andreperezmaselco', 'type': 'User'}]","[{'commit_sha': '2700fb424a8fd37f69ae1720b007655667e7a6f8', 'committer_username': 'andreperezmaselco', 'committer_name': 'André', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 11, 11, 36, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd4e76785bd4ca2761230c3f9689d425289b8bfc4', 'committer_username': 'andreperezmaselco', 'committer_name': 'André', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 11, 11, 36, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2dc4ef978e253de57e0c376e719fd316ec25f0a1', 'committer_username': 'andreperezmaselco', 'committer_name': 'André', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 11, 11, 36, 55, tzinfo=datetime.timezone.utc)}]",André,20969363,,User,,4,,0,0
444895431,spirv-fuzz: Implement the OpVectorTimesMatrix linear algebra case,"This PR implements the `OpVectorTimesMatrix` case for the
replace linear algebra instruction transformation.",True,3489,https://api.github.com/repos/KhronosGroup/SPIRV-Tools/pulls/3489,https://github.com/KhronosGroup/SPIRV-Tools/pull/3489,closed,481,1,5,2,0,0,0,0,[],2020-07-06 16:55:25+00:00,2020-07-07 13:29:49+00:00,74064.0,20:34:24,[],"[{'commit_sha': '9b138989f1bf58933537b727cf653660f2151874', 'committer_username': 'andreperezmaselco', 'committer_name': 'André', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 11, 11, 36, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': '988fdf749909f8fff195469a22b2cb65182432eb', 'committer_username': 'andreperezmaselco', 'committer_name': 'André', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 11, 11, 36, 55, tzinfo=datetime.timezone.utc)}]",André,20969363,,User,,4,,0,0
446284647,spirv-fuzz: Implement the OpMatrixTimesVector linear algebra case,"This PR implements the `OpMatrixTimesVector` case for the
replace linear algebra instruction transformation.",True,3500,https://api.github.com/repos/KhronosGroup/SPIRV-Tools/pulls/3500,https://github.com/KhronosGroup/SPIRV-Tools/pull/3500,closed,480,1,5,1,0,0,0,0,[],2020-07-08 14:33:36+00:00,2020-07-09 07:56:09+00:00,62553.0,17:22:33,[],"[{'commit_sha': '9f607f81ea1bf92652056eb4e57ad4fd86dc6fab', 'committer_username': 'andreperezmaselco', 'committer_name': 'André', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 11, 11, 36, 55, tzinfo=datetime.timezone.utc)}]",André,20969363,,User,,4,,0,0
447827122,spirv-fuzz: Support OpPhi when replacing boolean constant operand,Fixes #2902.,True,3518,https://api.github.com/repos/KhronosGroup/SPIRV-Tools/pulls/3518,https://github.com/KhronosGroup/SPIRV-Tools/pull/3518,closed,98,66,3,1,0,0,0,0,[],2020-07-11 23:02:12+00:00,2020-07-14 09:27:16+00:00,210304.0,"2 days, 10:25:04",[],"[{'commit_sha': 'a8e8d6e86d2730d19a78cf00b6d1d48956d1b218', 'committer_username': 'andreperezmaselco', 'committer_name': 'André', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 11, 11, 36, 55, tzinfo=datetime.timezone.utc)}]",André,20969363,,User,,4,,0,0
447927401,spirv-fuzz: Support adding dead break from back-edge block,Fixes #2577.,True,3519,https://api.github.com/repos/KhronosGroup/SPIRV-Tools/pulls/3519,https://github.com/KhronosGroup/SPIRV-Tools/pull/3519,closed,146,15,4,3,0,2,0,0,[],2020-07-12 17:06:34+00:00,2020-07-14 11:32:17+00:00,152743.0,"1 day, 18:25:43","[{'comment_id': 453523502, 'comment_body': '""is in fact loop header"" -> ""is a loop header""', 'comment_created': datetime.datetime(2020, 7, 13, 9, 38, 12, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 453662516, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 7, 13, 13, 48, 13, tzinfo=datetime.timezone.utc), 'commenter': 'andreperezmaselco', 'type': 'User'}]","[{'commit_sha': '87bb551e9e71f62c09d6af41c20fa80bc27173bc', 'committer_username': 'andreperezmaselco', 'committer_name': 'André', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 11, 11, 36, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': '08ad6a1284469705b6a135d48150059099781f0e', 'committer_username': 'andreperezmaselco', 'committer_name': 'André', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 11, 11, 36, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ea085aa08a51afa1552d12a38828e15c6b7a3d0d', 'committer_username': 'andreperezmaselco', 'committer_name': 'André', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 11, 11, 36, 55, tzinfo=datetime.timezone.utc)}]",André,20969363,,User,,4,,0,0
447951111,spirv-fuzz: Fix instruction insertion issue,Fixes #3520.,True,3521,https://api.github.com/repos/KhronosGroup/SPIRV-Tools/pulls/3521,https://github.com/KhronosGroup/SPIRV-Tools/pull/3521,closed,25,11,2,3,0,0,0,0,[],2020-07-12 20:33:18+00:00,2020-07-14 16:45:53+00:00,159155.0,"1 day, 20:12:35",[],"[{'commit_sha': '2662776adff6e8185ed60f1f4d81907bbf0315a9', 'committer_username': 'andreperezmaselco', 'committer_name': 'André', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 11, 11, 36, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': '31b61eca6807d7ba1df90d3365f733bb92ea130b', 'committer_username': 'andreperezmaselco', 'committer_name': 'André', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 11, 11, 36, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c468e4f5ea5c141ce1cf064a0a4ef67b0df01093', 'committer_username': 'andreperezmaselco', 'committer_name': 'André', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 11, 11, 36, 55, tzinfo=datetime.timezone.utc)}]",André,20969363,,User,,4,,0,0
448583116,spirv-fuzz: Implement the OpMatrixTimesMatrix linear algebra case,"This PR implements the `OpMatrixTimesMatrix` case for the
replace linear algebra instruction transformation.",True,3527,https://api.github.com/repos/KhronosGroup/SPIRV-Tools/pulls/3527,https://github.com/KhronosGroup/SPIRV-Tools/pull/3527,closed,729,1,5,2,0,0,0,0,[],2020-07-14 01:04:58+00:00,2020-07-14 16:20:09+00:00,54911.0,15:15:11,[],"[{'commit_sha': 'ac2023ab4f6574c781fa3fb5bbf557395beaffdd', 'committer_username': 'andreperezmaselco', 'committer_name': 'André', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 11, 11, 36, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4afea298e7e295f2f7c413ee33e82deefee4b06c', 'committer_username': 'andreperezmaselco', 'committer_name': 'André', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 11, 11, 36, 55, tzinfo=datetime.timezone.utc)}]",André,20969363,,User,,4,,0,0
456522355,spirv-fuzz: Add condition to make functions livesafe,Fixes #3162.,True,3587,https://api.github.com/repos/KhronosGroup/SPIRV-Tools/pulls/3587,https://github.com/KhronosGroup/SPIRV-Tools/pull/3587,closed,21,54,2,3,0,4,0,0,[],2020-07-24 22:57:52+00:00,2020-07-28 00:02:00+00:00,263048.0,"3 days, 1:04:08","[{'comment_id': 460910052, 'comment_body': ""I suggest changing to:\r\n\r\nIf the loop's merge block is unreachable, then there are no constraints on where the merge block appears in relation to the blocks of the loop.  This means we need to be careful when adding a branch from the back-edge block to the merge block: the branch might make the loop merge reachable, and it might then be dominated by the loop header and possibly by other blocks in the loop.  Since a block needs to appear before those blocks it strictly dominates, this could make the module invalid.  To avoid this problem we bail out in the case where the loop header does not dominate the loop merge."", 'comment_created': datetime.datetime(2020, 7, 27, 13, 58, 51, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 460927929, 'comment_body': 'Can you add a brief comment above this assertion explaining (in terms of unreachability) why we expect IsApplicable to fail?', 'comment_created': datetime.datetime(2020, 7, 27, 14, 23, 50, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 460966530, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 7, 27, 15, 15, 44, tzinfo=datetime.timezone.utc), 'commenter': 'andreperezmaselco', 'type': 'User'}, {'comment_id': 460967488, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 7, 27, 15, 17, 6, tzinfo=datetime.timezone.utc), 'commenter': 'andreperezmaselco', 'type': 'User'}]","[{'commit_sha': 'db4c2741a1445ba3f6c8107bc92b10cce690e76f', 'committer_username': 'andreperezmaselco', 'committer_name': 'André', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 11, 11, 36, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2112465ad9757e6cbeedd1a3fbfbbd1aef92fcf5', 'committer_username': 'andreperezmaselco', 'committer_name': 'André', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 11, 11, 36, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': '638910612b68c357fe60fbc50d1657dc425368cb', 'committer_username': 'andreperezmaselco', 'committer_name': 'André', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 11, 11, 36, 55, tzinfo=datetime.timezone.utc)}]",André,20969363,,User,,4,,0,0
456764698,spirv-fuzz: Implement the OpTranspose linear algebra case,"This PR implements the `OpTranspose` case for the
replace linear algebra instruction transformation.",True,3589,https://api.github.com/repos/KhronosGroup/SPIRV-Tools/pulls/3589,https://github.com/KhronosGroup/SPIRV-Tools/pull/3589,closed,431,3,5,1,0,0,0,0,[],2020-07-26 15:23:13+00:00,2020-07-27 18:19:14+00:00,96961.0,"1 day, 2:56:01",[],"[{'commit_sha': '87bb72a6fadd30332f536be3085b94b7e0d6f929', 'committer_username': 'andreperezmaselco', 'committer_name': 'André', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 11, 11, 36, 55, tzinfo=datetime.timezone.utc)}]",André,20969363,,User,,4,,0,0
458132618,spirv-opt: Improve the code of the Instruction class,"This PR makes some improvements to the source code of the Instruction class,
choosing better names for variables and avoiding unnecessary function calls.",True,3610,https://api.github.com/repos/KhronosGroup/SPIRV-Tools/pulls/3610,https://github.com/KhronosGroup/SPIRV-Tools/pull/3610,closed,35,32,2,2,4,11,0,0,[],2020-07-29 00:57:32+00:00,2020-08-05 19:28:06+00:00,671434.0,"7 days, 18:30:34","[{'comment_id': 462302456, 'comment_body': 'The argument is not necessarily an id.  It could be a storage class, a literal, or various other things.', 'comment_created': datetime.datetime(2020, 7, 29, 13, 35, 14, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 462365512, 'comment_body': ""I agree with @afd on this.  Please leave the call to the access function.  They should be inlined, so it won't have a performance difference.  The idea is that if we want to change the way we get the opcode, we only have to change the one spot."", 'comment_created': datetime.datetime(2020, 7, 29, 14, 57, 32, tzinfo=datetime.timezone.utc), 'commenter': 's-perron', 'type': 'User'}, {'comment_id': 462366388, 'comment_body': 'I agree that ""i"" is not a good name.  ""instruction"" is fine.  ""inst"" would also be fine.  It is a common enough short form.', 'comment_created': datetime.datetime(2020, 7, 29, 14, 58, 45, tzinfo=datetime.timezone.utc), 'commenter': 's-perron', 'type': 'User'}, {'comment_id': 462367172, 'comment_body': 'Even though our official style guide does not require the braces, I prefer them as well.  Thanks for adding them.', 'comment_created': datetime.datetime(2020, 7, 29, 14, 59, 44, tzinfo=datetime.timezone.utc), 'commenter': 's-perron', 'type': 'User'}, {'comment_id': 462368214, 'comment_body': 'Same here.  This is not always an id.', 'comment_created': datetime.datetime(2020, 7, 29, 15, 1, 7, tzinfo=datetime.timezone.utc), 'commenter': 's-perron', 'type': 'User'}, {'comment_id': 462380752, 'comment_body': 'We might sometimes end up with code like this because it is easier to add a break point that breaks anytime this function returns true.  You break on ""return true"".  With your code, we would have to add a conditional breakpoint, which is much more tedious to add.\r\n\r\nThe change looks cleaner, so this is another example of something that we treat as a personal preference.', 'comment_created': datetime.datetime(2020, 7, 29, 15, 17, 54, tzinfo=datetime.timezone.utc), 'commenter': 's-perron', 'type': 'User'}, {'comment_id': 464447610, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 8, 3, 14, 25, 17, tzinfo=datetime.timezone.utc), 'commenter': 'andreperezmaselco', 'type': 'User'}, {'comment_id': 464448121, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 8, 3, 14, 26, 1, tzinfo=datetime.timezone.utc), 'commenter': 'andreperezmaselco', 'type': 'User'}, {'comment_id': 464453138, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 8, 3, 14, 33, 37, tzinfo=datetime.timezone.utc), 'commenter': 'andreperezmaselco', 'type': 'User'}, {'comment_id': 464478169, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 8, 3, 15, 12, 24, tzinfo=datetime.timezone.utc), 'commenter': 'andreperezmaselco', 'type': 'User'}, {'comment_id': 464478266, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 8, 3, 15, 12, 34, tzinfo=datetime.timezone.utc), 'commenter': 'andreperezmaselco', 'type': 'User'}]","[{'commit_sha': '683eb5cebd4ffa679a907f3c4ee14b23f5b48252', 'committer_username': 'andreperezmaselco', 'committer_name': 'André', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 11, 11, 36, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': '092756e1a396d5057dba10556d69e604118f2744', 'committer_username': 'andreperezmaselco', 'committer_name': 'André', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 11, 11, 36, 55, tzinfo=datetime.timezone.utc)}]",André,20969363,,User,,4,,0,0
458603542,spirv-fuzz: Implement the OpOuterProduct linear algebra case,Fixes #3354.,True,3617,https://api.github.com/repos/KhronosGroup/SPIRV-Tools/pulls/3617,https://github.com/KhronosGroup/SPIRV-Tools/pull/3617,closed,408,38,5,3,0,0,0,0,[],2020-07-29 18:18:51+00:00,2020-07-29 22:46:57+00:00,16086.0,4:28:06,[],"[{'commit_sha': 'f4677c563893638ed505c8111ab4e9efec4d0ac7', 'committer_username': 'andreperezmaselco', 'committer_name': 'André', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 11, 11, 36, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8ba05495678a25d513bf7050cf25dc6c34d3fcd1', 'committer_username': 'andreperezmaselco', 'committer_name': 'André', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 11, 11, 36, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cdac610723715cbfdf4e6880eb68bb8aa08b8fe7', 'committer_username': 'andreperezmaselco', 'committer_name': 'André', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 11, 11, 36, 55, tzinfo=datetime.timezone.utc)}]",André,20969363,,User,,4,,0,0
463363931,spirv-fuzz: iterate over blocks in replace linear algebra pass,"This PR changes the way the fuzzer pass iterates over the module instructions.
It avoids iterating over non-relevant instructions for the replace linear algebra transformation.",True,3654,https://api.github.com/repos/KhronosGroup/SPIRV-Tools/pulls/3654,https://github.com/KhronosGroup/SPIRV-Tools/pull/3654,closed,20,16,1,1,0,0,0,0,[],2020-08-05 12:52:22+00:00,2020-08-06 12:00:18+00:00,83276.0,23:07:56,[],"[{'commit_sha': '43551f94ecd3f588302351a5bdf75512a9552620', 'committer_username': 'andreperezmaselco', 'committer_name': 'André', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 11, 11, 36, 55, tzinfo=datetime.timezone.utc)}]",André,20969363,,User,,4,,0,0
464263153,spirv-fuzz: Ignore specialization constants,"`FuzzerPassInterchangeSignednessOfIntegerOperands` and `FuzzerPassInterchangeZeroLikeConstants` both included specialization constants when trying to find integer constants with known values. However, this is incorrect behavior because we do not know the value of specialization constants. Furthermore, ConstantManager does not support them, and this led to crashes where we assumed we could look up specialization constants via the ConstantManager.

This change fixes both passes to ignore specialization constants.

Fixes #3663.
",True,3664,https://api.github.com/repos/KhronosGroup/SPIRV-Tools/pulls/3664,https://github.com/KhronosGroup/SPIRV-Tools/pull/3664,closed,14,1,2,6,2,3,0,0,[],2020-08-06 21:04:18+00:00,2020-08-12 17:59:47+00:00,507329.0,"5 days, 20:55:29","[{'comment_id': 469215632, 'comment_body': 'Sorry for missing this before but I think the more accurate comment is:\r\n\r\n|id| must not be a specialization constant because we do not know the value of specialization constants.', 'comment_created': datetime.datetime(2020, 8, 12, 12, 20, 34, tzinfo=datetime.timezone.utc), 'commenter': 'paulthomson', 'type': 'User'}, {'comment_id': 469215872, 'comment_body': ""Even if the constant manager could handle them, I don't think we could use them here. "", 'comment_created': datetime.datetime(2020, 8, 12, 12, 21, 2, tzinfo=datetime.timezone.utc), 'commenter': 'paulthomson', 'type': 'User'}, {'comment_id': 469226608, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 8, 12, 12, 35, 57, tzinfo=datetime.timezone.utc), 'commenter': 'andreperezmaselco', 'type': 'User'}]","[{'commit_sha': 'cda3fbc804a878cb55784b2827d5c7233d3e7358', 'committer_username': 'andreperezmaselco', 'committer_name': 'André', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 11, 11, 36, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fe89facf489477886cd045ec05d763b30fe59183', 'committer_username': 'andreperezmaselco', 'committer_name': 'André', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 11, 11, 36, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': '68ffe21b2a3d1b2506f612dbf176099a975b037a', 'committer_username': 'andreperezmaselco', 'committer_name': 'André', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 11, 11, 36, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2796d52208366d51ca14d9a5aa93ad460ea72753', 'committer_username': 'andreperezmaselco', 'committer_name': 'André', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 11, 11, 36, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9137fe95fdb4a30b9d49d9c9ceafe20151dce233', 'committer_username': 'andreperezmaselco', 'committer_name': 'André', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 11, 11, 36, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0e7a6f172d55ff2c0297b5aee0eb40e8e6762e29', 'committer_username': 'andreperezmaselco', 'committer_name': 'André', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 11, 11, 36, 55, tzinfo=datetime.timezone.utc)}]",André,20969363,,User,,4,,0,0
464272229,spirv-fuzz: Fix in operand type assertion,"`spvtools::fuzz::MakeIdUseDescriptorFromUse` asserts if the id use type is
`SPV_OPERAND_TYPE_ID`. The problem is that not all id types are covered by
this condition. The bug was found because the first operand of an `OpControlBarrier`
instruction has `SPV_OPERAND_TYPE_SCOPE_ID` as type. Therefore, to cover
all cases the `spvIsInIdType` function is used.

Fixes #3665.",True,3666,https://api.github.com/repos/KhronosGroup/SPIRV-Tools/pulls/3666,https://github.com/KhronosGroup/SPIRV-Tools/pull/3666,closed,1,1,1,1,1,0,0,0,[],2020-08-06 21:26:26+00:00,2020-08-11 17:37:01+00:00,418235.0,"4 days, 20:10:35",[],"[{'commit_sha': 'c7f99a517fc169fa932ec1b6ae3624748fbeb279', 'committer_username': 'andreperezmaselco', 'committer_name': 'André', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 11, 11, 36, 55, tzinfo=datetime.timezone.utc)}]",André,20969363,,User,,4,,0,0
464612685,spirv-fuzz: Check integer and float width capabilities,"`TransformationAddTypeFloat` and `TransformationAddTypeInt` did not check whether the required capabilities were present when adding 16-bit, 64-bit, and 8-bit types.

This change adds these checks in the `IsApplicable` method of each transformation.

Fixes #3669.",True,3670,https://api.github.com/repos/KhronosGroup/SPIRV-Tools/pulls/3670,https://github.com/KhronosGroup/SPIRV-Tools/pull/3670,closed,297,96,4,6,1,2,0,0,[],2020-08-07 13:42:20+00:00,2020-08-12 21:05:37+00:00,458597.0,"5 days, 7:23:17","[{'comment_id': 469444602, 'comment_body': 'This is really nice. Sorry to not have suggested this sooner, but could you do a switch statement on the width, include cases for all expected widths (16, 32, 64, (and 8 for int)) where the 32 case just has a break with a comment saying something like `// No capabilities needed.` And then in the default case do:\r\n\r\n```\r\nassert(false && ""Unexpected float type width"");\r\nreturn false;\r\n```\r\n\r\nOr something like that. And do the same for TransformationAddTypeInt. ', 'comment_created': datetime.datetime(2020, 8, 12, 18, 4, 55, tzinfo=datetime.timezone.utc), 'commenter': 'paulthomson', 'type': 'User'}, {'comment_id': 469487619, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 8, 12, 19, 23, 22, tzinfo=datetime.timezone.utc), 'commenter': 'andreperezmaselco', 'type': 'User'}]","[{'commit_sha': '8d5eddf1e23bf68dedf1bd4ceb983d817cc0aa28', 'committer_username': 'andreperezmaselco', 'committer_name': 'André', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 11, 11, 36, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e07090dc3f3a91c49c8549eb3dca93ba0f0889d9', 'committer_username': 'andreperezmaselco', 'committer_name': 'André', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 11, 11, 36, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': '74e827d4af83211dc97682c95cde64d32e5c7d92', 'committer_username': 'andreperezmaselco', 'committer_name': 'André', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 11, 11, 36, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': '24570f3fafa01e110cc99ee8a73fd9e555aba80e', 'committer_username': 'andreperezmaselco', 'committer_name': 'André', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 11, 11, 36, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aed04151e13bb5b6884b617c9d88ede94ce5fbe2', 'committer_username': 'andreperezmaselco', 'committer_name': 'André', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 11, 11, 36, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3d376c45b3a4efd65c607a83b462c0e0e2749ba8', 'committer_username': 'andreperezmaselco', 'committer_name': 'André', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 11, 11, 36, 55, tzinfo=datetime.timezone.utc)}]",André,20969363,,User,,4,,0,0
464749516,spirv-fuzz: consider additional access chain instructions,"`TransformationReplaceIdWithSynonym` is careful to avoid replacing id uses that index into a struct with synonyms because the indices must only be `OpConstant` instructions. However, the check only considered `OpAccessChain` instructions, even though the same restriction applies to `OpInBoundsAccessChain`, `OpPtrAccessChain`, etc. 

This change extends the check to include all access chain instructions.

Fixes #3671.",True,3672,https://api.github.com/repos/KhronosGroup/SPIRV-Tools/pulls/3672,https://github.com/KhronosGroup/SPIRV-Tools/pull/3672,closed,9,9,2,2,1,4,0,0,[],2020-08-07 18:21:30+00:00,2020-08-12 20:58:54+00:00,441444.0,"5 days, 2:37:24","[{'comment_id': 467870226, 'comment_body': ""It might be better to make it a separate PR since it changes some code outside of the spirv-fuzz tool. I'm not sure whether this is critical, though. @paulthomson, what do you think?"", 'comment_created': datetime.datetime(2020, 8, 10, 12, 31, 28, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 468474331, 'comment_body': 'I agree. We prefer to let the spirv-opt folks approve changes in their code.', 'comment_created': datetime.datetime(2020, 8, 11, 10, 15, 42, tzinfo=datetime.timezone.utc), 'commenter': 'paulthomson', 'type': 'User'}, {'comment_id': 468474614, 'comment_body': 'But it looks like a good change so I am guessing they will approve.', 'comment_created': datetime.datetime(2020, 8, 11, 10, 16, 12, tzinfo=datetime.timezone.utc), 'commenter': 'paulthomson', 'type': 'User'}, {'comment_id': 468518894, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 8, 11, 11, 45, 42, tzinfo=datetime.timezone.utc), 'commenter': 'andreperezmaselco', 'type': 'User'}]","[{'commit_sha': '4971a74bb02c607a1e1f3e3b83472d27e6b83dff', 'committer_username': 'andreperezmaselco', 'committer_name': 'André', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 11, 11, 36, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8705b144b2375511a63c18474265a5f22dcb0ef9', 'committer_username': 'andreperezmaselco', 'committer_name': 'André', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 11, 11, 36, 55, tzinfo=datetime.timezone.utc)}]",André,20969363,,User,,4,,0,0
466054557,spirv-opt: Add spvOpcodeIsAccessChain,"This PR implements the `spvOpcodeIsAccessChain` function
that checks if the given opcode represents an access chain
instruction.",True,3682,https://api.github.com/repos/KhronosGroup/SPIRV-Tools/pulls/3682,https://github.com/KhronosGroup/SPIRV-Tools/pull/3682,closed,15,0,2,2,1,2,0,0,[],2020-08-11 11:48:53+00:00,2020-08-11 15:21:36+00:00,12763.0,3:32:43,"[{'comment_id': 468563766, 'comment_body': 'Why don\'t you include ""OpInBoundsPtrAccessChain""?', 'comment_created': datetime.datetime(2020, 8, 11, 13, 5, 58, tzinfo=datetime.timezone.utc), 'commenter': 's-perron', 'type': 'User'}, {'comment_id': 468604370, 'comment_body': 'I just missed it because it was not in sequence with the others in the specification.\r\nDone.', 'comment_created': datetime.datetime(2020, 8, 11, 14, 3, 42, tzinfo=datetime.timezone.utc), 'commenter': 'andreperezmaselco', 'type': 'User'}]","[{'commit_sha': '4f3d076c2cc9f617c704811fc9f6f72674080693', 'committer_username': 'andreperezmaselco', 'committer_name': 'André', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 11, 11, 36, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': '81bd4e7b99dcad6fc35d549bfd1e71d4e19f510b', 'committer_username': 'andreperezmaselco', 'committer_name': 'André', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 11, 11, 36, 55, tzinfo=datetime.timezone.utc)}]",André,20969363,,User,,4,,0,0
467405085,spirv-fuzz: Check header dominance when adding dead block,"`TransformationAddDeadBlock` did not check whether the existing block
(that will become a selection header) dominates its successor block (that
will become its merge block).

This change adds the check.

Fixes #3690.
",True,3694,https://api.github.com/repos/KhronosGroup/SPIRV-Tools/pulls/3694,https://github.com/KhronosGroup/SPIRV-Tools/pull/3694,closed,127,53,2,2,0,6,0,0,[],2020-08-13 14:00:26+00:00,2020-08-17 16:47:14+00:00,355608.0,"4 days, 2:46:48","[{'comment_id': 470028969, 'comment_body': 'I think in this case `successor_block_id` is always reachable _from the header block_. I think the spec meant if there is no path from the header block to the merge block.\r\n\r\nThus, I think it is better to remove `IsReachable` check since we might be creating a dead block inside some other dead block. That is, both `existing_block` and `successor_block_id` might be unreahcble from the entry point but there is still a path from the former to the latter. Thus, the former should always dominate the latter.\r\n\r\n@paulthomson, what do you think?', 'comment_created': datetime.datetime(2020, 8, 13, 15, 16, 9, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 470035957, 'comment_body': 'But if `existing_block` is unreachable, then it does not dominates `successor_block_id`.', 'comment_created': datetime.datetime(2020, 8, 13, 15, 25, 47, tzinfo=datetime.timezone.utc), 'commenter': 'andreperezmaselco', 'type': 'User'}, {'comment_id': 470040627, 'comment_body': 'Nice catch! Indeed. I wonder what the dominator analysis has to say about this situation.', 'comment_created': datetime.datetime(2020, 8, 13, 15, 32, 48, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 470053178, 'comment_body': ""That's a bit strange, though. The fact that there are no domination rules if the block is unreachable doesn't make any sense if you think about some instruction, its users and dependencies."", 'comment_created': datetime.datetime(2020, 8, 13, 15, 51, 40, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 470590502, 'comment_body': 'Yes, blocks that are statically unreachable are tricky. I often think we should favour iterating over _reachable_ blocks of a function, rather than all blocks. \r\n\r\nAndre: I think we should require the following:\r\n\r\n\r\n - `existing_block` is reachable: if not, return false\r\n - assert(existing_block->id() != successor_block_id);\r\n - existing_block->id() dominates successor_block_id: if not, return false. \r\n\r\nI suggest ""dominates"" instead of strictly dominates, otherwise we are essentially combining two checks, which can be confusing. I am fairly certain that the blocks are guaranteed to be different as they must both be reachable and we already check that the successor is not a loop header.\r\n\r\nFor the dominates check: I assume this is needed for the case where control flow re-converges before a merge block. E.g. existing_block=a, successor_block=c\r\n\r\n```\r\n selection header\r\n   /      \\\r\n  a       b\r\n   \\     /\r\n      c\r\n      |\r\n merge block\r\n\r\n```\r\n\r\nIf so, please could you add a comment explaining why we need this check:\r\n\r\nEven though we know |successor_block_id| is not a merge block, it might still have multiple predecessors because divergent control flow is allowed to converge early (before the merge block). In this case, when we create the selection construct, its header |existing_block| will not dominate the merge block |successor_block_id|, which is invalid. Thus, |existing_block| must dominate |successor_block_id|.', 'comment_created': datetime.datetime(2020, 8, 14, 12, 21, 31, tzinfo=datetime.timezone.utc), 'commenter': 'paulthomson', 'type': 'User'}, {'comment_id': 471463695, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 8, 17, 13, 4, 6, tzinfo=datetime.timezone.utc), 'commenter': 'andreperezmaselco', 'type': 'User'}]","[{'commit_sha': 'f4a5bf74182ccaf11b2cc35bd94cf55bfd3ac28b', 'committer_username': 'andreperezmaselco', 'committer_name': 'André', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 11, 11, 36, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8147ea2382b5297fe3c2fc51e58b23942de12951', 'committer_username': 'andreperezmaselco', 'committer_name': 'André', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 11, 11, 36, 55, tzinfo=datetime.timezone.utc)}]",André,20969363,,User,,4,,0,0
468339007,spirv-fuzz: Check termination instructions when donating modules,"The `FuzzerPassDonateModules` was not checking if the function to donate had
a block with `OpKill` or `OpUnreachable` as its termination instruction.

Fixes #3709.",True,3710,https://api.github.com/repos/KhronosGroup/SPIRV-Tools/pulls/3710,https://github.com/KhronosGroup/SPIRV-Tools/pull/3710,closed,21,11,3,2,1,2,0,0,[],2020-08-15 16:30:22+00:00,2020-08-17 22:30:08+00:00,194386.0,"2 days, 5:59:46","[{'comment_id': 471631144, 'comment_body': 'I understand now. You are checking if the function really contains OpKill or OpUnreachable. If not, then there is no need to create the zero constant. There was no bug. This is just an optimization to avoid creating the constant. \r\n\r\nI think this might be a case where having a function in fuzzer util to check if a function contains OpKill or OpUnreachable would be nicer. Then you could just do something like:\r\n\r\n```\r\nuint32_t kill_unreachable_return_value_id = 0;\r\nauto function_return_type_inst =\r\n    donor_ir_context->get_def_use_mgr()->GetDef(\r\n        function_to_donate.type_id());\r\nif (function_return_type_inst->opcode() != SpvOpTypeVoid \r\n     && fuzzerutil::FunctionContainsOpKillOrUnreachable(function_to_donate)) {\r\n  kill_unreachable_return_value_id = FindOrCreateZeroConstant(\r\n    original_id_to_donated_id.at(function_return_type_inst->result_id()),\r\n    false);\r\n}\r\n\r\n\r\n```', 'comment_created': datetime.datetime(2020, 8, 17, 17, 15, 43, tzinfo=datetime.timezone.utc), 'commenter': 'paulthomson', 'type': 'User'}, {'comment_id': 471704256, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 8, 17, 18, 43, 6, tzinfo=datetime.timezone.utc), 'commenter': 'andreperezmaselco', 'type': 'User'}]","[{'commit_sha': '4b2a08defcf87b8ea4eb78043ed1f12de8b271fd', 'committer_username': 'andreperezmaselco', 'committer_name': 'André', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 11, 11, 36, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7948cd3feaaaf27eaa08b81de4728db2ed4d1012', 'committer_username': 'andreperezmaselco', 'committer_name': 'André', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 11, 11, 36, 55, tzinfo=datetime.timezone.utc)}]",André,20969363,,User,,4,,0,0
468368553,spirv-opt: Implement opt::Function::HasEarlyReturn function,"This PR implements the `opt::Function::HasEarlyReturn` function that checks
if the given `opt::Function` object has a return block other than the exit block.",True,3711,https://api.github.com/repos/KhronosGroup/SPIRV-Tools/pulls/3711,https://github.com/KhronosGroup/SPIRV-Tools/pull/3711,closed,70,1,3,2,4,0,0,0,[],2020-08-15 21:53:03+00:00,2020-08-18 13:31:26+00:00,229103.0,"2 days, 15:38:23",[],"[{'commit_sha': '492e21c1b054e87d93bddad87717d03462d0eb96', 'committer_username': 'andreperezmaselco', 'committer_name': 'André', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 11, 11, 36, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': '05fd99a717672ee31c1ce85b432d37a1fdeb03de', 'committer_username': 'andreperezmaselco', 'committer_name': 'André', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 11, 11, 36, 55, tzinfo=datetime.timezone.utc)}]",André,20969363,,User,,4,,0,0
470524956,spirv-fuzz: Add words instead of logical operands,Fixes #3727.,True,3728,https://api.github.com/repos/KhronosGroup/SPIRV-Tools/pulls/3728,https://github.com/KhronosGroup/SPIRV-Tools/pull/3728,closed,259,177,2,1,0,0,0,0,[],2020-08-20 00:16:40+00:00,2020-08-21 10:14:14+00:00,122254.0,"1 day, 9:57:34",[],"[{'commit_sha': '649a6ce072e17057b5151a4a5472a2940608b1cb', 'committer_username': 'andreperezmaselco', 'committer_name': 'André', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 11, 11, 36, 55, tzinfo=datetime.timezone.utc)}]",André,20969363,,User,,4,,0,0

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
150133859,graphicsfuzz,google/graphicsfuzz,Java,117,561,24,21,720,106,36,18,"[{'id': 515474905, 'number': 1090, 'closed': datetime.datetime(2021, 6, 19, 23, 29, 4, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 11, 4, 15, 51, 19, tzinfo=datetime.timezone.utc), 'time_taken': 19640265.0, 'time_delta': '227 days, 7:37:45', 'additions': 64, 'deletions': 0, 'state': 'closed'}, {'id': 474822727, 'number': 1058, 'closed': datetime.datetime(2020, 8, 28, 17, 22, 20, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 27, 16, 42, 29, tzinfo=datetime.timezone.utc), 'time_taken': 88791.0, 'time_delta': '1 day, 0:39:51', 'additions': 330, 'deletions': 0, 'state': 'closed'}]"
45981801,SPIRV-Tools,KhronosGroup/SPIRV-Tools,C++,546,1042,85,243,4016,399,23,19,"[{'id': 509056905, 'number': 3990, 'closed': datetime.datetime(2020, 11, 3, 10, 48, 30, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 10, 23, 15, 51, 24, tzinfo=datetime.timezone.utc), 'time_taken': 932226.0, 'time_delta': '10 days, 18:57:06', 'additions': 87, 'deletions': 54, 'state': 'closed'}, {'id': 495743520, 'number': 3869, 'closed': datetime.datetime(2020, 10, 23, 13, 59, 9, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 9, 30, 19, 40, 53, tzinfo=datetime.timezone.utc), 'time_taken': 1966696.0, 'time_delta': '22 days, 18:18:16', 'additions': 708, 'deletions': 0, 'state': 'closed'}, {'id': 492132566, 'number': 3841, 'closed': datetime.datetime(2020, 9, 26, 9, 42, 47, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 9, 24, 1, 49, 41, tzinfo=datetime.timezone.utc), 'time_taken': 201186.0, 'time_delta': '2 days, 7:53:06', 'additions': 314, 'deletions': 41, 'state': 'closed'}, {'id': 487984748, 'number': 3810, 'closed': datetime.datetime(2020, 9, 16, 20, 23, 33, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 9, 16, 13, 20, 38, tzinfo=datetime.timezone.utc), 'time_taken': 25375.0, 'time_delta': '7:02:55', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 479910786, 'number': 3775, 'closed': datetime.datetime(2020, 9, 15, 22, 36, 24, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 9, 4, 17, 31, 28, tzinfo=datetime.timezone.utc), 'time_taken': 968696.0, 'time_delta': '11 days, 5:04:56', 'additions': 1030, 'deletions': 3, 'state': 'closed'}, {'id': 478137574, 'number': 3770, 'closed': datetime.datetime(2020, 9, 9, 14, 15, 55, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 9, 2, 20, 7, 39, tzinfo=datetime.timezone.utc), 'time_taken': 583696.0, 'time_delta': '6 days, 18:08:16', 'additions': 25, 'deletions': 13, 'state': 'closed'}, {'id': 470524956, 'number': 3728, 'closed': datetime.datetime(2020, 8, 21, 10, 14, 14, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 20, 0, 16, 40, tzinfo=datetime.timezone.utc), 'time_taken': 122254.0, 'time_delta': '1 day, 9:57:34', 'additions': 259, 'deletions': 177, 'state': 'closed'}, {'id': 468368553, 'number': 3711, 'closed': datetime.datetime(2020, 8, 18, 13, 31, 26, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 15, 21, 53, 3, tzinfo=datetime.timezone.utc), 'time_taken': 229103.0, 'time_delta': '2 days, 15:38:23', 'additions': 70, 'deletions': 1, 'state': 'closed'}, {'id': 468339007, 'number': 3710, 'closed': datetime.datetime(2020, 8, 17, 22, 30, 8, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 15, 16, 30, 22, tzinfo=datetime.timezone.utc), 'time_taken': 194386.0, 'time_delta': '2 days, 5:59:46', 'additions': 21, 'deletions': 11, 'state': 'closed'}, {'id': 467405085, 'number': 3694, 'closed': datetime.datetime(2020, 8, 17, 16, 47, 14, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 13, 14, 0, 26, tzinfo=datetime.timezone.utc), 'time_taken': 355608.0, 'time_delta': '4 days, 2:46:48', 'additions': 127, 'deletions': 53, 'state': 'closed'}, {'id': 466054557, 'number': 3682, 'closed': datetime.datetime(2020, 8, 11, 15, 21, 36, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 11, 11, 48, 53, tzinfo=datetime.timezone.utc), 'time_taken': 12763.0, 'time_delta': '3:32:43', 'additions': 15, 'deletions': 0, 'state': 'closed'}, {'id': 464749516, 'number': 3672, 'closed': datetime.datetime(2020, 8, 12, 20, 58, 54, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 7, 18, 21, 30, tzinfo=datetime.timezone.utc), 'time_taken': 441444.0, 'time_delta': '5 days, 2:37:24', 'additions': 9, 'deletions': 9, 'state': 'closed'}, {'id': 464612685, 'number': 3670, 'closed': datetime.datetime(2020, 8, 12, 21, 5, 37, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 7, 13, 42, 20, tzinfo=datetime.timezone.utc), 'time_taken': 458597.0, 'time_delta': '5 days, 7:23:17', 'additions': 297, 'deletions': 96, 'state': 'closed'}, {'id': 464272229, 'number': 3666, 'closed': datetime.datetime(2020, 8, 11, 17, 37, 1, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 6, 21, 26, 26, tzinfo=datetime.timezone.utc), 'time_taken': 418235.0, 'time_delta': '4 days, 20:10:35', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 464263153, 'number': 3664, 'closed': datetime.datetime(2020, 8, 12, 17, 59, 47, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 6, 21, 4, 18, tzinfo=datetime.timezone.utc), 'time_taken': 507329.0, 'time_delta': '5 days, 20:55:29', 'additions': 14, 'deletions': 1, 'state': 'closed'}, {'id': 463363931, 'number': 3654, 'closed': datetime.datetime(2020, 8, 6, 12, 0, 18, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 5, 12, 52, 22, tzinfo=datetime.timezone.utc), 'time_taken': 83276.0, 'time_delta': '23:07:56', 'additions': 20, 'deletions': 16, 'state': 'closed'}, {'id': 458603542, 'number': 3617, 'closed': datetime.datetime(2020, 7, 29, 22, 46, 57, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 29, 18, 18, 51, tzinfo=datetime.timezone.utc), 'time_taken': 16086.0, 'time_delta': '4:28:06', 'additions': 408, 'deletions': 38, 'state': 'closed'}, {'id': 458132618, 'number': 3610, 'closed': datetime.datetime(2020, 8, 5, 19, 28, 6, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 29, 0, 57, 32, tzinfo=datetime.timezone.utc), 'time_taken': 671434.0, 'time_delta': '7 days, 18:30:34', 'additions': 35, 'deletions': 32, 'state': 'closed'}, {'id': 457199986, 'number': 3597, 'closed': datetime.datetime(2020, 8, 6, 14, 50, 20, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 27, 14, 26, 53, tzinfo=datetime.timezone.utc), 'time_taken': 865407.0, 'time_delta': '10 days, 0:23:27', 'additions': 687, 'deletions': 0, 'state': 'closed'}, {'id': 456764698, 'number': 3589, 'closed': datetime.datetime(2020, 7, 27, 18, 19, 14, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 26, 15, 23, 13, tzinfo=datetime.timezone.utc), 'time_taken': 96961.0, 'time_delta': '1 day, 2:56:01', 'additions': 431, 'deletions': 3, 'state': 'closed'}, {'id': 456522355, 'number': 3587, 'closed': datetime.datetime(2020, 7, 28, 0, 2, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 24, 22, 57, 52, tzinfo=datetime.timezone.utc), 'time_taken': 263048.0, 'time_delta': '3 days, 1:04:08', 'additions': 21, 'deletions': 54, 'state': 'closed'}, {'id': 448583116, 'number': 3527, 'closed': datetime.datetime(2020, 7, 14, 16, 20, 9, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 14, 1, 4, 58, tzinfo=datetime.timezone.utc), 'time_taken': 54911.0, 'time_delta': '15:15:11', 'additions': 729, 'deletions': 1, 'state': 'closed'}, {'id': 447951111, 'number': 3521, 'closed': datetime.datetime(2020, 7, 14, 16, 45, 53, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 12, 20, 33, 18, tzinfo=datetime.timezone.utc), 'time_taken': 159155.0, 'time_delta': '1 day, 20:12:35', 'additions': 25, 'deletions': 11, 'state': 'closed'}, {'id': 447927401, 'number': 3519, 'closed': datetime.datetime(2020, 7, 14, 11, 32, 17, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 12, 17, 6, 34, tzinfo=datetime.timezone.utc), 'time_taken': 152743.0, 'time_delta': '1 day, 18:25:43', 'additions': 146, 'deletions': 15, 'state': 'closed'}, {'id': 447827122, 'number': 3518, 'closed': datetime.datetime(2020, 7, 14, 9, 27, 16, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 11, 23, 2, 12, tzinfo=datetime.timezone.utc), 'time_taken': 210304.0, 'time_delta': '2 days, 10:25:04', 'additions': 98, 'deletions': 66, 'state': 'closed'}, {'id': 447811009, 'number': 3517, 'closed': datetime.datetime(2020, 8, 25, 16, 28, 23, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 11, 20, 4, 29, tzinfo=datetime.timezone.utc), 'time_taken': 3875034.0, 'time_delta': '44 days, 20:23:54', 'additions': 1292, 'deletions': 0, 'state': 'closed'}, {'id': 446284647, 'number': 3500, 'closed': datetime.datetime(2020, 7, 9, 7, 56, 9, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 8, 14, 33, 36, tzinfo=datetime.timezone.utc), 'time_taken': 62553.0, 'time_delta': '17:22:33', 'additions': 480, 'deletions': 1, 'state': 'closed'}, {'id': 444895431, 'number': 3489, 'closed': datetime.datetime(2020, 7, 7, 13, 29, 49, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 6, 16, 55, 25, tzinfo=datetime.timezone.utc), 'time_taken': 74064.0, 'time_delta': '20:34:24', 'additions': 481, 'deletions': 1, 'state': 'closed'}, {'id': 443023233, 'number': 3485, 'closed': datetime.datetime(2020, 7, 7, 22, 46, 48, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 1, 22, 19, 32, tzinfo=datetime.timezone.utc), 'time_taken': 520036.0, 'time_delta': '6 days, 0:27:16', 'additions': 32, 'deletions': 8, 'state': 'closed'}, {'id': 437257833, 'number': 3450, 'closed': datetime.datetime(2020, 6, 26, 14, 54, 34, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 19, 19, 12, 27, tzinfo=datetime.timezone.utc), 'time_taken': 589327.0, 'time_delta': '6 days, 19:42:07', 'additions': 383, 'deletions': 3, 'state': 'closed'}, {'id': 435422720, 'number': 3439, 'closed': datetime.datetime(2020, 7, 8, 16, 7, 5, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 16, 19, 28, 28, tzinfo=datetime.timezone.utc), 'time_taken': 1888717.0, 'time_delta': '21 days, 20:38:37', 'additions': 734, 'deletions': 0, 'state': 'closed'}, {'id': 431272363, 'number': 3412, 'closed': datetime.datetime(2020, 6, 16, 10, 21, 32, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 8, 16, 55, 46, tzinfo=datetime.timezone.utc), 'time_taken': 667546.0, 'time_delta': '7 days, 17:25:46', 'additions': 208, 'deletions': 12, 'state': 'closed'}, {'id': 430125026, 'number': 3411, 'closed': datetime.datetime(2020, 6, 8, 15, 52, 57, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 7, 14, 51, 40, tzinfo=datetime.timezone.utc), 'time_taken': 90077.0, 'time_delta': '1 day, 1:01:17', 'additions': 1, 'deletions': 0, 'state': 'closed'}, {'id': 428563618, 'number': 3402, 'closed': datetime.datetime(2020, 6, 16, 10, 20, 52, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 5, 16, 28, 58, tzinfo=datetime.timezone.utc), 'time_taken': 928314.0, 'time_delta': '10 days, 17:51:54', 'additions': 919, 'deletions': 0, 'state': 'closed'}, {'id': 426601323, 'number': 3390, 'closed': datetime.datetime(2020, 6, 5, 11, 29, 23, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 2, 13, 53, 50, tzinfo=datetime.timezone.utc), 'time_taken': 250533.0, 'time_delta': '2 days, 21:35:33', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 425922632, 'number': 3385, 'closed': datetime.datetime(2020, 6, 5, 11, 30, 51, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 1, 11, 32, 16, tzinfo=datetime.timezone.utc), 'time_taken': 345515.0, 'time_delta': '3 days, 23:58:35', 'additions': 12, 'deletions': 3, 'state': 'closed'}, {'id': 422302955, 'number': 3378, 'closed': datetime.datetime(2020, 5, 26, 14, 59, 11, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 5, 23, 17, 26, 29, tzinfo=datetime.timezone.utc), 'time_taken': 250362.0, 'time_delta': '2 days, 21:32:42', 'additions': 84, 'deletions': 80, 'state': 'closed'}, {'id': 421497506, 'number': 3372, 'closed': datetime.datetime(2020, 5, 26, 11, 28, 3, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 5, 21, 18, 6, 19, tzinfo=datetime.timezone.utc), 'time_taken': 408104.0, 'time_delta': '4 days, 17:21:44', 'additions': 2, 'deletions': 2, 'state': 'closed'}, {'id': 420254779, 'number': 3359, 'closed': datetime.datetime(2020, 5, 29, 15, 43, 39, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 5, 19, 17, 15, 54, tzinfo=datetime.timezone.utc), 'time_taken': 858465.0, 'time_delta': '9 days, 22:27:45', 'additions': 864, 'deletions': 0, 'state': 'closed'}, {'id': 415344556, 'number': 3336, 'closed': datetime.datetime(2020, 5, 14, 10, 38, 34, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 5, 8, 17, 31, tzinfo=datetime.timezone.utc), 'time_taken': 493654.0, 'time_delta': '5 days, 17:07:34', 'additions': 655, 'deletions': 0, 'state': 'closed'}, {'id': 385292945, 'number': 3221, 'closed': datetime.datetime(2020, 3, 9, 16, 16, 19, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 3, 8, 17, 40, 25, tzinfo=datetime.timezone.utc), 'time_taken': 81354.0, 'time_delta': '22:35:54', 'additions': 23, 'deletions': 8, 'state': 'closed'}, {'id': 384525988, 'number': 3211, 'closed': datetime.datetime(2020, 3, 8, 22, 33, 25, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 3, 5, 22, 10, 30, tzinfo=datetime.timezone.utc), 'time_taken': 260575.0, 'time_delta': '3 days, 0:22:55', 'additions': 673, 'deletions': 0, 'state': 'closed'}, {'id': 383056138, 'number': 3206, 'closed': datetime.datetime(2020, 3, 4, 6, 56, 38, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 3, 3, 16, 38, 55, tzinfo=datetime.timezone.utc), 'time_taken': 51463.0, 'time_delta': '14:17:43', 'additions': 7, 'deletions': 38, 'state': 'closed'}, {'id': 382804197, 'number': 3205, 'closed': datetime.datetime(2020, 3, 5, 8, 18, 40, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 3, 3, 8, 12, 28, tzinfo=datetime.timezone.utc), 'time_taken': 173172.0, 'time_delta': '2 days, 0:06:12', 'additions': 699, 'deletions': 2, 'state': 'closed'}]"
