pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
650665702,Deprecate RzSyscallPort and move the existing sysregs to SDB," <!-- Filling this template is mandatory -->

**Your checklist for this pull request**
- [x] I've read the [guidelines for contributing](https://github.com/rizinorg/rizin/blob/master/DEVELOPERS.md) to this repository
- [x] I made sure to follow the project's [coding style](https://github.com/rizinorg/rizin/blob/master/DEVELOPERS.md#code-style)
- [x] I've added tests that prove my fix is effective or that my feature works (if possible)
- [ ] I've updated the documentation and the [rizin book](https://github.com/rizinorg/book) with the relevant information (if needed)

**Detailed description**

`ioports.c` housed `RzSyscallPort`s, which were hardcoded definitions of sysregs which were iteratively searched and
served using `rz_syscall_get_io` and other APIs. These hardcoded values are moved to SDB in this PR.

This PR moves all of those definitions (only Atmega16's 8bit processor actually exists) to SDB, which follows a format like this:

```
SPH=reg
SPH.address=0x3e
SPH.comment=Stack higher bits SP8 SP10
```
Introduced `rz_sysreg_get()` to which you can pass on the type (`mmio/reg`) and the offset to get the port. This is used
where these ports are displayed as comments in `disasm.c`

The MMIO ports and registers are firstly filled into a new struct/module named `RzSysregItem` just after parsing and added to a hash table defined inside `RzSysregDB` where it's paired with the address or the offset where it is found. In `rz_sysreg_get` we are actually searching for the `RzSysregItem::comment` in this hashtable and returns when found. The name of the register is also saved as `RzSysregItem::name` for future endeavors (to be added as flags and such)

**Test plan**
~Although I could return the right values while testing it by passing the ports manually from disasm.c, it doesn't show up as comments yet somehow. There is a test for this, but it is failing now. I am working on it now.~

A representative test for the IO ports is added on one of the AVR binaries.
**Closing issues**

None
",True,1160,https://api.github.com/repos/rizinorg/rizin/pulls/1160,https://github.com/rizinorg/rizin/pull/1160,closed,454,138,11,9,0,9,3,0,"[{'name': 'RzSyscall'}, {'name': 'merge-when-green'}, {'name': 'RzReg'}]",2021-05-22 18:07:47+00:00,2021-06-01 18:01:51+00:00,863644.0,"9 days, 23:54:04","[{'comment_id': 637674406, 'comment_body': 'Overall looks good, but I suggest to load SDB once, during the binary loading of the matching architecture, e.g. in the hashtable and query it instead during the analysis. This way, in case of many queries it will work much faster, especially for complex analysis loops.', 'comment_created': datetime.datetime(2021, 5, 24, 4, 9, 32, tzinfo=datetime.timezone.utc), 'commenter': 'XVilka', 'type': 'User'}, {'comment_id': 641310568, 'comment_body': 'I suggest to change the SDB usage here to the hashtable instead.', 'comment_created': datetime.datetime(2021, 5, 28, 6, 50, 55, tzinfo=datetime.timezone.utc), 'commenter': 'XVilka', 'type': 'User'}, {'comment_id': 642513056, 'comment_body': ""The `address` is probably redundant, since it's the key in the hashtable."", 'comment_created': datetime.datetime(2021, 5, 31, 14, 3, 39, tzinfo=datetime.timezone.utc), 'commenter': 'XVilka', 'type': 'User'}, {'comment_id': 642513481, 'comment_body': 'Just remove this', 'comment_created': datetime.datetime(2021, 5, 31, 14, 4, 20, tzinfo=datetime.timezone.utc), 'commenter': 'XVilka', 'type': 'User'}, {'comment_id': 642535889, 'comment_body': ""Hey, you are right about `address` being redundant. \r\n\r\nBut, I'm not sure about how I'm going to parse it inside `get_sysreg_type` and bring it back to `sdb_load_sysregs`, which is where it's getting inserted into the hashtable."", 'comment_created': datetime.datetime(2021, 5, 31, 14, 40, 9, tzinfo=datetime.timezone.utc), 'commenter': 'officialcjunior', 'type': 'User'}, {'comment_id': 642592775, 'comment_body': 'Combined the functionality of `get_sysreg_type` into `sdb_load_sysregs` and eliminated the redundant variable.', 'comment_created': datetime.datetime(2021, 5, 31, 16, 31, 45, tzinfo=datetime.timezone.utc), 'commenter': 'officialcjunior', 'type': 'User'}, {'comment_id': 643289795, 'comment_body': 'Usually,  in `_free()` functions we allow an argument to be NULL and just return if it is.', 'comment_created': datetime.datetime(2021, 6, 1, 16, 47, 14, tzinfo=datetime.timezone.utc), 'commenter': 'XVilka', 'type': 'User'}, {'comment_id': 645477265, 'comment_body': ""I missed to compare the `type` here. What I mean is, right now the `comment` gets returned whether the type is mmio or io.\r\n\r\nI'll fix it one of the upcoming patches."", 'comment_created': datetime.datetime(2021, 6, 4, 10, 48, 37, tzinfo=datetime.timezone.utc), 'commenter': 'officialcjunior', 'type': 'User'}, {'comment_id': 645478860, 'comment_body': 'yes, remember that we are committing in dev, therefore is normal to do this.', 'comment_created': datetime.datetime(2021, 6, 4, 10, 51, 39, tzinfo=datetime.timezone.utc), 'commenter': 'wargio', 'type': 'User'}]","[{'commit_sha': '35e8aea30411a6aa0957161c5274444c08751c74', 'committer_username': 'officialcjunior', 'committer_name': 'Aswin C', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 30, 7, 13, 48, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c79841b7d6f76a395249d484b0d900e546c7b304', 'committer_username': 'officialcjunior', 'committer_name': 'Aswin C', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 30, 7, 13, 48, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd27cd5e3827c8be5deed339d3021512d99018bad', 'committer_username': 'officialcjunior', 'committer_name': 'Aswin C', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 30, 7, 13, 48, tzinfo=datetime.timezone.utc)}, {'commit_sha': '259f58868ee2a4fc6356ad85af62985bf9753a8d', 'committer_username': 'officialcjunior', 'committer_name': 'Aswin C', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 30, 7, 13, 48, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f7a5e9fdb2c2740a9f7cd0152f7812fd24620715', 'committer_username': 'officialcjunior', 'committer_name': 'Aswin C', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 30, 7, 13, 48, tzinfo=datetime.timezone.utc)}, {'commit_sha': '594abdb5dcbbbaf9b5a243e89b9701863ca1118f', 'committer_username': 'officialcjunior', 'committer_name': 'Aswin C', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 30, 7, 13, 48, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f0ee9e8c2658455d787c5ffe8cbbc6f345847708', 'committer_username': 'officialcjunior', 'committer_name': 'Aswin C', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 30, 7, 13, 48, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd484f29cc5177571685160493fa6ca5c3e8fb215', 'committer_username': 'officialcjunior', 'committer_name': 'Aswin C', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 30, 7, 13, 48, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'edc91682b2cd87d10ee1d13f0aa5214198de5466', 'committer_username': 'wargio', 'committer_name': 'Giovanni', 'committer_email': None, 'commit_date': datetime.datetime(2011, 1, 12, 21, 1, 24, tzinfo=datetime.timezone.utc)}]",Aswin C,29057155,,User,,41,,502,210
662860536,Introduce `RzArchProfile` and add support for CPU profiles," <!-- Filling this template is mandatory -->

**Your checklist for this pull request**
- [x] I've read the [guidelines for contributing](https://github.com/rizinorg/rizin/blob/master/DEVELOPERS.md) to this repository
- [x] I made sure to follow the project's [coding style](https://github.com/rizinorg/rizin/blob/master/DEVELOPERS.md#code-style)
- [x] I've added tests that prove my fix is effective or that my feature works (if possible)
- [ ] I've updated the documentation and the [rizin book](https://github.com/rizinorg/book) with the relevant information (if needed)

**Detailed description**

Introduces the module `RzArchProfile` for CPU profiles. 

The CPU profiles stored in SDB files in `librz/asm/cpus` following a naming convention `arch-cpu` are loaded up at
`rz_arch_profiles_init()` at the beginning. Then, it's parsed and stored into various data structures inside `RzArchProfile`, where `RzArchTarget` will house the `cpu` and `arch` and a pointer to `RzArchProfile` (`RzArchTarget` is currently under `RzAnalysis`). The IO registers and Extended IO registers are stored in a hashtable and the other data in normal `ut64` and character array variables.

During analysis (`aa`), `rz_arch_profile_add_flag_every_io()` is called, which parses the two hashtables and adds the information as flags. For that, two new flagspaces are realized: `registers.mmio` and `registers.extended` for the corresponding ones.
 
Here's what happens when it's loaded with one of the AVR firmware found in the testbins, set to `ATmega16` as CPU:
![image](https://user-images.githubusercontent.com/29057155/120918200-c7a66480-c6d0-11eb-80bc-de97c50e04d9.png)

**Test plan**
- [x] CI is green, add more representative tests.
- [x] Add support for fallback profiles, when an unsupported CPU is chosen.

**Closing issues**

None
",True,1193,https://api.github.com/repos/rizinorg/rizin/pulls/1193,https://github.com/rizinorg/rizin/pull/1193,closed,2694,21,31,15,2,31,3,0,"[{'name': 'command'}, {'name': 'RzAnalysis'}, {'name': 'merge-when-green'}]",2021-06-06 08:44:09+00:00,2021-06-11 12:29:12+00:00,445503.0,"5 days, 3:45:03","[{'comment_id': 646390402, 'comment_body': 'i would avoid to all use uppercase names, because usually we refer them as macros. in the code, but if you set them all lowercase, they will look perfect as they are.', 'comment_created': datetime.datetime(2021, 6, 7, 8, 48, 3, tzinfo=datetime.timezone.utc), 'commenter': 'wargio', 'type': 'User'}, {'comment_id': 646404791, 'comment_body': ""Yeah, sure, I'll get this done now."", 'comment_created': datetime.datetime(2021, 6, 7, 9, 6, 46, tzinfo=datetime.timezone.utc), 'commenter': 'officialcjunior', 'type': 'User'}, {'comment_id': 646609395, 'comment_body': ""Don't forget Doxygen documentation for newly added RZ_API"", 'comment_created': datetime.datetime(2021, 6, 7, 13, 53, 45, tzinfo=datetime.timezone.utc), 'commenter': 'XVilka', 'type': 'User'}, {'comment_id': 646609724, 'comment_body': 'No need for this if you use RZ_NEW0', 'comment_created': datetime.datetime(2021, 6, 7, 13, 54, 5, tzinfo=datetime.timezone.utc), 'commenter': 'XVilka', 'type': 'User'}, {'comment_id': 646610357, 'comment_body': 'Reverse this condition', 'comment_created': datetime.datetime(2021, 6, 7, 13, 54, 48, tzinfo=datetime.timezone.utc), 'commenter': 'XVilka', 'type': 'User'}, {'comment_id': 646610637, 'comment_body': 'Also you could remove unnecessary intermediate variable', 'comment_created': datetime.datetime(2021, 6, 7, 13, 55, 8, tzinfo=datetime.timezone.utc), 'commenter': 'XVilka', 'type': 'User'}, {'comment_id': 646624972, 'comment_body': ""Sure, I'll add them for all of the new ones."", 'comment_created': datetime.datetime(2021, 6, 7, 14, 11, 11, tzinfo=datetime.timezone.utc), 'commenter': 'officialcjunior', 'type': 'User'}, {'comment_id': 646766873, 'comment_body': 'you could reverse this condition too btw', 'comment_created': datetime.datetime(2021, 6, 7, 16, 40, 24, tzinfo=datetime.timezone.utc), 'commenter': 'XVilka', 'type': 'User'}, {'comment_id': 646767949, 'comment_body': 'Since it zero-initializes structure those assignments unnecessary.', 'comment_created': datetime.datetime(2021, 6, 7, 16, 41, 53, tzinfo=datetime.timezone.utc), 'commenter': 'XVilka', 'type': 'User'}, {'comment_id': 647045309, 'comment_body': 'Done in https://github.com/rizinorg/rizin/pull/1193/commits/21f40397de3a02759f8509a00a6acfb40f4d3fed', 'comment_created': datetime.datetime(2021, 6, 8, 1, 29, 27, tzinfo=datetime.timezone.utc), 'commenter': 'officialcjunior', 'type': 'User'}, {'comment_id': 647435169, 'comment_body': ""don't you need to free also `p` ?"", 'comment_created': datetime.datetime(2021, 6, 8, 13, 22, 19, tzinfo=datetime.timezone.utc), 'commenter': 'wargio', 'type': 'User'}, {'comment_id': 647436069, 'comment_body': 'verify that profile is not null. same for the pointers below.', 'comment_created': datetime.datetime(2021, 6, 8, 13, 23, 18, tzinfo=datetime.timezone.utc), 'commenter': 'wargio', 'type': 'User'}, {'comment_id': 647436318, 'comment_body': ""don't you need to free `t` ?"", 'comment_created': datetime.datetime(2021, 6, 8, 13, 23, 37, tzinfo=datetime.timezone.utc), 'commenter': 'wargio', 'type': 'User'}, {'comment_id': 647437943, 'comment_body': 'what does happen here if a unsupported CPU is given?', 'comment_created': datetime.datetime(2021, 6, 8, 13, 25, 23, tzinfo=datetime.timezone.utc), 'commenter': 'wargio', 'type': 'User'}, {'comment_id': 647526232, 'comment_body': ""Actually, I had verified that `profile` is not `NULL` but was told that I don't need to use it since I use `RZ_NEW0` -- https://github.com/rizinorg/rizin/pull/1193#discussion_r646609724\r\n\r\nI'll verify for the rest."", 'comment_created': datetime.datetime(2021, 6, 8, 14, 57, tzinfo=datetime.timezone.utc), 'commenter': 'officialcjunior', 'type': 'User'}, {'comment_id': 647541787, 'comment_body': 'Great catch. I am not sure, actually.\r\nThe situation was same before, as well: wrong values (zeroes) gets written.\r\nWhat do you think we can do about it?', 'comment_created': datetime.datetime(2021, 6, 8, 15, 13, 38, tzinfo=datetime.timezone.utc), 'commenter': 'officialcjunior', 'type': 'User'}, {'comment_id': 647913961, 'comment_body': 'No, you still need to verify the `profile`, but no need for zero/null-asignment of its members.', 'comment_created': datetime.datetime(2021, 6, 9, 2, 9, 43, tzinfo=datetime.timezone.utc), 'commenter': 'XVilka', 'type': 'User'}, {'comment_id': 647914341, 'comment_body': 'We could create ""generic"" profile, maybe?', 'comment_created': datetime.datetime(2021, 6, 9, 2, 10, 55, tzinfo=datetime.timezone.utc), 'commenter': 'XVilka', 'type': 'User'}, {'comment_id': 647934151, 'comment_body': ""Oh, alright, sorry I didn't catch that."", 'comment_created': datetime.datetime(2021, 6, 9, 3, 13, 40, tzinfo=datetime.timezone.utc), 'commenter': 'officialcjunior', 'type': 'User'}, {'comment_id': 647945079, 'comment_body': 'Yeah, that sounds like a plan!\r\n \r\nSuch a check can be done near where the `path` is initialized in `rz_arch_profiles_init`.\r\n```c\r\nif (CPU is unsupported) {\r\n      switch (asmarch) {\r\n      case AVR:\r\n            path = path_to_avr_generic_profile;\r\n}\r\n```\r\nOr something similar can be done.\r\n\r\nSo, how do I check whether a CPU is unsupported?', 'comment_created': datetime.datetime(2021, 6, 9, 3, 50, 19, tzinfo=datetime.timezone.utc), 'commenter': 'officialcjunior', 'type': 'User'}, {'comment_id': 647951807, 'comment_body': 'I suppose when you load SDBs you could store all CPU names that are loaded and store it in some vector.', 'comment_created': datetime.datetime(2021, 6, 9, 4, 13, 20, tzinfo=datetime.timezone.utc), 'commenter': 'XVilka', 'type': 'User'}, {'comment_id': 648201383, 'comment_body': 'i think we should not support this for unknown cpus.\r\nwe can just throw an error message saying that there is no profile available for this cpu. and just initialize an empty structure and avoid enriching the data\r\n', 'comment_created': datetime.datetime(2021, 6, 9, 11, 12, 33, tzinfo=datetime.timezone.utc), 'commenter': 'wargio', 'type': 'User'}, {'comment_id': 648202104, 'comment_body': 'yes, because if you are on low memory, then malloc/RZ_NEW* will return a null pointer', 'comment_created': datetime.datetime(2021, 6, 9, 11, 13, 43, tzinfo=datetime.timezone.utc), 'commenter': 'wargio', 'type': 'User'}, {'comment_id': 648205058, 'comment_body': ""you can't do this.\r\nlet's say that `profile->registers_mmio` is NULL.\r\n\r\nby returning NULL you will not free `profile` which was allocated successfully previously.\r\nyou need to free also in those if.\r\nfor example \r\n```c\r\n\tif (!profile->registers_mmio) {\r\n\t\t\tfree(profile);\r\n\t\t\treturn NULL;\r\n\t}\r\n\t/// [....]\r\n\tif (!profile->registers_extended) {\r\n\t\t\tht_up_free(profile->registers_mmio);\r\n\t\t\tfree(profile);\r\n\t\t\treturn NULL;\r\n\t}\r\n```"", 'comment_created': datetime.datetime(2021, 6, 9, 11, 18, 30, tzinfo=datetime.timezone.utc), 'commenter': 'wargio', 'type': 'User'}, {'comment_id': 648205449, 'comment_body': 'same concept as above here.', 'comment_created': datetime.datetime(2021, 6, 9, 11, 19, 6, tzinfo=datetime.timezone.utc), 'commenter': 'wargio', 'type': 'User'}, {'comment_id': 648301036, 'comment_body': ""Oh. Okay, I'll fix that. Thanks for properly highlighting the erroneous code and for the example 💙 "", 'comment_created': datetime.datetime(2021, 6, 9, 13, 27, 59, tzinfo=datetime.timezone.utc), 'commenter': 'officialcjunior', 'type': 'User'}, {'comment_id': 648305844, 'comment_body': ""Wow, yeah, that makes sense. #TIL. \r\nAlso, the fact that `RZ_NEW` is basically a `*alloc` just didn't occur to me until now. 😅 "", 'comment_created': datetime.datetime(2021, 6, 9, 13, 32, 55, tzinfo=datetime.timezone.utc), 'commenter': 'officialcjunior', 'type': 'User'}, {'comment_id': 648912984, 'comment_body': ""I think we might need to move the SDB loading of Arch Profiles to RzCore/RzAnalysis initialization before doing this.\r\n\r\nBecause, while I was doing this, I saw that `x86` was passed as the `arch` and `cpu` at the beginning and I think profile's `init` (basically, `cb_asmarch` and `cb_asmcpu`) is called so many times before the actual `arch` and `cpu` are passed/known."", 'comment_created': datetime.datetime(2021, 6, 10, 7, 15, 56, tzinfo=datetime.timezone.utc), 'commenter': 'officialcjunior', 'type': 'User'}, {'comment_id': 648962329, 'comment_body': 'sounds an interesting issue. what you could do is make a branch and see what happens if you load this under rzanalysis; then if it solves the issue you can join the diverged branch here and push it.', 'comment_created': datetime.datetime(2021, 6, 10, 8, 23, 31, tzinfo=datetime.timezone.utc), 'commenter': 'wargio', 'type': 'User'}, {'comment_id': 649030570, 'comment_body': 'Well actually, I\'ve managed to hack it.\r\nSince the diff is not that big, I\'m just gonna post the diff here and see if that\'s worthy enough to be added.\r\n\r\nPrinting an error message makes it print a couple of times, so I\'m just loading ATMega8\'s (probably the most popular) profile here if the CPU is not valid.\r\n\r\n```diff\r\ndiff --git a/librz/analysis/arch_profile.c b/librz/analysis/arch_profile.c\r\nindex 575290b7d..ec35782ef 100644\r\n--- a/librz/analysis/arch_profile.c\r\n+++ b/librz/analysis/arch_profile.c\r\n@@ -149,6 +149,43 @@ RZ_API bool rz_type_db_load_arch_profile_sdb(RzArchTarget *t, const char *path)\r\n \treturn sdb_load_arch_profile_by_path(t, path);\r\n }\r\n \r\n+static bool is_cpu_valid(char *cpu_dir, const char *cpu) {\r\n+\tRzList *files = rz_sys_dir(cpu_dir);\r\n+\tif (!files) {\r\n+\t\treturn false;\r\n+\t}\r\n+\tRzListIter *it;\r\n+\tchar *filename = NULL;\r\n+\tchar *cpu_name = NULL;\r\n+\tchar *arch_cpu = NULL;\r\n+\tRzPVector *cpus = rz_pvector_new(NULL);\r\n+\trz_pvector_init(cpus, NULL);\r\n+\r\n+\trz_list_foreach (files, it, filename) {\r\n+\t\tif (!strcmp(filename, "".."") || !strcmp(filename, "".."")) {\r\n+\t\t\tcontinue;\r\n+\t\t}\r\n+\t\tarch_cpu = rz_str_ndup(filename, strlen(filename) - 4);\r\n+\t\tif (!arch_cpu)\r\n+\t\t\tcontinue;\r\n+\t\tcpu_name = strchr(arch_cpu, \'-\');\r\n+\t\trz_str_remove_char(cpu_name, \'-\');\r\n+\t\trz_pvector_push(cpus, cpu_name);\r\n+\t}\r\n+\trz_list_free(files);\r\n+\tfree(arch_cpu);\r\n+\r\n+\tvoid **ita;\r\n+\trz_pvector_foreach (cpus, ita) {\r\n+\t\tif (!strcmp(*ita, cpu)) {\r\n+\t\t\trz_pvector_free(cpus);\r\n+\t\t\treturn true;\r\n+\t\t}\r\n+\t}\r\n+\trz_pvector_free(cpus);\r\n+\treturn false;\r\n+}\r\n+\r\n /**\r\n  * \\brief Initializes RzArchProfile by loading the path to the SDB file\r\n  * \t\t  of the CPU profile\r\n@@ -167,10 +204,19 @@ RZ_API bool rz_arch_profiles_init(RzArchTarget *t, const char *cpu, const char *\r\n \tif (!path) {\r\n \t\treturn false;\r\n \t}\r\n+\tchar *cpu_dir = rz_str_newf(RZ_JOIN_3_PATHS(""%s"", RZ_SDB, ""asm/cpus""), dir_prefix);\r\n+\tif (!is_cpu_valid(cpu_dir, cpu)) {\r\n+\t\tif (arch) {\r\n+\t\t\tif (!strcmp(arch, ""avr"")) {\r\n+\t\t\t\tpath = rz_str_newf(RZ_JOIN_4_PATHS(""%s"", RZ_SDB, ""asm/cpus"", ""avr-ATmega8.sdb""), dir_prefix);\r\n+\t\t\t}\r\n+\t\t}\r\n+\t}\r\n \tif (!rz_type_db_load_arch_profile_sdb(t, path)) {\r\n \t\tsdb_free(t->db);\r\n \t\tt->db = NULL;\r\n \t}\r\n \tfree(path);\r\n+\tfree(cpu_dir);\r\n \treturn true;\r\n }\r\n\\ No newline at end of file\r\n```', 'comment_created': datetime.datetime(2021, 6, 10, 9, 49, 32, tzinfo=datetime.timezone.utc), 'commenter': 'officialcjunior', 'type': 'User'}, {'comment_id': 649098175, 'comment_body': 'looks like a good patch, just check that `RzPVector *cpus` is not NULL', 'comment_created': datetime.datetime(2021, 6, 10, 11, 34, 38, tzinfo=datetime.timezone.utc), 'commenter': 'wargio', 'type': 'User'}]","[{'commit_sha': 'c82ee54be65cd77dac40ebce0661314fdb2e1b72', 'committer_username': 'officialcjunior', 'committer_name': 'Aswin C', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 30, 7, 13, 48, tzinfo=datetime.timezone.utc)}, {'commit_sha': '15802c8b5e2c62cd21148973f3f259d493566c16', 'committer_username': 'officialcjunior', 'committer_name': 'Aswin C', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 30, 7, 13, 48, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b6e1c584e98da45d10ae4061ecd472ddd5f580f1', 'committer_username': 'officialcjunior', 'committer_name': 'Aswin C', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 30, 7, 13, 48, tzinfo=datetime.timezone.utc)}, {'commit_sha': '62e2e850c92400243195162be76a60c2b85bc5d8', 'committer_username': 'officialcjunior', 'committer_name': 'Aswin C', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 30, 7, 13, 48, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8c8e1291ac8ff2c73f8a9e71e4e118a2d5a3c44e', 'committer_username': 'officialcjunior', 'committer_name': 'Aswin C', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 30, 7, 13, 48, tzinfo=datetime.timezone.utc)}, {'commit_sha': '22cca7b06f05d243d9f2fdefbd7fa51588eeaa05', 'committer_username': 'officialcjunior', 'committer_name': 'Aswin C', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 30, 7, 13, 48, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c5043d9c7d42cc844156b9c3d7ee822af4729e50', 'committer_username': 'officialcjunior', 'committer_name': 'Aswin C', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 30, 7, 13, 48, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'eee80a5ab8240886edf183c154700191edcc04c5', 'committer_username': 'officialcjunior', 'committer_name': 'Aswin C', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 30, 7, 13, 48, tzinfo=datetime.timezone.utc)}, {'commit_sha': '21f40397de3a02759f8509a00a6acfb40f4d3fed', 'committer_username': 'officialcjunior', 'committer_name': 'Aswin C', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 30, 7, 13, 48, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'feb4490ed048aa9f2d4b7539584dd84f1ce65010', 'committer_username': 'officialcjunior', 'committer_name': 'Aswin C', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 30, 7, 13, 48, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9a99d495781d2953bd46da24467d377ec11d9b94', 'committer_username': 'wargio', 'committer_name': 'Giovanni', 'committer_email': None, 'commit_date': datetime.datetime(2011, 1, 12, 21, 1, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e63a1d6e893cd1205f45e7fead38480f827140cf', 'committer_username': 'officialcjunior', 'committer_name': 'Aswin C', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 30, 7, 13, 48, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1901dbe97b682b0545f2efd476529962370c1af6', 'committer_username': 'officialcjunior', 'committer_name': 'Aswin C', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 30, 7, 13, 48, tzinfo=datetime.timezone.utc)}, {'commit_sha': '662242d1e700b758513651c21599aaa5a603d579', 'committer_username': 'officialcjunior', 'committer_name': 'Aswin C', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 30, 7, 13, 48, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3e06a1a0d857e26165b7e1e6171c623338fd60a2', 'committer_username': 'wargio', 'committer_name': 'Giovanni', 'committer_email': None, 'commit_date': datetime.datetime(2011, 1, 12, 21, 1, 24, tzinfo=datetime.timezone.utc)}]",Aswin C,29057155,,User,,41,,502,210
673963180,RzArch: Support for memory mapping the ROM sizes," <!-- Filling this template is mandatory -->

**Your checklist for this pull request**
- [x] I've read the [guidelines for contributing](https://github.com/rizinorg/rizin/blob/master/DEVELOPERS.md) to this repository
- [x] I made sure to follow the project's [coding style](https://github.com/rizinorg/rizin/blob/master/DEVELOPERS.md#code-style)
- [x] I've added tests that prove my fix is effective or that my feature works (if possible)
- [ ] I've updated the documentation and the [rizin book](https://github.com/rizinorg/book) with the relevant information (if needed)

**Detailed description**

Supports adding ROM related data as `iS` mappings. 

The value of `ROM_ADDRESS` and `ROM_SIZE` is parsed from the CPU Profile. During `aaa`, `rz_analysis_add_io_registers_map` is called which creates the new `RzBinSection`.

**Test plan**

Current state:
```
$ ./build/binrz/rizin/rizin -e asm.cpu=ATmega16 test/bins/firmware/arduino_avr.bin
 -- Use 'rz-bin -ris' to get the import/export symbols of any binary.
[0x00000158]> aaa
[x] Analyze all flags starting with sym. and entry0 (aa)
[x] Analyze function calls (aac)
(...)
[0x00000158]> iS~.rom
 8   0x00001fff  0x4000 0x00001fff  0x4000 -r-x .rom      NULL     
```

- [x] Handle the case where a map already exists.

**Closing issues**

None
",True,1228,https://api.github.com/repos/rizinorg/rizin/pulls/1228,https://github.com/rizinorg/rizin/pull/1228,closed,68,1,7,12,1,15,3,0,"[{'name': 'command'}, {'name': 'merge-when-green'}, {'name': 'RzArch'}]",2021-06-20 02:20:18+00:00,2021-06-25 19:02:17+00:00,492119.0,"5 days, 16:41:59","[{'comment_id': 655185532, 'comment_body': 'i would say here, that `if (file_offset >= rom_address && file_offset < (rom_address + rom_size))` then throw that warning.', 'comment_created': datetime.datetime(2021, 6, 21, 8, 41, 33, tzinfo=datetime.timezone.utc), 'commenter': 'wargio', 'type': 'User'}, {'comment_id': 655189507, 'comment_body': '`RZ_LOG_WARN(""Cannot map the ROM section at %"" PFMT64x "" with a size of %"" PFMT64x "" due file being mapped at 0x%"" PFMT64x ""\\n"", rom_address, rom_size, file_offset);`', 'comment_created': datetime.datetime(2021, 6, 21, 8, 47, 15, tzinfo=datetime.timezone.utc), 'commenter': 'wargio', 'type': 'User'}, {'comment_id': 655189930, 'comment_body': 'move this within `rz_core_analysis_everything`', 'comment_created': datetime.datetime(2021, 6, 21, 8, 47, 53, tzinfo=datetime.timezone.utc), 'commenter': 'wargio', 'type': 'User'}, {'comment_id': 655384773, 'comment_body': 'Use the `REGEXP_FILTER_ERR` to add a regex for the warning, so everything else is ignored.\r\nSee https://github.com/rizinorg/rizin/tree/dev/test#commands-tests', 'comment_created': datetime.datetime(2021, 6, 21, 13, 39, 8, tzinfo=datetime.timezone.utc), 'commenter': 'wargio', 'type': 'User'}, {'comment_id': 655393954, 'comment_body': ""Can you name a method/idea to match it?\r\nI had tried that for things I could think of like `^WARNING` and all which didn't seem to work"", 'comment_created': datetime.datetime(2021, 6, 21, 13, 49, 51, tzinfo=datetime.timezone.utc), 'commenter': 'officialcjunior', 'type': 'User'}, {'comment_id': 655507140, 'comment_body': 'can you write here the full line?\r\n', 'comment_created': datetime.datetime(2021, 6, 21, 15, 53, 35, tzinfo=datetime.timezone.utc), 'commenter': 'wargio', 'type': 'User'}, {'comment_id': 655542396, 'comment_body': 'in the original code this was at the beginning, before the analysis. does this change something in the analysis loop?', 'comment_created': datetime.datetime(2021, 6, 21, 16, 39, 7, tzinfo=datetime.timezone.utc), 'commenter': 'wargio', 'type': 'User'}, {'comment_id': 655868358, 'comment_body': ""So, when I put the whole line:\r\n```\r\nREGEXP_FILTER_ERR=(WARNING: Cannot map the ROM section at 1fff with a size of 4000 due file being mapped at 0x1fff)\r\nEXPECT_ERR=<<EOF\r\nWARNING: Cannot map the ROM section at 1fff with a size of 4000 due file being mapped at 0x1fff\r\nEOF\r\nRUN\r\n```\r\nIt says it finds a mismatch.\r\n\r\n```\r\n\r\n#####################\r\n 1 failed test(s) 🚨\r\n#####################\r\n\r\nRZ_NOPLUGINS=1 rizin -escr.utf8=0 -escr.color=0 -escr.interactive=0 -N -e asm.cpu=ATmega16 -m 8191 -Qc 'aaa\r\nom\r\n' bins/firmware/arduino_avr.bin\r\n-- stderr\r\n--- expected\r\n+++ actual\r\n@@ -1,1 +1,0 @@\r\n-WARNING: Cannot map the ROM section at 1fff with a size of 4000 due file being mapped at 0x1fff\r\n\r\nWat do?    (f)ix ✅️️️    (i)gnore 🙈    (b)roken ☠️️️    (c)ommands ⌨️    (q)uit 🚪\r\n> \r\n\r\n```\r\nAnd when I press `f` and fix it, the whole stderr is written back on the file again. And when I try to run rz-test again, this is what I get:\r\n\r\n```\r\n#####################\r\n 1 failed test(s) 🚨\r\n#####################\r\n\r\nRZ_NOPLUGINS=1 rizin -escr.utf8=0 -escr.color=0 -escr.interactive=0 -N -e asm.cpu=ATmega16 -m 8191 -Qc 'aaa\r\nom\r\n' bins/firmware/arduino_avr.bin\r\n-- stderr\r\n--- expected\r\n+++ actual\r\n@@ -1,15 +1,0 @@\r\n-Warning: using oba to load the syminfo from different mapaddress.\r\n[x] Analyze all flags starting with sym. and entry0 (aa))\r\n[x] Analyze function calls (aac)\r\n[x] find and analyze function preludes (aap))\r\n[x] Analyze len bytes of instructions for references (aar))\r\n[x] Check for classess\r\n[x] Finding xrefs in noncode section with analysis.in=io.mapss\r\n[x] Analyze value pointers (aav))\r\n[x] Value from 0x00000000 to 0x00003722 (aav))\r\n[x] 0x00000000-0x00003722 in 0x0-0x3722 (aav))\r\n[x] Emulate functions to find computed references (aaef))\r\n[x] Type matching analysis for all functions (aaft))\r\n[x] Propagate noreturn informationn\r\n[x] Use -AA or aaaa to perform additional experimental analysis..\r\n-WARNING: Cannot map the ROM section at 1fff with a size of 4000 due file being mapped at 0x1fff\r\n\r\nWat do?    (f)ix ✅️️️    (i)gnore 🙈    (b)roken ☠️️️    (c)ommands ⌨️    (q)uit 🚪\r\n> f\r\n\r\n``` \r\n\r\nand this never gets fixed when I press `f`."", 'comment_created': datetime.datetime(2021, 6, 22, 4, 34, 5, tzinfo=datetime.timezone.utc), 'commenter': 'officialcjunior', 'type': 'User'}, {'comment_id': 655955880, 'comment_body': ""I think the autofixing feature wasn't updated for handling regexps. So this is expected somehow."", 'comment_created': datetime.datetime(2021, 6, 22, 7, 37, 28, tzinfo=datetime.timezone.utc), 'commenter': 'XVilka', 'type': 'User'}, {'comment_id': 656047310, 'comment_body': 'add `{ ... }`', 'comment_created': datetime.datetime(2021, 6, 22, 9, 33, 10, tzinfo=datetime.timezone.utc), 'commenter': 'wargio', 'type': 'User'}, {'comment_id': 656059951, 'comment_body': ""it's ok. we found another way to do this."", 'comment_created': datetime.datetime(2021, 6, 22, 9, 49, 40, tzinfo=datetime.timezone.utc), 'commenter': 'wargio', 'type': 'User'}, {'comment_id': 658471067, 'comment_body': ""If you add a new API function - don't forget Doxygen please."", 'comment_created': datetime.datetime(2021, 6, 25, 4, 48, 34, tzinfo=datetime.timezone.utc), 'commenter': 'XVilka', 'type': 'User'}, {'comment_id': 658471459, 'comment_body': 'Also please return `false` in case of either `o` and `analysis` are NULL. Also please add `rz_return_val_if_fail(o && analysis, false)`;.', 'comment_created': datetime.datetime(2021, 6, 25, 4, 49, 43, tzinfo=datetime.timezone.utc), 'commenter': 'XVilka', 'type': 'User'}, {'comment_id': 658505660, 'comment_body': 'This is not a brief. Please split it into one-line `brief` and more detailed explanation below', 'comment_created': datetime.datetime(2021, 6, 25, 6, 26, 44, tzinfo=datetime.timezone.utc), 'commenter': 'XVilka', 'type': 'User'}, {'comment_id': 658505745, 'comment_body': 'Wrong indentation.', 'comment_created': datetime.datetime(2021, 6, 25, 6, 26, 58, tzinfo=datetime.timezone.utc), 'commenter': 'XVilka', 'type': 'User'}]","[{'commit_sha': '3de6a8b1afa2ccabe25d2ac2cfd4586a0a9c9105', 'committer_username': 'officialcjunior', 'committer_name': 'Aswin C', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 30, 7, 13, 48, tzinfo=datetime.timezone.utc)}, {'commit_sha': '425bca132c91050956342e98eb726708a7de2dd8', 'committer_username': 'officialcjunior', 'committer_name': 'Aswin C', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 30, 7, 13, 48, tzinfo=datetime.timezone.utc)}, {'commit_sha': '86eaab6eda305ef91d17676c21854f7a116cf6f5', 'committer_username': 'officialcjunior', 'committer_name': 'Aswin C', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 30, 7, 13, 48, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8b98164c89eb308a297f3224a240f82fc8cd9cc8', 'committer_username': 'officialcjunior', 'committer_name': 'Aswin C', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 30, 7, 13, 48, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8ede87fd6eb1c0e78e57f668ad59f07734eba06e', 'committer_username': 'officialcjunior', 'committer_name': 'Aswin C', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 30, 7, 13, 48, tzinfo=datetime.timezone.utc)}, {'commit_sha': '87371315c4d6dd08df85d8eb5fef595ab580b4ab', 'committer_username': 'officialcjunior', 'committer_name': 'Aswin C', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 30, 7, 13, 48, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2f7922a09e2588a8bbecf301caa4ac32571474ea', 'committer_username': 'officialcjunior', 'committer_name': 'Aswin C', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 30, 7, 13, 48, tzinfo=datetime.timezone.utc)}, {'commit_sha': '481514ded94b30a0ff1a16079354bc4b3a1aaf76', 'committer_username': 'officialcjunior', 'committer_name': 'Aswin C', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 30, 7, 13, 48, tzinfo=datetime.timezone.utc)}, {'commit_sha': '62c0c80f3583c180afb9873a2abc4878176761f5', 'committer_username': 'officialcjunior', 'committer_name': 'Aswin C', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 30, 7, 13, 48, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2cce8d62b62433977a784bfaa73bf634ed68ff1c', 'committer_username': 'officialcjunior', 'committer_name': 'Aswin C', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 30, 7, 13, 48, tzinfo=datetime.timezone.utc)}, {'commit_sha': '67ec287f2fdde1a3e10e5b010ed1680453c873f8', 'committer_username': 'officialcjunior', 'committer_name': 'Aswin C', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 30, 7, 13, 48, tzinfo=datetime.timezone.utc)}, {'commit_sha': '861801a2ffc40bf099af4db767115cb6f0d61605', 'committer_username': 'wargio', 'committer_name': 'Giovanni', 'committer_email': None, 'commit_date': datetime.datetime(2011, 1, 12, 21, 1, 24, tzinfo=datetime.timezone.utc)}]",Aswin C,29057155,,User,,41,,502,210
679904577,Introduce `RzArchPlatform` and support for platform profiles," <!-- Filling this template is mandatory -->

**Your checklist for this pull request**
- [x] I've read the [guidelines for contributing](https://github.com/rizinorg/rizin/blob/master/DEVELOPERS.md) to this repository
- [x] I made sure to follow the project's [coding style](https://github.com/rizinorg/rizin/blob/master/DEVELOPERS.md#code-style)
- [x] I've added tests that prove my fix is effective or that my feature works (if possible)
- [ ] I've updated the documentation and the [rizin book](https://github.com/rizinorg/book) with the relevant information (if needed)

**Detailed description**

Introduces `RzArchPlatformTarget` and `RzArchPlatformItem` for platform profiles.

The platform profiles stored in `librz/asm/platforms` following a file naming convention `arch-cpu-platform` are firstly loaded up at `rz_arch_platform_init`. Subsequently, it's parsed and stored in a hashtable inside `RzArchPlatformTarget` which is a pair of `ut64` address and a `RzArchPlatformItem`. `RzArchPlatformItem` is a struct/module which houses the name and the comment(if exists) of the corresponding port. The names are added as flags and comments as comments(`CCu`) in `rz_arch_platform_add_flags_comments`.

A new configuration variable `asm.platform` is realized to choose the platform profile : fdf3c0286b96057b96572a39ed4efd6cdb26dedf. 
To support the options to choose from, a new variable `platforms` was added to `RzAsmPlugin` (similar to `features` and `cpus`). This is where the name of the platforms supported by each of the architectures/`RzAsmPlugin` will be defined (also similar to how `cpus` work).

Currently, Broadcom's [BCM2835 ARM Peripherals](https://www.raspberrypi.org/documentation/hardware/raspberrypi/bcm2835/README.md), the one that runs in most of the Raspberry Pi-s, is the only profile that is added. More can be added when the code review is finished.

**Test plan**

- [x] Add more platforms.

**Closing issues**

None
",True,1254,https://api.github.com/repos/rizinorg/rizin/pulls/1254,https://github.com/rizinorg/rizin/pull/1254,closed,546,18,19,9,3,16,1,0,[{'name': 'command'}],2021-06-29 12:14:47+00:00,2021-07-02 04:55:31+00:00,232844.0,"2 days, 16:40:44","[{'comment_id': 661118420, 'comment_body': 'Should it free also the `item` itself?', 'comment_created': datetime.datetime(2021, 6, 30, 4, 18, 35, tzinfo=datetime.timezone.utc), 'commenter': 'XVilka', 'type': 'User'}, {'comment_id': 661118754, 'comment_body': 'Please also check if `db` is NULL.', 'comment_created': datetime.datetime(2021, 6, 30, 4, 19, 45, tzinfo=datetime.timezone.utc), 'commenter': 'XVilka', 'type': 'User'}, {'comment_id': 661118907, 'comment_body': 'I also recommend to check for `path` not being NULL and add `RZ_NONNULL` too.', 'comment_created': datetime.datetime(2021, 6, 30, 4, 20, 23, tzinfo=datetime.timezone.utc), 'commenter': 'XVilka', 'type': 'User'}, {'comment_id': 661118966, 'comment_body': 'Same here.', 'comment_created': datetime.datetime(2021, 6, 30, 4, 20, 31, tzinfo=datetime.timezone.utc), 'commenter': 'XVilka', 'type': 'User'}, {'comment_id': 661119092, 'comment_body': 'Add `rz_return_val_if_fail()` with arch, cpu, platform, dir_prefix.', 'comment_created': datetime.datetime(2021, 6, 30, 4, 21, tzinfo=datetime.timezone.utc), 'commenter': 'XVilka', 'type': 'User'}, {'comment_id': 661119394, 'comment_body': 'Please check for `v` not being NULL since you dereference it later in the code.', 'comment_created': datetime.datetime(2021, 6, 30, 4, 21, 51, tzinfo=datetime.timezone.utc), 'commenter': 'XVilka', 'type': 'User'}, {'comment_id': 661119593, 'comment_body': 'Same here, check for them not being NULL.', 'comment_created': datetime.datetime(2021, 6, 30, 4, 22, 30, tzinfo=datetime.timezone.utc), 'commenter': 'XVilka', 'type': 'User'}, {'comment_id': 661119739, 'comment_body': 'Also please add these `RZ_NONNULL` here as well.', 'comment_created': datetime.datetime(2021, 6, 30, 4, 23, 4, tzinfo=datetime.timezone.utc), 'commenter': 'XVilka', 'type': 'User'}, {'comment_id': 661137501, 'comment_body': 'Maybe add here also `rz_return_val_if_fail()`', 'comment_created': datetime.datetime(2021, 6, 30, 5, 17, 37, tzinfo=datetime.timezone.utc), 'commenter': 'XVilka', 'type': 'User'}, {'comment_id': 661137575, 'comment_body': 'Same here.', 'comment_created': datetime.datetime(2021, 6, 30, 5, 17, 46, tzinfo=datetime.timezone.utc), 'commenter': 'XVilka', 'type': 'User'}, {'comment_id': 661137680, 'comment_body': 'Mark them please as `RZ_NONNULL`', 'comment_created': datetime.datetime(2021, 6, 30, 5, 18, 8, tzinfo=datetime.timezone.utc), 'commenter': 'XVilka', 'type': 'User'}, {'comment_id': 661161692, 'comment_body': 'Where exactly should I add `RZ_NONNULL` here?', 'comment_created': datetime.datetime(2021, 6, 30, 6, 18, 49, tzinfo=datetime.timezone.utc), 'commenter': 'officialcjunior', 'type': 'User'}, {'comment_id': 661163133, 'comment_body': ""For all of the function's arguments?"", 'comment_created': datetime.datetime(2021, 6, 30, 6, 21, 57, tzinfo=datetime.timezone.utc), 'commenter': 'officialcjunior', 'type': 'User'}, {'comment_id': 661220580, 'comment_body': 'To `arch`, `cpu`, etc', 'comment_created': datetime.datetime(2021, 6, 30, 7, 55, 34, tzinfo=datetime.timezone.utc), 'commenter': 'XVilka', 'type': 'User'}, {'comment_id': 661220840, 'comment_body': 'Not for all, for `arch`, `cpu`, etc', 'comment_created': datetime.datetime(2021, 6, 30, 7, 55, 57, tzinfo=datetime.timezone.utc), 'commenter': 'XVilka', 'type': 'User'}, {'comment_id': 661517265, 'comment_body': 'RZ_NONNULL goes to any value that you check when you use `rz_return[_val]_if()`\r\n', 'comment_created': datetime.datetime(2021, 6, 30, 14, 15, 28, tzinfo=datetime.timezone.utc), 'commenter': 'wargio', 'type': 'User'}]","[{'commit_sha': '8f2c7b5627e8affd1dfaeb35c0d1c10cd138331d', 'committer_username': 'officialcjunior', 'committer_name': 'Aswin C', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 30, 7, 13, 48, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5baf9b3fcb39f3f5a32c16f2238d49e6dab86677', 'committer_username': 'officialcjunior', 'committer_name': 'Aswin C', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 30, 7, 13, 48, tzinfo=datetime.timezone.utc)}, {'commit_sha': '92e6777ca2e56f2f4d575d476f288a8589b0a572', 'committer_username': 'officialcjunior', 'committer_name': 'Aswin C', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 30, 7, 13, 48, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ee3e4b00fdad28062fa80d7cfdbc28194c60c3b4', 'committer_username': 'officialcjunior', 'committer_name': 'Aswin C', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 30, 7, 13, 48, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b5efbed8ad5f9b5907821bad8437f58ef3bd53bb', 'committer_username': 'officialcjunior', 'committer_name': 'Aswin C', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 30, 7, 13, 48, tzinfo=datetime.timezone.utc)}, {'commit_sha': '422b8d9889a227f678911215659764ef1a8a8cf0', 'committer_username': 'officialcjunior', 'committer_name': 'Aswin C', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 30, 7, 13, 48, tzinfo=datetime.timezone.utc)}, {'commit_sha': '835dd46454190a7c8b3f77822d29ad7a028e1df4', 'committer_username': 'officialcjunior', 'committer_name': 'Aswin C', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 30, 7, 13, 48, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9e428c6d8c6e2c79154ed0f4c7c42187e8fd4052', 'committer_username': 'officialcjunior', 'committer_name': 'Aswin C', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 30, 7, 13, 48, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f8e8a564493ee4c2c3fe09fb3f55751b8292b983', 'committer_username': 'officialcjunior', 'committer_name': 'Aswin C', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 30, 7, 13, 48, tzinfo=datetime.timezone.utc)}]",Aswin C,29057155,,User,,41,,502,210
682946472,RzArch: Add x86 IO ports and support for more platforms," <!-- Filling this template is mandatory -->

**Your checklist for this pull request**
- [x] I've read the [guidelines for contributing](https://github.com/rizinorg/rizin/blob/master/DEVELOPERS.md) to this repository
- [x] I made sure to follow the project's [coding style](https://github.com/rizinorg/rizin/blob/master/DEVELOPERS.md#code-style)
- [x] I've added tests that prove my fix is effective or that my feature works (if possible)
- [ ] I've updated the documentation and the [rizin book](https://github.com/rizinorg/book) with the relevant information (if needed)

**Detailed description**

This PR adds platform profiles for BCM 2835 (the chip used in  Raspberry Pi Model A, B, B+), OMAP 3430 and the x86 IO ports. For the first two, its corresponding name of the CPU was added to ARM's `RzAsmPlugin` definition. For x86 IO Ports, a new CPU and platform name `generic` was introduced.

Sources:
x86 IO ports - https://bochs.sourceforge.io/techspec/PORTS.LST
BCM 2835 - https://www.raspberrypi.org/documentation/hardware/raspberrypi/bcm2835/README.md

**Test plan**
A test for x86 IO ports has been added. 

**Closing issues**

None.
",True,1263,https://api.github.com/repos/rizinorg/rizin/pulls/1263,https://github.com/rizinorg/rizin/pull/1263,closed,5148,1,8,3,1,0,0,0,[],2021-07-03 01:57:53+00:00,2021-07-05 04:03:38+00:00,180345.0,"2 days, 2:05:45",[],"[{'commit_sha': 'e56edd037d6c74d2bc1641df0b5b48bc10d1db68', 'committer_username': 'officialcjunior', 'committer_name': 'Aswin C', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 30, 7, 13, 48, tzinfo=datetime.timezone.utc)}, {'commit_sha': '842776b8ded2306c479580c2b6e3d70d59c4e78e', 'committer_username': 'officialcjunior', 'committer_name': 'Aswin C', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 30, 7, 13, 48, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3e3c6d017423101bbbec357a5e87929f425ca253', 'committer_username': 'officialcjunior', 'committer_name': 'Aswin C', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 30, 7, 13, 48, tzinfo=datetime.timezone.utc)}]",Aswin C,29057155,,User,,41,,502,210
592711458,Initial implementation of the SVD Parser plugin,"Initial implementation of the SVD Parser plugin.

The plugin uses yxml for parsing the XML and adds the registers's name and description as flags and comments on the offset they are at.

### Videos and screenshots of the plugin in action
https://user-images.githubusercontent.com/29057155/128794524-668427fc-4e6c-4868-8306-52173368dbee.mp4

![image](https://user-images.githubusercontent.com/29057155/128794832-54182f2b-8ec5-4d90-83f2-c3f3041a3b29.png)


![image](https://user-images.githubusercontent.com/29057155/128794866-9dbc6443-d5c3-4b07-82bd-dcee5e4d3910.png)
",True,4,https://api.github.com/repos/rizinorg/rizin-extras/pulls/4,https://github.com/rizinorg/rizin-extras/pull/4,closed,40771,0,4,12,9,25,0,0,[],2021-03-15 04:00:13+00:00,2021-08-10 06:21:53+00:00,12795700.0,"148 days, 2:21:40","[{'comment_id': 603778612, 'comment_body': 'I recommend to check it for NULL first.', 'comment_created': datetime.datetime(2021, 3, 30, 4, 47, 30, tzinfo=datetime.timezone.utc), 'commenter': 'XVilka', 'type': 'User'}, {'comment_id': 603778787, 'comment_body': 'Same here, check for the error.', 'comment_created': datetime.datetime(2021, 3, 30, 4, 47, 50, tzinfo=datetime.timezone.utc), 'commenter': 'XVilka', 'type': 'User'}, {'comment_id': 603779162, 'comment_body': 'I am not sure about plugins, but since we are using RzUtil anyway, probably better to use `rz_return_if_fail()` instead of the `assert()`.', 'comment_created': datetime.datetime(2021, 3, 30, 4, 48, 48, tzinfo=datetime.timezone.utc), 'commenter': 'XVilka', 'type': 'User'}, {'comment_id': 603779345, 'comment_body': 'You could use a define here as well.', 'comment_created': datetime.datetime(2021, 3, 30, 4, 49, 20, tzinfo=datetime.timezone.utc), 'commenter': 'XVilka', 'type': 'User'}, {'comment_id': 603779468, 'comment_body': ""Probably it's better to use a define here too."", 'comment_created': datetime.datetime(2021, 3, 30, 4, 49, 44, tzinfo=datetime.timezone.utc), 'commenter': 'XVilka', 'type': 'User'}, {'comment_id': 603779661, 'comment_body': ""I think it's better to define it as a type outside of the function."", 'comment_created': datetime.datetime(2021, 3, 30, 4, 50, 8, tzinfo=datetime.timezone.utc), 'commenter': 'XVilka', 'type': 'User'}, {'comment_id': 604015293, 'comment_body': ""Sure, I'm just confused on what exactly to pass to `rz_return_if_fail()` so that the logic is preserved."", 'comment_created': datetime.datetime(2021, 3, 30, 11, 34, 45, tzinfo=datetime.timezone.utc), 'commenter': 'officialcjunior', 'type': 'User'}, {'comment_id': 604605228, 'comment_body': 'The same condition should work just fine.', 'comment_created': datetime.datetime(2021, 3, 31, 5, 33, 10, tzinfo=datetime.timezone.utc), 'commenter': 'XVilka', 'type': 'User'}, {'comment_id': 604634207, 'comment_body': 'That throws up some warnings, as the function is non-void.\r\n```\r\nIn file included from /usr/local/include/librz/rz_vector.h:5,\r\n                 from /usr/local/include/librz/rz_cons.h:21,\r\n                 from /usr/local/include/librz/rz_diff.h:6,\r\n                 from /usr/local/include/librz/rz_util.h:8,\r\n                 from /usr/local/include/librz/rz_io.h:10,\r\n                 from /usr/local/include/librz/rz_analysis.h:14,\r\n                 from ../rz-svd.c:1:\r\n../rz-svd.c: In function ‘ta_iter_next’:\r\n/usr/local/include/librz/rz_util/rz_assert.h:100:4: warning: ‘return’ with no value, in function returning non-void [-Wreturn-type]\r\n  100 |    return; \\\r\n      |    ^~~~~~\r\n../rz-svd.c:156:2: note: in expansion of macro ‘rz_return_if_fail’\r\n  156 |  rz_return_if_fail(r == YXML_ELEMSTART);\r\n      |  ^~~~~~~~~~~~~~~~~\r\n../rz-svd.c:62:17: note: declared here\r\n   62 | static ta_iter *ta_iter_next(ta_iter *ta) {\r\n      |                 ^~~~~~~~~~~~\r\n```', 'comment_created': datetime.datetime(2021, 3, 31, 6, 43, 48, tzinfo=datetime.timezone.utc), 'commenter': 'officialcjunior', 'type': 'User'}, {'comment_id': 604637352, 'comment_body': 'Yes, because in case of the function returning something you need to use `rz_return_val_if_fail()` instead.', 'comment_created': datetime.datetime(2021, 3, 31, 6, 50, 6, tzinfo=datetime.timezone.utc), 'commenter': 'XVilka', 'type': 'User'}, {'comment_id': 605329294, 'comment_body': 'Replaced with an if/return statement. 👍🏽 ', 'comment_created': datetime.datetime(2021, 4, 1, 2, 4, 25, tzinfo=datetime.timezone.utc), 'commenter': 'officialcjunior', 'type': 'User'}, {'comment_id': 676323947, 'comment_body': 'I think description can be much bigger than that.', 'comment_created': datetime.datetime(2021, 7, 26, 6, 28, 18, tzinfo=datetime.timezone.utc), 'commenter': 'XVilka', 'type': 'User'}, {'comment_id': 676324065, 'comment_body': 'Unnecessary empty line', 'comment_created': datetime.datetime(2021, 7, 26, 6, 28, 33, tzinfo=datetime.timezone.utc), 'commenter': 'XVilka', 'type': 'User'}, {'comment_id': 676324425, 'comment_body': 'Maybe better to inverse the if instead.', 'comment_created': datetime.datetime(2021, 7, 26, 6, 29, 19, tzinfo=datetime.timezone.utc), 'commenter': 'XVilka', 'type': 'User'}, {'comment_id': 676324637, 'comment_body': 'Probably better to split this part into a separate function', 'comment_created': datetime.datetime(2021, 7, 26, 6, 29, 54, tzinfo=datetime.timezone.utc), 'commenter': 'XVilka', 'type': 'User'}, {'comment_id': 676325062, 'comment_body': 'I recommend to extract the following part into the separate function as well.', 'comment_created': datetime.datetime(2021, 7, 26, 6, 30, 51, tzinfo=datetime.timezone.utc), 'commenter': 'XVilka', 'type': 'User'}, {'comment_id': 676325575, 'comment_body': 'I guess this is also relevant to https://github.com/rizinorg/rizin/issues/1356', 'comment_created': datetime.datetime(2021, 7, 26, 6, 31, 54, tzinfo=datetime.timezone.utc), 'commenter': 'XVilka', 'type': 'User'}, {'comment_id': 676326233, 'comment_body': 'I think this function is not available everywhere. Please substitute with functions from `rz_util`.', 'comment_created': datetime.datetime(2021, 7, 26, 6, 33, 27, tzinfo=datetime.timezone.utc), 'commenter': 'XVilka', 'type': 'User'}, {'comment_id': 676326510, 'comment_body': 'Extract this logical check into a separate inline function', 'comment_created': datetime.datetime(2021, 7, 26, 6, 34, 6, tzinfo=datetime.timezone.utc), 'commenter': 'XVilka', 'type': 'User'}, {'comment_id': 676340439, 'comment_body': ""It's defined here in the same file, actually: https://github.com/rizinorg/rizin-extras/pull/4/files#diff-784b07645712e153267bd55ec4e84f60a5038d9305822b974f4040b52060722fR35-R41\r\n\r\nI'll see if there's anything in `rz_util`, as well.\r\n"", 'comment_created': datetime.datetime(2021, 7, 26, 7, 2, 24, tzinfo=datetime.timezone.utc), 'commenter': 'officialcjunior', 'type': 'User'}, {'comment_id': 677316896, 'comment_body': ""I don't think so, this is just to handle descriptions like\r\n```xml\r\n              <description>Port x configuration bits (y =\r\n              0..15)</description>\r\n```"", 'comment_created': datetime.datetime(2021, 7, 27, 10, 20, 30, tzinfo=datetime.timezone.utc), 'commenter': 'officialcjunior', 'type': 'User'}, {'comment_id': 680668863, 'comment_body': 'I think `rz_str_ncpy()` does that.', 'comment_created': datetime.datetime(2021, 8, 2, 5, 45, 38, tzinfo=datetime.timezone.utc), 'commenter': 'XVilka', 'type': 'User'}, {'comment_id': 680669470, 'comment_body': 'By the way, the `rz_str_ncpy()` implementation looks inefficient, might make sense to make a pull request to use `memcpy` in it.', 'comment_created': datetime.datetime(2021, 8, 2, 5, 47, 38, tzinfo=datetime.timezone.utc), 'commenter': 'XVilka', 'type': 'User'}, {'comment_id': 681041014, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 8, 2, 14, 54, 38, tzinfo=datetime.timezone.utc), 'commenter': 'officialcjunior', 'type': 'User'}, {'comment_id': 681046258, 'comment_body': 'Okay. Let me see :)', 'comment_created': datetime.datetime(2021, 8, 2, 15, 0, 51, tzinfo=datetime.timezone.utc), 'commenter': 'officialcjunior', 'type': 'User'}]","[{'commit_sha': 'e8574e591f0564d011a22edda44ba1bbe8561ffc', 'committer_username': 'officialcjunior', 'committer_name': 'Aswin C', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 30, 7, 13, 48, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'beacbab924eb6ba48dd7b54c7679b4e1445a5b20', 'committer_username': 'officialcjunior', 'committer_name': 'Aswin C', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 30, 7, 13, 48, tzinfo=datetime.timezone.utc)}, {'commit_sha': '85d0da036d63544c59d2bb9edf8265fd3708e075', 'committer_username': 'officialcjunior', 'committer_name': 'Aswin C', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 30, 7, 13, 48, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ce78bb6c15015f1578825637ce2361a2f150c4a6', 'committer_username': 'officialcjunior', 'committer_name': 'Aswin C', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 30, 7, 13, 48, tzinfo=datetime.timezone.utc)}, {'commit_sha': '09d0f3e5c1b3adf4f2574cc2aba92591b9b92423', 'committer_username': 'officialcjunior', 'committer_name': 'Aswin C', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 30, 7, 13, 48, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b991ed3961a802eb73a507b58dc92ce84ce4da04', 'committer_username': 'officialcjunior', 'committer_name': 'Aswin C', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 30, 7, 13, 48, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5c1244ebb2b5c403e9d45bdf0b88046a59a96802', 'committer_username': 'officialcjunior', 'committer_name': 'Aswin C', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 30, 7, 13, 48, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd5d064619c793b2461466d2ff391217d8c6937fc', 'committer_username': 'officialcjunior', 'committer_name': 'Aswin C', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 30, 7, 13, 48, tzinfo=datetime.timezone.utc)}, {'commit_sha': '93ae23be303bbffd62d116b683d02ec48d355c8c', 'committer_username': 'officialcjunior', 'committer_name': 'Aswin C', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 30, 7, 13, 48, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9dd12e8c69f5218592c200633c06ee09590feea9', 'committer_username': 'officialcjunior', 'committer_name': 'Aswin C', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 30, 7, 13, 48, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7de3caabba0abdd5d45b249e23db84bd717045cc', 'committer_username': 'officialcjunior', 'committer_name': 'Aswin C', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 30, 7, 13, 48, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'be4a78e4a34bd8323df41aaa0ae69f679a3a9b63', 'committer_username': 'officialcjunior', 'committer_name': 'Aswin C', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 30, 7, 13, 48, tzinfo=datetime.timezone.utc)}]",Aswin C,29057155,,User,,41,,502,210

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
299867499,rizin,rizinorg/rizin,C,348,2603,47,1039,29226,438,81,49,"[{'id': 797127356, 'number': 2076, 'closed': datetime.datetime(2024, 1, 11, 12, 13, 15, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 12, 7, 17, 12, 23, tzinfo=datetime.timezone.utc), 'time_taken': 66078052.0, 'time_delta': '764 days, 19:00:52', 'additions': 21, 'deletions': 0, 'state': 'closed'}, {'id': 789898504, 'number': 2038, 'closed': datetime.datetime(2024, 1, 11, 12, 16, 3, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 11, 27, 8, 49, 2, tzinfo=datetime.timezone.utc), 'time_taken': 66972421.0, 'time_delta': '775 days, 3:27:01', 'additions': 72, 'deletions': 57, 'state': 'closed'}, {'id': 764618304, 'number': 1879, 'closed': datetime.datetime(2021, 10, 29, 12, 25, 1, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 10, 23, 5, 28, 25, tzinfo=datetime.timezone.utc), 'time_taken': 543396.0, 'time_delta': '6 days, 6:56:36', 'additions': 114, 'deletions': 140, 'state': 'closed'}, {'id': 753877232, 'number': 1809, 'closed': datetime.datetime(2021, 10, 22, 5, 33, 35, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 10, 8, 9, 40, 37, tzinfo=datetime.timezone.utc), 'time_taken': 1194778.0, 'time_delta': '13 days, 19:52:58', 'additions': 557, 'deletions': 253, 'state': 'closed'}, {'id': 734132629, 'number': 1686, 'closed': datetime.datetime(2021, 9, 24, 9, 8, 9, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 9, 15, 0, 50, 55, tzinfo=datetime.timezone.utc), 'time_taken': 807434.0, 'time_delta': '9 days, 8:17:14', 'additions': 51, 'deletions': 3, 'state': 'closed'}, {'id': 716119188, 'number': 1488, 'closed': datetime.datetime(2021, 9, 9, 11, 46, 9, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 19, 17, 14, 8, tzinfo=datetime.timezone.utc), 'time_taken': 1794721.0, 'time_delta': '20 days, 18:32:01', 'additions': 222, 'deletions': 499, 'state': 'closed'}, {'id': 701876941, 'number': 1395, 'closed': datetime.datetime(2021, 8, 25, 10, 21, 45, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 3, 1, 5, 58, tzinfo=datetime.timezone.utc), 'time_taken': 1934147.0, 'time_delta': '22 days, 9:15:47', 'additions': 43, 'deletions': 13, 'state': 'closed'}, {'id': 701527989, 'number': 1394, 'closed': datetime.datetime(2021, 8, 3, 3, 54, 48, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 2, 14, 41, 13, tzinfo=datetime.timezone.utc), 'time_taken': 47615.0, 'time_delta': '13:13:35', 'additions': 4, 'deletions': 0, 'state': 'closed'}, {'id': 691330262, 'number': 1319, 'closed': datetime.datetime(2021, 7, 19, 14, 55, 54, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 16, 9, 23, 21, tzinfo=datetime.timezone.utc), 'time_taken': 279153.0, 'time_delta': '3 days, 5:32:33', 'additions': 421, 'deletions': 72, 'state': 'closed'}, {'id': 689963332, 'number': 1307, 'closed': datetime.datetime(2021, 7, 15, 8, 13, 58, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 14, 14, 26, 31, tzinfo=datetime.timezone.utc), 'time_taken': 64047.0, 'time_delta': '17:47:27', 'additions': 1650, 'deletions': 12, 'state': 'closed'}, {'id': 688532049, 'number': 1302, 'closed': datetime.datetime(2021, 7, 13, 8, 15, 12, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 13, 6, 40, 48, tzinfo=datetime.timezone.utc), 'time_taken': 5664.0, 'time_delta': '1:34:24', 'additions': 13, 'deletions': 11, 'state': 'closed'}, {'id': 684849482, 'number': 1278, 'closed': datetime.datetime(2021, 7, 13, 8, 55, 24, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 7, 4, 26, 10, tzinfo=datetime.timezone.utc), 'time_taken': 534554.0, 'time_delta': '6 days, 4:29:14', 'additions': 6, 'deletions': 1, 'state': 'closed'}, {'id': 684003713, 'number': 1271, 'closed': datetime.datetime(2021, 7, 7, 7, 16, 51, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 6, 1, 48, 58, tzinfo=datetime.timezone.utc), 'time_taken': 106073.0, 'time_delta': '1 day, 5:27:53', 'additions': 130, 'deletions': 3, 'state': 'closed'}, {'id': 682946472, 'number': 1263, 'closed': datetime.datetime(2021, 7, 5, 4, 3, 38, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 3, 1, 57, 53, tzinfo=datetime.timezone.utc), 'time_taken': 180345.0, 'time_delta': '2 days, 2:05:45', 'additions': 5148, 'deletions': 1, 'state': 'closed'}, {'id': 679904577, 'number': 1254, 'closed': datetime.datetime(2021, 7, 2, 4, 55, 31, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 29, 12, 14, 47, tzinfo=datetime.timezone.utc), 'time_taken': 232844.0, 'time_delta': '2 days, 16:40:44', 'additions': 546, 'deletions': 18, 'state': 'closed'}, {'id': 673963180, 'number': 1228, 'closed': datetime.datetime(2021, 6, 25, 19, 2, 17, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 20, 2, 20, 18, tzinfo=datetime.timezone.utc), 'time_taken': 492119.0, 'time_delta': '5 days, 16:41:59', 'additions': 68, 'deletions': 1, 'state': 'closed'}, {'id': 670052072, 'number': 1215, 'closed': datetime.datetime(2021, 6, 16, 8, 22, 47, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 15, 4, 55, 9, tzinfo=datetime.timezone.utc), 'time_taken': 98858.0, 'time_delta': '1 day, 3:27:38', 'additions': 42, 'deletions': 33, 'state': 'closed'}, {'id': 669037985, 'number': 1211, 'closed': datetime.datetime(2021, 6, 13, 14, 14, 6, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 13, 11, 35, 51, tzinfo=datetime.timezone.utc), 'time_taken': 9495.0, 'time_delta': '2:38:15', 'additions': 6, 'deletions': 17, 'state': 'closed'}, {'id': 662860536, 'number': 1193, 'closed': datetime.datetime(2021, 6, 11, 12, 29, 12, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 6, 8, 44, 9, tzinfo=datetime.timezone.utc), 'time_taken': 445503.0, 'time_delta': '5 days, 3:45:03', 'additions': 2694, 'deletions': 21, 'state': 'closed'}, {'id': 650665702, 'number': 1160, 'closed': datetime.datetime(2021, 6, 1, 18, 1, 51, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 5, 22, 18, 7, 47, tzinfo=datetime.timezone.utc), 'time_taken': 863644.0, 'time_delta': '9 days, 23:54:04', 'additions': 454, 'deletions': 138, 'state': 'closed'}, {'id': 647743753, 'number': 1152, 'closed': datetime.datetime(2021, 5, 24, 4, 59, 49, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 5, 19, 14, 41, 29, tzinfo=datetime.timezone.utc), 'time_taken': 397100.0, 'time_delta': '4 days, 14:18:20', 'additions': 244, 'deletions': 6, 'state': 'closed'}, {'id': 644122012, 'number': 1129, 'closed': datetime.datetime(2021, 5, 13, 17, 22, 32, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 5, 13, 17, 20, 1, tzinfo=datetime.timezone.utc), 'time_taken': 151.0, 'time_delta': '0:02:31', 'additions': 1, 'deletions': 0, 'state': 'closed'}, {'id': 641406171, 'number': 1122, 'closed': datetime.datetime(2021, 5, 13, 15, 52, 2, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 5, 11, 18, 53, 10, tzinfo=datetime.timezone.utc), 'time_taken': 161932.0, 'time_delta': '1 day, 20:58:52', 'additions': 53, 'deletions': 12, 'state': 'closed'}, {'id': 630268615, 'number': 1102, 'closed': datetime.datetime(2021, 5, 9, 2, 13, 16, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 5, 5, 5, 9, 28, tzinfo=datetime.timezone.utc), 'time_taken': 335028.0, 'time_delta': '3 days, 21:03:48', 'additions': 179, 'deletions': 1, 'state': 'closed'}, {'id': 613832627, 'number': 1005, 'closed': datetime.datetime(2021, 4, 13, 8, 1, 55, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 4, 12, 18, 6, 35, tzinfo=datetime.timezone.utc), 'time_taken': 50120.0, 'time_delta': '13:55:20', 'additions': 29, 'deletions': 7, 'state': 'closed'}, {'id': 602826563, 'number': 932, 'closed': datetime.datetime(2021, 3, 30, 6, 55, 21, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 3, 29, 14, 47, 16, tzinfo=datetime.timezone.utc), 'time_taken': 58085.0, 'time_delta': '16:08:05', 'additions': 25, 'deletions': 4, 'state': 'closed'}, {'id': 601811933, 'number': 910, 'closed': datetime.datetime(2021, 3, 29, 4, 28, 7, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 3, 26, 17, 59, 31, tzinfo=datetime.timezone.utc), 'time_taken': 210516.0, 'time_delta': '2 days, 10:28:36', 'additions': 4, 'deletions': 10, 'state': 'closed'}, {'id': 592737411, 'number': 821, 'closed': datetime.datetime(2021, 3, 15, 9, 28, 30, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 3, 15, 5, 11, 59, tzinfo=datetime.timezone.utc), 'time_taken': 15391.0, 'time_delta': '4:16:31', 'additions': 30, 'deletions': 21, 'state': 'closed'}, {'id': 586226462, 'number': 781, 'closed': datetime.datetime(2021, 3, 8, 2, 42, 58, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 3, 7, 10, 33, 25, tzinfo=datetime.timezone.utc), 'time_taken': 58173.0, 'time_delta': '16:09:33', 'additions': 1, 'deletions': 10, 'state': 'closed'}, {'id': 584862998, 'number': 764, 'closed': datetime.datetime(2021, 3, 5, 9, 28, 22, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 3, 4, 14, 44, 43, tzinfo=datetime.timezone.utc), 'time_taken': 67419.0, 'time_delta': '18:43:39', 'additions': 16, 'deletions': 0, 'state': 'closed'}, {'id': 579245515, 'number': 709, 'closed': datetime.datetime(2021, 3, 9, 14, 52, 12, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 2, 24, 11, 59, 25, tzinfo=datetime.timezone.utc), 'time_taken': 1133567.0, 'time_delta': '13 days, 2:52:47', 'additions': 282, 'deletions': 41, 'state': 'closed'}, {'id': 579021159, 'number': 699, 'closed': datetime.datetime(2021, 2, 25, 17, 21, 23, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 2, 24, 6, 18, 37, tzinfo=datetime.timezone.utc), 'time_taken': 126166.0, 'time_delta': '1 day, 11:02:46', 'additions': 9, 'deletions': 7, 'state': 'closed'}, {'id': 576430849, 'number': 659, 'closed': datetime.datetime(2021, 2, 23, 9, 51, 7, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 2, 19, 12, 40, 10, tzinfo=datetime.timezone.utc), 'time_taken': 335457.0, 'time_delta': '3 days, 21:10:57', 'additions': 172, 'deletions': 83, 'state': 'closed'}, {'id': 574630865, 'number': 640, 'closed': datetime.datetime(2021, 2, 17, 8, 48, 59, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 2, 17, 4, 19, 54, tzinfo=datetime.timezone.utc), 'time_taken': 16145.0, 'time_delta': '4:29:05', 'additions': 0, 'deletions': 5, 'state': 'closed'}, {'id': 573194738, 'number': 625, 'closed': datetime.datetime(2021, 2, 15, 10, 20, 12, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 2, 15, 1, 19, 34, tzinfo=datetime.timezone.utc), 'time_taken': 32438.0, 'time_delta': '9:00:38', 'additions': 1, 'deletions': 49, 'state': 'closed'}, {'id': 572543442, 'number': 604, 'closed': datetime.datetime(2021, 2, 13, 17, 50, 12, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 2, 12, 14, 7, 16, tzinfo=datetime.timezone.utc), 'time_taken': 99776.0, 'time_delta': '1 day, 3:42:56', 'additions': 17, 'deletions': 12, 'state': 'closed'}, {'id': 570771185, 'number': 567, 'closed': datetime.datetime(2021, 2, 10, 12, 26, 29, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 2, 10, 2, 42, 24, tzinfo=datetime.timezone.utc), 'time_taken': 35045.0, 'time_delta': '9:44:05', 'additions': 15, 'deletions': 34, 'state': 'closed'}, {'id': 568690655, 'number': 525, 'closed': datetime.datetime(2021, 2, 10, 13, 30, 22, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 2, 6, 1, 8, 48, tzinfo=datetime.timezone.utc), 'time_taken': 390094.0, 'time_delta': '4 days, 12:21:34', 'additions': 181, 'deletions': 9, 'state': 'closed'}, {'id': 568354894, 'number': 523, 'closed': datetime.datetime(2021, 2, 6, 15, 18, 1, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 2, 5, 13, 30, tzinfo=datetime.timezone.utc), 'time_taken': 92881.0, 'time_delta': '1 day, 1:48:01', 'additions': 7, 'deletions': 5, 'state': 'closed'}, {'id': 564792877, 'number': 503, 'closed': datetime.datetime(2021, 2, 3, 15, 20, 12, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 2, 1, 2, 22, 37, tzinfo=datetime.timezone.utc), 'time_taken': 219455.0, 'time_delta': '2 days, 12:57:35', 'additions': 24, 'deletions': 19, 'state': 'closed'}, {'id': 563969204, 'number': 492, 'closed': datetime.datetime(2021, 1, 29, 17, 7, 53, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 1, 29, 12, 58, 59, tzinfo=datetime.timezone.utc), 'time_taken': 14934.0, 'time_delta': '4:08:54', 'additions': 3, 'deletions': 4, 'state': 'closed'}, {'id': 563863753, 'number': 490, 'closed': datetime.datetime(2021, 1, 30, 11, 38, 2, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 1, 29, 9, 44, 5, tzinfo=datetime.timezone.utc), 'time_taken': 93237.0, 'time_delta': '1 day, 1:53:57', 'additions': 32, 'deletions': 33, 'state': 'closed'}, {'id': 559959151, 'number': 431, 'closed': datetime.datetime(2021, 1, 27, 13, 33, 35, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 1, 22, 13, 19, 41, tzinfo=datetime.timezone.utc), 'time_taken': 432834.0, 'time_delta': '5 days, 0:13:54', 'additions': 54, 'deletions': 30, 'state': 'closed'}, {'id': 558176048, 'number': 408, 'closed': datetime.datetime(2021, 1, 21, 4, 57, 2, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 1, 20, 11, 37, 52, tzinfo=datetime.timezone.utc), 'time_taken': 62350.0, 'time_delta': '17:19:10', 'additions': 9, 'deletions': 8, 'state': 'closed'}, {'id': 557462024, 'number': 395, 'closed': datetime.datetime(2021, 1, 19, 15, 39, 58, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 1, 19, 14, 17, 30, tzinfo=datetime.timezone.utc), 'time_taken': 4948.0, 'time_delta': '1:22:28', 'additions': 0, 'deletions': 3, 'state': 'closed'}, {'id': 556264957, 'number': 378, 'closed': datetime.datetime(2021, 2, 11, 17, 35, 32, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 1, 17, 2, 42, 56, tzinfo=datetime.timezone.utc), 'time_taken': 2213556.0, 'time_delta': '25 days, 14:52:36', 'additions': 2, 'deletions': 2, 'state': 'closed'}, {'id': 555720818, 'number': 366, 'closed': datetime.datetime(2021, 1, 15, 15, 59, 36, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 1, 15, 14, 6, 8, tzinfo=datetime.timezone.utc), 'time_taken': 6808.0, 'time_delta': '1:53:28', 'additions': 1, 'deletions': 4, 'state': 'closed'}, {'id': 554883599, 'number': 359, 'closed': datetime.datetime(2021, 1, 15, 8, 20, 58, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 1, 14, 12, 0, 7, tzinfo=datetime.timezone.utc), 'time_taken': 73251.0, 'time_delta': '20:20:51', 'additions': 6, 'deletions': 7, 'state': 'closed'}, {'id': 554671807, 'number': 357, 'closed': datetime.datetime(2021, 1, 15, 16, 40, 4, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 1, 14, 6, 14, 57, tzinfo=datetime.timezone.utc), 'time_taken': 123907.0, 'time_delta': '1 day, 10:25:07', 'additions': 16, 'deletions': 1, 'state': 'closed'}, {'id': 554058959, 'number': 353, 'closed': datetime.datetime(2021, 1, 13, 10, 35, 48, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 1, 13, 9, 51, 6, tzinfo=datetime.timezone.utc), 'time_taken': 2682.0, 'time_delta': '0:44:42', 'additions': 6, 'deletions': 6, 'state': 'closed'}, {'id': 552916986, 'number': 344, 'closed': datetime.datetime(2021, 1, 13, 4, 26, 13, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 1, 11, 17, 59, 43, tzinfo=datetime.timezone.utc), 'time_taken': 123990.0, 'time_delta': '1 day, 10:26:30', 'additions': 19, 'deletions': 15, 'state': 'closed'}, {'id': 550019306, 'number': 318, 'closed': datetime.datetime(2021, 1, 10, 11, 54, 35, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 1, 6, 6, 16, 2, tzinfo=datetime.timezone.utc), 'time_taken': 365913.0, 'time_delta': '4 days, 5:38:33', 'additions': 0, 'deletions': 7, 'state': 'closed'}, {'id': 548672599, 'number': 306, 'closed': datetime.datetime(2021, 1, 5, 6, 29, 52, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 1, 5, 6, 10, 58, tzinfo=datetime.timezone.utc), 'time_taken': 1134.0, 'time_delta': '0:18:54', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 545784934, 'number': 271, 'closed': datetime.datetime(2020, 12, 27, 15, 59, 17, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 12, 27, 9, 30, 30, tzinfo=datetime.timezone.utc), 'time_taken': 23327.0, 'time_delta': '6:28:47', 'additions': 0, 'deletions': 2, 'state': 'closed'}, {'id': 543995126, 'number': 245, 'closed': datetime.datetime(2020, 12, 22, 11, 40, 36, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 12, 22, 9, 34, 17, tzinfo=datetime.timezone.utc), 'time_taken': 7579.0, 'time_delta': '2:06:19', 'additions': 3, 'deletions': 0, 'state': 'closed'}, {'id': 535921562, 'number': 163, 'closed': datetime.datetime(2020, 12, 12, 10, 53, 6, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 12, 10, 13, 3, 37, tzinfo=datetime.timezone.utc), 'time_taken': 164969.0, 'time_delta': '1 day, 21:49:29', 'additions': 37, 'deletions': 3, 'state': 'closed'}, {'id': 535638875, 'number': 155, 'closed': datetime.datetime(2020, 12, 15, 11, 47, 34, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 12, 10, 4, 56, 50, tzinfo=datetime.timezone.utc), 'time_taken': 456644.0, 'time_delta': '5 days, 6:50:44', 'additions': 359, 'deletions': 44, 'state': 'closed'}]"
319685672,rizin-extras,rizinorg/rizin-extras,C,3,8,4,81,657,2,3,0,"[{'id': 707391428, 'number': 11, 'closed': datetime.datetime(2021, 8, 12, 4, 32, 8, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 10, 14, 10, 14, tzinfo=datetime.timezone.utc), 'time_taken': 138114.0, 'time_delta': '1 day, 14:21:54', 'additions': 1300, 'deletions': 55, 'state': 'closed'}, {'id': 707070940, 'number': 10, 'closed': datetime.datetime(2021, 8, 10, 6, 40, 49, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 10, 6, 38, 53, tzinfo=datetime.timezone.utc), 'time_taken': 116.0, 'time_delta': '0:01:56', 'additions': 14, 'deletions': 11, 'state': 'closed'}, {'id': 628542077, 'number': 7, 'closed': datetime.datetime(2021, 5, 5, 11, 49, 34, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 5, 2, 5, 3, 38, tzinfo=datetime.timezone.utc), 'time_taken': 283556.0, 'time_delta': '3 days, 6:45:56', 'additions': 68, 'deletions': 54, 'state': 'closed'}, {'id': 618234411, 'number': 6, 'closed': datetime.datetime(2021, 4, 21, 8, 35, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 4, 19, 17, 40, 13, tzinfo=datetime.timezone.utc), 'time_taken': 140087.0, 'time_delta': '1 day, 14:54:47', 'additions': 20, 'deletions': 27, 'state': 'closed'}, {'id': 592711458, 'number': 4, 'closed': datetime.datetime(2021, 8, 10, 6, 21, 53, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 3, 15, 4, 0, 13, tzinfo=datetime.timezone.utc), 'time_taken': 12795700.0, 'time_delta': '148 days, 2:21:40', 'additions': 40771, 'deletions': 0, 'state': 'closed'}, {'id': 590714545, 'number': 3, 'closed': datetime.datetime(2021, 4, 19, 5, 47, 7, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 3, 11, 9, 37, 43, tzinfo=datetime.timezone.utc), 'time_taken': 3355764.0, 'time_delta': '38 days, 20:09:24', 'additions': 274, 'deletions': 193, 'state': 'closed'}]"
