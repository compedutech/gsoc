pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
487900589,"Fix to #225, added better error reporting for internal compiler errors.","Previously, when an incorrect table was passed into a function dealing with a certain type of table, only an ""impossible"" error was thrown followed by a Lua stack trace.

Now it's possible to see the tag which caused the error, and wherever appropriate, an error message following it. Calls to `error(""impossible"")` have been replaced with a call to `typedecl.tag_error(tag, ""(optional error message.)"")`.

Hopefully, this should fix [#225 ](https://github.com/pallene-lang/pallene/issues/225).",True,329,https://api.github.com/repos/pallene-lang/pallene/pulls/329,https://github.com/pallene-lang/pallene/pull/329,closed,119,46,10,29,9,31,0,0,[],2020-09-16 10:48:59+00:00,2020-09-18 17:33:53+00:00,197094.0,"2 days, 6:44:54","[{'comment_id': 489486556, 'comment_body': 'This comment might benefit from an example. For instance, tag is `ast.Exp.Bool` and tag_prefix is `ast.Exp`', 'comment_created': datetime.datetime(2020, 9, 16, 14, 34, 15, tzinfo=datetime.timezone.utc), 'commenter': 'hugomg', 'type': 'User'}, {'comment_id': 489487138, 'comment_body': 'Our code style is to not leave a blank space between the doc comment and the function. Could you please remove this space and the other ones?', 'comment_created': datetime.datetime(2020, 9, 16, 14, 35, 2, tzinfo=datetime.timezone.utc), 'commenter': 'hugomg', 'type': 'User'}, {'comment_id': 489489483, 'comment_body': 'Our coding style has a 100-column limit. This should all fit in a single line.\r\n\r\n(By the way, if you want to make more contributions in the future, one thing that could help is installing the [Editorconfig](https://editorconfig.org/) plugin in your text editor. That way it automatically will follow all the settings that we put in the editorconfig file in the root of this project.)', 'comment_created': datetime.datetime(2020, 9, 16, 14, 38, 6, tzinfo=datetime.timezone.utc), 'commenter': 'hugomg', 'type': 'User'}, {'comment_id': 489492491, 'comment_body': 'Do we really need this helper function. For me I think `typedecl.tag_matches(tag, ""types.T"")` is clearer than `typedecl.tag_is_type(tag)`', 'comment_created': datetime.datetime(2020, 9, 16, 14, 41, 51, tzinfo=datetime.timezone.utc), 'commenter': 'hugomg', 'type': 'User'}, {'comment_id': 489493540, 'comment_body': ""This one can use the default error message.\r\n\r\nIn this case, the if-else-if is covering every existing types.T. Functions like this one that cover every possible tag are the common case and I think we can use the default error message for them. I don't want to have to come up with a clever error for every one of them :) We can use the special error messages in functions like `types.is_indexable`, which don't cover all the possible tags. A good rule of thumb is whether we need to use the `typedecl.tag_matches` function."", 'comment_created': datetime.datetime(2020, 9, 16, 14, 43, 13, tzinfo=datetime.timezone.utc), 'commenter': 'hugomg', 'type': 'User'}, {'comment_id': 489501750, 'comment_body': ""This `tag_matches`  is not needed. This is_condition function is testing every possible tag for `typed.T` so anything that doesn't match will not be a type (and should be handled by the default error message).\r\n\r\nThe only time that a `types.T` will not match here is if we create a new kind of type.T and forget to edit the if-elseif. But those cases also ought to be covered by the default error message."", 'comment_created': datetime.datetime(2020, 9, 16, 14, 53, 36, tzinfo=datetime.timezone.utc), 'commenter': 'hugomg', 'type': 'User'}, {'comment_id': 489506404, 'comment_body': 'In this part of the code we have already checked that `tag1 == tag2`, meaning that is just a regular if-elseif over `types.T`. I think we can use the default error message. \r\n\r\nHowever, the code at the start of the function might get confused if `tag1` or `tag2` are not type tags. Now that we have a tag_matches function, we could add a couple of assertions to protect against it.\r\n\r\n```\r\nlocal tag1 = t1._tag\r\nlocal tag2 = t2._tag\r\nassert(typedecl.tag_matches(tag1, ""types.T""))\r\nassert(typedecl.tag_matches(tag2, ""types.T""))\r\n```', 'comment_created': datetime.datetime(2020, 9, 16, 14, 59, 34, tzinfo=datetime.timezone.utc), 'commenter': 'hugomg', 'type': 'User'}, {'comment_id': 489507196, 'comment_body': 'I also think we might not need this elseif', 'comment_created': datetime.datetime(2020, 9, 16, 15, 0, 31, tzinfo=datetime.timezone.utc), 'commenter': 'hugomg', 'type': 'User'}, {'comment_id': 489510195, 'comment_body': 'Nice. This is exactly the kind of situation that benefits the most from a custom error message.\r\n\r\nSmall suggestion: what do you think about changing the error message to `loop type is not a number type`?', 'comment_created': datetime.datetime(2020, 9, 16, 15, 4, 26, tzinfo=datetime.timezone.utc), 'commenter': 'hugomg', 'type': 'User'}, {'comment_id': 489512396, 'comment_body': 'With the new default error message I proposed, I think we could use `typedecl.tag_error(op)`.', 'comment_created': datetime.datetime(2020, 9, 16, 15, 7, 17, tzinfo=datetime.timezone.utc), 'commenter': 'hugomg', 'type': 'User'}, {'comment_id': 489512976, 'comment_body': 'Again, the error message should reference `op`, not the `tag`. With the error message I suggested I think we could use `typedecl.tag_error(op)`.', 'comment_created': datetime.datetime(2020, 9, 16, 15, 8, 3, tzinfo=datetime.timezone.utc), 'commenter': 'hugomg', 'type': 'User'}, {'comment_id': 489513718, 'comment_body': 'I think the default error message is fine here.', 'comment_created': datetime.datetime(2020, 9, 16, 15, 9, 4, tzinfo=datetime.timezone.utc), 'commenter': 'hugomg', 'type': 'User'}, {'comment_id': 489514202, 'comment_body': 'This is another case where I think the default error message is ok.', 'comment_created': datetime.datetime(2020, 9, 16, 15, 9, 44, tzinfo=datetime.timezone.utc), 'commenter': 'hugomg', 'type': 'User'}, {'comment_id': 489515800, 'comment_body': 'I just noticed that this error message is outdated. In the past, the `any` type used to be called `value` but we forgot to update the error message when that changes.\r\n\r\nCould you please change the error message to `""Any"" is not a Lua type tag`?', 'comment_created': datetime.datetime(2020, 9, 16, 15, 11, 51, tzinfo=datetime.timezone.utc), 'commenter': 'hugomg', 'type': 'User'}, {'comment_id': 489516583, 'comment_body': 'I think it is ok if we use the default error message here.', 'comment_created': datetime.datetime(2020, 9, 16, 15, 12, 56, tzinfo=datetime.timezone.utc), 'commenter': 'hugomg', 'type': 'User'}, {'comment_id': 489519194, 'comment_body': 'If the error happens, it should be clear what the type tag was because of the preceding if statement. I think we can continue using `error(""not implemented"")` here. ', 'comment_created': datetime.datetime(2020, 9, 16, 15, 16, 32, tzinfo=datetime.timezone.utc), 'commenter': 'hugomg', 'type': 'User'}, {'comment_id': 489523267, 'comment_body': 'I think the `tag_error(tag` is not appropriate here, because the tags that actually matter for the error are `dst_typ._tag` and `src_typ.tag` and not the `exp._tag`.\r\n\r\nI like the new error message but I think we could just use a plain `error(string.format(` instead.', 'comment_created': datetime.datetime(2020, 9, 16, 15, 21, 50, tzinfo=datetime.timezone.utc), 'commenter': 'hugomg', 'type': 'User'}, {'comment_id': 489532665, 'comment_body': 'What do you think about changing the error message to not mention the word ""tag""? This way it would also be usable in other kinds of if-elseif like the binary operators and the builtin function names. Suggestion:\r\n\r\n```\r\nfunction typedecl.tag_error(tag, message)\r\n    message = message or ""input has the wrong type or an elseif case is missing""\r\n    error(string.format(""the if-elseif did not handle case %s: %s"", tag, message))\r\nend\r\n```', 'comment_created': datetime.datetime(2020, 9, 16, 15, 34, 17, tzinfo=datetime.timezone.utc), 'commenter': 'hugomg', 'type': 'User'}, {'comment_id': 489545018, 'comment_body': 'This tag_error should be referencing the `bname`, not the `cname._tag`.\r\n\r\n```\r\ntypedecl.tag_error(bname)\r\n```', 'comment_created': datetime.datetime(2020, 9, 16, 15, 51, 30, tzinfo=datetime.timezone.utc), 'commenter': 'hugomg', 'type': 'User'}, {'comment_id': 489593101, 'comment_body': 'Ah, I somehow missed that. will do.', 'comment_created': datetime.datetime(2020, 9, 16, 17, 9, 31, tzinfo=datetime.timezone.utc), 'commenter': 'srijan-paul', 'type': 'User'}, {'comment_id': 489613205, 'comment_body': ""Oh shoot, I forgot about that too.\r\n\r\n Yeah, I definitely have intentions of making contributions in the future since I love compilers and have been exploring type systems as of late.\r\n\r\nI actually messed this up because I was coding on my Linux PC, If I manage to get Pallene built up and running on windows these silly errors most likely won't persist."", 'comment_created': datetime.datetime(2020, 9, 16, 17, 45, 5, tzinfo=datetime.timezone.utc), 'commenter': 'srijan-paul', 'type': 'User'}, {'comment_id': 489617055, 'comment_body': 'will do', 'comment_created': datetime.datetime(2020, 9, 16, 17, 51, 49, tzinfo=datetime.timezone.utc), 'commenter': 'srijan-paul', 'type': 'User'}, {'comment_id': 489968579, 'comment_body': 'Oh, I noticed that in places where `string.matches` is used, the prefix being tested is `""types.T.""`.\r\nI think it would make more sense to check every tag prefix with the the second ""."" included, no ?', 'comment_created': datetime.datetime(2020, 9, 17, 4, 49, 14, tzinfo=datetime.timezone.utc), 'commenter': 'srijan-paul', 'type': 'User'}, {'comment_id': 489969299, 'comment_body': 'Yeah, this error message is a bit unclear. fixed.', 'comment_created': datetime.datetime(2020, 9, 17, 4, 51, 35, tzinfo=datetime.timezone.utc), 'commenter': 'srijan-paul', 'type': 'User'}, {'comment_id': 489976125, 'comment_body': ""Yes, I think that would allow for more uses of `tag_error`.\r\nMy reasoning was that the function name implies the error is always associated with a tag.\r\n\r\nHowever I do agree this allows for more liberal use of the function. I'll change it. :+1:  "", 'comment_created': datetime.datetime(2020, 9, 17, 5, 17, 42, tzinfo=datetime.timezone.utc), 'commenter': 'srijan-paul', 'type': 'User'}, {'comment_id': 490260159, 'comment_body': ""Good idea. It would be safer to always add the second `.`. What do you think about adding this  `.` inside the `tag_matches` function, so the caller doesn't have to remember to add it themselves?"", 'comment_created': datetime.datetime(2020, 9, 17, 13, 48, 13, tzinfo=datetime.timezone.utc), 'commenter': 'hugomg', 'type': 'User'}, {'comment_id': 490584057, 'comment_body': 'Should this be `local tagname = assert(typedecl.match_tag(cmd._tag, ""ir.Cmd""))`?', 'comment_created': datetime.datetime(2020, 9, 17, 21, 55, 6, tzinfo=datetime.timezone.utc), 'commenter': 'hugomg', 'type': 'User'}, {'comment_id': 490588371, 'comment_body': 'One problem with using string.match here is that special characters in the tag_prefix will be treated as a regular expression. For example, a prefix of `types.T` would also match `typesaT` or `typesbT`, which is not what we want to happen.\r\n\r\nOne possible fix is to use string.sub to get the parts of the string that we are looking for:\r\n\r\n```\r\n\r\nfunction typedecl.match_tag(tag, tag_prefix)\r\n    local n = #tag_prefix\r\n    if type(tag) == ""string"" and\r\n       string.sub(tag, 1, n) == tag_prefix and\r\n       string.byte(tag, n+1) == 46 -- "".""\r\n    then\r\n        return string.sub(tag, n+2)\r\n    else\r\n        return false\r\n    end\r\nend\r\n```', 'comment_created': datetime.datetime(2020, 9, 17, 22, 5, 39, tzinfo=datetime.timezone.utc), 'commenter': 'hugomg', 'type': 'User'}, {'comment_id': 490702222, 'comment_body': 'Oh yes, my bad. ', 'comment_created': datetime.datetime(2020, 9, 18, 4, 57, 36, tzinfo=datetime.timezone.utc), 'commenter': 'srijan-paul', 'type': 'User'}, {'comment_id': 491023951, 'comment_body': '* We could put each test case in a separate `it` block. That way we can give a descriptive name for each of them. For example the first test can say that it is testing that the ""."" is not being interpreted as a regex character.\r\n* The second test case could test that the return value is `""baz""` instead of only testing that it is truthy\r\n* I think we don\'t need to put that `"""")` at the end', 'comment_created': datetime.datetime(2020, 9, 18, 15, 24, 4, tzinfo=datetime.timezone.utc), 'commenter': 'hugomg', 'type': 'User'}, {'comment_id': 491074910, 'comment_body': 'True, should have gone with more descriptive test logs.\r\nDone :+1:. ', 'comment_created': datetime.datetime(2020, 9, 18, 16, 54, 13, tzinfo=datetime.timezone.utc), 'commenter': 'srijan-paul', 'type': 'User'}]","[{'commit_sha': '6a08daa174aea4f7299211410db938a85e0371ce', 'committer_username': 'srijan-paul', 'committer_name': 'injuly', 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 10, 12, 2, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fd0d9ef38c92c7fa321708e1f38b0e17bbcbcca2', 'committer_username': 'srijan-paul', 'committer_name': 'injuly', 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 10, 12, 2, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b8ee216c4e97bfda82fa6b84ac6301cdabb6bf41', 'committer_username': 'srijan-paul', 'committer_name': 'injuly', 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 10, 12, 2, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '95b4d3d9fd02addde52246de273c67f2b4530ddd', 'committer_username': 'srijan-paul', 'committer_name': 'injuly', 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 10, 12, 2, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7f74d2ef2d32126fc0540c2df6cfa990c1f9c3c4', 'committer_username': 'srijan-paul', 'committer_name': 'injuly', 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 10, 12, 2, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f02aaf7fbaf3508c77364d8a21a197f7365380ba', 'committer_username': 'srijan-paul', 'committer_name': 'injuly', 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 10, 12, 2, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a06532bae2dc08eb89ce266b6a2adec88abe1f33', 'committer_username': 'srijan-paul', 'committer_name': 'injuly', 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 10, 12, 2, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7a0729b56f214d17f5f20628c5ed75d8609d68f5', 'committer_username': 'srijan-paul', 'committer_name': 'injuly', 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 10, 12, 2, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ca72031ef7b504631f57a2d100d3075db64a1eb6', 'committer_username': 'srijan-paul', 'committer_name': 'injuly', 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 10, 12, 2, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2134fe51fe25cbe6db8ebc53c63f7da5bce5c2c6', 'committer_username': 'srijan-paul', 'committer_name': 'injuly', 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 10, 12, 2, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6910a0d494380e1f5a81aa8c30bdcfd690c8c404', 'committer_username': 'srijan-paul', 'committer_name': 'injuly', 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 10, 12, 2, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b6091ac49f22641ff892b795ac57c25a496bf7fc', 'committer_username': 'srijan-paul', 'committer_name': 'injuly', 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 10, 12, 2, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '706aed2eb634ac3fdbb7fc46bc42c714ca3bf929', 'committer_username': 'srijan-paul', 'committer_name': 'injuly', 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 10, 12, 2, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '29c9befa4e8fff7e636aa4c6f3a10d773126e804', 'committer_username': 'srijan-paul', 'committer_name': 'injuly', 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 10, 12, 2, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'edd073aa44de748f380f2f67110035b8a5a0ab6b', 'committer_username': 'srijan-paul', 'committer_name': 'injuly', 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 10, 12, 2, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e99c0dd6018d5f2125510f0a6837ce560dcec7ff', 'committer_username': 'srijan-paul', 'committer_name': 'injuly', 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 10, 12, 2, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '07350ca4bea53f4191d735905041b088fd03c72d', 'committer_username': 'srijan-paul', 'committer_name': 'injuly', 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 10, 12, 2, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '81a5676f771773b53a85ecd9c2ed8d8ff29e41cb', 'committer_username': 'srijan-paul', 'committer_name': 'injuly', 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 10, 12, 2, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '88b1f02c6d4aff3e2fca96c0564db546532df0ec', 'committer_username': 'srijan-paul', 'committer_name': 'injuly', 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 10, 12, 2, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '51123e9428e8ac3ae411df1c66ba767d5f2cee7b', 'committer_username': 'srijan-paul', 'committer_name': 'injuly', 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 10, 12, 2, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1827abbb7ed325f9febd5cf41b06be4011cfc663', 'committer_username': 'srijan-paul', 'committer_name': 'injuly', 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 10, 12, 2, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '619c89d6446f5180d40416b720f6a43b6d782686', 'committer_username': 'srijan-paul', 'committer_name': 'injuly', 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 10, 12, 2, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '93d2669b4413520b872092e95af29c9e49bc95c5', 'committer_username': 'srijan-paul', 'committer_name': 'injuly', 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 10, 12, 2, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9367f29a9ed9692ce43542c012d1cd955c329478', 'committer_username': 'srijan-paul', 'committer_name': 'injuly', 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 10, 12, 2, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f7f553fdbcb35b77824681c751f3a31613834d05', 'committer_username': 'srijan-paul', 'committer_name': 'injuly', 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 10, 12, 2, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e99a95bb37b3e33ce0c4771165422f6e8d193add', 'committer_username': 'srijan-paul', 'committer_name': 'injuly', 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 10, 12, 2, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ceb53094b2192e162ec50afea8e638646eeb9018', 'committer_username': 'srijan-paul', 'committer_name': 'injuly', 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 10, 12, 2, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9189ba0b4a26c1477d322a8a5bf428e6190f3d7f', 'committer_username': 'srijan-paul', 'committer_name': 'injuly', 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 10, 12, 2, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '170094ac45d0c339577cb3fa8385b131c61cb39d', 'committer_username': 'srijan-paul', 'committer_name': 'injuly', 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 10, 12, 2, 38, tzinfo=datetime.timezone.utc)}]",injuly,50487716,,User,,78,,37,125
514806997,Implement for-in loops and ipairs,"This is  PR is supposed to address issue #164.
The following changes have been made:

1. The ast now has separate `ast.Stat.ForNum` nodes for numeric for loops and `ast.Stat.ForIn` nodes for `for..in..` loops. Tests added to reflect the same.
2. The type checker is able to type check `ForIn` ast nodes.Test cases in `spec/checker_spec.lua` for the same as well.

(This PR is a re-open of #332)

",True,334,https://api.github.com/repos/pallene-lang/pallene/pulls/334,https://github.com/pallene-lang/pallene/pull/334,closed,452,18,10,9,50,17,0,0,[],2020-11-03 15:19:34+00:00,2020-12-16 19:29:45+00:00,3730211.0,"43 days, 4:10:11","[{'comment_id': 524568792, 'comment_body': 'What do you think about putting the pseudocode in a single comment block, instead of splitting one line at a time? Then the one liners comments can refer to the big comment:\r\n\r\n```\r\n--local iter, st, ctrl = ...rhs\r\n--while true do\r\n--   ... and so on ...\r\n--end\r\n\r\n-- Initialize iter, st, and ctrl\r\n-- Body of the loop\r\n-- Loop step\r\n```', 'comment_created': datetime.datetime(2020, 11, 16, 20, 56, 14, tzinfo=datetime.timezone.utc), 'commenter': 'hugomg', 'type': 'User'}, {'comment_id': 524571818, 'comment_body': 'Since this temporary variable is only used in one place, I think it would be OK to not give it a name. You can do that by passing `false` instead of `$cond`.', 'comment_created': datetime.datetime(2020, 11, 16, 20, 59, tzinfo=datetime.timezone.utc), 'commenter': 'hugomg', 'type': 'User'}, {'comment_id': 524574976, 'comment_body': 'I think we can use `ir.Cmd.If(stat.loc, ir.Value.LocalVar(v_cond), ir.Cmd.Break(), ir.Cmd.Nop())`, without those Seqs.', 'comment_created': datetime.datetime(2020, 11, 16, 21, 1, 51, tzinfo=datetime.timezone.utc), 'commenter': 'hugomg', 'type': 'User'}, {'comment_id': 524580912, 'comment_body': ""This code is assuming that `exps[1]` is an `ast.Exp.Var`, which isn't always true! That will work for something like `for x in a, b, c` but won't work for something like `for i, x in ipairs()`.\r\n\r\nFurthermore, we should be using CallDyn here instead of CallStatic, because the iterator function isn't necessarily known at compile time."", 'comment_created': datetime.datetime(2020, 11, 16, 21, 7, 17, tzinfo=datetime.timezone.utc), 'commenter': 'hugomg', 'type': 'User'}, {'comment_id': 524586688, 'comment_body': 'Currently these tests cases are testing if the code is compiling successfully but are not testing that they produce the expected result when you run the code. We need to add an `it` block to do that.\r\n\r\nFurthermore, I think it would be nice if we had a more intuitive example. One possibility would be to create a custom iterator function called `rev_ipairs` that works similarly to ipairs, except that it iterates in decreasing order instead of increasing order.\r\n\r\nBTW, while I like the idea of testing loops of the form `for i, x in a, b, c`, I think we should also test the more common pattern where the RHS is a function call like `for i, x in rev_ipairs(xs)`.', 'comment_created': datetime.datetime(2020, 11, 16, 21, 12, 27, tzinfo=datetime.timezone.utc), 'commenter': 'hugomg', 'type': 'User'}, {'comment_id': 524587909, 'comment_body': ""To speed up the test suite, we put related code in the same `compile` block. I'd put the test case for nested for-in loops in the same compile block as the other non-nested loop."", 'comment_created': datetime.datetime(2020, 11, 16, 21, 13, 46, tzinfo=datetime.timezone.utc), 'commenter': 'hugomg', 'type': 'User'}, {'comment_id': 528330497, 'comment_body': 'This is a list of ids, not a list of decls. We might want to change the name to  reflect that.', 'comment_created': datetime.datetime(2020, 11, 22, 12, 45, 8, tzinfo=datetime.timezone.utc), 'commenter': 'hugomg', 'type': 'User'}, {'comment_id': 528330691, 'comment_body': 'The name `xs` made me think that this could be talking about the LHS. What about `args` instead?', 'comment_created': datetime.datetime(2020, 11, 22, 12, 46, 28, tzinfo=datetime.timezone.utc), 'commenter': 'hugomg', 'type': 'User'}, {'comment_id': 528330946, 'comment_body': 'This `then_` is unused.', 'comment_created': datetime.datetime(2020, 11, 22, 12, 48, 36, tzinfo=datetime.timezone.utc), 'commenter': 'hugomg', 'type': 'User'}, {'comment_id': 528334592, 'comment_body': ""I think we can improve this a bit by taking more advantage of implicit casting and by renaming the function to make it clear that it is reimplementing ipairs. But still, thanks a lot for the example you gave. It's easier to suggest an improvement than to come up with it from scratch ;)\r\n\r\n```\r\nlocal function iter(arr: {any}, prev: integer): (any, any)\r\n    local i = prev + 1\r\n    local x = arr[i]\r\n    if x == (nil as any) then\r\n        return nil, nil\r\n    else\r\n        return i, x\r\n    end\r\nend\r\n\r\ntypealias iterfn = (any, any) -> (any, any)\r\nexport function my_ipairs(xs: {any}): (iterfn, any, any)\r\n    return iter, xs, 0\r\nend\r\n``` "", 'comment_created': datetime.datetime(2020, 11, 22, 13, 18, 58, tzinfo=datetime.timezone.utc), 'commenter': 'hugomg', 'type': 'User'}, {'comment_id': 528335027, 'comment_body': ""Although we only have one `compile` block for everything, we prefer having a separate  `it` block for each test case. That way, if a test case fails it is easier to know which one it was.\r\n\r\nWhat is the difference between the test for `double` and the test for `abs_list`? If there is an important difference, that should be reflected in the name of the test that we pass to the `it` function. If there isn't an important difference, then I think we can get rid of the `abs_list` test and just keep the `double` one."", 'comment_created': datetime.datetime(2020, 11, 22, 13, 22, 41, tzinfo=datetime.timezone.utc), 'commenter': 'hugomg', 'type': 'User'}, {'comment_id': 528335080, 'comment_body': 'Can we use `out[i] = ` here?', 'comment_created': datetime.datetime(2020, 11, 22, 13, 23, 14, tzinfo=datetime.timezone.utc), 'commenter': 'hugomg', 'type': 'User'}, {'comment_id': 528335486, 'comment_body': ""This test case is missing an `it` block.  My suggestion would be to rewrite this test case to use that xpairs/my_ipairs function from before, because it's easier to think of an example if we use that. We can put it next to the other `my_ipairs` test cases."", 'comment_created': datetime.datetime(2020, 11, 22, 13, 26, 33, tzinfo=datetime.timezone.utc), 'commenter': 'hugomg', 'type': 'User'}, {'comment_id': 528336925, 'comment_body': 'Currently we are testing the non-function-call RHS at the same time as we test nested for-in loops. IMO, it would be better to have that as a separate test case that tests just the non-function-call case.\r\n\r\n```\r\nexport function double_with_weird_rhs(xs: {any}): {integer}\r\n    local out: {integer} = {}\r\n    for i, x in iter as iterfn, xs as any, 0 as any do\r\n        out[i] = x as integer * 2\r\n    end\r\n    return out\r\nend\r\n```', 'comment_created': datetime.datetime(2020, 11, 22, 13, 38, 5, tzinfo=datetime.timezone.utc), 'commenter': 'hugomg', 'type': 'User'}, {'comment_id': 540346807, 'comment_body': 'We could say `a: T1` instead of `a: T`.', 'comment_created': datetime.datetime(2020, 12, 10, 17, 12, 3, tzinfo=datetime.timezone.utc), 'commenter': 'hugomg', 'type': 'User'}, {'comment_id': 540365726, 'comment_body': 'A question: Would it be a good idea to unify the `a_any` and `ctrl` variables, to create one less variable?\r\n\r\n```\r\nlocal iter, st, a_any, b_any\r\niter, st, a_any = RHS[1], RHS[2], RHS[3]\r\nwhile true do\r\n    a_any, b_any = iter(st, a_any)\r\n    if a_any = nil then break end\r\n    local a = a_any as T1\r\n    local b = b_any as T2\r\n    <loop body>\r\nend\r\n```', 'comment_created': datetime.datetime(2020, 12, 10, 17, 38, 21, tzinfo=datetime.timezone.utc), 'commenter': 'hugomg', 'type': 'User'}, {'comment_id': 542506266, 'comment_body': ""Not sure, My personal POV is that these are stack locals anyway so it's not like there is a performance issue. And not using the same symbol would make it much easier to spot the 1:1 correspondence between variables inserted by the compiler and those written by the user. That said, I think it's best we go with your gut. What do you say? "", 'comment_created': datetime.datetime(2020, 12, 14, 16, 8, 17, tzinfo=datetime.timezone.utc), 'commenter': 'srijan-paul', 'type': 'User'}]","[{'commit_sha': '0ecc360071437f310ec99e2bfd8cf70dcdbefac1', 'committer_username': 'hugomg', 'committer_name': 'Hugo Musso Gualandi', 'committer_email': 'hugo_musso_gualandi@hotmail.com', 'commit_date': datetime.datetime(2012, 2, 19, 22, 35, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cff49493aee75fea95f6ec3932bc0fc4d7e3b04e', 'committer_username': 'srijan-paul', 'committer_name': 'injuly', 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 10, 12, 2, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '250baf0145d8bdacbf0f02f1620f46a841bcea3e', 'committer_username': 'srijan-paul', 'committer_name': 'injuly', 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 10, 12, 2, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1debe6aa88aa31164b09762ab3fee41c15fdb5ba', 'committer_username': 'srijan-paul', 'committer_name': 'injuly', 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 10, 12, 2, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8ec6a57a7bfa7ffb802c5c5d7bcb5618a6900892', 'committer_username': 'srijan-paul', 'committer_name': 'injuly', 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 10, 12, 2, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '13d3bb9669cdd5dcb2e5d280630291ad80f31309', 'committer_username': 'srijan-paul', 'committer_name': 'injuly', 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 10, 12, 2, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0244ca2ec8a5e3a63acc349f6cf87932d092be9c', 'committer_username': 'srijan-paul', 'committer_name': 'injuly', 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 10, 12, 2, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '05830f0369e282a1855984f2fe0217043f8546b6', 'committer_username': 'srijan-paul', 'committer_name': 'injuly', 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 10, 12, 2, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '644683229cb7951accf7d5af7de40805b2e94f5b', 'committer_username': 'srijan-paul', 'committer_name': 'injuly', 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 10, 12, 2, 38, tzinfo=datetime.timezone.utc)}]",injuly,50487716,,User,,78,,37,125

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
135494297,pallene,pallene-lang/pallene,Lua,29,665,24,25,2394,61,12,6,"[{'id': 743329815, 'number': 486, 'closed': datetime.datetime(2021, 9, 27, 20, 55, 20, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 9, 27, 10, 45, 25, tzinfo=datetime.timezone.utc), 'time_taken': 36595.0, 'time_delta': '10:09:55', 'additions': 34, 'deletions': 6, 'state': 'closed'}, {'id': 721903184, 'number': 478, 'closed': datetime.datetime(2021, 9, 10, 4, 35, 17, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 29, 7, 34, 22, tzinfo=datetime.timezone.utc), 'time_taken': 1026055.0, 'time_delta': '11 days, 21:00:55', 'additions': 181, 'deletions': 90, 'state': 'closed'}, {'id': 717914543, 'number': 473, 'closed': datetime.datetime(2021, 8, 24, 16, 51, 20, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 23, 14, 58, 41, tzinfo=datetime.timezone.utc), 'time_taken': 93159.0, 'time_delta': '1 day, 1:52:39', 'additions': 60, 'deletions': 30, 'state': 'closed'}, {'id': 714906771, 'number': 467, 'closed': datetime.datetime(2021, 8, 18, 16, 11, 28, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 18, 9, 30, 32, tzinfo=datetime.timezone.utc), 'time_taken': 24056.0, 'time_delta': '6:40:56', 'additions': 73, 'deletions': 38, 'state': 'closed'}, {'id': 713615431, 'number': 462, 'closed': datetime.datetime(2021, 8, 17, 15, 45, 50, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 16, 17, 23, 49, tzinfo=datetime.timezone.utc), 'time_taken': 80521.0, 'time_delta': '22:22:01', 'additions': 165, 'deletions': 257, 'state': 'closed'}, {'id': 712238492, 'number': 457, 'closed': datetime.datetime(2021, 8, 13, 20, 44, 21, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 13, 10, 12, 23, tzinfo=datetime.timezone.utc), 'time_taken': 37918.0, 'time_delta': '10:31:58', 'additions': 149, 'deletions': 147, 'state': 'closed'}, {'id': 710616008, 'number': 456, 'closed': datetime.datetime(2021, 8, 14, 7, 2, 17, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 12, 10, 7, 41, tzinfo=datetime.timezone.utc), 'time_taken': 161676.0, 'time_delta': '1 day, 20:54:36', 'additions': 47, 'deletions': 35, 'state': 'closed'}, {'id': 707428069, 'number': 452, 'closed': datetime.datetime(2021, 8, 10, 16, 40, 57, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 10, 14, 53, 55, tzinfo=datetime.timezone.utc), 'time_taken': 6422.0, 'time_delta': '1:47:02', 'additions': 19, 'deletions': 16, 'state': 'closed'}, {'id': 705898874, 'number': 450, 'closed': datetime.datetime(2021, 8, 10, 14, 55, 29, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 7, 14, 24, 26, tzinfo=datetime.timezone.utc), 'time_taken': 261063.0, 'time_delta': '3 days, 0:31:03', 'additions': 59, 'deletions': 21, 'state': 'closed'}, {'id': 701149660, 'number': 445, 'closed': datetime.datetime(2021, 8, 2, 17, 26, 45, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 2, 6, 3, 39, tzinfo=datetime.timezone.utc), 'time_taken': 40986.0, 'time_delta': '11:23:06', 'additions': 93, 'deletions': 8, 'state': 'closed'}, {'id': 700192929, 'number': 440, 'closed': datetime.datetime(2021, 8, 1, 14, 34, 27, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 30, 10, 41, 54, tzinfo=datetime.timezone.utc), 'time_taken': 186753.0, 'time_delta': '2 days, 3:52:33', 'additions': 26, 'deletions': 35, 'state': 'closed'}, {'id': 697597964, 'number': 438, 'closed': datetime.datetime(2021, 7, 29, 15, 53, 51, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 27, 7, 12, 49, tzinfo=datetime.timezone.utc), 'time_taken': 204062.0, 'time_delta': '2 days, 8:41:02', 'additions': 16, 'deletions': 18, 'state': 'closed'}, {'id': 697142810, 'number': 435, 'closed': datetime.datetime(2021, 7, 26, 18, 32, 19, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 26, 15, 42, 33, tzinfo=datetime.timezone.utc), 'time_taken': 10186.0, 'time_delta': '2:49:46', 'additions': 0, 'deletions': 0, 'state': 'closed'}, {'id': 694939486, 'number': 423, 'closed': datetime.datetime(2021, 7, 22, 17, 6, 12, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 22, 7, 37, 12, tzinfo=datetime.timezone.utc), 'time_taken': 34140.0, 'time_delta': '9:29:00', 'additions': 37, 'deletions': 0, 'state': 'closed'}, {'id': 683431751, 'number': 405, 'closed': datetime.datetime(2021, 7, 19, 15, 58, 43, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 5, 7, 17, 4, tzinfo=datetime.timezone.utc), 'time_taken': 1240899.0, 'time_delta': '14 days, 8:41:39', 'additions': 50, 'deletions': 28, 'state': 'closed'}, {'id': 682973385, 'number': 404, 'closed': datetime.datetime(2021, 7, 3, 14, 56, 42, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 3, 5, 56, 15, tzinfo=datetime.timezone.utc), 'time_taken': 32427.0, 'time_delta': '9:00:27', 'additions': 76, 'deletions': 21, 'state': 'closed'}, {'id': 678882723, 'number': 402, 'closed': datetime.datetime(2021, 6, 29, 15, 54, 10, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 28, 9, 40, 29, tzinfo=datetime.timezone.utc), 'time_taken': 108821.0, 'time_delta': '1 day, 6:13:41', 'additions': 115, 'deletions': 15, 'state': 'closed'}, {'id': 675173706, 'number': 399, 'closed': datetime.datetime(2021, 6, 25, 15, 1, 29, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 22, 7, 59, 42, tzinfo=datetime.timezone.utc), 'time_taken': 284507.0, 'time_delta': '3 days, 7:01:47', 'additions': 401, 'deletions': 5, 'state': 'closed'}, {'id': 664915384, 'number': 389, 'closed': datetime.datetime(2021, 6, 14, 16, 18, 36, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 8, 13, 24, 54, tzinfo=datetime.timezone.utc), 'time_taken': 528822.0, 'time_delta': '6 days, 2:53:42', 'additions': 329, 'deletions': 44, 'state': 'closed'}, {'id': 661758009, 'number': 386, 'closed': datetime.datetime(2021, 6, 5, 22, 44, 2, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 4, 13, 12, 51, tzinfo=datetime.timezone.utc), 'time_taken': 120671.0, 'time_delta': '1 day, 9:31:11', 'additions': 104, 'deletions': 25, 'state': 'closed'}, {'id': 651410653, 'number': 373, 'closed': datetime.datetime(2021, 5, 27, 14, 45, 2, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 5, 24, 15, 14, 48, tzinfo=datetime.timezone.utc), 'time_taken': 257414.0, 'time_delta': '2 days, 23:30:14', 'additions': 71, 'deletions': 12, 'state': 'closed'}, {'id': 624507190, 'number': 364, 'closed': datetime.datetime(2021, 4, 28, 3, 56, 41, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 4, 27, 17, 40, 40, tzinfo=datetime.timezone.utc), 'time_taken': 36961.0, 'time_delta': '10:16:01', 'additions': 28, 'deletions': 10, 'state': 'closed'}, {'id': 575755639, 'number': 351, 'closed': datetime.datetime(2021, 2, 18, 20, 20, 49, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 2, 18, 15, 10, 37, tzinfo=datetime.timezone.utc), 'time_taken': 18612.0, 'time_delta': '5:10:12', 'additions': 38, 'deletions': 8, 'state': 'closed'}, {'id': 552294431, 'number': 346, 'closed': datetime.datetime(2021, 1, 21, 20, 18, 22, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 1, 10, 14, 45, 7, tzinfo=datetime.timezone.utc), 'time_taken': 970395.0, 'time_delta': '11 days, 5:33:15', 'additions': 221, 'deletions': 53, 'state': 'closed'}, {'id': 514806997, 'number': 334, 'closed': datetime.datetime(2020, 12, 16, 19, 29, 45, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 11, 3, 15, 19, 34, tzinfo=datetime.timezone.utc), 'time_taken': 3730211.0, 'time_delta': '43 days, 4:10:11', 'additions': 452, 'deletions': 18, 'state': 'closed'}, {'id': 509783892, 'number': 332, 'closed': datetime.datetime(2020, 11, 3, 14, 50, 10, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 10, 26, 6, 3, 18, tzinfo=datetime.timezone.utc), 'time_taken': 722812.0, 'time_delta': '8 days, 8:46:52', 'additions': 0, 'deletions': 0, 'state': 'closed'}, {'id': 487900589, 'number': 329, 'closed': datetime.datetime(2020, 9, 18, 17, 33, 53, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 9, 16, 10, 48, 59, tzinfo=datetime.timezone.utc), 'time_taken': 197094.0, 'time_delta': '2 days, 6:44:54', 'additions': 119, 'deletions': 46, 'state': 'closed'}]"
