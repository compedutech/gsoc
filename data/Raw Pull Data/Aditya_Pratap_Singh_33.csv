pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
959445992,Multiple IOC,"# Description

Added support for multiple IOC analysis

## Related issues
#732 

## Type of change

Please delete options that are not relevant.

- [ ] Bug fix (non-breaking change which fixes an issue).
- [X] New feature (non-breaking change which adds functionality).
- [X] Breaking change (fix or feature that would cause existing functionality to not work as expected).

# Checklist

- [x] I have read and understood the rules about [how to Contribute](https://intelowl.readthedocs.io/en/latest/Contribute.html) to this project
- [ ] The pull request is for the branch `develop`
- [ ] A new analyzer or connector was added, in which case:
    - [ ] [Usage](https://github.com/intelowlproject/IntelOwl/blob/master/docs/source/Usage.md) file was updated.
    - [ ] [Advanced-Usage](./Advanced-Usage.md) was updated (in case the analyzer/connector provides additional optional configuration).
    - [ ] Secrets were added in [env_file_app_template](https://github.com/intelowlproject/IntelOwl/blob/master/docker/env_file_app_template), [env_file_app_ci](https://github.com/certego/IntelOwl/blob/master/docker/env_file_app_ci) and in the [Installation](./Installation.md) docs, if necessary.
    - [ ] If the analyzer/connector requires mocked testing, `_monkeypatch()` was used in its class to apply the necessary decorators.
    - [ ] If a File analyzer was added, its name was explicitly defined in [test_file_scripts.py](https://github.com/intelowlproject/IntelOwl/blob/master/tests/analyzers_manager/test_file_scripts.py) (not required for Observable Analyzers).
- [ ] If external libraries/packages with restrictive licenses were used, they were added in the [Legal Notice](https://github.com/certego/IntelOwl/blob/master/.github/legal_notice.md) section.
- [ ] The tests gave 0 errors.
- [x] Linters (`Black`, `Flake`, `Isort`) gave 0 errors. If you have correctly installed [pre-commit](https://intelowl.readthedocs.io/en/latest/Contribute.html#how-to-start-setup-project-and-development-instance), it does these checks and adjustments on your behalf.
- [ ] The commits were squashed into a single one (optional, they will be squashed anyway by the maintainer)
  ",True,1032,https://api.github.com/repos/intelowlproject/IntelOwl/pulls/1032,https://github.com/intelowlproject/IntelOwl/pull/1032,closed,2148,476,13,34,24,71,0,0,[],2022-06-06 18:51:08+00:00,2022-06-14 08:55:35+00:00,655467.0,"7 days, 14:04:27","[{'comment_id': 892485319, 'comment_body': 'Why are you appending an error if the validation is correct?', 'comment_created': datetime.datetime(2022, 6, 8, 14, 50, 21, tzinfo=datetime.timezone.utc), 'commenter': '0ssigeno', 'type': 'User'}, {'comment_id': 892490889, 'comment_body': 'Why call this here instead of the parent class?', 'comment_created': datetime.datetime(2022, 6, 8, 14, 54, 44, tzinfo=datetime.timezone.utc), 'commenter': '0ssigeno', 'type': 'User'}, {'comment_id': 892490890, 'comment_body': 'Why call this here instead of the parent class?', 'comment_created': datetime.datetime(2022, 6, 8, 14, 54, 44, tzinfo=datetime.timezone.utc), 'commenter': '0ssigeno', 'type': 'User'}, {'comment_id': 892491138, 'comment_body': 'Why call this here instead of the parent class?', 'comment_created': datetime.datetime(2022, 6, 8, 14, 54, 56, tzinfo=datetime.timezone.utc), 'commenter': '0ssigeno', 'type': 'User'}, {'comment_id': 892512326, 'comment_body': 'Since you have decided to move this stuff, i would love that we remove the fact that we modify the parameters of the function, inside the function itself.\r\nWhat i mean is pretty much change the signature to \r\n```python3\r\ndef filter_analyzers(serialized_data: Dict) -> Tuple[List[str], List[str]]:\r\n```\r\nAnd concatenate the `warnings` in the caller\r\n', 'comment_created': datetime.datetime(2022, 6, 8, 15, 12, 15, tzinfo=datetime.timezone.utc), 'commenter': '0ssigeno', 'type': 'User'}, {'comment_id': 892512532, 'comment_body': 'Since you have decided to move this stuff, i would love that we remove the fact that we modify the parameters of the function, inside the function itself.\r\nWhat i mean is pretty much change the signature to \r\n```python3\r\ndef filter_connectors(serialized_data: Dict) -> Tuple[List[str], List[str]]:\r\n```\r\nAnd concatenate the `warnings` in the caller\r\n', 'comment_created': datetime.datetime(2022, 6, 8, 15, 12, 24, tzinfo=datetime.timezone.utc), 'commenter': '0ssigeno', 'type': 'User'}, {'comment_id': 892513528, 'comment_body': ""Can't we raise the error in `filter_analyzers` directly?"", 'comment_created': datetime.datetime(2022, 6, 8, 15, 13, 14, tzinfo=datetime.timezone.utc), 'commenter': '0ssigeno', 'type': 'User'}, {'comment_id': 892516324, 'comment_body': 'Do not use `print` to debug', 'comment_created': datetime.datetime(2022, 6, 8, 15, 15, 5, tzinfo=datetime.timezone.utc), 'commenter': '0ssigeno', 'type': 'User'}, {'comment_id': 892524948, 'comment_body': ""I have to admit that I do not like to have 2 endpoints that share 95% of their code. The only difference that this endpoint has with `_analysis_request` is the `many=True` and the iteration on the `jobs`.\r\nI think i would prefer a single method that manages both cases and, if necessary (meaning that you can't discern if you have `many=True` or not just by checking `request.data`) another argument of the function that is used to distinguish between the two cases "", 'comment_created': datetime.datetime(2022, 6, 8, 15, 22, 1, tzinfo=datetime.timezone.utc), 'commenter': '0ssigeno', 'type': 'User'}, {'comment_id': 892530172, 'comment_body': 'This endpoints now expect a `list of jobs`. I can see stuff breaking with this change (pyintelowl).\r\nAgain, i would prefer that we check the input type and manage it internally the function, without  having breaking changes in the project.', 'comment_created': datetime.datetime(2022, 6, 8, 15, 26, 34, tzinfo=datetime.timezone.utc), 'commenter': '0ssigeno', 'type': 'User'}, {'comment_id': 892558335, 'comment_body': '\r\n\r\nThat\'s what I had initially planned. However, that can\'t be done as for filter_analyzers_and_connectors depends on attrs[""file_mimetype""], which is not set until FileAnalysisSerializer.validate runs.\r\n', 'comment_created': datetime.datetime(2022, 6, 8, 15, 51, 1, tzinfo=datetime.timezone.utc), 'commenter': 'devmrfitz', 'type': 'User'}, {'comment_id': 892558472, 'comment_body': '\r\n\r\nThat\'s what I had initially planned. However, that can\'t be done as for filter_analyzers_and_connectors depends on attrs[""file_mimetype""], which is not set until FileAnalysisSerializer.validate runs.\r\n', 'comment_created': datetime.datetime(2022, 6, 8, 15, 51, 9, tzinfo=datetime.timezone.utc), 'commenter': 'devmrfitz', 'type': 'User'}, {'comment_id': 892558782, 'comment_body': '\r\n\r\nThat\'s what I had initially planned. However, that can\'t be done as for filter_analyzers_and_connectors depends on attrs[""file_mimetype""], which is not set until FileAnalysisSerializer.validate runs.\r\n', 'comment_created': datetime.datetime(2022, 6, 8, 15, 51, 27, tzinfo=datetime.timezone.utc), 'commenter': 'devmrfitz', 'type': 'User'}, {'comment_id': 892560430, 'comment_body': 'One endpoint is left as it is for backward compatibility to be removed in the future version', 'comment_created': datetime.datetime(2022, 6, 8, 15, 52, 57, tzinfo=datetime.timezone.utc), 'commenter': 'devmrfitz', 'type': 'User'}, {'comment_id': 892564769, 'comment_body': 'This is carried from from its original source', 'comment_created': datetime.datetime(2022, 6, 8, 15, 56, 57, tzinfo=datetime.timezone.utc), 'commenter': 'devmrfitz', 'type': 'User'}, {'comment_id': 892567640, 'comment_body': 'There are 2 approaches that can be taken here:\r\n1) Return `warnings` from the filtering functions.\r\n2) Set `self.warnings` in the filtering functions after making them non-static.\r\nWhich one would you prefer?\r\n@0ssigeno @mlodic ', 'comment_created': datetime.datetime(2022, 6, 8, 15, 59, 39, tzinfo=datetime.timezone.utc), 'commenter': 'devmrfitz', 'type': 'User'}, {'comment_id': 893150648, 'comment_body': ""I'm ok with both approaches!\r\nProbably remove the @statichmethod is slightly better, but both works for me"", 'comment_created': datetime.datetime(2022, 6, 9, 7, 14, 57, tzinfo=datetime.timezone.utc), 'commenter': '0ssigeno', 'type': 'User'}, {'comment_id': 893153515, 'comment_body': 'For what reason we should remove the other endpoint? If we can avoid breaking changes at any time, is better.\r\nOther than that, I talked about `endpoint`, but what i mean here are the functions `_multi_observable_analysis_request` and `_analysis_request`.', 'comment_created': datetime.datetime(2022, 6, 9, 7, 18, 2, tzinfo=datetime.timezone.utc), 'commenter': '0ssigeno', 'type': 'User'}, {'comment_id': 893158037, 'comment_body': 'So wait, we now have the method `filter_analyzers_and_connectors` in the class `_AbstractJobCreateSerializer` that checks ""fields"" (i.e. serialized_data[""file_mimetype""]) that could not be set? You see that this logically makes no sense.\r\nMy approach is to actually remove that check in `filter_analyzers_and_connectors`, and in the class `FileAnalysisSerializer` override the method and _there_ add again this check', 'comment_created': datetime.datetime(2022, 6, 9, 7, 22, 57, tzinfo=datetime.timezone.utc), 'commenter': '0ssigeno', 'type': 'User'}, {'comment_id': 893260697, 'comment_body': '`logger.debug`', 'comment_created': datetime.datetime(2022, 6, 9, 9, 6, 44, tzinfo=datetime.timezone.utc), 'commenter': 'mlodic', 'type': 'User'}, {'comment_id': 893274484, 'comment_body': 'I agree with Simone. With a little more effort and following the implementation he suggested, we could have a more serious result.', 'comment_created': datetime.datetime(2022, 6, 9, 9, 20, 28, tzinfo=datetime.timezone.utc), 'commenter': 'mlodic', 'type': 'User'}, {'comment_id': 893344851, 'comment_body': 'this is not empty. This causes the next else if to be always True', 'comment_created': datetime.datetime(2022, 6, 9, 10, 36, 8, tzinfo=datetime.timezone.utc), 'commenter': 'mlodic', 'type': 'User'}, {'comment_id': 893351658, 'comment_body': 'if the request would be a single request, the behaviour should be the same as before. This is correct only if there are multiple observables', 'comment_created': datetime.datetime(2022, 6, 9, 10, 44, 31, tzinfo=datetime.timezone.utc), 'commenter': 'mlodic', 'type': 'User'}, {'comment_id': 893363437, 'comment_body': ""I think a comment helps to make this code easier to understand: you create an error list and then check with `some()` if at least an error exist, this is fine but at first sight it's not so clear"", 'comment_created': datetime.datetime(2022, 6, 9, 10, 58, 49, tzinfo=datetime.timezone.utc), 'commenter': 'drosetti', 'type': 'User'}, {'comment_id': 893712318, 'comment_body': 'Done. Does it look good?', 'comment_created': datetime.datetime(2022, 6, 9, 16, 17, 25, tzinfo=datetime.timezone.utc), 'commenter': 'devmrfitz', 'type': 'User'}, {'comment_id': 893713379, 'comment_body': 'Assuming you were referring to error detection, does it work better now?', 'comment_created': datetime.datetime(2022, 6, 9, 16, 18, 30, tzinfo=datetime.timezone.utc), 'commenter': 'devmrfitz', 'type': 'User'}, {'comment_id': 894488819, 'comment_body': ""Is the intended result having a single endpoint handle both cases? In that case, one endpoint would have two very different possible response structures. This seems to violate the REST API conventions as all documentation tools expect endpoints' responses to have a fixed structure"", 'comment_created': datetime.datetime(2022, 6, 10, 12, 52, 16, tzinfo=datetime.timezone.utc), 'commenter': 'devmrfitz', 'type': 'User'}, {'comment_id': 894495189, 'comment_body': ""If I override `filter_analyzers_and_connectors` in `FileAnalysisSerializer` and add the check there, won't I still have to keep the 2 calls to `self.filter_analyzers_and_connectors(attrs)` in child classes instead of parent class?"", 'comment_created': datetime.datetime(2022, 6, 10, 12, 59, 32, tzinfo=datetime.timezone.utc), 'commenter': 'devmrfitz', 'type': 'User'}, {'comment_id': 894501584, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 6, 10, 13, 5, 52, tzinfo=datetime.timezone.utc), 'commenter': 'devmrfitz', 'type': 'User'}, {'comment_id': 894501788, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 6, 10, 13, 6, tzinfo=datetime.timezone.utc), 'commenter': 'devmrfitz', 'type': 'User'}, {'comment_id': 894513916, 'comment_body': '```python3\r\ndef _observable_analysis_request(request,\r\n    serializer_class: ObservableAnalysisSerializer,\r\n    many:bool=True\r\n    # do stuff\r\n    return something\r\n    \r\n@add_docs(\r\n    description=""This endpoint allows to start a Job related to an observable. ""\r\n    ""Retained for compatibility"",\r\n    request=ObservableAnalysisSerializer,\r\n    responses={200: AnalysisResponseSerializer},\r\n)\r\n@api_view([""POST""])\r\ndef analyze_observable(request):\r\n    res =  _observable_analysis_request(request, ObservableAnalysisSerializer)\r\n    # do parse\r\n    return res\r\n\r\n\r\n@add_docs(\r\n    description=""This endpoint allows to start Jobs related to multiple observables"",\r\n    request=ObservableAnalysisSerializer,\r\n    responses={200: AnalysisResponseSerializer},\r\n)\r\n@api_view([""POST""])\r\ndef analyze_multiple_observables(request):\r\n    res =  _observable_analysis_request(request, ObservableAnalysisSerializer)    \r\n      # do parse\r\n    return res\r\n    \r\n ```\r\n This is the structure of what i expected\r\n \r\n ', 'comment_created': datetime.datetime(2022, 6, 10, 13, 18, 8, tzinfo=datetime.timezone.utc), 'commenter': '0ssigeno', 'type': 'User'}, {'comment_id': 894527181, 'comment_body': 'No, you could just have it  called in the parent class and in the `FileAnalysisSerializer` call `super().validate()` **AFTER** the set up of `attrs[""md5""]` ', 'comment_created': datetime.datetime(2022, 6, 10, 13, 30, 8, tzinfo=datetime.timezone.utc), 'commenter': '0ssigeno', 'type': 'User'}, {'comment_id': 894530698, 'comment_body': 'No, you would need to leverage inheritance properly. After having removed the code related to the ""file_mimetype"" in the `filter_analyzers` you can add it in the overwrite of the same method in the `FileAnalysisSerializer` class:\r\n```\r\ndef filter_analyzers(...):\r\n    super(FileAnalysisSerializer, ...\r\n    # check mimetype here\r\n```\r\nIn this way, first, you leverage the common code, then you perform the check related to files only. This approach could be applied also for observables (`serialized_data[""observable_classification""]`)', 'comment_created': datetime.datetime(2022, 6, 10, 13, 33, 37, tzinfo=datetime.timezone.utc), 'commenter': 'mlodic', 'type': 'User'}, {'comment_id': 894530809, 'comment_body': '```python3\r\nclass _AbstractJobCreateSerializer(rfs.ModelSerializer):\r\n    """"""\r\n    Base Serializer for ``Job`` model\'s ``create()``.\r\n    """"""\r\n\r\n    tags_labels = rfs.ListField(default=list)\r\n    runtime_configuration = rfs.JSONField(required=False, default={}, write_only=True)\r\n    analyzers_requested = rfs.ListField(default=list)\r\n    connectors_requested = rfs.ListField(default=list)\r\n    md5 = rfs.HiddenField(default=None)\r\n\r\n    def __init__(self, *args, **kwargs):\r\n        super().__init__(*args, **kwargs)\r\n        self.warnings = []\r\n\r\n    def validate(self, attrs: dict) -> dict:\r\n        # check and validate runtime_configuration\r\n        runtime_conf = attrs.get(""runtime_configuration"", {})\r\n        if runtime_conf and isinstance(runtime_conf, list):\r\n            runtime_conf = json.loads(runtime_conf[0])\r\n        attrs[""runtime_configuration""] = runtime_conf\r\n        -------------------- HERE ----------------------\r\n        self.filter_analyzers_and_connectors(attrs)\r\n        return attrs\r\n\r\n    @staticmethod\r\n    def filter_analyzers(serialized_data: Dict, warnings: List) -> List[str]:\r\n        # the same but removed the check on file\r\n\r\nclass FileAnalysisSerializer(_AbstractJobCreateSerializer):\r\n    @staticmethod\r\n    def filter_analyzers(serialized_data: Dict, warnings: List) -> List[str]:\r\n        # added the check on the file\r\n        \r\n    def validate(self, attrs: dict) -> dict:\r\n        logger.debug(f""before attrs: {attrs}"")\r\n        # calculate ``file_mimetype``\r\n        attrs[""file_mimetype""] = calculate_mimetype(attrs[""file""], attrs[""file_name""])\r\n        # calculate ``md5``\r\n        file_obj = attrs[""file""].file\r\n        file_obj.seek(0)\r\n        file_buffer = file_obj.read()\r\n        attrs[""md5""] = calculate_md5(file_buffer)\r\n        ---------------------------------- HERE --------------------------\r\n        attrs = super(FileAnalysisSerializer, self).validate(attrs)\r\n        logger.debug(f""after attrs: {attrs}"")\r\n        return attrs\r\n', 'comment_created': datetime.datetime(2022, 6, 10, 13, 33, 44, tzinfo=datetime.timezone.utc), 'commenter': '0ssigeno', 'type': 'User'}, {'comment_id': 894532134, 'comment_body': 'Done this already. Some minor confusions left. Will push soon', 'comment_created': datetime.datetime(2022, 6, 10, 13, 35, 6, tzinfo=datetime.timezone.utc), 'commenter': 'devmrfitz', 'type': 'User'}, {'comment_id': 894536196, 'comment_body': 'In `filter_analyzers`, there is a code snippet of this type:\r\n```\r\nif this_is_a_file:\r\n    # Perform some file type checks (including file_mimetype\r\nelse:\r\n    # Perform some observable type checks\r\n```\r\nThere are 2 approaches I can follow here.\r\n1) Leave this code block as it is.\r\n2) Remove both, override `filter_analyzers` in both child analyzers and add them there.\r\n\r\nBoth these approaches would work equally well. Which one would you prefer me to take?\r\n@mlodic @0ssigeno ', 'comment_created': datetime.datetime(2022, 6, 10, 13, 39, 21, tzinfo=datetime.timezone.utc), 'commenter': 'devmrfitz', 'type': 'User'}, {'comment_id': 894550568, 'comment_body': 'I can borrow code from my older PR for this', 'comment_created': datetime.datetime(2022, 6, 10, 13, 47, 56, tzinfo=datetime.timezone.utc), 'commenter': 'devmrfitz', 'type': 'User'}, {'comment_id': 894570265, 'comment_body': '@0ssigeno Pushed. Does it look good?', 'comment_created': datetime.datetime(2022, 6, 10, 14, 4, 21, tzinfo=datetime.timezone.utc), 'commenter': 'devmrfitz', 'type': 'User'}, {'comment_id': 894641723, 'comment_body': 'Imho the secoond approach is the good one', 'comment_created': datetime.datetime(2022, 6, 10, 15, 18, 33, tzinfo=datetime.timezone.utc), 'commenter': '0ssigeno', 'type': 'User'}, {'comment_id': 894643961, 'comment_body': 'I like it!', 'comment_created': datetime.datetime(2022, 6, 10, 15, 20, 19, tzinfo=datetime.timezone.utc), 'commenter': '0ssigeno', 'type': 'User'}, {'comment_id': 894755627, 'comment_body': '@0ssigeno @mlodic \r\nAlert: We can\'t normally use `self.warnings` here. This is because ListSerializer uses the same instance to serialize each of the entries. Hence, they all share a common `self.warnings`.\r\n\r\n```\r\n{\r\n    ""count"": 2,\r\n    ""results"": [\r\n        {\r\n            ""job_id"": 80,\r\n            ""status"": ""accepted"",\r\n            ""warnings"": [\r\n                ""Robtex_IP_Query won\'t be run because it does not support observable type domain.""\r\n            ],\r\n            ""analyzers_running"": [\r\n                ""Classic_DNS"",\r\n                ""Robtex_IP_Query""\r\n            ],\r\n            ""connectors_running"": []\r\n        },\r\n        {\r\n            ""job_id"": 81,\r\n            ""status"": ""accepted"",\r\n            ""warnings"": [\r\n                ""Robtex_IP_Query won\'t be run because it does not support observable type domain.""\r\n            ],\r\n            ""analyzers_running"": [\r\n                ""Classic_DNS""\r\n            ],\r\n            ""connectors_running"": []\r\n        }\r\n    ]\r\n}\r\n```', 'comment_created': datetime.datetime(2022, 6, 10, 17, 27, 23, tzinfo=datetime.timezone.utc), 'commenter': 'devmrfitz', 'type': 'User'}, {'comment_id': 894755886, 'comment_body': ""I'll fallback to method 1 for now"", 'comment_created': datetime.datetime(2022, 6, 10, 17, 27, 44, tzinfo=datetime.timezone.utc), 'commenter': 'devmrfitz', 'type': 'User'}, {'comment_id': 894771415, 'comment_body': 'Found a fix', 'comment_created': datetime.datetime(2022, 6, 10, 17, 49, 33, tzinfo=datetime.timezone.utc), 'commenter': 'devmrfitz', 'type': 'User'}, {'comment_id': 894772143, 'comment_body': 'Done. Does it look good?', 'comment_created': datetime.datetime(2022, 6, 10, 17, 50, 32, tzinfo=datetime.timezone.utc), 'commenter': 'devmrfitz', 'type': 'User'}, {'comment_id': 895387811, 'comment_body': ""This is the issue. `TemporaryFile` is not serializable, so the `.copy()` crashes.\r\nWe could just remove the `.copy()` from here, don't we? \r\n"", 'comment_created': datetime.datetime(2022, 6, 13, 7, 3, 41, tzinfo=datetime.timezone.utc), 'commenter': '0ssigeno', 'type': 'User'}, {'comment_id': 895400987, 'comment_body': ""> This is the issue. `TemporaryFile` is not serializable, so the `.copy()` crashes. We could just remove the `.copy()` from here, don't we?\r\n\r\nThe copy is necessary as we need to manipulate the dictionary. And that can't be done without `.copy()`.\r\n![image](https://user-images.githubusercontent.com/58381523/173300594-9b4c77ad-1dd7-4a80-863a-507fc3ea53f2.png)\r\n"", 'comment_created': datetime.datetime(2022, 6, 13, 7, 21, 43, tzinfo=datetime.timezone.utc), 'commenter': 'devmrfitz', 'type': 'User'}, {'comment_id': 895401625, 'comment_body': '\r\n\r\nIf that was the issue, the other file tests would also fail. However, they do succeed\r\n', 'comment_created': datetime.datetime(2022, 6, 13, 7, 22, 31, tzinfo=datetime.timezone.utc), 'commenter': 'devmrfitz', 'type': 'User'}, {'comment_id': 895405062, 'comment_body': 'https://code.djangoproject.com/ticket/29510', 'comment_created': datetime.datetime(2022, 6, 13, 7, 26, 53, tzinfo=datetime.timezone.utc), 'commenter': '0ssigeno', 'type': 'User'}, {'comment_id': 895405275, 'comment_body': 'Let me think about a solution that could with our case!', 'comment_created': datetime.datetime(2022, 6, 13, 7, 27, 8, tzinfo=datetime.timezone.utc), 'commenter': '0ssigeno', 'type': 'User'}, {'comment_id': 895411914, 'comment_body': '```python3\r\n@api_view([""POST""])\r\ndef analyze_file(request):\r\n\r\n    d: QueryDict = request.data\r\n    data : QueryDict = QueryDict()    \r\n    \r\n    for key, value in d.items():\r\n        if key == ""file"":\r\n            data[""files""]= [value]\r\n        elif ...:\r\n            ...\r\n         else:\r\n            data[key] = value\r\n    if not ""files"" in data:\r\n        raise ValidationError(...)\r\n    \r\n    response = _multi_analysis_request(request.user, data, FileAnalysisSerializer)[\r\n        ""results""\r\n    ][0]\r\n    return Response(\r\n        response,\r\n        status=status.HTTP_200_OK,\r\n    )\r\n```\r\nSomething like this?', 'comment_created': datetime.datetime(2022, 6, 13, 7, 35, 31, tzinfo=datetime.timezone.utc), 'commenter': '0ssigeno', 'type': 'User'}, {'comment_id': 895529950, 'comment_body': 'Same issue', 'comment_created': datetime.datetime(2022, 6, 13, 9, 45, 21, tzinfo=datetime.timezone.utc), 'commenter': '0ssigeno', 'type': 'User'}, {'comment_id': 895551675, 'comment_body': 'Fixed :+1: ', 'comment_created': datetime.datetime(2022, 6, 13, 10, 9, 59, tzinfo=datetime.timezone.utc), 'commenter': 'devmrfitz', 'type': 'User'}, {'comment_id': 895551897, 'comment_body': 'Does the fix look good?\r\n@0ssigeno ', 'comment_created': datetime.datetime(2022, 6, 13, 10, 10, 15, tzinfo=datetime.timezone.utc), 'commenter': 'devmrfitz', 'type': 'User'}, {'comment_id': 895603847, 'comment_body': '```suggestion\n                        "" filtered external analyzers.""\n```\n\nf-string is unnecessary here. This can just be a string. [More](https://codereview.doctor/advice/NoRedundantFString).', 'comment_created': datetime.datetime(2022, 6, 13, 11, 17, 59, tzinfo=datetime.timezone.utc), 'commenter': 'code-review-doctor[bot]', 'type': 'Bot'}, {'comment_id': 895603852, 'comment_body': '```suggestion\n                            ""it does not support observable.""\n```\n\nAs above, f-string is unnecessary here.', 'comment_created': datetime.datetime(2022, 6, 13, 11, 17, 59, tzinfo=datetime.timezone.utc), 'commenter': 'code-review-doctor[bot]', 'type': 'Bot'}, {'comment_id': 895603854, 'comment_body': '```suggestion\n                            ""it does not support observable type ""\n```\n\nSimilarly, f-string is unnecessary here.', 'comment_created': datetime.datetime(2022, 6, 13, 11, 17, 59, tzinfo=datetime.timezone.utc), 'commenter': 'code-review-doctor[bot]', 'type': 'Bot'}, {'comment_id': 895603859, 'comment_body': ""```suggestion\n        attrs = super().validate(attrs)\n```\n\nIt's unnecessary to use arguments when calling super for the parent class. [Explained here](https://codereview.doctor/advice/NoRedundantArgumentsSuper)."", 'comment_created': datetime.datetime(2022, 6, 13, 11, 17, 59, tzinfo=datetime.timezone.utc), 'commenter': 'code-review-doctor[bot]', 'type': 'Bot'}, {'comment_id': 895603866, 'comment_body': '```suggestion\n            ).filter_analyzers(serialized_data)\n```\n\nSimilarly, These super arguments are unnecessary.', 'comment_created': datetime.datetime(2022, 6, 13, 11, 17, 59, tzinfo=datetime.timezone.utc), 'commenter': 'code-review-doctor[bot]', 'type': 'Bot'}, {'comment_id': 895603871, 'comment_body': '```suggestion\n        attrs = super().validate(attrs)\n```\n\nLikewise, These super arguments are unnecessary.', 'comment_created': datetime.datetime(2022, 6, 13, 11, 18, tzinfo=datetime.timezone.utc), 'commenter': 'code-review-doctor[bot]', 'type': 'Bot'}, {'comment_id': 895603873, 'comment_body': '```suggestion\n            ).filter_analyzers(serialized_data)\n```\n\nAs above, These super arguments are unnecessary.', 'comment_created': datetime.datetime(2022, 6, 13, 11, 18, tzinfo=datetime.timezone.utc), 'commenter': 'code-review-doctor[bot]', 'type': 'Bot'}, {'comment_id': 895603877, 'comment_body': '```suggestion\n                            ""it does not support observable.""\n```\n\nSame as above: f-string is unnecessary here.', 'comment_created': datetime.datetime(2022, 6, 13, 11, 18, tzinfo=datetime.timezone.utc), 'commenter': 'code-review-doctor[bot]', 'type': 'Bot'}, {'comment_id': 895603880, 'comment_body': '```suggestion\n                            ""it does not support observable type ""\n```\n\nSimilarly, f-string is unnecessary here.', 'comment_created': datetime.datetime(2022, 6, 13, 11, 18, tzinfo=datetime.timezone.utc), 'commenter': 'code-review-doctor[bot]', 'type': 'Bot'}, {'comment_id': 895603886, 'comment_body': 'f-string is easier to read, write, and less computationally expensive than legacy string formatting. [More info](https://codereview.doctor/advice/UseFString).', 'comment_created': datetime.datetime(2022, 6, 13, 11, 18, tzinfo=datetime.timezone.utc), 'commenter': 'code-review-doctor[bot]', 'type': 'Bot'}, {'comment_id': 895904707, 'comment_body': 'typo', 'comment_created': datetime.datetime(2022, 6, 13, 16, 15, 39, tzinfo=datetime.timezone.utc), 'commenter': 'mlodic', 'type': 'User'}, {'comment_id': 895905293, 'comment_body': '""retro"" compatibility', 'comment_created': datetime.datetime(2022, 6, 13, 16, 16, 17, tzinfo=datetime.timezone.utc), 'commenter': 'mlodic', 'type': 'User'}, {'comment_id': 895906145, 'comment_body': 'thanks for adding the missing doc here', 'comment_created': datetime.datetime(2022, 6, 13, 16, 17, 9, tzinfo=datetime.timezone.utc), 'commenter': 'mlodic', 'type': 'User'}, {'comment_id': 896447004, 'comment_body': 'could not we remove this part here considering that this is already handled by the specific versions of `filter_analyzers` of observables/files? so we have not duplicated code', 'comment_created': datetime.datetime(2022, 6, 14, 7, 2, 25, tzinfo=datetime.timezone.utc), 'commenter': 'mlodic', 'type': 'User'}, {'comment_id': 896448861, 'comment_body': '""retrocompatibility""', 'comment_created': datetime.datetime(2022, 6, 14, 7, 4, 43, tzinfo=datetime.timezone.utc), 'commenter': 'mlodic', 'type': 'User'}, {'comment_id': 896451325, 'comment_body': 'thanks for adding additional tests. This is extremely useful', 'comment_created': datetime.datetime(2022, 6, 14, 7, 7, 49, tzinfo=datetime.timezone.utc), 'commenter': 'mlodic', 'type': 'User'}, {'comment_id': 896471947, 'comment_body': '`sudo docker exec -it intelowl_uwsgi python manage.py spectacular --file docs/source/schema.yml` is generating this version. Should I manually edit it?', 'comment_created': datetime.datetime(2022, 6, 14, 7, 30, 18, tzinfo=datetime.timezone.utc), 'commenter': 'devmrfitz', 'type': 'User'}, {'comment_id': 896475375, 'comment_body': 'ah I think ithat is cause there is the wrong version also somewhere else. I made a commit right now to fix that', 'comment_created': datetime.datetime(2022, 6, 14, 7, 34, 1, tzinfo=datetime.timezone.utc), 'commenter': 'mlodic', 'type': 'User'}]","[{'commit_sha': '61bf722c7c0483343751a50392eeba057e61b051', 'committer_username': 'devmrfitz', 'committer_name': 'Aditya Pratap Singh', 'committer_email': 'adityapratapsingh51@gmail.com', 'commit_date': datetime.datetime(2019, 12, 1, 5, 14, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f7bc508a34ac77376b26615ab3094782906cff2e', 'committer_username': 'devmrfitz', 'committer_name': 'Aditya Pratap Singh', 'committer_email': 'adityapratapsingh51@gmail.com', 'commit_date': datetime.datetime(2019, 12, 1, 5, 14, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a6eaf41aec79bff26d010c211897194faf14c3a6', 'committer_username': 'devmrfitz', 'committer_name': 'Aditya Pratap Singh', 'committer_email': 'adityapratapsingh51@gmail.com', 'commit_date': datetime.datetime(2019, 12, 1, 5, 14, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e5db4e21fa54e060f5272d98f164e8fe026716c0', 'committer_username': 'deepsource-autofix[bot]', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 11, 7, 23, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b390134b87d3d2e853e89482686cc5470f568bba', 'committer_username': 'devmrfitz', 'committer_name': 'Aditya Pratap Singh', 'committer_email': 'adityapratapsingh51@gmail.com', 'commit_date': datetime.datetime(2019, 12, 1, 5, 14, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6bf903befcc4623b5ad114b0115f5d371e318a5e', 'committer_username': 'devmrfitz', 'committer_name': 'Aditya Pratap Singh', 'committer_email': 'adityapratapsingh51@gmail.com', 'commit_date': datetime.datetime(2019, 12, 1, 5, 14, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '536540885a68af4d566485bb663044bf72e1b140', 'committer_username': 'devmrfitz', 'committer_name': 'Aditya Pratap Singh', 'committer_email': 'adityapratapsingh51@gmail.com', 'commit_date': datetime.datetime(2019, 12, 1, 5, 14, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2e7a82bf0f438d136c690513026cf526990bdb60', 'committer_username': 'devmrfitz', 'committer_name': 'Aditya Pratap Singh', 'committer_email': 'adityapratapsingh51@gmail.com', 'commit_date': datetime.datetime(2019, 12, 1, 5, 14, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b4f4908e98db0e7ffb2412ef907062795b0bc661', 'committer_username': 'devmrfitz', 'committer_name': 'Aditya Pratap Singh', 'committer_email': 'adityapratapsingh51@gmail.com', 'commit_date': datetime.datetime(2019, 12, 1, 5, 14, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '969a1d50aedee6afc5db24d09e4840b05d2bdcd6', 'committer_username': 'mlodic', 'committer_name': 'Matteo Lodi', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 1, 12, 6, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4d8c206a4f5fa880454cb58187dc9160eb10ae84', 'committer_username': 'mlodic', 'committer_name': 'Matteo Lodi', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 1, 12, 6, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5a766ded2bbfe8f2a7cf9734fbdbe2954405880a', 'committer_username': 'devmrfitz', 'committer_name': 'Aditya Pratap Singh', 'committer_email': 'adityapratapsingh51@gmail.com', 'commit_date': datetime.datetime(2019, 12, 1, 5, 14, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0da2f1ec383d60225ee979fbd758203714f25726', 'committer_username': 'devmrfitz', 'committer_name': 'Aditya Pratap Singh', 'committer_email': 'adityapratapsingh51@gmail.com', 'commit_date': datetime.datetime(2019, 12, 1, 5, 14, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aeed1d1a2344a9f8d3d8dfd474df3dd765024ca0', 'committer_username': 'devmrfitz', 'committer_name': 'Aditya Pratap Singh', 'committer_email': 'adityapratapsingh51@gmail.com', 'commit_date': datetime.datetime(2019, 12, 1, 5, 14, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'de2b2c6438b5d88022dee7bdfdd2b438f49ea52e', 'committer_username': 'devmrfitz', 'committer_name': 'Aditya Pratap Singh', 'committer_email': 'adityapratapsingh51@gmail.com', 'commit_date': datetime.datetime(2019, 12, 1, 5, 14, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a22c5a304503e3fb7b72d06037db586e7aa137d1', 'committer_username': 'devmrfitz', 'committer_name': 'Aditya Pratap Singh', 'committer_email': 'adityapratapsingh51@gmail.com', 'commit_date': datetime.datetime(2019, 12, 1, 5, 14, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b48754dc097a36db1ff6251945d216afb0bd64b9', 'committer_username': 'devmrfitz', 'committer_name': 'Aditya Pratap Singh', 'committer_email': 'adityapratapsingh51@gmail.com', 'commit_date': datetime.datetime(2019, 12, 1, 5, 14, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2494f11fa12bbb08c551a4a3a9e98c685f42af7d', 'committer_username': 'devmrfitz', 'committer_name': 'Aditya Pratap Singh', 'committer_email': 'adityapratapsingh51@gmail.com', 'commit_date': datetime.datetime(2019, 12, 1, 5, 14, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3d5b0adb66f82dd4048d6e4c268e780348876de6', 'committer_username': 'devmrfitz', 'committer_name': 'Aditya Pratap Singh', 'committer_email': 'adityapratapsingh51@gmail.com', 'commit_date': datetime.datetime(2019, 12, 1, 5, 14, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fb364b1c12c5962fd2325572cf1ec0d91e0fb94e', 'committer_username': 'devmrfitz', 'committer_name': 'Aditya Pratap Singh', 'committer_email': 'adityapratapsingh51@gmail.com', 'commit_date': datetime.datetime(2019, 12, 1, 5, 14, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f789cd8cf15630681328ca7c1c85da27ec038829', 'committer_username': 'devmrfitz', 'committer_name': 'Aditya Pratap Singh', 'committer_email': 'adityapratapsingh51@gmail.com', 'commit_date': datetime.datetime(2019, 12, 1, 5, 14, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2491bef22e7f58504f43c22bf6d0dc5b27462639', 'committer_username': 'devmrfitz', 'committer_name': 'Aditya Pratap Singh', 'committer_email': 'adityapratapsingh51@gmail.com', 'commit_date': datetime.datetime(2019, 12, 1, 5, 14, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f7304d3834fd1d9efb2a844cf42cf2d82ad6f936', 'committer_username': 'devmrfitz', 'committer_name': 'Aditya Pratap Singh', 'committer_email': 'adityapratapsingh51@gmail.com', 'commit_date': datetime.datetime(2019, 12, 1, 5, 14, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1384985cc08d57652a061c0c7ab8adb6f40046a4', 'committer_username': 'devmrfitz', 'committer_name': 'Aditya Pratap Singh', 'committer_email': 'adityapratapsingh51@gmail.com', 'commit_date': datetime.datetime(2019, 12, 1, 5, 14, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b71ed3ec35b64a537448cb364ddc3166b9237f7a', 'committer_username': 'devmrfitz', 'committer_name': 'Aditya Pratap Singh', 'committer_email': 'adityapratapsingh51@gmail.com', 'commit_date': datetime.datetime(2019, 12, 1, 5, 14, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '99b9bb9fa6a92f459647bf7f24936ecfbfe1b6a5', 'committer_username': 'devmrfitz', 'committer_name': 'Aditya Pratap Singh', 'committer_email': 'adityapratapsingh51@gmail.com', 'commit_date': datetime.datetime(2019, 12, 1, 5, 14, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fc9f519a1dad64017c43d8811a8e2e746ada3338', 'committer_username': 'devmrfitz', 'committer_name': 'Aditya Pratap Singh', 'committer_email': 'adityapratapsingh51@gmail.com', 'commit_date': datetime.datetime(2019, 12, 1, 5, 14, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ca58bd716657c6ce7f049cd7efd811246f61ed3a', 'committer_username': 'devmrfitz', 'committer_name': 'Aditya Pratap Singh', 'committer_email': 'adityapratapsingh51@gmail.com', 'commit_date': datetime.datetime(2019, 12, 1, 5, 14, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd812f55316de8dc12e136b77a3ac112e608319d2', 'committer_username': 'devmrfitz', 'committer_name': 'Aditya Pratap Singh', 'committer_email': 'adityapratapsingh51@gmail.com', 'commit_date': datetime.datetime(2019, 12, 1, 5, 14, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9270d3c585680ed3091aba4210da2096e4a4b54a', 'committer_username': 'devmrfitz', 'committer_name': 'Aditya Pratap Singh', 'committer_email': 'adityapratapsingh51@gmail.com', 'commit_date': datetime.datetime(2019, 12, 1, 5, 14, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '71281d79b9b691a9a9d778f700e3c79c1c593d72', 'committer_username': 'devmrfitz', 'committer_name': 'Aditya Pratap Singh', 'committer_email': 'adityapratapsingh51@gmail.com', 'commit_date': datetime.datetime(2019, 12, 1, 5, 14, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b2632b89755fdb538a7f9e84ea2854abc3c3c8aa', 'committer_username': 'mlodic', 'committer_name': 'Matteo Lodi', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 1, 12, 6, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'eb2eea54c2e1212697d2440b0be408c73e09aa92', 'committer_username': 'mlodic', 'committer_name': 'Matteo Lodi', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 1, 12, 6, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'db41618b1e86f7cc553b1f8adc640c7b09e7f4bc', 'committer_username': 'devmrfitz', 'committer_name': 'Aditya Pratap Singh', 'committer_email': 'adityapratapsingh51@gmail.com', 'commit_date': datetime.datetime(2019, 12, 1, 5, 14, 9, tzinfo=datetime.timezone.utc)}]",Aditya Pratap Singh,58381523,adityapratapsingh51@gmail.com,User,,58,,22,52
978534044,Used NewJsonRenderer instead of CustomJsonInput,"# Description

Used NewJsonRenderer instead of CustomJsonInput

## Related issues

closes #959 

## Type of change

Please delete options that are not relevant.

- [ ] Bug fix (non-breaking change which fixes an issue).
- [X] New feature (non-breaking change which adds functionality).
- [ ] Breaking change (fix or feature that would cause existing functionality to not work as expected).

# Checklist

- [x] I have read and understood the rules about [how to Contribute](https://intelowl.readthedocs.io/en/latest/Contribute.html) to this project
- [x] The pull request is for the branch `develop`
- [ ] A new analyzer or connector was added, in which case:
    - [ ] [Usage](https://github.com/intelowlproject/IntelOwl/blob/master/docs/source/Usage.md) file was updated.
    - [ ] [Advanced-Usage](./Advanced-Usage.md) was updated (in case the analyzer/connector provides additional optional configuration).
    - [ ] Secrets were added in [env_file_app_template](https://github.com/intelowlproject/IntelOwl/blob/master/docker/env_file_app_template), [env_file_app_ci](https://github.com/certego/IntelOwl/blob/master/docker/env_file_app_ci) and in the [Installation](./Installation.md) docs, if necessary.
    - [ ] If the analyzer/connector requires mocked testing, `_monkeypatch()` was used in its class to apply the necessary decorators.
    - [ ] If a File analyzer was added, its name was explicitly defined in [test_file_scripts.py](https://github.com/intelowlproject/IntelOwl/blob/master/tests/analyzers_manager/test_file_scripts.py) (not required for Observable Analyzers).
- [x] If external libraries/packages with restrictive licenses were used, they were added in the [Legal Notice](https://github.com/certego/IntelOwl/blob/master/.github/legal_notice.md) section.
- [x] The tests gave 0 errors.
- [x] Linters (`Black`, `Flake`, `Isort`) gave 0 errors. If you have correctly installed [pre-commit](https://intelowl.readthedocs.io/en/latest/Contribute.html#how-to-start-setup-project-and-development-instance), it does these checks and adjustments on your behalf.
- [ ] The commits were squashed into a single one (optional, they will be squashed anyway by the maintainer)",True,1051,https://api.github.com/repos/intelowlproject/IntelOwl/pulls/1051,https://github.com/intelowlproject/IntelOwl/pull/1051,closed,10,10,4,3,2,0,0,0,[],2022-06-24 17:01:44+00:00,2022-06-28 10:55:34+00:00,323630.0,"3 days, 17:53:50",[],"[{'commit_sha': '62e05b0749b9fca86daf3192cc46df3852b9863e', 'committer_username': 'devmrfitz', 'committer_name': 'Aditya Pratap Singh', 'committer_email': 'adityapratapsingh51@gmail.com', 'commit_date': datetime.datetime(2019, 12, 1, 5, 14, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '655afb5a7435b74a4ffd53a9c6c83cc1287e9aa4', 'committer_username': 'mlodic', 'committer_name': 'Matteo Lodi', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 1, 12, 6, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aef5c70ade3d42d0f173fe11fce188fbc648d41a', 'committer_username': 'devmrfitz', 'committer_name': 'Aditya Pratap Singh', 'committer_email': 'adityapratapsingh51@gmail.com', 'commit_date': datetime.datetime(2019, 12, 1, 5, 14, 9, tzinfo=datetime.timezone.utc)}]",Aditya Pratap Singh,58381523,adityapratapsingh51@gmail.com,User,,58,,22,52
985736358,tlsh hash in File_info and new Elf_Info,"# Description

Additional hashes in File_info

## Related issues
#270 

## Type of change

Please delete options that are not relevant.

- [ ] Bug fix (non-breaking change which fixes an issue).
- [X] New feature (non-breaking change which adds functionality).
- [ ] Breaking change (fix or feature that would cause existing functionality to not work as expected).

# Checklist

- [x] I have read and understood the rules about [how to Contribute](https://intelowl.readthedocs.io/en/latest/Contribute.html) to this project
- [x] The pull request is for the branch `develop`
- [x] A new analyzer or connector was added, in which case:
    - [x] [Usage](https://github.com/intelowlproject/IntelOwl/blob/master/docs/source/Usage.md) file was updated.
    - [ ] [Advanced-Usage](./Advanced-Usage.md) was updated (in case the analyzer/connector provides additional optional configuration).
    - [ ] Secrets were added in [env_file_app_template](https://github.com/intelowlproject/IntelOwl/blob/master/docker/env_file_app_template), [env_file_app_ci](https://github.com/certego/IntelOwl/blob/master/docker/env_file_app_ci) and in the [Installation](./Installation.md) docs, if necessary.
    - [ ] If the analyzer/connector requires mocked testing, `_monkeypatch()` was used in its class to apply the necessary decorators.
    - [ ] If a File analyzer was added, its name was explicitly defined in [test_file_scripts.py](https://github.com/intelowlproject/IntelOwl/blob/master/tests/analyzers_manager/test_file_scripts.py) (not required for Observable Analyzers).
- [ ] If external libraries/packages with restrictive licenses were used, they were added in the [Legal Notice](https://github.com/certego/IntelOwl/blob/master/.github/legal_notice.md) section.
- [x] The tests gave 0 errors.
- [x] Linters (`Black`, `Flake`, `Isort`) gave 0 errors. If you have correctly installed [pre-commit](https://intelowl.readthedocs.io/en/latest/Contribute.html#how-to-start-setup-project-and-development-instance), it does these checks and adjustments on your behalf.
- [ ] The commits were squashed into a single one (optional, they will be squashed anyway by the maintainer)
- [x] If changes were made to an existing model/serializer/view, the docs were updated and regenerated (check `CONTRIBUTE.md`).
  ",True,1073,https://api.github.com/repos/intelowlproject/IntelOwl/pulls/1073,https://github.com/intelowlproject/IntelOwl/pull/1073,closed,98,4,8,6,12,26,0,0,[],2022-07-03 14:26:32+00:00,2022-07-08 07:18:17+00:00,406305.0,"4 days, 16:51:45","[{'comment_id': 912498143, 'comment_body': 'could you also write this warning down to a separated key? in that way the user could understand when this happens directly from the GUI', 'comment_created': datetime.datetime(2022, 7, 3, 14, 50, 51, tzinfo=datetime.timezone.utc), 'commenter': 'mlodic', 'type': 'User'}, {'comment_id': 912504068, 'comment_body': ""![image](https://user-images.githubusercontent.com/58381523/177046939-85c07419-4055-4009-b484-4ce2f044cf3a.png)\r\nIsn't errors a list instead of a dictionary?"", 'comment_created': datetime.datetime(2022, 7, 3, 15, 41, 15, tzinfo=datetime.timezone.utc), 'commenter': 'devmrfitz', 'type': 'User'}, {'comment_id': 912504780, 'comment_body': 'my point was to add that string as an another key in the `report`, cause I considered it normal behavior.\r\n\r\nIf you think that it is not normal behavior and it may resemble an error, so you are right and we should add in the `errors` section. Do you have an example on when that ""TNULL"" happens in real life?', 'comment_created': datetime.datetime(2022, 7, 3, 15, 47, 45, tzinfo=datetime.timezone.utc), 'commenter': 'mlodic', 'type': 'User'}, {'comment_id': 912514616, 'comment_body': 'https://github.com/trendmicro/tlsh#minimum-byte-stream-length', 'comment_created': datetime.datetime(2022, 7, 3, 17, 18, 41, tzinfo=datetime.timezone.utc), 'commenter': 'devmrfitz', 'type': 'User'}, {'comment_id': 912737697, 'comment_body': 'I consider this a normal behavior. I mean, the program ran successfully. I would add a new key in the `report` so', 'comment_created': datetime.datetime(2022, 7, 4, 8, 9, 3, tzinfo=datetime.timezone.utc), 'commenter': 'mlodic', 'type': 'User'}, {'comment_id': 912753683, 'comment_body': 'Alright. Will remove the check\r\n', 'comment_created': datetime.datetime(2022, 7, 4, 8, 26, 55, tzinfo=datetime.timezone.utc), 'commenter': 'devmrfitz', 'type': 'User'}, {'comment_id': 914852452, 'comment_body': 'please use `read_file_bytes` instead', 'comment_created': datetime.datetime(2022, 7, 6, 13, 40, 7, tzinfo=datetime.timezone.utc), 'commenter': 'mlodic', 'type': 'User'}, {'comment_id': 914852774, 'comment_body': 'please show example of results', 'comment_created': datetime.datetime(2022, 7, 6, 13, 40, 23, tzinfo=datetime.timezone.utc), 'commenter': 'mlodic', 'type': 'User'}, {'comment_id': 914853271, 'comment_body': 'how can you be sure that this list is populated? please handle this possible error', 'comment_created': datetime.datetime(2022, 7, 6, 13, 40, 47, tzinfo=datetime.timezone.utc), 'commenter': 'mlodic', 'type': 'User'}, {'comment_id': 914853857, 'comment_body': 'why do you remove this key?', 'comment_created': datetime.datetime(2022, 7, 6, 13, 41, 20, tzinfo=datetime.timezone.utc), 'commenter': 'mlodic', 'type': 'User'}, {'comment_id': 914856107, 'comment_body': 'please add `""application/x-executable""` too. \r\n\r\nAnd please add that new mimetype you added (`""application/x-elf""`) in the other places where we have `""application/x-executable""` so we can handle both cases', 'comment_created': datetime.datetime(2022, 7, 6, 13, 43, 17, tzinfo=datetime.timezone.utc), 'commenter': 'mlodic', 'type': 'User'}, {'comment_id': 914858952, 'comment_body': 'can you also leverage elftools to add the parsed data of the ELF file like it has been done for PE_Info?\r\n\r\nIn that way we can use this analyzer not only to extract the telfhash but also to parse ELF content and show it to the user. Otherwise it is pretty meaningless alone here', 'comment_created': datetime.datetime(2022, 7, 6, 13, 45, 50, tzinfo=datetime.timezone.utc), 'commenter': 'mlodic', 'type': 'User'}, {'comment_id': 914865926, 'comment_body': ""This tells the name of the temporary file created on the server. That's just a random name and hence irrelevant to the users."", 'comment_created': datetime.datetime(2022, 7, 6, 13, 51, 31, tzinfo=datetime.timezone.utc), 'commenter': 'devmrfitz', 'type': 'User'}, {'comment_id': 914867671, 'comment_body': 'This is something I wanted to ask. Any files I uploaded showed up as `application/x-sharedlib`. I added `application/x-elf` just for theoretical completeness. Should I remove it?', 'comment_created': datetime.datetime(2022, 7, 6, 13, 52, 55, tzinfo=datetime.timezone.utc), 'commenter': 'devmrfitz', 'type': 'User'}, {'comment_id': 914871447, 'comment_body': ""This will always be populated as we are already sure at this point that we're sending 1x valid ELF file"", 'comment_created': datetime.datetime(2022, 7, 6, 13, 56, 1, tzinfo=datetime.timezone.utc), 'commenter': 'devmrfitz', 'type': 'User'}, {'comment_id': 914872222, 'comment_body': '![image](https://user-images.githubusercontent.com/58381523/177567250-05923e27-ca16-4904-8a4f-204ef43eef39.png)\r\n', 'comment_created': datetime.datetime(2022, 7, 6, 13, 56, 40, tzinfo=datetime.timezone.utc), 'commenter': 'devmrfitz', 'type': 'User'}, {'comment_id': 914876799, 'comment_body': 'no keep that, just add also mine there and everywhere we use filters for ELF files. The mimetype thing is a jungle and there could be a lot of other in the wild still valid. So more is better', 'comment_created': datetime.datetime(2022, 7, 6, 14, 0, 22, tzinfo=datetime.timezone.utc), 'commenter': 'mlodic', 'type': 'User'}, {'comment_id': 914891760, 'comment_body': '![image](https://user-images.githubusercontent.com/58381523/177570867-a18440e5-e123-4c2c-95dc-955c8680136f.png)\r\n', 'comment_created': datetime.datetime(2022, 7, 6, 14, 13, 8, tzinfo=datetime.timezone.utc), 'commenter': 'devmrfitz', 'type': 'User'}, {'comment_id': 914893458, 'comment_body': '`ELFFile(io.BytesIO(self.read_file_bytes()))` works. Should I use that?', 'comment_created': datetime.datetime(2022, 7, 6, 14, 14, 33, tzinfo=datetime.timezone.utc), 'commenter': 'devmrfitz', 'type': 'User'}, {'comment_id': 914905722, 'comment_body': ""ok this is because ELFFile wants a file object. So nevermind, it's ok like that"", 'comment_created': datetime.datetime(2022, 7, 6, 14, 25, 4, tzinfo=datetime.timezone.utc), 'commenter': 'mlodic', 'type': 'User'}, {'comment_id': 914909341, 'comment_body': '![image](https://user-images.githubusercontent.com/58381523/177574058-a2c778b5-13a2-4703-a68d-04e2d120d233.png)\r\n![image](https://user-images.githubusercontent.com/58381523/177574101-ed5cd78f-c1c9-4fdc-a605-4030b849dfa6.png)\r\n', 'comment_created': datetime.datetime(2022, 7, 6, 14, 27, 56, tzinfo=datetime.timezone.utc), 'commenter': 'devmrfitz', 'type': 'User'}, {'comment_id': 914910298, 'comment_body': 'yeah but the point is that you have no control over that library so you never know how things can change and this would result in an unmanaged exception error.\r\n\r\nEven if yeah it is not a particular problem, I would suggest to manually raise an explicit error in case that result is not a populated list.\r\n\r\nThis also helps in case we extend this analyzer more to add additional components.', 'comment_created': datetime.datetime(2022, 7, 6, 14, 28, 40, tzinfo=datetime.timezone.utc), 'commenter': 'mlodic', 'type': 'User'}, {'comment_id': 914919965, 'comment_body': 'looks cool', 'comment_created': datetime.datetime(2022, 7, 6, 14, 36, 53, tzinfo=datetime.timezone.utc), 'commenter': 'mlodic', 'type': 'User'}, {'comment_id': 914922591, 'comment_body': ""ah yeah, we don't have a test file which is an .elf. What you should do is to rebuild the `test_files.zip` with an additional .elf file that we know we can use. The one that you tested can be shared? Otherwise I can find you one which is also malware"", 'comment_created': datetime.datetime(2022, 7, 6, 14, 39, 6, tzinfo=datetime.timezone.utc), 'commenter': 'mlodic', 'type': 'User'}, {'comment_id': 914929379, 'comment_body': 'please call it ping.elf just to help people understand what it is by its name?', 'comment_created': datetime.datetime(2022, 7, 6, 14, 44, 53, tzinfo=datetime.timezone.utc), 'commenter': 'mlodic', 'type': 'User'}, {'comment_id': 914949840, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 7, 6, 15, 1, 28, tzinfo=datetime.timezone.utc), 'commenter': 'devmrfitz', 'type': 'User'}]","[{'commit_sha': 'a855a06ef06e403200e960aa6c0c1769a1951cee', 'committer_username': 'devmrfitz', 'committer_name': 'Aditya Pratap Singh', 'committer_email': 'adityapratapsingh51@gmail.com', 'commit_date': datetime.datetime(2019, 12, 1, 5, 14, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a31433928422c520aaf939b2db8ac60fed30bd35', 'committer_username': 'devmrfitz', 'committer_name': 'Aditya Pratap Singh', 'committer_email': 'adityapratapsingh51@gmail.com', 'commit_date': datetime.datetime(2019, 12, 1, 5, 14, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1d655909954351e6c078a013a1268b3efa202471', 'committer_username': 'devmrfitz', 'committer_name': 'Aditya Pratap Singh', 'committer_email': 'adityapratapsingh51@gmail.com', 'commit_date': datetime.datetime(2019, 12, 1, 5, 14, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8b776338f853eff7e1cad063c1c34673072a5205', 'committer_username': 'devmrfitz', 'committer_name': 'Aditya Pratap Singh', 'committer_email': 'adityapratapsingh51@gmail.com', 'commit_date': datetime.datetime(2019, 12, 1, 5, 14, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f868964a6d4dafad9b4ad848172475480033fadf', 'committer_username': 'devmrfitz', 'committer_name': 'Aditya Pratap Singh', 'committer_email': 'adityapratapsingh51@gmail.com', 'commit_date': datetime.datetime(2019, 12, 1, 5, 14, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b9bc679ee10fad34d9143a972b1c592a9ae9eca3', 'committer_username': 'devmrfitz', 'committer_name': 'Aditya Pratap Singh', 'committer_email': 'adityapratapsingh51@gmail.com', 'commit_date': datetime.datetime(2019, 12, 1, 5, 14, 9, tzinfo=datetime.timezone.utc)}]",Aditya Pratap Singh,58381523,adityapratapsingh51@gmail.com,User,,58,,22,52
994168674,Allow customisation of plugin params from GUI,"# Description

Ability to set user-level and organization-level configuration

## Related issues
closes #433 

## Type of change

Please delete options that are not relevant.

- [ ] Bug fix (non-breaking change which fixes an issue).
- [ ] New feature (non-breaking change which adds functionality).
- [ ] Breaking change (fix or feature that would cause existing functionality to not work as expected).

# Checklist

- [ ] I have read and understood the rules about [how to Contribute](https://intelowl.readthedocs.io/en/latest/Contribute.html) to this project
- [ ] The pull request is for the branch `develop`
- [ ] A new analyzer or connector was added, in which case:
    - [ ] [Usage](https://github.com/intelowlproject/IntelOwl/blob/master/docs/source/Usage.md) file was updated.
    - [ ] [Advanced-Usage](./Advanced-Usage.md) was updated (in case the analyzer/connector provides additional optional configuration).
    - [ ] Secrets were added in [env_file_app_template](https://github.com/intelowlproject/IntelOwl/blob/master/docker/env_file_app_template), [env_file_app_ci](https://github.com/certego/IntelOwl/blob/master/docker/env_file_app_ci) and in the [Installation](./Installation.md) docs, if necessary.
    - [ ] If the analyzer/connector requires mocked testing, `_monkeypatch()` was used in its class to apply the necessary decorators.
    - [ ] If a File analyzer was added, its name was explicitly defined in [test_file_scripts.py](https://github.com/intelowlproject/IntelOwl/blob/master/tests/analyzers_manager/test_file_scripts.py) (not required for Observable Analyzers).
- [ ] If external libraries/packages with restrictive licenses were used, they were added in the [Legal Notice](https://github.com/certego/IntelOwl/blob/master/.github/legal_notice.md) section.
- [ ] The tests gave 0 errors.
- [ ] Linters (`Black`, `Flake`, `Isort`) gave 0 errors. If you have correctly installed [pre-commit](https://intelowl.readthedocs.io/en/latest/Contribute.html#how-to-start-setup-project-and-development-instance), it does these checks and adjustments on your behalf.
- [ ] The commits were squashed into a single one (optional, they will be squashed anyway by the maintainer)
- [ ] If changes were made to an existing model/serializer/view, the docs were updated and regenerated (check `CONTRIBUTE.md`).
  
### Important Rules
- If your changes decrease the overall tests coverage (you will know after the Codecov CI job is done), you should add the required tests to fix the problem
- Everytime you make changes to the PR and you think the work is done, you should explicitly ask for a review

# Real World Example

Please delete if the PR is for bug fixing.
Otherwise, please provide the resulting raw JSON of a finished analysis (and, if you like, a screenshot of the results). This is to allow the maintainers to understand how the analyzer works.
",True,1095,https://api.github.com/repos/intelowlproject/IntelOwl/pulls/1095,https://github.com/intelowlproject/IntelOwl/pull/1095,closed,1291,14,21,44,32,102,0,0,[],2022-07-12 11:27:22+00:00,2022-08-01 10:06:49+00:00,1723167.0,"19 days, 22:39:27","[{'comment_id': 918980221, 'comment_body': '> The json view for params would present a problem as that would mean all params for a given analyzer are a single entry. Now, if we modify the analyzer to add new params, this would create an inconsistency. I was thinking of per-attribute overrides of params\r\n\r\ndo you mean this? what contains `attribute` exactly? Where is a reference to the analyzer/connector name?', 'comment_created': datetime.datetime(2022, 7, 12, 13, 35, 54, tzinfo=datetime.timezone.utc), 'commenter': 'mlodic', 'type': 'User'}, {'comment_id': 918983911, 'comment_body': 'made some changes', 'comment_created': datetime.datetime(2022, 7, 12, 13, 39, 3, tzinfo=datetime.timezone.utc), 'commenter': 'devmrfitz', 'type': 'User'}, {'comment_id': 918985448, 'comment_body': '```\r\nname=""EmailRep""\r\nattribute=""soft_time_limit""\r\nvalue=""90""\r\n```', 'comment_created': datetime.datetime(2022, 7, 12, 13, 40, 21, tzinfo=datetime.timezone.utc), 'commenter': 'devmrfitz', 'type': 'User'}, {'comment_id': 919023185, 'comment_body': 'good, just one thing I noticed. `soft_time_limit` belongs to `config` key. I think we can allow the user to make changes only on the keys available in `params` because the keys in `config` are strictly related to how the analyzer work and it makes no sense to change them', 'comment_created': datetime.datetime(2022, 7, 12, 14, 11, 36, tzinfo=datetime.timezone.utc), 'commenter': 'mlodic', 'type': 'User'}, {'comment_id': 923116866, 'comment_body': ""I think this should be better placed as a `classmethod` in the corresponding CustomConfig class. In that way we don't separate the logic that leverages that class from the class itself. This is very important for code maintainability, in particular when the project grows up"", 'comment_created': datetime.datetime(2022, 7, 18, 9, 2, 8, tzinfo=datetime.timezone.utc), 'commenter': 'mlodic', 'type': 'User'}, {'comment_id': 923120032, 'comment_body': 'the `json.loads` call sounds wrong cause this means that we are erronously saving the `value` attribute as valid JSON while it should just be a simple string', 'comment_created': datetime.datetime(2022, 7, 18, 9, 5, 54, tzinfo=datetime.timezone.utc), 'commenter': 'mlodic', 'type': 'User'}, {'comment_id': 923120692, 'comment_body': 'while your intentions are clear to me, it would be useful to add more context (comments) to help the reader to understand why you check the org first', 'comment_created': datetime.datetime(2022, 7, 18, 9, 6, 42, tzinfo=datetime.timezone.utc), 'commenter': 'mlodic', 'type': 'User'}, {'comment_id': 923121734, 'comment_body': 'all of this code is mostly duplicated so please try to re-arrange this', 'comment_created': datetime.datetime(2022, 7, 18, 9, 8, 5, tzinfo=datetime.timezone.utc), 'commenter': 'mlodic', 'type': 'User'}, {'comment_id': 923122106, 'comment_body': 'please add also logs in critical parts of this function', 'comment_created': datetime.datetime(2022, 7, 18, 9, 8, 34, tzinfo=datetime.timezone.utc), 'commenter': 'mlodic', 'type': 'User'}, {'comment_id': 923123190, 'comment_body': 'while your intentions are clear to me, it would be useful to add more context (comments) to help the reader to understand what is happening here', 'comment_created': datetime.datetime(2022, 7, 18, 9, 9, 56, tzinfo=datetime.timezone.utc), 'commenter': 'mlodic', 'type': 'User'}, {'comment_id': 923127644, 'comment_body': 'please add `@add_docs` ', 'comment_created': datetime.datetime(2022, 7, 18, 9, 14, 48, tzinfo=datetime.timezone.utc), 'commenter': 'mlodic', 'type': 'User'}, {'comment_id': 923137999, 'comment_body': 'ok but this is a validation so this should be implemented in the related serializer', 'comment_created': datetime.datetime(2022, 7, 18, 9, 26, 45, tzinfo=datetime.timezone.utc), 'commenter': 'mlodic', 'type': 'User'}, {'comment_id': 923139198, 'comment_body': '-> logger.', 'comment_created': datetime.datetime(2022, 7, 18, 9, 28, 10, tzinfo=datetime.timezone.utc), 'commenter': 'mlodic', 'type': 'User'}, {'comment_id': 923142400, 'comment_body': 'this is complex logic that requires proper testing. So please extract this part to a separate function and do the tests of what you want that this would behave.', 'comment_created': datetime.datetime(2022, 7, 18, 9, 31, 49, tzinfo=datetime.timezone.utc), 'commenter': 'mlodic', 'type': 'User'}, {'comment_id': 923143303, 'comment_body': 'also, we need a test for this logic too which proves that it behaves accordingly', 'comment_created': datetime.datetime(2022, 7, 18, 9, 32, 51, tzinfo=datetime.timezone.utc), 'commenter': 'mlodic', 'type': 'User'}, {'comment_id': 923145915, 'comment_body': 'why is this necessary?', 'comment_created': datetime.datetime(2022, 7, 18, 9, 36, 1, tzinfo=datetime.timezone.utc), 'commenter': 'mlodic', 'type': 'User'}, {'comment_id': 923147274, 'comment_body': 'please extract the duplicated code and leverage the right classes for each case', 'comment_created': datetime.datetime(2022, 7, 18, 9, 37, 40, tzinfo=datetime.timezone.utc), 'commenter': 'mlodic', 'type': 'User'}, {'comment_id': 923777066, 'comment_body': 'The json conversion is done as the param value it is overriding is guaranteed to be a JSON-compliant value. This allows us to store all the JSON-compliant types in the StringField.\r\n\r\nDoes this sound good?', 'comment_created': datetime.datetime(2022, 7, 18, 19, 28, 29, tzinfo=datetime.timezone.utc), 'commenter': 'devmrfitz', 'type': 'User'}, {'comment_id': 923780801, 'comment_body': 'The same explanation as the `json.loads` one', 'comment_created': datetime.datetime(2022, 7, 18, 19, 29, 43, tzinfo=datetime.timezone.utc), 'commenter': 'devmrfitz', 'type': 'User'}, {'comment_id': 923781443, 'comment_body': ""The sample request I've posted also has a JSON compliant value "", 'comment_created': datetime.datetime(2022, 7, 18, 19, 30, 36, tzinfo=datetime.timezone.utc), 'commenter': 'devmrfitz', 'type': 'User'}, {'comment_id': 924181246, 'comment_body': 'Even if JSON is a string, StringField/CharField is not made to store JSON data. \r\nAnyway I don\'t even understand why you are using JSON instead of simple string for ""value"".\r\n\r\nWe have a structure like this:\r\n```\r\n ""Classic_DNS"": {\r\n    ""type"": ""observable"",\r\n    ""python_module"": ""dns.dns_resolvers.classic_dns_resolver.ClassicDNSResolver"",\r\n    ""description"": ""Retrieve current domain resolution with default DNS"",\r\n    ""disabled"": false,\r\n    ""external_service"": true,\r\n    ""leaks_info"": false,\r\n    ""observable_supported"": [""ip"", ""domain"", ""url""],\r\n    ""config"": {\r\n      ""soft_time_limit"": 30,\r\n      ""queue"": ""default""\r\n    },\r\n    ""secrets"": {},\r\n    ""params"": {\r\n      ""query_type"": {\r\n        ""value"": ""A"",\r\n        ""type"": ""str"",\r\n        ""description"": ""Query type against the chosen DNS resolver.""\r\n      }\r\n    }\r\n  }\r\n```\r\n\r\nThe ""value"" attribute in CustomConfig should just be a simple string ""A"" in this case or ""CNAME"" in the example that you made. Also looking at your code, I don\'t get why we need JSON manipulation at all.', 'comment_created': datetime.datetime(2022, 7, 19, 7, 57, 32, tzinfo=datetime.timezone.utc), 'commenter': 'mlodic', 'type': 'User'}, {'comment_id': 924184454, 'comment_body': 'you got some problems on how you handle that parameter:\r\n\r\nlooking at what you have written, why CNAME is escaped and contains a string inside a string?\r\n```\r\n    ""value"": ""\\""CNAME\\"""",\r\n\r\n```\r\n\r\nthis should just be\r\n```\r\n ""value"": ""CNAME"",\r\n```', 'comment_created': datetime.datetime(2022, 7, 19, 8, 0, 44, tzinfo=datetime.timezone.utc), 'commenter': 'mlodic', 'type': 'User'}, {'comment_id': 924191605, 'comment_body': 'Let\'s say a param has type str and the value in it is `5`. Now, we\'ll store `""5""` in CustomConfig.value. However, if it is of type int and the value in it is `5`, we\'ll store `5`', 'comment_created': datetime.datetime(2022, 7, 19, 8, 8, 22, tzinfo=datetime.timezone.utc), 'commenter': 'devmrfitz', 'type': 'User'}, {'comment_id': 924192226, 'comment_body': 'So, when I json.loads it, it will return the correct data type', 'comment_created': datetime.datetime(2022, 7, 19, 8, 8, 59, tzinfo=datetime.timezone.utc), 'commenter': 'devmrfitz', 'type': 'User'}, {'comment_id': 924244746, 'comment_body': ""Ok now it starts to make sense why you did that but:\r\n1 - that was completely implicit\r\n2 - if we need to make data conversion, we could do that in another way. Here we are abusing JSON to get the result that we want. It is not meant to be used to do such kind of things. This is an hack we should avoid.\r\n\r\nI think we should leverage what was already built inside IntelOwl to manage this properly. De facto what we want is to store a new configuration for a specific parameter in the analyzer config file. But we already have a Serializer for that config file (AbstractConfigSerializer).\r\nIf you check [here](https://github.com/intelowlproject/IntelOwl/blob/master/api_app/core/serializers.py#L95), there is already a `ParamSerializer` used for that structure that we want to override.\r\n\r\nThe right way to do that could be: first accept a value from the API. Verify that this value is complaint with the existing structure (if `type` is `str` it must be a string) and then save it as a BaseField (see [here](https://github.com/intelowlproject/IntelOwl/blob/master/api_app/core/serializers.py#L51)).\r\nThen we wouldn't ever have any other problems with that parameter cause we can overwrite it here and there securely because we already managed the verification in the serializer properly so the data is always valid."", 'comment_created': datetime.datetime(2022, 7, 19, 8, 59, 39, tzinfo=datetime.timezone.utc), 'commenter': 'mlodic', 'type': 'User'}, {'comment_id': 925686577, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 7, 20, 14, 35, 13, tzinfo=datetime.timezone.utc), 'commenter': 'devmrfitz', 'type': 'User'}, {'comment_id': 925687002, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 7, 20, 14, 35, 36, tzinfo=datetime.timezone.utc), 'commenter': 'devmrfitz', 'type': 'User'}, {'comment_id': 925687242, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 7, 20, 14, 35, 48, tzinfo=datetime.timezone.utc), 'commenter': 'devmrfitz', 'type': 'User'}, {'comment_id': 925699611, 'comment_body': 'Let\'s say we receive a `5` as a value by a `form-data` (or `x-www-form-payload`) type request. Unlike a `JSON` payload, there is no type information in a `form-data`, it\'s always a string.\r\n![image](https://user-images.githubusercontent.com/58381523/180011610-2cf25130-2d1f-48a0-9a7c-836c5776921b.png)\r\nHence, value_type will always be `""str""` [here](https://github.com/intelowlproject/IntelOwl/blob/5b7d0bc88ff9046d386c67d52e5834b14b4dd469/api_app/core/serializers.py#L56).\r\n\r\nSo now, we need to get the type of this analyzer attribute from the config file, then cast the payload to the said format and handle errors. Moreover, if (in the future) we want to support object-type values, we\'ll need to stringify them. \r\n\r\nHowever, considering that the `analyzer-config` file itself is a JSON file, it is a guarantee that the JSON-parsing mechanism will always continue to work.', 'comment_created': datetime.datetime(2022, 7, 20, 14, 46, 7, tzinfo=datetime.timezone.utc), 'commenter': 'devmrfitz', 'type': 'User'}, {'comment_id': 926352819, 'comment_body': 'I am not getting why we should received a `form-data` payload in this API. All the other endpoints work by sending and receiving JSON. `Content-Type` of both answers and requests is always `application/json`.\r\n\r\nI mean, you wrote this example:\r\n```\r\nPOST request at /api/custom-config with body:\r\n\r\n{\r\n    ""name"":""Classic_DNS"",\r\n    ""attribute"":""query_type"",\r\n    ""value"":""\\""CNAME\\"""",\r\n    ""type"": 1\r\n}\r\n```\r\n\r\nWhere the payload is clearly JSON but the `value` is JSON itself. That\'s what I don\'t understand', 'comment_created': datetime.datetime(2022, 7, 21, 7, 38, 9, tzinfo=datetime.timezone.utc), 'commenter': 'mlodic', 'type': 'User'}, {'comment_id': 926371014, 'comment_body': 'I like the description here', 'comment_created': datetime.datetime(2022, 7, 21, 7, 57, 46, tzinfo=datetime.timezone.utc), 'commenter': 'mlodic', 'type': 'User'}, {'comment_id': 926372180, 'comment_body': 'we could add a simple index in the model for this query and the next one, to help in case this table becomes big', 'comment_created': datetime.datetime(2022, 7, 21, 7, 58, 56, tzinfo=datetime.timezone.utc), 'commenter': 'mlodic', 'type': 'User'}, {'comment_id': 926372821, 'comment_body': 'forgotten here?', 'comment_created': datetime.datetime(2022, 7, 21, 7, 59, 34, tzinfo=datetime.timezone.utc), 'commenter': 'mlodic', 'type': 'User'}, {'comment_id': 926384130, 'comment_body': 'cool usage of bitwise operator for dictionaries. But we can make it even more cool. Try `|=` to avoid to repeat `custom_configs`. Please use that also in the other parts where you leveraged with operator.', 'comment_created': datetime.datetime(2022, 7, 21, 8, 11, 50, tzinfo=datetime.timezone.utc), 'commenter': 'mlodic', 'type': 'User'}, {'comment_id': 926385098, 'comment_body': 'forgotten here?', 'comment_created': datetime.datetime(2022, 7, 21, 8, 12, 46, tzinfo=datetime.timezone.utc), 'commenter': 'mlodic', 'type': 'User'}, {'comment_id': 926387971, 'comment_body': 'cool but there is no normal text. This is of critical importance when you need to search through your logs for the all the logs generated by this line. It is enough to write few words with this', 'comment_created': datetime.datetime(2022, 7, 21, 8, 15, 33, tzinfo=datetime.timezone.utc), 'commenter': 'mlodic', 'type': 'User'}, {'comment_id': 926389487, 'comment_body': 'please add @add_docs', 'comment_created': datetime.datetime(2022, 7, 21, 8, 17, 3, tzinfo=datetime.timezone.utc), 'commenter': 'mlodic', 'type': 'User'}, {'comment_id': 926390770, 'comment_body': 'this is complex logic that requires proper testing. So please extract this part to a separate function and do the tests of what you want that this would behave.', 'comment_created': datetime.datetime(2022, 7, 21, 8, 18, 20, tzinfo=datetime.timezone.utc), 'commenter': 'mlodic', 'type': 'User'}, {'comment_id': 926404723, 'comment_body': ""that's cool, could you just move it at the start of the class CustomConfigSerializer? In that way a reader would read this first so he can understand which fields are available in this serializer before reading the rest of the code"", 'comment_created': datetime.datetime(2022, 7, 21, 8, 32, 13, tzinfo=datetime.timezone.utc), 'commenter': 'mlodic', 'type': 'User'}, {'comment_id': 926405176, 'comment_body': 'cool optimization. could you also handle the impossible `else` case with a critical error log?', 'comment_created': datetime.datetime(2022, 7, 21, 8, 32, 42, tzinfo=datetime.timezone.utc), 'commenter': 'mlodic', 'type': 'User'}, {'comment_id': 926406892, 'comment_body': 'could you also log the user name and the organization name here?', 'comment_created': datetime.datetime(2022, 7, 21, 8, 34, 29, tzinfo=datetime.timezone.utc), 'commenter': 'mlodic', 'type': 'User'}, {'comment_id': 926409755, 'comment_body': ""Yeah, you're right. Currently, we're using `application/json` everywhere (except file uploads). But, in the future, if we want to mix this functionality with a file upload somehow, we would be unable to. So, I just wanted to be able to support it if needed in future.\r\nAdditionally, (for param values of types like `array` or `object`), we will need to stringify them in future. Thus, those doors are kept open too if we use JSON"", 'comment_created': datetime.datetime(2022, 7, 21, 8, 37, 23, tzinfo=datetime.timezone.utc), 'commenter': 'devmrfitz', 'type': 'User'}, {'comment_id': 926414600, 'comment_body': 'logger.debug?', 'comment_created': datetime.datetime(2022, 7, 21, 8, 41, 36, tzinfo=datetime.timezone.utc), 'commenter': 'mlodic', 'type': 'User'}, {'comment_id': 926419906, 'comment_body': 'Ok this is to update an already existing entry with the new value, am I right? Is this necessary?', 'comment_created': datetime.datetime(2022, 7, 21, 8, 47, 3, tzinfo=datetime.timezone.utc), 'commenter': 'mlodic', 'type': 'User'}, {'comment_id': 926424726, 'comment_body': ""This eliminates the need for front end to send PATCH requests. If a user has a lot of configs, they don't first have to find if a matching one exists, they can directly overwrite it."", 'comment_created': datetime.datetime(2022, 7, 21, 8, 51, 47, tzinfo=datetime.timezone.utc), 'commenter': 'devmrfitz', 'type': 'User'}, {'comment_id': 926425819, 'comment_body': 'Left for easy future use. Should I remove?', 'comment_created': datetime.datetime(2022, 7, 21, 8, 52, 47, tzinfo=datetime.timezone.utc), 'commenter': 'devmrfitz', 'type': 'User'}, {'comment_id': 926426000, 'comment_body': 'Left for easy future use. Should I remove?', 'comment_created': datetime.datetime(2022, 7, 21, 8, 52, 54, tzinfo=datetime.timezone.utc), 'commenter': 'devmrfitz', 'type': 'User'}, {'comment_id': 926437343, 'comment_body': ""thanks for the explanation. \r\n\r\nI don't think that this specific API endpoint would ever support that. And even if that will happen, we'll make changes then. Right now I think it is better to keep things simple there.\r\n\r\nThen the point regarding having array types that is true. We already have `type:list` params. I don't think we'll ever have `type:dict` because in that case it would make sense to just create another simple param.\r\nAnyway, this was already handled previously by @eshaan7 when writing the code of the `AbstractConfigSerializer` that I linked you before. He leveraged the `BaseField` that basically allow to write every kind of type inside of it.\r\nSo, if the request payload is valid JSON and the analyzer config is valid JSON, then why both cases shouldn't be handled the same way?\r\n\r\nIn `CustomConfig`,\r\n`type` could be `rfs.ChoiceField(choices=PARAM_DATATYPE_CHOICES)` and\r\n`value` could be `BaseField()`\r\n\r\nlike it is in the `_ParamSerializer` serializer\r\n\r\n\r\n"", 'comment_created': datetime.datetime(2022, 7, 21, 9, 3, 52, tzinfo=datetime.timezone.utc), 'commenter': 'mlodic', 'type': 'User'}, {'comment_id': 926438240, 'comment_body': '`plugin_name` is more understandable', 'comment_created': datetime.datetime(2022, 7, 21, 9, 4, 51, tzinfo=datetime.timezone.utc), 'commenter': 'mlodic', 'type': 'User'}, {'comment_id': 926438842, 'comment_body': ""Most of the heavy lifting in done in `get_as_dict`. It's just 2 `if` conditions after that. Should I still attempt the refactor?"", 'comment_created': datetime.datetime(2022, 7, 21, 9, 5, 30, tzinfo=datetime.timezone.utc), 'commenter': 'devmrfitz', 'type': 'User'}, {'comment_id': 926439113, 'comment_body': 'nah, not needed', 'comment_created': datetime.datetime(2022, 7, 21, 9, 5, 46, tzinfo=datetime.timezone.utc), 'commenter': 'mlodic', 'type': 'User'}, {'comment_id': 926439848, 'comment_body': 'Thank you :)', 'comment_created': datetime.datetime(2022, 7, 21, 9, 6, 34, tzinfo=datetime.timezone.utc), 'commenter': 'devmrfitz', 'type': 'User'}, {'comment_id': 926441123, 'comment_body': 'we could call this `PluginType`', 'comment_created': datetime.datetime(2022, 7, 21, 9, 7, 53, tzinfo=datetime.timezone.utc), 'commenter': 'mlodic', 'type': 'User'}, {'comment_id': 926441135, 'comment_body': ""Makes sense. However, I've used it in quite a few places now. Should I perform the refactor?"", 'comment_created': datetime.datetime(2022, 7, 21, 9, 7, 54, tzinfo=datetime.timezone.utc), 'commenter': 'devmrfitz', 'type': 'User'}, {'comment_id': 926443209, 'comment_body': 'done', 'comment_created': datetime.datetime(2022, 7, 21, 9, 10, 3, tzinfo=datetime.timezone.utc), 'commenter': 'devmrfitz', 'type': 'User'}, {'comment_id': 926444691, 'comment_body': 'yeah, my point is to extract this to allow it to be unit-tested. Otherwise it is just not possible.\r\n\r\nI mean, we need to test most the new things that we do but when we do changes to already existing APIs we should be careful even more. This is why extracting this and creating a simple unit test which proves that it works as you intend it to and that the normal behavior is preserved, would really help us in maintaining the application. ', 'comment_created': datetime.datetime(2022, 7, 21, 9, 11, 28, tzinfo=datetime.timezone.utc), 'commenter': 'mlodic', 'type': 'User'}, {'comment_id': 926446395, 'comment_body': 'yeah please, I mean, it lasts more this exchange of words than the refactor itself :P', 'comment_created': datetime.datetime(2022, 7, 21, 9, 13, 14, tzinfo=datetime.timezone.utc), 'commenter': 'mlodic', 'type': 'User'}, {'comment_id': 926447271, 'comment_body': 'BaseField is not a valid db type. It\'s only a Serializer Field. We\'ll need to store the values as a StringField. That\'s what I meant by ""we\'ll need to stringify""... and destringify i.e. `json.dumps` and `json.loads`.', 'comment_created': datetime.datetime(2022, 7, 21, 9, 14, 12, tzinfo=datetime.timezone.utc), 'commenter': 'devmrfitz', 'type': 'User'}, {'comment_id': 926453822, 'comment_body': 'What you said is clever and makes sense. Nevertheless this is a bit hacky, you know? We are basically circumventing the REST API rules to avoid to an additional HTTP request. Even if I appreciate the effort, I still prefer to follow the framework and the normal rules. It makes sense that if the config never existed then we use a PUT (`update`) and when it already exists we use a PATCH (`partial_update`). In that way we are complaint to the REST framework', 'comment_created': datetime.datetime(2022, 7, 21, 9, 20, 54, tzinfo=datetime.timezone.utc), 'commenter': 'mlodic', 'type': 'User'}, {'comment_id': 926456117, 'comment_body': 'done', 'comment_created': datetime.datetime(2022, 7, 21, 9, 23, 20, tzinfo=datetime.timezone.utc), 'commenter': 'devmrfitz', 'type': 'User'}, {'comment_id': 926457891, 'comment_body': ""If the config never existed, won't it be a `POST`?"", 'comment_created': datetime.datetime(2022, 7, 21, 9, 25, 9, tzinfo=datetime.timezone.utc), 'commenter': 'devmrfitz', 'type': 'User'}, {'comment_id': 926458176, 'comment_body': 'Also, so an error if a `POST` has a matching entry?', 'comment_created': datetime.datetime(2022, 7, 21, 9, 25, 28, tzinfo=datetime.timezone.utc), 'commenter': 'devmrfitz', 'type': 'User'}, {'comment_id': 926459427, 'comment_body': 'ah you are right, damn the difference is that the analyzer config is not in the real DB so that association I pointed out is not possible.\r\n\r\nok so another option that could be more clear (I would like to get rid of that explicit json conversions if possible) is to use the Django [JSONField](https://docs.djangoproject.com/en/4.0/ref/models/fields/#jsonfield). What do you think?', 'comment_created': datetime.datetime(2022, 7, 21, 9, 26, 46, tzinfo=datetime.timezone.utc), 'commenter': 'mlodic', 'type': 'User'}, {'comment_id': 926463111, 'comment_body': 'yeah you are right, I meant that, God I am melted 🤣  POST `create` \r\n\r\nThen yeah I think yes because after the first time we set it, we only want to update the value, nothing else, am I right?', 'comment_created': datetime.datetime(2022, 7, 21, 9, 30, 35, tzinfo=datetime.timezone.utc), 'commenter': 'mlodic', 'type': 'User'}, {'comment_id': 926463873, 'comment_body': 'I could do that. But databases (Postgres, Oracle, etc) are widely varying in how they handle JSON Fields, and the explicit conversions will still remain (for type-checking purposes).', 'comment_created': datetime.datetime(2022, 7, 21, 9, 31, 20, tzinfo=datetime.timezone.utc), 'commenter': 'devmrfitz', 'type': 'User'}, {'comment_id': 926465642, 'comment_body': ""`DELETE` too, but that's anyways handled"", 'comment_created': datetime.datetime(2022, 7, 21, 9, 33, 9, tzinfo=datetime.timezone.utc), 'commenter': 'devmrfitz', 'type': 'User'}, {'comment_id': 926487214, 'comment_body': 'Done. Looks good?', 'comment_created': datetime.datetime(2022, 7, 21, 9, 55, 54, tzinfo=datetime.timezone.utc), 'commenter': 'devmrfitz', 'type': 'User'}, {'comment_id': 926494600, 'comment_body': ""good thing this one.\r\n\r\nAh, remember that you'll need to merge the migrations in a single one at the end. Like we do for the commits in Git."", 'comment_created': datetime.datetime(2022, 7, 21, 10, 3, 42, tzinfo=datetime.timezone.utc), 'commenter': 'mlodic', 'type': 'User'}, {'comment_id': 926637626, 'comment_body': 'yeah but if we are saving this as a valid JSON I think it makes sense to explicitly use this field considering that it is supported', 'comment_created': datetime.datetime(2022, 7, 21, 12, 52, 26, tzinfo=datetime.timezone.utc), 'commenter': 'mlodic', 'type': 'User'}, {'comment_id': 926639346, 'comment_body': 'Alright. So everything else remains same, just the StringField changes to a JSONField, right?', 'comment_created': datetime.datetime(2022, 7, 21, 12, 54, 6, tzinfo=datetime.timezone.utc), 'commenter': 'devmrfitz', 'type': 'User'}, {'comment_id': 927633850, 'comment_body': 'cool, in this way you can do one or more unit tests for this function.\r\n\r\nto create a new unit test:\r\n* choose a possible input\r\n* call the function\r\n* check if the data generated/changes is the same of what you expect (use `self.assert`-like clauses from the `unittest` framework)', 'comment_created': datetime.datetime(2022, 7, 22, 13, 7, 35, tzinfo=datetime.timezone.utc), 'commenter': 'mlodic', 'type': 'User'}, {'comment_id': 927795889, 'comment_body': '```suggestion\n    attribute = models.CharField(max_length=128)\n```\n\n`False` is the default value Django uses for `blank`, so `blank=False` can be removed. [Explained here](https://codereview.doctor/advice/C2002).', 'comment_created': datetime.datetime(2022, 7, 22, 16, 0, 44, tzinfo=datetime.timezone.utc), 'commenter': 'code-review-doctor[bot]', 'type': 'Bot'}, {'comment_id': 927795890, 'comment_body': ""Django automatically creates a `related_name` if it's not set. If it were set then a more readable and explicit relationship is set up. [More details](https://codereview.doctor/advice/C2005)."", 'comment_created': datetime.datetime(2022, 7, 22, 16, 0, 45, tzinfo=datetime.timezone.utc), 'commenter': 'code-review-doctor[bot]', 'type': 'Bot'}, {'comment_id': 927795892, 'comment_body': '```suggestion\n    owner = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE)\n```\n\nAs above, with an explicit `related_name` would be better.\n\nSimilarly, redundant default arguments can be removed.\n\nSimilarly, redundant default arguments can be removed.', 'comment_created': datetime.datetime(2022, 7, 22, 16, 0, 45, tzinfo=datetime.timezone.utc), 'commenter': 'code-review-doctor[bot]', 'type': 'Bot'}, {'comment_id': 927795896, 'comment_body': '```suggestion\n    plugin_name = models.CharField(max_length=128)\n```\n\nSame as above: redundant default arguments can be removed.', 'comment_created': datetime.datetime(2022, 7, 22, 16, 0, 45, tzinfo=datetime.timezone.utc), 'commenter': 'code-review-doctor[bot]', 'type': 'Bot'}, {'comment_id': 928844384, 'comment_body': ""Why do you need to initialize this to an empty and use the `or` ? \r\n```suggestion\r\n        # Adding CustomConfigs for user's organization, if any\r\n        membership = Membership.objects.filter(\r\n            user=self.request.user, organization__isnull=False\r\n        )\r\n        if membership.exists():\r\n            result = CustomConfig.objects.filter(\r\n                organization=membership[0].organization\r\n            )\r\n            else:\r\n\r\n               result = CustomConfig.objects.filter(owner=self.request.user)\r\n```"", 'comment_created': datetime.datetime(2022, 7, 25, 12, 47, 34, tzinfo=datetime.timezone.utc), 'commenter': '0ssigeno', 'type': 'User'}, {'comment_id': 928847793, 'comment_body': ""Instead of having another variable and to run a job that you don't actually need to run (because, correct me if I'm wrong, but you want in the CI to verify the configuration), i think is a better solution to **always** do the configuration in the tests (hoping that this will not break other tests) and, `if not settings.STAGE_CI`, run the celery task.\r\nIn summary, I would remove this new settings variable, that we have already too many, and move the check CI/not CI before calling `celery_app.send_task`"", 'comment_created': datetime.datetime(2022, 7, 25, 12, 51, 14, tzinfo=datetime.timezone.utc), 'commenter': '0ssigeno', 'type': 'User'}, {'comment_id': 928855969, 'comment_body': 'I need the actual `celery_app.send_task` to be executed, too, as only then would my `before_task` get triggered. So, stopping the call would prevent the test from running', 'comment_created': datetime.datetime(2022, 7, 25, 12, 59, 49, tzinfo=datetime.timezone.utc), 'commenter': 'devmrfitz', 'type': 'User'}, {'comment_id': 928857512, 'comment_body': ""Because the first `or` is conditional in nature, while the other isn't."", 'comment_created': datetime.datetime(2022, 7, 25, 13, 1, 22, tzinfo=datetime.timezone.utc), 'commenter': 'devmrfitz', 'type': 'User'}, {'comment_id': 928901359, 'comment_body': ""Fuck, i can't even read today. You are 100% right"", 'comment_created': datetime.datetime(2022, 7, 25, 13, 43, 36, tzinfo=datetime.timezone.utc), 'commenter': '0ssigeno', 'type': 'User'}, {'comment_id': 928910910, 'comment_body': 'Ok, read the construct that you made, and even if I would have preferred to using the mockup package to mock `start_analyzer` and then verify that it was called with the correct args/kwargs, i do not actually dislike your solution. I think is very creative and imho we could adopt the approach even in other parts of the test suite to verify that the celery tasks have the correct arguments.', 'comment_created': datetime.datetime(2022, 7, 25, 13, 52, 22, tzinfo=datetime.timezone.utc), 'commenter': '0ssigeno', 'type': 'User'}, {'comment_id': 928914065, 'comment_body': '@devmrfitz I just checked the usages of `CustomConfig.apply` and I did not find anything on tests for that. Can you make a test as Matteo asked? After that, I think we are good to go with this PR', 'comment_created': datetime.datetime(2022, 7, 25, 13, 55, 3, tzinfo=datetime.timezone.utc), 'commenter': '0ssigeno', 'type': 'User'}, {'comment_id': 929168342, 'comment_body': 'Thanks a lot :)', 'comment_created': datetime.datetime(2022, 7, 25, 18, 15, 41, tzinfo=datetime.timezone.utc), 'commenter': 'devmrfitz', 'type': 'User'}, {'comment_id': 929568752, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 7, 26, 6, 24, 42, tzinfo=datetime.timezone.utc), 'commenter': 'devmrfitz', 'type': 'User'}, {'comment_id': 930795658, 'comment_body': ""This function can be simplified, we don't need the inner function.\r\n\r\nwe can return the Object.keys(obj).... replacing obj with `plugins` and `predicate(obj[key])` with the function passed as param to the `objectFilter` call"", 'comment_created': datetime.datetime(2022, 7, 27, 8, 52, 12, tzinfo=datetime.timezone.utc), 'commenter': 'drosetti', 'type': 'User'}, {'comment_id': 930839840, 'comment_body': 'I known ""value"" is a ""standard"" name, but I think something like ""configurations"" (or something else) is easier to understand', 'comment_created': datetime.datetime(2022, 7, 27, 9, 32, 48, tzinfo=datetime.timezone.utc), 'commenter': 'drosetti', 'type': 'User'}, {'comment_id': 930843575, 'comment_body': 'same logic of the comment above, please change ""item"" with ""plugin""', 'comment_created': datetime.datetime(2022, 7, 27, 9, 36, 36, tzinfo=datetime.timezone.utc), 'commenter': 'drosetti', 'type': 'User'}, {'comment_id': 931492518, 'comment_body': ""Done. I'd made the `objectFilter` function as I thought that it could be a generic code snippet that could be reused in other parts of the codebase."", 'comment_created': datetime.datetime(2022, 7, 27, 19, 7, 53, tzinfo=datetime.timezone.utc), 'commenter': 'devmrfitz', 'type': 'User'}, {'comment_id': 931494275, 'comment_body': 'done', 'comment_created': datetime.datetime(2022, 7, 27, 19, 10, 13, tzinfo=datetime.timezone.utc), 'commenter': 'devmrfitz', 'type': 'User'}, {'comment_id': 931494609, 'comment_body': 'done', 'comment_created': datetime.datetime(2022, 7, 27, 19, 10, 41, tzinfo=datetime.timezone.utc), 'commenter': 'devmrfitz', 'type': 'User'}, {'comment_id': 932954537, 'comment_body': 'Good refactor exactly what I meant!\r\n\r\nA little question can you replace `key` with `pluginName` and `filteredPlugins` with `filteredPlugins` ?', 'comment_created': datetime.datetime(2022, 7, 29, 7, 37, 18, tzinfo=datetime.timezone.utc), 'commenter': 'drosetti', 'type': 'User'}, {'comment_id': 932955196, 'comment_body': 'We can remove the last `else` and initialize `plugins` with `{}`', 'comment_created': datetime.datetime(2022, 7, 29, 7, 38, 8, tzinfo=datetime.timezone.utc), 'commenter': 'drosetti', 'type': 'User'}, {'comment_id': 932958585, 'comment_body': 'I think it will improve the UX removing the `""` from the string params (both placeholder and validation). It\'s easier to use and I think it shouldn\'t take a lot of time. I think you should check in the backend the type (same as int). What do you think ?', 'comment_created': datetime.datetime(2022, 7, 29, 7, 42, 37, tzinfo=datetime.timezone.utc), 'commenter': 'drosetti', 'type': 'User'}, {'comment_id': 932959957, 'comment_body': 'Do we need this case ? I checked both `analyzer_config.json` and `connector_config.json` and we don\'t have a ""type"": ""json"".', 'comment_created': datetime.datetime(2022, 7, 29, 7, 44, 27, tzinfo=datetime.timezone.utc), 'commenter': 'drosetti', 'type': 'User'}, {'comment_id': 932962886, 'comment_body': 'This is my fault: I think have both ""plugin"" and ""plugins"" variables can be a bit difficult to read. Can we change the names ? Do you have suggestions ? Maybe replace ""plugin"" with ""configuration"" is enough.', 'comment_created': datetime.datetime(2022, 7, 29, 7, 48, 7, tzinfo=datetime.timezone.utc), 'commenter': 'drosetti', 'type': 'User'}, {'comment_id': 932967885, 'comment_body': 'Why index + 0 ?', 'comment_created': datetime.datetime(2022, 7, 29, 7, 54, 23, tzinfo=datetime.timezone.utc), 'commenter': 'drosetti', 'type': 'User'}, {'comment_id': 933427839, 'comment_body': 'Removing the `""` would lead to inconsistency. For instance, in a list, you\'ll have to write `[""5"", 5]` to differentiate between strings. Hence in some places, strings would have a `""`, whereas it won\'t in other places.\r\n\r\nMoreover, if we support a generic `JSON` type param in the future, we\'ll need to use the `""` for sure.\r\n\r\n> I think you should check in the backend the type (same as int).\r\n\r\nI\'m checking all types in the backend but also ensuring proper JSON formatting for all of them.', 'comment_created': datetime.datetime(2022, 7, 29, 16, 16, 29, tzinfo=datetime.timezone.utc), 'commenter': 'devmrfitz', 'type': 'User'}, {'comment_id': 933428369, 'comment_body': 'This is just included for future support', 'comment_created': datetime.datetime(2022, 7, 29, 16, 16, 54, tzinfo=datetime.timezone.utc), 'commenter': 'devmrfitz', 'type': 'User'}, {'comment_id': 933430082, 'comment_body': ""It's needed to prevent `react/no-array-index-key`. That lint rule is irrelevant here as every entry is indeed uniquely identified by the index"", 'comment_created': datetime.datetime(2022, 7, 29, 16, 18, 15, tzinfo=datetime.timezone.utc), 'commenter': 'devmrfitz', 'type': 'User'}, {'comment_id': 933431361, 'comment_body': ""If we replace `plugin` with `configuration`, we'll end up having a `configurations` and a `configuration`."", 'comment_created': datetime.datetime(2022, 7, 29, 16, 19, 38, tzinfo=datetime.timezone.utc), 'commenter': 'devmrfitz', 'type': 'User'}, {'comment_id': 934318780, 'comment_body': 'That\'s true, but I think is better `configuration` for these two reasons:\r\n\r\n* in fact `configurations` is a list and `plugin` is an element of the list, so it makes more sense to be `configuration`.\r\n* In the other part of the code we have something like:\r\n  ```\r\n  if (\r\n    plugin.plugin_name &&\r\n    plugins[plugin.plugin_name]\r\n  )\r\n    attributeList = Object.keys(\r\n      plugins[plugin.plugin_name].params\r\n    );\r\n  ```\r\n  I think is harder to read because the two variables has only a ""s"" of difference', 'comment_created': datetime.datetime(2022, 8, 1, 9, 21, 30, tzinfo=datetime.timezone.utc), 'commenter': 'drosetti', 'type': 'User'}, {'comment_id': 934327794, 'comment_body': '@drosetti Done', 'comment_created': datetime.datetime(2022, 8, 1, 9, 29, 49, tzinfo=datetime.timezone.utc), 'commenter': 'devmrfitz', 'type': 'User'}]","[{'commit_sha': '6414828e6a307418cc1689d9ce9e7b7aadba8b38', 'committer_username': 'devmrfitz', 'committer_name': 'Aditya Pratap Singh', 'committer_email': 'adityapratapsingh51@gmail.com', 'commit_date': datetime.datetime(2019, 12, 1, 5, 14, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'da2c8be96598319e3d338c7f563fdaa89d730e85', 'committer_username': 'devmrfitz', 'committer_name': 'Aditya Pratap Singh', 'committer_email': 'adityapratapsingh51@gmail.com', 'commit_date': datetime.datetime(2019, 12, 1, 5, 14, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f9033988a2cc1f34aa699ce1052766205f3c3c85', 'committer_username': 'devmrfitz', 'committer_name': 'Aditya Pratap Singh', 'committer_email': 'adityapratapsingh51@gmail.com', 'commit_date': datetime.datetime(2019, 12, 1, 5, 14, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '878083ea3beb797127d0f0341d7fdde635688074', 'committer_username': 'devmrfitz', 'committer_name': 'Aditya Pratap Singh', 'committer_email': 'adityapratapsingh51@gmail.com', 'commit_date': datetime.datetime(2019, 12, 1, 5, 14, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '18a19b0c039947e8567a56dca9293bd01911ff6e', 'committer_username': 'devmrfitz', 'committer_name': 'Aditya Pratap Singh', 'committer_email': 'adityapratapsingh51@gmail.com', 'commit_date': datetime.datetime(2019, 12, 1, 5, 14, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ae388dcdfb771826124f5ec57a3280fd4be39b2b', 'committer_username': 'devmrfitz', 'committer_name': 'Aditya Pratap Singh', 'committer_email': 'adityapratapsingh51@gmail.com', 'commit_date': datetime.datetime(2019, 12, 1, 5, 14, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '514010387f47af406c536d2713c8c1f2b28d1a74', 'committer_username': 'devmrfitz', 'committer_name': 'Aditya Pratap Singh', 'committer_email': 'adityapratapsingh51@gmail.com', 'commit_date': datetime.datetime(2019, 12, 1, 5, 14, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c8664928a8eb6835fe5c34b7a755664d1d833196', 'committer_username': 'devmrfitz', 'committer_name': 'Aditya Pratap Singh', 'committer_email': 'adityapratapsingh51@gmail.com', 'commit_date': datetime.datetime(2019, 12, 1, 5, 14, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd31caf6737abb2be1046391cc56a3db123392ec2', 'committer_username': 'devmrfitz', 'committer_name': 'Aditya Pratap Singh', 'committer_email': 'adityapratapsingh51@gmail.com', 'commit_date': datetime.datetime(2019, 12, 1, 5, 14, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '22fa03bfc58a7a14193bd17d16c924765c78b144', 'committer_username': 'devmrfitz', 'committer_name': 'Aditya Pratap Singh', 'committer_email': 'adityapratapsingh51@gmail.com', 'commit_date': datetime.datetime(2019, 12, 1, 5, 14, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1825268650fedfef628b664e606fe3dff0817d32', 'committer_username': 'devmrfitz', 'committer_name': 'Aditya Pratap Singh', 'committer_email': 'adityapratapsingh51@gmail.com', 'commit_date': datetime.datetime(2019, 12, 1, 5, 14, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6167152d4b0ef30203a37d93b441e28ca81b36de', 'committer_username': 'devmrfitz', 'committer_name': 'Aditya Pratap Singh', 'committer_email': 'adityapratapsingh51@gmail.com', 'commit_date': datetime.datetime(2019, 12, 1, 5, 14, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0c0cc5233aa9aa27c27370f717a53707f7f19938', 'committer_username': 'devmrfitz', 'committer_name': 'Aditya Pratap Singh', 'committer_email': 'adityapratapsingh51@gmail.com', 'commit_date': datetime.datetime(2019, 12, 1, 5, 14, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '253387244744c56f5d00edf7a94e2b552823310f', 'committer_username': 'devmrfitz', 'committer_name': 'Aditya Pratap Singh', 'committer_email': 'adityapratapsingh51@gmail.com', 'commit_date': datetime.datetime(2019, 12, 1, 5, 14, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '76393817db3bf3fee4a46bc37ef419a205bce727', 'committer_username': 'devmrfitz', 'committer_name': 'Aditya Pratap Singh', 'committer_email': 'adityapratapsingh51@gmail.com', 'commit_date': datetime.datetime(2019, 12, 1, 5, 14, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '20a6b012cfe16a7494cc4597d24c27b6ef3af5ad', 'committer_username': 'devmrfitz', 'committer_name': 'Aditya Pratap Singh', 'committer_email': 'adityapratapsingh51@gmail.com', 'commit_date': datetime.datetime(2019, 12, 1, 5, 14, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '636f8a5ceb2efdb829531eea7579f51e29ade7d4', 'committer_username': 'devmrfitz', 'committer_name': 'Aditya Pratap Singh', 'committer_email': 'adityapratapsingh51@gmail.com', 'commit_date': datetime.datetime(2019, 12, 1, 5, 14, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5d296bc11220aeda43c9b4eabda66ca104a81363', 'committer_username': 'devmrfitz', 'committer_name': 'Aditya Pratap Singh', 'committer_email': 'adityapratapsingh51@gmail.com', 'commit_date': datetime.datetime(2019, 12, 1, 5, 14, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cfb8ce5405a03a16df0fe22ff07db6f8cdfa7f1d', 'committer_username': 'devmrfitz', 'committer_name': 'Aditya Pratap Singh', 'committer_email': 'adityapratapsingh51@gmail.com', 'commit_date': datetime.datetime(2019, 12, 1, 5, 14, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '433db6ea0cebd462636f6acee2b7f89226295941', 'committer_username': 'devmrfitz', 'committer_name': 'Aditya Pratap Singh', 'committer_email': 'adityapratapsingh51@gmail.com', 'commit_date': datetime.datetime(2019, 12, 1, 5, 14, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c07e46e807b8fc9fc2f2ade0c7e518746d0d52a9', 'committer_username': 'devmrfitz', 'committer_name': 'Aditya Pratap Singh', 'committer_email': 'adityapratapsingh51@gmail.com', 'commit_date': datetime.datetime(2019, 12, 1, 5, 14, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6bd2e40b0d0f0e4046228062266ed496cdaf8298', 'committer_username': 'devmrfitz', 'committer_name': 'Aditya Pratap Singh', 'committer_email': 'adityapratapsingh51@gmail.com', 'commit_date': datetime.datetime(2019, 12, 1, 5, 14, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6991f70449285f046b6a172a349723a785aaa090', 'committer_username': 'devmrfitz', 'committer_name': 'Aditya Pratap Singh', 'committer_email': 'adityapratapsingh51@gmail.com', 'commit_date': datetime.datetime(2019, 12, 1, 5, 14, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '34aa47ba57fd6a9c7114a5776d920191cdaefc1b', 'committer_username': 'devmrfitz', 'committer_name': 'Aditya Pratap Singh', 'committer_email': 'adityapratapsingh51@gmail.com', 'commit_date': datetime.datetime(2019, 12, 1, 5, 14, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9e762956b0895a6eca95c1592d5d66047c63feb3', 'committer_username': 'devmrfitz', 'committer_name': 'Aditya Pratap Singh', 'committer_email': 'adityapratapsingh51@gmail.com', 'commit_date': datetime.datetime(2019, 12, 1, 5, 14, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1986dc49e290fe663aeb9791111a5255c6c62089', 'committer_username': 'devmrfitz', 'committer_name': 'Aditya Pratap Singh', 'committer_email': 'adityapratapsingh51@gmail.com', 'commit_date': datetime.datetime(2019, 12, 1, 5, 14, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b5c5a3a7faebe8a3a4a9bc152e35f96be381b4ff', 'committer_username': 'devmrfitz', 'committer_name': 'Aditya Pratap Singh', 'committer_email': 'adityapratapsingh51@gmail.com', 'commit_date': datetime.datetime(2019, 12, 1, 5, 14, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '40babcf08141a6566a5f7911237d72d0ebb5f3d1', 'committer_username': 'devmrfitz', 'committer_name': 'Aditya Pratap Singh', 'committer_email': 'adityapratapsingh51@gmail.com', 'commit_date': datetime.datetime(2019, 12, 1, 5, 14, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1b59e715319b9b7d9150cf0d4b88a8d2b72f6df0', 'committer_username': 'devmrfitz', 'committer_name': 'Aditya Pratap Singh', 'committer_email': 'adityapratapsingh51@gmail.com', 'commit_date': datetime.datetime(2019, 12, 1, 5, 14, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b1113b1ae13d22a4df1150d392c826246d8c7593', 'committer_username': 'devmrfitz', 'committer_name': 'Aditya Pratap Singh', 'committer_email': 'adityapratapsingh51@gmail.com', 'commit_date': datetime.datetime(2019, 12, 1, 5, 14, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ef632defc1ec53c0705c5d614777c572ca941dfd', 'committer_username': 'devmrfitz', 'committer_name': 'Aditya Pratap Singh', 'committer_email': 'adityapratapsingh51@gmail.com', 'commit_date': datetime.datetime(2019, 12, 1, 5, 14, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5b042ef0dfb81d9fbe2312872bbc4057d953f4eb', 'committer_username': 'devmrfitz', 'committer_name': 'Aditya Pratap Singh', 'committer_email': 'adityapratapsingh51@gmail.com', 'commit_date': datetime.datetime(2019, 12, 1, 5, 14, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e54e4f191d17fe87eca117e422193e25b9678438', 'committer_username': 'devmrfitz', 'committer_name': 'Aditya Pratap Singh', 'committer_email': 'adityapratapsingh51@gmail.com', 'commit_date': datetime.datetime(2019, 12, 1, 5, 14, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '25fc4e54bef56b14fbec84b86477b6b735c18de5', 'committer_username': 'devmrfitz', 'committer_name': 'Aditya Pratap Singh', 'committer_email': 'adityapratapsingh51@gmail.com', 'commit_date': datetime.datetime(2019, 12, 1, 5, 14, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1e202817c620f14e7e4def8a89b625ecacb1861d', 'committer_username': 'devmrfitz', 'committer_name': 'Aditya Pratap Singh', 'committer_email': 'adityapratapsingh51@gmail.com', 'commit_date': datetime.datetime(2019, 12, 1, 5, 14, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ac8ec376004d5878abc64d2e46a397b43ce7c1bc', 'committer_username': 'devmrfitz', 'committer_name': 'Aditya Pratap Singh', 'committer_email': 'adityapratapsingh51@gmail.com', 'commit_date': datetime.datetime(2019, 12, 1, 5, 14, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '19ba3bdfce6d3ad3ae71ae4f30a26e3d0f7dd582', 'committer_username': 'devmrfitz', 'committer_name': 'Aditya Pratap Singh', 'committer_email': 'adityapratapsingh51@gmail.com', 'commit_date': datetime.datetime(2019, 12, 1, 5, 14, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '39863c08865249fcca3991e32b3da7700f554e6f', 'committer_username': 'devmrfitz', 'committer_name': 'Aditya Pratap Singh', 'committer_email': 'adityapratapsingh51@gmail.com', 'commit_date': datetime.datetime(2019, 12, 1, 5, 14, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b95728f25f0230633c78ad2e5463e4d3dbf727ac', 'committer_username': 'devmrfitz', 'committer_name': 'Aditya Pratap Singh', 'committer_email': 'adityapratapsingh51@gmail.com', 'commit_date': datetime.datetime(2019, 12, 1, 5, 14, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8ba107e1feab20b88c32d955fb48c5fe3aa15775', 'committer_username': 'devmrfitz', 'committer_name': 'Aditya Pratap Singh', 'committer_email': 'adityapratapsingh51@gmail.com', 'commit_date': datetime.datetime(2019, 12, 1, 5, 14, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2b3f4be8fdd223891d629c4ff2d455a0db29f81b', 'committer_username': 'devmrfitz', 'committer_name': 'Aditya Pratap Singh', 'committer_email': 'adityapratapsingh51@gmail.com', 'commit_date': datetime.datetime(2019, 12, 1, 5, 14, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '65382137471d5ab034ff9f69e06aefa3151a82e4', 'committer_username': 'devmrfitz', 'committer_name': 'Aditya Pratap Singh', 'committer_email': 'adityapratapsingh51@gmail.com', 'commit_date': datetime.datetime(2019, 12, 1, 5, 14, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e431bfa18c4a64bb19fc7c95a9879323bec8ae6b', 'committer_username': 'devmrfitz', 'committer_name': 'Aditya Pratap Singh', 'committer_email': 'adityapratapsingh51@gmail.com', 'commit_date': datetime.datetime(2019, 12, 1, 5, 14, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2699215d92bc6ceb772e417aa717e0f96b976882', 'committer_username': 'devmrfitz', 'committer_name': 'Aditya Pratap Singh', 'committer_email': 'adityapratapsingh51@gmail.com', 'commit_date': datetime.datetime(2019, 12, 1, 5, 14, 9, tzinfo=datetime.timezone.utc)}]",Aditya Pratap Singh,58381523,adityapratapsingh51@gmail.com,User,,58,,22,52
1005910044,Extends key (closes #752),"# Description

Parsing of `extends` in plugin configuration

## Related issues
#752 

## Type of change

Please delete options that are not relevant.

- [ ] Bug fix (non-breaking change which fixes an issue).
- [X] New feature (non-breaking change which adds functionality).
- [ ] Breaking change (fix or feature that would cause existing functionality to not work as expected).

# Checklist

- [x] I have read and understood the rules about [how to Contribute](https://intelowl.readthedocs.io/en/latest/Contribute.html) to this project
- [x] The pull request is for the branch `develop`
- [ ] A new analyzer or connector was added, in which case:
    - [ ] [Usage](https://github.com/intelowlproject/IntelOwl/blob/master/docs/source/Usage.md) file was updated.
    - [ ] [Advanced-Usage](./Advanced-Usage.md) was updated (in case the analyzer/connector provides additional optional configuration).
    - [ ] Secrets were added in [env_file_app_template](https://github.com/intelowlproject/IntelOwl/blob/master/docker/env_file_app_template), [env_file_app_ci](https://github.com/certego/IntelOwl/blob/master/docker/env_file_app_ci) and in the [Installation](./Installation.md) docs, if necessary.
    - [ ] If the analyzer/connector requires mocked testing, `_monkeypatch()` was used in its class to apply the necessary decorators.
    - [ ] If a File analyzer was added, its name was explicitly defined in [test_file_scripts.py](https://github.com/intelowlproject/IntelOwl/blob/master/tests/analyzers_manager/test_file_scripts.py) (not required for Observable Analyzers).
- [ ] If external libraries/packages with restrictive licenses were used, they were added in the [Legal Notice](https://github.com/certego/IntelOwl/blob/master/.github/legal_notice.md) section.
- [x] The tests gave 0 errors.
- [x] Linters (`Black`, `Flake`, `Isort`) gave 0 errors. If you have correctly installed [pre-commit](https://intelowl.readthedocs.io/en/latest/Contribute.html#how-to-start-setup-project-and-development-instance), it does these checks and adjustments on your behalf.
- [x] The commits were squashed into a single one (optional, they will be squashed anyway by the maintainer)
- [ ] If changes were made to an existing model/serializer/view, the docs were updated and regenerated (check `CONTRIBUTE.md`).
 
",True,1119,https://api.github.com/repos/intelowlproject/IntelOwl/pulls/1119,https://github.com/intelowlproject/IntelOwl/pull/1119,closed,139,0,2,5,17,18,0,0,[],2022-07-22 15:20:23+00:00,2022-07-27 10:47:14+00:00,415611.0,"4 days, 19:26:51","[{'comment_id': 927766616, 'comment_body': 'is this loop needed here? I think you could just call the function with `config_dict` as a single param and then do the loop inside the function', 'comment_created': datetime.datetime(2022, 7, 22, 15, 30, 45, tzinfo=datetime.timezone.utc), 'commenter': 'mlodic', 'type': 'User'}, {'comment_id': 927784478, 'comment_body': ""shouldn't we add this as an optional attribute in the serializer?"", 'comment_created': datetime.datetime(2022, 7, 22, 15, 47, 32, tzinfo=datetime.timezone.utc), 'commenter': 'mlodic', 'type': 'User'}, {'comment_id': 927797121, 'comment_body': 'Then I would have to create another function as the loop itself needs to call a function. For reference, this is just like Depth-First Traversal of a directed graph. The loop ensures that all components of the graph are traversed.', 'comment_created': datetime.datetime(2022, 7, 22, 16, 2, 11, tzinfo=datetime.timezone.utc), 'commenter': 'devmrfitz', 'type': 'User'}, {'comment_id': 927799442, 'comment_body': 'done', 'comment_created': datetime.datetime(2022, 7, 22, 16, 5, 4, tzinfo=datetime.timezone.utc), 'commenter': 'devmrfitz', 'type': 'User'}, {'comment_id': 927807126, 'comment_body': 'thanks for clarification, that makes sense', 'comment_created': datetime.datetime(2022, 7, 22, 16, 14, 53, tzinfo=datetime.timezone.utc), 'commenter': 'mlodic', 'type': 'User'}, {'comment_id': 928896661, 'comment_body': 'Fan of recursion, but not a fan of modifying inputs. I would have suggest that you take the input, deepcopy it and return the new dict as output. Then, where you can write  \r\n```python3\r\n        for key, plugin in config_dict.items():\r\n            config_dict[key] = cls._complete_config(config_dict, plugin, set())\r\n```\r\nNow, i see that this is technically slower, because you are making _another_ copy of the dictionary, but Imho the readability/maintainability > 0.2% increased speed. ', 'comment_created': datetime.datetime(2022, 7, 25, 13, 39, 21, tzinfo=datetime.timezone.utc), 'commenter': '0ssigeno', 'type': 'User'}, {'comment_id': 928941719, 'comment_body': 'Does it look better now?', 'comment_created': datetime.datetime(2022, 7, 25, 14, 19, 44, tzinfo=datetime.timezone.utc), 'commenter': 'devmrfitz', 'type': 'User'}, {'comment_id': 928974469, 'comment_body': 'This is a smart way to mock the function, but I prefer the use of the unittest library. You can use the `patch` decorator to mock the `_read_config` return.', 'comment_created': datetime.datetime(2022, 7, 25, 14, 48, 27, tzinfo=datetime.timezone.utc), 'commenter': 'drosetti', 'type': 'User'}, {'comment_id': 928983999, 'comment_body': 'With the mock of `_read_config` you should be able to compare via assertDictEqual the return of the function and the expected dict.\r\n\r\nIn the mock there is the dict with the ""extends"" keyword and in the assertDictEquals there is the comparison between the return of the function to test and the dict with the replacement of ""extends"" with the data', 'comment_created': datetime.datetime(2022, 7, 25, 14, 56, 57, tzinfo=datetime.timezone.utc), 'commenter': 'drosetti', 'type': 'User'}, {'comment_id': 929119438, 'comment_body': ""@drosetti If I mock only `_read_config` and not `_md5_config_file`, it will prevent `read_and_verify_config` from getting executed multiple times as, due to the actual file not changing, the md5 won't change and hence function won't get re-called"", 'comment_created': datetime.datetime(2022, 7, 25, 17, 15, 46, tzinfo=datetime.timezone.utc), 'commenter': 'devmrfitz', 'type': 'User'}, {'comment_id': 929143264, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 7, 25, 17, 44, 41, tzinfo=datetime.timezone.utc), 'commenter': 'devmrfitz', 'type': 'User'}, {'comment_id': 929635638, 'comment_body': 'I suggest you to use the patch decorator in this way: `@patch(""""api_app.core.serializers.AbstractConfigSerializer._md5_config_file"""", MagicMock(return_value={""Shodan_Honeyscore"": ...})` \r\nThis replaces `mock_read_config.return_value = sample_analyzer_config` line.\r\nThe mock works in both ways, but I prefer the one I suggested because the data you return in the mock are nearer the line where you specify the function you want to mock. In this case the test function is not very long, but with different tests, it could be hard to find what the mock return.', 'comment_created': datetime.datetime(2022, 7, 26, 7, 47, 31, tzinfo=datetime.timezone.utc), 'commenter': 'drosetti', 'type': 'User'}, {'comment_id': 929656462, 'comment_body': 'In the tests is better to write verbose code, in this way you can understand quickly the test values or expected results. I suggest to replace computation like this with the dict.', 'comment_created': datetime.datetime(2022, 7, 26, 8, 9, 20, tzinfo=datetime.timezone.utc), 'commenter': 'drosetti', 'type': 'User'}, {'comment_id': 929660115, 'comment_body': 'The mock of _read_config (mock_read_config) should return the dict with the `extends` keyword, because the logic of replacement of the `extends` field with the ""parent"" analyzer\'s fields is done by your function (`_complete_config`) called inside `read_and_verify_config` after `_read_config`.\r\n\r\nWith `pre_parsed_sample_config` you don\'t test the logic, because the data are in the converted format in the mock of the file.', 'comment_created': datetime.datetime(2022, 7, 26, 8, 12, 54, tzinfo=datetime.timezone.utc), 'commenter': 'drosetti', 'type': 'User'}, {'comment_id': 929795361, 'comment_body': ""If I specify `mock_read_config.return_value = sample_analyzer_config` inline, it makes us believe that `sample_analyzer_config` is the default return value of the mock. However, the mock is called twice and returns a different value, `pre_parsed_sample_config` (line 69) the second time. Hence, we'll be using two different ways of specifying return value, leading to confusion."", 'comment_created': datetime.datetime(2022, 7, 26, 10, 26, 56, tzinfo=datetime.timezone.utc), 'commenter': 'devmrfitz', 'type': 'User'}, {'comment_id': 929805867, 'comment_body': 'Let\'s say we have 2 configs: \r\n```\r\nA: {A.config},\r\nB: {""extends"": A, ...(B.config)}\r\n```\r\nand \r\n```\r\nA: {A.config},\r\nB: {...(A.config), ...(B.config)}\r\n```\r\n.\r\nThe goal of this PR is to ensure that these two configs are interpreted in the same manner. That\'s what I\'m testing using `sample_analyzer_config` and `pre_parsed_sample_config`.', 'comment_created': datetime.datetime(2022, 7, 26, 10, 38, 22, tzinfo=datetime.timezone.utc), 'commenter': 'devmrfitz', 'type': 'User'}, {'comment_id': 929806257, 'comment_body': '@drosetti ', 'comment_created': datetime.datetime(2022, 7, 26, 10, 38, 48, tzinfo=datetime.timezone.utc), 'commenter': 'devmrfitz', 'type': 'User'}, {'comment_id': 929807425, 'comment_body': ""We just need to ensure that the two calls return different md5sums, so the caching doesn't get triggered. That's why I've used this. Does that sound good?"", 'comment_created': datetime.datetime(2022, 7, 26, 10, 40, 13, tzinfo=datetime.timezone.utc), 'commenter': 'devmrfitz', 'type': 'User'}]","[{'commit_sha': '07aeb49031cb2e6e7d2940bc41a56fee19fcebd4', 'committer_username': 'devmrfitz', 'committer_name': 'Aditya Pratap Singh', 'committer_email': 'adityapratapsingh51@gmail.com', 'commit_date': datetime.datetime(2019, 12, 1, 5, 14, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '62770a2f62ab5424813cf8d5175b1c6b3357503a', 'committer_username': 'devmrfitz', 'committer_name': 'Aditya Pratap Singh', 'committer_email': 'adityapratapsingh51@gmail.com', 'commit_date': datetime.datetime(2019, 12, 1, 5, 14, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '343de0439eb51447545c0963932e5ac077659671', 'committer_username': 'devmrfitz', 'committer_name': 'Aditya Pratap Singh', 'committer_email': 'adityapratapsingh51@gmail.com', 'commit_date': datetime.datetime(2019, 12, 1, 5, 14, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6644a8d5a266635aa3ce59747244eca46a60e396', 'committer_username': 'devmrfitz', 'committer_name': 'Aditya Pratap Singh', 'committer_email': 'adityapratapsingh51@gmail.com', 'commit_date': datetime.datetime(2019, 12, 1, 5, 14, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fddc13ce8b4a033099a6099b8eee25276fdb5057', 'committer_username': 'devmrfitz', 'committer_name': 'Aditya Pratap Singh', 'committer_email': 'adityapratapsingh51@gmail.com', 'commit_date': datetime.datetime(2019, 12, 1, 5, 14, 9, tzinfo=datetime.timezone.utc)}]",Aditya Pratap Singh,58381523,adityapratapsingh51@gmail.com,User,,58,,22,52
1013457959,Google OAuth (towards #121),"# Description

Added Google OAuth

## Related issues
#121 
## Type of change

Please delete options that are not relevant.

- [ ] Bug fix (non-breaking change which fixes an issue).
- [x] New feature (non-breaking change which adds functionality).
- [ ] Breaking change (fix or feature that would cause existing functionality to not work as expected).

# Checklist

- [ ] I have read and understood the rules about [how to Contribute](https://intelowl.readthedocs.io/en/latest/Contribute.html) to this project
- [ ] The pull request is for the branch `develop`
- [ ] A new analyzer or connector was added, in which case:
    - [ ] [Usage](https://github.com/intelowlproject/IntelOwl/blob/master/docs/source/Usage.md) file was updated.
    - [ ] [Advanced-Usage](./Advanced-Usage.md) was updated (in case the analyzer/connector provides additional optional configuration).
    - [ ] Secrets were added in [env_file_app_template](https://github.com/intelowlproject/IntelOwl/blob/master/docker/env_file_app_template), [env_file_app_ci](https://github.com/certego/IntelOwl/blob/master/docker/env_file_app_ci) and in the [Installation](./Installation.md) docs, if necessary.
    - [ ] If the analyzer/connector requires mocked testing, `_monkeypatch()` was used in its class to apply the necessary decorators.
    - [ ] If a File analyzer was added, its name was explicitly defined in [test_file_scripts.py](https://github.com/intelowlproject/IntelOwl/blob/master/tests/analyzers_manager/test_file_scripts.py) (not required for Observable Analyzers).
- [x] If external libraries/packages with restrictive licenses were used, they were added in the [Legal Notice](https://github.com/certego/IntelOwl/blob/master/.github/legal_notice.md) section.
- [ ] The tests gave 0 errors.
- [ ] Linters (`Black`, `Flake`, `Isort`) gave 0 errors. If you have correctly installed [pre-commit](https://intelowl.readthedocs.io/en/latest/Contribute.html#how-to-start-setup-project-and-development-instance), it does these checks and adjustments on your behalf.
- [ ] The commits were squashed into a single one (optional, they will be squashed anyway by the maintainer)
- [ ] If changes were made to an existing model/serializer/view, the docs were updated and regenerated (check `CONTRIBUTE.md`).
  
### Important Rules
- If your changes decrease the overall tests coverage (you will know after the Codecov CI job is done), you should add the required tests to fix the problem
- Everytime you make changes to the PR and you think the work is done, you should explicitly ask for a review

# Real World Example

Please delete if the PR is for bug fixing.
Otherwise, please provide the resulting raw JSON of a finished analysis (and, if you like, a screenshot of the results). This is to allow the maintainers to understand how the analyzer works.
",True,1129,https://api.github.com/repos/intelowlproject/IntelOwl/pulls/1129,https://github.com/intelowlproject/IntelOwl/pull/1129,closed,285,74,24,15,30,12,0,0,[],2022-08-01 07:28:45+00:00,2022-08-09 06:45:33+00:00,688608.0,"7 days, 23:16:48","[{'comment_id': 934234563, 'comment_body': '## Information exposure through an exception\n\n[Error information](1) may be exposed to an external user\n\n[Show more details](https://github.com/intelowlproject/IntelOwl/security/code-scanning/16)', 'comment_created': datetime.datetime(2022, 8, 1, 7, 49, 35, tzinfo=datetime.timezone.utc), 'commenter': 'github-advanced-security[bot]', 'type': 'Bot'}, {'comment_id': 934309582, 'comment_body': '@eshaan7 can we actually remove this without having any issue?', 'comment_created': datetime.datetime(2022, 8, 1, 9, 12, 17, tzinfo=datetime.timezone.utc), 'commenter': '0ssigeno', 'type': 'User'}, {'comment_id': 934311143, 'comment_body': 'Can we move the radius/ldap in this file too? So we have all the auth together', 'comment_created': datetime.datetime(2022, 8, 1, 9, 13, 46, tzinfo=datetime.timezone.utc), 'commenter': '0ssigeno', 'type': 'User'}, {'comment_id': 934318242, 'comment_body': 'I have sent a message on Slack regarding this as well', 'comment_created': datetime.datetime(2022, 8, 1, 9, 21, 3, tzinfo=datetime.timezone.utc), 'commenter': 'devmrfitz', 'type': 'User'}, {'comment_id': 934324093, 'comment_body': 'Just adding another pointer :D', 'comment_created': datetime.datetime(2022, 8, 1, 9, 26, 51, tzinfo=datetime.timezone.utc), 'commenter': '0ssigeno', 'type': 'User'}, {'comment_id': 934331284, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 8, 1, 9, 33, 33, tzinfo=datetime.timezone.utc), 'commenter': 'devmrfitz', 'type': 'User'}, {'comment_id': 934339415, 'comment_body': ""Can we have an environment variable to enable this? I don't think that we should enable it by default"", 'comment_created': datetime.datetime(2022, 8, 1, 9, 42, 51, tzinfo=datetime.timezone.utc), 'commenter': '0ssigeno', 'type': 'User'}, {'comment_id': 934340954, 'comment_body': ""Makes sense. What would be better, something to enable/disable all alternative authentications or individual controls (one for let's say Google OAuth, another for Github OAuth, etc)?"", 'comment_created': datetime.datetime(2022, 8, 1, 9, 44, 36, tzinfo=datetime.timezone.utc), 'commenter': 'devmrfitz', 'type': 'User'}, {'comment_id': 935728441, 'comment_body': '@0ssigeno ', 'comment_created': datetime.datetime(2022, 8, 2, 15, 19, 53, tzinfo=datetime.timezone.utc), 'commenter': 'devmrfitz', 'type': 'User'}, {'comment_id': 936474214, 'comment_body': 'I think individual controls is a better solution, it will require more env vars, but it will be more accurate ', 'comment_created': datetime.datetime(2022, 8, 3, 9, 58, 30, tzinfo=datetime.timezone.utc), 'commenter': 'drosetti', 'type': 'User'}, {'comment_id': 936688566, 'comment_body': 'We could add also the user deletion in tearDownClass method', 'comment_created': datetime.datetime(2022, 8, 3, 13, 49, 19, tzinfo=datetime.timezone.utc), 'commenter': 'drosetti', 'type': 'User'}, {'comment_id': 939499264, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 8, 6, 7, 57, 44, tzinfo=datetime.timezone.utc), 'commenter': 'devmrfitz', 'type': 'User'}]","[{'commit_sha': '98a9cb6c52a2bb13e6ebd9f71186833a849706ba', 'committer_username': 'devmrfitz', 'committer_name': 'Aditya Pratap Singh', 'committer_email': 'adityapratapsingh51@gmail.com', 'commit_date': datetime.datetime(2019, 12, 1, 5, 14, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '667b6844fc026c1b8c16fe159e98f322a608e6eb', 'committer_username': 'devmrfitz', 'committer_name': 'Aditya Pratap Singh', 'committer_email': 'adityapratapsingh51@gmail.com', 'commit_date': datetime.datetime(2019, 12, 1, 5, 14, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd57b5dd9d930a4b10f066eb0827636da62531298', 'committer_username': 'devmrfitz', 'committer_name': 'Aditya Pratap Singh', 'committer_email': 'adityapratapsingh51@gmail.com', 'commit_date': datetime.datetime(2019, 12, 1, 5, 14, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'da0c508e4817eb28566dda8898e15cdfebf2a8f9', 'committer_username': 'devmrfitz', 'committer_name': 'Aditya Pratap Singh', 'committer_email': 'adityapratapsingh51@gmail.com', 'commit_date': datetime.datetime(2019, 12, 1, 5, 14, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '984101507d8ff57fdbcd91f20f45ba2dfb75f229', 'committer_username': 'devmrfitz', 'committer_name': 'Aditya Pratap Singh', 'committer_email': 'adityapratapsingh51@gmail.com', 'commit_date': datetime.datetime(2019, 12, 1, 5, 14, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '97376d57aa07d3de4bb0735af4fd41009059a001', 'committer_username': 'devmrfitz', 'committer_name': 'Aditya Pratap Singh', 'committer_email': 'adityapratapsingh51@gmail.com', 'commit_date': datetime.datetime(2019, 12, 1, 5, 14, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cc4f9a56e2b2cbb3ce0bb27223eef9042e396fe5', 'committer_username': 'devmrfitz', 'committer_name': 'Aditya Pratap Singh', 'committer_email': 'adityapratapsingh51@gmail.com', 'commit_date': datetime.datetime(2019, 12, 1, 5, 14, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b5256fb8c3aeb62013f31084439a32d05f61acca', 'committer_username': 'devmrfitz', 'committer_name': 'Aditya Pratap Singh', 'committer_email': 'adityapratapsingh51@gmail.com', 'commit_date': datetime.datetime(2019, 12, 1, 5, 14, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'be41d5bfe1b6c623768cec504b431c35b85d9119', 'committer_username': 'devmrfitz', 'committer_name': 'Aditya Pratap Singh', 'committer_email': 'adityapratapsingh51@gmail.com', 'commit_date': datetime.datetime(2019, 12, 1, 5, 14, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2d30f9945e6422cbd30ad724a1ea61b8be6de3de', 'committer_username': 'devmrfitz', 'committer_name': 'Aditya Pratap Singh', 'committer_email': 'adityapratapsingh51@gmail.com', 'commit_date': datetime.datetime(2019, 12, 1, 5, 14, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '71a3969be3152e88e7e5180bb69ff52f1a8d4592', 'committer_username': 'devmrfitz', 'committer_name': 'Aditya Pratap Singh', 'committer_email': 'adityapratapsingh51@gmail.com', 'commit_date': datetime.datetime(2019, 12, 1, 5, 14, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '34ba0ec9824a5af4b393ed23465eaa00c3a1018b', 'committer_username': 'devmrfitz', 'committer_name': 'Aditya Pratap Singh', 'committer_email': 'adityapratapsingh51@gmail.com', 'commit_date': datetime.datetime(2019, 12, 1, 5, 14, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bd57b80dadbccfc7478c779eda4fc076c4a1473c', 'committer_username': 'devmrfitz', 'committer_name': 'Aditya Pratap Singh', 'committer_email': 'adityapratapsingh51@gmail.com', 'commit_date': datetime.datetime(2019, 12, 1, 5, 14, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7077f855c0ca5d20bea5b3d7eadfea1b3d9860ee', 'committer_username': 'devmrfitz', 'committer_name': 'Aditya Pratap Singh', 'committer_email': 'adityapratapsingh51@gmail.com', 'commit_date': datetime.datetime(2019, 12, 1, 5, 14, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c8cde2f6740cada50a85da72f355f578d7458c06', 'committer_username': 'devmrfitz', 'committer_name': 'Aditya Pratap Singh', 'committer_email': 'adityapratapsingh51@gmail.com', 'commit_date': datetime.datetime(2019, 12, 1, 5, 14, 9, tzinfo=datetime.timezone.utc)}]",Aditya Pratap Singh,58381523,adityapratapsingh51@gmail.com,User,,58,,22,52
1020659951,Storing plugin credentials in DB,"# Description

Storing plugin credentials in DB

## Related issues
#978 

## Type of change

Please delete options that are not relevant.

- [ ] Bug fix (non-breaking change which fixes an issue).
- [ ] New feature (non-breaking change which adds functionality).
- [X] Breaking change (fix or feature that would cause existing functionality to not work as expected).

# Checklist

- [ ] I have read and understood the rules about [how to Contribute](https://intelowl.readthedocs.io/en/latest/Contribute.html) to this project
- [ ] The pull request is for the branch `develop`
- [ ] A new analyzer or connector was added, in which case:
    - [ ] [Usage](https://github.com/intelowlproject/IntelOwl/blob/master/docs/source/Usage.md) file was updated.
    - [ ] [Advanced-Usage](./Advanced-Usage.md) was updated (in case the analyzer/connector provides additional optional configuration).
    - [ ] Secrets were added in [env_file_app_template](https://github.com/intelowlproject/IntelOwl/blob/master/docker/env_file_app_template), [env_file_app_ci](https://github.com/certego/IntelOwl/blob/master/docker/env_file_app_ci) and in the [Installation](./Installation.md) docs, if necessary.
    - [ ] If the analyzer/connector requires mocked testing, `_monkeypatch()` was used in its class to apply the necessary decorators.
    - [ ] If a File analyzer was added, its name was explicitly defined in [test_file_scripts.py](https://github.com/intelowlproject/IntelOwl/blob/master/tests/analyzers_manager/test_file_scripts.py) (not required for Observable Analyzers).
- [ ] If external libraries/packages with restrictive licenses were used, they were added in the [Legal Notice](https://github.com/certego/IntelOwl/blob/master/.github/legal_notice.md) section.
- [ ] The tests gave 0 errors.
- [ ] Linters (`Black`, `Flake`, `Isort`) gave 0 errors. If you have correctly installed [pre-commit](https://intelowl.readthedocs.io/en/latest/Contribute.html#how-to-start-setup-project-and-development-instance), it does these checks and adjustments on your behalf.
- [ ] The commits were squashed into a single one (optional, they will be squashed anyway by the maintainer)
- [ ] If changes were made to an existing model/serializer/view, the docs were updated and regenerated (check `CONTRIBUTE.md`).
  
### Important Rules
- If your changes decrease the overall tests coverage (you will know after the Codecov CI job is done), you should add the required tests to fix the problem
- Everytime you make changes to the PR and you think the work is done, you should explicitly ask for a review

# Real World Example

Please delete if the PR is for bug fixing.
Otherwise, please provide the resulting raw JSON of a finished analysis (and, if you like, a screenshot of the results). This is to allow the maintainers to understand how the analyzer works.
",False,1136,https://api.github.com/repos/intelowlproject/IntelOwl/pulls/1136,https://github.com/intelowlproject/IntelOwl/pull/1136,closed,1911,754,64,78,131,27,2,0,"[{'name': 'hacktoberfest'}, {'name': 'hacktoberfest-accepted'}]",2022-08-08 19:15:40+00:00,2022-10-12 07:13:06+00:00,5572646.0,"64 days, 11:57:26","[{'comment_id': 940983896, 'comment_body': '## Clear-text logging of sensitive information\n\n[Sensitive data (secret)](1) is logged here.\n[Sensitive data (secret)](2) is logged here.\n\n[Show more details](https://github.com/intelowlproject/IntelOwl/security/code-scanning/17)', 'comment_created': datetime.datetime(2022, 8, 9, 7, 17, 6, tzinfo=datetime.timezone.utc), 'commenter': 'github-advanced-security[bot]', 'type': 'Bot'}, {'comment_id': 942070059, 'comment_body': 'This should be `        self.__api_key = self._secrets[""api_key_name""]` if I remember correctly. If this is the case, we can remove the comment on top of that', 'comment_created': datetime.datetime(2022, 8, 10, 6, 35, 53, tzinfo=datetime.timezone.utc), 'commenter': '0ssigeno', 'type': 'User'}, {'comment_id': 942071463, 'comment_body': 'Cool!', 'comment_created': datetime.datetime(2022, 8, 10, 6, 37, 55, tzinfo=datetime.timezone.utc), 'commenter': '0ssigeno', 'type': 'User'}, {'comment_id': 942083772, 'comment_body': 'Instead of invalidate the cache ""manually"", can\'t we find a way to change the @cache_memoize allowing to automatically invalidate if the configuration changes?\r\n', 'comment_created': datetime.datetime(2022, 8, 10, 6, 54, 21, tzinfo=datetime.timezone.utc), 'commenter': '0ssigeno', 'type': 'User'}, {'comment_id': 942093377, 'comment_body': 'Yes, but the method is class, and hence may not have access to instance variables', 'comment_created': datetime.datetime(2022, 8, 10, 7, 6, 24, tzinfo=datetime.timezone.utc), 'commenter': 'devmrfitz', 'type': 'User'}, {'comment_id': 942094848, 'comment_body': 'That ""way"" would have to read the state of the entire `PluginConfiguration` table to detect a change in it, and hence an entire table traversal on every call, hence removing the very point of performing the caching.', 'comment_created': datetime.datetime(2022, 8, 10, 7, 8, 14, tzinfo=datetime.timezone.utc), 'commenter': 'devmrfitz', 'type': 'User'}, {'comment_id': 942166718, 'comment_body': 'Ah shit, 100% right. I hate that we had to use this trick here.', 'comment_created': datetime.datetime(2022, 8, 10, 8, 25, 11, tzinfo=datetime.timezone.utc), 'commenter': '0ssigeno', 'type': 'User'}, {'comment_id': 942423519, 'comment_body': 'Django also allows you to create filters over the fields. I think filters to select the ""type"" and the plugin name are useful.', 'comment_created': datetime.datetime(2022, 8, 10, 13, 2, 49, tzinfo=datetime.timezone.utc), 'commenter': 'drosetti', 'type': 'User'}, {'comment_id': 942430238, 'comment_body': 'Can we test this function ? ', 'comment_created': datetime.datetime(2022, 8, 10, 13, 9, 13, tzinfo=datetime.timezone.utc), 'commenter': 'drosetti', 'type': 'User'}, {'comment_id': 942431385, 'comment_body': 'Please add a test for this function', 'comment_created': datetime.datetime(2022, 8, 10, 13, 10, 15, tzinfo=datetime.timezone.utc), 'commenter': 'drosetti', 'type': 'User'}, {'comment_id': 942474072, 'comment_body': '## Clear-text logging of sensitive information\n\n[Sensitive data (secret)](1) is logged here.\n[Sensitive data (secret)](2) is logged here.\n\n[Show more details](https://github.com/intelowlproject/IntelOwl/security/code-scanning/18)', 'comment_created': datetime.datetime(2022, 8, 10, 13, 47, 40, tzinfo=datetime.timezone.utc), 'commenter': 'github-advanced-security[bot]', 'type': 'Bot'}, {'comment_id': 942616524, 'comment_body': '## Clear-text logging of sensitive information\n\n[Sensitive data (secret)](1) is logged here.\n[Sensitive data (secret)](2) is logged here.\n\n[Show more details](https://github.com/intelowlproject/IntelOwl/security/code-scanning/19)', 'comment_created': datetime.datetime(2022, 8, 10, 15, 46, 30, tzinfo=datetime.timezone.utc), 'commenter': 'github-advanced-security[bot]', 'type': 'Bot'}, {'comment_id': 942674942, 'comment_body': '```suggestion\n    value = models.TextField()\n```\n\n`False` is the default value Django uses for `blank`, so `blank=False` can be removed. [More](https://codereview.doctor/advice/C2002).', 'comment_created': datetime.datetime(2022, 8, 10, 16, 38, 55, tzinfo=datetime.timezone.utc), 'commenter': 'code-review-doctor[bot]', 'type': 'Bot'}, {'comment_id': 976233624, 'comment_body': 'we can remove this comment', 'comment_created': datetime.datetime(2022, 9, 21, 8, 52, 34, tzinfo=datetime.timezone.utc), 'commenter': 'mlodic', 'type': 'User'}, {'comment_id': 976248372, 'comment_body': 'I really like how you explored the usage of Signals here', 'comment_created': datetime.datetime(2022, 9, 21, 9, 1, 17, tzinfo=datetime.timezone.utc), 'commenter': 'mlodic', 'type': 'User'}, {'comment_id': 976257825, 'comment_body': ""in these new views, could you also add the @add_docs?\r\nI would also love to see a logger.info message at the start of each method. Logging is something we always forget until the moment when we need logs and we don't have them and then we cry :P"", 'comment_created': datetime.datetime(2022, 9, 21, 9, 8, 24, tzinfo=datetime.timezone.utc), 'commenter': 'mlodic', 'type': 'User'}, {'comment_id': 976258350, 'comment_body': 'docs and logger here too please', 'comment_created': datetime.datetime(2022, 9, 21, 9, 8, 52, tzinfo=datetime.timezone.utc), 'commenter': 'mlodic', 'type': 'User'}, {'comment_id': 976268574, 'comment_body': 'super cool this. The only thing not stated here is the version number where these variables start to be deprecated 🤔  but obviously you cannot know that in advance...\r\n\r\nPlus, this is also a breaking change in the end if we put in this way. 🤔  I would really like to avoid to do a 5.x release just for this change.\r\n\r\nOne cool thing would be to run this automatically in the uwsgi entrypoint _only_ if this is the first time that this is executed. How to check this? Maybe just trying to see whether there is any element in the PluginConfig table? If there is already anything, that would mean that it was already populated so we could skip that. Does it make sense to you?', 'comment_created': datetime.datetime(2022, 9, 21, 9, 17, 56, tzinfo=datetime.timezone.utc), 'commenter': 'mlodic', 'type': 'User'}, {'comment_id': 976270859, 'comment_body': 'could you add tests for the new endpoints you created here please?', 'comment_created': datetime.datetime(2022, 9, 21, 9, 20, 2, tzinfo=datetime.timezone.utc), 'commenter': 'mlodic', 'type': 'User'}, {'comment_id': 976429046, 'comment_body': 'Thanks a lot :)', 'comment_created': datetime.datetime(2022, 9, 21, 12, 14, 11, tzinfo=datetime.timezone.utc), 'commenter': 'devmrfitz', 'type': 'User'}, {'comment_id': 976451280, 'comment_body': 'what I meant is that this should be a button and not an checkbox because checkboxes usually do not contain actions while buttons do and in this case if you click you change a state so it should be a button. Does it make sense now?', 'comment_created': datetime.datetime(2022, 9, 21, 12, 36, 47, tzinfo=datetime.timezone.utc), 'commenter': 'mlodic', 'type': 'User'}, {'comment_id': 976814349, 'comment_body': 'Done :+1: ', 'comment_created': datetime.datetime(2022, 9, 21, 17, 34, 56, tzinfo=datetime.timezone.utc), 'commenter': 'devmrfitz', 'type': 'User'}, {'comment_id': 976897561, 'comment_body': ""I've made them in `tests/api_app/test_org_plugin_state.py`. Should I copy them here?"", 'comment_created': datetime.datetime(2022, 9, 21, 19, 10, 4, tzinfo=datetime.timezone.utc), 'commenter': 'devmrfitz', 'type': 'User'}, {'comment_id': 977255116, 'comment_body': '## Clear-text logging of sensitive information\n\n[Sensitive data (secret)](1) is logged here.\n[Sensitive data (secret)](2) is logged here.\n\n[Show more details](https://github.com/intelowlproject/IntelOwl/security/code-scanning/21)', 'comment_created': datetime.datetime(2022, 9, 22, 6, 36, 41, tzinfo=datetime.timezone.utc), 'commenter': 'github-advanced-security[bot]', 'type': 'Bot'}, {'comment_id': 977295582, 'comment_body': ""ah no no it's better like you did. I did not notice."", 'comment_created': datetime.datetime(2022, 9, 22, 7, 28, 29, tzinfo=datetime.timezone.utc), 'commenter': 'mlodic', 'type': 'User'}, {'comment_id': 977312285, 'comment_body': ""I think this won't work in a clean environment because the superuser still needs to be created manually right now.\r\n\r\nOn the other hand, in a clean environment the user won't need to migrate anything so I think that the flow makes sense like it is. Am I right?\r\n\r\n"", 'comment_created': datetime.datetime(2022, 9, 22, 7, 47, 1, tzinfo=datetime.timezone.utc), 'commenter': 'mlodic', 'type': 'User'}, {'comment_id': 977389818, 'comment_body': 'Yup. I assumed any working environment would always have a superuser.', 'comment_created': datetime.datetime(2022, 9, 22, 8, 58, tzinfo=datetime.timezone.utc), 'commenter': 'devmrfitz', 'type': 'User'}]","[{'commit_sha': 'd0bcc8181aceb386c01e9f5ef14041ecd13e7b02', 'committer_username': 'devmrfitz', 'committer_name': 'Aditya Pratap Singh', 'committer_email': 'adityapratapsingh51@gmail.com', 'commit_date': datetime.datetime(2019, 12, 1, 5, 14, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '995b0a0e574dce0671fa6d1ed402786b9b1833a0', 'committer_username': 'devmrfitz', 'committer_name': 'Aditya Pratap Singh', 'committer_email': 'adityapratapsingh51@gmail.com', 'commit_date': datetime.datetime(2019, 12, 1, 5, 14, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '26d3e3a2f0f84932c6c42f9270b0b0240a9f4ba4', 'committer_username': 'devmrfitz', 'committer_name': 'Aditya Pratap Singh', 'committer_email': 'adityapratapsingh51@gmail.com', 'commit_date': datetime.datetime(2019, 12, 1, 5, 14, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e5808fba98216249a632a96a32c3cd9eaa801420', 'committer_username': 'devmrfitz', 'committer_name': 'Aditya Pratap Singh', 'committer_email': 'adityapratapsingh51@gmail.com', 'commit_date': datetime.datetime(2019, 12, 1, 5, 14, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '74fd4f39176219ec35aae946953ac7e2d92e5e2a', 'committer_username': 'devmrfitz', 'committer_name': 'Aditya Pratap Singh', 'committer_email': 'adityapratapsingh51@gmail.com', 'commit_date': datetime.datetime(2019, 12, 1, 5, 14, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9afcd1c64c9da6bc437d1c7b7409469d3c06a79e', 'committer_username': 'devmrfitz', 'committer_name': 'Aditya Pratap Singh', 'committer_email': 'adityapratapsingh51@gmail.com', 'commit_date': datetime.datetime(2019, 12, 1, 5, 14, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f018a4da859c05efd76c7f69d2c224474fe4395b', 'committer_username': 'devmrfitz', 'committer_name': 'Aditya Pratap Singh', 'committer_email': 'adityapratapsingh51@gmail.com', 'commit_date': datetime.datetime(2019, 12, 1, 5, 14, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'febcfcc2cc8da314f323261189c5eafc925638a7', 'committer_username': 'devmrfitz', 'committer_name': 'Aditya Pratap Singh', 'committer_email': 'adityapratapsingh51@gmail.com', 'commit_date': datetime.datetime(2019, 12, 1, 5, 14, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4579251e6d2d4b56a6545bdf3b140e0f76d107bb', 'committer_username': 'devmrfitz', 'committer_name': 'Aditya Pratap Singh', 'committer_email': 'adityapratapsingh51@gmail.com', 'commit_date': datetime.datetime(2019, 12, 1, 5, 14, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cf8644781b2ad9ea1e3c7d0438149e84dbeb3272', 'committer_username': 'devmrfitz', 'committer_name': 'Aditya Pratap Singh', 'committer_email': 'adityapratapsingh51@gmail.com', 'commit_date': datetime.datetime(2019, 12, 1, 5, 14, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a38440eaaf36f7ed7dcb647b52cd5b46ffcee61f', 'committer_username': 'devmrfitz', 'committer_name': 'Aditya Pratap Singh', 'committer_email': 'adityapratapsingh51@gmail.com', 'commit_date': datetime.datetime(2019, 12, 1, 5, 14, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b1fdad21050bfa126cb09c5625f01e86a7cf7800', 'committer_username': 'devmrfitz', 'committer_name': 'Aditya Pratap Singh', 'committer_email': 'adityapratapsingh51@gmail.com', 'commit_date': datetime.datetime(2019, 12, 1, 5, 14, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '75e0d2dd011b7c8f10b466d11094a027b1b60b8c', 'committer_username': 'devmrfitz', 'committer_name': 'Aditya Pratap Singh', 'committer_email': 'adityapratapsingh51@gmail.com', 'commit_date': datetime.datetime(2019, 12, 1, 5, 14, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '04c332808dec764f6b1365358ea6071679aab38d', 'committer_username': 'devmrfitz', 'committer_name': 'Aditya Pratap Singh', 'committer_email': 'adityapratapsingh51@gmail.com', 'commit_date': datetime.datetime(2019, 12, 1, 5, 14, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cddb15d71ff623774851c4b2b9a12624a12602a7', 'committer_username': 'devmrfitz', 'committer_name': 'Aditya Pratap Singh', 'committer_email': 'adityapratapsingh51@gmail.com', 'commit_date': datetime.datetime(2019, 12, 1, 5, 14, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd6e58efc4f5f698c01f5178ab5133bd78856edd1', 'committer_username': 'devmrfitz', 'committer_name': 'Aditya Pratap Singh', 'committer_email': 'adityapratapsingh51@gmail.com', 'commit_date': datetime.datetime(2019, 12, 1, 5, 14, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a6d668c10f02f2ebc6bd28b840d39b48591a7e57', 'committer_username': 'devmrfitz', 'committer_name': 'Aditya Pratap Singh', 'committer_email': 'adityapratapsingh51@gmail.com', 'commit_date': datetime.datetime(2019, 12, 1, 5, 14, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b96a1ae8680d4a8d348ab87f0fc26b5f96ec2901', 'committer_username': 'devmrfitz', 'committer_name': 'Aditya Pratap Singh', 'committer_email': 'adityapratapsingh51@gmail.com', 'commit_date': datetime.datetime(2019, 12, 1, 5, 14, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e8d92ae53e20a35971f66d23890baec5aee630d4', 'committer_username': 'devmrfitz', 'committer_name': 'Aditya Pratap Singh', 'committer_email': 'adityapratapsingh51@gmail.com', 'commit_date': datetime.datetime(2019, 12, 1, 5, 14, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '17332963ea3496d148f934eedc373f2b222ac2b9', 'committer_username': 'devmrfitz', 'committer_name': 'Aditya Pratap Singh', 'committer_email': 'adityapratapsingh51@gmail.com', 'commit_date': datetime.datetime(2019, 12, 1, 5, 14, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2f77875352c761e3c7ebdd19174014d5795d3c95', 'committer_username': 'devmrfitz', 'committer_name': 'Aditya Pratap Singh', 'committer_email': 'adityapratapsingh51@gmail.com', 'commit_date': datetime.datetime(2019, 12, 1, 5, 14, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a154e693b12778472b2970817a06bca5d98b641f', 'committer_username': 'devmrfitz', 'committer_name': 'Aditya Pratap Singh', 'committer_email': 'adityapratapsingh51@gmail.com', 'commit_date': datetime.datetime(2019, 12, 1, 5, 14, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5036fb2d35e790ee99993533b6383cedc7ac6595', 'committer_username': 'devmrfitz', 'committer_name': 'Aditya Pratap Singh', 'committer_email': 'adityapratapsingh51@gmail.com', 'commit_date': datetime.datetime(2019, 12, 1, 5, 14, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '69aba3d7a359077a2f62d579785805f17b191296', 'committer_username': 'devmrfitz', 'committer_name': 'Aditya Pratap Singh', 'committer_email': 'adityapratapsingh51@gmail.com', 'commit_date': datetime.datetime(2019, 12, 1, 5, 14, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ec04b86b26a4d63f2babbed816407f6451f21b27', 'committer_username': 'devmrfitz', 'committer_name': 'Aditya Pratap Singh', 'committer_email': 'adityapratapsingh51@gmail.com', 'commit_date': datetime.datetime(2019, 12, 1, 5, 14, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6cd156eb764b3fc47fabefee6fcbe2a580cc398e', 'committer_username': 'devmrfitz', 'committer_name': 'Aditya Pratap Singh', 'committer_email': 'adityapratapsingh51@gmail.com', 'commit_date': datetime.datetime(2019, 12, 1, 5, 14, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '73e29b04e158c6530b33266ab727a5b11cd36a37', 'committer_username': 'devmrfitz', 'committer_name': 'Aditya Pratap Singh', 'committer_email': 'adityapratapsingh51@gmail.com', 'commit_date': datetime.datetime(2019, 12, 1, 5, 14, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6b78cadb45ee17a83aa1795622b5a0b87666390b', 'committer_username': 'devmrfitz', 'committer_name': 'Aditya Pratap Singh', 'committer_email': 'adityapratapsingh51@gmail.com', 'commit_date': datetime.datetime(2019, 12, 1, 5, 14, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0fbbb110af3ef6518cc98e6ae4b748eab161f08b', 'committer_username': 'devmrfitz', 'committer_name': 'Aditya Pratap Singh', 'committer_email': 'adityapratapsingh51@gmail.com', 'commit_date': datetime.datetime(2019, 12, 1, 5, 14, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '23e6e43055586019d9c4e58e39ad65e7c7fd3317', 'committer_username': 'devmrfitz', 'committer_name': 'Aditya Pratap Singh', 'committer_email': 'adityapratapsingh51@gmail.com', 'commit_date': datetime.datetime(2019, 12, 1, 5, 14, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '019b720507e1f1276495360eaf1b298ea68ebdbd', 'committer_username': 'devmrfitz', 'committer_name': 'Aditya Pratap Singh', 'committer_email': 'adityapratapsingh51@gmail.com', 'commit_date': datetime.datetime(2019, 12, 1, 5, 14, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0df0ac5c5f7a8dde3d2bd73f95f95b72a208efc4', 'committer_username': 'devmrfitz', 'committer_name': 'Aditya Pratap Singh', 'committer_email': 'adityapratapsingh51@gmail.com', 'commit_date': datetime.datetime(2019, 12, 1, 5, 14, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8dab9244f17cf721754a2ee9e5d56fa924a6a111', 'committer_username': 'devmrfitz', 'committer_name': 'Aditya Pratap Singh', 'committer_email': 'adityapratapsingh51@gmail.com', 'commit_date': datetime.datetime(2019, 12, 1, 5, 14, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6804de83b5123bce706981cb96b2a51cf3f98cc7', 'committer_username': 'devmrfitz', 'committer_name': 'Aditya Pratap Singh', 'committer_email': 'adityapratapsingh51@gmail.com', 'commit_date': datetime.datetime(2019, 12, 1, 5, 14, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '226b9e6e2188a2fc8ca3bed0d4549aa63190f14b', 'committer_username': 'devmrfitz', 'committer_name': 'Aditya Pratap Singh', 'committer_email': 'adityapratapsingh51@gmail.com', 'commit_date': datetime.datetime(2019, 12, 1, 5, 14, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3d51de22bf2dfd876caef8408ce0657da4c67460', 'committer_username': 'devmrfitz', 'committer_name': 'Aditya Pratap Singh', 'committer_email': 'adityapratapsingh51@gmail.com', 'commit_date': datetime.datetime(2019, 12, 1, 5, 14, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a66969159113fe4f65e06db9d4887b2815889546', 'committer_username': 'devmrfitz', 'committer_name': 'Aditya Pratap Singh', 'committer_email': 'adityapratapsingh51@gmail.com', 'commit_date': datetime.datetime(2019, 12, 1, 5, 14, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '01238e87a26c1a2e30b16363bc743da0e33273ed', 'committer_username': 'devmrfitz', 'committer_name': 'Aditya Pratap Singh', 'committer_email': 'adityapratapsingh51@gmail.com', 'commit_date': datetime.datetime(2019, 12, 1, 5, 14, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '92255ddbc9440eb6798c9f52218158e8ee2b594b', 'committer_username': 'devmrfitz', 'committer_name': 'Aditya Pratap Singh', 'committer_email': 'adityapratapsingh51@gmail.com', 'commit_date': datetime.datetime(2019, 12, 1, 5, 14, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b6868d40ed7bee224bbfa5cd9a2b4edc7068b542', 'committer_username': 'devmrfitz', 'committer_name': 'Aditya Pratap Singh', 'committer_email': 'adityapratapsingh51@gmail.com', 'commit_date': datetime.datetime(2019, 12, 1, 5, 14, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '538b0fc4370598b82ac45a7080581afe994381d4', 'committer_username': 'devmrfitz', 'committer_name': 'Aditya Pratap Singh', 'committer_email': 'adityapratapsingh51@gmail.com', 'commit_date': datetime.datetime(2019, 12, 1, 5, 14, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '83972eec70e817aba2ac34667c18e66e73d9f0be', 'committer_username': 'devmrfitz', 'committer_name': 'Aditya Pratap Singh', 'committer_email': 'adityapratapsingh51@gmail.com', 'commit_date': datetime.datetime(2019, 12, 1, 5, 14, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f41665457be05bcd1eb53f082d8a0f175fbdff75', 'committer_username': 'devmrfitz', 'committer_name': 'Aditya Pratap Singh', 'committer_email': 'adityapratapsingh51@gmail.com', 'commit_date': datetime.datetime(2019, 12, 1, 5, 14, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bee3742b0ed4e8f9fd3dad0dad956c89c4e09ab8', 'committer_username': 'devmrfitz', 'committer_name': 'Aditya Pratap Singh', 'committer_email': 'adityapratapsingh51@gmail.com', 'commit_date': datetime.datetime(2019, 12, 1, 5, 14, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5931510f93abcd89f69bfbde87f6ed8d9be04003', 'committer_username': 'devmrfitz', 'committer_name': 'Aditya Pratap Singh', 'committer_email': 'adityapratapsingh51@gmail.com', 'commit_date': datetime.datetime(2019, 12, 1, 5, 14, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '38aa8523415d8f628a0fd2b6f394b767cf81a431', 'committer_username': 'devmrfitz', 'committer_name': 'Aditya Pratap Singh', 'committer_email': 'adityapratapsingh51@gmail.com', 'commit_date': datetime.datetime(2019, 12, 1, 5, 14, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '678f6dff50216266c00053c9c97b2ca897d63322', 'committer_username': 'devmrfitz', 'committer_name': 'Aditya Pratap Singh', 'committer_email': 'adityapratapsingh51@gmail.com', 'commit_date': datetime.datetime(2019, 12, 1, 5, 14, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a39324002da87cd7dca2ff1231d1903dbad78675', 'committer_username': 'devmrfitz', 'committer_name': 'Aditya Pratap Singh', 'committer_email': 'adityapratapsingh51@gmail.com', 'commit_date': datetime.datetime(2019, 12, 1, 5, 14, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8d6f6ada95059257beaa03efa5d8f1ee5a8247a8', 'committer_username': 'devmrfitz', 'committer_name': 'Aditya Pratap Singh', 'committer_email': 'adityapratapsingh51@gmail.com', 'commit_date': datetime.datetime(2019, 12, 1, 5, 14, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bcfc22c66b55d59eea828015633f6fc86b58e22c', 'committer_username': 'devmrfitz', 'committer_name': 'Aditya Pratap Singh', 'committer_email': 'adityapratapsingh51@gmail.com', 'commit_date': datetime.datetime(2019, 12, 1, 5, 14, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9d44de6ebf43d5a2c02d28d98326331de3698a51', 'committer_username': 'devmrfitz', 'committer_name': 'Aditya Pratap Singh', 'committer_email': 'adityapratapsingh51@gmail.com', 'commit_date': datetime.datetime(2019, 12, 1, 5, 14, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a47e94bd0f6ab7088b705c8eb4f0e899c1966f88', 'committer_username': 'devmrfitz', 'committer_name': 'Aditya Pratap Singh', 'committer_email': 'adityapratapsingh51@gmail.com', 'commit_date': datetime.datetime(2019, 12, 1, 5, 14, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f088b7223f23c531076d105b3378295213f2a3fe', 'committer_username': 'devmrfitz', 'committer_name': 'Aditya Pratap Singh', 'committer_email': 'adityapratapsingh51@gmail.com', 'commit_date': datetime.datetime(2019, 12, 1, 5, 14, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'eba62ef82ff7c48a393a7e9688e6446efac45cbb', 'committer_username': 'devmrfitz', 'committer_name': 'Aditya Pratap Singh', 'committer_email': 'adityapratapsingh51@gmail.com', 'commit_date': datetime.datetime(2019, 12, 1, 5, 14, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ed3da142da4b2c1ec6f1757ad53755aaaceb9c59', 'committer_username': 'devmrfitz', 'committer_name': 'Aditya Pratap Singh', 'committer_email': 'adityapratapsingh51@gmail.com', 'commit_date': datetime.datetime(2019, 12, 1, 5, 14, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e446f8cfde3025de88360b089e44f4ce8f04a566', 'committer_username': 'devmrfitz', 'committer_name': 'Aditya Pratap Singh', 'committer_email': 'adityapratapsingh51@gmail.com', 'commit_date': datetime.datetime(2019, 12, 1, 5, 14, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '32afd630da0cf68e0acc9e1b6190eca53e79d20d', 'committer_username': 'devmrfitz', 'committer_name': 'Aditya Pratap Singh', 'committer_email': 'adityapratapsingh51@gmail.com', 'commit_date': datetime.datetime(2019, 12, 1, 5, 14, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '61988b2083a0ee0fb1f56229c3bf55fccea042d8', 'committer_username': 'devmrfitz', 'committer_name': 'Aditya Pratap Singh', 'committer_email': 'adityapratapsingh51@gmail.com', 'commit_date': datetime.datetime(2019, 12, 1, 5, 14, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '91017c146109c43fb0b606ef77c143bb0f4a5337', 'committer_username': 'devmrfitz', 'committer_name': 'Aditya Pratap Singh', 'committer_email': 'adityapratapsingh51@gmail.com', 'commit_date': datetime.datetime(2019, 12, 1, 5, 14, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '57077a6dc62c6f3a9b744a98420f0d39e071b4b4', 'committer_username': 'devmrfitz', 'committer_name': 'Aditya Pratap Singh', 'committer_email': 'adityapratapsingh51@gmail.com', 'commit_date': datetime.datetime(2019, 12, 1, 5, 14, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '58eb9d2079b0fbadb05c202f9c8282ff942da05b', 'committer_username': 'devmrfitz', 'committer_name': 'Aditya Pratap Singh', 'committer_email': 'adityapratapsingh51@gmail.com', 'commit_date': datetime.datetime(2019, 12, 1, 5, 14, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '276e96805f995136f56c2a0af8875e677078af2c', 'committer_username': 'devmrfitz', 'committer_name': 'Aditya Pratap Singh', 'committer_email': 'adityapratapsingh51@gmail.com', 'commit_date': datetime.datetime(2019, 12, 1, 5, 14, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3cbf4fe63af73fe69b0d587c10271c2bc4596b92', 'committer_username': 'devmrfitz', 'committer_name': 'Aditya Pratap Singh', 'committer_email': 'adityapratapsingh51@gmail.com', 'commit_date': datetime.datetime(2019, 12, 1, 5, 14, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ff6e5ee68af291b003c7be10dda692e97ad2f6dd', 'committer_username': 'devmrfitz', 'committer_name': 'Aditya Pratap Singh', 'committer_email': 'adityapratapsingh51@gmail.com', 'commit_date': datetime.datetime(2019, 12, 1, 5, 14, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bd5ba3d424f03333e38a450863487137c70d3d8a', 'committer_username': 'devmrfitz', 'committer_name': 'Aditya Pratap Singh', 'committer_email': 'adityapratapsingh51@gmail.com', 'commit_date': datetime.datetime(2019, 12, 1, 5, 14, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5fb28c5ea0b6c3ace52a89132c03c48239fae8e9', 'committer_username': 'devmrfitz', 'committer_name': 'Aditya Pratap Singh', 'committer_email': 'adityapratapsingh51@gmail.com', 'commit_date': datetime.datetime(2019, 12, 1, 5, 14, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a01c11960f1e7466a166696ef7c4649cccc30e93', 'committer_username': 'devmrfitz', 'committer_name': 'Aditya Pratap Singh', 'committer_email': 'adityapratapsingh51@gmail.com', 'commit_date': datetime.datetime(2019, 12, 1, 5, 14, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5b95c8cf35b2584f1f2f1a61634f05778f0cc6f5', 'committer_username': 'devmrfitz', 'committer_name': 'Aditya Pratap Singh', 'committer_email': 'adityapratapsingh51@gmail.com', 'commit_date': datetime.datetime(2019, 12, 1, 5, 14, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a524fffc2d67cf905e5432de3b9f26b8db002463', 'committer_username': 'devmrfitz', 'committer_name': 'Aditya Pratap Singh', 'committer_email': 'adityapratapsingh51@gmail.com', 'commit_date': datetime.datetime(2019, 12, 1, 5, 14, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '891360a0214f2eaf17c13bed19ece95a959da510', 'committer_username': 'devmrfitz', 'committer_name': 'Aditya Pratap Singh', 'committer_email': 'adityapratapsingh51@gmail.com', 'commit_date': datetime.datetime(2019, 12, 1, 5, 14, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b2e39da688d54554e426c4c83c0a2b9fcb106e58', 'committer_username': 'devmrfitz', 'committer_name': 'Aditya Pratap Singh', 'committer_email': 'adityapratapsingh51@gmail.com', 'commit_date': datetime.datetime(2019, 12, 1, 5, 14, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '883ce7693669772b8fc25bcb25ab6cddc2901abe', 'committer_username': 'mlodic', 'committer_name': 'Matteo Lodi', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 1, 12, 6, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '83594779309ec27c04068c2d34b62eab3d28120d', 'committer_username': 'devmrfitz', 'committer_name': 'Aditya Pratap Singh', 'committer_email': 'adityapratapsingh51@gmail.com', 'commit_date': datetime.datetime(2019, 12, 1, 5, 14, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5953373fafaf8944c1198b34417810dc73fc2c28', 'committer_username': 'devmrfitz', 'committer_name': 'Aditya Pratap Singh', 'committer_email': 'adityapratapsingh51@gmail.com', 'commit_date': datetime.datetime(2019, 12, 1, 5, 14, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0bc1918b9fd3d45facf7e0d642c294eb2606765b', 'committer_username': 'mlodic', 'committer_name': 'Matteo Lodi', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 1, 12, 6, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '93808c8ce6705358d65a0cb4bc86fd3092a8b054', 'committer_username': 'mlodic', 'committer_name': 'Matteo Lodi', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 1, 12, 6, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f72f1d6d877086449e236277757af61faf9125b1', 'committer_username': 'mlodic', 'committer_name': 'Matteo Lodi', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 1, 12, 6, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '652ef1c7e2a72eef35292f973185cfc1cafb68a4', 'committer_username': 'devmrfitz', 'committer_name': 'Aditya Pratap Singh', 'committer_email': 'adityapratapsingh51@gmail.com', 'commit_date': datetime.datetime(2019, 12, 1, 5, 14, 9, tzinfo=datetime.timezone.utc)}]",Aditya Pratap Singh,58381523,adityapratapsingh51@gmail.com,User,,58,,22,52

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
231109256,IntelOwl,intelowlproject/IntelOwl,Python,423,3688,81,60,2443,75,59,15,"[{'id': 1084142802, 'number': 1237, 'closed': datetime.datetime(2022, 10, 12, 7, 13, 45, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 10, 12, 5, 30, 56, tzinfo=datetime.timezone.utc), 'time_taken': 6169.0, 'time_delta': '1:42:49', 'additions': 1911, 'deletions': 754, 'state': 'closed'}, {'id': 1029165071, 'number': 1150, 'closed': datetime.datetime(2022, 8, 18, 13, 44, 19, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 17, 18, 35, 14, tzinfo=datetime.timezone.utc), 'time_taken': 68945.0, 'time_delta': '19:09:05', 'additions': 122, 'deletions': 25, 'state': 'closed'}, {'id': 1020659951, 'number': 1136, 'closed': datetime.datetime(2022, 10, 12, 7, 13, 6, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 8, 19, 15, 40, tzinfo=datetime.timezone.utc), 'time_taken': 5572646.0, 'time_delta': '64 days, 11:57:26', 'additions': 1911, 'deletions': 754, 'state': 'closed'}, {'id': 1020087062, 'number': 1134, 'closed': datetime.datetime(2022, 8, 9, 7, 47, 26, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 8, 10, 11, 50, tzinfo=datetime.timezone.utc), 'time_taken': 77736.0, 'time_delta': '21:35:36', 'additions': 28, 'deletions': 14, 'state': 'closed'}, {'id': 1013457959, 'number': 1129, 'closed': datetime.datetime(2022, 8, 9, 6, 45, 33, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 1, 7, 28, 45, tzinfo=datetime.timezone.utc), 'time_taken': 688608.0, 'time_delta': '7 days, 23:16:48', 'additions': 285, 'deletions': 74, 'state': 'closed'}, {'id': 1005910044, 'number': 1119, 'closed': datetime.datetime(2022, 7, 27, 10, 47, 14, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 22, 15, 20, 23, tzinfo=datetime.timezone.utc), 'time_taken': 415611.0, 'time_delta': '4 days, 19:26:51', 'additions': 139, 'deletions': 0, 'state': 'closed'}, {'id': 994168674, 'number': 1095, 'closed': datetime.datetime(2022, 8, 1, 10, 6, 49, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 12, 11, 27, 22, tzinfo=datetime.timezone.utc), 'time_taken': 1723167.0, 'time_delta': '19 days, 22:39:27', 'additions': 1291, 'deletions': 14, 'state': 'closed'}, {'id': 985736358, 'number': 1073, 'closed': datetime.datetime(2022, 7, 8, 7, 18, 17, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 3, 14, 26, 32, tzinfo=datetime.timezone.utc), 'time_taken': 406305.0, 'time_delta': '4 days, 16:51:45', 'additions': 98, 'deletions': 4, 'state': 'closed'}, {'id': 982786539, 'number': 1056, 'closed': datetime.datetime(2022, 6, 29, 15, 56, 46, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 6, 29, 15, 56, 18, tzinfo=datetime.timezone.utc), 'time_taken': 28.0, 'time_delta': '0:00:28', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 978534044, 'number': 1051, 'closed': datetime.datetime(2022, 6, 28, 10, 55, 34, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 6, 24, 17, 1, 44, tzinfo=datetime.timezone.utc), 'time_taken': 323630.0, 'time_delta': '3 days, 17:53:50', 'additions': 10, 'deletions': 10, 'state': 'closed'}, {'id': 959445992, 'number': 1032, 'closed': datetime.datetime(2022, 6, 14, 8, 55, 35, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 6, 6, 18, 51, 8, tzinfo=datetime.timezone.utc), 'time_taken': 655467.0, 'time_delta': '7 days, 14:04:27', 'additions': 2148, 'deletions': 476, 'state': 'closed'}, {'id': 957796677, 'number': 1031, 'closed': datetime.datetime(2022, 6, 8, 15, 47, 53, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 6, 3, 19, 43, 8, tzinfo=datetime.timezone.utc), 'time_taken': 417885.0, 'time_delta': '4 days, 20:04:45', 'additions': 406, 'deletions': 210, 'state': 'closed'}, {'id': 950271444, 'number': 1022, 'closed': datetime.datetime(2022, 5, 30, 10, 14, 28, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 5, 29, 14, 0, 36, tzinfo=datetime.timezone.utc), 'time_taken': 72832.0, 'time_delta': '20:13:52', 'additions': 7, 'deletions': 0, 'state': 'closed'}, {'id': 949608532, 'number': 1020, 'closed': datetime.datetime(2022, 6, 3, 19, 50, 25, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 5, 27, 18, 13, 13, tzinfo=datetime.timezone.utc), 'time_taken': 610632.0, 'time_delta': '7 days, 1:37:12', 'additions': 220, 'deletions': 160, 'state': 'closed'}, {'id': 883541774, 'number': 941, 'closed': datetime.datetime(2022, 3, 18, 15, 20, 4, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 3, 18, 15, 18, 12, tzinfo=datetime.timezone.utc), 'time_taken': 112.0, 'time_delta': '0:01:52', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 877336225, 'number': 927, 'closed': datetime.datetime(2022, 10, 11, 19, 34, 37, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 3, 11, 11, 22, 6, tzinfo=datetime.timezone.utc), 'time_taken': 18519151.0, 'time_delta': '214 days, 8:12:31', 'additions': 448, 'deletions': 261, 'state': 'closed'}, {'id': 865014174, 'number': 910, 'closed': datetime.datetime(2022, 3, 7, 17, 48, 44, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 2, 26, 19, 11, 47, tzinfo=datetime.timezone.utc), 'time_taken': 772617.0, 'time_delta': '8 days, 22:36:57', 'additions': 159, 'deletions': 1, 'state': 'closed'}, {'id': 852876413, 'number': 890, 'closed': datetime.datetime(2022, 2, 15, 11, 46, 26, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 2, 15, 6, 34, 37, tzinfo=datetime.timezone.utc), 'time_taken': 18709.0, 'time_delta': '5:11:49', 'additions': 14, 'deletions': 0, 'state': 'closed'}, {'id': 847669762, 'number': 888, 'closed': datetime.datetime(2022, 2, 11, 16, 49, 32, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 2, 11, 13, 56, 20, tzinfo=datetime.timezone.utc), 'time_taken': 10392.0, 'time_delta': '2:53:12', 'additions': 11, 'deletions': 11, 'state': 'closed'}, {'id': 845926800, 'number': 886, 'closed': datetime.datetime(2022, 2, 11, 8, 51, 58, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 2, 10, 19, 42, 4, tzinfo=datetime.timezone.utc), 'time_taken': 47394.0, 'time_delta': '13:09:54', 'additions': 34, 'deletions': 6, 'state': 'closed'}, {'id': 841427943, 'number': 878, 'closed': datetime.datetime(2022, 2, 8, 14, 23, 52, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 2, 7, 8, 5, 17, tzinfo=datetime.timezone.utc), 'time_taken': 109115.0, 'time_delta': '1 day, 6:18:35', 'additions': 140, 'deletions': 2, 'state': 'closed'}, {'id': 839588653, 'number': 877, 'closed': datetime.datetime(2022, 2, 4, 10, 8, 44, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 2, 3, 18, 28, 24, tzinfo=datetime.timezone.utc), 'time_taken': 56420.0, 'time_delta': '15:40:20', 'additions': 38, 'deletions': 4, 'state': 'closed'}, {'id': 838651147, 'number': 874, 'closed': datetime.datetime(2022, 2, 3, 8, 37, 13, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 2, 2, 19, 56, 24, tzinfo=datetime.timezone.utc), 'time_taken': 45649.0, 'time_delta': '12:40:49', 'additions': 4, 'deletions': 1, 'state': 'closed'}, {'id': 832651423, 'number': 867, 'closed': datetime.datetime(2022, 1, 28, 11, 47, 10, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 1, 26, 17, 32, 13, tzinfo=datetime.timezone.utc), 'time_taken': 152097.0, 'time_delta': '1 day, 18:14:57', 'additions': 62, 'deletions': 0, 'state': 'closed'}, {'id': 832349549, 'number': 866, 'closed': datetime.datetime(2022, 1, 26, 11, 53, 18, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 1, 26, 11, 52, 5, tzinfo=datetime.timezone.utc), 'time_taken': 73.0, 'time_delta': '0:01:13', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 819626380, 'number': 848, 'closed': datetime.datetime(2022, 1, 17, 11, 55, 25, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 1, 12, 11, 56, 39, tzinfo=datetime.timezone.utc), 'time_taken': 431926.0, 'time_delta': '4 days, 23:58:46', 'additions': 27, 'deletions': 5, 'state': 'closed'}, {'id': 816977056, 'number': 837, 'closed': datetime.datetime(2022, 1, 11, 8, 9, 49, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 1, 9, 6, 9, 14, tzinfo=datetime.timezone.utc), 'time_taken': 180035.0, 'time_delta': '2 days, 2:00:35', 'additions': 27, 'deletions': 1, 'state': 'closed'}]"
