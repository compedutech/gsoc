pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
690589576,Add numerical differentiation support to clad,"This functionality will allow clad to be able to use numerical differentiation as a backup (or even standalone) in the case that a differentiation request is made for a function that is not visible to clad. Full list of possible functionalities is as given below:

**PR Checklist:**
- [x]  Add support for using numerical diff as a backup for unsupported function calls in _forward-mode_.
- [x]  Add support for using numerical diff as a backup for unsupported function calls in _reverse-mode_.
- [x]  Add support for usage of numerical diff as a standalone function (i.e. ```clad::numerical_diff```).
- [x]  Add support for numerical differentiation of multi-arg calls.
- [x]  Extend support of numerical diff to differentiate unsupported operators.
- [x]  Support printing of error information for the numerical methods. 

**Good to implement:**
- [x] Add support for non-primitive types like user structs, tensors etc.

**Known bugs:**
- [ ] Standalone code does not work because central_difference is not specialized correctly.  ",True,261,https://api.github.com/repos/vgvassilev/clad/pulls/261,https://github.com/vgvassilev/clad/pull/261,closed,1276,62,23,1,2,67,0,0,[],2021-07-15 10:22:48+00:00,2021-08-22 13:43:19+00:00,3295231.0,"38 days, 3:20:31","[{'comment_id': 690660637, 'comment_body': '```suggestion\r\n    // reform the number so that we do not do unnecessary multiplications.\r\n```', 'comment_created': datetime.datetime(2021, 8, 17, 19, 28, 27, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 690664133, 'comment_body': ""```suggestion\r\n// 'number' refers to 'a' and 'scale' refers to 'b'. \r\n```"", 'comment_created': datetime.datetime(2021, 8, 17, 19, 33, 57, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 690665996, 'comment_body': ""Did you mean 'floating point normalization'?"", 'comment_created': datetime.datetime(2021, 8, 17, 19, 36, 58, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 690692065, 'comment_body': 'Maybe reword the two sentences?', 'comment_created': datetime.datetime(2021, 8, 17, 20, 18, 6, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 690694217, 'comment_body': 'Maybe rephrase to reduce the repetition of `function`.', 'comment_created': datetime.datetime(2021, 8, 17, 20, 21, 31, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 690708207, 'comment_body': ""I'd rather add an if-stmt in the code."", 'comment_created': datetime.datetime(2021, 8, 17, 20, 43, 8, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 690708740, 'comment_body': '```suggestion\r\n#include ""ArrayRef.h""\r\n#include ""FunctionTraits.h""\r\n#include ""Tape.h""\r\n\r\n#include <cmath>\r\n#include <limits>\r\n#include <memory>\r\n#include <utility>\r\n```', 'comment_created': datetime.datetime(2021, 8, 17, 20, 44, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 690710083, 'comment_body': 'That forces us to link libm every time we use this header file. Would making the function inline or templated lift this requirement?', 'comment_created': datetime.datetime(2021, 8, 17, 20, 46, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 690712314, 'comment_body': '```suggestion\r\n        clang::Expr* targetFuncCall, clang::QualType retType, unsigned numArgs,\r\n```', 'comment_created': datetime.datetime(2021, 8, 17, 20, 49, 20, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 690712511, 'comment_body': '```suggestion\r\n        unsigned numArgs, llvm::SmallVectorImpl<clang::Expr*>& args);\r\n```', 'comment_created': datetime.datetime(2021, 8, 17, 20, 49, 38, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 690719666, 'comment_body': '```suggestion\r\n      Expr* targetFuncCall, Expr* targetArg, unsigned targetPos, unsigned numArgs,\r\n```', 'comment_created': datetime.datetime(2021, 8, 17, 21, 0, 47, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 690719807, 'comment_body': '```suggestion\r\n      Expr* targetFuncCall, QualType retType, unsigned numArgs,\r\n```', 'comment_created': datetime.datetime(2021, 8, 17, 21, 0, 59, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 690721946, 'comment_body': 'I am not sure what should be the default behavior -- eg whether we should enable this by default or disable it by default. Maybe enabled by default + diagnostics when falling back to numerical diff mode would be a good compromise.', 'comment_created': datetime.datetime(2021, 8, 17, 21, 4, 18, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 691031483, 'comment_body': 'Hm yes, that would be the correct term for it!', 'comment_created': datetime.datetime(2021, 8, 18, 8, 44, 9, tzinfo=datetime.timezone.utc), 'commenter': 'grimmmyshini', 'type': 'User'}, {'comment_id': 691031915, 'comment_body': 'That would not solve the linking problem.', 'comment_created': datetime.datetime(2021, 8, 18, 8, 44, 44, tzinfo=datetime.timezone.utc), 'commenter': 'grimmmyshini', 'type': 'User'}, {'comment_id': 691033042, 'comment_body': 'It will but I have already added a macro which when defined allows us to completely disable numerical diff.', 'comment_created': datetime.datetime(2021, 8, 18, 8, 46, 15, tzinfo=datetime.timezone.utc), 'commenter': 'grimmmyshini', 'type': 'User'}, {'comment_id': 691034682, 'comment_body': ""It is enabled by default. For the test's sake and to not introduce a massive change in behavior, I just made it default here. "", 'comment_created': datetime.datetime(2021, 8, 18, 8, 48, 8, tzinfo=datetime.timezone.utc), 'commenter': 'grimmmyshini', 'type': 'User'}, {'comment_id': 691035228, 'comment_body': 'I can add the diagnostics and probably mention the ```-DCLAD_NO_NUM_DIFF``` there.', 'comment_created': datetime.datetime(2021, 8, 18, 8, 48, 56, tzinfo=datetime.timezone.utc), 'commenter': 'grimmmyshini', 'type': 'User'}, {'comment_id': 691065325, 'comment_body': 'I am confused -- I was referring to dropping `namespace numerical_diff {}`.', 'comment_created': datetime.datetime(2021, 8, 18, 9, 27, 52, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 691067554, 'comment_body': 'Ah, so you mean to add an if statement in the namespace lookup function?', 'comment_created': datetime.datetime(2021, 8, 18, 9, 30, 41, tzinfo=datetime.timezone.utc), 'commenter': 'grimmmyshini', 'type': 'User'}, {'comment_id': 691068077, 'comment_body': 'yeah.', 'comment_created': datetime.datetime(2021, 8, 18, 9, 31, 20, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 692393142, 'comment_body': 'Did you run clang-format?', 'comment_created': datetime.datetime(2021, 8, 19, 18, 44, 26, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 692393857, 'comment_body': '```suggestion\r\n// user-defined data types as arguments. This function describes the ""rules""\r\n```', 'comment_created': datetime.datetime(2021, 8, 19, 18, 45, 23, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 692396002, 'comment_body': 'Can you improve the comment. Which function?', 'comment_created': datetime.datetime(2021, 8, 19, 18, 48, 36, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 692407642, 'comment_body': 'Ok, cool.', 'comment_created': datetime.datetime(2021, 8, 19, 19, 6, 31, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 692408587, 'comment_body': 'Not sure I understand that. We seem to be using it in the definition of `data`.', 'comment_created': datetime.datetime(2021, 8, 19, 19, 8, 3, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 692410825, 'comment_body': ""What do we gain by having that? We seem to make the implementation 'harder'."", 'comment_created': datetime.datetime(2021, 8, 19, 19, 11, 40, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 692413643, 'comment_body': 'Do we have a test with custom data types? Is that the demo?', 'comment_created': datetime.datetime(2021, 8, 19, 19, 16, 26, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 692414387, 'comment_body': '```suggestion\r\n  /// parameter pack, starting from 0.\r\n```\r\nI guess..', 'comment_created': datetime.datetime(2021, 8, 19, 19, 17, 40, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 692415422, 'comment_body': '```suggestion\r\n  /// \\param[in] currIdx - The index value of the parameter to be\r\n```\r\nI usually use the dash to make the name more clear. Not sure if that is an issue in doxygen generated html, but definitely helps reading the code.', 'comment_created': datetime.datetime(2021, 8, 19, 19, 19, 23, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 692415818, 'comment_body': 'you mean noop by default?', 'comment_created': datetime.datetime(2021, 8, 19, 19, 20, 2, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 692416969, 'comment_body': 'The size of the array element or the length of array itself?', 'comment_created': datetime.datetime(2021, 8, 19, 19, 21, 54, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 692417746, 'comment_body': 'You mean it should lead to double deletion? Can you transform this to a doxygen-style comment?', 'comment_created': datetime.datetime(2021, 8, 19, 19, 23, 14, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 692419238, 'comment_body': '```suggestion\r\n                                                i, /*multiplier=*/1, h1, bufferManager,\r\n```\r\nplease update all such uses.', 'comment_created': datetime.datetime(2021, 8, 19, 19, 25, 42, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 692419787, 'comment_body': 'General question: can we propagate back the errors?', 'comment_created': datetime.datetime(2021, 8, 19, 19, 26, 31, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 692420008, 'comment_body': '```suggestion\r\n  /// A helper function to calculate the derivative with respect to a\r\n```', 'comment_created': datetime.datetime(2021, 8, 19, 19, 26, 51, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 692420717, 'comment_body': '```suggestion\r\n    // five-point stencil formula = (4f[x+h, x-h] - f[x+2h, x-2h])/3\r\n```', 'comment_created': datetime.datetime(2021, 8, 19, 19, 27, 48, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 692421172, 'comment_body': '```suggestion\r\n  /// A function to calculate the derivative of a function using the central\r\n```\r\nCan you run the comments through a spell checker?', 'comment_created': datetime.datetime(2021, 8, 19, 19, 28, 31, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 692424757, 'comment_body': ""i'd rather add a flag `mustExist=true` and return a nullptr if false."", 'comment_created': datetime.datetime(2021, 8, 19, 19, 34, 30, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 692425639, 'comment_body': '```suggestion\r\n           ""Numerical differentiation is disabled using the -DCLAD_NO_NUM_DIFF ""\r\n```', 'comment_created': datetime.datetime(2021, 8, 19, 19, 35, 57, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 692425790, 'comment_body': 'I think we need a proper warning here.', 'comment_created': datetime.datetime(2021, 8, 19, 19, 36, 16, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 692427648, 'comment_body': 'Please spell out the argument names here.', 'comment_created': datetime.datetime(2021, 8, 19, 19, 38, 17, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 692429100, 'comment_body': ""I'd prefer a warning here."", 'comment_created': datetime.datetime(2021, 8, 19, 19, 39, 36, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 692431283, 'comment_body': 'Can you move this into a separate function?', 'comment_created': datetime.datetime(2021, 8, 19, 19, 41, 31, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 692434414, 'comment_body': 'Consider moving into a separate function.', 'comment_created': datetime.datetime(2021, 8, 19, 19, 44, 44, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 692447741, 'comment_body': '```suggestion\r\n        typename = std::enable_if<std::is_trivially_destructible<T>::value>>::type\r\n```\r\nkudos: @pdimov', 'comment_created': datetime.datetime(2021, 8, 19, 20, 6, 16, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 692470533, 'comment_body': 'Yes, and there is a dedicated test as well here: test/NumericalDiff/PureCentralDiffCalls.C', 'comment_created': datetime.datetime(2021, 8, 19, 20, 37, 35, tzinfo=datetime.timezone.utc), 'commenter': 'grimmmyshini', 'type': 'User'}, {'comment_id': 692471300, 'comment_body': 'Ah, the length of the array, size is probably not the right term?', 'comment_created': datetime.datetime(2021, 8, 19, 20, 38, 52, tzinfo=datetime.timezone.utc), 'commenter': 'grimmmyshini', 'type': 'User'}, {'comment_id': 692472924, 'comment_body': 'Yes, it will lead to double free. Are you thinking of the ```\\warning``` tag there?', 'comment_created': datetime.datetime(2021, 8, 19, 20, 41, 35, tzinfo=datetime.timezone.utc), 'commenter': 'grimmmyshini', 'type': 'User'}, {'comment_id': 692473249, 'comment_body': 'No. That would require implementing forward propagation of errors.', 'comment_created': datetime.datetime(2021, 8, 19, 20, 42, 7, tzinfo=datetime.timezone.utc), 'commenter': 'grimmmyshini', 'type': 'User'}, {'comment_id': 692474674, 'comment_body': ""The whole thing? I don't know if that would be feasible...We will have to send a lot of information as parameters to that function."", 'comment_created': datetime.datetime(2021, 8, 19, 20, 44, 52, tzinfo=datetime.timezone.utc), 'commenter': 'grimmmyshini', 'type': 'User'}, {'comment_id': 692485353, 'comment_body': 'Ah, I had not, let me do it in the next review push.', 'comment_created': datetime.datetime(2021, 8, 19, 21, 3, 12, tzinfo=datetime.timezone.utc), 'commenter': 'grimmmyshini', 'type': 'User'}, {'comment_id': 692492901, 'comment_body': 'I think what I have written is correct (there are quite a bunch of ways to work with these type_traits).  Moreover adding these changes causes tests to fail.', 'comment_created': datetime.datetime(2021, 8, 19, 21, 16, 18, tzinfo=datetime.timezone.utc), 'commenter': 'grimmmyshini', 'type': 'User'}, {'comment_id': 693182409, 'comment_body': 'The point is that the rhs always evaluates to true -- the intent to enable/disable this function is not met.', 'comment_created': datetime.datetime(2021, 8, 20, 19, 47, 6, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 693183109, 'comment_body': 'Can you elaborate here and maybe in the comments.', 'comment_created': datetime.datetime(2021, 8, 20, 19, 48, 33, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 693187870, 'comment_body': 'That line does not feel right.', 'comment_created': datetime.datetime(2021, 8, 20, 19, 58, 34, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 693188588, 'comment_body': '```suggestion\r\n#endif // CLAD_NUMERICAL_DIFF_H\r\n#endif // CLAD_NO_NUM_DIFF\r\n```', 'comment_created': datetime.datetime(2021, 8, 20, 20, 0, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 693190926, 'comment_body': '```suggestion\r\n      ASTContext& C, Sema& S, llvm::StringRef Name) {\r\n```', 'comment_created': datetime.datetime(2021, 8, 20, 20, 4, 42, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 693191086, 'comment_body': '```suggestion\r\n    if(Name != ""numerical_diff"" && R.empty())\r\n```', 'comment_created': datetime.datetime(2021, 8, 20, 20, 5, 4, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 693217808, 'comment_body': 'I take that back -- it works, however can we make consistent use of `enable_if` eg `typename = enable_if`...', 'comment_created': datetime.datetime(2021, 8, 20, 21, 3, 23, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 693221895, 'comment_body': 'Ah yes, sorry, I think I confused this with the other enable_if. You are right, let me fix that.', 'comment_created': datetime.datetime(2021, 8, 20, 21, 13, 25, tzinfo=datetime.timezone.utc), 'commenter': 'grimmmyshini', 'type': 'User'}, {'comment_id': 693366876, 'comment_body': 'How about putting 1406 - 1423 in a function? Putting all of it will require a function with 8-9 arguments.', 'comment_created': datetime.datetime(2021, 8, 21, 15, 22, 48, tzinfo=datetime.timezone.utc), 'commenter': 'grimmmyshini', 'type': 'User'}, {'comment_id': 693397465, 'comment_body': '@vgvassilev  How do you think it looks now? If it is not good, I can put it all in a function.', 'comment_created': datetime.datetime(2021, 8, 21, 20, 25, 52, tzinfo=datetime.timezone.utc), 'commenter': 'grimmmyshini', 'type': 'User'}, {'comment_id': 693446753, 'comment_body': 'maybe just say that the system owns the returned value.', 'comment_created': datetime.datetime(2021, 8, 22, 5, 53, 22, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 693447158, 'comment_body': 'Can you add a test here?', 'comment_created': datetime.datetime(2021, 8, 22, 5, 57, 20, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 693447207, 'comment_body': 'Please remove these kinds of changes from this PR.', 'comment_created': datetime.datetime(2021, 8, 22, 5, 57, 51, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 693451894, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 8, 22, 6, 42, 33, tzinfo=datetime.timezone.utc), 'commenter': 'grimmmyshini', 'type': 'User'}]","[{'commit_sha': '53db6d1885a96781162fffe93af4885dc93099e0', 'committer_username': 'grimmmyshini', 'committer_name': 'Garima Singh', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 19, 15, 21, 59, tzinfo=datetime.timezone.utc)}]",Garima Singh,43415443,,User,,23,,11,42

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
17050358,clad,vgvassilev/clad,C++,116,276,18,49,1177,159,10,27,"[{'id': 1326879746, 'number': 559, 'closed': datetime.datetime(2023, 4, 25, 11, 59, 8, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 4, 25, 10, 21, 8, tzinfo=datetime.timezone.utc), 'time_taken': 5880.0, 'time_delta': '1:38:00', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 1321713035, 'number': 558, 'closed': datetime.datetime(2023, 4, 21, 15, 13, 6, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 4, 20, 15, 25, 45, tzinfo=datetime.timezone.utc), 'time_taken': 85641.0, 'time_delta': '23:47:21', 'additions': 64, 'deletions': 1, 'state': 'closed'}, {'id': 1320199626, 'number': 557, 'closed': datetime.datetime(2023, 4, 19, 16, 51, 1, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 4, 19, 16, 22, 47, tzinfo=datetime.timezone.utc), 'time_taken': 1694.0, 'time_delta': '0:28:14', 'additions': 60, 'deletions': 2, 'state': 'closed'}, {'id': 1151903811, 'number': 513, 'closed': datetime.datetime(2023, 1, 5, 9, 7, 21, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 12, 7, 16, 10, 33, tzinfo=datetime.timezone.utc), 'time_taken': 2480208.0, 'time_delta': '28 days, 16:56:48', 'additions': 212, 'deletions': 31, 'state': 'closed'}, {'id': 962173701, 'number': 458, 'closed': datetime.datetime(2022, 6, 23, 18, 4, 35, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 6, 8, 21, 15, 30, tzinfo=datetime.timezone.utc), 'time_taken': 1284545.0, 'time_delta': '14 days, 20:49:05', 'additions': 268, 'deletions': 74, 'state': 'closed'}, {'id': 917284219, 'number': 434, 'closed': datetime.datetime(2022, 5, 8, 5, 45, 5, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 4, 23, 19, 37, 14, tzinfo=datetime.timezone.utc), 'time_taken': 1246071.0, 'time_delta': '14 days, 10:07:51', 'additions': 165, 'deletions': 106, 'state': 'closed'}, {'id': 916433488, 'number': 433, 'closed': datetime.datetime(2022, 4, 23, 16, 36, 45, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 4, 22, 13, 10, 14, tzinfo=datetime.timezone.utc), 'time_taken': 98791.0, 'time_delta': '1 day, 3:26:31', 'additions': 7, 'deletions': 13, 'state': 'closed'}, {'id': 888418855, 'number': 414, 'closed': datetime.datetime(2022, 5, 19, 17, 17, 37, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 3, 24, 14, 3, 24, tzinfo=datetime.timezone.utc), 'time_taken': 4850053.0, 'time_delta': '56 days, 3:14:13', 'additions': 147, 'deletions': 3, 'state': 'closed'}, {'id': 886948284, 'number': 407, 'closed': datetime.datetime(2022, 3, 23, 15, 21, 1, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 3, 23, 8, 59, 16, tzinfo=datetime.timezone.utc), 'time_taken': 22905.0, 'time_delta': '6:21:45', 'additions': 149, 'deletions': 171, 'state': 'closed'}, {'id': 879273119, 'number': 399, 'closed': datetime.datetime(2022, 3, 14, 16, 55, 29, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 3, 14, 16, 29, 23, tzinfo=datetime.timezone.utc), 'time_taken': 1566.0, 'time_delta': '0:26:06', 'additions': 10, 'deletions': 8, 'state': 'closed'}, {'id': 838618647, 'number': 370, 'closed': datetime.datetime(2022, 12, 9, 12, 5, 36, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 2, 2, 19, 5, 48, tzinfo=datetime.timezone.utc), 'time_taken': 26758788.0, 'time_delta': '309 days, 16:59:48', 'additions': 483, 'deletions': 81, 'state': 'closed'}, {'id': 796326831, 'number': 340, 'closed': None, 'created': datetime.datetime(2021, 12, 6, 22, 3, 17, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 22, 'deletions': 6, 'state': 'open'}, {'id': 773749714, 'number': 334, 'closed': datetime.datetime(2022, 2, 2, 13, 16, 56, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 11, 4, 22, 22, 53, tzinfo=datetime.timezone.utc), 'time_taken': 7743243.0, 'time_delta': '89 days, 14:54:03', 'additions': 372, 'deletions': 70, 'state': 'closed'}, {'id': 772813127, 'number': 333, 'closed': datetime.datetime(2021, 11, 15, 14, 33, 47, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 11, 3, 21, 3, 44, tzinfo=datetime.timezone.utc), 'time_taken': 1013403.0, 'time_delta': '11 days, 17:30:03', 'additions': 473, 'deletions': 285, 'state': 'closed'}, {'id': 769318018, 'number': 324, 'closed': datetime.datetime(2021, 11, 1, 10, 27, 22, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 10, 29, 14, 57, 59, tzinfo=datetime.timezone.utc), 'time_taken': 242963.0, 'time_delta': '2 days, 19:29:23', 'additions': 29, 'deletions': 8, 'state': 'closed'}, {'id': 769260211, 'number': 323, 'closed': datetime.datetime(2021, 10, 30, 10, 51, 57, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 10, 29, 13, 50, 12, tzinfo=datetime.timezone.utc), 'time_taken': 75705.0, 'time_delta': '21:01:45', 'additions': 2, 'deletions': 0, 'state': 'closed'}, {'id': 739332134, 'number': 309, 'closed': datetime.datetime(2021, 10, 9, 9, 10, 49, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 9, 21, 18, 7, 39, tzinfo=datetime.timezone.utc), 'time_taken': 1522990.0, 'time_delta': '17 days, 15:03:10', 'additions': 2, 'deletions': 2, 'state': 'closed'}, {'id': 719646318, 'number': 302, 'closed': datetime.datetime(2021, 8, 26, 17, 33, 50, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 25, 14, 16, 46, tzinfo=datetime.timezone.utc), 'time_taken': 98224.0, 'time_delta': '1 day, 3:17:04', 'additions': 47, 'deletions': 5, 'state': 'closed'}, {'id': 719547624, 'number': 301, 'closed': datetime.datetime(2021, 8, 25, 12, 54, 18, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 25, 12, 19, 13, tzinfo=datetime.timezone.utc), 'time_taken': 2105.0, 'time_delta': '0:35:05', 'additions': 40, 'deletions': 1, 'state': 'closed'}, {'id': 711357320, 'number': 287, 'closed': datetime.datetime(2021, 8, 12, 19, 7, 44, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 12, 18, 7, 16, tzinfo=datetime.timezone.utc), 'time_taken': 3628.0, 'time_delta': '1:00:28', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 710905742, 'number': 285, 'closed': datetime.datetime(2021, 8, 12, 14, 14, 48, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 12, 13, 19, 54, tzinfo=datetime.timezone.utc), 'time_taken': 3294.0, 'time_delta': '0:54:54', 'additions': 10, 'deletions': 0, 'state': 'closed'}, {'id': 705957872, 'number': 280, 'closed': datetime.datetime(2021, 8, 8, 11, 13, 9, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 7, 23, 31, 45, tzinfo=datetime.timezone.utc), 'time_taken': 42084.0, 'time_delta': '11:41:24', 'additions': 67, 'deletions': 4, 'state': 'closed'}, {'id': 690589576, 'number': 261, 'closed': datetime.datetime(2021, 8, 22, 13, 43, 19, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 15, 10, 22, 48, tzinfo=datetime.timezone.utc), 'time_taken': 3295231.0, 'time_delta': '38 days, 3:20:31', 'additions': 1276, 'deletions': 62, 'state': 'closed'}, {'id': 669351045, 'number': 247, 'closed': datetime.datetime(2021, 8, 16, 21, 6, 21, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 14, 8, 22, 54, tzinfo=datetime.timezone.utc), 'time_taken': 5489007.0, 'time_delta': '63 days, 12:43:27', 'additions': 3084, 'deletions': 127, 'state': 'closed'}, {'id': 592580211, 'number': 213, 'closed': datetime.datetime(2021, 3, 14, 20, 15, 20, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 3, 14, 17, 7, 29, tzinfo=datetime.timezone.utc), 'time_taken': 11271.0, 'time_delta': '3:07:51', 'additions': 0, 'deletions': 1, 'state': 'closed'}, {'id': 581530535, 'number': 204, 'closed': datetime.datetime(2021, 2, 28, 14, 55, 30, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 2, 28, 14, 54, 20, tzinfo=datetime.timezone.utc), 'time_taken': 70.0, 'time_delta': '0:01:10', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 581367752, 'number': 201, 'closed': datetime.datetime(2021, 2, 28, 14, 46, 49, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 2, 27, 17, 1, 52, tzinfo=datetime.timezone.utc), 'time_taken': 78297.0, 'time_delta': '21:44:57', 'additions': 2, 'deletions': 0, 'state': 'closed'}, {'id': 577144213, 'number': 194, 'closed': datetime.datetime(2021, 2, 23, 12, 54, 58, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 2, 21, 17, 2, 32, tzinfo=datetime.timezone.utc), 'time_taken': 157946.0, 'time_delta': '1 day, 19:52:26', 'additions': 26, 'deletions': 1, 'state': 'closed'}, {'id': 558141474, 'number': 191, 'closed': datetime.datetime(2021, 8, 19, 18, 27, 19, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 1, 20, 10, 42, 46, tzinfo=datetime.timezone.utc), 'time_taken': 18258273.0, 'time_delta': '211 days, 7:44:33', 'additions': 197, 'deletions': 0, 'state': 'closed'}, {'id': 517774460, 'number': 183, 'closed': datetime.datetime(2021, 1, 18, 9, 23, 50, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 11, 9, 13, 43, 30, tzinfo=datetime.timezone.utc), 'time_taken': 6032420.0, 'time_delta': '69 days, 19:40:20', 'additions': 88, 'deletions': 15, 'state': 'closed'}, {'id': 517148590, 'number': 182, 'closed': datetime.datetime(2020, 11, 12, 19, 33, 28, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 11, 7, 14, 58, 32, tzinfo=datetime.timezone.utc), 'time_taken': 448496.0, 'time_delta': '5 days, 4:34:56', 'additions': 41, 'deletions': 5, 'state': 'closed'}]"
