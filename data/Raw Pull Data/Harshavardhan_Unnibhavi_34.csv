pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
680942530,Inflight io: Define queue regions for split and packed virtqueues,These set of commits introduce the queue region and descriptor state structures needed to manage inflight I/O tracking.,True,52,https://api.github.com/repos/rust-vmm/vhost/pulls/52,https://github.com/rust-vmm/vhost/pull/52,closed,146,1,2,3,5,0,0,0,[],2021-06-30 14:43:20+00:00,2021-07-07 12:30:55+00:00,596855.0,"6 days, 21:47:35",[],"[{'commit_sha': 'bfcb3cb02c545ad0a9c02fd6fb231b3a588ed52e', 'committer_username': 'harshanavkis', 'committer_name': 'Harshavardhan Unnibhavi', 'committer_email': 'harshanavkis@gmail.com', 'commit_date': datetime.datetime(2015, 11, 25, 14, 38, 39, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8f8a1a21dba191916974e0b0ea0a2a47a4c749ed', 'committer_username': 'harshanavkis', 'committer_name': 'Harshavardhan Unnibhavi', 'committer_email': 'harshanavkis@gmail.com', 'commit_date': datetime.datetime(2015, 11, 25, 14, 38, 39, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b88dad3b11e93a4a96339a9d435069609376fc07', 'committer_username': 'harshanavkis', 'committer_name': 'Harshavardhan Unnibhavi', 'committer_email': 'harshanavkis@gmail.com', 'commit_date': datetime.datetime(2015, 11, 25, 14, 38, 39, tzinfo=datetime.timezone.utc)}]",Harshavardhan Unnibhavi,16018543,harshanavkis@gmail.com,User,,76,,26,20
686203648,Inflight I/O: Make structs and members public,The queue region and descriptor state structs introduced in the previous commits need to be public to be used by other crates.,True,54,https://api.github.com/repos/rust-vmm/vhost/pulls/54,https://github.com/rust-vmm/vhost/pull/54,closed,17,29,2,2,3,3,0,0,[],2021-07-08 17:34:12+00:00,2021-07-21 08:43:29+00:00,1091357.0,"12 days, 15:09:17","[{'comment_id': 666603925, 'comment_body': 'it would be better to move current implementation into default(), and let new() call default().', 'comment_created': datetime.datetime(2021, 7, 9, 0, 58, 50, tzinfo=datetime.timezone.utc), 'commenter': 'jiangliu', 'type': 'User'}, {'comment_id': 673737574, 'comment_body': ""You don't need to explicitly implement `Default`, just derive it from the structure definition.\r\n```rust\r\n#[derive(Clone, Copy, Default)]\r\npub struct DescStatePacked {\r\n```"", 'comment_created': datetime.datetime(2021, 7, 21, 7, 44, 10, tzinfo=datetime.timezone.utc), 'commenter': 'sboeuf', 'type': 'User'}, {'comment_id': 673738279, 'comment_body': ""You don't need to explicitly implement `Default`, just derive it from the structure definition.\r\n```rust\r\n#[derive(Clone, Copy, Default)]\r\npub struct DescStateSplit {\r\n```"", 'comment_created': datetime.datetime(2021, 7, 21, 7, 45, 14, tzinfo=datetime.timezone.utc), 'commenter': 'sboeuf', 'type': 'User'}]","[{'commit_sha': '1ffd13c556be14060cbd0c6a6a0e71abc71ae2af', 'committer_username': 'harshanavkis', 'committer_name': 'Harshavardhan Unnibhavi', 'committer_email': 'harshanavkis@gmail.com', 'commit_date': datetime.datetime(2015, 11, 25, 14, 38, 39, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5883015b121b0ba4134642a18ccaf8d5eed2ad6d', 'committer_username': 'harshanavkis', 'committer_name': 'Harshavardhan Unnibhavi', 'committer_email': 'harshanavkis@gmail.com', 'commit_date': datetime.datetime(2015, 11, 25, 14, 38, 39, tzinfo=datetime.timezone.utc)}]",Harshavardhan Unnibhavi,16018543,harshanavkis@gmail.com,User,,76,,26,20
706786247,vhost-user-vsock implementation,Here is the initial implementation of a fully functional vhost-user-vsock device as part of the GSoC project with @stefano-garzarella and @fidencio. The device has been tested (end-to-end) using iperf and netcat. More testing can be performed once we have the queue mocking framework ready.,False,7,https://api.github.com/repos/rust-vmm/vhost-device/pulls/7,https://github.com/rust-vmm/vhost-device/pull/7,closed,3153,0,15,1,14,93,0,0,[],2021-08-09 19:38:13+00:00,2022-10-12 15:26:39+00:00,37050506.0,"428 days, 19:48:26","[{'comment_id': 685648826, 'comment_body': 'simple description here?', 'comment_created': datetime.datetime(2021, 8, 10, 2, 41, 14, tzinfo=datetime.timezone.utc), 'commenter': 'jiangliu', 'type': 'User'}, {'comment_id': 685648961, 'comment_body': 'the url should be changed too', 'comment_created': datetime.datetime(2021, 8, 10, 2, 41, 37, tzinfo=datetime.timezone.utc), 'commenter': 'jiangliu', 'type': 'User'}, {'comment_id': 685649220, 'comment_body': ""If there's no code licensed under bsd-3-clause, how about licensing it by Apache2 only?"", 'comment_created': datetime.datetime(2021, 8, 10, 2, 42, 21, tzinfo=datetime.timezone.utc), 'commenter': 'jiangliu', 'type': 'User'}, {'comment_id': 685649521, 'comment_body': 'we have just published vhost v0.1 to crates.io, so you could use it now.', 'comment_created': datetime.datetime(2021, 8, 10, 2, 43, 14, tzinfo=datetime.timezone.utc), 'commenter': 'jiangliu', 'type': 'User'}, {'comment_id': 685723966, 'comment_body': 'The reason why we keep the dual license is so projects such QEMU can use rust-vmm crates as well. Apache 2.0 is incompatible with GPL v2. So to be able to use it, we would need to release the code under a dual license, out of which one needs to be compatible (in this case is BSD-3-Clause).', 'comment_created': datetime.datetime(2021, 8, 10, 6, 23, 25, tzinfo=datetime.timezone.utc), 'commenter': 'andreeaflorescu', 'type': 'User'}, {'comment_id': 686596875, 'comment_body': 'Maybe we can add a small description for each parameter', 'comment_created': datetime.datetime(2021, 8, 11, 8, 5, 42, tzinfo=datetime.timezone.utc), 'commenter': 'stefano-garzarella', 'type': 'User'}, {'comment_id': 686597302, 'comment_body': 'And also the default values (eg. for guest-cid should be 3)\r\n', 'comment_created': datetime.datetime(2021, 8, 11, 8, 6, 18, tzinfo=datetime.timezone.utc), 'commenter': 'stefano-garzarella', 'type': 'User'}, {'comment_id': 686600591, 'comment_body': 'Following the other values, maybe this could be `Reset`', 'comment_created': datetime.datetime(2021, 8, 11, 8, 10, 21, tzinfo=datetime.timezone.utc), 'commenter': 'stefano-garzarella', 'type': 'User'}, {'comment_id': 686602451, 'comment_body': '`s/thimk/think`, maybe prepend TODO: here', 'comment_created': datetime.datetime(2021, 8, 11, 8, 12, 44, tzinfo=datetime.timezone.utc), 'commenter': 'stefano-garzarella', 'type': 'User'}, {'comment_id': 686605961, 'comment_body': 'As `TODO` item, we can make this value configurable', 'comment_created': datetime.datetime(2021, 8, 11, 8, 17, 19, tzinfo=datetime.timezone.utc), 'commenter': 'stefano-garzarella', 'type': 'User'}, {'comment_id': 686608942, 'comment_body': 'Yes, it would be very useful to have a high level description, also to review the code, so when you can it is better to add it :-)', 'comment_created': datetime.datetime(2021, 8, 11, 8, 21, 19, tzinfo=datetime.timezone.utc), 'commenter': 'stefano-garzarella', 'type': 'User'}, {'comment_id': 686611843, 'comment_body': 'Recent `nc` should have vsock support too: https://man7.org/linux/man-pages/man1/ncat.1.html#AF_VSOCK_SOCKETS', 'comment_created': datetime.datetime(2021, 8, 11, 8, 24, 59, tzinfo=datetime.timezone.utc), 'commenter': 'stefano-garzarella', 'type': 'User'}, {'comment_id': 686615406, 'comment_body': 'I think it can wrap, do we have a map to check if a port is still in use?', 'comment_created': datetime.datetime(2021, 8, 11, 8, 29, 21, tzinfo=datetime.timezone.utc), 'commenter': 'stefano-garzarella', 'type': 'User'}, {'comment_id': 694727504, 'comment_body': 'Can we remove this dependency and use only clap for parsing arguments?', 'comment_created': datetime.datetime(2021, 8, 24, 10, 34, 3, tzinfo=datetime.timezone.utc), 'commenter': 'stefano-garzarella', 'type': 'User'}, {'comment_id': 694729320, 'comment_body': 'I think you can remove this section or put the **Usage** section under **Examples**', 'comment_created': datetime.datetime(2021, 8, 24, 10, 37, 2, tzinfo=datetime.timezone.utc), 'commenter': 'stefano-garzarella', 'type': 'User'}, {'comment_id': 694740527, 'comment_body': ""I think is a big limitation allow only 32 local port. I'm thinking if we can reuse `conn_map` in some way to understand if a local port is already used."", 'comment_created': datetime.datetime(2021, 8, 24, 10, 54, 36, tzinfo=datetime.timezone.utc), 'commenter': 'stefano-garzarella', 'type': 'User'}, {'comment_id': 694744194, 'comment_body': 'We can remove this comment', 'comment_created': datetime.datetime(2021, 8, 24, 11, 0, 20, tzinfo=datetime.timezone.utc), 'commenter': 'stefano-garzarella', 'type': 'User'}, {'comment_id': 694744330, 'comment_body': 'Also this one', 'comment_created': datetime.datetime(2021, 8, 24, 11, 0, 32, tzinfo=datetime.timezone.utc), 'commenter': 'stefano-garzarella', 'type': 'User'}, {'comment_id': 699152838, 'comment_body': 'Why update this line ?', 'comment_created': datetime.datetime(2021, 8, 31, 9, 34, 57, tzinfo=datetime.timezone.utc), 'commenter': 'vireshk', 'type': 'User'}, {'comment_id': 699153031, 'comment_body': 'Same here.', 'comment_created': datetime.datetime(2021, 8, 31, 9, 35, 14, tzinfo=datetime.timezone.utc), 'commenter': 'vireshk', 'type': 'User'}, {'comment_id': 699164879, 'comment_body': 'I would avoid using unwrap() here. Using it during development is probably fine, we should avoid it in released code and fail graciously. ', 'comment_created': datetime.datetime(2021, 8, 31, 9, 50, 52, tzinfo=datetime.timezone.utc), 'commenter': 'vireshk', 'type': 'User'}, {'comment_id': 699168217, 'comment_body': ""Why are these lines required ? You can directly use vhost::***. isn't it ?"", 'comment_created': datetime.datetime(2021, 8, 31, 9, 55, 16, tzinfo=datetime.timezone.utc), 'commenter': 'vireshk', 'type': 'User'}, {'comment_id': 699169092, 'comment_body': 'What about merging all definitions belonging to same crate together in a single line ? Like\r\n\r\nuse std::{fmt, io, mem};', 'comment_created': datetime.datetime(2021, 8, 31, 9, 56, 24, tzinfo=datetime.timezone.utc), 'commenter': 'vireshk', 'type': 'User'}, {'comment_id': 699174009, 'comment_body': 'Maybe declare all the mods together at the top instead of mixing mod and use ?', 'comment_created': datetime.datetime(2021, 8, 31, 10, 2, 43, tzinfo=datetime.timezone.utc), 'commenter': 'vireshk', 'type': 'User'}, {'comment_id': 699201138, 'comment_body': 'Why is this required ?', 'comment_created': datetime.datetime(2021, 8, 31, 10, 41, 7, tzinfo=datetime.timezone.utc), 'commenter': 'vireshk', 'type': 'User'}, {'comment_id': 699201661, 'comment_body': 'Please add a full stop at the end of all proper english sentenses. These will land into documentation', 'comment_created': datetime.datetime(2021, 8, 31, 10, 41, 57, tzinfo=datetime.timezone.utc), 'commenter': 'vireshk', 'type': 'User'}, {'comment_id': 699204172, 'comment_body': 'You used Self here, but structures name in case of  VsockConfig. Just choose one way of doing it and be consistent ?', 'comment_created': datetime.datetime(2021, 8, 31, 10, 46, 9, tzinfo=datetime.timezone.utc), 'commenter': 'vireshk', 'type': 'User'}, {'comment_id': 699205052, 'comment_body': 'Create a macro for magic number: 0b11 ?', 'comment_created': datetime.datetime(2021, 8, 31, 10, 47, 36, tzinfo=datetime.timezone.utc), 'commenter': 'vireshk', 'type': 'User'}, {'comment_id': 699209137, 'comment_body': 'You need to move to the latest vhost-user-backend. these have changed a bit.', 'comment_created': datetime.datetime(2021, 8, 31, 10, 53, 10, tzinfo=datetime.timezone.utc), 'commenter': 'vireshk', 'type': 'User'}, {'comment_id': 699209529, 'comment_body': 'Use some macro to identify the queues ? ', 'comment_created': datetime.datetime(2021, 8, 31, 10, 53, 48, tzinfo=datetime.timezone.utc), 'commenter': 'vireshk', 'type': 'User'}, {'comment_id': 699210653, 'comment_body': ""Over that you don't really need to clone() them here. Just take reference instead."", 'comment_created': datetime.datetime(2021, 8, 31, 10, 55, 24, tzinfo=datetime.timezone.utc), 'commenter': 'vireshk', 'type': 'User'}, {'comment_id': 699214115, 'comment_body': 'Since you do this always, what about doing this outside of the match ?', 'comment_created': datetime.datetime(2021, 8, 31, 11, 0, 50, tzinfo=datetime.timezone.utc), 'commenter': 'vireshk', 'type': 'User'}, {'comment_id': 699218182, 'comment_body': ""I am not sure what's the right way, but I will rather name this file as main.rs and move it to src/ itself."", 'comment_created': datetime.datetime(2021, 8, 31, 11, 7, 29, tzinfo=datetime.timezone.utc), 'commenter': 'vireshk', 'type': 'User'}, {'comment_id': 699219551, 'comment_body': 'what about saving entire vsock_config inside VhostUserVsockBackend ?', 'comment_created': datetime.datetime(2021, 8, 31, 11, 9, 36, tzinfo=datetime.timezone.utc), 'commenter': 'vireshk', 'type': 'User'}, {'comment_id': 699221330, 'comment_body': ""Also, it would be better (consistency wise) to standardize where should keep this code. I have kept this helper in main.rs itself, either move this just like i2c or if there is a better reason to keep it here then maybe i2c should get updated to keep it here.\r\n\r\nAlso, this isn't a library really, so I won't call it lib.rs. I named this file as vhu_i2c.rs (i.e. vhost user i2c). It would be better again to standardize that ? So the entire crate looks more organized ?"", 'comment_created': datetime.datetime(2021, 8, 31, 11, 12, 24, tzinfo=datetime.timezone.utc), 'commenter': 'vireshk', 'type': 'User'}, {'comment_id': 699223000, 'comment_body': ""Try this, start this dameon and then start your qemu instance. Once you kill the qemu instance, you won't be able to use the daemon anymore without restarting it after killing it first. I think this can be improved a bit.\r\n\r\nA daemon, in my opinion, should just run for ever in background, without the need of ever restarting it ever.\r\n\r\nIf you look at how I did this in case of I2C, you will get an idea."", 'comment_created': datetime.datetime(2021, 8, 31, 11, 15, 5, tzinfo=datetime.timezone.utc), 'commenter': 'vireshk', 'type': 'User'}, {'comment_id': 699224216, 'comment_body': ""Do you really need all of these? I am not sure if rustc complains about unused traits. I would remove whatever traits the code isn't using. This applies for all structures."", 'comment_created': datetime.datetime(2021, 8, 31, 11, 17, tzinfo=datetime.timezone.utc), 'commenter': 'vireshk', 'type': 'User'}, {'comment_id': 699226550, 'comment_body': 'Can this be implemented with match instead ?', 'comment_created': datetime.datetime(2021, 8, 31, 11, 20, 50, tzinfo=datetime.timezone.utc), 'commenter': 'vireshk', 'type': 'User'}, {'comment_id': 699228162, 'comment_body': 'All these unwrap()-s should go away from something we are publishing.', 'comment_created': datetime.datetime(2021, 8, 31, 11, 23, 23, tzinfo=datetime.timezone.utc), 'commenter': 'vireshk', 'type': 'User'}, {'comment_id': 699229981, 'comment_body': 'Please fix such TODO items which can be fixed now.', 'comment_created': datetime.datetime(2021, 8, 31, 11, 26, 12, tzinfo=datetime.timezone.utc), 'commenter': 'vireshk', 'type': 'User'}, {'comment_id': 699230055, 'comment_body': '??', 'comment_created': datetime.datetime(2021, 8, 31, 11, 26, 18, tzinfo=datetime.timezone.utc), 'commenter': 'vireshk', 'type': 'User'}, {'comment_id': 699231263, 'comment_body': '??', 'comment_created': datetime.datetime(2021, 8, 31, 11, 28, 15, tzinfo=datetime.timezone.utc), 'commenter': 'vireshk', 'type': 'User'}, {'comment_id': 703063200, 'comment_body': '@vireshk I am not sure about that here as I reuse the ""contains"" method to perform the peek. Do you have any idea how it can be achieved using a match?', 'comment_created': datetime.datetime(2021, 9, 6, 20, 29, 18, tzinfo=datetime.timezone.utc), 'commenter': 'harshanavkis', 'type': 'User'}, {'comment_id': 703260295, 'comment_body': 'Maybe better to add a `rev` here to avoid failures if the API will change', 'comment_created': datetime.datetime(2021, 9, 7, 7, 40, 53, tzinfo=datetime.timezone.utc), 'commenter': 'stefano-garzarella', 'type': 'User'}, {'comment_id': 703487714, 'comment_body': 'Maybe we can add `[default: 3]`', 'comment_created': datetime.datetime(2021, 9, 7, 12, 59, 18, tzinfo=datetime.timezone.utc), 'commenter': 'stefano-garzarella', 'type': 'User'}, {'comment_id': 703492502, 'comment_body': 'As a TODO item maybe we can replace these with a `bindgen` generated struct, but for now it should be fine.', 'comment_created': datetime.datetime(2021, 9, 7, 13, 5, 49, tzinfo=datetime.timezone.utc), 'commenter': 'stefano-garzarella', 'type': 'User'}, {'comment_id': 703495094, 'comment_body': 'IIUC we can also return `Err(Error::EmptyBackendRxQ)`', 'comment_created': datetime.datetime(2021, 9, 7, 13, 9, 15, tzinfo=datetime.timezone.utc), 'commenter': 'stefano-garzarella', 'type': 'User'}, {'comment_id': 703499740, 'comment_body': 'Maybe we can save the last port used and restart from it, instead of restarting from 0 every time, but I saw your TODO item, so we can do later.', 'comment_created': datetime.datetime(2021, 9, 7, 13, 15, 37, tzinfo=datetime.timezone.utc), 'commenter': 'stefano-garzarella', 'type': 'User'}, {'comment_id': 703502131, 'comment_body': 'Another TODO item can be a test to check if we use all the ports we receive the expected error.', 'comment_created': datetime.datetime(2021, 9, 7, 13, 18, 39, tzinfo=datetime.timezone.utc), 'commenter': 'stefano-garzarella', 'type': 'User'}, {'comment_id': 703509509, 'comment_body': 'An improvement we did in `vhost-vsock` kernel module to increase the performance was to reduce the number of credit messages. We avoid to send them every time we consume bytes, but only after a threshold.\r\n\r\nMore details here: https://github.com/torvalds/linux/commit/c69e6eafff5f725bc29dcb8b52b6782dca8ea8a2\r\n\r\nThis could be another TODO idem, not to resolve now :-)', 'comment_created': datetime.datetime(2021, 9, 7, 13, 27, 29, tzinfo=datetime.timezone.utc), 'commenter': 'stefano-garzarella', 'type': 'User'}, {'comment_id': 703803786, 'comment_body': '> Maybe we can save the last port used and restart from it, instead of restarting from 0 every time, but I saw your TODO item, so we can do later.\r\n\r\nIt actually starts from the last allocated port, although this may change slightly if I can get the space efficient solution working. ', 'comment_created': datetime.datetime(2021, 9, 7, 20, 21, 15, tzinfo=datetime.timezone.utc), 'commenter': 'harshanavkis', 'type': 'User'}, {'comment_id': 703808222, 'comment_body': '> Another TODO item can be a test to check if we use all the ports we receive the expected error.\r\n\r\nOk. Not sure if I should do this right away? The metadata to track the used ports would be atleast 2^32 times the size of the hash structure in the hashset.\r\n', 'comment_created': datetime.datetime(2021, 9, 7, 20, 28, 42, tzinfo=datetime.timezone.utc), 'commenter': 'harshanavkis', 'type': 'User'}, {'comment_id': 704055745, 'comment_body': 'Before that I must say I am getting a bit more confused here :)\r\n\r\nIf I look at enqueue() and dequeue(), it looks like self.queue can hold multiple RxOps together. But if I look at peek(), it returns the first value set in there.\r\n\r\nCan you clarify on how this is supposed to be used first ?', 'comment_created': datetime.datetime(2021, 9, 8, 5, 21, 24, tzinfo=datetime.timezone.utc), 'commenter': 'vireshk', 'type': 'User'}, {'comment_id': 704104108, 'comment_body': '> > Maybe we can save the last port used and restart from it, instead of restarting from 0 every time, but I saw your TODO item, so we can do later.\r\n> \r\n> It actually starts from the last allocated port, although this may change slightly if I can get the space efficient solution working.\r\n\r\nRight :-) I was a bit confused...', 'comment_created': datetime.datetime(2021, 9, 8, 6, 52, 36, tzinfo=datetime.timezone.utc), 'commenter': 'stefano-garzarella', 'type': 'User'}, {'comment_id': 704104377, 'comment_body': ""> > Another TODO item can be a test to check if we use all the ports we receive the expected error.\r\n> \r\n> Ok. Not sure if I should do this right away? The metadata to track the used ports would be atleast 2^32 times the size of the hash structure in the hashset.\r\n\r\nYep, so let's do it later."", 'comment_created': datetime.datetime(2021, 9, 8, 6, 53, 1, tzinfo=datetime.timezone.utc), 'commenter': 'stefano-garzarella', 'type': 'User'}, {'comment_id': 704671758, 'comment_body': 'I need some time to test this out, so just added a TODO for now.', 'comment_created': datetime.datetime(2021, 9, 8, 18, 28, 8, tzinfo=datetime.timezone.utc), 'commenter': 'harshanavkis', 'type': 'User'}, {'comment_id': 705070616, 'comment_body': ""Yep sure, I just wanted to let you know, there's no need to do it now, it's just an optimization :-)"", 'comment_created': datetime.datetime(2021, 9, 9, 7, 40, 32, tzinfo=datetime.timezone.utc), 'commenter': 'stefano-garzarella', 'type': 'User'}, {'comment_id': 705218841, 'comment_body': 'self.queue is just a bitmap, so it stores a single operation of each kind(the location in the bitmap specifies the kind of request) for each connection. For example it can hold a single request for credit_update or OP_REQUEST etc. This is ok as each connection is ""connection oriented"" and processes a single request of each kind at any given time. So enqueue and dequeue push and pop operations into the queue by setting and un-setting a bit respectively. Hence, we need peek to just look at the first available operation and return that.', 'comment_created': datetime.datetime(2021, 9, 9, 10, 57, 44, tzinfo=datetime.timezone.utc), 'commenter': 'harshanavkis', 'type': 'User'}, {'comment_id': 739245822, 'comment_body': ""Maybe it's a leftover and we can eliminate this line :-)"", 'comment_created': datetime.datetime(2021, 10, 29, 13, 43, 37, tzinfo=datetime.timezone.utc), 'commenter': 'stefano-garzarella', 'type': 'User'}, {'comment_id': 746896628, 'comment_body': 'this is a little dissapointing because we add a lot of code and it seems fairly unexercised by unit tests.', 'comment_created': datetime.datetime(2021, 11, 10, 18, 58, 50, tzinfo=datetime.timezone.utc), 'commenter': 'stsquad', 'type': 'User'}, {'comment_id': 746896636, 'comment_body': 'instead of tracking num_descr you can just look at descr_vec.len();', 'comment_created': datetime.datetime(2021, 11, 10, 18, 58, 51, tzinfo=datetime.timezone.utc), 'commenter': 'stsquad', 'type': 'User'}, {'comment_id': 746896637, 'comment_body': ""in fact a match descr_vec.len() might be better because you can error out if you don't have exactly 2 descriptors which the code here assumes."", 'comment_created': datetime.datetime(2021, 11, 10, 18, 58, 51, tzinfo=datetime.timezone.utc), 'commenter': 'stsquad', 'type': 'User'}, {'comment_id': 746896638, 'comment_body': 'same comment as above - use descr_vec.len', 'comment_created': datetime.datetime(2021, 11, 10, 18, 58, 51, tzinfo=datetime.timezone.utc), 'commenter': 'stsquad', 'type': 'User'}, {'comment_id': 746896644, 'comment_body': 'is it possible to invert the logic above and do a match on pkt.op() and cleanly handle the various ops. You could test for the key and handle the result inside the VSOCK_OP_REQUEST => match.', 'comment_created': datetime.datetime(2021, 11, 10, 18, 58, 51, tzinfo=datetime.timezone.utc), 'commenter': 'stsquad', 'type': 'User'}, {'comment_id': 746896648, 'comment_body': ""can't we just use a bind(0) and let the kernel safely allocate a local port for us?"", 'comment_created': datetime.datetime(2021, 11, 10, 18, 58, 51, tzinfo=datetime.timezone.utc), 'commenter': 'stsquad', 'type': 'User'}, {'comment_id': 746896652, 'comment_body': ""isn't this a job for Arc?"", 'comment_created': datetime.datetime(2021, 11, 10, 18, 58, 51, tzinfo=datetime.timezone.utc), 'commenter': 'stsquad', 'type': 'User'}, {'comment_id': 775474153, 'comment_body': ""If I understand this question correctly, I would say no. This is because we don't use the kernel for emulating the device (or anything else) as it is done in userspace."", 'comment_created': datetime.datetime(2021, 12, 27, 12, 13, 16, tzinfo=datetime.timezone.utc), 'commenter': 'harshanavkis', 'type': 'User'}, {'comment_id': 775556431, 'comment_body': '@stsquad I am not sure about that. Since the VsockThreadBackend contains the state information of the current connections and since we need to add/delete connections when we get a VSOCK_OP_REQUEST or VSOCK_OP_RST, respectively, I think it makes sense to do it here, let me know what you think. However, I changed the per connection (VsockConnection) send_pkt to be implemented using a match. ', 'comment_created': datetime.datetime(2021, 12, 27, 15, 56, 51, tzinfo=datetime.timezone.utc), 'commenter': 'harshanavkis', 'type': 'User'}, {'comment_id': 781763149, 'comment_body': 'The parent ""src/"" directory is removed now, you can move your code to vsock folder.', 'comment_created': datetime.datetime(2022, 1, 11, 5, 13, 21, tzinfo=datetime.timezone.utc), 'commenter': 'vireshk', 'type': 'User'}, {'comment_id': 781763471, 'comment_body': 'What has changed in this file here? Why is it shoiwing up here ? ', 'comment_created': datetime.datetime(2022, 1, 11, 5, 14, 39, tzinfo=datetime.timezone.utc), 'commenter': 'vireshk', 'type': 'User'}, {'comment_id': 781763682, 'comment_body': 'Please move to same versions of dependencies as in the I2C crate, we have moved to latest of many dependencies like vhost-user-backend, etc. Some of the dependencies have moved to crates.io as well. And it would be easier as well now to update since I2C code is already updated with them.', 'comment_created': datetime.datetime(2022, 1, 11, 5, 15, 21, tzinfo=datetime.timezone.utc), 'commenter': 'vireshk', 'type': 'User'}, {'comment_id': 781763832, 'comment_body': 'Please arrange dependencies in ascending order, maes is more readable.', 'comment_created': datetime.datetime(2022, 1, 11, 5, 15, 49, tzinfo=datetime.timezone.utc), 'commenter': 'vireshk', 'type': 'User'}, {'comment_id': 781766179, 'comment_body': 'You also need to update top level README to add a link to this.', 'comment_created': datetime.datetime(2022, 1, 11, 5, 23, 18, tzinfo=datetime.timezone.utc), 'commenter': 'vireshk', 'type': 'User'}, {'comment_id': 781767359, 'comment_body': 'Why is this required ? ', 'comment_created': datetime.datetime(2022, 1, 11, 5, 26, 47, tzinfo=datetime.timezone.utc), 'commenter': 'vireshk', 'type': 'User'}, {'comment_id': 781767475, 'comment_body': 'Should this be vhu_vsock_thread ?', 'comment_created': datetime.datetime(2022, 1, 11, 5, 27, 10, tzinfo=datetime.timezone.utc), 'commenter': 'vireshk', 'type': 'User'}, {'comment_id': 781768773, 'comment_body': 'Can we do this the Yaml way? That moves all these details to a separate file and cleans main.rs. Look at i2c/src/cli.yaml.', 'comment_created': datetime.datetime(2022, 1, 11, 5, 31, 13, tzinfo=datetime.timezone.utc), 'commenter': 'vireshk', 'type': 'User'}, {'comment_id': 781771339, 'comment_body': ""Looks like this supports a single VM at a time? Don't we want to support multiple VMs with a single daemon, via different threads ? "", 'comment_created': datetime.datetime(2022, 1, 11, 5, 38, 53, tzinfo=datetime.timezone.utc), 'commenter': 'vireshk', 'type': 'User'}, {'comment_id': 781772424, 'comment_body': 'We have moved to use thiserror crate, please migrate to it.', 'comment_created': datetime.datetime(2022, 1, 11, 5, 41, 59, tzinfo=datetime.timezone.utc), 'commenter': 'vireshk', 'type': 'User'}, {'comment_id': 781773006, 'comment_body': ""Also this should be pub(crate) at best, we don't need to export it out of the crate, right ? Please check this elsewhere as well."", 'comment_created': datetime.datetime(2022, 1, 11, 5, 43, 24, tzinfo=datetime.timezone.utc), 'commenter': 'vireshk', 'type': 'User'}, {'comment_id': 781773782, 'comment_body': 'Why are you using raw pointers in this structure ? You should avoid doing that in Rust unless absolutely necessary, for example when this strucutre is going to be shared with another firmware or kernel.', 'comment_created': datetime.datetime(2022, 1, 11, 5, 45, 14, tzinfo=datetime.timezone.utc), 'commenter': 'vireshk', 'type': 'User'}, {'comment_id': 781774453, 'comment_body': 'Better to write grammatically correct statements in comments too.', 'comment_created': datetime.datetime(2022, 1, 11, 5, 46, 44, tzinfo=datetime.timezone.utc), 'commenter': 'vireshk', 'type': 'User'}, {'comment_id': 781775079, 'comment_body': 'You can automatically move all descriptors in a vector with chain.collect().', 'comment_created': datetime.datetime(2022, 1, 11, 5, 48, 18, tzinfo=datetime.timezone.utc), 'commenter': 'vireshk', 'type': 'User'}, {'comment_id': 781778007, 'comment_body': ""This doesn't look safe. The memory may get freed while the pointer is still in use. And so we should really avoid using these types here."", 'comment_created': datetime.datetime(2022, 1, 11, 5, 56, 34, tzinfo=datetime.timezone.utc), 'commenter': 'vireshk', 'type': 'User'}, {'comment_id': 781778747, 'comment_body': 'Maybe we can just call unwrap() for all statements where we expect ok() result ?', 'comment_created': datetime.datetime(2022, 1, 11, 5, 58, 44, tzinfo=datetime.timezone.utc), 'commenter': 'vireshk', 'type': 'User'}, {'comment_id': 782436166, 'comment_body': 'Not sure about this, I think we wanted to have one device per VM as we wanted to integrate it with kata initially. Maybe @stefano-garzarella can correct me?', 'comment_created': datetime.datetime(2022, 1, 11, 18, 49, 26, tzinfo=datetime.timezone.utc), 'commenter': 'harshanavkis', 'type': 'User'}, {'comment_id': 782814232, 'comment_body': 'This is how the vsock packet is defined in cloud-hypervisor and how it was defined a while ago in firecracker. I recently worked on [a POC](https://github.com/lauralt/vm-virtio/tree/vsock_packet) for a  `VolatileSlice` based VsockPacket. A `VolatileSlice` is basically a safe wrapper over a raw pointer. I just had a better look at this packet implementation, and it should be pretty straightforward to switch to the `VolatileSlice` based one (either now or after we agree on the design in vm-virtio, and start to merge things in the vsock crate from there).', 'comment_created': datetime.datetime(2022, 1, 12, 8, 34, 11, tzinfo=datetime.timezone.utc), 'commenter': 'lauralt', 'type': 'User'}, {'comment_id': 782869058, 'comment_body': 'Yep, we support a single VM, also for the configuration would become complicated since we have to provide cid and Unix socket paths for each VM.\r\nMaybe in the future we can extend it, but for now I think is fine to support a single VM, especially for the Kata use case.', 'comment_created': datetime.datetime(2022, 1, 12, 9, 27, 21, tzinfo=datetime.timezone.utc), 'commenter': 'stefano-garzarella', 'type': 'User'}, {'comment_id': 785685237, 'comment_body': 'Okay, no problem. That should be fine for now.', 'comment_created': datetime.datetime(2022, 1, 17, 7, 8, 29, tzinfo=datetime.timezone.utc), 'commenter': 'vireshk', 'type': 'User'}, {'comment_id': 785686323, 'comment_body': 'Thanks for the details @lauralt ', 'comment_created': datetime.datetime(2022, 1, 17, 7, 10, 53, tzinfo=datetime.timezone.utc), 'commenter': 'vireshk', 'type': 'User'}, {'comment_id': 787781268, 'comment_body': ""I've just been looking at this code and wondering why we can't use an existing buffer implementation from the standard crates? "", 'comment_created': datetime.datetime(2022, 1, 19, 14, 9, 51, tzinfo=datetime.timezone.utc), 'commenter': 'stsquad', 'type': 'User'}, {'comment_id': 788008123, 'comment_body': 'There is now a branch with this work done: https://github.com/stsquad/vhost-device/tree/review/pr7-with-laurat-abstraction', 'comment_created': datetime.datetime(2022, 1, 19, 18, 0, 25, tzinfo=datetime.timezone.utc), 'commenter': 'stsquad', 'type': 'User'}, {'comment_id': 788558768, 'comment_body': ""@harshanavkis Now that v14 of the container is available, I tried to move to a non-beta version of clap and unfortunately it doesn't support Yamls stuff anymore :(\r\n\r\nThought, the good news is that the new interface you can use now is much simpler than both previous approaches. I have made sample updates here:\r\n\r\nhttps://github.com/rust-vmm/vhost-device/pull/93"", 'comment_created': datetime.datetime(2022, 1, 20, 9, 25, 36, tzinfo=datetime.timezone.utc), 'commenter': 'vireshk', 'type': 'User'}, {'comment_id': 954647766, 'comment_body': ""Does the standard library provide such crate? We are usually looking to reduce the number of external dependencies. I will continue working on upstreaming this and the other vsock components sometime in the near future, but if we can't use something from `std`, I think I would be in favor of using a local implementation (hopefully we can simplify the one we have here)."", 'comment_created': datetime.datetime(2022, 8, 25, 8, 13, 38, tzinfo=datetime.timezone.utc), 'commenter': 'lauralt', 'type': 'User'}]","[{'commit_sha': '53407ae1d0e563117775115df651c50e4eb224a3', 'committer_username': 'harshanavkis', 'committer_name': 'Harshavardhan Unnibhavi', 'committer_email': 'harshanavkis@gmail.com', 'commit_date': datetime.datetime(2015, 11, 25, 14, 38, 39, tzinfo=datetime.timezone.utc)}]",Harshavardhan Unnibhavi,16018543,harshanavkis@gmail.com,User,,76,,26,20
694296501,Inflight I/O: Implement missing traits,"This commit implements the get and set inflight fd members of the
VhostUserSlaveReqHandlerMut trait, which is used to pass inflight
I/O queue tracking regions as memfds.

Fixes #14.

Signed-off-by: Harshavardhan Unnibhavi <harshanavkis@gmail.com>",False,20,https://api.github.com/repos/rust-vmm/vhost-user-backend/pulls/20,https://github.com/rust-vmm/vhost-user-backend/pull/20,open,498,23,3,2,7,30,0,0,[],2021-07-21 11:40:38+00:00,,0.0,,"[{'comment_id': 673937654, 'comment_body': 'Could you please use `libc` instead of `nix`?', 'comment_created': datetime.datetime(2021, 7, 21, 12, 43, 59, tzinfo=datetime.timezone.utc), 'commenter': 'sboeuf', 'type': 'User'}, {'comment_id': 674745883, 'comment_body': ""Did you use `vu_get_inflight_fd()` from https://github.com/qemu/qemu/blob/master/subprojects/libvhost-user/libvhost-user.c#L1654 as a reference?\r\nFrom what I see, you forgot to call into `fcntl(*fd, F_ADD_SEALS, flags)` in order to add `F_SEAL_GROW`, `F_SEAL_SHRINK` and `F_SEAL_SEAL` to setup the proper seals, and you didn't `mmap()` the fd into the `vhost-user` process address space."", 'comment_created': datetime.datetime(2021, 7, 22, 12, 22, 30, tzinfo=datetime.timezone.utc), 'commenter': 'sboeuf', 'type': 'User'}, {'comment_id': 674750357, 'comment_body': ""Same here, please use https://github.com/qemu/qemu/blob/master/subprojects/libvhost-user/libvhost-user.c#L1706 as a reference, and make sure to update the file after you called into `mmap()`.\r\nThe previous `inflight_file` will be closed automatically by Rust since you're replacing it with the new file you just received, so we're good there. But you must also `unmap` what has been previously mapped through `get_inflight_fd()`. That's why you need to store something like `inflight_mapping_addr: Option<GuestAddress>` to be able to know if a previous mapping happened."", 'comment_created': datetime.datetime(2021, 7, 22, 12, 29, 9, tzinfo=datetime.timezone.utc), 'commenter': 'sboeuf', 'type': 'User'}, {'comment_id': 705975503, 'comment_body': 'https://github.com/rust-vmm/vhost/pull/84 is merged, so we can use the https://github.com/rust-vmm/vhost git repository', 'comment_created': datetime.datetime(2021, 9, 10, 7, 55, 52, tzinfo=datetime.timezone.utc), 'commenter': 'stefano-garzarella', 'type': 'User'}, {'comment_id': 706011891, 'comment_body': 'Maybe is better to set `rev` to avoid breaking the build.', 'comment_created': datetime.datetime(2021, 9, 10, 8, 51, 1, tzinfo=datetime.timezone.utc), 'commenter': 'stefano-garzarella', 'type': 'User'}, {'comment_id': 706027039, 'comment_body': 'Unsafe code must be accompanied by comments saying why is the use actually safe.', 'comment_created': datetime.datetime(2021, 9, 10, 9, 13, 27, tzinfo=datetime.timezone.utc), 'commenter': 'andreeaflorescu', 'type': 'User'}, {'comment_id': 706265671, 'comment_body': 'Can we replace `vhost::vhost_user::Error` with `VhostUserError`?', 'comment_created': datetime.datetime(2021, 9, 10, 15, 15, 47, tzinfo=datetime.timezone.utc), 'commenter': 'stefano-garzarella', 'type': 'User'}, {'comment_id': 708046416, 'comment_body': 'better to move line 32-33 to near line 11. So we could group dependency as\r\n- std\r\n- external crate\r\n- self crate', 'comment_created': datetime.datetime(2021, 9, 14, 8, 38, 58, tzinfo=datetime.timezone.utc), 'commenter': 'jiangliu', 'type': 'User'}, {'comment_id': 708050317, 'comment_body': 'Reference to ""virtio_bindings::bindings::virtio_net::VIRTIO_F_RING_PACKED"" in generic vhost library seems strange, maybe we should enhance virito_bindings too.', 'comment_created': datetime.datetime(2021, 9, 14, 8, 43, 36, tzinfo=datetime.timezone.utc), 'commenter': 'jiangliu', 'type': 'User'}, {'comment_id': 708053894, 'comment_body': ""It's more straight-forward to make memfd_alloc() to return `(mmap_ptr, inflight_file)`."", 'comment_created': datetime.datetime(2021, 9, 14, 8, 47, 52, tzinfo=datetime.timezone.utc), 'commenter': 'jiangliu', 'type': 'User'}, {'comment_id': 708055137, 'comment_body': 'We have already build an File object from `inflight_fd`, so it will cause double close of the underlying `inflight_fd` and then bad thing may happen. You should `dup(inflight_fd)` here.', 'comment_created': datetime.datetime(2021, 9, 14, 8, 49, 20, tzinfo=datetime.timezone.utc), 'commenter': 'jiangliu', 'type': 'User'}, {'comment_id': 708057088, 'comment_body': 'It would better to introduce a `struct InflightFdState`, and move all related methods to this new object.', 'comment_created': datetime.datetime(2021, 9, 14, 8, 51, 37, tzinfo=datetime.timezone.utc), 'commenter': 'jiangliu', 'type': 'User'}, {'comment_id': 708059059, 'comment_body': 'In other word, OOP based design is better here:)', 'comment_created': datetime.datetime(2021, 9, 14, 8, 53, 57, tzinfo=datetime.timezone.utc), 'commenter': 'jiangliu', 'type': 'User'}, {'comment_id': 773524283, 'comment_body': '@jiangliu does this mean I should open another pull request to virtio_bindings and move ""VIRTIO_F_RING_PACKED"" higher up? ', 'comment_created': datetime.datetime(2021, 12, 22, 0, 31, 42, tzinfo=datetime.timezone.utc), 'commenter': 'harshanavkis', 'type': 'User'}, {'comment_id': 773535355, 'comment_body': ""Sorry, it's an issue of virtio-bindings, and there's already an issue for it:\r\nhttps://github.com/rust-vmm/virtio-bindings/issues/4\r\n\r\nso let's move on with current solution, otherwise you will get blocked."", 'comment_created': datetime.datetime(2021, 12, 22, 1, 10, 28, tzinfo=datetime.timezone.utc), 'commenter': 'jiangliu', 'type': 'User'}, {'comment_id': 773939287, 'comment_body': 'line 10 and 11 could be merged into one line.', 'comment_created': datetime.datetime(2021, 12, 22, 14, 42, 47, tzinfo=datetime.timezone.utc), 'commenter': 'jiangliu', 'type': 'User'}, {'comment_id': 773941424, 'comment_body': ""Line 113 to 117 should have been changed to\r\n```\r\npub struct VhostUserHandler<S, V, B: Bitmap + 'static> {\r\n```\r\nin last MR.  Seems something messed up during rebase? "", 'comment_created': datetime.datetime(2021, 12, 22, 14, 45, 48, tzinfo=datetime.timezone.utc), 'commenter': 'jiangliu', 'type': 'User'}, {'comment_id': 773942340, 'comment_body': 'ditto, seems like another issue from rebase.', 'comment_created': datetime.datetime(2021, 12, 22, 14, 47, 5, tzinfo=datetime.timezone.utc), 'commenter': 'jiangliu', 'type': 'User'}, {'comment_id': 773962276, 'comment_body': ""Yes, think it's fixed now."", 'comment_created': datetime.datetime(2021, 12, 22, 15, 13, 6, tzinfo=datetime.timezone.utc), 'commenter': 'harshanavkis', 'type': 'User'}, {'comment_id': 773981738, 'comment_body': 'This seems like a unnecessary change too.', 'comment_created': datetime.datetime(2021, 12, 22, 15, 38, 36, tzinfo=datetime.timezone.utc), 'commenter': 'jiangliu', 'type': 'User'}, {'comment_id': 773982473, 'comment_body': 'Please change line 839-843 to\r\n```\r\nimpl<S, V, B: Bitmap> Drop for VhostUserHandler<S, V, B>\r\n```', 'comment_created': datetime.datetime(2021, 12, 22, 15, 39, 37, tzinfo=datetime.timezone.utc), 'commenter': 'jiangliu', 'type': 'User'}, {'comment_id': 773984553, 'comment_body': 'inflight_file is a RawFd, so it need to be manually closed on error handling path. Otherwise it will get leaked.', 'comment_created': datetime.datetime(2021, 12, 22, 15, 42, 35, tzinfo=datetime.timezone.utc), 'commenter': 'jiangliu', 'type': 'User'}, {'comment_id': 773985528, 'comment_body': 'We need to handle the case that mmap fails.', 'comment_created': datetime.datetime(2021, 12, 22, 15, 43, 59, tzinfo=datetime.timezone.utc), 'commenter': 'jiangliu', 'type': 'User'}, {'comment_id': 773988152, 'comment_body': ""The inflight_file is actually a RawFd, and it's error prone to deal with RawFd. \r\nSo it would be better to convert the infight_file from RawFd into a File object, which eases the error handling cases."", 'comment_created': datetime.datetime(2021, 12, 22, 15, 47, 32, tzinfo=datetime.timezone.utc), 'commenter': 'jiangliu', 'type': 'User'}, {'comment_id': 773991519, 'comment_body': ""Need a comment why it's safe to call unwrap() here."", 'comment_created': datetime.datetime(2021, 12, 22, 15, 52, 20, tzinfo=datetime.timezone.utc), 'commenter': 'jiangliu', 'type': 'User'}, {'comment_id': 773996213, 'comment_body': 'How about this for code readability:\r\n```\r\nlet mut regions = unsafe { slice::from_raw_parts_mut(inflight_region as *mut QueueRegionSplit, num_queues as usize) };\r\nregions.iter_mut().map(|v| v.desc_num = queue_size);\r\n```', 'comment_created': datetime.datetime(2021, 12, 22, 15, 58, 49, tzinfo=datetime.timezone.utc), 'commenter': 'jiangliu', 'type': 'User'}, {'comment_id': 773997690, 'comment_body': 'I see, makes sense. Perhaps we should add a new error enum into vhost_user::Error?', 'comment_created': datetime.datetime(2021, 12, 22, 16, 0, 50, tzinfo=datetime.timezone.utc), 'commenter': 'harshanavkis', 'type': 'User'}, {'comment_id': 773999910, 'comment_body': 'Seems it will get simpler if moves following ""sef.inflight_state.set_inflight_state()"" into memfd_alloc()', 'comment_created': datetime.datetime(2021, 12, 22, 16, 3, 50, tzinfo=datetime.timezone.utc), 'commenter': 'jiangliu', 'type': 'User'}, {'comment_id': 774003591, 'comment_body': ""It could be solved/refined by refactor the code. The suggestion is to avoid RawFd if possible, because it doesn't solve the file descriptor ownership. The way to avoid RawFd is to convert it into File as soon as possible. And it's safe and easy to get RawFd from File object by file.as_raw_fd()."", 'comment_created': datetime.datetime(2021, 12, 22, 16, 9, 4, tzinfo=datetime.timezone.utc), 'commenter': 'jiangliu', 'type': 'User'}, {'comment_id': 774087411, 'comment_body': 'Rust complains about unsused Map because of lazy iterators so I changed it slightly, let me know what you think.', 'comment_created': datetime.datetime(2021, 12, 22, 18, 28, 43, tzinfo=datetime.timezone.utc), 'commenter': 'harshanavkis', 'type': 'User'}]","[{'commit_sha': 'c3e1198d77aeade173b495b1a8dec8622b52260e', 'committer_username': 'harshanavkis', 'committer_name': 'Harshavardhan Unnibhavi', 'committer_email': 'harshanavkis@gmail.com', 'commit_date': datetime.datetime(2015, 11, 25, 14, 38, 39, tzinfo=datetime.timezone.utc)}, {'commit_sha': '89e34929774429cce4329ff4f9e3f358a10a5e3d', 'committer_username': 'harshanavkis', 'committer_name': 'Harshavardhan Unnibhavi', 'committer_email': 'harshanavkis@gmail.com', 'commit_date': datetime.datetime(2015, 11, 25, 14, 38, 39, tzinfo=datetime.timezone.utc)}]",Harshavardhan Unnibhavi,16018543,harshanavkis@gmail.com,User,,76,,26,20

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
171633708,vhost,rust-vmm/vhost,Rust,64,126,24,47,456,13,3,4,"[{'id': 731039348, 'number': 84, 'closed': datetime.datetime(2021, 9, 10, 7, 51, 2, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 9, 9, 23, 41, 11, tzinfo=datetime.timezone.utc), 'time_taken': 29391.0, 'time_delta': '8:09:51', 'additions': 18, 'deletions': 1, 'state': 'closed'}, {'id': 696554166, 'number': 59, 'closed': datetime.datetime(2021, 7, 26, 9, 7, 2, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 25, 19, 43, 9, tzinfo=datetime.timezone.utc), 'time_taken': 48233.0, 'time_delta': '13:23:53', 'additions': 28, 'deletions': 28, 'state': 'closed'}, {'id': 696553611, 'number': 58, 'closed': datetime.datetime(2021, 7, 25, 19, 38, 46, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 25, 19, 38, 31, tzinfo=datetime.timezone.utc), 'time_taken': 15.0, 'time_delta': '0:00:15', 'additions': 48, 'deletions': 60, 'state': 'closed'}, {'id': 686203648, 'number': 54, 'closed': datetime.datetime(2021, 7, 21, 8, 43, 29, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 8, 17, 34, 12, tzinfo=datetime.timezone.utc), 'time_taken': 1091357.0, 'time_delta': '12 days, 15:09:17', 'additions': 17, 'deletions': 29, 'state': 'closed'}, {'id': 680942530, 'number': 52, 'closed': datetime.datetime(2021, 7, 7, 12, 30, 55, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 30, 14, 43, 20, tzinfo=datetime.timezone.utc), 'time_taken': 596855.0, 'time_delta': '6 days, 21:47:35', 'additions': 146, 'deletions': 1, 'state': 'closed'}]"
370942225,vhost-device,rust-vmm/vhost-device,Rust,46,65,14,35,1080,28,3,11,"[{'id': 722851469, 'number': 14, 'closed': datetime.datetime(2021, 8, 31, 11, 34, 32, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 30, 22, 0, 42, tzinfo=datetime.timezone.utc), 'time_taken': 48830.0, 'time_delta': '13:33:50', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 706786247, 'number': 7, 'closed': datetime.datetime(2022, 10, 12, 15, 26, 39, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 9, 19, 38, 13, tzinfo=datetime.timezone.utc), 'time_taken': 37050506.0, 'time_delta': '428 days, 19:48:26', 'additions': 3153, 'deletions': 0, 'state': 'closed'}]"
296298772,vhost-user-backend,rust-vmm/vhost-user-backend,Rust,16,18,16,17,150,5,2,1,"[{'id': 694296501, 'number': 20, 'closed': None, 'created': datetime.datetime(2021, 7, 21, 11, 40, 38, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 498, 'deletions': 23, 'state': 'open'}]"
