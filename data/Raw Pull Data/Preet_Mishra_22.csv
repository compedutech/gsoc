pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
418080380,views: Refactor popups to expedite the popup creation process.,"The intention is to extract and generalize duplicate code to expedite the popup creation process.

Along with that, it tidies up popups, that derive from PopUpView, by calculating their required width and height based on the content instead of using hard-coded values.

Tests amended.

As a side effect, fixes #654 and #658.",True,659,https://api.github.com/repos/zulip/zulip-terminal/pulls/659,https://github.com/zulip/zulip-terminal/pull/659,closed,115,76,4,6,11,72,2,0,"[{'name': 'area: UI'}, {'name': 'size: XL'}]",2020-05-14 15:41:42+00:00,2020-06-11 18:59:34+00:00,2431072.0,"28 days, 3:17:52","[{'comment_id': 425238554, 'comment_body': 'This was redundant.', 'comment_created': datetime.datetime(2020, 5, 14, 15, 44, 9, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 426100981, 'comment_body': 'It looks odd to be returning one value and setting another; could you just return all the data? Can this be a static method?', 'comment_created': datetime.datetime(2020, 5, 16, 0, 58, 7, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 426101028, 'comment_body': 'Same points here as for `max_widths`.', 'comment_created': datetime.datetime(2020, 5, 16, 0, 58, 49, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 426101431, 'comment_body': ""You're passing these values in (contents, title_len, dividechars), to use them in an interior method and only contents otherwise. How might this look if you didn't nest the calls, but called them sequentially?"", 'comment_created': datetime.datetime(2020, 5, 16, 1, 2, 30, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 426102548, 'comment_body': ""You've compacted the generation of this data-structure, and while it's great that the data is more localized than it was when mixed with the UI elements, it's not quite as clear as it was before - it has a lot of nested elements."", 'comment_created': datetime.datetime(2020, 5, 16, 1, 13, 14, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 426103004, 'comment_body': 'I know that `title_len` is what is really passed in, but this value need not be the length of the title - what does it mean to pass in a certain value, for the purposes of these functions? Does that give you an idea for a better name?', 'comment_created': datetime.datetime(2020, 5, 16, 1, 18, 15, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 426103189, 'comment_body': 'Is this intended as 3 separate categories with no name?', 'comment_created': datetime.datetime(2020, 5, 16, 1, 20, 6, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 426103483, 'comment_body': ""Is there a reason you didn't tidy this title duplication in addition to the other title changes?"", 'comment_created': datetime.datetime(2020, 5, 16, 1, 23, 33, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 426716647, 'comment_body': 'Yes.', 'comment_created': datetime.datetime(2020, 5, 18, 15, 37, 14, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 426716719, 'comment_body': 'Thanks for pointing it out. I missed it.', 'comment_created': datetime.datetime(2020, 5, 18, 15, 37, 21, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 426722725, 'comment_body': ""There are corner cases wherein the calculated width for the 'content' is smaller than the popup title. I use `title_len` to make sure that the calculated width is wide enough to display the popup title every time.\r\n\r\nI will rename this to something better."", 'comment_created': datetime.datetime(2020, 5, 18, 15, 45, 55, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 428164729, 'comment_body': ""This is a nice find :+1: \r\n\r\n`description` is only used first here, so I'd move it to just above."", 'comment_created': datetime.datetime(2020, 5, 20, 16, 54, 9, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 428489971, 'comment_body': ""This change doesn't just fix a bug, it changes the behavior of the spacing to each side; is that intentional?"", 'comment_created': datetime.datetime(2020, 5, 21, 7, 25, 53, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 428516230, 'comment_body': ""Should this be in the loop? I can't test now due to the czo reactions issue, but does the help menu look the same as before?\r\nI think that was the intention of the `enumerate`."", 'comment_created': datetime.datetime(2020, 5, 21, 8, 27, 6, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 428517528, 'comment_body': 'Although this is static, you can still use `self.make_chart` to access the method. For the same reason as using `super()`, that avoids coupling in case the name changes.', 'comment_created': datetime.datetime(2020, 5, 21, 8, 29, 46, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 428518557, 'comment_body': ""It's worth noting when/why; this was in the original code?"", 'comment_created': datetime.datetime(2020, 5, 21, 8, 31, 52, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 428772013, 'comment_body': ""Earlier, in the help menu, the style started alternating from every 'category'. For instance,\r\n```diff\r\nCategory 1\r\n+\r\n-\r\n+\r\n\r\nCategory 2\r\n+\r\n-\r\n+\r\n```\r\n\r\nHowever, now the style starts from the first strip and keeps alternating for every strip. For instance,\r\n```diff\r\nCategory 1\r\n+\r\n-\r\n+\r\n\r\nCategory 2\r\n-\r\n+\r\n-\r\n```\r\n\r\nIn addition to that, the new alternate styling is needed for the change. Otherwise, consecutive stripes that don't have categories would end up looking like:\r\n```diff\r\n+\r\n+\r\n+\r\n\r\nCategory 1\r\n+\r\n-\r\n+\r\n```\r\nInstead of:\r\n```diff\r\n+\r\n-\r\n+\r\n\r\nCategory 1\r\n-\r\n+\r\n-\r\n```\r\n\r\n`+`: `popup_constrast`\r\n`-`: `None`"", 'comment_created': datetime.datetime(2020, 5, 21, 16, 36, 18, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 428774540, 'comment_body': ""Thanks! I'll fix it."", 'comment_created': datetime.datetime(2020, 5, 21, 16, 40, 36, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 428774877, 'comment_body': 'Yes, that is how the bug gets fixed.', 'comment_created': datetime.datetime(2020, 5, 21, 16, 41, 10, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 428805530, 'comment_body': ""My preference is for the existing consistent line style after the category title; are you changing the behavior since you prefer the alternating style, or because the code is currently simpler with the un-categorized style, and results in that change as a side-effect?\r\n\r\nCan we retain the original behavior if we group the '+++' lines into one category instead?"", 'comment_created': datetime.datetime(2020, 5, 21, 17, 35, 7, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 428810011, 'comment_body': ""Well, this has two effects, as I understand it:\r\n* it fixes the bug with an empty description, where the title isn't listed (?)\r\n* it removes a border of one space either side where there are descriptions\r\n\r\nI understand that this is a bugfix for the former, but the latter isn't obvious.\r\n\r\nTo clarify, we don't always have left/right padding in popups, but I'm not sure if we want to change this behavior for now?"", 'comment_created': datetime.datetime(2020, 5, 21, 17, 43, 27, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 429154962, 'comment_body': ""I understand the concern now. I will edit the commit to only do the former i.e. the bugfix. However, since the help menu doesn't add extra spaces, the two extra spaces will eventually get removed in the refactoring commit (`chart_widths`). Would that be okay?\r\n\r\n**Update**: I have removed `StreamInfoView` from the refactors and added a separate commit for it."", 'comment_created': datetime.datetime(2020, 5, 22, 9, 56, 45, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 429224255, 'comment_body': ""I only changed the original behaviour to avoid having '+++' lines for stripes that do not have categories. \r\n\r\nYes, grouping them into one category would work. Thanks!"", 'comment_created': datetime.datetime(2020, 5, 22, 12, 44, 54, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 429262872, 'comment_body': 'I have grouped these into a category as per the discussion in the other comment.', 'comment_created': datetime.datetime(2020, 5, 22, 13, 58, 57, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 429481813, 'comment_body': 'Do you want both the +4 and +2 here? The previous iteration appeared to be OK; maybe desc+2, name+4?', 'comment_created': datetime.datetime(2020, 5, 22, 22, 46, 7, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 429482172, 'comment_body': ""You fixed a bug here, so let's add that to the commit title."", 'comment_created': datetime.datetime(2020, 5, 22, 22, 48, 56, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 429483335, 'comment_body': ""This case is not used in the `HelpView`, so that makes it a little more than a refactor? This might be clearer to add if/when it's used later?"", 'comment_created': datetime.datetime(2020, 5, 22, 22, 56, 40, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 429484046, 'comment_body': ""Same point here as the previous commit; HelpView doesn't use this?"", 'comment_created': datetime.datetime(2020, 5, 22, 23, 0, 59, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 429485200, 'comment_body': ""Do we actually need to pass in the title? Didn't you settle on the length, previously? This is like a `minimum_width` parameter. That said, I see the appeal of just expecting the title, as then we can manage the extra spacing internally (eg. the +4)"", 'comment_created': datetime.datetime(2020, 5, 22, 23, 8, 10, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 429486140, 'comment_body': 'This is actually different behavior - arguably better and more general, but again not just a refactor!\r\n(some of that comes from the other extra feature, ie. the `text_width`, of course)', 'comment_created': datetime.datetime(2020, 5, 22, 23, 14, 13, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 429486928, 'comment_body': ""This reassigning is a bit confusing; it's perfectly valid python, and strictly `Sequence[...]` is compatible with `List[Any]` (can you see where I got those from?), but just using a different name would probably make this clearer :)"", 'comment_created': datetime.datetime(2020, 5, 22, 23, 19, 30, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 429487253, 'comment_body': 'As per the other comment re `help_menu_content` being re-used, using a different name would emphasize why the order is important here.', 'comment_created': datetime.datetime(2020, 5, 22, 23, 21, 33, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 429488942, 'comment_body': ""I like the reactions in a different category - that seems clearer for sure - but what do you think of grouping responses by alternating color line? Currently (in 0.5.1) it's all one color, which is the other extreme. I see we could do this by reaction, or *maybe* even by user? Grouping would also mean we could avoid having 'tada' listed however many times, for example!\r\n\r\nIf this fits within the current feature of the revised popup code, we could make that change in this commit, but otherwise we could delay this until later."", 'comment_created': datetime.datetime(2020, 5, 22, 23, 32, 31, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 429489507, 'comment_body': ""Is this the commit where we'd introduce the one-string form of content? (ie. one column)"", 'comment_created': datetime.datetime(2020, 5, 22, 23, 36, 9, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 429490493, 'comment_body': 'Do we actually need to use this here? I suppose we will need it if we enhance this popup.', 'comment_created': datetime.datetime(2020, 5, 22, 23, 43, 5, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 429490767, 'comment_body': 'Does this change match the refactoring? Another reason that moving the one-column code  into this commit might make sense is that the `len(desc)` code is replaced by the `max(textwidth, ...)` code? So what we use in the first commit should translate to the changes here.', 'comment_created': datetime.datetime(2020, 5, 22, 23, 44, 59, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 429536455, 'comment_body': ""Yes, the +4 adds to the title length (to compensate for those 4 Unicode box drawing characters). I initially removed the +2 but that changed the original behaviour i.e. removed the two extra spaces.\r\n\r\nRe 'desc+2, name+4', I think the +2, in the current iteration, is clearer, it indicates that we are explicitly adding 2 extra spaces to the minimum required width returned by the `max` function."", 'comment_created': datetime.datetime(2020, 5, 23, 11, 6, 6, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 429536740, 'comment_body': 'Yes, this seems appropriate.', 'comment_created': datetime.datetime(2020, 5, 23, 11, 11, 35, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 429538718, 'comment_body': ""The reason I didn't go with `minimum_width` is that even when we pass `minimum_width=len(popup_title)`, we need the +4 in the `table_widths` method which doesn't justify the 'minimum width' name?\r\n\r\nAn alternative could be passing `len(popup_title) + 4` but that wouldn't be clear either (why we're adding +4 to the length?). To address that, we could add a comment but that'd require adding a comment before every call.\r\n\r\nThe approach where we handle the +4 internally allows adding a single comment.\r\n\r\nI could use a suggestion about how to approach this."", 'comment_created': datetime.datetime(2020, 5, 23, 11, 43, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 429563546, 'comment_body': ""The issue is that we don't want to unconditionally add 2, as this could end up with len(title)+6."", 'comment_created': datetime.datetime(2020, 5, 23, 17, 25, 34, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 429571006, 'comment_body': 'Ah, right. `max(len(desc) + 2, len(""# {}"".format(name)) + 4)` would be better. Thanks! ', 'comment_created': datetime.datetime(2020, 5, 23, 19, 14, 33, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 431605824, 'comment_body': 'This `extra_width` parameter is not used at all? Did you have a use for it in another PR or is it old code?', 'comment_created': datetime.datetime(2020, 5, 28, 6, 22, 5, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 431609394, 'comment_body': ""This name seems inconsistent with `table_widths`? We likely use `get_` elsewhere (and could tidy them up), but I'd suggest here using either no prefix or a more descriptive one for both since we're introducing the names, which could be another verb and/or adjective - minimum? calculate? "", 'comment_created': datetime.datetime(2020, 5, 28, 6, 31, 11, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 431634731, 'comment_body': 'minor: the new parameter looks strange added to the first line when others are underneath on their own lines.', 'comment_created': datetime.datetime(2020, 5, 28, 7, 28, 12, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 432279347, 'comment_body': ""I think the approach you have is fine; the duplication and presence of the 'external' title inside the popup widget just felt a little strange, however...\r\n\r\nA consequence of this approach, namely passing the title to each popup constructor since it calculates the width using it, is that it would reduce the duplication in each `show_*` method if the title was a similar assumed attribute, like `width` and `height`? Separately, it might be tidier if we moved those into the base class constructor, to ensure they get set? "", 'comment_created': datetime.datetime(2020, 5, 29, 6, 25, 51, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 432281603, 'comment_body': '(not this line, the commit)\r\n\r\nThis commit (tidy up MsgInfoView) still seems a bit large - it\'s good that you have a good description of what is happening in the commit, but it\'s clearly multiple changes: ""Additionally, ..."" and ""This also ..."" :)\r\n\r\nParticularly the table widths changes are not specific to the msginfoview?', 'comment_created': datetime.datetime(2020, 5, 29, 6, 32, 27, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 432282906, 'comment_body': 'The name/desc parameters have switched, right? Having a value for both would probably be useful, just to indicate what parameter is what, although you could use named parameters too.', 'comment_created': datetime.datetime(2020, 5, 29, 6, 36, 29, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 432283449, 'comment_body': ""This is definitely clearer in the commit you've got it in now :)"", 'comment_created': datetime.datetime(2020, 5, 29, 6, 38, 5, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 432285227, 'comment_body': ""I think we might be able to use the common code later, but I'm not sure if we want to lose the center and spacing for the description, at least right now - I have some streams that look a little strange being left-aligned, and the layout is very 'snug'. Visually that doesn't seem as much of an issue when there are multiple columns and rows, as there is whitespace between columns and each column is often a little wider due to fitting each column in the box properly, but it seems a bit too snug here.\r\n\r\nProvisionally we could have non-column content just centered and padded?"", 'comment_created': datetime.datetime(2020, 5, 29, 6, 43, 16, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 432288357, 'comment_body': ""I appreciate you wanting to get this change in, and group the code, but I'm inclined to hold off on this commit, at least compared to the others. However, `views.py` is getting quite long, so perhaps an alternative might be to split the popups into a new file. We could split the tests out at the same time!"", 'comment_created': datetime.datetime(2020, 5, 29, 6, 51, 57, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 432490938, 'comment_body': ""It isn't used anywhere for now.\r\n\r\nI added for making it easier to add extra width if we ever want to. Should we remove it and add it only when it is needed?"", 'comment_created': datetime.datetime(2020, 5, 29, 13, 43, 1, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 432595389, 'comment_body': ""Let's leave it for now, unless we use it - actually, could it be used for padding the message info?"", 'comment_created': datetime.datetime(2020, 5, 29, 16, 21, 13, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 432618448, 'comment_body': 'While centered and padded content will look good as a standalone item, it will a bit odd in popups which also have two columns (where the left column is left and the right column is right aligned).\r\n\r\nRe \'snug\', I agree. \r\n\r\nOn another note, I see that you\'ve suggested \'mimicking the existing code for now\' (which I assume means using the left column for text and leaving the right column blank). The `StreamInfoView` looks good without the changes that are being introduced in this commit. We could also hold off this commit as ""we don\'t know what we\'ll need in the future"".\r\n\r\nThoughts?', 'comment_created': datetime.datetime(2020, 5, 29, 17, 1, 46, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 432626767, 'comment_body': 'It can only be used to increase the width from the inside - the content in the left column will be still left-aligned and the content in the right column will be still right-aligned. I will leave it for now.', 'comment_created': datetime.datetime(2020, 5, 29, 17, 16, 46, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 432652509, 'comment_body': ""@neiljp With the current (PR) code, one way to group could be using the reaction name for the first reactor and then leaving the subsequent left column blank for other reactors (with alternating `popup_contrast` style).\r\n\r\nFor instance,\r\n```\r\n+1       User 1 (popup_contrast)\r\n         User 2\r\n         User 3 (popup_contrast)\r\ntada     User 1 \r\n         User 2 (popup_contrast)\r\n         User 3 \r\n\r\n```\r\n```python\r\n[('+1', 'User 1'), ('', 'User 2'), ('', 'User 3'), ('tada', 'User 1'), ('', 'User 2'), ('', 'User 3')]\r\n```\r\n\r\n\r\nDoes the proposed styling look good or should I make amendments to the `make_table_with_categories` code to incorporate the other behaviour (grouping responses by alternating colour line) that you suggested?"", 'comment_created': datetime.datetime(2020, 5, 29, 18, 6, 53, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 432658267, 'comment_body': 'I was meaning to use padded and centered style on the single-column version, ie. the specialized version introduced in that commit, to retain the existing style. So two columns => help menu style, text => StreamInfo style (as it is now).\r\n\r\nWe could leave this commit for a later merge in this PR or elsewhere. Once things are tidied from the other comments I could merge some commits and we could either work on the remaining commit(s) here or move them to another branch/PR.', 'comment_created': datetime.datetime(2020, 5, 29, 18, 19, 9, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 432666168, 'comment_body': ""I understand what you're suggesting. Though, I am concerned about the scenario where we would want to have both in the same popup i.e. the help menu style and the stream info style. It would look a bit off to have some content centre-aligned and some left/right-aligned. That said, if we decide to stick with either one of the styles in any popup (not mix single-column and two-column), that would work. "", 'comment_created': datetime.datetime(2020, 5, 29, 18, 34, 35, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 432719718, 'comment_body': 'This is one option. I think originally I was considering you could have the users joined with newlines, so the above would be more like:\r\n```\r\n+1    User 1 (popup_contrast)\r\n      User 2 (popup_contrast)\r\n      User 3 (popup_contrast)\r\ntada  User 1\r\n      User 2\r\n      User 3\r\nsmile User 4 (popup_contrast)\r\n```\r\nI thought this might use the contrast to group the reactions better, perhaps.', 'comment_created': datetime.datetime(2020, 5, 29, 20, 28, 47, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 432795028, 'comment_body': ""I was just going to merge this, but realized we have a subtle nuance here, as `self.width` is always requested to be big enough to hold the description, so we end up wit ha height of 1. The popup can be scrolled, but that's probably not what we want!\r\n\r\nGiven that the height is only known when showing the popup, we likely want to use a different approach for cases where we want some kind of minimum height visible, or use the column width we know we get in the popup to calculate it. The controller popup code needs improving, whether a special case for a 'minimum height visible' case like this, or a general change where the height is calculated later, maybe all from rows?\r\n\r\nAs part of this, we may wish to limit the maximum popup width, like we do with popup height?"", 'comment_created': datetime.datetime(2020, 5, 30, 1, 1, 30, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 434239667, 'comment_body': '`requested_width`?', 'comment_created': datetime.datetime(2020, 6, 3, 0, 6, 39, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 434240485, 'comment_body': ""Are you trying to describe some maximum size here? 'screen estate' makes me think of the total available size, which is not this reduced size available for a popup or similar. Can we rename it accordingly?"", 'comment_created': datetime.datetime(2020, 6, 3, 0, 9, 47, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 434240671, 'comment_body': ""Strictly speaking we don't need parentheses here."", 'comment_created': datetime.datetime(2020, 6, 3, 0, 10, 26, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 434255749, 'comment_body': ""I like having this first commit early, but maybe also have the last commit just afterwards, which applies the same logic to the title?\r\nThen you can promptly follow it with the 'Consider category and title width...' commit, which means at least one of the latter commits doesn't break, in terms of not allowing space for the window title?"", 'comment_created': datetime.datetime(2020, 6, 3, 1, 9, 49, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 434257471, 'comment_body': ""While I know that this code is replaced when you use a category instead, I'm a little concerned that the layout code for columns doesn't work in general, in case we end up with a wide column again? Or is something else happening here?"", 'comment_created': datetime.datetime(2020, 6, 3, 1, 16, 40, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 436088351, 'comment_body': ""In this particular case, `reactions`, the data structure that is being passed, isn't what `make_table_with_categories` expects. \r\n\r\nHowever, since the old code uses a hardcoded width (`column_widths[1]`), this is likely to break for wide columns.\r\n\r\nA fix could be to fall back to use `('weight', 1, urwid.Text(data))` whenever the maximum allowed width is smaller than `column_widths[1]`. Though, it would require `max_cols` to be passed into the method.\r\n\r\nI couldn't come up with a way to pass maximum allowed width into `calculate_table_witdhs` without tampering the 'flow' of the commits in this PR.\r\n\r\nI was thinking of passing a `maximum_width` argument, where `maximum_width=controller.maximum_popup_dimensions()[0]` and then making further amendments to `calculate_popup_width` and `make_table_with_categories` accordingly. "", 'comment_created': datetime.datetime(2020, 6, 5, 18, 16, 6, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 438325500, 'comment_body': ""Let's leave this for now - the changes here are significant and useful as they stand, so I'd prefer to get them in and be able to build upon them. We could open an issue for this, but this might be more of something to discuss and explore for different window sizes, and see if people have issues - or we can add explicit tests, perhaps? That said, this works pretty well as it is, and there are other issues to look at rather than fine-tuning this :+1:"", 'comment_created': datetime.datetime(2020, 6, 10, 18, 25, 33, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 438341690, 'comment_body': ""This is perhaps minor, but I stumbled over this slightly, compared to what I think is the equivalent:\r\n```python3\r\nrow_max = [max(text.split('\\n'), key=len) for text in row]\r\n```\r\nFor me, that looks clearer, and I wonder if combining with the other `len` would make it clearer still, so we could then do:\r\n```python3\r\nstrip_widths.append(row_max_column_lengths)\r\n```\r\nI like `map` and similar in small doses, but for me readability does disappear a little; do you prefer the `lambda` syntax?\r\n\r\nWould this actually resolve the other issue we faced with the second column width formatting in the other commit?"", 'comment_created': datetime.datetime(2020, 6, 10, 18, 55, 21, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 438344634, 'comment_body': 'minor: this last commit has no tests changed.', 'comment_created': datetime.datetime(2020, 6, 10, 19, 1, 3, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 438903076, 'comment_body': ""I don't have any preference for `map` or `lambda` syntax as such. It's better to use them in small doses, I agree.\r\n\r\nI have combined the proposed implementation with the other `len` in the latest update. Thanks. \r\n\r\n"", 'comment_created': datetime.datetime(2020, 6, 11, 16, 7, 11, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 438904819, 'comment_body': ""This change amends the +2 extra width and the alignment that we don't have any test for. The commit doesn't change any other functionality."", 'comment_created': datetime.datetime(2020, 6, 11, 16, 10, 1, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 439000894, 'comment_body': 'This looks clearer in this commit than the version with lambdas before! This does seem to fix the issue we saw earlier with this commit, unless the window/width gets super-narrow, which is probably going to be an issue to use ZT in any case.', 'comment_created': datetime.datetime(2020, 6, 11, 18, 51, 55, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 439001759, 'comment_body': 'This seems to be mostly fixed by the updated commit in any case :+1:', 'comment_created': datetime.datetime(2020, 6, 11, 18, 53, 31, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}]","[{'commit_sha': 'cb1b43ef1027b78c10353728053fd63ee0dc4cb8', 'committer_username': 'preetmishra', 'committer_name': 'Preet Mishra', 'committer_email': 'ipreetmishra@gmail.com', 'commit_date': datetime.datetime(2018, 9, 26, 17, 5, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0a15215ff922dc6876799da7410640a9a4f71b02', 'committer_username': 'preetmishra', 'committer_name': 'Preet Mishra', 'committer_email': 'ipreetmishra@gmail.com', 'commit_date': datetime.datetime(2018, 9, 26, 17, 5, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6b093c41bfbd4375b2e7f1d53f762ff88ae19b99', 'committer_username': 'preetmishra', 'committer_name': 'Preet Mishra', 'committer_email': 'ipreetmishra@gmail.com', 'commit_date': datetime.datetime(2018, 9, 26, 17, 5, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e4d14c6025f9adfa5b387cb527228ab4fadfdd3d', 'committer_username': 'preetmishra', 'committer_name': 'Preet Mishra', 'committer_email': 'ipreetmishra@gmail.com', 'commit_date': datetime.datetime(2018, 9, 26, 17, 5, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1e39d69e06c8ef5b14779b7b7cd3ebaa0e54ad47', 'committer_username': 'preetmishra', 'committer_name': 'Preet Mishra', 'committer_email': 'ipreetmishra@gmail.com', 'commit_date': datetime.datetime(2018, 9, 26, 17, 5, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '43f0e4596a295d066e983ae7f1e7c68cb46b9db2', 'committer_username': 'preetmishra', 'committer_name': 'Preet Mishra', 'committer_email': 'ipreetmishra@gmail.com', 'commit_date': datetime.datetime(2018, 9, 26, 17, 5, 44, tzinfo=datetime.timezone.utc)}]",Preet Mishra,43616959,ipreetmishra@gmail.com,User,,18,,24,65
415303657,Fetch and indicate server version and feature level ,"This introduces `AboutView` to show server version and feature level within the app and makes other related amendments.

Fixes #616.",False,653,https://api.github.com/repos/zulip/zulip-terminal/pulls/653,https://github.com/zulip/zulip-terminal/pull/653,closed,79,5,8,3,11,35,2,0,"[{'name': 'enhancement'}, {'name': 'size: L'}]",2020-05-08 15:53:50+00:00,2020-06-26 01:33:46+00:00,4181996.0,"48 days, 9:39:56","[{'comment_id': 422277691, 'comment_body': ""I think we need to be increasingly careful about which keys we choose. I'm tempted by a modifier with `?`, but we may want to reserve that for contextual help within eg. the compose box (where `?` alone wouldn't work)"", 'comment_created': datetime.datetime(2020, 5, 8, 17, 42, 30, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 422287851, 'comment_body': ""We shouldn't need to explicitly fetch this information. You can check the new https://chat.zulip.org/api/changelog, or `git checkout` various versions of the source, but this can be requested to be (and later will be included by default) in the initial data sent by the server."", 'comment_created': datetime.datetime(2020, 5, 8, 18, 3, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 422305960, 'comment_body': ""In the original issue, I was not originally intending that we should show the feature level, as it's just an integer and so not necessarily useful, but *if* it's present (see my note on 'supported server versions` in #**zulip-terminal**) we could include it."", 'comment_created': datetime.datetime(2020, 5, 8, 18, 39, 14, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 422307577, 'comment_body': 'This box seems like a great place to include the running version number of ZT? That might make it easier to split this commit into pieces - adding an about box, then adding various features to it?', 'comment_created': datetime.datetime(2020, 5, 8, 18, 42, 33, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 422433096, 'comment_body': 'Yeah This is a nice idea! 👌 ', 'comment_created': datetime.datetime(2020, 5, 9, 0, 48, tzinfo=datetime.timezone.utc), 'commenter': 'sumanthvrao', 'type': 'User'}, {'comment_id': 422641944, 'comment_body': 'I agree. How does `meta ?` sound?', 'comment_created': datetime.datetime(2020, 5, 10, 12, 54, 43, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 422642128, 'comment_body': 'That sounds plausible, thanks! :+1: ', 'comment_created': datetime.datetime(2020, 5, 10, 12, 56, 20, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 422725114, 'comment_body': ""Let's add a trailing comma to reduce diff size next time?"", 'comment_created': datetime.datetime(2020, 5, 11, 0, 37, 18, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 422725375, 'comment_body': ""Let's make these parameters keyword-only, to make it clear what each value we're passing in is, at the point of calling?"", 'comment_created': datetime.datetime(2020, 5, 11, 0, 38, 44, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 426231184, 'comment_body': ""In this commit we don't have more than one line, so including this alternating color code in this first commit is a bit confusing? Also the other multi-line capabilities. This may be less relevant if we ended up merging the other PR first."", 'comment_created': datetime.datetime(2020, 5, 17, 8, 5, 47, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 426231435, 'comment_body': 'Would it be clearer to put the ZT version first?\r\n\r\nIf we move to categories based on the other PR, we could group them instead?', 'comment_created': datetime.datetime(2020, 5, 17, 8, 9, 5, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 426231696, 'comment_body': ""This could be a good place to start exploring how we might use parametrization to encode variations per feature level and/or version. That is, our test data (and expectations) varies if the server covers a range of versions. This is already the case here, as the code is testing for the presence of `zulip_feature_level`, which we're not testing being present/absent."", 'comment_created': datetime.datetime(2020, 5, 17, 8, 12, 25, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 426231920, 'comment_body': 'Maybe test this with variations of server values?', 'comment_created': datetime.datetime(2020, 5, 17, 8, 15, 10, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 426232018, 'comment_body': 'Also worth adding a comment that this is present by default from one particular `feature_level`?', 'comment_created': datetime.datetime(2020, 5, 17, 8, 15, 58, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 440503618, 'comment_body': ""I was wondering why you added this test - other than it's an interesting extra refactor - but this seems to be necessary after the next commit? Why is that?\r\n\r\nI'd prefer to hold off on this until we agree on the reactions test refactor work agreed, as discussed yesterday."", 'comment_created': datetime.datetime(2020, 6, 15, 23, 36, 46, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 440546918, 'comment_body': ""I think it'd be better to group the server properties together; when I merged the first two commits I set the `Zulip Terminal` category to be in `Application`, and so I'd suggest we have a `Server` category with the extra details."", 'comment_created': datetime.datetime(2020, 6, 16, 2, 15, 17, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 440661895, 'comment_body': ""https://github.com/zulip/zulip-terminal/blob/49d3fa5244eab398fa2597156e7309f5bfa6c24c/tests/model/test_model.py#L1112\r\n\r\nThe line mentioned above mutates the index parameter (see commit description). This causes the test to fail (it raises a KeyError exception for 'reactions') with fixtures that make the test run more than once.\r\n\r\nI have pushed a branch on my fork to demonstrate how the test fails. Link: https://github.com/preetmishra/zulip-terminal/commit/15a756a477fabb658b92ac26560d3f41afe208ec."", 'comment_created': datetime.datetime(2020, 6, 16, 8, 3, 58, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 440849280, 'comment_body': ""While `zulip_feature_level` isn't used anywhere in this particular commit, this appeared to be a good place to introduce the fixture as this is where we start to fetch the server version and the feature level."", 'comment_created': datetime.datetime(2020, 6, 16, 13, 28, 45, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 440852060, 'comment_body': 'I have added this is an extra test to avoid running all the tests in `TestAboutView` for different feature levels with `zulip_feature_level` fixture (relating to the point about unnecessary extra tests that you mentioned in the review).', 'comment_created': datetime.datetime(2020, 6, 16, 13, 32, 30, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 440854502, 'comment_body': ""I have used hard-coded values here as `self.about_view` is used in other tests that don't 'care' about the version or the feature_level (see also the other in-line comment in this commit)."", 'comment_created': datetime.datetime(2020, 6, 16, 13, 35, 49, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 440911805, 'comment_body': 'I like that we have a way to store an absent version of this, but could we leave this as an `Optional[int]` instead?\r\n\r\nThat will allow version comparisons later, which I expect to be likely to be more common than use as string.', 'comment_created': datetime.datetime(2020, 6, 16, 14, 50, 17, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 440917262, 'comment_body': ""If we change the type to `Optional[int]` this might be simplified to the `.get from the initial data`?\r\n\r\nSince it's not used in this commit, let's not include it elsewhere, whether separately or later."", 'comment_created': datetime.datetime(2020, 6, 16, 14, 56, 59, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 440918417, 'comment_body': ""We may want to consider (later?) extracting this list to be separate, since the first version maps to `MINIMUM_SUPPORTED_SERVER_VERSION` and they likely should be stored together.\r\n\r\nWe could consider having a list of 'tested versions', which are a list of feature_level/server_version tuples? Then the minimum would simply be the first (assuming sorted). That also means this fixture could reliably provide matching pairs of feature/version - such as for testing the pop-up (in a simple case). The app could/should *work* with others (and we could add intermediate values), but it would define what we test against."", 'comment_created': datetime.datetime(2020, 6, 16, 14, 58, 22, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 440920376, 'comment_body': ""Given 2.1 was not release with feature 1, I'm not entirely sure that this is a good test combination. Maybe just go with the minimum release version and the corresponding feature level for now?"", 'comment_created': datetime.datetime(2020, 6, 16, 15, 0, 49, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 440935001, 'comment_body': 'This could be the `MINIMUM_SUPPORTED_SERVER` server values?', 'comment_created': datetime.datetime(2020, 6, 16, 15, 19, 27, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 440936057, 'comment_body': 'This is good, though would be adjusted if we moved to tuples for versions/feature-levels, and also if we store an `Optional[int]`.', 'comment_created': datetime.datetime(2020, 6, 16, 15, 20, 25, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 440937653, 'comment_body': 'So easy with the refactored popup code :+1: ', 'comment_created': datetime.datetime(2020, 6, 16, 15, 22, 5, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 440948238, 'comment_body': ""OK, let's chat about this - but I won't merge this commit for now, as it definitely is unrelated."", 'comment_created': datetime.datetime(2020, 6, 16, 15, 36, 19, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 441709006, 'comment_body': 'Would 1, as a feature level, be sufficient for now or should I extend it till 14 (the latest feature level)?', 'comment_created': datetime.datetime(2020, 6, 17, 17, 27, 16, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 441857496, 'comment_body': 'Any finite value seems ok for now, but we should add a comment given that 2.2 is not actually yet released!', 'comment_created': datetime.datetime(2020, 6, 17, 21, 58, 33, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 443146228, 'comment_body': ""I'm not sure what we should do with this; I'm hesitant to hard-code a version, but equally ZT_VERSION isn't going to be the released version - though it should do for now. Also the same in the other test?"", 'comment_created': datetime.datetime(2020, 6, 20, 17, 22, 2, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 443147102, 'comment_body': ""This should definitely be in another commit - it's a distraction from what's actually used/introduced in this one. Maybe just in the next one, where it's actually used?"", 'comment_created': datetime.datetime(2020, 6, 20, 17, 36, 9, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 443171045, 'comment_body': 'Since this introduces the minimum version, this would be a reasonable commit in which to add an entry to the README or FAQ about this. If so, we likely want to indicate that 2.1 will be the minimum supported version, but that it may still work with earlier versions. Notifying users about out of date servers is a potential improvement that we could save for later.', 'comment_created': datetime.datetime(2020, 6, 21, 0, 51, 54, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 444288810, 'comment_body': 'I have added a note in the README (README felt more appropriate than FAQ for a declaration).\r\n\r\nRe notifying users, should I file an issue?', 'comment_created': datetime.datetime(2020, 6, 23, 14, 54, 49, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 445902639, 'comment_body': ""I think we could have an issue for this, but it's definitely a needs-discussion style issue, as we hadn't decided how to make it reasonable?"", 'comment_created': datetime.datetime(2020, 6, 26, 0, 6, 42, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}]","[{'commit_sha': '048bff595ad78dceddb83bcfa92ac5c7536b3118', 'committer_username': 'preetmishra', 'committer_name': 'Preet Mishra', 'committer_email': 'ipreetmishra@gmail.com', 'commit_date': datetime.datetime(2018, 9, 26, 17, 5, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a50294f3f01a585cd85c4933942f03ac7c0474df', 'committer_username': 'preetmishra', 'committer_name': 'Preet Mishra', 'committer_email': 'ipreetmishra@gmail.com', 'commit_date': datetime.datetime(2018, 9, 26, 17, 5, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0e48329a3f1677144e323127e19cdfdcbd6800aa', 'committer_username': 'preetmishra', 'committer_name': 'Preet Mishra', 'committer_email': 'ipreetmishra@gmail.com', 'commit_date': datetime.datetime(2018, 9, 26, 17, 5, 44, tzinfo=datetime.timezone.utc)}]",Preet Mishra,43616959,ipreetmishra@gmail.com,User,,18,,24,65
440672719,MessageBox: Extract in-line message links from the message content and show them as footlinks,"The initial commits extract in-line message links from the message content and add them below it to improve the reading experience. 

The commits are small and incremental in order to make reviewing manageable. Though, they could be squashed before merging.

The last commit adds in-line message links to `MsgInfoView` (needs discussion; see in-line comment).

Fixes #618 and #452 partially.",False,703,https://api.github.com/repos/zulip/zulip-terminal/pulls/703,https://github.com/zulip/zulip-terminal/pull/703,closed,191,15,3,4,12,53,2,0,"[{'name': 'size: XL'}, {'name': 'PR needs review'}]",2020-06-26 16:18:31+00:00,2020-07-16 00:31:29+00:00,1671178.0,"19 days, 8:12:58","[{'comment_id': 446286633, 'comment_body': ""For maintaining a link counter, I couldn't make a recursive approach work and eventually had to go with an attribute. I could use pointers on how to make it clearer."", 'comment_created': datetime.datetime(2020, 6, 26, 16, 29, 15, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 446288841, 'comment_body': 'Currently, I am showing `link` as `text` whenever `text` is not present. This, however, could be noisy when the link is comparatively long. Thoughts?', 'comment_created': datetime.datetime(2020, 6, 26, 16, 33, 33, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 446290666, 'comment_body': 'As link can be extremely long, I am inclining towards only showing text with mark - `[1]: Text` in `MsgLinksView`. Thoughts?', 'comment_created': datetime.datetime(2020, 6, 26, 16, 37, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 446292750, 'comment_body': ""Also, I haven't used `PopUpView` here as I am planning to use buttons from Shreya Malviya's outstanding PR later (for handling internal/external links)."", 'comment_created': datetime.datetime(2020, 6, 26, 16, 40, 59, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 446327797, 'comment_body': ""The related issue, #618, and the discussion [here](https://chat.zulip.org/#narrow/stream/206-zulip-terminal/topic/links) mentioned that we would want links to be listed at the end (with a different style) and combined with the `MsgInfoView`. \r\n\r\nOn the contrary, this doesn't add links in `MsgInfoView` considering how 'Reactions' can potentially take a significant amount of space in the view and how it would be easier to work with a popup [than trailing links in `MessageBox`] later (e.g. handling internal/external links). Thoughts?"", 'comment_created': datetime.datetime(2020, 6, 26, 17, 52, 36, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 446471906, 'comment_body': 'Could we use `state` for this?', 'comment_created': datetime.datetime(2020, 6, 27, 2, 11, 57, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 446472133, 'comment_body': 'Having duplicate content seems confusing and noisy, yes.', 'comment_created': datetime.datetime(2020, 6, 27, 2, 14, 10, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 446472371, 'comment_body': ""Currently we treat the message data as essentially the data raw from the API. I'm a little concerned about adding extra data there since we don't know if the server may add a `links` data structure for messages, which this will then override."", 'comment_created': datetime.datetime(2020, 6, 27, 2, 16, 45, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 446472689, 'comment_body': ""I'd suggest for a v1 we can integrate links as the end of a message, and also as a category above reactions in the message-info-view. I don't expect too many links in a single message?"", 'comment_created': datetime.datetime(2020, 6, 27, 2, 19, 47, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 446473229, 'comment_body': ""I'm not sure precisely what you mean here, but perhaps this warrants discussion in light of checkboxes being used with @kaustubh-nair 's stream settings work, to work towards a general solution?"", 'comment_created': datetime.datetime(2020, 6, 27, 2, 25, 50, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 446518958, 'comment_body': 'Since both PRs are being worked on simultaneously, I think it would be better if we merge them both first and then do a refactor - this would save time as well as make it easier to ensure that the refactor works for both the PRs', 'comment_created': datetime.datetime(2020, 6, 27, 12, 17, 18, tzinfo=datetime.timezone.utc), 'commenter': 'kaustubh-nair', 'type': 'User'}, {'comment_id': 446519202, 'comment_body': ""Yeah, I'd prefer only having one when there's no text."", 'comment_created': datetime.datetime(2020, 6, 27, 12, 20, 11, tzinfo=datetime.timezone.utc), 'commenter': 'kaustubh-nair', 'type': 'User'}, {'comment_id': 446523679, 'comment_body': '(Resolved in PM.)', 'comment_created': datetime.datetime(2020, 6, 27, 12, 49, 55, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 446523965, 'comment_body': 'As per the recent discussion, the inclination is towards only using the link in either case.', 'comment_created': datetime.datetime(2020, 6, 27, 12, 53, 43, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 446682759, 'comment_body': 'In the latest update, I have used the existing code from `PopUpView` but, yes, the use-case will likely evolve if we decide to incorporate new changes over the course of time. I believe it would be reasonable to refactor later.', 'comment_created': datetime.datetime(2020, 6, 28, 18, 30, 33, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 446686560, 'comment_body': ""I attempted adding `text` and `link` but they disrupt `MsgInfoView` and trigger the wide column issue that we decided to tackle later in https://github.com/zulip/zulip-terminal/pull/659#discussion_r434257471. That said, even if we fix the issue, we'd end up with very wide `MsgInfoView` mostly.\r\n\r\nI have added `index` and `text`, for now, but they don't seem to add much value.\r\n\r\nWould it be desirable to introduce a message links popup inside `MsgInfoView` (like the edit history popup)?"", 'comment_created': datetime.datetime(2020, 6, 28, 19, 7, 50, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 446686916, 'comment_body': ""I was wondering if it would be better to trim the links that do not have any text to improve the flow of [reading] a message? We'd show the complete link in the footnote anyway."", 'comment_created': datetime.datetime(2020, 6, 28, 19, 11, 8, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 449801405, 'comment_body': ""This change is part of the first commit, but removes the visibility of the link in the message? The link text will be added in later commits, but consider if I merged this commit first - we'd end up with no way to get to the links themselves (assuming text exists)."", 'comment_created': datetime.datetime(2020, 7, 4, 20, 1, 21, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 449801599, 'comment_body': ""It would be useful to have a test which took a message with multiple links and tested this, though I'm not sure if we have a pre-existing test structure for this. Maybe this change belongs with the other boxes commit which has a test?"", 'comment_created': datetime.datetime(2020, 7, 4, 20, 4, 25, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 449803215, 'comment_body': ""Since we're excluding the references from the part of the content, marked with the vertical bar, I wonder if the alignment (10, or 5 from the right) could be adjusted to gain some extra link space? That said, maybe it would interfere with the message-to-message flow."", 'comment_created': datetime.datetime(2020, 7, 4, 20, 28, 51, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 449803414, 'comment_body': ""You mean, just show the last segment of a url? That would work much better for eg. images, I think?\r\n\r\nThis commit reduces the comments and simplifies things quite a bit - I'm a little concerned that this changes behavior, but I'll take a look in the next iteration as I was focusing on other things more in this review."", 'comment_created': datetime.datetime(2020, 7, 4, 20, 31, 23, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 450388573, 'comment_body': ""**Before**:\r\n\r\n![Screenshot from 2020-07-06 23-11-05](https://user-images.githubusercontent.com/43616959/86623370-16d6a780-bfdf-11ea-881a-4048acef308d.png)\r\n\r\n**After**:\r\n\r\n![Screenshot from 2020-07-06 23-17-20](https://user-images.githubusercontent.com/43616959/86623386-1dfdb580-bfdf-11ea-878c-fd0854b9307f.png)\r\n\r\nI prefer the _after_ as it adds a bit of distinction, between the content and the footlinks, and gives it more width. Additionally, I don't see much interference. Thoughts?"", 'comment_created': datetime.datetime(2020, 7, 6, 17, 56, 32, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 451180862, 'comment_body': ""I'm not sure I have a strong preference at this stage, but I think this change will be easier to adjust later, and may change if we have either of\r\n* link text & names (eg. link & google.com) styled as currently, but the numbers styled the same with the new style\r\n* the ellipsis to avoid long links wrapping"", 'comment_created': datetime.datetime(2020, 7, 7, 22, 31, 59, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 451484944, 'comment_body': 'Yes, I meant the last segment. I have applied it in the latest update.', 'comment_created': datetime.datetime(2020, 7, 8, 11, 55, 17, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 451486263, 'comment_body': 'I have amended and moved this in the commit where this is used and tested. The methods which use this change have the respective tests.', 'comment_created': datetime.datetime(2020, 7, 8, 11, 57, 48, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 451488652, 'comment_body': 'I agree. I have pushed the new update with all these three changes - namely _after_ alignment, new styling only for link indexes and ellipsis for now. ', 'comment_created': datetime.datetime(2020, 7, 8, 12, 2, 30, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 451489654, 'comment_body': ""I haven't considered other widgets' width because they disrupt `MsgInfoView`. The only limitation it has is that links are more often 'wrapped' than not."", 'comment_created': datetime.datetime(2020, 7, 8, 12, 4, 31, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 451491933, 'comment_body': 'The else bit is to retain `text` if the link is already present in `message_links`.', 'comment_created': datetime.datetime(2020, 7, 8, 12, 9, 4, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 453069177, 'comment_body': ""From a commit-wise basis, I'd prefer the ellipsis wrap style come in when we have the popup changes present - if a user can't widen their screen, then a wrapping link is the only way they could see the full link, until that's in the tree."", 'comment_created': datetime.datetime(2020, 7, 10, 20, 45, 58, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 453073744, 'comment_body': 'Is this necessary? Why/not? Should the variable be initialized in `__init__`? Could we use `len(message_links)` instead?', 'comment_created': datetime.datetime(2020, 7, 10, 20, 57, 30, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 453077277, 'comment_body': 'Thanks for the comment :+1:', 'comment_created': datetime.datetime(2020, 7, 10, 21, 6, 21, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 453078139, 'comment_body': ""While we don't currently type return type of urwid widgets, I think it might be clearer if we return `None` instead of the empty string, so that we are effectively returning `Optional[Any]`. That's not worth annotating now, but if we do move to a stage of urwid widget types, `Union[str, <widget>]` will be less clear than `Union[None, <widget>]`, ie. `Optional[<widget>]`."", 'comment_created': datetime.datetime(2020, 7, 10, 21, 8, 42, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 453080133, 'comment_body': ""You don't have a test for this?"", 'comment_created': datetime.datetime(2020, 7, 10, 21, 14, 14, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 453084000, 'comment_body': ""While the previous commit is fine first, if you have this change first, you don't need to change all the uses of it to be the new names."", 'comment_created': datetime.datetime(2020, 7, 10, 21, 25, 5, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 453087452, 'comment_body': ""This seems unexpected, but it might just be because this 'domain name' is so short.\r\n\r\nThis is something of a tricky problem, as I've seen links which are eg. query strings, so the text becomes `some_file?this_thing`, which looks unexpected (and real cases even more so). I'm reconsidering how we should handle them, though I don't see an easy solution straight away.\r\n\r\nFor now this looks OK."", 'comment_created': datetime.datetime(2020, 7, 10, 21, 34, 50, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 453088587, 'comment_body': 'We could consider parsing the URL using the standard library, as we do in other places.', 'comment_created': datetime.datetime(2020, 7, 10, 21, 38, 12, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 453334924, 'comment_body': ""It was necessary as I was initializing the variable in `soup2markup`'s caller method. That said, I gather it better belongs to the `__init__`.\r\n\r\nRe `len(message_links)`, I am not sure if this would work here."", 'comment_created': datetime.datetime(2020, 7, 12, 16, 10, 51, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 453335181, 'comment_body': ""Resolved in PM. (We're moving ahead without the library call for now due to a few inconsistencies. Though, we may want to switch to it later.)"", 'comment_created': datetime.datetime(2020, 7, 12, 16, 13, 31, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 453335692, 'comment_body': ""True. Notwithstanding, the changes in this particular commit express where the new style is used explicitly [in GitHub's diff]. "", 'comment_created': datetime.datetime(2020, 7, 12, 16, 19, 12, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 453336669, 'comment_body': ""The 'saved text' is not used anywhere currently and is for the popup (where we'll show `1: Text \\n Link`). However, the code is still useful to have so that we don't miss the 'saved text' even though we're not using it.\r\n\r\nI have added extra test cases that are remotely related."", 'comment_created': datetime.datetime(2020, 7, 12, 16, 28, 38, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 453336979, 'comment_body': 'The rstrips are useful to have to avoid anomalies and edge cases like https://google.com vs https://google.com/.', 'comment_created': datetime.datetime(2020, 7, 12, 16, 30, 59, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 453338539, 'comment_body': 'This would be a useful comment :)', 'comment_created': datetime.datetime(2020, 7, 12, 16, 46, 32, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 453989917, 'comment_body': 'I agree that the ordering you have is reasonable, it just ends up with a larger diff.', 'comment_created': datetime.datetime(2020, 7, 13, 22, 46, 5, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 453990441, 'comment_body': 'As we discussed elsewhere, when we add the ellipsis, we should add a FAQ entry regarding this.', 'comment_created': datetime.datetime(2020, 7, 13, 22, 47, 38, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 454019144, 'comment_body': ""By my reading, `link_index` is really 'next link index', so equivalent to `len(message_links)+1`? So we could avoid needing to synchronize two variables."", 'comment_created': datetime.datetime(2020, 7, 14, 0, 7, 54, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 454039033, 'comment_body': ""I'm not sure if it's just this code/commit or the combination with previous commits - this works well for simple cases that I tested manually, but I think we may wish to be careful with handling the link scheme...or even the entire link?\r\n\r\nGiven a message of `example.com http://example.com https://example.com`, the webapp shows 3 links expressed as they are in the message (with 'text' exactly as written in the message), the first two pointing to the same address. We point the first two to the same address (based on the HTML, presumably), but we remove the scheme, so they *look* identical but are confusingly not, ie. we generate `example.com [1] example.com [1] example.com [2]`. Given we don't show the footlinks for these now after this commit, this is rather confusing! So, at a minimum, I think we should leave the scheme as it is, and probably use the assumed href in the anchor where no scheme is present?\r\n\r\nAfter some further manual testing, note that even a long link like eg `example.com/blah/foooo/agikhasdglkashdglkashdg/asdfgklhasg/asdjkgalskjdhalskjdhlkasdjhsalkdghsasiougypoadisgypsdgypodsgypoadgysapdgy` gets shown twice identically (in message and footlinks). I don't think we gain from this being in the footlinks, much like with the simple `example.com` case? So, if there is no text, this makes me think we should remove it in all cases. Thoughts?"", 'comment_created': datetime.datetime(2020, 7, 14, 1, 13, 41, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 454043379, 'comment_body': ""minor: A variant of this showing the stripping of trailing slashes (maybe even with identical text?) would be useful, as I don't think we have a test of that?"", 'comment_created': datetime.datetime(2020, 7, 14, 1, 28, 26, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 454566472, 'comment_body': 'Thanks for the tip! I have implemented it in the latest update.', 'comment_created': datetime.datetime(2020, 7, 14, 18, 41, 50, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 454567322, 'comment_body': ""Yeah, that's there. However, it only fits with the previous commit which is pretty large already. "", 'comment_created': datetime.datetime(2020, 7, 14, 18, 43, 22, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 454576011, 'comment_body': 'Thanks for the report. It turns out that the server translates any scheme-less link to `HTTP` (e.g. `example.com` becomes `<a href=""http://example.com"">example.com</a>`). The core problem was with the `text == link` check that I had previously. I have replaced it with a \'scheme-less\' check to figure out whether the \'text\' part is identical.\r\n\r\nMoreover, I have amended the last segment bit to only work when the text is not too simple (e.g. `example.com`) and to patch texts like these with their link itself. Consequently, `example.com http://example.com https://example.com` come out as `http://example.com [1] http://example.com [1] https://example.com [2]` and long links work more reliably.\r\n\r\nFurthermore, I have not redacted the last segment bit for long links as I believe they improve the reading flow drastically. We could surely improve how we detect the \'significant\' segment later but I think they work well for now. ', 'comment_created': datetime.datetime(2020, 7, 14, 18, 58, 40, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 454576522, 'comment_body': '(See also https://github.com/zulip/zulip-terminal/pull/703/commits/a782d546470df674c78e7d52268fd89765b405f0#diff-3e518af2a88ffb14e1771a621641edd5R1552-R1558.)', 'comment_created': datetime.datetime(2020, 7, 14, 18, 59, 38, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 454732752, 'comment_body': ""This is my only remaining query. It's minor really, but if you look at #**commits** then you'll see some on a `chat.zulip.org` branch - it gets shown as `http://chat.zulip.org`, which of course isn't the branch name :)"", 'comment_created': datetime.datetime(2020, 7, 15, 1, 14, 41, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 454734058, 'comment_body': '`soup2markup`?', 'comment_created': datetime.datetime(2020, 7, 15, 1, 19, 21, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}]","[{'commit_sha': 'f795fadb16bddadc720deea5a1c629b9dbf851bb', 'committer_username': 'preetmishra', 'committer_name': 'Preet Mishra', 'committer_email': 'ipreetmishra@gmail.com', 'commit_date': datetime.datetime(2018, 9, 26, 17, 5, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fae4695417cc43176dfbea8d5d1c6e7c2d11de11', 'committer_username': 'preetmishra', 'committer_name': 'Preet Mishra', 'committer_email': 'ipreetmishra@gmail.com', 'commit_date': datetime.datetime(2018, 9, 26, 17, 5, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '960dd2dfc3fe6d6fc7732981c4270d112525c6d2', 'committer_username': 'preetmishra', 'committer_name': 'Preet Mishra', 'committer_email': 'ipreetmishra@gmail.com', 'commit_date': datetime.datetime(2018, 9, 26, 17, 5, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '49ecf518a931d86995d6bcc5d57e52b3a3613de0', 'committer_username': 'preetmishra', 'committer_name': 'Preet Mishra', 'committer_email': 'ipreetmishra@gmail.com', 'commit_date': datetime.datetime(2018, 9, 26, 17, 5, 44, tzinfo=datetime.timezone.utc)}]",Preet Mishra,43616959,ipreetmishra@gmail.com,User,,18,,24,65
455800457,Support footlinks configuration via zuliprc,"This adds support for configuring footlinks view in MessageBox (defaults to 'enabled') via zuliprc.

README updated with instructions.

Tests amended.",True,735,https://api.github.com/repos/zulip/zulip-terminal/pulls/735,https://github.com/zulip/zulip-terminal/pull/735,closed,34,2,7,1,2,0,3,0,"[{'name': 'further discussion required'}, {'name': 'size: M'}, {'name': 'PR needs review'}]",2020-07-23 15:41:15+00:00,2020-07-27 20:45:40+00:00,363865.0,"4 days, 5:04:25",[],"[{'commit_sha': 'e52c2f74cc3d4863b9ae9d569ba266e5d0a7d5de', 'committer_username': 'preetmishra', 'committer_name': 'Preet Mishra', 'committer_email': 'ipreetmishra@gmail.com', 'commit_date': datetime.datetime(2018, 9, 26, 17, 5, 44, tzinfo=datetime.timezone.utc)}]",Preet Mishra,43616959,ipreetmishra@gmail.com,User,,18,,24,65
458584319,Delegate link text for raw links in a better way,"Currently, we use the last segment of a link for this purpose. It works well for links that have an image or a file. For instance,
https://foo.com/image.png gets rendered as image.png, but it does have a few caveats.

This shows the ending for a filename, the domain name for a general link and the relative URL for an internal link.

Test amended.

Fixes #742.",True,750,https://api.github.com/repos/zulip/zulip-terminal/pulls/750,https://github.com/zulip/zulip-terminal/pull/750,closed,18,10,2,1,3,2,3,0,"[{'name': 'size: M'}, {'name': 'area: message rendering'}, {'name': 'PR needs review'}]",2020-07-29 17:38:15+00:00,2020-08-07 06:15:09+00:00,736614.0,"8 days, 12:36:54","[{'comment_id': 462474390, 'comment_body': 'This comment feels redundant now. Should I remove it?', 'comment_created': datetime.datetime(2020, 7, 29, 17, 41, 54, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 466825303, 'comment_body': 'Agreed. The actual code is pretty simple to follow here.', 'comment_created': datetime.datetime(2020, 8, 7, 5, 16, tzinfo=datetime.timezone.utc), 'commenter': 'sumanthvrao', 'type': 'User'}]","[{'commit_sha': '07429321fcc68f6c2d04585ff0cb7d7f6b7209a3', 'committer_username': 'preetmishra', 'committer_name': 'Preet Mishra', 'committer_email': 'ipreetmishra@gmail.com', 'commit_date': datetime.datetime(2018, 9, 26, 17, 5, 44, tzinfo=datetime.timezone.utc)}]",Preet Mishra,43616959,ipreetmishra@gmail.com,User,,18,,24,65
457847944,bugfix/migration: Support API migration for muted topics,"This reflects the expected response change for muted_topics, from `[stream_name, topic]` to `[stream_name, topic, date_muted]` in Zulip version 3.0, Feature level 1 (see https://github.com/zulip/zulip/commit/9340cd1a0b7af7af9b83a622e37d02f1a2340609).

Tests amended.",False,744,https://api.github.com/repos/zulip/zulip-terminal/pulls/744,https://github.com/zulip/zulip-terminal/pull/744,closed,118,77,10,5,9,22,4,0,"[{'name': 'has conflicts'}, {'name': 'size: XL'}, {'name': 'PR needs review'}, {'name': 'PR blocks other PR'}]",2020-07-28 14:28:01+00:00,2020-08-13 17:34:08+00:00,1393567.0,"16 days, 3:06:07","[{'comment_id': 461993507, 'comment_body': 'This is a nice idea to unify both versions! 👍 ', 'comment_created': datetime.datetime(2020, 7, 29, 2, 1, 9, tzinfo=datetime.timezone.utc), 'commenter': 'sumanthvrao', 'type': 'User'}, {'comment_id': 463883935, 'comment_body': ""The docstring helps, but I'm not sure the name is sufficiently different to make it worth renaming, given it is not used yet; the `is_in_` prefix suggests we have the internal data-structure, rather than giving information about the stream/topic."", 'comment_created': datetime.datetime(2020, 7, 31, 23, 19, 59, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 463900754, 'comment_body': ""I'll emphasize that we should add a leading underscore to `Model.muted_topics` - it'll mark it as 'private' (by convention at least), and any hidden uses of it are made evident too :)"", 'comment_created': datetime.datetime(2020, 8, 1, 1, 3, 21, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 463901208, 'comment_body': 'Would using an existing stream fixture make sense here?', 'comment_created': datetime.datetime(2020, 8, 1, 1, 7, 10, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 463901339, 'comment_body': ""This seems strange since it's basically reimplementing the function?"", 'comment_created': datetime.datetime(2020, 8, 1, 1, 8, 44, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 463903871, 'comment_body': ""I'd prefer that we had this version-dependent data in a fixture, if possible. Also can we depend upon just the feature level?"", 'comment_created': datetime.datetime(2020, 8, 1, 1, 31, 40, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 463904158, 'comment_body': 'This approach does work, but it would be beneficial to have some defensive programming (assert on type of the incoming data), and I wonder if we can generate and use just one data-structure, like a dict?', 'comment_created': datetime.datetime(2020, 8, 1, 1, 33, 51, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 463904402, 'comment_body': ""It'd be useful to standardize our notes in the code for this; we could add that to the development section - this would make it easier to check for changes at different server versions and feature levels :)"", 'comment_created': datetime.datetime(2020, 8, 1, 1, 36, 8, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 463918037, 'comment_body': ""The reason why I pivoted from `is_muted_topic` is that it is slightly confusing given that we could call a topic muted even if it belongs to a muted stream (?) and in this case, we are more interested in whether the topic belongs to the `muted_topics` data structure.\r\n\r\nThough, I agree with the comment about `is_in`. I'll remove the renaming, the docstring would clarify what I was initially concerned about in any case."", 'comment_created': datetime.datetime(2020, 8, 1, 3, 59, 15, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 467521155, 'comment_body': ""minor: These don't look like a 'just next line' comment - be more specific in content (muted topic) and/or line-wise :)"", 'comment_created': datetime.datetime(2020, 8, 9, 1, 8, 9, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 467522921, 'comment_body': ""Is this information actually used in this test now? This may not belong in this commit and the test name isn't that clear, but isn't this test focused on ensuring `mark_muted` is called if topics are muted in the model?\r\n\r\nOther tests may also be simplified in a similar way after this, potentially."", 'comment_created': datetime.datetime(2020, 8, 9, 1, 34, 34, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 467523441, 'comment_body': 'We already have `stream_id` above.', 'comment_created': datetime.datetime(2020, 8, 9, 1, 41, 3, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 467524053, 'comment_body': 'This is not the only instance of this in the code. It should really not exist in other locations now we are using the access method.\r\n\r\nWe could put this with the previous commit :thinking: ', 'comment_created': datetime.datetime(2020, 8, 9, 1, 50, 27, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 467524725, 'comment_body': ""I'm glad you understood what I was suggesting here - this looks much simpler :+1:\r\n\r\nI'm not sure we still need to store `self._muted_topics` though? Can we just name the final variable that instead?\r\n(I know we have `_dict` on other variables, but including the type in the name is often superfluous)"", 'comment_created': datetime.datetime(2020, 8, 9, 2, 0, 7, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 467526652, 'comment_body': ""This is the parametrization of muted_topics in the Model only - we should likely have one for initial data from server, and a test for initial data -> model data, which we don't have? (that was in the previous iteration?)"", 'comment_created': datetime.datetime(2020, 8, 9, 2, 28, 57, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 468462809, 'comment_body': 'Hmm. I am unable to find any other `muted_topics` instance in the code. Could you point out where?\r\n\r\nRe commit, I am inclined towards having it here since we replace the old references with `is_muted_topic()` and it is easier to follow with less number of changes.', 'comment_created': datetime.datetime(2020, 8, 11, 9, 53, 33, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 468749500, 'comment_body': ""I didn't have that test in the previous iteration. Thanks for pointing that out.\r\n\r\nI have added the test in the latest update with a local `parametrize` block in `Model.py`. It wouldn't be needed in `conftest` as we'd only test against `processed_muted_topics` everywhere else. "", 'comment_created': datetime.datetime(2020, 8, 11, 17, 34, 29, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 468754440, 'comment_body': 'Yes, it is needed here to understand why the values are set to `True`/`False` for `is_muted_topic_return_value`. Though, I have added an additional refactor commit to simplify it.\r\n\r\nThe `is_muted` util test is simplified in this commit itself. We might want to discuss `test_classify_unread_counts` - how would we like it to be handled? Maybe as a separate issue.', 'comment_created': datetime.datetime(2020, 8, 11, 17, 43, 6, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 470082062, 'comment_body': ""I can't find another instance now, so this looks good :+1:"", 'comment_created': datetime.datetime(2020, 8, 13, 16, 38, 24, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 470092789, 'comment_body': ""I'm actually thinking we might move the server response fixtures into a separate fixture file specific to the model in a similar way. What do you think?"", 'comment_created': datetime.datetime(2020, 8, 13, 16, 56, 19, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 470112217, 'comment_body': 'The ones that are already in `conftest.py` or also the ones that are used in `test_model.py`?', 'comment_created': datetime.datetime(2020, 8, 13, 17, 20, 13, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 470113250, 'comment_body': 'In any case, I believe it is reasonable. ', 'comment_created': datetime.datetime(2020, 8, 13, 17, 21, 21, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}]","[{'commit_sha': 'b7e183089e715d97ac552926b2ef198e6d46a059', 'committer_username': 'preetmishra', 'committer_name': 'Preet Mishra', 'committer_email': 'ipreetmishra@gmail.com', 'commit_date': datetime.datetime(2018, 9, 26, 17, 5, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9d889ea35dd3b7df5830f09dfef6ae3853ba3092', 'committer_username': 'preetmishra', 'committer_name': 'Preet Mishra', 'committer_email': 'ipreetmishra@gmail.com', 'commit_date': datetime.datetime(2018, 9, 26, 17, 5, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '433fa40b827354dee1659f25c99865c403f3af95', 'committer_username': 'preetmishra', 'committer_name': 'Preet Mishra', 'committer_email': 'ipreetmishra@gmail.com', 'commit_date': datetime.datetime(2018, 9, 26, 17, 5, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'af346497460739144eba4ba8796a89f4efce911e', 'committer_username': 'preetmishra', 'committer_name': 'Preet Mishra', 'committer_email': 'ipreetmishra@gmail.com', 'commit_date': datetime.datetime(2018, 9, 26, 17, 5, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9989b913196d77116619b015d867d8e203fc0f87', 'committer_username': 'preetmishra', 'committer_name': 'Preet Mishra', 'committer_email': 'ipreetmishra@gmail.com', 'commit_date': datetime.datetime(2018, 9, 26, 17, 5, 44, tzinfo=datetime.timezone.utc)}]",Preet Mishra,43616959,ipreetmishra@gmail.com,User,,18,,24,65
461221921,Fetch topics on demand to prevent heavy load on /topics,"This is the v1 that we discussed in [zulip-terminal > Topics on demand](https://chat.zulip.org/#narrow/stream/206-zulip-terminal/topic/Topics.20on.20demand/near/967222).

Now, topics are only fetched when they required for the `topics_view()` (for the topic toggle) or for the `_update_topic_index()`.

Tests amended with a few spelling corrections.

Fixes #493.",True,759,https://api.github.com/repos/zulip/zulip-terminal/pulls/759,https://github.com/zulip/zulip-terminal/pull/759,closed,63,48,4,3,7,7,5,0,"[{'name': 'high priority'}, {'name': 'difficult'}, {'name': 'further discussion required'}, {'name': 'size: XL'}, {'name': 'PR needs review'}]",2020-08-01 16:04:53+00:00,2020-08-05 23:42:27+00:00,373054.0,"4 days, 7:37:34","[{'comment_id': 463991545, 'comment_body': 'This looks very similar to the code added in the model, and this seems like a good opportunity to limit direct access to the index via a model method. Here we access the updated data below in any case.', 'comment_created': datetime.datetime(2020, 8, 1, 19, 17, 14, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 463992329, 'comment_body': 'This is not specific to your change here, but reading this code reminds me that `get_` is unclear just from the name - this is actually an API call, whereas `get_` can express any case where you\'re gathering data through an object, from a resource or otherwise (particularly if you come from languages where ""getters"" and ""setters"" are standard). In this context I might expect any external access of the topic list for a stream to be hidden behind a `get_*` (or no prefix), with any potential API call (`fetch_*`) generally happening behind the scenes.\r\n\r\nTo clarify, this is really another issue, since we do this in a few cases.', 'comment_created': datetime.datetime(2020, 8, 1, 19, 27, 12, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 464091480, 'comment_body': 'Agreed. It would make it easier to depict what the method actually does.', 'comment_created': datetime.datetime(2020, 8, 2, 15, 34, 20, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 464123671, 'comment_body': ""Using a method in this iteration is a good first step, but note that in both cases the code is setting the initial index - ensuring it exists or is fetched - then looking it up for a particular stream. This is a standard pattern where one object handles caching/synchronizing internally, but the external users of that code don't need to consider how that happens, or even be aware of it - they just want the list of topics! Of course, there can be cases where the external code might want this (eg. observer pattern) but we don't need it here, at least yet."", 'comment_created': datetime.datetime(2020, 8, 2, 21, 8, 1, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 465210511, 'comment_body': 'minor: this is a list, so we probably want `..._streams`?', 'comment_created': datetime.datetime(2020, 8, 4, 17, 24, 33, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 465212210, 'comment_body': ""I don't think we need this - aren't we just listing calling sites? If so, we'll have to update this code if we change those, which seems extra work to maintain when we could be using `git grep`?"", 'comment_created': datetime.datetime(2020, 8, 4, 17, 27, 24, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 465240601, 'comment_body': ""This doesn't update the data now - that's what the code says, but it took a while to figure out why. The UI still works since we update them independently. We should probably comment in the caller that it works this way, and whether we want to determine if if it's important to keep this synchronized, or how."", 'comment_created': datetime.datetime(2020, 8, 4, 18, 17, 48, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}]","[{'commit_sha': 'e6a8eb3af27c781ae01df1ff7fcc9a4e5bbc1b85', 'committer_username': 'preetmishra', 'committer_name': 'Preet Mishra', 'committer_email': 'ipreetmishra@gmail.com', 'commit_date': datetime.datetime(2018, 9, 26, 17, 5, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c44836acfd6417438e7d5701c2ee636ef80e5e20', 'committer_username': 'preetmishra', 'committer_name': 'Preet Mishra', 'committer_email': 'ipreetmishra@gmail.com', 'commit_date': datetime.datetime(2018, 9, 26, 17, 5, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e1f5556e67d52245e9921cfda8c2fba167189887', 'committer_username': 'preetmishra', 'committer_name': 'Preet Mishra', 'committer_email': 'ipreetmishra@gmail.com', 'commit_date': datetime.datetime(2018, 9, 26, 17, 5, 44, tzinfo=datetime.timezone.utc)}]",Preet Mishra,43616959,ipreetmishra@gmail.com,User,,18,,24,65
464669407,Markup timezone-aware time mentions,"This adds support for rendering timezone-aware time mentions which were recently added to the Zulip's markdown suite.

(See https://zulipchat.com/help/format-your-message-using-markdown#mention-a-time for markdown details.)

#### Complimentary additions
* `msg_time` style in themes.py.
* `TIME_MENTION_MARKER` symbol in symbols.py.

Test amended.

Fixes #691.",False,765,https://api.github.com/repos/zulip/zulip-terminal/pulls/765,https://github.com/zulip/zulip-terminal/pull/765,closed,52,3,7,2,7,14,4,0,"[{'name': 'high priority'}, {'name': 'further discussion required'}, {'name': 'size: L'}, {'name': 'area: message rendering'}]",2020-08-07 15:33:43+00:00,2020-08-11 20:26:55+00:00,363192.0,"4 days, 4:53:12","[{'comment_id': 467145942, 'comment_body': ""If this is a dependency of another package, we don't need to specify it directly."", 'comment_created': datetime.datetime(2020, 8, 7, 16, 31, 38, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 467370483, 'comment_body': ""`TIME` is in the `symbols` namespace, but when imported here it isn't particularly distinctive. To follow the other naming, maybe add `_MARKER`? Also, while the syntax is `<time:`, maybe this should be more inclusive to indicate a date aspect? Does the official documentation take into account the 'locally-converted' aspect?"", 'comment_created': datetime.datetime(2020, 8, 8, 6, 40, 14, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 467370581, 'comment_body': ""This may be clearer to some degree, but I quite like the stopwatch type icon, perhaps from having something similar for 'busy' icons in older systems! We could perhaps discuss this in the stream; these all seem like options:\r\n⌚  U+0231A  WATCH\r\n⌛  U+0231B  HOURGLASS\r\n⏰  U+023F0  ALARM CLOCK\r\n⏱  U+023F1  STOPWATCH\r\n⏳  U+023F3  HOURGLASS WITH FLOWING SAND\r\n⧖  U+029D6  WHITE HOURGLASS\r\n⧗  U+029D7  BLACK HOURGLASS"", 'comment_created': datetime.datetime(2020, 8, 8, 6, 41, 22, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 467370807, 'comment_body': 'What is this case? Is there a test for this?', 'comment_created': datetime.datetime(2020, 8, 8, 6, 44, 22, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 467487507, 'comment_body': ""This seems like a function name lacking context, so perhaps don't import it directly?"", 'comment_created': datetime.datetime(2020, 8, 8, 17, 42, 35, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 467487723, 'comment_body': ""Do you mean, to allow users to customize their date/time output beyond the `strftime` format string below?\r\n\r\nWas this particular string inspired by the webapp version? What do you think about adding the timezone (`%Z`) in parentheses at the end, to indicate it's in the user's local time?"", 'comment_created': datetime.datetime(2020, 8, 8, 17, 45, 2, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 467969360, 'comment_body': ""I am not sure if we should include the date aspect because it only serves for time mentions. I have renamed it to `TIME_MENTION_MARKER` which perhaps should be more appropriate.\r\n\r\nYes, it [does](https://zulipchat.com/help/format-your-message-using-markdown#mention-a-time).\r\n> ...you can mention a time, and it'll be displayed to each user in their own timezone (just like the timestamps on Zulip messages)."", 'comment_created': datetime.datetime(2020, 8, 10, 15, 5, 30, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 467973352, 'comment_body': ""Out of these, only ⏱, ⧖ and ⧗ seem to not cause the UI distortion bug that we have noticed in `urwid`.\r\n\r\nHowever, the emoji ⏱ appears to consume an extra space character. To recoup, I have added an extra space in `TIME_MENTION_MARKER` itself, i.e., `TIME_MENTION_MARKER = '⏱ '`."", 'comment_created': datetime.datetime(2020, 8, 10, 15, 11, 13, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 467975859, 'comment_body': ""Yes. Ideally, we'd switch the formatting according to the application-wide 12 hour/24 hour time format setting, much like the web app.\r\n\r\nYes, the string is inspired by the web app version. Though, the timezone addition seems plausible. I have added it in the latest update.\r\n\r\n"", 'comment_created': datetime.datetime(2020, 8, 10, 15, 14, 59, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 468000879, 'comment_body': ""I had initially put it after referring to the zulip/zulip code. However, with further investigation, there doesn't seem to any case where the timestamp could be `None`. I have removed it in the latest update."", 'comment_created': datetime.datetime(2020, 8, 10, 15, 42, 28, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 468114560, 'comment_body': 'To allow for unexpected server messages, what do you think about adding an assert against None?', 'comment_created': datetime.datetime(2020, 8, 10, 19, 1, 41, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 468115219, 'comment_body': 'Want to add an issue to discuss/explore this?', 'comment_created': datetime.datetime(2020, 8, 10, 19, 2, 53, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 468393213, 'comment_body': 'Filed #770.', 'comment_created': datetime.datetime(2020, 8, 11, 7, 53, 23, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 468838686, 'comment_body': 'This looks good for this v1 as per discussion in the stream :+1:', 'comment_created': datetime.datetime(2020, 8, 11, 20, 15, 56, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}]","[{'commit_sha': '52db70e2a104e01b288c5e7a403622a2484025de', 'committer_username': 'preetmishra', 'committer_name': 'Preet Mishra', 'committer_email': 'ipreetmishra@gmail.com', 'commit_date': datetime.datetime(2018, 9, 26, 17, 5, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '44901d47627687dbfc14016f0261f35acb340cdb', 'committer_username': 'preetmishra', 'committer_name': 'Preet Mishra', 'committer_email': 'ipreetmishra@gmail.com', 'commit_date': datetime.datetime(2018, 9, 26, 17, 5, 44, tzinfo=datetime.timezone.utc)}]",Preet Mishra,43616959,ipreetmishra@gmail.com,User,,18,,24,65
466858575,Show time mentions (with source text) in MsgInfoView,"This adds an instance attribute, `time_mentions`, to the class `MessageBox` to log time mentions (with their source text) and eventually show them in `MsgInfoView`.",True,771,https://api.github.com/repos/zulip/zulip-terminal/pulls/771,https://github.com/zulip/zulip-terminal/pull/771,closed,19,5,4,1,1,0,2,0,"[{'name': 'size: S'}, {'name': 'PR needs review'}]",2020-08-12 15:47:58+00:00,2020-08-13 06:36:19+00:00,53301.0,14:48:21,[],"[{'commit_sha': '213f6e34a13ba697df7cd695f5737142584150c6', 'committer_username': 'preetmishra', 'committer_name': 'Preet Mishra', 'committer_email': 'ipreetmishra@gmail.com', 'commit_date': datetime.datetime(2018, 9, 26, 17, 5, 44, tzinfo=datetime.timezone.utc)}]",Preet Mishra,43616959,ipreetmishra@gmail.com,User,,18,,24,65
451075324,Do not mark as read on search narrows,"This doesn't mark messages as read on any search narrow like the web app.

Fixes #624.",False,723,https://api.github.com/repos/zulip/zulip-terminal/pulls/723,https://github.com/zulip/zulip-terminal/pull/723,closed,23,0,2,1,1,0,3,0,"[{'name': 'enhancement'}, {'name': 'high priority'}, {'name': 'size: S'}]",2020-07-17 11:58:43+00:00,2020-07-18 05:09:34+00:00,61851.0,17:10:51,[],"[{'commit_sha': 'e1daf0020e6a976373773c863285cdf6ca9bbb1c', 'committer_username': 'preetmishra', 'committer_name': 'Preet Mishra', 'committer_email': 'ipreetmishra@gmail.com', 'commit_date': datetime.datetime(2018, 9, 26, 17, 5, 44, tzinfo=datetime.timezone.utc)}]",Preet Mishra,43616959,ipreetmishra@gmail.com,User,,18,,24,65
473223100,Add an explore mode to run the app without marking messages as read,"This introduces an optional argument, `--explore/-e`, to run the app in an explore mode where messages are not marked as read intentionally.

Tests amended and added.

Fixes #585.",True,787,https://api.github.com/repos/zulip/zulip-terminal/pulls/787,https://github.com/zulip/zulip-terminal/pull/787,closed,35,2,7,1,2,1,3,0,"[{'name': 'enhancement'}, {'name': 'further discussion required'}, {'name': 'size: M'}]",2020-08-25 13:58:11+00:00,2020-08-27 18:13:01+00:00,188090.0,"2 days, 4:14:50","[{'comment_id': 478198353, 'comment_body': 'This may apply to the other bools too, but this looks like a prime candidate for an `in_` prefix.', 'comment_created': datetime.datetime(2020, 8, 27, 6, 58, 30, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}]","[{'commit_sha': '95225efc9262c4d3448a143c6e40a6cbd6697b48', 'committer_username': 'preetmishra', 'committer_name': 'Preet Mishra', 'committer_email': 'ipreetmishra@gmail.com', 'commit_date': datetime.datetime(2018, 9, 26, 17, 5, 44, tzinfo=datetime.timezone.utc)}]",Preet Mishra,43616959,ipreetmishra@gmail.com,User,,18,,24,65
444319212,Handle internal links,"The PR adds support for handling internal links - stream, topic and near narrow.

#### Commits
The commits introduce `MessageLinkButton` in `MsgInfoView` and then incrementally add support for different narrows.

I would greatly appreciate any feedback on the changes, the commit chronology and the structure in general.

Partially fixes #352 and #764.",True,708,https://api.github.com/repos/zulip/zulip-terminal/pulls/708,https://github.com/zulip/zulip-terminal/pull/708,closed,566,4,4,3,13,36,2,0,"[{'name': 'size: XL'}, {'name': 'PR needs review'}]",2020-07-04 19:18:26+00:00,2020-08-29 04:01:21+00:00,4783375.0,"55 days, 8:42:55","[{'comment_id': 449798857, 'comment_body': ""What's the reasoning behind this particular assert? The buttons don't render properly if the prefix character is >1.\r\n\r\nI need numeric (and incremental) `prefix_character` for in-line message links which could be >1 (e.g. 10)."", 'comment_created': datetime.datetime(2020, 7, 4, 19, 24, 20, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 449808670, 'comment_body': ""This defines how the current button works, ie. it is not guaranteed to work outside those bounds. If you wish it to be able to handle more, then we likely want to refactor the class to work with longer text.\r\n\r\nThat said, you're not using the extra feature which the prefix allows, which from memory is just a specific style. If you don't need that then you can skip the prefix and just put it all in the text?"", 'comment_created': datetime.datetime(2020, 7, 4, 21, 59, 57, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 457576505, 'comment_body': ""Thanks for the pointer. Given the issues with `caption`, `prefix_character` and that the existing methods weren't needed, I ended up implementing a new `urwid.Button` subclass to better tailor my needs for the message links."", 'comment_created': datetime.datetime(2020, 7, 20, 17, 31, 22, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 458809664, 'comment_body': ""We could TypeVar this since you use it in multiple places (even tests).\r\n\r\n```\r\nMESSAGE_LINKS = TypeVar('MESSAGE_LINKS', OrderedDict[str, Tuple[str, int, bool]])\r\n```"", 'comment_created': datetime.datetime(2020, 7, 22, 13, 54, 12, tzinfo=datetime.timezone.utc), 'commenter': 'sumanthvrao', 'type': 'User'}, {'comment_id': 458880040, 'comment_body': 'I am currently showing `message_links` at the bottom since it is straightforward to implement and we were planning to move reactions away from `MsgInfoView` in #707. Though, I am not sure when that would be integrated. Thoughts?', 'comment_created': datetime.datetime(2020, 7, 22, 15, 28, 41, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 458952287, 'comment_body': ""Resolved in PM. (We're moving ahead with `message_links` before 'Reactions'.)"", 'comment_created': datetime.datetime(2020, 7, 22, 17, 13, 11, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 459171837, 'comment_body': 'If this can be None, then `Optional[MESSAGE_LINKS]`?', 'comment_created': datetime.datetime(2020, 7, 23, 1, 31, 41, tzinfo=datetime.timezone.utc), 'commenter': 'sumanthvrao', 'type': 'User'}, {'comment_id': 459217725, 'comment_body': ""Apart from the conversation that was had in PM, `OrderedDict` typing doesn't work as a type alias or var (see [mypy bug](https://github.com/python/mypy/issues/6904))."", 'comment_created': datetime.datetime(2020, 7, 23, 5, 12, 5, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 459222247, 'comment_body': 'This can be an empty `OrderedDict` but I believe mypy covers that currently?', 'comment_created': datetime.datetime(2020, 7, 23, 5, 31, 54, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 466858812, 'comment_body': 'The commit title (description) for this could be improved - imagine reading just that line after coming back to it - what does this actually do? (without reading the code)', 'comment_created': datetime.datetime(2020, 8, 7, 7, 1, 49, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 466859331, 'comment_body': 'Parsing the URL might be more clear here?', 'comment_created': datetime.datetime(2020, 8, 7, 7, 3, 1, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 466860935, 'comment_body': 'Is this and `self.stream_id` for `narrow_to_stream`?\r\n\r\nIf so, it may be worth adding a comment with the assert statements.', 'comment_created': datetime.datetime(2020, 8, 7, 7, 7, 5, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 466862880, 'comment_body': 'This seems rather cryptic - is there a better expression for this? What narrow failure are we expecting? Should the narrow methods return a value instead?', 'comment_created': datetime.datetime(2020, 8, 7, 7, 11, 58, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 466863191, 'comment_body': 'ids are always good :)', 'comment_created': datetime.datetime(2020, 8, 7, 7, 12, 41, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 466864735, 'comment_body': ""`(SERVER_URL + '/#narrow/stream/asdasdgasdgasdg', ?),` could be in a message typed in manually, I think? What should happen?"", 'comment_created': datetime.datetime(2020, 8, 7, 7, 16, 30, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 466866802, 'comment_body': ""I seem to recall a discussion about wanting decoding of server URLs previously on czo - might be worth a check, maybe it's something that could be added to the python API as a utility?"", 'comment_created': datetime.datetime(2020, 8, 7, 7, 21, 27, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 466869673, 'comment_body': 'Could you describe what near vs not-near means in the commit, and maybe in the ids?', 'comment_created': datetime.datetime(2020, 8, 7, 7, 27, 52, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 467607771, 'comment_body': ""Fixed with a simple expression. I was only expecting failure from the code that I previously had here (early return statements), but I have improved the structure now.\r\n\r\nRe narrow methods, I'd be inclined towards handle failures, if any, in the narrow methods itself than returning a value as a separate amendment."", 'comment_created': datetime.datetime(2020, 8, 9, 17, 20, 56, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 467607840, 'comment_body': '(Being discussed in [#integrations > Decode server URLs](https://chat.zulip.org/#narrow/stream/127-integrations/topic/Decode.20server.20URLs).)', 'comment_created': datetime.datetime(2020, 8, 9, 17, 21, 40, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 468250604, 'comment_body': 'We should really only be looking at the fragments from this point, likely only matching the cases you conveniently put above :) For example, you currently match the link-but-not-valid `https://chat.zulip.org/stream/#narrow/stream/1-announce`, which does link to #announce in this code but is invalid.\r\n\r\nThe same applies to the topic and near checks.', 'comment_created': datetime.datetime(2020, 8, 11, 0, 1, 35, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 468260855, 'comment_body': ""The helper method you're using here is close to what we've ended up using recently as a check to avoid exceptions. How about a `Model.is_user_subscribed_to_stream`?\r\n\r\nOne sign of this is that we're passing an attribute (of another object) to a regular function, so that object may as well be the 'self' :)\r\n\r\nThat said, currently we need the `stream_name` to make the narrowing work correctly?"", 'comment_created': datetime.datetime(2020, 8, 11, 0, 38, 5, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 468275088, 'comment_body': 'This may change if this is restructured to parse/validate the url/fragments first, but at least as it stands I think it would be clearer if they were passed around rather than set and accessed in another method.', 'comment_created': datetime.datetime(2020, 8, 11, 1, 30, 12, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 468276506, 'comment_body': ""In older server versions the stream-id was optional, so it's possible we might support recognizing that, for old messages."", 'comment_created': datetime.datetime(2020, 8, 11, 1, 35, 11, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 470746577, 'comment_body': 'Thanks. I have extracted `Model.is_user_subscribed_to_stream` as method in the latest update.\r\n\r\nYes, we need `stream_name`.', 'comment_created': datetime.datetime(2020, 8, 14, 17, 4, 23, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 471178048, 'comment_body': ""Unless you plan to extend this method, ie. you're always returning name or id, would it be simpler to return a mini-dict which you can integrate into the other dict? That would also make the meaning of the return values more obvious here. eg. `return dict(stream_id=int(stream_id))`."", 'comment_created': datetime.datetime(2020, 8, 17, 0, 11, 35, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 471178567, 'comment_body': 'You define this here, but then return an empty dict at the end. An `else` block or simple return would be clearer.', 'comment_created': datetime.datetime(2020, 8, 17, 0, 15, 37, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 471178998, 'comment_body': 'You have a lot of casts - this should be able to be simplified using a TypedDict.', 'comment_created': datetime.datetime(2020, 8, 17, 0, 19, 15, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 471180465, 'comment_body': ""Would it be useful to have this section be where we ensure that the name and id are both present, if one/both are valid?\r\n\r\nThese two checks could be combined, as currently they both check for being subscribed, just by name vs id.\r\n\r\nWhen we switch the narrow, we'll then know that they're both present and valid."", 'comment_created': datetime.datetime(2020, 8, 17, 0, 29, 34, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 471182222, 'comment_body': 'These notes on calling points are unnecessary.', 'comment_created': datetime.datetime(2020, 8, 17, 0, 42, 20, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 471184817, 'comment_body': ""If we guarantee we have stream name+id at this point, then we don't need this extra step."", 'comment_created': datetime.datetime(2020, 8, 17, 0, 59, 25, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 471185559, 'comment_body': 'Rather than conditionally adding each of these, perhaps add them unconditionally (generate the full dict each time) and handle the validation slightly differently? ', 'comment_created': datetime.datetime(2020, 8, 17, 1, 4, 18, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 471185814, 'comment_body': 'We can combine these lines? (and a few similar others)', 'comment_created': datetime.datetime(2020, 8, 17, 1, 5, 31, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 473279228, 'comment_body': '@neiljp Are you suggesting it to be moved to `_get_steam_data()`? I think it fits better here for two reasons:\r\n* The overall parse -> validate -> narrow flow seems consistent.\r\n* It is clearer to validate topic name later.', 'comment_created': datetime.datetime(2020, 8, 19, 19, 49, 14, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 473284918, 'comment_body': ""Ah, I see how what you're suggesting fits better. Thanks!"", 'comment_created': datetime.datetime(2020, 8, 19, 19, 59, 57, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 473984135, 'comment_body': ""The following was confusing `mypy`:\r\n```python3\r\nParsedNarrowLink = TypedDict('ParsedNarrowLink', {\r\n    'narrow': str,\r\n    'stream_id': Optional[int],\r\n    'stream_name': Optional[str],\r\n...\r\nstream_data = cls._decode_stream_data(fragments[2])\r\nparsed_link = dict(narrow='stream', **stream_data)  # type: ParsedNarrowLink\r\n```\r\n\r\nSo, to assist `mypy` and make things simpler, I introduced a `TypedDict` for the stream data and nested it instead.\r\n"", 'comment_created': datetime.datetime(2020, 8, 20, 13, 39, 32, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 474857759, 'comment_body': 'Renamed `StreamData` to `DecodedStream` to avoid conflict with the recently merged `StreamData` typed dict.', 'comment_created': datetime.datetime(2020, 8, 21, 18, 24, 52, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}]","[{'commit_sha': '1f873a90e3761a0c0d464df06d41ce3b8ca1a440', 'committer_username': 'preetmishra', 'committer_name': 'Preet Mishra', 'committer_email': 'ipreetmishra@gmail.com', 'commit_date': datetime.datetime(2018, 9, 26, 17, 5, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '73cc21e379ef79ad3b23755206889bfa9a8b9093', 'committer_username': 'preetmishra', 'committer_name': 'Preet Mishra', 'committer_email': 'ipreetmishra@gmail.com', 'commit_date': datetime.datetime(2018, 9, 26, 17, 5, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '330cef945e3a51a75acdee0f91479a011cee813a', 'committer_username': 'preetmishra', 'committer_name': 'Preet Mishra', 'committer_email': 'ipreetmishra@gmail.com', 'commit_date': datetime.datetime(2018, 9, 26, 17, 5, 44, tzinfo=datetime.timezone.utc)}]",Preet Mishra,43616959,ipreetmishra@gmail.com,User,,18,,24,65
441621911,Visually separate pinned and unpinned streams while searching,"The first commit is a refactor that extracts `streams_view_divider()` from `streams_view()`. 

The `streams_view_divider()` is used in the second commit, in `update_streams`, for inserting a divider between search results.

Fixes #577.",True,705,https://api.github.com/repos/zulip/zulip-terminal/pulls/705,https://github.com/zulip/zulip-terminal/pull/705,closed,50,13,2,2,5,5,3,0,"[{'name': 'enhancement'}, {'name': 'area: UI'}, {'name': 'size: L'}]",2020-06-29 20:06:34+00:00,2020-07-08 22:08:21+00:00,784907.0,"9 days, 2:01:47","[{'comment_id': 449806189, 'comment_body': ""This is now basically a factory function which initializes a divider in another way - so maybe let's just make this a simple subclass?"", 'comment_created': datetime.datetime(2020, 7, 4, 21, 17, 5, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 449905087, 'comment_body': ""Unlike the previous implementation, I have set the `div_char='-'` from the `__init__` instead. This will help to maintain consistency (between `StreamsView` and `LeftColumnView` stream view dividers) if we ever wish to update the `div_char`. "", 'comment_created': datetime.datetime(2020, 7, 5, 18, 24, 12, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 450640991, 'comment_body': ""I understand the desire to design for what we may need, but\r\n* we may never need it, and if we do then we can do it later :)\r\n* the customization in the initializer isn't needed, but could allow for inconsistency - which is not what we want!\r\n\r\nIf we allow defaults, then this is only a divider with custom properties - which is useful, admittedly - but we can also just specify the properties it has as a `Divider` when we initialize the `Divider` itself."", 'comment_created': datetime.datetime(2020, 7, 7, 6, 37, 29, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 450650968, 'comment_body': 'Can we simplify this with `not in`?', 'comment_created': datetime.datetime(2020, 7, 7, 7, 2, 10, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 450651100, 'comment_body': ""`StreamsViewDivider`?\r\n\r\nAlso, I remember you discussed the need for this section, but could you explain how it can happen in the comment, ie. what situation you're avoiding?"", 'comment_created': datetime.datetime(2020, 7, 7, 7, 2, 30, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}]","[{'commit_sha': 'd30b03d49732df3aac3ec09607706e2d98e5a94c', 'committer_username': 'preetmishra', 'committer_name': 'Preet Mishra', 'committer_email': 'ipreetmishra@gmail.com', 'commit_date': datetime.datetime(2018, 9, 26, 17, 5, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c43f8dd362b299afe85c099546ce996447e62841', 'committer_username': 'preetmishra', 'committer_name': 'Preet Mishra', 'committer_email': 'ipreetmishra@gmail.com', 'commit_date': datetime.datetime(2018, 9, 26, 17, 5, 44, tzinfo=datetime.timezone.utc)}]",Preet Mishra,43616959,ipreetmishra@gmail.com,User,,18,,24,65
385776739,Improve typeahead suggestion and search for streams,"@neiljp This is a follow up to https://github.com/zulip/zulip-terminal/pull/510#pullrequestreview-363060680. 

The previous implementation only did a `startswith` lookup which caused it to miss out on the suggestions that were expected. I have fixed that with a substring lookup. I have also amended the test cases as now the suggestions are being given in an sorted (non-decreasing) order.",False,530,https://api.github.com/repos/zulip/zulip-terminal/pulls/530,https://github.com/zulip/zulip-terminal/pull/530,closed,139,65,5,3,19,47,1,0,[{'name': 'size: XL'}],2020-03-09 19:30:22+00:00,2020-05-31 01:11:27+00:00,7105265.0,"82 days, 5:41:05","[{'comment_id': 390123812, 'comment_body': ""Wouldn't it be more desirable if it matches a stream starting with some text, and only then do a full text search?"", 'comment_created': datetime.datetime(2020, 3, 10, 7, 0, 49, tzinfo=datetime.timezone.utc), 'commenter': 'kaustubh-nair', 'type': 'User'}, {'comment_id': 390193720, 'comment_body': ""I'd like to know what @neiljp thinks about this."", 'comment_created': datetime.datetime(2020, 3, 10, 9, 42, 26, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 391990989, 'comment_body': 'Intuitively, I would expect to get search results which match with the starting text first and later on those which match with intermediate text. Maybe a full text search can be implemented as a secondary sort. ', 'comment_created': datetime.datetime(2020, 3, 13, 1, 54, 50, tzinfo=datetime.timezone.utc), 'commenter': 'sumanthvrao', 'type': 'User'}, {'comment_id': 403516773, 'comment_body': 'Shouldn\'t this give the order of ""Stream 1"", ""Stream 2"", ""Secret stream"", ""Some general stream"" ?\r\n\r\nAre there pinning considerations? If so, can we make that explicit in some way?', 'comment_created': datetime.datetime(2020, 4, 4, 21, 6, 35, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 403517165, 'comment_body': '`text.lower()`?', 'comment_created': datetime.datetime(2020, 4, 4, 21, 10, 39, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 403517256, 'comment_body': 'Could we simplify this multiple sort by sorting a list of tuples?', 'comment_created': datetime.datetime(2020, 4, 4, 21, 11, 58, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 403518092, 'comment_body': ""This code looks very familiar to the other? Is there a reason you didn't refactor it first?"", 'comment_created': datetime.datetime(2020, 4, 4, 21, 17, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 403732276, 'comment_body': '@neiljp I pass `query`, which is already in lowercase, to this function. I extracted `text[1:].lower()` as `query`.', 'comment_created': datetime.datetime(2020, 4, 5, 17, 27, 25, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 403733752, 'comment_body': ""@neiljp Yes, there are pinning considerations.\r\nThe 'pinned_streams' are defined, in `test_autocomplete_streams`, through the following:\r\n```\r\nwrite_box.view.pinned_streams = [\r\n        [stream['name']] for stream in\r\n        streams_fixture[:len(streams_fixture)//2]\r\n```\r\nWould you like the function to be refactored?"", 'comment_created': datetime.datetime(2020, 4, 5, 17, 39, 41, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 403735320, 'comment_body': ""@neiljp I had thought of introducing `order_stream`, to sort the streams as per these criteria, but that required some pre-refactoring and structural changes in `update_streams` and `autocomplete_streams`.\r\n\r\nShould I go ahead with this? Also, what could be the commit message for pre-refactoring commits like these (where some refactoring is required only for getting it ready for a 'new' feature)?"", 'comment_created': datetime.datetime(2020, 4, 5, 17, 53, 30, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 405935240, 'comment_body': ""My concern is that these parametrizations don't demonstrate what happens very clearly.\r\n\r\nI would expect test cases showing each of the features we claim to support, if that's possible with the stream names we have. So `#stream` would (without pinning) prefer stream-1, stream-2, secret, then general; `#S` would just be alphabetical (?); more matches limit things (like `#so`, `#se` do already :+1:).\r\n\r\nA comment may be sufficient here, though we may need a pinning of specific named streams in the test to make it clearer too?"", 'comment_created': datetime.datetime(2020, 4, 9, 3, 26, 43, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 405937074, 'comment_body': ""I did see that. Let's leave this pending until the sorting is simplified - that may clarify this."", 'comment_created': datetime.datetime(2020, 4, 9, 3, 34, 26, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 405937773, 'comment_body': ""Refactoring is generally fine to do first. Otherwise you can often end up duplicating and slightly altering code, only to shrink it in a refactoring commit afterwards.\r\n\r\nWould it make sense to move this code into `match_stream`, or perhaps once you've rebased against the refactoring I merged from @kaustubh-nair this will be more straight-forward in any case?"", 'comment_created': datetime.datetime(2020, 4, 9, 3, 37, 40, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 414707369, 'comment_body': 'My remaining concern with this is that this method is only used once (not in both applications), and is very simple now, but also we do `if new_text in stream.stream_name.lower()` in the `views.py` version?', 'comment_created': datetime.datetime(2020, 4, 24, 16, 31, 18, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 414708741, 'comment_body': ""I'm not particularly comfortable with this approach: I'd prefer the data that we pass to any sorting method include this, rather than have a function which filters depending on this special string."", 'comment_created': datetime.datetime(2020, 4, 24, 16, 33, 32, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 414713631, 'comment_body': ""How about making this into a dict (or list of tuples) of the form `#**name**: name`, and similarly for the other case, Then we would not need the extra helper function and it would be explicit that the first entry is the 'display' and the second the 'search key'?"", 'comment_created': datetime.datetime(2020, 4, 24, 16, 41, 15, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 414719260, 'comment_body': 'The streams are already sorted by pinning?', 'comment_created': datetime.datetime(2020, 4, 24, 16, 50, 26, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 417412558, 'comment_body': 'This was redundant.', 'comment_created': datetime.datetime(2020, 4, 29, 15, 36, 53, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 417415921, 'comment_body': ""For `matches`, an alternative could be to use a `list` (where index 0: 'pinned' and index 1: 'unpinned').\r\n\r\nI went with an `OrderedDict` for 'readability' (see line 491)."", 'comment_created': datetime.datetime(2020, 4, 29, 15, 41, 27, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 417779404, 'comment_body': 'OrderedDict?', 'comment_created': datetime.datetime(2020, 4, 30, 6, 20, 10, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 417786695, 'comment_body': ""This syntax suggests we should be using a different approach to iterating the dictionary, with tuple unpacking.\r\nIt should also make it clearer what 'stream' breaks down into in the loop (and another further down), which would make it easier to read.\r\n\r\nDepending on the complexity, it may be simpler to generate a new data structure - particularly if by a comprehension - to make it more obvious what is happening here by naming variables. Comments would be an alternative of course :)"", 'comment_created': datetime.datetime(2020, 4, 30, 6, 39, 27, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 417789262, 'comment_body': ""Don't we want to consider every delimiter, not just the first one we find? Eg. `foo/fah fum` searching for f, would pick the space and give up on the `fah`?\r\n\r\nIf we do that, we should probably set each delimiter on an equal level?"", 'comment_created': datetime.datetime(2020, 4, 30, 6, 45, 54, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 417789613, 'comment_body': ""I like that you've not just used spaces :+1: Does the webapp do anything similar?"", 'comment_created': datetime.datetime(2020, 4, 30, 6, 46, 47, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 417831600, 'comment_body': 'DefaultDict?', 'comment_created': datetime.datetime(2020, 4, 30, 8, 9, 30, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 417834482, 'comment_body': 'Is this a `List[str]`, or `List[Any]`, where it matches the `Any` passed in? If so, you could use a `TypeVar`, both for type-checking and making this clearer.', 'comment_created': datetime.datetime(2020, 4, 30, 8, 14, 49, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 417836641, 'comment_body': 'Is passing in a `List[Tuple[T, List[str]]]` sufficient?', 'comment_created': datetime.datetime(2020, 4, 30, 8, 18, 37, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 418190762, 'comment_body': ""I am not sure it does. For instance, 'help' finds streams that have 'help' as a second word and 'term' doesn't find 'zulip-terminal' (in stream search).\r\n"", 'comment_created': datetime.datetime(2020, 4, 30, 17, 59, 16, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 418495280, 'comment_body': 'Right, well I feel this is an improvement; not sure if this is a conscious choice @timabbott ?', 'comment_created': datetime.datetime(2020, 5, 1, 10, 39, 37, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 418621083, 'comment_body': 'I had assumed that the user would use only one kind of delimiter. Thanks for bringing this up. :+1: ', 'comment_created': datetime.datetime(2020, 5, 1, 16, 32, 35, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 418678076, 'comment_body': ""My bad. It is `List[Any]`.\r\n\r\nAre you suggesting using something like the following?\r\n```python\r\nT = TypeVar('T', Any, str)\r\n```"", 'comment_created': datetime.datetime(2020, 5, 1, 18, 38, 13, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 418689013, 'comment_body': 'You can constrain the types in that way, though the one you mention is not very useful - it\'s saying that `T` can be consistently `Any` or `str`. You may be thinking of `AnyStr` as an example of this - but this doesn\'t have `Any` as one of the types.\r\n\r\nReally I was indicating how you can relate the function parameter types and return type(s) - if they *are* supposed to be related - by using a `TypeVar`.\r\n\r\nThe mypy pages describe this quite well I think, and there are examples in zulip/zulip, but I was querying whether this kind of approach was applicable:\r\n```\r\nX = TypeVar(\'X\')\r\ndef foo(x: X) -> X:\r\n  ...\r\n\r\nfoo(5)  # must return int\r\nfoo(2.5)  # must return float\r\nfoo(""y"")  # must return str\r\n```', 'comment_created': datetime.datetime(2020, 5, 1, 19, 2, 19, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 418932160, 'comment_body': 'Thanks for the explanation. :)', 'comment_created': datetime.datetime(2020, 5, 2, 8, 43, 12, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 421309058, 'comment_body': ""This is not relevant to the user of the function (it's how it works internally), and is likely more useful next to the code itself, if you do include it."", 'comment_created': datetime.datetime(2020, 5, 7, 7, 53, 40, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 422396737, 'comment_body': ""You're iterating over the keys here (implicitly, via `in`), but we don't ever use `kind` directly, and only ever the values? So we can just iterate over what we use instead? This basically emphasizes what you said, that the use of `pinned` as a key is descriptive, but we don't directly use it."", 'comment_created': datetime.datetime(2020, 5, 8, 22, 3, 48, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 422401403, 'comment_body': 'This might be clearer with maketrans or a regex? You might then be able to shrink this into a list comprehension?', 'comment_created': datetime.datetime(2020, 5, 8, 22, 19, 31, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 422403670, 'comment_body': ""We generate `kind` here, but it only depends on the `stream_name` at the top of the first loop. Perhaps you were wanting to avoid calculating `kind` until it was definitely used? If we move it up it should make it clearer that kind doesn't change depending upon what's in the lower loop/condition.\r\n\r\nThe pinned logic could be taken further and we could pre-sort the pinned and unpinned, but let's skip that for now, unless you find it looks even tidier!"", 'comment_created': datetime.datetime(2020, 5, 8, 22, 27, 10, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 422404895, 'comment_body': ""Should the above two be reversed? ('Se' before 'So')\r\n\r\nSo, an equal match is sorted. This is relatively minor, but it's unclear how it's sorting otherwise?"", 'comment_created': datetime.datetime(2020, 5, 8, 22, 31, 11, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 422406724, 'comment_body': 'Consider `text` -> `search_text`?', 'comment_created': datetime.datetime(2020, 5, 8, 22, 37, 52, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 422408414, 'comment_body': ""These test cases are OK, but it feels like duplication of the other test parameters, and don't go into as much depth - and we could also test `match_stream`, fundamentally, perhaps instead of these two."", 'comment_created': datetime.datetime(2020, 5, 8, 22, 44, 7, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 422519948, 'comment_body': ""To clarify, `match_stream` doesn't sort; it expects `streams` to be sorted (I have mentioned this in the docstring).\r\n\r\nRe the 'Se' before 'So', 'Some general stream' has been put before 'Secret stream' in `streams_fixture` which is why the suggestions are being given in this order.\r\n\r\n```python\r\n@pytest.fixture\r\ndef streams_fixture():\r\n    streams = [general_stream, secret_stream]\r\n    ...\r\n```"", 'comment_created': datetime.datetime(2020, 5, 9, 16, 58, 42, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 422520198, 'comment_body': 'Indeed, I did that to avoid calculating `kind` every time. However, the suggested approach is much cleaner. :+1: ', 'comment_created': datetime.datetime(2020, 5, 9, 17, 1, 2, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 422520321, 'comment_body': ""Wow, I didn't know something like `maketrans` existed. Thanks!"", 'comment_created': datetime.datetime(2020, 5, 9, 17, 2, 30, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 428948703, 'comment_body': ""Well, there are two things to consider here, which seem pretty important:\r\n* Shouldn't the fixture we're using be providing the correct data? That is, it should be sorted?\r\n* Maybe we should add an assert on the input to ensure it is sorted, to validate the assumption on the input?"", 'comment_created': datetime.datetime(2020, 5, 21, 22, 25, 13, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 428951432, 'comment_body': ""The use of `StreamT` (which is perhaps a slightly confusing name) suggests that 'streams' isn't really accurate here either - `StreamT` is some arbitrary data which is associated with the second text which we're matching with, right? Maybe just call this `DataT` and use `data` in the method? We don't care what it is?"", 'comment_created': datetime.datetime(2020, 5, 21, 22, 33, 47, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 428956249, 'comment_body': ""This line looks a little confusing; are you converting to a `dict` to iterate over the keys? While that's an established trait of dicts, it also applies to `OrderedDict`s in any case, right? Might it may be clearer using `.keys()` in any case?"", 'comment_created': datetime.datetime(2020, 5, 21, 22, 49, 9, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 429414215, 'comment_body': ""I agree. We could either change the name from 'Some general stream' to 'General Stream' (that'd fix the order) or sort the streams in the fixture itself. \r\n\r\nThe assert sounds appealing. It would require the input to be sorted while maintaining the pinning order (e.g. `assert input = sorted(input, key=is_pinned)`), right?. In that case, would the assert be better than actually sorting the input?"", 'comment_created': datetime.datetime(2020, 5, 22, 19, 12, 18, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 429494179, 'comment_body': ""The fixture is supposed to represent what is present in the running code, so it should probably be in the right order in any case, given that's what the function expects. I think that's probably the minimum, whether we adjust the fixture or potentially change the name - though I don't know if the latter approach would affect the scope of other tests that use the same fixture.\r\n\r\nThe assert would be a code-based representation of what the range of inputs are supposed to be, a little like the +1/-1 in set_counts. Sometimes that can be expressed more cleanly in terms of the data type used, but failing that then it's useful to ensure that eg. in that case we don't pass +5 to set _count!"", 'comment_created': datetime.datetime(2020, 5, 23, 0, 8, 48, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}]","[{'commit_sha': '5c0b0f96fd17ca762fad314c11509f726bf8af05', 'committer_username': 'kaustubh-nair', 'committer_name': 'Kaustubh Nair', 'committer_email': 'kaustubh.nair108@gmail.com', 'commit_date': datetime.datetime(2017, 7, 15, 13, 2, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8d704a48f7200f321284897a344843450558b483', 'committer_username': 'preetmishra', 'committer_name': 'Preet Mishra', 'committer_email': 'ipreetmishra@gmail.com', 'commit_date': datetime.datetime(2018, 9, 26, 17, 5, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4a2a2823b7cbbf67f8d06f9aa51bb05513635bcc', 'committer_username': 'preetmishra', 'committer_name': 'Preet Mishra', 'committer_email': 'ipreetmishra@gmail.com', 'commit_date': datetime.datetime(2018, 9, 26, 17, 5, 44, tzinfo=datetime.timezone.utc)}]",Preet Mishra,43616959,ipreetmishra@gmail.com,User,,18,,24,65
438717050,bugfix: Left strip search text to avoid empty search results,"This amends `PanelSearchBox`'s update functions to avoid empty search results for spaces.

@neiljp Thanks for reporting the bug in https://github.com/zulip/zulip-terminal/pull/699#pullrequestreview-434369722. :+1: 
",False,700,https://api.github.com/repos/zulip/zulip-terminal/pulls/700,https://github.com/zulip/zulip-terminal/pull/700,closed,18,1,2,2,6,0,2,0,"[{'name': 'size: S'}, {'name': 'PR needs review'}]",2020-06-23 17:33:34+00:00,2020-08-29 16:41:52+00:00,5785698.0,"66 days, 23:08:18",[],"[{'commit_sha': 'ecd883bc41d805c47f5f0b9e2358d377d4d891aa', 'committer_username': 'preetmishra', 'committer_name': 'Preet Mishra', 'committer_email': 'ipreetmishra@gmail.com', 'commit_date': datetime.datetime(2018, 9, 26, 17, 5, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'addb62c42e58ac545634bf344ea8b7115363ebaa', 'committer_username': 'preetmishra', 'committer_name': 'Preet Mishra', 'committer_email': 'ipreetmishra@gmail.com', 'commit_date': datetime.datetime(2018, 9, 26, 17, 5, 44, tzinfo=datetime.timezone.utc)}]",Preet Mishra,43616959,ipreetmishra@gmail.com,User,,18,,24,65
420906104,README: Specify low priority for mouse support.,I have added the description in a new Frequently Asked Questions section. I think it would be a good place to jot down points like this over time.,False,668,https://api.github.com/repos/zulip/zulip-terminal/pulls/668,https://github.com/zulip/zulip-terminal/pull/668,closed,4,0,1,1,3,1,1,0,[{'name': 'size: XS'}],2020-05-20 17:26:19+00:00,2020-05-21 21:23:03+00:00,100604.0,"1 day, 3:56:44","[{'comment_id': 428415944, 'comment_body': 'Perhaps refer to #248 here?', 'comment_created': datetime.datetime(2020, 5, 21, 2, 47, 48, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}]","[{'commit_sha': '775a9da11d9b1b6ee533f295eccf79ee0e8c9eab', 'committer_username': 'preetmishra', 'committer_name': 'Preet Mishra', 'committer_email': 'ipreetmishra@gmail.com', 'commit_date': datetime.datetime(2018, 9, 26, 17, 5, 44, tzinfo=datetime.timezone.utc)}]",Preet Mishra,43616959,ipreetmishra@gmail.com,User,,18,,24,65
447291574,FAQ: Amend hotkeys section to remove the obsolete context,The change feels a bit scrupulous but should be useful to have in any case.,True,713,https://api.github.com/repos/zulip/zulip-terminal/pulls/713,https://github.com/zulip/zulip-terminal/pull/713,closed,2,2,1,1,1,0,0,0,[],2020-07-10 08:04:13+00:00,2020-07-11 00:02:20+00:00,57487.0,15:58:07,[],"[{'commit_sha': 'dca59678d9eff6ed3c31488307bedf48f6f302e6', 'committer_username': 'preetmishra', 'committer_name': 'Preet Mishra', 'committer_email': 'ipreetmishra@gmail.com', 'commit_date': datetime.datetime(2018, 9, 26, 17, 5, 44, tzinfo=datetime.timezone.utc)}]",Preet Mishra,43616959,ipreetmishra@gmail.com,User,,18,,24,65
455690476,docs: Update obsolete relative links in getting-started.md,These links were out-of-date against the recent documentation updates that were merged.,True,734,https://api.github.com/repos/zulip/zulip-terminal/pulls/734,https://github.com/zulip/zulip-terminal/pull/734,closed,1,1,1,1,1,0,1,0,[{'name': 'size: XS'}],2020-07-23 12:57:40+00:00,2020-07-23 19:15:30+00:00,22670.0,6:17:50,[],"[{'commit_sha': '22d823e2984bbd4c5c831f293350f140cbf2d0c5', 'committer_username': 'preetmishra', 'committer_name': 'Preet Mishra', 'committer_email': 'ipreetmishra@gmail.com', 'commit_date': datetime.datetime(2018, 9, 26, 17, 5, 44, tzinfo=datetime.timezone.utc)}]",Preet Mishra,43616959,ipreetmishra@gmail.com,User,,18,,24,65
419146043,Add support for edit history,"This PR builds up on @shreyamalviya's #354 to show edit history for a message. :+1:

The popup can be triggered by pressing  `d`  from the `MsgInfoView` for any message (we could discuss other key options and whether it would be better to show the popup only for messages that are edited).

For **v1**, the popup only shows the content for every snapshot in the 'message_history' (not the diff). 

I have split the last two commits for making it easier to review. We could squash the two if necessary.

Fixes #135 partially.",False,663,https://api.github.com/repos/zulip/zulip-terminal/pulls/663,https://github.com/zulip/zulip-terminal/pull/663,closed,539,5,10,9,18,63,2,0,"[{'name': 'size: XL'}, {'name': 'PR needs review'}]",2020-05-17 17:34:01+00:00,2020-08-30 17:35:50+00:00,9072109.0,"105 days, 0:01:49","[{'comment_id': 428068638, 'comment_body': 'Can we type-hint this more strictly? Maybe `Message`?', 'comment_created': datetime.datetime(2020, 5, 20, 14, 41, 47, tzinfo=datetime.timezone.utc), 'commenter': 'sumanthvrao', 'type': 'User'}, {'comment_id': 428676313, 'comment_body': 'Thanks for pointing it out. ', 'comment_created': datetime.datetime(2020, 5, 21, 14, 11, 36, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 430823497, 'comment_body': ""@preetmishra It maybe simpler here to split the commit into \r\na) README/keys - which adds the key (without linking it) (`git log --grep='README/keys'`)\r\nb) EditHistory View  - and test for it.\r\nc) Finally, link the keypress function - and tests for it.\r\n\r\nSplitting the commits in such a fashion makes reviewing easier and commit much more coherent."", 'comment_created': datetime.datetime(2020, 5, 27, 2, 30, 54, tzinfo=datetime.timezone.utc), 'commenter': 'sumanthvrao', 'type': 'User'}, {'comment_id': 431272422, 'comment_body': ""The 'message history' is also needed in `TestEditHistoryView` which is why I went ahead with a fixture in `conftest.py`."", 'comment_created': datetime.datetime(2020, 5, 27, 16, 19, 51, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 431275935, 'comment_body': ""The `MSG_INFO` makes me wonder if it'd be a better idea to rename the `self.command`, in `PopUpView`, variable to something like `self.exit_popup_command`?"", 'comment_created': datetime.datetime(2020, 5, 27, 16, 25, 13, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 432834901, 'comment_body': 'minor: Mentioning the key itself in the commit title, maybe helpful. Eg: Add `e` to view edit history popup.', 'comment_created': datetime.datetime(2020, 5, 30, 11, 45, 16, tzinfo=datetime.timezone.utc), 'commenter': 'sumanthvrao', 'type': 'User'}, {'comment_id': 432835070, 'comment_body': 'Future: Though we are excluding it from random tips, I am wondering if we can hint at a possible edit history key in any way? It might be useful to show tips like `i` + `e` for message edit history, maybe when hovering over a EDITED message. Interesting discussion to have in #zulip-term perhaps.', 'comment_created': datetime.datetime(2020, 5, 30, 11, 47, 27, tzinfo=datetime.timezone.utc), 'commenter': 'sumanthvrao', 'type': 'User'}, {'comment_id': 432845805, 'comment_body': ""```('Edit History',\r\n             'Press ' + ', '.join(keys_for_command('EDIT_HISTORY'))\r\n             + ' to view'),\r\n```\r\nMight be simpler."", 'comment_created': datetime.datetime(2020, 5, 30, 14, 28, 58, tzinfo=datetime.timezone.utc), 'commenter': 'sumanthvrao', 'type': 'User'}, {'comment_id': 432870947, 'comment_body': 'We talked about the possibility of moving new tests to new files. This test seems pretty independent, hence I thought to mention it here. Maybe a new file  `ui_tools/test_view.py`?', 'comment_created': datetime.datetime(2020, 5, 30, 17, 11, 15, tzinfo=datetime.timezone.utc), 'commenter': 'sumanthvrao', 'type': 'User'}, {'comment_id': 432872445, 'comment_body': ""Further thoughts: Maybe returning a tuple here would make some logic simpler. A bool tuple (True, 'msg') maybe? Or a success tuple like (response[result], response['msg']) ?"", 'comment_created': datetime.datetime(2020, 5, 30, 17, 32, 46, tzinfo=datetime.timezone.utc), 'commenter': 'sumanthvrao', 'type': 'User'}, {'comment_id': 432872721, 'comment_body': 'Are all these details required for a basic fixture?', 'comment_created': datetime.datetime(2020, 5, 30, 17, 36, 33, tzinfo=datetime.timezone.utc), 'commenter': 'sumanthvrao', 'type': 'User'}, {'comment_id': 432900896, 'comment_body': 'Will this assert ever fail in this code path? Will it throw an exception then?', 'comment_created': datetime.datetime(2020, 5, 31, 1, 28, 34, tzinfo=datetime.timezone.utc), 'commenter': 'sumanthvrao', 'type': 'User'}, {'comment_id': 432901282, 'comment_body': 'I like this dynamic height calculation :)', 'comment_created': datetime.datetime(2020, 5, 31, 1, 38, 17, tzinfo=datetime.timezone.utc), 'commenter': 'sumanthvrao', 'type': 'User'}, {'comment_id': 432901922, 'comment_body': ""Apologies, I was under the impression the `build_pile` you were referring to was the urwid's default one. Now, that I looked at its code, we should be thinking about testing it to some extent, at least. Maybe having a fixture for PM data, stream data for the `snapshot` and assert it against the called values in `urwid.Pile`. Or a simpler test to check the length of `urwid.Pile` returned might be start. If we follow that this change (build_pile and its test) could be extracted into another commit as well.\r\n\r\nIf you want to take this up later, you could add a TODO as well."", 'comment_created': datetime.datetime(2020, 5, 31, 1, 53, 20, tzinfo=datetime.timezone.utc), 'commenter': 'sumanthvrao', 'type': 'User'}, {'comment_id': 432901957, 'comment_body': ""Correct me if I'm wrong, but this logic is necessary if the topic name change has happened right? Maybe add a comment on top, if that's the case."", 'comment_created': datetime.datetime(2020, 5, 31, 1, 54, 16, tzinfo=datetime.timezone.utc), 'commenter': 'sumanthvrao', 'type': 'User'}, {'comment_id': 432902320, 'comment_body': 'We seem to show the fact that the topic has been updated, in both the title and the body here. We show it in `updated from {}` (Title) and show who it was updated by as well. Do you think sticking with `Edited by X` might be simpler here, even for a topic update? Might simplify things a bit. Might be a discussion to have on the stream.', 'comment_created': datetime.datetime(2020, 5, 31, 2, 1, 20, tzinfo=datetime.timezone.utc), 'commenter': 'sumanthvrao', 'type': 'User'}, {'comment_id': 432902742, 'comment_body': 'While this does take `O(n)` in the worst case, it does if for every `edit` in edit-history. I was brainstorming something faster and maybe we can use a combination of `model.user_id_email_dict` and `model.user_dict` to get the name faster. Worthwhile to add a `FIXME` in case we decide to go with this for now.', 'comment_created': datetime.datetime(2020, 5, 31, 2, 11, 18, tzinfo=datetime.timezone.utc), 'commenter': 'sumanthvrao', 'type': 'User'}, {'comment_id': 436378727, 'comment_body': 'As `e` _can_ be changed in the future, I have added `EDIT_HISTORY` to the commit title instead.', 'comment_created': datetime.datetime(2020, 6, 7, 16, 17, 12, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 436379443, 'comment_body': ""Yes, however, the current implementation adds quotes ('') to the keys that are returned from `keys_for_command`. The quotes make it easier to differentiate the keys from the rest of the text."", 'comment_created': datetime.datetime(2020, 6, 7, 16, 25, 53, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 436380081, 'comment_body': ""@neiljp mentioned that it'd be better to move all the popup views and their tests altogether. \r\n\r\nWould it be better to hold this off until then?"", 'comment_created': datetime.datetime(2020, 6, 7, 16, 34, 12, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 436380279, 'comment_body': 'The other `get_*` methods in `model.py` use a similar approach. Could you point out where the proposed tuple would be helpful?', 'comment_created': datetime.datetime(2020, 6, 7, 16, 36, 43, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 436380478, 'comment_body': ""It is likely to fail when ZT has trouble connecting to the server. In that case, it'll raise an AssertionError."", 'comment_created': datetime.datetime(2020, 6, 7, 16, 39, 16, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 436381239, 'comment_body': 'Opened [Help tips](https://chat.zulip.org/#narrow/stream/206-zulip-terminal/topic/Help.20tips) on CZO.', 'comment_created': datetime.datetime(2020, 6, 7, 16, 48, 25, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 436381338, 'comment_body': 'Thanks so much, the proposed strategy is faster than the `O(n)` approach.', 'comment_created': datetime.datetime(2020, 6, 7, 16, 50, 5, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 437078210, 'comment_body': 'Sure. Makes sense.', 'comment_created': datetime.datetime(2020, 6, 9, 0, 53, 51, tzinfo=datetime.timezone.utc), 'commenter': 'sumanthvrao', 'type': 'User'}, {'comment_id': 438219957, 'comment_body': 'My bad, I had forgotten that this is the result of the recent refactor which helps us view the error message better. I remember seeing the old code where we used to return a bool value back, which got me confused.', 'comment_created': datetime.datetime(2020, 6, 10, 15, 37, 27, tzinfo=datetime.timezone.utc), 'commenter': 'sumanthvrao', 'type': 'User'}, {'comment_id': 439852324, 'comment_body': ""Previously, this label extension bit was in the 3rd/'Introduce EditHistoryView...' commit."", 'comment_created': datetime.datetime(2020, 6, 14, 17, 44, 4, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 470832069, 'comment_body': 'While this commit is separate, we might merge this with another commit later to avoid the UI/docs showing options that are not available :thinking: ', 'comment_created': datetime.datetime(2020, 8, 14, 19, 42, 11, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 470836218, 'comment_body': ""This seems like a good opportunity to split into (create) a new test file. While these are `View`s, I think it would be useful to split them into being `test_popups.py` and later split the popup code into `popups.py`; thoughts?\r\n\r\nHow much of this commit was by Shreya? Given you're attributing this to Shreya then it would be reasonable to add a line to the commit text to indicate that you are responsible for eg tests - or noting what you significantly changed. Alternatively if this is significantly different we should treat it as your work - did we discuss this previously?\r\n\r\nNote the typo in the commit title."", 'comment_created': datetime.datetime(2020, 8, 14, 19, 52, 29, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 471053943, 'comment_body': ""fetch vs get?\r\n\r\nDo we need to fetch it each time to get the updated diffs, etc? Do we gain from caching the result in `'message_history'` for each message? Are we handling that cache somehow?\r\n"", 'comment_created': datetime.datetime(2020, 8, 16, 2, 2, 58, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 471054851, 'comment_body': ""minor: contents -> edit_block? Maybe change the method name to include a verb for creation? We don't do that in other places (though certainly could), but using 'edit' is confusing due to the noun/verb ambiguity."", 'comment_created': datetime.datetime(2020, 8, 16, 2, 16, 39, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 471054914, 'comment_body': ""This would be clearer with a simple if/elif/else. This might benefit from a `Literal` too? You have other sets of literals being used, but I'm not sure if we need to type them, but at least this `state` seems like a useful one?"", 'comment_created': datetime.datetime(2020, 8, 16, 2, 17, 58, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 471054967, 'comment_body': 'Maybe we should just not show history for an unedited messaged?', 'comment_created': datetime.datetime(2020, 8, 16, 2, 19, 5, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 471055698, 'comment_body': ""This would be better located in the model, which we're accessing here in any case."", 'comment_created': datetime.datetime(2020, 8, 16, 2, 29, 28, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 471056264, 'comment_body': 'It would be useful to have tests for this. Was this something the server was going to improve upon?', 'comment_created': datetime.datetime(2020, 8, 16, 2, 37, 51, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 471571448, 'comment_body': 'Yes, this should be merged with other commits.', 'comment_created': datetime.datetime(2020, 8, 17, 15, 47, 50, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 471574322, 'comment_body': 'Agreed; we discussed moving the pop-up code and tests a while ago. I have moved the test for `EditHistoryView` into a new file.\r\n\r\nI have only rebased and added tests in this particular commit, which I have now mentioned in the commit text. However, the subsequent commit was significantly different, so I amended it appropriately. (We discussed something similar for the view message in the browser PR.)\r\n\r\nThanks, fixed!\r\n', 'comment_created': datetime.datetime(2020, 8, 17, 15, 52, 8, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 471579127, 'comment_body': 'Ah, yes. This was prior to the discussion we had re ""fetch vs get"". Thanks!\r\n\r\nYes, we need to fetch it each time to get the message history. Given that we would need to fetch it each time to see if the message history was updated (via the same endpoint), I don\'t think caching would be beneficial.\r\n\r\nI have added a new `get_message_history()` along with `_fetch_message_history()` to handle this differently.', 'comment_created': datetime.datetime(2020, 8, 17, 15, 59, 34, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 471579693, 'comment_body': 'Fixed! Also, renamed the variable to `tag` itself.', 'comment_created': datetime.datetime(2020, 8, 17, 16, 0, 25, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 471580265, 'comment_body': 'I have moved and extracted it as a separate commit.', 'comment_created': datetime.datetime(2020, 8, 17, 16, 1, 22, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 471581454, 'comment_body': 'Tests added. Yes, [@cyphase](https://chat.zulip.org/#narrow/stream/206-zulip-terminal/topic/topic.20editing.20-.20time.20limit/near/970047) is working on this currently.', 'comment_created': datetime.datetime(2020, 8, 17, 16, 3, 15, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 471616399, 'comment_body': 'The other comment in this commit is more important but: is this since this would be an internal error, ie. obtaining an error for a valid message-id? What happens if the server is down - do we get an assertion failure in addition to a message in the footer?', 'comment_created': datetime.datetime(2020, 8, 17, 17, 3, 15, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 471632441, 'comment_body': ""We've not fully standardized our return values for handling errors, so I'm not sure we need to isolate this from `get_message_history` - it seems simpler if we just have one method and not store an intermediate value?"", 'comment_created': datetime.datetime(2020, 8, 17, 17, 16, 46, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 471634522, 'comment_body': ""It's fine to keep separate for now - let's see how the other commits progress."", 'comment_created': datetime.datetime(2020, 8, 17, 17, 18, 34, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 471645925, 'comment_body': 'This was message_fixture previously?', 'comment_created': datetime.datetime(2020, 8, 17, 17, 27, 47, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 471650163, 'comment_body': 'I see you adjusted the theme slightly - this fits better with gruvbox existing colors?', 'comment_created': datetime.datetime(2020, 8, 17, 17, 33, 3, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 471651154, 'comment_body': ""It's unfortunate that we need to pass this information around between popups, but that'll have to be for another refactor I expect."", 'comment_created': datetime.datetime(2020, 8, 17, 17, 34, 55, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 471662672, 'comment_body': 'This seems to work well, though if not now then we may want to wrap access to each of these later; the former is used at least for display of the EDITED.', 'comment_created': datetime.datetime(2020, 8, 17, 17, 56, 10, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 471666686, 'comment_body': 'Should we parametrize over this in the edit_history test?', 'comment_created': datetime.datetime(2020, 8, 17, 18, 3, 35, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 471667231, 'comment_body': 'Would it be easier to patch/parametrize these just in the keypress test too?', 'comment_created': datetime.datetime(2020, 8, 17, 18, 4, 45, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 471718594, 'comment_body': ""This is definitely a polish commit on top of the others, but given that we have a popup item which depends on the message having been edited, does it make sense to adjust it here too only if it's been edited, do you think?\r\n\r\nSimilarly, if there is more than one 'sender' (editor!), we could update this too, a little like I suggested for an 'edit summary'? The full message history and diff is only in the `get_message_history`, but don't we have minimal edit information from the message itself?"", 'comment_created': datetime.datetime(2020, 8, 17, 19, 8, 55, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 472305252, 'comment_body': ""This was to assert against any implementation loophole. However, as you mention, it would have failed the assert and update the footer when the server was down as well.\r\n\r\nThis should've been fixed now with `fetch_message_history()` returning an empty list for failed request."", 'comment_created': datetime.datetime(2020, 8, 18, 15, 57, 21, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 472307364, 'comment_body': 'Yes, but this seems like a better way to do it given that the tests do not care about anything else than the `id`. Moreover, `message_fixture` appended extra test cases unnecessarily.', 'comment_created': datetime.datetime(2020, 8, 18, 16, 0, 29, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 472314071, 'comment_body': 'Since this and the patch above it are required for other tests in `TestMsgInfoView` as well, I only patched them once here. Though, I have simplified these in the latest update.\r\n\r\nI am not sure if we can overwrite a fixture patch (this particular fixture, `mock_external_classes`, is an `autouse` fixture which is used everywhere in the class).\r\n\r\nBesides, the `edit_history` test simply cares about the `show_edit_history_label` value (and how that value is set [with `and` between booleans] is trivial in comparison).', 'comment_created': datetime.datetime(2020, 8, 18, 16, 10, 52, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 472314349, 'comment_body': 'See https://github.com/zulip/zulip-terminal/pull/663#discussion_r472314071.', 'comment_created': datetime.datetime(2020, 8, 18, 16, 11, 15, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 472324259, 'comment_body': ""Yes, that sounds reasonable. I have amended it in the latest update.\r\n\r\nHmm, I am a bit wary about using the edit data from messages. Given that the data isn't dynamic and needs to be updated, it feels like an overhead. Moreover, the respective key is likely to be changed to a `boolean` in the future.\r\n\r\nRelated conversation: https://chat.zulip.org/#narrow/stream/3-backend/topic/edit_history/near/879944."", 'comment_created': datetime.datetime(2020, 8, 18, 16, 26, 42, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 472330988, 'comment_body': 'Yes, it seems to personally. I have also adjusted the `edit_tag` style in other themes.', 'comment_created': datetime.datetime(2020, 8, 18, 16, 37, 2, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 472444890, 'comment_body': ""With this combination of fail/success, we end up running the failure as many times as there are elements in `message_history` - since the failure case doesn't rely on the actual history data, it seems reasonable to make that a separate test, which would also remove these conditionals?"", 'comment_created': datetime.datetime(2020, 8, 18, 19, 57, 40, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 472448896, 'comment_body': ""Generally the colors look fine, over the themes :+1: My only concern - which we can address later, since it's a minor layout/color issue - is that the 'version' (tag) appears in a date-like style, and the date in a bar/topic-like style. I don't know if we might want to swap them around in future. It's totally readable as it is, but since the styles are so similar then that one difference stands out more."", 'comment_created': datetime.datetime(2020, 8, 18, 20, 4, 13, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 472453467, 'comment_body': ""I can see that the fixture spans multiple recipient types, but is otherwise the same - only the topic and content vary.\r\n\r\nThis is a skeleton version, but I'd expect for a test of the fuller version we need more data in the message?\r\n\r\nMay be worth a comment in any case, as to why this is a limited case."", 'comment_created': datetime.datetime(2020, 8, 18, 20, 9, 21, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 472463575, 'comment_body': 'This is at least less-dependent upon specific values :+1:\r\n\r\nI\'m not sure what you meant about whether we can \'overwrite a fixture patch\'?\r\n\r\nI agree the edit_history test is simple enough for now. However, the code itself being ""trivial for now"" to not need testing, can defeat the purpose of tests if we\'re not careful - the tests shouldn\'t be written to match the code, but the other way around.', 'comment_created': datetime.datetime(2020, 8, 18, 20, 20, 38, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 472482402, 'comment_body': 'This looks good - it might not be noticeable, but may indicate a little more information in the case of edited messages.\r\n\r\nI agree the message data is unreliable. In addition to the conversation you linked to, there has been other subsequent discussion in #mobile-team.', 'comment_created': datetime.datetime(2020, 8, 18, 20, 45, 23, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 474251140, 'comment_body': 'Agreed. In the latest update, I have swapped `tag` with `time` and slightly adjusted the themes to improve this.', 'comment_created': datetime.datetime(2020, 8, 20, 20, 22, 54, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}]","[{'commit_sha': '2746c20d7e8d8d465aacea72360054c2a0978a21', 'committer_username': 'preetmishra', 'committer_name': 'Preet Mishra', 'committer_email': 'ipreetmishra@gmail.com', 'commit_date': datetime.datetime(2018, 9, 26, 17, 5, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4dc00d74df114ce29cd270e9d4e9a545987a9376', 'committer_username': 'shreyamalviya', 'committer_name': 'Shreya Malviya', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 5, 10, 15, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '817060a3464314aa65f5c4c1e31bd5915ae0c660', 'committer_username': 'shreyamalviya', 'committer_name': 'Shreya Malviya', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 5, 10, 15, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '53b4fd84b4fcfc3cb6030ae8497e36ba82a96184', 'committer_username': 'shreyamalviya', 'committer_name': 'Shreya Malviya', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 5, 10, 15, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '727336d3d8ce69aada24a2724bfc66e1b7f2c7e2', 'committer_username': 'preetmishra', 'committer_name': 'Preet Mishra', 'committer_email': 'ipreetmishra@gmail.com', 'commit_date': datetime.datetime(2018, 9, 26, 17, 5, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b8bad188df1cb02ca243ad9f6b17db0a042210b6', 'committer_username': 'preetmishra', 'committer_name': 'Preet Mishra', 'committer_email': 'ipreetmishra@gmail.com', 'commit_date': datetime.datetime(2018, 9, 26, 17, 5, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4896959ac0e1a4b33ce1dae50b847f0542158ba1', 'committer_username': 'preetmishra', 'committer_name': 'Preet Mishra', 'committer_email': 'ipreetmishra@gmail.com', 'commit_date': datetime.datetime(2018, 9, 26, 17, 5, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5aa61c3ddde4130db9f528c985c51e201c03c3fc', 'committer_username': 'preetmishra', 'committer_name': 'Preet Mishra', 'committer_email': 'ipreetmishra@gmail.com', 'commit_date': datetime.datetime(2018, 9, 26, 17, 5, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f5c5484d04706d8be18b14a47a59d92aa9a7c75c', 'committer_username': 'preetmishra', 'committer_name': 'Preet Mishra', 'committer_email': 'ipreetmishra@gmail.com', 'commit_date': datetime.datetime(2018, 9, 26, 17, 5, 44, tzinfo=datetime.timezone.utc)}]",Preet Mishra,43616959,ipreetmishra@gmail.com,User,,18,,24,65
437253134,[WIP] Add support for viewing a message in the web browser,"Thanks to @punchagan for the initial work in #397. :+1: 

Unlike the original PR, which narrowed every message to All Messages in the web app, this opens a message in `stream/topic/near` if it belongs to a stream or `pm-with/near` narrow if it belongs to a PM/huddle (see [discussion](https://chat.zulip.org/#narrow/stream/206-zulip-terminal/topic/View.20message.20in.20browser/near/908851)).

The original commit has been split to facilitate reviews. Moreover, the test has been improved based on @neiljp's feedback on the original PR.

The logic for generating near message URLs has been borrowed from Zulip's [`zerver/lib/url_encoding.py`](https://github.com/zulip/zulip/blob/master/zerver/lib/url_encoding.py).

Partially fixes #452.",False,698,https://api.github.com/repos/zulip/zulip-terminal/pulls/698,https://github.com/zulip/zulip-terminal/pull/698,closed,77,5,8,6,11,7,4,0,"[{'name': 'enhancement'}, {'name': 'size: L'}, {'name': 'has conflicts'}, {'name': 'PR blocks other PR'}]",2020-06-19 18:59:09+00:00,2021-06-11 01:07:53+00:00,30780524.0,"356 days, 6:08:44","[{'comment_id': 467599381, 'comment_body': 'This can raise an exception?', 'comment_created': datetime.datetime(2020, 8, 9, 15, 52, 35, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 467599432, 'comment_body': 'If this fails (exception, unsupported environment, etc), could we let the user know?', 'comment_created': datetime.datetime(2020, 8, 9, 15, 53, 13, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 467599851, 'comment_body': ""Our platform code relies on only one of the platforms being set; we definitely want to improve that handling (see #791), but we should probably be able to rely on the 'other' option being set for now, ie `LINUX`.\r\n\r\nIn the more general sense, the webbrowser module can run terminal browsers, so it would be interesting to see how DISPLAY-less systems handle that. Another aspect is whether graphical non-X11 systems set DISPLAY meaningfully?\r\n\r\nDid you mean to capitalize the commit title?"", 'comment_created': datetime.datetime(2020, 8, 9, 15, 57, 24, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 480314886, 'comment_body': ""Let's use a different file for these, since we could combine these with the URL deconstruction too and/or put them into the API repo like that other method in future?"", 'comment_created': datetime.datetime(2020, 8, 31, 18, 37, 30, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 480322782, 'comment_body': ""It's good to use the pre-existing code here, though using `urljoin` in the new code would mean we don't need to worry about this. I'm guessing the server code avoids this since it knows the url exactly and relies on tests, which we should too really :)"", 'comment_created': datetime.datetime(2020, 8, 31, 18, 52, 15, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 480323042, 'comment_body': 'Why do we need the `self`?', 'comment_created': datetime.datetime(2020, 8, 31, 18, 52, 46, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 480323349, 'comment_body': 'This change breaks the other use of this method - but no tests break?', 'comment_created': datetime.datetime(2020, 8, 31, 18, 53, 24, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}]","[{'commit_sha': '621c1e6e076be7d988c6eab5e5604287cb3f9285', 'committer_username': 'punchagan', 'committer_name': 'Puneeth Chaganti', 'committer_email': 'punchagan@muse-amuse.in', 'commit_date': datetime.datetime(2010, 6, 27, 11, 37, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2201e67c08eadee4a431d91c98d1215c08601f55', 'committer_username': 'punchagan', 'committer_name': 'Puneeth Chaganti', 'committer_email': 'punchagan@muse-amuse.in', 'commit_date': datetime.datetime(2010, 6, 27, 11, 37, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4b080fafcbd346cff443746aa5c58d7f99c87780', 'committer_username': 'punchagan', 'committer_name': 'Puneeth Chaganti', 'committer_email': 'punchagan@muse-amuse.in', 'commit_date': datetime.datetime(2010, 6, 27, 11, 37, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fa82f8a5cd7dbb4a89889602143e1826a96f7ac7', 'committer_username': 'preetmishra', 'committer_name': 'Preet Mishra', 'committer_email': 'ipreetmishra@gmail.com', 'commit_date': datetime.datetime(2018, 9, 26, 17, 5, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7c0c9fcb9194400f98d967c85ab91671b0a4763c', 'committer_username': 'preetmishra', 'committer_name': 'Preet Mishra', 'committer_email': 'ipreetmishra@gmail.com', 'commit_date': datetime.datetime(2018, 9, 26, 17, 5, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '584c94e59f277b17b354219b1acfa40c5b9a9a49', 'committer_username': 'preetmishra', 'committer_name': 'Preet Mishra', 'committer_email': 'ipreetmishra@gmail.com', 'commit_date': datetime.datetime(2018, 9, 26, 17, 5, 44, tzinfo=datetime.timezone.utc)}]",Preet Mishra,43616959,ipreetmishra@gmail.com,User,,18,,24,65
455669765,[WIP] Unify case sensitive topic names,"This unifies case sensitive topic names using lowercase topic names as an invariant.

#### Crux
We need some kind of invariant which we can rely upon for lookups and comparisons given that topics can change their casing at any point. Consequently, I propose to use lowercase topics as keys wherever store/index data.

#### Commits
The current commit structure is temporary. I have fixed one thing per commit to represent how I went about the changes but we would definitely want to squash them (except the first) before merging.

I would greatly appreciate feedback about the proposal and what else should be fixed.
",False,733,https://api.github.com/repos/zulip/zulip-terminal/pulls/733,https://github.com/zulip/zulip-terminal/pull/733,open,114,46,9,8,5,6,2,0,"[{'name': 'has conflicts'}, {'name': 'size: XL'}]",2020-07-23 12:21:30+00:00,,0.0,,"[{'comment_id': 459540992, 'comment_body': '`narrow_topic` vs `narrow_topics`?', 'comment_created': datetime.datetime(2020, 7, 23, 15, 34, 29, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 459542668, 'comment_body': ""I know this isn't in the refactor, but this highlights that we should check that the streams match too? (narrow & message)"", 'comment_created': datetime.datetime(2020, 7, 23, 15, 36, 57, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 459872892, 'comment_body': 'The narrow can only have one topic, right?', 'comment_created': datetime.datetime(2020, 7, 24, 6, 28, 16, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 460236417, 'comment_body': 'Discussed in [#zulip-terminal > Topic case sensitivity #T733](https://chat.zulip.org/#narrow/stream/206-zulip-terminal/topic/Topic.20case.20sensitivity.20.23T733).', 'comment_created': datetime.datetime(2020, 7, 24, 19, 4, 37, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 460477051, 'comment_body': 'It might be cleaner if we have a general helper of the kind `compare_lowercase` which can be used throughout our codebase to do lowercase comparisons.', 'comment_created': datetime.datetime(2020, 7, 26, 4, 34, 36, tzinfo=datetime.timezone.utc), 'commenter': 'sumanthvrao', 'type': 'User'}, {'comment_id': 461103523, 'comment_body': 'Thanks!', 'comment_created': datetime.datetime(2020, 7, 27, 19, 0, 8, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}]","[{'commit_sha': 'eae5cd9b92612a9a488ad24127105255801e801a', 'committer_username': 'preetmishra', 'committer_name': 'Preet Mishra', 'committer_email': 'ipreetmishra@gmail.com', 'commit_date': datetime.datetime(2018, 9, 26, 17, 5, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7e27abc8e304f6f423ad63b9b703fcb06d2dbb38', 'committer_username': 'preetmishra', 'committer_name': 'Preet Mishra', 'committer_email': 'ipreetmishra@gmail.com', 'commit_date': datetime.datetime(2018, 9, 26, 17, 5, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '602004ec0b7821bf0f5bb2876e728a7684ef937f', 'committer_username': 'preetmishra', 'committer_name': 'Preet Mishra', 'committer_email': 'ipreetmishra@gmail.com', 'commit_date': datetime.datetime(2018, 9, 26, 17, 5, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1c54d9dae3aed3582a1b3d2cf1378eef3e85ca1e', 'committer_username': 'preetmishra', 'committer_name': 'Preet Mishra', 'committer_email': 'ipreetmishra@gmail.com', 'commit_date': datetime.datetime(2018, 9, 26, 17, 5, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9e87f9eddfa7a81fc961eb49b359dbc0ce530086', 'committer_username': 'preetmishra', 'committer_name': 'Preet Mishra', 'committer_email': 'ipreetmishra@gmail.com', 'commit_date': datetime.datetime(2018, 9, 26, 17, 5, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3af0aac6553d9aa82c052ec27f247c29321d149d', 'committer_username': 'preetmishra', 'committer_name': 'Preet Mishra', 'committer_email': 'ipreetmishra@gmail.com', 'commit_date': datetime.datetime(2018, 9, 26, 17, 5, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '110166e100124f3f8b76d05c7e8b18ac8f8bb4c2', 'committer_username': 'preetmishra', 'committer_name': 'Preet Mishra', 'committer_email': 'ipreetmishra@gmail.com', 'commit_date': datetime.datetime(2018, 9, 26, 17, 5, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0338c11a9ace2ff40ee33940be03af59a06b5834', 'committer_username': 'preetmishra', 'committer_name': 'Preet Mishra', 'committer_email': 'ipreetmishra@gmail.com', 'commit_date': datetime.datetime(2018, 9, 26, 17, 5, 44, tzinfo=datetime.timezone.utc)}]",Preet Mishra,43616959,ipreetmishra@gmail.com,User,,18,,24,65
456647888,[WIP] Handle media links,"Thanks to @amanagr for his initial work in #359. :+1:

The PR extracts a few common elements from the PR but has changes to make the function compatible with `MessageLinkButton`.

#### Commits
* The first commit is cherry-picked from #708.
* The second commit is from #359 with a few amendments that were necessary to make it work with `MessageLinkButton`.
* The third commit integrates the introduced function in `MesssageLinkButton` to handle media links.
* The fourth commit makes `open_media` asynch and shows downloading updates in the footer.
* The fifth commit is a refactor that extracts `PopUpConfirmationView` instantiation for its subsequent commit where it is used in `open_media`.

#### Potential follow-up
* Skip downloading existing media.


I would greatly appreciate any early feedback and bug/caveats report.

Partially fixes #764.",False,740,https://api.github.com/repos/zulip/zulip-terminal/pulls/740,https://github.com/zulip/zulip-terminal/pull/740,closed,158,12,6,5,6,24,2,0,"[{'name': 'has conflicts'}, {'name': 'size: XL'}]",2020-07-25 18:18:26+00:00,2022-05-16 21:52:26+00:00,57036840.0,"660 days, 3:34:00","[{'comment_id': 466571672, 'comment_body': ""I couldn't figure out a way to test this. I was trying to use an `assert` with `...call_count == 2`, but this particular statement doesn't execute due to mocking.\r\n\r\nI would greatly appreciate any pointers in the review."", 'comment_created': datetime.datetime(2020, 8, 6, 17, 27, 7, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 479689291, 'comment_body': 'Do we want to use the existing platforms now in `helper.py`?', 'comment_created': datetime.datetime(2020, 8, 29, 20, 55, 3, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 479689497, 'comment_body': 'We should handle the return value.', 'comment_created': datetime.datetime(2020, 8, 29, 20, 57, 19, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 479690660, 'comment_body': 'minor: these can be combined.', 'comment_created': datetime.datetime(2020, 8, 29, 21, 13, 27, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 479690880, 'comment_body': ""I'm not convinced it's worth multiplying the number of tests 3-fold vs having a separate test.\r\n\r\nThis may also change if we use the 'standard' platforms we use elsewhere now."", 'comment_created': datetime.datetime(2020, 8, 29, 21, 16, 17, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 479691371, 'comment_body': ""I'm not sure if we want to show and update the footer as rapidly as this. Rather we could show updates every fraction of a second or thereabouts. There is a progress bar widget in urwid we could use?\r\n\r\nThis seems like it could be a separate commit to build upon the basic functionality, where we could just set 'Downloading <filename>' in the footer and clear it afterwards? (or set it to temporarily be 'downloaded'?)"", 'comment_created': datetime.datetime(2020, 8, 29, 21, 23, 51, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 479691727, 'comment_body': ""I'm not sure that we really gain from this refactor?\r\n\r\nI think we could probably benefit from combining the confirmation popups into 'show_pop_up', however, though that doesn't seem necessary to include here but is pretty independent.\r\n\r\nI know you use it in the next commit, but generally I'd prefer if we kept helper code clean of controller/UI, and have the latter use the helper code instead."", 'comment_created': datetime.datetime(2020, 8, 29, 21, 29, 2, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 479692526, 'comment_body': ""I know we have the controller here, but it'd be cleaner if we kept the prompting separate - maybe add a method to core instead?"", 'comment_created': datetime.datetime(2020, 8, 29, 21, 39, 28, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 479693194, 'comment_body': 'It would be useful to indicate where it has been download to?', 'comment_created': datetime.datetime(2020, 8, 29, 21, 47, 51, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 479693547, 'comment_body': 'While the zulip-term namespacing may be useful, I think this limits the possibility of multiple users saving files?\r\n\r\n`NamedTemporaryFile` seems like a simpler approach, with appropriate prefixes and suffixes?', 'comment_created': datetime.datetime(2020, 8, 29, 21, 51, 57, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 479697860, 'comment_body': 'Never write to known paths in the temporary directory. This leads to security vulnerabilities. For example, an attacker with access to a different user account on the system can create a symlink or hardlink at the known path to trick you into overwriting a file of their choice with your permissions. Use `NamedTemporaryFile`, `TemporaryDirectory`, `mkstemp`, or `mkdtemp`, which do the extra work needed to prevent these attacks.', 'comment_created': datetime.datetime(2020, 8, 29, 22, 53, 43, tzinfo=datetime.timezone.utc), 'commenter': 'andersk', 'type': 'User'}, {'comment_id': 528452682, 'comment_body': 'Can we keep the UI-centric parts out of `helper.py`?', 'comment_created': datetime.datetime(2020, 11, 23, 3, 7, 47, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 528454686, 'comment_body': 'minor: It would be useful if the user was able to know what the file was going to be opened with in the popup (see other comment)', 'comment_created': datetime.datetime(2020, 11, 23, 3, 19, 36, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 528455907, 'comment_body': ""What does this check avoid? I know you've used it elsewhere, but I don't remember what the conclusion was - can we discuss and then maybe add a comment. Does it belong in `exit_popup`?"", 'comment_created': datetime.datetime(2020, 11, 23, 3, 26, 26, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 528456404, 'comment_body': ""I'm not sure if this will end up needing it's own commit, but perhaps make these callbacks to keep the UI separate in any case?"", 'comment_created': datetime.datetime(2020, 11, 23, 3, 29, 30, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 528456887, 'comment_body': 'Given the length of the download URLs for some files, this might well benefit from more vertical spacing, eg.\r\n```\r\nYour requested media has been downloaded to:\r\n<filename>\r\n\r\nDo you want the application to open it with <tool>?', 'comment_created': datetime.datetime(2020, 11, 23, 3, 31, 57, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 528458351, 'comment_body': ""I'm guessing you're trying to synchronize the asynch download terminating?"", 'comment_created': datetime.datetime(2020, 11, 23, 3, 39, 32, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 528459158, 'comment_body': 'I think this comment should go before the previous one, as there is nowhere near enough space in the top-left for showing the download information :)', 'comment_created': datetime.datetime(2020, 11, 23, 3, 43, 51, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 656038547, 'comment_body': 'Now that we have `report_*` methods, would it be OK to use here?', 'comment_created': datetime.datetime(2021, 6, 22, 9, 21, 54, tzinfo=datetime.timezone.utc), 'commenter': 'Ezio-Sarthak', 'type': 'User'}, {'comment_id': 656053985, 'comment_body': ""I'm not sure if I fully understood your comment, but I think the callback would be working fine in any case?"", 'comment_created': datetime.datetime(2021, 6, 22, 9, 41, 51, tzinfo=datetime.timezone.utc), 'commenter': 'Ezio-Sarthak', 'type': 'User'}, {'comment_id': 659593633, 'comment_body': '@preetmishra could you elaborate this?', 'comment_created': datetime.datetime(2021, 6, 28, 8, 42, 56, tzinfo=datetime.timezone.utc), 'commenter': 'Ezio-Sarthak', 'type': 'User'}, {'comment_id': 659595861, 'comment_body': 'You mean commit?', 'comment_created': datetime.datetime(2021, 6, 28, 8, 46, 3, tzinfo=datetime.timezone.utc), 'commenter': 'Ezio-Sarthak', 'type': 'User'}, {'comment_id': 659951785, 'comment_body': '@Ezio-Sarthak The pop-ups open in an urwid Overlay. This check is to make sure `exit_popup` is only called when an Overlay exist.', 'comment_created': datetime.datetime(2021, 6, 28, 16, 48, 54, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 659985147, 'comment_body': 'Ah I see that now. If I avoid that check, there is some unwanted synchronous behavior in footer and popup, if that makes any sense.', 'comment_created': datetime.datetime(2021, 6, 28, 17, 34, 6, tzinfo=datetime.timezone.utc), 'commenter': 'Ezio-Sarthak', 'type': 'User'}]","[{'commit_sha': '537467950cf5d71629a6007354a31b5b8e12161a', 'committer_username': 'amanagr', 'committer_name': 'Aman Agrawal', 'committer_email': 'amanagr@zulip.com', 'commit_date': datetime.datetime(2017, 1, 14, 20, 19, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8b20d3d0731dd655a3feb6d4b5fd7efb957de0e9', 'committer_username': 'preetmishra', 'committer_name': 'Preet Mishra', 'committer_email': 'ipreetmishra@gmail.com', 'commit_date': datetime.datetime(2018, 9, 26, 17, 5, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9d45337c8b279ac5a58631fddb19d4c38b4da1f6', 'committer_username': 'preetmishra', 'committer_name': 'Preet Mishra', 'committer_email': 'ipreetmishra@gmail.com', 'commit_date': datetime.datetime(2018, 9, 26, 17, 5, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ef32f4a1e26805e6560df9d54f94b2951921318e', 'committer_username': 'preetmishra', 'committer_name': 'Preet Mishra', 'committer_email': 'ipreetmishra@gmail.com', 'commit_date': datetime.datetime(2018, 9, 26, 17, 5, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dad08372a33e86e818c4bccdf64ffd05f5e3a38b', 'committer_username': 'preetmishra', 'committer_name': 'Preet Mishra', 'committer_email': 'ipreetmishra@gmail.com', 'commit_date': datetime.datetime(2018, 9, 26, 17, 5, 44, tzinfo=datetime.timezone.utc)}]",Preet Mishra,43616959,ipreetmishra@gmail.com,User,,18,,24,65
458495319,Markup markdown text in stream description,"While the PR's ultimate intent is to markup the stream description, the first commit has changes to decouple our markup methods.

#### Commits
* The first commit makes our primary markup methods, `transform_content`, `soup2markup` and `indent_quoted_content`, independent of their class object.
* The second commit uses `transform_content` in `StreamInfoView` for markup.
* The third commit makes `footlinks_view` static and more configurable.

Fixes #743.",False,749,https://api.github.com/repos/zulip/zulip-terminal/pulls/749,https://github.com/zulip/zulip-terminal/pull/749,closed,227,96,5,4,9,20,5,0,"[{'name': 'area: UI'}, {'name': 'has conflicts'}, {'name': 'size: XL'}, {'name': 'PR blocks other PR'}, {'name': 'missing feature: user'}]",2020-07-29 14:57:35+00:00,2021-02-11 19:35:53+00:00,17037498.0,"197 days, 4:38:18","[{'comment_id': 479584561, 'comment_body': 'You might want to add a description of why this extraction is necessary in commit description.', 'comment_created': datetime.datetime(2020, 8, 29, 0, 35, 37, tzinfo=datetime.timezone.utc), 'commenter': 'sumanthvrao', 'type': 'User'}, {'comment_id': 479585634, 'comment_body': 'This and one below could be avoided if you captured it as return value.', 'comment_created': datetime.datetime(2020, 8, 29, 0, 43, 54, tzinfo=datetime.timezone.utc), 'commenter': 'sumanthvrao', 'type': 'User'}, {'comment_id': 479586701, 'comment_body': 'Setting the default value as 0 during initialization, would be cleaner than this `else` case.', 'comment_created': datetime.datetime(2020, 8, 29, 0, 52, 33, tzinfo=datetime.timezone.utc), 'commenter': 'sumanthvrao', 'type': 'User'}, {'comment_id': 508733908, 'comment_body': 'I know these are set in `main_view` now, but it would be useful to still initialize them here?\r\n\r\n', 'comment_created': datetime.datetime(2020, 10, 20, 18, 6, 36, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 508754447, 'comment_body': 'I like the re-use of this code, but this commit could be slightly clearer as two commits, such as:\r\n* refactor: make it static and pass in values, but just use in original place\r\n* add options to enable use in second place, and adapt the old and new calling locations\r\n\r\nWhat do you think?', 'comment_created': datetime.datetime(2020, 10, 20, 18, 39, 14, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 508756707, 'comment_body': ""it'd be useful to not have this hard-coded separately from the text below; could we calculate this from a slightly updated version of the styled code just below?"", 'comment_created': datetime.datetime(2020, 10, 20, 18, 41, 49, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 508766328, 'comment_body': ""While amending the tests is a good step - we're now using 'rendered_description' - I think it'd be good to see at least one test using slightly more complex markup.\r\n\r\nMaybe then another test with a footlink with the last commit?"", 'comment_created': datetime.datetime(2020, 10, 20, 18, 55, 51, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 524141102, 'comment_body': 'Yes, it seems clearer. I have separated the last commit into two commits as suggested. Thanks!', 'comment_created': datetime.datetime(2020, 11, 16, 11, 16, 14, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 528421654, 'comment_body': '`metadata` is actually *mutable*? This got accidentally changed in the commit title?', 'comment_created': datetime.datetime(2020, 11, 22, 23, 23, 34, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 528422948, 'comment_body': 'This feels a bit clumsy compared to the previous version, with all the extra parameters and accessing the first element.', 'comment_created': datetime.datetime(2020, 11, 22, 23, 34, 5, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 528424541, 'comment_body': 'Is it necessary to have this here? It feels like it belongs above where the `desc` was previously set.', 'comment_created': datetime.datetime(2020, 11, 22, 23, 47, 7, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 528425096, 'comment_body': ""minor: consider adding a `*, ` here to ensure `footlinks_enabled` is named. That's how you're using it already."", 'comment_created': datetime.datetime(2020, 11, 22, 23, 51, 27, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 528447787, 'comment_body': ""This is the only part that depends on `wrap` or `padded`? That makes it feel separate to the function, ie. the conditional belongs outside of the calling points. The padding is clearly just a wrapper, that is used in one place, and the use of the wrap parameter is less clear - it depends if we're set on returning a widget vs `footlinks`."", 'comment_created': datetime.datetime(2020, 11, 23, 2, 38, 59, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 528447878, 'comment_body': 'Given the extra return value, a docstring may be helpful.', 'comment_created': datetime.datetime(2020, 11, 23, 2, 39, 38, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 528448199, 'comment_body': ""Is this quoting since `OrderedDict` doesn't have a `typing` version?"", 'comment_created': datetime.datetime(2020, 11, 23, 2, 41, 23, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 557588972, 'comment_body': 'Yes, `metadata` is mutable but it was being used to track _immutable_ objects between recursive calls. I changed the commit description on purpose.\r\n\r\nUpdate: It is now being used to track mutable and immutable objects together to decrease the verbosity.', 'comment_created': datetime.datetime(2021, 1, 14, 18, 3, 29, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 557589745, 'comment_body': 'This has been fixed with pushing other entities to `metadata`.', 'comment_created': datetime.datetime(2021, 1, 14, 18, 4, 48, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 557589961, 'comment_body': 'Thanks for pointing it out. Fixed!', 'comment_created': datetime.datetime(2021, 1, 14, 18, 5, 8, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 557590925, 'comment_body': ""Yes, mypy doesn't work well with `OrderedDict`. We have a comment for it in `footlinks_view` as well."", 'comment_created': datetime.datetime(2021, 1, 14, 18, 6, 45, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 557593172, 'comment_body': 'This does feel out of place. We could return only the markup from `footlinks_view` (+ rename it to `markup_footlinks`) and then add wrappers as needed in the caller functions. Thoughts?', 'comment_created': datetime.datetime(2021, 1, 14, 18, 10, 38, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}]","[{'commit_sha': 'fec2d097f8f9d6cd446cb7b815bae70f65768dc6', 'committer_username': 'preetmishra', 'committer_name': 'Preet Mishra', 'committer_email': 'ipreetmishra@gmail.com', 'commit_date': datetime.datetime(2018, 9, 26, 17, 5, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1c85091432e67d4666f6dd05c2043a5b17e3c068', 'committer_username': 'preetmishra', 'committer_name': 'Preet Mishra', 'committer_email': 'ipreetmishra@gmail.com', 'commit_date': datetime.datetime(2018, 9, 26, 17, 5, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '123408f2deda2b36437f608d5545525534dd473b', 'committer_username': 'preetmishra', 'committer_name': 'Preet Mishra', 'committer_email': 'ipreetmishra@gmail.com', 'commit_date': datetime.datetime(2018, 9, 26, 17, 5, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b03659c690970d159e8fbb73e2f6baa9d4c0c639', 'committer_username': 'preetmishra', 'committer_name': 'Preet Mishra', 'committer_email': 'ipreetmishra@gmail.com', 'commit_date': datetime.datetime(2018, 9, 26, 17, 5, 44, tzinfo=datetime.timezone.utc)}]",Preet Mishra,43616959,ipreetmishra@gmail.com,User,,18,,24,65

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
122704772,zulip-terminal,zulip/zulip-terminal,Python,243,611,18,81,2276,423,3,165,"[{'id': 659164450, 'number': 1043, 'closed': datetime.datetime(2021, 6, 1, 18, 1, 32, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 1, 16, 26, 58, tzinfo=datetime.timezone.utc), 'time_taken': 5674.0, 'time_delta': '1:34:34', 'additions': 6, 'deletions': 6, 'state': 'closed'}, {'id': 473223100, 'number': 787, 'closed': datetime.datetime(2020, 8, 27, 18, 13, 1, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 25, 13, 58, 11, tzinfo=datetime.timezone.utc), 'time_taken': 188090.0, 'time_delta': '2 days, 4:14:50', 'additions': 35, 'deletions': 2, 'state': 'closed'}, {'id': 466858575, 'number': 771, 'closed': datetime.datetime(2020, 8, 13, 6, 36, 19, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 12, 15, 47, 58, tzinfo=datetime.timezone.utc), 'time_taken': 53301.0, 'time_delta': '14:48:21', 'additions': 19, 'deletions': 5, 'state': 'closed'}, {'id': 464669407, 'number': 765, 'closed': datetime.datetime(2020, 8, 11, 20, 26, 55, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 7, 15, 33, 43, tzinfo=datetime.timezone.utc), 'time_taken': 363192.0, 'time_delta': '4 days, 4:53:12', 'additions': 52, 'deletions': 3, 'state': 'closed'}, {'id': 461221921, 'number': 759, 'closed': datetime.datetime(2020, 8, 5, 23, 42, 27, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 1, 16, 4, 53, tzinfo=datetime.timezone.utc), 'time_taken': 373054.0, 'time_delta': '4 days, 7:37:34', 'additions': 63, 'deletions': 48, 'state': 'closed'}, {'id': 458584319, 'number': 750, 'closed': datetime.datetime(2020, 8, 7, 6, 15, 9, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 29, 17, 38, 15, tzinfo=datetime.timezone.utc), 'time_taken': 736614.0, 'time_delta': '8 days, 12:36:54', 'additions': 18, 'deletions': 10, 'state': 'closed'}, {'id': 458495319, 'number': 749, 'closed': datetime.datetime(2021, 2, 11, 19, 35, 53, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 29, 14, 57, 35, tzinfo=datetime.timezone.utc), 'time_taken': 17037498.0, 'time_delta': '197 days, 4:38:18', 'additions': 227, 'deletions': 96, 'state': 'closed'}, {'id': 457847944, 'number': 744, 'closed': datetime.datetime(2020, 8, 13, 17, 34, 8, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 28, 14, 28, 1, tzinfo=datetime.timezone.utc), 'time_taken': 1393567.0, 'time_delta': '16 days, 3:06:07', 'additions': 118, 'deletions': 77, 'state': 'closed'}, {'id': 456647888, 'number': 740, 'closed': datetime.datetime(2022, 5, 16, 21, 52, 26, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 25, 18, 18, 26, tzinfo=datetime.timezone.utc), 'time_taken': 57036840.0, 'time_delta': '660 days, 3:34:00', 'additions': 158, 'deletions': 12, 'state': 'closed'}, {'id': 455800457, 'number': 735, 'closed': datetime.datetime(2020, 7, 27, 20, 45, 40, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 23, 15, 41, 15, tzinfo=datetime.timezone.utc), 'time_taken': 363865.0, 'time_delta': '4 days, 5:04:25', 'additions': 34, 'deletions': 2, 'state': 'closed'}, {'id': 455690476, 'number': 734, 'closed': datetime.datetime(2020, 7, 23, 19, 15, 30, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 23, 12, 57, 40, tzinfo=datetime.timezone.utc), 'time_taken': 22670.0, 'time_delta': '6:17:50', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 455669765, 'number': 733, 'closed': None, 'created': datetime.datetime(2020, 7, 23, 12, 21, 30, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 114, 'deletions': 46, 'state': 'open'}, {'id': 451075324, 'number': 723, 'closed': datetime.datetime(2020, 7, 18, 5, 9, 34, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 17, 11, 58, 43, tzinfo=datetime.timezone.utc), 'time_taken': 61851.0, 'time_delta': '17:10:51', 'additions': 23, 'deletions': 0, 'state': 'closed'}, {'id': 447291574, 'number': 713, 'closed': datetime.datetime(2020, 7, 11, 0, 2, 20, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 10, 8, 4, 13, tzinfo=datetime.timezone.utc), 'time_taken': 57487.0, 'time_delta': '15:58:07', 'additions': 2, 'deletions': 2, 'state': 'closed'}, {'id': 444319212, 'number': 708, 'closed': datetime.datetime(2020, 8, 29, 4, 1, 21, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 4, 19, 18, 26, tzinfo=datetime.timezone.utc), 'time_taken': 4783375.0, 'time_delta': '55 days, 8:42:55', 'additions': 566, 'deletions': 4, 'state': 'closed'}, {'id': 441621911, 'number': 705, 'closed': datetime.datetime(2020, 7, 8, 22, 8, 21, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 29, 20, 6, 34, tzinfo=datetime.timezone.utc), 'time_taken': 784907.0, 'time_delta': '9 days, 2:01:47', 'additions': 50, 'deletions': 13, 'state': 'closed'}, {'id': 440672719, 'number': 703, 'closed': datetime.datetime(2020, 7, 16, 0, 31, 29, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 26, 16, 18, 31, tzinfo=datetime.timezone.utc), 'time_taken': 1671178.0, 'time_delta': '19 days, 8:12:58', 'additions': 191, 'deletions': 15, 'state': 'closed'}, {'id': 438717050, 'number': 700, 'closed': datetime.datetime(2020, 8, 29, 16, 41, 52, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 23, 17, 33, 34, tzinfo=datetime.timezone.utc), 'time_taken': 5785698.0, 'time_delta': '66 days, 23:08:18', 'additions': 18, 'deletions': 1, 'state': 'closed'}, {'id': 437253134, 'number': 698, 'closed': datetime.datetime(2021, 6, 11, 1, 7, 53, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 19, 18, 59, 9, tzinfo=datetime.timezone.utc), 'time_taken': 30780524.0, 'time_delta': '356 days, 6:08:44', 'additions': 77, 'deletions': 5, 'state': 'closed'}, {'id': 433600091, 'number': 685, 'closed': datetime.datetime(2020, 7, 27, 19, 27, 17, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 12, 10, 30, 26, tzinfo=datetime.timezone.utc), 'time_taken': 3920211.0, 'time_delta': '45 days, 8:56:51', 'additions': 35, 'deletions': 24, 'state': 'closed'}, {'id': 420906104, 'number': 668, 'closed': datetime.datetime(2020, 5, 21, 21, 23, 3, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 5, 20, 17, 26, 19, tzinfo=datetime.timezone.utc), 'time_taken': 100604.0, 'time_delta': '1 day, 3:56:44', 'additions': 4, 'deletions': 0, 'state': 'closed'}, {'id': 419146043, 'number': 663, 'closed': datetime.datetime(2020, 8, 30, 17, 35, 50, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 5, 17, 17, 34, 1, tzinfo=datetime.timezone.utc), 'time_taken': 9072109.0, 'time_delta': '105 days, 0:01:49', 'additions': 539, 'deletions': 5, 'state': 'closed'}, {'id': 418080380, 'number': 659, 'closed': datetime.datetime(2020, 6, 11, 18, 59, 34, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 5, 14, 15, 41, 42, tzinfo=datetime.timezone.utc), 'time_taken': 2431072.0, 'time_delta': '28 days, 3:17:52', 'additions': 115, 'deletions': 76, 'state': 'closed'}, {'id': 415303657, 'number': 653, 'closed': datetime.datetime(2020, 6, 26, 1, 33, 46, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 5, 8, 15, 53, 50, tzinfo=datetime.timezone.utc), 'time_taken': 4181996.0, 'time_delta': '48 days, 9:39:56', 'additions': 79, 'deletions': 5, 'state': 'closed'}, {'id': 408039508, 'number': 619, 'closed': datetime.datetime(2020, 4, 25, 1, 31, 30, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 4, 23, 16, 39, 47, tzinfo=datetime.timezone.utc), 'time_taken': 118303.0, 'time_delta': '1 day, 8:51:43', 'additions': 13, 'deletions': 4, 'state': 'closed'}, {'id': 395715437, 'number': 569, 'closed': datetime.datetime(2020, 10, 11, 7, 39, 48, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 3, 30, 15, 10, 29, tzinfo=datetime.timezone.utc), 'time_taken': 16820959.0, 'time_delta': '194 days, 16:29:19', 'additions': 181, 'deletions': 135, 'state': 'closed'}, {'id': 390422521, 'number': 550, 'closed': datetime.datetime(2020, 4, 7, 4, 31, 59, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 3, 18, 13, 2, 5, tzinfo=datetime.timezone.utc), 'time_taken': 1697394.0, 'time_delta': '19 days, 15:29:54', 'additions': 207, 'deletions': 6, 'state': 'closed'}, {'id': 388038543, 'number': 542, 'closed': datetime.datetime(2020, 7, 19, 7, 39, 2, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 3, 13, 22, 39, 36, tzinfo=datetime.timezone.utc), 'time_taken': 11005166.0, 'time_delta': '127 days, 8:59:26', 'additions': 70, 'deletions': 19, 'state': 'closed'}, {'id': 386811742, 'number': 539, 'closed': datetime.datetime(2021, 7, 19, 14, 52, 20, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 3, 11, 17, 1, 49, tzinfo=datetime.timezone.utc), 'time_taken': 42760231.0, 'time_delta': '494 days, 21:50:31', 'additions': 117, 'deletions': 34, 'state': 'closed'}, {'id': 386504213, 'number': 537, 'closed': datetime.datetime(2020, 3, 14, 3, 6, 8, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 3, 11, 6, 17, 10, tzinfo=datetime.timezone.utc), 'time_taken': 247738.0, 'time_delta': '2 days, 20:48:58', 'additions': 12, 'deletions': 0, 'state': 'closed'}, {'id': 386275575, 'number': 534, 'closed': datetime.datetime(2020, 3, 11, 23, 8, 5, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 3, 10, 17, 44, 20, tzinfo=datetime.timezone.utc), 'time_taken': 105825.0, 'time_delta': '1 day, 5:23:45', 'additions': 9, 'deletions': 6, 'state': 'closed'}, {'id': 385776739, 'number': 530, 'closed': datetime.datetime(2020, 5, 31, 1, 11, 27, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 3, 9, 19, 30, 22, tzinfo=datetime.timezone.utc), 'time_taken': 7105265.0, 'time_delta': '82 days, 5:41:05', 'additions': 139, 'deletions': 65, 'state': 'closed'}, {'id': 384484096, 'number': 524, 'closed': datetime.datetime(2020, 3, 26, 1, 53, 27, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 3, 5, 20, 27, 44, tzinfo=datetime.timezone.utc), 'time_taken': 1747543.0, 'time_delta': '20 days, 5:25:43', 'additions': 145, 'deletions': 73, 'state': 'closed'}, {'id': 384454592, 'number': 523, 'closed': datetime.datetime(2020, 3, 9, 18, 10, 17, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 3, 5, 19, 18, 52, tzinfo=datetime.timezone.utc), 'time_taken': 341485.0, 'time_delta': '3 days, 22:51:25', 'additions': 19, 'deletions': 17, 'state': 'closed'}, {'id': 379727628, 'number': 518, 'closed': datetime.datetime(2020, 3, 4, 23, 38, 34, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 2, 25, 18, 16, 39, tzinfo=datetime.timezone.utc), 'time_taken': 710515.0, 'time_delta': '8 days, 5:21:55', 'additions': 46, 'deletions': 19, 'state': 'closed'}, {'id': 378613362, 'number': 510, 'closed': datetime.datetime(2020, 2, 25, 1, 30, 39, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 2, 22, 17, 40, 9, tzinfo=datetime.timezone.utc), 'time_taken': 201030.0, 'time_delta': '2 days, 7:50:30', 'additions': 32, 'deletions': 12, 'state': 'closed'}, {'id': 359100278, 'number': 492, 'closed': datetime.datetime(2020, 1, 26, 22, 24, 1, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 1, 3, 19, 41, 49, tzinfo=datetime.timezone.utc), 'time_taken': 1996932.0, 'time_delta': '23 days, 2:42:12', 'additions': 24, 'deletions': 7, 'state': 'closed'}, {'id': 358131973, 'number': 490, 'closed': datetime.datetime(2020, 1, 12, 6, 29, 35, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2019, 12, 30, 14, 47, 12, tzinfo=datetime.timezone.utc), 'time_taken': 1093343.0, 'time_delta': '12 days, 15:42:23', 'additions': 2, 'deletions': 2, 'state': 'closed'}, {'id': 357731343, 'number': 489, 'closed': datetime.datetime(2020, 1, 1, 23, 0, 30, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2019, 12, 29, 15, 58, 45, tzinfo=datetime.timezone.utc), 'time_taken': 284505.0, 'time_delta': '3 days, 7:01:45', 'additions': 5, 'deletions': 0, 'state': 'closed'}]"
