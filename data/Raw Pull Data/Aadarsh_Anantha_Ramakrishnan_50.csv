pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
899247526,"fix: ""Barcode limit: 13 digits or more?""","### What
- Folksonomy Engine recognizes products with 1-13 digit barcodes (regexp: `[0-9]{1,13}`) only.
- As Folksonomy Engine can be used for other types of products, it must recognize barcodes with more than 13 digits.
- This pull request aims to fix the above issue, as well as some other extra bugs found during testing.

### Related issue(s)
- Fixes #49
- No checks done for **empty product barcode**.

### File additions/deletions 
- Added a [folder](https://github.com/aadarsh-ram/folksonomy_api/tree/change-barcode/db/migrations) for database migration scripts. This folder can be used for future migration scripts as well.
- Added a [main migration script](https://github.com/aadarsh-ram/folksonomy_api/blob/change-barcode/db-migration.py) and a [migration step file](https://github.com/aadarsh-ram/folksonomy_api/blob/change-barcode/db/migrations/change-barcodedef.py). Data migration is done using [yoyo-migrations](https://pypi.org/project/yoyo-migrations/) which has been added to the [dependencies ](https://github.com/aadarsh-ram/folksonomy_api/blob/change-barcode/requirements.txt#L6) of Folksonomy Engine. 
- Added provisions for mentioning PostgresSQL user and host in local_settings_example.py
- Changed [regexp](https://github.com/aadarsh-ram/folksonomy_api/blob/change-barcode/folksonomy/models.py#L8) to check for barcodes with greater than 13 digits. 
- Changed table definitions of [folksonomy](https://github.com/aadarsh-ram/folksonomy_api/blob/change-barcode/db/db_setup.sql#L4) and [folksonomy_versions](https://github.com/aadarsh-ram/folksonomy_api/blob/change-barcode/db/db_setup.sql#L54) to include product barcodes of greater than 13 digits.
- A barcode limit of **24 digits** has been established after discussion.
- Added a [test](https://github.com/aadarsh-ram/folksonomy_api/blob/change-barcode/tests/test_main.py#L239) with a barcode of 25 digits.
- Removed the [test](https://github.com/openfoodfacts/folksonomy_api/blob/main/tests/test_main.py#L239) which checks for greater than 14 digits barcodes.
- Updated documentation

### Part of 
- https://github.com/openfoodfacts/folksonomy_api/issues/70

All unit tests which are part of [_test_main.py_](https://github.com/aadarsh-ram/folksonomy_api/blob/change-barcode/tests/test_main.py) have passed.
Please do provide feedback after reviewing this PR. I hope that I will contribute more to OpenFoodFacts!",True,86,https://api.github.com/repos/openfoodfacts/folksonomy_api/pulls/86,https://github.com/openfoodfacts/folksonomy_api/pull/86,closed,68,26,10,17,4,45,0,1,[],2022-04-04 16:36:00+00:00,2022-04-15 12:24:56+00:00,935336.0,"10 days, 19:48:56","[{'comment_id': 842003390, 'comment_body': ""Cool didn't know about yoyo, but that's looks great."", 'comment_created': datetime.datetime(2022, 4, 4, 17, 57, 18, tzinfo=datetime.timezone.utc), 'commenter': 'alexgarel', 'type': 'User'}, {'comment_id': 842006096, 'comment_body': 'you should get it from the local_setting.py (one should create).\r\n\r\n```suggestion\r\nfrom local_settings import user, host\r\n\r\n```\r\n\r\n@CharlesNepote do you agree ?\r\n', 'comment_created': datetime.datetime(2022, 4, 4, 18, 0, 46, tzinfo=datetime.timezone.utc), 'commenter': 'alexgarel', 'type': 'User'}, {'comment_id': 842028619, 'comment_body': ""@alexgarel @cquest @CharlesNepote I wasn't sure whether I was supposed to rename the existing [local_settings_example.py](https://github.com/openfoodfacts/folksonomy_api/blob/main/local_settings_example.py) to **local_settings.py**. So, I left the name of the file as it is. I think I can add these variables in that file and rename it as well. The documentation can maybe mention editing this file accordingly for setting up a dev environment. Does this sound good?"", 'comment_created': datetime.datetime(2022, 4, 4, 18, 29, 49, tzinfo=datetime.timezone.utc), 'commenter': 'aadarsh-ram', 'type': 'User'}, {'comment_id': 842496727, 'comment_body': ""@aadarsh-ram it's up to the person installing the program to rename it. It should be documented in installation I think.\r\n\r\nI would:\r\n* keep local_settings_example.py in repo\r\n* add a note in the installation doc to tell to copy this file as local_settings.py\r\n* add local_settings.py to gitignore."", 'comment_created': datetime.datetime(2022, 4, 5, 8, 11, 9, tzinfo=datetime.timezone.utc), 'commenter': 'alexgarel', 'type': 'User'}, {'comment_id': 842498766, 'comment_body': 'When you do an upfront check like above and you raise, you do not need to put an else, just put the code after the if.', 'comment_created': datetime.datetime(2022, 4, 5, 8, 13, 25, tzinfo=datetime.timezone.utc), 'commenter': 'alexgarel', 'type': 'User'}, {'comment_id': 842589703, 'comment_body': ""Oh okay, I'll keep this in mind next time. I think this code will be anyways replaced by the existing API code. So, no worries!"", 'comment_created': datetime.datetime(2022, 4, 5, 9, 49, 8, tzinfo=datetime.timezone.utc), 'commenter': 'aadarsh-ram', 'type': 'User'}, {'comment_id': 842591744, 'comment_body': ""@alexgarel I'll go ahead and implement this. I'll also replace the current API code with the already existing one as discussed [here](https://github.com/openfoodfacts/folksonomy_api/issues/49#issuecomment-1088489885). Does this sound good?"", 'comment_created': datetime.datetime(2022, 4, 5, 9, 51, 24, tzinfo=datetime.timezone.utc), 'commenter': 'aadarsh-ram', 'type': 'User'}, {'comment_id': 843790228, 'comment_body': ""it's not db_settings but local_settings (there could be more settings in the future).\r\n\r\nThe mechanism go this way:\r\n- you checkout the repo\r\n- you copy local_settings_example.py to local_settings.py\r\n- you edit local_settings.py\r\n- you run\r\n\r\nAs told local_settings.py have to be in .gitignore.\r\n\r\nThe idea is that you give a template to maintainer, but the local_settings.py must be ignored to avoid leaking secrets by accident.\r\nThis is a well known pattern."", 'comment_created': datetime.datetime(2022, 4, 6, 10, 39, 58, tzinfo=datetime.timezone.utc), 'commenter': 'alexgarel', 'type': 'User'}, {'comment_id': 843790831, 'comment_body': 'has said, use local_settings_example.py', 'comment_created': datetime.datetime(2022, 4, 6, 10, 40, 28, tzinfo=datetime.timezone.utc), 'commenter': 'alexgarel', 'type': 'User'}, {'comment_id': 843791786, 'comment_body': ""We do not want empty barcodes (I know you also test it but, it's better to be precise here).\r\n\r\n```suggestion\r\nre_barcode = re.compile(r'^[0-9]+$')\r\n```"", 'comment_created': datetime.datetime(2022, 4, 6, 10, 41, 41, tzinfo=datetime.timezone.utc), 'commenter': 'alexgarel', 'type': 'User'}, {'comment_id': 843792247, 'comment_body': ""ok, if we change regexp as propose above we do not necessarily need it, but it's good to have a more precise message."", 'comment_created': datetime.datetime(2022, 4, 6, 10, 42, 17, tzinfo=datetime.timezone.utc), 'commenter': 'alexgarel', 'type': 'User'}, {'comment_id': 843794024, 'comment_body': 'more pythonic (and also catches None case)\r\n\r\n```suggestion\r\n        if not v:\r\n```', 'comment_created': datetime.datetime(2022, 4, 6, 10, 44, 36, tzinfo=datetime.timezone.utc), 'commenter': 'alexgarel', 'type': 'User'}, {'comment_id': 843794758, 'comment_body': '@CharlesNepote was USER and PASSWORD intended for the database (but not used ?)', 'comment_created': datetime.datetime(2022, 4, 6, 10, 45, 33, tzinfo=datetime.timezone.utc), 'commenter': 'alexgarel', 'type': 'User'}, {'comment_id': 843846248, 'comment_body': 'Yep, I got it. Will integrate it into local_settings_example.py.', 'comment_created': datetime.datetime(2022, 4, 6, 11, 43, 12, tzinfo=datetime.timezone.utc), 'commenter': 'aadarsh-ram', 'type': 'User'}, {'comment_id': 843846955, 'comment_body': ""I thought a precise message would be more apt. So, I'll keep the regexp as it is. "", 'comment_created': datetime.datetime(2022, 4, 6, 11, 44, 4, tzinfo=datetime.timezone.utc), 'commenter': 'aadarsh-ram', 'type': 'User'}, {'comment_id': 843847224, 'comment_body': ""Oh okay. I'll keep this in mind. Thanks!"", 'comment_created': datetime.datetime(2022, 4, 6, 11, 44, 28, tzinfo=datetime.timezone.utc), 'commenter': 'aadarsh-ram', 'type': 'User'}, {'comment_id': 843848068, 'comment_body': 'I think this is for the Authentication service in OpenFoodFacts. So, the USER and PASSWORD are OpenFoodFacts credentials.', 'comment_created': datetime.datetime(2022, 4, 6, 11, 45, 32, tzinfo=datetime.timezone.utc), 'commenter': 'aadarsh-ram', 'type': 'User'}, {'comment_id': 843925156, 'comment_body': '@CharlesNepote do we use a password in actual prod or no password ?\r\n\r\n@aadarsh-ram sorry but we may have to handle that case of no password (that is add username / password only if they are non empty).', 'comment_created': datetime.datetime(2022, 4, 6, 13, 4, 28, tzinfo=datetime.timezone.utc), 'commenter': 'alexgarel', 'type': 'User'}, {'comment_id': 844160035, 'comment_body': ""I'm not in favor of no limit at all.\r\nWe should also have limites for k/v to avoid getting garbage too easily."", 'comment_created': datetime.datetime(2022, 4, 6, 16, 38, 33, tzinfo=datetime.timezone.utc), 'commenter': 'cquest', 'type': 'User'}, {'comment_id': 844160822, 'comment_body': 'Some higher limit than 13 seems ok, but we should keep a limit.', 'comment_created': datetime.datetime(2022, 4, 6, 16, 39, 28, tzinfo=datetime.timezone.utc), 'commenter': 'cquest', 'type': 'User'}, {'comment_id': 844164069, 'comment_body': '@cquest do let me know the exact safe limit that is required, so that I can change the regex and table definition accordingly.', 'comment_created': datetime.datetime(2022, 4, 6, 16, 43, 7, tzinfo=datetime.timezone.utc), 'commenter': 'aadarsh-ram', 'type': 'User'}, {'comment_id': 844168190, 'comment_body': ""I prefer to apply the UPDATE first, then in case it fails we may do a SELECT to get the last version. In most cases, only the UPDATE will be executed (and atomically).\r\n\r\nI'm not in favor of returning the last version number without the whole object associated because this allows to send the right version number in a later put without getting the missed version of the object in between."", 'comment_created': datetime.datetime(2022, 4, 6, 16, 47, 51, tzinfo=datetime.timezone.utc), 'commenter': 'cquest', 'type': 'User'}, {'comment_id': 844173091, 'comment_body': 'This is not the same test !\r\n\r\nIs was testing version=0 which should return an error.', 'comment_created': datetime.datetime(2022, 4, 6, 16, 52, 37, tzinfo=datetime.timezone.utc), 'commenter': 'cquest', 'type': 'User'}, {'comment_id': 844188069, 'comment_body': ""@cquest I had brought in version checking in the API code. @alexgarel pointed out to me, that it was already implemented (really sorry!). So, there are no changes in the API code from my side. UPDATE seems to be applied first. It's the same code as the main branch. Kindly review the latest changes."", 'comment_created': datetime.datetime(2022, 4, 6, 17, 8, 41, tzinfo=datetime.timezone.utc), 'commenter': 'aadarsh-ram', 'type': 'User'}, {'comment_id': 844192321, 'comment_body': '@cquest I thought for testing version, the product barcode must be a valid one. If its empty, pytest might directly assume that the error is due to the barcode, and not due to the version. Is my intuition right?\r\nThanks for helping me out!', 'comment_created': datetime.datetime(2022, 4, 6, 17, 13, 53, tzinfo=datetime.timezone.utc), 'commenter': 'aadarsh-ram', 'type': 'User'}, {'comment_id': 844195756, 'comment_body': ""Sorry, I don't understand. The current code in master does an UPDATE and nothing else.\r\nThe UPDATE will do the version check at postgresql level: https://github.com/openfoodfacts/folksonomy_api/blob/main/db/db_setup.sql#L22 and will return an error if the version does not match.\r\n\r\nYour commit replaces it with a SELECT first, to check the version then an UPDATE."", 'comment_created': datetime.datetime(2022, 4, 6, 17, 17, 49, tzinfo=datetime.timezone.utc), 'commenter': 'cquest', 'type': 'User'}, {'comment_id': 844200357, 'comment_body': ""My bad, you're right. Sorry.\r\n\r\nCopy/paste error in the tests... the first one should remain empty to check empty barcode, then 0000 for the others."", 'comment_created': datetime.datetime(2022, 4, 6, 17, 22, 59, tzinfo=datetime.timezone.utc), 'commenter': 'cquest', 'type': 'User'}, {'comment_id': 844200379, 'comment_body': '@cquest I don\'t think so. The commit you are reviewing would be outdated. The ""files changed"" column only shows some spaces changing between my branch\'s api.py and the main branch api.py code. \r\n \r\n> Your commit replaces it with a SELECT first, to check the version then an UPDATE.\r\n\r\nI did a commit which had the SELECT first. The latest commits ([Removed version checks in API code. Added db-settings file](https://github.com/openfoodfacts/folksonomy_api/pull/86/commits/872715d9605a4265507d5a72e0bc6697f144cd5d)), removed the ""SELECT"" and brought it back to original code currently in the main branch. So, you can ignore any changes (i.e spaces, newlines) in the API code.', 'comment_created': datetime.datetime(2022, 4, 6, 17, 23, 1, tzinfo=datetime.timezone.utc), 'commenter': 'aadarsh-ram', 'type': 'User'}, {'comment_id': 844202257, 'comment_body': 'No idea, I would say less than 20', 'comment_created': datetime.datetime(2022, 4, 6, 17, 25, 9, tzinfo=datetime.timezone.utc), 'commenter': 'cquest', 'type': 'User'}, {'comment_id': 844203431, 'comment_body': ""> Copy/paste error in the tests... the first one should remain empty to check empty barcode, then 0000 for the others.\r\n\r\nThat's what I figured. I can leave the tests as is, right? (except the > 13 digits)"", 'comment_created': datetime.datetime(2022, 4, 6, 17, 26, 36, tzinfo=datetime.timezone.utc), 'commenter': 'aadarsh-ram', 'type': 'User'}, {'comment_id': 844215587, 'comment_body': '@cquest I went with no limit since there are too many variations in types of barcodes. As per this [link](https://www.camcode.com/blog/how-much-data-can-be-stored-in-a-barcode/), ""Code 11 (USD-8)"" barcodes can store unlimited characters. \r\nAlso, can barcodes also have alphabets in them? If yes, then the regexp might need to handle that.', 'comment_created': datetime.datetime(2022, 4, 6, 17, 38, tzinfo=datetime.timezone.utc), 'commenter': 'aadarsh-ram', 'type': 'User'}, {'comment_id': 846163333, 'comment_body': ""From food data perspective:\r\n* 20 digits is quite common. But upper more than 24 is rare.\r\n* We are not sure barcodes upper than 64 do exist for food products.\r\n* The longest barcode in the database is 59 for one product (this product can't be viewed because of a [Product opener limitation](https://github.com/openfoodfacts/openfoodfacts-server/issues/6571)).\r\n\r\nDoes it have some performance impact? How long is a default varchar in Postgre? 256? Will there be an impact on performance if we choose varchar(64)?"", 'comment_created': datetime.datetime(2022, 4, 8, 14, 21, 48, tzinfo=datetime.timezone.utc), 'commenter': 'CharlesNepote', 'type': 'User'}, {'comment_id': 846183158, 'comment_body': '@CharlesNepote I think there is no improvement by adding a constraint to VARCHAR actually according to this [link](https://stackoverflow.com/questions/1067061/does-a-varchar-fields-declared-size-have-any-impact-in-postgresql). But, there might be some performance improvements by shifting to the TEXT data-type.\r\n\r\nSo, do let me know if you want me to change the data-type. Also, let me know a suitable limit for the same.', 'comment_created': datetime.datetime(2022, 4, 8, 14, 42, 22, tzinfo=datetime.timezone.utc), 'commenter': 'aadarsh-ram', 'type': 'User'}, {'comment_id': 846186242, 'comment_body': 'No, a code with digits is not always a ""number"". 00123 is not a ""number"" but it can be a true barcode.', 'comment_created': datetime.datetime(2022, 4, 8, 14, 45, 39, tzinfo=datetime.timezone.utc), 'commenter': 'CharlesNepote', 'type': 'User'}, {'comment_id': 846228706, 'comment_body': 'Maybe for more clarity, I could give the error ""Barcode should contain only digits of 0-9"". Does this sound good @CharlesNepote?', 'comment_created': datetime.datetime(2022, 4, 8, 15, 15, 41, tzinfo=datetime.timezone.utc), 'commenter': 'aadarsh-ram', 'type': 'User'}, {'comment_id': 849178763, 'comment_body': '@aadarsh-ram we spoke of a limit of 24.\r\n\r\nThis is not for perfs issues but more to avoid having strange data in the database.', 'comment_created': datetime.datetime(2022, 4, 13, 7, 44, 41, tzinfo=datetime.timezone.utc), 'commenter': 'alexgarel', 'type': 'User'}, {'comment_id': 849181596, 'comment_body': ""Sorry @aadarsh-ram one more change:\xa0can you make it:\r\n```python\r\nPOSTGRES_USER= 'myPostgresUsername'\r\nPOSTGRES_HOST = 'myPostgresHost'\r\n```\r\n\r\nThis is more python conventions (camel case is used for class not for variable in python, and constants are upper cased).  see https://peps.python.org/pep-0008/#naming-conventions"", 'comment_created': datetime.datetime(2022, 4, 13, 7, 47, 52, tzinfo=datetime.timezone.utc), 'commenter': 'alexgarel', 'type': 'User'}, {'comment_id': 849290756, 'comment_body': '@alexgarel Added a limit of 24. Added a test with 25 digits barcode too.', 'comment_created': datetime.datetime(2022, 4, 13, 9, 43, 37, tzinfo=datetime.timezone.utc), 'commenter': 'aadarsh-ram', 'type': 'User'}, {'comment_id': 849291545, 'comment_body': 'Yep, got it. Handled the no password case too.', 'comment_created': datetime.datetime(2022, 4, 13, 9, 44, 15, tzinfo=datetime.timezone.utc), 'commenter': 'aadarsh-ram', 'type': 'User'}, {'comment_id': 849292968, 'comment_body': 'Made it uppercase. Will keep this in mind!', 'comment_created': datetime.datetime(2022, 4, 13, 9, 45, 46, tzinfo=datetime.timezone.utc), 'commenter': 'aadarsh-ram', 'type': 'User'}, {'comment_id': 849484472, 'comment_body': 'It either have to use export or should be on the same line.\r\nDid you experimentt some problem with this @aadarsh-ram ?', 'comment_created': datetime.datetime(2022, 4, 13, 13, 29, 33, tzinfo=datetime.timezone.utc), 'commenter': 'alexgarel', 'type': 'User'}, {'comment_id': 849526542, 'comment_body': '```suggestion\r\nAUTH_DATA\xa0= """"\r\nif POSTGRES_USER:\r\n    AUTH_DATA += POSTGRES_USER\r\n    if POSTGRES_PASSWORD:\r\n        AUTH_DATA += "":"" + POSTGRES_PASSWORD\r\nif AUTH_DATA:\r\n    AUTH_DATA += ""@""\r\n\r\nurl = ""postgres://{}{}/folksonomy"".format(AUTH_DATA, POSTGRES_HOST)\r\n```', 'comment_created': datetime.datetime(2022, 4, 13, 14, 7, 9, tzinfo=datetime.timezone.utc), 'commenter': 'alexgarel', 'type': 'User'}, {'comment_id': 849529544, 'comment_body': 'if it\'s usually localhost, put ""localhost"" directly :-) (sensible defaults)', 'comment_created': datetime.datetime(2022, 4, 13, 14, 9, 47, tzinfo=datetime.timezone.utc), 'commenter': 'alexgarel', 'type': 'User'}, {'comment_id': 849652972, 'comment_body': 'Yep done!', 'comment_created': datetime.datetime(2022, 4, 13, 16, 0, 51, tzinfo=datetime.timezone.utc), 'commenter': 'aadarsh-ram', 'type': 'User'}, {'comment_id': 849661023, 'comment_body': ""Really sorry! Didn't know FastAPI allows environment variables inialization in a single line."", 'comment_created': datetime.datetime(2022, 4, 13, 16, 9, 40, tzinfo=datetime.timezone.utc), 'commenter': 'aadarsh-ram', 'type': 'User'}]","[{'commit_sha': 'c101c6bc5c34c727829e01315a4b9bcfc53607f8', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '22f5418d1ed24dd01423112a14878ab65869bd44', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f7f82c91cd1cdfc0fac416401ecc40b5d7004b29', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '537ab134bbd9389ad3af0f11337292596bec66ab', 'committer_username': 'teolemon', 'committer_name': 'Pierre Slamich', 'committer_email': 'pierre@openfoodfacts.org', 'commit_date': datetime.datetime(2012, 4, 29, 10, 48, 3, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9fc91c62ff4ffb86e8028346c2c26e4f45bdd6c2', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '872715d9605a4265507d5a72e0bc6697f144cd5d', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd627d3ca10ae6678a090cd34b53af418d541ee22', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '06692a13d11587c7b56ec300e51c62d9442a43e4', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '42660654c7ae47752d145c85e68ae88b03963f7f', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '218e5463af9555d71b16af3ea748df217092932e', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ed6d964dce943aaf5c42bdc7063722f452640f17', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd43667c327de20e933b4baffa78524be1cfe147c', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '745f783b40b716cda9cc4b77476864531314e20d', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0876ca0b21d28b983b8904427231bc918adc1d43', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c382d3b55c1b8e7affb2bfff46d5346dac8f4cf7', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd26974dc81e284e15ca4126468c0f2f2ca8cd8c3', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ac1567a34fb952509f5b32a68936a77bbc2235f7', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}]",Aadarsh A,25586296,,User,,35,,22,34
901807356,feat: Automatic release to PyPI + fix: failing flake8 tests,"**Fixes issues**
- #75 
- #77 
- #81 (After new PyPI release creation)

**Solution**
- Added pypi.yml for automatic PyPI release using GitHub Actions. (untested due to secret API Token) 
- Updated version for release from 0.1.2 to 0.1.3
- Added a `#noqa` tag for the F821 error.
- Removed draft.py, since existing code (utils.py and init.py) is not dependent on it. File deletion fixes the E999 error.
- Edited Usage.md for a minor variable correction.

If this PR is accepted, #82 can be closed.

Hope to contribute more to OpenFoodFacts!  ",True,88,https://api.github.com/repos/openfoodfacts/openfoodfacts-python/pulls/88,https://github.com/openfoodfacts/openfoodfacts-python/pull/88,closed,33,227,5,4,1,2,0,1,[],2022-04-06 18:01:38+00:00,2022-04-07 13:10:41+00:00,68943.0,19:09:03,"[{'comment_id': 844851634, 'comment_body': 'Can we add the `--non-interactive` parameter ?\r\n\r\n```suggestion\r\n        sudo python -m twine upload --non-interactive dist/*  \r\n```', 'comment_created': datetime.datetime(2022, 4, 7, 8, 17, 50, tzinfo=datetime.timezone.utc), 'commenter': 'alexgarel', 'type': 'User'}, {'comment_id': 844863105, 'comment_body': 'I think it can be added. I just referred the existing publish.sh for this script.\r\nYep, done!', 'comment_created': datetime.datetime(2022, 4, 7, 8, 29, 14, tzinfo=datetime.timezone.utc), 'commenter': 'aadarsh-ram', 'type': 'User'}]","[{'commit_sha': 'd589523ec01b034e6fae1b5bf390ae8337fa8fe6', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '464aa83d53142299c085c85a1e7cce6b5a32ae0c', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1a6bb4e9078b7bb06a6c1fa98ee91f2f80cae34d', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a4184fef82748439f1ec2a9754eba2258053dac5', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}]",Aadarsh A,25586296,,User,,35,,22,34
902927621,fix: Automate PyPI workflow ,"**Related issues**
- Fixes #75 

**Problem**
- Twine not found during [""Publish PyPI package""](https://github.com/openfoodfacts/openfoodfacts-python/runs/5869073018?check_suite_focus=true) run.

**Solution**
- Used the github action [pypi-publish](https://github.com/marketplace/actions/pypi-publish) to automate PyPI publish.
- Workflow succeded in fork repo using testPyPI API token.",True,89,https://api.github.com/repos/openfoodfacts/openfoodfacts-python/pulls/89,https://github.com/openfoodfacts/openfoodfacts-python/pull/89,closed,11,8,1,6,1,0,0,0,[],2022-04-07 16:02:25+00:00,2022-04-07 16:04:48+00:00,143.0,0:02:23,[],"[{'commit_sha': '63f13ffcd201f6a93288add16af2561892a28922', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '879f8a2f81f99fd0920f3f7a16528958a1009cc6', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '63eab077473573abed980e37c96c8da5a4080a5e', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4d0a8106842a469fbf88bb4520114d32f0e665ea', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '729c84ac4cc2c92314f3b5cf006f4f6d2ed2d453', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e442fcad1399d8604c3c5bbe9e463aeb269e04bc', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}]",Aadarsh A,25586296,,User,,35,,22,34
903564857,build: Generate automatic documentation,"**Related issue**
- Fixes #74 

**Solution**
- Uses mkdocs for static website generation
- Creates a new branch gh-pages automatically after workflow run

If the PR is merged, #85 can be closed. Hope to contribute more!",True,90,https://api.github.com/repos/openfoodfacts/openfoodfacts-python/pulls/90,https://github.com/openfoodfacts/openfoodfacts-python/pull/90,closed,37,0,2,23,7,6,0,0,[],2022-04-08 08:12:18+00:00,2022-04-09 10:21:03+00:00,94125.0,"1 day, 2:08:45","[{'comment_id': 845886965, 'comment_body': 'This should be a symlink to ../README.md so that updates are automatic.', 'comment_created': datetime.datetime(2022, 4, 8, 8, 47, 2, tzinfo=datetime.timezone.utc), 'commenter': 'alexgarel', 'type': 'User'}, {'comment_id': 845901386, 'comment_body': ""I don't think symlinks get rendered in the website. I instead copy README.md each time, before mkdocs website generation. This way updates are automatic."", 'comment_created': datetime.datetime(2022, 4, 8, 9, 2, 43, tzinfo=datetime.timezone.utc), 'commenter': 'aadarsh-ram', 'type': 'User'}, {'comment_id': 846115060, 'comment_body': 'you can remove this kind of comments that explains how workflow works. Just keep comments that make sens.', 'comment_created': datetime.datetime(2022, 4, 8, 13, 31, 42, tzinfo=datetime.timezone.utc), 'commenter': 'alexgarel', 'type': 'User'}, {'comment_id': 846115710, 'comment_body': 'Good idea :+1: ', 'comment_created': datetime.datetime(2022, 4, 8, 13, 32, 27, tzinfo=datetime.timezone.utc), 'commenter': 'alexgarel', 'type': 'User'}, {'comment_id': 846187515, 'comment_body': ""Yep, I'll do this ASAP."", 'comment_created': datetime.datetime(2022, 4, 8, 14, 46, 58, tzinfo=datetime.timezone.utc), 'commenter': 'aadarsh-ram', 'type': 'User'}, {'comment_id': 846201736, 'comment_body': ""Yep, I added a name to each step so that it's easier to understand."", 'comment_created': datetime.datetime(2022, 4, 8, 14, 54, 32, tzinfo=datetime.timezone.utc), 'commenter': 'aadarsh-ram', 'type': 'User'}]","[{'commit_sha': '63f13ffcd201f6a93288add16af2561892a28922', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '879f8a2f81f99fd0920f3f7a16528958a1009cc6', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '63eab077473573abed980e37c96c8da5a4080a5e', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4d0a8106842a469fbf88bb4520114d32f0e665ea', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '729c84ac4cc2c92314f3b5cf006f4f6d2ed2d453', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e442fcad1399d8604c3c5bbe9e463aeb269e04bc', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '073a8ba8d822aeedf107b83b4327967e1e80e60b', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '05d55102b0588b4e956baae58b8c8ebfddf078ab', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd5cef081694a16315a62a214beb4182ae10992ae', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bbbc84e46c34bc5ae12aaa1dac784c73465003d0', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1af2037992199e0218d6be4875a850308812299b', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '57c30a09df4efe59e882b4190af89dc8dbed91fc', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '00cda49cf37aa35b0f4575a9ed97c40710ea703d', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '81c113db06aece943f14a7b6dbff9485fee6c592', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2580214abf4df3f6c0f81abd654cddac98b13005', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5bef34747d9f0cbe8db6ba5f5a1ca40c72e1b727', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ecef6944daa54f8d405312d3904f4233ce98069e', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '344c0d787ae9a16a85a91d1ef23c1ecc7599616a', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd695f192288df4f211acfbba43c00bfe55e33c31', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '89a2d696bd5c102a9acb3c8eff4b6c2119392db4', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '36939e6284e2de4ee3dbc2bd95dc16d0f8101cae', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8273430c0e6024d78c5c7b7ed7dbd32091fb0914', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5b34ea293b4197e7d5ed6d6ac91abf345a4dac62', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}]",Aadarsh A,25586296,,User,,35,,22,34
906286792,fix: Dependabot error during CodeQL workflow + fix: Disable labeler on forks,"**Problem**

- In PR #91, there is an issue with the [CodeQL workflow](https://github.com/openfoodfacts/openfoodfacts-python/runs/5972765591?check_suite_focus=true#step:4:51). The error is shown below.

> Error: Workflows triggered by Dependabot on the ""push"" event run with read-only access. Uploading Code Scanning results requires write access. To use Code Scanning with Dependabot, please ensure you are using the ""pull_request"" event for this workflow and avoid triggering on the ""push"" event for Dependabot branches. See https://docs.github.com/en/code-security/secure-coding/configuring-code-scanning#scanning-on-push for more information on how to configure these events.

- The Labeler workflow gives the following [error](https://github.com/openfoodfacts/openfoodfacts-python/runs/5977084335?check_suite_focus=true#step:2:6) for a forked repo:
> Error: HttpError: Resource not accessible by integration
Error: Resource not accessible by integration

**Solution**
- Removed ""push:"" from CodeQL workflow as Dependabot branches require write access.
- Disable Labeller if the current repo is a forked repo. (Labeller doesn't work for forked repos due to a permissions issue)",True,92,https://api.github.com/repos/openfoodfacts/openfoodfacts-python/pulls/92,https://github.com/openfoodfacts/openfoodfacts-python/pull/92,closed,1,1,2,2,3,0,0,0,[],2022-04-11 17:34:12+00:00,2022-04-13 13:20:32+00:00,157580.0,"1 day, 19:46:20",[],"[{'commit_sha': '744a95c7f27d7381736e8aee84197eb5c6a5b30c', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'da8ce1dd8a775d4331da617b9a80651d9545ae51', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}]",Aadarsh A,25586296,,User,,35,,22,34
917460663,build: Package for Conda,"**Description**
The openfoodfacts-python repo has only a PyPI release. It would be helpful to have a Conda package too.
This requires an Anaconda API token (ANACONDA_TOKEN) added in the secrets of the repository.

**Related issue(s)**
- Fixes #54 

**Part of**
- #76 

**Solution**
- GitHub Action for building a Conda package on new release creation (publish-conda.yml)
- Created a meta.yml file
 ",True,94,https://api.github.com/repos/openfoodfacts/openfoodfacts-python/pulls/94,https://github.com/openfoodfacts/openfoodfacts-python/pull/94,closed,49,0,2,14,6,3,0,0,[],2022-04-24 15:24:30+00:00,2022-05-20 15:51:24+00:00,2248014.0,"26 days, 0:26:54","[{'comment_id': 857665445, 'comment_body': 'I added a secret with a  token I\xa0got from https://anaconda.org/.', 'comment_created': datetime.datetime(2022, 4, 25, 14, 4, 54, tzinfo=datetime.timezone.utc), 'commenter': 'alexgarel', 'type': 'User'}, {'comment_id': 857670345, 'comment_body': '@alexgarel Great, I already tested it with my fork and it seems to build and upload!', 'comment_created': datetime.datetime(2022, 4, 25, 14, 9, 47, tzinfo=datetime.timezone.utc), 'commenter': 'aadarsh-ram', 'type': 'User'}, {'comment_id': 857671299, 'comment_body': 'So, on a new release creation - it should automatically upload to PyPI and conda as well ', 'comment_created': datetime.datetime(2022, 4, 25, 14, 10, 45, tzinfo=datetime.timezone.utc), 'commenter': 'aadarsh-ram', 'type': 'User'}]","[{'commit_sha': '332aa9be76eb3a50b2c2b458106e3cace05be7c4', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1c92d12af449fafe7934aed6cb31c13e972c0254', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8f89e155e11527534c1294ce3c7d21bf39e42743', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '63d4f6fdf582db9fc86fd0382bf2500d0906e0f8', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ee080d5e9e74f5a6c33fd6ec42755887f973b1ab', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '665cb391bd00b139ff721a3a264f786ca572603d', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '82a7397a2ace7330d0ffa98957ce547637359eb3', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0a58754de448825fa60435645f3e89cc8ad48b4a', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '73bd0688c34ff6a59c9a1d25402b7589169cc919', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7ac1c8066dd82c885d681ebe141b72ef64b73521', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f5259ade369aa9fb250ab0a0809dfbc14cdd70c5', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '517a652f1f4e62c0c7ea21048bca07d478336a27', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd6f81832aa0d6060ebdb6983f0bc7760ef0a9bad', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '078d0daaa0b203ee96492cc4f31ddb33b3f8a873', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}]",Aadarsh A,25586296,,User,,35,,22,34
927217755,build: Changed branch for release-please,"### Description
- Wrong name of master branch is mentioned in the release-please GitHub Action.

### Solution
- Changed ""master"" to ""develop""

### Related issue(s)
- Fixes #97 ",True,99,https://api.github.com/repos/openfoodfacts/openfoodfacts-python/pulls/99,https://github.com/openfoodfacts/openfoodfacts-python/pull/99,closed,1,1,1,1,1,0,0,1,[],2022-05-04 03:52:45+00:00,2022-05-04 08:22:57+00:00,16212.0,4:30:12,[],"[{'commit_sha': 'da5b1bdbc7ab7a580af88af3ec02de59c100eeb8', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}]",Aadarsh A,25586296,,User,,35,,22,34
930213465,docs: Rework documentation in README.md,"### Description
Fixed broken links and did minor text changes in README.",True,101,https://api.github.com/repos/openfoodfacts/openfoodfacts-python/pulls/101,https://github.com/openfoodfacts/openfoodfacts-python/pull/101,closed,18,17,2,1,1,0,0,1,[],2022-05-07 05:46:07+00:00,2022-05-09 10:26:46+00:00,189639.0,"2 days, 4:40:39",[],"[{'commit_sha': 'aba7a18a03334cba51f63a3ba6814e88a1c44f49', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}]",Aadarsh A,25586296,,User,,35,,22,34
936561279,docs: Update PR template,"## Description

- Added a PR template

## Related issue(s)

- Fixes #95 ",True,102,https://api.github.com/repos/openfoodfacts/openfoodfacts-python/pulls/102,https://github.com/openfoodfacts/openfoodfacts-python/pull/102,closed,11,0,1,3,2,0,0,1,[],2022-05-14 16:00:20+00:00,2022-05-16 07:40:09+00:00,142789.0,"1 day, 15:39:49",[],"[{'commit_sha': 'aba7a18a03334cba51f63a3ba6814e88a1c44f49', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'db5cd84b7cf90f6016b331692680ce098adf7434', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7c6ad603c3b01c8a7231b9b56da7d99bd844561e', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}]",Aadarsh A,25586296,,User,,35,,22,34
963191186,docs: Update README.md,,True,9,https://api.github.com/repos/openfoodfacts/taxonomy-editor/pulls/9,https://github.com/openfoodfacts/taxonomy-editor/pull/9,closed,3,1,1,1,1,0,0,0,[],2022-06-09 18:05:26+00:00,2022-06-15 19:24:51+00:00,523165.0,"6 days, 1:19:25",[],"[{'commit_sha': 'd788f36c28d19099c71142d1c52051df7d853bae', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}]",Aadarsh A,25586296,,User,,35,,22,34
964734981,feat: Setup basic FastAPI project,"Fixes #6 

### What
- Setup of basic FastAPI project, with a few endpoints
- Dockerfile setup for the backend API
- Docs containing Docker setup process
- Creation of a JSON schema for a taxonomy
- Creation of a JSON file for a test taxonomy

### Part of",True,10,https://api.github.com/repos/openfoodfacts/taxonomy-editor/pulls/10,https://github.com/openfoodfacts/taxonomy-editor/pull/10,closed,319,0,8,9,1,6,2,0,"[{'name': 'fastapi'}, {'name': 'dependencies'}]",2022-06-11 11:22:15+00:00,2022-07-12 15:10:41+00:00,2692106.0,"31 days, 3:48:26","[{'comment_id': 898336163, 'comment_body': 'you should move this file to a directory.\r\n\r\nI would even propose two depth:\r\n- backend/  - this will be the place for all backend code (and at root you would eg find requirement.txt)\r\n- backend/editor - this is the package for the editor (you may find a better name)\r\n  - this one will contains your `api.py` and a `__init__.py `file', 'comment_created': datetime.datetime(2022, 6, 15, 19, 27, 32, tzinfo=datetime.timezone.utc), 'commenter': 'alexgarel', 'type': 'User'}, {'comment_id': 898339208, 'comment_body': ""That done we could already merge. Event if it's just a demo"", 'comment_created': datetime.datetime(2022, 6, 15, 19, 31, 41, tzinfo=datetime.timezone.utc), 'commenter': 'alexgarel', 'type': 'User'}, {'comment_id': 900688939, 'comment_body': ""Yes, I'll make it into a directory structure. I'll figure out a name for it too."", 'comment_created': datetime.datetime(2022, 6, 18, 3, 5, 48, tzinfo=datetime.timezone.utc), 'commenter': 'aadarsh-ram', 'type': 'User'}, {'comment_id': 916877439, 'comment_body': 'Kudos for having wrote this test. This will be usefull to @BryanH01 also, I\xa0guess.', 'comment_created': datetime.datetime(2022, 7, 8, 14, 33, 4, tzinfo=datetime.timezone.utc), 'commenter': 'alexgarel', 'type': 'User'}, {'comment_id': 916888667, 'comment_body': 'I won\'t argue over the need of this schema.json, I really think we will do it all in the neo4j database. But let\'s get them in, for now we shall see later.\r\n\r\nHowever there are mismatches with the spec.\r\n\r\nFor example: \r\n- ""preceding_lines"" is a list of strings.\r\n- no `__comments__` block is mentionned\r\n- `stopwords:IDX` and `synonyms:IDX` are distinct nodes from `__header__`\r\n- etc.\r\n\r\nBut your schema has it\'s own logic per se… it\'s more than we must align :-)\r\n\r\nMaybe we should better discuss the neo4j schema (in facts it\'s schema less) and have the equivalent of test.txt as an importable file.', 'comment_created': datetime.datetime(2022, 7, 8, 14, 45, 48, tzinfo=datetime.timezone.utc), 'commenter': 'alexgarel', 'type': 'User'}, {'comment_id': 916966261, 'comment_body': ""Yep, sure! We'll discuss the structure of JSON, and bring a unified schema."", 'comment_created': datetime.datetime(2022, 7, 8, 16, 18, 31, tzinfo=datetime.timezone.utc), 'commenter': 'aadarsh-ram', 'type': 'User'}]","[{'commit_sha': 'd0947234bdbc653522e40020cc9fe7348f877085', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0ce5bd99c7385a6d2406bca33ee0189c33d4063c', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8ea1a16c8c1da4540b1d3917185768091849291f', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1bef366d1b912f863a999dd26534854133d7a0ec', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '89af646e631561b2919ea6ce35aa76c88edcedfe', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a1065152ada09ceae2638b956f900d2eb826a19d', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '801fc55805bdb0d122b4875412adc6f75cd7a70c', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd45d881288cd5b962b4892b6fdc08a1d00f03236', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f37ccf67cfe1f17ed3667dfa16ace25af2056a43', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}]",Aadarsh A,25586296,,User,,35,,22,34
998419378,fix: Changed JSON according to spec,"### What
- Changed JSON schema and sample JSON according to spec",True,19,https://api.github.com/repos/openfoodfacts/taxonomy-editor/pulls/19,https://github.com/openfoodfacts/taxonomy-editor/pull/19,closed,143,89,4,10,2,13,0,0,[],2022-07-16 12:41:13+00:00,2022-07-20 13:43:26+00:00,349333.0,"4 days, 1:02:13","[{'comment_id': 923163414, 'comment_body': 'the id is a string. in `""stopwords:IDX""`, IDX is the number of preceeding stopwords lines.\r\n\r\nSo it\'s `""stopwords:0""`, `""stopwords:1""`, `""stopwords:2""` etc...', 'comment_created': datetime.datetime(2022, 7, 18, 9, 56, 27, tzinfo=datetime.timezone.utc), 'commenter': 'alexgarel', 'type': 'User'}, {'comment_id': 923166161, 'comment_body': 'It\'s a list of tag and tagid.\r\nSomething like `[{""tag"": ""en:The"", ""tagid"": ""en:the""}, {""tag: ""en:Some"", ""tagid"": ""en:some""}]`.\r\n\r\nBut we may also have two list of same length, I don\'t know what fits best with the database capability:\r\n\r\n` {""tags"": [""en:The"", ""en:Some""], ""tagids"": [""en:the"", ""en:some""]}`', 'comment_created': datetime.datetime(2022, 7, 18, 9, 59, 46, tzinfo=datetime.timezone.utc), 'commenter': 'alexgarel', 'type': 'User'}, {'comment_id': 923166958, 'comment_body': ""Maybe it's a list of line ? I think it would be more appropriate (although this is not central)."", 'comment_created': datetime.datetime(2022, 7, 18, 10, 0, 41, tzinfo=datetime.timezone.utc), 'commenter': 'alexgarel', 'type': 'User'}, {'comment_id': 923167285, 'comment_body': 'Same as stopwords, IDX is a variable.', 'comment_created': datetime.datetime(2022, 7, 18, 10, 1, 3, tzinfo=datetime.timezone.utc), 'commenter': 'alexgarel', 'type': 'User'}, {'comment_id': 923167724, 'comment_body': 'Same as stopwords.', 'comment_created': datetime.datetime(2022, 7, 18, 10, 1, 35, tzinfo=datetime.timezone.utc), 'commenter': 'alexgarel', 'type': 'User'}, {'comment_id': 923168864, 'comment_body': 'here also we have to decompose tags and tagsid into single elements. This is important because we really want to request on this.', 'comment_created': datetime.datetime(2022, 7, 18, 10, 3, 2, tzinfo=datetime.timezone.utc), 'commenter': 'alexgarel', 'type': 'User'}, {'comment_id': 923169828, 'comment_body': 'Ok reading this, I see that some of my remarks on ""schema"" are indeed included (about IDX).', 'comment_created': datetime.datetime(2022, 7, 18, 10, 4, 14, tzinfo=datetime.timezone.utc), 'commenter': 'alexgarel', 'type': 'User'}, {'comment_id': 923554680, 'comment_body': 'Would this representation be appropriate for the ""id""? Do suggest if there are any other ways to represent this.\r\n```suggestion\r\n            ""id"" : {\r\n                ""type"" : ""string"",\r\n                ""const"": ""stopwords:IDX""\r\n            },\r\n```', 'comment_created': datetime.datetime(2022, 7, 18, 16, 11, 6, tzinfo=datetime.timezone.utc), 'commenter': 'aadarsh-ram', 'type': 'User'}, {'comment_id': 923569252, 'comment_body': '> It\'s a list of tag and tagid. Something like `[{""tag"": ""en:The"", ""tagid"": ""en:the""}, {""tag: ""en:Some"", ""tagid"": ""en:some""}]`.\r\n\r\nI think this would be a better representation, since each tag and tagid would be in one dictionary and easy to query. \r\n\r\nFor instance, if ""fr:aux,au,de"" is given as the value of a stopwords block, would you be able to suggest the ""list of dictionaries"" for this example? An example would help me gain a little more clarity on this.', 'comment_created': datetime.datetime(2022, 7, 18, 16, 26, 52, tzinfo=datetime.timezone.utc), 'commenter': 'aadarsh-ram', 'type': 'User'}, {'comment_id': 925285518, 'comment_body': 'The point is that it\'s not a const, but, I tihnk it\'s ok for now, as this is mainly to document.\r\nso it\'s just `\r\n\r\n```suggestion\r\n            ""id"" : {\r\n                ""type"" : ""string"",\r\n                ""description"": ""stopwords:IDX""\r\n            },\r\n```', 'comment_created': datetime.datetime(2022, 7, 20, 7, 48, 45, tzinfo=datetime.timezone.utc), 'commenter': 'alexgarel', 'type': 'User'}, {'comment_id': 925289127, 'comment_body': 'For stopwords we only have one language per entry so maybe something like:\r\n```\r\n...\r\n""lang"": ""en"", \r\n""tag"": [""The"", ""Some""], \r\n""tagid"": [""the"", ""some""]\r\n...\r\n```\r\nis the right way.', 'comment_created': datetime.datetime(2022, 7, 20, 7, 52, 32, tzinfo=datetime.timezone.utc), 'commenter': 'alexgarel', 'type': 'User'}, {'comment_id': 925434938, 'comment_body': 'In tagsid you have to normalize spaces and remove stopwords for the language.\r\n\r\nI let you do it in the other entries ;-)\r\n\r\n```suggestion\r\n            ""tagsid"" : {\r\n                ""en"" : [""passion-fruit-yogurts""],\r\n                ""fr"" : [""yaourts-fruit-passion""]\r\n            },\r\n\r\n```', 'comment_created': datetime.datetime(2022, 7, 20, 10, 20, 1, tzinfo=datetime.timezone.utc), 'commenter': 'alexgarel', 'type': 'User'}, {'comment_id': 925437271, 'comment_body': ""Oh okay, I'll check which entries have stopwords, spaces and normalize them."", 'comment_created': datetime.datetime(2022, 7, 20, 10, 22, 35, tzinfo=datetime.timezone.utc), 'commenter': 'aadarsh-ram', 'type': 'User'}]","[{'commit_sha': '28738ed4dab02a95b1cb086b94de88c2de8367fd', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0b63a80c08df2dd2833834ad643eb01af896bc55', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ec0c3e005dbd82af3c881c065bba7dbb8f279223', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f418dce5a9a17f43f03134685f50030dbf61e9df', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'be7ca591fb4d139ca31201aa41cf23277946f72e', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6774f1fdd7b3e3903c202c11268dfd5f8f1ccc62', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aa33056e39557c8951bc1c570cb45f4b11670a55', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '579fbd76b57dee9c284e62d3636c97e88f206a1f', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8faf5881a9329e7bf43e7c650e3661dd97237179', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cb75c459ab932b9e1b6717eca486e5e5dc52d187', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}]",Aadarsh A,25586296,,User,,35,,22,34
1006961368,feat: New paths for backend API,"## What
- Creates new paths for retrieval and updation of nodes in a taxonomy
- List of GET paths created:

| Paths           | Description      |
|:--------------|:-------------------------------------------------|
| ""/nodes"" | Retrieves all node information in taxonomy |
| ""/entry/{entry}"" | Retrieves information on entry with id = {entry} |
| ""/entry"" | Retrieves all nodes with label ""ENTRY"" |
| ""/synonym/{synonym}"" | Retrieves information on synonym with id = {synonym} |
| ""/synonym"" | Retrieves all nodes with label ""SYNONYMS"" |
| ""/stopword/{stopword}"" | Retrieves information on stopword with id = {stopword} |
| ""/stopword"" | Retrieves all nodes with label ""STOPWORDS"" |
| ""/header"" | Retrieves information on header of taxonomy |
| ""/footer"" | Retrieves information on footer of taxonomy |
    
 - List of POST paths created:
 
| Paths           | Description      |
|:--------------|:-------------------------------------------------|
| ""/edit/entry/{entry}"" | Editing an entry in taxonomy with id = {entry} |
| ""/edit/synonym/{synonym}"" | Editing a synonym with id = {synonym} |
| ""/edit/stopword/{stopword}"" | Editing a stopword with id = {stopword} |
| ""/edit/header"" | Editing header of taxonomy |
| ""/edit/footer"" | Editing footer of taxonomy |

## Part of
- Fixes #24 
- Fixes #25 ",True,26,https://api.github.com/repos/openfoodfacts/taxonomy-editor/pulls/26,https://github.com/openfoodfacts/taxonomy-editor/pull/26,closed,302,26,9,20,0,41,0,0,[],2022-07-25 08:14:02+00:00,2022-07-27 09:29:00+00:00,177298.0,"2 days, 1:14:58","[{'comment_id': 928864088, 'comment_body': 'well done. \r\n\r\nCould we take the uri from environment and put this env reading in a settings.py file (just to group them, also because it\'s easier to override them for test)\r\n\r\nThat is you will have setting.py with\r\n\r\n```\r\nuri = os.environ.get(""NEO4J_URI"", ""bolt://localhost:7687"")\r\n```\r\n\r\nand in api.py:\r\n\r\n```\r\nimport settings\r\n\r\nuri = settings.uri\r\n```\r\n\r\n(it\'s intentional not to write `from settings import uri` but `import settings` to ease monkeypatching it for tests, if needed)', 'comment_created': datetime.datetime(2022, 7, 25, 13, 8, 13, tzinfo=datetime.timezone.utc), 'commenter': 'alexgarel', 'type': 'User'}, {'comment_id': 928865310, 'comment_body': 'We do not use list comprehension for this kind of thing, usually\r\n```suggestion\r\n    allNodes = list(result)\r\n```', 'comment_created': datetime.datetime(2022, 7, 25, 13, 9, 23, tzinfo=datetime.timezone.utc), 'commenter': 'alexgarel', 'type': 'User'}, {'comment_id': 928869130, 'comment_body': 'I let you apply it everywhere else !', 'comment_created': datetime.datetime(2022, 7, 25, 13, 13, 8, tzinfo=datetime.timezone.utc), 'commenter': 'alexgarel', 'type': 'User'}, {'comment_id': 928870689, 'comment_body': ""you just want one entry. So it's better not to return the list.\r\n\r\nI would write:\r\n```suggestion\r\n    oneEntry = next(iter(result))\r\n    return oneEntry\r\n```\r\n\r\nbut you also should handle the case where there is no such entry and return a 404.\r\n```"", 'comment_created': datetime.datetime(2022, 7, 25, 13, 14, 48, tzinfo=datetime.timezone.utc), 'commenter': 'alexgarel', 'type': 'User'}, {'comment_id': 928872478, 'comment_body': 'It would be better to separate database access from http processing.\r\n\r\nSo it would be better to have a entries.py where you put:\r\n- the session initialization / shutdown (but events handlers should be here, they just call the right function)\r\n- all the requests as simple functions (eg, here:\xa0`get_entry(id)`)\r\n\r\nIt\'s always better to separate that kind of things:\r\n- you can factor out something (here for example I imagine only one function get_node(id, type), and in findOneEntry, we can call `get_node(id, ""ENTRY"")° (BTW ""ENTRY"" could be in an enumeration)\r\n- for testability (you can test db function on their own)\r\n- as you code will grow you will have a better [separation of concerns](https://en.wikipedia.org/wiki/Separation_of_concerns) (and this is a very important design pattern in my experience)', 'comment_created': datetime.datetime(2022, 7, 25, 13, 16, 41, tzinfo=datetime.timezone.utc), 'commenter': 'alexgarel', 'type': 'User'}, {'comment_id': 928883441, 'comment_body': 'You should do it all in one query, this will be much more efficient.\r\n\r\nYou just have to build the ""SET"" lines and concatenate them. For each line instead of $value you can use the key name `f""SET .... ${key}""` and pass the whole dict to ""run"", adding the ""id"". \r\n\r\n', 'comment_created': datetime.datetime(2022, 7, 25, 13, 27, 1, tzinfo=datetime.timezone.utc), 'commenter': 'alexgarel', 'type': 'User'}, {'comment_id': 928904571, 'comment_body': 'You did a ""PUT"" while you method reminds more of a ""POST"" in the sens that it permits partial updates (normally POST enables partial updates, but not PUT). see https://en.wikipedia.org/wiki/Representational_state_transfer#Semantics_of_HTTP_methods', 'comment_created': datetime.datetime(2022, 7, 25, 13, 46, 36, tzinfo=datetime.timezone.utc), 'commenter': 'alexgarel', 'type': 'User'}, {'comment_id': 928905854, 'comment_body': 'Here also, if we have a entries.py or neo4j.py file, we could factorize the code of all those methods in a `update_entry(id, type)` method.', 'comment_created': datetime.datetime(2022, 7, 25, 13, 47, 50, tzinfo=datetime.timezone.utc), 'commenter': 'alexgarel', 'type': 'User'}, {'comment_id': 928906376, 'comment_body': 'put models into their own file.', 'comment_created': datetime.datetime(2022, 7, 25, 13, 48, 20, tzinfo=datetime.timezone.utc), 'commenter': 'alexgarel', 'type': 'User'}, {'comment_id': 928907148, 'comment_body': 'Also I\xa0would do a subclass of BaseModel with preceding_lines which would be a parent of Footer and Header.', 'comment_created': datetime.datetime(2022, 7, 25, 13, 49, 2, tzinfo=datetime.timezone.utc), 'commenter': 'alexgarel', 'type': 'User'}, {'comment_id': 928914273, 'comment_body': '> you also should handle the case where there is no such entry and return a 404\r\n\r\nForgot to write that with proposed code it can be handled with a try / except.\r\n\r\nBut as you may also check you have only one item, you may also convert to list and the check list `len` and act accordingly.', 'comment_created': datetime.datetime(2022, 7, 25, 13, 55, 14, tzinfo=datetime.timezone.utc), 'commenter': 'alexgarel', 'type': 'User'}, {'comment_id': 928915311, 'comment_body': 'see how I\xa0did this in sample/load.py', 'comment_created': datetime.datetime(2022, 7, 25, 13, 56, 11, tzinfo=datetime.timezone.utc), 'commenter': 'alexgarel', 'type': 'User'}, {'comment_id': 929077959, 'comment_body': 'Would this check be required for the __header__ and __footer__ nodes too? Since in a taxonomy, it is understood that they are always present.', 'comment_created': datetime.datetime(2022, 7, 25, 16, 27, 54, tzinfo=datetime.timezone.utc), 'commenter': 'aadarsh-ram', 'type': 'User'}, {'comment_id': 929144866, 'comment_body': 'Maybe not.', 'comment_created': datetime.datetime(2022, 7, 25, 17, 46, 36, tzinfo=datetime.timezone.utc), 'commenter': 'alexgarel', 'type': 'User'}, {'comment_id': 929306440, 'comment_body': '@alexgarel I\'m not able to figure out where exactly you\'ve written the ""concatenation"" step in load.py. Would you be able to point that out to me?', 'comment_created': datetime.datetime(2022, 7, 25, 21, 16, 49, tzinfo=datetime.timezone.utc), 'commenter': 'aadarsh-ram', 'type': 'User'}, {'comment_id': 929582108, 'comment_body': 'I built the ""SET"" lines by concatenation and used it as a query.', 'comment_created': datetime.datetime(2022, 7, 26, 6, 44, 4, tzinfo=datetime.timezone.utc), 'commenter': 'aadarsh-ram', 'type': 'User'}, {'comment_id': 929621717, 'comment_body': ""Perfect :-) (I didn't know if my previous comment was clear enough !)"", 'comment_created': datetime.datetime(2022, 7, 26, 7, 32, 28, tzinfo=datetime.timezone.utc), 'commenter': 'alexgarel', 'type': 'User'}, {'comment_id': 929622574, 'comment_body': 'Why not  ?\r\n```suggestion\r\n    return oneEntry[0]\r\n```', 'comment_created': datetime.datetime(2022, 7, 26, 7, 33, 25, tzinfo=datetime.timezone.utc), 'commenter': 'alexgarel', 'type': 'User'}, {'comment_id': 929622911, 'comment_body': '```suggestion\r\n    return oneSynonym[0]\r\n\r\n```', 'comment_created': datetime.datetime(2022, 7, 26, 7, 33, 46, tzinfo=datetime.timezone.utc), 'commenter': 'alexgarel', 'type': 'User'}, {'comment_id': 929625035, 'comment_body': 'As this raise and message dose not change, I\xa0think we could factor this into a `check_one` method.\r\n\r\nI would also check that len(oneEntry) < 2 and if not raise a Server Error or something like that.\r\nBut you may have a different opinion.', 'comment_created': datetime.datetime(2022, 7, 26, 7, 36, 12, tzinfo=datetime.timezone.utc), 'commenter': 'alexgarel', 'type': 'User'}, {'comment_id': 929627569, 'comment_body': ""Don't use i`mport *` this breaks a lot of possible checks."", 'comment_created': datetime.datetime(2022, 7, 26, 7, 38, 59, tzinfo=datetime.timezone.utc), 'commenter': 'alexgarel', 'type': 'User'}, {'comment_id': 929628803, 'comment_body': ""As commented above, I'm not in favor of such a file, but if you find really strong arguments for it (because I've never seen it in any project)."", 'comment_created': datetime.datetime(2022, 7, 26, 7, 40, 19, tzinfo=datetime.timezone.utc), 'commenter': 'alexgarel', 'type': 'User'}, {'comment_id': 929629555, 'comment_body': ""I'm curious, where did you find this design pattern ?\r\n\r\nIn my opinion this is not a good design pattern. It will not work with common tools like flake8 and the like (impossible to check for missing imports or imports that are not used).\r\n\r\nThe best practice is to simply manage imports for each file."", 'comment_created': datetime.datetime(2022, 7, 26, 7, 41, 7, tzinfo=datetime.timezone.utc), 'commenter': 'alexgarel', 'type': 'User'}, {'comment_id': 929631457, 'comment_body': 'Please add a small description to every function.\r\n\r\nEven when the name is descriptive, this is a good habit to get: no function without a doc string.\r\nAnd really think of you in 1 year, when you will read this code without being in the context when you write it :-)', 'comment_created': datetime.datetime(2022, 7, 26, 7, 43, 6, tzinfo=datetime.timezone.utc), 'commenter': 'alexgarel', 'type': 'User'}, {'comment_id': 929634221, 'comment_body': 'Proposal: a good strategy for code, when you can is: unify then process.\r\n\r\nHere you can unify by doing so:\r\n\r\n```suggestion\r\n    qualifier = f"":{label}"" if label else """"\r\n    query = f""""""\r\n        MATCH (n{qualifier}) RETURN n\r\n    """"""\r\n```\r\n', 'comment_created': datetime.datetime(2022, 7, 26, 7, 46, 1, tzinfo=datetime.timezone.utc), 'commenter': 'alexgarel', 'type': 'User'}, {'comment_id': 929636329, 'comment_body': 'I thinks it\'s a good idea to have a specific function.\r\n\r\nBut implementation is a repetition, so why not:\r\n```suggestion\r\n    return get_nodes(""TEXT"", id)\r\n```', 'comment_created': datetime.datetime(2022, 7, 26, 7, 48, 17, tzinfo=datetime.timezone.utc), 'commenter': 'alexgarel', 'type': 'User'}, {'comment_id': 929644720, 'comment_body': ""Yep, I wasn't sure of the method for partial updates. I'll change it."", 'comment_created': datetime.datetime(2022, 7, 26, 7, 57, 9, tzinfo=datetime.timezone.utc), 'commenter': 'aadarsh-ram', 'type': 'User'}, {'comment_id': 929647721, 'comment_body': 'It\'s a bit silly, because we already inject keys, but non the less, I will use parameters to inject values.\r\n\r\nTo avoid [injection](https://developer.mozilla.org/en-US/docs/Glossary/SQL_Injection) problems, we may want to check keys only use word.\r\n\r\nLast: when you build a query like this, the best approach is to collect lines in a list and join them at the end (faster, cleaner)\r\n\r\nSo I propose:\r\n\r\n```suggestion\r\n    # sanity check keys\r\n    for key in incomingData.keys():\r\n        if not re.match(r""^\\w+$"", key) or key == ""id"":\r\n            raise ValueError(""Invalid key: %s"", key)\r\n    # build query\r\n    query = [f""""""MATCH (n:{label}) WHERE n.id = $id""""""]\r\n    for key in incomingData.keys():\r\n        query.append(f""""""\\nSET n.{key} = ${key}\\n"""""")\r\n    query.append(f""""""RETURN n"""""")\r\n    params = dict(incomingData, id=entry)\r\n    result = session.run("" "".join(query), params)\r\n```', 'comment_created': datetime.datetime(2022, 7, 26, 8, 0, 14, tzinfo=datetime.timezone.utc), 'commenter': 'alexgarel', 'type': 'User'}, {'comment_id': 929648557, 'comment_body': 'There again there is a risk of injection.', 'comment_created': datetime.datetime(2022, 7, 26, 8, 1, 5, tzinfo=datetime.timezone.utc), 'commenter': 'alexgarel', 'type': 'User'}, {'comment_id': 929649063, 'comment_body': ""In this case also I\xa0will simply reuse update_nodes, it's the simplest."", 'comment_created': datetime.datetime(2022, 7, 26, 8, 1, 37, tzinfo=datetime.timezone.utc), 'commenter': 'alexgarel', 'type': 'User'}, {'comment_id': 929655829, 'comment_body': 'Yeah, it was based on the structure followed in folksonomy_api, since that project was also based on FastAPI. ', 'comment_created': datetime.datetime(2022, 7, 26, 8, 8, 42, tzinfo=datetime.timezone.utc), 'commenter': 'aadarsh-ram', 'type': 'User'}, {'comment_id': 929659020, 'comment_body': ""Since, a doc string was already present in the api.py file, I thought it was self-explanatory. But, I'll add a description over here too."", 'comment_created': datetime.datetime(2022, 7, 26, 8, 11, 45, tzinfo=datetime.timezone.utc), 'commenter': 'aadarsh-ram', 'type': 'User'}, {'comment_id': 929667865, 'comment_body': 'This design pattern was followed in the [Folksonomy API](https://github.com/openfoodfacts/folksonomy_api/tree/main/folksonomy). Since, that project had a FastAPI based backend, I thought I was also supposed to follow a similar kind of design philospophy.\r\n\r\nSo, should I bring all required imports to their respective files and remove the dependencies.py file? ', 'comment_created': datetime.datetime(2022, 7, 26, 8, 20, 22, tzinfo=datetime.timezone.utc), 'commenter': 'aadarsh-ram', 'type': 'User'}, {'comment_id': 929673537, 'comment_body': ""Ooooh, ok… but I don't see it as a good design pattern.\r\n\r\n(We will introduce flake8 soon)."", 'comment_created': datetime.datetime(2022, 7, 26, 8, 26, 4, tzinfo=datetime.timezone.utc), 'commenter': 'alexgarel', 'type': 'User'}, {'comment_id': 929673990, 'comment_body': '> So, should I bring all required imports to their respective files and remove the dependencies.py file?\r\n\r\nyes please.', 'comment_created': datetime.datetime(2022, 7, 26, 8, 26, 30, tzinfo=datetime.timezone.utc), 'commenter': 'alexgarel', 'type': 'User'}, {'comment_id': 929674824, 'comment_body': 'yep, doc string to every function is a good habit ! (did I\xa0repeat myself ? :stuck_out_tongue_closed_eyes: )', 'comment_created': datetime.datetime(2022, 7, 26, 8, 27, 19, tzinfo=datetime.timezone.utc), 'commenter': 'alexgarel', 'type': 'User'}, {'comment_id': 929741064, 'comment_body': 'I think writing a `check_one()` function should be fine. Do you think we can raise a 500: Internal Server Error with a message like ""Multiple entries found""?', 'comment_created': datetime.datetime(2022, 7, 26, 9, 31, 20, tzinfo=datetime.timezone.utc), 'commenter': 'aadarsh-ram', 'type': 'User'}, {'comment_id': 929873896, 'comment_body': 'sorry I\xa0didn\'t spot it before but:\r\n\r\n* you need a __init__.py file in editor folder (this will make the editor folder a package)\r\n* use ""relative"" import here:\r\n\r\n```suggestion\r\nfrom .models import Header, Footer\r\n\r\n# DB helper imports\r\nfrom .entries import initialize_db, shutdown_db\r\nfrom .entries import get_all_nodes, get_nodes\r\nfrom .entries import update_nodes\r\n```\r\n\r\nIt\'s important to avoid collision with eventual system level packages.', 'comment_created': datetime.datetime(2022, 7, 26, 11, 57, 18, tzinfo=datetime.timezone.utc), 'commenter': 'alexgarel', 'type': 'User'}, {'comment_id': 929985474, 'comment_body': 'A init.py file is already present in the repo. For testing, it was easier to not have relative imports. ', 'comment_created': datetime.datetime(2022, 7, 26, 13, 45, 28, tzinfo=datetime.timezone.utc), 'commenter': 'aadarsh-ram', 'type': 'User'}, {'comment_id': 930728491, 'comment_body': 'Sorry for I\xa0didn\'t check it.\r\n\r\nUsually on APIs the best is to just have \r\n\r\n```suggestion\r\n@app.post(""/entry/{entry}"")\r\n```\r\n\r\nIt\'s a common design pattern, that with a GET you have the entry, with a POST you modify it.\r\n\r\nI think it\'s worth it, if you agree @aadarsh-ram ', 'comment_created': datetime.datetime(2022, 7, 27, 7, 44, 52, tzinfo=datetime.timezone.utc), 'commenter': 'alexgarel', 'type': 'User'}, {'comment_id': 930733803, 'comment_body': ""Yep, I agree. I'll make the changes"", 'comment_created': datetime.datetime(2022, 7, 27, 7, 50, 34, tzinfo=datetime.timezone.utc), 'commenter': 'aadarsh-ram', 'type': 'User'}]","[{'commit_sha': '8ab43b106f41c24365f31a1246801bb8d72dfe30', 'committer_username': 'alexgarel', 'committer_name': 'Alex Garel', 'committer_email': None, 'commit_date': datetime.datetime(2009, 10, 26, 13, 49, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f09ef67b6335682bcba0ed4cd3d25067356897ea', 'committer_username': 'alexgarel', 'committer_name': 'Alex Garel', 'committer_email': None, 'commit_date': datetime.datetime(2009, 10, 26, 13, 49, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'eda5a152b56c5107f37dd441f7d9b24877568798', 'committer_username': 'alexgarel', 'committer_name': 'Alex Garel', 'committer_email': None, 'commit_date': datetime.datetime(2009, 10, 26, 13, 49, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4def1a64da1dc265b555bb11744f82b4f938f6eb', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '813ac7a7748aa7a04da18de895230a20fbb2e6fd', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5054c645a10f47bec5db79b62956d6064b9af68a', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7ef379d6ae19abaf99fc0d71f77df4e02acc1f8d', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '34913655ef7311092e2f9ddfc5019403fb540d42', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c13abcb3feeecb050e37154922edb88167d214b6', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'df5f1b4281b24aaef0c37600fc9f2b9d78615199', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '84d1ffdb1768921bbd7b897ac81cdfe187115a86', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6c88e75c236e1fadeb8ffaefc2e46e66612c4d64', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ceb6c7b72cf93aa1988b8f96232c44bf318a02f5', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a3f798870f8862bbd279cf1a8be31674fd1792fd', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '154079f40876b3d857f93412acd3c8e8a9c1d215', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ce8aabcda43cae48d00296bf50fef908e0da57ec', 'committer_username': 'alexgarel', 'committer_name': 'Alex Garel', 'committer_email': None, 'commit_date': datetime.datetime(2009, 10, 26, 13, 49, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f1139a1e554caa1f153cd02639e1fb8117d3db13', 'committer_username': 'alexgarel', 'committer_name': 'Alex Garel', 'committer_email': None, 'commit_date': datetime.datetime(2009, 10, 26, 13, 49, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': '32fdcc11629d0eeb94ea72d25dc88622222d786a', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '22218224b83ddf7d006c37bea3d30d301261c98b', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '17f3631e12801fcd6297a5303d7827246518f59f', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}]",Aadarsh A,25586296,,User,,35,,22,34
1012574366,feat: Add GET paths for parents and children + fix: Update Neo4J query,"### What
- Adds GET paths `/entry/{entry}/parents` and `/entry/{entry}/children` 
- Used for finding parents and children of a node
- Changed neo4j query to disallow partial updates

### Related issue(s)
- Fixes #33 
- Fixes #40 ",True,35,https://api.github.com/repos/openfoodfacts/taxonomy-editor/pulls/35,https://github.com/openfoodfacts/taxonomy-editor/pull/35,closed,61,3,2,4,1,6,0,1,[],2022-07-30 08:27:33+00:00,2022-09-06 16:13:28+00:00,3311155.0,"38 days, 7:45:55","[{'comment_id': 961845039, 'comment_body': 'The idea here is that your reset the node before running updates ?', 'comment_created': datetime.datetime(2022, 9, 2, 16, 29, 20, tzinfo=datetime.timezone.utc), 'commenter': 'alexgarel', 'type': 'User'}, {'comment_id': 961875780, 'comment_body': ""Yess. The React App sends all the current keys of a node and the backend updates only those keys. But, if a user deletes any key, the change doesn't reflect. Hence, I clear the node and start adding all the keys sent by the React App."", 'comment_created': datetime.datetime(2022, 9, 2, 17, 16, 54, tzinfo=datetime.timezone.utc), 'commenter': 'aadarsh-ram', 'type': 'User'}, {'comment_id': 961876899, 'comment_body': ""If there's a better way to approach this, do let me know. "", 'comment_created': datetime.datetime(2022, 9, 2, 17, 18, 43, tzinfo=datetime.timezone.utc), 'commenter': 'aadarsh-ram', 'type': 'User'}, {'comment_id': 962159124, 'comment_body': 'Hi @aadarsh-ram, the way to remove a property could be to just set it to `null`\r\n\r\nSo if I\xa0want to remove the ""tags_fr"" key, I send ""tags_fr:\xa0null"".\r\n', 'comment_created': datetime.datetime(2022, 9, 3, 14, 15, 11, tzinfo=datetime.timezone.utc), 'commenter': 'alexgarel', 'type': 'User'}, {'comment_id': 963420855, 'comment_body': ""Don't you want to just remove keys where incoming data is null ?"", 'comment_created': datetime.datetime(2022, 9, 6, 8, 35, 5, tzinfo=datetime.timezone.utc), 'commenter': 'alexgarel', 'type': 'User'}, {'comment_id': 963660745, 'comment_body': '@alexgarel I added the check.', 'comment_created': datetime.datetime(2022, 9, 6, 12, 44, 31, tzinfo=datetime.timezone.utc), 'commenter': 'aadarsh-ram', 'type': 'User'}]","[{'commit_sha': '024cceda9545eacb4d402cd1a2c45b03e53ba349', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b1b84b8a005596b42bbd6befcffc4f88c2ba903a', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ee90cfcf1987a18986484eb02d6d66db0f0b7cca', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ff210cb4cca9485f4fd8d441f5f2d519d69345dd', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}]",Aadarsh A,25586296,,User,,35,,22,34
1024677346,feat: Add CRUD features for entries and root nodes,"### What
Implemented CRUD operations for:
- Properties of an entry (Editable table)
- Translations of an entry
- Children of an entry
- Root nodes

### Related issue(s)
- Fixes #34 

### Screenshot
![Properties table](https://user-images.githubusercontent.com/25586296/184314104-ea8a67bc-930d-4693-9bb7-13321e99c842.png)
![Edit translations](https://user-images.githubusercontent.com/25586296/193985779-bb975f8f-e9d3-4a39-8001-ea2a8dc26200.png)

(Other screenshots will be added)",True,41,https://api.github.com/repos/openfoodfacts/taxonomy-editor/pulls/41,https://github.com/openfoodfacts/taxonomy-editor/pull/41,closed,1078,288,12,58,0,52,0,1,[],2022-08-12 08:19:08+00:00,2022-10-05 13:39:04+00:00,4684796.0,"54 days, 5:19:56","[{'comment_id': 972258875, 'comment_body': 'what about using a snackbar: https://mui.com/material-ui/react-snackbar/#customization instead of the Dialog, I feel is a simpler way of notifying the user', 'comment_created': datetime.datetime(2022, 9, 15, 17, 30, 1, tzinfo=datetime.timezone.utc), 'commenter': 'nobeeakon', 'type': 'User'}, {'comment_id': 972260171, 'comment_body': 'no need to console log, think it is ok if leave it as `catch(()=> {})`', 'comment_created': datetime.datetime(2022, 9, 15, 17, 31, 40, tzinfo=datetime.timezone.utc), 'commenter': 'nobeeakon', 'type': 'User'}, {'comment_id': 972261818, 'comment_body': 'would it make sense to use `Promise.all` ?that way you can handle a single catch and a single success (`setOpen(true)`)', 'comment_created': datetime.datetime(2022, 9, 15, 17, 33, 37, tzinfo=datetime.timezone.utc), 'commenter': 'nobeeakon', 'type': 'User'}, {'comment_id': 972262500, 'comment_body': 'instead of navigate, better use a `Link`', 'comment_created': datetime.datetime(2022, 9, 15, 17, 34, 29, tzinfo=datetime.timezone.utc), 'commenter': 'nobeeakon', 'type': 'User'}, {'comment_id': 972262952, 'comment_body': 'why these have a different font family?', 'comment_created': datetime.datetime(2022, 9, 15, 17, 35, 2, tzinfo=datetime.timezone.utc), 'commenter': 'nobeeakon', 'type': 'User'}, {'comment_id': 972268218, 'comment_body': 'does this needs to be in a state? what about using directly as `const originalNode = node?.[0]`', 'comment_created': datetime.datetime(2022, 9, 15, 17, 41, 37, tzinfo=datetime.timezone.utc), 'commenter': 'nobeeakon', 'type': 'User'}, {'comment_id': 972270687, 'comment_body': 'please remove the `className`', 'comment_created': datetime.datetime(2022, 9, 15, 17, 44, 37, tzinfo=datetime.timezone.utc), 'commenter': 'nobeeakon', 'type': 'User'}, {'comment_id': 972271483, 'comment_body': 'maybe this component could be used directly, I mean, remove this component and pass the things to the parent', 'comment_created': datetime.datetime(2022, 9, 15, 17, 45, 32, tzinfo=datetime.timezone.utc), 'commenter': 'nobeeakon', 'type': 'User'}, {'comment_id': 972272365, 'comment_body': 'please remove `className`\n', 'comment_created': datetime.datetime(2022, 9, 15, 17, 46, 37, tzinfo=datetime.timezone.utc), 'commenter': 'nobeeakon', 'type': 'User'}, {'comment_id': 976796766, 'comment_body': ""The button text wasn't clear. I'll add it to the ThemeProvider."", 'comment_created': datetime.datetime(2022, 9, 21, 17, 15, 30, tzinfo=datetime.timezone.utc), 'commenter': 'aadarsh-ram', 'type': 'User'}, {'comment_id': 976821647, 'comment_body': ""Yep, it needs to be in a state. Since if assignment happens inside the useEffect, that variable's scope isn't global. If it was defined in a 'let', the contents will be lost after each render."", 'comment_created': datetime.datetime(2022, 9, 21, 17, 43, 20, tzinfo=datetime.timezone.utc), 'commenter': 'aadarsh-ram', 'type': 'User'}, {'comment_id': 976860563, 'comment_body': 'nit: \r\n```\r\nPromise.all(allUrlsAndData.map(([url, data]) => {\r\n    return fetch(url, {\r\n        method : \'POST\',\r\n        headers: {""Content-Type"" : ""application/json""},\r\n        body: JSON.stringify(data)\r\n    })\r\n})).then(() => {\r\n    setOpen(true);\r\n}).catch(() => {})\r\n```', 'comment_created': datetime.datetime(2022, 9, 21, 18, 29, 15, tzinfo=datetime.timezone.utc), 'commenter': 'nobeeakon', 'type': 'User'}, {'comment_id': 976861157, 'comment_body': 'Yep, changed it to a derived state.', 'comment_created': datetime.datetime(2022, 9, 21, 18, 29, 57, tzinfo=datetime.timezone.utc), 'commenter': 'aadarsh-ram', 'type': 'User'}, {'comment_id': 976916521, 'comment_body': 'nit: better to have these as `const`', 'comment_created': datetime.datetime(2022, 9, 21, 19, 35, 3, tzinfo=datetime.timezone.utc), 'commenter': 'nobeeakon', 'type': 'User'}, {'comment_id': 976917576, 'comment_body': 'nit: `mainLang_renderedTranslations.map((tagObj) => {` could be `mainLang_renderedTranslations.map(({index, tag}) => {`', 'comment_created': datetime.datetime(2022, 9, 21, 19, 36, 34, tzinfo=datetime.timezone.utc), 'commenter': 'nobeeakon', 'type': 'User'}, {'comment_id': 976918871, 'comment_body': 'nit: no need to pass the `e` in the `onClick`, can be `onClick={() => handle...}`', 'comment_created': datetime.datetime(2022, 9, 21, 19, 38, 14, tzinfo=datetime.timezone.utc), 'commenter': 'nobeeakon', 'type': 'User'}, {'comment_id': 979437304, 'comment_body': 'nit: `if(key.includes(originalNodeObject.main_language)) {...// main language} else { //not main language}`  it is usually easier to follow the `if (contidion === true) {} else {}` than `if (negate condition) {} else { // which would be the condition === true anyways}`', 'comment_created': datetime.datetime(2022, 9, 25, 17, 49, 10, tzinfo=datetime.timezone.utc), 'commenter': 'nobeeakon', 'type': 'User'}, {'comment_id': 979437405, 'comment_body': 'nit: no need to be `let`', 'comment_created': datetime.datetime(2022, 9, 25, 17, 50, 2, tzinfo=datetime.timezone.utc), 'commenter': 'nobeeakon', 'type': 'User'}, {'comment_id': 979438138, 'comment_body': ""nit: better to not mutate inside a `.map`, this could be `.forEach`. But better do no mutation at all, it can lead to bugs or unexpected behaviors. \n```\nconst newNode = {...originalNodeObject}\nconst tags = newNode[key].map(tag => { ... })\n```\nBut... I don't see where the originalNodeObject is being set again ... is that part missing and we are rellying in the mutation? "", 'comment_created': datetime.datetime(2022, 9, 25, 17, 56, 57, tzinfo=datetime.timezone.utc), 'commenter': 'nobeeakon', 'type': 'User'}, {'comment_id': 979438258, 'comment_body': 'why would we want to create new uuids? even for tags that already exist in the `originalNodeObject`?', 'comment_created': datetime.datetime(2022, 9, 25, 17, 57, 49, tzinfo=datetime.timezone.utc), 'commenter': 'nobeeakon', 'type': 'User'}, {'comment_id': 979438370, 'comment_body': 'here we are setting these two states, but both are directly related to the `originalNodeObject` could we remove these two and directly use the `originalNodeObject` and take these values as a derived state instead?', 'comment_created': datetime.datetime(2022, 9, 25, 17, 59, 16, tzinfo=datetime.timezone.utc), 'commenter': 'nobeeakon', 'type': 'User'}, {'comment_id': 979438437, 'comment_body': 'same comment on reseting the uuids', 'comment_created': datetime.datetime(2022, 9, 25, 18, 0, 4, tzinfo=datetime.timezone.utc), 'commenter': 'nobeeakon', 'type': 'User'}, {'comment_id': 979438712, 'comment_body': ""nit: let's keep the naming consistent, think in general is using camelCase"", 'comment_created': datetime.datetime(2022, 9, 25, 18, 3, 4, tzinfo=datetime.timezone.utc), 'commenter': 'nobeeakon', 'type': 'User'}, {'comment_id': 979438736, 'comment_body': ""nit: let's keep the naming consistent, think in general is using camelCase"", 'comment_created': datetime.datetime(2022, 9, 25, 18, 3, 13, tzinfo=datetime.timezone.utc), 'commenter': 'nobeeakon', 'type': 'User'}, {'comment_id': 979438831, 'comment_body': 'this could be a function?', 'comment_created': datetime.datetime(2022, 9, 25, 18, 4, tzinfo=datetime.timezone.utc), 'commenter': 'nobeeakon', 'type': 'User'}, {'comment_id': 979438958, 'comment_body': 'no need to be `let` ', 'comment_created': datetime.datetime(2022, 9, 25, 18, 4, 57, tzinfo=datetime.timezone.utc), 'commenter': 'nobeeakon', 'type': 'User'}, {'comment_id': 979439185, 'comment_body': 'nit: carefull here, you are reseting something that comes from the outside', 'comment_created': datetime.datetime(2022, 9, 25, 18, 7, 20, tzinfo=datetime.timezone.utc), 'commenter': 'nobeeakon', 'type': 'User'}, {'comment_id': 979439218, 'comment_body': 'better naming for this?', 'comment_created': datetime.datetime(2022, 9, 25, 18, 7, 55, tzinfo=datetime.timezone.utc), 'commenter': 'nobeeakon', 'type': 'User'}, {'comment_id': 979439480, 'comment_body': 'also you are using ternaries in a non standar  way, those are mainly for returning something.\n `if (validateBool && !ifDuplicateBool ) {setisValidLanguageCode(true);setBtnDisabled(false)} else {...}`', 'comment_created': datetime.datetime(2022, 9, 25, 18, 10, 18, tzinfo=datetime.timezone.utc), 'commenter': 'nobeeakon', 'type': 'User'}, {'comment_id': 979439696, 'comment_body': 'could the `btnDisabled` be `!isValidLanguageCode` ?', 'comment_created': datetime.datetime(2022, 9, 25, 18, 11, 42, tzinfo=datetime.timezone.utc), 'commenter': 'nobeeakon', 'type': 'User'}, {'comment_id': 979439923, 'comment_body': 'same comment with using custom colors. Please avoid that, if not possible to set it in the ThemeProvider, then at leas have those in a `const customColors = { }` somewhere so can be reused or easily tracked', 'comment_created': datetime.datetime(2022, 9, 25, 18, 14, 37, tzinfo=datetime.timezone.utc), 'commenter': 'nobeeakon', 'type': 'User'}, {'comment_id': 979439976, 'comment_body': 'please avoid custom colors, see comment above', 'comment_created': datetime.datetime(2022, 9, 25, 18, 15, 6, tzinfo=datetime.timezone.utc), 'commenter': 'nobeeakon', 'type': 'User'}, {'comment_id': 979440059, 'comment_body': ""better naming for `value`, that's super generic"", 'comment_created': datetime.datetime(2022, 9, 25, 18, 16, 6, tzinfo=datetime.timezone.utc), 'commenter': 'nobeeakon', 'type': 'User'}, {'comment_id': 979440130, 'comment_body': 'same comment on custom colors', 'comment_created': datetime.datetime(2022, 9, 25, 18, 16, 37, tzinfo=datetime.timezone.utc), 'commenter': 'nobeeakon', 'type': 'User'}, {'comment_id': 979440155, 'comment_body': 'same comment on custom colors', 'comment_created': datetime.datetime(2022, 9, 25, 18, 16, 55, tzinfo=datetime.timezone.utc), 'commenter': 'nobeeakon', 'type': 'User'}, {'comment_id': 979440163, 'comment_body': 'same comment on custom colors', 'comment_created': datetime.datetime(2022, 9, 25, 18, 17, tzinfo=datetime.timezone.utc), 'commenter': 'nobeeakon', 'type': 'User'}, {'comment_id': 979440227, 'comment_body': 'is it really necessary to have `ml: -1`? ', 'comment_created': datetime.datetime(2022, 9, 25, 18, 17, 27, tzinfo=datetime.timezone.utc), 'commenter': 'nobeeakon', 'type': 'User'}, {'comment_id': 979440340, 'comment_body': ""maybe better to use `charCode`?, please check https://caniuse.com/?search=event.code on the 'global' percentage"", 'comment_created': datetime.datetime(2022, 9, 25, 18, 18, 30, tzinfo=datetime.timezone.utc), 'commenter': 'nobeeakon', 'type': 'User'}, {'comment_id': 979442921, 'comment_body': 'same comment on color', 'comment_created': datetime.datetime(2022, 9, 25, 18, 43, 43, tzinfo=datetime.timezone.utc), 'commenter': 'nobeeakon', 'type': 'User'}, {'comment_id': 979443105, 'comment_body': 'here you have a Stack inside another Stack. Are those needed? I wuold expect that TextField can be side by side with a button without the need of any other additional container. Also is there any reason for that measure in the `width`?', 'comment_created': datetime.datetime(2022, 9, 25, 18, 45, 47, tzinfo=datetime.timezone.utc), 'commenter': 'nobeeakon', 'type': 'User'}, {'comment_id': 979443223, 'comment_body': 'do we really want h6 typography into this mapped elements? why not the usual default body typography?', 'comment_created': datetime.datetime(2022, 9, 25, 18, 47, 15, tzinfo=datetime.timezone.utc), 'commenter': 'nobeeakon', 'type': 'User'}, {'comment_id': 979460596, 'comment_body': ""Since I'm pushing values to it, it has been set as a variable."", 'comment_created': datetime.datetime(2022, 9, 25, 20, 59, 50, tzinfo=datetime.timezone.utc), 'commenter': 'aadarsh-ram', 'type': 'User'}, {'comment_id': 979461674, 'comment_body': '`originalNodeObject` is the result of the node fetched. It changes only when a new node is fetched from the backend API. It is possible to change it with a forEach.\r\n\r\nThe tags related to main_language and other languages are stored in two separate arrays `mainLangTags` and `otherLangTags`. ', 'comment_created': datetime.datetime(2022, 9, 25, 21, 10, 54, tzinfo=datetime.timezone.utc), 'commenter': 'aadarsh-ram', 'type': 'User'}, {'comment_id': 979461956, 'comment_body': 'The code creates new uuids only when a new node is being fetched. As `originalNodeObject` will never be altered by ""non-fetch"" code, it has wrapped inside a `useEffect`.', 'comment_created': datetime.datetime(2022, 9, 25, 21, 12, 47, tzinfo=datetime.timezone.utc), 'commenter': 'aadarsh-ram', 'type': 'User'}, {'comment_id': 979922296, 'comment_body': ""yep, no need to be `let`. In Js, `let ` is used for reseting the variable. Eg: \n```\nlet myVar = [1,2]\nmyVar = [2,3]\n```\nIn the case of `const`, is basically to define a reference to a value and not reset that reference\n```\nconst myConst = []\nmyConst = [] // this will throw an error\n```\nbut... ` myConst.push[1]` won't throw an error, as you are not reseting to another value but modifying the array itself. This only applies for `[]` or `{}`, not to numbers, booleans, etc.\n \nAlthough you can use them interchangably...\n"", 'comment_created': datetime.datetime(2022, 9, 26, 12, 0, 27, tzinfo=datetime.timezone.utc), 'commenter': 'nobeeakon', 'type': 'User'}, {'comment_id': 979943100, 'comment_body': ""yeah I see, I guess what I was trying to say is that now you have 3 different states that are actually one: the node, the main_language_tags and the other_language_tags. The two language tags are actually obtained from `originalNodeObject[key]` so I was thinking  if (sorry haven't got enough time to do a proper reseach) it would make sense to have a single source of truth instead of having multiple states that would need to be updated independently. Related to this, why use the `originalNodeObject` instead of the `nodeObject` which would be a state passed by the parent?"", 'comment_created': datetime.datetime(2022, 9, 26, 12, 14, 3, tzinfo=datetime.timezone.utc), 'commenter': 'nobeeakon', 'type': 'User'}, {'comment_id': 979945206, 'comment_body': 'anyways, if using `.map()` better to have the usual syntax `const something = arr.map( ...)`', 'comment_created': datetime.datetime(2022, 9, 26, 12, 15, 4, tzinfo=datetime.timezone.utc), 'commenter': 'nobeeakon', 'type': 'User'}, {'comment_id': 979959903, 'comment_body': ""The `useEffect` runs everytime the `originalNodeObject` changes. The first thing is when does it changes? As in `AccumulateAllComponents` it is a derived state it will change on every render of that component, which means that the `useEffect` will run on every rerender. This leads us to two solutions, 1) using a memoized value or a state or something to avoid that, 2) not using the `originalNodeObject` but the `updatedNodeObject` as it's purpose is to update it and so on (this is related to the other comment on having a single source of truth). I'd try to go with option 2. \n\n"", 'comment_created': datetime.datetime(2022, 9, 26, 12, 23, 8, tzinfo=datetime.timezone.utc), 'commenter': 'nobeeakon', 'type': 'User'}, {'comment_id': 979971375, 'comment_body': ""well yea, I mean, I was not saying that the `originalNodeObject` would be updated, but that you are mapping (`originalNodeObject[key].map((tag) => {})`) values from the `originalNodeObject` and assigning them a new `index`. I'd assume that those  already have an `index` so is it possible to use the one they already have? On the other hand I'd expect those `index` to come (and be used) from the database, if that's not the case why even bother on defining those in the client, but if that's actually the case why defining them in the client and modifying the one they should already have?"", 'comment_created': datetime.datetime(2022, 9, 26, 12, 30, 41, tzinfo=datetime.timezone.utc), 'commenter': 'nobeeakon', 'type': 'User'}, {'comment_id': 979982970, 'comment_body': ""Please check the comment above on this but, I was wondering what's the need for multiple states derived one from the other? and if it may be better to only use the `nodeObject` as it is a state and not a derived value?\nThis comment applies in the other `useEffect`s that have `originalNodeObject` as a dependency (in this file and in `ListAllEntryProperties`)."", 'comment_created': datetime.datetime(2022, 9, 26, 12, 40, 11, tzinfo=datetime.timezone.utc), 'commenter': 'nobeeakon', 'type': 'User'}, {'comment_id': 979995560, 'comment_body': ""related with other comments, but here you are defining two related values: `setRenderedTranslations` live in this component, `setNodeObject` lives in the parent. Both seem to hold the same information, why not using only the one of the parent?  I'm wondering if this here is actually duplicating the info"", 'comment_created': datetime.datetime(2022, 9, 26, 12, 52, 49, tzinfo=datetime.timezone.utc), 'commenter': 'nobeeakon', 'type': 'User'}, {'comment_id': 987389369, 'comment_body': 'please add a check `if (!nodeObject) return`\r\n', 'comment_created': datetime.datetime(2022, 10, 4, 22, 44, 27, tzinfo=datetime.timezone.utc), 'commenter': 'nobeeakon', 'type': 'User'}]","[{'commit_sha': 'd0a626abe7a0b00c2f9f3f5b86918fb9da9ae825', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5cdf10dd0854479b5a9348488afcd1aece215830', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '058877f6cd5859b17761d600c575f71dd1b381b2', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '69386eca6d5bf111b589823262433bdcdc17a758', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fa5f076a57e036d328a84811980185d5012d62f2', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '40bcc0a8f548bd8664afef3ff5197498d1a9771f', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1f181f24857f09a0b55a5df315d0e84d4f973f82', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '21babe6a1a093db31a86b674205f09bc724f496d', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '865d98b530d31204a05c1fc5c1ac4edfce650c8d', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '26d4ba66b3d09cae1dcaffdb05beeebf3818b7b1', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '87a7f4f899f09868b32651a0db1916a89bd45cd8', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '082f90febbc1d141be53590ae0e6102da9a94957', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6b936818294f13fcd41a0be37d765d9e4413f3e6', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '55b4b4e959ac06500f15181e8d577dfde54706bc', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bcc52a11f077837220b24e3ce939b372a26bd554', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4acd9978988b0d657637281745fe24f7a0a9f089', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd07ea895661d75582cbf9155f52c2a4ee59c47b3', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2355c4a6f599906fd56a6b26e003f1a8fc15b995', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '48c57a46e493717dc6ef572924d2a49d5b110b4e', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '352aaa709d63b254011241e62aeb1709571d0d16', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b6aac40497a0a678ae051ce33503887c7e02e956', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '81ce0a7feccf0e03cf572ecf399ca344dbae202d', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bd9062e0d9670b0381763012ad9afbea904080ee', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'caff9d8fd67f3d8e1deaaec27573c30fc7450569', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '971997cdb684dd6ddc8c92ffe94b9ae442db01fe', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f8807d32c80d159b54282809bad895535757953b', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e4f6c1452888dfc3298a252689d42e99d7eb6523', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bcc03852d49bde73bbec9cbe0ca9f446db394e3e', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '85c92b60f0014345a51320f14f9dbb75958ceabe', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a0bfe1136cd9eaa058c58a1cb869bcf114af739b', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '61b209ea8b655215bd3b29b24d110b86ae83637b', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '25948064a02b90fba795152bd564cd820f1ccce3', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '03efc9a01d98459da3e2e06fc8d8f71617288e36', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6981ff93b99c701b191cdb95da24c24e38d4964c', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e411183531c952414db902f0b61cee7eae4cf00a', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aeca594592bb2a7fb1f805090ce7a196f70e9bbb', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4150a8c23a6aa46151959482b398cbcec40c80a6', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '57dc9dc2d1a1dbb14b6651c09035ed85b5a74c9d', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '969559b2934e022e6de674d6dd63f6104c02574b', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3224c958153d8099c9f88907b6e61988e0950f69', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '331278c0aef2c32d0f31bcbfffd9415b4f7d8abd', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6cf85333f0efb65b39d8dd2fdb9f9e62aea4125c', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9f680c585f03f43b1abb39bc9f9f0af43f7f7a2d', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b0f26832cea3305bf81a0a8adb32df3c6e0d8318', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b935ac906df05d5a84bdf1c7558ae3e3ddfe56c9', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e94196ed6f215699b9c3856d73c216bb530c076c', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7a497239a557b6c653e1bb70d17c403cc14c2145', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'eb492c264d4e2fc7de75eb2d6051135df60d3dfa', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b9ae4dd9f17550fafda2108335b4b7592912b18b', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '30a921cf62af41b460e1fc995a3a3608746068a9', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5cc96de06b2c919457a000695759bc82b2a80e0f', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '44299262eb3b87b5f914963279f6adf276568c4c', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '382ac5f5382caeceddfde45a4b978c27df093ec5', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '16a4f68d5657cfc58eccce29f727d03b1fdac387', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '93ee59cffae6fdc786862ffa7439cbeb0919fa30', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '413531e47476ce313229470732a2c763bfcf9268', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0bd9fd50c4cacb6303140a01a22f6c67b0d949e2', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dd41e310e6b49f629012353a5ab5de3a96da1826', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}]",Aadarsh A,25586296,,User,,35,,22,34
1025729683,feat: Add home screen,"### What
- Initialize frontend using Create-React-App
- Add home screen component

### Screenshot
![home-screen](https://user-images.githubusercontent.com/25586296/184890675-20a4e47d-dd71-4032-8227-a99eac2e983f.png)",True,42,https://api.github.com/repos/openfoodfacts/taxonomy-editor/pulls/42,https://github.com/openfoodfacts/taxonomy-editor/pull/42,closed,30640,0,18,3,1,11,0,1,[],2022-08-14 05:56:21+00:00,2022-08-16 14:25:07+00:00,203326.0,"2 days, 8:28:46","[{'comment_id': 945289252, 'comment_body': 'is this needed? Also for the order, think that the ThemeProvider and CssBaseline could go outside of the Router', 'comment_created': datetime.datetime(2022, 8, 14, 13, 19, 31, tzinfo=datetime.timezone.utc), 'commenter': 'nobeeakon', 'type': 'User'}, {'comment_id': 945289634, 'comment_body': ""these two (isPending, error) could be a variable called status, so the 'status' can be a string: 'error', 'pending', etc. Even better to have a single state that contains  the data and the status and the errorMessage.. "", 'comment_created': datetime.datetime(2022, 8, 14, 13, 22, 23, tzinfo=datetime.timezone.utc), 'commenter': 'nobeeakon', 'type': 'User'}, {'comment_id': 945290003, 'comment_body': 'logs are good during development, but in general not really useful to deliver them to production', 'comment_created': datetime.datetime(2022, 8, 14, 13, 25, 9, tzinfo=datetime.timezone.utc), 'commenter': 'nobeeakon', 'type': 'User'}, {'comment_id': 945290547, 'comment_body': 'nit: If not resused, this could be part of the code, no need to have an extra component', 'comment_created': datetime.datetime(2022, 8, 14, 13, 29, 27, tzinfo=datetime.timezone.utc), 'commenter': 'nobeeakon', 'type': 'User'}, {'comment_id': 945290655, 'comment_body': ""nit: this text doesn't needs to be inside {''}"", 'comment_created': datetime.datetime(2022, 8, 14, 13, 30, 15, tzinfo=datetime.timezone.utc), 'commenter': 'nobeeakon', 'type': 'User'}, {'comment_id': 945294951, 'comment_body': '@nobeeakon I did most of my development using these variables separately. If I change it here, I would need refactor in a lot of places. I think it might be better to keep them separately instead, cause I would anyways make it into separate variables wherever I use them. Do you agree?', 'comment_created': datetime.datetime(2022, 8, 14, 14, 1, 17, tzinfo=datetime.timezone.utc), 'commenter': 'aadarsh-ram', 'type': 'User'}, {'comment_id': 945299232, 'comment_body': ""mmm well, yeah I see the point, I think that changes are somehow inevitable when reviewing. Although I think it may work this way, and not modifying it would make us move faster in the short term (less things to revisit in the next commits),  think that having everything in a single state and having a `status` instead of `booleans` makes it easier to understand the logic, for example, in this case, you may need to always set three independent states. Lets say you first have an error and then the url changes and you have a success, currently you would have an error message from a previous request and a piece of data. So, if, for example in the component you first check if there's an error and display it, you could end up always showing it. As said, I think if we keep it like this it could work, but think it is good to keep things as clean/clear as we can. Also, I guess `error` could be renamed to `errorMessage`"", 'comment_created': datetime.datetime(2022, 8, 14, 14, 32, 40, tzinfo=datetime.timezone.utc), 'commenter': 'nobeeakon', 'type': 'User'}, {'comment_id': 945300184, 'comment_body': ""Yeah, I can rename that. Also, I'm not sure that would happen since the state variables displayed are totally dependent on the hook and if the hook runs, the states get reset. Is my intuition right?"", 'comment_created': datetime.datetime(2022, 8, 14, 14, 39, 48, tzinfo=datetime.timezone.utc), 'commenter': 'aadarsh-ram', 'type': 'User'}, {'comment_id': 945300879, 'comment_body': ""I'm using that convention to add a space after the copyright logo"", 'comment_created': datetime.datetime(2022, 8, 14, 14, 45, 8, tzinfo=datetime.timezone.utc), 'commenter': 'aadarsh-ram', 'type': 'User'}, {'comment_id': 945304924, 'comment_body': 'sorry @aadarsh-ram , not sure I understood :s', 'comment_created': datetime.datetime(2022, 8, 14, 15, 17, 28, tzinfo=datetime.timezone.utc), 'commenter': 'nobeeakon', 'type': 'User'}, {'comment_id': 945319258, 'comment_body': ""> Lets say you first have an error and then the url changes and you have a success, currently you would have an error message from a previous request and a piece of data. So, if, for example in the component you first check if there's an error and display it, you could end up always showing it.\r\n\r\n@nobeeakon In this case, all the states that are stored in the useFetch hook, are reset each time whenever the hook is called. So, if a URL changes, the useFetch hook will be called and previous states will be reset. So, I'll not be showing any previous errors if any. So, having separate variables won't result in any disadvantage I think. Does this make sense?"", 'comment_created': datetime.datetime(2022, 8, 14, 17, 14, 29, tzinfo=datetime.timezone.utc), 'commenter': 'aadarsh-ram', 'type': 'User'}]","[{'commit_sha': 'ce336e8887cd823c7996fff56a430f9e52fef0a9', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd3906ae5f16c81c791597de8d1730f898560da4f', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7a2f8bbd21b48910fd1851329e46e288b7d2b6bb', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}]",Aadarsh A,25586296,,User,,35,,22,34
1025730962,feat: All entries page + Navbar,"### What
- Completed an ""All entries"" page
- Added a Navbar component

### Screenshot
![allentries-nav](https://user-images.githubusercontent.com/25586296/184895195-b5a0e2ff-d68e-412d-b504-62f935904294.png)",True,43,https://api.github.com/repos/openfoodfacts/taxonomy-editor/pulls/43,https://github.com/openfoodfacts/taxonomy-editor/pull/43,closed,264,0,3,9,0,7,0,1,[],2022-08-14 06:07:48+00:00,2022-08-16 18:04:03+00:00,215775.0,"2 days, 11:56:15","[{'comment_id': 946968279, 'comment_body': 'what about using directly a `Link`?', 'comment_created': datetime.datetime(2022, 8, 16, 15, 57, 34, tzinfo=datetime.timezone.utc), 'commenter': 'nobeeakon', 'type': 'User'}, {'comment_id': 946974630, 'comment_body': 'please avoid using className, you could try `<Box sx={{}}>`. using hardcoded direct css classes tend to be difficult to manage  at some point :(', 'comment_created': datetime.datetime(2022, 8, 16, 16, 3, 6, tzinfo=datetime.timezone.utc), 'commenter': 'nobeeakon', 'type': 'User'}, {'comment_id': 946975273, 'comment_body': ""nit: if there's no plan to include more things in this component, I think the content of `EntriesList` could live here (as is `EntriesList` is mainly `jsx` it should't be much of a problem)"", 'comment_created': datetime.datetime(2022, 8, 16, 16, 3, 45, tzinfo=datetime.timezone.utc), 'commenter': 'nobeeakon', 'type': 'User'}, {'comment_id': 946976663, 'comment_body': 'cool, think you could also use early return for the `isPending` case, as normally the main body tends to wrong but not the edit or error', 'comment_created': datetime.datetime(2022, 8, 16, 16, 5, 12, tzinfo=datetime.timezone.utc), 'commenter': 'nobeeakon', 'type': 'User'}, {'comment_id': 946979001, 'comment_body': 'maybe use `Link` instead?', 'comment_created': datetime.datetime(2022, 8, 16, 16, 7, 25, tzinfo=datetime.timezone.utc), 'commenter': 'nobeeakon', 'type': 'User'}, {'comment_id': 947084004, 'comment_body': ""nit: one of the benefits of having an status vs different states in the fetch is that it is unsured that these different statuses (and its derived boolean  counterparts `isSuccess`, `isPending`, ...) are mutually exclusive, in this case as you have already checked that it is not loading or is not error then the only remaining option is `isSuccess`, so in principle there shouldn't be a need to check in here."", 'comment_created': datetime.datetime(2022, 8, 16, 17, 51, 32, tzinfo=datetime.timezone.utc), 'commenter': 'nobeeakon', 'type': 'User'}, {'comment_id': 947088013, 'comment_body': ""Oh yeah, that makes sense. I'll remove that check."", 'comment_created': datetime.datetime(2022, 8, 16, 17, 56, 1, tzinfo=datetime.timezone.utc), 'commenter': 'aadarsh-ram', 'type': 'User'}]","[{'commit_sha': 'ce336e8887cd823c7996fff56a430f9e52fef0a9', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e9304528d5aa8092cff6a8d31f07c8465468523d', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd3906ae5f16c81c791597de8d1730f898560da4f', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7a2f8bbd21b48910fd1851329e46e288b7d2b6bb', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2798a9ee613bc699a164c0f34a9caa4ab87cb204', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ed60255f0deaf1058bb3c18f0456115c20920941', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6a83e216b56e4ee6ac486ef8f67d2bb424b917f6', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a51f14e58bb1a8cf75db9717a06b9333127c916b', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3680e04897547f5c25dc180a01bb76967981a1f6', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}]",Aadarsh A,25586296,,User,,35,,22,34
1025738950,feat: Initialize edit entry page,"### What
- Initialize all components for the ""edit entry"" page
- ListAllTranslations.jsx finished
",True,44,https://api.github.com/repos/openfoodfacts/taxonomy-editor/pulls/44,https://github.com/openfoodfacts/taxonomy-editor/pull/44,closed,242,3,11,12,0,37,0,1,[],2022-08-14 07:03:34+00:00,2022-08-29 14:40:04+00:00,1323390.0,"15 days, 7:36:30","[{'comment_id': 954964075, 'comment_body': 'nit: No need to have these comments', 'comment_created': datetime.datetime(2022, 8, 25, 13, 24, 17, tzinfo=datetime.timezone.utc), 'commenter': 'nobeeakon', 'type': 'User'}, {'comment_id': 954969478, 'comment_body': 'nit: what about making a function that gets the URL think that it is an important piece of code and may deserve to be separate from the component', 'comment_created': datetime.datetime(2022, 8, 25, 13, 28, 45, tzinfo=datetime.timezone.utc), 'commenter': 'nobeeakon', 'type': 'User'}, {'comment_id': 954972977, 'comment_body': 'no need for this comment', 'comment_created': datetime.datetime(2022, 8, 25, 13, 31, 43, tzinfo=datetime.timezone.utc), 'commenter': 'nobeeakon', 'type': 'User'}, {'comment_id': 954973836, 'comment_body': 'please avoid using css classes directly\n', 'comment_created': datetime.datetime(2022, 8, 25, 13, 32, 29, tzinfo=datetime.timezone.utc), 'commenter': 'nobeeakon', 'type': 'User'}, {'comment_id': 954974702, 'comment_body': ""don't see that the props are being used, guess they will be in a future PR?"", 'comment_created': datetime.datetime(2022, 8, 25, 13, 33, 14, tzinfo=datetime.timezone.utc), 'commenter': 'nobeeakon', 'type': 'User'}, {'comment_id': 954975339, 'comment_body': 'no need of this comments', 'comment_created': datetime.datetime(2022, 8, 25, 13, 33, 48, tzinfo=datetime.timezone.utc), 'commenter': 'nobeeakon', 'type': 'User'}, {'comment_id': 954975624, 'comment_body': 'please avoid using css classes directly', 'comment_created': datetime.datetime(2022, 8, 25, 13, 34, 3, tzinfo=datetime.timezone.utc), 'commenter': 'nobeeakon', 'type': 'User'}, {'comment_id': 954979091, 'comment_body': 'also the part of checking if is of a certain type `id.startsWith` is reapeated (at least for the case of synonym and stopword), maybe doing a function that can be reused?', 'comment_created': datetime.datetime(2022, 8, 25, 13, 37, 3, tzinfo=datetime.timezone.utc), 'commenter': 'nobeeakon', 'type': 'User'}, {'comment_id': 954981069, 'comment_body': ""could this component be integrated in the `AccumulateAllComponents`, this one is doing minimal stuff, but having it here you need to go 1 level down just to pass the state    (don't know how much this will change in the future)"", 'comment_created': datetime.datetime(2022, 8, 25, 13, 38, 45, tzinfo=datetime.timezone.utc), 'commenter': 'nobeeakon', 'type': 'User'}, {'comment_id': 954981324, 'comment_body': 'please avoid using direct css classes', 'comment_created': datetime.datetime(2022, 8, 25, 13, 39, 1, tzinfo=datetime.timezone.utc), 'commenter': 'nobeeakon', 'type': 'User'}, {'comment_id': 954982948, 'comment_body': ""could this component be integrated in the `AccumulateAllComponents`?, this one is doing minimal stuff, but having it here you need to go 1 level down just to pass the state    (don't know how much this will change in the future)"", 'comment_created': datetime.datetime(2022, 8, 25, 13, 40, 19, tzinfo=datetime.timezone.utc), 'commenter': 'nobeeakon', 'type': 'User'}, {'comment_id': 954984935, 'comment_body': 'these comments are not needed', 'comment_created': datetime.datetime(2022, 8, 25, 13, 41, 55, tzinfo=datetime.timezone.utc), 'commenter': 'nobeeakon', 'type': 'User'}, {'comment_id': 954987009, 'comment_body': 'from what happens in the parent component, this id could be header, footer, synonym and stopword, not only stopword or synonyms, if you only care about those two cases please add a check ', 'comment_created': datetime.datetime(2022, 8, 25, 13, 43, 40, tzinfo=datetime.timezone.utc), 'commenter': 'nobeeakon', 'type': 'User'}, {'comment_id': 954989208, 'comment_body': ""please somewhere add a comment like `// the id looks like: '....'` so that it is easier to understand what is in there"", 'comment_created': datetime.datetime(2022, 8, 25, 13, 45, 34, tzinfo=datetime.timezone.utc), 'commenter': 'nobeeakon', 'type': 'User'}, {'comment_id': 954992266, 'comment_body': ""please add a note that says: `// the key looks like: ' ... ' ` so to remember or know how the key looks and so it is easier to understand this logic here"", 'comment_created': datetime.datetime(2022, 8, 25, 13, 48, 1, tzinfo=datetime.timezone.utc), 'commenter': 'nobeeakon', 'type': 'User'}, {'comment_id': 954992646, 'comment_body': 'nit: please rename `lc`', 'comment_created': datetime.datetime(2022, 8, 25, 13, 48, 19, tzinfo=datetime.timezone.utc), 'commenter': 'nobeeakon', 'type': 'User'}, {'comment_id': 954994097, 'comment_body': 'please avoid using direct css classes', 'comment_created': datetime.datetime(2022, 8, 25, 13, 49, 28, tzinfo=datetime.timezone.utc), 'commenter': 'nobeeakon', 'type': 'User'}, {'comment_id': 954998201, 'comment_body': 'maybe pass use this directly in `ListTranslations`, also no need for it to be a `let`', 'comment_created': datetime.datetime(2022, 8, 25, 13, 52, 44, tzinfo=datetime.timezone.utc), 'commenter': 'nobeeakon', 'type': 'User'}, {'comment_id': 955003950, 'comment_body': 'better use `value` instead of `default`', 'comment_created': datetime.datetime(2022, 8, 25, 13, 57, 15, tzinfo=datetime.timezone.utc), 'commenter': 'nobeeakon', 'type': 'User'}, {'comment_id': 955004377, 'comment_body': 'does the TextField needs a `label`?', 'comment_created': datetime.datetime(2022, 8, 25, 13, 57, 36, tzinfo=datetime.timezone.utc), 'commenter': 'nobeeakon', 'type': 'User'}, {'comment_id': 955005326, 'comment_body': 'prefer `value` instead of `defaultValue`, ', 'comment_created': datetime.datetime(2022, 8, 25, 13, 58, 23, tzinfo=datetime.timezone.utc), 'commenter': 'nobeeakon', 'type': 'User'}, {'comment_id': 955005530, 'comment_body': 'does it needs a `label`?\n', 'comment_created': datetime.datetime(2022, 8, 25, 13, 58, 32, tzinfo=datetime.timezone.utc), 'commenter': 'nobeeakon', 'type': 'User'}, {'comment_id': 955006764, 'comment_body': 'nit: what about an early return if no `nodeObject` ?', 'comment_created': datetime.datetime(2022, 8, 25, 13, 59, 32, tzinfo=datetime.timezone.utc), 'commenter': 'nobeeakon', 'type': 'User'}, {'comment_id': 955007911, 'comment_body': ' this variable could be renamed', 'comment_created': datetime.datetime(2022, 8, 25, 14, 0, 30, tzinfo=datetime.timezone.utc), 'commenter': 'nobeeakon', 'type': 'User'}, {'comment_id': 956762074, 'comment_body': 'Yes @nobeeakon ', 'comment_created': datetime.datetime(2022, 8, 28, 18, 0, 36, tzinfo=datetime.timezone.utc), 'commenter': 'aadarsh-ram', 'type': 'User'}, {'comment_id': 956762264, 'comment_body': 'The check will be coming in future PR, where the length of properties to be rendered is validated. Currently, this will work for the header/footer case also.', 'comment_created': datetime.datetime(2022, 8, 28, 18, 2, 18, tzinfo=datetime.timezone.utc), 'commenter': 'aadarsh-ram', 'type': 'User'}, {'comment_id': 956762687, 'comment_body': ""I don't think it requires a label. Is there any specific reason to add one?"", 'comment_created': datetime.datetime(2022, 8, 28, 18, 6, 23, tzinfo=datetime.timezone.utc), 'commenter': 'aadarsh-ram', 'type': 'User'}, {'comment_id': 957340507, 'comment_body': 'mmm yeah, maybe not', 'comment_created': datetime.datetime(2022, 8, 29, 13, 31, 10, tzinfo=datetime.timezone.utc), 'commenter': 'nobeeakon', 'type': 'User'}, {'comment_id': 957343050, 'comment_body': 'what´s the need of the stack if it only cotains  one single element inside? should it be wrapping the `...map(tag, index)`?', 'comment_created': datetime.datetime(2022, 8, 29, 13, 33, 28, tzinfo=datetime.timezone.utc), 'commenter': 'nobeeakon', 'type': 'User'}, {'comment_id': 957344779, 'comment_body': 'nit: no need for the `<>` ', 'comment_created': datetime.datetime(2022, 8, 29, 13, 34, 50, tzinfo=datetime.timezone.utc), 'commenter': 'nobeeakon', 'type': 'User'}, {'comment_id': 957345270, 'comment_body': 'please avoid using css classes', 'comment_created': datetime.datetime(2022, 8, 29, 13, 35, 7, tzinfo=datetime.timezone.utc), 'commenter': 'nobeeakon', 'type': 'User'}, {'comment_id': 957345688, 'comment_body': 'please avoid using css classes directly', 'comment_created': datetime.datetime(2022, 8, 29, 13, 35, 29, tzinfo=datetime.timezone.utc), 'commenter': 'nobeeakon', 'type': 'User'}, {'comment_id': 957348760, 'comment_body': 'better to have this typography inside the `ListTranslations` component', 'comment_created': datetime.datetime(2022, 8, 29, 13, 37, 45, tzinfo=datetime.timezone.utc), 'commenter': 'nobeeakon', 'type': 'User'}, {'comment_id': 957350420, 'comment_body': 'nit: instead of having two separate checks this could be `{!!nodeObject && <>  <ListTranslations /> <ListAllProperties /> </>}`', 'comment_created': datetime.datetime(2022, 8, 29, 13, 39, 14, tzinfo=datetime.timezone.utc), 'commenter': 'nobeeakon', 'type': 'User'}, {'comment_id': 957352677, 'comment_body': 'why a `div` and not  an `h5` ?', 'comment_created': datetime.datetime(2022, 8, 29, 13, 41, tzinfo=datetime.timezone.utc), 'commenter': 'nobeeakon', 'type': 'User'}, {'comment_id': 957357325, 'comment_body': 'also, do not use `index` as `key`', 'comment_created': datetime.datetime(2022, 8, 29, 13, 44, 32, tzinfo=datetime.timezone.utc), 'commenter': 'nobeeakon', 'type': 'User'}, {'comment_id': 957373679, 'comment_body': ""@nobeeakon This will be recitified in a future PR with the use of a UUID. Currently, since any updates aren't happening in this current version, it has index as key. "", 'comment_created': datetime.datetime(2022, 8, 29, 13, 58, 10, tzinfo=datetime.timezone.utc), 'commenter': 'aadarsh-ram', 'type': 'User'}]","[{'commit_sha': 'ce336e8887cd823c7996fff56a430f9e52fef0a9', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e9304528d5aa8092cff6a8d31f07c8465468523d', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '36cf291d5c5007099a9dd048257fc76398e0057a', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5160c37f1addaaedde900b093b5fd6bc731ade29', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7fba4936e06d7294de8c02c076ed78388758fd8d', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e565ee6f5605d7832a2f2c561ec109a174640467', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2a89ccc4e3321a41cfb71dd955a854e181fe33db', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0f9d84e0c367e0c70879398f6794ce3515c9b9fc', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '811b522f38615bc552a70486fd8a980f3df30fb0', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '409fe7fbb9315b8f2bf988edb0f253dc71cc68b7', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '31826de0d7cae25ef511f776a6f0d57a0c0e9595', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e58ef144d8bbb024393fa9a801d54871248b76b8', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}]",Aadarsh A,25586296,,User,,35,,22,34
1025739796,feat: List all properties of an entry,"### What
- Completed ListAllProperties.jsx",True,45,https://api.github.com/repos/openfoodfacts/taxonomy-editor/pulls/45,https://github.com/openfoodfacts/taxonomy-editor/pull/45,closed,55,2,1,9,0,12,0,1,[],2022-08-14 07:09:15+00:00,2022-09-02 16:31:58+00:00,1675363.0,"19 days, 9:22:43","[{'comment_id': 957492843, 'comment_body': 'remove this className, it is not linked to any style. ', 'comment_created': datetime.datetime(2022, 8, 29, 15, 33, 32, tzinfo=datetime.timezone.utc), 'commenter': 'nobeeakon', 'type': 'User'}, {'comment_id': 957494237, 'comment_body': 'remove className', 'comment_created': datetime.datetime(2022, 8, 29, 15, 34, 57, tzinfo=datetime.timezone.utc), 'commenter': 'nobeeakon', 'type': 'User'}, {'comment_id': 957501001, 'comment_body': 'better use `value`', 'comment_created': datetime.datetime(2022, 8, 29, 15, 41, 27, tzinfo=datetime.timezone.utc), 'commenter': 'nobeeakon', 'type': 'User'}, {'comment_id': 957501388, 'comment_body': 'nice', 'comment_created': datetime.datetime(2022, 8, 29, 15, 41, 42, tzinfo=datetime.timezone.utc), 'commenter': 'nobeeakon', 'type': 'User'}, {'comment_id': 957503657, 'comment_body': 'nit: maybe make it more explicit that it is one case or the other? `Object.keys(rederedProp...).length === 0? <Typography> ... : Object.entries(...).map(...)', 'comment_created': datetime.datetime(2022, 8, 29, 15, 43, 43, tzinfo=datetime.timezone.utc), 'commenter': 'nobeeakon', 'type': 'User'}, {'comment_id': 957509750, 'comment_body': ""what about doing this property_name extraction only when the property name is shown? I mean, inside the  ` <Typography sx={{...}}>{property}:</Typography>`. The `renderedProperties` doesn't seems to care if it has or not the preffix `prop_`, and the issue is that in the `onChange` you need to add it again"", 'comment_created': datetime.datetime(2022, 8, 29, 15, 49, 25, tzinfo=datetime.timezone.utc), 'commenter': 'nobeeakon', 'type': 'User'}, {'comment_id': 957510397, 'comment_body': 'better use `value`', 'comment_created': datetime.datetime(2022, 8, 29, 15, 50, 2, tzinfo=datetime.timezone.utc), 'commenter': 'nobeeakon', 'type': 'User'}, {'comment_id': 957511134, 'comment_body': ""why is `float:'left'` needed? should it be `text-align`?"", 'comment_created': datetime.datetime(2022, 8, 29, 15, 50, 46, tzinfo=datetime.timezone.utc), 'commenter': 'nobeeakon', 'type': 'User'}, {'comment_id': 957513786, 'comment_body': '`ml` seems a bit big, what about something like `text-align:center`', 'comment_created': datetime.datetime(2022, 8, 29, 15, 53, 17, tzinfo=datetime.timezone.utc), 'commenter': 'nobeeakon', 'type': 'User'}, {'comment_id': 961000267, 'comment_body': '@nobeeakon I think the text-align makes it aligned to the page center, rather than to the left. But, I think it\'s best to not focus on the styling of this, since this will be replaced by a table of all properties (""material-table"") in a future PR.', 'comment_created': datetime.datetime(2022, 9, 1, 18, 55, 8, tzinfo=datetime.timezone.utc), 'commenter': 'aadarsh-ram', 'type': 'User'}, {'comment_id': 961003543, 'comment_body': '@nobeeakon `renderedProperties` does care about the prefix `prop_`. The key-value pairs that have to be rendered on the webpage should have the prefix `prop_`. Hence, the appropriate checks have been done in the start.', 'comment_created': datetime.datetime(2022, 9, 1, 18, 59, 26, tzinfo=datetime.timezone.utc), 'commenter': 'aadarsh-ram', 'type': 'User'}, {'comment_id': 961005637, 'comment_body': ""It's required for bringing two elements side-to-side, with approporiate spacing. These styles don't matter since it'll be replaced by a full-fledged table (material-table) in a future PR."", 'comment_created': datetime.datetime(2022, 9, 1, 19, 2, 2, tzinfo=datetime.timezone.utc), 'commenter': 'aadarsh-ram', 'type': 'User'}]","[{'commit_sha': 'ce336e8887cd823c7996fff56a430f9e52fef0a9', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e9304528d5aa8092cff6a8d31f07c8465468523d', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '36cf291d5c5007099a9dd048257fc76398e0057a', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '549dc7cdfbea53526ffa9ec4d43dfa54f7f90a37', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9025ab0fc82db67523ddf9ff56409a1829a9d8e1', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '047849880222a10214334b5efadf59f1913389c4', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '22bdd54fa4d5ff1c598a1c3afb2d33622447d469', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0ff58a69d3ebf9cf62f5e9f1f941e593859abbd6', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '164e6d4062eb860660a987e26672672b48a7a8be', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}]",Aadarsh A,25586296,,User,,35,,22,34
1025740461,"feat: Edit synonyms, stopwords page","### What
- Completed ListAllOtherProperties.jsx
",True,46,https://api.github.com/repos/openfoodfacts/taxonomy-editor/pulls/46,https://github.com/openfoodfacts/taxonomy-editor/pull/46,closed,154,52,6,13,0,14,0,1,[],2022-08-14 07:13:58+00:00,2022-09-05 16:00:02+00:00,1932364.0,"22 days, 8:46:04","[{'comment_id': 961960565, 'comment_body': 'what about having the conditional in here, instead of surrounding the `Typography`?', 'comment_created': datetime.datetime(2022, 9, 2, 19, 42, 15, tzinfo=datetime.timezone.utc), 'commenter': 'nobeeakon', 'type': 'User'}, {'comment_id': 961961065, 'comment_body': ""What's the benefit of having a `Stack` with one single element?"", 'comment_created': datetime.datetime(2022, 9, 2, 19, 43, 14, tzinfo=datetime.timezone.utc), 'commenter': 'nobeeakon', 'type': 'User'}, {'comment_id': 961962235, 'comment_body': 'please add an example of how the string looks like, it is so easy to forget and looking at the code it is not possible to understand that part', 'comment_created': datetime.datetime(2022, 9, 2, 19, 45, 23, tzinfo=datetime.timezone.utc), 'commenter': 'nobeeakon', 'type': 'User'}, {'comment_id': 961963722, 'comment_body': ""is there a better name we could have for this object and for the component in general? Don't have one to propose but it not completly clear what other all other properties refers to."", 'comment_created': datetime.datetime(2022, 9, 2, 19, 48, 23, tzinfo=datetime.timezone.utc), 'commenter': 'nobeeakon', 'type': 'User'}, {'comment_id': 961964367, 'comment_body': 'nit: I usually use something like `newNodeObject` , that way I get an idea of what this thing is referring to', 'comment_created': datetime.datetime(2022, 9, 2, 19, 49, 40, tzinfo=datetime.timezone.utc), 'commenter': 'nobeeakon', 'type': 'User'}, {'comment_id': 961966657, 'comment_body': 'Please rename this component, and also rename `ListAllProperties` it causes some confusion why all an all other ', 'comment_created': datetime.datetime(2022, 9, 2, 19, 54, 3, tzinfo=datetime.timezone.utc), 'commenter': 'nobeeakon', 'type': 'User'}, {'comment_id': 961970078, 'comment_body': 'nit: if you use the other type of comment: `/** ...your comment here */` it is recognized as a doc string, please replace it', 'comment_created': datetime.datetime(2022, 9, 2, 20, 0, 2, tzinfo=datetime.timezone.utc), 'commenter': 'nobeeakon', 'type': 'User'}, {'comment_id': 961971804, 'comment_body': ""mmm, maybe I'm missing something, but, it is redifining the `let languageCode` on every `key` of the `nodeObject`... it seems a bit unpredictable what would be the final value, makes me wonder if all have the same value and 1) what happens if so and 2) what happens if that's not the case ..."", 'comment_created': datetime.datetime(2022, 9, 2, 20, 3, 39, tzinfo=datetime.timezone.utc), 'commenter': 'nobeeakon', 'type': 'User'}, {'comment_id': 961977035, 'comment_body': ""what would be shown for header and footer? don't see anything related to those in the code... if not yet done please add a TODO, or remove it from the description"", 'comment_created': datetime.datetime(2022, 9, 2, 20, 12, 13, tzinfo=datetime.timezone.utc), 'commenter': 'nobeeakon', 'type': 'User'}, {'comment_id': 961982211, 'comment_body': '.... made me think it it would be useful to have a function that returns what type of thing the `id` is, `getIdType(id)` and it would return `stopword` or `header` `footer`, etc. Could live in `createURL.js`. Also could be useful to conditionally render this component in `AccumulateAllComponents.jsx`. ... stretching it even more, for example the `isEntry` of `createUrl` function could be replaced to return the `type` obtained by that function and that way eventually used in other situations besides the check for if entry or not.... ', 'comment_created': datetime.datetime(2022, 9, 2, 20, 22, 35, tzinfo=datetime.timezone.utc), 'commenter': 'nobeeakon', 'type': 'User'}, {'comment_id': 962142504, 'comment_body': ""@nobeeakon Yeah, you're right. I had actually thought about this, and wrapped the `Object.keys()` function inside a `useEffect` combined with state variables for `languageCode`. This will come in an another PR."", 'comment_created': datetime.datetime(2022, 9, 3, 11, 35, 11, tzinfo=datetime.timezone.utc), 'commenter': 'aadarsh-ram', 'type': 'User'}, {'comment_id': 962142668, 'comment_body': ""I'll add a TODO to this to remind us that this will be changed in another PR."", 'comment_created': datetime.datetime(2022, 9, 3, 11, 36, 47, tzinfo=datetime.timezone.utc), 'commenter': 'aadarsh-ram', 'type': 'User'}, {'comment_id': 962154516, 'comment_body': 'Nice, I like the function . Maybe use it in the `createURL` function? \r\nnit: please turn this into a doc string for the function, also if possible, please add a doc string in the `createURL`.', 'comment_created': datetime.datetime(2022, 9, 3, 13, 31, 4, tzinfo=datetime.timezone.utc), 'commenter': 'nobeeakon', 'type': 'User'}, {'comment_id': 962155229, 'comment_body': 'nice, thanks for the example string\n\nnit: this comment can be normal comment `//`, the benefit of having the doc string is for functions (components, etc) is that some IDEs show you the doc when using it', 'comment_created': datetime.datetime(2022, 9, 3, 13, 38, 40, tzinfo=datetime.timezone.utc), 'commenter': 'nobeeakon', 'type': 'User'}]","[{'commit_sha': 'ce336e8887cd823c7996fff56a430f9e52fef0a9', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e9304528d5aa8092cff6a8d31f07c8465468523d', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '36cf291d5c5007099a9dd048257fc76398e0057a', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '549dc7cdfbea53526ffa9ec4d43dfa54f7f90a37', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7c0d603ec00bbe229fcdd5f78f1381ddc50258c0', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '55e387e249d3ac7465d7d4e2e697ecef1bbe77dc', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '94d4a095311bc0bdeef0bde9729a0d47fb8b5712', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3750882fd22d0ceb95a8f38f6e37ab2fdb4cfe6d', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fc1d00c75b7f05eb3407f064c667e4e82c48c945', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fe8ab5c7aaab59ee775c7c1d697104b2c865e1cb', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '34dab4f6fc936a4ead06c3c282f17a6b7219e911', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ee6c0200682dd6ee8b9e665f3ce6343151c20c9b', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a7d868bfbc8ce9424e7a99bc016259845d1e722d', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}]",Aadarsh A,25586296,,User,,35,,22,34
1025741835,feat: Display parents and children of an entry,"### What
- Complete FetchAndDisplayRelations.jsx
- This won't work until PR #35 has been merged, since it contains paths essential for this component",True,47,https://api.github.com/repos/openfoodfacts/taxonomy-editor/pulls/47,https://github.com/openfoodfacts/taxonomy-editor/pull/47,closed,59,12,4,9,2,10,0,1,[],2022-08-14 07:24:07+00:00,2022-09-08 18:13:51+00:00,2198984.0,"25 days, 10:49:44","[{'comment_id': 963060804, 'comment_body': 'nit: extra `div`?', 'comment_created': datetime.datetime(2022, 9, 5, 17, 11, 31, tzinfo=datetime.timezone.utc), 'commenter': 'nobeeakon', 'type': 'User'}, {'comment_id': 963060850, 'comment_body': 'nit: extra `div`?', 'comment_created': datetime.datetime(2022, 9, 5, 17, 11, 40, tzinfo=datetime.timezone.utc), 'commenter': 'nobeeakon', 'type': 'User'}, {'comment_id': 963061722, 'comment_body': 'nice ', 'comment_created': datetime.datetime(2022, 9, 5, 17, 14, 5, tzinfo=datetime.timezone.utc), 'commenter': 'nobeeakon', 'type': 'User'}, {'comment_id': 963065683, 'comment_body': 'this component could use another name, as well as the file. Fetching the info is in this case just an implementation detail', 'comment_created': datetime.datetime(2022, 9, 5, 17, 25, 49, tzinfo=datetime.timezone.utc), 'commenter': 'nobeeakon', 'type': 'User'}, {'comment_id': 963066816, 'comment_body': 'nit: could this color not be inlined? maybe include it in the `theme` of the `ThemeProvider` or something', 'comment_created': datetime.datetime(2022, 9, 5, 17, 29, 18, tzinfo=datetime.timezone.utc), 'commenter': 'nobeeakon', 'type': 'User'}, {'comment_id': 963651995, 'comment_body': ""Ah, I don't think so since it's a react-router-dom component. So, I don't think there's a way to add it to the ThemeProvider. "", 'comment_created': datetime.datetime(2022, 9, 6, 12, 36, 10, tzinfo=datetime.timezone.utc), 'commenter': 'aadarsh-ram', 'type': 'User'}, {'comment_id': 963881906, 'comment_body': '@aadarsh-ram instead of adding a style, you might be able to add a class corresponding to a CSS\xa0rule. (I maybe wrong, guessing out of blank :-D )', 'comment_created': datetime.datetime(2022, 9, 6, 15, 51, 14, tzinfo=datetime.timezone.utc), 'commenter': 'alexgarel', 'type': 'User'}, {'comment_id': 963913843, 'comment_body': '@aadarsh-ram , please give a check to https://mui.com/material-ui/customization/color/', 'comment_created': datetime.datetime(2022, 9, 6, 16, 14, 2, tzinfo=datetime.timezone.utc), 'commenter': 'nobeeakon', 'type': 'User'}, {'comment_id': 963916323, 'comment_body': 'this is already rendering when `isError`', 'comment_created': datetime.datetime(2022, 9, 6, 16, 15, 46, tzinfo=datetime.timezone.utc), 'commenter': 'nobeeakon', 'type': 'User'}, {'comment_id': 963916779, 'comment_body': 'this is already rendering when `isPending`', 'comment_created': datetime.datetime(2022, 9, 6, 16, 16, 5, tzinfo=datetime.timezone.utc), 'commenter': 'nobeeakon', 'type': 'User'}]","[{'commit_sha': 'ce336e8887cd823c7996fff56a430f9e52fef0a9', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e9304528d5aa8092cff6a8d31f07c8465468523d', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '36cf291d5c5007099a9dd048257fc76398e0057a', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '549dc7cdfbea53526ffa9ec4d43dfa54f7f90a37', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7c0d603ec00bbe229fcdd5f78f1381ddc50258c0', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '17a49b188848c77c5116a64d04d0741cc268e930', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '19c56a6c91607441a70a47d94af69610a24a27c1', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e795f9ce3c3c9c0fd4bb7e5f1a7a9415237b7ffc', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bf72779bcb60ff3e5ae4960422553362b08c2d10', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}]",Aadarsh A,25586296,,User,,35,,22,34
1048218178,fix: Error while updating a node (backend),"### What
- Accessing key-value pairs was implemented wrongly in the update function
- Two separate variables, one for keys and a dictionary for all data of the node has been created",True,74,https://api.github.com/repos/openfoodfacts/taxonomy-editor/pulls/74,https://github.com/openfoodfacts/taxonomy-editor/pull/74,closed,4,3,1,6,0,0,0,1,[],2022-09-07 03:34:53+00:00,2022-09-07 09:38:00+00:00,21787.0,6:03:07,[],"[{'commit_sha': '024cceda9545eacb4d402cd1a2c45b03e53ba349', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b1b84b8a005596b42bbd6befcffc4f88c2ba903a', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ee90cfcf1987a18986484eb02d6d66db0f0b7cca', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ff210cb4cca9485f4fd8d441f5f2d519d69345dd', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '141a2da5a4b45d02b425dd4cb28ff52b9d300793', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5920e152d4e37449c5865fbc5953ad82609ed1b2', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}]",Aadarsh A,25586296,,User,,35,,22,34
1052513756,feat: New paths for API,"### What
- Adds GET paths for finding entry parents and children
- Adds POST path for updating entry children
- Adds POST paths for creation of new root node
- Adds DELETE path for deleting a node
- Some helper functions have also been created

### Related issue(s)
- Fixes #38 
- Fixes #75 ",True,76,https://api.github.com/repos/openfoodfacts/taxonomy-editor/pulls/76,https://github.com/openfoodfacts/taxonomy-editor/pull/76,closed,196,13,2,6,0,32,0,1,[],2022-09-11 14:10:04+00:00,2022-09-13 17:05:04+00:00,183300.0,"2 days, 2:55:00","[{'comment_id': 969267421, 'comment_body': 'Maybe we should be more robust and use: `canonicalTag = entry.split("":"", 1)[1]`\r\n\r\nFor it\'s not impossible that in the future we want to support, say `fr_BE: carotte`\r\nThe spec is clearly that the separator is "":"", not that it\'s 3 characters long.', 'comment_created': datetime.datetime(2022, 9, 13, 7, 48, 18, tzinfo=datetime.timezone.utc), 'commenter': 'alexgarel', 'type': 'User'}, {'comment_id': 969270246, 'comment_body': ""mainLanguageCode should be written main_language_code\r\nThat's common when you switch between js and python, to mix ;-)"", 'comment_created': datetime.datetime(2022, 9, 13, 7, 50, 59, tzinfo=datetime.timezone.utc), 'commenter': 'alexgarel', 'type': 'User'}, {'comment_id': 969271991, 'comment_body': 'We may better check our arguments a bit. For example that main_language_code is not None.', 'comment_created': datetime.datetime(2022, 9, 13, 7, 52, 45, tzinfo=datetime.timezone.utc), 'commenter': 'alexgarel', 'type': 'User'}, {'comment_id': 969276526, 'comment_body': 'When your query is determinist (no part that is added conditionally), you can write it directly using `""""""`.\r\n\r\n```suggestion\r\n    query = f""""""\r\n       MATCH (a)-[r:is_before]->(b:TEXT) WHERE b.id = ""__footer__"" DELETE r \r\n       RETURN a\r\n    """"""\r\n    result = session.run(query)\r\n```\r\n\r\nusing the list pattern is useful when you have a ""if"" or a ""for"" to build you query.', 'comment_created': datetime.datetime(2022, 9, 13, 7, 57, 11, tzinfo=datetime.timezone.utc), 'commenter': 'alexgarel', 'type': 'User'}, {'comment_id': 969276812, 'comment_body': 'this is true for underneath code.', 'comment_created': datetime.datetime(2022, 9, 13, 7, 57, 27, tzinfo=datetime.timezone.utc), 'commenter': 'alexgarel', 'type': 'User'}, {'comment_id': 969299507, 'comment_body': 'We should use parameters as much as possible.\r\nSo here you should build a params dict and put mainLanguageCode inside. \r\n```python\r\nquery.append(f"""""" SET n.main_language = $main_language_code """""")\r\nparams[""main_language_code""] = main_language_code\r\n```', 'comment_created': datetime.datetime(2022, 9, 13, 8, 19, 26, tzinfo=datetime.timezone.utc), 'commenter': 'alexgarel', 'type': 'User'}, {'comment_id': 969300609, 'comment_body': 'same for canonical tag below.\r\n\r\nAlso we can\'t avoid the mainLanguageCode insertion in ""n.tags_{mainLanguageCode}""', 'comment_created': datetime.datetime(2022, 9, 13, 8, 20, 27, tzinfo=datetime.timezone.utc), 'commenter': 'alexgarel', 'type': 'User'}, {'comment_id': 969302755, 'comment_body': 'maybe we should rename start_node and start_node_label to be consistent ?', 'comment_created': datetime.datetime(2022, 9, 13, 8, 22, 34, tzinfo=datetime.timezone.utc), 'commenter': 'alexgarel', 'type': 'User'}, {'comment_id': 969304958, 'comment_body': ""Here and below, I think we would gain in clarity by avoiding `a`,  `b` and `n`. (because it's a bit hard to read otherwise)\r\n\r\nWe could instead use `last_node`, `footer` and `new_node`.\r\n"", 'comment_created': datetime.datetime(2022, 9, 13, 8, 24, 35, tzinfo=datetime.timezone.utc), 'commenter': 'alexgarel', 'type': 'User'}, {'comment_id': 969306389, 'comment_body': 'Here also renaming `a` and `b` to `next_node` and `previous_node` would help :-)', 'comment_created': datetime.datetime(2022, 9, 13, 8, 25, 52, tzinfo=datetime.timezone.utc), 'commenter': 'alexgarel', 'type': 'User'}, {'comment_id': 969308927, 'comment_body': ""What is this `b.id` parameter ? We should rename it `child.id`.\r\n\r\nIt's a change required in `get_children`.\r\n\r\nIt does not seems a big deal, but really naming variables and parameters rightly is very important in the long run."", 'comment_created': datetime.datetime(2022, 9, 13, 8, 28, 4, tzinfo=datetime.timezone.utc), 'commenter': 'alexgarel', 'type': 'User'}, {'comment_id': 969311762, 'comment_body': '`incomingData` is not descriptive enough here. If I\xa0read correcly this is the list of children id, so you should rename it `children_ids` or `new_ids`.', 'comment_created': datetime.datetime(2022, 9, 13, 8, 30, 34, tzinfo=datetime.timezone.utc), 'commenter': 'alexgarel', 'type': 'User'}, {'comment_id': 969312963, 'comment_body': 'Here again, use split instead of lenght of language code to stick to the spec.\r\n```suggestion\r\n        main_language_code = child.split("","", 1)[0]\r\n```\r\n', 'comment_created': datetime.datetime(2022, 9, 13, 8, 31, 40, tzinfo=datetime.timezone.utc), 'commenter': 'alexgarel', 'type': 'User'}, {'comment_id': 969317650, 'comment_body': 'This is not clear, you are mixing deleted_children and added_children.\r\n\r\nSo really you should have this instead:\r\n```suggestion\r\n    deleted_children = set(current_children) - set(incomingData)\r\n    added_children = set(incomingData) - set(current_children)\r\n```\r\nThen your code can treat them separately.', 'comment_created': datetime.datetime(2022, 9, 13, 8, 35, 58, tzinfo=datetime.timezone.utc), 'commenter': 'alexgarel', 'type': 'User'}, {'comment_id': 969339190, 'comment_body': ""It would be better to check existence of all nodes in only one request  and then again to get non_existing nodes by comparing new ids and ids in database.\r\nIt's not blocking though, you can put a TODO if you prefer."", 'comment_created': datetime.datetime(2022, 9, 13, 8, 54, 46, tzinfo=datetime.timezone.utc), 'commenter': 'alexgarel', 'type': 'User'}, {'comment_id': 969510128, 'comment_body': 'Added a check in app.py', 'comment_created': datetime.datetime(2022, 9, 13, 11, 38, 33, tzinfo=datetime.timezone.utc), 'commenter': 'aadarsh-ram', 'type': 'User'}, {'comment_id': 969516153, 'comment_body': 'I separated the check for non-existing nodes, from the ""creation of new relationships"" part. Currently, the node creates a new code if it doesn\'t exist. After all nodes have been created, the relationships are built. Do you think I\'d need to change anything here?', 'comment_created': datetime.datetime(2022, 9, 13, 11, 45, tzinfo=datetime.timezone.utc), 'commenter': 'aadarsh-ram', 'type': 'User'}, {'comment_id': 969534263, 'comment_body': 'You should raise [HTTPError](https://fastapi.tiangolo.com/tutorial/handling-errors/#use-httpexception) with [400 code](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status#client_error_responses)', 'comment_created': datetime.datetime(2022, 9, 13, 12, 3, 8, tzinfo=datetime.timezone.utc), 'commenter': 'alexgarel', 'type': 'User'}, {'comment_id': 969535948, 'comment_body': 'BTW\xa0why didn\'t you choose to have:\r\n```suggestion\r\n@app.delete(""/nodes/{id}"")\r\nasync def deleteNode(request: Request):\r\n```', 'comment_created': datetime.datetime(2022, 9, 13, 12, 4, 48, tzinfo=datetime.timezone.utc), 'commenter': 'alexgarel', 'type': 'User'}, {'comment_id': 969540858, 'comment_body': '```suggestion\r\n    query = f""""""\r\n        MATCH (new_node:{label}) WHERE new_node.id = $id\r\n        MATCH (last_node:{end_node_label}) WHERE last_node.id = $endnodeid\r\n        MATCH (footer:TEXT) WHERE footer.id = ""__footer__""\r\n        CREATE (last_node)-[:is_before]->(new_node)\r\n        CREATE (new_node)-[:is_before]->(footer)\r\n    """"""\r\n    result = session.run(query, {""id"": entry, ""endnodeid"": end_node[\'id\']})\r\n```', 'comment_created': datetime.datetime(2022, 9, 13, 12, 9, 30, tzinfo=datetime.timezone.utc), 'commenter': 'alexgarel', 'type': 'User'}, {'comment_id': 969541380, 'comment_body': '```suggestion\r\n    query= f""""""\r\n        MATCH (new_node:{label}) WHERE new_node.id = $id\r\n        MATCH (first_node:{start_node_label}) WHERE first_node.id = $startnodeid\r\n        MATCH (header:TEXT) WHERE header.id = ""__header__""\r\n        CREATE (new_node)-[:is_before]->(first_node)\r\n        CREATE (header)-[:is_before]->(new_node)\r\n    """"""\r\n    result = session.run(query, {""id"": entry, ""startnodeid"": start_node[\'id\']})\r\n```', 'comment_created': datetime.datetime(2022, 9, 13, 12, 10, 4, tzinfo=datetime.timezone.utc), 'commenter': 'alexgarel', 'type': 'User'}, {'comment_id': 969545309, 'comment_body': '```suggestion\r\n    query = f""""""\r\n        // Find node to be deleted using node ID\r\n        MATCH (deleted_node:{label})-[:is_before]->(next_node) WHERE deleted_node.id = $id\r\n        MATCH (previous_node)-[:is_before]->(deleted_node)\r\n        // Remove\r\n        DETACH DELETE (deleted_node)\r\n        // Rebuild relationships after deletion\r\n        CREATE (previous_node)-[:is_before]->(next_node)\r\n    """""" \r\n    result = session.run(query, {""id"": entry})\r\n```', 'comment_created': datetime.datetime(2022, 9, 13, 12, 14, 2, tzinfo=datetime.timezone.utc), 'commenter': 'alexgarel', 'type': 'User'}, {'comment_id': 969547040, 'comment_body': '```suggestion\r\n        query= f"""""" \r\n            MATCH (deleted_child:ENTRY)-[rel:is_child_of]->(parent:ENTRY) \r\n            WHERE parent.id = $id AND deleted_child.id = $child\r\n            DELETE rel\r\n        """"""\r\n        session.run(query, {""id"": entry, ""child"": child})\r\n```\r\n:-)', 'comment_created': datetime.datetime(2022, 9, 13, 12, 15, 54, tzinfo=datetime.timezone.utc), 'commenter': 'alexgarel', 'type': 'User'}, {'comment_id': 969548239, 'comment_body': '```suggestion\r\n            # TODO we would prefer to add the node just after the entry it is child of\r\n            add_node_to_end(""ENTRY"", child)\r\n```', 'comment_created': datetime.datetime(2022, 9, 13, 12, 17, 5, tzinfo=datetime.timezone.utc), 'commenter': 'alexgarel', 'type': 'User'}, {'comment_id': 969556290, 'comment_body': 'We may keep it like it, my concern was about performance:\r\n\r\nYou could do:\r\n```python\r\n    # create non existing node\r\n    existing = session.run(""""""MATCH (child:ENTRY) WHERE id in $ids RETURN\xa0n.id"""""", ids=added_children)\r\n    to_create = added_children - set(existing)\r\n    for child in to_create:\r\n        main_language_code = child.split("":"", 1)[0]\r\n        create_node(""ENTRY"", child, main_language_code)\r\n    # create relations\r\n    for child in added_children:\r\n    ...\r\n```\r\n', 'comment_created': datetime.datetime(2022, 9, 13, 12, 24, 49, tzinfo=datetime.timezone.utc), 'commenter': 'alexgarel', 'type': 'User'}, {'comment_id': 969556581, 'comment_body': 'main_language_code is not defined, is it ?', 'comment_created': datetime.datetime(2022, 9, 13, 12, 25, 6, tzinfo=datetime.timezone.utc), 'commenter': 'alexgarel', 'type': 'User'}, {'comment_id': 969558900, 'comment_body': '```suggestion\r\n        main_language_code = child.split("":"", 1)[0]\r\n        # Create new relationships if it doesn\'t exist\r\n        query = f""""""\r\n            MATCH (parent:ENTRY), (new_child:ENTRY) WHERE parent.id = $id AND new_child.id = $child\r\n            MERGE (new_child)-[r:is_child_of]->(parent)\r\n        """"""\r\n        result = session.run(query, {""id"": entry, ""child"": child})\r\n```', 'comment_created': datetime.datetime(2022, 9, 13, 12, 27, 19, tzinfo=datetime.timezone.utc), 'commenter': 'alexgarel', 'type': 'User'}, {'comment_id': 969636730, 'comment_body': 'I wanted to keep the `/nodes` endpoint uniform. So, GET, POST, DELETE will have a uniform URL and performs different functions. Only the request body must be changed.', 'comment_created': datetime.datetime(2022, 9, 13, 13, 34, 40, tzinfo=datetime.timezone.utc), 'commenter': 'aadarsh-ram', 'type': 'User'}, {'comment_id': 969821373, 'comment_body': ""Yes but delete is more like editEntry than list of nodes.\r\n\r\nIn REST when you use DELETE, it's on a url representing an entry."", 'comment_created': datetime.datetime(2022, 9, 13, 16, 5, 51, tzinfo=datetime.timezone.utc), 'commenter': 'alexgarel', 'type': 'User'}, {'comment_id': 969823464, 'comment_body': 'Oh sorry so it should be \r\n```suggestion\r\n@app.delete(""/entry/{entry}"")\r\nasync def deleteNode(request: Request):\r\n```', 'comment_created': datetime.datetime(2022, 9, 13, 16, 7, 46, tzinfo=datetime.timezone.utc), 'commenter': 'alexgarel', 'type': 'User'}, {'comment_id': 969839302, 'comment_body': 'But, using `/entry/{entry}` would mean the deletion of an entry only. This endpoint would be able to delete any node in the taxonomy. So, I thought it should have the `/nodes` endpoint.', 'comment_created': datetime.datetime(2022, 9, 13, 16, 21, 38, tzinfo=datetime.timezone.utc), 'commenter': 'aadarsh-ram', 'type': 'User'}, {'comment_id': 969880103, 'comment_body': 'Ok !', 'comment_created': datetime.datetime(2022, 9, 13, 17, 3, 21, tzinfo=datetime.timezone.utc), 'commenter': 'alexgarel', 'type': 'User'}]","[{'commit_sha': 'e82e7d6584af80c7f9efd6c4769a9b3a747781d6', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '595e2c054af6c75490128ce15d2c77b05770ba9d', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '38c0a88ffa89bc1943e35c3ccad70ad4c8bd5b1a', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ecb3e59da4d9cf9a58c11e567d0a876781081c70', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aa52b379167bf4c22e1558f2cdb0b32b5112e490', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '06cedbcd90819f95193bd1c585e4b1f0bb06fdb6', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}]",Aadarsh A,25586296,,User,,35,,22,34
1058868970,build: Change parser workflow,"### What
- Parser checks workflow runs for every PR
- It must be run only when any files inside the `parser` directory is changed.",True,86,https://api.github.com/repos/openfoodfacts/taxonomy-editor/pulls/86,https://github.com/openfoodfacts/taxonomy-editor/pull/86,closed,3,1,1,2,0,0,1,1,[{'name': 'GitHub'}],2022-09-16 17:19:50+00:00,2022-09-22 07:55:03+00:00,484513.0,"5 days, 14:35:13",[],"[{'commit_sha': '3c2ec330f12eb52bd372d14500ad61e9701011e4', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a92ba9bf7661087e99b67e4f97d03eafd70419dd', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}]",Aadarsh A,25586296,,User,,35,,22,34
1065700289,feat: Search functionality - Backend,"### What
- Search functionality in backend

### Related Issue(s)
- #72 ",True,91,https://api.github.com/repos/openfoodfacts/taxonomy-editor/pulls/91,https://github.com/openfoodfacts/taxonomy-editor/pull/91,closed,123,17,7,33,0,32,0,1,[],2022-09-23 19:57:40+00:00,2022-10-04 12:20:13+00:00,922953.0,"10 days, 16:22:33","[{'comment_id': 981226406, 'comment_body': '```suggestion\r\n    # Fuzzy search has more priority, since it matches more close strings\r\n```', 'comment_created': datetime.datetime(2022, 9, 27, 13, 14, 44, tzinfo=datetime.timezone.utc), 'commenter': 'alexgarel', 'type': 'User'}, {'comment_id': 981234580, 'comment_body': ':+1:  good to have used a library for that :-)', 'comment_created': datetime.datetime(2022, 9, 27, 13, 19, 17, tzinfo=datetime.timezone.utc), 'commenter': 'alexgarel', 'type': 'User'}, {'comment_id': 981235824, 'comment_body': ""You don't need it, we do not duplicate requirements.txt package in this file, both should be installed for tests.\r\n\r\n```suggestion\r\n```"", 'comment_created': datetime.datetime(2022, 9, 27, 13, 20, 17, tzinfo=datetime.timezone.utc), 'commenter': 'alexgarel', 'type': 'User'}, {'comment_id': 981237914, 'comment_body': ""I don't think this is a good idea, 100 is already a high limit (your eyes will have hard time jumping from line to line with 140 characters)."", 'comment_created': datetime.datetime(2022, 9, 27, 13, 22, tzinfo=datetime.timezone.utc), 'commenter': 'alexgarel', 'type': 'User'}, {'comment_id': 981244654, 'comment_body': 'If you have local exception you can use the  `# noqa: E501`\r\nsee https://flake8.pycqa.org/en/latest/user/violations.html#in-line-ignoring-errors', 'comment_created': datetime.datetime(2022, 9, 27, 13, 27, 11, tzinfo=datetime.timezone.utc), 'commenter': 'alexgarel', 'type': 'User'}, {'comment_id': 981248191, 'comment_body': 'You should change sample/test-neo4j.json to reflect this change.', 'comment_created': datetime.datetime(2022, 9, 27, 13, 30, 2, tzinfo=datetime.timezone.utc), 'commenter': 'alexgarel', 'type': 'User'}, {'comment_id': 981318918, 'comment_body': 'You can do all your queries in one go by introducing an ""order by score"" and multiplying the score by a constant (here I choose 5, but we make tweak more finely):\r\n\r\n\r\n```suggestion\r\n    query = f""""""\r\n        CALL db.index.fulltext.queryNodes(""nodeSearchIds"", ""yog~"")\r\n        YIELD node, score as score_\r\n        WHERE score_ > 0.2\r\n        RETURN node.id, score_ * 5 as score\r\n        ORDER BY score DESC\r\n        UNION\r\n        CALL db.index.fulltext.queryNodes(""nodeSearchTags"",  ""yog~"")\r\n        YIELD node, score as score_\r\n        WHERE score_ > 0.2\r\n        RETURN node.id, score_ * 5 as score\r\n        ORDER BY score DESC\r\n        UNION\r\n        CALL db.index.fulltext.queryNodes(""nodeSearchIds"",  ""*yog*"")\r\n        YIELD node, score as score_\r\n        WHERE score_ > 0.2\r\n        RETURN node.id, score_ as score\r\n        ORDER BY score DESC\r\n        UNION\r\n        CALL db.index.fulltext.queryNodes(""nodeSearchTags"", ""*yog*"")\r\n        YIELD node, score as score_\r\n        WHERE score_ > 0.2\r\n        RETURN node.id, score_ as score\r\n        ORDER BY score DESC\r\n    """"""\r\n\r\n```', 'comment_created': datetime.datetime(2022, 9, 27, 14, 25, 35, tzinfo=datetime.timezone.utc), 'commenter': 'alexgarel', 'type': 'User'}, {'comment_id': 981320910, 'comment_body': 'I think we should do a special version for ""nodeSearchIds"" to instead use the id normalization function.\r\nSo that if I search ""Strawberry yogurt"", it will search ""stawberry-yogurt~"" and ""*stawberry-yogurt*""', 'comment_created': datetime.datetime(2022, 9, 27, 14, 27, 7, tzinfo=datetime.timezone.utc), 'commenter': 'alexgarel', 'type': 'User'}, {'comment_id': 981322763, 'comment_body': 'Note that we could also harvest language code while parsing.', 'comment_created': datetime.datetime(2022, 9, 27, 14, 28, 40, tzinfo=datetime.timezone.utc), 'commenter': 'alexgarel', 'type': 'User'}, {'comment_id': 981352418, 'comment_body': 'a bit more complicated than I though !\r\nHere is the real query after some test :-)\r\n\r\n```suggestion\r\n    query = """"""\r\n        CALL {\r\n                CALL db.index.fulltext.queryNodes(""nodeSearchIds"", $textqueryfuzzy)\r\n                yield node, score as score_\r\n                return node, score_ * 5 as score\r\n            UNION\r\n                CALL db.index.fulltext.queryNodes(""nodeSearchTags"",  $textqueryfuzzy)\r\n                yield node, score as score_\r\n                return node, score_ * 5 as score\r\n            UNION\r\n                CALL db.index.fulltext.queryNodes(""nodeSearchIds"",  $text_query_exact)\r\n                yield node, score as score_\r\n                return node, score_ as score\r\n            UNION\r\n                CALL db.index.fulltext.queryNodes(""nodeSearchTags"", $text_query_exact)\r\n                yield node, score as score_\r\n                return node, score_ as score \r\n        }\r\n        with node.id as node, score\r\n\r\n        RETURN node, sum(score) as score\r\n        \r\n        ORDER BY score DESC\r\n    """"""\r\n\r\n```', 'comment_created': datetime.datetime(2022, 9, 27, 14, 52, 11, tzinfo=datetime.timezone.utc), 'commenter': 'alexgarel', 'type': 'User'}, {'comment_id': 981381518, 'comment_body': 'And a snippet to test it in neo4j:\r\n```\r\nCALL {\r\n            CALL db.index.fulltext.queryNodes(""nodeSearchIds"", ""yogurt~"")\r\n            yield node, score as score_\r\n            return node, score_ * 5 as score\r\n            UNION\r\n            CALL db.index.fulltext.queryNodes(""nodeSearchTags"",  ""yogurt~"")\r\n            yield node, score as score_\r\n            return node, score_ * 5 as score\r\n            UNION\r\n            CALL db.index.fulltext.queryNodes(""nodeSearchIds"",  ""*yog*"")\r\n            yield node, score as score_\r\n            return node, score_ as score\r\n            UNION\r\n            CALL db.index.fulltext.queryNodes(""nodeSearchTags"", ""*yog*"")\r\n            yield node, score as score_\r\n            return node, score_ as score \r\n        }\r\n        with node.id as node, score\r\n\r\n        RETURN node, sum(score) as score\r\n        \r\n        ORDER BY score DESC\r\n```', 'comment_created': datetime.datetime(2022, 9, 27, 15, 15, 26, tzinfo=datetime.timezone.utc), 'commenter': 'alexgarel', 'type': 'User'}, {'comment_id': 981637241, 'comment_body': '@alexgarel this doesn\'t work for the query string ""meat"". The score is skewed towards ""en:fake-meat"", but ""en:meat"" is the closest string.', 'comment_created': datetime.datetime(2022, 9, 27, 19, 32, 6, tzinfo=datetime.timezone.utc), 'commenter': 'aadarsh-ram', 'type': 'User'}, {'comment_id': 982614895, 'comment_body': ""Yeah, but this way during creation of index, all possible language codes have been indexed. If new tags of different languages are added, we don't need to update the index."", 'comment_created': datetime.datetime(2022, 9, 28, 16, 22, 52, tzinfo=datetime.timezone.utc), 'commenter': 'aadarsh-ram', 'type': 'User'}, {'comment_id': 982674662, 'comment_body': '@alexgarel I think we need to give a little less priority to the `nodeSearchIds` index during fuzzy search, and use take the average score instead of the sum.\r\n```\r\nCALL {\r\n            CALL db.index.fulltext.queryNodes(""nodeSearchIds"", ""yogurt~"")\r\n            yield node, score as score_\r\n            return node, score_ * 3 as score\r\n            UNION\r\n            CALL db.index.fulltext.queryNodes(""nodeSearchTags"",  ""yogurt~"")\r\n            yield node, score as score_\r\n            return node, score_ * 5  as score\r\n            UNION\r\n            CALL db.index.fulltext.queryNodes(""nodeSearchIds"",  ""*yogurt*"")\r\n            yield node, score as score_\r\n            return node, score_ as score\r\n            UNION\r\n            CALL db.index.fulltext.queryNodes(""nodeSearchTags"", ""*yogurt*"")\r\n            yield node, score as score_\r\n            return node, score_ as score \r\n        }\r\n        with node.id as node, score\r\n\r\n        RETURN node, sum(score)/count(score) as score\r\n        \r\n        ORDER BY score DESC\r\n```\r\nBoth query strings ""yogurt"" and ""meat"" worked perfectly with this. Is this okay?', 'comment_created': datetime.datetime(2022, 9, 28, 17, 18, 51, tzinfo=datetime.timezone.utc), 'commenter': 'aadarsh-ram', 'type': 'User'}, {'comment_id': 982703676, 'comment_body': 'Where exactly would this query come? How much priority would we need to give for this?', 'comment_created': datetime.datetime(2022, 9, 28, 17, 51, 25, tzinfo=datetime.timezone.utc), 'commenter': 'aadarsh-ram', 'type': 'User'}, {'comment_id': 983217068, 'comment_body': 'You are completely right :-)', 'comment_created': datetime.datetime(2022, 9, 29, 8, 16, 33, tzinfo=datetime.timezone.utc), 'commenter': 'alexgarel', 'type': 'User'}, {'comment_id': 983218611, 'comment_body': 'Good to have tested more thoroughly.\r\nyour proposal this is perfectly fine to me.', 'comment_created': datetime.datetime(2022, 9, 29, 8, 17, 49, tzinfo=datetime.timezone.utc), 'commenter': 'alexgarel', 'type': 'User'}, {'comment_id': 983222447, 'comment_body': 'I just propose you to use a normalized version of text (using the same function as when you transform tag tot tag id) and build a text_id_query_exact and text_id_query_fuzzy and use as the parameter for the queryNodes on nodeSearchIds instead of text_query_exact and text_query_fuzzy\r\n\r\n', 'comment_created': datetime.datetime(2022, 9, 29, 8, 20, 15, tzinfo=datetime.timezone.utc), 'commenter': 'alexgarel', 'type': 'User'}, {'comment_id': 983223836, 'comment_body': 'It\'s because I suspect current version not to work on tags_id with multi word searches. (like ""Straweberry yogurt"")', 'comment_created': datetime.datetime(2022, 9, 29, 8, 21, 10, tzinfo=datetime.timezone.utc), 'commenter': 'alexgarel', 'type': 'User'}, {'comment_id': 983654270, 'comment_body': 'I don\'t think you need to re-normalize it ? I mean, it\'s fine here to match on ""-""', 'comment_created': datetime.datetime(2022, 9, 29, 14, 53, 5, tzinfo=datetime.timezone.utc), 'commenter': 'alexgarel', 'type': 'User'}, {'comment_id': 983655012, 'comment_body': 'you invert the names ?', 'comment_created': datetime.datetime(2022, 9, 29, 14, 53, 42, tzinfo=datetime.timezone.utc), 'commenter': 'alexgarel', 'type': 'User'}, {'comment_id': 983657158, 'comment_body': 'It\'s very strange to use an average instead of a sum here. \r\nIt means if it matches both fuzzy and exact it may have a lower score ?\r\n\r\nEventually you want to use ""max"" ?', 'comment_created': datetime.datetime(2022, 9, 29, 14, 55, 28, tzinfo=datetime.timezone.utc), 'commenter': 'alexgarel', 'type': 'User'}, {'comment_id': 983660094, 'comment_body': ""It's ok for now, but as you move to integrate the parser, we will use it as a library, and we'd better have this function there, shared with parsing code."", 'comment_created': datetime.datetime(2022, 9, 29, 14, 57, 29, tzinfo=datetime.timezone.utc), 'commenter': 'alexgarel', 'type': 'User'}, {'comment_id': 983698550, 'comment_body': '@alexgarel I\'m not sure I\'d want to use ""max"", since * searches can have more score over fuzzy searches. But, fuzzy searches would have more accuracy in terms of finding the closest match. So, an average of all the scores must be taken to figure out the best possible match.', 'comment_created': datetime.datetime(2022, 9, 29, 15, 29, 53, tzinfo=datetime.timezone.utc), 'commenter': 'aadarsh-ram', 'type': 'User'}, {'comment_id': 983700247, 'comment_body': 'Atleast in my tests, ""max"" might give the wrong closest node, and ""avg"" will find the best possible match. @alexgarel how do you think I should proceed?', 'comment_created': datetime.datetime(2022, 9, 29, 15, 31, 20, tzinfo=datetime.timezone.utc), 'commenter': 'aadarsh-ram', 'type': 'User'}, {'comment_id': 983768728, 'comment_body': 'Do you really think you have to normalize ""-"" to ""\\-"" for the search to work ?', 'comment_created': datetime.datetime(2022, 9, 29, 16, 34, 6, tzinfo=datetime.timezone.utc), 'commenter': 'alexgarel', 'type': 'User'}, {'comment_id': 983772705, 'comment_body': ""Ok, if you did test, I'm alright :-)\r\n\r\nJust add a small comment maybe to explain why you choose it ?"", 'comment_created': datetime.datetime(2022, 9, 29, 16, 37, 10, tzinfo=datetime.timezone.utc), 'commenter': 'alexgarel', 'type': 'User'}, {'comment_id': 983787083, 'comment_body': 'Hum I did a test and it seems you have to use spaces.\r\n\r\nEg this works:\r\n```\r\nCALL·db.index.fulltext.queryNodes(""nodeSearchIds"",·""*passion·fruit*"")·yield·node,·score·return·node.id,·node.tags_ids_en,·node.tags_ids_fr,·score\r\n```\r\n\r\nWhile  this does not work (with or without backslash:\r\n```\r\nCALL·db.index.fulltext.queryNodes(""nodeSearchIds"",·""*passion-fruit*"")·yield·node,·score·return·node.id,·node.tags_ids_en,·node.tags_ids_fr,·score\r\n```', 'comment_created': datetime.datetime(2022, 9, 29, 16, 47, 37, tzinfo=datetime.timezone.utc), 'commenter': 'alexgarel', 'type': 'User'}, {'comment_id': 986709264, 'comment_body': '@aadarsh-ram could you look into this before merging (sorry this was a pending comment I forgot about.', 'comment_created': datetime.datetime(2022, 10, 4, 10, 40, 12, tzinfo=datetime.timezone.utc), 'commenter': 'alexgarel', 'type': 'User'}, {'comment_id': 986750016, 'comment_body': ""@alexgarel I'll look into it"", 'comment_created': datetime.datetime(2022, 10, 4, 11, 28, 32, tzinfo=datetime.timezone.utc), 'commenter': 'aadarsh-ram', 'type': 'User'}, {'comment_id': 986776591, 'comment_body': '@aadarsh-ram I will say just add a .replace(""-"", "" "") after normalizing.', 'comment_created': datetime.datetime(2022, 10, 4, 11, 58, 40, tzinfo=datetime.timezone.utc), 'commenter': 'alexgarel', 'type': 'User'}, {'comment_id': 986794240, 'comment_body': 'Perfect.', 'comment_created': datetime.datetime(2022, 10, 4, 12, 19, 6, tzinfo=datetime.timezone.utc), 'commenter': 'alexgarel', 'type': 'User'}]","[{'commit_sha': 'e82e7d6584af80c7f9efd6c4769a9b3a747781d6', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '595e2c054af6c75490128ce15d2c77b05770ba9d', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '38c0a88ffa89bc1943e35c3ccad70ad4c8bd5b1a', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ecb3e59da4d9cf9a58c11e567d0a876781081c70', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aa52b379167bf4c22e1558f2cdb0b32b5112e490', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '06cedbcd90819f95193bd1c585e4b1f0bb06fdb6', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e3d6d5163eb9d9d6230bf61d33ccedfdf7338a16', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '610a7631b3f4672f4729ae2b9806b16107afcad2', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6ac910cf7c43e54dbeb755b5296fc305885ac199', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3fb32748bc46d11d84762553bf581db31d2b593b', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '23eba18e5c4124af644ff1395f06a29069129ef5', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '531b1e824c6a32bc342f2c7b97bf3cdad54f59c4', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4e9085e36556a973d9cf6d10f6269801645a7c2a', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd9b9eac00ba2d866362a4c951e09682b0e0595de', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bcc9a8b7abba2ee32c7c2a46c240c6463a6cbfd0', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cde0d4f45fa3bde49c602106e59cfdb4dbaf6a74', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fb85e894dede0ec9402c9fc93fe27d2cb25a8166', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dced5cbd03082124e02fb76599fb26fe8598ad4d', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a72cc6e9ffdb2abf68a4164fb5796a2bc2963777', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e266e585e3fafc9ab43c913a08422a85e46dd47d', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '64510d1ff1e5eb50b1357996a8efee444158838a', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '45f87e507a386596a8f649e77d87f7b753a45618', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c8a3346c65c03f63bea870d0b85d2408557c9c06', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '15c256c43a8cd942217181fccbd4e96c7c48065c', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '41bc497bc1f2b3dec05794ba9b9c9948b3103f55', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '137d690070ce8487748cedec262ed96760636659', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ec8f6ec9e858a31711db301ba9e412faf96ed0b6', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ccb71413bc59fef271b2f94371ddcceb330891f7', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0f011b83cbba65e47edba277d157081c5ffbebc4', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7659775352b6fbbe97aa897a61b8747983bca7ea', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ab710429820a3289bf1fab7f162c88c514a976f3', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '643c96718548357c8900ae51efe0b541e62a0d13', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '911491a1f53382d8840607b7e61d059903a077f2', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}]",Aadarsh A,25586296,,User,,35,,22,34
1066063904,feat: Search functionality - Frontend,"### What
- Search functionality in the frontend

### Screenshot
![Search](https://user-images.githubusercontent.com/25586296/192102663-7e4a3135-e2ea-4626-adac-555eeabad121.png)

### Related issue(s)
- Fixes #72
",True,92,https://api.github.com/repos/openfoodfacts/taxonomy-editor/pulls/92,https://github.com/openfoodfacts/taxonomy-editor/pull/92,closed,325,59,9,73,0,53,0,1,[],2022-09-24 14:14:02+00:00,2022-10-10 16:11:42+00:00,1389460.0,"16 days, 1:57:40","[{'comment_id': 987949768, 'comment_body': 'nit: this could be `query.length === 0`,  removing the need for an additional state', 'comment_created': datetime.datetime(2022, 10, 5, 13, 52, 10, tzinfo=datetime.timezone.utc), 'commenter': 'nobeeakon', 'type': 'User'}, {'comment_id': 987951689, 'comment_body': 'do we really want spacing to be 0?', 'comment_created': datetime.datetime(2022, 10, 5, 13, 53, 51, tzinfo=datetime.timezone.utc), 'commenter': 'nobeeakon', 'type': 'User'}, {'comment_id': 990536864, 'comment_body': 'is navigating a requirement? think it would be easier to not use the url query params for this', 'comment_created': datetime.datetime(2022, 10, 7, 22, 41, 38, tzinfo=datetime.timezone.utc), 'commenter': 'nobeeakon', 'type': 'User'}, {'comment_id': 990537545, 'comment_body': 'this could be a `<form onSubmit={(event) =>{event.preventDefault(); ... something...} }>  <TexField> ... <IconButton type=submit>  </form>`', 'comment_created': datetime.datetime(2022, 10, 7, 22, 43, 57, tzinfo=datetime.timezone.utc), 'commenter': 'nobeeakon', 'type': 'User'}, {'comment_id': 990537913, 'comment_body': 'what about receiving the data, instead of receiving a queryString', 'comment_created': datetime.datetime(2022, 10, 7, 22, 45, 12, tzinfo=datetime.timezone.utc), 'commenter': 'nobeeakon', 'type': 'User'}, {'comment_id': 990538165, 'comment_body': 'please remember to change these ids (be careful when copy pasting)', 'comment_created': datetime.datetime(2022, 10, 7, 22, 46, 9, tzinfo=datetime.timezone.utc), 'commenter': 'nobeeakon', 'type': 'User'}, {'comment_id': 990538601, 'comment_body': 'maybe a snackbar instead? this dialog is only telling that the change was done', 'comment_created': datetime.datetime(2022, 10, 7, 22, 47, 41, tzinfo=datetime.timezone.utc), 'commenter': 'nobeeakon', 'type': 'User'}, {'comment_id': 990538981, 'comment_body': 'please improve the naming of `isValidLC`,  (kind of always better to avoid abbreviations, they get difficult to remember and understand very quickly)', 'comment_created': datetime.datetime(2022, 10, 7, 22, 48, 57, tzinfo=datetime.timezone.utc), 'commenter': 'nobeeakon', 'type': 'User'}, {'comment_id': 990540504, 'comment_body': ""wonder if we could solve this in another way... will try to run the stuff locally as I'm not understanding how this will look like and be used"", 'comment_created': datetime.datetime(2022, 10, 7, 22, 54, 5, tzinfo=datetime.timezone.utc), 'commenter': 'nobeeakon', 'type': 'User'}, {'comment_id': 990540948, 'comment_body': 'please create an issue or something to have it in mind somewhere', 'comment_created': datetime.datetime(2022, 10, 7, 22, 55, 28, tzinfo=datetime.timezone.utc), 'commenter': 'nobeeakon', 'type': 'User'}, {'comment_id': 990541322, 'comment_body': 'I remember something like this in the past ... please avoid using two states that could be one ', 'comment_created': datetime.datetime(2022, 10, 7, 22, 56, 43, tzinfo=datetime.timezone.utc), 'commenter': 'nobeeakon', 'type': 'User'}, {'comment_id': 990541480, 'comment_body': 'also, the ternary is used in a non standard way', 'comment_created': datetime.datetime(2022, 10, 7, 22, 57, 8, tzinfo=datetime.timezone.utc), 'commenter': 'nobeeakon', 'type': 'User'}, {'comment_id': 990541605, 'comment_body': 'naming `isValidLanguage` ?', 'comment_created': datetime.datetime(2022, 10, 7, 22, 57, 29, tzinfo=datetime.timezone.utc), 'commenter': 'nobeeakon', 'type': 'User'}, {'comment_id': 990541836, 'comment_body': 'is `node` a string?', 'comment_created': datetime.datetime(2022, 10, 7, 22, 58, 25, tzinfo=datetime.timezone.utc), 'commenter': 'nobeeakon', 'type': 'User'}, {'comment_id': 990541885, 'comment_body': 'if so maybe use another name', 'comment_created': datetime.datetime(2022, 10, 7, 22, 58, 39, tzinfo=datetime.timezone.utc), 'commenter': 'nobeeakon', 'type': 'User'}, {'comment_id': 990542267, 'comment_body': 'this component is starting to accumulate a lot of states, wonder if we could remove some ...', 'comment_created': datetime.datetime(2022, 10, 7, 23, 0, 8, tzinfo=datetime.timezone.utc), 'commenter': 'nobeeakon', 'type': 'User'}, {'comment_id': 990602562, 'comment_body': ""Ah, since we're using a useFetch hook, it might be difficult to send the data. Conditionally calling useFetch isn't allowed in React I think."", 'comment_created': datetime.datetime(2022, 10, 8, 7, 5, 13, tzinfo=datetime.timezone.utc), 'commenter': 'aadarsh-ram', 'type': 'User'}, {'comment_id': 990650574, 'comment_body': ""why using a Grid with a single component? I'd expect the container to be able to center the error message"", 'comment_created': datetime.datetime(2022, 10, 8, 14, 48, 58, tzinfo=datetime.timezone.utc), 'commenter': 'nobeeakon', 'type': 'User'}, {'comment_id': 990650737, 'comment_body': 'hmmm, same comment here, no need for the grid if only contains a single element', 'comment_created': datetime.datetime(2022, 10, 8, 14, 50, 38, tzinfo=datetime.timezone.utc), 'commenter': 'nobeeakon', 'type': 'User'}, {'comment_id': 990650829, 'comment_body': 'nit: should `nodes` be `nodeIds`   ... posibly `nodeID` be `nodeId` (just to be consistent in the upper/lower casing)', 'comment_created': datetime.datetime(2022, 10, 8, 14, 51, 46, tzinfo=datetime.timezone.utc), 'commenter': 'nobeeakon', 'type': 'User'}, {'comment_id': 990651458, 'comment_body': 'what about something like `searchStringState` instead of `query` and `queryFetchString` instead of `queryToBeSent`, or something (guess those may not be very good suggestions, but just to make it clearer)', 'comment_created': datetime.datetime(2022, 10, 8, 14, 57, 18, tzinfo=datetime.timezone.utc), 'commenter': 'nobeeakon', 'type': 'User'}, {'comment_id': 990651541, 'comment_body': 'also, please set both to `useState("""")`, that way we don\'t have a confusion if is a string or something else', 'comment_created': datetime.datetime(2022, 10, 8, 14, 58, 20, tzinfo=datetime.timezone.utc), 'commenter': 'nobeeakon', 'type': 'User'}, {'comment_id': 990651587, 'comment_body': 'do we want to do it here? maybe better to do it in the other state (queryToBeSent)', 'comment_created': datetime.datetime(2022, 10, 8, 14, 59, 3, tzinfo=datetime.timezone.utc), 'commenter': 'nobeeakon', 'type': 'User'}, {'comment_id': 990651905, 'comment_body': 'please remove if not needed', 'comment_created': datetime.datetime(2022, 10, 8, 15, 1, 51, tzinfo=datetime.timezone.utc), 'commenter': 'nobeeakon', 'type': 'User'}, {'comment_id': 990652017, 'comment_body': ""nit: please create a `const KEYNAME_KEYCODE = 13` outside of the component. It's kind of difficult to remember this things"", 'comment_created': datetime.datetime(2022, 10, 8, 15, 3, 5, tzinfo=datetime.timezone.utc), 'commenter': 'nobeeakon', 'type': 'User'}, {'comment_id': 990652327, 'comment_body': 'please remove if not needed', 'comment_created': datetime.datetime(2022, 10, 8, 15, 5, 56, tzinfo=datetime.timezone.utc), 'commenter': 'nobeeakon', 'type': 'User'}, {'comment_id': 990652382, 'comment_body': 'please use this as file name', 'comment_created': datetime.datetime(2022, 10, 8, 15, 6, 44, tzinfo=datetime.timezone.utc), 'commenter': 'nobeeakon', 'type': 'User'}, {'comment_id': 990652483, 'comment_body': 'useFetch(`${API_URL}search?query=${encodeURI(query)}`);', 'comment_created': datetime.datetime(2022, 10, 8, 15, 7, 56, tzinfo=datetime.timezone.utc), 'commenter': 'nobeeakon', 'type': 'User'}, {'comment_id': 990652578, 'comment_body': 'if this is not ready I think we can just not include it in the PR', 'comment_created': datetime.datetime(2022, 10, 8, 15, 9, 7, tzinfo=datetime.timezone.utc), 'commenter': 'nobeeakon', 'type': 'User'}, {'comment_id': 990653067, 'comment_body': 'could we use a `Link` instead?\nalso, please avoid generic names as `handleClick`', 'comment_created': datetime.datetime(2022, 10, 8, 15, 12, 38, tzinfo=datetime.timezone.utc), 'commenter': 'nobeeakon', 'type': 'User'}, {'comment_id': 990653374, 'comment_body': 'setIsValidLanguageCode(ISO6391.validate(e.target.value))', 'comment_created': datetime.datetime(2022, 10, 8, 15, 15, 16, tzinfo=datetime.timezone.utc), 'commenter': 'nobeeakon', 'type': 'User'}, {'comment_id': 990653571, 'comment_body': 'if possible replace with `Link` , and lets avoid generic naming such as `handleClick`', 'comment_created': datetime.datetime(2022, 10, 8, 15, 16, 44, tzinfo=datetime.timezone.utc), 'commenter': 'nobeeakon', 'type': 'User'}, {'comment_id': 990653762, 'comment_body': ""Oh, I see that it is kind of for ui consistency as also used in the success. Amm, may be ok, although I'd try anyways to center without the grid"", 'comment_created': datetime.datetime(2022, 10, 8, 15, 18, 20, tzinfo=datetime.timezone.utc), 'commenter': 'nobeeakon', 'type': 'User'}, {'comment_id': 990654102, 'comment_body': 'could we use integer?', 'comment_created': datetime.datetime(2022, 10, 8, 15, 22, 10, tzinfo=datetime.timezone.utc), 'commenter': 'nobeeakon', 'type': 'User'}, {'comment_id': 990654761, 'comment_body': ""ok, let's keep it like this for now"", 'comment_created': datetime.datetime(2022, 10, 8, 15, 28, 40, tzinfo=datetime.timezone.utc), 'commenter': 'nobeeakon', 'type': 'User'}, {'comment_id': 990680506, 'comment_body': ""Yes, since I'd like to disable search if the textbox is empty or has only spaces."", 'comment_created': datetime.datetime(2022, 10, 8, 19, 41, 6, tzinfo=datetime.timezone.utc), 'commenter': 'aadarsh-ram', 'type': 'User'}, {'comment_id': 990681061, 'comment_body': ""Ah, it technically isn't part of the MVP. So, a comment has been mentioned and an issue will be opened for the same to be implemented in the future. "", 'comment_created': datetime.datetime(2022, 10, 8, 19, 48, 12, tzinfo=datetime.timezone.utc), 'commenter': 'aadarsh-ram', 'type': 'User'}, {'comment_id': 990690574, 'comment_body': ""I'll create it ASAP."", 'comment_created': datetime.datetime(2022, 10, 8, 20, 11, 38, tzinfo=datetime.timezone.utc), 'commenter': 'aadarsh-ram', 'type': 'User'}, {'comment_id': 990690656, 'comment_body': 'Changed it to above comment and named state as `isValidLanguageCode`', 'comment_created': datetime.datetime(2022, 10, 8, 20, 12, 12, tzinfo=datetime.timezone.utc), 'commenter': 'aadarsh-ram', 'type': 'User'}, {'comment_id': 990690747, 'comment_body': 'I have tried to remove as much of states as possible. If any other edits are possible, please do let me know.', 'comment_created': datetime.datetime(2022, 10, 8, 20, 13, 23, tzinfo=datetime.timezone.utc), 'commenter': 'aadarsh-ram', 'type': 'User'}, {'comment_id': 990690792, 'comment_body': 'Ah yep, I used the Grid to center the components and the error messages. The `Container` component has been removed.', 'comment_created': datetime.datetime(2022, 10, 8, 20, 14, 7, tzinfo=datetime.timezone.utc), 'commenter': 'aadarsh-ram', 'type': 'User'}, {'comment_id': 990690857, 'comment_body': 'Yep, the above naming scheme has been implemented.', 'comment_created': datetime.datetime(2022, 10, 8, 20, 15, tzinfo=datetime.timezone.utc), 'commenter': 'aadarsh-ram', 'type': 'User'}, {'comment_id': 990690911, 'comment_body': 'Oh okay. The states have been renamed as given in the comment, and null has been changed to empty string.', 'comment_created': datetime.datetime(2022, 10, 8, 20, 15, 34, tzinfo=datetime.timezone.utc), 'commenter': 'aadarsh-ram', 'type': 'User'}, {'comment_id': 990690956, 'comment_body': 'I removed it 👍 ', 'comment_created': datetime.datetime(2022, 10, 8, 20, 15, 53, tzinfo=datetime.timezone.utc), 'commenter': 'aadarsh-ram', 'type': 'User'}, {'comment_id': 990691187, 'comment_body': 'Ah okay, I added this constant in `constants.js` and referenced it everywhere accordingly.', 'comment_created': datetime.datetime(2022, 10, 8, 20, 18, 29, tzinfo=datetime.timezone.utc), 'commenter': 'aadarsh-ram', 'type': 'User'}, {'comment_id': 990691244, 'comment_body': 'Yep, changed the filename.', 'comment_created': datetime.datetime(2022, 10, 8, 20, 18, 50, tzinfo=datetime.timezone.utc), 'commenter': 'aadarsh-ram', 'type': 'User'}, {'comment_id': 990691356, 'comment_body': 'Added `Link` type to the IconButton. ', 'comment_created': datetime.datetime(2022, 10, 8, 20, 19, 41, tzinfo=datetime.timezone.utc), 'commenter': 'aadarsh-ram', 'type': 'User'}, {'comment_id': 990691391, 'comment_body': 'I removed the handleClick function, in favour of `Link`.', 'comment_created': datetime.datetime(2022, 10, 8, 20, 20, 28, tzinfo=datetime.timezone.utc), 'commenter': 'aadarsh-ram', 'type': 'User'}, {'comment_id': 990691464, 'comment_body': ""Yep, I tried my best to keep everything as integers. Only one textbox should have a decimal margin, since it didn't align properly in my dialog component."", 'comment_created': datetime.datetime(2022, 10, 8, 20, 21, 31, tzinfo=datetime.timezone.utc), 'commenter': 'aadarsh-ram', 'type': 'User'}, {'comment_id': 990788523, 'comment_body': ""is search for a single word only? if so this is ok, otherwise we'd need to do it in the `setQueryToBeSent(query.trim())`"", 'comment_created': datetime.datetime(2022, 10, 9, 13, 23, 12, tzinfo=datetime.timezone.utc), 'commenter': 'nobeeakon', 'type': 'User'}, {'comment_id': 990789001, 'comment_body': 'if not part of MVP I think is ok to remove it from the code and add an issue. Better not have things that are to be implemented but are shipped.', 'comment_created': datetime.datetime(2022, 10, 9, 13, 27, 19, tzinfo=datetime.timezone.utc), 'commenter': 'nobeeakon', 'type': 'User'}, {'comment_id': 990789867, 'comment_body': '@nobeeakon This code handles the addition of root nodes which is an ""entry"" in a taxonomy, which is an important feature and is part of the MVP. Hence, I think it shouldn\'t be removed since this feature is a vital part of the editor.\n\nIn the future, this same dialog box must help in adding stopwords and synonyms (another  type of node) in the Taxonomy. So, a comment for that and an issue will be created.', 'comment_created': datetime.datetime(2022, 10, 9, 13, 35, 24, tzinfo=datetime.timezone.utc), 'commenter': 'aadarsh-ram', 'type': 'User'}, {'comment_id': 990798837, 'comment_body': '@nobeeakon I changed it as per above comment.', 'comment_created': datetime.datetime(2022, 10, 9, 14, 53, 7, tzinfo=datetime.timezone.utc), 'commenter': 'aadarsh-ram', 'type': 'User'}]","[{'commit_sha': 'd0a626abe7a0b00c2f9f3f5b86918fb9da9ae825', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5cdf10dd0854479b5a9348488afcd1aece215830', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '058877f6cd5859b17761d600c575f71dd1b381b2', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '69386eca6d5bf111b589823262433bdcdc17a758', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fa5f076a57e036d328a84811980185d5012d62f2', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '40bcc0a8f548bd8664afef3ff5197498d1a9771f', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1f181f24857f09a0b55a5df315d0e84d4f973f82', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '21babe6a1a093db31a86b674205f09bc724f496d', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '865d98b530d31204a05c1fc5c1ac4edfce650c8d', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '26d4ba66b3d09cae1dcaffdb05beeebf3818b7b1', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '87a7f4f899f09868b32651a0db1916a89bd45cd8', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '082f90febbc1d141be53590ae0e6102da9a94957', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6b936818294f13fcd41a0be37d765d9e4413f3e6', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '55b4b4e959ac06500f15181e8d577dfde54706bc', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bcc52a11f077837220b24e3ce939b372a26bd554', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4acd9978988b0d657637281745fe24f7a0a9f089', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd07ea895661d75582cbf9155f52c2a4ee59c47b3', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2355c4a6f599906fd56a6b26e003f1a8fc15b995', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '48c57a46e493717dc6ef572924d2a49d5b110b4e', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '352aaa709d63b254011241e62aeb1709571d0d16', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b6aac40497a0a678ae051ce33503887c7e02e956', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '81ce0a7feccf0e03cf572ecf399ca344dbae202d', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bd9062e0d9670b0381763012ad9afbea904080ee', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'caff9d8fd67f3d8e1deaaec27573c30fc7450569', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '971997cdb684dd6ddc8c92ffe94b9ae442db01fe', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f8807d32c80d159b54282809bad895535757953b', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e4f6c1452888dfc3298a252689d42e99d7eb6523', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bcc03852d49bde73bbec9cbe0ca9f446db394e3e', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '85c92b60f0014345a51320f14f9dbb75958ceabe', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a0bfe1136cd9eaa058c58a1cb869bcf114af739b', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '61b209ea8b655215bd3b29b24d110b86ae83637b', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '25948064a02b90fba795152bd564cd820f1ccce3', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '03efc9a01d98459da3e2e06fc8d8f71617288e36', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6981ff93b99c701b191cdb95da24c24e38d4964c', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e411183531c952414db902f0b61cee7eae4cf00a', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aeca594592bb2a7fb1f805090ce7a196f70e9bbb', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4150a8c23a6aa46151959482b398cbcec40c80a6', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '57dc9dc2d1a1dbb14b6651c09035ed85b5a74c9d', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '969559b2934e022e6de674d6dd63f6104c02574b', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3224c958153d8099c9f88907b6e61988e0950f69', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '331278c0aef2c32d0f31bcbfffd9415b4f7d8abd', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6cf85333f0efb65b39d8dd2fdb9f9e62aea4125c', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9f680c585f03f43b1abb39bc9f9f0af43f7f7a2d', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b0f26832cea3305bf81a0a8adb32df3c6e0d8318', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b935ac906df05d5a84bdf1c7558ae3e3ddfe56c9', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e94196ed6f215699b9c3856d73c216bb530c076c', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7a497239a557b6c653e1bb70d17c403cc14c2145', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'eb492c264d4e2fc7de75eb2d6051135df60d3dfa', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6d764dbd67ff544ace89f9582e698ae9a2f326f5', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4bfd0083b81cc55504d8432e6f99a3964d03dbba', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e1231cf957a7e3293fbd5fbdf18551d1c78e8bce', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '62ad5436d43789347689504025d2a932a5b374aa', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b9ae4dd9f17550fafda2108335b4b7592912b18b', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '30a921cf62af41b460e1fc995a3a3608746068a9', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '45ffdb340d3894d495f4cf8eeae84e7f64f41c50', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5cc96de06b2c919457a000695759bc82b2a80e0f', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '44299262eb3b87b5f914963279f6adf276568c4c', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '382ac5f5382caeceddfde45a4b978c27df093ec5', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '16a4f68d5657cfc58eccce29f727d03b1fdac387', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '93ee59cffae6fdc786862ffa7439cbeb0919fa30', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '413531e47476ce313229470732a2c763bfcf9268', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0bd9fd50c4cacb6303140a01a22f6c67b0d949e2', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dd41e310e6b49f629012353a5ab5de3a96da1826', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0cb09b3f7ddaf53c1623343afe2e0a096f961247', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '230712d2cb5827ea889fea53d446192cac67d672', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b4bd13ba26517f1e0368d505cf4580a433e15924', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ad006be33617300adf93d9c20cc74c07e9eabfc3', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0a3a273869dfc6fa2c1687afe99a7cbbec2c2e3f', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8963b4dbda38fae1e53607e38184216f214f802e', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '260e2665d2f358c1587b501b8ee9ee6bbd66458c', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7a8cded75000292d44e4f73aa700a96012b20b6f', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '99330955518a06a3e5b24d852f4e52cfbfd80a2b', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ec38a09d0cc66fb950910e26d5fe621089878288', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}]",Aadarsh A,25586296,,User,,35,,22,34
1068456150,fix: Using Neo4J transactions,"### What
- Using transactions for requests in order to handle them concurrently.

### Related bug(s)
- Fixes #78
",True,93,https://api.github.com/repos/openfoodfacts/taxonomy-editor/pulls/93,https://github.com/openfoodfacts/taxonomy-editor/pull/93,closed,74,36,4,34,2,8,0,1,[],2022-09-27 11:08:14+00:00,2022-10-04 12:26:55+00:00,609521.0,"7 days, 1:18:41","[{'comment_id': 981256974, 'comment_body': ""Put it in it's own file (with initialize_db and shutdown_db. So that you don't have cross import problems.\r\n\r\nMaybe graph_db.py"", 'comment_created': datetime.datetime(2022, 9, 27, 13, 37, 11, tzinfo=datetime.timezone.utc), 'commenter': 'alexgarel', 'type': 'User'}, {'comment_id': 981258717, 'comment_body': 'give at better name :-) (I know you are still experimenting) like current_transaction', 'comment_created': datetime.datetime(2022, 9, 27, 13, 38, 36, tzinfo=datetime.timezone.utc), 'commenter': 'alexgarel', 'type': 'User'}, {'comment_id': 981260146, 'comment_body': 'Instead of passing txn around, if you put it in a graph_db.py file you can import it in entries.py and use it there. But beware as it is a global, you should not use:\r\n```python\r\nfrom .graph_db import current_transaction\r\n...\r\ncurrent_transaction.do_something\r\n```\r\nBecause you would miss updates.\r\n\r\nYou have to instead keep the namespace:\r\n\r\n```python\r\nfrom . import graph_db\r\n...\r\ngraph_db.current_transaction.do_something\r\n```', 'comment_created': datetime.datetime(2022, 9, 27, 13, 39, 49, tzinfo=datetime.timezone.utc), 'commenter': 'alexgarel', 'type': 'User'}, {'comment_id': 981265936, 'comment_body': ""As said above don't put it neither in entries nor in api, put it in it's own module.\r\n"", 'comment_created': datetime.datetime(2022, 9, 27, 13, 44, 24, tzinfo=datetime.timezone.utc), 'commenter': 'alexgarel', 'type': 'User'}, {'comment_id': 981273090, 'comment_body': 'You really have to use the context manager ! because here, you never end the transaction !\r\nSee https://neo4j.com/docs/api/python-driver/current/api.html#neo4j.Transaction\r\n\r\n```suggestion\r\n        with session.begin_transaction() as _txn:\r\n            # make it current transaction\r\n            txn = _txn\r\n            response = await call_next(request)\r\n        txn = None\r\n        return response\r\n```', 'comment_created': datetime.datetime(2022, 9, 27, 13, 49, 36, tzinfo=datetime.timezone.utc), 'commenter': 'alexgarel', 'type': 'User'}, {'comment_id': 983234901, 'comment_body': 'If you\'re interested we can make this part a context manager in graph_db (so that all code managing db is in there):\r\n\r\n```python\r\n@contextlib.contextmanager\r\ndef TransactionCtx():\r\n    """"""Transaction context will set global transaction txn for the code in context\r\n\r\n    transaction is automatically rollback if an exception occurs within the context\r\n    """"""\r\n    global txn\r\n    with driver.session() as session\r\n        with session.begin_transaction() as _txn:\r\n            txn = _txn\r\n            yield txn\r\n    txn = None\r\n```\r\n\r\nand here:\r\n\r\n```python\r\n@app.middleware(""http"")\r\nasync def initialize_neo4j_transactions(request: Request, call_next):\r\n    with graph_db.TransactionCtx():\r\n        response = await call_next(request)\r\n```', 'comment_created': datetime.datetime(2022, 9, 29, 8, 28, 41, tzinfo=datetime.timezone.utc), 'commenter': 'alexgarel', 'type': 'User'}, {'comment_id': 983240438, 'comment_body': 'Ok, now the next step (because we want to support concurrency) is to make it compatible with concurrency (in an async context).\r\n\r\nFor this, you will need a [context variable](https://docs.python.org/3/library/contextvars.html)\r\n\r\nIt\'s better to encapsulate ""getting the transaction"" in a function. So that in entries.py you have:\r\n`transaction().run(....)`\r\n(note that since you will use a function, you can now import the function directly: `from graph_bd import transaction()`)\r\nThis function should return current value of global context variable, or raise if it\'s not set (or set to None)', 'comment_created': datetime.datetime(2022, 9, 29, 8, 34, 11, tzinfo=datetime.timezone.utc), 'commenter': 'alexgarel', 'type': 'User'}, {'comment_id': 983664138, 'comment_body': ""It's better to use a RuntimeError here (it's not a value error).\r\n\r\nBut I would advise: create your own TransactionMissingError (in exceptions.py) and use it. It's always better to have custom exception.\r\nIt may inherits from RuntimeError."", 'comment_created': datetime.datetime(2022, 9, 29, 15, 0, 43, tzinfo=datetime.timezone.utc), 'commenter': 'alexgarel', 'type': 'User'}]","[{'commit_sha': 'e82e7d6584af80c7f9efd6c4769a9b3a747781d6', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '595e2c054af6c75490128ce15d2c77b05770ba9d', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '38c0a88ffa89bc1943e35c3ccad70ad4c8bd5b1a', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ecb3e59da4d9cf9a58c11e567d0a876781081c70', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aa52b379167bf4c22e1558f2cdb0b32b5112e490', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '06cedbcd90819f95193bd1c585e4b1f0bb06fdb6', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e3d6d5163eb9d9d6230bf61d33ccedfdf7338a16', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '610a7631b3f4672f4729ae2b9806b16107afcad2', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6ac910cf7c43e54dbeb755b5296fc305885ac199', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3fb32748bc46d11d84762553bf581db31d2b593b', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '23eba18e5c4124af644ff1395f06a29069129ef5', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '531b1e824c6a32bc342f2c7b97bf3cdad54f59c4', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4e9085e36556a973d9cf6d10f6269801645a7c2a', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd9b9eac00ba2d866362a4c951e09682b0e0595de', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bcc9a8b7abba2ee32c7c2a46c240c6463a6cbfd0', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cde0d4f45fa3bde49c602106e59cfdb4dbaf6a74', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fb85e894dede0ec9402c9fc93fe27d2cb25a8166', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dced5cbd03082124e02fb76599fb26fe8598ad4d', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a72cc6e9ffdb2abf68a4164fb5796a2bc2963777', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e266e585e3fafc9ab43c913a08422a85e46dd47d', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '64510d1ff1e5eb50b1357996a8efee444158838a', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '45f87e507a386596a8f649e77d87f7b753a45618', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '09b8d538a14a1526259909d830b361f72d8ab40f', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6454c614fb3c69f30871cbfcc53c2cd3e155d09f', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c8a3346c65c03f63bea870d0b85d2408557c9c06', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '15c256c43a8cd942217181fccbd4e96c7c48065c', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '41bc497bc1f2b3dec05794ba9b9c9948b3103f55', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '137d690070ce8487748cedec262ed96760636659', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aab8e3af667940246493c53e09cb9a89ee84c40f', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '889650aafb1de785c56c6c5cda8a68c494dc999f', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ec8f6ec9e858a31711db301ba9e412faf96ed0b6', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ccb71413bc59fef271b2f94371ddcceb330891f7', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '51c016245c833ec7536119b85201307c9ad93cac', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '448b39e4950cad931e5ccd2115a9846af12626d9', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}]",Aadarsh A,25586296,,User,,35,,22,34
1077263269,fix: Change session to transactions,"### What
- Used session.run() instead of get_current_transaction().run()
",True,97,https://api.github.com/repos/openfoodfacts/taxonomy-editor/pulls/97,https://github.com/openfoodfacts/taxonomy-editor/pull/97,closed,1,1,1,1,0,0,0,1,[],2022-10-05 12:20:52+00:00,2022-10-06 16:53:39+00:00,102767.0,"1 day, 4:32:47",[],"[{'commit_sha': '8d07bb1f501202b9aefca9050d5d0b9ccaa141e0', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}]",Aadarsh A,25586296,,User,,35,,22,34
1077629778,fix: Add UUIDs after fetching node,"### What
- The frontend requires a unique key for displaying each tag of a stopword or entry
- The frontend generates a unique key for each node object after fetch",True,100,https://api.github.com/repos/openfoodfacts/taxonomy-editor/pulls/100,https://github.com/openfoodfacts/taxonomy-editor/pull/100,closed,33,205,7,3,1,5,0,1,[],2022-10-05 17:19:35+00:00,2022-10-05 20:42:37+00:00,12182.0,3:23:02,"[{'comment_id': 988206685, 'comment_body': 'nit: please remove the console.log', 'comment_created': datetime.datetime(2022, 10, 5, 18, 9, 49, tzinfo=datetime.timezone.utc), 'commenter': 'nobeeakon', 'type': 'User'}, {'comment_id': 988207163, 'comment_body': 'should it do something if `!not` ? like setting to `null` or something?', 'comment_created': datetime.datetime(2022, 10, 5, 18, 10, 31, tzinfo=datetime.timezone.utc), 'commenter': 'nobeeakon', 'type': 'User'}, {'comment_id': 988208644, 'comment_body': 'nice naming', 'comment_created': datetime.datetime(2022, 10, 5, 18, 12, 20, tzinfo=datetime.timezone.utc), 'commenter': 'nobeeakon', 'type': 'User'}, {'comment_id': 988246713, 'comment_body': ""I don't think it's necessary since the initial state is already null. Only when the node info is populated, we need to update the state."", 'comment_created': datetime.datetime(2022, 10, 5, 18, 58, 11, tzinfo=datetime.timezone.utc), 'commenter': 'aadarsh-ram', 'type': 'User'}, {'comment_id': 988266068, 'comment_body': 'what about if url changes and data is renewed?', 'comment_created': datetime.datetime(2022, 10, 5, 19, 22, 34, tzinfo=datetime.timezone.utc), 'commenter': 'nobeeakon', 'type': 'User'}]","[{'commit_sha': '637a3998db0e35578d6f7fd01114627b3789667f', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e012694cb6f57d5f73f737cffb348c34f02190d4', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'da1bb6dbbd5c2613984abdeb97d5f3efecd6709b', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}]",Aadarsh A,25586296,,User,,35,,22,34
1079499542,fix: Add multiple labels in backend,"### What
- Add multiple labels (to support branch and taxonomy labelling) in parser
- Add multiple labels in unparser and tests
- Changed API endpoints accordingly to support different branches and taxonomies
- Wrapped entries.py in a class for easier use
- Added import functionality
- Added export functionality

### Related issue(s)
- Fixes #69 
",True,101,https://api.github.com/repos/openfoodfacts/taxonomy-editor/pulls/101,https://github.com/openfoodfacts/taxonomy-editor/pull/101,closed,1144,532,19,28,1,23,6,1,"[{'name': 'dependencies'}, {'name': 'parser'}, {'name': 'backend'}, {'name': '🐳 Docker'}, {'name': 'api'}, {'name': 'tests'}]",2022-10-06 19:24:37+00:00,2022-11-07 13:31:47+00:00,2743630.0,"31 days, 18:07:10","[{'comment_id': 990270390, 'comment_body': ""I think it's better not to hardcode that the taxonomy name is derived from the filename.\r\n\r\nI would better have it as a parameter, even if in this case we compute it from filename.\r\n\r\nThink that the Parser class can be used with the command line, but you will soon use it from the backend.\r\n\r\nSo I\xa0propose to make it a third parameter, and here use:\r\n```suggestion\r\n    taxonomy_name = Path(filename).stem\r\n    parse(filename, taxonomy_name, branch_name)\r\n```"", 'comment_created': datetime.datetime(2022, 10, 7, 16, 23, 23, tzinfo=datetime.timezone.utc), 'commenter': 'alexgarel', 'type': 'User'}, {'comment_id': 990277604, 'comment_body': ""I would like to avoid code duplication.\r\n\r\nBackend must be able to use parser has a library (you can (add `-e ../parser/openfoodfacts_taxonomy_parser` in requirements.txt, and in the Docker we have to copy the parser path in the docker)).\r\n\r\nSo:\r\n1. here we should put normalizing in a separate function (in normalizer.py is even better)\r\n2. call this function in this method\r\n3. import from parser and call it in backend instead of having a copy of normalizer.py there.\r\n\r\nIt's ok if you want to do it on next step (creating a project), but this really has to be done. Code duplication means possible divergence, which is bad !"", 'comment_created': datetime.datetime(2022, 10, 7, 16, 29, 41, tzinfo=datetime.timezone.utc), 'commenter': 'alexgarel', 'type': 'User'}, {'comment_id': 990279508, 'comment_body': 'Why not use multilabel here ? ', 'comment_created': datetime.datetime(2022, 10, 7, 16, 31, 23, tzinfo=datetime.timezone.utc), 'commenter': 'alexgarel', 'type': 'User'}, {'comment_id': 990279979, 'comment_body': '\r\n\r\nWhy not use multilabel here ?\r\n', 'comment_created': datetime.datetime(2022, 10, 7, 16, 31, 50, tzinfo=datetime.timezone.utc), 'commenter': 'alexgarel', 'type': 'User'}, {'comment_id': 990281616, 'comment_body': 'It\'s pefectly ok to use ""-"" for branch name, indeed I think it\'s more readable.\r\nI name my branches:\xa0taxonomy-feat-do-blah.', 'comment_created': datetime.datetime(2022, 10, 7, 16, 33, 20, tzinfo=datetime.timezone.utc), 'commenter': 'alexgarel', 'type': 'User'}, {'comment_id': 990282594, 'comment_body': 'as for Parser, make taxonomy name a distinct parameter, not necessarily correlated to filename.', 'comment_created': datetime.datetime(2022, 10, 7, 16, 34, 17, tzinfo=datetime.timezone.utc), 'commenter': 'alexgarel', 'type': 'User'}, {'comment_id': 990287974, 'comment_body': '(not a big deal) You could have hardcoded it, it maybe easier to read.', 'comment_created': datetime.datetime(2022, 10, 7, 16, 39, 32, tzinfo=datetime.timezone.utc), 'commenter': 'alexgarel', 'type': 'User'}, {'comment_id': 990289282, 'comment_body': ""With current test, we are not testing that there is no interference between to parsing.\r\n\r\nIt would be important to add a quick test where we parse twice the same taxonomy with two different branch name, and verify it's all ok on both taxonomy."", 'comment_created': datetime.datetime(2022, 10, 7, 16, 40, 50, tzinfo=datetime.timezone.utc), 'commenter': 'alexgarel', 'type': 'User'}, {'comment_id': 990298291, 'comment_body': ""I think we don't need the multi_label parameter:\r\n```suggestion\r\n        curr_node = self.get_nodes(label, entry).data()[0]['n']\r\n\r\n```"", 'comment_created': datetime.datetime(2022, 10, 7, 16, 49, 26, tzinfo=datetime.timezone.utc), 'commenter': 'alexgarel', 'type': 'User'}, {'comment_id': 990299592, 'comment_body': '```suggestion\r\n            self.add_node_to_end(""ENTRY"", child)\r\n\r\n```', 'comment_created': datetime.datetime(2022, 10, 7, 16, 50, 42, tzinfo=datetime.timezone.utc), 'commenter': 'alexgarel', 'type': 'User'}, {'comment_id': 990299802, 'comment_body': '```suggestion\r\n            self.create_node(""ENTRY"", child, main_language_code)\r\n\r\n```', 'comment_created': datetime.datetime(2022, 10, 7, 16, 50, 53, tzinfo=datetime.timezone.utc), 'commenter': 'alexgarel', 'type': 'User'}, {'comment_id': 990317289, 'comment_body': 'It seems multiple labels are not allowed for indexes, hence I restricted the label to the branch name.', 'comment_created': datetime.datetime(2022, 10, 7, 17, 4, 4, tzinfo=datetime.timezone.utc), 'commenter': 'aadarsh-ram', 'type': 'User'}, {'comment_id': 990319689, 'comment_body': ""Ah yeah, but neo4j doesn't allow hyphens while creating indexes. So, I changed to a underscore delimiter."", 'comment_created': datetime.datetime(2022, 10, 7, 17, 6, 30, tzinfo=datetime.timezone.utc), 'commenter': 'aadarsh-ram', 'type': 'User'}, {'comment_id': 990662653, 'comment_body': ""@alexgarel I changed up all the imports and called the functions appropriately. I'm facing some issues with changing the docker related files. Would you be able to help me out?"", 'comment_created': datetime.datetime(2022, 10, 8, 16, 43, 12, tzinfo=datetime.timezone.utc), 'commenter': 'aadarsh-ram', 'type': 'User'}, {'comment_id': 990662836, 'comment_body': '@alexgarel I added a test (`test_two_branch_round_trip()`) for the same.', 'comment_created': datetime.datetime(2022, 10, 8, 16, 45, 8, tzinfo=datetime.timezone.utc), 'commenter': 'aadarsh-ram', 'type': 'User'}, {'comment_id': 991386065, 'comment_body': 'I commited the change for docker', 'comment_created': datetime.datetime(2022, 10, 10, 15, 1, 44, tzinfo=datetime.timezone.utc), 'commenter': 'alexgarel', 'type': 'User'}, {'comment_id': 991398350, 'comment_body': ""hum that's really sad … I think thus we should change our strategy…\r\n\r\nThat is add three labels on entries at import time: branch_name, taxonomy_name and a blend of both.\r\nThe blend would be g_<branch_name>_<taxonomy_name> (prefix g like graph, but you may have a better idea !).\r\n\r\nSo throughout the code, you will use g_<branch_name>_<taxonomy_name>\r\nBut I would like to keep the b_ and t_ label, for later (when we would allow editing more than one taxonomy in the same project).\r\n\r\nAre you ok to do this refactor ? Do you want to do it in a second phase (merge that and do it in a new PR ?)"", 'comment_created': datetime.datetime(2022, 10, 10, 15, 12, 7, tzinfo=datetime.timezone.utc), 'commenter': 'alexgarel', 'type': 'User'}, {'comment_id': 991399434, 'comment_body': 'ok', 'comment_created': datetime.datetime(2022, 10, 10, 15, 13, 18, tzinfo=datetime.timezone.utc), 'commenter': 'alexgarel', 'type': 'User'}, {'comment_id': 991401826, 'comment_body': 'Thank you for doing the refactor :-)', 'comment_created': datetime.datetime(2022, 10, 10, 15, 15, 46, tzinfo=datetime.timezone.utc), 'commenter': 'alexgarel', 'type': 'User'}, {'comment_id': 991404628, 'comment_body': '```suggestion\r\n    taxonomy_name = sys.argv[3] if len(sys.argv) > 1 else filename.rsplit(""."", 1)[0]\r\n```', 'comment_created': datetime.datetime(2022, 10, 10, 15, 18, 24, tzinfo=datetime.timezone.utc), 'commenter': 'alexgarel', 'type': 'User'}, {'comment_id': 991405608, 'comment_body': '```suggestion\r\n    taxonomy_name = sys.argv[3] if len(sys.argv) > 1 else filename.rsplit(""."", 1)[0]\r\n```', 'comment_created': datetime.datetime(2022, 10, 10, 15, 19, 22, tzinfo=datetime.timezone.utc), 'commenter': 'alexgarel', 'type': 'User'}, {'comment_id': 991471420, 'comment_body': ""I think I'll do this refactor over here, and I'll simultaneously also give the frontend multilabel PR (it's almost complete). So, when both PRs are ready, they can be merged together. Does this sound good?"", 'comment_created': datetime.datetime(2022, 10, 10, 16, 35, 13, tzinfo=datetime.timezone.utc), 'commenter': 'aadarsh-ram', 'type': 'User'}, {'comment_id': 991639022, 'comment_body': 'you only need the project name here, as this is redundant with the other labels.\r\n\r\nWe keep the other label just for future work (or being able to explore the database independently).', 'comment_created': datetime.datetime(2022, 10, 10, 21, 5, 10, tzinfo=datetime.timezone.utc), 'commenter': 'alexgarel', 'type': 'User'}]","[{'commit_sha': '79d58844af8af888f77a6daf2fa50edc488a7d59', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c0097ed83e6dec20ee9347b2e72183dad6c65b6a', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6c8bfe44bdfe3964111dd1d342c279637f4e8cfc', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '033c4329d229e49ccc4fd963d508bcd916e3a898', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '12ae4625eee2b91b9afed75a89b0df9e9eb21d04', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '71b1970db8aa17a4f3da43269aae3c53da2c2713', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6ac6700be7b5cfe28daa2cb39987f818896051f3', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '340db384799886ba798f4043da268b0ddc9b5f1d', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '09db6a6b7677f5406a2299d623e505b79243a043', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5aa7c5e305f94bf8d3c1a66c20d1788551e4d838', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f975c38bdca3d1e958aed691677397acdccd4b54', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '00634a4431bf8018988b90db5d3f0fedc3b4d64e', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd126c507b76b34d2dd9b6ef39ae4204cd4484bba', 'committer_username': 'alexgarel', 'committer_name': 'Alex Garel', 'committer_email': None, 'commit_date': datetime.datetime(2009, 10, 26, 13, 49, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f49400102479cb3591d4dce977ec46f4ec028f85', 'committer_username': 'alexgarel', 'committer_name': 'Alex Garel', 'committer_email': None, 'commit_date': datetime.datetime(2009, 10, 26, 13, 49, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': '727314ee9c7fe84985e75577dbd0a3dbe1f9424a', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '16d307041829e6956dd852c049fa64ad4c9f1002', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '312d75c7bc22454ec97dad52c77c7653f321ff69', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cd3593ad8ea840fd15827e023a12276c35cf61e8', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4060662a671d76d4ba8acba8d5f39f3fabfcbe45', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '410d1dd80eaa0a8d63af588916e87ead2d35d1f7', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '85056cc8d6355f7f99d8ab6862fe52e01a8b84bf', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '239155f47ea025a04bf7be14e15e75634d2092a5', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a8d27d0feaba9b793cf84430d667b224d0dd6d32', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2e872f06b3c655ab3eae6184dca6b2ef5a29bffe', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5bbbcc3a386d24db91512325affccb82f4d21a16', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd64a9238d64ba614d7d5425928ce44a12919ff6e', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '165116457d9ca2f99d111bbd14bcf22733b557e3', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ba982e189a5c7859371362195ff58bcd881a0224', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}]",Aadarsh A,25586296,,User,,35,,22,34
1080788783,fix: Add score > 0 condition for search,"### What
- Neo4J gives a score of 0 for nodes that don't match sometimes
- To account for that, a ""where"" clause with ""score > 0"" must be added in the backend
",True,102,https://api.github.com/repos/openfoodfacts/taxonomy-editor/pulls/102,https://github.com/openfoodfacts/taxonomy-editor/pull/102,closed,4,0,1,2,0,0,0,1,[],2022-10-07 21:04:36+00:00,2022-10-10 15:25:52+00:00,238876.0,"2 days, 18:21:16",[],"[{'commit_sha': '1053030310be16f4c246083e9adeb6ca8adf4d81', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ff2235480a4acd63e5853c29338dbd113f29b990', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}]",Aadarsh A,25586296,,User,,35,,22,34
1081289191,fix: Update requirements.txt for backend,"### What
- Missing library (Unidecode) in requirements.txt
",True,103,https://api.github.com/repos/openfoodfacts/taxonomy-editor/pulls/103,https://github.com/openfoodfacts/taxonomy-editor/pull/103,closed,1,0,1,1,0,0,0,1,[],2022-10-09 14:56:39+00:00,2022-10-10 12:21:19+00:00,77080.0,21:24:40,[],"[{'commit_sha': '4b7764039ad8feb91c5ce325372b4d10b4995f53', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}]",Aadarsh A,25586296,,User,,35,,22,34
1081293727,feat: Add new endpoint for fetching root nodes,"### What
- Fetches all root nodes in given taxonomy
- Frontend will render these root nodes for user's convenience",True,104,https://api.github.com/repos/openfoodfacts/taxonomy-editor/pulls/104,https://github.com/openfoodfacts/taxonomy-editor/pull/104,closed,20,0,2,2,1,0,0,1,[],2022-10-09 15:16:08+00:00,2022-10-11 10:06:54+00:00,154246.0,"1 day, 18:50:46",[],"[{'commit_sha': '9636c52a0601f66ef8d0e1e668aaf448a69f6bc8', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '196a5a62a06302654704738900dc65c2fb4eef11', 'committer_username': 'aadarsh-ram', 'committer_name': 'Aadarsh A', 'committer_email': None, 'commit_date': datetime.datetime(2017, 2, 6, 13, 30, 9, tzinfo=datetime.timezone.utc)}]",Aadarsh A,25586296,,User,,35,,22,34

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
358820127,folksonomy_api,openfoodfacts/folksonomy_api,Python,7,11,11,10,211,36,15,12,"[{'id': 899247526, 'number': 86, 'closed': datetime.datetime(2022, 4, 15, 12, 24, 56, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 4, 4, 16, 36, tzinfo=datetime.timezone.utc), 'time_taken': 935336.0, 'time_delta': '10 days, 19:48:56', 'additions': 68, 'deletions': 26, 'state': 'closed'}]"
57331837,openfoodfacts-python,openfoodfacts/openfoodfacts-python,Python,65,303,16,21,454,18,15,6,"[{'id': 936561279, 'number': 102, 'closed': datetime.datetime(2022, 5, 16, 7, 40, 9, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 5, 14, 16, 0, 20, tzinfo=datetime.timezone.utc), 'time_taken': 142789.0, 'time_delta': '1 day, 15:39:49', 'additions': 11, 'deletions': 0, 'state': 'closed'}, {'id': 930213465, 'number': 101, 'closed': datetime.datetime(2022, 5, 9, 10, 26, 46, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 5, 7, 5, 46, 7, tzinfo=datetime.timezone.utc), 'time_taken': 189639.0, 'time_delta': '2 days, 4:40:39', 'additions': 18, 'deletions': 17, 'state': 'closed'}, {'id': 927217755, 'number': 99, 'closed': datetime.datetime(2022, 5, 4, 8, 22, 57, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 5, 4, 3, 52, 45, tzinfo=datetime.timezone.utc), 'time_taken': 16212.0, 'time_delta': '4:30:12', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 917460663, 'number': 94, 'closed': datetime.datetime(2022, 5, 20, 15, 51, 24, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 4, 24, 15, 24, 30, tzinfo=datetime.timezone.utc), 'time_taken': 2248014.0, 'time_delta': '26 days, 0:26:54', 'additions': 49, 'deletions': 0, 'state': 'closed'}, {'id': 906286792, 'number': 92, 'closed': datetime.datetime(2022, 4, 13, 13, 20, 32, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 4, 11, 17, 34, 12, tzinfo=datetime.timezone.utc), 'time_taken': 157580.0, 'time_delta': '1 day, 19:46:20', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 903564857, 'number': 90, 'closed': datetime.datetime(2022, 4, 9, 10, 21, 3, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 4, 8, 8, 12, 18, tzinfo=datetime.timezone.utc), 'time_taken': 94125.0, 'time_delta': '1 day, 2:08:45', 'additions': 37, 'deletions': 0, 'state': 'closed'}, {'id': 902927621, 'number': 89, 'closed': datetime.datetime(2022, 4, 7, 16, 4, 48, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 4, 7, 16, 2, 25, tzinfo=datetime.timezone.utc), 'time_taken': 143.0, 'time_delta': '0:02:23', 'additions': 11, 'deletions': 8, 'state': 'closed'}, {'id': 901807356, 'number': 88, 'closed': datetime.datetime(2022, 4, 7, 13, 10, 41, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 4, 6, 18, 1, 38, tzinfo=datetime.timezone.utc), 'time_taken': 68943.0, 'time_delta': '19:09:03', 'additions': 33, 'deletions': 227, 'state': 'closed'}]"
495893905,taxonomy-editor,openfoodfacts/taxonomy-editor,Python,20,15,8,19,275,67,25,9,"[{'id': 1240675172, 'number': 228, 'closed': datetime.datetime(2023, 2, 15, 12, 36, 13, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 2, 14, 14, 26, 21, tzinfo=datetime.timezone.utc), 'time_taken': 79792.0, 'time_delta': '22:09:52', 'additions': 4, 'deletions': 13, 'state': 'closed'}, {'id': 1230807090, 'number': 217, 'closed': datetime.datetime(2023, 2, 7, 15, 8, 22, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 2, 6, 17, 37, 11, tzinfo=datetime.timezone.utc), 'time_taken': 77471.0, 'time_delta': '21:31:11', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 1216489344, 'number': 204, 'closed': datetime.datetime(2023, 1, 25, 16, 48, 52, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 1, 25, 12, 21, 43, tzinfo=datetime.timezone.utc), 'time_taken': 16029.0, 'time_delta': '4:27:09', 'additions': 1, 'deletions': 0, 'state': 'closed'}, {'id': 1183486057, 'number': 164, 'closed': datetime.datetime(2023, 1, 4, 14, 11, 13, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 1, 3, 13, 31, 3, tzinfo=datetime.timezone.utc), 'time_taken': 88810.0, 'time_delta': '1 day, 0:40:10', 'additions': 15, 'deletions': 12, 'state': 'closed'}, {'id': 1175150000, 'number': 153, 'closed': datetime.datetime(2022, 12, 23, 15, 37, 20, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 12, 22, 13, 56, 28, tzinfo=datetime.timezone.utc), 'time_taken': 92452.0, 'time_delta': '1 day, 1:40:52', 'additions': 1, 'deletions': 34, 'state': 'closed'}, {'id': 1175124950, 'number': 152, 'closed': datetime.datetime(2023, 1, 4, 13, 20, 11, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 12, 22, 13, 39, 56, tzinfo=datetime.timezone.utc), 'time_taken': 1122015.0, 'time_delta': '12 days, 23:40:15', 'additions': 67, 'deletions': 20, 'state': 'closed'}, {'id': 1144062541, 'number': 143, 'closed': datetime.datetime(2022, 12, 6, 8, 48, 23, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 12, 3, 6, 3, 41, tzinfo=datetime.timezone.utc), 'time_taken': 269082.0, 'time_delta': '3 days, 2:44:42', 'additions': 11, 'deletions': 9, 'state': 'closed'}, {'id': 1143176765, 'number': 137, 'closed': datetime.datetime(2022, 12, 2, 14, 33, 25, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 12, 2, 12, 39, 11, tzinfo=datetime.timezone.utc), 'time_taken': 6854.0, 'time_delta': '1:54:14', 'additions': 78, 'deletions': 78, 'state': 'closed'}, {'id': 1131225157, 'number': 132, 'closed': datetime.datetime(2022, 11, 25, 19, 30, 11, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 11, 22, 6, 52, 6, tzinfo=datetime.timezone.utc), 'time_taken': 304685.0, 'time_delta': '3 days, 12:38:05', 'additions': 68, 'deletions': 14, 'state': 'closed'}, {'id': 1122941114, 'number': 128, 'closed': datetime.datetime(2022, 11, 16, 13, 59, 25, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 11, 15, 14, 6, 15, tzinfo=datetime.timezone.utc), 'time_taken': 85990.0, 'time_delta': '23:53:10', 'additions': 17, 'deletions': 15, 'state': 'closed'}, {'id': 1120324037, 'number': 125, 'closed': datetime.datetime(2022, 11, 16, 11, 9, 21, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 11, 13, 11, 10, 39, tzinfo=datetime.timezone.utc), 'time_taken': 259122.0, 'time_delta': '2 days, 23:58:42', 'additions': 447, 'deletions': 119, 'state': 'closed'}, {'id': 1111522479, 'number': 122, 'closed': datetime.datetime(2022, 11, 8, 10, 45, 30, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 11, 5, 6, 47, 24, tzinfo=datetime.timezone.utc), 'time_taken': 273486.0, 'time_delta': '3 days, 3:58:06', 'additions': 3, 'deletions': 1, 'state': 'closed'}, {'id': 1096307801, 'number': 120, 'closed': datetime.datetime(2022, 11, 7, 5, 3, 18, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 10, 22, 19, 20, 56, tzinfo=datetime.timezone.utc), 'time_taken': 1330942.0, 'time_delta': '15 days, 9:42:22', 'additions': 169, 'deletions': 10, 'state': 'closed'}, {'id': 1089588423, 'number': 116, 'closed': datetime.datetime(2022, 11, 5, 7, 4, 34, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 10, 17, 16, 12, 58, tzinfo=datetime.timezone.utc), 'time_taken': 1608696.0, 'time_delta': '18 days, 14:51:36', 'additions': 472, 'deletions': 52, 'state': 'closed'}, {'id': 1082517372, 'number': 110, 'closed': datetime.datetime(2022, 11, 5, 7, 2, 32, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 10, 10, 21, 15, 46, tzinfo=datetime.timezone.utc), 'time_taken': 2195206.0, 'time_delta': '25 days, 9:46:46', 'additions': 608, 'deletions': 235, 'state': 'closed'}, {'id': 1081293727, 'number': 104, 'closed': datetime.datetime(2022, 10, 11, 10, 6, 54, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 10, 9, 15, 16, 8, tzinfo=datetime.timezone.utc), 'time_taken': 154246.0, 'time_delta': '1 day, 18:50:46', 'additions': 20, 'deletions': 0, 'state': 'closed'}, {'id': 1081289191, 'number': 103, 'closed': datetime.datetime(2022, 10, 10, 12, 21, 19, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 10, 9, 14, 56, 39, tzinfo=datetime.timezone.utc), 'time_taken': 77080.0, 'time_delta': '21:24:40', 'additions': 1, 'deletions': 0, 'state': 'closed'}, {'id': 1080788783, 'number': 102, 'closed': datetime.datetime(2022, 10, 10, 15, 25, 52, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 10, 7, 21, 4, 36, tzinfo=datetime.timezone.utc), 'time_taken': 238876.0, 'time_delta': '2 days, 18:21:16', 'additions': 4, 'deletions': 0, 'state': 'closed'}, {'id': 1079499542, 'number': 101, 'closed': datetime.datetime(2022, 11, 7, 13, 31, 47, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 10, 6, 19, 24, 37, tzinfo=datetime.timezone.utc), 'time_taken': 2743630.0, 'time_delta': '31 days, 18:07:10', 'additions': 1144, 'deletions': 532, 'state': 'closed'}, {'id': 1077629778, 'number': 100, 'closed': datetime.datetime(2022, 10, 5, 20, 42, 37, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 10, 5, 17, 19, 35, tzinfo=datetime.timezone.utc), 'time_taken': 12182.0, 'time_delta': '3:23:02', 'additions': 33, 'deletions': 205, 'state': 'closed'}, {'id': 1077263269, 'number': 97, 'closed': datetime.datetime(2022, 10, 6, 16, 53, 39, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 10, 5, 12, 20, 52, tzinfo=datetime.timezone.utc), 'time_taken': 102767.0, 'time_delta': '1 day, 4:32:47', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 1075948254, 'number': 95, 'closed': datetime.datetime(2022, 10, 5, 17, 20, 5, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 10, 4, 12, 31, 59, tzinfo=datetime.timezone.utc), 'time_taken': 103686.0, 'time_delta': '1 day, 4:48:06', 'additions': 20, 'deletions': 5, 'state': 'closed'}, {'id': 1068456150, 'number': 93, 'closed': datetime.datetime(2022, 10, 4, 12, 26, 55, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 9, 27, 11, 8, 14, tzinfo=datetime.timezone.utc), 'time_taken': 609521.0, 'time_delta': '7 days, 1:18:41', 'additions': 74, 'deletions': 36, 'state': 'closed'}, {'id': 1066063904, 'number': 92, 'closed': datetime.datetime(2022, 10, 10, 16, 11, 42, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 9, 24, 14, 14, 2, tzinfo=datetime.timezone.utc), 'time_taken': 1389460.0, 'time_delta': '16 days, 1:57:40', 'additions': 325, 'deletions': 59, 'state': 'closed'}, {'id': 1065700289, 'number': 91, 'closed': datetime.datetime(2022, 10, 4, 12, 20, 13, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 9, 23, 19, 57, 40, tzinfo=datetime.timezone.utc), 'time_taken': 922953.0, 'time_delta': '10 days, 16:22:33', 'additions': 123, 'deletions': 17, 'state': 'closed'}, {'id': 1058868970, 'number': 86, 'closed': datetime.datetime(2022, 9, 22, 7, 55, 3, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 9, 16, 17, 19, 50, tzinfo=datetime.timezone.utc), 'time_taken': 484513.0, 'time_delta': '5 days, 14:35:13', 'additions': 3, 'deletions': 1, 'state': 'closed'}, {'id': 1052513756, 'number': 76, 'closed': datetime.datetime(2022, 9, 13, 17, 5, 4, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 9, 11, 14, 10, 4, tzinfo=datetime.timezone.utc), 'time_taken': 183300.0, 'time_delta': '2 days, 2:55:00', 'additions': 196, 'deletions': 13, 'state': 'closed'}, {'id': 1048218178, 'number': 74, 'closed': datetime.datetime(2022, 9, 7, 9, 38, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 9, 7, 3, 34, 53, tzinfo=datetime.timezone.utc), 'time_taken': 21787.0, 'time_delta': '6:03:07', 'additions': 4, 'deletions': 3, 'state': 'closed'}, {'id': 1025741835, 'number': 47, 'closed': datetime.datetime(2022, 9, 8, 18, 13, 51, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 14, 7, 24, 7, tzinfo=datetime.timezone.utc), 'time_taken': 2198984.0, 'time_delta': '25 days, 10:49:44', 'additions': 59, 'deletions': 12, 'state': 'closed'}, {'id': 1025740461, 'number': 46, 'closed': datetime.datetime(2022, 9, 5, 16, 0, 2, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 14, 7, 13, 58, tzinfo=datetime.timezone.utc), 'time_taken': 1932364.0, 'time_delta': '22 days, 8:46:04', 'additions': 154, 'deletions': 52, 'state': 'closed'}, {'id': 1025739796, 'number': 45, 'closed': datetime.datetime(2022, 9, 2, 16, 31, 58, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 14, 7, 9, 15, tzinfo=datetime.timezone.utc), 'time_taken': 1675363.0, 'time_delta': '19 days, 9:22:43', 'additions': 55, 'deletions': 2, 'state': 'closed'}, {'id': 1025738950, 'number': 44, 'closed': datetime.datetime(2022, 8, 29, 14, 40, 4, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 14, 7, 3, 34, tzinfo=datetime.timezone.utc), 'time_taken': 1323390.0, 'time_delta': '15 days, 7:36:30', 'additions': 242, 'deletions': 3, 'state': 'closed'}, {'id': 1025730962, 'number': 43, 'closed': datetime.datetime(2022, 8, 16, 18, 4, 3, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 14, 6, 7, 48, tzinfo=datetime.timezone.utc), 'time_taken': 215775.0, 'time_delta': '2 days, 11:56:15', 'additions': 264, 'deletions': 0, 'state': 'closed'}, {'id': 1025729683, 'number': 42, 'closed': datetime.datetime(2022, 8, 16, 14, 25, 7, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 14, 5, 56, 21, tzinfo=datetime.timezone.utc), 'time_taken': 203326.0, 'time_delta': '2 days, 8:28:46', 'additions': 30640, 'deletions': 0, 'state': 'closed'}, {'id': 1024677346, 'number': 41, 'closed': datetime.datetime(2022, 10, 5, 13, 39, 4, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 12, 8, 19, 8, tzinfo=datetime.timezone.utc), 'time_taken': 4684796.0, 'time_delta': '54 days, 5:19:56', 'additions': 1078, 'deletions': 288, 'state': 'closed'}, {'id': 1012574366, 'number': 35, 'closed': datetime.datetime(2022, 9, 6, 16, 13, 28, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 30, 8, 27, 33, tzinfo=datetime.timezone.utc), 'time_taken': 3311155.0, 'time_delta': '38 days, 7:45:55', 'additions': 61, 'deletions': 3, 'state': 'closed'}, {'id': 1012219063, 'number': 31, 'closed': datetime.datetime(2022, 9, 5, 16, 4, 29, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 29, 17, 47, 28, tzinfo=datetime.timezone.utc), 'time_taken': 3277021.0, 'time_delta': '37 days, 22:17:01', 'additions': 31379, 'deletions': 2, 'state': 'closed'}, {'id': 1006961368, 'number': 26, 'closed': datetime.datetime(2022, 7, 27, 9, 29, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 25, 8, 14, 2, tzinfo=datetime.timezone.utc), 'time_taken': 177298.0, 'time_delta': '2 days, 1:14:58', 'additions': 302, 'deletions': 26, 'state': 'closed'}, {'id': 998419378, 'number': 19, 'closed': datetime.datetime(2022, 7, 20, 13, 43, 26, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 16, 12, 41, 13, tzinfo=datetime.timezone.utc), 'time_taken': 349333.0, 'time_delta': '4 days, 1:02:13', 'additions': 143, 'deletions': 89, 'state': 'closed'}, {'id': 964734981, 'number': 10, 'closed': datetime.datetime(2022, 7, 12, 15, 10, 41, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 6, 11, 11, 22, 15, tzinfo=datetime.timezone.utc), 'time_taken': 2692106.0, 'time_delta': '31 days, 3:48:26', 'additions': 319, 'deletions': 0, 'state': 'closed'}, {'id': 963191186, 'number': 9, 'closed': datetime.datetime(2022, 6, 15, 19, 24, 51, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 6, 9, 18, 5, 26, tzinfo=datetime.timezone.utc), 'time_taken': 523165.0, 'time_delta': '6 days, 1:19:25', 'additions': 3, 'deletions': 1, 'state': 'closed'}]"
