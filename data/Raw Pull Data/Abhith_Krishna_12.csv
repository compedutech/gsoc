pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
424583347,Milestone 1.1: Added the new Math schema and migrations.,"## Overview
<!--
READ ME FIRST:
Please answer *both* questions below and check off every point from the Essential Checklist!
If there is no corresponding issue number, fill in N/A where it says [fill_in_number_here] below in 1.
-->

1. This PR does the following: Adds the new Math schema and migrations

## Essential Checklist

- [ ] The PR title starts with ""Fix #bugnum: "", followed by a short, clear summary of the changes. (If this PR fixes part of an issue, prefix the title with ""Fix part of #bugnum: ..."".)
- [x] The linter/Karma presubmit checks have passed locally on your machine.
- [x] ""Allow edits from maintainers"" is checked. (See [here](https://help.github.com/en/github/collaborating-with-issues-and-pull-requests/allowing-changes-to-a-pull-request-branch-created-from-a-fork) for instructions on how to enable it.)
  - This lets reviewers restart your CircleCI tests for you.
- [x] The PR is made from a branch that's **not** called ""develop"".

## PR Pointers

- Oppiabot will notify you when you don't add a PR_CHANGELOG label. If you are unable to do so, please @-mention a code owner (who will be in the Reviewers list), or ask on [Gitter](https://gitter.im/oppia/oppia-chat).
- For what code owners will expect, see the [Code Owner's wiki page](https://github.com/oppia/oppia/wiki/Oppia%27s-code-owners-and-checks-to-be-carried-out-by-developers).
- Make sure your PR follows conventions in the [style guide](https://github.com/oppia/oppia/wiki/Coding-style-guide), otherwise this will lead to review delays
- Never force push. If you do, your PR will be closed.
",True,9390,https://api.github.com/repos/oppia/oppia/pulls/9390,https://github.com/oppia/oppia/pull/9390,closed,4794,299,53,82,39,279,2,2,"[{'name': 'PR: LGTM'}, {'name': 'PR: Affects datastore layer'}]",2020-05-28 16:00:01+00:00,2020-06-27 12:43:50+00:00,2580229.0,"29 days, 20:43:49","[{'comment_id': 431951417, 'comment_body': ""I think you didn't resolve the conflicts properly?"", 'comment_created': datetime.datetime(2020, 5, 28, 16, 4, 2, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 431955219, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 5, 28, 16, 10, 10, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 431961355, 'comment_body': 'Create a `conversion_function = html_validation_service.add_math_content_to_math_rte_components` variable on top and use it.', 'comment_created': datetime.datetime(2020, 5, 28, 16, 18, 18, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 431962512, 'comment_body': 'Add \r\n```\r\nif not change.cmd == exp_domain.CMD_EDIT_STATE_PROPERTY: \r\n    continue\r\n```', 'comment_created': datetime.datetime(2020, 5, 28, 16, 20, 2, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 431963356, 'comment_body': 'Move this to the bottom (only do it once after all the if-else case)', 'comment_created': datetime.datetime(2020, 5, 28, 16, 21, 18, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 431967925, 'comment_body': 'Why are you doing it again?', 'comment_created': datetime.datetime(2020, 5, 28, 16, 28, 14, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 431968442, 'comment_body': 'Why not do it the way its done for hints?', 'comment_created': datetime.datetime(2020, 5, 28, 16, 29, 7, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 431968576, 'comment_body': 'hint_dict*', 'comment_created': datetime.datetime(2020, 5, 28, 16, 29, 21, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 431969416, 'comment_body': ""What if the new_value doesn't have `choices` key?"", 'comment_created': datetime.datetime(2020, 5, 28, 16, 30, 44, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 432041268, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 5, 28, 18, 36, 16, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 432047352, 'comment_body': 'I think you can move this to the line above, right?', 'comment_created': datetime.datetime(2020, 5, 28, 18, 47, 21, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 432070113, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 5, 28, 19, 29, 56, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 432070229, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 5, 28, 19, 30, 8, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 432072429, 'comment_body': ""basically, we check for the `choices` key in the customization arg in order to find whether the interaction is one of `ItemSelection`, `MultichoiceInput`, or `DragAndDrop`.\r\nIf `choices` is not among keys, then we don't have to convert the `change.new_value`\r\nThis approach is already been used in the codebase here  [link](https://github.com/oppia/oppia/blob/a4a3a7266858efb54ae7ceba3a7c834837744911/core/domain/draft_upgrade_services.py#L108)"", 'comment_created': datetime.datetime(2020, 5, 28, 19, 34, 25, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 432081416, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 5, 28, 19, 49, 41, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 432081490, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 5, 28, 19, 49, 45, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 432120663, 'comment_body': 'we can make it `if` right? (Trying to make less branching!)', 'comment_created': datetime.datetime(2020, 5, 28, 21, 0, 43, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 432136870, 'comment_body': 'Should we do it this way:\r\n\r\n```\r\nnew_value = change.new_value\r\nif ...:\r\n    new_value = ...\r\nelif ...:\r\n    new_value = ....\r\n.\r\n.\r\n.\r\ndraft_change_list[i] = exp_domain.ExplorationChange({...})\r\n```\r\n\r\nbtw, any specific reason to regenerate thew whole change list again? (Is there any issue with only changing the change.new_value field?)', 'comment_created': datetime.datetime(2020, 5, 28, 21, 33, 45, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 432204338, 'comment_body': 'Avoid using pragma and private methods ', 'comment_created': datetime.datetime(2020, 5, 29, 1, 7, 53, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 432205127, 'comment_body': '```\r\n            states_dict[key] = state_domain.State.convert_html_fields_in_state(\r\n                state_dict,\r\n                html_validation_service.add_math_content_to_math_rte_components)\r\n```\r\nTry to use 80 chars in a line', 'comment_created': datetime.datetime(2020, 5, 29, 1, 11, 13, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 432205545, 'comment_body': 'Space after `.`', 'comment_created': datetime.datetime(2020, 5, 29, 1, 13, 9, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 432205869, 'comment_body': 'Ditto (can we move this to the line above? same for the add_math_content_to_math_rte_components', 'comment_created': datetime.datetime(2020, 5, 29, 1, 14, 41, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 432207321, 'comment_body': 'Remove if here as `written_translations` is always a part of state object!', 'comment_created': datetime.datetime(2020, 5, 29, 1, 20, 58, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 432209618, 'comment_body': 'Can we move this to the line above? (Following max 80 chars in a line)', 'comment_created': datetime.datetime(2020, 5, 29, 1, 30, 24, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 432209955, 'comment_body': ""Don't do this, I would suggest creating a get_all_html method in all the suggestion class and calling that method here without if-else"", 'comment_created': datetime.datetime(2020, 5, 29, 1, 31, 49, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 432210037, 'comment_body': 'Move this to a method in html_service.', 'comment_created': datetime.datetime(2020, 5, 29, 1, 32, 10, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 432210112, 'comment_body': 'Newline after `(`', 'comment_created': datetime.datetime(2020, 5, 29, 1, 32, 27, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 432210409, 'comment_body': 'Ditto as above create methods in each class.', 'comment_created': datetime.datetime(2020, 5, 29, 1, 33, 37, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 432210611, 'comment_body': 'Note: This method will be reused for validation when we will allow adding images in suggestion.', 'comment_created': datetime.datetime(2020, 5, 29, 1, 34, 33, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 432210729, 'comment_body': 'Any specific reason for converting it to dict?', 'comment_created': datetime.datetime(2020, 5, 29, 1, 35, 4, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 432210997, 'comment_body': 'Should we add validation in try-catch block and yeild for invalid cases?', 'comment_created': datetime.datetime(2020, 5, 29, 1, 36, 9, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 432211184, 'comment_body': ""Why are we fetching this again? `item` is the model isn't it?"", 'comment_created': datetime.datetime(2020, 5, 29, 1, 37, 1, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 432211583, 'comment_body': 'Add this in sorted order (helps in finding the job)', 'comment_created': datetime.datetime(2020, 5, 29, 1, 38, 49, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 432361293, 'comment_body': 'Missing ""to"".', 'comment_created': datetime.datetime(2020, 5, 29, 9, 19, 45, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 432362348, 'comment_body': '+1. The existing code has a lot of duplication and it would be good to try and remove as much of that as possible.', 'comment_created': datetime.datetime(2020, 5, 29, 9, 21, 42, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 432400949, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 5, 29, 10, 38, 50, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 432401251, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 5, 29, 10, 39, 31, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 432401297, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 5, 29, 10, 39, 37, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 432401349, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 5, 29, 10, 39, 45, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 432401379, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 5, 29, 10, 39, 50, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 432401770, 'comment_body': ""the state objects of older schema don't have  `written_translations` , so this check is needed."", 'comment_created': datetime.datetime(2020, 5, 29, 10, 40, 41, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 432401870, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 5, 29, 10, 40, 52, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 432401901, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 5, 29, 10, 40, 57, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 432401932, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 5, 29, 10, 41, 2, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 432401967, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 5, 29, 10, 41, 7, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 432401992, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 5, 29, 10, 41, 11, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 432402074, 'comment_body': 'removed. done', 'comment_created': datetime.datetime(2020, 5, 29, 10, 41, 23, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 432402129, 'comment_body': 'done(removed)', 'comment_created': datetime.datetime(2020, 5, 29, 10, 41, 32, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 432402341, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 5, 29, 10, 41, 58, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 432668095, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 5, 29, 18, 38, 33, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 432668235, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 5, 29, 18, 38, 52, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 432673052, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 5, 29, 18, 48, 57, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 432680379, 'comment_body': 'Do we need to move this inside the `else` block? (I think you can do it directly, right?)', 'comment_created': datetime.datetime(2020, 5, 29, 19, 4, 39, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 432682139, 'comment_body': '```\r\n                new_value = [\r\n                        state_domain.AnswerGroup.convert_html_in_answer_group(...\r\n```', 'comment_created': datetime.datetime(2020, 5, 29, 19, 8, 43, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 432755544, 'comment_body': 'Why `if` here? [If you are using `if` then should we take care of the else condition?)', 'comment_created': datetime.datetime(2020, 5, 29, 21, 51, 15, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 432755980, 'comment_body': ""Why do we need to load the existing value with `json.loads`? I'm assuming it to be a string.)"", 'comment_created': datetime.datetime(2020, 5, 29, 21, 52, 42, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 432759034, 'comment_body': 'Do we need to do the opposite conversion at the top? (see line 151 of this file)', 'comment_created': datetime.datetime(2020, 5, 29, 22, 2, 3, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 432759248, 'comment_body': 'Will it return a bool?', 'comment_created': datetime.datetime(2020, 5, 29, 22, 2, 42, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 432759499, 'comment_body': 'math component* (or math expression)', 'comment_created': datetime.datetime(2020, 5, 29, 22, 3, 24, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 432759948, 'comment_body': 'ANy specific reason for conversion to dict?', 'comment_created': datetime.datetime(2020, 5, 29, 22, 4, 56, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 432760469, 'comment_body': 'Move `;"">` to the line above (In general try to use the 80 spaces in a line to make things more readable.)', 'comment_created': datetime.datetime(2020, 5, 29, 22, 6, 36, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 432761664, 'comment_body': ""Component* (I'm not sure about the terminology why are we calling this Math RTE?)"", 'comment_created': datetime.datetime(2020, 5, 29, 22, 9, 27, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 432761971, 'comment_body': 'Why is this 3 (from 1)?', 'comment_created': datetime.datetime(2020, 5, 29, 22, 10, 29, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 432762202, 'comment_body': 'Move `:"">` to this line*', 'comment_created': datetime.datetime(2020, 5, 29, 22, 11, 13, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 432762557, 'comment_body': 'Is this an expected change?', 'comment_created': datetime.datetime(2020, 5, 29, 22, 12, 37, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 432762741, 'comment_body': 'Any specific reason for conversion to dict? (here and elsewhere)', 'comment_created': datetime.datetime(2020, 5, 29, 22, 13, 11, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 432762983, 'comment_body': 'htm_content*', 'comment_created': datetime.datetime(2020, 5, 29, 22, 14, 3, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 432763091, 'comment_body': 'is this an expected change?', 'comment_created': datetime.datetime(2020, 5, 29, 22, 14, 26, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 432763495, 'comment_body': 'maybe add `_dict` at the end of the function name to clarify that it converts the dict? Not sure, any thoughts?', 'comment_created': datetime.datetime(2020, 5, 29, 22, 16, 6, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 432763571, 'comment_body': 'Add a newline above', 'comment_created': datetime.datetime(2020, 5, 29, 22, 16, 23, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 432763847, 'comment_body': ""Maybe:\r\n```\r\n        answer_group_dict['outcome']['feedback']['html'] = conversion_fn(\r\n...\r\n```\r\n"", 'comment_created': datetime.datetime(2020, 5, 29, 22, 17, 25, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 432765051, 'comment_body': ""This is confusing, will this method return a dict? this seems like a property method that accepts a dict and returns a dict? In that case why it's not a class method?"", 'comment_created': datetime.datetime(2020, 5, 29, 22, 21, 27, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 432766384, 'comment_body': 'Remove hint_dict. Returns should only have the return type, check existing docstrings for reference', 'comment_created': datetime.datetime(2020, 5, 29, 22, 26, 21, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 432766639, 'comment_body': 'Remove solution_dict. (ditto elsewhere)', 'comment_created': datetime.datetime(2020, 5, 29, 22, 27, 12, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 432767074, 'comment_body': 'Remove unwanted paranthesis', 'comment_created': datetime.datetime(2020, 5, 29, 22, 28, 46, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 432768863, 'comment_body': ""```\r\n            node['outline'] = (\r\n                html_validation_service.add_math_content_to_math_rte_components(\r\n                ...))\r\n```"", 'comment_created': datetime.datetime(2020, 5, 29, 22, 35, 35, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 432769437, 'comment_body': ""We don't need the `+` here right? (Ditto everywhere in thsi PR!)"", 'comment_created': datetime.datetime(2020, 5, 29, 22, 37, 44, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 432769988, 'comment_body': 'after validation*', 'comment_created': datetime.datetime(2020, 5, 29, 22, 39, 56, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 432770767, 'comment_body': ""This is a bit confusing if it's an object property then why it's returning a dict, it should do the conversion internally!"", 'comment_created': datetime.datetime(2020, 5, 29, 22, 42, 49, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 432771165, 'comment_body': ""Why is this method nedded (I don't think its a good plan to use service here as well as return user_id in the dict.)"", 'comment_created': datetime.datetime(2020, 5, 29, 22, 44, 1, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 432771556, 'comment_body': 'Why not use the method in the State class? (Note: question_state_data is going to be  state dict)', 'comment_created': datetime.datetime(2020, 5, 29, 22, 45, 25, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 432771783, 'comment_body': 'By default, a variable name without _dict as a suffix is considered as object so remove the suffix here', 'comment_created': datetime.datetime(2020, 5, 29, 22, 46, 22, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 432772251, 'comment_body': 'Ditto as above why this object property is returning dict?', 'comment_created': datetime.datetime(2020, 5, 29, 22, 48, 18, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 432828436, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 5, 30, 10, 1, 23, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 432828441, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 5, 30, 10, 1, 28, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 432828459, 'comment_body': 'added else', 'comment_created': datetime.datetime(2020, 5, 30, 10, 1, 44, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 432828472, 'comment_body': 'done (changed it)', 'comment_created': datetime.datetime(2020, 5, 30, 10, 2, 1, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 432828481, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 5, 30, 10, 2, 6, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 432828491, 'comment_body': 'changed', 'comment_created': datetime.datetime(2020, 5, 30, 10, 2, 13, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 432828502, 'comment_body': 'changed', 'comment_created': datetime.datetime(2020, 5, 30, 10, 2, 18, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 432828512, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 5, 30, 10, 2, 24, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 432828521, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 5, 30, 10, 2, 30, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 432828602, 'comment_body': ""changed, I've kept to_dict() only where needed."", 'comment_created': datetime.datetime(2020, 5, 30, 10, 3, 52, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 432828606, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 5, 30, 10, 3, 57, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 432828624, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 5, 30, 10, 4, 21, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 432828627, 'comment_body': 'done, changed it', 'comment_created': datetime.datetime(2020, 5, 30, 10, 4, 30, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 432828630, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 5, 30, 10, 4, 36, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 432828634, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 5, 30, 10, 4, 40, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 432828640, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 5, 30, 10, 4, 46, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 432828642, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 5, 30, 10, 4, 51, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 432828666, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 5, 30, 10, 5, 2, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 432828724, 'comment_body': ""done, I've changed it to a class method.\r\n"", 'comment_created': datetime.datetime(2020, 5, 30, 10, 5, 56, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 432828740, 'comment_body': 'removed', 'comment_created': datetime.datetime(2020, 5, 30, 10, 6, 4, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 432828744, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 5, 30, 10, 6, 10, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 432828747, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 5, 30, 10, 6, 15, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 432828753, 'comment_body': 'changed to class_method', 'comment_created': datetime.datetime(2020, 5, 30, 10, 6, 27, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 432829128, 'comment_body': ""This is done in all functions which extract an attribute from the tag(you can look at other methods in this file).\r\nThe reason is that if we don't use `json.loads()` it returns the attribute enclosed in double-quotes. this extra double-quote can cause problems"", 'comment_created': datetime.datetime(2020, 5, 30, 10, 12, 27, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 432829200, 'comment_body': ""I don't think it's needed. that is only needed for conversion to textangular.\r\nAlthough adding it doesn't affect the result of the function"", 'comment_created': datetime.datetime(2020, 5, 30, 10, 13, 22, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 432829247, 'comment_body': ""This actually doesn't matter, this will work even if the version was 2."", 'comment_created': datetime.datetime(2020, 5, 30, 10, 14, 7, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 432829264, 'comment_body': 'Yes we have removed the `MockSkillObject`', 'comment_created': datetime.datetime(2020, 5, 30, 10, 14, 28, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 432829287, 'comment_body': 'Yes we have removed the MockSkillObject\r\n', 'comment_created': datetime.datetime(2020, 5, 30, 10, 14, 43, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 432829341, 'comment_body': ""I don't think it's required, as it's mentioned in the docstring.\r\nBut still if you insist I'll add it."", 'comment_created': datetime.datetime(2020, 5, 30, 10, 15, 31, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 432829354, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 5, 30, 10, 15, 39, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 432829458, 'comment_body': 'We need it because otherwise, the type of the variable will become tuple rather than a Unicode string.', 'comment_created': datetime.datetime(2020, 5, 30, 10, 17, 20, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 432845624, 'comment_body': 'I see, thanks for the explanation!', 'comment_created': datetime.datetime(2020, 5, 30, 14, 25, 51, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 432845778, 'comment_body': 'Then remove th line completely? [i.e, dont mock!]', 'comment_created': datetime.datetime(2020, 5, 30, 14, 28, 24, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 432845852, 'comment_body': 'Then remove the line completely? [Why mock to a correct value?]', 'comment_created': datetime.datetime(2020, 5, 30, 14, 29, 44, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 432846031, 'comment_body': ""I don't think so, have you tried removing the `+`? [Have you checked the existing multiline string in the codebase?]"", 'comment_created': datetime.datetime(2020, 5, 30, 14, 32, 30, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 432846077, 'comment_body': 'Any specific reason for making this class object not the property method?', 'comment_created': datetime.datetime(2020, 5, 30, 14, 33, 25, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 432846253, 'comment_body': ""I don't think so, have you tried removing the `+`? [Have you checked the existing multiline string in the codebase?]"", 'comment_created': datetime.datetime(2020, 5, 30, 14, 35, 54, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 432846396, 'comment_body': 'Any specific reason to change this to clasmethod not as property method?', 'comment_created': datetime.datetime(2020, 5, 30, 14, 38, 11, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 432846542, 'comment_body': '```\r\n        conversion_fn = (\r\n            html_validation_service.add_math_content_to_math_rte_components)\r\n```', 'comment_created': datetime.datetime(2020, 5, 30, 14, 40, 24, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 432852227, 'comment_body': ""As this method is expected to public, I don't think changing/updating the object's property is a good idea inside this function. So rather than updating the object in the function itself, It's better to convert the dict passed to the function and return it. the Migration function can update the suggestion.\r\nBasically I've tried to do this similar to other `convert_html_in` functions implemented in the  state_domain.py."", 'comment_created': datetime.datetime(2020, 5, 30, 14, 57, 25, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 432852502, 'comment_body': 'same as this [comment](https://github.com/oppia/oppia/pull/9390#discussion_r432852227)', 'comment_created': datetime.datetime(2020, 5, 30, 14, 57, 52, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 432860073, 'comment_body': 'Change the order of args here.', 'comment_created': datetime.datetime(2020, 5, 30, 15, 11, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 432860324, 'comment_body': 'Add a newline above', 'comment_created': datetime.datetime(2020, 5, 30, 15, 11, 24, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 432860439, 'comment_body': 'Will it be a dict?', 'comment_created': datetime.datetime(2020, 5, 30, 15, 11, 37, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 432861426, 'comment_body': 'html_string_list = state_object.get_all_html_content_strings(), will this work?\r\n', 'comment_created': datetime.datetime(2020, 5, 30, 15, 13, 18, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 432861818, 'comment_body': 'Unexpected change?', 'comment_created': datetime.datetime(2020, 5, 30, 15, 13, 56, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 432862720, 'comment_body': 'Ditto as below', 'comment_created': datetime.datetime(2020, 5, 30, 15, 15, 27, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 432863792, 'comment_body': 'Why not:\r\n html_string_list = suggestion.get_all_html_content_strings() ?', 'comment_created': datetime.datetime(2020, 5, 30, 15, 27, 37, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 432863878, 'comment_body': 'What will `check_for_math_component_in_html` return?', 'comment_created': datetime.datetime(2020, 5, 30, 15, 28, 47, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 432864084, 'comment_body': 'Values is going to be abig list, right? If so do not yield so many info which will be of no use', 'comment_created': datetime.datetime(2020, 5, 30, 15, 31, 22, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 432864330, 'comment_body': 'The method says convert html in suggestion but it only accepts change dict, should we change the function name or the params?  ', 'comment_created': datetime.datetime(2020, 5, 30, 15, 35, 6, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 432864398, 'comment_body': '`failed validation after migration` [Sorry I had suggested something wrong before.]', 'comment_created': datetime.datetime(2020, 5, 30, 15, 36, 3, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 432890637, 'comment_body': 'done, removed it.', 'comment_created': datetime.datetime(2020, 5, 30, 21, 59, 45, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 432891087, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 5, 30, 22, 8, 29, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 432891095, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 5, 30, 22, 8, 35, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 432892045, 'comment_body': 'Is this a duplicate item in the list?', 'comment_created': datetime.datetime(2020, 5, 30, 22, 25, 17, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 432892362, 'comment_body': 'Do we need this method in SuggestionEditStateContent as well?', 'comment_created': datetime.datetime(2020, 5, 30, 22, 31, 3, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 432892368, 'comment_body': 'Do we need this method in SuggestionEditStateContent as well?', 'comment_created': datetime.datetime(2020, 5, 30, 22, 31, 10, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 432892380, 'comment_body': 'Add this method in the Base class which will raise not implemented error.', 'comment_created': datetime.datetime(2020, 5, 30, 22, 31, 37, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 432892452, 'comment_body': 'Add this method in the Base class which will raise not implemented error.\r\n\r\n', 'comment_created': datetime.datetime(2020, 5, 30, 22, 32, 52, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 432892494, 'comment_body': 'Add unit tests for these methods.', 'comment_created': datetime.datetime(2020, 5, 30, 22, 33, 46, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 432893788, 'comment_body': 'Should we use `test_utils.save_new_valid_exploration` or `test_utils.save_new_linear_exp_with_state_names_and_interactions` to avoid aving this long dict and unwanted info in the test? [You can check other test files on how to do follow-up changes in exp after using these functions.]', 'comment_created': datetime.datetime(2020, 5, 30, 22, 57, 6, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 432893808, 'comment_body': 'Why are we doing this?', 'comment_created': datetime.datetime(2020, 5, 30, 22, 57, 30, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 432893858, 'comment_body': 'Ditto should we use test_utils.save_new_question?', 'comment_created': datetime.datetime(2020, 5, 30, 22, 58, 16, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 432893959, 'comment_body': ""We don't need this id from the job output right?"", 'comment_created': datetime.datetime(2020, 5, 30, 23, 0, 23, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 432893984, 'comment_body': 'WHy we need this?', 'comment_created': datetime.datetime(2020, 5, 30, 23, 0, 53, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 432894115, 'comment_body': 'Add suggestion for SuggestionEditStateContent!', 'comment_created': datetime.datetime(2020, 5, 30, 23, 3, 7, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 432894207, 'comment_body': 'Please follow the above comments for all other tests.', 'comment_created': datetime.datetime(2020, 5, 30, 23, 4, 9, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 432894325, 'comment_body': 'Will there be any issue if `convert_html_in_suggestion` would be the object property (not class property) and we will call this directly like this:\r\n`suggestion.convert_html_in_suggestion(conversion_fn)`? [not sure!]', 'comment_created': datetime.datetime(2020, 5, 30, 23, 6, 26, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 432896397, 'comment_body': 'Perhaps add a new line above this one, for readability.', 'comment_created': datetime.datetime(2020, 5, 30, 23, 50, 50, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 432896446, 'comment_body': 'Perhaps math_component or math_html_tag (depending on what is being returned)?', 'comment_created': datetime.datetime(2020, 5, 30, 23, 51, 50, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 432896528, 'comment_body': 'Give it a better name, e.g. math_tags or math_components.', 'comment_created': datetime.datetime(2020, 5, 30, 23, 53, 4, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 432896534, 'comment_body': 'Can replace all this by `return (len(math) > 0)` or `return bool(math)`', 'comment_created': datetime.datetime(2020, 5, 30, 23, 53, 16, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 432896804, 'comment_body': ""I think, somehow, the code here needs to be deduplicated with convert_html_in_rule_spec(), otherwise it'll be hard to maintain. There probably needs to be some declarative list listing the interactions and corresponding rule types and input vars that have html, and then this function and the other one should just iterate over those lists.\r\n\r\n convert_html_in_rule_spec() below should also be interaction-aware (or at least be aware of the specific rules/fields to convert). You could either pass in that info to the function, or do the conversion at a higher level which is aware of the interaction."", 'comment_created': datetime.datetime(2020, 5, 30, 23, 59, 28, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 432896866, 'comment_body': ""You don't need this line, right?"", 'comment_created': datetime.datetime(2020, 5, 31, 0, 0, 29, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 432896900, 'comment_body': 'Will last_updated change during this put()? Should it? (Add tests accordingly.)', 'comment_created': datetime.datetime(2020, 5, 31, 0, 1, 10, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 432896919, 'comment_body': 'You could just replace all this with `return [..., ...]`', 'comment_created': datetime.datetime(2020, 5, 31, 0, 1, 56, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 432896958, 'comment_body': 'Here and elsewhere, perhaps define as staticmethod if the cls is not used.', 'comment_created': datetime.datetime(2020, 5, 31, 0, 2, 38, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 432896974, 'comment_body': 'Delete extra newline.', 'comment_created': datetime.datetime(2020, 5, 31, 0, 2, 47, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 432922867, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 5, 31, 8, 25, 38, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 432922925, 'comment_body': 'It will return a boolean', 'comment_created': datetime.datetime(2020, 5, 31, 8, 26, 23, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 432922953, 'comment_body': 'Changed the docstring and function name', 'comment_created': datetime.datetime(2020, 5, 31, 8, 26, 48, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 432923035, 'comment_body': 'Yeah, the last_updated is changed during the put.\r\nI think it should update, because other migrations also update this field.\r\nAdded tests', 'comment_created': datetime.datetime(2020, 5, 31, 8, 27, 47, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 432923168, 'comment_body': ""No, we are not checking or migrating suggestions of type SuggestionEditStateContent.\r\nBecause these suggestions don't currently have RTEs, also in the future we don't plan to add them.\r\nHence we don't need this there.\r\nEdit: Sorry, I think we need to migrate the Old value HTML in SuggestionEditStateContent as well."", 'comment_created': datetime.datetime(2020, 5, 31, 8, 29, 31, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 432923189, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 5, 31, 8, 29, 48, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 432923370, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 5, 31, 8, 31, 47, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 432923372, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 5, 31, 8, 31, 53, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 432923470, 'comment_body': 'No, this is added to test the line 119, in `schema_utils.py`', 'comment_created': datetime.datetime(2020, 5, 31, 8, 33, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 432923516, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 5, 31, 8, 33, 41, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 432923521, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 5, 31, 8, 33, 47, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 432923532, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 5, 31, 8, 33, 53, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 432923537, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 5, 31, 8, 33, 57, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 432923545, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 5, 31, 8, 34, 3, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 432923548, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 5, 31, 8, 34, 7, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 432923597, 'comment_body': 'I have removed it , But I think it might be useful while generating the SVGs in milestone 2.(not sure)', 'comment_created': datetime.datetime(2020, 5, 31, 8, 34, 48, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 432923611, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 5, 31, 8, 34, 58, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 432923659, 'comment_body': 'Pls refer to this [comment](https://github.com/oppia/oppia/pull/9390#discussion_r432923168)', 'comment_created': datetime.datetime(2020, 5, 31, 8, 35, 29, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 432923686, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 5, 31, 8, 35, 45, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 432923694, 'comment_body': 'Pls refer to this [comment](https://github.com/oppia/oppia/pull/9390#discussion_r432923168)', 'comment_created': datetime.datetime(2020, 5, 31, 8, 35, 52, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 432923880, 'comment_body': ""I have checked these functions, But the problem with using those functions is that they don't support the old schema for math components and will clean the HTML. \r\nHence will cause problems in migrations.\r\n"", 'comment_created': datetime.datetime(2020, 5, 31, 8, 38, 8, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 432923908, 'comment_body': 'Same, refer to this [comment](https://github.com/oppia/oppia/pull/9390#discussion_r432923880)', 'comment_created': datetime.datetime(2020, 5, 31, 8, 38, 43, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 432923921, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 5, 31, 8, 39, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 432924053, 'comment_body': ""We need a valid thread id to be created in order for a suggestion to be submitted.\r\nPls refer to the tests in `suggestions_services_test` , It's similar to those tests."", 'comment_created': datetime.datetime(2020, 5, 31, 8, 40, 46, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 432924117, 'comment_body': 'Pls refer to this [comment](https://github.com/oppia/oppia/pull/9390#discussion_r432852227)', 'comment_created': datetime.datetime(2020, 5, 31, 8, 41, 36, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 432924129, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 5, 31, 8, 41, 48, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 432924136, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 5, 31, 8, 41, 55, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 432924149, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 5, 31, 8, 41, 59, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 432924155, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 5, 31, 8, 42, 6, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 432924161, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 5, 31, 8, 42, 12, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 432924173, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 5, 31, 8, 42, 19, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 432924192, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 5, 31, 8, 42, 30, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 432924197, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 5, 31, 8, 42, 35, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 432924338, 'comment_body': '@seanlip , I have tried to reduce the duplication.\r\n\r\n> convert_html_in_rule_spec() below should also be interaction-aware\r\n\r\nThe problem is that this function is used for migrating draft_change_list, but the draft_change list has no reference to interaction type.', 'comment_created': datetime.datetime(2020, 5, 31, 8, 44, 44, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 432929120, 'comment_body': 'In order to create a suggestion, we need to generate a thread ID, this function generates a thread ID.\r\nPls, refer to tests in `suggestion_services_test.py`, there too this approach is used.', 'comment_created': datetime.datetime(2020, 5, 31, 9, 47, 30, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 432930712, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 5, 31, 10, 7, 54, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 432930726, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 5, 31, 10, 7, 59, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 432958257, 'comment_body': 'done , added the method', 'comment_created': datetime.datetime(2020, 5, 31, 15, 32, 42, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 432958263, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 5, 31, 15, 32, 50, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 432958286, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 5, 31, 15, 33, 7, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 432963500, 'comment_body': 'But I see a similar item on line 532, are they different?', 'comment_created': datetime.datetime(2020, 5, 31, 16, 38, 54, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 432963634, 'comment_body': 'Ah, I see thanks for the explanation!', 'comment_created': datetime.datetime(2020, 5, 31, 16, 40, 45, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 432964544, 'comment_body': 'removed it.', 'comment_created': datetime.datetime(2020, 5, 31, 16, 52, 44, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 432964631, 'comment_body': 'break line after `{`', 'comment_created': datetime.datetime(2020, 5, 31, 16, 53, 52, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 432964665, 'comment_body': 'Ditto break after `{`', 'comment_created': datetime.datetime(2020, 5, 31, 16, 54, 11, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 432964834, 'comment_body': ""avoid using pragma:\r\n```\r\n                        'rule_type': (\r\n                            'IsEqualToOrderingWithOneItemAtIncorrectPosition',\r\n```\r\n\r\nAlso, any specific reason for `disable=protected-access`"", 'comment_created': datetime.datetime(2020, 5, 31, 16, 56, 5, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 432964892, 'comment_body': 'Ditto', 'comment_created': datetime.datetime(2020, 5, 31, 16, 56, 53, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 432964934, 'comment_body': 'Break line after `{`', 'comment_created': datetime.datetime(2020, 5, 31, 16, 57, 26, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 432965221, 'comment_body': 'Should we close the issue?', 'comment_created': datetime.datetime(2020, 5, 31, 17, 0, 49, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 432965449, 'comment_body': 'avoid pragma!', 'comment_created': datetime.datetime(2020, 5, 31, 17, 4, 19, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 432965482, 'comment_body': 'break line after `{` here and elsewhere', 'comment_created': datetime.datetime(2020, 5, 31, 17, 4, 40, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 432965509, 'comment_body': 'ditto', 'comment_created': datetime.datetime(2020, 5, 31, 17, 5, 1, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 432968819, 'comment_body': ""Move `'feedback': {` to next line. (Ditto below)"", 'comment_created': datetime.datetime(2020, 5, 31, 17, 48, 57, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 432968886, 'comment_body': 'This is not mock, right? Remove it!', 'comment_created': datetime.datetime(2020, 5, 31, 17, 49, 49, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 432968917, 'comment_body': 'Ditto', 'comment_created': datetime.datetime(2020, 5, 31, 17, 50, 6, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 432969173, 'comment_body': 'Should we make this yield (key, len(values)) [As we expect to yield key-value pair]', 'comment_created': datetime.datetime(2020, 5, 31, 17, 52, 47, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 432969583, 'comment_body': 'Add this in the same orders as the param', 'comment_created': datetime.datetime(2020, 5, 31, 17, 57, 39, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 432969590, 'comment_body': 'Add newline above', 'comment_created': datetime.datetime(2020, 5, 31, 17, 57, 47, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 432969704, 'comment_body': 'Why it returns an object not a dict? (Make sure to update docstring accordingly)', 'comment_created': datetime.datetime(2020, 5, 31, 17, 59, 28, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 432969761, 'comment_body': 'Add test for the other method', 'comment_created': datetime.datetime(2020, 5, 31, 18, 0, 11, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 432969845, 'comment_body': 'Add test for this class (Make sure the unit test coverage is 100% for the domain layer.)', 'comment_created': datetime.datetime(2020, 5, 31, 18, 1, 15, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 432969863, 'comment_body': 'Test other method', 'comment_created': datetime.datetime(2020, 5, 31, 18, 1, 30, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 432969912, 'comment_body': 'Do we need the parenthesis here?', 'comment_created': datetime.datetime(2020, 5, 31, 18, 2, 11, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 433002510, 'comment_body': ""Here Key is not very useful (It's a constant string). So I don't think Its needed."", 'comment_created': datetime.datetime(2020, 6, 1, 0, 44, 22, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 433002831, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 6, 1, 0, 46, 46, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 433002839, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 6, 1, 0, 46, 51, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 433002850, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 6, 1, 0, 46, 55, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 433002857, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 6, 1, 0, 47, 1, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 433002876, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 6, 1, 0, 47, 7, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 433002919, 'comment_body': 'Yeah we can close it after this PR gets merged.', 'comment_created': datetime.datetime(2020, 6, 1, 0, 47, 29, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 433002929, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 6, 1, 0, 47, 34, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 433002950, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 6, 1, 0, 47, 40, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 433002967, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 6, 1, 0, 47, 46, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 433002973, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 6, 1, 0, 47, 50, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 433002987, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 6, 1, 0, 47, 56, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 433002992, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 6, 1, 0, 48, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 433003001, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 6, 1, 0, 48, 6, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 433003010, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 6, 1, 0, 48, 10, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 433003034, 'comment_body': 'Changed the docstring, done', 'comment_created': datetime.datetime(2020, 6, 1, 0, 48, 21, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 433003049, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 6, 1, 0, 48, 26, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 433003058, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 6, 1, 0, 48, 34, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 433003070, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 6, 1, 0, 48, 40, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 433003088, 'comment_body': 'removed done', 'comment_created': datetime.datetime(2020, 6, 1, 0, 48, 47, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 433003978, 'comment_body': ""Shouldn't it be plural: math_tags?\r\n\r\nPlease check the other cases of findAll -- this is important to avoid confusion."", 'comment_created': datetime.datetime(2020, 6, 1, 0, 56, 54, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 433004892, 'comment_body': 'Alas, I think what you have here is even messier than the previous iteration.\r\n\r\nLet\'s take it back to what it was before. I take your point about convert_html_in_rule_spec() being used in migrating draft_change_list in which it has no reference to interaction type. This sounds like it needs a refactor of how we handle change lists which is broader than the scope of this PR. Could you therefore please do the following:\r\n\r\n(a) file an issue for including the interaction ID with the change dict when updating an interaction\'s rules (or anything else that depends on the interaction ID) -- reply to this comment with the issue number when you\'ve done that. Please try to make the issue as clear and descriptive as possible, with regards to what the problem is.\r\n\r\n(b) Add a comment in the places you\'re duplicating the selection logic, saying ""NOTE TO DEVELOPERS: This logic needs to be kept in sync with [these other places in the code -- insert relevant places here]. We cannot make this declarative until issue #XXX has been fixed, because YYY."" and point to the issue in (a).\r\n\r\nThanks!', 'comment_created': datetime.datetime(2020, 6, 1, 1, 4, 12, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 433075398, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 6, 1, 7, 8, 51, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 433075496, 'comment_body': 'done, created the issue: #9413 ', 'comment_created': datetime.datetime(2020, 6, 1, 7, 9, 15, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 434885076, 'comment_body': 'Can you please add ""fixes #7009"" in the PR explanation section? (Github will automatically close the issue once this PR will be merged!)', 'comment_created': datetime.datetime(2020, 6, 3, 22, 8, 15, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 435911170, 'comment_body': ""Can't you make this a function on the object itself? You are taking a part of the object and setting a part of the object, so I think it would be more sensible to make it a function on the object instead of a classmethod."", 'comment_created': datetime.datetime(2020, 6, 5, 13, 12, 17, tzinfo=datetime.timezone.utc), 'commenter': 'nithusha21', 'type': 'User'}, {'comment_id': 435911552, 'comment_body': ""I don't think it should update the last updated field... You can perform the migration without affecting the last updated field I think..."", 'comment_created': datetime.datetime(2020, 6, 5, 13, 13, 1, tzinfo=datetime.timezone.utc), 'commenter': 'nithusha21', 'type': 'User'}, {'comment_id': 435913563, 'comment_body': 'Actually, the only suggestion with production data is probably SuggestionEditStateContent. The other suggestions are part of the community dashboard which was released, but I am not sure if they have data yet... This is just FYI...', 'comment_created': datetime.datetime(2020, 6, 5, 13, 16, 52, tzinfo=datetime.timezone.utc), 'commenter': 'nithusha21', 'type': 'User'}, {'comment_id': 435956121, 'comment_body': ""@nithusha21, we had discussed this point before pls refer [here](https://github.com/oppia/oppia/pull/9390/#discussion_r432852227).\r\nAlso, this function doesn't modify the object, it just takes a dict, converts a dict and returns a change object.\r\nIt doesn't modify the object.\r\nAlso this can complicate testing this method."", 'comment_created': datetime.datetime(2020, 6, 5, 14, 22, 47, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 435960502, 'comment_body': ""Actually... I don't quite agree. It is safer to edit the object from functions in this object. You are anyway overwriting the  property in a foreign function which IMO is more unsafe than editing it directly. Also I don't get the idea behind not changing objects properties within a public function. That's the basic premise of making object functions right? Because then you restrict what edits can be performed on the object and provide interfaces (functions) to make those changes. "", 'comment_created': datetime.datetime(2020, 6, 5, 14, 29, 40, tzinfo=datetime.timezone.utc), 'commenter': 'nithusha21', 'type': 'User'}, {'comment_id': 436078393, 'comment_body': '```suggestion\r\n        if html_validation_service.is_math_component_in_html(\r\n```', 'comment_created': datetime.datetime(2020, 6, 5, 18, 0, 41, tzinfo=datetime.timezone.utc), 'commenter': 'nithusha21', 'type': 'User'}, {'comment_id': 436080210, 'comment_body': 'I think you should have 2 different error keys. This will make it easier to read the output. ', 'comment_created': datetime.datetime(2020, 6, 5, 18, 4, 26, tzinfo=datetime.timezone.utc), 'commenter': 'nithusha21', 'type': 'User'}, {'comment_id': 436080876, 'comment_body': 'This looks way better thanks!', 'comment_created': datetime.datetime(2020, 6, 5, 18, 5, 46, tzinfo=datetime.timezone.utc), 'commenter': 'nithusha21', 'type': 'User'}, {'comment_id': 436083979, 'comment_body': ""Just confirming, last_updated will not change during this right? That isn't desired specifically for suggestion/feedback models, because of 2 things... Firstly, we display the timestamp in the UI based on the last updated field and updating it in the job would mess up things. We order the suggestions based on the last updated field and surface the most recent ones higher up. If last updated is overwritten, this would get messed up too..."", 'comment_created': datetime.datetime(2020, 6, 5, 18, 10, 27, tzinfo=datetime.timezone.utc), 'commenter': 'nithusha21', 'type': 'User'}, {'comment_id': 438559424, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 6, 11, 6, 0, 28, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 438559445, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 6, 11, 6, 0, 34, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 445343758, 'comment_body': 'Not sure I understand this, since we no longer use textangular? Our RTE is CKEditor.', 'comment_created': datetime.datetime(2020, 6, 25, 6, 54, 11, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 445344146, 'comment_body': 'Misspelled ""normalized"".', 'comment_created': datetime.datetime(2020, 6, 25, 6, 55, 15, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 445375302, 'comment_body': ""Note that this sort of audit is not very useful at all. At the very least you should provide info about the suggestions which do have math components so that they can be investigated.\r\n\r\nIn general, have your jobs be informative. It's hard to run them so you don't want to keep going back to the drawing board."", 'comment_created': datetime.datetime(2020, 6, 25, 7, 57, 2, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 445375421, 'comment_body': 'Insert newline above this one.', 'comment_created': datetime.datetime(2020, 6, 25, 7, 57, 14, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 445379527, 'comment_body': ""What's up with this? Why is it needed? It seems similar to the line above."", 'comment_created': datetime.datetime(2020, 6, 25, 8, 4, 47, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 445380328, 'comment_body': 'Please explain how you generated these changes.\r\n\r\nShould there be a schema version change somewhere?', 'comment_created': datetime.datetime(2020, 6, 25, 8, 6, 7, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 445390787, 'comment_body': ""Earlier, the dot-notation was used to access the inner elements of  `mathContent` object so we didn't need this lint disabling. But recently, there was a lint check to allow only camelcase keys to be defined without enclosing them in quotes.\r\nSo while defining interfaces for backend dict, we have to enclose them in quotes and disable the lint check which allows only dot-notation.\r\nThe lint check doesn't catch the line above for some reason not sure why."", 'comment_created': datetime.datetime(2020, 6, 25, 8, 24, 22, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 445424161, 'comment_body': 'Perhaps dig into that -- check with @nishantwrp? The inconsistency is a bit weird. ', 'comment_created': datetime.datetime(2020, 6, 25, 9, 21, 33, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 445456586, 'comment_body': 'Hi @donosco98,\r\n\r\nIf the interface has properties wrapped around quotes. You can still use `dot-notation`. So,\r\nhere `mathContent.raw_latex` would work fine!', 'comment_created': datetime.datetime(2020, 6, 25, 10, 19, 8, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 445940946, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 6, 26, 2, 50, 58, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 445941029, 'comment_body': 'done, added the suggestion_id in the output', 'comment_created': datetime.datetime(2020, 6, 26, 2, 51, 17, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 445941317, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 6, 26, 2, 52, 39, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 445941340, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 6, 26, 2, 52, 45, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 445941542, 'comment_body': 'Sorry, I realized this change is not required, the YAML files also will get migrated on the fly when you load them.\r\nRemoved this change', 'comment_created': datetime.datetime(2020, 6, 26, 2, 53, 45, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 445942007, 'comment_body': 'This is required for passing some of the tests written for migrating from textangular to CKeditor in exp_domain_test,py, this is what I meant.\r\n', 'comment_created': datetime.datetime(2020, 6, 26, 2, 55, 50, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 446415023, 'comment_body': '@donosco98 Can you add these new services to a file called `oppia-angular-root.component.ts`. you can find the steps for the same [here](https://github.com/oppia/oppia/wiki/Angular-Migration#implementation-details-to-migrate-services), under point number 12.', 'comment_created': datetime.datetime(2020, 6, 26, 21, 19, 54, tzinfo=datetime.timezone.utc), 'commenter': 'srijanreddy98', 'type': 'User'}, {'comment_id': 446421622, 'comment_body': 'Hi @srijanreddy98 , `SpeechSynthesisChunkerService` and `htmlEscaperService` are already added in the file you mentioned.', 'comment_created': datetime.datetime(2020, 6, 26, 21, 36, 56, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 446473827, 'comment_body': 'Oh, in that case, I have no further concerns.', 'comment_created': datetime.datetime(2020, 6, 27, 2, 32, 38, tzinfo=datetime.timezone.utc), 'commenter': 'srijanreddy98', 'type': 'User'}]","[{'commit_sha': '4fe0da8c6256d978e9f0df4d2060c6d828468dff', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c483ae43cd503770f5a972390afd62bab615cd5e', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '02af81c986d093c48a172aefbecad4c7f0fb9153', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f4e0756ea707c1055719893ed70c83c95901df05', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4ce30892990a02cfa6f83d25dd61c6c34f3ce71e', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7b0bcc2090ae0e4b85758071035eae0743adf53d', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a1c85f5a42e0187f011ce406cc6c97434f54313e', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1920263793c8a2f038034dc1170a3a3beaf13415', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ef7eb5de160f773323cd9ed25a2fdef24646dfb7', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '34fa3d69cb8a575936ea205152273f8c6031f020', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6d25c248ea2bbbf757d2ac44e07bea5c4ada0e91', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6a4350f66df9021fead445f2bfb7a58e6f1d19ab', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ae3a2321126f59de67bf13c0c2490aacd4066c3b', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd457a22e77ca5b9e67e83ae4b0711c4d405b9e14', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e76d557d3bcd6141ab3ee6b5afdea3eb1d9c0e75', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f3a5cdc3f972af6f76450db808e14f814fa6ff15', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '91c11e09b1d28342c0555420c240bc93dcb112cd', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '090cbcca622b7a5799098d5e48a181e637053acd', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '41dd39a62ac208ed597e01dd4b53b72b9418ab76', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cf1110e5a14d6aa6d9211d28cf4a377d8d1b3a2b', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd170577e67e9897ab3de5c9fcaabfd65f67ea83c', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dff18d84192553e151f0a1d39a0fe9757f955882', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '82ae88c79fd2b72b556bce5e4804b04545078251', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6cd8b5c7fe12008559b7fca27c6eb8f39a18bdb9', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '88cf38d4ebbe6e972ecf8b5cdda1af9882f98f66', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd616c4fb0c6bddeea1d6be97640793fdf4a197be', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '843872f71a959044768076f58f7a2944f4d49271', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a75b662c71ec5f1a48d2342930a398aae24d3c27', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4238c862d2cdb7f09e41320c998aa0e27d90ef75', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6b0b7e486b2f01787b3ec85e4fb1adf92b1b9673', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '31e4da839072ea061ca641d9086441dea997ad4c', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6f9799cea5649b32f05efb2551e6e0fb44d8fc99', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4f35cb7a4def367efa7768c07901b981f7c4d4cf', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6c277890bbd63d7d063ca26e31935b53e39e0a14', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c5beb976db581ff817c43824a7f3b1a0f8190ceb', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5114e3fd3b9f4112db83536bdfa0dd59ef5957e5', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5dd0d76c2908661d3d748018a85f033fd08bdbe4', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5a3c4a9d150e869929dae15329cf9c755147bb67', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f2430885e2841d5338b2279744d6f784e461e2c4', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a7419f35dcf033206a34edc208d9084c004c65b2', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '358b96f38c73847969746b8cfbd55471fddfd541', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e1b36a0073a153f554f1bdcc4c2578c70cf8d54c', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '324565449f85b9b385b2597e12a562e1f3475c20', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f397d63d6407766cb3c0c6b6064233946f76beec', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a22dfb651eb080f8094e4d86835ef121f88bf694', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c8595423a646b2e2e6bdf02edbfb8c2beb764f58', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4b2a0f117831837ac9b242473c42bff50ba90432', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '099699faa8a4c2c8f344634adea3645112da6048', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b126d24f4caca7a04e32bc53525612b99921bf31', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a1af5b357c9b7f8ac1ac4da95118faf8795b73a0', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0ebcb92addcc28ae0904176a747e24a5d71d545b', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '372248f2792d6e23d6ce29983e29a20896526070', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '02e61d97730595cb3cbc3b8cfcf4a4160ca59e08', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2fba9d1db443bc252d1b53b5a3eb9dd8609ef506', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6af506620de86018d0b08a9aef590f077f640f26', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '430f2f640a949eb0e01dbcea1a65b4099e0a4e42', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f7e8cb9e55ddf946c81b74941a1580456c951618', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e6a4504fd05ee3997ae3e5b65bed6ac3b10239a9', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c670ac6de2d01e521d717fe62f7ad50663e2a7a8', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f897b72fdf60a010047320aec491773906a2b93c', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1bd1ef44213e075341f261d9c64a5f83d4968aae', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cfd27f4f31f199a26ce0213d1692e1506ab7310d', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c038980e6200ac0fd5c3575a6ef5ee90bd73fbd2', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e462fdb2071f91f1b92392d3386c24c69e3a976c', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '226972dd5b6bb3a45c75aa3369693c57fb6b71d3', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a3852d0fe8633af8f081a951a480bbb7e75d4b4a', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'db74823fccad928e0d6d8c00537956d635182414', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '180f76f02820000902bcb3686ccd538c3374663c', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '82f5ae54bf48be02a4a9d4a5dc4a7a1a78030f6e', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b66272d53b9b71dff8caf178b3f771c1014bc3e3', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cff324d114efa8abeb5ff28c67e1472b215e9a82', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8c763db367569fd9b3c06516b9657a129e11ed30', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0407d9f7d50dea2c0d3cfc0b5f4af28b742bd550', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2373401a2662fec074725c8fd310b69a213be9be', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '11ec157cc6f2d2440511933c40a9e5a4dc46af0c', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7a7d4bba5c4fb0b1395abae89b3058a6fdae7b35', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '117767e5249af444874df7d221f2fe8ba09ff743', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e1e1cc89d3a4633fd7fed7e0f5cbdc0aa40a808d', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e4a3c6d0adc082cef39b43a447fc7e2657c5ce76', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fa9d0163b75f6fcf6ecb5a9b1d99df279a4ce1ec', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '90b31c3fd9bf0300a94254df6e7d286646c233cf', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0f4682685f988600461e0a0b84a806beaf21260a', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}]",Abhith Krishna,31371571,,User,,33,,5,5
433990710,Added validation jobs for math expressions in Explorations and draft change lists.,"## Overview
<!--
READ ME FIRST:
Please answer *both* questions below and check off every point from the Essential Checklist!
If there is no corresponding issue number, fill in N/A where it says [fill_in_number_here] below in 1.
-->
**NOTE TO THE RELEASE CO-ORDINATOR**
This PR contains all the validation jobs to be run before we migrate to the new math-schema.
Hence this PR needs to be cherry-picked and merged for this release. The job `ExplorationMathTagValidationOneOffJob` is already run on the backup.

1. This PR fixes or fixes part of #[fill_in_number_here].
2. This PR does the following: Added validation jobs for math expressions in Explorations and draft change lists.

## Essential Checklist

- [ ] The PR title starts with ""Fix #bugnum: "", followed by a short, clear summary of the changes. (If this PR fixes part of an issue, prefix the title with ""Fix part of #bugnum: ..."".)
- [x] The linter/Karma presubmit checks have passed locally on your machine.
- [x] ""Allow edits from maintainers"" is checked. (See [here](https://help.github.com/en/github/collaborating-with-issues-and-pull-requests/allowing-changes-to-a-pull-request-branch-created-from-a-fork) for instructions on how to enable it.)
  - This lets reviewers restart your CircleCI tests for you.
- [x] The PR is made from a branch that's **not** called ""develop"".

## PR Pointers

- Oppiabot will notify you when you don't add a PR_CHANGELOG label. If you are unable to do so, please @-mention a code owner (who will be in the Reviewers list), or ask on [Gitter](https://gitter.im/oppia/oppia-chat).
- For what code owners will expect, see the [Code Owner's wiki page](https://github.com/oppia/oppia/wiki/Oppia%27s-code-owners-and-checks-to-be-carried-out-by-developers).
- Make sure your PR follows conventions in the [style guide](https://github.com/oppia/oppia/wiki/Coding-style-guide), otherwise this will lead to review delays
- Never force push. If you do, your PR will be closed.
",True,9517,https://api.github.com/repos/oppia/oppia/pulls/9517,https://github.com/oppia/oppia/pull/9517,closed,1767,36,10,59,35,211,1,2,[{'name': 'PR: Affects datastore layer'}],2020-06-13 10:46:57+00:00,2020-06-24 19:32:32+00:00,981935.0,"11 days, 8:45:35","[{'comment_id': 439746089, 'comment_body': 'exploration_status*', 'comment_created': datetime.datetime(2020, 6, 13, 15, 10, 52, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 439746244, 'comment_body': 'state_name*', 'comment_created': datetime.datetime(2020, 6, 13, 15, 12, 36, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 439769126, 'comment_body': 'is adding the `last_updated_time` to the output helpful here?', 'comment_created': datetime.datetime(2020, 6, 13, 21, 5, 40, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 439769347, 'comment_body': ""You don't need the exp rights, I think? Or if you need specific fields from that, just yield the specific fields.\r\n\r\nAlso you should not be fetching models in a for loop. Do it once at the outset instead. Always think about performance."", 'comment_created': datetime.datetime(2020, 6, 13, 21, 10, 9, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 439769366, 'comment_body': ""This could cause you to run into bugs. I suggest you don't do any string casting here."", 'comment_created': datetime.datetime(2020, 6, 13, 21, 10, 25, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 439769427, 'comment_body': ""You'll need to make a custom domain object if you want to do this. It may be simpler to just have a string representation of the math tag be part of the error message."", 'comment_created': datetime.datetime(2020, 6, 13, 21, 11, 26, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 439769460, 'comment_body': 'Not really', 'comment_created': datetime.datetime(2020, 6, 13, 21, 12, 6, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 439769494, 'comment_body': 'Deindent this and the following lines by 4. As a general rule, always have the indentation level of the closing bracket match that of the opening one.', 'comment_created': datetime.datetime(2020, 6, 13, 21, 12, 35, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 439769555, 'comment_body': 'Do you also need to output a string representation of the invalid tag?', 'comment_created': datetime.datetime(2020, 6, 13, 21, 13, 30, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 439772129, 'comment_body': ""> You don't need the exp rights, I think? Or if you need specific fields from that, just yield the specific fields.\r\n\r\n@DubeySandeep suggested that I might not be allowed to use the data from private explorations, that is the reason I added this. Should I still keep it or is it not needed?.\r\n\r\n> Also you should not be fetching models in a for loop. Do it once at the outset instead\r\n\r\nI didn't completely get which lines are you referring to here, can you mention which lines?.\r\n"", 'comment_created': datetime.datetime(2020, 6, 13, 21, 53, 10, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 439795216, 'comment_body': 'How the state name would be helpful?', 'comment_created': datetime.datetime(2020, 6, 14, 5, 59, 40, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 439795443, 'comment_body': 'Make sure that this all the html strings present in exploration.', 'comment_created': datetime.datetime(2020, 6, 14, 6, 3, 12, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 439795509, 'comment_body': 'is this info required?', 'comment_created': datetime.datetime(2020, 6, 14, 6, 4, 59, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 439795542, 'comment_body': 'should we move this to the value (not key)?', 'comment_created': datetime.datetime(2020, 6, 14, 6, 5, 29, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 439795587, 'comment_body': 'Do we need the status of the exploration here?', 'comment_created': datetime.datetime(2020, 6, 14, 6, 6, 2, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 439795717, 'comment_body': '@donosco98 `rights_manager.get_exploration_rights` makes DataStore call and you have this code in for loop, fetch the status before the for loop! is that helpful?', 'comment_created': datetime.datetime(2020, 6, 14, 6, 9, 5, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 439796190, 'comment_body': ""Assume someone has very old drafts for which we don't have the conversion methods and we expect them to be discarded eventually so do we want to audit those draft change list? if yes, then do we want to fix them (considering we don't have a cob=version method for them I don't think we can)? if now, then I think we should have some info to indicate that the draft change list belongs to a very old exp/state schema. "", 'comment_created': datetime.datetime(2020, 6, 14, 6, 17, 40, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 439799119, 'comment_body': ""Oh I see, in which case should you then not be outputting the exp/state schema instead? But sure, if you want to output the last updated time to it, I don't have an objection, it isn't sensitive data and can give us some idea of the recency of the changes."", 'comment_created': datetime.datetime(2020, 6, 14, 7, 6, 28, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 439800187, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 6, 14, 7, 23, 8, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 439800193, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 6, 14, 7, 23, 16, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 439800208, 'comment_body': 'added only the invalid tag as the part of error message.', 'comment_created': datetime.datetime(2020, 6, 14, 7, 23, 37, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 439800214, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 6, 14, 7, 23, 44, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 439800238, 'comment_body': ""It's already included in the error_list"", 'comment_created': datetime.datetime(2020, 6, 14, 7, 24, 7, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 439800246, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 6, 14, 7, 24, 13, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 439800248, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 6, 14, 7, 24, 18, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 439804246, 'comment_body': 'removed the user_id', 'comment_created': datetime.datetime(2020, 6, 14, 8, 17, 55, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 439804267, 'comment_body': 'done, moved to value', 'comment_created': datetime.datetime(2020, 6, 14, 8, 18, 6, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 439804281, 'comment_body': 'done, added', 'comment_created': datetime.datetime(2020, 6, 14, 8, 18, 15, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 439804306, 'comment_body': 'the state name might be useful when the explorations have many states(also for manual inspection if required).', 'comment_created': datetime.datetime(2020, 6, 14, 8, 18, 37, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 439807406, 'comment_body': 'Yeah, I have verified them.', 'comment_created': datetime.datetime(2020, 6, 14, 8, 58, 20, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 439807557, 'comment_body': ""I've added the last_updated field too.\r\n\r\n> in which case should you then not be outputting the exp/state schema instead?\r\n\r\nDo you mean the state schema version number?"", 'comment_created': datetime.datetime(2020, 6, 14, 9, 0, 34, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 439809182, 'comment_body': 'Missing docstring', 'comment_created': datetime.datetime(2020, 6, 14, 9, 20, 29, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 439809672, 'comment_body': ""Do the following instead, for future-proofing:\r\n\r\n- Make a constant with several lists of tuples mapping type to (interaction id, rule type, param name). E.g. {'ListOfSetsOfHtmlString': [('DragAndDropSortInput', 'IsEqualToOrdering', 'x'), ...], ...}\r\n- Have a backend test to rederive that constant from extensions/rule_templates.json and verify it's correct.\r\n- In this method, iterate over that constant to figure out the assembly of the html list."", 'comment_created': datetime.datetime(2020, 6, 14, 9, 26, 45, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 439809763, 'comment_body': 'Normally the first item in the yielded 2-tuple is a string which you use for grouping. Everything else should go in the value.', 'comment_created': datetime.datetime(2020, 6, 14, 9, 27, 57, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 439822770, 'comment_body': ""@seanlip , we had discussed earlier that this is currently not possible because this method will be used for draft changes too and draft changes don't have access to interaction id.\r\npls refer [comment](https://github.com/oppia/oppia/pull/9390#discussion_r433004892)"", 'comment_created': datetime.datetime(2020, 6, 14, 12, 3, 51, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 439822805, 'comment_body': 'perhaps I can add a docstring explaining the reason.', 'comment_created': datetime.datetime(2020, 6, 14, 12, 4, 26, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 439830687, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 6, 14, 13, 35, 30, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 439830698, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 6, 14, 13, 35, 36, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 439875341, 'comment_body': 'Test docstrings should start with ""Test that"". Please fix, here and (possibly) elsewhere.', 'comment_created': datetime.datetime(2020, 6, 14, 22, 48, 12, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 439875464, 'comment_body': 'You can still use the approach mentioned above. Just look at the rule types and param names (as you\'re doing here), and add a comment explaining why we aren\'t using the ""interaction id"" part. The main thing is to make it more declarative rather than have lots of special-casing for particular types of interactions within the main code.', 'comment_created': datetime.datetime(2020, 6, 14, 22, 49, 43, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 440066081, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 6, 15, 10, 1, 39, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 440066367, 'comment_body': 'igure --> figure', 'comment_created': datetime.datetime(2020, 6, 15, 10, 2, 11, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 440066552, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 6, 15, 10, 2, 34, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 440066847, 'comment_body': 'Write this as ""TODO(#9413): ..."" and make it an imperative, explaining what exactly needs to be done. Put the ""We cannot use..."" section as part of the general comment above it.', 'comment_created': datetime.datetime(2020, 6, 15, 10, 3, 4, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 440067536, 'comment_body': 'This is conceptually incorrect. Each key here so far represents an interaction, and this is not an interaction. You should make a separate json file for it.', 'comment_created': datetime.datetime(2020, 6, 15, 10, 4, 11, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 440067935, 'comment_body': ""On reflection, I suggest that you make these dicts instead with keys interaction_id, rule_name, input_variable. Otherwise it's not very readable (you have to do x[1]). Sorry for not realizing this before.\r\n\r\nMake sure that your backend tests rigorously check the format of this file and all subparts of it."", 'comment_created': datetime.datetime(2020, 6, 15, 10, 4, 56, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 440068464, 'comment_body': ""This is wrong. You should compare the new file against the existing rule_templates.json file and programmatically ensure they are consistent (based on the parsing the object types from rule_templates.json, and nothing else). There should not be any rule names or interaction IDs hardcoded in this test -- this test should work for comparing an arbitrary rule_templates.json and the newly-added file.\r\n\r\nAlso make sure to fully verify the new file's format."", 'comment_created': datetime.datetime(2020, 6, 15, 10, 5, 49, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 440068745, 'comment_body': 'Please explain this change.', 'comment_created': datetime.datetime(2020, 6, 15, 10, 6, 18, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 440069555, 'comment_body': ""Add an additional key to the dicts in the new file saying something like `format: 'list'` or `format: 'string'`. Then here, have something like: if format == 'list': ... elif format == 'string': ... else raise Exception. \r\n\r\nBasically, this method needs to be as generic as possible."", 'comment_created': datetime.datetime(2020, 6, 15, 10, 7, 49, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 440265597, 'comment_body': ""Here we are checking the type of the `rule_specs.inputs['x']` because the rule type `Equals`(which belongs to `SetOfHtmlString`) is used by other interactions as well(we are interested in only `ItemSelectionInput` ) and we don't have a reference to the interaction ID(this is the only way to differentiate these interactions which use the rule type `Equals`).\r\nAdding the format in the new file won't help here because we have to check the type of rule_specs.inputs['x'] anyway. "", 'comment_created': datetime.datetime(2020, 6, 15, 15, 36, 27, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 440266034, 'comment_body': 'removed it (it was unnecessary).', 'comment_created': datetime.datetime(2020, 6, 15, 15, 37, 7, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 440266103, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 6, 15, 15, 37, 13, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 440266158, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 6, 15, 15, 37, 18, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 440266241, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 6, 15, 15, 37, 24, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 440266378, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 6, 15, 15, 37, 34, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 440266583, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 6, 15, 15, 37, 54, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 440552950, 'comment_body': 'Methods within the same class should be separated by a single newline, not two. Ditto elsewhere in this PR, and also future PRs.', 'comment_created': datetime.datetime(2020, 6, 16, 2, 39, 7, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 440554289, 'comment_body': 'Can you do some sort of assertion on the actual tags? Just counting them is a bit weak.', 'comment_created': datetime.datetime(2020, 6, 16, 2, 44, 22, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 440554734, 'comment_body': 'This test does not appear to have any assertions.\r\n\r\nPlease follow the test guidelines [here](https://github.com/oppia/oppia/wiki/Writing-backend-tests#guidelines-for-writing-good-tests) carefully. It is important to have the correct structure (especially in terms of pre- and post-assertions).', 'comment_created': datetime.datetime(2020, 6, 16, 2, 45, 51, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 440554974, 'comment_body': 'Add space after colon.', 'comment_created': datetime.datetime(2020, 6, 16, 2, 46, 46, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 440557697, 'comment_body': ""I get that, and I agree you'll need to check the type of rule_specs.inputs['x']. But the point is to avoid defining these sorts of things in the code. If you have all the info declared declaratively in the dict, then you should be able to get rid of this repetitive code and do something like an inner loop in the for loop after it, something along these lines:\r\n\r\n```\r\nfor rule_spec in self.rule_specs:\r\n    match_found = False\r\n    for field_type, interaction_and_rule_details in rules_html_mapping_dict.iteritems():\r\n        if rule_spec.rule_type in interaction_and_rule_details['ruleTypes'].keys():\r\n            match_found = True\r\n            if format == 'string': # do something\r\n            elif format == 'list': # do something else\r\n            else raise Exception(...)\r\n            break\r\n    if not match_found:\r\n        raise Exception(...)\r\n```\r\n\r\nand that way you won't have any extension-specific logic in the main code. Does that make sense, or am I missing something here? Everything that is extension-specific (including x, y, etc.) should be defined with the json dict as the sole source of truth; this function only provides the manipulation logic to process it."", 'comment_created': datetime.datetime(2020, 6, 16, 2, 57, 46, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 440558485, 'comment_body': ""Name seems off. Make sure they match the feconf constant and accurately describe the contents of the file. \r\nPerhaps HTML_FIELD_TYPES_TO_RULE_SPECS and RULE_DESCRIPTIONS? (The last one ought to be RULE not RULES, but it's optional to change it in this PR.)\r\n\r\nAlso, the main point I wanted to make is that if the filepath is called RULES_DESCRIPTIONS_FILE_PATH then this dict should be called rules_descriptions_dict (or similar). Don't use two different names for the same concept."", 'comment_created': datetime.datetime(2020, 6, 16, 3, 1, 25, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 440558841, 'comment_body': ""Assert the entire structure of the dict fully. Your validation here doesn't guard against, e.g., extra keys that are siblings to inputVariable.\r\n\r\nOne clean way to do this would probably be to use schema_utils.normalize_against_schema() (and compare the result to the original), then follow that by additional validations that can't be represented in that form. With isolated checks like this, you run the risk of missing some (as you already have)."", 'comment_created': datetime.datetime(2020, 6, 16, 3, 3, 4, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 440559205, 'comment_body': 'I\'m not really sure that this is a ""rule specs html"" mapping, since that implies that there\'s actual html somewhere. See comments above for a suggested name, but feel free to change that if you can find a name that conveys what this file actually is more clearly.', 'comment_created': datetime.datetime(2020, 6, 16, 3, 4, 52, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 440559307, 'comment_body': ""Should be inputVariables because it's a list, right?\r\n\r\nOr maybe htmlInputVariables?"", 'comment_created': datetime.datetime(2020, 6, 16, 3, 5, 16, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 440559465, 'comment_body': 'Not only that, you also need to verify that what\'s in the html mapping dict is exactly the variables in the rules templates json file that are html-related, and no others.\r\n\r\nI think one way you can do this is to compute all types that have ""html"" in them, and then generate the new dict programmatically. Then compare what you generate to the actual file that is stored.\r\n\r\nThe reason this is important is to ensure that, if someone else adds an interaction with an html field, they are forced to update the new file too.', 'comment_created': datetime.datetime(2020, 6, 16, 3, 5, 51, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 440811801, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 6, 16, 12, 30, 45, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 440811880, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 6, 16, 12, 30, 52, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 440812670, 'comment_body': ""the method `run_job_for_deleted_exp()` has assertions in it.(I've followed the convention in the file)"", 'comment_created': datetime.datetime(2020, 6, 16, 12, 32, 11, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 440812931, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 6, 16, 12, 32, 39, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 440812982, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 6, 16, 12, 32, 44, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 440813101, 'comment_body': 'done changed it', 'comment_created': datetime.datetime(2020, 6, 16, 12, 32, 57, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 440813225, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 6, 16, 12, 33, 12, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 440817483, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 6, 16, 12, 40, 31, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 440817568, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 6, 16, 12, 40, 40, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 441279586, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 6, 17, 4, 54, 1, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 441386350, 'comment_body': 'You need an ""else raise"" at the end. If you have trouble testing it, you can swap out get_file_contents() for a custom implementation.', 'comment_created': datetime.datetime(2020, 6, 17, 8, 49, 46, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 441387498, 'comment_body': 'Why does this still refer to DragAndDropHtmlString? As mentioned earlier, this method should not refer to specific interaction IDs.', 'comment_created': datetime.datetime(2020, 6, 17, 8, 51, 29, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 441392230, 'comment_body': 'Else raise.\r\n\r\nIn addition, raise an exception if no match is found, since that means something has gone wrong.', 'comment_created': datetime.datetime(2020, 6, 17, 8, 58, 29, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 441392672, 'comment_body': 'You should add comments explaining in detail the reason for the type-checking.', 'comment_created': datetime.datetime(2020, 6, 17, 8, 59, 14, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 441394147, 'comment_body': 'Also, all of this code should not refer to ""x"", which is a rule-specific thing. Use the field name given in the dictionary.', 'comment_created': datetime.datetime(2020, 6, 17, 9, 1, 41, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 441394531, 'comment_body': 'This does not look like a ""list of sets"". Please name it properly.', 'comment_created': datetime.datetime(2020, 6, 17, 9, 2, 22, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 441396084, 'comment_body': 'You should also be writing tests for each interaction separately.\r\n\r\nI also don\'t see any tests for the negative cases? Check that other cases with ""Equals"" are handled correctly, etc. Try to think about all places where things might go wrong and write tests for those.', 'comment_created': datetime.datetime(2020, 6, 17, 9, 4, 57, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 441396319, 'comment_body': ""Do not make all these strings the same. Have separate strings per interaction type, otherwise you can't tell which string is supposed to come from where."", 'comment_created': datetime.datetime(2020, 6, 17, 9, 5, 19, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 441396443, 'comment_body': 'Draft --> draft\r\nList --> list', 'comment_created': datetime.datetime(2020, 6, 17, 9, 5, 31, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 441397154, 'comment_body': ""This should not exist. Again please don't hardcode anything. Use rule_descriptions_dict to programmatically compute **all** the info you need."", 'comment_created': datetime.datetime(2020, 6, 17, 9, 6, 42, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 441397670, 'comment_body': ""Here and elsewhere, if you are repeating things a lot of times, please declare a separate variable and give it a proper name. E.g. for generated_html_field_types_dict[html_type['type']]\r\n\r\nOtherwise this is very hard to read."", 'comment_created': datetime.datetime(2020, 6, 17, 9, 7, 36, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 441399332, 'comment_body': 'No, this is wrong. You have already established that the generated dict is equal to the desired dict. So you are basically taking a dict, computing its schema, and then asserting that the dict matches the schema, which is not very useful.\r\n\r\nThe schema to match against should be **hardcoded** here. You can either use custom validation for the inner dicts (keyed by rule type) or you can squash each inner dict down to:\r\n\r\n```\r\n{\r\n    ruleName: ""IsEqualToOrdering"",\r\n    htmlInputVariables: [""x""]\r\n},\r\n```\r\nand make ruleTypes a list of these.', 'comment_created': datetime.datetime(2020, 6, 17, 9, 10, 20, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 441432641, 'comment_body': ""@seanlip So is the schema validation still needed, because we have already generated a dict and verified it(the schema is checked indirectly while generating the dict itself, so checking the schema again is a bit redundant right?)\r\n\r\n> The schema to match against should be hardcoded here\r\n\r\nI'm a little confused about this, can you explain a bit more(you had previously mentioned that no hardcoding should be done)"", 'comment_created': datetime.datetime(2020, 6, 17, 10, 4, 16, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 441437171, 'comment_body': ""Oh, I see what you mean. Yes, that is fair -- the generation and the equality check does account for the entire dict. So I think it's OK to omit the schema validation. Thanks for pointing that out.\r\n\r\n---\r\n\r\nThe second part is now obsolete, but I can explain -- in tests, you usually have a pattern where the expected value is hardcoded and the observed value is computed, and the two are compared. That's what I was referring to here."", 'comment_created': datetime.datetime(2020, 6, 17, 10, 12, 9, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 441440480, 'comment_body': '@seanlip One reason this is done is: that the value for the key `format` cannot be derived from the `rule_descriptions_dict`, and we have to associate each type of format to a html_type.\r\nSo even if I calculate the html_types from rule_descriptions_dict, I would need to check the each html_type and assign a format accordingly. Do you have any  suggestions for this? ', 'comment_created': datetime.datetime(2020, 6, 17, 10, 18, 10, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 441443353, 'comment_body': 'Ah, I see the issue -- thanks for explaining clearly. Yes, the issue is that we\'re trying to map the variable type to a ""how to process it"" method.\r\n\r\nThis is therefore the part that you can\'t generate fully. Your validation will need to check everything except that ""format"" key. It should also check that each interior dictionary has a ""format"" key and that that key is one of a small set of allowed values (which should be named constants).\r\n\r\nSo perhaps what you can do is: start by iterating through the actual html field types dict and asserting that such a key exists in each inner dict, and that its value satisfies the containment criteria, then remove it (or, perhaps better, replace it by a unique sentinel value). Then generate the rest of the structure from the other json file and verify equality.', 'comment_created': datetime.datetime(2020, 6, 17, 10, 23, 27, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 441978536, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 6, 18, 5, 36, 37, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 441978569, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 6, 18, 5, 36, 44, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 441978639, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 6, 18, 5, 37, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 441978747, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 6, 18, 5, 37, 22, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 441978764, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 6, 18, 5, 37, 26, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 441978799, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 6, 18, 5, 37, 34, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 441978918, 'comment_body': 'done, Added interactions having html', 'comment_created': datetime.datetime(2020, 6, 18, 5, 37, 58, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 441978961, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 6, 18, 5, 38, 7, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 441978983, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 6, 18, 5, 38, 11, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 441979002, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 6, 18, 5, 38, 16, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 441979019, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 6, 18, 5, 38, 20, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 441979035, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 6, 18, 5, 38, 24, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 441979964, 'comment_body': 'Should I move this list of allowed formats to `feconf.py`', 'comment_created': datetime.datetime(2020, 6, 18, 5, 41, 34, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 442044816, 'comment_body': 'Use named constants. Use the same named constants throughout the codebase.', 'comment_created': datetime.datetime(2020, 6, 18, 8, 8, 22, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 442046289, 'comment_body': ""In the previous review, I also said:\r\n\r\n> In addition, raise an exception if no match is found, since that means something has gone wrong.\r\n\r\nPlease make sure to respond to all comments fully each time. If you don't, then we will just go back and forth and that will lengthen the submission time of this PR."", 'comment_created': datetime.datetime(2020, 6, 18, 8, 10, 58, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 442046698, 'comment_body': '""valid format"" -- two words', 'comment_created': datetime.datetime(2020, 6, 18, 8, 11, 38, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 442046861, 'comment_body': 'Perhaps prefix with mock_', 'comment_created': datetime.datetime(2020, 6, 18, 8, 11, 53, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 442049350, 'comment_body': 'Make each thing you are testing a separate test with a clear name, please.', 'comment_created': datetime.datetime(2020, 6, 18, 8, 16, 8, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 442049501, 'comment_body': 'Please make each of these things a separate test.', 'comment_created': datetime.datetime(2020, 6, 18, 8, 16, 23, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 442049775, 'comment_body': 'I think you missed part of a previous comment about testing the ""negative cases"" with ""Equals"". As mentioned before, you should check that other cases with ""Equals"" are handled correctly, etc. Actively try to think about all places where things might go wrong and write tests for those.', 'comment_created': datetime.datetime(2020, 6, 18, 8, 16, 50, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 442050759, 'comment_body': ""html_types = set([html_type in html_types_in_description if 'Html' in html_type])"", 'comment_created': datetime.datetime(2020, 6, 18, 8, 18, 27, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 442051202, 'comment_body': ""Wouldn't they be? I mean, you've just found them there, haven't you?"", 'comment_created': datetime.datetime(2020, 6, 18, 8, 19, 14, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 442051492, 'comment_body': ""Make your generated_html_field_types_dict a collections.defaultdict, then you don't have to deal with all this stuff. Ditto elsewhere below. Otherwise it becomes very hard to read.\r\n\r\nTry to keep your code as elegant, simple and readable as you can. Leave blank lines between logical sections."", 'comment_created': datetime.datetime(2020, 6, 18, 8, 19, 43, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 442052471, 'comment_body': 'Variable names should not start with ""is"", which is a verb. But again, try and get rid of some of this sort of logic using things like collections.defaultDict.', 'comment_created': datetime.datetime(2020, 6, 18, 8, 21, 26, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 442052821, 'comment_body': 'Ditto.', 'comment_created': datetime.datetime(2020, 6, 18, 8, 22, 2, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 442053901, 'comment_body': 'I don\'t understand why you are doing this in the for loop, since it doesn\'t seem to depend on the html_type in question. Couldn\'t you just calculate it once, outside? Also, how do you know that it\'s ""html type""?\r\n\r\nI would expect to see one re.findall() at the outset that collects the input variable and their types, and then filters these pairs as needed.', 'comment_created': datetime.datetime(2020, 6, 18, 8, 23, 37, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 442054220, 'comment_body': 'Yes, because you need it in state_domain.py. You should also change the hardcoded strings to named constants (e.g. HTML_TYPE_FORMAT_SET).', 'comment_created': datetime.datetime(2020, 6, 18, 8, 24, 12, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 442055984, 'comment_body': 'Possibly a better name: HTML_RULE_VARIABLE_FORMAT_SET, etc. Otherwise the above sounds really general -- it seems like ""rule"" should be mentioned somewhere.', 'comment_created': datetime.datetime(2020, 6, 18, 8, 26, 58, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 442059583, 'comment_body': ""@seanlip, I have added the interaction `TextInput` Which has `Equals`.\r\nIsn't that sufficient ?(I'll split these into different tests)"", 'comment_created': datetime.datetime(2020, 6, 18, 8, 32, 40, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 442063490, 'comment_body': '@seanlip ,Do you mean if no `input_variable` is found in `rule_spec.inputs`?\r\nIn the previous comment, I thought you were referring to raise an exception if the format is invalid.', 'comment_created': datetime.datetime(2020, 6, 18, 8, 39, 3, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 442066043, 'comment_body': ""Ah, it's possible I didn't see that at all because it was in one giant test (I did look up and down it a couple of times). Yes, that would be sufficient -- sorry for missing that!"", 'comment_created': datetime.datetime(2020, 6, 18, 8, 43, 7, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 442071540, 'comment_body': ""Yup, that's correct (the other part you mentioned is the other part of the comment). Either add it, or justify that an error can never occur here even though the various dicts may be subsequently changed."", 'comment_created': datetime.datetime(2020, 6, 18, 8, 51, 49, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 442333467, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 6, 18, 15, 57, 44, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 442333543, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 6, 18, 15, 57, 50, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 442333601, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 6, 18, 15, 57, 56, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 442333659, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 6, 18, 15, 58, 1, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 442333715, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 6, 18, 15, 58, 6, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 442333763, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 6, 18, 15, 58, 10, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 442333839, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 6, 18, 15, 58, 17, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 442333932, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 6, 18, 15, 58, 25, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 442333986, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 6, 18, 15, 58, 30, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 442334030, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 6, 18, 15, 58, 34, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 442334099, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 6, 18, 15, 58, 39, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 442365912, 'comment_body': "" No ,the `html_types` actually is not the same in all the iterations(new html_types get added to it as we encounter them in descriptions).\r\nI've explained the logic in the docstring. Pls let me know if its not clear.\r\ni.e `html_type` need not be in description in all the iterations.\r\n "", 'comment_created': datetime.datetime(2020, 6, 18, 16, 48, 36, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 442366876, 'comment_body': 'Here we need to append to an existing list (`html_types`), hence list comprehension will make it more unreadable.', 'comment_created': datetime.datetime(2020, 6, 18, 16, 50, 14, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 442368766, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 6, 18, 16, 53, 30, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 442634537, 'comment_body': 'atleast --> at least (I feel like I\'ve commented on this sort of thing before, btw)\r\n\r\nAlso this isn\'t the check I was expecting -- rules can legitimately have zero input variables. I meant that, in your for loop below, you have a top-level ""if"" check, and you\'re expecting that ""if"" check to trigger at least once, right? Check that it does actually trigger at least once.', 'comment_created': datetime.datetime(2020, 6, 19, 5, 14, 15, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 442637126, 'comment_body': 'Would it make sense to make this a set, and reduce some checks below accordingly?', 'comment_created': datetime.datetime(2020, 6, 19, 5, 25, 12, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 442637343, 'comment_body': ""I don't understand this. Why wouldn't it be? I mean, if it's not in there, you've just put it in, right? (in the previous lines)"", 'comment_created': datetime.datetime(2020, 6, 19, 5, 26, 6, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 442638103, 'comment_body': 'Also I\'m kinda confused about why this is a ""global"". Why don\'t you just compute it on a per-description basis? After all, you only use it on a per-description basis, so wouldn\'t that involve less bookkeeping?', 'comment_created': datetime.datetime(2020, 6, 19, 5, 28, 58, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 442655782, 'comment_body': 'done, sorry for misinterpreting.', 'comment_created': datetime.datetime(2020, 6, 19, 6, 30, 50, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 442655819, 'comment_body': 'Yeah done.', 'comment_created': datetime.datetime(2020, 6, 19, 6, 30, 59, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 442656053, 'comment_body': 'I had this check because, previously the html_types was global and we needed this.\r\nRemoved it now', 'comment_created': datetime.datetime(2020, 6, 19, 6, 31, 48, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 442656116, 'comment_body': 'done, changed', 'comment_created': datetime.datetime(2020, 6, 19, 6, 32, 1, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 442658142, 'comment_body': ""You know, this seems a bit weird. You're explicitly breaking the linkage between html_types and input_variables. So this could fail if a rule had two input vars of different types.\r\n\r\nWhy don't you make a dict (maybe collections.defaultdict) that maps the html_type to the list of input_variables that correspond to it, instead?"", 'comment_created': datetime.datetime(2020, 6, 19, 6, 38, 44, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 442658265, 'comment_body': 'Btw this whole method is way cleaner now than the first draft. Thanks for tidying it up!', 'comment_created': datetime.datetime(2020, 6, 19, 6, 39, 8, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 442665145, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 6, 19, 6, 57, 29, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 442694750, 'comment_body': 'I just realized one thing -- you are overwriting the existing types and that makes the assumption that each type is only represented by one interaction ID.\r\n\r\nThis is sufficient for now, but you should add a validation that that is the case. I.e. if this would overwrite an existing value, raise an error.\r\n\r\nIn addition, above the validation check, add a TODO and write this message:\r\n\r\n```\r\nTODO(#...): This generation (and the format of the html_field_types_dict) assume that there is at most one interaction ID that uses a given HTML object type. If this changes in the future, the structure of the dict needs to be amended so that the value corresponding to each input variable type is a dict with a ""format"" key and a list of dicts (one per input variable), each of which contains an interactionId, a ruleType, and an htmlInputVariable. The corresponding checks in state_domain (**note: point to the relevant method here**) also need to be updated.\r\n```', 'comment_created': datetime.datetime(2020, 6, 19, 8, 3, 45, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 442696496, 'comment_body': '@seanlip, should this point to an issue?', 'comment_created': datetime.datetime(2020, 6, 19, 8, 7, 12, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 442697266, 'comment_body': ""Yes. (You agree it's an issue, right?)"", 'comment_created': datetime.datetime(2020, 6, 19, 8, 8, 49, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 442697607, 'comment_body': ""It's actually something we need to fix (I think), but let's try to get this PR in first and do that separately. I know various things depend on this PR."", 'comment_created': datetime.datetime(2020, 6, 19, 8, 9, 31, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 442700703, 'comment_body': 'Also, I\'m open to alternative designs for the subdicts, but the new format should address the issue mentioned above. So feel free to propose something that you think makes the most sense (I\'m not 100% sure about the ""list of dicts with 3 keys"" since a bunch of data gets repeated).', 'comment_created': datetime.datetime(2020, 6, 19, 8, 15, 58, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 442748681, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 6, 19, 10, 0, 24, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 443055258, 'comment_body': ""interaction ID (two words).\r\n\r\nUnless you're referring to the key here, in which case you should be consistent with casing (you have interactionID in one place and interactionId in another)."", 'comment_created': datetime.datetime(2020, 6, 19, 21, 45, 21, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 443228936, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 6, 21, 15, 10, 20, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 443249535, 'comment_body': ""If we aren't going to run this function then can we just do this:\r\n\r\n1. Get all html strings from state\r\n2. Run add_math_content_to_math_rte_components on the html strings?\r\n\r\n[We won't need the mock_swap for this as well.]"", 'comment_created': datetime.datetime(2020, 6, 21, 19, 28, 55, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 443249572, 'comment_body': 'break after `after `.', 'comment_created': datetime.datetime(2020, 6, 21, 19, 29, 23, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 443250464, 'comment_body': ""I just wanted to check whether the convert_html_fields_in_state works for all the data in the backup server, that's why I tried to do the complete migration. Also If this job passes in its current state, we can be almost sure the migration will pass.\r\nAnyway let's see what @seanlip, has to say."", 'comment_created': datetime.datetime(2020, 6, 21, 19, 39, 59, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 443251512, 'comment_body': 'Basically in the current state the job `ExplorationMockMathMigrationOneOffJob` does the following:\r\n1. convert all the math-tags in the HMTL to the new schema.\r\n2. validate the state after conversion.\r\n3. extract all the HTML from the converted state\r\n4. Validate all the math-tags in the extracted HTML to have the new schema.', 'comment_created': datetime.datetime(2020, 6, 21, 19, 53, 8, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 443272116, 'comment_body': ""Please get rid of mock_swap -- that isn't the way to do it.\r\n\r\nWhat @DubeySandeep said is exactly what I thought you should do. We know the rest of the migration works, you just need to fully verify the bits that depend on the new conversion function you are writing.\r\n\r\nIf you want to verify the html after the fact then swap out the relevant part of html_cleaner using the existing self.swap() infrastructure. Don't invent your own mock_swap."", 'comment_created': datetime.datetime(2020, 6, 22, 0, 24, 23, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 443272198, 'comment_body': 'Presumably this won\'t include the stacktrace from ""below"". You might want to make sure it does -- we\'ve faced debuggability issues in the past due to it not being available.', 'comment_created': datetime.datetime(2020, 6, 22, 0, 25, 17, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 443272224, 'comment_body': 'Why do you need this ""continue""?', 'comment_created': datetime.datetime(2020, 6, 22, 0, 25, 35, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 443272426, 'comment_body': 'answer groups\r\n\r\nAlso, in general, there are a lot of these ""one word / two word"" issues in this PR. You might want to pay a bit more attention to that.', 'comment_created': datetime.datetime(2020, 6, 22, 0, 27, 49, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 443272524, 'comment_body': ""This seems to be placed at a level that's a bit too high. Define it within the relevant test function, or within the relevant test class if multiple functions are using it, and prefix it with an underscore since it's not meant for use elsewhere."", 'comment_created': datetime.datetime(2020, 6, 22, 0, 28, 54, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 443272634, 'comment_body': 'No one is going to know what ""new schema"" means -- relative terms like ""old"" and ""new"" only make sense within this PR. Use a more explicit name that stands the test of time.', 'comment_created': datetime.datetime(2020, 6, 22, 0, 30, 4, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 443272692, 'comment_body': 'list(...) (specify the ""..."")', 'comment_created': datetime.datetime(2020, 6, 22, 0, 30, 42, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 443272788, 'comment_body': 'Wrong indentation.', 'comment_created': datetime.datetime(2020, 6, 22, 0, 31, 45, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 443272944, 'comment_body': 'These should be found programmatically, not hardcoded. Remember what was mentioned in earlier reviews -- no direct references to specific interactions in the core code.', 'comment_created': datetime.datetime(2020, 6, 22, 0, 33, 19, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 443273017, 'comment_body': 'Sorry, missed this. Yes, I meant the state schema version number.', 'comment_created': datetime.datetime(2020, 6, 22, 0, 34, 7, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 443338046, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 6, 22, 6, 19, 53, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 443338071, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 6, 22, 6, 19, 58, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 443338199, 'comment_body': ""I've removed this part"", 'comment_created': datetime.datetime(2020, 6, 22, 6, 20, 22, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 443338232, 'comment_body': 'removed', 'comment_created': datetime.datetime(2020, 6, 22, 6, 20, 29, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 443338255, 'comment_body': 'removed', 'comment_created': datetime.datetime(2020, 6, 22, 6, 20, 34, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 443338337, 'comment_body': 'removed, not needed anymore', 'comment_created': datetime.datetime(2020, 6, 22, 6, 20, 46, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 443338371, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 6, 22, 6, 20, 51, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 443338387, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 6, 22, 6, 20, 56, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 443338494, 'comment_body': 'removed, not needed in this PR', 'comment_created': datetime.datetime(2020, 6, 22, 6, 21, 11, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 443339677, 'comment_body': ""We need this because this is not related to the rule_specs. This refers to the customization_args and we don't have a declarative list for that as of now(This approach was already being used in the `convert_html_fields_in_state`).\r\n"", 'comment_created': datetime.datetime(2020, 6, 22, 6, 24, 42, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 443372849, 'comment_body': 'Add space after period.', 'comment_created': datetime.datetime(2020, 6, 22, 7, 44, 12, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 443374295, 'comment_body': ""Then a declarative list for that should be created using similar principles (though it doesn't look like it needs to be done in this PR)."", 'comment_created': datetime.datetime(2020, 6, 22, 7, 46, 59, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 443377638, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 6, 22, 7, 53, 17, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 443724316, 'comment_body': 'Why value[0]? I was expecting value to be a string', 'comment_created': datetime.datetime(2020, 6, 22, 17, 42, 48, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 443724400, 'comment_body': 'Add newline afet `(`', 'comment_created': datetime.datetime(2020, 6, 22, 17, 42, 58, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 443725153, 'comment_body': 'Any specific reason for convering this to dict?', 'comment_created': datetime.datetime(2020, 6, 22, 17, 44, 26, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 443727087, 'comment_body': 'Should we add this constant in the interaction which uses this asnwer_tye?', 'comment_created': datetime.datetime(2020, 6, 22, 17, 47, 51, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 443728395, 'comment_body': 'Should we use `extensions/interactions/html_field_types_to_rule_specs.json` for this one as well? Like you can do interaction.can_have_solution if yes then if the anwer_type corresponds to anyof the `html_field_types_to_rule_specs` then follow the required pattern to extract it? (not sure) Basically this will open the ground for anty interaction to enable solution without making any changes here.', 'comment_created': datetime.datetime(2020, 6, 22, 17, 50, 14, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 443807608, 'comment_body': 'The correct typeinfo should be *. Explain how * is determined in the description.\r\n\r\n""BaseInteraction.answer_type"" is not a type. The typeinfo should be what you get when you call type() on the arg.', 'comment_created': datetime.datetime(2020, 6, 22, 20, 29, 30, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 443808006, 'comment_body': 'Yup I\'m wondering about this as well. In general stuff like ""[0]"" is a bit of a red flag.', 'comment_created': datetime.datetime(2020, 6, 22, 20, 30, 20, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 443877829, 'comment_body': 'removed it', 'comment_created': datetime.datetime(2020, 6, 22, 23, 25, 26, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 443877864, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 6, 22, 23, 25, 32, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 443877918, 'comment_body': 'changed this', 'comment_created': datetime.datetime(2020, 6, 22, 23, 25, 43, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 443877943, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 6, 22, 23, 25, 49, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 443877967, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 6, 22, 23, 25, 56, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 443878732, 'comment_body': ""value is not a `string` its actually a set of HTML as the name suggests(ListOfSetOfHtml).\r\nI used value[0] because this set's length for dragAndDrop interaction is always one.\r\nI've removed the hardcoding and made it general."", 'comment_created': datetime.datetime(2020, 6, 22, 23, 28, 45, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 443880438, 'comment_body': ""Aren't there other possibilities for the type of the correct_answer?\r\n\r\nAlso, for any composite types, add more detail (e.g. list(set(...)))."", 'comment_created': datetime.datetime(2020, 6, 22, 23, 34, 52, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 443880658, 'comment_body': ""I don't understand this sentence. I think you may want to reword as:\r\n\r\ncorrect_answer: *. The correct answer; this answer enables the learner to progress to the next card. (The type of the correct_answer is determined by ...)"", 'comment_created': datetime.datetime(2020, 6, 22, 23, 35, 43, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 443880899, 'comment_body': 'else raise. Always raise at the end if there\'s no ""else""; have a clear error message that says what is wrong.', 'comment_created': datetime.datetime(2020, 6, 22, 23, 36, 36, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 443884336, 'comment_body': ""@seanlip, Actually I realized the correct answers can have many types, like CodeEvaluation(which is a dict), Integer, Real , NumberWithUnits, Graph etc\r\nShould we add all these here? I'm not sure"", 'comment_created': datetime.datetime(2020, 6, 22, 23, 48, 30, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 443886734, 'comment_body': 'I mentioned this in a couple of other comments already, but you can write `*` to denote that.', 'comment_created': datetime.datetime(2020, 6, 22, 23, 56, 59, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 443892117, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 6, 23, 0, 16, 29, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 443892150, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 6, 23, 0, 16, 36, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 443892166, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 6, 23, 0, 16, 41, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 443897321, 'comment_body': 'Nit: add comma before ""etc.""\r\n', 'comment_created': datetime.datetime(2020, 6, 23, 0, 35, 41, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 443978496, 'comment_body': 'Here self.id can be None, right? ', 'comment_created': datetime.datetime(2020, 6, 23, 5, 55, 10, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 443981080, 'comment_body': ""Yeah, It is none when a state has no interaction.\r\nI'll add a test case for this."", 'comment_created': datetime.datetime(2020, 6, 23, 6, 3, 24, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 443998341, 'comment_body': 'Can you please check whether we flush hints after deleting interactions? (I think we keep it just in case if the users readds the same interaction.) Can you please cehk and update it accordingly? (not sure!)', 'comment_created': datetime.datetime(2020, 6, 23, 6, 49, 56, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 444011436, 'comment_body': 'Yeah, I checked it and the state still keeps the hints from previous interaction even if we delete the interaction. Thanks for raising this.\r\nChanged the code.', 'comment_created': datetime.datetime(2020, 6, 23, 7, 17, 16, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 444017368, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 6, 23, 7, 28, 46, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}]","[{'commit_sha': '30cbf31b0ead1dc06cbd512760dc65f507fe7671', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '105de3fad84a171886b99f685c6c25729838ed4b', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0eaf73cf1f6697f68b09cee1ca680a1e70adedc8', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ef858f082501e5b1f5aaba065666def13769a4ca', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fa0a7db604d73d21149a3cd83ca582438ed6a504', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a76a1b6567e23a2f21e895d3e51a8efd02584e11', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5bd1eba60157f032f722abca11043f97a29867b3', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0d2293d337848c50ba6000385eacb20fbcd92d58', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '08628ae748d79565c224a70ec78d5a969b4c9aa5', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '363b2f28f83761010466aed32eba358a01bce23e', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '36ee8a81d7c4e9d60df7d1b7fbb6cc29c60502ef', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ad99c53d05dbdd3f4226c52e9893669c73123077', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9426992c559fae0386b54995b46d95853140ab1d', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f91d811e23ee99a2b9d51f10a12a56d11306edd5', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '30f375fdcf42f85519ddd05baa1a1a34f171956e', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '449006d44b222ab604895c1ae7b4debe1f3eafc8', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '64f93c51ac3d30fa6ea2bf4a936989519c4d61cb', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'af16175cf0bcf65405093ad2655321e35f536279', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b34a135efd570c20762e4344cc5eacea7b053628', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e33de4ac4e4627ae3f5042727a9426d4c916d025', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3b37760b163a4b9ff115f16ce36a7149c27d76ef', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a6decaa3d1af757313f6adfadc3b6826635981e4', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7818d55036aaef4f844ad319378096c2cee40fa5', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b233bf0195c26f6a8c137ecaafb63139d9e98988', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1194b060a9d007f17b238fa51b40dfec3a300198', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '51f8fd5566f04acbd34cae3cfb925020f3f017b8', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2dda7c29667f9d61da693c6fe90e1eb91805845c', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '566a5ad429910e10b2fb9715993c259faa9c717c', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6f6d603453b35df58ff2820bbbbe15d2d09437a4', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '32f0390e58b143cc3f6accac5d49ea8e59dd20ad', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3b183072d923d4aade7bcb11bfc70561daf0bdaf', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0768860047b5cc2d0e6bed320e441a3129b5ed74', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '47ce84ca0bd5b17f5dd9068e8c6c0d3988b63b8a', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '70aee93d91f64fd1ee9596ea31d8d96def917f57', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6ae509fa1529ed0faacaec372c16a2d87df8df9f', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aa52576c88524747653d7388ccf5b0f922b7f3ba', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f5edfe19f6149483333387c9b4678a295e60c57c', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '72166d47042f45583d68a9aeec46d858e67d5da6', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a0aa97e541dc84202d095b4f62337366cca58f4f', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd577a5c94b7e4f7b46a97ae455bfdbb145f3c0b9', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '28c79a532be7efe18765baf6f921ab76c2c2b84e', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ea5130f38477af0cef303f652ce307deaa006381', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e932126dcbcc70fdbc86e2c49cbb96293ec746ea', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1613445044db39ec57bdc901712a0c9cb0ce52df', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9e78731b3fe743c018757b4031a3a771b6a0091a', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '69c469158c402856afa1c1a634bd481df9a7686d', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '64e3fa59b896298df7b4fd08d3afb56a669dc8ba', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '94c6573e8bc9a44fe2544d023f2b8e006193f1c7', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1a75054ba468ab1ee66b7195993c4189c9d026c5', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7054369d28883b08866ffa0a28d373be4420eaa7', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7e0469156417ce68ba2b0bf3a5fadcb33067de6a', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '228106d2ca1fe6caf25d301ce970add251f5b9a7', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ab0922f54ea17c67acdf1f81be86a3fc723dedbf', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3349d53626a1ec72d4c9837ebaec5a48e1e0ec6b', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '993e7ac5041034a5458319f93357f7facd3b49fa', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a7e18310ff7962ff008a70fbeb504dd7f1d0ebb6', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '24869cb293d178d3aae496175d43c2259aa9496a', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '367b60b7df99f75ea75012534ad78b4ea62778d6', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3cf5e40503d09b2a0054bd68b457be68fa679436', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}]",Abhith Krishna,31371571,,User,,33,,5,5
438080994,Allow images while creating questions.,"## Overview
<!--
READ ME FIRST:
Please answer *both* questions below and check off every point from the Essential Checklist!
If there is no corresponding issue number, fill in N/A where it says [fill_in_number_here] below in 1.
-->
**NOTE**
This PR has changes from the PR #9517, and can be merged only after #9517 is merged

1. This PR does the following: Allows adding images while creating questions

## Essential Checklist

- [ ] The PR title starts with ""Fix #bugnum: "", followed by a short, clear summary of the changes. (If this PR fixes part of an issue, prefix the title with ""Fix part of #bugnum: ..."".)
- [ ] The linter/Karma presubmit checks have passed locally on your machine.
- [ ] ""Allow edits from maintainers"" is checked. (See [here](https://help.github.com/en/github/collaborating-with-issues-and-pull-requests/allowing-changes-to-a-pull-request-branch-created-from-a-fork) for instructions on how to enable it.)
  - This lets reviewers restart your CircleCI tests for you.
- [ ] The PR is made from a branch that's **not** called ""develop"".

## PR Pointers

- Oppiabot will notify you when you don't add a PR_CHANGELOG label. If you are unable to do so, please @-mention a code owner (who will be in the Reviewers list), or ask on [Gitter](https://gitter.im/oppia/oppia-chat).
- For what code owners will expect, see the [Code Owner's wiki page](https://github.com/oppia/oppia/wiki/Oppia%27s-code-owners-and-checks-to-be-carried-out-by-developers).
- Make sure your PR follows conventions in the [style guide](https://github.com/oppia/oppia/wiki/Coding-style-guide), otherwise this will lead to review delays
- Never force push. If you do, your PR will be closed.
",True,9617,https://api.github.com/repos/oppia/oppia/pulls/9617,https://github.com/oppia/oppia/pull/9617,closed,208,23,7,24,13,17,0,1,[],2020-06-22 17:25:32+00:00,2020-06-27 11:21:53+00:00,410181.0,"4 days, 17:56:21","[{'comment_id': 443718725, 'comment_body': 'Why are we doing this?', 'comment_created': datetime.datetime(2020, 6, 22, 17, 32, 4, tzinfo=datetime.timezone.utc), 'commenter': 'kevintab95', 'type': 'User'}, {'comment_id': 444479486, 'comment_body': ""I've added a docstring explaining the reason.\r\nThe actual header to be added for form-data is 'multipart/form-data',  But adding it manually won't work because we will miss the boundary parameter. When we keep 'Content-Type' as undefined, the browser automatically fills the boundary parameter according to the form data. Refer [link](https://stackoverflow.com/questions/37039852/. ) and\r\n      [link](https://stackoverflow.com/questions/34983071/.)\r\nAlso this can be removed after we migrate to angular as only in angularjs $http we face this issue, in angular this is done automatically.\r\nrefer to  `_createSkill()` in `SkillCreationBackendApiService` which does the same process in angular"", 'comment_created': datetime.datetime(2020, 6, 23, 20, 12, 43, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 444677456, 'comment_body': 'Why these changes? Can you please check how we have handled this for skill images? (This looks like a global change, can we do changes more specific to questions?)', 'comment_created': datetime.datetime(2020, 6, 24, 6, 42, 38, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 444679768, 'comment_body': 'is this how we have handled this for images in skill?', 'comment_created': datetime.datetime(2020, 6, 24, 6, 48, 8, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 444681567, 'comment_body': ""We do this change because for formdata we don't need to add the payload again.\r\nI've done this similar to how images in skills are handled. The only difference is that for skills this part is done using Angular 8  in the service `RequestInterceptor`"", 'comment_created': datetime.datetime(2020, 6, 24, 6, 52, 36, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 444683391, 'comment_body': ""No for skills, this is done in angular 8 using http. We don't pass the headers for saving images in skills(I'm not sure why).\r\n@aks681 any suggestions for this?\r\nWe can avoid using this if we use Ajax or angular 8 http, but here we are using $http from angularjs"", 'comment_created': datetime.datetime(2020, 6, 24, 6, 56, 59, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 445190898, 'comment_body': ""This is not a valid url, right? Question editor doesn't have a fixed url, depends on if it is opened from the topic or skill editor."", 'comment_created': datetime.datetime(2020, 6, 24, 21, 48, 5, tzinfo=datetime.timezone.utc), 'commenter': 'aks681', 'type': 'User'}, {'comment_id': 445193072, 'comment_body': 'Hmm, ok, in that case, maybe add in the comment that when this is converted to Angular 8, this should be removed and should follow the convention in SkillCreationBackendApiService?', 'comment_created': datetime.datetime(2020, 6, 24, 21, 53, 4, tzinfo=datetime.timezone.utc), 'commenter': 'aks681', 'type': 'User'}, {'comment_id': 445193595, 'comment_body': ""Why is this in else? Shouldn't we flush it before a new question is created always?"", 'comment_created': datetime.datetime(2020, 6, 24, 21, 54, 17, tzinfo=datetime.timezone.utc), 'commenter': 'aks681', 'type': 'User'}, {'comment_id': 445247810, 'comment_body': 'done, changed it.', 'comment_created': datetime.datetime(2020, 6, 25, 0, 46, 39, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 445247853, 'comment_body': 'done, changed', 'comment_created': datetime.datetime(2020, 6, 25, 0, 46, 48, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 445247890, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 6, 25, 0, 46, 57, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 445300754, 'comment_body': 'Can we add a comment to explain the same?\r\n\r\n\\cc @bansalnitish @srijanreddy98 you might want to take a quick pass here.', 'comment_created': datetime.datetime(2020, 6, 25, 4, 32, 28, tzinfo=datetime.timezone.utc), 'commenter': 'ankita240796', 'type': 'User'}, {'comment_id': 445326155, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 6, 25, 6, 6, 44, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 445585360, 'comment_body': 'is of the type Formdata....', 'comment_created': datetime.datetime(2020, 6, 25, 14, 6, 53, tzinfo=datetime.timezone.utc), 'commenter': 'ankita240796', 'type': 'User'}, {'comment_id': 445586010, 'comment_body': ""I am a still confused regarding the why part here -- i.e. why we don't to add the payload again, maybe an example will help. "", 'comment_created': datetime.datetime(2020, 6, 25, 14, 7, 54, tzinfo=datetime.timezone.utc), 'commenter': 'ankita240796', 'type': 'User'}, {'comment_id': 445695482, 'comment_body': ""@ankita240796, I've made the code here a bit more general, let me know if things are still not clear"", 'comment_created': datetime.datetime(2020, 6, 25, 16, 44, 11, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}]","[{'commit_sha': '0556557e4b9a664663ea52c75401f629644231b7', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'eb764d31045f4b4c5fc48acb8a25222b006b0200', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a64c57fd135798ff5237cc8b6fe1ba6d6595d293', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c0bda3ea6105355494f6fd0c2c8e8836cd8ee1c2', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2d9d6baa9f2e27b439518bf266e845f7f054632c', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4e1583e4c68b314f1050142d940adbee090ba990', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '96ef7c345088a5af475374a7eddd7b7316038a3e', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '59535d52cbc376a331c66800f7455f0f4e568907', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b96490e762f1faa7171353f34015c0f665f637e3', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5733881624538b6319f53002d4955199003f21ea', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '290a77df2250726da5fe1a6bbc23b421513ed464', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5cdab2385dec301addd0960ee5c0d41fd0505679', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7d8396f008725905acda5a95046d08b2550348ba', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '000b6c31e4b5e610d4c1caf2aa6230e9a7a652b5', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a590d9e3415e76b82f89d98fb3b502c8dd8ae348', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '206e7a30d039ec5d5e98e286657fc0a20051f842', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '99d5a4c81c8743e736a73149f499957e37d4d474', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2bdfb830fb4f7a7364c957a863fbffe0117ae7be', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fd6a30f0f6f81888048d9df8900fb30054815e38', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ce24d4d091343361218c8037d5f5c704014e252e', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cf9915ceb577851a74a3f141b83346200d970182', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b790e14aab511c8f119e059b2201b2a70eca370a', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '646f339dc364d6b593a5dde85fb9427689f053bc', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd0f41281dd3cf2f5d63288732ac08ffc96bee686', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}]",Abhith Krishna,31371571,,User,,33,,5,5
440799736,Milestone 1.2 and 1.3: SVG generation for new entities.,"## Overview
<!--
READ ME FIRST:
Please answer *both* questions below and check off every point from the Essential Checklist!
If there is no corresponding issue number, fill in N/A where it says [fill_in_number_here] below in 1.
-->
**Note**
Currently this PR is branched of #9390(Its a large PR) .

1. This PR fixes or fixes part of #[fill_in_number_here].
2. This PR does the following: generate SVGs for all new entities created.
## Essential Checklist

- [ ] The PR title starts with ""Fix #bugnum: "", followed by a short, clear summary of the changes. (If this PR fixes part of an issue, prefix the title with ""Fix part of #bugnum: ..."".)
- [ ] The linter/Karma presubmit checks have passed locally on your machine.
- [ ] ""Allow edits from maintainers"" is checked. (See [here](https://help.github.com/en/github/collaborating-with-issues-and-pull-requests/allowing-changes-to-a-pull-request-branch-created-from-a-fork) for instructions on how to enable it.)
  - This lets reviewers restart your CircleCI tests for you.
- [ ] The PR is made from a branch that's **not** called ""develop"".

## PR Pointers

- Oppiabot will notify you when you don't add a PR_CHANGELOG label. If you are unable to do so, please @-mention a code owner (who will be in the Reviewers list), or ask on [Gitter](https://gitter.im/oppia/oppia-chat).
- For what code owners will expect, see the [Code Owner's wiki page](https://github.com/oppia/oppia/wiki/Oppia%27s-code-owners-and-checks-to-be-carried-out-by-developers).
- Make sure your PR follows conventions in the [style guide](https://github.com/oppia/oppia/wiki/Coding-style-guide), otherwise this will lead to review delays
- Never force push. If you do, your PR will be closed.
",True,9678,https://api.github.com/repos/oppia/oppia/pulls/9678,https://github.com/oppia/oppia/pull/9678,closed,763,66,30,47,35,78,1,2,[{'name': 'PR: LGTM'}],2020-06-26 21:45:11+00:00,2020-07-03 14:03:16+00:00,577085.0,"6 days, 16:18:05","[{'comment_id': 446500464, 'comment_body': 'Change it to `(\\n ....`', 'comment_created': datetime.datetime(2020, 6, 27, 8, 18, 17, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 446500585, 'comment_body': 'maybe saveMathExpresionImage? (Can we generalize this to saveSvgImage? not sure*)', 'comment_created': datetime.datetime(2020, 6, 27, 8, 19, 56, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 446500766, 'comment_body': 'Undo this change*', 'comment_created': datetime.datetime(2020, 6, 27, 8, 22, 27, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 446500856, 'comment_body': 'Do not start a variable name with `is` (or verb in general)', 'comment_created': datetime.datetime(2020, 6, 27, 8, 23, 54, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 446581654, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 6, 28, 0, 10, 17, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 446581661, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 6, 28, 0, 10, 24, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 446581667, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 6, 28, 0, 10, 29, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 446581683, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 6, 28, 0, 10, 34, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 446592411, 'comment_body': 'Should we write more small and cleaner test for each case?', 'comment_created': datetime.datetime(2020, 6, 28, 2, 52, 17, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 446592570, 'comment_body': 'Should we move getDateTimeString to a function and use it here and for others cases?', 'comment_created': datetime.datetime(2020, 6, 28, 2, 54, 20, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 446592828, 'comment_body': 'Where do we handle image upload functionality? Should we do this in the same layer or similar position?', 'comment_created': datetime.datetime(2020, 6, 28, 2, 58, 15, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 446593307, 'comment_body': 'Why the svgFile is in the camel case and other values are in snake case?', 'comment_created': datetime.datetime(2020, 6, 28, 3, 5, 24, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 446593501, 'comment_body': 'WHy do we need to define this? will it be same as $scope.tmpCustomizationArgs[i].name?', 'comment_created': datetime.datetime(2020, 6, 28, 3, 8, 37, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 446593624, 'comment_body': 'Are we expecting the length of `tmpCustomizationArgs` to be 1 in all cases? or do we need this function in a loop? (not sure, new to this file) ', 'comment_created': datetime.datetime(2020, 6, 28, 3, 10, 22, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 446593673, 'comment_body': 'Do we need these services in this file?', 'comment_created': datetime.datetime(2020, 6, 28, 3, 11, 14, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 446593694, 'comment_body': 'DO we need to import these services in this file?', 'comment_created': datetime.datetime(2020, 6, 28, 3, 11, 38, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 446593726, 'comment_body': 'Add a newline above', 'comment_created': datetime.datetime(2020, 6, 28, 3, 12, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 446594007, 'comment_body': 'Why do we need a script tag here, add code comment? (Do we need a closing tag? not sure!)', 'comment_created': datetime.datetime(2020, 6, 28, 3, 16, 20, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 446594066, 'comment_body': 'None this to the line above*', 'comment_created': datetime.datetime(2020, 6, 28, 3, 17, 22, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 446594286, 'comment_body': ""I don't see any saving functionality in this method is that expected?"", 'comment_created': datetime.datetime(2020, 6, 28, 3, 20, 21, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 446594331, 'comment_body': 'will this be shown after closing the modal?', 'comment_created': datetime.datetime(2020, 6, 28, 3, 21, 7, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 446616986, 'comment_body': ""I didn't completely understand what you meant, but I've added some more tests"", 'comment_created': datetime.datetime(2020, 6, 28, 8, 8, 59, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 446617075, 'comment_body': ""I don't think so because the getDateTimeString is an inbuilt function right?"", 'comment_created': datetime.datetime(2020, 6, 28, 8, 9, 56, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 446617378, 'comment_body': ""I've added docstrings to explain this.\r\nBasically, for the case of the math rich text components, we need to handle the saving of the generated SVG file here because the process of saving the SVG is asynchronous and the saving of SVG to the backend is to be done only after the user clicks on the save button. The saving of SVGs to the backend cannot be done in the math RTE editor\r\nbecause the control is passed to this function as soon as the user clicks on the save button.\r\nAs soon as we click save , `$scope.$broadcast('externalSave');` this event is propogated and the the code returns from the customization modal immediately and doesn't wait. Hence we save it in this controller"", 'comment_created': datetime.datetime(2020, 6, 28, 8, 12, 41, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 446617789, 'comment_body': ""Other values are from the customization args and they are in the form of a backend dict.\r\nThe value svgFile is added additionally along with the customization args to the value dict.\r\nI've added explanations as docstrings"", 'comment_created': datetime.datetime(2020, 6, 28, 8, 15, 43, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 446617808, 'comment_body': 'done, changed it', 'comment_created': datetime.datetime(2020, 6, 28, 8, 15, 52, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 446617867, 'comment_body': 'Yes for the case of math RTEs the tmpCustomizationArgs is always of length 1.', 'comment_created': datetime.datetime(2020, 6, 28, 8, 16, 22, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 446617959, 'comment_body': 'The dependencies for the RteHelperModalController are injected in this service.', 'comment_created': datetime.datetime(2020, 6, 28, 8, 17, 12, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 446618004, 'comment_body': 'pls refer to the previous comment [link](https://github.com/oppia/oppia/pull/9678#discussion_r446617959)', 'comment_created': datetime.datetime(2020, 6, 28, 8, 17, 37, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 446618100, 'comment_body': ""I've added a comment explaining the reason\r\n"", 'comment_created': datetime.datetime(2020, 6, 28, 8, 18, 39, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 446618401, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 6, 28, 8, 21, 9, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 446618440, 'comment_body': ""I've added a comment, yeah this is expected"", 'comment_created': datetime.datetime(2020, 6, 28, 8, 21, 29, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 446618515, 'comment_body': 'Yes if the validation fails, the modal is closed and this warning is shown.', 'comment_created': datetime.datetime(2020, 6, 28, 8, 22, 15, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 446618630, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 6, 28, 8, 23, 4, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 446624596, 'comment_body': 'I see we are filtering 3-4 things from the SVG, so write one test for each item. That way if test fails then we know which specific filtration is not working! Is this helpful?', 'comment_created': datetime.datetime(2020, 6, 28, 9, 13, 26, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 446624983, 'comment_body': 'Sorry for the misunderstanding, I see a duplicate code in another method `generateImageFilename` so can we move the common part to a function and re use it? (In this case, the dateTime string generation seems common.)', 'comment_created': datetime.datetime(2020, 6, 28, 9, 17, 10, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 446640459, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 6, 28, 11, 48, 26, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 446640462, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 6, 28, 11, 48, 31, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 446641121, 'comment_body': 'Also for the images, save to the backend happens before the save button is clicked and the control is still in the file-path-editor while the image is being saved to backend. This is not the case for math-expression-content-editor', 'comment_created': datetime.datetime(2020, 6, 28, 11, 54, 37, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 446683055, 'comment_body': ""```suggestion\r\n    it('should successfully save a math SVG', function(done) {\r\n```"", 'comment_created': datetime.datetime(2020, 6, 28, 18, 33, 52, tzinfo=datetime.timezone.utc), 'commenter': 'nithusha21', 'type': 'User'}, {'comment_id': 446683661, 'comment_body': 'This I feel is a poor test for the code it is testing. Is there a way to ensure that the $.ajax call from the saveMathExpressionImage function actually creates the correct payload? All that is never actually asserted anywhere.', 'comment_created': datetime.datetime(2020, 6, 28, 18, 39, 30, tzinfo=datetime.timezone.utc), 'commenter': 'nithusha21', 'type': 'User'}, {'comment_id': 446845809, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 6, 29, 8, 8, 31, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 446845884, 'comment_body': ""done, I've added more detailed tests"", 'comment_created': datetime.datetime(2020, 6, 29, 8, 8, 41, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 446973526, 'comment_body': ""Shouldn't this be flushed and pushed to server at some point?"", 'comment_created': datetime.datetime(2020, 6, 29, 13, 31, 55, tzinfo=datetime.timezone.utc), 'commenter': 'aks681', 'type': 'User'}, {'comment_id': 446973988, 'comment_body': ""It seems this is being saved regardless of whether `ContextService.getImageSaveDestination()` is local or not, isn't that wrong?"", 'comment_created': datetime.datetime(2020, 6, 29, 13, 32, 33, tzinfo=datetime.timezone.utc), 'commenter': 'aks681', 'type': 'User'}, {'comment_id': 446975520, 'comment_body': ""Shouldn't localStorage be handled here in case that is required?"", 'comment_created': datetime.datetime(2020, 6, 29, 13, 34, 54, tzinfo=datetime.timezone.utc), 'commenter': 'aks681', 'type': 'User'}, {'comment_id': 446980693, 'comment_body': 'No, if the `ContextService.getImageSaveDestination` gives  localStorge, then this part is never reached because there is a return statement on line 134,', 'comment_created': datetime.datetime(2020, 6, 29, 13, 42, 16, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 446992906, 'comment_body': ""In this directive, we don't save any images to the backend or localStorage. All this directive does is generate an SVG string for an equation pass it to the `rte-helper-modal-controller.ts`, the saving to the backend or localStorage happens in the rte controller.(I've added comments to explain the reason)"", 'comment_created': datetime.datetime(2020, 6, 29, 13, 58, 57, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 446995899, 'comment_body': ""This will be flushed in the directive using the image(after it extracts the saved image). If we flush it here then the directive using it won't be able to get the image.\r\nFor example in the `question-list-directive.ts`, we flush the localStorage before and after creating a new question.\r\nThis controller gets called in between the question creation process and if we clear the local storage here then the images saved previously by `question-list-directive.ts` won't be accessible anymore."", 'comment_created': datetime.datetime(2020, 6, 29, 14, 3, 1, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 447053097, 'comment_body': 'Ah, sorry, missed that!', 'comment_created': datetime.datetime(2020, 6, 29, 15, 20, 54, tzinfo=datetime.timezone.utc), 'commenter': 'aks681', 'type': 'User'}, {'comment_id': 447055409, 'comment_body': 'Yeah, makes sense. So, just to check, this does happen for question and skill creation, right?', 'comment_created': datetime.datetime(2020, 6, 29, 15, 24, 11, tzinfo=datetime.timezone.utc), 'commenter': 'aks681', 'type': 'User'}, {'comment_id': 447056161, 'comment_body': 'Ah ok', 'comment_created': datetime.datetime(2020, 6, 29, 15, 25, 8, tzinfo=datetime.timezone.utc), 'commenter': 'aks681', 'type': 'User'}, {'comment_id': 447058723, 'comment_body': 'Yeah', 'comment_created': datetime.datetime(2020, 6, 29, 15, 28, 42, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 447061996, 'comment_body': 'Ok!', 'comment_created': datetime.datetime(2020, 6, 29, 15, 33, 12, tzinfo=datetime.timezone.utc), 'commenter': 'aks681', 'type': 'User'}, {'comment_id': 447239732, 'comment_body': ""Note: After discussion with @DubeySandeep and @kevintab95, it was decided to move the math RTE test to a test suite that does not run in production mode.\r\nThis is because, after this PR the Math RTE components will save an image in the backend, but currently  e2e tests running in prod-mode don't support GCS."", 'comment_created': datetime.datetime(2020, 6, 29, 20, 39, 13, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 447243353, 'comment_body': 'I think we should also create a separate suite for fileUploadExtension which will cover all the extension which needs file upload. In future, we can add an imageRTE component test in the same suite. What do you think, this will also assure that we have a separate test for these extensions like we have for other RTE components. What do you think?', 'comment_created': datetime.datetime(2020, 6, 29, 20, 45, 53, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 447245687, 'comment_body': 'Yeah makes sense, but that could be done in a future PR right?', 'comment_created': datetime.datetime(2020, 6, 29, 20, 50, 16, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 447247866, 'comment_body': 'Why we need this (proccess.cwd)?', 'comment_created': datetime.datetime(2020, 6, 29, 20, 54, 25, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 447255559, 'comment_body': 'done, changed it.', 'comment_created': datetime.datetime(2020, 6, 29, 21, 9, 29, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 448404766, 'comment_body': '@donosco98 creating the `fileUploadExtension` suite can be done in a separate PR, but the Math RTE tests should be in a running suite when this PR merges. I think creating a new suite for the Math RTE tests and creating the 1fileUploadExtension` suite will be about the same amount of work, but I think either way is fine', 'comment_created': datetime.datetime(2020, 7, 1, 14, 30, 56, tzinfo=datetime.timezone.utc), 'commenter': 'U8NWXD', 'type': 'User'}, {'comment_id': 448405901, 'comment_body': ""This seems pretty out of place for the voiceovers suite. Can you put it in a new suite? Since this is a new test, that'll also help isolate the damage if it turns out to be flaky"", 'comment_created': datetime.datetime(2020, 7, 1, 14, 32, 37, tzinfo=datetime.timezone.utc), 'commenter': 'U8NWXD', 'type': 'User'}, {'comment_id': 448406564, 'comment_body': 'Could you double-check whether we need the inner `await`? I think `getComponent` is just a map lookup', 'comment_created': datetime.datetime(2020, 7, 1, 14, 33, 36, tzinfo=datetime.timezone.utc), 'commenter': 'U8NWXD', 'type': 'User'}, {'comment_id': 448407223, 'comment_body': 'Thanks for adding this!', 'comment_created': datetime.datetime(2020, 7, 1, 14, 34, 32, tzinfo=datetime.timezone.utc), 'commenter': 'U8NWXD', 'type': 'User'}, {'comment_id': 448408354, 'comment_body': ""@U8NWXD, I've added a test for math RTE in the playVoiceover.js file.\r\nShould I change anything now?"", 'comment_created': datetime.datetime(2020, 7, 1, 14, 36, 10, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 448408991, 'comment_body': 'Also the complete tests for math RTE will be added once we start using the SVGs for displaying the math equations', 'comment_created': datetime.datetime(2020, 7, 1, 14, 36, 59, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 448661626, 'comment_body': 'Also, since the e2e test flakiness has gotten really bad recently, we are now asking everyone to make sure their e2e tests pass consistently and add tests in separate suites. This process is detailed in the [end-to-end test wiki page](https://github.com/oppia/oppia/wiki/End-to-End-Tests). In your case, since this PR modifies both utility files and introduces a new test, please post screenshots showing:\r\n\r\n* 5 consecutive passes of your new test suite and\r\n* 3 consecutive passes of all e2e tests.\r\n\r\nNote that unrelated flakes don\'t count toward the required number of passes, but nor do they count against the ""consecutive"" requirement.', 'comment_created': datetime.datetime(2020, 7, 1, 23, 10, 17, tzinfo=datetime.timezone.utc), 'commenter': 'U8NWXD', 'type': 'User'}, {'comment_id': 448677958, 'comment_body': 'yeah its not needed removed it.', 'comment_created': datetime.datetime(2020, 7, 2, 0, 7, 44, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 448678822, 'comment_body': ""done, moved this test to a new suite.\r\nNote: I'll be changing how math RTE components are rendered in the future, So I've planned to add more e2e tests after that is finished."", 'comment_created': datetime.datetime(2020, 7, 2, 0, 10, 52, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 448679809, 'comment_body': '> Note that unrelated flakes don\'t count toward the required number of passes, but nor do they count against the ""consecutive"" requirement.\r\n\r\nDoes this mean if an unrelated test flaked I have to re-run everything?', 'comment_created': datetime.datetime(2020, 7, 2, 0, 14, 52, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 448759248, 'comment_body': 'This is supposed to be sorted, but you can do that in a follow up PR. ', 'comment_created': datetime.datetime(2020, 7, 2, 5, 38, 21, tzinfo=datetime.timezone.utc), 'commenter': 'Showtim3', 'type': 'User'}, {'comment_id': 449023262, 'comment_body': ""Yes, in general it does. However, note that when trying to get 5 consecutive passes of your new test suite, you'd only be re-running your suite. If it's on CircleCI where you have to rerun the whole job, then we can ignore flakes in unrelated suites so long as they don't stop your suite from running.\r\n\r\nThe rationale behind this is that even if a flake is unrelated, we can't count that as a passing run if the flake stopped your test from running correctly. Does that make sense?"", 'comment_created': datetime.datetime(2020, 7, 2, 14, 0, 12, tzinfo=datetime.timezone.utc), 'commenter': 'U8NWXD', 'type': 'User'}, {'comment_id': 449024975, 'comment_body': 'done, fixed it', 'comment_created': datetime.datetime(2020, 7, 2, 14, 2, 48, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 449025837, 'comment_body': 'This username could conflict with other test suites, namely:\r\n\r\nhttps://github.com/oppia/oppia/blob/21d345c5ce055af4b2aa5625927b06eac3ed565b/core/tests/protractor_desktop/extensions.js#L44-L45\r\n\r\nMaybe `richTextuser@fileUploadExtensions.com`?', 'comment_created': datetime.datetime(2020, 7, 2, 14, 4, 3, tzinfo=datetime.timezone.utc), 'commenter': 'U8NWXD', 'type': 'User'}, {'comment_id': 449026308, 'comment_body': '```suggestion\r\n// Copyright 2020 The Oppia Authors. All Rights Reserved.\r\n```', 'comment_created': datetime.datetime(2020, 7, 2, 14, 4, 45, tzinfo=datetime.timezone.utc), 'commenter': 'U8NWXD', 'type': 'User'}, {'comment_id': 449027315, 'comment_body': ""You shouldn't need an `await` here since `element(...)` returns an `ElementFinder`, not a `Promise`"", 'comment_created': datetime.datetime(2020, 7, 2, 14, 6, 7, tzinfo=datetime.timezone.utc), 'commenter': 'U8NWXD', 'type': 'User'}, {'comment_id': 449060620, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 7, 2, 14, 53, 56, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 449060676, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 7, 2, 14, 54, 1, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 449060740, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 7, 2, 14, 54, 6, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}]","[{'commit_sha': 'f1edcfe3152993e7a85ef556f688556c7644a6a8', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0a0117815c513c281b1fd50ae04a63113187e4a7', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cb6aeefb71c5874a51c053c2c496d6a7a41ec67d', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1408773244661cef61e90ce1312cef269422929b', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '561e7cc22c4366eeb425c9d3a2e321af457cc938', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4f9e13bbe88f847f0848eeee2a9d63ff65d12c26', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '51ada242c1ebdc6329e3fd79c2001a2a83a89086', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bdb7fbff5ff1f514473bc42fa638f53af5ca8335', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6937f4fe337f8995ec51314de0a01eb0c68f7cfb', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c82b62d54379cb486e4b983fbde5150f1ccdc1be', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '56f04c8acdc4cc6c22d08699f5c2b80e1ecc16d4', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '727f6889fc61653a36de99e2ad50a9c2640e0b9e', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b42d3233ee25d80d50312af43dc74e0d85eedb91', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a04cbf8017345288898809bf289c9f60a599fa1c', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a6802d7fcec0ade0ccbc834a46aacab406348a02', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b5c7b544a4fc854c5457921a9a433cadb9e8d853', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a5a2e57efd1619a8e20bd174d2a9e6baafafa2ae', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '72a77f3b86cb9fc54804a54d8ebdf2ac8ccf4b25', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1f2f5bee5bb0cb18cf2fd82aef8fdbf6faabd65d', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '63a9344f7c5aae0f48ffd60bf099b5dad2480022', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e0a30ab32c97c03c1db0f845f66a0404cee00aa7', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd9b5a99860c4a3ab57ba7c7aa2d5bd602734cd91', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4e31b031594ba3ca46d0430b84bd60cbeae6e499', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0dc743b57e703503259cc0d8c65c09ac03951cf8', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '81509a838a7bea2ec5202228cad47b4c45b28abf', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8cfbf35473610b2485741b16baddcbf1a8e6ab9f', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6af08eec5b1691f956ce14e06328ab17f15db68a', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0fd868ee8466a3298a414995423a1ed85bc12f39', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7ae9c1144a314617985761e92240870a57b16f2e', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7289b4162d30eaa402b361826d5498dadb4b25ea', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ebfb27d67ad8712192f53f2defe841d789bb1886', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '736b814d22f596f94ddc94603e8ee691429963e5', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a066d32ab7a9ec87290ed9ce9ac8fac1095bbba8', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd6b4b9ec3875ada46430b5cc3851ca2b0e8e0a11', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f6c600ae82aa38162cf78741995f1e5ba8cea4fe', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'df33bc09ca2ea408d7caace6362351da7a9a5c2e', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aca2132e0dc9144a6ba7939e95faf5d4ce980cbe', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4a55999b4cfe0376ba6e2de37292f4e7de403291', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '19f51e1da2220689cb154a8cb85a5729cf9579e7', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5c3bd7e0debacf68d4052ec68ff93f221e4b1015', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ea36817ec9073fdb73db9e3790364df0d2776ff7', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8783a631a84f1d4f11e2775ad3ecc0cda2c1e3fa', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd4c8c10a47447e86beaca59fb8bf7aede41b3841', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e84bb44c52cc827cff1c4ef86c12d5249aaaa9ef', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '52ea578b21c9e908bc3b915c71a0c683d19efe04', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9e64e6af3d7d525b48cf195fc2f507b2c751e21b', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0917719c11a039285e3a21fbcda844180cfa366a', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}]",Abhith Krishna,31371571,,User,,33,,5,5
441840550,Fix #6893: Make the suggestion validation less stringent to match validation of exploration categories and modify the suggestion migration job.,"## Overview
<!--
READ ME FIRST:
Please answer *both* questions below and check off every point from the Essential Checklist!
If there is no corresponding issue number, fill in N/A where it says [fill_in_number_here] below in 1.
-->

1. This PR fixes or fixes part of #6893
2. This PR does the following: Makes the validation of the score category less stringent as we noticed that the exploration category can be any string and it isn't restricted to the categories set in the constants.ALL_CATEGORIES. In light of this, we are removing the validation from suggestions

## Essential Checklist

- [ ] The PR title starts with ""Fix #bugnum: "", followed by a short, clear summary of the changes. (If this PR fixes part of an issue, prefix the title with ""Fix part of #bugnum: ..."".)
- [ ] The linter/Karma presubmit checks have passed locally on your machine.
- [ ] ""Allow edits from maintainers"" is checked. (See [here](https://help.github.com/en/github/collaborating-with-issues-and-pull-requests/allowing-changes-to-a-pull-request-branch-created-from-a-fork) for instructions on how to enable it.)
  - This lets reviewers restart your CircleCI tests for you.
- [ ] The PR is made from a branch that's **not** called ""develop"".

## PR Pointers

- Oppiabot will notify you when you don't add a PR_CHANGELOG label. If you are unable to do so, please @-mention a code owner (who will be in the Reviewers list), or ask on [Gitter](https://gitter.im/oppia/oppia-chat).
- For what code owners will expect, see the [Code Owner's wiki page](https://github.com/oppia/oppia/wiki/Oppia%27s-code-owners-and-checks-to-be-carried-out-by-developers).
- Make sure your PR follows conventions in the [style guide](https://github.com/oppia/oppia/wiki/Coding-style-guide), otherwise this will lead to review delays
- Never force push. If you do, your PR will be closed.
",True,9732,https://api.github.com/repos/oppia/oppia/pulls/9732,https://github.com/oppia/oppia/pull/9732,closed,267,106,6,13,13,13,0,1,[],2020-06-30 07:35:08+00:00,2020-07-04 19:03:11+00:00,386883.0,"4 days, 11:28:03","[{'comment_id': 448004338, 'comment_body': 'match -> matches', 'comment_created': datetime.datetime(2020, 6, 30, 22, 1, 17, tzinfo=datetime.timezone.utc), 'commenter': 'ankita240796', 'type': 'User'}, {'comment_id': 448005100, 'comment_body': 'Why are we making this change?', 'comment_created': datetime.datetime(2020, 6, 30, 22, 3, 19, tzinfo=datetime.timezone.utc), 'commenter': 'ankita240796', 'type': 'User'}, {'comment_id': 448122045, 'comment_body': ""@ankita240796 , As per the issue, we need to remove the validation from the suggestion `score_category` so that it doesn't need to belong to a fixed set of strings defined in the constants file. The only validation required is for the score_category to match the exploration category.(which I've added above in the suggestion model validator)\r\nThe function `_validate_score_category` above which I removed  validates that score_category to belong to the defined set of values.\r\nAs per this comment [link](https://github.com/oppia/oppia/pull/9519#discussion_r440675203)  I removed this. Shouldn't we remove this? cc @DubeySandeep , @nithusha21 "", 'comment_created': datetime.datetime(2020, 7, 1, 5, 24, 9, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 448137538, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 7, 1, 6, 15, 46, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 448260475, 'comment_body': 'Can you please add a ~~test~~ check/validation for the question suggestions as well?', 'comment_created': datetime.datetime(2020, 7, 1, 10, 10, 26, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 448310210, 'comment_body': 'Ah ok, makes sense. Thanks for explaining.', 'comment_created': datetime.datetime(2020, 7, 1, 11, 52, 19, tzinfo=datetime.timezone.utc), 'commenter': 'ankita240796', 'type': 'User'}, {'comment_id': 448310640, 'comment_body': 'This should be done using fetching of external instances -- https://github.com/oppia/oppia/blob/develop/core/domain/prod_validation_jobs_one_off.py#L233.', 'comment_created': datetime.datetime(2020, 7, 1, 11, 53, 9, tzinfo=datetime.timezone.utc), 'commenter': 'ankita240796', 'type': 'User'}, {'comment_id': 448653527, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 7, 1, 22, 44, 9, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 448653548, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 7, 1, 22, 44, 14, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 449028799, 'comment_body': 'Should we extract `score_category_type` then the subtype (just for better readability)', 'comment_created': datetime.datetime(2020, 7, 2, 14, 8, 18, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 449029757, 'comment_body': 'Why do we need this check? if required should we move this to top instead of nesting it?', 'comment_created': datetime.datetime(2020, 7, 2, 14, 9, 44, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 449647981, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 7, 3, 16, 9, 35, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 449648142, 'comment_body': 'done, moved it', 'comment_created': datetime.datetime(2020, 7, 3, 16, 10, 2, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}]","[{'commit_sha': 'f4658afd0f292b6bad79b46e1eb149ff96b8bafe', 'committer_username': 'nithusha21', 'committer_name': 'Nithesh N. Hariharan', 'committer_email': 'nithusha21@yahoo.co.in', 'commit_date': datetime.datetime(2015, 4, 11, 9, 19, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '09802d17c0536dd08770978f8bfbb7d4173bd243', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '95c3e534ff47822edd2bd909056152d1e998ae36', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '002ebd11e318f57efa5e6d5207df07d0ec28f2a1', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5e24a5d4fbe0b73572d0e8923ab42bb5eb9265cd', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '303d970c5918137f7b03e2b13be127804895eab3', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8f96c47f49abb63211b8cd872f4bda5c75782344', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd22f0c591660d8f9d47d9bc37972a9e61f8280ac', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '74c08f78855c65387db909cbe5f705d24b35a94d', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '96041bd3d3b20eb133caae6cb4458c0f1b0f7618', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f647b78e0308ec8c107b19c2f25b58a9fdb8d896', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fe6e05065a480ca8e8ab9a3ca43b24aad2818323', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '57f122feddb6ae784b87365b1a4ae37e34f88240', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}]",Abhith Krishna,31371571,,User,,33,,5,5
444748059,Generate SVGs for math-expressions created for all the new entities ,"## Overview
<!--
READ ME FIRST:
Please answer *both* questions below and check off every point from the Essential Checklist!
If there is no corresponding issue number, fill in N/A where it says [fill_in_number_here] below in 1.
-->

~~1. This PR fixes or fixes part of:~~
2. This PR does the following: Generate SVGs for math-expressions created for all the new entities and fix the flaky e2e-test in the reverted PR #9678.

## Essential Checklist

- [ ] The PR title starts with ""Fix #bugnum: "", followed by a short, clear summary of the changes. (If this PR fixes part of an issue, prefix the title with ""Fix part of #bugnum: ..."".)
- [x] The linter/Karma presubmit checks have passed locally on your machine.
- [x] ""Allow edits from maintainers"" is checked. (See [here](https://help.github.com/en/github/collaborating-with-issues-and-pull-requests/allowing-changes-to-a-pull-request-branch-created-from-a-fork) for instructions on how to enable it.)
  - This lets reviewers restart your CircleCI tests for you.
- [x] The PR is made from a branch that's **not** called ""develop"".

## PR Pointers

- Oppiabot will notify you when you don't add a PR_CHANGELOG label. If you are unable to do so, please @-mention a code owner (who will be in the Reviewers list), or ask on [Gitter](https://gitter.im/oppia/oppia-chat).
- For what code owners will expect, see the [Code Owner's wiki page](https://github.com/oppia/oppia/wiki/Oppia%27s-code-owners-and-checks-to-be-carried-out-by-developers).
- Make sure your PR follows conventions in the [style guide](https://github.com/oppia/oppia/wiki/Coding-style-guide), otherwise this will lead to review delays
- Never force push. If you do, your PR will be closed.
",True,9805,https://api.github.com/repos/oppia/oppia/pulls/9805,https://github.com/oppia/oppia/pull/9805,closed,773,67,30,6,15,8,0,3,[],2020-07-06 12:39:04+00:00,2020-07-10 06:57:47+00:00,325123.0,"3 days, 18:18:43","[{'comment_id': 450532860, 'comment_body': 'This needs, at the very least, a comment explaining what\'s going on.\r\n\r\nBut still it\'s not so good. Can you find a positive way to check something useful in the ""Math"" case, rather than skipping it entirely?', 'comment_created': datetime.datetime(2020, 7, 6, 23, 37, 31, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 450779797, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 7, 7, 10, 57, 23, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 451235590, 'comment_body': ""I don't think you need this inner `await`. `.element()` returns an ElementFinder, not a promise"", 'comment_created': datetime.datetime(2020, 7, 8, 1, 46, 39, tzinfo=datetime.timezone.utc), 'commenter': 'U8NWXD', 'type': 'User'}, {'comment_id': 451236326, 'comment_body': ""Can we make this check more thorough? It's pretty lenient at the moment, which is particularly problematic since in the e2e test file, we'll just see a call to `readRteComponent`, so it'll look thorough even though it's not"", 'comment_created': datetime.datetime(2020, 7, 8, 1, 49, 40, tzinfo=datetime.timezone.utc), 'commenter': 'U8NWXD', 'type': 'User'}, {'comment_id': 451236973, 'comment_body': ""Do we foresee fixing this ever, or is this a console error we're planning to ignore?"", 'comment_created': datetime.datetime(2020, 7, 8, 1, 52, tzinfo=datetime.timezone.utc), 'commenter': 'U8NWXD', 'type': 'User'}, {'comment_id': 451305604, 'comment_body': 'done, removed', 'comment_created': datetime.datetime(2020, 7, 8, 6, 12, 49, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 451305713, 'comment_body': ""Actually, this console error doesn't occur now so I removed it."", 'comment_created': datetime.datetime(2020, 7, 8, 6, 13, 9, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 451306145, 'comment_body': ""done, I've added more checks.\r\nBut FYI, we are gonna soon change how math rich text components are rendered(we will use images), so I am planning to add more detailed checks after that."", 'comment_created': datetime.datetime(2020, 7, 8, 6, 14, 26, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}]","[{'commit_sha': 'e2d6c5b9108e6d4234990ec5f6c7f442bdf33941', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0cf2283709c939dfdfca1485daa4e066b2f2a5a0', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '650de8930c241f6587229bbd9736c8e22966940a', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4891461641c8593daa1017dbb07d3e5acaa9f16b', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '00079e8dbaeb66becb2e808c1a2e2e05960b2d03', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '603d79f6e9f8a405d79aff17ba4389c42f56e008', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}]",Abhith Krishna,31371571,,User,,33,,5,5
447869188,Added one-off job and temporary model for helping in image generation of Math explorations,"Audit job and temporary model for helping in image generation of Math explorations

## Overview
<!--
READ ME FIRST:
Please answer *both* questions below and check off every point from the Essential Checklist!
If there is no corresponding issue number, fill in N/A where it says [fill_in_number_here] below in 1.
-->

1. This PR fixes or fixes part of : NA.
2. This PR does the following: added audit job and temporary model for helping in image generation of Math explorations
- The [doc](https://docs.google.com/document/d/165s---3FU4h8-SHT6ZKIgkh8sw4KIWXMFW_9u_D4AB0/edit#) with all the details for SVG generation for Math explorations
## Essential Checklist

- [ ] The PR title starts with ""Fix #bugnum: "", followed by a short, clear summary of the changes. (If this PR fixes part of an issue, prefix the title with ""Fix part of #bugnum: ..."".)
- [x] The linter/Karma presubmit checks have passed locally on your machine.
- [x] ""Allow edits from maintainers"" is checked. (See [here](https://help.github.com/en/github/collaborating-with-issues-and-pull-requests/allowing-changes-to-a-pull-request-branch-created-from-a-fork) for instructions on how to enable it.)
  - This lets reviewers restart your CircleCI tests for you.
- [x] The PR is made from a branch that's **not** called ""develop"".

## PR Pointers

- Oppiabot will notify you when you don't add a PR_CHANGELOG label. If you are unable to do so, please @-mention a code owner (who will be in the Reviewers list), or ask on [Gitter](https://gitter.im/oppia/oppia-chat).
- For what code owners will expect, see the [Code Owner's wiki page](https://github.com/oppia/oppia/wiki/Oppia%27s-code-owners-and-checks-to-be-carried-out-by-developers).
- Make sure your PR follows conventions in the [style guide](https://github.com/oppia/oppia/wiki/Coding-style-guide), otherwise this will lead to review delays
- Never force push. If you do, your PR will be closed.
",True,9889,https://api.github.com/repos/oppia/oppia/pulls/9889,https://github.com/oppia/oppia/pull/9889,closed,2276,2,18,57,20,237,1,1,[{'name': 'PR: Affects datastore layer'}],2020-07-12 08:33:09+00:00,2020-07-24 08:28:57+00:00,1036548.0,"11 days, 23:55:48","[{'comment_id': 454140178, 'comment_body': 'validate exploration here and make sure you are working with a valid exploration*', 'comment_created': datetime.datetime(2020, 7, 14, 6, 50, 16, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 454140543, 'comment_body': 'Remove the unwanted parenthesis*', 'comment_created': datetime.datetime(2020, 7, 14, 6, 51, 1, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 454141225, 'comment_body': '@seanlip, this is why I think we should have html_services which will have all the html related methods, like here `estimate_size_of_svg_for_math_expressions_in_html` is nothing related to validation*', 'comment_created': datetime.datetime(2020, 7, 14, 6, 52, 30, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 454142190, 'comment_body': 'Why calling this method twice? Can we do this:\r\n\r\na, b = something(...)', 'comment_created': datetime.datetime(2020, 7, 14, 6, 54, 36, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 454142883, 'comment_body': 'USe max(a, b) to avoid branching*', 'comment_created': datetime.datetime(2020, 7, 14, 6, 56, 4, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 454143885, 'comment_body': 'Can we use (item.id, (size_of_math_svg, largest_math_expression)) for key value pairs?', 'comment_created': datetime.datetime(2020, 7, 14, 6, 58, 21, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 454144501, 'comment_body': 'Only yield this if size_of_math_svg > 0?', 'comment_created': datetime.datetime(2020, 7, 14, 6, 59, 42, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 454144884, 'comment_body': 'Use max(a, b)', 'comment_created': datetime.datetime(2020, 7, 14, 7, 0, 28, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 454146127, 'comment_body': 'Define this constant in this file', 'comment_created': datetime.datetime(2020, 7, 14, 7, 3, 19, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 454169126, 'comment_body': 'tuple(int, str).\r\n\r\n', 'comment_created': datetime.datetime(2020, 7, 14, 7, 48, 48, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 454170434, 'comment_body': 'Estimates the max approximate size*', 'comment_created': datetime.datetime(2020, 7, 14, 7, 51, 13, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 454177586, 'comment_body': 'Use a better name to indicate whether we need to generate svg images for the corresponding exploration.', 'comment_created': datetime.datetime(2020, 7, 14, 8, 4, 7, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 454177885, 'comment_body': 'ExplorationMathExpressionStatsModel (or something around that!)', 'comment_created': datetime.datetime(2020, 7, 14, 8, 4, 42, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 454180625, 'comment_body': 'Do we still need these methods?', 'comment_created': datetime.datetime(2020, 7, 14, 8, 10, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 454182541, 'comment_body': 'IntegerProperty?', 'comment_created': datetime.datetime(2020, 7, 14, 8, 13, 21, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 454508123, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 7, 14, 17, 5, 15, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 454508206, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 7, 14, 17, 5, 23, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 454508247, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 7, 14, 17, 5, 28, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 454508310, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 7, 14, 17, 5, 35, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 454508360, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 7, 14, 17, 5, 39, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 454508850, 'comment_body': 'We will be using this limit in the future. So I think this might be the better place to define this', 'comment_created': datetime.datetime(2020, 7, 14, 17, 6, 23, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 454508892, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 7, 14, 17, 6, 29, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 454508958, 'comment_body': 'changed it', 'comment_created': datetime.datetime(2020, 7, 14, 17, 6, 36, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 454509013, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 7, 14, 17, 6, 41, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 454509052, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 7, 14, 17, 6, 46, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 454509175, 'comment_body': ""removed it, I don't think its required\r\nEdit: actually we need this. because there is a backend test that expects all models to have this."", 'comment_created': datetime.datetime(2020, 7, 14, 17, 6, 59, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 454509225, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 7, 14, 17, 7, 5, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 454509333, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 7, 14, 17, 7, 17, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 454510763, 'comment_body': ""Actually, we should yield only one key because we find some output variables by iterating over all the yielded `item.id`'s.\r\nIf we yield item.id as a key, then the reduce() method will be called multiple times and we can't find all the required variables.\r\nHope it's clear or am I missing something"", 'comment_created': datetime.datetime(2020, 7, 14, 17, 9, 41, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 454847392, 'comment_body': 'We should validate this condition that the field is true only if valid image is present in the prod validation jobs.', 'comment_created': datetime.datetime(2020, 7, 15, 7, 27, 24, tzinfo=datetime.timezone.utc), 'commenter': 'ankita240796', 'type': 'User'}, {'comment_id': 454847658, 'comment_body': 'Same for this - prod validation should check if correct size is generated.', 'comment_created': datetime.datetime(2020, 7, 15, 7, 27, 51, tzinfo=datetime.timezone.utc), 'commenter': 'ankita240796', 'type': 'User'}, {'comment_id': 454847736, 'comment_body': 'Ditto.', 'comment_created': datetime.datetime(2020, 7, 15, 7, 27, 59, tzinfo=datetime.timezone.utc), 'commenter': 'ankita240796', 'type': 'User'}, {'comment_id': 455236886, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 7, 15, 17, 56, 46, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 455236949, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 7, 15, 17, 56, 55, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 455236999, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 7, 15, 17, 57, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 455509223, 'comment_body': 'Always include units in the variable name. (Pixels? Bytes?)\r\n\r\nDitto elsewhere, where applicable.', 'comment_created': datetime.datetime(2020, 7, 16, 4, 53, 52, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 455509416, 'comment_body': ""Make a domain object for this tuple -- it's a bit too complex."", 'comment_created': datetime.datetime(2020, 7, 16, 4, 54, 40, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 455509659, 'comment_body': 'Hm. longest_math_expression perhaps?', 'comment_created': datetime.datetime(2020, 7, 16, 4, 55, 35, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 455509792, 'comment_body': 'svg --> svgs? Should there be the word ""total"" somewhere?\r\n\r\n(Can\'t tell whether you are referring to one or many SVGs.)', 'comment_created': datetime.datetime(2020, 7, 16, 4, 56, 7, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 455510300, 'comment_body': ""Should yield an error?\r\n\r\nWhat are we going to do with exps that fail validation? Don't we still need to migrate them? Do we need to fix them first? I think you need to account for them somehow."", 'comment_created': datetime.datetime(2020, 7, 16, 4, 58, 13, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 455510319, 'comment_body': 'I think you can just inline value_dict, and have a shorter key.', 'comment_created': datetime.datetime(2020, 7, 16, 4, 58, 20, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 455510920, 'comment_body': ""Woah, this doesn't scale at all. You should use put_multi().\r\n\r\nAlso this is just the audit job right? Audit jobs should not put anything into the datastore. Instead you should have some kind of regeneration job, similar to how we regenerate summaries etc. And maybe a deletion job to clear all existing ExplorationMathRichTextInfoModels so that you can do a clean start over (in case any data there becomes corrupted)."", 'comment_created': datetime.datetime(2020, 7, 16, 5, 0, 35, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 455511086, 'comment_body': '`+= 1`', 'comment_created': datetime.datetime(2020, 7, 16, 5, 1, 18, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 455511223, 'comment_body': '`+= 1`', 'comment_created': datetime.datetime(2020, 7, 16, 5, 1, 54, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 455511370, 'comment_body': ""If we're just outputting interesting information, maybe also output the total number of svgs and the total size of svgs (and any other info you can think of that might be useful)."", 'comment_created': datetime.datetime(2020, 7, 16, 5, 2, 29, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 455512603, 'comment_body': 'list(...) (here and in the tuple)', 'comment_created': datetime.datetime(2020, 7, 16, 5, 7, 15, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 455512791, 'comment_body': 'You can use `+=`.\r\n\r\nAlso I think your variable name (here and elsewhere) for this concept should include `approx_`.', 'comment_created': datetime.datetime(2020, 7, 16, 5, 8, 2, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 455512866, 'comment_body': 'largest --> longest (given that you are comparing by length).\r\n\r\nIt might also be clearer to name this longest_raw_latex_string throughout. When reading it above I was wondering what format it was in, or whether it was a domain object.', 'comment_created': datetime.datetime(2020, 7, 16, 5, 8, 26, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 455513154, 'comment_body': '...saved in GCS.', 'comment_created': datetime.datetime(2020, 7, 16, 5, 9, 26, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 455513259, 'comment_body': 'Be clear about what ""failing the validation"" actually means -- i.e. change the description to be more specific.', 'comment_created': datetime.datetime(2020, 7, 16, 5, 9, 50, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 455513511, 'comment_body': ""Given what you're adding to this list, it does not look like a list of errors. Try and give this variable a better name."", 'comment_created': datetime.datetime(2020, 7, 16, 5, 10, 49, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 455513863, 'comment_body': 'I think this is doing things that are out of scope for html_validation_service.\r\n\r\nHave this function do the html parsing and return the data. Then whatever calls it can check GCS.', 'comment_created': datetime.datetime(2020, 7, 16, 5, 12, 9, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 455514034, 'comment_body': 'Separate blocks by 1 new line.', 'comment_created': datetime.datetime(2020, 7, 16, 5, 12, 47, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 455514139, 'comment_body': 'You can put this in a separate test function if you are trying to separate it from the other two.', 'comment_created': datetime.datetime(2020, 7, 16, 5, 13, 12, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 455514325, 'comment_body': 'Do not assert on the length. Compare the return value with the actual value.\r\n\r\nIn general try to use the strictest test possible. Ditto elsewhere.', 'comment_created': datetime.datetime(2020, 7, 16, 5, 13, 57, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 455514618, 'comment_body': 'What does this have to do with anything in this method?\r\n\r\n**Please proofread your PR and make sure all your docstrings are correct.** Treat correctness of docstrings with the same seriousness as you treat correctness of code, otherwise it can be very misleading for other developers.', 'comment_created': datetime.datetime(2020, 7, 16, 5, 15, 11, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 455515066, 'comment_body': 'Explain when this will be deleted. Create a TODO and link to an issue.', 'comment_created': datetime.datetime(2020, 7, 16, 5, 16, 36, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 455515603, 'comment_body': ""I don't know if it's wise to go so close to the upper limit. Give it a bit of breathing room, e.g. 10 MB or a max number of entities at a time. It's OK if the admin has to click the button a bit more, but you don't want network latency or the number of items to update to become a problem."", 'comment_created': datetime.datetime(2020, 7, 16, 5, 18, 26, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 455516342, 'comment_body': 'Have you considered just deleting the model once everything has been confirmed to be generated?', 'comment_created': datetime.datetime(2020, 7, 16, 5, 21, 12, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 455516445, 'comment_body': 'Probably want required=True, with no default.', 'comment_created': datetime.datetime(2020, 7, 16, 5, 21, 37, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 455516584, 'comment_body': 'Be clearer about the internal structure of this property.\r\n\r\nIs it a list of strings? If so then why not ndb.StringProperty(repeated=True)?', 'comment_created': datetime.datetime(2020, 7, 16, 5, 22, 8, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 455516706, 'comment_body': 'Probably better to have required=True rather than default=True, and force callers to specify it.', 'comment_created': datetime.datetime(2020, 7, 16, 5, 22, 33, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 455516832, 'comment_body': '""math exploration"" is not a thing, and it could be construed to mean ""explorations in the math category"". Please describe this using more precise terms.', 'comment_created': datetime.datetime(2020, 7, 16, 5, 23, 4, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 455861114, 'comment_body': 'Add a check for missing/deleted model as well as in other validators.', 'comment_created': datetime.datetime(2020, 7, 16, 15, 10, 4, tzinfo=datetime.timezone.utc), 'commenter': 'ankita240796', 'type': 'User'}, {'comment_id': 456718819, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 7, 17, 23, 54, 40, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 456718859, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 7, 17, 23, 54, 49, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 456718885, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 7, 17, 23, 54, 54, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 456718925, 'comment_body': 'done, changed it', 'comment_created': datetime.datetime(2020, 7, 17, 23, 55, 4, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 456719077, 'comment_body': ""done. I've yielded the invalid explorations. we would need to fix these (if any) and re-run the job"", 'comment_created': datetime.datetime(2020, 7, 17, 23, 55, 45, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 456719092, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 7, 17, 23, 55, 52, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 456719142, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 7, 17, 23, 56, 7, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 456719201, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 7, 17, 23, 56, 23, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 456719210, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 7, 17, 23, 56, 26, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 456719228, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 7, 17, 23, 56, 33, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 456719255, 'comment_body': 'changed this', 'comment_created': datetime.datetime(2020, 7, 17, 23, 56, 42, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 456719276, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 7, 17, 23, 56, 48, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 456719294, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 7, 17, 23, 56, 53, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 456719316, 'comment_body': 'changed this', 'comment_created': datetime.datetime(2020, 7, 17, 23, 57, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 456719347, 'comment_body': 'changed this', 'comment_created': datetime.datetime(2020, 7, 17, 23, 57, 12, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 456719368, 'comment_body': 'changed this', 'comment_created': datetime.datetime(2020, 7, 17, 23, 57, 18, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 456719400, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 7, 17, 23, 57, 26, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 456719415, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 7, 17, 23, 57, 32, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 456719428, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 7, 17, 23, 57, 37, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 456719441, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 7, 17, 23, 57, 42, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 456719453, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 7, 17, 23, 57, 46, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 456719627, 'comment_body': ""Yes I've added one-off jobs for deleting the temp models"", 'comment_created': datetime.datetime(2020, 7, 17, 23, 58, 37, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 456719657, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 7, 17, 23, 58, 42, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 456719685, 'comment_body': 'done, changed to StringProperty', 'comment_created': datetime.datetime(2020, 7, 17, 23, 58, 54, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 456719704, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 7, 17, 23, 58, 58, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 456719723, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 7, 17, 23, 59, 4, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 456735721, 'comment_body': ""It's a good idea to implement this function here, can you remove the duplicate codes in `_convert_states_v33_dict_to_v34_dict` method as well?"", 'comment_created': datetime.datetime(2020, 7, 18, 2, 4, 25, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 456736531, 'comment_body': 'After going through this I found one situations where I need to understand the image generation workflow:\r\n\r\n1. Assume a state already has a hint with math expression (without svg-filename), now someone adds a new hint with math-expression, then the change list will have the entire hints element, right? So are we going to generate the images for both the math expressions? If yes, then are we also going to generate the image for the hint that exists already in exploration with a different filename?\r\n\r\nNote: If the user adds 1 more hint then a new change object will be added in the change list. The new change object will have the old two hints + the new one!', 'comment_created': datetime.datetime(2020, 7, 18, 2, 14, 3, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 456736746, 'comment_body': 'I think we had thought of calling this latex_values_without_images, right?', 'comment_created': datetime.datetime(2020, 7, 18, 2, 15, 49, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 456736805, 'comment_body': 'add `, received %s` at the end here and below', 'comment_created': datetime.datetime(2020, 7, 18, 2, 16, 34, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 456737216, 'comment_body': 'Add test for validation method ', 'comment_created': datetime.datetime(2020, 7, 18, 2, 20, 50, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 456739783, 'comment_body': 'Change this to `exploration-with-math-tags` and define it in a constant (to re-use it in reduce method)', 'comment_created': datetime.datetime(2020, 7, 18, 2, 51, 57, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 456740003, 'comment_body': ""I think we are repeating this method in the reduce function, should we yield this: ('exploration-with-math-tags', (exp_id, latex_values)) and only create ExplorationMathRichTextInfo in the reduce method? wdyt?"", 'comment_created': datetime.datetime(2020, 7, 18, 2, 55, 1, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 456740315, 'comment_body': 'This is going to be len(final_values), right? If yes can we remove this variable and use len(...) on line 620 (I see a lot of variables here so trying to make is small and clear).', 'comment_created': datetime.datetime(2020, 7, 18, 2, 58, 55, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 456740612, 'comment_body': 'Domain object corresponding to this model class should have all the attributes of the model class.', 'comment_created': datetime.datetime(2020, 7, 18, 3, 2, 19, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 456741003, 'comment_body': 'Create a list of `ExplorationMathRichTextInfo` object and call exp_services.create_exp_math_rict_test_info_models(list) [Internally this method will call validate object before creating model.]', 'comment_created': datetime.datetime(2020, 7, 18, 3, 7, 19, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 456741125, 'comment_body': 'Break line after `(` OR maybe do it this way:\r\n```\r\nif A > (\r\n    B):\r\n```', 'comment_created': datetime.datetime(2020, 7, 18, 3, 9, 7, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 456741341, 'comment_body': '[Leaving this comment for other reviewers]\r\n\r\nThis constant is defined in feconf as we are going to use this for creating a bath for generating SVGimages, so this will be used in other files in the future.', 'comment_created': datetime.datetime(2020, 7, 18, 3, 11, 40, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 456742332, 'comment_body': 'I think we had thought of calling this latex_values_without_svg', 'comment_created': datetime.datetime(2020, 7, 18, 3, 23, 14, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 456742387, 'comment_body': 'Make sure this deletes the model not just marks delete=True', 'comment_created': datetime.datetime(2020, 7, 18, 3, 23, 53, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 456742622, 'comment_body': ""You can call get_all() isn't it?"", 'comment_created': datetime.datetime(2020, 7, 18, 3, 26, 45, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 456742705, 'comment_body': 'get_latext_values_without_svg_from_html, maybe?', 'comment_created': datetime.datetime(2020, 7, 18, 3, 27, 43, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 456742768, 'comment_body': 'Create a set from the beginning*', 'comment_created': datetime.datetime(2020, 7, 18, 3, 28, 40, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 456749380, 'comment_body': 'Add the else case*', 'comment_created': datetime.datetime(2020, 7, 18, 4, 53, 3, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 456749685, 'comment_body': 'Should we try to apply the changes list and validate the change list is in a good state and then only update those change lists? (not sure!)', 'comment_created': datetime.datetime(2020, 7, 18, 4, 57, 6, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 456749952, 'comment_body': 'I think this  [line](https://github.com/oppia/oppia/pull/9889/files#diff-f4f5c0de40e1267f463d93fa80583973R6219) does that.\r\n`test_missing_exp_model_failure()`', 'comment_created': datetime.datetime(2020, 7, 18, 5, 0, 48, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 456751366, 'comment_body': 'It looks like this is something related to the exploration object. Can you find a better name for this? OR have this pattern:\r\n\r\nGeneralEntityMathRichTextInfoModel:\r\n- entity_name:\r\n- latext_values_without_svg.\r\n\r\n\r\nLet me know if you want to discuss this in detail?', 'comment_created': datetime.datetime(2020, 7, 18, 5, 19, 17, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 456751424, 'comment_body': 'Follow the comments in exp_one_off_job.py file over here as well*', 'comment_created': datetime.datetime(2020, 7, 18, 5, 19, 53, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 456752398, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 7, 18, 5, 33, 3, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 456752757, 'comment_body': ""`extract_latex_values_from_math_rich_text_without_filename`  will extract the latex value only from the old hint in the change list. this is because for the new hint the `svg_filename` field won't be empty.\r\nSo finally we will be generating image only for the old hints with empty svg_filename field."", 'comment_created': datetime.datetime(2020, 7, 18, 5, 37, 34, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 456840710, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 7, 19, 0, 6, 3, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 456840713, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 7, 19, 0, 6, 8, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 456840719, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 7, 19, 0, 6, 13, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 456840721, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 7, 19, 0, 6, 20, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 456840722, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 7, 19, 0, 6, 25, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 456840725, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 7, 19, 0, 6, 30, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 456840760, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 7, 19, 0, 6, 56, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 456840772, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 7, 19, 0, 7, 1, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 456840774, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 7, 19, 0, 7, 6, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 456840788, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 7, 19, 0, 7, 12, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 456840817, 'comment_body': 'THis is a baseModel so this is sufficient', 'comment_created': datetime.datetime(2020, 7, 19, 0, 7, 27, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 456840823, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 7, 19, 0, 7, 33, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 456840824, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 7, 19, 0, 7, 38, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 456840837, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 7, 19, 0, 7, 46, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 456840853, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 7, 19, 0, 8, 4, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 456840906, 'comment_body': 'Draft changes with version greater than explorations are invalid and discarded anyway\r\nShould I still add this case?', 'comment_created': datetime.datetime(2020, 7, 19, 0, 9, 2, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 456840961, 'comment_body': 'That is already done before a draft change is created right? i.e applying to an exploration', 'comment_created': datetime.datetime(2020, 7, 19, 0, 9, 58, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 456840981, 'comment_body': 'changed this', 'comment_created': datetime.datetime(2020, 7, 19, 0, 10, 10, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 456841014, 'comment_body': 'changed this', 'comment_created': datetime.datetime(2020, 7, 19, 0, 10, 22, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 456863948, 'comment_body': 'For now this limit will only be only used for calculation of minimum number of batches required in the audit job. \r\nThe actual limit can be set once we see the result of the job(i.e we have an idea of how many explorations require conversion).\r\nAlso the actual size will be significantly less than what we estimate in the one-off job. So for example if the audit job suggests that an exploration has 10 Mb of SVGs, the actual size will be around 6 or 7Mb.\r\nAlso we will be calculating the actual size of the Payload in the frontend and set a limit there anyway.\r\n', 'comment_created': datetime.datetime(2020, 7, 19, 5, 48, 51, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 456864202, 'comment_body': ""I don't think this is a duplicate.because this new method just checks the type of draft changes and extracts HTML accordingly, but the method _convert_states_v33_dict_to_v34_dict converts HTML.\r\nBoth the methods need to do check the type of draft changes and proceed accordingly.\r\neven the method exp_services.apply_change_list uses the similar code"", 'comment_created': datetime.datetime(2020, 7, 19, 5, 51, 31, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 456864549, 'comment_body': 'Do we still need this?', 'comment_created': datetime.datetime(2020, 7, 19, 5, 55, 14, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 456864652, 'comment_body': 'validate the values at the end!', 'comment_created': datetime.datetime(2020, 7, 19, 5, 56, 28, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 456865194, 'comment_body': 'Maybe define this on top of the file? EXPLORATION_WITH_MATH_TAGS_KEY', 'comment_created': datetime.datetime(2020, 7, 19, 6, 3, 40, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 456865335, 'comment_body': 'Why initialized this with 1?', 'comment_created': datetime.datetime(2020, 7, 19, 6, 5, 3, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 456865470, 'comment_body': 'exploration_math_rich_text_info_list*', 'comment_created': datetime.datetime(2020, 7, 19, 6, 6, 16, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 456865584, 'comment_body': 'To make this more clear use math_rich_text_info.`...` instead of value[1]', 'comment_created': datetime.datetime(2020, 7, 19, 6, 8, 5, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 456865677, 'comment_body': 'If this variable is not used multiple times then should we directly use `math_rich_text_info.get_largest_latex_value()` below?', 'comment_created': datetime.datetime(2020, 7, 19, 6, 9, 26, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 456868725, 'comment_body': 'Not done?', 'comment_created': datetime.datetime(2020, 7, 19, 6, 43, 32, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 456868837, 'comment_body': 'Add both of these values (id, id) in the domain object! (This is a save method it should not save random values in the models.)', 'comment_created': datetime.datetime(2020, 7, 19, 6, 44, 55, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 456876895, 'comment_body': 'done, removed it', 'comment_created': datetime.datetime(2020, 7, 19, 8, 9, 4, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 456876922, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 7, 19, 8, 9, 13, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 456876969, 'comment_body': 'This constant should only be used in this job right?', 'comment_created': datetime.datetime(2020, 7, 19, 8, 9, 44, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 456876984, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 7, 19, 8, 9, 53, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 456877008, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 7, 19, 8, 9, 59, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 456877022, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 7, 19, 8, 10, 12, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 456877690, 'comment_body': 'No, We need to find math_rich_text_info.get_longest_latex_value() for each exploration and then find the longest  of them', 'comment_created': datetime.datetime(2020, 7, 19, 8, 17, 44, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 456877783, 'comment_body': 'This is because there will be atleast one batch right?. this variable is incremented when the size of SVGs encountered exceeds the max limit', 'comment_created': datetime.datetime(2020, 7, 19, 8, 18, 39, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 456878481, 'comment_body': 'Can we do this on line 602:\r\n\r\n```\r\nlongest_raw_latex_string = max(\r\n                        math_rich_text_info.get_longest_latex_value(),\r\n                        longest_raw_latex_string, key=len)\r\n\r\n```\r\n\r\n(just to avoid loading lots of variables in the brain while reading this function!)\r\n', 'comment_created': datetime.datetime(2020, 7, 19, 8, 25, 11, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 456884883, 'comment_body': 'filename*', 'comment_created': datetime.datetime(2020, 7, 19, 9, 26, 54, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 456885446, 'comment_body': 'Do you want to execute steps 400-42 if  exploration_version < draft_change_list_version? If n, then yield an error maybe?', 'comment_created': datetime.datetime(2020, 7, 19, 9, 32, 46, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 456885788, 'comment_body': ""```\r\nyield (\r\n   'found %d draft changes with math-tags having no SVG' % len(\r\n        values), values);\r\n"", 'comment_created': datetime.datetime(2020, 7, 19, 9, 35, 59, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 456885800, 'comment_body': 'yield the corresponding exploration id*', 'comment_created': datetime.datetime(2020, 7, 19, 9, 36, 14, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 456885988, 'comment_body': 'maybe latex_values_without_svg? (Considering one latest value will have one svg*)', 'comment_created': datetime.datetime(2020, 7, 19, 9, 37, 55, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 456901591, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 7, 19, 12, 16, 15, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 456901701, 'comment_body': 'We want to execute these lines even in the case for  exploration_version == draft_change_list_version right?\r\n\r\n\r\n', 'comment_created': datetime.datetime(2020, 7, 19, 12, 17, 23, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 456905196, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 7, 19, 12, 51, 27, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 456905199, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 7, 19, 12, 51, 30, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 456905202, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 7, 19, 12, 51, 34, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 456905212, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 7, 19, 12, 51, 38, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 456905318, 'comment_body': ""I've added an else case (when  exploration_version > draft_change_list_version ) and yield an error"", 'comment_created': datetime.datetime(2020, 7, 19, 12, 52, 35, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 456906414, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 7, 19, 13, 2, 45, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 457044566, 'comment_body': 'I meant add a check here: `if exploration_model_reference is None or exploration_model_reference.deleted` since in that case the job will error out. Example: https://github.com/oppia/oppia/blob/develop/core/domain/prod_validation_jobs_one_off.py#L1072', 'comment_created': datetime.datetime(2020, 7, 20, 4, 44, 17, tzinfo=datetime.timezone.utc), 'commenter': 'ankita240796', 'type': 'User'}, {'comment_id': 457075140, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 7, 20, 5, 51, 31, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 457078090, 'comment_body': 'Explain here that how do we judge is the information is valid.', 'comment_created': datetime.datetime(2020, 7, 20, 5, 57, 35, tzinfo=datetime.timezone.utc), 'commenter': 'ankita240796', 'type': 'User'}, {'comment_id': 457078416, 'comment_body': 'Remove new line.', 'comment_created': datetime.datetime(2020, 7, 20, 5, 58, 13, tzinfo=datetime.timezone.utc), 'commenter': 'ankita240796', 'type': 'User'}, {'comment_id': 457078493, 'comment_body': 'Extra new line.', 'comment_created': datetime.datetime(2020, 7, 20, 5, 58, 22, tzinfo=datetime.timezone.utc), 'commenter': 'ankita240796', 'type': 'User'}, {'comment_id': 457091960, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 7, 20, 6, 25, 44, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 457092002, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 7, 20, 6, 25, 49, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 457092039, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 7, 20, 6, 25, 54, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 457236597, 'comment_body': 'You are just extracting here, not upgrading, right? (As far as this function is concerned)', 'comment_created': datetime.datetime(2020, 7, 20, 9, 53, 19, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 457237250, 'comment_body': ""It's OK to call this just `written_translations`."", 'comment_created': datetime.datetime(2020, 7, 20, 9, 54, 18, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 457237785, 'comment_body': 'How about ItemSelectionInput (and are there others)?', 'comment_created': datetime.datetime(2020, 7, 20, 9, 55, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 457238454, 'comment_body': '`for answer_group_dict in new_value`\r\n\r\nand then drop the ""_object"" suffix below', 'comment_created': datetime.datetime(2020, 7, 20, 9, 55, 56, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 457239034, 'comment_body': 'Missing period at end.', 'comment_created': datetime.datetime(2020, 7, 20, 9, 56, 45, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 457239631, 'comment_body': 'Start descriptions with capital letters.\r\n\r\nAlso, this doesn\'t really explain what the relation of the ""unique latex values"" is to the exploration. Please elaborate a bit more on what this field represents. Also, where does the ""without svg"" come in? That should be explained too.\r\n\r\nAlso, perhaps values --> strings (more specific).\r\n\r\nLastly, latex is actually spelled ""LaTeX"" (the argname is fine, but if you\'re using it in descriptions then that\'s the way it\'s cased).', 'comment_created': datetime.datetime(2020, 7, 20, 9, 57, 31, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 457262557, 'comment_body': 'Latex --> LaTeX expression', 'comment_created': datetime.datetime(2020, 7, 20, 10, 31, 41, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 457262650, 'comment_body': 'increase --> increases', 'comment_created': datetime.datetime(2020, 7, 20, 10, 31, 50, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 457262754, 'comment_body': 'lesser --> less', 'comment_created': datetime.datetime(2020, 7, 20, 10, 31, 59, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 457262944, 'comment_body': 'Drop space after #', 'comment_created': datetime.datetime(2020, 7, 20, 10, 32, 18, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 457263281, 'comment_body': 'get_longest_latex_expression\r\n\r\nChange ""largest"" to ""longest"" below, and change ""latex"" to ""LaTeX"" (in multiple places).', 'comment_created': datetime.datetime(2020, 7, 20, 10, 32, 50, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 457263493, 'comment_body': 'Add newline above this one.', 'comment_created': datetime.datetime(2020, 7, 20, 10, 33, 11, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 457264269, 'comment_body': 'latex is misspelled. Also, everywhere, please change ""values"" to ""strings"" where appropriate. Always use the most specific word possible.', 'comment_created': datetime.datetime(2020, 7, 20, 10, 34, 22, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 457264630, 'comment_body': 'a --> current', 'comment_created': datetime.datetime(2020, 7, 20, 10, 34, 56, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 457265240, 'comment_body': 'Can move to previous line', 'comment_created': datetime.datetime(2020, 7, 20, 10, 35, 47, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 457265410, 'comment_body': 'Can move to previous line and drop outer paren', 'comment_created': datetime.datetime(2020, 7, 20, 10, 36, 4, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 457265842, 'comment_body': 'object --> objects', 'comment_created': datetime.datetime(2020, 7, 20, 10, 36, 45, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 457266109, 'comment_body': 'latext --> latex\r\n\r\n', 'comment_created': datetime.datetime(2020, 7, 20, 10, 37, 12, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 457266207, 'comment_body': 'latex --> LaTeX', 'comment_created': datetime.datetime(2020, 7, 20, 10, 37, 18, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 457266353, 'comment_body': 'Start docstrings with capital letters; latex --> LaTeX', 'comment_created': datetime.datetime(2020, 7, 20, 10, 37, 33, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 457267018, 'comment_body': 'Drop space after TODO', 'comment_created': datetime.datetime(2020, 7, 20, 10, 38, 40, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 457267245, 'comment_body': ""Set --> List of unique\r\n\r\nlatex --> LaTeX (here and elsewhere, where it's part of a docstring)"", 'comment_created': datetime.datetime(2020, 7, 20, 10, 39, 3, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 457267663, 'comment_body': 'We generate images', 'comment_created': datetime.datetime(2020, 7, 20, 10, 39, 45, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 458452760, 'comment_body': 'done, changed it', 'comment_created': datetime.datetime(2020, 7, 21, 23, 48, 59, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 458452839, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 7, 21, 23, 49, 12, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 458453365, 'comment_body': ""No currently only drag and drop interaction allow HTML in solution's correct answers. You can refer to the interaction registry for these interactions for details."", 'comment_created': datetime.datetime(2020, 7, 21, 23, 50, 52, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 458453468, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 7, 21, 23, 51, 11, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 458453478, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 7, 21, 23, 51, 13, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 458453489, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 7, 21, 23, 51, 14, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 458453490, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 7, 21, 23, 51, 14, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 458453522, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 7, 21, 23, 51, 22, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 458453559, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 7, 21, 23, 51, 27, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 458453585, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 7, 21, 23, 51, 31, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 458453616, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 7, 21, 23, 51, 35, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 458453649, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 7, 21, 23, 51, 40, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 458453671, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 7, 21, 23, 51, 45, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 458453702, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 7, 21, 23, 51, 51, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 458453727, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 7, 21, 23, 51, 56, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 458453745, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 7, 21, 23, 52, 1, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 458453769, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 7, 21, 23, 52, 6, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 458453803, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 7, 21, 23, 52, 11, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 458453816, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 7, 21, 23, 52, 15, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 458453834, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 7, 21, 23, 52, 19, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 458453861, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 7, 21, 23, 52, 25, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 458453891, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 7, 21, 23, 52, 30, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 458453913, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 7, 21, 23, 52, 34, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 458680735, 'comment_body': 'LaTeX expression\r\n\r\n(I mentioned this in a previous review comment https://github.com/oppia/oppia/pull/9889#discussion_r457262557)', 'comment_created': datetime.datetime(2020, 7, 22, 10, 3, 2, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 458680959, 'comment_body': 'You don\'t need ""by length""', 'comment_created': datetime.datetime(2020, 7, 22, 10, 3, 26, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 458681136, 'comment_body': '""longest"". Follow through properly on review comments, please.', 'comment_created': datetime.datetime(2020, 7, 22, 10, 3, 45, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 458682841, 'comment_body': ""Isn't this test testing the case when they are not strings?"", 'comment_created': datetime.datetime(2020, 7, 22, 10, 6, 42, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 458683376, 'comment_body': 'Spelling is wrong. Please be careful.', 'comment_created': datetime.datetime(2020, 7, 22, 10, 7, 42, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 458683581, 'comment_body': 'Spelling is wrong, please be careful.', 'comment_created': datetime.datetime(2020, 7, 22, 10, 8, 4, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 458683687, 'comment_body': 'Ditto: spelling.', 'comment_created': datetime.datetime(2020, 7, 22, 10, 8, 19, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 459021961, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 7, 22, 19, 10, 35, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 459022007, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 7, 22, 19, 10, 40, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 459022077, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 7, 22, 19, 10, 47, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 459022141, 'comment_body': 'done, changed the name', 'comment_created': datetime.datetime(2020, 7, 22, 19, 10, 53, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 459022304, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 7, 22, 19, 11, 11, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 459022347, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 7, 22, 19, 11, 15, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 459022415, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 7, 22, 19, 11, 23, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 459772226, 'comment_body': 'Do you need to write ""encoding"" here? Ditto below.', 'comment_created': datetime.datetime(2020, 7, 23, 22, 55, 15, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 459772340, 'comment_body': ""Did you test this manually by running the job on a local instance with unicode chars? I ask because I don't normally see this pattern -- it's not common for us to do .decode('utf-8'), so you may want to pay extra attention here."", 'comment_created': datetime.datetime(2020, 7, 23, 22, 55, 40, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 459772675, 'comment_body': 'This is named wrongly. It should be exp_model.', 'comment_created': datetime.datetime(2020, 7, 23, 22, 56, 42, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}]","[{'commit_sha': '2f5ed1fac305e11e6e1d6535584163f821886e91', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '318fceea8fb55aeb9e3769dfe4a3c1783e09562c', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a669b4c90b18e83ab42e3a1d52725bc8c7fc563e', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '86549ca268f21fdbbd044222363c9ced24ab3de1', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8ef91e36df3826a05bbd0a7480e622163ca15753', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7be257ceff821b44b6cf9abe23261e26c7e9db19', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd42649e62f887935b7db2a5b461ee3e8136ea516', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ed871a757b89df079ee095fe626b1d813d2cece9', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ca376f7323451044fbefc5ca83ba509474fb8aef', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cef54afdd7b519ce3669e548aee70dec3d5a355b', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c48bda334b733c33f36e813105485a8911f8c61a', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b5849665d71e9020db2914822b3e8953538987d0', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9ac7bdfa457d715211019d96c169fe59304c2838', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e006b2e8445955e4e6f53b2c92f82e0ed7a4cf25', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '52a2892626fe98019f1b9bfd9470fce02396dece', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a5898f26fccf2d3dc4aaa810b5c33b0779e45cf5', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '92dd23b68c65c4ac8dbf2de8b55e7553c335953d', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9a999fd11a3cbfa9f49c9856bb5d63c6d9f8e4f1', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'be7b3e85ae6c0ac0515b7d192da97b5af7c3c762', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '27b45d8a462ee2461cb7009f6641c76d480bd72f', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '396ed368e640149e3d4290600be3b959a969abff', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2a7f04d19e9ac228bc6723a27a99795deb37217a', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dc04a64e333d05abb70ee30029dbba2c14b76eb6', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0c69337b6adaf20f57f8669d290fc1b0a14ba89d', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '14fece6986b716e01a85de219782c04d9760a3d9', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aeec34ff0fb8e9e40072bcf118354ccba34d1356', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3891ce7c2fe7bb71656d42548bad7946b16f026f', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b32cbcded87dbae6f60192f5bef841c56cb7ac38', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '67486cb231e4fe359826c92ac256e2f5ade5d879', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f216649a623cb5248950e0b37f7e23813473f0d2', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4d33e1f2e9292ed2140a9ce4cd39d3000f7bad43', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '32b900ee70ba95df547f642ee965177159ce1f73', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4a4dd1ec1cff43de2deab7a997a7f97a9a92576e', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1fe49052adc852eb149f4db8cb6787908d2c670c', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '04cacccda03df33812281d037d63f4155b10e0f9', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '57a6e23d7c60f55582475caf06797a75938c771a', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b2b43ebdf0cdaf8467185d7e5196fbe96cc066be', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dfd1f4678445d5aceb69a3a35c34bad409deacb7', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e02553e5105cda45cedaba757495eb23fdbc8bfd', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ff28606f9240a29b907d2898be3ff9506b511694', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c0c5cb996a61277822c0e7124c3c1d2427aa1a69', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '91150adf9deda3b58a9290cf6addc2444bcd3b33', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '89f4cb07737aa33a433d5238239cb51307990209', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c67abef1a277610198ed10d62762a7f8f989f37d', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1967c07e9f0ababddf88fd86263c75986b1bf1f5', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '81e7e7754194b7945cbf646f753f46d3aeace856', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6adf18706433415265653f3e39d71983713a5a83', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3ff3cc8c297d996599944ce14db8321761fdc5e0', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1b638f85d2bbc79647d93c36a38b9146e4e5f311', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4346101aabd81bcf28c6100d77f8275367c94122', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '715c2528c9ebf803d058c6579cff889d103b45b6', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b1dc7c9d380be62aa4070d0601fab8a9f7a4b9ff', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fc2230cfe81fec9198453016f14f4167e4ae41f1', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '75a9aa50fb772426b60135e5aabed9296b3c3841', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7a7f3bb3a7f09dda9816233be7f85dd06d39a7ae', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fd1688342e2e0b71c06eb7427e2277c07e560f99', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd865c85e2e5872673d16adccf6d47963829c0e73', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}]",Abhith Krishna,31371571,,User,,33,,5,5
475484078,Allow images in question suggestions.,"## Overview
<!--
READ ME FIRST:
Please answer *both* questions below and check off every point from the Essential Checklist!
If there is no corresponding issue number, fill in N/A where it says [fill_in_number_here] below in 1.
-->

1. This PR fixes or fixes part of NA
2. This PR does the following: Allow images in question suggestions

## Essential Checklist

- [ ] The PR title starts with ""Fix #bugnum: "", followed by a short, clear summary of the changes. (If this PR fixes part of an issue, prefix the title with ""Fix part of #bugnum: ..."".)
- [x] The linter/Karma presubmit checks have passed locally on your machine.
- [x] ""Allow edits from maintainers"" is checked. (See [here](https://help.github.com/en/github/collaborating-with-issues-and-pull-requests/allowing-changes-to-a-pull-request-branch-created-from-a-fork) for instructions on how to enable it.)
  - This lets reviewers restart your CircleCI tests for you.
- [x] The PR is made from a branch that's **not** called ""develop"".

## PR Pointers

- Oppiabot will notify you when you don't add a PR_CHANGELOG label. If you are unable to do so, please @-mention a code owner (who will be in the Reviewers list), or ask on [Gitter](https://gitter.im/oppia/oppia-chat).
- For what code owners will expect, see the [Code Owner's wiki page](https://github.com/oppia/oppia/wiki/Oppia%27s-code-owners-and-checks-to-be-carried-out-by-developers).
- Make sure your PR follows conventions in the [style guide](https://github.com/oppia/oppia/wiki/Coding-style-guide), otherwise this will lead to review delays
- Never force push. If you do, your PR will be closed.
",True,10475,https://api.github.com/repos/oppia/oppia/pulls/10475,https://github.com/oppia/oppia/pull/10475,closed,614,14,19,16,9,29,1,1,[{'name': 'PR: LGTM'}],2020-08-28 15:49:49+00:00,2020-09-01 14:07:19+00:00,339450.0,"3 days, 22:17:30","[{'comment_id': 479427592, 'comment_body': ""Will it be possible to save the suggestion to datastore only after the image upload process completes? [To avoid creating suggestions whose image isn't available on cloudstorage!]"", 'comment_created': datetime.datetime(2020, 8, 28, 17, 0, 22, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 479430393, 'comment_body': 'For reviewers:\r\n\r\nWe are expecting to store  images for suggestion in the following URL: `<bucket-name>/suggestion/<enitity-id>/assets/image>/<filname>`.\r\n\r\nFor more info check this doc: https://docs.google.com/document/d/1kGvPjYnW9ArYKtzxYOmFbp7MA-A45B3znRWFIlaEGVo/edit?usp=sharing', 'comment_created': datetime.datetime(2020, 8, 28, 17, 6, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 479562729, 'comment_body': 'Should we do this in the modal controller file? As the question creation is controlled there, right?', 'comment_created': datetime.datetime(2020, 8, 28, 22, 39, 48, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 479611501, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 8, 29, 5, 42, 2, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 479611531, 'comment_body': 'done, moved it to controller', 'comment_created': datetime.datetime(2020, 8, 29, 5, 42, 19, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 479631206, 'comment_body': 'Hi @donosco98 -- sorry about this, but let\'s not introduce ""suggestion"" as an entity type. It\'s quite confusing compared to the others.\r\n\r\nI had a quick chat with @DubeySandeep and we are thinking about using /exploration-suggestions/{{exp-id}} and /question-suggestions/{{question-id}} instead. He\'ll follow up with you, if that\'s OK!', 'comment_created': datetime.datetime(2020, 8, 29, 9, 37, 28, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 479636579, 'comment_body': 'Can we add all of this in alphabetical order?', 'comment_created': datetime.datetime(2020, 8, 29, 10, 44, 53, tzinfo=datetime.timezone.utc), 'commenter': 'ankita240796', 'type': 'User'}, {'comment_id': 479664900, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 8, 29, 16, 17, 1, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 479664911, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 8, 29, 16, 17, 5, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 479685394, 'comment_body': 'Maybe create the suggestion object here and call get_all_html_list (Only save the Suggestion in the datastore at the end.)', 'comment_created': datetime.datetime(2020, 8, 29, 20, 9, 1, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 479685753, 'comment_body': 'Make sure that the EditExplorationContentSuggestion is working as expected!', 'comment_created': datetime.datetime(2020, 8, 29, 20, 12, 5, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 479700100, 'comment_body': 'suggestions* (ditto below)', 'comment_created': datetime.datetime(2020, 8, 29, 23, 26, 37, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 479716104, 'comment_body': 'Move this to a common-place maybe in the Base class? [We are going to have the same structure for other suggestions.', 'comment_created': datetime.datetime(2020, 8, 30, 3, 30, 15, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 479757830, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 8, 30, 11, 29, 50, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 479757874, 'comment_body': ""Yeah , I've it works fine"", 'comment_created': datetime.datetime(2020, 8, 30, 11, 30, 4, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 479757880, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 8, 30, 11, 30, 10, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 479758020, 'comment_body': 'We cannot move it to base class because it is different for each suggestion type.\r\nFor example for question suggestions we have to copy the images to the entity type question and similarly its different for translation type.', 'comment_created': datetime.datetime(2020, 8, 30, 11, 31, 25, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 479808478, 'comment_body': ""For reviewers, I'm going to add `suggestion.get_target_entity_html_list_in_suggestion` which will return the HTML content which is part of the target entity and it's been used in the suggestion as well. Through that, I'll be able to exclude the filenames of the entity/exploration images."", 'comment_created': datetime.datetime(2020, 8, 30, 19, 49, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 480016601, 'comment_body': ""I don't really understand this. Why don't we just set them as the right things? (I don't understand what the reason given has to do with the conclusion that we need to set the fields equal to None.)"", 'comment_created': datetime.datetime(2020, 8, 31, 9, 46, 32, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 480017666, 'comment_body': ""Just inline this below (don't redefine vars)."", 'comment_created': datetime.datetime(2020, 8, 31, 9, 48, 41, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 480019816, 'comment_body': 'Please be consistent with the naming -- use ""suggestions"" throughout. I\'m seeing ""suggestion"" mixed with ""suggestions"".\r\n\r\nAlso I am a bit concerned about this ""ENTITY_TYPE"". It doesn\'t really seem like an entity type. Maybe you should call the category for the new fields something like IMAGE_CONTEXT?', 'comment_created': datetime.datetime(2020, 8, 31, 9, 53, 5, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 480376665, 'comment_body': ""Actually what we were trying to save the images for suggestions before the suggestion is actually created and the reason why these fields were None is that these are created only while the actual creation of the suggestion. \r\nBut after a discussion with @DubeySandeep, it was found that making these not None will require considerable refactoring.\r\nAlso, this PR is required to be merged ASAP because it is blocking#10469. For now, I've added a todo and reverted it back to save the images after the suggestions are created."", 'comment_created': datetime.datetime(2020, 8, 31, 20, 20, 12, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 480376769, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 8, 31, 20, 20, 20, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 480379038, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 8, 31, 20, 24, 52, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 480439085, 'comment_body': 'Should we do this only if `file_format in feconf.COMPRESSIBLE_IMAGE_FORMATS`?', 'comment_created': datetime.datetime(2020, 8, 31, 22, 34, 41, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 480453894, 'comment_body': 'Why are we calling it copy? If this is just for GCS compatibility then call it copy() and add a comment above the cloudstorage.copy2 line to explain the use of copy2.', 'comment_created': datetime.datetime(2020, 8, 31, 22, 56, 58, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 480467326, 'comment_body': ""Ah, sorry this was my mistake! I'll push a fix, soon!"", 'comment_created': datetime.datetime(2020, 8, 31, 23, 17, 50, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 480473157, 'comment_body': '> Why are we calling it copy?\r\n\r\nYou mean ""why are we calling it copy2"", right?', 'comment_created': datetime.datetime(2020, 8, 31, 23, 34, 3, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 480474587, 'comment_body': 'Done!', 'comment_created': datetime.datetime(2020, 8, 31, 23, 39, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}]","[{'commit_sha': '5b1c341017a8480b6c7f8bd9dc4497d067d8f20f', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a53dfa27e7e12b662e7be37c86865f2965bd25ec', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7dffb4cce3dc7819d3518dee81231fa378a37475', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2e0282c3aa5ad19ad1a236fdbbc82cd7460b2005', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '84a4317623a3780424393388d4ba2ce479294695', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '825b0be0c6b8ebe2a6378864e3fc87118617a8a5', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4c5ae4dea42ed3f90264911c669aa9cda20ef803', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fe10a42df7b516a7b7453d9d0af5d214f6a1ab0a', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '87e0459bb6bdfbeee4fd546d0e1b093a9cf9488d', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '70821dfb6811cb6579c7b01d1b2c3fa364bffb81', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9e8fd2f2d8bfdd4db8e485ab16de6fe3addf61dc', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bce3c98f1ad0ed81f6f22d4b8e26eb99abf77ac8', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0aa846c5e5ad333f368da29c01f1cc4525df2799', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '87bc950fc83bf2874f7777e4afd4af4f338de802', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '257a990f5e7b477a3fb0e32b19910d34edf705cd', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3b57960695c69758fc08c6b1f5afa9c4a952e59c', 'committer_username': 'DubeySandeep', 'committer_name': 'Sandeep Dubey', 'committer_email': 'dubeysandeep.in@gmail.com', 'commit_date': datetime.datetime(2016, 1, 11, 18, 40, 48, tzinfo=datetime.timezone.utc)}]",Abhith Krishna,31371571,,User,,33,,5,5
460855687,"Added audit jobs to find math latex strings without svgs in topics, skills, questions and stories","## Overview
<!--
READ ME FIRST:
Please answer *both* questions below and check off every point from the Essential Checklist!
If there is no corresponding issue number, fill in N/A where it says [fill_in_number_here] below in 1.
-->

1. This PR fixes or fixes part of #[fill_in_number_here].
2. This PR does the following: added audit jobs to find math latex strings without svgs in topics, skills, questions and stories

## Essential Checklist

- [ ] The PR title starts with ""Fix #bugnum: "", followed by a short, clear summary of the changes. (If this PR fixes part of an issue, prefix the title with ""Fix part of #bugnum: ..."".)
- [x] The linter/Karma presubmit checks have passed locally on your machine.
- [x] ""Allow edits from maintainers"" is checked. (See [here](https://help.github.com/en/github/collaborating-with-issues-and-pull-requests/allowing-changes-to-a-pull-request-branch-created-from-a-fork) for instructions on how to enable it.)
  - This lets reviewers restart your CircleCI tests for you.
- [x] The PR is made from a branch that's **not** called ""develop"".

## PR Pointers

- Oppiabot will notify you when you don't add a PR_CHANGELOG label. If you are unable to do so, please @-mention a code owner (who will be in the Reviewers list), or ask on [Gitter](https://gitter.im/oppia/oppia-chat).
- For what code owners will expect, see the [Code Owner's wiki page](https://github.com/oppia/oppia/wiki/Oppia%27s-code-owners-and-checks-to-be-carried-out-by-developers).
- Make sure your PR follows conventions in the [style guide](https://github.com/oppia/oppia/wiki/Coding-style-guide), otherwise this will lead to review delays
- Never force push. If you do, your PR will be closed.
",True,10135,https://api.github.com/repos/oppia/oppia/pulls/10135,https://github.com/oppia/oppia/pull/10135,closed,1271,0,9,7,6,8,2,1,"[{'name': 'PR: LGTM'}, {'name': 'PR: Affects datastore layer'}]",2020-08-01 07:01:37+00:00,2020-08-04 16:39:15+00:00,293858.0,"3 days, 9:37:38","[{'comment_id': 463935136, 'comment_body': ""Two general notes:\r\n\r\n- For the error cases, could you output details of which question ID, etc. they come from? This is important because maybe we can just recreate them (while there aren't that many).\r\n- Is it possible to output (separately) the cases where there are math components, but they do have the svgs? That will give some confidence that the job is working correctly. But if that's not straightforward, don't worry about it."", 'comment_created': datetime.datetime(2020, 8, 1, 7, 36, 44, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 464189304, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 8, 3, 4, 33, 36, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 464449380, 'comment_body': ""'Story notes' is also an html field, right?"", 'comment_created': datetime.datetime(2020, 8, 3, 14, 27, 59, tzinfo=datetime.timezone.utc), 'commenter': 'aks681', 'type': 'User'}, {'comment_id': 464451425, 'comment_body': ""Just to check, none of the other models had  'written_translations'?"", 'comment_created': datetime.datetime(2020, 8, 3, 14, 31, 5, tzinfo=datetime.timezone.utc), 'commenter': 'aks681', 'type': 'User'}, {'comment_id': 464452980, 'comment_body': ""No, i don't think so\r\nEdit: Skills actually have written transalation.\r\nbut I don't think they have RTE components HTML in them because the method `get_all_html_content()` in `skill_domain.py`\r\ndoesn't consider the written translations.\r\n@aks681 can you confirm?"", 'comment_created': datetime.datetime(2020, 8, 3, 14, 33, 21, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 464491145, 'comment_body': ""Hmm yeah it can have HTML. I've added it now.\r\n@seanlip , can pls re-run the `StoryMathRteAuditOneOffJob` just to be sure."", 'comment_created': datetime.datetime(2020, 8, 3, 15, 32, 53, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 464602644, 'comment_body': ""Well, all written translations are the same, right? So, they have html fields (the function misses that, it should ideally return it as well, can you maybe edit it?), but we don't have any way to record translations for skills now, so there won't be any html in the datastore, so I think it should be fine."", 'comment_created': datetime.datetime(2020, 8, 3, 18, 56, 54, tzinfo=datetime.timezone.utc), 'commenter': 'aks681', 'type': 'User'}, {'comment_id': 464621277, 'comment_body': 'Ran again, still None. @donosco98, feel free to merge this PR once CI passes!', 'comment_created': datetime.datetime(2020, 8, 3, 19, 36, 42, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}]","[{'commit_sha': 'c8ee1aad7fe1f5fd58a89a741d5cd02de0268e16', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e4565a93088e109863b8ed4ac098cf3b7d24024c', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7874b539ae090de742f100b8a69097f6dd7be061', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd581c47a72906f8597847f1f331283aa024d4149', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '879067a5701ab90839c6ffe5dccb2e6c019e7d99', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1f416812255ca691be8b56cc0596ad11305e6b8f', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6ac8cc9c641f8dd8602171baf26db26ff3cdb18c', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}]",Abhith Krishna,31371571,,User,,33,,5,5
463100164,Fix #10128 and Automate generation of SVGs in explorations,"## Overview
<!--
READ ME FIRST:
Please answer *both* questions below and check off every point from the Essential Checklist!
If there is no corresponding issue number, fill in N/A where it says [fill_in_number_here] below in 1.
-->

1. This PR fixes #10128  
2. This PR does the following: made the proccess of generating SVGs for explorations from admin tab easier 

## Essential Checklist

- [x] The PR title starts with ""Fix #bugnum: "", followed by a short, clear summary of the changes. (If this PR fixes part of an issue, prefix the title with ""Fix part of #bugnum: ..."".)
- [x] The linter/Karma presubmit checks have passed locally on your machine.
- [x] ""Allow edits from maintainers"" is checked. (See [here](https://help.github.com/en/github/collaborating-with-issues-and-pull-requests/allowing-changes-to-a-pull-request-branch-created-from-a-fork) for instructions on how to enable it.)
  - This lets reviewers restart your CircleCI tests for you.
- [x] The PR is made from a branch that's **not** called ""develop"".

## PR Pointers

- Oppiabot will notify you when you don't add a PR_CHANGELOG label. If you are unable to do so, please @-mention a code owner (who will be in the Reviewers list), or ask on [Gitter](https://gitter.im/oppia/oppia-chat).
- For what code owners will expect, see the [Code Owner's wiki page](https://github.com/oppia/oppia/wiki/Oppia%27s-code-owners-and-checks-to-be-carried-out-by-developers).
- Make sure your PR follows conventions in the [style guide](https://github.com/oppia/oppia/wiki/Coding-style-guide), otherwise this will lead to review delays
- Never force push. If you do, your PR will be closed.
",True,10158,https://api.github.com/repos/oppia/oppia/pulls/10158,https://github.com/oppia/oppia/pull/10158,closed,223,125,18,18,12,2,0,1,[],2020-08-05 02:05:35+00:00,2020-08-07 16:22:59+00:00,224244.0,"2 days, 14:17:24","[{'comment_id': 465589292, 'comment_body': 'else raise Error. Always close off the if/else loops fully.', 'comment_created': datetime.datetime(2020, 8, 5, 9, 17, 23, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 465826844, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 8, 5, 15, 49, 55, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}]","[{'commit_sha': '96e34ff6f6e460c833a6f94c6dcbe25b33e6f435', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '99407c0de4affecc92d5a7c5cdb09b93980c502c', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6d1a5890ccd46c28ed72363c31d70b100d1dc67b', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd69749355be014e1116548d2780eea9e6d20d703', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '78393b3b332559ddf099fd05b7ff97f8334192ae', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f36c67e24b782ff461e5fcd15c10c308c933184c', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5dc30979203de2088dca1738123318c71b56022d', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4788411938f69aa41e4282c54b179340e5683d04', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f13cafedbdd24ed9c78b7b2417481fff2024416c', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3c99de85067aed5682c617960a6913616c93b882', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b4b94a6ddc22226cde3ff60917876ca2ebf5c9a7', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '11d99aaf341c8612173d0fb9f72f366e33aa6ab7', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0227419199c53ce430d6aa9b9a63ab577619feca', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '180c4f4dbc1459ea96e8fe30c1067eb87bddb57f', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '329263261a9c4a7a6b417dce80a3e3de3cf9b869', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ddbb20bdf99f3f23d0d61190940f24a3e341cfd1', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '85a59d4ae0defd0fe80c4a381fc4e61542bbd75e', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '37ec59eecf963e86ce8bbc99488f7ccc6f635421', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}]",Abhith Krishna,31371571,,User,,33,,5,5
464666291,Added generation functions for math latex svgs suggestions,"## Overview
<!--
READ ME FIRST:
Please answer *both* questions below and check off every point from the Essential Checklist!
If there is no corresponding issue number, fill in N/A where it says [fill_in_number_here] below in 1.
-->

1. This PR fixes or fixes part of NA
2. This PR does the following: Added generation functions for math latex svgs suggestions

## Essential Checklist

- [ ] The PR title starts with ""Fix #bugnum: "", followed by a short, clear summary of the changes. (If this PR fixes part of an issue, prefix the title with ""Fix part of #bugnum: ..."".)
- [ ] The linter/Karma presubmit checks have passed locally on your machine.
- [x] ""Allow edits from maintainers"" is checked. (See [here](https://help.github.com/en/github/collaborating-with-issues-and-pull-requests/allowing-changes-to-a-pull-request-branch-created-from-a-fork) for instructions on how to enable it.)
  - This lets reviewers restart your CircleCI tests for you.
- [x] The PR is made from a branch that's **not** called ""develop"".

## PR Pointers

- Oppiabot will notify you when you don't add a PR_CHANGELOG label. If you are unable to do so, please @-mention a code owner (who will be in the Reviewers list), or ask on [Gitter](https://gitter.im/oppia/oppia-chat).
- For what code owners will expect, see the [Code Owner's wiki page](https://github.com/oppia/oppia/wiki/Oppia%27s-code-owners-and-checks-to-be-carried-out-by-developers).
- Make sure your PR follows conventions in the [style guide](https://github.com/oppia/oppia/wiki/Coding-style-guide), otherwise this will lead to review delays
- Never force push. If you do, your PR will be closed.
",True,10203,https://api.github.com/repos/oppia/oppia/pulls/10203,https://github.com/oppia/oppia/pull/10203,closed,1272,5,15,18,9,20,1,2,[{'name': 'PR: Affects datastore layer'}],2020-08-07 15:27:20+00:00,2020-08-09 19:07:29+00:00,186009.0,"2 days, 3:40:09","[{'comment_id': 467502155, 'comment_body': 'Maybe check validate type of latex_to_svg_mappings ', 'comment_created': datetime.datetime(2020, 8, 8, 20, 37, 39, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 467502308, 'comment_body': ""If this nested loop is common around multiple handlers then move it to a function and use it here. (To avoid duplicate codes!) [If it's hard to move it to a function leave it as is, considering I see a TODO remove all these codes.)"", 'comment_created': datetime.datetime(2020, 8, 8, 20, 39, 42, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 467502859, 'comment_body': 'Check suggestion_type! \r\n```\r\nif suggestion_type  != ...:\r\n    return\r\n\r\n```\r\n\r\n[To avoid branching!]', 'comment_created': datetime.datetime(2020, 8, 8, 20, 46, 44, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 467502965, 'comment_body': 'If possible move this to the above line after removing `if` branching on top!', 'comment_created': datetime.datetime(2020, 8, 8, 20, 48, 26, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 467503051, 'comment_body': 'Why success if len(invalid_tags) > 0?', 'comment_created': datetime.datetime(2020, 8, 8, 20, 49, 54, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 467503145, 'comment_body': 'Add an else case to yield the success case i.e, inavlid_tags == 0 \r\n\r\nYield (`SUCCESS`, 1) for this case!', 'comment_created': datetime.datetime(2020, 8, 8, 20, 50, 59, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 467503275, 'comment_body': 'Change the key to ""Invalid tags in suggestion with id %s\'\r\n\r\nIn general, the output of the job should be clear as the release-coordinator will run this job on prod and they aren\'t aware of this code!', 'comment_created': datetime.datetime(2020, 8, 8, 20, 52, 48, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 467503501, 'comment_body': 'This key is not a correct message, right?\r\n\r\nShould we change it to: `invalid-math-content-attribute-in-math-tag`?', 'comment_created': datetime.datetime(2020, 8, 8, 20, 55, 44, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 467503767, 'comment_body': ""'suggestion-with-latex-strings-having-no-svg' is not a correct explanation for this yield, right?\r\n\r\nChange it to `invalid-svg-filename-attribute-in-math-expression` (_INVALID_SVG_FILENAME_KEY)"", 'comment_created': datetime.datetime(2020, 8, 8, 20, 59, 46, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 467504421, 'comment_body': 'Use the constant here* Also should we use suggestion_type for filter? ', 'comment_created': datetime.datetime(2020, 8, 8, 21, 9, 3, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 467561062, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 8, 9, 9, 40, 29, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 467561076, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 8, 9, 9, 40, 35, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 467561079, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 8, 9, 9, 40, 39, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 467561130, 'comment_body': ""the naming was a bit confusing, I've changed it now.\r\n"", 'comment_created': datetime.datetime(2020, 8, 9, 9, 41, 8, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 467561152, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 8, 9, 9, 41, 16, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 467561156, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 8, 9, 9, 41, 20, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 467561161, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 8, 9, 9, 41, 24, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 467561181, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 8, 9, 9, 41, 38, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 467561404, 'comment_body': ""Removing these duplicate code would involve changing the previously merged and tested PR , hence I don't think its a good idea considering these will be removed anyway soon.\r\n"", 'comment_created': datetime.datetime(2020, 8, 9, 9, 44, 15, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 467561623, 'comment_body': ""We don't need to yield the else case here, because we are only concerned about the suggestions having math-tags with no SVGs.\r\nAlso in the else case, it is not necessary that the suggestion will have math-tags."", 'comment_created': datetime.datetime(2020, 8, 9, 9, 46, 29, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}]","[{'commit_sha': 'ce8f90707f4f2527e5c90d0d53ce8ee10d15d618', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'eeff6c80788e299ffe6c0066b67798c19b864894', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '53d968bad75f109c3e05e5bc330d807f9ba902c8', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9238a2c241d271e6842bf1ae834d1ac32ed0ea86', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8d1e627e72577e3fae9aef2f8ada153538d74ed7', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'de5aa77041df6da2e916d26a4c752699b6c7b822', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0d8cf13fe4d8b3cfe89cdc392e070eff34e9cc6f', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ac8c84e61fef6de911ea965c8d36fec5f2303621', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0f07d75f2a6e6abe3c087460c82abca5edb9012d', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7340ea801b30c993b32408fd5a028c3dc264d1f0', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aa2d2d4cc533d8e0bbeabc8e1eced1fb004b71e6', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ab5f2b124a2c3f14b6bcebe4ca47fd65b3c5c51a', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7d35391d85573b48e358d755cf98bf895416ee5a', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6a5171f4390d2765819c011cb27b3846ef8a34c3', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a0230dc8ca4fbbd29b9803a1791b7df594ae56dd', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '732d01c826586e215dfc6b94041ed7e5244a5f9b', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '09e84ff15f9fe58ef25aa407153418c249e77404', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b329fe7f168fe58e4a36c7643b8d64d8c66a8298', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}]",Abhith Krishna,31371571,,User,,33,,5,5
467672486,Use the math SVGs in the datastore instead of MathJax to render the math rich-text components,"## Overview
<!--
READ ME FIRST:
Please answer *both* questions below and check off every point from the Essential Checklist!
If there is no corresponding issue number, fill in N/A where it says [fill_in_number_here] below in 1.
-->

1. This PR fixes or fixes part of NA
2. This PR does the following: Use the math SVGs in the datastore instead of MathJax to render the math rich-text components

## Essential Checklist

- [ ] The PR title starts with ""Fix #bugnum: "", followed by a short, clear summary of the changes. (If this PR fixes part of an issue, prefix the title with ""Fix part of #bugnum: ..."".)
- [x] The linter/Karma presubmit checks have passed locally on your machine.
- [x] ""Allow edits from maintainers"" is checked. (See [here](https://help.github.com/en/github/collaborating-with-issues-and-pull-requests/allowing-changes-to-a-pull-request-branch-created-from-a-fork) for instructions on how to enable it.)
  - This lets reviewers restart your CircleCI tests for you.
- [x] The PR is made from a branch that's **not** called ""develop"".

## PR Pointers

- Oppiabot will notify you when you don't add a PR_CHANGELOG label. If you are unable to do so, please @-mention a code owner (who will be in the Reviewers list), or ask on [Gitter](https://gitter.im/oppia/oppia-chat).
- For what code owners will expect, see the [Code Owner's wiki page](https://github.com/oppia/oppia/wiki/Oppia%27s-code-owners-and-checks-to-be-carried-out-by-developers).
- Make sure your PR follows conventions in the [style guide](https://github.com/oppia/oppia/wiki/Coding-style-guide), otherwise this will lead to review delays
- Never force push. If you do, your PR will be closed.
",True,10331,https://api.github.com/repos/oppia/oppia/pulls/10331,https://github.com/oppia/oppia/pull/10331,closed,192,32,10,19,6,31,0,1,[],2020-08-13 22:56:54+00:00,2020-08-20 09:51:19+00:00,557665.0,"6 days, 10:54:25","[{'comment_id': 470956599, 'comment_body': '`getDimensionsOfMathSvgs` this works for one filename, right? If yes then remove `s` from the end!', 'comment_created': datetime.datetime(2020, 8, 15, 9, 0, 34, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 470957240, 'comment_body': 'Do we still need to bind this value to the ctrl? ', 'comment_created': datetime.datetime(2020, 8, 15, 9, 7, 45, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 470957248, 'comment_body': 'Do we still need this directive?', 'comment_created': datetime.datetime(2020, 8, 15, 9, 8, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 470957333, 'comment_body': 'Do we need this to bind in the ctrl?', 'comment_created': datetime.datetime(2020, 8, 15, 9, 9, 7, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 470957635, 'comment_body': ""The code below this doesn't seem like svgImage specific, If it's a duplicate code then can we find a way to move this to a service? (not sure, but let me know if that's possible!)"", 'comment_created': datetime.datetime(2020, 8, 15, 9, 13, 8, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 470957664, 'comment_body': 'Extra newlines?', 'comment_created': datetime.datetime(2020, 8, 15, 9, 13, 43, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 470957797, 'comment_body': 'Do we need to wait until the image is downloaded?', 'comment_created': datetime.datetime(2020, 8, 15, 9, 15, 20, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 470957855, 'comment_body': 'Can you please add a code comment to explain the `replace` here?', 'comment_created': datetime.datetime(2020, 8, 15, 9, 15, 46, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 470958010, 'comment_body': 'Move this to the line above^', 'comment_created': datetime.datetime(2020, 8, 15, 9, 18, 33, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 470958192, 'comment_body': 'Will it make a HTTP call? ', 'comment_created': datetime.datetime(2020, 8, 15, 9, 20, 46, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 470970412, 'comment_body': 'yes, this will make an HTTP call to src', 'comment_created': datetime.datetime(2020, 8, 15, 12, 2, 20, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 470970584, 'comment_body': 'Yeah, we are waiting for the image to download in the following lines in the `request()` block.\r\nAll this is similar to this file `/extensions/rich_text_components/Svgdiagram/protractor.js`', 'comment_created': datetime.datetime(2020, 8, 15, 12, 4, 36, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 471121920, 'comment_body': 'done, removed it ', 'comment_created': datetime.datetime(2020, 8, 16, 14, 50, 38, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 471122148, 'comment_body': 'not needed, removed it.', 'comment_created': datetime.datetime(2020, 8, 16, 14, 52, 56, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 471122153, 'comment_body': 'not needed, removed it.', 'comment_created': datetime.datetime(2020, 8, 16, 14, 53, 2, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 471122160, 'comment_body': 'not needed, removed it.', 'comment_created': datetime.datetime(2020, 8, 16, 14, 53, 8, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 471122168, 'comment_body': 'removed it', 'comment_created': datetime.datetime(2020, 8, 16, 14, 53, 19, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 471122218, 'comment_body': 'actually this was to remove any white spaces, but that is actually not needed so removed it', 'comment_created': datetime.datetime(2020, 8, 16, 14, 53, 48, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 471122228, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 8, 16, 14, 53, 54, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 471122356, 'comment_body': ""This code is not very similar to the image directive because we don't need the reload and loading indicator here."", 'comment_created': datetime.datetime(2020, 8, 16, 14, 55, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 471550573, 'comment_body': 'Why are these deleted here? @iamprayush is removing these in #10361 and it seems more relevant to that PR than this?', 'comment_created': datetime.datetime(2020, 8, 17, 15, 17, 20, tzinfo=datetime.timezone.utc), 'commenter': 'aks681', 'type': 'User'}, {'comment_id': 471574261, 'comment_body': 'According to my milestone this PR should remove Mathjax completely from Exploration player.\r\nBut if you insist I can remove this change and let @iamprayush do it.\r\ncc @DubeySandeep .', 'comment_created': datetime.datetime(2020, 8, 17, 15, 52, 3, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 471581119, 'comment_body': 'IMO, my PR should make this change, so that in the future if we ever wanted to revert the old math interaction deprecation(which is done in my PR), these lines would be re-added accordingly.', 'comment_created': datetime.datetime(2020, 8, 17, 16, 2, 42, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 471591329, 'comment_body': ""Oh ok thanks, then I'll remove these changes."", 'comment_created': datetime.datetime(2020, 8, 17, 16, 19, 52, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 471910063, 'comment_body': ""Considering this code is also being used by `MathExpressionInput interaction` we are leaving it to @iamprayush to decide when to remove this. @iamprayush, FYI math-expression in HTML doesn't need this library for rendering math-expressions in the learner's page, so feel free to remove this once `MathExpressionInput interaction` doesn't need this!"", 'comment_created': datetime.datetime(2020, 8, 18, 4, 42, 29, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 471910503, 'comment_body': 'maybe `html` or `htmlString`? (do we follow this strHtml pattern in the codebase?)', 'comment_created': datetime.datetime(2020, 8, 18, 4, 44, 14, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 471931015, 'comment_body': 'should we use regexr grouping to make it simpler and readable? ', 'comment_created': datetime.datetime(2020, 8, 18, 5, 54, 43, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 471931576, 'comment_body': 'Add a code comment to explain the requirement of if block^', 'comment_created': datetime.datetime(2020, 8, 18, 5, 56, 27, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 472119352, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 8, 18, 11, 51, 53, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 472119380, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 8, 18, 11, 51, 57, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 472121246, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 8, 18, 11, 55, 11, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}]","[{'commit_sha': '813dea83f3646dfd61f9fba550390718cd53a9bb', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ba3b795265a7ffca7e0751407b72180e1711bc94', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b7daba8cca76e9a36826354d24b2e9abfee409ef', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8b2649e8c565a3697290158b44abe764f4de58e0', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'da54c02d798a2fa64a5a1425f0b14a67d24bdcd6', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2ddfd0a11ff6db95f9bf3e891eb8627eb23df4de', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '88e08e77402ebc0bc77050037b5049495a9750dd', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f2e9c5011a8c82bca1c751ca130a2c0233699668', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '13201e27a212acada82643609a51f1add1a5339a', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5bfd49b8745951fb90e05c910c514c7c561b21b8', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '57c7b4af741e3aed4ce73f1478679073fcfea8ca', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b71b28b3df742b70ecd1f0923e9defe691610f2f', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '09a9b2d9d86b3e13c574926103737129dc0058f7', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '086318568d43150557adfd939e9dd85cb13e1862', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '726fb389c8ff6233d3fa0270f774f760de781411', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '588cfe0d18f96d629a97cb3bbf9782e11e413b82', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e9e2dfc9f1e3831c5b4df6f5a35f8a2ebc363dd4', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '955b3158c998f6b07a88405cd7a3172043a565af', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd36d3450feccfd80f4a70664b26e649b9bfc4dcb', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}]",Abhith Krishna,31371571,,User,,33,,5,5
468819633,Fix #9379: Added validation for svg_filename field in math rich-text components.,"## Overview
<!--
READ ME FIRST:
Please answer *both* questions below and check off every point from the Essential Checklist!
If there is no corresponding issue number, fill in N/A where it says [fill_in_number_here] below in 1.
-->

1. This PR fixes or fixes part of #9379
2. This PR does the following: Added validation for svg_filename field in math rich-text components

## Essential Checklist

- [x] The PR title starts with ""Fix #bugnum: "", followed by a short, clear summary of the changes. (If this PR fixes part of an issue, prefix the title with ""Fix part of #bugnum: ..."".)
- [x] The linter/Karma presubmit checks have passed locally on your machine.
- [x] ""Allow edits from maintainers"" is checked. (See [here](https://help.github.com/en/github/collaborating-with-issues-and-pull-requests/allowing-changes-to-a-pull-request-branch-created-from-a-fork) for instructions on how to enable it.)
  - This lets reviewers restart your CircleCI tests for you.
- [x] The PR is made from a branch that's **not** called ""develop"".

## PR Pointers

- Oppiabot will notify you when you don't add a PR_CHANGELOG label. If you are unable to do so, please @-mention a code owner (who will be in the Reviewers list), or ask on [Gitter](https://gitter.im/oppia/oppia-chat).
- For what code owners will expect, see the [Code Owner's wiki page](https://github.com/oppia/oppia/wiki/Oppia%27s-code-owners-and-checks-to-be-carried-out-by-developers).
- Make sure your PR follows conventions in the [style guide](https://github.com/oppia/oppia/wiki/Coding-style-guide), otherwise this will lead to review delays
- Never force push. If you do, your PR will be closed.
",True,10366,https://api.github.com/repos/oppia/oppia/pulls/10366,https://github.com/oppia/oppia/pull/10366,closed,70,14,5,12,19,12,0,1,[],2020-08-17 13:05:47+00:00,2020-08-22 05:37:07+00:00,405080.0,"4 days, 16:31:20","[{'comment_id': 471906627, 'comment_body': '`Invalid svg_filename attribute in math component:  %s`', 'comment_created': datetime.datetime(2020, 8, 18, 4, 28, 49, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 471907525, 'comment_body': ""Do we need to value_dict['math_content-with-value'] to be a dict?\r\nDo we need to validate `svg_filename` in value_dict['math_content-with-value']? (OR is it already validate in base class)\r\nDo we need to validate other properties of value_dict['math_content-with-value']?"", 'comment_created': datetime.datetime(2020, 8, 18, 4, 32, 18, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 472130126, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 8, 18, 12, 11, 46, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 472130847, 'comment_body': ""Yeah the structure/schema of `value_dict['math_content-with-value` is validated in the base class(`objects.MathExpressionContent`) itself.\r\nWe don't need any-more validations\r\n"", 'comment_created': datetime.datetime(2020, 8, 18, 12, 13, 7, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 472928897, 'comment_body': 'Any way you can keep this constant near where the filename is constructed, or centralize the logic somehow? I worry that someone may update that logic and then forget to update this regex.', 'comment_created': datetime.datetime(2020, 8, 19, 10, 32, 10, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 473307632, 'comment_body': 'done, added a frontend validation', 'comment_created': datetime.datetime(2020, 8, 19, 20, 44, 52, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 473350656, 'comment_body': ""Define this in just one place -- probably assets/constants.ts if it's shared. Refer to that location from both the frontend and backend. Put a note above it to say: if this is changed, make sure that the names of existing math image files are handled properly as well."", 'comment_created': datetime.datetime(2020, 8, 19, 21, 41, 47, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 473612785, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 8, 20, 5, 38, 48, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 473614013, 'comment_body': 'filenames --> filenames on the server', 'comment_created': datetime.datetime(2020, 8, 20, 5, 40, 44, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 473614136, 'comment_body': 'RE --> REGEX', 'comment_created': datetime.datetime(2020, 8, 20, 5, 40, 55, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 473622064, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 8, 20, 5, 53, 32, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 473622117, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 8, 20, 5, 53, 37, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}]","[{'commit_sha': '411f1e876b5478d456229e7e8bb1b69489648fd5', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd564265444ce1a6846862262a4258baa9c64a158', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f2ec968c52e70eb2eaf475797f0cf29f3ac64d7d', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b5ff18ba8be730407ed7aaf5b6168e46b25b5a94', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aff6e0d1d2814d1596c9b42eaf972e55a221b228', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '95f83ba8e489da1d59e665810704ddf5465f927b', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6b4cc735a3ab076a57c8c82fd71b781a5a18cf73', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9e78648ad56b2617f07049e9ea5a559faf39d240', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8cdab4b75f72c3a53a115cf5e606b89394eeee38', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'acf7ab1170372311c9ef6334f7bafbf1e8d96a69', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cce4bf04302c55fcd27d78ef82162009fd8ee0d1', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0df09d18e1c610266632802f02d00e4e4318d3ce', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}]",Abhith Krishna,31371571,,User,,33,,5,5
470717570,Fix #10045 : Remove the temporary math SVG generation functions ,"## Overview
<!--
READ ME FIRST:
Please answer *both* questions below and check off every point from the Essential Checklist!
If there is no corresponding issue number, fill in N/A where it says [fill_in_number_here] below in 1.
-->

1. This PR fixes or fixes part of #10045 
2. This PR does the following:Remove the temporary math SVG generation functions
## Essential Checklist

- [x] The PR title starts with ""Fix #bugnum: "", followed by a short, clear summary of the changes. (If this PR fixes part of an issue, prefix the title with ""Fix part of #bugnum: ..."".)
- [x] The linter/Karma presubmit checks have passed locally on your machine.
- [x] ""Allow edits from maintainers"" is checked. (See [here](https://help.github.com/en/github/collaborating-with-issues-and-pull-requests/allowing-changes-to-a-pull-request-branch-created-from-a-fork) for instructions on how to enable it.)
  - This lets reviewers restart your CircleCI tests for you.
- [x] The PR is made from a branch that's **not** called ""develop"".

## PR Pointers

- Oppiabot will notify you when you don't add a PR_CHANGELOG label. If you are unable to do so, please @-mention a code owner (who will be in the Reviewers list), or ask on [Gitter](https://gitter.im/oppia/oppia-chat).
- For what code owners will expect, see the [Code Owner's wiki page](https://github.com/oppia/oppia/wiki/Oppia%27s-code-owners-and-checks-to-be-carried-out-by-developers).
- Make sure your PR follows conventions in the [style guide](https://github.com/oppia/oppia/wiki/Coding-style-guide), otherwise this will lead to review delays
- Never force push. If you do, your PR will be closed.
",True,10393,https://api.github.com/repos/oppia/oppia/pulls/10393,https://github.com/oppia/oppia/pull/10393,closed,4,5167,29,14,7,8,0,1,[],2020-08-20 07:18:19+00:00,2020-08-24 11:35:54+00:00,361055.0,"4 days, 4:17:35","[{'comment_id': 473845594, 'comment_body': 'Extra newline?', 'comment_created': datetime.datetime(2020, 8, 20, 10, 9, 42, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 473850419, 'comment_body': ""Have we deleted these models once the svgs are generated for an exploration? If not, then don't remove this model now, write a simple one-off job to delete these models. [In a separate PR we will remove these model related code!]"", 'comment_created': datetime.datetime(2020, 8, 20, 10, 15, 33, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 473851394, 'comment_body': 'Do we also have any job related to suggestions which are not required anymore?', 'comment_created': datetime.datetime(2020, 8, 20, 10, 16, 47, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 474289839, 'comment_body': 'done, removed', 'comment_created': datetime.datetime(2020, 8, 20, 21, 44, 34, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 474290697, 'comment_body': ""I've removed `ExplorationMockMathMigrationOneOffJob`. But I don't think we have any unwanted suggestions jobs.\r\nMaybe `SuggestionMathMigrationOneOffJob` can be removed ?(not sure)"", 'comment_created': datetime.datetime(2020, 8, 20, 21, 46, 25, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 474291372, 'comment_body': 'We have a one-off job in develop `ExplorationMathRichTextInfoModelDeletionOneOffJob` which should be run in prod server and test-server in this release after the math svgs are generated in the prod server.\r\ncc: @aks681 .', 'comment_created': datetime.datetime(2020, 8, 20, 21, 48, 1, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 474302449, 'comment_body': ""Maybe delete this one in a future PR (file an issue to track) that is merged only once we're sure that no such models exist on any of the servers."", 'comment_created': datetime.datetime(2020, 8, 20, 22, 16, 22, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 474759824, 'comment_body': 'done, reverted this.\r\nThere is already an issue #9952, which tracks this.', 'comment_created': datetime.datetime(2020, 8, 21, 15, 10, 47, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}]","[{'commit_sha': '062ff7555e7b8bb7a4648117aa316596b46c6fb1', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '236f28bacc2ae4461a4c89614b72b1ead40ed67c', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1e6e218c59edd580316130ff04da0fb1ad5d1bcd', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f36e970efa85572370077f478785bfc61a4baaa4', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2aad8f8de6f94cacb08dd9fbff605ece52f00ef1', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'afe594b7541b25774813d1cf7898c6e6820fed48', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8c919f4204a045c14ad6a15a010ef70a2627b9ef', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1d6e8624c3da32b2ffd43b03f016831b057959e7', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ab968cef066ff522072416bb84e52edd75fca662', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a0d06a1569f0b4461da5e312d1fd9d26071d8e6b', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'eedf64e370b7549ce46a9da838811497915ef741', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6b11e8f7a3acfdb046d5b85e0d5cdb0818c0e9bf', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3a00a8fa973e47a767f87658809bf85a8537967e', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2239573c4e5d35a94379d08e4f3d3843eb0b3ecf', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}]",Abhith Krishna,31371571,,User,,33,,5,5
472083778,Added a validation job for validating the Math content object in Math rich-text components with the recently added validation,"## Overview
<!--
READ ME FIRST:
Please answer *both* questions below and check off every point from the Essential Checklist!
If there is no corresponding issue number, fill in N/A where it says [fill_in_number_here] below in 1.
-->

1. This PR fixes or fixes part of NA
2. This PR does the following: added a validation job for validating the svg filename format with the recently added validation in the PR #10366 

## Essential Checklist

- [ ] The PR title starts with ""Fix #bugnum: "", followed by a short, clear summary of the changes. (If this PR fixes part of an issue, prefix the title with ""Fix part of #bugnum: ..."".)
- [x] The linter/Karma presubmit checks have passed locally on your machine.
- [x] ""Allow edits from maintainers"" is checked. (See [here](https://help.github.com/en/github/collaborating-with-issues-and-pull-requests/allowing-changes-to-a-pull-request-branch-created-from-a-fork) for instructions on how to enable it.)
  - This lets reviewers restart your CircleCI tests for you.
- [x] The PR is made from a branch that's **not** called ""develop"".

## PR Pointers

- Oppiabot will notify you when you don't add a PR_CHANGELOG label. If you are unable to do so, please @-mention a code owner (who will be in the Reviewers list), or ask on [Gitter](https://gitter.im/oppia/oppia-chat).
- For what code owners will expect, see the [Code Owner's wiki page](https://github.com/oppia/oppia/wiki/Oppia%27s-code-owners-and-checks-to-be-carried-out-by-developers).
- Make sure your PR follows conventions in the [style guide](https://github.com/oppia/oppia/wiki/Coding-style-guide), otherwise this will lead to review delays
- Never force push. If you do, your PR will be closed.
",True,10418,https://api.github.com/repos/oppia/oppia/pulls/10418,https://github.com/oppia/oppia/pull/10418,closed,457,0,5,9,8,9,2,1,"[{'name': 'PR: LGTM'}, {'name': 'PR: Affects datastore layer'}]",2020-08-23 06:47:30+00:00,2020-08-28 14:57:26+00:00,461396.0,"5 days, 8:09:56","[{'comment_id': 475181281, 'comment_body': 'Validate the entire math-content attribute i.e, the validation should internally call MathExpressionContent.validate', 'comment_created': datetime.datetime(2020, 8, 23, 6, 58, 14, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 475182042, 'comment_body': 'After an offline discussion, I found that this job is validating the entire MathExpresion object, and there are some issue with the naming. So we need to update the following things:\r\n1. The name of the job*\r\n2. The name of the function `validate_svg_filename_format_in_math_rich_text`\r\n\r\nSo that it highlights that the job is validating the entire mathExpression object.', 'comment_created': datetime.datetime(2020, 8, 23, 7, 5, 35, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 475182221, 'comment_body': 'Add the exception message in the error log* [and update the docstring similarly!]', 'comment_created': datetime.datetime(2020, 8, 23, 7, 7, 52, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 475493560, 'comment_body': 'done,', 'comment_created': datetime.datetime(2020, 8, 24, 10, 14, 48, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 475495062, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 8, 24, 10, 17, 51, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 475803311, 'comment_body': 'optional: `validate_math_content_attribute_in_html` as the function param is an HTML!', 'comment_created': datetime.datetime(2020, 8, 24, 18, 12, 52, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 475804207, 'comment_body': 'Extra space in the end?', 'comment_created': datetime.datetime(2020, 8, 24, 18, 14, 14, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 476138624, 'comment_body': 'done, removed it', 'comment_created': datetime.datetime(2020, 8, 25, 4, 3, 6, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 476138675, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 8, 25, 4, 3, 11, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}]","[{'commit_sha': '2d0b74414607067f25b847077d18c5341140c7c9', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a578145321b47b962ad6d079e6071b7f053dab01', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a1fcd5831dd3bf98c4f6813c2f772c1a52e3f02e', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4af995f44bd80a686e2f799327730e29c04377af', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f0b27631b82026c7f3e567287251e53a9f3b74f7', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '60118925c4cf76a1485b50a12a6baaabc3204391', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '689222aa79f3913c92f6a17291be50c5add7c056', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ed41629485875f6928a4de80c48273b4f5cf27ad', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '465b8c059e0cd3e4e67f74e41c147298e413ed46', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}]",Abhith Krishna,31371571,,User,,33,,5,5
467021495,Fix the failing of SuggestionSvgFilenameValidationOneOffJob job on the test-server ,"## Overview
<!--
READ ME FIRST:
Please answer *both* questions below and check off every point from the Essential Checklist!
If there is no corresponding issue number, fill in N/A where it says [fill_in_number_here] below in 1.
-->

1. This PR fixes or fixes part of NA
2. This PR does the following: Fix the failing of job SuggestionSvgFilenameValidationOneOffJob on the test-server 
## Essential Checklist

- [ ] The PR title starts with ""Fix #bugnum: "", followed by a short, clear summary of the changes. (If this PR fixes part of an issue, prefix the title with ""Fix part of #bugnum: ..."".)
- [x] The linter/Karma presubmit checks have passed locally on your machine.
- [x] ""Allow edits from maintainers"" is checked. (See [here](https://help.github.com/en/github/collaborating-with-issues-and-pull-requests/allowing-changes-to-a-pull-request-branch-created-from-a-fork) for instructions on how to enable it.)
  - This lets reviewers restart your CircleCI tests for you.
- [x] The PR is made from a branch that's **not** called ""develop"".

## PR Pointers

- Oppiabot will notify you when you don't add a PR_CHANGELOG label. If you are unable to do so, please @-mention a code owner (who will be in the Reviewers list), or ask on [Gitter](https://gitter.im/oppia/oppia-chat).
- For what code owners will expect, see the [Code Owner's wiki page](https://github.com/oppia/oppia/wiki/Oppia%27s-code-owners-and-checks-to-be-carried-out-by-developers).
- Make sure your PR follows conventions in the [style guide](https://github.com/oppia/oppia/wiki/Coding-style-guide), otherwise this will lead to review delays
- Never force push. If you do, your PR will be closed.
",True,10302,https://api.github.com/repos/oppia/oppia/pulls/10302,https://github.com/oppia/oppia/pull/10302,closed,5,7,1,2,5,0,0,2,[],2020-08-12 21:38:07+00:00,2020-08-13 19:13:19+00:00,77712.0,21:35:12,[],"[{'commit_sha': 'b62394159b6be2e61e66be01db32ede01027b815', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '914d43675d2781f95d7cd0790a649cb1af48b730', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}]",Abhith Krishna,31371571,,User,,33,,5,5
471511835,Make the svg-filename consistent with the frontend,"## Overview
<!--
READ ME FIRST:
Please answer *both* questions below and check off every point from the Essential Checklist!
If there is no corresponding issue number, fill in N/A where it says [fill_in_number_here] below in 1.
-->

1. This PR fixes or fixes part of NA
2. This PR does the following: Make the svg-filename consistend with the frontend

## Essential Checklist

- [ ] The PR title starts with ""Fix #bugnum: "", followed by a short, clear summary of the changes. (If this PR fixes part of an issue, prefix the title with ""Fix part of #bugnum: ..."".)
- [x] The linter/Karma presubmit checks have passed locally on your machine.
- [x] ""Allow edits from maintainers"" is checked. (See [here](https://help.github.com/en/github/collaborating-with-issues-and-pull-requests/allowing-changes-to-a-pull-request-branch-created-from-a-fork) for instructions on how to enable it.)
  - This lets reviewers restart your CircleCI tests for you.
- [x] The PR is made from a branch that's **not** called ""develop"".

## PR Pointers

- Oppiabot will notify you when you don't add a PR_CHANGELOG label. If you are unable to do so, please @-mention a code owner (who will be in the Reviewers list), or ask on [Gitter](https://gitter.im/oppia/oppia-chat).
- For what code owners will expect, see the [Code Owner's wiki page](https://github.com/oppia/oppia/wiki/Oppia%27s-code-owners-and-checks-to-be-carried-out-by-developers).
- Make sure your PR follows conventions in the [style guide](https://github.com/oppia/oppia/wiki/Coding-style-guide), otherwise this will lead to review delays
- Never force push. If you do, your PR will be closed.
",True,10404,https://api.github.com/repos/oppia/oppia/pulls/10404,https://github.com/oppia/oppia/pull/10404,closed,20,20,2,4,3,5,1,1,[{'name': 'PR: LGTM'}],2020-08-21 09:08:32+00:00,2020-08-22 08:15:32+00:00,83220.0,23:07:00,"[{'comment_id': 474559744, 'comment_body': 'Do we need A-Za-z here?', 'comment_created': datetime.datetime(2020, 8, 21, 9, 12, 7, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 474563165, 'comment_body': 'done, changed it', 'comment_created': datetime.datetime(2020, 8, 21, 9, 16, 6, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 474570573, 'comment_body': ""Why are we extending this? We shouldn't have _ and - and + -- the old regex was better. If anything I would suggest that the frontend regex be restricted."", 'comment_created': datetime.datetime(2020, 8, 21, 9, 24, 1, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 474574264, 'comment_body': 'Since all the images share the same random date-time string, I kept the regex similar to images.\r\nyou can see the regex [here](https://github.com/oppia/oppia/blob/develop/extensions/rich_text_components/components.py#L117).\r\nThe problem with making it stricter is that on the backup server we have filenames with and without these underscores.\r\n\r\n', 'comment_created': datetime.datetime(2020, 8, 21, 9, 28, 22, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}, {'comment_id': 474623673, 'comment_body': 'done, made a stricter regex', 'comment_created': datetime.datetime(2020, 8, 21, 10, 51, 9, tzinfo=datetime.timezone.utc), 'commenter': 'donosco99', 'type': 'User'}]","[{'commit_sha': '85eac6bc8936182fbd64a6e9094a4c2af731f297', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ccd2f5ebe659c6e8f52c5016d68422f847c79533', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c56b491d4a50d243fe49bb336599269c6085686a', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd61ece34ab42d684c999a7529052508cd072a0cd', 'committer_username': 'donosco99', 'committer_name': 'Abhith Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 26, 15, 31, 7, tzinfo=datetime.timezone.utc)}]",Abhith Krishna,31371571,,User,,33,,5,5

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
40687563,oppia,oppia/oppia,Python,3839,5716,240,775,15750,1417,417,26,"[{'id': 479536917, 'number': 10564, 'closed': datetime.datetime(2020, 9, 24, 8, 44, 59, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 9, 4, 10, 10, 35, tzinfo=datetime.timezone.utc), 'time_taken': 1722864.0, 'time_delta': '19 days, 22:34:24', 'additions': 1896, 'deletions': 1013, 'state': 'closed'}, {'id': 476080344, 'number': 10509, 'closed': datetime.datetime(2020, 9, 3, 1, 5, 23, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 31, 6, 23, 11, tzinfo=datetime.timezone.utc), 'time_taken': 240132.0, 'time_delta': '2 days, 18:42:12', 'additions': 0, 'deletions': 658, 'state': 'closed'}, {'id': 476018841, 'number': 10504, 'closed': datetime.datetime(2020, 9, 3, 16, 2, 56, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 31, 3, 13, 29, tzinfo=datetime.timezone.utc), 'time_taken': 305367.0, 'time_delta': '3 days, 12:49:27', 'additions': 37, 'deletions': 2, 'state': 'closed'}, {'id': 475484078, 'number': 10475, 'closed': datetime.datetime(2020, 9, 1, 14, 7, 19, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 28, 15, 49, 49, tzinfo=datetime.timezone.utc), 'time_taken': 339450.0, 'time_delta': '3 days, 22:17:30', 'additions': 614, 'deletions': 14, 'state': 'closed'}, {'id': 472083778, 'number': 10418, 'closed': datetime.datetime(2020, 8, 28, 14, 57, 26, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 23, 6, 47, 30, tzinfo=datetime.timezone.utc), 'time_taken': 461396.0, 'time_delta': '5 days, 8:09:56', 'additions': 457, 'deletions': 0, 'state': 'closed'}, {'id': 471511835, 'number': 10404, 'closed': datetime.datetime(2020, 8, 22, 8, 15, 32, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 21, 9, 8, 32, tzinfo=datetime.timezone.utc), 'time_taken': 83220.0, 'time_delta': '23:07:00', 'additions': 20, 'deletions': 20, 'state': 'closed'}, {'id': 470717570, 'number': 10393, 'closed': datetime.datetime(2020, 8, 24, 11, 35, 54, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 20, 7, 18, 19, tzinfo=datetime.timezone.utc), 'time_taken': 361055.0, 'time_delta': '4 days, 4:17:35', 'additions': 4, 'deletions': 5167, 'state': 'closed'}, {'id': 468819633, 'number': 10366, 'closed': datetime.datetime(2020, 8, 22, 5, 37, 7, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 17, 13, 5, 47, tzinfo=datetime.timezone.utc), 'time_taken': 405080.0, 'time_delta': '4 days, 16:31:20', 'additions': 70, 'deletions': 14, 'state': 'closed'}, {'id': 467672486, 'number': 10331, 'closed': datetime.datetime(2020, 8, 20, 9, 51, 19, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 13, 22, 56, 54, tzinfo=datetime.timezone.utc), 'time_taken': 557665.0, 'time_delta': '6 days, 10:54:25', 'additions': 192, 'deletions': 32, 'state': 'closed'}, {'id': 467021495, 'number': 10302, 'closed': datetime.datetime(2020, 8, 13, 19, 13, 19, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 12, 21, 38, 7, tzinfo=datetime.timezone.utc), 'time_taken': 77712.0, 'time_delta': '21:35:12', 'additions': 5, 'deletions': 7, 'state': 'closed'}, {'id': 464666291, 'number': 10203, 'closed': datetime.datetime(2020, 8, 9, 19, 7, 29, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 7, 15, 27, 20, tzinfo=datetime.timezone.utc), 'time_taken': 186009.0, 'time_delta': '2 days, 3:40:09', 'additions': 1272, 'deletions': 5, 'state': 'closed'}, {'id': 463964696, 'number': 10177, 'closed': datetime.datetime(2020, 8, 19, 19, 53, 14, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 6, 11, 24, 2, tzinfo=datetime.timezone.utc), 'time_taken': 1153752.0, 'time_delta': '13 days, 8:29:12', 'additions': 459, 'deletions': 12, 'state': 'closed'}, {'id': 463100164, 'number': 10158, 'closed': datetime.datetime(2020, 8, 7, 16, 22, 59, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 5, 2, 5, 35, tzinfo=datetime.timezone.utc), 'time_taken': 224244.0, 'time_delta': '2 days, 14:17:24', 'additions': 223, 'deletions': 125, 'state': 'closed'}, {'id': 460855687, 'number': 10135, 'closed': datetime.datetime(2020, 8, 4, 16, 39, 15, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 1, 7, 1, 37, tzinfo=datetime.timezone.utc), 'time_taken': 293858.0, 'time_delta': '3 days, 9:37:38', 'additions': 1271, 'deletions': 0, 'state': 'closed'}, {'id': 456887374, 'number': 10056, 'closed': datetime.datetime(2020, 7, 30, 6, 54, 12, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 27, 4, 19, 28, tzinfo=datetime.timezone.utc), 'time_taken': 268484.0, 'time_delta': '3 days, 2:34:44', 'additions': 1782, 'deletions': 699, 'state': 'closed'}, {'id': 454476975, 'number': 9985, 'closed': datetime.datetime(2020, 7, 31, 8, 46, 18, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 21, 12, 47, 3, tzinfo=datetime.timezone.utc), 'time_taken': 849555.0, 'time_delta': '9 days, 19:59:15', 'additions': 2295, 'deletions': 119, 'state': 'closed'}, {'id': 447869188, 'number': 9889, 'closed': datetime.datetime(2020, 7, 24, 8, 28, 57, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 12, 8, 33, 9, tzinfo=datetime.timezone.utc), 'time_taken': 1036548.0, 'time_delta': '11 days, 23:55:48', 'additions': 2276, 'deletions': 2, 'state': 'closed'}, {'id': 444748059, 'number': 9805, 'closed': datetime.datetime(2020, 7, 10, 6, 57, 47, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 6, 12, 39, 4, tzinfo=datetime.timezone.utc), 'time_taken': 325123.0, 'time_delta': '3 days, 18:18:43', 'additions': 773, 'deletions': 67, 'state': 'closed'}, {'id': 444735506, 'number': 9803, 'closed': datetime.datetime(2020, 7, 6, 12, 28, 19, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 6, 12, 14, 10, tzinfo=datetime.timezone.utc), 'time_taken': 849.0, 'time_delta': '0:14:09', 'additions': 765, 'deletions': 67, 'state': 'closed'}, {'id': 444634895, 'number': 9802, 'closed': datetime.datetime(2020, 7, 6, 12, 4, 53, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 6, 8, 56, 51, tzinfo=datetime.timezone.utc), 'time_taken': 11282.0, 'time_delta': '3:08:02', 'additions': 765, 'deletions': 67, 'state': 'closed'}, {'id': 444459324, 'number': 9794, 'closed': datetime.datetime(2020, 7, 5, 21, 31, 30, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 5, 20, 54, 37, tzinfo=datetime.timezone.utc), 'time_taken': 2213.0, 'time_delta': '0:36:53', 'additions': 2, 'deletions': 5, 'state': 'closed'}, {'id': 441840550, 'number': 9732, 'closed': datetime.datetime(2020, 7, 4, 19, 3, 11, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 30, 7, 35, 8, tzinfo=datetime.timezone.utc), 'time_taken': 386883.0, 'time_delta': '4 days, 11:28:03', 'additions': 267, 'deletions': 106, 'state': 'closed'}, {'id': 440799736, 'number': 9678, 'closed': datetime.datetime(2020, 7, 3, 14, 3, 16, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 26, 21, 45, 11, tzinfo=datetime.timezone.utc), 'time_taken': 577085.0, 'time_delta': '6 days, 16:18:05', 'additions': 763, 'deletions': 66, 'state': 'closed'}, {'id': 438080994, 'number': 9617, 'closed': datetime.datetime(2020, 6, 27, 11, 21, 53, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 22, 17, 25, 32, tzinfo=datetime.timezone.utc), 'time_taken': 410181.0, 'time_delta': '4 days, 17:56:21', 'additions': 208, 'deletions': 23, 'state': 'closed'}, {'id': 433990710, 'number': 9517, 'closed': datetime.datetime(2020, 6, 24, 19, 32, 32, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 13, 10, 46, 57, tzinfo=datetime.timezone.utc), 'time_taken': 981935.0, 'time_delta': '11 days, 8:45:35', 'additions': 1767, 'deletions': 36, 'state': 'closed'}, {'id': 429139187, 'number': 9447, 'closed': datetime.datetime(2020, 6, 19, 19, 25, 10, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 6, 11, 19, 49, tzinfo=datetime.timezone.utc), 'time_taken': 1152321.0, 'time_delta': '13 days, 8:05:21', 'additions': 1046, 'deletions': 316, 'state': 'closed'}, {'id': 425685238, 'number': 9411, 'closed': datetime.datetime(2020, 6, 6, 11, 21, 24, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 5, 31, 23, 19, 9, tzinfo=datetime.timezone.utc), 'time_taken': 475335.0, 'time_delta': '5 days, 12:02:15', 'additions': 591, 'deletions': 257, 'state': 'closed'}, {'id': 424583347, 'number': 9390, 'closed': datetime.datetime(2020, 6, 27, 12, 43, 50, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 5, 28, 16, 0, 1, tzinfo=datetime.timezone.utc), 'time_taken': 2580229.0, 'time_delta': '29 days, 20:43:49', 'additions': 4794, 'deletions': 299, 'state': 'closed'}, {'id': 422337855, 'number': 9350, 'closed': datetime.datetime(2020, 5, 28, 16, 2, 45, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 5, 23, 23, 3, 34, tzinfo=datetime.timezone.utc), 'time_taken': 406751.0, 'time_delta': '4 days, 16:59:11', 'additions': 1881, 'deletions': 269, 'state': 'closed'}, {'id': 421256723, 'number': 9341, 'closed': datetime.datetime(2020, 5, 29, 15, 59, 12, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 5, 21, 9, 45, 39, tzinfo=datetime.timezone.utc), 'time_taken': 713613.0, 'time_delta': '8 days, 6:13:33', 'additions': 14, 'deletions': 1, 'state': 'closed'}, {'id': 420290327, 'number': 9328, 'closed': datetime.datetime(2020, 5, 25, 10, 50, 25, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 5, 19, 18, 28, 25, tzinfo=datetime.timezone.utc), 'time_taken': 490920.0, 'time_delta': '5 days, 16:22:00', 'additions': 812, 'deletions': 169, 'state': 'closed'}, {'id': 418971321, 'number': 9319, 'closed': datetime.datetime(2020, 5, 21, 20, 52, 36, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 5, 16, 13, 54, 5, tzinfo=datetime.timezone.utc), 'time_taken': 457111.0, 'time_delta': '5 days, 6:58:31', 'additions': 236, 'deletions': 142, 'state': 'closed'}, {'id': 418634753, 'number': 9316, 'closed': datetime.datetime(2020, 5, 16, 13, 56, 49, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 5, 15, 14, 47, 1, tzinfo=datetime.timezone.utc), 'time_taken': 83388.0, 'time_delta': '23:09:48', 'additions': 232, 'deletions': 139, 'state': 'closed'}, {'id': 415572406, 'number': 9280, 'closed': datetime.datetime(2020, 6, 14, 9, 37, 52, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 5, 9, 12, 59, 33, tzinfo=datetime.timezone.utc), 'time_taken': 3098299.0, 'time_delta': '35 days, 20:38:19', 'additions': 359, 'deletions': 69, 'state': 'closed'}, {'id': 412909719, 'number': 9240, 'closed': datetime.datetime(2020, 5, 5, 3, 43, 39, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 5, 4, 12, 3, 43, tzinfo=datetime.timezone.utc), 'time_taken': 56396.0, 'time_delta': '15:39:56', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 412324263, 'number': 9203, 'closed': datetime.datetime(2020, 6, 10, 4, 24, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 5, 1, 22, 26, 28, tzinfo=datetime.timezone.utc), 'time_taken': 3391052.0, 'time_delta': '39 days, 5:57:32', 'additions': 191, 'deletions': 21, 'state': 'closed'}, {'id': 402301951, 'number': 9064, 'closed': datetime.datetime(2020, 4, 13, 3, 33, 14, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 4, 12, 7, 47, 3, tzinfo=datetime.timezone.utc), 'time_taken': 71171.0, 'time_delta': '19:46:11', 'additions': 0, 'deletions': 65, 'state': 'closed'}, {'id': 402295167, 'number': 9062, 'closed': datetime.datetime(2020, 4, 14, 15, 45, 25, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 4, 12, 6, 27, 20, tzinfo=datetime.timezone.utc), 'time_taken': 206285.0, 'time_delta': '2 days, 9:18:05', 'additions': 222, 'deletions': 1, 'state': 'closed'}, {'id': 401229794, 'number': 9025, 'closed': datetime.datetime(2020, 4, 10, 2, 35, 32, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 4, 9, 6, 13, 8, tzinfo=datetime.timezone.utc), 'time_taken': 73344.0, 'time_delta': '20:22:24', 'additions': 418, 'deletions': 56, 'state': 'closed'}, {'id': 399551954, 'number': 8990, 'closed': datetime.datetime(2020, 5, 1, 22, 27, 7, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 4, 6, 10, 44, 40, tzinfo=datetime.timezone.utc), 'time_taken': 2202147.0, 'time_delta': '25 days, 11:42:27', 'additions': 104, 'deletions': 9, 'state': 'closed'}, {'id': 382006404, 'number': 8742, 'closed': datetime.datetime(2020, 3, 4, 3, 12, 7, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 3, 1, 6, 41, 6, tzinfo=datetime.timezone.utc), 'time_taken': 246661.0, 'time_delta': '2 days, 20:31:01', 'additions': 13, 'deletions': 0, 'state': 'closed'}, {'id': 377163106, 'number': 8682, 'closed': datetime.datetime(2020, 4, 9, 6, 13, 27, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 2, 19, 13, 15, 18, tzinfo=datetime.timezone.utc), 'time_taken': 4294689.0, 'time_delta': '49 days, 16:58:09', 'additions': 419, 'deletions': 56, 'state': 'closed'}, {'id': 375576877, 'number': 8640, 'closed': datetime.datetime(2020, 3, 15, 17, 46, 47, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 2, 14, 21, 17, 56, tzinfo=datetime.timezone.utc), 'time_taken': 2579331.0, 'time_delta': '29 days, 20:28:51', 'additions': 8, 'deletions': 48, 'state': 'closed'}, {'id': 373126780, 'number': 8611, 'closed': datetime.datetime(2020, 2, 29, 19, 57, 32, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 2, 10, 13, 13, 13, tzinfo=datetime.timezone.utc), 'time_taken': 1665859.0, 'time_delta': '19 days, 6:44:19', 'additions': 15, 'deletions': 4, 'state': 'closed'}, {'id': 369946822, 'number': 8538, 'closed': datetime.datetime(2020, 2, 23, 11, 14, 22, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 2, 1, 22, 21, 26, tzinfo=datetime.timezone.utc), 'time_taken': 1860776.0, 'time_delta': '21 days, 12:52:56', 'additions': 117, 'deletions': 29, 'state': 'closed'}, {'id': 361814137, 'number': 8409, 'closed': datetime.datetime(2020, 1, 25, 0, 19, 50, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 1, 12, 10, 12, 40, tzinfo=datetime.timezone.utc), 'time_taken': 1087630.0, 'time_delta': '12 days, 14:07:10', 'additions': 667, 'deletions': 0, 'state': 'closed'}, {'id': 355973122, 'number': 8251, 'closed': datetime.datetime(2020, 1, 3, 12, 4, 56, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2019, 12, 21, 5, 48, 14, tzinfo=datetime.timezone.utc), 'time_taken': 1145802.0, 'time_delta': '13 days, 6:16:42', 'additions': 55, 'deletions': 12, 'state': 'closed'}, {'id': 344936445, 'number': 8073, 'closed': datetime.datetime(2019, 12, 21, 5, 54, 12, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2019, 11, 24, 18, 51, 8, tzinfo=datetime.timezone.utc), 'time_taken': 2286184.0, 'time_delta': '26 days, 11:03:04', 'additions': 31, 'deletions': 2, 'state': 'closed'}, {'id': 340094654, 'number': 7985, 'closed': datetime.datetime(2019, 11, 19, 15, 8, 40, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2019, 11, 12, 20, 21, 46, tzinfo=datetime.timezone.utc), 'time_taken': 586014.0, 'time_delta': '6 days, 18:46:54', 'additions': 11, 'deletions': 1, 'state': 'closed'}, {'id': 332661018, 'number': 7841, 'closed': datetime.datetime(2019, 10, 28, 4, 11, 10, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2019, 10, 25, 20, 6, 49, tzinfo=datetime.timezone.utc), 'time_taken': 201861.0, 'time_delta': '2 days, 8:04:21', 'additions': 9, 'deletions': 9, 'state': 'closed'}, {'id': 330161895, 'number': 7811, 'closed': datetime.datetime(2019, 11, 7, 22, 24, 53, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2019, 10, 20, 21, 48, 50, tzinfo=datetime.timezone.utc), 'time_taken': 1557363.0, 'time_delta': '18 days, 0:36:03', 'additions': 73, 'deletions': 13, 'state': 'closed'}]"
