pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
1045503484,[Parser] Fix a bug with indentation of blocks,Closes #974,True,1078,https://api.github.com/repos/lcompilers/lpython/pulls/1078,https://github.com/lcompilers/lpython/pull/1078,closed,49,13,7,2,0,0,0,0,[],2022-09-03 15:38:44+00:00,2022-09-03 15:56:51+00:00,1087.0,0:18:07,[],"[{'commit_sha': 'b74581e9a5fb639612f4404c40b99f0cf779b248', 'committer_username': 'akshanshbhatt', 'committer_name': 'akshānsh', 'committer_email': 'info@akshansh.me', 'commit_date': datetime.datetime(2019, 7, 23, 14, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bc86c2904fcb0b50795732cb0cfb5d3426dc0038', 'committer_username': 'akshanshbhatt', 'committer_name': 'akshānsh', 'committer_email': 'info@akshansh.me', 'commit_date': datetime.datetime(2019, 7, 23, 14, 35, 25, tzinfo=datetime.timezone.utc)}]",akshānsh,53227127,info@akshansh.me,User,,18,,21,32
1042336644,[Parser] Fix issue with different indentation type within the same file,Related: #974,True,1070,https://api.github.com/repos/lcompilers/lpython/pulls/1070,https://github.com/lcompilers/lpython/pull/1070,closed,86,12,9,3,0,0,1,0,[{'name': 'Parser'}],2022-08-31 12:34:07+00:00,2022-09-01 03:48:31+00:00,54864.0,15:14:24,[],"[{'commit_sha': 'e049dcf362803159e9013358e40e832c995fdd9c', 'committer_username': 'akshanshbhatt', 'committer_name': 'akshānsh', 'committer_email': 'info@akshansh.me', 'commit_date': datetime.datetime(2019, 7, 23, 14, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a5951cbcd80e0e15643740f928e51e5c5f4183ff', 'committer_username': 'Thirumalai-Shaktivel', 'committer_name': 'Thirumalai Shaktivel', 'committer_email': None, 'commit_date': datetime.datetime(2020, 11, 21, 14, 45, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3ab2cc12be10982aec043798ecbd655cdb5a2ee8', 'committer_username': 'Thirumalai-Shaktivel', 'committer_name': 'Thirumalai Shaktivel', 'committer_email': None, 'commit_date': datetime.datetime(2020, 11, 21, 14, 45, 52, tzinfo=datetime.timezone.utc)}]",akshānsh,53227127,info@akshansh.me,User,,18,,21,32
1042281041,[Parser] Fix a bug in tokenizer related to docstring,Closes #1023 ,True,1068,https://api.github.com/repos/lcompilers/lpython/pulls/1068,https://github.com/lcompilers/lpython/pull/1068,closed,16,5,4,2,0,0,1,0,[{'name': 'Parser'}],2022-08-31 11:38:02+00:00,2022-08-31 11:57:09+00:00,1147.0,0:19:07,[],"[{'commit_sha': 'a9d0b724b4182ece6f850afebdd84e8c4f0c63bf', 'committer_username': 'akshanshbhatt', 'committer_name': 'akshānsh', 'committer_email': 'info@akshansh.me', 'commit_date': datetime.datetime(2019, 7, 23, 14, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '88bc0516c6127c2e0b6f157698ff6915b0d5d109', 'committer_username': 'akshanshbhatt', 'committer_name': 'akshānsh', 'committer_email': 'info@akshansh.me', 'commit_date': datetime.datetime(2019, 7, 23, 14, 35, 25, tzinfo=datetime.timezone.utc)}]",akshānsh,53227127,info@akshansh.me,User,,18,,21,32
1038859013,[Parser] Recognise `starred_id` as a valid `id_item`,Closes #1027 ,True,1053,https://api.github.com/repos/lcompilers/lpython/pulls/1053,https://github.com/lcompilers/lpython/pull/1053,closed,8,3,5,2,0,0,1,0,[{'name': 'Parser'}],2022-08-28 11:46:01+00:00,2022-08-29 12:36:39+00:00,89438.0,"1 day, 0:50:38",[],"[{'commit_sha': '3ca90de76f7e5b6b16811ed3f2001f40d238cb28', 'committer_username': 'akshanshbhatt', 'committer_name': 'akshānsh', 'committer_email': 'info@akshansh.me', 'commit_date': datetime.datetime(2019, 7, 23, 14, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '86dcf775e502e55153573cab86b0ef03e9b2ba39', 'committer_username': 'akshanshbhatt', 'committer_name': 'akshānsh', 'committer_email': 'info@akshansh.me', 'commit_date': datetime.datetime(2019, 7, 23, 14, 35, 25, tzinfo=datetime.timezone.utc)}]",akshānsh,53227127,info@akshansh.me,User,,18,,21,32
1038849281,[Parser] Parse `@=`,Closes #1025 ,True,1052,https://api.github.com/repos/lcompilers/lpython/pulls/1052,https://github.com/lcompilers/lpython/pull/1052,closed,9,3,4,2,0,0,1,0,[{'name': 'Parser'}],2022-08-28 10:52:24+00:00,2022-08-29 12:36:50+00:00,92666.0,"1 day, 1:44:26",[],"[{'commit_sha': 'e00edc56588e2a2fe2efe67f42511f05c95da2d8', 'committer_username': 'akshanshbhatt', 'committer_name': 'akshānsh', 'committer_email': 'info@akshansh.me', 'commit_date': datetime.datetime(2019, 7, 23, 14, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'be31848cb4906af1e37a4aea309195a34b733298', 'committer_username': 'akshanshbhatt', 'committer_name': 'akshānsh', 'committer_email': 'info@akshansh.me', 'commit_date': datetime.datetime(2019, 7, 23, 14, 35, 25, tzinfo=datetime.timezone.utc)}]",akshānsh,53227127,info@akshansh.me,User,,18,,21,32
1038679369,[Parser] Fix a bug with `not in` token,Closes #1024 ,True,1050,https://api.github.com/repos/lcompilers/lpython/pulls/1050,https://github.com/lcompilers/lpython/pull/1050,closed,16,4,4,2,0,0,1,0,[{'name': 'Parser'}],2022-08-27 17:50:52+00:00,2022-08-27 19:24:29+00:00,5617.0,1:33:37,[],"[{'commit_sha': '5974766d145aecf1eab7ea17292d74a16d3d053a', 'committer_username': 'akshanshbhatt', 'committer_name': 'akshānsh', 'committer_email': 'info@akshansh.me', 'commit_date': datetime.datetime(2019, 7, 23, 14, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3a26072374f2580e0f1d85a713e84aba39617f03', 'committer_username': 'akshanshbhatt', 'committer_name': 'akshānsh', 'committer_email': 'info@akshansh.me', 'commit_date': datetime.datetime(2019, 7, 23, 14, 35, 25, tzinfo=datetime.timezone.utc)}]",akshānsh,53227127,info@akshansh.me,User,,18,,21,32
1031342561,[Parser] Recognise tuple subscript,Closes #970,True,995,https://api.github.com/repos/lcompilers/lpython/pulls/995,https://github.com/lcompilers/lpython/pull/995,closed,10,3,4,2,0,0,1,0,[{'name': 'Parser'}],2022-08-19 16:14:52+00:00,2022-08-19 16:50:04+00:00,2112.0,0:35:12,[],"[{'commit_sha': '1e5bc213e503d91f609811c34f629b53cede7d17', 'committer_username': 'akshanshbhatt', 'committer_name': 'akshānsh', 'committer_email': 'info@akshansh.me', 'commit_date': datetime.datetime(2019, 7, 23, 14, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7548118b1b64325b2154033a2c19faf7c191671b', 'committer_username': 'akshanshbhatt', 'committer_name': 'akshānsh', 'committer_email': 'info@akshansh.me', 'commit_date': datetime.datetime(2019, 7, 23, 14, 35, 25, tzinfo=datetime.timezone.utc)}]",akshānsh,53227127,info@akshansh.me,User,,18,,21,32
1031293063,[Parser] Recognise lists and tuples in `GenExpr`,Closes #968,True,994,https://api.github.com/repos/lcompilers/lpython/pulls/994,https://github.com/lcompilers/lpython/pull/994,closed,24,3,5,2,0,0,1,0,[{'name': 'Parser'}],2022-08-19 15:25:05+00:00,2022-08-19 16:50:30+00:00,5125.0,1:25:25,[],"[{'commit_sha': '6e82290ae763d12b0d1206e3cd0a0afd699db36b', 'committer_username': 'akshanshbhatt', 'committer_name': 'akshānsh', 'committer_email': 'info@akshansh.me', 'commit_date': datetime.datetime(2019, 7, 23, 14, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '53eae71b5dbf53542f188a23677128900a054638', 'committer_username': 'akshanshbhatt', 'committer_name': 'akshānsh', 'committer_email': 'info@akshansh.me', 'commit_date': datetime.datetime(2019, 7, 23, 14, 35, 25, tzinfo=datetime.timezone.utc)}]",akshānsh,53227127,info@akshansh.me,User,,18,,21,32
1031260364,[Parser] Recognise `ListComprehension` Subscript,Closes #969,True,993,https://api.github.com/repos/lcompilers/lpython/pulls/993,https://github.com/lcompilers/lpython/pull/993,closed,17,10,4,2,1,0,1,0,[{'name': 'Parser'}],2022-08-19 14:51:02+00:00,2022-08-19 17:01:43+00:00,7841.0,2:10:41,[],"[{'commit_sha': '9d85ca14e9d42e7f7e28ad24fc732c37e5fb911a', 'committer_username': 'akshanshbhatt', 'committer_name': 'akshānsh', 'committer_email': 'info@akshansh.me', 'commit_date': datetime.datetime(2019, 7, 23, 14, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2cc6a88c1d47ea5dbd5df54db5181954c157cd09', 'committer_username': 'akshanshbhatt', 'committer_name': 'akshānsh', 'committer_email': 'info@akshansh.me', 'commit_date': datetime.datetime(2019, 7, 23, 14, 35, 25, tzinfo=datetime.timezone.utc)}]",akshānsh,53227127,info@akshansh.me,User,,18,,21,32
1027617836,[Parser] Refactor `TK_TYPE_COMMENT`,"* Type comments and Type ignores are now recognized as separate tokens.
* Closes #972",True,979,https://api.github.com/repos/lcompilers/lpython/pulls/979,https://github.com/lcompilers/lpython/pull/979,closed,71,29,5,3,0,0,1,0,[{'name': 'Parser'}],2022-08-16 13:20:04+00:00,2022-08-16 14:15:39+00:00,3335.0,0:55:35,[],"[{'commit_sha': 'ee79c147701d925e6a56cee47ca56e0f157de91e', 'committer_username': 'akshanshbhatt', 'committer_name': 'akshānsh', 'committer_email': 'info@akshansh.me', 'commit_date': datetime.datetime(2019, 7, 23, 14, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5ba586c8ac92a92629b01e2560f81ed39c365ebf', 'committer_username': 'akshanshbhatt', 'committer_name': 'akshānsh', 'committer_email': 'info@akshansh.me', 'commit_date': datetime.datetime(2019, 7, 23, 14, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fdcc78c40df02b14ef218d0c6ba807bc5d26d849', 'committer_username': 'akshanshbhatt', 'committer_name': 'akshānsh', 'committer_email': 'info@akshansh.me', 'commit_date': datetime.datetime(2019, 7, 23, 14, 35, 25, tzinfo=datetime.timezone.utc)}]",akshānsh,53227127,info@akshansh.me,User,,18,,21,32
1026599321,[Parser] Fix bug with comment in multiline statements,Closes #973,True,976,https://api.github.com/repos/lcompilers/lpython/pulls/976,https://github.com/lcompilers/lpython/pull/976,closed,11,6,4,2,0,0,1,0,[{'name': 'Parser'}],2022-08-15 15:45:41+00:00,2022-08-15 16:01:57+00:00,976.0,0:16:16,[],"[{'commit_sha': '9e098a552f33968c6b07a0cffc4699917f5e83d4', 'committer_username': 'akshanshbhatt', 'committer_name': 'akshānsh', 'committer_email': 'info@akshansh.me', 'commit_date': datetime.datetime(2019, 7, 23, 14, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '08d877fd9b1158c6866001c4241ad47bb37fd89e', 'committer_username': 'akshanshbhatt', 'committer_name': 'akshānsh', 'committer_email': 'info@akshansh.me', 'commit_date': datetime.datetime(2019, 7, 23, 14, 35, 25, tzinfo=datetime.timezone.utc)}]",akshānsh,53227127,info@akshansh.me,User,,18,,21,32
1021853617,[Parser] Add support for unicode identifiers,Continuation of #948 ,True,951,https://api.github.com/repos/lcompilers/lpython/pulls/951,https://github.com/lcompilers/lpython/pull/951,closed,34,1,5,2,4,0,1,0,[{'name': 'Parser'}],2022-08-09 18:37:49+00:00,2022-08-09 19:35:20+00:00,3451.0,0:57:31,[],"[{'commit_sha': 'cfa11dc5a96e54b13850db2aee90e10ec8de98fe', 'committer_username': 'akshanshbhatt', 'committer_name': 'akshānsh', 'committer_email': 'info@akshansh.me', 'commit_date': datetime.datetime(2019, 7, 23, 14, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9dd31905ca75b72c14f25adeff4afa34645926d8', 'committer_username': 'akshanshbhatt', 'committer_name': 'akshānsh', 'committer_email': 'info@akshansh.me', 'commit_date': datetime.datetime(2019, 7, 23, 14, 35, 25, tzinfo=datetime.timezone.utc)}]",akshānsh,53227127,info@akshansh.me,User,,18,,21,32
1021663633,[Parser] Fix bug with non-ASCII characters in the new parser,"Partially fixes #916 (New parser only)


CPython supports Unicode characters for identifier names, but the old definition only restricted it to the ASCII character set.
https://github.com/lcompilers/lpython/blob/d40c2c1076df2381437aebf3052377d4ef594a8a/src/lpython/parser/tokenizer.re#L271-L272

However, we cannot simply fix this by adding all the non-ASCII characters with the old char definition, like this -

```re
char = [^\x00-\x7F]|[a-zA-Z_];
```

This is because CPython restricts the first letter of an identifier to be a numeral, which holds for any language. Here is an example -

```py
❯ bat examples/expr2.py
───────┬─────────────────────────────────────────────────────────────
       │ File: examples/expr2.py
───────┼─────────────────────────────────────────────────────────────
   1 ~ │ def क१():
   2 ~ │     print(""Hello"")
   3   │
   4 ~ │ क१()
───────┴─────────────────────────────────────────────────────────────
❯ python3.11 examples/expr2.py
Hello
```
```py
❯ bat examples/expr2.py
───────┬─────────────────────────────────────────────────────────────
       │ File: examples/expr2.py
───────┼─────────────────────────────────────────────────────────────
   1 ~ │ def १क():
   2 ~ │     print(""Hello"")
   3   │
   4 ~ │ १क()
───────┴─────────────────────────────────────────────────────────────
❯ python3.11 examples/expr2.py
  File ""/Users/akshansh/Documents/GitHub/lpython/examples/expr2.py"", line 1
    def १क():
        ^
SyntaxError: invalid character '१' (U+0967)
```

`१` is a Hindi numeral, so it throws an error if used as the first character of the identifier.
I came across this article https://www.regular-expressions.info/unicode.html which suggested there are well-defined Unicode categories that can be used in a regular expression. We require all the characters in the `letter` category for `char`. In re2c, we can import these categories by including a header comment like this -

```c
/*!include:re2c ""re2c-2.2/include/unicode_categories.re"" */
```

I tried this, but it did not recognize the file's path for some reason. So instead, I just copied the regex for the letter category from the file mentioned in https://github.com/skvadrik/re2c/issues/235#issuecomment-580955677.",False,948,https://api.github.com/repos/lcompilers/lpython/pulls/948,https://github.com/lcompilers/lpython/pull/948,closed,37,2,5,4,17,2,1,0,[{'name': 'Parser'}],2022-08-09 15:22:38+00:00,2022-08-09 19:41:54+00:00,15556.0,4:19:16,"[{'comment_id': 941618610, 'comment_body': 'Would this accept a Hindi numeral? It seems it would only accept digits 0-9, but not Hindi numerals.', 'comment_created': datetime.datetime(2022, 8, 9, 17, 37, 1, tzinfo=datetime.timezone.utc), 'commenter': 'certik', 'type': 'User'}, {'comment_id': 941642056, 'comment_body': 'I just added the support for Unicode numerals in the latest commit.', 'comment_created': datetime.datetime(2022, 8, 9, 17, 56, 10, tzinfo=datetime.timezone.utc), 'commenter': 'akshanshbhatt', 'type': 'User'}]","[{'commit_sha': '0719d02b29f61d5a00af8e47994017bb4f1638f0', 'committer_username': 'akshanshbhatt', 'committer_name': 'akshānsh', 'committer_email': 'info@akshansh.me', 'commit_date': datetime.datetime(2019, 7, 23, 14, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a7935f453834bc52dae997338bb0b3ee9de0e83e', 'committer_username': 'akshanshbhatt', 'committer_name': 'akshānsh', 'committer_email': 'info@akshansh.me', 'commit_date': datetime.datetime(2019, 7, 23, 14, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9e18b2cd04fbe2f85475446f3653666d36120b15', 'committer_username': 'akshanshbhatt', 'committer_name': 'akshānsh', 'committer_email': 'info@akshansh.me', 'commit_date': datetime.datetime(2019, 7, 23, 14, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a1607865553a344fedca7d561049858d3627a959', 'committer_username': 'akshanshbhatt', 'committer_name': 'akshānsh', 'committer_email': 'info@akshansh.me', 'commit_date': datetime.datetime(2019, 7, 23, 14, 35, 25, tzinfo=datetime.timezone.utc)}]",akshānsh,53227127,info@akshansh.me,User,,18,,21,32
1018468411,[Parser] Fix bug with parsing `key:value` in separate lines,,True,905,https://api.github.com/repos/lcompilers/lpython/pulls/905,https://github.com/lcompilers/lpython/pull/905,closed,8,3,4,2,0,0,1,0,[{'name': 'Parser'}],2022-08-05 09:35:39+00:00,2022-08-05 10:00:58+00:00,1519.0,0:25:19,[],"[{'commit_sha': 'd49df458008b8dbe4e47c6a1840d29fd26594d7c', 'committer_username': 'akshanshbhatt', 'committer_name': 'akshānsh', 'committer_email': 'info@akshansh.me', 'commit_date': datetime.datetime(2019, 7, 23, 14, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cd47ba60ad6707310f82a279d751f9031a99ee3c', 'committer_username': 'akshanshbhatt', 'committer_name': 'akshānsh', 'committer_email': 'info@akshansh.me', 'commit_date': datetime.datetime(2019, 7, 23, 14, 35, 25, tzinfo=datetime.timezone.utc)}]",akshānsh,53227127,info@akshansh.me,User,,18,,21,32
1018431691,[Parser] Parse lambda expressions,,True,902,https://api.github.com/repos/lcompilers/lpython/pulls/902,https://github.com/lcompilers/lpython/pull/902,closed,140,44,6,2,1,0,1,0,[{'name': 'Parser'}],2022-08-05 08:58:47+00:00,2022-08-05 09:23:02+00:00,1455.0,0:24:15,[],"[{'commit_sha': 'e23f557a9352733730b5b054c89efbc3215479ba', 'committer_username': 'akshanshbhatt', 'committer_name': 'akshānsh', 'committer_email': 'info@akshansh.me', 'commit_date': datetime.datetime(2019, 7, 23, 14, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0025450a694f61f5b488cbf6e9b6ba56c9c95748', 'committer_username': 'akshanshbhatt', 'committer_name': 'akshānsh', 'committer_email': 'info@akshansh.me', 'commit_date': datetime.datetime(2019, 7, 23, 14, 35, 25, tzinfo=datetime.timezone.utc)}]",akshānsh,53227127,info@akshansh.me,User,,18,,21,32
1017913842,[Parser] Parse multiple statements in single line as `body` of `multiline statements`,Closes #886,True,899,https://api.github.com/repos/lcompilers/lpython/pulls/899,https://github.com/lcompilers/lpython/pull/899,closed,174,95,23,9,2,0,1,0,[{'name': 'Parser'}],2022-08-04 18:52:08+00:00,2022-08-05 04:13:45+00:00,33697.0,9:21:37,[],"[{'commit_sha': 'ee875adabf669c0839d110a0a97dfb2a97439eee', 'committer_username': 'akshanshbhatt', 'committer_name': 'akshānsh', 'committer_email': 'info@akshansh.me', 'commit_date': datetime.datetime(2019, 7, 23, 14, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '09b9f0e9d5a6fb9f20e2dbac99a9e23c90795ba9', 'committer_username': 'akshanshbhatt', 'committer_name': 'akshānsh', 'committer_email': 'info@akshansh.me', 'commit_date': datetime.datetime(2019, 7, 23, 14, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0ab8fa511aeb8fff7f1e1305439887660f6ad64c', 'committer_username': 'akshanshbhatt', 'committer_name': 'akshānsh', 'committer_email': 'info@akshansh.me', 'commit_date': datetime.datetime(2019, 7, 23, 14, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '25ea6e518a936bcb160cd82657cb0bed23a0cec5', 'committer_username': 'akshanshbhatt', 'committer_name': 'akshānsh', 'committer_email': 'info@akshansh.me', 'commit_date': datetime.datetime(2019, 7, 23, 14, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '945a81a44109fab8ae6fdf21d780a5060edcdf66', 'committer_username': 'akshanshbhatt', 'committer_name': 'akshānsh', 'committer_email': 'info@akshansh.me', 'commit_date': datetime.datetime(2019, 7, 23, 14, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '548bb4a5ae8516ede2e6379e09782f9747b28ca4', 'committer_username': 'akshanshbhatt', 'committer_name': 'akshānsh', 'committer_email': 'info@akshansh.me', 'commit_date': datetime.datetime(2019, 7, 23, 14, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8baa48551129888dd08b9b4ac24b4b151deb90f1', 'committer_username': 'akshanshbhatt', 'committer_name': 'akshānsh', 'committer_email': 'info@akshansh.me', 'commit_date': datetime.datetime(2019, 7, 23, 14, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e4c9e2a88ccf7736daaaffda0d6cdaac7e7d10b0', 'committer_username': 'akshanshbhatt', 'committer_name': 'akshānsh', 'committer_email': 'info@akshansh.me', 'commit_date': datetime.datetime(2019, 7, 23, 14, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5a8d0f6c0b4e25d51b33d9455e6c0b812f47ca63', 'committer_username': 'akshanshbhatt', 'committer_name': 'akshānsh', 'committer_email': 'info@akshansh.me', 'commit_date': datetime.datetime(2019, 7, 23, 14, 35, 25, tzinfo=datetime.timezone.utc)}]",akshānsh,53227127,info@akshansh.me,User,,18,,21,32
1017208056,[Parser] Add support for `GeneratorExp` nodes (new parser),,True,885,https://api.github.com/repos/lcompilers/lpython/pulls/885,https://github.com/lcompilers/lpython/pull/885,closed,10,3,5,2,0,0,1,0,[{'name': 'Parser'}],2022-08-04 08:24:07+00:00,2022-08-04 08:45:05+00:00,1258.0,0:20:58,[],"[{'commit_sha': 'e71e7f79e02d91a3f1ddfc49000e171022330b14', 'committer_username': 'akshanshbhatt', 'committer_name': 'akshānsh', 'committer_email': 'info@akshansh.me', 'commit_date': datetime.datetime(2019, 7, 23, 14, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6e20b665f5178ce02a883284a154f3e701fd6f10', 'committer_username': 'akshanshbhatt', 'committer_name': 'akshānsh', 'committer_email': 'info@akshansh.me', 'commit_date': datetime.datetime(2019, 7, 23, 14, 35, 25, tzinfo=datetime.timezone.utc)}]",akshānsh,53227127,info@akshansh.me,User,,18,,21,32
1012567989,[Parser] Properly handle functions with `*` and `/` in the new parser,Closes #513 ,True,850,https://api.github.com/repos/lcompilers/lpython/pulls/850,https://github.com/lcompilers/lpython/pull/850,closed,57,14,5,4,2,0,1,0,[{'name': 'Parser'}],2022-07-30 07:42:03+00:00,2022-07-31 06:18:13+00:00,81370.0,22:36:10,[],"[{'commit_sha': '3d139740db63f771dfc4197a69f557f3418af820', 'committer_username': 'akshanshbhatt', 'committer_name': 'akshānsh', 'committer_email': 'info@akshansh.me', 'commit_date': datetime.datetime(2019, 7, 23, 14, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '78946c0672172e3c359b860d53f75f30191ada79', 'committer_username': 'akshanshbhatt', 'committer_name': 'akshānsh', 'committer_email': 'info@akshansh.me', 'commit_date': datetime.datetime(2019, 7, 23, 14, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '15045ae4c0595501a20cf018ad8afb4c0ee4daa0', 'committer_username': 'Thirumalai-Shaktivel', 'committer_name': 'Thirumalai Shaktivel', 'committer_email': None, 'commit_date': datetime.datetime(2020, 11, 21, 14, 45, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8cd2b17002cc8fa2750e218fa694eeddd833b3fd', 'committer_username': 'Thirumalai-Shaktivel', 'committer_name': 'Thirumalai Shaktivel', 'committer_email': None, 'commit_date': datetime.datetime(2020, 11, 21, 14, 45, 52, tzinfo=datetime.timezone.utc)}]",akshānsh,53227127,info@akshansh.me,User,,18,,21,32
1012125519,[Parser] Revert `BoolOp` node generation in the new parser,,True,848,https://api.github.com/repos/lcompilers/lpython/pulls/848,https://github.com/lcompilers/lpython/pull/848,closed,10,11,6,1,0,0,1,0,[{'name': 'Parser'}],2022-07-29 15:43:39+00:00,2022-07-29 16:02:12+00:00,1113.0,0:18:33,[],"[{'commit_sha': 'd35f104172831a0892bcbda77d7535b4ebc68f7f', 'committer_username': 'akshanshbhatt', 'committer_name': 'akshānsh', 'committer_email': 'info@akshansh.me', 'commit_date': datetime.datetime(2019, 7, 23, 14, 35, 25, tzinfo=datetime.timezone.utc)}]",akshānsh,53227127,info@akshansh.me,User,,18,,21,32
1012099084,[Parser] Add support for parsing strings with all possible `stringprefix`,Refs: https://docs.python.org/3/reference/lexical_analysis.html#string-and-bytes-literals,True,847,https://api.github.com/repos/lcompilers/lpython/pulls/847,https://github.com/lcompilers/lpython/pull/847,closed,43,7,4,2,0,0,1,0,[{'name': 'Parser'}],2022-07-29 15:27:17+00:00,2022-07-29 15:42:53+00:00,936.0,0:15:36,[],"[{'commit_sha': '8abef30fd80074e0ecef7c6ef13439582b411689', 'committer_username': 'akshanshbhatt', 'committer_name': 'akshānsh', 'committer_email': 'info@akshansh.me', 'commit_date': datetime.datetime(2019, 7, 23, 14, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd78d389c995a125d7d150689fe4c6cc43cc59b1d', 'committer_username': 'akshanshbhatt', 'committer_name': 'akshānsh', 'committer_email': 'info@akshansh.me', 'commit_date': datetime.datetime(2019, 7, 23, 14, 35, 25, tzinfo=datetime.timezone.utc)}]",akshānsh,53227127,info@akshansh.me,User,,18,,21,32
1011636138,[Parser] Parse `type_comment` in function args,"`type_comment` is now parsed correctly for all the possible cases in the new parser.
Refer to https://github.com/lcompilers/lpython/pull/801#issue-1311757578 for more information.",True,845,https://api.github.com/repos/lcompilers/lpython/pulls/845,https://github.com/lcompilers/lpython/pull/845,closed,44,3,5,3,1,3,1,0,[{'name': 'Parser'}],2022-07-29 07:17:20+00:00,2022-07-29 09:07:41+00:00,6621.0,1:50:21,"[{'comment_id': 932998282, 'comment_body': '```suggestion\r\n    | defparameter_list "","" TK_TYPE_COMMENT parameter { $$ = $1;\r\n        LIST_ADD($$, $4); ADD_TYPE_COMMENT($1, $3, @$); }\r\n```', 'comment_created': datetime.datetime(2022, 7, 29, 8, 31, 10, tzinfo=datetime.timezone.utc), 'commenter': 'Thirumalai-Shaktivel', 'type': 'User'}, {'comment_id': 932998513, 'comment_body': '```suggestion\r\n    | defparameter_list "","" TK_TYPE_COMMENT { ADD_TYPE_COMMENT($1, $3, @$);\r\n        $$ = FUNC_ARG_LIST_01($1, @$); }\r\n```', 'comment_created': datetime.datetime(2022, 7, 29, 8, 31, 27, tzinfo=datetime.timezone.utc), 'commenter': 'Thirumalai-Shaktivel', 'type': 'User'}, {'comment_id': 932999243, 'comment_body': '```suggestion\r\nstatic inline void ADD_TYPE_COMMENT_(LFortran::Parser &p, Location l,\r\n        Vec<Arg*> &x, LFortran::Str &type_comment) {\r\n    x[x.size() - 1]->_arg.m_type_comment = extract_type_comment(p, l, type_comment);\r\n}\r\n\r\n#define ADD_TYPE_COMMENT(x, type_comment, l) \\\r\n        ADD_TYPE_COMMENT_(p, l, x, type_comment)\r\n```', 'comment_created': datetime.datetime(2022, 7, 29, 8, 32, 23, tzinfo=datetime.timezone.utc), 'commenter': 'Thirumalai-Shaktivel', 'type': 'User'}]","[{'commit_sha': '7599fb9a0e358953f7637a3ebb6694c56294cb91', 'committer_username': 'akshanshbhatt', 'committer_name': 'akshānsh', 'committer_email': 'info@akshansh.me', 'commit_date': datetime.datetime(2019, 7, 23, 14, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd06e83a70ea57a4c45006e4f95dfe56116efd7cb', 'committer_username': 'akshanshbhatt', 'committer_name': 'akshānsh', 'committer_email': 'info@akshansh.me', 'commit_date': datetime.datetime(2019, 7, 23, 14, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '900f32fa1df4b7a4e7c85f6259913366b2501b48', 'committer_username': 'akshanshbhatt', 'committer_name': 'akshānsh', 'committer_email': 'info@akshansh.me', 'commit_date': datetime.datetime(2019, 7, 23, 14, 35, 25, tzinfo=datetime.timezone.utc)}]",akshānsh,53227127,info@akshansh.me,User,,18,,21,32
1010006812,[Parser] Add support for parsing nested function calls,Closes #791 ,True,830,https://api.github.com/repos/lcompilers/lpython/pulls/830,https://github.com/lcompilers/lpython/pull/830,closed,30,0,5,2,0,0,1,0,[{'name': 'Parser'}],2022-07-27 18:37:24+00:00,2022-07-27 20:32:12+00:00,6888.0,1:54:48,[],"[{'commit_sha': '3ae3227714236937d37c158875214eefcdba0ad6', 'committer_username': 'akshanshbhatt', 'committer_name': 'akshānsh', 'committer_email': 'info@akshansh.me', 'commit_date': datetime.datetime(2019, 7, 23, 14, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '996708a59235b985cb450ada8504901d637da226', 'committer_username': 'akshanshbhatt', 'committer_name': 'akshānsh', 'committer_email': 'info@akshansh.me', 'commit_date': datetime.datetime(2019, 7, 23, 14, 35, 25, tzinfo=datetime.timezone.utc)}]",akshānsh,53227127,info@akshansh.me,User,,18,,21,32
1005950776,[Parser] Recognise default values (keywords) in `class-def`,Closes #787,True,810,https://api.github.com/repos/lcompilers/lpython/pulls/810,https://github.com/lcompilers/lpython/pull/810,closed,61,1,6,2,1,0,1,0,[{'name': 'Parser'}],2022-07-22 16:04:19+00:00,2022-07-23 05:07:20+00:00,46981.0,13:03:01,[],"[{'commit_sha': 'b54150a5cda907fc4a18b03afc5dfb945b283fff', 'committer_username': 'akshanshbhatt', 'committer_name': 'akshānsh', 'committer_email': 'info@akshansh.me', 'commit_date': datetime.datetime(2019, 7, 23, 14, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '06da76c00715bcc42c163786618bb5f06b7f3749', 'committer_username': 'akshanshbhatt', 'committer_name': 'akshānsh', 'committer_email': 'info@akshansh.me', 'commit_date': datetime.datetime(2019, 7, 23, 14, 35, 25, tzinfo=datetime.timezone.utc)}]",akshānsh,53227127,info@akshansh.me,User,,18,,21,32
1005922594,[Parser] Add support for parsing tuples in `for-loop`,Closes #779 ,True,809,https://api.github.com/repos/lcompilers/lpython/pulls/809,https://github.com/lcompilers/lpython/pull/809,closed,41,13,4,2,1,0,1,0,[{'name': 'Parser'}],2022-07-22 15:34:01+00:00,2022-07-23 05:07:57+00:00,48836.0,13:33:56,[],"[{'commit_sha': 'b685ec3da7bdc3ac0ff43110817bfc8a02db48b7', 'committer_username': 'akshanshbhatt', 'committer_name': 'akshānsh', 'committer_email': 'info@akshansh.me', 'commit_date': datetime.datetime(2019, 7, 23, 14, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2fbe0ed9a90006aeb7ec125185ecacfcdb780c54', 'committer_username': 'akshanshbhatt', 'committer_name': 'akshānsh', 'committer_email': 'info@akshansh.me', 'commit_date': datetime.datetime(2019, 7, 23, 14, 35, 25, tzinfo=datetime.timezone.utc)}]",akshānsh,53227127,info@akshansh.me,User,,18,,21,32
1005887638,[Parser] Fix issue 803,Closes #803 ,True,808,https://api.github.com/repos/lcompilers/lpython/pulls/808,https://github.com/lcompilers/lpython/pull/808,closed,43,6,5,2,1,0,1,0,[{'name': 'Parser'}],2022-07-22 14:57:21+00:00,2022-07-23 05:54:49+00:00,53848.0,14:57:28,[],"[{'commit_sha': '0a2f1af7a6ab02b5aecce433785ae43cb0fdf412', 'committer_username': 'akshanshbhatt', 'committer_name': 'akshānsh', 'committer_email': 'info@akshansh.me', 'commit_date': datetime.datetime(2019, 7, 23, 14, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7f360fe0f980326d9711c3e3f7b1d665a817835e', 'committer_username': 'akshanshbhatt', 'committer_name': 'akshānsh', 'committer_email': 'info@akshansh.me', 'commit_date': datetime.datetime(2019, 7, 23, 14, 35, 25, tzinfo=datetime.timezone.utc)}]",akshānsh,53227127,info@akshansh.me,User,,18,,21,32
1002808315,[Parser] Add `type-comment` support in new parser,"I have tried to add support for parsing `type-comments` for almost every case
- [x] `For` (Already completed in #724)
- [x] `AsyncFor`
- [x] `FunctionDef`
- [x] `AsyncFunctionDef`
- [x] `With`
- [x] `AsyncWith`
- [x] `Assignment`
- [x] `Function Agrs` ~(TODO)~ (Implemented in #845)",True,801,https://api.github.com/repos/lcompilers/lpython/pulls/801,https://github.com/lcompilers/lpython/pull/801,closed,68,0,2,4,1,0,1,0,[{'name': 'Parser'}],2022-07-20 19:26:20+00:00,2022-07-21 03:44:26+00:00,29886.0,8:18:06,[],"[{'commit_sha': '42ff302dd3047d398825b7a1d41a922bc06ec787', 'committer_username': 'akshanshbhatt', 'committer_name': 'akshānsh', 'committer_email': 'info@akshansh.me', 'commit_date': datetime.datetime(2019, 7, 23, 14, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e1d04913f7cc314cae848c1452106daab8f1fae3', 'committer_username': 'akshanshbhatt', 'committer_name': 'akshānsh', 'committer_email': 'info@akshansh.me', 'commit_date': datetime.datetime(2019, 7, 23, 14, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bcb86392263266d879f8ce3eba6dffa780d3ca66', 'committer_username': 'akshanshbhatt', 'committer_name': 'akshānsh', 'committer_email': 'info@akshansh.me', 'commit_date': datetime.datetime(2019, 7, 23, 14, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '45d6024a30e271db51fc1286b4a6d0ddb164aa07', 'committer_username': 'akshanshbhatt', 'committer_name': 'akshānsh', 'committer_email': 'info@akshansh.me', 'commit_date': datetime.datetime(2019, 7, 23, 14, 35, 25, tzinfo=datetime.timezone.utc)}]",akshānsh,53227127,info@akshansh.me,User,,18,,21,32
992272526,[Parser] Parse indexing operations on attributes,,True,751,https://api.github.com/repos/lcompilers/lpython/pulls/751,https://github.com/lcompilers/lpython/pull/751,closed,14,3,4,2,0,0,0,0,[],2022-07-09 17:08:23+00:00,2022-07-09 21:03:45+00:00,14122.0,3:55:22,[],"[{'commit_sha': '8c612b6bb16cb18fb9ab927a50c0c4c70c3bf061', 'committer_username': 'akshanshbhatt', 'committer_name': 'akshānsh', 'committer_email': 'info@akshansh.me', 'commit_date': datetime.datetime(2019, 7, 23, 14, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '877872c2f5312294d42bbd0872f676e439af10ce', 'committer_username': 'akshanshbhatt', 'committer_name': 'akshānsh', 'committer_email': 'info@akshansh.me', 'commit_date': datetime.datetime(2019, 7, 23, 14, 35, 25, tzinfo=datetime.timezone.utc)}]",akshānsh,53227127,info@akshansh.me,User,,18,,21,32
986656652,[Parser] Parse raw strings,Related: #512 ,True,734,https://api.github.com/repos/lcompilers/lpython/pulls/734,https://github.com/lcompilers/lpython/pull/734,closed,15,3,4,2,0,0,1,0,[{'name': 'Parser'}],2022-07-04 16:41:49+00:00,2022-07-11 15:56:26+00:00,602077.0,"6 days, 23:14:37",[],"[{'commit_sha': '7288addb9ae7e12b1e7658152054d5782520edb1', 'committer_username': 'akshanshbhatt', 'committer_name': 'akshānsh', 'committer_email': 'info@akshansh.me', 'commit_date': datetime.datetime(2019, 7, 23, 14, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f8ecd476aa52df6fc35c88fc55459ba605afbc29', 'committer_username': 'akshanshbhatt', 'committer_name': 'akshānsh', 'committer_email': 'info@akshansh.me', 'commit_date': datetime.datetime(2019, 7, 23, 14, 35, 25, tzinfo=datetime.timezone.utc)}]",akshānsh,53227127,info@akshansh.me,User,,18,,21,32
985531942,[Parser] Parse `type-comments` in `for-loops`,"Closes #485

Code credit: https://github.com/lcompilers/lpython/issues/485#issue-1233495843",True,724,https://api.github.com/repos/lcompilers/lpython/pulls/724,https://github.com/lcompilers/lpython/pull/724,closed,61,6,8,7,2,5,1,0,[{'name': 'Parser'}],2022-07-02 14:08:24+00:00,2022-07-12 19:40:30+00:00,883926.0,"10 days, 5:32:06","[{'comment_id': 912372083, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2022, 7, 2, 15, 11, 31, tzinfo=datetime.timezone.utc), 'commenter': 'Thirumalai-Shaktivel', 'type': 'User'}, {'comment_id': 912372143, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2022, 7, 2, 15, 12, 9, tzinfo=datetime.timezone.utc), 'commenter': 'Thirumalai-Shaktivel', 'type': 'User'}, {'comment_id': 912372360, 'comment_body': 'Can you parse the `for-else` loop with the `type_comments` as well? \r\nAlso, add a test for it.', 'comment_created': datetime.datetime(2022, 7, 2, 15, 15, 2, tzinfo=datetime.timezone.utc), 'commenter': 'Thirumalai-Shaktivel', 'type': 'User'}, {'comment_id': 912375948, 'comment_body': 'Done!', 'comment_created': datetime.datetime(2022, 7, 2, 15, 56, 19, tzinfo=datetime.timezone.utc), 'commenter': 'akshanshbhatt', 'type': 'User'}, {'comment_id': 912376102, 'comment_body': 'Thank you!', 'comment_created': datetime.datetime(2022, 7, 2, 15, 58, 13, tzinfo=datetime.timezone.utc), 'commenter': 'Thirumalai-Shaktivel', 'type': 'User'}]","[{'commit_sha': '7ed5c0be50ff3aea9baacad3143ce11d995a8240', 'committer_username': 'akshanshbhatt', 'committer_name': 'akshānsh', 'committer_email': 'info@akshansh.me', 'commit_date': datetime.datetime(2019, 7, 23, 14, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd397910d5942c96fbecdf772b317d8ed94eeb494', 'committer_username': 'akshanshbhatt', 'committer_name': 'akshānsh', 'committer_email': 'info@akshansh.me', 'commit_date': datetime.datetime(2019, 7, 23, 14, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ad8f3c24b84059ea5f8f9e974c81d904019d70c7', 'committer_username': 'akshanshbhatt', 'committer_name': 'akshānsh', 'committer_email': 'info@akshansh.me', 'commit_date': datetime.datetime(2019, 7, 23, 14, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '72f3fb5d285ea54e48b9d7789dacc89652bad969', 'committer_username': 'akshanshbhatt', 'committer_name': 'akshānsh', 'committer_email': 'info@akshansh.me', 'commit_date': datetime.datetime(2019, 7, 23, 14, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c5aaba3320383471b04a95e41a38a10bbae09389', 'committer_username': 'akshanshbhatt', 'committer_name': 'akshānsh', 'committer_email': 'info@akshansh.me', 'commit_date': datetime.datetime(2019, 7, 23, 14, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6c6b6a8428333fce26c75f87674a4f38bee1be4a', 'committer_username': 'akshanshbhatt', 'committer_name': 'akshānsh', 'committer_email': 'info@akshansh.me', 'commit_date': datetime.datetime(2019, 7, 23, 14, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '785089141dfa4f6f4e9c8ba6696b3f9a9c1a9ce0', 'committer_username': 'akshanshbhatt', 'committer_name': 'akshānsh', 'committer_email': 'info@akshansh.me', 'commit_date': datetime.datetime(2019, 7, 23, 14, 35, 25, tzinfo=datetime.timezone.utc)}]",akshānsh,53227127,info@akshansh.me,User,,18,,21,32
981744951,[Parser] Parsing support for `in` (Membership Operator),"Closes #511

- Solved the shift/reduce conflicts related to expressions containing `in`. The grammar was clashing with the syntax of for-loops (`for...in`).
- Refactored the tokens as asked in https://github.com/lcompilers/lpython/pull/578#discussion_r895094909.",True,709,https://api.github.com/repos/lcompilers/lpython/pulls/709,https://github.com/lcompilers/lpython/pull/709,closed,38,12,4,2,3,0,0,0,[],2022-06-28 18:29:57+00:00,2022-06-29 09:02:01+00:00,52324.0,14:32:04,[],"[{'commit_sha': 'e0d99269f301fed9b82faba2b8fcd421dacdff8c', 'committer_username': 'akshanshbhatt', 'committer_name': 'akshānsh', 'committer_email': 'info@akshansh.me', 'commit_date': datetime.datetime(2019, 7, 23, 14, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3ef0ec0b43fde19d9b1ba58da755d0af7c8984e2', 'committer_username': 'akshanshbhatt', 'committer_name': 'akshānsh', 'committer_email': 'info@akshansh.me', 'commit_date': datetime.datetime(2019, 7, 23, 14, 35, 25, tzinfo=datetime.timezone.utc)}]",akshānsh,53227127,info@akshansh.me,User,,18,,21,32
978535607,[Parser] Parse list comprehension,"Closes #508
Reference: https://docs.python.org/3/reference/expressions.html#displays-for-lists-sets-and-dictionaries",True,686,https://api.github.com/repos/lcompilers/lpython/pulls/686,https://github.com/lcompilers/lpython/pull/686,closed,80,0,6,2,1,0,1,0,[{'name': 'Parser'}],2022-06-24 17:03:32+00:00,2022-06-27 18:59:21+00:00,266149.0,"3 days, 1:55:49",[],"[{'commit_sha': '7d1d8a937dca64d7a6c25e8946b6854c375c7735', 'committer_username': 'akshanshbhatt', 'committer_name': 'akshānsh', 'committer_email': 'info@akshansh.me', 'commit_date': datetime.datetime(2019, 7, 23, 14, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dddde064106e94cc3cc6bc23d52a940d9cca4417', 'committer_username': 'akshanshbhatt', 'committer_name': 'akshānsh', 'committer_email': 'info@akshansh.me', 'commit_date': datetime.datetime(2019, 7, 23, 14, 35, 25, tzinfo=datetime.timezone.utc)}]",akshānsh,53227127,info@akshansh.me,User,,18,,21,32
977348560,[Parser] Parse conditional expressions,"Related issue: #508 
Ref: [Conditional Expressions](https://docs.python.org/3/reference/expressions.html#conditional-expressions)",True,682,https://api.github.com/repos/lcompilers/lpython/pulls/682,https://github.com/lcompilers/lpython/pull/682,closed,23,3,5,3,2,1,1,0,[{'name': 'Parser'}],2022-06-23 15:49:18+00:00,2022-06-24 01:59:58+00:00,36640.0,10:10:40,"[{'comment_id': 905239869, 'comment_body': '```suggestion\r\n%left ""=="" ""!="" "">="" "">"" ""<="" ""<"" TK_IS_NOT KW_IS TK_NOT_IN // ""in""\r\n%left KW_IF KW_ELSE\r\n```', 'comment_created': datetime.datetime(2022, 6, 23, 16, 32, 30, tzinfo=datetime.timezone.utc), 'commenter': 'Thirumalai-Shaktivel', 'type': 'User'}]","[{'commit_sha': 'a0ffb8f627ef2accbbe1c9dfdd50d809736f7bc4', 'committer_username': 'akshanshbhatt', 'committer_name': 'akshānsh', 'committer_email': 'info@akshansh.me', 'commit_date': datetime.datetime(2019, 7, 23, 14, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4aa4f5b1cc70851dc265a80f920d8a3373afb8a0', 'committer_username': 'akshanshbhatt', 'committer_name': 'akshānsh', 'committer_email': 'info@akshansh.me', 'commit_date': datetime.datetime(2019, 7, 23, 14, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b4a9ab536bed1913debb9a3139e02769e5c7d7d7', 'committer_username': 'akshanshbhatt', 'committer_name': 'akshānsh', 'committer_email': 'info@akshansh.me', 'commit_date': datetime.datetime(2019, 7, 23, 14, 35, 25, tzinfo=datetime.timezone.utc)}]",akshānsh,53227127,info@akshansh.me,User,,18,,21,32
970857825,[Parser] Add support for parsing prefixed strings,Related: #512 ,True,624,https://api.github.com/repos/lcompilers/lpython/pulls/624,https://github.com/lcompilers/lpython/pull/624,closed,79,0,6,3,13,6,1,0,[{'name': 'Parser'}],2022-06-17 17:33:36+00:00,2022-06-20 06:31:58+00:00,219502.0,"2 days, 12:58:22","[{'comment_id': 901048736, 'comment_body': '```suggestion\r\n    Vec<expr_t *> exprs;\r\n```', 'comment_created': datetime.datetime(2022, 6, 19, 5, 15, 42, tzinfo=datetime.timezone.utc), 'commenter': 'certik', 'type': 'User'}, {'comment_id': 901048784, 'comment_body': '```suggestion\r\n    return make_JoinedStr_t(al, l, exprs.p, exprs.size());\r\n```', 'comment_created': datetime.datetime(2022, 6, 19, 5, 16, tzinfo=datetime.timezone.utc), 'commenter': 'certik', 'type': 'User'}, {'comment_id': 901048884, 'comment_body': '```suggestion\r\n                exprs.push_back(al, ASR::down_cast<ASR::expr_t>(tmp));\r\n```', 'comment_created': datetime.datetime(2022, 6, 19, 5, 17, 15, tzinfo=datetime.timezone.utc), 'commenter': 'certik', 'type': 'User'}, {'comment_id': 901048967, 'comment_body': ""You can't do this, as it becomes dangling when `strs` goes out of scope. You have to allocate all strings using our allocator, such as:\r\n```suggestion\r\n                tmp = make_ConstantStr_t(al, l, s2c(al, strs[i]), nullptr);\r\n```"", 'comment_created': datetime.datetime(2022, 6, 19, 5, 18, 30, tzinfo=datetime.timezone.utc), 'commenter': 'certik', 'type': 'User'}, {'comment_id': 901048990, 'comment_body': '```suggestion\r\n                        s2c(al, strs[i]), expr_contextType::Load);\r\n```', 'comment_created': datetime.datetime(2022, 6, 19, 5, 18, 58, tzinfo=datetime.timezone.utc), 'commenter': 'certik', 'type': 'User'}, {'comment_id': 901102184, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2022, 6, 19, 12, 52, 43, tzinfo=datetime.timezone.utc), 'commenter': 'Thirumalai-Shaktivel', 'type': 'User'}]","[{'commit_sha': '0b3f23353fd637433676345643c7141753347cde', 'committer_username': 'akshanshbhatt', 'committer_name': 'akshānsh', 'committer_email': 'info@akshansh.me', 'commit_date': datetime.datetime(2019, 7, 23, 14, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e1e9b66fc25f0896c60f59ee24b9f902f0ac2c54', 'committer_username': 'akshanshbhatt', 'committer_name': 'akshānsh', 'committer_email': 'info@akshansh.me', 'commit_date': datetime.datetime(2019, 7, 23, 14, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '138d1c3ecf6e9e3d009c1788c7f5c4ac77de19ce', 'committer_username': 'akshanshbhatt', 'committer_name': 'akshānsh', 'committer_email': 'info@akshansh.me', 'commit_date': datetime.datetime(2019, 7, 23, 14, 35, 25, tzinfo=datetime.timezone.utc)}]",akshānsh,53227127,info@akshansh.me,User,,18,,21,32
969653893,[Parser] Fix issues with comment and indentation,"Closes #509
Closes #612
Closes #617
",True,619,https://api.github.com/repos/lcompilers/lpython/pulls/619,https://github.com/lcompilers/lpython/pull/619,closed,228,15,11,6,2,0,1,0,[{'name': 'Parser'}],2022-06-16 18:25:52+00:00,2022-06-17 03:40:33+00:00,33281.0,9:14:41,[],"[{'commit_sha': 'f9fbd5a390e5ad7cabfbe823e5e3e8e015c05279', 'committer_username': 'akshanshbhatt', 'committer_name': 'akshānsh', 'committer_email': 'info@akshansh.me', 'commit_date': datetime.datetime(2019, 7, 23, 14, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ae9b7a4fdee5f892b23d5ae1133e1692ad926d06', 'committer_username': 'akshanshbhatt', 'committer_name': 'akshānsh', 'committer_email': 'info@akshansh.me', 'commit_date': datetime.datetime(2019, 7, 23, 14, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '76f7ec66a9b9225ecb7030fde30a6287c5593c06', 'committer_username': 'akshanshbhatt', 'committer_name': 'akshānsh', 'committer_email': 'info@akshansh.me', 'commit_date': datetime.datetime(2019, 7, 23, 14, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd1f0c6fb127abf75789154c8929698254bde9492', 'committer_username': 'akshanshbhatt', 'committer_name': 'akshānsh', 'committer_email': 'info@akshansh.me', 'commit_date': datetime.datetime(2019, 7, 23, 14, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '104dd952f8980b95103f2f302afaaacd2de9d261', 'committer_username': 'akshanshbhatt', 'committer_name': 'akshānsh', 'committer_email': 'info@akshansh.me', 'commit_date': datetime.datetime(2019, 7, 23, 14, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1679365eeb389718efc430139e59a87454452267', 'committer_username': 'akshanshbhatt', 'committer_name': 'akshānsh', 'committer_email': 'info@akshansh.me', 'commit_date': datetime.datetime(2019, 7, 23, 14, 35, 25, tzinfo=datetime.timezone.utc)}]",akshānsh,53227127,info@akshansh.me,User,,18,,21,32
964815161,[Parser] Rules for `not in`,Related Issue: #511 ,True,578,https://api.github.com/repos/lcompilers/lpython/pulls/578,https://github.com/lcompilers/lpython/pull/578,closed,19,4,5,3,1,6,1,0,[{'name': 'Parser'}],2022-06-11 18:22:17+00:00,2022-06-12 03:45:54+00:00,33817.0,9:23:37,"[{'comment_id': 895094909, 'comment_body': 'One should be also able to do:\r\n```suggestion\r\n%left ""=="" ""!="" "">="" "">"" ""<="" ""<"" ""is not"" ""is"" ""not in"" // ""in""\r\n```\r\nBut it\'s not clear to me which one is more readable, so just keep it as it is.', 'comment_created': datetime.datetime(2022, 6, 12, 3, 44, 34, tzinfo=datetime.timezone.utc), 'commenter': 'certik', 'type': 'User'}, {'comment_id': 895097468, 'comment_body': 'I think the suggested one is more readable, but I feel it is ok.', 'comment_created': datetime.datetime(2022, 6, 12, 4, 23, 26, tzinfo=datetime.timezone.utc), 'commenter': 'Thirumalai-Shaktivel', 'type': 'User'}, {'comment_id': 895106954, 'comment_body': 'We can change it later in another PR.', 'comment_created': datetime.datetime(2022, 6, 12, 5, 32, 26, tzinfo=datetime.timezone.utc), 'commenter': 'certik', 'type': 'User'}, {'comment_id': 895110923, 'comment_body': '> We can change it later in another PR.\r\n\r\n@certik, I also prefer the suggested one. In fact, I tried it first, but the build failed.\r\n\r\nVerbose:\r\n```\r\n❯ lpbuild\r\n+ ci/version.sh\r\n++ git describe --tags --dirty\r\n+ version=v0.2.0-835-g9e3cef7a1-dirty\r\n+ version=0.2.0-835-g9e3cef7a1-dirty\r\n+ echo 0.2.0-835-g9e3cef7a1-dirty\r\n+ python grammar/asdl_py.py\r\nAssuming default values of Python.asdl and python_ast.py\r\n+ python grammar/asdl_cpp.py grammar/Python.asdl src/lpython/python_ast.h\r\n+ python grammar/asdl_cpp.py src/libasr/ASR.asdl src/libasr/asr.h\r\n+ python src/libasr/wasm_instructions_visitor.py\r\nAssuming default values of wasm_instructions.txt and wasm_visitor.h\r\n+ cd src/lpython/parser\r\n+ re2c -W -b tokenizer.re -o tokenizer.cpp\r\n+ cd src/lpython/parser\r\n+ bison -Wall -d -r all parser.yy\r\nparser.yy: error: shift/reduce conflicts: 55 found, 0 expected\r\nparser.yy:248.1-5: warning: useless precedence and associativity for ""is"" [-Wprecedence]\r\n  248 | %left ""=="" ""!="" "">="" "">"" ""<="" ""<"" ""is not"" ""is"" ""not in"" // ""in""\r\n      | ^~~~~\r\n```\r\nWhat can be the possible cause?\r\n\r\n', 'comment_created': datetime.datetime(2022, 6, 12, 5, 42, 6, tzinfo=datetime.timezone.utc), 'commenter': 'akshanshbhatt', 'type': 'User'}, {'comment_id': 895165101, 'comment_body': 'You have to make sure the ""is not"" and others are assigned next to the token definitions. I see ""is not"" is, ""not in"" is, but ""is"" is not. \r\n```diff\r\n--- a/src/lpython/parser/parser.yy\r\n+++ b/src/lpython/parser/parser.yy\r\n@@ -159,7 +159,7 @@ void yyerror(YYLTYPE *yyloc, LFortran::Parser &p, const std::string &msg)\r\n %token KW_IF\r\n %token KW_IMPORT\r\n %token KW_IN\r\n-%token KW_IS\r\n+%token KW_IS ""is""\r\n %token KW_LAMBDA\r\n %token KW_NONE\r\n %token KW_NONLOCAL\r\n```', 'comment_created': datetime.datetime(2022, 6, 12, 12, 13, 12, tzinfo=datetime.timezone.utc), 'commenter': 'certik', 'type': 'User'}, {'comment_id': 895165198, 'comment_body': 'Alternatively, since we do not do this for keywords, just keep `KW_IS`, but use ""is not"" and ""not in"", that should work now.', 'comment_created': datetime.datetime(2022, 6, 12, 12, 13, 55, tzinfo=datetime.timezone.utc), 'commenter': 'certik', 'type': 'User'}]","[{'commit_sha': '010702651e1fe53508667832188c06e5aa1fce8f', 'committer_username': 'akshanshbhatt', 'committer_name': 'akshānsh', 'committer_email': 'info@akshansh.me', 'commit_date': datetime.datetime(2019, 7, 23, 14, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '47dcfb9e51f0451504d85463c21436225b9587e0', 'committer_username': 'akshanshbhatt', 'committer_name': 'akshānsh', 'committer_email': 'info@akshansh.me', 'commit_date': datetime.datetime(2019, 7, 23, 14, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9e3cef7a1edbfabd7eb9d565b2a154949cc50305', 'committer_username': 'akshanshbhatt', 'committer_name': 'akshānsh', 'committer_email': 'info@akshansh.me', 'commit_date': datetime.datetime(2019, 7, 23, 14, 35, 25, tzinfo=datetime.timezone.utc)}]",akshānsh,53227127,info@akshansh.me,User,,18,,21,32
959266467,[Parser] Rules for expressions containing `is` and `is not`,Related Issue: #511,True,557,https://api.github.com/repos/lcompilers/lpython/pulls/557,https://github.com/lcompilers/lpython/pull/557,closed,23,4,5,9,4,10,1,0,[{'name': 'Parser'}],2022-06-06 15:46:49+00:00,2022-06-08 19:02:47+00:00,184558.0,"2 days, 3:15:58","[{'comment_id': 890367359, 'comment_body': 'I had the same problem and was unable to resolve this.\r\ncc @certik \r\nThe problem here was that I didn\'t know how to assign precedence for ""is not"". \r\nWhen we uncomment the above code. We get:\r\n ```console\r\n$ ./build0.sh\r\n+ ci/version.sh\r\n++ git describe --tags --dirty\r\n+ version=v0.2.0-756-g1ae99e23c-dirty\r\n+ version=0.2.0-756-g1ae99e23c-dirty\r\n+ echo 0.2.0-756-g1ae99e23c-dirty\r\n+ python grammar/asdl_py.py\r\nAssuming default values of Python.asdl and python_ast.py\r\n+ python grammar/asdl_cpp.py grammar/Python.asdl src/lpython/python_ast.h\r\n+ python grammar/asdl_cpp.py src/libasr/ASR.asdl src/libasr/asr.h\r\n+ python src/libasr/wasm_instructions_visitor.py\r\nAssuming default values of wasm_instructions.txt and wasm_visitor.h\r\n+ cd src/lpython/parser\r\n+ re2c -W -b tokenizer.re -o tokenizer.cpp\r\n+ cd src/lpython/parser\r\n+ bison -Wall -d -r all parser.yy\r\nparser.yy: error: reduce/reduce conflicts: 27 found, 0 expected\r\n\r\n```', 'comment_created': datetime.datetime(2022, 6, 6, 17, 22, 35, tzinfo=datetime.timezone.utc), 'commenter': 'Thirumalai-Shaktivel', 'type': 'User'}, {'comment_id': 890372127, 'comment_body': 'Consider this example:\r\n```python\r\nif type(x) is not int:\r\n    pass\r\n```\r\nOld_Parser\r\n```console\r\n$ lpython --show-ast examples/expr2.py --indent       \r\n(Module [\r\n   (If \r\n      (Compare \r\n         (Call \r\n            (Name \r\n               type \r\n               Load) [\r\n            (Name \r\n               x \r\n               Load)] []) \r\n         IsNot [            <---\r\n         (Name \r\n            int \r\n            Load)]) [\r\n      (Pass)] [])] [])\r\n```\r\nNew_Parser\r\n```console\r\n$ lpython --show-ast --new-parser examples/expr2.py --indent\r\n(Module [\r\n   (If \r\n      (Compare \r\n         (Call \r\n            (Name \r\n               type \r\n               Load) [\r\n            (Name \r\n               x \r\n               Load)] []) \r\n         Is [\r\n         (UnaryOp      <----\r\n            Not \r\n            (Name \r\n               int \r\n               Load))]) [\r\n      (Pass)] [])] [])\r\n```\r\nThis might be the reason for the conflict.', 'comment_created': datetime.datetime(2022, 6, 6, 17, 28, 15, tzinfo=datetime.timezone.utc), 'commenter': 'Thirumalai-Shaktivel', 'type': 'User'}, {'comment_id': 890381937, 'comment_body': 'I think we might need to parse `is not` as a token in the tokenizer.', 'comment_created': datetime.datetime(2022, 6, 6, 17, 40, 55, tzinfo=datetime.timezone.utc), 'commenter': 'certik', 'type': 'User'}, {'comment_id': 890394819, 'comment_body': 'That works, Thank you.\r\nThe following diff works:\r\n```diff\r\ndiff --git a/src/lpython/parser/parser.yy b/src/lpython/parser/parser.yy\r\nindex f3a7d7797..0954e071b 100644\r\n--- a/src/lpython/parser/parser.yy\r\n+++ b/src/lpython/parser/parser.yy\r\n@@ -131,6 +131,7 @@ void yyerror(YYLTYPE *yyloc, LFortran::Parser &p, const std::string &msg)\r\n %token TK_GT "">""\r\n %token TK_GE "">=""\r\n %token TK_NOT ""not""\r\n+%token TK_IS_NOT ""is not""\r\n %token TK_AND ""and""\r\n %token TK_OR ""or""\r\n %token TK_TRUE ""True""\r\n@@ -243,7 +244,7 @@ void yyerror(YYLTYPE *yyloc, LFortran::Parser &p, const std\r\n::string &msg)\r\n %left ""or""\r\n %left ""and""\r\n %precedence ""not""\r\n-%left ""=="" ""!="" "">="" "">"" ""<="" ""<"" KW_IS //""is not"" ""is"" ""not in"" ""in""\r\n+%left ""=="" ""!="" "">="" "">"" ""<="" ""<"" ""is not"" KW_IS // ""is"" ""not in"" ""in""\r\n %left ""|""\r\n %left ""^""\r\n %left ""&""\r\n@@ -731,7 +732,7 @@ expr\r\n     | expr "">"" expr { $$ = COMPARE($1, Gt, $3, @$); }\r\n     | expr "">="" expr { $$ = COMPARE($1, GtE, $3, @$); }\r\n     | expr KW_IS expr { $$ = COMPARE($1, Is, $3, @$); }\r\n-    /* | expr KW_IS TK_NOT expr { $$ = COMPARE($1, IsNot, $4, @$); } */\r\n+    | expr TK_IS_NOT expr { $$ = COMPARE($1, IsNot, $3, @$); }\r\n \r\n     | expr ""and"" expr { $$ = BOOLOP($1, And, $3, @$); }\r\n     | expr ""or"" expr { $$ = BOOLOP($1, Or, $3, @$); }\r\ndiff --git a/src/lpython/parser/tokenizer.re b/src/lpython/parser/tokenizer.re\r\nindex f2edf0d2d..54449d338 100644\r\n--- a/src/lpython/parser/tokenizer.re\r\n+++ b/src/lpython/parser/tokenizer.re\r\n@@ -426,6 +426,7 @@ int Tokenizer::lex(Allocator &al, YYSTYPE &yylval, Location\r\n &loc, diag::Diagnost\r\n             \'not\'  { RET(TK_NOT) }\r\n             \'and\'  { RET(TK_AND) }\r\n             \'or\'   { RET(TK_OR) }\r\n+            \'is\' whitespace \'not\'  { RET(TK_IS_NOT) }\r\n```', 'comment_created': datetime.datetime(2022, 6, 6, 17, 55, 33, tzinfo=datetime.timezone.utc), 'commenter': 'Thirumalai-Shaktivel', 'type': 'User'}, {'comment_id': 890396572, 'comment_body': '@akshanshbhatt Apply the above diff. It should work.', 'comment_created': datetime.datetime(2022, 6, 6, 17, 56, 50, tzinfo=datetime.timezone.utc), 'commenter': 'Thirumalai-Shaktivel', 'type': 'User'}, {'comment_id': 890805118, 'comment_body': '> I think we might need to parse `is not` as a token in the tokenizer.\r\n\r\nThis is exactly was I was going to suggest. Will implement it ASAP!', 'comment_created': datetime.datetime(2022, 6, 7, 6, 17, 57, tzinfo=datetime.timezone.utc), 'commenter': 'akshanshbhatt', 'type': 'User'}, {'comment_id': 891086295, 'comment_body': 'I think instead of using whitespace; we should use something generic.\r\n\r\nHere is the issue with using whitespace -\r\n\r\n```\r\n❯ cat examples/test1.py\r\nx = 10\r\nif x is \\\r\n    not type(int):\r\n    pass\r\n```\r\nOld Parser\r\n```\r\n❯ lpyast examples/test1.py --indent\r\n(Module [\r\n   (Assign [\r\n      (Name\r\n         x\r\n         Store)]\r\n      (ConstantInt 10 ()) ())\r\n   (If\r\n      (Compare\r\n         (Name\r\n            x\r\n            Load)\r\n         IsNot [\r\n         (Call\r\n            (Name\r\n               type\r\n               Load) [\r\n            (Name\r\n               int\r\n               Load)] [])]) [\r\n      (Pass)] [])] [])\r\n```\r\nNew Parser\r\n```\r\n❯ lpynewpar examples/test1.py --indent\r\n(Module [\r\n   (Assign [\r\n      (Name\r\n         x\r\n         Store)]\r\n      (ConstantInt 10 ()) ())\r\n   (If\r\n      (Compare\r\n         (Name\r\n            x\r\n            Load)\r\n         Is [\r\n         (UnaryOp\r\n            Not\r\n            (Call\r\n               (Name\r\n                  type\r\n                  Load) [\r\n               (Name\r\n                  int\r\n                  Load)] []))]) [\r\n      (Pass)] [])] [])\r\n```\r\nDiff\r\n```diff\r\n❯ diff old.txt new.txt\r\n12,19c12,21\r\n<          IsNot [\r\n<          (Call\r\n<             (Name\r\n<                type\r\n<                Load) [\r\n<             (Name\r\n<                int\r\n<                Load)] [])]) [\r\n---\r\n>          Is [\r\n>          (UnaryOp\r\n>             Not\r\n>             (Call\r\n>                (Name\r\n>                   type\r\n>                   Load) [\r\n>                (Name\r\n>                   int\r\n>                   Load)] []))]) [\r\n```', 'comment_created': datetime.datetime(2022, 6, 7, 11, 12, 21, tzinfo=datetime.timezone.utc), 'commenter': 'akshanshbhatt', 'type': 'User'}, {'comment_id': 891280357, 'comment_body': 'Yup, We have to do it. But, for now we can do something like this:\r\n```diff\r\ndiff --git a/src/lpython/parser/tokenizer.re b/src/lpython/parser/tokenizer.\r\nre\r\nindex 54449d338..bda807106 100644\r\n--- a/src/lpython/parser/tokenizer.re\r\n+++ b/src/lpython/parser/tokenizer.re\r\n@@ -427,6 +426,9 @@ int Tokenizer::lex(Allocator &al, YYSTYPE &yylval, Location &loc, diag::Diagnost\r\n             \'and\'  { RET(TK_AND) }\r\n             \'or\'   { RET(TK_OR) }\r\n             \'is\' whitespace \'not\'  { RET(TK_IS_NOT) }\r\n+            \'is\' whitespace? ""\\\\"" newline whitespace? \'not\'  { RET(TK_IS_NOT) }\r\n \r\n             // True/False\r\n```\r\n@certik, what are your thoughts? ', 'comment_created': datetime.datetime(2022, 6, 7, 14, 7, tzinfo=datetime.timezone.utc), 'commenter': 'Thirumalai-Shaktivel', 'type': 'User'}, {'comment_id': 891852916, 'comment_body': ""I would start with your latest diff, add tests. That should cover 99% of cases. Then later we can revisit this. For example, once we can parse all of Python, we can see if there is a way to parse this in Bison. It's too early now, as we will be adding more rules, and so it's safer to do it from the tokenizer. We can also later investigate if there is a way to make this 100% robust in the tokenizer."", 'comment_created': datetime.datetime(2022, 6, 8, 2, 14, 7, tzinfo=datetime.timezone.utc), 'commenter': 'certik', 'type': 'User'}, {'comment_id': 892391813, 'comment_body': '```suggestion\r\n%left ""=="" ""!="" "">="" "">"" ""<="" ""<"" TK_IS_NOT KW_IS // ""not in"" ""in""\r\n```', 'comment_created': datetime.datetime(2022, 6, 8, 13, 40, 58, tzinfo=datetime.timezone.utc), 'commenter': 'Thirumalai-Shaktivel', 'type': 'User'}]","[{'commit_sha': '58abb6e27c892b04aaa1681446e82b8b7ff959bb', 'committer_username': 'akshanshbhatt', 'committer_name': 'akshānsh', 'committer_email': 'info@akshansh.me', 'commit_date': datetime.datetime(2019, 7, 23, 14, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1ae99e23c896aed3fd4f591344124aca737a8717', 'committer_username': 'akshanshbhatt', 'committer_name': 'akshānsh', 'committer_email': 'info@akshansh.me', 'commit_date': datetime.datetime(2019, 7, 23, 14, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '55d0388da8beb2a7dc0ff7340f8a7ce71786ae35', 'committer_username': 'akshanshbhatt', 'committer_name': 'akshānsh', 'committer_email': 'info@akshansh.me', 'commit_date': datetime.datetime(2019, 7, 23, 14, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f3a8e21bbb68e92ee95fada941990804fda25147', 'committer_username': 'akshanshbhatt', 'committer_name': 'akshānsh', 'committer_email': 'info@akshansh.me', 'commit_date': datetime.datetime(2019, 7, 23, 14, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd7669a8d9b379c352edc29ab092732a0ba6417dc', 'committer_username': 'akshanshbhatt', 'committer_name': 'akshānsh', 'committer_email': 'info@akshansh.me', 'commit_date': datetime.datetime(2019, 7, 23, 14, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4f50dc9956665a459164aaeafe61426bb3a69327', 'committer_username': 'akshanshbhatt', 'committer_name': 'akshānsh', 'committer_email': 'info@akshansh.me', 'commit_date': datetime.datetime(2019, 7, 23, 14, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '061a65a07434d3709299de5cc50d605190838ccd', 'committer_username': 'akshanshbhatt', 'committer_name': 'akshānsh', 'committer_email': 'info@akshansh.me', 'commit_date': datetime.datetime(2019, 7, 23, 14, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e9756a2493394807470e123b64a56fc8376a87df', 'committer_username': 'akshanshbhatt', 'committer_name': 'akshānsh', 'committer_email': 'info@akshansh.me', 'commit_date': datetime.datetime(2019, 7, 23, 14, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '64f84f0061e6d73b80cf6a449a7a0cbb82ad93f8', 'committer_username': 'akshanshbhatt', 'committer_name': 'akshānsh', 'committer_email': 'info@akshansh.me', 'commit_date': datetime.datetime(2019, 7, 23, 14, 35, 25, tzinfo=datetime.timezone.utc)}]",akshānsh,53227127,info@akshansh.me,User,,18,,21,32
950277572,[Parser] Parsing rules for `...` and `None`,Closes #510,True,538,https://api.github.com/repos/lcompilers/lpython/pulls/538,https://github.com/lcompilers/lpython/pull/538,closed,59,0,6,1,0,0,0,0,[],2022-05-29 14:32:34+00:00,2022-05-30 02:25:10+00:00,42756.0,11:52:36,[],"[{'commit_sha': 'fa455430774939321666d6ed6f0ad3879a70f85c', 'committer_username': 'akshanshbhatt', 'committer_name': 'akshānsh', 'committer_email': 'info@akshansh.me', 'commit_date': datetime.datetime(2019, 7, 23, 14, 35, 25, tzinfo=datetime.timezone.utc)}]",akshānsh,53227127,info@akshansh.me,User,,18,,21,32
915253317,[Parser] Implement single line `if` statement,"```
❯ lpynewpar examples/test_1.py  # New parser
(Module [(AnnAssign (Name i Store) (Name i32 Load) (ConstantInt 4 ()) 1) (If (Compare (ConstantInt 2 ()) Gt [(Name i Load)]) [(Break)] [])] [])
❯ lpyast examples/test_1.py  # Existing Parser
(Module [(AnnAssign (Name i Store) (Name i32 Load) (ConstantInt 4 ()) 1) (If (Compare (ConstantInt 2 ()) Gt [(Name i Load)]) [(Break)] [])] [])
```

Both the parsers produce identical results.",True,406,https://api.github.com/repos/lcompilers/lpython/pulls/406,https://github.com/lcompilers/lpython/pull/406,closed,23,3,5,4,1,2,1,0,[{'name': 'Parser'}],2022-04-21 11:45:26+00:00,2022-04-21 21:01:24+00:00,33358.0,9:15:58,"[{'comment_id': 855153943, 'comment_body': '```suggestion\r\n        /*body*/ STMTS(A2LIST(p.m_a, body)), \\\r\n```\r\nHere `A2LIST`, takes `ast_t*` as a parameter, creates a Vector of size `one`, and returns it. Then we use `STMTS` (which down-casts Vector to stmt_t)', 'comment_created': datetime.datetime(2022, 4, 21, 12, 54, 46, tzinfo=datetime.timezone.utc), 'commenter': 'Thirumalai-Shaktivel', 'type': 'User'}, {'comment_id': 855155224, 'comment_body': 'Yup, this is another way to do it, but we already have a function that does the same job!', 'comment_created': datetime.datetime(2022, 4, 21, 12, 56, 8, tzinfo=datetime.timezone.utc), 'commenter': 'Thirumalai-Shaktivel', 'type': 'User'}]","[{'commit_sha': 'b3e0e95c0036dbf1e3ab8e34fcd1c0d34a8a77b4', 'committer_username': 'akshanshbhatt', 'committer_name': 'akshānsh', 'committer_email': 'info@akshansh.me', 'commit_date': datetime.datetime(2019, 7, 23, 14, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5bd5dca1a5ee73cad5eda616adf3f40650296e18', 'committer_username': 'akshanshbhatt', 'committer_name': 'akshānsh', 'committer_email': 'info@akshansh.me', 'commit_date': datetime.datetime(2019, 7, 23, 14, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '17854064d3665cc12056dc3d0c6988915bc8427d', 'committer_username': 'akshanshbhatt', 'committer_name': 'akshānsh', 'committer_email': 'info@akshansh.me', 'commit_date': datetime.datetime(2019, 7, 23, 14, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '09e33debd8127b98714bcb0d2ff9a414ebe14374', 'committer_username': 'certik', 'committer_name': 'Ondřej Čertík', 'committer_email': 'ondrej@certik.us', 'commit_date': datetime.datetime(2008, 8, 13, 18, 39, 11, tzinfo=datetime.timezone.utc)}]",akshānsh,53227127,info@akshansh.me,User,,18,,21,32
913269286,[Parser] Implement parsing rules for functions,"```
❯ cat examples/test_1.py
def main0():
    x: i32
    x = 5
    print(x)

❯ src/bin/lpython --show-ast --new-parser examples/test_1.py
syntax error: Token 'def' is unexpected here
 --> examples/test_1.py:1:1
  |
1 | def main0():
  | ^^^


Note: if any of the above error or warning messages are not clear or are lacking
context please report it to us (we consider that a bug that needs to be fixed).
```

The new parser has not (yet) implemented the rules for function headers. I tried implementing it but got build errors -

```
❯ ./build0.sh
+ ci/version.sh
++ git describe --tags --dirty
+ version=v0.2.0-282-ga63bdc777-dirty
+ version=0.2.0-282-ga63bdc777-dirty
+ echo 0.2.0-282-ga63bdc777-dirty
+ python grammar/asdl_py.py
Assuming default values of Python.asdl and python_ast.py
+ python grammar/asdl_cpp.py grammar/Python.asdl src/lpython/python_ast.h
+ python grammar/asdl_cpp.py src/libasr/ASR.asdl src/libasr/asr.h
+ cd src/lpython/parser
+ re2c -W -b tokenizer.re -o tokenizer.cpp
+ cd src/lpython/parser
+ bison -Wall -d -r all parser.yy
parser.yy: error: shift/reduce conflicts: 1 found, 0 expected
```
or segmentation faults (in case it did compile) - 

```
❯ ./src/bin/lpython --show-ast --new-parser examples/expr2.py
Traceback (most recent call last):
  File ""/Users/akshansh/Documents/GitHub/lpython/src/bin/lpython.cpp"", line 752
    return emit_ast(arg_file, runtime_library_dir, compiler_options);
  File ""/Users/akshansh/Documents/GitHub/lpython/src/bin/lpython.cpp"", line 122
    al, runtime_library_dir, infile, diagnostics, compiler_options.new_parser);
  File ""/Users/akshansh/Documents/GitHub/lpython/src/lpython/parser/parser.cpp"", line 95
    Result<LPython::AST::Module_t*> res = parse(al, input, diagnostics);
  File ""/Users/akshansh/Documents/GitHub/lpython/src/lpython/parser/parser.cpp"", line 18
    Parser p(al, diagnostics);
  File ""/Users/akshansh/Documents/GitHub/lpython/src/lpython/parser/parser.cpp"", line 51
    m_tokenizer.set_string(inp);
  File ""parser.tab.cc"", line 1726
  File ""/Users/akshansh/Documents/GitHub/lpython/src/lpython/python_ast.h"", line 40
    LFORTRAN_ASSERT(is_a<T>(*f));
  Binary file ""/usr/lib/system/libsystem_platform.dylib"", local address: 0x1803414c3
Segfault: Signal SIGSEGV (segmentation fault) received
```

For now, I have commented out the template code. @Thirumalai-Shaktivel, can you please guide me?",False,400,https://api.github.com/repos/lcompilers/lpython/pulls/400,https://github.com/lcompilers/lpython/pull/400,closed,0,0,0,0,12,1,1,0,[{'name': 'Parser'}],2022-04-19 15:38:10+00:00,2022-05-07 14:49:35+00:00,1552285.0,"17 days, 23:11:25","[{'comment_id': 853930680, 'comment_body': 'We will Define the grammar step by step. So at first, we will parse\r\n```python\r\ndef main():\r\n\tprint()\r\n```\r\nHere `def` is `KW_DEF` (which is a keyword)\r\n`main` is `TK_NAME` ie., `id` (identifier)\r\nafter `:` there is a new line we can use `sep`\r\n`print()` appears in statement\r\nThere is an one `INDENT` and `DEDENT`\r\nBy integrating we get:\r\n```c++\r\nfunction_def\r\n    : KW_DEF id ""("" "")"" "":"" sep TK_INDENT statement TK_DEDENT {  }\r\n```', 'comment_created': datetime.datetime(2022, 4, 20, 9, 33, 3, tzinfo=datetime.timezone.utc), 'commenter': 'Thirumalai-Shaktivel', 'type': 'User'}]",[],akshānsh,53227127,info@akshansh.me,User,,18,,21,32
908133342,Fix the `dedent` token generation in new tokenizer,"The tokenizer was throwing an error when the last line of the source code was dedented by one level less than the previous level. I debugged and fixed it.

Closes #358 ",True,363,https://api.github.com/repos/lcompilers/lpython/pulls/363,https://github.com/lcompilers/lpython/pull/363,closed,53,3,5,4,2,2,0,0,[],2022-04-12 20:35:59+00:00,2022-04-13 21:44:49+00:00,90530.0,"1 day, 1:08:50","[{'comment_id': 849016337, 'comment_body': '```suggestion\r\n        if((long int)indent_length.back() != last_indent_length) {\r\n```', 'comment_created': datetime.datetime(2022, 4, 13, 2, 29, 49, tzinfo=datetime.timezone.utc), 'commenter': 'Thirumalai-Shaktivel', 'type': 'User'}, {'comment_id': 849016753, 'comment_body': 'Also, Remove `long int sum = 0;`.', 'comment_created': datetime.datetime(2022, 4, 13, 2, 30, 35, tzinfo=datetime.timezone.utc), 'commenter': 'Thirumalai-Shaktivel', 'type': 'User'}]","[{'commit_sha': '4f2544951585a322076f324f4d41bd39c35e96fe', 'committer_username': 'akshanshbhatt', 'committer_name': 'akshānsh', 'committer_email': 'info@akshansh.me', 'commit_date': datetime.datetime(2019, 7, 23, 14, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2be94f305e8e21fb633344d601338700032d8872', 'committer_username': 'akshanshbhatt', 'committer_name': 'akshānsh', 'committer_email': 'info@akshansh.me', 'commit_date': datetime.datetime(2019, 7, 23, 14, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '57e946eb31dd7a9f9097a93348b60f18ac5b8f89', 'committer_username': 'akshanshbhatt', 'committer_name': 'akshānsh', 'committer_email': 'info@akshansh.me', 'commit_date': datetime.datetime(2019, 7, 23, 14, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '455d57e0cb6ab2114fd655c07b7920e35ffe5cea', 'committer_username': 'akshanshbhatt', 'committer_name': 'akshānsh', 'committer_email': 'info@akshansh.me', 'commit_date': datetime.datetime(2019, 7, 23, 14, 35, 25, tzinfo=datetime.timezone.utc)}]",akshānsh,53227127,info@akshansh.me,User,,18,,21,32

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
442864346,lpython,lcompilers/lpython,C++,157,1493,34,78,14458,568,3,79,"[{'id': 1197594348, 'number': 1427, 'closed': datetime.datetime(2023, 1, 14, 21, 57, 42, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 1, 14, 15, 20, 37, tzinfo=datetime.timezone.utc), 'time_taken': 23825.0, 'time_delta': '6:37:05', 'additions': 177, 'deletions': 174, 'state': 'closed'}, {'id': 1120439630, 'number': 1293, 'closed': None, 'created': datetime.datetime(2022, 11, 13, 17, 26, 4, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 167, 'deletions': 155, 'state': 'open'}, {'id': 1084781676, 'number': 1194, 'closed': datetime.datetime(2022, 11, 5, 11, 59, 20, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 10, 12, 14, 25, 45, tzinfo=datetime.timezone.utc), 'time_taken': 2064815.0, 'time_delta': '23 days, 21:33:35', 'additions': 98, 'deletions': 4, 'state': 'closed'}, {'id': 1059310267, 'number': 1121, 'closed': datetime.datetime(2022, 9, 17, 12, 9, 51, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 9, 17, 11, 44, 48, tzinfo=datetime.timezone.utc), 'time_taken': 1503.0, 'time_delta': '0:25:03', 'additions': 28, 'deletions': 10, 'state': 'closed'}, {'id': 1059307399, 'number': 1120, 'closed': datetime.datetime(2022, 9, 17, 11, 45, 9, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 9, 17, 11, 25, 48, tzinfo=datetime.timezone.utc), 'time_taken': 1161.0, 'time_delta': '0:19:21', 'additions': 6, 'deletions': 3, 'state': 'closed'}, {'id': 1045503484, 'number': 1078, 'closed': datetime.datetime(2022, 9, 3, 15, 56, 51, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 9, 3, 15, 38, 44, tzinfo=datetime.timezone.utc), 'time_taken': 1087.0, 'time_delta': '0:18:07', 'additions': 49, 'deletions': 13, 'state': 'closed'}, {'id': 1042336644, 'number': 1070, 'closed': datetime.datetime(2022, 9, 1, 3, 48, 31, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 31, 12, 34, 7, tzinfo=datetime.timezone.utc), 'time_taken': 54864.0, 'time_delta': '15:14:24', 'additions': 86, 'deletions': 12, 'state': 'closed'}, {'id': 1042281041, 'number': 1068, 'closed': datetime.datetime(2022, 8, 31, 11, 57, 9, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 31, 11, 38, 2, tzinfo=datetime.timezone.utc), 'time_taken': 1147.0, 'time_delta': '0:19:07', 'additions': 16, 'deletions': 5, 'state': 'closed'}, {'id': 1038859013, 'number': 1053, 'closed': datetime.datetime(2022, 8, 29, 12, 36, 39, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 28, 11, 46, 1, tzinfo=datetime.timezone.utc), 'time_taken': 89438.0, 'time_delta': '1 day, 0:50:38', 'additions': 8, 'deletions': 3, 'state': 'closed'}, {'id': 1038849281, 'number': 1052, 'closed': datetime.datetime(2022, 8, 29, 12, 36, 50, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 28, 10, 52, 24, tzinfo=datetime.timezone.utc), 'time_taken': 92666.0, 'time_delta': '1 day, 1:44:26', 'additions': 9, 'deletions': 3, 'state': 'closed'}, {'id': 1038679369, 'number': 1050, 'closed': datetime.datetime(2022, 8, 27, 19, 24, 29, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 27, 17, 50, 52, tzinfo=datetime.timezone.utc), 'time_taken': 5617.0, 'time_delta': '1:33:37', 'additions': 16, 'deletions': 4, 'state': 'closed'}, {'id': 1031342561, 'number': 995, 'closed': datetime.datetime(2022, 8, 19, 16, 50, 4, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 19, 16, 14, 52, tzinfo=datetime.timezone.utc), 'time_taken': 2112.0, 'time_delta': '0:35:12', 'additions': 10, 'deletions': 3, 'state': 'closed'}, {'id': 1031293063, 'number': 994, 'closed': datetime.datetime(2022, 8, 19, 16, 50, 30, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 19, 15, 25, 5, tzinfo=datetime.timezone.utc), 'time_taken': 5125.0, 'time_delta': '1:25:25', 'additions': 24, 'deletions': 3, 'state': 'closed'}, {'id': 1031260364, 'number': 993, 'closed': datetime.datetime(2022, 8, 19, 17, 1, 43, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 19, 14, 51, 2, tzinfo=datetime.timezone.utc), 'time_taken': 7841.0, 'time_delta': '2:10:41', 'additions': 17, 'deletions': 10, 'state': 'closed'}, {'id': 1027617836, 'number': 979, 'closed': datetime.datetime(2022, 8, 16, 14, 15, 39, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 16, 13, 20, 4, tzinfo=datetime.timezone.utc), 'time_taken': 3335.0, 'time_delta': '0:55:35', 'additions': 71, 'deletions': 29, 'state': 'closed'}, {'id': 1026599321, 'number': 976, 'closed': datetime.datetime(2022, 8, 15, 16, 1, 57, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 15, 15, 45, 41, tzinfo=datetime.timezone.utc), 'time_taken': 976.0, 'time_delta': '0:16:16', 'additions': 11, 'deletions': 6, 'state': 'closed'}, {'id': 1021853617, 'number': 951, 'closed': datetime.datetime(2022, 8, 9, 19, 35, 20, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 9, 18, 37, 49, tzinfo=datetime.timezone.utc), 'time_taken': 3451.0, 'time_delta': '0:57:31', 'additions': 34, 'deletions': 1, 'state': 'closed'}, {'id': 1021663633, 'number': 948, 'closed': datetime.datetime(2022, 8, 9, 19, 41, 54, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 9, 15, 22, 38, tzinfo=datetime.timezone.utc), 'time_taken': 15556.0, 'time_delta': '4:19:16', 'additions': 37, 'deletions': 2, 'state': 'closed'}, {'id': 1018468411, 'number': 905, 'closed': datetime.datetime(2022, 8, 5, 10, 0, 58, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 5, 9, 35, 39, tzinfo=datetime.timezone.utc), 'time_taken': 1519.0, 'time_delta': '0:25:19', 'additions': 8, 'deletions': 3, 'state': 'closed'}, {'id': 1018431691, 'number': 902, 'closed': datetime.datetime(2022, 8, 5, 9, 23, 2, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 5, 8, 58, 47, tzinfo=datetime.timezone.utc), 'time_taken': 1455.0, 'time_delta': '0:24:15', 'additions': 140, 'deletions': 44, 'state': 'closed'}, {'id': 1017913842, 'number': 899, 'closed': datetime.datetime(2022, 8, 5, 4, 13, 45, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 4, 18, 52, 8, tzinfo=datetime.timezone.utc), 'time_taken': 33697.0, 'time_delta': '9:21:37', 'additions': 174, 'deletions': 95, 'state': 'closed'}, {'id': 1017208056, 'number': 885, 'closed': datetime.datetime(2022, 8, 4, 8, 45, 5, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 4, 8, 24, 7, tzinfo=datetime.timezone.utc), 'time_taken': 1258.0, 'time_delta': '0:20:58', 'additions': 10, 'deletions': 3, 'state': 'closed'}, {'id': 1012567989, 'number': 850, 'closed': datetime.datetime(2022, 7, 31, 6, 18, 13, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 30, 7, 42, 3, tzinfo=datetime.timezone.utc), 'time_taken': 81370.0, 'time_delta': '22:36:10', 'additions': 57, 'deletions': 14, 'state': 'closed'}, {'id': 1012125519, 'number': 848, 'closed': datetime.datetime(2022, 7, 29, 16, 2, 12, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 29, 15, 43, 39, tzinfo=datetime.timezone.utc), 'time_taken': 1113.0, 'time_delta': '0:18:33', 'additions': 10, 'deletions': 11, 'state': 'closed'}, {'id': 1012099084, 'number': 847, 'closed': datetime.datetime(2022, 7, 29, 15, 42, 53, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 29, 15, 27, 17, tzinfo=datetime.timezone.utc), 'time_taken': 936.0, 'time_delta': '0:15:36', 'additions': 43, 'deletions': 7, 'state': 'closed'}, {'id': 1011636138, 'number': 845, 'closed': datetime.datetime(2022, 7, 29, 9, 7, 41, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 29, 7, 17, 20, tzinfo=datetime.timezone.utc), 'time_taken': 6621.0, 'time_delta': '1:50:21', 'additions': 44, 'deletions': 3, 'state': 'closed'}, {'id': 1010006812, 'number': 830, 'closed': datetime.datetime(2022, 7, 27, 20, 32, 12, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 27, 18, 37, 24, tzinfo=datetime.timezone.utc), 'time_taken': 6888.0, 'time_delta': '1:54:48', 'additions': 30, 'deletions': 0, 'state': 'closed'}, {'id': 1005950776, 'number': 810, 'closed': datetime.datetime(2022, 7, 23, 5, 7, 20, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 22, 16, 4, 19, tzinfo=datetime.timezone.utc), 'time_taken': 46981.0, 'time_delta': '13:03:01', 'additions': 61, 'deletions': 1, 'state': 'closed'}, {'id': 1005922594, 'number': 809, 'closed': datetime.datetime(2022, 7, 23, 5, 7, 57, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 22, 15, 34, 1, tzinfo=datetime.timezone.utc), 'time_taken': 48836.0, 'time_delta': '13:33:56', 'additions': 41, 'deletions': 13, 'state': 'closed'}, {'id': 1005887638, 'number': 808, 'closed': datetime.datetime(2022, 7, 23, 5, 54, 49, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 22, 14, 57, 21, tzinfo=datetime.timezone.utc), 'time_taken': 53848.0, 'time_delta': '14:57:28', 'additions': 43, 'deletions': 6, 'state': 'closed'}, {'id': 1002808315, 'number': 801, 'closed': datetime.datetime(2022, 7, 21, 3, 44, 26, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 20, 19, 26, 20, tzinfo=datetime.timezone.utc), 'time_taken': 29886.0, 'time_delta': '8:18:06', 'additions': 68, 'deletions': 0, 'state': 'closed'}, {'id': 992272526, 'number': 751, 'closed': datetime.datetime(2022, 7, 9, 21, 3, 45, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 9, 17, 8, 23, tzinfo=datetime.timezone.utc), 'time_taken': 14122.0, 'time_delta': '3:55:22', 'additions': 14, 'deletions': 3, 'state': 'closed'}, {'id': 986656652, 'number': 734, 'closed': datetime.datetime(2022, 7, 11, 15, 56, 26, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 4, 16, 41, 49, tzinfo=datetime.timezone.utc), 'time_taken': 602077.0, 'time_delta': '6 days, 23:14:37', 'additions': 15, 'deletions': 3, 'state': 'closed'}, {'id': 985531942, 'number': 724, 'closed': datetime.datetime(2022, 7, 12, 19, 40, 30, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 2, 14, 8, 24, tzinfo=datetime.timezone.utc), 'time_taken': 883926.0, 'time_delta': '10 days, 5:32:06', 'additions': 61, 'deletions': 6, 'state': 'closed'}, {'id': 981744951, 'number': 709, 'closed': datetime.datetime(2022, 6, 29, 9, 2, 1, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 6, 28, 18, 29, 57, tzinfo=datetime.timezone.utc), 'time_taken': 52324.0, 'time_delta': '14:32:04', 'additions': 38, 'deletions': 12, 'state': 'closed'}, {'id': 978535607, 'number': 686, 'closed': datetime.datetime(2022, 6, 27, 18, 59, 21, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 6, 24, 17, 3, 32, tzinfo=datetime.timezone.utc), 'time_taken': 266149.0, 'time_delta': '3 days, 1:55:49', 'additions': 80, 'deletions': 0, 'state': 'closed'}, {'id': 977348560, 'number': 682, 'closed': datetime.datetime(2022, 6, 24, 1, 59, 58, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 6, 23, 15, 49, 18, tzinfo=datetime.timezone.utc), 'time_taken': 36640.0, 'time_delta': '10:10:40', 'additions': 23, 'deletions': 3, 'state': 'closed'}, {'id': 970857825, 'number': 624, 'closed': datetime.datetime(2022, 6, 20, 6, 31, 58, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 6, 17, 17, 33, 36, tzinfo=datetime.timezone.utc), 'time_taken': 219502.0, 'time_delta': '2 days, 12:58:22', 'additions': 79, 'deletions': 0, 'state': 'closed'}, {'id': 969653893, 'number': 619, 'closed': datetime.datetime(2022, 6, 17, 3, 40, 33, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 6, 16, 18, 25, 52, tzinfo=datetime.timezone.utc), 'time_taken': 33281.0, 'time_delta': '9:14:41', 'additions': 228, 'deletions': 15, 'state': 'closed'}, {'id': 964815161, 'number': 578, 'closed': datetime.datetime(2022, 6, 12, 3, 45, 54, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 6, 11, 18, 22, 17, tzinfo=datetime.timezone.utc), 'time_taken': 33817.0, 'time_delta': '9:23:37', 'additions': 19, 'deletions': 4, 'state': 'closed'}, {'id': 959266467, 'number': 557, 'closed': datetime.datetime(2022, 6, 8, 19, 2, 47, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 6, 6, 15, 46, 49, tzinfo=datetime.timezone.utc), 'time_taken': 184558.0, 'time_delta': '2 days, 3:15:58', 'additions': 23, 'deletions': 4, 'state': 'closed'}, {'id': 950277572, 'number': 538, 'closed': datetime.datetime(2022, 5, 30, 2, 25, 10, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 5, 29, 14, 32, 34, tzinfo=datetime.timezone.utc), 'time_taken': 42756.0, 'time_delta': '11:52:36', 'additions': 59, 'deletions': 0, 'state': 'closed'}, {'id': 915253317, 'number': 406, 'closed': datetime.datetime(2022, 4, 21, 21, 1, 24, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 4, 21, 11, 45, 26, tzinfo=datetime.timezone.utc), 'time_taken': 33358.0, 'time_delta': '9:15:58', 'additions': 23, 'deletions': 3, 'state': 'closed'}, {'id': 913269286, 'number': 400, 'closed': datetime.datetime(2022, 5, 7, 14, 49, 35, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 4, 19, 15, 38, 10, tzinfo=datetime.timezone.utc), 'time_taken': 1552285.0, 'time_delta': '17 days, 23:11:25', 'additions': 0, 'deletions': 0, 'state': 'closed'}, {'id': 908133342, 'number': 363, 'closed': datetime.datetime(2022, 4, 13, 21, 44, 49, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 4, 12, 20, 35, 59, tzinfo=datetime.timezone.utc), 'time_taken': 90530.0, 'time_delta': '1 day, 1:08:50', 'additions': 53, 'deletions': 3, 'state': 'closed'}, {'id': 905325963, 'number': 353, 'closed': datetime.datetime(2022, 4, 11, 5, 47, 5, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 4, 10, 20, 43, 42, tzinfo=datetime.timezone.utc), 'time_taken': 32603.0, 'time_delta': '9:03:23', 'additions': 17, 'deletions': 2, 'state': 'closed'}, {'id': 882427094, 'number': 245, 'closed': datetime.datetime(2022, 3, 17, 18, 37, 31, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 3, 17, 12, 42, 18, tzinfo=datetime.timezone.utc), 'time_taken': 21313.0, 'time_delta': '5:55:13', 'additions': 6, 'deletions': 6, 'state': 'closed'}]"
