pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
431775723,chore: Initial project setup,"The following are added: 
- eslint
- prettier
- babel (for supporting es6 module in jest)
- jest
- travis CI & coveralls 


",True,1,https://api.github.com/repos/mozilla/extension-activity-monitor/pulls/1,https://github.com/mozilla/extension-activity-monitor/pull/1,closed,7044,1,20,1,5,6,0,0,[],2020-06-09 12:58:03+00:00,2020-06-10 09:56:01+00:00,75478.0,20:57:58,"[{'comment_id': 437394169, 'comment_body': 'I am not sure about it. Need your suggestion.', 'comment_created': datetime.datetime(2020, 6, 9, 13, 0, 6, tzinfo=datetime.timezone.utc), 'commenter': 'atiqueahmedziad', 'type': 'User'}, {'comment_id': 437396588, 'comment_body': 'How do we setup notification? Need suggestion here.', 'comment_created': datetime.datetime(2020, 6, 9, 13, 2, 37, tzinfo=datetime.timezone.utc), 'commenter': 'atiqueahmedziad', 'type': 'User'}, {'comment_id': 437408391, 'comment_body': 'I think we could set the author property of the package.json file to ""Mozilla Add-ons Team"", [as in the addons-linter repo](https://github.com/mozilla/addons-linter/blob/713cddc11ce64f9177040acb5f77f39176cb07ee/package.json#L35).\r\n\r\nWe could also use the same string for the author property in the manifest.json file.', 'comment_created': datetime.datetime(2020, 6, 9, 13, 16, 57, tzinfo=datetime.timezone.utc), 'commenter': 'rpl', 'type': 'User'}, {'comment_id': 437408609, 'comment_body': 'typo: acitivty => activity', 'comment_created': datetime.datetime(2020, 6, 9, 13, 17, 18, tzinfo=datetime.timezone.utc), 'commenter': 'rpl', 'type': 'User'}, {'comment_id': 437414323, 'comment_body': ""For the addons-linter the travis notifications are being sent to slack, on web-ext the travis notification are still configured to go to irc (which we don't use anymore, and so it is kind of /dev/null :-P).\r\n\r\nPersonally I think that we can leave the travis notification disabled (at least for now)."", 'comment_created': datetime.datetime(2020, 6, 9, 13, 25, 34, tzinfo=datetime.timezone.utc), 'commenter': 'rpl', 'type': 'User'}, {'comment_id': 437706152, 'comment_body': 'To use ES6 modules in a background page we will have to use `background.page` instead of `background.scripts` in the manifest.json file and define a background HTML page and then load the scripts into it as ES6 modules [using script tags with type ""module""].', 'comment_created': datetime.datetime(2020, 6, 9, 20, 43, 30, tzinfo=datetime.timezone.utc), 'commenter': 'rpl', 'type': 'User'}]","[{'commit_sha': '2dfe3d3339cb8686978ae906c7e0ea7716cc5d66', 'committer_username': 'atiqueahmedziad', 'committer_name': 'Atique Ahmed Ziad', 'committer_email': None, 'commit_date': datetime.datetime(2014, 8, 5, 15, 37, 42, tzinfo=datetime.timezone.utc)}]",Atique Ahmed Ziad,8364578,,User,,72,,3,42
432603753,feat: save and load module added,"The functionalities to load logs file (json format) and save log file are added. 
",True,2,https://api.github.com/repos/mozilla/extension-activity-monitor/pulls/2,https://github.com/mozilla/extension-activity-monitor/pull/2,closed,326,145,7,1,5,40,0,0,[],2020-06-10 17:37:01+00:00,2020-06-19 20:01:11+00:00,786250.0,"9 days, 2:24:10","[{'comment_id': 438678090, 'comment_body': ""@atiqueahmedziad Why are we using a setTimeout here? once we receive the onChanged event for the completed download can't we just immediately revoke that blob url?"", 'comment_created': datetime.datetime(2020, 6, 11, 10, 3, 26, tzinfo=datetime.timezone.utc), 'commenter': 'rpl', 'type': 'User'}, {'comment_id': 438680415, 'comment_body': '[`downloads.download` calls should resolve to a download id](https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/API/downloads/download#Return_value), I think that we may want to use that download id to be sure that the onChanged events are actually related to the download triggered by this downloads.download API call.\r\n\r\nAlso, based on the docs, there is a chance that downloads.download may reject because the download has been immediately interrupted, and in that case we may want to do some cleanup (e.g. remove the onChanged listener and clear the blob url) and report the error to the caller.\r\n\r\nare there other error scenarios that we may need to take into account?', 'comment_created': datetime.datetime(2020, 6, 11, 10, 7, 56, tzinfo=datetime.timezone.utc), 'commenter': 'rpl', 'type': 'User'}, {'comment_id': 438681428, 'comment_body': 'from an API design perspective, could the API method meant to save the logs be an async function? (one that return a promise that is going to be resolved when the download has been completed, or rejected if it did fail)\r\nThat should likely make it easier to use by the caller.', 'comment_created': datetime.datetime(2020, 6, 11, 10, 9, 54, tzinfo=datetime.timezone.utc), 'commenter': 'rpl', 'type': 'User'}, {'comment_id': 438683137, 'comment_body': 'could it make sense to keep load and save part of a single module or a single class?', 'comment_created': datetime.datetime(2020, 6, 11, 10, 13, 14, tzinfo=datetime.timezone.utc), 'commenter': 'rpl', 'type': 'User'}, {'comment_id': 439481079, 'comment_body': 'I saw somewhere in the internet that setTimeout is recommended for Firefox. But here it totally make sense to revoke that blob url as the download is completed. I will update it. :-)', 'comment_created': datetime.datetime(2020, 6, 12, 15, 14, 56, tzinfo=datetime.timezone.utc), 'commenter': 'atiqueahmedziad', 'type': 'User'}, {'comment_id': 439483553, 'comment_body': '> [`downloads.download` calls should resolve to a download id](https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/API/downloads/download#Return_value), I think that we may want to use that download id to be sure that the onChanged events are actually related to the download triggered by this downloads.download API call.\r\n\r\nYeah, I get a id when the promise is resolved. I will make this change. :-)\r\n\r\n> Also, based on the docs, there is a chance that downloads.download may reject because the download has been immediately interrupted, and in that case we may want to do some cleanup (e.g. remove the onChanged listener and clear the blob url) and report the error to the caller.\r\n> \r\n> are there other error scenarios that we may need to take into account?\r\n\r\nThanks for noting this, going to cover this above corner case in next iteration and I will checkout if there is any other scenarios, we should take care of. \r\n\r\n', 'comment_created': datetime.datetime(2020, 6, 12, 15, 19, 26, tzinfo=datetime.timezone.utc), 'commenter': 'atiqueahmedziad', 'type': 'User'}, {'comment_id': 439484400, 'comment_body': 'Yeah, I agree. :-)', 'comment_created': datetime.datetime(2020, 6, 12, 15, 21, 1, tzinfo=datetime.timezone.utc), 'commenter': 'atiqueahmedziad', 'type': 'User'}, {'comment_id': 439484699, 'comment_body': 'Yeah definitely make sense as there is not much code in each class :-)', 'comment_created': datetime.datetime(2020, 6, 12, 15, 21, 34, tzinfo=datetime.timezone.utc), 'commenter': 'atiqueahmedziad', 'type': 'User'}, {'comment_id': 440034263, 'comment_body': 'This would reject with an event object. The error is stored in `reader.error`.', 'comment_created': datetime.datetime(2020, 6, 15, 9, 7, 8, tzinfo=datetime.timezone.utc), 'commenter': 'Rob--W', 'type': 'User'}, {'comment_id': 440034720, 'comment_body': 'Use throw instead, to reject the promise returned by the async function.', 'comment_created': datetime.datetime(2020, 6, 15, 9, 7, 56, tzinfo=datetime.timezone.utc), 'commenter': 'Rob--W', 'type': 'User'}, {'comment_id': 440114024, 'comment_body': 'An important part of the Save functionality is that file content is saved. The current test does not check that, so it is possible for the test to inadvertently pass despite the file content being invalid. You should verify that `createObjectURL` is actually passed meaningful file content. ', 'comment_created': datetime.datetime(2020, 6, 15, 11, 37, 53, tzinfo=datetime.timezone.utc), 'commenter': 'Rob--W', 'type': 'User'}, {'comment_id': 440122183, 'comment_body': ""When `saveAsJSON` returns, the cleanup should already have happened. So don't use `await`, but just check that those functions have been called with the expected arguments (which you have already done below)."", 'comment_created': datetime.datetime(2020, 6, 15, 11, 54, 21, tzinfo=datetime.timezone.utc), 'commenter': 'Rob--W', 'type': 'User'}, {'comment_id': 440124144, 'comment_body': ""Just `resolve();` would be fine. There is no reason for returning the download `state` from this function. That's an unnecessary leaky abstraction."", 'comment_created': datetime.datetime(2020, 6, 15, 11, 58, 3, tzinfo=datetime.timezone.utc), 'commenter': 'Rob--W', 'type': 'User'}, {'comment_id': 440126400, 'comment_body': 'Note: The difference between\r\n\r\n```\r\nreturn await promise;\r\n```\r\n\r\nand\r\n\r\n```\r\nreturn promise;\r\n```\r\n\r\n... is that in the first case, your function will await the promise and be able to catch errors (which is why it is important to use `return await` in the `downloadFile` method),\r\nwhereas in the second case the function returns a value (the promise) and any promise rejections will directly be sent to the caller. In the `saveAsJSON` method, it is not necessary to use `await` in `return await ...` because the promise result is not handled but directly passed to the caller.', 'comment_created': datetime.datetime(2020, 6, 15, 12, 2, 43, tzinfo=datetime.timezone.utc), 'commenter': 'Rob--W', 'type': 'User'}, {'comment_id': 440445080, 'comment_body': 'since `createObjectURL` has been passed with blob object. I have added a test case like the following: \r\n`expect(createObjectURL).toHaveBeenCalledWith(new Blob());`', 'comment_created': datetime.datetime(2020, 6, 15, 21, 2, 10, tzinfo=datetime.timezone.utc), 'commenter': 'atiqueahmedziad', 'type': 'User'}, {'comment_id': 440446202, 'comment_body': ""This doesn't verify the content. I'm surprised that the test would pass, because `expect(createObjectURL).toHaveBeenCalledWith(new Blob());` looks like something that should never pass (`new Blob()` creates a new instance of an opaque object). Does the test really pass if you write it like this?\r\n\r\nThe test should verify that the file content has been written as expected."", 'comment_created': datetime.datetime(2020, 6, 15, 21, 4, 33, tzinfo=datetime.timezone.utc), 'commenter': 'Rob--W', 'type': 'User'}, {'comment_id': 440450035, 'comment_body': 'yes, test passes with it', 'comment_created': datetime.datetime(2020, 6, 15, 21, 12, 28, tzinfo=datetime.timezone.utc), 'commenter': 'atiqueahmedziad', 'type': 'User'}, {'comment_id': 440452754, 'comment_body': ""It also passes if I pass the same content,\r\n```\r\nexpect(createObjectURL).toHaveBeenCalledWith(\r\n    new Blob([JSON.stringify([{ prop1: 'log1' }])])\r\n  );\r\n```"", 'comment_created': datetime.datetime(2020, 6, 15, 21, 18, 9, tzinfo=datetime.timezone.utc), 'commenter': 'atiqueahmedziad', 'type': 'User'}, {'comment_id': 440463857, 'comment_body': ""Can you try to figure out why the test unexpectedly passes when an obviously non-matching object is passed? Tests would be rather useless if they claim two inequal things to be equal...\r\n\r\nE.g. is there a default matcher that causes any Blob to match any other Blob? (the `expect` API is documented here: https://jestjs.io/docs/en/expect.html ).\r\n\r\nPing me on Matrix (or comment here) if you can't figure it out, then I'll take a look."", 'comment_created': datetime.datetime(2020, 6, 15, 21, 43, 11, tzinfo=datetime.timezone.utc), 'commenter': 'Rob--W', 'type': 'User'}, {'comment_id': 440697786, 'comment_body': ""I just looked up Jest's source code, starting from the definition of `toHaveBeenCalledWith`: https://github.com/facebook/jest/blob/4a59daa8715bde6a1b085ff7f4140f3a337045aa/packages/expect/src/spyMatchers.ts#L1130\r\nIt is implemented by a function factory at `createToBeCalledWithMatcher`.\r\n\r\n... with intern determines argument equality with `isEqualCall` at https://github.com/facebook/jest/blob/4a59daa8715bde6a1b085ff7f4140f3a337045aa/packages/expect/src/spyMatchers.ts#L575\r\n\r\n... and `isEqualCall` ultimately uses `equals` to determine equality: https://github.com/facebook/jest/blob/4a59daa8715bde6a1b085ff7f4140f3a337045aa/packages/expect/src/spyMatchers.ts#L62\r\n\r\nThe logic is implemented in this file: https://github.com/facebook/jest/blob/4a59daa8715bde6a1b085ff7f4140f3a337045aa/packages/expect/src/jasmineUtils.ts#L30\r\n\r\nThe relevant part of it is that for unknown objects, that it checks whether the internal class is the same (which is the case for comparing Blob and Blob instances, but not Blob and Object instances), and that every **[enumerable](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Enumerability_and_ownership_of_properties)** property has the same value. The `size` and `type` properties of `Blob` instances are not enumerable, so this effectively means that Jest always considers two `Blob` instances equal."", 'comment_created': datetime.datetime(2020, 6, 16, 9, 1, 7, tzinfo=datetime.timezone.utc), 'commenter': 'Rob--W', 'type': 'User'}, {'comment_id': 440794364, 'comment_body': ""`readFile` should throw `Error` instances. There shouldn't be a need to catch and rethrow."", 'comment_created': datetime.datetime(2020, 6, 16, 11, 58, 18, tzinfo=datetime.timezone.utc), 'commenter': 'Rob--W', 'type': 'User'}, {'comment_id': 440794380, 'comment_body': 'Remove debuggging code.', 'comment_created': datetime.datetime(2020, 6, 16, 11, 58, 20, tzinfo=datetime.timezone.utc), 'commenter': 'Rob--W', 'type': 'User'}, {'comment_id': 440794737, 'comment_body': ""Make sure that the test doesn't get stuck when reading somehow fails."", 'comment_created': datetime.datetime(2020, 6, 16, 11, 59, 4, tzinfo=datetime.timezone.utc), 'commenter': 'Rob--W', 'type': 'User'}, {'comment_id': 440795260, 'comment_body': ""This check doesn't work as expected for the reason that I provided in https://github.com/mozilla/extension-activity-monitor/pull/2/files/168cec3ae3c1182806ec14f4604ec946dbeffa91..6ac6cf9062aad9f46792ce85bca8f376d3c271ee#r440697786"", 'comment_created': datetime.datetime(2020, 6, 16, 12, 0, tzinfo=datetime.timezone.utc), 'commenter': 'Rob--W', 'type': 'User'}, {'comment_id': 440796600, 'comment_body': ""Use `expect(...).rejects` instead of manual `.catch`: https://jestjs.io/docs/en/expect.html#rejects\r\n\r\nThere are two issues with the current `.catch` + `expect`:\r\n- It's lots of boilerplate and any resulting logged assertion/expectations are not as obvious.\r\n- If the method doesn't reject, the test passes (when it should have failed instead!)"", 'comment_created': datetime.datetime(2020, 6, 16, 12, 2, 28, tzinfo=datetime.timezone.utc), 'commenter': 'Rob--W', 'type': 'User'}, {'comment_id': 441850785, 'comment_body': 'Why are you checking these internal methods?\r\n\r\nThe unit test should only test the external interface (to verify expected behavior), and only check internal state/calls if it would otherwise not be able to verify correctness. In this case, we only really need to check that the returned result matches the content of the Blob. The other checks are unnecessary and increases the maintenance burden, because if the implementation ever changes (e.g. to just use `blob.text()`), then the test will start to fail even if the return value is correct.', 'comment_created': datetime.datetime(2020, 6, 17, 21, 42, 24, tzinfo=datetime.timezone.utc), 'commenter': 'Rob--W', 'type': 'User'}, {'comment_id': 441851586, 'comment_body': ""This test isn't useful."", 'comment_created': datetime.datetime(2020, 6, 17, 21, 44, 12, tzinfo=datetime.timezone.utc), 'commenter': 'Rob--W', 'type': 'User'}, {'comment_id': 441854409, 'comment_body': ""Don't manually overwrite globals. Add a spy with a mock implementation (maybe on `window.FileReader.prototype.readAsText`), and use `mockRestore` to restore the original in the end: https://jestjs.io/docs/en/jest-object#jestspyonobject-methodname"", 'comment_created': datetime.datetime(2020, 6, 17, 21, 51, tzinfo=datetime.timezone.utc), 'commenter': 'Rob--W', 'type': 'User'}, {'comment_id': 441855322, 'comment_body': 'When testing for errors, always check the message. There may otherwise be bugs in the implementation that are hidden by the lack of error check.', 'comment_created': datetime.datetime(2020, 6, 17, 21, 53, 17, tzinfo=datetime.timezone.utc), 'commenter': 'Rob--W', 'type': 'User'}, {'comment_id': 441855474, 'comment_body': ""These checks aren't useful. As said before, we mainly care about the correctness of the external interface."", 'comment_created': datetime.datetime(2020, 6, 17, 21, 53, 41, tzinfo=datetime.timezone.utc), 'commenter': 'Rob--W', 'type': 'User'}, {'comment_id': 441858063, 'comment_body': 'This has not been addressed yet: https://github.com/mozilla/extension-activity-monitor/pull/2#discussion_r440122183\r\n\r\nI think that you misunderstood me. By ""don\'t use `await`"", I didn\'t mean to literally remove `await` (using `Promise.all` without using/awaiting the resulting promise is not useful). I meant that after returning from `readFile`, that the cleanup (revokeObjectURL and removeListener) should have happened already. So you shouldn\'t use `promiseRevokedURL` (etc., remove it), but verify that the spies have been called as expected (already done below).', 'comment_created': datetime.datetime(2020, 6, 17, 22, 0, 6, tzinfo=datetime.timezone.utc), 'commenter': 'Rob--W', 'type': 'User'}, {'comment_id': 441979842, 'comment_body': 'Thanks for explaining 😄. Removed them.', 'comment_created': datetime.datetime(2020, 6, 18, 5, 41, 8, tzinfo=datetime.timezone.utc), 'commenter': 'atiqueahmedziad', 'type': 'User'}, {'comment_id': 441979977, 'comment_body': 'Done :-) ', 'comment_created': datetime.datetime(2020, 6, 18, 5, 41, 36, tzinfo=datetime.timezone.utc), 'commenter': 'atiqueahmedziad', 'type': 'User'}, {'comment_id': 441980333, 'comment_body': 'I get a message with string `null` from `FileReader.error`. Now I have added a check for that.', 'comment_created': datetime.datetime(2020, 6, 18, 5, 42, 50, tzinfo=datetime.timezone.utc), 'commenter': 'atiqueahmedziad', 'type': 'User'}, {'comment_id': 441980654, 'comment_body': 'Removed them :-) ', 'comment_created': datetime.datetime(2020, 6, 18, 5, 44, 1, tzinfo=datetime.timezone.utc), 'commenter': 'atiqueahmedziad', 'type': 'User'}, {'comment_id': 441980918, 'comment_body': 'Done now :-) ', 'comment_created': datetime.datetime(2020, 6, 18, 5, 44, 52, tzinfo=datetime.timezone.utc), 'commenter': 'atiqueahmedziad', 'type': 'User'}, {'comment_id': 442065948, 'comment_body': 'In order for the test to be realistic, you should have set a non-empty error matching the type of https://developer.mozilla.org/en-US/docs/Web/API/FileReader/error', 'comment_created': datetime.datetime(2020, 6, 18, 8, 42, 57, tzinfo=datetime.timezone.utc), 'commenter': 'Rob--W', 'type': 'User'}, {'comment_id': 442130988, 'comment_body': 'should I pass `DOMException` object as parameter ? Since I am unable to modify the `error` property of FileReader API.\r\n**update**: I passed a DOMException object as argument to `onerror` event and tested that.', 'comment_created': datetime.datetime(2020, 6, 18, 10, 34, 41, tzinfo=datetime.timezone.utc), 'commenter': 'atiqueahmedziad', 'type': 'User'}, {'comment_id': 442545760, 'comment_body': 'The first parameter is `event`, not `error`. It would be an error to conflate it.\r\n\r\nI guess that `error` is a read-only property on the prototype of `FileReader`. Assigning to it won\'t work for that reason. ""read-only"" in JavaScript just means that there is a property descriptor with a getter but no setter.\r\n\r\nHave you tried to mock the property with the jest API?\r\nIf that didn\'t work, have you tried to use `Object.defineProperty(this, ""error"", ...)` to set the error on the `FileReader` instance? https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty', 'comment_created': datetime.datetime(2020, 6, 18, 23, 1, 24, tzinfo=datetime.timezone.utc), 'commenter': 'Rob--W', 'type': 'User'}, {'comment_id': 442631921, 'comment_body': 'Thanks! Updated the pr. I thought I can never access ""read-only"" properties. Done with jest API.', 'comment_created': datetime.datetime(2020, 6, 19, 5, 2, 41, tzinfo=datetime.timezone.utc), 'commenter': 'atiqueahmedziad', 'type': 'User'}]","[{'commit_sha': '936ce276cd5c20485cca7672c4efbdddca6d48c6', 'committer_username': 'atiqueahmedziad', 'committer_name': 'Atique Ahmed Ziad', 'committer_email': None, 'commit_date': datetime.datetime(2014, 8, 5, 15, 37, 42, tzinfo=datetime.timezone.utc)}]",Atique Ahmed Ziad,8364578,,User,,72,,3,42
434419760,feat: popup and extension monitoring feature added,"The following features are added - 
- browerAction popup Added
   - It displays current monitoring status (if any extensions are being monitored or not) (method: `areExtsBeingMonitored()`)
   - Start monitor all extensions
   - Stop monitor all extensions
   - View activitylog page (extension page) 
- Extension monitoring functionalities added
   - Initialize monitor all extensions (method: `initMonitor()`, `setExtensions()`, `startMonitorAll()`)
   - Stop monitor all extensions (method: `stopMonitorAll()`)
   - On the go change any extension's monitoring status (method: `extsCurrentMonitoringStatus()`, `modifyMonitor()`, `startMonitor()`, `stopMonitor()`)
   - Store logs in background (method: `logListener()`)
   - Send all stored logs (in background) to extension page once that is initialized (activityLogs array is send as response when the message - [`sendAllExistingLogs`](https://github.com/mozilla/extension-activity-monitor/compare/master...atiqueahmedziad:popup-monitor?expand=1#diff-961641dd6af66f5e3313307cf4eb8f1dR156-R159) is found)
   - While extension page is opened, send each logs to extension page as soon as it is encountered. (method: `sendLogs()`, `isExtensionPageOpen()`)

**NOTE**: I have added some comments to providing you a better understanding of what I wanted to do. I will take those off after you check

## popup screenshot
<img width=""251"" alt=""Screenshot 2020-06-15 at 3 50 18 PM"" src=""https://user-images.githubusercontent.com/8364578/84643681-fa83a580-af1f-11ea-8a32-04d1ff920e15.png"">
<img width=""250"" alt=""Screenshot 2020-06-15 at 3 50 27 PM"" src=""https://user-images.githubusercontent.com/8364578/84643725-0cfddf00-af20-11ea-9de5-77a14f716ed7.png"">",True,3,https://api.github.com/repos/mozilla/extension-activity-monitor/pulls/3,https://github.com/mozilla/extension-activity-monitor/pull/3,closed,833,6,12,20,1,112,0,0,[],2020-06-15 09:47:36+00:00,2020-06-26 17:40:40+00:00,978784.0,"11 days, 7:53:04","[{'comment_id': 440093076, 'comment_body': 'Can you use `browser.runtime.getURL()` here, instead of fuzzy-matching using `*`?', 'comment_created': datetime.datetime(2020, 6, 15, 10, 54, 24, tzinfo=datetime.timezone.utc), 'commenter': 'wagnerand', 'type': 'User'}, {'comment_id': 440093457, 'comment_body': 'This could be its own class.', 'comment_created': datetime.datetime(2020, 6, 15, 10, 55, 9, tzinfo=datetime.timezone.utc), 'commenter': 'wagnerand', 'type': 'User'}, {'comment_id': 440104260, 'comment_body': ""Move methods that don't interact with the view to a different class/file. This makes a clearer module structure and allows you to reuse that code."", 'comment_created': datetime.datetime(2020, 6, 15, 11, 17, 16, tzinfo=datetime.timezone.utc), 'commenter': 'wagnerand', 'type': 'User'}, {'comment_id': 442496796, 'comment_body': ""Do any have any suggestion regarding this filename ? (I named it `extListen.js`, as I wasn't getting any good name). This file will contain methods interacts with background script (currently). These methods can be used in both popup and extension page. "", 'comment_created': datetime.datetime(2020, 6, 18, 20, 54, 31, tzinfo=datetime.timezone.utc), 'commenter': 'atiqueahmedziad', 'type': 'User'}, {'comment_id': 442650539, 'comment_body': '**Update** : I renamed it to `ext-listen.js`', 'comment_created': datetime.datetime(2020, 6, 19, 6, 13, 58, tzinfo=datetime.timezone.utc), 'commenter': 'atiqueahmedziad', 'type': 'User'}, {'comment_id': 443443764, 'comment_body': 'Here, I am waiting for the promise to be resolved, it is meant to be resolved when the extension page is opened. So, is it required to handle the error if promise is rejected from [`sendLogs()`](https://github.com/mozilla/extension-activity-monitor/pull/3/files#diff-aa663d2fedefb755dd0cf06fef1f44e2R14) method ?', 'comment_created': datetime.datetime(2020, 6, 22, 9, 50, 42, tzinfo=datetime.timezone.utc), 'commenter': 'atiqueahmedziad', 'type': 'User'}, {'comment_id': 443456327, 'comment_body': 'I would expect startMonitor to early exit also when extensionId is the id of the extension activity monitor extension ([onExtensionActivity.addListener is also preventing an extension to monitor itself internally, but it also log an error](https://searchfox.org/mozilla-central/rev/1304678d837c17811617754fd446794b774afe94/toolkit/components/extensions/parent/ext-activityLog.js#27-29), which could be misleading if we are investigating a bug in the extension, and so it would be reasonable to prevent the extension from calling onExtensionActivity.addListener with its own extension id in the first place).', 'comment_created': datetime.datetime(2020, 6, 22, 10, 13, 17, tzinfo=datetime.timezone.utc), 'commenter': 'rpl', 'type': 'User'}, {'comment_id': 443457766, 'comment_body': 'It would be good to add an inline comment right above this property to explicitly mention what is the type signature of this Map and what it is used for (looking to the rest of the module this seems to be a `Map<string, Function>` where the `string` key is an extension id and the `Function` value is a listener.  ', 'comment_created': datetime.datetime(2020, 6, 22, 10, 16, 14, tzinfo=datetime.timezone.utc), 'commenter': 'rpl', 'type': 'User'}, {'comment_id': 443460229, 'comment_body': 'In this version of this PR, the popup seems to be retrieving the list of all the extensions installed when it is initialized, but the only purpose of doing it seems to be to send the array of the extensions to the background page.\r\nThe background page could just call getAllExtensions internally, and the popup could just send a message to ask the background page to monitor all installed extensions.', 'comment_created': datetime.datetime(2020, 6, 22, 10, 21, 2, tzinfo=datetime.timezone.utc), 'commenter': 'rpl', 'type': 'User'}, {'comment_id': 443462074, 'comment_body': ""Personally I would do the opposite and only keep the entries with extension.type == 'extension'."", 'comment_created': datetime.datetime(2020, 6, 22, 10, 24, 34, tzinfo=datetime.timezone.utc), 'commenter': 'rpl', 'type': 'User'}, {'comment_id': 443463022, 'comment_body': 'how about using messages like `{requestType: ""getMonitoringStatus""}` instead of `{getMonitoringStatus: true}`?', 'comment_created': datetime.datetime(2020, 6, 22, 10, 26, 27, tzinfo=datetime.timezone.utc), 'commenter': 'rpl', 'type': 'User'}, {'comment_id': 443463679, 'comment_body': 'The background page is an invisible page, do we really need this `meta name=""viewport""` here?', 'comment_created': datetime.datetime(2020, 6, 22, 10, 27, 42, tzinfo=datetime.timezone.utc), 'commenter': 'rpl', 'type': 'User'}, {'comment_id': 443464519, 'comment_body': 'Nit, `meta` is a self-closing tag in HTML5 and so we could omit the closing `/` and just write it as `<meta charset=""utf-8"">`.', 'comment_created': datetime.datetime(2020, 6, 22, 10, 29, 24, tzinfo=datetime.timezone.utc), 'commenter': 'rpl', 'type': 'User'}, {'comment_id': 443464937, 'comment_body': ""If anything, I suggest to catch (expected) errors in the `sendLogs` method itself instead of a catch-all in the caller of sendLogs.\n\nIn normal circumstances (= tab is open and listening for events) there shouldn't be any error, so I wouldn't catch anything right now."", 'comment_created': datetime.datetime(2020, 6, 22, 10, 30, 11, tzinfo=datetime.timezone.utc), 'commenter': 'Rob--W', 'type': 'User'}, {'comment_id': 443467221, 'comment_body': 'Why is this part outside of the ExtensionMonitor class?\r\n\r\nbackground.js could just limit itself to create an ExtensionMonitor instance (and maybe call an `init` or a `listen` method to start listening for runtime.onMessage events to handle).   ', 'comment_created': datetime.datetime(2020, 6, 22, 10, 34, 41, tzinfo=datetime.timezone.utc), 'commenter': 'rpl', 'type': 'User'}, {'comment_id': 443469984, 'comment_body': 'As I did mention in another review comment, these runtime.onMessage events could be better represented by messages in the form:\r\n```\r\n{\r\n  requestType: ""..."", // where requestType could be ""getMonitorStatus"", ""startMonitor"", ""stopMonitor"" ...\r\n  args: [...], // where args is an array (or an object if you prefer) of arguments for the specific requestType.\r\n}\r\n```\r\n\r\nThis would:\r\n- make it clear that every one of this messages handles just a single request type\r\n- the message handler could easily delegate the request type to a ""requestType""-specific method based on just the `requestType` property.  ', 'comment_created': datetime.datetime(2020, 6, 22, 10, 40, 34, tzinfo=datetime.timezone.utc), 'commenter': 'rpl', 'type': 'User'}, {'comment_id': 443472571, 'comment_body': ""In ext-monitor.js there is a similar `runtime.getURL` (in the `isExtensionPageOpen` method) but with a different url, I'm pretty sure that the urls are different because they are both relative urls and the callers are at a different nesting level in the extension's directory tree. I suggest to use an absolute url (I mean `browser.runtime.getURL('/activitylog/activitylog.html')` and possibly to do it in a single place, e.g. a static method or a function exported by a module used by the other js modules that needs the shared helper) to make it easier to be sure that the url would be resolved to the expected one "", 'comment_created': datetime.datetime(2020, 6, 22, 10, 45, 58, tzinfo=datetime.timezone.utc), 'commenter': 'rpl', 'type': 'User'}, {'comment_id': 443477003, 'comment_body': ""Personally, I would prefer to avoid alert as the strategy used to show errors to the user.\r\nAlso, the popup is being just closed when the handler is successful, which I'm not sure is enough as a feedback to the user that the operation has been successfull (e.g. I would imagine that the user may just open the browserAction popup again to double-check that).\r\n\r\nInstead, could we:\r\n- when the handler has successfully started/stopped the monitor extensions: update the popup page (e.g. updating the UI as the user would expect when the button clicked handled the request successfully) and don't autoclose the popup\r\n- when the handler did fail, update the popup page to show an error message to the user and don't autoclose the popup\r\n\r\nBesides that, what if initMonitorAll or stopMonitorAll reject?"", 'comment_created': datetime.datetime(2020, 6, 22, 10, 55, 3, tzinfo=datetime.timezone.utc), 'commenter': 'rpl', 'type': 'User'}, {'comment_id': 443490433, 'comment_body': ""It doesn't have to be called `args`. The most important part is that using e.g. `requestType` would make it very clear that a message is expected to be handled by one handler only.\r\n\r\nThere are multiple ways to handle those messages, e.g. `switch`-`case` / `if`-`else if` / putting message handlers on an object (e.g. as seen here: https://github.com/mozilla/FirefoxColor/blob/9d27d0d10249f8b20d36f629b6c9cd7ea14532f0/src/extension/background.js#L46-L108)"", 'comment_created': datetime.datetime(2020, 6, 22, 11, 23, 15, tzinfo=datetime.timezone.utc), 'commenter': 'Rob--W', 'type': 'User'}, {'comment_id': 443490609, 'comment_body': ""Don't use ` ? true : false;` when the left part is already a boolean. The comparison itself already results in a boolean."", 'comment_created': datetime.datetime(2020, 6, 22, 11, 23, 38, tzinfo=datetime.timezone.utc), 'commenter': 'Rob--W', 'type': 'User'}, {'comment_id': 443492242, 'comment_body': 'All of this status rendering logic should be moved to a separate function, because it is possible to toggle the status while monitoring.', 'comment_created': datetime.datetime(2020, 6, 22, 11, 27, 9, tzinfo=datetime.timezone.utc), 'commenter': 'Rob--W', 'type': 'User'}, {'comment_id': 443494697, 'comment_body': 'When the function is always expected to return a promise, mark the function as `async` to avoid having to use `Promise.resolve`/`Promise.reject` over `return` / `throw`.\r\n\r\nThe disadvantage of the current approach is that it is not obvious whether `initMonitor` may throw synchronously (instead of resolving the promise).', 'comment_created': datetime.datetime(2020, 6, 22, 11, 32, 36, tzinfo=datetime.timezone.utc), 'commenter': 'Rob--W', 'type': 'User'}, {'comment_id': 444379530, 'comment_body': 'Prettier gives an error on this. I see an issue already filed [here](https://github.com/prettier/prettier/issues/5246) regarding this.\r\nSo, I have asked prettier to ignore this for now.', 'comment_created': datetime.datetime(2020, 6, 23, 17, 11, 17, tzinfo=datetime.timezone.utc), 'commenter': 'atiqueahmedziad', 'type': 'User'}, {'comment_id': 444384818, 'comment_body': 'I guess that you are not defining this method as `async initializeMonitor() {..}` because you are then registering it as an event listener and then when the method is called as a listener `this` is actually the DOM element.\r\n\r\nThere are other options to handle this, e.g. we could add an [handleEvent method](https://developer.mozilla.org/en-US/docs/Web/API/EventListener/handleEvent) to this class (e.g. [see the second example in this MDN doc page](https://developer.mozilla.org/en-US/docs/Web/API/EventListener)) and then register the entire object as a listener. At that point `this` is the class instance when `handleEvent` is executed and we can check the event type and event target properties to decide which is the appropriate function to call. \r\n\r\nBesides that, given that this is already an async function you could also write this using await and a try/catch:\r\n```\r\ntry {\r\n  const monitorMsg = await initMonitorAll();\r\n  ...\r\n} catch (error) {\r\n  ...\r\n}\r\n```\r\n\r\nAs a side not given that the reference to the button is called `startMonitorAllBtn` and the other method is called `stopMonitoring`, we could use the same convention can call the methods `startMonitor` and `stopMonitor`.', 'comment_created': datetime.datetime(2020, 6, 23, 17, 20, 20, tzinfo=datetime.timezone.utc), 'commenter': 'rpl', 'type': 'User'}, {'comment_id': 444387566, 'comment_body': 'Nit, it looks like this part could be something that would be good to be in the class constructor (mainly because it is initializing the instance properties) and moved to the top part of the class.', 'comment_created': datetime.datetime(2020, 6, 23, 17, 24, 53, tzinfo=datetime.timezone.utc), 'commenter': 'rpl', 'type': 'User'}, {'comment_id': 444388974, 'comment_body': 'Nit, given that the class is called Popup, this method could be called just `render`', 'comment_created': datetime.datetime(2020, 6, 23, 17, 27, 20, tzinfo=datetime.timezone.utc), 'commenter': 'rpl', 'type': 'User'}, {'comment_id': 444389233, 'comment_body': 'Same comments as the ones on startMonitoring.', 'comment_created': datetime.datetime(2020, 6, 23, 17, 27, 46, tzinfo=datetime.timezone.utc), 'commenter': 'rpl', 'type': 'User'}, {'comment_id': 444392594, 'comment_body': ""This `addListenerPopup` doesn't seem to be adding any actual value at the moment, if the reason for wrapping element.addListener into a method is the test, there should be some other options, e.g. you could spy the method that you expect to be called and trigger the event listener (e.g. using element.click() or dispatching a fake click event).  "", 'comment_created': datetime.datetime(2020, 6, 23, 17, 33, 48, tzinfo=datetime.timezone.utc), 'commenter': 'rpl', 'type': 'User'}, {'comment_id': 444398123, 'comment_body': 'As I did mention in one of the other review comments, I think that we could spy the methods that are supposed to be called in response to user interaction with the popup DOM elements and just remove `addListenerPopup`.', 'comment_created': datetime.datetime(2020, 6, 23, 17, 42, 32, tzinfo=datetime.timezone.utc), 'commenter': 'rpl', 'type': 'User'}, {'comment_id': 444405359, 'comment_body': 'ah, I see that it is prettier that doesn\'t like the ""self closing tag to be self closing"", let\'s not fight with prettier, prettier doesn\'t listen and fighting it is pointless ;-)\r\n\r\nlet\'s just use `<meta ... />` as prettier wants, that\'s totally fine (same thing for popup.html).', 'comment_created': datetime.datetime(2020, 6, 23, 17, 54, 36, tzinfo=datetime.timezone.utc), 'commenter': 'rpl', 'type': 'User'}, {'comment_id': 444432933, 'comment_body': 'We could actually load the real document.body from the popup.html file, which would be better for at least a couple of reasons:\r\n- the test would be also make sure that popup.html is what ext-popup.js expects\r\n- we don\'t have to keep both the test and the popup.html file in sync by manually copying changes between them\r\n\r\nTo achieve that we could use:\r\n- the nodejs ""path"" and ""fs"" modules, to be able to load the file content using something like:\r\n```\r\n  const popupHtml = fs.readFileSync(\r\n    path.resolve(__dirname, ""../src/popup/popup.html""),\r\n    ""utf-8""\r\n  );\r\n```\r\n- then parse the content of the popup.html file as an HTML document, by creating an instance of [DOMParser](https://developer.mozilla.org/en-US/docs/Web/API/DOMParser) (which is available in jest thanks to JSDOM, available as window.DOMParser) and then using the parseFromString method, it would look like more or less as in: ```domParser.parseFromString(popupHtml, ""text/html"").body.innerHTML```\r\n\r\n(it may be reasonable to do it once outside of the test functions and set it on a `const popupBody`, to eventually reuse it for multiple tests). ', 'comment_created': datetime.datetime(2020, 6, 23, 18, 44, 17, tzinfo=datetime.timezone.utc), 'commenter': 'rpl', 'type': 'User'}, {'comment_id': 444434443, 'comment_body': ""I don't think that we are not that much interested into how many times we have called this function, as much as we are interested in checking that the status of the elements in the popup is the expected ones (which is being checked below).\r\n\r\nIn my opinion we can get read of these two assertions."", 'comment_created': datetime.datetime(2020, 6, 23, 18, 47, tzinfo=datetime.timezone.utc), 'commenter': 'rpl', 'type': 'User'}, {'comment_id': 444435247, 'comment_body': ""This test seems to be testing the popup when the monitor is active, and so if I'm not wrong the description of the test should be changed accordingly."", 'comment_created': datetime.datetime(2020, 6, 23, 18, 48, 22, tzinfo=datetime.timezone.utc), 'commenter': 'rpl', 'type': 'User'}, {'comment_id': 444441017, 'comment_body': '@atiqueahmedziad I forgot to ask you this in one of the other review comments: which are the other scenarios that you think you should test on the popup?\r\n\r\nWriting down a short list in text form (just as short test descriptions like the one passed to `test(""..."", async () {...})`) is helpful to plan the tests to write (and would help me to give you feedback on the list of test scenario even before you have turned all the tests in the list into code).\r\n\r\nFeel free to reply to this comment with the list of test cases you are thinking of and I\'m going to take a look to it asap. ', 'comment_created': datetime.datetime(2020, 6, 23, 18, 58, 46, tzinfo=datetime.timezone.utc), 'commenter': 'rpl', 'type': 'User'}, {'comment_id': 444763865, 'comment_body': 'Done. I have excluded monitoring our own extension. :-)', 'comment_created': datetime.datetime(2020, 6, 24, 9, 25, 34, tzinfo=datetime.timezone.utc), 'commenter': 'atiqueahmedziad', 'type': 'User'}, {'comment_id': 444764045, 'comment_body': 'This is done ', 'comment_created': datetime.datetime(2020, 6, 24, 9, 25, 52, tzinfo=datetime.timezone.utc), 'commenter': 'atiqueahmedziad', 'type': 'User'}, {'comment_id': 444765123, 'comment_body': 'Done :-) Extensions are being fetched in the background now.', 'comment_created': datetime.datetime(2020, 6, 24, 9, 27, 43, tzinfo=datetime.timezone.utc), 'commenter': 'atiqueahmedziad', 'type': 'User'}, {'comment_id': 444765265, 'comment_body': 'done :-) ', 'comment_created': datetime.datetime(2020, 6, 24, 9, 27, 58, tzinfo=datetime.timezone.utc), 'commenter': 'atiqueahmedziad', 'type': 'User'}, {'comment_id': 444765560, 'comment_body': 'This is done. Thanks for the idea.', 'comment_created': datetime.datetime(2020, 6, 24, 9, 28, 28, tzinfo=datetime.timezone.utc), 'commenter': 'atiqueahmedziad', 'type': 'User'}, {'comment_id': 444766684, 'comment_body': 'no need actually. so removed :-) ', 'comment_created': datetime.datetime(2020, 6, 24, 9, 30, 18, tzinfo=datetime.timezone.utc), 'commenter': 'atiqueahmedziad', 'type': 'User'}, {'comment_id': 444766899, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 6, 24, 9, 30, 42, tzinfo=datetime.timezone.utc), 'commenter': 'atiqueahmedziad', 'type': 'User'}, {'comment_id': 444767095, 'comment_body': 'Thanks for this idea, I have implemented it. ', 'comment_created': datetime.datetime(2020, 6, 24, 9, 31, 2, tzinfo=datetime.timezone.utc), 'commenter': 'atiqueahmedziad', 'type': 'User'}, {'comment_id': 444768436, 'comment_body': 'Thanks for noticing, I have added a function named `extPageURL()` in `ext-listen.js` with absolute url. I reused this function two times.', 'comment_created': datetime.datetime(2020, 6, 24, 9, 33, 27, tzinfo=datetime.timezone.utc), 'commenter': 'atiqueahmedziad', 'type': 'User'}, {'comment_id': 444772825, 'comment_body': 'Thanks for explaining in detail. I have added a throw statement [here](https://github.com/mozilla/extension-activity-monitor/pull/3/commits/eb10df7504be3bcf734b29a57b6da9df60658294#diff-aa663d2fedefb755dd0cf06fef1f44e2R46) and [here](https://github.com/mozilla/extension-activity-monitor/blob/eb10df7504be3bcf734b29a57b6da9df60658294/src/lib/ext-monitor.js#L95) if initMonitorAll fails.\r\nI have added a throw statement [here](https://github.com/mozilla/extension-activity-monitor/blob/eb10df7504be3bcf734b29a57b6da9df60658294/src/lib/ext-monitor.js#L55) if stopMonitorAll fails. \r\n\r\nSince we are using `try {} catch {}` now. The rejects will be caught and the reject message will be displayed in the popup.', 'comment_created': datetime.datetime(2020, 6, 24, 9, 41, 30, tzinfo=datetime.timezone.utc), 'commenter': 'atiqueahmedziad', 'type': 'User'}, {'comment_id': 444772971, 'comment_body': 'done.', 'comment_created': datetime.datetime(2020, 6, 24, 9, 41, 47, tzinfo=datetime.timezone.utc), 'commenter': 'atiqueahmedziad', 'type': 'User'}, {'comment_id': 444773120, 'comment_body': 'done.', 'comment_created': datetime.datetime(2020, 6, 24, 9, 42, tzinfo=datetime.timezone.utc), 'commenter': 'atiqueahmedziad', 'type': 'User'}, {'comment_id': 444773469, 'comment_body': 'Thanks for explaining. I have updated with `throw`.', 'comment_created': datetime.datetime(2020, 6, 24, 9, 42, 39, tzinfo=datetime.timezone.utc), 'commenter': 'atiqueahmedziad', 'type': 'User'}, {'comment_id': 444782001, 'comment_body': ""Yeah, you guessed right. Since I had made the workaround using an arrow function, I just ignored if I could do that in any other way :-p. Also, I didn't know about other workarounds and about the `handleEvent method`. Thanks a lot for the explanation. I have updated this part with your suggestion (added an handleEvent method and used try, catch)\r\n\r\n> As a side not given that the reference to the button is called `startMonitorAllBtn` and the other method is called `stopMonitoring`, we could use the same convention can call the methods `startMonitor` and `stopMonitor`.\r\n\r\n(I understand you wanted to write `note` instead of `not`). But I am not sure I understand this clearly. I have renamed the methods to `startMonitor` and `stopMonitor`."", 'comment_created': datetime.datetime(2020, 6, 24, 9, 57, 8, tzinfo=datetime.timezone.utc), 'commenter': 'atiqueahmedziad', 'type': 'User'}, {'comment_id': 444782240, 'comment_body': 'done renaming.', 'comment_created': datetime.datetime(2020, 6, 24, 9, 57, 33, tzinfo=datetime.timezone.utc), 'commenter': 'atiqueahmedziad', 'type': 'User'}, {'comment_id': 444782422, 'comment_body': 'yeah removed `addListenerPopup` method.', 'comment_created': datetime.datetime(2020, 6, 24, 9, 57, 58, tzinfo=datetime.timezone.utc), 'commenter': 'atiqueahmedziad', 'type': 'User'}, {'comment_id': 444782532, 'comment_body': 'done. ', 'comment_created': datetime.datetime(2020, 6, 24, 9, 58, 10, tzinfo=datetime.timezone.utc), 'commenter': 'atiqueahmedziad', 'type': 'User'}, {'comment_id': 444782653, 'comment_body': 'okay :-) ', 'comment_created': datetime.datetime(2020, 6, 24, 9, 58, 21, tzinfo=datetime.timezone.utc), 'commenter': 'atiqueahmedziad', 'type': 'User'}, {'comment_id': 444783988, 'comment_body': 'Thanks for the explanation. I have updated this part using ""path"" and ""fs"" module.', 'comment_created': datetime.datetime(2020, 6, 24, 10, 0, 49, tzinfo=datetime.timezone.utc), 'commenter': 'atiqueahmedziad', 'type': 'User'}, {'comment_id': 444784275, 'comment_body': 'Yeah, deleted this two assertions.', 'comment_created': datetime.datetime(2020, 6, 24, 10, 1, 20, tzinfo=datetime.timezone.utc), 'commenter': 'atiqueahmedziad', 'type': 'User'}, {'comment_id': 444793068, 'comment_body': 'I want to add the following tests - \r\n\r\n```\r\ntest(""test popup UI when extensions are not being monitored"", async () {\r\n   test renderMonitorStoppedUI();\r\n})\r\n```\r\n```\r\ntest(""test popup UI when an error is thrown while initializing monitoring and stop monitoring"", async () {\r\n   test catch from startMonitor();\r\n   test catch from stopMonitor();\r\n})\r\n```\r\n```\r\ntest(""viewExtPage() method is called upon clicking on \'view activity logs page\' button"", async () {\r\n   test viewExtPage();\r\n})\r\n```', 'comment_created': datetime.datetime(2020, 6, 24, 10, 18, 7, tzinfo=datetime.timezone.utc), 'commenter': 'atiqueahmedziad', 'type': 'User'}, {'comment_id': 444932287, 'comment_body': 'maybe `""test popup UI when extensions are not being monitored""` could be expanded a bit to test a more complete scenario, e.g. how about:\r\n- `""starting monitoring all extension from the popup""`\r\n  - popup loaded initially in the ""not monitoring"" state (while we mock the internal helpers to let us simulate this state)\r\n  - check that the UI is in the expected state\r\n  - click the start monitor (after mocking the internal helpers that would let us know that the monitor did start successfully)\r\n  - check that the UI has been updated as expected\r\n\r\nhow that sounds to you?', 'comment_created': datetime.datetime(2020, 6, 24, 14, 24, 16, tzinfo=datetime.timezone.utc), 'commenter': 'rpl', 'type': 'User'}, {'comment_id': 444941051, 'comment_body': 'Nit, I would also tweak a bit the description of these two:\r\n\r\n- ""viewExtPage() method is called upon clicking on \'view activity logs page\' button"" => ""clicking \'view activity logs page\' should open the activitylog extension page""\r\n- ""test popup UI when an error is thrown while initializing monitoring and stop monitoring"" => ""errors on start/stopping monitoring should be shown in the popup UI""\r\n\r\n(just to express them in terms of the scenario being tested, instead of using a description that is focused on the particular code tested)\r\n', 'comment_created': datetime.datetime(2020, 6, 24, 14, 35, 25, tzinfo=datetime.timezone.utc), 'commenter': 'rpl', 'type': 'User'}, {'comment_id': 444942807, 'comment_body': 'Sounds good. :-) \r\nLet me expand them in the following - \r\n- ""stop monitoring all the extensions from popup""\r\n    - popup loaded initially in the monitoring state.\r\n    - check that the UI is in the expected state\r\n    - click the stop monitor button\r\n    - check the UI has been updated as expected.\r\n- ""errors on start/stopping monitoring should be shown in the popup UI""\r\n    - popup loaded initially with no error message\r\n    - click on start monitor button/ stop monitor button\r\n    - an error is thrown\r\n    - UI should be updated as expected i.e. the error message is showed.\r\n- ""clicking \'view activity logs page\' should open the activitylog extension page""\r\n    - popup initially loaded\r\n    - click on ""view activity logs page"" button\r\n    - it should open a new tab with extension page (should call viewActivityLogs() method from `ext-listen.js`)', 'comment_created': datetime.datetime(2020, 6, 24, 14, 37, 39, tzinfo=datetime.timezone.utc), 'commenter': 'atiqueahmedziad', 'type': 'User'}, {'comment_id': 445497859, 'comment_body': 'Nit, I would suggest to give this function a more meaningful name, e.g. `getActivityLogPageURL` or something like that.', 'comment_created': datetime.datetime(2020, 6, 25, 11, 45, 49, tzinfo=datetime.timezone.utc), 'commenter': 'rpl', 'type': 'User'}, {'comment_id': 445498389, 'comment_body': 'Nit, how about `self` instead of `eam`?', 'comment_created': datetime.datetime(2020, 6, 25, 11, 46, 52, tzinfo=datetime.timezone.utc), 'commenter': 'rpl', 'type': 'User'}, {'comment_id': 445499262, 'comment_body': 'Nit, how about calling this function `getMonitorStatus`? ', 'comment_created': datetime.datetime(2020, 6, 25, 11, 48, 36, tzinfo=datetime.timezone.utc), 'commenter': 'rpl', 'type': 'User'}, {'comment_id': 445500331, 'comment_body': 'Nit, I think that we could call these two functions (and the related requestType) as just `startMonitor` and `stopMonitor`.\r\n\r\nIf at some point we do want to add to these two function the ability to only start/stop monitor a particular set of extensions we can add a parameter (and a property of the message send).', 'comment_created': datetime.datetime(2020, 6, 25, 11, 50, 48, tzinfo=datetime.timezone.utc), 'commenter': 'rpl', 'type': 'User'}, {'comment_id': 445500991, 'comment_body': 'Nit, `openActivityLogPage` would likely be a more intuitive name for this function (and what it actually does).', 'comment_created': datetime.datetime(2020, 6, 25, 11, 52, 10, tzinfo=datetime.timezone.utc), 'commenter': 'rpl', 'type': 'User'}, {'comment_id': 445502867, 'comment_body': 'Nit, `return tab.length > 0;`\r\n\r\n(as a side note: omitting the surrounding brackets on the body of `if` statements is a valid syntax but may makes it easier to potentially misunderstanding the code while reading it quickly).', 'comment_created': datetime.datetime(2020, 6, 25, 11, 55, 42, tzinfo=datetime.timezone.utc), 'commenter': 'rpl', 'type': 'User'}, {'comment_id': 445507258, 'comment_body': 'I would try to be consistent with the control messages that the extension pages exchange over the WebExtensions messaging API, most of the other messages are now using a `requestType` property to clearly state which kind of messages is being send (or received) and so this message could be:\r\n```\r\n{ requestType: ""..."", logs: ... }\r\n```\r\n\r\nAre these new logs appended to an array of logs by the received? If that is the case, maybe ""appendLogs"" could be a slightly better name than ""updateLogs"" for the `requestType` property of this message.', 'comment_created': datetime.datetime(2020, 6, 25, 12, 4, 30, tzinfo=datetime.timezone.utc), 'commenter': 'rpl', 'type': 'User'}, {'comment_id': 445508541, 'comment_body': ""Nit: `const listener = ...` doesn't seem to be really needed, we could return the arrow function directly."", 'comment_created': datetime.datetime(2020, 6, 25, 12, 7, 11, tzinfo=datetime.timezone.utc), 'commenter': 'rpl', 'type': 'User'}, {'comment_id': 445509737, 'comment_body': ""This method return a new listener every time it is called, and so `createLogListener` may be a better name, because it would make immediately clear that:\r\n- this method isn't a log listener on its own, it create a listener and return it\r\n- the method returns a new listener at every call (instead of returning always the same listener function)  "", 'comment_created': datetime.datetime(2020, 6, 25, 12, 9, 26, tzinfo=datetime.timezone.utc), 'commenter': 'rpl', 'type': 'User'}, {'comment_id': 445510415, 'comment_body': 'The lines that follows seems to be already showing this, and so this inline comment may not be really needed.', 'comment_created': datetime.datetime(2020, 6, 25, 12, 10, 43, tzinfo=datetime.timezone.utc), 'commenter': 'rpl', 'type': 'User'}, {'comment_id': 445512792, 'comment_body': 'what is the purpose of this method? \r\nit seems to only be used in a test (and in the test itself seems to only use it to test that it returns the extensionMapList property).\r\n\r\nIt looks like it could be removed.', 'comment_created': datetime.datetime(2020, 6, 25, 12, 15, 35, tzinfo=datetime.timezone.utc), 'commenter': 'rpl', 'type': 'User'}, {'comment_id': 445523221, 'comment_body': 'I have the feeling that we could simplify this part a lot by not trying to make this class to support use cases that we are not supporting yet (monitor a subset of extensions or change the extension monitored on the fly).\r\n\r\nAt the moment we are only supporting ""start monitor"" and ""stop monitor"" all extensions and so if I\'m not mistaken:\r\n\r\n- `modifyMonitor` could be removed (it is just used in tests at the moment)\r\n- `startMonitor` could be check if it is already monitor extensions and if it is not then just call `getAllExtensions` and then add new listeners for those extensions\r\n- `stopMonitor` and `stopMonitorAll` combined in a single `stopMonitor` method that goes through the map and unregister all listeners\r\n\r\nOnce we decide to support some other use case (e.g. start or stop monitoring a subset of extensions) we can decide how to change these methods (e.g. likely adding a parameter to startMonitor/stopMonitor and change the logic a bit, etc.), but at the moment I would keep the design as simple and possible.', 'comment_created': datetime.datetime(2020, 6, 25, 12, 35, 15, tzinfo=datetime.timezone.utc), 'commenter': 'rpl', 'type': 'User'}, {'comment_id': 445523489, 'comment_body': ""This is marked as async but it doesn't seem to be awaiting on anything."", 'comment_created': datetime.datetime(2020, 6, 25, 12, 35, 43, tzinfo=datetime.timezone.utc), 'commenter': 'rpl', 'type': 'User'}, {'comment_id': 445523540, 'comment_body': ""This is marked as async but it doesn't seem to be awaiting on anything."", 'comment_created': datetime.datetime(2020, 6, 25, 12, 35, 48, tzinfo=datetime.timezone.utc), 'commenter': 'rpl', 'type': 'User'}, {'comment_id': 445526890, 'comment_body': ""Based on one of my other review comments this method is likely to just go away, but I wanted to point out two things:\r\n- `setExtensions` does seem a name that could be a bit misleading for a method that is actually iterating of the array and calling startMonitor with each extension it (in other word its name doesn't suggest what the method is really going to do)\r\n- returning `Promise.resolve('ext-monitor-started')` doesn't seem really useful, the caller would need to expect this method to return a promise and which value to expect"", 'comment_created': datetime.datetime(2020, 6, 25, 12, 41, 42, tzinfo=datetime.timezone.utc), 'commenter': 'rpl', 'type': 'User'}, {'comment_id': 445527771, 'comment_body': 'Nit, `hasActivityListeners` may be a slightly better name for this method.', 'comment_created': datetime.datetime(2020, 6, 25, 12, 43, 10, tzinfo=datetime.timezone.utc), 'commenter': 'rpl', 'type': 'User'}, {'comment_id': 445529073, 'comment_body': 'As I described in a bit more detail in another review comment, I think that `startMonitor` could be the method that get all extension and add listeners for their activity logs, and so I think that this method could be basically removed once `startMonitor` does cover that role.', 'comment_created': datetime.datetime(2020, 6, 25, 12, 45, 18, tzinfo=datetime.timezone.utc), 'commenter': 'rpl', 'type': 'User'}, {'comment_id': 445532019, 'comment_body': 'It seems that method may just return the object without using Promise.resolve.\r\n\r\nNit, instead of calling the property `status` I think we may call it `active` as it would be easier to guess that `active` value is going to be a boolean.', 'comment_created': datetime.datetime(2020, 6, 25, 12, 50, 20, tzinfo=datetime.timezone.utc), 'commenter': 'rpl', 'type': 'User'}, {'comment_id': 445532223, 'comment_body': 'Nit, not need for async here', 'comment_created': datetime.datetime(2020, 6, 25, 12, 50, 39, tzinfo=datetime.timezone.utc), 'commenter': 'rpl', 'type': 'User'}, {'comment_id': 445533124, 'comment_body': 'No need for async and I think we could just return the object.', 'comment_created': datetime.datetime(2020, 6, 25, 12, 52, 13, tzinfo=datetime.timezone.utc), 'commenter': 'rpl', 'type': 'User'}, {'comment_id': 445535651, 'comment_body': ""This would not tell us what unexpected message we received and so it would not help with investigating the issue.\r\n\r\nI would suggest to handle the error scenario in the messageListener, where you can throw a better error message (eg. one that includes the `requestType` value) if it doesn't find a message handler function for the given requestType. "", 'comment_created': datetime.datetime(2020, 6, 25, 12, 55, 21, tzinfo=datetime.timezone.utc), 'commenter': 'rpl', 'type': 'User'}, {'comment_id': 445600589, 'comment_body': 'Nit, we can avoid to add the disabled class by using the pseudo classes in the CSS (See the MDN doc page for the [:disabled](https://developer.mozilla.org/en-US/docs/Web/CSS/:disabled) pseudo class)  ', 'comment_created': datetime.datetime(2020, 6, 25, 14, 27, 35, tzinfo=datetime.timezone.utc), 'commenter': 'rpl', 'type': 'User'}, {'comment_id': 445626841, 'comment_body': 'Here, it would be better to use class names that reflects the meaning of the state the element should represent instead of the particular style being currently used, in other words: `""green""` could be `""success""` and `""red""` could be `""failure""` (or something like that).\r\n\r\nThis way if we change ideas about which style to apply, we don\'t need to change the class names being assigned to the elements.  ', 'comment_created': datetime.datetime(2020, 6, 25, 15, 2, 24, tzinfo=datetime.timezone.utc), 'commenter': 'rpl', 'type': 'User'}, {'comment_id': 445628842, 'comment_body': 'Nit, any reasons to use the ids of the elements instead of the references to the DOM elements that the class instance does set as properties in the constructor?', 'comment_created': datetime.datetime(2020, 6, 25, 15, 5, 6, tzinfo=datetime.timezone.utc), 'commenter': 'rpl', 'type': 'User'}, {'comment_id': 445629759, 'comment_body': ""Nit , why not just resolving to a boolean so that we don't need to compare it with a particular string value?\r\n(same comment on stopMonitor)."", 'comment_created': datetime.datetime(2020, 6, 25, 15, 6, 20, tzinfo=datetime.timezone.utc), 'commenter': 'rpl', 'type': 'User'}, {'comment_id': 445630240, 'comment_body': 'Nit, when is the `error` object going to be undefined here?\r\n(same comment on stopMonitor).', 'comment_created': datetime.datetime(2020, 6, 25, 15, 7, 1, tzinfo=datetime.timezone.utc), 'commenter': 'rpl', 'type': 'User'}, {'comment_id': 445637832, 'comment_body': 'In the test we are currently loading this HTML file to inject it into the JSDOM document and test the behaviors we expect, in that case we do not need (and we do not want) JSDOM to load this tag script because in the test we do create the Popup instance as part of the test.\r\n\r\nTo avoid loading the script tags when we do inject the content of the popup body as part of the test we could move the script tag into the head and add a `defer` attribute to it (so that it will basically behave as it does when the script tag is at the end of the body tag content).\r\n\r\nLooking to the docs for the [`defer` attribute on MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/script#attr-defer) it looks that we don\'t even need to explicitly set the `defer` attribute of this `script` tag because it is `type=""module` and it should be deferred automatically (which means that it would be executed after the document has been parsed, but before DOMContentLoad is fired, which is what we need given that popup.js is listening for that event and Popup class constructor does expect to be able to retrieve the DOM elements that are part of the document body).', 'comment_created': datetime.datetime(2020, 6, 25, 15, 17, 41, tzinfo=datetime.timezone.utc), 'commenter': 'rpl', 'type': 'User'}, {'comment_id': 445739963, 'comment_body': 'Thanks for explaining this.', 'comment_created': datetime.datetime(2020, 6, 25, 18, 0, 46, tzinfo=datetime.timezone.utc), 'commenter': 'atiqueahmedziad', 'type': 'User'}, {'comment_id': 445740374, 'comment_body': 'it will not. :-) so removed the optional.', 'comment_created': datetime.datetime(2020, 6, 25, 18, 1, 29, tzinfo=datetime.timezone.utc), 'commenter': 'atiqueahmedziad', 'type': 'User'}, {'comment_id': 445740512, 'comment_body': 'Yeah made it boolean.', 'comment_created': datetime.datetime(2020, 6, 25, 18, 1, 42, tzinfo=datetime.timezone.utc), 'commenter': 'atiqueahmedziad', 'type': 'User'}, {'comment_id': 445740766, 'comment_body': 'using it now :-) Thanks for noticing.', 'comment_created': datetime.datetime(2020, 6, 25, 18, 2, 9, tzinfo=datetime.timezone.utc), 'commenter': 'atiqueahmedziad', 'type': 'User'}, {'comment_id': 445740941, 'comment_body': 'Yeah, thanks.', 'comment_created': datetime.datetime(2020, 6, 25, 18, 2, 28, tzinfo=datetime.timezone.utc), 'commenter': 'atiqueahmedziad', 'type': 'User'}, {'comment_id': 445741020, 'comment_body': 'Done. :-) ', 'comment_created': datetime.datetime(2020, 6, 25, 18, 2, 37, tzinfo=datetime.timezone.utc), 'commenter': 'atiqueahmedziad', 'type': 'User'}, {'comment_id': 445769515, 'comment_body': 'I am not been able to get the object when `sendMessage` is resolving, if I do \r\n```\r\nreturn {\r\n     active: this.hasActivityListeners(),\r\n };\r\n```\r\nDid you mean to do this ?', 'comment_created': datetime.datetime(2020, 6, 25, 18, 50, 3, tzinfo=datetime.timezone.utc), 'commenter': 'atiqueahmedziad', 'type': 'User'}, {'comment_id': 445775418, 'comment_body': 'Some notes on this test (but most of this is valid in general when you are writing a test):\r\n\r\n- try to use a test description that more clearly state what is the point of the test, if there is no clear point maybe that isn\'t really worth testing or we may be looking from ""the wrong angle"", e.g. for this test the description I would choose would probably be something like `\'getAllExtensions should return all extension but themes and self\'`.  \r\n\r\n- If the test that does contain the same code (or the main point of the code) being tested there is likely something wrong, in this case `demoExtensions.filter(...)` is basically another code of half of the tested code, e.g. in this test instead of defining `selfId`, `demoExtension` and than filteredExts generated with the same code being tested you could do the opposite and compose the array of all extensions by concatenating the self extension, a theme extension and the array of extension that you would expect as a result of the method, which in code would be something like:\r\n```js\r\n  const selfExt = { ... };\r\n  const themeExt = { ... };\r\n  const expectedExts = [ ... ];\r\n  const allExts = [...expectedExts, themeExt, selfExt];\r\n```\r\n\r\nBesides that, I also usually try to keep your test as short and focused as possible (but without hurting the readability).\r\n\r\nBy putting all the above points together, this test would looks more or less like this:\r\n```js\r\ntest(\'getAllExtensions does filter themes and self\', async () => {\r\n  const selfExt = { id: \'ext4@test\', type: \'extension\' };\r\n  const themeExt = { id: \'theme@test\', type: \'theme\' };\r\n  const expectedExts = [\r\n    { id: \'ext1@test\', type: \'extension\' },\r\n    { id: \'ext2@test\', type: \'extension\' },\r\n  ];\r\n  const allExts = [...expectedExts, themeExt, selfExt];\r\n  const getAll = jest.fn(() => Promise.resolve(allExts));\r\n  const getSelf = jest.fn(() => Promise.resolve(selfExt));\r\n\r\n  window.browser = {\r\n    management: { getAll, getSelf },\r\n  };\r\n\r\n  const extensionsPromise = ExtListen.getAllExtensions();\r\n  await expect(extensionsPromise).resolves.toMatchObject(expectedExts);\r\n});\r\n```', 'comment_created': datetime.datetime(2020, 6, 25, 19, 0, 55, tzinfo=datetime.timezone.utc), 'commenter': 'rpl', 'type': 'User'}, {'comment_id': 445777449, 'comment_body': 'Nit, `getAllExtensions` is only being used by ext-monitor.js, at the moment I would move it there.', 'comment_created': datetime.datetime(2020, 6, 25, 19, 4, 53, tzinfo=datetime.timezone.utc), 'commenter': 'rpl', 'type': 'User'}, {'comment_id': 445786583, 'comment_body': ""Nit, browser.runtime.sendMessage does already return a promise and so we don't need to make this function async or awaiting on the result that runtime.sendMessage returns, both startMonitor and stopMonitor could be written as:\r\n```\r\nexport function startMonitor() {\r\n  return browser.runtime.sendMessage({...};\r\n}\r\n```"", 'comment_created': datetime.datetime(2020, 6, 25, 19, 22, 35, tzinfo=datetime.timezone.utc), 'commenter': 'rpl', 'type': 'User'}, {'comment_id': 445794857, 'comment_body': ""Nit, I didn't notice that this method and the ext-listen method that it does call have the exact same name, just to use a slightly different name I would call this one `handleStartMonitor` (and the other ones `handleStopMonitor` and `handleViewActivityLog`)"", 'comment_created': datetime.datetime(2020, 6, 25, 19, 39, 42, tzinfo=datetime.timezone.utc), 'commenter': 'rpl', 'type': 'User'}, {'comment_id': 445801016, 'comment_body': 'I guess this should now resolve true, right?', 'comment_created': datetime.datetime(2020, 6, 25, 19, 52, 8, tzinfo=datetime.timezone.utc), 'commenter': 'rpl', 'type': 'User'}, {'comment_id': 445808271, 'comment_body': 'This is a very long test to only test a small number of lines :-)\r\n\r\nWe could rip it out or at least try to make it smaller, e.g. all this part is checking something that is already being tested in another test case, and in this test we are only interested in checking that the ""view logs"" button is going to open the extension page, and so we could reduce it a lot by just doing and checking the bare minimum, e.g.\r\n```\r\n  const viewExtPageBtn = popup.viewActivityLogBtn;\r\n  getMonitorStatusFn.mockResolvedValue(false);\r\n  await popup.init();\r\n  viewExtPageBtn.click();\r\n  expect(openActivityLogPageFn).toHaveBeenCalled();\r\n```\r\n\r\nBesides that, (in general not just related to this particular test case) don\'t worry too much about getting the full coverage for now, we are not going to block the PR until the coverage is 100%, as long as the code is nice and clean and does what it should in the most simple way possible we are going to merge the PR and move forward.\r\n\r\nWriting these unit tests is currently meant to help you to:\r\n\r\n- learn more about testing (which is always useful)\r\n- re-look to your code from other perspectives, find issues that you may have missed (and eventually test explicitly the part that matter the most)', 'comment_created': datetime.datetime(2020, 6, 25, 20, 6, 38, tzinfo=datetime.timezone.utc), 'commenter': 'rpl', 'type': 'User'}, {'comment_id': 445869563, 'comment_body': 'Yeah, sorry I missed it. Fixed now.', 'comment_created': datetime.datetime(2020, 6, 25, 22, 17, 59, tzinfo=datetime.timezone.utc), 'commenter': 'atiqueahmedziad', 'type': 'User'}, {'comment_id': 445869609, 'comment_body': 'Done :-)', 'comment_created': datetime.datetime(2020, 6, 25, 22, 18, 7, tzinfo=datetime.timezone.utc), 'commenter': 'atiqueahmedziad', 'type': 'User'}, {'comment_id': 445869651, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 6, 25, 22, 18, 14, tzinfo=datetime.timezone.utc), 'commenter': 'atiqueahmedziad', 'type': 'User'}, {'comment_id': 445869735, 'comment_body': 'done.', 'comment_created': datetime.datetime(2020, 6, 25, 22, 18, 24, tzinfo=datetime.timezone.utc), 'commenter': 'atiqueahmedziad', 'type': 'User'}, {'comment_id': 445869900, 'comment_body': 'Thanks for explaining. I have updated the other test explanation too (where I felt necessary).', 'comment_created': datetime.datetime(2020, 6, 25, 22, 18, 53, tzinfo=datetime.timezone.utc), 'commenter': 'atiqueahmedziad', 'type': 'User'}, {'comment_id': 445874228, 'comment_body': 'Thanks for explaining :-) ', 'comment_created': datetime.datetime(2020, 6, 25, 22, 31, 20, tzinfo=datetime.timezone.utc), 'commenter': 'atiqueahmedziad', 'type': 'User'}, {'comment_id': 446056404, 'comment_body': ""It looks that this part doesn't really need to be wrapped in a promise, any reason for doing that?\r\nNit, it may not be even needed to have this function to return true because it is explicitly rejecting when it couldn't start monitoring because the monitor was already enabled (and this is never going to return false)."", 'comment_created': datetime.datetime(2020, 6, 26, 8, 54, 7, tzinfo=datetime.timezone.utc), 'commenter': 'rpl', 'type': 'User'}, {'comment_id': 446056693, 'comment_body': ""Same here, it looks that the Promise wrapper isn't really needed and we may not need to return a boolean (given that we never return false)."", 'comment_created': datetime.datetime(2020, 6, 26, 8, 54, 39, tzinfo=datetime.timezone.utc), 'commenter': 'rpl', 'type': 'User'}, {'comment_id': 446062138, 'comment_body': ""At the moment all this seems to be simple enough to be rolled into a `switch` statement in messageListener, but I'm fine if we want to keep it as it is for now and rethink about it when we are adding more pieces of the architecture.\r\n\r\nNit, if we are keeping it as it, all these could be one lines, by writing them like:\r\n```js\r\n  messageHandlers = {\r\n    getMonitorStatus: () => ({ active: this.hasActivityListeners() }),\r\n    startMonitor: () => this.startMonitor(),\r\n    stopMonitor: () => this.stopMonitor(),\r\n    sendAllLogs: () => ({ existingLogs: this.logs }),\r\n  };\r\n```"", 'comment_created': datetime.datetime(2020, 6, 26, 9, 5, 29, tzinfo=datetime.timezone.utc), 'commenter': 'rpl', 'type': 'User'}, {'comment_id': 446068234, 'comment_body': 'I\'ve been thinking about this a bit more after I suggested you that this could have been an async function yesterday:\r\n\r\nat the moment this may be fine because this is the only `browser.runtime.onMessage` listener that the extension is registering, but at some point this may become confusing because the WebExtensions internals will assume that this messageListener is always handling any message it receives (because it always return a promise).\r\n\r\nWe may consider this a follow up to take care of in one of the next pull request, but let\'s keep it in mind.\r\n\r\nTo avoid this we may do something like this:\r\n- do not make this function as async\r\n- include another property that make it explicitly which module is supposed to handle the message (e.g. a `requestTo` property)\r\n- return earlier if the message wasn\'t meant to be handled by this message listener\r\n\r\nwhich would look like more or less like this:\r\n```\r\nmessageListener = async (message) => {\r\n  const { requestType, requestTo } = message;\r\n  if (requestTo !== ""ext-monitor) {\r\n    return;\r\n  }\r\n\r\n  if (requestType in this.messageHandlers) {\r\n    try {\r\n      return Promise.resolve(this.messageHandlers[requestType]());\r\n    } catch (err) {\r\n      return Promise.reject(err);\r\n    }\r\n  } else {\r\n    return Promise.reject(new Error(\'...\'));\r\n  }\r\n}\r\n```\r\n\r\nand then include `requestTo: \'ext-monitor\'` in the methods defined in ext-listen.js that are sending the control message that this module should handle.', 'comment_created': datetime.datetime(2020, 6, 26, 9, 17, 36, tzinfo=datetime.timezone.utc), 'commenter': 'rpl', 'type': 'User'}, {'comment_id': 446072619, 'comment_body': ""Nit, setting the value to 'disabled' is fine, but I usually prefer to set it to `true`."", 'comment_created': datetime.datetime(2020, 6, 26, 9, 25, 53, tzinfo=datetime.timezone.utc), 'commenter': 'rpl', 'type': 'User'}, {'comment_id': 446073986, 'comment_body': ""Nit, It doesn't seem that startMonitor can actually ever return false (it rejects if it can't start the monitor because it is already active), and so this may be likely simplified to just do:\r\n```js\r\ntry {\r\n  await startMonitor();\r\n  this.render();\r\n} catch (error) {\r\n  this.renderErrorMsg(error.message);\r\n}\r\n```\r\n\r\nsame in handleStopMonitor."", 'comment_created': datetime.datetime(2020, 6, 26, 9, 28, 38, tzinfo=datetime.timezone.utc), 'commenter': 'rpl', 'type': 'User'}, {'comment_id': 446076846, 'comment_body': ""Nit, as an alternative this assertion could use [`hasAttribute`](https://developer.mozilla.org/en-US/docs/Web/API/Element/hasAttribute) or assert the value set on the [InputElement's `disabled` property](https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement) (no really needed to changed, I just wanted to mention it) "", 'comment_created': datetime.datetime(2020, 6, 26, 9, 34, 25, tzinfo=datetime.timezone.utc), 'commenter': 'rpl', 'type': 'User'}, {'comment_id': 446319048, 'comment_body': 'Thanks for telling this. I think `hasAttribute` is more appropriate in this case, so I made these changes with `hasAttribute` ', 'comment_created': datetime.datetime(2020, 6, 26, 17, 34, 12, tzinfo=datetime.timezone.utc), 'commenter': 'atiqueahmedziad', 'type': 'User'}]","[{'commit_sha': '03f343152fd8b09088142f4804cc42f533bea4bf', 'committer_username': 'atiqueahmedziad', 'committer_name': 'Atique Ahmed Ziad', 'committer_email': None, 'commit_date': datetime.datetime(2014, 8, 5, 15, 37, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2cd272b38759dab580a324b269751bdfb8d993cb', 'committer_username': 'atiqueahmedziad', 'committer_name': 'Atique Ahmed Ziad', 'committer_email': None, 'commit_date': datetime.datetime(2014, 8, 5, 15, 37, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '83f3b3e7fa34f6ff3957783016f5226c081a9d92', 'committer_username': 'atiqueahmedziad', 'committer_name': 'Atique Ahmed Ziad', 'committer_email': None, 'commit_date': datetime.datetime(2014, 8, 5, 15, 37, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b50a2cb8e5a89d70f2bddbcb1313cdf38d2f9c90', 'committer_username': 'atiqueahmedziad', 'committer_name': 'Atique Ahmed Ziad', 'committer_email': None, 'commit_date': datetime.datetime(2014, 8, 5, 15, 37, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9fc51b12ad8725838858ad28eae848335dc5fd98', 'committer_username': 'atiqueahmedziad', 'committer_name': 'Atique Ahmed Ziad', 'committer_email': None, 'commit_date': datetime.datetime(2014, 8, 5, 15, 37, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7aaa1e6fee5ceb68b2109b24e0e3c301834a6630', 'committer_username': 'atiqueahmedziad', 'committer_name': 'Atique Ahmed Ziad', 'committer_email': None, 'commit_date': datetime.datetime(2014, 8, 5, 15, 37, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '746122b0ebe1fc61f298ddc50d7e4cf69bdf0a4e', 'committer_username': 'atiqueahmedziad', 'committer_name': 'Atique Ahmed Ziad', 'committer_email': None, 'commit_date': datetime.datetime(2014, 8, 5, 15, 37, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4a8c71ba9eb53d4d9b4b96da80e74268c7fb6f69', 'committer_username': 'atiqueahmedziad', 'committer_name': 'Atique Ahmed Ziad', 'committer_email': None, 'commit_date': datetime.datetime(2014, 8, 5, 15, 37, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f41a67a1cb784f89aada62237293b644f9b5262b', 'committer_username': 'atiqueahmedziad', 'committer_name': 'Atique Ahmed Ziad', 'committer_email': None, 'commit_date': datetime.datetime(2014, 8, 5, 15, 37, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f7041ba1c95c6fa800d02a0de58314e0666ca623', 'committer_username': 'atiqueahmedziad', 'committer_name': 'Atique Ahmed Ziad', 'committer_email': None, 'commit_date': datetime.datetime(2014, 8, 5, 15, 37, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '253d4db556a05cb9116f17fb1b6867edcfe812cb', 'committer_username': 'atiqueahmedziad', 'committer_name': 'Atique Ahmed Ziad', 'committer_email': None, 'commit_date': datetime.datetime(2014, 8, 5, 15, 37, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'eb10df7504be3bcf734b29a57b6da9df60658294', 'committer_username': 'atiqueahmedziad', 'committer_name': 'Atique Ahmed Ziad', 'committer_email': None, 'commit_date': datetime.datetime(2014, 8, 5, 15, 37, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8ad30f18f931de739c86a6d04dbbd89db43a22e2', 'committer_username': 'atiqueahmedziad', 'committer_name': 'Atique Ahmed Ziad', 'committer_email': None, 'commit_date': datetime.datetime(2014, 8, 5, 15, 37, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3dd35711abb082dab91b1a76be32e91ec91cbd74', 'committer_username': 'atiqueahmedziad', 'committer_name': 'Atique Ahmed Ziad', 'committer_email': None, 'commit_date': datetime.datetime(2014, 8, 5, 15, 37, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0c25d1a8182b91e12a6242a3c05427d6135609dd', 'committer_username': 'atiqueahmedziad', 'committer_name': 'Atique Ahmed Ziad', 'committer_email': None, 'commit_date': datetime.datetime(2014, 8, 5, 15, 37, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4845aad967e4e3102526ac1d482be0cc7c9a2296', 'committer_username': 'atiqueahmedziad', 'committer_name': 'Atique Ahmed Ziad', 'committer_email': None, 'commit_date': datetime.datetime(2014, 8, 5, 15, 37, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '571220c81f82cbc4df3f283f7517f7f626b9c3ce', 'committer_username': 'atiqueahmedziad', 'committer_name': 'Atique Ahmed Ziad', 'committer_email': None, 'commit_date': datetime.datetime(2014, 8, 5, 15, 37, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1e6f92257b068bbf5db23705a0a4522f64d1d8f2', 'committer_username': 'atiqueahmedziad', 'committer_name': 'Atique Ahmed Ziad', 'committer_email': None, 'commit_date': datetime.datetime(2014, 8, 5, 15, 37, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7b2e3fd315587a9218d33e56572b95f162fe0584', 'committer_username': 'atiqueahmedziad', 'committer_name': 'Atique Ahmed Ziad', 'committer_email': None, 'commit_date': datetime.datetime(2014, 8, 5, 15, 37, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '035fdbadf9fb92543ae6071cebd51b1de559a777', 'committer_username': 'atiqueahmedziad', 'committer_name': 'Atique Ahmed Ziad', 'committer_email': None, 'commit_date': datetime.datetime(2014, 8, 5, 15, 37, 42, tzinfo=datetime.timezone.utc)}]",Atique Ahmed Ziad,8364578,,User,,72,,3,42
441285656,test: console messages should cause eslint error,console statements will throw error in eslint check.,True,5,https://api.github.com/repos/mozilla/extension-activity-monitor/pulls/5,https://github.com/mozilla/extension-activity-monitor/pull/5,closed,4,1,2,2,0,0,0,0,[],2020-06-29 08:34:35+00:00,2020-06-29 16:44:14+00:00,29379.0,8:09:39,[],"[{'commit_sha': '55f605c9dd552c60163bbbbf0030ff9349d0176e', 'committer_username': 'atiqueahmedziad', 'committer_name': 'Atique Ahmed Ziad', 'committer_email': None, 'commit_date': datetime.datetime(2014, 8, 5, 15, 37, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dbf5c87125c2fd60f293c33571c793ceddfc0fe7', 'committer_username': 'atiqueahmedziad', 'committer_name': 'Atique Ahmed Ziad', 'committer_email': None, 'commit_date': datetime.datetime(2014, 8, 5, 15, 37, 42, tzinfo=datetime.timezone.utc)}]",Atique Ahmed Ziad,8364578,,User,,72,,3,42
441316077,chore: added extension installation instructions,Added extension installation instruction and `web-ext` as devDependency.,True,6,https://api.github.com/repos/mozilla/extension-activity-monitor/pulls/6,https://github.com/mozilla/extension-activity-monitor/pull/6,closed,3778,111,3,1,0,13,0,0,[],2020-06-29 10:35:48+00:00,2020-06-29 18:30:58+00:00,28510.0,7:55:10,"[{'comment_id': 446891170, 'comment_body': ""You don't have to manually specify the binary location. If you use `-f nightly` (`-f` is short for `--firefox-binary`), then `web-ext` (or rather its dependency at https://github.com/mozilla-jetpack/node-fx-runner ) will locate the binary. You only need to set a path if it is not in a standard location. But that user-specific location should not be hard-coded in the `package.json` file, because it will likely not work for anyone else."", 'comment_created': datetime.datetime(2020, 6, 29, 11, 15, 11, tzinfo=datetime.timezone.utc), 'commenter': 'Rob--W', 'type': 'User'}, {'comment_id': 447062583, 'comment_body': '@atiqueahmedziad if we do add a ""webExt"" property to this package.json file, as I did mention in our meeting earlier today ([also documented here in this doc page related to the web-ext cli tool](https://extensionworkshop.com/documentation/develop/getting-started-with-web-ext/#setting-option-defaults-in-a-configuration-file)), then we should be able to:\r\n- reduce this command to the bare minimum (`""start:firefox"": ""web-ext run""`)\r\n- reduce the comment suggested if the user want to pass other options to just the options that would differ (e.g. `web-ext run --firefox-binary /path/to/your/nightly/firefox`), because  all the other parameters would default to the ones specified in the configuration included in the package.json file.\r\n\r\nThe configuration to be included in the package.json should look more or less like:\r\n```json\r\n  ""devDependencies"": {\r\n    ...\r\n  },\r\n  ""webExt"": {\r\n    ""sourceDir"": ""src"",\r\n    ""run"": {\r\n      ""pref"": [""extensions.experiments.enabled=true""],\r\n      ""firefox"": ""nightly""\r\n    }\r\n  }\r\n}\r\n```\r\n\r\n\r\nGiven that this extension isn\'t going to run on anything but Firefox Desktop (at least at the moment), we may call the script just ""start"" instead of ""start:firefox"". ', 'comment_created': datetime.datetime(2020, 6, 29, 15, 34, 3, tzinfo=datetime.timezone.utc), 'commenter': 'rpl', 'type': 'User'}, {'comment_id': 447067689, 'comment_body': 'It is unrelated to this PR, but I just noticed that prettier is the only dev dependency that is using an ""exact dependency"" instead of the ""^version"" used for the other dependencies (where ""^version"" means ""Compatible with version"" and would relax the dependency to also include new patch releases, See https://docs.npmjs.com/files/package.json#dependencies for more information about the meaning of the syntax that can be used to specify the version of the dependencies).\r\n\r\nWe may want to be consistent and use the ""^version"" also for prettier, no need to rush on it, I mainly wanted to mention it. If we want to change that, I would suggest to do it in a separate pull request.', 'comment_created': datetime.datetime(2020, 6, 29, 15, 40, 53, tzinfo=datetime.timezone.utc), 'commenter': 'rpl', 'type': 'User'}, {'comment_id': 447070643, 'comment_body': 'Nit (just a couple of tweaks, and a shorter command to override just the firefox binary, if we do include the rest of the options in the web-ext configuration as suggested in my previous comment): \r\n\r\n_NOTE_: You may need to run Firefox Nightly once to let the above command to auto-discovery where the Firefox Nightly binary is located in your system.\r\nAlternatively the Firefox binary location can be provided manually on the command line:\r\n```\r\n$ web-ext run -f /path/to/firefox-nightly/firefox\r\n```\r\n', 'comment_created': datetime.datetime(2020, 6, 29, 15, 45, 9, tzinfo=datetime.timezone.utc), 'commenter': 'rpl', 'type': 'User'}, {'comment_id': 447072658, 'comment_body': 'Nit, we could merge the two phrases I guess: ""This is a privileged Firefox extensions that uses the `activityLog` API to monitor the activities of the other installed extensions."" ', 'comment_created': datetime.datetime(2020, 6, 29, 15, 48, 7, tzinfo=datetime.timezone.utc), 'commenter': 'rpl', 'type': 'User'}, {'comment_id': 447073532, 'comment_body': 'Nit:\r\n- Clone ...\r\n- Install ...\r\n- [optional] `npm ci`, to install dev dependency to develop a patch or to run the extension using the web-ext dependency ', 'comment_created': datetime.datetime(2020, 6, 29, 15, 49, 33, tzinfo=datetime.timezone.utc), 'commenter': 'rpl', 'type': 'User'}, {'comment_id': 447074542, 'comment_body': 'For the Manual Installation it may be worth to mention explicitly that ""extensions.experiments.enabled"" should be set to true from about:config.', 'comment_created': datetime.datetime(2020, 6, 29, 15, 50, 57, tzinfo=datetime.timezone.utc), 'commenter': 'rpl', 'type': 'User'}, {'comment_id': 447125290, 'comment_body': 'Sorry, I should have asked about it since I was confused with setting up `pref`. Thanks for explaining. Added it.', 'comment_created': datetime.datetime(2020, 6, 29, 17, 11, 17, tzinfo=datetime.timezone.utc), 'commenter': 'atiqueahmedziad', 'type': 'User'}, {'comment_id': 447125409, 'comment_body': 'Yeah, will send a pr :-)', 'comment_created': datetime.datetime(2020, 6, 29, 17, 11, 29, tzinfo=datetime.timezone.utc), 'commenter': 'atiqueahmedziad', 'type': 'User'}, {'comment_id': 447125593, 'comment_body': 'Thanks for the suggestion. Added it.', 'comment_created': datetime.datetime(2020, 6, 29, 17, 11, 50, tzinfo=datetime.timezone.utc), 'commenter': 'atiqueahmedziad', 'type': 'User'}, {'comment_id': 447125720, 'comment_body': 'Thanks for the suggestion. Description updated.', 'comment_created': datetime.datetime(2020, 6, 29, 17, 12, 6, tzinfo=datetime.timezone.utc), 'commenter': 'atiqueahmedziad', 'type': 'User'}, {'comment_id': 447125980, 'comment_body': 'Added it :-) ', 'comment_created': datetime.datetime(2020, 6, 29, 17, 12, 35, tzinfo=datetime.timezone.utc), 'commenter': 'atiqueahmedziad', 'type': 'User'}, {'comment_id': 447126565, 'comment_body': 'I have updated this part to a single way for Manual Installation and mentioned the `extensions.experiments.enabled` part. Is this okay?', 'comment_created': datetime.datetime(2020, 6, 29, 17, 13, 42, tzinfo=datetime.timezone.utc), 'commenter': 'atiqueahmedziad', 'type': 'User'}]","[{'commit_sha': '6c92c585d2aa56756ecdbb0029b68768fea8f3b4', 'committer_username': 'atiqueahmedziad', 'committer_name': 'Atique Ahmed Ziad', 'committer_email': None, 'commit_date': datetime.datetime(2014, 8, 5, 15, 37, 42, tzinfo=datetime.timezone.utc)}]",Atique Ahmed Ziad,8364578,,User,,72,,3,42
442293006,test: disallow unsanitized code with eslint check,"As discussed, we are disallowing unsanitized code using the `eslint-plugin-no-unsanitized`.",True,8,https://api.github.com/repos/mozilla/extension-activity-monitor/pulls/8,https://github.com/mozilla/extension-activity-monitor/pull/8,closed,8,1,3,1,2,0,0,0,[],2020-06-30 21:04:22+00:00,2020-07-02 13:16:23+00:00,144721.0,"1 day, 16:12:01",[],"[{'commit_sha': '114d0272bdb9f38a398e67a6f41422752ce44e76', 'committer_username': 'atiqueahmedziad', 'committer_name': 'Atique Ahmed Ziad', 'committer_email': None, 'commit_date': datetime.datetime(2014, 8, 5, 15, 37, 42, tzinfo=datetime.timezone.utc)}]",Atique Ahmed Ziad,8364578,,User,,72,,3,42
434452228,feat: activitylog extension page added,"In current activitylog page (extension page): 
- Display existing logs captured in background at initial loading. (method: `getExistingLogs()`)
- As long as the extension page is not destroyed, every logs captured in background will be passed to the extension page for display. (upon receiving message `eam_updateLogs`, every new log to activityLogs array)
- Logs can be saved as json file.
- ~~Logs can be loaded as json file.~~ (deferred to a separate pull request)

**NOTE**: There is a lot to clean up in the code. For now, it just serves the above purposes. I will clean it up very soon.",True,4,https://api.github.com/repos/mozilla/extension-activity-monitor/pulls/4,https://github.com/mozilla/extension-activity-monitor/pull/4,closed,282,4,7,4,0,54,0,0,[],2020-06-15 10:44:49+00:00,2020-07-06 12:15:04+00:00,1819815.0,"21 days, 1:30:15","[{'comment_id': 447643144, 'comment_body': ""@atiqueahmedziad As we discussed yesterday during our weekly meeting, DOM API methods that accept non sanitized HTML content should be avoided, because they would open the monitor extension to XSS attacks originated by one of the monitored extensions.\r\n\r\nLet's remove these ones (e.g. by creating the `td` elements and then filling them with the expected text content using the textContent property).\r\n\r\nAs I did mention in the meeting we may also add [eslint-plugin-no-unsanitized](https://github.com/mozilla/eslint-plugin-no-unsanitized) to the dev dependencies and then enable it in the eslint configuration used in this repository, as an additional way to prevent this kind of dangerous code pattern to slip into a pull request without being noticed."", 'comment_created': datetime.datetime(2020, 6, 30, 12, 28, 9, tzinfo=datetime.timezone.utc), 'commenter': 'rpl', 'type': 'User'}, {'comment_id': 447985021, 'comment_body': ""To make this less complicated, I am not using `rowIndex` property of table's row. Instead, I am adding an attribute. Since we are using `Array.push` to store logs and table rows are being generated in the opposite way (the latest rows stays at top). I can make the adjustment using `Array.unsift` and use `rowIndex`, if you say. :-)   "", 'comment_created': datetime.datetime(2020, 6, 30, 21, 18, 21, tzinfo=datetime.timezone.utc), 'commenter': 'atiqueahmedziad', 'type': 'User'}, {'comment_id': 447985515, 'comment_body': 'Thanks for mentioning again. I have opened pr #8 to add ""eslint-plugin-no-unsanitized"". :-) ', 'comment_created': datetime.datetime(2020, 6, 30, 21, 19, 24, tzinfo=datetime.timezone.utc), 'commenter': 'atiqueahmedziad', 'type': 'User'}, {'comment_id': 448532783, 'comment_body': 'Nit, I guess there is a typo in this class name: `activty` -> `activity` (same typo is in the CSS as well).', 'comment_created': datetime.datetime(2020, 7, 1, 18, 6, 55, tzinfo=datetime.timezone.utc), 'commenter': 'rpl', 'type': 'User'}, {'comment_id': 448850790, 'comment_body': 'Nit, we could use querySelector here and also at line 13 and 15 instead of getElementsByClassName()[0]/getElementsByTagName()[0]', 'comment_created': datetime.datetime(2020, 7, 2, 8, 53, 3, tzinfo=datetime.timezone.utc), 'commenter': 'rpl', 'type': 'User'}, {'comment_id': 448852488, 'comment_body': 'Nit, I would move this into the constructor to have a single place where to look for the expected instance properties.', 'comment_created': datetime.datetime(2020, 7, 2, 8, 55, 53, tzinfo=datetime.timezone.utc), 'commenter': 'rpl', 'type': 'User'}, {'comment_id': 448855152, 'comment_body': 'At the moment we do only have one message to handle, the one that appends logs, and so I think that for now we could just do this inside the runtime.onMessage listener (and defer introducing an abstraction to expand the message that this page will handle to the point where we do have some other actual type of message that this page is meant to handle).\r\n\r\nAlso, `renderTable` seems a bit misleading as a name for a function that is actually ""adding more rows to the table"", based on the name one would assume that it would re-render the entire table, which isn\'t the case.', 'comment_created': datetime.datetime(2020, 7, 2, 9, 0, 3, tzinfo=datetime.timezone.utc), 'commenter': 'rpl', 'type': 'User'}, {'comment_id': 448858089, 'comment_body': 'we should be able to get the row that include the clicked element by just using something like  `event.target.closest(""tr[index]"")`, this should get the tr element also when event.target is the tr element itself.\r\n\r\nYou can try this interactively by using the devtools webconsole and inspector:\r\n- go to the inspector and select the element that would be the one clicked (the one that will be could receive as the `event.target`)\r\n- then switch to the console (or open the split console, using the ""Esc"" key) and run the js snippet: `$0.closest(""tr[index]"")` (where $0 represents, in the webconsole, the element currently selected in the inspector, ""tr[index]"" select the closest parent node that is has ""TR"" as its tag name and it does also have an ""index"" attribute)\r\n- check that the DOM element returned by calling closest is the one we would expect\r\n\r\ntry this for:\r\n- an element inside the row (e.g. a TD element)\r\n- the row itself (a TR element with the index attribute)\r\n- another arbitrary element that is outside of a row (and in this case we expect closest to return null)', 'comment_created': datetime.datetime(2020, 7, 2, 9, 4, 52, tzinfo=datetime.timezone.utc), 'commenter': 'rpl', 'type': 'User'}, {'comment_id': 448888288, 'comment_body': ""This isn't right, when the activity log pages receives a set of logs all at ones (e.g. the one collected in the background page while the activity log page wasn't open yet), this would create rows with the same index (that will be the length of the array of logs received all at once).\r\n\r\nYou can also verify this by using an STR (steps to reproduce) like the following ones:\r\n- run Firefox with the extension activity monitor installed\r\n- install another extension (e.g. HTTPSEverywhere)\r\n- start monitoring all installed extensions, and then make sure the extension monitor has already collected some activity logs for it (e.g. open HTTPSEverywhere browserAction popup and click the toggle button that set HTTPSEverywhere on and off)\r\n- open the activity log page\r\n- open the devtools inspector on the activity log page and look to the index of all the rows added for the initial set of logs collected"", 'comment_created': datetime.datetime(2020, 7, 2, 9, 56, 25, tzinfo=datetime.timezone.utc), 'commenter': 'rpl', 'type': 'User'}, {'comment_id': 448895027, 'comment_body': 'The part that loads the logs from file seems to be a bit ""out of place"" at the moment, it doesn\'t really do much in this pull request and what it does isn\'t really that useful yet (e.g. the logs loaded are not rendered as rows in the table)\r\n\r\nWe may instead defer ""load from file"" to a separate pull request and think a bit more ""what load from file should be really doing"") and have a better and more clear plan about it, e.g.:\r\nhow is the activity log page going to serve this feature to the user?\r\nhow is the user going to switch between looking to logs loaded from file and logs being collected in that session from the monitored extensions? how is the activity log page going to may make it clear to the user what logs is looking to (loaded from file or collected in realtime)? and other similar design questions.', 'comment_created': datetime.datetime(2020, 7, 2, 10, 8, 38, tzinfo=datetime.timezone.utc), 'commenter': 'rpl', 'type': 'User'}, {'comment_id': 449448612, 'comment_body': 'Yeah, I have comment out a TODO here, which I will take care of in the next pr. :-) In the meantime, I will make a clear design answering the above questions.', 'comment_created': datetime.datetime(2020, 7, 3, 8, 24, 21, tzinfo=datetime.timezone.utc), 'commenter': 'atiqueahmedziad', 'type': 'User'}, {'comment_id': 449449721, 'comment_body': 'Thanks for noticing. Since I am pushing the logs at once and then calling this method, for which this is occurring. Fixed it now. :-) ', 'comment_created': datetime.datetime(2020, 7, 3, 8, 26, 42, tzinfo=datetime.timezone.utc), 'commenter': 'atiqueahmedziad', 'type': 'User'}, {'comment_id': 449450747, 'comment_body': 'Thanks. It helped me in debugging.\r\n\r\n>  - another arbitrary element that is outside of a row (and in this case we expect closest to return null)\r\n\r\nI am not been able to reproduce this, but I have added a condition for `null` and `undefined` value in the code.', 'comment_created': datetime.datetime(2020, 7, 3, 8, 28, 40, tzinfo=datetime.timezone.utc), 'commenter': 'atiqueahmedziad', 'type': 'User'}, {'comment_id': 449451107, 'comment_body': 'Yeah, named it `renderNewRow`, which seems meaning for this I guess.', 'comment_created': datetime.datetime(2020, 7, 3, 8, 29, 24, tzinfo=datetime.timezone.utc), 'commenter': 'atiqueahmedziad', 'type': 'User'}, {'comment_id': 449451194, 'comment_body': 'done :-) ', 'comment_created': datetime.datetime(2020, 7, 3, 8, 29, 36, tzinfo=datetime.timezone.utc), 'commenter': 'atiqueahmedziad', 'type': 'User'}, {'comment_id': 449451235, 'comment_body': 'done :-) ', 'comment_created': datetime.datetime(2020, 7, 3, 8, 29, 40, tzinfo=datetime.timezone.utc), 'commenter': 'atiqueahmedziad', 'type': 'User'}, {'comment_id': 449451468, 'comment_body': 'sorry for this, I should have been careful with typos. Thanks for noticing. :-) ', 'comment_created': datetime.datetime(2020, 7, 3, 8, 30, 6, tzinfo=datetime.timezone.utc), 'commenter': 'atiqueahmedziad', 'type': 'User'}, {'comment_id': 449536596, 'comment_body': ""is `this.notice.textContent.trim().length` checking if an error message has been set?\r\nI would just clear the notice's textContent and remove the failure class unconditionally if saveAsJSON didn't fail (without checking notice.textContent first)."", 'comment_created': datetime.datetime(2020, 7, 3, 11, 35, tzinfo=datetime.timezone.utc), 'commenter': 'rpl', 'type': 'User'}, {'comment_id': 449537359, 'comment_body': ""Nit I would create a `setError` method that could handle both setting and clearing the error, which may look like more or less as in the following snippet:\r\n```js\r\n  setError(errorMessage) {\r\n    if (errorMessage) {\r\n      this.notice.textContent = errorMessage;\r\n      this.notice.classList.add('failure');\r\n    } else {\r\n      this.notice.textContent = '';\r\n      this.notice.classList.remove('failure');\r\n    }\r\n  }\r\n```\r\nand then call that method where is needed/appropriate."", 'comment_created': datetime.datetime(2020, 7, 3, 11, 36, 49, tzinfo=datetime.timezone.utc), 'commenter': 'rpl', 'type': 'User'}, {'comment_id': 449537859, 'comment_body': 'Nit, this is actually opening a certain log in the sidebar, and so we may call it `openDetailSidebar` or something like that, and also defining a `closeDetailSidebar` method that does the opposite (what we are currently doing at lines 124-125), and then just call these methods where appropriate.', 'comment_created': datetime.datetime(2020, 7, 3, 11, 38, 12, tzinfo=datetime.timezone.utc), 'commenter': 'rpl', 'type': 'User'}, {'comment_id': 449539470, 'comment_body': ""It looks that this method is:\r\n- expending an array of logs (and so it should named `...Rows` and not `...Row`)\r\n- it is appending the logs to the one stored in `this.logs` AND rendering new rows (and not just rendering the logs)\r\n\r\nAnd so we may opt to call it `addNewLogs` (to suggest that it is adding logs to the one that this class instance contains, not just merely rendering new rows in the DOM)\r\n\r\nAnother tweak that we may do here is to actually store a reference to the log in a new property of the DOM element object, this way we don't need to keep track of the related index in the array and then the event handler will be able to get the log details directly from the DOM element itself.\r\n\r\nIn other words here we would be doing something like:\r\n```js\r\nfor (const log of logs) {\r\n  const newRow = this.table.insertRow(...);\r\n  ...\r\n  newRow._log = log;\r\n  this.logs.push(log);\r\n}\r\n```\r\n\r\nAnd then in the event handler that will open the details in the sidebar:\r\n```js\r\n...\r\nconst logDetails = event.target.closest('tr')?._log;\r\n\r\nif (logDetails) {\r\n  this.openDetailSidebar(logDetails);\r\n  return;\r\n}\r\n...\r\n```\r\n\r\n(If instead we opt to keep the `rowIndex`, let's rename it to `lastRowIndex` to better match what it does actually represent). "", 'comment_created': datetime.datetime(2020, 7, 3, 11, 42, 15, tzinfo=datetime.timezone.utc), 'commenter': 'rpl', 'type': 'User'}, {'comment_id': 449622652, 'comment_body': 'In my opinion we may not need both the `input type=""file""` and the ""Load logs""\' `button`, we may just load the file when the ""change"" event is fired for the `input type=""file""` element and remove the  additional button.', 'comment_created': datetime.datetime(2020, 7, 3, 14, 57, 23, tzinfo=datetime.timezone.utc), 'commenter': 'rpl', 'type': 'User'}, {'comment_id': 449624674, 'comment_body': ""Personally I think that we may defer it to a separate follow up where we can focus on it, and keep this one simpler and more focused on the logs table view.\r\n\r\nAnyway, given that I did take a look to it, I guess that we shouldn't accumulate logs loaded from unrelated log files (at the moment I'm not even sure if this class should have both the `this.logs` and `this.loadedLogs` array, because it isn't clear who will be responsible to handle the loaded logs, where they will be rendered etc.)."", 'comment_created': datetime.datetime(2020, 7, 3, 15, 2, 14, tzinfo=datetime.timezone.utc), 'commenter': 'rpl', 'type': 'User'}, {'comment_id': 449629968, 'comment_body': ""It is honestly the first time that I see insertRow and insertCell being used :-P\r\nI think that it's fine to use it for now,  if we change idea (or we have other needs) we may change this later.\r\n\r\nHow is this table ordered? I was expecting this to be this.table.insertRow(-1) which should append it to the end of the table."", 'comment_created': datetime.datetime(2020, 7, 3, 15, 15, 29, tzinfo=datetime.timezone.utc), 'commenter': 'rpl', 'type': 'User'}, {'comment_id': 449632380, 'comment_body': ""Instead of registering the class as an event handler on each row, I think we may just do it once in the `init` method on the entire table by doing `this.table.addEventListener('click', this);`."", 'comment_created': datetime.datetime(2020, 7, 3, 15, 22, 6, tzinfo=datetime.timezone.utc), 'commenter': 'rpl', 'type': 'User'}, {'comment_id': 449634353, 'comment_body': ""All these event handlers could be merged into the `handleEvent` method in this class, and then inside there we may decide if the event was expected and how we should handle it, e.g. and handleEvent would be looking more or less like:\r\n```js\r\n    if (event.type === 'click') {\r\n      const logDetails = event.target.closest('tr')?._log;\r\n\r\n      if (logDetails) {\r\n        // Call the method to open the log details in the sidebar.\r\n        return;\r\n      }\r\n\r\n      switch (event.target) {\r\n      case this.saveLogBtn:\r\n        // Call the method that will save the logs to file\r\n        break; \r\n      case this.closeBtn:\r\n        // Call the method that will close the sidebar.\r\n        break;\r\n      default:\r\n        // Throw error for the click event on an unexpected element.\r\n      }\r\n    } else if (event.type === 'change' && event.target == this.logInputFile) {\r\n      // Load the file..      \r\n    } else {\r\n      // throw an error for an unexpected event type\r\n    }\r\n```"", 'comment_created': datetime.datetime(2020, 7, 3, 15, 27, 27, tzinfo=datetime.timezone.utc), 'commenter': 'rpl', 'type': 'User'}, {'comment_id': 449635232, 'comment_body': 'Nit, this `<tr>` should be moved into a `<thead>` tag otherwise the table is going to have two `<tbody>` child elements (because the browser creates one automatically to move this `<tr>` tag into it, and then the row created using `insertRow` will be added to the `<tbody>` created automatically, and the `<tbody>` that follows at line 31 will still be there in the DOM but empty).', 'comment_created': datetime.datetime(2020, 7, 3, 15, 30, 6, tzinfo=datetime.timezone.utc), 'commenter': 'rpl', 'type': 'User'}, {'comment_id': 449636692, 'comment_body': 'Nit, in my opinion this method should be only responsible for saving the logs that are stored in `this.logs` and so it would not need to get the array of logs as a parameter, can just use `this.logs` internally.', 'comment_created': datetime.datetime(2020, 7, 3, 15, 34, 17, tzinfo=datetime.timezone.utc), 'commenter': 'rpl', 'type': 'User'}, {'comment_id': 449637448, 'comment_body': '`loadFile` could also avoid to take a file as a parameter, it could instead be responsible also of retrieving the file from `this.logInputFile` internally (in other words the event listener should be able to just call it without any parameter, and everything that should happen could be part of the `loadFile` method itself). ', 'comment_created': datetime.datetime(2020, 7, 3, 15, 36, 24, tzinfo=datetime.timezone.utc), 'commenter': 'rpl', 'type': 'User'}, {'comment_id': 449641830, 'comment_body': 'Nit, use a template string here instead.', 'comment_created': datetime.datetime(2020, 7, 3, 15, 49, 43, tzinfo=datetime.timezone.utc), 'commenter': 'rpl', 'type': 'User'}, {'comment_id': 449643581, 'comment_body': 'Would using `document` here be preferable?', 'comment_created': datetime.datetime(2020, 7, 3, 15, 55, 5, tzinfo=datetime.timezone.utc), 'commenter': 'wagnerand', 'type': 'User'}, {'comment_id': 449644854, 'comment_body': 'A library (looking that the path of this file) usually does not deal with consumers, like a page. The name of the class also hints at something generic, rather than a specific view. I recommend separating model, view and controller (MVC).\r\n\r\nMaybe the easiest way to address this could be to rename the class to `ActivityLogView` and move it out of the `lib`folder.', 'comment_created': datetime.datetime(2020, 7, 3, 15, 59, 3, tzinfo=datetime.timezone.utc), 'commenter': 'wagnerand', 'type': 'User'}, {'comment_id': 449651470, 'comment_body': 'In most cases may not make any actualy difference, nevertheless technically the target of the DOMContentLoaded event should have the `document` as its actual target and so it may be reasonable to add the listener for this event directly on the `document` element, even if the event listener can be registered on both the `window` and the `document`.', 'comment_created': datetime.datetime(2020, 7, 3, 16, 22, 21, tzinfo=datetime.timezone.utc), 'commenter': 'rpl', 'type': 'User'}, {'comment_id': 449653078, 'comment_body': ""That's a reasonable point, and it may as well be said for ext-popup.js.\r\n\r\nIn the last meeting we briefly discussed of using the WebComponents API for the classes that are going to manage the DOM elements, but we agreed to defer that to follow ups. \r\nAs part of those follow ups we may also move the ESM modules that are going to export WebComponents classes into a separate lib/web-components/ directory (and tweak the class names a bit, e.g. by adding a `*Element' suffix)."", 'comment_created': datetime.datetime(2020, 7, 3, 16, 28, 55, tzinfo=datetime.timezone.utc), 'commenter': 'rpl', 'type': 'User'}, {'comment_id': 449752129, 'comment_body': 'Currently, I am showing the most recent logs at the top of the table. So, this is inserting a new row after the first row which was the row `th` elements. \r\n@rpl Do we want to append the most recently logs to the end of the table?', 'comment_created': datetime.datetime(2020, 7, 4, 8, 20, 55, tzinfo=datetime.timezone.utc), 'commenter': 'atiqueahmedziad', 'type': 'User'}, {'comment_id': 449762150, 'comment_body': 'Okay, using `document` then :-) ', 'comment_created': datetime.datetime(2020, 7, 4, 10, 46, 31, tzinfo=datetime.timezone.utc), 'commenter': 'atiqueahmedziad', 'type': 'User'}, {'comment_id': 449762441, 'comment_body': 'done.', 'comment_created': datetime.datetime(2020, 7, 4, 10, 50, 50, tzinfo=datetime.timezone.utc), 'commenter': 'atiqueahmedziad', 'type': 'User'}, {'comment_id': 449762464, 'comment_body': 'Thanks. Done :-) ', 'comment_created': datetime.datetime(2020, 7, 4, 10, 51, 7, tzinfo=datetime.timezone.utc), 'commenter': 'atiqueahmedziad', 'type': 'User'}, {'comment_id': 449762473, 'comment_body': 'Thanks, done :-)', 'comment_created': datetime.datetime(2020, 7, 4, 10, 51, 21, tzinfo=datetime.timezone.utc), 'commenter': 'atiqueahmedziad', 'type': 'User'}, {'comment_id': 449762517, 'comment_body': ""Yeah, then we don't need an extra attribute. Done :-) "", 'comment_created': datetime.datetime(2020, 7, 4, 10, 51, 58, tzinfo=datetime.timezone.utc), 'commenter': 'atiqueahmedziad', 'type': 'User'}, {'comment_id': 449762546, 'comment_body': 'For now, I have taken this part off. I will send a follow up pr for load logs.', 'comment_created': datetime.datetime(2020, 7, 4, 10, 52, 43, tzinfo=datetime.timezone.utc), 'commenter': 'atiqueahmedziad', 'type': 'User'}, {'comment_id': 449762674, 'comment_body': ""Yeah, to avoid adding the event listeners with the `th` elements, I am currently adding the event listener to table's tbody (where all the logs are represented as `tr`). Is this okay ? "", 'comment_created': datetime.datetime(2020, 7, 4, 10, 54, 51, tzinfo=datetime.timezone.utc), 'commenter': 'atiqueahmedziad', 'type': 'User'}, {'comment_id': 449762748, 'comment_body': ""Thanks for noticing. It's done now :-)"", 'comment_created': datetime.datetime(2020, 7, 4, 10, 55, 58, tzinfo=datetime.timezone.utc), 'commenter': 'atiqueahmedziad', 'type': 'User'}, {'comment_id': 449762778, 'comment_body': 'done :-) Sorry I missed this out earlier.', 'comment_created': datetime.datetime(2020, 7, 4, 10, 56, 20, tzinfo=datetime.timezone.utc), 'commenter': 'atiqueahmedziad', 'type': 'User'}, {'comment_id': 449763121, 'comment_body': 'Yeah, I have updated this method excluding the parameter and using `this.logs` internally, but in the future when we may need to save logs after filtering the logs in the table, it could be helpful if we pass the filtered logs as an argument. That was my thinking of having a parameter here. ', 'comment_created': datetime.datetime(2020, 7, 4, 11, 1, tzinfo=datetime.timezone.utc), 'commenter': 'atiqueahmedziad', 'type': 'User'}, {'comment_id': 449763276, 'comment_body': 'For now, I have taken `load log` part off. In the follow-up pr with load logs, I will take care of this suggestion :-)', 'comment_created': datetime.datetime(2020, 7, 4, 11, 2, 42, tzinfo=datetime.timezone.utc), 'commenter': 'atiqueahmedziad', 'type': 'User'}, {'comment_id': 449763302, 'comment_body': 'done :-)', 'comment_created': datetime.datetime(2020, 7, 4, 11, 2, 48, tzinfo=datetime.timezone.utc), 'commenter': 'atiqueahmedziad', 'type': 'User'}, {'comment_id': 449764112, 'comment_body': 'I put `false` here for readability purpose.', 'comment_created': datetime.datetime(2020, 7, 4, 11, 12, 59, tzinfo=datetime.timezone.utc), 'commenter': 'atiqueahmedziad', 'type': 'User'}, {'comment_id': 450136718, 'comment_body': 'using false to clear the event makes the expected type signature of the `setError` method a bit odd:\r\n\r\n- by passing a string or null/undefined, we can say that the type signature for `setErrot` would be something like `setError(errorMessage: string|void): void` (gets a string or nothing and return nothing)\r\n\r\n- by passing an error message `string` or `false`, then `setError` would have a type signature that would look like `setError(errorMessage: string|bool): void` (gets a string or a boolean and return nothing)\r\n\r\nIn my opinion, `setError(errorMessage: string|void): void` is a more reasonable type signature for that function. ', 'comment_created': datetime.datetime(2020, 7, 6, 10, 42, 3, tzinfo=datetime.timezone.utc), 'commenter': 'rpl', 'type': 'User'}, {'comment_id': 450142084, 'comment_body': 'Currently, it is in `setError(errorMessage: string|bool): void` format, right ? Like `errorMessage: false` if I am sending `false` as argument. And `errorMessage: string` when I am sending the `error.message` as argument. \r\nOr did you mean to put empty string to turn it into false by coercion ? ', 'comment_created': datetime.datetime(2020, 7, 6, 10, 53, 44, tzinfo=datetime.timezone.utc), 'commenter': 'atiqueahmedziad', 'type': 'User'}, {'comment_id': 450151949, 'comment_body': '`event.target` is a DOM element, and typically not JSON-serializable. Consider using `event.target.tagName` instead.', 'comment_created': datetime.datetime(2020, 7, 6, 11, 15, 12, tzinfo=datetime.timezone.utc), 'commenter': 'Rob--W', 'type': 'User'}, {'comment_id': 450152330, 'comment_body': '`event.type` is already a string without special characters, so `JSON.stringify` is not needed. Use`""${event.type}""` instead.', 'comment_created': datetime.datetime(2020, 7, 6, 11, 16, 5, tzinfo=datetime.timezone.utc), 'commenter': 'Rob--W', 'type': 'User'}, {'comment_id': 450154065, 'comment_body': ""It seems that you're using `display: none` with the intention of hiding the wrapper by default, combined with assigning to `.style.display` to toggle its visibility.\r\n\r\nInstead of defaulting to `display:none` here, set the `hidden` attribute in HTML, and toggle the `hidden` attribute / property in JavaScript.\r\n\r\n- https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/hidden\r\n- https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/hidden"", 'comment_created': datetime.datetime(2020, 7, 6, 11, 20, 13, tzinfo=datetime.timezone.utc), 'commenter': 'Rob--W', 'type': 'User'}, {'comment_id': 450169128, 'comment_body': 'tagName is a string, no need to stringify it.', 'comment_created': datetime.datetime(2020, 7, 6, 11, 53, 11, tzinfo=datetime.timezone.utc), 'commenter': 'rpl', 'type': 'User'}]","[{'commit_sha': 'f312a8af08a7bae728829ade92fd3110ad93d60f', 'committer_username': 'atiqueahmedziad', 'committer_name': 'Atique Ahmed Ziad', 'committer_email': None, 'commit_date': datetime.datetime(2014, 8, 5, 15, 37, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e8202f38117480257c6f91e8a0f969458a3f992d', 'committer_username': 'atiqueahmedziad', 'committer_name': 'Atique Ahmed Ziad', 'committer_email': None, 'commit_date': datetime.datetime(2014, 8, 5, 15, 37, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '158deb5bf0927b3756443180b8c525a085e3ebdd', 'committer_username': 'atiqueahmedziad', 'committer_name': 'Atique Ahmed Ziad', 'committer_email': None, 'commit_date': datetime.datetime(2014, 8, 5, 15, 37, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '60bd4246592833d2a91c199c9e674eb43eb0763b', 'committer_username': 'atiqueahmedziad', 'committer_name': 'Atique Ahmed Ziad', 'committer_email': None, 'commit_date': datetime.datetime(2014, 8, 5, 15, 37, 42, tzinfo=datetime.timezone.utc)}]",Atique Ahmed Ziad,8364578,,User,,72,,3,42
446380435,feat: table view webcomponent is added and mvc pattern is followed,Table view webcomponent is added and mvc pattern is followed,True,9,https://api.github.com/repos/mozilla/extension-activity-monitor/pulls/9,https://github.com/mozilla/extension-activity-monitor/pull/9,closed,257,190,6,6,1,33,0,0,[],2020-07-08 17:20:23+00:00,2020-07-14 18:57:06+00:00,524203.0,"6 days, 1:36:43","[{'comment_id': 451867976, 'comment_body': 'Putting the template inside another element is dangerous - when the parent element is emptied, the template will disappear. If it is a fixed template, put it at the top of the document (before `</body>`). If it is specific to this element, use a class name instead of a `ID`, because an ID may only appear once in a document, effectively preventing the custom element from being used more than once in a document.', 'comment_created': datetime.datetime(2020, 7, 8, 22, 51, 53, tzinfo=datetime.timezone.utc), 'commenter': 'Rob--W', 'type': 'User'}, {'comment_id': 451868480, 'comment_body': 'Let\'s use `<link rel=""stylesheet"" type=""text/css"" href=""...."">` instead of an inline stylesheet with a `@import`.\r\n\r\nAnd instead of loading the same stylesheet in every shadow root, create one specifically for that shadow element. Shadow DOM is for encapsulation, and using separate stylesheets makes it easier to maintain the appearance of individual shadow elements in the future.\r\n\r\nIf you like to pass parameters from the main document to shadow elements (e.g. a base color for example),then you can use inheritance via CSS variables - https://developer.mozilla.org/en-US/docs/Web/CSS/Using_CSS_custom_properties\r\n\r\nIf you rather want to share some common styles, you could import the common stylesheets, either via `@import` in the new stylesheet, or another `<link>` tag.', 'comment_created': datetime.datetime(2020, 7, 8, 22, 53, 21, tzinfo=datetime.timezone.utc), 'commenter': 'Rob--W', 'type': 'User'}, {'comment_id': 452248126, 'comment_body': ""Don't use `self`, but `this`. They're identical but `this` is more idiomatic."", 'comment_created': datetime.datetime(2020, 7, 9, 14, 12, 24, tzinfo=datetime.timezone.utc), 'commenter': 'Rob--W', 'type': 'User'}, {'comment_id': 452559113, 'comment_body': 'Instead of moving the externally-provided element inside the shadow root, use the `<slot>` element to define the placeholder in the shadow element. Otherwise, if the element is styled externally, the styles would be lost (because the shadow root is not affected by stylesheets from the main document).\r\n', 'comment_created': datetime.datetime(2020, 7, 10, 0, 23, 48, tzinfo=datetime.timezone.utc), 'commenter': 'Rob--W', 'type': 'User'}, {'comment_id': 452964875, 'comment_body': 'Done :-)', 'comment_created': datetime.datetime(2020, 7, 10, 17, 2, 51, tzinfo=datetime.timezone.utc), 'commenter': 'atiqueahmedziad', 'type': 'User'}, {'comment_id': 452965058, 'comment_body': 'For now, `detailSidebar` codes are dropped.', 'comment_created': datetime.datetime(2020, 7, 10, 17, 3, 16, tzinfo=datetime.timezone.utc), 'commenter': 'atiqueahmedziad', 'type': 'User'}, {'comment_id': 452965136, 'comment_body': 'done. Thanks :-)', 'comment_created': datetime.datetime(2020, 7, 10, 17, 3, 26, tzinfo=datetime.timezone.utc), 'commenter': 'atiqueahmedziad', 'type': 'User'}, {'comment_id': 452965208, 'comment_body': 'done :-)', 'comment_created': datetime.datetime(2020, 7, 10, 17, 3, 34, tzinfo=datetime.timezone.utc), 'commenter': 'atiqueahmedziad', 'type': 'User'}, {'comment_id': 452982476, 'comment_body': 'The `<log-view>` element should be self-contained. It is now tightly coupled to the layout and DOM of the document, which makes the web component difficult to reuse.\r\n\r\nIt seems that you are just replacing `<table>` with `<log-view>` here, without consideration for what this LogView is supposed to be used for.\r\n\r\nThis LogView does not have to be just a `<table>`, it should be used to represent the part of your page/document that is responsible for rendering logs. If you want to be able to define external components, but still make them part of the DOM, consider using `<slot>` elements instead. This allows you to define a template (which can be cloned and appended to shadow DOM), with placeholders (`<slot>`) where externally defined elements (maybe the details view?) can be rendered.\r\n\r\nSee https://developer.mozilla.org/en-US/docs/Web/Web_Components/Using_templates_and_slots', 'comment_created': datetime.datetime(2020, 7, 10, 17, 39, 47, tzinfo=datetime.timezone.utc), 'commenter': 'Rob--W', 'type': 'User'}, {'comment_id': 453092481, 'comment_body': 'I made the `<log-view>` self-contained now. I was thinking of using `<slot>` later when I make the sidebar as separate component. Is that okay ?', 'comment_created': datetime.datetime(2020, 7, 10, 21, 49, 50, tzinfo=datetime.timezone.utc), 'commenter': 'atiqueahmedziad', 'type': 'User'}, {'comment_id': 453810083, 'comment_body': ""To decouple the view's DOM from this high-level View class, subscribe for a custom event on the view. In the view, you can use the `CustomEvent` to create a new event and fire it. See https://developer.mozilla.org/en-US/docs/Web/Guide/Events/Creating_and_triggering_events"", 'comment_created': datetime.datetime(2020, 7, 13, 17, 25, 14, tzinfo=datetime.timezone.utc), 'commenter': 'Rob--W', 'type': 'User'}, {'comment_id': 453810835, 'comment_body': 'There is only one template in the document, use the `id` attribute instead.\r\n\r\n(also at the next template below).\r\n\r\nAnd add a blank line before the `<template ...>` element to slightly improve readability.', 'comment_created': datetime.datetime(2020, 7, 13, 17, 26, 25, tzinfo=datetime.timezone.utc), 'commenter': 'Rob--W', 'type': 'User'}, {'comment_id': 453811894, 'comment_body': 'Use `class` instead of `id` when there may be more than one instance of an element. Anything in a custom element could in theory be used more than once, so use `class=""logDetails""` instead.', 'comment_created': datetime.datetime(2020, 7, 13, 17, 28, 11, tzinfo=datetime.timezone.utc), 'commenter': 'Rob--W', 'type': 'User'}, {'comment_id': 453821152, 'comment_body': ""This works, but not for the reason that you expect.\r\n\r\n`setAttribute` can only assign string values as attribute values, so\r\n`.setAttribute('hidden', true);` is equivalent to `.setAttribute('hidden', 'true');`\r\n\r\n`.setAttribute('hidden', false);` would be equivalent to `.setAttribute('hidden', 'false');`, which does NOT unhide the element.\r\n\r\nUse `.hidden = true;` instead, which is equivalent to `.setAttribute('hidden', '');`\r\n(and `.hidden = false;` is equivalent to `.removeAttribute('hidden');`. )\r\n\r\nSee https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/hidden\r\nand in general https://stackoverflow.com/questions/4139786/what-does-it-mean-in-html-5-when-an-attribute-is-a-boolean-attribute\r\n"", 'comment_created': datetime.datetime(2020, 7, 13, 17, 44, 14, tzinfo=datetime.timezone.utc), 'commenter': 'Rob--W', 'type': 'User'}, {'comment_id': 453822509, 'comment_body': 'Remove this. This is already done in `closeDetailSidebar`.', 'comment_created': datetime.datetime(2020, 7, 13, 17, 46, 23, tzinfo=datetime.timezone.utc), 'commenter': 'Rob--W', 'type': 'User'}, {'comment_id': 453822854, 'comment_body': 'Remove `/` from `/>`. This is not XHTML, the `/` serves no purpose.', 'comment_created': datetime.datetime(2020, 7, 13, 17, 46, 55, tzinfo=datetime.timezone.utc), 'commenter': 'Rob--W', 'type': 'User'}, {'comment_id': 453828777, 'comment_body': 'Ideally you would assign directly to `logTableRowInstance`. Assuming that the template contains one element only, you could achieve the desired goal by using `this.logTableRowTemplate.content.firstElementChild`.\r\n\r\nAnd instead of reading that property so often here, you could directly read that from the constructor, so you can simply do `const logTableRowInstance = this.logTableRowTemplate.cloneNode(true);` here. (cloneNode and `document.importNode` are equivalent, but cloneNode is shorter).', 'comment_created': datetime.datetime(2020, 7, 13, 17, 56, 54, tzinfo=datetime.timezone.utc), 'commenter': 'Rob--W', 'type': 'User'}, {'comment_id': 453829366, 'comment_body': 'In general, if you are going to append lots of DOM elements, use `document.createDocumentFragment` first, append the elements there, and after the end of the loop, append the document fragment to the desired destination. This results in a better performance.', 'comment_created': datetime.datetime(2020, 7, 13, 17, 57, 54, tzinfo=datetime.timezone.utc), 'commenter': 'Rob--W', 'type': 'User'}, {'comment_id': 453829914, 'comment_body': 'Is it really necessary to change from `display: table-row` (default) to `display: flex`?', 'comment_created': datetime.datetime(2020, 7, 13, 17, 58, 49, tzinfo=datetime.timezone.utc), 'commenter': 'Rob--W', 'type': 'User'}, {'comment_id': 453867715, 'comment_body': 'It is done by prettier. I can tell prettier to ignore this if you want.\r\n*Note:* I faced this issue earlier when Luca asked me to [remove `/` self-closing tag meta tags](https://github.com/mozilla/extension-activity-monitor/pull/3#discussion_r443464519). But [he suggested to not fight with prettier for it.](https://github.com/mozilla/extension-activity-monitor/pull/3#discussion_r444405359)', 'comment_created': datetime.datetime(2020, 7, 13, 19, 4, 9, tzinfo=datetime.timezone.utc), 'commenter': 'atiqueahmedziad', 'type': 'User'}, {'comment_id': 453892981, 'comment_body': ""Never mind then. Prettier is wrong, but it's not worth the effort."", 'comment_created': datetime.datetime(2020, 7, 13, 19, 51, 3, tzinfo=datetime.timezone.utc), 'commenter': 'Rob--W', 'type': 'User'}, {'comment_id': 453910961, 'comment_body': 'done :-)', 'comment_created': datetime.datetime(2020, 7, 13, 20, 25, 34, tzinfo=datetime.timezone.utc), 'commenter': 'atiqueahmedziad', 'type': 'User'}, {'comment_id': 453911063, 'comment_body': 'done :-)', 'comment_created': datetime.datetime(2020, 7, 13, 20, 25, 42, tzinfo=datetime.timezone.utc), 'commenter': 'atiqueahmedziad', 'type': 'User'}, {'comment_id': 453911197, 'comment_body': 'done :-)', 'comment_created': datetime.datetime(2020, 7, 13, 20, 25, 56, tzinfo=datetime.timezone.utc), 'commenter': 'atiqueahmedziad', 'type': 'User'}, {'comment_id': 453911286, 'comment_body': 'done. Thanks :-)', 'comment_created': datetime.datetime(2020, 7, 13, 20, 26, 6, tzinfo=datetime.timezone.utc), 'commenter': 'atiqueahmedziad', 'type': 'User'}, {'comment_id': 453911573, 'comment_body': 'ahh sorry for missed it earlier :(, removed now.', 'comment_created': datetime.datetime(2020, 7, 13, 20, 26, 32, tzinfo=datetime.timezone.utc), 'commenter': 'atiqueahmedziad', 'type': 'User'}, {'comment_id': 453911977, 'comment_body': 'done :-) ', 'comment_created': datetime.datetime(2020, 7, 13, 20, 27, 14, tzinfo=datetime.timezone.utc), 'commenter': 'atiqueahmedziad', 'type': 'User'}, {'comment_id': 453912061, 'comment_body': 'Thanks, done :-)', 'comment_created': datetime.datetime(2020, 7, 13, 20, 27, 25, tzinfo=datetime.timezone.utc), 'commenter': 'atiqueahmedziad', 'type': 'User'}, {'comment_id': 453912263, 'comment_body': 'Sorry forget to change this, done now. :-)', 'comment_created': datetime.datetime(2020, 7, 13, 20, 27, 47, tzinfo=datetime.timezone.utc), 'commenter': 'atiqueahmedziad', 'type': 'User'}, {'comment_id': 454017401, 'comment_body': 'This should also use an id attribute.', 'comment_created': datetime.datetime(2020, 7, 14, 0, 2, 1, tzinfo=datetime.timezone.utc), 'commenter': 'Rob--W', 'type': 'User'}, {'comment_id': 454017555, 'comment_body': '... and this should use a ""class"" attribute.', 'comment_created': datetime.datetime(2020, 7, 14, 0, 2, 36, tzinfo=datetime.timezone.utc), 'commenter': 'Rob--W', 'type': 'User'}, {'comment_id': 454019564, 'comment_body': ""I suggest to store the firstElementChild in th constructor, so you don't have to clone the superfluous whitespace. This code is relatively hot (used often), so it'll be good to minimize the amount of redundant calls.\n\nFurthermore, by storing it in the constructor, it will be more obvious that there is only one (root) node in the template."", 'comment_created': datetime.datetime(2020, 7, 14, 0, 9, 31, tzinfo=datetime.timezone.utc), 'commenter': 'Rob--W', 'type': 'User'}, {'comment_id': 454281000, 'comment_body': ""`cloneNode(true);` isn't needed. You're going to `cloneNode(true);` this later anyway."", 'comment_created': datetime.datetime(2020, 7, 14, 11, 13, tzinfo=datetime.timezone.utc), 'commenter': 'Rob--W', 'type': 'User'}]","[{'commit_sha': 'c7d15d752f8831c6314b1348b67914542b9f87f0', 'committer_username': 'atiqueahmedziad', 'committer_name': 'Atique Ahmed Ziad', 'committer_email': None, 'commit_date': datetime.datetime(2014, 8, 5, 15, 37, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '40f845f751e3beec88e098f1891922f96a337eb7', 'committer_username': 'atiqueahmedziad', 'committer_name': 'Atique Ahmed Ziad', 'committer_email': None, 'commit_date': datetime.datetime(2014, 8, 5, 15, 37, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '114439aa2b33dc44b1f61bb9eba06fa4116d88a5', 'committer_username': 'atiqueahmedziad', 'committer_name': 'Atique Ahmed Ziad', 'committer_email': None, 'commit_date': datetime.datetime(2014, 8, 5, 15, 37, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f5d90422336c43778ed379485ac73ae44d36b317', 'committer_username': 'atiqueahmedziad', 'committer_name': 'Atique Ahmed Ziad', 'committer_email': None, 'commit_date': datetime.datetime(2014, 8, 5, 15, 37, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4222fef3aaff5b95c35485480a2e11fad5ebe006', 'committer_username': 'atiqueahmedziad', 'committer_name': 'Atique Ahmed Ziad', 'committer_email': None, 'commit_date': datetime.datetime(2014, 8, 5, 15, 37, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9cfde9a51220b85750509eafcf320eb3e7594cc1', 'committer_username': 'atiqueahmedziad', 'committer_name': 'Atique Ahmed Ziad', 'committer_email': None, 'commit_date': datetime.datetime(2014, 8, 5, 15, 37, 42, tzinfo=datetime.timezone.utc)}]",Atique Ahmed Ziad,8364578,,User,,72,,3,42
449098853,"feat: filter logs with extension id, view type, api type","Filtering logs with extension id has been done. 
- Initially, when there are no logs, there will be no Filtering option available. 
- Initially, when there are logs (available in the background), the activity log page opens with all the logs and all the extension ids are in checked condition in the filter option.
- We can filter out logs from one/more extensions clicking the checkbox. 
- When we uncheck an extension (to filter out the logs of that extension from table view), any new log found from that extension will be stored in the background and append in the table view as a hidden row. All the logs related to that extension will only visible when we check the extension to see its log.
For Example, if we choose to see logs from only one extension, logs from other extensions (which are being monitored) are being stored in the background and also are being appended as hidden row.

## Screenshot
<img width=""1280"" alt=""Screenshot 2020-07-15 at 2 29 08 AM"" src=""https://user-images.githubusercontent.com/8364578/87473322-0e1b4c80-c643-11ea-9431-d0e20fe7c464.png"">
<img width=""1280"" alt=""Screenshot 2020-07-15 at 2 29 19 AM"" src=""https://user-images.githubusercontent.com/8364578/87473338-12e00080-c643-11ea-9e04-9a1a57865ed7.png"">
<img width=""1280"" alt=""Screenshot 2020-07-15 at 2 29 30 AM"" src=""https://user-images.githubusercontent.com/8364578/87473342-14112d80-c643-11ea-9a90-6d7a78724058.png"">
",True,10,https://api.github.com/repos/mozilla/extension-activity-monitor/pulls/10,https://github.com/mozilla/extension-activity-monitor/pull/10,closed,326,12,8,13,1,63,0,0,[],2020-07-14 20:32:09+00:00,2020-07-20 20:32:50+00:00,518441.0,"6 days, 0:00:41","[{'comment_id': 456146462, 'comment_body': ""This is inefficient. Logs may contain many keys, while most logs have at most two relevant keys.\r\n\r\nUnroll the loop and inline the changes, and make the state management INDEPENDENT of the DOM. Querying the DOM (as you're doing in `isCheckboxExist`) is relatively expensive, it is more efficient to store the set of IDs in a `Set` (and only add a new checkbox when needed).\r\n\r\n`Set` - https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set"", 'comment_created': datetime.datetime(2020, 7, 17, 0, 11, tzinfo=datetime.timezone.utc), 'commenter': 'Rob--W', 'type': 'User'}, {'comment_id': 456147900, 'comment_body': ""The `change` event is not specific to checkboxes. For now this is good enough but in the future (e.g. when you're going to add text inpiuts), the code needs to be changed.\r\n\r\nTo improve readability of the current format, I suggest to not blindly forward `event`, but to forward `event.currentTarget` (the container) and `event.target` (i.e. the checkbox)."", 'comment_created': datetime.datetime(2020, 7, 17, 0, 15, 58, tzinfo=datetime.timezone.utc), 'commenter': 'Rob--W', 'type': 'User'}, {'comment_id': 456148536, 'comment_body': 'Instead of doing a `switch` here, I suggest to store the identifier as an attribute on the HTML element. Then you can actually take advantage of the fact that the implementations of those two checkbox lists are very similar.', 'comment_created': datetime.datetime(2020, 7, 17, 0, 18, 6, tzinfo=datetime.timezone.utc), 'commenter': 'Rob--W', 'type': 'User'}, {'comment_id': 456148828, 'comment_body': ""`event.target` is already the desired input element, don't use `.closest('input')`."", 'comment_created': datetime.datetime(2020, 7, 17, 0, 19, 8, tzinfo=datetime.timezone.utc), 'commenter': 'Rob--W', 'type': 'User'}, {'comment_id': 456150440, 'comment_body': 'This `checked` property is very specific to the UI element (checkbox) here. The purpose of firing the event is to abstract the actual UI implementation.\r\n\r\n`filterParam`, `value` and `target` are bad names, because it is not at all obvious what those are supposed to be used for.\r\n\r\nAs an example, if you trigger the `filter:remove` event with detail `{logKey: ""viewType"", valueEquals: ""popup""}`, then consumers can listen for the event (instead of having to translate the specifics of the UI element to a logical representation, as you\'re doing right now). I used `filter:` as a prefix, so that there is a namespace where relateds events can be grouped, e.g. `filter:add`, `filter:remove`, ...', 'comment_created': datetime.datetime(2020, 7, 17, 0, 25, 16, tzinfo=datetime.timezone.utc), 'commenter': 'Rob--W', 'type': 'User'}, {'comment_id': 456151351, 'comment_body': 'When you use an element more than once, store the result of `querySelector` in a variable.\r\n\r\nNote: With checkboxes it is quite common to store the group in the `name` attribute and the value in the `value` attribute. The implementation may be simpler if you do that instead of relying on an ancestor element in the DOM.', 'comment_created': datetime.datetime(2020, 7, 17, 0, 28, 16, tzinfo=datetime.timezone.utc), 'commenter': 'Rob--W', 'type': 'User'}, {'comment_id': 456151625, 'comment_body': '`p` is not semantically correct - this is not a paragraph. Use `span` instead.', 'comment_created': datetime.datetime(2020, 7, 17, 0, 29, 15, tzinfo=datetime.timezone.utc), 'commenter': 'Rob--W', 'type': 'User'}, {'comment_id': 456362978, 'comment_body': 'For naming (variable names, string values, class names), you are currently choosing whatever comes up first, often a specific implementation detail. When relevant, it is good to be specific. In case of appearance, you are being too specific. ""arrow-down"" and ""arrow-right"" describe the exact appearance, but from the code their purpose is not obvious.\r\n\r\nInstead of hardcoding the visual appearance in the JavaScript code, try to find a good name that accurately describes the role of the class / element.\r\n\r\nIn this case, you are simultaneously managing the appearance of multiple related elements, using the `hidden` attribute and replacing class names. The code would be shorter and more maintainable if you instead toggle a class name on the common ancestor element (e.g. `.filter-container`), and update the CSS accordingly. The click handler can then be as simple as:\r\n\r\n```\r\n// filterContainer is the .filter-container element\r\nfilterContainer.classList.toggle(""expanded"");\r\n```', 'comment_created': datetime.datetime(2020, 7, 17, 10, 36, 26, tzinfo=datetime.timezone.utc), 'commenter': 'Rob--W', 'type': 'User'}, {'comment_id': 456367826, 'comment_body': 'This looks very repetitive. Instead of duplicating the HTML and JavaScript code whenever you add another filter, it could be more useful to create a custom element to fill in this role.\r\n\r\nThen you can put all UI-related JS code in a single module, and possible even offer an abstraction of the underlying states (some of my comments here are elaborated in comments below):\r\n\r\n- The web component offers a way to read from new log entries.\r\n- The web component is fully responsible for rendering checkboxes if needed.\r\n- The web component detects checkbox changes, updates its internal set of states and dispatches a filter change event.\r\n\r\nBy creating such a web component, the HTML and JS can be simplified - since all UI-specific logic is encapsulated. The following example is a potential way to implement this suggestion, and it looks much more concise when compared to the existing HTML.\r\n\r\n```\r\n<filter-container filter-key=""viewType"">\r\n  Select view type to filter logs\r\n</filter-container>\r\n```', 'comment_created': datetime.datetime(2020, 7, 17, 10, 47, 51, tzinfo=datetime.timezone.utc), 'commenter': 'Rob--W', 'type': 'User'}, {'comment_id': 456368669, 'comment_body': '`indexOf` may return `-1` if not found, in which case `.splice` will remove the last element.', 'comment_created': datetime.datetime(2020, 7, 17, 10, 49, 50, tzinfo=datetime.timezone.utc), 'commenter': 'Rob--W', 'type': 'User'}, {'comment_id': 456373314, 'comment_body': ""`showRows` and `hideRows` are almost identical.\r\n\r\n`hideRows` is currently only slightly different (i.e. less parameters and less code) because you have hard-coded the filter-type (identity, `===`). When you're going to implement different kinds of filters, such as substring-based, then `hideRows` would also take similar arguments.\r\n\r\nTo simplify the code, and to remove the needlessly hardcoded assumption on the filter type, I suggest to just loop over all rows, and update the `hidden` state depending on whether the filter matches.\r\n\r\nThe current two methods select a different set of elements (`tr[hidden]` vs `tr:not([hidden])`) instead of all rows. This is a slighy micro-optimization, which only works because a filter state change (i.e. (un)checking a checkbox) can only affect a strict subset of all rows. When substring-based filtering is implemented, that assumption cannot be relied upon, because a state change (e.g. substring change) can potentially affect all rows. For this reason, I recommend again to apply the filter to all rows at first. We can optimize later, when the functionality itself works."", 'comment_created': datetime.datetime(2020, 7, 17, 11, 0, 45, tzinfo=datetime.timezone.utc), 'commenter': 'Rob--W', 'type': 'User'}, {'comment_id': 456374643, 'comment_body': ""Don't modify the log entry from the controller. The logs should be considered read-only."", 'comment_created': datetime.datetime(2020, 7, 17, 11, 3, 59, tzinfo=datetime.timezone.utc), 'commenter': 'Rob--W', 'type': 'User'}, {'comment_id': 456377070, 'comment_body': ""The `logTableWrapper` and its `tr` elements is an internal implementation detail of `logView`. You shouldn't access those from external classes, because that breaks encapsulation. Encapsulation exists to make it easier to reason about components, but if you break the encapsulation this benefit is lost.\r\n\r\nIn this file you're passing the filter function to the `logView`, twice.\r\n\r\nInstead of doing that here, you could also pass the model (or at least the filter object) to the `logView`, and let `logView` re-apply the filter if needed (via events or explicit function calls)."", 'comment_created': datetime.datetime(2020, 7, 17, 11, 10, 5, tzinfo=datetime.timezone.utc), 'commenter': 'Rob--W', 'type': 'User'}, {'comment_id': 456431961, 'comment_body': 'Should I keep the IDs in a `Set` in model ? For example, making an `checkboxes{ ids:[], viewTypes:[], types:[] }` object.', 'comment_created': datetime.datetime(2020, 7, 17, 13, 11, 5, tzinfo=datetime.timezone.utc), 'commenter': 'atiqueahmedziad', 'type': 'User'}, {'comment_id': 456454093, 'comment_body': ""If you create a web component, it would probably be more natural to maintain the set within the component (because it is an implementation detail). In practice the contents of this internal set would be mirrored to the model. Despite this, it still makes sense to maintain the set in the component, because it makes it easier to refactor / maintain the code.\r\n\r\nThe model should be read-only, and only be writable through controlled methods. Otherwise the model could potentially be updated and break other parts of the code that didn't expect it, and it becomes very difficult to reason about the state of the model."", 'comment_created': datetime.datetime(2020, 7, 17, 13, 49, tzinfo=datetime.timezone.utc), 'commenter': 'Rob--W', 'type': 'User'}, {'comment_id': 456649390, 'comment_body': 'Yeah, now with a web component, every component manages its own checkboxes. Life become easier :-)', 'comment_created': datetime.datetime(2020, 7, 17, 20, 3, 58, tzinfo=datetime.timezone.utc), 'commenter': 'atiqueahmedziad', 'type': 'User'}, {'comment_id': 456649776, 'comment_body': 'This has been fixed and relocated to web component named `filter-container`', 'comment_created': datetime.datetime(2020, 7, 17, 20, 4, 58, tzinfo=datetime.timezone.utc), 'commenter': 'atiqueahmedziad', 'type': 'User'}, {'comment_id': 456650091, 'comment_body': 'I have managed this with `filter-key` attribute with `filter-container` web component', 'comment_created': datetime.datetime(2020, 7, 17, 20, 5, 39, tzinfo=datetime.timezone.utc), 'commenter': 'atiqueahmedziad', 'type': 'User'}, {'comment_id': 456650207, 'comment_body': 'Thanks :-) done.', 'comment_created': datetime.datetime(2020, 7, 17, 20, 5, 56, tzinfo=datetime.timezone.utc), 'commenter': 'atiqueahmedziad', 'type': 'User'}, {'comment_id': 456651815, 'comment_body': '\r\n> This `checked` property is very specific to the UI element (checkbox) here. The purpose of firing the event is to abstract the actual UI implementation.\r\n\r\nI have renamed the `checked` property with `isFilterRemoved`. Is this okay?\r\n\r\n> `filterParam`, `value` and `target` are bad names, because it is not at all obvious what those are supposed to be used for.\r\n\r\nThese names have been updated. :-)\r\n\r\n> As an example, if you trigger the `filter:remove` event with detail `{logKey: ""viewType"", valueEquals: ""popup""}`, then consumers can listen for the event (instead of having to translate the specifics of the UI element to a logical representation, as you\'re doing right now). I used `filter:` as a prefix, so that there is a namespace where relateds events can be grouped, e.g. `filter:add`, `filter:remove`, ...\r\n\r\nI am not sure if I have fully understood this part, did you want me to make different events?\r\n', 'comment_created': datetime.datetime(2020, 7, 17, 20, 9, 44, tzinfo=datetime.timezone.utc), 'commenter': 'atiqueahmedziad', 'type': 'User'}, {'comment_id': 456652834, 'comment_body': 'Done :-) \r\n\r\nI am not seeing the need for a name attribute here. \r\n@Rob--W  I am facing difficulty to understand how could the implementation be simpler if I use name attribute?', 'comment_created': datetime.datetime(2020, 7, 17, 20, 12, 4, tzinfo=datetime.timezone.utc), 'commenter': 'atiqueahmedziad', 'type': 'User'}, {'comment_id': 456652987, 'comment_body': 'done :-)', 'comment_created': datetime.datetime(2020, 7, 17, 20, 12, 24, tzinfo=datetime.timezone.utc), 'commenter': 'atiqueahmedziad', 'type': 'User'}, {'comment_id': 456653241, 'comment_body': 'Done :-) I will keep this in mind next time.', 'comment_created': datetime.datetime(2020, 7, 17, 20, 13, 2, tzinfo=datetime.timezone.utc), 'commenter': 'atiqueahmedziad', 'type': 'User'}, {'comment_id': 456653372, 'comment_body': 'Thanks for explaining. done :-) ', 'comment_created': datetime.datetime(2020, 7, 17, 20, 13, 22, tzinfo=datetime.timezone.utc), 'commenter': 'atiqueahmedziad', 'type': 'User'}, {'comment_id': 456653674, 'comment_body': 'I have put a condition here `if(this.filter[target].indexOf(value) > -1) {...}`', 'comment_created': datetime.datetime(2020, 7, 17, 20, 14, 6, tzinfo=datetime.timezone.utc), 'commenter': 'atiqueahmedziad', 'type': 'User'}, {'comment_id': 456654051, 'comment_body': '> To simplify the code, and to remove the needlessly hardcoded assumption on the filter type, I suggest to just loop over all rows, and update the `hidden` state depending on whether the filter matches.\r\n\r\nDone this :-) \r\n', 'comment_created': datetime.datetime(2020, 7, 17, 20, 15, 1, tzinfo=datetime.timezone.utc), 'commenter': 'atiqueahmedziad', 'type': 'User'}, {'comment_id': 456654143, 'comment_body': 'Okay, done :-)', 'comment_created': datetime.datetime(2020, 7, 17, 20, 15, 15, tzinfo=datetime.timezone.utc), 'commenter': 'atiqueahmedziad', 'type': 'User'}, {'comment_id': 456654340, 'comment_body': 'This has been done in logView component.', 'comment_created': datetime.datetime(2020, 7, 17, 20, 15, 47, tzinfo=datetime.timezone.utc), 'commenter': 'atiqueahmedziad', 'type': 'User'}, {'comment_id': 456681171, 'comment_body': ""Why are you using a ternary expression `? : null;` when the value is not used at all? Why aren't you using an `if` instead?"", 'comment_created': datetime.datetime(2020, 7, 17, 21, 25, 9, tzinfo=datetime.timezone.utc), 'commenter': 'Rob--W', 'type': 'User'}, {'comment_id': 456681518, 'comment_body': 'Use `this.tableBody.rows` instead. If you ever add nested tables (I hope not), the current logic will fall apart.', 'comment_created': datetime.datetime(2020, 7, 17, 21, 26, 18, tzinfo=datetime.timezone.utc), 'commenter': 'Rob--W', 'type': 'User'}, {'comment_id': 456681916, 'comment_body': 'Rename to `checkboxLabels`.', 'comment_created': datetime.datetime(2020, 7, 17, 21, 27, 40, tzinfo=datetime.timezone.utc), 'commenter': 'Rob--W', 'type': 'User'}, {'comment_id': 456682445, 'comment_body': 'This is no longer a template, but the actual content. `filterContainer` would be a better name. It could be confused with the element itself, so if you can think of an even better name, go for it.', 'comment_created': datetime.datetime(2020, 7, 17, 21, 29, 27, tzinfo=datetime.timezone.utc), 'commenter': 'Rob--W', 'type': 'User'}, {'comment_id': 456683990, 'comment_body': '`filterchange` would be a better name (combined with `onFilterChange` that I suggested elsewhere).', 'comment_created': datetime.datetime(2020, 7, 17, 21, 34, 33, tzinfo=datetime.timezone.utc), 'commenter': 'Rob--W', 'type': 'User'}, {'comment_id': 456686709, 'comment_body': 'Did you intentionally keep `isFilterRemoved` despite the last paragraph of https://github.com/mozilla/extension-activity-monitor/pull/10#discussion_r456373314 ? The extra parameteter to apply filtering makes the code more complicated, which can potentially cause bugs.\r\n\r\nThe simplest implementation is the naive approach of `row.hidden = !filter(log);`. The advantage of this is simplicity, the disadvantage compared to your current implementation is that your implementation can potentially be more efficient (in the current patch only! Future additions may invalidate the assumptions that enable this optimization in the first place).', 'comment_created': datetime.datetime(2020, 7, 17, 21, 42, 50, tzinfo=datetime.timezone.utc), 'commenter': 'Rob--W', 'type': 'User'}, {'comment_id': 456687845, 'comment_body': 'Never do `Object.keys(log).includes(key)`.\r\nUse `key in log` instead, or if you really want to see own keys, [`hasOwnProperty`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/hasOwnProperty).\r\n\r\n\r\n... in this specific case, I would actually get rid of the check altogether. Every key should be present, and if not you can filter by `undefined` instead.', 'comment_created': datetime.datetime(2020, 7, 17, 21, 46, 28, tzinfo=datetime.timezone.utc), 'commenter': 'Rob--W', 'type': 'User'}, {'comment_id': 456688772, 'comment_body': ""This line hard-codes the identity filter (`===`) again. In the interest of getting the patch in a mergeable state, I'll leave it at this for now, but I expect that you'll encounter issues when you add new filter types (e.g. substring-based filtering)."", 'comment_created': datetime.datetime(2020, 7, 17, 21, 49, 40, tzinfo=datetime.timezone.utc), 'commenter': 'Rob--W', 'type': 'User'}, {'comment_id': 456690853, 'comment_body': ""If you use the arrow function to bind the `this` of `isFilterMatched`, then `isFilterMatched` can use `this.model.filter` instead, and you don't need to pass `existingFilters`.\r\n\r\n`isFilterMatchedFn: log => this.isFilterMatched(log),`"", 'comment_created': datetime.datetime(2020, 7, 17, 21, 56, 29, tzinfo=datetime.timezone.utc), 'commenter': 'Rob--W', 'type': 'User'}, {'comment_id': 456691074, 'comment_body': ""This function name is too generic - let's call it `onFilterChange` to clarify its role."", 'comment_created': datetime.datetime(2020, 7, 17, 21, 57, 10, tzinfo=datetime.timezone.utc), 'commenter': 'Rob--W', 'type': 'User'}, {'comment_id': 456692456, 'comment_body': 'Looks unused, so remove it. Also, `object` is a very bad parameter name, please try to choose more meaningful variable names if you can.', 'comment_created': datetime.datetime(2020, 7, 17, 22, 1, 38, tzinfo=datetime.timezone.utc), 'commenter': 'Rob--W', 'type': 'User'}, {'comment_id': 456694760, 'comment_body': 'The visibility of the row currently follows two different code paths:\r\n- here, when the log is added.\r\n- when the filter is changed.\r\n\r\nThe logic is slightly different. Doing similar things in different ways is a recipe for bugs in the future, especially when unit tests are lacking.\r\n\r\nInstead of explicitly passing the filter function whenever the log needs to be checked again, could you assign a filter function to the `view` upon its construction? Then the view can use this function when a row is added or when the filter is changed (i.e. which implies that the visibility of the rows need to be recomputed). This also enables you to keep the `addTableRows` logic from before (to continue to take advantage of DocumentFragment when appending rows in bulk).', 'comment_created': datetime.datetime(2020, 7, 17, 22, 9, 21, tzinfo=datetime.timezone.utc), 'commenter': 'Rob--W', 'type': 'User'}, {'comment_id': 456758141, 'comment_body': ""Can we re-name the web component as `filter-option`? since it's making new filtering option to filter logs in the table. Also every time we are re-using the component, we are making a new filter option to filter the logs in the table."", 'comment_created': datetime.datetime(2020, 7, 18, 6, 47, 54, tzinfo=datetime.timezone.utc), 'commenter': 'atiqueahmedziad', 'type': 'User'}, {'comment_id': 456772815, 'comment_body': 'How about renaming the web component as `filter-box` ?', 'comment_created': datetime.datetime(2020, 7, 18, 9, 52, 41, tzinfo=datetime.timezone.utc), 'commenter': 'atiqueahmedziad', 'type': 'User'}, {'comment_id': 456826519, 'comment_body': ""`filter-option` sounds more descriptive than `filter-container` or `filter-box`. I like that you're thinking of a better name for the custom element on your own."", 'comment_created': datetime.datetime(2020, 7, 18, 20, 48, 17, tzinfo=datetime.timezone.utc), 'commenter': 'Rob--W', 'type': 'User'}, {'comment_id': 457227943, 'comment_body': 'Thanks for explaining. \r\nIn current update, `handleTableRows({ newLogs, filterObj })` method from `view` is fired when new logs are added or filter is changed.', 'comment_created': datetime.datetime(2020, 7, 20, 9, 41, 33, tzinfo=datetime.timezone.utc), 'commenter': 'atiqueahmedziad', 'type': 'User'}, {'comment_id': 457228138, 'comment_body': 'done :-)', 'comment_created': datetime.datetime(2020, 7, 20, 9, 41, 48, tzinfo=datetime.timezone.utc), 'commenter': 'atiqueahmedziad', 'type': 'User'}, {'comment_id': 457228956, 'comment_body': 'This method has a role only in rendering log table view, I have shifted this method over `log-view` component.', 'comment_created': datetime.datetime(2020, 7, 20, 9, 42, 51, tzinfo=datetime.timezone.utc), 'commenter': 'atiqueahmedziad', 'type': 'User'}, {'comment_id': 457229667, 'comment_body': 'It is done now :-)', 'comment_created': datetime.datetime(2020, 7, 20, 9, 43, 52, tzinfo=datetime.timezone.utc), 'commenter': 'atiqueahmedziad', 'type': 'User'}, {'comment_id': 457229745, 'comment_body': 'done :-)', 'comment_created': datetime.datetime(2020, 7, 20, 9, 43, 59, tzinfo=datetime.timezone.utc), 'commenter': 'atiqueahmedziad', 'type': 'User'}, {'comment_id': 457229869, 'comment_body': 'done :-)', 'comment_created': datetime.datetime(2020, 7, 20, 9, 44, 8, tzinfo=datetime.timezone.utc), 'commenter': 'atiqueahmedziad', 'type': 'User'}, {'comment_id': 457230835, 'comment_body': 'Nested `if` statements were looking bad to me, so I write these using ternary expression :-p. Anyway, this part has been changed now :-) ', 'comment_created': datetime.datetime(2020, 7, 20, 9, 45, 28, tzinfo=datetime.timezone.utc), 'commenter': 'atiqueahmedziad', 'type': 'User'}, {'comment_id': 457245468, 'comment_body': '> ... in this specific case, I would actually get rid of the check altogether. Every key should be present, and if not you can filter by `undefined` instead.\r\n\r\nI am not sure if I understand the last line of the comment.\r\n Since I am returning boolean, I deal with the `undefined` filter property [here](https://github.com/mozilla/extension-activity-monitor/pull/10/files#diff-9f25b3c1ffafaec3c4d02ac711c6392aR69) to keep it more natural. Is this okay ?\r\n\r\n\r\n', 'comment_created': datetime.datetime(2020, 7, 20, 10, 5, 53, tzinfo=datetime.timezone.utc), 'commenter': 'atiqueahmedziad', 'type': 'User'}, {'comment_id': 457250767, 'comment_body': '@Rob--W I could pass the `(null, this.model.filter)` as argument with `handleTableRows` method like `handleTableRows(null, this.model.filter)`, but I have put the values in an object with meaning full keys instead of passing them as an argument. Does this improve the readability ?', 'comment_created': datetime.datetime(2020, 7, 20, 10, 13, 41, tzinfo=datetime.timezone.utc), 'commenter': 'atiqueahmedziad', 'type': 'User'}, {'comment_id': 457325945, 'comment_body': ""So this is a follow-up to my review comment at https://github.com/mozilla/extension-activity-monitor/pull/10#discussion_r456694760\r\n\r\nThe issue is that you are still having two code paths that currently pass `this.model.filter`, but without any guarantee within the table-view-element that each row consistently uses the same filter.\r\n\r\nAlso, in the `handleTableRows` method, you're currently doing:\r\n\r\n```\r\nif (newLogs) {\r\n  // 1: appends new log\r\n}\r\n// 2: update filters for all logs\r\n```\r\n\r\nThe second part is very wasteful, because it recomputes the filter result for all logs, even if all you're doing is adding a new log.\r\n\r\nThe filter only needs to be updated on `filterchange`, and at initialization. Currently you're tying the model assignment to the row creation (append log), which works, but is not ideal. It will have maintainability issues (see start of comment) and performance issues (see previous paragraph).\r\n\r\nTo address all of the above issues, I suggest to create a separate method to set the filter, e.g. `setLogFilter` that takes a callback. The callback can be stored in the log-table-view, and is passed the log and returns a boolean. This is a very clear interface. This also relates to my comment about arrow functions at https://github.com/mozilla/extension-activity-monitor/pull/10#discussion_r456690853"", 'comment_created': datetime.datetime(2020, 7, 20, 12, 11, 45, tzinfo=datetime.timezone.utc), 'commenter': 'Rob--W', 'type': 'User'}, {'comment_id': 457336749, 'comment_body': ""> >Every key should be present, and if not you can filter by `undefined` instead.\r\n>\r\n> I am not sure if I understand the last line of the comment.\r\n\r\n`Object.keys(log).includes(key)` checks if the key is present in the log. The current keys to filter on are present in the log, so the check is redundant. But even if the key was missing, and you want a way to filter those entries, then you can filter by `undefined` instead (like you're doing in the code snippet that you had linked)."", 'comment_created': datetime.datetime(2020, 7, 20, 12, 27, 51, tzinfo=datetime.timezone.utc), 'commenter': 'Rob--W', 'type': 'User'}, {'comment_id': 457622393, 'comment_body': '@Rob--W Should I give a different name this function instead of `isFilterMatched`? Does it make it hard to read since there is already a function named `isFilterMatched` in the controller? ', 'comment_created': datetime.datetime(2020, 7, 20, 18, 53, 14, tzinfo=datetime.timezone.utc), 'commenter': 'atiqueahmedziad', 'type': 'User'}, {'comment_id': 457623977, 'comment_body': ""How about renaming it to `isModelFilterMatched`?\r\n**update**: renamed the function to `isModelFilterMatched`, I think it's more appropriate. "", 'comment_created': datetime.datetime(2020, 7, 20, 18, 55, 58, tzinfo=datetime.timezone.utc), 'commenter': 'atiqueahmedziad', 'type': 'User'}, {'comment_id': 457632651, 'comment_body': 'When a function name or variable name is meaningful in different classes, try to consistently use the same naming.\r\n\r\n```javascript\r\nupdateLogFilter(filterFunc) {\r\n  this.logView.updateLogFilter(filterFunc);\r\n}\r\n```\r\n\r\n(or `setLogFilter`)', 'comment_created': datetime.datetime(2020, 7, 20, 19, 11, 48, tzinfo=datetime.timezone.utc), 'commenter': 'Rob--W', 'type': 'User'}, {'comment_id': 457636746, 'comment_body': ""`modelFilter` is too generic and not useful. These classes are representing concrete concepts, so try to use concrete names instead of generic abstract names.\r\n\r\nThe `logView` member of the `View` should be considered private. Don't assign to it, but add a new function that forwards the call:\r\n\r\n```javascript\r\n// In View\r\nsetLogFilter(filterFunc) {\r\n  this.logView.setLogFilter(filterFunc);\r\n}\r\n```\r\n\r\nAnd is it even meaningful to already assign the log filter here? The logic is only useful when the filter has been initialized. So perhaps you should defer the call until after the filters have been imported or updated.\r\n\r\nThe actual implementation very deep down in `log-view-element` could have a default filter `log => true` if you want to."", 'comment_created': datetime.datetime(2020, 7, 20, 19, 19, 29, tzinfo=datetime.timezone.utc), 'commenter': 'Rob--W', 'type': 'User'}, {'comment_id': 457637586, 'comment_body': 'From here, you could call\r\n\r\n```javascript\r\nthis.view.setLogFilter(log => this.isFilterMatched(log));\r\n```', 'comment_created': datetime.datetime(2020, 7, 20, 19, 21, 3, tzinfo=datetime.timezone.utc), 'commenter': 'Rob--W', 'type': 'User'}, {'comment_id': 457639328, 'comment_body': ""Let's merge `set modelFilter` with `filterLogViewItems`, and choose `setLogFilter` as the method name."", 'comment_created': datetime.datetime(2020, 7, 20, 19, 24, 20, tzinfo=datetime.timezone.utc), 'commenter': 'Rob--W', 'type': 'User'}, {'comment_id': 457660854, 'comment_body': 'done :-)\r\nI have added a default filter function as false.', 'comment_created': datetime.datetime(2020, 7, 20, 20, 5, 36, tzinfo=datetime.timezone.utc), 'commenter': 'atiqueahmedziad', 'type': 'User'}, {'comment_id': 457660983, 'comment_body': 'done :-)\r\n', 'comment_created': datetime.datetime(2020, 7, 20, 20, 5, 53, tzinfo=datetime.timezone.utc), 'commenter': 'atiqueahmedziad', 'type': 'User'}, {'comment_id': 457661364, 'comment_body': 'done :-)', 'comment_created': datetime.datetime(2020, 7, 20, 20, 6, 41, tzinfo=datetime.timezone.utc), 'commenter': 'atiqueahmedziad', 'type': 'User'}]","[{'commit_sha': '90f408770153418511ce9322e8d5149d2c2041e3', 'committer_username': 'atiqueahmedziad', 'committer_name': 'Atique Ahmed Ziad', 'committer_email': None, 'commit_date': datetime.datetime(2014, 8, 5, 15, 37, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f4805450ad729081eee1e4db2bc6198e677cfe2a', 'committer_username': 'atiqueahmedziad', 'committer_name': 'Atique Ahmed Ziad', 'committer_email': None, 'commit_date': datetime.datetime(2014, 8, 5, 15, 37, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cf7e7886dfdc209548f68117454d0fa7d5ca6700', 'committer_username': 'atiqueahmedziad', 'committer_name': 'Atique Ahmed Ziad', 'committer_email': None, 'commit_date': datetime.datetime(2014, 8, 5, 15, 37, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dd5c7dd463b180b481525cb79e6490cf095f7f14', 'committer_username': 'atiqueahmedziad', 'committer_name': 'Atique Ahmed Ziad', 'committer_email': None, 'commit_date': datetime.datetime(2014, 8, 5, 15, 37, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dcfd123b6254109c1787c357a4b5b0338f80899b', 'committer_username': 'atiqueahmedziad', 'committer_name': 'Atique Ahmed Ziad', 'committer_email': None, 'commit_date': datetime.datetime(2014, 8, 5, 15, 37, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '495e0399417ece204d68e02bec6bf7a5863de31a', 'committer_username': 'atiqueahmedziad', 'committer_name': 'Atique Ahmed Ziad', 'committer_email': None, 'commit_date': datetime.datetime(2014, 8, 5, 15, 37, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '28ee5369d5755c8a5b27cfb4e86245eba6357a57', 'committer_username': 'atiqueahmedziad', 'committer_name': 'Atique Ahmed Ziad', 'committer_email': None, 'commit_date': datetime.datetime(2014, 8, 5, 15, 37, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'da297fc87abf597fe0fe2879657f539214f1863c', 'committer_username': 'atiqueahmedziad', 'committer_name': 'Atique Ahmed Ziad', 'committer_email': None, 'commit_date': datetime.datetime(2014, 8, 5, 15, 37, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f1dbcd8d83d3610badcdaf34d2a7d4be69753bea', 'committer_username': 'atiqueahmedziad', 'committer_name': 'Atique Ahmed Ziad', 'committer_email': None, 'commit_date': datetime.datetime(2014, 8, 5, 15, 37, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7da3faf85b34e4549ee010c238c5228569a74cf4', 'committer_username': 'atiqueahmedziad', 'committer_name': 'Atique Ahmed Ziad', 'committer_email': None, 'commit_date': datetime.datetime(2014, 8, 5, 15, 37, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ec670c8af84312e77b9361b52997e978773a5c59', 'committer_username': 'atiqueahmedziad', 'committer_name': 'Atique Ahmed Ziad', 'committer_email': None, 'commit_date': datetime.datetime(2014, 8, 5, 15, 37, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'deaaf47a6b482e79327a31887badc82eae9c34ee', 'committer_username': 'atiqueahmedziad', 'committer_name': 'Atique Ahmed Ziad', 'committer_email': None, 'commit_date': datetime.datetime(2014, 8, 5, 15, 37, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7e2e1df05f89c833848c639691c95106c6f778d9', 'committer_username': 'atiqueahmedziad', 'committer_name': 'Atique Ahmed Ziad', 'committer_email': None, 'commit_date': datetime.datetime(2014, 8, 5, 15, 37, 42, tzinfo=datetime.timezone.utc)}]",Atique Ahmed Ziad,8364578,,User,,72,,3,42
453874964,feat: clear logs from activitylog page,,True,12,https://api.github.com/repos/mozilla/extension-activity-monitor/pulls/12,https://github.com/mozilla/extension-activity-monitor/pull/12,closed,49,0,5,3,0,3,0,0,[],2020-07-20 21:56:43+00:00,2020-07-24 20:15:44+00:00,339541.0,"3 days, 22:19:01","[{'comment_id': 457719379, 'comment_body': 'I would just clear the logs at first, and not the filters.\r\nIf you really wish to include filter reset functionality (I don\'t think that it\'s necessary, because a user can reload the page to achieve the same result), this logic may work:\r\n\r\n- Click once - clear logs.\r\n- If filters are set - update button to clear filters.\r\n- If filters are updated or logs are updated, show ""clear logs"" on button again.\r\n\r\nIn terms of usability, clearing filters upon clearing the log would be comparable to losing all breakpoints when you reload a page that you\'re debugging.', 'comment_created': datetime.datetime(2020, 7, 20, 22, 8, 25, tzinfo=datetime.timezone.utc), 'commenter': 'Rob--W', 'type': 'User'}, {'comment_id': 457864122, 'comment_body': '@Rob--W Instead, should we have a separate `Clear Filter` button, that will -\r\n- Removes all the filter checkboxes, **when there are no logs in the table view** (most likely after clicking clear logs button)\r\n- Enables all the checkboxes (clear the filter object in `model`, i.e. no filters are being applied in the table view), **when there are logs in the table view.**\r\n\r\nHow does this sound?', 'comment_created': datetime.datetime(2020, 7, 21, 6, 25, 24, tzinfo=datetime.timezone.utc), 'commenter': 'atiqueahmedziad', 'type': 'User'}, {'comment_id': 457871234, 'comment_body': '@Rob--W I will do the `Clear Filter` feature in a follow-up pr later (I will write it in an issue as future follow-ups, once we decide how we want to do it). \r\nI am focusing on **clearing logs only** in this pr. I have updated the pr. :-)', 'comment_created': datetime.datetime(2020, 7, 21, 6, 42, 40, tzinfo=datetime.timezone.utc), 'commenter': 'atiqueahmedziad', 'type': 'User'}]","[{'commit_sha': 'dbe4a0e087548538a6394a7dbb001776598f1fa0', 'committer_username': 'atiqueahmedziad', 'committer_name': 'Atique Ahmed Ziad', 'committer_email': None, 'commit_date': datetime.datetime(2014, 8, 5, 15, 37, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4d851020c2c767949af90dbcd73db599965f2993', 'committer_username': 'atiqueahmedziad', 'committer_name': 'Atique Ahmed Ziad', 'committer_email': None, 'commit_date': datetime.datetime(2014, 8, 5, 15, 37, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '525c5554e5977931af854d3bd580d1e2b4706dc3', 'committer_username': 'atiqueahmedziad', 'committer_name': 'Atique Ahmed Ziad', 'committer_email': None, 'commit_date': datetime.datetime(2014, 8, 5, 15, 37, 42, tzinfo=datetime.timezone.utc)}]",Atique Ahmed Ziad,8364578,,User,,72,,3,42
454432261,feat: substring filtering option is added,,True,14,https://api.github.com/repos/mozilla/extension-activity-monitor/pulls/14,https://github.com/mozilla/extension-activity-monitor/pull/14,closed,365,57,6,19,0,50,0,0,[],2020-07-21 11:55:20+00:00,2020-07-24 20:23:56+00:00,289716.0,"3 days, 8:28:36","[{'comment_id': 458459940, 'comment_body': ""So now you're looping over all (fixed set of) keys of the filter, and doing conditionals on some keys.\n\nThis is not really effective, nor readable. I suggest to put the filter logic in the model, and unroll the loop (i.e. explicitly define the filter logic for every filter key)."", 'comment_created': datetime.datetime(2020, 7, 22, 0, 12, 46, tzinfo=datetime.timezone.utc), 'commenter': 'Rob--W', 'type': 'User'}, {'comment_id': 458460184, 'comment_body': 'Where is the disconnectedCallback?', 'comment_created': datetime.datetime(2020, 7, 22, 0, 13, 39, tzinfo=datetime.timezone.utc), 'commenter': 'Rob--W', 'type': 'User'}, {'comment_id': 458650750, 'comment_body': 'Added now.', 'comment_created': datetime.datetime(2020, 7, 22, 9, 11, 43, tzinfo=datetime.timezone.utc), 'commenter': 'atiqueahmedziad', 'type': 'User'}, {'comment_id': 458650814, 'comment_body': 'done :-)', 'comment_created': datetime.datetime(2020, 7, 22, 9, 11, 49, tzinfo=datetime.timezone.utc), 'commenter': 'atiqueahmedziad', 'type': 'User'}, {'comment_id': 458699915, 'comment_body': 'This logic looks inverted/incorrect.\n\nNow, with all filtering logic moved to the model, it should be easier to write unit tests to verify that the filtering logic works as expected. Can you add such unit tests?', 'comment_created': datetime.datetime(2020, 7, 22, 10, 39, 51, tzinfo=datetime.timezone.utc), 'commenter': 'Rob--W', 'type': 'User'}, {'comment_id': 458701102, 'comment_body': 'Use `event.target` instead of the non-standard originalTarget.', 'comment_created': datetime.datetime(2020, 7, 22, 10, 42, 12, tzinfo=datetime.timezone.utc), 'commenter': 'Rob--W', 'type': 'User'}, {'comment_id': 458777412, 'comment_body': 'This is inverted since I have to check from the opposite direction compared to other checkings above. \r\nYeah, I can add test for filtering logic.', 'comment_created': datetime.datetime(2020, 7, 22, 13, 8, 6, tzinfo=datetime.timezone.utc), 'commenter': 'atiqueahmedziad', 'type': 'User'}, {'comment_id': 458829207, 'comment_body': ""Why do you want to check the opposite direction?\r\n\r\nThe log should be shown if the filter matched.\r\n\r\nA potential issue of your current logic is that you're using `||`, i.e. showing logs if any of the filters matched. I believe that you should change it to `&&`, show if all filters match."", 'comment_created': datetime.datetime(2020, 7, 22, 14, 20, 56, tzinfo=datetime.timezone.utc), 'commenter': 'Rob--W', 'type': 'User'}, {'comment_id': 458860843, 'comment_body': ""It's actually hiding logs when any of the filters match (since I am returning the boolean for setting [`row.hidden`](https://github.com/mozilla/extension-activity-monitor/blob/master/src/lib/web-component/log-view/log-view-element.js#L30) property. Here, I am using the filter object to collect the items which I want to get rid off. \r\n\r\nFor example, if the `viewType` key in filter object has value `popup` in it, that means, I am getting rid of the logs whose view type is `popup`.\r\n\r\nIf I use `&&`, I will also have to invert the check [here](https://github.com/mozilla/extension-activity-monitor/blob/master/src/lib/web-component/log-view/log-view-element.js#L30). Also, currently I am not writing into filter object initially, but in this alternative approach, I will have to store all the filter labels into the filter object and remove them when user unchecks the checkboxes. Should I do that?"", 'comment_created': datetime.datetime(2020, 7, 22, 15, 2, 29, tzinfo=datetime.timezone.utc), 'commenter': 'atiqueahmedziad', 'type': 'User'}, {'comment_id': 458862268, 'comment_body': 'Logis should be `.hidden = !filter(log)`\r\n\r\n`filter`\'s contract is usually ""true if the element should be shown"", for example with Array\'s filter: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter', 'comment_created': datetime.datetime(2020, 7, 22, 15, 4, 30, tzinfo=datetime.timezone.utc), 'commenter': 'Rob--W', 'type': 'User'}, {'comment_id': 459044560, 'comment_body': 'done :-)', 'comment_created': datetime.datetime(2020, 7, 22, 19, 52, 46, tzinfo=datetime.timezone.utc), 'commenter': 'atiqueahmedziad', 'type': 'User'}, {'comment_id': 459044609, 'comment_body': 'done.', 'comment_created': datetime.datetime(2020, 7, 22, 19, 52, 53, tzinfo=datetime.timezone.utc), 'commenter': 'atiqueahmedziad', 'type': 'User'}, {'comment_id': 459071252, 'comment_body': ""This logic can't be right. This would re-add a disabled filter whenever a new log entry is added."", 'comment_created': datetime.datetime(2020, 7, 22, 20, 43, 19, tzinfo=datetime.timezone.utc), 'commenter': 'Rob--W', 'type': 'User'}, {'comment_id': 459363525, 'comment_body': 'updated :-)', 'comment_created': datetime.datetime(2020, 7, 23, 10, 47, 5, tzinfo=datetime.timezone.utc), 'commenter': 'atiqueahmedziad', 'type': 'User'}, {'comment_id': 459369710, 'comment_body': '@Rob--W Why are we doing the same thing (which brings the same result) in an alternate way that involves more code? \r\nAlso, in terms of performance in the current approach, I imagine that we are monitoring a lot of extensions and for that, we are storing all extensions id, type, viewtype... in the model, and comparing filter matching with `isFilterMatched` method involves more time than it would in the previous solution (where `.hidden = filter(log)`). ', 'comment_created': datetime.datetime(2020, 7, 23, 11, 0, 36, tzinfo=datetime.timezone.utc), 'commenter': 'atiqueahmedziad', 'type': 'User'}, {'comment_id': 459392071, 'comment_body': '> @Rob--W Why are we doing the same thing (which brings the same result) in an alternate way that involves more code?\r\n\r\nWhat part of the alternative is required and more code according to you?\r\n\r\nIn my view, the `addFilter` and `removeFilter` functions are not necessary. When they were added, it was to support the identity filtering method, but it would never work for the substring filtering method. A ""filterchange"" event that shares the current value of the filter (i.e. the full filter opposed to the addition or removal) would work for the checkbox and keyword input. There is no need for several more events.\r\n\r\nI\'m kind of surprised to see the introduction of the lot of events here, and am glad that you are questioning the need for them.\r\n\r\n> Also, in terms of performance in the current approach, I imagine that we are monitoring a lot of extensions and for that, we are storing all extensions id, type, viewtype... in the model, and comparing filter matching with `isFilterMatched` method involves more time than it would in the previous solution (where `.hidden = filter(log)`).\r\n\r\nI don\'t understand this claim. Why do you believe that there is a significant performance difference between the two?', 'comment_created': datetime.datetime(2020, 7, 23, 11, 50, 34, tzinfo=datetime.timezone.utc), 'commenter': 'Rob--W', 'type': 'User'}, {'comment_id': 459393492, 'comment_body': 'In isolation, this method seems to be missing a notification to re-apply filtering.\r\n\r\nWhen I look up the caller, it turns out that this filter is only added when a new log entry is added (visible by default).\r\n\r\nTo clarify that, it would be more useful to reflect that in the method name (e.g. `onNewFilterOption`) and add a comment to explain why it is not necessary to trigger the log updater.', 'comment_created': datetime.datetime(2020, 7, 23, 11, 53, 38, tzinfo=datetime.timezone.utc), 'commenter': 'Rob--W', 'type': 'User'}, {'comment_id': 459515737, 'comment_body': '> > @Rob--W Why are we doing the same thing (which brings the same result) in an alternate way that involves more code?\r\n> \r\n> What part of the alternative is required and more code according to you?\r\n\r\nIn previous logic, I didn\'t need to setup a communication (which I am doing currently [here](https://github.com/mozilla/extension-activity-monitor/pull/14/files#diff-9f25b3c1ffafaec3c4d02ac711c6392aR33-R37) between `filter-option-element` and model to update the model when a new checkbox is added. \r\n\r\n> In my view, the `addFilter` and `removeFilter` functions are not necessary. When they were added, it was to support the identity filtering method, but it would never work for the substring filtering method. A ""filterchange"" event that shares the current value of the filter (i.e. the full filter opposed to the addition or removal) would work for the checkbox and keyword input. There is no need for several more events.\r\n\r\nIf I remove `addFilter` and `removeFilter` functions, how do I modify the model\'s filter object? Modification to filter object in model is required since it says if any of the future logs should be hidden or not. \r\n\r\n> > Also, in terms of performance in the current approach, I imagine that we are monitoring a lot of extensions and for that, we are storing all extensions id, type, viewtype... in the model, and comparing filter matching with `isFilterMatched` method involves more time than it would in the previous solution (where `.hidden = filter(log)`).\r\n> \r\n> I don\'t understand this claim. Why do you believe that there is a significant performance difference between the two?\r\n\r\nThere might not be significant performance difference is practical but I was thinking, in the current approach where we save all the ids, viewTypes, type, api names and searching inside them. But previously logic, the filter object would contain only ids, viewTypes, type, api names of those which we want to be hidden. So, there would be less items (unless anyone filters out everything) in the filter object compared to current approach, and searching inside them would be faster for that?\r\n\r\n\r\n', 'comment_created': datetime.datetime(2020, 7, 23, 14, 59, 42, tzinfo=datetime.timezone.utc), 'commenter': 'atiqueahmedziad', 'type': 'User'}, {'comment_id': 459525078, 'comment_body': ""~~Should I keep this method? I will have to keep the `filterupdate` event then. I can also achieve the same result using `onFilterChange` method. What do you suggest ?~~\r\n\r\n**update:** I used the same event listener i.e. `filterchange` but have a different method (named `onNewFilterOption`) to add checkbox's label in filter object"", 'comment_created': datetime.datetime(2020, 7, 23, 15, 12, 21, tzinfo=datetime.timezone.utc), 'commenter': 'atiqueahmedziad', 'type': 'User'}, {'comment_id': 459607390, 'comment_body': '> > > @Rob--W Why are we doing the same thing (which brings the same result) in an alternate way that involves more code?\r\n> > \r\n> > \r\n> > What part of the alternative is required and more code according to you?\r\n> \r\n> In previous logic, I didn\'t need to setup a communication (which I am doing currently [here](https://github.com/mozilla/extension-activity-monitor/pull/14/files#diff-9f25b3c1ffafaec3c4d02ac711c6392aR33-R37) between `filter-option-element` and model to update the model when a new checkbox is added.\r\n\r\nThis brings up an interesting point: on what is expected to happen when a new log entry is added. When the user isn\'t filtering anything, the expected result is that the option should be checked by default (this is what you have in mind). But there are use cases where the user is looking for specific API calls, and in that case it would be preferred that new logs that don\'t match the existing criteria are hidden by default. The two different use cases can be supported by adding a checkbox `[ ] Select all by default` to change whether new options should be checked (or unchecked) by default. This can be done in a follow-up (consider filing an issue in this repo if you want to work on it later).\r\n\r\n> > In my view, the `addFilter` and `removeFilter` functions are not necessary. When they were added, it was to support the identity filtering method, but it would never work for the substring filtering method. A ""filterchange"" event that shares the current value of the filter (i.e. the full filter opposed to the addition or removal) would work for the checkbox and keyword input. There is no need for several more events.\r\n> \r\n> If I remove `addFilter` and `removeFilter` functions, how do I modify the model\'s filter object? Modification to filter object in model is required since it says if any of the future logs should be hidden or not.\r\n\r\nThe filter-option-element has a complete picture of all relevant checkboxes. It could simply send all relevant options to the model (so the model won\'t have to do `indexOf` + `splice` for example). The controller then doesn\'t need to know about the format of the filter any more, every `filterchange` event would then replace the filter.\r\n\r\n> > > Also, in terms of performance in the current approach, I imagine that we are monitoring a lot of extensions and for that, we are storing all extensions id, type, viewtype... in the model, and comparing filter matching with `isFilterMatched` method involves more time than it would in the previous solution (where `.hidden = filter(log)`).\r\n> > \r\n> > \r\n> > I don\'t understand this claim. Why do you believe that there is a significant performance difference between the two?\r\n> \r\n> There might not be significant performance difference is practical but I was thinking, in the current approach where we save all the ids, viewTypes, type, api names and searching inside them. But previously logic, the filter object would contain only ids, viewTypes, type, api names of those which we want to be hidden. So, there would be less items (unless anyone filters out everything) in the filter object compared to current approach, and searching inside them would be faster for that?\r\n\r\nThis is indeed valid for the use case of ""show all logs except for X"", but doesn\'t work for ""show logs matching Y"".\r\nAt this stage, it\'s important to get the prototype working first, optimizations can be done in a follow-up, once it\'s clear what you need to optimize.\r\n\r\nNote: use `Set` instead of `Array` for faster lookups.', 'comment_created': datetime.datetime(2020, 7, 23, 17, 20, 43, tzinfo=datetime.timezone.utc), 'commenter': 'Rob--W', 'type': 'User'}, {'comment_id': 459740410, 'comment_body': ""`new Set()` is sufficient. No need to pass an empty array. Let's fix this in the whole patch."", 'comment_created': datetime.datetime(2020, 7, 23, 21, 32, 59, tzinfo=datetime.timezone.utc), 'commenter': 'Rob--W', 'type': 'User'}, {'comment_id': 459741255, 'comment_body': '`valueEquals` is longer an accurate description. Even something like this would be better:\r\n\r\n```\r\nsetFilter(logKey, filterDescriptor) {\r\n```\r\n\r\nMaybe with a JSDoc comment before it to explain what the expected argument types are.', 'comment_created': datetime.datetime(2020, 7, 23, 21, 34, 56, tzinfo=datetime.timezone.utc), 'commenter': 'Rob--W', 'type': 'User'}, {'comment_id': 459743579, 'comment_body': ""Both names were fine.\r\n`labelText` wasn't wrong,\r\n`checkboxLabel` isn't wrong either."", 'comment_created': datetime.datetime(2020, 7, 23, 21, 40, 17, tzinfo=datetime.timezone.utc), 'commenter': 'Rob--W', 'type': 'User'}, {'comment_id': 459744081, 'comment_body': 'Nice. This is an example of a good comment. It explains why the code is like this, when it is not immediately obvious from the code.', 'comment_created': datetime.datetime(2020, 7, 23, 21, 41, 21, tzinfo=datetime.timezone.utc), 'commenter': 'Rob--W', 'type': 'User'}, {'comment_id': 459745153, 'comment_body': 'I suggest to use `onCheckboxChange`. And also pass the value true or false, depending on whether the checkbox is checked, so you can use it instead of `.has(...)` in the if below.', 'comment_created': datetime.datetime(2020, 7, 23, 21, 43, 52, tzinfo=datetime.timezone.utc), 'commenter': 'Rob--W', 'type': 'User'}, {'comment_id': 459746693, 'comment_body': ""Make a copy of the `activeCheckboxLabels` Set so that the internal state cannot be changed by external listeners, and that external listeners won't unexpectedly have a mutated set when the internal state changes."", 'comment_created': datetime.datetime(2020, 7, 23, 21, 47, 10, tzinfo=datetime.timezone.utc), 'commenter': 'Rob--W', 'type': 'User'}, {'comment_id': 459747330, 'comment_body': 'done :-)', 'comment_created': datetime.datetime(2020, 7, 23, 21, 48, 48, tzinfo=datetime.timezone.utc), 'commenter': 'atiqueahmedziad', 'type': 'User'}, {'comment_id': 459747989, 'comment_body': 'I also suggest to have some unit tests to verify that the filter logic (of the model) works as intended. The logic may seem obvious now, but the implementation may change in the future, and then that person who refactors the implementation would greatly appreciate the unit tests that you have written.', 'comment_created': datetime.datetime(2020, 7, 23, 21, 50, 24, tzinfo=datetime.timezone.utc), 'commenter': 'Rob--W', 'type': 'User'}, {'comment_id': 459962187, 'comment_body': ""@atiqueahmedziad To make sure that the expected webcomponents are defined in the test document as expected we just need to import those modules.\r\n\r\nE.g. we may export the custom elements classes in the related modules, something like:\r\n```js\r\nexport class FilterOption extends HTMLElement {\r\n...\r\n}\r\n```\r\nsame for the LogView class.\r\n\r\nThen in this test file we can just do something like the following (to load the modules and then explicitly check that the expected components are registered):\r\n```js\r\n...\r\n// Import the webcomponents modules \r\nimport { FilterOption } from '../src/lib/web-component/filter-option/filter-option-element.js';\r\nimport { LogView } from '../src/lib/web-component/log-view/log-view-element.js';\r\n\r\n...\r\nconst activityLogBody = domParser.parseFromString(activityLogHtml, 'text/html')\r\n  .body.innerHTML;\r\n\r\ntest('isFilterMatched function returns true when all properties of a log are matched with filter object, else it returns true', () => {\r\n  document.body.innerHTML = activityLogBody\r\n\r\n  // Assert that the expected custom elements have been registered to the test window CustomElementRegistry.\r\n  expect(window.customElements.get('log-view')).toBe(LogView);\r\n  expect(window.customElements.get('filter-option')).toBe(FilterOption);\r\n\r\n  // proceed with the rest of the test\r\n  ...\r\n```"", 'comment_created': datetime.datetime(2020, 7, 24, 10, 0, 51, tzinfo=datetime.timezone.utc), 'commenter': 'rpl', 'type': 'User'}, {'comment_id': 459963500, 'comment_body': 'This description is too specific to the UI. The model doesn\'t need to know about how the filter is created. I intentionally chose a variable name (`filterDescriptor`) that clearly describes the role of the value, independent of the DOM.\r\n\r\nThe type definition is incorrect. For `logKey=""keyword""`, `filterDescriptor` is expected to be a string. This mistake shows why the need for proper documentation is important: if even you, who wrote all code, can\'t get the type right at the first try, imagine the difficulty that others (who don\'t work on the code) will have at trying to figure out the parameters to pass.\r\n\r\nThe JSDoc here should be written such that anyone who isn\'t familiar with the whole code base is able to know what kind of values they are allowed to pass (and if not obvious - why). The main purpose is to help the reader with understanding how they can use the function.', 'comment_created': datetime.datetime(2020, 7, 24, 10, 4, 1, tzinfo=datetime.timezone.utc), 'commenter': 'Rob--W', 'type': 'User'}, {'comment_id': 459963632, 'comment_body': 'Remove blank line between JSDoc comment and the function.', 'comment_created': datetime.datetime(2020, 7, 24, 10, 4, 19, tzinfo=datetime.timezone.utc), 'commenter': 'Rob--W', 'type': 'User'}, {'comment_id': 459963688, 'comment_body': 'Remove debugging comment.', 'comment_created': datetime.datetime(2020, 7, 24, 10, 4, 24, tzinfo=datetime.timezone.utc), 'commenter': 'Rob--W', 'type': 'User'}, {'comment_id': 459967400, 'comment_body': ""The `Set` constructor takes an iterable. A `Set` instance itself is also iterable, so you don't need to turn it into an array first.\r\n\r\n`[...this.activeCheckboxLabels]` iterates over the set and results in an array.\r\n`new Set([...this.activeCheckboxLabels])` results in two iterations: first to turn the set into an array, and then again the `Set` constructor iterates over the array to fill the set.\r\n"", 'comment_created': datetime.datetime(2020, 7, 24, 10, 13, 28, tzinfo=datetime.timezone.utc), 'commenter': 'Rob--W', 'type': 'User'}, {'comment_id': 460055023, 'comment_body': 'done :-)', 'comment_created': datetime.datetime(2020, 7, 24, 13, 34, 24, tzinfo=datetime.timezone.utc), 'commenter': 'atiqueahmedziad', 'type': 'User'}, {'comment_id': 460055070, 'comment_body': 'done.', 'comment_created': datetime.datetime(2020, 7, 24, 13, 34, 29, tzinfo=datetime.timezone.utc), 'commenter': 'atiqueahmedziad', 'type': 'User'}, {'comment_id': 460055110, 'comment_body': 'done.', 'comment_created': datetime.datetime(2020, 7, 24, 13, 34, 34, tzinfo=datetime.timezone.utc), 'commenter': 'atiqueahmedziad', 'type': 'User'}, {'comment_id': 460055591, 'comment_body': 'Thanks for explaining. I have updated the JSDoc description :-)\r\n\r\n', 'comment_created': datetime.datetime(2020, 7, 24, 13, 35, 22, tzinfo=datetime.timezone.utc), 'commenter': 'atiqueahmedziad', 'type': 'User'}, {'comment_id': 460060187, 'comment_body': '`inputBoxListener` contains a timer. That timer should be canceled upon disconnect.', 'comment_created': datetime.datetime(2020, 7, 24, 13, 43, 19, tzinfo=datetime.timezone.utc), 'commenter': 'Rob--W', 'type': 'User'}, {'comment_id': 460085618, 'comment_body': '@atiqueahmedziad \r\nThis jsdoc looks still wrong to me (e.g. there are two different definition of the filterDescriptor property, and if I would be a developer that is looking to this jsdoc to understand this function I would still be confused on how I should use it) and the current method signature does confuse me a bit (I had to follow the code to actually understand how that was going to be used).\r\n\r\nIn my opinion this method could take as its parameter an object with ""the subset of the same properties of the filter object"" that the caller want to update (with the exact same properties of the filter object as defined in the constructor al line 6, all properties would be optional to allow the caller to update a particular part of the filter and leave the rest unmodified).\r\n\r\nI think that this would make the method easier to use and it should also make it easier to express it in the jsdoc in a non confusing way.\r\n\r\nThe method signature would be something like\r\n```\r\nsetFilter(updatedFilterProps) {\r\n  // here the code to merge updateFilterProps into this.filter\r\n}\r\n```\r\n\r\nLet me know what do you think (and if my comment is clear enough)', 'comment_created': datetime.datetime(2020, 7, 24, 14, 24, 37, tzinfo=datetime.timezone.utc), 'commenter': 'rpl', 'type': 'User'}, {'comment_id': 460158898, 'comment_body': 'Thanks @rpl for the idea. I have implemented this. :-) ', 'comment_created': datetime.datetime(2020, 7, 24, 16, 26, 59, tzinfo=datetime.timezone.utc), 'commenter': 'atiqueahmedziad', 'type': 'User'}, {'comment_id': 460165087, 'comment_body': '@atiqueahmedziad I think that to make this jsdoc really useful you should actually spell what are the properties expected in that object, what is their type and what they represent, the current comment is quite generic.\r\n\r\nAs a ""reader of the jsdoc"" I would like to see explicitly that the expected properties are `id`, `viewType`, `type` and `keyword`, and then I would like to know what `id`, `viewType`, `type` and `keyword` represents and what is their expected types.', 'comment_created': datetime.datetime(2020, 7, 24, 16, 38, 51, tzinfo=datetime.timezone.utc), 'commenter': 'rpl', 'type': 'User'}, {'comment_id': 460169009, 'comment_body': 'The debouncing logic is quite repetitive (and has a bug - see my comment at the filter-option class).\r\n\r\nConsider fixing the logic and putting the implementation at a shared location.', 'comment_created': datetime.datetime(2020, 7, 24, 16, 45, 51, tzinfo=datetime.timezone.utc), 'commenter': 'Rob--W', 'type': 'User'}, {'comment_id': 460169491, 'comment_body': ""`filter-keyword.css` is currently empty and not referenced. If you don't plan on using it, remove it from the PR."", 'comment_created': datetime.datetime(2020, 7, 24, 16, 46, 43, tzinfo=datetime.timezone.utc), 'commenter': 'Rob--W', 'type': 'User'}, {'comment_id': 460169926, 'comment_body': 'Nice one, good use of modern JS syntax for readability!', 'comment_created': datetime.datetime(2020, 7, 24, 16, 47, 29, tzinfo=datetime.timezone.utc), 'commenter': 'Rob--W', 'type': 'User'}, {'comment_id': 460183046, 'comment_body': 'should I use the following delay function for this?\r\n```\r\n  delay(fn, ms) {\r\n    let timer = 0;\r\n    return function (...args) {\r\n      clearTimeout(timer);\r\n      timer = setTimeout(fn.bind(this, ...args), ms || 0);\r\n    };\r\n  }\r\n```\r\nAlso, I am not getting any of your comments on filter-option class that points at any bug. ', 'comment_created': datetime.datetime(2020, 7, 24, 17, 13, 21, tzinfo=datetime.timezone.utc), 'commenter': 'atiqueahmedziad', 'type': 'User'}, {'comment_id': 460191159, 'comment_body': ""https://github.com/mozilla/extension-activity-monitor/pull/14#discussion_r460060187 points to a bug. When disconnected, an element should cease to work. In the current implementation it will continue to trigger events.\r\n\r\nA way to avoid this issue and to avoid duplication is to let the controller coalesce the repeated filter changes. It can update the filter, but debounce the filter change propagation until the value stabilizes. SInce this is an optimization that isn't required for this PR, I would not bother with it now, and defer it to later.\r\n\r\nIn the `keyword` input, there is likely some value in debouncing since a user types.\r\nIn the checkbox component, I would remove it, since there is rarely a use for debouncing checkbox changes.\r\n\r\nSo, to summarize: to keep this PR focused on what it should be doing, fix the debounce logic to clear the timer on element removal, and remove the debounce logic from the filter-option component."", 'comment_created': datetime.datetime(2020, 7, 24, 17, 29, 18, tzinfo=datetime.timezone.utc), 'commenter': 'Rob--W', 'type': 'User'}, {'comment_id': 460245509, 'comment_body': ""Don't create separate definitions for the same property. You can use `Set<string|undefined>` to merge the types. If you feel a need to explain the `undefined` value, do so in the description."", 'comment_created': datetime.datetime(2020, 7, 24, 19, 24, 42, tzinfo=datetime.timezone.utc), 'commenter': 'Rob--W', 'type': 'User'}, {'comment_id': 460247496, 'comment_body': ""The description doesn't say more than the type. If you can't think of anything meaningful, just leave the description empty."", 'comment_created': datetime.datetime(2020, 7, 24, 19, 29, 10, tzinfo=datetime.timezone.utc), 'commenter': 'Rob--W', 'type': 'User'}, {'comment_id': 460248133, 'comment_body': ""Move the logic to a `dispatchFilterChanged` method. You don't need to use `event.target.inputBox`, `this.inputBox` suffices."", 'comment_created': datetime.datetime(2020, 7, 24, 19, 30, 33, tzinfo=datetime.timezone.utc), 'commenter': 'Rob--W', 'type': 'User'}, {'comment_id': 460259636, 'comment_body': 'done :-)', 'comment_created': datetime.datetime(2020, 7, 24, 19, 56, 36, tzinfo=datetime.timezone.utc), 'commenter': 'atiqueahmedziad', 'type': 'User'}]","[{'commit_sha': '8f50fb1df75a83090faf82aa9c30dfcef2879ff7', 'committer_username': 'atiqueahmedziad', 'committer_name': 'Atique Ahmed Ziad', 'committer_email': None, 'commit_date': datetime.datetime(2014, 8, 5, 15, 37, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b3984ac1b147844de95bb3ccea3ab0cb54156c20', 'committer_username': 'atiqueahmedziad', 'committer_name': 'Atique Ahmed Ziad', 'committer_email': None, 'commit_date': datetime.datetime(2014, 8, 5, 15, 37, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c6e5d09919fdb2df9de94181dbfde78458ba521a', 'committer_username': 'atiqueahmedziad', 'committer_name': 'Atique Ahmed Ziad', 'committer_email': None, 'commit_date': datetime.datetime(2014, 8, 5, 15, 37, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '11178a9d5940e180da27998e8484078387142239', 'committer_username': 'atiqueahmedziad', 'committer_name': 'Atique Ahmed Ziad', 'committer_email': None, 'commit_date': datetime.datetime(2014, 8, 5, 15, 37, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b3f93a26bc312e0318851e3cc0c4544e0fcc370c', 'committer_username': 'atiqueahmedziad', 'committer_name': 'Atique Ahmed Ziad', 'committer_email': None, 'commit_date': datetime.datetime(2014, 8, 5, 15, 37, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aacdb8da412902926eea7edcb0f7757d027f8f9a', 'committer_username': 'atiqueahmedziad', 'committer_name': 'Atique Ahmed Ziad', 'committer_email': None, 'commit_date': datetime.datetime(2014, 8, 5, 15, 37, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ac0060c1ba4541fb607d56f7c71714fe2bf73bc4', 'committer_username': 'atiqueahmedziad', 'committer_name': 'Atique Ahmed Ziad', 'committer_email': None, 'commit_date': datetime.datetime(2014, 8, 5, 15, 37, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2b54830acbf8aeb3353363c5fdc16b7935c868f9', 'committer_username': 'atiqueahmedziad', 'committer_name': 'Atique Ahmed Ziad', 'committer_email': None, 'commit_date': datetime.datetime(2014, 8, 5, 15, 37, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4d983734aebdd2c83f5003c92428238c762a4f10', 'committer_username': 'atiqueahmedziad', 'committer_name': 'Atique Ahmed Ziad', 'committer_email': None, 'commit_date': datetime.datetime(2014, 8, 5, 15, 37, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7c6d4479e10827c65f62c35cba6efc6f086c40de', 'committer_username': 'atiqueahmedziad', 'committer_name': 'Atique Ahmed Ziad', 'committer_email': None, 'commit_date': datetime.datetime(2014, 8, 5, 15, 37, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '72d66c25cf989915091837db3fcb5a1bd32c33d5', 'committer_username': 'atiqueahmedziad', 'committer_name': 'Atique Ahmed Ziad', 'committer_email': None, 'commit_date': datetime.datetime(2014, 8, 5, 15, 37, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1555f767e0e2ea7374380fa869efb0df6e91b36a', 'committer_username': 'atiqueahmedziad', 'committer_name': 'Atique Ahmed Ziad', 'committer_email': None, 'commit_date': datetime.datetime(2014, 8, 5, 15, 37, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5eb0336f6c8803ee8370420f9b3cca769c46df02', 'committer_username': 'atiqueahmedziad', 'committer_name': 'Atique Ahmed Ziad', 'committer_email': None, 'commit_date': datetime.datetime(2014, 8, 5, 15, 37, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f256361cccdc44e6785e0346968e0666d4c50f1f', 'committer_username': 'atiqueahmedziad', 'committer_name': 'Atique Ahmed Ziad', 'committer_email': None, 'commit_date': datetime.datetime(2014, 8, 5, 15, 37, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5aee212a1fb373ae5ba01b152f55e95d9caa92c5', 'committer_username': 'atiqueahmedziad', 'committer_name': 'Atique Ahmed Ziad', 'committer_email': None, 'commit_date': datetime.datetime(2014, 8, 5, 15, 37, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6824996ee71b2c1b083077a1c96de50134dc428f', 'committer_username': 'atiqueahmedziad', 'committer_name': 'Atique Ahmed Ziad', 'committer_email': None, 'commit_date': datetime.datetime(2014, 8, 5, 15, 37, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'baf799f53357e98e1ca99fc77347df887b020b2a', 'committer_username': 'atiqueahmedziad', 'committer_name': 'Atique Ahmed Ziad', 'committer_email': None, 'commit_date': datetime.datetime(2014, 8, 5, 15, 37, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '87d901f04437c0445fc3be5f3ba3851a5e9225e8', 'committer_username': 'atiqueahmedziad', 'committer_name': 'Atique Ahmed Ziad', 'committer_email': None, 'commit_date': datetime.datetime(2014, 8, 5, 15, 37, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8fa73a312e7c44982df363817a6b8e246f91aea2', 'committer_username': 'atiqueahmedziad', 'committer_name': 'Atique Ahmed Ziad', 'committer_email': None, 'commit_date': datetime.datetime(2014, 8, 5, 15, 37, 42, tzinfo=datetime.timezone.utc)}]",Atique Ahmed Ziad,8364578,,User,,72,,3,42
456500344,fix: clear logs event listener regression,This pr fix the regression created by pr #14 (while doing rebase).,True,16,https://api.github.com/repos/mozilla/extension-activity-monitor/pulls/16,https://github.com/mozilla/extension-activity-monitor/pull/16,closed,57,0,2,1,0,0,0,0,[],2020-07-24 21:34:38+00:00,2020-07-24 21:40:34+00:00,356.0,0:05:56,[],"[{'commit_sha': 'fc1a511e9ed46cd9fa8a8d26565cad6d353f85f0', 'committer_username': 'atiqueahmedziad', 'committer_name': 'Atique Ahmed Ziad', 'committer_email': None, 'commit_date': datetime.datetime(2014, 8, 5, 15, 37, 42, tzinfo=datetime.timezone.utc)}]",Atique Ahmed Ziad,8364578,,User,,72,,3,42
454464535,feat: styles of log detail view is updated,"As suggested, in last meeting, I am adding `<pre>` in viewing log details in sidebar.",True,15,https://api.github.com/repos/mozilla/extension-activity-monitor/pulls/15,https://github.com/mozilla/extension-activity-monitor/pull/15,closed,12,3,2,4,0,10,0,0,[],2020-07-21 12:33:32+00:00,2020-07-29 13:33:20+00:00,694788.0,"8 days, 0:59:48","[{'comment_id': 460280999, 'comment_body': 'Given that you are using the CSS to make the element to be treat the whitespaces as a pre element, then you can leave the `.log-details` element as a `div` (in the end this is just a temporary workaround to make the log details a bit more readable in the short term, to be just used until you will be able to spent some time on making the sidebar details more complete and useful).\r\n\r\nTo make the log details a bit more readable, along with this temporary styling change you should also change the related `JSON.stringify` call to make it ""pretty print"" (indent it basically) a bit the JSON data in the generated string (If you have never used the other `JSON.stringify` parameters before you can take at this doc page: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify).\r\n\r\nI guess that there may be some other css tweaks to make the content fit well into the page layout, e.g. you could probably make the wrapper element to show a scrollbar if the content is overflowing the wrapper element, but don\'t spend too much more time than that in this PR, this is just a temporary measure (and the activity log page in general could likely use some more work on its CSS to improve its layout, but it can definitely be deferred to a separate PR).', 'comment_created': datetime.datetime(2020, 7, 24, 20, 48, 28, tzinfo=datetime.timezone.utc), 'commenter': 'rpl', 'type': 'User'}, {'comment_id': 460281192, 'comment_body': ""As mentioned in the other comment, let's change this back to a div, the CSS styling should be already enough."", 'comment_created': datetime.datetime(2020, 7, 24, 20, 49, 1, tzinfo=datetime.timezone.utc), 'commenter': 'rpl', 'type': 'User'}, {'comment_id': 461139679, 'comment_body': 'done. Thanks :-).', 'comment_created': datetime.datetime(2020, 7, 27, 20, 8, 43, tzinfo=datetime.timezone.utc), 'commenter': 'atiqueahmedziad', 'type': 'User'}, {'comment_id': 461540618, 'comment_body': 'Nit, 2 (instead of 4) may be enough for the indentation, and it would spare a bit of horizontal space.', 'comment_created': datetime.datetime(2020, 7, 28, 12, 29, 3, tzinfo=datetime.timezone.utc), 'commenter': 'rpl', 'type': 'User'}, {'comment_id': 461542206, 'comment_body': 'have you checked what happens if the json log contains something (e.g. a very long string value or a very long object property name)? would it has to also scroll horizontally? would setting the overflow to `auto` also work and made the scrollbar hidden when the json fits into the available space? ', 'comment_created': datetime.datetime(2020, 7, 28, 12, 31, 37, tzinfo=datetime.timezone.utc), 'commenter': 'rpl', 'type': 'User'}, {'comment_id': 461758571, 'comment_body': 'This would add some margin under the table.', 'comment_created': datetime.datetime(2020, 7, 28, 17, 41, 43, tzinfo=datetime.timezone.utc), 'commenter': 'atiqueahmedziad', 'type': 'User'}, {'comment_id': 461759855, 'comment_body': ""Indenting the layout a bit from left so that log string doesn't align too closely with the edge."", 'comment_created': datetime.datetime(2020, 7, 28, 17, 43, 55, tzinfo=datetime.timezone.utc), 'commenter': 'atiqueahmedziad', 'type': 'User'}, {'comment_id': 461763259, 'comment_body': 'When  there is a long string value, it gets indent into the next time. Have a look at the screenshot.\r\n### screenshot\r\n<img width=""521"" alt=""Screenshot 2020-07-28 at 11 49 08 PM"" src=""https://user-images.githubusercontent.com/8364578/88702290-f35dd300-d12c-11ea-9d3e-695485161f23.png"">\r\n', 'comment_created': datetime.datetime(2020, 7, 28, 17, 49, 30, tzinfo=datetime.timezone.utc), 'commenter': 'atiqueahmedziad', 'type': 'User'}, {'comment_id': 461764888, 'comment_body': 'Setting the `max-height` to 450px since I used 50px pixels margin in total at [line 27](https://github.com/mozilla/extension-activity-monitor/pull/15/files#diff-3e34fcdde14c53a51242dcc1edf18813R27) (40px top and 10px bottom) to give it box like look.', 'comment_created': datetime.datetime(2020, 7, 28, 17, 52, 6, tzinfo=datetime.timezone.utc), 'commenter': 'atiqueahmedziad', 'type': 'User'}, {'comment_id': 461767650, 'comment_body': '> would setting the overflow to `auto` also work and made the scrollbar hidden when the json fits into the available space?\r\n\r\nYeah, I have updated the overflow to be `auto` :-)\r\n', 'comment_created': datetime.datetime(2020, 7, 28, 17, 56, 21, tzinfo=datetime.timezone.utc), 'commenter': 'atiqueahmedziad', 'type': 'User'}]","[{'commit_sha': 'ba402ef4f71757f5529feedb0e6c0ccc214f2290', 'committer_username': 'atiqueahmedziad', 'committer_name': 'Atique Ahmed Ziad', 'committer_email': None, 'commit_date': datetime.datetime(2014, 8, 5, 15, 37, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7f8958b8d046f10c76abd3d242b1df8338e7efde', 'committer_username': 'atiqueahmedziad', 'committer_name': 'Atique Ahmed Ziad', 'committer_email': None, 'commit_date': datetime.datetime(2014, 8, 5, 15, 37, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5ea124019384921d23505e513aa4fd0a11953d0d', 'committer_username': 'atiqueahmedziad', 'committer_name': 'Atique Ahmed Ziad', 'committer_email': None, 'commit_date': datetime.datetime(2014, 8, 5, 15, 37, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6b2199c085055a8253392449b7d3ee84a8c4e91d', 'committer_username': 'atiqueahmedziad', 'committer_name': 'Atique Ahmed Ziad', 'committer_email': None, 'commit_date': datetime.datetime(2014, 8, 5, 15, 37, 42, tzinfo=datetime.timezone.utc)}]",Atique Ahmed Ziad,8364578,,User,,72,,3,42
454196967,feat: filter option with API name,,True,13,https://api.github.com/repos/mozilla/extension-activity-monitor/pulls/13,https://github.com/mozilla/extension-activity-monitor/pull/13,closed,100,39,7,11,7,12,0,0,[],2020-07-21 06:54:40+00:00,2020-08-04 18:40:42+00:00,1251962.0,"14 days, 11:46:02","[{'comment_id': 458765884, 'comment_body': ""This doesn't belong here. You should control this at the input, e.g. by using `logs.filter(log => ...)` to exclude some entries."", 'comment_created': datetime.datetime(2020, 7, 22, 12, 48, 57, tzinfo=datetime.timezone.utc), 'commenter': 'Rob--W', 'type': 'User'}, {'comment_id': 461185306, 'comment_body': 'This is not what I meant.\r\n\r\n> Did you mean to make another filter option named other where there will be content script urls (for now) as checkboxes?\r\n\r\nWe\'ve misunderstood each other. I thought that you suggested to add an option with value ""other"" in the existing `<filter-option filter-key=""name"">`.\r\n\r\nI meant this:\r\n\r\n```\r\n<filter-option filter-key=""name"">\r\n[x] tabs.create\r\n[x] tabs.update\r\n[x] other <-- New option here that matches content script logs.\r\n</filter-option>\r\n```\r\n\r\n\r\n... where `other` covers everything else that doesn\'t have an API name. Or, since the only type of logs are content scripts, call it something like ""Content scripts"".', 'comment_created': datetime.datetime(2020, 7, 27, 21, 37, 38, tzinfo=datetime.timezone.utc), 'commenter': 'Rob--W', 'type': 'User'}, {'comment_id': 461600661, 'comment_body': '@Rob--W we already get a checkbox named `content_script` inside API Type `filter-option` when any content script is found. Do we want a checkbox with named  ""Content scripts"" under API Name `filter-option`  too ?', 'comment_created': datetime.datetime(2020, 7, 28, 13, 57, 42, tzinfo=datetime.timezone.utc), 'commenter': 'atiqueahmedziad', 'type': 'User'}, {'comment_id': 461628853, 'comment_body': 'Currently your filter design assumes that the set of options is closed. That is, every log entry matches one of the given options, and every option matches at least one log.\r\n\r\nIf the UI is clear* that ""API name"" only matches log entries related to API events (this is indeed reasonable), then you could indeed choose to not add an ""other"" or ""content scripts"" checkbox at all.\r\n\r\n\\* one stupidly simple way to achieve this is by adding a tooltip that explains to which log types the ""API name"" filter applies.', 'comment_created': datetime.datetime(2020, 7, 28, 14, 32, 38, tzinfo=datetime.timezone.utc), 'commenter': 'Rob--W', 'type': 'User'}, {'comment_id': 462904962, 'comment_body': ""Don't save `contentScriptUrls` - it is not used elsewhere.\r\n\r\nWhen a filter is not applicable, just return true. You should also do this in your timestamp patch - when there is no timestamp filter don't check the filter at all.\r\n\r\n```\r\nif (type is content script) {\r\n  return true;\r\n}\r\nreturn match normal filter otherwise;\r\n```"", 'comment_created': datetime.datetime(2020, 7, 30, 10, 32, 45, tzinfo=datetime.timezone.utc), 'commenter': 'Rob--W', 'type': 'User'}, {'comment_id': 462906710, 'comment_body': '`.hidden = true;`', 'comment_created': datetime.datetime(2020, 7, 30, 10, 36, 17, tzinfo=datetime.timezone.utc), 'commenter': 'Rob--W', 'type': 'User'}, {'comment_id': 462906795, 'comment_body': '`.colSpan = 2;`', 'comment_created': datetime.datetime(2020, 7, 30, 10, 36, 28, tzinfo=datetime.timezone.utc), 'commenter': 'Rob--W', 'type': 'User'}, {'comment_id': 462907988, 'comment_body': '""This filter only applied to log entries related to API events.""', 'comment_created': datetime.datetime(2020, 7, 30, 10, 39, tzinfo=datetime.timezone.utc), 'commenter': 'Rob--W', 'type': 'User'}, {'comment_id': 462910273, 'comment_body': ""It's good that you put a comment here, because otherwise the logic is not as obvious.\r\n\r\nWhen you remove the `.contentScriptUrls` line  (as I suggested elsewhere), please keep the comment, so that future readers know why content script logs are filtered.\r\n\r\n```\r\n// log.name contains the script URL instead of the API name for content scripts.\r\n```"", 'comment_created': datetime.datetime(2020, 7, 30, 10, 43, 49, tzinfo=datetime.timezone.utc), 'commenter': 'Rob--W', 'type': 'User'}, {'comment_id': 463064475, 'comment_body': 'applies*, sorry, I made a typo before.', 'comment_created': datetime.datetime(2020, 7, 30, 15, 4, 34, tzinfo=datetime.timezone.utc), 'commenter': 'Rob--W', 'type': 'User'}, {'comment_id': 465178576, 'comment_body': 'I suggest to use the following logic instead of a ternary.\n\n```\nif content script\n  // Comment explaining why there is an early return.\n  Return true\nReturn normal check\n```\n\nIt is more readable, because it is more obvious that content scripts are excluded, together with the reason.', 'comment_created': datetime.datetime(2020, 8, 4, 16, 30, 35, tzinfo=datetime.timezone.utc), 'commenter': 'Rob--W', 'type': 'User'}, {'comment_id': 465252294, 'comment_body': 'done :-)', 'comment_created': datetime.datetime(2020, 8, 4, 18, 38, 31, tzinfo=datetime.timezone.utc), 'commenter': 'atiqueahmedziad', 'type': 'User'}]","[{'commit_sha': '873ec847c9ee31244f60d652c7a6c50f59a9b8b8', 'committer_username': 'atiqueahmedziad', 'committer_name': 'Atique Ahmed Ziad', 'committer_email': None, 'commit_date': datetime.datetime(2014, 8, 5, 15, 37, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ef16f5b41806fcfb3ca7341f198c50e77157a5f3', 'committer_username': 'atiqueahmedziad', 'committer_name': 'Atique Ahmed Ziad', 'committer_email': None, 'commit_date': datetime.datetime(2014, 8, 5, 15, 37, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9de26b042a250bfaec30b3dfb3498895daebf5cc', 'committer_username': 'atiqueahmedziad', 'committer_name': 'Atique Ahmed Ziad', 'committer_email': None, 'commit_date': datetime.datetime(2014, 8, 5, 15, 37, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '76adf93f704ced2b0ca9ee92fe7d4744baf69de3', 'committer_username': 'atiqueahmedziad', 'committer_name': 'Atique Ahmed Ziad', 'committer_email': None, 'commit_date': datetime.datetime(2014, 8, 5, 15, 37, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '279ba7a45a0792ef1e05952081e411f73fe7b9bc', 'committer_username': 'atiqueahmedziad', 'committer_name': 'Atique Ahmed Ziad', 'committer_email': None, 'commit_date': datetime.datetime(2014, 8, 5, 15, 37, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '21d1cc6f633c6e7351a40bdf08e918b0e9a543ba', 'committer_username': 'atiqueahmedziad', 'committer_name': 'Atique Ahmed Ziad', 'committer_email': None, 'commit_date': datetime.datetime(2014, 8, 5, 15, 37, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3af83dcde6c584e5f607eca55e079bcd2605bde6', 'committer_username': 'atiqueahmedziad', 'committer_name': 'Atique Ahmed Ziad', 'committer_email': None, 'commit_date': datetime.datetime(2014, 8, 5, 15, 37, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '982a4f80b6994f1059264449e478ff570c16b771', 'committer_username': 'atiqueahmedziad', 'committer_name': 'Atique Ahmed Ziad', 'committer_email': None, 'commit_date': datetime.datetime(2014, 8, 5, 15, 37, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7d8d38ff7922aaf253fdfeac19773450da58784b', 'committer_username': 'atiqueahmedziad', 'committer_name': 'Atique Ahmed Ziad', 'committer_email': None, 'commit_date': datetime.datetime(2014, 8, 5, 15, 37, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bc842977b225dac3e99658f7e3236ceda9b32b85', 'committer_username': 'atiqueahmedziad', 'committer_name': 'Atique Ahmed Ziad', 'committer_email': None, 'commit_date': datetime.datetime(2014, 8, 5, 15, 37, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '050e21bd6320533f9d8bc6ccafe7d1ec562fa852', 'committer_username': 'atiqueahmedziad', 'committer_name': 'Atique Ahmed Ziad', 'committer_email': None, 'commit_date': datetime.datetime(2014, 8, 5, 15, 37, 42, tzinfo=datetime.timezone.utc)}]",Atique Ahmed Ziad,8364578,,User,,72,,3,42
456763550,feat: filter option with timestamp in context menu,"This PR introduces -
- Context menu on table's body. It only shows in the table's body. It has 3 options -
   - Start from this timestamp
   - Stop at this timestamp
   - Clear timestamp filter

### Screenshot
<img width=""1257"" alt=""Screenshot 2020-07-26 at 9 14 15 PM"" src=""https://user-images.githubusercontent.com/8364578/88482722-00d85900-cf85-11ea-9e93-0c7b627e47c5.png"">
",True,17,https://api.github.com/repos/mozilla/extension-activity-monitor/pulls/17,https://github.com/mozilla/extension-activity-monitor/pull/17,closed,262,41,10,1,1,31,0,0,[],2020-07-26 15:14:46+00:00,2020-08-07 16:28:22+00:00,1041216.0,"12 days, 1:13:36","[{'comment_id': 461024306, 'comment_body': 'The current parameters create a menu that is visible in all contexts, on all pages. This is very undesirable.\r\n\r\nYou should only create a menu that matches the current context. For example, see https://piro.sakura.ne.jp/latest/blosxom/mozilla/xul/2018-10-14_override-context-on-fx64.htm#_adding_menu_items_with_the_viewtypes_parameter_\r\n\r\n(I recommend to read that whole blog post if you need more context on why the API exists and how to use it)', 'comment_created': datetime.datetime(2020, 7, 27, 16, 43, 5, tzinfo=datetime.timezone.utc), 'commenter': 'Rob--W', 'type': 'User'}, {'comment_id': 461026616, 'comment_body': ""Register the menus and events OUTSIDE the 'contextmenu' click handler, because the menu items themselves are static and don't change.\r\n\r\nIn the `menus.onClicked` listener, you can use the `browser.menus.getTargetElement` method to get the element that was clicked. This can be useful when the menu was created from multiple documents (because then your script can ignore `menus.onClicked` calls that originate from another document)."", 'comment_created': datetime.datetime(2020, 7, 27, 16, 46, 44, tzinfo=datetime.timezone.utc), 'commenter': 'Rob--W', 'type': 'User'}, {'comment_id': 461631271, 'comment_body': ""Previously, you wouldn't show the menu item when a row is not clicked.\r\n\r\nWith the latest change, the check is gone. But since `<tbody>` can only contain `<tr>` elements, this change should be fine.\r\n\r\nFrom looking at this code, it is however not clear that the contextmenu applies to table rows only, so I suggest to add a comment here to emphasize this fact."", 'comment_created': datetime.datetime(2020, 7, 28, 14, 35, 32, tzinfo=datetime.timezone.utc), 'commenter': 'Rob--W', 'type': 'User'}, {'comment_id': 464274819, 'comment_body': 'the jsdoc here seems to be wrong: `updateFilter.timestamp` currently says that it contains two strings, then right after that the jsdoc for the `startTime` and `stopTime` says that they are `Date` or `null`.\r\n\r\nGiven that we are converting the date string into a timestamp number to match the filter in  \r\nmatchFilterTimestamp it may be reasonable to do that conversion once when we do set the filter in the model.\r\n\r\nIf we do that, `startTime` and `stopTime` would be both of type number.\r\n\r\nNit:\r\n- no need to spell the time of the `timestamp` property in the description, we could omit its description (and just let the jsdoc for those two properties to describe their type and their meaning)\r\n\r\n- `startTime` and `stopTime` may also be called `start` and `stop` or `from` and `to`, the fact that they are timestamps is already clear by being properties of the `timestamp` object', 'comment_created': datetime.datetime(2020, 8, 3, 8, 43, 36, tzinfo=datetime.timezone.utc), 'commenter': 'rpl', 'type': 'User'}, {'comment_id': 464275686, 'comment_body': ""We shouldn't need to create a fake range (e.g. by considering the stopTime the current time), if there is no `startTime` filter, we should just check the `stopTime`, and if there is no `stopTime` we should just be checking the `startTime`, \r\n\r\nThe logic above may be expressed in multiple ways, one option could be to early return false as soon as we verified that the log timestamp is not in the range by doing something like:\r\n\r\n```\r\n// Assume that this.filter.timeStamp.startTime/stopTime has been converted into number\r\n// with Date.parse when they have been set.\r\nconst logTime = Date.parse(logTimestamp);\r\n\r\nif (this.filter.timeStamp?.startTime != null  && logTime < this.filter.timeStamp.startTime) {\r\n  return false;\r\n}\r\n\r\nif (this.filter.timeSTamp?.stopTime != null && logTime > this.filter.timeSTamp?.stopTime) {\r\n  return false;\r\n}\r\n\r\n// The log timestamp is in range or there was no timestamp filter.\r\nreturn true;\r\n```"", 'comment_created': datetime.datetime(2020, 8, 3, 8, 45, 16, tzinfo=datetime.timezone.utc), 'commenter': 'rpl', 'type': 'User'}, {'comment_id': 464279963, 'comment_body': 'when is the browser.menus.onHidden removed?\r\nit would also be removed automatically when the extension page is closed, but given that in the disconnectedCallback we are also removing other API event explicitly it may be good to remove this one too.', 'comment_created': datetime.datetime(2020, 8, 3, 8, 53, tzinfo=datetime.timezone.utc), 'commenter': 'rpl', 'type': 'User'}, {'comment_id': 464280260, 'comment_body': 'typo in the property name.', 'comment_created': datetime.datetime(2020, 8, 3, 8, 53, 31, tzinfo=datetime.timezone.utc), 'commenter': 'rpl', 'type': 'User'}, {'comment_id': 464280736, 'comment_body': 'why do we need a timestamp object defined on the LogView elements? ', 'comment_created': datetime.datetime(2020, 8, 3, 8, 54, 26, tzinfo=datetime.timezone.utc), 'commenter': 'rpl', 'type': 'User'}, {'comment_id': 464296735, 'comment_body': 'It feels like this should be with the other filter options:\r\n- defined to be outside of the log view table, part of the filter wrapper defined between lines 30-41\r\n- defined as its own webcomponent, in this version of the patch it seems that the webcomponent that manage the table view is also managing this part of the DOM and it does feel a bit outside of the responsabilities of the `LogView` webcomponent', 'comment_created': datetime.datetime(2020, 8, 3, 9, 24, 11, tzinfo=datetime.timezone.utc), 'commenter': 'rpl', 'type': 'User'}, {'comment_id': 464364105, 'comment_body': ""Use `location.href` instead. Otherwise the menu won't show up if the page has a query string."", 'comment_created': datetime.datetime(2020, 8, 3, 11, 50, 34, tzinfo=datetime.timezone.utc), 'commenter': 'Rob--W', 'type': 'User'}, {'comment_id': 465206871, 'comment_body': 'done :-)', 'comment_created': datetime.datetime(2020, 8, 4, 17, 18, 14, tzinfo=datetime.timezone.utc), 'commenter': 'atiqueahmedziad', 'type': 'User'}, {'comment_id': 465207031, 'comment_body': 'fixed, now I keep it as empty object.', 'comment_created': datetime.datetime(2020, 8, 4, 17, 18, 33, tzinfo=datetime.timezone.utc), 'commenter': 'atiqueahmedziad', 'type': 'User'}, {'comment_id': 465207122, 'comment_body': 'sorry, fixed it.', 'comment_created': datetime.datetime(2020, 8, 4, 17, 18, 44, tzinfo=datetime.timezone.utc), 'commenter': 'atiqueahmedziad', 'type': 'User'}, {'comment_id': 465207268, 'comment_body': 'this is done now :-)', 'comment_created': datetime.datetime(2020, 8, 4, 17, 18, 56, tzinfo=datetime.timezone.utc), 'commenter': 'atiqueahmedziad', 'type': 'User'}, {'comment_id': 465207409, 'comment_body': ""Thanks, it's done :-)"", 'comment_created': datetime.datetime(2020, 8, 4, 17, 19, 11, tzinfo=datetime.timezone.utc), 'commenter': 'atiqueahmedziad', 'type': 'User'}, {'comment_id': 465207568, 'comment_body': 'Updated the JSDoc.', 'comment_created': datetime.datetime(2020, 8, 4, 17, 19, 27, tzinfo=datetime.timezone.utc), 'commenter': 'atiqueahmedziad', 'type': 'User'}, {'comment_id': 465207686, 'comment_body': 'done.', 'comment_created': datetime.datetime(2020, 8, 4, 17, 19, 39, tzinfo=datetime.timezone.utc), 'commenter': 'atiqueahmedziad', 'type': 'User'}, {'comment_id': 465207838, 'comment_body': 'Thanks, comment added :-)', 'comment_created': datetime.datetime(2020, 8, 4, 17, 19, 54, tzinfo=datetime.timezone.utc), 'commenter': 'atiqueahmedziad', 'type': 'User'}, {'comment_id': 465220657, 'comment_body': '@rpl should I declare the listeners outside of the constructor?\r\n**Update:** I have moved removed the `this.menuOnClickListener()` and `this.onClearTSListener()` and used arrow function instead on `this.setFilterRange(info, tab)` and `this.onClearTSFilter()` (renamed `this.hideTSFilter()`).', 'comment_created': datetime.datetime(2020, 8, 4, 17, 42, 7, tzinfo=datetime.timezone.utc), 'commenter': 'atiqueahmedziad', 'type': 'User'}, {'comment_id': 466356981, 'comment_body': ""Nit, I think that I would call this `this.timeFilter` (or even `this.timestampFilter` given that it isn't much longer than `this.keywordFilter`), it is a bit longer but it would be immediately clear what it is about (`ts` may not immediatelly suggest that if in the context around the far there isn't anything else that makes it clear)."", 'comment_created': datetime.datetime(2020, 8, 6, 11, 51, 1, tzinfo=datetime.timezone.utc), 'commenter': 'rpl', 'type': 'User'}, {'comment_id': 466359925, 'comment_body': ""I think that I may be ok on deferring this optimization, but I wanted to mention it:\r\nthe log's timestamp isn't going to change and so it would be a reasonable optimization trying to avoid to parse it every time we have to match a timestamp filter.\r\n\r\nAnother simple case where we can avoid to parse the date is if there isn't any timeStamp filter set at all.\r\nThis optimization may be even simpler to apply, if we use a null timestamp filter as the default empty timestamp filter, we can just check if this.filter.timeStamp is defined before parsing the logTimestamp and just return true in that case (if there isn't a timeStamp filter set, all logs are going to match).  "", 'comment_created': datetime.datetime(2020, 8, 6, 11, 56, 58, tzinfo=datetime.timezone.utc), 'commenter': 'rpl', 'type': 'User'}, {'comment_id': 466361059, 'comment_body': ""the `TSFilter` part of this property name doesn't seem to be needed, it is inside a webcomponent that is called `FilterTimestamp`, and so that part of the name seems just redundant to me.\r\n\r\n(and we could also lose the `TS` part of `filterTSWrapper` and `filterTSContainer` and some of the methods of this webcomponent)."", 'comment_created': datetime.datetime(2020, 8, 6, 11, 59, 26, tzinfo=datetime.timezone.utc), 'commenter': 'rpl', 'type': 'User'}, {'comment_id': 466363514, 'comment_body': ""@Rob--W sigh... choosing to use the browser-.menu API for the timestamp filter context menu isn't going to work once we try to use the activitylog page inside a devtools panel...\r\n"", 'comment_created': datetime.datetime(2020, 8, 6, 12, 4, 35, tzinfo=datetime.timezone.utc), 'commenter': 'rpl', 'type': 'User'}, {'comment_id': 466364623, 'comment_body': ""this onHiddenListener doesn't seem to be using this anywhere, could just be a method of the FilterTimestamp class instead of an arrow function set on a class instance parameter?\r\n\r\n(also it would be good to keep consistency, some other event handler in this class are defined as arrow functions because they use `this` in their body, but the arrow function is assigned to the property outside of the constructor)"", 'comment_created': datetime.datetime(2020, 8, 6, 12, 6, 43, tzinfo=datetime.timezone.utc), 'commenter': 'rpl', 'type': 'User'}, {'comment_id': 466424960, 'comment_body': ""Why are you checking the tab here?\r\n\r\nThe `getTargetElement` call below ensures that you're only handling events from this page.\r\n\r\nIf you want to handle multiple menu items, check `info.menuItemId` to see which menu item had been clicked."", 'comment_created': datetime.datetime(2020, 8, 6, 13, 47, 51, tzinfo=datetime.timezone.utc), 'commenter': 'Rob--W', 'type': 'User'}, {'comment_id': 466909282, 'comment_body': 'This method name does also have a type (`disptach` => `dispatch`), we should fix that and remove the TS part from the method name (as also mentioned in a previous review comment).\r\n\r\nI would name it `dispatchFilterChange`. ', 'comment_created': datetime.datetime(2020, 8, 7, 8, 49, 26, tzinfo=datetime.timezone.utc), 'commenter': 'rpl', 'type': 'User'}, {'comment_id': 466972692, 'comment_body': ""As a user I feel that I may want to also clear the start and stop timestamps separately.\r\nIt's fine to deal with this in a separate follow up and pull request (just file the issue for now and come back to it when you are not busy with other higher priority issues we do have in the backlog, anyway implementing it shouldn't require too many changes)."", 'comment_created': datetime.datetime(2020, 8, 7, 11, 5, 2, tzinfo=datetime.timezone.utc), 'commenter': 'rpl', 'type': 'User'}, {'comment_id': 467001187, 'comment_body': 'Thanks. Done :-)', 'comment_created': datetime.datetime(2020, 8, 7, 12, 11, 45, tzinfo=datetime.timezone.utc), 'commenter': 'atiqueahmedziad', 'type': 'User'}, {'comment_id': 467001325, 'comment_body': 'done :-)', 'comment_created': datetime.datetime(2020, 8, 7, 12, 12, 3, tzinfo=datetime.timezone.utc), 'commenter': 'atiqueahmedziad', 'type': 'User'}, {'comment_id': 467001379, 'comment_body': 'done :-)', 'comment_created': datetime.datetime(2020, 8, 7, 12, 12, 10, tzinfo=datetime.timezone.utc), 'commenter': 'atiqueahmedziad', 'type': 'User'}, {'comment_id': 467001466, 'comment_body': 'done :-)', 'comment_created': datetime.datetime(2020, 8, 7, 12, 12, 20, tzinfo=datetime.timezone.utc), 'commenter': 'atiqueahmedziad', 'type': 'User'}]","[{'commit_sha': '276e16b9f52a449ccdae1f5acf8703e8f73fa4d3', 'committer_username': 'atiqueahmedziad', 'committer_name': 'Atique Ahmed Ziad', 'committer_email': None, 'commit_date': datetime.datetime(2014, 8, 5, 15, 37, 42, tzinfo=datetime.timezone.utc)}]",Atique Ahmed Ziad,8364578,,User,,72,,3,42
461827236,feat: load logs from json file,"Fixes #25 
### The following is done:
- Load log file (json) from local machine
- Loaded logs will be shown in `log-view` opening a new tab with the following parameter at the end of url: `?page=loadLog&file=filename.json`.
- The loaded logs page has a page title set to `Loaded Logs - fileName.json`. This will help to identify it's a loaded logs page.
- There is a button named ""Clear All Loaded Logs"" which clears all the loaded logs. User can access their loaded logs at any time with respective parameters in URL until they clear the loaded logs.
- [`menu-container`](https://github.com/mozilla/extension-activity-monitor/pull/28/files#diff-f63ec68852d55aaede19b261da7a08d6R25) is hidden in `load log` page. That means, there will be no option to save, clear, load logs and clear loaded logs in a loaded logs page.

### Screenshot
<img width=""1280"" alt=""Screenshot 2020-08-02 at 10 14 24 PM"" src=""https://user-images.githubusercontent.com/8364578/89127181-8c199780-d50d-11ea-9c5e-f37355fb70b4.png"">
",True,28,https://api.github.com/repos/mozilla/extension-activity-monitor/pulls/28,https://github.com/mozilla/extension-activity-monitor/pull/28,closed,131,31,7,14,3,25,0,0,[],2020-08-02 16:15:08+00:00,2020-08-11 09:36:38+00:00,753690.0,"8 days, 17:21:30","[{'comment_id': 464335718, 'comment_body': 'We could use URLSearchParams to more easily parse the URL search params, see https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams/get.\r\n\r\nAlso, it may be better to make the condition we check in the `if` at line 163 to do not depend from the order of the search params (I mean that we may not need the `page=loadLog` search param and the the `searchParams.includes(...)` condition could be replaced by checking that we do have a `file` search param).', 'comment_created': datetime.datetime(2020, 8, 3, 10, 44, 20, tzinfo=datetime.timezone.utc), 'commenter': 'rpl', 'type': 'User'}, {'comment_id': 464338911, 'comment_body': 'If the activitylog.html page for a loaded log file is only being used to review the logs in the loaded file, we may not need to different clear logs buttons, I have the feeling that it may just be confusing and the user may clear the logs being collected by mistake if it clicks the wrong button.', 'comment_created': datetime.datetime(2020, 8, 3, 10, 51, 30, tzinfo=datetime.timezone.utc), 'commenter': 'rpl', 'type': 'User'}, {'comment_id': 464339841, 'comment_body': 'Similar to my other comment, if the activitylog.html page opened for a loaded log file is only being used to review those logs, we may not need both `loadedLogs` and `logs` (eg. that instance of the activitylog.html page is not meant to subscribe to receive realtime logs at all).', 'comment_created': datetime.datetime(2020, 8, 3, 10, 53, 35, tzinfo=datetime.timezone.utc), 'commenter': 'rpl', 'type': 'User'}, {'comment_id': 464975701, 'comment_body': ""@rpl here the `loadedLogs` array is in `ext-monitor.js` (background) where I am storing the loaded logs along with the filename. And when I am opening a new tab with parameter like: `?page=loadLog&file=fileName.json`, the activitylog.html is getting the loaded logs from the background and [renders the logs in the table view](https://github.com/mozilla/extension-activity-monitor/pull/28/files#diff-c00fd244576d6e063a30656f921d4db6R182)\r\n\r\nI am storing the loaded logs in the background since, if a user mistakenly closes the tab / reloads the tab, he doesn't lose the loaded logs. If he mistakenly closes the tab, he will still be able to see the loaded logs adding the URL parameters: `?page=loadLog&file=fileName.json`.\r\n"", 'comment_created': datetime.datetime(2020, 8, 4, 11, 14, 22, tzinfo=datetime.timezone.utc), 'commenter': 'atiqueahmedziad', 'type': 'User'}, {'comment_id': 465033461, 'comment_body': ""@atiqueahmedziad ah, I see. Thanks for pointing it out!\r\n\r\nWouldn't be reasonable to store the logs in a map keyed by the filename string?"", 'comment_created': datetime.datetime(2020, 8, 4, 13, 3, 19, tzinfo=datetime.timezone.utc), 'commenter': 'rpl', 'type': 'User'}, {'comment_id': 465570076, 'comment_body': ""Yeah, it's reasonsable :-) Thanks.\r\nI have updated the PR storing the logs and file name in a Map."", 'comment_created': datetime.datetime(2020, 8, 5, 8, 43, 54, tzinfo=datetime.timezone.utc), 'commenter': 'atiqueahmedziad', 'type': 'User'}, {'comment_id': 465570240, 'comment_body': ""Thanks, it's done :-)"", 'comment_created': datetime.datetime(2020, 8, 5, 8, 44, 9, tzinfo=datetime.timezone.utc), 'commenter': 'atiqueahmedziad', 'type': 'User'}, {'comment_id': 465572462, 'comment_body': '@rpl Should we clear the loaded logs when a user clicks on clear logs button?', 'comment_created': datetime.datetime(2020, 8, 5, 8, 47, 55, tzinfo=datetime.timezone.utc), 'commenter': 'atiqueahmedziad', 'type': 'User'}, {'comment_id': 465580434, 'comment_body': 'If I recall correctly, when we discussed about this during the last meeting we agreed that clearing the loaded logs may not make sense.\r\n\r\nNevertheless, given that we are storing those logs in the background page, at some point we should be removing them, otherwise we may keep all of the loaded files around until Firefox is being restarted.\r\n\r\nAs a user, I would expect to ""close the loaded file"" more than ""clear the loaded logs"", but from an implementation perspective they are basically the same thing, just named differently to match what is more likely the user expectation.\r\n\r\nAnd so (I\'m basically thinking about this aloud) I feel that, when the activitylog page is this kind of ""view logs from file"" mode, it may be reasonable to:\r\n\r\n- list the logs loaded from file (maybe in a select input element), and allow the user to switch between the loaded logs files\r\n- have a button to ""close the loaded logs file"", which would remove the entry for that loaded logs from the background page\r\n\r\n@wagnerand what do you think about this? would the behavior described above match your expectation as a user\r\n(also @Rob--W for his opinion on this).', 'comment_created': datetime.datetime(2020, 8, 5, 9, 1, 47, tzinfo=datetime.timezone.utc), 'commenter': 'rpl', 'type': 'User'}, {'comment_id': 465630840, 'comment_body': ""I think expecting a user to have to click on _Close the loaded logs file_ might be a bit too much. It's not unlikely they forget to click the button and just close the tab, in which case the logs would not be removed from memory. I could think about 2 possible options to do this:\r\n\r\nOption 1 (simple): When the tab gets closed, remove the logs from the background page. If the user decides to undo closing the tab, they have to reload the file.\r\n\r\nOption 2 (a bit more involved): When the tab gets closed, start a timer (timeout tbd, but I guess 1 minute or so would do). When it times out, check if the log is loaded in a tab. If so, just do nothing. If not, remove the log from the background page.\r\n\r\nOf course, the check whether a log is still shown somewhere, could be something else, for example a lock we set on the log data when the file gets loaded, and unset when the tab gets closed. After the timeout, we'd check whether the lock is set and remove the log from background page if it's not."", 'comment_created': datetime.datetime(2020, 8, 5, 10, 33, 35, tzinfo=datetime.timezone.utc), 'commenter': 'wagnerand', 'type': 'User'}, {'comment_id': 467145806, 'comment_body': 'Nit, we do have a load ESM module, I think that JSON.parse should be a responsibility of that module instead of being a responsibility of the Controller class.', 'comment_created': datetime.datetime(2020, 8, 7, 16, 31, 21, tzinfo=datetime.timezone.utc), 'commenter': 'rpl', 'type': 'User'}, {'comment_id': 467149934, 'comment_body': ""Instead on being the activitylog page to send the logs to the background page, then create a new tab and then send another message to the background page to associate the tab.id to the loaded file, this could actually be a responsibility of the background page (or the ext-monitor module actually), as part of what it does to handle a single 'openLoadedLogsTab`.\r\n\r\n(Let me know if my request isn't clear enough as described above)"", 'comment_created': datetime.datetime(2020, 8, 7, 16, 39, 43, tzinfo=datetime.timezone.utc), 'commenter': 'rpl', 'type': 'User'}, {'comment_id': 467152672, 'comment_body': 'Given that we agreed to clear the logs automatically when the tab we have opened has been navigated or closed, it may be better to:\r\n\r\n- keep the loaded logs in a map keyed by tabId, as the value of the map we could store an object that contains both the filename and the loaded logs in two separate properties\r\n\r\ndoes that sounds reasonable?\r\n\r\n(this should, at least at a first glance, also simplify a bit `setLoadedLogs`, e.g. we will not need to care about the unique file name thing)', 'comment_created': datetime.datetime(2020, 8, 7, 16, 45, 12, tzinfo=datetime.timezone.utc), 'commenter': 'rpl', 'type': 'User'}, {'comment_id': 467156895, 'comment_body': ""Let's rename detail to something like `requestParams`, in the end it is what we pass to the requestType method and so it should be easier to understand what that property is."", 'comment_created': datetime.datetime(2020, 8, 7, 16, 54, 3, tzinfo=datetime.timezone.utc), 'commenter': 'rpl', 'type': 'User'}, {'comment_id': 467165348, 'comment_body': 'So, in summary, I will be doing the following - \r\n- Send the loaded file from activitylog.html to the background.\r\n- In the background, I will -\r\n    - read the log file. \r\n    - open a new tab.\r\n    - Send a message to background from that tab and retrieve the loaded the logs in that tab.\r\n\r\n@rpl Am I right?', 'comment_created': datetime.datetime(2020, 8, 7, 17, 10, 42, tzinfo=datetime.timezone.utc), 'commenter': 'atiqueahmedziad', 'type': 'User'}, {'comment_id': 467168126, 'comment_body': 'Yeah, sounds good :-)', 'comment_created': datetime.datetime(2020, 8, 7, 17, 16, 22, tzinfo=datetime.timezone.utc), 'commenter': 'atiqueahmedziad', 'type': 'User'}, {'comment_id': 467197822, 'comment_body': 'Thanks for the suggestion. Updated the name :-)', 'comment_created': datetime.datetime(2020, 8, 7, 18, 17, 33, tzinfo=datetime.timezone.utc), 'commenter': 'atiqueahmedziad', 'type': 'User'}, {'comment_id': 467197932, 'comment_body': 'done :-)', 'comment_created': datetime.datetime(2020, 8, 7, 18, 17, 46, tzinfo=datetime.timezone.utc), 'commenter': 'atiqueahmedziad', 'type': 'User'}, {'comment_id': 467205813, 'comment_body': 'the change applied to the test is workarounding the failure instead of aligning the test to the expected new behavior, as an example the test would not fail if the ext-monitor module does subscribe two runtime.onMessage listeners or two tabs.onRemoved listeners but not both as expected.\r\n\r\nyou should create two separate mocked addListener functions and then assert that each one of them has been called exactly once. ', 'comment_created': datetime.datetime(2020, 8, 7, 18, 35, 14, tzinfo=datetime.timezone.utc), 'commenter': 'rpl', 'type': 'User'}, {'comment_id': 467207900, 'comment_body': 'Nit, `// Remove the loaded logs related to the closed tab` may be slightly more clear and as short as yours.  ', 'comment_created': datetime.datetime(2020, 8, 7, 18, 39, 56, tzinfo=datetime.timezone.utc), 'commenter': 'rpl', 'type': 'User'}, {'comment_id': 467210767, 'comment_body': ""The inline comments does explicitly mention what is the type of the key, but not what it does represents, and the name of the property does not make it clear neither.\r\n\r\nCalling this property `loadedLogsByTabId` would be making it clear enough without having to spelling that again in the inline comment.\r\nThe property is used only in 4 places and so even if the name is a bit longer it shouldn't make the core too much more verbose.\r\n\r\nOtherwise you should at least mention it nearby the inline comment. "", 'comment_created': datetime.datetime(2020, 8, 7, 18, 46, 21, tzinfo=datetime.timezone.utc), 'commenter': 'rpl', 'type': 'User'}, {'comment_id': 467213683, 'comment_body': ""yeah that's right (but I notice that you did already proceed to implement it, and so my reply did come late :-P)"", 'comment_created': datetime.datetime(2020, 8, 7, 18, 52, 54, tzinfo=datetime.timezone.utc), 'commenter': 'rpl', 'type': 'User'}, {'comment_id': 467231171, 'comment_body': 'done :-)', 'comment_created': datetime.datetime(2020, 8, 7, 19, 32, 4, tzinfo=datetime.timezone.utc), 'commenter': 'atiqueahmedziad', 'type': 'User'}, {'comment_id': 467233244, 'comment_body': '@rpl how is this approach to you ?\r\n**update**: \r\nI have checked like the following:\r\n```\r\nexpect(addListener).toHaveBeenCalledTimes(2);\r\nexpect(addListener).toHaveBeenNthCalledWith(1, messageListenerFn);\r\nexpect(addListener).toHaveBeenNthCalledWith(2, onRemovedListenerFn);\r\n```', 'comment_created': datetime.datetime(2020, 8, 7, 19, 37, 2, tzinfo=datetime.timezone.utc), 'commenter': 'atiqueahmedziad', 'type': 'User'}, {'comment_id': 467815351, 'comment_body': ""> @rpl how is this approach to you ?\r\n> **update**:\r\n> I have checked like the following:\r\n> \r\n> ```\r\n> expect(addListener).toHaveBeenCalledTimes(2);\r\n> expect(addListener).toHaveBeenNthCalledWith(1, messageListenerFn);\r\n> expect(addListener).toHaveBeenNthCalledWith(2, onRemovedListenerFn);\r\n> ```\r\n\r\nEven with that change, the test does still pass if ext-monitor's `init` method does call (by mistake) twice `browser.tabs.onRemoved.addListener` on both the functions instead of calling `browser.runtime.onMessage.addListener` with `messageListenerFn` and `browser.tabs.onRemoved.addListener` with `onRemovedListenerFn`.\r\n\r\nIn practice, if ext-monitor's `init` does look like the following then the test case is supposed to fail:\r\n```\r\n  init() {\r\n    browser.tabs.onRemoved.addListener(this.messageListener);\r\n    browser.tabs.onRemoved.addListener(this.onRemovedListener);\r\n  }\r\n```\r\n\r\nThe current version doesn't.\r\n\r\nIf you just use two separate mocks for the two `addListener` methods, the test would fail as expected:\r\n```\r\n  const runtimeMessageAddListener = jest.fn();\r\n  const tabsRemovedAddListener = jest.fn();\r\n\r\n  window.browser = {\r\n    runtime: { onMessage: { addListener: runtimeMessageAddListener } },\r\n    tabs: { onRemoved: { addListener: tabsRemovedAddListener } },\r\n  };\r\n\r\n....\r\n```"", 'comment_created': datetime.datetime(2020, 8, 10, 10, 29, 50, tzinfo=datetime.timezone.utc), 'commenter': 'rpl', 'type': 'User'}]","[{'commit_sha': '992ca37f26a95c90829c7401d2d46e0b52eafe19', 'committer_username': 'atiqueahmedziad', 'committer_name': 'Atique Ahmed Ziad', 'committer_email': None, 'commit_date': datetime.datetime(2014, 8, 5, 15, 37, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b0e9a949f102ed10f69b336ad7fdd286d2f24aba', 'committer_username': 'atiqueahmedziad', 'committer_name': 'Atique Ahmed Ziad', 'committer_email': None, 'commit_date': datetime.datetime(2014, 8, 5, 15, 37, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ef0b215c01212fd7ff0dc9feb79ef1572197e6f3', 'committer_username': 'atiqueahmedziad', 'committer_name': 'Atique Ahmed Ziad', 'committer_email': None, 'commit_date': datetime.datetime(2014, 8, 5, 15, 37, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ede893c2b477adf0c96b75627c4ea5fead7eca6b', 'committer_username': 'atiqueahmedziad', 'committer_name': 'Atique Ahmed Ziad', 'committer_email': None, 'commit_date': datetime.datetime(2014, 8, 5, 15, 37, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f46c3d1f33d72dca93956fe6e30aaf69caef2521', 'committer_username': 'atiqueahmedziad', 'committer_name': 'Atique Ahmed Ziad', 'committer_email': None, 'commit_date': datetime.datetime(2014, 8, 5, 15, 37, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ed69cec7f45769d944278f4350ae92a6866fea75', 'committer_username': 'atiqueahmedziad', 'committer_name': 'Atique Ahmed Ziad', 'committer_email': None, 'commit_date': datetime.datetime(2014, 8, 5, 15, 37, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '40ae1787447f4e7e2b01c63ac0aa5eaad5f6baf8', 'committer_username': 'atiqueahmedziad', 'committer_name': 'Atique Ahmed Ziad', 'committer_email': None, 'commit_date': datetime.datetime(2014, 8, 5, 15, 37, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6cb06b9d59228c2cd64df1726e03902cf0239ffe', 'committer_username': 'atiqueahmedziad', 'committer_name': 'Atique Ahmed Ziad', 'committer_email': None, 'commit_date': datetime.datetime(2014, 8, 5, 15, 37, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7553330c2009f4919b213b5352aa0fcfa63a2094', 'committer_username': 'atiqueahmedziad', 'committer_name': 'Atique Ahmed Ziad', 'committer_email': None, 'commit_date': datetime.datetime(2014, 8, 5, 15, 37, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '460a1371191d73d5c9dbcfd67659887d428cb9cf', 'committer_username': 'atiqueahmedziad', 'committer_name': 'Atique Ahmed Ziad', 'committer_email': None, 'commit_date': datetime.datetime(2014, 8, 5, 15, 37, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '76f84c033aaf32e4e89550b69fdeb5ee18906e71', 'committer_username': 'atiqueahmedziad', 'committer_name': 'Atique Ahmed Ziad', 'committer_email': None, 'commit_date': datetime.datetime(2014, 8, 5, 15, 37, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ca7c65f37c9e63708834593c85a58689436685e9', 'committer_username': 'atiqueahmedziad', 'committer_name': 'Atique Ahmed Ziad', 'committer_email': None, 'commit_date': datetime.datetime(2014, 8, 5, 15, 37, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1911b63e21403c597ff445b87e071155765b3db5', 'committer_username': 'atiqueahmedziad', 'committer_name': 'Atique Ahmed Ziad', 'committer_email': None, 'commit_date': datetime.datetime(2014, 8, 5, 15, 37, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '89c0935df5d4d3ff500531d2b8b79402660a42c8', 'committer_username': 'atiqueahmedziad', 'committer_name': 'Atique Ahmed Ziad', 'committer_email': None, 'commit_date': datetime.datetime(2014, 8, 5, 15, 37, 42, tzinfo=datetime.timezone.utc)}]",Atique Ahmed Ziad,8364578,,User,,72,,3,42
465198658,feat: Clear the start and stop timestamps filter separately,"This pr fixes #33 
Now, we can clear start and stop timestamps filters separately.

### Screenshot
<img width=""1272"" alt=""Screenshot 2020-08-10 at 2 28 12 AM"" src=""https://user-images.githubusercontent.com/8364578/89741206-2a2ed400-dab1-11ea-8d67-f6e71bef0a96.png"">
",True,40,https://api.github.com/repos/mozilla/extension-activity-monitor/pulls/40,https://github.com/mozilla/extension-activity-monitor/pull/40,closed,84,24,6,7,0,21,0,0,[],2020-08-09 20:28:34+00:00,2020-08-13 12:41:46+00:00,317592.0,"3 days, 16:13:12","[{'comment_id': 468548763, 'comment_body': '@atiqueahmedziad why you had to set this back to an empty object instead of null? at a first glance this change looks not strictly needed for this PR, would you mind to briefly explain the reason behind this choice? ', 'comment_created': datetime.datetime(2020, 8, 11, 12, 41, 2, tzinfo=datetime.timezone.utc), 'commenter': 'rpl', 'type': 'User'}, {'comment_id': 468549639, 'comment_body': 'Another option would be to make this function to take two boolean parameters, `clearStart` and `clearStop`.  ', 'comment_created': datetime.datetime(2020, 8, 11, 12, 42, 31, tzinfo=datetime.timezone.utc), 'commenter': 'rpl', 'type': 'User'}, {'comment_id': 468577707, 'comment_body': ""Previously, I made it `null` when we don't have any timestamp filters applied. To handle different types i.e. `object` and `null` in a single variable, I had to [add some extra codes](https://github.com/mozilla/extension-activity-monitor/pull/40/files#diff-0d42cddec555ff90f252f9e7b5f94496L31-L35) which I can avoid if I stick to one type i.e. `object` only. Also, I will have to put another condition [here](https://github.com/mozilla/extension-activity-monitor/pull/40/files#diff-0d42cddec555ff90f252f9e7b5f94496R76-R78) to check if timestamp is an empty object. If it's empty, I will assign `null` to it. And that will add some more extra codes. \r\n\r\n@rpl what do you think about this? Should we do keep it `null | object`?\r\n"", 'comment_created': datetime.datetime(2020, 8, 11, 13, 27, 10, tzinfo=datetime.timezone.utc), 'commenter': 'atiqueahmedziad', 'type': 'User'}, {'comment_id': 469169115, 'comment_body': ""@atiqueahmedziad the link in your comment (https://github.com/mozilla/extension-activity-monitor/pull/40/files#diff-0d42cddec555ff90f252f9e7b5f94496L31-L35) isn't pointing me to that extra code, would you mind to paste me a snippet in a comment so that I can see if there was a way to make that simpler?"", 'comment_created': datetime.datetime(2020, 8, 12, 10, 43, 26, tzinfo=datetime.timezone.utc), 'commenter': 'rpl', 'type': 'User'}, {'comment_id': 469204255, 'comment_body': 'oh, sorry. I was pointing to the following code which is in L31-L35 in `ext-activitylog.js` file (in the deletion section) in this PR. \r\n```\r\n    // this.timestamp is null when timestamp filter is not applied.\r\n    if (!this.timeStamp) {\r\n      this.timeStamp = {};\r\n    }\r\n```\r\nI had to assign `this.timeStamp` to empty object and then I put value to `start` or `stop` property of the `this.timeStamp` object.\r\n\r\nI could remove this extra code, if I use `this.timestamp` as `object` type only.\r\n#### Screenshot\r\n\r\n<img width=""649"" alt=""Screenshot 2020-08-12 at 6 01 06 PM"" src=""https://user-images.githubusercontent.com/8364578/90012783-de08ad00-dcc5-11ea-8dc0-4486fb193a50.png"">\r\n', 'comment_created': datetime.datetime(2020, 8, 12, 11, 58, 23, tzinfo=datetime.timezone.utc), 'commenter': 'atiqueahmedziad', 'type': 'User'}, {'comment_id': 469207982, 'comment_body': '@rpl here is the part, I was talking about on the other comment. I can avoid this if I use a single type i.e. `object` only. ', 'comment_created': datetime.datetime(2020, 8, 12, 12, 6, 6, tzinfo=datetime.timezone.utc), 'commenter': 'atiqueahmedziad', 'type': 'User'}, {'comment_id': 469224596, 'comment_body': ""@atiqueahmedziad it doesn't seem a big deal, you could also do something like this:\r\n\r\n```js\r\nconst timeStamp = this.timeStamp || {}\r\n\r\n....\r\nif (info.menuItemId === 'startTime') {\r\n  timeStamp.start = ...\r\n  ...\r\n} else if (info.menuItemId === 'stopTime') {\r\n  timeStamp.stop = ...\r\n  ...\r\n}\r\n\r\n...\r\nthis.timeStamp = timeStamp;\r\nthis.dispatchFilterChange();\r\n```\r\n\r\nand avoid the check `Object.keys(this.filter.timeStamp).length === 0`, which I personally don't like that much.\r\n\r\ndoes this sounds a reasonable alternative for the issue you had?"", 'comment_created': datetime.datetime(2020, 8, 12, 12, 32, 25, tzinfo=datetime.timezone.utc), 'commenter': 'rpl', 'type': 'User'}, {'comment_id': 469406085, 'comment_body': 'I have added boolean parameters now. ', 'comment_created': datetime.datetime(2020, 8, 12, 16, 59, 8, tzinfo=datetime.timezone.utc), 'commenter': 'atiqueahmedziad', 'type': 'User'}, {'comment_id': 469408797, 'comment_body': 'yes, this sounds good. But I had to use `Object.keys(this.filter.timeStamp).length === 0` while assigning empty object to null [here](https://github.com/mozilla/extension-activity-monitor/pull/40/commits/19f9545d2416104c5d450cbdb632b20328d06c55#diff-0d42cddec555ff90f252f9e7b5f94496R84).', 'comment_created': datetime.datetime(2020, 8, 12, 17, 3, 43, tzinfo=datetime.timezone.utc), 'commenter': 'atiqueahmedziad', 'type': 'User'}, {'comment_id': 469410216, 'comment_body': '@rpl I had to use `Object.keys(this.timeStamp).length === 0` here.', 'comment_created': datetime.datetime(2020, 8, 12, 17, 6, 10, tzinfo=datetime.timezone.utc), 'commenter': 'atiqueahmedziad', 'type': 'User'}, {'comment_id': 469429880, 'comment_body': ""@atiqueahmedziad That's fine, I don't like it but it is not such a big deal.\r\n\r\nBut please be consistent with the time passed to the parameters, if they are supposed to be boolean, pass a boolean for them or omit them completely and set a default value for the variable.\r\n\r\ne.g instead of\r\n```\r\n      switch (event.target) {\r\n        case this.clearFilterBtn:\r\n          this.onClearFilter(null, null);\r\n          break;\r\n        case this.clearStartTimeBtn:\r\n          this.onClearFilter(true, null);\r\n          break;\r\n        case this.clearStopTimeBtn:\r\n          this.onClearFilter(null, true);\r\n          break;\r\n      }\r\n```\r\n\r\nwe could define this function as:\r\n\r\n```\r\n  onClearFilter(clearStart = true, clearStop = true) {\r\n    ...\r\n  }\r\n```\r\n\r\nand then call it without any parameter if we want to clear both start and stop, and with two explicit boolean parameters if we want to clear only one of them:\r\n\r\n```\r\n      switch (event.target) {\r\n        case this.clearFilterBtn:\r\n          this.onClearFilter();\r\n          break;\r\n        case this.clearStartTimeBtn:\r\n          this.onClearFilter(true, false);\r\n          break;\r\n        case this.clearStopTimeBtn:\r\n          this.onClearFilter(false, true);\r\n          break;\r\n      }\r\n```"", 'comment_created': datetime.datetime(2020, 8, 12, 17, 39, 18, tzinfo=datetime.timezone.utc), 'commenter': 'rpl', 'type': 'User'}, {'comment_id': 469431924, 'comment_body': ""@atiqueahmedziad at a first glance I would say that this shouldn't be needed, in which case we would need this along with the other two at lines 66-69 and lines 72-76? "", 'comment_created': datetime.datetime(2020, 8, 12, 17, 42, 57, tzinfo=datetime.timezone.utc), 'commenter': 'rpl', 'type': 'User'}, {'comment_id': 469440717, 'comment_body': ""@atiqueahmedziad this shouldn't be actually needed, did you had any actual issue that you are workarounding with this?"", 'comment_created': datetime.datetime(2020, 8, 12, 17, 57, 56, tzinfo=datetime.timezone.utc), 'commenter': 'rpl', 'type': 'User'}, {'comment_id': 469458893, 'comment_body': 'The close icon along with start and stop timestamp does not disappear when until I set this. Below, I shared a screenshot, when I didn\'t set this CSS.\r\n### screenshot \r\n<img width=""975"" alt=""Screenshot 2020-08-13 at 12 28 54 AM"" src=""https://user-images.githubusercontent.com/8364578/90053340-25aa2b80-dcfc-11ea-800d-9099e56eba29.png"">\r\n', 'comment_created': datetime.datetime(2020, 8, 12, 18, 30, 26, tzinfo=datetime.timezone.utc), 'commenter': 'atiqueahmedziad', 'type': 'User'}, {'comment_id': 469461116, 'comment_body': 'Yes, Thanks for the idea. :-) ', 'comment_created': datetime.datetime(2020, 8, 12, 18, 34, 22, tzinfo=datetime.timezone.utc), 'commenter': 'atiqueahmedziad', 'type': 'User'}, {'comment_id': 469476461, 'comment_body': '@atiqueahmedziad I see, yeah that seems to be because the ""hidden attribute is not being applied to the elements inside the shadow DOM"" (/me sigh for a couple of seconds :-)), would you mind to add an inline comment right above it to explicitly mention that reason?', 'comment_created': datetime.datetime(2020, 8, 12, 19, 2, tzinfo=datetime.timezone.utc), 'commenter': 'rpl', 'type': 'User'}, {'comment_id': 469506653, 'comment_body': 'you should be able to subscribe a single click event listener (e.g. on `this.filterContainer`) without any additional changes (the `handleEvent` is already conditioned on the `event.target` property). ', 'comment_created': datetime.datetime(2020, 8, 12, 20, 0, 24, tzinfo=datetime.timezone.utc), 'commenter': 'rpl', 'type': 'User'}, {'comment_id': 469853574, 'comment_body': 'done :-) Thanks.', 'comment_created': datetime.datetime(2020, 8, 13, 10, 26, 47, tzinfo=datetime.timezone.utc), 'commenter': 'atiqueahmedziad', 'type': 'User'}, {'comment_id': 469855118, 'comment_body': 'Yes, I have added :-)', 'comment_created': datetime.datetime(2020, 8, 13, 10, 30, 1, tzinfo=datetime.timezone.utc), 'commenter': 'atiqueahmedziad', 'type': 'User'}, {'comment_id': 469871134, 'comment_body': ""The `default` in this `switch...case` is not really needed, this method would already turns into a no-op for events that we don't want to handle (because they are not coming from one of the event.target that we expect).   "", 'comment_created': datetime.datetime(2020, 8, 13, 11, 2, 14, tzinfo=datetime.timezone.utc), 'commenter': 'rpl', 'type': 'User'}, {'comment_id': 469882255, 'comment_body': 'done :-)', 'comment_created': datetime.datetime(2020, 8, 13, 11, 26, 11, tzinfo=datetime.timezone.utc), 'commenter': 'atiqueahmedziad', 'type': 'User'}]","[{'commit_sha': '58e6e485ec0976f6867f9216501543ba5561cd38', 'committer_username': 'atiqueahmedziad', 'committer_name': 'Atique Ahmed Ziad', 'committer_email': None, 'commit_date': datetime.datetime(2014, 8, 5, 15, 37, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '19f9545d2416104c5d450cbdb632b20328d06c55', 'committer_username': 'atiqueahmedziad', 'committer_name': 'Atique Ahmed Ziad', 'committer_email': None, 'commit_date': datetime.datetime(2014, 8, 5, 15, 37, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f30b1c7f731473ef514f94cf9e3f8ba7858728a5', 'committer_username': 'atiqueahmedziad', 'committer_name': 'Atique Ahmed Ziad', 'committer_email': None, 'commit_date': datetime.datetime(2014, 8, 5, 15, 37, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '958d3a24c01dc9cbb24c6b90c21e8377cf1300ca', 'committer_username': 'atiqueahmedziad', 'committer_name': 'Atique Ahmed Ziad', 'committer_email': None, 'commit_date': datetime.datetime(2014, 8, 5, 15, 37, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '57b33a2b407a4e01fe025a60fee0729d7e61af64', 'committer_username': 'atiqueahmedziad', 'committer_name': 'Atique Ahmed Ziad', 'committer_email': None, 'commit_date': datetime.datetime(2014, 8, 5, 15, 37, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2a89da816805b2e6ab6ba8f86bd955080c7176e6', 'committer_username': 'atiqueahmedziad', 'committer_name': 'Atique Ahmed Ziad', 'committer_email': None, 'commit_date': datetime.datetime(2014, 8, 5, 15, 37, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6a2e0fa3184283264f327aea5fa5d762629382f0', 'committer_username': 'atiqueahmedziad', 'committer_name': 'Atique Ahmed Ziad', 'committer_email': None, 'commit_date': datetime.datetime(2014, 8, 5, 15, 37, 42, tzinfo=datetime.timezone.utc)}]",Atique Ahmed Ziad,8364578,,User,,72,,3,42
465019126,feat: start monitoring newly installed extensions automatically,"Fixes #23 

This PR does -
- Start monitor newly installed extensions automatically.
- Stop monitoring (removing listener) for uninstalled extensions automatically.
",True,38,https://api.github.com/repos/mozilla/extension-activity-monitor/pulls/38,https://github.com/mozilla/extension-activity-monitor/pull/38,closed,184,33,2,3,0,11,0,0,[],2020-08-08 11:05:51+00:00,2020-08-16 19:24:22+00:00,721111.0,"8 days, 8:18:31","[{'comment_id': 467833379, 'comment_body': 'Don\'t filter disabled extensions for now. Doing so prevents users from monitoring disabled extensions.\r\n\r\n(and even if you did want to filter such events, then you would have to listen for `onEnabled` / `onDisabled` to detect changes in the ""enabled"" state).', 'comment_created': datetime.datetime(2020, 8, 10, 11, 11, 9, tzinfo=datetime.timezone.utc), 'commenter': 'Rob--W', 'type': 'User'}, {'comment_id': 467833681, 'comment_body': 'Use `browser.runtime.id` instead of `browser.management.getSelf().id`\r\n\r\n(you can also use this simpler method in the `getAllExtensions` method)', 'comment_created': datetime.datetime(2020, 8, 10, 11, 11, 48, tzinfo=datetime.timezone.utc), 'commenter': 'Rob--W', 'type': 'User'}, {'comment_id': 467834126, 'comment_body': ""It shouldn't be needed to check `hasActivityListeners`. The event is not fired when the listener has been unregistered."", 'comment_created': datetime.datetime(2020, 8, 10, 11, 12, 43, tzinfo=datetime.timezone.utc), 'commenter': 'Rob--W', 'type': 'User'}, {'comment_id': 468860816, 'comment_body': 'Is there a reason for storing the `browser.runtime.id` constant in a new member instead of directly using `browser.runtime.id`?', 'comment_created': datetime.datetime(2020, 8, 11, 20, 58, 5, tzinfo=datetime.timezone.utc), 'commenter': 'Rob--W', 'type': 'User'}, {'comment_id': 469110948, 'comment_body': 'Not any strong reason, I just thought I am using the extension id two times, so, stored it in a variable and used the same variable twice. Now, I have updated it by using directly. ', 'comment_created': datetime.datetime(2020, 8, 12, 8, 58, 1, tzinfo=datetime.timezone.utc), 'commenter': 'atiqueahmedziad', 'type': 'User'}, {'comment_id': 470620883, 'comment_body': 'Just use `browser.runtime.id` directly. There is no need for storing it in a temporary variable.', 'comment_created': datetime.datetime(2020, 8, 14, 13, 24, 10, tzinfo=datetime.timezone.utc), 'commenter': 'Rob--W', 'type': 'User'}, {'comment_id': 470621522, 'comment_body': 'will -> should', 'comment_created': datetime.datetime(2020, 8, 14, 13, 25, 15, tzinfo=datetime.timezone.utc), 'commenter': 'Rob--W', 'type': 'User'}, {'comment_id': 470621770, 'comment_body': '`selfId` is not used any more. Why is it here?', 'comment_created': datetime.datetime(2020, 8, 14, 13, 25, 40, tzinfo=datetime.timezone.utc), 'commenter': 'Rob--W', 'type': 'User'}, {'comment_id': 470628094, 'comment_body': 'done :-)', 'comment_created': datetime.datetime(2020, 8, 14, 13, 36, 59, tzinfo=datetime.timezone.utc), 'commenter': 'atiqueahmedziad', 'type': 'User'}, {'comment_id': 470628319, 'comment_body': 'done :-)', 'comment_created': datetime.datetime(2020, 8, 14, 13, 37, 27, tzinfo=datetime.timezone.utc), 'commenter': 'atiqueahmedziad', 'type': 'User'}, {'comment_id': 470628568, 'comment_body': ""sorry, didn't catch my eye. Thanks for noticing. Removed now :-)"", 'comment_created': datetime.datetime(2020, 8, 14, 13, 37, 52, tzinfo=datetime.timezone.utc), 'commenter': 'atiqueahmedziad', 'type': 'User'}]","[{'commit_sha': 'd90df1b1f83ca0d98148380e162b8fca1205e7b3', 'committer_username': 'atiqueahmedziad', 'committer_name': 'Atique Ahmed Ziad', 'committer_email': None, 'commit_date': datetime.datetime(2014, 8, 5, 15, 37, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '07304410dd5ffd33d649a2709eed642bc3c5fb77', 'committer_username': 'atiqueahmedziad', 'committer_name': 'Atique Ahmed Ziad', 'committer_email': None, 'commit_date': datetime.datetime(2014, 8, 5, 15, 37, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'db94163836903c98409dee11a075078e38d102c6', 'committer_username': 'atiqueahmedziad', 'committer_name': 'Atique Ahmed Ziad', 'committer_email': None, 'commit_date': datetime.datetime(2014, 8, 5, 15, 37, 42, tzinfo=datetime.timezone.utc)}]",Atique Ahmed Ziad,8364578,,User,,72,,3,42
464679068,feat: ActivityLog DevTools panel added and Filter by tabId is supported,"Fixes #22 

- It creates a new panel named ""Extension Activity"" in the developer toolbox. 
- tabId is retrieved when the developer toolbox has been opened and generated the activity log page url link `activitylog.html?filterTabId=tabId`
- the activitylog page is loaded lazily when the user selects the panel.",True,31,https://api.github.com/repos/mozilla/extension-activity-monitor/pulls/31,https://github.com/mozilla/extension-activity-monitor/pull/31,closed,275,174,12,19,2,39,0,0,[],2020-08-07 15:53:52+00:00,2020-08-17 13:31:31+00:00,855459.0,"9 days, 21:37:39","[{'comment_id': 470549195, 'comment_body': 'It may be better to early exit if `tabId` is `null` or `undefined`, using `tabId == null` as the condition checked in this `if` statement.', 'comment_created': datetime.datetime(2020, 8, 14, 10, 40, 1, tzinfo=datetime.timezone.utc), 'commenter': 'rpl', 'type': 'User'}, {'comment_id': 470551201, 'comment_body': 'Given that we filter out the case where `this.filter.tabId` is not defined right before this `if` statement, here we should be able to just check if `this.filter.tabId` does match (is equal) to `tabId`, and we should be able to replace this part with just `return this.filter.tabId === tabId;` ', 'comment_created': datetime.datetime(2020, 8, 14, 10, 44, 38, tzinfo=datetime.timezone.utc), 'commenter': 'rpl', 'type': 'User'}, {'comment_id': 470553515, 'comment_body': ""I'm curious about why we are hiding the entire menu container in this case, e.g. \r\nis there any reason why the user shouldn't be able to save or clear the logs while using the activitylog page from inside the devtools panel?"", 'comment_created': datetime.datetime(2020, 8, 14, 10, 50, 23, tzinfo=datetime.timezone.utc), 'commenter': 'rpl', 'type': 'User'}, {'comment_id': 470567106, 'comment_body': 'This part seems to not be taking into account that we may have multiple extension devtools panels opened at the same time (as I described in this comment https://github.com/mozilla/extension-activity-monitor/issues/22#issuecomment-667996573), and so when one of the extensions devtools panels is hidden this is going to set `this.isDevToolsPanelOpen` to `false` even if another devtools panel has not been hidden.\r\n\r\nwould you mind to describe me what is the issue and how you are trying to solve it at the moment?', 'comment_created': datetime.datetime(2020, 8, 14, 11, 25, 6, tzinfo=datetime.timezone.utc), 'commenter': 'rpl', 'type': 'User'}, {'comment_id': 470569226, 'comment_body': 'at a first glance this looks unrelated to the main goal of this PR (the activitylog page running in the devtools panel), I guess that this is something you added while you were trying to use the activitylog page with the filterTabId parameter in a tab, is that right?\r\n\r\nI guess that this would also make `isActivityLogPageOpen` to resolve to true when there are activitylog pages for the loaded log files opened in tabs, is that the case? is that expected? ', 'comment_created': datetime.datetime(2020, 8, 14, 11, 30, 22, tzinfo=datetime.timezone.utc), 'commenter': 'rpl', 'type': 'User'}, {'comment_id': 470571572, 'comment_body': 'To disable the context menu while running in a devtools extension context we may use a different approach, e.g. one of the following ones should work:\r\n\r\n- check if `browser.menus` and `browser.menus.onClicked` are defined, and early exit if they are not\r\n- or check if `browser.devtools` is defined  \r\n\r\nThe first approach may be better, because it does runtime detection for the feature that are going to be needed for this component to be able to work as expected.\r\n\r\nThis way we can keep the ""filter by timestamp"" context menu is we open the activitylog page in the same mode (filtered by tab id) in an extension context where the context menu API is available.\r\n\r\nAlso, add a mention to the issue that is tracking the issue in the inline comment.', 'comment_created': datetime.datetime(2020, 8, 14, 11, 35, 59, tzinfo=datetime.timezone.utc), 'commenter': 'rpl', 'type': 'User'}, {'comment_id': 470571792, 'comment_body': 'same comment here.', 'comment_created': datetime.datetime(2020, 8, 14, 11, 36, 29, tzinfo=datetime.timezone.utc), 'commenter': 'rpl', 'type': 'User'}, {'comment_id': 470578540, 'comment_body': 'As the menu container contains save and clear logs button, I am hiding those. \r\n\r\nSince in the devtools panel, the user will see the filtered logs by tabId but when he presses the ""save logs"" button, it will save all the logs. So, having that button displayed may mislead the user. Same scenario with ""clear logs"" button too (As it also clears all the logs, instead of what is displayed in the devtools panel).\r\n\r\nI think it will be a good time to enable these buttons after we implement [#27 :Save logs with/without filter applied](https://github.com/mozilla/extension-activity-monitor/issues/27). \r\n\r\nWhat do you think? Should we keep these buttons enabled here?', 'comment_created': datetime.datetime(2020, 8, 14, 11, 53, 1, tzinfo=datetime.timezone.utc), 'commenter': 'atiqueahmedziad', 'type': 'User'}, {'comment_id': 470606580, 'comment_body': 'This contains the **active** devtools panels tabIds.', 'comment_created': datetime.datetime(2020, 8, 14, 12, 56, 34, tzinfo=datetime.timezone.utc), 'commenter': 'atiqueahmedziad', 'type': 'User'}, {'comment_id': 470607067, 'comment_body': 'If there are any active ActivityLog devtools panel, the realtime logs will be sent.', 'comment_created': datetime.datetime(2020, 8, 14, 12, 57, 31, tzinfo=datetime.timezone.utc), 'commenter': 'atiqueahmedziad', 'type': 'User'}, {'comment_id': 470607830, 'comment_body': 'The `addPanelTabId` and `deletePanelTabId` acts when an ActivityLog Devtools panel is shown or hidden respectively.', 'comment_created': datetime.datetime(2020, 8, 14, 12, 59, 4, tzinfo=datetime.timezone.utc), 'commenter': 'atiqueahmedziad', 'type': 'User'}, {'comment_id': 470608031, 'comment_body': 'done. Thanks :-)', 'comment_created': datetime.datetime(2020, 8, 14, 12, 59, 26, tzinfo=datetime.timezone.utc), 'commenter': 'atiqueahmedziad', 'type': 'User'}, {'comment_id': 470608305, 'comment_body': 'done :-)', 'comment_created': datetime.datetime(2020, 8, 14, 12, 59, 56, tzinfo=datetime.timezone.utc), 'commenter': 'atiqueahmedziad', 'type': 'User'}, {'comment_id': 470610076, 'comment_body': 'These were for keeping track of devtools panel. If there was any active devtools panel, we would be sending real-time logs there. \r\nCurrently, I have applied a different approach to fix this, considering we have multiple extension devtools panels opened at the same time. I am storing the tabIds where activityLog devtools panel is shown and remvoing tabIds where activityLog devtools panel is hidden.', 'comment_created': datetime.datetime(2020, 8, 14, 13, 3, 32, tzinfo=datetime.timezone.utc), 'commenter': 'atiqueahmedziad', 'type': 'User'}, {'comment_id': 470610446, 'comment_body': 'Yeah, initially, it was for the activitylog page with the filterTabId parameter in a tab. I have updated this part excluding this change.', 'comment_created': datetime.datetime(2020, 8, 14, 13, 4, 21, tzinfo=datetime.timezone.utc), 'commenter': 'atiqueahmedziad', 'type': 'User'}, {'comment_id': 470611754, 'comment_body': 'I think we should keep this change, but fixing it by:\r\n```\r\n[activitylogPage, `${activitylogPage}?filterTabId*`],\r\n```\r\n. this will allow us to open tab with any tabId and retrieve realtime logs of that tab.', 'comment_created': datetime.datetime(2020, 8, 14, 13, 6, 43, tzinfo=datetime.timezone.utc), 'commenter': 'atiqueahmedziad', 'type': 'User'}, {'comment_id': 470612005, 'comment_body': 'done. Thanks :-)', 'comment_created': datetime.datetime(2020, 8, 14, 13, 7, 12, tzinfo=datetime.timezone.utc), 'commenter': 'atiqueahmedziad', 'type': 'User'}, {'comment_id': 470612115, 'comment_body': 'fixed it :-)', 'comment_created': datetime.datetime(2020, 8, 14, 13, 7, 25, tzinfo=datetime.timezone.utc), 'commenter': 'atiqueahmedziad', 'type': 'User'}, {'comment_id': 470614694, 'comment_body': 'updated :-)', 'comment_created': datetime.datetime(2020, 8, 14, 13, 12, 11, tzinfo=datetime.timezone.utc), 'commenter': 'atiqueahmedziad', 'type': 'User'}, {'comment_id': 470618087, 'comment_body': '@atiqueahmedziad I would be ok to defer it to a follow up if we have reasons to, but this activitylog page should still make it clear to the user that the view is filtered by tabId, and at that point how much is this different from what would happen for the activitylog page that we open in a tab if the user did set some filters on it?', 'comment_created': datetime.datetime(2020, 8, 14, 13, 18, 41, tzinfo=datetime.timezone.utc), 'commenter': 'rpl', 'type': 'User'}, {'comment_id': 470629217, 'comment_body': ""Yeah, the other filter options are visible and interact with the user (user has to click the checkbox to apply filter). But when we option the activitylog page in devtools, although user should know it filters the logs using current tab id, but the activitylog page's UI doesn't let the user know it has been filtered by tabId. \r\n\r\nI am adding a way to display in UI that activitylog page is filtered by tabId"", 'comment_created': datetime.datetime(2020, 8, 14, 13, 39, 2, tzinfo=datetime.timezone.utc), 'commenter': 'atiqueahmedziad', 'type': 'User'}, {'comment_id': 470647646, 'comment_body': '@rpl I made it is visible that, logs are being filtered by tab id. And enabled the menus. See the screenshot. Is this okay?\r\n\r\n<img width=""1280"" alt=""Screenshot 2020-08-14 at 8 08 46 PM"" src=""https://user-images.githubusercontent.com/8364578/90258297-2660d000-de6a-11ea-9e34-76659a9b3386.png"">\r\n', 'comment_created': datetime.datetime(2020, 8, 14, 14, 11, 19, tzinfo=datetime.timezone.utc), 'commenter': 'atiqueahmedziad', 'type': 'User'}, {'comment_id': 470649553, 'comment_body': '@rpl we are unable to save logs from devtools panel since `downloads` API is unavailable. I am getting the following error - \r\n`can\'t access property ""onChanged"", browser.downloads is undefined`\r\n\r\n`load logs` and `clear all logs` are working fine. Should we hide the `save logs` button?', 'comment_created': datetime.datetime(2020, 8, 14, 14, 14, 35, tzinfo=datetime.timezone.utc), 'commenter': 'atiqueahmedziad', 'type': 'User'}, {'comment_id': 470659499, 'comment_body': 'Pass a message to the bg page and let the bg page call `browser.downloads.download`.', 'comment_created': datetime.datetime(2020, 8, 14, 14, 31, 3, tzinfo=datetime.timezone.utc), 'commenter': 'Rob--W', 'type': 'User'}, {'comment_id': 470697233, 'comment_body': '@atiqueahmedziad I\'m not sure that the devtools panel\'s `onShown` and `onHidden` events are the right way of keeping track if the devtools panel does still exist (hidden doesn\'t mean that we have destroyed it).\r\n\r\nAnother approach to keep track of that would be to make the activitylog page to connect a port if it does want the background page to send real time messages, that port would be automatically disconnected if the extension page or extension panel has been destroyed and so we could use that to detect when we don\'t have any page listening for realtime logs anymore (we don\'t need to send the real time logs over the `runtime.Port`, we can keep broadcasting them using `browser.runtime.sendMessage` as we are doing at the moment, and we could be using the ports just to keep track of the extension contexts that are still alive)\r\n\r\nThe flow would likely be something like the following:\r\n\r\n- the activitylog page detects that it does want to receive the realtime logs and so it calls `browser.runtime.connect({name: ""monitor-realtime-logs""})`\r\n- on the background page side, ext-monitor would be registering a listener on the `browser.runtime.onConnect` API event, and if the received port does have the expected name (`""monitor-realtime-logs""` in the example above) and if it does:\r\n  - it keeps track of the port (e.g. in a `Set`)\r\n  - it subscribe a listener on `port.onDisconnect`, and remove the port from the data structure where we keep track of them (e.g. from the `Set` I did mention before)\r\n- ext-monitor will then be broadcasting the logs collected in real time if there are `runtime.Port` instances still alive (still part of the `Set` I did mention above)\r\n\r\nHow that sounds to you?\r\n\r\nSome references to the APIs I did mention:\r\n- https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/API/runtime/connect\r\n- https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/API/runtime/onConnect\r\n- https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/API/runtime/Port', 'comment_created': datetime.datetime(2020, 8, 14, 15, 28, 25, tzinfo=datetime.timezone.utc), 'commenter': 'rpl', 'type': 'User'}, {'comment_id': 470752656, 'comment_body': 'Thanks @rpl for explaining in detail, I have implemented it :-) ', 'comment_created': datetime.datetime(2020, 8, 14, 17, 16, 31, tzinfo=datetime.timezone.utc), 'commenter': 'atiqueahmedziad', 'type': 'User'}, {'comment_id': 470794846, 'comment_body': '`== null` to make sure this return earlier if tabId is `null` or `undefined`.\r\n\r\nYou may want to try this in a js console (e.g. a devtools webconsole panel or from a nodejs interactive interpreter) to better see the difference, eg. when using  `... == null`:\r\n\r\n```\r\nnull == null // => true\r\nundefined == null // => true\r\n0 == null // false\r\n```\r\n\r\nversus when using `... === null`:\r\n\r\n```\r\nnull === null // => true\r\nundefined === null // => false\r\n0 === null // => false\r\n```\r\n\r\n(but leave the `===` at line 107, there we want it to only return true on strict equality between the two values).', 'comment_created': datetime.datetime(2020, 8, 14, 18, 31, 9, tzinfo=datetime.timezone.utc), 'commenter': 'rpl', 'type': 'User'}, {'comment_id': 470802122, 'comment_body': ""As it is this looks a bit of a violation of the MVC pattern, the controller shouldn't change the textContent of the an element part by the view by directly accessing it as a property.\r\n\r\nisn't the view already receiving the filterTabId as part of the filter properties got from the model?\r\nif that is the case, then the view could use that to update also that header element accordingly. "", 'comment_created': datetime.datetime(2020, 8, 14, 18, 39, 45, tzinfo=datetime.timezone.utc), 'commenter': 'rpl', 'type': 'User'}, {'comment_id': 470807851, 'comment_body': ""Aren't the log that we want to save already available in the `logs` property of the `ExtensionMonitor` class?\r\n\r\nSending a blob from the activitylog page seems unnecessary as it would send across IPC something that we do already have locally (and which can be potentially become pretty big if the monitoring session is long enough).\r\n\r\nEven the filename doesn't seem to be necessary, given that the caller is sending a literal string value for it.\r\n\r\nI think that this event handler could be written without taking any parameter for now (and we may add some, e.g. one with the filter options, once we actually need it). "", 'comment_created': datetime.datetime(2020, 8, 14, 18, 46, 24, tzinfo=datetime.timezone.utc), 'commenter': 'rpl', 'type': 'User'}, {'comment_id': 470825410, 'comment_body': ""> isn't the view already receiving the filterTabId as part of the filter properties got from the model?\r\n> if that is the case, then the view could use that to update also that header element accordingly.\r\n\r\nThe `log-view` web component is directly getting the filter object from model via `isFilterMatched` method. \r\nI am made a new method in view to deal with it. Does that work?"", 'comment_created': datetime.datetime(2020, 8, 14, 19, 26, 17, tzinfo=datetime.timezone.utc), 'commenter': 'atiqueahmedziad', 'type': 'User'}, {'comment_id': 470826035, 'comment_body': 'Updated it with empty parameter and using the logs from background. ', 'comment_created': datetime.datetime(2020, 8, 14, 19, 27, 46, tzinfo=datetime.timezone.utc), 'commenter': 'atiqueahmedziad', 'type': 'User'}, {'comment_id': 470829947, 'comment_body': 'Thanks :-).  Updated with double equals :-)', 'comment_created': datetime.datetime(2020, 8, 14, 19, 37, 9, tzinfo=datetime.timezone.utc), 'commenter': 'atiqueahmedziad', 'type': 'User'}, {'comment_id': 470830440, 'comment_body': 'I guess that we may also want to check if filterTabId is NaN and show an error somewhere, it is ok to file a follow up to deal with it, at the moment this issue would only be triggered if the user open the activitylog page in a tab and then manually set this parameter to a non number value. ', 'comment_created': datetime.datetime(2020, 8, 14, 19, 38, 20, tzinfo=datetime.timezone.utc), 'commenter': 'rpl', 'type': 'User'}, {'comment_id': 470833312, 'comment_body': 'Do we still need the ""tabs"" permission? (the ""tabs"" permission gives access to the url and querying the tabs by url, but the tabs API is still available even without that permission)\r\n\r\nwould you mind to double-check if we do still need what the ""tabs"" permissions provide for us and remove it if we don\'t need it anymore?', 'comment_created': datetime.datetime(2020, 8, 14, 19, 45, 9, tzinfo=datetime.timezone.utc), 'commenter': 'rpl', 'type': 'User'}, {'comment_id': 470835088, 'comment_body': ""would you mind to double check (manually given that we don't have an integration test suite) that we are still able to propagate the download errors correctly and showing a meaningful error in that case?\r\n\r\n(to verify this manually you may temporarily change `saveLogs` in ext-monitor.js and make it to reject a fake error message and then double-check that it is being shown to the user as expected).  "", 'comment_created': datetime.datetime(2020, 8, 14, 19, 49, 52, tzinfo=datetime.timezone.utc), 'commenter': 'rpl', 'type': 'User'}, {'comment_id': 470856694, 'comment_body': 'Yeah, this is showing error whenever `saveLogs` throws error.', 'comment_created': datetime.datetime(2020, 8, 14, 20, 44, 43, tzinfo=datetime.timezone.utc), 'commenter': 'atiqueahmedziad', 'type': 'User'}, {'comment_id': 470856951, 'comment_body': 'removed the `tabs` permission. Thanks for noticing.', 'comment_created': datetime.datetime(2020, 8, 14, 20, 45, 16, tzinfo=datetime.timezone.utc), 'commenter': 'atiqueahmedziad', 'type': 'User'}, {'comment_id': 470857040, 'comment_body': 'Filed issue #45 ', 'comment_created': datetime.datetime(2020, 8, 14, 20, 45, 33, tzinfo=datetime.timezone.utc), 'commenter': 'atiqueahmedziad', 'type': 'User'}, {'comment_id': 471376624, 'comment_body': 'This is ok for now, at least it doesn\'t violate the MVC pattern as we discussed in some of the previous review comments, but after using the panel a bit I think that as a user I would expect the ""filter by tabId"" to be visible along with the other filters (eventually only visible when the activitylog page has detected the filterTabId parameter as part of the url, and maybe without allowing the users to clear the filter as they can on the other filters).\r\n\r\nLet\'s add it as a point in the agenda (so that we can agree if we want to file an issue for this and which priority should it get).', 'comment_created': datetime.datetime(2020, 8, 17, 10, 8, 50, tzinfo=datetime.timezone.utc), 'commenter': 'rpl', 'type': 'User'}]","[{'commit_sha': 'b0c10e6ef951af436c17b4b0fff6434167dd1dc9', 'committer_username': 'atiqueahmedziad', 'committer_name': 'Atique Ahmed Ziad', 'committer_email': None, 'commit_date': datetime.datetime(2014, 8, 5, 15, 37, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '672bfea48e86a48e275ac892f1cf21df3c8797d7', 'committer_username': 'atiqueahmedziad', 'committer_name': 'Atique Ahmed Ziad', 'committer_email': None, 'commit_date': datetime.datetime(2014, 8, 5, 15, 37, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'de1d09cdb05e452b66e691406cda2a15fd820977', 'committer_username': 'atiqueahmedziad', 'committer_name': 'Atique Ahmed Ziad', 'committer_email': None, 'commit_date': datetime.datetime(2014, 8, 5, 15, 37, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '66213cc96cc604b40c27a2ac12ff6287deeb29a6', 'committer_username': 'atiqueahmedziad', 'committer_name': 'Atique Ahmed Ziad', 'committer_email': None, 'commit_date': datetime.datetime(2014, 8, 5, 15, 37, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '594a45d78d2d3e4ef4e8e9d340e8c50feff6417f', 'committer_username': 'atiqueahmedziad', 'committer_name': 'Atique Ahmed Ziad', 'committer_email': None, 'commit_date': datetime.datetime(2014, 8, 5, 15, 37, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '45473be4a106f01f41b783ea361fdeb2441e54fa', 'committer_username': 'atiqueahmedziad', 'committer_name': 'Atique Ahmed Ziad', 'committer_email': None, 'commit_date': datetime.datetime(2014, 8, 5, 15, 37, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '59954dd3e3b0d628846196a1bf2285f573c77493', 'committer_username': 'atiqueahmedziad', 'committer_name': 'Atique Ahmed Ziad', 'committer_email': None, 'commit_date': datetime.datetime(2014, 8, 5, 15, 37, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b43d2d666994eee29f38620593ffc7e22cff5ec2', 'committer_username': 'atiqueahmedziad', 'committer_name': 'Atique Ahmed Ziad', 'committer_email': None, 'commit_date': datetime.datetime(2014, 8, 5, 15, 37, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '076bc410126c72c7424ca191ac3b28661972aa2d', 'committer_username': 'atiqueahmedziad', 'committer_name': 'Atique Ahmed Ziad', 'committer_email': None, 'commit_date': datetime.datetime(2014, 8, 5, 15, 37, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '05a1ce8103172a60b6b4729a21fa0461d41b2bed', 'committer_username': 'atiqueahmedziad', 'committer_name': 'Atique Ahmed Ziad', 'committer_email': None, 'commit_date': datetime.datetime(2014, 8, 5, 15, 37, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8b0000b0ab586468c5a44bca4ffa5f31d96498a4', 'committer_username': 'atiqueahmedziad', 'committer_name': 'Atique Ahmed Ziad', 'committer_email': None, 'commit_date': datetime.datetime(2014, 8, 5, 15, 37, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9f4b60806a38f4122e7494d726a7e51030445087', 'committer_username': 'atiqueahmedziad', 'committer_name': 'Atique Ahmed Ziad', 'committer_email': None, 'commit_date': datetime.datetime(2014, 8, 5, 15, 37, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3ed1be2f4bcd3a870c0951e8b89064e0039993ac', 'committer_username': 'atiqueahmedziad', 'committer_name': 'Atique Ahmed Ziad', 'committer_email': None, 'commit_date': datetime.datetime(2014, 8, 5, 15, 37, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4478b4966ab2ddd84ed7d7fd6d3e795e0aa4d586', 'committer_username': 'atiqueahmedziad', 'committer_name': 'Atique Ahmed Ziad', 'committer_email': None, 'commit_date': datetime.datetime(2014, 8, 5, 15, 37, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '36165152432ef6411dc4f7080a5ddc9a89c595e4', 'committer_username': 'atiqueahmedziad', 'committer_name': 'Atique Ahmed Ziad', 'committer_email': None, 'commit_date': datetime.datetime(2014, 8, 5, 15, 37, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f86df127496f80d6f260f5708119fb00029f95b8', 'committer_username': 'atiqueahmedziad', 'committer_name': 'Atique Ahmed Ziad', 'committer_email': None, 'commit_date': datetime.datetime(2014, 8, 5, 15, 37, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd654f2031fb57065a3b6fe723ff5ad7be26a5f9d', 'committer_username': 'atiqueahmedziad', 'committer_name': 'Atique Ahmed Ziad', 'committer_email': None, 'commit_date': datetime.datetime(2014, 8, 5, 15, 37, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2d1de1e14555113eb248be994709b4fbf59870e6', 'committer_username': 'atiqueahmedziad', 'committer_name': 'Atique Ahmed Ziad', 'committer_email': None, 'commit_date': datetime.datetime(2014, 8, 5, 15, 37, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8839ecf721d86058b75f227de3187d0d73c01bb5', 'committer_username': 'atiqueahmedziad', 'committer_name': 'Atique Ahmed Ziad', 'committer_email': None, 'commit_date': datetime.datetime(2014, 8, 5, 15, 37, 42, tzinfo=datetime.timezone.utc)}]",Atique Ahmed Ziad,8364578,,User,,72,,3,42
468896593,fix: contextMenu listener returned when selected Element is null,"## STR
1. Open Activity Log page from popup.
2. Open another Activity Log page from popup keeping the first one alive.
3. Collect some logs in the table view. 
4. Apply timestamp filtering.

You will find a console error saying: `can't access property ""closest"", selectedEl is null`

When we have multiple activity log page opened at a time, multiple context menu event listeners are being assigned but we get only one `selectedEl` from where the context event has been called.  
We should return when `selectedEl` is null.",True,47,https://api.github.com/repos/mozilla/extension-activity-monitor/pulls/47,https://github.com/mozilla/extension-activity-monitor/pull/47,closed,1,1,1,1,0,2,0,0,[],2020-08-17 15:15:29+00:00,2020-08-17 16:29:44+00:00,4455.0,1:14:15,"[{'comment_id': 471588642, 'comment_body': 'Use the [optional chaining operator](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Optional_chaining) instead of adding an extra `if`.', 'comment_created': datetime.datetime(2020, 8, 17, 16, 15, 9, tzinfo=datetime.timezone.utc), 'commenter': 'Rob--W', 'type': 'User'}, {'comment_id': 471592355, 'comment_body': 'oh, yes. Added. Thanks :-)', 'comment_created': datetime.datetime(2020, 8, 17, 16, 21, 35, tzinfo=datetime.timezone.utc), 'commenter': 'atiqueahmedziad', 'type': 'User'}]","[{'commit_sha': '96310c71f5c21c27734fce112148acb492f1c1e8', 'committer_username': 'atiqueahmedziad', 'committer_name': 'Atique Ahmed Ziad', 'committer_email': None, 'commit_date': datetime.datetime(2014, 8, 5, 15, 37, 42, tzinfo=datetime.timezone.utc)}]",Atique Ahmed Ziad,8364578,,User,,72,,3,42
470184046,"""undefined"" viewType displayed as 'other' in filter checkbox",Fixes #42 ,True,48,https://api.github.com/repos/mozilla/extension-activity-monitor/pulls/48,https://github.com/mozilla/extension-activity-monitor/pull/48,closed,10,3,1,4,0,6,0,0,[],2020-08-19 13:58:27+00:00,2020-08-21 06:02:29+00:00,144242.0,"1 day, 16:04:02","[{'comment_id': 473064992, 'comment_body': 'Rather than duplicating the same string thrice, put it in a constant with a good name and use that instead.', 'comment_created': datetime.datetime(2020, 8, 19, 14, 18, 30, tzinfo=datetime.timezone.utc), 'commenter': 'Rob--W', 'type': 'User'}, {'comment_id': 473078551, 'comment_body': ""Added `otherLabel = 'other'` at constructor and used this. :-)"", 'comment_created': datetime.datetime(2020, 8, 19, 14, 35, 44, tzinfo=datetime.timezone.utc), 'commenter': 'atiqueahmedziad', 'type': 'User'}, {'comment_id': 473117464, 'comment_body': ""To emphasize that this is an immutable value, use `const FILTER_OPTION_UNDEFINED_LABEL = 'other';` (or a shorter name), with a brief comment before it to explain what it's used for."", 'comment_created': datetime.datetime(2020, 8, 19, 15, 28, 33, tzinfo=datetime.timezone.utc), 'commenter': 'Rob--W', 'type': 'User'}, {'comment_id': 473194907, 'comment_body': 'Would I declare it in constructor? Or declare it as `const` inside the methods? ', 'comment_created': datetime.datetime(2020, 8, 19, 17, 13, 12, tzinfo=datetime.timezone.utc), 'commenter': 'atiqueahmedziad', 'type': 'User'}, {'comment_id': 473222836, 'comment_body': 'Outside the class.', 'comment_created': datetime.datetime(2020, 8, 19, 18, 1, 30, tzinfo=datetime.timezone.utc), 'commenter': 'Rob--W', 'type': 'User'}, {'comment_id': 473227377, 'comment_body': 'updated :-) ', 'comment_created': datetime.datetime(2020, 8, 19, 18, 9, 46, tzinfo=datetime.timezone.utc), 'commenter': 'atiqueahmedziad', 'type': 'User'}]","[{'commit_sha': 'c2df9accae0f9db7c84c8cb5daaabb76f9731cc2', 'committer_username': 'atiqueahmedziad', 'committer_name': 'Atique Ahmed Ziad', 'committer_email': None, 'commit_date': datetime.datetime(2014, 8, 5, 15, 37, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0b1cb257d85a52a0d194258724903973a062e306', 'committer_username': 'atiqueahmedziad', 'committer_name': 'Atique Ahmed Ziad', 'committer_email': None, 'commit_date': datetime.datetime(2014, 8, 5, 15, 37, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '78ad1b2b9426c40b0b47df5406d0776ceb1e68e4', 'committer_username': 'atiqueahmedziad', 'committer_name': 'Atique Ahmed Ziad', 'committer_email': None, 'commit_date': datetime.datetime(2014, 8, 5, 15, 37, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a22d57c9f0846f6ae100f11584d43306d4459f20', 'committer_username': 'atiqueahmedziad', 'committer_name': 'Atique Ahmed Ziad', 'committer_email': None, 'commit_date': datetime.datetime(2014, 8, 5, 15, 37, 42, tzinfo=datetime.timezone.utc)}]",Atique Ahmed Ziad,8364578,,User,,72,,3,42
468883881,fix: Made timestamp consistant,"Fixes #41 

- `log.timeStamp` contains timestamp (number).
- While viewing logs, the timestamp is being formatted into human-readable format i.e. `8:49:31 PM` (`hh:mm:ss am/pm`)
- When hover the timestamp in `log-view`, it shows tooltip in the format `17-8-2020 8:49:31 PM` 
- The timestamp filter texts also show the same format as tooltip i.e. `17-8-2020 8:49:31 PM` 

## Screenshot
<img width=""1262"" alt=""Screenshot 2020-08-17 at 8 52 49 PM"" src=""https://user-images.githubusercontent.com/8364578/90410098-c5d0cd80-e0cb-11ea-9875-70936c0772e9.png"">

",True,46,https://api.github.com/repos/mozilla/extension-activity-monitor/pulls/46,https://github.com/mozilla/extension-activity-monitor/pull/46,closed,87,9,6,10,0,17,0,0,[],2020-08-17 14:54:17+00:00,2020-08-21 12:48:21+00:00,338044.0,"3 days, 21:54:04","[{'comment_id': 471537561, 'comment_body': '~~When we have multiple activity log page opened at a time, multiple context menu event listeners are being assigned but we get only one `selectedEl` (from where the context event has been called)~~\r\n\r\n**Update:** opened another PR #47 , as this change is unrelated to this PR. Removed this change from here.', 'comment_created': datetime.datetime(2020, 8, 17, 14, 57, 53, tzinfo=datetime.timezone.utc), 'commenter': 'atiqueahmedziad', 'type': 'User'}, {'comment_id': 471591271, 'comment_body': ""`dd-MM-YYYY` looks reasonable to me because the format is the same as where I am from (The Netherlands), but it is not universally true.\r\n\r\nSince you're trying to have locale-aware time strings, I suggest to be consistent.\r\n\r\nUse the `Intl.DateTimeFormat` API to format the date in a locale-aware way - https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat"", 'comment_created': datetime.datetime(2020, 8, 17, 16, 19, 45, tzinfo=datetime.timezone.utc), 'commenter': 'Rob--W', 'type': 'User'}, {'comment_id': 471594194, 'comment_body': 'Use `selectedRow._log.timeStamp` instead.\r\n\r\nI would rather not have an external class using an internal `_log` property, but it is preferable to your current approach, of adding a `_timeStamp` property to an unrelated DOM element.\r\n\r\nTo reduce the risk of future regressions, it would be nice to have a unit test that verifies that the time labels are rendered as expected.', 'comment_created': datetime.datetime(2020, 8, 17, 16, 24, 41, tzinfo=datetime.timezone.utc), 'commenter': 'Rob--W', 'type': 'User'}, {'comment_id': 473939633, 'comment_body': '`DateTimeFormat` also supports parameters to include the time in the generated string. Do not use `toLocaleTimeString`, but only `DateTimeFormat`.', 'comment_created': datetime.datetime(2020, 8, 20, 12, 42, 16, tzinfo=datetime.timezone.utc), 'commenter': 'Rob--W', 'type': 'User'}, {'comment_id': 473939981, 'comment_body': ""You shouldn't mock your function, but the API that you're using. The only changes should be:\r\n- fix `'en-US'` as the locale instead of `undefined`.\r\n- fix the `timeZone` option.\r\n\r\nBy doing both, the generated time strings become fully deterministic / predictable, and you can put the expected times in strings below."", 'comment_created': datetime.datetime(2020, 8, 20, 12, 42, 52, tzinfo=datetime.timezone.utc), 'commenter': 'Rob--W', 'type': 'User'}, {'comment_id': 473942756, 'comment_body': 'Hard-code the expected strings instead of generating it based on the dynamic objects.', 'comment_created': datetime.datetime(2020, 8, 20, 12, 47, 45, tzinfo=datetime.timezone.utc), 'commenter': 'Rob--W', 'type': 'User'}, {'comment_id': 473944197, 'comment_body': 'Why did you put this function in `ext-listen.js` instead of a new file called, say, `formatters.js`?', 'comment_created': datetime.datetime(2020, 8, 20, 12, 50, 13, tzinfo=datetime.timezone.utc), 'commenter': 'Rob--W', 'type': 'User'}, {'comment_id': 474594388, 'comment_body': 'done :-)', 'comment_created': datetime.datetime(2020, 8, 21, 9, 50, 37, tzinfo=datetime.timezone.utc), 'commenter': 'atiqueahmedziad', 'type': 'User'}, {'comment_id': 474594539, 'comment_body': 'done :-) Thanks', 'comment_created': datetime.datetime(2020, 8, 21, 9, 50, 47, tzinfo=datetime.timezone.utc), 'commenter': 'atiqueahmedziad', 'type': 'User'}, {'comment_id': 474594737, 'comment_body': 'done :-)', 'comment_created': datetime.datetime(2020, 8, 21, 9, 50, 56, tzinfo=datetime.timezone.utc), 'commenter': 'atiqueahmedziad', 'type': 'User'}, {'comment_id': 474595079, 'comment_body': 'yes, made a new file `formatters.js` ', 'comment_created': datetime.datetime(2020, 8, 21, 9, 51, 14, tzinfo=datetime.timezone.utc), 'commenter': 'atiqueahmedziad', 'type': 'User'}, {'comment_id': 474615513, 'comment_body': ""Don't create two `DateTimeFormat` instances followed by string concatenation. Let the value of `timeFormatOptions` be conditional based on `options?.timeOnly`."", 'comment_created': datetime.datetime(2020, 8, 21, 10, 31, 59, tzinfo=datetime.timezone.utc), 'commenter': 'Rob--W', 'type': 'User'}, {'comment_id': 474616351, 'comment_body': ""Don't replace the `format` method; just let the constructor return `new originalIntlDateTimeFormat('en-US', options);`."", 'comment_created': datetime.datetime(2020, 8, 21, 10, 34, 6, tzinfo=datetime.timezone.utc), 'commenter': 'Rob--W', 'type': 'User'}, {'comment_id': 474626138, 'comment_body': 'done :-)', 'comment_created': datetime.datetime(2020, 8, 21, 10, 57, 19, tzinfo=datetime.timezone.utc), 'commenter': 'atiqueahmedziad', 'type': 'User'}, {'comment_id': 474626185, 'comment_body': 'done :-)', 'comment_created': datetime.datetime(2020, 8, 21, 10, 57, 26, tzinfo=datetime.timezone.utc), 'commenter': 'atiqueahmedziad', 'type': 'User'}, {'comment_id': 474656450, 'comment_body': ""Mocks should not modify the input object, as that may have side effects.\r\nDo this instead:\r\n```\r\noptions = {...options, timeZone: 'UTC'}\r\n```"", 'comment_created': datetime.datetime(2020, 8, 21, 12, 9, 28, tzinfo=datetime.timezone.utc), 'commenter': 'Rob--W', 'type': 'User'}, {'comment_id': 474660305, 'comment_body': 'Could you add the next comment:\r\n\r\n```\r\n// TODO: Stop using `Date.parse` when `details.timeStamp` is a numeric timestamp.\r\n// See https://bugzilla.mozilla.org/show_bug.cgi?id=1660460\r\n```', 'comment_created': datetime.datetime(2020, 8, 21, 12, 18, 5, tzinfo=datetime.timezone.utc), 'commenter': 'Rob--W', 'type': 'User'}]","[{'commit_sha': 'ba05db80bac834c897196ae1d7232d9f3eb1bcee', 'committer_username': 'atiqueahmedziad', 'committer_name': 'Atique Ahmed Ziad', 'committer_email': None, 'commit_date': datetime.datetime(2014, 8, 5, 15, 37, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5f02cc48f4a366637da119fe8718e3a0f03faa96', 'committer_username': 'atiqueahmedziad', 'committer_name': 'Atique Ahmed Ziad', 'committer_email': None, 'commit_date': datetime.datetime(2014, 8, 5, 15, 37, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '44fa52ef1a309611c3c05326e09a1571671165a8', 'committer_username': 'atiqueahmedziad', 'committer_name': 'Atique Ahmed Ziad', 'committer_email': None, 'commit_date': datetime.datetime(2014, 8, 5, 15, 37, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f52a0f09b49e5b40b9222716eb8e104a45ead622', 'committer_username': 'atiqueahmedziad', 'committer_name': 'Atique Ahmed Ziad', 'committer_email': None, 'commit_date': datetime.datetime(2014, 8, 5, 15, 37, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ec1fc3c033ca07e307bf5b048c6234542f0d5ef0', 'committer_username': 'atiqueahmedziad', 'committer_name': 'Atique Ahmed Ziad', 'committer_email': None, 'commit_date': datetime.datetime(2014, 8, 5, 15, 37, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '48cb2e28a808b525856a2a91a6e2b6147d85053c', 'committer_username': 'atiqueahmedziad', 'committer_name': 'Atique Ahmed Ziad', 'committer_email': None, 'commit_date': datetime.datetime(2014, 8, 5, 15, 37, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b613cef45c168ed3977d7127e08f95ef8f8a386d', 'committer_username': 'atiqueahmedziad', 'committer_name': 'Atique Ahmed Ziad', 'committer_email': None, 'commit_date': datetime.datetime(2014, 8, 5, 15, 37, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4a2f23dcfdff48a09ed7a12f2d7c370f8a1e4982', 'committer_username': 'atiqueahmedziad', 'committer_name': 'Atique Ahmed Ziad', 'committer_email': None, 'commit_date': datetime.datetime(2014, 8, 5, 15, 37, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dea2d66135958fd7855c474272bcb4d3f8897a9f', 'committer_username': 'atiqueahmedziad', 'committer_name': 'Atique Ahmed Ziad', 'committer_email': None, 'commit_date': datetime.datetime(2014, 8, 5, 15, 37, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0a24856db4ebd920e65c62ebda23e05766f6d249', 'committer_username': 'atiqueahmedziad', 'committer_name': 'Atique Ahmed Ziad', 'committer_email': None, 'commit_date': datetime.datetime(2014, 8, 5, 15, 37, 42, tzinfo=datetime.timezone.utc)}]",Atique Ahmed Ziad,8364578,,User,,72,,3,42
467911094,docs: Contributing doc added,"Fixes #29 

Visually can be seen here - https://github.com/atiqueahmedziad/extension-activity-monitor/blob/devdoc/CONTRIBUTING.md",True,44,https://api.github.com/repos/mozilla/extension-activity-monitor/pulls/44,https://github.com/mozilla/extension-activity-monitor/pull/44,closed,190,0,2,55,1,100,0,0,[],2020-08-14 10:39:32+00:00,2020-08-27 11:34:22+00:00,1126490.0,"13 days, 0:54:50","[{'comment_id': 470560913, 'comment_body': 'Instead of hard-coding a specific path, have you tried to use relative URLs? Like this:\r\n`[Project Architecture](#project-architecture)`', 'comment_created': datetime.datetime(2020, 8, 14, 11, 9, 30, tzinfo=datetime.timezone.utc), 'commenter': 'Rob--W', 'type': 'User'}, {'comment_id': 470564527, 'comment_body': 'Yeah done :-)', 'comment_created': datetime.datetime(2020, 8, 14, 11, 18, 37, tzinfo=datetime.timezone.utc), 'commenter': 'atiqueahmedziad', 'type': 'User'}, {'comment_id': 472278600, 'comment_body': '@atiqueahmedziad  the ""src/devtools"" does actually contain the invisible devtools page that **will create** a devtools panel which loads the activitylog.html page with a tabId filter set to `browser.devtools.inspectedWindow.tabId`.', 'comment_created': datetime.datetime(2020, 8, 18, 15, 20, 12, tzinfo=datetime.timezone.utc), 'commenter': 'rpl', 'type': 'User'}, {'comment_id': 472413605, 'comment_body': 'Is it okay if I write - ""Contains the invisible devtools page that creates a devtools panel which loads the activitylog.html page and filter logs with the current tab id"" ?\r\n**Update**: updated to above suggestion. Let me know, if we should mention how we are collecting the tab id as you have mentioned ? -\r\n> contain the invisible devtools page that will create a devtools panel which loads the activitylog.html page with a tabId filter set to browser.devtools.inspectedWindow.tabId.\r\n', 'comment_created': datetime.datetime(2020, 8, 18, 18, 57, 59, tzinfo=datetime.timezone.utc), 'commenter': 'atiqueahmedziad', 'type': 'User'}, {'comment_id': 474210787, 'comment_body': '""ES6 classes/modules are being used ..."" can be removed - it is obvious after one look at the code.\r\n\r\nThe reference to the Jest framework can be removed to a separate section (about testing). You should have one section on testing that explains which test framework is used and how to run them.', 'comment_created': datetime.datetime(2020, 8, 20, 19, 11, 59, tzinfo=datetime.timezone.utc), 'commenter': 'Rob--W', 'type': 'User'}, {'comment_id': 474213364, 'comment_body': ""These descriptions on their own aren't particularly useful. As mentioned in the top-level review comment, an overview of components (potentially with references to files) is useful.\r\n\r\nJust a list of directories and file names is not very useful. The list doesn't show much information and can become out of date.\r\n\r\nSince the directory names are self-describing and there isn't that much info here, I recommend to remove this whole section once you've got the overview of components and the extra information that I requested in the top-level comment."", 'comment_created': datetime.datetime(2020, 8, 20, 19, 16, 40, tzinfo=datetime.timezone.utc), 'commenter': 'Rob--W', 'type': 'User'}, {'comment_id': 474214809, 'comment_body': 'Remove ""test suits"" with just ""tests"".\r\n\r\nA [test suite](https://en.wikipedia.org/wiki/Test_suite) (plural ""test suites"") is a collection of test cases. All tests combined is the test suite, but the individual files are just tests.', 'comment_created': datetime.datetime(2020, 8, 20, 19, 19, 27, tzinfo=datetime.timezone.utc), 'commenter': 'Rob--W', 'type': 'User'}, {'comment_id': 474864155, 'comment_body': 'Personally I find this paragraph in Project Architecture too focused on the frontend part of the architecture.\r\n\r\nI think that we should start by saying that the `Extension Activity Monitor is composed by a backend part (running in the background page) and a frontend part (composed by a browserAction popup and an activitylog extension page opened which is loaded as a tab or as a devtools panel).`\r\n\r\nFor the initial part an high level view similar to the example I wrote above may be enough, then we may describe the backend and frontends components in a bit more details in the content that follows.', 'comment_created': datetime.datetime(2020, 8, 21, 18, 39, 40, tzinfo=datetime.timezone.utc), 'commenter': 'rpl', 'type': 'User'}, {'comment_id': 474869551, 'comment_body': '- I would start with saying that the ""background page does act as the backend of the extension"" and then go a bit more in the details\r\n- then we may want to make sure that this section does mention:\r\n  - where the core of the background page is implemented\r\n  - what the backend is responsible for\r\n  - how the backend does receive and reply to requests coming from the frontend components (and maybe the convention used by the ""communication protocol"" that allows backend and frontend to work together, or to point to a section when that is described in more detail later in this doc page, e.g. as a subsection of the data flow section)', 'comment_created': datetime.datetime(2020, 8, 21, 18, 51, 34, tzinfo=datetime.timezone.utc), 'commenter': 'rpl', 'type': 'User'}, {'comment_id': 474874868, 'comment_body': 'This doesn\'t need to be a single paragraph (and as a side effect it would look less dense and it will make it easier to add review comments ;-)) (and the same comment may be valid also for other paragraphs in this page, double-check if the paragraph can be broken and/or if it does look ""too dense"")\r\n\r\nPersonally I think that given that this section starts by saying that for the Activity Log page we are using an MVC pattern, then as a reader I would expect that ""how the Activity Log page does work""   is expressed in terms of the MVC pattern (as example I would ask myself: ""what is the controller responsible for?"" or ""what data does the Model class manage for the Activity Log page?"" and ""what are the web components and other interesting part of the DOM elements that the View class is managing and I should aware of?"" and expect this section to provide answer or pointers to other sections with more details about them).', 'comment_created': datetime.datetime(2020, 8, 21, 19, 3, 44, tzinfo=datetime.timezone.utc), 'commenter': 'rpl', 'type': 'User'}, {'comment_id': 474884632, 'comment_body': '`The **backend** does subscribe the browser.activityLog.onExtensionActivity API event listeners` (and eventually link it, just one link to the schema file on searchfox will be enough, the reader will be able to figure out that the file describe the entire API namespace and that there is only one event and a type in that schema file, I think we can omit these details)\r\n\r\nThe backend does also listen for newly installed extensions and it does start to monitor them automatically if the ""realtime monitor"" feature is active, it may be worth to mention that too here.', 'comment_created': datetime.datetime(2020, 8, 21, 19, 18, 39, tzinfo=datetime.timezone.utc), 'commenter': 'rpl', 'type': 'User'}, {'comment_id': 474965487, 'comment_body': 'updated :-)', 'comment_created': datetime.datetime(2020, 8, 21, 20, 57, 59, tzinfo=datetime.timezone.utc), 'commenter': 'atiqueahmedziad', 'type': 'User'}, {'comment_id': 474965602, 'comment_body': 'this is done :-)', 'comment_created': datetime.datetime(2020, 8, 21, 20, 58, 8, tzinfo=datetime.timezone.utc), 'commenter': 'atiqueahmedziad', 'type': 'User'}, {'comment_id': 474970380, 'comment_body': 'done :-) explained MVC and made some separated parapgraphs.', 'comment_created': datetime.datetime(2020, 8, 21, 21, 6, 41, tzinfo=datetime.timezone.utc), 'commenter': 'atiqueahmedziad', 'type': 'User'}, {'comment_id': 474970502, 'comment_body': 'done :-)', 'comment_created': datetime.datetime(2020, 8, 21, 21, 6, 59, tzinfo=datetime.timezone.utc), 'commenter': 'atiqueahmedziad', 'type': 'User'}, {'comment_id': 475507562, 'comment_body': 'it is actually the main part.', 'comment_created': datetime.datetime(2020, 8, 24, 10, 33, 44, tzinfo=datetime.timezone.utc), 'commenter': 'rpl', 'type': 'User'}, {'comment_id': 475509167, 'comment_body': 'No need to repeat **role of** while explaining what every part of the activity log page MVC is responsible for.\r\nOne of the advantages of using a known terminology (like ""MVC"" in this case) is that you can assume that the reader knows what is MVC (or it can get that knowledge on its own) without having to restate it in the project\'s developers docs.\r\n\r\nHere we can just say that ""The Model class does store activity logs being rendered in the activity log page and the data representation of the log filters. The Model class does also provide a method that is being used to check if a particular log entry does match the filters."" ', 'comment_created': datetime.datetime(2020, 8, 24, 10, 36, 28, tzinfo=datetime.timezone.utc), 'commenter': 'rpl', 'type': 'User'}, {'comment_id': 475510750, 'comment_body': 'The ""Extension Activity"" devtools panel contains an instance of the Activity Log page where every real time activity log collected is automatically filtered by tab id.\r\n\r\nThe devtools panel retrieves the tab id filter from the devtools panel url search params, set by the devtools page by retrieving it using `browser.devtools.inspectedWindow.tabId` when the devtools panel is being registered.', 'comment_created': datetime.datetime(2020, 8, 24, 10, 40, 1, tzinfo=datetime.timezone.utc), 'commenter': 'rpl', 'type': 'User'}, {'comment_id': 475511567, 'comment_body': 'How the Activity log page signal to the backend that it is open, how is the activity log page receiving the logs already collected and then the logs collected in real time? ', 'comment_created': datetime.datetime(2020, 8, 24, 10, 41, 46, tzinfo=datetime.timezone.utc), 'commenter': 'rpl', 'type': 'User'}, {'comment_id': 475512376, 'comment_body': 'it is technically incorrect to say that ""the onExtensionActivity event listener returns a log object ..."", the event listener is called with a activity log object passed as a parameter. ', 'comment_created': datetime.datetime(2020, 8, 24, 10, 43, 34, tzinfo=datetime.timezone.utc), 'commenter': 'rpl', 'type': 'User'}, {'comment_id': 475516838, 'comment_body': 'This could say something like:\r\n\r\n""The View class manages the log-view and filters web components. The log-view webcomponent is responsible for rendering the logs collected (currently in a table form) and managing the log-view context menu. The filters web componenrs are responsible for the UI elements related to the log filters.""', 'comment_created': datetime.datetime(2020, 8, 24, 10, 53, 7, tzinfo=datetime.timezone.utc), 'commenter': 'rpl', 'type': 'User'}, {'comment_id': 475518413, 'comment_body': 'The Controller does connect the Model to the View, and it does also:\r\n- parse the URL search params\r\n- interact with the backend (through WebExtensions messaging API), ', 'comment_created': datetime.datetime(2020, 8, 24, 10, 56, 19, tzinfo=datetime.timezone.utc), 'commenter': 'rpl', 'type': 'User'}, {'comment_id': 475754975, 'comment_body': 'Should we differ including the `parse the URL search params` after the pr #49 is being merged?', 'comment_created': datetime.datetime(2020, 8, 24, 16, 50, 26, tzinfo=datetime.timezone.utc), 'commenter': 'atiqueahmedziad', 'type': 'User'}, {'comment_id': 475775737, 'comment_body': '""Responsible"" is not the best description here. The page only triggers these actions, it\'s not responsible for executing or holding state etc.', 'comment_created': datetime.datetime(2020, 8, 24, 17, 22, 11, tzinfo=datetime.timezone.utc), 'commenter': 'wagnerand', 'type': 'User'}, {'comment_id': 475776157, 'comment_body': 'Also, the entire add-on follows MVC, not just this page?', 'comment_created': datetime.datetime(2020, 8, 24, 17, 22, 57, tzinfo=datetime.timezone.utc), 'commenter': 'wagnerand', 'type': 'User'}, {'comment_id': 475776669, 'comment_body': ""If you describe a specific method here, why don't you mention its name?"", 'comment_created': datetime.datetime(2020, 8, 24, 17, 23, 53, tzinfo=datetime.timezone.utc), 'commenter': 'wagnerand', 'type': 'User'}, {'comment_id': 475777593, 'comment_body': '`log-view` should probably also be linked.', 'comment_created': datetime.datetime(2020, 8, 24, 17, 25, 29, tzinfo=datetime.timezone.utc), 'commenter': 'wagnerand', 'type': 'User'}, {'comment_id': 475779908, 'comment_body': 'Should we mention the file name(s) for each of these sections?', 'comment_created': datetime.datetime(2020, 8, 24, 17, 29, 41, tzinfo=datetime.timezone.utc), 'commenter': 'wagnerand', 'type': 'User'}, {'comment_id': 475782367, 'comment_body': ""Nit: s/make/makes/g\r\n\r\n> Whenever the Model updates with ... filter options, the Controller make sure that the View also updates accordingly.\r\n\r\nIsn't it the other way around when filter options are updated? The controller gets the changes from the view?"", 'comment_created': datetime.datetime(2020, 8, 24, 17, 34, 17, tzinfo=datetime.timezone.utc), 'commenter': 'wagnerand', 'type': 'User'}, {'comment_id': 475783277, 'comment_body': '...filtered by the **current** tab id.\r\n\r\nThe *current* is the important part here.', 'comment_created': datetime.datetime(2020, 8, 24, 17, 35, 54, tzinfo=datetime.timezone.utc), 'commenter': 'wagnerand', 'type': 'User'}, {'comment_id': 475783865, 'comment_body': 'Nit: s/can been/can be/', 'comment_created': datetime.datetime(2020, 8, 24, 17, 36, 59, tzinfo=datetime.timezone.utc), 'commenter': 'wagnerand', 'type': 'User'}, {'comment_id': 475784333, 'comment_body': 'Nit: s/background and send to/background and sent to/', 'comment_created': datetime.datetime(2020, 8, 24, 17, 38, 1, tzinfo=datetime.timezone.utc), 'commenter': 'wagnerand', 'type': 'User'}, {'comment_id': 475785432, 'comment_body': ""> The Activity Log page initializes in the new tab by fetching logs from background with it's tab id and\r\n\r\nThis could use a bit more background information and motivation. It's not clear why loading logs from a JSON file involves a tab id."", 'comment_created': datetime.datetime(2020, 8, 24, 17, 40, 5, tzinfo=datetime.timezone.utc), 'commenter': 'wagnerand', 'type': 'User'}, {'comment_id': 475786114, 'comment_body': 'A high-level overview of how filtering works (not feature-wise, but architecture and component-wise) would make this section more helpful.', 'comment_created': datetime.datetime(2020, 8, 24, 17, 41, 22, tzinfo=datetime.timezone.utc), 'commenter': 'wagnerand', 'type': 'User'}, {'comment_id': 475786829, 'comment_body': 'This is almost user documentation (short of the links to the files). Can we focus more on the architecture/components here?', 'comment_created': datetime.datetime(2020, 8, 24, 17, 42, 43, tzinfo=datetime.timezone.utc), 'commenter': 'wagnerand', 'type': 'User'}, {'comment_id': 475825173, 'comment_body': 'thanks, fixed :-)', 'comment_created': datetime.datetime(2020, 8, 24, 18, 51, 30, tzinfo=datetime.timezone.utc), 'commenter': 'atiqueahmedziad', 'type': 'User'}, {'comment_id': 475825186, 'comment_body': 'Thanks, fixed. :-)', 'comment_created': datetime.datetime(2020, 8, 24, 18, 51, 32, tzinfo=datetime.timezone.utc), 'commenter': 'atiqueahmedziad', 'type': 'User'}, {'comment_id': 475825199, 'comment_body': 'Yes, it is updated :-)', 'comment_created': datetime.datetime(2020, 8, 24, 18, 51, 34, tzinfo=datetime.timezone.utc), 'commenter': 'atiqueahmedziad', 'type': 'User'}, {'comment_id': 475825242, 'comment_body': 'Yes, updated it to the following:\r\n""Whenever a filter change is triggered from the View, the Controller makes sure it updates the Model and the View accordingly. It also updates the Model and View while receiving real-time logs from the Background.""', 'comment_created': datetime.datetime(2020, 8, 24, 18, 51, 39, tzinfo=datetime.timezone.utc), 'commenter': 'atiqueahmedziad', 'type': 'User'}, {'comment_id': 475825280, 'comment_body': 'Linked. :-)', 'comment_created': datetime.datetime(2020, 8, 24, 18, 51, 44, tzinfo=datetime.timezone.utc), 'commenter': 'atiqueahmedziad', 'type': 'User'}, {'comment_id': 475825291, 'comment_body': 'done.', 'comment_created': datetime.datetime(2020, 8, 24, 18, 51, 45, tzinfo=datetime.timezone.utc), 'commenter': 'atiqueahmedziad', 'type': 'User'}, {'comment_id': 475825322, 'comment_body': 'Rephased it like the following: \r\n`It triggers ""start monitoring"" and ""stop monitoring"" functionalities and helps to access the Activity Log page.`', 'comment_created': datetime.datetime(2020, 8, 24, 18, 51, 48, tzinfo=datetime.timezone.utc), 'commenter': 'atiqueahmedziad', 'type': 'User'}, {'comment_id': 475828662, 'comment_body': 'a brief description added.\r\n', 'comment_created': datetime.datetime(2020, 8, 24, 18, 57, 55, tzinfo=datetime.timezone.utc), 'commenter': 'atiqueahmedziad', 'type': 'User'}, {'comment_id': 475829760, 'comment_body': ""About how the filtering works, I have written that under `Filtering Log Entries` section.\r\n>The filters are stored in Model of the Activity Log page. A JSDoc explaining the filter object can be found here. Filters are only being changed by onFilterChanged method in Controller. Everytime a new filter is applied from View, the filter object in Model gets updated. On the View side, the log-view hides the table rows that didn't match the applied filters."", 'comment_created': datetime.datetime(2020, 8, 24, 19, 0, tzinfo=datetime.timezone.utc), 'commenter': 'atiqueahmedziad', 'type': 'User'}, {'comment_id': 475831274, 'comment_body': 'Should I remove the following part- \r\n\r\n> \r\n> - Filter logs with extension id, view type, API name, API type. Whenever a new unknown identity is found in new logs, that is being added as a checkbox (checked by default) in the **View**.\r\n>  - These filtering options use the [`filter-option`](https://github.com/mozilla/extension-activity-monitor/tree/master/src/lib/web-component/filter-option) web component.\r\n> - Filter logs with substring.\r\n>  - It uses the [`filter-keyword`](https://github.com/mozilla/extension-activity-monitor/tree/master/src/lib/web-component/filter-keyword) web component.\r\n> - Filter logs with range of timestamp. It is implemented with the help of ""context menu"" in `log-view`.\r\n>  - It uses the [`filter-timestamp`](https://github.com/mozilla/extension-activity-monitor/tree/master/src/lib/web-component/filter-timestamp) web component.\r\n> - Filter logs with tab id.\r\n>  - When Activity Log page is opened through devtools panel, logs will be filtered by that tab\'s id.', 'comment_created': datetime.datetime(2020, 8, 24, 19, 2, 55, tzinfo=datetime.timezone.utc), 'commenter': 'atiqueahmedziad', 'type': 'User'}, {'comment_id': 476453574, 'comment_body': ""Replace with\r\n\r\n> The Extension Activity Monitor is composed of a backend responsible for the collection and storage of the activity logs (in the background page), and a frontend to allow the user to manage the log collection and view the logs (browserAction popup and an extension tab/devtools panel).\r\n\r\nIt's similar to what you've written, except the high-level roles of the individual components are more clear."", 'comment_created': datetime.datetime(2020, 8, 25, 13, 36, 22, tzinfo=datetime.timezone.utc), 'commenter': 'Rob--W', 'type': 'User'}, {'comment_id': 476454075, 'comment_body': 'Move to Live logging section.', 'comment_created': datetime.datetime(2020, 8, 25, 13, 37, 5, tzinfo=datetime.timezone.utc), 'commenter': 'Rob--W', 'type': 'User'}, {'comment_id': 476454494, 'comment_body': 'Rename to `BrowserAction Popup Page` (to avoid confusion about window popups).', 'comment_created': datetime.datetime(2020, 8, 25, 13, 37, 39, tzinfo=datetime.timezone.utc), 'commenter': 'Rob--W', 'type': 'User'}, {'comment_id': 476455151, 'comment_body': '""one part of the frontend"" isn\'t that useful of a descriptor. I suggest to start the explanation with this:\r\n\r\n> The browserAction popup is a control panel to ...', 'comment_created': datetime.datetime(2020, 8, 25, 13, 38, 37, tzinfo=datetime.timezone.utc), 'commenter': 'Rob--W', 'type': 'User'}, {'comment_id': 476455955, 'comment_body': 'Replace ""Some Important Components"" with ""The Extension Pages"", and remove `(Extension Page)` from some subsections below.', 'comment_created': datetime.datetime(2020, 8, 25, 13, 39, 45, tzinfo=datetime.timezone.utc), 'commenter': 'Rob--W', 'type': 'User'}, {'comment_id': 476457037, 'comment_body': 'Replace first sentence with\r\n\r\n> The Activity Log page is the frontend tasked with rendering the log information from the backend.\r\n\r\nand put ""the"" before ""table view"".', 'comment_created': datetime.datetime(2020, 8, 25, 13, 41, 13, tzinfo=datetime.timezone.utc), 'commenter': 'Rob--W', 'type': 'User'}, {'comment_id': 476457349, 'comment_body': 'Merge this with the ""Collecting Logs"" section.', 'comment_created': datetime.datetime(2020, 8, 25, 13, 41, 37, tzinfo=datetime.timezone.utc), 'commenter': 'Rob--W', 'type': 'User'}, {'comment_id': 476460497, 'comment_body': 'Remove ""The background page ....  automatically""  from this section and make it a part of ""Live logging"".\r\n\r\nThe text to move can be shortened to:\r\n\r\n> The backend subscribes to the `browser.activityLog.onExtensionActivity` API event to receive objects that describe the activity of the monitored extensions. While the monitor is active, any newly installed extension will be monitored automatically. ', 'comment_created': datetime.datetime(2020, 8, 25, 13, 45, 58, tzinfo=datetime.timezone.utc), 'commenter': 'Rob--W', 'type': 'User'}, {'comment_id': 476461052, 'comment_body': 'The current sections are quite verbose. Keep it short. Something short in the following format would be sufficient:\r\n\r\n> Live logs can be saved by exporting the collected logs as JSON, via … . \r\n> Previously saved logs can be loaded via … , which … . *(explanation that should clarify that the loaded data is rendered instead of live logs)*\r\n', 'comment_created': datetime.datetime(2020, 8, 25, 13, 46, 44, tzinfo=datetime.timezone.utc), 'commenter': 'Rob--W', 'type': 'User'}, {'comment_id': 476461886, 'comment_body': 'This thing about the tabId looks out of place here in ""Loading / saving logs"". Remove it. It\'s mentioned later in filtering log entries anyway.', 'comment_created': datetime.datetime(2020, 8, 25, 13, 47, 47, tzinfo=datetime.timezone.utc), 'commenter': 'Rob--W', 'type': 'User'}, {'comment_id': 476462266, 'comment_body': 'Remove ""While filters are ..."", as the next section already explains it.\r\nYou could replace the whole paragraph with this:\r\n\r\n> The logs are rendered using the [`log-view web`](https://github.com/mozilla/extension-activity-monitor/blob/master/src/lib/web-component/log-view/) component. Any new log that doesn\'t match the filters will be hidden. ', 'comment_created': datetime.datetime(2020, 8, 25, 13, 48, 19, tzinfo=datetime.timezone.utc), 'commenter': 'Rob--W', 'type': 'User'}, {'comment_id': 476465536, 'comment_body': ""The content of this section looks generally good, but the readability can be improved by re-ordering and rephrasing some parts. See below, you can copy it and edit the part that needs to be filled in. Note in particular that I am starting with the global explanation before going in the individual details.\r\n\r\n> Individual log items can be hidden by user-defined filters. These filters are [stored](https://github.com/mozilla/extension-activity-monitor/blob/68d51940f1db397a0972658622bbdd39041436a7/src/lib/ext-activitylog.js#L6-L14) in the Model of the Activity Log page. A JSDoc explaining the filter object can be found [here](https://github.com/mozilla/extension-activity-monitor/blob/68d51940f1db397a0972658622bbdd39041436a7/src/lib/ext-activitylog.js#L21-L38). The model is updated when the controller is notified of filter changes via [`onFilterChanged`](https://github.com/mozilla/extension-activity-monitor/blob/68d51940f1db397a0972658622bbdd39041436a7/src/lib/ext-activitylog.js#L338-L347). Ultimately, [the log-view hides](https://github.com/mozilla/extension-activity-monitor/blob/68d51940f1db397a0972658622bbdd39041436a7/src/lib/web-component/log-view/log-view-element.js#L28-L34) the table rows that didn't match the applied filters. The filters can be changed by the user via the following UI components:\r\n> * [filter-option](https://github.com/mozilla/extension-activity-monitor/tree/master/src/lib/web-component/filter-option) provides the UI to filter by individual properties of log entries (such as extension id, view type, API name, API type). The available filter values are derived from the logs collected so far. During live logging, new unknown filter values may appear and be appended to the filter UI.\r\n>* (similarly for filter-keyword, filter-timestamp)\r\n>* (The “context menu” part from filter-timestamp can be removed; it’s just an implementation detail that is apparent from reading the source code)\r\n>\r\n> When Activity Log page is opened through devtools panel, logs will be filtered by that tab's id. This filter cannot be changed through the UI.\r\n"", 'comment_created': datetime.datetime(2020, 8, 25, 13, 52, 34, tzinfo=datetime.timezone.utc), 'commenter': 'Rob--W', 'type': 'User'}, {'comment_id': 476680925, 'comment_body': 'done :-)', 'comment_created': datetime.datetime(2020, 8, 25, 19, 18, 7, tzinfo=datetime.timezone.utc), 'commenter': 'atiqueahmedziad', 'type': 'User'}, {'comment_id': 476680984, 'comment_body': 'Moved.', 'comment_created': datetime.datetime(2020, 8, 25, 19, 18, 14, tzinfo=datetime.timezone.utc), 'commenter': 'atiqueahmedziad', 'type': 'User'}, {'comment_id': 476681085, 'comment_body': ""it's done :-)"", 'comment_created': datetime.datetime(2020, 8, 25, 19, 18, 25, tzinfo=datetime.timezone.utc), 'commenter': 'atiqueahmedziad', 'type': 'User'}, {'comment_id': 476681163, 'comment_body': 'Thanks, updated.', 'comment_created': datetime.datetime(2020, 8, 25, 19, 18, 33, tzinfo=datetime.timezone.utc), 'commenter': 'atiqueahmedziad', 'type': 'User'}, {'comment_id': 476681226, 'comment_body': 'Done', 'comment_created': datetime.datetime(2020, 8, 25, 19, 18, 40, tzinfo=datetime.timezone.utc), 'commenter': 'atiqueahmedziad', 'type': 'User'}, {'comment_id': 476681333, 'comment_body': 'done with merging :-)', 'comment_created': datetime.datetime(2020, 8, 25, 19, 18, 51, tzinfo=datetime.timezone.utc), 'commenter': 'atiqueahmedziad', 'type': 'User'}, {'comment_id': 476681500, 'comment_body': 'done :-) Thanks', 'comment_created': datetime.datetime(2020, 8, 25, 19, 19, 8, tzinfo=datetime.timezone.utc), 'commenter': 'atiqueahmedziad', 'type': 'User'}, {'comment_id': 476681605, 'comment_body': 'updated the description :-)', 'comment_created': datetime.datetime(2020, 8, 25, 19, 19, 20, tzinfo=datetime.timezone.utc), 'commenter': 'atiqueahmedziad', 'type': 'User'}, {'comment_id': 476681902, 'comment_body': 'Removed :-)', 'comment_created': datetime.datetime(2020, 8, 25, 19, 19, 53, tzinfo=datetime.timezone.utc), 'commenter': 'atiqueahmedziad', 'type': 'User'}, {'comment_id': 476682029, 'comment_body': 'Removed :-)', 'comment_created': datetime.datetime(2020, 8, 25, 19, 20, 5, tzinfo=datetime.timezone.utc), 'commenter': 'atiqueahmedziad', 'type': 'User'}, {'comment_id': 476682151, 'comment_body': 'updated this :-)', 'comment_created': datetime.datetime(2020, 8, 25, 19, 20, 17, tzinfo=datetime.timezone.utc), 'commenter': 'atiqueahmedziad', 'type': 'User'}, {'comment_id': 477349007, 'comment_body': 'These two links doesn\'t worked because of ""-extension-page"" in the URLs\' reference fragments.', 'comment_created': datetime.datetime(2020, 8, 26, 14, 33, 10, tzinfo=datetime.timezone.utc), 'commenter': 'Rob--W', 'type': 'User'}, {'comment_id': 477358405, 'comment_body': 'Replace whole section with:\r\n\r\n> The background page acts as the backend of the extension, and the core of it is implemented in [`ext-monitor.js`](https://github.com/mozilla/extension-activity-monitor/blob/master/src/lib/ext-monitor.js). This part is responsible for keeping track of activity logs and monitored extensions on behalf of the frontend. The background subscribes to the `runtime.onMessage` event to listen for messages from the Popup and Activity Log pages.', 'comment_created': datetime.datetime(2020, 8, 26, 14, 45, 39, tzinfo=datetime.timezone.utc), 'commenter': 'Rob--W', 'type': 'User'}, {'comment_id': 477360168, 'comment_body': 'Replace\r\n\r\n> to trigger ""start monitoring"" and ""stop monitoring"" extensions and helps to access the Activity Log page.\r\n\r\nwith\r\n\r\n> to trigger ""start monitoring"" and ""stop monitoring"" (of extensions) and opening the Activity Log page.\r\n\r\nThe last sentence (""It mostly ..."") can be removed.', 'comment_created': datetime.datetime(2020, 8, 26, 14, 47, 53, tzinfo=datetime.timezone.utc), 'commenter': 'Rob--W', 'type': 'User'}, {'comment_id': 477362337, 'comment_body': '""does store"" -> ""stores""\r\n""does also provide"" -> ""also provides""\r\n', 'comment_created': datetime.datetime(2020, 8, 26, 14, 50, 38, tzinfo=datetime.timezone.utc), 'commenter': 'Rob--W', 'type': 'User'}, {'comment_id': 477362432, 'comment_body': '""componenrs"" -> ""components""', 'comment_created': datetime.datetime(2020, 8, 26, 14, 50, 47, tzinfo=datetime.timezone.utc), 'commenter': 'Rob--W', 'type': 'User'}, {'comment_id': 477365319, 'comment_body': '""makes sure that the data flow in Model and View are synchronized."" ->\r\n""interacts with the backend and ensures that the Model and View are synchronized.""\r\n\r\nThe rest of the sentences can be removed, since they are either mentioned elsewhere in this doc, or apparent from the source code.', 'comment_created': datetime.datetime(2020, 8, 26, 14, 54, 39, tzinfo=datetime.timezone.utc), 'commenter': 'Rob--W', 'type': 'User'}, {'comment_id': 477369080, 'comment_body': '""popup"" -> ""the popup""\r\n""background"" -> ""backend"" or ""background page"" (also elsewhere in this section).\r\n""render"" -> ""renders""', 'comment_created': datetime.datetime(2020, 8, 26, 14, 59, 34, tzinfo=datetime.timezone.utc), 'commenter': 'Rob--W', 'type': 'User'}, {'comment_id': 477371239, 'comment_body': '> The extension uses `runtime.sendMessage` API to communicate between background and Activity Log page.\r\n\r\n^  Remove this. It is already mentioned at the start of this document.\r\n\r\n> The [`sendLogs`](https://github.com/mozilla/extension-activity-monitor/blob/68d51940f1db397a0972658622bbdd39041436a7/src/lib/ext-monitor.js#L25-L33) method is responsible for sending logs to Activity Log page.\r\n\r\nReplace with: \r\n\r\n> Activity logs are sent from the backend via the [`sendLogs`](https://github.com/mozilla/extension-activity-monitor/blob/68d51940f1db397a0972658622bbdd39041436a7/src/lib/ext-monitor.js#L25-L33) method.', 'comment_created': datetime.datetime(2020, 8, 26, 15, 2, 27, tzinfo=datetime.timezone.utc), 'commenter': 'Rob--W', 'type': 'User'}, {'comment_id': 477372060, 'comment_body': '""remain alive"" -> ""are kept""\r\n\r\n""(frontend part)"" -> remove.', 'comment_created': datetime.datetime(2020, 8, 26, 15, 3, 35, tzinfo=datetime.timezone.utc), 'commenter': 'Rob--W', 'type': 'User'}, {'comment_id': 477373696, 'comment_body': 'Remove comma after ""Note that"".', 'comment_created': datetime.datetime(2020, 8, 26, 15, 5, 57, tzinfo=datetime.timezone.utc), 'commenter': 'Rob--W', 'type': 'User'}, {'comment_id': 477374184, 'comment_body': '""When Activity Log page"" -> ""When the Activity Log page""\r\n""through devtools panel"" -> ""through the devtools panel""', 'comment_created': datetime.datetime(2020, 8, 26, 15, 6, 36, tzinfo=datetime.timezone.utc), 'commenter': 'Rob--W', 'type': 'User'}, {'comment_id': 477374913, 'comment_body': 'Remove this subsection heading.', 'comment_created': datetime.datetime(2020, 8, 26, 15, 7, 34, tzinfo=datetime.timezone.utc), 'commenter': 'Rob--W', 'type': 'User'}, {'comment_id': 477377086, 'comment_body': '> Unit test is done with [Jest Framework](https://jestjs.io/) in this project.\r\nshould be replaced \r\n\r\nReplace the intro with the following (partially merged with the next section).\r\n\r\n> Tests are stored in the [tests directory](https://github.com/mozilla/extension-activity-monitor/tree/master/tests) and run with the [Jest framework](https://jestjs.io/).', 'comment_created': datetime.datetime(2020, 8, 26, 15, 10, 32, tzinfo=datetime.timezone.utc), 'commenter': 'Rob--W', 'type': 'User'}, {'comment_id': 477377382, 'comment_body': 'Remove this paragraph. My suggested phrase above already captures the main message.', 'comment_created': datetime.datetime(2020, 8, 26, 15, 10, 55, tzinfo=datetime.timezone.utc), 'commenter': 'Rob--W', 'type': 'User'}, {'comment_id': 477377574, 'comment_body': '""test suit"" -> ""test file"".', 'comment_created': datetime.datetime(2020, 8, 26, 15, 11, 9, tzinfo=datetime.timezone.utc), 'commenter': 'Rob--W', 'type': 'User'}, {'comment_id': 477378111, 'comment_body': '""continously"" -> ""on file changes during development""', 'comment_created': datetime.datetime(2020, 8, 26, 15, 11, 52, tzinfo=datetime.timezone.utc), 'commenter': 'Rob--W', 'type': 'User'}, {'comment_id': 477431663, 'comment_body': 'fixed :-)', 'comment_created': datetime.datetime(2020, 8, 26, 16, 29, 17, tzinfo=datetime.timezone.utc), 'commenter': 'atiqueahmedziad', 'type': 'User'}, {'comment_id': 477431702, 'comment_body': 'replaced :-)', 'comment_created': datetime.datetime(2020, 8, 26, 16, 29, 22, tzinfo=datetime.timezone.utc), 'commenter': 'atiqueahmedziad', 'type': 'User'}, {'comment_id': 477431734, 'comment_body': 'replaced :-)', 'comment_created': datetime.datetime(2020, 8, 26, 16, 29, 25, tzinfo=datetime.timezone.utc), 'commenter': 'atiqueahmedziad', 'type': 'User'}, {'comment_id': 477431794, 'comment_body': 'fixed :-)', 'comment_created': datetime.datetime(2020, 8, 26, 16, 29, 29, tzinfo=datetime.timezone.utc), 'commenter': 'atiqueahmedziad', 'type': 'User'}, {'comment_id': 477431907, 'comment_body': ""sorry, didn't catch my eye. Fixed :-)"", 'comment_created': datetime.datetime(2020, 8, 26, 16, 29, 39, tzinfo=datetime.timezone.utc), 'commenter': 'atiqueahmedziad', 'type': 'User'}, {'comment_id': 477432633, 'comment_body': 'Fixed :-)', 'comment_created': datetime.datetime(2020, 8, 26, 16, 30, 45, tzinfo=datetime.timezone.utc), 'commenter': 'atiqueahmedziad', 'type': 'User'}, {'comment_id': 477432697, 'comment_body': 'done :-)', 'comment_created': datetime.datetime(2020, 8, 26, 16, 30, 51, tzinfo=datetime.timezone.utc), 'commenter': 'atiqueahmedziad', 'type': 'User'}, {'comment_id': 477433794, 'comment_body': 'fixed :-) ', 'comment_created': datetime.datetime(2020, 8, 26, 16, 32, 35, tzinfo=datetime.timezone.utc), 'commenter': 'atiqueahmedziad', 'type': 'User'}, {'comment_id': 477434356, 'comment_body': 'done :-)', 'comment_created': datetime.datetime(2020, 8, 26, 16, 33, 31, tzinfo=datetime.timezone.utc), 'commenter': 'atiqueahmedziad', 'type': 'User'}, {'comment_id': 477434717, 'comment_body': 'fixed :-)', 'comment_created': datetime.datetime(2020, 8, 26, 16, 34, 8, tzinfo=datetime.timezone.utc), 'commenter': 'atiqueahmedziad', 'type': 'User'}, {'comment_id': 477434762, 'comment_body': 'done :-)', 'comment_created': datetime.datetime(2020, 8, 26, 16, 34, 13, tzinfo=datetime.timezone.utc), 'commenter': 'atiqueahmedziad', 'type': 'User'}, {'comment_id': 477434874, 'comment_body': 'done :-)', 'comment_created': datetime.datetime(2020, 8, 26, 16, 34, 25, tzinfo=datetime.timezone.utc), 'commenter': 'atiqueahmedziad', 'type': 'User'}, {'comment_id': 477434979, 'comment_body': 'done :-)', 'comment_created': datetime.datetime(2020, 8, 26, 16, 34, 36, tzinfo=datetime.timezone.utc), 'commenter': 'atiqueahmedziad', 'type': 'User'}, {'comment_id': 477435023, 'comment_body': 'done :-)', 'comment_created': datetime.datetime(2020, 8, 26, 16, 34, 40, tzinfo=datetime.timezone.utc), 'commenter': 'atiqueahmedziad', 'type': 'User'}, {'comment_id': 477435059, 'comment_body': 'fixed :-)', 'comment_created': datetime.datetime(2020, 8, 26, 16, 34, 43, tzinfo=datetime.timezone.utc), 'commenter': 'atiqueahmedziad', 'type': 'User'}, {'comment_id': 477435112, 'comment_body': 'done :-)', 'comment_created': datetime.datetime(2020, 8, 26, 16, 34, 47, tzinfo=datetime.timezone.utc), 'commenter': 'atiqueahmedziad', 'type': 'User'}]","[{'commit_sha': 'ee40ebe61f9d8a6cec4a61b564dd4e221b99b16e', 'committer_username': 'atiqueahmedziad', 'committer_name': 'Atique Ahmed Ziad', 'committer_email': None, 'commit_date': datetime.datetime(2014, 8, 5, 15, 37, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dbc14833bb88029bda5cdf9bce6d077e2df0c9b2', 'committer_username': 'atiqueahmedziad', 'committer_name': 'Atique Ahmed Ziad', 'committer_email': None, 'commit_date': datetime.datetime(2014, 8, 5, 15, 37, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cc772259aa81346ce137eef663610fc9eee1b065', 'committer_username': 'atiqueahmedziad', 'committer_name': 'Atique Ahmed Ziad', 'committer_email': None, 'commit_date': datetime.datetime(2014, 8, 5, 15, 37, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1d48d713238a03be10d39b43261d35b7907c53dd', 'committer_username': 'atiqueahmedziad', 'committer_name': 'Atique Ahmed Ziad', 'committer_email': None, 'commit_date': datetime.datetime(2014, 8, 5, 15, 37, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8bfc60afbbeb82795417970fe373e48e8c4a6354', 'committer_username': 'atiqueahmedziad', 'committer_name': 'Atique Ahmed Ziad', 'committer_email': None, 'commit_date': datetime.datetime(2014, 8, 5, 15, 37, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ebf52b83eded55efa65262903fb4d22718647fae', 'committer_username': 'atiqueahmedziad', 'committer_name': 'Atique Ahmed Ziad', 'committer_email': None, 'commit_date': datetime.datetime(2014, 8, 5, 15, 37, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a53e8edd657fc87a9edf86516e940db2d25d87ab', 'committer_username': 'atiqueahmedziad', 'committer_name': 'Atique Ahmed Ziad', 'committer_email': None, 'commit_date': datetime.datetime(2014, 8, 5, 15, 37, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f1c7e82006214d31b3afc468b258d89a31ff27da', 'committer_username': 'atiqueahmedziad', 'committer_name': 'Atique Ahmed Ziad', 'committer_email': None, 'commit_date': datetime.datetime(2014, 8, 5, 15, 37, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '17b8249d8cb2d80ead490ff36c0652b4c933e358', 'committer_username': 'atiqueahmedziad', 'committer_name': 'Atique Ahmed Ziad', 'committer_email': None, 'commit_date': datetime.datetime(2014, 8, 5, 15, 37, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '96b9013138ac991bd9efef8767b64c49cc2b1c6c', 'committer_username': 'atiqueahmedziad', 'committer_name': 'Atique Ahmed Ziad', 'committer_email': None, 'commit_date': datetime.datetime(2014, 8, 5, 15, 37, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '183bceb106a6f9b49ce1cd5acd0631b2a0f3be0c', 'committer_username': 'atiqueahmedziad', 'committer_name': 'Atique Ahmed Ziad', 'committer_email': None, 'commit_date': datetime.datetime(2014, 8, 5, 15, 37, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2063ff68c5d057018631b24d669b8d372b2e3e8e', 'committer_username': 'atiqueahmedziad', 'committer_name': 'Atique Ahmed Ziad', 'committer_email': None, 'commit_date': datetime.datetime(2014, 8, 5, 15, 37, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c89684bf4a52268f2b957ccd43ea55ac36a0fd15', 'committer_username': 'atiqueahmedziad', 'committer_name': 'Atique Ahmed Ziad', 'committer_email': None, 'commit_date': datetime.datetime(2014, 8, 5, 15, 37, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '52b6cac8c06c04071509de0af34c37e13635b705', 'committer_username': 'atiqueahmedziad', 'committer_name': 'Atique Ahmed Ziad', 'committer_email': None, 'commit_date': datetime.datetime(2014, 8, 5, 15, 37, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7f3f455ff577d457ca23502de832e613b58d1a55', 'committer_username': 'atiqueahmedziad', 'committer_name': 'Atique Ahmed Ziad', 'committer_email': None, 'commit_date': datetime.datetime(2014, 8, 5, 15, 37, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fab249fdf213ff9934229861c8fee87e2555170e', 'committer_username': 'atiqueahmedziad', 'committer_name': 'Atique Ahmed Ziad', 'committer_email': None, 'commit_date': datetime.datetime(2014, 8, 5, 15, 37, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5074f55c7dbe089562fc27b43b8d4dd4fc191248', 'committer_username': 'atiqueahmedziad', 'committer_name': 'Atique Ahmed Ziad', 'committer_email': None, 'commit_date': datetime.datetime(2014, 8, 5, 15, 37, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bf655eadce781e1f6f7626e8da71adccd638e0b0', 'committer_username': 'atiqueahmedziad', 'committer_name': 'Atique Ahmed Ziad', 'committer_email': None, 'commit_date': datetime.datetime(2014, 8, 5, 15, 37, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f08ecc1c055d6e2e6d348c6e00b50ad2551da145', 'committer_username': 'atiqueahmedziad', 'committer_name': 'Atique Ahmed Ziad', 'committer_email': None, 'commit_date': datetime.datetime(2014, 8, 5, 15, 37, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b56c62299ebff101ed5f7916522557f1f2080661', 'committer_username': 'atiqueahmedziad', 'committer_name': 'Atique Ahmed Ziad', 'committer_email': None, 'commit_date': datetime.datetime(2014, 8, 5, 15, 37, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'db066823f1450ff7011e652057d651d0c2841d1c', 'committer_username': 'atiqueahmedziad', 'committer_name': 'Atique Ahmed Ziad', 'committer_email': None, 'commit_date': datetime.datetime(2014, 8, 5, 15, 37, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd3d9cb5dc22ea0d37f6746e80c27e64c6b9f5c58', 'committer_username': 'atiqueahmedziad', 'committer_name': 'Atique Ahmed Ziad', 'committer_email': None, 'commit_date': datetime.datetime(2014, 8, 5, 15, 37, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '316b708f41c292592a33acd3dc309247030cb6bf', 'committer_username': 'atiqueahmedziad', 'committer_name': 'Atique Ahmed Ziad', 'committer_email': None, 'commit_date': datetime.datetime(2014, 8, 5, 15, 37, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0f41eb219a4431ccc4acc4cc9e1a3c89b4eb0c09', 'committer_username': 'atiqueahmedziad', 'committer_name': 'Atique Ahmed Ziad', 'committer_email': None, 'commit_date': datetime.datetime(2014, 8, 5, 15, 37, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1d19507db463fb83c1485edaf38abe0199e835f2', 'committer_username': 'atiqueahmedziad', 'committer_name': 'Atique Ahmed Ziad', 'committer_email': None, 'commit_date': datetime.datetime(2014, 8, 5, 15, 37, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7f829287cfcf992818150b9083d78ae80cce16a8', 'committer_username': 'atiqueahmedziad', 'committer_name': 'Atique Ahmed Ziad', 'committer_email': None, 'commit_date': datetime.datetime(2014, 8, 5, 15, 37, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '41696478cfdb360d4dffa65ec7a4808b97863e30', 'committer_username': 'atiqueahmedziad', 'committer_name': 'Atique Ahmed Ziad', 'committer_email': None, 'commit_date': datetime.datetime(2014, 8, 5, 15, 37, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1ce133753b2eea509147b9939e1fa0dfe49ca750', 'committer_username': 'atiqueahmedziad', 'committer_name': 'Atique Ahmed Ziad', 'committer_email': None, 'commit_date': datetime.datetime(2014, 8, 5, 15, 37, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4624d045605ffdbabffe29de27b5940aa3020c4b', 'committer_username': 'atiqueahmedziad', 'committer_name': 'Atique Ahmed Ziad', 'committer_email': None, 'commit_date': datetime.datetime(2014, 8, 5, 15, 37, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4fa3cb5ddb65caef3545cb39939d005b0946bc72', 'committer_username': 'atiqueahmedziad', 'committer_name': 'Atique Ahmed Ziad', 'committer_email': None, 'commit_date': datetime.datetime(2014, 8, 5, 15, 37, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd84a30168f30930312b9eed7944ebb08c6e03568', 'committer_username': 'atiqueahmedziad', 'committer_name': 'Atique Ahmed Ziad', 'committer_email': None, 'commit_date': datetime.datetime(2014, 8, 5, 15, 37, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6e5c1a1360f9ecc1afddb9ce1d60770aeb6a8545', 'committer_username': 'atiqueahmedziad', 'committer_name': 'Atique Ahmed Ziad', 'committer_email': None, 'commit_date': datetime.datetime(2014, 8, 5, 15, 37, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4665ccefce78a02ae3fa5a5fe3acea1156428ee5', 'committer_username': 'atiqueahmedziad', 'committer_name': 'Atique Ahmed Ziad', 'committer_email': None, 'commit_date': datetime.datetime(2014, 8, 5, 15, 37, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '950c8ba809c64184c8325f829ecb11d21e4587e1', 'committer_username': 'atiqueahmedziad', 'committer_name': 'Atique Ahmed Ziad', 'committer_email': None, 'commit_date': datetime.datetime(2014, 8, 5, 15, 37, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f793cb4d2bc55fef4fffd69a2414e0268280eb1e', 'committer_username': 'atiqueahmedziad', 'committer_name': 'Atique Ahmed Ziad', 'committer_email': None, 'commit_date': datetime.datetime(2014, 8, 5, 15, 37, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c2506906da729b94eb944a3f0a6f2b2c8bad7d85', 'committer_username': 'atiqueahmedziad', 'committer_name': 'Atique Ahmed Ziad', 'committer_email': None, 'commit_date': datetime.datetime(2014, 8, 5, 15, 37, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2b7fbaea92f9eebdf1200566e0712d43faa7d1c5', 'committer_username': 'atiqueahmedziad', 'committer_name': 'Atique Ahmed Ziad', 'committer_email': None, 'commit_date': datetime.datetime(2014, 8, 5, 15, 37, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '68468057ea45ad3a49220aa3189af3ebf035d294', 'committer_username': 'atiqueahmedziad', 'committer_name': 'Atique Ahmed Ziad', 'committer_email': None, 'commit_date': datetime.datetime(2014, 8, 5, 15, 37, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a360e2475f0b31eeb404fc0e1400d83ef62c1c0e', 'committer_username': 'atiqueahmedziad', 'committer_name': 'Atique Ahmed Ziad', 'committer_email': None, 'commit_date': datetime.datetime(2014, 8, 5, 15, 37, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bb9f94a14ff39af0f9781748a7184a2c276d02a0', 'committer_username': 'atiqueahmedziad', 'committer_name': 'Atique Ahmed Ziad', 'committer_email': None, 'commit_date': datetime.datetime(2014, 8, 5, 15, 37, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a8559febff3ab178508c61ebd88ef673952ebe04', 'committer_username': 'atiqueahmedziad', 'committer_name': 'Atique Ahmed Ziad', 'committer_email': None, 'commit_date': datetime.datetime(2014, 8, 5, 15, 37, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3745fb52df069720937deae7b604b97026cab65c', 'committer_username': 'atiqueahmedziad', 'committer_name': 'Atique Ahmed Ziad', 'committer_email': None, 'commit_date': datetime.datetime(2014, 8, 5, 15, 37, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'db341f9df3bc6bbb0e2ae5fcf6cdbc7233f3efba', 'committer_username': 'atiqueahmedziad', 'committer_name': 'Atique Ahmed Ziad', 'committer_email': None, 'commit_date': datetime.datetime(2014, 8, 5, 15, 37, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1b3e9c39b57c45b0c41baf55aa8ba9522429626e', 'committer_username': 'atiqueahmedziad', 'committer_name': 'Atique Ahmed Ziad', 'committer_email': None, 'commit_date': datetime.datetime(2014, 8, 5, 15, 37, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cb5451f4f592d9b26eee4190b1e8de8060b80b45', 'committer_username': 'atiqueahmedziad', 'committer_name': 'Atique Ahmed Ziad', 'committer_email': None, 'commit_date': datetime.datetime(2014, 8, 5, 15, 37, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '10f8bf37061bd19370eb8699e0a5968813d821fd', 'committer_username': 'atiqueahmedziad', 'committer_name': 'Atique Ahmed Ziad', 'committer_email': None, 'commit_date': datetime.datetime(2014, 8, 5, 15, 37, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0b35b9fd00821451f3ae72ee3c5ee6cbb6d055bc', 'committer_username': 'atiqueahmedziad', 'committer_name': 'Atique Ahmed Ziad', 'committer_email': None, 'commit_date': datetime.datetime(2014, 8, 5, 15, 37, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'de402fd70a4d1f7b9af2561bf6ad3404b43cd6ba', 'committer_username': 'atiqueahmedziad', 'committer_name': 'Atique Ahmed Ziad', 'committer_email': None, 'commit_date': datetime.datetime(2014, 8, 5, 15, 37, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2a6fa8a565a77fed28d6f3ac1cab337302815b17', 'committer_username': 'atiqueahmedziad', 'committer_name': 'Atique Ahmed Ziad', 'committer_email': None, 'commit_date': datetime.datetime(2014, 8, 5, 15, 37, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b1ee5f690633a4e8f06103cf6bddeaa2e500b72d', 'committer_username': 'atiqueahmedziad', 'committer_name': 'Atique Ahmed Ziad', 'committer_email': None, 'commit_date': datetime.datetime(2014, 8, 5, 15, 37, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a44d3e8914985aa5d881c228b584ffb2bce89aec', 'committer_username': 'atiqueahmedziad', 'committer_name': 'Atique Ahmed Ziad', 'committer_email': None, 'commit_date': datetime.datetime(2014, 8, 5, 15, 37, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '56ecf7bc37bc288e83570f395ecce8b3d746900b', 'committer_username': 'atiqueahmedziad', 'committer_name': 'Atique Ahmed Ziad', 'committer_email': None, 'commit_date': datetime.datetime(2014, 8, 5, 15, 37, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6860b2b6b1de6ec55e530576f85a1e7a7f59f201', 'committer_username': 'atiqueahmedziad', 'committer_name': 'Atique Ahmed Ziad', 'committer_email': None, 'commit_date': datetime.datetime(2014, 8, 5, 15, 37, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3a194d91dfcc127c2cf832e4ea8ae1dae2e45497', 'committer_username': 'atiqueahmedziad', 'committer_name': 'Atique Ahmed Ziad', 'committer_email': None, 'commit_date': datetime.datetime(2014, 8, 5, 15, 37, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3c8c2f99b367be989f93beda095f2676ca90e67f', 'committer_username': 'atiqueahmedziad', 'committer_name': 'Atique Ahmed Ziad', 'committer_email': None, 'commit_date': datetime.datetime(2014, 8, 5, 15, 37, 42, tzinfo=datetime.timezone.utc)}]",Atique Ahmed Ziad,8364578,,User,,72,,3,42

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
263003692,extension-activity-monitor,mozilla/extension-activity-monitor,JavaScript,14,22,11,8,321,29,17,16,"[{'id': 1067424680, 'number': 336, 'closed': None, 'created': datetime.datetime(2022, 9, 26, 16, 35, 24, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 424, 'deletions': 418, 'state': 'open'}, {'id': 1067343273, 'number': 335, 'closed': None, 'created': datetime.datetime(2022, 9, 26, 15, 40, 37, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 417, 'deletions': 415, 'state': 'open'}, {'id': 1057936075, 'number': 332, 'closed': None, 'created': datetime.datetime(2022, 9, 15, 22, 11, 7, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 160, 'deletions': 164, 'state': 'open'}, {'id': 487180548, 'number': 54, 'closed': datetime.datetime(2020, 9, 15, 14, 58, 41, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 9, 15, 9, 56, 40, tzinfo=datetime.timezone.utc), 'time_taken': 18121.0, 'time_delta': '5:02:01', 'additions': 29, 'deletions': 5, 'state': 'closed'}, {'id': 484946973, 'number': 53, 'closed': datetime.datetime(2020, 9, 18, 9, 16, 19, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 9, 11, 11, 7, tzinfo=datetime.timezone.utc), 'time_taken': 598159.0, 'time_delta': '6 days, 22:09:19', 'additions': 3, 'deletions': 3, 'state': 'closed'}, {'id': 482929669, 'number': 52, 'closed': datetime.datetime(2020, 9, 17, 14, 8, 2, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 9, 9, 15, 32, 54, tzinfo=datetime.timezone.utc), 'time_taken': 686108.0, 'time_delta': '7 days, 22:35:08', 'additions': 723, 'deletions': 194, 'state': 'closed'}, {'id': 476203775, 'number': 51, 'closed': datetime.datetime(2022, 8, 2, 9, 56, 46, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 31, 10, 24, 16, tzinfo=datetime.timezone.utc), 'time_taken': 60564750.0, 'time_delta': '700 days, 23:32:30', 'additions': 1636, 'deletions': 407, 'state': 'closed'}, {'id': 471419593, 'number': 49, 'closed': datetime.datetime(2020, 9, 8, 9, 53, 5, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 21, 5, 54, tzinfo=datetime.timezone.utc), 'time_taken': 1569545.0, 'time_delta': '18 days, 3:59:05', 'additions': 308, 'deletions': 56, 'state': 'closed'}, {'id': 470184046, 'number': 48, 'closed': datetime.datetime(2020, 8, 21, 6, 2, 29, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 19, 13, 58, 27, tzinfo=datetime.timezone.utc), 'time_taken': 144242.0, 'time_delta': '1 day, 16:04:02', 'additions': 10, 'deletions': 3, 'state': 'closed'}, {'id': 468896593, 'number': 47, 'closed': datetime.datetime(2020, 8, 17, 16, 29, 44, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 17, 15, 15, 29, tzinfo=datetime.timezone.utc), 'time_taken': 4455.0, 'time_delta': '1:14:15', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 468883881, 'number': 46, 'closed': datetime.datetime(2020, 8, 21, 12, 48, 21, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 17, 14, 54, 17, tzinfo=datetime.timezone.utc), 'time_taken': 338044.0, 'time_delta': '3 days, 21:54:04', 'additions': 87, 'deletions': 9, 'state': 'closed'}, {'id': 467911094, 'number': 44, 'closed': datetime.datetime(2020, 8, 27, 11, 34, 22, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 14, 10, 39, 32, tzinfo=datetime.timezone.utc), 'time_taken': 1126490.0, 'time_delta': '13 days, 0:54:50', 'additions': 190, 'deletions': 0, 'state': 'closed'}, {'id': 465198658, 'number': 40, 'closed': datetime.datetime(2020, 8, 13, 12, 41, 46, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 9, 20, 28, 34, tzinfo=datetime.timezone.utc), 'time_taken': 317592.0, 'time_delta': '3 days, 16:13:12', 'additions': 84, 'deletions': 24, 'state': 'closed'}, {'id': 465019676, 'number': 39, 'closed': datetime.datetime(2020, 8, 11, 12, 54, 18, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 8, 11, 11, 15, tzinfo=datetime.timezone.utc), 'time_taken': 265383.0, 'time_delta': '3 days, 1:43:03', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 465019126, 'number': 38, 'closed': datetime.datetime(2020, 8, 16, 19, 24, 22, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 8, 11, 5, 51, tzinfo=datetime.timezone.utc), 'time_taken': 721111.0, 'time_delta': '8 days, 8:18:31', 'additions': 184, 'deletions': 33, 'state': 'closed'}, {'id': 464679068, 'number': 31, 'closed': datetime.datetime(2020, 8, 17, 13, 31, 31, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 7, 15, 53, 52, tzinfo=datetime.timezone.utc), 'time_taken': 855459.0, 'time_delta': '9 days, 21:37:39', 'additions': 275, 'deletions': 174, 'state': 'closed'}, {'id': 461827236, 'number': 28, 'closed': datetime.datetime(2020, 8, 11, 9, 36, 38, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 2, 16, 15, 8, tzinfo=datetime.timezone.utc), 'time_taken': 753690.0, 'time_delta': '8 days, 17:21:30', 'additions': 131, 'deletions': 31, 'state': 'closed'}, {'id': 456763550, 'number': 17, 'closed': datetime.datetime(2020, 8, 7, 16, 28, 22, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 26, 15, 14, 46, tzinfo=datetime.timezone.utc), 'time_taken': 1041216.0, 'time_delta': '12 days, 1:13:36', 'additions': 262, 'deletions': 41, 'state': 'closed'}, {'id': 456500344, 'number': 16, 'closed': datetime.datetime(2020, 7, 24, 21, 40, 34, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 24, 21, 34, 38, tzinfo=datetime.timezone.utc), 'time_taken': 356.0, 'time_delta': '0:05:56', 'additions': 57, 'deletions': 0, 'state': 'closed'}, {'id': 454464535, 'number': 15, 'closed': datetime.datetime(2020, 7, 29, 13, 33, 20, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 21, 12, 33, 32, tzinfo=datetime.timezone.utc), 'time_taken': 694788.0, 'time_delta': '8 days, 0:59:48', 'additions': 12, 'deletions': 3, 'state': 'closed'}, {'id': 454432261, 'number': 14, 'closed': datetime.datetime(2020, 7, 24, 20, 23, 56, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 21, 11, 55, 20, tzinfo=datetime.timezone.utc), 'time_taken': 289716.0, 'time_delta': '3 days, 8:28:36', 'additions': 365, 'deletions': 57, 'state': 'closed'}, {'id': 454196967, 'number': 13, 'closed': datetime.datetime(2020, 8, 4, 18, 40, 42, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 21, 6, 54, 40, tzinfo=datetime.timezone.utc), 'time_taken': 1251962.0, 'time_delta': '14 days, 11:46:02', 'additions': 100, 'deletions': 39, 'state': 'closed'}, {'id': 453874964, 'number': 12, 'closed': datetime.datetime(2020, 7, 24, 20, 15, 44, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 20, 21, 56, 43, tzinfo=datetime.timezone.utc), 'time_taken': 339541.0, 'time_delta': '3 days, 22:19:01', 'additions': 49, 'deletions': 0, 'state': 'closed'}, {'id': 449098853, 'number': 10, 'closed': datetime.datetime(2020, 7, 20, 20, 32, 50, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 14, 20, 32, 9, tzinfo=datetime.timezone.utc), 'time_taken': 518441.0, 'time_delta': '6 days, 0:00:41', 'additions': 326, 'deletions': 12, 'state': 'closed'}, {'id': 446380435, 'number': 9, 'closed': datetime.datetime(2020, 7, 14, 18, 57, 6, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 8, 17, 20, 23, tzinfo=datetime.timezone.utc), 'time_taken': 524203.0, 'time_delta': '6 days, 1:36:43', 'additions': 257, 'deletions': 190, 'state': 'closed'}, {'id': 442293006, 'number': 8, 'closed': datetime.datetime(2020, 7, 2, 13, 16, 23, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 30, 21, 4, 22, tzinfo=datetime.timezone.utc), 'time_taken': 144721.0, 'time_delta': '1 day, 16:12:01', 'additions': 8, 'deletions': 1, 'state': 'closed'}, {'id': 441550626, 'number': 7, 'closed': datetime.datetime(2020, 6, 29, 18, 57, 30, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 29, 17, 26, 9, tzinfo=datetime.timezone.utc), 'time_taken': 5481.0, 'time_delta': '1:31:21', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 441316077, 'number': 6, 'closed': datetime.datetime(2020, 6, 29, 18, 30, 58, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 29, 10, 35, 48, tzinfo=datetime.timezone.utc), 'time_taken': 28510.0, 'time_delta': '7:55:10', 'additions': 3778, 'deletions': 111, 'state': 'closed'}, {'id': 441285656, 'number': 5, 'closed': datetime.datetime(2020, 6, 29, 16, 44, 14, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 29, 8, 34, 35, tzinfo=datetime.timezone.utc), 'time_taken': 29379.0, 'time_delta': '8:09:39', 'additions': 4, 'deletions': 1, 'state': 'closed'}, {'id': 434452228, 'number': 4, 'closed': datetime.datetime(2020, 7, 6, 12, 15, 4, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 15, 10, 44, 49, tzinfo=datetime.timezone.utc), 'time_taken': 1819815.0, 'time_delta': '21 days, 1:30:15', 'additions': 282, 'deletions': 4, 'state': 'closed'}, {'id': 434419760, 'number': 3, 'closed': datetime.datetime(2020, 6, 26, 17, 40, 40, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 15, 9, 47, 36, tzinfo=datetime.timezone.utc), 'time_taken': 978784.0, 'time_delta': '11 days, 7:53:04', 'additions': 833, 'deletions': 6, 'state': 'closed'}, {'id': 432603753, 'number': 2, 'closed': datetime.datetime(2020, 6, 19, 20, 1, 11, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 10, 17, 37, 1, tzinfo=datetime.timezone.utc), 'time_taken': 786250.0, 'time_delta': '9 days, 2:24:10', 'additions': 326, 'deletions': 145, 'state': 'closed'}, {'id': 431775723, 'number': 1, 'closed': datetime.datetime(2020, 6, 10, 9, 56, 1, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 9, 12, 58, 3, tzinfo=datetime.timezone.utc), 'time_taken': 75478.0, 'time_delta': '20:57:58', 'additions': 7044, 'deletions': 1, 'state': 'closed'}]"
