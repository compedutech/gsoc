pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
950717665,Implement Workflow,"Added basic directory structure and CI workflow, will add codecov in the same PR but different commit. (After a check for CI result)",True,1,https://api.github.com/repos/StingraySoftware/Stingray.jl/pulls/1,https://github.com/StingraySoftware/Stingray.jl/pull/1,closed,160,0,9,2,3,5,0,0,[],2022-05-30 09:07:02+00:00,2022-05-30 19:42:01+00:00,38099.0,10:34:59,"[{'comment_id': 885018843, 'comment_body': '```suggestion\r\n      - uses: actions/checkout@v3\r\n```', 'comment_created': datetime.datetime(2022, 5, 30, 18, 7, 16, tzinfo=datetime.timezone.utc), 'commenter': 'giordano', 'type': 'User'}, {'comment_id': 885018945, 'comment_body': '```suggestion\r\n      - uses: actions/checkout@v3\r\n```', 'comment_created': datetime.datetime(2022, 5, 30, 18, 7, 33, tzinfo=datetime.timezone.utc), 'commenter': 'giordano', 'type': 'User'}, {'comment_id': 885019084, 'comment_body': ""```suggestion\r\n          julia --color=yes --project=docs -e '\r\n```"", 'comment_created': datetime.datetime(2022, 5, 30, 18, 7, 58, tzinfo=datetime.timezone.utc), 'commenter': 'giordano', 'type': 'User'}, {'comment_id': 885019557, 'comment_body': 'Missing newline:\r\n```suggestion\r\nend\r\n\r\n```', 'comment_created': datetime.datetime(2022, 5, 30, 18, 9, 14, tzinfo=datetime.timezone.utc), 'commenter': 'giordano', 'type': 'User'}, {'comment_id': 885026148, 'comment_body': 'This file should be called `Project.toml`, not `project.toml` (case is important).  Also, `Stingray` shouldn\'t be here and it\'d be better to specify compat bounds (latest version of `Documenter.jl` at the moment is [`v0.27.18`](https://github.com/JuliaDocs/Documenter.jl/releases/tag/v0.27.18))\r\n```suggestion\r\n\r\n[compat]\r\nDocumenter = ""0.27""\r\n```', 'comment_created': datetime.datetime(2022, 5, 30, 18, 27, 26, tzinfo=datetime.timezone.utc), 'commenter': 'giordano', 'type': 'User'}]","[{'commit_sha': '6ddb249d6c7fe87a0791f0c586f4115b300f3129', 'committer_username': 'Aman-Pandey-afk', 'committer_name': 'Aman Pandey', 'committer_email': None, 'commit_date': datetime.datetime(2021, 1, 5, 18, 52, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '70cafd164a238cf0f46f46879901e98ec11966af', 'committer_username': 'Aman-Pandey-afk', 'committer_name': 'Aman Pandey', 'committer_email': None, 'commit_date': datetime.datetime(2021, 1, 5, 18, 52, 45, tzinfo=datetime.timezone.utc)}]",Aman Pandey,77021852,,User,,18,,10,6
977139576,Add fourier methods and tests,"Added the functions from fourier.py, along with required functions from gti.py and util.py (Remaining will be implemented according to use). Tests are thoroughly covered. DataFrames and HDF5 support for large data also implemented.",True,2,https://api.github.com/repos/StingraySoftware/Stingray.jl/pulls/2,https://github.com/StingraySoftware/Stingray.jl/pull/2,closed,1386,4,10,7,5,121,0,0,[],2022-06-23 13:11:19+00:00,2022-07-25 07:27:37+00:00,2744178.0,"31 days, 18:16:18","[{'comment_id': 905444451, 'comment_body': 'Note that when you add new dependencies, you should also add [compat entries](https://pkgdocs.julialang.org/v1/compatibility/) in the section below', 'comment_created': datetime.datetime(2022, 6, 23, 20, 40, 7, tzinfo=datetime.timezone.utc), 'commenter': 'giordano', 'type': 'User'}, {'comment_id': 905447211, 'comment_body': ""Can you please explain with words (maybe a comment) what this function is supposed to do?  It looks very inefficient and I'm having a hard time thinking about a case where this could be useful.\r\n\r\nAlso, if anything the julian way to define it would be:\r\n```julia\r\nsum_if_not_none_or_initialize(::Nothing,B) = B\r\nsum_if_not_none_or_initialize(A,B) = A + B\r\n```"", 'comment_created': datetime.datetime(2022, 6, 23, 20, 44, 11, tzinfo=datetime.timezone.utc), 'commenter': 'giordano', 'type': 'User'}, {'comment_id': 905448285, 'comment_body': ""There are so many exports here.  I think it's good to export what's useful to end users, otherwise you just clutter the scope needlessly.  `sum_if_not_none_or_initialize` looks a rather internal function (and see my comment about the need for this function in the first place)."", 'comment_created': datetime.datetime(2022, 6, 23, 20, 45, 40, tzinfo=datetime.timezone.utc), 'commenter': 'giordano', 'type': 'User'}, {'comment_id': 905449063, 'comment_body': ""Please, put type annotation to the signatures of the functions.  It's really hard to guess what the code is supposed to do if I have no idea what the input should be.  I appreciate the original code probably doesn't have type annotations because it was written in Python, but this is a different language, and the goal is to write something idiomatic in Julia.\r\n\r\n`include_zero` would be a `Bool`, so use `include_zero::Bool`, `n_bin` is (my guess) an `Integer`?"", 'comment_created': datetime.datetime(2022, 6, 23, 20, 46, 44, tzinfo=datetime.timezone.utc), 'commenter': 'giordano', 'type': 'User'}, {'comment_id': 905450390, 'comment_body': 'Please use the semantically relevant functions.  Julia has [`iseven`](https://docs.julialang.org/en/v1/base/numbers/#Base.iseven)\r\n```suggestion\r\n    if iseven(n_bin)\r\n```', 'comment_created': datetime.datetime(2022, 6, 23, 20, 48, 33, tzinfo=datetime.timezone.utc), 'commenter': 'giordano', 'type': 'User'}, {'comment_id': 905451223, 'comment_body': ""Actually, isn't this just\r\n```suggestion\r\n    return minbin:(n_bin รท 2)\r\n```\r\n?"", 'comment_created': datetime.datetime(2022, 6, 23, 20, 49, 42, tzinfo=datetime.timezone.utc), 'commenter': 'giordano', 'type': 'User'}, {'comment_id': 905459250, 'comment_body': 'This doesn\'t look good:\r\n```julia\r\njulia> function poisson_level(;norm = ""frac"", meanrate = nothing, n_ph = nothing, backrate = 0)\r\n           if norm == ""abs""\r\n               return 2.0 * meanrate\r\n           elseif norm == ""frac""\r\n               return 2.0 / (meanrate - backrate)^2 * meanrate\r\n           elseif norm == ""leahy""\r\n               return 2.0\r\n           elseif norm == ""none""\r\n               return float(n_ph)\r\n           end\r\n       end\r\npoisson_level (generic function with 1 method)\r\n\r\njulia> poisson_level()\r\nERROR: MethodError: no method matching -(::Nothing, ::Int64)\r\nClosest candidates are:\r\n  -(::T, ::T) where T<:Union{Int128, Int16, Int32, Int64, Int8, UInt128, UInt16, UInt32, UInt64, UInt8} at /usr/share/julia/base/int.jl:86\r\n  -(::T, ::Integer) where T<:AbstractChar at /usr/share/julia/base/char.jl:227\r\n  -(::LinearAlgebra.UniformScaling, ::Number) at /usr/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:147\r\n  ...\r\nStacktrace:\r\n [1] #poisson_level#1\r\n   @ ./REPL[2]:5 [inlined]\r\n [2] poisson_level()\r\n   @ Main ./REPL[2]:2\r\n [3] top-level scope\r\n   @ REPL[3]:1\r\n```\r\n\r\nThere are a few issues.  First of all, you\'re using too many keyword arguments.  Julia is very different from Python, and verbatim translation between different languages (whatever they are) is never a good idea.  In Python all arguments are by default keywords, in Julia they are not.  In julia you should prefer positional arguments over keyword arguments.  Keyword arguments are meant to ""tweak"" the output of functions because they are ***optional***, not to be mandatory like in this case.  If an argument is necessary to get a sensible output, that has to be positional.\r\n\r\nAlso, in Python there is a common tendency to give `None` as default value for arguments, also because in Python default arguments are evaluated at function definition time, which causes lots of troubles with mutable objects.  In Julia you don\'t have this issue: default arguments are evaluated on the call site.  It\'s quite uncommon to see `nothing` as default value of optional arguments in Julia, you should default to a sensible value.  If there is no sensible default value because the argument is mandatory, then again the argument must be mandatory, not optional.\r\n\r\nAlso, again, you\'re completely missing type annotations.  ', 'comment_created': datetime.datetime(2022, 6, 23, 21, 0, 42, tzinfo=datetime.timezone.utc), 'commenter': 'giordano', 'type': 'User'}, {'comment_id': 905464555, 'comment_body': 'In julia you can have different methods of the same function if they have different number of arguments (and/or types).  Something like this would for example work:\r\n```julia\r\nnormalize_leahy(unnorm_power, variance, n_bin) = unnorm_power * 2 / (variance * n_bin)\r\nnormalize_leahy(unnorm_power, n_ph) = unnorm_power * 2 / n_ph\r\n```\r\nBut the difference between the that the default variance in the function below is `nothing`, so how about having simply\r\n```suggestion\r\nnormalize_leahy(unnorm_power, variance, n_bin) = unnorm_power * 2 / (variance * n_bin)\r\n```\r\nand then in the function below `variance` defaults to `1` and then you simplify\r\n```julia\r\n    if norm == ""leahy"" && !isnothing(variance)\r\n        pds = normalize_leahy_from_variance(unnorm_power, variance, n_bin)\r\n    elseif norm == ""leahy""\r\n        pds = normalize_leahy_poisson(unnorm_power, n_ph)\r\n```\r\nto\r\n```julia\r\n    if norm == ""leahy""\r\n        pds = normalize_leahy_poisson(unnorm_power, variance, n_ph)\r\n```\r\n?\r\n\r\nThere are lots of simplifications here: you have a single method instead of two, `variance` has a more sensible default value (same point as discussed above) and avoid a branch in the function below.', 'comment_created': datetime.datetime(2022, 6, 23, 21, 8, 36, tzinfo=datetime.timezone.utc), 'commenter': 'giordano', 'type': 'User'}, {'comment_id': 905465418, 'comment_body': ""I've already mentioned this above, I'm not going to repeat always, but please put type annotation and use sensible default values for optional arguments.  `nothing` is rarely a good option."", 'comment_created': datetime.datetime(2022, 6, 23, 21, 9, 52, tzinfo=datetime.timezone.utc), 'commenter': 'giordano', 'type': 'User'}, {'comment_id': 905465787, 'comment_body': 'And if `norm` is none of this what happens?', 'comment_created': datetime.datetime(2022, 6, 23, 21, 10, 22, tzinfo=datetime.timezone.utc), 'commenter': 'giordano', 'type': 'User'}, {'comment_id': 905466025, 'comment_body': 'And if `power_type` is none of this what happens?', 'comment_created': datetime.datetime(2022, 6, 23, 21, 10, 43, tzinfo=datetime.timezone.utc), 'commenter': 'giordano', 'type': 'User'}, {'comment_id': 905466586, 'comment_body': ""I have no idea what `power1` is because it isn't annotated, but this is likely better done as\r\n```suggestion\r\n        return zero(power1)\r\n```"", 'comment_created': datetime.datetime(2022, 6, 23, 21, 11, 29, tzinfo=datetime.timezone.utc), 'commenter': 'giordano', 'type': 'User'}, {'comment_id': 905468261, 'comment_body': 'What is `n_ave`?  If you have to do a broadcast division here, then please do\r\n```suggestion\r\n    return power1 .* power2 - intrinsic_coherence * (power1 .- power1_noise) .* (power2 .- power2_noise) ./ n_ave\r\n```\r\nwhich saves the creation of the temporary array `bsq` before creating the `bsq / n_ave`.  THis can also be simplified to\r\n```suggestion\r\n    return @. power1 * power2 - intrinsic_coherence * (power1 - power1_noise) * (power2 - power2_noise) / n_ave\r\n```\r\n***if*** you have to broadcast everything anyway.  Again, no idea what the arguments are concretely.', 'comment_created': datetime.datetime(2022, 6, 23, 21, 14, 10, tzinfo=datetime.timezone.utc), 'commenter': 'giordano', 'type': 'User'}, {'comment_id': 905473697, 'comment_body': ""In Julia you'd rarely do a check like this: you'd define two different methods that do different things depending on the type of the arguments.  Also, it's very weird that `num` can be both a scalar and an array to do just the same thing.  Functions are usually defined on scalars, and if you need to broadcast the result you call the function with [dot broadcasting](https://docs.julialang.org/en/v1/manual/arrays/#Broadcasting).\r\n\r\nThis is again related to the fact that there is no type annotation."", 'comment_created': datetime.datetime(2022, 6, 23, 21, 22, 41, tzinfo=datetime.timezone.utc), 'commenter': 'giordano', 'type': 'User'}, {'comment_id': 905485764, 'comment_body': ""Note that you started the function with `new_coherence = 1`, which is an integer, then in the function it becomes a floating point number.  I'm certain that if you had checked this function with [`@code_warntype`](https://docs.julialang.org/en/v1/manual/performance-tips/#man-code-warntype) you'd have seen lots of red."", 'comment_created': datetime.datetime(2022, 6, 23, 21, 29, 8, tzinfo=datetime.timezone.utc), 'commenter': 'giordano', 'type': 'User'}, {'comment_id': 905488831, 'comment_body': ""Are you entirely sure this line is doing what you believe it is doing?  Can you please describe it with words?  If you blindly replaced `np.sqrt(...)` in Python with `sqrt(...)` in Julia I have good reasons to believe this is giving you completely wrong results.  And more worryingly, tests are passing.  How are you validating this function in the tests?\r\n\r\nAdditional, you're assigning the same mutable object to three different variables, that sounds like a recipe for a disaster: if you mutate in-place, say, `dRe` that'd affect also `dIm` and `dG`.  Is that really what you want."", 'comment_created': datetime.datetime(2022, 6, 23, 21, 34, 9, tzinfo=datetime.timezone.utc), 'commenter': 'giordano', 'type': 'User'}, {'comment_id': 905493207, 'comment_body': 'How does this line even work?  The default value of `common_ref` is `""false""` which isn\'t even a `Bool`.', 'comment_created': datetime.datetime(2022, 6, 23, 21, 41, 28, tzinfo=datetime.timezone.utc), 'commenter': 'giordano', 'type': 'User'}, {'comment_id': 905493823, 'comment_body': ""Also here I'm pretty sure this function is giving you absolutely wrong results, not just because of the use of `sqrt` but also of `*`."", 'comment_created': datetime.datetime(2022, 6, 23, 21, 42, 35, tzinfo=datetime.timezone.utc), 'commenter': 'giordano', 'type': 'User'}, {'comment_id': 905497016, 'comment_body': ""Please don't define functions conditionally in Julia.  Unfortunately this is a known bug (and less easy to fix than it may seem), but in this case you can do\r\n```suggestion\r\n    if !binned\r\n        return generate_indices_of_segment_boundaries_unbinned\r\n    else\r\n        # Define a new function, so that we can pass the correct dt as an\r\n        # argument.\r\n        return (args...) -> generate_indices_of_segment_boundaries_binned(args...; dt=dt)\r\n    end\r\n```\r\nto avoid defining the function conditionally, although I have the feeling this could be avoided if multiple dispatch was used correctly.\r\n\r\nSide note, it feels like the code should be\r\n```julia\r\nif binned\r\n   # do something if `binned` is true\r\nelse\r\n  # do something else if `binned` is false\r\nend\r\n```\r\nIt's confusing to see the a negative to condition used in this way."", 'comment_created': datetime.datetime(2022, 6, 23, 21, 48, 16, tzinfo=datetime.timezone.utc), 'commenter': 'giordano', 'type': 'User'}, {'comment_id': 905499693, 'comment_body': ""You're first creating an empty `Vector{Any}`, to then create another empty `Vector{Float64}`.  I think you just wanted\r\n```suggestion\r\n    spectrum_start_times = Float64[]\r\n```\r\nwhich directly creates an empty `Vector{Float64}`."", 'comment_created': datetime.datetime(2022, 6, 23, 21, 53, 8, tzinfo=datetime.timezone.utc), 'commenter': 'giordano', 'type': 'User'}, {'comment_id': 905500295, 'comment_body': 'Note that in julia, contrary to numpy, slicing creates copies, instead of views, which is very inefficient.  You probably want to do\r\n```suggestion\r\n    gti_low = @view gtis[:,1]\r\n    gti_up = @view gtis[:,2]\r\n```', 'comment_created': datetime.datetime(2022, 6, 23, 21, 54, 11, tzinfo=datetime.timezone.utc), 'commenter': 'giordano', 'type': 'User'}, {'comment_id': 905500581, 'comment_body': '```suggestion\r\n        append!(spectrum_start_times, newtimes)\r\n```', 'comment_created': datetime.datetime(2022, 6, 23, 21, 54, 43, tzinfo=datetime.timezone.utc), 'commenter': 'giordano', 'type': 'User'}, {'comment_id': 905501281, 'comment_body': 'Sounds like `median(diff(time))` should be default value of `dt` in the first place instead of defaulting to `nothing`.', 'comment_created': datetime.datetime(2022, 6, 23, 21, 56, tzinfo=datetime.timezone.utc), 'commenter': 'giordano', 'type': 'User'}, {'comment_id': 905501433, 'comment_body': '```suggestion\r\n    spectrum_start_bins = Int64[]\r\n```', 'comment_created': datetime.datetime(2022, 6, 23, 21, 56, 16, tzinfo=datetime.timezone.utc), 'commenter': 'giordano', 'type': 'User'}, {'comment_id': 905502533, 'comment_body': '```suggestion\r\n        append!(spectrum_start_bins,newbins)\r\n```', 'comment_created': datetime.datetime(2022, 6, 23, 21, 58, 22, tzinfo=datetime.timezone.utc), 'commenter': 'giordano', 'type': 'User'}, {'comment_id': 905503252, 'comment_body': ""Sounds like `0` should be the default value of `dt` in the first place?  Or not because it's used above by `bin_intervals_from_gtis`?"", 'comment_created': datetime.datetime(2022, 6, 23, 21, 59, 48, tzinfo=datetime.timezone.utc), 'commenter': 'giordano', 'type': 'User'}, {'comment_id': 905505843, 'comment_body': 'Relative tolerance of 10% sounds fairly bad.  Is this the precision within which the two functions are supposed to agree?', 'comment_created': datetime.datetime(2022, 6, 23, 22, 5, 2, tzinfo=datetime.timezone.utc), 'commenter': 'giordano', 'type': 'User'}, {'comment_id': 905509425, 'comment_body': '[`@assert`](https://docs.julialang.org/en/v1/base/base/#Base.@assert) is supposed to be used only for debugging purposes.  Please read the docstrings which strongly warns against any other uses.', 'comment_created': datetime.datetime(2022, 6, 23, 22, 6, 54, tzinfo=datetime.timezone.utc), 'commenter': 'giordano', 'type': 'User'}, {'comment_id': 905512077, 'comment_body': 'Simpler:\r\n```suggestion\r\n        discard = [m for m in propertynames(out_ev) if m == :variance]\r\n```', 'comment_created': datetime.datetime(2022, 6, 23, 22, 8, 26, tzinfo=datetime.timezone.utc), 'commenter': 'giordano', 'type': 'User'}, {'comment_id': 905513834, 'comment_body': '```suggestion\r\n    pds = abs2.(fft(lc))\r\n```', 'comment_created': datetime.datetime(2022, 6, 23, 22, 9, 20, tzinfo=datetime.timezone.utc), 'commenter': 'giordano', 'type': 'User'}, {'comment_id': 905526650, 'comment_body': 'This string is doing nothing.  What is is supposed to do?  A comment?', 'comment_created': datetime.datetime(2022, 6, 23, 22, 11, 5, tzinfo=datetime.timezone.utc), 'commenter': 'giordano', 'type': 'User'}, {'comment_id': 905530460, 'comment_body': 'Other extra strings.', 'comment_created': datetime.datetime(2022, 6, 23, 22, 11, 32, tzinfo=datetime.timezone.utc), 'commenter': 'giordano', 'type': 'User'}, {'comment_id': 905532652, 'comment_body': 'These lines have an off indentation', 'comment_created': datetime.datetime(2022, 6, 23, 22, 11, 52, tzinfo=datetime.timezone.utc), 'commenter': 'giordano', 'type': 'User'}, {'comment_id': 905534505, 'comment_body': 'Same comments as above.', 'comment_created': datetime.datetime(2022, 6, 23, 22, 12, 8, tzinfo=datetime.timezone.utc), 'commenter': 'giordano', 'type': 'User'}, {'comment_id': 905551876, 'comment_body': '[`identity`](https://docs.julialang.org/en/v1/base/base/#Base.identity)\r\n```suggestion\r\n        local_show_progress = identity\r\n```', 'comment_created': datetime.datetime(2022, 6, 23, 22, 17, 9, tzinfo=datetime.timezone.utc), 'commenter': 'giordano', 'type': 'User'}, {'comment_id': 905553002, 'comment_body': ""Are you sure this line is doing what you think?  Please elaborate in words what's your expectation."", 'comment_created': datetime.datetime(2022, 6, 23, 22, 19, tzinfo=datetime.timezone.utc), 'commenter': 'giordano', 'type': 'User'}, {'comment_id': 905554233, 'comment_body': ""```suggestion\r\n        if isnothing(flux) || all(iszero, flux)\r\n```\r\nhas two advantages: you don't allocate the array `flux .== 0`, and also `all` is able to return early at the first non-zero element of `flux`."", 'comment_created': datetime.datetime(2022, 6, 23, 22, 21, 6, tzinfo=datetime.timezone.utc), 'commenter': 'giordano', 'type': 'User'}, {'comment_id': 905554384, 'comment_body': '```suggestion\r\n        if isnothing(flux1) || isnothing(flux2) || all(iszero, flux1) || all(iszero, flux2)\r\n```', 'comment_created': datetime.datetime(2022, 6, 23, 22, 21, 25, tzinfo=datetime.timezone.utc), 'commenter': 'giordano', 'type': 'User'}, {'comment_id': 905554535, 'comment_body': '```suggestion\r\n        if isnothing(flux1) || isnothing(flux2) || all(iszero, flux1) || all(iszero, flux2)\r\n```', 'comment_created': datetime.datetime(2022, 6, 23, 22, 21, 46, tzinfo=datetime.timezone.utc), 'commenter': 'giordano', 'type': 'User'}, {'comment_id': 905554796, 'comment_body': '```suggestion\r\n    is_events = all(isnothing, (fluxes1, fluxes2, errors1,errors2))\r\n```', 'comment_created': datetime.datetime(2022, 6, 23, 22, 22, 19, tzinfo=datetime.timezone.utc), 'commenter': 'giordano', 'type': 'User'}, {'comment_id': 906648883, 'comment_body': 'I think I have used copy() in vain, but the function is executed in loop, so I will need a deepcopy of B when A is nothing (otherwise B points to A).', 'comment_created': datetime.datetime(2022, 6, 25, 7, 36, 6, tzinfo=datetime.timezone.utc), 'commenter': 'Aman-Pandey-afk', 'type': 'User'}, {'comment_id': 906649491, 'comment_body': 'I thought of providing only one tests for each compare_tables execution, so asserted the conditions and finally tested for true, if I test for every key value, there are around 500 tests related to them.', 'comment_created': datetime.datetime(2022, 6, 25, 7, 41, 13, tzinfo=datetime.timezone.utc), 'commenter': 'Aman-Pandey-afk', 'type': 'User'}, {'comment_id': 906649552, 'comment_body': 'Yes it was comment :) ', 'comment_created': datetime.datetime(2022, 6, 25, 7, 42, 2, tzinfo=datetime.timezone.utc), 'commenter': 'Aman-Pandey-afk', 'type': 'User'}, {'comment_id': 906649581, 'comment_body': '> so I will need a deepcopy of B when A is nothing (otherwise B points to A).\r\n\r\nWhat does this mean? ', 'comment_created': datetime.datetime(2022, 6, 25, 7, 42, 41, tzinfo=datetime.timezone.utc), 'commenter': 'giordano', 'type': 'User'}, {'comment_id': 906650395, 'comment_body': ""I can't use dot broadcast. The num .<0 returns a boolean array (suppose B). B[i] is false if num[i]<0 and num[B] gives a new array only consisting of those elements of num where B is true. (I think filter could be used to create the array, but dot broadcasting not in my opinion)."", 'comment_created': datetime.datetime(2022, 6, 25, 7, 50, 18, tzinfo=datetime.timezone.utc), 'commenter': 'Aman-Pandey-afk', 'type': 'User'}, {'comment_id': 906652756, 'comment_body': ""Basically it is a recursive copy of objects, but here it is just to ensure that we don't pass a reference of A to B. Shallow copy could be used, but I though there must be some motive in using deepcopy in python too (like maybe variance could be an array in some case so shallow copy doesn't guarantee that A and B are independent)."", 'comment_created': datetime.datetime(2022, 6, 25, 8, 15, 18, tzinfo=datetime.timezone.utc), 'commenter': 'Aman-Pandey-afk', 'type': 'User'}, {'comment_id': 906654015, 'comment_body': ""Specifically I'm missing what\r\n\r\n> (otherwise B points to A)\r\n\r\nmeans. Maybe a concrete reproducible example would help."", 'comment_created': datetime.datetime(2022, 6, 25, 8, 27, 55, tzinfo=datetime.timezone.utc), 'commenter': 'giordano', 'type': 'User'}, {'comment_id': 906656082, 'comment_body': 'The specific use-case is here: https://github.com/StingraySoftware/stingray/blob/1bd574a284dfe60177e3313d50cc5700f4d1ec42/stingray/fourier.py#L1005-L1007\r\nAs you can see if I just use `sum_if_not_none_or_initialize(::Nothing,B) = B` , it will point to the reference of B. Ex:\r\n<img width=""379"" alt=""image"" src=""https://user-images.githubusercontent.com/77021852/175765891-4ca9ce8e-8b8d-4e5d-95bb-45358ea8cf8c.png"">\r\n\r\n', 'comment_created': datetime.datetime(2022, 6, 25, 8, 48, 31, tzinfo=datetime.timezone.utc), 'commenter': 'Aman-Pandey-afk', 'type': 'User'}, {'comment_id': 906657171, 'comment_body': ""As a general remark, never show screenshots, whoever wants to help you can't copy from that, moreover if someone wants to come back to this discussion whatever is written in the screenshot doesn't show up in search. They aren't really much useful.\r\n\r\nThat said, I'm not sure that's a problem in practice here.\r\n\r\nAlso, I think this discussion is a bit out of the point now: I believe you should first understand how to avoid the overuse of nothing and write more idiomatic Julia code here, at which point a new solution may arise."", 'comment_created': datetime.datetime(2022, 6, 25, 8, 59, 15, tzinfo=datetime.timezone.utc), 'commenter': 'giordano', 'type': 'User'}, {'comment_id': 906662085, 'comment_body': 'Hi @giordano, @Aman-Pandey-afk  : \r\nThis is the use case: in another function, I am calculating (e.g.) an average of many periodograms produced over a number of short time series. In each loop, I produce a periodogram that has to be summed to the total periodogram. The summed periodogram is initialized as `None`. In the first loop, this function will find that the total periodogram is None, and initialize it to a deep copy of the first periodogram. From that point on, all subsequent arrays will be summed to the total periodogram in place.\r\nThe reason for the deep copy is to avoid side effects on the first periodogram, in case it is useful later.', 'comment_created': datetime.datetime(2022, 6, 25, 9, 44, 53, tzinfo=datetime.timezone.utc), 'commenter': 'matteobachetti', 'type': 'User'}, {'comment_id': 906665398, 'comment_body': ""Ok, but the `deepcopy` is a red herring here, my main point is that we should move away from overusing `nothing`.  There _are_ definitely good use cases for `nothing` in Julia, but I feel like all the uses here come from the fact it was used (for good reasons!) in Python, not that it's necessary in Julia."", 'comment_created': datetime.datetime(2022, 6, 25, 10, 22, 44, tzinfo=datetime.timezone.utc), 'commenter': 'giordano', 'type': 'User'}, {'comment_id': 906666076, 'comment_body': 'My point is that you can define a function (please use a more sensible name than ""foo"")\r\n```julia\r\nfoo(num::Real) = num < 0 ? real(cross_power * conj(cross_power)) : num\r\n```\r\nand then here you do\r\n```julia\r\nnum .= foo.(num)\r\n```\r\nwhich would work whatever `num` is, either a scalar number or an aray.  Much simpler, and it doesn\'t allocate lots of temporary new arrays.\r\n\r\nUnless I\'m missing something else?  For example, I\'m still not clear what `if num isa Array{T} where T<:Any` means to be:  `num` can be an `Array` or what else?  I\'m just making it up it\'d be a scalar number, I don\'t know.  But I find it very weird you\'d end up with either a scalar or an array.', 'comment_created': datetime.datetime(2022, 6, 25, 10, 31, 11, tzinfo=datetime.timezone.utc), 'commenter': 'giordano', 'type': 'User'}, {'comment_id': 906678897, 'comment_body': ""Problem is cross power is also an array, so this way won't work. If we have to use function we need to pass index too, in that case also, there is a separation between array and number. num is simply iterable of floats (I think it works with tuples too in python)"", 'comment_created': datetime.datetime(2022, 6, 25, 12, 58, 53, tzinfo=datetime.timezone.utc), 'commenter': 'Aman-Pandey-afk', 'type': 'User'}, {'comment_id': 906679180, 'comment_body': ""Why it wouldn't work?"", 'comment_created': datetime.datetime(2022, 6, 25, 13, 2, 2, tzinfo=datetime.timezone.utc), 'commenter': 'giordano', 'type': 'User'}, {'comment_id': 906679699, 'comment_body': '```\r\njulia> cross_power = [1+im,1+2im,2]\r\n3-element Vector{Complex{Int64}}:\r\n 1 + 1im\r\n 1 + 2im\r\n 2 + 0im\r\n\r\njulia> num=[-1,-2,3]\r\n3-element Vector{Int64}:\r\n -1\r\n -2\r\n  3\r\n\r\njulia> foo(num::Real) = num < 0 ? real(cross_power .* conj(cross_power)) : num   \r\nfoo (generic function with 1 method)\r\n\r\njulia> num .= foo.(num)\r\nERROR: MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Int64\r\n```', 'comment_created': datetime.datetime(2022, 6, 25, 13, 8, 31, tzinfo=datetime.timezone.utc), 'commenter': 'Aman-Pandey-afk', 'type': 'User'}, {'comment_id': 906680683, 'comment_body': '```julia\r\njulia> foo(num::Real, cross_power::Complex) = num < 0 ? real(cross_power * conj(cross_power)) : num\r\nfoo (generic function with 1 method)\r\n\r\njulia> cross_power = [1 + im, 1 + 2im, 2]\r\n3-element Vector{Complex{Int64}}:\r\n 1 + 1im\r\n 1 + 2im\r\n 2 + 0im\r\n\r\njulia> num = [-1.0, -2.0, 3.0]\r\n3-element Vector{Float64}:\r\n -1.0\r\n -2.0\r\n  3.0\r\n\r\njulia> num .= foo.(num, cross_power)\r\n3-element Vector{Float64}:\r\n 2.0\r\n 5.0\r\n 3.0\r\n```', 'comment_created': datetime.datetime(2022, 6, 25, 13, 18, 29, tzinfo=datetime.timezone.utc), 'commenter': 'giordano', 'type': 'User'}, {'comment_id': 906684731, 'comment_body': 'Oh yes we can do that, I looked now upon different ways to broadcast arguments in functions, nice! (I took it to grant that only first argument will be broadcasted although I have used this in a function before)', 'comment_created': datetime.datetime(2022, 6, 25, 13, 31, 25, tzinfo=datetime.timezone.utc), 'commenter': 'Aman-Pandey-afk', 'type': 'User'}, {'comment_id': 915338032, 'comment_body': 'Will fix this by today, have to develop test for it.', 'comment_created': datetime.datetime(2022, 7, 6, 23, 52, 56, tzinfo=datetime.timezone.utc), 'commenter': 'Aman-Pandey-afk', 'type': 'User'}, {'comment_id': 917180658, 'comment_body': 'I think this is equivalent to\r\n```suggestion\r\n        pop!(st)\r\n    end\r\n    if st[end] + nbin > stopbin\r\n        pop!(st)\r\n```\r\nright?\r\n\r\nAlso,  I [have already mentioned](https://github.com/matteobachetti/Stingray.jl/pull/2#discussion_r905500295) that slicing creates copies, so in `st = st[1:end-1]` you are creating a copy of `st[1:end-1]` before reassigning it to the `st` identifier.  [`pop!`](https://docs.julialang.org/en/v1/base/collections/#Base.pop!) simply removes the last element of the collection, without assuming anything about indexing of the array (Julia is 1-based by default, but arbitrary indices are allowed).', 'comment_created': datetime.datetime(2022, 7, 8, 23, 7, 26, tzinfo=datetime.timezone.utc), 'commenter': 'giordano', 'type': 'User'}, {'comment_id': 917181134, 'comment_body': '```suggestion\r\n    gti_low = @view(gtis[:, 1]) .+ (dt ./ 2 .- epsilon_times_dt)\r\n    gti_up = @view(gtis[:, 2]) .- (dt ./ 2 .- epsilon_times_dt)\r\n```', 'comment_created': datetime.datetime(2022, 7, 8, 23, 9, 14, tzinfo=datetime.timezone.utc), 'commenter': 'giordano', 'type': 'User'}, {'comment_id': 917182009, 'comment_body': ""Unless you have a specific reason for using 64-bit integers, it's usually more natural to use `Int`, which is the integer type with the same number of bits as the current architecture (32-bit on 32-bit systems, 64-bit on 64-bit integers).  `Int` is also the type of integer literals in Julia\r\n```suggestion\r\n    st = floor.(range(startbin, stopbin, step=Int(nbin * fraction_step)))\r\n```"", 'comment_created': datetime.datetime(2022, 7, 8, 23, 12, 33, tzinfo=datetime.timezone.utc), 'commenter': 'giordano', 'type': 'User'}, {'comment_id': 917182140, 'comment_body': '```suggestion\r\n    nbin = round(Int, segment_size / dt)\r\n```', 'comment_created': datetime.datetime(2022, 7, 8, 23, 13, 6, tzinfo=datetime.timezone.utc), 'commenter': 'giordano', 'type': 'User'}, {'comment_id': 917182185, 'comment_body': '```suggestion\r\n    spectrum_start_bins = Int[]\r\n```', 'comment_created': datetime.datetime(2022, 7, 8, 23, 13, 21, tzinfo=datetime.timezone.utc), 'commenter': 'giordano', 'type': 'User'}, {'comment_id': 917183522, 'comment_body': 'In Julia masks are less frequently used than in Python, [`filter`](https://docs.julialang.org/en/v1/base/collections/#Base.filter)-ing is much more common:\r\n```suggestion\r\n    goodbins = positive_fft_bins(11)\r\n    @test filter(x -> x >0, freq) == freq[goodbins]\r\n```', 'comment_created': datetime.datetime(2022, 7, 8, 23, 19, 23, tzinfo=datetime.timezone.utc), 'commenter': 'giordano', 'type': 'User'}, {'comment_id': 917184367, 'comment_body': 'This is more idiomatic:\r\n```suggestion\r\n    good = 0 .< freq .< 0.1\r\n    keepat!(ft1, good)\r\n    keepat!(ft2, good)\r\n```', 'comment_created': datetime.datetime(2022, 7, 8, 23, 22, 56, tzinfo=datetime.timezone.utc), 'commenter': 'giordano', 'type': 'User'}, {'comment_id': 917184800, 'comment_body': 'Same comment as https://github.com/matteobachetti/Stingray.jl/pull/2#discussion_r905554233\r\n```suggestion\r\n        @test all(x -> isapprox(x, 1; atol=0.001), coh)\r\n```\r\nSide note: I _**strongly**_ recommend always using `;` to introduce keyword arguments.', 'comment_created': datetime.datetime(2022, 7, 8, 23, 24, 41, tzinfo=datetime.timezone.utc), 'commenter': 'giordano', 'type': 'User'}, {'comment_id': 917184905, 'comment_body': 'Again, same comment as https://github.com/matteobachetti/Stingray.jl/pull/2#discussion_r905554233\r\n```suggestion\r\n        @test all(x -> isapprox(x, 1; atol=0.001), coh)\r\n```', 'comment_created': datetime.datetime(2022, 7, 8, 23, 25, 14, tzinfo=datetime.timezone.utc), 'commenter': 'giordano', 'type': 'User'}, {'comment_id': 917185005, 'comment_body': 'Again (3), same comment as https://github.com/matteobachetti/Stingray.jl/pull/2#discussion_r905554233\r\n```suggestion\r\n        @test all(iszero, coh)\r\n```', 'comment_created': datetime.datetime(2022, 7, 8, 23, 25, 40, tzinfo=datetime.timezone.utc), 'commenter': 'giordano', 'type': 'User'}, {'comment_id': 917185094, 'comment_body': '```suggestion\r\n        low_coh_cross = rand.(Normal.(bsq.^0.5 ./ 10, bsq.^0.5 ./ 100)) .+ 0.0im\r\n```', 'comment_created': datetime.datetime(2022, 7, 8, 23, 26, 3, tzinfo=datetime.timezone.utc), 'commenter': 'giordano', 'type': 'User'}, {'comment_id': 917185616, 'comment_body': 'Same function already suggested in https://github.com/matteobachetti/Stingray.jl/pull/2#discussion_r905451223:\r\n```suggestion\r\n    N = len รท dt\r\n```', 'comment_created': datetime.datetime(2022, 7, 8, 23, 28, 14, tzinfo=datetime.timezone.utc), 'commenter': 'giordano', 'type': 'User'}, {'comment_id': 917185789, 'comment_body': '```suggestion\r\n        N = segment_size รท dt\r\n```', 'comment_created': datetime.datetime(2022, 7, 8, 23, 29, 21, tzinfo=datetime.timezone.utc), 'commenter': 'giordano', 'type': 'User'}, {'comment_id': 917186199, 'comment_body': 'But actually, integer division (already suggested in https://github.com/matteobachetti/Stingray.jl/pull/2#discussion_r905451223) is much idiomatic\r\n```suggestion\r\n    nbin = segment_size รท dt\r\n```', 'comment_created': datetime.datetime(2022, 7, 8, 23, 31, 12, tzinfo=datetime.timezone.utc), 'commenter': 'giordano', 'type': 'User'}, {'comment_id': 917186862, 'comment_body': ""Wouldn't this be equivalent to\r\n```suggestion\r\n        fts_evts = collect(get_flux_iterable_from_segments(times, gti, segment_size; n_bin=N))\r\n```\r\n?  Same below"", 'comment_created': datetime.datetime(2022, 7, 8, 23, 33, 56, tzinfo=datetime.timezone.utc), 'commenter': 'giordano', 'type': 'User'}, {'comment_id': 917187024, 'comment_body': ""Wouldn't this be equivalent to\r\n```suggestion\r\n        @test fts_evts == fts_cts\r\n```"", 'comment_created': datetime.datetime(2022, 7, 8, 23, 34, 42, tzinfo=datetime.timezone.utc), 'commenter': 'giordano', 'type': 'User'}, {'comment_id': 917187794, 'comment_body': 'This is always integer division:\r\n```suggestion\r\n    good = 2:(N รท2)\r\n```', 'comment_created': datetime.datetime(2022, 7, 8, 23, 38, 36, tzinfo=datetime.timezone.utc), 'commenter': 'giordano', 'type': 'User'}, {'comment_id': 917187880, 'comment_body': '```suggestion\r\n    mean = var = 100000.0\r\n```', 'comment_created': datetime.datetime(2022, 7, 8, 23, 38, 57, tzinfo=datetime.timezone.utc), 'commenter': 'giordano', 'type': 'User'}, {'comment_id': 917188378, 'comment_body': ""Please use a more descriptive error message.  Since this is an `if` on the value of `norm`, the only incorrect argument is `norm`, right?  It'd also be useful to print it out explicitly, and test also the error paths."", 'comment_created': datetime.datetime(2022, 7, 8, 23, 41, 16, tzinfo=datetime.timezone.utc), 'commenter': 'giordano', 'type': 'User'}, {'comment_id': 917188671, 'comment_body': '```suggestion\r\nnormalize_abs(unnorm_power::AbstractVector{<:Number}, dt::Real, n_bin::Integer) = \r\n```', 'comment_created': datetime.datetime(2022, 7, 8, 23, 42, 31, tzinfo=datetime.timezone.utc), 'commenter': 'giordano', 'type': 'User'}, {'comment_id': 917188713, 'comment_body': 'Indentation is off:\r\n```suggestion\r\n    unnorm_power * 2 / n_bin / dt\r\n```', 'comment_created': datetime.datetime(2022, 7, 8, 23, 42, 44, tzinfo=datetime.timezone.utc), 'commenter': 'giordano', 'type': 'User'}, {'comment_id': 917188804, 'comment_body': ""What's `unnorm_power`?"", 'comment_created': datetime.datetime(2022, 7, 8, 23, 43, 10, tzinfo=datetime.timezone.utc), 'commenter': 'giordano', 'type': 'User'}, {'comment_id': 917188849, 'comment_body': '```suggestion\r\n        power = unnorm_power * 2 * dt / ((mean_flux - background_flux) ^ 2 *\r\n```', 'comment_created': datetime.datetime(2022, 7, 8, 23, 43, 24, tzinfo=datetime.timezone.utc), 'commenter': 'giordano', 'type': 'User'}, {'comment_id': 917188869, 'comment_body': '```suggestion\r\n        power = unnorm_power * 2 * dt / (mean_flux ^ 2 * n_bin)\r\n```', 'comment_created': datetime.datetime(2022, 7, 8, 23, 43, 32, tzinfo=datetime.timezone.utc), 'commenter': 'giordano', 'type': 'User'}, {'comment_id': 917189038, 'comment_body': '```suggestion\r\nnormalize_leahy_from_variance(unnorm_power::AbstractVector{<:Number}, \r\n                              variance::Real, n_bin::Integer) =\r\n    unnorm_power * 2 / (variance * n_bin)\r\n```', 'comment_created': datetime.datetime(2022, 7, 8, 23, 44, 29, tzinfo=datetime.timezone.utc), 'commenter': 'giordano', 'type': 'User'}, {'comment_id': 917189086, 'comment_body': '```suggestion\r\nnormalize_leahy_poisson(unnorm_power::AbstractVector{<:Number}, n_ph::Real) =\r\n    unnorm_power * 2 / n_ph\r\n```', 'comment_created': datetime.datetime(2022, 7, 8, 23, 44, 53, tzinfo=datetime.timezone.utc), 'commenter': 'giordano', 'type': 'User'}, {'comment_id': 917189216, 'comment_body': 'Again, more descriptive error message and test this code path.', 'comment_created': datetime.datetime(2022, 7, 8, 23, 45, 36, tzinfo=datetime.timezone.utc), 'commenter': 'giordano', 'type': 'User'}, {'comment_id': 917189290, 'comment_body': 'Same as above.', 'comment_created': datetime.datetime(2022, 7, 8, 23, 45, 53, tzinfo=datetime.timezone.utc), 'commenter': 'giordano', 'type': 'User'}, {'comment_id': 917189908, 'comment_body': 'Sounds like this should be a function of only `power1::Real, power2::Real` and `bias_term` should be called broadcasted:\r\n```suggestion\r\nfunction bias_term(power1::Real, power2::Real, power1_noise::Real, \r\n                   power2_noise::Real, n_ave::Integer;\r\n                   intrinsic_coherence::Real=1.0)\r\n    \r\n    if n_ave > 500\r\n        return zero(power1)\r\n    end\r\n    return power1 * power2 - intrinsic_coherence * (power1 - power1_noise) * (power2 - power2_noise) / n_ave\r\nend\r\n```', 'comment_created': datetime.datetime(2022, 7, 8, 23, 48, 49, tzinfo=datetime.timezone.utc), 'commenter': 'giordano', 'type': 'User'}, {'comment_id': 917190292, 'comment_body': 'Again, it sounds like this should be defined on scalars, and use broadcasting on the call site', 'comment_created': datetime.datetime(2022, 7, 8, 23, 50, 43, tzinfo=datetime.timezone.utc), 'commenter': 'giordano', 'type': 'User'}, {'comment_id': 917190524, 'comment_body': 'Is this `estimate_intrinsic_coherence` only calling `_estimate_intrinsic_coherence_single` broadcasted?', 'comment_created': datetime.datetime(2022, 7, 8, 23, 52, 2, tzinfo=datetime.timezone.utc), 'commenter': 'giordano', 'type': 'User'}, {'comment_id': 917191042, 'comment_body': ""Once again, the pattern in Julia is to define a function `f(x::Real) = ...` only on scalars, and then call it `f.(V)` where `V::AbstractVector{<:Real}`.  There is no need to define the function on scalars _and_ vectors, it's a useless and confusing duplicate."", 'comment_created': datetime.datetime(2022, 7, 8, 23, 54, 56, tzinfo=datetime.timezone.utc), 'commenter': 'giordano', 'type': 'User'}, {'comment_id': 917191757, 'comment_body': '```suggestion\r\n    n_bin = segment_size รท dt\r\n```', 'comment_created': datetime.datetime(2022, 7, 8, 23, 58, 14, tzinfo=datetime.timezone.utc), 'commenter': 'giordano', 'type': 'User'}, {'comment_id': 917191820, 'comment_body': '```suggestion\r\n    n_bin = segment_size รท dt\r\n```', 'comment_created': datetime.datetime(2022, 7, 8, 23, 58, 29, tzinfo=datetime.timezone.utc), 'commenter': 'giordano', 'type': 'User'}, {'comment_id': 917222522, 'comment_body': 'Well Integer Division always rounds to smaller integer right?  (EX: round(0.7)=1 is the result needed)', 'comment_created': datetime.datetime(2022, 7, 9, 5, 7, 6, tzinfo=datetime.timezone.utc), 'commenter': 'Aman-Pandey-afk', 'type': 'User'}, {'comment_id': 917222811, 'comment_body': 'The zero(power1) causes type instability, zero passes the same type as input so for Int it can return both int and float depending on condition.', 'comment_created': datetime.datetime(2022, 7, 9, 5, 10, 29, tzinfo=datetime.timezone.utc), 'commenter': 'Aman-Pandey-afk', 'type': 'User'}, {'comment_id': 917223009, 'comment_body': ""Division by scalar doesn't need broadcasting right?"", 'comment_created': datetime.datetime(2022, 7, 9, 5, 12, 5, tzinfo=datetime.timezone.utc), 'commenter': 'Aman-Pandey-afk', 'type': 'User'}, {'comment_id': 917230845, 'comment_body': 'Both dt and epsilon_times_dt are float, so I guess no need to dot broadcast', 'comment_created': datetime.datetime(2022, 7, 9, 6, 48, 42, tzinfo=datetime.timezone.utc), 'commenter': 'Aman-Pandey-afk', 'type': 'User'}, {'comment_id': 917232775, 'comment_body': 'Yeah, I think I should define a single function only and call it broadcasted everywhere, the thing was API is meant to be used with vector inputs and not just broadcasted. We can mention in the docstrings though.', 'comment_created': datetime.datetime(2022, 7, 9, 7, 9, 28, tzinfo=datetime.timezone.utc), 'commenter': 'Aman-Pandey-afk', 'type': 'User'}, {'comment_id': 917255981, 'comment_body': 'Good point, then the first suggestion in https://github.com/matteobachetti/Stingray.jl/pull/2#discussion_r917182140 stands.', 'comment_created': datetime.datetime(2022, 7, 9, 11, 12, 2, tzinfo=datetime.timezone.utc), 'commenter': 'giordano', 'type': 'User'}, {'comment_id': 917256118, 'comment_body': ""Technically it does not, but here you're creating temporary intermediate arrays: if you broadcast everything you create a single array, because all operations are fused into a single loop.  Please read https://julialang.org/blog/2017/01/moredots/ and https://docs.julialang.org/en/v1/manual/performance-tips/#More-dots:-Fuse-vectorized-operations"", 'comment_created': datetime.datetime(2022, 7, 9, 11, 14, 26, tzinfo=datetime.timezone.utc), 'commenter': 'giordano', 'type': 'User'}, {'comment_id': 917256154, 'comment_body': 'Same as https://github.com/matteobachetti/Stingray.jl/pull/2#discussion_r917256118', 'comment_created': datetime.datetime(2022, 7, 9, 11, 15, 17, tzinfo=datetime.timezone.utc), 'commenter': 'giordano', 'type': 'User'}, {'comment_id': 917448333, 'comment_body': ""I previously wrote a comment (in the wrong page, so I deleted it) that this was overriding a `Base` method.  This wasn't true, you're instead shadowing it (less bad, but still a bit).  What's the use case for redefining `sqrt` in this way?  If the argument is negative, an error is usually the right thing to do, instead of poising everything with `NaN`, which is hard to debug."", 'comment_created': datetime.datetime(2022, 7, 10, 21, 25, 2, tzinfo=datetime.timezone.utc), 'commenter': 'giordano', 'type': 'User'}, {'comment_id': 918651919, 'comment_body': ""This function is showing not to be covered by tests, but it is being called on line 177 in the `fourier.jl` file which is showing to be covered. I have tried logging some statements in this function during test runs and it is actually being executed (otherwise the tests won't pass also)."", 'comment_created': datetime.datetime(2022, 7, 12, 7, 44, 12, tzinfo=datetime.timezone.utc), 'commenter': 'Aman-Pandey-afk', 'type': 'User'}, {'comment_id': 918720471, 'comment_body': 'https://github.com/BenLauwens/ResumableFunctions.jl/issues/46', 'comment_created': datetime.datetime(2022, 7, 12, 8, 54, 32, tzinfo=datetime.timezone.utc), 'commenter': 'giordano', 'type': 'User'}, {'comment_id': 919469964, 'comment_body': '```suggestion\r\n        return float(zero(power1))\r\n```', 'comment_created': datetime.datetime(2022, 7, 12, 22, 16, 23, tzinfo=datetime.timezone.utc), 'commenter': 'giordano', 'type': 'User'}, {'comment_id': 919470552, 'comment_body': 'Now this is working correctly!', 'comment_created': datetime.datetime(2022, 7, 12, 22, 17, 33, tzinfo=datetime.timezone.utc), 'commenter': 'giordano', 'type': 'User'}, {'comment_id': 919473283, 'comment_body': '?', 'comment_created': datetime.datetime(2022, 7, 12, 22, 22, 55, tzinfo=datetime.timezone.utc), 'commenter': 'giordano', 'type': 'User'}, {'comment_id': 919473543, 'comment_body': '```suggestion\r\n            event_times = @view times[idx0:idx1-1]\r\n            # astype here serves to avoid integer rounding issues in Windows,\r\n            # where long is a 32-bit integer.\r\n            cts = fit(Histogram, float.(event_times .- s); nbins=n_bin).weights\r\n        else\r\n            cts = float.(@view fluxes[idx0+1:idx1])\r\n```', 'comment_created': datetime.datetime(2022, 7, 12, 22, 23, 28, tzinfo=datetime.timezone.utc), 'commenter': 'giordano', 'type': 'User'}, {'comment_id': 919473930, 'comment_body': 'Is this correct?  `cts` is changing in a hot loop from a vector to a tuple of vectors?', 'comment_created': datetime.datetime(2022, 7, 12, 22, 24, 22, tzinfo=datetime.timezone.utc), 'commenter': 'giordano', 'type': 'User'}, {'comment_id': 919475249, 'comment_body': 'Am I missing something or `fgt0` here can be also `nothing`?', 'comment_created': datetime.datetime(2022, 7, 12, 22, 26, 52, tzinfo=datetime.timezone.utc), 'commenter': 'giordano', 'type': 'User'}, {'comment_id': 919476152, 'comment_body': 'Below `unnorm_pd1` and `unnorm_pd2` can become vectors, no?', 'comment_created': datetime.datetime(2022, 7, 12, 22, 28, 38, tzinfo=datetime.timezone.utc), 'commenter': 'giordano', 'type': 'User'}, {'comment_id': 919477294, 'comment_body': '`keepat!` modifies the vector in-place, no need to reassign the output to itself.\r\n```suggestion\r\n            keepat!(unnorm_power,fgt0)\r\n            if return_auxil\r\n                keepat!(unnorm_pd1,fgt0)\r\n                keepat!(unnorm_pd2,fgt0)\r\n```', 'comment_created': datetime.datetime(2022, 7, 12, 22, 31, 10, tzinfo=datetime.timezone.utc), 'commenter': 'giordano', 'type': 'User'}, {'comment_id': 919479048, 'comment_body': 'With\r\n```suggestion\r\n        unnorm_pds1 ./= n_ave\r\n        unnorm_pds2 ./= n_ave\r\n```\r\nyou modify `unnorm_pds1` and `unnorm_pds2` in-place without allocating temporary arrays and assigning them to these variables.', 'comment_created': datetime.datetime(2022, 7, 12, 22, 34, 29, tzinfo=datetime.timezone.utc), 'commenter': 'giordano', 'type': 'User'}, {'comment_id': 919696003, 'comment_body': 'Yeah, this can be both tuple or a simple vector which is element of the `flux_iterable`. If this is costly we may separate errors into another array and `isTuple` check then becomes an `isnothing` check.', 'comment_created': datetime.datetime(2022, 7, 13, 6, 31, 4, tzinfo=datetime.timezone.utc), 'commenter': 'Aman-Pandey-afk', 'type': 'User'}, {'comment_id': 919699438, 'comment_body': 'Cross is initialized with `nothing` which means `fgt0 = positive_fft_bins(n_bin)` will always be executed first time.', 'comment_created': datetime.datetime(2022, 7, 13, 6, 36, 20, tzinfo=datetime.timezone.utc), 'commenter': 'Aman-Pandey-afk', 'type': 'User'}, {'comment_id': 919707299, 'comment_body': 'Yeah I think it is a initialization problem, these are only used when return_auxil is true and as variables have a scope outside the if block too in Julia, I will remove these initialization.', 'comment_created': datetime.datetime(2022, 7, 13, 6, 47, 16, tzinfo=datetime.timezone.utc), 'commenter': 'Aman-Pandey-afk', 'type': 'User'}, {'comment_id': 919719138, 'comment_body': ""So any place I work with operation on both scalar and vectors, I should use dot broadcast right? (Shouldn't be this then the natural behaviour)"", 'comment_created': datetime.datetime(2022, 7, 13, 7, 3, 25, tzinfo=datetime.timezone.utc), 'commenter': 'Aman-Pandey-afk', 'type': 'User'}, {'comment_id': 919720080, 'comment_body': 'This was just a np.astype comment. I had kept them to understand the codes. Will change/remove them.', 'comment_created': datetime.datetime(2022, 7, 13, 7, 4, 42, tzinfo=datetime.timezone.utc), 'commenter': 'Aman-Pandey-afk', 'type': 'User'}, {'comment_id': 919726368, 'comment_body': 'Actually I should just return 0.0 now as the function is meant to be used with dot broadcast for vectors. ', 'comment_created': datetime.datetime(2022, 7, 13, 7, 12, 55, tzinfo=datetime.timezone.utc), 'commenter': 'Aman-Pandey-afk', 'type': 'User'}, {'comment_id': 921299906, 'comment_body': 'Indeed', 'comment_created': datetime.datetime(2022, 7, 14, 15, 40, 1, tzinfo=datetime.timezone.utc), 'commenter': 'matteobachetti', 'type': 'User'}, {'comment_id': 921596875, 'comment_body': 'Uhm, no, you can\'t do `x .= ...` with `x` being a scalar.  And no, in-place assignment is not going to be the ""natural"" (if you mean default) behaviour, because that\'s potentially disruptive.', 'comment_created': datetime.datetime(2022, 7, 14, 21, 48, 14, tzinfo=datetime.timezone.utc), 'commenter': 'giordano', 'type': 'User'}, {'comment_id': 922749615, 'comment_body': 'I think a better way to represent this is to define a ""normalisation"" type.  Something along these lines (also with better names than `Abs` and `Frac`, I\'m just copying the short names used here):\r\n```julia\r\nabstract type Normalization end\r\n\r\nstruct Abs{T} <: Normalization\r\n    meanrate::T\r\nend\r\npoisson_level(n::Abs) = 2 * n.meanrate\r\n\r\nstruct Frac{T} <: Normalization\r\n    meanrate::T\r\n    backrate::T\r\nend\r\npoisson_level(n::Frac) = 2 / (n.meanrate - n.backrate) ^ 2 * n.meanrate\r\n\r\nstruct Leahy <: Normalization end\r\npoisson_level(::Leahy) = 2\r\n\r\nstruct Unnormalized{T} <: Normalization\r\n    n_ph::T\r\nend\r\npoisson_level(n::Unnormalized) = n_ph\r\n```\r\nIt\'s idiomatic, it makes natural use of multiple dispatch (instead of dispatching on strings....), it\'s optimisable (the current implementation of `poisson_level` can\'t possibly be optimised by the compiler, since all arguments are basically `Any`), no need to abuse `nothing`, etc.\r\n\r\nSimilar things can be done elsewhere throughout the code, to make it more idiomatic and actually use Julia features, instead of writing Python code with Julia syntax.  But let\'s not focus on this now, this is mainly an idea for the future, to give a concrete suggestion for how to make the code more idiomatic.', 'comment_created': datetime.datetime(2022, 7, 16, 23, 38, 35, tzinfo=datetime.timezone.utc), 'commenter': 'giordano', 'type': 'User'}]","[{'commit_sha': 'b3f7e5597b970660d5dc3130c208c8c49dff17f7', 'committer_username': 'Aman-Pandey-afk', 'committer_name': 'Aman Pandey', 'committer_email': None, 'commit_date': datetime.datetime(2021, 1, 5, 18, 52, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '19ebbd195e7e803996cfcd419c37156b1ea433da', 'committer_username': 'Aman-Pandey-afk', 'committer_name': 'Aman Pandey', 'committer_email': None, 'commit_date': datetime.datetime(2021, 1, 5, 18, 52, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd8af43606bb77edb13fdc199c6d4a8073e3d3cd4', 'committer_username': 'Aman-Pandey-afk', 'committer_name': 'Aman Pandey', 'committer_email': None, 'commit_date': datetime.datetime(2021, 1, 5, 18, 52, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3eee67bc5b7b066b593ba85e341ff1b7bd170374', 'committer_username': 'Aman-Pandey-afk', 'committer_name': 'Aman Pandey', 'committer_email': None, 'commit_date': datetime.datetime(2021, 1, 5, 18, 52, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '35b70e7f5544583c0262289266f21f1cd22c8009', 'committer_username': 'Aman-Pandey-afk', 'committer_name': 'Aman Pandey', 'committer_email': None, 'commit_date': datetime.datetime(2021, 1, 5, 18, 52, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ecf16f08cb641a318280c17bf12ee4fcc035ea5e', 'committer_username': 'Aman-Pandey-afk', 'committer_name': 'Aman Pandey', 'committer_email': None, 'commit_date': datetime.datetime(2021, 1, 5, 18, 52, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '53d8ffe8ee308277ec596555752996d4329e5cbf', 'committer_username': 'Aman-Pandey-afk', 'committer_name': 'Aman Pandey', 'committer_email': None, 'commit_date': datetime.datetime(2021, 1, 5, 18, 52, 45, tzinfo=datetime.timezone.utc)}]",Aman Pandey,77021852,,User,,18,,10,6
1006423838,Implement GTI Reading and Handling,"GTI machinery and reading from file is implemented here, tests are passing and garbage collection is near to 0. Some points I would like to mention:

- Have used interconversion between Interval, Vectors and Matrices at many places which maybe less efficient but were required (like using `eachrow` sometimes which makes traversal in row order possible, which is inefficient as Julia matrices are stored in column-major order)
- I have once used nothing (in the `operations_on_gti` function) as it seemed convenient and efficient to me instead of assigning the `required_interval` an `IntervalSet` using the first element of `gti_list`.
- I removed type instabilities in most of the functions, but one seems to persist -: `setdiff(IntervalSet1, IntervalSet2)`. I looked ways to remove it but can't, it outputs an `IntervalSet` of `AbstractIntervals`.
- The `throw(ArgumentError)` is showing Any Type
- Also, in some of the functions `mapreduce` can give error if empty vectors are passed. Should I create appropriate Error throws for them? 
- The PR is based on https://github.com/matteobachetti/Stingray.jl/pull/2 . So it should be merged before this one if there are no problems except the refactoring. ",True,3,https://api.github.com/repos/StingraySoftware/Stingray.jl/pulls/3,https://github.com/StingraySoftware/Stingray.jl/pull/3,closed,415,27,6,2,2,17,0,0,[],2022-07-23 21:35:18+00:00,2022-08-08 07:50:38+00:00,1332920.0,"15 days, 10:15:20","[{'comment_id': 928179671, 'comment_body': '```suggestion\r\n    idx = findall(!iszero, d)\r\n```', 'comment_created': datetime.datetime(2022, 7, 24, 0, 43, 3, tzinfo=datetime.timezone.utc), 'commenter': 'giordano', 'type': 'User'}, {'comment_id': 928179883, 'comment_body': 'I think you wanted to use [`pushfirst!`](https://docs.julialang.org/en/v1/base/collections/#Base.pushfirst!)\r\n```suggestion\r\n        pushfirst!(idx, 1)\r\n```', 'comment_created': datetime.datetime(2022, 7, 24, 0, 46, 20, tzinfo=datetime.timezone.utc), 'commenter': 'giordano', 'type': 'User'}, {'comment_id': 928179940, 'comment_body': '```suggestion\r\n        push!(idx, condition.size + 1) # Edit\r\n```\r\nWhat does ""edit"" mean?', 'comment_created': datetime.datetime(2022, 7, 24, 0, 47, 8, tzinfo=datetime.timezone.utc), 'commenter': 'giordano', 'type': 'User'}, {'comment_id': 928180120, 'comment_body': '```suggestion\r\n    if any(@view(gti_start[begin+1:end]) < @view(gti_end[begin:end-1]))\r\n```', 'comment_created': datetime.datetime(2022, 7, 24, 0, 50, 5, tzinfo=datetime.timezone.utc), 'commenter': 'giordano', 'type': 'User'}, {'comment_id': 928180195, 'comment_body': 'Indentation is off ', 'comment_created': datetime.datetime(2022, 7, 24, 0, 51, 46, tzinfo=datetime.timezone.utc), 'commenter': 'giordano', 'type': 'User'}, {'comment_id': 928180279, 'comment_body': '`a < x < b` is more readable (and shorter) than `x > a && x < b`', 'comment_created': datetime.datetime(2022, 7, 24, 0, 53, tzinfo=datetime.timezone.utc), 'commenter': 'giordano', 'type': 'User'}, {'comment_id': 928314240, 'comment_body': '```suggestion\r\n    idx = findall(!iszero, d)\r\n```', 'comment_created': datetime.datetime(2022, 7, 24, 21, 24, 59, tzinfo=datetime.timezone.utc), 'commenter': 'giordano', 'type': 'User'}, {'comment_id': 928314328, 'comment_body': ""What happens if the length of `idx` isn't even?"", 'comment_created': datetime.datetime(2022, 7, 24, 21, 25, 52, tzinfo=datetime.timezone.utc), 'commenter': 'giordano', 'type': 'User'}, {'comment_id': 928314483, 'comment_body': 'No need to use parentheses around conditionals\r\n```suggestion\r\n    if isempty(dt)\r\n```', 'comment_created': datetime.datetime(2022, 7, 24, 21, 27, 11, tzinfo=datetime.timezone.utc), 'commenter': 'giordano', 'type': 'User'}, {'comment_id': 928314618, 'comment_body': 'This is printed as\r\n```\r\njulia> throw(ArgumentError(""The length of the condition and \r\n               time arrays must be the same.""))\r\nERROR: ArgumentError: The length of the condition and \r\n        time arrays must be the same.\r\n```\r\nwhich is quite odd.  Either don\'t break the line, or don\'t add indentation to the second line.', 'comment_created': datetime.datetime(2022, 7, 24, 21, 29, 8, tzinfo=datetime.timezone.utc), 'commenter': 'giordano', 'type': 'User'}, {'comment_id': 928314968, 'comment_body': '```suggestion\r\n    if isempty(times)\r\n```\r\nshould be the same, right?', 'comment_created': datetime.datetime(2022, 7, 24, 21, 32, 41, tzinfo=datetime.timezone.utc), 'commenter': 'giordano', 'type': 'User'}, {'comment_id': 928315067, 'comment_body': '```suggestion\r\n    if isempty(gtis)\r\n```', 'comment_created': datetime.datetime(2022, 7, 24, 21, 33, 45, tzinfo=datetime.timezone.utc), 'commenter': 'giordano', 'type': 'User'}, {'comment_id': 928315077, 'comment_body': '```suggestion\r\n    if isempty(gtis)\r\n```', 'comment_created': datetime.datetime(2022, 7, 24, 21, 33, 58, tzinfo=datetime.timezone.utc), 'commenter': 'giordano', 'type': 'User'}, {'comment_id': 928315233, 'comment_body': 'Did you return a matrix instead of a vector on purpose?', 'comment_created': datetime.datetime(2022, 7, 24, 21, 35, 38, tzinfo=datetime.timezone.utc), 'commenter': 'giordano', 'type': 'User'}, {'comment_id': 928315374, 'comment_body': 'I think you can do\r\n```suggestion\r\n    gti = FITS(fits_file) do lchdulist\r\n        gtihdu = lchdulist[gtistring]\r\n        get_gti_from_hdu(gtihdu)\r\n    end\r\n```', 'comment_created': datetime.datetime(2022, 7, 24, 21, 37, 32, tzinfo=datetime.timezone.utc), 'commenter': 'giordano', 'type': 'User'}, {'comment_id': 935620657, 'comment_body': 'Length of idx will always be even as if there is 010 or 101 in the body (excluding the ends) it diff is nonzero at two places. Else it start or end will be 1 and thus they are added .', 'comment_created': datetime.datetime(2022, 8, 2, 13, 49, 13, tzinfo=datetime.timezone.utc), 'commenter': 'Aman-Pandey-afk', 'type': 'User'}, {'comment_id': 935621916, 'comment_body': 'Yeah to return same types\r\n', 'comment_created': datetime.datetime(2022, 8, 2, 13, 50, 16, tzinfo=datetime.timezone.utc), 'commenter': 'Aman-Pandey-afk', 'type': 'User'}]","[{'commit_sha': 'fc9473e4336b5ae2d20929c95b0c67ff24b43a8b', 'committer_username': 'Aman-Pandey-afk', 'committer_name': 'Aman Pandey', 'committer_email': None, 'commit_date': datetime.datetime(2021, 1, 5, 18, 52, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cff7905f10b2bc368251834fad935a32153616e4', 'committer_username': 'Aman-Pandey-afk', 'committer_name': 'Aman Pandey', 'committer_email': None, 'commit_date': datetime.datetime(2021, 1, 5, 18, 52, 45, tzinfo=datetime.timezone.utc)}]",Aman Pandey,77021852,,User,,18,,10,6
1039305055,Implement EventList,"This is a basic implementation of `EventList` with essential APIs and tests
Things remaining:
- Implement EventList Writing
- LightCurve Methods
- Plot Testing
- Optimizing/Refactoring the Code

Cross-spectra/Periodograms APIs and documentation will be implemented soon in next PRs",False,7,https://api.github.com/repos/StingraySoftware/Stingray.jl/pulls/7,https://github.com/StingraySoftware/Stingray.jl/pull/7,open,624,9,10,3,2,24,0,0,[],2022-08-29 07:53:25+00:00,,0.0,,"[{'comment_id': 962205188, 'comment_body': 'Missing newline\r\n```suggestion\r\nend\r\n\r\n```', 'comment_created': datetime.datetime(2022, 9, 3, 21, 44, 54, tzinfo=datetime.timezone.utc), 'commenter': 'giordano', 'type': 'User'}, {'comment_id': 962205221, 'comment_body': 'Missing newline\r\n```suggestion\r\nend\r\n\r\n```', 'comment_created': datetime.datetime(2022, 9, 3, 21, 45, 5, tzinfo=datetime.timezone.utc), 'commenter': 'giordano', 'type': 'User'}, {'comment_id': 962205748, 'comment_body': 'This line is doing nothing in practice.  Maybe you wanted to assign the result to another variable?', 'comment_created': datetime.datetime(2022, 9, 3, 21, 52, 33, tzinfo=datetime.timezone.utc), 'commenter': 'giordano', 'type': 'User'}, {'comment_id': 962206095, 'comment_body': 'For the record, instead of assigning the result to a variable and immediately returning that variable, you can also just do\r\n```julia\r\nreturn FITS(filename) do hduList\r\n```\r\n(or even without the `return` keyword since the last expression is always returned anyway).', 'comment_created': datetime.datetime(2022, 9, 3, 21, 57, 8, tzinfo=datetime.timezone.utc), 'commenter': 'giordano', 'type': 'User'}, {'comment_id': 962206198, 'comment_body': 'This is a vector of `Any`.  What are you going to push to this vector?  Are they homogeneous elements?', 'comment_created': datetime.datetime(2022, 9, 3, 21, 58, 25, tzinfo=datetime.timezone.utc), 'commenter': 'giordano', 'type': 'User'}, {'comment_id': 962206369, 'comment_body': ""`Int` isn't necessarily `Int64` (it is on 64-bit systems, but not on 32-bit ones).  You either use `Int` or `Int64` everywhere, you have to be consistent.  If that helps in the choice, literal integers are of type `Int` (so they're actual type depends on the system where the code is run)"", 'comment_created': datetime.datetime(2022, 9, 3, 22, 1, 36, tzinfo=datetime.timezone.utc), 'commenter': 'giordano', 'type': 'User'}, {'comment_id': 962206571, 'comment_body': 'I\'d make the error message more explicit:\r\n```suggestion\r\n        throw(ArgumentError(""File format $(format) not yet supported.""))\r\n```\r\nSame below.', 'comment_created': datetime.datetime(2022, 9, 3, 22, 3, 32, tzinfo=datetime.timezone.utc), 'commenter': 'giordano', 'type': 'User'}, {'comment_id': 962206632, 'comment_body': '```suggestion\r\n    tstart = ev.gti[begin][begin]\r\n```', 'comment_created': datetime.datetime(2022, 9, 3, 22, 3, 58, tzinfo=datetime.timezone.utc), 'commenter': 'giordano', 'type': 'User'}, {'comment_id': 962206929, 'comment_body': 'This is printed like this:\r\n```\r\njulia> @warn ""GTIs in these two event lists do not overlap at all.\r\n                   Merging instead of returning an overlap""\r\nโ Warning: GTIs in these two event lists do not overlap at all.\r\nโ             Merging instead of returning an overlap\r\nโ @ Main REPL[55]:1\r\n```\r\nwhich shows a quite odd indentation.  Use a [triple-quoted string](https://docs.julialang.org/en/v1/manual/strings/#Triple-Quoted-String-Literals) instead\r\n```suggestion\r\n            @warn """"""\r\n            GTIs in these two event lists do not overlap at all.\r\n            Merging instead of returning an overlap.\r\n            """"""\r\n```', 'comment_created': datetime.datetime(2022, 9, 3, 22, 8, 35, tzinfo=datetime.timezone.utc), 'commenter': 'giordano', 'type': 'User'}, {'comment_id': 962206988, 'comment_body': '`[]` is of type `Any`, is that desired?', 'comment_created': datetime.datetime(2022, 9, 3, 22, 9, 2, tzinfo=datetime.timezone.utc), 'commenter': 'giordano', 'type': 'User'}, {'comment_id': 962207005, 'comment_body': ""For such small collections use tuples, which don't allocate memory, instead of vectors\r\n```suggestion\r\n    for attr in (:mission, :instr)\r\n```"", 'comment_created': datetime.datetime(2022, 9, 3, 22, 9, 42, tzinfo=datetime.timezone.utc), 'commenter': 'giordano', 'type': 'User'}, {'comment_id': 962207085, 'comment_body': 'Missing newline\r\n```suggestion\r\nend\r\n\r\n```', 'comment_created': datetime.datetime(2022, 9, 3, 22, 10, 16, tzinfo=datetime.timezone.utc), 'commenter': 'giordano', 'type': 'User'}, {'comment_id': 962292043, 'comment_body': 'They are values of keys of `EventLists` to be put in HDU header. They can be different', 'comment_created': datetime.datetime(2022, 9, 4, 10, 49, 42, tzinfo=datetime.timezone.utc), 'commenter': 'Aman-Pandey-afk', 'type': 'User'}, {'comment_id': 967680994, 'comment_body': 'I presume the first argument is to indicate the output type, right?  Most [`read`](https://docs.julialang.org/en/v1/base/io-network/#Base.read) methods have it as last argument, not first one', 'comment_created': datetime.datetime(2022, 9, 10, 17, 21, 55, tzinfo=datetime.timezone.utc), 'commenter': 'giordano', 'type': 'User'}, {'comment_id': 967681404, 'comment_body': ""It's preferable to [iterate](https://docs.julialang.org/en/v1/manual/arrays/#Iteration) over the actual indices of an array with [`eachindex`](https://docs.julialang.org/en/v1/base/arrays/#Base.eachindex)\r\n```suggestion\r\n    times = [lc.time[i] for i in eachindex(lc.time, lc.counts) for _ in 1:lc.counts[i]]\r\n```\r\nIn this way you also avoid the assumption that arrays are 1-based indexed, which is [***not*** necessarily the case](https://docs.julialang.org/en/v1/manual/arrays/#Linear-indexing)."", 'comment_created': datetime.datetime(2022, 9, 10, 17, 26, 37, tzinfo=datetime.timezone.utc), 'commenter': 'giordano', 'type': 'User'}, {'comment_id': 967681562, 'comment_body': 'I think `ev.git` has typically `Float64` values?\r\nhttps://github.com/StingraySoftware/Stingray.jl/blob/cdeaf8ea0714365a63d606f0dca0e9a89a5bca8a/src/events.jl#L10 For example you could use `zero(eltype(ev.gti))`.', 'comment_created': datetime.datetime(2022, 9, 10, 17, 28, 17, tzinfo=datetime.timezone.utc), 'commenter': 'giordano', 'type': 'User'}, {'comment_id': 967681743, 'comment_body': ""Now that I look closer to this, I'm a bit confused by the `ev.gti[index][index]` notation: what do you want to do?  That's ***not*** how [indexing of multi-dimensional arrays](https://docs.julialang.org/en/v1/manual/arrays/#man-array-indexing) (like matrices) work."", 'comment_created': datetime.datetime(2022, 9, 10, 17, 30, 29, tzinfo=datetime.timezone.utc), 'commenter': 'giordano', 'type': 'User'}, {'comment_id': 967682782, 'comment_body': 'Not performance-critical in the tests, but I think it makes more sense to just create a vector with all `mean_counts` instead of creating a vector of zeros and adding `mean_counts` to it?\r\n```suggestion\r\n        counts = fill(mean_counts, size(times))\r\n```\r\nThis also saves the allocation of one array.', 'comment_created': datetime.datetime(2022, 9, 10, 17, 40, 50, tzinfo=datetime.timezone.utc), 'commenter': 'giordano', 'type': 'User'}, {'comment_id': 967682842, 'comment_body': 'Same as above\r\n```suggestion\r\n            counts_test = fill(lc.counts[begin] * dt_new / lc.dt, size(lc_binned.time))\r\n```', 'comment_created': datetime.datetime(2022, 9, 10, 17, 41, 34, tzinfo=datetime.timezone.utc), 'commenter': 'giordano', 'type': 'User'}, {'comment_id': 967683001, 'comment_body': '```suggestion\r\n            counts_test = fill(lc.counts[begin] * dt_new / lc.dt, size(lc_binned.time))\r\n```', 'comment_created': datetime.datetime(2022, 9, 10, 17, 42, 53, tzinfo=datetime.timezone.utc), 'commenter': 'giordano', 'type': 'User'}, {'comment_id': 967683610, 'comment_body': 'Why going through a dataframe?  That looks unnecessary?  For example, you can get the `""TIME""` column with [`read(eventHDU, ""TIME"")`](http://juliaastro.org/FITSIO.jl/stable/api/#Base.read-Tuple{TableHDU,%20String}).', 'comment_created': datetime.datetime(2022, 9, 10, 17, 49, 34, tzinfo=datetime.timezone.utc), 'commenter': 'giordano', 'type': 'User'}, {'comment_id': 967684826, 'comment_body': ""How can `dx` be an `AbstractVector` if it's annotated as `Real`?"", 'comment_created': datetime.datetime(2022, 9, 10, 18, 2, 53, tzinfo=datetime.timezone.utc), 'commenter': 'giordano', 'type': 'User'}, {'comment_id': 967684940, 'comment_body': 'Fuse dot operations\r\n```suggestion\r\n        ybinerr = sqrt.(outputerr) /. step_size\r\n```', 'comment_created': datetime.datetime(2022, 9, 10, 18, 4, 27, tzinfo=datetime.timezone.utc), 'commenter': 'giordano', 'type': 'User'}, {'comment_id': 967685453, 'comment_body': 'Just double checking: are you entirely sure this is parsed as you expect?', 'comment_created': datetime.datetime(2022, 9, 10, 18, 9, 27, tzinfo=datetime.timezone.utc), 'commenter': 'giordano', 'type': 'User'}]","[{'commit_sha': 'fc25de254d08da69bffcfd325fa1208fb393a091', 'committer_username': 'Aman-Pandey-afk', 'committer_name': 'Aman Pandey', 'committer_email': None, 'commit_date': datetime.datetime(2021, 1, 5, 18, 52, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6daf452716b30238a355c0ea6ac38f0714f81f8b', 'committer_username': 'Aman-Pandey-afk', 'committer_name': 'Aman Pandey', 'committer_email': None, 'commit_date': datetime.datetime(2021, 1, 5, 18, 52, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cdeaf8ea0714365a63d606f0dca0e9a89a5bca8a', 'committer_username': 'Aman-Pandey-afk', 'committer_name': 'Aman Pandey', 'committer_email': None, 'commit_date': datetime.datetime(2021, 1, 5, 18, 52, 45, tzinfo=datetime.timezone.utc)}]",Aman Pandey,77021852,,User,,18,,10,6
1052742153,Documentation,"Documentation with API reference for every function and a basic usage guide (will extend it to calculate power and cross spectra soon). Will be deployed directly using GitHub actions on link- https://github.com/StingraySoftware/Stingray.jl
(Depends on Earlier PR, also has merge commits, I will resolve them once earlier PR is accepted).",False,9,https://api.github.com/repos/StingraySoftware/Stingray.jl/pulls/9,https://github.com/StingraySoftware/Stingray.jl/pull/9,open,1205,43,17,7,1,2,0,0,[],2022-09-12 03:42:39+00:00,,0.0,,[],"[{'commit_sha': 'ae118b37ef97df33e93dfed2882bd753204e606d', 'committer_username': 'Aman-Pandey-afk', 'committer_name': 'Aman Pandey', 'committer_email': None, 'commit_date': datetime.datetime(2021, 1, 5, 18, 52, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c05297788ff4cb2dd0d6aae7666c21a0cb622a43', 'committer_username': 'Aman-Pandey-afk', 'committer_name': 'Aman Pandey', 'committer_email': None, 'commit_date': datetime.datetime(2021, 1, 5, 18, 52, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fc25de254d08da69bffcfd325fa1208fb393a091', 'committer_username': 'Aman-Pandey-afk', 'committer_name': 'Aman Pandey', 'committer_email': None, 'commit_date': datetime.datetime(2021, 1, 5, 18, 52, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6daf452716b30238a355c0ea6ac38f0714f81f8b', 'committer_username': 'Aman-Pandey-afk', 'committer_name': 'Aman Pandey', 'committer_email': None, 'commit_date': datetime.datetime(2021, 1, 5, 18, 52, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cdeaf8ea0714365a63d606f0dca0e9a89a5bca8a', 'committer_username': 'Aman-Pandey-afk', 'committer_name': 'Aman Pandey', 'committer_email': None, 'commit_date': datetime.datetime(2021, 1, 5, 18, 52, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ba4ef681ffd5307d6ed079f04a91aedeab3bdbe8', 'committer_username': 'Aman-Pandey-afk', 'committer_name': 'Aman Pandey', 'committer_email': None, 'commit_date': datetime.datetime(2021, 1, 5, 18, 52, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'eee065986257612005f898eeb00a8029392e5d35', 'committer_username': 'Aman-Pandey-afk', 'committer_name': 'Aman Pandey', 'committer_email': None, 'commit_date': datetime.datetime(2021, 1, 5, 18, 52, 45, tzinfo=datetime.timezone.utc)}]",Aman Pandey,77021852,,User,,18,,10,6

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
469659401,Stingray.jl,StingraySoftware/Stingray.jl,Julia,0,3,4,2,19,3,9,3,"[{'id': 1052742153, 'number': 9, 'closed': None, 'created': datetime.datetime(2022, 9, 12, 3, 42, 39, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 1205, 'deletions': 43, 'state': 'open'}, {'id': 1039305055, 'number': 7, 'closed': None, 'created': datetime.datetime(2022, 8, 29, 7, 53, 25, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 624, 'deletions': 9, 'state': 'open'}, {'id': 1006423838, 'number': 3, 'closed': datetime.datetime(2022, 8, 8, 7, 50, 38, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 23, 21, 35, 18, tzinfo=datetime.timezone.utc), 'time_taken': 1332920.0, 'time_delta': '15 days, 10:15:20', 'additions': 415, 'deletions': 27, 'state': 'closed'}, {'id': 977139576, 'number': 2, 'closed': datetime.datetime(2022, 7, 25, 7, 27, 37, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 6, 23, 13, 11, 19, tzinfo=datetime.timezone.utc), 'time_taken': 2744178.0, 'time_delta': '31 days, 18:16:18', 'additions': 1386, 'deletions': 4, 'state': 'closed'}, {'id': 950717665, 'number': 1, 'closed': datetime.datetime(2022, 5, 30, 19, 42, 1, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 5, 30, 9, 7, 2, tzinfo=datetime.timezone.utc), 'time_taken': 38099.0, 'time_delta': '10:34:59', 'additions': 160, 'deletions': 0, 'state': 'closed'}]"
