pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
685224010,3D samples using OpenGL and GLFW (Mesh and point cloud visualization),"PR for GSoC'21 project on '3D samples using OpenGL and GLFW'.

It extends the OpenGL wrapper on `opencv2/core/opengl.hpp` with modern OpenGL features.
It also extends the highgui window system with a callback to free data when a window is destroyed and a getter for
the current OpenGL draw callback and user data.
Currently the highgui extension is implemented in the Win32, GTK and Qt backends.

A new namespace (cv::viz3d) was created on `opencv/modules/highgui` with functions which allow 3D visualization
of both meshes, point clouds, and 3D primitives such as boxes and spheres on the existing highgui window system.
GLFW ended up not being necessary so it was removed as a dependency.

Added a new example to show the features implemented by this module (example_cpp_viz3d).
I wrote a [blog post](https://riscadoa.com/other/opencv-gsoc-2/) containing more info about the work that was done (it has pictures).
I've also recorded a [video](https://www.youtube.com/watch?v=9zu__N3fWm4) showing the results.

### Pull Request Readiness Checklist

See details at https://github.com/opencv/opencv/wiki/How_to_contribute#making-a-good-pull-request

- [x] I agree to contribute to the project under Apache 2 License.
- [x] To the best of my knowledge, the proposed patch is not based on a code under GPL or other license that is incompatible with OpenCV
- [x] The PR is proposed to proper branch
- [x] There is reference to original bug report and related work
- [x] There is accuracy test, performance test and test data in opencv_extra repository, if applicable
      Patch to opencv_extra has the same branch name.
- [x] The feature is well documented and sample code can be built with the project CMake

",False,20371,https://api.github.com/repos/opencv/opencv/pulls/20371,https://github.com/opencv/opencv/pull/20371,open,191749,9,18,17,11,45,1,1,[{'name': 'GSoC'}],2021-07-07 13:59:43+00:00,,0.0,,"[{'comment_id': 723912436, 'comment_body': 'there is no need for an explicit constructor, an initialization list can be used', 'comment_created': datetime.datetime(2021, 10, 7, 7, 22, 21, tzinfo=datetime.timezone.utc), 'commenter': 'JulieBar', 'type': 'User'}, {'comment_id': 723912815, 'comment_body': 'there is no need for an explicit constructor, an initialization list can be used', 'comment_created': datetime.datetime(2021, 10, 7, 7, 22, 56, tzinfo=datetime.timezone.utc), 'commenter': 'JulieBar', 'type': 'User'}, {'comment_id': 724440487, 'comment_body': 'please reduce the amount of duplicated code if possible. you can implement methods: empty, create, release, setAutoRelease, bind, unbind, and then re-use it. ', 'comment_created': datetime.datetime(2021, 10, 7, 18, 42, 17, tzinfo=datetime.timezone.utc), 'commenter': 'JulieBar', 'type': 'User'}, {'comment_id': 724444512, 'comment_body': 'why is it at the end of the file? please insert it in the usual place\r\n', 'comment_created': datetime.datetime(2021, 10, 7, 18, 48, 7, tzinfo=datetime.timezone.utc), 'commenter': 'JulieBar', 'type': 'User'}, {'comment_id': 724452633, 'comment_body': 'it should be inside namespace\r\n`namespace cv { namespace viz3d {`', 'comment_created': datetime.datetime(2021, 10, 7, 18, 59, 46, tzinfo=datetime.timezone.utc), 'commenter': 'JulieBar', 'type': 'User'}, {'comment_id': 724453981, 'comment_body': 'no need to compare w/ nullptr\r\n```\r\nif (win)\r\n{\r\n    win->draw();\r\n}\r\n```', 'comment_created': datetime.datetime(2021, 10, 7, 19, 1, 47, tzinfo=datetime.timezone.utc), 'commenter': 'JulieBar', 'type': 'User'}, {'comment_id': 724454067, 'comment_body': 'no need to compare w/ nullptr', 'comment_created': datetime.datetime(2021, 10, 7, 19, 1, 57, tzinfo=datetime.timezone.utc), 'commenter': 'JulieBar', 'type': 'User'}, {'comment_id': 724454158, 'comment_body': 'no need to compare w/ nullptr', 'comment_created': datetime.datetime(2021, 10, 7, 19, 2, 6, tzinfo=datetime.timezone.utc), 'commenter': 'JulieBar', 'type': 'User'}, {'comment_id': 724455843, 'comment_body': ""there is something wrong with the alignment. don't use tabs"", 'comment_created': datetime.datetime(2021, 10, 7, 19, 4, 42, tzinfo=datetime.timezone.utc), 'commenter': 'JulieBar', 'type': 'User'}, {'comment_id': 724474003, 'comment_body': 'create a method to generate it automatically; you can generate a vector or array of Vec3f and use the constructor of cv::Mat which accept vector<T>', 'comment_created': datetime.datetime(2021, 10, 7, 19, 33, 11, tzinfo=datetime.timezone.utc), 'commenter': 'JulieBar', 'type': 'User'}, {'comment_id': 724474609, 'comment_body': 'do not use magic numbers 6, 24; get it from the size of previous array', 'comment_created': datetime.datetime(2021, 10, 7, 19, 34, 6, tzinfo=datetime.timezone.utc), 'commenter': 'JulieBar', 'type': 'User'}, {'comment_id': 724474735, 'comment_body': 'create a method to generate it automatically; you can generate a vector or array of Vec3f and use the constructor of cv::Mat which accept vector<T>', 'comment_created': datetime.datetime(2021, 10, 7, 19, 34, 22, tzinfo=datetime.timezone.utc), 'commenter': 'JulieBar', 'type': 'User'}, {'comment_id': 724475444, 'comment_body': 'no magic numbers; use std::array and get size', 'comment_created': datetime.datetime(2021, 10, 7, 19, 35, 28, tzinfo=datetime.timezone.utc), 'commenter': 'JulieBar', 'type': 'User'}, {'comment_id': 724475869, 'comment_body': ""create a method to generate it automatically in another place; it's difficult to read"", 'comment_created': datetime.datetime(2021, 10, 7, 19, 36, 7, tzinfo=datetime.timezone.utc), 'commenter': 'JulieBar', 'type': 'User'}, {'comment_id': 724476124, 'comment_body': 'no magic numbers', 'comment_created': datetime.datetime(2021, 10, 7, 19, 36, 30, tzinfo=datetime.timezone.utc), 'commenter': 'JulieBar', 'type': 'User'}, {'comment_id': 724478115, 'comment_body': 'add named constant for pi', 'comment_created': datetime.datetime(2021, 10, 7, 19, 39, 27, tzinfo=datetime.timezone.utc), 'commenter': 'JulieBar', 'type': 'User'}, {'comment_id': 724481739, 'comment_body': '`reserve` memory', 'comment_created': datetime.datetime(2021, 10, 7, 19, 45, 14, tzinfo=datetime.timezone.utc), 'commenter': 'JulieBar', 'type': 'User'}, {'comment_id': 724496576, 'comment_body': 'reserve data', 'comment_created': datetime.datetime(2021, 10, 7, 20, 8, 43, tzinfo=datetime.timezone.utc), 'commenter': 'JulieBar', 'type': 'User'}, {'comment_id': 724497679, 'comment_body': ""it's hard to read and easy to make a mistake; generate points automatically\r\n\r\n```\r\nget_x(x1, y1) {\r\n    return ex(0) * (x + x1) + ey(0) * (y + y1) + pz(0);\r\n}\r\nverts_data.insert(get_x(0, 0), get_y(0, 0), get_z(0, 0), color...\r\n```\r\nor even\r\n```\r\nget_point(x1, y1) {\r\n    return Vec3f(ex(0) * (x + x1) + ey(0) * (y + y1) + pz(0), ex(1) * (x + x1) + ey(1) * (y + y1) + pz(1), ex(2) * (x + x1) + ey(2) * (y + y1) + pz(2));\r\n}\r\nverts_data.push_back(get_point(1,0)) ...\r\n```\r\n\r\n"", 'comment_created': datetime.datetime(2021, 10, 7, 20, 10, 23, tzinfo=datetime.timezone.utc), 'commenter': 'JulieBar', 'type': 'User'}, {'comment_id': 724498954, 'comment_body': 'calculate `radius / l` once', 'comment_created': datetime.datetime(2021, 10, 7, 20, 12, 26, tzinfo=datetime.timezone.utc), 'commenter': 'JulieBar', 'type': 'User'}, {'comment_id': 724499956, 'comment_body': 'reserve', 'comment_created': datetime.datetime(2021, 10, 7, 20, 14, tzinfo=datetime.timezone.utc), 'commenter': 'JulieBar', 'type': 'User'}, {'comment_id': 724502416, 'comment_body': 'generate it', 'comment_created': datetime.datetime(2021, 10, 7, 20, 17, 57, tzinfo=datetime.timezone.utc), 'commenter': 'JulieBar', 'type': 'User'}, {'comment_id': 724505248, 'comment_body': 'it has already been merged #20013 ', 'comment_created': datetime.datetime(2021, 10, 7, 20, 22, 23, tzinfo=datetime.timezone.utc), 'commenter': 'JulieBar', 'type': 'User'}, {'comment_id': 724507411, 'comment_body': 'do not use C-style cast', 'comment_created': datetime.datetime(2021, 10, 7, 20, 25, 46, tzinfo=datetime.timezone.utc), 'commenter': 'JulieBar', 'type': 'User'}, {'comment_id': 724512303, 'comment_body': '`view = (Mat_<float>(4, 4) << s[0], s[1]...`', 'comment_created': datetime.datetime(2021, 10, 7, 20, 33, 14, tzinfo=datetime.timezone.utc), 'commenter': 'JulieBar', 'type': 'User'}, {'comment_id': 724513710, 'comment_body': 'do not use tabs', 'comment_created': datetime.datetime(2021, 10, 7, 20, 35, 13, tzinfo=datetime.timezone.utc), 'commenter': 'JulieBar', 'type': 'User'}, {'comment_id': 724514013, 'comment_body': '`if (this->grid)`', 'comment_created': datetime.datetime(2021, 10, 7, 20, 35, 38, tzinfo=datetime.timezone.utc), 'commenter': 'JulieBar', 'type': 'User'}, {'comment_id': 724514976, 'comment_body': '`if (obj)`', 'comment_created': datetime.datetime(2021, 10, 7, 20, 37, 2, tzinfo=datetime.timezone.utc), 'commenter': 'JulieBar', 'type': 'User'}, {'comment_id': 724518777, 'comment_body': 'you can solve it without while', 'comment_created': datetime.datetime(2021, 10, 7, 20, 42, 26, tzinfo=datetime.timezone.utc), 'commenter': 'JulieBar', 'type': 'User'}, {'comment_id': 724521247, 'comment_body': 'else if (this->grid)', 'comment_created': datetime.datetime(2021, 10, 7, 20, 46, 15, tzinfo=datetime.timezone.utc), 'commenter': 'JulieBar', 'type': 'User'}, {'comment_id': 724521769, 'comment_body': 'do not use c-style cast', 'comment_created': datetime.datetime(2021, 10, 7, 20, 47, 9, tzinfo=datetime.timezone.utc), 'commenter': 'JulieBar', 'type': 'User'}, {'comment_id': 724523757, 'comment_body': 'you can multiply Vec', 'comment_created': datetime.datetime(2021, 10, 7, 20, 50, 13, tzinfo=datetime.timezone.utc), 'commenter': 'JulieBar', 'type': 'User'}, {'comment_id': 724530779, 'comment_body': 'not sure but maybe you can use getRotationMatrix2D to calculate it (use (0,0) as center)', 'comment_created': datetime.datetime(2021, 10, 7, 21, 1, 38, tzinfo=datetime.timezone.utc), 'commenter': 'JulieBar', 'type': 'User'}, {'comment_id': 724533336, 'comment_body': 'decrease duplication\r\n```\r\ngenerate_attr(shader_loc) {\r\nreturn ogl::Attribute(\r\n\t\t\t    this->verts,\r\n\t\t\t    verts.size().width * sizeof(float), 0,\r\n\t\t\t    3, ogl::Attribute::FLOAT,\r\n\t\t\t    false, false,\r\n\t\t\t    shader_loc\r\n\t\t    );\r\n}\r\n```', 'comment_created': datetime.datetime(2021, 10, 7, 21, 5, 49, tzinfo=datetime.timezone.utc), 'commenter': 'JulieBar', 'type': 'User'}, {'comment_id': 724533775, 'comment_body': 'decrease duplication', 'comment_created': datetime.datetime(2021, 10, 7, 21, 6, 40, tzinfo=datetime.timezone.utc), 'commenter': 'JulieBar', 'type': 'User'}, {'comment_id': 724535026, 'comment_body': 'reuse `cv::viz3d::Mesh::Mesh(InputArray verts)` here', 'comment_created': datetime.datetime(2021, 10, 7, 21, 8, 38, tzinfo=datetime.timezone.utc), 'commenter': 'JulieBar', 'type': 'User'}, {'comment_id': 724535528, 'comment_body': 'decrease duplication and reuse functions', 'comment_created': datetime.datetime(2021, 10, 7, 21, 9, 22, tzinfo=datetime.timezone.utc), 'commenter': 'JulieBar', 'type': 'User'}, {'comment_id': 724537868, 'comment_body': 'replace tabs please', 'comment_created': datetime.datetime(2021, 10, 7, 21, 13, 24, tzinfo=datetime.timezone.utc), 'commenter': 'JulieBar', 'type': 'User'}, {'comment_id': 724543404, 'comment_body': 'do not push changes in formatting only', 'comment_created': datetime.datetime(2021, 10, 7, 21, 22, 44, tzinfo=datetime.timezone.utc), 'commenter': 'JulieBar', 'type': 'User'}, {'comment_id': 724543723, 'comment_body': 'do not push changes in formatting only ...', 'comment_created': datetime.datetime(2021, 10, 7, 21, 23, 17, tzinfo=datetime.timezone.utc), 'commenter': 'JulieBar', 'type': 'User'}, {'comment_id': 724545540, 'comment_body': 'use Points or Vec3f arithmetic operations', 'comment_created': datetime.datetime(2021, 10, 7, 21, 26, 35, tzinfo=datetime.timezone.utc), 'commenter': 'JulieBar', 'type': 'User'}, {'comment_id': 729655562, 'comment_body': ""Can you clarify what you mean by duplicated code and those methods? I'm not seeing how it relates to the code section you commented. If the duplicated code you're referring to is those #ifndef #else #endif macros, I don't think it is possible to remove them."", 'comment_created': datetime.datetime(2021, 10, 15, 9, 12, 14, tzinfo=datetime.timezone.utc), 'commenter': 'RiscadoA', 'type': 'User'}, {'comment_id': 753659749, 'comment_body': ""getRotationMatrix2D can't be used here because we need a 3x3 rotation matrix, not a 2x2 rotation matrix."", 'comment_created': datetime.datetime(2021, 11, 20, 10, 19, 28, tzinfo=datetime.timezone.utc), 'commenter': 'RiscadoA', 'type': 'User'}, {'comment_id': 753662988, 'comment_body': ""The while is probably much faster than doing it with pow, log, etc, so I think it's best to leave it as it is."", 'comment_created': datetime.datetime(2021, 11, 20, 10, 58, 31, tzinfo=datetime.timezone.utc), 'commenter': 'RiscadoA', 'type': 'User'}, {'comment_id': 753687652, 'comment_body': ""Maybe leaving it as it is better since right now viz3d doesn't depend on the 3d module. What do you think?"", 'comment_created': datetime.datetime(2021, 11, 20, 15, 54, 12, tzinfo=datetime.timezone.utc), 'commenter': 'RiscadoA', 'type': 'User'}]","[{'commit_sha': '70471cb4025d655f49585e719f3f8c6965cf64e4', 'committer_username': 'RiscadoA', 'committer_name': 'Ricardo Antunes', 'committer_email': 'me@riscadoa.com', 'commit_date': datetime.datetime(2017, 10, 15, 19, 42, 48, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f50643d300840f29543e24a5fb0ce70b95df8cf1', 'committer_username': 'RiscadoA', 'committer_name': 'Ricardo Antunes', 'committer_email': 'me@riscadoa.com', 'commit_date': datetime.datetime(2017, 10, 15, 19, 42, 48, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b513439b4f24d5a55057c79bc5a28e5d0e384ddb', 'committer_username': 'RiscadoA', 'committer_name': 'Ricardo Antunes', 'committer_email': 'me@riscadoa.com', 'commit_date': datetime.datetime(2017, 10, 15, 19, 42, 48, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd77cd975b6e1e7b2f5873f3e53ec4d2c248a1eea', 'committer_username': 'RiscadoA', 'committer_name': 'Ricardo Antunes', 'committer_email': 'me@riscadoa.com', 'commit_date': datetime.datetime(2017, 10, 15, 19, 42, 48, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4a422b630c6896383108c373222bd8475ef3d924', 'committer_username': 'RiscadoA', 'committer_name': 'Ricardo Antunes', 'committer_email': 'me@riscadoa.com', 'commit_date': datetime.datetime(2017, 10, 15, 19, 42, 48, tzinfo=datetime.timezone.utc)}, {'commit_sha': '201f665c564864e9d125ac2b7e253e1238894f01', 'committer_username': 'RiscadoA', 'committer_name': 'Ricardo Antunes', 'committer_email': 'me@riscadoa.com', 'commit_date': datetime.datetime(2017, 10, 15, 19, 42, 48, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3ea0ddf57fcc8007b01724a0871bdcfdb7084920', 'committer_username': 'RiscadoA', 'committer_name': 'Ricardo Antunes', 'committer_email': 'me@riscadoa.com', 'commit_date': datetime.datetime(2017, 10, 15, 19, 42, 48, tzinfo=datetime.timezone.utc)}, {'commit_sha': '74ba67eb216f4a6ee17faf63afe815b0823cd76a', 'committer_username': 'RiscadoA', 'committer_name': 'Ricardo Antunes', 'committer_email': 'me@riscadoa.com', 'commit_date': datetime.datetime(2017, 10, 15, 19, 42, 48, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ce3cbff7415cb5d9a436a0d22c14377da3314f09', 'committer_username': 'RiscadoA', 'committer_name': 'Ricardo Antunes', 'committer_email': 'me@riscadoa.com', 'commit_date': datetime.datetime(2017, 10, 15, 19, 42, 48, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7a5b39883819fec066e121e55cd363074c73b1fc', 'committer_username': 'RiscadoA', 'committer_name': 'Ricardo Antunes', 'committer_email': 'me@riscadoa.com', 'commit_date': datetime.datetime(2017, 10, 15, 19, 42, 48, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0fd33f27af482661525fcb383f98ac0dee5e986b', 'committer_username': 'RiscadoA', 'committer_name': 'Ricardo Antunes', 'committer_email': 'me@riscadoa.com', 'commit_date': datetime.datetime(2017, 10, 15, 19, 42, 48, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c8165c0aa8a8c8abe75acdfe4943ea6fbad84ef8', 'committer_username': 'RiscadoA', 'committer_name': 'Ricardo Antunes', 'committer_email': 'me@riscadoa.com', 'commit_date': datetime.datetime(2017, 10, 15, 19, 42, 48, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2f90b63c6f71f778013e5864724ff8f6990f4274', 'committer_username': 'RiscadoA', 'committer_name': 'Ricardo Antunes', 'committer_email': 'me@riscadoa.com', 'commit_date': datetime.datetime(2017, 10, 15, 19, 42, 48, tzinfo=datetime.timezone.utc)}, {'commit_sha': '31de7d59a5b478fd8cba5116e453e94447038d86', 'committer_username': 'RiscadoA', 'committer_name': 'Ricardo Antunes', 'committer_email': 'me@riscadoa.com', 'commit_date': datetime.datetime(2017, 10, 15, 19, 42, 48, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8ac6f636e2cf08813b597b0e1ac0729fb106e174', 'committer_username': 'RiscadoA', 'committer_name': 'Ricardo Antunes', 'committer_email': 'me@riscadoa.com', 'commit_date': datetime.datetime(2017, 10, 15, 19, 42, 48, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0588c866844ed60f508b572ed33aba1a6e45143c', 'committer_username': 'RiscadoA', 'committer_name': 'Ricardo Antunes', 'committer_email': 'me@riscadoa.com', 'commit_date': datetime.datetime(2017, 10, 15, 19, 42, 48, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f88abd86307922fe92f2eddbabbcb6e73b50c7be', 'committer_username': 'RiscadoA', 'committer_name': 'Ricardo Antunes', 'committer_email': 'me@riscadoa.com', 'commit_date': datetime.datetime(2017, 10, 15, 19, 42, 48, tzinfo=datetime.timezone.utc)}]",Ricardo Antunes,32821840,me@riscadoa.com,User,,55,,31,56

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
5108051,opencv,opencv/opencv,C++,55705,77635,2656,2195,34493,2602,6,135,"[{'id': 685224010, 'number': 20371, 'closed': None, 'created': datetime.datetime(2021, 7, 7, 13, 59, 43, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 191749, 'deletions': 9, 'state': 'open'}]"
