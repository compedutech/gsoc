pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
420806415,Create project skeleton,"**Create the project skeleton**
This is a basic Django project skeleton created without additional apps. A gitignore file is also included
Closes #1 ",True,10,https://api.github.com/repos/EBIvariation/trait-curation/pulls/10,https://github.com/EBIvariation/trait-curation/pull/10,closed,275,0,9,3,1,1,0,0,[],2020-05-20 14:56:19+00:00,2020-05-21 17:24:11+00:00,95272.0,"1 day, 2:27:52","[{'comment_id': 428798480, 'comment_body': ""That's a cool `.gitignore`! Very comprehensive"", 'comment_created': datetime.datetime(2020, 5, 21, 17, 22, 42, tzinfo=datetime.timezone.utc), 'commenter': 'tskir', 'type': 'User'}]","[{'commit_sha': '8bd6c788099658a0af274d2f9fa1842c1cd42be6', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3e539b068224d3057c47078aeff7737550099978', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b533ef71e700cfbf23b4873d32ee99997182320e', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}]",Giorgos Apostolopoulos,36301625,giorgosap@protonmail.com,User,,23,,16,19
424547061,Add heroku deployment dependencies,"This PR includes all the dependencies for deploying to Heroku as well as instructions on how to do so. Closes #2 .The instructions assume that a Heroku account has been set up.

1. Create a new Heroku app via the dashboard
2. Once created, navigate to the ""Deploy"" tab and in the ""Deployment Method"" menu, select ""GitHub"".
3. Search for the ""trait-curation"" repo and click ""Connect""
4. Below, in the Automatic deploys menu, select the master branch. (I would suggest leaving the ""Wait for CI"" box unchecked until we set up the CI)

The app should now be successfully deployed. Follow-up instructions are included in order to enable Review Apps, which automatically create a deployment instance for every new PR.

1. Navigate to the Deploy tab, in the ""Add this app to a pipeline"" menu.
2. Choose ""Create new pipeline"" and name it the same as the project
3. Moving to staging or production shouldn't matter given that this is a development environment 
4. We now have to connect the whole pipeline to GitHub as well. Navigate to Settings > Connect to GitHub and select the repository
5. Once the pipeline is created and connected to the GitHub repo, the left most column should have a ""Enable Review Apps"" button
5. Click it, select ""Create new review apps for new pull requests automatically "" and make sure to select the ""Create new review apps for new pull requests automatically"" option
6. Optionally, friendlier URL patterns for review apps can be chosen by navigating to Settings > Review Apps",True,11,https://api.github.com/repos/EBIvariation/trait-curation/pulls/11,https://github.com/EBIvariation/trait-curation/pull/11,closed,29,0,5,8,4,5,0,0,[],2020-05-28 14:59:11+00:00,2020-06-04 08:53:59+00:00,582888.0,"6 days, 17:54:48","[{'comment_id': 433189595, 'comment_body': 'PEP8 suggests that all files should add with a newline, could you please add that? Also for `Procfile`', 'comment_created': datetime.datetime(2020, 6, 1, 11, 49, 48, tzinfo=datetime.timezone.utc), 'commenter': 'tskir', 'type': 'User'}, {'comment_id': 434616916, 'comment_body': '```suggestion\r\n# Setting up deployment in Heroku and automated pull request deployment\r\n```', 'comment_created': datetime.datetime(2020, 6, 3, 14, 36, 27, tzinfo=datetime.timezone.utc), 'commenter': 'tskir', 'type': 'User'}, {'comment_id': 434617503, 'comment_body': '```suggestion\r\n\r\n```\r\nExtra blank line', 'comment_created': datetime.datetime(2020, 6, 3, 14, 37, 15, tzinfo=datetime.timezone.utc), 'commenter': 'tskir', 'type': 'User'}, {'comment_id': 434618337, 'comment_body': '```suggestion\r\n\r\nimport django_heroku\r\n```\r\n\r\nAdding a blank line between the end of docstring and the first statement', 'comment_created': datetime.datetime(2020, 6, 3, 14, 38, 22, tzinfo=datetime.timezone.utc), 'commenter': 'tskir', 'type': 'User'}, {'comment_id': 434620395, 'comment_body': 'Removing blank line from the start of the file and converting the first sentence into a header', 'comment_created': datetime.datetime(2020, 6, 3, 14, 41, 15, tzinfo=datetime.timezone.utc), 'commenter': 'tskir', 'type': 'User'}]","[{'commit_sha': 'c520575ccc622b4f6bfdb80614d98161a9eecfb1', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '03ade50ebc5037dfa11e9e4b08bc385c82230777', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c49b6079ce5f509705f85908230d03db570e9e1d', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5dec8cd4e0a6ef28695cbfe46737529695cf18c9', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7d4d6da5df57985db2cda193051ec6b6ae659c9d', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '170e624f51fa94c31aa8100e8550ccd8020bf9da', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'feab0587f6b716ded2bf2e2969228c95c075376d', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1576cf275ef8cc8ca4683bd92edf9579a836c9cc', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}]",Giorgos Apostolopoulos,36301625,giorgosap@protonmail.com,User,,23,,16,19
427712870,Create data documentation md file,"This PR contains a markdown file containing documentation for the data model as well as the trait status transitions, along with a mermaid diagram and its source code. Closes #7 , closes #8 

A consideration I have is that the table describing the trait statuses is very big and therefore the markdown required to output it is quite not user-friendly, so we might want to change the way we show that piece of information.

I also uploaded the png diagram to Imgur so that is stays permanently and that the link is small",True,13,https://api.github.com/repos/EBIvariation/trait-curation/pulls/13,https://github.com/EBIvariation/trait-curation/pull/13,closed,64,0,3,6,1,4,0,0,[],2020-06-04 09:38:00+00:00,2020-06-08 16:36:24+00:00,370704.0,"4 days, 6:58:24","[{'comment_id': 435493624, 'comment_body': ""Starting a separate paragraph in this context confuses Markdown, and causes it to break the list structure. I think it's better to restructure this so that column definitions are first-level items, and all comments and explanations are second (and so on) levels, something like this:\r\n\r\n```markdown\r\n- `traits` (id, trait_name, ...)\r\n  + The master status is meant to...\r\n- `users` (...)\r\n- `mappings` (...)\r\n  + The `is_reviewed` field status is...\r\n```"", 'comment_created': datetime.datetime(2020, 6, 4, 19, 17, 14, tzinfo=datetime.timezone.utc), 'commenter': 'tskir', 'type': 'User'}, {'comment_id': 435494800, 'comment_body': ""It's best to move this into a separate file, like `docs/statuses_diagram.mmd` (`.mmd` is [the official extension](https://github.com/mermaid-js/mermaid/issues/147) for Mermaid source code)."", 'comment_created': datetime.datetime(2020, 6, 4, 19, 19, 28, tzinfo=datetime.timezone.utc), 'commenter': 'tskir', 'type': 'User'}, {'comment_id': 435495657, 'comment_body': ""It's better to commit the PNG directly into repository as a binary file than to rely on an external resource (even though, admittedly, Imgur is much better than hotlinking Mermaid servers directly).\r\n\r\nWhile normally committing binary files (especially large) is bad, for documentation PNGs it's perfectly fine."", 'comment_created': datetime.datetime(2020, 6, 4, 19, 21, 10, tzinfo=datetime.timezone.utc), 'commenter': 'tskir', 'type': 'User'}, {'comment_id': 435498228, 'comment_body': ""Regarding the Markdown layout for this table (since you've raised concerns about it in the PR description): it's mostly fine as it is; this table is unlikely to be frequently changed, so the most important thing is that it should be readable in the final rendered Markdown, which it is.\r\n\r\nHowever, if you want to improve readability of the source code as well, I can suggest not trying to keep column delimiters aligned. Markdown allows for this, and in this case it will look prettier. Compare, before:\r\n\r\n```markdown\r\n| A necessary number of reviews is accumulated                                                                                                                                 | current              | reviewed                                                        | current                                                          |\r\n```\r\n\r\nAnd after:\r\n\r\n```markdown\r\n| A necessary number of reviews is accumulated | current | reviewed | current |\r\n```"", 'comment_created': datetime.datetime(2020, 6, 4, 19, 26, 18, tzinfo=datetime.timezone.utc), 'commenter': 'tskir', 'type': 'User'}]","[{'commit_sha': '21f200bcf981d3a84ede7b6aa723e0a933e9c018', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7b1d5d87971fe74d15dac6025807b8b19003ca3b', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2248fdff4a639cf82bec231c6fb3e831033593da', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '70c8042cee7fd0e56af36a4a25f4ad6de5f30731', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '24f66219847fce3f51c490f3b24923710a2e2a94', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '26f23b4b02b75a1cf39995f46f0b646fcd62d19c', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}]",Giorgos Apostolopoulos,36301625,giorgosap@protonmail.com,User,,23,,16,19
431288532,Prototype,"This PR includes the first prototype of the app, featuring the first implementation of the data model, as well as a table showing all the inserted data, and a page for each trait showing its details. Closes #3, closes #4 .

I'd like to draw the attention to the data model file (`traitcuration/traits/models.py`). In particular these points:

- The *on_delete* behaviour of the different models and whether they can ever be deleted or not. Right now I am treating them as such:
  + In the trait model, if its current mapping is deleted I am setting it to null. If we want to never delete a mapping from the database, the other option would be to protect it from being deleted
  + I am protecting traits as well as ontology terms  being deleted
  + With the current implementation, users can be deleted, and when they are, their reviews and comments are set to a null owner
- Also regarding the user model. I have created a new one, however Django already has a built in user model for authentication. I suggest we use the custom one for testing, and when we implement actual authentication we could see if it is more convenient. Let me know if you agree
- I would also appreciate if you could check the individual fields in the model file and see if any field that should be nullable isn't, and vice versa. (In Django, `null` means it can be empty in the database, and `blank` means that that field can be left empty when filling in Django forms. )",True,35,https://api.github.com/repos/EBIvariation/trait-curation/pulls/35,https://github.com/EBIvariation/trait-curation/pull/35,closed,669,4,42,37,2,25,0,0,[],2020-06-08 17:26:49+00:00,2020-06-17 23:20:16+00:00,798807.0,"9 days, 5:53:27","[{'comment_id': 439431472, 'comment_body': 'Should we add `unique` constrain on either the username or email ? ', 'comment_created': datetime.datetime(2020, 6, 12, 13, 52, 33, tzinfo=datetime.timezone.utc), 'commenter': 'tcezard', 'type': 'User'}, {'comment_id': 439433961, 'comment_body': 'Again, I feel like there should be some database level constrain of uniqueness on either the `uri` or/and the `curie`', 'comment_created': datetime.datetime(2020, 6, 12, 13, 56, 50, tzinfo=datetime.timezone.utc), 'commenter': 'tcezard', 'type': 'User'}, {'comment_id': 440148715, 'comment_body': '```suggestion\r\n\r\n\r\n```\r\n\r\nLooks like an extra blank line, unless this is intentional', 'comment_created': datetime.datetime(2020, 6, 15, 12, 45, 4, tzinfo=datetime.timezone.utc), 'commenter': 'tskir', 'type': 'User'}, {'comment_id': 440152010, 'comment_body': ""I'm not totally comfortable committing JS and CSS files of external libraries directly in the repository, unless there is good reason for it. Two alternatives which come to mind and are listed in [UIKit docs](https://getuikit.com/docs/installation#download):\r\n* Link to an external CDN (UIKit uses jsDelivr), or\r\n* Use Yarn, add a `package.json` file, and install all dependencies prior to deployment without explicitly including their files in the repository\r\n\r\nI think the second way with Yarn is the best. But I have very limited web dev experience, so please correct me if I'm wrong"", 'comment_created': datetime.datetime(2020, 6, 15, 12, 50, 33, tzinfo=datetime.timezone.utc), 'commenter': 'tskir', 'type': 'User'}, {'comment_id': 440158511, 'comment_body': ""I think there are two competing (but also complementary) approaches to use either `px` (absolute) or `rem` (relative) values for sizes of elements. It looks like there are benefits and drawbacks for all of them (I found a good summary here: https://stackoverflow.com/questions/11799236/should-i-use-px-or-rem-value-units-in-my-css), so I'll leave it up to you which way to choose. My understanding that currently we're going with pixels"", 'comment_created': datetime.datetime(2020, 6, 15, 13, 1, 43, tzinfo=datetime.timezone.utc), 'commenter': 'tskir', 'type': 'User'}, {'comment_id': 440160449, 'comment_body': ""If ClinVar one day introduces a trait name longer than 200 characters, what will happen under the current model? I'm guessing we should introduce a check into the import process (once that is implemented) to avoid a hard crash"", 'comment_created': datetime.datetime(2020, 6, 15, 13, 5, 3, tzinfo=datetime.timezone.utc), 'commenter': 'tskir', 'type': 'User'}, {'comment_id': 440161830, 'comment_body': ""```suggestion\r\n    current_mapping = models.ForeignKey('Mapping', on_delete=models.SET_NULL, null=True, blank=True)\r\n```\r\n\r\nThis fits on one line in less than 120 characters"", 'comment_created': datetime.datetime(2020, 6, 15, 13, 7, 20, tzinfo=datetime.timezone.utc), 'commenter': 'tskir', 'type': 'User'}, {'comment_id': 440162367, 'comment_body': 'Just to clarify: the status is a `CharField` only because this is a prototype, right? In the future it would have to become a `ComputedField`', 'comment_created': datetime.datetime(2020, 6, 15, 13, 8, 14, tzinfo=datetime.timezone.utc), 'commenter': 'tskir', 'type': 'User'}, {'comment_id': 440163196, 'comment_body': ""Also I just want to make sure that either there is already a ticket for implementing this part in the backend (in this case it should be linked under this comment), or not yet (in which case I'll create one)"", 'comment_created': datetime.datetime(2020, 6, 15, 13, 9, 41, tzinfo=datetime.timezone.utc), 'commenter': 'tskir', 'type': 'User'}, {'comment_id': 440163585, 'comment_body': 'This should also (eventually) be not a char, but some sort of enum', 'comment_created': datetime.datetime(2020, 6, 15, 13, 10, 16, tzinfo=datetime.timezone.utc), 'commenter': 'tskir', 'type': 'User'}, {'comment_id': 440224719, 'comment_body': ""I have mixed feelings about CDNs to be honest, mainly about security issues, although I could look at setting up referrer policies. On the other hand, I'm pretty sure using Yarn with Django will still require vendoring them, although I can search for a pip package to possibly solve that."", 'comment_created': datetime.datetime(2020, 6, 15, 14, 39, 33, tzinfo=datetime.timezone.utc), 'commenter': 'joj0s', 'type': 'User'}, {'comment_id': 440228747, 'comment_body': 'In my experience, em for font-sizes and px for the rest works well and responsively. Of course if any problem about that arises I can tweak the CSS as needed', 'comment_created': datetime.datetime(2020, 6, 15, 14, 45, 1, tzinfo=datetime.timezone.utc), 'commenter': 'joj0s', 'type': 'User'}, {'comment_id': 440229800, 'comment_body': 'https://github.com/epineda/django-yarn\r\n\r\nI found that, I will try it out and see how well it works', 'comment_created': datetime.datetime(2020, 6, 15, 14, 46, 27, tzinfo=datetime.timezone.utc), 'commenter': 'joj0s', 'type': 'User'}, {'comment_id': 440230474, 'comment_body': 'Yes, I can add that check. Should I increase the maximum length as well?', 'comment_created': datetime.datetime(2020, 6, 15, 14, 47, 23, tzinfo=datetime.timezone.utc), 'commenter': 'joj0s', 'type': 'User'}, {'comment_id': 440235059, 'comment_body': ""Yes that is so I can manually add a status via the Django Admin interface, but I have been thinking about that. There is no built-in `ComputedField` option in the Django ORM. There are two solutions to that. \r\n- Keep it as a CharField and add a check whenever a review is issued or whenever a mapping is changed to automatically compute the field's value\r\n- Use this package https://pypi.org/project/django-computedfields/"", 'comment_created': datetime.datetime(2020, 6, 15, 14, 53, 38, tzinfo=datetime.timezone.utc), 'commenter': 'joj0s', 'type': 'User'}, {'comment_id': 440236080, 'comment_body': 'It can be converted into an enum by adding a `choices` attribute to the field. I will add that in the implemented changes', 'comment_created': datetime.datetime(2020, 6, 15, 14, 55, 3, tzinfo=datetime.timezone.utc), 'commenter': 'joj0s', 'type': 'User'}, {'comment_id': 440246988, 'comment_body': 'Actually it turns out Django does take care of security issues as far as I understand. So I would say since we are not going to use a lot of static dependencies, we can use CDNs to remove the overhead of static files', 'comment_created': datetime.datetime(2020, 6, 15, 15, 10, 23, tzinfo=datetime.timezone.utc), 'commenter': 'joj0s', 'type': 'User'}, {'comment_id': 440249960, 'comment_body': 'You are right, I will remove that.', 'comment_created': datetime.datetime(2020, 6, 15, 15, 14, 28, tzinfo=datetime.timezone.utc), 'commenter': 'joj0s', 'type': 'User'}, {'comment_id': 441424975, 'comment_body': 'Actually I have given it some more thought. I decided to use rem globally (except for box-shadow properties) to maintain consistency across the CSS code. I think however that we should first merge the open PRs and then I can change it so that I can avoid as many merge conflicts as possible. Do you agree?', 'comment_created': datetime.datetime(2020, 6, 17, 9, 51, 34, tzinfo=datetime.timezone.utc), 'commenter': 'joj0s', 'type': 'User'}, {'comment_id': 441874180, 'comment_body': ""> I have mixed feelings about CDNs to be honest, mainly about security issues\r\n\r\nYeah, that's true, I realise CDNs have their pros and cons. If we were developing something handling highly sensitive data, then maybe I wouldn't go for them. But public CDNs are supposed to be reasonably safe, and I feel this is the case where simplicity and speed of development are more important.\r\n\r\nSo, TL;DR, I support use of CDNs."", 'comment_created': datetime.datetime(2020, 6, 17, 22, 45, 47, tzinfo=datetime.timezone.utc), 'commenter': 'tskir', 'type': 'User'}, {'comment_id': 441875864, 'comment_body': ""No, I think the current lenght limit is fine. If ClinVar actually adds a trait which name is monstrously large, then I _want_ the import to fail and to notify us in this way, because who knows what they can put in place of a trait name :)\r\n\r\nSince this PR only concerns the prototype, I've added a separate checkbox to #14 description to implement this check"", 'comment_created': datetime.datetime(2020, 6, 17, 22, 51, 25, tzinfo=datetime.timezone.utc), 'commenter': 'tskir', 'type': 'User'}, {'comment_id': 441876317, 'comment_body': ""@joj0s As far as I see, this hasn't been resolved yet. Granted, this is tiny, but if we're following 120 character line limit, then we might as well be consistent :)"", 'comment_created': datetime.datetime(2020, 6, 17, 22, 52, 54, tzinfo=datetime.timezone.utc), 'commenter': 'tskir', 'type': 'User'}, {'comment_id': 441877498, 'comment_body': ""I see. This looks like it can be a whole separate issue, I've created one: https://github.com/EBIvariation/trait-curation/issues/41. Let's use it to evaluate all those possible approaches."", 'comment_created': datetime.datetime(2020, 6, 17, 22, 56, 40, tzinfo=datetime.timezone.utc), 'commenter': 'tskir', 'type': 'User'}, {'comment_id': 441881504, 'comment_body': 'To avoid code duplication, I think this list should be moved to a variable, and then the list of statuses for the Trait should be this variable _plus_ ""awaiting review"".', 'comment_created': datetime.datetime(2020, 6, 17, 23, 9, 46, tzinfo=datetime.timezone.utc), 'commenter': 'tskir', 'type': 'User'}, {'comment_id': 441884202, 'comment_body': ""Yes, absolutely, this sounds sensible. I've created a separate meta-issue to track cases like this, when there are tiny things to change and it doesn't make sense to postpone merging otherwise good PRs: https://github.com/EBIvariation/trait-curation/issues/40"", 'comment_created': datetime.datetime(2020, 6, 17, 23, 18, 22, tzinfo=datetime.timezone.utc), 'commenter': 'tskir', 'type': 'User'}]","[{'commit_sha': 'dabc829929005fe439136a5424332d3dc7035617', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4a97e087560a7da861a1e6064df3cb2c51427980', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '047e5da730190163ffa3b9fa02041c820c18e4ee', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4cd3aae00ccf9392c4212a94aab46e464dcf8484', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b9b2dc00f8d29d34a4327176ccc88600ff9a51f8', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ad7f21391940a13956f8341fbd4b7a32f282b805', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e5fa3c202e634e5350c00ed781b20a03a09da54c', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '84bf976d8806ce4805e5b5ea00765159c07f43ae', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8fba884d5375eb32182836221a8eb2e46b6530e8', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c5cef20b7667e76491b42748afbc4df125e05a27', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '333f05f7879fc0509ea48d52ff9a04e231eaf1fb', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c4dc0e11fb0c4e28fd931b53c54863863dbd149e', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c8e530cd54bbafda062edd474b7c0df13634fcc4', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a1b188945b6914eb3027a553754be627ee2a1ffb', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9fdc5d7d4d710aa190d65a8aef307339e7a39c15', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4c72a5e459c94780a1c1e74b429287bf533876a1', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cc4c746cba206fdd5e9e35f909000fdc39c9bf75', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3cbdda491ab0aade4f66be1467f4c9a2e69479ac', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '34ecd9550c341343e662f62afbca318dcc6f3f18', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '46c965b2a334c29c907f6e2534b7cf4a06219599', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dcd2e0759d6ad7da805343268d8a28e24988e947', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b92621d3326cf6553bd2c388b4a76cd03430cf52', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a835dd560ac79e7805623e61ebcff2b2707f9722', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8b29dad5262df898ab6d823f3e208b8b06086735', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '688bdb8f42027203d738febce1324b8f0d26dc02', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '894775abad5c916243471c7ead3ca2cad0a0af28', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd475e9b648a59372bf50f45574167a2c41131dfb', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2b6c502ea7daf7adda68aaa1c629dac65913b210', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8519229123f11f3d5e1b61b14fa2cac43e63bb6b', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9467678247f7a7a20e0e29f3a4426a7eddb84418', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0172be65be815ff4f5d4895e583d1ac276f77a7e', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '17b092402d198a66197cf7a6bed79a7bd2c36133', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'eb975776c9612cc3467a8975b204bc1393b639c7', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '36015efedb9719fc6c490368a9b3c8b7e3810be8', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '74a1bcbc108c8cc9d30667c0e62a6cf0d2b12cd4', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ca474c3e4f4a640c361184604079f256a9e48826', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a69eae4b0187b6b106431e695bb590d67cad5ebe', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}]",Giorgos Apostolopoulos,36301625,giorgosap@protonmail.com,User,,23,,16,19
435051722,ClinVar data fetching and parsing,"This PR adds a script to download and parse data from ClinVar, as well as a dummy 'datasources' page, containing a button to trigger this proccess. Closes #14 ",True,39,https://api.github.com/repos/EBIvariation/trait-curation/pulls/39,https://github.com/EBIvariation/trait-curation/pull/39,closed,105,2,7,13,1,25,1,0,[{'name': 'Scope: Backend'}],2020-06-16 08:18:39+00:00,2020-06-26 07:54:10+00:00,862531.0,"9 days, 23:35:31","[{'comment_id': 441908286, 'comment_body': ""Could you add a docstring to the module please? Doesn't have to be long, just a general description"", 'comment_created': datetime.datetime(2020, 6, 18, 0, 47, 40, tzinfo=datetime.timezone.utc), 'commenter': 'tskir', 'type': 'User'}, {'comment_id': 441909290, 'comment_body': ""```suggestion\r\nimport csv\r\nimport gzip\r\nimport itertools\r\nimport os\r\nimport shutil\r\nimport urllib.request\r\n\r\nfrom ..models import Trait\r\n```\r\n\r\nAccording to [PEP8,](https://www.python.org/dev/peps/pep-0008/#imports) imports should be separated into groups: (core, external modules, project's own modules) with a single blank line between each group.\r\n\r\nI know this is _super_ nitpicking on my side and a very fine detail, sorry about that, I can get a little obsessive about code style :)"", 'comment_created': datetime.datetime(2020, 6, 18, 0, 51, 42, tzinfo=datetime.timezone.utc), 'commenter': 'tskir', 'type': 'User'}, {'comment_id': 441911925, 'comment_body': ""I think it's better to define this as a constant at the top of the module. Eventually this will be a configurable parameter (see https://github.com/EBIvariation/trait-curation/issues/32)."", 'comment_created': datetime.datetime(2020, 6, 18, 1, 2, 37, tzinfo=datetime.timezone.utc), 'commenter': 'tskir', 'type': 'User'}, {'comment_id': 441912569, 'comment_body': 'I wonder if explicitly unpacking this file is necessary—presumably, inside `parse_trait_names_and_source_records` we could just call `gzip.open` directly on the gzipped file instead of `open`.\r\n\r\n(However, downloading the file should be still left in a separate function.)', 'comment_created': datetime.datetime(2020, 6, 18, 1, 5, 45, tzinfo=datetime.timezone.utc), 'commenter': 'tskir', 'type': 'User'}, {'comment_id': 441913705, 'comment_body': ""```suggestion\r\n    This function downloads the latest ClinVar TSV release data and extracts it into a 'variant_summary.txt' file.\r\n```\r\n\r\nSince this fragment is 114 characters, which is less than 120, it should fit into one line. Obviously this is not a huge issue, but it would be better to have consistent line lengths. I'm not familiar with VSCode, but presumably it should have a feature to display a vertical line after a (configurable) number of columns, to demonstrate where lines should be wrapped.\r\n\r\nTo demonstrate what I'm talking about, this is how this feature looks in PyCharm (screenshot is not mine, some random pic from the web):\r\n![image](https://user-images.githubusercontent.com/10669118/84966203-d46d2980-b108-11ea-9ef3-254632be550a.png)\r\n"", 'comment_created': datetime.datetime(2020, 6, 18, 1, 10, 24, tzinfo=datetime.timezone.utc), 'commenter': 'tskir', 'type': 'User'}, {'comment_id': 441913917, 'comment_body': ""```suggestion\r\n    This function parses a downloaded 'variant_summary.txt' file, and returns a unique set of trait names\r\n    along with their calculated source record number, in a form of a dictionary where the key is the trait name\r\n    and the value is the source record number.\r\n```"", 'comment_created': datetime.datetime(2020, 6, 18, 1, 11, 15, tzinfo=datetime.timezone.utc), 'commenter': 'tskir', 'type': 'User'}, {'comment_id': 441914402, 'comment_body': ""Ah, I was just wondering why only 10 records get imported :) This is absolutely fine—we don't want to import everything, which would take forever and probably overrun free Heroku DB limits.\r\n\r\nHowever, could you please do two things:\r\n* Define this as a constant at the top of the module (in the future this will also be a user-configurable parameter, see #32)\r\n* Raise the limit from 10 to, say, 100, so that the selection of test traits is a bit larger"", 'comment_created': datetime.datetime(2020, 6, 18, 1, 13, 13, tzinfo=datetime.timezone.utc), 'commenter': 'tskir', 'type': 'User'}, {'comment_id': 441915822, 'comment_body': ""Looks like that this part is currently not how it's supposed to be. Consider the example:\r\n* **row_alleleid** = [42]\r\n* **row_rcv_list** = [RCV100, RCV200]\r\n* **row_phenotype_list** = [Disease A, Disease B]\r\n\r\nIf I understand correctly, itertools.product will produce four lists:\r\n* [42, RCV100, Disease A]\r\n* [42, RCV100, Disease B]\r\n* [42, RCV200, Disease A]\r\n* [42, RCV200, Disease B]\r\n\r\nHowever, items in **row_rcv_list** and **row_phenotype_list** cannot be conbined freely, they correspond pairwise to *each other.* So in this case, the output should be:\r\n* [42, RCV100, Disease A]\r\n* [42, RCV200, Disease B]"", 'comment_created': datetime.datetime(2020, 6, 18, 1, 18, 56, tzinfo=datetime.timezone.utc), 'commenter': 'tskir', 'type': 'User'}, {'comment_id': 441916393, 'comment_body': 'I think `list(...)` wrap is redundant here. itertools.product returns a generator which can and should be iterated directly.', 'comment_created': datetime.datetime(2020, 6, 18, 1, 21, 22, tzinfo=datetime.timezone.utc), 'commenter': 'tskir', 'type': 'User'}, {'comment_id': 441916457, 'comment_body': '```suggestion\r\n    and stores them in the database using the Django ORM.\r\n```', 'comment_created': datetime.datetime(2020, 6, 18, 1, 21, 38, tzinfo=datetime.timezone.utc), 'commenter': 'tskir', 'type': 'User'}, {'comment_id': 441916828, 'comment_body': ""Since errors could also happen during download and parse stages, I'm thinking a better place to handle exceptions would be inside fetch_data()"", 'comment_created': datetime.datetime(2020, 6, 18, 1, 23, 9, tzinfo=datetime.timezone.utc), 'commenter': 'tskir', 'type': 'User'}, {'comment_id': 441918828, 'comment_body': 'This is not a review comment, but I just wanted to say that elegant constructs like this is why I like Python. Recently I had to work on an existing project which is written in Java and uses Spring ORM. This is how [a similar operation](https://github.com/EBIvariation/metadata-ws/blob/master/metadata-ws/src/main/java/uk/ac/ebi/ampt2d/metadata/persistence/repositories/FileRepositoryCustom.java) (find-or-save) looks like in that world. That stuff gave me nightmares.', 'comment_created': datetime.datetime(2020, 6, 18, 1, 31, 15, tzinfo=datetime.timezone.utc), 'commenter': 'tskir', 'type': 'User'}, {'comment_id': 441919313, 'comment_body': 'Maybe I\'m confused, but what is the `<ul class=""messages"">` block supposed to do? I don\'t see message.tags populated anywhere, and the `{% if messages %}` conditional never seems to fire.', 'comment_created': datetime.datetime(2020, 6, 18, 1, 33, 19, tzinfo=datetime.timezone.utc), 'commenter': 'tskir', 'type': 'User'}, {'comment_id': 442071790, 'comment_body': ""Yeah, I was hoping the flake8 linter would point some of those details out but it turns out it doesn't, so please do keep correcting me on those. In the meantime I will read the full PEP8 manual though "", 'comment_created': datetime.datetime(2020, 6, 18, 8, 52, 10, tzinfo=datetime.timezone.utc), 'commenter': 'joj0s', 'type': 'User'}, {'comment_id': 442078834, 'comment_body': 'Thanks for the suggestion, I did something similar where I added a ruler in the editor to show the 120 character breakpoint', 'comment_created': datetime.datetime(2020, 6, 18, 9, 3, 23, tzinfo=datetime.timezone.utc), 'commenter': 'joj0s', 'type': 'User'}, {'comment_id': 442079324, 'comment_body': 'Yes, since I had the source record calculation wrong, I removed this line altogether ', 'comment_created': datetime.datetime(2020, 6, 18, 9, 4, 11, tzinfo=datetime.timezone.utc), 'commenter': 'joj0s', 'type': 'User'}, {'comment_id': 442080484, 'comment_body': ""Yes, that's my bad, i was testing Django messages and forgot to remove that from the page"", 'comment_created': datetime.datetime(2020, 6, 18, 9, 5, 54, tzinfo=datetime.timezone.utc), 'commenter': 'joj0s', 'type': 'User'}, {'comment_id': 442086635, 'comment_body': ""I am sadly familiar, I applied for https://github.com/EBIvariation/eva-ws last year :'( "", 'comment_created': datetime.datetime(2020, 6, 18, 9, 15, 51, tzinfo=datetime.timezone.utc), 'commenter': 'joj0s', 'type': 'User'}, {'comment_id': 442090401, 'comment_body': 'You are right, I moved the exception handling to the view', 'comment_created': datetime.datetime(2020, 6, 18, 9, 22, 14, tzinfo=datetime.timezone.utc), 'commenter': 'joj0s', 'type': 'User'}, {'comment_id': 442092550, 'comment_body': 'I did that and I raised the limit to 200', 'comment_created': datetime.datetime(2020, 6, 18, 9, 25, 38, tzinfo=datetime.timezone.utc), 'commenter': 'joj0s', 'type': 'User'}, {'comment_id': 442093298, 'comment_body': 'You are right, I removed the extraction and added opening via gzip', 'comment_created': datetime.datetime(2020, 6, 18, 9, 26, 49, tzinfo=datetime.timezone.utc), 'commenter': 'joj0s', 'type': 'User'}, {'comment_id': 444901467, 'comment_body': '```suggestion\r\nimport csv\r\nimport gzip\r\nimport itertools\r\nimport os\r\nimport urllib.request\r\n```', 'comment_created': datetime.datetime(2020, 6, 24, 13, 41, 3, tzinfo=datetime.timezone.utc), 'commenter': 'tskir', 'type': 'User'}, {'comment_id': 444904537, 'comment_body': 'This can be potentially simplified with a set comprehension expression + `zip` function:\r\n\r\n```suggestion\r\n            # Get every possible pair tuple of allele_id rcv_accessions and phenotypes for the current row\r\n            tuple_set = {(row_alleleid, rcv, phenotype) for rcv, phenotype in zip(row_rcv_list, row_phenotype_list)}\r\n```', 'comment_created': datetime.datetime(2020, 6, 24, 13, 45, 17, tzinfo=datetime.timezone.utc), 'commenter': 'tskir', 'type': 'User'}, {'comment_id': 444907318, 'comment_body': 'This can be simplified a little bit by using `setdefault` method of a dictionary:\r\n```suggestion\r\n                traits_dict.setdefault(trait_name, set())\r\n                traits_dict[trait_name].update([tuple])\r\n```\r\n\r\nActually, given that sets are mutable objects, one could even write it as a one-liner:\r\n\r\n```python\r\ntraits_dict.setdefault(trait_name, set()).update([tuple])\r\n```\r\n\r\nBut while this is neat, it also looks cryptic, so I try to avoid this.', 'comment_created': datetime.datetime(2020, 6, 24, 13, 49, 17, tzinfo=datetime.timezone.utc), 'commenter': 'tskir', 'type': 'User'}, {'comment_id': 444909197, 'comment_body': 'Looks like `trait.save()` can be moved from the if/else as a single final command:\r\n\r\n```suggestion\r\n        if Trait.objects.filter(name=trait_name).exists():\r\n            trait = Trait.objects.filter(name=trait_name).first()\r\n            trait.number_of_source_records = traits_dict[trait_name]\r\n        else:\r\n            trait = Trait(name=trait_name, status=""unmapped"",\r\n                          number_of_source_records=traits_dict[trait_name])\r\n        trait.save()\r\n```', 'comment_created': datetime.datetime(2020, 6, 24, 13, 51, 53, tzinfo=datetime.timezone.utc), 'commenter': 'tskir', 'type': 'User'}]","[{'commit_sha': 'd5f2b5b5ac826d17eea256759ad775275273f162', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0d0fd8de4ebfe0720082daea79659880615320ea', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a1fc9c2487ca4fe2c682a6c29b3ae861a97a8517', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '640ad9c556af5aafde0aca198a6ac353f07a785c', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2af8862288f08757e2293958ac6be710506453bf', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aac0e55b7d19a4aa0c3b33e825052bf7180af6d7', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7bc2aad8786124516e4bf95046c1b6e329f2b205', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6bc00bb58a6de530d198e0846fe0d03d6ce08a5d', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '02763a45dbc90bfccffa1f7b01cbb17b6ac1dae3', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b3c4ffae10799e14cbfbcde5761611b7cf44e2e9', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1564e62df74de0efd821d0016e164c487ad00984', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c3bef93bf05da230c7a64379166db0d2437455e8', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bd38d2adbb96e3ca97e4725fefe5980faae054cc', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}]",Giorgos Apostolopoulos,36301625,giorgosap@protonmail.com,User,,23,,16,19
441428710,Query ZOOMA to get possible mappings,This PR adds the ability to get mapping suggestions from ZOOMA and create terms and suggested mappings in the app's database accordingly. It also adds basic OLS queries to get info about the retrieved term. Closes #30 ,True,49,https://api.github.com/repos/EBIvariation/trait-curation/pulls/49,https://github.com/EBIvariation/trait-curation/pull/49,closed,306,26,15,36,8,40,1,0,[{'name': 'Scope: Backend'}],2020-06-29 13:49:47+00:00,2020-07-04 13:37:30+00:00,431263.0,"4 days, 23:47:43","[{'comment_id': 447128455, 'comment_body': 'Could you add a (simple) docstring please?', 'comment_created': datetime.datetime(2020, 6, 29, 17, 16, 50, tzinfo=datetime.timezone.utc), 'commenter': 'tskir', 'type': 'User'}, {'comment_id': 447130165, 'comment_body': 'I\'ve finally taken some time to research the different abbreviations. Looks like IRI is the most inclusive term, which is basically a URI which can have _any_ characters in it, not just ASCI, and it does not have to have percent encoding.\r\n\r\nSo I suggest we change all occurrences of ""uri"" to ""iri"", and it would also help to include a short description of what a IRI is.', 'comment_created': datetime.datetime(2020, 6, 29, 17, 19, 54, tzinfo=datetime.timezone.utc), 'commenter': 'tskir', 'type': 'User'}, {'comment_id': 447131272, 'comment_body': ""Essentially (if I've got that right),\r\n\r\nIRI = https://en.wiktionary.org/wiki/tréma\r\nURI = https://en.wiktionary.org/wiki/tr%C3%A9ma (**must** be percent encoded)"", 'comment_created': datetime.datetime(2020, 6, 29, 17, 21, 54, tzinfo=datetime.timezone.utc), 'commenter': 'tskir', 'type': 'User'}, {'comment_id': 447131955, 'comment_body': '```suggestion\r\n    results = requests.get(""{BASE_URL}ontologies/{ontology}/terms?iri={term_uri}"").json()\r\n```\r\n\r\nLooks like this can fit easily into <120 character line. Is it at all possible that a linter you use for Python misbehaves and has its line limit set to the default 80, producing these things from time to time?', 'comment_created': datetime.datetime(2020, 6, 29, 17, 23, 5, tzinfo=datetime.timezone.utc), 'commenter': 'tskir', 'type': 'User'}, {'comment_id': 447133042, 'comment_body': ""Do you know in which cases it returns an 'error'? Is it only for missing terms, or can there be other scenarios?"", 'comment_created': datetime.datetime(2020, 6, 29, 17, 24, 58, tzinfo=datetime.timezone.utc), 'commenter': 'tskir', 'type': 'User'}, {'comment_id': 447133652, 'comment_body': 'When parsing a response, it\'s useful to provide example values in comments to make it more readable. E.g.:\r\n\r\n```python\r\nterm_curie = term_info[""obo_id""]  # E.g. \'MONDO:123456\'\r\nterm_label = term_info[""label""]  # E.g. \'Some disease name\'\r\n```', 'comment_created': datetime.datetime(2020, 6, 29, 17, 25, 56, tzinfo=datetime.timezone.utc), 'commenter': 'tskir', 'type': 'User'}, {'comment_id': 447134082, 'comment_body': 'Could you provide an example of input/output values to make it more clear which transformations are happening?', 'comment_created': datetime.datetime(2020, 6, 29, 17, 26, 45, tzinfo=datetime.timezone.utc), 'commenter': 'tskir', 'type': 'User'}, {'comment_id': 447136110, 'comment_body': ""It looks to me that this is not the best place to decide the final term status. I get the logic (you first call EFO, and other ontologies are queried _only if_ nothing was found in EFO), but it's better to make it separate and explicit. That is, `make_ols_query` should only return whether the requested term is in the requested ontology; and the final trait status calculations should be done outside of it in `zooma.py`"", 'comment_created': datetime.datetime(2020, 6, 29, 17, 30, 14, tzinfo=datetime.timezone.utc), 'commenter': 'tskir', 'type': 'User'}, {'comment_id': 447138350, 'comment_body': 'And a small docstring here as well, please', 'comment_created': datetime.datetime(2020, 6, 29, 17, 34, 8, tzinfo=datetime.timezone.utc), 'commenter': 'tskir', 'type': 'User'}, {'comment_id': 447139047, 'comment_body': ""I'm wondering if we should start collecting all base URLs and configuration settings in a separate module (`config`?) to make it easier in the future to make all of them customizable via a configuration page.\r\n\r\nThis is not necessary to do as part of this PR, just something to consider"", 'comment_created': datetime.datetime(2020, 6, 29, 17, 35, 10, tzinfo=datetime.timezone.utc), 'commenter': 'tskir', 'type': 'User'}, {'comment_id': 447139558, 'comment_body': 'I think there should be a comment here explaining in which situations a term can be None, and what this implies', 'comment_created': datetime.datetime(2020, 6, 29, 17, 36, 7, tzinfo=datetime.timezone.utc), 'commenter': 'tskir', 'type': 'User'}, {'comment_id': 447140729, 'comment_body': ""```suggestion\r\n    term = OntologyTerm(curie=term_info['curie'], uri=term_uri, label=term_info['label'], status=term_info['status'])\r\n```\r\n\r\nFits into one line <120 characters"", 'comment_created': datetime.datetime(2020, 6, 29, 17, 38, 19, tzinfo=datetime.timezone.utc), 'commenter': 'tskir', 'type': 'User'}, {'comment_id': 447498510, 'comment_body': ""Sure, I'll change that in the data model as well"", 'comment_created': datetime.datetime(2020, 6, 30, 8, 17, 20, tzinfo=datetime.timezone.utc), 'commenter': 'joj0s', 'type': 'User'}, {'comment_id': 447503732, 'comment_body': ""Yeah I have given that some thought. The only cases for errors I have found are '404 not found', the most common one for missing terms, and network error. Should I handle network errors any differently?"", 'comment_created': datetime.datetime(2020, 6, 30, 8, 25, 19, tzinfo=datetime.timezone.utc), 'commenter': 'joj0s', 'type': 'User'}, {'comment_id': 447532870, 'comment_body': 'Hmm yes that seems like a good option, I will create an issue for that.', 'comment_created': datetime.datetime(2020, 6, 30, 9, 9, 50, tzinfo=datetime.timezone.utc), 'commenter': 'joj0s', 'type': 'User'}, {'comment_id': 447535169, 'comment_body': ""Yes, this is caused by autopep8. I thought I had fixed that, but now it seems it's fixed for good, sorry for the inconvenience"", 'comment_created': datetime.datetime(2020, 6, 30, 9, 13, 21, tzinfo=datetime.timezone.utc), 'commenter': 'joj0s', 'type': 'User'}, {'comment_id': 447852369, 'comment_body': 'Yes, network errors definitely have to be handled separately, as those ""errors"" are two really different cases:\r\n\r\n- Term is (really) not found in EFO → requires import\r\n- Term is ""not found"" in EFO due to network error → request should be retried, otherwise we will either get an incorrect status (when querying OLS) or we will miss some suggestions (when querying ZOOMA)\r\n\r\nI suggest you handle requests in the following manner:\r\n* For network errors, catch-and-retry with `@retry` decorator (see example [here](https://github.com/EBIvariation/vep-mapping-pipeline/blob/eee47471312cbcf08955acdd68d76851c5ffa5b4/vep_mapping_pipeline/consequence_mapping.py#L54)). If for a given entity we have exceeded the maximum number of retries, the entire update process should be halted and an error raised.\r\n  + By the way, in production, all update operations (from ClinVar or from ZOOMA) will have to be started as transactions and rolled back in case of any exception, with the error being logged. I have created a future issue for this: https://github.com/EBIvariation/trait-curation/issues/52\r\n* For _expected_ HTTP error codes, like a term being not found in EFO, verify that the error is of the right type: check the code and possibly also the contents of the response body (if applicable)\r\n* For all other _unexpected conditions_ (like HTTP error codes which are not 404) raise a log an exception', 'comment_created': datetime.datetime(2020, 6, 30, 17, 20, 9, tzinfo=datetime.timezone.utc), 'commenter': 'tskir', 'type': 'User'}, {'comment_id': 447855294, 'comment_body': 'Not a necessary change (at least for now) but a suggestion: given multiple logging commands (some of which will make it into production, some required only for development), it would be slightly easier to use the `logging` module and to define specific calls as ""error"", ""info"", ""debug"" etc.\r\n\r\nExample of using the logging module: https://github.com/EBIvariation/vep-mapping-pipeline/blob/master/vep_mapping_pipeline/consequence_mapping.py (Ctrl+F for ""logging"" and then ""logger"")', 'comment_created': datetime.datetime(2020, 6, 30, 17, 24, 34, tzinfo=datetime.timezone.utc), 'commenter': 'tskir', 'type': 'User'}, {'comment_id': 447856988, 'comment_body': 'Looks like this only adds suggestions but never removes the old ones. I think during the suggestion update cycle we can also remove old suggestions for a trait which are:\r\n* Originally created by ZOOMA\r\n* **Not** selected as an accepted suggestion for this trait', 'comment_created': datetime.datetime(2020, 6, 30, 17, 26, 56, tzinfo=datetime.timezone.utc), 'commenter': 'tskir', 'type': 'User'}, {'comment_id': 447857182, 'comment_body': '(Otherwise the list of suggestions will just grow and grow and grow)', 'comment_created': datetime.datetime(2020, 6, 30, 17, 27, 7, tzinfo=datetime.timezone.utc), 'commenter': 'tskir', 'type': 'User'}, {'comment_id': 447861052, 'comment_body': 'Not sure if I get the logic here. What about the case when the term _is_ already in the database? Looks like `if term is not None` will be False and the mapping suggestion will not be created. But this shouldn\'t be the case. Consider the example:\r\n* Originally ""Trait A"" had a ZOOMA suggestion to TERM:123456\r\n* During next update iteration, we ingest ""Trait A, some subtype"", and ZOOMA also suggests to map it to TERM:123456. In this case, we should just create the mapping suggestion linking ""Trait A, some subtype"" to the _existing_ term.', 'comment_created': datetime.datetime(2020, 6, 30, 17, 33, tzinfo=datetime.timezone.utc), 'commenter': 'tskir', 'type': 'User'}, {'comment_id': 447861534, 'comment_body': 'This can be most easily implemented by returning the existing term from the database (instead of None) in `create_local_term`', 'comment_created': datetime.datetime(2020, 6, 30, 17, 33, 46, tzinfo=datetime.timezone.utc), 'commenter': 'tskir', 'type': 'User'}, {'comment_id': 447862644, 'comment_body': 'This situation (which is really unusual) should immediately change the term status to ""deleted"" (we do have ""deleted"" in the final db model, right?)', 'comment_created': datetime.datetime(2020, 6, 30, 17, 35, 16, tzinfo=datetime.timezone.utc), 'commenter': 'tskir', 'type': 'User'}, {'comment_id': 447863354, 'comment_body': 'This should ideally use not the literal ""obsolete"", but some enum value which is defined just once for the entire project. I think we already have one somewhere in data models', 'comment_created': datetime.datetime(2020, 6, 30, 17, 36, 15, tzinfo=datetime.timezone.utc), 'commenter': 'tskir', 'type': 'User'}, {'comment_id': 447864701, 'comment_body': 'What happens if the mapping suggestion for this combination of trait and term already exists? Looks like it is going to get duplicated.\r\n\r\nBTW, is there a way to specify complex UNIQUE constraints in the Django data model? Like, (trait_id, term_id) pair should be unique across all mapping suggestions and this should be enforced.', 'comment_created': datetime.datetime(2020, 6, 30, 17, 38, 24, tzinfo=datetime.timezone.utc), 'commenter': 'tskir', 'type': 'User'}, {'comment_id': 448224080, 'comment_body': 'Regarding the error handling, just to clarify that I am proceeding as I should, I am first checking if I get a 404, in which case I return `None` as the result of the query. In any other case, I am using `response.raise_for_status()` to raise potential exceptions. Should I let `retry` catch unexpected HTTP errors and make the query again (this is what is done in the example you provided) or should I have it catch only network errors?', 'comment_created': datetime.datetime(2020, 7, 1, 9, 5, 19, tzinfo=datetime.timezone.utc), 'commenter': 'joj0s', 'type': 'User'}, {'comment_id': 448226254, 'comment_body': 'So basically remove any preexisting suggestions for a trait made by ZOOMA that are not in any current or previous mappings for that trait and repopulate them in each cycle, right?', 'comment_created': datetime.datetime(2020, 7, 1, 9, 9, 13, tzinfo=datetime.timezone.utc), 'commenter': 'joj0s', 'type': 'User'}, {'comment_id': 448255120, 'comment_body': 'https://docs.djangoproject.com/en/3.0/ref/models/options/#unique-together This is what we need I think, I will add that', 'comment_created': datetime.datetime(2020, 7, 1, 10, 0, 4, tzinfo=datetime.timezone.utc), 'commenter': 'joj0s', 'type': 'User'}, {'comment_id': 448293620, 'comment_body': ""OK so the enum situation is kind of confusing right now. This is what we currently have:\r\n\r\n- A list of possible status fields (values and human-readable labels) for traits and terms *outside* of the model classes, so that it can be shared between those two, and just have the trait status field add another value to this array, for the 'Awaiting Review' status.\r\n```\r\nSTATUS_FIELDS = [\r\n    ('current', 'Current'),\r\n    ('unmapped', 'Unmapped'),\r\n    ('obsolete', 'Obsolete'),\r\n    ('deleted', 'Deleted'),\r\n    ('needs_import', 'Needs Import'),\r\n    ('awaiting_import', 'Awaiting Import'),\r\n    ('needs_creation', 'Needs Creation'),\r\n    ('awaiting_creation', 'Awaiting Creation'),\r\n]\r\n```\r\n\r\n- Models using these choices as such:\r\n ```\r\nclass Trait(models.Model):\r\n    status = models.CharField(max_length=50, choices=STATUS_FIELDS + [('awaiting_review', 'Awaiting Review')])\r\n    \r\nclass OntologyTerm(models.Model):\r\n    status = models.CharField(max_length=50, choices=STATUS_FIELDS)\r\n```\r\n\r\nThis provides enum functionality and validation if a value which is not in STATUS_FIELDS is provided. \r\n\r\nThe problem with that if we don't want to use literals to insert values, especially since the STATUS_FIELDS array is defined outside of each class, is that getting the enum value defined in the models is kind of hard to read and hard to use. For example, to get all possible values one would have to do `Trait._meta.get_field('status').choices` which would return the `STATUS_FIELDS` array exactly as defined, and then use array and tuple methods to get the value.\r\n\r\nA possible alternative to that, as described here https://adamj.eu/tech/2020/01/27/moving-to-django-3-field-choices-enumeration-types/ is to create a TextChoices subclass for the status values:\r\n```\r\nfrom django.db import models\r\n\r\n\r\nclass Status(models.TextChoices):\r\n    CURRENT = 'current', 'Current'\r\n    UNMAPPED = 'unmapped', 'Unmapped'\r\n\r\n\r\nclass Trait(models.Model):\r\n    status = models.CharField(\r\n        max_length=20,\r\n        choices=Status.choices,\r\n        default=Status.UNMAPPED,\r\n    )\r\n```\r\n\r\nIt can then be accessed like this `unmapped_traits = Trait.objects.filter(status=Status.UNMAPPED)`\r\nThe problem with that is that I'm not sure how we would add the 'awaiting_review' specifically to the Trait model, maybe another class that inherits?\r\n"", 'comment_created': datetime.datetime(2020, 7, 1, 11, 17, 26, tzinfo=datetime.timezone.utc), 'commenter': 'joj0s', 'type': 'User'}, {'comment_id': 448694485, 'comment_body': ""> Regarding the error handling, just to clarify that I am proceeding as I should, I am first checking if I get a 404, in which case I return `None` as the result of the query.\r\n\r\nYes, this is fine, as 404 is an expected error in this case.\r\n\r\n> In any other case, I am using `response.raise_for_status()` to raise potential exceptions. Should I let `retry` catch unexpected HTTP errors and make the query again (this is what is done in the example you provided) or should I have it catch only network errors?\r\n\r\nHmm. Yes, good question. On the one hand, everything but 200 or 404 is not expected from OLS. On the other hand, sometimes the server can have a hiccup and return an unusual code _sporadically,_ which probably shouldn't fail the entire process right away.\r\n\r\nSo yes, let's use the `retry` as specified in my example, where it catches both network errors from `requests.get()/post()` _and_ unusual sporadic HTTP responses from `raise_for_status()`. Thank you for noticing and asking about this!"", 'comment_created': datetime.datetime(2020, 7, 2, 1, 12, 30, tzinfo=datetime.timezone.utc), 'commenter': 'tskir', 'type': 'User'}, {'comment_id': 448694810, 'comment_body': ""I've replied in the thread which we already have for error handling above: https://github.com/EBIvariation/trait-curation/pull/49#discussion_r448694485. The GitHub interface is annoying in that, when some comment was made during previous review iterations, it will duplicate it for the newest iteration, but won't allow to actually comment"", 'comment_created': datetime.datetime(2020, 7, 2, 1, 13, 50, tzinfo=datetime.timezone.utc), 'commenter': 'tskir', 'type': 'User'}, {'comment_id': 448695454, 'comment_body': ""Yes, correct. Also, thanks for noticing that the _previous_ mappings also shouldn't be removed, I didn't think of that at all.\r\n\r\nPerhaps this removal could even be done by a single SQL command for all suggestions at once to improve performance (although this sort of optimisation is not necessary at this point)."", 'comment_created': datetime.datetime(2020, 7, 2, 1, 16, 31, tzinfo=datetime.timezone.utc), 'commenter': 'tskir', 'type': 'User'}, {'comment_id': 448698337, 'comment_body': 'Yes, sorry, I didn\'t mean to imply that we would get the values _from_ the models, understandably this could be cumbersome. What I meant is that the `\'current\'` literal should only be defined at one place in the entire code, and then used by import from there.\r\n\r\nThe simplest solution I had in mind for that is converting the `STATUS_FIELDS` tuple into a plain [enum](https://docs.python.org/3/library/enum.html) and then, rather than using `\'current\'` inside zooma.py, use something like `STATUS_FIELDS.CURRENT.name`\r\n\r\nThe models.TextChoices class which you found looks very similar to what plain enums do. You can choose to use either it or enum, depending on which works better for our use case. Both seem fine to me.\r\n\r\nFinally, regarding appending ""awaiting review"", I think a class which inherits from the base one is a good idea. I believe enums support inheritance, and the TextChoices probably does as well.', 'comment_created': datetime.datetime(2020, 7, 2, 1, 27, 55, tzinfo=datetime.timezone.utc), 'commenter': 'tskir', 'type': 'User'}, {'comment_id': 448836403, 'comment_body': ""Yeah we do, but do we still want to create the term if we don't find it anywhere during OLS queries?  (Sorry I missed this question yesterday)"", 'comment_created': datetime.datetime(2020, 7, 2, 8, 30, 15, tzinfo=datetime.timezone.utc), 'commenter': 'joj0s', 'type': 'User'}, {'comment_id': 448861785, 'comment_body': 'https://docs.python.org/3/library/enum.html#restricted-enum-subclassing Turns out enum field inheritance is actually not possible (I am going with the TextChoices class, but it is an enum subclass so the same applies to it), maybe we should live with duplicating the statuses for the TermStatus and TraitStatus enum classes?', 'comment_created': datetime.datetime(2020, 7, 2, 9, 11, 13, tzinfo=datetime.timezone.utc), 'commenter': 'joj0s', 'type': 'User'}, {'comment_id': 449377221, 'comment_body': ""Yes, I would say we still want to create this term. This situation means that either something is wrong on the ZOOMA side, or some bug happened on our side during OLS lookup. So it's better to have this more explicit (by showing up as a deleted term in a suggestion), so this could be noticed and fixed/reported."", 'comment_created': datetime.datetime(2020, 7, 3, 5, 5, 34, tzinfo=datetime.timezone.utc), 'commenter': 'tskir', 'type': 'User'}, {'comment_id': 449380619, 'comment_body': '> Turns out enum field inheritance is actually not possible\r\nHuh. Indeed. Didn\'t know that.\r\n\r\nI\'m really not happy with duplicating the core status values. There are two ways we can handle this:\r\n* The author of the enum library suggests going with another library in such cases, aenum (advanced enumerations), which allows extensions and combinations. See his comments here: https://stackoverflow.com/a/33680929, https://stackoverflow.com/a/46080827.\r\n* Alternatively, we could just have a single enum with statuses (including ""awaiting_review""), and when defining a model, we could compute the list of allowable values based on that enum, taking all values _except_ the ones we don\'t want to be allowed.', 'comment_created': datetime.datetime(2020, 7, 3, 5, 20, 52, tzinfo=datetime.timezone.utc), 'commenter': 'tskir', 'type': 'User'}, {'comment_id': 449755826, 'comment_body': ""So the approach I've decided to use is mostly the second one you mentioned. I am defining a separate status class with all the possible statuses, and then two class methods, `trait_choices()` and `term_choices()` that filter the possible status values accordingly, so then the code in the Trait and Term models looks like this: \r\n`status = models.CharField(max_length=50, choices=Status.trait_choices())`"", 'comment_created': datetime.datetime(2020, 7, 4, 9, 16, 3, tzinfo=datetime.timezone.utc), 'commenter': 'joj0s', 'type': 'User'}, {'comment_id': 449758227, 'comment_body': 'This sounds good! We would still be able to access individual statuses as well via some attributes, like `Status.CURRENT`, right? Since that was the whole point', 'comment_created': datetime.datetime(2020, 7, 4, 9, 49, 32, tzinfo=datetime.timezone.utc), 'commenter': 'tskir', 'type': 'User'}, {'comment_id': 449758860, 'comment_body': 'Yes yes, we will just need to import the Status class from `models.py` to do that', 'comment_created': datetime.datetime(2020, 7, 4, 9, 58, 57, tzinfo=datetime.timezone.utc), 'commenter': 'joj0s', 'type': 'User'}]","[{'commit_sha': '3eaea1d2639bd69326efd6eb22e4c837e862d08e', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '41fbc7212a288966d3dc2dec86cdc6ad6d709710', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f5f966d1c7d3aaf369662afcb4d3ffd8ccac58e5', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f9d4e38166a77b868ee7f04e5ecfe080d8b92c7a', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5b7c93ad5f3dd692024b05551aafcf61c18a813c', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '632ff82135d301972d7c417973a0379934d70859', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6a4a058dfc72c5825b94effe2b0ea7d345fc8a23', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0fc4482f73dea3bcb1a75d7f8c9fe662fbafa3b2', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ea77faf3cbc3cbeca3777bc2051cae5424879b68', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1f7660c20e74a676f5db6d49e1c2c105895db67e', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b03be86cbd64da6b3d4d15b13f64a3c04bb7d742', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6a904667161422d2d37e801a38bd9f33baa72c8d', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f9d39bf5cd7cfc38ae77e2be40b6cab62139126a', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '562a0c8ec8ae3e62e894831c044888397c05a219', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fddfc33e2720040528f5d89cff96c2bfeb2da72f', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6d9032b06582582ccdbc9dc42527a2dca94f9dfa', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ad7632a7fcba55fb85b5a2bac060827310d69eb6', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f8a450f92595b1347f449564c1b12a4b9ef116b3', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '76143917a9c2df51da9bb26eb3ea71e405606a4b', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '91d1daefa01902bbd8e32e97e8d8919af7e84a17', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '677f3de579ffc41809a6ab833441fecc434fbce9', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '50028d2a1d4eb1bbfc75ba0f18e71b393be3d859', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5cc42f460fa892827473fd2cf274a839195dd48f', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8412e0183d35cf58a8124c47b85506713a759d0f', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c72daccb051ac9066dd33fd8490604e8fe4c5725', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '959400582d6d40aff5609293241c92875bfe3bb7', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0290dea0972116424f4e3c26c877eee4ae2185f2', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '17eaf069d5c25a340a6d02bd904318ce6e1bd90f', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9d5b7d90c097de812f4e0df036dd7c9c59a5bff8', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5aac7c5547b1999a07be23b6867e540d2f761cfe', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '16ea0949ca542e102c9b1ab04166aae67abddfda', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd913d2ce7d0baf17e8a8dac472ba21196647c0bf', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9e3b1b12c608f84728cc2a5a783c8b538511177d', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c81458d0090426ed5ec1c89df17ade3f6c426e27', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4539dff046f7879c0ffa2fd5bebca63ec6f9ee09', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0096d3e4540c7514a8d34b90e447fe999f7c0774', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}]",Giorgos Apostolopoulos,36301625,giorgosap@protonmail.com,User,,23,,16,19
445236244,Background tasks using Celery,This PR adds the ability to run background tasks using Celery. It is marked as WIP until tests on Heroku are done. Closes #59 ,True,60,https://api.github.com/repos/EBIvariation/trait-curation/pulls/60,https://github.com/EBIvariation/trait-curation/pull/60,closed,157,39,14,12,7,6,1,0,[{'name': 'Scope: Backend'}],2020-07-07 08:09:25+00:00,2020-07-15 14:59:47+00:00,715822.0,"8 days, 6:50:22","[{'comment_id': 451552048, 'comment_body': 'Does this print the entire stack trace, or just the exception type & message? Ideally we want the stack trace to be able to understand what happened.', 'comment_created': datetime.datetime(2020, 7, 8, 13, 40, 15, tzinfo=datetime.timezone.utc), 'commenter': 'tskir', 'type': 'User'}, {'comment_id': 451552942, 'comment_body': ""Wait... Aren't we using Python 3 for all of this? Why is this import from `__future__` necessary?"", 'comment_created': datetime.datetime(2020, 7, 8, 13, 41, 33, tzinfo=datetime.timezone.utc), 'commenter': 'tskir', 'type': 'User'}, {'comment_id': 451695555, 'comment_body': 'Yeah it was a recommended solution for a problem I was having with Celery finding some dependencies, it will be removed in the final iteration of this PR', 'comment_created': datetime.datetime(2020, 7, 8, 17, 3, 53, tzinfo=datetime.timezone.utc), 'commenter': 'joj0s', 'type': 'User'}, {'comment_id': 452748332, 'comment_body': 'Agreed, added stack trace printing', 'comment_created': datetime.datetime(2020, 7, 10, 10, 0, 39, tzinfo=datetime.timezone.utc), 'commenter': 'joj0s', 'type': 'User'}, {'comment_id': 455105323, 'comment_body': 'Looks like imports from the `__future__` are still there? I can see them in the `traitcuration/__init__.py` and `traitcuration/celery.py` modules', 'comment_created': datetime.datetime(2020, 7, 15, 14, 41, 34, tzinfo=datetime.timezone.utc), 'commenter': 'tskir', 'type': 'User'}, {'comment_id': 455118406, 'comment_body': 'Oh my bad, I forgot I included them in other files besides `tasks.py`. I removed them and pushed the changes.\r\n\r\n', 'comment_created': datetime.datetime(2020, 7, 15, 14, 56, 21, tzinfo=datetime.timezone.utc), 'commenter': 'joj0s', 'type': 'User'}]","[{'commit_sha': '90457f67dd0927498b82ee338d304e4269ed1656', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bd98d2bd097759117a8eb22bf04016357e1a00f0', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '56c3d9c2c1d4e7a5a16df7f8e69d06b2fd2d1518', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e0a51fcb2505904baa14e6933baaa458ade920c0', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '86faa486ee64f868728f43e56ecd17c9198bf5a0', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5584f46629369f1783f376d697201755ec49b032', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fb1cdd667725fc1ce0e571ce5bd08dff8db20eaf', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b8cf0a80b50e6a6c0f8ac8bf33e5bdb22d5fe855', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '17daa79b11542d818952395010678d66437c7e53', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b50786980adabed9a0d9bcca5448115949f2a43b', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0f95ad58b5e91654c1e99c3ab426653783d8221f', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ed7a29e2116798a47ebc9415dab91bbeee66d8b1', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}]",Giorgos Apostolopoulos,36301625,giorgosap@protonmail.com,User,,23,,16,19
456623770,Refactor ClinVar module and add atomic transactions,"Closes #52, closes #55",True,67,https://api.github.com/repos/EBIvariation/trait-curation/pulls/67,https://github.com/EBIvariation/trait-curation/pull/67,closed,27,9,5,5,0,0,1,0,[{'name': 'Scope: Backend'}],2020-07-25 14:45:48+00:00,2020-07-28 00:22:37+00:00,207409.0,"2 days, 9:36:49",[],"[{'commit_sha': '307cf896b9c0c57853e1d4a5c8b237c40ca7f5df', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2698220d4601da14d27fdd729f8faf5332036e0e', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3e87349452bf3155faf6047f60a60a31ed04edf4', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '32bf9909c6d8fb0b9fc055069a1fdad8ad1e816d', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dc37d63d3cc453f1abdb984e3627a1a0eb05cf72', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}]",Giorgos Apostolopoulos,36301625,giorgosap@protonmail.com,User,,23,,16,19
462041716,Query OLS to update term status,"This PR adds the ability to query OLS for status updates, via asynchronous background tasks. Closes #31.",True,77,https://api.github.com/repos/EBIvariation/trait-curation/pulls/77,https://github.com/EBIvariation/trait-curation/pull/77,closed,130,51,11,41,7,30,1,0,[{'name': 'Scope: Backend'}],2020-08-03 08:51:38+00:00,2020-08-27 11:10:42+00:00,2081944.0,"24 days, 2:19:04","[{'comment_id': 464874992, 'comment_body': 'FYI it is a common practice to just always use `logger = logging.getLogger(__name__)` in order to avoid explicitly specifying module name each time. This is not mandatory to adopt, but can be useful', 'comment_created': datetime.datetime(2020, 8, 4, 8, 7, 41, tzinfo=datetime.timezone.utc), 'commenter': 'tskir', 'type': 'User'}, {'comment_id': 464876571, 'comment_body': 'I would suggest having only one call to some main function in the `ols` module here, which would do all necessary processing steps. Otherwise, if we have multiple top-level functions in that module and multiple calls here, it creates a possibility for code sync problems', 'comment_created': datetime.datetime(2020, 8, 4, 8, 10, 34, tzinfo=datetime.timezone.utc), 'commenter': 'tskir', 'type': 'User'}, {'comment_id': 464888152, 'comment_body': ""It's a question of personal preference, but I feel it would be better to have just one function here which would, in one cycle, go through all traits and make the necessary queries/status updates. That would make the logic more readable.\r\n\r\nAlso, I see that this currently the “current” terms are only queried in their native ontology, and only “awaiting import” are queried in EFO. But actually, we want to query _all_ terms both in their native ontology and in EFO (of course, if EFO is the native ontology, then we only want to make one query), and then make the appropriate decisions."", 'comment_created': datetime.datetime(2020, 8, 4, 8, 30, 58, tzinfo=datetime.timezone.utc), 'commenter': 'tskir', 'type': 'User'}, {'comment_id': 464892005, 'comment_body': '(I\'m adding this here so that we can have a thread rather than isolated comments)\r\n\r\n> @tskir testing this functionality is tricky, because it turns out that django-computedfields doesn\'t play well with the Django admin site. Changing a status value directly from the admin site causes an error in the term. So if you want I could write a script that changes some status values of terms via the Django shell, so that you can test if they are updated correctly when the OLS queries are made.\r\n\r\nI think this can be done somewhat easier by just expanding the existing “test suite” of dummy traits which we already have. We could add some dummy traits which have their status purposefully incorrect to start with, and then test the process by clicking the ""OLS STATUS UPDATES"". Eventually this can also evolve smoothly into an automated test suite, just as the other dummy traits.', 'comment_created': datetime.datetime(2020, 8, 4, 8, 37, 20, tzinfo=datetime.timezone.utc), 'commenter': 'tskir', 'type': 'User'}, {'comment_id': 464924272, 'comment_body': ""> It's a question of personal preference, but I feel it would be better to have just one function here which would, in one cycle, go through all traits and make the necessary queries/status updates. That would make the logic more readable.\r\n\r\nI am not sure I understood that, you mean we should merge the `check_awaiting_import_terms` and the `check_term_status` functions?\r\n"", 'comment_created': datetime.datetime(2020, 8, 4, 9, 32, 26, tzinfo=datetime.timezone.utc), 'commenter': 'joj0s', 'type': 'User'}, {'comment_id': 464926315, 'comment_body': 'Yes, exactly. Into one function which would go through all traits (regardless of their _current_ status), and then for _each_ trait do the necessary logic for queries and status updates. Something like (pseudocode):\r\n\r\n```\r\ndef ols_update():\r\n    for trait in all_traits:\r\n        query efo\r\n        query native ontology\r\n        new_status = decide_status(current_status, efo_status, native_ontology_status)\r\n```', 'comment_created': datetime.datetime(2020, 8, 4, 9, 35, 58, tzinfo=datetime.timezone.utc), 'commenter': 'tskir', 'type': 'User'}, {'comment_id': 464927136, 'comment_body': ""In that example, the `decide_status` doesn't have to be a separate function (and probably even shouldn't be). This could all be a monolithic function which both does the queries and then immediately decides the new status of the traits based on a bunch of branching **if** statements. The purpose of this is to translate the logic of choosing the new status as directly into code as possible, so that it's easy to verify its correctness"", 'comment_created': datetime.datetime(2020, 8, 4, 9, 37, 27, tzinfo=datetime.timezone.utc), 'commenter': 'tskir', 'type': 'User'}, {'comment_id': 464927473, 'comment_body': ""Let me know if this is still not clear, I'll be happy to elaborate more"", 'comment_created': datetime.datetime(2020, 8, 4, 9, 38, tzinfo=datetime.timezone.utc), 'commenter': 'tskir', 'type': 'User'}, {'comment_id': 464928669, 'comment_body': 'Yes, I think this approach makes much more sense. Although I think it would be best then to separate the status calculation, since there are going to be a bunch of if statements, and it is going to make the code much more readable.', 'comment_created': datetime.datetime(2020, 8, 4, 9, 40, tzinfo=datetime.timezone.utc), 'commenter': 'joj0s', 'type': 'User'}, {'comment_id': 464929409, 'comment_body': '> Although I think it would be best then to separate the status calculation, since there are going to be a bunch of if statements, and it is going to make the code much more readable.\r\n\r\nWell yes, actually a good point. I agree.', 'comment_created': datetime.datetime(2020, 8, 4, 9, 41, 19, tzinfo=datetime.timezone.utc), 'commenter': 'tskir', 'type': 'User'}, {'comment_id': 465633890, 'comment_body': ""The admin issue is fixed so feel free to change whatever you like there, however I did add a dummy obsolete term (*/ obsolete_adrenocortical carcinoma / - EFO:0003093*) that is marked as 'current' and a dummy 'current' term (*/ Hereditary breast cancer / - Orphanet:227535*) that is marked as 'awaiting_import' to test the most usual cases right away."", 'comment_created': datetime.datetime(2020, 8, 5, 10, 39, 37, tzinfo=datetime.timezone.utc), 'commenter': 'joj0s', 'type': 'User'}, {'comment_id': 466763798, 'comment_body': 'Does this mean that we have admin@admin.com hardcoded somewhere as the email for the administrative user?\r\n\r\nI feel like it would be better to either replace it with something sensible (e.g. eva-dev@ebi.ac.uk), or at least use the example.com domain instead of admin.com (which is a domain which actually exists)', 'comment_created': datetime.datetime(2020, 8, 7, 1, 1, 50, tzinfo=datetime.timezone.utc), 'commenter': 'tskir', 'type': 'User'}, {'comment_id': 466764005, 'comment_body': 'It would be useful to add a comment here that the term here is purposefully incorrect to test OLS updates', 'comment_created': datetime.datetime(2020, 8, 7, 1, 2, 43, tzinfo=datetime.timezone.utc), 'commenter': 'tskir', 'type': 'User'}, {'comment_id': 466764150, 'comment_body': 'Also same thing here about adding the comment for purposefully incorrect status', 'comment_created': datetime.datetime(2020, 8, 7, 1, 3, 22, tzinfo=datetime.timezone.utc), 'commenter': 'tskir', 'type': 'User'}, {'comment_id': 466764471, 'comment_body': 'Oh, by the way, another thing which can definitely change (and frequently does), is the term label. We must ensure that this is also updated on OLS queries. I believe this is currently not implemented due to an oversight from my side (I just forgot to mention this case)', 'comment_created': datetime.datetime(2020, 8, 7, 1, 4, 30, tzinfo=datetime.timezone.utc), 'commenter': 'tskir', 'type': 'User'}, {'comment_id': 466764631, 'comment_body': 'If this requires fixing more than just a few lines, feel free to add a follow-up issue rather than fixing it directly in this PR', 'comment_created': datetime.datetime(2020, 8, 7, 1, 5, 1, tzinfo=datetime.timezone.utc), 'commenter': 'tskir', 'type': 'User'}, {'comment_id': 466768697, 'comment_body': 'The overall logic of status selection & querying OLS in a single function is now much better. However, what worries me is that we have two completely separate functions which decide the statuses: `get_term_status` (which is, by the way, defined in _ols.py_ but used only in _zooma.py_ — looks a bit odd) and `update_status`. So ultimately there are two places in the code where the term can be decided to be deleted or obsolete. Ideally, this should be done only once, and all of the different cases must use exactly the same status determination logic:\r\n* Term is added from ZOOMA\r\n* Term is added by user\r\n* Term status is being updated by periodic OLS lookup', 'comment_created': datetime.datetime(2020, 8, 7, 1, 20, 18, tzinfo=datetime.timezone.utc), 'commenter': 'tskir', 'type': 'User'}, {'comment_id': 466769172, 'comment_body': ""If I'm reading this right, it looks like we only check one ontology. However, for example, for terms which were imported from MONDO (or any other ontology), we need to check _both_ the parent ontology and the EFO. If the term is obsolete in _either,_ it should lead to it being declared obsolete in the status"", 'comment_created': datetime.datetime(2020, 8, 7, 1, 22, 1, tzinfo=datetime.timezone.utc), 'commenter': 'tskir', 'type': 'User'}, {'comment_id': 466870293, 'comment_body': ""I'm kind of confused, a MONDO term can be obsolete in MONDO but not in EFO? (excluding bugs of course). Aren't they supposed to mirror each other?"", 'comment_created': datetime.datetime(2020, 8, 7, 7, 29, 5, tzinfo=datetime.timezone.utc), 'commenter': 'joj0s', 'type': 'User'}, {'comment_id': 466873238, 'comment_body': ""This is just for development purposes so that we can use the dummy admin credentials that are pinned in the Slack channel. \r\n\r\nI am manually adding admin@admin.com each deployment but I want to add a bash script that is executed upon deployment release and adds that user automatically.\r\n\r\nI don't think the domain not existing is a problem, the sole purpose of those creds is to access the admin site, but if you think it would be better, I could change it to something like admin@example.com"", 'comment_created': datetime.datetime(2020, 8, 7, 7, 35, 26, tzinfo=datetime.timezone.utc), 'commenter': 'joj0s', 'type': 'User'}, {'comment_id': 466873654, 'comment_body': 'Just to clarify, by comment you mean a Python comment or a comment in the term label like *- INCORRECT* ?', 'comment_created': datetime.datetime(2020, 8, 7, 7, 36, 20, tzinfo=datetime.timezone.utc), 'commenter': 'joj0s', 'type': 'User'}, {'comment_id': 466874195, 'comment_body': 'About that, can a term be in EFO and the label change only in the parent ontology? And if so, do I update the label?', 'comment_created': datetime.datetime(2020, 8, 7, 7, 37, 37, tzinfo=datetime.timezone.utc), 'commenter': 'joj0s', 'type': 'User'}, {'comment_id': 466874623, 'comment_body': 'Yes, I agree, I will rethink that and merge those two functions into a single calculation', 'comment_created': datetime.datetime(2020, 8, 7, 7, 38, 33, tzinfo=datetime.timezone.utc), 'commenter': 'joj0s', 'type': 'User'}, {'comment_id': 466927055, 'comment_body': 'Actually this is an interesting example I found. Here is term **Orphanet:98602** [in EFO](https://www.ebi.ac.uk/ols/ontologies/efo/terms?iri=http://www.orpha.net/ORDO/Orphanet_98602)  and [in Orphanet](https://www.ebi.ac.uk/ols/ontologies/ordo/terms?iri=http://www.orpha.net/ORDO/Orphanet_98602) .\r\n\r\nWhich label would I keep in this situation?', 'comment_created': datetime.datetime(2020, 8, 7, 9, 24, 19, tzinfo=datetime.timezone.utc), 'commenter': 'joj0s', 'type': 'User'}, {'comment_id': 466960020, 'comment_body': ""> I don't think the domain not existing is a problem\r\n\r\nNo, my concern is the opposite one, that the admin.com domain _does_ exist and hosts some real life webiste. IANA [recommends](https://www.iana.org/domains/reserved) that all such placeholder emails/addresses use the example.com domain, which is specifically reserved for this purpose. I agree this is not critical, just a good practice to follow"", 'comment_created': datetime.datetime(2020, 8, 7, 10, 35, 24, tzinfo=datetime.timezone.utc), 'commenter': 'tskir', 'type': 'User'}, {'comment_id': 466960370, 'comment_body': 'Well... Originally I meant the Python comment, but now that you said it, adding “INCORRECT” to the label would also be useful :)', 'comment_created': datetime.datetime(2020, 8, 7, 10, 36, 14, tzinfo=datetime.timezone.utc), 'commenter': 'tskir', 'type': 'User'}, {'comment_id': 466961297, 'comment_body': ""Yes, that's curious. This is because, while the EFO maintains the original ontology CURIE (Orphanet:98602) on import, the term in EFO under that name now _belongs_ to EFO, so they can make arbitrary changes to it. Because our main ontology is EFO, in case of names conflict, EFO label should take precedence"", 'comment_created': datetime.datetime(2020, 8, 7, 10, 38, 21, tzinfo=datetime.timezone.utc), 'commenter': 'tskir', 'type': 'User'}, {'comment_id': 466963993, 'comment_body': 'Yeah, that\'s complicated. As you can see, in the example you reported above, the label is different in Orphanet and EFO for the same term, presumably because it was edited in EFO after import.\r\n\r\nMy best current understanding is that ""importing"" is more like ""copying"" the term from other ontology into EFO. The identifier, including the parent ontology\'s prefix, is maintained, but the contents can change. I think that even during regular import, they sometimes edit the title and description compared to how it was in the original ontology. And consequently, if something changes in the parent ontology (including the obsolete status), it will probably not be automatically reflected in EFO.\r\n\r\nOr maybe they do try to keep them in sync, it is just not always possible due to bugs or complexity of it all. I don\'t know. I have to admit that even after working with ontologies for 1.5 years, I still do not now how _all_ of the import rules work. I guess at some point I will have to contact SPOT and to clarify this.\r\n\r\nFor now, let\'s adopt this approach (it\'s different from what I said in the starting comment of this thread):\r\n* Treat EFO as the main deciding ontology for both the label and deciding the deleted/obsolete status\r\n* Still always query the parent ontology and report (log) all cases where there is any discrepancy between EFO and the parent ontology\r\n\r\nDoes this sound all right to you?', 'comment_created': datetime.datetime(2020, 8, 7, 10, 44, 46, tzinfo=datetime.timezone.utc), 'commenter': 'tskir', 'type': 'User'}, {'comment_id': 467006243, 'comment_body': 'Sounds quite reasonable, yes', 'comment_created': datetime.datetime(2020, 8, 7, 12, 23, 2, tzinfo=datetime.timezone.utc), 'commenter': 'joj0s', 'type': 'User'}, {'comment_id': 478335287, 'comment_body': ""OK, I'm going to resolve this conversation for now; but I've added a point to #58 to get rid of this in production"", 'comment_created': datetime.datetime(2020, 8, 27, 11, 6, 2, tzinfo=datetime.timezone.utc), 'commenter': 'tskir', 'type': 'User'}]","[{'commit_sha': '3bad1239b6c6ad8911acddb4b27965f51bf8b991', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bfc5352ae4d00e406e1799cad0d6ddf115a68f2c', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '33913991a96c9e8a05de519b9b38d3601218a3cd', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6e833b50bcb89b7c0f41a2c149dbf599f14f68b4', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1a5841cc71c0dbe1a53f74cfb6680a9acd7b4be4', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a7182c495db302c44d090edf0579ef2cc1ad72fd', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e0492cbb73daebc509528533348d0215dcbd1edf', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '72d3d6867254451c45dcd06b320d06b9b9a39bf3', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9ac6514551da70d12cbb83479cba1c84bd9e196c', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5659149e33a9e98d9de4fe09a579c2065351a43f', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7fffc255688b2ad9c7e6daaccf5759457c93fd52', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1497520cc447650989d4b3a1dfab611b04633657', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ce5782a35ae61a9d3f40f53a171ad4ae2f445984', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '829447a2a2818a2085c81371ac4690a53f6b7add', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cfe47ecb603a81c47fa8646f769a7b5e9efff96f', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e4f533321a493db46183beb538d02cee63df3d01', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '99b919475e94a5b2fdc793a9d652427abdb23b6b', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f81b46c959a7f975d09f054d775df715f5e78edb', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '402c617ce39129b2f665a138f0c003e94aea4919', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '62f71ab9544f667cf431c171eeed3c4f1fd9879a', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8e4c61d7fb4f22ea42340d62b6c5b093660407c2', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4a6610a048509bdfb16a37177fa64b8dc1c0859a', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f2072d9a83b99a3068a9c3bc819eb2c38c0c0c37', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '83d2f393507fb02395492f54c1a4976bfca05148', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '284428cb21b38aa57c3965cb7186be702aeeaf6f', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd84dff8eca9994da6241e4f9a27aacc05ae0f6d8', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1b57ccb34f892f27a5098690b4c60e9e8c4fcc31', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '89e954321d0712341fc86a0e66b3aba0caa2b4cb', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '42f90da532468b597c8a159b834384f65d9e7636', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6ea3e0bcda92957a5c20c2fbb5be490ec286dc84', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8f459e6aa37912195bba3104966ab169fe953009', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7b12b59bbe44de21e550a855a731143f67e687e4', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4ca80d368d1efb6d9c4f3d0e642e1e016de61313', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'afef5e47d4cb6951403f7158f19adb407dfb6434', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '63686cebaa5123db215bbc273931d5a59d851b20', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ec23048af65a495105b1d1d617c61cfe2daacfa9', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7486419085b3b6bcc5b217e99eee0fd256b7971a', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fcea112bc5e7b79cc5156679c01c460c6ef35c7c', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a2ae0d905f456fc6e66f29eef3de0009d3c53a6e', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5b5c13523945e4a8b24cfbb21c690ce63e225e0a', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2fc94d4f3180debdd414a5a51113e7f33b5c7bf0', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}]",Giorgos Apostolopoulos,36301625,giorgosap@protonmail.com,User,,23,,16,19
469298633,Automatic mapping functionality and OxO queries,"This PR adds mapping traits to term suggestions automatically, and creating new suggestions based on OxO queries. Pipeline logic:
1. If a term suggestion is of 'HIGH' confidence and is in EFO compatible ontologies, map it automatically to the trait.
2. If a term suggestion is an exact text match with the trait, map it automatically.
3.  If a term suggestion is of 'HIGH' confidence and is **not** in EFO compatible ontologies, find its cross-refs using OxO, and create mapping suggestions of it, **but don't create a mapping**.

It can be tested by importing traits from ClinVar and then triggering a ZOOMA import.

Closes #44 ",True,82,https://api.github.com/repos/EBIvariation/trait-curation/pulls/82,https://github.com/EBIvariation/trait-curation/pull/82,closed,130,25,4,10,0,2,1,0,[{'name': 'Scope: Backend'}],2020-08-18 08:37:12+00:00,2020-08-21 10:09:45+00:00,264753.0,"3 days, 1:32:33","[{'comment_id': 474274300, 'comment_body': 'Can we log the actual suggestion that shows combined terms. it might be useful for later.', 'comment_created': datetime.datetime(2020, 8, 20, 21, 9, 46, tzinfo=datetime.timezone.utc), 'commenter': 'tcezard', 'type': 'User'}, {'comment_id': 474551500, 'comment_body': 'Sure thing, I will add it.', 'comment_created': datetime.datetime(2020, 8, 21, 9, 3, 6, tzinfo=datetime.timezone.utc), 'commenter': 'joj0s', 'type': 'User'}]","[{'commit_sha': 'b1b59407cd0f7ce041628412d8c5ecbd50d392a1', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2de58f906974c67905223792eddbf33c260146c2', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0ecc7f3bf98422acdf9ab116400d23e1d3553142', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3be886db47be2017364e81a446920459c80bbc05', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '61146da4361c7c173a1dc3def40695890e49df6d', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9f33384337dbdb0f7ca01fef555b44934ffec58e', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f36a72e9ae979e8ea26ebbff138772abc7f324b8', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3fecf740c90f2845514f748edd5761837add6e94', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4cf4a3f4702aba30b974db2fb3596422acc38e06', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '46b239866b7ba01f44d8619ae2ed4a9013450360', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}]",Giorgos Apostolopoulos,36301625,giorgosap@protonmail.com,User,,23,,16,19
473922257,Datasources page,"This PR adds a page to display external data sources, along with their latest import progress and status. Closes #83 

Compared to the UI design, I removed the 'Next scheduled import' section due to the open discussion in issue #34.

As usual, since this PR depends on changed introduced in PR #85, it is better to switch to `feedback` as the base branch for the review process and when that PR is merged I will rebase. ",True,87,https://api.github.com/repos/EBIvariation/trait-curation/pulls/87,https://github.com/EBIvariation/trait-curation/pull/87,closed,404,52,14,28,3,4,1,0,[{'name': 'Scope: Extra pages'}],2020-08-26 13:51:13+00:00,2020-09-08 12:16:50+00:00,1117537.0,"12 days, 22:25:37","[{'comment_id': 478469458, 'comment_body': 'The blocks for OLS, ZOOMA and ClinVar look very similar (here and also above in the same file). It looks fine for now, but when in the future we add more trait/data sources, we might have to think about how to condense them into a single configurable method.', 'comment_created': datetime.datetime(2020, 8, 27, 14, 38, 26, tzinfo=datetime.timezone.utc), 'commenter': 'tskir', 'type': 'User'}, {'comment_id': 478470492, 'comment_body': ""Same comment about (mild) code block duplication applies here. Right now it's probably not worth the effort to refactor that, but once we have more sources, it will become necessary"", 'comment_created': datetime.datetime(2020, 8, 27, 14, 39, 53, tzinfo=datetime.timezone.utc), 'commenter': 'tskir', 'type': 'User'}, {'comment_id': 479110397, 'comment_body': 'As with the above, it is kinda tricky to condense that, I will rethink that, but I think we should merge this PR and add a follow up issue about that.', 'comment_created': datetime.datetime(2020, 8, 28, 10, 44, 7, tzinfo=datetime.timezone.utc), 'commenter': 'joj0s', 'type': 'User'}, {'comment_id': 479276539, 'comment_body': 'Agreed', 'comment_created': datetime.datetime(2020, 8, 28, 13, 14, 45, tzinfo=datetime.timezone.utc), 'commenter': 'tskir', 'type': 'User'}]","[{'commit_sha': '591f50528a866bbef27619699d09a2feed3cd1ce', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2dde557ed91a7f3cc86dc5975364f55119eb2610', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '64b11794248b89279acd09dba467fa89e49a9927', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b23b9d6c69b4e2334e52740df9b68094750107a5', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'afe70c11a98dfc8a772e0f7237c69852e634adff', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b5430a990866ea0dff8658bb599cbf5aa51c652d', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ead66c732da87fa8589bb6e9b9ae502da2409f8d', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bd8f278ee65bed1addb05209e0e71cd4324f1766', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd74f7b684686605ac30003835ce4c470819adb8e', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b9d00386424ab34cb6698dd76e1afb5823dc43c3', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '21db3ca7f8e3d74ebcc70abde5a67aa61a45bbe9', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1744cdb82533164eb5fd7ec72dd72a0b5f223614', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e217f1609e53dbe2e47084e722622e96f9b8086a', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5ed419419f5ec3b818f0150f0e06139b711b8c16', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e1c9b1222bd29ec4cdf86f5c1a7ae3880d1bcaa3', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b841cc3c0f2cd910ef78a10b1b0fcdc882c28a35', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2268159fd0004b5f2536efcf0fba8c13fd0710a3', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7691ef06e5c500001f6ca9b7eb5a181a4bae85a2', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '53c21c12f531b4b411d09ba9d7c1d84cc14a1544', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '92b56c3f3bbdf7b22579358ace5587fea706e77d', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '88c7bb170f57f92af4364bb3970c356afb2564b3', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '17918dff5bc62eb12ddb699dbf14f5b0fc70b93c', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9156a13eff7a47992b38a757793bdaa63074ef50', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '544f6d0cbebe069b1ea07fd204b4ab7854a06c76', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '03c3362a4340f342b02093b7f5348fad65782e21', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c7d9a7daa0fdf011a120f79bbcfd395aaef72323', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f14de09a2979ff3b5ffc9aa29f2626a022426eeb', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6cfc1b3c51fd805b4a81b4bd40b111da3184e403', 'committer_username': 'tskir', 'committer_name': 'Kirill Tsukanov', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 23, 11, 22, 45, tzinfo=datetime.timezone.utc)}]",Giorgos Apostolopoulos,36301625,giorgosap@protonmail.com,User,,23,,16,19
434121780,Filters for text searching and statuses,"This PR adds a text filter on top of the ""Browse Traits"" page that filters by trait name, ontology labels and ontology CURIE. It also adds buttons for selecting each distinct status of a trait. 

Compared to the UI mockup, I excluded the ""FIlter"" button next to the textbox since it is all done instantly using JavaScript and we don't need a button to trigger a request.

Closes #16, closes #17, closes #20  ",True,36,https://api.github.com/repos/EBIvariation/trait-curation/pulls/36,https://github.com/EBIvariation/trait-curation/pull/36,closed,38065,4,55,52,3,4,1,0,[{'name': 'Scope: Main page'}],2020-06-14 10:00:45+00:00,2020-06-18 00:34:52+00:00,311647.0,"3 days, 14:34:07","[{'comment_id': 440253168, 'comment_body': ""Could you add some documentation to this script? I'm thinking one top-level description (like a docstring) + some comments throughout the code, at least for the major branching points. They don't have to be verbose"", 'comment_created': datetime.datetime(2020, 6, 15, 15, 18, 44, tzinfo=datetime.timezone.utc), 'commenter': 'tskir', 'type': 'User'}, {'comment_id': 440256456, 'comment_body': 'So concerning the `views.py` module, do you suppose it would be better to leave only the actual views in it (e.g. something which returns `render(...)`, and move helper routines, such as `get_status_dict`, into a separate module?', 'comment_created': datetime.datetime(2020, 6, 15, 15, 23, 23, tzinfo=datetime.timezone.utc), 'commenter': 'tskir', 'type': 'User'}, {'comment_id': 440261056, 'comment_body': 'The same comment applies to this library, depending on which decision we will go with in #35: either use external CDN, or install via Yarn, or keep locally and include update/installation instructions', 'comment_created': datetime.datetime(2020, 6, 15, 15, 29, 48, tzinfo=datetime.timezone.utc), 'commenter': 'tskir', 'type': 'User'}, {'comment_id': 440289936, 'comment_body': 'Yeah, I also thought about it and it would be cleaner. I moved it into a `utils.py` module', 'comment_created': datetime.datetime(2020, 6, 15, 16, 13, 13, tzinfo=datetime.timezone.utc), 'commenter': 'joj0s', 'type': 'User'}]","[{'commit_sha': 'dabc829929005fe439136a5424332d3dc7035617', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4a97e087560a7da861a1e6064df3cb2c51427980', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '047e5da730190163ffa3b9fa02041c820c18e4ee', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4cd3aae00ccf9392c4212a94aab46e464dcf8484', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b9b2dc00f8d29d34a4327176ccc88600ff9a51f8', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ad7f21391940a13956f8341fbd4b7a32f282b805', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e5fa3c202e634e5350c00ed781b20a03a09da54c', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '84bf976d8806ce4805e5b5ea00765159c07f43ae', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8fba884d5375eb32182836221a8eb2e46b6530e8', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c5cef20b7667e76491b42748afbc4df125e05a27', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '333f05f7879fc0509ea48d52ff9a04e231eaf1fb', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c4dc0e11fb0c4e28fd931b53c54863863dbd149e', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c8e530cd54bbafda062edd474b7c0df13634fcc4', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a1b188945b6914eb3027a553754be627ee2a1ffb', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9fdc5d7d4d710aa190d65a8aef307339e7a39c15', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4c72a5e459c94780a1c1e74b429287bf533876a1', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cc4c746cba206fdd5e9e35f909000fdc39c9bf75', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3cbdda491ab0aade4f66be1467f4c9a2e69479ac', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '34ecd9550c341343e662f62afbca318dcc6f3f18', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '46c965b2a334c29c907f6e2534b7cf4a06219599', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dcd2e0759d6ad7da805343268d8a28e24988e947', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b92621d3326cf6553bd2c388b4a76cd03430cf52', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a835dd560ac79e7805623e61ebcff2b2707f9722', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8b29dad5262df898ab6d823f3e208b8b06086735', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '688bdb8f42027203d738febce1324b8f0d26dc02', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '894775abad5c916243471c7ead3ca2cad0a0af28', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd475e9b648a59372bf50f45574167a2c41131dfb', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2b6c502ea7daf7adda68aaa1c629dac65913b210', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8519229123f11f3d5e1b61b14fa2cac43e63bb6b', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9467678247f7a7a20e0e29f3a4426a7eddb84418', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0172be65be815ff4f5d4895e583d1ac276f77a7e', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '17b092402d198a66197cf7a6bed79a7bd2c36133', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'eb975776c9612cc3467a8975b204bc1393b639c7', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bb31ec48c9b681fa02967f1c6eafd8b4ce00c2b8', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9ce90c6b266990c5357ec33aa9bb2297311977a7', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f3848d9a2caf4915668c240f37190b458a271be0', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7f1782933558da35d39978333ee629d220349959', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a55182f21268f48fcd849578eab257887b925ef2', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '35e385d32fb289bde09ce1a2959a4bc1541275fc', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '75fdba0c8375ea2f4916e11e23cb36d5a528919c', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '44c4f2da108edfec7f2ba377e31d6545224ea0b1', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0d6180ab8ea19743e557e4361af8bf61a8a7d03b', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4fc78ae794c80ac8fbdffd27648dcb915c645b76', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f13744c3207c446fda44a8ca485b4ead9d219179', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a1f763b6ef3596ef3dd6338601caa2c57e50d645', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '252cafb52bb4cfd42c4aadadbcbcd0615b0672f6', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4c2000edaf9ceb64b889b5c58a213f4594a40361', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '708e0b8d88974f168d7df0b94da93129e48ade8d', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd13f72ea4a8907f5cb038cdb9b899750655d390a', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e47400ff781cee2564f7b463837f1c2db4e7066f', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'eda17ee1a160d073011c4d37a339541cbf1c9fe9', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5c5491ff730e37cf4654636acedc2bba381e2410', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}]",Giorgos Apostolopoulos,36301625,giorgosap@protonmail.com,User,,23,,16,19
436394521,Trait sidebar and main trait information,"This PR adds a sidebar which shows review information and the timestamp of a trait's last update, as per the Figma prototype. It also adds clear display of a trait's main information

Closes #21, closes #24",True,43,https://api.github.com/repos/EBIvariation/trait-curation/pulls/43,https://github.com/EBIvariation/trait-curation/pull/43,closed,173,34,11,12,2,16,1,0,[{'name': 'Scope: Trait page'}],2020-06-18 10:59:13+00:00,2020-06-29 17:08:31+00:00,972558.0,"11 days, 6:09:18","[{'comment_id': 444920586, 'comment_body': ""Is there a reason why footer and header are imported using their filenames directly (with `.scss` extension), but sidebar in some different way? I'm not an expert in Sass, so the reason is probably there and I just don't know it"", 'comment_created': datetime.datetime(2020, 6, 24, 14, 8, 8, tzinfo=datetime.timezone.utc), 'commenter': 'tskir', 'type': 'User'}, {'comment_id': 444925741, 'comment_body': 'When a trait name is long but window width is not, something like this happens:\r\n\r\n![image](https://user-images.githubusercontent.com/10669118/85572962-5be8fa00-b62d-11ea-9fd9-21cd04126bcf.png)\r\n\r\nIn this case it would be better to make ""trait name"" column smaller, and to ensure that ""source records"" and ""trait status"" will always fit', 'comment_created': datetime.datetime(2020, 6, 24, 14, 15, 21, tzinfo=datetime.timezone.utc), 'commenter': 'tskir', 'type': 'User'}, {'comment_id': 444927319, 'comment_body': 'Currently, the contents of the trait page are indented compared to the ""Browse traits"" button in the header:\r\n\r\n![image](https://user-images.githubusercontent.com/10669118/85573409-c6019f00-b62d-11ea-8c11-65fc92e01a5e.png)\r\n\r\nI\'m thinking it would be better to align them all to the same left margin', 'comment_created': datetime.datetime(2020, 6, 24, 14, 17, 35, tzinfo=datetime.timezone.utc), 'commenter': 'tskir', 'type': 'User'}, {'comment_id': 446018892, 'comment_body': ""Actually no, the files with `.scss` extension were part of the scss folder structure template I am using and the sidebar was imported manually, that's the cause of the difference. I will define a follow up action to do it one way across all imports to maintain consistency"", 'comment_created': datetime.datetime(2020, 6, 26, 7, 37, 51, tzinfo=datetime.timezone.utc), 'commenter': 'joj0s', 'type': 'User'}, {'comment_id': 446022260, 'comment_body': 'Well, the norm on headers is for them to have a smaller indent compared to the main page containers (you can look at GitHub here as an example). So my suggestion here would be to actually decrease the indent by a small amount on the header so that the distinction between itself and the container is clearer. \r\n\r\nAnother reason for that is that in very large screens, the container will have more margin compared to smaller screens so basically the only way to align those two is to put the header links inside the same type of container', 'comment_created': datetime.datetime(2020, 6, 26, 7, 45, 9, tzinfo=datetime.timezone.utc), 'commenter': 'joj0s', 'type': 'User'}, {'comment_id': 446023052, 'comment_body': 'Yes I will do that. Another thing for really small screens (basically just tablets in portrait mode), I could make it so that the trait status wraps beneath the first row to save some space. What do you think?', 'comment_created': datetime.datetime(2020, 6, 26, 7, 46, 51, tzinfo=datetime.timezone.utc), 'commenter': 'joj0s', 'type': 'User'}, {'comment_id': 446364192, 'comment_body': ""OK! In this case, could you either fix it in this PR, or add a follow-up action in existing ticket https://github.com/EBIvariation/trait-curation/issues/40, or create a new ticket for this action? Just so that it doesn't get lost in the discussions"", 'comment_created': datetime.datetime(2020, 6, 26, 19, 13, 36, tzinfo=datetime.timezone.utc), 'commenter': 'tskir', 'type': 'User'}, {'comment_id': 446365663, 'comment_body': ""I'm afraid it may mess with the layout and how the users expect the screen do behave when resizing its window. A trait status is an important marker, and people will expect to see it always in the same place. I think that at this point just changing column margins and re-wrapping trait name into multiple rows should be enough, especially considering that few trait names will be this long."", 'comment_created': datetime.datetime(2020, 6, 26, 19, 16, 56, tzinfo=datetime.timezone.utc), 'commenter': 'tskir', 'type': 'User'}, {'comment_id': 446368405, 'comment_body': 'Right, so first of all, one the second thought I do agree with you about the indents. Content having larger intent than header makes sense.\r\n\r\nHowever, the problem which I noticed now is that margins changes drastically on different zoom levels:\r\n\r\n100%\r\n![image](https://user-images.githubusercontent.com/10669118/85893298-8502b980-b7ea-11ea-932a-8054ce6d0cf6.png)\r\n\r\n125%\r\n![image](https://user-images.githubusercontent.com/10669118/85893310-8e8c2180-b7ea-11ea-995b-d0d8b1ce71ac.png)\r\n\r\n150%\r\n![image](https://user-images.githubusercontent.com/10669118/85893326-977cf300-b7ea-11ea-9ead-2634b455ed83.png)\r\n\r\nI think the look closest to normal is on 125% level. But it should look approximately the same at least in the 100–150% zoom range, as those are frequently used.\r\n\r\nThis can be done either in this PR, or as a folow-up ticket (perhaps united with comment from [here](https://github.com/EBIvariation/trait-curation/pull/43#discussion_r446364192))', 'comment_created': datetime.datetime(2020, 6, 26, 19, 23, 6, tzinfo=datetime.timezone.utc), 'commenter': 'tskir', 'type': 'User'}, {'comment_id': 446501446, 'comment_body': ""That's weird. I am using the `container` class that comes with UIKit but I might have to create one my own. Could you tell me the width of the screen you tested this on?"", 'comment_created': datetime.datetime(2020, 6, 27, 8, 31, 23, tzinfo=datetime.timezone.utc), 'commenter': 'joj0s', 'type': 'User'}, {'comment_id': 446501539, 'comment_body': 'I agree, I will add that', 'comment_created': datetime.datetime(2020, 6, 27, 8, 32, 36, tzinfo=datetime.timezone.utc), 'commenter': 'joj0s', 'type': 'User'}, {'comment_id': 446850778, 'comment_body': 'So, I did fix it by making the sidebar take up 14% of the page which ensures that the trait column always wraps, and it looks like this\r\n1. On a 1920x1080 screen\r\n![image](https://user-images.githubusercontent.com/36301625/85989226-e8623680-b9f8-11ea-907d-63ff6a47178e.png)\r\n2. On a 1360x768px screen\r\n![image](https://user-images.githubusercontent.com/36301625/85989270-f9ab4300-b9f8-11ea-97df-549efcc08802.png)\r\n3. On a 1200x800px tablet\r\n![image](https://user-images.githubusercontent.com/36301625/85989355-10519a00-b9f9-11ea-9cff-1fe9876e6254.png)\r\n\r\nAs you can imagine the page will be pretty unusable on anything smaller than a landscape tablet. So I could add some media queries to do something like increase the sidebar width and decrease the font size in screens smaller than 800px if that is a concern. Of course I am not referring to having it work on really small screens such as mobile phones, because that would require major redesigning as we discussed.\r\n\r\n\r\n\r\n\r\n', 'comment_created': datetime.datetime(2020, 6, 29, 8, 17, 24, tzinfo=datetime.timezone.utc), 'commenter': 'joj0s', 'type': 'User'}, {'comment_id': 446853261, 'comment_body': 'Yes, I am adding that in this PR', 'comment_created': datetime.datetime(2020, 6, 29, 8, 22, 3, tzinfo=datetime.timezone.utc), 'commenter': 'joj0s', 'type': 'User'}, {'comment_id': 447061399, 'comment_body': 'I can confirm that what we have currently is acceptable for reasonable window width and zoom range of 100-150%, so we may consider this issue resolved. Thanks!', 'comment_created': datetime.datetime(2020, 6, 29, 15, 32, 23, tzinfo=datetime.timezone.utc), 'commenter': 'tskir', 'type': 'User'}, {'comment_id': 447061945, 'comment_body': ""I don't know what changed (or whether anything changed at all), but now I don't see this problem and zoom works as expected. Marking this as resolved then :)"", 'comment_created': datetime.datetime(2020, 6, 29, 15, 33, 8, tzinfo=datetime.timezone.utc), 'commenter': 'tskir', 'type': 'User'}, {'comment_id': 447063000, 'comment_body': 'Great, this means that this action is the only one remaining for this PR. Once you address it, feel free to merge this PR without further review from my side', 'comment_created': datetime.datetime(2020, 6, 29, 15, 34, 37, tzinfo=datetime.timezone.utc), 'commenter': 'tskir', 'type': 'User'}]","[{'commit_sha': '6f49d3d7d78961812843b07ad40473cebd162841', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '253b91766c5a82bc314f17524313136745a4c35d', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fd6cf72c546fb9505a990d779d5342dd185eb7bf', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '174ae736d06bd58047b999e7afe0d0608a7e09b8', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a0936b7d972fc35e051a38e3c4c012acaf107034', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '618239c4d5461f48befaf4611a21d9608ee5e171', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e769952b0ddc9a8ede4b87a2be7ba87c80c6e486', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2498d474721f29a9d1b612aace282d8052cef785', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '98acdaec60a874d40b22cab53b0fa0251ead497c', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '15945e1cb6cb8152692a61ebc21ac651563ade7f', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7aa4ae6fcbc059c1a956d231f159e8ff2adcbdbd', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '90da67c8c2c684546032cb52531d021cb4468f70', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}]",Giorgos Apostolopoulos,36301625,giorgosap@protonmail.com,User,,23,,16,19
444270512,Mapping suggestion table and manual mapping functionality,"This PR is built on top of #51. It adds a table showing all mapping suggestions, as well as the ability to choose a mapping and assign it as a trait's current mapping. Closes #23 ",True,56,https://api.github.com/repos/EBIvariation/trait-curation/pulls/56,https://github.com/EBIvariation/trait-curation/pull/56,closed,195,42,13,7,0,0,2,0,"[{'name': 'Scope: Trait page'}, {'name': 'Scope: Backend'}]",2020-07-04 10:59:10+00:00,2020-07-04 14:13:12+00:00,11642.0,3:14:02,[],"[{'commit_sha': '3cf7465637d13eead408e068ca67765dccd925dd', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6c930e390959ea62f07a755cae5a09ab0ef6bf60', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f164087f98ac902de65a3d40089864632f2d4c17', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5ab4b796c3a4e96424504feba3c7828dbaa17571', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd5efdac972ecf0bf3e57d0d2d4901c05deb374d5', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '602a7bee3c5e91fca22e68522aebefe8f0cf4df2', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1fb0b9adc77204a130f6e5476e26a0e9927c248d', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}]",Giorgos Apostolopoulos,36301625,giorgosap@protonmail.com,User,,23,,16,19
453238899,Suggestion of existing or new terms,"This PR is built on top of PR #62 and adds the ability to suggest new or existing terms. Closes #26, closes #27. ",True,63,https://api.github.com/repos/EBIvariation/trait-curation/pulls/63,https://github.com/EBIvariation/trait-curation/pull/63,closed,392,59,11,37,3,16,1,0,[{'name': 'Scope: Trait page'}],2020-07-20 09:20:26+00:00,2020-07-25 09:03:23+00:00,430977.0,"4 days, 23:42:57","[{'comment_id': 457335027, 'comment_body': ""Here it would be nice to add a comment explaining what we're doing and an example (full string and the result of extraction).\r\n\r\nBut also, I wonder if there are more elegant ways to pass entity attributes from Django to the JavaScript code? Perhaps including the trait ID as an attribute into the page HTML would work?"", 'comment_created': datetime.datetime(2020, 7, 20, 12, 25, 13, tzinfo=datetime.timezone.utc), 'commenter': 'tskir', 'type': 'User'}, {'comment_id': 457335557, 'comment_body': ""I also think I've seen examples on some websites where they embed a whole JSON with machine-readable information into the page, for the JavaScript to utilise"", 'comment_created': datetime.datetime(2020, 7, 20, 12, 26, 3, tzinfo=datetime.timezone.utc), 'commenter': 'tskir', 'type': 'User'}, {'comment_id': 457336064, 'comment_body': ""Wouldn't it possible to do it directly with Django while generating a page?"", 'comment_created': datetime.datetime(2020, 7, 20, 12, 26, 48, tzinfo=datetime.timezone.utc), 'commenter': 'tskir', 'type': 'User'}, {'comment_id': 457344255, 'comment_body': ""Seems to me that this should also generate a warning popup, similarly to how it's done just below"", 'comment_created': datetime.datetime(2020, 7, 20, 12, 38, 36, tzinfo=datetime.timezone.utc), 'commenter': 'tskir', 'type': 'User'}, {'comment_id': 457349626, 'comment_body': 'Formatting of this section currently looks a bit cramped:\r\n![image](https://user-images.githubusercontent.com/10669118/87938806-03bbe100-ca8f-11ea-967b-7c50cbd24898.png)\r\n\r\nI would suggest adding more space between all elements. Especially the two section for the ""existing"" and ""new"" terms should be well separated.', 'comment_created': datetime.datetime(2020, 7, 20, 12, 45, 37, tzinfo=datetime.timezone.utc), 'commenter': 'tskir', 'type': 'User'}, {'comment_id': 457350936, 'comment_body': 'When I try to do those actions without logging in, I get redirected to a strangely (un)formatted page:\r\n\r\n![image](https://user-images.githubusercontent.com/10669118/87939134-7e84fc00-ca8f-11ea-9dd0-651b6947a014.png)', 'comment_created': datetime.datetime(2020, 7, 20, 12, 47, 16, tzinfo=datetime.timezone.utc), 'commenter': 'tskir', 'type': 'User'}, {'comment_id': 457354327, 'comment_body': ""It even shows me as being successfully signed in, and when I click on Sign in above, it doesn't ask me for my auth information again. So it just looks like some automatic redirect which is supposed to work doesn't.\r\n\r\nAs one solution to this problem, we could simply disable all of the buttons when logged out."", 'comment_created': datetime.datetime(2020, 7, 20, 12, 51, 41, tzinfo=datetime.timezone.utc), 'commenter': 'tskir', 'type': 'User'}, {'comment_id': 457421881, 'comment_body': 'I am using the `gap` property to space those out, but it turns out that browser support for that is very limited so I will change it back to having `margin`', 'comment_created': datetime.datetime(2020, 7, 20, 14, 10, 56, tzinfo=datetime.timezone.utc), 'commenter': 'joj0s', 'type': 'User'}, {'comment_id': 457423717, 'comment_body': ""I could pass a suggestion count in the page context during rendering, but I didn't want to make the view code too large. Should I do it this way?"", 'comment_created': datetime.datetime(2020, 7, 20, 14, 12, 58, tzinfo=datetime.timezone.utc), 'commenter': 'joj0s', 'type': 'User'}, {'comment_id': 457423941, 'comment_body': 'I will add that, yes.', 'comment_created': datetime.datetime(2020, 7, 20, 14, 13, 15, tzinfo=datetime.timezone.utc), 'commenter': 'joj0s', 'type': 'User'}, {'comment_id': 457431979, 'comment_body': 'This is the default `django-allauth` log in page. This behaviour looks strange though, it was supposed to redirect to the Google log in page, I will look into it. I will hide the buttons yes, but these were meant to be a secondary safeguard to prevent unauthorized POST requests from happening', 'comment_created': datetime.datetime(2020, 7, 20, 14, 22, 21, tzinfo=datetime.timezone.utc), 'commenter': 'joj0s', 'type': 'User'}, {'comment_id': 457437301, 'comment_body': 'Well what I could do, is pass some variables to the page via the Django context, and then declare some global JavaScript variables withing the html where they are subsequently passed to. That being said, global JS variables are considered a pretty bad practice so I try to avoid them. Or I could declare some setter methods in the JS script for passing data via a Django template. Then the trait html page could have some code like that:\r\n```\r\n<script>\r\nsetCurrentTraitId(""{{ trait.id }}"");\r\n</script>\r\n```', 'comment_created': datetime.datetime(2020, 7, 20, 14, 27, 45, tzinfo=datetime.timezone.utc), 'commenter': 'joj0s', 'type': 'User'}, {'comment_id': 457487101, 'comment_body': 'I will remove the decorator and perform the check manually', 'comment_created': datetime.datetime(2020, 7, 20, 15, 20, 21, tzinfo=datetime.timezone.utc), 'commenter': 'joj0s', 'type': 'User'}, {'comment_id': 459964104, 'comment_body': ""I think the last approach is the best one, directly interpolating the values into the JavaScript code. Let's go with that"", 'comment_created': datetime.datetime(2020, 7, 24, 10, 5, 23, tzinfo=datetime.timezone.utc), 'commenter': 'tskir', 'type': 'User'}, {'comment_id': 459965133, 'comment_body': ""Oh, I just realised something. My original idea was to not include this table into a page _at all_ when there are no suggestions to show. But then obviously, new suggestions can be added by a user, so we still need this table to be present there even when it's empty.\r\n\r\nSo this was my mistake, and no action is required here."", 'comment_created': datetime.datetime(2020, 7, 24, 10, 7, 50, tzinfo=datetime.timezone.utc), 'commenter': 'tskir', 'type': 'User'}, {'comment_id': 459966091, 'comment_body': 'I see that now there are no editing buttons when a user is logged out, so the problem is solved', 'comment_created': datetime.datetime(2020, 7, 24, 10, 10, 6, tzinfo=datetime.timezone.utc), 'commenter': 'tskir', 'type': 'User'}]","[{'commit_sha': 'b6cbb2e348f0f885043fd416d96ba6d7555bc950', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6cab4c94a81d703d90f93217ad0077348895fd9d', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6f29c659b92c5afb78d72b98904e41fae8b07548', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a9389fc09ad0abb513d4bb3260f412c8c78d0b77', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8d98b0f618fb902d6b40a601b9bdbb8ba7f1dd27', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '54d6aca60693497f57ecef8eb2db03780b13c7ee', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5e21a4c5ecb1b25df7f684796b37d5d7b03e1d30', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ef7bf77b539951c62c4b2c9868fad128a9d890a7', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0910a643db29f019013cff10ba876ecb70b6d656', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fba1a49e47581d9fbf8d53b99d241a8f1f19667d', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '51fee9f6fbd9c529a8e9b08c6e52fc58f52bcc76', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '717bd94e9f9884d2a8d28b6424023ceaba4bd66b', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '31bffc7e69c37f60ce0a58421384dee50de470a9', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '023aa63a3ad02b136def21e2f5191e2a2565f83b', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c06662356e880f07d40ca93a95bcc01a202dfd04', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5c6037baea8ede2a3ef700ac0acfde25a94d8831', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '19949df251528bb5851d34ddb65148b68bc05918', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '39653159a817d6b16ab1ec2072a26d2d9adab4bb', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '08a5484372a93958c77cb34fcc4361fc774d6e19', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b5c8b8ce20542f7cdeed5634ad14da322f2c471e', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'eb0ee78ab8c8259c22e2af2f52c725f8e4fa9677', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1e7f2aacbf51d55adf291c853dba376c7529a507', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '53bb0fd4e7d25fa9a30dba23b6ccf5e7e5bb0ce4', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd561f98f7e3489eb2784aeb147140dac3313cd97', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '25c58c8c9dd7ba08df08bac98bea94a9fdb77163', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c5c719fcc6594d71d91bf6f62bfeff1d2933bb79', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '832ffcc76e6531d63bf9a537e84bc3374ceed6c4', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c24840e585092c8d92fa70cfb24574103e930872', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6a95d75631b295847a64257a5cd7d2e6c6bb96e1', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0d11a7ef01723962112f9294636b20c224711e21', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '22655689267dfb0f770f2bf84e18cb60ade16291', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e5d936e4b27bf8876633ffb63d56bce15ec99d82', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aee1db0932cb52502e9411dc002ef07997a43925', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3d55c3154a10720b6909a134f9f3a0e7eefadccd', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '599ae888aae3f6e4703fd3671f7065733cf4e454', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6cb2f61daae92a4afad2c21185d028c005094e90', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '50bc0baa25a27fa97b64857dfd0fd95c1d4dd17b', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}]",Giorgos Apostolopoulos,36301625,giorgosap@protonmail.com,User,,23,,16,19
456597429,Review term functionality,"This PR adds the ability to review terms, and makes the appropriate fields computed so that statuses are updated accordingly. Closes #25.

Also, for each term in the dummy data with the 'awaiting_review' status, I added a dummy review so that they only require one more review to be moved to the 'current' state. This was changed to prevent the need to log in from two accounts in order to test that functionality.",True,66,https://api.github.com/repos/EBIvariation/trait-curation/pulls/66,https://github.com/EBIvariation/trait-curation/pull/66,closed,192,23,14,12,0,5,2,0,"[{'name': 'Scope: Trait page'}, {'name': 'Scope: Backend'}]",2020-07-25 10:21:32+00:00,2020-07-29 17:28:02+00:00,371190.0,"4 days, 7:06:30","[{'comment_id': 460392099, 'comment_body': ""Max length of 150 is probably an overkill, I can't imagine a status ever being that long. And presumably, the database _will_ always allocate the space for all 150 characters, regardless of the actual field contents.\r\n\r\nSo maybe we can get this down to the max(all current status names) + 10 characters to be safe. And then in the future we'll raise it if necessary."", 'comment_created': datetime.datetime(2020, 7, 25, 10, 40, 57, tzinfo=datetime.timezone.utc), 'commenter': 'tskir', 'type': 'User'}, {'comment_id': 460392206, 'comment_body': 'I assume (and hope) that if we raise the max_length of the field in the future, it will be gracefully handled by a migration', 'comment_created': datetime.datetime(2020, 7, 25, 10, 42, 31, tzinfo=datetime.timezone.utc), 'commenter': 'tskir', 'type': 'User'}, {'comment_id': 460393444, 'comment_body': ""The table and everything else look great, and the only thing I'm thinking we should tweak is the colour scheme. Currently, it's the same yellowish colour for the selected-but-not-mapped term, and for the one we are hovering above:\r\n\r\n![image](https://user-images.githubusercontent.com/10669118/88455385-c8ddf280-ce6c-11ea-8e00-6303a13e4a03.png)\r\n\r\nAnd then it's the same greyish colour for the term awaiting review and for the one already reviewed:\r\n\r\n![image](https://user-images.githubusercontent.com/10669118/88455416-fc208180-ce6c-11ea-817a-8bbe97b97708.png)\r\n\r\n![image](https://user-images.githubusercontent.com/10669118/88455420-06428000-ce6d-11ea-91c4-aca2abdede08.png)\r\n\r\nI think those should be four distinct colours for making it easier to distinguish between them visually"", 'comment_created': datetime.datetime(2020, 7, 25, 10, 59, 38, tzinfo=datetime.timezone.utc), 'commenter': 'tskir', 'type': 'User'}, {'comment_id': 460399600, 'comment_body': ""So I am thinking that the selected term color should be a darker shade of the hover term color, and I am not really sure about the in review/reviewed term color. I could make them a lighter green if it's reviewed and a lighter orange if they are not but I'm not sure if this is a good idea and if we should reserve these kinds of colors for the labels/notifications only."", 'comment_created': datetime.datetime(2020, 7, 25, 12, 19, 3, tzinfo=datetime.timezone.utc), 'commenter': 'joj0s', 'type': 'User'}, {'comment_id': 461242066, 'comment_body': ""Yes, let's make it the way you suggest:\r\n* Hover = as is\r\n* Selected = a darker shade of hover\r\n* In review = orange(ish)\r\n* Done/reviewed = green(ish)\r\n\r\nI appreciate that there is some overload of using orange and green colours in this scheme, but I don't really want to dedicate too much time to colours at this stage. As long as those four states are easily distinguishable, it should work for now. And then, if we have time at the end, we could dedicate it to polishing various UI components including colours."", 'comment_created': datetime.datetime(2020, 7, 28, 0, 13, 5, tzinfo=datetime.timezone.utc), 'commenter': 'tskir', 'type': 'User'}]","[{'commit_sha': 'dee4f43f5da396c8bfd6f664857316968d57ad82', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4907a8c7d6d3312c31f5cbdeab1a758fc2041ff0', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '92a49036e9cf4a85c60ef029b5a38d7c71398529', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '389c500ef1fcdcfda9cbb7506c5b85e4cf67fa25', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6c93199c6a81dfafae88ed29f5e9a82e62b50757', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ee5b80bab0580a86b110bd762dac8cf914bb1f1f', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '381f810b717adcb57ff9e789586660b74e6c38f8', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e78fc3e3c9f414fa2039da73fa68d1c80d15205c', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd39ab6d5dfe0691d282c085fbc0086381dcbe149', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4e0b7c6b465fb802c6fce5066fcdf7089fda3d90', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '76ee389d177c1743c75ef5d494ea6dfcbd99601a', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1e175f9ce4f846e3c825c18edbb39e6b97a6cbe0', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}]",Giorgos Apostolopoulos,36301625,giorgosap@protonmail.com,User,,23,,16,19
459021659,Trait history section and date object formatting,"This PR adds a history section that contains information about comments, reviews and mappings of a trait. Also adds date formatting and outputting in the browser's timezone. Closes #28, closes #29, closes #57.",True,70,https://api.github.com/repos/EBIvariation/trait-curation/pulls/70,https://github.com/EBIvariation/trait-curation/pull/70,closed,224,15,11,17,0,12,1,0,[{'name': 'Scope: Trait page'}],2020-07-30 09:40:09+00:00,2020-08-04 15:37:55+00:00,453466.0,"5 days, 5:57:46","[{'comment_id': 464005089, 'comment_body': 'I can see what this looks like in the final deployment, but it would be helpful to also include a comment with an example of the final formatted timestamp here in the code', 'comment_created': datetime.datetime(2020, 8, 1, 22, 11, 2, tzinfo=datetime.timezone.utc), 'commenter': 'tskir', 'type': 'User'}, {'comment_id': 464005531, 'comment_body': 'Two comments about the trait history header section:\r\n![image](https://user-images.githubusercontent.com/10669118/89111342-96c02800-d44c-11ea-83e2-050f2d832a80.png)\r\n\r\n1. For individual comments the left border looks good as an UI element. However, I think that for the “Comment as” section we should get rid of it, and align it on the same level with the ""TRAIT HISTORY"" title, in order to distinguish it from the actual comments and historical actions below.\r\n2. As you can see, for some reason the input field is rendered in such a way that it has a tiny scrollbar. The styles probably need to be tweaked a bit to get rid of it. This might be something specific to Chrome.', 'comment_created': datetime.datetime(2020, 8, 1, 22, 16, 57, tzinfo=datetime.timezone.utc), 'commenter': 'tskir', 'type': 'User'}, {'comment_id': 464005673, 'comment_body': 'I feel that the representation of text comments could be made more compact. Currently we have:\r\n\r\n![image](https://user-images.githubusercontent.com/10669118/89111402-3b426a00-d44d-11ea-942f-5e63c7ac6ba7.png)\r\n\r\n**Kirill Tsukanov commented**  \r\nAugust 1st 2020, 23:08  \r\n(blank line)  \r\n(Comment text)  \r\n(blank line)\r\n\r\nThis can be shortened to:\r\n\r\n**Kirill Tsukanov** commented on **August 1st 2020, 23:08**  \r\n(Comment text)\r\n\r\n', 'comment_created': datetime.datetime(2020, 8, 1, 22, 19, 16, tzinfo=datetime.timezone.utc), 'commenter': 'tskir', 'type': 'User'}, {'comment_id': 464005882, 'comment_body': '![image](https://user-images.githubusercontent.com/10669118/89111432-8fe5e500-d44d-11ea-9a4c-50212229df35.png)\r\n\r\nFor the mapping change entry, I feel this could be changed to (note the em dash and making the CURIE part clickable):\r\n\r\n**Kirill Tsukanov** proposed a mapping on **August 1st 2020, 23:08**  \r\n**[Orphanet:101016](http://www.orpha.net/ORDO/Orphanet_101016) — Romano-Ward syndrome**', 'comment_created': datetime.datetime(2020, 8, 1, 22, 21, 45, tzinfo=datetime.timezone.utc), 'commenter': 'tskir', 'type': 'User'}, {'comment_id': 464006014, 'comment_body': 'When proposing new terms, they currently display like this:\r\n![image](https://user-images.githubusercontent.com/10669118/89111461-f2d77c00-d44d-11ea-8e49-ba10f89997b8.png)\r\n\r\nIt probably shouldn\'t display ""None"" explicitly', 'comment_created': datetime.datetime(2020, 8, 1, 22, 24, 2, tzinfo=datetime.timezone.utc), 'commenter': 'tskir', 'type': 'User'}, {'comment_id': 464006150, 'comment_body': 'For the review entries:\r\n![image](https://user-images.githubusercontent.com/10669118/89111475-2adebf00-d44e-11ea-8716-96f40642f547.png)\r\n\r\nThis can be changed to:\r\n\r\n**Kirill Tsukanov** confirmed the mapping on **August 1st 2020, 23:08**  \r\n**[Orphanet:586](http://www.orpha.net/ORDO/Orphanet_586) — Cystic fibrosis**', 'comment_created': datetime.datetime(2020, 8, 1, 22, 25, 30, tzinfo=datetime.timezone.utc), 'commenter': 'tskir', 'type': 'User'}, {'comment_id': 464006264, 'comment_body': 'Finally, there appears to be this strange bug where the timestamp of the comment does not actually reflect the time when I leave it, and instead reflects the time the app was first launched (?)\r\n\r\nFor example, I started reviewing this PR at 23:08 and opened the deployment. Since then, all comments which I leave have the timestamp of 23:08, for example:\r\n\r\n![image](https://user-images.githubusercontent.com/10669118/89111523-8f018300-d44e-11ea-9d58-951121d65964.png)\r\n', 'comment_created': datetime.datetime(2020, 8, 1, 22, 27, 29, tzinfo=datetime.timezone.utc), 'commenter': 'tskir', 'type': 'User'}, {'comment_id': 464252227, 'comment_body': 'Should I just display the label then?', 'comment_created': datetime.datetime(2020, 8, 3, 7, 57, 24, tzinfo=datetime.timezone.utc), 'commenter': 'joj0s', 'type': 'User'}, {'comment_id': 464266733, 'comment_body': ""That is indeed a weird Chrome specific issue and it looks like quite a pain because if I just disable the scrollbar, then the user wouldn't be able to scroll up an down if the comment size exceeds the text area height. So I think the best approach here would be to hide the scrollbar when the text area is collapsed, and show it when it is expanded."", 'comment_created': datetime.datetime(2020, 8, 3, 8, 27, 31, tzinfo=datetime.timezone.utc), 'commenter': 'joj0s', 'type': 'User'}, {'comment_id': 464869863, 'comment_body': ""Yes, this approach works great, I just tested it. I'll resolve this conversation then, great job"", 'comment_created': datetime.datetime(2020, 8, 4, 7, 58, 21, tzinfo=datetime.timezone.utc), 'commenter': 'tskir', 'type': 'User'}, {'comment_id': 464871091, 'comment_body': 'Yes, something like:\r\n\r\n> **Kirill Tsukanov** proposed a mapping to a new term on **August 4th 2020, 8:59**\r\n> \r\n> **New term label**\r\n\r\nWithout the link', 'comment_created': datetime.datetime(2020, 8, 4, 8, 0, 35, tzinfo=datetime.timezone.utc), 'commenter': 'tskir', 'type': 'User'}, {'comment_id': 464871706, 'comment_body': 'Currently it contains a broken link to ""None"", like that:\r\n![image](https://user-images.githubusercontent.com/10669118/89268910-1a3a6e80-d631-11ea-8c95-26b96b2f9c6e.png)\r\n', 'comment_created': datetime.datetime(2020, 8, 4, 8, 1, 39, tzinfo=datetime.timezone.utc), 'commenter': 'tskir', 'type': 'User'}]","[{'commit_sha': 'fef8a62535b98876b1c9c0c87caafc9c3baf1b51', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '10b61ef60f4497134509d453abad9b1c670cc548', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3d823c1b086a4d4129a1df18b977c4e8ce47e09f', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '55c2988342245891361a32f62f06d89fdf1366ad', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '64ecdd18e23fe849b8ea934114fe02e1794f762f', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '697ed3e469891a88e9e8abb04d650b8d8bfb70be', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e7fc60a34e1eae46893f4146ba798fcdba4d3b34', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '79ff157a8647ff4e398b1c0f1d814943f18cfbc0', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fbf911727e4b0c3805f76c7b47219f6d6ba54512', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b0b122ebf9ce827e98e47af88f452f5d38ff454a', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b7b2100eb7a4b306b0491e0822bbe272d7e69363', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2d95d8fa26b17081bb959112721c9211f832afe7', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a7c0e0801e5563b9633a94b8cb7dfd23e04d09a1', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9a7003c9b9c4bb66706520815151b33aef4ed678', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '02797dcffe9bc9b0be9a19a313377d9585379205', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '439e78e7f590de7a83fc9ddd53bb18febc7d0352', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7d278d38bdb545cc1cdc9f9252c06e781f40dbc9', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}]",Giorgos Apostolopoulos,36301625,giorgosap@protonmail.com,User,,23,,16,19
451983911,Implement authentication,This PR adds authentication of users via the Google OAuth API. Closes #54.,True,62,https://api.github.com/repos/EBIvariation/trait-curation/pulls/62,https://github.com/EBIvariation/trait-curation/pull/62,closed,312,420,32,22,2,16,1,0,[{'name': 'Scope: Backend'}],2020-07-18 15:19:35+00:00,2020-07-24 14:25:08+00:00,515133.0,"5 days, 23:05:33","[{'comment_id': 457323076, 'comment_body': 'What does this do, and why is this “2”?', 'comment_created': datetime.datetime(2020, 7, 20, 12, 7, 26, tzinfo=datetime.timezone.utc), 'commenter': 'tskir', 'type': 'User'}, {'comment_id': 457323729, 'comment_body': ""Perhaps it's worth mentioning in a comment that those configuration options are of the “allauth” package"", 'comment_created': datetime.datetime(2020, 7, 20, 12, 8, 28, tzinfo=datetime.timezone.utc), 'commenter': 'tskir', 'type': 'User'}, {'comment_id': 457325486, 'comment_body': ""Just to confirm, does Google OAuth return first and last names separately? (I can't seem to be able to find the part in the code where the OAuth reply is being actually converted into our user model)"", 'comment_created': datetime.datetime(2020, 7, 20, 12, 11, 6, tzinfo=datetime.timezone.utc), 'commenter': 'tskir', 'type': 'User'}, {'comment_id': 457326294, 'comment_body': ""Filtering by the name seems a bit wrong. I'm not saying we are likely to encounter someone with the first name “ZOOMA”, but maybe it would be better to filter by email"", 'comment_created': datetime.datetime(2020, 7, 20, 12, 12, 17, tzinfo=datetime.timezone.utc), 'commenter': 'tskir', 'type': 'User'}, {'comment_id': 457326761, 'comment_body': 'This can fit into one line <120 characters. Looks like pylint strikes again :)\r\n\r\n```suggestion\r\n    Custom user model manager where email is the unique identifier for authentication instead of usernames.\r\n```', 'comment_created': datetime.datetime(2020, 7, 20, 12, 12, 59, tzinfo=datetime.timezone.utc), 'commenter': 'tskir', 'type': 'User'}, {'comment_id': 457328184, 'comment_body': 'Looks like we lost the ""role"" field in the refactoring. Or is it included in some form in the AbstractUser and inherited from there?', 'comment_created': datetime.datetime(2020, 7, 20, 12, 15, 9, tzinfo=datetime.timezone.utc), 'commenter': 'tskir', 'type': 'User'}, {'comment_id': 457328882, 'comment_body': 'When logged in, the email is too close to the ""Sign out"" button:\r\n\r\n![image](https://user-images.githubusercontent.com/10669118/87936687-2b10af00-ca8b-11ea-8d54-b0c2b3cb31c2.png)\r\n', 'comment_created': datetime.datetime(2020, 7, 20, 12, 16, 10, tzinfo=datetime.timezone.utc), 'commenter': 'tskir', 'type': 'User'}, {'comment_id': 457424806, 'comment_body': 'It does automatically, yes.', 'comment_created': datetime.datetime(2020, 7, 20, 14, 14, 18, tzinfo=datetime.timezone.utc), 'commenter': 'joj0s', 'type': 'User'}, {'comment_id': 457425525, 'comment_body': 'I actually added that in PR #63 so should I leave it as it is and wait for both PRs to merge into master?', 'comment_created': datetime.datetime(2020, 7, 20, 14, 15, 8, tzinfo=datetime.timezone.utc), 'commenter': 'joj0s', 'type': 'User'}, {'comment_id': 457426197, 'comment_body': ""Same problem with PR #63 , looks like the `gap` CSS property isn't fully supported. May I ask what browser/version you are using?"", 'comment_created': datetime.datetime(2020, 7, 20, 14, 15, 59, tzinfo=datetime.timezone.utc), 'commenter': 'joj0s', 'type': 'User'}, {'comment_id': 457439491, 'comment_body': 'Agreed, I will add that.', 'comment_created': datetime.datetime(2020, 7, 20, 14, 29, 56, tzinfo=datetime.timezone.utc), 'commenter': 'joj0s', 'type': 'User'}, {'comment_id': 457440516, 'comment_body': ""So in order for the auth package to work, I have to register the domain in the app's database, you can see it in the `Site` model in the Django Admin. It already has an example site there which I left as is during development and added another entry with the actual domain, hence the id of 2. So I can either leave it as 2 and add another site each deployment, or I can make it 1, and just edit the example site entry provided by `django-allauth`"", 'comment_created': datetime.datetime(2020, 7, 20, 14, 31, tzinfo=datetime.timezone.utc), 'commenter': 'joj0s', 'type': 'User'}, {'comment_id': 457468744, 'comment_body': 'You are right, I wll add that.', 'comment_created': datetime.datetime(2020, 7, 20, 15, 1, 2, tzinfo=datetime.timezone.utc), 'commenter': 'joj0s', 'type': 'User'}, {'comment_id': 459956095, 'comment_body': ""If it's not too difficult, let's change it to 1 and get rid of the example site entities. Also, could you please add your explanation (or maybe just the gist of it) as a comment for this `SITE_ID` assignment?"", 'comment_created': datetime.datetime(2020, 7, 24, 9, 47, 30, tzinfo=datetime.timezone.utc), 'commenter': 'tskir', 'type': 'User'}, {'comment_id': 459956541, 'comment_body': ""Yes, if it's already planned to be fixed in a subsequent PR, then that's fine, no need to backport the fix here"", 'comment_created': datetime.datetime(2020, 7, 24, 9, 48, 28, tzinfo=datetime.timezone.utc), 'commenter': 'tskir', 'type': 'User'}, {'comment_id': 459957404, 'comment_body': ""Looks like you fixed it, since now it looks good:\r\n![image](https://user-images.githubusercontent.com/10669118/88379769-636e0100-cd9b-11ea-901e-4bac3725f8ce.png)\r\n\r\nI'm always using the latest(ish) release Google Chrome on Ubuntu. My current version is: 83.0.4103.97 (Official Build) (64-bit)"", 'comment_created': datetime.datetime(2020, 7, 24, 9, 50, 26, tzinfo=datetime.timezone.utc), 'commenter': 'tskir', 'type': 'User'}]","[{'commit_sha': '2b6b008e454eb50cb54addd3e268d8287d2b3a0c', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dcd1c1c179b72d9d777d7632adf08cd189bae4e7', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c36f81087695967d37e740451bb1544f59c8eaa9', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fdbc9e5d7cd53046b02c6fc8a55c96acd989071c', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '260a7114498cafd1bf23293ea99c3eb7ba73666e', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6f1663a3a2e2fef40ed523e1325ae00cdffb2555', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '132809b3a022d5555b49e6e6d4907cf96f0207f7', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8f524dda333dbebeeb9e53b143a31e50e8d54a60', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c75fdd27c15db4f77f1e3e1d1ca93b226ee075af', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd1d039884e1882230a49b21f6ae126b428c21a89', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4288ad4739c589dcf322f8279765070a93458a63', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '60f7d6ff43ee210a00c53de924fe6c06e5259b35', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '40e5526db211eba861aae6cf073f236869c7f17d', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a163d83e47745216763ea50a80b14eac3a623c19', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f81f81a68234dd9d6017525f564592116579f056', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9963923b7982a92c4362a68b248c2ade9a25993e', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3fa94c773339b5199105465ffa382b6d9cae1f5e', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '086146d0997423cbc0d4547c6efbb923a6a9805c', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '95aa4ad04f95ca468d2877635a9f51becab2b618', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0d3a9e53f9e121506420d9f0f4afc201fe778a17', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '94cce56585af5cf8c4a10d81b6883937812482ab', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9330dd2238e8b053c14913aabda40eed0b0e4017', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}]",Giorgos Apostolopoulos,36301625,giorgosap@protonmail.com,User,,23,,16,19
471626561,Maintainer feedback page and functionality,"This PR adds a page to submit feedback to maintainers. The submission process includes creating a spreadsheet containing potential terms to create/import, and also creating a GitHub issue.

Some notes about this PR: 
- It is built on top of PR #77. To make the review process easier, I suggest using branch `ols_queries` as the base branch. PR #77 should be merged soon, and then I'll rebase this one.
- The Heroku deployment requires some configuration of GitHub and Google APIs to work. It should be up and running by the time this PR is reviewed, but if not, please report it in this PR's comments.

Closes #73 

This is deployed in http://trait-curation-2.duckdns.org/traits/",True,85,https://api.github.com/repos/EBIvariation/trait-curation/pulls/85,https://github.com/EBIvariation/trait-curation/pull/85,closed,515,37,17,28,17,3,2,0,"[{'name': 'Scope: Backend'}, {'name': 'Scope: Feedback page'}]",2020-08-21 13:15:13+00:00,2020-09-08 11:52:43+00:00,1550250.0,"17 days, 22:37:30","[{'comment_id': 478431225, 'comment_body': 'I feel a bit uneasy about making this GET request with an unsanitised user input (`${issue_repo.value}`). Is there a way we could do sanitisation in JS?', 'comment_created': datetime.datetime(2020, 8, 27, 13, 46, 19, tzinfo=datetime.timezone.utc), 'commenter': 'tskir', 'type': 'User'}, {'comment_id': 479313444, 'comment_body': 'So regarding this one, if you are referring to converting to HTML encoding to escape non standard symbols I could write something like this:\r\n``` js\r\nfunction sanitize(string) {\r\n  const map = {\r\n      \'&\': \'&amp;\',\r\n      \'<\': \'&lt;\',\r\n      \'>\': \'&gt;\',\r\n      \'""\': \'&quot;\',\r\n      ""\'"": \'&#x27;\',\r\n      ""/"": \'&#x2F;\',\r\n  };\r\n  const reg = /[&<>""\'/]/ig;\r\n  return string.replace(reg, (match)=>(map[match]));\r\n}\r\n```\r\n\r\nHowever, since all I am making is a GET request to an external API, I\'m not sure it is unsafe. Should I go ahead and use the above `sanitize` function?', 'comment_created': datetime.datetime(2020, 8, 28, 13, 54, 15, tzinfo=datetime.timezone.utc), 'commenter': 'joj0s', 'type': 'User'}, {'comment_id': 481068688, 'comment_body': ""Since this is a request to an external API made by the user, I agree this is not unsafe in terms of XSS or similar security risk; still, I'd rather avoid accidental nonsensical API requests in case a user badly mistypes something in a field.\r\n\r\nTo apply this `sanitize` function would a good idea (in the future, it can also be reused throughout the project for similar purposes). A possible alternative is to simply validate GitHub repository name using a regular expression. I would be fine with either of those solutions."", 'comment_created': datetime.datetime(2020, 9, 1, 11, 30, 40, tzinfo=datetime.timezone.utc), 'commenter': 'tskir', 'type': 'User'}]","[{'commit_sha': '30cb09f4f2732e26bec6ec800eac55fe87828038', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a9cbec64afb1611498b057a20dd7d984d3430738', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '37a3ee615699d5491b33fc05c9da2cfa5cacbb7f', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7fc32150c80e3c549aadef39fdfbba569601ae9b', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7267e2d4b3533731b7a5f4f6be142ca6fecb99b2', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'badd1504fcd7e8b218430366e346a78f2f3d9f15', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bc00b830de4ce5fa68773f6f7f4ee776cac9bdf0', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9e27a2997ccafc623e969ea8b1615fe382f36ad8', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ddcd719664d56ea0bd32a82c5ed582c66da36cbe', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '29fdf5b0cd7ed65a365d65a1a8086524fddc6cd8', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '11a4e261362920808253375c6c733c46678652e7', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '70c9aa1fabaa06449f7928da0eb0be2cf1048427', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '10e7f51985a2c4c13245d323795c0e23f3637927', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bf9da757d46fbfde2600605d84cf5e28604948e3', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a0f0fd3be9952ee32ef72336697059134ec6456d', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3c6b0e6822371d83fe3ace44486d39a139f55070', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ef7865f7b28d1910452ff36fcd09679fed9655c4', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4fa7e39b4c2f12d378ff59f1aeed45c61b066160', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '97ecaf9f217a8a43ecfd981bde96efa06fe5163e', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9ce6f014cca8880c87a1afc4c4d5c1f1e0b922fa', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f2ce211f7ae029a4a870ab860bead5bf2ff15530', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '23f99fdd4ada2a3ae06924d14b4148aa0b533c32', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '985faa6a18c694769cd5c63ee1dd293a7806d8f4', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c652e180aece37baf48b9aab2759c0800317f824', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '72707622ea94bf31682ada56e2b2976733d73f93', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '41a6b2fc8ea9a9d5499087a847cbbaba7381bf61', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fa2304a5202e2ca0adf086d03544937d8bee97dd', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '71c39d7f26516ae5ebc9acf111e854f44f981b99', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}]",Giorgos Apostolopoulos,36301625,giorgosap@protonmail.com,User,,23,,16,19
475436830,Create REST API and deployment instructions,This PR adds a simple REST API to access trait information. Closes #80 ,True,90,https://api.github.com/repos/EBIvariation/trait-curation/pulls/90,https://github.com/EBIvariation/trait-curation/pull/90,closed,419,79,20,8,1,14,1,0,[{'name': 'Scope: Backend'}],2020-08-28 14:24:33+00:00,2020-09-08 12:44:16+00:00,944383.0,"10 days, 22:19:43","[{'comment_id': 483148126, 'comment_body': ""General comment: for now, while the API layer is not very big yet, it's fine to go with manually written documentation. However, I believe the more modern approach is to have the documentation being generated automatically (see approaches like Swagger).\r\n\r\nI've created a follow up issue for some time in the future: https://github.com/EBIvariation/trait-curation/issues/92"", 'comment_created': datetime.datetime(2020, 9, 3, 17, 39, 54, tzinfo=datetime.timezone.utc), 'commenter': 'tskir', 'type': 'User'}, {'comment_id': 483148790, 'comment_body': ""The documentation itself, the way it's currently written, is great—I have no concerns or comments"", 'comment_created': datetime.datetime(2020, 9, 3, 17, 41, 8, tzinfo=datetime.timezone.utc), 'commenter': 'tskir', 'type': 'User'}, {'comment_id': 483149401, 'comment_body': '```suggestion\r\n1. ```sudo apt update``` and ```sudo apt upgrade``` to make sure the system is up to date.\r\n```\r\n```suggestion\r\n1. ```sudo apt update``` To make sure the system is up to date.\r\n```', 'comment_created': datetime.datetime(2020, 9, 3, 17, 42, 22, tzinfo=datetime.timezone.utc), 'commenter': 'tskir', 'type': 'User'}, {'comment_id': 483149971, 'comment_body': '```suggestion\r\n **Important: PostgreSQL uses an authentication scheme called “peer authentication” for local connections. Basically, this means that if the user’s operating system username matches a valid Postgres username, that user can login with no further authentication. So make sure that the PSQL username matches the host OS username**.\r\n```\r\n```suggestion\r\n **Important: PostgreSQL uses an authentication scheme called “peer authentication” for local connections. Basically, this means that if the user’s operating system username matches a valid Postgres username, that user can login with no further authentication. So make sure that the PSQL username matches the host OS username**:\r\n```', 'comment_created': datetime.datetime(2020, 9, 3, 17, 43, 20, tzinfo=datetime.timezone.utc), 'commenter': 'tskir', 'type': 'User'}, {'comment_id': 483151797, 'comment_body': '```suggestion\r\nsudo -H pip3 install --upgrade pip setuptools\r\n```\r\n\r\nI found that in some situations, updating only pip does not help resolve the installation problems, but upgrading pip _and_ setuptools always helps. Well... maybe nearly always.\r\n\r\n![image](https://user-images.githubusercontent.com/10669118/92149311-c11f4f80-ee15-11ea-8d3a-cae059831533.png)\r\n', 'comment_created': datetime.datetime(2020, 9, 3, 17, 46, 37, tzinfo=datetime.timezone.utc), 'commenter': 'tskir', 'type': 'User'}, {'comment_id': 483153104, 'comment_body': 'Is this entire part configurable? For example, I see that the `STATICFILES_FINDERS` and `COMPRESS_PRECOMPILERS` parts are quoted, but they are neither explained nor modified in the course of this deployment protocol', 'comment_created': datetime.datetime(2020, 9, 3, 17, 48, 58, tzinfo=datetime.timezone.utc), 'commenter': 'tskir', 'type': 'User'}, {'comment_id': 483153743, 'comment_body': '```suggestion\r\nThe `[Unit]` section is used to specify metadata and dependencies. We’ll put a description of our service here and tell the init system to only start this after the networking target has been reached.\r\n```', 'comment_created': datetime.datetime(2020, 9, 3, 17, 50, 9, tzinfo=datetime.timezone.utc), 'commenter': 'tskir', 'type': 'User'}, {'comment_id': 483155615, 'comment_body': ""I've read the entire protocol; I didn't yet try to execute it myself (I'll do it in a few days when I have time), but already I just have to say that those are _the_ most awesome and detailed deployment instructions I've ever seen, and that includes all of the ones I wrote myself. That's fantastic."", 'comment_created': datetime.datetime(2020, 9, 3, 17, 53, 28, tzinfo=datetime.timezone.utc), 'commenter': 'tskir', 'type': 'User'}, {'comment_id': 483168014, 'comment_body': ""It's a bit strange that these changes show up here, given that they have already been merged into master. Since we have three PRs, stacked on top of each other, it might help to rebase all of them against master and each other to make sure we don't have any branch conflicts"", 'comment_created': datetime.datetime(2020, 9, 3, 18, 16, 25, tzinfo=datetime.timezone.utc), 'commenter': 'tskir', 'type': 'User'}, {'comment_id': 483168649, 'comment_body': 'I look at this module and cry tears of joy, because defining the same API in Spring would take a few dozen pages of code. Long live Django.', 'comment_created': datetime.datetime(2020, 9, 3, 18, 17, 37, tzinfo=datetime.timezone.utc), 'commenter': 'tskir', 'type': 'User'}, {'comment_id': 483169011, 'comment_body': 'Purchases?', 'comment_created': datetime.datetime(2020, 9, 3, 18, 18, 22, tzinfo=datetime.timezone.utc), 'commenter': 'tskir', 'type': 'User'}, {'comment_id': 483499745, 'comment_body': ""I think that is because the base branch for this PR is 'datasources_page' not 'master', so I am pretty sure that if we change that it should be fine. That being said, these were all great suggestions for the already merged deployment instructions so should I keep them and commit them in a separate small PR?"", 'comment_created': datetime.datetime(2020, 9, 4, 9, 24, 24, tzinfo=datetime.timezone.utc), 'commenter': 'joj0s', 'type': 'User'}, {'comment_id': 483513277, 'comment_body': 'Well technically they are, but in reality they should never be changed unless we decide to use an entirely different CSS pre-processor or an unconventional location to store static files.', 'comment_created': datetime.datetime(2020, 9, 4, 9, 50, 21, tzinfo=datetime.timezone.utc), 'commenter': 'joj0s', 'type': 'User'}, {'comment_id': 484875092, 'comment_body': ""> That being said, these were all great suggestions for the already merged deployment instructions so should I keep them and commit them in a separate small PR?\r\n\r\nWow, because of how GitHub keeps displaying changes in its strange manner, I didn't even realise those changes were already merged! Sorry about the confusion.\r\n\r\nThere's no need to do a separate PR, I'll just introduce those changes directly to the `master` branch myself, as they're trivial."", 'comment_created': datetime.datetime(2020, 9, 8, 12, 25, 22, tzinfo=datetime.timezone.utc), 'commenter': 'tskir', 'type': 'User'}]","[{'commit_sha': 'd91c1cbb2fb761c97510a17ab3fcad322f0e5687', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '24faa4cd725c021db71b7e79a63c158c28d2f311', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fbba03223c99c0499eb3d9123ba578fedebaccbd', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fcbbcbf8f34ba5751c7aad2286b65ea2f8c00e27', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd144b2fd05b866d5d404d8ee83af498b62189ba9', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '65bcea5177643d86c55127578e4e994256c5ed8c', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '65cd0da5b4d89432bb18b780e3ef8cdb7c4740a5', 'committer_username': 'joj0s', 'committer_name': 'Giorgos Apostolopoulos', 'committer_email': 'giorgosap@protonmail.com', 'commit_date': datetime.datetime(2018, 2, 9, 13, 40, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9f2c90d75909f57d16ea137be258ed76a02a969b', 'committer_username': 'tskir', 'committer_name': 'Kirill Tsukanov', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 23, 11, 22, 45, tzinfo=datetime.timezone.utc)}]",Giorgos Apostolopoulos,36301625,giorgosap@protonmail.com,User,,23,,16,19

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
263288141,trait-curation,EBIvariation/trait-curation,Python,2,2,7,3,435,39,21,12,"[{'id': 493587183, 'number': 99, 'closed': datetime.datetime(2020, 11, 17, 11, 42, 2, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 9, 26, 14, 58, 27, tzinfo=datetime.timezone.utc), 'time_taken': 4481015.0, 'time_delta': '51 days, 20:43:35', 'additions': 109, 'deletions': 9, 'state': 'closed'}, {'id': 479571702, 'number': 95, 'closed': datetime.datetime(2020, 9, 8, 13, 13, 52, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 9, 4, 10, 52, 41, tzinfo=datetime.timezone.utc), 'time_taken': 354071.0, 'time_delta': '4 days, 2:21:11', 'additions': 42, 'deletions': 10, 'state': 'closed'}, {'id': 479563563, 'number': 94, 'closed': datetime.datetime(2020, 9, 8, 12, 49, 57, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 9, 4, 10, 42, tzinfo=datetime.timezone.utc), 'time_taken': 353277.0, 'time_delta': '4 days, 2:07:57', 'additions': 6, 'deletions': 2, 'state': 'closed'}, {'id': 475436830, 'number': 90, 'closed': datetime.datetime(2020, 9, 8, 12, 44, 16, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 28, 14, 24, 33, tzinfo=datetime.timezone.utc), 'time_taken': 944383.0, 'time_delta': '10 days, 22:19:43', 'additions': 419, 'deletions': 79, 'state': 'closed'}, {'id': 473922257, 'number': 87, 'closed': datetime.datetime(2020, 9, 8, 12, 16, 50, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 26, 13, 51, 13, tzinfo=datetime.timezone.utc), 'time_taken': 1117537.0, 'time_delta': '12 days, 22:25:37', 'additions': 404, 'deletions': 52, 'state': 'closed'}, {'id': 471626561, 'number': 85, 'closed': datetime.datetime(2020, 9, 8, 11, 52, 43, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 21, 13, 15, 13, tzinfo=datetime.timezone.utc), 'time_taken': 1550250.0, 'time_delta': '17 days, 22:37:30', 'additions': 515, 'deletions': 37, 'state': 'closed'}, {'id': 469298633, 'number': 82, 'closed': datetime.datetime(2020, 8, 21, 10, 9, 45, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 18, 8, 37, 12, tzinfo=datetime.timezone.utc), 'time_taken': 264753.0, 'time_delta': '3 days, 1:32:33', 'additions': 130, 'deletions': 25, 'state': 'closed'}, {'id': 468805758, 'number': 81, 'closed': datetime.datetime(2020, 8, 26, 9, 15, 29, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 17, 12, 39, 11, tzinfo=datetime.timezone.utc), 'time_taken': 765378.0, 'time_delta': '8 days, 20:36:18', 'additions': 410, 'deletions': 4, 'state': 'closed'}, {'id': 462041716, 'number': 77, 'closed': datetime.datetime(2020, 8, 27, 11, 10, 42, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 3, 8, 51, 38, tzinfo=datetime.timezone.utc), 'time_taken': 2081944.0, 'time_delta': '24 days, 2:19:04', 'additions': 130, 'deletions': 51, 'state': 'closed'}, {'id': 459021659, 'number': 70, 'closed': datetime.datetime(2020, 8, 4, 15, 37, 55, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 30, 9, 40, 9, tzinfo=datetime.timezone.utc), 'time_taken': 453466.0, 'time_delta': '5 days, 5:57:46', 'additions': 224, 'deletions': 15, 'state': 'closed'}, {'id': 456623770, 'number': 67, 'closed': datetime.datetime(2020, 7, 28, 0, 22, 37, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 25, 14, 45, 48, tzinfo=datetime.timezone.utc), 'time_taken': 207409.0, 'time_delta': '2 days, 9:36:49', 'additions': 27, 'deletions': 9, 'state': 'closed'}, {'id': 456597429, 'number': 66, 'closed': datetime.datetime(2020, 7, 29, 17, 28, 2, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 25, 10, 21, 32, tzinfo=datetime.timezone.utc), 'time_taken': 371190.0, 'time_delta': '4 days, 7:06:30', 'additions': 192, 'deletions': 23, 'state': 'closed'}, {'id': 453238899, 'number': 63, 'closed': datetime.datetime(2020, 7, 25, 9, 3, 23, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 20, 9, 20, 26, tzinfo=datetime.timezone.utc), 'time_taken': 430977.0, 'time_delta': '4 days, 23:42:57', 'additions': 392, 'deletions': 59, 'state': 'closed'}, {'id': 451983911, 'number': 62, 'closed': datetime.datetime(2020, 7, 24, 14, 25, 8, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 18, 15, 19, 35, tzinfo=datetime.timezone.utc), 'time_taken': 515133.0, 'time_delta': '5 days, 23:05:33', 'additions': 312, 'deletions': 420, 'state': 'closed'}, {'id': 445236244, 'number': 60, 'closed': datetime.datetime(2020, 7, 15, 14, 59, 47, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 7, 8, 9, 25, tzinfo=datetime.timezone.utc), 'time_taken': 715822.0, 'time_delta': '8 days, 6:50:22', 'additions': 157, 'deletions': 39, 'state': 'closed'}, {'id': 444270512, 'number': 56, 'closed': datetime.datetime(2020, 7, 4, 14, 13, 12, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 4, 10, 59, 10, tzinfo=datetime.timezone.utc), 'time_taken': 11642.0, 'time_delta': '3:14:02', 'additions': 195, 'deletions': 42, 'state': 'closed'}, {'id': 442068376, 'number': 51, 'closed': datetime.datetime(2020, 7, 4, 13, 57, 14, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 30, 14, 25, 27, tzinfo=datetime.timezone.utc), 'time_taken': 343907.0, 'time_delta': '3 days, 23:31:47', 'additions': 144, 'deletions': 5, 'state': 'closed'}, {'id': 441428710, 'number': 49, 'closed': datetime.datetime(2020, 7, 4, 13, 37, 30, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 29, 13, 49, 47, tzinfo=datetime.timezone.utc), 'time_taken': 431263.0, 'time_delta': '4 days, 23:47:43', 'additions': 306, 'deletions': 26, 'state': 'closed'}, {'id': 436963811, 'number': 45, 'closed': datetime.datetime(2020, 6, 29, 17, 9, 58, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 19, 8, 23, 6, tzinfo=datetime.timezone.utc), 'time_taken': 895612.0, 'time_delta': '10 days, 8:46:52', 'additions': 46, 'deletions': 30, 'state': 'closed'}, {'id': 436394521, 'number': 43, 'closed': datetime.datetime(2020, 6, 29, 17, 8, 31, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 18, 10, 59, 13, tzinfo=datetime.timezone.utc), 'time_taken': 972558.0, 'time_delta': '11 days, 6:09:18', 'additions': 173, 'deletions': 34, 'state': 'closed'}, {'id': 435051722, 'number': 39, 'closed': datetime.datetime(2020, 6, 26, 7, 54, 10, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 16, 8, 18, 39, tzinfo=datetime.timezone.utc), 'time_taken': 862531.0, 'time_delta': '9 days, 23:35:31', 'additions': 105, 'deletions': 2, 'state': 'closed'}, {'id': 434121780, 'number': 36, 'closed': datetime.datetime(2020, 6, 18, 0, 34, 52, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 14, 10, 0, 45, tzinfo=datetime.timezone.utc), 'time_taken': 311647.0, 'time_delta': '3 days, 14:34:07', 'additions': 38065, 'deletions': 4, 'state': 'closed'}, {'id': 431288532, 'number': 35, 'closed': datetime.datetime(2020, 6, 17, 23, 20, 16, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 8, 17, 26, 49, tzinfo=datetime.timezone.utc), 'time_taken': 798807.0, 'time_delta': '9 days, 5:53:27', 'additions': 669, 'deletions': 4, 'state': 'closed'}, {'id': 427712870, 'number': 13, 'closed': datetime.datetime(2020, 6, 8, 16, 36, 24, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 4, 9, 38, tzinfo=datetime.timezone.utc), 'time_taken': 370704.0, 'time_delta': '4 days, 6:58:24', 'additions': 64, 'deletions': 0, 'state': 'closed'}, {'id': 424547061, 'number': 11, 'closed': datetime.datetime(2020, 6, 4, 8, 53, 59, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 5, 28, 14, 59, 11, tzinfo=datetime.timezone.utc), 'time_taken': 582888.0, 'time_delta': '6 days, 17:54:48', 'additions': 29, 'deletions': 0, 'state': 'closed'}, {'id': 420806415, 'number': 10, 'closed': datetime.datetime(2020, 5, 21, 17, 24, 11, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 5, 20, 14, 56, 19, tzinfo=datetime.timezone.utc), 'time_taken': 95272.0, 'time_delta': '1 day, 2:27:52', 'additions': 275, 'deletions': 0, 'state': 'closed'}]"
