pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
574901710,[feature] REST API for main controller features #379,Closes #379,True,386,https://api.github.com/repos/openwisp/openwisp-controller/pulls/386,https://github.com/openwisp/openwisp-controller/pull/386,closed,1287,2,13,32,45,172,1,1,[{'name': 'enhancement'}],2021-02-17 13:04:07+00:00,2021-05-12 03:46:32+00:00,7224145.0,"83 days, 14:42:25","[{'comment_id': 578046074, 'comment_body': ""is this nested include really needed or is it the best practice to do this? I've never seen it."", 'comment_created': datetime.datetime(2021, 2, 18, 0, 48, 37, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 578046931, 'comment_body': 'all the templates will surely need to contain more logic', 'comment_created': datetime.datetime(2021, 2, 18, 0, 51, 5, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 578212296, 'comment_body': ""Since more than one app's API's are present in this module I tried to keep the URL in the main urls.py as `api/v1/` so if I don't use nesting here then each time I write path I will be required to add `controller` to it, so proceeded with this approach."", 'comment_created': datetime.datetime(2021, 2, 18, 8, 16, 34, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}, {'comment_id': 578212942, 'comment_body': 'Yes', 'comment_created': datetime.datetime(2021, 2, 18, 8, 17, 40, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}, {'comment_id': 584271418, 'comment_body': 'Maybe, you could move these URLs in a separate file and get urls from the function there like done in [openwisp-radius urls](https://github.com/openwisp/openwisp-radius/blob/master/openwisp_radius/urls.py#L18).', 'comment_created': datetime.datetime(2021, 2, 28, 10, 9, 47, tzinfo=datetime.timezone.utc), 'commenter': 'atb00ker', 'type': 'User'}, {'comment_id': 584271601, 'comment_body': 'I think we can start to get rid of `url` now and move to `path`, what do you think? :smile:', 'comment_created': datetime.datetime(2021, 2, 28, 10, 11, 24, tzinfo=datetime.timezone.utc), 'commenter': 'atb00ker', 'type': 'User'}, {'comment_id': 584273951, 'comment_body': ""Quick Q: shouldn't the details pages be read-only and we should have separate edit pages. \r\n\r\nCurrently, I went to `http://127.0.0.1:8000/api/v1/controller/device/<pk>/`\r\n\r\nand it gave me details and the form to edit the device! :smile:"", 'comment_created': datetime.datetime(2021, 2, 28, 10, 31, 47, tzinfo=datetime.timezone.utc), 'commenter': 'atb00ker', 'type': 'User'}, {'comment_id': 584282752, 'comment_body': 'Yes, @atb00ker I had a discussion about this with Federico, to have separate endpoints for GET/PATCH/PUT of the device detail and other endpoints but he suggested me to keep it in this way. :smile: ', 'comment_created': datetime.datetime(2021, 2, 28, 11, 42, 44, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}, {'comment_id': 584319548, 'comment_body': 'Sure, I will do it in this manner.', 'comment_created': datetime.datetime(2021, 2, 28, 16, 8, 56, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}, {'comment_id': 584329282, 'comment_body': 'Thanks for the info, I found the comment: https://github.com/openwisp/openwisp-controller/issues/379#issuecomment-785244645', 'comment_created': datetime.datetime(2021, 2, 28, 17, 29, 8, tzinfo=datetime.timezone.utc), 'commenter': 'atb00ker', 'type': 'User'}, {'comment_id': 585223322, 'comment_body': 'I highly recommend you guys to read this book: https://www.amazon.com/RESTful-Web-Services-Leonard-Richardson/dp/0596529260\r\nHaving separate endpoints for editing a resource does not follow the RESTful API design principles.\r\nA resource can be created (POST /), retrieved (GET `/<pk>`), updated (PUT `/<pk>`), destroyed (DELETE `/<pk>`).\r\nThis is the standard across pretty much all modern REST APIs.', 'comment_created': datetime.datetime(2021, 3, 2, 3, 35, 4, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 585862315, 'comment_body': ""Thanks for the recommendation, I'll check it out! :smile:"", 'comment_created': datetime.datetime(2021, 3, 2, 19, 50, 29, tzinfo=datetime.timezone.utc), 'commenter': 'atb00ker', 'type': 'User'}, {'comment_id': 595148392, 'comment_body': 'Here after removing the `templates`field,I am able to create a device, with its configuration, but we should not pop this field, because while creating a device user may want to assign any number of templates.', 'comment_created': datetime.datetime(2021, 3, 16, 13, 4, 40, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}, {'comment_id': 595149792, 'comment_body': ""I am able to add more templates, but not able to remove or change the order of the templates. I tried with `instance.cofig.templates.set()`, or `instance.cofig.templates.update()`, but doesn't work here."", 'comment_created': datetime.datetime(2021, 3, 16, 13, 6, 32, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}, {'comment_id': 595151172, 'comment_body': 'Here, I have added an extra endpoint which works fine for all operation we want from the configurations associated with any device we want to perform, but the problems arises when we try to perform operations on the nested models and serializers.', 'comment_created': datetime.datetime(2021, 3, 16, 13, 8, 13, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}, {'comment_id': 595428929, 'comment_body': '@atb00ker here is the `.create` method.', 'comment_created': datetime.datetime(2021, 3, 16, 18, 17, 43, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}, {'comment_id': 595429088, 'comment_body': '@atb00ker ', 'comment_created': datetime.datetime(2021, 3, 16, 18, 17, 54, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}, {'comment_id': 595441330, 'comment_body': ""Got it, I'll have to look into why do you need to pop the templates.\r\nIf I remember correctly, some UTs are saving device without poping template; I would start looking there.\r\n\r\nI'll look into it as well! (Probably weekend!) "", 'comment_created': datetime.datetime(2021, 3, 16, 18, 32, 55, tzinfo=datetime.timezone.utc), 'commenter': 'atb00ker', 'type': 'User'}, {'comment_id': 595452361, 'comment_body': ""@ManishShah120 you should removed all the templates before adding again.\r\n```suggestion\r\n    def update(self, instance, data):\r\n        config_templates = data['config']['templates']\r\n        instance = self.instance or self.Meta.model(**data)\r\n        instance.config.templates.clear()\r\n        for template in config_templates:\r\n            instance.config.templates.add(template.pk)\r\n        return instance\r\n```"", 'comment_created': datetime.datetime(2021, 3, 16, 18, 48, 40, tzinfo=datetime.timezone.utc), 'commenter': 'devkapilbansal', 'type': 'User'}, {'comment_id': 595457476, 'comment_body': ""Hmm, okay, I will try to help with the same.\r\nHere is what I would do:\r\n```\r\n  def update(self, instance, data):\r\n        config_templates = data['config']['templates']\r\n        import pdb\r\n        pdb.set_trace() \r\n```\r\n\r\nThen in the interactive shell, I try to narrow down the problem and see the data structure & object I am dealing with and how can I do to fix the problem.\r\n\r\nIf you have already done that, could you please specify the problem more narrowly?\r\nI'll have to look into this myself, I'll check it out and let you know when I find something interesting! :smile:\r\n\r\nP.S: `config.templates.remove(t1)` is working! :-)"", 'comment_created': datetime.datetime(2021, 3, 16, 18, 56, 9, tzinfo=datetime.timezone.utc), 'commenter': 'atb00ker', 'type': 'User'}, {'comment_id': 595473809, 'comment_body': 'Thak You @devkapilbansal This is working.', 'comment_created': datetime.datetime(2021, 3, 16, 19, 19, 10, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}, {'comment_id': 595476878, 'comment_body': 'Yes @atb00ker Now its working.', 'comment_created': datetime.datetime(2021, 3, 16, 19, 24, 2, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}, {'comment_id': 598106001, 'comment_body': 'I just checked it out, looks like this is fixed.\r\nPlease update here if done.', 'comment_created': datetime.datetime(2021, 3, 20, 12, 30, 44, tzinfo=datetime.timezone.utc), 'commenter': 'atb00ker', 'type': 'User'}, {'comment_id': 600586727, 'comment_body': ""> hey, @atb00ker I am facing one more issue:\r\n> i.e., after a successful PUT/PATCH request my response data remains the same, I am expecting the response data to change it to the updated data.\r\n\r\nThat's because you are not suppose to access self.data before saving your instance updates.\r\nThe data variable is populated on call and is send with response.\r\n\r\nIf you want to access it before saving changes, try \r\n`self.initial_data['config.config'] ` instead of `self.data['config']`."", 'comment_created': datetime.datetime(2021, 3, 24, 15, 22, 27, tzinfo=datetime.timezone.utc), 'commenter': 'atb00ker', 'type': 'User'}, {'comment_id': 600587486, 'comment_body': 'Can we change the variable name here to make it more descriptive to make it clear how `config_data_` is different from `config_data`?', 'comment_created': datetime.datetime(2021, 3, 24, 15, 23, 18, tzinfo=datetime.timezone.utc), 'commenter': 'atb00ker', 'type': 'User'}, {'comment_id': 600892832, 'comment_body': ""@atb00ker with this line I was trying to check if the config of the device instance is already present or not, and then creating the config instance if not present, but now I have worked out a different approach i.e., now I am checking if `backend` field is present or not in that device instance if not then config is not present and then I am creating the config if the request data contains it.\r\n\r\nWhen I tried with this `self.initial_data['config.config']` I was getting error with PATCH requests, because with this we are assuming that the device already contains the config instance."", 'comment_created': datetime.datetime(2021, 3, 24, 21, 40, 44, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}, {'comment_id': 600893473, 'comment_body': 'I have renamed it to `new_config_data`, this variable I am using when it is required to create a new config instance with a PUT/PATCH requests.', 'comment_created': datetime.datetime(2021, 3, 24, 21, 42, 7, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}, {'comment_id': 601491818, 'comment_body': ""> we are assuming that the device already contains the config instance.\r\n\r\nThe line was just an example to show that we use `.initial_data()` and not `.data()`\r\nBottom line is stay away from `.data()` unless you want to manipulate the data you are sending to the user.\r\nUse `.initial_data()` in it's place and adjust your code to accommodate cases of `.initial_data()`, that shouldn't be hard."", 'comment_created': datetime.datetime(2021, 3, 25, 13, 37, 28, tzinfo=datetime.timezone.utc), 'commenter': 'atb00ker', 'type': 'User'}, {'comment_id': 601708549, 'comment_body': '@atb00ker this is done.', 'comment_created': datetime.datetime(2021, 3, 25, 17, 40, 49, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}, {'comment_id': 601709694, 'comment_body': 'Yes, @atb00ker Can you please check now? :smiley: ', 'comment_created': datetime.datetime(2021, 3, 25, 17, 42, 26, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}, {'comment_id': 602653087, 'comment_body': 'can you flag the status field as readonly please?', 'comment_created': datetime.datetime(2021, 3, 27, 1, 55, 17, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 602653766, 'comment_body': ""reminder that we'll have to update these screenshots to point to master once we're ready to merge"", 'comment_created': datetime.datetime(2021, 3, 27, 2, 0, 45, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 602653952, 'comment_body': 'please write vpns as VPNs, applies to all the other non-code occurrences', 'comment_created': datetime.datetime(2021, 3, 27, 2, 3, 8, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 602653964, 'comment_body': 'I suggest listing the endpoints in alphabetical order:\r\n\r\n- devices\r\n- templates\r\n- vpns', 'comment_created': datetime.datetime(2021, 3, 27, 2, 3, 16, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 602654077, 'comment_body': ""let's add a line of text which clarifies that this endpoint triggers the download of the tar.gz containing the generated configuration, applies to the other equivalent endpoints as well."", 'comment_created': datetime.datetime(2021, 3, 27, 2, 4, 26, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 602654246, 'comment_body': 'have you wrote a test which tries to remove a required template? If yes can you point it out to me please?', 'comment_created': datetime.datetime(2021, 3, 27, 2, 5, 33, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 602654485, 'comment_body': 'are you sure this works also for a non-staff user? Please write a test for this.', 'comment_created': datetime.datetime(2021, 3, 27, 2, 7, 33, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 602654495, 'comment_body': 'same here', 'comment_created': datetime.datetime(2021, 3, 27, 2, 7, 37, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 602654918, 'comment_body': ""Only this test for this whole work? This is scary. Any change you introduce we can't be fairly sure that the core feature are working.\r\n\r\nThis is a red flag. You have to learn to write some tests while you write the main code, this helps you to make sure that the code you're writing works.\r\n\r\nMoreover, you have to make sure that the tests you write fail without pieces of code that are added afterwards. That's the only way to make sure that the tests you're writing are correct (because it's totally possible to write bogus tests)."", 'comment_created': datetime.datetime(2021, 3, 27, 2, 11, 30, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 602655000, 'comment_body': 'we have to briefly explain how to assign, unassign and/or reorder templates here ', 'comment_created': datetime.datetime(2021, 3, 27, 2, 12, 28, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 602655193, 'comment_body': 'this field must not be editable', 'comment_created': datetime.datetime(2021, 3, 27, 2, 15, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 602655290, 'comment_body': ""Please do not clear templates by default. Only do this if there is any type of change to the templates.\r\nEnsure you have current templates as a list of strings with UUIDs, and the list of templates coming from the HTTP request also as a list of strings with UUID, then only if they're different the templates should be cleared and added back."", 'comment_created': datetime.datetime(2021, 3, 27, 2, 15, 37, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 602655837, 'comment_body': 'this should be not only simpler but also more efficient:\r\n```python\r\ninstance.config.templates.add(*config_templates)\r\n```', 'comment_created': datetime.datetime(2021, 3, 27, 2, 20, 11, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 602655984, 'comment_body': 'please move the api directory under `config`, the django app where this logic belongs.', 'comment_created': datetime.datetime(2021, 3, 27, 2, 22, 11, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 602657223, 'comment_body': ""there's a problem here, if I try to open a VPN which has organization set to `None` (shared), I get an exception.\r\nPlease write a failing test first and then fix it."", 'comment_created': datetime.datetime(2021, 3, 27, 2, 35, 1, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 602657295, 'comment_body': ""there's a problem here, if I try to open a Template which has organization set to `None` (shared), I get an exception.\r\nPlease write a failing test first and then fix it."", 'comment_created': datetime.datetime(2021, 3, 27, 2, 35, 34, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 602657608, 'comment_body': ""please write the list of fields again so they're in the same order that they're listed in the admin, alternatively you may get the list of fields from `VpnAdmin.fields`"", 'comment_created': datetime.datetime(2021, 3, 27, 2, 38, 14, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 602702000, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 3, 27, 10, 35, 14, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}, {'comment_id': 602702021, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 3, 27, 10, 35, 22, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}, {'comment_id': 602702123, 'comment_body': ':smile: I am working on this.', 'comment_created': datetime.datetime(2021, 3, 27, 10, 36, 6, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}, {'comment_id': 602702153, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 3, 27, 10, 36, 32, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}, {'comment_id': 602704573, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 3, 27, 11, 0, 45, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}, {'comment_id': 602715156, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 3, 27, 12, 47, 56, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}, {'comment_id': 602715440, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 3, 27, 12, 50, 24, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}, {'comment_id': 602716005, 'comment_body': ""Sure, Once we are ready to merge, I'll Update it."", 'comment_created': datetime.datetime(2021, 3, 27, 12, 55, 55, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}, {'comment_id': 602720802, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 3, 27, 13, 42, 14, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}, {'comment_id': 602725047, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 3, 27, 14, 21, 13, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}, {'comment_id': 602782423, 'comment_body': 'Yes, I will add the tests soon, Also, I have added a Validation for this, i.e., an Exception will be raised with an error message when we try to remove required templates.', 'comment_created': datetime.datetime(2021, 3, 27, 19, 24, 55, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}, {'comment_id': 602787203, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 3, 27, 20, 13, 5, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}, {'comment_id': 602844330, 'comment_body': 'Yes, they this works fine, but it is required to be authenticated. Sure will write a test for this.', 'comment_created': datetime.datetime(2021, 3, 28, 7, 27, 57, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}, {'comment_id': 602844464, 'comment_body': 'Yes, It works for Non-Staff users as well.', 'comment_created': datetime.datetime(2021, 3, 28, 7, 28, 58, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}, {'comment_id': 602876046, 'comment_body': 'Solved.', 'comment_created': datetime.datetime(2021, 3, 28, 12, 54, 29, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}, {'comment_id': 602876057, 'comment_body': 'Solved.', 'comment_created': datetime.datetime(2021, 3, 28, 12, 54, 42, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}, {'comment_id': 603672612, 'comment_body': 'Added the tests. 😀', 'comment_created': datetime.datetime(2021, 3, 29, 23, 13, 44, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}, {'comment_id': 603880220, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 3, 30, 8, 16, 12, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}, {'comment_id': 606520687, 'comment_body': 'try to make sure lines are not longer than 70/80 characters as in the rest of the text please (applies to all other lines as well).', 'comment_created': datetime.datetime(2021, 4, 3, 0, 8, 41, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 606523559, 'comment_body': 'please create 3 subsections to explain how to add, remove or reorder templates and provide an example with `curl` or `http` in each subsection as we have in openwisp-users, see: [Obtain Authentication Token and Authenticating with the user token](https://github.com/openwisp/openwisp-users/#obtain-authentication-token).', 'comment_created': datetime.datetime(2021, 4, 3, 0, 13, 47, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 606560203, 'comment_body': 'these two fields have an identical `to_internal_value`, so please make a base class called `BaseJsonField` and inherit from it, eg:\r\n\r\n```python\r\nclass BaseJsonField(serializers.Field):\r\n    def to_internal_value(self, data):\r\n        if type(data) is str:\r\n            return ast.literal_eval(data)\r\n        else:\r\n            return data\r\n```', 'comment_created': datetime.datetime(2021, 4, 3, 1, 18, 47, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 606561176, 'comment_body': ""I have tried just `return json.dumps(value)` and it works, can you explain why we have to do `json.loads()`? Doing it unnecessarily just slows down the rendering.\r\n\r\nI also ran the tests with this modification without issues.\r\n\r\nHowever, while trying to edit the content via the API I did get an exception which is fixed by undoing the change, so can you please ensure there is a test for the specific case which needs `json.loads()`?\r\n\r\nAdding a brief comment here explaining why we're doing these two operations would be good."", 'comment_created': datetime.datetime(2021, 4, 3, 1, 20, 32, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 606564829, 'comment_body': ""Let's simplify:\r\n\r\n\r\n```suggestion\r\n        help_text='Configuration in NetJSON format'\r\n```"", 'comment_created': datetime.datetime(2021, 4, 3, 1, 26, 55, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 606565199, 'comment_body': ""\r\n```suggestion\r\n        help_text='Configuration variables in JSON format'\r\n```"", 'comment_created': datetime.datetime(2021, 4, 3, 1, 27, 25, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 606568267, 'comment_body': ""Please wrap all these DB operations in a transaction, eg:\r\n\r\n```python\r\nwith transaction.atomic():\r\n    # ...\r\n```\r\n\r\nIf anything fails for an exceptional reason everything will be rolled back and we won't end up with dead data in the DB."", 'comment_created': datetime.datetime(2021, 4, 3, 1, 31, 46, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 606568460, 'comment_body': 'same here regarding the transaction.', 'comment_created': datetime.datetime(2021, 4, 3, 1, 32, 1, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 606571314, 'comment_body': ""I don't understand this case here, is this how you're checking whether the device already has a config or not?\r\n\r\nThere's a method for that: `instance._has_config()`."", 'comment_created': datetime.datetime(2021, 4, 3, 1, 36, 14, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 606571582, 'comment_body': 'wrap these two in a transaction please', 'comment_created': datetime.datetime(2021, 4, 3, 1, 36, 42, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 606571970, 'comment_body': 'just write return `value` once at the end of the method.', 'comment_created': datetime.datetime(2021, 4, 3, 1, 37, 16, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 606572378, 'comment_body': ""Keep in mind every string which will be presented to the user has to be flagged as translatable:\r\n\r\n```\r\n{'templates': _('Required templates cannot be Unassigned.')}\r\n```"", 'comment_created': datetime.datetime(2021, 4, 3, 1, 37, 52, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 606573472, 'comment_body': ""this should not be required since it's the default right?"", 'comment_created': datetime.datetime(2021, 4, 3, 1, 39, 41, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 606575749, 'comment_body': 'doing this should not be required, find a way to add these URLs here:\r\nhttps://github.com/openwisp/openwisp-controller/blob/master/openwisp_controller/urls.py.\r\n\r\nUse `controller_config` as namespace.', 'comment_created': datetime.datetime(2021, 4, 3, 1, 43, 53, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 606576513, 'comment_body': ""please  prepend 'api_` to the `name` for consistency with naming of the API views of other modules, applies to all other `path()` calls."", 'comment_created': datetime.datetime(2021, 4, 3, 1, 45, 15, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 606606982, 'comment_body': 'why `FilterSerializerByOrgOwned`? I think it should be `FilterSerializerByOrgManaged`, since we want any user who is staff user and member of the org and with the right django permission to view/edit/create/delete objects of their own org.\r\n\r\nApplies to all other occurrences.', 'comment_created': datetime.datetime(2021, 4, 3, 2, 54, 32, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 606607369, 'comment_body': 'Use `FilterSerializerByOrgManaged`.\r\n\r\nMay be good to create a base serializer from which all serializers inherit, eg:\r\n\r\n```python\r\nclass BaseSerializer(FilterSerializerByOrgManaged, ValidatedModelSerializer):\r\n    pass\r\n```', 'comment_created': datetime.datetime(2021, 4, 3, 2, 58, 14, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 606607460, 'comment_body': ""why aren't you using `FilterSerializerByOrgManaged`? I believe this is what is causing the multitenancy security issue.\r\n\r\nAlso, why aren't you inheriting the `ValidatedModelSerializer`?"", 'comment_created': datetime.datetime(2021, 4, 3, 2, 59, 17, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 606607495, 'comment_body': '`FilterSerializerByOrgManaged`', 'comment_created': datetime.datetime(2021, 4, 3, 2, 59, 38, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 606664394, 'comment_body': '> I have tried just return json.dumps(value) and it works, can you explain why we have to do json.loads()? Doing it unnecessarily just slows down the rendering.\r\n\r\nYes, you will get the data but the representation of it will be both different in the JSON response, and the data present in the HTML form field. When we simply use `json.dumps(value)`, the data is not represented in the JSON format instead a single string of all the nested JSON response will be returned. so to preserve the representation to be same in both of them, I implemented in this manner. PS: Try adding `general`, `interfaces`, (more than one) to see the difference.', 'comment_created': datetime.datetime(2021, 4, 3, 13, 21, 20, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}, {'comment_id': 606825235, 'comment_body': 'Removed it.', 'comment_created': datetime.datetime(2021, 4, 4, 16, 38, 59, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}, {'comment_id': 607018809, 'comment_body': ""We can't use `ValidatedModelSerializer` here, because since this validation is designed to validate a single level Model serializer but this is a Nested serializer, here when I am using it after the validation is done it returns only the data of the parent serializer opting out the data of nestedserializer, resulting in an exception error."", 'comment_created': datetime.datetime(2021, 4, 5, 10, 13, 14, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}, {'comment_id': 607428879, 'comment_body': 'why are you sending ""status"" in the request?\r\n\r\nSince it\'s a patch request, shouldn\'t it be possible to pass something like the following?\r\n\r\n``` \r\n{""config"":{""templates"": [""4791fa4c-2cef-4f42-8bb4-c86018d71bd3""]}}\r\n```', 'comment_created': datetime.datetime(2021, 4, 6, 1, 35, 6, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 607428925, 'comment_body': 'same here', 'comment_created': datetime.datetime(2021, 4, 6, 1, 35, 13, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 607429098, 'comment_body': ""let's avoid including the response for brevity, applies to the other responses as well"", 'comment_created': datetime.datetime(2021, 4, 6, 1, 35, 48, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 607429839, 'comment_body': 'this is super weird, why are you doing this?', 'comment_created': datetime.datetime(2021, 4, 6, 1, 38, 14, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 607430040, 'comment_body': 'convert this into a docstring of the method', 'comment_created': datetime.datetime(2021, 4, 6, 1, 38, 53, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 607430326, 'comment_body': 'add this only if `OPENWISP_CONTROLLER_API` is `True`', 'comment_created': datetime.datetime(2021, 4, 6, 1, 39, 52, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 607437551, 'comment_body': ""you must find a way to call the full_clean() method of the models of this serializer because there's a lot of model validation done in `Device` and `Config`.\r\n\r\nFor example, if you try to create a device with name `T E S T`, the API will let you create it, but the admin doesn't, because it's not a valid hostname. Please add a basic test for this."", 'comment_created': datetime.datetime(2021, 4, 6, 2, 5, 20, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 607462517, 'comment_body': 'This is added to handle the EOF error, try removing this and just send a POST request with an empty form.', 'comment_created': datetime.datetime(2021, 4, 6, 3, 13, 26, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}, {'comment_id': 608413013, 'comment_body': 'Added a test for this. All the validation are preserved.', 'comment_created': datetime.datetime(2021, 4, 7, 7, 38, 37, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}, {'comment_id': 608414541, 'comment_body': 'Yes Done.', 'comment_created': datetime.datetime(2021, 4, 7, 7, 40, 52, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}, {'comment_id': 608436344, 'comment_body': '> Ok you can leave this thing of the JSON fields as last thing, please can you point out which is the exact piece of code which influences this behavior?\r\n\r\n@nemesisdesign \r\nUsually in other cases where the default field is JSON is handled with `config = serializers.JSONField()`(Please have a look at other serializers), But in these case things were not working as expected so had to overwrite the `to_representation` and `to_internal_value`. You can experiment with this pieces of code.', 'comment_created': datetime.datetime(2021, 4, 7, 8, 12, 47, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}, {'comment_id': 608437270, 'comment_body': 'Test to assure that valid name is provided when creating a device', 'comment_created': datetime.datetime(2021, 4, 7, 8, 14, 7, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}, {'comment_id': 609237177, 'comment_body': ""can you please check if using select_related here reduces the number of queries + ensure there's a test for this?"", 'comment_created': datetime.datetime(2021, 4, 8, 3, 2, 29, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 609239389, 'comment_body': ""@ManishShah120 did you see one of my previous reviews I mentioned the following?\r\n\r\n> It may be important to show also config.status and config.backend in the list, since these two pieces of information are quite important. Can you add a limited config serializer in the list serializer too @ManishShah120? (Keep in mind to use select_related('config') to keep the number of generated queries under control).\r\n\r\nDid you see this?"", 'comment_created': datetime.datetime(2021, 4, 8, 3, 6, 20, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 609239723, 'comment_body': ""we may need to add `.select_related('config')` here too"", 'comment_created': datetime.datetime(2021, 4, 8, 3, 6, 58, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 609880945, 'comment_body': ""@ManishShah120 did you see one of my previous reviews I mentioned the following?\r\n\r\n> It may be important to show also config.status and config.backend in the list, since these two pieces of information are quite important. Can you add a limited config serializer in the list serializer too @ManishShah120? (Keep in mind to use select_related('config') to keep the number of generated queries under control).\r\n\r\nDid you see this?\r\n\r\nYes, this has been implemented, I was able to achieve this without introducing a new serializer, I introduced two new method fields and got its value by checking if an device has config with `._has_config()` and returned their status, and backend value.\r\n```\r\nstatus = serializers.SerializerMethodField()\r\nbackend = serializers.SerializerMethodField()\r\n```"", 'comment_created': datetime.datetime(2021, 4, 8, 16, 27, 49, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}, {'comment_id': 610417013, 'comment_body': 'Yes it has been implemented.', 'comment_created': datetime.datetime(2021, 4, 9, 7, 43, 52, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}, {'comment_id': 610645133, 'comment_body': ""Test has been added, using `select_related` doesn't reduce the number of queries in this case."", 'comment_created': datetime.datetime(2021, 4, 9, 13, 54, 2, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}, {'comment_id': 613711261, 'comment_body': 'use single quotes please', 'comment_created': datetime.datetime(2021, 4, 15, 2, 18, 8, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 613712120, 'comment_body': ""Shared templates can only be created by superusers.\r\n\r\nFlag this string as translatable! I am repeating this over and over with everyone, please remember! Double check any string which is returned by the API or shown in the browsable API and ensure it's flagged as translatable.\r\n\r\nPlease help me to avoid wasting my time pointing out to same trivial mistakes like this all the time so we can use this time to help you improve more important areas of your work."", 'comment_created': datetime.datetime(2021, 4, 15, 2, 20, 50, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 613714683, 'comment_body': 'This solution looks good to me, however, would be even better if we avoided showing the empty org option altogether, if that\'s doable and it\'s enforced, that is even better (simpelr and better UX). Is that doable? We do this for the admin, I suggest check the code in openwisp-users to see how we do it: https://github.com/openwisp/openwisp-users/blob/aea15b42085967d16dfb82dd19c1bc8d261209b2/openwisp_users/multitenancy.py#L70-L78\r\n\r\nI am sure we need it also for VPNs. I created a staff non super user with the ""administrator"" role and I see that they can create a VPN server in the admin and the option to select ""shared systemwide"" is not present.\r\nI suggest proceeding with creating a reusable solution, first implement it here in this PR, then we\'ll port it to openwisp-users and update this PR.', 'comment_created': datetime.datetime(2021, 4, 15, 2, 29, 19, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 613875739, 'comment_body': ""Sure, I'll take care of this from next time."", 'comment_created': datetime.datetime(2021, 4, 15, 8, 45, 58, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}, {'comment_id': 615297101, 'comment_body': '> however, would be even better if we avoided showing the empty org option altogether,\r\nIs that doable?\r\n\r\nYes It is doable, by just altering the queryset in the `FilterSerializerByOrganization` class, we can exclude the empty field from the option for non-super users, but after implementing it there, we will not be required to add this field level validation, as it will not get triggered, and the model validation will handle this portion.\r\n\r\nhere https://github.com/openwisp/openwisp-users/blob/aea15b42085967d16dfb82dd19c1bc8d261209b2/openwisp_users/api/mixins.py#L131-L134 by adding `self.fields[field].allow_null = False` this we can achieve what we want.\r\n\r\n@nemesisdesign Should I make the required changes here https://github.com/openwisp/openwisp-users/issues/235 and then update this PR?', 'comment_created': datetime.datetime(2021, 4, 17, 19, 47, 40, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}, {'comment_id': 615902652, 'comment_body': 'sounds good!', 'comment_created': datetime.datetime(2021, 4, 19, 14, 33, 37, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 619318443, 'comment_body': 'I think we can convert these two to `path` and get rid of `from django.conf.urls import url`! :smile:', 'comment_created': datetime.datetime(2021, 4, 23, 15, 39, 41, tzinfo=datetime.timezone.utc), 'commenter': 'atb00ker', 'type': 'User'}, {'comment_id': 619384654, 'comment_body': ""Can `fields = '__all__'` help?\r\nOr if you want to remove any field, would [`exclude`](https://www.django-rest-framework.org/api-guide/serializers/#specifying-which-fields-to-include) help to have shorter list?\r\n"", 'comment_created': datetime.datetime(2021, 4, 23, 17, 25, 17, tzinfo=datetime.timezone.utc), 'commenter': 'atb00ker', 'type': 'User'}, {'comment_id': 619384822, 'comment_body': 'Same as above.', 'comment_created': datetime.datetime(2021, 4, 23, 17, 25, 37, tzinfo=datetime.timezone.utc), 'commenter': 'atb00ker', 'type': 'User'}, {'comment_id': 619392534, 'comment_body': 'Why do we need to evaluate here?\r\n\r\nWill something like this work:\r\n```\r\nclass BaseJsonField(serializers.Field):\r\n    def to_internal_value(self, data):\r\n        try:\r\n            json.loads(data)\r\n        except ValueError:\r\n            return {}\r\n        return data\r\n```', 'comment_created': datetime.datetime(2021, 4, 23, 17, 39, tzinfo=datetime.timezone.utc), 'commenter': 'atb00ker', 'type': 'User'}, {'comment_id': 619393615, 'comment_body': 'I assume this is used to check if the value is valid JSON, is it?', 'comment_created': datetime.datetime(2021, 4, 23, 17, 40, 57, tzinfo=datetime.timezone.utc), 'commenter': 'atb00ker', 'type': 'User'}, {'comment_id': 619395039, 'comment_body': 'Correct me if I am wrong, but this would only give templates for one organization, which might not be desirable if user is in multiple organizations,\r\nWhat do you think about something like:\r\n```\r\nuserOrgList = user.organizations_dict.keys()\r\nquery = Q(organization=None)\r\nfor org in userOrgList:\r\n    query |= Q(organization=org)\r\n\r\nTemplate.objects.filter(query)\r\n```', 'comment_created': datetime.datetime(2021, 4, 23, 17, 43, 42, tzinfo=datetime.timezone.utc), 'commenter': 'atb00ker', 'type': 'User'}, {'comment_id': 619395429, 'comment_body': 'Same as above.', 'comment_created': datetime.datetime(2021, 4, 23, 17, 44, 21, tzinfo=datetime.timezone.utc), 'commenter': 'atb00ker', 'type': 'User'}, {'comment_id': 619469099, 'comment_body': 'Yes sure.', 'comment_created': datetime.datetime(2021, 4, 23, 20, 6, 59, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}, {'comment_id': 619470128, 'comment_body': ""Yes, but when we use `fields='__all__'`, then the order is not preserved according to the order of admin panel, So Federico asked me to maintain the order as that of the admin panel."", 'comment_created': datetime.datetime(2021, 4, 23, 20, 9, 16, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}, {'comment_id': 619470582, 'comment_body': 'To maintain the order of the fields.', 'comment_created': datetime.datetime(2021, 4, 23, 20, 10, 11, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}, {'comment_id': 619472072, 'comment_body': 'Ahh, Yes this should work too, But once I resolve this https://github.com/openwisp/openwisp-utils/issues/164, I guess there will be no need to dynamically convert and manage these fields, I had to do all these because of the representation issue of JSON Field.', 'comment_created': datetime.datetime(2021, 4, 23, 20, 13, 35, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}, {'comment_id': 619473961, 'comment_body': 'No, These is used to convert primitive datatype to serialisable datatype. I tried creating a custom serializer field for representing the JSON type for `config` and `context` field, but this portion of code will also be removed once we upgrade DRF to 3.12.', 'comment_created': datetime.datetime(2021, 4, 23, 20, 17, 39, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}, {'comment_id': 619474799, 'comment_body': 'Yes, you are right. I will try to implement this way.', 'comment_created': datetime.datetime(2021, 4, 23, 20, 19, 27, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}, {'comment_id': 619475027, 'comment_body': 'to maintain the order', 'comment_created': datetime.datetime(2021, 4, 23, 20, 19, 54, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}, {'comment_id': 619894890, 'comment_body': 'we should be able to upgrade to DRF 3.12 now, I merged your other PR. Let us know.', 'comment_created': datetime.datetime(2021, 4, 25, 23, 14, 35, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 619895605, 'comment_body': 'you should be able to update this now', 'comment_created': datetime.datetime(2021, 4, 25, 23, 19, 50, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 619895872, 'comment_body': 'A device can get templates of the same organization or shared templates (with organization=None), templates from multiple organizations cannot be assigned.\r\n\r\nWe need to be able to ensure a user can assign normal templates from the same org and shared templates, please create a test for this @ManishShah120 because we need to ensure this kind of basic functionality will keep working over subsequent changes of the API.', 'comment_created': datetime.datetime(2021, 4, 25, 23, 21, 39, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 620318123, 'comment_body': ""> But, I think a device will belong to only one organization, and nemesisdesign suggested that template of multiple organization can't be allowed to be added to a device. So multiple organization template assigning to a single device will not be allowed.\r\n> It's a bit confusing. 🤔 \r\n> -@ManishShah120 on Gitter\r\n\r\nOkay, I misunderstood the function's purpose.\r\nCan we please change it's name to suggest it filter's name by organization for a device?\r\n\r\nNow, if the data is filtered for the device, why are we looking at `user.organization_dict`?\r\nUser can be in multiple orgs while device can only be in one org.\r\nIf we use `user.organization_dict`, how do we know we will get the correct organization of the device?\r\nWhat do you think about using the organization of the device / config?\r\n\r\n"", 'comment_created': datetime.datetime(2021, 4, 26, 13, 52, 58, tzinfo=datetime.timezone.utc), 'commenter': 'atb00ker', 'type': 'User'}, {'comment_id': 620372258, 'comment_body': ""> Now, if the data is filtered for the device, why are we looking at `user.organization_dict`?\r\n\r\n@atb00ker Since this filter is used to filter out the templates belonging to user's organization(s), so suppose a user wants to create a device, then with the help of this function, all the templates belogning to user's org's will be shown, i.e., even if the device is not created the templates in the `config` section needs to be filtered by the users organization(s), so that a user can't use any templates from another organization when creating a device.\r\n\r\n> If we use user.organization_dict, how do we know we will get the correct organization of the device?\r\n\r\nYes, so if incase a user belongs to multiple orgs, then he will be allowed to create devices in any one of the orgs he is a part of, and then he/ she should select those organization templates which belongs to the one selected in the device organization field."", 'comment_created': datetime.datetime(2021, 4, 26, 14, 50, 49, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}, {'comment_id': 620391750, 'comment_body': ""Okay, let's see this part in Admin UI:\r\nWhen we create a device, it loads templates *after* we select an organization for device.\r\nWe need to do something similar although, I am not sure if it's possible in RDF to dynamically update the multiselect options based on another dropdown, can you please check this? If you don't think anything, please let me know, I'll try to help with the R&D.\r\n\r\nThe problem with the solution I proposed is that we would should all the templates to the user and add checks in the backend to not allow some of those to be applicable, which is not ideal, we should not even show the templates that are not applicable.\r\n\r\nThe problem with `next(iter(user.organizations_dict))` is that it returns only one organization. What if it gets templates for org1 and user selected org2 for the device, again, that's a problem.\r\n\r\nSo, if we want to select organization for device's organization, I don't think we will find our answer in `user.organization_dict`."", 'comment_created': datetime.datetime(2021, 4, 26, 15, 12, 1, tzinfo=datetime.timezone.utc), 'commenter': 'atb00ker', 'type': 'User'}, {'comment_id': 621241305, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 4, 27, 14, 3, 51, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}, {'comment_id': 622556194, 'comment_body': ""Yes, It'd done. :+1: "", 'comment_created': datetime.datetime(2021, 4, 28, 21, 10, 39, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}, {'comment_id': 623505321, 'comment_body': 'flag the `help_text` string as translatable', 'comment_created': datetime.datetime(2021, 4, 30, 0, 15, 13, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 623505331, 'comment_body': 'flag the `help_text` string as translatable', 'comment_created': datetime.datetime(2021, 4, 30, 0, 15, 16, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 623511636, 'comment_body': ""You may not know but this is redundant (and hopefully now you'll know).\r\n\r\nDefault and required templates get assigned by default when a new config is created, try the following code in the django shell (`shell_plus` with ipython or bpython), after ensuring in your dev env there's at least one required template and one default template:\r\n\r\n```python\r\ndev = Device(\r\n  name='prova-required',\r\n  mac_address='00:11:22:33:44:63',\r\n  organization=Organization.objects.first()\r\n)\r\ndev.full_clean()\r\ndev.save()\r\ndev.config=Config(backend='netjsonconfig.OpenWrt')\r\ndev.config.full_clean()\r\ndev.save()\r\n```\r\n\r\nAfter trying this you should see that the new config object has the required template assigned.\r\n\r\nThe difference between default and required then is that if the required template is removed in anyway, the backend code adds it back.\r\n\r\nTherefore this logic and any other logic that adds required templates is redundant and can be removed. Let's simplify!"", 'comment_created': datetime.datetime(2021, 4, 30, 0, 35, 10, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 623514486, 'comment_body': ""what about:\r\n\r\n```python\r\ndef create(self, validated_data):\r\n    config_data = None\r\n    if validated_data.get('config'):\r\n        config_data = validated_data.pop('config')\r\n        config_templates = [\r\n            template.pk for template in config_data.pop('templates')\r\n        ]\r\n\r\n    with transaction.atomic():\r\n        device = Device.objects.create(**validated_data)\r\n        if config_data:\r\n            config = Config.objects.create(device=device, **config_data)\r\n            config.templates.add(*config_templates)\r\n    return device\r\n```\r\n\r\nisn't it simpler and achieves the same result?"", 'comment_created': datetime.datetime(2021, 4, 30, 0, 45, 31, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 623515626, 'comment_body': ""you know what, I'm not sure of adding all these lines of code is worth it.\r\n\r\nI am coming to the conclusion that we could simply remove all this complexity and keep the behavior like the admin: required templates are just added back by the model code, we don't need to do anything apart documenting it in the API view docstring and in the README.\r\n\r\nWhat do you think? Let's simplify."", 'comment_created': datetime.datetime(2021, 4, 30, 0, 49, 22, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 623515988, 'comment_body': 'whenever you add docstrings, add them like:\r\n\r\n```python\r\n""""""\r\nText here.\r\n""""""\r\n```\r\n\r\nDouble quotes, no additional indentation, final dot.', 'comment_created': datetime.datetime(2021, 4, 30, 0, 50, 52, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 624691933, 'comment_body': 'Okay, I removed the validation. Now even if the user removes the required template, it gets added back.', 'comment_created': datetime.datetime(2021, 5, 2, 13, 5, 3, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}, {'comment_id': 624781710, 'comment_body': 'yes @atb00ker it is better to go with your suggestion, I understood your point.', 'comment_created': datetime.datetime(2021, 5, 2, 21, 57, 43, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}, {'comment_id': 625093749, 'comment_body': ""I can't find the previous thread on this code, but bottom line there was that there is a problem with this code as well,\r\nConsider if user is in 2 organizations (org1 & org2) and they are creating device in org2.\r\nWe want to show them templates from org2 & `organization=None` filter.\r\nMakes sense?\r\n\r\nThis is also wrong according to that conversation because this will filter for both org1 and org2, while the code before this would have filtered for org1. \r\nSee the problem? "", 'comment_created': datetime.datetime(2021, 5, 3, 13, 41, 46, tzinfo=datetime.timezone.utc), 'commenter': 'atb00ker', 'type': 'User'}, {'comment_id': 625354819, 'comment_body': 'Yes, I understand but I am not sure if this can be done with DRF. :thinking: , but still this approach is better then the previous one, and this will not cause any error, because if a user selects org2 as organization of the device, and then selects any templates belonging to org1, then a validation error is raised not allowing the user to create the instance. \r\n\r\nAlso, If there is anyway we can achieve it? I would love to get any suggestion/material/reference for achieving this. :smile: ', 'comment_created': datetime.datetime(2021, 5, 3, 20, 42, 6, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}, {'comment_id': 625472606, 'comment_body': ""hey guys, I really do not follow you and I don't understand why this is being done, is it being done for read operations or write operations?\r\n\r\nFor read, all the templates assigned to a device must be shown to any user.\r\nFor write, we should allow only templates that are either shared or belong to one of the organizations the user manages (not all organizations like you're doing here Manish).\r\nI think we should do a change like the one I propose here: https://github.com/openwisp/openwisp-users/issues/247#issuecomment-831644780 and use that.\r\n\r\n@ManishShah120 if you want to test such a solution in this module you can do so, but I avoid to rewrite the whole serializer like you're doing here because that's duplication. I would inherit `FilterByOrganizationManaged` and override the `get_organization_queryset` method."", 'comment_created': datetime.datetime(2021, 5, 4, 2, 13, 19, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 625473263, 'comment_body': 'PS: watch out from camel case names like `userOrgList`, pelase keep the naming convention consistent. ', 'comment_created': datetime.datetime(2021, 5, 4, 2, 16, 4, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 625900362, 'comment_body': ""@nemesisdesign  \r\nhttps://github.com/openwisp/openwisp-users/issues/247#issuecomment-831644780\r\nWill return the list of all the orgs that user manages, how do we filter which one we want to use? For that, I proposed, let's just the organization selected for the device and we rely on device's organization not user's organization for filtering the templates on device creation page."", 'comment_created': datetime.datetime(2021, 5, 4, 15, 51, 26, tzinfo=datetime.timezone.utc), 'commenter': 'atb00ker', 'type': 'User'}, {'comment_id': 625954699, 'comment_body': '@atb00ker Suppose you want to create a device, with the API and you belong to `org1` & `org2`, then since the device has not been created, how would the `templates` be filtered?. So here you suggested something like when a user selects the organization of a device after that the templates belonging to that org should be populated right, but this is not possible with DRF.\r\n\r\nSo, What I am doing here is:-\r\nI am filtering the templates based on the organization of the user, from that the user can select the organization he want to create a device from and then select the corresponding templates belonging to the organization of the device, and if the user selects templates not belonging to the org of the device, then a validation error is raised.', 'comment_created': datetime.datetime(2021, 5, 4, 17, 5, 6, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}, {'comment_id': 625955517, 'comment_body': ""> hey guys, I really do not follow you and I don't understand why this is being done, is it being done for read operations or write operations?\r\n\r\nThis function filters out the templates based on the organization of the user. I tried inheriting `FilterSerializerByOrgManaged`, and applying the approach you suggested but, here all this has been done in the nested serialzer fields, and the mixin is designed only for flat serilaizer classes."", 'comment_created': datetime.datetime(2021, 5, 4, 17, 6, 16, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}, {'comment_id': 626029835, 'comment_body': ""@ManishShah120 ok let's find a solution that can work also in nested serializers then, is that an issue?\r\n@atb00ker I would keep it simple and avoid further filtering, we have done that in the django admin and is not trivial, it requires a lot of work to be done correctly, this is more a frontend thing, we expect software which will consume this API to do that work of filtering out the right values to show to users, don't you think?"", 'comment_created': datetime.datetime(2021, 5, 4, 18, 59, 14, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 626770025, 'comment_body': ""@nemesisdesign  \r\nhttps://github.com/openwisp/openwisp-users/issues/247#issuecomment-831644780\r\nWill return the list of all the orgs that user manages, how do we filter which one we want to use? For that, I proposed, let's just the organization selected for the device and we rely on device's organization not user's organization for filtering the templates on device creation page."", 'comment_created': datetime.datetime(2021, 5, 5, 17, 39, 49, tzinfo=datetime.timezone.utc), 'commenter': 'atb00ker', 'type': 'User'}, {'comment_id': 627616433, 'comment_body': ""@ManishShah120 Had a conversation with Fed, \r\nwe will be going for: \r\n```\r\nwe show all templates from\r\n- org=None\r\n- any org were user is manager\r\n ```\r\n \r\n Because the case I mentioned is a corner case and the problem wouldn't be seen in normal usage as extended apps can take care of that.. if we need it, we will come to it in future! :smile:"", 'comment_created': datetime.datetime(2021, 5, 6, 17, 11, 7, tzinfo=datetime.timezone.utc), 'commenter': 'atb00ker', 'type': 'User'}, {'comment_id': 627877600, 'comment_body': ""@ManishShah120 when you fix issues, try to always write basic tests, make it a habit, it's a good one"", 'comment_created': datetime.datetime(2021, 5, 7, 2, 15, 10, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 628623565, 'comment_body': ""it's always a good idea to assert for the status code as well, eg: `self.assertEqual(r.status_code, 400)`"", 'comment_created': datetime.datetime(2021, 5, 8, 0, 0, 17, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 628624160, 'comment_body': 'if the vpn is shared, usually the template is shared as well', 'comment_created': datetime.datetime(2021, 5, 8, 0, 1, 46, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 628626888, 'comment_body': ""I don't see a test which ensures shared templates can be assigned to a device, was that already added before? If not, can you please add it?"", 'comment_created': datetime.datetime(2021, 5, 8, 0, 8, 28, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 628635809, 'comment_body': ""why is this function being added here? I think it should go in `openwisp_controller.config.api.urls`.\r\n\r\nBTW the reasons we use functions is to allow to extende the API views and URLs but I don't see anything done on that front but I think we should."", 'comment_created': datetime.datetime(2021, 5, 8, 0, 29, 25, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 628720864, 'comment_body': ""Yes, but aren't we testing this for the operator and operator can't create shared templates, other than that admin gets all the the vpn by default, so how are we gonna test for the shared objects. :thinking: "", 'comment_created': datetime.datetime(2021, 5, 8, 8, 24, 41, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}, {'comment_id': 628722722, 'comment_body': 'Yes, It is contained in this:- https://github.com/ManishShah120/openwisp-controller/blob/4eacd3cca7e06e8a9f84153ef966bb0601d765c1/openwisp_controller/config/tests/test_api.py#L203-L215', 'comment_created': datetime.datetime(2021, 5, 8, 8, 44, 15, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}, {'comment_id': 628726989, 'comment_body': 'Okay, will move it to `openwisp_controller.config.api.urls`', 'comment_created': datetime.datetime(2021, 5, 8, 9, 26, 10, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}, {'comment_id': 628764563, 'comment_body': ""| SN | /api/v1/controller/template/                               | Status |\r\n|----|------------------------------------------------------------|--------|\r\n| 1  | [SU] Can view all templates                                | Pass   |\r\n| 2  | [O1A] can view only org1 templates (not even shared org)   | Pass   |\r\n| 3  | [O1O] can view no templates                                | Pass   |\r\n| 4  | [SU] VPN-Client hidden for Generic Template                | NTD   |\r\n| 5  | [SU][O1A] Field validation error on field                  | Fail   |\r\n| 6  | [SU][O1A] Allows creating template without config          | Fail   |\r\n| 7  | [SU][O1A][O1O] Allows creating template with config        | Pass   |\r\n| 8  | [SU][O1A][O1O] Allow creating VPN template                 | Pass   |\r\n| 9  | [SU][O1A][O1O] Allow creating VPN template without openvpn | NTD   |\r\n| 10  | [O1O] Access denied to org1 operator user              | NTD    |\r\n| 11  | [SU] Unique template name ensured              | Pass    |\r\n| 12  | [O1A] Trying to create template for another org gives object not found  error | Pass    |\r\n\r\n**SN. 4:**\r\n![case4fail](https://user-images.githubusercontent.com/24985760/117544793-9ccce000-b040-11eb-97c5-7ceaefa516da.png)\r\n@nemesisdesign I think this is an acceptable deviation, can you please confirm.\r\n\r\n**SN. 5:**\r\n![case5-1](https://user-images.githubusercontent.com/24985760/117544800-9f2f3a00-b040-11eb-9a98-4144c16494f4.png)\r\n@ManishShah120 Can we show the error on config instead of `__all__`? it would be useful for people making apps using the API.\r\n\r\n**SN. 9**\r\n![case9](https://user-images.githubusercontent.com/24985760/117544802-a0606700-b040-11eb-9da2-a7b0ef22d623.png)\r\n@nemesisdesign is this okay?\r\n\r\n**SN. 10**\r\n@nemesisdesign Shouldn't we deny access to the page if creating and viewing is not allowed? Same for admin UI. Why is access even allowed?\r\n"", 'comment_created': datetime.datetime(2021, 5, 8, 15, 38, 46, tzinfo=datetime.timezone.utc), 'commenter': 'atb00ker', 'type': 'User'}, {'comment_id': 628777921, 'comment_body': '|   | controller/template/<str:pk>/                            | Status |\r\n|---|----------------------------------------------------------|--------|\r\n| 1 | [SU] Can view any templates                              | Pass   |\r\n| 2 | [O1A] Can view only org1 templates (not even shared org) | Pass   |\r\n| 3 | [O1O] Can view no templates                              | Pass   |\r\n| 4 | [SU][O1A] Correct data of the template shown             | Pass   |\r\n| 5  | [SU][O1A][O1O] Can only delete templates if they have correct privilege              | Pass    |\r\n', 'comment_created': datetime.datetime(2021, 5, 8, 17, 53, 38, tzinfo=datetime.timezone.utc), 'commenter': 'atb00ker', 'type': 'User'}, {'comment_id': 628779147, 'comment_body': '|   | controller/template/<str:pk>/configuration                | Status | \r\n|---|-----------------------------------------------------------|--------|\r\n| 1 | [SU][O1A][O1O]  Can download any configuration                       | Pass   \r\n| 2 | [SU][O1A] Correct template config downloaded              | Pass ', 'comment_created': datetime.datetime(2021, 5, 8, 18, 6, 27, tzinfo=datetime.timezone.utc), 'commenter': 'atb00ker', 'type': 'User'}, {'comment_id': 628785951, 'comment_body': '|    | controller/vpn/                                                                  | Status | Fail Reason                                                                                                                                                   |\r\n|----|----------------------------------------------------------------------------------|--------|---------------------------------------------------------------------------------------------------------------------------------------------------------------|\r\n| 1  | [SU] Can view any VPN                                                            | Pass   |                                                                                                                                                               |\r\n| 2  | [O1A] Can view only org1 VPN (not even shared org)                               | Pass   |                                                                                                                                                               |\r\n| 3  | [O1O] Cannot view any VPN                                                        | Pass   |                                                                                                                                                               |\r\n| 4  | [SU][O1A] Field validation error on field                                        | Fail   | { ""config"" : [""This field cannot be blank.""], ""__all__"" :[""Invalid configuration triggered by \\""#/\\"", validator says:\\n\\n\'openvpn\' is a required property""] } |\r\n| 5  | [SU] Only valid config schema accepted                                           | Pass   |                                                                                                                                                               |\r\n| 6  | [SU][O1A] Can create VPN                                                         | Pass   |                                                                                                                                                               |\r\n| 7  | [SU][O1A] Cannot create VPN                                                      | Pass   |                                                                                                                                                               |\r\n| 8  | [SU][O1A] Unique name per org check                                              | Pass   |                                                                                                                                                               |\r\n| 9  | [SU][O1A] Appropriate CA/Certs visible                                           | Fail   | O1A does not see shared CA/Certs                                                                                                                              |\r\n| 10 | [01A] Trying to create device with another org\'s id gives object not found error | Pass   |                                                                                                                                                               |\r\n', 'comment_created': datetime.datetime(2021, 5, 8, 19, 14, 55, tzinfo=datetime.timezone.utc), 'commenter': 'atb00ker', 'type': 'User'}, {'comment_id': 628786383, 'comment_body': 'SN | controller/vpn/str:pk/ | Status\r\n-- | -- | --\r\n1 | [SU] Can view any vpn | Pass\r\n2 | [O1A] Can view only org1 vpns (not even shared org) | Pass\r\n3 | [O1O] Cannot view any vpn | Pass\r\n4 | [SU][O1A] Correct data of the vpn shown | Pass\r\n5 | [SU][O1A][O1O] Can only delete templates if they have correct privilege | Pass\r\n\r\n', 'comment_created': datetime.datetime(2021, 5, 8, 19, 19, 21, tzinfo=datetime.timezone.utc), 'commenter': 'atb00ker', 'type': 'User'}, {'comment_id': 628787098, 'comment_body': '|   | controller/vpn/str:pk/configuration          | Status |\r\n|---|----------------------------------------------|--------|\r\n| 1 | [SU] Can download any configuration          | Pass   |\r\n| 2 | [SU][O1A] Correct template config downloaded | Pass   |', 'comment_created': datetime.datetime(2021, 5, 8, 19, 26, 53, tzinfo=datetime.timezone.utc), 'commenter': 'atb00ker', 'type': 'User'}, {'comment_id': 628959047, 'comment_body': ""> SN\t/api/v1/controller/template/\tStatus\r\n> 1\t[SU] Can view all templates\tPass\r\n> 2\t[O1A] can view only org1 templates (not even shared org)\tPass\r\n> 3\t[O1O] can view no templates\tPass\r\n> 4\t[SU] VPN-Client hidden for Generic Template\tNTD\r\n> 5\t[SU][O1A] Field validation error on field\tFail\r\n> 6\t[SU][O1A] Allows creating template without config\tFail\r\n> 7\t[SU][O1A][O1O] Allows creating template with config\tPass\r\n> 8\t[SU][O1A][O1O] Allow creating VPN template\tPass\r\n> 9\t[SU][O1A][O1O] Allow creating VPN template without openvpn\tNTD\r\n> 10\t[O1O] Access denied to org1 operator user\tNTD\r\n> 11\t[SU] Unique template name ensured\tPass\r\n> 12\t[O1A] Trying to create template for another org gives object not found error\tPass\r\n> **SN. 4:**\r\n> ![case4fail](https://user-images.githubusercontent.com/24985760/117544793-9ccce000-b040-11eb-97c5-7ceaefa516da.png)\r\n> @nemesisdesign I think this is an acceptable deviation, can you please confirm.\r\n\r\nYes it's acceptable because it's an API and not a frontend.\r\n\r\n> **SN. 5:**\r\n> ![case5-1](https://user-images.githubusercontent.com/24985760/117544800-9f2f3a00-b040-11eb-9a98-4144c16494f4.png)\r\n> @ManishShah120 Can we show the error on config instead of `__all__`? it would be useful for people making apps using the API.\r\n\r\nIf possible this would be a good improvement.\r\n\r\n> **SN. 9**\r\n> ![case9](https://user-images.githubusercontent.com/24985760/117544802-a0606700-b040-11eb-9da2-a7b0ef22d623.png)\r\n> @nemesisdesign is this okay?\r\n\r\nIt does look good to me. Why it shouldn't? I don't understand your point.\r\n\r\n> **SN. 10**\r\n> @nemesisdesign Shouldn't we deny access to the page if creating and viewing is not allowed? Same for admin UI. Why is access even allowed?\r\n\r\nRight, good catch!\r\nDRF doesn't implement the view permission by default: \r\nhttps://www.django-rest-framework.org/api-guide/permissions/#djangomodelpermissions\r\n\r\nWe have to do it. Please @ManishShah120 can you add a `DjangoModelPermissions` class which inherits from `DjangoModelPermissions` and adds the view permission as indicated in the DRF docs?\r\nThen we should use this new permission class instead of the default one.\r\n\r\n@atb00ker regarding the admin view, what do you refer to exactly?\r\n"", 'comment_created': datetime.datetime(2021, 5, 9, 23, 33, 46, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 628959584, 'comment_body': 'I\'m afraid ""the invalid configuration triggered by ... "" is defined at model level and we have to leave as is for now.', 'comment_created': datetime.datetime(2021, 5, 9, 23, 38, 10, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 629578792, 'comment_body': ""> >    @nemesisdesign is this okay?\r\n\r\n> It does look good to me. Why it shouldn't? I don't understand your point.\r\n\r\nThe VPN servers created from UI always have a openvpn section in configuration, here we are able to make it without that! :smile:"", 'comment_created': datetime.datetime(2021, 5, 10, 18, 24, 46, tzinfo=datetime.timezone.utc), 'commenter': 'atb00ker', 'type': 'User'}, {'comment_id': 630055371, 'comment_body': '@atb00ker SN5, SN6 is resolved.', 'comment_created': datetime.datetime(2021, 5, 11, 10, 45, 13, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}, {'comment_id': 630096831, 'comment_body': 'S9, is working fine for me.', 'comment_created': datetime.datetime(2021, 5, 11, 11, 53, 36, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}, {'comment_id': 632697475, 'comment_body': '@atb00ker regarding SN10, I think you missed one more failing case which is foralong with this [O1A]  administrator but not manager i.e., (is_admin for org1 not set to True)', 'comment_created': datetime.datetime(2021, 5, 14, 17, 51, 55, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}, {'comment_id': 632732078, 'comment_body': ""Copying @nemesisdesign 's response on Gitter:\r\n\r\n```\r\n@ManishShah120 @atb00ker I am not sure I understand what we're discussing, can you be more explicit and provide some user stories as examples?\r\nI am not following you.\r\n\r\nAs a general rule, for now, I'd simplify everything:\r\n\r\n    only organization managers (having is_admin=True) or superusers can use the API\r\n    non superusers have limited permissions, according to the permissions defined in django\r\n\r\nSo if user is not manager of the org, it can't do anything via the API right now.\r\n\r\nIf user is superuser, can do anything.\r\n\r\nIf user is not superuser and is manager of an org, it can do what their django permissions allow them to do.\r\n```"", 'comment_created': datetime.datetime(2021, 5, 14, 18, 52, 34, tzinfo=datetime.timezone.utc), 'commenter': 'atb00ker', 'type': 'User'}]","[{'commit_sha': '9e9701590a2c654dce1ea90587b22b74d977b4ea', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5ead323c8a7d16878d7807131268cb86a20f9bcd', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b04bd836ba46eee1f8709c516fc2f902dbf4b3b8', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '38f481654d3ac6fb85711c596dbe2848063dd1ad', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9d779db7ec8751b0e6f6166076558225c96a7ba1', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e45685fdda28c47263739adc0fbc1e0315b40793', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9c25048f2b7cf14e39df94a8564a40231b5b7070', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fb44b20e71b698a65e7cca549a655913f4b96b14', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6d5984f092491d53205a2d5c9bc53c66a54d4dd9', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cd2ca573cce21f7eab9ada16b75343023b4e8fd1', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '22ad25b2154bef45fa89543503321b9b9f5020f0', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3cdd17da40fbc188ca4a14ed0f547fba35f183f1', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2ea8207da3aaed24bde0b97ba710104cefabc6db', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b3bbdd1e05d2e412f204b3748c1a9d4b78359e46', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8caa48f045439732e8c148d107194f927d21c194', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '846d6ceb1aac447ce2b24c5ab32d7503dfc9d364', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'af7b407f048491444d2b7897add3b6e2a829bd5e', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4fde2f8878b78a01fb942693db494c9538a7eca3', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '48b769723d44fa543c231b59ef3041de8460e003', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f5154dc8ae9439aaa856c3a2999487feb49d0bda', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6e4cf9cf71cc7b7ef614b98366fb107c65a55dfc', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a00573880ca7672037ead75e6a3f1de30fd94b43', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '06b183f8c6b59406d108343b84991d572bea02e4', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'efebb918c657381c25f776923861a7980cfe283a', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c592b3e32e410a1498a70e9e34aa9b1603c8545a', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '718e414850229ddde8dab716ddc3848ffae27585', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4eacd3cca7e06e8a9f84153ef966bb0601d765c1', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3eed8854ac0e797615b645fe6811260f3e175e07', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '15405eb9d2cf908d22ef24738c879a303cbda103', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7e1d9ca7388ccdb4fdae22e39032bf26c691ca6d', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c742290f126935ad2e995b349a63d63a9a40ef7a', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '28f16222a027bef681757a312e888620fe903d22', 'committer_username': 'nemesifier', 'committer_name': 'Federico Capoano', 'committer_email': 'f.capoano@openwisp.io', 'commit_date': datetime.datetime(2011, 6, 9, 22, 30, 31, tzinfo=datetime.timezone.utc)}]",Manish Kumar Shah,45564404,,User,,57,,169,155
574901710,[feature] REST API for main controller features #379,Closes #379,True,386,https://api.github.com/repos/openwisp/openwisp-controller/pulls/386,https://github.com/openwisp/openwisp-controller/pull/386,closed,1287,2,13,32,45,172,1,1,[{'name': 'enhancement'}],2021-02-17 13:04:07+00:00,2021-05-12 03:46:32+00:00,7224145.0,"83 days, 14:42:25","[{'comment_id': 578046074, 'comment_body': ""is this nested include really needed or is it the best practice to do this? I've never seen it."", 'comment_created': datetime.datetime(2021, 2, 18, 0, 48, 37, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 578046931, 'comment_body': 'all the templates will surely need to contain more logic', 'comment_created': datetime.datetime(2021, 2, 18, 0, 51, 5, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 578212296, 'comment_body': ""Since more than one app's API's are present in this module I tried to keep the URL in the main urls.py as `api/v1/` so if I don't use nesting here then each time I write path I will be required to add `controller` to it, so proceeded with this approach."", 'comment_created': datetime.datetime(2021, 2, 18, 8, 16, 34, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}, {'comment_id': 578212942, 'comment_body': 'Yes', 'comment_created': datetime.datetime(2021, 2, 18, 8, 17, 40, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}, {'comment_id': 584271418, 'comment_body': 'Maybe, you could move these URLs in a separate file and get urls from the function there like done in [openwisp-radius urls](https://github.com/openwisp/openwisp-radius/blob/master/openwisp_radius/urls.py#L18).', 'comment_created': datetime.datetime(2021, 2, 28, 10, 9, 47, tzinfo=datetime.timezone.utc), 'commenter': 'atb00ker', 'type': 'User'}, {'comment_id': 584271601, 'comment_body': 'I think we can start to get rid of `url` now and move to `path`, what do you think? :smile:', 'comment_created': datetime.datetime(2021, 2, 28, 10, 11, 24, tzinfo=datetime.timezone.utc), 'commenter': 'atb00ker', 'type': 'User'}, {'comment_id': 584273951, 'comment_body': ""Quick Q: shouldn't the details pages be read-only and we should have separate edit pages. \r\n\r\nCurrently, I went to `http://127.0.0.1:8000/api/v1/controller/device/<pk>/`\r\n\r\nand it gave me details and the form to edit the device! :smile:"", 'comment_created': datetime.datetime(2021, 2, 28, 10, 31, 47, tzinfo=datetime.timezone.utc), 'commenter': 'atb00ker', 'type': 'User'}, {'comment_id': 584282752, 'comment_body': 'Yes, @atb00ker I had a discussion about this with Federico, to have separate endpoints for GET/PATCH/PUT of the device detail and other endpoints but he suggested me to keep it in this way. :smile: ', 'comment_created': datetime.datetime(2021, 2, 28, 11, 42, 44, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}, {'comment_id': 584319548, 'comment_body': 'Sure, I will do it in this manner.', 'comment_created': datetime.datetime(2021, 2, 28, 16, 8, 56, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}, {'comment_id': 584329282, 'comment_body': 'Thanks for the info, I found the comment: https://github.com/openwisp/openwisp-controller/issues/379#issuecomment-785244645', 'comment_created': datetime.datetime(2021, 2, 28, 17, 29, 8, tzinfo=datetime.timezone.utc), 'commenter': 'atb00ker', 'type': 'User'}, {'comment_id': 585223322, 'comment_body': 'I highly recommend you guys to read this book: https://www.amazon.com/RESTful-Web-Services-Leonard-Richardson/dp/0596529260\r\nHaving separate endpoints for editing a resource does not follow the RESTful API design principles.\r\nA resource can be created (POST /), retrieved (GET `/<pk>`), updated (PUT `/<pk>`), destroyed (DELETE `/<pk>`).\r\nThis is the standard across pretty much all modern REST APIs.', 'comment_created': datetime.datetime(2021, 3, 2, 3, 35, 4, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 585862315, 'comment_body': ""Thanks for the recommendation, I'll check it out! :smile:"", 'comment_created': datetime.datetime(2021, 3, 2, 19, 50, 29, tzinfo=datetime.timezone.utc), 'commenter': 'atb00ker', 'type': 'User'}, {'comment_id': 595148392, 'comment_body': 'Here after removing the `templates`field,I am able to create a device, with its configuration, but we should not pop this field, because while creating a device user may want to assign any number of templates.', 'comment_created': datetime.datetime(2021, 3, 16, 13, 4, 40, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}, {'comment_id': 595149792, 'comment_body': ""I am able to add more templates, but not able to remove or change the order of the templates. I tried with `instance.cofig.templates.set()`, or `instance.cofig.templates.update()`, but doesn't work here."", 'comment_created': datetime.datetime(2021, 3, 16, 13, 6, 32, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}, {'comment_id': 595151172, 'comment_body': 'Here, I have added an extra endpoint which works fine for all operation we want from the configurations associated with any device we want to perform, but the problems arises when we try to perform operations on the nested models and serializers.', 'comment_created': datetime.datetime(2021, 3, 16, 13, 8, 13, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}, {'comment_id': 595428929, 'comment_body': '@atb00ker here is the `.create` method.', 'comment_created': datetime.datetime(2021, 3, 16, 18, 17, 43, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}, {'comment_id': 595429088, 'comment_body': '@atb00ker ', 'comment_created': datetime.datetime(2021, 3, 16, 18, 17, 54, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}, {'comment_id': 595441330, 'comment_body': ""Got it, I'll have to look into why do you need to pop the templates.\r\nIf I remember correctly, some UTs are saving device without poping template; I would start looking there.\r\n\r\nI'll look into it as well! (Probably weekend!) "", 'comment_created': datetime.datetime(2021, 3, 16, 18, 32, 55, tzinfo=datetime.timezone.utc), 'commenter': 'atb00ker', 'type': 'User'}, {'comment_id': 595452361, 'comment_body': ""@ManishShah120 you should removed all the templates before adding again.\r\n```suggestion\r\n    def update(self, instance, data):\r\n        config_templates = data['config']['templates']\r\n        instance = self.instance or self.Meta.model(**data)\r\n        instance.config.templates.clear()\r\n        for template in config_templates:\r\n            instance.config.templates.add(template.pk)\r\n        return instance\r\n```"", 'comment_created': datetime.datetime(2021, 3, 16, 18, 48, 40, tzinfo=datetime.timezone.utc), 'commenter': 'devkapilbansal', 'type': 'User'}, {'comment_id': 595457476, 'comment_body': ""Hmm, okay, I will try to help with the same.\r\nHere is what I would do:\r\n```\r\n  def update(self, instance, data):\r\n        config_templates = data['config']['templates']\r\n        import pdb\r\n        pdb.set_trace() \r\n```\r\n\r\nThen in the interactive shell, I try to narrow down the problem and see the data structure & object I am dealing with and how can I do to fix the problem.\r\n\r\nIf you have already done that, could you please specify the problem more narrowly?\r\nI'll have to look into this myself, I'll check it out and let you know when I find something interesting! :smile:\r\n\r\nP.S: `config.templates.remove(t1)` is working! :-)"", 'comment_created': datetime.datetime(2021, 3, 16, 18, 56, 9, tzinfo=datetime.timezone.utc), 'commenter': 'atb00ker', 'type': 'User'}, {'comment_id': 595473809, 'comment_body': 'Thak You @devkapilbansal This is working.', 'comment_created': datetime.datetime(2021, 3, 16, 19, 19, 10, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}, {'comment_id': 595476878, 'comment_body': 'Yes @atb00ker Now its working.', 'comment_created': datetime.datetime(2021, 3, 16, 19, 24, 2, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}, {'comment_id': 598106001, 'comment_body': 'I just checked it out, looks like this is fixed.\r\nPlease update here if done.', 'comment_created': datetime.datetime(2021, 3, 20, 12, 30, 44, tzinfo=datetime.timezone.utc), 'commenter': 'atb00ker', 'type': 'User'}, {'comment_id': 600586727, 'comment_body': ""> hey, @atb00ker I am facing one more issue:\r\n> i.e., after a successful PUT/PATCH request my response data remains the same, I am expecting the response data to change it to the updated data.\r\n\r\nThat's because you are not suppose to access self.data before saving your instance updates.\r\nThe data variable is populated on call and is send with response.\r\n\r\nIf you want to access it before saving changes, try \r\n`self.initial_data['config.config'] ` instead of `self.data['config']`."", 'comment_created': datetime.datetime(2021, 3, 24, 15, 22, 27, tzinfo=datetime.timezone.utc), 'commenter': 'atb00ker', 'type': 'User'}, {'comment_id': 600587486, 'comment_body': 'Can we change the variable name here to make it more descriptive to make it clear how `config_data_` is different from `config_data`?', 'comment_created': datetime.datetime(2021, 3, 24, 15, 23, 18, tzinfo=datetime.timezone.utc), 'commenter': 'atb00ker', 'type': 'User'}, {'comment_id': 600892832, 'comment_body': ""@atb00ker with this line I was trying to check if the config of the device instance is already present or not, and then creating the config instance if not present, but now I have worked out a different approach i.e., now I am checking if `backend` field is present or not in that device instance if not then config is not present and then I am creating the config if the request data contains it.\r\n\r\nWhen I tried with this `self.initial_data['config.config']` I was getting error with PATCH requests, because with this we are assuming that the device already contains the config instance."", 'comment_created': datetime.datetime(2021, 3, 24, 21, 40, 44, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}, {'comment_id': 600893473, 'comment_body': 'I have renamed it to `new_config_data`, this variable I am using when it is required to create a new config instance with a PUT/PATCH requests.', 'comment_created': datetime.datetime(2021, 3, 24, 21, 42, 7, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}, {'comment_id': 601491818, 'comment_body': ""> we are assuming that the device already contains the config instance.\r\n\r\nThe line was just an example to show that we use `.initial_data()` and not `.data()`\r\nBottom line is stay away from `.data()` unless you want to manipulate the data you are sending to the user.\r\nUse `.initial_data()` in it's place and adjust your code to accommodate cases of `.initial_data()`, that shouldn't be hard."", 'comment_created': datetime.datetime(2021, 3, 25, 13, 37, 28, tzinfo=datetime.timezone.utc), 'commenter': 'atb00ker', 'type': 'User'}, {'comment_id': 601708549, 'comment_body': '@atb00ker this is done.', 'comment_created': datetime.datetime(2021, 3, 25, 17, 40, 49, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}, {'comment_id': 601709694, 'comment_body': 'Yes, @atb00ker Can you please check now? :smiley: ', 'comment_created': datetime.datetime(2021, 3, 25, 17, 42, 26, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}, {'comment_id': 602653087, 'comment_body': 'can you flag the status field as readonly please?', 'comment_created': datetime.datetime(2021, 3, 27, 1, 55, 17, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 602653766, 'comment_body': ""reminder that we'll have to update these screenshots to point to master once we're ready to merge"", 'comment_created': datetime.datetime(2021, 3, 27, 2, 0, 45, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 602653952, 'comment_body': 'please write vpns as VPNs, applies to all the other non-code occurrences', 'comment_created': datetime.datetime(2021, 3, 27, 2, 3, 8, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 602653964, 'comment_body': 'I suggest listing the endpoints in alphabetical order:\r\n\r\n- devices\r\n- templates\r\n- vpns', 'comment_created': datetime.datetime(2021, 3, 27, 2, 3, 16, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 602654077, 'comment_body': ""let's add a line of text which clarifies that this endpoint triggers the download of the tar.gz containing the generated configuration, applies to the other equivalent endpoints as well."", 'comment_created': datetime.datetime(2021, 3, 27, 2, 4, 26, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 602654246, 'comment_body': 'have you wrote a test which tries to remove a required template? If yes can you point it out to me please?', 'comment_created': datetime.datetime(2021, 3, 27, 2, 5, 33, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 602654485, 'comment_body': 'are you sure this works also for a non-staff user? Please write a test for this.', 'comment_created': datetime.datetime(2021, 3, 27, 2, 7, 33, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 602654495, 'comment_body': 'same here', 'comment_created': datetime.datetime(2021, 3, 27, 2, 7, 37, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 602654918, 'comment_body': ""Only this test for this whole work? This is scary. Any change you introduce we can't be fairly sure that the core feature are working.\r\n\r\nThis is a red flag. You have to learn to write some tests while you write the main code, this helps you to make sure that the code you're writing works.\r\n\r\nMoreover, you have to make sure that the tests you write fail without pieces of code that are added afterwards. That's the only way to make sure that the tests you're writing are correct (because it's totally possible to write bogus tests)."", 'comment_created': datetime.datetime(2021, 3, 27, 2, 11, 30, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 602655000, 'comment_body': 'we have to briefly explain how to assign, unassign and/or reorder templates here ', 'comment_created': datetime.datetime(2021, 3, 27, 2, 12, 28, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 602655193, 'comment_body': 'this field must not be editable', 'comment_created': datetime.datetime(2021, 3, 27, 2, 15, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 602655290, 'comment_body': ""Please do not clear templates by default. Only do this if there is any type of change to the templates.\r\nEnsure you have current templates as a list of strings with UUIDs, and the list of templates coming from the HTTP request also as a list of strings with UUID, then only if they're different the templates should be cleared and added back."", 'comment_created': datetime.datetime(2021, 3, 27, 2, 15, 37, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 602655837, 'comment_body': 'this should be not only simpler but also more efficient:\r\n```python\r\ninstance.config.templates.add(*config_templates)\r\n```', 'comment_created': datetime.datetime(2021, 3, 27, 2, 20, 11, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 602655984, 'comment_body': 'please move the api directory under `config`, the django app where this logic belongs.', 'comment_created': datetime.datetime(2021, 3, 27, 2, 22, 11, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 602657223, 'comment_body': ""there's a problem here, if I try to open a VPN which has organization set to `None` (shared), I get an exception.\r\nPlease write a failing test first and then fix it."", 'comment_created': datetime.datetime(2021, 3, 27, 2, 35, 1, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 602657295, 'comment_body': ""there's a problem here, if I try to open a Template which has organization set to `None` (shared), I get an exception.\r\nPlease write a failing test first and then fix it."", 'comment_created': datetime.datetime(2021, 3, 27, 2, 35, 34, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 602657608, 'comment_body': ""please write the list of fields again so they're in the same order that they're listed in the admin, alternatively you may get the list of fields from `VpnAdmin.fields`"", 'comment_created': datetime.datetime(2021, 3, 27, 2, 38, 14, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 602702000, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 3, 27, 10, 35, 14, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}, {'comment_id': 602702021, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 3, 27, 10, 35, 22, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}, {'comment_id': 602702123, 'comment_body': ':smile: I am working on this.', 'comment_created': datetime.datetime(2021, 3, 27, 10, 36, 6, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}, {'comment_id': 602702153, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 3, 27, 10, 36, 32, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}, {'comment_id': 602704573, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 3, 27, 11, 0, 45, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}, {'comment_id': 602715156, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 3, 27, 12, 47, 56, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}, {'comment_id': 602715440, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 3, 27, 12, 50, 24, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}, {'comment_id': 602716005, 'comment_body': ""Sure, Once we are ready to merge, I'll Update it."", 'comment_created': datetime.datetime(2021, 3, 27, 12, 55, 55, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}, {'comment_id': 602720802, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 3, 27, 13, 42, 14, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}, {'comment_id': 602725047, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 3, 27, 14, 21, 13, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}, {'comment_id': 602782423, 'comment_body': 'Yes, I will add the tests soon, Also, I have added a Validation for this, i.e., an Exception will be raised with an error message when we try to remove required templates.', 'comment_created': datetime.datetime(2021, 3, 27, 19, 24, 55, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}, {'comment_id': 602787203, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 3, 27, 20, 13, 5, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}, {'comment_id': 602844330, 'comment_body': 'Yes, they this works fine, but it is required to be authenticated. Sure will write a test for this.', 'comment_created': datetime.datetime(2021, 3, 28, 7, 27, 57, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}, {'comment_id': 602844464, 'comment_body': 'Yes, It works for Non-Staff users as well.', 'comment_created': datetime.datetime(2021, 3, 28, 7, 28, 58, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}, {'comment_id': 602876046, 'comment_body': 'Solved.', 'comment_created': datetime.datetime(2021, 3, 28, 12, 54, 29, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}, {'comment_id': 602876057, 'comment_body': 'Solved.', 'comment_created': datetime.datetime(2021, 3, 28, 12, 54, 42, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}, {'comment_id': 603672612, 'comment_body': 'Added the tests. 😀', 'comment_created': datetime.datetime(2021, 3, 29, 23, 13, 44, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}, {'comment_id': 603880220, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 3, 30, 8, 16, 12, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}, {'comment_id': 606520687, 'comment_body': 'try to make sure lines are not longer than 70/80 characters as in the rest of the text please (applies to all other lines as well).', 'comment_created': datetime.datetime(2021, 4, 3, 0, 8, 41, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 606523559, 'comment_body': 'please create 3 subsections to explain how to add, remove or reorder templates and provide an example with `curl` or `http` in each subsection as we have in openwisp-users, see: [Obtain Authentication Token and Authenticating with the user token](https://github.com/openwisp/openwisp-users/#obtain-authentication-token).', 'comment_created': datetime.datetime(2021, 4, 3, 0, 13, 47, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 606560203, 'comment_body': 'these two fields have an identical `to_internal_value`, so please make a base class called `BaseJsonField` and inherit from it, eg:\r\n\r\n```python\r\nclass BaseJsonField(serializers.Field):\r\n    def to_internal_value(self, data):\r\n        if type(data) is str:\r\n            return ast.literal_eval(data)\r\n        else:\r\n            return data\r\n```', 'comment_created': datetime.datetime(2021, 4, 3, 1, 18, 47, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 606561176, 'comment_body': ""I have tried just `return json.dumps(value)` and it works, can you explain why we have to do `json.loads()`? Doing it unnecessarily just slows down the rendering.\r\n\r\nI also ran the tests with this modification without issues.\r\n\r\nHowever, while trying to edit the content via the API I did get an exception which is fixed by undoing the change, so can you please ensure there is a test for the specific case which needs `json.loads()`?\r\n\r\nAdding a brief comment here explaining why we're doing these two operations would be good."", 'comment_created': datetime.datetime(2021, 4, 3, 1, 20, 32, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 606564829, 'comment_body': ""Let's simplify:\r\n\r\n\r\n```suggestion\r\n        help_text='Configuration in NetJSON format'\r\n```"", 'comment_created': datetime.datetime(2021, 4, 3, 1, 26, 55, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 606565199, 'comment_body': ""\r\n```suggestion\r\n        help_text='Configuration variables in JSON format'\r\n```"", 'comment_created': datetime.datetime(2021, 4, 3, 1, 27, 25, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 606568267, 'comment_body': ""Please wrap all these DB operations in a transaction, eg:\r\n\r\n```python\r\nwith transaction.atomic():\r\n    # ...\r\n```\r\n\r\nIf anything fails for an exceptional reason everything will be rolled back and we won't end up with dead data in the DB."", 'comment_created': datetime.datetime(2021, 4, 3, 1, 31, 46, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 606568460, 'comment_body': 'same here regarding the transaction.', 'comment_created': datetime.datetime(2021, 4, 3, 1, 32, 1, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 606571314, 'comment_body': ""I don't understand this case here, is this how you're checking whether the device already has a config or not?\r\n\r\nThere's a method for that: `instance._has_config()`."", 'comment_created': datetime.datetime(2021, 4, 3, 1, 36, 14, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 606571582, 'comment_body': 'wrap these two in a transaction please', 'comment_created': datetime.datetime(2021, 4, 3, 1, 36, 42, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 606571970, 'comment_body': 'just write return `value` once at the end of the method.', 'comment_created': datetime.datetime(2021, 4, 3, 1, 37, 16, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 606572378, 'comment_body': ""Keep in mind every string which will be presented to the user has to be flagged as translatable:\r\n\r\n```\r\n{'templates': _('Required templates cannot be Unassigned.')}\r\n```"", 'comment_created': datetime.datetime(2021, 4, 3, 1, 37, 52, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 606573472, 'comment_body': ""this should not be required since it's the default right?"", 'comment_created': datetime.datetime(2021, 4, 3, 1, 39, 41, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 606575749, 'comment_body': 'doing this should not be required, find a way to add these URLs here:\r\nhttps://github.com/openwisp/openwisp-controller/blob/master/openwisp_controller/urls.py.\r\n\r\nUse `controller_config` as namespace.', 'comment_created': datetime.datetime(2021, 4, 3, 1, 43, 53, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 606576513, 'comment_body': ""please  prepend 'api_` to the `name` for consistency with naming of the API views of other modules, applies to all other `path()` calls."", 'comment_created': datetime.datetime(2021, 4, 3, 1, 45, 15, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 606606982, 'comment_body': 'why `FilterSerializerByOrgOwned`? I think it should be `FilterSerializerByOrgManaged`, since we want any user who is staff user and member of the org and with the right django permission to view/edit/create/delete objects of their own org.\r\n\r\nApplies to all other occurrences.', 'comment_created': datetime.datetime(2021, 4, 3, 2, 54, 32, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 606607369, 'comment_body': 'Use `FilterSerializerByOrgManaged`.\r\n\r\nMay be good to create a base serializer from which all serializers inherit, eg:\r\n\r\n```python\r\nclass BaseSerializer(FilterSerializerByOrgManaged, ValidatedModelSerializer):\r\n    pass\r\n```', 'comment_created': datetime.datetime(2021, 4, 3, 2, 58, 14, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 606607460, 'comment_body': ""why aren't you using `FilterSerializerByOrgManaged`? I believe this is what is causing the multitenancy security issue.\r\n\r\nAlso, why aren't you inheriting the `ValidatedModelSerializer`?"", 'comment_created': datetime.datetime(2021, 4, 3, 2, 59, 17, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 606607495, 'comment_body': '`FilterSerializerByOrgManaged`', 'comment_created': datetime.datetime(2021, 4, 3, 2, 59, 38, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 606664394, 'comment_body': '> I have tried just return json.dumps(value) and it works, can you explain why we have to do json.loads()? Doing it unnecessarily just slows down the rendering.\r\n\r\nYes, you will get the data but the representation of it will be both different in the JSON response, and the data present in the HTML form field. When we simply use `json.dumps(value)`, the data is not represented in the JSON format instead a single string of all the nested JSON response will be returned. so to preserve the representation to be same in both of them, I implemented in this manner. PS: Try adding `general`, `interfaces`, (more than one) to see the difference.', 'comment_created': datetime.datetime(2021, 4, 3, 13, 21, 20, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}, {'comment_id': 606825235, 'comment_body': 'Removed it.', 'comment_created': datetime.datetime(2021, 4, 4, 16, 38, 59, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}, {'comment_id': 607018809, 'comment_body': ""We can't use `ValidatedModelSerializer` here, because since this validation is designed to validate a single level Model serializer but this is a Nested serializer, here when I am using it after the validation is done it returns only the data of the parent serializer opting out the data of nestedserializer, resulting in an exception error."", 'comment_created': datetime.datetime(2021, 4, 5, 10, 13, 14, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}, {'comment_id': 607428879, 'comment_body': 'why are you sending ""status"" in the request?\r\n\r\nSince it\'s a patch request, shouldn\'t it be possible to pass something like the following?\r\n\r\n``` \r\n{""config"":{""templates"": [""4791fa4c-2cef-4f42-8bb4-c86018d71bd3""]}}\r\n```', 'comment_created': datetime.datetime(2021, 4, 6, 1, 35, 6, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 607428925, 'comment_body': 'same here', 'comment_created': datetime.datetime(2021, 4, 6, 1, 35, 13, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 607429098, 'comment_body': ""let's avoid including the response for brevity, applies to the other responses as well"", 'comment_created': datetime.datetime(2021, 4, 6, 1, 35, 48, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 607429839, 'comment_body': 'this is super weird, why are you doing this?', 'comment_created': datetime.datetime(2021, 4, 6, 1, 38, 14, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 607430040, 'comment_body': 'convert this into a docstring of the method', 'comment_created': datetime.datetime(2021, 4, 6, 1, 38, 53, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 607430326, 'comment_body': 'add this only if `OPENWISP_CONTROLLER_API` is `True`', 'comment_created': datetime.datetime(2021, 4, 6, 1, 39, 52, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 607437551, 'comment_body': ""you must find a way to call the full_clean() method of the models of this serializer because there's a lot of model validation done in `Device` and `Config`.\r\n\r\nFor example, if you try to create a device with name `T E S T`, the API will let you create it, but the admin doesn't, because it's not a valid hostname. Please add a basic test for this."", 'comment_created': datetime.datetime(2021, 4, 6, 2, 5, 20, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 607462517, 'comment_body': 'This is added to handle the EOF error, try removing this and just send a POST request with an empty form.', 'comment_created': datetime.datetime(2021, 4, 6, 3, 13, 26, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}, {'comment_id': 608413013, 'comment_body': 'Added a test for this. All the validation are preserved.', 'comment_created': datetime.datetime(2021, 4, 7, 7, 38, 37, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}, {'comment_id': 608414541, 'comment_body': 'Yes Done.', 'comment_created': datetime.datetime(2021, 4, 7, 7, 40, 52, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}, {'comment_id': 608436344, 'comment_body': '> Ok you can leave this thing of the JSON fields as last thing, please can you point out which is the exact piece of code which influences this behavior?\r\n\r\n@nemesisdesign \r\nUsually in other cases where the default field is JSON is handled with `config = serializers.JSONField()`(Please have a look at other serializers), But in these case things were not working as expected so had to overwrite the `to_representation` and `to_internal_value`. You can experiment with this pieces of code.', 'comment_created': datetime.datetime(2021, 4, 7, 8, 12, 47, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}, {'comment_id': 608437270, 'comment_body': 'Test to assure that valid name is provided when creating a device', 'comment_created': datetime.datetime(2021, 4, 7, 8, 14, 7, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}, {'comment_id': 609237177, 'comment_body': ""can you please check if using select_related here reduces the number of queries + ensure there's a test for this?"", 'comment_created': datetime.datetime(2021, 4, 8, 3, 2, 29, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 609239389, 'comment_body': ""@ManishShah120 did you see one of my previous reviews I mentioned the following?\r\n\r\n> It may be important to show also config.status and config.backend in the list, since these two pieces of information are quite important. Can you add a limited config serializer in the list serializer too @ManishShah120? (Keep in mind to use select_related('config') to keep the number of generated queries under control).\r\n\r\nDid you see this?"", 'comment_created': datetime.datetime(2021, 4, 8, 3, 6, 20, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 609239723, 'comment_body': ""we may need to add `.select_related('config')` here too"", 'comment_created': datetime.datetime(2021, 4, 8, 3, 6, 58, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 609880945, 'comment_body': ""@ManishShah120 did you see one of my previous reviews I mentioned the following?\r\n\r\n> It may be important to show also config.status and config.backend in the list, since these two pieces of information are quite important. Can you add a limited config serializer in the list serializer too @ManishShah120? (Keep in mind to use select_related('config') to keep the number of generated queries under control).\r\n\r\nDid you see this?\r\n\r\nYes, this has been implemented, I was able to achieve this without introducing a new serializer, I introduced two new method fields and got its value by checking if an device has config with `._has_config()` and returned their status, and backend value.\r\n```\r\nstatus = serializers.SerializerMethodField()\r\nbackend = serializers.SerializerMethodField()\r\n```"", 'comment_created': datetime.datetime(2021, 4, 8, 16, 27, 49, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}, {'comment_id': 610417013, 'comment_body': 'Yes it has been implemented.', 'comment_created': datetime.datetime(2021, 4, 9, 7, 43, 52, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}, {'comment_id': 610645133, 'comment_body': ""Test has been added, using `select_related` doesn't reduce the number of queries in this case."", 'comment_created': datetime.datetime(2021, 4, 9, 13, 54, 2, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}, {'comment_id': 613711261, 'comment_body': 'use single quotes please', 'comment_created': datetime.datetime(2021, 4, 15, 2, 18, 8, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 613712120, 'comment_body': ""Shared templates can only be created by superusers.\r\n\r\nFlag this string as translatable! I am repeating this over and over with everyone, please remember! Double check any string which is returned by the API or shown in the browsable API and ensure it's flagged as translatable.\r\n\r\nPlease help me to avoid wasting my time pointing out to same trivial mistakes like this all the time so we can use this time to help you improve more important areas of your work."", 'comment_created': datetime.datetime(2021, 4, 15, 2, 20, 50, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 613714683, 'comment_body': 'This solution looks good to me, however, would be even better if we avoided showing the empty org option altogether, if that\'s doable and it\'s enforced, that is even better (simpelr and better UX). Is that doable? We do this for the admin, I suggest check the code in openwisp-users to see how we do it: https://github.com/openwisp/openwisp-users/blob/aea15b42085967d16dfb82dd19c1bc8d261209b2/openwisp_users/multitenancy.py#L70-L78\r\n\r\nI am sure we need it also for VPNs. I created a staff non super user with the ""administrator"" role and I see that they can create a VPN server in the admin and the option to select ""shared systemwide"" is not present.\r\nI suggest proceeding with creating a reusable solution, first implement it here in this PR, then we\'ll port it to openwisp-users and update this PR.', 'comment_created': datetime.datetime(2021, 4, 15, 2, 29, 19, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 613875739, 'comment_body': ""Sure, I'll take care of this from next time."", 'comment_created': datetime.datetime(2021, 4, 15, 8, 45, 58, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}, {'comment_id': 615297101, 'comment_body': '> however, would be even better if we avoided showing the empty org option altogether,\r\nIs that doable?\r\n\r\nYes It is doable, by just altering the queryset in the `FilterSerializerByOrganization` class, we can exclude the empty field from the option for non-super users, but after implementing it there, we will not be required to add this field level validation, as it will not get triggered, and the model validation will handle this portion.\r\n\r\nhere https://github.com/openwisp/openwisp-users/blob/aea15b42085967d16dfb82dd19c1bc8d261209b2/openwisp_users/api/mixins.py#L131-L134 by adding `self.fields[field].allow_null = False` this we can achieve what we want.\r\n\r\n@nemesisdesign Should I make the required changes here https://github.com/openwisp/openwisp-users/issues/235 and then update this PR?', 'comment_created': datetime.datetime(2021, 4, 17, 19, 47, 40, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}, {'comment_id': 615902652, 'comment_body': 'sounds good!', 'comment_created': datetime.datetime(2021, 4, 19, 14, 33, 37, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 619318443, 'comment_body': 'I think we can convert these two to `path` and get rid of `from django.conf.urls import url`! :smile:', 'comment_created': datetime.datetime(2021, 4, 23, 15, 39, 41, tzinfo=datetime.timezone.utc), 'commenter': 'atb00ker', 'type': 'User'}, {'comment_id': 619384654, 'comment_body': ""Can `fields = '__all__'` help?\r\nOr if you want to remove any field, would [`exclude`](https://www.django-rest-framework.org/api-guide/serializers/#specifying-which-fields-to-include) help to have shorter list?\r\n"", 'comment_created': datetime.datetime(2021, 4, 23, 17, 25, 17, tzinfo=datetime.timezone.utc), 'commenter': 'atb00ker', 'type': 'User'}, {'comment_id': 619384822, 'comment_body': 'Same as above.', 'comment_created': datetime.datetime(2021, 4, 23, 17, 25, 37, tzinfo=datetime.timezone.utc), 'commenter': 'atb00ker', 'type': 'User'}, {'comment_id': 619392534, 'comment_body': 'Why do we need to evaluate here?\r\n\r\nWill something like this work:\r\n```\r\nclass BaseJsonField(serializers.Field):\r\n    def to_internal_value(self, data):\r\n        try:\r\n            json.loads(data)\r\n        except ValueError:\r\n            return {}\r\n        return data\r\n```', 'comment_created': datetime.datetime(2021, 4, 23, 17, 39, tzinfo=datetime.timezone.utc), 'commenter': 'atb00ker', 'type': 'User'}, {'comment_id': 619393615, 'comment_body': 'I assume this is used to check if the value is valid JSON, is it?', 'comment_created': datetime.datetime(2021, 4, 23, 17, 40, 57, tzinfo=datetime.timezone.utc), 'commenter': 'atb00ker', 'type': 'User'}, {'comment_id': 619395039, 'comment_body': 'Correct me if I am wrong, but this would only give templates for one organization, which might not be desirable if user is in multiple organizations,\r\nWhat do you think about something like:\r\n```\r\nuserOrgList = user.organizations_dict.keys()\r\nquery = Q(organization=None)\r\nfor org in userOrgList:\r\n    query |= Q(organization=org)\r\n\r\nTemplate.objects.filter(query)\r\n```', 'comment_created': datetime.datetime(2021, 4, 23, 17, 43, 42, tzinfo=datetime.timezone.utc), 'commenter': 'atb00ker', 'type': 'User'}, {'comment_id': 619395429, 'comment_body': 'Same as above.', 'comment_created': datetime.datetime(2021, 4, 23, 17, 44, 21, tzinfo=datetime.timezone.utc), 'commenter': 'atb00ker', 'type': 'User'}, {'comment_id': 619469099, 'comment_body': 'Yes sure.', 'comment_created': datetime.datetime(2021, 4, 23, 20, 6, 59, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}, {'comment_id': 619470128, 'comment_body': ""Yes, but when we use `fields='__all__'`, then the order is not preserved according to the order of admin panel, So Federico asked me to maintain the order as that of the admin panel."", 'comment_created': datetime.datetime(2021, 4, 23, 20, 9, 16, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}, {'comment_id': 619470582, 'comment_body': 'To maintain the order of the fields.', 'comment_created': datetime.datetime(2021, 4, 23, 20, 10, 11, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}, {'comment_id': 619472072, 'comment_body': 'Ahh, Yes this should work too, But once I resolve this https://github.com/openwisp/openwisp-utils/issues/164, I guess there will be no need to dynamically convert and manage these fields, I had to do all these because of the representation issue of JSON Field.', 'comment_created': datetime.datetime(2021, 4, 23, 20, 13, 35, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}, {'comment_id': 619473961, 'comment_body': 'No, These is used to convert primitive datatype to serialisable datatype. I tried creating a custom serializer field for representing the JSON type for `config` and `context` field, but this portion of code will also be removed once we upgrade DRF to 3.12.', 'comment_created': datetime.datetime(2021, 4, 23, 20, 17, 39, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}, {'comment_id': 619474799, 'comment_body': 'Yes, you are right. I will try to implement this way.', 'comment_created': datetime.datetime(2021, 4, 23, 20, 19, 27, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}, {'comment_id': 619475027, 'comment_body': 'to maintain the order', 'comment_created': datetime.datetime(2021, 4, 23, 20, 19, 54, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}, {'comment_id': 619894890, 'comment_body': 'we should be able to upgrade to DRF 3.12 now, I merged your other PR. Let us know.', 'comment_created': datetime.datetime(2021, 4, 25, 23, 14, 35, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 619895605, 'comment_body': 'you should be able to update this now', 'comment_created': datetime.datetime(2021, 4, 25, 23, 19, 50, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 619895872, 'comment_body': 'A device can get templates of the same organization or shared templates (with organization=None), templates from multiple organizations cannot be assigned.\r\n\r\nWe need to be able to ensure a user can assign normal templates from the same org and shared templates, please create a test for this @ManishShah120 because we need to ensure this kind of basic functionality will keep working over subsequent changes of the API.', 'comment_created': datetime.datetime(2021, 4, 25, 23, 21, 39, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 620318123, 'comment_body': ""> But, I think a device will belong to only one organization, and nemesisdesign suggested that template of multiple organization can't be allowed to be added to a device. So multiple organization template assigning to a single device will not be allowed.\r\n> It's a bit confusing. 🤔 \r\n> -@ManishShah120 on Gitter\r\n\r\nOkay, I misunderstood the function's purpose.\r\nCan we please change it's name to suggest it filter's name by organization for a device?\r\n\r\nNow, if the data is filtered for the device, why are we looking at `user.organization_dict`?\r\nUser can be in multiple orgs while device can only be in one org.\r\nIf we use `user.organization_dict`, how do we know we will get the correct organization of the device?\r\nWhat do you think about using the organization of the device / config?\r\n\r\n"", 'comment_created': datetime.datetime(2021, 4, 26, 13, 52, 58, tzinfo=datetime.timezone.utc), 'commenter': 'atb00ker', 'type': 'User'}, {'comment_id': 620372258, 'comment_body': ""> Now, if the data is filtered for the device, why are we looking at `user.organization_dict`?\r\n\r\n@atb00ker Since this filter is used to filter out the templates belonging to user's organization(s), so suppose a user wants to create a device, then with the help of this function, all the templates belogning to user's org's will be shown, i.e., even if the device is not created the templates in the `config` section needs to be filtered by the users organization(s), so that a user can't use any templates from another organization when creating a device.\r\n\r\n> If we use user.organization_dict, how do we know we will get the correct organization of the device?\r\n\r\nYes, so if incase a user belongs to multiple orgs, then he will be allowed to create devices in any one of the orgs he is a part of, and then he/ she should select those organization templates which belongs to the one selected in the device organization field."", 'comment_created': datetime.datetime(2021, 4, 26, 14, 50, 49, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}, {'comment_id': 620391750, 'comment_body': ""Okay, let's see this part in Admin UI:\r\nWhen we create a device, it loads templates *after* we select an organization for device.\r\nWe need to do something similar although, I am not sure if it's possible in RDF to dynamically update the multiselect options based on another dropdown, can you please check this? If you don't think anything, please let me know, I'll try to help with the R&D.\r\n\r\nThe problem with the solution I proposed is that we would should all the templates to the user and add checks in the backend to not allow some of those to be applicable, which is not ideal, we should not even show the templates that are not applicable.\r\n\r\nThe problem with `next(iter(user.organizations_dict))` is that it returns only one organization. What if it gets templates for org1 and user selected org2 for the device, again, that's a problem.\r\n\r\nSo, if we want to select organization for device's organization, I don't think we will find our answer in `user.organization_dict`."", 'comment_created': datetime.datetime(2021, 4, 26, 15, 12, 1, tzinfo=datetime.timezone.utc), 'commenter': 'atb00ker', 'type': 'User'}, {'comment_id': 621241305, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 4, 27, 14, 3, 51, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}, {'comment_id': 622556194, 'comment_body': ""Yes, It'd done. :+1: "", 'comment_created': datetime.datetime(2021, 4, 28, 21, 10, 39, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}, {'comment_id': 623505321, 'comment_body': 'flag the `help_text` string as translatable', 'comment_created': datetime.datetime(2021, 4, 30, 0, 15, 13, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 623505331, 'comment_body': 'flag the `help_text` string as translatable', 'comment_created': datetime.datetime(2021, 4, 30, 0, 15, 16, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 623511636, 'comment_body': ""You may not know but this is redundant (and hopefully now you'll know).\r\n\r\nDefault and required templates get assigned by default when a new config is created, try the following code in the django shell (`shell_plus` with ipython or bpython), after ensuring in your dev env there's at least one required template and one default template:\r\n\r\n```python\r\ndev = Device(\r\n  name='prova-required',\r\n  mac_address='00:11:22:33:44:63',\r\n  organization=Organization.objects.first()\r\n)\r\ndev.full_clean()\r\ndev.save()\r\ndev.config=Config(backend='netjsonconfig.OpenWrt')\r\ndev.config.full_clean()\r\ndev.save()\r\n```\r\n\r\nAfter trying this you should see that the new config object has the required template assigned.\r\n\r\nThe difference between default and required then is that if the required template is removed in anyway, the backend code adds it back.\r\n\r\nTherefore this logic and any other logic that adds required templates is redundant and can be removed. Let's simplify!"", 'comment_created': datetime.datetime(2021, 4, 30, 0, 35, 10, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 623514486, 'comment_body': ""what about:\r\n\r\n```python\r\ndef create(self, validated_data):\r\n    config_data = None\r\n    if validated_data.get('config'):\r\n        config_data = validated_data.pop('config')\r\n        config_templates = [\r\n            template.pk for template in config_data.pop('templates')\r\n        ]\r\n\r\n    with transaction.atomic():\r\n        device = Device.objects.create(**validated_data)\r\n        if config_data:\r\n            config = Config.objects.create(device=device, **config_data)\r\n            config.templates.add(*config_templates)\r\n    return device\r\n```\r\n\r\nisn't it simpler and achieves the same result?"", 'comment_created': datetime.datetime(2021, 4, 30, 0, 45, 31, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 623515626, 'comment_body': ""you know what, I'm not sure of adding all these lines of code is worth it.\r\n\r\nI am coming to the conclusion that we could simply remove all this complexity and keep the behavior like the admin: required templates are just added back by the model code, we don't need to do anything apart documenting it in the API view docstring and in the README.\r\n\r\nWhat do you think? Let's simplify."", 'comment_created': datetime.datetime(2021, 4, 30, 0, 49, 22, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 623515988, 'comment_body': 'whenever you add docstrings, add them like:\r\n\r\n```python\r\n""""""\r\nText here.\r\n""""""\r\n```\r\n\r\nDouble quotes, no additional indentation, final dot.', 'comment_created': datetime.datetime(2021, 4, 30, 0, 50, 52, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 624691933, 'comment_body': 'Okay, I removed the validation. Now even if the user removes the required template, it gets added back.', 'comment_created': datetime.datetime(2021, 5, 2, 13, 5, 3, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}, {'comment_id': 624781710, 'comment_body': 'yes @atb00ker it is better to go with your suggestion, I understood your point.', 'comment_created': datetime.datetime(2021, 5, 2, 21, 57, 43, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}, {'comment_id': 625093749, 'comment_body': ""I can't find the previous thread on this code, but bottom line there was that there is a problem with this code as well,\r\nConsider if user is in 2 organizations (org1 & org2) and they are creating device in org2.\r\nWe want to show them templates from org2 & `organization=None` filter.\r\nMakes sense?\r\n\r\nThis is also wrong according to that conversation because this will filter for both org1 and org2, while the code before this would have filtered for org1. \r\nSee the problem? "", 'comment_created': datetime.datetime(2021, 5, 3, 13, 41, 46, tzinfo=datetime.timezone.utc), 'commenter': 'atb00ker', 'type': 'User'}, {'comment_id': 625354819, 'comment_body': 'Yes, I understand but I am not sure if this can be done with DRF. :thinking: , but still this approach is better then the previous one, and this will not cause any error, because if a user selects org2 as organization of the device, and then selects any templates belonging to org1, then a validation error is raised not allowing the user to create the instance. \r\n\r\nAlso, If there is anyway we can achieve it? I would love to get any suggestion/material/reference for achieving this. :smile: ', 'comment_created': datetime.datetime(2021, 5, 3, 20, 42, 6, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}, {'comment_id': 625472606, 'comment_body': ""hey guys, I really do not follow you and I don't understand why this is being done, is it being done for read operations or write operations?\r\n\r\nFor read, all the templates assigned to a device must be shown to any user.\r\nFor write, we should allow only templates that are either shared or belong to one of the organizations the user manages (not all organizations like you're doing here Manish).\r\nI think we should do a change like the one I propose here: https://github.com/openwisp/openwisp-users/issues/247#issuecomment-831644780 and use that.\r\n\r\n@ManishShah120 if you want to test such a solution in this module you can do so, but I avoid to rewrite the whole serializer like you're doing here because that's duplication. I would inherit `FilterByOrganizationManaged` and override the `get_organization_queryset` method."", 'comment_created': datetime.datetime(2021, 5, 4, 2, 13, 19, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 625473263, 'comment_body': 'PS: watch out from camel case names like `userOrgList`, pelase keep the naming convention consistent. ', 'comment_created': datetime.datetime(2021, 5, 4, 2, 16, 4, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 625900362, 'comment_body': ""@nemesisdesign  \r\nhttps://github.com/openwisp/openwisp-users/issues/247#issuecomment-831644780\r\nWill return the list of all the orgs that user manages, how do we filter which one we want to use? For that, I proposed, let's just the organization selected for the device and we rely on device's organization not user's organization for filtering the templates on device creation page."", 'comment_created': datetime.datetime(2021, 5, 4, 15, 51, 26, tzinfo=datetime.timezone.utc), 'commenter': 'atb00ker', 'type': 'User'}, {'comment_id': 625954699, 'comment_body': '@atb00ker Suppose you want to create a device, with the API and you belong to `org1` & `org2`, then since the device has not been created, how would the `templates` be filtered?. So here you suggested something like when a user selects the organization of a device after that the templates belonging to that org should be populated right, but this is not possible with DRF.\r\n\r\nSo, What I am doing here is:-\r\nI am filtering the templates based on the organization of the user, from that the user can select the organization he want to create a device from and then select the corresponding templates belonging to the organization of the device, and if the user selects templates not belonging to the org of the device, then a validation error is raised.', 'comment_created': datetime.datetime(2021, 5, 4, 17, 5, 6, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}, {'comment_id': 625955517, 'comment_body': ""> hey guys, I really do not follow you and I don't understand why this is being done, is it being done for read operations or write operations?\r\n\r\nThis function filters out the templates based on the organization of the user. I tried inheriting `FilterSerializerByOrgManaged`, and applying the approach you suggested but, here all this has been done in the nested serialzer fields, and the mixin is designed only for flat serilaizer classes."", 'comment_created': datetime.datetime(2021, 5, 4, 17, 6, 16, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}, {'comment_id': 626029835, 'comment_body': ""@ManishShah120 ok let's find a solution that can work also in nested serializers then, is that an issue?\r\n@atb00ker I would keep it simple and avoid further filtering, we have done that in the django admin and is not trivial, it requires a lot of work to be done correctly, this is more a frontend thing, we expect software which will consume this API to do that work of filtering out the right values to show to users, don't you think?"", 'comment_created': datetime.datetime(2021, 5, 4, 18, 59, 14, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 626770025, 'comment_body': ""@nemesisdesign  \r\nhttps://github.com/openwisp/openwisp-users/issues/247#issuecomment-831644780\r\nWill return the list of all the orgs that user manages, how do we filter which one we want to use? For that, I proposed, let's just the organization selected for the device and we rely on device's organization not user's organization for filtering the templates on device creation page."", 'comment_created': datetime.datetime(2021, 5, 5, 17, 39, 49, tzinfo=datetime.timezone.utc), 'commenter': 'atb00ker', 'type': 'User'}, {'comment_id': 627616433, 'comment_body': ""@ManishShah120 Had a conversation with Fed, \r\nwe will be going for: \r\n```\r\nwe show all templates from\r\n- org=None\r\n- any org were user is manager\r\n ```\r\n \r\n Because the case I mentioned is a corner case and the problem wouldn't be seen in normal usage as extended apps can take care of that.. if we need it, we will come to it in future! :smile:"", 'comment_created': datetime.datetime(2021, 5, 6, 17, 11, 7, tzinfo=datetime.timezone.utc), 'commenter': 'atb00ker', 'type': 'User'}, {'comment_id': 627877600, 'comment_body': ""@ManishShah120 when you fix issues, try to always write basic tests, make it a habit, it's a good one"", 'comment_created': datetime.datetime(2021, 5, 7, 2, 15, 10, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 628623565, 'comment_body': ""it's always a good idea to assert for the status code as well, eg: `self.assertEqual(r.status_code, 400)`"", 'comment_created': datetime.datetime(2021, 5, 8, 0, 0, 17, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 628624160, 'comment_body': 'if the vpn is shared, usually the template is shared as well', 'comment_created': datetime.datetime(2021, 5, 8, 0, 1, 46, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 628626888, 'comment_body': ""I don't see a test which ensures shared templates can be assigned to a device, was that already added before? If not, can you please add it?"", 'comment_created': datetime.datetime(2021, 5, 8, 0, 8, 28, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 628635809, 'comment_body': ""why is this function being added here? I think it should go in `openwisp_controller.config.api.urls`.\r\n\r\nBTW the reasons we use functions is to allow to extende the API views and URLs but I don't see anything done on that front but I think we should."", 'comment_created': datetime.datetime(2021, 5, 8, 0, 29, 25, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 628720864, 'comment_body': ""Yes, but aren't we testing this for the operator and operator can't create shared templates, other than that admin gets all the the vpn by default, so how are we gonna test for the shared objects. :thinking: "", 'comment_created': datetime.datetime(2021, 5, 8, 8, 24, 41, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}, {'comment_id': 628722722, 'comment_body': 'Yes, It is contained in this:- https://github.com/ManishShah120/openwisp-controller/blob/4eacd3cca7e06e8a9f84153ef966bb0601d765c1/openwisp_controller/config/tests/test_api.py#L203-L215', 'comment_created': datetime.datetime(2021, 5, 8, 8, 44, 15, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}, {'comment_id': 628726989, 'comment_body': 'Okay, will move it to `openwisp_controller.config.api.urls`', 'comment_created': datetime.datetime(2021, 5, 8, 9, 26, 10, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}, {'comment_id': 628764563, 'comment_body': ""| SN | /api/v1/controller/template/                               | Status |\r\n|----|------------------------------------------------------------|--------|\r\n| 1  | [SU] Can view all templates                                | Pass   |\r\n| 2  | [O1A] can view only org1 templates (not even shared org)   | Pass   |\r\n| 3  | [O1O] can view no templates                                | Pass   |\r\n| 4  | [SU] VPN-Client hidden for Generic Template                | NTD   |\r\n| 5  | [SU][O1A] Field validation error on field                  | Fail   |\r\n| 6  | [SU][O1A] Allows creating template without config          | Fail   |\r\n| 7  | [SU][O1A][O1O] Allows creating template with config        | Pass   |\r\n| 8  | [SU][O1A][O1O] Allow creating VPN template                 | Pass   |\r\n| 9  | [SU][O1A][O1O] Allow creating VPN template without openvpn | NTD   |\r\n| 10  | [O1O] Access denied to org1 operator user              | NTD    |\r\n| 11  | [SU] Unique template name ensured              | Pass    |\r\n| 12  | [O1A] Trying to create template for another org gives object not found  error | Pass    |\r\n\r\n**SN. 4:**\r\n![case4fail](https://user-images.githubusercontent.com/24985760/117544793-9ccce000-b040-11eb-97c5-7ceaefa516da.png)\r\n@nemesisdesign I think this is an acceptable deviation, can you please confirm.\r\n\r\n**SN. 5:**\r\n![case5-1](https://user-images.githubusercontent.com/24985760/117544800-9f2f3a00-b040-11eb-9a98-4144c16494f4.png)\r\n@ManishShah120 Can we show the error on config instead of `__all__`? it would be useful for people making apps using the API.\r\n\r\n**SN. 9**\r\n![case9](https://user-images.githubusercontent.com/24985760/117544802-a0606700-b040-11eb-9da2-a7b0ef22d623.png)\r\n@nemesisdesign is this okay?\r\n\r\n**SN. 10**\r\n@nemesisdesign Shouldn't we deny access to the page if creating and viewing is not allowed? Same for admin UI. Why is access even allowed?\r\n"", 'comment_created': datetime.datetime(2021, 5, 8, 15, 38, 46, tzinfo=datetime.timezone.utc), 'commenter': 'atb00ker', 'type': 'User'}, {'comment_id': 628777921, 'comment_body': '|   | controller/template/<str:pk>/                            | Status |\r\n|---|----------------------------------------------------------|--------|\r\n| 1 | [SU] Can view any templates                              | Pass   |\r\n| 2 | [O1A] Can view only org1 templates (not even shared org) | Pass   |\r\n| 3 | [O1O] Can view no templates                              | Pass   |\r\n| 4 | [SU][O1A] Correct data of the template shown             | Pass   |\r\n| 5  | [SU][O1A][O1O] Can only delete templates if they have correct privilege              | Pass    |\r\n', 'comment_created': datetime.datetime(2021, 5, 8, 17, 53, 38, tzinfo=datetime.timezone.utc), 'commenter': 'atb00ker', 'type': 'User'}, {'comment_id': 628779147, 'comment_body': '|   | controller/template/<str:pk>/configuration                | Status | \r\n|---|-----------------------------------------------------------|--------|\r\n| 1 | [SU][O1A][O1O]  Can download any configuration                       | Pass   \r\n| 2 | [SU][O1A] Correct template config downloaded              | Pass ', 'comment_created': datetime.datetime(2021, 5, 8, 18, 6, 27, tzinfo=datetime.timezone.utc), 'commenter': 'atb00ker', 'type': 'User'}, {'comment_id': 628785951, 'comment_body': '|    | controller/vpn/                                                                  | Status | Fail Reason                                                                                                                                                   |\r\n|----|----------------------------------------------------------------------------------|--------|---------------------------------------------------------------------------------------------------------------------------------------------------------------|\r\n| 1  | [SU] Can view any VPN                                                            | Pass   |                                                                                                                                                               |\r\n| 2  | [O1A] Can view only org1 VPN (not even shared org)                               | Pass   |                                                                                                                                                               |\r\n| 3  | [O1O] Cannot view any VPN                                                        | Pass   |                                                                                                                                                               |\r\n| 4  | [SU][O1A] Field validation error on field                                        | Fail   | { ""config"" : [""This field cannot be blank.""], ""__all__"" :[""Invalid configuration triggered by \\""#/\\"", validator says:\\n\\n\'openvpn\' is a required property""] } |\r\n| 5  | [SU] Only valid config schema accepted                                           | Pass   |                                                                                                                                                               |\r\n| 6  | [SU][O1A] Can create VPN                                                         | Pass   |                                                                                                                                                               |\r\n| 7  | [SU][O1A] Cannot create VPN                                                      | Pass   |                                                                                                                                                               |\r\n| 8  | [SU][O1A] Unique name per org check                                              | Pass   |                                                                                                                                                               |\r\n| 9  | [SU][O1A] Appropriate CA/Certs visible                                           | Fail   | O1A does not see shared CA/Certs                                                                                                                              |\r\n| 10 | [01A] Trying to create device with another org\'s id gives object not found error | Pass   |                                                                                                                                                               |\r\n', 'comment_created': datetime.datetime(2021, 5, 8, 19, 14, 55, tzinfo=datetime.timezone.utc), 'commenter': 'atb00ker', 'type': 'User'}, {'comment_id': 628786383, 'comment_body': 'SN | controller/vpn/str:pk/ | Status\r\n-- | -- | --\r\n1 | [SU] Can view any vpn | Pass\r\n2 | [O1A] Can view only org1 vpns (not even shared org) | Pass\r\n3 | [O1O] Cannot view any vpn | Pass\r\n4 | [SU][O1A] Correct data of the vpn shown | Pass\r\n5 | [SU][O1A][O1O] Can only delete templates if they have correct privilege | Pass\r\n\r\n', 'comment_created': datetime.datetime(2021, 5, 8, 19, 19, 21, tzinfo=datetime.timezone.utc), 'commenter': 'atb00ker', 'type': 'User'}, {'comment_id': 628787098, 'comment_body': '|   | controller/vpn/str:pk/configuration          | Status |\r\n|---|----------------------------------------------|--------|\r\n| 1 | [SU] Can download any configuration          | Pass   |\r\n| 2 | [SU][O1A] Correct template config downloaded | Pass   |', 'comment_created': datetime.datetime(2021, 5, 8, 19, 26, 53, tzinfo=datetime.timezone.utc), 'commenter': 'atb00ker', 'type': 'User'}, {'comment_id': 628959047, 'comment_body': ""> SN\t/api/v1/controller/template/\tStatus\r\n> 1\t[SU] Can view all templates\tPass\r\n> 2\t[O1A] can view only org1 templates (not even shared org)\tPass\r\n> 3\t[O1O] can view no templates\tPass\r\n> 4\t[SU] VPN-Client hidden for Generic Template\tNTD\r\n> 5\t[SU][O1A] Field validation error on field\tFail\r\n> 6\t[SU][O1A] Allows creating template without config\tFail\r\n> 7\t[SU][O1A][O1O] Allows creating template with config\tPass\r\n> 8\t[SU][O1A][O1O] Allow creating VPN template\tPass\r\n> 9\t[SU][O1A][O1O] Allow creating VPN template without openvpn\tNTD\r\n> 10\t[O1O] Access denied to org1 operator user\tNTD\r\n> 11\t[SU] Unique template name ensured\tPass\r\n> 12\t[O1A] Trying to create template for another org gives object not found error\tPass\r\n> **SN. 4:**\r\n> ![case4fail](https://user-images.githubusercontent.com/24985760/117544793-9ccce000-b040-11eb-97c5-7ceaefa516da.png)\r\n> @nemesisdesign I think this is an acceptable deviation, can you please confirm.\r\n\r\nYes it's acceptable because it's an API and not a frontend.\r\n\r\n> **SN. 5:**\r\n> ![case5-1](https://user-images.githubusercontent.com/24985760/117544800-9f2f3a00-b040-11eb-9a98-4144c16494f4.png)\r\n> @ManishShah120 Can we show the error on config instead of `__all__`? it would be useful for people making apps using the API.\r\n\r\nIf possible this would be a good improvement.\r\n\r\n> **SN. 9**\r\n> ![case9](https://user-images.githubusercontent.com/24985760/117544802-a0606700-b040-11eb-9da2-a7b0ef22d623.png)\r\n> @nemesisdesign is this okay?\r\n\r\nIt does look good to me. Why it shouldn't? I don't understand your point.\r\n\r\n> **SN. 10**\r\n> @nemesisdesign Shouldn't we deny access to the page if creating and viewing is not allowed? Same for admin UI. Why is access even allowed?\r\n\r\nRight, good catch!\r\nDRF doesn't implement the view permission by default: \r\nhttps://www.django-rest-framework.org/api-guide/permissions/#djangomodelpermissions\r\n\r\nWe have to do it. Please @ManishShah120 can you add a `DjangoModelPermissions` class which inherits from `DjangoModelPermissions` and adds the view permission as indicated in the DRF docs?\r\nThen we should use this new permission class instead of the default one.\r\n\r\n@atb00ker regarding the admin view, what do you refer to exactly?\r\n"", 'comment_created': datetime.datetime(2021, 5, 9, 23, 33, 46, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 628959584, 'comment_body': 'I\'m afraid ""the invalid configuration triggered by ... "" is defined at model level and we have to leave as is for now.', 'comment_created': datetime.datetime(2021, 5, 9, 23, 38, 10, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 629578792, 'comment_body': ""> >    @nemesisdesign is this okay?\r\n\r\n> It does look good to me. Why it shouldn't? I don't understand your point.\r\n\r\nThe VPN servers created from UI always have a openvpn section in configuration, here we are able to make it without that! :smile:"", 'comment_created': datetime.datetime(2021, 5, 10, 18, 24, 46, tzinfo=datetime.timezone.utc), 'commenter': 'atb00ker', 'type': 'User'}, {'comment_id': 630055371, 'comment_body': '@atb00ker SN5, SN6 is resolved.', 'comment_created': datetime.datetime(2021, 5, 11, 10, 45, 13, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}, {'comment_id': 630096831, 'comment_body': 'S9, is working fine for me.', 'comment_created': datetime.datetime(2021, 5, 11, 11, 53, 36, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}, {'comment_id': 632697475, 'comment_body': '@atb00ker regarding SN10, I think you missed one more failing case which is foralong with this [O1A]  administrator but not manager i.e., (is_admin for org1 not set to True)', 'comment_created': datetime.datetime(2021, 5, 14, 17, 51, 55, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}, {'comment_id': 632732078, 'comment_body': ""Copying @nemesisdesign 's response on Gitter:\r\n\r\n```\r\n@ManishShah120 @atb00ker I am not sure I understand what we're discussing, can you be more explicit and provide some user stories as examples?\r\nI am not following you.\r\n\r\nAs a general rule, for now, I'd simplify everything:\r\n\r\n    only organization managers (having is_admin=True) or superusers can use the API\r\n    non superusers have limited permissions, according to the permissions defined in django\r\n\r\nSo if user is not manager of the org, it can't do anything via the API right now.\r\n\r\nIf user is superuser, can do anything.\r\n\r\nIf user is not superuser and is manager of an org, it can do what their django permissions allow them to do.\r\n```"", 'comment_created': datetime.datetime(2021, 5, 14, 18, 52, 34, tzinfo=datetime.timezone.utc), 'commenter': 'atb00ker', 'type': 'User'}]","[{'commit_sha': '9e9701590a2c654dce1ea90587b22b74d977b4ea', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5ead323c8a7d16878d7807131268cb86a20f9bcd', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b04bd836ba46eee1f8709c516fc2f902dbf4b3b8', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '38f481654d3ac6fb85711c596dbe2848063dd1ad', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9d779db7ec8751b0e6f6166076558225c96a7ba1', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e45685fdda28c47263739adc0fbc1e0315b40793', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9c25048f2b7cf14e39df94a8564a40231b5b7070', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fb44b20e71b698a65e7cca549a655913f4b96b14', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6d5984f092491d53205a2d5c9bc53c66a54d4dd9', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cd2ca573cce21f7eab9ada16b75343023b4e8fd1', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '22ad25b2154bef45fa89543503321b9b9f5020f0', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3cdd17da40fbc188ca4a14ed0f547fba35f183f1', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2ea8207da3aaed24bde0b97ba710104cefabc6db', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b3bbdd1e05d2e412f204b3748c1a9d4b78359e46', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8caa48f045439732e8c148d107194f927d21c194', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '846d6ceb1aac447ce2b24c5ab32d7503dfc9d364', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'af7b407f048491444d2b7897add3b6e2a829bd5e', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4fde2f8878b78a01fb942693db494c9538a7eca3', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '48b769723d44fa543c231b59ef3041de8460e003', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f5154dc8ae9439aaa856c3a2999487feb49d0bda', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6e4cf9cf71cc7b7ef614b98366fb107c65a55dfc', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a00573880ca7672037ead75e6a3f1de30fd94b43', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '06b183f8c6b59406d108343b84991d572bea02e4', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'efebb918c657381c25f776923861a7980cfe283a', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c592b3e32e410a1498a70e9e34aa9b1603c8545a', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '718e414850229ddde8dab716ddc3848ffae27585', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4eacd3cca7e06e8a9f84153ef966bb0601d765c1', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3eed8854ac0e797615b645fe6811260f3e175e07', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '15405eb9d2cf908d22ef24738c879a303cbda103', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7e1d9ca7388ccdb4fdae22e39032bf26c691ca6d', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c742290f126935ad2e995b349a63d63a9a40ef7a', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '28f16222a027bef681757a312e888620fe903d22', 'committer_username': 'nemesifier', 'committer_name': 'Federico Capoano', 'committer_email': 'f.capoano@openwisp.io', 'commit_date': datetime.datetime(2011, 6, 9, 22, 30, 31, tzinfo=datetime.timezone.utc)}]",Manish Kumar Shah,45564404,,User,,57,,169,155
643161160,[api] Rest API for PKI app,Closes #462 ,True,455,https://api.github.com/repos/openwisp/openwisp-controller/pulls/455,https://github.com/openwisp/openwisp-controller/pull/455,closed,797,3,7,33,22,41,0,1,[],2021-05-12 13:24:26+00:00,2021-07-25 17:07:03+00:00,6406957.0,"74 days, 3:42:37","[{'comment_id': 631902087, 'comment_body': ""Isn't this function doing the same job as [django-x509 crl_view](https://github.com/openwisp/django-x509/blob/master/django_x509/base/admin.py#L135-L143)?\r\nCan we please try to avoid duplicating this code? :smile:"", 'comment_created': datetime.datetime(2021, 5, 13, 15, 34, 25, tzinfo=datetime.timezone.utc), 'commenter': 'atb00ker', 'type': 'User'}, {'comment_id': 631937113, 'comment_body': ""Yes, I tried to import it, but didn't work. I will try again. :+1:"", 'comment_created': datetime.datetime(2021, 5, 13, 16, 23, 49, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}, {'comment_id': 631954895, 'comment_body': 'Remember you can change the code in django-x509 to move the required function out of that class and create a mixin! :smile:', 'comment_created': datetime.datetime(2021, 5, 13, 16, 51, 13, tzinfo=datetime.timezone.utc), 'commenter': 'atb00ker', 'type': 'User'}, {'comment_id': 639947019, 'comment_body': ""Hi, @atb00ker I tried creating a mixin in django-x509, and it works well, but when I import it in drf view I get error's regarding arguments. This is what I am doing:- \r\n\r\n**In django-x509:**\r\nmixin.py\r\n``` python\r\nclass CrlDownloadMixinView:\r\n    def crl_view(self, request, pk):\r\n        authenticated = request.user.is_authenticated\r\n        authenticated = authenticated() if callable(authenticated) else authenticated\r\n        if app_settings.CRL_PROTECTED and not authenticated:\r\n            return HttpResponse(_('Forbidden'), status=403, content_type='text/plain')\r\n        instance = get_object_or_404(self.model, pk=pk)\r\n        return HttpResponse(instance.crl, status=200, content_type='application/x-pem-file')\r\n```\r\nand then inherited this class in [AbstractCaAdmin](https://github.com/openwisp/django-x509/blob/43d810f57ea592ece67a1b54904104cc022ca514/django_x509/base/admin.py#L100).\r\n\r\nand in the api **views.py** file I did this:-\r\n``` python\r\nclass CrlDownload(CrlDownloadMixinView):\r\n    model = Ca\r\n```\r\nCan I please know what I am doing wrong here? :thinking: \r\n"", 'comment_created': datetime.datetime(2021, 5, 26, 17, 13, 51, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}, {'comment_id': 641925204, 'comment_body': ""Sorry, I missed this message in mails.\r\nSure, I can help you out with it. Can you share the stacktrace that you are seeing? `error's regarding arguments` is not enough to guess what the error is ..."", 'comment_created': datetime.datetime(2021, 5, 29, 11, 11, 23, tzinfo=datetime.timezone.utc), 'commenter': 'atb00ker', 'type': 'User'}, {'comment_id': 641932784, 'comment_body': ""Meanwhile, I wrote this working code:\r\n```\r\nfrom django_x509 import settings as app_settings\r\nfrom django.http import HttpResponse\r\nfrom django.shortcuts import get_object_or_404\r\nfrom django.utils.translation import ugettext_lazy as _\r\nfrom django.views import View\r\nfrom ..models import Ca\r\n\r\n\r\nclass CrlDownloadMixin:\r\n    def crl_view(self, request, pk):\r\n        authenticated = request.user.is_authenticated\r\n        authenticated = authenticated() if callable(authenticated) else authenticated\r\n        if app_settings.CRL_PROTECTED and not authenticated:\r\n            return HttpResponse(_('Forbidden'), status=403, content_type='text/plain')\r\n        instance = get_object_or_404(self.model, pk=pk)\r\n        return HttpResponse(\r\n            instance.crl, status=200, content_type='application/x-pem-file'\r\n        )\r\n\r\n\r\nclass CrlDownloadMixinView(View, CrlDownloadMixin):\r\n    model = Ca\r\n\r\n    def get(self, request, pk):\r\n        return self.crl_view(request, pk)\r\n\r\n\r\ncrlview = CrlDownloadMixinView.as_view()\r\n```\r\n\r\n```\r\nclass AbstractCaAdmin(BaseAdmin, CrlDownloadMixin):\r\n   ....\r\n```\r\n\r\n```\r\nfrom .base.views import crlview\r\nfrom django.urls import path\r\n\r\nurlpatterns = [path('api/<pk:int>', crlview, name='crl')]\r\n```\r\n\r\nNote: this is only a rough implementation using model as is and using random url path etc, please polish it before using."", 'comment_created': datetime.datetime(2021, 5, 29, 12, 29, 52, tzinfo=datetime.timezone.utc), 'commenter': 'atb00ker', 'type': 'User'}, {'comment_id': 642505322, 'comment_body': 'Thanx a Lot. Done implementing', 'comment_created': datetime.datetime(2021, 5, 31, 13, 52, 7, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}, {'comment_id': 645139114, 'comment_body': '@ManishShah120 have you made sure the CRL view from django-x509 is not used?\r\nPS: looks good :+1: ', 'comment_created': datetime.datetime(2021, 6, 3, 21, 32, 51, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 645316810, 'comment_body': ""Yes, I checked it. It's not being used."", 'comment_created': datetime.datetime(2021, 6, 4, 6, 18, 25, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}, {'comment_id': 646204541, 'comment_body': 'why do we have to redefine this and the other choice fields? Is it really necessary?', 'comment_created': datetime.datetime(2021, 6, 6, 23, 46, 46, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 646809138, 'comment_body': ""Hi I redefined it to exclude the unwanted choice field i.e., 'blank' and 'none'. But this will get resolved with this. :- https://github.com/openwisp/openwisp-controller/issues/444 So simplefied the code."", 'comment_created': datetime.datetime(2021, 6, 7, 17, 41, 13, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}, {'comment_id': 647500908, 'comment_body': ""please add `assertNumQueries` to each test to ensure we're keeping queries in check"", 'comment_created': datetime.datetime(2021, 6, 8, 14, 31, 9, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 648854640, 'comment_body': 'Done adding. :+1:', 'comment_created': datetime.datetime(2021, 6, 10, 5, 13, 8, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}, {'comment_id': 654810018, 'comment_body': 'The default values are giving this error: \r\n\r\n```\r\n{\r\n    ""validity_start"": [\r\n        ""Datetime has wrong format. Use one of these formats instead: YYYY-MM-DDThh:mm[:ss[.uuuuuu]][+HH:MM|-HH:MM|Z].""\r\n    ],\r\n    ""validity_end"": [\r\n        ""Datetime has wrong format. Use one of these formats instead: YYYY-MM-DDThh:mm[:ss[.uuuuuu]][+HH:MM|-HH:MM|Z].""\r\n    ]\r\n}\r\n```\r\nPlease fix the defaults.', 'comment_created': datetime.datetime(2021, 6, 19, 15, 40, 5, tzinfo=datetime.timezone.utc), 'commenter': 'atb00ker', 'type': 'User'}, {'comment_id': 655334720, 'comment_body': '@atb00ker The second error is related with model, admin I raised an issue here:- https://github.com/openwisp/openwisp-controller/issues/444 this will get resolved with that.', 'comment_created': datetime.datetime(2021, 6, 21, 12, 31, 58, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}, {'comment_id': 661778599, 'comment_body': '| SN | /api/v1/pki/ca/                               | Status | Details |\r\n|:--:|-----------------------------------------------|:------:|:-------:|\r\n|  1 | [SU][O1A][O1O] Can view only appropriate ca   |  Pass  |         |\r\n|  2 | [SU][O1A][O1O] Can create only appropriate ca |  Pass  |         |\r\n|  3 | [SU][O1A] All errors reported together        |  Pass  |         |', 'comment_created': datetime.datetime(2021, 6, 30, 20, 10, 31, tzinfo=datetime.timezone.utc), 'commenter': 'atb00ker', 'type': 'User'}, {'comment_id': 661785432, 'comment_body': '| SN | /api/v1/pki/ca/<str:id>                           | Status | Details |\r\n|----|----------------------------------------------|:------:|:-------:|\r\n| 1  | [SU][O1A][O1O] Can view only appropriate Cas |  Pass  |         |\r\n| 2  | [SU][O1A][O1O] Can edit only appropriate Cas |  Pass  |         |\r\n| 3  | [SU][O1A] Correct data is shown              |  Pass  |         |\r\n| 4  | [SU][01A] Can delete only appropriate data   |  Pass  |         |\r\n| 5  | [SU][O1A][O1O] Anyone can download CRLs      |  Pass  |         |', 'comment_created': datetime.datetime(2021, 6, 30, 20, 22, 17, tzinfo=datetime.timezone.utc), 'commenter': 'atb00ker', 'type': 'User'}, {'comment_id': 662382463, 'comment_body': '| SN | /api/v1/pki/cert/                             | Status |                                Details                                |\r\n|:--:|-----------------------------------------------|:------:|:---------------------------------------------------------------------:|\r\n|  1 | [SU][O1A][O1O] Can view only appropriate ca   |  Pass  |                                                                       |\r\n|  2 | [SU][O1A][O1O] Can create only appropriate ca |  Fail  | When trying to import certificate, I need to provide validity period. |\r\n|  3 | [SU][O1A] All errors reported together        |  Pass  |                                                                       |\r\n', 'comment_created': datetime.datetime(2021, 7, 1, 15, 18, 18, tzinfo=datetime.timezone.utc), 'commenter': 'atb00ker', 'type': 'User'}, {'comment_id': 662382710, 'comment_body': '\r\n\r\n| SN | /api/v1/pki/cert/str:pk                       | Status | Details |\r\n|----|-----------------------------------------------|:------:|:-------:|\r\n| 1  | [SU][O1A][O1O] Can view only appropriate Cert |  Pass  |         |\r\n| 2  | [SU][O1A][O1O] Can edit only appropriate Cert |  Pass  |         |\r\n| 3  | [SU][O1A] Correct data is shown               |  Pass  |         |\r\n| 4  | [SU][01A] Can delete only appropriate data    |  Pass  |         |', 'comment_created': datetime.datetime(2021, 7, 1, 15, 18, 31, tzinfo=datetime.timezone.utc), 'commenter': 'atb00ker', 'type': 'User'}, {'comment_id': 663100352, 'comment_body': ""> When trying to import certificate, I need to provide validity period.\r\n\r\n@atb00ker By this do you mean `validity_start` & `validity_end`, this fields are not required fields, and even if the data get''s sent in a POST request, it gets replaced with the `cert` data from which it is imported."", 'comment_created': datetime.datetime(2021, 7, 2, 15, 38, 28, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}, {'comment_id': 663122799, 'comment_body': ""@ManishShah120 Are you sure they are not required? It wouldn't let me submit on firefox without these fields!"", 'comment_created': datetime.datetime(2021, 7, 2, 16, 18, 26, tzinfo=datetime.timezone.utc), 'commenter': 'atb00ker', 'type': 'User'}, {'comment_id': 663126935, 'comment_body': 'Yes, I am able to submit it, I also tested it in JSON format form.', 'comment_created': datetime.datetime(2021, 7, 2, 16, 26, 16, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}, {'comment_id': 663390755, 'comment_body': ""as shared in the gitter chat, let's follow the URL naming consistently with the other sub apps, so `/api/v1/<module-name>/<resource-name>/` which translates to `/api/v1/controller/ca/`, applies to other occurrences."", 'comment_created': datetime.datetime(2021, 7, 3, 17, 46, 19, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 663390766, 'comment_body': 'final slash missing', 'comment_created': datetime.datetime(2021, 7, 3, 17, 46, 31, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 663391075, 'comment_body': 'I confirm that I have been able to import as expected and without issues on Chrome,\r\nwhile on Firefox as @atb00ker noted, the validity start and end fields are somehow prefilled and hence submitting the form fails with a validation error unless the prefilled value is edited manually.\r\n\r\nNot a big deal, because this will happen only when using it from the browsable API. @ManishShah120 can you double check on Firefox and see if you can force the default value to be empty there too?', 'comment_created': datetime.datetime(2021, 7, 3, 17, 49, 37, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 663391136, 'comment_body': 'I\'d specify ""Create new Cert""', 'comment_created': datetime.datetime(2021, 7, 3, 17, 50, 7, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 663391169, 'comment_body': 'can you please spend a few words here to explain how to import a cert (specify the fields required to make the import cert work)?', 'comment_created': datetime.datetime(2021, 7, 3, 17, 50, 30, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 663391205, 'comment_body': 'I\'d specify ""Create new CA""', 'comment_created': datetime.datetime(2021, 7, 3, 17, 50, 41, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 663391207, 'comment_body': 'can you please spend a few words here to explain how to import a CA (specify the fields required to make the import cert work)?', 'comment_created': datetime.datetime(2021, 7, 3, 17, 50, 48, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 667686510, 'comment_body': 'Just a small English correction: `... fields have to be filled`', 'comment_created': datetime.datetime(2021, 7, 12, 7, 23, 47, tzinfo=datetime.timezone.utc), 'commenter': 'okraits', 'type': 'User'}, {'comment_id': 667687222, 'comment_body': 'Same here: `... fields have to be filled`', 'comment_created': datetime.datetime(2021, 7, 12, 7, 24, 56, tzinfo=datetime.timezone.utc), 'commenter': 'okraits', 'type': 'User'}, {'comment_id': 668185487, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 7, 12, 19, 8, 32, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}, {'comment_id': 668185539, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 7, 12, 19, 8, 39, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}, {'comment_id': 671888242, 'comment_body': 'this looks mostly the same as the Ca serializer', 'comment_created': datetime.datetime(2021, 7, 18, 19, 42, 54, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 671888276, 'comment_body': 'these two method also are almost identical', 'comment_created': datetime.datetime(2021, 7, 18, 19, 43, 11, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 672713553, 'comment_body': 'return the serialized data with the updated data and 200 as status code, applies to the other endpoints as well', 'comment_created': datetime.datetime(2021, 7, 20, 0, 5, 47, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 672928190, 'comment_body': 'This is done. :+1:', 'comment_created': datetime.datetime(2021, 7, 20, 8, 44, 20, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}, {'comment_id': 674434736, 'comment_body': 'two doubts here:\r\n\r\n- why the default argument is `None`? it looks like there should be no default argument\r\n- why this naming? Capital letter is used for classes, I think this should be named `get_cert_list_fields`\r\n\r\nEg:\r\n\r\n```python\r\ndef get_cert_list_fields(fields):\r\n    pass\r\n```', 'comment_created': datetime.datetime(2021, 7, 22, 0, 50, 19, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 674434861, 'comment_body': 'same here as for `get_cert_list_fields`', 'comment_created': datetime.datetime(2021, 7, 22, 0, 50, 49, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 674435359, 'comment_body': 'same here', 'comment_created': datetime.datetime(2021, 7, 22, 0, 52, 33, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 674436251, 'comment_body': ""can you please move these 3 methods above to a `BaseListSerializer` which inherits from `BaseSerializer` and then use it as a base for `CertListSerializer` and `CatListSerializer`?\r\n\r\nThe line which adds `data.update({'ca': instance.ca})` can be added with super()"", 'comment_created': datetime.datetime(2021, 7, 22, 0, 55, 48, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}]","[{'commit_sha': 'ec92a99999d83837b5ae649180ccdaaadc33b527', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9f15ab770003aebd55bd3fa131e2b58a0175b5bc', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '443402e1ce130eac4ca80a534600f392276c1c8f', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0f40be5e2177b46a07e5b617d7d4aeb9d2e2dd76', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '84d02a56ddf07fac1fe9cfccca359164e35d9da3', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0bfe2d95b6ab13a11a07f0ce41fa4bd8b570110c', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '55e1e35d0fbcaf0f28cf245c922c29c21007687a', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7d958a174dfbd0c11e4ee68c209d1dc2e185b771', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3b7674bacca08c5d75c195af880d59001cc9e8d7', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b8661e08bd74053e100bdd90f8cf5eb889ad9aff', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '466da672783e5cf308e3b5ce848faf4d7c953e6d', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a93805cc6436a4be576c0a2dd7e13df542c2bed3', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '625738ad3e68f80dcf32795221902823d23d9e7b', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cecd615807fe3dcc8baf7dac0020c9640018907c', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2ccb28ba43fd0b72cf70e069b219de8be4371d57', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '683d6908d2fbb0ed404c119040bb84f1ca28477a', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '195b7d81c4eac1969c0ec85c1e1ba1a26749773a', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c89a5ac0a4a5942cb691de6c3233b09e8b9ef628', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7d12010fe0d6b991bafe8fe420b2cac598bdb876', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5231b83a7c9320160dd51afec064e2d6cc35ee58', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f96ba4ecccafa67a46156d97b16bfbddbacef248', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1b1b9e696decdd26409e50864e195ae9e6d4634e', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '45db198d2cad03be2cc33cf362c66292f468d2ee', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd67ae09745bc0a40015d9055147171e09d624b4f', 'committer_username': 'nemesifier', 'committer_name': 'Federico Capoano', 'committer_email': 'f.capoano@openwisp.io', 'commit_date': datetime.datetime(2011, 6, 9, 22, 30, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ae42efc65335ba1b075ba8273d95a121d8475537', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '44fed3c8c0c66942d3a0c276e8248963aa83a0bb', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '738aa63ef4aec119594b2d0cf76439fef722059e', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6130f5af22c599611bc2ae86071464b7e36f4fb6', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '91cd457a56d9b3699e8ae2b66cd80b029ecc4b38', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4bf3fa4e6847600e64c694693256dd2739101198', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd3862028f29d1853feb1a4a3c57b0b14cb883aae', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9abbb5cc1bbd3cf8e994c5c97cf83c2e50f1db78', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a020222684a67f151c6f0730791eea96eceef81f', 'committer_username': 'nemesifier', 'committer_name': 'Federico Capoano', 'committer_email': 'f.capoano@openwisp.io', 'commit_date': datetime.datetime(2011, 6, 9, 22, 30, 31, tzinfo=datetime.timezone.utc)}]",Manish Kumar Shah,45564404,,User,,57,,169,155
643161160,[api] Rest API for PKI app,Closes #462 ,True,455,https://api.github.com/repos/openwisp/openwisp-controller/pulls/455,https://github.com/openwisp/openwisp-controller/pull/455,closed,797,3,7,33,22,41,0,1,[],2021-05-12 13:24:26+00:00,2021-07-25 17:07:03+00:00,6406957.0,"74 days, 3:42:37","[{'comment_id': 631902087, 'comment_body': ""Isn't this function doing the same job as [django-x509 crl_view](https://github.com/openwisp/django-x509/blob/master/django_x509/base/admin.py#L135-L143)?\r\nCan we please try to avoid duplicating this code? :smile:"", 'comment_created': datetime.datetime(2021, 5, 13, 15, 34, 25, tzinfo=datetime.timezone.utc), 'commenter': 'atb00ker', 'type': 'User'}, {'comment_id': 631937113, 'comment_body': ""Yes, I tried to import it, but didn't work. I will try again. :+1:"", 'comment_created': datetime.datetime(2021, 5, 13, 16, 23, 49, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}, {'comment_id': 631954895, 'comment_body': 'Remember you can change the code in django-x509 to move the required function out of that class and create a mixin! :smile:', 'comment_created': datetime.datetime(2021, 5, 13, 16, 51, 13, tzinfo=datetime.timezone.utc), 'commenter': 'atb00ker', 'type': 'User'}, {'comment_id': 639947019, 'comment_body': ""Hi, @atb00ker I tried creating a mixin in django-x509, and it works well, but when I import it in drf view I get error's regarding arguments. This is what I am doing:- \r\n\r\n**In django-x509:**\r\nmixin.py\r\n``` python\r\nclass CrlDownloadMixinView:\r\n    def crl_view(self, request, pk):\r\n        authenticated = request.user.is_authenticated\r\n        authenticated = authenticated() if callable(authenticated) else authenticated\r\n        if app_settings.CRL_PROTECTED and not authenticated:\r\n            return HttpResponse(_('Forbidden'), status=403, content_type='text/plain')\r\n        instance = get_object_or_404(self.model, pk=pk)\r\n        return HttpResponse(instance.crl, status=200, content_type='application/x-pem-file')\r\n```\r\nand then inherited this class in [AbstractCaAdmin](https://github.com/openwisp/django-x509/blob/43d810f57ea592ece67a1b54904104cc022ca514/django_x509/base/admin.py#L100).\r\n\r\nand in the api **views.py** file I did this:-\r\n``` python\r\nclass CrlDownload(CrlDownloadMixinView):\r\n    model = Ca\r\n```\r\nCan I please know what I am doing wrong here? :thinking: \r\n"", 'comment_created': datetime.datetime(2021, 5, 26, 17, 13, 51, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}, {'comment_id': 641925204, 'comment_body': ""Sorry, I missed this message in mails.\r\nSure, I can help you out with it. Can you share the stacktrace that you are seeing? `error's regarding arguments` is not enough to guess what the error is ..."", 'comment_created': datetime.datetime(2021, 5, 29, 11, 11, 23, tzinfo=datetime.timezone.utc), 'commenter': 'atb00ker', 'type': 'User'}, {'comment_id': 641932784, 'comment_body': ""Meanwhile, I wrote this working code:\r\n```\r\nfrom django_x509 import settings as app_settings\r\nfrom django.http import HttpResponse\r\nfrom django.shortcuts import get_object_or_404\r\nfrom django.utils.translation import ugettext_lazy as _\r\nfrom django.views import View\r\nfrom ..models import Ca\r\n\r\n\r\nclass CrlDownloadMixin:\r\n    def crl_view(self, request, pk):\r\n        authenticated = request.user.is_authenticated\r\n        authenticated = authenticated() if callable(authenticated) else authenticated\r\n        if app_settings.CRL_PROTECTED and not authenticated:\r\n            return HttpResponse(_('Forbidden'), status=403, content_type='text/plain')\r\n        instance = get_object_or_404(self.model, pk=pk)\r\n        return HttpResponse(\r\n            instance.crl, status=200, content_type='application/x-pem-file'\r\n        )\r\n\r\n\r\nclass CrlDownloadMixinView(View, CrlDownloadMixin):\r\n    model = Ca\r\n\r\n    def get(self, request, pk):\r\n        return self.crl_view(request, pk)\r\n\r\n\r\ncrlview = CrlDownloadMixinView.as_view()\r\n```\r\n\r\n```\r\nclass AbstractCaAdmin(BaseAdmin, CrlDownloadMixin):\r\n   ....\r\n```\r\n\r\n```\r\nfrom .base.views import crlview\r\nfrom django.urls import path\r\n\r\nurlpatterns = [path('api/<pk:int>', crlview, name='crl')]\r\n```\r\n\r\nNote: this is only a rough implementation using model as is and using random url path etc, please polish it before using."", 'comment_created': datetime.datetime(2021, 5, 29, 12, 29, 52, tzinfo=datetime.timezone.utc), 'commenter': 'atb00ker', 'type': 'User'}, {'comment_id': 642505322, 'comment_body': 'Thanx a Lot. Done implementing', 'comment_created': datetime.datetime(2021, 5, 31, 13, 52, 7, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}, {'comment_id': 645139114, 'comment_body': '@ManishShah120 have you made sure the CRL view from django-x509 is not used?\r\nPS: looks good :+1: ', 'comment_created': datetime.datetime(2021, 6, 3, 21, 32, 51, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 645316810, 'comment_body': ""Yes, I checked it. It's not being used."", 'comment_created': datetime.datetime(2021, 6, 4, 6, 18, 25, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}, {'comment_id': 646204541, 'comment_body': 'why do we have to redefine this and the other choice fields? Is it really necessary?', 'comment_created': datetime.datetime(2021, 6, 6, 23, 46, 46, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 646809138, 'comment_body': ""Hi I redefined it to exclude the unwanted choice field i.e., 'blank' and 'none'. But this will get resolved with this. :- https://github.com/openwisp/openwisp-controller/issues/444 So simplefied the code."", 'comment_created': datetime.datetime(2021, 6, 7, 17, 41, 13, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}, {'comment_id': 647500908, 'comment_body': ""please add `assertNumQueries` to each test to ensure we're keeping queries in check"", 'comment_created': datetime.datetime(2021, 6, 8, 14, 31, 9, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 648854640, 'comment_body': 'Done adding. :+1:', 'comment_created': datetime.datetime(2021, 6, 10, 5, 13, 8, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}, {'comment_id': 654810018, 'comment_body': 'The default values are giving this error: \r\n\r\n```\r\n{\r\n    ""validity_start"": [\r\n        ""Datetime has wrong format. Use one of these formats instead: YYYY-MM-DDThh:mm[:ss[.uuuuuu]][+HH:MM|-HH:MM|Z].""\r\n    ],\r\n    ""validity_end"": [\r\n        ""Datetime has wrong format. Use one of these formats instead: YYYY-MM-DDThh:mm[:ss[.uuuuuu]][+HH:MM|-HH:MM|Z].""\r\n    ]\r\n}\r\n```\r\nPlease fix the defaults.', 'comment_created': datetime.datetime(2021, 6, 19, 15, 40, 5, tzinfo=datetime.timezone.utc), 'commenter': 'atb00ker', 'type': 'User'}, {'comment_id': 655334720, 'comment_body': '@atb00ker The second error is related with model, admin I raised an issue here:- https://github.com/openwisp/openwisp-controller/issues/444 this will get resolved with that.', 'comment_created': datetime.datetime(2021, 6, 21, 12, 31, 58, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}, {'comment_id': 661778599, 'comment_body': '| SN | /api/v1/pki/ca/                               | Status | Details |\r\n|:--:|-----------------------------------------------|:------:|:-------:|\r\n|  1 | [SU][O1A][O1O] Can view only appropriate ca   |  Pass  |         |\r\n|  2 | [SU][O1A][O1O] Can create only appropriate ca |  Pass  |         |\r\n|  3 | [SU][O1A] All errors reported together        |  Pass  |         |', 'comment_created': datetime.datetime(2021, 6, 30, 20, 10, 31, tzinfo=datetime.timezone.utc), 'commenter': 'atb00ker', 'type': 'User'}, {'comment_id': 661785432, 'comment_body': '| SN | /api/v1/pki/ca/<str:id>                           | Status | Details |\r\n|----|----------------------------------------------|:------:|:-------:|\r\n| 1  | [SU][O1A][O1O] Can view only appropriate Cas |  Pass  |         |\r\n| 2  | [SU][O1A][O1O] Can edit only appropriate Cas |  Pass  |         |\r\n| 3  | [SU][O1A] Correct data is shown              |  Pass  |         |\r\n| 4  | [SU][01A] Can delete only appropriate data   |  Pass  |         |\r\n| 5  | [SU][O1A][O1O] Anyone can download CRLs      |  Pass  |         |', 'comment_created': datetime.datetime(2021, 6, 30, 20, 22, 17, tzinfo=datetime.timezone.utc), 'commenter': 'atb00ker', 'type': 'User'}, {'comment_id': 662382463, 'comment_body': '| SN | /api/v1/pki/cert/                             | Status |                                Details                                |\r\n|:--:|-----------------------------------------------|:------:|:---------------------------------------------------------------------:|\r\n|  1 | [SU][O1A][O1O] Can view only appropriate ca   |  Pass  |                                                                       |\r\n|  2 | [SU][O1A][O1O] Can create only appropriate ca |  Fail  | When trying to import certificate, I need to provide validity period. |\r\n|  3 | [SU][O1A] All errors reported together        |  Pass  |                                                                       |\r\n', 'comment_created': datetime.datetime(2021, 7, 1, 15, 18, 18, tzinfo=datetime.timezone.utc), 'commenter': 'atb00ker', 'type': 'User'}, {'comment_id': 662382710, 'comment_body': '\r\n\r\n| SN | /api/v1/pki/cert/str:pk                       | Status | Details |\r\n|----|-----------------------------------------------|:------:|:-------:|\r\n| 1  | [SU][O1A][O1O] Can view only appropriate Cert |  Pass  |         |\r\n| 2  | [SU][O1A][O1O] Can edit only appropriate Cert |  Pass  |         |\r\n| 3  | [SU][O1A] Correct data is shown               |  Pass  |         |\r\n| 4  | [SU][01A] Can delete only appropriate data    |  Pass  |         |', 'comment_created': datetime.datetime(2021, 7, 1, 15, 18, 31, tzinfo=datetime.timezone.utc), 'commenter': 'atb00ker', 'type': 'User'}, {'comment_id': 663100352, 'comment_body': ""> When trying to import certificate, I need to provide validity period.\r\n\r\n@atb00ker By this do you mean `validity_start` & `validity_end`, this fields are not required fields, and even if the data get''s sent in a POST request, it gets replaced with the `cert` data from which it is imported."", 'comment_created': datetime.datetime(2021, 7, 2, 15, 38, 28, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}, {'comment_id': 663122799, 'comment_body': ""@ManishShah120 Are you sure they are not required? It wouldn't let me submit on firefox without these fields!"", 'comment_created': datetime.datetime(2021, 7, 2, 16, 18, 26, tzinfo=datetime.timezone.utc), 'commenter': 'atb00ker', 'type': 'User'}, {'comment_id': 663126935, 'comment_body': 'Yes, I am able to submit it, I also tested it in JSON format form.', 'comment_created': datetime.datetime(2021, 7, 2, 16, 26, 16, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}, {'comment_id': 663390755, 'comment_body': ""as shared in the gitter chat, let's follow the URL naming consistently with the other sub apps, so `/api/v1/<module-name>/<resource-name>/` which translates to `/api/v1/controller/ca/`, applies to other occurrences."", 'comment_created': datetime.datetime(2021, 7, 3, 17, 46, 19, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 663390766, 'comment_body': 'final slash missing', 'comment_created': datetime.datetime(2021, 7, 3, 17, 46, 31, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 663391075, 'comment_body': 'I confirm that I have been able to import as expected and without issues on Chrome,\r\nwhile on Firefox as @atb00ker noted, the validity start and end fields are somehow prefilled and hence submitting the form fails with a validation error unless the prefilled value is edited manually.\r\n\r\nNot a big deal, because this will happen only when using it from the browsable API. @ManishShah120 can you double check on Firefox and see if you can force the default value to be empty there too?', 'comment_created': datetime.datetime(2021, 7, 3, 17, 49, 37, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 663391136, 'comment_body': 'I\'d specify ""Create new Cert""', 'comment_created': datetime.datetime(2021, 7, 3, 17, 50, 7, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 663391169, 'comment_body': 'can you please spend a few words here to explain how to import a cert (specify the fields required to make the import cert work)?', 'comment_created': datetime.datetime(2021, 7, 3, 17, 50, 30, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 663391205, 'comment_body': 'I\'d specify ""Create new CA""', 'comment_created': datetime.datetime(2021, 7, 3, 17, 50, 41, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 663391207, 'comment_body': 'can you please spend a few words here to explain how to import a CA (specify the fields required to make the import cert work)?', 'comment_created': datetime.datetime(2021, 7, 3, 17, 50, 48, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 667686510, 'comment_body': 'Just a small English correction: `... fields have to be filled`', 'comment_created': datetime.datetime(2021, 7, 12, 7, 23, 47, tzinfo=datetime.timezone.utc), 'commenter': 'okraits', 'type': 'User'}, {'comment_id': 667687222, 'comment_body': 'Same here: `... fields have to be filled`', 'comment_created': datetime.datetime(2021, 7, 12, 7, 24, 56, tzinfo=datetime.timezone.utc), 'commenter': 'okraits', 'type': 'User'}, {'comment_id': 668185487, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 7, 12, 19, 8, 32, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}, {'comment_id': 668185539, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 7, 12, 19, 8, 39, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}, {'comment_id': 671888242, 'comment_body': 'this looks mostly the same as the Ca serializer', 'comment_created': datetime.datetime(2021, 7, 18, 19, 42, 54, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 671888276, 'comment_body': 'these two method also are almost identical', 'comment_created': datetime.datetime(2021, 7, 18, 19, 43, 11, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 672713553, 'comment_body': 'return the serialized data with the updated data and 200 as status code, applies to the other endpoints as well', 'comment_created': datetime.datetime(2021, 7, 20, 0, 5, 47, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 672928190, 'comment_body': 'This is done. :+1:', 'comment_created': datetime.datetime(2021, 7, 20, 8, 44, 20, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}, {'comment_id': 674434736, 'comment_body': 'two doubts here:\r\n\r\n- why the default argument is `None`? it looks like there should be no default argument\r\n- why this naming? Capital letter is used for classes, I think this should be named `get_cert_list_fields`\r\n\r\nEg:\r\n\r\n```python\r\ndef get_cert_list_fields(fields):\r\n    pass\r\n```', 'comment_created': datetime.datetime(2021, 7, 22, 0, 50, 19, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 674434861, 'comment_body': 'same here as for `get_cert_list_fields`', 'comment_created': datetime.datetime(2021, 7, 22, 0, 50, 49, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 674435359, 'comment_body': 'same here', 'comment_created': datetime.datetime(2021, 7, 22, 0, 52, 33, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 674436251, 'comment_body': ""can you please move these 3 methods above to a `BaseListSerializer` which inherits from `BaseSerializer` and then use it as a base for `CertListSerializer` and `CatListSerializer`?\r\n\r\nThe line which adds `data.update({'ca': instance.ca})` can be added with super()"", 'comment_created': datetime.datetime(2021, 7, 22, 0, 55, 48, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}]","[{'commit_sha': 'ec92a99999d83837b5ae649180ccdaaadc33b527', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9f15ab770003aebd55bd3fa131e2b58a0175b5bc', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '443402e1ce130eac4ca80a534600f392276c1c8f', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0f40be5e2177b46a07e5b617d7d4aeb9d2e2dd76', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '84d02a56ddf07fac1fe9cfccca359164e35d9da3', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0bfe2d95b6ab13a11a07f0ce41fa4bd8b570110c', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '55e1e35d0fbcaf0f28cf245c922c29c21007687a', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7d958a174dfbd0c11e4ee68c209d1dc2e185b771', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3b7674bacca08c5d75c195af880d59001cc9e8d7', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b8661e08bd74053e100bdd90f8cf5eb889ad9aff', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '466da672783e5cf308e3b5ce848faf4d7c953e6d', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a93805cc6436a4be576c0a2dd7e13df542c2bed3', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '625738ad3e68f80dcf32795221902823d23d9e7b', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cecd615807fe3dcc8baf7dac0020c9640018907c', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2ccb28ba43fd0b72cf70e069b219de8be4371d57', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '683d6908d2fbb0ed404c119040bb84f1ca28477a', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '195b7d81c4eac1969c0ec85c1e1ba1a26749773a', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c89a5ac0a4a5942cb691de6c3233b09e8b9ef628', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7d12010fe0d6b991bafe8fe420b2cac598bdb876', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5231b83a7c9320160dd51afec064e2d6cc35ee58', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f96ba4ecccafa67a46156d97b16bfbddbacef248', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1b1b9e696decdd26409e50864e195ae9e6d4634e', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '45db198d2cad03be2cc33cf362c66292f468d2ee', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd67ae09745bc0a40015d9055147171e09d624b4f', 'committer_username': 'nemesifier', 'committer_name': 'Federico Capoano', 'committer_email': 'f.capoano@openwisp.io', 'commit_date': datetime.datetime(2011, 6, 9, 22, 30, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ae42efc65335ba1b075ba8273d95a121d8475537', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '44fed3c8c0c66942d3a0c276e8248963aa83a0bb', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '738aa63ef4aec119594b2d0cf76439fef722059e', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6130f5af22c599611bc2ae86071464b7e36f4fb6', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '91cd457a56d9b3699e8ae2b66cd80b029ecc4b38', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4bf3fa4e6847600e64c694693256dd2739101198', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd3862028f29d1853feb1a4a3c57b0b14cb883aae', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9abbb5cc1bbd3cf8e994c5c97cf83c2e50f1db78', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a020222684a67f151c6f0730791eea96eceef81f', 'committer_username': 'nemesifier', 'committer_name': 'Federico Capoano', 'committer_email': 'f.capoano@openwisp.io', 'commit_date': datetime.datetime(2011, 6, 9, 22, 30, 31, tzinfo=datetime.timezone.utc)}]",Manish Kumar Shah,45564404,,User,,57,,169,155
673866332,[api] REST API for the models of `connection` app #464,Closes #464,True,497,https://api.github.com/repos/openwisp/openwisp-controller/pulls/497,https://github.com/openwisp/openwisp-controller/pull/497,closed,478,9,7,5,2,8,0,1,[],2021-06-19 11:30:44+00:00,2021-07-15 02:06:04+00:00,2212520.0,"25 days, 14:35:20","[{'comment_id': 654828497, 'comment_body': '| SN | /api/v1/connection/credential/                   | Status |                                     Details                                    |\r\n|:--:|--------------------------------------------------|:------:|:------------------------------------------------------------------------------:|\r\n|  1 | [SU][O1A][O1O] Can view only appropriate creds   |  Pass  |                                                                                |\r\n|  2 | [SU][O1A][O1O] Can create only appropriate creds |  Pass  |                                                                                |\r\n|  3 | [SU][O1A] All errors reported together           | Fail   | If name and params are empty, error with params is reported when name is fixed |\r\n', 'comment_created': datetime.datetime(2021, 6, 19, 18, 56, 42, tzinfo=datetime.timezone.utc), 'commenter': 'atb00ker', 'type': 'User'}, {'comment_id': 654828690, 'comment_body': '| SN | /api/v1/connection/credential/str:pk/          | Status | Details |\r\n|:--:|------------------------------------------------|:------:|:-------:|\r\n|  1 | [SU][O1A][O1O] Can view only appropriate creds |  Pass  |         |\r\n|  2 | [SU][O1A][O1O] Can edit only appropriate creds |  Pass  |         |\r\n|  3 | [SU][O1A] Correct data is shown                |  Pass  |         |\r\n|  4 | [SU][01A] Can delete only appropriate data     |  Pass  |         |\r\n', 'comment_created': datetime.datetime(2021, 6, 19, 18, 59, 14, tzinfo=datetime.timezone.utc), 'commenter': 'atb00ker', 'type': 'User'}, {'comment_id': 663385279, 'comment_body': ""A couple of issues:\r\n\r\n- initial slash is missing\r\n- if you guys remember, when we worked on the PR for the `config` sub app, I told that we should use only one prefix for openwisp-controller and not one per subapp, so let's use only `controller` instead of `connection`, eg:\r\n`/api/v1/controller/credential/`.\r\n\r\nApplies to all other occurrences."", 'comment_created': datetime.datetime(2021, 7, 3, 16, 50, 5, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 664827476, 'comment_body': 'Hi, All these requested chnages have been resolved. :+1:', 'comment_created': datetime.datetime(2021, 7, 6, 19, 36, 24, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}, {'comment_id': 665836322, 'comment_body': 'final slash is missing here', 'comment_created': datetime.datetime(2021, 7, 8, 3, 3, 50, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 665939806, 'comment_body': 'done, adding :+1:', 'comment_created': datetime.datetime(2021, 7, 8, 7, 28, 50, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}, {'comment_id': 667309023, 'comment_body': ""Shouldn't reason of failure be read-only?"", 'comment_created': datetime.datetime(2021, 7, 10, 8, 14, 20, tzinfo=datetime.timezone.utc), 'commenter': 'atb00ker', 'type': 'User'}, {'comment_id': 667358262, 'comment_body': 'similarly to the conclusion we came in the config API, if we avoid these kind of restrictions in the REST API we can allow users to build whatever they want with it.', 'comment_created': datetime.datetime(2021, 7, 10, 16, 25, 41, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}]","[{'commit_sha': 'c89366f26dbf9543e64bd643d745eca548be7dd6', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4f45412ef8f9e381e2f5b1cc90bed353721a9c44', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2066326cb09dac8bbf9cdd528f0fae2e72678531', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fb817afdbf726b591603b4d8d5f7003cc146c10c', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4739d2aeb7006866cadb18dfd22f452453a153ab', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}]",Manish Kumar Shah,45564404,,User,,57,,169,155
673866332,[api] REST API for the models of `connection` app #464,Closes #464,True,497,https://api.github.com/repos/openwisp/openwisp-controller/pulls/497,https://github.com/openwisp/openwisp-controller/pull/497,closed,478,9,7,5,2,8,0,1,[],2021-06-19 11:30:44+00:00,2021-07-15 02:06:04+00:00,2212520.0,"25 days, 14:35:20","[{'comment_id': 654828497, 'comment_body': '| SN | /api/v1/connection/credential/                   | Status |                                     Details                                    |\r\n|:--:|--------------------------------------------------|:------:|:------------------------------------------------------------------------------:|\r\n|  1 | [SU][O1A][O1O] Can view only appropriate creds   |  Pass  |                                                                                |\r\n|  2 | [SU][O1A][O1O] Can create only appropriate creds |  Pass  |                                                                                |\r\n|  3 | [SU][O1A] All errors reported together           | Fail   | If name and params are empty, error with params is reported when name is fixed |\r\n', 'comment_created': datetime.datetime(2021, 6, 19, 18, 56, 42, tzinfo=datetime.timezone.utc), 'commenter': 'atb00ker', 'type': 'User'}, {'comment_id': 654828690, 'comment_body': '| SN | /api/v1/connection/credential/str:pk/          | Status | Details |\r\n|:--:|------------------------------------------------|:------:|:-------:|\r\n|  1 | [SU][O1A][O1O] Can view only appropriate creds |  Pass  |         |\r\n|  2 | [SU][O1A][O1O] Can edit only appropriate creds |  Pass  |         |\r\n|  3 | [SU][O1A] Correct data is shown                |  Pass  |         |\r\n|  4 | [SU][01A] Can delete only appropriate data     |  Pass  |         |\r\n', 'comment_created': datetime.datetime(2021, 6, 19, 18, 59, 14, tzinfo=datetime.timezone.utc), 'commenter': 'atb00ker', 'type': 'User'}, {'comment_id': 663385279, 'comment_body': ""A couple of issues:\r\n\r\n- initial slash is missing\r\n- if you guys remember, when we worked on the PR for the `config` sub app, I told that we should use only one prefix for openwisp-controller and not one per subapp, so let's use only `controller` instead of `connection`, eg:\r\n`/api/v1/controller/credential/`.\r\n\r\nApplies to all other occurrences."", 'comment_created': datetime.datetime(2021, 7, 3, 16, 50, 5, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 664827476, 'comment_body': 'Hi, All these requested chnages have been resolved. :+1:', 'comment_created': datetime.datetime(2021, 7, 6, 19, 36, 24, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}, {'comment_id': 665836322, 'comment_body': 'final slash is missing here', 'comment_created': datetime.datetime(2021, 7, 8, 3, 3, 50, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 665939806, 'comment_body': 'done, adding :+1:', 'comment_created': datetime.datetime(2021, 7, 8, 7, 28, 50, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}, {'comment_id': 667309023, 'comment_body': ""Shouldn't reason of failure be read-only?"", 'comment_created': datetime.datetime(2021, 7, 10, 8, 14, 20, tzinfo=datetime.timezone.utc), 'commenter': 'atb00ker', 'type': 'User'}, {'comment_id': 667358262, 'comment_body': 'similarly to the conclusion we came in the config API, if we avoid these kind of restrictions in the REST API we can allow users to build whatever they want with it.', 'comment_created': datetime.datetime(2021, 7, 10, 16, 25, 41, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}]","[{'commit_sha': 'c89366f26dbf9543e64bd643d745eca548be7dd6', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4f45412ef8f9e381e2f5b1cc90bed353721a9c44', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2066326cb09dac8bbf9cdd528f0fae2e72678531', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fb817afdbf726b591603b4d8d5f7003cc146c10c', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4739d2aeb7006866cadb18dfd22f452453a153ab', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}]",Manish Kumar Shah,45564404,,User,,57,,169,155
672320036,[api] REST API for the models of GEO App #463,Closes #463,True,494,https://api.github.com/repos/openwisp/openwisp-controller/pulls/494,https://github.com/openwisp/openwisp-controller/pull/494,closed,1608,65,7,12,7,61,0,1,[],2021-06-17 07:25:09+00:00,2022-04-20 19:31:08+00:00,26568359.0,"307 days, 12:05:59","[{'comment_id': 654820309, 'comment_body': '| SN | api/v1/geo/floorplan/                                 | Status | Details |\r\n|:--:|-------------------------------------------------------|:------:|:-------:|\r\n|  1 | [SU][O1A][O1O] Can view only appropriate floorplans   |  Pass  |         |\r\n|  2 | [SU][O1A][O1O] Can create only appropriate floorplans |  Pass  |         |\r\n|  3 | [SU][O1A] All errors reported together                |  Pass  |         |\r\n|  4 | [SU] Unique template name ensured                     |  Pass  |         |', 'comment_created': datetime.datetime(2021, 6, 19, 17, 29, 19, tzinfo=datetime.timezone.utc), 'commenter': 'atb00ker', 'type': 'User'}, {'comment_id': 654821704, 'comment_body': '| SN | api/v1/geo/floorplan/str:pk/                        | Status | Details |\r\n|:--:|-----------------------------------------------------|:------:|:-------:|\r\n|  1 | [SU][O1A][O1O] Can view only appropriate floorplans |  Pass  |         |\r\n|  2 | [SU][O1A][O1O] Can edit only appropriate floorplans |  Pass  |         |\r\n|  3 | [SU][O1A] Correct data is shown                     |  Pass  |         |\r\n|  4 | [SU][01A] Can delete only appropriate data          |  Pass  |         |', 'comment_created': datetime.datetime(2021, 6, 19, 17, 44, 11, tzinfo=datetime.timezone.utc), 'commenter': 'atb00ker', 'type': 'User'}, {'comment_id': 654823670, 'comment_body': '| SN | api/v1/geo/location/                                 | Status |                                   Details                                   |\r\n|:--:|------------------------------------------------------|:------:|:---------------------------------------------------------------------------:|\r\n|  1 | [SU][O1A][O1O] Can view only appropriate locations   |  Pass  |                                                                             |\r\n|  2 | [SU][O1A][O1O] Can create only appropriate locations |  Pass  |                                                                             |\r\n|  3 | [SU][O1A] All errors reported together               |  Fail  | If title and geometry are missing, geometry is reported when title is fixed |\r\n', 'comment_created': datetime.datetime(2021, 6, 19, 18, 5, 43, tzinfo=datetime.timezone.utc), 'commenter': 'atb00ker', 'type': 'User'}, {'comment_id': 654823889, 'comment_body': '| SN | api/v1/geo/location/<str:pk>/                       | Status | Details |\r\n|:--:|-----------------------------------------------------|:------:|:-------:|\r\n|  1 | [SU][O1A][O1O] Can view only appropriate floorplans |  Pass  |         |\r\n|  2 | [SU][O1A][O1O] Can edit only appropriate floorplans |  Pass  |         |\r\n|  3 | [SU][O1A] Correct data is shown                     |  Pass  |         |\r\n|  4 | [SU][01A] Can delete only appropriate data          |  Pass  |         |', 'comment_created': datetime.datetime(2021, 6, 19, 18, 7, 57, tzinfo=datetime.timezone.utc), 'commenter': 'atb00ker', 'type': 'User'}, {'comment_id': 654825164, 'comment_body': '| SN | api/geo/devicelocation/                               | Status |                                                      Details                                                     |\r\n|:--:|-------------------------------------------------------|:------:|:----------------------------------------------------------------------------------------------------------------:|\r\n|  1 | [SU][O1A][O1O] Can view only appropriate floorplans   |  Pass  |                                                                                                                  |\r\n|  2 | [SU][O1A][O1O] Can create only appropriate floorplans |  Pass  |                                                                                                                  |\r\n|  3 | [SU][O1A] All errors reported together                |  Fail  | Submitting empty form: {""content_object"":[""This field must be unique.""]} without informing which field has error |\r\n', 'comment_created': datetime.datetime(2021, 6, 19, 18, 20, 44, tzinfo=datetime.timezone.utc), 'commenter': 'atb00ker', 'type': 'User'}, {'comment_id': 654825378, 'comment_body': '| SN | api/v1/geo/location/str:pk/                              | Status | Details |\r\n|:--:|----------------------------------------------------------|:------:|:-------:|\r\n|  1 | [SU][O1A][O1O] Can view only appropriate devicelocations |  Pass  |         |\r\n|  2 | [SU][O1A][O1O] Can edit only appropriate devicelocations |  Pass  |         |\r\n|  3 | [SU][O1A] Correct data is shown                          |  Pass  |         |\r\n|  4 | [SU][01A] Can delete only appropriate data               |  Pass  |         |', 'comment_created': datetime.datetime(2021, 6, 19, 18, 22, 42, tzinfo=datetime.timezone.utc), 'commenter': 'atb00ker', 'type': 'User'}, {'comment_id': 663385788, 'comment_body': ""- inital slash missing\r\n- URL should be: `/api/v1/controller/device/{pk}/location/`\r\n\r\nIt's the location of a device, a resource of another resource. We already have a resource URL for device, so we must follow the pattern if we want this API to be really RESTful.\r\n\r\nOpenWISP Users should have mixins that can help you to implement this parent thing: https://github.com/openwisp/openwisp-users/#checking-parent-objects"", 'comment_created': datetime.datetime(2021, 7, 3, 16, 55, 8, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 663385953, 'comment_body': ""same concept here as in the connection PR: let's use `controller` as prefix (for consistency, otherwise we should rename `/controller` to `/config`, but really esposing this kind of internal code structure to API users is not useful at all for users) and do not forget the initial slash.\r\n\r\n`/api/v1/controller/floorplan/`\r\n\r\nApplies to all other endpoints."", 'comment_created': datetime.datetime(2021, 7, 3, 16, 56, 51, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 665474330, 'comment_body': ""@nemesisdesign with this pattern `/api/v1/controller/device/{pk}/location/` an endpoint is already present. should I edit it's view to make it for CRUD oerations."", 'comment_created': datetime.datetime(2021, 7, 7, 15, 20, 21, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}, {'comment_id': 665529225, 'comment_body': 'yes, definitely, right now we should have only GET, right? You can add support for PUT/PATCH and DELETE.\r\nProbably not POST because there can be only one device location per device.', 'comment_created': datetime.datetime(2021, 7, 7, 16, 27, 9, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 681882793, 'comment_body': 'as already explained, this should be:\r\n\r\n`/api/v1/controller/device/{id}/location/`\r\n\r\nwe have to improve this view:\r\n\r\nhttps://github.com/openwisp/openwisp-controller/blob/master/openwisp_controller/geo/api/views.py#L32-L65\r\n\r\nediting the data should keep working with the current way, adding/deleting/editing can be done also with the user token.', 'comment_created': datetime.datetime(2021, 8, 3, 15, 43, 13, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 682626896, 'comment_body': 'please check the length of `^^^` .', 'comment_created': datetime.datetime(2021, 8, 4, 13, 41, 6, tzinfo=datetime.timezone.utc), 'commenter': 'atb00ker', 'type': 'User'}, {'comment_id': 686605388, 'comment_body': 'this has been achieved.', 'comment_created': datetime.datetime(2021, 8, 11, 8, 16, 34, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}, {'comment_id': 688421609, 'comment_body': ""Here I haven't use the `gis_serializers.GeoFeatureModelSerializer`, to keep the representation as it is. Using this serializer class the representation is hindered resulting in not loading the appropriate field in HTML form fields in the DRF Browsable Page, Should I add it?, or it is ok."", 'comment_created': datetime.datetime(2021, 8, 13, 10, 47, 13, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}, {'comment_id': 688957244, 'comment_body': 'The value of the name field is empty in edit page.', 'comment_created': datetime.datetime(2021, 8, 14, 16, 21, tzinfo=datetime.timezone.utc), 'commenter': 'atb00ker', 'type': 'User'}, {'comment_id': 688959462, 'comment_body': ""When the device doesn't have a location, there is no indication of error.\r\nWhich is okay, but here in the docs, I think we should indicate the fact that user needs to check if location is null on their end, else it will be missed edge case ! :smile:\r\n\r\nWhat do you think?"", 'comment_created': datetime.datetime(2021, 8, 14, 16, 24, 29, tzinfo=datetime.timezone.utc), 'commenter': 'atb00ker', 'type': 'User'}, {'comment_id': 688969585, 'comment_body': ""Haa, Yes @atb00ker all the fields except the geometry, will be empty, because we have hindred the representation of it, which changes the hierarchy to which the values are mapped with fields. This is a problem with this module  https://github.com/openwisp/django-rest-framework-gis I have mentioned it in the summary. This can be of future work, I triedmy best to fix it, but couldn't I think i will have to understand the `django-rest-framework-gis` module to fix it. :thinking: "", 'comment_created': datetime.datetime(2021, 8, 14, 17, 4, 14, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}, {'comment_id': 688969673, 'comment_body': 'Sure, Will update it in the docs.', 'comment_created': datetime.datetime(2021, 8, 14, 17, 5, 3, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}, {'comment_id': 688971636, 'comment_body': ""For this reason I haven't used this class in locaiton endpoint serializer. so awating a reply here:- https://github.com/openwisp/openwisp-controller/pull/494#discussion_r688421609"", 'comment_created': datetime.datetime(2021, 8, 14, 17, 25, 59, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}, {'comment_id': 688975660, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 8, 14, 18, 8, 13, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}, {'comment_id': 689143799, 'comment_body': ""There has been a misunderstanding here.\r\n\r\nThis is not what I meant. I meant the API should work normally as all other endpoints do, using `SessionAuthentication` and `TokenAuthentication` and in addition the key can be used as well to maintain backward compatibility (because this endpoint can be used by devices to update their position).\r\n\r\nI think we have two options:\r\n\r\n- if doable, we can convert this class into a [DRF authentication class (see the provided link for more info)](https://github.com/encode/django-rest-framework/blob/master/rest_framework/authentication.py), but I am not sure we have access to the object in the authentication class, if we do, we can go this route\r\n- alternatively we can add a new authentication class which just checks for the presence of `request.query_params.get('key')`, then in this class, we should change it so that we enforce the key to be correct only if the request comes from an unauthenticated user\r\n\r\nHowever, we also need permissions to be consistent, with the key a request can access the API no matter what, but an authenticated user must have the required django permissions set and the APi must respect multi-tenancy (users should only be able to access items related to their organization), which doesn't seem to be the case here, so with the current implementation any authenticated user would be able to edit any location."", 'comment_created': datetime.datetime(2021, 8, 15, 21, 10, 33, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 689145398, 'comment_body': ""I do not know how you made this work but I couldn't, anyway, it's not important, this is not the right path, see my previous comment."", 'comment_created': datetime.datetime(2021, 8, 15, 21, 26, 10, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 689145491, 'comment_body': ""there's no reason to allow the device to change the floorplan coordinates because these coordinates are not GPS so there's no way to do it automatically, we should not document this endpoint in this way."", 'comment_created': datetime.datetime(2021, 8, 15, 21, 27, 24, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 689145744, 'comment_body': ""These endpoints should be accessible in 2 ways (either one or the other):\r\n\r\n- as all the other endpoints (token or session), when this happens permissions and multi-tenancy shall be respected\r\n- device key, we can assume the device itself it's updating its position so we do not have to check multi-tenancy or permissions\r\n\r\nPlease document it as described above, I also suggest to make a subheading for this explanation and link to it from all the device location endpoints."", 'comment_created': datetime.datetime(2021, 8, 15, 21, 29, 33, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 689145765, 'comment_body': 'same here', 'comment_created': datetime.datetime(2021, 8, 15, 21, 29, 40, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 689145865, 'comment_body': 'Also here I would not document this endpoint showing the key example.', 'comment_created': datetime.datetime(2021, 8, 15, 21, 30, 31, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 689986992, 'comment_body': ""@nemesisdesign What we want can be done in this way, this is a working solution:- I am changing the permission dynamically based on authentication of a user, have a look\r\n``` python\r\nclass DevicePermission(BasePermission):\r\n    def has_object_permission(self, request, view, obj):\r\n        if request.query_params.get('key'):\r\n            received_key = request.query_params.get('key')\r\n            try:\r\n                device_key = obj.key\r\n            except AttributeError:\r\n                device_key = obj.device.key\r\n            return received_key == device_key\r\n        else:\r\n            return False\r\n\r\nclass DeviceLocationView(\r\n    FilterByOrganizationManaged, generics.RetrieveUpdateDestroyAPIView\r\n):\r\n    serializer_class = DeviceLocationSerializer\r\n    authentication_classes = [\r\n        BearerAuthentication,\r\n        SessionAuthentication,\r\n        TokenAuthentication,\r\n    ]\r\n    permission_classes = [IsAuthenticated, DjangoModelPermissions]\r\n    queryset = Device.objects.select_related(\r\n        'devicelocation', 'devicelocation__location'\r\n    )\r\n\r\n    def get_organization_queryset(self, qs):\r\n        # Overriding this method because the class\r\n        # `FilterByOrganizationManaged` tries to\r\n        # filter object for non-authenticated users.\r\n        if self.request.user.is_authenticated and not self.request.query_params.get('key'):\r\n            return qs.filter(**{self.organization_lookup: getattr(self.request.user, self._user_attr)})\r\n        return qs\r\n\r\n    def get_permissions(self):\r\n        if not self.request.user.is_authenticated:\r\n            self.permission_classes.clear()\r\n            self.permission_classes.append(DevicePermission)\r\n        else:\r\n            if 'key=' in self.request.META.get('QUERY_STRING'):\r\n                self.permission_classes.clear()\r\n                self.permission_classes.append(DevicePermission)\r\n        return [perm() for perm in self.permission_classes]\r\n```\r\n"", 'comment_created': datetime.datetime(2021, 8, 17, 2, 25, 31, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}, {'comment_id': 690385774, 'comment_body': 'I am also trying to implement it by `CustomAuthentication` class', 'comment_created': datetime.datetime(2021, 8, 17, 13, 44, 54, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}, {'comment_id': 691724048, 'comment_body': 'Done, Have added it', 'comment_created': datetime.datetime(2021, 8, 19, 2, 10, 17, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}, {'comment_id': 849579575, 'comment_body': 'Two slant quotes are needed for highlighting as code.', 'comment_created': datetime.datetime(2022, 4, 13, 14, 51, 29, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 849580693, 'comment_body': '```suggestion\r\nExample for changing the floorplan data of a location:\r\n```', 'comment_created': datetime.datetime(2022, 4, 13, 14, 52, 29, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 849581687, 'comment_body': '```suggestion\r\n  happens permissions and multi-tenancy are respected.\r\n```', 'comment_created': datetime.datetime(2022, 4, 13, 14, 53, 21, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 849582058, 'comment_body': '```suggestion\r\n* When the device key is passed as ``query_param``, the system assumes\r\n```', 'comment_created': datetime.datetime(2022, 4, 13, 14, 53, 39, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 849582981, 'comment_body': '```suggestion\r\n  that the device itself is updating its position, so multitenancy and permission checks are skipped.\r\n```', 'comment_created': datetime.datetime(2022, 4, 13, 14, 54, 29, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 849583697, 'comment_body': 'can you provide an example here of how a device should update its coordinates please?', 'comment_created': datetime.datetime(2022, 4, 13, 14, 55, 2, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 849585717, 'comment_body': ""```suggestion\r\n**Note**: to access this endpoint, `see here <#the-device-location-endpoints-can-be-accesseed-in-two-ways>`_\r\n```\r\n\r\nPay attention, the internal anchor doesn't seem to work, are you sure it works?\r\n\r\nLooking at the generated HTML, it seems to me this would work: `#user-content-the-device-location-endpoints-can-be-accessed-in-two-ways`."", 'comment_created': datetime.datetime(2022, 4, 13, 14, 56, 39, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 849586097, 'comment_body': 'same here as the previous comment', 'comment_created': datetime.datetime(2022, 4, 13, 14, 56, 57, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 849586196, 'comment_body': 'same here as the previous comment', 'comment_created': datetime.datetime(2022, 4, 13, 14, 57, 2, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 853296273, 'comment_body': ""Something weird in the device location endpoint:\r\n\r\n![Screenshot from 2022-04-19 12-55-28](https://user-images.githubusercontent.com/841044/164056040-80a351ca-f13b-47e2-936c-debf53985c07.png)\r\n\r\nThere's 2 forms! I think it's because we're allowing: PUT, PATCH and POST, can't we only allow PUT to create, PUT to change and PATCH only? \r\nPOST makes sense when a new resource is added to a list of resources, but here we don't have a list.\r\nSee also [PUT as create in the DRF docs](https://www.django-rest-framework.org/api-guide/generic-views/#put-as-create).\r\n\r\nAlternatively we can keep also POST to create, but is there any way to hide that duplicated form?"", 'comment_created': datetime.datetime(2022, 4, 19, 16, 58, 5, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 853303032, 'comment_body': ""why aren't you using GeoJSON in the examples?\r\nWe could mention that also WKT coordinates are accepted but the examples should be in GeoJSON for consistency with the output we generate, we can't generate output in GeoJSON but use WKT in our docs, that's inconsistent. This applies to all other occurrences of coordinates."", 'comment_created': datetime.datetime(2022, 4, 19, 17, 6, 7, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 853329390, 'comment_body': 'The response I see here looks like the following:\r\n\r\n```javascript\r\n{\r\n// ...\r\n    ""floorplan"": [\r\n        {\r\n            ""floor"": -1,\r\n            ""image"": ""http://localhost:8000/media/floorplans/a4655bad-411d-43d9-a76d-e9a695ad8f84.png""\r\n        }\r\n    ]\r\n}\r\n```\r\n\r\nIt\'s too stripped down, I think we need to add the id and the created/modified time, because the floorplan can be edited separately via their own API endpoints and if the users don\'t know the ID they will have a hard time doing this. The created/modified date can be useful to know if the floorplan have been modified or created at a later point in time.', 'comment_created': datetime.datetime(2022, 4, 19, 17, 38, 34, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 853333874, 'comment_body': 'Can you please add the possibility to filter by organization?\r\n\r\nPay attention, it seems that in the geojson endpoint we already have a filter that allows filtering by organization slug, I think we should be consistent and do the same.', 'comment_created': datetime.datetime(2022, 4, 19, 17, 44, 13, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 853334065, 'comment_body': 'Can you please add the possibility to filter by organization, type and is_mobile as in the admin?\r\n\r\nPay attention, it seems that in the geojson endpoint we already have a filter that allows filtering by organization slug, I think we should be consistent and do the same.', 'comment_created': datetime.datetime(2022, 4, 19, 17, 44, 28, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 853342427, 'comment_body': '```suggestion\r\n):\r\n    """"""\r\n    Shows only locations which are assigned to devices.\r\n    """"""\r\n```\r\n\r\nI got puzzled while reviewing this point on why the number of locations shown was different than /location/, and the reason is explained in this docstring which will be shown in the browsable UI.', 'comment_created': datetime.datetime(2022, 4, 19, 17, 54, 1, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 853343152, 'comment_body': ""Also here we should mention that only locations which have been assigned to devices will be shown.\r\nThe title kind of says it but it's not explicit enough."", 'comment_created': datetime.datetime(2022, 4, 19, 17, 54, 55, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 853350008, 'comment_body': 'let\'s clarify that the value in `indoor` represents the coordinates of the point placed on the image from respectively the top and left corners, a more realistic value is: `""indoor"": ""-279.21875,442""`, that\'s a value I get if I test setting a point via the UI.', 'comment_created': datetime.datetime(2022, 4, 19, 18, 3, 4, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 853352480, 'comment_body': 'The example is missing the authorization header.', 'comment_created': datetime.datetime(2022, 4, 19, 18, 6, 7, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 853352578, 'comment_body': 'The example is missing the authorization header.', 'comment_created': datetime.datetime(2022, 4, 19, 18, 6, 14, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 853352696, 'comment_body': 'The example is missing the authorization header.', 'comment_created': datetime.datetime(2022, 4, 19, 18, 6, 23, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 853352807, 'comment_body': 'The example is missing the authorization header.', 'comment_created': datetime.datetime(2022, 4, 19, 18, 6, 31, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 853353006, 'comment_body': 'The example is missing the authorization header.', 'comment_created': datetime.datetime(2022, 4, 19, 18, 6, 47, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 853366030, 'comment_body': 'Is it mentioned anywhere in this endpoint that it can be used to update/change too?', 'comment_created': datetime.datetime(2022, 4, 19, 18, 23, 27, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 853366600, 'comment_body': ""let's remember that if we remove the possibility of using POST and allow PUT to create, we will have to update these examples accordingly"", 'comment_created': datetime.datetime(2022, 4, 19, 18, 24, 15, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 853366712, 'comment_body': 'I see that in the documentation of ""Patch details of device"", the `http` command line program is used in the examples, while here `curl` examples are being added.\r\nConsistency is broken and it\'s not right.\r\nI don\'t mind using curl since it\'s quite an universal tool.\r\n\r\nI see that also in openwisp-users `http` is being used, but it\'s only 1 example and we could update that as well: https://github.com/openwisp/openwisp-users#authenticating-with-the-user-token.\r\n\r\nWhat do you think, should we change the curl examples to http or the opposite?', 'comment_created': datetime.datetime(2022, 4, 19, 18, 24, 23, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 853372268, 'comment_body': '> What do you think, should we change the curl examples to http or the opposite?\r\n\r\n\r\nI forgot to ask you whether to update the existing examples to `cURL`. I think more developers are familiar with cURL than `http`. I will update the existing examples to use cURL. ', 'comment_created': datetime.datetime(2022, 4, 19, 18, 31, 25, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 853373800, 'comment_body': 'i intentionally removed the authorization header from the examples since it is not directly related to the information conveyed by the example. i will add them back in all the examples. ', 'comment_created': datetime.datetime(2022, 4, 19, 18, 33, 24, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 854116008, 'comment_body': 'I have updated all examples to use `cURL`.', 'comment_created': datetime.datetime(2022, 4, 20, 13, 11, 47, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 854118256, 'comment_body': 'Do you mean this? \r\nhttps://github.com/openwisp/openwisp-controller/tree/rest-api-for-geo-app#change-details-of-device-location', 'comment_created': datetime.datetime(2022, 4, 20, 13, 13, 59, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 854463570, 'comment_body': '```suggestion\r\n**Note**: this endpoint will only list locations that have been assigned to a device. \r\n```', 'comment_created': datetime.datetime(2022, 4, 20, 19, 0, 54, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 854464871, 'comment_body': 'Looks like the filters for `type` and `is_mobile` are missing.', 'comment_created': datetime.datetime(2022, 4, 20, 19, 1, 49, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 854466260, 'comment_body': ""Thanks for adding it back, I believe it's good to have complete examples so that users can copy/paste them and edit them to do what they need to do."", 'comment_created': datetime.datetime(2022, 4, 20, 19, 3, 17, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}]","[{'commit_sha': 'a079dcda028c2ff01f7e83a9e34f282c821402f0', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b6eac23f1b60852bb78c90c2d092dec69dda85a4', 'committer_username': 'pandafy', 'committer_name': 'Gagan Deep', 'committer_email': 'pandafy.dev@gmail.com', 'commit_date': datetime.datetime(2017, 9, 19, 9, 57, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '12b687b71d3400e86a4582a9477c324b18087f12', 'committer_username': 'pandafy', 'committer_name': 'Gagan Deep', 'committer_email': 'pandafy.dev@gmail.com', 'commit_date': datetime.datetime(2017, 9, 19, 9, 57, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f675a934271c321aae7d886d40ae67421b0daa4c', 'committer_username': 'pandafy', 'committer_name': 'Gagan Deep', 'committer_email': 'pandafy.dev@gmail.com', 'commit_date': datetime.datetime(2017, 9, 19, 9, 57, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f240811d6179cf24fc28b69ee23e71078614b28e', 'committer_username': 'pandafy', 'committer_name': 'Gagan Deep', 'committer_email': 'pandafy.dev@gmail.com', 'commit_date': datetime.datetime(2017, 9, 19, 9, 57, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '95b36940ab61dc977076a70594d95295b21edc81', 'committer_username': 'pandafy', 'committer_name': 'Gagan Deep', 'committer_email': 'pandafy.dev@gmail.com', 'commit_date': datetime.datetime(2017, 9, 19, 9, 57, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6f2131f6f9fea8b660bb83cab05ab90561dfb4d9', 'committer_username': 'pandafy', 'committer_name': 'Gagan Deep', 'committer_email': 'pandafy.dev@gmail.com', 'commit_date': datetime.datetime(2017, 9, 19, 9, 57, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7510b93a1c71d3719b11bd53b34aa6ecb90a097a', 'committer_username': 'pandafy', 'committer_name': 'Gagan Deep', 'committer_email': 'pandafy.dev@gmail.com', 'commit_date': datetime.datetime(2017, 9, 19, 9, 57, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '676503e5ea8f56fa5fd19f8b5fc2062c79344836', 'committer_username': 'pandafy', 'committer_name': 'Gagan Deep', 'committer_email': 'pandafy.dev@gmail.com', 'commit_date': datetime.datetime(2017, 9, 19, 9, 57, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1cf19915bda486dc5c7112e5977cdab4188119bd', 'committer_username': 'pandafy', 'committer_name': 'Gagan Deep', 'committer_email': 'pandafy.dev@gmail.com', 'commit_date': datetime.datetime(2017, 9, 19, 9, 57, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e28e11ebf9dba03c75f24b1452f8464a404295f2', 'committer_username': 'pandafy', 'committer_name': 'Gagan Deep', 'committer_email': 'pandafy.dev@gmail.com', 'commit_date': datetime.datetime(2017, 9, 19, 9, 57, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '70bc30ea4d70b58826ca257c42a5912f86a2a5db', 'committer_username': 'pandafy', 'committer_name': 'Gagan Deep', 'committer_email': 'pandafy.dev@gmail.com', 'commit_date': datetime.datetime(2017, 9, 19, 9, 57, 26, tzinfo=datetime.timezone.utc)}]",Manish Kumar Shah,45564404,,User,,57,,169,155
672320036,[api] REST API for the models of GEO App #463,Closes #463,True,494,https://api.github.com/repos/openwisp/openwisp-controller/pulls/494,https://github.com/openwisp/openwisp-controller/pull/494,closed,1608,65,7,12,7,61,0,1,[],2021-06-17 07:25:09+00:00,2022-04-20 19:31:08+00:00,26568359.0,"307 days, 12:05:59","[{'comment_id': 654820309, 'comment_body': '| SN | api/v1/geo/floorplan/                                 | Status | Details |\r\n|:--:|-------------------------------------------------------|:------:|:-------:|\r\n|  1 | [SU][O1A][O1O] Can view only appropriate floorplans   |  Pass  |         |\r\n|  2 | [SU][O1A][O1O] Can create only appropriate floorplans |  Pass  |         |\r\n|  3 | [SU][O1A] All errors reported together                |  Pass  |         |\r\n|  4 | [SU] Unique template name ensured                     |  Pass  |         |', 'comment_created': datetime.datetime(2021, 6, 19, 17, 29, 19, tzinfo=datetime.timezone.utc), 'commenter': 'atb00ker', 'type': 'User'}, {'comment_id': 654821704, 'comment_body': '| SN | api/v1/geo/floorplan/str:pk/                        | Status | Details |\r\n|:--:|-----------------------------------------------------|:------:|:-------:|\r\n|  1 | [SU][O1A][O1O] Can view only appropriate floorplans |  Pass  |         |\r\n|  2 | [SU][O1A][O1O] Can edit only appropriate floorplans |  Pass  |         |\r\n|  3 | [SU][O1A] Correct data is shown                     |  Pass  |         |\r\n|  4 | [SU][01A] Can delete only appropriate data          |  Pass  |         |', 'comment_created': datetime.datetime(2021, 6, 19, 17, 44, 11, tzinfo=datetime.timezone.utc), 'commenter': 'atb00ker', 'type': 'User'}, {'comment_id': 654823670, 'comment_body': '| SN | api/v1/geo/location/                                 | Status |                                   Details                                   |\r\n|:--:|------------------------------------------------------|:------:|:---------------------------------------------------------------------------:|\r\n|  1 | [SU][O1A][O1O] Can view only appropriate locations   |  Pass  |                                                                             |\r\n|  2 | [SU][O1A][O1O] Can create only appropriate locations |  Pass  |                                                                             |\r\n|  3 | [SU][O1A] All errors reported together               |  Fail  | If title and geometry are missing, geometry is reported when title is fixed |\r\n', 'comment_created': datetime.datetime(2021, 6, 19, 18, 5, 43, tzinfo=datetime.timezone.utc), 'commenter': 'atb00ker', 'type': 'User'}, {'comment_id': 654823889, 'comment_body': '| SN | api/v1/geo/location/<str:pk>/                       | Status | Details |\r\n|:--:|-----------------------------------------------------|:------:|:-------:|\r\n|  1 | [SU][O1A][O1O] Can view only appropriate floorplans |  Pass  |         |\r\n|  2 | [SU][O1A][O1O] Can edit only appropriate floorplans |  Pass  |         |\r\n|  3 | [SU][O1A] Correct data is shown                     |  Pass  |         |\r\n|  4 | [SU][01A] Can delete only appropriate data          |  Pass  |         |', 'comment_created': datetime.datetime(2021, 6, 19, 18, 7, 57, tzinfo=datetime.timezone.utc), 'commenter': 'atb00ker', 'type': 'User'}, {'comment_id': 654825164, 'comment_body': '| SN | api/geo/devicelocation/                               | Status |                                                      Details                                                     |\r\n|:--:|-------------------------------------------------------|:------:|:----------------------------------------------------------------------------------------------------------------:|\r\n|  1 | [SU][O1A][O1O] Can view only appropriate floorplans   |  Pass  |                                                                                                                  |\r\n|  2 | [SU][O1A][O1O] Can create only appropriate floorplans |  Pass  |                                                                                                                  |\r\n|  3 | [SU][O1A] All errors reported together                |  Fail  | Submitting empty form: {""content_object"":[""This field must be unique.""]} without informing which field has error |\r\n', 'comment_created': datetime.datetime(2021, 6, 19, 18, 20, 44, tzinfo=datetime.timezone.utc), 'commenter': 'atb00ker', 'type': 'User'}, {'comment_id': 654825378, 'comment_body': '| SN | api/v1/geo/location/str:pk/                              | Status | Details |\r\n|:--:|----------------------------------------------------------|:------:|:-------:|\r\n|  1 | [SU][O1A][O1O] Can view only appropriate devicelocations |  Pass  |         |\r\n|  2 | [SU][O1A][O1O] Can edit only appropriate devicelocations |  Pass  |         |\r\n|  3 | [SU][O1A] Correct data is shown                          |  Pass  |         |\r\n|  4 | [SU][01A] Can delete only appropriate data               |  Pass  |         |', 'comment_created': datetime.datetime(2021, 6, 19, 18, 22, 42, tzinfo=datetime.timezone.utc), 'commenter': 'atb00ker', 'type': 'User'}, {'comment_id': 663385788, 'comment_body': ""- inital slash missing\r\n- URL should be: `/api/v1/controller/device/{pk}/location/`\r\n\r\nIt's the location of a device, a resource of another resource. We already have a resource URL for device, so we must follow the pattern if we want this API to be really RESTful.\r\n\r\nOpenWISP Users should have mixins that can help you to implement this parent thing: https://github.com/openwisp/openwisp-users/#checking-parent-objects"", 'comment_created': datetime.datetime(2021, 7, 3, 16, 55, 8, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 663385953, 'comment_body': ""same concept here as in the connection PR: let's use `controller` as prefix (for consistency, otherwise we should rename `/controller` to `/config`, but really esposing this kind of internal code structure to API users is not useful at all for users) and do not forget the initial slash.\r\n\r\n`/api/v1/controller/floorplan/`\r\n\r\nApplies to all other endpoints."", 'comment_created': datetime.datetime(2021, 7, 3, 16, 56, 51, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 665474330, 'comment_body': ""@nemesisdesign with this pattern `/api/v1/controller/device/{pk}/location/` an endpoint is already present. should I edit it's view to make it for CRUD oerations."", 'comment_created': datetime.datetime(2021, 7, 7, 15, 20, 21, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}, {'comment_id': 665529225, 'comment_body': 'yes, definitely, right now we should have only GET, right? You can add support for PUT/PATCH and DELETE.\r\nProbably not POST because there can be only one device location per device.', 'comment_created': datetime.datetime(2021, 7, 7, 16, 27, 9, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 681882793, 'comment_body': 'as already explained, this should be:\r\n\r\n`/api/v1/controller/device/{id}/location/`\r\n\r\nwe have to improve this view:\r\n\r\nhttps://github.com/openwisp/openwisp-controller/blob/master/openwisp_controller/geo/api/views.py#L32-L65\r\n\r\nediting the data should keep working with the current way, adding/deleting/editing can be done also with the user token.', 'comment_created': datetime.datetime(2021, 8, 3, 15, 43, 13, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 682626896, 'comment_body': 'please check the length of `^^^` .', 'comment_created': datetime.datetime(2021, 8, 4, 13, 41, 6, tzinfo=datetime.timezone.utc), 'commenter': 'atb00ker', 'type': 'User'}, {'comment_id': 686605388, 'comment_body': 'this has been achieved.', 'comment_created': datetime.datetime(2021, 8, 11, 8, 16, 34, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}, {'comment_id': 688421609, 'comment_body': ""Here I haven't use the `gis_serializers.GeoFeatureModelSerializer`, to keep the representation as it is. Using this serializer class the representation is hindered resulting in not loading the appropriate field in HTML form fields in the DRF Browsable Page, Should I add it?, or it is ok."", 'comment_created': datetime.datetime(2021, 8, 13, 10, 47, 13, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}, {'comment_id': 688957244, 'comment_body': 'The value of the name field is empty in edit page.', 'comment_created': datetime.datetime(2021, 8, 14, 16, 21, tzinfo=datetime.timezone.utc), 'commenter': 'atb00ker', 'type': 'User'}, {'comment_id': 688959462, 'comment_body': ""When the device doesn't have a location, there is no indication of error.\r\nWhich is okay, but here in the docs, I think we should indicate the fact that user needs to check if location is null on their end, else it will be missed edge case ! :smile:\r\n\r\nWhat do you think?"", 'comment_created': datetime.datetime(2021, 8, 14, 16, 24, 29, tzinfo=datetime.timezone.utc), 'commenter': 'atb00ker', 'type': 'User'}, {'comment_id': 688969585, 'comment_body': ""Haa, Yes @atb00ker all the fields except the geometry, will be empty, because we have hindred the representation of it, which changes the hierarchy to which the values are mapped with fields. This is a problem with this module  https://github.com/openwisp/django-rest-framework-gis I have mentioned it in the summary. This can be of future work, I triedmy best to fix it, but couldn't I think i will have to understand the `django-rest-framework-gis` module to fix it. :thinking: "", 'comment_created': datetime.datetime(2021, 8, 14, 17, 4, 14, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}, {'comment_id': 688969673, 'comment_body': 'Sure, Will update it in the docs.', 'comment_created': datetime.datetime(2021, 8, 14, 17, 5, 3, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}, {'comment_id': 688971636, 'comment_body': ""For this reason I haven't used this class in locaiton endpoint serializer. so awating a reply here:- https://github.com/openwisp/openwisp-controller/pull/494#discussion_r688421609"", 'comment_created': datetime.datetime(2021, 8, 14, 17, 25, 59, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}, {'comment_id': 688975660, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 8, 14, 18, 8, 13, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}, {'comment_id': 689143799, 'comment_body': ""There has been a misunderstanding here.\r\n\r\nThis is not what I meant. I meant the API should work normally as all other endpoints do, using `SessionAuthentication` and `TokenAuthentication` and in addition the key can be used as well to maintain backward compatibility (because this endpoint can be used by devices to update their position).\r\n\r\nI think we have two options:\r\n\r\n- if doable, we can convert this class into a [DRF authentication class (see the provided link for more info)](https://github.com/encode/django-rest-framework/blob/master/rest_framework/authentication.py), but I am not sure we have access to the object in the authentication class, if we do, we can go this route\r\n- alternatively we can add a new authentication class which just checks for the presence of `request.query_params.get('key')`, then in this class, we should change it so that we enforce the key to be correct only if the request comes from an unauthenticated user\r\n\r\nHowever, we also need permissions to be consistent, with the key a request can access the API no matter what, but an authenticated user must have the required django permissions set and the APi must respect multi-tenancy (users should only be able to access items related to their organization), which doesn't seem to be the case here, so with the current implementation any authenticated user would be able to edit any location."", 'comment_created': datetime.datetime(2021, 8, 15, 21, 10, 33, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 689145398, 'comment_body': ""I do not know how you made this work but I couldn't, anyway, it's not important, this is not the right path, see my previous comment."", 'comment_created': datetime.datetime(2021, 8, 15, 21, 26, 10, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 689145491, 'comment_body': ""there's no reason to allow the device to change the floorplan coordinates because these coordinates are not GPS so there's no way to do it automatically, we should not document this endpoint in this way."", 'comment_created': datetime.datetime(2021, 8, 15, 21, 27, 24, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 689145744, 'comment_body': ""These endpoints should be accessible in 2 ways (either one or the other):\r\n\r\n- as all the other endpoints (token or session), when this happens permissions and multi-tenancy shall be respected\r\n- device key, we can assume the device itself it's updating its position so we do not have to check multi-tenancy or permissions\r\n\r\nPlease document it as described above, I also suggest to make a subheading for this explanation and link to it from all the device location endpoints."", 'comment_created': datetime.datetime(2021, 8, 15, 21, 29, 33, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 689145765, 'comment_body': 'same here', 'comment_created': datetime.datetime(2021, 8, 15, 21, 29, 40, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 689145865, 'comment_body': 'Also here I would not document this endpoint showing the key example.', 'comment_created': datetime.datetime(2021, 8, 15, 21, 30, 31, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 689986992, 'comment_body': ""@nemesisdesign What we want can be done in this way, this is a working solution:- I am changing the permission dynamically based on authentication of a user, have a look\r\n``` python\r\nclass DevicePermission(BasePermission):\r\n    def has_object_permission(self, request, view, obj):\r\n        if request.query_params.get('key'):\r\n            received_key = request.query_params.get('key')\r\n            try:\r\n                device_key = obj.key\r\n            except AttributeError:\r\n                device_key = obj.device.key\r\n            return received_key == device_key\r\n        else:\r\n            return False\r\n\r\nclass DeviceLocationView(\r\n    FilterByOrganizationManaged, generics.RetrieveUpdateDestroyAPIView\r\n):\r\n    serializer_class = DeviceLocationSerializer\r\n    authentication_classes = [\r\n        BearerAuthentication,\r\n        SessionAuthentication,\r\n        TokenAuthentication,\r\n    ]\r\n    permission_classes = [IsAuthenticated, DjangoModelPermissions]\r\n    queryset = Device.objects.select_related(\r\n        'devicelocation', 'devicelocation__location'\r\n    )\r\n\r\n    def get_organization_queryset(self, qs):\r\n        # Overriding this method because the class\r\n        # `FilterByOrganizationManaged` tries to\r\n        # filter object for non-authenticated users.\r\n        if self.request.user.is_authenticated and not self.request.query_params.get('key'):\r\n            return qs.filter(**{self.organization_lookup: getattr(self.request.user, self._user_attr)})\r\n        return qs\r\n\r\n    def get_permissions(self):\r\n        if not self.request.user.is_authenticated:\r\n            self.permission_classes.clear()\r\n            self.permission_classes.append(DevicePermission)\r\n        else:\r\n            if 'key=' in self.request.META.get('QUERY_STRING'):\r\n                self.permission_classes.clear()\r\n                self.permission_classes.append(DevicePermission)\r\n        return [perm() for perm in self.permission_classes]\r\n```\r\n"", 'comment_created': datetime.datetime(2021, 8, 17, 2, 25, 31, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}, {'comment_id': 690385774, 'comment_body': 'I am also trying to implement it by `CustomAuthentication` class', 'comment_created': datetime.datetime(2021, 8, 17, 13, 44, 54, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}, {'comment_id': 691724048, 'comment_body': 'Done, Have added it', 'comment_created': datetime.datetime(2021, 8, 19, 2, 10, 17, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}, {'comment_id': 849579575, 'comment_body': 'Two slant quotes are needed for highlighting as code.', 'comment_created': datetime.datetime(2022, 4, 13, 14, 51, 29, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 849580693, 'comment_body': '```suggestion\r\nExample for changing the floorplan data of a location:\r\n```', 'comment_created': datetime.datetime(2022, 4, 13, 14, 52, 29, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 849581687, 'comment_body': '```suggestion\r\n  happens permissions and multi-tenancy are respected.\r\n```', 'comment_created': datetime.datetime(2022, 4, 13, 14, 53, 21, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 849582058, 'comment_body': '```suggestion\r\n* When the device key is passed as ``query_param``, the system assumes\r\n```', 'comment_created': datetime.datetime(2022, 4, 13, 14, 53, 39, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 849582981, 'comment_body': '```suggestion\r\n  that the device itself is updating its position, so multitenancy and permission checks are skipped.\r\n```', 'comment_created': datetime.datetime(2022, 4, 13, 14, 54, 29, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 849583697, 'comment_body': 'can you provide an example here of how a device should update its coordinates please?', 'comment_created': datetime.datetime(2022, 4, 13, 14, 55, 2, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 849585717, 'comment_body': ""```suggestion\r\n**Note**: to access this endpoint, `see here <#the-device-location-endpoints-can-be-accesseed-in-two-ways>`_\r\n```\r\n\r\nPay attention, the internal anchor doesn't seem to work, are you sure it works?\r\n\r\nLooking at the generated HTML, it seems to me this would work: `#user-content-the-device-location-endpoints-can-be-accessed-in-two-ways`."", 'comment_created': datetime.datetime(2022, 4, 13, 14, 56, 39, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 849586097, 'comment_body': 'same here as the previous comment', 'comment_created': datetime.datetime(2022, 4, 13, 14, 56, 57, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 849586196, 'comment_body': 'same here as the previous comment', 'comment_created': datetime.datetime(2022, 4, 13, 14, 57, 2, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 853296273, 'comment_body': ""Something weird in the device location endpoint:\r\n\r\n![Screenshot from 2022-04-19 12-55-28](https://user-images.githubusercontent.com/841044/164056040-80a351ca-f13b-47e2-936c-debf53985c07.png)\r\n\r\nThere's 2 forms! I think it's because we're allowing: PUT, PATCH and POST, can't we only allow PUT to create, PUT to change and PATCH only? \r\nPOST makes sense when a new resource is added to a list of resources, but here we don't have a list.\r\nSee also [PUT as create in the DRF docs](https://www.django-rest-framework.org/api-guide/generic-views/#put-as-create).\r\n\r\nAlternatively we can keep also POST to create, but is there any way to hide that duplicated form?"", 'comment_created': datetime.datetime(2022, 4, 19, 16, 58, 5, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 853303032, 'comment_body': ""why aren't you using GeoJSON in the examples?\r\nWe could mention that also WKT coordinates are accepted but the examples should be in GeoJSON for consistency with the output we generate, we can't generate output in GeoJSON but use WKT in our docs, that's inconsistent. This applies to all other occurrences of coordinates."", 'comment_created': datetime.datetime(2022, 4, 19, 17, 6, 7, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 853329390, 'comment_body': 'The response I see here looks like the following:\r\n\r\n```javascript\r\n{\r\n// ...\r\n    ""floorplan"": [\r\n        {\r\n            ""floor"": -1,\r\n            ""image"": ""http://localhost:8000/media/floorplans/a4655bad-411d-43d9-a76d-e9a695ad8f84.png""\r\n        }\r\n    ]\r\n}\r\n```\r\n\r\nIt\'s too stripped down, I think we need to add the id and the created/modified time, because the floorplan can be edited separately via their own API endpoints and if the users don\'t know the ID they will have a hard time doing this. The created/modified date can be useful to know if the floorplan have been modified or created at a later point in time.', 'comment_created': datetime.datetime(2022, 4, 19, 17, 38, 34, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 853333874, 'comment_body': 'Can you please add the possibility to filter by organization?\r\n\r\nPay attention, it seems that in the geojson endpoint we already have a filter that allows filtering by organization slug, I think we should be consistent and do the same.', 'comment_created': datetime.datetime(2022, 4, 19, 17, 44, 13, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 853334065, 'comment_body': 'Can you please add the possibility to filter by organization, type and is_mobile as in the admin?\r\n\r\nPay attention, it seems that in the geojson endpoint we already have a filter that allows filtering by organization slug, I think we should be consistent and do the same.', 'comment_created': datetime.datetime(2022, 4, 19, 17, 44, 28, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 853342427, 'comment_body': '```suggestion\r\n):\r\n    """"""\r\n    Shows only locations which are assigned to devices.\r\n    """"""\r\n```\r\n\r\nI got puzzled while reviewing this point on why the number of locations shown was different than /location/, and the reason is explained in this docstring which will be shown in the browsable UI.', 'comment_created': datetime.datetime(2022, 4, 19, 17, 54, 1, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 853343152, 'comment_body': ""Also here we should mention that only locations which have been assigned to devices will be shown.\r\nThe title kind of says it but it's not explicit enough."", 'comment_created': datetime.datetime(2022, 4, 19, 17, 54, 55, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 853350008, 'comment_body': 'let\'s clarify that the value in `indoor` represents the coordinates of the point placed on the image from respectively the top and left corners, a more realistic value is: `""indoor"": ""-279.21875,442""`, that\'s a value I get if I test setting a point via the UI.', 'comment_created': datetime.datetime(2022, 4, 19, 18, 3, 4, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 853352480, 'comment_body': 'The example is missing the authorization header.', 'comment_created': datetime.datetime(2022, 4, 19, 18, 6, 7, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 853352578, 'comment_body': 'The example is missing the authorization header.', 'comment_created': datetime.datetime(2022, 4, 19, 18, 6, 14, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 853352696, 'comment_body': 'The example is missing the authorization header.', 'comment_created': datetime.datetime(2022, 4, 19, 18, 6, 23, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 853352807, 'comment_body': 'The example is missing the authorization header.', 'comment_created': datetime.datetime(2022, 4, 19, 18, 6, 31, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 853353006, 'comment_body': 'The example is missing the authorization header.', 'comment_created': datetime.datetime(2022, 4, 19, 18, 6, 47, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 853366030, 'comment_body': 'Is it mentioned anywhere in this endpoint that it can be used to update/change too?', 'comment_created': datetime.datetime(2022, 4, 19, 18, 23, 27, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 853366600, 'comment_body': ""let's remember that if we remove the possibility of using POST and allow PUT to create, we will have to update these examples accordingly"", 'comment_created': datetime.datetime(2022, 4, 19, 18, 24, 15, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 853366712, 'comment_body': 'I see that in the documentation of ""Patch details of device"", the `http` command line program is used in the examples, while here `curl` examples are being added.\r\nConsistency is broken and it\'s not right.\r\nI don\'t mind using curl since it\'s quite an universal tool.\r\n\r\nI see that also in openwisp-users `http` is being used, but it\'s only 1 example and we could update that as well: https://github.com/openwisp/openwisp-users#authenticating-with-the-user-token.\r\n\r\nWhat do you think, should we change the curl examples to http or the opposite?', 'comment_created': datetime.datetime(2022, 4, 19, 18, 24, 23, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 853372268, 'comment_body': '> What do you think, should we change the curl examples to http or the opposite?\r\n\r\n\r\nI forgot to ask you whether to update the existing examples to `cURL`. I think more developers are familiar with cURL than `http`. I will update the existing examples to use cURL. ', 'comment_created': datetime.datetime(2022, 4, 19, 18, 31, 25, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 853373800, 'comment_body': 'i intentionally removed the authorization header from the examples since it is not directly related to the information conveyed by the example. i will add them back in all the examples. ', 'comment_created': datetime.datetime(2022, 4, 19, 18, 33, 24, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 854116008, 'comment_body': 'I have updated all examples to use `cURL`.', 'comment_created': datetime.datetime(2022, 4, 20, 13, 11, 47, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 854118256, 'comment_body': 'Do you mean this? \r\nhttps://github.com/openwisp/openwisp-controller/tree/rest-api-for-geo-app#change-details-of-device-location', 'comment_created': datetime.datetime(2022, 4, 20, 13, 13, 59, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 854463570, 'comment_body': '```suggestion\r\n**Note**: this endpoint will only list locations that have been assigned to a device. \r\n```', 'comment_created': datetime.datetime(2022, 4, 20, 19, 0, 54, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 854464871, 'comment_body': 'Looks like the filters for `type` and `is_mobile` are missing.', 'comment_created': datetime.datetime(2022, 4, 20, 19, 1, 49, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 854466260, 'comment_body': ""Thanks for adding it back, I believe it's good to have complete examples so that users can copy/paste them and edit them to do what they need to do."", 'comment_created': datetime.datetime(2022, 4, 20, 19, 3, 17, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}]","[{'commit_sha': 'a079dcda028c2ff01f7e83a9e34f282c821402f0', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b6eac23f1b60852bb78c90c2d092dec69dda85a4', 'committer_username': 'pandafy', 'committer_name': 'Gagan Deep', 'committer_email': 'pandafy.dev@gmail.com', 'commit_date': datetime.datetime(2017, 9, 19, 9, 57, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '12b687b71d3400e86a4582a9477c324b18087f12', 'committer_username': 'pandafy', 'committer_name': 'Gagan Deep', 'committer_email': 'pandafy.dev@gmail.com', 'commit_date': datetime.datetime(2017, 9, 19, 9, 57, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f675a934271c321aae7d886d40ae67421b0daa4c', 'committer_username': 'pandafy', 'committer_name': 'Gagan Deep', 'committer_email': 'pandafy.dev@gmail.com', 'commit_date': datetime.datetime(2017, 9, 19, 9, 57, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f240811d6179cf24fc28b69ee23e71078614b28e', 'committer_username': 'pandafy', 'committer_name': 'Gagan Deep', 'committer_email': 'pandafy.dev@gmail.com', 'commit_date': datetime.datetime(2017, 9, 19, 9, 57, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '95b36940ab61dc977076a70594d95295b21edc81', 'committer_username': 'pandafy', 'committer_name': 'Gagan Deep', 'committer_email': 'pandafy.dev@gmail.com', 'commit_date': datetime.datetime(2017, 9, 19, 9, 57, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6f2131f6f9fea8b660bb83cab05ab90561dfb4d9', 'committer_username': 'pandafy', 'committer_name': 'Gagan Deep', 'committer_email': 'pandafy.dev@gmail.com', 'commit_date': datetime.datetime(2017, 9, 19, 9, 57, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7510b93a1c71d3719b11bd53b34aa6ecb90a097a', 'committer_username': 'pandafy', 'committer_name': 'Gagan Deep', 'committer_email': 'pandafy.dev@gmail.com', 'commit_date': datetime.datetime(2017, 9, 19, 9, 57, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '676503e5ea8f56fa5fd19f8b5fc2062c79344836', 'committer_username': 'pandafy', 'committer_name': 'Gagan Deep', 'committer_email': 'pandafy.dev@gmail.com', 'commit_date': datetime.datetime(2017, 9, 19, 9, 57, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1cf19915bda486dc5c7112e5977cdab4188119bd', 'committer_username': 'pandafy', 'committer_name': 'Gagan Deep', 'committer_email': 'pandafy.dev@gmail.com', 'commit_date': datetime.datetime(2017, 9, 19, 9, 57, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e28e11ebf9dba03c75f24b1452f8464a404295f2', 'committer_username': 'pandafy', 'committer_name': 'Gagan Deep', 'committer_email': 'pandafy.dev@gmail.com', 'commit_date': datetime.datetime(2017, 9, 19, 9, 57, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '70bc30ea4d70b58826ca257c42a5912f86a2a5db', 'committer_username': 'pandafy', 'committer_name': 'Gagan Deep', 'committer_email': 'pandafy.dev@gmail.com', 'commit_date': datetime.datetime(2017, 9, 19, 9, 57, 26, tzinfo=datetime.timezone.utc)}]",Manish Kumar Shah,45564404,,User,,57,,169,155
691517289,[api!] REST API for `openwisp-network-topology` module #109,closes #109 ,True,113,https://api.github.com/repos/openwisp/openwisp-network-topology/pulls/113,https://github.com/openwisp/openwisp-network-topology/pull/113,closed,1071,58,8,37,4,55,0,1,[],2021-07-16 14:05:32+00:00,2022-04-04 17:55:19+00:00,22650587.0,"262 days, 3:49:47","[{'comment_id': 688046296, 'comment_body': '`get_links_queryset` and `get_nodes_queryset` ensure uniqueness? :smile:', 'comment_created': datetime.datetime(2021, 8, 12, 20, 2, 34, tzinfo=datetime.timezone.utc), 'commenter': 'atb00ker', 'type': 'User'}, {'comment_id': 688048566, 'comment_body': ""Users may want to configure this.\r\nAlso, do we need to set`page_size_query_param`, isn't `page_size` the default? (just asking, it's okay here!)"", 'comment_created': datetime.datetime(2021, 8, 12, 20, 6, 37, tzinfo=datetime.timezone.utc), 'commenter': 'atb00ker', 'type': 'User'}, {'comment_id': 688049755, 'comment_body': 'Somethings are confusing, why do we not need published filter now?', 'comment_created': datetime.datetime(2021, 8, 12, 20, 8, 38, tzinfo=datetime.timezone.utc), 'commenter': 'atb00ker', 'type': 'User'}, {'comment_id': 688052611, 'comment_body': ""Doesn't this bring changes to UI has well, changing the behavior of the UI to show unpublished ones as well. (If I am undetstanding the change views.py correctly!)"", 'comment_created': datetime.datetime(2021, 8, 12, 20, 13, 23, tzinfo=datetime.timezone.utc), 'commenter': 'atb00ker', 'type': 'User'}, {'comment_id': 688212796, 'comment_body': ""@atb00ker I tried commenting it, but didn't found it by default."", 'comment_created': datetime.datetime(2021, 8, 13, 3, 6, 46, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}, {'comment_id': 688222028, 'comment_body': 'no, see here https://github.com/openwisp/openwisp-network-topology/blob/655309239650e33d32d3301398f0b64b2c631b21/openwisp_network_topology/base/topology.py#L142-L146', 'comment_created': datetime.datetime(2021, 8, 13, 3, 39, 55, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}, {'comment_id': 688226685, 'comment_body': 'I tried to keep it like the admin panel. If not required should I undo it??', 'comment_created': datetime.datetime(2021, 8, 13, 3, 57, 23, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}, {'comment_id': 688686103, 'comment_body': '1. All errors are not reported together. If label and Url are missing, the user will get the information one at a time.\r\n2. we should create a new key incase if the key is not send in the body of the create request or we should give an error saying ""please send a key"".\r\nSince the key autogenerated in the UI, I think we should generate and send back the key, what do you think? @nemesisdesign @ManishShah120 @okraits .\r\n3. I can put Url value for receive strategy and it doesn\'t complain.\r\n4. I can give `key` to fetch strategy, it doesn\'t store it but also doesn\'t complain.\r\n4. receive strategy\'s receive Url is not visible in API, check the UI:\r\n![ss1](https://user-images.githubusercontent.com/24985760/129401498-b4de6f0e-4654-4f33-87e1-588ba9ede004.png)\r\n\r\n ```\r\n{\r\n    ""type"": ""NetworkGraph"",\r\n    ""protocol"": """",\r\n    ""version"": """",\r\n    ""metric"": """",\r\n    ""label"": ""Test#2"",\r\n    ""id"": ""cf9ea559-367f-4ebc-93fd-ee68c1c74edf"",\r\n    ""parser"": ""netdiff.NetJsonParser"",\r\n    ""organization"": ""05c1e806-39d7-40d2-8d0e-c04ffad5f639"",\r\n    ""strategy"": ""receive"",\r\n    ""key"": ""123123"",\r\n    ""expiration_time"": 0,\r\n    ""published"": true,\r\n    ""created"": ""2021-08-13T17:28:54.720742Z"",\r\n    ""modified"": ""2021-08-13T18:06:53.091785Z"",\r\n    ""nodes"": [],\r\n    ""links"": []\r\n}\r\n```', 'comment_created': datetime.datetime(2021, 8, 13, 17, 52, 47, tzinfo=datetime.timezone.utc), 'commenter': 'atb00ker', 'type': 'User'}, {'comment_id': 688712880, 'comment_body': ""Haven't managed to check this yet."", 'comment_created': datetime.datetime(2021, 8, 13, 18, 42, 39, tzinfo=datetime.timezone.utc), 'commenter': 'atb00ker', 'type': 'User'}, {'comment_id': 688714449, 'comment_body': 'When I don\'t supply the key, it just says:\r\n```\r\n{\r\n    ""detail"": ""Not found.""\r\n}\r\n```\r\n\r\nWhile you and I can understand `key not found`; the user avg. wouldn\'t be able to make sense of it, so can we please add more detail? ', 'comment_created': datetime.datetime(2021, 8, 13, 18, 45, 56, tzinfo=datetime.timezone.utc), 'commenter': 'atb00ker', 'type': 'User'}, {'comment_id': 688714967, 'comment_body': '2. Provide the following as data to the endpoint, it will fail: https://pastebin.com/raw/EnRBaxYR', 'comment_created': datetime.datetime(2021, 8, 13, 18, 47, 1, tzinfo=datetime.timezone.utc), 'commenter': 'atb00ker', 'type': 'User'}, {'comment_id': 688715318, 'comment_body': '3. Can you please share an example how show how you checked it works?\r\ni.e what NetJSON did you use to test?', 'comment_created': datetime.datetime(2021, 8, 13, 18, 47, 43, tzinfo=datetime.timezone.utc), 'commenter': 'atb00ker', 'type': 'User'}, {'comment_id': 688717179, 'comment_body': 'Try providing 0, 0 or properties and user properties; it fails.', 'comment_created': datetime.datetime(2021, 8, 13, 18, 51, 16, tzinfo=datetime.timezone.utc), 'commenter': 'atb00ker', 'type': 'User'}, {'comment_id': 688723217, 'comment_body': 'Okay.', 'comment_created': datetime.datetime(2021, 8, 13, 19, 3, 4, tzinfo=datetime.timezone.utc), 'commenter': 'atb00ker', 'type': 'User'}, {'comment_id': 688723750, 'comment_body': ""Let's ask @nemesisdesign why there was publish filter only in API before, because of change management, we might not want to change it! :smile:"", 'comment_created': datetime.datetime(2021, 8, 13, 19, 4, 9, tzinfo=datetime.timezone.utc), 'commenter': 'atb00ker', 'type': 'User'}, {'comment_id': 688733457, 'comment_body': ""@atb00ker this endpoint was there from before, I have just chnaged it's pattern according to what we have discussed earlier, i.e., `Topology` is a resource and it belongs to the `topology` module, so `/api/v1/topology/topology/< -- >`"", 'comment_created': datetime.datetime(2021, 8, 13, 19, 23, 54, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}, {'comment_id': 688839431, 'comment_body': ""@atb00ker I haven't touched this, I just corrected the pattern according to the other endpoints. so this endpoint is there how it was before"", 'comment_created': datetime.datetime(2021, 8, 14, 0, 48, 48, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}, {'comment_id': 688840672, 'comment_body': ""> 5. receive strategy's receive Url is not visible in API, check the UI:\r\n\r\nFixed it. :+1:"", 'comment_created': datetime.datetime(2021, 8, 14, 0, 58, 48, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}, {'comment_id': 688856630, 'comment_body': ""> While you and I can understand key not found; the user avg. wouldn't be able to make sense of it, so can we please add more detail?\r\n\r\nOk, will do it."", 'comment_created': datetime.datetime(2021, 8, 14, 3, 34, 26, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}, {'comment_id': 688857389, 'comment_body': ""> 3. I can put Url value for receive strategy and it doesn't complain.\r\n\r\nYes, it is implemented in this way in the admin panel."", 'comment_created': datetime.datetime(2021, 8, 14, 3, 42, 23, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}, {'comment_id': 688865627, 'comment_body': '> 2. we should create a new key (in) if the key is not send in the body of the create request or we should give an error saying ""please send a key"". Since the key autogenerated in the UI, I think we should generate and send back the key, what do you think? @nemesisdesign @ManishShah120 @okraits .\r\n\r\nHi, This is how it is being implemented in the admin panel, i.e, if the strategy is `fetch`, with no key the topology can be created,(if the user wantes he can clear the auto generated key). So should I introduce a method, like if the field is empty , then key is auto generated, for both fetch and receive strategy.', 'comment_created': datetime.datetime(2021, 8, 14, 5, 13, 38, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}, {'comment_id': 688935227, 'comment_body': ""> Yes, it is implemented in this way in the admin panel.\r\n\r\nNo, in the UI, the URL is made to be read-only in receive strategy, please check it! :smile:\r\nYou can't enter value for it! :smile:\r\nFor API, if I try give it a value of URL in receive strategy, it should give an error.\r\n\r\n(low priority issue)"", 'comment_created': datetime.datetime(2021, 8, 14, 14, 12, 2, tzinfo=datetime.timezone.utc), 'commenter': 'atb00ker', 'type': 'User'}, {'comment_id': 688935295, 'comment_body': ""> Hi, This is how it is being implemented in the admin panel, i.e, if the strategy is fetch, with no key the topology can be created,(if the user wantes he can clear the auto generated key). So should I introduce a method, like if the field is empty , then key is auto generated, for both fetch and receive strategy.\r\n\r\nNo, you can't give it `key` value in Fetch mode, in the UI, input is hidden in API, it should complain if I forcefully try to provide it a value! :smile:\r\n\r\n(low priority issue)"", 'comment_created': datetime.datetime(2021, 8, 14, 14, 13, 3, tzinfo=datetime.timezone.utc), 'commenter': 'atb00ker', 'type': 'User'}, {'comment_id': 688941381, 'comment_body': ""> No, you can't give it key value in Fetch mode, in the UI, input is hidden in API, it should complain if I forcefully try to provide it a value! smile\r\n\r\nThe key is always present and saved.\r\n\r\n\r\n@atb00ker there are only one `URL` field present in the topology model, which is only used when the type is set to  `fetch`, the one which is shown when the type is `receive` doesn't come from the database.\r\n\r\nSee this:-\r\n![to_Show](https://user-images.githubusercontent.com/45564404/129450704-25dc8ce1-5333-48d9-987b-c0b047c7add9.gif)\r\n\r\nException is raised only in two case, \r\n - When `Key` is not provided with receive strategy.\r\n - when `url` is not provided with fetch strategy.\r\n(These two are handled in the API)"", 'comment_created': datetime.datetime(2021, 8, 14, 15, 13, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}, {'comment_id': 688976074, 'comment_body': ""> 1. Can you please share an example how show how you checked it works?\r\n>    i.e what NetJSON did you use to test?\r\n\r\nI haven't worked on this."", 'comment_created': datetime.datetime(2021, 8, 14, 18, 11, 35, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}, {'comment_id': 688976785, 'comment_body': 'Yes, It must be a valid JSON', 'comment_created': datetime.datetime(2021, 8, 14, 18, 19, 48, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}, {'comment_id': 692072225, 'comment_body': ""Okay, got it.\r\nA little odd behavior but it's not a hard blocker for sure! :smile:"", 'comment_created': datetime.datetime(2021, 8, 19, 12, 40, 48, tzinfo=datetime.timezone.utc), 'commenter': 'atb00ker', 'type': 'User'}, {'comment_id': 692080040, 'comment_body': ""Oops, my bad, I didn't explain properly, if I give it those values, it doesn't follow the expected behavior and I get the following:\r\n![ss1](https://user-images.githubusercontent.com/24985760/130071264-548c6d52-3580-4861-8677-6489a9508cd6.png)\r\n"", 'comment_created': datetime.datetime(2021, 8, 19, 12, 51, 14, tzinfo=datetime.timezone.utc), 'commenter': 'atb00ker', 'type': 'User'}, {'comment_id': 692139748, 'comment_body': '@atb00ker what we are doing here is not write I think, because, in the api it expects a value in json format, and i guess you passed `0` by removing the empty dict. so the error is raised by `full_clean` method,\r\n\r\nBut, in the admin panel it allows? because by default the data which is sent is sent as `{"""": 0}`, see this is a valid json. Try sending the 0 or 0, 0 as :- {"""": 0}, {"""": ""0,0""} this will work.\r\n\r\nIf I override this behaviour, then it will not respect JSON format.', 'comment_created': datetime.datetime(2021, 8, 19, 14, 1, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}, {'comment_id': 692147311, 'comment_body': 'so marking it as resolved, :smile: ', 'comment_created': datetime.datetime(2021, 8, 19, 14, 9, 32, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}, {'comment_id': 692168938, 'comment_body': 'Got your point. working on it', 'comment_created': datetime.datetime(2021, 8, 19, 14, 33, 5, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}, {'comment_id': 692332468, 'comment_body': 'Done ', 'comment_created': datetime.datetime(2021, 8, 19, 17, 14, 35, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}, {'comment_id': 692397220, 'comment_body': 'But, once we filter it out , we will not be able to republish it again with the endpoint', 'comment_created': datetime.datetime(2021, 8, 19, 18, 50, 26, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}, {'comment_id': 693341022, 'comment_body': 'Can we please have proper variable names, `topo_data` -> `topology_data`! :smile:', 'comment_created': datetime.datetime(2021, 8, 21, 11, 8, 40, tzinfo=datetime.timezone.utc), 'commenter': 'atb00ker', 'type': 'User'}, {'comment_id': 693341252, 'comment_body': 'So are we writing the first word of the messages in title case or not?\r\nI see title case below but not here!', 'comment_created': datetime.datetime(2021, 8, 21, 11, 10, 52, tzinfo=datetime.timezone.utc), 'commenter': 'atb00ker', 'type': 'User'}, {'comment_id': 693341270, 'comment_body': 'So are we writing the first word of the messages in title case or not?\r\nI see title case below but not here!', 'comment_created': datetime.datetime(2021, 8, 21, 11, 10, 56, tzinfo=datetime.timezone.utc), 'commenter': 'atb00ker', 'type': 'User'}, {'comment_id': 693634174, 'comment_body': 'Resolved.', 'comment_created': datetime.datetime(2021, 8, 23, 3, 50, 23, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}, {'comment_id': 693634253, 'comment_body': 'ok, did it.', 'comment_created': datetime.datetime(2021, 8, 23, 3, 50, 49, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}, {'comment_id': 693634320, 'comment_body': 'ok, Done :smile: ', 'comment_created': datetime.datetime(2021, 8, 23, 3, 51, 1, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}, {'comment_id': 836702735, 'comment_body': '@nemesisdesign ping! ', 'comment_created': datetime.datetime(2022, 3, 28, 17, 58, 50, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 837726363, 'comment_body': 'We are making large joins here. ', 'comment_created': datetime.datetime(2022, 3, 29, 17, 23, 52, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 837780435, 'comment_body': ""I don't see much better options right now."", 'comment_created': datetime.datetime(2022, 3, 29, 18, 23, 12, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 837784354, 'comment_body': ""Seems we'll have to flag this patch as a backward incompatible change, but it looks needed to achieve consistency."", 'comment_created': datetime.datetime(2022, 3, 29, 18, 28, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 837786121, 'comment_body': 'we should add a filter that allows this API to work as before, that is, if a topology is not published it shall not be shown, ', 'comment_created': datetime.datetime(2022, 3, 29, 18, 30, 12, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 837787326, 'comment_body': 'The ability of republishing via API makes sense.\r\nIf we allow to filter from the list only objects which are published, then frontend apps can use that filter and that way they should be able to hide the unpublished items without even retrieving them.', 'comment_created': datetime.datetime(2022, 3, 29, 18, 31, 34, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 838711814, 'comment_body': 'why removing this test class is the fix?', 'comment_created': datetime.datetime(2022, 3, 30, 15, 57, 2, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 838722244, 'comment_body': ""as the prefix for the API URLs, we're using the name of the module without `openwisp-`, so it should be:\r\n\r\n```/api/v1/network-topology/topology/```"", 'comment_created': datetime.datetime(2022, 3, 30, 16, 5, 41, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 838728477, 'comment_body': ""shouldn't a filter appear in the browsable API? I don't see any filter there.\r\nAlso, is this being documented? It doesn't look like it.\r\nSo at the moment this new feature is not discoverable nor documented, which will most likely mean nobody will even know it exists.\r\nTo maintain a bit of backward compatibility here, can we make sure that by default only published items are shown and then the user of the API can ovverride this behavior if needed?"", 'comment_created': datetime.datetime(2022, 3, 30, 16, 12, 7, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 838739297, 'comment_body': 'Ideally it should work as before, then we could add a filter like `?include_unpublished=true` or `?show_unpublished=true` which can include the unpublished objects.', 'comment_created': datetime.datetime(2022, 3, 30, 16, 24, 2, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 839690006, 'comment_body': ""This test class was removed from openwisp_network_topology.tests.test_api. There's only one test class exist in that file now. "", 'comment_created': datetime.datetime(2022, 3, 31, 14, 41, 4, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 839811448, 'comment_body': '`include_unpublished` is not implemented as a true filter using `django-filters`. Therefore, it does not appear in browsable API view. ', 'comment_created': datetime.datetime(2022, 3, 31, 16, 34, 33, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 839956378, 'comment_body': 'is this still necessary?', 'comment_created': datetime.datetime(2022, 3, 31, 19, 37, 34, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 839971673, 'comment_body': 'Also here it would be better to maintain this behavior and allow users of the API to show also unpublished items by adding the GET parameter.', 'comment_created': datetime.datetime(2022, 3, 31, 19, 59, 34, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 839976654, 'comment_body': ""let's use a subtest here"", 'comment_created': datetime.datetime(2022, 3, 31, 20, 6, 42, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 840958244, 'comment_body': 'Please mention the filters in the README with a short example, applies to all other added filters, eg:\r\n\r\nAvailable filters:\r\n\r\n- `topology`, eg: `?topology=<topology_ID>`\r\n- `status` eg: `?status=fetch`  ', 'comment_created': datetime.datetime(2022, 4, 1, 22, 42, 2, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}]","[{'commit_sha': '68b024cb9bb4ad79193fe6495f02039e9a810767', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3ea7d878b6233194786af7d2f16ed52bd0719841', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '463c4b8a9b477b0ea841db9e42b70816e4d5d2cc', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a0966cbaa4036aaaf5e5bfa7909221d089752b69', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8433154060d52c99f007a8544daffc00a921438d', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0ab2bc9267efaf7e0763198d024b2d0da705b77a', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '506a2d702180e01b7c9e4c7c72e3dddae51bd4f7', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '14c45d3f42515dbaafafa9d2d3a803ab0b9d6730', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a181ce91a675af8e7ddd508d791dbbae6d4f96b7', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8b54b100c4b249ed27dc04da9e3cad48703befa7', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4373d902c7a8b7c24adf50c1cc070f4951eacc2f', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7875dbcf17ce69c4b3896a0d22e1d1b2a8b1a610', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5e5ee30b8e7dff896b5925aedb2acdc22755318b', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c5320213bbf4101c8ee6dfbd0a7370d2bfca3433', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bf0630ac7edaa9d3485c855ebf3088181787ca47', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cee5fe1051896bd83250e633c152bcaa0e698cb5', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '76a22259cd9f85f29da6cdcaf99c4a1704eb5ead', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '454984dde160b41d1b808c90f7b260d7242b28df', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3364672ce8caed165af28da83cec3a45130b274a', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '83725f04af0565c609a8d62c6388c0e679aa46b4', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7d93c4b37c3db0f343664a83b86e5eb100ceaf31', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c721ae20e35c388d482d8dfb686871e48ad715e9', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ce2c86543c26fbd1f2328730204a811071d3bc9b', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9a429a382d4f6de27cd8b4c8d9e87ec202e96405', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '776460e9d24b39d41392cd85eb0ab41c0073b706', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3ceba0cc06116089aca05064e9c2c81cc4588612', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1411c4bdb61f91d353698e0e5e78ef3a986bb258', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3eac7bf8afcf1ea67bcb7af09ba54504f238fa8a', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1795ced1a4cc6015a46b95f9bcabb52e276b4ee2', 'committer_username': 'pandafy', 'committer_name': 'Gagan Deep', 'committer_email': 'pandafy.dev@gmail.com', 'commit_date': datetime.datetime(2017, 9, 19, 9, 57, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1f95eca8a457ca8bde984e6eda6131b75d2c0cac', 'committer_username': 'pandafy', 'committer_name': 'Gagan Deep', 'committer_email': 'pandafy.dev@gmail.com', 'commit_date': datetime.datetime(2017, 9, 19, 9, 57, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bdb48aa43c40afd955c5e9462bf9c7ccdd18c478', 'committer_username': 'pandafy', 'committer_name': 'Gagan Deep', 'committer_email': 'pandafy.dev@gmail.com', 'commit_date': datetime.datetime(2017, 9, 19, 9, 57, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e95243d7f8fc9d24b320e2554557c101b649af5d', 'committer_username': 'pandafy', 'committer_name': 'Gagan Deep', 'committer_email': 'pandafy.dev@gmail.com', 'commit_date': datetime.datetime(2017, 9, 19, 9, 57, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b0be9fddf3516c131c55aec41376d656e5052345', 'committer_username': 'pandafy', 'committer_name': 'Gagan Deep', 'committer_email': 'pandafy.dev@gmail.com', 'commit_date': datetime.datetime(2017, 9, 19, 9, 57, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6d4e41d467e133fac202697968c18fb91044eaf1', 'committer_username': 'pandafy', 'committer_name': 'Gagan Deep', 'committer_email': 'pandafy.dev@gmail.com', 'commit_date': datetime.datetime(2017, 9, 19, 9, 57, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c68cdafd7c2bd93d124b1601e87857b17636bee4', 'committer_username': 'pandafy', 'committer_name': 'Gagan Deep', 'committer_email': 'pandafy.dev@gmail.com', 'commit_date': datetime.datetime(2017, 9, 19, 9, 57, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0b7fd684cb5a46869e5af817813bae6e6227718e', 'committer_username': 'pandafy', 'committer_name': 'Gagan Deep', 'committer_email': 'pandafy.dev@gmail.com', 'commit_date': datetime.datetime(2017, 9, 19, 9, 57, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'caba4d66fb9ea8ccbc416a1a0e12f41d756d9603', 'committer_username': 'nemesifier', 'committer_name': 'Federico Capoano', 'committer_email': 'f.capoano@openwisp.io', 'commit_date': datetime.datetime(2011, 6, 9, 22, 30, 31, tzinfo=datetime.timezone.utc)}]",Manish Kumar Shah,45564404,,User,,57,,169,155
691517289,[api!] REST API for `openwisp-network-topology` module #109,closes #109 ,True,113,https://api.github.com/repos/openwisp/openwisp-network-topology/pulls/113,https://github.com/openwisp/openwisp-network-topology/pull/113,closed,1071,58,8,37,4,55,0,1,[],2021-07-16 14:05:32+00:00,2022-04-04 17:55:19+00:00,22650587.0,"262 days, 3:49:47","[{'comment_id': 688046296, 'comment_body': '`get_links_queryset` and `get_nodes_queryset` ensure uniqueness? :smile:', 'comment_created': datetime.datetime(2021, 8, 12, 20, 2, 34, tzinfo=datetime.timezone.utc), 'commenter': 'atb00ker', 'type': 'User'}, {'comment_id': 688048566, 'comment_body': ""Users may want to configure this.\r\nAlso, do we need to set`page_size_query_param`, isn't `page_size` the default? (just asking, it's okay here!)"", 'comment_created': datetime.datetime(2021, 8, 12, 20, 6, 37, tzinfo=datetime.timezone.utc), 'commenter': 'atb00ker', 'type': 'User'}, {'comment_id': 688049755, 'comment_body': 'Somethings are confusing, why do we not need published filter now?', 'comment_created': datetime.datetime(2021, 8, 12, 20, 8, 38, tzinfo=datetime.timezone.utc), 'commenter': 'atb00ker', 'type': 'User'}, {'comment_id': 688052611, 'comment_body': ""Doesn't this bring changes to UI has well, changing the behavior of the UI to show unpublished ones as well. (If I am undetstanding the change views.py correctly!)"", 'comment_created': datetime.datetime(2021, 8, 12, 20, 13, 23, tzinfo=datetime.timezone.utc), 'commenter': 'atb00ker', 'type': 'User'}, {'comment_id': 688212796, 'comment_body': ""@atb00ker I tried commenting it, but didn't found it by default."", 'comment_created': datetime.datetime(2021, 8, 13, 3, 6, 46, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}, {'comment_id': 688222028, 'comment_body': 'no, see here https://github.com/openwisp/openwisp-network-topology/blob/655309239650e33d32d3301398f0b64b2c631b21/openwisp_network_topology/base/topology.py#L142-L146', 'comment_created': datetime.datetime(2021, 8, 13, 3, 39, 55, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}, {'comment_id': 688226685, 'comment_body': 'I tried to keep it like the admin panel. If not required should I undo it??', 'comment_created': datetime.datetime(2021, 8, 13, 3, 57, 23, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}, {'comment_id': 688686103, 'comment_body': '1. All errors are not reported together. If label and Url are missing, the user will get the information one at a time.\r\n2. we should create a new key incase if the key is not send in the body of the create request or we should give an error saying ""please send a key"".\r\nSince the key autogenerated in the UI, I think we should generate and send back the key, what do you think? @nemesisdesign @ManishShah120 @okraits .\r\n3. I can put Url value for receive strategy and it doesn\'t complain.\r\n4. I can give `key` to fetch strategy, it doesn\'t store it but also doesn\'t complain.\r\n4. receive strategy\'s receive Url is not visible in API, check the UI:\r\n![ss1](https://user-images.githubusercontent.com/24985760/129401498-b4de6f0e-4654-4f33-87e1-588ba9ede004.png)\r\n\r\n ```\r\n{\r\n    ""type"": ""NetworkGraph"",\r\n    ""protocol"": """",\r\n    ""version"": """",\r\n    ""metric"": """",\r\n    ""label"": ""Test#2"",\r\n    ""id"": ""cf9ea559-367f-4ebc-93fd-ee68c1c74edf"",\r\n    ""parser"": ""netdiff.NetJsonParser"",\r\n    ""organization"": ""05c1e806-39d7-40d2-8d0e-c04ffad5f639"",\r\n    ""strategy"": ""receive"",\r\n    ""key"": ""123123"",\r\n    ""expiration_time"": 0,\r\n    ""published"": true,\r\n    ""created"": ""2021-08-13T17:28:54.720742Z"",\r\n    ""modified"": ""2021-08-13T18:06:53.091785Z"",\r\n    ""nodes"": [],\r\n    ""links"": []\r\n}\r\n```', 'comment_created': datetime.datetime(2021, 8, 13, 17, 52, 47, tzinfo=datetime.timezone.utc), 'commenter': 'atb00ker', 'type': 'User'}, {'comment_id': 688712880, 'comment_body': ""Haven't managed to check this yet."", 'comment_created': datetime.datetime(2021, 8, 13, 18, 42, 39, tzinfo=datetime.timezone.utc), 'commenter': 'atb00ker', 'type': 'User'}, {'comment_id': 688714449, 'comment_body': 'When I don\'t supply the key, it just says:\r\n```\r\n{\r\n    ""detail"": ""Not found.""\r\n}\r\n```\r\n\r\nWhile you and I can understand `key not found`; the user avg. wouldn\'t be able to make sense of it, so can we please add more detail? ', 'comment_created': datetime.datetime(2021, 8, 13, 18, 45, 56, tzinfo=datetime.timezone.utc), 'commenter': 'atb00ker', 'type': 'User'}, {'comment_id': 688714967, 'comment_body': '2. Provide the following as data to the endpoint, it will fail: https://pastebin.com/raw/EnRBaxYR', 'comment_created': datetime.datetime(2021, 8, 13, 18, 47, 1, tzinfo=datetime.timezone.utc), 'commenter': 'atb00ker', 'type': 'User'}, {'comment_id': 688715318, 'comment_body': '3. Can you please share an example how show how you checked it works?\r\ni.e what NetJSON did you use to test?', 'comment_created': datetime.datetime(2021, 8, 13, 18, 47, 43, tzinfo=datetime.timezone.utc), 'commenter': 'atb00ker', 'type': 'User'}, {'comment_id': 688717179, 'comment_body': 'Try providing 0, 0 or properties and user properties; it fails.', 'comment_created': datetime.datetime(2021, 8, 13, 18, 51, 16, tzinfo=datetime.timezone.utc), 'commenter': 'atb00ker', 'type': 'User'}, {'comment_id': 688723217, 'comment_body': 'Okay.', 'comment_created': datetime.datetime(2021, 8, 13, 19, 3, 4, tzinfo=datetime.timezone.utc), 'commenter': 'atb00ker', 'type': 'User'}, {'comment_id': 688723750, 'comment_body': ""Let's ask @nemesisdesign why there was publish filter only in API before, because of change management, we might not want to change it! :smile:"", 'comment_created': datetime.datetime(2021, 8, 13, 19, 4, 9, tzinfo=datetime.timezone.utc), 'commenter': 'atb00ker', 'type': 'User'}, {'comment_id': 688733457, 'comment_body': ""@atb00ker this endpoint was there from before, I have just chnaged it's pattern according to what we have discussed earlier, i.e., `Topology` is a resource and it belongs to the `topology` module, so `/api/v1/topology/topology/< -- >`"", 'comment_created': datetime.datetime(2021, 8, 13, 19, 23, 54, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}, {'comment_id': 688839431, 'comment_body': ""@atb00ker I haven't touched this, I just corrected the pattern according to the other endpoints. so this endpoint is there how it was before"", 'comment_created': datetime.datetime(2021, 8, 14, 0, 48, 48, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}, {'comment_id': 688840672, 'comment_body': ""> 5. receive strategy's receive Url is not visible in API, check the UI:\r\n\r\nFixed it. :+1:"", 'comment_created': datetime.datetime(2021, 8, 14, 0, 58, 48, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}, {'comment_id': 688856630, 'comment_body': ""> While you and I can understand key not found; the user avg. wouldn't be able to make sense of it, so can we please add more detail?\r\n\r\nOk, will do it."", 'comment_created': datetime.datetime(2021, 8, 14, 3, 34, 26, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}, {'comment_id': 688857389, 'comment_body': ""> 3. I can put Url value for receive strategy and it doesn't complain.\r\n\r\nYes, it is implemented in this way in the admin panel."", 'comment_created': datetime.datetime(2021, 8, 14, 3, 42, 23, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}, {'comment_id': 688865627, 'comment_body': '> 2. we should create a new key (in) if the key is not send in the body of the create request or we should give an error saying ""please send a key"". Since the key autogenerated in the UI, I think we should generate and send back the key, what do you think? @nemesisdesign @ManishShah120 @okraits .\r\n\r\nHi, This is how it is being implemented in the admin panel, i.e, if the strategy is `fetch`, with no key the topology can be created,(if the user wantes he can clear the auto generated key). So should I introduce a method, like if the field is empty , then key is auto generated, for both fetch and receive strategy.', 'comment_created': datetime.datetime(2021, 8, 14, 5, 13, 38, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}, {'comment_id': 688935227, 'comment_body': ""> Yes, it is implemented in this way in the admin panel.\r\n\r\nNo, in the UI, the URL is made to be read-only in receive strategy, please check it! :smile:\r\nYou can't enter value for it! :smile:\r\nFor API, if I try give it a value of URL in receive strategy, it should give an error.\r\n\r\n(low priority issue)"", 'comment_created': datetime.datetime(2021, 8, 14, 14, 12, 2, tzinfo=datetime.timezone.utc), 'commenter': 'atb00ker', 'type': 'User'}, {'comment_id': 688935295, 'comment_body': ""> Hi, This is how it is being implemented in the admin panel, i.e, if the strategy is fetch, with no key the topology can be created,(if the user wantes he can clear the auto generated key). So should I introduce a method, like if the field is empty , then key is auto generated, for both fetch and receive strategy.\r\n\r\nNo, you can't give it `key` value in Fetch mode, in the UI, input is hidden in API, it should complain if I forcefully try to provide it a value! :smile:\r\n\r\n(low priority issue)"", 'comment_created': datetime.datetime(2021, 8, 14, 14, 13, 3, tzinfo=datetime.timezone.utc), 'commenter': 'atb00ker', 'type': 'User'}, {'comment_id': 688941381, 'comment_body': ""> No, you can't give it key value in Fetch mode, in the UI, input is hidden in API, it should complain if I forcefully try to provide it a value! smile\r\n\r\nThe key is always present and saved.\r\n\r\n\r\n@atb00ker there are only one `URL` field present in the topology model, which is only used when the type is set to  `fetch`, the one which is shown when the type is `receive` doesn't come from the database.\r\n\r\nSee this:-\r\n![to_Show](https://user-images.githubusercontent.com/45564404/129450704-25dc8ce1-5333-48d9-987b-c0b047c7add9.gif)\r\n\r\nException is raised only in two case, \r\n - When `Key` is not provided with receive strategy.\r\n - when `url` is not provided with fetch strategy.\r\n(These two are handled in the API)"", 'comment_created': datetime.datetime(2021, 8, 14, 15, 13, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}, {'comment_id': 688976074, 'comment_body': ""> 1. Can you please share an example how show how you checked it works?\r\n>    i.e what NetJSON did you use to test?\r\n\r\nI haven't worked on this."", 'comment_created': datetime.datetime(2021, 8, 14, 18, 11, 35, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}, {'comment_id': 688976785, 'comment_body': 'Yes, It must be a valid JSON', 'comment_created': datetime.datetime(2021, 8, 14, 18, 19, 48, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}, {'comment_id': 692072225, 'comment_body': ""Okay, got it.\r\nA little odd behavior but it's not a hard blocker for sure! :smile:"", 'comment_created': datetime.datetime(2021, 8, 19, 12, 40, 48, tzinfo=datetime.timezone.utc), 'commenter': 'atb00ker', 'type': 'User'}, {'comment_id': 692080040, 'comment_body': ""Oops, my bad, I didn't explain properly, if I give it those values, it doesn't follow the expected behavior and I get the following:\r\n![ss1](https://user-images.githubusercontent.com/24985760/130071264-548c6d52-3580-4861-8677-6489a9508cd6.png)\r\n"", 'comment_created': datetime.datetime(2021, 8, 19, 12, 51, 14, tzinfo=datetime.timezone.utc), 'commenter': 'atb00ker', 'type': 'User'}, {'comment_id': 692139748, 'comment_body': '@atb00ker what we are doing here is not write I think, because, in the api it expects a value in json format, and i guess you passed `0` by removing the empty dict. so the error is raised by `full_clean` method,\r\n\r\nBut, in the admin panel it allows? because by default the data which is sent is sent as `{"""": 0}`, see this is a valid json. Try sending the 0 or 0, 0 as :- {"""": 0}, {"""": ""0,0""} this will work.\r\n\r\nIf I override this behaviour, then it will not respect JSON format.', 'comment_created': datetime.datetime(2021, 8, 19, 14, 1, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}, {'comment_id': 692147311, 'comment_body': 'so marking it as resolved, :smile: ', 'comment_created': datetime.datetime(2021, 8, 19, 14, 9, 32, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}, {'comment_id': 692168938, 'comment_body': 'Got your point. working on it', 'comment_created': datetime.datetime(2021, 8, 19, 14, 33, 5, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}, {'comment_id': 692332468, 'comment_body': 'Done ', 'comment_created': datetime.datetime(2021, 8, 19, 17, 14, 35, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}, {'comment_id': 692397220, 'comment_body': 'But, once we filter it out , we will not be able to republish it again with the endpoint', 'comment_created': datetime.datetime(2021, 8, 19, 18, 50, 26, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}, {'comment_id': 693341022, 'comment_body': 'Can we please have proper variable names, `topo_data` -> `topology_data`! :smile:', 'comment_created': datetime.datetime(2021, 8, 21, 11, 8, 40, tzinfo=datetime.timezone.utc), 'commenter': 'atb00ker', 'type': 'User'}, {'comment_id': 693341252, 'comment_body': 'So are we writing the first word of the messages in title case or not?\r\nI see title case below but not here!', 'comment_created': datetime.datetime(2021, 8, 21, 11, 10, 52, tzinfo=datetime.timezone.utc), 'commenter': 'atb00ker', 'type': 'User'}, {'comment_id': 693341270, 'comment_body': 'So are we writing the first word of the messages in title case or not?\r\nI see title case below but not here!', 'comment_created': datetime.datetime(2021, 8, 21, 11, 10, 56, tzinfo=datetime.timezone.utc), 'commenter': 'atb00ker', 'type': 'User'}, {'comment_id': 693634174, 'comment_body': 'Resolved.', 'comment_created': datetime.datetime(2021, 8, 23, 3, 50, 23, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}, {'comment_id': 693634253, 'comment_body': 'ok, did it.', 'comment_created': datetime.datetime(2021, 8, 23, 3, 50, 49, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}, {'comment_id': 693634320, 'comment_body': 'ok, Done :smile: ', 'comment_created': datetime.datetime(2021, 8, 23, 3, 51, 1, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}, {'comment_id': 836702735, 'comment_body': '@nemesisdesign ping! ', 'comment_created': datetime.datetime(2022, 3, 28, 17, 58, 50, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 837726363, 'comment_body': 'We are making large joins here. ', 'comment_created': datetime.datetime(2022, 3, 29, 17, 23, 52, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 837780435, 'comment_body': ""I don't see much better options right now."", 'comment_created': datetime.datetime(2022, 3, 29, 18, 23, 12, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 837784354, 'comment_body': ""Seems we'll have to flag this patch as a backward incompatible change, but it looks needed to achieve consistency."", 'comment_created': datetime.datetime(2022, 3, 29, 18, 28, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 837786121, 'comment_body': 'we should add a filter that allows this API to work as before, that is, if a topology is not published it shall not be shown, ', 'comment_created': datetime.datetime(2022, 3, 29, 18, 30, 12, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 837787326, 'comment_body': 'The ability of republishing via API makes sense.\r\nIf we allow to filter from the list only objects which are published, then frontend apps can use that filter and that way they should be able to hide the unpublished items without even retrieving them.', 'comment_created': datetime.datetime(2022, 3, 29, 18, 31, 34, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 838711814, 'comment_body': 'why removing this test class is the fix?', 'comment_created': datetime.datetime(2022, 3, 30, 15, 57, 2, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 838722244, 'comment_body': ""as the prefix for the API URLs, we're using the name of the module without `openwisp-`, so it should be:\r\n\r\n```/api/v1/network-topology/topology/```"", 'comment_created': datetime.datetime(2022, 3, 30, 16, 5, 41, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 838728477, 'comment_body': ""shouldn't a filter appear in the browsable API? I don't see any filter there.\r\nAlso, is this being documented? It doesn't look like it.\r\nSo at the moment this new feature is not discoverable nor documented, which will most likely mean nobody will even know it exists.\r\nTo maintain a bit of backward compatibility here, can we make sure that by default only published items are shown and then the user of the API can ovverride this behavior if needed?"", 'comment_created': datetime.datetime(2022, 3, 30, 16, 12, 7, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 838739297, 'comment_body': 'Ideally it should work as before, then we could add a filter like `?include_unpublished=true` or `?show_unpublished=true` which can include the unpublished objects.', 'comment_created': datetime.datetime(2022, 3, 30, 16, 24, 2, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 839690006, 'comment_body': ""This test class was removed from openwisp_network_topology.tests.test_api. There's only one test class exist in that file now. "", 'comment_created': datetime.datetime(2022, 3, 31, 14, 41, 4, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 839811448, 'comment_body': '`include_unpublished` is not implemented as a true filter using `django-filters`. Therefore, it does not appear in browsable API view. ', 'comment_created': datetime.datetime(2022, 3, 31, 16, 34, 33, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 839956378, 'comment_body': 'is this still necessary?', 'comment_created': datetime.datetime(2022, 3, 31, 19, 37, 34, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 839971673, 'comment_body': 'Also here it would be better to maintain this behavior and allow users of the API to show also unpublished items by adding the GET parameter.', 'comment_created': datetime.datetime(2022, 3, 31, 19, 59, 34, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 839976654, 'comment_body': ""let's use a subtest here"", 'comment_created': datetime.datetime(2022, 3, 31, 20, 6, 42, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 840958244, 'comment_body': 'Please mention the filters in the README with a short example, applies to all other added filters, eg:\r\n\r\nAvailable filters:\r\n\r\n- `topology`, eg: `?topology=<topology_ID>`\r\n- `status` eg: `?status=fetch`  ', 'comment_created': datetime.datetime(2022, 4, 1, 22, 42, 2, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}]","[{'commit_sha': '68b024cb9bb4ad79193fe6495f02039e9a810767', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3ea7d878b6233194786af7d2f16ed52bd0719841', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '463c4b8a9b477b0ea841db9e42b70816e4d5d2cc', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a0966cbaa4036aaaf5e5bfa7909221d089752b69', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8433154060d52c99f007a8544daffc00a921438d', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0ab2bc9267efaf7e0763198d024b2d0da705b77a', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '506a2d702180e01b7c9e4c7c72e3dddae51bd4f7', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '14c45d3f42515dbaafafa9d2d3a803ab0b9d6730', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a181ce91a675af8e7ddd508d791dbbae6d4f96b7', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8b54b100c4b249ed27dc04da9e3cad48703befa7', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4373d902c7a8b7c24adf50c1cc070f4951eacc2f', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7875dbcf17ce69c4b3896a0d22e1d1b2a8b1a610', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5e5ee30b8e7dff896b5925aedb2acdc22755318b', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c5320213bbf4101c8ee6dfbd0a7370d2bfca3433', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bf0630ac7edaa9d3485c855ebf3088181787ca47', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cee5fe1051896bd83250e633c152bcaa0e698cb5', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '76a22259cd9f85f29da6cdcaf99c4a1704eb5ead', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '454984dde160b41d1b808c90f7b260d7242b28df', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3364672ce8caed165af28da83cec3a45130b274a', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '83725f04af0565c609a8d62c6388c0e679aa46b4', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7d93c4b37c3db0f343664a83b86e5eb100ceaf31', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c721ae20e35c388d482d8dfb686871e48ad715e9', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ce2c86543c26fbd1f2328730204a811071d3bc9b', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9a429a382d4f6de27cd8b4c8d9e87ec202e96405', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '776460e9d24b39d41392cd85eb0ab41c0073b706', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3ceba0cc06116089aca05064e9c2c81cc4588612', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1411c4bdb61f91d353698e0e5e78ef3a986bb258', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3eac7bf8afcf1ea67bcb7af09ba54504f238fa8a', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1795ced1a4cc6015a46b95f9bcabb52e276b4ee2', 'committer_username': 'pandafy', 'committer_name': 'Gagan Deep', 'committer_email': 'pandafy.dev@gmail.com', 'commit_date': datetime.datetime(2017, 9, 19, 9, 57, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1f95eca8a457ca8bde984e6eda6131b75d2c0cac', 'committer_username': 'pandafy', 'committer_name': 'Gagan Deep', 'committer_email': 'pandafy.dev@gmail.com', 'commit_date': datetime.datetime(2017, 9, 19, 9, 57, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bdb48aa43c40afd955c5e9462bf9c7ccdd18c478', 'committer_username': 'pandafy', 'committer_name': 'Gagan Deep', 'committer_email': 'pandafy.dev@gmail.com', 'commit_date': datetime.datetime(2017, 9, 19, 9, 57, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e95243d7f8fc9d24b320e2554557c101b649af5d', 'committer_username': 'pandafy', 'committer_name': 'Gagan Deep', 'committer_email': 'pandafy.dev@gmail.com', 'commit_date': datetime.datetime(2017, 9, 19, 9, 57, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b0be9fddf3516c131c55aec41376d656e5052345', 'committer_username': 'pandafy', 'committer_name': 'Gagan Deep', 'committer_email': 'pandafy.dev@gmail.com', 'commit_date': datetime.datetime(2017, 9, 19, 9, 57, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6d4e41d467e133fac202697968c18fb91044eaf1', 'committer_username': 'pandafy', 'committer_name': 'Gagan Deep', 'committer_email': 'pandafy.dev@gmail.com', 'commit_date': datetime.datetime(2017, 9, 19, 9, 57, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c68cdafd7c2bd93d124b1601e87857b17636bee4', 'committer_username': 'pandafy', 'committer_name': 'Gagan Deep', 'committer_email': 'pandafy.dev@gmail.com', 'commit_date': datetime.datetime(2017, 9, 19, 9, 57, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0b7fd684cb5a46869e5af817813bae6e6227718e', 'committer_username': 'pandafy', 'committer_name': 'Gagan Deep', 'committer_email': 'pandafy.dev@gmail.com', 'commit_date': datetime.datetime(2017, 9, 19, 9, 57, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'caba4d66fb9ea8ccbc416a1a0e12f41d756d9603', 'committer_username': 'nemesifier', 'committer_name': 'Federico Capoano', 'committer_email': 'f.capoano@openwisp.io', 'commit_date': datetime.datetime(2011, 6, 9, 22, 30, 31, tzinfo=datetime.timezone.utc)}]",Manish Kumar Shah,45564404,,User,,57,,169,155
681803480,[api] Rest API for `openwisp-users` module #250,"Closes #250


**Tasks**:-
- [x] users to change and update permissions, groups, organization-users
- [x] An extra endpoint to manage email addresses of users
- [x] Endpoints to allow CRUD operations for organizations
- [x] Endpoints to allow CRUD operations for Groups model
- [x] Endpoints to alllow CRUD operations for EmailAddress model
- [x] Endpoint to change passwords",True,264,https://api.github.com/repos/openwisp/openwisp-users/pulls/264,https://github.com/openwisp/openwisp-users/pull/264,closed,1666,0,7,53,4,32,0,1,[],2021-07-01 12:16:46+00:00,2021-10-26 00:24:32+00:00,10066066.0,"116 days, 12:07:46","[{'comment_id': 670665434, 'comment_body': '@nemesisdesign , hey, what do you think about the endpoints `/user/organization/` and `/user/users`?\r\nI would personally prefer something other than that `/user/users`, but what would your advice be?\r\n\r\n', 'comment_created': datetime.datetime(2021, 7, 15, 17, 19, 9, tzinfo=datetime.timezone.utc), 'commenter': 'atb00ker', 'type': 'User'}, {'comment_id': 670669169, 'comment_body': 'Do we need a `distinct` here?', 'comment_created': datetime.datetime(2021, 7, 15, 17, 24, 42, tzinfo=datetime.timezone.utc), 'commenter': 'atb00ker', 'type': 'User'}, {'comment_id': 670682089, 'comment_body': 'in general we keep resource name in the singluar form, there are some exceptions but not in this case.\r\n\r\nIf we wanted to prefix the module, we should rather use users/ from openwisp-users.\r\n\r\nSo it could be: /users/user/, /users/organization/, /users/group/, etc.\r\n\r\nIf we want to keep consistency with what we are doing in the other modules, this is probably the best we can do, do you have any alterantive in mind?', 'comment_created': datetime.datetime(2021, 7, 15, 17, 44, 29, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 670686385, 'comment_body': 'perhaps `/iam/user` or `/identity/user`; `users/user`, the same word repeated just looks odd, but it works as well!', 'comment_created': datetime.datetime(2021, 7, 15, 17, 51, 2, tzinfo=datetime.timezone.utc), 'commenter': 'atb00ker', 'type': 'User'}, {'comment_id': 670691108, 'comment_body': ""iam and identity are two words we don't use at all"", 'comment_created': datetime.datetime(2021, 7, 15, 17, 58, 16, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 678680695, 'comment_body': 'In this case, the password is the resource, so `changepassword` > `password`.\r\nPlease spend some time in understanding the concept of ""resource"" in REST architecture so you can get the naming of things right.\r\n\r\nAn additional note, REST swaggers shows this endpoint is also available for GET and POST but that should not happen:\r\n\r\n![Screenshot from 2021-07-28 17-04-34](https://user-images.githubusercontent.com/841044/127402186-927bd121-4779-43c6-bd1a-edc4a1f619f6.png)\r\n', 'comment_created': datetime.datetime(2021, 7, 28, 21, 58, 37, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 678862568, 'comment_body': ""Hi, GET is allowed, because I am displaying the ID & Username of the user's whose password will be changed. If that is not required, I can remove it and allow PUT request only?"", 'comment_created': datetime.datetime(2021, 7, 29, 6, 29, 46, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}, {'comment_id': 679431752, 'comment_body': ""I think only PUT should be allowed here, it's the only one that it's really needed."", 'comment_created': datetime.datetime(2021, 7, 29, 19, 32, 54, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 684069447, 'comment_body': 'Hi, In some of the tests, I have not asserted the number of queries, because it was changing on different test commands, the tests were passing on some and failing on some.', 'comment_created': datetime.datetime(2021, 8, 6, 8, 52, 58, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}, {'comment_id': 684596215, 'comment_body': 'Things look orthodox, except this function would need some testing.\r\n@ManishShah120 I hope you have already done functional testing, as done before in other PRs! 😄 ', 'comment_created': datetime.datetime(2021, 8, 7, 7, 6, 23, tzinfo=datetime.timezone.utc), 'commenter': 'atb00ker', 'type': 'User'}, {'comment_id': 684752017, 'comment_body': '1. Create a new user with organizations value.\r\n2. Open the user with UUID in API UI, you\'ll notice while the value is present in json, form is empty:\r\n ```\r\n    ""organization_users"": [\r\n        {\r\n            ""is_admin"": true,\r\n            ""organization"": ""aa56750a-82f2-458a-badb-7d73aa84e49a""\r\n        }\r\n    ]\r\n ```\r\n![ss1](https://user-images.githubusercontent.com/24985760/128628859-38817281-624f-4059-af4c-2b5a350bf849.png)\r\n', 'comment_created': datetime.datetime(2021, 8, 8, 10, 28, 3, tzinfo=datetime.timezone.utc), 'commenter': 'atb00ker', 'type': 'User'}, {'comment_id': 684753474, 'comment_body': 'Create an org owner and try to downgrade it, not handled gracefully.\r\n![ss2](https://user-images.githubusercontent.com/24985760/128629199-1969de5e-8981-4b31-9208-86817808b03e.png)\r\n', 'comment_created': datetime.datetime(2021, 8, 8, 10, 39, 34, tzinfo=datetime.timezone.utc), 'commenter': 'atb00ker', 'type': 'User'}, {'comment_id': 684754021, 'comment_body': 'Should we return org name as well? Might be helpful as UUID might not make sense to show to the end user.\r\n![ss3](https://user-images.githubusercontent.com/24985760/128629290-d182a6bb-f3ba-42a3-8544-584ff07c2ce2.png)\r\n', 'comment_created': datetime.datetime(2021, 8, 8, 10, 44, 10, tzinfo=datetime.timezone.utc), 'commenter': 'atb00ker', 'type': 'User'}, {'comment_id': 684755653, 'comment_body': 'Org1admin cannot see organization user\'s section!\r\n![ss4](https://user-images.githubusercontent.com/24985760/128629655-c83296be-0a3f-46a8-bbc7-6d1a1d95d90c.png)\r\n\r\nWhile an org_users connection exists :\r\n```\r\n            ""organization_users"": [\r\n                {\r\n                    ""is_admin"": false,\r\n                    ""organization"": ""091dbab0-4188-4e83-a2e3-40853c9189f4""\r\n                }\r\n            ]\r\n```', 'comment_created': datetime.datetime(2021, 8, 8, 10, 57, 32, tzinfo=datetime.timezone.utc), 'commenter': 'atb00ker', 'type': 'User'}, {'comment_id': 684758407, 'comment_body': ""We are showing the hashed password, do we want to send it back like this @nemesisdesign @ManishShah120 ? I would assume we wouldn't share this in API even though the UI shows it; I don't know in which case sharing the password would be helpful! \r\n![ss4](https://user-images.githubusercontent.com/24985760/128630189-45244f94-cbe6-468d-bdaa-32135749ba49.png)\r\n"", 'comment_created': datetime.datetime(2021, 8, 8, 11, 18, 28, tzinfo=datetime.timezone.utc), 'commenter': 'atb00ker', 'type': 'User'}, {'comment_id': 684759438, 'comment_body': 'When I submit form without any information, it returns that I have entered wrong information.\r\nThis might be confusing when the consumer of the API has a typo or something, we should return, ""please enter old and new  passwords"".', 'comment_created': datetime.datetime(2021, 8, 8, 11, 26, 25, tzinfo=datetime.timezone.utc), 'commenter': 'atb00ker', 'type': 'User'}, {'comment_id': 684759773, 'comment_body': ""Shouldn't this be `users/group/<int:pk>/`, group ids are in integers."", 'comment_created': datetime.datetime(2021, 8, 8, 11, 28, 48, tzinfo=datetime.timezone.utc), 'commenter': 'atb00ker', 'type': 'User'}, {'comment_id': 685399095, 'comment_body': 'Fixed, :+1:', 'comment_created': datetime.datetime(2021, 8, 9, 17, 47, 57, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}, {'comment_id': 685399288, 'comment_body': 'Fixed, :+1:', 'comment_created': datetime.datetime(2021, 8, 9, 17, 48, 13, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}, {'comment_id': 686134074, 'comment_body': ""> Create a new user with organizations value.\r\n> Open the user with UUID in API UI, you'll notice while the value is present in json, form is empty:\r\n\r\nYes, @atb00ker, the form is present to add or remove org user(if the sent data is same then it will get removed else, the changes will be accomplished, this field would have been populated if there would be m2m relationship(eg. permission, groups), for example what would happen if the user is OrgUser of more than one Org?? :smile: \r\n\r\nIs there any other way I should do?"", 'comment_created': datetime.datetime(2021, 8, 10, 16, 27, 52, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}, {'comment_id': 686611809, 'comment_body': '> Org1admin cannot see organization user\'s section!\r\nss4\r\n\r\n> While an org_users connection exists :\r\n\r\n            ""organization_users"": [\r\n                {\r\n                    ""is_admin"": false,\r\n                    ""organization"": ""091dbab0-4188-4e83-a2e3-40853c9189f4""\r\n                }\r\n            ]\r\n\r\nYes, this is intentinal, the Org1admin, can only see the the org_users, present but cannot edit anything, so I removed this field for it.', 'comment_created': datetime.datetime(2021, 8, 11, 8, 24, 56, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}, {'comment_id': 686615381, 'comment_body': '> Create an org owner and try to downgrade it, not handled gracefully.\r\n\r\n@atb00ker This is already been handled by the `full_clean` method, so will it be not redundant to repeat this, in usecase/production, it will just return the error in normal way. I guess this is what we did in the config App!!!', 'comment_created': datetime.datetime(2021, 8, 11, 8, 29, 19, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}, {'comment_id': 688241491, 'comment_body': 'I have implemented this logic from here https://github.com/openwisp/openwisp-users/blob/master/openwisp_users/multitenancy.py#L99-L119', 'comment_created': datetime.datetime(2021, 8, 13, 4, 52, 48, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}, {'comment_id': 688739639, 'comment_body': '> @atb00ker This is already been handled by the full_clean method, so will it be not redundant to repeat this, in usecase/production, it will just return the error in normal way. I guess this is what we did in the config App!!!\r\n\r\nI belive the response should be graceful when possible. Unknown cases can happily return 500, but a known case should give error message and explain the message! 😄 ', 'comment_created': datetime.datetime(2021, 8, 13, 19, 37, 2, tzinfo=datetime.timezone.utc), 'commenter': 'atb00ker', 'type': 'User'}, {'comment_id': 688740976, 'comment_body': '> Yes, this is intentinal, the Org1admin, can only see the the org_users, present but cannot edit anything, so I removed this field for it.\r\n\r\nIf the user is not allowed to edit something, we should have it as readonly for consistency, what do you think? (Also, this can be lower priority)', 'comment_created': datetime.datetime(2021, 8, 13, 19, 39, 59, tzinfo=datetime.timezone.utc), 'commenter': 'atb00ker', 'type': 'User'}, {'comment_id': 692441277, 'comment_body': 'this looks outdated, please make sure the docs are up to date with the code. Every time you change the code you have to update the docs.', 'comment_created': datetime.datetime(2021, 8, 19, 19, 55, 45, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 705979266, 'comment_body': ""@ManishShah120 I think there must be a check that `new_password` or `confirm_password` can't be the same as `current_password`. What do you think?\r\n"", 'comment_created': datetime.datetime(2021, 9, 10, 8, 1, 23, tzinfo=datetime.timezone.utc), 'commenter': 'codesankalp', 'type': 'User'}, {'comment_id': 706052735, 'comment_body': 'If the code is trying to do something so similar at 2 places, why is it not shared? \r\ni.e creating a mixin to share the logic appropriately! :smile:', 'comment_created': datetime.datetime(2021, 9, 10, 9, 52, 47, tzinfo=datetime.timezone.utc), 'commenter': 'atb00ker', 'type': 'User'}, {'comment_id': 711642577, 'comment_body': ""> @ManishShah120 I think there must be a check that `new_password` or `confirm_password` can't be the same as `current_password`. What do you think?\r\n\r\nAgreed :+1:·"", 'comment_created': datetime.datetime(2021, 9, 18, 21, 21, 48, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 712921296, 'comment_body': 'Yes, will add this check ASAP, thnx @codesankalp for pointing this out. :+1:', 'comment_created': datetime.datetime(2021, 9, 21, 10, 49, 18, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}, {'comment_id': 712922665, 'comment_body': 'Sure, @atb00ker , I will  try to move this logic to a mixin. ASAP. :smile: ', 'comment_created': datetime.datetime(2021, 9, 21, 10, 51, 18, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}, {'comment_id': 715993785, 'comment_body': 'Done adding the check for same old and new password. :smile:', 'comment_created': datetime.datetime(2021, 9, 25, 5, 22, 52, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}]","[{'commit_sha': '5668003a662f3acb4323545b3509c04d9f58f689', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '847b2ea0b458af5b21ab4ad1b935fea4a84005c6', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8f77c2f9fbec48d7fce21466d10d94071032c9bc', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ca61c57b094fcfab482e71a044ecff1fa69fe75f', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd8281408aaa3109fcde31b994d00fc7bce03a374', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c236066ac2ea22f2109e455b543156a4ae749789', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '39e8b79988d1aabaeccc99afdab41078e44f03b9', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0388bf600bafed5c178b42073c3e2bbc96fe2504', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6af1383b904bce02f6e0944774adf8d81d0ffbea', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '63b353b1e5236b006738de954a8e018e002a4114', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dab6f8a586efb2b18294effdaea1408377d19a09', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd36f001978b301b3076bf1bb6651b4121d21f008', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e03010075d497707da55f421f538d46ed7835ad4', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c373732e58c673c13d95ae093f40cb6918a58ee5', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'db8cf7fe1145e4a5ace6ba38d74fc5bd8c2900fa', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ee4bfdfa8e515526a547763199f910b9bb345fdb', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '69512e3d292df605bbb34b82c2565758615e8cbe', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ffdb9be5ade7416514c39c51ddb0e4dab482f100', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f8cf19d3ce177a5cd70c14b6d08aa5ff8ae00454', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6aa3e5cf8f71996ba3a0c3d26a91d1d1dc1249e3', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ea48f48d4c143fcfbc2ff1311c222ea1a2823e43', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '17a6643d0ca64804e80ec25014c033794dd17368', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2ff7f01c35ea3a7d36d9a2dfd92534ed9b7bf41e', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9e98ed38f483de1c1a530790afcba401feebf824', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f6822bff2c5de1954d684e780a87d5b8fd920213', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '771de253a7eed5aa9cab58692aede4d8e8bed7fa', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '787ca0ba4f8d61bd35315912d10305152e49ac45', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fe474ebdb962ded9176f76c81c31d130b03fc9e0', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c3b1a864f6b20be3939605cce4de5f42acf74ab2', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8dcd58221246d82b6e518fff662c7ccce7febbff', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5fb31a4bdec11746ddd98ce87dff392e128500a6', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '95662841b2ad0c3db509b5d0af541f296001a21f', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '88015d6b80a7701c24133c78e2144428c24f83e8', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0357efd3d36c28a580b3d3dffd1ecb3ab3a74593', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '134c29bc9c8deb800f3eb5156f9a93abc650420a', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '28e04366e5deed35ac97a8e379b3ed61649975dd', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6d40f873b525e5c64eb72c171945fd22c38a76c5', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '936d530cb20ef7f09ac919cc91a297bf25a140f8', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6e43e0a1431e28da979bd9c45097f8756265c88d', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '15975f001c51d913a09ee0e48258c355f424d7b7', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4feed903f8567dd90028ca78e067be70ce6df270', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e1cc851eac0c9a95047b2c600da646e7ede137a6', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b223f75fc73df202e9204b50a9853fd4550f0401', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3900baa46bfab05576bcb5b92b668ea33a1e4421', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '95891396ba0a241c8d775ccc74dd9e68bc5b5c85', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5973c6b0375a4b388eb1222c936626f3475401d2', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f4fef6dddffc4b947db50191fb6392da5520d9cd', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bfab6d8b5ffe062f3d46b243d32533f08a5726ab', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0e21c56cd7e5071b05bbef9c2e753aebabdb1bf0', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'af4cddf49eb0fcd229fa9e2c9927590acfca612d', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ceba81d34c03e5ffee56c24e903858f98e3fea6e', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '668a8a02a01a80e01bf7dea5e633204a070ef85a', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '93a6711ca4039f92b709c21bd5318d3e6cef04f0', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}]",Manish Kumar Shah,45564404,,User,,57,,169,155
681803480,[api] Rest API for `openwisp-users` module #250,"Closes #250


**Tasks**:-
- [x] users to change and update permissions, groups, organization-users
- [x] An extra endpoint to manage email addresses of users
- [x] Endpoints to allow CRUD operations for organizations
- [x] Endpoints to allow CRUD operations for Groups model
- [x] Endpoints to alllow CRUD operations for EmailAddress model
- [x] Endpoint to change passwords",True,264,https://api.github.com/repos/openwisp/openwisp-users/pulls/264,https://github.com/openwisp/openwisp-users/pull/264,closed,1666,0,7,53,4,32,0,1,[],2021-07-01 12:16:46+00:00,2021-10-26 00:24:32+00:00,10066066.0,"116 days, 12:07:46","[{'comment_id': 670665434, 'comment_body': '@nemesisdesign , hey, what do you think about the endpoints `/user/organization/` and `/user/users`?\r\nI would personally prefer something other than that `/user/users`, but what would your advice be?\r\n\r\n', 'comment_created': datetime.datetime(2021, 7, 15, 17, 19, 9, tzinfo=datetime.timezone.utc), 'commenter': 'atb00ker', 'type': 'User'}, {'comment_id': 670669169, 'comment_body': 'Do we need a `distinct` here?', 'comment_created': datetime.datetime(2021, 7, 15, 17, 24, 42, tzinfo=datetime.timezone.utc), 'commenter': 'atb00ker', 'type': 'User'}, {'comment_id': 670682089, 'comment_body': 'in general we keep resource name in the singluar form, there are some exceptions but not in this case.\r\n\r\nIf we wanted to prefix the module, we should rather use users/ from openwisp-users.\r\n\r\nSo it could be: /users/user/, /users/organization/, /users/group/, etc.\r\n\r\nIf we want to keep consistency with what we are doing in the other modules, this is probably the best we can do, do you have any alterantive in mind?', 'comment_created': datetime.datetime(2021, 7, 15, 17, 44, 29, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 670686385, 'comment_body': 'perhaps `/iam/user` or `/identity/user`; `users/user`, the same word repeated just looks odd, but it works as well!', 'comment_created': datetime.datetime(2021, 7, 15, 17, 51, 2, tzinfo=datetime.timezone.utc), 'commenter': 'atb00ker', 'type': 'User'}, {'comment_id': 670691108, 'comment_body': ""iam and identity are two words we don't use at all"", 'comment_created': datetime.datetime(2021, 7, 15, 17, 58, 16, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 678680695, 'comment_body': 'In this case, the password is the resource, so `changepassword` > `password`.\r\nPlease spend some time in understanding the concept of ""resource"" in REST architecture so you can get the naming of things right.\r\n\r\nAn additional note, REST swaggers shows this endpoint is also available for GET and POST but that should not happen:\r\n\r\n![Screenshot from 2021-07-28 17-04-34](https://user-images.githubusercontent.com/841044/127402186-927bd121-4779-43c6-bd1a-edc4a1f619f6.png)\r\n', 'comment_created': datetime.datetime(2021, 7, 28, 21, 58, 37, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 678862568, 'comment_body': ""Hi, GET is allowed, because I am displaying the ID & Username of the user's whose password will be changed. If that is not required, I can remove it and allow PUT request only?"", 'comment_created': datetime.datetime(2021, 7, 29, 6, 29, 46, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}, {'comment_id': 679431752, 'comment_body': ""I think only PUT should be allowed here, it's the only one that it's really needed."", 'comment_created': datetime.datetime(2021, 7, 29, 19, 32, 54, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 684069447, 'comment_body': 'Hi, In some of the tests, I have not asserted the number of queries, because it was changing on different test commands, the tests were passing on some and failing on some.', 'comment_created': datetime.datetime(2021, 8, 6, 8, 52, 58, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}, {'comment_id': 684596215, 'comment_body': 'Things look orthodox, except this function would need some testing.\r\n@ManishShah120 I hope you have already done functional testing, as done before in other PRs! 😄 ', 'comment_created': datetime.datetime(2021, 8, 7, 7, 6, 23, tzinfo=datetime.timezone.utc), 'commenter': 'atb00ker', 'type': 'User'}, {'comment_id': 684752017, 'comment_body': '1. Create a new user with organizations value.\r\n2. Open the user with UUID in API UI, you\'ll notice while the value is present in json, form is empty:\r\n ```\r\n    ""organization_users"": [\r\n        {\r\n            ""is_admin"": true,\r\n            ""organization"": ""aa56750a-82f2-458a-badb-7d73aa84e49a""\r\n        }\r\n    ]\r\n ```\r\n![ss1](https://user-images.githubusercontent.com/24985760/128628859-38817281-624f-4059-af4c-2b5a350bf849.png)\r\n', 'comment_created': datetime.datetime(2021, 8, 8, 10, 28, 3, tzinfo=datetime.timezone.utc), 'commenter': 'atb00ker', 'type': 'User'}, {'comment_id': 684753474, 'comment_body': 'Create an org owner and try to downgrade it, not handled gracefully.\r\n![ss2](https://user-images.githubusercontent.com/24985760/128629199-1969de5e-8981-4b31-9208-86817808b03e.png)\r\n', 'comment_created': datetime.datetime(2021, 8, 8, 10, 39, 34, tzinfo=datetime.timezone.utc), 'commenter': 'atb00ker', 'type': 'User'}, {'comment_id': 684754021, 'comment_body': 'Should we return org name as well? Might be helpful as UUID might not make sense to show to the end user.\r\n![ss3](https://user-images.githubusercontent.com/24985760/128629290-d182a6bb-f3ba-42a3-8544-584ff07c2ce2.png)\r\n', 'comment_created': datetime.datetime(2021, 8, 8, 10, 44, 10, tzinfo=datetime.timezone.utc), 'commenter': 'atb00ker', 'type': 'User'}, {'comment_id': 684755653, 'comment_body': 'Org1admin cannot see organization user\'s section!\r\n![ss4](https://user-images.githubusercontent.com/24985760/128629655-c83296be-0a3f-46a8-bbc7-6d1a1d95d90c.png)\r\n\r\nWhile an org_users connection exists :\r\n```\r\n            ""organization_users"": [\r\n                {\r\n                    ""is_admin"": false,\r\n                    ""organization"": ""091dbab0-4188-4e83-a2e3-40853c9189f4""\r\n                }\r\n            ]\r\n```', 'comment_created': datetime.datetime(2021, 8, 8, 10, 57, 32, tzinfo=datetime.timezone.utc), 'commenter': 'atb00ker', 'type': 'User'}, {'comment_id': 684758407, 'comment_body': ""We are showing the hashed password, do we want to send it back like this @nemesisdesign @ManishShah120 ? I would assume we wouldn't share this in API even though the UI shows it; I don't know in which case sharing the password would be helpful! \r\n![ss4](https://user-images.githubusercontent.com/24985760/128630189-45244f94-cbe6-468d-bdaa-32135749ba49.png)\r\n"", 'comment_created': datetime.datetime(2021, 8, 8, 11, 18, 28, tzinfo=datetime.timezone.utc), 'commenter': 'atb00ker', 'type': 'User'}, {'comment_id': 684759438, 'comment_body': 'When I submit form without any information, it returns that I have entered wrong information.\r\nThis might be confusing when the consumer of the API has a typo or something, we should return, ""please enter old and new  passwords"".', 'comment_created': datetime.datetime(2021, 8, 8, 11, 26, 25, tzinfo=datetime.timezone.utc), 'commenter': 'atb00ker', 'type': 'User'}, {'comment_id': 684759773, 'comment_body': ""Shouldn't this be `users/group/<int:pk>/`, group ids are in integers."", 'comment_created': datetime.datetime(2021, 8, 8, 11, 28, 48, tzinfo=datetime.timezone.utc), 'commenter': 'atb00ker', 'type': 'User'}, {'comment_id': 685399095, 'comment_body': 'Fixed, :+1:', 'comment_created': datetime.datetime(2021, 8, 9, 17, 47, 57, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}, {'comment_id': 685399288, 'comment_body': 'Fixed, :+1:', 'comment_created': datetime.datetime(2021, 8, 9, 17, 48, 13, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}, {'comment_id': 686134074, 'comment_body': ""> Create a new user with organizations value.\r\n> Open the user with UUID in API UI, you'll notice while the value is present in json, form is empty:\r\n\r\nYes, @atb00ker, the form is present to add or remove org user(if the sent data is same then it will get removed else, the changes will be accomplished, this field would have been populated if there would be m2m relationship(eg. permission, groups), for example what would happen if the user is OrgUser of more than one Org?? :smile: \r\n\r\nIs there any other way I should do?"", 'comment_created': datetime.datetime(2021, 8, 10, 16, 27, 52, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}, {'comment_id': 686611809, 'comment_body': '> Org1admin cannot see organization user\'s section!\r\nss4\r\n\r\n> While an org_users connection exists :\r\n\r\n            ""organization_users"": [\r\n                {\r\n                    ""is_admin"": false,\r\n                    ""organization"": ""091dbab0-4188-4e83-a2e3-40853c9189f4""\r\n                }\r\n            ]\r\n\r\nYes, this is intentinal, the Org1admin, can only see the the org_users, present but cannot edit anything, so I removed this field for it.', 'comment_created': datetime.datetime(2021, 8, 11, 8, 24, 56, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}, {'comment_id': 686615381, 'comment_body': '> Create an org owner and try to downgrade it, not handled gracefully.\r\n\r\n@atb00ker This is already been handled by the `full_clean` method, so will it be not redundant to repeat this, in usecase/production, it will just return the error in normal way. I guess this is what we did in the config App!!!', 'comment_created': datetime.datetime(2021, 8, 11, 8, 29, 19, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}, {'comment_id': 688241491, 'comment_body': 'I have implemented this logic from here https://github.com/openwisp/openwisp-users/blob/master/openwisp_users/multitenancy.py#L99-L119', 'comment_created': datetime.datetime(2021, 8, 13, 4, 52, 48, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}, {'comment_id': 688739639, 'comment_body': '> @atb00ker This is already been handled by the full_clean method, so will it be not redundant to repeat this, in usecase/production, it will just return the error in normal way. I guess this is what we did in the config App!!!\r\n\r\nI belive the response should be graceful when possible. Unknown cases can happily return 500, but a known case should give error message and explain the message! 😄 ', 'comment_created': datetime.datetime(2021, 8, 13, 19, 37, 2, tzinfo=datetime.timezone.utc), 'commenter': 'atb00ker', 'type': 'User'}, {'comment_id': 688740976, 'comment_body': '> Yes, this is intentinal, the Org1admin, can only see the the org_users, present but cannot edit anything, so I removed this field for it.\r\n\r\nIf the user is not allowed to edit something, we should have it as readonly for consistency, what do you think? (Also, this can be lower priority)', 'comment_created': datetime.datetime(2021, 8, 13, 19, 39, 59, tzinfo=datetime.timezone.utc), 'commenter': 'atb00ker', 'type': 'User'}, {'comment_id': 692441277, 'comment_body': 'this looks outdated, please make sure the docs are up to date with the code. Every time you change the code you have to update the docs.', 'comment_created': datetime.datetime(2021, 8, 19, 19, 55, 45, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 705979266, 'comment_body': ""@ManishShah120 I think there must be a check that `new_password` or `confirm_password` can't be the same as `current_password`. What do you think?\r\n"", 'comment_created': datetime.datetime(2021, 9, 10, 8, 1, 23, tzinfo=datetime.timezone.utc), 'commenter': 'codesankalp', 'type': 'User'}, {'comment_id': 706052735, 'comment_body': 'If the code is trying to do something so similar at 2 places, why is it not shared? \r\ni.e creating a mixin to share the logic appropriately! :smile:', 'comment_created': datetime.datetime(2021, 9, 10, 9, 52, 47, tzinfo=datetime.timezone.utc), 'commenter': 'atb00ker', 'type': 'User'}, {'comment_id': 711642577, 'comment_body': ""> @ManishShah120 I think there must be a check that `new_password` or `confirm_password` can't be the same as `current_password`. What do you think?\r\n\r\nAgreed :+1:·"", 'comment_created': datetime.datetime(2021, 9, 18, 21, 21, 48, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 712921296, 'comment_body': 'Yes, will add this check ASAP, thnx @codesankalp for pointing this out. :+1:', 'comment_created': datetime.datetime(2021, 9, 21, 10, 49, 18, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}, {'comment_id': 712922665, 'comment_body': 'Sure, @atb00ker , I will  try to move this logic to a mixin. ASAP. :smile: ', 'comment_created': datetime.datetime(2021, 9, 21, 10, 51, 18, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}, {'comment_id': 715993785, 'comment_body': 'Done adding the check for same old and new password. :smile:', 'comment_created': datetime.datetime(2021, 9, 25, 5, 22, 52, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}]","[{'commit_sha': '5668003a662f3acb4323545b3509c04d9f58f689', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '847b2ea0b458af5b21ab4ad1b935fea4a84005c6', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8f77c2f9fbec48d7fce21466d10d94071032c9bc', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ca61c57b094fcfab482e71a044ecff1fa69fe75f', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd8281408aaa3109fcde31b994d00fc7bce03a374', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c236066ac2ea22f2109e455b543156a4ae749789', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '39e8b79988d1aabaeccc99afdab41078e44f03b9', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0388bf600bafed5c178b42073c3e2bbc96fe2504', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6af1383b904bce02f6e0944774adf8d81d0ffbea', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '63b353b1e5236b006738de954a8e018e002a4114', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dab6f8a586efb2b18294effdaea1408377d19a09', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd36f001978b301b3076bf1bb6651b4121d21f008', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e03010075d497707da55f421f538d46ed7835ad4', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c373732e58c673c13d95ae093f40cb6918a58ee5', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'db8cf7fe1145e4a5ace6ba38d74fc5bd8c2900fa', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ee4bfdfa8e515526a547763199f910b9bb345fdb', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '69512e3d292df605bbb34b82c2565758615e8cbe', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ffdb9be5ade7416514c39c51ddb0e4dab482f100', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f8cf19d3ce177a5cd70c14b6d08aa5ff8ae00454', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6aa3e5cf8f71996ba3a0c3d26a91d1d1dc1249e3', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ea48f48d4c143fcfbc2ff1311c222ea1a2823e43', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '17a6643d0ca64804e80ec25014c033794dd17368', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2ff7f01c35ea3a7d36d9a2dfd92534ed9b7bf41e', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9e98ed38f483de1c1a530790afcba401feebf824', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f6822bff2c5de1954d684e780a87d5b8fd920213', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '771de253a7eed5aa9cab58692aede4d8e8bed7fa', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '787ca0ba4f8d61bd35315912d10305152e49ac45', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fe474ebdb962ded9176f76c81c31d130b03fc9e0', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c3b1a864f6b20be3939605cce4de5f42acf74ab2', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8dcd58221246d82b6e518fff662c7ccce7febbff', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5fb31a4bdec11746ddd98ce87dff392e128500a6', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '95662841b2ad0c3db509b5d0af541f296001a21f', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '88015d6b80a7701c24133c78e2144428c24f83e8', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0357efd3d36c28a580b3d3dffd1ecb3ab3a74593', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '134c29bc9c8deb800f3eb5156f9a93abc650420a', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '28e04366e5deed35ac97a8e379b3ed61649975dd', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6d40f873b525e5c64eb72c171945fd22c38a76c5', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '936d530cb20ef7f09ac919cc91a297bf25a140f8', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6e43e0a1431e28da979bd9c45097f8756265c88d', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '15975f001c51d913a09ee0e48258c355f424d7b7', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4feed903f8567dd90028ca78e067be70ce6df270', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e1cc851eac0c9a95047b2c600da646e7ede137a6', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b223f75fc73df202e9204b50a9853fd4550f0401', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3900baa46bfab05576bcb5b92b668ea33a1e4421', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '95891396ba0a241c8d775ccc74dd9e68bc5b5c85', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5973c6b0375a4b388eb1222c936626f3475401d2', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f4fef6dddffc4b947db50191fb6392da5520d9cd', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bfab6d8b5ffe062f3d46b243d32533f08a5726ab', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0e21c56cd7e5071b05bbef9c2e753aebabdb1bf0', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'af4cddf49eb0fcd229fa9e2c9927590acfca612d', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ceba81d34c03e5ffee56c24e903858f98e3fea6e', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '668a8a02a01a80e01bf7dea5e633204a070ef85a', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '93a6711ca4039f92b709c21bd5318d3e6cef04f0', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}]",Manish Kumar Shah,45564404,,User,,57,,169,155
653688852,Fix Respect `can_read_model` permission in DjangoModelPermissions,"## Description
This PR implements the `view` permission in `DjangoModelPemissions` class. The old PR #6325 tried to fix it, but it contains a flaw i.e., even if an object has `change`, `add`, `delete` permission the detail page of any objects returns `""detail"": ""Not found.""`. which is not expected. As any objects which has `change` permission should also allow `GET` requests as well.

FIXES: #6324

#### Ref:- 
- https://github.com/encode/django-rest-framework/pull/6325#issuecomment-569997047
- https://github.com/encode/django-rest-framework/pull/6325#pullrequestreview-664894357",True,8009,https://api.github.com/repos/encode/django-rest-framework/pulls/8009,https://github.com/encode/django-rest-framework/pull/8009,closed,30,5,3,2,24,7,0,0,[],2021-05-26 12:21:34+00:00,2023-01-13 08:52:54+00:00,51568280.0,"596 days, 20:31:20","[{'comment_id': 643291717, 'comment_body': '@ManishShah120 please update this block as we did in https://github.com/openwisp/openwisp-users/pull/251 ', 'comment_created': datetime.datetime(2021, 6, 1, 16, 48, 46, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 643296162, 'comment_body': 'Sure, On it :+1:', 'comment_created': datetime.datetime(2021, 6, 1, 16, 52, 13, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}, {'comment_id': 643883284, 'comment_body': 'Updated the docs and simplified the code.', 'comment_created': datetime.datetime(2021, 6, 2, 11, 50, 22, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}, {'comment_id': 701821905, 'comment_body': ""I don't see the motivation for this additional set of checks against `view_*` or `change_*` permissions.\r\n\r\nJust seems inconsistent to me."", 'comment_created': datetime.datetime(2021, 9, 3, 11, 38, 14, tzinfo=datetime.timezone.utc), 'commenter': 'tomchristie', 'type': 'User'}, {'comment_id': 701826850, 'comment_body': ""Presumably we'd also want to make the same change on `DjangoObjectPermissions`, right?"", 'comment_created': datetime.datetime(2021, 9, 3, 11, 47, 13, tzinfo=datetime.timezone.utc), 'commenter': 'tomchristie', 'type': 'User'}, {'comment_id': 709556976, 'comment_body': ""This maintains backward compatibility Tom. If the DB was not updated to grant the users of an application view permissions, the API endpoints will not allow read operations and will break because users have no view permissions assigned, only change permissions which was how django worked before, we can't be sure all databases have been updated to use view permissions properly.\r\n\r\nIf we only check view permissions, that's how we would introduce a backward incompatible change."", 'comment_created': datetime.datetime(2021, 9, 15, 20, 41, 38, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 709559733, 'comment_body': ""I honestly don't know, if you say this should be done we'll look into it, but we should clear any doubt regarding https://github.com/encode/django-rest-framework/pull/8009/files/dd4de8e420f3fe6e069cfb176a3e64218a10eda0#r709556976."", 'comment_created': datetime.datetime(2021, 9, 15, 20, 45, 46, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}]","[{'commit_sha': 'ecae64fe9ad2d60d54d3f96f5e3abaeefc80e501', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6d4d048ed52dbdc28e9cc71a2d67484798c47d4a', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}]",Manish Kumar Shah,45564404,,User,,57,,169,155
650616235,[feature] Implemented view permissions by extending `DjangoModelPermissions` class #249,Closes #249,True,251,https://api.github.com/repos/openwisp/openwisp-users/pulls/251,https://github.com/openwisp/openwisp-users/pull/251,closed,198,3,6,5,1,20,0,1,[],2021-05-22 11:54:19+00:00,2021-06-01 16:45:43+00:00,881484.0,"10 days, 4:51:24","[{'comment_id': 637409645, 'comment_body': 'Did not handled the case of super user becasue superuser by default has all the permissions.', 'comment_created': datetime.datetime(2021, 5, 22, 14, 20, 21, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}, {'comment_id': 637410151, 'comment_body': 'Can we have a test for negative case when user does not have the permission; they are given 403.', 'comment_created': datetime.datetime(2021, 5, 22, 14, 24, 41, tzinfo=datetime.timezone.utc), 'commenter': 'atb00ker', 'type': 'User'}, {'comment_id': 637410282, 'comment_body': 'Just wondering, can we name it something like `ViewDjangoModelPermissions` so that the name makes more sense in the other modules about that\'s ""Custom"" about this class!', 'comment_created': datetime.datetime(2021, 5, 22, 14, 26, 14, tzinfo=datetime.timezone.utc), 'commenter': 'atb00ker', 'type': 'User'}, {'comment_id': 637410734, 'comment_body': 'I think you can add a check at the top of the function stating:\r\n```\r\nif user.is_superuser:\r\n    return True\r\n```\r\n\r\nThey are allowed to do anything regardless of any permission (this check is there in other has_permission functions too)!\r\n\r\nP.S: Not sure if this would be required, please test! :smile:', 'comment_created': datetime.datetime(2021, 5, 22, 14, 30, 16, tzinfo=datetime.timezone.utc), 'commenter': 'atb00ker', 'type': 'User'}, {'comment_id': 637523183, 'comment_body': '@atb00ker I am trying to implement this in more generic way, cause am thinking of opening a similar PR in DRF repo once this gets merged here. \r\n\r\nBy default `superuser` has all permissions i.e., it can do anything it wants. suppose manually someone removes all the permissions for any specific model for `superuser`. Then in that case this would not work, since we will return True if it;s a super user, so that case will fail.\r\n\r\nWhat do you think?', 'comment_created': datetime.datetime(2021, 5, 23, 10, 24, 18, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}, {'comment_id': 637581034, 'comment_body': 'Done @atb00ker :+1:', 'comment_created': datetime.datetime(2021, 5, 23, 18, 2, 37, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}, {'comment_id': 637581123, 'comment_body': 'I have updated the tests. :+1:', 'comment_created': datetime.datetime(2021, 5, 23, 18, 3, 8, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}, {'comment_id': 637950818, 'comment_body': ""To the best of my knowledge, removing permissions from `superuser` is an anti-pattern, but I understand your point.\r\n1. We should look at existing DRF functions and implement it in a similar way.\r\n2. I'll also wait for @nemesisdesign check this! :smile:"", 'comment_created': datetime.datetime(2021, 5, 24, 13, 37, 55, tzinfo=datetime.timezone.utc), 'commenter': 'atb00ker', 'type': 'User'}, {'comment_id': 639368383, 'comment_body': ""can we do this at class level so it's done only once at startup?"", 'comment_created': datetime.datetime(2021, 5, 26, 3, 3, 33, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 640800965, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 5, 27, 16, 51, 6, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}, {'comment_id': 641925972, 'comment_body': 'Just FYI, I think there are functions for common actions. Like [_create_operator](https://github.com/openwisp/openwisp-users/blob/master/openwisp_users/tests/utils.py#L53).\r\nThese should be inherited and used! :smile:', 'comment_created': datetime.datetime(2021, 5, 29, 11, 19, 46, tzinfo=datetime.timezone.utc), 'commenter': 'atb00ker', 'type': 'User'}, {'comment_id': 641926087, 'comment_body': 'Same here. Find function here: https://github.com/openwisp/openwisp-users/blob/master/openwisp_users/tests/utils.py#L128', 'comment_created': datetime.datetime(2021, 5, 29, 11, 20, 47, tzinfo=datetime.timezone.utc), 'commenter': 'atb00ker', 'type': 'User'}, {'comment_id': 642414799, 'comment_body': 'Hey, @atb00ker Yes, I tried to use it but with this function, the user gets all the permissions without being in the `operator` group, and here we only needed `testapp.view_template` permission.', 'comment_created': datetime.datetime(2021, 5, 31, 11, 20, 45, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}, {'comment_id': 642621261, 'comment_body': 'what about:\r\n```python\r\n# user must have either view permission or change permission\r\nreturn user.has_perms(perms) or user.has_perms(change_perm)\r\n```', 'comment_created': datetime.datetime(2021, 5, 31, 17, 56, 15, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 642621823, 'comment_body': 'the first lines of each tests look really similar, please try to make a private helper method which prepares the data needed for the test, so we can make the actual test code shorter and easier to read.', 'comment_created': datetime.datetime(2021, 5, 31, 17, 58, 4, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 642622020, 'comment_body': 'we could call this simply `DjangoModelPermissions`', 'comment_created': datetime.datetime(2021, 5, 31, 17, 58, 46, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 642622068, 'comment_body': ""here you'd import it as `BaseDjangoModelPermissions`"", 'comment_created': datetime.datetime(2021, 5, 31, 17, 58, 58, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 643018633, 'comment_body': 'Done, Please have a look. :+1:', 'comment_created': datetime.datetime(2021, 6, 1, 11, 31, 54, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}, {'comment_id': 643165803, 'comment_body': ""Doesn't `_get_operator()` help here? "", 'comment_created': datetime.datetime(2021, 6, 1, 14, 39, 28, tzinfo=datetime.timezone.utc), 'commenter': 'atb00ker', 'type': 'User'}, {'comment_id': 643216789, 'comment_body': 'No @atb00ker.', 'comment_created': datetime.datetime(2021, 6, 1, 15, 32, 45, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}]","[{'commit_sha': '9665dbc05e37cda6a7443acb824375befb61c8cc', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3e9ad535f628e86affc5bb286a8969867c531e54', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2fe5487e2798db8fc27240f1b37168f65fa34efd', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c446b0d5909b47dbd741ca37bb99a3a6e30e3927', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b78c4a1dd1a0b7e6044988f0e44eca5e87d2bf54', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}]",Manish Kumar Shah,45564404,,User,,57,,169,155
650616235,[feature] Implemented view permissions by extending `DjangoModelPermissions` class #249,Closes #249,True,251,https://api.github.com/repos/openwisp/openwisp-users/pulls/251,https://github.com/openwisp/openwisp-users/pull/251,closed,198,3,6,5,1,20,0,1,[],2021-05-22 11:54:19+00:00,2021-06-01 16:45:43+00:00,881484.0,"10 days, 4:51:24","[{'comment_id': 637409645, 'comment_body': 'Did not handled the case of super user becasue superuser by default has all the permissions.', 'comment_created': datetime.datetime(2021, 5, 22, 14, 20, 21, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}, {'comment_id': 637410151, 'comment_body': 'Can we have a test for negative case when user does not have the permission; they are given 403.', 'comment_created': datetime.datetime(2021, 5, 22, 14, 24, 41, tzinfo=datetime.timezone.utc), 'commenter': 'atb00ker', 'type': 'User'}, {'comment_id': 637410282, 'comment_body': 'Just wondering, can we name it something like `ViewDjangoModelPermissions` so that the name makes more sense in the other modules about that\'s ""Custom"" about this class!', 'comment_created': datetime.datetime(2021, 5, 22, 14, 26, 14, tzinfo=datetime.timezone.utc), 'commenter': 'atb00ker', 'type': 'User'}, {'comment_id': 637410734, 'comment_body': 'I think you can add a check at the top of the function stating:\r\n```\r\nif user.is_superuser:\r\n    return True\r\n```\r\n\r\nThey are allowed to do anything regardless of any permission (this check is there in other has_permission functions too)!\r\n\r\nP.S: Not sure if this would be required, please test! :smile:', 'comment_created': datetime.datetime(2021, 5, 22, 14, 30, 16, tzinfo=datetime.timezone.utc), 'commenter': 'atb00ker', 'type': 'User'}, {'comment_id': 637523183, 'comment_body': '@atb00ker I am trying to implement this in more generic way, cause am thinking of opening a similar PR in DRF repo once this gets merged here. \r\n\r\nBy default `superuser` has all permissions i.e., it can do anything it wants. suppose manually someone removes all the permissions for any specific model for `superuser`. Then in that case this would not work, since we will return True if it;s a super user, so that case will fail.\r\n\r\nWhat do you think?', 'comment_created': datetime.datetime(2021, 5, 23, 10, 24, 18, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}, {'comment_id': 637581034, 'comment_body': 'Done @atb00ker :+1:', 'comment_created': datetime.datetime(2021, 5, 23, 18, 2, 37, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}, {'comment_id': 637581123, 'comment_body': 'I have updated the tests. :+1:', 'comment_created': datetime.datetime(2021, 5, 23, 18, 3, 8, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}, {'comment_id': 637950818, 'comment_body': ""To the best of my knowledge, removing permissions from `superuser` is an anti-pattern, but I understand your point.\r\n1. We should look at existing DRF functions and implement it in a similar way.\r\n2. I'll also wait for @nemesisdesign check this! :smile:"", 'comment_created': datetime.datetime(2021, 5, 24, 13, 37, 55, tzinfo=datetime.timezone.utc), 'commenter': 'atb00ker', 'type': 'User'}, {'comment_id': 639368383, 'comment_body': ""can we do this at class level so it's done only once at startup?"", 'comment_created': datetime.datetime(2021, 5, 26, 3, 3, 33, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 640800965, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 5, 27, 16, 51, 6, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}, {'comment_id': 641925972, 'comment_body': 'Just FYI, I think there are functions for common actions. Like [_create_operator](https://github.com/openwisp/openwisp-users/blob/master/openwisp_users/tests/utils.py#L53).\r\nThese should be inherited and used! :smile:', 'comment_created': datetime.datetime(2021, 5, 29, 11, 19, 46, tzinfo=datetime.timezone.utc), 'commenter': 'atb00ker', 'type': 'User'}, {'comment_id': 641926087, 'comment_body': 'Same here. Find function here: https://github.com/openwisp/openwisp-users/blob/master/openwisp_users/tests/utils.py#L128', 'comment_created': datetime.datetime(2021, 5, 29, 11, 20, 47, tzinfo=datetime.timezone.utc), 'commenter': 'atb00ker', 'type': 'User'}, {'comment_id': 642414799, 'comment_body': 'Hey, @atb00ker Yes, I tried to use it but with this function, the user gets all the permissions without being in the `operator` group, and here we only needed `testapp.view_template` permission.', 'comment_created': datetime.datetime(2021, 5, 31, 11, 20, 45, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}, {'comment_id': 642621261, 'comment_body': 'what about:\r\n```python\r\n# user must have either view permission or change permission\r\nreturn user.has_perms(perms) or user.has_perms(change_perm)\r\n```', 'comment_created': datetime.datetime(2021, 5, 31, 17, 56, 15, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 642621823, 'comment_body': 'the first lines of each tests look really similar, please try to make a private helper method which prepares the data needed for the test, so we can make the actual test code shorter and easier to read.', 'comment_created': datetime.datetime(2021, 5, 31, 17, 58, 4, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 642622020, 'comment_body': 'we could call this simply `DjangoModelPermissions`', 'comment_created': datetime.datetime(2021, 5, 31, 17, 58, 46, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 642622068, 'comment_body': ""here you'd import it as `BaseDjangoModelPermissions`"", 'comment_created': datetime.datetime(2021, 5, 31, 17, 58, 58, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 643018633, 'comment_body': 'Done, Please have a look. :+1:', 'comment_created': datetime.datetime(2021, 6, 1, 11, 31, 54, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}, {'comment_id': 643165803, 'comment_body': ""Doesn't `_get_operator()` help here? "", 'comment_created': datetime.datetime(2021, 6, 1, 14, 39, 28, tzinfo=datetime.timezone.utc), 'commenter': 'atb00ker', 'type': 'User'}, {'comment_id': 643216789, 'comment_body': 'No @atb00ker.', 'comment_created': datetime.datetime(2021, 6, 1, 15, 32, 45, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}]","[{'commit_sha': '9665dbc05e37cda6a7443acb824375befb61c8cc', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3e9ad535f628e86affc5bb286a8969867c531e54', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2fe5487e2798db8fc27240f1b37168f65fa34efd', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c446b0d5909b47dbd741ca37bb99a3a6e30e3927', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b78c4a1dd1a0b7e6044988f0e44eca5e87d2bf54', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}]",Manish Kumar Shah,45564404,,User,,57,,169,155
653688852,Fix Respect `can_read_model` permission in DjangoModelPermissions,"## Description
This PR implements the `view` permission in `DjangoModelPemissions` class. The old PR #6325 tried to fix it, but it contains a flaw i.e., even if an object has `change`, `add`, `delete` permission the detail page of any objects returns `""detail"": ""Not found.""`. which is not expected. As any objects which has `change` permission should also allow `GET` requests as well.

FIXES: #6324

#### Ref:- 
- https://github.com/encode/django-rest-framework/pull/6325#issuecomment-569997047
- https://github.com/encode/django-rest-framework/pull/6325#pullrequestreview-664894357",True,8009,https://api.github.com/repos/encode/django-rest-framework/pulls/8009,https://github.com/encode/django-rest-framework/pull/8009,closed,30,5,3,2,24,7,0,0,[],2021-05-26 12:21:34+00:00,2023-01-13 08:52:54+00:00,51568280.0,"596 days, 20:31:20","[{'comment_id': 643291717, 'comment_body': '@ManishShah120 please update this block as we did in https://github.com/openwisp/openwisp-users/pull/251 ', 'comment_created': datetime.datetime(2021, 6, 1, 16, 48, 46, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 643296162, 'comment_body': 'Sure, On it :+1:', 'comment_created': datetime.datetime(2021, 6, 1, 16, 52, 13, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}, {'comment_id': 643883284, 'comment_body': 'Updated the docs and simplified the code.', 'comment_created': datetime.datetime(2021, 6, 2, 11, 50, 22, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}, {'comment_id': 701821905, 'comment_body': ""I don't see the motivation for this additional set of checks against `view_*` or `change_*` permissions.\r\n\r\nJust seems inconsistent to me."", 'comment_created': datetime.datetime(2021, 9, 3, 11, 38, 14, tzinfo=datetime.timezone.utc), 'commenter': 'tomchristie', 'type': 'User'}, {'comment_id': 701826850, 'comment_body': ""Presumably we'd also want to make the same change on `DjangoObjectPermissions`, right?"", 'comment_created': datetime.datetime(2021, 9, 3, 11, 47, 13, tzinfo=datetime.timezone.utc), 'commenter': 'tomchristie', 'type': 'User'}, {'comment_id': 709556976, 'comment_body': ""This maintains backward compatibility Tom. If the DB was not updated to grant the users of an application view permissions, the API endpoints will not allow read operations and will break because users have no view permissions assigned, only change permissions which was how django worked before, we can't be sure all databases have been updated to use view permissions properly.\r\n\r\nIf we only check view permissions, that's how we would introduce a backward incompatible change."", 'comment_created': datetime.datetime(2021, 9, 15, 20, 41, 38, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 709559733, 'comment_body': ""I honestly don't know, if you say this should be done we'll look into it, but we should clear any doubt regarding https://github.com/encode/django-rest-framework/pull/8009/files/dd4de8e420f3fe6e069cfb176a3e64218a10eda0#r709556976."", 'comment_created': datetime.datetime(2021, 9, 15, 20, 45, 46, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}]","[{'commit_sha': 'ecae64fe9ad2d60d54d3f96f5e3abaeefc80e501', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6d4d048ed52dbdc28e9cc71a2d67484798c47d4a', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}]",Manish Kumar Shah,45564404,,User,,57,,169,155
653688852,Fix Respect `can_read_model` permission in DjangoModelPermissions,"## Description
This PR implements the `view` permission in `DjangoModelPemissions` class. The old PR #6325 tried to fix it, but it contains a flaw i.e., even if an object has `change`, `add`, `delete` permission the detail page of any objects returns `""detail"": ""Not found.""`. which is not expected. As any objects which has `change` permission should also allow `GET` requests as well.

FIXES: #6324

#### Ref:- 
- https://github.com/encode/django-rest-framework/pull/6325#issuecomment-569997047
- https://github.com/encode/django-rest-framework/pull/6325#pullrequestreview-664894357",True,8009,https://api.github.com/repos/encode/django-rest-framework/pulls/8009,https://github.com/encode/django-rest-framework/pull/8009,closed,30,5,3,2,24,7,0,0,[],2021-05-26 12:21:34+00:00,2023-01-13 08:52:54+00:00,51568280.0,"596 days, 20:31:20","[{'comment_id': 643291717, 'comment_body': '@ManishShah120 please update this block as we did in https://github.com/openwisp/openwisp-users/pull/251 ', 'comment_created': datetime.datetime(2021, 6, 1, 16, 48, 46, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 643296162, 'comment_body': 'Sure, On it :+1:', 'comment_created': datetime.datetime(2021, 6, 1, 16, 52, 13, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}, {'comment_id': 643883284, 'comment_body': 'Updated the docs and simplified the code.', 'comment_created': datetime.datetime(2021, 6, 2, 11, 50, 22, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}, {'comment_id': 701821905, 'comment_body': ""I don't see the motivation for this additional set of checks against `view_*` or `change_*` permissions.\r\n\r\nJust seems inconsistent to me."", 'comment_created': datetime.datetime(2021, 9, 3, 11, 38, 14, tzinfo=datetime.timezone.utc), 'commenter': 'tomchristie', 'type': 'User'}, {'comment_id': 701826850, 'comment_body': ""Presumably we'd also want to make the same change on `DjangoObjectPermissions`, right?"", 'comment_created': datetime.datetime(2021, 9, 3, 11, 47, 13, tzinfo=datetime.timezone.utc), 'commenter': 'tomchristie', 'type': 'User'}, {'comment_id': 709556976, 'comment_body': ""This maintains backward compatibility Tom. If the DB was not updated to grant the users of an application view permissions, the API endpoints will not allow read operations and will break because users have no view permissions assigned, only change permissions which was how django worked before, we can't be sure all databases have been updated to use view permissions properly.\r\n\r\nIf we only check view permissions, that's how we would introduce a backward incompatible change."", 'comment_created': datetime.datetime(2021, 9, 15, 20, 41, 38, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 709559733, 'comment_body': ""I honestly don't know, if you say this should be done we'll look into it, but we should clear any doubt regarding https://github.com/encode/django-rest-framework/pull/8009/files/dd4de8e420f3fe6e069cfb176a3e64218a10eda0#r709556976."", 'comment_created': datetime.datetime(2021, 9, 15, 20, 45, 46, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}]","[{'commit_sha': 'ecae64fe9ad2d60d54d3f96f5e3abaeefc80e501', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6d4d048ed52dbdc28e9cc71a2d67484798c47d4a', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}]",Manish Kumar Shah,45564404,,User,,57,,169,155
668478623,Improve api mixins for organization field lookup in parent model #255,Closes #255 ,True,258,https://api.github.com/repos/openwisp/openwisp-users/pulls/258,https://github.com/openwisp/openwisp-users/pull/258,closed,139,12,10,4,3,3,0,2,[],2021-06-11 19:20:32+00:00,2021-06-16 01:50:31+00:00,368999.0,"4 days, 6:29:59","[{'comment_id': 650499144, 'comment_body': ""Hi,\r\n\r\nIt's not clear to me, why did we need a new model to test this, was there a challenge with updating the old models? \r\n\r\nP.S: I hope you tested by intentionally failing your testcase! :smile:"", 'comment_created': datetime.datetime(2021, 6, 13, 9, 42, 58, tzinfo=datetime.timezone.utc), 'commenter': 'atb00ker', 'type': 'User'}, {'comment_id': 650500434, 'comment_body': ""@atb00ker we needed a model which does not contain the organization field, but it's parent model contains it. I thought it will be better to introduce new model, as all the present models contained organization field, and editing the already present model would fail some of the test cases. "", 'comment_created': datetime.datetime(2021, 6, 13, 9, 54, 47, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}, {'comment_id': 651875101, 'comment_body': 'A little typo here :grinning: ', 'comment_created': datetime.datetime(2021, 6, 15, 14, 54, 58, tzinfo=datetime.timezone.utc), 'commenter': 'okraits', 'type': 'User'}]","[{'commit_sha': '5ae052dd3211c6ecdf492559195057914a8285ee', 'committer_username': 'nemesifier', 'committer_name': 'Federico Capoano', 'committer_email': 'f.capoano@openwisp.io', 'commit_date': datetime.datetime(2011, 6, 9, 22, 30, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e4dcd9c48b381105da2b23b886a1e7f7ccc87612', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8e7ce4b2de6a8ae1c4c2b733e3e4e6b46bc501f4', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '89c99aa082b1ec5cab5036a3b55ba0e868e5eeae', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}]",Manish Kumar Shah,45564404,,User,,57,,169,155
668478623,Improve api mixins for organization field lookup in parent model #255,Closes #255 ,True,258,https://api.github.com/repos/openwisp/openwisp-users/pulls/258,https://github.com/openwisp/openwisp-users/pull/258,closed,139,12,10,4,3,3,0,2,[],2021-06-11 19:20:32+00:00,2021-06-16 01:50:31+00:00,368999.0,"4 days, 6:29:59","[{'comment_id': 650499144, 'comment_body': ""Hi,\r\n\r\nIt's not clear to me, why did we need a new model to test this, was there a challenge with updating the old models? \r\n\r\nP.S: I hope you tested by intentionally failing your testcase! :smile:"", 'comment_created': datetime.datetime(2021, 6, 13, 9, 42, 58, tzinfo=datetime.timezone.utc), 'commenter': 'atb00ker', 'type': 'User'}, {'comment_id': 650500434, 'comment_body': ""@atb00ker we needed a model which does not contain the organization field, but it's parent model contains it. I thought it will be better to introduce new model, as all the present models contained organization field, and editing the already present model would fail some of the test cases. "", 'comment_created': datetime.datetime(2021, 6, 13, 9, 54, 47, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}, {'comment_id': 651875101, 'comment_body': 'A little typo here :grinning: ', 'comment_created': datetime.datetime(2021, 6, 15, 14, 54, 58, tzinfo=datetime.timezone.utc), 'commenter': 'okraits', 'type': 'User'}]","[{'commit_sha': '5ae052dd3211c6ecdf492559195057914a8285ee', 'committer_username': 'nemesifier', 'committer_name': 'Federico Capoano', 'committer_email': 'f.capoano@openwisp.io', 'commit_date': datetime.datetime(2011, 6, 9, 22, 30, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e4dcd9c48b381105da2b23b886a1e7f7ccc87612', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8e7ce4b2de6a8ae1c4c2b733e3e4e6b46bc501f4', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '89c99aa082b1ec5cab5036a3b55ba0e868e5eeae', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}]",Manish Kumar Shah,45564404,,User,,57,,169,155
668815422,[fix] Fixed `KeyError` in `FilterSerializerByOrgManaged` #259,Closes #259,True,260,https://api.github.com/repos/openwisp/openwisp-users/pulls/260,https://github.com/openwisp/openwisp-users/pull/260,closed,87,5,5,8,2,28,0,1,[],2021-06-12 08:41:25+00:00,2021-07-05 16:54:59+00:00,2016814.0,"23 days, 8:13:34","[{'comment_id': 650404300, 'comment_body': ""never wrap an entire block in a try statement, only wrap the line which you expect can fail, otherwise we risk catching other errors as well but we won't understand what's going on and will be hard to debug."", 'comment_created': datetime.datetime(2021, 6, 12, 15, 29, 23, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 650418171, 'comment_body': ""@nemesisdesign the error is raised due to this line:- \r\n`user = self.context['request'].user`\r\nI tried wrapping only this line in `try` statement but then other variables like `organization_filter` depends on it with which entire logic is dependent, it raises variable used before assignment error. \r\n\r\nI tried assigning None to it, but it didn't work.\r\n\r\nCan you please give any hint?"", 'comment_created': datetime.datetime(2021, 6, 12, 17, 58, 42, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}, {'comment_id': 650497959, 'comment_body': ""Indeed, too many folks add all the code in the try block, we should avoid this.\r\n\r\n> tried wrapping only this line in try statement but then other variables like organization_filter depends on it with which entire logic is dependent\r\n\r\nWhy not `return` in the catch block when getting user is failed?\r\nWouldn't that solve the problem?\r\n"", 'comment_created': datetime.datetime(2021, 6, 13, 9, 32, 33, tzinfo=datetime.timezone.utc), 'commenter': 'atb00ker', 'type': 'User'}, {'comment_id': 650505903, 'comment_body': 'Done @atb00ker ', 'comment_created': datetime.datetime(2021, 6, 13, 10, 41, 45, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}, {'comment_id': 650533675, 'comment_body': 'There is a `try` block here too, do all the lines need to be inside this block?', 'comment_created': datetime.datetime(2021, 6, 13, 14, 21, 43, tzinfo=datetime.timezone.utc), 'commenter': 'atb00ker', 'type': 'User'}, {'comment_id': 650861223, 'comment_body': '@atb00ker the error is raised in by line 4\r\n``` python\r\n conditions = Q(**{self.organization_lookup: organization_filter})\r\n if self.include_shared:                    \r\n conditions |= Q(organization__isnull=True)                \r\n self.fields[field].queryset = self.fields[field].queryset.filter(conditions)\r\n```\r\nShould we put only that line in the try statement?', 'comment_created': datetime.datetime(2021, 6, 14, 11, 22, 44, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}, {'comment_id': 651235845, 'comment_body': ""@ManishShah120 The question here https://github.com/openwisp/openwisp-users/pull/260#discussion_r650861223\r\nIs repeated to ask the same thing answered here: https://github.com/openwisp/openwisp-users/pull/260#discussion_r650404300\r\n\r\nSo could you please elaborate the source of the confusion so that I don't give the same answer again! :smile:"", 'comment_created': datetime.datetime(2021, 6, 14, 19, 57, 7, tzinfo=datetime.timezone.utc), 'commenter': 'atb00ker', 'type': 'User'}, {'comment_id': 651384797, 'comment_body': ""@ManishShah120 why would the request be missing from the serializer context?\r\nIs there a legitimate reason for this to happen?\r\nI think we should fail the request if `KeyError` is raised, because it means the application is misconfigured.\r\nThe serializer shall always have the request passed to the serializer context during initialization or otherwise it won't work.\r\n\r\nDon't we risk a security issue if the return statement is hit?\r\nI suggest simply raising [APIException](https://github.com/encode/django-rest-framework/blob/master/rest_framework/exceptions.py#L96-L130) if the except block is reached. "", 'comment_created': datetime.datetime(2021, 6, 15, 1, 38, 15, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 651470572, 'comment_body': '> @ManishShah120 why would the request be missing from the serializer context?\r\n\r\n@nemesisdesign when we use nested serializer, then the `self.context` dict is `empty` when the server is started so it cannot get the `request` object from the context hence `KeyError` is raised. But once the server has started successfully then when sent a request to the endpoint containing the nested serializer is sent, then the `self.context` dict contains all the required objects.\r\n\r\nWe are required to so because the server doesn\'t start, due to this KeyError being raised.\r\n\r\nI tried raising `APIException` but again the server doesn\'t start raising this error:-\r\n```\r\n  File ""/home/manish/Videos/openwisp_users_remote/openwisp-users/openwisp_users/api/mixins.py"", line 132, in filter_fields\r\n    raise APIException\r\nrest_framework.exceptions.APIException: A server error occurred.\r\n```', 'comment_created': datetime.datetime(2021, 6, 15, 5, 58, 30, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}, {'comment_id': 651676929, 'comment_body': 'Done @atb00ker :smile: ', 'comment_created': datetime.datetime(2021, 6, 15, 10, 54, 42, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}, {'comment_id': 652288294, 'comment_body': ""let me know how to replicate this issue and I'll test it"", 'comment_created': datetime.datetime(2021, 6, 16, 1, 53, 17, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 652607748, 'comment_body': '@nemesisdesign To replicate this issue simply fetch the changes I have pushed to this branch https://github.com/openwisp/openwisp-firmware-upgrader/tree/openwisp-users-api-mixins ,and update openwisp-users to latest master. Then start the server.\r\n\r\nPs: This error is raised when we use `FilterSerializerByOrgManaged` in a serializer class which contains nested serilaizer field.\r\n\r\nOr you can undo the changes and see the tests endpoint I added.', 'comment_created': datetime.datetime(2021, 6, 16, 11, 42, 43, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}, {'comment_id': 652858806, 'comment_body': 'Okay, for this one, why did we need another endpoint?', 'comment_created': datetime.datetime(2021, 6, 16, 16, 34, 6, tzinfo=datetime.timezone.utc), 'commenter': 'atb00ker', 'type': 'User'}, {'comment_id': 652859495, 'comment_body': ""Wait, `self.client.get(url, HTTP_AUTHORIZATION=f'Bearer {token}')` should be inside `self.assertNumQueries(0)`, can you please explain this?"", 'comment_created': datetime.datetime(2021, 6, 16, 16, 35, 1, tzinfo=datetime.timezone.utc), 'commenter': 'atb00ker', 'type': 'User'}, {'comment_id': 652863967, 'comment_body': ""Possible improvement:\r\n```\r\nuser = self.context.get('request', {}).get('user', None)\r\nif !user or user.is_superuser:\r\n   return\r\n```\r\n\r\nWill this work?"", 'comment_created': datetime.datetime(2021, 6, 16, 16, 41, 28, tzinfo=datetime.timezone.utc), 'commenter': 'atb00ker', 'type': 'User'}, {'comment_id': 652878919, 'comment_body': 'try/except is more suited to exceptional cases', 'comment_created': datetime.datetime(2021, 6, 16, 16, 59, 55, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 652879204, 'comment_body': ""Ajay is right ,there's a mistake here"", 'comment_created': datetime.datetime(2021, 6, 16, 17, 0, 16, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 652891010, 'comment_body': 'This error is raised only with the serializer classes having nested serializer field. Presently none of the test serializer classes contained nested serializer. Also see:- https://github.com/openwisp/openwisp-users/pull/260#discussion_r652607748', 'comment_created': datetime.datetime(2021, 6, 16, 17, 15, 43, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}, {'comment_id': 652893034, 'comment_body': 'Ohh sorry, will try to rectify it ASAP. ', 'comment_created': datetime.datetime(2021, 6, 16, 17, 18, 23, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}, {'comment_id': 653251540, 'comment_body': ""> Possible improvement:\r\n> \r\n> ```\r\n> user = self.context.get('request', {}).get('user', None)\r\n> if !user or user.is_superuser:\r\n>    return\r\n> ```\r\n> \r\n> Will this work?\r\n\r\n@atb00ker I tired implementing it I get this error `AttributeError: 'Request' object has no attribute 'get'`"", 'comment_created': datetime.datetime(2021, 6, 17, 6, 6, 47, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}, {'comment_id': 653915130, 'comment_body': ""Try this:\r\n```\r\nrequest = self.context['request']\r\nuser = request.get('user', None)\r\n```\r\nIf this doesn't work, I can try doing it on my machine, but I would recommend to manipulate it to create a solution like this yourself! :smile:"", 'comment_created': datetime.datetime(2021, 6, 17, 20, 33, 26, tzinfo=datetime.timezone.utc), 'commenter': 'atb00ker', 'type': 'User'}, {'comment_id': 654357190, 'comment_body': ""@atb00ker Will this be a good replacement??\r\n\r\n``` diff\r\ndiff --git a/openwisp_users/api/mixins.py b/openwisp_users/api/mixins.py\r\nindex 2bfbda8..524649b 100644\r\n--- a/openwisp_users/api/mixins.py\r\n+++ b/openwisp_users/api/mixins.py\r\n@@ -131,9 +131,9 @@ class FilterSerializerByOrganization(OrgLookup):\r\n         raise NotImplementedError()\r\n \r\n     def filter_fields(self):\r\n-        try:\r\n+        if self.context:\r\n             user = self.context['request'].user\r\n-        except KeyError:\r\n+        else:\r\n             return\r\n```\r\nI tried raising an exception in the else block but, since the error is raised only when the server is started and not when it is running, so it didn't work."", 'comment_created': datetime.datetime(2021, 6, 18, 11, 31, 38, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}, {'comment_id': 654500524, 'comment_body': 'Yes, I think that should do the trick as well! :smile:', 'comment_created': datetime.datetime(2021, 6, 18, 15, 0, 57, tzinfo=datetime.timezone.utc), 'commenter': 'atb00ker', 'type': 'User'}, {'comment_id': 659295458, 'comment_body': 'Okay, can you please go to this endpoint and try to create a book nested shelf?\r\nI am not able to do that...\r\n```\r\n{\r\n    ""shelf"": [\r\n        ""This field cannot be null.""\r\n    ]\r\n}\r\n```', 'comment_created': datetime.datetime(2021, 6, 27, 10, 0, 11, tzinfo=datetime.timezone.utc), 'commenter': 'atb00ker', 'type': 'User'}, {'comment_id': 659296852, 'comment_body': ""Hi, @atb00ker I haven't wrote the code to support writable nested serilaizer, this is only `read_only` nested serializer. Hence I wrote the tests for get requests, only."", 'comment_created': datetime.datetime(2021, 6, 27, 10, 11, 13, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}, {'comment_id': 659296873, 'comment_body': 'https://github.com/openwisp/openwisp-users/pull/260/files#r659296852', 'comment_created': datetime.datetime(2021, 6, 27, 10, 11, 25, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}, {'comment_id': 659297080, 'comment_body': ""But we need that code for manual / security testing, we can't create an endpoint that doesn't work."", 'comment_created': datetime.datetime(2021, 6, 27, 10, 12, 41, tzinfo=datetime.timezone.utc), 'commenter': 'atb00ker', 'type': 'User'}, {'comment_id': 659420282, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 6, 28, 2, 14, 29, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}]","[{'commit_sha': 'b4d7e0d531fdb1be5f26905939189a8278b79ca7', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5ec901e46dc9eb0a1aaacc3187da2f2694e1c5ee', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '34792a1010602f9aba0b031d367c15d5b7732423', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '016395fea044a853fcb0a25a238bad38d2f63cd6', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3e62a9d537420e8218eb3a67b6aab4db36df72a9', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '217d1a30d3436b43f6a2ac8e6e7330286427703c', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '07829951fe69b4f88de1901d99d38fd873704d95', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '331f3aebceed30817873aa923fdbf54b36144fd6', 'committer_username': 'nemesifier', 'committer_name': 'Federico Capoano', 'committer_email': 'f.capoano@openwisp.io', 'commit_date': datetime.datetime(2011, 6, 9, 22, 30, 31, tzinfo=datetime.timezone.utc)}]",Manish Kumar Shah,45564404,,User,,57,,169,155
668815422,[fix] Fixed `KeyError` in `FilterSerializerByOrgManaged` #259,Closes #259,True,260,https://api.github.com/repos/openwisp/openwisp-users/pulls/260,https://github.com/openwisp/openwisp-users/pull/260,closed,87,5,5,8,2,28,0,1,[],2021-06-12 08:41:25+00:00,2021-07-05 16:54:59+00:00,2016814.0,"23 days, 8:13:34","[{'comment_id': 650404300, 'comment_body': ""never wrap an entire block in a try statement, only wrap the line which you expect can fail, otherwise we risk catching other errors as well but we won't understand what's going on and will be hard to debug."", 'comment_created': datetime.datetime(2021, 6, 12, 15, 29, 23, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 650418171, 'comment_body': ""@nemesisdesign the error is raised due to this line:- \r\n`user = self.context['request'].user`\r\nI tried wrapping only this line in `try` statement but then other variables like `organization_filter` depends on it with which entire logic is dependent, it raises variable used before assignment error. \r\n\r\nI tried assigning None to it, but it didn't work.\r\n\r\nCan you please give any hint?"", 'comment_created': datetime.datetime(2021, 6, 12, 17, 58, 42, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}, {'comment_id': 650497959, 'comment_body': ""Indeed, too many folks add all the code in the try block, we should avoid this.\r\n\r\n> tried wrapping only this line in try statement but then other variables like organization_filter depends on it with which entire logic is dependent\r\n\r\nWhy not `return` in the catch block when getting user is failed?\r\nWouldn't that solve the problem?\r\n"", 'comment_created': datetime.datetime(2021, 6, 13, 9, 32, 33, tzinfo=datetime.timezone.utc), 'commenter': 'atb00ker', 'type': 'User'}, {'comment_id': 650505903, 'comment_body': 'Done @atb00ker ', 'comment_created': datetime.datetime(2021, 6, 13, 10, 41, 45, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}, {'comment_id': 650533675, 'comment_body': 'There is a `try` block here too, do all the lines need to be inside this block?', 'comment_created': datetime.datetime(2021, 6, 13, 14, 21, 43, tzinfo=datetime.timezone.utc), 'commenter': 'atb00ker', 'type': 'User'}, {'comment_id': 650861223, 'comment_body': '@atb00ker the error is raised in by line 4\r\n``` python\r\n conditions = Q(**{self.organization_lookup: organization_filter})\r\n if self.include_shared:                    \r\n conditions |= Q(organization__isnull=True)                \r\n self.fields[field].queryset = self.fields[field].queryset.filter(conditions)\r\n```\r\nShould we put only that line in the try statement?', 'comment_created': datetime.datetime(2021, 6, 14, 11, 22, 44, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}, {'comment_id': 651235845, 'comment_body': ""@ManishShah120 The question here https://github.com/openwisp/openwisp-users/pull/260#discussion_r650861223\r\nIs repeated to ask the same thing answered here: https://github.com/openwisp/openwisp-users/pull/260#discussion_r650404300\r\n\r\nSo could you please elaborate the source of the confusion so that I don't give the same answer again! :smile:"", 'comment_created': datetime.datetime(2021, 6, 14, 19, 57, 7, tzinfo=datetime.timezone.utc), 'commenter': 'atb00ker', 'type': 'User'}, {'comment_id': 651384797, 'comment_body': ""@ManishShah120 why would the request be missing from the serializer context?\r\nIs there a legitimate reason for this to happen?\r\nI think we should fail the request if `KeyError` is raised, because it means the application is misconfigured.\r\nThe serializer shall always have the request passed to the serializer context during initialization or otherwise it won't work.\r\n\r\nDon't we risk a security issue if the return statement is hit?\r\nI suggest simply raising [APIException](https://github.com/encode/django-rest-framework/blob/master/rest_framework/exceptions.py#L96-L130) if the except block is reached. "", 'comment_created': datetime.datetime(2021, 6, 15, 1, 38, 15, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 651470572, 'comment_body': '> @ManishShah120 why would the request be missing from the serializer context?\r\n\r\n@nemesisdesign when we use nested serializer, then the `self.context` dict is `empty` when the server is started so it cannot get the `request` object from the context hence `KeyError` is raised. But once the server has started successfully then when sent a request to the endpoint containing the nested serializer is sent, then the `self.context` dict contains all the required objects.\r\n\r\nWe are required to so because the server doesn\'t start, due to this KeyError being raised.\r\n\r\nI tried raising `APIException` but again the server doesn\'t start raising this error:-\r\n```\r\n  File ""/home/manish/Videos/openwisp_users_remote/openwisp-users/openwisp_users/api/mixins.py"", line 132, in filter_fields\r\n    raise APIException\r\nrest_framework.exceptions.APIException: A server error occurred.\r\n```', 'comment_created': datetime.datetime(2021, 6, 15, 5, 58, 30, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}, {'comment_id': 651676929, 'comment_body': 'Done @atb00ker :smile: ', 'comment_created': datetime.datetime(2021, 6, 15, 10, 54, 42, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}, {'comment_id': 652288294, 'comment_body': ""let me know how to replicate this issue and I'll test it"", 'comment_created': datetime.datetime(2021, 6, 16, 1, 53, 17, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 652607748, 'comment_body': '@nemesisdesign To replicate this issue simply fetch the changes I have pushed to this branch https://github.com/openwisp/openwisp-firmware-upgrader/tree/openwisp-users-api-mixins ,and update openwisp-users to latest master. Then start the server.\r\n\r\nPs: This error is raised when we use `FilterSerializerByOrgManaged` in a serializer class which contains nested serilaizer field.\r\n\r\nOr you can undo the changes and see the tests endpoint I added.', 'comment_created': datetime.datetime(2021, 6, 16, 11, 42, 43, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}, {'comment_id': 652858806, 'comment_body': 'Okay, for this one, why did we need another endpoint?', 'comment_created': datetime.datetime(2021, 6, 16, 16, 34, 6, tzinfo=datetime.timezone.utc), 'commenter': 'atb00ker', 'type': 'User'}, {'comment_id': 652859495, 'comment_body': ""Wait, `self.client.get(url, HTTP_AUTHORIZATION=f'Bearer {token}')` should be inside `self.assertNumQueries(0)`, can you please explain this?"", 'comment_created': datetime.datetime(2021, 6, 16, 16, 35, 1, tzinfo=datetime.timezone.utc), 'commenter': 'atb00ker', 'type': 'User'}, {'comment_id': 652863967, 'comment_body': ""Possible improvement:\r\n```\r\nuser = self.context.get('request', {}).get('user', None)\r\nif !user or user.is_superuser:\r\n   return\r\n```\r\n\r\nWill this work?"", 'comment_created': datetime.datetime(2021, 6, 16, 16, 41, 28, tzinfo=datetime.timezone.utc), 'commenter': 'atb00ker', 'type': 'User'}, {'comment_id': 652878919, 'comment_body': 'try/except is more suited to exceptional cases', 'comment_created': datetime.datetime(2021, 6, 16, 16, 59, 55, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 652879204, 'comment_body': ""Ajay is right ,there's a mistake here"", 'comment_created': datetime.datetime(2021, 6, 16, 17, 0, 16, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 652891010, 'comment_body': 'This error is raised only with the serializer classes having nested serializer field. Presently none of the test serializer classes contained nested serializer. Also see:- https://github.com/openwisp/openwisp-users/pull/260#discussion_r652607748', 'comment_created': datetime.datetime(2021, 6, 16, 17, 15, 43, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}, {'comment_id': 652893034, 'comment_body': 'Ohh sorry, will try to rectify it ASAP. ', 'comment_created': datetime.datetime(2021, 6, 16, 17, 18, 23, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}, {'comment_id': 653251540, 'comment_body': ""> Possible improvement:\r\n> \r\n> ```\r\n> user = self.context.get('request', {}).get('user', None)\r\n> if !user or user.is_superuser:\r\n>    return\r\n> ```\r\n> \r\n> Will this work?\r\n\r\n@atb00ker I tired implementing it I get this error `AttributeError: 'Request' object has no attribute 'get'`"", 'comment_created': datetime.datetime(2021, 6, 17, 6, 6, 47, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}, {'comment_id': 653915130, 'comment_body': ""Try this:\r\n```\r\nrequest = self.context['request']\r\nuser = request.get('user', None)\r\n```\r\nIf this doesn't work, I can try doing it on my machine, but I would recommend to manipulate it to create a solution like this yourself! :smile:"", 'comment_created': datetime.datetime(2021, 6, 17, 20, 33, 26, tzinfo=datetime.timezone.utc), 'commenter': 'atb00ker', 'type': 'User'}, {'comment_id': 654357190, 'comment_body': ""@atb00ker Will this be a good replacement??\r\n\r\n``` diff\r\ndiff --git a/openwisp_users/api/mixins.py b/openwisp_users/api/mixins.py\r\nindex 2bfbda8..524649b 100644\r\n--- a/openwisp_users/api/mixins.py\r\n+++ b/openwisp_users/api/mixins.py\r\n@@ -131,9 +131,9 @@ class FilterSerializerByOrganization(OrgLookup):\r\n         raise NotImplementedError()\r\n \r\n     def filter_fields(self):\r\n-        try:\r\n+        if self.context:\r\n             user = self.context['request'].user\r\n-        except KeyError:\r\n+        else:\r\n             return\r\n```\r\nI tried raising an exception in the else block but, since the error is raised only when the server is started and not when it is running, so it didn't work."", 'comment_created': datetime.datetime(2021, 6, 18, 11, 31, 38, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}, {'comment_id': 654500524, 'comment_body': 'Yes, I think that should do the trick as well! :smile:', 'comment_created': datetime.datetime(2021, 6, 18, 15, 0, 57, tzinfo=datetime.timezone.utc), 'commenter': 'atb00ker', 'type': 'User'}, {'comment_id': 659295458, 'comment_body': 'Okay, can you please go to this endpoint and try to create a book nested shelf?\r\nI am not able to do that...\r\n```\r\n{\r\n    ""shelf"": [\r\n        ""This field cannot be null.""\r\n    ]\r\n}\r\n```', 'comment_created': datetime.datetime(2021, 6, 27, 10, 0, 11, tzinfo=datetime.timezone.utc), 'commenter': 'atb00ker', 'type': 'User'}, {'comment_id': 659296852, 'comment_body': ""Hi, @atb00ker I haven't wrote the code to support writable nested serilaizer, this is only `read_only` nested serializer. Hence I wrote the tests for get requests, only."", 'comment_created': datetime.datetime(2021, 6, 27, 10, 11, 13, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}, {'comment_id': 659296873, 'comment_body': 'https://github.com/openwisp/openwisp-users/pull/260/files#r659296852', 'comment_created': datetime.datetime(2021, 6, 27, 10, 11, 25, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}, {'comment_id': 659297080, 'comment_body': ""But we need that code for manual / security testing, we can't create an endpoint that doesn't work."", 'comment_created': datetime.datetime(2021, 6, 27, 10, 12, 41, tzinfo=datetime.timezone.utc), 'commenter': 'atb00ker', 'type': 'User'}, {'comment_id': 659420282, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 6, 28, 2, 14, 29, tzinfo=datetime.timezone.utc), 'commenter': 'ManishShah120', 'type': 'User'}]","[{'commit_sha': 'b4d7e0d531fdb1be5f26905939189a8278b79ca7', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5ec901e46dc9eb0a1aaacc3187da2f2694e1c5ee', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '34792a1010602f9aba0b031d367c15d5b7732423', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '016395fea044a853fcb0a25a238bad38d2f63cd6', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3e62a9d537420e8218eb3a67b6aab4db36df72a9', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '217d1a30d3436b43f6a2ac8e6e7330286427703c', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '07829951fe69b4f88de1901d99d38fd873704d95', 'committer_username': 'ManishShah120', 'committer_name': 'Manish Kumar Shah', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 3, 13, 30, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '331f3aebceed30817873aa923fdbf54b36144fd6', 'committer_username': 'nemesifier', 'committer_name': 'Federico Capoano', 'committer_email': 'f.capoano@openwisp.io', 'commit_date': datetime.datetime(2011, 6, 9, 22, 30, 31, tzinfo=datetime.timezone.utc)}]",Manish Kumar Shah,45564404,,User,,57,,169,155

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
77444607,openwisp-controller,openwisp/openwisp-controller,Python,170,548,22,48,985,73,23,8,"[{'id': 705168093, 'number': 514, 'closed': datetime.datetime(2021, 8, 7, 1, 10, 35, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 6, 3, 47, 11, tzinfo=datetime.timezone.utc), 'time_taken': 77004.0, 'time_delta': '21:23:24', 'additions': 6, 'deletions': 1, 'state': 'closed'}, {'id': 673866332, 'number': 497, 'closed': datetime.datetime(2021, 7, 15, 2, 6, 4, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 19, 11, 30, 44, tzinfo=datetime.timezone.utc), 'time_taken': 2212520.0, 'time_delta': '25 days, 14:35:20', 'additions': 478, 'deletions': 9, 'state': 'closed'}, {'id': 672320036, 'number': 494, 'closed': datetime.datetime(2022, 4, 20, 19, 31, 8, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 17, 7, 25, 9, tzinfo=datetime.timezone.utc), 'time_taken': 26568359.0, 'time_delta': '307 days, 12:05:59', 'additions': 1608, 'deletions': 65, 'state': 'closed'}, {'id': 661847645, 'number': 483, 'closed': datetime.datetime(2021, 6, 9, 20, 22, 22, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 4, 15, 9, 43, tzinfo=datetime.timezone.utc), 'time_taken': 450759.0, 'time_delta': '5 days, 5:12:39', 'additions': 35, 'deletions': 25, 'state': 'closed'}, {'id': 659888160, 'number': 476, 'closed': datetime.datetime(2021, 6, 6, 23, 53, 8, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 2, 9, 26, 14, tzinfo=datetime.timezone.utc), 'time_taken': 397614.0, 'time_delta': '4 days, 14:26:54', 'additions': 45, 'deletions': 1, 'state': 'closed'}, {'id': 657414999, 'number': 474, 'closed': datetime.datetime(2021, 6, 1, 17, 56, 27, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 5, 29, 6, 55, 53, tzinfo=datetime.timezone.utc), 'time_taken': 298834.0, 'time_delta': '3 days, 11:00:34', 'additions': 15, 'deletions': 17, 'state': 'closed'}, {'id': 652049834, 'number': 473, 'closed': datetime.datetime(2021, 6, 1, 16, 56, 39, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 5, 25, 8, 26, 22, tzinfo=datetime.timezone.utc), 'time_taken': 635417.0, 'time_delta': '7 days, 8:30:17', 'additions': 50, 'deletions': 57, 'state': 'closed'}, {'id': 643161160, 'number': 455, 'closed': datetime.datetime(2021, 7, 25, 17, 7, 3, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 5, 12, 13, 24, 26, tzinfo=datetime.timezone.utc), 'time_taken': 6406957.0, 'time_delta': '74 days, 3:42:37', 'additions': 797, 'deletions': 3, 'state': 'closed'}, {'id': 612944982, 'number': 431, 'closed': datetime.datetime(2021, 4, 13, 2, 25, 36, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 4, 10, 18, 38, 47, tzinfo=datetime.timezone.utc), 'time_taken': 200809.0, 'time_delta': '2 days, 7:46:49', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 607879792, 'number': 416, 'closed': datetime.datetime(2021, 4, 6, 2, 19, 58, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 4, 2, 7, 34, 24, tzinfo=datetime.timezone.utc), 'time_taken': 326734.0, 'time_delta': '3 days, 18:45:34', 'additions': 46, 'deletions': 34, 'state': 'closed'}, {'id': 574901710, 'number': 386, 'closed': datetime.datetime(2021, 5, 12, 3, 46, 32, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 2, 17, 13, 4, 7, tzinfo=datetime.timezone.utc), 'time_taken': 7224145.0, 'time_delta': '83 days, 14:42:25', 'additions': 1287, 'deletions': 2, 'state': 'closed'}, {'id': 568945410, 'number': 380, 'closed': datetime.datetime(2021, 3, 6, 2, 6, 14, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 2, 7, 9, 55, 16, tzinfo=datetime.timezone.utc), 'time_taken': 2304658.0, 'time_delta': '26 days, 16:10:58', 'additions': 22, 'deletions': 10, 'state': 'closed'}]"
92812410,openwisp-network-topology,openwisp/openwisp-network-topology,Python,64,162,16,27,275,6,6,1,"[{'id': 705989876, 'number': 117, 'closed': datetime.datetime(2021, 8, 8, 6, 13, 2, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 8, 6, 11, 38, tzinfo=datetime.timezone.utc), 'time_taken': 84.0, 'time_delta': '0:01:24', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 691517289, 'number': 113, 'closed': datetime.datetime(2022, 4, 4, 17, 55, 19, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 16, 14, 5, 32, tzinfo=datetime.timezone.utc), 'time_taken': 22650587.0, 'time_delta': '262 days, 3:49:47', 'additions': 1071, 'deletions': 58, 'state': 'closed'}, {'id': 679824096, 'number': 112, 'closed': datetime.datetime(2021, 7, 3, 16, 39, 12, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 29, 10, 51, 5, tzinfo=datetime.timezone.utc), 'time_taken': 366487.0, 'time_delta': '4 days, 5:48:07', 'additions': 60, 'deletions': 31, 'state': 'closed'}, {'id': 612887612, 'number': 106, 'closed': datetime.datetime(2021, 4, 14, 1, 33, 14, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 4, 10, 12, 5, 1, tzinfo=datetime.timezone.utc), 'time_taken': 307693.0, 'time_delta': '3 days, 13:28:13', 'additions': 82, 'deletions': 44, 'state': 'closed'}]"
84102610,openwisp-users,openwisp/openwisp-users,Python,73,164,19,41,472,8,10,0,"[{'id': 706812717, 'number': 269, 'closed': datetime.datetime(2021, 8, 19, 19, 40, 6, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 9, 20, 20, 37, tzinfo=datetime.timezone.utc), 'time_taken': 861569.0, 'time_delta': '9 days, 23:19:29', 'additions': 38, 'deletions': 1, 'state': 'closed'}, {'id': 681803480, 'number': 264, 'closed': datetime.datetime(2021, 10, 26, 0, 24, 32, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 1, 12, 16, 46, tzinfo=datetime.timezone.utc), 'time_taken': 10066066.0, 'time_delta': '116 days, 12:07:46', 'additions': 1666, 'deletions': 0, 'state': 'closed'}, {'id': 668815422, 'number': 260, 'closed': datetime.datetime(2021, 7, 5, 16, 54, 59, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 12, 8, 41, 25, tzinfo=datetime.timezone.utc), 'time_taken': 2016814.0, 'time_delta': '23 days, 8:13:34', 'additions': 87, 'deletions': 5, 'state': 'closed'}, {'id': 668478623, 'number': 258, 'closed': datetime.datetime(2021, 6, 16, 1, 50, 31, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 11, 19, 20, 32, tzinfo=datetime.timezone.utc), 'time_taken': 368999.0, 'time_delta': '4 days, 6:29:59', 'additions': 139, 'deletions': 12, 'state': 'closed'}, {'id': 650616235, 'number': 251, 'closed': datetime.datetime(2021, 6, 1, 16, 45, 43, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 5, 22, 11, 54, 19, tzinfo=datetime.timezone.utc), 'time_taken': 881484.0, 'time_delta': '10 days, 4:51:24', 'additions': 198, 'deletions': 3, 'state': 'closed'}, {'id': 631759218, 'number': 248, 'closed': datetime.datetime(2021, 5, 7, 17, 36, 20, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 5, 6, 18, 52, 54, tzinfo=datetime.timezone.utc), 'time_taken': 81806.0, 'time_delta': '22:43:26', 'additions': 46, 'deletions': 2, 'state': 'closed'}, {'id': 619334145, 'number': 239, 'closed': datetime.datetime(2021, 4, 22, 23, 34, 36, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 4, 20, 13, 38, 11, tzinfo=datetime.timezone.utc), 'time_taken': 208585.0, 'time_delta': '2 days, 9:56:25', 'additions': 32, 'deletions': 1, 'state': 'closed'}]"
1431547,django-rest-framework,encode/django-rest-framework,Python,6797,28049,622,1411,8812,101,18,46,"[{'id': 653688852, 'number': 8009, 'closed': datetime.datetime(2023, 1, 13, 8, 52, 54, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 5, 26, 12, 21, 34, tzinfo=datetime.timezone.utc), 'time_taken': 51568280.0, 'time_delta': '596 days, 20:31:20', 'additions': 30, 'deletions': 5, 'state': 'closed'}]"
