pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
668834761,CATROID-1129 Fade particle effect in/out brick,"Ticket: https://jira.catrob.at/browse/CATROID-1129

### Introduce Particle Effects in Catrobat
* added the new ParticleEffectsFade Brick which has 2 options to fade in or to fade out.
* the particle effects scale will depend on the size of the look, so the bigger the look bigger the ""flame""
* particle default color: red 
* A new particle file will take care of all the default properties of the particle effects so as to not overwhelm the user with many options, some of these properties could now be controlled using custom bricks that will be added later...
* Added a test to check whether the boolean property of the particle effect is switched on or off on the sprite on adding the fade In or fade out brick, please let me know if any further tests are required to be added?
<img src=""https://user-images.githubusercontent.com/19506171/121772907-19019880-cb96-11eb-9e6c-bf76d4162850.gif"" width=""40%""/>


### Your checklist for this pull request
Please review the [contributing guidelines](https://github.com/Catrobat/Catroid/blob/develop/README.md) and [wiki pages](https://github.com/Catrobat/Catroid/wiki/) of this repository.

- [x] Include the name of the Jira ticket in the PR’s title
- [x] Include a summary of the changes plus the relevant context
- [x] Choose the proper base branch (*develop*)
- [x] Confirm that the changes follow the project’s coding guidelines
- [x] Verify that the changes generate no compiler or linter warnings
- [x] Perform a self-review of the changes
- [x] Verify to commit no other files than the intentionally changed ones
- [x] Include reasonable and readable tests verifying the added or changed behavior
- [ ] Confirm that new and existing unit tests pass locally
- [x] Check that the commits’ message style matches the [project’s guideline](https://github.com/Catrobat/Catroid/wiki/Commit-Message-Guidelines)
- [x] Stick to the project’s gitflow workflow
- [x] Verify that your changes do not have any conflicts with the base branch
- [ ] After the PR, verify that all CI checks have passed
- [ ] Post a message in the *catroid-stage* or *catroid-ide* [Slack channel](https://catrobat.slack.com) and ask for a code reviewer
",True,4216,https://api.github.com/repos/Catrobat/Catroid/pulls/4216,https://github.com/Catrobat/Catroid/pull/4216,closed,701,8,23,1,9,29,1,0,[{'name': 'XML Change'}],2021-06-12 10:27:32+00:00,2021-08-10 09:20:28+00:00,5093576.0,"58 days, 22:52:56","[{'comment_id': 650844376, 'comment_body': 'Please declare this as private', 'comment_created': datetime.datetime(2021, 6, 14, 10, 53, 59, tzinfo=datetime.timezone.utc), 'commenter': 'Rawbat', 'type': 'User'}, {'comment_id': 650846225, 'comment_body': 'Please declare this as private', 'comment_created': datetime.datetime(2021, 6, 14, 10, 57, 4, tzinfo=datetime.timezone.utc), 'commenter': 'Rawbat', 'type': 'User'}, {'comment_id': 654746654, 'comment_body': '```suggestion\r\n    <string name=""fade_particle_effect"">Fade %s particle effect</string>\r\n```', 'comment_created': datetime.datetime(2021, 6, 19, 4, 32, 37, tzinfo=datetime.timezone.utc), 'commenter': 'wslany', 'type': 'User'}, {'comment_id': 657652734, 'comment_body': 'Please rebase and further increase compared to the develop branch. ', 'comment_created': datetime.datetime(2021, 6, 24, 6, 10, 7, tzinfo=datetime.timezone.utc), 'commenter': 'wslany', 'type': 'User'}, {'comment_id': 658479983, 'comment_body': '```suggestion\r\n```\r\nThis should not be necessary, because the clone would anyway inherit the property from the original, right?', 'comment_created': datetime.datetime(2021, 6, 25, 5, 15, 25, tzinfo=datetime.timezone.utc), 'commenter': 'wslany', 'type': 'User'}, {'comment_id': 658480372, 'comment_body': '```suggestion\r\n\t\t\t}\r\n\t\t\tassertTrue(sprite.look.hasParticleEffect);\r\n```\r\nThe original also has the property, right?', 'comment_created': datetime.datetime(2021, 6, 25, 5, 16, 37, tzinfo=datetime.timezone.utc), 'commenter': 'wslany', 'type': 'User'}, {'comment_id': 658482022, 'comment_body': ""I am not sure if this will always work, or might sometimes fail. Isn't there is a race condition between the creation of the clone on the stage and the execution of the rest of the test? Maybe a short delay between clicking on the play button in line 141 and the rest of the test would make the test less flaky?"", 'comment_created': datetime.datetime(2021, 6, 25, 5, 21, 40, tzinfo=datetime.timezone.utc), 'commenter': 'wslany', 'type': 'User'}, {'comment_id': 658489138, 'comment_body': '```suggestion\r\n\t\tonView(withId(R.id.button_play)).perform(click());\r\n\t\tonView(isRoot()).perform(CustomActions.wait(100));\r\n\t\tassertTrue(ProjectManager.getInstance().getCurrentSprite().look.hasParticleEffect);\r\n```', 'comment_created': datetime.datetime(2021, 6, 25, 5, 42, 44, tzinfo=datetime.timezone.utc), 'commenter': 'wslany', 'type': 'User'}, {'comment_id': 658494696, 'comment_body': '```suggestion\r\n\tpublic void particleEffectGravityTest() {\r\n\t\tscript.addBrick(new FadeParticleEffectBrick(0));\r\n\t\tscript.addBrick(new WaitBrick(500));\r\n\t\tscript.addBrick(new SetGravityBrick(new Formula(0.0), new Formula(20.0)));\r\n\t\tonView(withId(R.id.button_play)).perform(click());\r\n\t\tProjectManager projectManager = ProjectManager.getInstance();\r\n\t\tLook look = projectManager.getCurrentSprite().look;\r\n\t\tonView(isRoot()).perform(CustomActions.wait(100));\r\n\t\tdouble particleGravityBeforeSceneGravityChange =\r\n\t\t\t\tlook.getParticleEffect().getEmitters().get(0).getGravity().getHighMax();\r\n\t\tassertEquals(particleGravityBeforeSceneGravityChange , -10.0, 0.0);\r\n\t\tonView(isRoot()).perform(CustomActions.wait(100));\r\n\t\tdouble particleGravityAfterSceneGravityChange =\r\n\t\t\t\tlook.getParticleEffect().getEmitters().get(0).getGravity().getHighMax();\r\n\t\tassertEquals(particleGravityAfterSceneGravityChange , 20.0, 0.0);\r\n\t}\r\n```\r\n', 'comment_created': datetime.datetime(2021, 6, 25, 5, 57, 35, tzinfo=datetime.timezone.utc), 'commenter': 'wslany', 'type': 'User'}, {'comment_id': 659891991, 'comment_body': 'no need for that, the test rule will take care of that for you.\r\nfor more info see `BaseActivityTestRule.java`', 'comment_created': datetime.datetime(2021, 6, 28, 15, 29, 45, tzinfo=datetime.timezone.utc), 'commenter': 'ndrnour', 'type': 'User'}, {'comment_id': 659897163, 'comment_body': 'please make them public (just remove private access modifier). and use them in the test instead of 0 and 1.', 'comment_created': datetime.datetime(2021, 6, 28, 15, 35, 48, tzinfo=datetime.timezone.utc), 'commenter': 'ndrnour', 'type': 'User'}, {'comment_id': 659897880, 'comment_body': '@here', 'comment_created': datetime.datetime(2021, 6, 28, 15, 36, 43, tzinfo=datetime.timezone.utc), 'commenter': 'ndrnour', 'type': 'User'}, {'comment_id': 659898047, 'comment_body': '@here', 'comment_created': datetime.datetime(2021, 6, 28, 15, 36, 55, tzinfo=datetime.timezone.utc), 'commenter': 'ndrnour', 'type': 'User'}, {'comment_id': 659898250, 'comment_body': '@here', 'comment_created': datetime.datetime(2021, 6, 28, 15, 37, 9, tzinfo=datetime.timezone.utc), 'commenter': 'ndrnour', 'type': 'User'}, {'comment_id': 659898376, 'comment_body': '@here', 'comment_created': datetime.datetime(2021, 6, 28, 15, 37, 19, tzinfo=datetime.timezone.utc), 'commenter': 'ndrnour', 'type': 'User'}, {'comment_id': 659898546, 'comment_body': '@here', 'comment_created': datetime.datetime(2021, 6, 28, 15, 37, 29, tzinfo=datetime.timezone.utc), 'commenter': 'ndrnour', 'type': 'User'}, {'comment_id': 659898794, 'comment_body': '@here', 'comment_created': datetime.datetime(2021, 6, 28, 15, 37, 47, tzinfo=datetime.timezone.utc), 'commenter': 'ndrnour', 'type': 'User'}, {'comment_id': 659899012, 'comment_body': '@here', 'comment_created': datetime.datetime(2021, 6, 28, 15, 38, tzinfo=datetime.timezone.utc), 'commenter': 'ndrnour', 'type': 'User'}, {'comment_id': 659899203, 'comment_body': '@here', 'comment_created': datetime.datetime(2021, 6, 28, 15, 38, 14, tzinfo=datetime.timezone.utc), 'commenter': 'ndrnour', 'type': 'User'}, {'comment_id': 659899299, 'comment_body': '@here', 'comment_created': datetime.datetime(2021, 6, 28, 15, 38, 22, tzinfo=datetime.timezone.utc), 'commenter': 'ndrnour', 'type': 'User'}, {'comment_id': 659899563, 'comment_body': 'see @here annotations', 'comment_created': datetime.datetime(2021, 6, 28, 15, 38, 44, tzinfo=datetime.timezone.utc), 'commenter': 'ndrnour', 'type': 'User'}, {'comment_id': 659900663, 'comment_body': '```suggestion\r\n    private var fadeSpinnerSelectionId: Int = FADE_IN\r\n```\r\nand please remove the constructor at line 44', 'comment_created': datetime.datetime(2021, 6, 28, 15, 40, 5, tzinfo=datetime.timezone.utc), 'commenter': 'ndrnour', 'type': 'User'}, {'comment_id': 666805943, 'comment_body': '```suggestion\r\n    @Test\r\n    fun particleEffectOnCloneOnlyTest() {\r\n        script.addBrick(FadeParticleEffectBrick(FADE_IN))\r\n        script.addBrick(CloneBrick())\r\n        script.addBrick(FadeParticleEffectBrick(FADE_OUT))\r\n        onView(ViewMatchers.withId(R.id.button_play)).perform(click())\r\n        onView(ViewMatchers.isRoot()).perform(wait(150))\r\n\r\n        val sprites = StageActivity.stageListener.spritesFromStage\r\n        var cloneFound = false\r\n        for (sprite in sprites) {\r\n            if (sprite.isClone) {\r\n                cloneFound = true\r\n                assertTrue(sprite.look.hasParticleEffect)\r\n            } else\r\n            {\r\n                assertFalse(sprite.look.hasParticleEffect)\r\n            }                           \r\n        }\r\n\r\n        if (!cloneFound) {\r\n            Assert.fail(""No Clone Found"")\r\n        }\r\n    }\r\n\r\n    @Test\r\n    fun particleEffectOnOriginalOnlyTest() {\r\n        script.addBrick(CloneBrick())\r\n        script.addBrick(FadeParticleEffectBrick(FADE_IN))\r\n        onView(ViewMatchers.withId(R.id.button_play)).perform(click())\r\n        onView(ViewMatchers.isRoot()).perform(wait(150))\r\n\r\n        val sprites = StageActivity.stageListener.spritesFromStage\r\n        var cloneFound = false\r\n        for (sprite in sprites) {\r\n            if (sprite.isClone) {\r\n                cloneFound = true\r\n                assertFalse(sprite.look.hasParticleEffect)\r\n            } else\r\n            {\r\n                assertTrue(sprite.look.hasParticleEffect)\r\n            }                           \r\n        }\r\n\r\n        if (!cloneFound) {\r\n            Assert.fail(""No Clone Found"")\r\n        }\r\n    }\r\n```\r\n\r\nThere was a race condition between the creation of the clone on the stage and the execution of the rest of the test, so I suggest to add a short delay between clicking on the play button and the rest of the test would make the test less flaky. Case in point, this test failed in the last test execution on Jenkins at https://jenkins.catrob.at/job/Catroid/job/PR-4216/32/testReport/org.catrobat.catroid.uiespresso.content.brick.stage/ParticleEffectsTest/All___2___Pull_Request_Suite___particleEffectOnCloneTest/ with\r\n\r\n**Stacktrace:**\r\n```\r\njava.lang.AssertionError: No Clone Found\r\nat org.junit.Assert.fail(Assert.java:88)\r\nat org.catrobat.catroid.uiespresso.content.brick.stage.ParticleEffectsTest.particleEffectOnCloneTest(ParticleEffectsTest.kt:158)\r\n```\r\n\r\nAlso, this test now checks that if the original turns off the effect _after_ creating the clone _with_ the effect, the clone still has the effect turned on, but not the original.\r\n\r\nAlso, there\'s a second test that checks that if the order of the bricks is reversed, the clone does _not_ have the effect turned on while the original does.', 'comment_created': datetime.datetime(2021, 7, 9, 9, 20, 44, tzinfo=datetime.timezone.utc), 'commenter': 'wslany', 'type': 'User'}, {'comment_id': 666831634, 'comment_body': '```suggestion\r\n    @Test\r\n    fun particleEffectFadeOutTest() {\r\n        script.addBrick(FadeParticleEffectBrick(FADE_OUT))\r\n        onView(ViewMatchers.withId(R.id.button_play)).perform(click())\r\n        assertFalse(projectManager.currentSprite.look.hasParticleEffect)\r\n        onView(ViewMatchers.isRoot()).perform(wait(200))\r\n        assertFalse(projectManager.currentSprite.look.hasParticleEffect)\r\n    }\r\n```\r\nJust to make sure, since the effect is turned off initially anyway, and we want to be sure that it stays so even when the brick is executed with the FADE_OUT option. This may also avoid a race condition between the execution of the brick and when the assert is executed: without the additional delay, the test could succeed even if the brick does not work as intended, simply because the stage was slower than the assert being executed.', 'comment_created': datetime.datetime(2021, 7, 9, 10, 1, 1, tzinfo=datetime.timezone.utc), 'commenter': 'wslany', 'type': 'User'}, {'comment_id': 666857950, 'comment_body': '```suggestion\r\n    fun particleEffectFadeInOutTest() {\r\n        script.addBrick(WaitBrick(100))\r\n        script.addBrick(FadeParticleEffectBrick(FADE_IN))\r\n        script.addBrick(WaitBrick(100))\r\n        script.addBrick(FadeParticleEffectBrick(FADE_OUT))\r\n        onView(ViewMatchers.withId(R.id.button_play)).perform(click())\r\n        assertFalse(projectManager.currentSprite.look.hasParticleEffect)\r\n        onView(ViewMatchers.isRoot()).perform(wait(150))\r\n        assertTrue(projectManager.currentSprite.look.hasParticleEffect)\r\n        onView(ViewMatchers.isRoot()).perform(wait(100))\r\n        assertFalse(projectManager.currentSprite.look.hasParticleEffect)\r\n    }\r\n```\r\nThis tests the fade in and out behavior, and also the initial state, in an interleaved way that should ensure that there is enough time to change the respective setting (I hope --- otherwise please increase the delays), and also that the most important cases are tested.', 'comment_created': datetime.datetime(2021, 7, 9, 10, 47, 22, tzinfo=datetime.timezone.utc), 'commenter': 'wslany', 'type': 'User'}, {'comment_id': 666858467, 'comment_body': 'Nice 😄 .', 'comment_created': datetime.datetime(2021, 7, 9, 10, 48, 24, tzinfo=datetime.timezone.utc), 'commenter': 'wslany', 'type': 'User'}, {'comment_id': 666860096, 'comment_body': '```suggestion\r\n```\r\n\r\nThis contained another race condition, which assumed that the 2000ms wait was exactly synchronized. The delay is also too long. \r\n\r\nAlso, no comments please.\r\n\r\nBut, now this test is anyway already tested with the first test case above (particleEffectFadeInOutTest), so no need for it here.', 'comment_created': datetime.datetime(2021, 7, 9, 10, 51, 27, tzinfo=datetime.timezone.utc), 'commenter': 'wslany', 'type': 'User'}, {'comment_id': 666861886, 'comment_body': '```suggestion\r\n    @Test\r\n    fun particleEffectVisibleEvenWhenNoBackgroundTest() {\r\n        script.addBrick(FadeParticleEffectBrick(FADE_IN))\r\n        onView(ViewMatchers.withId(R.id.button_play)).perform(click())\r\n        onView(ViewMatchers.isRoot()).perform(wait(100))\r\n        assertFalse(sprite.look.isAdditive)\r\n    }\r\n```\r\n\r\nNo comments please. The meaning is clear enough anyway because of the names of the test and the method. Just a wait to avoid another race condition. ', 'comment_created': datetime.datetime(2021, 7, 9, 10, 55, 2, tzinfo=datetime.timezone.utc), 'commenter': 'wslany', 'type': 'User'}, {'comment_id': 666863318, 'comment_body': '```suggestion\r\n    @Test\r\n    fun enableAdditiveByDefaultWhenBackgroundLookAvailableTest() {\r\n        projectManager.currentlyEditedScene.backgroundSprite.lookList.add(LookData())\r\n        script.addBrick(FadeParticleEffectBrick(FADE_IN))\r\n        onView(ViewMatchers.withId(R.id.button_play)).perform(click())\r\n        onView(ViewMatchers.isRoot()).perform(wait(150))\r\n        assertTrue(sprite.look.isAdditive)\r\n    }\r\n```\r\n\r\nNo comments please. The meaning is clear enough anyway because of the names of the test and the method. Just a wait to avoid another race condition.', 'comment_created': datetime.datetime(2021, 7, 9, 10, 57, 44, tzinfo=datetime.timezone.utc), 'commenter': 'wslany', 'type': 'User'}]","[{'commit_sha': 'ec91795c79ea31de26dd2f750bb044adf624593b', 'committer_username': 'devsebastian', 'committer_name': 'Dev Sebastian', 'committer_email': 'devsebastian@gmail.com', 'commit_date': datetime.datetime(2016, 5, 21, 14, 45, 47, tzinfo=datetime.timezone.utc)}]",Dev Sebastian,19506171,devsebastian@gmail.com,User,,16,,5,32
668834761,CATROID-1129 Fade particle effect in/out brick,"Ticket: https://jira.catrob.at/browse/CATROID-1129

### Introduce Particle Effects in Catrobat
* added the new ParticleEffectsFade Brick which has 2 options to fade in or to fade out.
* the particle effects scale will depend on the size of the look, so the bigger the look bigger the ""flame""
* particle default color: red 
* A new particle file will take care of all the default properties of the particle effects so as to not overwhelm the user with many options, some of these properties could now be controlled using custom bricks that will be added later...
* Added a test to check whether the boolean property of the particle effect is switched on or off on the sprite on adding the fade In or fade out brick, please let me know if any further tests are required to be added?
<img src=""https://user-images.githubusercontent.com/19506171/121772907-19019880-cb96-11eb-9e6c-bf76d4162850.gif"" width=""40%""/>


### Your checklist for this pull request
Please review the [contributing guidelines](https://github.com/Catrobat/Catroid/blob/develop/README.md) and [wiki pages](https://github.com/Catrobat/Catroid/wiki/) of this repository.

- [x] Include the name of the Jira ticket in the PR’s title
- [x] Include a summary of the changes plus the relevant context
- [x] Choose the proper base branch (*develop*)
- [x] Confirm that the changes follow the project’s coding guidelines
- [x] Verify that the changes generate no compiler or linter warnings
- [x] Perform a self-review of the changes
- [x] Verify to commit no other files than the intentionally changed ones
- [x] Include reasonable and readable tests verifying the added or changed behavior
- [ ] Confirm that new and existing unit tests pass locally
- [x] Check that the commits’ message style matches the [project’s guideline](https://github.com/Catrobat/Catroid/wiki/Commit-Message-Guidelines)
- [x] Stick to the project’s gitflow workflow
- [x] Verify that your changes do not have any conflicts with the base branch
- [ ] After the PR, verify that all CI checks have passed
- [ ] Post a message in the *catroid-stage* or *catroid-ide* [Slack channel](https://catrobat.slack.com) and ask for a code reviewer
",True,4216,https://api.github.com/repos/Catrobat/Catroid/pulls/4216,https://github.com/Catrobat/Catroid/pull/4216,closed,701,8,23,1,9,29,1,0,[{'name': 'XML Change'}],2021-06-12 10:27:32+00:00,2021-08-10 09:20:28+00:00,5093576.0,"58 days, 22:52:56","[{'comment_id': 650844376, 'comment_body': 'Please declare this as private', 'comment_created': datetime.datetime(2021, 6, 14, 10, 53, 59, tzinfo=datetime.timezone.utc), 'commenter': 'Rawbat', 'type': 'User'}, {'comment_id': 650846225, 'comment_body': 'Please declare this as private', 'comment_created': datetime.datetime(2021, 6, 14, 10, 57, 4, tzinfo=datetime.timezone.utc), 'commenter': 'Rawbat', 'type': 'User'}, {'comment_id': 654746654, 'comment_body': '```suggestion\r\n    <string name=""fade_particle_effect"">Fade %s particle effect</string>\r\n```', 'comment_created': datetime.datetime(2021, 6, 19, 4, 32, 37, tzinfo=datetime.timezone.utc), 'commenter': 'wslany', 'type': 'User'}, {'comment_id': 657652734, 'comment_body': 'Please rebase and further increase compared to the develop branch. ', 'comment_created': datetime.datetime(2021, 6, 24, 6, 10, 7, tzinfo=datetime.timezone.utc), 'commenter': 'wslany', 'type': 'User'}, {'comment_id': 658479983, 'comment_body': '```suggestion\r\n```\r\nThis should not be necessary, because the clone would anyway inherit the property from the original, right?', 'comment_created': datetime.datetime(2021, 6, 25, 5, 15, 25, tzinfo=datetime.timezone.utc), 'commenter': 'wslany', 'type': 'User'}, {'comment_id': 658480372, 'comment_body': '```suggestion\r\n\t\t\t}\r\n\t\t\tassertTrue(sprite.look.hasParticleEffect);\r\n```\r\nThe original also has the property, right?', 'comment_created': datetime.datetime(2021, 6, 25, 5, 16, 37, tzinfo=datetime.timezone.utc), 'commenter': 'wslany', 'type': 'User'}, {'comment_id': 658482022, 'comment_body': ""I am not sure if this will always work, or might sometimes fail. Isn't there is a race condition between the creation of the clone on the stage and the execution of the rest of the test? Maybe a short delay between clicking on the play button in line 141 and the rest of the test would make the test less flaky?"", 'comment_created': datetime.datetime(2021, 6, 25, 5, 21, 40, tzinfo=datetime.timezone.utc), 'commenter': 'wslany', 'type': 'User'}, {'comment_id': 658489138, 'comment_body': '```suggestion\r\n\t\tonView(withId(R.id.button_play)).perform(click());\r\n\t\tonView(isRoot()).perform(CustomActions.wait(100));\r\n\t\tassertTrue(ProjectManager.getInstance().getCurrentSprite().look.hasParticleEffect);\r\n```', 'comment_created': datetime.datetime(2021, 6, 25, 5, 42, 44, tzinfo=datetime.timezone.utc), 'commenter': 'wslany', 'type': 'User'}, {'comment_id': 658494696, 'comment_body': '```suggestion\r\n\tpublic void particleEffectGravityTest() {\r\n\t\tscript.addBrick(new FadeParticleEffectBrick(0));\r\n\t\tscript.addBrick(new WaitBrick(500));\r\n\t\tscript.addBrick(new SetGravityBrick(new Formula(0.0), new Formula(20.0)));\r\n\t\tonView(withId(R.id.button_play)).perform(click());\r\n\t\tProjectManager projectManager = ProjectManager.getInstance();\r\n\t\tLook look = projectManager.getCurrentSprite().look;\r\n\t\tonView(isRoot()).perform(CustomActions.wait(100));\r\n\t\tdouble particleGravityBeforeSceneGravityChange =\r\n\t\t\t\tlook.getParticleEffect().getEmitters().get(0).getGravity().getHighMax();\r\n\t\tassertEquals(particleGravityBeforeSceneGravityChange , -10.0, 0.0);\r\n\t\tonView(isRoot()).perform(CustomActions.wait(100));\r\n\t\tdouble particleGravityAfterSceneGravityChange =\r\n\t\t\t\tlook.getParticleEffect().getEmitters().get(0).getGravity().getHighMax();\r\n\t\tassertEquals(particleGravityAfterSceneGravityChange , 20.0, 0.0);\r\n\t}\r\n```\r\n', 'comment_created': datetime.datetime(2021, 6, 25, 5, 57, 35, tzinfo=datetime.timezone.utc), 'commenter': 'wslany', 'type': 'User'}, {'comment_id': 659891991, 'comment_body': 'no need for that, the test rule will take care of that for you.\r\nfor more info see `BaseActivityTestRule.java`', 'comment_created': datetime.datetime(2021, 6, 28, 15, 29, 45, tzinfo=datetime.timezone.utc), 'commenter': 'ndrnour', 'type': 'User'}, {'comment_id': 659897163, 'comment_body': 'please make them public (just remove private access modifier). and use them in the test instead of 0 and 1.', 'comment_created': datetime.datetime(2021, 6, 28, 15, 35, 48, tzinfo=datetime.timezone.utc), 'commenter': 'ndrnour', 'type': 'User'}, {'comment_id': 659897880, 'comment_body': '@here', 'comment_created': datetime.datetime(2021, 6, 28, 15, 36, 43, tzinfo=datetime.timezone.utc), 'commenter': 'ndrnour', 'type': 'User'}, {'comment_id': 659898047, 'comment_body': '@here', 'comment_created': datetime.datetime(2021, 6, 28, 15, 36, 55, tzinfo=datetime.timezone.utc), 'commenter': 'ndrnour', 'type': 'User'}, {'comment_id': 659898250, 'comment_body': '@here', 'comment_created': datetime.datetime(2021, 6, 28, 15, 37, 9, tzinfo=datetime.timezone.utc), 'commenter': 'ndrnour', 'type': 'User'}, {'comment_id': 659898376, 'comment_body': '@here', 'comment_created': datetime.datetime(2021, 6, 28, 15, 37, 19, tzinfo=datetime.timezone.utc), 'commenter': 'ndrnour', 'type': 'User'}, {'comment_id': 659898546, 'comment_body': '@here', 'comment_created': datetime.datetime(2021, 6, 28, 15, 37, 29, tzinfo=datetime.timezone.utc), 'commenter': 'ndrnour', 'type': 'User'}, {'comment_id': 659898794, 'comment_body': '@here', 'comment_created': datetime.datetime(2021, 6, 28, 15, 37, 47, tzinfo=datetime.timezone.utc), 'commenter': 'ndrnour', 'type': 'User'}, {'comment_id': 659899012, 'comment_body': '@here', 'comment_created': datetime.datetime(2021, 6, 28, 15, 38, tzinfo=datetime.timezone.utc), 'commenter': 'ndrnour', 'type': 'User'}, {'comment_id': 659899203, 'comment_body': '@here', 'comment_created': datetime.datetime(2021, 6, 28, 15, 38, 14, tzinfo=datetime.timezone.utc), 'commenter': 'ndrnour', 'type': 'User'}, {'comment_id': 659899299, 'comment_body': '@here', 'comment_created': datetime.datetime(2021, 6, 28, 15, 38, 22, tzinfo=datetime.timezone.utc), 'commenter': 'ndrnour', 'type': 'User'}, {'comment_id': 659899563, 'comment_body': 'see @here annotations', 'comment_created': datetime.datetime(2021, 6, 28, 15, 38, 44, tzinfo=datetime.timezone.utc), 'commenter': 'ndrnour', 'type': 'User'}, {'comment_id': 659900663, 'comment_body': '```suggestion\r\n    private var fadeSpinnerSelectionId: Int = FADE_IN\r\n```\r\nand please remove the constructor at line 44', 'comment_created': datetime.datetime(2021, 6, 28, 15, 40, 5, tzinfo=datetime.timezone.utc), 'commenter': 'ndrnour', 'type': 'User'}, {'comment_id': 666805943, 'comment_body': '```suggestion\r\n    @Test\r\n    fun particleEffectOnCloneOnlyTest() {\r\n        script.addBrick(FadeParticleEffectBrick(FADE_IN))\r\n        script.addBrick(CloneBrick())\r\n        script.addBrick(FadeParticleEffectBrick(FADE_OUT))\r\n        onView(ViewMatchers.withId(R.id.button_play)).perform(click())\r\n        onView(ViewMatchers.isRoot()).perform(wait(150))\r\n\r\n        val sprites = StageActivity.stageListener.spritesFromStage\r\n        var cloneFound = false\r\n        for (sprite in sprites) {\r\n            if (sprite.isClone) {\r\n                cloneFound = true\r\n                assertTrue(sprite.look.hasParticleEffect)\r\n            } else\r\n            {\r\n                assertFalse(sprite.look.hasParticleEffect)\r\n            }                           \r\n        }\r\n\r\n        if (!cloneFound) {\r\n            Assert.fail(""No Clone Found"")\r\n        }\r\n    }\r\n\r\n    @Test\r\n    fun particleEffectOnOriginalOnlyTest() {\r\n        script.addBrick(CloneBrick())\r\n        script.addBrick(FadeParticleEffectBrick(FADE_IN))\r\n        onView(ViewMatchers.withId(R.id.button_play)).perform(click())\r\n        onView(ViewMatchers.isRoot()).perform(wait(150))\r\n\r\n        val sprites = StageActivity.stageListener.spritesFromStage\r\n        var cloneFound = false\r\n        for (sprite in sprites) {\r\n            if (sprite.isClone) {\r\n                cloneFound = true\r\n                assertFalse(sprite.look.hasParticleEffect)\r\n            } else\r\n            {\r\n                assertTrue(sprite.look.hasParticleEffect)\r\n            }                           \r\n        }\r\n\r\n        if (!cloneFound) {\r\n            Assert.fail(""No Clone Found"")\r\n        }\r\n    }\r\n```\r\n\r\nThere was a race condition between the creation of the clone on the stage and the execution of the rest of the test, so I suggest to add a short delay between clicking on the play button and the rest of the test would make the test less flaky. Case in point, this test failed in the last test execution on Jenkins at https://jenkins.catrob.at/job/Catroid/job/PR-4216/32/testReport/org.catrobat.catroid.uiespresso.content.brick.stage/ParticleEffectsTest/All___2___Pull_Request_Suite___particleEffectOnCloneTest/ with\r\n\r\n**Stacktrace:**\r\n```\r\njava.lang.AssertionError: No Clone Found\r\nat org.junit.Assert.fail(Assert.java:88)\r\nat org.catrobat.catroid.uiespresso.content.brick.stage.ParticleEffectsTest.particleEffectOnCloneTest(ParticleEffectsTest.kt:158)\r\n```\r\n\r\nAlso, this test now checks that if the original turns off the effect _after_ creating the clone _with_ the effect, the clone still has the effect turned on, but not the original.\r\n\r\nAlso, there\'s a second test that checks that if the order of the bricks is reversed, the clone does _not_ have the effect turned on while the original does.', 'comment_created': datetime.datetime(2021, 7, 9, 9, 20, 44, tzinfo=datetime.timezone.utc), 'commenter': 'wslany', 'type': 'User'}, {'comment_id': 666831634, 'comment_body': '```suggestion\r\n    @Test\r\n    fun particleEffectFadeOutTest() {\r\n        script.addBrick(FadeParticleEffectBrick(FADE_OUT))\r\n        onView(ViewMatchers.withId(R.id.button_play)).perform(click())\r\n        assertFalse(projectManager.currentSprite.look.hasParticleEffect)\r\n        onView(ViewMatchers.isRoot()).perform(wait(200))\r\n        assertFalse(projectManager.currentSprite.look.hasParticleEffect)\r\n    }\r\n```\r\nJust to make sure, since the effect is turned off initially anyway, and we want to be sure that it stays so even when the brick is executed with the FADE_OUT option. This may also avoid a race condition between the execution of the brick and when the assert is executed: without the additional delay, the test could succeed even if the brick does not work as intended, simply because the stage was slower than the assert being executed.', 'comment_created': datetime.datetime(2021, 7, 9, 10, 1, 1, tzinfo=datetime.timezone.utc), 'commenter': 'wslany', 'type': 'User'}, {'comment_id': 666857950, 'comment_body': '```suggestion\r\n    fun particleEffectFadeInOutTest() {\r\n        script.addBrick(WaitBrick(100))\r\n        script.addBrick(FadeParticleEffectBrick(FADE_IN))\r\n        script.addBrick(WaitBrick(100))\r\n        script.addBrick(FadeParticleEffectBrick(FADE_OUT))\r\n        onView(ViewMatchers.withId(R.id.button_play)).perform(click())\r\n        assertFalse(projectManager.currentSprite.look.hasParticleEffect)\r\n        onView(ViewMatchers.isRoot()).perform(wait(150))\r\n        assertTrue(projectManager.currentSprite.look.hasParticleEffect)\r\n        onView(ViewMatchers.isRoot()).perform(wait(100))\r\n        assertFalse(projectManager.currentSprite.look.hasParticleEffect)\r\n    }\r\n```\r\nThis tests the fade in and out behavior, and also the initial state, in an interleaved way that should ensure that there is enough time to change the respective setting (I hope --- otherwise please increase the delays), and also that the most important cases are tested.', 'comment_created': datetime.datetime(2021, 7, 9, 10, 47, 22, tzinfo=datetime.timezone.utc), 'commenter': 'wslany', 'type': 'User'}, {'comment_id': 666858467, 'comment_body': 'Nice 😄 .', 'comment_created': datetime.datetime(2021, 7, 9, 10, 48, 24, tzinfo=datetime.timezone.utc), 'commenter': 'wslany', 'type': 'User'}, {'comment_id': 666860096, 'comment_body': '```suggestion\r\n```\r\n\r\nThis contained another race condition, which assumed that the 2000ms wait was exactly synchronized. The delay is also too long. \r\n\r\nAlso, no comments please.\r\n\r\nBut, now this test is anyway already tested with the first test case above (particleEffectFadeInOutTest), so no need for it here.', 'comment_created': datetime.datetime(2021, 7, 9, 10, 51, 27, tzinfo=datetime.timezone.utc), 'commenter': 'wslany', 'type': 'User'}, {'comment_id': 666861886, 'comment_body': '```suggestion\r\n    @Test\r\n    fun particleEffectVisibleEvenWhenNoBackgroundTest() {\r\n        script.addBrick(FadeParticleEffectBrick(FADE_IN))\r\n        onView(ViewMatchers.withId(R.id.button_play)).perform(click())\r\n        onView(ViewMatchers.isRoot()).perform(wait(100))\r\n        assertFalse(sprite.look.isAdditive)\r\n    }\r\n```\r\n\r\nNo comments please. The meaning is clear enough anyway because of the names of the test and the method. Just a wait to avoid another race condition. ', 'comment_created': datetime.datetime(2021, 7, 9, 10, 55, 2, tzinfo=datetime.timezone.utc), 'commenter': 'wslany', 'type': 'User'}, {'comment_id': 666863318, 'comment_body': '```suggestion\r\n    @Test\r\n    fun enableAdditiveByDefaultWhenBackgroundLookAvailableTest() {\r\n        projectManager.currentlyEditedScene.backgroundSprite.lookList.add(LookData())\r\n        script.addBrick(FadeParticleEffectBrick(FADE_IN))\r\n        onView(ViewMatchers.withId(R.id.button_play)).perform(click())\r\n        onView(ViewMatchers.isRoot()).perform(wait(150))\r\n        assertTrue(sprite.look.isAdditive)\r\n    }\r\n```\r\n\r\nNo comments please. The meaning is clear enough anyway because of the names of the test and the method. Just a wait to avoid another race condition.', 'comment_created': datetime.datetime(2021, 7, 9, 10, 57, 44, tzinfo=datetime.timezone.utc), 'commenter': 'wslany', 'type': 'User'}]","[{'commit_sha': 'ec91795c79ea31de26dd2f750bb044adf624593b', 'committer_username': 'devsebastian', 'committer_name': 'Dev Sebastian', 'committer_email': 'devsebastian@gmail.com', 'commit_date': datetime.datetime(2016, 5, 21, 14, 45, 47, tzinfo=datetime.timezone.utc)}]",Dev Sebastian,19506171,devsebastian@gmail.com,User,,16,,5,32
686683471,"CATROID-1155 ""Turn the particle effect's additivity off/on"" brick","Ticket: https://jira.catrob.at/browse/CATROID-1155

""Turn the particle effect's additivity off/on"" brick

### Your checklist for this pull request
Please review the [contributing guidelines](https://github.com/Catrobat/Catroid/blob/develop/README.md) and [wiki pages](https://github.com/Catrobat/Catroid/wiki/) of this repository.

- [x] Include the name of the Jira ticket in the PR’s title
- [x] Include a summary of the changes plus the relevant context
- [x] Choose the proper base branch (*develop*)
- [x] Confirm that the changes follow the project’s coding guidelines
- [x] Verify that the changes generate no compiler or linter warnings
- [x] Perform a self-review of the changes
- [x] Verify to commit no other files than the intentionally changed ones
- [x] Include reasonable and readable tests verifying the added or changed behavior
- [x] Confirm that new and existing unit tests pass locally
- [x] Check that the commits’ message style matches the [project’s guideline](https://github.com/Catrobat/Catroid/wiki/Commit-Message-Guidelines)
- [x] Stick to the project’s gitflow workflow
- [x] Verify that your changes do not have any conflicts with the base branch
- [ ] After the PR, verify that all CI checks have passed
- [ ] Post a message in the *catroid-stage* or *catroid-ide* [Slack channel](https://catrobat.slack.com) and ask for a code reviewer
",True,4257,https://api.github.com/repos/Catrobat/Catroid/pulls/4257,https://github.com/Catrobat/Catroid/pull/4257,closed,399,1,13,1,1,3,1,0,[{'name': 'XML Change'}],2021-07-09 10:38:25+00:00,2021-08-17 16:11:24+00:00,3389579.0,"39 days, 5:32:59","[{'comment_id': 687810218, 'comment_body': 'Add a newline please :)', 'comment_created': datetime.datetime(2021, 8, 12, 15, 3, 19, tzinfo=datetime.timezone.utc), 'commenter': 'Rawbat', 'type': 'User'}, {'comment_id': 688665349, 'comment_body': 'Shall I wait for these two things (tests, and/or newline) before merging, or can we do that in another PR?', 'comment_created': datetime.datetime(2021, 8, 13, 17, 15, 29, tzinfo=datetime.timezone.utc), 'commenter': 'wslany', 'type': 'User'}, {'comment_id': 688683177, 'comment_body': 'Dev already explained to me that the test can be ingored for now and the missing newline is not a pressing issue. So I would say this PR can be merged.', 'comment_created': datetime.datetime(2021, 8, 13, 17, 47, 20, tzinfo=datetime.timezone.utc), 'commenter': 'Rawbat', 'type': 'User'}]","[{'commit_sha': 'd23880475ff1c6a01dbe1168b96c066ab0156211', 'committer_username': 'devsebastian', 'committer_name': 'Dev Sebastian', 'committer_email': 'devsebastian@gmail.com', 'commit_date': datetime.datetime(2016, 5, 21, 14, 45, 47, tzinfo=datetime.timezone.utc)}]",Dev Sebastian,19506171,devsebastian@gmail.com,User,,16,,5,32
