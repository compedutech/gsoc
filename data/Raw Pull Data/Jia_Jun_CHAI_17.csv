pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
431790184,Add POT generation feature in Editor ,"_Context: i18n, localization_

Added ""POT generation"" tab under ""Localization"" to generate translation template files  (known as POT files) from selected files. 

Behind the scene, the system collects all translatable strings from the included files, and write the collected strings to a user-selected POT file.

==============
_Update 23/06/2020_
Added plugin support. Users can now define their custom parser to extract translation strings from custom files (.csv, .json etc.) into the POT file.



![TranslationParserPlugin](https://user-images.githubusercontent.com/23119524/85404126-cc751580-b55e-11ea-9236-04ef91edd23e.png)


Test project:
[test_project.zip](https://github.com/godotengine/godot/files/4819367/test_project.zip)
",True,39415,https://api.github.com/repos/godotengine/godot/pulls/39415,https://github.com/godotengine/godot/pull/39415,closed,1095,2,16,2,5,42,3,0,"[{'name': 'enhancement'}, {'name': 'topic:core'}, {'name': 'topic:editor'}]",2020-06-09 13:22:37+00:00,2020-07-02 20:22:47+00:00,2012410.0,"23 days, 7:00:10","[{'comment_id': 441541721, 'comment_body': ""The trailing `*/` should be properly aligned with the others on the right.\r\n\r\nI'm also not sure that `core/io` is the best place for it, since it's editor-specific, it should go to `editor/`."", 'comment_created': datetime.datetime(2020, 6, 17, 13, 24, 36, tzinfo=datetime.timezone.utc), 'commenter': 'akien-mga', 'type': 'User'}, {'comment_id': 441544284, 'comment_body': 'There\'s more than `.tscn`, scene files can have extension `.scn` (binary format), as well as `.tres` and `.res` (resource extensions, but `PackedScene` is also a resource).\r\n\r\nInstead of hardcoding extensions, you should rely on `ResourceLoader::get_recognized_extensions_for_type()`.\r\nSee e.g.:\r\n```\r\neditor/editor_sub_scene.cpp\r\n256:    ResourceLoader::get_recognized_extensions_for_type(""PackedScene"", &extensions);\r\n```', 'comment_created': datetime.datetime(2020, 6, 17, 13, 28, 5, tzinfo=datetime.timezone.utc), 'commenter': 'akien-mga', 'type': 'User'}, {'comment_id': 441546107, 'comment_body': ""I wondered a few seconds what was the point of doing this, before understanding that it's to generate the comment listing file paths that contain a given string. I'd suggest making that clear with a comment."", 'comment_created': datetime.datetime(2020, 6, 17, 13, 30, 39, tzinfo=datetime.timezone.utc), 'commenter': 'akien-mga', 'type': 'User'}, {'comment_id': 441546470, 'comment_body': ""Nitpick, but we're in the process of standardizing our comment style to `// Starts with capital letter and ends with dot.`, so you might as well follow that convention."", 'comment_created': datetime.datetime(2020, 6, 17, 13, 31, 11, tzinfo=datetime.timezone.utc), 'commenter': 'akien-mga', 'type': 'User'}, {'comment_id': 441547034, 'comment_body': ""Commented out code should be avoiding, but for the time being while it's in development it's OK. But don't put a space after `//` when commenting out code, to clearly separate it from documentation comments."", 'comment_created': datetime.datetime(2020, 6, 17, 13, 32, 2, tzinfo=datetime.timezone.utc), 'commenter': 'akien-mga', 'type': 'User'}, {'comment_id': 441547920, 'comment_body': ""I'd add a comment at the beginning of the method explaining the methodology used, i.e. that only some specific properties are auto-translated by the engine when set, so we look them up in the relevant classes."", 'comment_created': datetime.datetime(2020, 6, 17, 13, 33, 14, tzinfo=datetime.timezone.utc), 'commenter': 'akien-mga', 'type': 'User'}, {'comment_id': 441549149, 'comment_body': ""Use only `Variant::OBJECT`, we don't specify `::Type` as this used to cause build failures (seems it no longer does, maybe C++17 added support for it in the spec, but it's best to stay consistent with the rest of the engine which uses `Variant::TYPE_NAME` directly for `Variant::Type` constants)."", 'comment_created': datetime.datetime(2020, 6, 17, 13, 35, tzinfo=datetime.timezone.utc), 'commenter': 'akien-mga', 'type': 'User'}, {'comment_id': 441550417, 'comment_body': 'Remember that Godot supports many scripting languages: GDScript, VisualScript, C#, NativeScript.\r\nIf the current code only supports GDScript, you should likely cast to `GDScript` directly - or add some further checks to allow implementing support for other languages later on.', 'comment_created': datetime.datetime(2020, 6, 17, 13, 36, 49, tzinfo=datetime.timezone.utc), 'commenter': 'akien-mga', 'type': 'User'}, {'comment_id': 441551519, 'comment_body': ""I guess you might need to validate that you got a result from this `_parse_script` call too before appending it to `parsed_strings`, or you'd get empty `Vector<String>`s in there currently when parsing e.g. a `.cs` file I suppose?"", 'comment_created': datetime.datetime(2020, 6, 17, 13, 38, 20, tzinfo=datetime.timezone.utc), 'commenter': 'akien-mga', 'type': 'User'}, {'comment_id': 441551903, 'comment_body': ""Make sure to always use braces around single line `if` blocks. Sadly `clang-format` can't enforce it, so it has to be ensured manually."", 'comment_created': datetime.datetime(2020, 6, 17, 13, 38, 54, tzinfo=datetime.timezone.utc), 'commenter': 'akien-mga', 'type': 'User'}, {'comment_id': 441553560, 'comment_body': ""I can't remember right away what `filters` are and why we parse them, I'd suggest adding one simple explanatory comment for each step here (checking `script`, `filters`, and String properties)."", 'comment_created': datetime.datetime(2020, 6, 17, 13, 41, 7, tzinfo=datetime.timezone.utc), 'commenter': 'akien-mga', 'type': 'User'}, {'comment_id': 441553676, 'comment_body': 'Same thing, use `Variant::STRING`.', 'comment_created': datetime.datetime(2020, 6, 17, 13, 41, 17, tzinfo=datetime.timezone.utc), 'commenter': 'akien-mga', 'type': 'User'}, {'comment_id': 441554541, 'comment_body': 'Save an indentation level by reversing the logic:\r\n```\r\nif (!ClassDB::is_parent_class(state->get_node_type(i), ""Control"") && !ClassDB::is_parent_class(state->get_node_type(i), ""Viewport"")) {\r\n\tcontinue;\r\n}\r\n\r\nfor (...)\r\n```', 'comment_created': datetime.datetime(2020, 6, 17, 13, 42, 31, tzinfo=datetime.timezone.utc), 'commenter': 'akien-mga', 'type': 'User'}, {'comment_id': 441554895, 'comment_body': 'Same here:\r\n```\r\nif (!lookup_properties.has(property_name)) {\r\n\tcontinue;\r\n}\r\n\r\nproperty_value = ...;\r\n```', 'comment_created': datetime.datetime(2020, 6, 17, 13, 42, 57, tzinfo=datetime.timezone.utc), 'commenter': 'akien-mga', 'type': 'User'}, {'comment_id': 441557196, 'comment_body': ""All this should maybe be moved to a constructor and stored in member variables, since that won't change I think? And you might have to parse a lot of scripts, so recreating this every time is wasteful.\r\n\r\nCould also extend to `regex` below since its first use that depends on `source_code` is at line 181."", 'comment_created': datetime.datetime(2020, 6, 17, 13, 45, 54, tzinfo=datetime.timezone.utc), 'commenter': 'akien-mga', 'type': 'User'}, {'comment_id': 441557576, 'comment_body': 'Use the `p_` prefix for (immutable) parameters, so `p_source_code`.', 'comment_created': datetime.datetime(2020, 6, 17, 13, 46, 22, tzinfo=datetime.timezone.utc), 'commenter': 'akien-mga', 'type': 'User'}, {'comment_id': 441558707, 'comment_body': ""Same as for `_parse_scene`, I'd suggest adding an introductory comment that describes the overall logic of `_parse_script` (not in details, but just broadly speaking, maybe giving an example of the kind of stuff it would match)."", 'comment_created': datetime.datetime(2020, 6, 17, 13, 47, 55, tzinfo=datetime.timezone.utc), 'commenter': 'akien-mga', 'type': 'User'}, {'comment_id': 441559184, 'comment_body': 'Same here, add a comment explaining what this does broadly speaking.', 'comment_created': datetime.datetime(2020, 6, 17, 13, 48, 35, tzinfo=datetime.timezone.utc), 'commenter': 'akien-mga', 'type': 'User'}, {'comment_id': 441560106, 'comment_body': 'To clarify, the overall verbosity of the comments in your code is fine as is, apart from the few locations where I asked for more. We do value having self-commenting code over a ton of comments every other lines stating what each line does.', 'comment_created': datetime.datetime(2020, 6, 17, 13, 49, 53, tzinfo=datetime.timezone.utc), 'commenter': 'akien-mga', 'type': 'User'}, {'comment_id': 441561396, 'comment_body': 'Use `p_` prefix for immutable parameters, `r_` prefix for those passed by reference (thus modified by the function).\r\n\r\nIf `regex` is moved to a member variable as suggested above, you can simplify the prototype some more.', 'comment_created': datetime.datetime(2020, 6, 17, 13, 51, 38, tzinfo=datetime.timezone.utc), 'commenter': 'akien-mga', 'type': 'User'}, {'comment_id': 441563675, 'comment_body': ""Heh, good catch. I didn't think we'd go that deep but it does make sense to localize those too. Now I get what `filters` was in `_parse_scene`."", 'comment_created': datetime.datetime(2020, 6, 17, 13, 54, 41, tzinfo=datetime.timezone.utc), 'commenter': 'akien-mga', 'type': 'User'}, {'comment_id': 441564535, 'comment_body': '`p_results`, `r_output`.', 'comment_created': datetime.datetime(2020, 6, 17, 13, 55, 47, tzinfo=datetime.timezone.utc), 'commenter': 'akien-mga', 'type': 'User'}, {'comment_id': 441566277, 'comment_body': 'Some code linters might raise a warning as this is unused (the only call is commented out), so it might be worth putting both this and the call to `_print_all_translation_strings` being a `//#define DEBUG_POT` + `#ifdef DEBUG_POT` or similar.', 'comment_created': datetime.datetime(2020, 6, 17, 13, 57, 59, tzinfo=datetime.timezone.utc), 'commenter': 'akien-mga', 'type': 'User'}, {'comment_id': 441566611, 'comment_body': 'Alignment.', 'comment_created': datetime.datetime(2020, 6, 17, 13, 58, 29, tzinfo=datetime.timezone.utc), 'commenter': 'akien-mga', 'type': 'User'}, {'comment_id': 441568038, 'comment_body': 'Indeed, matches my previous comment about using `ResourceLoader::get_recognized_extensions_for_type` like done just below.\r\n\r\nSame for `.gd` maybe, in case we add more valid extensions for the `GDScript` resource type in the future.', 'comment_created': datetime.datetime(2020, 6, 17, 14, 0, 16, tzinfo=datetime.timezone.utc), 'commenter': 'akien-mga', 'type': 'User'}, {'comment_id': 442779281, 'comment_body': 'I just checked the definition Vector<T>::append_array(Vector<T>) in vector.h\r\nWe check if vector is empty before we append. So it should be ok. \r\nI will not resolve this conversation yet for reference/reminder when adding multi script languages support.', 'comment_created': datetime.datetime(2020, 6, 19, 11, 9, 32, tzinfo=datetime.timezone.utc), 'commenter': 'SkyLucilfer', 'type': 'User'}, {'comment_id': 444191775, 'comment_body': 'This should be done in `modules/gdscript`, the `editor/*` code should not have dependencies (includes) on modules.\r\n\r\nYou can do it in `modules/gdscript/register_types.cpp::register_gdscript_types()`, so when GDScript is registered, it will also register this translation parser plugin.', 'comment_created': datetime.datetime(2020, 6, 23, 12, 41, 22, tzinfo=datetime.timezone.utc), 'commenter': 'akien-mga', 'type': 'User'}, {'comment_id': 444195546, 'comment_body': ""\r\n\r\nI'm not sure that the standard/custom distinction is necessary, it doesn't seem to be used by other plugin systems which have both built-in plugins and user-defined ones.\r\n\r\nThough indeed `ResourceLoader::_load` currently checks all plugins and takes the first valid one, so I'm not sure how conflicts are handled. So maybe the approach you used it a good idea."", 'comment_created': datetime.datetime(2020, 6, 23, 12, 47, 30, tzinfo=datetime.timezone.utc), 'commenter': 'akien-mga', 'type': 'User'}, {'comment_id': 444196385, 'comment_body': 'Nitpick:\r\n```suggestion\r\n#endif // EDITOR_TRANSLATION_PARSER_H\r\n```', 'comment_created': datetime.datetime(2020, 6, 23, 12, 48, 46, tzinfo=datetime.timezone.utc), 'commenter': 'akien-mga', 'type': 'User'}, {'comment_id': 444197570, 'comment_body': 'This should be moved to an `EditorTranslationParserPlugin` that handles `PackedScene` resources.', 'comment_created': datetime.datetime(2020, 6, 23, 12, 50, 34, tzinfo=datetime.timezone.utc), 'commenter': 'akien-mga', 'type': 'User'}, {'comment_id': 444197915, 'comment_body': 'Use `Object::cast_to<PackedScene>(loaded_res)`.', 'comment_created': datetime.datetime(2020, 6, 23, 12, 51, 8, tzinfo=datetime.timezone.utc), 'commenter': 'akien-mga', 'type': 'User'}, {'comment_id': 444199442, 'comment_body': '```suggestion\r\n#include ""gdscript_translation_parser_plugin.h""\r\n\r\n#include ""core/io/resource_loader.h""\r\n#include ""modules/gdscript/gdscript.h""\r\n```', 'comment_created': datetime.datetime(2020, 6, 23, 12, 53, 40, tzinfo=datetime.timezone.utc), 'commenter': 'akien-mga', 'type': 'User'}, {'comment_id': 444199934, 'comment_body': 'You could actually reuse `GDScriptLanguage::get_recognized_extensions()` here.', 'comment_created': datetime.datetime(2020, 6, 23, 12, 54, 25, tzinfo=datetime.timezone.utc), 'commenter': 'akien-mga', 'type': 'User'}, {'comment_id': 444200279, 'comment_body': 'This should probably check against `get_recognized_extensions`.', 'comment_created': datetime.datetime(2020, 6, 23, 12, 54, 56, tzinfo=datetime.timezone.utc), 'commenter': 'akien-mga', 'type': 'User'}, {'comment_id': 444201799, 'comment_body': '```suggestion\r\n#endif // GDSCRIPT_TRANSLATION_PARSER_PLUGIN_H\r\n```', 'comment_created': datetime.datetime(2020, 6, 23, 12, 57, 11, tzinfo=datetime.timezone.utc), 'commenter': 'akien-mga', 'type': 'User'}, {'comment_id': 444205058, 'comment_body': ""Currently the added dependency on the GDScript module causes a build issue:\r\n```\r\neditor/libeditor.linuxbsd.tools.64.a(editor_translation_parser.linuxbsd.tools.64.o): In function `Ref<EditorTranslationParserPluginGDScript>::instance()':\r\n/home/travis/build/godotengine/godot/./core/reference.h:228: undefined reference to `EditorTranslationParserPluginGDScript::EditorTranslationParserPluginGDScript()'\r\n```"", 'comment_created': datetime.datetime(2020, 6, 23, 13, 2, 15, tzinfo=datetime.timezone.utc), 'commenter': 'akien-mga', 'type': 'User'}, {'comment_id': 444206408, 'comment_body': 'GDScript classes usually start with GDScript, so this should maybe be `GDScriptEditorTranslationParserPlugin`, or just `GDScriptTranslationParserPlugin`.', 'comment_created': datetime.datetime(2020, 6, 23, 13, 4, 12, tzinfo=datetime.timezone.utc), 'commenter': 'akien-mga', 'type': 'User'}, {'comment_id': 444364781, 'comment_body': ""Actually it was just to make it easier to write add_parser() and remove_parser().\r\nI didn't want to write add_standard_parser(), remove_standard_parser(),  add_custom_parser(), remove_custom_parser() so I thought it would be better to just adjust with enum parameter.\r\nBut I could change it if you think not having the enum makes it clearer code."", 'comment_created': datetime.datetime(2020, 6, 23, 16, 46, 25, tzinfo=datetime.timezone.utc), 'commenter': 'SkyLucilfer', 'type': 'User'}, {'comment_id': 444673963, 'comment_body': ""No I'm ok with the enum, I just raised a question on whether we want to distinguish standard and custom parsers, or treat them all the same."", 'comment_created': datetime.datetime(2020, 6, 24, 6, 33, 30, tzinfo=datetime.timezone.utc), 'commenter': 'akien-mga', 'type': 'User'}, {'comment_id': 448174469, 'comment_body': '```suggestion\r\n\tClassDB::add_virtual_method(get_class_static(), MethodInfo(Variant::NIL, ""parse_text"", PropertyInfo(Variant::STRING, ""text""), PropertyInfo(Variant::ARRAY, ""extracted_strings"")));\r\n```', 'comment_created': datetime.datetime(2020, 7, 1, 7, 37, 58, tzinfo=datetime.timezone.utc), 'commenter': 'akien-mga', 'type': 'User'}, {'comment_id': 448594828, 'comment_body': 'Please fill those two descriptions too.', 'comment_created': datetime.datetime(2020, 7, 1, 20, 18, 56, tzinfo=datetime.timezone.utc), 'commenter': 'akien-mga', 'type': 'User'}, {'comment_id': 448926920, 'comment_body': 'This triggers a parse error as `[` and `]` are used to identify BBCode-like tags.\r\n```suggestion\r\n\t\t\t\tGets the list of file extensions to associate with this parser, e.g. [code][""csv""][/code].\r\n```', 'comment_created': datetime.datetime(2020, 7, 2, 11, 12, 58, tzinfo=datetime.timezone.utc), 'commenter': 'akien-mga', 'type': 'User'}]","[{'commit_sha': '1db29d0101816825af6641bbfbbc3cef6d394dc2', 'committer_username': 'SkyLucilfer', 'committer_name': None, 'committer_email': 'jjchai01@hotmail.com', 'commit_date': datetime.datetime(2016, 10, 28, 11, 1, 40, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'efb460942536fcd35aa50fc6dbeb6aeea6917642', 'committer_username': 'SkyLucilfer', 'committer_name': None, 'committer_email': 'jjchai01@hotmail.com', 'commit_date': datetime.datetime(2016, 10, 28, 11, 1, 40, tzinfo=datetime.timezone.utc)}]",,23119524,jjchai01@hotmail.com,User,,5,,1,3
450061008,Added plurals and context support to Translation,"_Context: Translation/i18n_

Added plurals and context support for translation in project and Editor.

### Added API
- For project:
tr_n(message, plural_message, n, context = """")

- For Editor:
TTRN(message, plural_message, n, context = """")
DTRN(message, plural_message, n, context = """")
RTRN(message, plural_message, n, context = """")

- All existing translation functions can now add context with the last argument too.
tr(message, context = """") 
TTR(message, context = """") 
etc.

### Example usage

- Specifying with context:
tr(""Connect"", ""Device"")
tr(""Connect"", ""Signal"")

- Plurals translation:
print(tr_n(""%d user likes this."", ""%d users like this."", n) % n);

- If we want more precise control over the replacement of n in the string during plurals translation:
print(tr_n(""One user likes this."", ""{num} users like this."", n).format([n], ""{num}""));

- In Editor
Some examples from changes in scene_tree_editor.cpp 

![multiple_connections](https://user-images.githubusercontent.com/23119524/87657287-eae3c080-c75a-11ea-8ad3-ef5383bba0f2.png)

![one_connect_multi_groups_en](https://user-images.githubusercontent.com/23119524/87657304-f0410b00-c75a-11ea-8cdd-cbd4437baa26.png)

![one_connect_multi_group_french](https://user-images.githubusercontent.com/23119524/87657328-fa630980-c75a-11ea-90c4-dc9ee8e8bfed.png)

### Test project
[po_parsing_pot_gen_2.zip](https://github.com/godotengine/godot/files/4963116/po_parsing_pot_gen_2.zip)
PO files which I have used to test the updated PO parser are contained in the folder ""PO files"". Also did some tests using the new tr(), tr_n() interfaces in GDScript.
Also tested the POT generation to generate POT files containing msgctxt and msgid_plurals, both for projects and Editor.

### Performance testing [07/08/2020]
[performance_test.zip](https://github.com/godotengine/godot/files/5041681/performance_test.zip)
I have abstracted PO to a specified class, TranslationPO. So translation using CSV will have the same performance as last time, as it uses the same Translation class before this PR.
When we import from a PO file, the imported locale will use the TranslationPO class. For 14000 translations in the dictionary:

- tr() takes 54 ms to translate 10 000 strings ~ 0.005 ms to translate one string. 

- tr_n() takes 
  - 280 ms to translate 10 000 strings ~ 0.028 ms for one string with short plural-rule, like French, German etc.
  - 1250ms to translate 10 000 strings ~ 0.25 ms for one string with very long plural-rule, Arabic

For reference, for a game running at 120 FPS, it takes 8.33 ms to render one frame.
So tr_n() is quite slow, and should be used with care. However, I do cache the last tr_n() result so if a translation query is the same (same key, n and context), it will return very fast. I imagine multiple same queries can happen if an UI element uses tr_n().
I have tried my best to optimize tr_n() - by caching variables, converting recursion to iteration, but it doesn't improve much. The slow runtime comes from the cost of evaluating the plural expression. Right now I use the Expression class. If runtime is really a concern, maybe we could make it faster by writing a dedicated function to evaluate the plural expression without using the Expression class, or hardcoding all possible plural rules and match locale with it.

### Performance testing [27/08/2020]
With the PR #41519, the performance problem of tr_n() is fixed. This is done by having a dedicated file containing all the plural rules.
tr_n() now has roughly the same runtime as tr(), with extra 0.001 ms to translate one string compared to tr().
",True,40443,https://api.github.com/repos/godotengine/godot/pulls/40443,https://github.com/godotengine/godot/pull/40443,closed,1417,302,25,4,14,25,2,0,"[{'name': 'enhancement'}, {'name': 'topic:core'}]",2020-07-16 09:54:18+00:00,2020-08-25 10:11:56+00:00,3457058.0,"40 days, 0:17:38","[{'comment_id': 462594864, 'comment_body': '```suggestion\r\n\tif (p_context == StringName()) {\r\n```', 'comment_created': datetime.datetime(2020, 7, 29, 21, 17, 46, tzinfo=datetime.timezone.utc), 'commenter': 'akien-mga', 'type': 'User'}, {'comment_id': 462595574, 'comment_body': '```suggestion\r\n\t\tSTATUS_READING_PLURAL,\r\n```\r\nin case there will be more values in the future, reduces the diff.', 'comment_created': datetime.datetime(2020, 7, 29, 21, 19, 10, tzinfo=datetime.timezone.utc), 'commenter': 'akien-mga', 'type': 'User'}, {'comment_id': 462599101, 'comment_body': 'Is 9 for `msgstr[x]`, assuming that `x` would always be less than 10?', 'comment_created': datetime.datetime(2020, 7, 29, 21, 26, 24, tzinfo=datetime.timezone.utc), 'commenter': 'akien-mga', 'type': 'User'}, {'comment_id': 462949509, 'comment_body': ""It's a bit weird to have this inconsistency in the API. I guess if we need to return `String` here, we should likely do the same with `tr()`.\r\n\r\nI'm not fully up-to-date on how the String and StringName usage will impact GDScript and other languages, maybe @vnen could shed some light.\r\n\r\nBut it's true that a priori, it makes sense to me for those to return a plain String (StringName is great for comparison / usage as key, but here it will always end up converted to a String for display or formatting I guess)."", 'comment_created': datetime.datetime(2020, 7, 30, 12, 8, 9, tzinfo=datetime.timezone.utc), 'commenter': 'akien-mga', 'type': 'User'}, {'comment_id': 462949910, 'comment_body': 'I guess you could make this static in the `.cpp` and avoid the need to have the debug define in the header.', 'comment_created': datetime.datetime(2020, 7, 30, 12, 8, 57, tzinfo=datetime.timezone.utc), 'commenter': 'akien-mga', 'type': 'User'}, {'comment_id': 462950547, 'comment_body': ""Yeah the purpose only seems to give an array of all messages. I'm not sure what's the use case is beside debugging, so I guess it's fine. Remember to remove those `////` comments before merge BTW :)"", 'comment_created': datetime.datetime(2020, 7, 30, 12, 10, 8, tzinfo=datetime.timezone.utc), 'commenter': 'akien-mga', 'type': 'User'}, {'comment_id': 462953110, 'comment_body': '```suggestion\r\nvoid Translation::set_plural_rule(const String &p_plural_rule) {\r\n\t// Set plural_forms and plural_rule.\r\n\t// p_plural_rule passed in has the form ""Plural-Forms: nplurals=2; plural=(n >= 2);"".\r\n```\r\n\r\nI\'m a bit concerned about having the gettext-specific plural handling directly in the base `Translation`, which is also used for CSV and could theoretically be used by more input formats in the future (though we have no plans to support more than PO and CSV).\r\n\r\nMaybe this should be abstracted some more and the gettext-specific logic should be in a `TranslationPO` Resource?\r\n\r\nWDYT @vnen @YeldhamDev?', 'comment_created': datetime.datetime(2020, 7, 30, 12, 15, 12, tzinfo=datetime.timezone.utc), 'commenter': 'akien-mga', 'type': 'User'}, {'comment_id': 462955134, 'comment_body': 'Nice cleanup :)', 'comment_created': datetime.datetime(2020, 7, 30, 12, 19, 9, tzinfo=datetime.timezone.utc), 'commenter': 'akien-mga', 'type': 'User'}, {'comment_id': 462956206, 'comment_body': 'Maybe we can find clearer names to disambiguate, instead of relying on overloading? They both seem to do quite different things.', 'comment_created': datetime.datetime(2020, 7, 30, 12, 21, 2, tzinfo=datetime.timezone.utc), 'commenter': 'akien-mga', 'type': 'User'}, {'comment_id': 462957543, 'comment_body': 'It would be nice to try to measure the performance impact of using a more complex data structure on a somewhat msg-heavy test project, both for PO files and CSV files.\r\n\r\nThat would help validate that this is the right approach, compared to e.g. using separate `Translation` resources for each context for example.', 'comment_created': datetime.datetime(2020, 7, 30, 12, 23, 38, tzinfo=datetime.timezone.utc), 'commenter': 'akien-mga', 'type': 'User'}, {'comment_id': 462958429, 'comment_body': 'You forgot to define the `TTRN` stub for the `#else` branch, so this will fail compiling `tools=no` once we start using the feature.', 'comment_created': datetime.datetime(2020, 7, 30, 12, 25, 18, tzinfo=datetime.timezone.utc), 'commenter': 'akien-mga', 'type': 'User'}, {'comment_id': 462960137, 'comment_body': '```suggestion\r\n\tif (p_n > 1) {\r\n\t\treturn p_text_plural;\r\n\t}\r\n\treturn p_text_plural;\r\n```\r\nMight be a bit safer if we pass `-1` as `n` for example ;)\r\n\r\nBTW, style wise you can simplify all tests like:\r\n```cpp\r\nif (a) {\r\n\treturn something;\r\n} else {\r\n\treturn other_thing;\r\n}\r\n```\r\nto\r\n```cpp\r\nif (a) {\r\n\treturn something;\r\n}\r\n\r\nreturn other_thing;\r\n```\r\n(where `a` would typically be the most ""special"" condition and the last return would be the default return value)', 'comment_created': datetime.datetime(2020, 7, 30, 12, 28, 29, tzinfo=datetime.timezone.utc), 'commenter': 'akien-mga', 'type': 'User'}, {'comment_id': 462964689, 'comment_body': '```suggestion\r\n\t\t\tmsg_temp += ""\\n"" + TTR(""Click to show signals dock."");\r\n```', 'comment_created': datetime.datetime(2020, 7, 30, 12, 37, 5, tzinfo=datetime.timezone.utc), 'commenter': 'akien-mga', 'type': 'User'}, {'comment_id': 462966190, 'comment_body': '```suggestion\r\n\t\tmsgids_context_plural.append([""Test 1"", ""context"", ""test 1 plurals""]) # This will add a message with msgid ""Test 1"", msgctxt ""context"", and msgid_plural ""test 1 plurals"".\r\n\t\tmsgids_context_plural.append([""A test without context"", """", ""plurals""]) # This will add a message with msgid ""A test without context"" and msgid_plural ""plurals"".\r\n\t\tmsgids_context_plural.append([""Only with context"", ""a friendly context"", """"]) # This will add a message with msgid ""Only with context"" and msgctxt ""a friendly context"".\r\n```\r\nThe line are also a bit long, I\'d suggest putting the comments before each line of code.', 'comment_created': datetime.datetime(2020, 7, 30, 12, 39, 54, tzinfo=datetime.timezone.utc), 'commenter': 'akien-mga', 'type': 'User'}, {'comment_id': 462967354, 'comment_body': '```suggestion\r\n\t\t\tERR_FAIL_COND_V_MSG(arr.size() != 3, ERR_INVALID_DATA, ""Array entries written into `msgids_context_plural` in `parse_file()` method should have the form [\\""message\\"", \\""context\\"", \\""plural message\\""]"");\r\n```\r\nRemoved the class name to make it shorter, and it should already be clear from the location of the error message I think.', 'comment_created': datetime.datetime(2020, 7, 30, 12, 42, 2, tzinfo=datetime.timezone.utc), 'commenter': 'akien-mga', 'type': 'User'}, {'comment_id': 462968106, 'comment_body': ""You should add clearer documentation about this requirement in the XML doc itself, it's not something users should have to discover through an error (even though it's partly covered in the examples, but it's not explained that it's a hard requirement and what each argument means)."", 'comment_created': datetime.datetime(2020, 7, 30, 12, 43, 24, tzinfo=datetime.timezone.utc), 'commenter': 'akien-mga', 'type': 'User'}, {'comment_id': 462968910, 'comment_body': 'Same as in `translation.h`, I guess this could be kept only in the `.cpp` if you make it static.', 'comment_created': datetime.datetime(2020, 7, 30, 12, 44, 49, tzinfo=datetime.timezone.utc), 'commenter': 'akien-mga', 'type': 'User'}, {'comment_id': 462969430, 'comment_body': ""Go ahead and add it, it shouldn't hurt :)"", 'comment_created': datetime.datetime(2020, 7, 30, 12, 45, 38, tzinfo=datetime.timezone.utc), 'commenter': 'akien-mga', 'type': 'User'}, {'comment_id': 463125585, 'comment_body': ""Yes it's for `msgstr[x]`, and the maximum for x will be 5 (for plural in Arabic)."", 'comment_created': datetime.datetime(2020, 7, 30, 16, 35, 11, tzinfo=datetime.timezone.utc), 'commenter': 'SkyLucilfer', 'type': 'User'}, {'comment_id': 463159938, 'comment_body': ""@akien-mga I wondered about negatives too. It turns out people usually use plural for negatives although there are no definite answers. See this [discussion](https://meta.stackexchange.com/questions/15590/are-negative-numbers-singular-or-plural). 0 is also written as plurals in english based on PO gettext rule. So I'll stick with the `== 1` check, but I'll change the style."", 'comment_created': datetime.datetime(2020, 7, 30, 17, 34, 7, tzinfo=datetime.timezone.utc), 'commenter': 'SkyLucilfer', 'type': 'User'}, {'comment_id': 463185377, 'comment_body': ""@akien-mga For this one I need to access the private `struct MsgidData` in the .h file, that's why I make `_print_all_translation_strings()` a member just so that it knows about `MsgidData`. Any other options? I think of removing it but it could be useful."", 'comment_created': datetime.datetime(2020, 7, 30, 18, 19, 17, tzinfo=datetime.timezone.utc), 'commenter': 'SkyLucilfer', 'type': 'User'}, {'comment_id': 463238261, 'comment_body': ""Oh you're right, I didn't even think that negative was a valid input, but of course it is. It's good then."", 'comment_created': datetime.datetime(2020, 7, 30, 20, 0, 8, tzinfo=datetime.timezone.utc), 'commenter': 'akien-mga', 'type': 'User'}, {'comment_id': 463238504, 'comment_body': ""Ah no, it's fine if it has to be this way."", 'comment_created': datetime.datetime(2020, 7, 30, 20, 0, 30, tzinfo=datetime.timezone.utc), 'commenter': 'akien-mga', 'type': 'User'}, {'comment_id': 469794544, 'comment_body': 'Add a line after this one (see https://docs.godotengine.org/en/latest/community/contributing/code_style_guidelines.html#header-includes).', 'comment_created': datetime.datetime(2020, 8, 13, 8, 44, 46, tzinfo=datetime.timezone.utc), 'commenter': 'akien-mga', 'type': 'User'}, {'comment_id': 469794800, 'comment_body': 'We tend to favor using absolute paths, so use `core/os/file_access.h`.', 'comment_created': datetime.datetime(2020, 8, 13, 8, 45, 11, tzinfo=datetime.timezone.utc), 'commenter': 'akien-mga', 'type': 'User'}]","[{'commit_sha': 'c0d837a2ea9ca888f673485c4b9d8d9ae1936375', 'committer_username': 'SkyLucilfer', 'committer_name': None, 'committer_email': 'jjchai01@hotmail.com', 'commit_date': datetime.datetime(2016, 10, 28, 11, 1, 40, tzinfo=datetime.timezone.utc)}, {'commit_sha': '396f2eee827293d9b096e6fc954a57c92bf21f95', 'committer_username': 'SkyLucilfer', 'committer_name': None, 'committer_email': 'jjchai01@hotmail.com', 'commit_date': datetime.datetime(2016, 10, 28, 11, 1, 40, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0ef758eaeeb5b2f44e132865f0f10baf692e972f', 'committer_username': 'SkyLucilfer', 'committer_name': None, 'committer_email': 'jjchai01@hotmail.com', 'commit_date': datetime.datetime(2016, 10, 28, 11, 1, 40, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ce3461dc88fb4abc9460328b06502890e06f50d6', 'committer_username': 'SkyLucilfer', 'committer_name': None, 'committer_email': 'jjchai01@hotmail.com', 'commit_date': datetime.datetime(2016, 10, 28, 11, 1, 40, tzinfo=datetime.timezone.utc)}]",,23119524,jjchai01@hotmail.com,User,,5,,1,3
474393319,"Update i18n gettext tutorial to include POT generation, plurals and context support",Supercedes #3884. I mistakenly used the master branch to push. Sorry it was a mistake by me.,False,3935,https://api.github.com/repos/godotengine/godot-docs/pulls/3935,https://github.com/godotengine/godot-docs/pull/3935,open,285,102,5,1,1,0,2,0,"[{'name': 'enhancement'}, {'name': 'area:manual'}]",2020-08-27 01:43:26+00:00,,0.0,,[],"[{'commit_sha': 'ad087a7321a4205fa863835d9543dccf3703967a', 'committer_username': 'SkyLucilfer', 'committer_name': None, 'committer_email': 'jjchai01@hotmail.com', 'commit_date': datetime.datetime(2016, 10, 28, 11, 1, 40, tzinfo=datetime.timezone.utc)}]",,23119524,jjchai01@hotmail.com,User,,5,,1,3
473299195,Add translators comments extraction for Editor,"Added ability to extract translator comments in the C++ code.

When `TRANSLATORS:` tag is used in a comment, text following the tag will be extracted into the `POT` file as translator comment. The translator comment will be applied to the next translation function (`TTR()`, `RTR()` etc.) following it.

### Example usage:

- Single line

![2](https://user-images.githubusercontent.com/23119524/91195740-93415900-e6f9-11ea-8163-ce8427c0a916.png)


- Multiline

<img src=""https://user-images.githubusercontent.com/23119524/91195730-90466880-e6f9-11ea-8115-56b13d21036f.png"" width=""90%"">


- Using block-comment style

<img src=""https://user-images.githubusercontent.com/23119524/91195748-950b1c80-e6f9-11ea-9018-285941cc6901.png"" width=""50%"">

### Resulting POT file
The resulting POT file from the 3 comments above:
[editor.pot.txt](https://github.com/godotengine/godot/files/5124746/editor.pot.txt)
(I have to add the extension `.txt` at the end to be able to attach it)


",True,41510,https://api.github.com/repos/godotengine/godot/pulls/41510,https://github.com/godotengine/godot/pull/41510,closed,132,7,1,1,2,0,2,0,"[{'name': 'enhancement'}, {'name': 'topic:editor'}]",2020-08-25 15:50:12+00:00,2020-09-07 12:41:50+00:00,1111898.0,"12 days, 20:51:38",[],"[{'commit_sha': 'c1016dc3bf849db9e294754e5c9eafc3c32b0105', 'committer_username': 'SkyLucilfer', 'committer_name': None, 'committer_email': 'jjchai01@hotmail.com', 'commit_date': datetime.datetime(2016, 10, 28, 11, 1, 40, tzinfo=datetime.timezone.utc)}]",,23119524,jjchai01@hotmail.com,User,,5,,1,3
473488225,Add CSV plural support,"Added CSV plural support, as requested by this proposal godotengine/godot-proposals#1291.

### Usage:
It functions like how the proposal describes. Some key notes:

- tr_n() now accepts arguments in the form of tr_n(n, message, plural_message = """", context = """").

- Plural translation using CSV should leave out `plural_message` and `context` parameters as they aren't used during the translation (which explains the reordering of the parameters).

- How it works: tr_n(n, ""KEY"") will fetch the correct plural translation from the CSV using adjusted key, i.e. KEY[0], KEY[1] etc. depending on the current `locale` and n. The system will concatenate the `KEY` with appropriate subscript for us.

### Condition
Because of how the concatenation works, in the CSV users should append [0], [1] and so on for keys mapping plurals for it to work. This is the contract. Examples can be seen in the proposal.

#### Note for PO users: 
Users using PO files to translate will still have to fill in the `plural_message` field, as PO files expect to have the plural message data (I have documented this in the class reference too). The `context` parameter is optional.

#### Test project:
[test_project.zip](https://github.com/godotengine/godot/files/5126286/test_project.zip)
",False,41519,https://api.github.com/repos/godotengine/godot/pulls/41519,https://github.com/godotengine/godot/pull/41519,open,642,162,16,1,2,0,3,0,"[{'name': 'enhancement'}, {'name': 'topic:core'}, {'name': 'needs work'}]",2020-08-25 21:09:55+00:00,,0.0,,[],"[{'commit_sha': '908e04cf481c4ba4bfd9838c10ba1b93e08d9526', 'committer_username': 'SkyLucilfer', 'committer_name': None, 'committer_email': 'jjchai01@hotmail.com', 'commit_date': datetime.datetime(2016, 10, 28, 11, 1, 40, tzinfo=datetime.timezone.utc)}]",,23119524,jjchai01@hotmail.com,User,,5,,1,3
475025544,Update CSV translation tutorial,"Made a tutorial dedicated to CSV translation by regrouping bits and pieces of information regarding CSV translation from [Importing translations](https://docs.godotengine.org/en/3.2/getting_started/workflow/assets/importing_translations.html) and [Internationalizing games](https://docs.godotengine.org/en/latest/tutorials/i18n/internationalizing_games.html).

Also to incorporate changes from godotengine/godot#41519.

",False,3939,https://api.github.com/repos/godotengine/godot-docs/pulls/3939,https://github.com/godotengine/godot-docs/pull/3939,open,226,132,4,1,2,1,2,0,"[{'name': 'enhancement'}, {'name': 'area:manual'}]",2020-08-28 00:55:40+00:00,,0.0,,"[{'comment_id': 478773543, 'comment_body': ""I'm really not confident with this part regarding the workflow of CSV. I'd welcome any reviewer to offer their opinions on whether I should remove it."", 'comment_created': datetime.datetime(2020, 8, 28, 0, 57, 53, tzinfo=datetime.timezone.utc), 'commenter': 'SkyLucilfer', 'type': 'User'}]","[{'commit_sha': 'a6042148f4a78f8de92d173fc5934de644c6dcc6', 'committer_username': 'SkyLucilfer', 'committer_name': None, 'committer_email': 'jjchai01@hotmail.com', 'commit_date': datetime.datetime(2016, 10, 28, 11, 1, 40, tzinfo=datetime.timezone.utc)}]",,23119524,jjchai01@hotmail.com,User,,5,,1,3
475696239,Update translation demo project to include changes from GSoC 2020 i18n,"## NOTE: This is for Godot 4.0

As part of my GSoC work on i18n, I have updated the translation demo project to incorporate the newly implemented features (CSV plurals, PO plurals, POT generation etc.)

I'm making a pull request first for mentors to review. They should have other plans.
",False,516,https://api.github.com/repos/godotengine/godot-demo-projects/pulls/516,https://github.com/godotengine/godot-demo-projects/pull/516,closed,890,339,59,1,4,0,2,0,"[{'name': 'archived'}, {'name': 'update'}]",2020-08-29 01:02:23+00:00,2024-04-12 10:23:58+00:00,114254495.0,"1322 days, 9:21:35",[],"[{'commit_sha': '750a8f3ad22f08b13bde28876796008ef20fdc60', 'committer_username': 'SkyLucilfer', 'committer_name': None, 'committer_email': 'jjchai01@hotmail.com', 'commit_date': datetime.datetime(2016, 10, 28, 11, 1, 40, tzinfo=datetime.timezone.utc)}]",,23119524,jjchai01@hotmail.com,User,,5,,1,3

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
15634981,godot,godotengine/godot,C++,19968,88181,1515,2965,66512,13383,14,2861,"[{'id': 481590252, 'number': 41859, 'closed': datetime.datetime(2020, 9, 7, 19, 14, 7, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 9, 7, 18, 30, 16, tzinfo=datetime.timezone.utc), 'time_taken': 2631.0, 'time_delta': '0:43:51', 'additions': 127, 'deletions': 7, 'state': 'closed'}, {'id': 473488225, 'number': 41519, 'closed': None, 'created': datetime.datetime(2020, 8, 25, 21, 9, 55, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 642, 'deletions': 162, 'state': 'open'}, {'id': 473299195, 'number': 41510, 'closed': datetime.datetime(2020, 9, 7, 12, 41, 50, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 25, 15, 50, 12, tzinfo=datetime.timezone.utc), 'time_taken': 1111898.0, 'time_delta': '12 days, 20:51:38', 'additions': 132, 'deletions': 7, 'state': 'closed'}, {'id': 458721788, 'number': 40852, 'closed': datetime.datetime(2020, 7, 29, 21, 58, 48, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 29, 21, 40, 20, tzinfo=datetime.timezone.utc), 'time_taken': 1108.0, 'time_delta': '0:18:28', 'additions': 7, 'deletions': 1, 'state': 'closed'}, {'id': 457226258, 'number': 40762, 'closed': datetime.datetime(2020, 7, 27, 22, 31, 47, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 27, 15, 9, 49, tzinfo=datetime.timezone.utc), 'time_taken': 26518.0, 'time_delta': '7:21:58', 'additions': 8, 'deletions': 7, 'state': 'closed'}, {'id': 456282112, 'number': 40660, 'closed': datetime.datetime(2020, 7, 24, 20, 44, 59, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 24, 13, 17, 47, tzinfo=datetime.timezone.utc), 'time_taken': 26832.0, 'time_delta': '7:27:12', 'additions': 43, 'deletions': 43, 'state': 'closed'}, {'id': 450061008, 'number': 40443, 'closed': datetime.datetime(2020, 8, 25, 10, 11, 56, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 16, 9, 54, 18, tzinfo=datetime.timezone.utc), 'time_taken': 3457058.0, 'time_delta': '40 days, 0:17:38', 'additions': 1417, 'deletions': 302, 'state': 'closed'}, {'id': 444991597, 'number': 40171, 'closed': datetime.datetime(2020, 7, 6, 22, 9, 47, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 6, 20, 42, 42, tzinfo=datetime.timezone.utc), 'time_taken': 5225.0, 'time_delta': '1:27:05', 'additions': 7, 'deletions': 1, 'state': 'closed'}, {'id': 444160292, 'number': 40102, 'closed': datetime.datetime(2020, 7, 5, 20, 35, 18, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 3, 18, 29, 53, tzinfo=datetime.timezone.utc), 'time_taken': 180325.0, 'time_delta': '2 days, 2:05:25', 'additions': 35, 'deletions': 60, 'state': 'closed'}, {'id': 431790184, 'number': 39415, 'closed': datetime.datetime(2020, 7, 2, 20, 22, 47, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 9, 13, 22, 37, tzinfo=datetime.timezone.utc), 'time_taken': 2012410.0, 'time_delta': '23 days, 7:00:10', 'additions': 1095, 'deletions': 2, 'state': 'closed'}, {'id': 410295250, 'number': 38309, 'closed': datetime.datetime(2020, 5, 20, 9, 46, 1, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 4, 28, 18, 47, 26, tzinfo=datetime.timezone.utc), 'time_taken': 1868315.0, 'time_delta': '21 days, 14:58:35', 'additions': 62, 'deletions': 29, 'state': 'closed'}, {'id': 407060308, 'number': 38104, 'closed': datetime.datetime(2020, 4, 28, 18, 47, 36, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 4, 22, 5, 43, 41, tzinfo=datetime.timezone.utc), 'time_taken': 565435.0, 'time_delta': '6 days, 13:03:55', 'additions': 2, 'deletions': 2, 'state': 'closed'}, {'id': 405315324, 'number': 37970, 'closed': datetime.datetime(2020, 4, 20, 21, 49, 37, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 4, 17, 20, 0, 28, tzinfo=datetime.timezone.utc), 'time_taken': 265749.0, 'time_delta': '3 days, 1:49:09', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 396012503, 'number': 37450, 'closed': datetime.datetime(2020, 4, 10, 15, 56, 29, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 3, 31, 1, 54, 59, tzinfo=datetime.timezone.utc), 'time_taken': 914490.0, 'time_delta': '10 days, 14:01:30', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 395376694, 'number': 37419, 'closed': datetime.datetime(2021, 10, 4, 8, 6, 34, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 3, 30, 2, 59, 11, tzinfo=datetime.timezone.utc), 'time_taken': 47797643.0, 'time_delta': '553 days, 5:07:23', 'additions': 7, 'deletions': 0, 'state': 'closed'}, {'id': 395158412, 'number': 37392, 'closed': datetime.datetime(2021, 5, 21, 8, 54, 9, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 3, 28, 21, 35, 11, tzinfo=datetime.timezone.utc), 'time_taken': 36155938.0, 'time_delta': '418 days, 11:18:58', 'additions': 2, 'deletions': 0, 'state': 'closed'}, {'id': 393600021, 'number': 37295, 'closed': datetime.datetime(2020, 4, 13, 11, 56, 49, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 3, 25, 13, 51, 21, tzinfo=datetime.timezone.utc), 'time_taken': 1634728.0, 'time_delta': '18 days, 22:05:28', 'additions': 9, 'deletions': 0, 'state': 'closed'}, {'id': 378650415, 'number': 36470, 'closed': datetime.datetime(2020, 2, 23, 8, 13, 47, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 2, 23, 1, 26, 50, tzinfo=datetime.timezone.utc), 'time_taken': 24417.0, 'time_delta': '6:46:57', 'additions': 5, 'deletions': 0, 'state': 'closed'}, {'id': 375617512, 'number': 36230, 'closed': datetime.datetime(2020, 2, 15, 11, 10, 24, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 2, 14, 23, 40, 49, tzinfo=datetime.timezone.utc), 'time_taken': 41375.0, 'time_delta': '11:29:35', 'additions': 3, 'deletions': 8, 'state': 'closed'}, {'id': 372879103, 'number': 36062, 'closed': datetime.datetime(2020, 5, 21, 12, 16, 53, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 2, 9, 22, 1, 28, tzinfo=datetime.timezone.utc), 'time_taken': 8777725.0, 'time_delta': '101 days, 14:15:25', 'additions': 17, 'deletions': 4, 'state': 'closed'}]"
47882383,godot-docs,godotengine/godot-docs,reStructuredText,3036,3709,116,1511,9259,968,27,133,"[{'id': 475025544, 'number': 3939, 'closed': None, 'created': datetime.datetime(2020, 8, 28, 0, 55, 40, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 226, 'deletions': 132, 'state': 'open'}, {'id': 474393319, 'number': 3935, 'closed': None, 'created': datetime.datetime(2020, 8, 27, 1, 43, 26, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 285, 'deletions': 102, 'state': 'open'}, {'id': 465176964, 'number': 3884, 'closed': datetime.datetime(2020, 8, 27, 1, 42, 21, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 9, 17, 6, 59, tzinfo=datetime.timezone.utc), 'time_taken': 1499722.0, 'time_delta': '17 days, 8:35:22', 'additions': 0, 'deletions': 0, 'state': 'closed'}, {'id': 393681240, 'number': 3310, 'closed': datetime.datetime(2020, 5, 17, 15, 28, 37, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 3, 25, 16, 9, 52, tzinfo=datetime.timezone.utc), 'time_taken': 4576725.0, 'time_delta': '52 days, 23:18:45', 'additions': 14, 'deletions': 8, 'state': 'closed'}]"
60349380,godot-demo-projects,godotengine/godot-demo-projects,GDScript,1574,5635,165,172,1387,74,13,30,"[{'id': 475696239, 'number': 516, 'closed': datetime.datetime(2024, 4, 12, 10, 23, 58, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 29, 1, 2, 23, tzinfo=datetime.timezone.utc), 'time_taken': 114254495.0, 'time_delta': '1322 days, 9:21:35', 'additions': 890, 'deletions': 339, 'state': 'closed'}]"
