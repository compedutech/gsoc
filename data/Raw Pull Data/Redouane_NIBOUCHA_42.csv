pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
416894700,Fix winrm_login module,"## The bug

The issue was reported by a few users here [here](https://github.com/rapid7/metasploit-framework/issues/6398#issuecomment-508536604), I tried running Wireshark to troubleshoot the problem, and noticed that the issue seems to be coming from the Content-Length being 0, on successful login, the server returns (HTTP 411 - Length Required) and not (200 OK).

The issue is closed, but it's still not working as tested (on Windows 7 x64 and Windows 8)

## My workaround
 
In the `HTTP` login scanner, I added an argument `success_codes`, which is an array of HTTP codes that indicate login success, with a default value of `[200]`, from the `winrm` login scanner, I made an override on the method, to indicate that `411` also denotes success in the case of WinRM.

## Verification

List the steps needed to make sure this thing works

- [ ] Start `msfconsole`
- [ ] `use auxiliary/windows/winrm/winrm_login`
- [ ] ... (set parameters like wordlists etc.)
- [ ] `run`
- [ ] **Check if it reports the correct credentials as correct**

## First PR

This is my first pull-request to the project, any feedback is welcome, if it would be better to find another workaround, craft requests that yield a response code of `200 OK`, feel free to comment below. (I didn't check the details of the protocol specifications of `WinRM`)",True,13442,https://api.github.com/repos/rapid7/metasploit-framework/pulls/13442,https://github.com/rapid7/metasploit-framework/pull/13442,closed,15,0,2,5,7,0,2,1,"[{'name': 'bug'}, {'name': 'rn-fix'}]",2020-05-12 18:26:09+00:00,2020-06-08 12:02:52+00:00,2309803.0,"26 days, 17:36:43",[],"[{'commit_sha': '1cf8bc02dee833d15186341fb59d25b4b211b064', 'committer_username': 'red0xff', 'committer_name': 'Niboucha Redouane', 'committer_email': 'rniboucha@yahoo.fr', 'commit_date': datetime.datetime(2014, 8, 7, 10, 23, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '798756d57196b05c81efc8ae4ee1f01d5d776848', 'committer_username': 'red0xff', 'committer_name': 'Niboucha Redouane', 'committer_email': 'rniboucha@yahoo.fr', 'commit_date': datetime.datetime(2014, 8, 7, 10, 23, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '20f7383a617694996dee72e5107a2281a04ea787', 'committer_username': 'red0xff', 'committer_name': 'Niboucha Redouane', 'committer_email': 'rniboucha@yahoo.fr', 'commit_date': datetime.datetime(2014, 8, 7, 10, 23, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd022d123f6ecf60cb626e605fcf7829e2e7a7042', 'committer_username': 'red0xff', 'committer_name': 'Niboucha Redouane', 'committer_email': 'rniboucha@yahoo.fr', 'commit_date': datetime.datetime(2014, 8, 7, 10, 23, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '557de61fa45a5310ce9908d26f26462d8d625404', 'committer_username': 'red0xff', 'committer_name': 'Niboucha Redouane', 'committer_email': 'rniboucha@yahoo.fr', 'commit_date': datetime.datetime(2014, 8, 7, 10, 23, 8, tzinfo=datetime.timezone.utc)}]",Niboucha Redouane,8383836,rniboucha@yahoo.fr,User,,28,,192,289
417189099,Fix following redirects from send_request_cgi!,"closes #13092 

## Verification

Run the `send_request_cgi!` method of `Msf::Exploit::Remote::HttpClient`, with a non-zero redirect depth, where the Location header starts with `/`, it will no longer start the path from the parent directory of the current server URI, will start from the web root instead.

",True,13448,https://api.github.com/repos/rapid7/metasploit-framework/pulls/13448,https://github.com/rapid7/metasploit-framework/pull/13448,closed,12,5,1,1,1,0,2,1,"[{'name': 'bug'}, {'name': 'rn-fix'}]",2020-05-13 08:03:00+00:00,2020-06-04 14:19:01+00:00,1923361.0,"22 days, 6:16:01",[],"[{'commit_sha': 'a4b316a91e8223cbc9c310531d20ead3597ebfac', 'committer_username': 'red0xff', 'committer_name': 'Niboucha Redouane', 'committer_email': 'rniboucha@yahoo.fr', 'commit_date': datetime.datetime(2014, 8, 7, 10, 23, 8, tzinfo=datetime.timezone.utc)}]",Niboucha Redouane,8383836,rniboucha@yahoo.fr,User,,28,,192,289
424729041,Add the LFI module for QNAP RCE (CVE 2019-7192 - CVE 2019-7195),"Related issue : #13484 

This metasploit module stops at Local File Inclusion, since the service runs as root, LFI is quite powerful, and allows reading `/etc/shadow` or ssh private keys.

## Verification

List the steps needed to make sure this thing works

- [x] Start `msfconsole`
- [x] `use auxiliary/gather/qnap_lfi`
- [x] `set RHOSTS ...`, `check`, `run`
- [x] **Verify** check detects vulnerable hosts like it should
- [x] **Verify** LFI works fine, included files are stored in loot, and hashes in creds.
- [x] [Documentation](https://github.com/red0xff/metasploit-framework/blob/master/documentation/modules/auxiliary/gather/qnap_lfi.md))

## Going further / RCE

I have a template for the module that chains the three vulnerabilities in order to gain RCE, but the second step (code injection in the session) didn't work from my testing, here is the final output after the arbitary write to a PHP file:

[HTTPTrace output](https://drive.google.com/file/d/1D0FQJfeBOtsXqtWXABbHOmwnDx70vqMy/view?usp=sharing)

Should be writing payload@evil.com, but I don't see it in the uploaded file.",True,13534,https://api.github.com/repos/rapid7/metasploit-framework/pulls/13534,https://github.com/rapid7/metasploit-framework/pull/13534,closed,396,0,2,11,13,16,4,1,"[{'name': 'module'}, {'name': 'docs'}, {'name': 'hotness'}, {'name': 'rn-modules'}]",2020-05-28 20:53:35+00:00,2020-06-10 20:36:40+00:00,1122185.0,"12 days, 23:43:05","[{'comment_id': 432166174, 'comment_body': 'wrap the file in ticks, then make h4', 'comment_created': datetime.datetime(2020, 5, 28, 22, 50, 14, tzinfo=datetime.timezone.utc), 'commenter': 'h00die', 'type': 'User'}, {'comment_id': 432166260, 'comment_body': 'Add the version of the QNAP here in H3 (3 pounds)', 'comment_created': datetime.datetime(2020, 5, 28, 22, 50, 28, tzinfo=datetime.timezone.utc), 'commenter': 'h00die', 'type': 'User'}, {'comment_id': 432166320, 'comment_body': 'no longer bolds, make h3', 'comment_created': datetime.datetime(2020, 5, 28, 22, 50, 35, tzinfo=datetime.timezone.utc), 'commenter': 'h00die', 'type': 'User'}, {'comment_id': 432166359, 'comment_body': 'no longer bolds, make h3', 'comment_created': datetime.datetime(2020, 5, 28, 22, 50, 42, tzinfo=datetime.timezone.utc), 'commenter': 'h00die', 'type': 'User'}, {'comment_id': 432166504, 'comment_body': 'i know there is some CVE confusion since 2 have the same description, and the 3rd may be it, but may not? You may want to write a note in here about that', 'comment_created': datetime.datetime(2020, 5, 28, 22, 51, 7, tzinfo=datetime.timezone.utc), 'commenter': 'h00die', 'type': 'User'}, {'comment_id': 432166796, 'comment_body': 'can you show the creds command here plz', 'comment_created': datetime.datetime(2020, 5, 28, 22, 51, 58, tzinfo=datetime.timezone.utc), 'commenter': 'h00die', 'type': 'User'}, {'comment_id': 432166881, 'comment_body': 'add a note about processing `/etc/shadow` files', 'comment_created': datetime.datetime(2020, 5, 28, 22, 52, 13, tzinfo=datetime.timezone.utc), 'commenter': 'h00die', 'type': 'User'}, {'comment_id': 432167301, 'comment_body': ""that isn't obvious on what the token is or how id use it... maybe an example of how youd then use curl to get an authenticated page?\r\n\r\nAlso make this an H4"", 'comment_created': datetime.datetime(2020, 5, 28, 22, 53, 20, tzinfo=datetime.timezone.utc), 'commenter': 'h00die', 'type': 'User'}, {'comment_id': 432167369, 'comment_body': 'make this an h4', 'comment_created': datetime.datetime(2020, 5, 28, 22, 53, 32, tzinfo=datetime.timezone.utc), 'commenter': 'h00die', 'type': 'User'}, {'comment_id': 432167828, 'comment_body': 'add spaces before the ending bracket for consistency with the others', 'comment_created': datetime.datetime(2020, 5, 28, 22, 54, 56, tzinfo=datetime.timezone.utc), 'commenter': 'h00die', 'type': 'User'}, {'comment_id': 432168028, 'comment_body': ""i think this was the one that wasn't applicable as it was the file write of the php code"", 'comment_created': datetime.datetime(2020, 5, 28, 22, 55, 31, tzinfo=datetime.timezone.utc), 'commenter': 'h00die', 'type': 'User'}, {'comment_id': 432174409, 'comment_body': ""Having issues with the database locally, couldn't test the creds command (`ActiveRecord::RecordInvalid Validation failed: Proto is not included in the list`)"", 'comment_created': datetime.datetime(2020, 5, 28, 23, 15, 23, tzinfo=datetime.timezone.utc), 'commenter': 'red0xff', 'type': 'User'}, {'comment_id': 432181729, 'comment_body': ""@jmartin-r7 thoughts? not sure about 'proto' but 'protocol' is..."", 'comment_created': datetime.datetime(2020, 5, 28, 23, 40, 45, tzinfo=datetime.timezone.utc), 'commenter': 'h00die', 'type': 'User'}, {'comment_id': 432533356, 'comment_body': 'The issue with credential storage is due to a parameter offered for the `service` does not match the expected types. `protocol` is meant to reflect the network protocol such as `tcp/udp` and `service_name` reflects the type of `service` in this case `http` or `https` depending on the endpoint.\r\n\r\nHere is an example that reuses more `HttpClient` provided `service_details`.\r\n\r\n```suggestion\r\n      credential_data = {\r\n        workspace_id: myworkspace_id, \r\n        post_reference_name: fullname,\r\n        username: entries[0],\r\n        private_data: entries[1],\r\n        jtr_format: identify_hash(entries[1]),\r\n        private_type: :nonreplayable_hash\r\n        status: Metasploit::Model::Login::Status::UNTRIED \r\n      }.merge(service_details)\r\n\r\n      create_credential_and_login(credential_data)\r\n```\r\n\r\nAn example location where this is used already. https://github.com/rapid7/metasploit-framework/blob/334d65a565c1c2ca68d994d7ff675cbb68782400/modules/auxiliary/admin/hp/hp_imc_som_create_account.rb#L232-L241\r\n', 'comment_created': datetime.datetime(2020, 5, 29, 14, 41, 30, tzinfo=datetime.timezone.utc), 'commenter': 'jmartin-tech', 'type': 'User'}, {'comment_id': 432958567, 'comment_body': ""> Do the retrieved shadow file entires represent the credentials that can login via the web interface?\r\n\r\nYes, they can be used from the web interface, in some cases, SSH can be enabled also, I'll update the documentation to indicate that."", 'comment_created': datetime.datetime(2020, 5, 31, 15, 36, 45, tzinfo=datetime.timezone.utc), 'commenter': 'red0xff', 'type': 'User'}]","[{'commit_sha': 'ab63b05a2a3a53c55daf5d2bff7f263a4d3f4480', 'committer_username': 'red0xff', 'committer_name': 'Niboucha Redouane', 'committer_email': 'rniboucha@yahoo.fr', 'commit_date': datetime.datetime(2014, 8, 7, 10, 23, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'faebda4a190cd2f922c5a02982902a805512ca01', 'committer_username': 'red0xff', 'committer_name': 'Niboucha Redouane', 'committer_email': 'rniboucha@yahoo.fr', 'commit_date': datetime.datetime(2014, 8, 7, 10, 23, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0496e2d00d93970e59615a8ed1ea945338b46f91', 'committer_username': 'red0xff', 'committer_name': 'Niboucha Redouane', 'committer_email': 'rniboucha@yahoo.fr', 'commit_date': datetime.datetime(2014, 8, 7, 10, 23, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7a32ccdb1876c0568990ad0a56af9cbccfbc5fde', 'committer_username': 'red0xff', 'committer_name': 'Niboucha Redouane', 'committer_email': 'rniboucha@yahoo.fr', 'commit_date': datetime.datetime(2014, 8, 7, 10, 23, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fd2b63f8b24e76cb44897bddc8557140888442be', 'committer_username': 'red0xff', 'committer_name': 'Niboucha Redouane', 'committer_email': 'rniboucha@yahoo.fr', 'commit_date': datetime.datetime(2014, 8, 7, 10, 23, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '45c0b3fcc04343d2e74830881ae6feed53c88c41', 'committer_username': 'red0xff', 'committer_name': 'Niboucha Redouane', 'committer_email': 'rniboucha@yahoo.fr', 'commit_date': datetime.datetime(2014, 8, 7, 10, 23, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c882a1d014237eb8f0cd6e49391177a0db3bb1b5', 'committer_username': 'red0xff', 'committer_name': 'Niboucha Redouane', 'committer_email': 'rniboucha@yahoo.fr', 'commit_date': datetime.datetime(2014, 8, 7, 10, 23, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a3d6159374c260ee9a3779814486c62337d40814', 'committer_username': 'red0xff', 'committer_name': 'Niboucha Redouane', 'committer_email': 'rniboucha@yahoo.fr', 'commit_date': datetime.datetime(2014, 8, 7, 10, 23, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '85b2964eb67914eec4efd962ed6ace71863643ad', 'committer_username': 'wvu', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2013, 5, 28, 17, 43, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b90acd3ad236372a246c37ce6114587fb40a7174', 'committer_username': 'wvu', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2013, 5, 28, 17, 43, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6745b99716ec80a3bf6ffd248a6534ff2b7da6b8', 'committer_username': 'wvu', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2013, 5, 28, 17, 43, 25, tzinfo=datetime.timezone.utc)}]",Niboucha Redouane,8383836,rniboucha@yahoo.fr,User,,28,,192,289
433196452,[GSoC] SQLi library with support to MySQL (and MariaDB),"# What is it

This pull request adds an SQL injection library to the metasploit framework, to make it easier for module writers to exploit these vulnerabilities, supports the MySQL database management system for now (support for others will be added).

# Features

- Wrappers around the most common queries (version, current user, table names, column names of a given table, data from a table ...)
- Boolean-based and Time-based blind injections
- Support for cases when only a part of the query results is returned (truncated results)
- Encoders that are easy to use (predefined ones, base64 or hex for example), or define (an encoder is a Hash, the encoder part is a string like to_base64(^DATA^), where ^DATA^ will be replaced with the data to encode, and decoder is a Ruby proc, that will decode the data).
 - An option to automatically get strings replaced with hexadecimal constants (to get around character filtering in some cases)

(data is casted to Binary already, to make sure it works on other character sets, substr returns a one-byte character, but sometimes, the encoding on the web application is different, or some unprintable characters are filtered on the output, see the OpenEMR example).

## Test modules

I rewrote two metasploit modules to use the new library, they are working exactly as the original ones, except the changes:
- `auxiliary/sqli/openemr/openemr_sqli_dump.rb` : query result truncated to 31 bytes, can contain non-ascii characters:
  - Table enumeration is now done only in the openemr database only (` where table_schema=database()` added to the condition when enumerating table names), let me know if I should change that.
  - `lang_definitions` table added to `skiptables`, it's a large (>4mb) table that contains the strings in different languages.
  - `base64` encoder is now used (see (1) for the reason)
For testing, you can use this [docker-compose.yml](https://gist.githubusercontent.com/bradymiller/988d5105e38ffd8f6fb3cf49bbfae9f0/raw/1811364f169261286dbaf72d78f5d51b37914d90/openemr-500-docker-example-docker-compose.yml)
- `exploits/linux/http/eyesofnetwork_autodiscovery_rce.rb` : time-based SQL injection.
   - No changes
Tested on Eyesofnetwork 5.1
(1) : 
```ruby
sqli.run_sql('select 0x61c3') # no ""\xc3"" byte returned, only 'a'
sqli.run_sql(""select '<abcdefghijklmnopqrstuvwxyz01234'"") # &lt; returned for <, and 30 other characters, which means, decoding &lt; is necessary to get 31 characters
```
Results can also include a comma, using base64 (or dealing with these issues is necessary to get correct results).
## Feedback

Any feedback is much appreciated, I am working on implementing a similar interface to `sqlite`, but if there is a feature request, or something should be changed, I'll be more than happy to make changes that can make the library better / more useful for module writers.",True,13596,https://api.github.com/repos/rapid7/metasploit-framework/pulls/13596,https://github.com/rapid7/metasploit-framework/pull/13596,closed,578,196,9,36,5,30,3,1,"[{'name': 'library'}, {'name': 'feature'}, {'name': 'rn-enhancement'}]",2020-06-11 16:24:13+00:00,2020-07-10 18:46:20+00:00,2514127.0,"29 days, 2:22:07","[{'comment_id': 438960934, 'comment_body': '```suggestion\r\n    def initialize(:prefix, :suffix, opts, &query_proc)\r\n```\r\n\r\nPrefer having required params clearly in the signature.', 'comment_created': datetime.datetime(2020, 6, 11, 17, 44, 40, tzinfo=datetime.timezone.utc), 'commenter': 'jmartin-tech', 'type': 'User'}, {'comment_id': 438966000, 'comment_body': 'Remove with signature change above\r\n', 'comment_created': datetime.datetime(2020, 6, 11, 17, 50, 32, tzinfo=datetime.timezone.utc), 'commenter': 'jmartin-tech', 'type': 'User'}, {'comment_id': 438967570, 'comment_body': 'match signature change for `SQLi`', 'comment_created': datetime.datetime(2020, 6, 11, 17, 52, 21, tzinfo=datetime.timezone.utc), 'commenter': 'jmartin-tech', 'type': 'User'}, {'comment_id': 440917793, 'comment_body': 'Do not use `puts` please use `print_status` and `vprint_status`.', 'comment_created': datetime.datetime(2020, 6, 16, 14, 57, 37, tzinfo=datetime.timezone.utc), 'commenter': 'jmartin-tech', 'type': 'User'}, {'comment_id': 440918346, 'comment_body': 'Do not use `puts` please use `vprint_status` and allows the method to determine if `verbose`.\r\n\r\nI believe we discussed getting access to the standard logging methods might need some sort of injection of access to `datastore`.', 'comment_created': datetime.datetime(2020, 6, 16, 14, 58, 17, tzinfo=datetime.timezone.utc), 'commenter': 'jmartin-tech', 'type': 'User'}, {'comment_id': 440933298, 'comment_body': '```suggestion\r\n  output_length = detect_timing(""length(cast((#{query}) as binary))"")\r\n```\r\n\r\nThis and the `time_based_blind` detection share common logic consider in `Msf::Exploit::SQLi::MySQLi`:\r\n```\r\ndef detect_timing(base, delay: nil)\r\n  sleep = "",sleep(#{delay}),0)"" if delay\r\n  i = 0\r\n  while stop.nil?\r\n    output_bit = blind_request(""#{base}&#{1 << i}<>0"")\r\n      output_length |= (1 << i) if output_bit\r\n      i += 1\r\n      stop = blind_request(""#{base}&#{1 << i}=0#{sleep}"")\r\n  end\r\n  output_length\r\nend\r\n```', 'comment_created': datetime.datetime(2020, 6, 16, 15, 17, 53, tzinfo=datetime.timezone.utc), 'commenter': 'jmartin-tech', 'type': 'User'}, {'comment_id': 440937246, 'comment_body': '```suggestion\r\n   output_length = detect_timing(""if(length(cast((#{query}) as binary))"", @sleepdelay)\r\n```', 'comment_created': datetime.datetime(2020, 6, 16, 15, 21, 39, tzinfo=datetime.timezone.utc), 'commenter': 'jmartin-tech', 'type': 'User'}, {'comment_id': 440953515, 'comment_body': 'This also looks to share logic with `time_based_blind`.  Consider again adding a helper or even communizing `run_sql` to call a shared methods that takes parameters for the modified sent strings.', 'comment_created': datetime.datetime(2020, 6, 16, 15, 43, 27, tzinfo=datetime.timezone.utc), 'commenter': 'jmartin-tech', 'type': 'User'}, {'comment_id': 440954160, 'comment_body': 'See comment on reusing much of `run_sql`.', 'comment_created': datetime.datetime(2020, 6, 16, 15, 44, 21, tzinfo=datetime.timezone.utc), 'commenter': 'jmartin-tech', 'type': 'User'}, {'comment_id': 440955939, 'comment_body': 'Method should be inherited by extending `Msf::Exploit::SQLi::MySQLi` no need to add here just to call `super`.\r\n```suggestion\r\n```', 'comment_created': datetime.datetime(2020, 6, 16, 15, 46, 52, tzinfo=datetime.timezone.utc), 'commenter': 'jmartin-tech', 'type': 'User'}, {'comment_id': 440956285, 'comment_body': 'Method should be inherited by extending `Msf::Exploit::SQLi::MySQLi` no need to add here just to call `super`.\r\n```suggestion\r\n```', 'comment_created': datetime.datetime(2020, 6, 16, 15, 47, 20, tzinfo=datetime.timezone.utc), 'commenter': 'jmartin-tech', 'type': 'User'}, {'comment_id': 440956785, 'comment_body': 'Method should be inherited by extending `Msf::Exploit::SQLi::MySQLi` no need to add here just to call `super`.\r\n```suggestion\r\n```', 'comment_created': datetime.datetime(2020, 6, 16, 15, 47, 58, tzinfo=datetime.timezone.utc), 'commenter': 'jmartin-tech', 'type': 'User'}, {'comment_id': 440957159, 'comment_body': 'Method should be inherited by extending `Msf::Exploit::SQLi::MySQLi` no need to add here just to call `super`.\r\n```suggestion\r\n```', 'comment_created': datetime.datetime(2020, 6, 16, 15, 48, 29, tzinfo=datetime.timezone.utc), 'commenter': 'jmartin-tech', 'type': 'User'}, {'comment_id': 440961875, 'comment_body': '`initialize` generally should not create network traffic. Any detection can be explicitly preformed by an explicit method call preformed by on the new object by the module writer for now.\r\n\r\nIf you want to offer automatic detection in `run_sql` consider taking an additional optional parameter on that method.\r\n```\r\ndef run_sql(query, detect_delay: false) \r\n```', 'comment_created': datetime.datetime(2020, 6, 16, 15, 54, 54, tzinfo=datetime.timezone.utc), 'commenter': 'jmartin-tech', 'type': 'User'}, {'comment_id': 440962902, 'comment_body': 'Move requires to top of file please.', 'comment_created': datetime.datetime(2020, 6, 16, 15, 56, 21, tzinfo=datetime.timezone.utc), 'commenter': 'jmartin-tech', 'type': 'User'}, {'comment_id': 441018851, 'comment_body': 'This applies to multiple files in this PR.', 'comment_created': datetime.datetime(2020, 6, 16, 17, 24, 12, tzinfo=datetime.timezone.utc), 'commenter': 'jmartin-tech', 'type': 'User'}, {'comment_id': 441019753, 'comment_body': 'Look closely at any method that just calls super in the PR and remove any that will be property inherited from another module or class.', 'comment_created': datetime.datetime(2020, 6, 16, 17, 25, 46, tzinfo=datetime.timezone.utc), 'commenter': 'jmartin-tech', 'type': 'User'}, {'comment_id': 441039991, 'comment_body': 'The issue with requires at the top of the files is that the class `Msf::Exploit::SQLi::MySQLi` inherits from `Msf::Exploit::SQLi::SQLi`, and with a require at the top of the file `sqli.rb`, it would create the child class before creating the parent, error would happen because it would inherit from a nonexistent class, would need to create all the classes in `boolean_based_blind.rb` required to avoid errors, \r\nNot sure how it could be possible to refactor, the only way I could think of could think of is creating the parent classes as empty in `boolean_based_blind.rb` and `time_based_blind.rb`.', 'comment_created': datetime.datetime(2020, 6, 16, 17, 59, 57, tzinfo=datetime.timezone.utc), 'commenter': 'red0xff', 'type': 'User'}, {'comment_id': 441124182, 'comment_body': ""The inclusion pattern in the `dns` mixin is similar to what I am looking for, the wrapper holds the responsibility for bringing all the requires in to the metasploit module in a usable order. \r\n\r\nEach end class can require any class it extends directly.\r\n\r\nConsider restructuring as:\r\n```\r\nsqli\r\n|- common.rb\r\n|- mysqli.rb\r\n\\-mysqli\r\n |- common.rb (current Msf::Exploit::SQLi::MySQLi would shift here and require SQLi::Common)\r\n |- boolean_based_blind.rb ( may require common.rb )\r\n |- time_based_blind.rb ( may require common.rb )\r\n```\r\nmysqli.rb would then be:\r\n```\r\nrequire 'msf/core/exploit/sqli/mysqli/common'\r\nrequire 'msf/core/exploit/sqli/mysqli/boolean_based_blind'\r\nrequire 'msf/core/exploit/sqli/mysqli/time_based_blind'\r\n```\r\n\r\nThen classes could inherit from `Msf::Exploit::SQLi::MySQLi::Common`\r\n\r\nIn the current code objects are instantiated as `MySQLi::BooleanBasedBlind.new` and `MySQLi.new`. This would shift `MySQLi.new` => `MySQLi::Common.new`.\r\n\r\nThis does not completely remove having a `require` at the end of a file, however it is primarily in the wrapping module.\r\n\r\nOthers with more Ruby specific expertise may have other opinions on this."", 'comment_created': datetime.datetime(2020, 6, 16, 20, 32, 12, tzinfo=datetime.timezone.utc), 'commenter': 'jmartin-tech', 'type': 'User'}, {'comment_id': 443034724, 'comment_body': '```suggestion\r\n        \'enc\' => ""1\' and updatexml(1,concat(0x7e, (#{payload})),0) or \'""\r\n```\r\n\r\nRevert to original format please.', 'comment_created': datetime.datetime(2020, 6, 19, 20, 37, 45, tzinfo=datetime.timezone.utc), 'commenter': 'jmartin-tech', 'type': 'User'}, {'comment_id': 443035708, 'comment_body': 'This would be where @h00die had suggested registering the `sleepdelay`.', 'comment_created': datetime.datetime(2020, 6, 19, 20, 40, 54, tzinfo=datetime.timezone.utc), 'commenter': 'jmartin-tech', 'type': 'User'}, {'comment_id': 443036128, 'comment_body': 'No need to override if just calling `super`.', 'comment_created': datetime.datetime(2020, 6, 19, 20, 42, 11, tzinfo=datetime.timezone.utc), 'commenter': 'jmartin-tech', 'type': 'User'}, {'comment_id': 443037231, 'comment_body': 'I believe it was mentioned that can optimize calls and speed up execution.  Elaborating on the value here on when used in a module will help others understand when to take advantage of this.', 'comment_created': datetime.datetime(2020, 6, 19, 20, 45, 45, tzinfo=datetime.timezone.utc), 'commenter': 'jmartin-tech', 'type': 'User'}, {'comment_id': 443037665, 'comment_body': '```suggestion\r\n  def run_sql(query, output_charset: nil)\r\n```\r\n\r\nPrefer named optional arguments.\r\n\r\nAlso note that the `run_sql` has 2 signatures, can that be avoided?\r\n```\r\ndef run_sql(query)\r\n```', 'comment_created': datetime.datetime(2020, 6, 19, 20, 47, 8, tzinfo=datetime.timezone.utc), 'commenter': 'jmartin-tech', 'type': 'User'}, {'comment_id': 443052043, 'comment_body': ""@jmartin-r7  I thought about it, it's okay if I register sleepdelay even if SQLi is included for a non time-based injection? I don't see a way to know if the injection is time-based or not just at the time the module is included."", 'comment_created': datetime.datetime(2020, 6, 19, 21, 33, 26, tzinfo=datetime.timezone.utc), 'commenter': 'red0xff', 'type': 'User'}, {'comment_id': 443069455, 'comment_body': ""For the different signatures, having output_charset in non-blind injections is useless, they are primarly there to save time and requests, also, run_sql is not the method users should use to dump data from a table, `dump_table_fields` and other high-level enumeration methods are there for that, it's a lower-level method to be used when we need to run custom queries, or we only care about one thing, and want to retrieve it fast (session_id for example in eyesofnetwork).\r\n\r\nI could rename it, make it `blind_run_sql`, and make `run_sql` call it with output_charset being `nil`, if that has advantages, please let me know (for me, different signatures with optional additional options are okay)."", 'comment_created': datetime.datetime(2020, 6, 19, 22, 46, 22, tzinfo=datetime.timezone.utc), 'commenter': 'red0xff', 'type': 'User'}, {'comment_id': 443074286, 'comment_body': 'What do you think about making it an `advanced` option?\r\n\r\nhttps://github.com/rapid7/metasploit-framework/blob/76954957c740525cff2db5a60bcf936b4ee06c42/modules/exploits/windows/local/powershell_remoting.rb#L51-L54\r\n\r\n@h00die what do you think?', 'comment_created': datetime.datetime(2020, 6, 19, 23, 12, 24, tzinfo=datetime.timezone.utc), 'commenter': 'jmartin-tech', 'type': 'User'}, {'comment_id': 444527902, 'comment_body': 'This is only used once, consider just passing in `sqli_opts` similar to `VERBOSE` instead of adding the variable here.', 'comment_created': datetime.datetime(2020, 6, 23, 21, 47, 43, tzinfo=datetime.timezone.utc), 'commenter': 'jmartin-tech', 'type': 'User'}, {'comment_id': 444529495, 'comment_body': ""Advanced options are registered with SnakeCase\r\n```suggestion\r\n          OptFloat.new('SqliDelay', [ false, 'The delay to sleep on time-based blind SQL injections', 1.0 ])\r\n```"", 'comment_created': datetime.datetime(2020, 6, 23, 21, 51, 24, tzinfo=datetime.timezone.utc), 'commenter': 'jmartin-tech', 'type': 'User'}, {'comment_id': 444531560, 'comment_body': 'This is already registered by `include Msf::Exploit::SQLi`.', 'comment_created': datetime.datetime(2020, 6, 23, 21, 56, 36, tzinfo=datetime.timezone.utc), 'commenter': 'jmartin-tech', 'type': 'User'}]","[{'commit_sha': 'db4880762a894116d66835fda7cbf8d87c7ee033', 'committer_username': 'red0xff', 'committer_name': 'Niboucha Redouane', 'committer_email': 'rniboucha@yahoo.fr', 'commit_date': datetime.datetime(2014, 8, 7, 10, 23, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '118ada96a2e4507b7edd74bcd2a7104d58a53efb', 'committer_username': 'red0xff', 'committer_name': 'Niboucha Redouane', 'committer_email': 'rniboucha@yahoo.fr', 'commit_date': datetime.datetime(2014, 8, 7, 10, 23, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '92d8464ac177747e1b2c36a5c768a8ec383ae9a4', 'committer_username': 'red0xff', 'committer_name': 'Niboucha Redouane', 'committer_email': 'rniboucha@yahoo.fr', 'commit_date': datetime.datetime(2014, 8, 7, 10, 23, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4654941092dbaff86c2c516d032c0d7b5db6012d', 'committer_username': 'red0xff', 'committer_name': 'Niboucha Redouane', 'committer_email': 'rniboucha@yahoo.fr', 'commit_date': datetime.datetime(2014, 8, 7, 10, 23, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f1d3b3309942f072f854c455a4bf8100afb9784d', 'committer_username': 'red0xff', 'committer_name': 'Niboucha Redouane', 'committer_email': 'rniboucha@yahoo.fr', 'commit_date': datetime.datetime(2014, 8, 7, 10, 23, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0f936f750028d6056689bb1d609f0da90af5b801', 'committer_username': 'red0xff', 'committer_name': 'Niboucha Redouane', 'committer_email': 'rniboucha@yahoo.fr', 'commit_date': datetime.datetime(2014, 8, 7, 10, 23, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '12681b07464da65b5f716729961f62e778ab2232', 'committer_username': 'red0xff', 'committer_name': 'Niboucha Redouane', 'committer_email': 'rniboucha@yahoo.fr', 'commit_date': datetime.datetime(2014, 8, 7, 10, 23, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ecb1a0bb160c06591d70313b05062d6315131ed3', 'committer_username': 'red0xff', 'committer_name': 'Niboucha Redouane', 'committer_email': 'rniboucha@yahoo.fr', 'commit_date': datetime.datetime(2014, 8, 7, 10, 23, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c319799c444affe2054fbb35b24200cd82901983', 'committer_username': 'red0xff', 'committer_name': 'Niboucha Redouane', 'committer_email': 'rniboucha@yahoo.fr', 'commit_date': datetime.datetime(2014, 8, 7, 10, 23, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '083d986dcee903973d297e979d7e925417a0b7bd', 'committer_username': 'red0xff', 'committer_name': 'Niboucha Redouane', 'committer_email': 'rniboucha@yahoo.fr', 'commit_date': datetime.datetime(2014, 8, 7, 10, 23, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3639765277301445c8392b12b8ed368f1a77243d', 'committer_username': 'red0xff', 'committer_name': 'Niboucha Redouane', 'committer_email': 'rniboucha@yahoo.fr', 'commit_date': datetime.datetime(2014, 8, 7, 10, 23, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0887f3feee3f581129228e6420ffe40ac38406b1', 'committer_username': 'red0xff', 'committer_name': 'Niboucha Redouane', 'committer_email': 'rniboucha@yahoo.fr', 'commit_date': datetime.datetime(2014, 8, 7, 10, 23, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '305dbe9e2f5932bf1f5128be83166172055eeac6', 'committer_username': 'red0xff', 'committer_name': 'Niboucha Redouane', 'committer_email': 'rniboucha@yahoo.fr', 'commit_date': datetime.datetime(2014, 8, 7, 10, 23, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fa43dc6dfbffbf5e06644e36d7e47b9f28b8ac5a', 'committer_username': 'red0xff', 'committer_name': 'Niboucha Redouane', 'committer_email': 'rniboucha@yahoo.fr', 'commit_date': datetime.datetime(2014, 8, 7, 10, 23, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7c630f0403a7956f28436a8729cb4ec2d0e6ad2b', 'committer_username': 'red0xff', 'committer_name': 'Niboucha Redouane', 'committer_email': 'rniboucha@yahoo.fr', 'commit_date': datetime.datetime(2014, 8, 7, 10, 23, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9d360762640e8baefe91792113441e1c31389ac2', 'committer_username': 'red0xff', 'committer_name': 'Niboucha Redouane', 'committer_email': 'rniboucha@yahoo.fr', 'commit_date': datetime.datetime(2014, 8, 7, 10, 23, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5100f14b6d1361d14203cea7b20118cd5a9fe741', 'committer_username': 'red0xff', 'committer_name': 'Niboucha Redouane', 'committer_email': 'rniboucha@yahoo.fr', 'commit_date': datetime.datetime(2014, 8, 7, 10, 23, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4f756ba229fbfc5f2407542212fc84c8c0c0e659', 'committer_username': 'red0xff', 'committer_name': 'Niboucha Redouane', 'committer_email': 'rniboucha@yahoo.fr', 'commit_date': datetime.datetime(2014, 8, 7, 10, 23, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fae87b36335f60aedc4de7e76e39c63bac5edc8d', 'committer_username': 'red0xff', 'committer_name': 'Niboucha Redouane', 'committer_email': 'rniboucha@yahoo.fr', 'commit_date': datetime.datetime(2014, 8, 7, 10, 23, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fba2d2e7beeed16ff43027c38a86cab4309cdccb', 'committer_username': 'red0xff', 'committer_name': 'Niboucha Redouane', 'committer_email': 'rniboucha@yahoo.fr', 'commit_date': datetime.datetime(2014, 8, 7, 10, 23, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aaa38a3188fb8452349a86f5e590e35aa6ccc684', 'committer_username': 'red0xff', 'committer_name': 'Niboucha Redouane', 'committer_email': 'rniboucha@yahoo.fr', 'commit_date': datetime.datetime(2014, 8, 7, 10, 23, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2bdc6939307906ecb44b8928411fb02c7a2b4752', 'committer_username': 'red0xff', 'committer_name': 'Niboucha Redouane', 'committer_email': 'rniboucha@yahoo.fr', 'commit_date': datetime.datetime(2014, 8, 7, 10, 23, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c94bd3b2d840d267333eafb92faebd6c6f4ae8df', 'committer_username': 'red0xff', 'committer_name': 'Niboucha Redouane', 'committer_email': 'rniboucha@yahoo.fr', 'commit_date': datetime.datetime(2014, 8, 7, 10, 23, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f89f80be478d8bd230e5cb4c48e0641a2eb785ce', 'committer_username': 'red0xff', 'committer_name': 'Niboucha Redouane', 'committer_email': 'rniboucha@yahoo.fr', 'commit_date': datetime.datetime(2014, 8, 7, 10, 23, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8b7ad941685364bdebfb01048ad81887e124564e', 'committer_username': 'red0xff', 'committer_name': 'Niboucha Redouane', 'committer_email': 'rniboucha@yahoo.fr', 'commit_date': datetime.datetime(2014, 8, 7, 10, 23, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7291a7780780007505eb00f04062ba7e7485108d', 'committer_username': 'red0xff', 'committer_name': 'Niboucha Redouane', 'committer_email': 'rniboucha@yahoo.fr', 'commit_date': datetime.datetime(2014, 8, 7, 10, 23, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '34e8eae47178c401d795bedac96d5a7c7c3804de', 'committer_username': 'red0xff', 'committer_name': 'Niboucha Redouane', 'committer_email': 'rniboucha@yahoo.fr', 'commit_date': datetime.datetime(2014, 8, 7, 10, 23, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aa6c037dbd1cbc8ec102819e864108d74ec24ecc', 'committer_username': 'jmartin-tech', 'committer_name': 'Jeffrey Martin', 'committer_email': None, 'commit_date': datetime.datetime(2014, 6, 12, 19, 1, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e5062bc1241bd055c395f1334549d5c7534a0a05', 'committer_username': 'red0xff', 'committer_name': 'Niboucha Redouane', 'committer_email': 'rniboucha@yahoo.fr', 'commit_date': datetime.datetime(2014, 8, 7, 10, 23, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2c4ca04dcaa72c8f018d03763482ca48d95166a0', 'committer_username': 'red0xff', 'committer_name': 'Niboucha Redouane', 'committer_email': 'rniboucha@yahoo.fr', 'commit_date': datetime.datetime(2014, 8, 7, 10, 23, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '440294ff070716c6dcc916ef2f6bb210991a4987', 'committer_username': 'red0xff', 'committer_name': 'Niboucha Redouane', 'committer_email': 'rniboucha@yahoo.fr', 'commit_date': datetime.datetime(2014, 8, 7, 10, 23, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b230adebbad4f3cad9af8b6d46429a9dba095e8c', 'committer_username': 'red0xff', 'committer_name': 'Niboucha Redouane', 'committer_email': 'rniboucha@yahoo.fr', 'commit_date': datetime.datetime(2014, 8, 7, 10, 23, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '068011328869d3c7314e48a387656bb6327c5786', 'committer_username': 'red0xff', 'committer_name': 'Niboucha Redouane', 'committer_email': 'rniboucha@yahoo.fr', 'commit_date': datetime.datetime(2014, 8, 7, 10, 23, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f9ade608b51ad6fb7b38dc4ae6c7fc0a46883168', 'committer_username': 'red0xff', 'committer_name': 'Niboucha Redouane', 'committer_email': 'rniboucha@yahoo.fr', 'commit_date': datetime.datetime(2014, 8, 7, 10, 23, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4950c2dacf390c7cfee9db70f009f8fa63abcbb2', 'committer_username': 'red0xff', 'committer_name': 'Niboucha Redouane', 'committer_email': 'rniboucha@yahoo.fr', 'commit_date': datetime.datetime(2014, 8, 7, 10, 23, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4c229c0a24402662710f1b324d1757c0ca17e174', 'committer_username': 'red0xff', 'committer_name': 'Niboucha Redouane', 'committer_email': 'rniboucha@yahoo.fr', 'commit_date': datetime.datetime(2014, 8, 7, 10, 23, 8, tzinfo=datetime.timezone.utc)}]",Niboucha Redouane,8383836,rniboucha@yahoo.fr,User,,28,,192,289
457246342,[GSoC] Specs for the SQLi library,"This adds specs for testing the SQL Injection library.

- Shared examples for common, timebased injections
- individual tests for mysqli_common, mysqli_timebased

Didn't include tests for methods that are subject to change (time-based blind `run_sql` for example, as the current way to retrieve data is specific to my implementation, retrieves the length then the data).
Didn't include tests for methods that are not supported on every DBMS, enumerating databases for example (as these methods should just end up calling `call_function`, `dump_table_fields`, or another common method), these could be included in the DBMS-specific tests.

# Testing

- Setup the postgresql database
- `bundle exec rspec spec/lib/msf/core/exploit/sqli/mysqli/mysqli_common_spec.rb`
- It should display `14 examples, 0 failures` (possibly more, as I add tests to this branch)
- `bundle exec rspec spec/lib/msf/core/exploit/sqli/mysqli/mysqli_time_based_spec.rb`
- It should display `1 example, 0 failures` (possibly more, as I add tests to this branch)

# Feedback

Feedback is much appreciated, I'm pretty new to writing specs.",True,13913,https://api.github.com/repos/rapid7/metasploit-framework/pulls/13913,https://github.com/rapid7/metasploit-framework/pull/13913,closed,175,0,4,5,0,16,4,1,"[{'name': 'library'}, {'name': 'tests'}, {'name': 'rn-no-release-notes'}, {'name': 'GSoC'}]",2020-07-27 15:43:53+00:00,2020-08-20 22:44:59+00:00,2098866.0,"24 days, 7:01:06","[{'comment_id': 466485857, 'comment_body': ""If I understand correctly the arguments here are datastore, framework, and userinput - what are your thoughts on introducing `let` statements to help increase the readability of these tests?\r\n\r\n```ruby\r\nlet(:datastore) { instance_double(::Msf::DataStore) }\r\nlet(:framework) { instance_double(::Msf::Framework) }\r\nlet(:user_output) { File.open(File::NULL, 'w') }\r\n...\r\n\r\ncommon.new(datastore, framework, user_input, user_output) do |_payload|\r\n```"", 'comment_created': datetime.datetime(2020, 8, 6, 15, 13, 27, tzinfo=datetime.timezone.utc), 'commenter': 'adfoster-r7', 'type': 'User'}, {'comment_id': 466499634, 'comment_body': ""In general it's best practice to avoid testing private methods as it's a sign you're testing a particular implementation detail rather than behavior\r\n\r\nSome extra context:\r\nhttps://softwareengineering.stackexchange.com/questions/100959/how-do-you-unit-test-private-methods\r\n\r\nIs there a different way to write this test that ensures specific implementation details aren't being tested, or if it's a helper method - is the wrong class being tested against maybe?\r\n\r\n```ruby\r\nRSpec.describe Msf::Exploit::SQLi::MySQLi::Common\r\n  describe '#hex_encode_strings' do\r\n    # ...\r\n  end\r\nend\r\n```\r\n"", 'comment_created': datetime.datetime(2020, 8, 6, 15, 33, 12, tzinfo=datetime.timezone.utc), 'commenter': 'adfoster-r7', 'type': 'User'}, {'comment_id': 466993883, 'comment_body': ""If the next developer changes the implementation details of the sqli class, i.e. renaming `@query_proc` to something else, or writes a new injection class that doesn't use the same internal datastructures, these shared tests will break. That's generally a sign of brittle tests. It's therefore considered best practice to avoid tricks like `instance_variable_get` in tests.\r\n\r\nI wonder it it would help to introduce an additional `let` for the proc instead? That way the tests don't need to reach into implementation details\r\n\r\n```diff\r\n-    let(:sqli_obj) do\r\n-      common_class.new({}, {}, {}) do |payload|\r\n-        payload[/'(.+?)'/, 1] || ''\r\n-      end\r\n-    end\r\n\r\n+    let(:query_proc) do\r\n+      proc do |payload|\r\n+        payload[/'(.+?)'/, 1] || ''\r\n+      end\r\n+    end\r\n+   let(:sqli_obj) do\r\n+      common_class.new(datastore, framework, user_output, &query_proc)\r\n+    end\r\n```\r\n\r\nGoing a step further, is there a better name for `query_proc` in the current test's context? Is there perhaps a better name that describes the behaviour to improve the readability of the code? 🤔 "", 'comment_created': datetime.datetime(2020, 8, 7, 11, 56, 38, tzinfo=datetime.timezone.utc), 'commenter': 'adfoster-r7', 'type': 'User'}, {'comment_id': 466994958, 'comment_body': '^ This is the same as above, what are your thoughts on introducing a `let` for this, instead of reaching into the implementation to get the value', 'comment_created': datetime.datetime(2020, 8, 7, 11, 59, 15, tzinfo=datetime.timezone.utc), 'commenter': 'adfoster-r7', 'type': 'User'}, {'comment_id': 466996591, 'comment_body': ""In general it's considered a testing smell if your code test code is conditional, we should know exactly the inputs and outputs that are being asserted against in each test scenario. Is there an alternative way to write this test?\r\n\r\nTaking a step back - I wonder if this is testing too much of the implementation detail again rather than the behavior of the object, as the only assertion is against private instance variables"", 'comment_created': datetime.datetime(2020, 8, 7, 12, 2, 36, tzinfo=datetime.timezone.utc), 'commenter': 'adfoster-r7', 'type': 'User'}, {'comment_id': 466999297, 'comment_body': ""Out of interest, was Timecop considered? It provides the ability to freeze time and time travel. There's existing examples within the codebase and their readme https://github.com/travisjeffery/timecop"", 'comment_created': datetime.datetime(2020, 8, 7, 12, 7, 59, tzinfo=datetime.timezone.utc), 'commenter': 'adfoster-r7', 'type': 'User'}, {'comment_id': 467002199, 'comment_body': ""I'm not familiar with the internals of `sqli_obj.dump_table_fields`- is there any output that could be verified as part of this test?"", 'comment_created': datetime.datetime(2020, 8, 7, 12, 14, 7, tzinfo=datetime.timezone.utc), 'commenter': 'adfoster-r7', 'type': 'User'}, {'comment_id': 467070898, 'comment_body': ""`dump_table_fields` should return an Array of rows (each row being an array of strings), the dump of a table from the database.\r\n\r\nIt just generates some SQL queries (depending on the user options) and calls `run_sql` (or truncated_query), which yield the SQL to the user-supplied block (`query_proc`), which is expected to query the server and return the response, for this reason, it's hard to check its results without having a database set-up (and validating the DBMS-specific SQL also is hard, for this, I'm using some regular expressions that just check for basic things that should be there), but the return value really depends on what the server returned (for `select group_concat(table_name) from information_schema.tables where table_schema=database()` for example, how would I check what the expected return value would be?)"", 'comment_created': datetime.datetime(2020, 8, 7, 14, 19, 54, tzinfo=datetime.timezone.utc), 'commenter': 'red0xff', 'type': 'User'}, {'comment_id': 467074391, 'comment_body': ""`framework` and `user_output` are only expected to be used by `vprint_XXX` functions, which I `allowed to return nil`, they are never accessed or used in any other code from the library, that's why I considered them as outside the scope of my testing, that's why I didn't want to make them more visible or changeable, please let me know if I should put them in `let` statements.  (for datastore, I will rewrite it in a `let` statement, as some advanced options are already used in the library).\r\n(the end users will not initialize the class as I am doing, or see these arguments, there is the `create_sqli` method for that purpose)"", 'comment_created': datetime.datetime(2020, 8, 7, 14, 25, 28, tzinfo=datetime.timezone.utc), 'commenter': 'red0xff', 'type': 'User'}, {'comment_id': 467078610, 'comment_body': ""I agree with this, I will add an additional let for the proc.\r\n\r\nquery_proc is the name of the method argument, it's the proc that queries the server with a given payload, and returns the result, I did add documentation on my implementation of these methods (as comments).\r\n\r\nIf you have a suggestion for a better method name, would really appreciate it."", 'comment_created': datetime.datetime(2020, 8, 7, 14, 32, 10, tzinfo=datetime.timezone.utc), 'commenter': 'red0xff', 'type': 'User'}, {'comment_id': 467108452, 'comment_body': ""Will remove its test, its goal was to ensure that using a builtin encoder had the intended effect, and the check was for future cases where support for a DBMS is added, with no builtin encoders, but as it's too dependent on the implementation details, I'll remove it."", 'comment_created': datetime.datetime(2020, 8, 7, 15, 22, 45, tzinfo=datetime.timezone.utc), 'commenter': 'red0xff', 'type': 'User'}]","[{'commit_sha': '854df7e93b64b18c7351ce6714b15969662fe90d', 'committer_username': 'red0xff', 'committer_name': 'Niboucha Redouane', 'committer_email': 'rniboucha@yahoo.fr', 'commit_date': datetime.datetime(2014, 8, 7, 10, 23, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '89fef9f9fe563e02eaf029b7637e80e7cb59683e', 'committer_username': 'red0xff', 'committer_name': 'Niboucha Redouane', 'committer_email': 'rniboucha@yahoo.fr', 'commit_date': datetime.datetime(2014, 8, 7, 10, 23, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f48ed5027f1184134f03113a97bf93056bd60f77', 'committer_username': 'red0xff', 'committer_name': 'Niboucha Redouane', 'committer_email': 'rniboucha@yahoo.fr', 'commit_date': datetime.datetime(2014, 8, 7, 10, 23, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1f17b07746598fee0a81df7d130f6752c06e8f5b', 'committer_username': 'red0xff', 'committer_name': 'Niboucha Redouane', 'committer_email': 'rniboucha@yahoo.fr', 'commit_date': datetime.datetime(2014, 8, 7, 10, 23, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e4b77616fa2cfd3918f16f10401a895cadb17eba', 'committer_username': 'red0xff', 'committer_name': 'Niboucha Redouane', 'committer_email': 'rniboucha@yahoo.fr', 'commit_date': datetime.datetime(2014, 8, 7, 10, 23, 8, tzinfo=datetime.timezone.utc)}]",Niboucha Redouane,8383836,rniboucha@yahoo.fr,User,,28,,192,289
449517566,"[GSoC] Add SQLite injection support, small refactoring, and exploit for CVE-2017-8835","This PR adds:

- Support for SQLite injection to the library
- Small refactoring to blind injections, to avoid repetitive code, with the use of mixins (at `sqli/utils/`)
- a test module for [sqlite-lab](https://github.com/incredibleindishell/sqlite-lab), there are exploits relying on SQLite injection, but didn't find a good, one, and easy to reproduce (to list a few, [1](https://www.exploit-db.com/exploits/42130), [2](https://www.exploit-db.com/exploits/35221), [3](https://www.exploit-db.com/exploits/45841)), would love to hear feedback on this

No other modification or enhancement was made to the existing MySQL injection implementation, I ran rubocop on common.rb, that just made a few formatting changes.

## Verification

- [x] Copy `test/modules/auxiliary/test/sqlite_lab.rb` to `~/.msf4/auxiliary/sqlite_lab.rb`
- [x] Setup an HTTP server with the web application at its webroot (the Dockerfile didn't work for me, but the webapp works).
- [x] Start `msfconsole`
- [x] `use auxiliary/sqlite_lab`
- [x]  `check`, to see if the connection to the webapp worked
- [x] Set the options you want to test, `SqliType`, `Safe`, ...
- [x] `exploit`, should retrieve data as requested

Note: When testing time-based SQLi, don't forget to set the SqliDelay advanced option, 1 second for a bit is a lot, 0.3 seems a good choice for testing on localhost.

## About the webapp

Tested on `PHP 7.4` with Apache2, the `Dockerfile` fails because it attempts to install `php5-sqlite`, but it should be easy to get the vulnerable application running, just copying the files to the webroot was enough for me.

## Other notes / issues

- The class constructors shouldn't send requests, but as `SQLite` doesn't have a sleep function, it's necessary to do some benchmarking to find the parameter to `randomblob` that yields a good delay (can be given at instantiation, in which case no requests are sent, but currently, it's doing the benchmarking by default, feedback on this would be appreciated).

This branch was forked from a branch with only SQLite injection support, if another design is preferred, I'd consider reworking on it.",True,13847,https://api.github.com/repos/rapid7/metasploit-framework/pulls/13847,https://github.com/rapid7/metasploit-framework/pull/13847,closed,1370,135,15,21,3,13,6,1,"[{'name': 'module'}, {'name': 'library'}, {'name': 'enhancement'}, {'name': 'test module'}, {'name': 'rn-modules'}, {'name': 'GSoC'}]",2020-07-15 14:27:20+00:00,2020-08-27 21:50:14+00:00,3741774.0,"43 days, 7:22:54","[{'comment_id': 459759176, 'comment_body': '```suggestion\r\n  def check\r\n    @sqli = create_sqli(dbms: SQLitei::BooleanBasedBlind) do |payload|\r\n      res = send_request_cgi({\r\n        \'uri\' => normalize_uri(target_uri.path, \'cgi-bin\', \'MANGA\', \'admin.cgi\'),\r\n        \'method\' => \'GET\',\r\n        \'cookie\' => ""bauth=\' or #{payload}--""\r\n      })\r\n      fail_with \'Unable to connect to target\' unless res\r\n      !res.headers[\'Set-Cookie\'] # no Set-Cookie header means the session cookie is valid\r\n    end\r\n    if @sqli.test_vulnerable\r\n      CheckCode::Vulnerable\r\n    else\r\n      CheckCode::Safe\r\n  end\r\n\r\n  def run\r\n    unless check == CheckCode::Vulnerable\r\n      fail_with(Failure::NotVulnerable, \'Target does not seem to be vulnerable\')\r\n    end\r\n    print_good \'Target seems vulnerable\'\r\n    perform_sqli\r\n  end\r\n```\r\n\r\nRefactor to support `check` method.', 'comment_created': datetime.datetime(2020, 7, 23, 22, 17, 53, tzinfo=datetime.timezone.utc), 'commenter': 'jmartin-tech', 'type': 'User'}, {'comment_id': 459762690, 'comment_body': '```suggestion\r\n      res.get_cookies.empty? # no Set-Cookie header means the session cookie is valid\r\n```\r\n\r\nLooking at the source for get_cookies, I suspect this will work and seems reasonable to address the `msftidy` failure. https://github.com/rapid7/metasploit-framework/blob/1bd4a8d7525ef801e769e3c4edc0eab754be1aec/lib/rex/proto/http/response.rb#L69-L86', 'comment_created': datetime.datetime(2020, 7, 23, 22, 27, 26, tzinfo=datetime.timezone.utc), 'commenter': 'jmartin-tech', 'type': 'User'}, {'comment_id': 459784842, 'comment_body': ""There is a small issue with using `get_cookies`, I noticed the server responds with a `Set-cookie` header, with a lowercase `c`, and the `Hash#include?` method checks for keys in a case-sensitive manner, tested it and it fails to retrieve the cookie.\r\n\r\nas a result, an empty string is always returned.\r\n\r\n![Set-cookie header](https://i.imgur.com/VKNpkCh.png)\r\n\r\n\r\nI read the code, `Packet::Header#[]` works in a case-insensitive manner, perhaps we should override `Packet::Header#include?` also ? or replace `self.headers.include?('Set-Cookie')` with `self.headers['Set-Cookie']` ?"", 'comment_created': datetime.datetime(2020, 7, 23, 23, 36, 1, tzinfo=datetime.timezone.utc), 'commenter': 'red0xff', 'type': 'User'}, {'comment_id': 459785779, 'comment_body': ""Updated, I was looking for a way to enumerate the version without trying SQLi, but wasn't able to find one."", 'comment_created': datetime.datetime(2020, 7, 23, 23, 39, 9, tzinfo=datetime.timezone.utc), 'commenter': 'red0xff', 'type': 'User'}, {'comment_id': 460103199, 'comment_body': 'Per the [RFC 7230](https://tools.ietf.org/html/rfc7230#section-3.2) and [RFC 7540](https://tools.ietf.org/html/rfc7540#section-8.1.2) header names are case-insensitive.  I believe you are correct that `include?` should be overridden in `lib/rex/proto/http/packet/header.rb`.', 'comment_created': datetime.datetime(2020, 7, 24, 14, 52, 35, tzinfo=datetime.timezone.utc), 'commenter': 'jmartin-tech', 'type': 'User'}, {'comment_id': 460133931, 'comment_body': 'Nice find. Yes, `include?` should be overridden. This algorithm using `casecmp` to check keys in the datastore hash has proven efficient and should work for `include?` once modified to return `true` or `false`: https://github.com/rapid7/metasploit-framework/blob/1bd4a8d7525ef801e769e3c4edc0eab754be1aec/lib/msf/core/data_store.rb#L321-L325', 'comment_created': datetime.datetime(2020, 7, 24, 15, 42, 37, tzinfo=datetime.timezone.utc), 'commenter': 'acammack-r7', 'type': 'User'}, {'comment_id': 460165552, 'comment_body': 'I sent a quick PR to fix it, #13900 , used the `any?` method because I find it a bit more readable, but should have the same performance at least (stop at the first encounter), will change it if you prefer consistent coding style.', 'comment_created': datetime.datetime(2020, 7, 24, 16, 39, 38, tzinfo=datetime.timezone.utc), 'commenter': 'red0xff', 'type': 'User'}, {'comment_id': 475630352, 'comment_body': '```suggestion\r\nmodule Msf::Exploit::SQLi::Utils\r\n  module Common\r\n```\r\n\r\nConsider rename path `lib/msf/core/exploit/sqli/utils/common.rb` and adjusting module name to match.', 'comment_created': datetime.datetime(2020, 8, 24, 13, 57, 38, tzinfo=datetime.timezone.utc), 'commenter': 'jmartin-tech', 'type': 'User'}, {'comment_id': 478636591, 'comment_body': '```suggestion\r\nmodule Msf::Exploit::SQLi::Utils\r\n\r\n  #\r\n  # This module provides utilities used by the SQL injection library, none of the utilities are specific to SQL injection\r\n  #\r\n  module Common\r\n```\r\n\r\nConsider rename path `lib/msf/core/exploit/sqli/utils/common.rb` and adjusting module name to match.', 'comment_created': datetime.datetime(2020, 8, 27, 19, 10, 4, tzinfo=datetime.timezone.utc), 'commenter': 'jmartin-tech', 'type': 'User'}, {'comment_id': 478638325, 'comment_body': '```suggestion\r\n        known_bits, bits_to_guess = Msf::Exploit::SQLi::Utils::Common.get_bitmask(output_charset)\r\n```', 'comment_created': datetime.datetime(2020, 8, 27, 19, 13, 26, tzinfo=datetime.timezone.utc), 'commenter': 'jmartin-tech', 'type': 'User'}, {'comment_id': 478638463, 'comment_body': '```suggestion\r\n        known_bits, bits_to_guess = Msf::Exploit::SQLi::Utils::Common.get_bitmask(output_charset)\r\n```', 'comment_created': datetime.datetime(2020, 8, 27, 19, 13, 40, tzinfo=datetime.timezone.utc), 'commenter': 'jmartin-tech', 'type': 'User'}, {'comment_id': 478638553, 'comment_body': ""```suggestion\r\nrequire 'msf/core/exploit/sqli/utils/common'\r\n```"", 'comment_created': datetime.datetime(2020, 8, 27, 19, 13, 51, tzinfo=datetime.timezone.utc), 'commenter': 'jmartin-tech', 'type': 'User'}, {'comment_id': 478638675, 'comment_body': ""```suggestion\r\nrequire 'msf/core/exploit/sqli/utils/common'\r\n```"", 'comment_created': datetime.datetime(2020, 8, 27, 19, 14, 5, tzinfo=datetime.timezone.utc), 'commenter': 'jmartin-tech', 'type': 'User'}]","[{'commit_sha': '26e5fc99de86aff7b6e895275c944f6f8e9e34ce', 'committer_username': 'red0xff', 'committer_name': 'Niboucha Redouane', 'committer_email': 'rniboucha@yahoo.fr', 'commit_date': datetime.datetime(2014, 8, 7, 10, 23, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '477f7313a24af0337302ae98069cbdf12dd01934', 'committer_username': 'red0xff', 'committer_name': 'Niboucha Redouane', 'committer_email': 'rniboucha@yahoo.fr', 'commit_date': datetime.datetime(2014, 8, 7, 10, 23, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8f9a849591c9c4db269fc56f72fe059dff041e70', 'committer_username': 'red0xff', 'committer_name': 'Niboucha Redouane', 'committer_email': 'rniboucha@yahoo.fr', 'commit_date': datetime.datetime(2014, 8, 7, 10, 23, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4374edd37a24180c7d6d546c18957f81056d270f', 'committer_username': 'red0xff', 'committer_name': 'Niboucha Redouane', 'committer_email': 'rniboucha@yahoo.fr', 'commit_date': datetime.datetime(2014, 8, 7, 10, 23, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a42ae5280b031403aba49a9e393158ef2c195c34', 'committer_username': 'red0xff', 'committer_name': 'Niboucha Redouane', 'committer_email': 'rniboucha@yahoo.fr', 'commit_date': datetime.datetime(2014, 8, 7, 10, 23, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1c69dfd5df66484194e069a01346c3b59c658096', 'committer_username': 'red0xff', 'committer_name': 'Niboucha Redouane', 'committer_email': 'rniboucha@yahoo.fr', 'commit_date': datetime.datetime(2014, 8, 7, 10, 23, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e0c59ede5cee8c47167cb49fab324446d024a626', 'committer_username': 'red0xff', 'committer_name': 'Niboucha Redouane', 'committer_email': 'rniboucha@yahoo.fr', 'commit_date': datetime.datetime(2014, 8, 7, 10, 23, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '080e25ee6aeaa2260bd925eba26da3a181a5c035', 'committer_username': 'red0xff', 'committer_name': 'Niboucha Redouane', 'committer_email': 'rniboucha@yahoo.fr', 'commit_date': datetime.datetime(2014, 8, 7, 10, 23, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2bb2b73dc2997d89439133442948a5624ce5ec72', 'committer_username': 'red0xff', 'committer_name': 'Niboucha Redouane', 'committer_email': 'rniboucha@yahoo.fr', 'commit_date': datetime.datetime(2014, 8, 7, 10, 23, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '95ce79b418ba5e083c73fe6f3a9e9ce6ee85067b', 'committer_username': 'red0xff', 'committer_name': 'Niboucha Redouane', 'committer_email': 'rniboucha@yahoo.fr', 'commit_date': datetime.datetime(2014, 8, 7, 10, 23, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4e302dc42bccc26da30ffefce109689c309187b4', 'committer_username': 'red0xff', 'committer_name': 'Niboucha Redouane', 'committer_email': 'rniboucha@yahoo.fr', 'commit_date': datetime.datetime(2014, 8, 7, 10, 23, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6cd9fa81d6e5a5cd5f1a1854fe86b914bce70d01', 'committer_username': 'red0xff', 'committer_name': 'Niboucha Redouane', 'committer_email': 'rniboucha@yahoo.fr', 'commit_date': datetime.datetime(2014, 8, 7, 10, 23, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a681f7ac466a37b264e1d5aef563bdf142c17262', 'committer_username': 'red0xff', 'committer_name': 'Niboucha Redouane', 'committer_email': 'rniboucha@yahoo.fr', 'commit_date': datetime.datetime(2014, 8, 7, 10, 23, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b9b242391f106759faece5e64a29467ff874f209', 'committer_username': 'red0xff', 'committer_name': 'Niboucha Redouane', 'committer_email': 'rniboucha@yahoo.fr', 'commit_date': datetime.datetime(2014, 8, 7, 10, 23, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '348c9552537ca45573038b4827205999f4a4df24', 'committer_username': 'red0xff', 'committer_name': 'Niboucha Redouane', 'committer_email': 'rniboucha@yahoo.fr', 'commit_date': datetime.datetime(2014, 8, 7, 10, 23, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7a89542b284984bfe0134a538e2814b0ac47c52c', 'committer_username': 'red0xff', 'committer_name': 'Niboucha Redouane', 'committer_email': 'rniboucha@yahoo.fr', 'commit_date': datetime.datetime(2014, 8, 7, 10, 23, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '24b5f8a3320b7794a94e0b58e5bb216fce977163', 'committer_username': 'red0xff', 'committer_name': 'Niboucha Redouane', 'committer_email': 'rniboucha@yahoo.fr', 'commit_date': datetime.datetime(2014, 8, 7, 10, 23, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3e73f5efe4033d13181772e0af85104242932560', 'committer_username': 'red0xff', 'committer_name': 'Niboucha Redouane', 'committer_email': 'rniboucha@yahoo.fr', 'commit_date': datetime.datetime(2014, 8, 7, 10, 23, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd54046fc1b05527dbdb2337fa682080b115b542d', 'committer_username': 'red0xff', 'committer_name': 'Niboucha Redouane', 'committer_email': 'rniboucha@yahoo.fr', 'commit_date': datetime.datetime(2014, 8, 7, 10, 23, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd66bb4058ecb189e1f38b31bb93ed43b716354c9', 'committer_username': 'red0xff', 'committer_name': 'Niboucha Redouane', 'committer_email': 'rniboucha@yahoo.fr', 'commit_date': datetime.datetime(2014, 8, 7, 10, 23, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8d64cb9b6b427d1bf2f39cbfce383a515709ed20', 'committer_username': 'red0xff', 'committer_name': 'Niboucha Redouane', 'committer_email': 'rniboucha@yahoo.fr', 'commit_date': datetime.datetime(2014, 8, 7, 10, 23, 8, tzinfo=datetime.timezone.utc)}]",Niboucha Redouane,8383836,rniboucha@yahoo.fr,User,,28,,192,289
456383043,Add Packet::Header#include? to check for the presence of headers in a case-insensitive manner,"This PR makes the `#include?` method of Packet::Header check for the presence of headers in a case-insensitive manner.
As pointed out by @jmartin-r7 , header fields are case-insensitive (RFC links : [1](https://tools.ietf.org/html/rfc7230#section-3.2) and [2](https://tools.ietf.org/html/rfc7540#section-8.1.2))

## Verification

List the steps needed to make sure this thing works

- [ ] Start `msfconsole`
- [ ] in `irb`, Create an HTTP Response with given headers
- [ ] Try checking if the `#include?` method returns what it should if the case of the characters is different
",True,13900,https://api.github.com/repos/rapid7/metasploit-framework/pulls/13900,https://github.com/rapid7/metasploit-framework/pull/13900,closed,8,0,1,1,3,0,3,1,"[{'name': 'library'}, {'name': 'bug'}, {'name': 'rn-fix'}]",2020-07-24 16:37:39+00:00,2020-07-29 22:36:51+00:00,453552.0,"5 days, 5:59:12",[],"[{'commit_sha': '3028e58589aefbde8373bcf38e2f54d8bac39a33', 'committer_username': 'red0xff', 'committer_name': 'Niboucha Redouane', 'committer_email': 'rniboucha@yahoo.fr', 'commit_date': datetime.datetime(2014, 8, 7, 10, 23, 8, tzinfo=datetime.timezone.utc)}]",Niboucha Redouane,8383836,rniboucha@yahoo.fr,User,,28,,192,289
475592300,"[GSoC] Module for CVE-2019-13375, and PostgreSQL support for the library","This PR adds PostgreSQL injection support to the SQL injection library, and two modules for testing, one being an auxiliary module for [CVE-2019-13375](https://www.cvedetails.com/cve/CVE-2019-13375/), the other being a test module for testing every feature of the added library (didn't push it yet, not sure on how it would be pushed, as I wrote the vulnerable code also).

## Verification

Testing the module for CVE-2019-13375:

- [ ] Start `msfconsole`
- [ ] `use auxiliary/sqli/dlink/dlink_central_wifimanager_sqli.rb`
- [ ] See the instructions in `documentation/modules/auxiliary/sqli/dlink/dlink_central_wifimanager_sqli.md`

Testing using the test module:

Not sure as of the best practices on this, the vulnerable code is the following:
```ruby
require 'pg'
require 'socket'
sck = TCPServer.open(1337)

conn = PG.connect( dbname: 'sqli', user: 'postgres', host: '127.0.0.1', port: 5432 )
loop{
  client = sck.accept
  id = client.gets.chomp
  begin
  conn.exec( ""select content from articles where id=#{id}"" ) do |result|
    result = result.to_a
    if result.empty?
      client.puts('[-] No results')
    else
      client.puts(result[0]['content'])
    end
  end
  rescue Exception => e
    puts e.message
  end
  client.close
}
```
I also have an SQL script that should be executed (that creates the database, table, and inserts values), and some simple configuration steps for PostgreSQL, the module connects over TCP to the vulnerable Ruby program, and uses the SQL injection vulnerability to test every feature of PostgreSQL injection support.",True,14067,https://api.github.com/repos/rapid7/metasploit-framework/pulls/14067,https://github.com/rapid7/metasploit-framework/pull/14067,closed,860,0,8,13,7,25,7,1,"[{'name': 'module'}, {'name': 'library'}, {'name': 'enhancement'}, {'name': 'rn-enhancement'}, {'name': 'test module'}, {'name': 'rn-modules'}, {'name': 'GSoC'}]",2020-08-28 19:03:00+00:00,2021-02-14 18:14:37+00:00,14685097.0,"169 days, 23:11:37","[{'comment_id': 483026147, 'comment_body': '```suggestion\r\n      return Exploit::CheckCode::Unknown(""Unable to connect to #{target_uri.path}"") unless res\r\n      return Exploit::CheckCode::Safe unless res.code == 200\r\n```\r\nChecks should not call `fail_with` as `check` should always return a status.  I understand that the return values here would not be processed, however the `reason` would log.\r\n\r\nAnother options would be to leave the fail_with and handle the failure locally when you call `test_vulnerable`.\r\n```\r\nbegin\r\n  @sqli.test_vulnerable ? Exploit::CheckCode::Vulnerable : Exploit::CheckCode::Safe\r\nrescue Msf::Exploit::Failed => e\r\n  if e == Failure::Unreachable\r\n    Exploit::CheckCode::Unknown(\'Failed to send HTTP request\')\r\n  else\r\n    Exploit::CheckCode::Safe\r\nend\r\n```', 'comment_created': datetime.datetime(2020, 9, 3, 14, 34, 22, tzinfo=datetime.timezone.utc), 'commenter': 'jmartin-tech', 'type': 'User'}, {'comment_id': 483184844, 'comment_body': 'Ah yes, didn\'t notice that I was creating the object inside the check method, the block should always return a string (or fail), so returning a checkcode from there might cause errors to happen in the code that gets the result from the block.\r\n\r\nI would suggest this workaround using upvalues, if you think exception handling would work better, just let me know.\r\n```ruby\r\n  def check\r\n    is_check = true # upvalue, if true, the block will set check_error instead of failing\r\n    check_error = nil # will get the CheckCode in case an error happens and is_check is true\r\n    @sqli = create_sqli(dbms: PostgreSQLi::Common, opts: { encoder: :base64 }) do |payload|\r\n      res = send_request_cgi(\r\n        \'method\' => \'POST\',\r\n        \'uri\' => normalize_uri(target_uri, \'Public\', \'Conn.php\'),\r\n        \'vars_post\' => {\r\n          \'dbAction\' => \'S\',\r\n          \'dbSQL\' => payload\r\n        }\r\n      )\r\n      if res && res.code == 200\r\n        res.body[%r{<column>(.+)</column>}m, 1] || \'\'\r\n      else\r\n        if is_check\r\n          if res\r\n            check_error = Exploit::CheckCode::Safe\r\n          else\r\n            check_error = Exploit::CheckCode::Unknown(\'Failed to send HTTP request\') \r\n          end\r\n          \'\' # because a String is expected, this will make test_vulnerable to return false, but we will just get check_error\r\n        else\r\n          fail_with Failure::Unreachable, \'Failed to send HTTP request\' unless res\r\n          fail_with Failure::NotVulnerable, ""Got #{res.code} response code"" unless res.code == 200\r\n        end\r\n      end\r\n    end\r\n    vulnerable_test = @sqli.test_vulnerable\r\n    check_error || (vulnerable_test ? Exploit::CheckCode::Vulnerable : Exploit::CheckCode::Safe)\r\n  end\r\n```\r\nThis was tested and works.', 'comment_created': datetime.datetime(2020, 9, 3, 18, 45, 53, tzinfo=datetime.timezone.utc), 'commenter': 'red0xff', 'type': 'User'}, {'comment_id': 483259509, 'comment_body': 'Injecting code to be able to expose the extra conditions seems reasonable.\r\n\r\nLooking closer relying on `@sqli` getting created for the module instance variable may be error prone.  I am not a fan of relying on `side-effects` of method calls.\r\n\r\nI am concerned the scope and purpose of the block passed to `create_sqli` might be better limited by creating a local sqli object in `check` and another in `run` each written specifically for the context where they were created. Also `is_check` and `check_error` would alway reference their definitions in the `check` method in the proposed code and might create some odd be or undefined behavior unless you elevate them to instance variables as well.\r\n\r\nThere may be some way to refactor the block for reuse consider\r\n\r\n```ruby\r\ndef vulnerable_request(payload)\r\n  send_request_cgi(\r\n    \'method\' => \'POST\',\r\n    \'uri\' => normalize_uri(target_uri, \'Public\', \'Conn.php\'),\r\n    \'vars_post\' => {\r\n      \'dbAction\' => \'S\',\r\n      \'dbSQL\' => payload\r\n    }\r\nend\r\n\r\ndef check\r\n  check_error = nil\r\n  check_sqli = create_sqli(dbms: PostgreSQLi::Common, opts: { encoder: :base64 }) do |payload|\r\n    res = vulnerable_request(payload)\r\n    if res && res.code == 200\r\n      res.body[%r{<column>(.+)</column>}m, 1] || \'\'\r\n    else\r\n      if res\r\n        check_error = Exploit::CheckCode::Safe\r\n      else\r\n        check_error = Exploit::CheckCode::Unknown(\'Failed to send HTTP request\') \r\n      end\r\n      \'\' # because a String is expected, this will make test_vulnerable to return false, but we will just get check_error\r\n    end\r\n  end\r\n  vulnerable_test = check_sqli.test_vulnerable\r\n  check_error || (vulnerable_test ? Exploit::CheckCode::Vulnerable : Exploit::CheckCode::Safe)\r\nend\r\n\r\ndef run\r\n    ....\r\n    @sqli = create_sqli(dbms: PostgreSQLi::Common, opts: { encoder: :base64 }) do |payload|\r\n      res = vulnerable_request(payload)\r\n      if res && res.code == 200\r\n        res.body[%r{<column>(.+)</column>}m, 1] || \'\'\r\n      else\r\n        fail_with Failure::Unreachable, \'Failed to send HTTP request\' unless res\r\n        fail_with Failure::NotVulnerable, ""Got #{res.code} response code"" unless res.code == 200\r\n      end\r\n    end\r\n    ....\r\n\r\n```\r\n\r\nI would like to see `@sqli` be a local variable in `run` passed to methods in the case statement for use.\r\n\r\nThese are all just suggestions, use what you think is best.', 'comment_created': datetime.datetime(2020, 9, 3, 21, 18, 25, tzinfo=datetime.timezone.utc), 'commenter': 'jmartin-tech', 'type': 'User'}, {'comment_id': 484005230, 'comment_body': ""It might be clearer to someone who's reading this to include the actual action names (`ADD_ADMIN` etc.)"", 'comment_created': datetime.datetime(2020, 9, 6, 0, 52, 10, tzinfo=datetime.timezone.utc), 'commenter': 'cbrnrd', 'type': 'User'}, {'comment_id': 484005293, 'comment_body': 'IIRC these should be broken up into their own dedicated subsections (like you did in #14025)', 'comment_created': datetime.datetime(2020, 9, 6, 0, 53, 31, tzinfo=datetime.timezone.utc), 'commenter': 'cbrnrd', 'type': 'User'}, {'comment_id': 484005296, 'comment_body': 'See above', 'comment_created': datetime.datetime(2020, 9, 6, 0, 53, 40, tzinfo=datetime.timezone.utc), 'commenter': 'cbrnrd', 'type': 'User'}, {'comment_id': 484005607, 'comment_body': '```suggestion\r\n          ],\r\n```', 'comment_created': datetime.datetime(2020, 9, 6, 0, 58, 33, tzinfo=datetime.timezone.utc), 'commenter': 'cbrnrd', 'type': 'User'}, {'comment_id': 484005760, 'comment_body': ""```suggestion\r\n##\r\n# This module requires Metasploit: https://metasploit.com/download\r\n# Current source: https://github.com/rapid7/metasploit-framework\r\n##\r\nrequire 'csv'\r\nrequire 'digest'\r\n```"", 'comment_created': datetime.datetime(2020, 9, 6, 1, 0, 33, tzinfo=datetime.timezone.utc), 'commenter': 'cbrnrd', 'type': 'User'}, {'comment_id': 484070018, 'comment_body': 'Not sure if I understand the feedback, I think there would be redundancy if I include verification steps for every `ACTION` here (remplacing `should work as in the scenarios below`), because the `Scenarios` section already has the expected results from every action.', 'comment_created': datetime.datetime(2020, 9, 6, 13, 25, 33, tzinfo=datetime.timezone.utc), 'commenter': 'red0xff', 'type': 'User'}, {'comment_id': 484070243, 'comment_body': ""I think this one is correctly formatted, `],` at the same level as `'References'`, `rubocop` does not report a warning about it."", 'comment_created': datetime.datetime(2020, 9, 6, 13, 27, 55, tzinfo=datetime.timezone.utc), 'commenter': 'red0xff', 'type': 'User'}, {'comment_id': 512198295, 'comment_body': ""```suggestion\r\n        OptString.new('USERNAME', [false, 'The username of the user to add/remove']),\r\n        OptString.new('PASSWORD', [false, 'The password of the user to add/edit'])\r\n```\r\n\r\nDefault options use [`SCREAMING_SNAKE_CASE`](https://blog.fission.codes/screaming-snake-case/)"", 'comment_created': datetime.datetime(2020, 10, 26, 18, 59, 14, tzinfo=datetime.timezone.utc), 'commenter': 'jmartin-tech', 'type': 'User'}, {'comment_id': 512203216, 'comment_body': 'While I would not expect users to set the username to something that messes with the sql here, I would still suggest a validation check to guard against a poor option choice.', 'comment_created': datetime.datetime(2020, 10, 26, 19, 7, 56, tzinfo=datetime.timezone.utc), 'commenter': 'jmartin-tech', 'type': 'User'}, {'comment_id': 512203504, 'comment_body': 'While I would not expect users to set the username to something that messes with the sql here, I would still suggest a validation check to guard against a poor option choice.', 'comment_created': datetime.datetime(2020, 10, 26, 19, 8, 30, tzinfo=datetime.timezone.utc), 'commenter': 'jmartin-tech', 'type': 'User'}, {'comment_id': 512221007, 'comment_body': 'The `HexEncodeStrings` and `Safe` options cause testing failures.\r\n\r\n```\r\nmsf6 auxiliary(test/postgres_sqli_test) > run\r\n[*] Running module against 127.0.0.1\r\n\r\n[+] dbms: PostgreSQL 13.0 (Debian 13.0-1.pgdg100+1) on x86_64-pc-linux-gnu, compiled by gcc (Debian 8.3.0-6) 8.3.0, 64-bit\r\n[+] tables: articles\r\n[+] articles(id, content)\r\n[+] \t1, Over 3.8 billion people use the internet today\r\n[+] \t which is 40% of the worlds population.\r\n[+] \t2, 8 billion devices will be connected to the internet by 2020.\r\n[+] \t3, More than 570 new websites are created every minute.\r\n[+] \t4, There are over 3.5 billion searches per day on Google.\r\n[+] \t5, By 2020\r\n[+] \t video will account for about 80% of all internet traffic.\r\n[+] \t6, 340\r\n[+] \t000 tweets are sent per minute.\r\n[+] \t7, 90% of the world’s data has been created in the last couple years.\r\n[*] Auxiliary module execution completed\r\nmsf6 auxiliary(test/postgres_sqli_test) > set HexEncodeStrings true\r\nHexEncodeStrings => true\r\nmsf6 auxiliary(test/postgres_sqli_test) > run\r\n[*] Running module against 127.0.0.1\r\n\r\n[-] Auxiliary failed: NoMethodError undefined method `chomp\' for nil:NilClass\r\n[-] Call stack:\r\n[-]   /Users/jmartin/rapid7/src/r7-source/metasploit/metasploit-framework/test/modules/auxiliary/test/postgres_sqli_test.rb:70:in `block in reflected\'\r\n[-]   /Users/jmartin/rapid7/src/r7-source/metasploit/metasploit-framework/lib/msf/core/exploit/sqli/common.rb:59:in `raw_run_sql\'\r\n[-]   /Users/jmartin/rapid7/src/r7-source/metasploit/metasploit-framework/lib/msf/core/exploit/sqli/common.rb:70:in `run_sql\'\r\n[-]   /Users/jmartin/rapid7/src/r7-source/metasploit/metasploit-framework/lib/msf/core/exploit/sqli/postgresqli/common.rb:192:in `test_vulnerable\'\r\n[-]   /Users/jmartin/rapid7/src/r7-source/metasploit/metasploit-framework/test/modules/auxiliary/test/postgres_sqli_test.rb:74:in `reflected\'\r\n[-]   /Users/jmartin/rapid7/src/r7-source/metasploit/metasploit-framework/test/modules/auxiliary/test/postgres_sqli_test.rb:115:in `run\'\r\n[*] Auxiliary module execution completed\r\nmsf6 auxiliary(test/postgres_sqli_test) > set safe true\r\nsafe => true\r\nmsf6 auxiliary(test/postgres_sqli_test) > run\r\n[*] Running module against 127.0.0.1\r\n\r\n[-] Auxiliary failed: NoMethodError undefined method `chomp\' for nil:NilClass\r\n[-] Call stack:\r\n[-]   /Users/jmartin/rapid7/src/r7-source/metasploit/metasploit-framework/test/modules/auxiliary/test/postgres_sqli_test.rb:70:in `block in reflected\'\r\n[-]   /Users/jmartin/rapid7/src/r7-source/metasploit/metasploit-framework/lib/msf/core/exploit/sqli/common.rb:59:in `raw_run_sql\'\r\n[-]   /Users/jmartin/rapid7/src/r7-source/metasploit/metasploit-framework/lib/msf/core/exploit/sqli/common.rb:70:in `run_sql\'\r\n[-]   /Users/jmartin/rapid7/src/r7-source/metasploit/metasploit-framework/lib/msf/core/exploit/sqli/postgresqli/common.rb:192:in `test_vulnerable\'\r\n[-]   /Users/jmartin/rapid7/src/r7-source/metasploit/metasploit-framework/test/modules/auxiliary/test/postgres_sqli_test.rb:74:in `reflected\'\r\n[-]   /Users/jmartin/rapid7/src/r7-source/metasploit/metasploit-framework/test/modules/auxiliary/test/postgres_sqli_test.rb:115:in `run\'\r\n[*] Auxiliary module execution completed\r\n```\r\n\r\nVulnerable app output during this test:\r\n```\r\ndb_1      | 2020-10-26 19:28:30.893 UTC [82] ERROR:  syntax error at or near ""x4f"" at character 59\r\ndb_1      | 2020-10-26 19:28:30.893 UTC [82] STATEMENT:  select content from articles where id=0 union select chr(0x4f)||chr(0x50)||chr(0x42)||chr(0x37)||chr(0x39)||chr(0x46)||chr(0x77)||chr(0x73)||chr(0x6c) --\r\nclient_1  | #<PG::SyntaxError: ERROR:  syntax error at or near ""x4f""\r\nclient_1  | LINE 1: ...ontent from articles where id=0 union select chr(0x4f)||chr(...\r\nclient_1  |                                                              ^\r\nclient_1  | >\r\nclient_1  | ""ERROR:  syntax error at or near \\""x4f\\""\\nLINE 1: ...ontent from articles where id=0 union select chr(0x4f)||chr(...\\n                                                             ^\\n""\r\nclient_1  | [""/app/ruby_client.rb:9:in `exec\'"", ""/app/ruby_client.rb:9:in `block in <main>\'"", ""/app/ruby_client.rb:5:in `loop\'"", ""/app/ruby_client.rb:5:in `<main>\'""]\r\nclient_1  | #<PG::SyntaxError: ERROR:  syntax error at or near ""x41""\r\nclient_1  | LINE 1: ...ontent from articles where id=0 union select chr(0x41)||chr(...\r\nclient_1  |                                                              ^\r\nclient_1  | >\r\nclient_1  | ""ERROR:  syntax error at or near \\""x41\\""\\nLINE 1: ...ontent from articles where id=0 union select chr(0x41)||chr(...\\n                                                             ^\\n""\r\nclient_1  | [""/app/ruby_client.rb:9:in `exec\'"", ""/app/ruby_client.rb:9:in `block in <main>\'"", ""/app/ruby_client.rb:5:in `loop\'"", ""/app/ruby_client.rb:5:in `<main>\'""]\r\ndb_1      | 2020-10-26 19:29:19.662 UTC [82] ERROR:  syntax error at or near ""x41"" at character 59\r\ndb_1      | 2020-10-26 19:29:19.662 UTC [82] STATEMENT:  select content from articles where id=0 union select chr(0x41)||chr(0x71)||chr(0x54)||chr(0x79)||chr(0x4c)||chr(0x6f)||chr(0x32)||chr(0x54)||chr(0x6d) --\r\n```', 'comment_created': datetime.datetime(2020, 10, 26, 19, 39, 56, tzinfo=datetime.timezone.utc), 'commenter': 'jmartin-tech', 'type': 'User'}, {'comment_id': 512223898, 'comment_body': ""Preferred style is to avoid using `then`:\r\n```suggestion\r\n    when 'SQLI_DUMP' \r\n      dump_data(sqli)\r\n    when 'ADD_ADMIN'\r\n      add_user(sqli)\r\n    when 'REMOVE_ADMIN'\r\n      remove_user(sqli)\r\n```"", 'comment_created': datetime.datetime(2020, 10, 26, 19, 44, 46, tzinfo=datetime.timezone.utc), 'commenter': 'jmartin-tech', 'type': 'User'}, {'comment_id': 512226419, 'comment_body': ""Preferred style is to avoid using `then`:\r\n```suggestion\r\n    case datastore['SqliType']\r\n    when 0\r\n      reflected\r\n    when 1\r\n      boolean_blind\r\n    when 2\r\n      time_blind\r\n    else\r\n      print_bad('Unsupported SQLI_TYPE')\r\n    end\r\n```"", 'comment_created': datetime.datetime(2020, 10, 26, 19, 49, 19, tzinfo=datetime.timezone.utc), 'commenter': 'jmartin-tech', 'type': 'User'}, {'comment_id': 512227473, 'comment_body': ""```suggestion\r\n      sock = TCPSocket.open(datastore['RHOST'], datastore['RPORT'])\r\n```\r\nSince the options is offered it needs to be consumed."", 'comment_created': datetime.datetime(2020, 10, 26, 19, 51, 20, tzinfo=datetime.timezone.utc), 'commenter': 'jmartin-tech', 'type': 'User'}, {'comment_id': 512227898, 'comment_body': ""```suggestion\r\n      sock = TCPSocket.open(datastore['RHOST'], datastore['RPORT'])\r\n```\r\nSince the options is offered it needs to be consumed."", 'comment_created': datetime.datetime(2020, 10, 26, 19, 52, 4, tzinfo=datetime.timezone.utc), 'commenter': 'jmartin-tech', 'type': 'User'}, {'comment_id': 512227939, 'comment_body': ""```suggestion\r\n      sock = TCPSocket.open(datastore['RHOST'], datastore['RPORT'])\r\n```\r\nSince the options is offered it needs to be consumed."", 'comment_created': datetime.datetime(2020, 10, 26, 19, 52, 11, tzinfo=datetime.timezone.utc), 'commenter': 'jmartin-tech', 'type': 'User'}, {'comment_id': 512229059, 'comment_body': 'Default options use `SCREAMING_SNAKE_CASE`.\r\n\r\nThis a test module, just noting this for consistency. Not a required change.', 'comment_created': datetime.datetime(2020, 10, 26, 19, 54, 17, tzinfo=datetime.timezone.utc), 'commenter': 'jmartin-tech', 'type': 'User'}, {'comment_id': 512229860, 'comment_body': 'While I would not expect users to set the username to something that messes with the sql here, I would still suggest a validation check to guard against a poor option choice.', 'comment_created': datetime.datetime(2020, 10, 26, 19, 55, 39, tzinfo=datetime.timezone.utc), 'commenter': 'jmartin-tech', 'type': 'User'}, {'comment_id': 512338305, 'comment_body': ""The issue is in `HexEncodeStrings`, `Safe` fails in your test because `HexEncodeStrings` is still enabled.\r\nHappens because `0x61`-style hex numbers are not valid in postgresql, fixed using decimals instead.\r\nI also added encoding for the empty strings to avoid quotes.\r\nThere is still an issue that happens on hex_encode_strings, for strings that contain escaped quotes, 'hello\\\\'' for example, the hex_encode_strings method would consider the escaped quote as a delimiter, this doesn't happen often, but I'm thinking of a way to fix it"", 'comment_created': datetime.datetime(2020, 10, 26, 23, 59, 2, tzinfo=datetime.timezone.utc), 'commenter': 'red0xff', 'type': 'User'}, {'comment_id': 512338818, 'comment_body': ""I added a check for the username, the module fails if it's nil, or contains `'` or `\\`."", 'comment_created': datetime.datetime(2020, 10, 27, 0, 0, 41, tzinfo=datetime.timezone.utc), 'commenter': 'red0xff', 'type': 'User'}, {'comment_id': 520660203, 'comment_body': 'These still need naming adjustments.', 'comment_created': datetime.datetime(2020, 11, 10, 15, 39, 36, tzinfo=datetime.timezone.utc), 'commenter': 'jmartin-tech', 'type': 'User'}, {'comment_id': 520666123, 'comment_body': ""Just a consistency request, the lists for `Author` and `Actions` here are formatted differently. The reason rubocop did not warn is that the `[` is inline reducing the indentation level expectations.\r\n```suggestion\r\n        'References' => \r\n          [\r\n            ['CVE', '2019-13373'],\r\n            ['URL', 'https://unh3x.github.io/2019/02/21/D-link-(CWM-100)-Multiple-Vulnerabilities/']\r\n          ],\r\n```"", 'comment_created': datetime.datetime(2020, 11, 10, 15, 47, 7, tzinfo=datetime.timezone.utc), 'commenter': 'jmartin-tech', 'type': 'User'}]","[{'commit_sha': '1d4d6c384b72b08525ad2319a9e33ae94471893b', 'committer_username': 'red0xff', 'committer_name': 'Niboucha Redouane', 'committer_email': 'rniboucha@yahoo.fr', 'commit_date': datetime.datetime(2014, 8, 7, 10, 23, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '99449f46ef15dc414a7887d5d33c0c552cbc91a3', 'committer_username': 'red0xff', 'committer_name': 'Niboucha Redouane', 'committer_email': 'rniboucha@yahoo.fr', 'commit_date': datetime.datetime(2014, 8, 7, 10, 23, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e4364ed6e7074dbc43ff3441c6889f67b63247f2', 'committer_username': 'red0xff', 'committer_name': 'Niboucha Redouane', 'committer_email': 'rniboucha@yahoo.fr', 'commit_date': datetime.datetime(2014, 8, 7, 10, 23, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ef33afecc1e72fdc73eb6b7fdcd8070e78d32e0b', 'committer_username': 'red0xff', 'committer_name': 'Niboucha Redouane', 'committer_email': 'rniboucha@yahoo.fr', 'commit_date': datetime.datetime(2014, 8, 7, 10, 23, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b23b72fa197dae56720fed80a1d3993e3f91ceca', 'committer_username': 'red0xff', 'committer_name': 'Niboucha Redouane', 'committer_email': 'rniboucha@yahoo.fr', 'commit_date': datetime.datetime(2014, 8, 7, 10, 23, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6bb9f9d6297b7de60efc49feadcf5344e45d53e9', 'committer_username': 'red0xff', 'committer_name': 'Niboucha Redouane', 'committer_email': 'rniboucha@yahoo.fr', 'commit_date': datetime.datetime(2014, 8, 7, 10, 23, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '97d134fe07651e159446f9ffdc36acf47d393e16', 'committer_username': 'red0xff', 'committer_name': 'Niboucha Redouane', 'committer_email': 'rniboucha@yahoo.fr', 'commit_date': datetime.datetime(2014, 8, 7, 10, 23, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '13b3e58be0d50f4d06ffa10bd7d0759a1af02f6a', 'committer_username': 'red0xff', 'committer_name': 'Niboucha Redouane', 'committer_email': 'rniboucha@yahoo.fr', 'commit_date': datetime.datetime(2014, 8, 7, 10, 23, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '233120fb8db8e32cc1083a147f146b6286cf052c', 'committer_username': 'red0xff', 'committer_name': 'Niboucha Redouane', 'committer_email': 'rniboucha@yahoo.fr', 'commit_date': datetime.datetime(2014, 8, 7, 10, 23, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6acdb3a4406a56598911f6bcfd6ef02712657959', 'committer_username': 'red0xff', 'committer_name': 'Niboucha Redouane', 'committer_email': 'rniboucha@yahoo.fr', 'commit_date': datetime.datetime(2014, 8, 7, 10, 23, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3dd5c9af7acd3f6d4167c05adc721dbbf13ee4a3', 'committer_username': 'red0xff', 'committer_name': 'Niboucha Redouane', 'committer_email': 'rniboucha@yahoo.fr', 'commit_date': datetime.datetime(2014, 8, 7, 10, 23, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '17c7c4fdbe2e6cae3bb5bb3ab3406e0ba34811f6', 'committer_username': 'red0xff', 'committer_name': 'Niboucha Redouane', 'committer_email': 'rniboucha@yahoo.fr', 'commit_date': datetime.datetime(2014, 8, 7, 10, 23, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e23caaf5ebc704f07050edfe5666c5251c1d0e93', 'committer_username': 'red0xff', 'committer_name': 'Niboucha Redouane', 'committer_email': 'rniboucha@yahoo.fr', 'commit_date': datetime.datetime(2014, 8, 7, 10, 23, 8, tzinfo=datetime.timezone.utc)}]",Niboucha Redouane,8383836,rniboucha@yahoo.fr,User,,28,,192,289

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
2293158,metasploit-framework,rapid7/metasploit-framework,Ruby,13836,33591,2052,1541,74538,441,15,36,"[{'id': 1014363685, 'number': 16849, 'closed': datetime.datetime(2022, 9, 12, 16, 11, 3, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 1, 21, 21, 2, tzinfo=datetime.timezone.utc), 'time_taken': 3610201.0, 'time_delta': '41 days, 18:50:01', 'additions': 100, 'deletions': 62, 'state': 'closed'}, {'id': 1002050946, 'number': 16794, 'closed': datetime.datetime(2022, 9, 27, 21, 38, 43, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 20, 11, 56, 57, tzinfo=datetime.timezone.utc), 'time_taken': 5996506.0, 'time_delta': '69 days, 9:41:46', 'additions': 1728, 'deletions': 0, 'state': 'closed'}, {'id': 958450201, 'number': 16651, 'closed': datetime.datetime(2022, 6, 8, 22, 16, 21, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 6, 5, 16, 3, 16, tzinfo=datetime.timezone.utc), 'time_taken': 281585.0, 'time_delta': '3 days, 6:13:05', 'additions': 16, 'deletions': 3, 'state': 'closed'}, {'id': 958449233, 'number': 16650, 'closed': datetime.datetime(2022, 6, 17, 19, 59, 20, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 6, 5, 15, 58, 29, tzinfo=datetime.timezone.utc), 'time_taken': 1051251.0, 'time_delta': '12 days, 4:00:51', 'additions': 58, 'deletions': 12, 'state': 'closed'}, {'id': 915984493, 'number': 16487, 'closed': datetime.datetime(2022, 5, 18, 23, 40, 3, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 4, 22, 4, 1, 20, tzinfo=datetime.timezone.utc), 'time_taken': 2317123.0, 'time_delta': '26 days, 19:38:43', 'additions': 54, 'deletions': 24, 'state': 'closed'}, {'id': 905426757, 'number': 16439, 'closed': datetime.datetime(2022, 4, 28, 11, 5, 57, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 4, 11, 1, 53, 32, tzinfo=datetime.timezone.utc), 'time_taken': 1501945.0, 'time_delta': '17 days, 9:12:25', 'additions': 50, 'deletions': 22, 'state': 'closed'}, {'id': 905096617, 'number': 16435, 'closed': datetime.datetime(2022, 6, 1, 15, 28, 58, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 4, 10, 2, 43, 16, tzinfo=datetime.timezone.utc), 'time_taken': 4538742.0, 'time_delta': '52 days, 12:45:42', 'additions': 349, 'deletions': 53, 'state': 'closed'}, {'id': 835575165, 'number': 16132, 'closed': datetime.datetime(2022, 2, 1, 21, 10, 29, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 1, 30, 23, 50, 16, tzinfo=datetime.timezone.utc), 'time_taken': 163213.0, 'time_delta': '1 day, 21:20:13', 'additions': 2, 'deletions': 2, 'state': 'closed'}, {'id': 747943471, 'number': 15734, 'closed': datetime.datetime(2023, 3, 3, 23, 54, 56, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 10, 1, 21, 4, 36, tzinfo=datetime.timezone.utc), 'time_taken': 44765420.0, 'time_delta': '518 days, 2:50:20', 'additions': 31, 'deletions': 5, 'state': 'closed'}, {'id': 552131584, 'number': 14602, 'closed': datetime.datetime(2021, 2, 14, 18, 38, 12, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 1, 9, 13, 33, 50, tzinfo=datetime.timezone.utc), 'time_taken': 3128662.0, 'time_delta': '36 days, 5:04:22', 'additions': 6, 'deletions': 3, 'state': 'closed'}, {'id': 478070025, 'number': 14084, 'closed': datetime.datetime(2020, 9, 2, 19, 45, 16, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 9, 2, 18, 31, 28, tzinfo=datetime.timezone.utc), 'time_taken': 4428.0, 'time_delta': '1:13:48', 'additions': 1, 'deletions': 0, 'state': 'closed'}, {'id': 475592300, 'number': 14067, 'closed': datetime.datetime(2021, 2, 14, 18, 14, 37, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 28, 19, 3, tzinfo=datetime.timezone.utc), 'time_taken': 14685097.0, 'time_delta': '169 days, 23:11:37', 'additions': 860, 'deletions': 0, 'state': 'closed'}, {'id': 470528701, 'number': 14025, 'closed': datetime.datetime(2020, 9, 21, 20, 28, 59, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 20, 0, 29, 55, tzinfo=datetime.timezone.utc), 'time_taken': 2836744.0, 'time_delta': '32 days, 19:59:04', 'additions': 231, 'deletions': 0, 'state': 'closed'}, {'id': 467381163, 'number': 13994, 'closed': datetime.datetime(2020, 8, 18, 14, 35, 31, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 13, 13, 21, 12, tzinfo=datetime.timezone.utc), 'time_taken': 436459.0, 'time_delta': '5 days, 1:14:19', 'additions': 155, 'deletions': 0, 'state': 'closed'}, {'id': 465213107, 'number': 13968, 'closed': datetime.datetime(2020, 8, 14, 20, 46, 13, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 9, 22, 49, 51, tzinfo=datetime.timezone.utc), 'time_taken': 424582.0, 'time_delta': '4 days, 21:56:22', 'additions': 25, 'deletions': 5, 'state': 'closed'}, {'id': 457246342, 'number': 13913, 'closed': datetime.datetime(2020, 8, 20, 22, 44, 59, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 27, 15, 43, 53, tzinfo=datetime.timezone.utc), 'time_taken': 2098866.0, 'time_delta': '24 days, 7:01:06', 'additions': 175, 'deletions': 0, 'state': 'closed'}, {'id': 456383043, 'number': 13900, 'closed': datetime.datetime(2020, 7, 29, 22, 36, 51, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 24, 16, 37, 39, tzinfo=datetime.timezone.utc), 'time_taken': 453552.0, 'time_delta': '5 days, 5:59:12', 'additions': 8, 'deletions': 0, 'state': 'closed'}, {'id': 449517566, 'number': 13847, 'closed': datetime.datetime(2020, 8, 27, 21, 50, 14, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 15, 14, 27, 20, tzinfo=datetime.timezone.utc), 'time_taken': 3741774.0, 'time_delta': '43 days, 7:22:54', 'additions': 1370, 'deletions': 135, 'state': 'closed'}, {'id': 444992868, 'number': 13816, 'closed': datetime.datetime(2020, 8, 25, 12, 55, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 6, 20, 45, 45, tzinfo=datetime.timezone.utc), 'time_taken': 4291755.0, 'time_delta': '49 days, 16:09:15', 'additions': 6, 'deletions': 151, 'state': 'closed'}, {'id': 433196452, 'number': 13596, 'closed': datetime.datetime(2020, 7, 10, 18, 46, 20, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 11, 16, 24, 13, tzinfo=datetime.timezone.utc), 'time_taken': 2514127.0, 'time_delta': '29 days, 2:22:07', 'additions': 578, 'deletions': 196, 'state': 'closed'}, {'id': 424729041, 'number': 13534, 'closed': datetime.datetime(2020, 6, 10, 20, 36, 40, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 5, 28, 20, 53, 35, tzinfo=datetime.timezone.utc), 'time_taken': 1122185.0, 'time_delta': '12 days, 23:43:05', 'additions': 396, 'deletions': 0, 'state': 'closed'}, {'id': 417189099, 'number': 13448, 'closed': datetime.datetime(2020, 6, 4, 14, 19, 1, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 5, 13, 8, 3, tzinfo=datetime.timezone.utc), 'time_taken': 1923361.0, 'time_delta': '22 days, 6:16:01', 'additions': 12, 'deletions': 5, 'state': 'closed'}, {'id': 416894700, 'number': 13442, 'closed': datetime.datetime(2020, 6, 8, 12, 2, 52, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 5, 12, 18, 26, 9, tzinfo=datetime.timezone.utc), 'time_taken': 2309803.0, 'time_delta': '26 days, 17:36:43', 'additions': 15, 'deletions': 0, 'state': 'closed'}]"
