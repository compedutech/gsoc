pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
692441915,Add onboarding library with support for dimmed background,"## Purpose / Description
Add onboarding library with support for dimmed background.
https://github.com/sjwall/MaterialTapTargetPrompt.

## Checklist
- [x] You have not changed whitespace unnecessarily (it makes diffs hard to read)
- [x] You have a descriptive commit message with a short title (first line, max 50 chars).
- [x] Your code follows the style of the project (e.g. never omit braces in `if` statements) 
- [x] You have commented your code, particularly in hard-to-understand areas
- [x] You have performed a self-review of your own code
- [ ] UI changes: include screenshots of all affected screens (in particular showing any new or changed strings)
- [ ] UI Changes: You have tested your change using the [Google Accessibility Scanner](https://play.google.com/store/apps/details?id=com.google.android.apps.accessibility.auditor)
",True,9291,https://api.github.com/repos/ankidroid/Anki-Android/pulls/9291,https://github.com/ankidroid/Anki-Android/pull/9291,closed,259,0,4,2,4,13,0,0,[],2021-07-19 09:36:14+00:00,2021-08-05 16:14:38+00:00,1492704.0,"17 days, 6:38:24","[{'comment_id': 675598391, 'comment_body': 'Can you check this on a tablet? If one metric is off, maybe the width is as well', 'comment_created': datetime.datetime(2021, 7, 23, 14, 15, 8, tzinfo=datetime.timezone.utc), 'commenter': 'david-allison', 'type': 'User'}, {'comment_id': 680289793, 'comment_body': 'gpl 3, please', 'comment_created': datetime.datetime(2021, 7, 31, 2, 2, 51, tzinfo=datetime.timezone.utc), 'commenter': 'Arthur-Milchior', 'type': 'User'}, {'comment_id': 680289797, 'comment_body': 'gpl 3, please', 'comment_created': datetime.datetime(2021, 7, 31, 2, 2, 57, tzinfo=datetime.timezone.utc), 'commenter': 'Arthur-Milchior', 'type': 'User'}, {'comment_id': 680401745, 'comment_body': ""Verified on Pixel C API 30 emulator. It's fine."", 'comment_created': datetime.datetime(2021, 7, 31, 19, 48, 56, tzinfo=datetime.timezone.utc), 'commenter': 'ShridharGoel', 'type': 'User'}, {'comment_id': 680401747, 'comment_body': 'Updated.', 'comment_created': datetime.datetime(2021, 7, 31, 19, 49, 1, tzinfo=datetime.timezone.utc), 'commenter': 'ShridharGoel', 'type': 'User'}, {'comment_id': 680401765, 'comment_body': 'Updated.', 'comment_created': datetime.datetime(2021, 7, 31, 19, 49, 7, tzinfo=datetime.timezone.utc), 'commenter': 'ShridharGoel', 'type': 'User'}, {'comment_id': 681100207, 'comment_body': 'If this is a decorator, it should decorate a `PromptBackgroundInterface`', 'comment_created': datetime.datetime(2021, 8, 2, 16, 11, 35, tzinfo=datetime.timezone.utc), 'commenter': 'david-allison', 'type': 'User'}, {'comment_id': 682086078, 'comment_body': '```\r\ninterface PromptBackgroundInterface {\r\n```', 'comment_created': datetime.datetime(2021, 8, 3, 20, 40, 10, tzinfo=datetime.timezone.utc), 'commenter': 'david-allison', 'type': 'User'}, {'comment_id': 682086817, 'comment_body': 'Move this documentation to the interface', 'comment_created': datetime.datetime(2021, 8, 3, 20, 41, 19, tzinfo=datetime.timezone.utc), 'commenter': 'david-allison', 'type': 'User'}, {'comment_id': 682087025, 'comment_body': 'No need to explain the code\r\n\r\n```suggestion\r\n```', 'comment_created': datetime.datetime(2021, 8, 3, 20, 41, 39, tzinfo=datetime.timezone.utc), 'commenter': 'david-allison', 'type': 'User'}, {'comment_id': 682087953, 'comment_body': '```suggestion\r\n* Decorator for [DimmedPromptBackgroundInterface]: Dims the background of the screen so that the highlighted view remains in focus.\r\n```', 'comment_created': datetime.datetime(2021, 8, 3, 20, 43, tzinfo=datetime.timezone.utc), 'commenter': 'david-allison', 'type': 'User'}, {'comment_id': 682089787, 'comment_body': '```suggestion\r\n * Converts from abstract [PromptBackground] to [PromptBackgroundInterface] to allow extensions of a [PromptBackground] without the requirement to inherit from an empty abstract class.\r\n```', 'comment_created': datetime.datetime(2021, 8, 3, 20, 45, 49, tzinfo=datetime.timezone.utc), 'commenter': 'david-allison', 'type': 'User'}, {'comment_id': 682092614, 'comment_body': '```\r\n/**\r\n  * Exposes [PromptBackground] as an interface\r\n  * dev: [PromptBackground] is an abstract class with only abstract methods, this unnecessarily forces inheritance from consumers if they want to extend it. This interface allows extension via implementation, flattening the class hierarchy. It can be created by a [DimmedPromptBackgroundInterfaceAdapter] and converted back to a [PromptBackground] via a [DimmedPromptBackgroundAdapter]\r\n */\r\n```', 'comment_created': datetime.datetime(2021, 8, 3, 20, 50, 11, tzinfo=datetime.timezone.utc), 'commenter': 'david-allison', 'type': 'User'}]","[{'commit_sha': '4c09764976c9a20e3b133ff57d223b3da10ed3ec', 'committer_username': 'ShridharGoel', 'committer_name': 'Shridhar Goel', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 18, 13, 15, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cf10ab73bc2ae6c68be59bde71caf319d4e86f89', 'committer_username': 'ShridharGoel', 'committer_name': 'Shridhar Goel', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 18, 13, 15, 13, tzinfo=datetime.timezone.utc)}]",Shridhar Goel,35566748,,User,,51,,0,0
666212933,Implement onboarding for new users with feature tutorials,"## Purpose / Description
Implement onboarding for new users.

## Video
https://user-images.githubusercontent.com/35566748/125170046-abfc1580-e1ca-11eb-948d-892f0053882a.mp4

## Checklist
- [x] You have not changed whitespace unnecessarily (it makes diffs hard to read)
- [x] You have a descriptive commit message with a short title (first line, max 50 chars).
- [x] Your code follows the style of the project (e.g. never omit braces in `if` statements) 
- [x] You have commented your code, particularly in hard-to-understand areas
- [x] You have performed a self-review of your own code
- [x] UI changes: include screenshots of all affected screens (in particular showing any new or changed strings)
- [ ] UI Changes: You have tested your change using the [Google Accessibility Scanner](https://play.google.com/store/apps/details?id=com.google.android.apps.accessibility.auditor)
",True,9092,https://api.github.com/repos/ankidroid/Anki-Android/pulls/9092,https://github.com/ankidroid/Anki-Android/pull/9092,closed,629,2,15,7,39,247,0,0,[],2021-06-09 18:52:17+00:00,2021-08-11 21:06:22+00:00,5451245.0,"63 days, 2:14:05","[{'comment_id': 648723556, 'comment_body': 'needs extracting to resources: https://github.com/ankidroid/Anki-Android/wiki/Development-Guide#adding-translations', 'comment_created': datetime.datetime(2021, 6, 9, 22, 22, 55, tzinfo=datetime.timezone.utc), 'commenter': 'david-allison', 'type': 'User'}, {'comment_id': 648723817, 'comment_body': ""is there a reason that you're not using `AnkiDroidApp.getSharedPreferences`?"", 'comment_created': datetime.datetime(2021, 6, 9, 22, 23, 32, tzinfo=datetime.timezone.utc), 'commenter': 'david-allison', 'type': 'User'}, {'comment_id': 648728256, 'comment_body': 'I thought that `AnkiDroidApp.getSharedPreferences()` is only being used for settings related preferences which can be changed by the user.', 'comment_created': datetime.datetime(2021, 6, 9, 22, 34, 28, tzinfo=datetime.timezone.utc), 'commenter': 'ShridharGoel', 'type': 'User'}, {'comment_id': 649417548, 'comment_body': 'Same builder with likely same functionality used many times, can we extract this to one class, to reduced duplication of code?', 'comment_created': datetime.datetime(2021, 6, 10, 18, 15, 24, tzinfo=datetime.timezone.utc), 'commenter': 'Akshay0701', 'type': 'User'}, {'comment_id': 650411913, 'comment_body': 'Each time this Builder is being used, the parameters being passed to various methods are different. Also, which methods of the Builder are being called also varies in various cases.', 'comment_created': datetime.datetime(2021, 6, 12, 16, 50, 7, tzinfo=datetime.timezone.utc), 'commenter': 'ShridharGoel', 'type': 'User'}, {'comment_id': 650506204, 'comment_body': ""I'd like you to extract the AppIntroFragment outside of the `onCreate`.\r\nIf they got assigned to variables, then we can easily try to change the order, or to restrict to only a subset of those, by just changing the variable order instead of doing copy/paste of whole 5 lines "", 'comment_created': datetime.datetime(2021, 6, 13, 10, 44, 27, tzinfo=datetime.timezone.utc), 'commenter': 'Arthur-Milchior', 'type': 'User'}, {'comment_id': 650506286, 'comment_body': 'I suggest creating a new file for onboarding.', 'comment_created': datetime.datetime(2021, 6, 13, 10, 45, 15, tzinfo=datetime.timezone.utc), 'commenter': 'Arthur-Milchior', 'type': 'User'}, {'comment_id': 650507284, 'comment_body': ""It might be good to document when to use one or the other. I personally don't know"", 'comment_created': datetime.datetime(2021, 6, 13, 10, 53, 28, tzinfo=datetime.timezone.utc), 'commenter': 'Arthur-Milchior', 'type': 'User'}, {'comment_id': 650513807, 'comment_body': ""In this case, I'm going to agree with @ShridharGoel.\xa0It's rare I don't ask for more factorization. But in this case, using a function would decrease readabliity.\r\nIndeed, I prefer to read that `R.id.action_flag` is the target than just seing that it is the first argument of a function taking 7 arguments.\r\n\r\nFurthermore, since all of those methods are really small, and have a clear name, the code remains easy to read.\r\n\r\n\r\nAt most, I'd suggest creating a function that take a builder and a preference name, call show on the builder and the the preference to False."", 'comment_created': datetime.datetime(2021, 6, 13, 11, 48, 40, tzinfo=datetime.timezone.utc), 'commenter': 'Arthur-Milchior', 'type': 'User'}, {'comment_id': 650544195, 'comment_body': ""If there is nothing defined about this, then I'll change the implementation to use `AnkiDroidApp.getSharedPreferences()`."", 'comment_created': datetime.datetime(2021, 6, 13, 15, 49, 50, tzinfo=datetime.timezone.utc), 'commenter': 'ShridharGoel', 'type': 'User'}, {'comment_id': 651792504, 'comment_body': 'needs a resource', 'comment_created': datetime.datetime(2021, 6, 15, 13, 30, 27, tzinfo=datetime.timezone.utc), 'commenter': 'david-allison', 'type': 'User'}, {'comment_id': 651792944, 'comment_body': 'what does 4 mean here? Ideally extract to a constant', 'comment_created': datetime.datetime(2021, 6, 15, 13, 30, 50, tzinfo=datetime.timezone.utc), 'commenter': 'david-allison', 'type': 'User'}, {'comment_id': 654132893, 'comment_body': 'Classically, bit set are initialized at 0. \r\nAlso, you should use unsigned long. The max value of long is 2^63-1, and its binary representation is `01111111.11111111.11111111.11111111.11111111.11111111.11111111`, so there is a zero, which is not ideal. With unsigned values, the problem would not exists.\r\n\r\nI suggest using a [BitSet](https://docs.oracle.com/javase/7/docs/api/java/util/BitSet.html) instead. And indicating explicitly indicate that a bit is set when the onboarding screen is seen.', 'comment_created': datetime.datetime(2021, 6, 18, 4, 30, 15, tzinfo=datetime.timezone.utc), 'commenter': 'Arthur-Milchior', 'type': 'User'}, {'comment_id': 654135833, 'comment_body': 'It\'s generally a bid idea to use literals directly. We should instead define a constant, so that there is no need to double check the numerical values.\r\n\r\nActually, we should use an Enum. Let\'s call it ""ReviewerOnboardingScreen"". Then, instead of using a `index: int`, you can take as argument an element of the enumeration `elt`. And use its [ordinal](https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Enum.html#ordinal()) \r\n\r\nIdeally, it would also be nice if we could have a linter that ensure that such an enum has at most 64\xa0elements (otherwise, they can\'t be represented as long)\r\nIt would also be nice to have another linter rule that ensure that no elements are removed or reordered. I don\'t think linter can compare to git commits, but what could be done instead is that each time we publish a new stable version, we hard code the content already present in lint. So that we can change the elements in alpha, and even beta, but not once its stable', 'comment_created': datetime.datetime(2021, 6, 18, 4, 41, 17, tzinfo=datetime.timezone.utc), 'commenter': 'Arthur-Milchior', 'type': 'User'}, {'comment_id': 654136209, 'comment_body': 'I\xa0still suggest a helper function that takes a builder and an index, and that show the builder result and set as visited this index. This way, there is some small code duplication that can be avoided. Even if most of the code remains unchanged', 'comment_created': datetime.datetime(2021, 6, 18, 4, 42, 25, tzinfo=datetime.timezone.utc), 'commenter': 'Arthur-Milchior', 'type': 'User'}, {'comment_id': 654153681, 'comment_body': ""I think it would be nice to have one entry by activity. One for reviewer, one for deck picker, etc...\r\nIf we store 10 longs instead of one, it's not a trouble, and we will then be able to have more than 64 onboarding information. While I know that 64 onboarding slides seems a lot, I actually think that it is not that much if we consider:\r\n* the number of buttons\r\n* we may want to deprecate some slide one day if a feature change too much\r\n* we may add new features\r\n* some slides won't be shown immediately but only after some time"", 'comment_created': datetime.datetime(2021, 6, 18, 5, 37, 1, tzinfo=datetime.timezone.utc), 'commenter': 'Arthur-Milchior', 'type': 'User'}, {'comment_id': 654827665, 'comment_body': 'Can you please also use BitSet here.', 'comment_created': datetime.datetime(2021, 6, 19, 18, 48, 39, tzinfo=datetime.timezone.utc), 'commenter': 'Arthur-Milchior', 'type': 'User'}, {'comment_id': 654827922, 'comment_body': 'Thanks for taking my remarks about BitSet into account.\r\nI still have a preference for you to use enums. That decrease the risk of mismanaging the index. \r\nSimilarly, you can create a `androidx.annotation.StringDef` to ensure that the prefKey is actually an onboarding preference\r\n', 'comment_created': datetime.datetime(2021, 6, 19, 18, 50, 55, tzinfo=datetime.timezone.utc), 'commenter': 'Arthur-Milchior', 'type': 'User'}, {'comment_id': 654828126, 'comment_body': 'Thanks a lot for splitting the commit into smaller commits.\r\nDid you try to compile after ""Implement onboarding for new users""? I would have thought you\'d get a warning because there are unused strings.\r\nUsually strings are added in the same commit where they are used. This way, the first time you use a String ressource, I can easily see what is the text of the resource', 'comment_created': datetime.datetime(2021, 6, 19, 18, 53, 7, tzinfo=datetime.timezone.utc), 'commenter': 'Arthur-Milchior', 'type': 'User'}, {'comment_id': 654828207, 'comment_body': 'This remark is still valid. The label should be a resource, as in the examples above', 'comment_created': datetime.datetime(2021, 6, 19, 18, 53, 50, tzinfo=datetime.timezone.utc), 'commenter': 'Arthur-Milchior', 'type': 'User'}, {'comment_id': 654828461, 'comment_body': ""Thanks. That's far easier to read like this I believe.\r\nI think the values and the list should be static final values outside of the function. So that really the function is as simple as possible and separate from the data."", 'comment_created': datetime.datetime(2021, 6, 19, 18, 56, 17, tzinfo=datetime.timezone.utc), 'commenter': 'Arthur-Milchior', 'type': 'User'}, {'comment_id': 654828558, 'comment_body': 'Can you take a html instead of a drawable? This way, we can send html describing what the page looks like and execute it inside a webview instead of having a fixed image', 'comment_created': datetime.datetime(2021, 6, 19, 18, 57, 33, tzinfo=datetime.timezone.utc), 'commenter': 'Arthur-Milchior', 'type': 'User'}, {'comment_id': 654828679, 'comment_body': 'Is it standard Kotlin?\r\nI thought that it was very easy to make small named tuples in Kotlin. This would allow to use `.title`, `.description` and `.image` instead of `.first`, `.second` and `.third` below', 'comment_created': datetime.datetime(2021, 6, 19, 18, 59, 1, tzinfo=datetime.timezone.utc), 'commenter': 'Arthur-Milchior', 'type': 'User'}, {'comment_id': 654828827, 'comment_body': 'Can you add some javadoc (KotlinDoc?) to indicate what it means. I find ""IntroductionActivity"" not clear by itself. If in two year someone read this page without knowing the context, they should be able to figure out that ""introduction"" here is ""onboarding on first use of the app"" and not ""an activity that introduce a new card"" or ""introducing an activity in the activity queue""', 'comment_created': datetime.datetime(2021, 6, 19, 19, 0, 33, tzinfo=datetime.timezone.utc), 'commenter': 'Arthur-Milchior', 'type': 'User'}, {'comment_id': 654829022, 'comment_body': ""English is not my mother tongue, so I beg your pardon for the followin remark, but I don't find it quite clear.\r\n\r\nMaybe \r\n\r\n> Create a circle to emphasizes a part of the app.\r\n> Darkens the entire screen, appart from this circle to ensure that the user focus on the circle itself"", 'comment_created': datetime.datetime(2021, 6, 19, 19, 2, 26, tzinfo=datetime.timezone.utc), 'commenter': 'Arthur-Milchior', 'type': 'User'}, {'comment_id': 654829335, 'comment_body': 'There is no need to call super? Can you confirm you checked that the default constructor of CirclePromptBackground is what you want?\r\n', 'comment_created': datetime.datetime(2021, 6, 19, 19, 6, 4, tzinfo=datetime.timezone.utc), 'commenter': 'Arthur-Milchior', 'type': 'User'}, {'comment_id': 654829568, 'comment_body': 'I think com.ichi2.ui should be a better package. `utils` seems to have been mostly libraries and this is really ui related', 'comment_created': datetime.datetime(2021, 6, 19, 19, 8, 24, tzinfo=datetime.timezone.utc), 'commenter': 'Arthur-Milchior', 'type': 'User'}, {'comment_id': 654829916, 'comment_body': 'Unless I\'m missing something, everything seems to be duplicated with DimmedCirclePromptBackground. That\'s really a risk for error laters, if we think about correcting something in one class and not the other.\r\n\r\nUnless you really need to extend the RectanglePromptBackground, you should avoid it.\xa0Instead, you should delegate to a `PromptBackground`.\r\nThat is, your constructor takes as parameter either a CirclePromptBackground or a RectanglePromptBackground, saves it as a member ""mPromptBackground`,  and instead of using `super` you use `mPromptBackground` to apply a method to it.\r\n\r\nYou can also create two static functions that calls your constructor with a circle and a rectangle, so that you don\'t have to create them yourselves in the remaining of the code', 'comment_created': datetime.datetime(2021, 6, 19, 19, 12, 3, tzinfo=datetime.timezone.utc), 'commenter': 'Arthur-Milchior', 'type': 'User'}, {'comment_id': 654830232, 'comment_body': 'You might want to wait until the end of the introduction to mark this as visited. So if the app is closed, introduction open again next time', 'comment_created': datetime.datetime(2021, 6, 19, 19, 15, 50, tzinfo=datetime.timezone.utc), 'commenter': 'Arthur-Milchior', 'type': 'User'}, {'comment_id': 654830414, 'comment_body': ""is `INSTANCE` due to the interaction of Kotlin and JAVA. It sems that adding `OnboardingUtils.INSTANCE` has little meaning here, so it's nice if it can be avoided.\r\n\r\nAlso, that makes me wonder whether we should have a small structure that represents the pair `INTRODUCTION_SLIDES, DECK_PICKER_ONBOARDING`. This way, it avoid repeating it multiple time.\r\n\r\nIf the two methods took instance of an enum instead of an int, we could remove the `ordinal()` here and make the code smaller\r\n"", 'comment_created': datetime.datetime(2021, 6, 19, 19, 17, 57, tzinfo=datetime.timezone.utc), 'commenter': 'Arthur-Milchior', 'type': 'User'}, {'comment_id': 654830482, 'comment_body': 'I thought we would get an index by slide, and not one for the whole slide deck.\r\nThe reason is that, if one day, we decide to add a new feature worth mentionning to the users, we can open a deck with this feature only', 'comment_created': datetime.datetime(2021, 6, 19, 19, 18, 57, tzinfo=datetime.timezone.utc), 'commenter': 'Arthur-Milchior', 'type': 'User'}, {'comment_id': 654830697, 'comment_body': ""Any reason for not having a method that takes a builder, an ordinal and a set, and, if the pair is not already visited, then show the builder content and mark the pair as visited?\r\nI have been making this kind of suggestion twice already, and I still not see it in the PR\xa0I review.\r\nIt's entirely fine if you disagree. I may lack some context. But I fear I've not seen answer explaining why you decided to disagree"", 'comment_created': datetime.datetime(2021, 6, 19, 19, 21, 16, tzinfo=datetime.timezone.utc), 'commenter': 'Arthur-Milchior', 'type': 'User'}, {'comment_id': 654831013, 'comment_body': 'Do you need to return the Boolean object? Or is there no difference difference between `Boolean` and `boolean` in Kotlin?', 'comment_created': datetime.datetime(2021, 6, 19, 19, 24, 45, tzinfo=datetime.timezone.utc), 'commenter': 'Arthur-Milchior', 'type': 'User'}, {'comment_id': 654831042, 'comment_body': ""Actually, what could even be done is  (using Java syntax, I don't know Kotlin)\r\n\r\n```java\r\nboolean <Preference extends Union> checkIfNotAlreadyVisited(Preference index, Context context, Class<Preference> clazz) {\r\n  return  (AnkiDroidApp.getSharedPrefs(context).getLong(clazz.toString(), 0) and (1L shl index.ordinal())) == 0L;\r\n}\r\n```\r\nThis would ensure the class name is used as entry. It would also ensure that the index comes from the very enum we are considering. This would decrease considerably the risk of error and simplify reviewing more commits"", 'comment_created': datetime.datetime(2021, 6, 19, 19, 25, 13, tzinfo=datetime.timezone.utc), 'commenter': 'Arthur-Milchior', 'type': 'User'}, {'comment_id': 654831169, 'comment_body': ""Is it standard in Kotlin to move enum in their own class? I'd have considered that such an enum could be in CardBrowser.\xa0And similarly for other enum of onboarding"", 'comment_created': datetime.datetime(2021, 6, 19, 19, 27, 6, tzinfo=datetime.timezone.utc), 'commenter': 'Arthur-Milchior', 'type': 'User'}, {'comment_id': 654831496, 'comment_body': ""Please add a header. EIther with your copyright if you wrote it, or with the source if you were inspired by other (I'm surprised that you need to create this class yourself. I would have assumed that it is standard to focus this way. Can you please add in javadoc the difference between DimmedCirciclePromptBackground and what already exists. I.e. CirclePromptBackground and maybe other classes you found while exploring your options)"", 'comment_created': datetime.datetime(2021, 6, 19, 19, 30, 36, tzinfo=datetime.timezone.utc), 'commenter': 'Arthur-Milchior', 'type': 'User'}, {'comment_id': 654835123, 'comment_body': 'Sorry, missed this change. I will update it.', 'comment_created': datetime.datetime(2021, 6, 19, 20, 7, 34, tzinfo=datetime.timezone.utc), 'commenter': 'ShridharGoel', 'type': 'User'}, {'comment_id': 654835187, 'comment_body': '> is INSTANCE due to the interaction of Kotlin and JAVA\r\n\r\nYes.', 'comment_created': datetime.datetime(2021, 6, 19, 20, 8, 14, tzinfo=datetime.timezone.utc), 'commenter': 'ShridharGoel', 'type': 'User'}, {'comment_id': 654835379, 'comment_body': 'DimmedCirclePromptBackground and DimmedRectanglePromptBackground have actually been taken from an example mentioned in the library documentation. So what should be done in this case?', 'comment_created': datetime.datetime(2021, 6, 19, 20, 10, 10, tzinfo=datetime.timezone.utc), 'commenter': 'ShridharGoel', 'type': 'User'}, {'comment_id': 654835503, 'comment_body': ""This is possible by using a data class. I'll update it."", 'comment_created': datetime.datetime(2021, 6, 19, 20, 11, 23, tzinfo=datetime.timezone.utc), 'commenter': 'ShridharGoel', 'type': 'User'}, {'comment_id': 654873184, 'comment_body': ""Hmm - we've always just used a single preferences file (the default one) as far as I know. I believe there is one secondary one related to some module we include (dim memory - I don't think it's ACRA, I think even those keys are in the default one). Anyway, I don't see a reason to split them up, not even with what I know of performance in the preferences system on android, it will load them all up and have them cached anyway, but it's not high traffic or anything so no worries about file write contention on prefs.apply() etc. Just use the default I think"", 'comment_created': datetime.datetime(2021, 6, 20, 4, 10, 15, tzinfo=datetime.timezone.utc), 'commenter': 'mikehardy', 'type': 'User'}, {'comment_id': 654874809, 'comment_body': '@Arthur-Milchior are we really using a bitset to flag whether onboarding has shown something or not? Isn\'t that a fixed size thing? How would that map to an API where future features could implement a ""walkthrough"" hooking into this system and this system would know whether it was shown or not? That\'s a design I I mentioned recently in Discord, idea taken from VSCode https://code.visualstudio.com/updates/v1_57#_new-getting-started-experience \r\n\r\nHere\'s a great link to the VSCode team\'s experience with users when they *just* did the same thing we are doing: https://github.com/microsoft/vscode/issues/106717#issuecomment-790053982\r\n\r\nKey findings:\r\n- users skip because they\'re really focused on a specific task\r\n- users then are maybe interested later but can\'t get back to the ""getting started"" content\r\n\r\nHere\'s how they define a ""walkthrough"" contributed to the ""getting started"" content https://github.com/microsoft/vscode/issues/116414#issuecomment-783543863\r\n', 'comment_created': datetime.datetime(2021, 6, 20, 4, 31, 44, tzinfo=datetime.timezone.utc), 'commenter': 'mikehardy', 'type': 'User'}, {'comment_id': 654874957, 'comment_body': ""I assume the library documentation has a license and/or copyright? If it's compatible we should include it, if not, I'm not sure what to do except re-implement ? That seems silly though, hopefully it's compatible"", 'comment_created': datetime.datetime(2021, 6, 20, 4, 33, 29, tzinfo=datetime.timezone.utc), 'commenter': 'mikehardy', 'type': 'User'}, {'comment_id': 654948946, 'comment_body': '> . I believe there is one secondary one related to some module we include\r\n\r\nI think the other one was used by `CardBrowser`', 'comment_created': datetime.datetime(2021, 6, 20, 15, 7, 55, tzinfo=datetime.timezone.utc), 'commenter': 'david-allison', 'type': 'User'}, {'comment_id': 654981548, 'comment_body': 'There is no `boolean` in Kotlin. `Boolean` needs to be used.', 'comment_created': datetime.datetime(2021, 6, 20, 19, 56, 28, tzinfo=datetime.timezone.utc), 'commenter': 'ShridharGoel', 'type': 'User'}, {'comment_id': 655315783, 'comment_body': 'Can you create a new builder which includes `.setPromptBackground(new DimmedPromptBackground(new RectanglePromptBackground()))` and `.setPromptFocal(new RectanglePromptFocal());`\r\n\r\nThis will reduce the amount of copy/pasted text', 'comment_created': datetime.datetime(2021, 6, 21, 12, 2, 25, tzinfo=datetime.timezone.utc), 'commenter': 'david-allison', 'type': 'User'}, {'comment_id': 655317116, 'comment_body': 'add a method: `setDismissedListener` which calls through', 'comment_created': datetime.datetime(2021, 6, 21, 12, 4, 45, tzinfo=datetime.timezone.utc), 'commenter': 'david-allison', 'type': 'User'}, {'comment_id': 655317683, 'comment_body': 'Likewise, extract to a new builder to reduce code duplication', 'comment_created': datetime.datetime(2021, 6, 21, 12, 5, 37, tzinfo=datetime.timezone.utc), 'commenter': 'david-allison', 'type': 'User'}, {'comment_id': 655319910, 'comment_body': 'unused', 'comment_created': datetime.datetime(2021, 6, 21, 12, 9, 6, tzinfo=datetime.timezone.utc), 'commenter': 'david-allison', 'type': 'User'}, {'comment_id': 655320093, 'comment_body': 'unused', 'comment_created': datetime.datetime(2021, 6, 21, 12, 9, 21, tzinfo=datetime.timezone.utc), 'commenter': 'david-allison', 'type': 'User'}, {'comment_id': 655332947, 'comment_body': ""Don't use enum ordinals, if someone removes an element (or reorders the elements into alphabetical order), then it corrupts the preference"", 'comment_created': datetime.datetime(2021, 6, 21, 12, 29, 22, tzinfo=datetime.timezone.utc), 'commenter': 'david-allison', 'type': 'User'}, {'comment_id': 655334875, 'comment_body': 'agreed', 'comment_created': datetime.datetime(2021, 6, 21, 12, 32, 12, tzinfo=datetime.timezone.utc), 'commenter': 'david-allison', 'type': 'User'}, {'comment_id': 655648426, 'comment_body': 'We can create a method inside the enum which would be giving specific values for specific entries in the enum. But, since we are just passing a generic enum as the parameter, how can we access methods from the enums without type casting the `enum` parameter?', 'comment_created': datetime.datetime(2021, 6, 21, 19, 28, 45, tzinfo=datetime.timezone.utc), 'commenter': 'ShridharGoel', 'type': 'User'}, {'comment_id': 655733213, 'comment_body': 'The params make this less readable, use a subclassed builder/factory method instead', 'comment_created': datetime.datetime(2021, 6, 21, 22, 2, 9, tzinfo=datetime.timezone.utc), 'commenter': 'david-allison', 'type': 'User'}, {'comment_id': 655734227, 'comment_body': ""I don't know how you'd do it in Kotlin, In Java: Add in a constuctor to the enum accepting an integer, and use a fixed value.\r\n\r\n"", 'comment_created': datetime.datetime(2021, 6, 21, 22, 4, 28, tzinfo=datetime.timezone.utc), 'commenter': 'david-allison', 'type': 'User'}, {'comment_id': 656138865, 'comment_body': ""Yes, that's the way but as I mentioned in the previous comment, we are passing a generic enum instead of using the exact enum classes. So in that case, how can we fetch the integer value?"", 'comment_created': datetime.datetime(2021, 6, 22, 11, 44, 30, tzinfo=datetime.timezone.utc), 'commenter': 'ShridharGoel', 'type': 'User'}, {'comment_id': 656518609, 'comment_body': 'Enums seem to be able to implement interfaces in Java', 'comment_created': datetime.datetime(2021, 6, 22, 19, 27, 53, tzinfo=datetime.timezone.utc), 'commenter': 'david-allison', 'type': 'User'}, {'comment_id': 656541538, 'comment_body': 'Updated with better implementation.', 'comment_created': datetime.datetime(2021, 6, 22, 20, 4, 53, tzinfo=datetime.timezone.utc), 'commenter': 'ShridharGoel', 'type': 'User'}, {'comment_id': 656595249, 'comment_body': ""I don't understand what this is doing. It feels incorrect"", 'comment_created': datetime.datetime(2021, 6, 22, 21, 32, 5, tzinfo=datetime.timezone.utc), 'commenter': 'david-allison', 'type': 'User'}, {'comment_id': 656595767, 'comment_body': 'Okay, it feels that you want the constraint on `checkIfNotAlreadyVisited` to be both an enum, and inheriting from `OnboardingEnumValue` (or just inheriting from the interface)', 'comment_created': datetime.datetime(2021, 6, 22, 21, 33, 4, tzinfo=datetime.timezone.utc), 'commenter': 'david-allison', 'type': 'User'}, {'comment_id': 656932848, 'comment_body': ""Actually using an interface wasn't required. Updated the implementation to take fixed integer value as parameter in the functions in `OnboardingUtils`."", 'comment_created': datetime.datetime(2021, 6, 23, 9, 42, 35, tzinfo=datetime.timezone.utc), 'commenter': 'ShridharGoel', 'type': 'User'}, {'comment_id': 658359387, 'comment_body': ""can you add the generic constraint to include the interface as well, so we only need one param\r\n\r\nIt's not ideal to pass in `object` and `object.property` to a method, when there's no chance that `object.property` won't belong to `object`"", 'comment_created': datetime.datetime(2021, 6, 24, 23, 51, 37, tzinfo=datetime.timezone.utc), 'commenter': 'david-allison', 'type': 'User'}, {'comment_id': 658359791, 'comment_body': 'Is this a noop if `null` is supplied?', 'comment_created': datetime.datetime(2021, 6, 24, 23, 52, 37, tzinfo=datetime.timezone.utc), 'commenter': 'david-allison', 'type': 'User'}, {'comment_id': 659111758, 'comment_body': ""Given that there's no state, this would be better as a class containing `static` methods, rather than as a singleton"", 'comment_created': datetime.datetime(2021, 6, 26, 3, 25, 15, tzinfo=datetime.timezone.utc), 'commenter': 'david-allison', 'type': 'User'}, {'comment_id': 659111814, 'comment_body': 'You should be able to apply the same refactoring here to remove the `enumValue` parameter', 'comment_created': datetime.datetime(2021, 6, 26, 3, 26, 15, tzinfo=datetime.timezone.utc), 'commenter': 'david-allison', 'type': 'User'}, {'comment_id': 659111817, 'comment_body': 'ditto', 'comment_created': datetime.datetime(2021, 6, 26, 3, 26, 23, tzinfo=datetime.timezone.utc), 'commenter': 'david-allison', 'type': 'User'}, {'comment_id': 659111932, 'comment_body': 'Is there a way that you can accept a function returning void here? `Unit` makes for messy code', 'comment_created': datetime.datetime(2021, 6, 26, 3, 27, 38, tzinfo=datetime.timezone.utc), 'commenter': 'david-allison', 'type': 'User'}, {'comment_id': 659112126, 'comment_body': 'Copying from Discord\r\n\r\nThat\'s far too scary and there\'s too much text. \r\n\r\nI read that and my heart sank (and I know what AnkiDroid does)\r\n\r\nVery few people will read that amount of text\r\n\r\n-----\r\n\r\nFor UX on the dialog:\r\n\r\n* Consider making it friendly with a positive image (unsure how this goes with Material Design)\r\n\r\n----\r\n\r\nAs for copy: something along the lines of\r\n\r\n""You\'re done for today""\r\n\r\nYou have a strong memory of all your cards.\r\nOR\r\nAnkiDroid cannot further strengthen your memory of cards today.\r\n\r\n(something about ""come back tomorrow, we\'ll show new/review cards"")\r\n\r\nbuttons:\r\n* [learn more cards -> burnout warning -> contextual tutorial on how to do so]\r\n* [browse cards] \r\n* [close]\r\n\r\n\r\n----\r\n\r\nI do wonder if we need this now https://github.com/ankidroid/Anki-Android/pull/9143 has gone in', 'comment_created': datetime.datetime(2021, 6, 26, 3, 29, 41, tzinfo=datetime.timezone.utc), 'commenter': 'david-allison', 'type': 'User'}, {'comment_id': 659112343, 'comment_body': 'What does this do? Might need extracting to a method', 'comment_created': datetime.datetime(2021, 6, 26, 3, 32, 19, tzinfo=datetime.timezone.utc), 'commenter': 'david-allison', 'type': 'User'}, {'comment_id': 659112520, 'comment_body': ""can you extract `new Handler().postDelayed(` into an onboarding related class, if we wanted to change the implementation, we'd need to do it everywhere"", 'comment_created': datetime.datetime(2021, 6, 26, 3, 34, 19, tzinfo=datetime.timezone.utc), 'commenter': 'david-allison', 'type': 'User'}, {'comment_id': 659112750, 'comment_body': 'This is still pending, \r\n\r\n@Arthur-Milchior this might need elaboration on the design', 'comment_created': datetime.datetime(2021, 6, 26, 3, 37, 3, tzinfo=datetime.timezone.utc), 'commenter': 'david-allison', 'type': 'User'}, {'comment_id': 659178062, 'comment_body': ""I put more feedback about flags on https://github.com/ankidroid/Anki-Android/pull/9130 so I won't repeat here"", 'comment_created': datetime.datetime(2021, 6, 26, 15, 3, 32, tzinfo=datetime.timezone.utc), 'commenter': 'Arthur-Milchior', 'type': 'User'}, {'comment_id': 659181070, 'comment_body': 'what is `promptBackground`? I am lost here.\r\nI see `mPromptBackground` on https://github.com/sjwall/MaterialTapTargetPrompt/blob/099d7519c33be4b6d0dad2179b61fc1c6b97d602/library/src/main/java/uk/co/samuelwall/materialtaptargetprompt/extras/PromptOptions.java#L188 and so I would assume you are changing the value of this variable.\xa0But it seems quite counter-intuitive, given that it is a private variable', 'comment_created': datetime.datetime(2021, 6, 26, 15, 33, 30, tzinfo=datetime.timezone.utc), 'commenter': 'Arthur-Milchior', 'type': 'User'}, {'comment_id': 659181152, 'comment_body': '@david-allison-1 We are already using a custom builder now, is anything else also required? I had created a method earlier, but during review you had mentioned that the method decreases the readability and hence we should shift that code to a custom builder class.', 'comment_created': datetime.datetime(2021, 6, 26, 15, 34, 18, tzinfo=datetime.timezone.utc), 'commenter': 'ShridharGoel', 'type': 'User'}, {'comment_id': 659181193, 'comment_body': '`Unit` is required until the code is migrated to Kotlin.', 'comment_created': datetime.datetime(2021, 6, 26, 15, 34, 32, tzinfo=datetime.timezone.utc), 'commenter': 'ShridharGoel', 'type': 'User'}, {'comment_id': 659181199, 'comment_body': 'Yes, focal colour will not be set explicitly in case of null.', 'comment_created': datetime.datetime(2021, 6, 26, 15, 34, 39, tzinfo=datetime.timezone.utc), 'commenter': 'ShridharGoel', 'type': 'User'}, {'comment_id': 659181210, 'comment_body': ""Since this is not required now so I'll remove it."", 'comment_created': datetime.datetime(2021, 6, 26, 15, 34, 46, tzinfo=datetime.timezone.utc), 'commenter': 'ShridharGoel', 'type': 'User'}, {'comment_id': 659181214, 'comment_body': 'This checks if the first RecyclerView item is null.', 'comment_created': datetime.datetime(2021, 6, 26, 15, 34, 49, tzinfo=datetime.timezone.utc), 'commenter': 'ShridharGoel', 'type': 'User'}, {'comment_id': 659181355, 'comment_body': ""Why unit instead of void? I'd love javadoc to explain it please.\r\nI assume it is because otherwise you could not pass it as argument to a Kotlin function. That seems counter intuitive that there is such a restriction and should be explicited"", 'comment_created': datetime.datetime(2021, 6, 26, 15, 36, 4, tzinfo=datetime.timezone.utc), 'commenter': 'Arthur-Milchior', 'type': 'User'}, {'comment_id': 659181933, 'comment_body': 'Should we make it non-null then?', 'comment_created': datetime.datetime(2021, 6, 26, 15, 41, 52, tzinfo=datetime.timezone.utc), 'commenter': 'david-allison', 'type': 'User'}, {'comment_id': 659182088, 'comment_body': 'Could you extract it to a method `hasDecks()` maybe? \r\n\r\nWe should explain the ""why"" to the next developer, typically just the method name can do this', 'comment_created': datetime.datetime(2021, 6, 26, 15, 43, 19, tzinfo=datetime.timezone.utc), 'commenter': 'david-allison', 'type': 'User'}, {'comment_id': 659182288, 'comment_body': ""Had a quick google, strangely this doesn't seem easily solvable"", 'comment_created': datetime.datetime(2021, 6, 26, 15, 46, 3, tzinfo=datetime.timezone.utc), 'commenter': 'david-allison', 'type': 'User'}, {'comment_id': 659183031, 'comment_body': 'there is one obvious temporary solution:\r\nhaving a static method `voidToUnit` that takes a method returning void and transform it into a method returning `Unit`. It would be temporary because it will become useless once everything is in Kotlin.\r\n', 'comment_created': datetime.datetime(2021, 6, 26, 15, 50, 18, tzinfo=datetime.timezone.utc), 'commenter': 'Arthur-Milchior', 'type': 'User'}, {'comment_id': 659186987, 'comment_body': ""I assume the reason you inherited all methods and ensured they return `this` is to allow to have `CustomMaterialTapTargetPromptBuilder` as return type instead of a `MaterialTapTargetPrompt`. If I'm right, then there is an easier solution. If you use the new methods, i.e. `setFocalColourResource`, `setDismissedListener` etc... first, and if you override `show` to state that it also save the fact that the screen is visited then it's not a problem if all other setters return `MaterialTapTargetPrompt.Builder`."", 'comment_created': datetime.datetime(2021, 6, 26, 16, 16, 38, tzinfo=datetime.timezone.utc), 'commenter': 'Arthur-Milchior', 'type': 'User'}, {'comment_id': 659187032, 'comment_body': 'You probably want `setDismissedListener` to accept a [`Runnable`](https://docs.oracle.com/javase/7/docs/api/java/lang/Runnable.html). This way, you can use void instead of having to deal with units in java', 'comment_created': datetime.datetime(2021, 6, 26, 16, 17, 26, tzinfo=datetime.timezone.utc), 'commenter': 'Arthur-Milchior', 'type': 'User'}, {'comment_id': 659187097, 'comment_body': ""I also put a solution in the `CustomMaterialTapTargetPromptBuilder`'s comment"", 'comment_created': datetime.datetime(2021, 6, 26, 16, 17, 53, tzinfo=datetime.timezone.utc), 'commenter': 'Arthur-Milchior', 'type': 'User'}, {'comment_id': 659187309, 'comment_body': 'This is clearly not what I had in mind. I guess that using inheritance instead of delegation works. I fear it might not work anymore if we want to use another kind of builder in the future however', 'comment_created': datetime.datetime(2021, 6, 26, 16, 20, 38, tzinfo=datetime.timezone.utc), 'commenter': 'Arthur-Milchior', 'type': 'User'}, {'comment_id': 659189271, 'comment_body': 'I would like other mentors opinion. I believe for clarity, it would be nicer if the test was done in the methods themselves.\r\nE.g. `showTutorialForDeckChanger` would check if `DECK_CHANGER` is set, if so return immediately, otherwise actually show the tutorial. Maybe the name should be changed to `showTutorialForDeckChangerIfNew`', 'comment_created': datetime.datetime(2021, 6, 26, 16, 24, 28, tzinfo=datetime.timezone.utc), 'commenter': 'Arthur-Milchior', 'type': 'User'}, {'comment_id': 659189456, 'comment_body': 'What is the point of `mValue`. It seems redundant with `ordinal()`', 'comment_created': datetime.datetime(2021, 6, 26, 16, 26, 34, tzinfo=datetime.timezone.utc), 'commenter': 'Arthur-Milchior', 'type': 'User'}, {'comment_id': 659189579, 'comment_body': 'Actually, it was done correctly before the commit ""Use fixed integer value instead of enum ordinal"". I don\'t understand the point of this commit, can you please at least explain it?', 'comment_created': datetime.datetime(2021, 6, 26, 16, 27, 54, tzinfo=datetime.timezone.utc), 'commenter': 'Arthur-Milchior', 'type': 'User'}, {'comment_id': 659190208, 'comment_body': 'It was suggested by @david-allison-1 : https://github.com/ankidroid/Anki-Android/pull/9092#discussion_r655332947', 'comment_created': datetime.datetime(2021, 6, 26, 16, 34, 37, tzinfo=datetime.timezone.utc), 'commenter': 'ShridharGoel', 'type': 'User'}, {'comment_id': 659190779, 'comment_body': 'In this card, I was suggesting ordinals. I was also indicating that we should ensure that we never reorder or delete any element appart during alphas maybe. Ensuring that between each successive main version, elements are only added. This keep the code quite simpler, is not hard to enforce (should be indicated in a comment for safety). There is almost the same risk with current method of adding an explicit number and just add a lot of code duplication', 'comment_created': datetime.datetime(2021, 6, 26, 16, 40, 41, tzinfo=datetime.timezone.utc), 'commenter': 'Arthur-Milchior', 'type': 'User'}, {'comment_id': 659192676, 'comment_body': ""You don't want to use `.ordinal()` for an enum in persistence mechanisms unless the ordinal is explicitly defined (I don't think Java allows this).\r\n\r\nRemoving, or reordering an enum value while using `.ordinal()` causes all of the constants to map to the incorrect values. I've seen this have really nasty effects in systems before.\r\n\r\n----\r\n\r\n> Most programmers will have no use for this method. It is designed for use by sophisticated enum-based data structures, such as EnumSet and EnumMap.\r\n\r\nhttps://docs.oracle.com/javase/8/docs/api/java/lang/Enum.html"", 'comment_created': datetime.datetime(2021, 6, 26, 17, 1, 8, tzinfo=datetime.timezone.utc), 'commenter': 'david-allison', 'type': 'User'}, {'comment_id': 659193573, 'comment_body': 'For clarity:\r\n\r\nHave a `Onboarding.CardBrowser` class & pass in events/call methods on it, and have this class take the responsibility of the action to take\r\n\r\nThe code here would then become `mOnboarding.onCreate()` or `mOnboarding.displayFor(CardBrowser.ON_CREATE)`', 'comment_created': datetime.datetime(2021, 6, 26, 17, 9, 18, tzinfo=datetime.timezone.utc), 'commenter': 'david-allison', 'type': 'User'}, {'comment_id': 659193738, 'comment_body': 'https://github.com/sjwall/MaterialTapTargetPrompt/blob/099d7519c33be4b6d0dad2179b61fc1c6b97d602/library/src/main/java/uk/co/samuelwall/materialtaptargetprompt/extras/PromptOptions.java#L1439\r\n\r\nKotlin converts `obj.setX()` and `obj.getX()` defined in Java into Properties, accessed as `obj.X = value` or `val v = obj.X`', 'comment_created': datetime.datetime(2021, 6, 26, 17, 10, 53, tzinfo=datetime.timezone.utc), 'commenter': 'david-allison', 'type': 'User'}, {'comment_id': 659364449, 'comment_body': '`enum` is too vague. `screenIdentifier` may be more clear. And clearly require a javadoc', 'comment_created': datetime.datetime(2021, 6, 27, 19, 17, 37, tzinfo=datetime.timezone.utc), 'commenter': 'Arthur-Milchior', 'type': 'User'}, {'comment_id': 659929108, 'comment_body': '@Arthur-Milchior In that case, can you tell what is expected here? ', 'comment_created': datetime.datetime(2021, 6, 28, 16, 16, 3, tzinfo=datetime.timezone.utc), 'commenter': 'ShridharGoel', 'type': 'User'}, {'comment_id': 659930069, 'comment_body': 'Since onboarding related methods have now been moved to a Kotlin file, this issue of having to return `Unit.INSTANCE` is not longer present.', 'comment_created': datetime.datetime(2021, 6, 28, 16, 17, 23, tzinfo=datetime.timezone.utc), 'commenter': 'ShridharGoel', 'type': 'User'}, {'comment_id': 659931004, 'comment_body': 'It was required to pass this as a function from a Java file to a Kotlin based function.\r\nBut now, since this is in a Kotlin file, returning `Unit` is no longer required.', 'comment_created': datetime.datetime(2021, 6, 28, 16, 18, 42, tzinfo=datetime.timezone.utc), 'commenter': 'ShridharGoel', 'type': 'User'}, {'comment_id': 660587182, 'comment_body': ""I'll mark this as resolved. Nothing to do in my mind"", 'comment_created': datetime.datetime(2021, 6, 29, 12, 54, 19, tzinfo=datetime.timezone.utc), 'commenter': 'david-allison', 'type': 'User'}, {'comment_id': 660588161, 'comment_body': 'Could you explain why as well (otherwise the controls are obscured)', 'comment_created': datetime.datetime(2021, 6, 29, 12, 55, 31, tzinfo=datetime.timezone.utc), 'commenter': 'david-allison', 'type': 'User'}, {'comment_id': 660588855, 'comment_body': 'move this to `DeckPicker` and get rid of the variables in the constructor', 'comment_created': datetime.datetime(2021, 6, 29, 12, 56, 24, tzinfo=datetime.timezone.utc), 'commenter': 'david-allison', 'type': 'User'}, {'comment_id': 660589641, 'comment_body': ""Is `hasDecks().not()` idiomatic kotlin? I don't find it intuitive"", 'comment_created': datetime.datetime(2021, 6, 29, 12, 57, 17, tzinfo=datetime.timezone.utc), 'commenter': 'david-allison', 'type': 'User'}, {'comment_id': 660590246, 'comment_body': 'extract `Handler().post()/postDelayed()` to a static method so we can potentially change it later', 'comment_created': datetime.datetime(2021, 6, 29, 12, 58, 2, tzinfo=datetime.timezone.utc), 'commenter': 'david-allison', 'type': 'User'}, {'comment_id': 660591664, 'comment_body': 'I stated in the other review, but `featureIdentifier.declaringClass.simpleName` is going to cause bugs, and should either be changed to a method returning a constant, or each instance should be well tested', 'comment_created': datetime.datetime(2021, 6, 29, 12, 59, 44, tzinfo=datetime.timezone.utc), 'commenter': 'david-allison', 'type': 'User'}, {'comment_id': 660592074, 'comment_body': 'Loads of spacing changes here which make it harder to review', 'comment_created': datetime.datetime(2021, 6, 29, 13, 0, 11, tzinfo=datetime.timezone.utc), 'commenter': 'david-allison', 'type': 'User'}, {'comment_id': 660592488, 'comment_body': 'nit: spacing change', 'comment_created': datetime.datetime(2021, 6, 29, 13, 0, 39, tzinfo=datetime.timezone.utc), 'commenter': 'david-allison', 'type': 'User'}, {'comment_id': 660592724, 'comment_body': 'Might want to extract `ReviewerOnboardingEnum` and similar here to keep `Reviewer` almost fully clean of onboarding work', 'comment_created': datetime.datetime(2021, 6, 29, 13, 0, 58, tzinfo=datetime.timezone.utc), 'commenter': 'david-allison', 'type': 'User'}, {'comment_id': 660601405, 'comment_body': ""I strongly disagree. I've been stung by this in the past, the javadocs imply that we shouldn't be using `.ordinal()`. \r\n\r\nPeople refactor without thinking about the surrounding context. A bug which can be introduced thoughtlessly by a mass refactoring, and causes subtle data corruption with no defined recovery procedure isn't anywhere near the problem of some code duplication."", 'comment_created': datetime.datetime(2021, 6, 29, 13, 11, 11, tzinfo=datetime.timezone.utc), 'commenter': 'david-allison', 'type': 'User'}, {'comment_id': 661623603, 'comment_body': 'These are not extra changes, they are required since the code has been put inside `companion object` as it was asked in a previous review to use a class here instead of creating a Singleton.', 'comment_created': datetime.datetime(2021, 6, 30, 16, 13, 28, tzinfo=datetime.timezone.utc), 'commenter': 'ShridharGoel', 'type': 'User'}, {'comment_id': 662517701, 'comment_body': 'Can this be reverted?', 'comment_created': datetime.datetime(2021, 7, 1, 18, 44, 2, tzinfo=datetime.timezone.utc), 'commenter': 'david-allison', 'type': 'User'}, {'comment_id': 662518083, 'comment_body': 'Keep this as an instance method', 'comment_created': datetime.datetime(2021, 7, 1, 18, 44, 48, tzinfo=datetime.timezone.utc), 'commenter': 'david-allison', 'type': 'User'}, {'comment_id': 662519822, 'comment_body': 'You can include `featureConstant` in the definition of `OnboardingFlag`', 'comment_created': datetime.datetime(2021, 7, 1, 18, 48, 10, tzinfo=datetime.timezone.utc), 'commenter': 'david-allison', 'type': 'User'}, {'comment_id': 662520561, 'comment_body': ""We don't need these as translatable strings if they're Debug only. Hardcode or use `constants (or) strings.xml` (see how other preferences did it)."", 'comment_created': datetime.datetime(2021, 7, 1, 18, 49, 35, tzinfo=datetime.timezone.utc), 'commenter': 'david-allison', 'type': 'User'}, {'comment_id': 662520831, 'comment_body': 'This needs to be added to the translation sync script(s) in /tools', 'comment_created': datetime.datetime(2021, 7, 1, 18, 50, 3, tzinfo=datetime.timezone.utc), 'commenter': 'david-allison', 'type': 'User'}, {'comment_id': 663117050, 'comment_body': 'Could add a custom builder which takes `DeckPickerOnboardingEnum` and uses `getFeatureConstant()` to reduce code here', 'comment_created': datetime.datetime(2021, 7, 2, 16, 8, tzinfo=datetime.timezone.utc), 'commenter': 'david-allison', 'type': 'User'}, {'comment_id': 663147863, 'comment_body': ""@david-allison-1 Actually `featureConstant` wasn't required here. Removed it."", 'comment_created': datetime.datetime(2021, 7, 2, 17, 8, 7, tzinfo=datetime.timezone.utc), 'commenter': 'ShridharGoel', 'type': 'User'}, {'comment_id': 663284212, 'comment_body': ""Can you please explain this notation. I must admit that even looking at https://developer.android.com/reference/kotlin/android/graphics/RectF I can't figure out its meaning.\r\nAlso, with twice the height ? The second one should be documented because it'll be a question even to people knowing Kotlin"", 'comment_created': datetime.datetime(2021, 7, 2, 23, 36, 44, tzinfo=datetime.timezone.utc), 'commenter': 'Arthur-Milchior', 'type': 'User'}, {'comment_id': 663285831, 'comment_body': ""I'd like javadoc. Just explaining what more you do on top of promptPackground prepare would help. Or copying it and noting the difference may be nice too"", 'comment_created': datetime.datetime(2021, 7, 2, 23, 45, 57, tzinfo=datetime.timezone.utc), 'commenter': 'Arthur-Milchior', 'type': 'User'}, {'comment_id': 663286442, 'comment_body': ""I don't understand. If I get it right, you are both taking a PromptBackground as argument and inheriting from it. Isn't it redundant? I don't understand the point here"", 'comment_created': datetime.datetime(2021, 7, 2, 23, 49, 36, tzinfo=datetime.timezone.utc), 'commenter': 'Arthur-Milchior', 'type': 'User'}, {'comment_id': 663287517, 'comment_body': 'Fine. ', 'comment_created': datetime.datetime(2021, 7, 2, 23, 55, 55, tzinfo=datetime.timezone.utc), 'commenter': 'Arthur-Milchior', 'type': 'User'}, {'comment_id': 663289663, 'comment_body': 'In another comment you mentionned that those functions are now in kotlin. Does it require to be in java first or can you put it in kotlin directly so that it avoid adding code to delete it soon after', 'comment_created': datetime.datetime(2021, 7, 3, 0, 9, 52, tzinfo=datetime.timezone.utc), 'commenter': 'Arthur-Milchior', 'type': 'User'}, {'comment_id': 663289810, 'comment_body': 'oh right. Ideally in the same commit than the one where the file is created', 'comment_created': datetime.datetime(2021, 7, 3, 0, 10, 53, tzinfo=datetime.timezone.utc), 'commenter': 'Arthur-Milchior', 'type': 'User'}, {'comment_id': 663293271, 'comment_body': ""Oh, what I was trying to state is that this implementation is right. I believe that if needed, it can be reworked to be more general later, but right now it's quite good enough"", 'comment_created': datetime.datetime(2021, 7, 3, 0, 36, 34, tzinfo=datetime.timezone.utc), 'commenter': 'Arthur-Milchior', 'type': 'User'}, {'comment_id': 663294866, 'comment_body': 'Could you please make first a commit that add this interface, and then rewrite the intermediate commit so that the enumeration directly implements it? It will avoid to change the same code multiple time in a same PR and make reviewing the last commits quite easier', 'comment_created': datetime.datetime(2021, 7, 3, 0, 49, 32, tzinfo=datetime.timezone.utc), 'commenter': 'Arthur-Milchior', 'type': 'User'}, {'comment_id': 663295016, 'comment_body': 'Please remove this line. We want inspection. It was only useful on legacy code', 'comment_created': datetime.datetime(2021, 7, 3, 0, 50, 49, tzinfo=datetime.timezone.utc), 'commenter': 'Arthur-Milchior', 'type': 'User'}, {'comment_id': 663295035, 'comment_body': 'Please add it in the same commit where you created the file.', 'comment_created': datetime.datetime(2021, 7, 3, 0, 50, 59, tzinfo=datetime.timezone.utc), 'commenter': 'Arthur-Milchior', 'type': 'User'}, {'comment_id': 663295158, 'comment_body': 'What is ""this""? You may want to take ""the content of this file"" or ""the documentation"" or somethnig else.\r\n\r\nIt\'s even more strange that it seems you are reusing PrmoptBackground (and not Shapes as you linked here) and not copying the code of the linked file', 'comment_created': datetime.datetime(2021, 7, 3, 0, 52, 7, tzinfo=datetime.timezone.utc), 'commenter': 'Arthur-Milchior', 'type': 'User'}, {'comment_id': 663382528, 'comment_body': 'It was auto-converted from Java. Reference to read about how this operator works: https://kotlinlang.org/docs/operator-overloading.html#indexed-access-operator\r\nChanged it to use `set()` method now, so that it becomes easy to understand.\r\n\r\nAdded the reason of using twice the height. Some area at the bottom of the screen was not being dimmed, so had to increase the width.', 'comment_created': datetime.datetime(2021, 7, 3, 16, 20, 11, tzinfo=datetime.timezone.utc), 'commenter': 'ShridharGoel', 'type': 'User'}, {'comment_id': 663385936, 'comment_body': 'Methods of the base class which are used here are abstract. Hence `super` cannot be used, so taking an instance of `PromptBackground` as argument would be required.', 'comment_created': datetime.datetime(2021, 7, 3, 16, 56, 42, tzinfo=datetime.timezone.utc), 'commenter': 'ShridharGoel', 'type': 'User'}, {'comment_id': 663385949, 'comment_body': ""The link is correct. It contains the relevant code after the 'Shapes' section."", 'comment_created': datetime.datetime(2021, 7, 3, 16, 56, 46, tzinfo=datetime.timezone.utc), 'commenter': 'ShridharGoel', 'type': 'User'}, {'comment_id': 663386023, 'comment_body': '`MissingCopyrightHeader` works only with GPLv3 license currently.', 'comment_created': datetime.datetime(2021, 7, 3, 16, 57, 47, tzinfo=datetime.timezone.utc), 'commenter': 'ShridharGoel', 'type': 'User'}, {'comment_id': 663538172, 'comment_body': ""Oh, thanks for the explanation. I didn't know"", 'comment_created': datetime.datetime(2021, 7, 4, 18, 7, 43, tzinfo=datetime.timezone.utc), 'commenter': 'Arthur-Milchior', 'type': 'User'}, {'comment_id': 663538839, 'comment_body': ""`super` can't be used where?\r\nAssuming it is similar to java, you can create a constructor of the derived class, DimmedPromptBackground, and call super in it. You can't directly create a member of an abstract class, but you can call its constructor.\r\n\r\nI'm looking at the documentation and it seems that abstract class and inheritance is similar than in java.\r\n"", 'comment_created': datetime.datetime(2021, 7, 4, 18, 13, 30, tzinfo=datetime.timezone.utc), 'commenter': 'Arthur-Milchior', 'type': 'User'}, {'comment_id': 663539420, 'comment_body': ""Actually, I was thinking about adding some javadoc everywhere. Because `update` also is very vague when you don't know the context, and even `contains` there is multiple interpretation, even if I can guess that it asks whether the rectangle contains this point"", 'comment_created': datetime.datetime(2021, 7, 4, 18, 19, 51, tzinfo=datetime.timezone.utc), 'commenter': 'Arthur-Milchior', 'type': 'User'}, {'comment_id': 663540370, 'comment_body': 'By the way, you are calling the default constructor of PrompteBackground with `PromptBackground`. So it seems that you are effectively doing the same thing than calling `super()` in a method', 'comment_created': datetime.datetime(2021, 7, 4, 18, 28, 36, tzinfo=datetime.timezone.utc), 'commenter': 'Arthur-Milchior', 'type': 'User'}, {'comment_id': 663547508, 'comment_body': ""I'd love if you could split the commit in two. One which transform into a class, and the other one which change the content. It would make reviewing the new content easier"", 'comment_created': datetime.datetime(2021, 7, 4, 19, 36, 47, tzinfo=datetime.timezone.utc), 'commenter': 'Arthur-Milchior', 'type': 'User'}, {'comment_id': 663559210, 'comment_body': 'Whether the tutorial for feature `featureIdentifier` should be displayed. \r\n\r\nEither if `SHOW_ONBOARDING` holds or this was not yet shown. ', 'comment_created': datetime.datetime(2021, 7, 4, 21, 32, 29, tzinfo=datetime.timezone.utc), 'commenter': 'Arthur-Milchior', 'type': 'User'}, {'comment_id': 663559387, 'comment_body': ""Same with `featureIdentifier`, it may be nice to rename it in a PR where you don't make other change to the method, so that I can read the method change easily.\r\nYou can use the same PR to rename the variable in all methods, and another PR to make the changes"", 'comment_created': datetime.datetime(2021, 7, 4, 21, 34, 7, tzinfo=datetime.timezone.utc), 'commenter': 'Arthur-Milchior', 'type': 'User'}, {'comment_id': 663562280, 'comment_body': 'Can you also add a javadoc explaining what is expected. I suppose that the string should have the same value as the enum value', 'comment_created': datetime.datetime(2021, 7, 4, 22, 4, 22, tzinfo=datetime.timezone.utc), 'commenter': 'Arthur-Milchior', 'type': 'User'}, {'comment_id': 663562377, 'comment_body': 'Any reason to introduce a variable here?', 'comment_created': datetime.datetime(2021, 7, 4, 22, 5, 25, tzinfo=datetime.timezone.utc), 'commenter': 'Arthur-Milchior', 'type': 'User'}, {'comment_id': 663564577, 'comment_body': 'Please, by default, add javadoc everywhere. I\'ve little idea why you introduce this method. and the commit message don\'t help. \r\nIn general I\'m strongly in favor of separating the commits which add a features, in this case handling ""post"" (whatever it is) to the actual content using it. In this case, I assume, reviewer and abstract flasch card viewer.\r\n\r\nThe default handler constructor is deprecated and risk loosing call, according to https://developer.android.com/reference/android/os/Handler#Handler() , so that\'s not a good implementation unless there is a really good reason.\r\n\r\nI would like to read the reason you decided to handle runner like this, because we have not used it in ankidroid as far as I know. I don\'t know what is the goal here, but I doubt we can be certain we will always have the things in the order we want', 'comment_created': datetime.datetime(2021, 7, 4, 22, 28, 9, tzinfo=datetime.timezone.utc), 'commenter': 'Arthur-Milchior', 'type': 'User'}, {'comment_id': 663564763, 'comment_body': 'Is it a good idea to have the same class name than the java class it is related too? I fear it will make code harder to review later, if I see a variable of type `AbstractFlashcardViewer` and do not know which type the code uses', 'comment_created': datetime.datetime(2021, 7, 4, 22, 29, 44, tzinfo=datetime.timezone.utc), 'commenter': 'Arthur-Milchior', 'type': 'User'}, {'comment_id': 663565058, 'comment_body': 'Same remark about Handler than below. Also, seems strange to use a different handler each time', 'comment_created': datetime.datetime(2021, 7, 4, 22, 32, 37, tzinfo=datetime.timezone.utc), 'commenter': 'Arthur-Milchior', 'type': 'User'}, {'comment_id': 666116602, 'comment_body': 'I have updated the implementation. Used https://developer.android.com/reference/android/os/Handler#Handler(android.os.Looper) which is not deprecated.\r\n\r\nHandler is required here to show feature prompt on menu items. Reference: https://github.com/sjwall/MaterialTapTargetPrompt/issues/73#issuecomment-320681655', 'comment_created': datetime.datetime(2021, 7, 8, 11, 43, 27, tzinfo=datetime.timezone.utc), 'commenter': 'ShridharGoel', 'type': 'User'}, {'comment_id': 666118996, 'comment_body': 'This is inside the `Onboarding` class which means that it will be represented as `Onboarding.AbstractFlashcardViewer`. Also, the constructor is different in these classes. So that should be sufficient to differentiate between these classes, right?', 'comment_created': datetime.datetime(2021, 7, 8, 11, 47, 30, tzinfo=datetime.timezone.utc), 'commenter': 'ShridharGoel', 'type': 'User'}, {'comment_id': 666119902, 'comment_body': '> seems strange to use a different handler each time\r\n\r\nCan you explain what does this mean? Do you mean using both `postDelayed()` and `post()`?', 'comment_created': datetime.datetime(2021, 7, 8, 11, 48, 59, tzinfo=datetime.timezone.utc), 'commenter': 'ShridharGoel', 'type': 'User'}, {'comment_id': 666120196, 'comment_body': 'No, updated.', 'comment_created': datetime.datetime(2021, 7, 8, 11, 49, 27, tzinfo=datetime.timezone.utc), 'commenter': 'ShridharGoel', 'type': 'User'}, {'comment_id': 666347553, 'comment_body': ""Could you add a reference to the comment in the source code, it'll get lost here"", 'comment_created': datetime.datetime(2021, 7, 8, 16, 28, 43, tzinfo=datetime.timezone.utc), 'commenter': 'david-allison', 'type': 'User'}, {'comment_id': 666348434, 'comment_body': ""This line won't be needed after https://github.com/ankidroid/Anki-Android/issues/9223 is merged."", 'comment_created': datetime.datetime(2021, 7, 8, 16, 29, 54, tzinfo=datetime.timezone.utc), 'commenter': 'david-allison', 'type': 'User'}, {'comment_id': 666444949, 'comment_body': '@david-allison-1 I have already added it, please check the latest code.', 'comment_created': datetime.datetime(2021, 7, 8, 18, 57, 3, tzinfo=datetime.timezone.utc), 'commenter': 'ShridharGoel', 'type': 'User'}, {'comment_id': 666446419, 'comment_body': 'We still want this with a GPLv3 header stating that it includes content with a GPL compatible license', 'comment_created': datetime.datetime(2021, 7, 8, 18, 59, 33, tzinfo=datetime.timezone.utc), 'commenter': 'david-allison', 'type': 'User'}, {'comment_id': 667423602, 'comment_body': ""I have no played with it enough to understand why you had to do things the way you did.\r\nAs I suspect future reader may find this as surprising as myself, I wrote this comment that I hope we can add to explain this choice.\r\n\r\n// It may seem strange to inherit PromptBackground without reusing any of the\r\n// method of super. Let us explain this choice.\r\n//\r\n// It seems that this class could work exactly as well without inheriting.\r\n// However, this would forbid us to use this class with methods such as\r\n// PromptOptions#setPromptBackground that expects a PromptBackground.\r\n// Inheriting allow such a call to by correctly typed, even if there is not a single method\r\n// in common.\r\n//\r\n// It seems that `mPromptBackground.foo` could be replaced by `super.foo` in order to avoid\r\n// taking a parameter. This would in particular allow not to define `setColour` and `contains`.\r\n// However, `setColour` is abstract and `contains` comes from an Interface.\r\n// Clearly, not implementing them is not an option. The reason why it work is that actually\r\n// `mPromptBackground` is NOT an object of type `PromptBackground` but is an\r\n// object of concrete type inheriting from `PromptBackground`, such as\r\n// `RectanglePromptBackground` or `CirclePromptBackground`.\r\n// If we were to use inheritance, we would need to inherit independently\r\n// `RectanglePromptBackground` and `CirclePromptBackground`, leading to code duplication or\r\n// requiring multiple inheritance. Multiple inheritance is only an option with interfaces\r\n// however, we can't add this code in an interface, as this code would call super, requiring\r\n// the interface to inherit from PromptBackground, which is impossible since this in\r\n// not an interface.\r\n\r\n\r\n"", 'comment_created': datetime.datetime(2021, 7, 11, 5, 15, 10, tzinfo=datetime.timezone.utc), 'commenter': 'Arthur-Milchior', 'type': 'User'}, {'comment_id': 667433739, 'comment_body': 'thanks. Quite nicer to review', 'comment_created': datetime.datetime(2021, 7, 11, 7, 3, 54, tzinfo=datetime.timezone.utc), 'commenter': 'Arthur-Milchior', 'type': 'User'}, {'comment_id': 667434173, 'comment_body': ""I remember you mentionned that the method should be used for the index of the element in the bitset. \r\nWhat problem do you see? That the enumeration class is renamed\xa0?\xa0Because appart from that, which should not occur, I don't see what problem we could have.\r\nAnd it seems as hard to ensure that the method result is not changed than to ensure that the enum's name is not changed"", 'comment_created': datetime.datetime(2021, 7, 11, 7, 8, 11, tzinfo=datetime.timezone.utc), 'commenter': 'Arthur-Milchior', 'type': 'User'}, {'comment_id': 667434449, 'comment_body': 'Thanks for adding the javadoc. Could you do it in ""Implement usage of constants for preference keys for onboarding"" so that the javadoc and declaration are done simultaneously please?', 'comment_created': datetime.datetime(2021, 7, 11, 7, 10, 26, tzinfo=datetime.timezone.utc), 'commenter': 'Arthur-Milchior', 'type': 'User'}, {'comment_id': 667434648, 'comment_body': ""Also, can you please pull all commits related to changing OnboardingUtils into its own\xa0PR. So that this other PR can be merged asap and don't have to be reviewed by the more complex onboarding PR"", 'comment_created': datetime.datetime(2021, 7, 11, 7, 12, 1, tzinfo=datetime.timezone.utc), 'commenter': 'Arthur-Milchior', 'type': 'User'}, {'comment_id': 667434712, 'comment_body': '@david-allison-1 which line? ""@SuppressLint(""ConstantFieldName"")"" ?', 'comment_created': datetime.datetime(2021, 7, 11, 7, 12, 39, tzinfo=datetime.timezone.utc), 'commenter': 'Arthur-Milchior', 'type': 'User'}, {'comment_id': 667446470, 'comment_body': ""If all instance of this class uses `Onboarding.AbstractFlashcardViewer` then there should be little problem while reviewing the code. The trouble is that if you write `AbstractFlashcardViewer`, Android\xa0Studio will suggest both as auto completion, and you need to know the two classes exists and the difference in order to know which one you want to accept.\r\nIt's not horrible, but I fear it might make onboarding more complex for future user. However, that's not a reason to block according to me. I don't have a better idea, so I'll accept to merge with this"", 'comment_created': datetime.datetime(2021, 7, 11, 8, 48, 25, tzinfo=datetime.timezone.utc), 'commenter': 'Arthur-Milchior', 'type': 'User'}, {'comment_id': 667450486, 'comment_body': 'Why do we want to call `showTutorialForDeckIfNew` only if FAB were not already shown. And in particular why would you want to show it when you call the method `showTutorialForFABIfNew`?\r\n', 'comment_created': datetime.datetime(2021, 7, 11, 9, 20, 49, tzinfo=datetime.timezone.utc), 'commenter': 'Arthur-Milchior', 'type': 'User'}, {'comment_id': 667451147, 'comment_body': 'There are a lot of classes that are relatively similar but not totally. That makes them hard to follow because even if I grasp the purpose of DeckPicker, I have to re-read the whole AbstractFlashcardViewer because it\'s not exactly the same logic.\r\n\r\nI\'d like you to write a small document (a google doc for example, so that we can comment more easily, and edit together) that explain the purpose of those classes. What they are expected to do. Ideally, I\'d really like us to have an abstract class that can factorize most of those internal classes and method and ensure that we don\'t repeat that much code.\r\n\r\nFor example, I suspect that our goal is to have a list of tutorial we want to show. In this case, we can have a list of pair (flag, tutorial function), and iterate through them with the rule ""if flag is not set, set the flag and execute the function"". This would make the logic quite easier to follow.\r\n\r\nOr, @david-allison-1 , you can say I stop trying to factorize, the code work, we can merge it and still improve it later. That would be acceptable.', 'comment_created': datetime.datetime(2021, 7, 11, 9, 26, 20, tzinfo=datetime.timezone.utc), 'commenter': 'Arthur-Milchior', 'type': 'User'}, {'comment_id': 667451509, 'comment_body': ""Yes, it's related to `companion object` and should be removable now the above PR is merged"", 'comment_created': datetime.datetime(2021, 7, 11, 9, 28, 54, tzinfo=datetime.timezone.utc), 'commenter': 'david-allison', 'type': 'User'}, {'comment_id': 667452348, 'comment_body': ""Renaming a class is a somewhat common refactoring that you want to allow people to do without concern that they're going to break something.\r\n\r\nChanging the constant that's returned from a method is comparatively a much more delicate operation, and people are more likely to ask questions about the impact in a review."", 'comment_created': datetime.datetime(2021, 7, 11, 9, 35, 34, tzinfo=datetime.timezone.utc), 'commenter': 'david-allison', 'type': 'User'}, {'comment_id': 667453630, 'comment_body': 'The commit introducing it really need to explain why we use a Handler here. \r\nI just wrote this morning https://github.com/ankidroid/Anki-Android/wiki/Asynchronous-computation that explain how we usually deal with async task', 'comment_created': datetime.datetime(2021, 7, 11, 9, 46, 38, tzinfo=datetime.timezone.utc), 'commenter': 'Arthur-Milchior', 'type': 'User'}, {'comment_id': 667455492, 'comment_body': ""You should explicitly write that it'll execute on the main thread. It's not clear from javadoc and is very important as it mean that it could possibly block the main thread if there is any non-trivial computation here"", 'comment_created': datetime.datetime(2021, 7, 11, 10, 1, 24, tzinfo=datetime.timezone.utc), 'commenter': 'Arthur-Milchior', 'type': 'User'}, {'comment_id': 667455933, 'comment_body': ""As another example, this commit should really be more descriptive. It should indicate that it is adding a menu in preference. May be even indicate the path to access it, and the option.\r\n\r\nUnless I get things wrong, this commit does not use any of the feature from the previous commits. So you can just create a PR with this commit alone, to get it merged quickly. \r\nThis PR is long, reviewing it is long. I'm strongly in favor of doing plenty of smaller PR. I'll spend less time on each review"", 'comment_created': datetime.datetime(2021, 7, 11, 10, 5, 8, tzinfo=datetime.timezone.utc), 'commenter': 'Arthur-Milchior', 'type': 'User'}, {'comment_id': 671623575, 'comment_body': 'Any reason not to have done what David asked?', 'comment_created': datetime.datetime(2021, 7, 17, 6, 19, 9, tzinfo=datetime.timezone.utc), 'commenter': 'Arthur-Milchior', 'type': 'User'}, {'comment_id': 671824602, 'comment_body': 'I fear that ""a class for the particular Activity/Fragment exists"" is not clear unless you already know this code base.\r\nActually, I guess you need to do both onboarding for ankidroid user, and onboarding for developers using your library. I really love this javadoc.\r\n\r\nIn general, I believe examples are the best documentation you can give, as long as it cover all cases that may be of interest. \r\n\r\n> 1. Let\'s say you want to add a new tutorial in a fictive activity  MyAct.\xa0Look for an inner class MyAct below extending OnboardingImpl. If it exists, go to step 3.\r\n> 2. Create a class MyAct extending OnboardingImpl. Add an enum class extending `.OnboardingFlag`\r\n> 3. Create a method with no argument that is used to display the tutorial...\r\n\r\n\r\nand so on.\r\n\r\nThe idea is that it\'s an algorithm that the developer can apply manually to add a tutorial without having to understand any context. Without having to guess what means ""a class for the particular Activity""', 'comment_created': datetime.datetime(2021, 7, 18, 11, 5, 31, tzinfo=datetime.timezone.utc), 'commenter': 'Arthur-Milchior', 'type': 'User'}, {'comment_id': 671825569, 'comment_body': 'Can this be an abstract class? \r\nImplementor choice: you can use `OnboardingImpl` as the outer class, and have DeckPicker both as an inner class and extending `OnboardingImpl`\r\n\r\nI wonder whether the DeckPicker onboarding class should not be a inner class of `DeckPicker`, but implementor choice (unless @david-allison-1 have an opinon here. )', 'comment_created': datetime.datetime(2021, 7, 18, 11, 13, 12, tzinfo=datetime.timezone.utc), 'commenter': 'Arthur-Milchior', 'type': 'User'}, {'comment_id': 671825705, 'comment_body': '> only if `mOnboardingCondition` is not null and return true.', 'comment_created': datetime.datetime(2021, 7, 18, 11, 14, 31, tzinfo=datetime.timezone.utc), 'commenter': 'Arthur-Milchior', 'type': 'User'}, {'comment_id': 671836581, 'comment_body': ""Can you add javadoc to indicate that it tests whether there are decks displayed. Which is actually distinct from having content in the DeckManager, since there is also a default deck (which is not shown if it is empty)\r\nIf it's not too hard, I'd also like some unit test. Not blocking by itself, I'm never sure what works or not with actiivty"", 'comment_created': datetime.datetime(2021, 7, 18, 12, 37, 57, tzinfo=datetime.timezone.utc), 'commenter': 'Arthur-Milchior', 'type': 'User'}, {'comment_id': 671837811, 'comment_body': 'Thanks a lot.\xa0I believe the commit adding this is ready to be made into its own PR and merged quickly. So next review can ignore this commit (and the preceding one, I assume it is required too for the current commit)', 'comment_created': datetime.datetime(2021, 7, 18, 12, 48, 21, tzinfo=datetime.timezone.utc), 'commenter': 'Arthur-Milchior', 'type': 'User'}, {'comment_id': 671839551, 'comment_body': 'As far as I can tell, there is never any reason to get two objects, am I wrong?\r\nIf so, can you use the [singleton pattern|https://en.wikipedia.org/wiki/Singleton_pattern] in those classes?', 'comment_created': datetime.datetime(2021, 7, 18, 13, 2, 6, tzinfo=datetime.timezone.utc), 'commenter': 'Arthur-Milchior', 'type': 'User'}, {'comment_id': 671839752, 'comment_body': 'Is there any reason to have this as a member? It seems to add state to the object without having any meaning to it.\r\nIf we go with the singleton pattern, then there would be really no reason not to simply use the singleton in the two uses of this object. \r\n\r\nAnother possibility would be to consider that Reviewer opening and ReviewerShowingAnswer would be two different classes, since they should show different content anyway ', 'comment_created': datetime.datetime(2021, 7, 18, 13, 3, 32, tzinfo=datetime.timezone.utc), 'commenter': 'Arthur-Milchior', 'type': 'User'}, {'comment_id': 671839916, 'comment_body': 'Any reason you did not do it?', 'comment_created': datetime.datetime(2021, 7, 18, 13, 4, 58, tzinfo=datetime.timezone.utc), 'commenter': 'Arthur-Milchior', 'type': 'User'}, {'comment_id': 671839949, 'comment_body': 'Same request on the other method by the way', 'comment_created': datetime.datetime(2021, 7, 18, 13, 5, 14, tzinfo=datetime.timezone.utc), 'commenter': 'Arthur-Milchior', 'type': 'User'}, {'comment_id': 671840229, 'comment_body': 'Why do you want to add the delay? For the style? Is there a bug otherwise? Can you please add a comment to it', 'comment_created': datetime.datetime(2021, 7, 18, 13, 7, 41, tzinfo=datetime.timezone.utc), 'commenter': 'Arthur-Milchior', 'type': 'User'}, {'comment_id': 671841066, 'comment_body': 'Can you please explain why this one in particular need to go through the handler. What is the difference with other CustomMaterialTapTargetPromptBuilder ?', 'comment_created': datetime.datetime(2021, 7, 18, 13, 13, 56, tzinfo=datetime.timezone.utc), 'commenter': 'Arthur-Milchior', 'type': 'User'}, {'comment_id': 671843770, 'comment_body': 'It has been already updated, I think you have reviewed older code. Please check the updated code.', 'comment_created': datetime.datetime(2021, 7, 18, 13, 35, 31, tzinfo=datetime.timezone.utc), 'commenter': 'ShridharGoel', 'type': 'User'}, {'comment_id': 671843956, 'comment_body': ""I'll do it on the other method as well."", 'comment_created': datetime.datetime(2021, 7, 18, 13, 36, 41, tzinfo=datetime.timezone.utc), 'commenter': 'ShridharGoel', 'type': 'User'}, {'comment_id': 672131264, 'comment_body': 'Singleton objects do not have constructors. In the current implementation, a constructor is required.', 'comment_created': datetime.datetime(2021, 7, 19, 9, 17, 37, tzinfo=datetime.timezone.utc), 'commenter': 'ShridharGoel', 'type': 'User'}, {'comment_id': 677759835, 'comment_body': 'It is required to update the visibility after 4 seconds.', 'comment_created': datetime.datetime(2021, 7, 27, 20, 1, 56, tzinfo=datetime.timezone.utc), 'commenter': 'ShridharGoel', 'type': 'User'}, {'comment_id': 677760279, 'comment_body': 'Handler is required here to show feature prompt on menu items. Reference: https://github.com/sjwall/MaterialTapTargetPrompt/issues/73#issuecomment-320681655\r\n', 'comment_created': datetime.datetime(2021, 7, 27, 20, 2, 47, tzinfo=datetime.timezone.utc), 'commenter': 'ShridharGoel', 'type': 'User'}, {'comment_id': 684547263, 'comment_body': 'Would you mind adding a test for this one please?', 'comment_created': datetime.datetime(2021, 8, 6, 23, 29, 6, tzinfo=datetime.timezone.utc), 'commenter': 'Arthur-Milchior', 'type': 'User'}, {'comment_id': 684547271, 'comment_body': 'Would you mind adding a test for this one please?', 'comment_created': datetime.datetime(2021, 8, 6, 23, 29, 11, tzinfo=datetime.timezone.utc), 'commenter': 'Arthur-Milchior', 'type': 'User'}, {'comment_id': 684547447, 'comment_body': '3.', 'comment_created': datetime.datetime(2021, 8, 6, 23, 29, 49, tzinfo=datetime.timezone.utc), 'commenter': 'Arthur-Milchior', 'type': 'User'}, {'comment_id': 684547987, 'comment_body': ""This question still remains open. I won't block on this, we have little time left, but I'd have suspected it to be nicer"", 'comment_created': datetime.datetime(2021, 8, 6, 23, 32, 22, tzinfo=datetime.timezone.utc), 'commenter': 'Arthur-Milchior', 'type': 'User'}, {'comment_id': 684549396, 'comment_body': ""I'd have a slight preference to put DeckPicker in its own commit. So that each activity is related to one commit."", 'comment_created': datetime.datetime(2021, 8, 6, 23, 38, 47, tzinfo=datetime.timezone.utc), 'commenter': 'Arthur-Milchior', 'type': 'User'}, {'comment_id': 684558616, 'comment_body': ""I still would like to see a comment in the commit to explain the reason we introduce this.\r\n\r\nIs there a way to test it?  I think we could do the same thing that what we did for Tasks executed in background. I think it's setting a boolean to false, then a function set it to true  in a task/handler (eventually with a 1 second delay). \r\nThen we test the value is put to true. (Potentially we also keep a timestamp, and check that it was executed 1 second after the request, with an acceptable delta)"", 'comment_created': datetime.datetime(2021, 8, 7, 0, 31, 27, tzinfo=datetime.timezone.utc), 'commenter': 'Arthur-Milchior', 'type': 'User'}, {'comment_id': 684558729, 'comment_body': ""I still would like to see a comment in the commit to explain the reason we introduce this.\r\n\r\nIs there a way to test it?  I think we could do the same thing that what we did for Tasks executed in background. I think it's setting a boolean to false, then a function set it to true  in a task/handler (eventually with a 1 second delay). \r\nThen we test the value is put to true. (Potentially we also keep a timestamp, and check that it was executed 1 second after the request, with an acceptable delta)"", 'comment_created': datetime.datetime(2021, 8, 7, 0, 32, 17, tzinfo=datetime.timezone.utc), 'commenter': 'Arthur-Milchior', 'type': 'User'}, {'comment_id': 684558821, 'comment_body': 'The question still holds', 'comment_created': datetime.datetime(2021, 8, 7, 0, 33, 2, tzinfo=datetime.timezone.utc), 'commenter': 'Arthur-Milchior', 'type': 'User'}, {'comment_id': 684559350, 'comment_body': ""Would you mind stating what occurs if you don't do it? \r\nI guess that the item is not yet loaded, so we need to wait until it's actually loaded to execute the function; and adding the function on the looper is a way to do so that just work. Does not seem ideal."", 'comment_created': datetime.datetime(2021, 8, 7, 0, 36, 39, tzinfo=datetime.timezone.utc), 'commenter': 'Arthur-Milchior', 'type': 'User'}, {'comment_id': 684559513, 'comment_body': 'Okay, but why do we want to wait four seconds?', 'comment_created': datetime.datetime(2021, 8, 7, 0, 37, 46, tzinfo=datetime.timezone.utc), 'commenter': 'Arthur-Milchior', 'type': 'User'}, {'comment_id': 684600984, 'comment_body': ""If we don't have it as a member, then it will be required to initialise it two times, once inside `onCreate()` method and again inside `displayAnswerBottomBar()`."", 'comment_created': datetime.datetime(2021, 8, 7, 7, 56, 56, tzinfo=datetime.timezone.utc), 'commenter': 'ShridharGoel', 'type': 'User'}, {'comment_id': 684600988, 'comment_body': 'Added.', 'comment_created': datetime.datetime(2021, 8, 7, 7, 57, 2, tzinfo=datetime.timezone.utc), 'commenter': 'ShridharGoel', 'type': 'User'}, {'comment_id': 684600991, 'comment_body': 'Can you tell how an abstract class can be used here? Also, what would be the benefit of using it?', 'comment_created': datetime.datetime(2021, 8, 7, 7, 57, 7, tzinfo=datetime.timezone.utc), 'commenter': 'ShridharGoel', 'type': 'User'}, {'comment_id': 684601000, 'comment_body': 'Updated.', 'comment_created': datetime.datetime(2021, 8, 7, 7, 57, 21, tzinfo=datetime.timezone.utc), 'commenter': 'ShridharGoel', 'type': 'User'}, {'comment_id': 684601003, 'comment_body': 'The tutorial would not load if it is not done.\r\n\r\nWhat is the alternative way to do it then?', 'comment_created': datetime.datetime(2021, 8, 7, 7, 57, 26, tzinfo=datetime.timezone.utc), 'commenter': 'ShridharGoel', 'type': 'User'}, {'comment_id': 684601020, 'comment_body': 'So that the tutorial remains visible for 4 seconds. 4 seconds seemed fine, if required then this time interval can be changed.', 'comment_created': datetime.datetime(2021, 8, 7, 7, 57, 29, tzinfo=datetime.timezone.utc), 'commenter': 'ShridharGoel', 'type': 'User'}, {'comment_id': 684601024, 'comment_body': 'Okay, I thought that you meant adding a comment in the code which I have already done.', 'comment_created': datetime.datetime(2021, 8, 7, 7, 57, 33, tzinfo=datetime.timezone.utc), 'commenter': 'ShridharGoel', 'type': 'User'}, {'comment_id': 684601701, 'comment_body': 'Added.', 'comment_created': datetime.datetime(2021, 8, 7, 8, 4, 38, tzinfo=datetime.timezone.utc), 'commenter': 'ShridharGoel', 'type': 'User'}, {'comment_id': 684601733, 'comment_body': 'Fixed.', 'comment_created': datetime.datetime(2021, 8, 7, 8, 4, 50, tzinfo=datetime.timezone.utc), 'commenter': 'ShridharGoel', 'type': 'User'}, {'comment_id': 684621396, 'comment_body': 'Added commit description and tests.', 'comment_created': datetime.datetime(2021, 8, 7, 11, 27, 16, tzinfo=datetime.timezone.utc), 'commenter': 'ShridharGoel', 'type': 'User'}, {'comment_id': 684638961, 'comment_body': 'Please, take a look at https://github.com/Arthur-Milchior/Anki-Android/blob/af4012011f770d257ece06cab13ca6fca8b1c6b8/AnkiDroid/src/main/java/com/ichi2/anki/Onboarding.kt#L59\r\n\r\nThe advantage is simply to avoid adding extra classes. I think it adds complexity that do not add any feature', 'comment_created': datetime.datetime(2021, 8, 7, 14, 24, 12, tzinfo=datetime.timezone.utc), 'commenter': 'Arthur-Milchior', 'type': 'User'}, {'comment_id': 684640561, 'comment_body': ""Where do we use the activity type? It seems we actually never use it anywhere.\r\nIn which case we could use ` mActivityContext::hasAtLeastOneDeckBeingDisplayed`\r\nbelow.\r\n\r\nNot blocking, if there is any difficulty I didn't see, I'm fine with keeping it. "", 'comment_created': datetime.datetime(2021, 8, 7, 14, 38, 37, tzinfo=datetime.timezone.utc), 'commenter': 'Arthur-Milchior', 'type': 'User'}, {'comment_id': 684641601, 'comment_body': 'Please uses a Delta. It would still be acceptable if it were 990 or 1010. Either there can be assertEqual, with a third value for delta, or just \r\nval duration = SystemClock.uptimeMillis() - initialTime\r\nassertThat (990 < duration && duration < 1010)', 'comment_created': datetime.datetime(2021, 8, 7, 14, 48, 58, tzinfo=datetime.timezone.utc), 'commenter': 'Arthur-Milchior', 'type': 'User'}, {'comment_id': 684642367, 'comment_body': ""Thank you for the explanation. I'd consider that the initialisation is sufficiently cheap that it would be okay; I really don't like state; but that's not blocking and not a priority.\r\nMay be add `final` to it"", 'comment_created': datetime.datetime(2021, 8, 7, 14, 56, 25, tzinfo=datetime.timezone.utc), 'commenter': 'Arthur-Milchior', 'type': 'User'}, {'comment_id': 684643431, 'comment_body': ""Is there anything that ensure that you are not executing the onCreate of both AbstractFlashcardViewer and Reviewer? I'd fear this may explain why I suddenly had two onboarding tips at the same time on my phone.\r\n\r\nThe easiest solution to it would be to move all of AbstractFlashcardViewer onboarding to Reviewer. We'll deal with actually taking care of AbstractFlashcardViewer if we really need to later. \r\nAnother solution would be to have the Reviewer onboarding inheriting the AbstractFlashcardViewer; a `onboarding()` method in `AbstractFlashcardViewer` that gets overriden in Reviewer to call the Reviewer onboarding"", 'comment_created': datetime.datetime(2021, 8, 7, 15, 7, 54, tzinfo=datetime.timezone.utc), 'commenter': 'Arthur-Milchior', 'type': 'User'}, {'comment_id': 684644225, 'comment_body': ""I've got a few ideas I'd test, but nothing sure. We can keep it if it works.\r\nI'd test if I knew how to reset the onboarding menus, to be able to see the onboarding again and again until I'm fine with the result. So maybe I'll do it later.\r\n\r\nMy assumption is that currently it requires the handler only because the flag is not already set, so `setTarget` fails. I hope some log would confirm it.\r\nIf it were to be the case, maybe it would be work by simply calling the function later in the lifecycle, not in `onCreate` but `onStart`. Or maybe it would fail anyway for other reason. "", 'comment_created': datetime.datetime(2021, 8, 7, 15, 15, 23, tzinfo=datetime.timezone.utc), 'commenter': 'Arthur-Milchior', 'type': 'User'}, {'comment_id': 684644910, 'comment_body': ""maybe I missed something, but I don't understand. I tested and don't think I saw any change after four seconds. What visibility is changed?"", 'comment_created': datetime.datetime(2021, 8, 7, 15, 22, 26, tzinfo=datetime.timezone.utc), 'commenter': 'Arthur-Milchior', 'type': 'User'}, {'comment_id': 684667619, 'comment_body': ""> Is there anything that ensure that you are not executing the onCreate of both AbstractFlashcardViewer and Reviewer?\r\n\r\nNo, currently it wasn't a problem since it seemed fine to show tutorials for 'Answer' and 'Flag' together. But I'll update it."", 'comment_created': datetime.datetime(2021, 8, 7, 19, 11, 50, tzinfo=datetime.timezone.utc), 'commenter': 'ShridharGoel', 'type': 'User'}, {'comment_id': 684667761, 'comment_body': 'Visibility of the hand icon with text changes to `gone` state. You can refer the video attached in the PR description.', 'comment_created': datetime.datetime(2021, 8, 7, 19, 13, 20, tzinfo=datetime.timezone.utc), 'commenter': 'ShridharGoel', 'type': 'User'}, {'comment_id': 684674100, 'comment_body': 'Updated.', 'comment_created': datetime.datetime(2021, 8, 7, 20, 26, 45, tzinfo=datetime.timezone.utc), 'commenter': 'ShridharGoel', 'type': 'User'}, {'comment_id': 684674344, 'comment_body': 'Updated.', 'comment_created': datetime.datetime(2021, 8, 7, 20, 29, 22, tzinfo=datetime.timezone.utc), 'commenter': 'ShridharGoel', 'type': 'User'}, {'comment_id': 684679743, 'comment_body': ""I see you pushed after this comment. Any trouble with using the commit I linked here? Even if you disagree, I'd still would prefer an acknoweldgement you saw the remark"", 'comment_created': datetime.datetime(2021, 8, 7, 21, 29, 33, tzinfo=datetime.timezone.utc), 'commenter': 'Arthur-Milchior', 'type': 'User'}, {'comment_id': 684679824, 'comment_body': 'I understand. Thank you for the explanation', 'comment_created': datetime.datetime(2021, 8, 7, 21, 30, 29, tzinfo=datetime.timezone.utc), 'commenter': 'Arthur-Milchior', 'type': 'User'}, {'comment_id': 684679909, 'comment_body': ""@david-allison-1 @mikehardy any preference here? I find it complex to have two helps at the same time, but I'm fine with keeping it if other people think it is not adding complexity"", 'comment_created': datetime.datetime(2021, 8, 7, 21, 31, 35, tzinfo=datetime.timezone.utc), 'commenter': 'Arthur-Milchior', 'type': 'User'}, {'comment_id': 684680332, 'comment_body': ""Okay, now I see it.\r\nNow that I understand what it does, I still want to know why you do it. It's the only text the user have a limited time to read. It already seems a bad idea from an accessibility point of view, but furthermore when dealing with onboarding, where context may take time to remember, it seems even worse. \r\nWouldn't just clicking anywhere on the screen work, as everywhere"", 'comment_created': datetime.datetime(2021, 8, 7, 21, 36, 5, tzinfo=datetime.timezone.utc), 'commenter': 'Arthur-Milchior', 'type': 'User'}, {'comment_id': 684742562, 'comment_body': 'Updated.', 'comment_created': datetime.datetime(2021, 8, 8, 9, 11, 35, tzinfo=datetime.timezone.utc), 'commenter': 'ShridharGoel', 'type': 'User'}, {'comment_id': 684794338, 'comment_body': 'I think it\'s invalid to have two javadocs for a single class. Not a huge trouble as we are not generating javadoc. But still, it means that if you hover over ""Onboarding"", you\'ll only get the second javadoc, which do not contain most of the interest.\r\n\r\nI\xa0think the second one should be a comment, not a javadoc.', 'comment_created': datetime.datetime(2021, 8, 8, 15, 52, 28, tzinfo=datetime.timezone.utc), 'commenter': 'Arthur-Milchior', 'type': 'User'}, {'comment_id': 684794484, 'comment_body': 'You can now replace \r\n`{ mActivityContext.hasAtLeastOneDeckBeingDisplayed() }` by `mActivityContext::hasAtLeastOneDeckBeingDisplayed` \r\nand same below', 'comment_created': datetime.datetime(2021, 8, 8, 15, 53, 48, tzinfo=datetime.timezone.utc), 'commenter': 'Arthur-Milchior', 'type': 'User'}, {'comment_id': 684797312, 'comment_body': ""shouldn't this be a variable, or we lose state between the calls"", 'comment_created': datetime.datetime(2021, 8, 8, 16, 16, 20, tzinfo=datetime.timezone.utc), 'commenter': 'david-allison', 'type': 'User'}, {'comment_id': 684797461, 'comment_body': 'ditto - use a variable', 'comment_created': datetime.datetime(2021, 8, 8, 16, 17, 40, tzinfo=datetime.timezone.utc), 'commenter': 'david-allison', 'type': 'User'}, {'comment_id': 684797554, 'comment_body': 'FixedTextView', 'comment_created': datetime.datetime(2021, 8, 8, 16, 18, 26, tzinfo=datetime.timezone.utc), 'commenter': 'david-allison', 'type': 'User'}, {'comment_id': 684797800, 'comment_body': ""For discussion: \r\n\r\nWhile we're working on content, I feel that a few of these should be hardcoded (maybe in a companion object) so we're not adding work for our translators that won't be used in the final project"", 'comment_created': datetime.datetime(2021, 8, 8, 16, 20, 18, tzinfo=datetime.timezone.utc), 'commenter': 'david-allison', 'type': 'User'}, {'comment_id': 684798245, 'comment_body': '`duration in 990L..1010L` can likely be expressed via Hamcrest, rather than checking for a boolean', 'comment_created': datetime.datetime(2021, 8, 8, 16, 23, 31, tzinfo=datetime.timezone.utc), 'commenter': 'david-allison', 'type': 'User'}, {'comment_id': 684798308, 'comment_body': '```suggestion\r\n        assertThat(""function was executed, `is`(true))\r\n```', 'comment_created': datetime.datetime(2021, 8, 8, 16, 24, 3, tzinfo=datetime.timezone.utc), 'commenter': 'david-allison', 'type': 'User'}, {'comment_id': 684798337, 'comment_body': '```suggestion\r\n        assertThat(""function was executed"", value, `is`(true))\r\n```', 'comment_created': datetime.datetime(2021, 8, 8, 16, 24, 29, tzinfo=datetime.timezone.utc), 'commenter': 'david-allison', 'type': 'User'}, {'comment_id': 684801250, 'comment_body': '@Arthur-Milchior wanted this to not be a variable: https://github.com/ankidroid/Anki-Android/pull/9092#discussion_r684642367\r\n\r\nSo I had changed it from a variable to use it like this. What should be done here?', 'comment_created': datetime.datetime(2021, 8, 8, 16, 49, 7, tzinfo=datetime.timezone.utc), 'commenter': 'ShridharGoel', 'type': 'User'}, {'comment_id': 684801260, 'comment_body': '@Arthur-Milchior wanted this to not be a variable: https://github.com/ankidroid/Anki-Android/pull/9092#discussion_r684642367\r\n\r\nSo I had changed it from a variable to use it like this. What should be done here?', 'comment_created': datetime.datetime(2021, 8, 8, 16, 49, 18, tzinfo=datetime.timezone.utc), 'commenter': 'ShridharGoel', 'type': 'User'}, {'comment_id': 684807154, 'comment_body': 'Which state do we lose ? The only state AbstractFlashcardViewer is `this`, the activity.\r\nThe only state of its parent class, `Onboarding`, is `this` and also the list of onboarding tasks, which is never edited anyway.', 'comment_created': datetime.datetime(2021, 8, 8, 17, 43, 31, tzinfo=datetime.timezone.utc), 'commenter': 'Arthur-Milchior', 'type': 'User'}, {'comment_id': 684828630, 'comment_body': ""Any state in the instance. I didn't check to see whether we have any. \r\n\r\nRegardless, the pattern of having a `private final` variable is much more common than having an allocation for a single method call. \r\n\r\nTo me, the code would read better that way (especially as we define the dependency on the class at the top of the file in the variables), but this is just style and isn't worth blocking the review over. I'd push lightly to change, but implementer's choice."", 'comment_created': datetime.datetime(2021, 8, 8, 21, 2, 3, tzinfo=datetime.timezone.utc), 'commenter': 'david-allison', 'type': 'User'}, {'comment_id': 684828732, 'comment_body': 'Your call. See: https://github.com/ankidroid/Anki-Android/pull/9092#discussion_r684828630', 'comment_created': datetime.datetime(2021, 8, 8, 21, 2, 40, tzinfo=datetime.timezone.utc), 'commenter': 'david-allison', 'type': 'User'}, {'comment_id': 684828816, 'comment_body': 'nittiest of nitpicks\r\n\r\n```suggestion\r\n        assertThat(""Delay is around 1 second"", duration.toDouble(), closeTo(1000.0, 10.0))\r\n```', 'comment_created': datetime.datetime(2021, 8, 8, 21, 3, 39, tzinfo=datetime.timezone.utc), 'commenter': 'david-allison', 'type': 'User'}, {'comment_id': 684829181, 'comment_body': 'I agree on this. Implementer choice. ', 'comment_created': datetime.datetime(2021, 8, 8, 21, 7, 13, tzinfo=datetime.timezone.utc), 'commenter': 'Arthur-Milchior', 'type': 'User'}, {'comment_id': 684829968, 'comment_body': 'It would make sense to me to move the onboarding to `Reviewer`. I don\'t think the onboarding is specific to all implementers of \'`AbstractFlashcardViewer`\'\r\n\r\nhttps://www.youtube.com/watch?v=GGRF-B6DgeI - keep it as simple as possible, \'flags\' are feature promotion, rather than instructional, and should come at a later stage in our onboarding flow.\r\n\r\n----\r\nfor another time:\r\n\r\nIt raises the question of whether we want to have flags as the \'always show\' for new users. Undo should definitely appear, but flags are a (relatively) more advanced functionality.\r\n\r\n\'Edit\' would make sense, as would some tracking and suggesting a ""customise app bar buttons"" after a specific time period would be great.', 'comment_created': datetime.datetime(2021, 8, 8, 21, 13, 40, tzinfo=datetime.timezone.utc), 'commenter': 'david-allison', 'type': 'User'}, {'comment_id': 684831450, 'comment_body': 'Updated.', 'comment_created': datetime.datetime(2021, 8, 8, 21, 28, 45, tzinfo=datetime.timezone.utc), 'commenter': 'ShridharGoel', 'type': 'User'}, {'comment_id': 684831466, 'comment_body': 'Updated.', 'comment_created': datetime.datetime(2021, 8, 8, 21, 28, 52, tzinfo=datetime.timezone.utc), 'commenter': 'ShridharGoel', 'type': 'User'}, {'comment_id': 684831492, 'comment_body': 'Updated.', 'comment_created': datetime.datetime(2021, 8, 8, 21, 29, tzinfo=datetime.timezone.utc), 'commenter': 'ShridharGoel', 'type': 'User'}, {'comment_id': 684831525, 'comment_body': 'Updated.', 'comment_created': datetime.datetime(2021, 8, 8, 21, 29, 8, tzinfo=datetime.timezone.utc), 'commenter': 'ShridharGoel', 'type': 'User'}, {'comment_id': 684831543, 'comment_body': 'Updated.', 'comment_created': datetime.datetime(2021, 8, 8, 21, 29, 15, tzinfo=datetime.timezone.utc), 'commenter': 'ShridharGoel', 'type': 'User'}, {'comment_id': 684831573, 'comment_body': 'Updated with usage of `closeTo()`.', 'comment_created': datetime.datetime(2021, 8, 8, 21, 29, 40, tzinfo=datetime.timezone.utc), 'commenter': 'ShridharGoel', 'type': 'User'}, {'comment_id': 684831578, 'comment_body': 'Updated.', 'comment_created': datetime.datetime(2021, 8, 8, 21, 29, 46, tzinfo=datetime.timezone.utc), 'commenter': 'ShridharGoel', 'type': 'User'}, {'comment_id': 684831594, 'comment_body': 'Updated.', 'comment_created': datetime.datetime(2021, 8, 8, 21, 29, 51, tzinfo=datetime.timezone.utc), 'commenter': 'ShridharGoel', 'type': 'User'}, {'comment_id': 684831601, 'comment_body': 'Updated.', 'comment_created': datetime.datetime(2021, 8, 8, 21, 29, 59, tzinfo=datetime.timezone.utc), 'commenter': 'ShridharGoel', 'type': 'User'}, {'comment_id': 684838925, 'comment_body': ""That's uselessly complex. Just remove this file from tools/update-localizations.py; and wait until the content is finally decided.\r\nDo you have a plan to choose which will be the final content?"", 'comment_created': datetime.datetime(2021, 8, 8, 22, 38, 58, tzinfo=datetime.timezone.utc), 'commenter': 'Arthur-Milchior', 'type': 'User'}, {'comment_id': 686328852, 'comment_body': 'Discussed on Discord, only `fab_tutorial_title` for certain', 'comment_created': datetime.datetime(2021, 8, 10, 21, 17, 51, tzinfo=datetime.timezone.utc), 'commenter': 'david-allison', 'type': 'User'}]","[{'commit_sha': '27949e688ac280098e14d5b70b4a24b7610e72be', 'committer_username': 'ShridharGoel', 'committer_name': 'Shridhar Goel', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 18, 13, 15, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f2212b731f8c4cb92ebe5fb464a7aa8f4705114b', 'committer_username': 'ShridharGoel', 'committer_name': 'Shridhar Goel', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 18, 13, 15, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a778c9cd6aed62030ca739299edf9ccbd371ad59', 'committer_username': 'ShridharGoel', 'committer_name': 'Shridhar Goel', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 18, 13, 15, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': '586982d3cbe6e55823ce613f3e1ace6d127d7db7', 'committer_username': 'ShridharGoel', 'committer_name': 'Shridhar Goel', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 18, 13, 15, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e74a40d64e7ca7ae6d2baabf254e488607950496', 'committer_username': 'ShridharGoel', 'committer_name': 'Shridhar Goel', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 18, 13, 15, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b59d7ca512bdb257fa2b9bf1149c0078bcdc086f', 'committer_username': 'ShridharGoel', 'committer_name': 'Shridhar Goel', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 18, 13, 15, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b5996028ee6443f6b2e861a8e79ab88d46901aac', 'committer_username': 'ShridharGoel', 'committer_name': 'Shridhar Goel', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 18, 13, 15, 13, tzinfo=datetime.timezone.utc)}]",Shridhar Goel,35566748,,User,,51,,0,0
678392301,Implement preference flags for onboarding to check screen visit status,"## Purpose / Description
Implement preference flags for onboarding to check screen visit status.

## Checklist

- [x] You have not changed whitespace unnecessarily (it makes diffs hard to read)
- [x] You have a descriptive commit message with a short title (first line, max 50 chars).
- [x] Your code follows the style of the project (e.g. never omit braces in `if` statements) 
- [x] You have commented your code, particularly in hard-to-understand areas
- [x] You have performed a self-review of your own code
- [ ] UI changes: include screenshots of all affected screens (in particular showing any new or changed strings)
- [ ] UI Changes: You have tested your change using the [Google Accessibility Scanner](https://play.google.com/store/apps/details?id=com.google.android.apps.accessibility.auditor)
",True,9151,https://api.github.com/repos/ankidroid/Anki-Android/pulls/9151,https://github.com/ankidroid/Anki-Android/pull/9151,closed,182,0,3,1,0,13,0,0,[],2021-06-26 18:08:37+00:00,2021-06-26 22:45:33+00:00,16616.0,4:36:56,"[{'comment_id': 659207104, 'comment_body': 'defined by RobolectricTest\r\n\r\n```suggestion\r\n        context = getTargetContext() \r\n```', 'comment_created': datetime.datetime(2021, 6, 26, 18, 14, 7, tzinfo=datetime.timezone.utc), 'commenter': 'david-allison', 'type': 'User'}, {'comment_id': 659207412, 'comment_body': ""`onboardingEnum.declaringClass.name` can easily be changed, and no tests catch this.\r\n\r\nCould we either extract this to a method returning a constant, or add a test to ensure that names aren't changed"", 'comment_created': datetime.datetime(2021, 6, 26, 18, 16, 58, tzinfo=datetime.timezone.utc), 'commenter': 'david-allison', 'type': 'User'}, {'comment_id': 659207520, 'comment_body': ""Optional, but I don't feel an interface needs `interface` in the name\r\n\r\n```\r\ninterface OnboardingFlag {\r\n```"", 'comment_created': datetime.datetime(2021, 6, 26, 18, 18, 8, tzinfo=datetime.timezone.utc), 'commenter': 'david-allison', 'type': 'User'}, {'comment_id': 659207561, 'comment_body': ""nit: I'd be tempted to extract this to a method inside the test class for code reduction (no need for `context`, and combine the two method calls"", 'comment_created': datetime.datetime(2021, 6, 26, 18, 18, 52, tzinfo=datetime.timezone.utc), 'commenter': 'david-allison', 'type': 'User'}, {'comment_id': 659211917, 'comment_body': 'Oh right.\r\n`String.class.getName()` returns ""java.lang.String""\r\n\r\nThis mean that currently, we forbid the entire name to change. Same package structure, same subclass. We should have used `getSimpleName()` so that the Enum can be moved in other files\r\n\r\nHow do you want to tests that names are not changed? It seems that it would require to compare two different versions of the code to detect a change. Seems complex', 'comment_created': datetime.datetime(2021, 6, 26, 18, 57, 30, tzinfo=datetime.timezone.utc), 'commenter': 'Arthur-Milchior', 'type': 'User'}, {'comment_id': 659217891, 'comment_body': ""This is just a nitpick, but I like my verbs and nouns to match across a set of verbs, so I'd think\r\n- isVisited\r\n- setVisited\r\n- getAllVisited\r\n\r\nNaming is basically always a nitpick, and this is bikeshedding of course."", 'comment_created': datetime.datetime(2021, 6, 26, 20, 1, 6, tzinfo=datetime.timezone.utc), 'commenter': 'mikehardy', 'type': 'User'}, {'comment_id': 659217922, 'comment_body': 'Updated.', 'comment_created': datetime.datetime(2021, 6, 26, 20, 1, 17, tzinfo=datetime.timezone.utc), 'commenter': 'ShridharGoel', 'type': 'User'}, {'comment_id': 659217970, 'comment_body': 'Updated to use `declaringClass.simpleName`.', 'comment_created': datetime.datetime(2021, 6, 26, 20, 1, 40, tzinfo=datetime.timezone.utc), 'commenter': 'ShridharGoel', 'type': 'User'}, {'comment_id': 659218000, 'comment_body': 'Updated.', 'comment_created': datetime.datetime(2021, 6, 26, 20, 1, 47, tzinfo=datetime.timezone.utc), 'commenter': 'ShridharGoel', 'type': 'User'}, {'comment_id': 659218005, 'comment_body': 'Updated.', 'comment_created': datetime.datetime(2021, 6, 26, 20, 1, 53, tzinfo=datetime.timezone.utc), 'commenter': 'ShridharGoel', 'type': 'User'}, {'comment_id': 659218950, 'comment_body': 'Updated.', 'comment_created': datetime.datetime(2021, 6, 26, 20, 11, 36, tzinfo=datetime.timezone.utc), 'commenter': 'ShridharGoel', 'type': 'User'}, {'comment_id': 659312739, 'comment_body': ""This doesn't solve the problem of a bug being introduced by a developer renaming the enum"", 'comment_created': datetime.datetime(2021, 6, 27, 12, 16, 40, tzinfo=datetime.timezone.utc), 'commenter': 'david-allison', 'type': 'User'}, {'comment_id': 659329589, 'comment_body': '> Oh right.\r\n> `String.class.getName()` returns ""java.lang.String""\r\n> \r\n> This mean that currently, we forbid the entire name to change. Same package structure, same subclass. We should have used `getSimpleName()` so that the Enum can be moved in other files\r\n> \r\n> How do you want to tests that names are not changed? It seems that it would require to compare two different versions of the code to detect a change. Seems complex\r\n\r\nComparing against a hardcoded list, or individual tests for each onboarding method, testing the value passed to `SharedPeferences`\r\n\r\nIn this case, extracting a method to return a constant would be a simpler approach. But you\'d still ideally want a reflection-based test to ensure that all constants are distinct', 'comment_created': datetime.datetime(2021, 6, 27, 14, 23, 39, tzinfo=datetime.timezone.utc), 'commenter': 'david-allison', 'type': 'User'}]","[{'commit_sha': 'fc850de7d307756c0467fe47c114c967cfb0ba0c', 'committer_username': 'ShridharGoel', 'committer_name': 'Shridhar Goel', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 18, 13, 15, 13, tzinfo=datetime.timezone.utc)}]",Shridhar Goel,35566748,,User,,51,,0,0
687387232,Update base code related to onboarding,"## Purpose / Description

Changes in the base code required for implementing the onboarding feature.

## Checklist

- [x] You have not changed whitespace unnecessarily (it makes diffs hard to read)
- [x] You have a descriptive commit message with a short title (first line, max 50 chars).
- [x] Your code follows the style of the project (e.g. never omit braces in `if` statements) 
- [x] You have commented your code, particularly in hard-to-understand areas
- [x] You have performed a self-review of your own code
- [ ] UI changes: include screenshots of all affected screens (in particular showing any new or changed strings)
- [ ] UI Changes: You have tested your change using the [Google Accessibility Scanner](https://play.google.com/store/apps/details?id=com.google.android.apps.accessibility.auditor)
",True,9250,https://api.github.com/repos/ankidroid/Anki-Android/pulls/9250,https://github.com/ankidroid/Anki-Android/pull/9250,closed,72,30,3,4,0,5,0,0,[],2021-07-11 19:57:48+00:00,2021-07-16 14:44:06+00:00,413178.0,"4 days, 18:46:18","[{'comment_id': 667530496, 'comment_body': ""This shouldn't be necessary now rebased on `master`"", 'comment_created': datetime.datetime(2021, 7, 11, 20, 16, 57, tzinfo=datetime.timezone.utc), 'commenter': 'david-allison', 'type': 'User'}, {'comment_id': 667530605, 'comment_body': 'The public documentation leaks implementation details - give a high level summary, and use the term `bit` for the comments of the implementation', 'comment_created': datetime.datetime(2021, 7, 11, 20, 18, 3, tzinfo=datetime.timezone.utc), 'commenter': 'david-allison', 'type': 'User'}, {'comment_id': 667530649, 'comment_body': ""ditto. Typically keep the documentation high-level if it's a public method"", 'comment_created': datetime.datetime(2021, 7, 11, 20, 18, 47, tzinfo=datetime.timezone.utc), 'commenter': 'david-allison', 'type': 'User'}, {'comment_id': 667544421, 'comment_body': 'Please add javadoc in the same commit as the one you add the method', 'comment_created': datetime.datetime(2021, 7, 11, 22, 32, 1, tzinfo=datetime.timezone.utc), 'commenter': 'Arthur-Milchior', 'type': 'User'}, {'comment_id': 667544478, 'comment_body': ""I'd also like to have one line to explain how the user is supposed to activate/deactivate it. Or indicating that it can't be done right now and its TODO"", 'comment_created': datetime.datetime(2021, 7, 11, 22, 32, 47, tzinfo=datetime.timezone.utc), 'commenter': 'Arthur-Milchior', 'type': 'User'}]","[{'commit_sha': '4e7b6a0d31328ff06f331c3b738bb272ef2cbe20', 'committer_username': 'ShridharGoel', 'committer_name': 'Shridhar Goel', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 18, 13, 15, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7a196e9703d44ad1bbcf7bea83bbc7aeeddff68a', 'committer_username': 'ShridharGoel', 'committer_name': 'Shridhar Goel', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 18, 13, 15, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': '70e7c87906a897787b9500fd6ecc5c9642fdf72b', 'committer_username': 'ShridharGoel', 'committer_name': 'Shridhar Goel', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 18, 13, 15, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6f719c1c4ea8639b56b1697c286cc4cba001d8dd', 'committer_username': 'ShridharGoel', 'committer_name': 'Shridhar Goel', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 18, 13, 15, 13, tzinfo=datetime.timezone.utc)}]",Shridhar Goel,35566748,,User,,51,,0,0
687595204,Add preference for enabling onboarding in debug build,"## Purpose / Description
Add preference for enabling onboarding in debug build.
It can be accessed through 'Advanced' settings.

## Checklist

- [x] You have not changed whitespace unnecessarily (it makes diffs hard to read)
- [x] You have a descriptive commit message with a short title (first line, max 50 chars).
- [x] Your code follows the style of the project (e.g. never omit braces in `if` statements) 
- [ ] You have commented your code, particularly in hard-to-understand areas
- [x] You have performed a self-review of your own code
- [ ] UI changes: include screenshots of all affected screens (in particular showing any new or changed strings)
- [ ] UI Changes: You have tested your change using the [Google Accessibility Scanner](https://play.google.com/store/apps/details?id=com.google.android.apps.accessibility.auditor)
",True,9253,https://api.github.com/repos/ankidroid/Anki-Android/pulls/9253,https://github.com/ankidroid/Anki-Android/pull/9253,closed,12,0,2,1,0,2,1,0,[{'name': 'Strings'}],2021-07-12 07:46:04+00:00,2021-07-16 13:36:19+00:00,366615.0,"4 days, 5:50:15","[{'comment_id': 667814185, 'comment_body': '> Labels should:\r\n>\r\n> Capitalize only proper nouns and the first word of a label\r\n\r\nhttps://material.io/design/platform-guidance/android-settings.html#label-and-secondary-text\r\n\r\n```suggestion\r\n    <string name=""show_onboarding"" maxLength=""41"">Show onboarding walkthorugh</string>\r\n```', 'comment_created': datetime.datetime(2021, 7, 12, 10, 30, 34, tzinfo=datetime.timezone.utc), 'commenter': 'david-allison', 'type': 'User'}, {'comment_id': 668090588, 'comment_body': 'Thanks, updated.', 'comment_created': datetime.datetime(2021, 7, 12, 16, 42, 27, tzinfo=datetime.timezone.utc), 'commenter': 'ShridharGoel', 'type': 'User'}]","[{'commit_sha': '9606e1b2628f3b0ae2231ad2ea0462f19faa5675', 'committer_username': 'ShridharGoel', 'committer_name': 'Shridhar Goel', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 18, 13, 15, 13, tzinfo=datetime.timezone.utc)}]",Shridhar Goel,35566748,,User,,51,,0,0
686538990,Implement better download and import system for shared decks,"## Purpose / Description
Implement better download and import system for shared decks.

## Fixes
Fixes #7690

## Approach
Added new Activity with WebView and used DownloadManager to download along with setting up BroadcastReceiver to check for download completion and import the downloaded deck.

## How Has This Been Tested?

Tested on API 28 and API 30 emulators.

## Video

https://user-images.githubusercontent.com/35566748/127007945-ad067e37-457f-4087-a28b-0fcc1c243e58.mp4

## Checklist
- [x] You have not changed whitespace unnecessarily (it makes diffs hard to read)
- [x] You have a descriptive commit message with a short title (first line, max 50 chars).
- [x] Your code follows the style of the project (e.g. never omit braces in `if` statements) 
- [x] You have commented your code, particularly in hard-to-understand areas
- [x] You have performed a self-review of your own code
- [x] UI changes: include screenshots of all affected screens (in particular showing any new or changed strings)
- [ ] UI Changes: You have tested your change using the [Google Accessibility Scanner](https://play.google.com/store/apps/details?id=com.google.android.apps.accessibility.auditor)
",True,9229,https://api.github.com/repos/ankidroid/Anki-Android/pulls/9229,https://github.com/ankidroid/Anki-Android/pull/9229,closed,859,4,13,1,19,135,1,0,[{'name': 'Strings'}],2021-07-09 06:50:43+00:00,2021-08-05 20:01:07+00:00,2380224.0,"27 days, 13:10:24","[{'comment_id': 666884581, 'comment_body': 'can you invert a few `if`s here for readability?', 'comment_created': datetime.datetime(2021, 7, 9, 11, 37, 44, tzinfo=datetime.timezone.utc), 'commenter': 'david-allison', 'type': 'User'}, {'comment_id': 666884963, 'comment_body': 'Can this be simplified by delegating to `IntentHandler.class`?', 'comment_created': datetime.datetime(2021, 7, 9, 11, 38, 32, tzinfo=datetime.timezone.utc), 'commenter': 'david-allison', 'type': 'User'}, {'comment_id': 666885066, 'comment_body': '```suggestion\r\n                            Timber.w(e)\r\n```', 'comment_created': datetime.datetime(2021, 7, 9, 11, 38, 43, tzinfo=datetime.timezone.utc), 'commenter': 'david-allison', 'type': 'User'}, {'comment_id': 666885402, 'comment_body': ""Could you extract a bit of this into a named `openDownloadedDeck` method, it's difficult to grok the intention of this code from a quick skim."", 'comment_created': datetime.datetime(2021, 7, 9, 11, 39, 24, tzinfo=datetime.timezone.utc), 'commenter': 'david-allison', 'type': 'User'}, {'comment_id': 666909819, 'comment_body': ""This doesn't unregister the receiver if we return early, is this intended?"", 'comment_created': datetime.datetime(2021, 7, 9, 12, 25, 15, tzinfo=datetime.timezone.utc), 'commenter': 'david-allison', 'type': 'User'}, {'comment_id': 666910121, 'comment_body': 'Do we need to unregister this on any other events/situations?', 'comment_created': datetime.datetime(2021, 7, 9, 12, 25, 49, tzinfo=datetime.timezone.utc), 'commenter': 'david-allison', 'type': 'User'}, {'comment_id': 666911101, 'comment_body': 'do we want to check to see if the deck is an `apkg` here?', 'comment_created': datetime.datetime(2021, 7, 9, 12, 27, 28, tzinfo=datetime.timezone.utc), 'commenter': 'david-allison', 'type': 'User'}, {'comment_id': 666911556, 'comment_body': 'What if two downloads occur? Can this be stored in the receiver?', 'comment_created': datetime.datetime(2021, 7, 9, 12, 28, 15, tzinfo=datetime.timezone.utc), 'commenter': 'david-allison', 'type': 'User'}, {'comment_id': 667232473, 'comment_body': ""Could you add javadoc to give more details about what it is doing. I think it was opening a page in an external browser and now is opening another fragment, right? Then just\r\n/**\r\nOpen the Shared Decks Activity window\r\n*/\r\nwould suffice\r\n\r\nI know that there was now javadoc. But as we go along, it's nice to correct code\r\n"", 'comment_created': datetime.datetime(2021, 7, 9, 22, 5, 14, tzinfo=datetime.timezone.utc), 'commenter': 'Arthur-Milchior', 'type': 'User'}, {'comment_id': 667356533, 'comment_body': 'This could do with a better name rather than a comment (IMO)', 'comment_created': datetime.datetime(2021, 7, 10, 16, 8, 36, tzinfo=datetime.timezone.utc), 'commenter': 'david-allison', 'type': 'User'}, {'comment_id': 667357667, 'comment_body': 'It should unregister when returned early. Updated.', 'comment_created': datetime.datetime(2021, 7, 10, 16, 20, 1, tzinfo=datetime.timezone.utc), 'commenter': 'ShridharGoel', 'type': 'User'}, {'comment_id': 667357671, 'comment_body': 'Updated.', 'comment_created': datetime.datetime(2021, 7, 10, 16, 20, 7, tzinfo=datetime.timezone.utc), 'commenter': 'ShridharGoel', 'type': 'User'}, {'comment_id': 667357694, 'comment_body': 'Updated.', 'comment_created': datetime.datetime(2021, 7, 10, 16, 20, 12, tzinfo=datetime.timezone.utc), 'commenter': 'ShridharGoel', 'type': 'User'}, {'comment_id': 671743363, 'comment_body': 'What does cancelling do? Is the listener disposed of?', 'comment_created': datetime.datetime(2021, 7, 17, 21, 2, 7, tzinfo=datetime.timezone.utc), 'commenter': 'david-allison', 'type': 'User'}, {'comment_id': 671743480, 'comment_body': 'can you move this into `try with resources`? I think Kotlin calls this a `use` block', 'comment_created': datetime.datetime(2021, 7, 17, 21, 3, 6, tzinfo=datetime.timezone.utc), 'commenter': 'david-allison', 'type': 'User'}, {'comment_id': 671879555, 'comment_body': 'Here is the link to the related documentation for this: https://github.com/afollestad/material-dialogs/blob/main/documentation/CORE.md#dismissing\r\n\r\nThis is not being used now, since download has been changed to full-screen as suggested.', 'comment_created': datetime.datetime(2021, 7, 18, 18, 24, 47, tzinfo=datetime.timezone.utc), 'commenter': 'ShridharGoel', 'type': 'User'}, {'comment_id': 673093626, 'comment_body': 'Could you use 1 decimal place here?', 'comment_created': datetime.datetime(2021, 7, 20, 12, 52, 37, tzinfo=datetime.timezone.utc), 'commenter': 'david-allison', 'type': 'User'}, {'comment_id': 673094247, 'comment_body': '```suggestion\r\n        Timber.d(""File URI -> $fileUri"")\r\n```', 'comment_created': datetime.datetime(2021, 7, 20, 12, 53, 29, tzinfo=datetime.timezone.utc), 'commenter': 'david-allison', 'type': 'User'}, {'comment_id': 673096028, 'comment_body': 'again, this is debug info, so `Timber.d`, and only if you feel it will be useful to a developer debugging a problem', 'comment_created': datetime.datetime(2021, 7, 20, 12, 55, 43, tzinfo=datetime.timezone.utc), 'commenter': 'david-allison', 'type': 'User'}, {'comment_id': 673098480, 'comment_body': 'I think ~~too much user choice~~ allowing users to navigate the shared deck pages while a download is occurring is bad here, it adds a lot of complexity to the code, and I don\'t see the benefit.\r\n\r\nI think keeping the ""downloading"" screen open while the file downloads is acceptable, and informing users that they can use other apps while the download occurs.\r\n\r\n@mikehardy @Arthur-Milchior opinions?', 'comment_created': datetime.datetime(2021, 7, 20, 12, 58, 49, tzinfo=datetime.timezone.utc), 'commenter': 'david-allison', 'type': 'User'}, {'comment_id': 674354611, 'comment_body': 'I think you want string ressources', 'comment_created': datetime.datetime(2021, 7, 21, 21, 21, 39, tzinfo=datetime.timezone.utc), 'commenter': 'Arthur-Milchior', 'type': 'User'}, {'comment_id': 674358543, 'comment_body': ""`tools:text` is only used in the designer as a sample of the content, it's fine outside a resource\r\n\r\nNote: this applies to everything under the `tools` namespace"", 'comment_created': datetime.datetime(2021, 7, 21, 21, 28, 42, tzinfo=datetime.timezone.utc), 'commenter': 'david-allison', 'type': 'User'}, {'comment_id': 676049820, 'comment_body': 'Do we want to export this?', 'comment_created': datetime.datetime(2021, 7, 24, 22, 5, 18, tzinfo=datetime.timezone.utc), 'commenter': 'david-allison', 'type': 'User'}, {'comment_id': 676049831, 'comment_body': 'logging: `Timber.i` on each case. We want to get an idea about the user flow through the screen', 'comment_created': datetime.datetime(2021, 7, 24, 22, 5, 44, tzinfo=datetime.timezone.utc), 'commenter': 'david-allison', 'type': 'User'}, {'comment_id': 676049944, 'comment_body': 'This feels like a `Timber.d` - it\'s an implementation detail rather than a user flow.\r\n\r\nIf we use `Timber.i`, go with `""starting file download""` or similar', 'comment_created': datetime.datetime(2021, 7, 24, 22, 7, 14, tzinfo=datetime.timezone.utc), 'commenter': 'david-allison', 'type': 'User'}, {'comment_id': 676050000, 'comment_body': 'Useful to log the button presses here', 'comment_created': datetime.datetime(2021, 7, 24, 22, 7, 52, tzinfo=datetime.timezone.utc), 'commenter': 'david-allison', 'type': 'User'}, {'comment_id': 676050275, 'comment_body': ""Very good, possibly a `Timber.w` (might need elaboration, if this is listening to all downloads then it's a regular occurrence) \r\n\r\nAlso explain the outcome (presumably file won't be opened)"", 'comment_created': datetime.datetime(2021, 7, 24, 22, 10, 4, tzinfo=datetime.timezone.utc), 'commenter': 'david-allison', 'type': 'User'}, {'comment_id': 676050369, 'comment_body': 'We\'ve stopped the download progress checker here, what does this mean if the download isn\'t complete?\r\n\r\nDoes ""not complete"" mean ""pending"", or that an error has definitely occurred? Needs better commenting', 'comment_created': datetime.datetime(2021, 7, 24, 22, 11, 10, tzinfo=datetime.timezone.utc), 'commenter': 'david-allison', 'type': 'User'}, {'comment_id': 676050388, 'comment_body': ""This isn't enough information to go off"", 'comment_created': datetime.datetime(2021, 7, 24, 22, 11, 24, tzinfo=datetime.timezone.utc), 'commenter': 'david-allison', 'type': 'User'}, {'comment_id': 676050454, 'comment_body': 'Can this be elaborated on?', 'comment_created': datetime.datetime(2021, 7, 24, 22, 11, 54, tzinfo=datetime.timezone.utc), 'commenter': 'david-allison', 'type': 'User'}, {'comment_id': 676050483, 'comment_body': 'What if this throws?', 'comment_created': datetime.datetime(2021, 7, 24, 22, 12, 12, tzinfo=datetime.timezone.utc), 'commenter': 'david-allison', 'type': 'User'}, {'comment_id': 676050512, 'comment_body': '```suggestion\r\n        Timber.d(""Unregistering receiver"")\r\n```', 'comment_created': datetime.datetime(2021, 7, 24, 22, 12, 32, tzinfo=datetime.timezone.utc), 'commenter': 'david-allison', 'type': 'User'}, {'comment_id': 676050517, 'comment_body': '```suggestion\r\n            Timber.d(""Checking download status and unregistering receiver"")\r\n```', 'comment_created': datetime.datetime(2021, 7, 24, 22, 12, 37, tzinfo=datetime.timezone.utc), 'commenter': 'david-allison', 'type': 'User'}, {'comment_id': 676050539, 'comment_body': '```suggestion\r\n        const val DOWNLOAD_PROGRESS_CHECK_DELAY = 100L\r\n```', 'comment_created': datetime.datetime(2021, 7, 24, 22, 12, 52, tzinfo=datetime.timezone.utc), 'commenter': 'david-allison', 'type': 'User'}, {'comment_id': 676050566, 'comment_body': '```suggestion\r\n        Timber.d(""Starting download progress checker"")\r\n```', 'comment_created': datetime.datetime(2021, 7, 24, 22, 13, 11, tzinfo=datetime.timezone.utc), 'commenter': 'david-allison', 'type': 'User'}, {'comment_id': 676050587, 'comment_body': 'invert the if for a reduction in nesting', 'comment_created': datetime.datetime(2021, 7, 24, 22, 13, 24, tzinfo=datetime.timezone.utc), 'commenter': 'david-allison', 'type': 'User'}, {'comment_id': 676050630, 'comment_body': '```suggestion\r\n        Timber.d(""Stopping download progress checker"")\r\n```', 'comment_created': datetime.datetime(2021, 7, 24, 22, 13, 46, tzinfo=datetime.timezone.utc), 'commenter': 'david-allison', 'type': 'User'}, {'comment_id': 676050889, 'comment_body': ""The method call doesn't imply that this is a failure case, possibly explicitly add args"", 'comment_created': datetime.datetime(2021, 7, 24, 22, 16, 22, tzinfo=datetime.timezone.utc), 'commenter': 'david-allison', 'type': 'User'}, {'comment_id': 676050916, 'comment_body': 'Again, make this more understandable without the technical details - log the ""what"" not the implementation,\r\n\r\nIf there\'s a bug, having a good handle on the order of operations that a user took helps', 'comment_created': datetime.datetime(2021, 7, 24, 22, 16, 43, tzinfo=datetime.timezone.utc), 'commenter': 'david-allison', 'type': 'User'}, {'comment_id': 676050934, 'comment_body': 'Likely extract to an inner method and handle uncaught exceptions', 'comment_created': datetime.datetime(2021, 7, 24, 22, 17, 2, tzinfo=datetime.timezone.utc), 'commenter': 'david-allison', 'type': 'User'}, {'comment_id': 676055696, 'comment_body': ""I'd say no. Because if we export it, we should also test that it actually works, that if you open SharedDecksActivity from another app, import is done correctly. Seems a nightmare to actually test correctly. Since we don't expect anybody to use this export for quite some time, we won't even know if it gets broken until long after the break.\r\n\r\nSeems a lot of potential problem and no discernable gain\r\n"", 'comment_created': datetime.datetime(2021, 7, 24, 23, 13, 5, tzinfo=datetime.timezone.utc), 'commenter': 'Arthur-Milchior', 'type': 'User'}, {'comment_id': 676056680, 'comment_body': ""I would appreciate a comment that indicate in plain English what you decided to do.\r\nI think it's something as:\r\n\r\n> If there is a download, ask whether it should be cancelled. If download ended, remove the fragment. Otherwise, go back in the view if possible, otherwise closet he webview.\r\n\r\nBy the way, is there a way for the user to quickly remove the webview entirely and go back to the deck picker, or must they reload in page in reverse order? "", 'comment_created': datetime.datetime(2021, 7, 24, 23, 24, 56, tzinfo=datetime.timezone.utc), 'commenter': 'Arthur-Milchior', 'type': 'User'}, {'comment_id': 676057025, 'comment_body': 'why did you move those two resources?', 'comment_created': datetime.datetime(2021, 7, 24, 23, 29, 18, tzinfo=datetime.timezone.utc), 'commenter': 'Arthur-Milchior', 'type': 'User'}, {'comment_id': 676127774, 'comment_body': 'I beg you pardon, i forgot to ask for it yesterday. Could you please add some javadoc. Really small would be sufficient. But I can imagine someone who browser to the code and is not clear what the ""shared deck activity"" is. It may mean sharing a deck you are exporting, it may mean exporting a deck. It may mean importing a deck someone shared with you in any way, e.g. email.\r\n\r\nThe name makes sens because ankiweb call it shared decks, so I\'m fine with keeping this name, there is no simple other name I can think of. Javadoc is the proper way to desambiguate here\r\n', 'comment_created': datetime.datetime(2021, 7, 25, 11, 6, 8, tzinfo=datetime.timezone.utc), 'commenter': 'Arthur-Milchior', 'type': 'User'}, {'comment_id': 676127938, 'comment_body': ""I'd like a comment (not a javadoc here, because it's technical) that state what you're doing. That is, I think, showing the webview with shared deck on ankiweb by default and ensuring there is an extra capture option for anki package from ankiweb."", 'comment_created': datetime.datetime(2021, 7, 25, 11, 7, 35, tzinfo=datetime.timezone.utc), 'commenter': 'Arthur-Milchior', 'type': 'User'}, {'comment_id': 676128359, 'comment_body': ""I'd like a javadoc that indicate that it's only used for shared decks that are downloaded from `SharedDecksActivity`. Someone using this feature probably know that we don't capture downloads from the standard browser, but it's always nice to be explicit.\r\n Also, just indicating what you do from the user point of view when a download occur.\r\n\r\nFor context, we don't need to do a java doc describing all fragments. DeckPicker is too big to describe in details. But since this action is very specific, it's fine I think to really describe what we expect the user to see. So that someone reading the code and maybe who have not used this particular feature gets immediately an idea of what is going on"", 'comment_created': datetime.datetime(2021, 7, 25, 11, 10, 29, tzinfo=datetime.timezone.utc), 'commenter': 'Arthur-Milchior', 'type': 'User'}, {'comment_id': 676129170, 'comment_body': 'Could you please revert this change. \r\nSince you may not be able to tell your editor not to add a newline at the end of the file, reverting with git may be the easier way to do it', 'comment_created': datetime.datetime(2021, 7, 25, 11, 16, 33, tzinfo=datetime.timezone.utc), 'commenter': 'Arthur-Milchior', 'type': 'User'}, {'comment_id': 676129290, 'comment_body': 'Please remove ""Method to"" since it\'s already clear it\'s a method.\r\n> Set the request for downloading a deck\r\n\r\ntells as much.\r\n\r\nHowever I fear I don\'t really understand the sens of the current javadoc. Actually, I\'m not sure enough of your expected logic to make a suggestion', 'comment_created': datetime.datetime(2021, 7, 25, 11, 17, 34, tzinfo=datetime.timezone.utc), 'commenter': 'Arthur-Milchior', 'type': 'User'}, {'comment_id': 676129597, 'comment_body': 'In which case can you start a new download and having the progress checker still running?', 'comment_created': datetime.datetime(2021, 7, 25, 11, 20, 14, tzinfo=datetime.timezone.utc), 'commenter': 'Arthur-Milchior', 'type': 'User'}, {'comment_id': 676129744, 'comment_body': 'I\'d like your javadoc to indicate that while you use a manager, you don\'t expect to manage more than one download at a time, and maybe also explain the reason to use a manager (I actually don\'t know what are the various way to download something. But it\'s strange to use ""enqueue"" when you never expect the queue to have more than one element)', 'comment_created': datetime.datetime(2021, 7, 25, 11, 21, 14, tzinfo=datetime.timezone.utc), 'commenter': 'Arthur-Milchior', 'type': 'User'}, {'comment_id': 676135346, 'comment_body': ""In my opinion, this sentence mix two related topics. When it is supposed to be called and what it do. It seems that the method itself ensure that it get executed when the download is succesful, which is not the case.\r\n\r\nSo I'd go with\r\n\r\n> If mFileName is apkg or colpkg, import it in AnkiDroid\r\n> this should be called when the download completed succesfully"", 'comment_created': datetime.datetime(2021, 7, 25, 12, 4, 33, tzinfo=datetime.timezone.utc), 'commenter': 'Arthur-Milchior', 'type': 'User'}, {'comment_id': 676135744, 'comment_body': ""Could you please help me understand why you use a default value instead of lateInit.\r\nMy understanding is that you'll assign it only once, so I'd even assume a lateinit would be more correct semantically."", 'comment_created': datetime.datetime(2021, 7, 25, 12, 7, 55, tzinfo=datetime.timezone.utc), 'commenter': 'Arthur-Milchior', 'type': 'User'}, {'comment_id': 676136036, 'comment_body': 'Do you know how it can happen? And if so, whether the other download is dealt with in any way by some broadcast receiver?', 'comment_created': datetime.datetime(2021, 7, 25, 12, 9, 31, tzinfo=datetime.timezone.utc), 'commenter': 'Arthur-Milchior', 'type': 'User'}, {'comment_id': 676136076, 'comment_body': ""In my opinion, this sentence mix two related topics. When it is supposed to be called and what it do. It seems that the method itself ensure that it get executed when the download is succesful, which is not the case.\r\n\r\nSo I'd go with\r\n\r\n> If mFileName is apkg or colpkg, import it in AnkiDroid\r\n> this should be called when the download completed succesfully"", 'comment_created': datetime.datetime(2021, 7, 25, 12, 9, 50, tzinfo=datetime.timezone.utc), 'commenter': 'Arthur-Milchior', 'type': 'User'}, {'comment_id': 676137480, 'comment_body': 'This is now visible on the action bar. Change to ""download deck"" or similar', 'comment_created': datetime.datetime(2021, 7, 25, 12, 20, 46, tzinfo=datetime.timezone.utc), 'commenter': 'david-allison', 'type': 'User'}, {'comment_id': 676137556, 'comment_body': 'Just use ""cancel"" and ""continue"" for the buttons. Use ""Cancel download?"" for the title', 'comment_created': datetime.datetime(2021, 7, 25, 12, 21, 24, tzinfo=datetime.timezone.utc), 'commenter': 'david-allison', 'type': 'User'}, {'comment_id': 676137724, 'comment_body': '```suggestion\r\n    <string name=""deck_download_progress_message"">You can use other apps while the download is running</string>\r\n```', 'comment_created': datetime.datetime(2021, 7, 25, 12, 22, 14, tzinfo=datetime.timezone.utc), 'commenter': 'david-allison', 'type': 'User'}, {'comment_id': 676137808, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2021, 7, 25, 12, 22, 37, tzinfo=datetime.timezone.utc), 'commenter': 'david-allison', 'type': 'User'}, {'comment_id': 676137847, 'comment_body': ""Just use the title. Don't need a content property of the dialog"", 'comment_created': datetime.datetime(2021, 7, 25, 12, 22, 51, tzinfo=datetime.timezone.utc), 'commenter': 'david-allison', 'type': 'User'}, {'comment_id': 676137983, 'comment_body': 'If the download completes, and the dialog is shown, remove it.', 'comment_created': datetime.datetime(2021, 7, 25, 12, 24, 2, tzinfo=datetime.timezone.utc), 'commenter': 'david-allison', 'type': 'User'}, {'comment_id': 676138147, 'comment_body': 'Selecting ""cancel"" failed and crashed\r\n\r\n```\r\n2021-07-25 13:24:39.584 21179-21179/com.ichi2.anki E/AndroidRuntime: FATAL EXCEPTION: main\r\n    Process: com.ichi2.anki, PID: 21179\r\n    java.lang.IllegalArgumentException: Receiver not registered: com.ichi2.anki.SharedDecksDownloadFragment$mOnComplete$1@326f993\r\n        at android.app.LoadedApk.forgetReceiverDispatcher(LoadedApk.java:1459)\r\n        at android.app.ContextImpl.unregisterReceiver(ContextImpl.java:1642)\r\n        at android.content.ContextWrapper.unregisterReceiver(ContextWrapper.java:715)\r\n        at android.content.ContextWrapper.unregisterReceiver(ContextWrapper.java:715)\r\n        at com.ichi2.anki.SharedDecksDownloadFragment.unregisterReceiver(SharedDecksDownloadFragment.kt:229)\r\n        at com.ichi2.anki.SharedDecksDownloadFragment.showCancelConfirmationDialog$lambda-7$lambda-5(SharedDecksDownloadFragment.kt:355)\r\n        at com.ichi2.anki.SharedDecksDownloadFragment.lambda$t8e6bXd8yYwAAXryUECPrQDOBp8(Unknown Source:0)\r\n        at com.ichi2.anki.-$$Lambda$SharedDecksDownloadFragment$t8e6bXd8yYwAAXryUECPrQDOBp8.onClick(Unknown Source:2)\r\n        at com.afollestad.materialdialogs.MaterialDialog.onClick(MaterialDialog.java:410)\r\n        at android.view.View.performClick(View.java:7448)\r\n        at android.view.View.performClickInternal(View.java:7425)\r\n        at android.view.View.access$3600(View.java:810)\r\n        at android.view.View$PerformClick.run(View.java:28305)\r\n        at android.os.Handler.handleCallback(Handler.java:938)\r\n        at android.os.Handler.dispatchMessage(Handler.java:99)\r\n        at android.os.Looper.loop(Looper.java:223)\r\n        at android.app.ActivityThread.main(ActivityThread.java:7664)\r\n        at java.lang.reflect.Method.invoke(Native Method)\r\n        at com.android.internal.os.RuntimeInit$MethodAndArgsCaller.run(RuntimeInit.java:592)\r\n        at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:947)\r\n```', 'comment_created': datetime.datetime(2021, 7, 25, 12, 25, 25, tzinfo=datetime.timezone.utc), 'commenter': 'david-allison', 'type': 'User'}, {'comment_id': 676138300, 'comment_body': 'This can show `-0.0%`', 'comment_created': datetime.datetime(2021, 7, 25, 12, 26, 57, tzinfo=datetime.timezone.utc), 'commenter': 'david-allison', 'type': 'User'}, {'comment_id': 676138448, 'comment_body': ""I don't see why this would loop, could it be turned into an `if`?"", 'comment_created': datetime.datetime(2021, 7, 25, 12, 28, tzinfo=datetime.timezone.utc), 'commenter': 'david-allison', 'type': 'User'}, {'comment_id': 676138534, 'comment_body': 'logging here would be useful', 'comment_created': datetime.datetime(2021, 7, 25, 12, 28, 21, tzinfo=datetime.timezone.utc), 'commenter': 'david-allison', 'type': 'User'}, {'comment_id': 676170650, 'comment_body': ""Removed this since it isn't required. `onReceive()` will be called when download is completed."", 'comment_created': datetime.datetime(2021, 7, 25, 16, 31, 4, tzinfo=datetime.timezone.utc), 'commenter': 'ShridharGoel', 'type': 'User'}, {'comment_id': 676170776, 'comment_body': 'Seems like it had happened automatically through Android Studio. Reverted.', 'comment_created': datetime.datetime(2021, 7, 25, 16, 31, 57, tzinfo=datetime.timezone.utc), 'commenter': 'ShridharGoel', 'type': 'User'}, {'comment_id': 676170868, 'comment_body': 'It was there earlier for handling the case of multiple downloads. Removed.', 'comment_created': datetime.datetime(2021, 7, 25, 16, 32, 49, tzinfo=datetime.timezone.utc), 'commenter': 'ShridharGoel', 'type': 'User'}, {'comment_id': 676170986, 'comment_body': 'That is the case. This method gets executed when the download completes.', 'comment_created': datetime.datetime(2021, 7, 25, 16, 33, 41, tzinfo=datetime.timezone.utc), 'commenter': 'ShridharGoel', 'type': 'User'}, {'comment_id': 676170989, 'comment_body': ""It's better to use a default value so that if in case `mFileName` gets used before it is initialised, then a crash can be prevented. It's required to ensure that `lateinit` variables are initialised before being used."", 'comment_created': datetime.datetime(2021, 7, 25, 16, 33, 47, tzinfo=datetime.timezone.utc), 'commenter': 'ShridharGoel', 'type': 'User'}, {'comment_id': 676172486, 'comment_body': 'This might not happen since it has been decided to not allow the usage of the app while a download is going on. Should we still keep it as a check to be sure that the download ID matches?', 'comment_created': datetime.datetime(2021, 7, 25, 16, 44, 49, tzinfo=datetime.timezone.utc), 'commenter': 'ShridharGoel', 'type': 'User'}, {'comment_id': 676172846, 'comment_body': 'This can be confusing regarding what \'Cancel\' means when asked for ""Cancel download?"". User might not know whether it means to cancel the download or cancel the confirmation dialog. Similar would be with \'Continue\'. User might not know whether it means to continue the download or continue with the cancellation.', 'comment_created': datetime.datetime(2021, 7, 25, 16, 47, 49, tzinfo=datetime.timezone.utc), 'commenter': 'ShridharGoel', 'type': 'User'}, {'comment_id': 676172941, 'comment_body': 'I think even `if` is not required here. Updated.', 'comment_created': datetime.datetime(2021, 7, 25, 16, 48, 24, tzinfo=datetime.timezone.utc), 'commenter': 'ShridharGoel', 'type': 'User'}, {'comment_id': 676199104, 'comment_body': 'What about `.apkg (1)` which Android will sometimes download\r\n\r\nSee: https://github.com/ankidroid/Anki-Android/blob/a3cd40ae81a09ae601506c1bdf94784ab3b5925a/AnkiDroid/src/main/java/com/ichi2/utils/ImportUtils.java#L326-L335', 'comment_created': datetime.datetime(2021, 7, 25, 20, 36, 43, tzinfo=datetime.timezone.utc), 'commenter': 'david-allison', 'type': 'User'}, {'comment_id': 676199277, 'comment_body': 'Would be useful to log the value', 'comment_created': datetime.datetime(2021, 7, 25, 20, 37, 59, tzinfo=datetime.timezone.utc), 'commenter': 'david-allison', 'type': 'User'}, {'comment_id': 676199314, 'comment_body': 'maybe: `veifyDeckIsImportable()`', 'comment_created': datetime.datetime(2021, 7, 25, 20, 38, 31, tzinfo=datetime.timezone.utc), 'commenter': 'david-allison', 'type': 'User'}, {'comment_id': 676199476, 'comment_body': ""it.getInt(-1) wouldn't fail?"", 'comment_created': datetime.datetime(2021, 7, 25, 20, 40, 12, tzinfo=datetime.timezone.utc), 'commenter': 'david-allison', 'type': 'User'}, {'comment_id': 676199548, 'comment_body': ""Does this work if it's overridden?"", 'comment_created': datetime.datetime(2021, 7, 25, 20, 40, 45, tzinfo=datetime.timezone.utc), 'commenter': 'david-allison', 'type': 'User'}, {'comment_id': 676199722, 'comment_body': '```suggestion\r\n    <string name=""percentage"">%s%%</string>\r\n```', 'comment_created': datetime.datetime(2021, 7, 25, 20, 42, tzinfo=datetime.timezone.utc), 'commenter': 'david-allison', 'type': 'User'}, {'comment_id': 676199786, 'comment_body': 'Use ""cancel/continue"" without the ""download""\r\n\r\n```suggestion\r\n```', 'comment_created': datetime.datetime(2021, 7, 25, 20, 42, 39, tzinfo=datetime.timezone.utc), 'commenter': 'david-allison', 'type': 'User'}, {'comment_id': 676199794, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2021, 7, 25, 20, 42, 48, tzinfo=datetime.timezone.utc), 'commenter': 'david-allison', 'type': 'User'}, {'comment_id': 676199807, 'comment_body': '```suggestion\r\n    <string name=""download_deck"">Download deck</string>\r\n```', 'comment_created': datetime.datetime(2021, 7, 25, 20, 42, 55, tzinfo=datetime.timezone.utc), 'commenter': 'david-allison', 'type': 'User'}, {'comment_id': 676199918, 'comment_body': 'It would be nice to add a ""search"" to the action bar, which resets to the default URL', 'comment_created': datetime.datetime(2021, 7, 25, 20, 44, 12, tzinfo=datetime.timezone.utc), 'commenter': 'david-allison', 'type': 'User'}, {'comment_id': 676200024, 'comment_body': ""This lead to multiple questions.\r\nIs there a normal user journey which would lead to reading the value before assigning it an actual file name? If so, yes, and do we want to try to avoid it?\r\nIf not, it means that this case would be a bug, right? If so, we may want to send a bug report to understand when it occurs - i it ever occurs. Which would mean at least checking that String is not empty before using it.\r\nTo actually ensure that we notice when the String is not properly identified, I'd prefer to use a String? and a helper method which send the report when given mFileName is null, and otherwise return the String."", 'comment_created': datetime.datetime(2021, 7, 25, 20, 45, 25, tzinfo=datetime.timezone.utc), 'commenter': 'Arthur-Milchior', 'type': 'User'}, {'comment_id': 676200059, 'comment_body': '""The terminology""? I think a part is missing', 'comment_created': datetime.datetime(2021, 7, 25, 20, 45, 49, tzinfo=datetime.timezone.utc), 'commenter': 'Arthur-Milchior', 'type': 'User'}, {'comment_id': 676200351, 'comment_body': ""I'd still love you to indicate whether we expect to use a single download at a time or whether there is a journey where we expect multiple download occurring simultaneously. I think an earlier discussion noted that we want a single download at a time, requiring the user to wait for it to end, so that they can cancel it and there is no ambiguity. If I recall correctly and it's what you expect to do, then it would be important to document it somewhere. Otherwise, I'll have more questions regarding how you deal with canceling the current download"", 'comment_created': datetime.datetime(2021, 7, 25, 20, 48, 24, tzinfo=datetime.timezone.utc), 'commenter': 'Arthur-Milchior', 'type': 'User'}, {'comment_id': 676201350, 'comment_body': 'I realize I was not clear.\r\nThis comment would be okay line 137, when you register the receiver. Once it is registered, you ensure that indeed AnkiDroid will import the file.\r\nMy point is that your comment seems to indicate that just by declaring the variable `mOnComplete` you ensure that when the download is completed succesfully, the file is imported. While in reality, it\'s the registering part that do this action.\r\n\r\nSo, I\'d want the javadoc to indicate:\r\n* where it is supposed to be registered\r\n* what occurs when monComplete.onReceive is called,\r\n\r\n\r\n\r\nBy the way, your code accept colpkg and apkg, so It\'d be nice if either:\r\n* you were consistent and javadoc indicate both\r\n* you simply indicate ""an anki deck"", which ensure javadoc remain true if the encoding and extension change', 'comment_created': datetime.datetime(2021, 7, 25, 20, 57, 44, tzinfo=datetime.timezone.utc), 'commenter': 'Arthur-Milchior', 'type': 'User'}, {'comment_id': 676201539, 'comment_body': ""One thing is sure, we want to send a report to Acra to know about it.\r\n\r\nMy assumption here is that, if it occurs, it would be due to a concurrency issue, a download cancelled just when it was ending. If it is the case, then I prefer we don't important it, and I like your choice.\r\nIf we get user complaint that sometime download file, we may investigate this more. Since we would have acra report for this, it should be relatively simple to find this to be the cause"", 'comment_created': datetime.datetime(2021, 7, 25, 20, 59, 53, tzinfo=datetime.timezone.utc), 'commenter': 'Arthur-Milchior', 'type': 'User'}, {'comment_id': 676201664, 'comment_body': '> Halt if file doesn\'t have extension as apkg or colpkg\r\n\r\nThe command is indeed called ""return"". However, we are not actually returning anything, what we actually do is halt the execution here', 'comment_created': datetime.datetime(2021, 7, 25, 21, 1, 3, tzinfo=datetime.timezone.utc), 'commenter': 'Arthur-Milchior', 'type': 'User'}, {'comment_id': 676201865, 'comment_body': '""Check download progress"" \r\n(I suspect we don\'t want the third person here)', 'comment_created': datetime.datetime(2021, 7, 25, 21, 3, 10, tzinfo=datetime.timezone.utc), 'commenter': 'Arthur-Milchior', 'type': 'User'}, {'comment_id': 676201995, 'comment_body': '> Open the downloaded deck saved in `mFileName`\r\n\r\n""its file name"" is not clear unless you already know the class architecture', 'comment_created': datetime.datetime(2021, 7, 25, 21, 4, 33, tzinfo=datetime.timezone.utc), 'commenter': 'Arthur-Milchior', 'type': 'User'}, {'comment_id': 676687275, 'comment_body': 'nit: consider moving this to a variable inside the class', 'comment_created': datetime.datetime(2021, 7, 26, 15, 0, 26, tzinfo=datetime.timezone.utc), 'commenter': 'david-allison', 'type': 'User'}, {'comment_id': 676687702, 'comment_body': 'I love the search!!!!\r\n\r\n![](https://media.giphy.com/media/xTQXENNW77nUsNVmV4/giphy.gif)', 'comment_created': datetime.datetime(2021, 7, 26, 15, 0, 54, tzinfo=datetime.timezone.utc), 'commenter': 'david-allison', 'type': 'User'}, {'comment_id': 676689372, 'comment_body': 'no need for constants\r\n\r\nYou might want to extract the functionality to a `Utils` class', 'comment_created': datetime.datetime(2021, 7, 26, 15, 2, 36, tzinfo=datetime.timezone.utc), 'commenter': 'david-allison', 'type': 'User'}, {'comment_id': 676690280, 'comment_body': 'Do you want to return or do something if an exception occurs?', 'comment_created': datetime.datetime(2021, 7, 26, 15, 3, 40, tzinfo=datetime.timezone.utc), 'commenter': 'david-allison', 'type': 'User'}, {'comment_id': 676691020, 'comment_body': ""I don't think you need `it.close()` if you're in a `use` block?"", 'comment_created': datetime.datetime(2021, 7, 26, 15, 4, 32, tzinfo=datetime.timezone.utc), 'commenter': 'david-allison', 'type': 'User'}, {'comment_id': 676691515, 'comment_body': ""can't you return here instead of below?"", 'comment_created': datetime.datetime(2021, 7, 26, 15, 5, 6, tzinfo=datetime.timezone.utc), 'commenter': 'david-allison', 'type': 'User'}, {'comment_id': 676771841, 'comment_body': 'Thank you!', 'comment_created': datetime.datetime(2021, 7, 26, 16, 41, 40, tzinfo=datetime.timezone.utc), 'commenter': 'ShridharGoel', 'type': 'User'}, {'comment_id': 676772181, 'comment_body': 'Updated to call `checkDownloadStatusAndUnregisterReceiver()` and return.', 'comment_created': datetime.datetime(2021, 7, 26, 16, 42, 10, tzinfo=datetime.timezone.utc), 'commenter': 'ShridharGoel', 'type': 'User'}, {'comment_id': 676772977, 'comment_body': 'Should not be required, removed.', 'comment_created': datetime.datetime(2021, 7, 26, 16, 43, 14, tzinfo=datetime.timezone.utc), 'commenter': 'ShridharGoel', 'type': 'User'}, {'comment_id': 676773122, 'comment_body': 'It can be done, updated.', 'comment_created': datetime.datetime(2021, 7, 26, 16, 43, 27, tzinfo=datetime.timezone.utc), 'commenter': 'ShridharGoel', 'type': 'User'}, {'comment_id': 676807892, 'comment_body': '@Arthur-Milchior @mikehardy \r\n\r\nMaybe ""Cancel/Resume""?', 'comment_created': datetime.datetime(2021, 7, 26, 17, 33, 37, tzinfo=datetime.timezone.utc), 'commenter': 'david-allison', 'type': 'User'}, {'comment_id': 676834735, 'comment_body': ""Using 'Resume' would seem like the download is in paused state till the dialog is open."", 'comment_created': datetime.datetime(2021, 7, 26, 18, 13, 26, tzinfo=datetime.timezone.utc), 'commenter': 'ShridharGoel', 'type': 'User'}, {'comment_id': 676926827, 'comment_body': 'Hmm...\r\n\r\n""Cancel Download"" -> ""Stop Download? [CONTINUE] [STOP]""?', 'comment_created': datetime.datetime(2021, 7, 26, 20, 37, 30, tzinfo=datetime.timezone.utc), 'commenter': 'david-allison', 'type': 'User'}, {'comment_id': 676927354, 'comment_body': ""can't we clear the history immediately?"", 'comment_created': datetime.datetime(2021, 7, 26, 20, 38, 22, tzinfo=datetime.timezone.utc), 'commenter': 'david-allison', 'type': 'User'}, {'comment_id': 676928885, 'comment_body': 'rename variable to `fileToDownload`, having a method the same as the class was confusing', 'comment_created': datetime.datetime(2021, 7, 26, 20, 40, 59, tzinfo=datetime.timezone.utc), 'commenter': 'david-allison', 'type': 'User'}, {'comment_id': 676929923, 'comment_body': 'thought: accepting a `DownloadFile` would allow you to move this code into a function which is `DownloadFile -> Request`', 'comment_created': datetime.datetime(2021, 7, 26, 20, 42, 35, tzinfo=datetime.timezone.utc), 'commenter': 'david-allison', 'type': 'User'}, {'comment_id': 676932149, 'comment_body': 'Use `FixedTextView` in all of your xml files', 'comment_created': datetime.datetime(2021, 7, 26, 20, 46, 2, tzinfo=datetime.timezone.utc), 'commenter': 'david-allison', 'type': 'User'}, {'comment_id': 677572067, 'comment_body': 'I like the general idea of continue/stop, however ""stop"" is now inconsistent as a verb\r\nIf the call to action is ""cancel download"" (which is a good verb, I think), then the question should be ""Cancel Download?"" and the confirmation call to action should again be ""cancel"" ', 'comment_created': datetime.datetime(2021, 7, 27, 15, 37, 55, tzinfo=datetime.timezone.utc), 'commenter': 'mikehardy', 'type': 'User'}, {'comment_id': 677736734, 'comment_body': 'No, history should not be cleared before the page finishes loading otherwise there would be an extra entry in the history since the previous page would not get cleared.', 'comment_created': datetime.datetime(2021, 7, 27, 19, 26, 8, tzinfo=datetime.timezone.utc), 'commenter': 'ShridharGoel', 'type': 'User'}, {'comment_id': 677808799, 'comment_body': 'Could use a quick comment on what this is', 'comment_created': datetime.datetime(2021, 7, 27, 21, 20, 27, tzinfo=datetime.timezone.utc), 'commenter': 'david-allison', 'type': 'User'}, {'comment_id': 677809154, 'comment_body': ""extract the constant as it's used between classes"", 'comment_created': datetime.datetime(2021, 7, 27, 21, 21, 6, tzinfo=datetime.timezone.utc), 'commenter': 'david-allison', 'type': 'User'}, {'comment_id': 677809956, 'comment_body': 'move the comment here, and be a bit more explicit that the exception is ignored. Maybe with a `return`', 'comment_created': datetime.datetime(2021, 7, 27, 21, 22, 21, tzinfo=datetime.timezone.utc), 'commenter': 'david-allison', 'type': 'User'}, {'comment_id': 677811014, 'comment_body': 'Maybe a ""something went wrong"" toast as well', 'comment_created': datetime.datetime(2021, 7, 27, 21, 24, 21, tzinfo=datetime.timezone.utc), 'commenter': 'david-allison', 'type': 'User'}, {'comment_id': 680277489, 'comment_body': 'Do you mean that values should get the comment. Or is this class javadoc enough?', 'comment_created': datetime.datetime(2021, 7, 31, 0, 27, 18, tzinfo=datetime.timezone.utc), 'commenter': 'Arthur-Milchior', 'type': 'User'}, {'comment_id': 680284712, 'comment_body': ""Do you know what exceptions can be thrown? I checked by removing the try catch and got `IllegalArgumentException`. is there anything else? Generally, it's nice to catch just what you need. "", 'comment_created': datetime.datetime(2021, 7, 31, 1, 17, 24, tzinfo=datetime.timezone.utc), 'commenter': 'Arthur-Milchior', 'type': 'User'}, {'comment_id': 680286317, 'comment_body': 'Can you please help me understand this try/catch.\r\nMy understanding of the javadoc is that it returns -1 if it is not found. \r\nYou may have wanted `getColumnIndexOrThrow`; In which case you\'d catch `IllegalArgumentException`\r\n\r\nBut I think you can just do \r\n\r\n```kotlin\r\nval columnIndexForStatus= it.getColumnIndex(DownloadManager.COLUMN_STATUS)\r\nval columnIndexForReason = it.getColumnIndex(DownloadManager.COLUMN_REASON)\r\nif (columnIndexForReason == -1 || columnIndexForStatus == -1) {\r\n  Timber.w(""Missing a column"")\r\n  return\r\n}', 'comment_created': datetime.datetime(2021, 7, 31, 1, 31, 18, tzinfo=datetime.timezone.utc), 'commenter': 'Arthur-Milchior', 'type': 'User'}, {'comment_id': 680287078, 'comment_body': ""Same question. Do you have any idea what kind of exception you're expecting here? I'm not really happy with catching everything. Some thing maybe important actually. "", 'comment_created': datetime.datetime(2021, 7, 31, 1, 38, 27, tzinfo=datetime.timezone.utc), 'commenter': 'Arthur-Milchior', 'type': 'User'}, {'comment_id': 680287705, 'comment_body': 'Just the class I feel', 'comment_created': datetime.datetime(2021, 7, 31, 1, 44, 17, tzinfo=datetime.timezone.utc), 'commenter': 'david-allison', 'type': 'User'}, {'comment_id': 680380354, 'comment_body': 'Yes.', 'comment_created': datetime.datetime(2021, 7, 31, 16, 40, 58, tzinfo=datetime.timezone.utc), 'commenter': 'ShridharGoel', 'type': 'User'}, {'comment_id': 680380607, 'comment_body': 'Not sure about what exceptions could be thrown here. It was suggested by @david-allison-1 to add a try-catch block for this code, so maybe he might have better idea.', 'comment_created': datetime.datetime(2021, 7, 31, 16, 43, 30, tzinfo=datetime.timezone.utc), 'commenter': 'ShridharGoel', 'type': 'User'}, {'comment_id': 680381571, 'comment_body': 'This was done earlier.', 'comment_created': datetime.datetime(2021, 7, 31, 16, 52, 52, tzinfo=datetime.timezone.utc), 'commenter': 'ShridharGoel', 'type': 'User'}, {'comment_id': 680381698, 'comment_body': 'Updated.', 'comment_created': datetime.datetime(2021, 7, 31, 16, 54, 3, tzinfo=datetime.timezone.utc), 'commenter': 'ShridharGoel', 'type': 'User'}, {'comment_id': 680381707, 'comment_body': 'Updated.', 'comment_created': datetime.datetime(2021, 7, 31, 16, 54, 18, tzinfo=datetime.timezone.utc), 'commenter': 'ShridharGoel', 'type': 'User'}, {'comment_id': 680381742, 'comment_body': 'Updated.', 'comment_created': datetime.datetime(2021, 7, 31, 16, 54, 35, tzinfo=datetime.timezone.utc), 'commenter': 'ShridharGoel', 'type': 'User'}, {'comment_id': 680381872, 'comment_body': 'Updated.', 'comment_created': datetime.datetime(2021, 7, 31, 16, 55, 36, tzinfo=datetime.timezone.utc), 'commenter': 'ShridharGoel', 'type': 'User'}, {'comment_id': 680381902, 'comment_body': 'Yes, updated it later.', 'comment_created': datetime.datetime(2021, 7, 31, 16, 56, 4, tzinfo=datetime.timezone.utc), 'commenter': 'ShridharGoel', 'type': 'User'}, {'comment_id': 680381982, 'comment_body': 'Updated.', 'comment_created': datetime.datetime(2021, 7, 31, 16, 56, 26, tzinfo=datetime.timezone.utc), 'commenter': 'ShridharGoel', 'type': 'User'}, {'comment_id': 680381984, 'comment_body': 'Updated.', 'comment_created': datetime.datetime(2021, 7, 31, 16, 56, 29, tzinfo=datetime.timezone.utc), 'commenter': 'ShridharGoel', 'type': 'User'}, {'comment_id': 680381997, 'comment_body': 'Updated.', 'comment_created': datetime.datetime(2021, 7, 31, 16, 56, 32, tzinfo=datetime.timezone.utc), 'commenter': 'ShridharGoel', 'type': 'User'}, {'comment_id': 680382006, 'comment_body': 'Updated.', 'comment_created': datetime.datetime(2021, 7, 31, 16, 56, 42, tzinfo=datetime.timezone.utc), 'commenter': 'ShridharGoel', 'type': 'User'}, {'comment_id': 680382010, 'comment_body': 'Updated.', 'comment_created': datetime.datetime(2021, 7, 31, 16, 56, 48, tzinfo=datetime.timezone.utc), 'commenter': 'ShridharGoel', 'type': 'User'}, {'comment_id': 680382066, 'comment_body': 'Updated.', 'comment_created': datetime.datetime(2021, 7, 31, 16, 57, 28, tzinfo=datetime.timezone.utc), 'commenter': 'ShridharGoel', 'type': 'User'}, {'comment_id': 680382578, 'comment_body': 'Not sure what exceptions could be thrown from here. It was suggested by @david-allison-1 so he might be having better idea.', 'comment_created': datetime.datetime(2021, 7, 31, 17, 3, 2, tzinfo=datetime.timezone.utc), 'commenter': 'ShridharGoel', 'type': 'User'}, {'comment_id': 680385739, 'comment_body': 'This was implemented accordingly.', 'comment_created': datetime.datetime(2021, 7, 31, 17, 9, 54, tzinfo=datetime.timezone.utc), 'commenter': 'ShridharGoel', 'type': 'User'}, {'comment_id': 683004028, 'comment_body': ""I have a question - here it appears we are just sending the file URI and the type to the system to attempt an import via a generic `Intent.ACTION_VIEW`. There have been reports that for whatever reason the system does not always seem to register AnkiDroid as a handler for apkg/colpkg, and it's one of the common complaints from users on import failures\r\n\r\nWe know what activity does our import though, we control it. Why aren't we directly starting that activity with the intent? Or, am I misunderstanding things?"", 'comment_created': datetime.datetime(2021, 8, 4, 22, 35, 15, tzinfo=datetime.timezone.utc), 'commenter': 'mikehardy', 'type': 'User'}]","[{'commit_sha': '83890b4eb2a53df187952e981ec8dad3e31b1fe9', 'committer_username': 'ShridharGoel', 'committer_name': 'Shridhar Goel', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 18, 13, 15, 13, tzinfo=datetime.timezone.utc)}]",Shridhar Goel,35566748,,User,,51,,0,0
674637128,Implement app introduction system,https://user-images.githubusercontent.com/35566748/128643613-95f852cc-cfa7-48e5-8f8d-6a2560539938.mp4,False,9130,https://api.github.com/repos/ankidroid/Anki-Android/pulls/9130,https://github.com/ankidroid/Anki-Android/pull/9130,open,1937,8,15,2,17,77,3,1,"[{'name': 'Needs Author Reply'}, {'name': 'Keep Open'}, {'name': 'Has Conflicts'}]",2021-06-21 15:05:26+00:00,,0.0,,"[{'comment_id': 659160771, 'comment_body': ""`enum` is not a proper variable name. It would be cool to describe what it is. In this case, it's actually a onboarding_flag."", 'comment_created': datetime.datetime(2021, 6, 26, 12, 12, 5, tzinfo=datetime.timezone.utc), 'commenter': 'Arthur-Milchior', 'type': 'User'}, {'comment_id': 659164695, 'comment_body': '`bitset` is not really descriptive. Something such as `visited_onboarding_screen` would describe the value here', 'comment_created': datetime.datetime(2021, 6, 26, 12, 53, 12, tzinfo=datetime.timezone.utc), 'commenter': 'Arthur-Milchior', 'type': 'User'}, {'comment_id': 659165271, 'comment_body': 'While we use it for onboarding, the logic here is not related to onboarding.\r\nSo I suggest renaming the class to something such as `BitsetInPreferenceUtil`. Add some javadoc to indicate that you expect to use it for onboarding', 'comment_created': datetime.datetime(2021, 6, 26, 12, 59, 45, tzinfo=datetime.timezone.utc), 'commenter': 'Arthur-Milchior', 'type': 'User'}, {'comment_id': 659165380, 'comment_body': 'This part should also use the bitset I believe, just to be extra sure that the logic is right', 'comment_created': datetime.datetime(2021, 6, 26, 13, 0, 36, tzinfo=datetime.timezone.utc), 'commenter': 'Arthur-Milchior', 'type': 'User'}, {'comment_id': 659165651, 'comment_body': '`enum.name` contains the name of the element of the enumeration. What you actually want here is the name of the enumeration itself, the class inheriting enum. There are mulitple way to do it. The simplest being using `enum.getClass().getSimpleName()`. \r\nWe should have regression test here, because I believe it would have entirely defeated the purpose of the tool.\r\nWorse, if you had multiple enumerations with value of similar name, there would have been a clash', 'comment_created': datetime.datetime(2021, 6, 26, 13, 3, 8, tzinfo=datetime.timezone.utc), 'commenter': 'Arthur-Milchior', 'type': 'User'}, {'comment_id': 659178010, 'comment_body': 'By the way, you probably could use `enum: T`; since you have the parameter, there is no reason to use `Enum<T>` instead of `T`', 'comment_created': datetime.datetime(2021, 6, 26, 15, 3, 2, tzinfo=datetime.timezone.utc), 'commenter': 'Arthur-Milchior', 'type': 'User'}, {'comment_id': 659179825, 'comment_body': 'This is already updated in the other PR related to onboarding. I will update it here as well.', 'comment_created': datetime.datetime(2021, 6, 26, 15, 21, 5, tzinfo=datetime.timezone.utc), 'commenter': 'ShridharGoel', 'type': 'User'}, {'comment_id': 684807976, 'comment_body': 'So, I\'m not going to review the HTML. If it does the correct result, since it has no side effect (I can\'t see any script), I\'ll accept it as is. \r\nHowever, do we want to keep `Tags:"" this way, and other translatable unit?\r\nGiven that most text come from already existing interface, whose translation is available to us, it seems even easier to test quickly whether translation work. I\'d have assumed we wanted to have either %s or some other indication that this is a text that is expected to be replaced', 'comment_created': datetime.datetime(2021, 8, 8, 17, 51, 23, tzinfo=datetime.timezone.utc), 'commenter': 'Arthur-Milchior', 'type': 'User'}, {'comment_id': 684811848, 'comment_body': 'Would you mind replacing all of the Seletor by Selector', 'comment_created': datetime.datetime(2021, 8, 8, 18, 28, 23, tzinfo=datetime.timezone.utc), 'commenter': 'Arthur-Milchior', 'type': 'User'}, {'comment_id': 684811871, 'comment_body': 'Would you mind replacing all of the Seletor by Selector', 'comment_created': datetime.datetime(2021, 8, 8, 18, 28, 31, tzinfo=datetime.timezone.utc), 'commenter': 'Arthur-Milchior', 'type': 'User'}, {'comment_id': 684811976, 'comment_body': 'Do you think you can fix the indentation of the first commit. Thus reducing the noise in second commit', 'comment_created': datetime.datetime(2021, 8, 8, 18, 29, 37, tzinfo=datetime.timezone.utc), 'commenter': 'Arthur-Milchior', 'type': 'User'}, {'comment_id': 684812755, 'comment_body': 'We already have ""Basic"", ""Deck"" and some other word in the ressource strings. Please use those strings instead. I know the content will be ""Deck"" and not ""Deck:"", so you may need to look at the way the current interface deals with columns. \r\n\r\n', 'comment_created': datetime.datetime(2021, 8, 8, 18, 36, 23, tzinfo=datetime.timezone.utc), 'commenter': 'Arthur-Milchior', 'type': 'User'}, {'comment_id': 684812756, 'comment_body': 'We already have ""Basic"", ""Deck"" and some other word in the ressource strings. Please use those strings instead. I know the content will be ""Deck"" and not ""Deck:"", so you may need to look at the way the current interface deals with columns. \r\n\r\n', 'comment_created': datetime.datetime(2021, 8, 8, 18, 36, 26, tzinfo=datetime.timezone.utc), 'commenter': 'Arthur-Milchior', 'type': 'User'}, {'comment_id': 684813089, 'comment_body': ""There is a lot of code duplicate here. Can you please create function that take the id, the string to replace, and do the replacement.\r\nAn extra benefit, if you use a function, is that you can put in this java function\r\n`document.getElementById(id).innerHTML = newContent;` and so you won't have to create a javascript function on top of that.\r\n\r\nI find it safer to have all code executed directly from java, and not have any code shared between java and html file. It's easier to be confident that the html is safe if it has no scirpt\r\n\r\nFor safety, this function may also escape the quote. It's not a problem in English but may be a problem in a translation"", 'comment_created': datetime.datetime(2021, 8, 8, 18, 39, 57, tzinfo=datetime.timezone.utc), 'commenter': 'Arthur-Milchior', 'type': 'User'}, {'comment_id': 684814360, 'comment_body': 'I thought that Kotlin didn\'t use the ""mMemberName"" notation but directly ""memberName"". did I misunderstood?', 'comment_created': datetime.datetime(2021, 8, 8, 18, 51, 19, tzinfo=datetime.timezone.utc), 'commenter': 'Arthur-Milchior', 'type': 'User'}, {'comment_id': 684814508, 'comment_body': '\r\nI personally would add:\r\n```kt\r\nval mLocalization: Collection<Pair<String, @StringRes int>>? = null\r\n```\r\nto indicate the list of ids that should be localized and their associated value.\r\nThen your code would simply iterate over all such pairs and do the replacement', 'comment_created': datetime.datetime(2021, 8, 8, 18, 53, 4, tzinfo=datetime.timezone.utc), 'commenter': 'Arthur-Milchior', 'type': 'User'}, {'comment_id': 684814782, 'comment_body': 'As always, I really would like more javadoc. Out of context, it could be possible to think this file deals with introducing an activity in the app, and that this class deal with introducing a resource.\r\nEven something simple such as \r\n> All informations required to show one slide when introducing an activity to the user', 'comment_created': datetime.datetime(2021, 8, 8, 18, 55, 9, tzinfo=datetime.timezone.utc), 'commenter': 'Arthur-Milchior', 'type': 'User'}, {'comment_id': 684814967, 'comment_body': 'Why do we need it to be serializable?', 'comment_created': datetime.datetime(2021, 8, 8, 18, 56, 33, tzinfo=datetime.timezone.utc), 'commenter': 'Arthur-Milchior', 'type': 'User'}, {'comment_id': 684818273, 'comment_body': 'There is a slight issue here, that we must discuss (ping @david-allison-1 and @mikehardy  )\r\n\r\nI think that when we localize the app, the left language should be the user language. That is, we should ask the translators to translate ""to know (about), be aware (of)"". \r\n\r\nIf the language is German or some Swiss German, I guess ""wissen (von +dat, um +akk)"" should be replaced by English. Given that it is a special case, we can hard code it instead of having to ask translators to do it manually', 'comment_created': datetime.datetime(2021, 8, 8, 19, 25, 44, tzinfo=datetime.timezone.utc), 'commenter': 'Arthur-Milchior', 'type': 'User'}, {'comment_id': 684818412, 'comment_body': 'divider (here and in the comment)', 'comment_created': datetime.datetime(2021, 8, 8, 19, 27, 24, tzinfo=datetime.timezone.utc), 'commenter': 'Arthur-Milchior', 'type': 'User'}, {'comment_id': 684818440, 'comment_body': 'divider', 'comment_created': datetime.datetime(2021, 8, 8, 19, 27, 33, tzinfo=datetime.timezone.utc), 'commenter': 'Arthur-Milchior', 'type': 'User'}, {'comment_id': 684819253, 'comment_body': 'String resources are already being used in IntroductionFragment.kt.', 'comment_created': datetime.datetime(2021, 8, 8, 19, 34, 30, tzinfo=datetime.timezone.utc), 'commenter': 'ShridharGoel', 'type': 'User'}, {'comment_id': 684819777, 'comment_body': ""It's there in the lint rules, so needs to be done like this.\r\n\r\n@david-allison-1 Has this changed with https://github.com/ankidroid/Anki-Android/pull/9378?"", 'comment_created': datetime.datetime(2021, 8, 8, 19, 39, 4, tzinfo=datetime.timezone.utc), 'commenter': 'ShridharGoel', 'type': 'User'}, {'comment_id': 684820528, 'comment_body': 'Yeah, I tried to fix the typos which were there in #9162 (since the first commit of this PR has been taken from there). Might have missed this one.', 'comment_created': datetime.datetime(2021, 8, 8, 19, 47, 22, tzinfo=datetime.timezone.utc), 'commenter': 'ShridharGoel', 'type': 'User'}, {'comment_id': 684820539, 'comment_body': 'Yeah, I tried to fix the typos which were there in #9162 (since the first commit of this PR has been taken from there). Might have missed this one.', 'comment_created': datetime.datetime(2021, 8, 8, 19, 47, 33, tzinfo=datetime.timezone.utc), 'commenter': 'ShridharGoel', 'type': 'User'}, {'comment_id': 684821655, 'comment_body': 'Updated.', 'comment_created': datetime.datetime(2021, 8, 8, 19, 57, 10, tzinfo=datetime.timezone.utc), 'commenter': 'ShridharGoel', 'type': 'User'}, {'comment_id': 684821764, 'comment_body': 'Not required, removed it.', 'comment_created': datetime.datetime(2021, 8, 8, 19, 58, 18, tzinfo=datetime.timezone.utc), 'commenter': 'ShridharGoel', 'type': 'User'}, {'comment_id': 684822372, 'comment_body': ""> For safety, this function may also escape the quote.\r\n\r\nWhich quote? Currently, I don't think there is any quote being used in the text which is being accessed through string resources."", 'comment_created': datetime.datetime(2021, 8, 8, 20, 4, 7, tzinfo=datetime.timezone.utc), 'commenter': 'ShridharGoel', 'type': 'User'}, {'comment_id': 684844482, 'comment_body': ""What's the plan for handling translations with this file?"", 'comment_created': datetime.datetime(2021, 8, 8, 23, 27, 41, tzinfo=datetime.timezone.utc), 'commenter': 'david-allison', 'type': 'User'}, {'comment_id': 687184276, 'comment_body': 'In case it was not clear, you can simply edit this first commit. That will still keep @prateek-singh-3212 as the author. This would avoid to introduce a typo in the codebase,', 'comment_created': datetime.datetime(2021, 8, 11, 20, 54, 27, tzinfo=datetime.timezone.utc), 'commenter': 'Arthur-Milchior', 'type': 'User'}, {'comment_id': 687189550, 'comment_body': ""`getString(R.string.app_name)` may contain a quote symbol in one of the many translation.\r\nYou're injecting non-sanitized string into some code. Admittedly, it's some code from crowdin, and we do not have access to important data, so it's not that important, but still a bad idea in general.\r\n\r\nIn any case, the remaining request, to remove duplications of all of those loadUrl lines, still holds"", 'comment_created': datetime.datetime(2021, 8, 11, 21, 2, 38, tzinfo=datetime.timezone.utc), 'commenter': 'Arthur-Milchior', 'type': 'User'}, {'comment_id': 687242348, 'comment_body': 'There is a comment above from @ShridharGoel \r\n\r\n> String resources are already being used in IntroductionFragment.kt.\r\n\r\nBut I have no idea how these will be translated, technically - like how exactly the translated strings will make their way into these HTML files?\r\n\r\nThat seems like the real hurdle to me. Having some strings be translatable and others not, or how exactly to direct the translators on crowdin seems like a minor point handled with string context?\r\n', 'comment_created': datetime.datetime(2021, 8, 11, 22, 40, 23, tzinfo=datetime.timezone.utc), 'commenter': 'mikehardy', 'type': 'User'}, {'comment_id': 688969347, 'comment_body': 'Can you please remove it in the first commit, in order not to add and remove the same code in successive commit?', 'comment_created': datetime.datetime(2021, 8, 14, 17, 1, 45, tzinfo=datetime.timezone.utc), 'commenter': 'Arthur-Milchior', 'type': 'User'}, {'comment_id': 688969416, 'comment_body': 'This request still hold', 'comment_created': datetime.datetime(2021, 8, 14, 17, 2, 24, tzinfo=datetime.timezone.utc), 'commenter': 'Arthur-Milchior', 'type': 'User'}, {'comment_id': 688969622, 'comment_body': 'Can you please add a javadoc on mLocalization to indicate that the int represents a string ressource id.', 'comment_created': datetime.datetime(2021, 8, 14, 17, 4, 35, tzinfo=datetime.timezone.utc), 'commenter': 'Arthur-Milchior', 'type': 'User'}, {'comment_id': 688971224, 'comment_body': 'In OnboardingUtils.reset, would you mind putting back INTRODUCTION_SLIDES preference to false, please?\r\n\r\nAlso, can you rename it to ""IntroductionSlidesShown"" or something like that, so that it\'s clear that it represents whether it was shown and not whether it must be shown', 'comment_created': datetime.datetime(2021, 8, 14, 17, 21, 11, tzinfo=datetime.timezone.utc), 'commenter': 'Arthur-Milchior', 'type': 'User'}, {'comment_id': 688971409, 'comment_body': ""Is there any trouble with using the IntroductionResources in the constructor of IntroductionFragment instead of putting it in the bundle?\r\nSince we only use introduction fragment explicitly from introductionActivity on create, I'd think it would work, and maybe make the code more readable, avoiding to go through this bundle, and checking for null for each value that may actually not be nullable such as the title"", 'comment_created': datetime.datetime(2021, 8, 14, 17, 22, 55, tzinfo=datetime.timezone.utc), 'commenter': 'Arthur-Milchior', 'type': 'User'}, {'comment_id': 688972150, 'comment_body': ""Is there a reason to accept a nullable value? It seems you only use it with non nullable arg. I think I'd prefer it non nullable, and if ever someone want to use again, let them choose the string for null, if any"", 'comment_created': datetime.datetime(2021, 8, 14, 17, 31, 8, tzinfo=datetime.timezone.utc), 'commenter': 'Arthur-Milchior', 'type': 'User'}, {'comment_id': 688972260, 'comment_body': 'Is this the only Introduction with localization? I was certain that there were localization in other slides too.', 'comment_created': datetime.datetime(2021, 8, 14, 17, 32, 16, tzinfo=datetime.timezone.utc), 'commenter': 'Arthur-Milchior', 'type': 'User'}, {'comment_id': 688972327, 'comment_body': ""Esthetically, I'd go with one pair by line for ease of readability. But no universal rule to follow here, just something I prefer when a list do not fit on a single line"", 'comment_created': datetime.datetime(2021, 8, 14, 17, 32, 54, tzinfo=datetime.timezone.utc), 'commenter': 'Arthur-Milchior', 'type': 'User'}, {'comment_id': 688972584, 'comment_body': 'I would still like you to escape the string. Because we still have no guarantee that either a translation, or a string won\'t contain \', "", or \\.\r\nIn particular, in English and French, and I assume other language I don\'t know, the single quote is used often in every day sentence. Like the two previous sentence of this comment. So the risk seems realistic.', 'comment_created': datetime.datetime(2021, 8, 14, 17, 35, 29, tzinfo=datetime.timezone.utc), 'commenter': 'Arthur-Milchior', 'type': 'User'}, {'comment_id': 688982804, 'comment_body': ""It's a good practice to do it this way: https://stackoverflow.com/a/9245510"", 'comment_created': datetime.datetime(2021, 8, 14, 19, 23, 56, tzinfo=datetime.timezone.utc), 'commenter': 'ShridharGoel', 'type': 'User'}, {'comment_id': 688983689, 'comment_body': 'Updated.', 'comment_created': datetime.datetime(2021, 8, 14, 19, 34, 8, tzinfo=datetime.timezone.utc), 'commenter': 'ShridharGoel', 'type': 'User'}, {'comment_id': 688983696, 'comment_body': 'Updated.', 'comment_created': datetime.datetime(2021, 8, 14, 19, 34, 17, tzinfo=datetime.timezone.utc), 'commenter': 'ShridharGoel', 'type': 'User'}, {'comment_id': 688983724, 'comment_body': 'Updated.', 'comment_created': datetime.datetime(2021, 8, 14, 19, 34, 28, tzinfo=datetime.timezone.utc), 'commenter': 'ShridharGoel', 'type': 'User'}, {'comment_id': 688983738, 'comment_body': 'Updated.', 'comment_created': datetime.datetime(2021, 8, 14, 19, 34, 39, tzinfo=datetime.timezone.utc), 'commenter': 'ShridharGoel', 'type': 'User'}, {'comment_id': 688983809, 'comment_body': 'Sorry, missed the required updates here. Done now.', 'comment_created': datetime.datetime(2021, 8, 14, 19, 35, 21, tzinfo=datetime.timezone.utc), 'commenter': 'ShridharGoel', 'type': 'User'}, {'comment_id': 688983952, 'comment_body': 'Thanks, it should have been non-nullable. Updated.', 'comment_created': datetime.datetime(2021, 8, 14, 19, 36, 32, tzinfo=datetime.timezone.utc), 'commenter': 'ShridharGoel', 'type': 'User'}, {'comment_id': 688983960, 'comment_body': 'Updated.', 'comment_created': datetime.datetime(2021, 8, 14, 19, 36, 40, tzinfo=datetime.timezone.utc), 'commenter': 'ShridharGoel', 'type': 'User'}, {'comment_id': 688984182, 'comment_body': 'How can this be done here?', 'comment_created': datetime.datetime(2021, 8, 14, 19, 39, 21, tzinfo=datetime.timezone.utc), 'commenter': 'ShridharGoel', 'type': 'User'}, {'comment_id': 688986356, 'comment_body': 'thanks', 'comment_created': datetime.datetime(2021, 8, 14, 20, 3, 47, tzinfo=datetime.timezone.utc), 'commenter': 'Arthur-Milchior', 'type': 'User'}, {'comment_id': 688987599, 'comment_body': 'Thanks. I totally forgot the reason behind it. Nice to learn it again. Should really put activity documentation in anki', 'comment_created': datetime.datetime(2021, 8, 14, 20, 17, 25, tzinfo=datetime.timezone.utc), 'commenter': 'Arthur-Milchior', 'type': 'User'}, {'comment_id': 688987821, 'comment_body': 'http://commons.apache.org/proper/commons-lang/javadocs/api-2.4/org/apache/commons/lang/StringEscapeUtils.html#escapeJavaScript(java.lang.String)', 'comment_created': datetime.datetime(2021, 8, 14, 20, 20, 15, tzinfo=datetime.timezone.utc), 'commenter': 'Arthur-Milchior', 'type': 'User'}, {'comment_id': 688987867, 'comment_body': 'If you please, put this kind of question on discord; if I see them quickly, I can answer quicker, while reviewing a whole commit may take time', 'comment_created': datetime.datetime(2021, 8, 14, 20, 20, 42, tzinfo=datetime.timezone.utc), 'commenter': 'Arthur-Milchior', 'type': 'User'}, {'comment_id': 688988070, 'comment_body': 'How much time do you save?\r\nI would have imagined that, given that those are small files, and only shown once each, the time saved would be negligeable.\r\n\r\nStill nice to have.', 'comment_created': datetime.datetime(2021, 8, 14, 20, 22, 16, tzinfo=datetime.timezone.utc), 'commenter': 'Arthur-Milchior', 'type': 'User'}, {'comment_id': 689012585, 'comment_body': 'looks like it clones \r\n\r\nhttps://github.com/ankidroid/Anki-Android/blob/00abc059f60fd18ddc9e77d2425436a3cad044ed/AnkiDroid/src/main/java/com/ichi2/libanki/Utils.java#L663-L684 ', 'comment_created': datetime.datetime(2021, 8, 15, 1, 20, 17, tzinfo=datetime.timezone.utc), 'commenter': 'david-allison', 'type': 'User'}, {'comment_id': 689012717, 'comment_body': 'This needs to be in a `.use`, likely also in a helper method', 'comment_created': datetime.datetime(2021, 8, 15, 1, 21, 26, tzinfo=datetime.timezone.utc), 'commenter': 'david-allison', 'type': 'User'}, {'comment_id': 689012966, 'comment_body': 'can we either move this further into the startup flow, or return early? We risk having two startup flows at once here\r\n\r\nCould you unit test this? The startup process is complex, and mistakes will be made in future', 'comment_created': datetime.datetime(2021, 8, 15, 1, 24, 26, tzinfo=datetime.timezone.utc), 'commenter': 'david-allison', 'type': 'User'}, {'comment_id': 689099737, 'comment_body': 'Thanks, updated.', 'comment_created': datetime.datetime(2021, 8, 15, 14, 41, 5, tzinfo=datetime.timezone.utc), 'commenter': 'ShridharGoel', 'type': 'User'}, {'comment_id': 689107100, 'comment_body': ""Haven't checked the amount of difference."", 'comment_created': datetime.datetime(2021, 8, 15, 15, 38, 43, tzinfo=datetime.timezone.utc), 'commenter': 'ShridharGoel', 'type': 'User'}, {'comment_id': 689107117, 'comment_body': 'Updated.', 'comment_created': datetime.datetime(2021, 8, 15, 15, 38, 47, tzinfo=datetime.timezone.utc), 'commenter': 'ShridharGoel', 'type': 'User'}, {'comment_id': 689107143, 'comment_body': 'Updated.', 'comment_created': datetime.datetime(2021, 8, 15, 15, 38, 52, tzinfo=datetime.timezone.utc), 'commenter': 'ShridharGoel', 'type': 'User'}, {'comment_id': 689107170, 'comment_body': 'Updated.', 'comment_created': datetime.datetime(2021, 8, 15, 15, 38, 59, tzinfo=datetime.timezone.utc), 'commenter': 'ShridharGoel', 'type': 'User'}, {'comment_id': 689176384, 'comment_body': 'I think the method name is too vague. There are a lot of thing that correspond to ""replaceStrings"".\r\nI\'m having trouble finding something short descriptive name. Maybe something such as ""localizeSlide""\r\nCan you have something such as `@StringRes` in Kotlin, so that the the variable name is more description while keeping the information.\r\nE.g.  \r\n```kotlin\r\nprivate fun localizeSlide(webView: WebView, sentenceIdInHtml: String, sentenceResource: Int) {\r\n```\r\n\r\nAlso, since it uses no local state, maybe it can be static', 'comment_created': datetime.datetime(2021, 8, 16, 1, 3, 47, tzinfo=datetime.timezone.utc), 'commenter': 'Arthur-Milchior', 'type': 'User'}, {'comment_id': 689176904, 'comment_body': ""I think the line is too long to be easy to read.\r\nI'd state to be the output of escapeEcmaScript into a value"", 'comment_created': datetime.datetime(2021, 8, 16, 1, 4, 36, tzinfo=datetime.timezone.utc), 'commenter': 'Arthur-Milchior', 'type': 'User'}, {'comment_id': 689178036, 'comment_body': ""In any case, unless we find a very clear name, I'd go with a small javadoc"", 'comment_created': datetime.datetime(2021, 8, 16, 1, 6, 23, tzinfo=datetime.timezone.utc), 'commenter': 'Arthur-Milchior', 'type': 'User'}, {'comment_id': 834326179, 'comment_body': 'It looks to me like the CSS styles are repeated over and over, and we probably want them to have a consistent style so it should follow a DRY principle I think and be abstracted to a CSS file in assets. Is that possible? Then adding new content will be easier as well as there will be a small visually-consistent library of visual components that content creators may reference', 'comment_created': datetime.datetime(2022, 3, 24, 13, 47, 36, tzinfo=datetime.timezone.utc), 'commenter': 'mikehardy', 'type': 'User'}, {'comment_id': 834337943, 'comment_body': 'This feels really really dangerous to me - the code here is so specific and the result of so much trial and error. Is there any way to avoid the duplication? I would even be okay with a new abstract BaseAnkiActivity as a new super-class of AnkiActivity in a separate commit as a refactor, to pull this code out, then AnkiActivity and IntroductionActivity could inherit from it. That could probably clean up `handleStartupFailure` as well', 'comment_created': datetime.datetime(2022, 3, 24, 13, 58, 14, tzinfo=datetime.timezone.utc), 'commenter': 'mikehardy', 'type': 'User'}, {'comment_id': 835815328, 'comment_body': ""Maybe we should ping @prateek-singh-3212. Just in case you're willing to do this factorization, since it was your code"", 'comment_created': datetime.datetime(2022, 3, 26, 21, 36, 9, tzinfo=datetime.timezone.utc), 'commenter': 'Arthur-Milchior', 'type': 'User'}, {'comment_id': 835815508, 'comment_body': ""Implementor choice: I'd like an atomic commit which simply create `setUpReloadIntentAndFinish` and use it. This way, it'll be extremely easy to see that this atomic commit really do nothing, and separate this split from actual interesting behavior"", 'comment_created': datetime.datetime(2022, 3, 26, 21, 38, 23, tzinfo=datetime.timezone.utc), 'commenter': 'Arthur-Milchior', 'type': 'User'}, {'comment_id': 835815904, 'comment_body': 'Can you please add a documentation indicating what occurs in this case. ', 'comment_created': datetime.datetime(2022, 3, 26, 21, 44, 2, tzinfo=datetime.timezone.utc), 'commenter': 'Arthur-Milchior', 'type': 'User'}, {'comment_id': 835816087, 'comment_body': 'Agree with Mike\r\nAt the very least, it would be required to explain why duplication is required instead of factorization', 'comment_created': datetime.datetime(2022, 3, 26, 21, 46, 31, tzinfo=datetime.timezone.utc), 'commenter': 'Arthur-Milchior', 'type': 'User'}, {'comment_id': 835816649, 'comment_body': 'Why do we need a label. \r\nNote that the same question holds in a lot of part of the code.\r\nThis is extra work for lot of translators. And it does not seems that it can ever be shown to the users since this activity can not answer to any outside intent nor be shown as an android icon', 'comment_created': datetime.datetime(2022, 3, 26, 21, 51, 27, tzinfo=datetime.timezone.utc), 'commenter': 'Arthur-Milchior', 'type': 'User'}, {'comment_id': 835896999, 'comment_body': 'It seemed difficult to prevent duplication here since `IntroductionActivity` needs to inherit from `AppIntro`. Any suggestions on how to use an interface here or some other way to avoid duplication? Also, the reason is mentioned in the next line.', 'comment_created': datetime.datetime(2022, 3, 27, 12, 3, 23, tzinfo=datetime.timezone.utc), 'commenter': 'ShridharGoel', 'type': 'User'}, {'comment_id': 835948658, 'comment_body': ""On my computer, it seems there is whitespace. But I can't see it on github. "", 'comment_created': datetime.datetime(2022, 3, 27, 19, 2, 58, tzinfo=datetime.timezone.utc), 'commenter': 'Arthur-Milchior', 'type': 'User'}, {'comment_id': 835948895, 'comment_body': ""Shouldn't gradle also contains a change to depends on AppIntro?\r\nI'd expect it to be necessary to depends on AppIntro. \r\nAt least I can't compile when downloading this branch, and I assume it may be the issue"", 'comment_created': datetime.datetime(2022, 3, 27, 19, 5, 2, tzinfo=datetime.timezone.utc), 'commenter': 'Arthur-Milchior', 'type': 'User'}, {'comment_id': 837077082, 'comment_body': ""Seems like it got removed while resolving conflicts, I'll add it back."", 'comment_created': datetime.datetime(2022, 3, 29, 5, 48, 49, tzinfo=datetime.timezone.utc), 'commenter': 'ShridharGoel', 'type': 'User'}]","[{'commit_sha': 'f5ecf837cdcb76087c1bec4779821b40f03b975e', 'committer_username': 'prateek-singh-3212', 'committer_name': 'Prateek Singh', 'committer_email': None, 'commit_date': datetime.datetime(2020, 12, 22, 16, 57, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'be5bf1b08824486680821563868b3c0e26abefbf', 'committer_username': 'ShridharGoel', 'committer_name': 'Shridhar Goel', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 18, 13, 15, 13, tzinfo=datetime.timezone.utc)}]",Shridhar Goel,35566748,,User,,51,,0,0

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
7716883,Anki-Android,ankidroid/Anki-Android,Kotlin,2173,8299,155,523,19504,284,17,32,"[{'id': 1704584812, 'number': 15375, 'closed': datetime.datetime(2024, 3, 16, 10, 45, 33, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 1, 31, 17, 55, 56, tzinfo=datetime.timezone.utc), 'time_taken': 3862177.0, 'time_delta': '44 days, 16:49:37', 'additions': 43, 'deletions': 28, 'state': 'closed'}, {'id': 1105237482, 'number': 12763, 'closed': datetime.datetime(2022, 12, 9, 12, 22, 22, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 10, 31, 11, 48, 49, tzinfo=datetime.timezone.utc), 'time_taken': 3371613.0, 'time_delta': '39 days, 0:33:33', 'additions': 56, 'deletions': 0, 'state': 'closed'}, {'id': 1059394419, 'number': 12431, 'closed': datetime.datetime(2022, 9, 18, 15, 27, 11, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 9, 17, 20, 9, 17, tzinfo=datetime.timezone.utc), 'time_taken': 69474.0, 'time_delta': '19:17:54', 'additions': 0, 'deletions': 11, 'state': 'closed'}, {'id': 1059393379, 'number': 12430, 'closed': datetime.datetime(2022, 9, 17, 21, 30, 9, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 9, 17, 20, 2, 51, tzinfo=datetime.timezone.utc), 'time_taken': 5238.0, 'time_delta': '1:27:18', 'additions': 72, 'deletions': 164, 'state': 'closed'}, {'id': 1058830657, 'number': 12419, 'closed': datetime.datetime(2022, 11, 26, 5, 36, 36, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 9, 16, 16, 28, 57, tzinfo=datetime.timezone.utc), 'time_taken': 6095259.0, 'time_delta': '70 days, 13:07:39', 'additions': 75, 'deletions': 11, 'state': 'closed'}, {'id': 1053266408, 'number': 12380, 'closed': datetime.datetime(2022, 9, 12, 20, 48, 57, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 9, 12, 12, 26, 16, tzinfo=datetime.timezone.utc), 'time_taken': 30161.0, 'time_delta': '8:22:41', 'additions': 2, 'deletions': 5, 'state': 'closed'}, {'id': 1046359996, 'number': 12321, 'closed': datetime.datetime(2022, 9, 6, 5, 35, 24, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 9, 5, 13, 0, 3, tzinfo=datetime.timezone.utc), 'time_taken': 59721.0, 'time_delta': '16:35:21', 'additions': 4, 'deletions': 1, 'state': 'closed'}, {'id': 1045243653, 'number': 12290, 'closed': datetime.datetime(2022, 9, 5, 13, 1, 24, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 9, 2, 20, 7, 34, tzinfo=datetime.timezone.utc), 'time_taken': 233630.0, 'time_delta': '2 days, 16:53:50', 'additions': 0, 'deletions': 1, 'state': 'closed'}, {'id': 969729414, 'number': 11646, 'closed': datetime.datetime(2022, 7, 5, 16, 37, 17, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 6, 16, 19, 55, 17, tzinfo=datetime.timezone.utc), 'time_taken': 1629720.0, 'time_delta': '18 days, 20:42:00', 'additions': 1133, 'deletions': 1052, 'state': 'closed'}, {'id': 924656318, 'number': 11188, 'closed': datetime.datetime(2022, 5, 6, 21, 42, 12, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 4, 30, 13, 11, 3, tzinfo=datetime.timezone.utc), 'time_taken': 549069.0, 'time_delta': '6 days, 8:31:09', 'additions': 63, 'deletions': 62, 'state': 'closed'}, {'id': 891131340, 'number': 10642, 'closed': datetime.datetime(2022, 4, 13, 14, 44, 32, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 3, 27, 20, 24, 21, tzinfo=datetime.timezone.utc), 'time_taken': 1448411.0, 'time_delta': '16 days, 18:20:11', 'additions': 515, 'deletions': 621, 'state': 'closed'}, {'id': 885818762, 'number': 10602, 'closed': datetime.datetime(2022, 3, 23, 13, 50, 14, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 3, 22, 9, 38, 16, tzinfo=datetime.timezone.utc), 'time_taken': 101518.0, 'time_delta': '1 day, 4:11:58', 'additions': 587, 'deletions': 640, 'state': 'closed'}, {'id': 881175781, 'number': 10548, 'closed': datetime.datetime(2022, 3, 16, 10, 49, 13, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 3, 16, 10, 22, 28, tzinfo=datetime.timezone.utc), 'time_taken': 1605.0, 'time_delta': '0:26:45', 'additions': 2, 'deletions': 2, 'state': 'closed'}, {'id': 881168104, 'number': 10547, 'closed': datetime.datetime(2022, 3, 16, 10, 22, 16, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 3, 16, 10, 14, 45, tzinfo=datetime.timezone.utc), 'time_taken': 451.0, 'time_delta': '0:07:31', 'additions': 2, 'deletions': 2, 'state': 'closed'}, {'id': 880970024, 'number': 10544, 'closed': datetime.datetime(2022, 3, 16, 16, 58, 24, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 3, 16, 5, 54, 39, tzinfo=datetime.timezone.utc), 'time_taken': 39825.0, 'time_delta': '11:03:45', 'additions': 2, 'deletions': 1, 'state': 'closed'}, {'id': 880548925, 'number': 10536, 'closed': datetime.datetime(2022, 3, 22, 14, 44, 34, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 3, 15, 19, 25, 43, tzinfo=datetime.timezone.utc), 'time_taken': 587931.0, 'time_delta': '6 days, 19:18:51', 'additions': 289, 'deletions': 360, 'state': 'closed'}, {'id': 862783342, 'number': 10395, 'closed': datetime.datetime(2022, 3, 11, 22, 1, 52, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 2, 24, 19, 49, 56, tzinfo=datetime.timezone.utc), 'time_taken': 1303916.0, 'time_delta': '15 days, 2:11:56', 'additions': 119, 'deletions': 42, 'state': 'closed'}, {'id': 812731050, 'number': 10069, 'closed': datetime.datetime(2022, 8, 23, 17, 39, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 1, 2, 13, 10, 10, tzinfo=datetime.timezone.utc), 'time_taken': 20147330.0, 'time_delta': '233 days, 4:28:50', 'additions': 21, 'deletions': 10, 'state': 'closed'}, {'id': 812586022, 'number': 10047, 'closed': datetime.datetime(2022, 6, 24, 15, 41, 2, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 1, 1, 14, 43, 25, tzinfo=datetime.timezone.utc), 'time_taken': 15037057.0, 'time_delta': '174 days, 0:57:37', 'additions': 9, 'deletions': 2, 'state': 'closed'}, {'id': 812357558, 'number': 10032, 'closed': datetime.datetime(2022, 1, 2, 18, 42, 20, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 12, 31, 12, 31, 36, tzinfo=datetime.timezone.utc), 'time_taken': 195044.0, 'time_delta': '2 days, 6:10:44', 'additions': 83, 'deletions': 1, 'state': 'closed'}, {'id': 812293186, 'number': 10031, 'closed': datetime.datetime(2022, 6, 24, 16, 46, 16, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 12, 31, 8, 43, 22, tzinfo=datetime.timezone.utc), 'time_taken': 15148974.0, 'time_delta': '175 days, 8:02:54', 'additions': 2, 'deletions': 1, 'state': 'closed'}, {'id': 811830268, 'number': 10028, 'closed': datetime.datetime(2021, 12, 31, 12, 30, 36, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 12, 30, 7, 50, 56, tzinfo=datetime.timezone.utc), 'time_taken': 103180.0, 'time_delta': '1 day, 4:39:40', 'additions': 2, 'deletions': 0, 'state': 'closed'}, {'id': 811656804, 'number': 10027, 'closed': datetime.datetime(2022, 6, 24, 17, 38, 44, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 12, 29, 20, 8, 18, tzinfo=datetime.timezone.utc), 'time_taken': 15283826.0, 'time_delta': '176 days, 21:30:26', 'additions': 3419, 'deletions': 26, 'state': 'closed'}, {'id': 809904591, 'number': 10023, 'closed': datetime.datetime(2021, 12, 28, 12, 25, 23, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 12, 25, 15, 11, 52, tzinfo=datetime.timezone.utc), 'time_taken': 249211.0, 'time_delta': '2 days, 21:13:31', 'additions': 2, 'deletions': 4, 'state': 'closed'}, {'id': 769516166, 'number': 9738, 'closed': datetime.datetime(2021, 10, 30, 13, 28, 5, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 10, 29, 20, 2, 3, tzinfo=datetime.timezone.utc), 'time_taken': 62762.0, 'time_delta': '17:26:02', 'additions': 82, 'deletions': 74, 'state': 'closed'}, {'id': 769497622, 'number': 9737, 'closed': datetime.datetime(2021, 10, 30, 13, 27, 4, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 10, 29, 19, 28, 25, tzinfo=datetime.timezone.utc), 'time_taken': 64719.0, 'time_delta': '17:58:39', 'additions': 58, 'deletions': 88, 'state': 'closed'}, {'id': 766833940, 'number': 9718, 'closed': datetime.datetime(2022, 12, 18, 10, 52, 42, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 10, 26, 20, 51, 12, tzinfo=datetime.timezone.utc), 'time_taken': 36079290.0, 'time_delta': '417 days, 14:01:30', 'additions': 3, 'deletions': 0, 'state': 'closed'}, {'id': 760335807, 'number': 9662, 'closed': datetime.datetime(2021, 10, 18, 14, 20, 19, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 10, 18, 10, 57, 43, tzinfo=datetime.timezone.utc), 'time_taken': 12156.0, 'time_delta': '3:22:36', 'additions': 2, 'deletions': 0, 'state': 'closed'}, {'id': 759806555, 'number': 9654, 'closed': datetime.datetime(2021, 10, 17, 14, 4, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 10, 17, 10, 10, 6, tzinfo=datetime.timezone.utc), 'time_taken': 14034.0, 'time_delta': '3:53:54', 'additions': 8, 'deletions': 7, 'state': 'closed'}, {'id': 759650211, 'number': 9649, 'closed': datetime.datetime(2021, 10, 16, 12, 58, 30, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 10, 16, 12, 23, 33, tzinfo=datetime.timezone.utc), 'time_taken': 2097.0, 'time_delta': '0:34:57', 'additions': 89, 'deletions': 98, 'state': 'closed'}, {'id': 759647887, 'number': 9648, 'closed': datetime.datetime(2021, 10, 16, 22, 2, 37, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 10, 16, 12, 5, 57, tzinfo=datetime.timezone.utc), 'time_taken': 35800.0, 'time_delta': '9:56:40', 'additions': 124, 'deletions': 142, 'state': 'closed'}, {'id': 748142343, 'number': 9578, 'closed': datetime.datetime(2021, 10, 6, 16, 40, 57, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 10, 2, 15, 12, 3, tzinfo=datetime.timezone.utc), 'time_taken': 350934.0, 'time_delta': '4 days, 1:28:54', 'additions': 2, 'deletions': 0, 'state': 'closed'}, {'id': 727254491, 'number': 9495, 'closed': datetime.datetime(2021, 10, 4, 17, 0, 45, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 9, 4, 15, 8, 39, tzinfo=datetime.timezone.utc), 'time_taken': 2598726.0, 'time_delta': '30 days, 1:52:06', 'additions': 53, 'deletions': 58, 'state': 'closed'}, {'id': 727253544, 'number': 9494, 'closed': datetime.datetime(2021, 10, 4, 17, 0, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 9, 4, 15, 1, 31, tzinfo=datetime.timezone.utc), 'time_taken': 2599109.0, 'time_delta': '30 days, 1:58:29', 'additions': 139, 'deletions': 178, 'state': 'closed'}, {'id': 725974761, 'number': 9481, 'closed': datetime.datetime(2021, 10, 2, 12, 54, 11, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 9, 2, 14, 26, 12, tzinfo=datetime.timezone.utc), 'time_taken': 2586479.0, 'time_delta': '29 days, 22:27:59', 'additions': 160, 'deletions': 185, 'state': 'closed'}, {'id': 725952736, 'number': 9480, 'closed': datetime.datetime(2021, 10, 1, 18, 15, 25, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 9, 2, 14, 6, 35, tzinfo=datetime.timezone.utc), 'time_taken': 2520530.0, 'time_delta': '29 days, 4:08:50', 'additions': 291, 'deletions': 170, 'state': 'closed'}, {'id': 712527241, 'number': 9407, 'closed': datetime.datetime(2021, 8, 27, 1, 58, 5, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 13, 17, 38, 41, tzinfo=datetime.timezone.utc), 'time_taken': 1153164.0, 'time_delta': '13 days, 8:19:24', 'additions': 8, 'deletions': 2, 'state': 'closed'}, {'id': 692441915, 'number': 9291, 'closed': datetime.datetime(2021, 8, 5, 16, 14, 38, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 19, 9, 36, 14, tzinfo=datetime.timezone.utc), 'time_taken': 1492704.0, 'time_delta': '17 days, 6:38:24', 'additions': 259, 'deletions': 0, 'state': 'closed'}, {'id': 691963534, 'number': 9288, 'closed': datetime.datetime(2021, 7, 19, 14, 3, 38, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 17, 17, 28, 45, tzinfo=datetime.timezone.utc), 'time_taken': 160493.0, 'time_delta': '1 day, 20:34:53', 'additions': 29, 'deletions': 14, 'state': 'closed'}, {'id': 691670351, 'number': 9285, 'closed': datetime.datetime(2021, 7, 16, 18, 58, 14, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 16, 18, 26, 31, tzinfo=datetime.timezone.utc), 'time_taken': 1903.0, 'time_delta': '0:31:43', 'additions': 0, 'deletions': 1, 'state': 'closed'}, {'id': 691289304, 'number': 9280, 'closed': datetime.datetime(2021, 7, 17, 15, 15, 6, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 16, 8, 17, 55, tzinfo=datetime.timezone.utc), 'time_taken': 111431.0, 'time_delta': '1 day, 6:57:11', 'additions': 45, 'deletions': 7, 'state': 'closed'}, {'id': 687595204, 'number': 9253, 'closed': datetime.datetime(2021, 7, 16, 13, 36, 19, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 12, 7, 46, 4, tzinfo=datetime.timezone.utc), 'time_taken': 366615.0, 'time_delta': '4 days, 5:50:15', 'additions': 12, 'deletions': 0, 'state': 'closed'}, {'id': 687387232, 'number': 9250, 'closed': datetime.datetime(2021, 7, 16, 14, 44, 6, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 11, 19, 57, 48, tzinfo=datetime.timezone.utc), 'time_taken': 413178.0, 'time_delta': '4 days, 18:46:18', 'additions': 72, 'deletions': 30, 'state': 'closed'}, {'id': 686538990, 'number': 9229, 'closed': datetime.datetime(2021, 8, 5, 20, 1, 7, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 9, 6, 50, 43, tzinfo=datetime.timezone.utc), 'time_taken': 2380224.0, 'time_delta': '27 days, 13:10:24', 'additions': 859, 'deletions': 4, 'state': 'closed'}, {'id': 678464364, 'number': 9153, 'closed': datetime.datetime(2021, 6, 27, 9, 55, 51, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 27, 6, 36, 20, tzinfo=datetime.timezone.utc), 'time_taken': 11971.0, 'time_delta': '3:19:31', 'additions': 1, 'deletions': 0, 'state': 'closed'}, {'id': 678392301, 'number': 9151, 'closed': datetime.datetime(2021, 6, 26, 22, 45, 33, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 26, 18, 8, 37, tzinfo=datetime.timezone.utc), 'time_taken': 16616.0, 'time_delta': '4:36:56', 'additions': 182, 'deletions': 0, 'state': 'closed'}, {'id': 677328339, 'number': 9143, 'closed': datetime.datetime(2021, 6, 24, 23, 14, 27, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 24, 18, 7, 5, tzinfo=datetime.timezone.utc), 'time_taken': 18442.0, 'time_delta': '5:07:22', 'additions': 12, 'deletions': 1, 'state': 'closed'}, {'id': 674637128, 'number': 9130, 'closed': None, 'created': datetime.datetime(2021, 6, 21, 15, 5, 26, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 1937, 'deletions': 8, 'state': 'open'}, {'id': 666212933, 'number': 9092, 'closed': datetime.datetime(2021, 8, 11, 21, 6, 22, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 9, 18, 52, 17, tzinfo=datetime.timezone.utc), 'time_taken': 5451245.0, 'time_delta': '63 days, 2:14:05', 'additions': 629, 'deletions': 2, 'state': 'closed'}, {'id': 661724636, 'number': 9073, 'closed': datetime.datetime(2021, 7, 4, 16, 14, 17, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 4, 12, 28, 39, tzinfo=datetime.timezone.utc), 'time_taken': 2605538.0, 'time_delta': '30 days, 3:45:38', 'additions': 228, 'deletions': 1, 'state': 'closed'}, {'id': 661108685, 'number': 9062, 'closed': datetime.datetime(2021, 6, 25, 4, 20, 5, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 3, 17, 52, 6, tzinfo=datetime.timezone.utc), 'time_taken': 1852079.0, 'time_delta': '21 days, 10:27:59', 'additions': 20, 'deletions': 8, 'state': 'closed'}, {'id': 661034094, 'number': 9060, 'closed': datetime.datetime(2021, 6, 20, 3, 53, 36, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 3, 16, 5, 6, tzinfo=datetime.timezone.utc), 'time_taken': 1424910.0, 'time_delta': '16 days, 11:48:30', 'additions': 1, 'deletions': 9, 'state': 'closed'}, {'id': 660582127, 'number': 9057, 'closed': datetime.datetime(2021, 6, 20, 3, 51, 20, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 3, 5, 30, 27, tzinfo=datetime.timezone.utc), 'time_taken': 1462853.0, 'time_delta': '16 days, 22:20:53', 'additions': 1, 'deletions': 5, 'state': 'closed'}, {'id': 660026419, 'number': 9047, 'closed': datetime.datetime(2021, 6, 20, 3, 44, 58, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 2, 12, 36, 15, tzinfo=datetime.timezone.utc), 'time_taken': 1523323.0, 'time_delta': '17 days, 15:08:43', 'additions': 17, 'deletions': 1, 'state': 'closed'}, {'id': 658937617, 'number': 9038, 'closed': datetime.datetime(2021, 6, 1, 14, 13, 15, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 1, 11, 53, 1, tzinfo=datetime.timezone.utc), 'time_taken': 8414.0, 'time_delta': '2:20:14', 'additions': 18, 'deletions': 0, 'state': 'closed'}, {'id': 658765539, 'number': 9036, 'closed': datetime.datetime(2021, 6, 2, 18, 25, 5, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 1, 7, 48, 50, tzinfo=datetime.timezone.utc), 'time_taken': 124575.0, 'time_delta': '1 day, 10:36:15', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 658749885, 'number': 9033, 'closed': datetime.datetime(2021, 6, 1, 18, 3, 44, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 1, 7, 27, 17, tzinfo=datetime.timezone.utc), 'time_taken': 38187.0, 'time_delta': '10:36:27', 'additions': 3, 'deletions': 3, 'state': 'closed'}, {'id': 658346770, 'number': 9028, 'closed': datetime.datetime(2021, 6, 1, 16, 19, 32, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 5, 31, 14, 14, 17, tzinfo=datetime.timezone.utc), 'time_taken': 93915.0, 'time_delta': '1 day, 2:05:15', 'additions': 30, 'deletions': 0, 'state': 'closed'}, {'id': 657670184, 'number': 9015, 'closed': datetime.datetime(2021, 6, 2, 4, 0, 12, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 5, 30, 11, 10, 36, tzinfo=datetime.timezone.utc), 'time_taken': 233376.0, 'time_delta': '2 days, 16:49:36', 'additions': 287, 'deletions': 338, 'state': 'closed'}, {'id': 657492018, 'number': 9006, 'closed': datetime.datetime(2021, 5, 29, 21, 3, 7, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 5, 29, 15, 58, 32, tzinfo=datetime.timezone.utc), 'time_taken': 18275.0, 'time_delta': '5:04:35', 'additions': 5, 'deletions': 0, 'state': 'closed'}, {'id': 656641311, 'number': 8999, 'closed': datetime.datetime(2021, 5, 28, 17, 6, 43, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 5, 28, 15, 6, 7, tzinfo=datetime.timezone.utc), 'time_taken': 7236.0, 'time_delta': '2:00:36', 'additions': 18, 'deletions': 21, 'state': 'closed'}, {'id': 656581834, 'number': 8998, 'closed': datetime.datetime(2021, 6, 2, 4, 2, 34, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 5, 28, 14, 27, 1, tzinfo=datetime.timezone.utc), 'time_taken': 394533.0, 'time_delta': '4 days, 13:35:33', 'additions': 23, 'deletions': 1, 'state': 'closed'}, {'id': 654159269, 'number': 8968, 'closed': datetime.datetime(2021, 5, 28, 18, 12, 34, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 5, 26, 19, 27, 34, tzinfo=datetime.timezone.utc), 'time_taken': 168300.0, 'time_delta': '1 day, 22:45:00', 'additions': 38, 'deletions': 15, 'state': 'closed'}, {'id': 653809300, 'number': 8962, 'closed': datetime.datetime(2021, 9, 9, 0, 51, 56, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 5, 26, 14, 1, 25, tzinfo=datetime.timezone.utc), 'time_taken': 9111031.0, 'time_delta': '105 days, 10:50:31', 'additions': 4563, 'deletions': 4947, 'state': 'closed'}, {'id': 649322279, 'number': 8894, 'closed': datetime.datetime(2021, 5, 22, 14, 20, 47, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 5, 20, 19, 3, 30, tzinfo=datetime.timezone.utc), 'time_taken': 155837.0, 'time_delta': '1 day, 19:17:17', 'additions': 13, 'deletions': 10, 'state': 'closed'}, {'id': 628648000, 'number': 8756, 'closed': datetime.datetime(2021, 6, 2, 18, 34, 2, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 5, 2, 17, 39, 10, tzinfo=datetime.timezone.utc), 'time_taken': 2681692.0, 'time_delta': '31 days, 0:54:52', 'additions': 23, 'deletions': 4, 'state': 'closed'}, {'id': 628484523, 'number': 8750, 'closed': datetime.datetime(2021, 6, 27, 14, 26, 56, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 5, 1, 19, 47, 33, tzinfo=datetime.timezone.utc), 'time_taken': 4905563.0, 'time_delta': '56 days, 18:39:23', 'additions': 130, 'deletions': 33, 'state': 'closed'}, {'id': 612926944, 'number': 8557, 'closed': datetime.datetime(2021, 4, 14, 12, 35, 57, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 4, 10, 16, 33, 41, tzinfo=datetime.timezone.utc), 'time_taken': 331336.0, 'time_delta': '3 days, 20:02:16', 'additions': 53, 'deletions': 0, 'state': 'closed'}, {'id': 611571236, 'number': 8518, 'closed': datetime.datetime(2021, 4, 14, 13, 43, 2, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 4, 8, 13, 44, 2, tzinfo=datetime.timezone.utc), 'time_taken': 518340.0, 'time_delta': '5 days, 23:59:00', 'additions': 66, 'deletions': 16, 'state': 'closed'}, {'id': 609082055, 'number': 8485, 'closed': datetime.datetime(2021, 5, 1, 14, 26, 19, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 4, 5, 17, 22, 40, tzinfo=datetime.timezone.utc), 'time_taken': 2235819.0, 'time_delta': '25 days, 21:03:39', 'additions': 20, 'deletions': 2, 'state': 'closed'}, {'id': 608533736, 'number': 8468, 'closed': datetime.datetime(2021, 4, 24, 14, 25, 44, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 4, 4, 11, 52, 9, tzinfo=datetime.timezone.utc), 'time_taken': 1737215.0, 'time_delta': '20 days, 2:33:35', 'additions': 38, 'deletions': 20, 'state': 'closed'}, {'id': 608518295, 'number': 8465, 'closed': datetime.datetime(2021, 4, 8, 3, 54, 3, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 4, 4, 9, 44, 30, tzinfo=datetime.timezone.utc), 'time_taken': 324573.0, 'time_delta': '3 days, 18:09:33', 'additions': 32, 'deletions': 8, 'state': 'closed'}, {'id': 608506115, 'number': 8463, 'closed': datetime.datetime(2021, 4, 4, 13, 29, 17, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 4, 4, 8, 1, tzinfo=datetime.timezone.utc), 'time_taken': 19697.0, 'time_delta': '5:28:17', 'additions': 8, 'deletions': 1, 'state': 'closed'}]"
