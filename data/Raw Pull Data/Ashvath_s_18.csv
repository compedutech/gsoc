pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
433179504,AP_Scripting: get_output_scaled method,Allow lua scripting to access get_output_scaled method,True,14585,https://api.github.com/repos/ArduPilot/ardupilot/pulls/14585,https://github.com/ArduPilot/ardupilot/pull/14585,closed,1,0,1,1,1,0,0,0,[],2020-06-11 15:54:36+00:00,2020-06-12 04:48:03+00:00,46407.0,12:53:27,[],"[{'commit_sha': '57d2d45dfa8c5f2cbc773420de0f74af1d40ccda', 'committer_username': 'ashvath100', 'committer_name': 'ashvath', 'committer_email': 'ashvath100@gmail.com', 'commit_date': datetime.datetime(2018, 1, 28, 16, 58, 25, tzinfo=datetime.timezone.utc)}]",ashvath,35897713,ashvath100@gmail.com,User,,19,,11,20
433179504,AP_Scripting: get_output_scaled method,Allow lua scripting to access get_output_scaled method,True,14585,https://api.github.com/repos/ArduPilot/ardupilot/pulls/14585,https://github.com/ArduPilot/ardupilot/pull/14585,closed,1,0,1,1,1,0,0,0,[],2020-06-11 15:54:36+00:00,2020-06-12 04:48:03+00:00,46407.0,12:53:27,[],"[{'commit_sha': '57d2d45dfa8c5f2cbc773420de0f74af1d40ccda', 'committer_username': 'ashvath100', 'committer_name': 'ashvath', 'committer_email': 'ashvath100@gmail.com', 'commit_date': datetime.datetime(2018, 1, 28, 16, 58, 25, tzinfo=datetime.timezone.utc)}]",ashvath,35897713,ashvath100@gmail.com,User,,19,,11,20
455262573,Rover: Walking robot support,"**This PR adds support for walking robots**

 [Demo video](https://youtu.be/79nVlsYmy2U)

**Steps to run simulation :** 
1. Ensure the PC is runing Ubuntu 18.04 (other versions may work but this has not been confirmed yet)
2. pip3 install pybullet
3. cd to the ardupilot/Rover directory
4. create a ""scripts"" directory and copy ""[/libraries/AP_Scripting/examples/quadruped.lua](https://github.com/ashvath100/ardupilot/blob/walkingrobot_support/libraries/AP_Scripting/examples/quadruped.lua)"" into it
5. start SITL using, ""../Tools/autotest/simvehicle.py --map --console -D -f JSON""
6. Enable scripting with ""param set SCR_ENABLE 1"" and then restart SITL
7.  From`ardupilot/libraries/SITL/examples/JSON/pybullet/`

     run `python3 walking_robot.py`

**Control inputs :** 
- Channel 1: Yaw input

- Channel 3: Throttle input 

- Channel 6: Gait select (switch)
rc 6 > 1500 : two legs alternating gait 
rc 6 < 1500 : one leg wave gait 

- Channel 7: Control mode selector (3 way switch)
rc 7 = 1500 : Height control 
rc 7 >1500 : Rotation control
rc 7 < 1500 : Position control

In Height control
- Channel 2: height input

In Rotation control 
- Channel 2: Roll input 
- Channel 4: Pitch input

In Position control
- Channel 2: X axis input 
- Channel 4: Y axis input

**To do:**
1. add Stabilize mode
2. Hardware testing  

",False,14884,https://api.github.com/repos/ArduPilot/ardupilot/pulls/14884,https://github.com/ArduPilot/ardupilot/pull/14884,closed,1290,4,20,12,4,9,3,0,"[{'name': 'Rover'}, {'name': 'SITL'}, {'name': 'GSoC'}]",2020-07-22 17:42:46+00:00,2020-09-01 00:37:32+00:00,3480886.0,"40 days, 6:54:46","[{'comment_id': 459242089, 'comment_body': 'I think this is a good way to do this actually.  Let\'s just change the ""selector"" to be an enum.', 'comment_created': datetime.datetime(2020, 7, 23, 6, 40, 6, tzinfo=datetime.timezone.utc), 'commenter': 'rmackay9', 'type': 'User'}, {'comment_id': 459242528, 'comment_body': 'small whitespace issue here', 'comment_created': datetime.datetime(2020, 7, 23, 6, 41, 18, tzinfo=datetime.timezone.utc), 'commenter': 'rmackay9', 'type': 'User'}, {'comment_id': 459242664, 'comment_body': 'extra blank line we can remove here.', 'comment_created': datetime.datetime(2020, 7, 23, 6, 41, 40, tzinfo=datetime.timezone.utc), 'commenter': 'rmackay9', 'type': 'User'}, {'comment_id': 459242989, 'comment_body': 'If we are going to have different walking bots mode we should consider an enum.  Using a float is a bit unusual for a ""mode"".', 'comment_created': datetime.datetime(2020, 7, 23, 6, 42, 32, tzinfo=datetime.timezone.utc), 'commenter': 'rmackay9', 'type': 'User'}, {'comment_id': 459243149, 'comment_body': 'small white space issue here (extra space)', 'comment_created': datetime.datetime(2020, 7, 23, 6, 42, 57, tzinfo=datetime.timezone.utc), 'commenter': 'rmackay9', 'type': 'User'}, {'comment_id': 459244394, 'comment_body': 'enum with a switch !', 'comment_created': datetime.datetime(2020, 7, 23, 6, 46, 19, tzinfo=datetime.timezone.utc), 'commenter': 'khancyr', 'type': 'User'}, {'comment_id': 459246936, 'comment_body': 'hopefully we can make this first argument use the enum value as well', 'comment_created': datetime.datetime(2020, 7, 23, 6, 52, 56, tzinfo=datetime.timezone.utc), 'commenter': 'rmackay9', 'type': 'User'}, {'comment_id': 459247883, 'comment_body': 'we should be more consistent about case. So for example ""X_SPEED"" is all capitals while other variables use camel case (like GaitType).  In ArduPilot we generally use all small letters with underscore between words.  So it would be ""x_speed"" and ""gait_type"".', 'comment_created': datetime.datetime(2020, 7, 23, 6, 55, 24, tzinfo=datetime.timezone.utc), 'commenter': 'rmackay9', 'type': 'User'}, {'comment_id': 459610296, 'comment_body': '`enum class` specifically :)', 'comment_created': datetime.datetime(2020, 7, 23, 17, 25, 52, tzinfo=datetime.timezone.utc), 'commenter': 'WickedShell', 'type': 'User'}]","[{'commit_sha': '10032ce50ff930e1124d7ee029592255d107bf3d', 'committer_username': 'ashvath100', 'committer_name': 'ashvath', 'committer_email': 'ashvath100@gmail.com', 'commit_date': datetime.datetime(2018, 1, 28, 16, 58, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '874309c214878d50d2c748780fdeea86f50d0548', 'committer_username': 'ashvath100', 'committer_name': 'ashvath', 'committer_email': 'ashvath100@gmail.com', 'commit_date': datetime.datetime(2018, 1, 28, 16, 58, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '831c4b01f7fe5e14325ecbd4f4ea7ac66f151b67', 'committer_username': 'ashvath100', 'committer_name': 'ashvath', 'committer_email': 'ashvath100@gmail.com', 'commit_date': datetime.datetime(2018, 1, 28, 16, 58, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f4832ebb90a67e9a3b63d68c2dcb488a17829346', 'committer_username': 'ashvath100', 'committer_name': 'ashvath', 'committer_email': 'ashvath100@gmail.com', 'commit_date': datetime.datetime(2018, 1, 28, 16, 58, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '61ff321803114782b3f815016116f6a36aa9b175', 'committer_username': 'ashvath100', 'committer_name': 'ashvath', 'committer_email': 'ashvath100@gmail.com', 'commit_date': datetime.datetime(2018, 1, 28, 16, 58, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'acb6b76fecb61fc74123a954470e30105c7b0d38', 'committer_username': 'ashvath100', 'committer_name': 'ashvath', 'committer_email': 'ashvath100@gmail.com', 'commit_date': datetime.datetime(2018, 1, 28, 16, 58, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0fca19a43858be27c08184e2559fa50febc31035', 'committer_username': 'ashvath100', 'committer_name': 'ashvath', 'committer_email': 'ashvath100@gmail.com', 'commit_date': datetime.datetime(2018, 1, 28, 16, 58, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b04faf149e0703b0a33971998912e431592cb089', 'committer_username': 'ashvath100', 'committer_name': 'ashvath', 'committer_email': 'ashvath100@gmail.com', 'commit_date': datetime.datetime(2018, 1, 28, 16, 58, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a6f7453bc36651346752827986aa19c5837fc5f1', 'committer_username': 'ashvath100', 'committer_name': 'ashvath', 'committer_email': 'ashvath100@gmail.com', 'commit_date': datetime.datetime(2018, 1, 28, 16, 58, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '95ac91f8f60a82612329da046453051eaf5ac5f6', 'committer_username': 'ashvath100', 'committer_name': 'ashvath', 'committer_email': 'ashvath100@gmail.com', 'commit_date': datetime.datetime(2018, 1, 28, 16, 58, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9b28fce3335fe71d6ab6c47b34ffe15a959c1057', 'committer_username': 'ashvath100', 'committer_name': 'ashvath', 'committer_email': 'ashvath100@gmail.com', 'commit_date': datetime.datetime(2018, 1, 28, 16, 58, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9d8d718ce563d68bf0480fef476c4b65d1629c28', 'committer_username': 'ashvath100', 'committer_name': 'ashvath', 'committer_email': 'ashvath100@gmail.com', 'commit_date': datetime.datetime(2018, 1, 28, 16, 58, 25, tzinfo=datetime.timezone.utc)}]",ashvath,35897713,ashvath100@gmail.com,User,,19,,11,20
455262573,Rover: Walking robot support,"**This PR adds support for walking robots**

 [Demo video](https://youtu.be/79nVlsYmy2U)

**Steps to run simulation :** 
1. Ensure the PC is runing Ubuntu 18.04 (other versions may work but this has not been confirmed yet)
2. pip3 install pybullet
3. cd to the ardupilot/Rover directory
4. create a ""scripts"" directory and copy ""[/libraries/AP_Scripting/examples/quadruped.lua](https://github.com/ashvath100/ardupilot/blob/walkingrobot_support/libraries/AP_Scripting/examples/quadruped.lua)"" into it
5. start SITL using, ""../Tools/autotest/simvehicle.py --map --console -D -f JSON""
6. Enable scripting with ""param set SCR_ENABLE 1"" and then restart SITL
7.  From`ardupilot/libraries/SITL/examples/JSON/pybullet/`

     run `python3 walking_robot.py`

**Control inputs :** 
- Channel 1: Yaw input

- Channel 3: Throttle input 

- Channel 6: Gait select (switch)
rc 6 > 1500 : two legs alternating gait 
rc 6 < 1500 : one leg wave gait 

- Channel 7: Control mode selector (3 way switch)
rc 7 = 1500 : Height control 
rc 7 >1500 : Rotation control
rc 7 < 1500 : Position control

In Height control
- Channel 2: height input

In Rotation control 
- Channel 2: Roll input 
- Channel 4: Pitch input

In Position control
- Channel 2: X axis input 
- Channel 4: Y axis input

**To do:**
1. add Stabilize mode
2. Hardware testing  

",False,14884,https://api.github.com/repos/ArduPilot/ardupilot/pulls/14884,https://github.com/ArduPilot/ardupilot/pull/14884,closed,1290,4,20,12,4,9,3,0,"[{'name': 'Rover'}, {'name': 'SITL'}, {'name': 'GSoC'}]",2020-07-22 17:42:46+00:00,2020-09-01 00:37:32+00:00,3480886.0,"40 days, 6:54:46","[{'comment_id': 459242089, 'comment_body': 'I think this is a good way to do this actually.  Let\'s just change the ""selector"" to be an enum.', 'comment_created': datetime.datetime(2020, 7, 23, 6, 40, 6, tzinfo=datetime.timezone.utc), 'commenter': 'rmackay9', 'type': 'User'}, {'comment_id': 459242528, 'comment_body': 'small whitespace issue here', 'comment_created': datetime.datetime(2020, 7, 23, 6, 41, 18, tzinfo=datetime.timezone.utc), 'commenter': 'rmackay9', 'type': 'User'}, {'comment_id': 459242664, 'comment_body': 'extra blank line we can remove here.', 'comment_created': datetime.datetime(2020, 7, 23, 6, 41, 40, tzinfo=datetime.timezone.utc), 'commenter': 'rmackay9', 'type': 'User'}, {'comment_id': 459242989, 'comment_body': 'If we are going to have different walking bots mode we should consider an enum.  Using a float is a bit unusual for a ""mode"".', 'comment_created': datetime.datetime(2020, 7, 23, 6, 42, 32, tzinfo=datetime.timezone.utc), 'commenter': 'rmackay9', 'type': 'User'}, {'comment_id': 459243149, 'comment_body': 'small white space issue here (extra space)', 'comment_created': datetime.datetime(2020, 7, 23, 6, 42, 57, tzinfo=datetime.timezone.utc), 'commenter': 'rmackay9', 'type': 'User'}, {'comment_id': 459244394, 'comment_body': 'enum with a switch !', 'comment_created': datetime.datetime(2020, 7, 23, 6, 46, 19, tzinfo=datetime.timezone.utc), 'commenter': 'khancyr', 'type': 'User'}, {'comment_id': 459246936, 'comment_body': 'hopefully we can make this first argument use the enum value as well', 'comment_created': datetime.datetime(2020, 7, 23, 6, 52, 56, tzinfo=datetime.timezone.utc), 'commenter': 'rmackay9', 'type': 'User'}, {'comment_id': 459247883, 'comment_body': 'we should be more consistent about case. So for example ""X_SPEED"" is all capitals while other variables use camel case (like GaitType).  In ArduPilot we generally use all small letters with underscore between words.  So it would be ""x_speed"" and ""gait_type"".', 'comment_created': datetime.datetime(2020, 7, 23, 6, 55, 24, tzinfo=datetime.timezone.utc), 'commenter': 'rmackay9', 'type': 'User'}, {'comment_id': 459610296, 'comment_body': '`enum class` specifically :)', 'comment_created': datetime.datetime(2020, 7, 23, 17, 25, 52, tzinfo=datetime.timezone.utc), 'commenter': 'WickedShell', 'type': 'User'}]","[{'commit_sha': '10032ce50ff930e1124d7ee029592255d107bf3d', 'committer_username': 'ashvath100', 'committer_name': 'ashvath', 'committer_email': 'ashvath100@gmail.com', 'commit_date': datetime.datetime(2018, 1, 28, 16, 58, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '874309c214878d50d2c748780fdeea86f50d0548', 'committer_username': 'ashvath100', 'committer_name': 'ashvath', 'committer_email': 'ashvath100@gmail.com', 'commit_date': datetime.datetime(2018, 1, 28, 16, 58, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '831c4b01f7fe5e14325ecbd4f4ea7ac66f151b67', 'committer_username': 'ashvath100', 'committer_name': 'ashvath', 'committer_email': 'ashvath100@gmail.com', 'commit_date': datetime.datetime(2018, 1, 28, 16, 58, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f4832ebb90a67e9a3b63d68c2dcb488a17829346', 'committer_username': 'ashvath100', 'committer_name': 'ashvath', 'committer_email': 'ashvath100@gmail.com', 'commit_date': datetime.datetime(2018, 1, 28, 16, 58, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '61ff321803114782b3f815016116f6a36aa9b175', 'committer_username': 'ashvath100', 'committer_name': 'ashvath', 'committer_email': 'ashvath100@gmail.com', 'commit_date': datetime.datetime(2018, 1, 28, 16, 58, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'acb6b76fecb61fc74123a954470e30105c7b0d38', 'committer_username': 'ashvath100', 'committer_name': 'ashvath', 'committer_email': 'ashvath100@gmail.com', 'commit_date': datetime.datetime(2018, 1, 28, 16, 58, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0fca19a43858be27c08184e2559fa50febc31035', 'committer_username': 'ashvath100', 'committer_name': 'ashvath', 'committer_email': 'ashvath100@gmail.com', 'commit_date': datetime.datetime(2018, 1, 28, 16, 58, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b04faf149e0703b0a33971998912e431592cb089', 'committer_username': 'ashvath100', 'committer_name': 'ashvath', 'committer_email': 'ashvath100@gmail.com', 'commit_date': datetime.datetime(2018, 1, 28, 16, 58, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a6f7453bc36651346752827986aa19c5837fc5f1', 'committer_username': 'ashvath100', 'committer_name': 'ashvath', 'committer_email': 'ashvath100@gmail.com', 'commit_date': datetime.datetime(2018, 1, 28, 16, 58, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '95ac91f8f60a82612329da046453051eaf5ac5f6', 'committer_username': 'ashvath100', 'committer_name': 'ashvath', 'committer_email': 'ashvath100@gmail.com', 'commit_date': datetime.datetime(2018, 1, 28, 16, 58, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9b28fce3335fe71d6ab6c47b34ffe15a959c1057', 'committer_username': 'ashvath100', 'committer_name': 'ashvath', 'committer_email': 'ashvath100@gmail.com', 'commit_date': datetime.datetime(2018, 1, 28, 16, 58, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9d8d718ce563d68bf0480fef476c4b65d1629c28', 'committer_username': 'ashvath100', 'committer_name': 'ashvath', 'committer_email': 'ashvath100@gmail.com', 'commit_date': datetime.datetime(2018, 1, 28, 16, 58, 25, tzinfo=datetime.timezone.utc)}]",ashvath,35897713,ashvath100@gmail.com,User,,19,,11,20
455262573,Rover: Walking robot support,"**This PR adds support for walking robots**

 [Demo video](https://youtu.be/79nVlsYmy2U)

**Steps to run simulation :** 
1. Ensure the PC is runing Ubuntu 18.04 (other versions may work but this has not been confirmed yet)
2. pip3 install pybullet
3. cd to the ardupilot/Rover directory
4. create a ""scripts"" directory and copy ""[/libraries/AP_Scripting/examples/quadruped.lua](https://github.com/ashvath100/ardupilot/blob/walkingrobot_support/libraries/AP_Scripting/examples/quadruped.lua)"" into it
5. start SITL using, ""../Tools/autotest/simvehicle.py --map --console -D -f JSON""
6. Enable scripting with ""param set SCR_ENABLE 1"" and then restart SITL
7.  From`ardupilot/libraries/SITL/examples/JSON/pybullet/`

     run `python3 walking_robot.py`

**Control inputs :** 
- Channel 1: Yaw input

- Channel 3: Throttle input 

- Channel 6: Gait select (switch)
rc 6 > 1500 : two legs alternating gait 
rc 6 < 1500 : one leg wave gait 

- Channel 7: Control mode selector (3 way switch)
rc 7 = 1500 : Height control 
rc 7 >1500 : Rotation control
rc 7 < 1500 : Position control

In Height control
- Channel 2: height input

In Rotation control 
- Channel 2: Roll input 
- Channel 4: Pitch input

In Position control
- Channel 2: X axis input 
- Channel 4: Y axis input

**To do:**
1. add Stabilize mode
2. Hardware testing  

",False,14884,https://api.github.com/repos/ArduPilot/ardupilot/pulls/14884,https://github.com/ArduPilot/ardupilot/pull/14884,closed,1290,4,20,12,4,9,3,0,"[{'name': 'Rover'}, {'name': 'SITL'}, {'name': 'GSoC'}]",2020-07-22 17:42:46+00:00,2020-09-01 00:37:32+00:00,3480886.0,"40 days, 6:54:46","[{'comment_id': 459242089, 'comment_body': 'I think this is a good way to do this actually.  Let\'s just change the ""selector"" to be an enum.', 'comment_created': datetime.datetime(2020, 7, 23, 6, 40, 6, tzinfo=datetime.timezone.utc), 'commenter': 'rmackay9', 'type': 'User'}, {'comment_id': 459242528, 'comment_body': 'small whitespace issue here', 'comment_created': datetime.datetime(2020, 7, 23, 6, 41, 18, tzinfo=datetime.timezone.utc), 'commenter': 'rmackay9', 'type': 'User'}, {'comment_id': 459242664, 'comment_body': 'extra blank line we can remove here.', 'comment_created': datetime.datetime(2020, 7, 23, 6, 41, 40, tzinfo=datetime.timezone.utc), 'commenter': 'rmackay9', 'type': 'User'}, {'comment_id': 459242989, 'comment_body': 'If we are going to have different walking bots mode we should consider an enum.  Using a float is a bit unusual for a ""mode"".', 'comment_created': datetime.datetime(2020, 7, 23, 6, 42, 32, tzinfo=datetime.timezone.utc), 'commenter': 'rmackay9', 'type': 'User'}, {'comment_id': 459243149, 'comment_body': 'small white space issue here (extra space)', 'comment_created': datetime.datetime(2020, 7, 23, 6, 42, 57, tzinfo=datetime.timezone.utc), 'commenter': 'rmackay9', 'type': 'User'}, {'comment_id': 459244394, 'comment_body': 'enum with a switch !', 'comment_created': datetime.datetime(2020, 7, 23, 6, 46, 19, tzinfo=datetime.timezone.utc), 'commenter': 'khancyr', 'type': 'User'}, {'comment_id': 459246936, 'comment_body': 'hopefully we can make this first argument use the enum value as well', 'comment_created': datetime.datetime(2020, 7, 23, 6, 52, 56, tzinfo=datetime.timezone.utc), 'commenter': 'rmackay9', 'type': 'User'}, {'comment_id': 459247883, 'comment_body': 'we should be more consistent about case. So for example ""X_SPEED"" is all capitals while other variables use camel case (like GaitType).  In ArduPilot we generally use all small letters with underscore between words.  So it would be ""x_speed"" and ""gait_type"".', 'comment_created': datetime.datetime(2020, 7, 23, 6, 55, 24, tzinfo=datetime.timezone.utc), 'commenter': 'rmackay9', 'type': 'User'}, {'comment_id': 459610296, 'comment_body': '`enum class` specifically :)', 'comment_created': datetime.datetime(2020, 7, 23, 17, 25, 52, tzinfo=datetime.timezone.utc), 'commenter': 'WickedShell', 'type': 'User'}]","[{'commit_sha': '10032ce50ff930e1124d7ee029592255d107bf3d', 'committer_username': 'ashvath100', 'committer_name': 'ashvath', 'committer_email': 'ashvath100@gmail.com', 'commit_date': datetime.datetime(2018, 1, 28, 16, 58, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '874309c214878d50d2c748780fdeea86f50d0548', 'committer_username': 'ashvath100', 'committer_name': 'ashvath', 'committer_email': 'ashvath100@gmail.com', 'commit_date': datetime.datetime(2018, 1, 28, 16, 58, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '831c4b01f7fe5e14325ecbd4f4ea7ac66f151b67', 'committer_username': 'ashvath100', 'committer_name': 'ashvath', 'committer_email': 'ashvath100@gmail.com', 'commit_date': datetime.datetime(2018, 1, 28, 16, 58, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f4832ebb90a67e9a3b63d68c2dcb488a17829346', 'committer_username': 'ashvath100', 'committer_name': 'ashvath', 'committer_email': 'ashvath100@gmail.com', 'commit_date': datetime.datetime(2018, 1, 28, 16, 58, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '61ff321803114782b3f815016116f6a36aa9b175', 'committer_username': 'ashvath100', 'committer_name': 'ashvath', 'committer_email': 'ashvath100@gmail.com', 'commit_date': datetime.datetime(2018, 1, 28, 16, 58, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'acb6b76fecb61fc74123a954470e30105c7b0d38', 'committer_username': 'ashvath100', 'committer_name': 'ashvath', 'committer_email': 'ashvath100@gmail.com', 'commit_date': datetime.datetime(2018, 1, 28, 16, 58, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0fca19a43858be27c08184e2559fa50febc31035', 'committer_username': 'ashvath100', 'committer_name': 'ashvath', 'committer_email': 'ashvath100@gmail.com', 'commit_date': datetime.datetime(2018, 1, 28, 16, 58, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b04faf149e0703b0a33971998912e431592cb089', 'committer_username': 'ashvath100', 'committer_name': 'ashvath', 'committer_email': 'ashvath100@gmail.com', 'commit_date': datetime.datetime(2018, 1, 28, 16, 58, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a6f7453bc36651346752827986aa19c5837fc5f1', 'committer_username': 'ashvath100', 'committer_name': 'ashvath', 'committer_email': 'ashvath100@gmail.com', 'commit_date': datetime.datetime(2018, 1, 28, 16, 58, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '95ac91f8f60a82612329da046453051eaf5ac5f6', 'committer_username': 'ashvath100', 'committer_name': 'ashvath', 'committer_email': 'ashvath100@gmail.com', 'commit_date': datetime.datetime(2018, 1, 28, 16, 58, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9b28fce3335fe71d6ab6c47b34ffe15a959c1057', 'committer_username': 'ashvath100', 'committer_name': 'ashvath', 'committer_email': 'ashvath100@gmail.com', 'commit_date': datetime.datetime(2018, 1, 28, 16, 58, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9d8d718ce563d68bf0480fef476c4b65d1629c28', 'committer_username': 'ashvath100', 'committer_name': 'ashvath', 'committer_email': 'ashvath100@gmail.com', 'commit_date': datetime.datetime(2018, 1, 28, 16, 58, 25, tzinfo=datetime.timezone.utc)}]",ashvath,35897713,ashvath100@gmail.com,User,,19,,11,20
464924984,AP_Scripting/Rover: support Lua motor drivers,"This PR includes part of the walking robots PR https://github.com/ArduPilot/ardupilot/pull/14884 but is smaller allowing it to be more easily merged.

Similar to @IamPete1's PR https://github.com/ArduPilot/ardupilot/pull/14552, the controversial part of this change is exposing set_angle and set_range to scripting.  The request to add set_output_norm() is not straightforward though and becomes a significant blocker for the walking robots GSoC project.

This PR allows Lua scripts to implement motor drivers for Rovers.  The changes include:

- AP_Vehicle gets a new ""get_control_output"" function that allows the caller to retrieve the high level outputs of the controllers (attitude, steering, etc) in the range of -1 to +1
- Rover implements ""get_control_output"" for yaw (aka Steering) and throttle. In the case of Rover these control outputs are held within the Motors library as inputs.  I.e. retrieving the input from the motors library is the same as retrieving the outputs from the controllers.
- AP_Script gets bindings for AP_Vehicle's get_control_output
- AP_Script gets bindings for SRV_Channels's set_angle and set_range
- A new example script is added to AP_Scripting which demonstrates that this all works for a simple ackerman steering vehicle.  Below is a screen shot of the rover driving around successfully

![image](https://user-images.githubusercontent.com/1498098/89699747-ea0e0b00-d963-11ea-8c56-b8a30c0fd53d.png)

This has been tested in SITL by comparing the regular motor driver's outputs to throttle and steering channels to the scripts outputs for script1 and script3 and the outputs were identical.
",True,15010,https://api.github.com/repos/ArduPilot/ardupilot/pulls/15010,https://github.com/ArduPilot/ardupilot/pull/15010,closed,140,6,9,11,9,11,4,1,"[{'name': 'Enhancement'}, {'name': 'Rover'}, {'name': 'Scripting'}, {'name': 'WikiNeeded'}]",2020-08-08 01:48:12+00:00,2020-08-20 05:09:30+00:00,1048878.0,"12 days, 3:21:18","[{'comment_id': 468231895, 'comment_body': 'be nice to use constants for the 100 and 4500 values', 'comment_created': datetime.datetime(2020, 8, 10, 23, 1, 7, tzinfo=datetime.timezone.utc), 'commenter': 'tridge', 'type': 'User'}, {'comment_id': 471843435, 'comment_body': 'This whole function could be this?\r\n\r\n```suggestion\r\n    if (type_angle()) {\r\n        set_output_pwm(pwm_from_angle(value * high_out));\r\n    } else {\r\n        set_output_pwm(pwm_from_range(value * high_out));\r\n   }\r\n```', 'comment_created': datetime.datetime(2020, 8, 18, 0, 19, 47, tzinfo=datetime.timezone.utc), 'commenter': 'IamPete1', 'type': 'User'}, {'comment_id': 471851405, 'comment_body': ""@IamPete1,\r\n\r\nYes, thanks.  I think that would work too the only issue is that it would be inconsistent with the get_output_norm().  I'm reluctant to change get_output_norm() because that would affect the KDECAN ESCs and I'm keen that we get something in so that we can get the walking robots support merged before the end of the GSoC period."", 'comment_created': datetime.datetime(2020, 8, 18, 0, 49, 37, tzinfo=datetime.timezone.utc), 'commenter': 'rmackay9', 'type': 'User'}, {'comment_id': 471854804, 'comment_body': 'I think your better of having a new function and leave the old one for KDECAN, for example, if I have a rover with a throttle 1000 is backwards, 1250 is stop and 2000 is forwards. So I do set output norm from scripting with 0 and find I have 1/3rd throttle, and I have no way of finding what value I should use to stop.', 'comment_created': datetime.datetime(2020, 8, 18, 1, 2, 31, tzinfo=datetime.timezone.utc), 'commenter': 'IamPete1', 'type': 'User'}, {'comment_id': 471862980, 'comment_body': ""@IamPete1, OK, thanks.  Maybe I'll implement it as you've suggested and then just add some comments to say that get_output_norm() and set_output_norm() are inconsistent."", 'comment_created': datetime.datetime(2020, 8, 18, 1, 33, 29, tzinfo=datetime.timezone.utc), 'commenter': 'rmackay9', 'type': 'User'}, {'comment_id': 471879470, 'comment_body': ""@IamPete1, ah, the problem with this potential solution is that the high_out hasn't been set for the script1 outputs so we would need to add a set-range binding and then ask devs to call this and set it to something.  What they set it to wouldn't be too important but it would have to be set."", 'comment_created': datetime.datetime(2020, 8, 18, 2, 38, 36, tzinfo=datetime.timezone.utc), 'commenter': 'rmackay9', 'type': 'User'}, {'comment_id': 472110470, 'comment_body': 'We could default to angle 4500, https://github.com/ArduPilot/ardupilot/blob/8484e8271f686e259559fba62a874275bc4307d0/libraries/SRV_Channel/SRV_Channel_aux.cpp#L129\r\n\r\nBut also give the bindings to change it', 'comment_created': datetime.datetime(2020, 8, 18, 11, 35, 1, tzinfo=datetime.timezone.utc), 'commenter': 'IamPete1', 'type': 'User'}, {'comment_id': 472113107, 'comment_body': ""@IamPete1, I have never seen this defaulting before!  I had no idea it existed.\r\n\r\nI'm happy with this idea, let's see what @WickedShell says."", 'comment_created': datetime.datetime(2020, 8, 18, 11, 40, 7, tzinfo=datetime.timezone.utc), 'commenter': 'rmackay9', 'type': 'User'}, {'comment_id': 472408492, 'comment_body': ""I'm fine with setting the default range on those to something, Personally I'd set it to range not angle, but I'm not that invested in which it goes to. I would suggest we can jump straight to using a much larger value then `4500` though and just give the scripting outputs more resolution off the bat :) (I realize our actual output layer is gonna truncate these down badly, but hey, one thing at a time :D )"", 'comment_created': datetime.datetime(2020, 8, 18, 18, 48, 48, tzinfo=datetime.timezone.utc), 'commenter': 'WickedShell', 'type': 'User'}, {'comment_id': 472981669, 'comment_body': ""OK, i've gone ahead and done this now and re-tested and it all seems OK. txs!"", 'comment_created': datetime.datetime(2020, 8, 19, 12, 13, 15, tzinfo=datetime.timezone.utc), 'commenter': 'rmackay9', 'type': 'User'}, {'comment_id': 473472438, 'comment_body': ""```suggestion\r\nsingleton AP_Vehicle method get_control_output boolean AP_Vehicle::ControlOutput'enum AP_Vehicle::ControlOutput::Roll AP_Vehicle::ControlOutput::Last_ControlOutput-1 float'Null\r\n```\r\n\r\nYou don't want to allow access to Last_ControlOutput as it isn't actually a valid one to read."", 'comment_created': datetime.datetime(2020, 8, 20, 0, 28, 39, tzinfo=datetime.timezone.utc), 'commenter': 'WickedShell', 'type': 'User'}]","[{'commit_sha': 'b2144c39f448865fc959186488c80cf60dd5883a', 'committer_username': 'ashvath100', 'committer_name': 'ashvath', 'committer_email': 'ashvath100@gmail.com', 'commit_date': datetime.datetime(2018, 1, 28, 16, 58, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd5da57afa1fc9331c175aa03cce5a0f26a56cd05', 'committer_username': 'rmackay9', 'committer_name': 'Randy Mackay', 'committer_email': 'rmackay9@yahoo.com', 'commit_date': datetime.datetime(2012, 3, 4, 0, 2, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1b57fedcba88a56cf2454a7cb2b7c18b9e3c92fb', 'committer_username': 'ashvath100', 'committer_name': 'ashvath', 'committer_email': 'ashvath100@gmail.com', 'commit_date': datetime.datetime(2018, 1, 28, 16, 58, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd999f252b762e13784ebb59ed22e45156599f950', 'committer_username': 'rmackay9', 'committer_name': 'Randy Mackay', 'committer_email': 'rmackay9@yahoo.com', 'commit_date': datetime.datetime(2012, 3, 4, 0, 2, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c3912195d9665a78fba796ef9ffa9bda5d421d1e', 'committer_username': 'rmackay9', 'committer_name': 'Randy Mackay', 'committer_email': 'rmackay9@yahoo.com', 'commit_date': datetime.datetime(2012, 3, 4, 0, 2, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bc4dc6f97b57ce389ce5d7b1e7b356396f45b0c6', 'committer_username': 'rmackay9', 'committer_name': 'Randy Mackay', 'committer_email': 'rmackay9@yahoo.com', 'commit_date': datetime.datetime(2012, 3, 4, 0, 2, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '193b113ad579d0b8bc86dd8e28bde44a3cfcb7ab', 'committer_username': 'ashvath100', 'committer_name': 'ashvath', 'committer_email': 'ashvath100@gmail.com', 'commit_date': datetime.datetime(2018, 1, 28, 16, 58, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a6af6c3e371f815477ad6cd5bc8f813dbbeb216c', 'committer_username': 'rmackay9', 'committer_name': 'Randy Mackay', 'committer_email': 'rmackay9@yahoo.com', 'commit_date': datetime.datetime(2012, 3, 4, 0, 2, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '82949af61f816026f2ec0364977c59ec62d06e1d', 'committer_username': 'rmackay9', 'committer_name': 'Randy Mackay', 'committer_email': 'rmackay9@yahoo.com', 'commit_date': datetime.datetime(2012, 3, 4, 0, 2, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '96a98a583b39fffe434785aaae4c62f19f390338', 'committer_username': 'rmackay9', 'committer_name': 'Randy Mackay', 'committer_email': 'rmackay9@yahoo.com', 'commit_date': datetime.datetime(2012, 3, 4, 0, 2, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '779fa3201cf2204abf2e1e7a8f24768531f881dc', 'committer_username': 'rmackay9', 'committer_name': 'Randy Mackay', 'committer_email': 'rmackay9@yahoo.com', 'commit_date': datetime.datetime(2012, 3, 4, 0, 2, 57, tzinfo=datetime.timezone.utc)}]",Randy Mackay,1498098,rmackay9@yahoo.com,User,,29,,3,583
464924984,AP_Scripting/Rover: support Lua motor drivers,"This PR includes part of the walking robots PR https://github.com/ArduPilot/ardupilot/pull/14884 but is smaller allowing it to be more easily merged.

Similar to @IamPete1's PR https://github.com/ArduPilot/ardupilot/pull/14552, the controversial part of this change is exposing set_angle and set_range to scripting.  The request to add set_output_norm() is not straightforward though and becomes a significant blocker for the walking robots GSoC project.

This PR allows Lua scripts to implement motor drivers for Rovers.  The changes include:

- AP_Vehicle gets a new ""get_control_output"" function that allows the caller to retrieve the high level outputs of the controllers (attitude, steering, etc) in the range of -1 to +1
- Rover implements ""get_control_output"" for yaw (aka Steering) and throttle. In the case of Rover these control outputs are held within the Motors library as inputs.  I.e. retrieving the input from the motors library is the same as retrieving the outputs from the controllers.
- AP_Script gets bindings for AP_Vehicle's get_control_output
- AP_Script gets bindings for SRV_Channels's set_angle and set_range
- A new example script is added to AP_Scripting which demonstrates that this all works for a simple ackerman steering vehicle.  Below is a screen shot of the rover driving around successfully

![image](https://user-images.githubusercontent.com/1498098/89699747-ea0e0b00-d963-11ea-8c56-b8a30c0fd53d.png)

This has been tested in SITL by comparing the regular motor driver's outputs to throttle and steering channels to the scripts outputs for script1 and script3 and the outputs were identical.
",True,15010,https://api.github.com/repos/ArduPilot/ardupilot/pulls/15010,https://github.com/ArduPilot/ardupilot/pull/15010,closed,140,6,9,11,9,11,4,1,"[{'name': 'Enhancement'}, {'name': 'Rover'}, {'name': 'Scripting'}, {'name': 'WikiNeeded'}]",2020-08-08 01:48:12+00:00,2020-08-20 05:09:30+00:00,1048878.0,"12 days, 3:21:18","[{'comment_id': 468231895, 'comment_body': 'be nice to use constants for the 100 and 4500 values', 'comment_created': datetime.datetime(2020, 8, 10, 23, 1, 7, tzinfo=datetime.timezone.utc), 'commenter': 'tridge', 'type': 'User'}, {'comment_id': 471843435, 'comment_body': 'This whole function could be this?\r\n\r\n```suggestion\r\n    if (type_angle()) {\r\n        set_output_pwm(pwm_from_angle(value * high_out));\r\n    } else {\r\n        set_output_pwm(pwm_from_range(value * high_out));\r\n   }\r\n```', 'comment_created': datetime.datetime(2020, 8, 18, 0, 19, 47, tzinfo=datetime.timezone.utc), 'commenter': 'IamPete1', 'type': 'User'}, {'comment_id': 471851405, 'comment_body': ""@IamPete1,\r\n\r\nYes, thanks.  I think that would work too the only issue is that it would be inconsistent with the get_output_norm().  I'm reluctant to change get_output_norm() because that would affect the KDECAN ESCs and I'm keen that we get something in so that we can get the walking robots support merged before the end of the GSoC period."", 'comment_created': datetime.datetime(2020, 8, 18, 0, 49, 37, tzinfo=datetime.timezone.utc), 'commenter': 'rmackay9', 'type': 'User'}, {'comment_id': 471854804, 'comment_body': 'I think your better of having a new function and leave the old one for KDECAN, for example, if I have a rover with a throttle 1000 is backwards, 1250 is stop and 2000 is forwards. So I do set output norm from scripting with 0 and find I have 1/3rd throttle, and I have no way of finding what value I should use to stop.', 'comment_created': datetime.datetime(2020, 8, 18, 1, 2, 31, tzinfo=datetime.timezone.utc), 'commenter': 'IamPete1', 'type': 'User'}, {'comment_id': 471862980, 'comment_body': ""@IamPete1, OK, thanks.  Maybe I'll implement it as you've suggested and then just add some comments to say that get_output_norm() and set_output_norm() are inconsistent."", 'comment_created': datetime.datetime(2020, 8, 18, 1, 33, 29, tzinfo=datetime.timezone.utc), 'commenter': 'rmackay9', 'type': 'User'}, {'comment_id': 471879470, 'comment_body': ""@IamPete1, ah, the problem with this potential solution is that the high_out hasn't been set for the script1 outputs so we would need to add a set-range binding and then ask devs to call this and set it to something.  What they set it to wouldn't be too important but it would have to be set."", 'comment_created': datetime.datetime(2020, 8, 18, 2, 38, 36, tzinfo=datetime.timezone.utc), 'commenter': 'rmackay9', 'type': 'User'}, {'comment_id': 472110470, 'comment_body': 'We could default to angle 4500, https://github.com/ArduPilot/ardupilot/blob/8484e8271f686e259559fba62a874275bc4307d0/libraries/SRV_Channel/SRV_Channel_aux.cpp#L129\r\n\r\nBut also give the bindings to change it', 'comment_created': datetime.datetime(2020, 8, 18, 11, 35, 1, tzinfo=datetime.timezone.utc), 'commenter': 'IamPete1', 'type': 'User'}, {'comment_id': 472113107, 'comment_body': ""@IamPete1, I have never seen this defaulting before!  I had no idea it existed.\r\n\r\nI'm happy with this idea, let's see what @WickedShell says."", 'comment_created': datetime.datetime(2020, 8, 18, 11, 40, 7, tzinfo=datetime.timezone.utc), 'commenter': 'rmackay9', 'type': 'User'}, {'comment_id': 472408492, 'comment_body': ""I'm fine with setting the default range on those to something, Personally I'd set it to range not angle, but I'm not that invested in which it goes to. I would suggest we can jump straight to using a much larger value then `4500` though and just give the scripting outputs more resolution off the bat :) (I realize our actual output layer is gonna truncate these down badly, but hey, one thing at a time :D )"", 'comment_created': datetime.datetime(2020, 8, 18, 18, 48, 48, tzinfo=datetime.timezone.utc), 'commenter': 'WickedShell', 'type': 'User'}, {'comment_id': 472981669, 'comment_body': ""OK, i've gone ahead and done this now and re-tested and it all seems OK. txs!"", 'comment_created': datetime.datetime(2020, 8, 19, 12, 13, 15, tzinfo=datetime.timezone.utc), 'commenter': 'rmackay9', 'type': 'User'}, {'comment_id': 473472438, 'comment_body': ""```suggestion\r\nsingleton AP_Vehicle method get_control_output boolean AP_Vehicle::ControlOutput'enum AP_Vehicle::ControlOutput::Roll AP_Vehicle::ControlOutput::Last_ControlOutput-1 float'Null\r\n```\r\n\r\nYou don't want to allow access to Last_ControlOutput as it isn't actually a valid one to read."", 'comment_created': datetime.datetime(2020, 8, 20, 0, 28, 39, tzinfo=datetime.timezone.utc), 'commenter': 'WickedShell', 'type': 'User'}]","[{'commit_sha': 'b2144c39f448865fc959186488c80cf60dd5883a', 'committer_username': 'ashvath100', 'committer_name': 'ashvath', 'committer_email': 'ashvath100@gmail.com', 'commit_date': datetime.datetime(2018, 1, 28, 16, 58, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd5da57afa1fc9331c175aa03cce5a0f26a56cd05', 'committer_username': 'rmackay9', 'committer_name': 'Randy Mackay', 'committer_email': 'rmackay9@yahoo.com', 'commit_date': datetime.datetime(2012, 3, 4, 0, 2, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1b57fedcba88a56cf2454a7cb2b7c18b9e3c92fb', 'committer_username': 'ashvath100', 'committer_name': 'ashvath', 'committer_email': 'ashvath100@gmail.com', 'commit_date': datetime.datetime(2018, 1, 28, 16, 58, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd999f252b762e13784ebb59ed22e45156599f950', 'committer_username': 'rmackay9', 'committer_name': 'Randy Mackay', 'committer_email': 'rmackay9@yahoo.com', 'commit_date': datetime.datetime(2012, 3, 4, 0, 2, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c3912195d9665a78fba796ef9ffa9bda5d421d1e', 'committer_username': 'rmackay9', 'committer_name': 'Randy Mackay', 'committer_email': 'rmackay9@yahoo.com', 'commit_date': datetime.datetime(2012, 3, 4, 0, 2, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bc4dc6f97b57ce389ce5d7b1e7b356396f45b0c6', 'committer_username': 'rmackay9', 'committer_name': 'Randy Mackay', 'committer_email': 'rmackay9@yahoo.com', 'commit_date': datetime.datetime(2012, 3, 4, 0, 2, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '193b113ad579d0b8bc86dd8e28bde44a3cfcb7ab', 'committer_username': 'ashvath100', 'committer_name': 'ashvath', 'committer_email': 'ashvath100@gmail.com', 'commit_date': datetime.datetime(2018, 1, 28, 16, 58, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a6af6c3e371f815477ad6cd5bc8f813dbbeb216c', 'committer_username': 'rmackay9', 'committer_name': 'Randy Mackay', 'committer_email': 'rmackay9@yahoo.com', 'commit_date': datetime.datetime(2012, 3, 4, 0, 2, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '82949af61f816026f2ec0364977c59ec62d06e1d', 'committer_username': 'rmackay9', 'committer_name': 'Randy Mackay', 'committer_email': 'rmackay9@yahoo.com', 'commit_date': datetime.datetime(2012, 3, 4, 0, 2, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '96a98a583b39fffe434785aaae4c62f19f390338', 'committer_username': 'rmackay9', 'committer_name': 'Randy Mackay', 'committer_email': 'rmackay9@yahoo.com', 'commit_date': datetime.datetime(2012, 3, 4, 0, 2, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '779fa3201cf2204abf2e1e7a8f24768531f881dc', 'committer_username': 'rmackay9', 'committer_name': 'Randy Mackay', 'committer_email': 'rmackay9@yahoo.com', 'commit_date': datetime.datetime(2012, 3, 4, 0, 2, 57, tzinfo=datetime.timezone.utc)}]",Randy Mackay,1498098,rmackay9@yahoo.com,User,,29,,3,583
464924984,AP_Scripting/Rover: support Lua motor drivers,"This PR includes part of the walking robots PR https://github.com/ArduPilot/ardupilot/pull/14884 but is smaller allowing it to be more easily merged.

Similar to @IamPete1's PR https://github.com/ArduPilot/ardupilot/pull/14552, the controversial part of this change is exposing set_angle and set_range to scripting.  The request to add set_output_norm() is not straightforward though and becomes a significant blocker for the walking robots GSoC project.

This PR allows Lua scripts to implement motor drivers for Rovers.  The changes include:

- AP_Vehicle gets a new ""get_control_output"" function that allows the caller to retrieve the high level outputs of the controllers (attitude, steering, etc) in the range of -1 to +1
- Rover implements ""get_control_output"" for yaw (aka Steering) and throttle. In the case of Rover these control outputs are held within the Motors library as inputs.  I.e. retrieving the input from the motors library is the same as retrieving the outputs from the controllers.
- AP_Script gets bindings for AP_Vehicle's get_control_output
- AP_Script gets bindings for SRV_Channels's set_angle and set_range
- A new example script is added to AP_Scripting which demonstrates that this all works for a simple ackerman steering vehicle.  Below is a screen shot of the rover driving around successfully

![image](https://user-images.githubusercontent.com/1498098/89699747-ea0e0b00-d963-11ea-8c56-b8a30c0fd53d.png)

This has been tested in SITL by comparing the regular motor driver's outputs to throttle and steering channels to the scripts outputs for script1 and script3 and the outputs were identical.
",True,15010,https://api.github.com/repos/ArduPilot/ardupilot/pulls/15010,https://github.com/ArduPilot/ardupilot/pull/15010,closed,140,6,9,11,9,11,4,1,"[{'name': 'Enhancement'}, {'name': 'Rover'}, {'name': 'Scripting'}, {'name': 'WikiNeeded'}]",2020-08-08 01:48:12+00:00,2020-08-20 05:09:30+00:00,1048878.0,"12 days, 3:21:18","[{'comment_id': 468231895, 'comment_body': 'be nice to use constants for the 100 and 4500 values', 'comment_created': datetime.datetime(2020, 8, 10, 23, 1, 7, tzinfo=datetime.timezone.utc), 'commenter': 'tridge', 'type': 'User'}, {'comment_id': 471843435, 'comment_body': 'This whole function could be this?\r\n\r\n```suggestion\r\n    if (type_angle()) {\r\n        set_output_pwm(pwm_from_angle(value * high_out));\r\n    } else {\r\n        set_output_pwm(pwm_from_range(value * high_out));\r\n   }\r\n```', 'comment_created': datetime.datetime(2020, 8, 18, 0, 19, 47, tzinfo=datetime.timezone.utc), 'commenter': 'IamPete1', 'type': 'User'}, {'comment_id': 471851405, 'comment_body': ""@IamPete1,\r\n\r\nYes, thanks.  I think that would work too the only issue is that it would be inconsistent with the get_output_norm().  I'm reluctant to change get_output_norm() because that would affect the KDECAN ESCs and I'm keen that we get something in so that we can get the walking robots support merged before the end of the GSoC period."", 'comment_created': datetime.datetime(2020, 8, 18, 0, 49, 37, tzinfo=datetime.timezone.utc), 'commenter': 'rmackay9', 'type': 'User'}, {'comment_id': 471854804, 'comment_body': 'I think your better of having a new function and leave the old one for KDECAN, for example, if I have a rover with a throttle 1000 is backwards, 1250 is stop and 2000 is forwards. So I do set output norm from scripting with 0 and find I have 1/3rd throttle, and I have no way of finding what value I should use to stop.', 'comment_created': datetime.datetime(2020, 8, 18, 1, 2, 31, tzinfo=datetime.timezone.utc), 'commenter': 'IamPete1', 'type': 'User'}, {'comment_id': 471862980, 'comment_body': ""@IamPete1, OK, thanks.  Maybe I'll implement it as you've suggested and then just add some comments to say that get_output_norm() and set_output_norm() are inconsistent."", 'comment_created': datetime.datetime(2020, 8, 18, 1, 33, 29, tzinfo=datetime.timezone.utc), 'commenter': 'rmackay9', 'type': 'User'}, {'comment_id': 471879470, 'comment_body': ""@IamPete1, ah, the problem with this potential solution is that the high_out hasn't been set for the script1 outputs so we would need to add a set-range binding and then ask devs to call this and set it to something.  What they set it to wouldn't be too important but it would have to be set."", 'comment_created': datetime.datetime(2020, 8, 18, 2, 38, 36, tzinfo=datetime.timezone.utc), 'commenter': 'rmackay9', 'type': 'User'}, {'comment_id': 472110470, 'comment_body': 'We could default to angle 4500, https://github.com/ArduPilot/ardupilot/blob/8484e8271f686e259559fba62a874275bc4307d0/libraries/SRV_Channel/SRV_Channel_aux.cpp#L129\r\n\r\nBut also give the bindings to change it', 'comment_created': datetime.datetime(2020, 8, 18, 11, 35, 1, tzinfo=datetime.timezone.utc), 'commenter': 'IamPete1', 'type': 'User'}, {'comment_id': 472113107, 'comment_body': ""@IamPete1, I have never seen this defaulting before!  I had no idea it existed.\r\n\r\nI'm happy with this idea, let's see what @WickedShell says."", 'comment_created': datetime.datetime(2020, 8, 18, 11, 40, 7, tzinfo=datetime.timezone.utc), 'commenter': 'rmackay9', 'type': 'User'}, {'comment_id': 472408492, 'comment_body': ""I'm fine with setting the default range on those to something, Personally I'd set it to range not angle, but I'm not that invested in which it goes to. I would suggest we can jump straight to using a much larger value then `4500` though and just give the scripting outputs more resolution off the bat :) (I realize our actual output layer is gonna truncate these down badly, but hey, one thing at a time :D )"", 'comment_created': datetime.datetime(2020, 8, 18, 18, 48, 48, tzinfo=datetime.timezone.utc), 'commenter': 'WickedShell', 'type': 'User'}, {'comment_id': 472981669, 'comment_body': ""OK, i've gone ahead and done this now and re-tested and it all seems OK. txs!"", 'comment_created': datetime.datetime(2020, 8, 19, 12, 13, 15, tzinfo=datetime.timezone.utc), 'commenter': 'rmackay9', 'type': 'User'}, {'comment_id': 473472438, 'comment_body': ""```suggestion\r\nsingleton AP_Vehicle method get_control_output boolean AP_Vehicle::ControlOutput'enum AP_Vehicle::ControlOutput::Roll AP_Vehicle::ControlOutput::Last_ControlOutput-1 float'Null\r\n```\r\n\r\nYou don't want to allow access to Last_ControlOutput as it isn't actually a valid one to read."", 'comment_created': datetime.datetime(2020, 8, 20, 0, 28, 39, tzinfo=datetime.timezone.utc), 'commenter': 'WickedShell', 'type': 'User'}]","[{'commit_sha': 'b2144c39f448865fc959186488c80cf60dd5883a', 'committer_username': 'ashvath100', 'committer_name': 'ashvath', 'committer_email': 'ashvath100@gmail.com', 'commit_date': datetime.datetime(2018, 1, 28, 16, 58, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd5da57afa1fc9331c175aa03cce5a0f26a56cd05', 'committer_username': 'rmackay9', 'committer_name': 'Randy Mackay', 'committer_email': 'rmackay9@yahoo.com', 'commit_date': datetime.datetime(2012, 3, 4, 0, 2, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1b57fedcba88a56cf2454a7cb2b7c18b9e3c92fb', 'committer_username': 'ashvath100', 'committer_name': 'ashvath', 'committer_email': 'ashvath100@gmail.com', 'commit_date': datetime.datetime(2018, 1, 28, 16, 58, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd999f252b762e13784ebb59ed22e45156599f950', 'committer_username': 'rmackay9', 'committer_name': 'Randy Mackay', 'committer_email': 'rmackay9@yahoo.com', 'commit_date': datetime.datetime(2012, 3, 4, 0, 2, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c3912195d9665a78fba796ef9ffa9bda5d421d1e', 'committer_username': 'rmackay9', 'committer_name': 'Randy Mackay', 'committer_email': 'rmackay9@yahoo.com', 'commit_date': datetime.datetime(2012, 3, 4, 0, 2, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bc4dc6f97b57ce389ce5d7b1e7b356396f45b0c6', 'committer_username': 'rmackay9', 'committer_name': 'Randy Mackay', 'committer_email': 'rmackay9@yahoo.com', 'commit_date': datetime.datetime(2012, 3, 4, 0, 2, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '193b113ad579d0b8bc86dd8e28bde44a3cfcb7ab', 'committer_username': 'ashvath100', 'committer_name': 'ashvath', 'committer_email': 'ashvath100@gmail.com', 'commit_date': datetime.datetime(2018, 1, 28, 16, 58, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a6af6c3e371f815477ad6cd5bc8f813dbbeb216c', 'committer_username': 'rmackay9', 'committer_name': 'Randy Mackay', 'committer_email': 'rmackay9@yahoo.com', 'commit_date': datetime.datetime(2012, 3, 4, 0, 2, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '82949af61f816026f2ec0364977c59ec62d06e1d', 'committer_username': 'rmackay9', 'committer_name': 'Randy Mackay', 'committer_email': 'rmackay9@yahoo.com', 'commit_date': datetime.datetime(2012, 3, 4, 0, 2, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '96a98a583b39fffe434785aaae4c62f19f390338', 'committer_username': 'rmackay9', 'committer_name': 'Randy Mackay', 'committer_email': 'rmackay9@yahoo.com', 'commit_date': datetime.datetime(2012, 3, 4, 0, 2, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '779fa3201cf2204abf2e1e7a8f24768531f881dc', 'committer_username': 'rmackay9', 'committer_name': 'Randy Mackay', 'committer_email': 'rmackay9@yahoo.com', 'commit_date': datetime.datetime(2012, 3, 4, 0, 2, 57, tzinfo=datetime.timezone.utc)}]",Randy Mackay,1498098,rmackay9@yahoo.com,User,,29,,3,583
473564441,Rover/AP_Scripting: add basic walking robot support,"This is a cut-down version of PR https://github.com/ArduPilot/ardupilot/pull/14884 to add support for four legged walking robots.  This also includes a couple of commits from @IamPete1's PR https://github.com/ArduPilot/ardupilot/pull/11034 to add roll and pitch support to Rover.

The changes in this PR are:

- RC_Channel Option definitions for Roll and Pitch input.  These will eventually be used to replace RCMAP but for now only Rover's RCx_OPTION parameter description includes these new items
- Rover's motor library is slightly enhanced to hold the roll and pitch in the range -1 to +1
- Rover's get_control_output() is enhanced to make the roll and pitch available to lua scripts
- quadruped.lua example script added which controls 12 servos to make the robot walk
- pybullet startup script and model for a quadruped

This has been tested in SITL and on a real vehicle.

The script has a number of known issues (https://github.com/ArduPilot/ardupilot/issues/15112) that we hope to resolve in follow-up PRs.

All feedback greatly welcome!",True,15159,https://api.github.com/repos/ArduPilot/ardupilot/pulls/15159,https://github.com/ArduPilot/ardupilot/pull/15159,closed,1003,5,14,9,1,35,3,0,"[{'name': 'Enhancement'}, {'name': 'Rover'}, {'name': 'Scripting'}]",2020-08-25 23:52:39+00:00,2020-09-01 00:33:26+00:00,520847.0,"6 days, 0:40:47","[{'comment_id': 476900116, 'comment_body': 'd1 is already local in this scope, no need to redeclare `local` at the front', 'comment_created': datetime.datetime(2020, 8, 26, 0, 11, 25, tzinfo=datetime.timezone.utc), 'commenter': 'WickedShell', 'type': 'User'}, {'comment_id': 476900587, 'comment_body': 'This whole array appears to only be needed in one function, where the PWM is calculated then output, why not remove this, and directly output it? It would reduce the memory cost here, and should be faster.', 'comment_created': datetime.datetime(2020, 8, 26, 0, 12, 3, tzinfo=datetime.timezone.utc), 'commenter': 'WickedShell', 'type': 'User'}, {'comment_id': 476901639, 'comment_body': ""Isn't this duplicating the `move_requested` calculation already done up in `calc_gait_sequence`, why not pass `move_requested` as an argument to this function and not recalculate it for each leg?"", 'comment_created': datetime.datetime(2020, 8, 26, 0, 13, 39, tzinfo=datetime.timezone.utc), 'commenter': 'WickedShell', 'type': 'User'}, {'comment_id': 476904523, 'comment_body': '`(gait_lifted_steps and 1)` is odd, this looks like a mistake. `and` is a logical operator, not a bitwise operator, and 0 and 1 are both truthy so the whole expresion here is always true.\r\n\r\nREPL test if you are curious:\r\n``` lua\r\n> true and 1\r\n1\r\n> 1 & 2\r\n0\r\n> 1 & 1\r\n1\r\n> if 0 then\r\n>>   print(""HI"")\r\n>> end\r\nHI\r\n> if nil then\r\n  print(""HI"")\r\nend\r\n> if false then\r\n  print(""HI"")\r\nend\r\n> if true then\r\n  print(""HI"")\r\nend\r\nHI\r\n```', 'comment_created': datetime.datetime(2020, 8, 26, 0, 18, 1, tzinfo=datetime.timezone.utc), 'commenter': 'WickedShell', 'type': 'User'}, {'comment_id': 476905715, 'comment_body': ""Not critical, but all the normal comments about multiplying by `0.5` being faster are still true. In practice we're off in script land where everything's slow anyways, but just pointing it out."", 'comment_created': datetime.datetime(2020, 8, 26, 0, 19, 53, tzinfo=datetime.timezone.utc), 'commenter': 'WickedShell', 'type': 'User'}, {'comment_id': 476907906, 'comment_body': 'Why bind to the local instead of just returning? Not sure it actually tweaks the generated bytecode at all, but can be nicer to read. (And keeps the script a bit shorter)', 'comment_created': datetime.datetime(2020, 8, 26, 0, 23, 1, tzinfo=datetime.timezone.utc), 'commenter': 'WickedShell', 'type': 'User'}, {'comment_id': 476911096, 'comment_body': 'As a note there are helpers for math.rad() and math.deg() to convert  these rather then having to multiply by `math.pi/180` everywhere, which is both clearer, less error prone, and should be faster.', 'comment_created': datetime.datetime(2020, 8, 26, 0, 28, 6, tzinfo=datetime.timezone.utc), 'commenter': 'WickedShell', 'type': 'User'}, {'comment_id': 476911845, 'comment_body': '```suggestion\r\n    return (target_time + start_time) <= now\r\n```', 'comment_created': datetime.datetime(2020, 8, 26, 0, 29, 16, tzinfo=datetime.timezone.utc), 'commenter': 'WickedShell', 'type': 'User'}, {'comment_id': 476913045, 'comment_body': ""So from a style point of view you'd normally end up starting to lump these into a table with keys of `step`, `step_total` etc, rather then have a local for each. Not a huge deal, and theirs some arguments either way, but that can sometimes help clean up and encapsulate the code better."", 'comment_created': datetime.datetime(2020, 8, 26, 0, 31, 5, tzinfo=datetime.timezone.utc), 'commenter': 'WickedShell', 'type': 'User'}, {'comment_id': 476997676, 'comment_body': 'removed local from in front of d1 and d2, thanks!', 'comment_created': datetime.datetime(2020, 8, 26, 2, 38, 27, tzinfo=datetime.timezone.utc), 'commenter': 'rmackay9', 'type': 'User'}, {'comment_id': 476998470, 'comment_body': 'txs, moved pwm to be local to the update function', 'comment_created': datetime.datetime(2020, 8, 26, 2, 41, 18, tzinfo=datetime.timezone.utc), 'commenter': 'rmackay9', 'type': 'User'}, {'comment_id': 476999001, 'comment_body': 'Thanks replaced all instances of ""/2"" with ""* 0.5""', 'comment_created': datetime.datetime(2020, 8, 26, 2, 43, 12, tzinfo=datetime.timezone.utc), 'commenter': 'rmackay9', 'type': 'User'}, {'comment_id': 476999236, 'comment_body': 'thanks, directly return the array', 'comment_created': datetime.datetime(2020, 8, 26, 2, 44, 11, tzinfo=datetime.timezone.utc), 'commenter': 'rmackay9', 'type': 'User'}, {'comment_id': 477002151, 'comment_body': 'Why even have it local? You compute the value, store it in the array, then immediately send it to an output. Why not send the value to the output without ever having the array to store it in? (Saves the entire array from being in memory)', 'comment_created': datetime.datetime(2020, 8, 26, 2, 54, 45, tzinfo=datetime.timezone.utc), 'commenter': 'WickedShell', 'type': 'User'}, {'comment_id': 477002481, 'comment_body': ""txs, I've replaced all math.pi/180 with math.radians() and 180/math.pi with math.degrees()"", 'comment_created': datetime.datetime(2020, 8, 26, 2, 55, 50, tzinfo=datetime.timezone.utc), 'commenter': 'rmackay9', 'type': 'User'}, {'comment_id': 477002742, 'comment_body': 'shortened the return calculations, txs!', 'comment_created': datetime.datetime(2020, 8, 26, 2, 56, 56, tzinfo=datetime.timezone.utc), 'commenter': 'rmackay9', 'type': 'User'}, {'comment_id': 477028932, 'comment_body': 'yes, fair enough, zapped!', 'comment_created': datetime.datetime(2020, 8, 26, 4, 37, 20, tzinfo=datetime.timezone.utc), 'commenter': 'rmackay9', 'type': 'User'}, {'comment_id': 477029836, 'comment_body': 'yes, I wanted to put these into a structure but didn\'t know how to so I just made all the variables start with the ""gait_"" prefix.  I\'ve read up a bit on tables and I think we can move them into one although maybe we\'d best do that as part of a follow-up PR.', 'comment_created': datetime.datetime(2020, 8, 26, 4, 40, 58, tzinfo=datetime.timezone.utc), 'commenter': 'rmackay9', 'type': 'User'}, {'comment_id': 477033188, 'comment_body': ""yes, good idea.  I've added this to the list of issues to correct with the script. https://github.com/ArduPilot/ardupilot/issues/15112.  So we won't fix this as part of this PR but we have added it to the to-do list."", 'comment_created': datetime.datetime(2020, 8, 26, 4, 54, 8, tzinfo=datetime.timezone.utc), 'commenter': 'rmackay9', 'type': 'User'}, {'comment_id': 477033307, 'comment_body': ""I've asked @ashvath100 to have a look at this.  I'm not sure what the fix should be."", 'comment_created': datetime.datetime(2020, 8, 26, 4, 54, 35, tzinfo=datetime.timezone.utc), 'commenter': 'rmackay9', 'type': 'User'}, {'comment_id': 477033524, 'comment_body': ""I've added this to the to-do list as well. https://github.com/ArduPilot/ardupilot/issues/15112"", 'comment_created': datetime.datetime(2020, 8, 26, 4, 55, 25, tzinfo=datetime.timezone.utc), 'commenter': 'rmackay9', 'type': 'User'}, {'comment_id': 477053525, 'comment_body': ""All the arguments here are technically aliasing the local upvalue that is declared at the top of the script, there isn't really an advantage by passing it as an argument here, as it can just lead to confusion."", 'comment_created': datetime.datetime(2020, 8, 26, 6, 2, 59, tzinfo=datetime.timezone.utc), 'commenter': 'WickedShell', 'type': 'User'}, {'comment_id': 477053834, 'comment_body': ""Looking at this further, building a table to return here isn't actually needed, all you do is unpack this at the caller, you could just use multiple return values if you wanted, which I suspect would reduce the amount of garbage created. (You'd need to test to verify that)"", 'comment_created': datetime.datetime(2020, 8, 26, 6, 3, 57, tzinfo=datetime.timezone.utc), 'commenter': 'WickedShell', 'type': 'User'}, {'comment_id': 477054915, 'comment_body': ""This won't handle time wrapping correctly, times need to only be subtracted."", 'comment_created': datetime.datetime(2020, 8, 26, 6, 6, 57, tzinfo=datetime.timezone.utc), 'commenter': 'WickedShell', 'type': 'User'}, {'comment_id': 477056534, 'comment_body': ""Given that you always index the table here with 1 and 2 that doesn't actually seem to be helping from a readability perspective. Given that I'd probably make this a pair of locals, and use that in the rest of the function. It should generate less garbage, and run faster.\r\n```suggestion\r\n    local totaldist_x = X + Xdist + body_pos_x\r\n    local totaldist_y =  Y + Ydist + body_pos_y\r\n```"", 'comment_created': datetime.datetime(2020, 8, 26, 6, 11, 35, tzinfo=datetime.timezone.utc), 'commenter': 'WickedShell', 'type': 'User'}, {'comment_id': 477057470, 'comment_body': 'This is replacing the entire angles table with a new angles table, why not edit just the first index? (Again skipping making the second table). If you use the multiple returns suggestion above though then this is more obvious that you are just tweaking a single axis upwards.\r\n```suggestion\r\n    angles1[1] = -45 + angles1[1]\r\n```', 'comment_created': datetime.datetime(2020, 8, 26, 6, 14, 9, tzinfo=datetime.timezone.utc), 'commenter': 'WickedShell', 'type': 'User'}, {'comment_id': 477057876, 'comment_body': 'How is `angles` any different then what is already contained in `current` at this point?', 'comment_created': datetime.datetime(2020, 8, 26, 6, 15, 12, tzinfo=datetime.timezone.utc), 'commenter': 'WickedShell', 'type': 'User'}, {'comment_id': 477214145, 'comment_body': ""yes, that's not great.  removed the arguments."", 'comment_created': datetime.datetime(2020, 8, 26, 10, 59, 9, tzinfo=datetime.timezone.utc), 'commenter': 'rmackay9', 'type': 'User'}, {'comment_id': 478202825, 'comment_body': 'Txs.  We think this line should work, ""return (millis() - start_time) > target_time""', 'comment_created': datetime.datetime(2020, 8, 27, 7, 7, 40, tzinfo=datetime.timezone.utc), 'commenter': 'rmackay9', 'type': 'User'}, {'comment_id': 480075559, 'comment_body': 'Ok this has been fixed now, so it is now ""(gate_lifted_steps > 0)""', 'comment_created': datetime.datetime(2020, 8, 31, 11, 45, 24, tzinfo=datetime.timezone.utc), 'commenter': 'rmackay9', 'type': 'User'}, {'comment_id': 480076030, 'comment_body': 'This time wrap issue has been addressed now.  The new line is, ""return (millis() - start_time) > target_time""', 'comment_created': datetime.datetime(2020, 8, 31, 11, 46, 31, tzinfo=datetime.timezone.utc), 'commenter': 'rmackay9', 'type': 'User'}, {'comment_id': 480076303, 'comment_body': 'This suggested change has been included in the last commit, thanks!', 'comment_created': datetime.datetime(2020, 8, 31, 11, 47, 12, tzinfo=datetime.timezone.utc), 'commenter': 'rmackay9', 'type': 'User'}, {'comment_id': 480076611, 'comment_body': 'the suggested fix has been included in the last commit, thanks again!', 'comment_created': datetime.datetime(2020, 8, 31, 11, 48, 3, tzinfo=datetime.timezone.utc), 'commenter': 'rmackay9', 'type': 'User'}, {'comment_id': 480079749, 'comment_body': ""ok, so main_inverse_kinematics has been updated to both set current and then return it which is a bit odd.  I think in a follow-up PR we will make current local (and probably change it's name).  last_angle will remain global."", 'comment_created': datetime.datetime(2020, 8, 31, 11, 54, 8, tzinfo=datetime.timezone.utc), 'commenter': 'rmackay9', 'type': 'User'}, {'comment_id': 480083415, 'comment_body': ""Ok, thanks for this.  We're going to address this in a follow-up PR if that's OK."", 'comment_created': datetime.datetime(2020, 8, 31, 12, 2, 8, tzinfo=datetime.timezone.utc), 'commenter': 'rmackay9', 'type': 'User'}]","[{'commit_sha': 'd98b00f2ee80784ecb83fe3e4fae2a4855d27d6d', 'committer_username': 'IamPete1', 'committer_name': 'Peter Hall', 'committer_email': None, 'commit_date': datetime.datetime(2017, 10, 28, 10, 43, 39, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7ef6456dcbaa0d86df92b6d206c07cfdfa478825', 'committer_username': 'IamPete1', 'committer_name': 'Peter Hall', 'committer_email': None, 'commit_date': datetime.datetime(2017, 10, 28, 10, 43, 39, tzinfo=datetime.timezone.utc)}, {'commit_sha': '55cc94a048b8e8e5ad0cc3a0cde6ee47486b2a6e', 'committer_username': 'ashvath100', 'committer_name': 'ashvath', 'committer_email': 'ashvath100@gmail.com', 'commit_date': datetime.datetime(2018, 1, 28, 16, 58, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'eb2e621711308931c8afb2e2232444d7e8d39190', 'committer_username': 'ashvath100', 'committer_name': 'ashvath', 'committer_email': 'ashvath100@gmail.com', 'commit_date': datetime.datetime(2018, 1, 28, 16, 58, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '88d22159b345783f41b292b7ceba5cd8b984f610', 'committer_username': 'ashvath100', 'committer_name': 'ashvath', 'committer_email': 'ashvath100@gmail.com', 'commit_date': datetime.datetime(2018, 1, 28, 16, 58, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a46fa3b79ad282eb945854ce6edf70dd5b896ef5', 'committer_username': 'rmackay9', 'committer_name': 'Randy Mackay', 'committer_email': 'rmackay9@yahoo.com', 'commit_date': datetime.datetime(2012, 3, 4, 0, 2, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '42d818598d229a860939685798c9344c09dbf21e', 'committer_username': 'rmackay9', 'committer_name': 'Randy Mackay', 'committer_email': 'rmackay9@yahoo.com', 'commit_date': datetime.datetime(2012, 3, 4, 0, 2, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '72b1878f28e342b7a1dc603e38b7ccc53f19b992', 'committer_username': 'ashvath100', 'committer_name': 'ashvath', 'committer_email': 'ashvath100@gmail.com', 'commit_date': datetime.datetime(2018, 1, 28, 16, 58, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9abae9108bec45dd18c16f77b0e0cedc74c45022', 'committer_username': 'ashvath100', 'committer_name': 'ashvath', 'committer_email': 'ashvath100@gmail.com', 'commit_date': datetime.datetime(2018, 1, 28, 16, 58, 25, tzinfo=datetime.timezone.utc)}]",Randy Mackay,1498098,rmackay9@yahoo.com,User,,29,,3,583
473564441,Rover/AP_Scripting: add basic walking robot support,"This is a cut-down version of PR https://github.com/ArduPilot/ardupilot/pull/14884 to add support for four legged walking robots.  This also includes a couple of commits from @IamPete1's PR https://github.com/ArduPilot/ardupilot/pull/11034 to add roll and pitch support to Rover.

The changes in this PR are:

- RC_Channel Option definitions for Roll and Pitch input.  These will eventually be used to replace RCMAP but for now only Rover's RCx_OPTION parameter description includes these new items
- Rover's motor library is slightly enhanced to hold the roll and pitch in the range -1 to +1
- Rover's get_control_output() is enhanced to make the roll and pitch available to lua scripts
- quadruped.lua example script added which controls 12 servos to make the robot walk
- pybullet startup script and model for a quadruped

This has been tested in SITL and on a real vehicle.

The script has a number of known issues (https://github.com/ArduPilot/ardupilot/issues/15112) that we hope to resolve in follow-up PRs.

All feedback greatly welcome!",True,15159,https://api.github.com/repos/ArduPilot/ardupilot/pulls/15159,https://github.com/ArduPilot/ardupilot/pull/15159,closed,1003,5,14,9,1,35,3,0,"[{'name': 'Enhancement'}, {'name': 'Rover'}, {'name': 'Scripting'}]",2020-08-25 23:52:39+00:00,2020-09-01 00:33:26+00:00,520847.0,"6 days, 0:40:47","[{'comment_id': 476900116, 'comment_body': 'd1 is already local in this scope, no need to redeclare `local` at the front', 'comment_created': datetime.datetime(2020, 8, 26, 0, 11, 25, tzinfo=datetime.timezone.utc), 'commenter': 'WickedShell', 'type': 'User'}, {'comment_id': 476900587, 'comment_body': 'This whole array appears to only be needed in one function, where the PWM is calculated then output, why not remove this, and directly output it? It would reduce the memory cost here, and should be faster.', 'comment_created': datetime.datetime(2020, 8, 26, 0, 12, 3, tzinfo=datetime.timezone.utc), 'commenter': 'WickedShell', 'type': 'User'}, {'comment_id': 476901639, 'comment_body': ""Isn't this duplicating the `move_requested` calculation already done up in `calc_gait_sequence`, why not pass `move_requested` as an argument to this function and not recalculate it for each leg?"", 'comment_created': datetime.datetime(2020, 8, 26, 0, 13, 39, tzinfo=datetime.timezone.utc), 'commenter': 'WickedShell', 'type': 'User'}, {'comment_id': 476904523, 'comment_body': '`(gait_lifted_steps and 1)` is odd, this looks like a mistake. `and` is a logical operator, not a bitwise operator, and 0 and 1 are both truthy so the whole expresion here is always true.\r\n\r\nREPL test if you are curious:\r\n``` lua\r\n> true and 1\r\n1\r\n> 1 & 2\r\n0\r\n> 1 & 1\r\n1\r\n> if 0 then\r\n>>   print(""HI"")\r\n>> end\r\nHI\r\n> if nil then\r\n  print(""HI"")\r\nend\r\n> if false then\r\n  print(""HI"")\r\nend\r\n> if true then\r\n  print(""HI"")\r\nend\r\nHI\r\n```', 'comment_created': datetime.datetime(2020, 8, 26, 0, 18, 1, tzinfo=datetime.timezone.utc), 'commenter': 'WickedShell', 'type': 'User'}, {'comment_id': 476905715, 'comment_body': ""Not critical, but all the normal comments about multiplying by `0.5` being faster are still true. In practice we're off in script land where everything's slow anyways, but just pointing it out."", 'comment_created': datetime.datetime(2020, 8, 26, 0, 19, 53, tzinfo=datetime.timezone.utc), 'commenter': 'WickedShell', 'type': 'User'}, {'comment_id': 476907906, 'comment_body': 'Why bind to the local instead of just returning? Not sure it actually tweaks the generated bytecode at all, but can be nicer to read. (And keeps the script a bit shorter)', 'comment_created': datetime.datetime(2020, 8, 26, 0, 23, 1, tzinfo=datetime.timezone.utc), 'commenter': 'WickedShell', 'type': 'User'}, {'comment_id': 476911096, 'comment_body': 'As a note there are helpers for math.rad() and math.deg() to convert  these rather then having to multiply by `math.pi/180` everywhere, which is both clearer, less error prone, and should be faster.', 'comment_created': datetime.datetime(2020, 8, 26, 0, 28, 6, tzinfo=datetime.timezone.utc), 'commenter': 'WickedShell', 'type': 'User'}, {'comment_id': 476911845, 'comment_body': '```suggestion\r\n    return (target_time + start_time) <= now\r\n```', 'comment_created': datetime.datetime(2020, 8, 26, 0, 29, 16, tzinfo=datetime.timezone.utc), 'commenter': 'WickedShell', 'type': 'User'}, {'comment_id': 476913045, 'comment_body': ""So from a style point of view you'd normally end up starting to lump these into a table with keys of `step`, `step_total` etc, rather then have a local for each. Not a huge deal, and theirs some arguments either way, but that can sometimes help clean up and encapsulate the code better."", 'comment_created': datetime.datetime(2020, 8, 26, 0, 31, 5, tzinfo=datetime.timezone.utc), 'commenter': 'WickedShell', 'type': 'User'}, {'comment_id': 476997676, 'comment_body': 'removed local from in front of d1 and d2, thanks!', 'comment_created': datetime.datetime(2020, 8, 26, 2, 38, 27, tzinfo=datetime.timezone.utc), 'commenter': 'rmackay9', 'type': 'User'}, {'comment_id': 476998470, 'comment_body': 'txs, moved pwm to be local to the update function', 'comment_created': datetime.datetime(2020, 8, 26, 2, 41, 18, tzinfo=datetime.timezone.utc), 'commenter': 'rmackay9', 'type': 'User'}, {'comment_id': 476999001, 'comment_body': 'Thanks replaced all instances of ""/2"" with ""* 0.5""', 'comment_created': datetime.datetime(2020, 8, 26, 2, 43, 12, tzinfo=datetime.timezone.utc), 'commenter': 'rmackay9', 'type': 'User'}, {'comment_id': 476999236, 'comment_body': 'thanks, directly return the array', 'comment_created': datetime.datetime(2020, 8, 26, 2, 44, 11, tzinfo=datetime.timezone.utc), 'commenter': 'rmackay9', 'type': 'User'}, {'comment_id': 477002151, 'comment_body': 'Why even have it local? You compute the value, store it in the array, then immediately send it to an output. Why not send the value to the output without ever having the array to store it in? (Saves the entire array from being in memory)', 'comment_created': datetime.datetime(2020, 8, 26, 2, 54, 45, tzinfo=datetime.timezone.utc), 'commenter': 'WickedShell', 'type': 'User'}, {'comment_id': 477002481, 'comment_body': ""txs, I've replaced all math.pi/180 with math.radians() and 180/math.pi with math.degrees()"", 'comment_created': datetime.datetime(2020, 8, 26, 2, 55, 50, tzinfo=datetime.timezone.utc), 'commenter': 'rmackay9', 'type': 'User'}, {'comment_id': 477002742, 'comment_body': 'shortened the return calculations, txs!', 'comment_created': datetime.datetime(2020, 8, 26, 2, 56, 56, tzinfo=datetime.timezone.utc), 'commenter': 'rmackay9', 'type': 'User'}, {'comment_id': 477028932, 'comment_body': 'yes, fair enough, zapped!', 'comment_created': datetime.datetime(2020, 8, 26, 4, 37, 20, tzinfo=datetime.timezone.utc), 'commenter': 'rmackay9', 'type': 'User'}, {'comment_id': 477029836, 'comment_body': 'yes, I wanted to put these into a structure but didn\'t know how to so I just made all the variables start with the ""gait_"" prefix.  I\'ve read up a bit on tables and I think we can move them into one although maybe we\'d best do that as part of a follow-up PR.', 'comment_created': datetime.datetime(2020, 8, 26, 4, 40, 58, tzinfo=datetime.timezone.utc), 'commenter': 'rmackay9', 'type': 'User'}, {'comment_id': 477033188, 'comment_body': ""yes, good idea.  I've added this to the list of issues to correct with the script. https://github.com/ArduPilot/ardupilot/issues/15112.  So we won't fix this as part of this PR but we have added it to the to-do list."", 'comment_created': datetime.datetime(2020, 8, 26, 4, 54, 8, tzinfo=datetime.timezone.utc), 'commenter': 'rmackay9', 'type': 'User'}, {'comment_id': 477033307, 'comment_body': ""I've asked @ashvath100 to have a look at this.  I'm not sure what the fix should be."", 'comment_created': datetime.datetime(2020, 8, 26, 4, 54, 35, tzinfo=datetime.timezone.utc), 'commenter': 'rmackay9', 'type': 'User'}, {'comment_id': 477033524, 'comment_body': ""I've added this to the to-do list as well. https://github.com/ArduPilot/ardupilot/issues/15112"", 'comment_created': datetime.datetime(2020, 8, 26, 4, 55, 25, tzinfo=datetime.timezone.utc), 'commenter': 'rmackay9', 'type': 'User'}, {'comment_id': 477053525, 'comment_body': ""All the arguments here are technically aliasing the local upvalue that is declared at the top of the script, there isn't really an advantage by passing it as an argument here, as it can just lead to confusion."", 'comment_created': datetime.datetime(2020, 8, 26, 6, 2, 59, tzinfo=datetime.timezone.utc), 'commenter': 'WickedShell', 'type': 'User'}, {'comment_id': 477053834, 'comment_body': ""Looking at this further, building a table to return here isn't actually needed, all you do is unpack this at the caller, you could just use multiple return values if you wanted, which I suspect would reduce the amount of garbage created. (You'd need to test to verify that)"", 'comment_created': datetime.datetime(2020, 8, 26, 6, 3, 57, tzinfo=datetime.timezone.utc), 'commenter': 'WickedShell', 'type': 'User'}, {'comment_id': 477054915, 'comment_body': ""This won't handle time wrapping correctly, times need to only be subtracted."", 'comment_created': datetime.datetime(2020, 8, 26, 6, 6, 57, tzinfo=datetime.timezone.utc), 'commenter': 'WickedShell', 'type': 'User'}, {'comment_id': 477056534, 'comment_body': ""Given that you always index the table here with 1 and 2 that doesn't actually seem to be helping from a readability perspective. Given that I'd probably make this a pair of locals, and use that in the rest of the function. It should generate less garbage, and run faster.\r\n```suggestion\r\n    local totaldist_x = X + Xdist + body_pos_x\r\n    local totaldist_y =  Y + Ydist + body_pos_y\r\n```"", 'comment_created': datetime.datetime(2020, 8, 26, 6, 11, 35, tzinfo=datetime.timezone.utc), 'commenter': 'WickedShell', 'type': 'User'}, {'comment_id': 477057470, 'comment_body': 'This is replacing the entire angles table with a new angles table, why not edit just the first index? (Again skipping making the second table). If you use the multiple returns suggestion above though then this is more obvious that you are just tweaking a single axis upwards.\r\n```suggestion\r\n    angles1[1] = -45 + angles1[1]\r\n```', 'comment_created': datetime.datetime(2020, 8, 26, 6, 14, 9, tzinfo=datetime.timezone.utc), 'commenter': 'WickedShell', 'type': 'User'}, {'comment_id': 477057876, 'comment_body': 'How is `angles` any different then what is already contained in `current` at this point?', 'comment_created': datetime.datetime(2020, 8, 26, 6, 15, 12, tzinfo=datetime.timezone.utc), 'commenter': 'WickedShell', 'type': 'User'}, {'comment_id': 477214145, 'comment_body': ""yes, that's not great.  removed the arguments."", 'comment_created': datetime.datetime(2020, 8, 26, 10, 59, 9, tzinfo=datetime.timezone.utc), 'commenter': 'rmackay9', 'type': 'User'}, {'comment_id': 478202825, 'comment_body': 'Txs.  We think this line should work, ""return (millis() - start_time) > target_time""', 'comment_created': datetime.datetime(2020, 8, 27, 7, 7, 40, tzinfo=datetime.timezone.utc), 'commenter': 'rmackay9', 'type': 'User'}, {'comment_id': 480075559, 'comment_body': 'Ok this has been fixed now, so it is now ""(gate_lifted_steps > 0)""', 'comment_created': datetime.datetime(2020, 8, 31, 11, 45, 24, tzinfo=datetime.timezone.utc), 'commenter': 'rmackay9', 'type': 'User'}, {'comment_id': 480076030, 'comment_body': 'This time wrap issue has been addressed now.  The new line is, ""return (millis() - start_time) > target_time""', 'comment_created': datetime.datetime(2020, 8, 31, 11, 46, 31, tzinfo=datetime.timezone.utc), 'commenter': 'rmackay9', 'type': 'User'}, {'comment_id': 480076303, 'comment_body': 'This suggested change has been included in the last commit, thanks!', 'comment_created': datetime.datetime(2020, 8, 31, 11, 47, 12, tzinfo=datetime.timezone.utc), 'commenter': 'rmackay9', 'type': 'User'}, {'comment_id': 480076611, 'comment_body': 'the suggested fix has been included in the last commit, thanks again!', 'comment_created': datetime.datetime(2020, 8, 31, 11, 48, 3, tzinfo=datetime.timezone.utc), 'commenter': 'rmackay9', 'type': 'User'}, {'comment_id': 480079749, 'comment_body': ""ok, so main_inverse_kinematics has been updated to both set current and then return it which is a bit odd.  I think in a follow-up PR we will make current local (and probably change it's name).  last_angle will remain global."", 'comment_created': datetime.datetime(2020, 8, 31, 11, 54, 8, tzinfo=datetime.timezone.utc), 'commenter': 'rmackay9', 'type': 'User'}, {'comment_id': 480083415, 'comment_body': ""Ok, thanks for this.  We're going to address this in a follow-up PR if that's OK."", 'comment_created': datetime.datetime(2020, 8, 31, 12, 2, 8, tzinfo=datetime.timezone.utc), 'commenter': 'rmackay9', 'type': 'User'}]","[{'commit_sha': 'd98b00f2ee80784ecb83fe3e4fae2a4855d27d6d', 'committer_username': 'IamPete1', 'committer_name': 'Peter Hall', 'committer_email': None, 'commit_date': datetime.datetime(2017, 10, 28, 10, 43, 39, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7ef6456dcbaa0d86df92b6d206c07cfdfa478825', 'committer_username': 'IamPete1', 'committer_name': 'Peter Hall', 'committer_email': None, 'commit_date': datetime.datetime(2017, 10, 28, 10, 43, 39, tzinfo=datetime.timezone.utc)}, {'commit_sha': '55cc94a048b8e8e5ad0cc3a0cde6ee47486b2a6e', 'committer_username': 'ashvath100', 'committer_name': 'ashvath', 'committer_email': 'ashvath100@gmail.com', 'commit_date': datetime.datetime(2018, 1, 28, 16, 58, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'eb2e621711308931c8afb2e2232444d7e8d39190', 'committer_username': 'ashvath100', 'committer_name': 'ashvath', 'committer_email': 'ashvath100@gmail.com', 'commit_date': datetime.datetime(2018, 1, 28, 16, 58, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '88d22159b345783f41b292b7ceba5cd8b984f610', 'committer_username': 'ashvath100', 'committer_name': 'ashvath', 'committer_email': 'ashvath100@gmail.com', 'commit_date': datetime.datetime(2018, 1, 28, 16, 58, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a46fa3b79ad282eb945854ce6edf70dd5b896ef5', 'committer_username': 'rmackay9', 'committer_name': 'Randy Mackay', 'committer_email': 'rmackay9@yahoo.com', 'commit_date': datetime.datetime(2012, 3, 4, 0, 2, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '42d818598d229a860939685798c9344c09dbf21e', 'committer_username': 'rmackay9', 'committer_name': 'Randy Mackay', 'committer_email': 'rmackay9@yahoo.com', 'commit_date': datetime.datetime(2012, 3, 4, 0, 2, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '72b1878f28e342b7a1dc603e38b7ccc53f19b992', 'committer_username': 'ashvath100', 'committer_name': 'ashvath', 'committer_email': 'ashvath100@gmail.com', 'commit_date': datetime.datetime(2018, 1, 28, 16, 58, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9abae9108bec45dd18c16f77b0e0cedc74c45022', 'committer_username': 'ashvath100', 'committer_name': 'ashvath', 'committer_email': 'ashvath100@gmail.com', 'commit_date': datetime.datetime(2018, 1, 28, 16, 58, 25, tzinfo=datetime.timezone.utc)}]",Randy Mackay,1498098,rmackay9@yahoo.com,User,,29,,3,583
473564441,Rover/AP_Scripting: add basic walking robot support,"This is a cut-down version of PR https://github.com/ArduPilot/ardupilot/pull/14884 to add support for four legged walking robots.  This also includes a couple of commits from @IamPete1's PR https://github.com/ArduPilot/ardupilot/pull/11034 to add roll and pitch support to Rover.

The changes in this PR are:

- RC_Channel Option definitions for Roll and Pitch input.  These will eventually be used to replace RCMAP but for now only Rover's RCx_OPTION parameter description includes these new items
- Rover's motor library is slightly enhanced to hold the roll and pitch in the range -1 to +1
- Rover's get_control_output() is enhanced to make the roll and pitch available to lua scripts
- quadruped.lua example script added which controls 12 servos to make the robot walk
- pybullet startup script and model for a quadruped

This has been tested in SITL and on a real vehicle.

The script has a number of known issues (https://github.com/ArduPilot/ardupilot/issues/15112) that we hope to resolve in follow-up PRs.

All feedback greatly welcome!",True,15159,https://api.github.com/repos/ArduPilot/ardupilot/pulls/15159,https://github.com/ArduPilot/ardupilot/pull/15159,closed,1003,5,14,9,1,35,3,0,"[{'name': 'Enhancement'}, {'name': 'Rover'}, {'name': 'Scripting'}]",2020-08-25 23:52:39+00:00,2020-09-01 00:33:26+00:00,520847.0,"6 days, 0:40:47","[{'comment_id': 476900116, 'comment_body': 'd1 is already local in this scope, no need to redeclare `local` at the front', 'comment_created': datetime.datetime(2020, 8, 26, 0, 11, 25, tzinfo=datetime.timezone.utc), 'commenter': 'WickedShell', 'type': 'User'}, {'comment_id': 476900587, 'comment_body': 'This whole array appears to only be needed in one function, where the PWM is calculated then output, why not remove this, and directly output it? It would reduce the memory cost here, and should be faster.', 'comment_created': datetime.datetime(2020, 8, 26, 0, 12, 3, tzinfo=datetime.timezone.utc), 'commenter': 'WickedShell', 'type': 'User'}, {'comment_id': 476901639, 'comment_body': ""Isn't this duplicating the `move_requested` calculation already done up in `calc_gait_sequence`, why not pass `move_requested` as an argument to this function and not recalculate it for each leg?"", 'comment_created': datetime.datetime(2020, 8, 26, 0, 13, 39, tzinfo=datetime.timezone.utc), 'commenter': 'WickedShell', 'type': 'User'}, {'comment_id': 476904523, 'comment_body': '`(gait_lifted_steps and 1)` is odd, this looks like a mistake. `and` is a logical operator, not a bitwise operator, and 0 and 1 are both truthy so the whole expresion here is always true.\r\n\r\nREPL test if you are curious:\r\n``` lua\r\n> true and 1\r\n1\r\n> 1 & 2\r\n0\r\n> 1 & 1\r\n1\r\n> if 0 then\r\n>>   print(""HI"")\r\n>> end\r\nHI\r\n> if nil then\r\n  print(""HI"")\r\nend\r\n> if false then\r\n  print(""HI"")\r\nend\r\n> if true then\r\n  print(""HI"")\r\nend\r\nHI\r\n```', 'comment_created': datetime.datetime(2020, 8, 26, 0, 18, 1, tzinfo=datetime.timezone.utc), 'commenter': 'WickedShell', 'type': 'User'}, {'comment_id': 476905715, 'comment_body': ""Not critical, but all the normal comments about multiplying by `0.5` being faster are still true. In practice we're off in script land where everything's slow anyways, but just pointing it out."", 'comment_created': datetime.datetime(2020, 8, 26, 0, 19, 53, tzinfo=datetime.timezone.utc), 'commenter': 'WickedShell', 'type': 'User'}, {'comment_id': 476907906, 'comment_body': 'Why bind to the local instead of just returning? Not sure it actually tweaks the generated bytecode at all, but can be nicer to read. (And keeps the script a bit shorter)', 'comment_created': datetime.datetime(2020, 8, 26, 0, 23, 1, tzinfo=datetime.timezone.utc), 'commenter': 'WickedShell', 'type': 'User'}, {'comment_id': 476911096, 'comment_body': 'As a note there are helpers for math.rad() and math.deg() to convert  these rather then having to multiply by `math.pi/180` everywhere, which is both clearer, less error prone, and should be faster.', 'comment_created': datetime.datetime(2020, 8, 26, 0, 28, 6, tzinfo=datetime.timezone.utc), 'commenter': 'WickedShell', 'type': 'User'}, {'comment_id': 476911845, 'comment_body': '```suggestion\r\n    return (target_time + start_time) <= now\r\n```', 'comment_created': datetime.datetime(2020, 8, 26, 0, 29, 16, tzinfo=datetime.timezone.utc), 'commenter': 'WickedShell', 'type': 'User'}, {'comment_id': 476913045, 'comment_body': ""So from a style point of view you'd normally end up starting to lump these into a table with keys of `step`, `step_total` etc, rather then have a local for each. Not a huge deal, and theirs some arguments either way, but that can sometimes help clean up and encapsulate the code better."", 'comment_created': datetime.datetime(2020, 8, 26, 0, 31, 5, tzinfo=datetime.timezone.utc), 'commenter': 'WickedShell', 'type': 'User'}, {'comment_id': 476997676, 'comment_body': 'removed local from in front of d1 and d2, thanks!', 'comment_created': datetime.datetime(2020, 8, 26, 2, 38, 27, tzinfo=datetime.timezone.utc), 'commenter': 'rmackay9', 'type': 'User'}, {'comment_id': 476998470, 'comment_body': 'txs, moved pwm to be local to the update function', 'comment_created': datetime.datetime(2020, 8, 26, 2, 41, 18, tzinfo=datetime.timezone.utc), 'commenter': 'rmackay9', 'type': 'User'}, {'comment_id': 476999001, 'comment_body': 'Thanks replaced all instances of ""/2"" with ""* 0.5""', 'comment_created': datetime.datetime(2020, 8, 26, 2, 43, 12, tzinfo=datetime.timezone.utc), 'commenter': 'rmackay9', 'type': 'User'}, {'comment_id': 476999236, 'comment_body': 'thanks, directly return the array', 'comment_created': datetime.datetime(2020, 8, 26, 2, 44, 11, tzinfo=datetime.timezone.utc), 'commenter': 'rmackay9', 'type': 'User'}, {'comment_id': 477002151, 'comment_body': 'Why even have it local? You compute the value, store it in the array, then immediately send it to an output. Why not send the value to the output without ever having the array to store it in? (Saves the entire array from being in memory)', 'comment_created': datetime.datetime(2020, 8, 26, 2, 54, 45, tzinfo=datetime.timezone.utc), 'commenter': 'WickedShell', 'type': 'User'}, {'comment_id': 477002481, 'comment_body': ""txs, I've replaced all math.pi/180 with math.radians() and 180/math.pi with math.degrees()"", 'comment_created': datetime.datetime(2020, 8, 26, 2, 55, 50, tzinfo=datetime.timezone.utc), 'commenter': 'rmackay9', 'type': 'User'}, {'comment_id': 477002742, 'comment_body': 'shortened the return calculations, txs!', 'comment_created': datetime.datetime(2020, 8, 26, 2, 56, 56, tzinfo=datetime.timezone.utc), 'commenter': 'rmackay9', 'type': 'User'}, {'comment_id': 477028932, 'comment_body': 'yes, fair enough, zapped!', 'comment_created': datetime.datetime(2020, 8, 26, 4, 37, 20, tzinfo=datetime.timezone.utc), 'commenter': 'rmackay9', 'type': 'User'}, {'comment_id': 477029836, 'comment_body': 'yes, I wanted to put these into a structure but didn\'t know how to so I just made all the variables start with the ""gait_"" prefix.  I\'ve read up a bit on tables and I think we can move them into one although maybe we\'d best do that as part of a follow-up PR.', 'comment_created': datetime.datetime(2020, 8, 26, 4, 40, 58, tzinfo=datetime.timezone.utc), 'commenter': 'rmackay9', 'type': 'User'}, {'comment_id': 477033188, 'comment_body': ""yes, good idea.  I've added this to the list of issues to correct with the script. https://github.com/ArduPilot/ardupilot/issues/15112.  So we won't fix this as part of this PR but we have added it to the to-do list."", 'comment_created': datetime.datetime(2020, 8, 26, 4, 54, 8, tzinfo=datetime.timezone.utc), 'commenter': 'rmackay9', 'type': 'User'}, {'comment_id': 477033307, 'comment_body': ""I've asked @ashvath100 to have a look at this.  I'm not sure what the fix should be."", 'comment_created': datetime.datetime(2020, 8, 26, 4, 54, 35, tzinfo=datetime.timezone.utc), 'commenter': 'rmackay9', 'type': 'User'}, {'comment_id': 477033524, 'comment_body': ""I've added this to the to-do list as well. https://github.com/ArduPilot/ardupilot/issues/15112"", 'comment_created': datetime.datetime(2020, 8, 26, 4, 55, 25, tzinfo=datetime.timezone.utc), 'commenter': 'rmackay9', 'type': 'User'}, {'comment_id': 477053525, 'comment_body': ""All the arguments here are technically aliasing the local upvalue that is declared at the top of the script, there isn't really an advantage by passing it as an argument here, as it can just lead to confusion."", 'comment_created': datetime.datetime(2020, 8, 26, 6, 2, 59, tzinfo=datetime.timezone.utc), 'commenter': 'WickedShell', 'type': 'User'}, {'comment_id': 477053834, 'comment_body': ""Looking at this further, building a table to return here isn't actually needed, all you do is unpack this at the caller, you could just use multiple return values if you wanted, which I suspect would reduce the amount of garbage created. (You'd need to test to verify that)"", 'comment_created': datetime.datetime(2020, 8, 26, 6, 3, 57, tzinfo=datetime.timezone.utc), 'commenter': 'WickedShell', 'type': 'User'}, {'comment_id': 477054915, 'comment_body': ""This won't handle time wrapping correctly, times need to only be subtracted."", 'comment_created': datetime.datetime(2020, 8, 26, 6, 6, 57, tzinfo=datetime.timezone.utc), 'commenter': 'WickedShell', 'type': 'User'}, {'comment_id': 477056534, 'comment_body': ""Given that you always index the table here with 1 and 2 that doesn't actually seem to be helping from a readability perspective. Given that I'd probably make this a pair of locals, and use that in the rest of the function. It should generate less garbage, and run faster.\r\n```suggestion\r\n    local totaldist_x = X + Xdist + body_pos_x\r\n    local totaldist_y =  Y + Ydist + body_pos_y\r\n```"", 'comment_created': datetime.datetime(2020, 8, 26, 6, 11, 35, tzinfo=datetime.timezone.utc), 'commenter': 'WickedShell', 'type': 'User'}, {'comment_id': 477057470, 'comment_body': 'This is replacing the entire angles table with a new angles table, why not edit just the first index? (Again skipping making the second table). If you use the multiple returns suggestion above though then this is more obvious that you are just tweaking a single axis upwards.\r\n```suggestion\r\n    angles1[1] = -45 + angles1[1]\r\n```', 'comment_created': datetime.datetime(2020, 8, 26, 6, 14, 9, tzinfo=datetime.timezone.utc), 'commenter': 'WickedShell', 'type': 'User'}, {'comment_id': 477057876, 'comment_body': 'How is `angles` any different then what is already contained in `current` at this point?', 'comment_created': datetime.datetime(2020, 8, 26, 6, 15, 12, tzinfo=datetime.timezone.utc), 'commenter': 'WickedShell', 'type': 'User'}, {'comment_id': 477214145, 'comment_body': ""yes, that's not great.  removed the arguments."", 'comment_created': datetime.datetime(2020, 8, 26, 10, 59, 9, tzinfo=datetime.timezone.utc), 'commenter': 'rmackay9', 'type': 'User'}, {'comment_id': 478202825, 'comment_body': 'Txs.  We think this line should work, ""return (millis() - start_time) > target_time""', 'comment_created': datetime.datetime(2020, 8, 27, 7, 7, 40, tzinfo=datetime.timezone.utc), 'commenter': 'rmackay9', 'type': 'User'}, {'comment_id': 480075559, 'comment_body': 'Ok this has been fixed now, so it is now ""(gate_lifted_steps > 0)""', 'comment_created': datetime.datetime(2020, 8, 31, 11, 45, 24, tzinfo=datetime.timezone.utc), 'commenter': 'rmackay9', 'type': 'User'}, {'comment_id': 480076030, 'comment_body': 'This time wrap issue has been addressed now.  The new line is, ""return (millis() - start_time) > target_time""', 'comment_created': datetime.datetime(2020, 8, 31, 11, 46, 31, tzinfo=datetime.timezone.utc), 'commenter': 'rmackay9', 'type': 'User'}, {'comment_id': 480076303, 'comment_body': 'This suggested change has been included in the last commit, thanks!', 'comment_created': datetime.datetime(2020, 8, 31, 11, 47, 12, tzinfo=datetime.timezone.utc), 'commenter': 'rmackay9', 'type': 'User'}, {'comment_id': 480076611, 'comment_body': 'the suggested fix has been included in the last commit, thanks again!', 'comment_created': datetime.datetime(2020, 8, 31, 11, 48, 3, tzinfo=datetime.timezone.utc), 'commenter': 'rmackay9', 'type': 'User'}, {'comment_id': 480079749, 'comment_body': ""ok, so main_inverse_kinematics has been updated to both set current and then return it which is a bit odd.  I think in a follow-up PR we will make current local (and probably change it's name).  last_angle will remain global."", 'comment_created': datetime.datetime(2020, 8, 31, 11, 54, 8, tzinfo=datetime.timezone.utc), 'commenter': 'rmackay9', 'type': 'User'}, {'comment_id': 480083415, 'comment_body': ""Ok, thanks for this.  We're going to address this in a follow-up PR if that's OK."", 'comment_created': datetime.datetime(2020, 8, 31, 12, 2, 8, tzinfo=datetime.timezone.utc), 'commenter': 'rmackay9', 'type': 'User'}]","[{'commit_sha': 'd98b00f2ee80784ecb83fe3e4fae2a4855d27d6d', 'committer_username': 'IamPete1', 'committer_name': 'Peter Hall', 'committer_email': None, 'commit_date': datetime.datetime(2017, 10, 28, 10, 43, 39, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7ef6456dcbaa0d86df92b6d206c07cfdfa478825', 'committer_username': 'IamPete1', 'committer_name': 'Peter Hall', 'committer_email': None, 'commit_date': datetime.datetime(2017, 10, 28, 10, 43, 39, tzinfo=datetime.timezone.utc)}, {'commit_sha': '55cc94a048b8e8e5ad0cc3a0cde6ee47486b2a6e', 'committer_username': 'ashvath100', 'committer_name': 'ashvath', 'committer_email': 'ashvath100@gmail.com', 'commit_date': datetime.datetime(2018, 1, 28, 16, 58, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'eb2e621711308931c8afb2e2232444d7e8d39190', 'committer_username': 'ashvath100', 'committer_name': 'ashvath', 'committer_email': 'ashvath100@gmail.com', 'commit_date': datetime.datetime(2018, 1, 28, 16, 58, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '88d22159b345783f41b292b7ceba5cd8b984f610', 'committer_username': 'ashvath100', 'committer_name': 'ashvath', 'committer_email': 'ashvath100@gmail.com', 'commit_date': datetime.datetime(2018, 1, 28, 16, 58, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a46fa3b79ad282eb945854ce6edf70dd5b896ef5', 'committer_username': 'rmackay9', 'committer_name': 'Randy Mackay', 'committer_email': 'rmackay9@yahoo.com', 'commit_date': datetime.datetime(2012, 3, 4, 0, 2, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '42d818598d229a860939685798c9344c09dbf21e', 'committer_username': 'rmackay9', 'committer_name': 'Randy Mackay', 'committer_email': 'rmackay9@yahoo.com', 'commit_date': datetime.datetime(2012, 3, 4, 0, 2, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '72b1878f28e342b7a1dc603e38b7ccc53f19b992', 'committer_username': 'ashvath100', 'committer_name': 'ashvath', 'committer_email': 'ashvath100@gmail.com', 'commit_date': datetime.datetime(2018, 1, 28, 16, 58, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9abae9108bec45dd18c16f77b0e0cedc74c45022', 'committer_username': 'ashvath100', 'committer_name': 'ashvath', 'committer_email': 'ashvath100@gmail.com', 'commit_date': datetime.datetime(2018, 1, 28, 16, 58, 25, tzinfo=datetime.timezone.utc)}]",Randy Mackay,1498098,rmackay9@yahoo.com,User,,29,,3,583
455262573,Rover: Walking robot support,"**This PR adds support for walking robots**

 [Demo video](https://youtu.be/79nVlsYmy2U)

**Steps to run simulation :** 
1. Ensure the PC is runing Ubuntu 18.04 (other versions may work but this has not been confirmed yet)
2. pip3 install pybullet
3. cd to the ardupilot/Rover directory
4. create a ""scripts"" directory and copy ""[/libraries/AP_Scripting/examples/quadruped.lua](https://github.com/ashvath100/ardupilot/blob/walkingrobot_support/libraries/AP_Scripting/examples/quadruped.lua)"" into it
5. start SITL using, ""../Tools/autotest/simvehicle.py --map --console -D -f JSON""
6. Enable scripting with ""param set SCR_ENABLE 1"" and then restart SITL
7.  From`ardupilot/libraries/SITL/examples/JSON/pybullet/`

     run `python3 walking_robot.py`

**Control inputs :** 
- Channel 1: Yaw input

- Channel 3: Throttle input 

- Channel 6: Gait select (switch)
rc 6 > 1500 : two legs alternating gait 
rc 6 < 1500 : one leg wave gait 

- Channel 7: Control mode selector (3 way switch)
rc 7 = 1500 : Height control 
rc 7 >1500 : Rotation control
rc 7 < 1500 : Position control

In Height control
- Channel 2: height input

In Rotation control 
- Channel 2: Roll input 
- Channel 4: Pitch input

In Position control
- Channel 2: X axis input 
- Channel 4: Y axis input

**To do:**
1. add Stabilize mode
2. Hardware testing  

",False,14884,https://api.github.com/repos/ArduPilot/ardupilot/pulls/14884,https://github.com/ArduPilot/ardupilot/pull/14884,closed,1290,4,20,12,4,9,3,0,"[{'name': 'Rover'}, {'name': 'SITL'}, {'name': 'GSoC'}]",2020-07-22 17:42:46+00:00,2020-09-01 00:37:32+00:00,3480886.0,"40 days, 6:54:46","[{'comment_id': 459242089, 'comment_body': 'I think this is a good way to do this actually.  Let\'s just change the ""selector"" to be an enum.', 'comment_created': datetime.datetime(2020, 7, 23, 6, 40, 6, tzinfo=datetime.timezone.utc), 'commenter': 'rmackay9', 'type': 'User'}, {'comment_id': 459242528, 'comment_body': 'small whitespace issue here', 'comment_created': datetime.datetime(2020, 7, 23, 6, 41, 18, tzinfo=datetime.timezone.utc), 'commenter': 'rmackay9', 'type': 'User'}, {'comment_id': 459242664, 'comment_body': 'extra blank line we can remove here.', 'comment_created': datetime.datetime(2020, 7, 23, 6, 41, 40, tzinfo=datetime.timezone.utc), 'commenter': 'rmackay9', 'type': 'User'}, {'comment_id': 459242989, 'comment_body': 'If we are going to have different walking bots mode we should consider an enum.  Using a float is a bit unusual for a ""mode"".', 'comment_created': datetime.datetime(2020, 7, 23, 6, 42, 32, tzinfo=datetime.timezone.utc), 'commenter': 'rmackay9', 'type': 'User'}, {'comment_id': 459243149, 'comment_body': 'small white space issue here (extra space)', 'comment_created': datetime.datetime(2020, 7, 23, 6, 42, 57, tzinfo=datetime.timezone.utc), 'commenter': 'rmackay9', 'type': 'User'}, {'comment_id': 459244394, 'comment_body': 'enum with a switch !', 'comment_created': datetime.datetime(2020, 7, 23, 6, 46, 19, tzinfo=datetime.timezone.utc), 'commenter': 'khancyr', 'type': 'User'}, {'comment_id': 459246936, 'comment_body': 'hopefully we can make this first argument use the enum value as well', 'comment_created': datetime.datetime(2020, 7, 23, 6, 52, 56, tzinfo=datetime.timezone.utc), 'commenter': 'rmackay9', 'type': 'User'}, {'comment_id': 459247883, 'comment_body': 'we should be more consistent about case. So for example ""X_SPEED"" is all capitals while other variables use camel case (like GaitType).  In ArduPilot we generally use all small letters with underscore between words.  So it would be ""x_speed"" and ""gait_type"".', 'comment_created': datetime.datetime(2020, 7, 23, 6, 55, 24, tzinfo=datetime.timezone.utc), 'commenter': 'rmackay9', 'type': 'User'}, {'comment_id': 459610296, 'comment_body': '`enum class` specifically :)', 'comment_created': datetime.datetime(2020, 7, 23, 17, 25, 52, tzinfo=datetime.timezone.utc), 'commenter': 'WickedShell', 'type': 'User'}]","[{'commit_sha': '10032ce50ff930e1124d7ee029592255d107bf3d', 'committer_username': 'ashvath100', 'committer_name': 'ashvath', 'committer_email': 'ashvath100@gmail.com', 'commit_date': datetime.datetime(2018, 1, 28, 16, 58, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '874309c214878d50d2c748780fdeea86f50d0548', 'committer_username': 'ashvath100', 'committer_name': 'ashvath', 'committer_email': 'ashvath100@gmail.com', 'commit_date': datetime.datetime(2018, 1, 28, 16, 58, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '831c4b01f7fe5e14325ecbd4f4ea7ac66f151b67', 'committer_username': 'ashvath100', 'committer_name': 'ashvath', 'committer_email': 'ashvath100@gmail.com', 'commit_date': datetime.datetime(2018, 1, 28, 16, 58, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f4832ebb90a67e9a3b63d68c2dcb488a17829346', 'committer_username': 'ashvath100', 'committer_name': 'ashvath', 'committer_email': 'ashvath100@gmail.com', 'commit_date': datetime.datetime(2018, 1, 28, 16, 58, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '61ff321803114782b3f815016116f6a36aa9b175', 'committer_username': 'ashvath100', 'committer_name': 'ashvath', 'committer_email': 'ashvath100@gmail.com', 'commit_date': datetime.datetime(2018, 1, 28, 16, 58, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'acb6b76fecb61fc74123a954470e30105c7b0d38', 'committer_username': 'ashvath100', 'committer_name': 'ashvath', 'committer_email': 'ashvath100@gmail.com', 'commit_date': datetime.datetime(2018, 1, 28, 16, 58, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0fca19a43858be27c08184e2559fa50febc31035', 'committer_username': 'ashvath100', 'committer_name': 'ashvath', 'committer_email': 'ashvath100@gmail.com', 'commit_date': datetime.datetime(2018, 1, 28, 16, 58, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b04faf149e0703b0a33971998912e431592cb089', 'committer_username': 'ashvath100', 'committer_name': 'ashvath', 'committer_email': 'ashvath100@gmail.com', 'commit_date': datetime.datetime(2018, 1, 28, 16, 58, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a6f7453bc36651346752827986aa19c5837fc5f1', 'committer_username': 'ashvath100', 'committer_name': 'ashvath', 'committer_email': 'ashvath100@gmail.com', 'commit_date': datetime.datetime(2018, 1, 28, 16, 58, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '95ac91f8f60a82612329da046453051eaf5ac5f6', 'committer_username': 'ashvath100', 'committer_name': 'ashvath', 'committer_email': 'ashvath100@gmail.com', 'commit_date': datetime.datetime(2018, 1, 28, 16, 58, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9b28fce3335fe71d6ab6c47b34ffe15a959c1057', 'committer_username': 'ashvath100', 'committer_name': 'ashvath', 'committer_email': 'ashvath100@gmail.com', 'commit_date': datetime.datetime(2018, 1, 28, 16, 58, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9d8d718ce563d68bf0480fef476c4b65d1629c28', 'committer_username': 'ashvath100', 'committer_name': 'ashvath', 'committer_email': 'ashvath100@gmail.com', 'commit_date': datetime.datetime(2018, 1, 28, 16, 58, 25, tzinfo=datetime.timezone.utc)}]",ashvath,35897713,ashvath100@gmail.com,User,,19,,11,20
475940243,Rover: Update walking-robots.rst,Added detailed documentation for Walking robot setup ,True,2995,https://api.github.com/repos/ArduPilot/ardupilot_wiki/pulls/2995,https://github.com/ArduPilot/ardupilot_wiki/pull/2995,closed,157,20,5,1,3,0,1,0,[{'name': 'rover-wiki'}],2020-08-30 17:32:46+00:00,2020-09-15 23:16:21+00:00,1403015.0,"16 days, 5:43:35",[],"[{'commit_sha': '47025ce40e18ac3f4924c696d4701a9237e0350f', 'committer_username': 'ashvath100', 'committer_name': 'ashvath', 'committer_email': 'ashvath100@gmail.com', 'commit_date': datetime.datetime(2018, 1, 28, 16, 58, 25, tzinfo=datetime.timezone.utc)}]",ashvath,35897713,ashvath100@gmail.com,User,,19,,11,20
475940243,Rover: Update walking-robots.rst,Added detailed documentation for Walking robot setup ,True,2995,https://api.github.com/repos/ArduPilot/ardupilot_wiki/pulls/2995,https://github.com/ArduPilot/ardupilot_wiki/pull/2995,closed,157,20,5,1,3,0,1,0,[{'name': 'rover-wiki'}],2020-08-30 17:32:46+00:00,2020-09-15 23:16:21+00:00,1403015.0,"16 days, 5:43:35",[],"[{'commit_sha': '47025ce40e18ac3f4924c696d4701a9237e0350f', 'committer_username': 'ashvath100', 'committer_name': 'ashvath', 'committer_email': 'ashvath100@gmail.com', 'commit_date': datetime.datetime(2018, 1, 28, 16, 58, 25, tzinfo=datetime.timezone.utc)}]",ashvath,35897713,ashvath100@gmail.com,User,,19,,11,20

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
7512484,ardupilot,ArduPilot/ardupilot,C++,16997,10371,659,1074,64470,2449,71,1021,"[{'id': 477973648, 'number': 15218, 'closed': datetime.datetime(2020, 9, 9, 23, 27, 2, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 9, 2, 17, 0, 21, tzinfo=datetime.timezone.utc), 'time_taken': 628001.0, 'time_delta': '7 days, 6:26:41', 'additions': 173, 'deletions': 87, 'state': 'closed'}, {'id': 455262573, 'number': 14884, 'closed': datetime.datetime(2020, 9, 1, 0, 37, 32, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 22, 17, 42, 46, tzinfo=datetime.timezone.utc), 'time_taken': 3480886.0, 'time_delta': '40 days, 6:54:46', 'additions': 1290, 'deletions': 4, 'state': 'closed'}, {'id': 433179504, 'number': 14585, 'closed': datetime.datetime(2020, 6, 12, 4, 48, 3, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 11, 15, 54, 36, tzinfo=datetime.timezone.utc), 'time_taken': 46407.0, 'time_delta': '12:53:27', 'additions': 1, 'deletions': 0, 'state': 'closed'}, {'id': 384955388, 'number': 13747, 'closed': datetime.datetime(2021, 2, 18, 17, 58, 34, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 3, 6, 18, 13, 25, tzinfo=datetime.timezone.utc), 'time_taken': 30152709.0, 'time_delta': '348 days, 23:45:09', 'additions': 7, 'deletions': 1, 'state': 'closed'}, {'id': 381570558, 'number': 13690, 'closed': datetime.datetime(2020, 3, 6, 18, 12, 58, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 2, 28, 20, 1, 18, tzinfo=datetime.timezone.utc), 'time_taken': 598300.0, 'time_delta': '6 days, 22:11:40', 'additions': 7, 'deletions': 1, 'state': 'closed'}, {'id': 377903402, 'number': 13628, 'closed': datetime.datetime(2020, 2, 20, 23, 23, 55, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 2, 20, 18, 14, 47, tzinfo=datetime.timezone.utc), 'time_taken': 18548.0, 'time_delta': '5:09:08', 'additions': 2, 'deletions': 2, 'state': 'closed'}, {'id': 369996709, 'number': 13455, 'closed': datetime.datetime(2020, 2, 12, 22, 4, 33, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 2, 2, 10, 43, 58, tzinfo=datetime.timezone.utc), 'time_taken': 904835.0, 'time_delta': '10 days, 11:20:35', 'additions': 150, 'deletions': 25, 'state': 'closed'}, {'id': 366288066, 'number': 13363, 'closed': datetime.datetime(2020, 1, 29, 23, 29, 58, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 1, 23, 10, 27, 40, tzinfo=datetime.timezone.utc), 'time_taken': 565338.0, 'time_delta': '6 days, 13:02:18', 'additions': 22, 'deletions': 0, 'state': 'closed'}, {'id': 365481291, 'number': 13349, 'closed': datetime.datetime(2020, 1, 21, 20, 8, 19, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 1, 21, 19, 53, 13, tzinfo=datetime.timezone.utc), 'time_taken': 906.0, 'time_delta': '0:15:06', 'additions': 24, 'deletions': 0, 'state': 'closed'}, {'id': 363770030, 'number': 13300, 'closed': datetime.datetime(2020, 12, 21, 1, 50, 26, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 1, 16, 17, 48, 31, tzinfo=datetime.timezone.utc), 'time_taken': 29318515.0, 'time_delta': '339 days, 8:01:55', 'additions': 5, 'deletions': 3, 'state': 'closed'}, {'id': 327474132, 'number': 12543, 'closed': datetime.datetime(2020, 11, 25, 8, 4, 10, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2019, 10, 12, 15, 25, 49, tzinfo=datetime.timezone.utc), 'time_taken': 35397501.0, 'time_delta': '409 days, 16:38:21', 'additions': 13, 'deletions': 7, 'state': 'closed'}, {'id': 317649557, 'number': 12302, 'closed': datetime.datetime(2019, 10, 12, 15, 25, 42, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2019, 9, 15, 15, 52, 55, tzinfo=datetime.timezone.utc), 'time_taken': 2331167.0, 'time_delta': '26 days, 23:32:47', 'additions': 13, 'deletions': 7, 'state': 'closed'}, {'id': 317581272, 'number': 12296, 'closed': datetime.datetime(2019, 9, 15, 9, 37, 29, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2019, 9, 14, 18, 34, 45, tzinfo=datetime.timezone.utc), 'time_taken': 54164.0, 'time_delta': '15:02:44', 'additions': 29, 'deletions': 2, 'state': 'closed'}, {'id': 311510897, 'number': 12156, 'closed': datetime.datetime(2019, 8, 28, 12, 49, 17, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2019, 8, 27, 18, 30, 18, tzinfo=datetime.timezone.utc), 'time_taken': 65939.0, 'time_delta': '18:18:59', 'additions': 0, 'deletions': 0, 'state': 'closed'}, {'id': 306298022, 'number': 12016, 'closed': datetime.datetime(2019, 8, 12, 6, 42, 51, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2019, 8, 11, 18, 12, 17, tzinfo=datetime.timezone.utc), 'time_taken': 45034.0, 'time_delta': '12:30:34', 'additions': 0, 'deletions': 0, 'state': 'closed'}, {'id': 306297244, 'number': 12015, 'closed': datetime.datetime(2019, 8, 11, 18, 0, 36, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2019, 8, 11, 17, 58, 6, tzinfo=datetime.timezone.utc), 'time_taken': 150.0, 'time_delta': '0:02:30', 'additions': 1, 'deletions': 1, 'state': 'closed'}]"
28945232,ardupilot_wiki,ArduPilot/ardupilot_wiki,Python,1228,484,74,490,8059,269,6,101,"[{'id': 475940243, 'number': 2995, 'closed': datetime.datetime(2020, 9, 15, 23, 16, 21, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 30, 17, 32, 46, tzinfo=datetime.timezone.utc), 'time_taken': 1403015.0, 'time_delta': '16 days, 5:43:35', 'additions': 157, 'deletions': 20, 'state': 'closed'}, {'id': 378371153, 'number': 2560, 'closed': datetime.datetime(2020, 2, 25, 23, 9, 45, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 2, 21, 16, 39, 44, tzinfo=datetime.timezone.utc), 'time_taken': 369001.0, 'time_delta': '4 days, 6:30:01', 'additions': 23, 'deletions': 7, 'state': 'closed'}]"
