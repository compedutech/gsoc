pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
963837567,"Fix part of #13822, #13821, #13820: Fix general issues of exploration state, rte and interaction validation","## Overview
<!--
READ ME FIRST:
Please answer *both* questions below and check off every point from the Essential Checklist!
If there is no corresponding issue number, fill in N/A where it says [fill_in_number_here] below in 1.
-->

1. This PR fixes or fixes part of #13822, #13821, #13820.
2. This PR does the following: 
  a. tagged_skill_misconception_id should be None #AnswerGroup

    b. The default outcome should have a valid destination node. #DefaultOutcome
  
    c. destination_id should be non-empty and match the ID of a state in the exploration. #Outcome
  
    d. general RTE validation below
      - Image tags contain filepath, alt, and caption attributes, where caption can be an empty string with at most 160 
        characters and alt should have at least 5 characters.
      - Math tags contain math_content, raw_latex, and svg_filename attributes, where svg_filename has an SVG extension.
      - Skillreview tags contain text attributes, text is non-empty.
      - Video tags contain video_id, start, end, and autoplay attributes, where start is before end.
      - Link tags contain text, where text is non-empty.
     
    e. general state validation below
      - Outcome labelled_as_correct should not be True if destination ID is (try again). #Outcome
      - The answer group should have at least one rule spec. #AnswerGroup
      - refresher_exploration_id should be None for all lessons. #Outcome
    
    f. general interaction validation below
      - **[Only in Exploration] Continue**
          - Text should be non-empty and have a max-length of 20.
          - Should not have any answer groups.
      - **[Only in Exploration] End Exploration**
          - Should not have a default outcome or any answer groups.
          - Should be at most 3 recommended explorations Note: crossover with Exploration
      - **Numeric Input**
        - For x in [a, b], a must not be greater than b
        - For x in [a-b, a+b], b must be a positive value
      - **Fraction Input**
        - All rules should have solutions in simplest form if the simplest form setting is turned on
        - All rules should have solutions in proper form if the allow improper fraction setting is turned off
        - All rules should have solutions without integer parts when the allow nonzero integer parts setting is turned off
        - Fractional denominator should be > 0
      - **Number With Units Input**
        - `equal to` should not come after `equivalent to` if they have the same value
      - **Multiple Choice Input**
        - All MC inputs should have at least 4 options
        - Answer choices should be non-empty and unique
        - No answer choice should appear in more than one answer group
        - If all MC options have feedbacks, do not ask for a ""Default Feedback""
      - **Item Selection Input**
        - Min number of selections should be no greater than max num
        - There should be enough choices to have max num of selections
        - All items should be unique and non-empty
        - `==` should have between min and max number of selections
      - **Drag and Drop Input**
        - All inputs should be non-empty, unique
        - There should be at least 2 items
        - Multiple items can be in the same place iff the setting is turned on
        - `== +/- 1` should never be an option if the ""multiple items in same place"" option is turned off
        - for `a < b`, `a` should not be the same as `b`

## Essential Checklist

- [x] The PR title starts with ""Fix #bugnum: "", followed by a short, clear summary of the changes. (If this PR fixes part of an issue, prefix the title with ""Fix part of #bugnum: ..."".)
- [x] The linter/Karma presubmit checks have passed locally on your machine.
- [x] ""Allow edits from maintainers"" is checked. (See [here](https://help.github.com/en/github/collaborating-with-issues-and-pull-requests/allowing-changes-to-a-pull-request-branch-created-from-a-fork) for instructions on how to enable it.)
  - This lets reviewers restart your CircleCI tests for you.
- [x] The PR is made from a branch that's **not** called ""develop"".

## Proof that changes are correct

<!--
Add videos/screenshots of the user-facing interface to demonstrate that the changes
made in this PR work correctly. If this PR is for a developer-facing feature,
provide the videos/screenshots of developer-facing interface.

Please also include videos/screenshots of the developer tools
browser console, so that we can be sure that there are no console errors.

If the changes in your PRs are autogenerated via a script and you cannot provide proof
for the changes then please leave a comment ""No proof of changes needed because {{Reason}}""
and remove all the sections below.
-->

#### Proof of changes on desktop with slow/throttled network

<!--
Make sure to properly verify that everything works correctly, and that there are
no weird UI mistakes or other problems. Also, if there are any newly added fields,
try to fill them out and test that different inputs are correctly accepted/rejected.

Throttle the network (to 3G) using the browser Developer Tools (see references below).
There should be no performance or UI issues while the network is slow.

References:
 - Chrome: https://css-tricks.com/throttling-the-network/
 - Firefox: https://developer.mozilla.org/en-US/docs/Tools/Network_Monitor/Throttling
-->

#### Proof of changes on mobile phone

<!--
In some cases this is not needed (e.g. for pages that we do not expect to
support mobile phones, or for backend-only features).

Feel free to use the Developer Tools emulator for this.

References:
 - Chrome: https://developer.chrome.com/docs/devtools/device-mode/
 - Firefox: https://firefox-source-docs.mozilla.org/devtools-user/index.html#responsive-design-mode
-->

#### Proof of changes in Arabic language

<!--
If the PR changes the UI in any of the files listed in rtl_css.py (i.e, those that have
a separate .rtl.css file for styling), make sure to add screenshots with the site
language set to Arabic as well (we use Arabic as it is a language written from right to left).
-->

## PR Pointers

- Make sure to follow the [instructions for making a code change](https://github.com/oppia/oppia/wiki/Contributing-code-to-Oppia#instructions-for-making-a-code-change).
- If you need a review or an answer to a question, and don't have permissions to assign people, **leave a comment** like the following: ""{{Question/comment}} @{{reviewer_username}} PTAL"". Oppiabot will help assign that person for you.
- For what code owners will expect, see the [Code Owner's wiki page](https://github.com/oppia/oppia/wiki/Oppia%27s-code-owners-and-checks-to-be-carried-out-by-developers).
- Make sure your PR follows conventions in the [style guide](https://github.com/oppia/oppia/wiki/Coding-style-guide), otherwise this will lead to review delays.
- Never force push. If you do, your PR will be closed.
- Some of the e2e tests are flaky, and can fail for reasons unrelated to your PR. We are working on fixing this, but in the meantime, if you need to restart the tests, please check the [""If your build fails"" wiki page](https://github.com/oppia/oppia/wiki/If-your-build-fails).
",False,15563,https://api.github.com/repos/oppia/oppia/pulls/15563,https://github.com/oppia/oppia/pull/15563,closed,3105,1,4,43,51,181,3,1,"[{'name': 'stale'}, {'name': 'PR: Affects datastore layer'}, {'name': ""PR: don't merge - STALE BUILD""}]",2022-06-10 08:10:50+00:00,2022-08-14 14:47:59+00:00,5639829.0,"65 days, 6:37:09","[{'comment_id': 894281030, 'comment_body': ""I have commented this section as this is the one causing the problem, for the context this particular test is to check for the invalid state interactions. I have created several states in the 2nd exploration. I added previously the `job_run_result.JobRunResult.as_stderr()` part to check what validation errors will occur and to check if I have created the states in the right way but I got this error `ValueError: JobRunResult must not exceed 1500 bytes` so I tried splitting all the validations as previously I was outputting them into a single `JobRunResult` then again I got the same error so I tried to check only for single validation in the interaction part and commenting out the rest of the checks but then also I got the same error.\r\nI'm a bit confused about why this is happening @vojtechjelinek\r\nThanks"", 'comment_created': datetime.datetime(2022, 6, 10, 8, 23, 53, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 899998078, 'comment_body': '```suggestion\r\n""""""Validation jobs for exploration models.""""""\r\n```', 'comment_created': datetime.datetime(2022, 6, 17, 10, 39, 20, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 899998283, 'comment_body': 'Add mypy imports for this', 'comment_created': datetime.datetime(2022, 6, 17, 10, 39, 40, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 899998900, 'comment_body': '```suggestion\r\n    """"""Job that tests the general state, rte and interaction validation.""""""\r\n```', 'comment_created': datetime.datetime(2022, 6, 17, 10, 40, 36, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 899999871, 'comment_body': ""```suggestion\r\n        all_explorations = (\r\n            self.pipeline\r\n            | 'Get all ExplorationModels' >> ndb_io.GetModels(\r\n                exp_models.ExplorationModel.get_all(include_deleted=False))\r\n            | 'Get exploration from model' >> beam.Map(\r\n                exp_fetchers.get_exploration_from_model)\r\n        )\r\n```"", 'comment_created': datetime.datetime(2022, 6, 17, 10, 42, 4, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 900000774, 'comment_body': 'This is a bit confusing, creating tuple and then referencing it just by indexes is hard to track, can you use some different approach, or use `MapTuple`', 'comment_created': datetime.datetime(2022, 6, 17, 10, 43, 23, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 900001804, 'comment_body': 'ditto below', 'comment_created': datetime.datetime(2022, 6, 17, 10, 45, 2, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 900002369, 'comment_body': 'Lets use more descriptive name than ""part X"". Ditto below.', 'comment_created': datetime.datetime(2022, 6, 17, 10, 45, 55, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 900003059, 'comment_body': 'Move these methods above the run functions. And also probably use static methods.', 'comment_created': datetime.datetime(2022, 6, 17, 10, 46, 53, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 900003495, 'comment_body': '```suggestion\r\n    def filter_invalid_state_rte_values(\r\n        self, states_dict: Dict[str, state_domain.State]\r\n    ) -> List[Dict[???]]:\r\n```\r\n\r\nditto elsewhere', 'comment_created': datetime.datetime(2022, 6, 17, 10, 47, 32, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 900003750, 'comment_body': '```suggestion\r\n            rte_components = html_cleaner.get_rte_components(\r\n                value.content.html)\r\n```', 'comment_created': datetime.datetime(2022, 6, 17, 10, 47, 55, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 900003881, 'comment_body': 'Why is this if needed?', 'comment_created': datetime.datetime(2022, 6, 17, 10, 48, 9, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 900005640, 'comment_body': 'Please before every individual validation add a short comment referencing what we actually validate (feel free to use some kind of shortcuts for this). Then in the issue description list all of these things so that we can easily validate that everything is checked by this job.', 'comment_created': datetime.datetime(2022, 6, 17, 10, 50, 43, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 900006342, 'comment_body': ""In multiline strings put space at the end of the lines. Also don't use `+` for concatenating strings, use string formatting"", 'comment_created': datetime.datetime(2022, 6, 17, 10, 51, 46, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 900006770, 'comment_body': ""```suggestion\r\n                    inputs_with_whole_nums = [\r\n                        'HasDenominatorEqualTo',\r\n                        'HasNumeratorEqualTo', \r\n                        'HasIntegerPartEqualTo',\r\n                        'HasNoFractionalPart'\r\n                    ]\r\n```"", 'comment_created': datetime.datetime(2022, 6, 17, 10, 52, 24, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 900008336, 'comment_body': 'Try to keep the ifs on one line, if possible. If you need more space, feel free to separate the code in a new function.', 'comment_created': datetime.datetime(2022, 6, 17, 10, 54, 42, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 900794696, 'comment_body': 'done', 'comment_created': datetime.datetime(2022, 6, 18, 10, 11, 41, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 900794739, 'comment_body': 'done', 'comment_created': datetime.datetime(2022, 6, 18, 10, 11, 47, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 900794803, 'comment_body': 'done', 'comment_created': datetime.datetime(2022, 6, 18, 10, 11, 55, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 900794865, 'comment_body': 'done', 'comment_created': datetime.datetime(2022, 6, 18, 10, 12, 3, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 900794928, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 6, 18, 10, 12, 9, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 900794965, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 6, 18, 10, 12, 15, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 900795006, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 6, 18, 10, 12, 20, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 900795059, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 6, 18, 10, 12, 26, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 900795119, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 6, 18, 10, 12, 32, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 900795194, 'comment_body': 'Edited', 'comment_created': datetime.datetime(2022, 6, 18, 10, 12, 42, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 900795228, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 6, 18, 10, 12, 46, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 900795289, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 6, 18, 10, 12, 55, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 900795349, 'comment_body': 'Dine', 'comment_created': datetime.datetime(2022, 6, 18, 10, 13, 2, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 900795388, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 6, 18, 10, 13, 7, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 901533493, 'comment_body': '```suggestion\r\n        states_dict: dict[str, state_domain.State]\r\n    ) -> List[Dict[str, List[???]]]:\r\n```', 'comment_created': datetime.datetime(2022, 6, 20, 10, 55, 32, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 901536097, 'comment_body': 'ditto elsewhere', 'comment_created': datetime.datetime(2022, 6, 20, 10, 58, 41, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 901538830, 'comment_body': ""Don't split the formating like this. Either use f-strings or % formatting\r\n\r\n```suggestion\r\n                            f'State - {key} Image tag caption value '\r\n                            f'is greater than 160.'\r\n                        )\r\n```\r\n\r\n```suggestion\r\n                            'State - %s Image tag caption value '\r\n                            'is greater than 160.' % key\r\n                        )\r\n```\r\n\r\nditto elsewhere"", 'comment_created': datetime.datetime(2022, 6, 20, 11, 2, 2, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 901539447, 'comment_body': 'should we specify which image', 'comment_created': datetime.datetime(2022, 6, 20, 11, 2, 42, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 901541818, 'comment_body': 'ditto elsewhere', 'comment_created': datetime.datetime(2022, 6, 20, 11, 5, 50, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 901542792, 'comment_body': 'The comment is a bit confusing, we do not validate when the value is greater than 16 quite the opposite, we want to validate if it is smaller or equal to 160 and we throw error when it is bigger than 160.', 'comment_created': datetime.datetime(2022, 6, 20, 11, 7, 5, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 901543714, 'comment_body': 'Should we also verify `None` or is it fine to have `None` here.', 'comment_created': datetime.datetime(2022, 6, 20, 11, 8, 12, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 901545797, 'comment_body': 'I think we already know that this is not true in some places, right?', 'comment_created': datetime.datetime(2022, 6, 20, 11, 10, 43, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 901545942, 'comment_body': 'What about `None` here?', 'comment_created': datetime.datetime(2022, 6, 20, 11, 10, 54, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 901547001, 'comment_body': 'In the issue description you say ""Math tags contain math_content, raw_latex, and svg_filename attributes, where svg_filename has an SVG extension."", but here you only verify that `svg_filename` existsm what about the other two?', 'comment_created': datetime.datetime(2022, 6, 20, 11, 12, 17, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 901548318, 'comment_body': ""```suggestion\r\n            states_with_values.append(\r\n                {\r\n                    'state_name': key,\r\n                    'rte_components_errors': rte_components_errors\r\n                }\r\n            )\r\n```"", 'comment_created': datetime.datetime(2022, 6, 20, 11, 13, 50, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 901548884, 'comment_body': '```suggestion\r\n    def filter_invalid_frac_numeric_num_unit_interactions(\r\n        states_dict: Dict[str, state_domain.State]\r\n    ) -> List[Dict[str, List[???]]]:\r\n```', 'comment_created': datetime.datetime(2022, 6, 20, 11, 14, 38, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 901555088, 'comment_body': '```suggestion\r\n                            if allow_req_simple_form:\r\n```', 'comment_created': datetime.datetime(2022, 6, 20, 11, 22, 44, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 901555889, 'comment_body': 'Will the whole part be always zero when it is not present?', 'comment_created': datetime.datetime(2022, 6, 20, 11, 23, 49, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 901557088, 'comment_body': 'Is this the correct approach?\r\n\r\nCannot you just do `num // den > 0`?', 'comment_created': datetime.datetime(2022, 6, 20, 11, 25, 17, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 901557335, 'comment_body': '```suggestion\r\n                            if not allow_imp_frac:\r\n```', 'comment_created': datetime.datetime(2022, 6, 20, 11, 25, 36, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 901558173, 'comment_body': 'Wait this should be up above in the simples form section, right?', 'comment_created': datetime.datetime(2022, 6, 20, 11, 26, 38, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 901558649, 'comment_body': '```suggestion\r\n                            if not allow_non_zero_integ_part:\r\n                                if whole != 0:\r\n```', 'comment_created': datetime.datetime(2022, 6, 20, 11, 27, 8, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 901559508, 'comment_body': ""```suggestion\r\n                            if (\r\n                                    not allow_non_zero_integ_part and\r\n                                    rule_spec.inputs['x'] != 0\r\n                            ):\r\n```"", 'comment_created': datetime.datetime(2022, 6, 20, 11, 28, 13, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 901560280, 'comment_body': ""I don't see this rule in issue description."", 'comment_created': datetime.datetime(2022, 6, 20, 11, 29, 11, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 901560957, 'comment_body': 'Oh I see this is ""For x in [a-b, a+b], b must be a positive value"", but then should the check be `<= 0`?', 'comment_created': datetime.datetime(2022, 6, 20, 11, 30, 4, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 901562836, 'comment_body': 'This can be just boolean value, right? Smth like `is_equivalent_present`.', 'comment_created': datetime.datetime(2022, 6, 20, 11, 32, 34, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 901563323, 'comment_body': ""```suggestion\r\n                {\r\n                    'state_name': key,\r\n                    'numeric_input_interaction_values': (\r\n                        numeric_input_interaction_values),\r\n                    'fraction_interaction_invalid_values': (\r\n                        fraction_interaction_invalid_values),\r\n                    'number_with_units_errors': number_with_units_errors,\r\n                }\r\n```"", 'comment_created': datetime.datetime(2022, 6, 20, 11, 33, 10, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 901572628, 'comment_body': ""I don't see this in the issue description"", 'comment_created': datetime.datetime(2022, 6, 20, 11, 44, 58, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 901575896, 'comment_body': ""Again I don'ŧ see this in the issue description."", 'comment_created': datetime.datetime(2022, 6, 20, 11, 48, 59, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 901576934, 'comment_body': 'Why is the `choice is not None` needed?', 'comment_created': datetime.datetime(2022, 6, 20, 11, 50, 12, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 901577216, 'comment_body': 'ditto below', 'comment_created': datetime.datetime(2022, 6, 20, 11, 50, 35, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 901578435, 'comment_body': '```suggestion\r\n                if (\r\n                        len(choices) == len(value.interaction.answer_groups) and\r\n                        value.interaction.default_outcome is not None\r\n                ):\r\n```\r\n\r\nWhy is this condition correct? Can `answer_groups` have no feedback?', 'comment_created': datetime.datetime(2022, 6, 20, 11, 52, 4, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 901624963, 'comment_body': 'What is this check?', 'comment_created': datetime.datetime(2022, 6, 20, 12, 47, 27, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 901625207, 'comment_body': 'ditto below', 'comment_created': datetime.datetime(2022, 6, 20, 12, 47, 43, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 901631544, 'comment_body': 'Can you refactor this code so that we check all the issues in MultipleChoice and in ItemChoice together and not in separate places? It should be fine to have two for-cycles for answer groups', 'comment_created': datetime.datetime(2022, 6, 20, 12, 54, 47, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 901632581, 'comment_body': 'Ditto as above.', 'comment_created': datetime.datetime(2022, 6, 20, 12, 55, 55, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 901637004, 'comment_body': '```suggestion\r\n                if (\r\n                        answer_group.outcome.dest == key and \r\n                        answer_group.outcome.labelled_as_correct\r\n                ):\r\n```', 'comment_created': datetime.datetime(2022, 6, 20, 13, 0, 44, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 901666466, 'comment_body': 'This check is required in case when all the choices have the feedback defined in the answer group and still have an option for default outcome feedback, we would not require any default feedback as all choices have separate feedback.\r\nThanks', 'comment_created': datetime.datetime(2022, 6, 20, 13, 31, 48, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 901668739, 'comment_body': 'Forgot to add the comment above it, basically to check if the total number of choices is less than the `maximum number of choices that can be selected at once`, does that make sense?\r\nThanks', 'comment_created': datetime.datetime(2022, 6, 20, 13, 34, 13, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 901671407, 'comment_body': 'Here, under the `ItemSelectionInput`\r\n`== should have between min and max number of selections`\r\nThanks', 'comment_created': datetime.datetime(2022, 6, 20, 13, 37, 6, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 901674364, 'comment_body': ""Actually, when I was iterating over the choices I was getting a pylint error, couldn't remember exactly what it was.\r\n`for choice in choices`, so the error suggested defining the `choice` beforehand as `None` which I have done on line `455` and that's why I added the check regarding the None part.\r\nThanks"", 'comment_created': datetime.datetime(2022, 6, 20, 13, 40, 20, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 901676497, 'comment_body': ""It's present in the `MultipleChoiceInput` part as `No answer choice should appear in more than one answer group`, actually this refers to as we will be checking each rule spec under the answer groups.\r\nThanks"", 'comment_created': datetime.datetime(2022, 6, 20, 13, 42, 31, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 901683432, 'comment_body': ""This might work if it was only limited to the rule specs under a single answer group but there might be a possibility that if it's present in a different answer group with the same value then it will be hard to track it with the boolean value.\r\nThanks"", 'comment_created': datetime.datetime(2022, 6, 20, 13, 49, 36, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 901687615, 'comment_body': ""No, actually this is a separate check from the `simplest form` because it totally depends on whether the user has clicked `allow improper fractions` or not also it's mentioned separately in the issue desc as well - \r\n`All rules should have solutions in proper form if the allow improper fraction setting is turned off`\r\nThanks"", 'comment_created': datetime.datetime(2022, 6, 20, 13, 53, 43, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 901689903, 'comment_body': 'This is the same approach that is followed in the frontend validation as well as I found the same approach while searching over the internet, do you want me to change this?\r\nThanks', 'comment_created': datetime.datetime(2022, 6, 20, 13, 55, 54, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 901694117, 'comment_body': 'Yes!', 'comment_created': datetime.datetime(2022, 6, 20, 13, 59, 23, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 901702218, 'comment_body': ""Oh, I thought it was just a description because the `svg_filename` and `raw_latex` are part of the `math_content` and we only have to check for the SVG extension.\r\nMaybe I'll add a check if we have `raw_latex`\r\nThanks"", 'comment_created': datetime.datetime(2022, 6, 20, 14, 7, 34, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 902137565, 'comment_body': 'Yes!\r\nI think Harshvardhan is working on this particular check, we can remove it simply then.\r\nThanks', 'comment_created': datetime.datetime(2022, 6, 21, 3, 50, 29, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 902443100, 'comment_body': 'I think we might not be needing it because we will again be running the beam job to fix the erroneous data and we will be checking it in the same way but I will add the value for the cross-checking purpose.\r\nThanks', 'comment_created': datetime.datetime(2022, 6, 21, 10, 28, 44, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 902470203, 'comment_body': ""I don't think it's possible to set the value `None`, either it can be some string value or it will be an empty string.\r\nThanks"", 'comment_created': datetime.datetime(2022, 6, 21, 10, 59, 10, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 902600962, 'comment_body': 'Same, I think we can only set the value to a string or leave it empty.\r\nThanks', 'comment_created': datetime.datetime(2022, 6, 21, 13, 11, 33, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 902663437, 'comment_body': 'Sorry about the comment, I have edited it now.\r\nThanks', 'comment_created': datetime.datetime(2022, 6, 21, 14, 3, 32, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 902682331, 'comment_body': ""I'm not sure of what to specify for the `link` and for `video` part/\r\nThanks"", 'comment_created': datetime.datetime(2022, 6, 21, 14, 18, 53, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 902957949, 'comment_body': 'Maybe the filename? Or the link content?', 'comment_created': datetime.datetime(2022, 6, 21, 18, 51, 6, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 902964768, 'comment_body': 'Add the comment please so that it clears what this check does.', 'comment_created': datetime.datetime(2022, 6, 21, 18, 59, 43, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 902965746, 'comment_body': ""But I don't understand how the `len` of `answer_groups` checks that the feedback is provided, or does `answer_groups` just contain the feedback?"", 'comment_created': datetime.datetime(2022, 6, 21, 19, 0, 54, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 902966799, 'comment_body': ""I still don't understand, I would need to know what the pylint error was"", 'comment_created': datetime.datetime(2022, 6, 21, 19, 2, 15, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 902967255, 'comment_body': 'Please try to make to comments as close as possible to the description, otherwise I cannot really validate that everything is changed.', 'comment_created': datetime.datetime(2022, 6, 21, 19, 2, 56, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 902968316, 'comment_body': 'Yeah okay, the for loop is so long that I forgot we are still inside it, maybe try to split it up more', 'comment_created': datetime.datetime(2022, 6, 21, 19, 4, 13, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 902982217, 'comment_body': 'So each answer group has rule specs and each rule spec has feedback attached to it. And it is presumed that if we have the number of answer groups equal to the choices then it would explain that we have provided feedback for each choice we have.\r\nThis method is also followed in the frontend validation.\r\nThanks', 'comment_created': datetime.datetime(2022, 6, 21, 19, 17, 8, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 902982541, 'comment_body': 'Oh, I have added it on the line `505`\r\nThanks', 'comment_created': datetime.datetime(2022, 6, 21, 19, 17, 31, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 902982946, 'comment_body': 'Yes, sorry about that.', 'comment_created': datetime.datetime(2022, 6, 21, 19, 18, 5, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 902984278, 'comment_body': 'Hmm, okay.', 'comment_created': datetime.datetime(2022, 6, 21, 19, 19, 53, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 902984329, 'comment_body': ""Sorry I didn't get this part `maybe try to split it up more` what exactly do we want to split?\r\nThanks"", 'comment_created': datetime.datetime(2022, 6, 21, 19, 19, 56, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 902984572, 'comment_body': ""Okay, I'm bit unsure why is this if needed here."", 'comment_created': datetime.datetime(2022, 6, 21, 19, 20, 19, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 902985258, 'comment_body': 'Can you maybe explain what are these different settings for fractions, so that we can just be 100% sure we are validating correct thing?', 'comment_created': datetime.datetime(2022, 6, 21, 19, 21, 4, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 902985960, 'comment_body': 'Are you 100% sure or not? If not better add a check for `None` too.', 'comment_created': datetime.datetime(2022, 6, 21, 19, 22, 1, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 902986249, 'comment_body': 'Are you 100% sure or not? If not better add a check for `None` too.', 'comment_created': datetime.datetime(2022, 6, 21, 19, 22, 22, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 903042411, 'comment_body': 'Yes because this will be a `html` data present in the content variable and also there is no way to produce the test scenario where I can assign the value as `None`.\r\nI can totally add the check for the None part but the backend tests will fail for not covering this particular part in the test file and we cannot assign the value `None`.', 'comment_created': datetime.datetime(2022, 6, 21, 20, 33, 28, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 903074520, 'comment_body': 'I just added for security purposes.', 'comment_created': datetime.datetime(2022, 6, 21, 21, 13, 25, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 903077487, 'comment_body': 'Yeah sure,\r\nSo basically we do have 3 checkboxes present in the `FractionInput` interaction which user can click and those are - \r\n- Allow non zero integer parts\r\n- Allow improper fractions\r\n- Allow values in simple form\r\n\r\nand all the checks are accordingly implemented, for eg if the user clicks `allow non zero integers` then the values greater than zero are valid otherwise not.\r\nThanks', 'comment_created': datetime.datetime(2022, 6, 21, 21, 17, 54, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 903078768, 'comment_body': 'Seem to work now, removed that.\r\nThanks', 'comment_created': datetime.datetime(2022, 6, 21, 21, 19, 48, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 903079113, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 6, 21, 21, 20, 17, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 903079192, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 6, 21, 21, 20, 23, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 903079487, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 6, 21, 21, 20, 51, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 903082610, 'comment_body': 'I think you can add the None check in same if to ""hack"" the tests a bit.', 'comment_created': datetime.datetime(2022, 6, 21, 21, 25, 9, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 903082731, 'comment_body': 'Yes because this will be a html data present in the content variable and also there is no way to produce the test scenario where I can assign the value as None.\r\nI can totally add the check for the None part but the backend tests will fail for not covering this particular part in the test file and we cannot assign the value None.\r\n', 'comment_created': datetime.datetime(2022, 6, 21, 21, 25, 20, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 903082783, 'comment_body': 'What security purposes?', 'comment_created': datetime.datetime(2022, 6, 21, 21, 25, 23, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 903083540, 'comment_body': ""Hey, I'm not sure what all of these mean exactly, except maybe for the non zero integer parts. What is exactly simple form and what is improper fraction."", 'comment_created': datetime.datetime(2022, 6, 21, 21, 26, 40, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 903083717, 'comment_body': '@lkbhitesh07 Missing reply.', 'comment_created': datetime.datetime(2022, 6, 21, 21, 26, 57, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 903084503, 'comment_body': 'The code, now the for-loop has huge amount of lines so it is actually hard to remember all the context. Maybe just have different function for each interaction (I think it is not that bad if we repeat some for-loops because of that.', 'comment_created': datetime.datetime(2022, 6, 21, 21, 28, 10, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 903085055, 'comment_body': 'Ah I see. So we assume that there will be at least some feedback in each answer group.', 'comment_created': datetime.datetime(2022, 6, 21, 21, 29, 3, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 903648144, 'comment_body': 'Yes', 'comment_created': datetime.datetime(2022, 6, 22, 11, 53, 12, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 903649259, 'comment_body': 'Yes, added', 'comment_created': datetime.datetime(2022, 6, 22, 11, 54, 31, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 903654706, 'comment_body': 'Oh so basically the `Allow values in simple form` mean when we have a fraction value in the reduced form for example `3/4` is the reduced form but `2/4` is not because it can further be reduced to `1/2`.\r\n\r\nAnd an improper fraction is a type of fraction where the numerator is greater than or equal to the denominator.\r\nThanks', 'comment_created': datetime.datetime(2022, 6, 22, 12, 0, 38, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 903814550, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 6, 22, 14, 22, 49, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 903814675, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 6, 22, 14, 22, 55, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 903815731, 'comment_body': ""Oh I was just adding it for an extra check, though removed it as it wasn't making sense"", 'comment_created': datetime.datetime(2022, 6, 22, 14, 23, 44, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 903816107, 'comment_body': 'Done with the refactoring', 'comment_created': datetime.datetime(2022, 6, 22, 14, 24, 1, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 904812831, 'comment_body': '@lkbhitesh07 This is not addressed everywhere, the comments are now confusing. You should explain what we validate no what is the if doing.', 'comment_created': datetime.datetime(2022, 6, 23, 9, 43, 19, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 904817502, 'comment_body': ""```suggestion\r\n                elif (\r\n                        rte_component['id'] == \r\n                        'oppia-noninteractive-skillreview'\r\n                ):\r\n```"", 'comment_created': datetime.datetime(2022, 6, 23, 9, 48, 12, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 904818320, 'comment_body': 'Should we also validate `video_id and `autoplay`?', 'comment_created': datetime.datetime(2022, 6, 23, 9, 48, 58, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 904819040, 'comment_body': ""If you don't validate the HTTP here then do not mention it in the issue description."", 'comment_created': datetime.datetime(2022, 6, 23, 9, 49, 44, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 904820941, 'comment_body': ""```suggestion\r\n        report_invalid_state_rte_values = (\r\n            invalid_exps_with_errored_state_rte_values\r\n            | 'Show info for rte' >> beam.MapTuple(\r\n                lambda exp_id, exp_states_rte_errors, exp_created_on: (\r\n                    job_run_result.JobRunResult.as_stderr(\r\n                       f'The id of exp is {exp_id}, '\r\n                       f'created on {exp_created_on}, and the state'\r\n                       f' RTE erroneous data are {exp_states_rte_errors}'\r\n                    )\r\n                )\r\n            )\r\n        )\r\n```"", 'comment_created': datetime.datetime(2022, 6, 23, 9, 51, 44, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 904842136, 'comment_body': '```suggestion\r\n                if den <= 0:\r\n```', 'comment_created': datetime.datetime(2022, 6, 23, 10, 9, 55, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 904843144, 'comment_body': ""```suggestion\r\n        require_simple_form = (\r\n            value.interaction.customization_args[\r\n                'requireSimplestForm'].value)\r\n```"", 'comment_created': datetime.datetime(2022, 6, 23, 10, 10, 54, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 904844511, 'comment_body': ""I don't see this in the list of issues."", 'comment_created': datetime.datetime(2022, 6, 23, 10, 12, 21, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 904864124, 'comment_body': 'Why we do this?', 'comment_created': datetime.datetime(2022, 6, 23, 10, 35, 25, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 904865904, 'comment_body': '```suggestion\r\n            if (\r\n                    len(choices) == len(value.interaction.answer_groups)\r\n                    and value.interaction.default_outcome is not None\r\n            ):\r\n```', 'comment_created': datetime.datetime(2022, 6, 23, 10, 37, 35, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 904867381, 'comment_body': 'Use better arg name than `value`', 'comment_created': datetime.datetime(2022, 6, 23, 10, 39, 19, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 904867490, 'comment_body': 'ditto elsewhere', 'comment_created': datetime.datetime(2022, 6, 23, 10, 39, 29, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 904868174, 'comment_body': ""You can do\r\n```python\r\nif value.interaction.id != 'ItemSelectionInput':\r\n    return\r\n```\r\n\r\nand get rid of the ifs below"", 'comment_created': datetime.datetime(2022, 6, 23, 10, 40, 12, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 904868248, 'comment_body': 'ditto elsewhere', 'comment_created': datetime.datetime(2022, 6, 23, 10, 40, 18, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 904868813, 'comment_body': ""```suggestion\r\n                        if (\r\n                                len(rule_spec.inputs['x']) < min_value or\r\n                                len(rule_spec.inputs['x']) > max_value\r\n                        ):\r\n```"", 'comment_created': datetime.datetime(2022, 6, 23, 10, 41, 2, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 904870461, 'comment_body': 'Where do we check the ""None of the answer groups should be the same""?', 'comment_created': datetime.datetime(2022, 6, 23, 10, 43, 1, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 904875262, 'comment_body': ""```suggestion\r\n                            rule_spec.rule_type ==\r\n                            'HasElementXBeforeElementY'\r\n```"", 'comment_created': datetime.datetime(2022, 6, 23, 10, 48, 47, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 904875520, 'comment_body': ""```suggestion\r\n                            if (\r\n                                    rule_spec.inputs['x'] == rule_spec.inputs['y']\r\n                            ):\r\n```"", 'comment_created': datetime.datetime(2022, 6, 23, 10, 49, 6, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 904876942, 'comment_body': 'What does this validate? Also where ""`== +/- 1` should never be an option if the ""multiple items in same place"" option is turned off"" is validated?', 'comment_created': datetime.datetime(2022, 6, 23, 10, 50, 46, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 904879172, 'comment_body': 'Should we check for `None`?', 'comment_created': datetime.datetime(2022, 6, 23, 10, 53, 35, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 904879713, 'comment_body': 'Where do you validate ""Should only have a default outcome (and no answer groups) associated with it.""?', 'comment_created': datetime.datetime(2022, 6, 23, 10, 54, 19, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 904880643, 'comment_body': 'Or you can check this condition before you even call this function.', 'comment_created': datetime.datetime(2022, 6, 23, 10, 55, 25, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 904884057, 'comment_body': ""```suggestion\r\n            | 'Remove empty values from errored state interactions' \r\n            >> beam.MapTuple(\r\n```"", 'comment_created': datetime.datetime(2022, 6, 23, 10, 59, 40, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 904968259, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 6, 23, 12, 40, 14, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 904968393, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 6, 23, 12, 40, 24, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 904971650, 'comment_body': 'I have added the check for the `video_id`, `autoplay` is just a boolean value that is set by the checkbox, not sure what check I should add for this.\r\nThanks', 'comment_created': datetime.datetime(2022, 6, 23, 12, 43, 53, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 904971798, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 6, 23, 12, 44, 4, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 904978890, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 6, 23, 12, 46, 8, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 904978968, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 6, 23, 12, 46, 12, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 904979029, 'comment_body': 'DOne', 'comment_created': datetime.datetime(2022, 6, 23, 12, 46, 16, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 904980370, 'comment_body': ""I have added the relevant comment above, it's part of - \r\n`Fractional denominator should be > 0`\r\n`All rules should have solutions without integer parts when the allow nonzero integer parts setting is turned off`"", 'comment_created': datetime.datetime(2022, 6, 23, 12, 47, 46, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 904988264, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 6, 23, 12, 55, 39, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 904988385, 'comment_body': 'Done\r\n', 'comment_created': datetime.datetime(2022, 6, 23, 12, 55, 46, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 904988467, 'comment_body': 'Done\r\n', 'comment_created': datetime.datetime(2022, 6, 23, 12, 55, 51, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 904988544, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 6, 23, 12, 55, 55, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 904992495, 'comment_body': 'My bad, I accidentally added to the comment. That check is not part of this PR that will be included in other PR.\r\nTo confirm you can take a look at the doc [here](https://docs.google.com/document/d/15M4F7-HIJltXUpE5XT6yimiR1pgr9bNdJRcqcEzGTso/edit), all the checks mentioned in red will be part of other PR the reason was, those checks were bit complicated to understand and to implement so Sean suggested to create another PR for those checks, will raise another PR soon.\r\nThanks', 'comment_created': datetime.datetime(2022, 6, 23, 12, 59, 49, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 904992560, 'comment_body': 'DOne', 'comment_created': datetime.datetime(2022, 6, 23, 12, 59, 54, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 904992677, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 6, 23, 12, 59, 58, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 904993412, 'comment_body': 'Added the correct comment `""== +/- 1 should never be an option if the ""multiple items in same place"" option is turned off"" ` I\'m checking this part here.', 'comment_created': datetime.datetime(2022, 6, 23, 13, 0, 41, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 904993471, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 6, 23, 13, 0, 46, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 904995632, 'comment_body': ""Added the right comment, also we do have a backend validation for the `should have default outcome` which means it's already validated I also cross-checked it via creating the test file and I was getting the error at the Domain layer for not having the default outcome"", 'comment_created': datetime.datetime(2022, 6, 23, 13, 2, 45, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 904995700, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 6, 23, 13, 2, 49, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 905015659, 'comment_body': 'Needed to edit this particular section as it was not correctly implemented, So basically to keep a track if we have the same rule spec elsewhere in all the answer groups.\r\nThanks', 'comment_created': datetime.datetime(2022, 6, 23, 13, 22, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 905059634, 'comment_body': 'But why do we first set this and only then do ifs on this variable?', 'comment_created': datetime.datetime(2022, 6, 23, 13, 59, 56, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 905061504, 'comment_body': 'Maybe check if it is always a boolean type?', 'comment_created': datetime.datetime(2022, 6, 23, 14, 1, 31, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 905063245, 'comment_body': 'Was the default outcome previously verified by some job? Or was the check implemented from the time when we had default outcome?', 'comment_created': datetime.datetime(2022, 6, 23, 14, 3, 6, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 905069723, 'comment_body': 'Why is this only checked for the not multi options?', 'comment_created': datetime.datetime(2022, 6, 23, 14, 8, 42, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 905075359, 'comment_body': 'Wait, images in explorations can only be SVG images?', 'comment_created': datetime.datetime(2022, 6, 23, 14, 13, 2, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 905082214, 'comment_body': 'Yes, This check is mentioned [here](https://docs.google.com/spreadsheets/d/1kNLF-UkS_Qk0igNCGwLjJXM0ByHalqli41GPvWF43PE/edit#gid=259309225) on the spreadsheet.', 'comment_created': datetime.datetime(2022, 6, 23, 14, 18, 46, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 905083480, 'comment_body': ""I'm not sure how we can confirm this but yes this check was not part of #13822"", 'comment_created': datetime.datetime(2022, 6, 23, 14, 19, 52, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 905084298, 'comment_body': 'I have already removed the boolean check from there as it was not completely correct.\r\nThanks', 'comment_created': datetime.datetime(2022, 6, 23, 14, 20, 35, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 905152887, 'comment_body': 'I have edited it now.', 'comment_created': datetime.datetime(2022, 6, 23, 15, 14, 39, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 905153151, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 6, 23, 15, 14, 53, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 905452317, 'comment_body': ""I don't see that in the sheet\r\n"", 'comment_created': datetime.datetime(2022, 6, 23, 20, 51, 1, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 905458650, 'comment_body': ""Oh okay so currently the `svg diagram` and the `android image` row are combined, previously they were separated in the RTE but now they are combined, I had a discussion with Sean as I wasn't able to find any options related to `svg diagram` in the RTE he mentioned that it is now the part of the `android image` section and whole combine as `oppia-noninteractive-image`\r\nThanks"", 'comment_created': datetime.datetime(2022, 6, 23, 20, 59, 47, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 905461405, 'comment_body': 'Okay, and what does that mean? Should it always be SVG or not?', 'comment_created': datetime.datetime(2022, 6, 23, 21, 3, 56, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 905462070, 'comment_body': 'Yes it should always be `SVG`', 'comment_created': datetime.datetime(2022, 6, 23, 21, 4, 55, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 905463966, 'comment_body': 'you can use git blame to see in what PR it was added (git blame is also available through GH interface)', 'comment_created': datetime.datetime(2022, 6, 23, 21, 7, 46, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 905710527, 'comment_body': ""I think ideally they would all be SVG, but we'll definitely have a lot of validation errors. And not sure what the best fix would be since we shouldn't just delete all the non-SVG images. What do you think @seanlip "", 'comment_created': datetime.datetime(2022, 6, 24, 4, 40, 24, tzinfo=datetime.timezone.utc), 'commenter': 'EricZLou', 'type': 'User'}, {'comment_id': 905711602, 'comment_body': ""```suggestion\r\n                        f'denominator less than or equal to zero.'\r\n```"", 'comment_created': datetime.datetime(2022, 6, 24, 4, 43, 41, tzinfo=datetime.timezone.utc), 'commenter': 'EricZLou', 'type': 'User'}, {'comment_id': 905713514, 'comment_body': ""We actually changed this check (All MC inputs should have at least 4 options) to only apply to curated lessons. Let's remove this check from this PR."", 'comment_created': datetime.datetime(2022, 6, 24, 4, 49, 16, tzinfo=datetime.timezone.utc), 'commenter': 'EricZLou', 'type': 'User'}, {'comment_id': 905716264, 'comment_body': ""My bad on this one -- bad wording. I meant min number of selections. So this check should be `if len(choices) < min_value`. This is an error case because if there are only 4 choices, we can't require a minimum the user to choose at least 5."", 'comment_created': datetime.datetime(2022, 6, 24, 4, 56, 35, tzinfo=datetime.timezone.utc), 'commenter': 'EricZLou', 'type': 'User'}, {'comment_id': 905785478, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 6, 24, 7, 18, 47, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 905785644, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 6, 24, 7, 19, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 905785702, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 6, 24, 7, 19, 6, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 914098495, 'comment_body': ""Sorry, I did miss this.\r\n\r\nFor curated explorations, all images should be SVG. For uncurated lessons they can be other formats too.\r\n\r\nFor the fix we will need to manually identify the non-SVG images and replace them. We have an art workstream going on for this right now so having a list of those images would be helpful.\r\n\r\nPlease let me know if this doesn't answer your question. Thanks!"", 'comment_created': datetime.datetime(2022, 7, 5, 18, 39, 6, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}]","[{'commit_sha': '28d54aca43458775c7aa060b1045546215c63c61', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '29552a61eae9801472da5e310ec4eebef77c7417', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9aaa8b5b9b8059c019f6f0e65b5185066758194c', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ba8da8087e6e4f49085f68d6f69f9be6a8d698c5', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '81cc0cd01f349b07e6dc69473eb566641d475783', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b097622309658297f8cd889242e24ce07f3b749e', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e86f01e90afec49578473d9997e7bcab8659d459', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '157b12e5a2a102172c122fcdc179cad4a3fbf700', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd13066a1a5188f3dc953bd1aebd8afc8b67a2906', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd107a7e7702c7181a70b8f43dd8bd9828abad2b2', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '32ed38b389ded5a6bca5551032e2b43c8f260b3c', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '44bf365519781f9ed333ccb7cdffdf02ff360694', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4326111b4a33ea25e12c2fe588e585490d79c4c6', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8f1bda255970c40e3336751bd10d027a6593d485', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '83b8f21a08374550ffc1cefd639cb8e30ee3ffda', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4db5125e32b98d1b275b513d67cb05a7ba0c4fe9', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'df43307b6529fe609fddad633904488b9e49fe78', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e92c2f9c2e22316a509a7045bfaf02f8c25e65e6', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6aadc511b7eb5d5a6ab68c315569072c7059c7c9', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ab33b2b7e5f0e1a0ae7942f0e206601f924799e7', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f2a3d552a6e9660331b3c22c3f07580cf82ee94d', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f2d0bea32365204af9f931309e3443b2bef463bc', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c011ebaa3aa13d78da004336783dffb7880d3fac', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '34e65395b18b535f1abe1e2dc8a24fdb1862a86d', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3388ce987568eda591fe220b06c43ab672f8a171', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5a93fadf3f929c6534e10a04204351efbe764878', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '790d713828a8f5bc27ed1833547cb7e491cf4417', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4d81dfff6fc44547ecd2ae77ac6def47d9b910fc', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8fad469315cd5dce297aeb8aabe89ceb819d148d', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5b941059e46fd521b077dbb5ae4e8f9cefd9f8a4', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '17e907656cef8c47f75ac56cb599c6fc1e08f5a5', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aad3a3f36890166ade32a2677f7b8842124cc58f', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3bebc3d90d57a3a5d562b8213c6a48c23abbefa1', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a0b912388d8b21fbe5f844cf8593aca64c2a0ff9', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '50b975edb7830852ceb9622f1aa86e504e8377f7', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9b1e4cba230269bd4624cfad7bdc475ff56d1fd7', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a3cc10b9d13b1dd7866a06831608de2602113feb', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4304649fdbd6110dafa2e183ef66b8f97b799afd', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '329a2053193e925391eb4add3e1460cac4cc82ec', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a3920a0e31f05d466b0d14f1665c0c7f47674be3', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3ded0bd7ccb13a9b9baf56548309f2e0e4d5aa5a', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '83f459f06cf011b3d15981817a47ce1ca5173fb9', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd23cf28a7277d9d7c276d07d740f07bf56abc968', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}]",Hitesh Tomar,44300735,,User,,30,,3,13
998479685,Fix part of #13820 and #13821: Audit job for general interaction and RTE validation,"## Overview
<!--
READ ME FIRST:
Please answer *both* questions below and check off every point from the Essential Checklist!
If there is no corresponding issue number, fill in N/A where it says [fill_in_number_here] below in 1.
-->

1. This PR fixes or fixes part of #13820 and #13821.
2. This PR does the following: Some leftover checks that were remaining, this PR validates the following - 
    - General RTE validation
        - Video tag contains start and end values which should not be an empty string.
        - Every tags should contain there attributes even if they are empty.
    - General interaction validation
        - Numeric Input
            - Each answer group should not be a subset of any answer group that comes before it.
        - Fraction Input
            - All rules should have solutions that do not match previous rules' solutions
        - Item Selection Input
            - None of the answer groups should be the same
        - Drag and Drop Input
            - `==` should come before `idx(a) == b` if it satisfies that condition
            - `==` should come before `== +/- 1` if they are off by at most 1 value
        - TextInput
            - Text Input height should be between integer between 1 and 10, inclusive
            - `contains` should always come after any other rule where the `contains` string is a substring of the other rule's string
            - `starts with` should always come after any other rule where a `starts with` string is a prefix of the other rule's string
        - EndInteraction
            - All recommended explorations should be valid



## Essential Checklist

- [x] The PR title starts with ""Fix #bugnum: "", followed by a short, clear summary of the changes. (If this PR fixes part of an issue, prefix the title with ""Fix part of #bugnum: ..."".)
- [x] The linter/Karma presubmit checks have passed locally on your machine.
- [x] ""Allow edits from maintainers"" is checked. (See [here](https://help.github.com/en/github/collaborating-with-issues-and-pull-requests/allowing-changes-to-a-pull-request-branch-created-from-a-fork) for instructions on how to enable it.)
  - This lets reviewers restart your CircleCI tests for you.
- [x] The PR is made from a branch that's **not** called ""develop"".

## Proof that changes are correct

<!--
Add videos/screenshots of the user-facing interface to demonstrate that the changes
made in this PR work correctly. If this PR is for a developer-facing feature,
provide the videos/screenshots of developer-facing interface.

Please also include videos/screenshots of the developer tools
browser console, so that we can be sure that there are no console errors.

If the changes in your PRs are autogenerated via a script and you cannot provide proof
for the changes then please leave a comment ""No proof of changes needed because {{Reason}}""
and remove all the sections below.
-->

#### Proof of changes on desktop with slow/throttled network

<!--
Make sure to properly verify that everything works correctly, and that there are
no weird UI mistakes or other problems. Also, if there are any newly added fields,
try to fill them out and test that different inputs are correctly accepted/rejected.

Throttle the network (to 3G) using the browser Developer Tools (see references below).
There should be no performance or UI issues while the network is slow.

References:
 - Chrome: https://css-tricks.com/throttling-the-network/
 - Firefox: https://developer.mozilla.org/en-US/docs/Tools/Network_Monitor/Throttling
-->

#### Proof of changes on mobile phone

<!--
In some cases this is not needed (e.g. for pages that we do not expect to
support mobile phones, or for backend-only features).

Feel free to use the Developer Tools emulator for this.

References:
 - Chrome: https://developer.chrome.com/docs/devtools/device-mode/
 - Firefox: https://firefox-source-docs.mozilla.org/devtools-user/index.html#responsive-design-mode
-->

#### Proof of changes in Arabic language

<!--
If the PR changes the UI, make sure to add screenshots with the site
language set to Arabic as well (we use Arabic as it is a language written from right to left).
-->

## PR Pointers

- Make sure to follow the [instructions for making a code change](https://github.com/oppia/oppia/wiki/Contributing-code-to-Oppia#instructions-for-making-a-code-change).
- If you need a review or an answer to a question, and don't have permissions to assign people, **leave a comment** like the following: ""{{Question/comment}} @{{reviewer_username}} PTAL"". Oppiabot will help assign that person for you.
- For what code owners will expect, see the [Code Owner's wiki page](https://github.com/oppia/oppia/wiki/Oppia%27s-code-owners-and-checks-to-be-carried-out-by-developers).
- Make sure your PR follows conventions in the [style guide](https://github.com/oppia/oppia/wiki/Coding-style-guide), otherwise this will lead to review delays.
- Never force push. If you do, your PR will be closed.
- Some of the e2e tests are flaky, and can fail for reasons unrelated to your PR. We are working on fixing this, but in the meantime, if you need to restart the tests, please check the [""If your build fails"" wiki page](https://github.com/oppia/oppia/wiki/If-your-build-fails).
",False,15748,https://api.github.com/repos/oppia/oppia/pulls/15748,https://github.com/oppia/oppia/pull/15748,closed,2340,0,4,26,30,59,2,1,"[{'name': 'PR: Affects datastore layer'}, {'name': ""PR: don't merge - STALE BUILD""}]",2022-07-16 18:47:45+00:00,2022-08-16 16:41:29+00:00,2670824.0,"30 days, 21:53:44","[{'comment_id': 922736951, 'comment_body': 'good job!', 'comment_created': datetime.datetime(2022, 7, 16, 22, 59, 33, tzinfo=datetime.timezone.utc), 'commenter': 'EricZLou', 'type': 'User'}, {'comment_id': 922737925, 'comment_body': ""What you have right now works, but in the future, the following code would be easier and preferred:\r\n```\r\nif 'caption-with-value' not in rte_component['customization_args']`:\r\n    // validation error \r\n```\r\n\r\nIf we end up merging this code, please be sure to change to the above format first! (will also make unit tests easier)."", 'comment_created': datetime.datetime(2022, 7, 16, 23, 1, 35, tzinfo=datetime.timezone.utc), 'commenter': 'EricZLou', 'type': 'User'}, {'comment_id': 922740628, 'comment_body': ""```suggestion\r\n                lower_infinity = float('-inf')\r\n                upper_infinity = float('inf')\r\n```"", 'comment_created': datetime.datetime(2022, 7, 16, 23, 7, 23, tzinfo=datetime.timezone.utc), 'commenter': 'EricZLou', 'type': 'User'}, {'comment_id': 922741199, 'comment_body': ""In the future, it's easier to do:\r\n```\r\nfor ans_group_index, answer_group in enumerate(answer_groups):\r\n    for rule_spec_index, rule_spec in enumerate(answer_group.rule_specs):\r\n        ...\r\n```"", 'comment_created': datetime.datetime(2022, 7, 16, 23, 8, 46, tzinfo=datetime.timezone.utc), 'commenter': 'EricZLou', 'type': 'User'}, {'comment_id': 922742395, 'comment_body': ""```suggestion\r\n                        if rule_spec.rule_type == 'IsWithinTolerance':\r\n                            rule_value_x = int(rule_spec.inputs['x'])\r\n                            rule_value_tol = int(rule_spec.inputs['tol'])\r\n                            (\r\n                                ExpStateInteractionValidationJob.\r\n                                _set_lower_and_upper_bounds(\r\n                                    range_var, rule_value_x-rule_value_tol,\r\n                                    rule_value_x+rule_value_tol, True, True\r\n                                )\r\n                            )\r\n```"", 'comment_created': datetime.datetime(2022, 7, 16, 23, 11, 14, tzinfo=datetime.timezone.utc), 'commenter': 'EricZLou', 'type': 'User'}, {'comment_id': 922743028, 'comment_body': ""```suggestion\r\n                lower_infinity = float('-inf')\r\n                upper_infinity = float('inf')\r\n```"", 'comment_created': datetime.datetime(2022, 7, 16, 23, 12, 36, tzinfo=datetime.timezone.utc), 'commenter': 'EricZLou', 'type': 'User'}, {'comment_id': 922749586, 'comment_body': 'Here and elsewhere, is the input always an integer? Or can it be a decimal?', 'comment_created': datetime.datetime(2022, 7, 16, 23, 38, 25, tzinfo=datetime.timezone.utc), 'commenter': 'EricZLou', 'type': 'User'}, {'comment_id': 922750541, 'comment_body': 'The fraction most likely isn\'t going to be an integer. Fractions are also inputted with the ""/"" character. So, `rule_spec.inputs[\'f\']` will either be an integer, or it\'ll have a ""/"" character in it. I\'d recommend you check if it has a ""/"" character, and if it does -- properly get the numerator and denominator, convert them both to floats, and then divide the two to get the value.', 'comment_created': datetime.datetime(2022, 7, 16, 23, 53, 24, tzinfo=datetime.timezone.utc), 'commenter': 'EricZLou', 'type': 'User'}, {'comment_id': 922803331, 'comment_body': 'Sure, I will keep that in mind.\r\nThanks', 'comment_created': datetime.datetime(2022, 7, 17, 9, 30, 44, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 922803551, 'comment_body': 'Sure, I will keep this in mind.\r\nThanks', 'comment_created': datetime.datetime(2022, 7, 17, 9, 32, 20, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 922804947, 'comment_body': 'Just confirmed that the values can be `integers, having slash or having space(1 2/3)`, I think I have to change some values.\r\nThanks', 'comment_created': datetime.datetime(2022, 7, 17, 9, 44, 52, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 922805142, 'comment_body': 'Also, we can have values like `1 2/3`, not sure how should I detect this?\r\nThanks', 'comment_created': datetime.datetime(2022, 7, 17, 9, 46, 21, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 922825269, 'comment_body': 'Done!', 'comment_created': datetime.datetime(2022, 7, 17, 12, 22, 55, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 922825278, 'comment_body': 'Done!', 'comment_created': datetime.datetime(2022, 7, 17, 12, 23, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 922829842, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 7, 17, 12, 57, 15, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 922829848, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 7, 17, 12, 57, 20, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 922829865, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 7, 17, 12, 57, 26, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 922915394, 'comment_body': ""Shouldn't `1 3/2` end up being calculated as `1 + 3/2`? So `value_1[0] + value_1[1] / value_2`?"", 'comment_created': datetime.datetime(2022, 7, 18, 0, 15, 49, tzinfo=datetime.timezone.utc), 'commenter': 'EricZLou', 'type': 'User'}, {'comment_id': 922915579, 'comment_body': ""I don't think this is done yet. This comment is for numeric inputs; aka `5` or `12.94`, right?"", 'comment_created': datetime.datetime(2022, 7, 18, 0, 17, 13, tzinfo=datetime.timezone.utc), 'commenter': 'EricZLou', 'type': 'User'}, {'comment_id': 922990771, 'comment_body': ""I'm sorry, my bad. I thought this was part of `FractionInput` but it's `NumericInput`, I checked and we are not allowed to enter values other than integers, not decimal nor fractions.\r\nThanks"", 'comment_created': datetime.datetime(2022, 7, 18, 5, 56, 44, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 922991491, 'comment_body': ""Are you sure numeric inputs don't allow decimals?"", 'comment_created': datetime.datetime(2022, 7, 18, 5, 58, 29, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 923023741, 'comment_body': 'I see, I confused myself yesterday while I was testing with `FractionInput` and `NumericInput`. Thanks for the clarification, I have updated the code.', 'comment_created': datetime.datetime(2022, 7, 18, 7, 4, 9, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 923023786, 'comment_body': 'Yep!, I was solving the whole value. Edited', 'comment_created': datetime.datetime(2022, 7, 18, 7, 4, 13, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 925516161, 'comment_body': ""```suggestion\r\n            range_var: dict[str, Any]. To keep track of each rule's\r\n                ans group index, rule spec index, lower bound, upper bound,\r\n                lb inclusive, ub inclusive.\r\n            range_ele: dict[str, Any]. To keep track of other rule's\r\n                ans group index, rule spec index, lower bound, upper bound,\r\n                lb inclusive, ub inclusive.\r\n```\r\n\r\nThe descriptions are exactly the same for both of these, from that it is hard to understand how they differ, please explain that somewhere in the docstring."", 'comment_created': datetime.datetime(2022, 7, 20, 11, 54, 43, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 925518754, 'comment_body': ""This is quite hard to understand, especially because the variable names are almost the same (except for the last three characters). Can\r\n```suggestion\r\n        if (\r\n            range_ele['lower_bound'] is None or \r\n            range_var['lower_bound'] is None or \r\n            range_ele['upper_bound'] is None or\r\n            range_var['upper_bound'] is None\r\n        ):\r\n            return False\r\n\r\n        lb_satisfied = (\r\n            range_ele['lower_bound'] < range_var['lower_bound'] or\r\n            (\r\n                range_ele['lower_bound'] == range_var['lower_bound'] and\r\n                (\r\n                    not range_var['lb_inclusive'] or \r\n                    range_ele['lb_inclusive']\r\n                )\r\n            )\r\n        )\r\n\r\n        ub_satisfied = (\r\n            range_ele['upper_bound'] > range_var['upper_bound'] or\r\n            (\r\n                range_ele['upper_bound'] == range_var['upper_bound'] and \r\n                (\r\n                    not range_var['ub_inclusive'] or \r\n                    range_ele['ub_inclusive']\r\n                )\r\n            )\r\n        )\r\n\r\n        is_enclosed = lb_satisfied and ub_satisfied\r\n```"", 'comment_created': datetime.datetime(2022, 7, 20, 11, 57, 49, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 925521405, 'comment_body': ""```suggestion\r\n        if earlier_rule.rule_type != 'IsExactlyEqualTo':\r\n            return True\r\n        return later_rule.rule_type in ('IsExactlyEqualTo', 'IsEquivalentTo', 'IsEquivalentToAndInSimplestForm')\r\n```\r\n\r\nThis should do the same thing, right?"", 'comment_created': datetime.datetime(2022, 7, 20, 12, 1, 5, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 925522134, 'comment_body': 'You can define these outside the loop.', 'comment_created': datetime.datetime(2022, 7, 20, 12, 1, 54, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 925523396, 'comment_body': ""Don't we have a code for handling this elsewhere in the (backend) codebase already? "", 'comment_created': datetime.datetime(2022, 7, 20, 12, 3, 26, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 925523759, 'comment_body': 'You can do `self._set_lower_and_upper_bounds` to shorten this up.', 'comment_created': datetime.datetime(2022, 7, 20, 12, 3, 53, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 925524322, 'comment_body': 'Code repetition? Maybe separate into function?', 'comment_created': datetime.datetime(2022, 7, 20, 12, 4, 33, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 925526601, 'comment_body': 'ditto elsewhere for all static methods.', 'comment_created': datetime.datetime(2022, 7, 20, 12, 7, 10, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 925528374, 'comment_body': ""you can invert this and do\r\n```python\r\nif state.interaction.id != 'ItemSelectionInput':\r\n    continue\r\n```\r\n\r\nthat way you don't need to indent the whole block below. Please make sure to do this elsewhere."", 'comment_created': datetime.datetime(2022, 7, 20, 12, 9, 13, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 925530061, 'comment_body': 'Would it be worth it to have a separate error for each of these?', 'comment_created': datetime.datetime(2022, 7, 20, 12, 11, 6, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 925530269, 'comment_body': '```suggestion\r\n    def filter_invalid_end_interaction(exp, exp_id_list):\r\n```', 'comment_created': datetime.datetime(2022, 7, 20, 12, 11, 22, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 925530481, 'comment_body': 'Inversion can be done here.', 'comment_created': datetime.datetime(2022, 7, 20, 12, 11, 35, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 925531393, 'comment_body': 'Why is this stored into a ""global"" variable? This might cause issues when running this job, can these be done without it?', 'comment_created': datetime.datetime(2022, 7, 20, 12, 12, 37, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 925533653, 'comment_body': 'This can fit one line.', 'comment_created': datetime.datetime(2022, 7, 20, 12, 15, 8, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 925612937, 'comment_body': 'So basically, the `range_var` is the variable that we have to compare and `range_ele` is the one to which we will be comparing.\r\nI will add one line mentioning that.', 'comment_created': datetime.datetime(2022, 7, 20, 13, 32, 45, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 925614158, 'comment_body': ""Oh yes, sorry about that.\r\nWill `range_compare_to` and `range_compare_with` works? It's a bit descriptive. Please do let me know if I should change this.\r\nThanks"", 'comment_created': datetime.datetime(2022, 7, 20, 13, 33, 50, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 925620655, 'comment_body': ""But the function in which it is present is a static function so the `self` won't work, right? Should I remove the static function decorator from here?\r\nThanks"", 'comment_created': datetime.datetime(2022, 7, 20, 13, 39, 51, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 925630768, 'comment_body': ""I think it won't make much of a difference as in the end both the errors will be dealt with separately in the conversion function but please do let me know if it is required, I will make the necessary changes.\r\nThanks"", 'comment_created': datetime.datetime(2022, 7, 20, 13, 48, 33, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 925660200, 'comment_body': ""Actually, I and Eric were having a discussion regarding this part. The main reason why we had to opt for this method was, that whenever we tried to pass the collections as a list to any other functions or map functions we wouldn't be able to access the list we got an error and when we tried passing in the `filter` function it was working fine but now the problem was to store the error so that's why we created a global variable to store."", 'comment_created': datetime.datetime(2022, 7, 20, 14, 13, 7, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 925927736, 'comment_body': 'I tried to look into state_domain, exp_domain, exp_services. Is there any other files I should look at? ', 'comment_created': datetime.datetime(2022, 7, 20, 18, 19, 6, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 925927838, 'comment_body': 'Done!', 'comment_created': datetime.datetime(2022, 7, 20, 18, 19, 12, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 925927956, 'comment_body': 'Done!', 'comment_created': datetime.datetime(2022, 7, 20, 18, 19, 20, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 925928079, 'comment_body': 'Done!', 'comment_created': datetime.datetime(2022, 7, 20, 18, 19, 30, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 925928158, 'comment_body': 'Done!', 'comment_created': datetime.datetime(2022, 7, 20, 18, 19, 36, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 925928248, 'comment_body': 'Done!', 'comment_created': datetime.datetime(2022, 7, 20, 18, 19, 42, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 925928521, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 7, 20, 18, 19, 56, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 925928675, 'comment_body': 'Yep!, updated\r\n', 'comment_created': datetime.datetime(2022, 7, 20, 18, 20, 6, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 926338835, 'comment_body': ""Sorry, I will probably need a more precise explanation of what exactly didn't work."", 'comment_created': datetime.datetime(2022, 7, 21, 7, 22, 26, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 926341867, 'comment_body': 'Maybe we handle this somewhere in /extensions', 'comment_created': datetime.datetime(2022, 7, 21, 7, 25, 39, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 926344849, 'comment_body': ""compare to/with is not really descriptive either. I still don't understand the difference between the two."", 'comment_created': datetime.datetime(2022, 7, 21, 7, 29, 2, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 926382661, 'comment_body': 'You can use `self.` for calling the static method, there should be no problem with that. ', 'comment_created': datetime.datetime(2022, 7, 21, 8, 10, 24, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 926796234, 'comment_body': ""Sure,\r\nPreviously I was doing something like this to pass the PCollection as a list\r\n```\r\nself.some_filter_function(exp_states, exp_list=beam.pvalue.AsIter(exp_ids_pcoll))\r\n```\r\nalso tried, please note that the variable `exp_ids_pcoll` is the PCollection of exp ids\r\n```\r\nself.some_filter_function(exp_states, exp_list=beam.pvalue.AsList(exp_ids_pcoll))\r\n```\r\nI received this error `'_InvalidUnpickledPCollection' object has no attribute 'windowing'` which I tried to\r\n\r\nAfter that I tried using `beam.combiners.ToList()` to the PCollection and then passing to the function then I received this error `_InvalidUnpickledPCollection' object is not subscriptable` while accessing the list.\r\n\r\nThanks\r\n@vojtechjelinek "", 'comment_created': datetime.datetime(2022, 7, 21, 15, 7, 38, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 927752588, 'comment_body': 'Done!\r\nPTAL', 'comment_created': datetime.datetime(2022, 7, 22, 15, 14, 44, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 927762982, 'comment_body': ""Tried looking into several python files but wasn't able to find anything relevant.\r\nThanks"", 'comment_created': datetime.datetime(2022, 7, 22, 15, 26, 33, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 927764471, 'comment_body': ""Oh, but I tried doing that and I wasn't able to do that and it was not recognizing the function.\r\nThanks"", 'comment_created': datetime.datetime(2022, 7, 22, 15, 28, 11, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 927772238, 'comment_body': ""Oh okay,\r\nSo just to give some context to check if the two rules are not getting enclosed by we are doing this. To take an example suppose we have two rules \r\n1. If the number is less than or equal to 5. -> Some response\r\n2. If the number is between 3 and 5. -> Some response\r\n\r\nSo if we take a look then the 2 rule will never be called as it will be made redundant by the 1 rule, so to track the ranges I'm using a range variable.\r\nNow is_enclosed_by checks the range part if it is enclosed or not, simply the `range_compare_to` is the 2 rule and `range_compare_with` is the 1 rule. So just to keep track of all previous rules we have a list of range variables and we are calling `is_enclosed_by` for each previous rule.\r\n\r\nI was not sure how to explain this part there, sorry about that.\r\nThanks"", 'comment_created': datetime.datetime(2022, 7, 22, 15, 36, 19, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}]","[{'commit_sha': 'b6e804faf3ea58c0fd867466c936381b780df31a', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '03cc0b3f5a25ed53f9159138939bcaab93c69187', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '010e157dd7c8e966b23029b6a044b3a0d2e918bc', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fd2276584d3f91c09bc2a0d7fa9f036b0eee72be', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'af7766f164e157f5387ce2201807f188859bc7d9', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8614366ae2c83d69022842baa71a54c8c944b8de', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '06fe9d9d01655126cdc1c7485edf9c11cd3dc64a', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0860eb35c909f306c1c96bbed1c6622cdf0e2ef6', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '057a085afe32816c2423c9f81e13e55de4330d9d', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '61d2988b12e8c192e435c1d39af625cb50644a04', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8722951af39fdef38d416dac968d9178f234118b', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aaa95993e49274120e64c90b6fea4632f2411ad5', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a87fcfed3b3a79919db0db2eda9f27337663ec5a', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2bc502032a98b8558aad7bef30ec0be6fd778984', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5f031c773c81f631ddde81918e45dc8865ac8b62', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1fd0632e17d6fa291405b1dd7e8779212f3dc461', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a0b876b893721fc0b2a5261820ff4a8da6f6fe75', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4ef0082bce9f90d830b5bab19f2ecc4c510ba3c3', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '74fd669c7d7831a734f8ab41d06af373668aa4da', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'eb69e80141b7c64abb1589b12c719d2992613cdc', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ea880505979faf8aa236a5a9c31b3b566c29d2ac', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'af30c8bc8bc0569bfda7bf92d5aa906c52e6b3ea', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8fd819321043fc0d5cf00d02505f9b4041be873c', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e9ae034f77e61848708d2899958e4fa70a882d17', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8221b544fb04c28d18e050dfb68990e4adb09625', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '80a69946dcaba09048ac4e4ef55e23d6492ec17f', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}]",Hitesh Tomar,44300735,,User,,30,,3,13
996722168,Further audit for some checks from #15563,"## Overview
<!--
READ ME FIRST:
Please answer *both* questions below and check off every point from the Essential Checklist!
If there is no corresponding issue number, fill in N/A where it says [fill_in_number_here] below in 1.
-->

1. This PR fixes or fixes part of None.
2. This PR does the following: Some checks need further audit from PR #15563, the errored output is divided into private exps, public exps, and curated exps. The checks are as follows, all are related to Explorations - 
- refresher_exploration_id should be None for all lessons

- Text should be non-empty and have a max-length of 20
(Continue Interaction)

- == should have between min and max number of selections
(ItemSelection Interaction)

- Multiple items can be in the same place iff the setting is
turned on (DragAndDrop Interaction)

- == +/- 1 should never be an option if the ""multiple items in
same place"" option is turned off (DragAndDrop Interaction)

- alt should have at least 5 characters (RTE image)

- Image should have an SVG extension (RTE image)

- Start value is before end value (RTE video)

## Essential Checklist

- [ ] The PR title starts with ""Fix #bugnum: "", followed by a short, clear summary of the changes. (If this PR fixes part of an issue, prefix the title with ""Fix part of #bugnum: ..."".)
- [ ] The linter/Karma presubmit checks have passed locally on your machine.
- [x] ""Allow edits from maintainers"" is checked. (See [here](https://help.github.com/en/github/collaborating-with-issues-and-pull-requests/allowing-changes-to-a-pull-request-branch-created-from-a-fork) for instructions on how to enable it.)
  - This lets reviewers restart your CircleCI tests for you.
- [x] The PR is made from a branch that's **not** called ""develop"".

## Proof that changes are correct

<!--
Add videos/screenshots of the user-facing interface to demonstrate that the changes
made in this PR work correctly. If this PR is for a developer-facing feature,
provide the videos/screenshots of developer-facing interface.

Please also include videos/screenshots of the developer tools
browser console, so that we can be sure that there are no console errors.

If the changes in your PRs are autogenerated via a script and you cannot provide proof
for the changes then please leave a comment ""No proof of changes needed because {{Reason}}""
and remove all the sections below.
-->

#### Proof of changes on desktop with slow/throttled network

<!--
Make sure to properly verify that everything works correctly, and that there are
no weird UI mistakes or other problems. Also, if there are any newly added fields,
try to fill them out and test that different inputs are correctly accepted/rejected.

Throttle the network (to 3G) using the browser Developer Tools (see references below).
There should be no performance or UI issues while the network is slow.

References:
 - Chrome: https://css-tricks.com/throttling-the-network/
 - Firefox: https://developer.mozilla.org/en-US/docs/Tools/Network_Monitor/Throttling
-->

#### Proof of changes on mobile phone

<!--
In some cases this is not needed (e.g. for pages that we do not expect to
support mobile phones, or for backend-only features).

Feel free to use the Developer Tools emulator for this.

References:
 - Chrome: https://developer.chrome.com/docs/devtools/device-mode/
 - Firefox: https://firefox-source-docs.mozilla.org/devtools-user/index.html#responsive-design-mode
-->

#### Proof of changes in Arabic language

<!--
If the PR changes the UI, make sure to add screenshots with the site
language set to Arabic as well (we use Arabic as it is a language written from right to left).
-->

## PR Pointers

- Make sure to follow the [instructions for making a code change](https://github.com/oppia/oppia/wiki/Contributing-code-to-Oppia#instructions-for-making-a-code-change).
- If you need a review or an answer to a question, and don't have permissions to assign people, **leave a comment** like the following: ""{{Question/comment}} @{{reviewer_username}} PTAL"". Oppiabot will help assign that person for you.
- For what code owners will expect, see the [Code Owner's wiki page](https://github.com/oppia/oppia/wiki/Oppia%27s-code-owners-and-checks-to-be-carried-out-by-developers).
- Make sure your PR follows conventions in the [style guide](https://github.com/oppia/oppia/wiki/Coding-style-guide), otherwise this will lead to review delays.
- Never force push. If you do, your PR will be closed.
- Some of the e2e tests are flaky, and can fail for reasons unrelated to your PR. We are working on fixing this, but in the meantime, if you need to restart the tests, please check the [""If your build fails"" wiki page](https://github.com/oppia/oppia/wiki/If-your-build-fails).
",False,15714,https://api.github.com/repos/oppia/oppia/pulls/15714,https://github.com/oppia/oppia/pull/15714,closed,2508,0,4,11,34,16,3,1,"[{'name': 'stale'}, {'name': 'PR: Affects datastore layer'}, {'name': ""PR: don't merge - STALE BUILD""}]",2022-07-14 14:04:20+00:00,2022-08-14 14:48:00+00:00,2681020.0,"31 days, 0:43:40","[{'comment_id': 922727387, 'comment_body': ""Should you wrap this in an `if` statement? Of do you have a check elsewhere to make sure you aren't printing out empty errors to the Beam Job output.\r\n```suggestion\r\n        if invalid_refresher_exploration_id:\r\n            states_with_values.append(\r\n                {'state_name': state_name,\r\n                'invalid_refresher_exploration_id': (\r\n                    invalid_refresher_exploration_id)\r\n                }\r\n            )\r\n```"", 'comment_created': datetime.datetime(2022, 7, 16, 22, 29, 21, tzinfo=datetime.timezone.utc), 'commenter': 'EricZLou', 'type': 'User'}, {'comment_id': 922728213, 'comment_body': ""Isn't the Exception case here also an error that we should log? Or did your previous PR already log these cases?"", 'comment_created': datetime.datetime(2022, 7, 16, 22, 40, 53, tzinfo=datetime.timezone.utc), 'commenter': 'EricZLou', 'type': 'User'}, {'comment_id': 922728453, 'comment_body': ""File name should end with `.svg`:\r\n\r\n```suggestion\r\n                    if (\r\n                        file_with_value != 'Not found' and\r\n                        len(file_with_value) > 4 and\r\n                        file_with_value[-4:] != '.svg'\r\n                    ):\r\n```"", 'comment_created': datetime.datetime(2022, 7, 16, 22, 42, 26, tzinfo=datetime.timezone.utc), 'commenter': 'EricZLou', 'type': 'User'}, {'comment_id': 922730352, 'comment_body': ""`start-with-value` and `end-with-value` don't need to be integers. Better to do:\r\n`float(start_value) > float(end_value)`."", 'comment_created': datetime.datetime(2022, 7, 16, 22, 46, 56, tzinfo=datetime.timezone.utc), 'commenter': 'EricZLou', 'type': 'User'}, {'comment_id': 922731206, 'comment_body': ""I don't understand what's happening in this function. Can you explain?"", 'comment_created': datetime.datetime(2022, 7, 16, 22, 48, 42, tzinfo=datetime.timezone.utc), 'commenter': 'EricZLou', 'type': 'User'}, {'comment_id': 922734002, 'comment_body': 'I just saw that you have a filtering function already, ', 'comment_created': datetime.datetime(2022, 7, 16, 22, 54, 6, tzinfo=datetime.timezone.utc), 'commenter': 'EricZLou', 'type': 'User'}, {'comment_id': 922805778, 'comment_body': 'I have covered that in PR #15748.\r\nThanks', 'comment_created': datetime.datetime(2022, 7, 17, 9, 51, 56, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 922806618, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 7, 17, 9, 58, 30, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 922806626, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 7, 17, 9, 58, 35, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 922808289, 'comment_body': ""Sure, this is also a kind of filter function that removes the empty values. So the input will be something like -\r\n`[{'state_name': 'state 1', 'frac_input_intearc_values': []}, {'state_name': 'state 2', 'Numeric_input_intearc_values': [some errored values}]` Now as we can see that the state 1 error value is empty, so basically we are iterating over each state and checking the empty errored values and removing them. After removing we will only have the `[{'state_name': 'state 1'}, {'state_name': 'state 2', 'Numeric_input_intearc_values': [some errored values}]` which makes no sense to keep only state_name in the errored output, so at line 547 I'm keeping track of values to remove.\r\nAbove is the summary of code from `541-547`\r\n\r\nNow after that we have to remove the values which only have `state_name` and I'm doing that in line 549 550.\r\nPlease do let me know if I should explain it more.\r\nThanks"", 'comment_created': datetime.datetime(2022, 7, 17, 10, 13, 4, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 922914546, 'comment_body': ""Hm I get what you're trying to do but this code is very confusing and not very Python-like. This code also loops through `'state_name': 'state 1'` as a key and value, which it shouldn't. I also don't understand why your function input return type defs are like that -- shouldn't the input and return both have the same types? And do different interaction types need to have different key names? Like can they all just have the key name `interac_values`? Then you can do:\r\n\r\n```\r\nreturn [dict for dict in errored_values if len(dict['interact_values']) > 0\r\n```\r\n\r\nAlso this would be much easier if you just didn't add the correct states to this `errored_values` list in the first place, right? If a state doesn't have any errors, then don't add it in?"", 'comment_created': datetime.datetime(2022, 7, 18, 0, 8, 41, tzinfo=datetime.timezone.utc), 'commenter': 'EricZLou', 'type': 'User'}, {'comment_id': 923784724, 'comment_body': 'Yeah you are right, sorry about that. Edited it now.', 'comment_created': datetime.datetime(2022, 7, 18, 19, 35, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 926528663, 'comment_body': '```suggestion\r\n    def filter_curated_explorations(\r\n        self, \r\n        model_pair: Tuple[\r\n            Optional[exp_models.ExplorationModel],\r\n            Optional[opportunity_models.ExplorationOpportunitySummaryModel]\r\n        ]\r\n    ) -> bool:\r\n```\r\nditto elsewhere', 'comment_created': datetime.datetime(2022, 7, 21, 10, 43, 19, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 926529581, 'comment_body': 'Th inner set of brackets is useless.', 'comment_created': datetime.datetime(2022, 7, 21, 10, 44, 29, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 926910000, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 7, 21, 16, 57, 2, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 926910100, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 7, 21, 16, 57, 9, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}]","[{'commit_sha': '35b7529d1340b99e6a09bc77fd29e18ea645150d', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '42ac6b53d5236d20005f1567097e8d65bd7c55f6', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ba7942d25f013651adf26aa6eebee04cb3b806ad', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '73bae8da4171d3ad42f4a68c4043683e5efe1ab2', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '262e3abe78a533c8daa0d06ddecd8fc66f525881', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '02391a2afdc24f5f56b5be5c4ea2d73418950edc', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5066b0ba7ee904efbd00247b3aefc87ffbfdddf6', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'eea36fe81d64bf3c51e465e70d5fe667f6ecd225', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1b288078c9487118d80ce11fb3570c9c4e6129a3', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b2aa74f0544405525ecaaa41e6d7beb991a8d5ff', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '96e5b8f22bc641b0032e486fe25386c02be065f1', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}]",Hitesh Tomar,44300735,,User,,30,,3,13
1017627778,Audit job to check if rule deletioin is possible.,"## Overview
<!--
READ ME FIRST:
Please answer *both* questions below and check off every point from the Essential Checklist!
If there is no corresponding issue number, fill in N/A where it says [fill_in_number_here] below in 1.
-->

1. This PR fixes or fixes part of None.
2. This PR does the following: This PR checks the following things -
- If we remove an invalid rule will that result in the disconnection of the current state to the next state? The invalid rules are from the following interactions - DragAndDrop, ItemSelection, NumericInput, MultipleChoiceInput.
- Returns language code of the `continue` interaction exploration so we can set the default value `Continue` as the text value to interaction that have text value more than 20.
- Returns the curated explorations that do not have `alt-with-value` as an attribute.

## Essential Checklist

- [ ] The PR title starts with ""Fix #bugnum: "", followed by a short, clear summary of the changes. (If this PR fixes part of an issue, prefix the title with ""Fix part of #bugnum: ..."".)
- [x] The linter/Karma presubmit checks have passed locally on your machine.
- [x] ""Allow edits from maintainers"" is checked. (See [here](https://help.github.com/en/github/collaborating-with-issues-and-pull-requests/allowing-changes-to-a-pull-request-branch-created-from-a-fork) for instructions on how to enable it.)
  - This lets reviewers restart your CircleCI tests for you.
- [x] The PR is made from a branch that's **not** called ""develop"".

## Proof that changes are correct

<!--
Add videos/screenshots of the user-facing interface to demonstrate that the changes
made in this PR work correctly. If this PR is for a developer-facing feature,
provide the videos/screenshots of developer-facing interface.

Please also include videos/screenshots of the developer tools
browser console, so that we can be sure that there are no console errors.

If the changes in your PRs are autogenerated via a script and you cannot provide proof
for the changes then please leave a comment ""No proof of changes needed because {{Reason}}""
and remove all the sections below.
-->

#### Proof of changes on desktop with slow/throttled network

<!--
Make sure to properly verify that everything works correctly, and that there are
no weird UI mistakes or other problems. Also, if there are any newly added fields,
try to fill them out and test that different inputs are correctly accepted/rejected.

Throttle the network (to 3G) using the browser Developer Tools (see references below).
There should be no performance or UI issues while the network is slow.

References:
 - Chrome: https://css-tricks.com/throttling-the-network/
 - Firefox: https://developer.mozilla.org/en-US/docs/Tools/Network_Monitor/Throttling
-->

#### Proof of changes on mobile phone

<!--
In some cases this is not needed (e.g. for pages that we do not expect to
support mobile phones, or for backend-only features).

Feel free to use the Developer Tools emulator for this.

References:
 - Chrome: https://developer.chrome.com/docs/devtools/device-mode/
 - Firefox: https://firefox-source-docs.mozilla.org/devtools-user/index.html#responsive-design-mode
-->

#### Proof of changes in Arabic language

<!--
If the PR changes the UI, make sure to add screenshots with the site
language set to Arabic as well (we use Arabic as it is a language written from right to left).
-->

## PR Pointers

- Make sure to follow the [instructions for making a code change](https://github.com/oppia/oppia/wiki/Make-a-pull-request).
- If you need a review or an answer to a question, and don't have permissions to assign people, **leave a comment** like the following: ""{{Question/comment}} @{{reviewer_username}} PTAL"". Oppiabot will help assign that person for you.
- For what code owners will expect, see the [Code Owner's wiki page](https://github.com/oppia/oppia/wiki/Oppia's-code-owners-and-checks-to-be-carried-out-by-developers).
- Make sure your PR follows conventions in the [style guide](https://github.com/oppia/oppia/wiki/Coding-style-guide), otherwise this will lead to review delays.
- Never force push. If you do, your PR will be closed.
- Some of the e2e tests are flaky, and can fail for reasons unrelated to your PR. We are working on fixing this, but in the meantime, if you need to restart the tests, please check the [""If your build fails"" wiki page](https://github.com/oppia/oppia/wiki/If-CI-checks-fail-on-your-PR).
",False,15846,https://api.github.com/repos/oppia/oppia/pulls/15846,https://github.com/oppia/oppia/pull/15846,closed,4636,1,4,37,34,77,4,1,"[{'name': 'stale'}, {'name': ""PR: don't merge - HAS MERGE CONFLICTS""}, {'name': 'PR: Affects datastore layer'}, {'name': ""PR: don't merge - STALE BUILD""}]",2022-08-04 14:32:10+00:00,2022-09-21 10:25:22+00:00,4132392.0,"47 days, 19:53:12","[{'comment_id': 938569642, 'comment_body': 'Please add these lines, here!!\r\n```python\r\nMYPY = False\r\nif MYPY:  # pragma: no cover\r\n    from mypy_imports import exp_models\r\n```\r\nBasically, these lines will give info to MyPy to access these modules.', 'comment_created': datetime.datetime(2022, 8, 5, 8, 19, 34, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 938573831, 'comment_body': ""Here, MyPy throwing an error because state_domain.py is not typed correctly and fully yet.\r\nFor now, to fix these the errors you can change\r\nhttps://github.com/oppia/oppia/blob/d5bfadb4af10c90c8285f24e25fba4893ebc4614/core/domain/state_domain.py#L599\r\ncustomization_args's type to `Dict[str, InteractionCustomizationArg]` but please do not change it's Dict type that was typed correctly.\r\n\r\n`customization_args: Dict[str, InteractionCustomizationArg]`"", 'comment_created': datetime.datetime(2022, 8, 5, 8, 24, 16, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 938575832, 'comment_body': 'Please add `# type: ignore[no-untyped-call]` statement here. Because these functions are defined in state_domain.py and state_domain.py is not typed yet\r\nThanks!', 'comment_created': datetime.datetime(2022, 8, 5, 8, 26, 22, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 938895389, 'comment_body': ""```suggestion\r\n                    if (\r\n                        rule_spec.rule_type == 'HasElementXBeforeElementY' and\r\n                        rule_spec.inputs['x'] == rule_spec.inputs['y'] and\r\n                        len(answer_group.rule_specs) == 1 and\r\n                        len(answer_groups) == 1\r\n                    ):\r\n                         states_with_errored_values.append(\r\n                             state_name\r\n                         )\r\n```"", 'comment_created': datetime.datetime(2022, 8, 5, 14, 50, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 938897250, 'comment_body': ""```suggestion\r\n                    if multi_item_value:\r\n                        continue\r\n                    for ele in rule_spec.inputs['x']:\r\n                        if ( \r\n                            len(ele) > 1 and\r\n                            len(answer_group.rule_specs) == 1 and\r\n                            len(answer_groups) == 1\r\n                        ):\r\n                            states_with_errored_values.append(\r\n                                state_name\r\n                            )\r\n                            break\r\n```"", 'comment_created': datetime.datetime(2022, 8, 5, 14, 52, 3, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 938898663, 'comment_body': 'ditto below', 'comment_created': datetime.datetime(2022, 8, 5, 14, 53, 29, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 944542512, 'comment_body': 'Thanks', 'comment_created': datetime.datetime(2022, 8, 12, 14, 48, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 944542638, 'comment_body': 'Thanks', 'comment_created': datetime.datetime(2022, 8, 12, 14, 48, 8, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 944542780, 'comment_body': 'Thanks', 'comment_created': datetime.datetime(2022, 8, 12, 14, 48, 16, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 944543295, 'comment_body': 'Done, also made new changes.\r\nThanks', 'comment_created': datetime.datetime(2022, 8, 12, 14, 48, 54, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 944543375, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 8, 12, 14, 48, 59, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 945243026, 'comment_body': ""I don't get this function. It either returns an empty list if all continue buttons are valid, or it returns a list with a single item (language code) if it is invalid. It never returns a list with more than a single item. Is this what you wanted? Have you tested this? What's the point of the language codes?"", 'comment_created': datetime.datetime(2022, 8, 14, 7, 29, 57, tzinfo=datetime.timezone.utc), 'commenter': 'EricZLou', 'type': 'User'}, {'comment_id': 945244194, 'comment_body': ""Yes, I mean I shouldn't return the list I should simply return the `language_code`. Actually for all the interactions that have text value more than 20 we are planing to set the value to `Continue` but as we know that our explorations are not only in English, so I'm collecting the language code of errored explorations so that we can have `Continue` converted according to the different language.\r\nThanks @EricZLou "", 'comment_created': datetime.datetime(2022, 8, 14, 7, 39, 57, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 945244863, 'comment_body': ""Got it. I think the code would be clearer if this function just returned a boolean for whether there is an invalid Continue button. In this function, you're just passing in the `language_code` and returning it back, which doesn't make too much sense at first."", 'comment_created': datetime.datetime(2022, 8, 14, 7, 45, 24, tzinfo=datetime.timezone.utc), 'commenter': 'EricZLou', 'type': 'User'}, {'comment_id': 945245084, 'comment_body': 'I will update that soon, Thanks for the review.', 'comment_created': datetime.datetime(2022, 8, 14, 7, 46, 59, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 945246252, 'comment_body': ""I have introduced 5 explorations, one for each test. I'm testing 4 interactions and 1 RTE tag. Firstly I was planning to use only single explorations and create multiple invalid states and then test them but it would be harder to understand each part."", 'comment_created': datetime.datetime(2022, 8, 14, 7, 55, 48, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 945246864, 'comment_body': 'Please note that each exploration consists of one or more states. Below is for the DragAndDrop interaction. I have made the state invalid by creating all the rules as invalid and setting their destination as a valid state so that if we remove it then it would result in disconnection of the current state to next state.', 'comment_created': datetime.datetime(2022, 8, 14, 8, 1, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 945247010, 'comment_body': 'This is for the continue interaction, to get the language code for the errored exp.', 'comment_created': datetime.datetime(2022, 8, 14, 8, 2, 10, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 945247423, 'comment_body': 'This is for the item selection interaction, here the equals rule should have value between `min selection` and `max selection` so I have created an errored state with the valid destination node so it will result in disconnection.', 'comment_created': datetime.datetime(2022, 8, 14, 8, 5, 21, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 945247623, 'comment_body': 'This is for the numeric input interaction, I have created all the errored rule specs inside the answer group with valid destination node. If all the rules are invalid and needs to remove the answer group it will result in disconnection.', 'comment_created': datetime.datetime(2022, 8, 14, 8, 7, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 945247695, 'comment_body': 'This is simply for the RTE image alt value tag, at some places the alt tag is missing.', 'comment_created': datetime.datetime(2022, 8, 14, 8, 7, 34, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 945247726, 'comment_body': 'Initializing the explorations', 'comment_created': datetime.datetime(2022, 8, 14, 8, 7, 48, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 945247848, 'comment_body': 'Mock function required because I have to add the `try except` for the `exp_fetchers` part. ', 'comment_created': datetime.datetime(2022, 8, 14, 8, 8, 41, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 945247997, 'comment_body': 'Below every function calls the invalid explorations and test them.', 'comment_created': datetime.datetime(2022, 8, 14, 8, 9, 53, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 945339619, 'comment_body': 'single line', 'comment_created': datetime.datetime(2022, 8, 14, 20, 37, 37, tzinfo=datetime.timezone.utc), 'commenter': 'EricZLou', 'type': 'User'}, {'comment_id': 949344489, 'comment_body': 'Why do you need to repeat this? You can just do `x = self.pipeline | ndb_io.GetModels(...)` and then use `x` here and above in `all_explorations`, right?', 'comment_created': datetime.datetime(2022, 8, 18, 16, 11, 19, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 949349964, 'comment_body': ""```suggestion\r\n            | 'Drop off the exp ids' >> beam.Values() # pylint: disable=no-value-for-parameter\r\n```"", 'comment_created': datetime.datetime(2022, 8, 18, 16, 16, 10, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 949350604, 'comment_body': 'This job does more than that, right?', 'comment_created': datetime.datetime(2022, 8, 18, 16, 16, 51, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 949353935, 'comment_body': 'Is it fine to just ignore the exception here?', 'comment_created': datetime.datetime(2022, 8, 18, 16, 20, 29, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 949356298, 'comment_body': ""```suggestion\r\n                    'NUMBER OF CURATED EXPS WITH INVALID DRAG DROP RULES')\r\n```"", 'comment_created': datetime.datetime(2022, 8, 18, 16, 23, 5, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 949357587, 'comment_body': 'This should somehow convey that it contains the language code.', 'comment_created': datetime.datetime(2022, 8, 18, 16, 24, 28, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 949527289, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 8, 18, 19, 38, 6, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 949527357, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 8, 18, 19, 38, 10, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 949527445, 'comment_body': 'Updated', 'comment_created': datetime.datetime(2022, 8, 18, 19, 38, 18, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 949527687, 'comment_body': ""Let's just keep it for now"", 'comment_created': datetime.datetime(2022, 8, 18, 19, 38, 37, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 949527740, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 8, 18, 19, 38, 42, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 949527816, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 8, 18, 19, 38, 46, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 957995764, 'comment_body': '```suggestion\r\n            rule_specs_till_now: List[state_domain.RuleSpecDict]. The list of\r\n                rule specs seen before the current answer_group.\r\n```', 'comment_created': datetime.datetime(2022, 8, 30, 4, 34, tzinfo=datetime.timezone.utc), 'commenter': 'EricZLou', 'type': 'User'}, {'comment_id': 957996878, 'comment_body': ""In Python, lists are passed by reference, not by value. So, you don't need to return `ele_x_at_y_rules` or `equal_ordering_...` because the variable in the calling function has already been changed. Please fix this anywhere else too to make the code easier to read!"", 'comment_created': datetime.datetime(2022, 8, 30, 4, 36, 46, tzinfo=datetime.timezone.utc), 'commenter': 'EricZLou', 'type': 'User'}, {'comment_id': 957998024, 'comment_body': ""I'm confused by this return value. Aren't you returning `len(set(invalid_rules)) == len(answer_group.rule_specs)`? So that means you're returning a boolean representing whether every rule spec in the answer group is invalid, correct?"", 'comment_created': datetime.datetime(2022, 8, 30, 4, 39, 37, tzinfo=datetime.timezone.utc), 'commenter': 'EricZLou', 'type': 'User'}, {'comment_id': 957998397, 'comment_body': ""Try to keep on 1 line if it's below 80 chars"", 'comment_created': datetime.datetime(2022, 8, 30, 4, 40, 26, tzinfo=datetime.timezone.utc), 'commenter': 'EricZLou', 'type': 'User'}, {'comment_id': 958000311, 'comment_body': 'To make your code easier to read, please make your variable names specific / the same in all parts of the code. For example, this is better as `equal_ordering_one_at_incorec_posn` like you use in your function above.', 'comment_created': datetime.datetime(2022, 8, 30, 4, 45, 4, tzinfo=datetime.timezone.utc), 'commenter': 'EricZLou', 'type': 'User'}, {'comment_id': 958000728, 'comment_body': 'This variable should really be `invalid_ans_group_idxs` right?', 'comment_created': datetime.datetime(2022, 8, 30, 4, 46, 1, tzinfo=datetime.timezone.utc), 'commenter': 'EricZLou', 'type': 'User'}, {'comment_id': 958001965, 'comment_body': ""```suggestion\r\n        for state in states_dict.values():\r\n            if state.interaction.id != 'Continue':\r\n                continue\r\n            text_value = (\r\n                state.interaction.customization_args # type: ignore[union-attr]\r\n                ['buttonText'].value.unicode_str\r\n            )\r\n            if len(text_value) > 20:\r\n                return True\r\n        return False\r\n```"", 'comment_created': datetime.datetime(2022, 8, 30, 4, 48, 47, tzinfo=datetime.timezone.utc), 'commenter': 'EricZLou', 'type': 'User'}, {'comment_id': 958004284, 'comment_body': 'Right?\r\n```suggestion\r\n            invalid_ans_group_idxs = []\r\n```', 'comment_created': datetime.datetime(2022, 8, 30, 4, 54, 11, tzinfo=datetime.timezone.utc), 'commenter': 'EricZLou', 'type': 'User'}, {'comment_id': 958005237, 'comment_body': 'Why do you have these extra parentheses?', 'comment_created': datetime.datetime(2022, 8, 30, 4, 56, 18, tzinfo=datetime.timezone.utc), 'commenter': 'EricZLou', 'type': 'User'}, {'comment_id': 958005734, 'comment_body': 'So is `x` a float or an int? And is `tol` a float or an int?', 'comment_created': datetime.datetime(2022, 8, 30, 4, 57, 25, tzinfo=datetime.timezone.utc), 'commenter': 'EricZLou', 'type': 'User'}, {'comment_id': 958006718, 'comment_body': ""You don't need to return `ranges` since you've passed it in as an argument and lists are passed by reference in Python."", 'comment_created': datetime.datetime(2022, 8, 30, 4, 59, 31, tzinfo=datetime.timezone.utc), 'commenter': 'EricZLou', 'type': 'User'}, {'comment_id': 958007667, 'comment_body': ""Make sure your conversion function doesn't use `not in`. If a new rule type is added, then it may fail. Instead, you must use `in` and put the rules that you want to be checked."", 'comment_created': datetime.datetime(2022, 8, 30, 5, 1, 40, tzinfo=datetime.timezone.utc), 'commenter': 'EricZLou', 'type': 'User'}, {'comment_id': 958008136, 'comment_body': ""You don't need to convert to `float` in division in Python."", 'comment_created': datetime.datetime(2022, 8, 30, 5, 2, 36, tzinfo=datetime.timezone.utc), 'commenter': 'EricZLou', 'type': 'User'}, {'comment_id': 958009355, 'comment_body': 'Flip the order of these 2 `if` statements. You should check `is_enclosed_by` only when you should check range criteria, right?', 'comment_created': datetime.datetime(2022, 8, 30, 5, 5, 11, tzinfo=datetime.timezone.utc), 'commenter': 'EricZLou', 'type': 'User'}, {'comment_id': 958010418, 'comment_body': ""These descriptions aren't correct!"", 'comment_created': datetime.datetime(2022, 8, 30, 5, 7, 42, tzinfo=datetime.timezone.utc), 'commenter': 'EricZLou', 'type': 'User'}, {'comment_id': 958011097, 'comment_body': ""```suggestion\r\n                        # `Contains` should always come after `Equals` and\r\n                        # `Startswith` rules.\r\n                        rule_values = rule_spec.inputs['x']['normalizedStrSet']\r\n                        seen_strings_startswith.append(rule_values)\r\n```"", 'comment_created': datetime.datetime(2022, 8, 30, 5, 9, 15, tzinfo=datetime.timezone.utc), 'commenter': 'EricZLou', 'type': 'User'}, {'comment_id': 958011819, 'comment_body': 'Can you be more descriptive in naming these variables?', 'comment_created': datetime.datetime(2022, 8, 30, 5, 10, 44, tzinfo=datetime.timezone.utc), 'commenter': 'EricZLou', 'type': 'User'}, {'comment_id': 960559545, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 9, 1, 11, 55, 6, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 960559826, 'comment_body': 'I somehow forgot about that, Thanks', 'comment_created': datetime.datetime(2022, 9, 1, 11, 55, 27, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 960559919, 'comment_body': 'Yes!', 'comment_created': datetime.datetime(2022, 9, 1, 11, 55, 33, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 960560179, 'comment_body': 'Also updated the descriptions', 'comment_created': datetime.datetime(2022, 9, 1, 11, 55, 51, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 960560272, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 9, 1, 11, 55, 55, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 960560389, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 9, 1, 11, 56, 1, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 960560507, 'comment_body': 'Updated', 'comment_created': datetime.datetime(2022, 9, 1, 11, 56, 8, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 960560739, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 9, 1, 11, 56, 13, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 960560853, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 9, 1, 11, 56, 19, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 960561371, 'comment_body': 'I thought I removed them, updated now', 'comment_created': datetime.datetime(2022, 9, 1, 11, 56, 34, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 960565037, 'comment_body': ""`x` and `tol` both can be float or int. I also have updated the code, now in `x` I'm storing the actual value of `x` without the conversion.\r\nThanks"", 'comment_created': datetime.datetime(2022, 9, 1, 11, 58, 7, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 960565139, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 9, 1, 11, 58, 13, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 960565338, 'comment_body': 'Acknowledged!', 'comment_created': datetime.datetime(2022, 9, 1, 11, 58, 26, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 960566503, 'comment_body': ""Yes but the values can be in `int` and for the fraction interaction to keep the track of the `ranges` of the rules, I'm converting them to float and then keeping the track of them"", 'comment_created': datetime.datetime(2022, 9, 1, 11, 59, 44, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 960566646, 'comment_body': 'Yep!\r\nDone', 'comment_created': datetime.datetime(2022, 9, 1, 11, 59, 55, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 960569112, 'comment_body': 'I think they are correct, as discussed previously that the `Starts-with` rule can come after the `Contains` rule. And for the `Contains` rule it cannot come after the `Equals` and `Startswith`.', 'comment_created': datetime.datetime(2022, 9, 1, 12, 2, 49, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 960569168, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 9, 1, 12, 2, 53, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 960569489, 'comment_body': 'Done, please let me know if it looks good to you.', 'comment_created': datetime.datetime(2022, 9, 1, 12, 3, 11, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 962192115, 'comment_body': ""Okay. In Python, the integer `2` is equal to the float `2.0`. So you don't need `float`, but it's okay 🤷 "", 'comment_created': datetime.datetime(2022, 9, 3, 19, 3, 41, tzinfo=datetime.timezone.utc), 'commenter': 'EricZLou', 'type': 'User'}, {'comment_id': 962192206, 'comment_body': ""They're not specific enough -- you can have `Contains hello` before `Equals goodbye`, right? You can have `Startswith hello` before `Equals goodbye`, right?"", 'comment_created': datetime.datetime(2022, 9, 3, 19, 4, 42, tzinfo=datetime.timezone.utc), 'commenter': 'EricZLou', 'type': 'User'}, {'comment_id': 962233473, 'comment_body': ""Is `rule_specs.inputs['x']` stored as a float already? If so, then this is fine. Otherwise, we'd need to convert to float"", 'comment_created': datetime.datetime(2022, 9, 4, 3, 14, 1, tzinfo=datetime.timezone.utc), 'commenter': 'EricZLou', 'type': 'User'}, {'comment_id': 962257551, 'comment_body': ""It can be a decimal value or an int value that is why I'm just replacing it with the value that I receive without any conversion."", 'comment_created': datetime.datetime(2022, 9, 4, 6, 22, 9, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 962257618, 'comment_body': 'My bad, you are right. Let me edit this.\r\nThanks', 'comment_created': datetime.datetime(2022, 9, 4, 6, 23, 4, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}]","[{'commit_sha': '62540a97c1131a9d968462862ce2c1fecd42dc0e', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4767f4b34b23e1232d03ce66f9ae8e317682d23c', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '60e3e573c67d76cf655643fd9a6da6ca4050031c', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '544e263e122ce492b2fc4f71b035781db7d8dec8', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b0fd4301911e8180d0c4c28cd3c7b0b05f60c57a', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2df18c9c581d72bc85497214194d52c099689cf5', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f864544a26cc3bd4b1ce4284d8b5309d9c57b305', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8dc5174f8673f2946d9e0b7f6a888cd932be9755', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b96ac60e799dae23cada0c3bbecd91801979cf57', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b428f5972b8bf662f75e2773185de800dbe090f7', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '43027d39800173731e3c0a84ed9982b6a42f0a11', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '66542b50994f1ef8f5bf4b771981956c188e6110', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4bc9618b9d9e4752e0fd487cf7c590ea48313d2b', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2c57c3ba081e5990403aa4b695d90081738d4d14', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '15904f510f09e33fa237b1f8b0403781855ae805', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5b2664b5108781c1b45e5f2eeb440830593e409f', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '80cab7ade05ab5119569c29776385cf69ca476c8', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8e5bf2ac63a7eb59e226d46b0b22ff4c2dc5f813', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '617b62491f129da72ddda0b7aebeb2af48509cc7', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '553f329d63884dcd61499ec70c430716dc0904ad', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c180278a08aa9ed254b408002f1b11ff93304bc5', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '448ec856dde8444347ebd97c22107bc07e6f3ca5', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e7a5692a2eafb311644712e33eca7b043c656021', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b7a6355f487330c77301b65f62e3a366b18a4c2f', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e9008ff75419825634ee995899c06d9fe0e96675', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '791fc66e4ba181c0cfeadb4a0fb463ea24a2f0d0', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a8ee20f54efdc1188f7ab7f0485cbfc823e64167', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd1916f5c84da9907902eb2dfa587b96aa92185d2', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd995e37fd2a50252d5d19187eee6b8d8b5c7603b', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ee15afc336beed82fe4bd1bc4a680b825b2a470b', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2abc7dd5e516e225a8ad517bf796be344974649b', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2a2f0c59a8f355d5b1dcdb9f40fd91b7f279a496', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '19358d75c8bfff6bb7dc187e09660df881ada13a', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5e5a2696d835c37870a4c3255533013bbee26594', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'eeb6bbd956c9c621347ff2043340627e21f4b2d8', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '44570c304fb798710bac7ce66808c3d40d2d7ba4', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4c32ae845b4ec19e2dc73e780d6d2fc050ce1702', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}]",Hitesh Tomar,44300735,,User,,30,,3,13
1047703613,Audit job to fetch invalid `tabs` and `collapsibles` data,"## Overview
<!--
READ ME FIRST:
Please answer *both* questions below and check off every point from the Essential Checklist!
If there is no corresponding issue number, fill in N/A where it says [fill_in_number_here] below in 1.
-->

1. This PR fixes or fixes part of N/A.
2. This PR does the following: Fetches all the invalid data from the tabs and collapsible RTE tags.

## Essential Checklist

- [ ] The PR title starts with ""Fix #bugnum: "", followed by a short, clear summary of the changes. (If this PR fixes part of an issue, prefix the title with ""Fix part of #bugnum: ..."".)
- [ ] The linter/Karma presubmit checks have passed locally on your machine.
- [x] ""Allow edits from maintainers"" is checked. (See [here](https://help.github.com/en/github/collaborating-with-issues-and-pull-requests/allowing-changes-to-a-pull-request-branch-created-from-a-fork) for instructions on how to enable it.)
  - This lets reviewers restart your CircleCI tests for you.
- [x] The PR is made from a branch that's **not** called ""develop"".

## Proof that changes are correct

<!--
Add videos/screenshots of the user-facing interface to demonstrate that the changes
made in this PR work correctly. If this PR is for a developer-facing feature,
provide the videos/screenshots of developer-facing interface.

Please also include videos/screenshots of the developer tools
browser console, so that we can be sure that there are no console errors.

If the changes in your PRs are autogenerated via a script and you cannot provide proof
for the changes then please leave a comment ""No proof of changes needed because {{Reason}}""
and remove all the sections below.
-->

#### Proof of changes on desktop with slow/throttled network

<!--
Make sure to properly verify that everything works correctly, and that there are
no weird UI mistakes or other problems. Also, if there are any newly added fields,
try to fill them out and test that different inputs are correctly accepted/rejected.

Throttle the network (to 3G) using the browser Developer Tools (see references below).
There should be no performance or UI issues while the network is slow.

References:
 - Chrome: https://css-tricks.com/throttling-the-network/
 - Firefox: https://developer.mozilla.org/en-US/docs/Tools/Network_Monitor/Throttling
-->

#### Proof of changes on mobile phone

<!--
In some cases this is not needed (e.g. for pages that we do not expect to
support mobile phones, or for backend-only features).

Feel free to use the Developer Tools emulator for this.

References:
 - Chrome: https://developer.chrome.com/docs/devtools/device-mode/
 - Firefox: https://firefox-source-docs.mozilla.org/devtools-user/index.html#responsive-design-mode
-->

#### Proof of changes in Arabic language

<!--
If the PR changes the UI, make sure to add screenshots with the site
language set to Arabic as well (we use Arabic as it is a language written from right to left).
-->

## PR Pointers

- Make sure to follow the [instructions for making a code change](https://github.com/oppia/oppia/wiki/Make-a-pull-request).
- If you need a review or an answer to a question, and don't have permissions to assign people, **leave a comment** like the following: ""{{Question/comment}} @{{reviewer_username}} PTAL"". Oppiabot will help assign that person for you.
- For what code owners will expect, see the [Code Owner's wiki page](https://github.com/oppia/oppia/wiki/Oppia's-code-owners-and-checks-to-be-carried-out-by-developers).
- Make sure your PR follows conventions in the [style guide](https://github.com/oppia/oppia/wiki/Coding-style-guide), otherwise this will lead to review delays.
- Never force push. If you do, your PR will be closed.
- Some of the e2e tests are flaky, and can fail for reasons unrelated to your PR. We are working on fixing this, but in the meantime, if you need to restart the tests, please check the [""If your build fails"" wiki page](https://github.com/oppia/oppia/wiki/If-CI-checks-fail-on-your-PR).
",False,16012,https://api.github.com/repos/oppia/oppia/pulls/16012,https://github.com/oppia/oppia/pull/16012,closed,1320,0,4,27,24,13,2,1,"[{'name': ""PR: don't merge - HAS MERGE CONFLICTS""}, {'name': 'PR: Affects datastore layer'}]",2022-09-06 15:12:00+00:00,2022-10-11 22:05:56+00:00,3048836.0,"35 days, 6:53:56","[{'comment_id': 964240785, 'comment_body': 'In Python, `\'\'` (2 single quotes) and `""""` (2 double quotes) are the same thing... both empty strings. `\'\\\'\\\'\'` and `\'\\""\\""\'` are different of course because that\'s a string that contains 2 single quotes vs a string that contains 2 double quotes', 'comment_created': datetime.datetime(2022, 9, 6, 22, 57, 30, tzinfo=datetime.timezone.utc), 'commenter': 'EricZLou', 'type': 'User'}, {'comment_id': 964241416, 'comment_body': ""Lol I don't want to repeat the same comments as previous PRs but the right thing to do is:\r\n```\r\nif 'start-with-value' not in tag:\r\n    ... append error ...\r\n```"", 'comment_created': datetime.datetime(2022, 9, 6, 22, 59, 5, tzinfo=datetime.timezone.utc), 'commenter': 'EricZLou', 'type': 'User'}, {'comment_id': 964895412, 'comment_body': ""I tried doing that previously, we won't be able to do that because here the `tag` is not considered as a string it is a value that is of type from `bs4`. It will always go the `else` part.\r\nThanks"", 'comment_created': datetime.datetime(2022, 9, 7, 14, 9, 30, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 964896314, 'comment_body': 'My bad, I forgot to remove them as I was testing different things. I will do that.\r\nThanks for noticing it.', 'comment_created': datetime.datetime(2022, 9, 7, 14, 10, 15, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 964904147, 'comment_body': 'Ah I see thanks for clarifying. Bs4 might have a class method that does this operation?', 'comment_created': datetime.datetime(2022, 9, 7, 14, 17, tzinfo=datetime.timezone.utc), 'commenter': 'EricZLou', 'type': 'User'}, {'comment_id': 964939540, 'comment_body': 'Yeah', 'comment_created': datetime.datetime(2022, 9, 7, 14, 45, 41, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 967701893, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 9, 10, 20, 53, 16, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 967731276, 'comment_body': ""I'm guessing you did this because you haven't looked into what the possible values can be? I get what you're doing and I guess it's fine, but in the future, look into it first and then write the code."", 'comment_created': datetime.datetime(2022, 9, 11, 1, 41, 11, tzinfo=datetime.timezone.utc), 'commenter': 'EricZLou', 'type': 'User'}, {'comment_id': 967732012, 'comment_body': ""Have you found if there's a method for this?"", 'comment_created': datetime.datetime(2022, 9, 11, 1, 42, 47, tzinfo=datetime.timezone.utc), 'commenter': 'EricZLou', 'type': 'User'}, {'comment_id': 967793763, 'comment_body': 'I have looked at the values and the values can only be of the form `""true"" or ""false""` but Sean mentioned previously that if there is any possibility from which we can depict the original intention of the user we should do so.', 'comment_created': datetime.datetime(2022, 9, 11, 9, 30, 22, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 967793946, 'comment_body': 'Yes, the type of the tag is `bs4.element.Tag`', 'comment_created': datetime.datetime(2022, 9, 11, 9, 31, 37, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 967831308, 'comment_body': ""No, I mean Bs4 may have a cleaner method to call. Like tag.contains('start-with-value'). So then instead of try except you can do an if statement, which is better Python. "", 'comment_created': datetime.datetime(2022, 9, 11, 13, 44, 32, tzinfo=datetime.timezone.utc), 'commenter': 'EricZLou', 'type': 'User'}, {'comment_id': 967832365, 'comment_body': 'I see, my bad. I have found one method which is `tag.has_attr()`. Will it be okay if I use this thing in the conversion function instead, otherwise there will be lots of changes?\r\nThanks', 'comment_created': datetime.datetime(2022, 9, 11, 13, 51, 45, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}]","[{'commit_sha': '43627d4f3b500022395fc28d73ac256b530a18b0', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9d53cfb3a480aaadfa2de20010aa4ba5231b22f0', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4f9c0f8648f49dcffe649f3458d9b63013fdb351', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '12f684144a6c775ced3289b6dcf232422bde5f45', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '10762b0a399aa251867e855ee79ca6b88055bb16', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8d3b3fb3e027267876c444f57f64cedb894205b1', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '95fb5a204cff787afe13e3de433d9d5ca70c1479', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5440ad924511988e1a57592a14eb277bd03ee0eb', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c9e39e2783f2f9a348304867475a41aa3ce6b391', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd3a5e5ffeed5d5d4d7eee5f28c361b7cf5ffa4fd', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8592043fd7ac3bb054df10999f4e6ace52d1eeeb', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f6d8c70c8e5cb1749f795bab587f487dfcee6fea', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8a38fdbb1c052717bd7154a3b19b1fa7f91d40f0', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9da9f84bf21892ae219998c4eb01c8313a50d068', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fd8751dc40878340731caafaa76de62cac484163', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fe03925cd966626b32aefb753d6367d54a5a288f', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4545ac02a829d387f8e071827dadfbfb7276468f', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0065d9393162a39e51b6be4fdb61a9ad77b0a8fb', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c5be12af90893beaf2baee01d4c4efa20e35ebb0', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5eddffd6728e83b493571a8600664c45c11dd9a0', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '301a70144bc60015b981e343b3733dba564ebb8c', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e4b1c8d689b3392f03c56864e714bcea59873ef9', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6fbdf1f40ff5d519cb759e7bc20039b4e6db6a3e', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f6c9df1de939959c828caafde3ed8a5b265be86e', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7f30e9deb873aa70221f341f42c063415b9446bb', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b80c1b6099598950baaa42a647d1ee0b8aca9b0d', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd8d40d255a5940c802e9372e75edb170f7827a5f', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}]",Hitesh Tomar,44300735,,User,,30,,3,13
1020587952,Conversion function for exploration validation checks,"## Overview
<!--
READ ME FIRST:
Please answer *both* questions below and check off every point from the Essential Checklist!
If there is no corresponding issue number, fill in N/A where it says [fill_in_number_here] below in 1.
-->

1. This PR fixes or fixes part of #13820 #13821 #13822.
2. This PR does the following: Applies the conversion function to update state, interaction and RTE

## Essential Checklist

- [x] The PR title starts with ""Fix #bugnum: "", followed by a short, clear summary of the changes. (If this PR fixes part of an issue, prefix the title with ""Fix part of #bugnum: ..."".)
- [x] The linter/Karma presubmit checks have passed locally on your machine.
- [x] ""Allow edits from maintainers"" is checked. (See [here](https://help.github.com/en/github/collaborating-with-issues-and-pull-requests/allowing-changes-to-a-pull-request-branch-created-from-a-fork) for instructions on how to enable it.)
  - This lets reviewers restart your CircleCI tests for you.
- [x] The PR is made from a branch that's **not** called ""develop"".

## Proof that changes are correct
Please see the video below for the proof of successful run of `AuditRejectSuggestionWithMissingContentIdMigrationJob` and `RejectSuggestionWithMissingContentIdMigrationJob`.
Firstly on the contributor page you can see a suggestion whose content id is missing, which is `ans`. Running the audit job and checking the errors part, see the `missing_content_ids` value, which is not empty. Take a look at the `content_before` and `content_after` value which is related to an invalid image tag.
After running the actual migration job and then after running the audit job again to check the output, You can see that the `missing_content_ids` is empty list, which it should be and all the `content_before` and `content_after` is same. Then after visiting the contributor dashboard we will no longer find the invalid suggestion.

https://user-images.githubusercontent.com/44300735/196828365-aab7ae68-6161-4964-860b-e51dcf91c7a2.mp4

Reviewer's point of view before migration.

![Screenshot from 2022-10-29 01-12-23](https://user-images.githubusercontent.com/44300735/198862200-208e2112-8775-4b41-b0af-5ad03b3eaca6.png)

Reviewer's point of view after migration.

![Screenshot from 2022-10-29 01-18-00](https://user-images.githubusercontent.com/44300735/198862209-6f808f3c-360f-48a3-ae78-93c1af34945c.png)


#### Proof of changes on desktop with slow/throttled network

<!--
Make sure to properly verify that everything works correctly, and that there are
no weird UI mistakes or other problems. Also, if there are any newly added fields,
try to fill them out and test that different inputs are correctly accepted/rejected.

Throttle the network (to 3G) using the browser Developer Tools (see references below).
There should be no performance or UI issues while the network is slow.

References:
 - Chrome: https://css-tricks.com/throttling-the-network/
 - Firefox: https://developer.mozilla.org/en-US/docs/Tools/Network_Monitor/Throttling
-->

#### Proof of changes on mobile phone

<!--
In some cases this is not needed (e.g. for pages that we do not expect to
support mobile phones, or for backend-only features).

Feel free to use the Developer Tools emulator for this.

References:
 - Chrome: https://developer.chrome.com/docs/devtools/device-mode/
 - Firefox: https://firefox-source-docs.mozilla.org/devtools-user/index.html#responsive-design-mode
-->

#### Proof of changes in Arabic language

<!--
If the PR changes the UI, make sure to add screenshots with the site
language set to Arabic as well (we use Arabic as it is a language written from right to left).
-->

## PR Pointers

- Make sure to follow the [instructions for making a code change](https://github.com/oppia/oppia/wiki/Make-a-pull-request).
- If you need a review or an answer to a question, and don't have permissions to assign people, **leave a comment** like the following: ""{{Question/comment}} @{{reviewer_username}} PTAL"". Oppiabot will help assign that person for you.
- For what code owners will expect, see the [Code Owner's wiki page](https://github.com/oppia/oppia/wiki/Oppia's-code-owners-and-checks-to-be-carried-out-by-developers).
- Make sure your PR follows conventions in the [style guide](https://github.com/oppia/oppia/wiki/Coding-style-guide), otherwise this will lead to review delays.
- Never force push. If you do, your PR will be closed.
- Some of the e2e tests are flaky, and can fail for reasons unrelated to your PR. We are working on fixing this, but in the meantime, if you need to restart the tests, please check the [""If your build fails"" wiki page](https://github.com/oppia/oppia/wiki/If-CI-checks-fail-on-your-PR).
",True,15861,https://api.github.com/repos/oppia/oppia/pulls/15861,https://github.com/oppia/oppia/pull/15861,closed,8587,176,24,220,82,433,2,1,"[{'name': 'PR: LGTM'}, {'name': 'PR: Affects datastore layer'}]",2022-08-08 17:58:23+00:00,2022-10-30 07:51:36+00:00,7134793.0,"82 days, 13:53:13","[{'comment_id': 947498074, 'comment_body': ""Have you tested this yet? This won't work and won't be a good thing to do for the future. If the state schema version if 50, then this will try to run `_convert_states_v50_dict_to_v51_dict(states, language_code)`, but that function doesn't take in a `language_code` argument. \r\n\r\nAlso, adding this `language_code` argument here makes it so that every future schema migration would need to pass in the `language_code` even if it is not used. You should make a one-off `elif` statement instead like it does for `v43`."", 'comment_created': datetime.datetime(2022, 8, 17, 6, 27, 4, tzinfo=datetime.timezone.utc), 'commenter': 'EricZLou', 'type': 'User'}, {'comment_id': 947499143, 'comment_body': 'move to top of file', 'comment_created': datetime.datetime(2022, 8, 17, 6, 28, 39, tzinfo=datetime.timezone.utc), 'commenter': 'EricZLou', 'type': 'User'}, {'comment_id': 947499553, 'comment_body': 'Make this more specific. Say that it fixes all backend validation checks for explorations.', 'comment_created': datetime.datetime(2022, 8, 17, 6, 29, 18, tzinfo=datetime.timezone.utc), 'commenter': 'EricZLou', 'type': 'User'}, {'comment_id': 947500159, 'comment_body': 'Add a brief comment above these lines saying why we need the list `exp_ids`.', 'comment_created': datetime.datetime(2022, 8, 17, 6, 30, 15, tzinfo=datetime.timezone.utc), 'commenter': 'EricZLou', 'type': 'User'}, {'comment_id': 947500948, 'comment_body': '`labelled_as_correct`', 'comment_created': datetime.datetime(2022, 8, 17, 6, 31, 29, tzinfo=datetime.timezone.utc), 'commenter': 'EricZLou', 'type': 'User'}, {'comment_id': 947501423, 'comment_body': '`labelled_as_correct`', 'comment_created': datetime.datetime(2022, 8, 17, 6, 32, 10, tzinfo=datetime.timezone.utc), 'commenter': 'EricZLou', 'type': 'User'}, {'comment_id': 947502617, 'comment_body': 'Might as well just take away the `if` statement, right?', 'comment_created': datetime.datetime(2022, 8, 17, 6, 33, 56, tzinfo=datetime.timezone.utc), 'commenter': 'EricZLou', 'type': 'User'}, {'comment_id': 947503119, 'comment_body': 'Same thing as above.', 'comment_created': datetime.datetime(2022, 8, 17, 6, 34, 49, tzinfo=datetime.timezone.utc), 'commenter': 'EricZLou', 'type': 'User'}, {'comment_id': 947503879, 'comment_body': 'Move this line above the `default_outcome` check. Makes it a little cleaner to read since we stop populating the `answer_groups` variable after the `for` loop', 'comment_created': datetime.datetime(2022, 8, 17, 6, 36, tzinfo=datetime.timezone.utc), 'commenter': 'EricZLou', 'type': 'User'}, {'comment_id': 947504400, 'comment_body': 'Add a big comment here marking the start of the updating general state section.', 'comment_created': datetime.datetime(2022, 8, 17, 6, 36, 47, tzinfo=datetime.timezone.utc), 'commenter': 'EricZLou', 'type': 'User'}, {'comment_id': 947504508, 'comment_body': 'Add a big comment here marking the start of the updating interactions section.', 'comment_created': datetime.datetime(2022, 8, 17, 6, 36, 59, tzinfo=datetime.timezone.utc), 'commenter': 'EricZLou', 'type': 'User'}, {'comment_id': 947507096, 'comment_body': ""what's the point of the `seen_choices` variable?"", 'comment_created': datetime.datetime(2022, 8, 17, 6, 40, 45, tzinfo=datetime.timezone.utc), 'commenter': 'EricZLou', 'type': 'User'}, {'comment_id': 947507357, 'comment_body': 'Can you clarify what this comment means?', 'comment_created': datetime.datetime(2022, 8, 17, 6, 41, 4, tzinfo=datetime.timezone.utc), 'commenter': 'EricZLou', 'type': 'User'}, {'comment_id': 947508843, 'comment_body': 'What if there are 0 empty choices?', 'comment_created': datetime.datetime(2022, 8, 17, 6, 43, 12, tzinfo=datetime.timezone.utc), 'commenter': 'EricZLou', 'type': 'User'}, {'comment_id': 947511520, 'comment_body': 'What happens when the answer group ends up with 0 rule specs?', 'comment_created': datetime.datetime(2022, 8, 17, 6, 46, 50, tzinfo=datetime.timezone.utc), 'commenter': 'EricZLou', 'type': 'User'}, {'comment_id': 947514185, 'comment_body': ""I don't think this works... does it? Doesn't this end up removing all of the duplicate rule specs? Should it keep the 1st time the rule spec shows up? Also this triple `for` loop is not good -- try to modify all of your code to use Python `set` and `dict` wherever they may be appropriate."", 'comment_created': datetime.datetime(2022, 8, 17, 6, 50, 22, tzinfo=datetime.timezone.utc), 'commenter': 'EricZLou', 'type': 'User'}, {'comment_id': 947515143, 'comment_body': 'Indent this (and the other similar comments below)', 'comment_created': datetime.datetime(2022, 8, 17, 6, 51, 44, tzinfo=datetime.timezone.utc), 'commenter': 'EricZLou', 'type': 'User'}, {'comment_id': 947515834, 'comment_body': 'Add a comment marking the start of the RTE update.s', 'comment_created': datetime.datetime(2022, 8, 17, 6, 52, 38, tzinfo=datetime.timezone.utc), 'commenter': 'EricZLou', 'type': 'User'}, {'comment_id': 947516286, 'comment_body': 'What does decompose do?', 'comment_created': datetime.datetime(2022, 8, 17, 6, 53, 12, tzinfo=datetime.timezone.utc), 'commenter': 'EricZLou', 'type': 'User'}, {'comment_id': 948661751, 'comment_body': 'Yeah you are right, updated!', 'comment_created': datetime.datetime(2022, 8, 18, 5, 26, 20, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 948661845, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 8, 18, 5, 26, 28, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 948661899, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 8, 18, 5, 26, 33, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 948661951, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 8, 18, 5, 26, 39, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 948661979, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 8, 18, 5, 26, 44, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 948662001, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 8, 18, 5, 26, 47, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 948662079, 'comment_body': 'Yep, updated', 'comment_created': datetime.datetime(2022, 8, 18, 5, 26, 54, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 948662109, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 8, 18, 5, 26, 58, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 948662139, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 8, 18, 5, 27, 4, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 948662175, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 8, 18, 5, 27, 8, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 948662213, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 8, 18, 5, 27, 13, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 948662416, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 8, 18, 5, 27, 37, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 948662889, 'comment_body': '`seen_choices` will help us to detect duplicates, if the choice is present in the `seen_choices` then it is a duplicate and we can remove it.', 'comment_created': datetime.datetime(2022, 8, 18, 5, 28, 42, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 948665730, 'comment_body': ""Yeah, so I just added this as a reminder. Currently after removing invalid choices if the count is less than 4 we have a frontend validation present even for private and public and if we try to resolve them by creating a new choice to make the count to 4 then it will result in an error in the backend something like `Expected state written_translations to match the listed content ids ['content', 'feedback_1', 'feedback_3', 'feedback_4', 'default_outcome'], found ['content', 'default_outcome', 'feedback_1', 'feedback_2', 'feedback_3', 'feedback_4', 'feedback_5']`\r\nThat's why I have added the check in #15846 to gather all the curated explorations which will end up with choices less than 4.\r\nThanks"", 'comment_created': datetime.datetime(2022, 8, 18, 5, 33, 50, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 948666225, 'comment_body': 'Nothing will happen, if there are no empty choices we will simply pass. we will not enter to the loop present in the `else` part.', 'comment_created': datetime.datetime(2022, 8, 18, 5, 34, 54, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 948667595, 'comment_body': ""I have added the checks in #15846  to gather the result for, if the whole answer_group is invalid and if it's destination node is not `try again`. That's why I just left a comment so that I can add the details later."", 'comment_created': datetime.datetime(2022, 8, 18, 5, 37, 51, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 948671229, 'comment_body': 'No it will not, the `equals_rule_to_remove` only contains the rule that needs to be removed as on line 2682 `if rule_spec_x in equals_rule_values:` we are checking if the value is present in `equals_rule_values` then only we append the invalid rule.\r\n\r\nYeah I agree that 3 loops are not very effective but the thing is we will not be able to use any other thing. The problem is that in python we cannot remove multiple items in the loop on which we are iterating, it will result in skipping some of the values. We cannot keep track of the indexes because as soon as we will remove one element the index will change. We will not be able to use the `set` as it is not necessary that the rule will be exactly same though they will be of rule_type `Equals` but some values like maybe destination node or solution part will differ, We still need to remove that as this rule will never going to get matched.\r\nThanks', 'comment_created': datetime.datetime(2022, 8, 18, 5, 45, 37, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 948671260, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 8, 18, 5, 45, 41, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 948671285, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 8, 18, 5, 45, 45, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 948671428, 'comment_body': 'It simply removes the complete tag', 'comment_created': datetime.datetime(2022, 8, 18, 5, 46, 6, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 948672036, 'comment_body': 'I tested it and it was working fine because the maximum version will be 51. I have updated it thanks for pointing it out', 'comment_created': datetime.datetime(2022, 8, 18, 5, 47, 23, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 948672062, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 8, 18, 5, 47, 27, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 948672105, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 8, 18, 5, 47, 32, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 948672144, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 8, 18, 5, 47, 35, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 949781394, 'comment_body': ""Can you think through this function more? It's quite complicated. I understand what you're trying to do but there are some bugs and redundancies in it."", 'comment_created': datetime.datetime(2022, 8, 19, 4, 6, 2, tzinfo=datetime.timezone.utc), 'commenter': 'EricZLou', 'type': 'User'}, {'comment_id': 949781908, 'comment_body': ""Okay got it. It's a bit unclear which parts of the file are still incomplete and are waiting on #15846. Can you label them as `TODO` or something?"", 'comment_created': datetime.datetime(2022, 8, 19, 4, 7, 43, tzinfo=datetime.timezone.utc), 'commenter': 'EricZLou', 'type': 'User'}, {'comment_id': 949786290, 'comment_body': 'For example: In this entire code, you only need the indices of the empty choices, right? In that case, to make your code clearer, just store the indices. You can use `enumerate`.', 'comment_created': datetime.datetime(2022, 8, 19, 4, 20, 56, tzinfo=datetime.timezone.utc), 'commenter': 'EricZLou', 'type': 'User'}, {'comment_id': 949786583, 'comment_body': 'And are the empty choices in the original list of choices actually fixed by this code? You never modify the `choices` argument, right?', 'comment_created': datetime.datetime(2022, 8, 19, 4, 21, 49, tzinfo=datetime.timezone.utc), 'commenter': 'EricZLou', 'type': 'User'}, {'comment_id': 949789521, 'comment_body': 'Okay! It will be faster if you make `for rule_to_remove in equals_rule_to_remove:` the 3rd for loop instead of the first.', 'comment_created': datetime.datetime(2022, 8, 19, 4, 30, 21, tzinfo=datetime.timezone.utc), 'commenter': 'EricZLou', 'type': 'User'}, {'comment_id': 949798846, 'comment_body': '```suggestion\r\n    def _update_general_state_interaction(\r\n        cls, states_dict: Dict[str, state_domain.StateDict],\r\n        exp_ids: List[str], language_code: str\r\n    ) -> Dict[str, state_domain.StateDict]:\r\n      _interaction_end_exploration_validation()\r\n      _interaction_continue_validation()\r\n      _interaction_fraction_input_validation()\r\n      ...\r\n```', 'comment_created': datetime.datetime(2022, 8, 19, 4, 55, 44, tzinfo=datetime.timezone.utc), 'commenter': 'EricZLou', 'type': 'User'}, {'comment_id': 949847061, 'comment_body': 'Put this with the other package imports. Aka above import collections.', 'comment_created': datetime.datetime(2022, 8, 19, 6, 36, 13, tzinfo=datetime.timezone.utc), 'commenter': 'EricZLou', 'type': 'User'}, {'comment_id': 949848490, 'comment_body': 'Can you move this directly above where you do the recommended explorations check in `update_general_state_interaction`? ', 'comment_created': datetime.datetime(2022, 8, 19, 6, 37, 44, tzinfo=datetime.timezone.utc), 'commenter': 'EricZLou', 'type': 'User'}, {'comment_id': 949849327, 'comment_body': '```suggestion\r\n    ########################################\r\n    # Fix validation errors for exploration state.\r\n    ########################################\r\n```', 'comment_created': datetime.datetime(2022, 8, 19, 6, 39, 4, tzinfo=datetime.timezone.utc), 'commenter': 'EricZLou', 'type': 'User'}, {'comment_id': 949849458, 'comment_body': '(and other places)', 'comment_created': datetime.datetime(2022, 8, 19, 6, 39, 18, tzinfo=datetime.timezone.utc), 'commenter': 'EricZLou', 'type': 'User'}, {'comment_id': 949850072, 'comment_body': ""Can we make this simpler?\r\n```suggestion\r\n                if answer_group['outcome']['dest'] == state_name:\r\n                    answer_group['outcome']['labelled_as_correct'] = False\r\n```"", 'comment_created': datetime.datetime(2022, 8, 19, 6, 40, 22, tzinfo=datetime.timezone.utc), 'commenter': 'EricZLou', 'type': 'User'}, {'comment_id': 949851222, 'comment_body': ""This isn't the full validation description that this function checks right?"", 'comment_created': datetime.datetime(2022, 8, 19, 6, 42, 17, tzinfo=datetime.timezone.utc), 'commenter': 'EricZLou', 'type': 'User'}, {'comment_id': 949855687, 'comment_body': '```\r\nif len(rule_choice) == 0:\r\n    ...\r\nelse:\r\n    for choice in rule_choice: ...\r\n```', 'comment_created': datetime.datetime(2022, 8, 19, 6, 49, 51, tzinfo=datetime.timezone.utc), 'commenter': 'EricZLou', 'type': 'User'}, {'comment_id': 949857291, 'comment_body': 'To follow the convention you started above with `ele_x_at_y_rules`, can we do:\r\n```suggestion\r\n        off_by_one_rules = []\r\n```', 'comment_created': datetime.datetime(2022, 8, 19, 6, 52, 16, tzinfo=datetime.timezone.utc), 'commenter': 'EricZLou', 'type': 'User'}, {'comment_id': 949858644, 'comment_body': 'Try to make dictionary names more descriptive like: `item_to_layer_idx`', 'comment_created': datetime.datetime(2022, 8, 19, 6, 54, 19, tzinfo=datetime.timezone.utc), 'commenter': 'EricZLou', 'type': 'User'}, {'comment_id': 949859505, 'comment_body': 'Mention which interactions this is used for.', 'comment_created': datetime.datetime(2022, 8, 19, 6, 55, 41, tzinfo=datetime.timezone.utc), 'commenter': 'EricZLou', 'type': 'User'}, {'comment_id': 949859575, 'comment_body': 'Mention which interactions this is used for.', 'comment_created': datetime.datetime(2022, 8, 19, 6, 55, 48, tzinfo=datetime.timezone.utc), 'commenter': 'EricZLou', 'type': 'User'}, {'comment_id': 949860628, 'comment_body': ""Instead of using `!=` for rule types, as mentioned by Sean before, let's make this list explicit and change it to `==`."", 'comment_created': datetime.datetime(2022, 8, 19, 6, 57, 21, tzinfo=datetime.timezone.utc), 'commenter': 'EricZLou', 'type': 'User'}, {'comment_id': 949861034, 'comment_body': ""You don't need these parentheses."", 'comment_created': datetime.datetime(2022, 8, 19, 6, 58, tzinfo=datetime.timezone.utc), 'commenter': 'EricZLou', 'type': 'User'}, {'comment_id': 949862730, 'comment_body': 'Name this something more descriptive. ', 'comment_created': datetime.datetime(2022, 8, 19, 7, 0, 40, tzinfo=datetime.timezone.utc), 'commenter': 'EricZLou', 'type': 'User'}, {'comment_id': 949863232, 'comment_body': ""In Python, you don't need to cast / convert to float when dividing integers."", 'comment_created': datetime.datetime(2022, 8, 19, 7, 1, 10, tzinfo=datetime.timezone.utc), 'commenter': 'EricZLou', 'type': 'User'}, {'comment_id': 949864299, 'comment_body': ""Can't you just remove the `if` part of this? Since `rule_value_f['wholeNumber']` will be equal to 0 anyways. "", 'comment_created': datetime.datetime(2022, 8, 19, 7, 1, 57, tzinfo=datetime.timezone.utc), 'commenter': 'EricZLou', 'type': 'User'}, {'comment_id': 949864772, 'comment_body': 'similar comments here as above.', 'comment_created': datetime.datetime(2022, 8, 19, 7, 2, 17, tzinfo=datetime.timezone.utc), 'commenter': 'EricZLou', 'type': 'User'}, {'comment_id': 949868442, 'comment_body': 'do you need this line?', 'comment_created': datetime.datetime(2022, 8, 19, 7, 5, 7, tzinfo=datetime.timezone.utc), 'commenter': 'EricZLou', 'type': 'User'}, {'comment_id': 949869292, 'comment_body': ""don't need so many parentheses"", 'comment_created': datetime.datetime(2022, 8, 19, 7, 5, 49, tzinfo=datetime.timezone.utc), 'commenter': 'EricZLou', 'type': 'User'}, {'comment_id': 949870523, 'comment_body': 'also logically, would it make more sense to first call `should_check_range_criteria` and then check `is_enclosed_by` as the inner check?', 'comment_created': datetime.datetime(2022, 8, 19, 7, 6, 44, tzinfo=datetime.timezone.utc), 'commenter': 'EricZLou', 'type': 'User'}, {'comment_id': 949871727, 'comment_body': 'Would `den` ever be None? If not, remove the check', 'comment_created': datetime.datetime(2022, 8, 19, 7, 7, 50, tzinfo=datetime.timezone.utc), 'commenter': 'EricZLou', 'type': 'User'}, {'comment_id': 949872341, 'comment_body': ""Prefer (if it passes the linter):\r\n```suggestion\r\n                        if (den['denominator'] ==\r\n                            rule_spec['inputs']['f']['denominator']):\r\n```"", 'comment_created': datetime.datetime(2022, 8, 19, 7, 8, 35, tzinfo=datetime.timezone.utc), 'commenter': 'EricZLou', 'type': 'User'}, {'comment_id': 949872855, 'comment_body': 'Add a `TODO` here to add the other languages (if there are any).', 'comment_created': datetime.datetime(2022, 8, 19, 7, 9, 21, tzinfo=datetime.timezone.utc), 'commenter': 'EricZLou', 'type': 'User'}, {'comment_id': 949877781, 'comment_body': ""There seems to be too much logic for this part. Would this work? Also, make sure you convert `exp_ids` into a `set()` before doing this to make it faster. Also to make the variable naming less confusing, can we call it `all_exp_ids`?\r\n```suggestion\r\n            if state_dict['interaction']['id'] == 'EndExploration':\r\n                recc_exp_ids = state_dict['interaction'][\r\n                    'customization_args']['recommendedExplorationIds']['value']\r\n                # All recommended explorations should be valid.\r\n                valid_recc_exp_ids = [\r\n                    exp_id for exp_id in recc_exp_ids if exp_id in all_exp_ids]\r\n                state_dict['interaction']['customization_args'][\r\n                    'recommendedExplorationIds']['value'] = valid_recc_exp_ids[:3]\r\n```"", 'comment_created': datetime.datetime(2022, 8, 19, 7, 16, 27, tzinfo=datetime.timezone.utc), 'commenter': 'EricZLou', 'type': 'User'}, {'comment_id': 949878282, 'comment_body': 'Please remember to use list comprehension when clear and possible! Makes code more concise.', 'comment_created': datetime.datetime(2022, 8, 19, 7, 17, 6, tzinfo=datetime.timezone.utc), 'commenter': 'EricZLou', 'type': 'User'}, {'comment_id': 949879485, 'comment_body': ""I may be missing something, but is this NumericInput part half decomposed? Seems like you've put a check in `numeric_ans_group_should_not_be_subset` (also can we rename this function? doesn't sound clear), but the rest of the code from 3231 onwards is a second check that isn't decomposed into its own function."", 'comment_created': datetime.datetime(2022, 8, 19, 7, 18, 47, tzinfo=datetime.timezone.utc), 'commenter': 'EricZLou', 'type': 'User'}, {'comment_id': 949880327, 'comment_body': 'Is this line necessary? Or does `_fraction_rules_should_not_match_prev_rule` already modify it in place', 'comment_created': datetime.datetime(2022, 8, 19, 7, 19, 56, tzinfo=datetime.timezone.utc), 'commenter': 'EricZLou', 'type': 'User'}, {'comment_id': 949881495, 'comment_body': 'MultipleChoice part below is also half decomposed, right?', 'comment_created': datetime.datetime(2022, 8, 19, 7, 21, 34, tzinfo=datetime.timezone.utc), 'commenter': 'EricZLou', 'type': 'User'}, {'comment_id': 949882522, 'comment_body': 'Do we need these lines?', 'comment_created': datetime.datetime(2022, 8, 19, 7, 23, 2, tzinfo=datetime.timezone.utc), 'commenter': 'EricZLou', 'type': 'User'}, {'comment_id': 949884883, 'comment_body': ""```suggestion\r\n                if rows_value < 1 or rows_value > 10:\r\n                    state_dict['interaction']['customization_args'][\r\n                        'rows']['value'] = 10\r\n```"", 'comment_created': datetime.datetime(2022, 8, 19, 7, 26, 17, tzinfo=datetime.timezone.utc), 'commenter': 'EricZLou', 'type': 'User'}, {'comment_id': 949885601, 'comment_body': '`if` `else`', 'comment_created': datetime.datetime(2022, 8, 19, 7, 27, 15, tzinfo=datetime.timezone.utc), 'commenter': 'EricZLou', 'type': 'User'}, {'comment_id': 949886578, 'comment_body': 'what does this do?', 'comment_created': datetime.datetime(2022, 8, 19, 7, 28, 19, tzinfo=datetime.timezone.utc), 'commenter': 'EricZLou', 'type': 'User'}, {'comment_id': 949886858, 'comment_body': 'undo', 'comment_created': datetime.datetime(2022, 8, 19, 7, 28, 39, tzinfo=datetime.timezone.utc), 'commenter': 'EricZLou', 'type': 'User'}, {'comment_id': 973543496, 'comment_body': 'should this all be in an else statement?', 'comment_created': datetime.datetime(2022, 9, 17, 5, 34, 6, tzinfo=datetime.timezone.utc), 'commenter': 'EricZLou', 'type': 'User'}, {'comment_id': 973544027, 'comment_body': ""you don't need to return `states_dict` since it is a dictionary. Python will change all references of it"", 'comment_created': datetime.datetime(2022, 9, 17, 5, 40, 51, tzinfo=datetime.timezone.utc), 'commenter': 'EricZLou', 'type': 'User'}, {'comment_id': 973544110, 'comment_body': 'let\'s call them ""general state"", ""interaction"", and ""RTE"". Putting ""general"" in front of interaction and RTE doesn\'t make too much sense', 'comment_created': datetime.datetime(2022, 9, 17, 5, 41, 45, tzinfo=datetime.timezone.utc), 'commenter': 'EricZLou', 'type': 'User'}, {'comment_id': 973544205, 'comment_body': 'move this comment to above where you start to declare all the helper functions.', 'comment_created': datetime.datetime(2022, 9, 17, 5, 42, 50, tzinfo=datetime.timezone.utc), 'commenter': 'EricZLou', 'type': 'User'}, {'comment_id': 973544342, 'comment_body': ""you can easily combine this block of code for item selection with the one for multiple choice input, right? They only differ in the `for rule_spec in answer_group['rule_specs']:` block"", 'comment_created': datetime.datetime(2022, 9, 17, 5, 44, 33, tzinfo=datetime.timezone.utc), 'commenter': 'EricZLou', 'type': 'User'}, {'comment_id': 977078860, 'comment_body': 'Yep! Updated', 'comment_created': datetime.datetime(2022, 9, 22, 0, 18, 28, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 977078880, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 9, 22, 0, 18, 32, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 977078898, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 9, 22, 0, 18, 36, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 977078931, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 9, 22, 0, 18, 42, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 977079074, 'comment_body': 'Yep, because we need this after all the rules have been checked.', 'comment_created': datetime.datetime(2022, 9, 22, 0, 19, 7, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 977079168, 'comment_body': 'Updated! Was not relevant', 'comment_created': datetime.datetime(2022, 9, 22, 0, 19, 23, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 977079194, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 9, 22, 0, 19, 27, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 977079210, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 9, 22, 0, 19, 30, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 977079389, 'comment_body': 'I think so, I just updated in case. I will check this part and get back to you.', 'comment_created': datetime.datetime(2022, 9, 22, 0, 20, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 977079411, 'comment_body': 'Updated', 'comment_created': datetime.datetime(2022, 9, 22, 0, 20, 5, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 977079471, 'comment_body': 'Just added in case, will get back to you on this', 'comment_created': datetime.datetime(2022, 9, 22, 0, 20, 18, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 977079607, 'comment_body': 'Updated', 'comment_created': datetime.datetime(2022, 9, 22, 0, 20, 49, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 977079619, 'comment_body': 'Sure!', 'comment_created': datetime.datetime(2022, 9, 22, 0, 20, 51, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 977079647, 'comment_body': 'Updated for all', 'comment_created': datetime.datetime(2022, 9, 22, 0, 20, 58, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 977079763, 'comment_body': 'No it will require to change line after parenthesis', 'comment_created': datetime.datetime(2022, 9, 22, 0, 21, 20, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 977079788, 'comment_body': 'Updated', 'comment_created': datetime.datetime(2022, 9, 22, 0, 21, 25, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 977079809, 'comment_body': 'Updated', 'comment_created': datetime.datetime(2022, 9, 22, 0, 21, 30, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 977079841, 'comment_body': 'Updated', 'comment_created': datetime.datetime(2022, 9, 22, 0, 21, 36, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 977079858, 'comment_body': 'Updated', 'comment_created': datetime.datetime(2022, 9, 22, 0, 21, 41, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 977079946, 'comment_body': 'I think this will be require for values like `3 1/2`', 'comment_created': datetime.datetime(2022, 9, 22, 0, 21, 59, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 977079976, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 9, 22, 0, 22, 4, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 977079984, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 9, 22, 0, 22, 7, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 977080001, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 9, 22, 0, 22, 11, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 977080019, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 9, 22, 0, 22, 15, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 977080030, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 9, 22, 0, 22, 18, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 977080055, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 9, 22, 0, 22, 23, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 977080124, 'comment_body': 'Updated, as no longer required', 'comment_created': datetime.datetime(2022, 9, 22, 0, 22, 35, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 977080163, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 9, 22, 0, 22, 40, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 977080272, 'comment_body': 'All done', 'comment_created': datetime.datetime(2022, 9, 22, 0, 22, 57, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 977504558, 'comment_body': ""```suggestion\r\n                        'x': {\r\n                            'contentId': 'rule_input_Equals',\r\n                            'normalizedStrSet': ['Test']\r\n                        }\r\n```"", 'comment_created': datetime.datetime(2022, 9, 22, 10, 51, 17, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 977505346, 'comment_body': ""```suggestion\r\n            state_domain.Outcome(\r\n                'state_name', \r\n                None, \r\n                state_domain.SubtitledHtml('feedback_1', '<p>Feedback</p>'), \r\n                False,\r\n                [], \r\n                None, \r\n                None\r\n            ),\r\n```"", 'comment_created': datetime.datetime(2022, 9, 22, 10, 52, 13, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 977506398, 'comment_body': '```suggestion\r\n            exp_domain.ExplorationChange({\r\n                \'cmd\': exp_domain.CMD_EDIT_STATE_PROPERTY,\r\n                \'property_name\': exp_domain.STATE_PROPERTY_CONTENT,\r\n                \'state_name\': \'New state\',\r\n                \'old_value\': state_domain.SubtitledHtml(\'content\', \'\'),\r\n                \'new_value\': state_domain.SubtitledHtml(\r\n                    \'content\',\r\n                    \'<oppia-noninteractive-image filepath-with-value=\'\r\n                    \'""&quot;abc.png&quot;"" caption-with-value=""&quot;\'\r\n                    \'&quot;""></oppia-noninteractive-image>\'\r\n                )\r\n            })\r\n```', 'comment_created': datetime.datetime(2022, 9, 22, 10, 53, 30, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 977506527, 'comment_body': 'ditto below', 'comment_created': datetime.datetime(2022, 9, 22, 10, 53, 39, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 977507350, 'comment_body': '```suggestion\r\n                elif (\r\n                    exp_change.property_name ==\r\n                    exp_domain.STATE_PROPERTY_CONTENT\r\n                ):\r\n```', 'comment_created': datetime.datetime(2022, 9, 22, 10, 54, 33, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 977507589, 'comment_body': '```suggestion\r\n                            answer_group.outcome.labelled_as_correct and\r\n                            answer_group.outcome.dest == exp_change.state_name\r\n```', 'comment_created': datetime.datetime(2022, 9, 22, 10, 54, 54, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 977507973, 'comment_body': '```suggestion\r\n                    exp_change.new_value.html = (\r\n                        exp_domain.Exploration.fix_rte_tags(\r\n                            exp_change.new_value.html))\r\n```', 'comment_created': datetime.datetime(2022, 9, 22, 10, 55, 22, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 977508188, 'comment_body': '```suggestion\r\n                    exp_change.new_value.html = (\r\n                        exp_domain.Exploration.fix_tabs_and_collapsible_tags(\r\n                            exp_change.new_value.html))\r\n```', 'comment_created': datetime.datetime(2022, 9, 22, 10, 55, 34, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 977508430, 'comment_body': '```suggestion\r\n                elif (\r\n                    exp_change.property_name ==\r\n                    exp_domain.STATE_PROPERTY_WRITTEN_TRANSLATIONS\r\n                ):\r\n```', 'comment_created': datetime.datetime(2022, 9, 22, 10, 55, 52, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 977509282, 'comment_body': '```suggestion\r\n                    for translations in (\r\n                        written_translations.translations_mapping.values()\r\n                    ):\r\n                        for written_translation in translations.values():\r\n                            written_translation.translation = (\r\n                                exp_domain.Exploration.fix_rte_tags(\r\n                                    written_translation.translation))\r\n                            written_translation.translation = (\r\n                                exp_domain.Exploration\r\n                                .fix_tabs_and_collapsible_tags(\r\n                                    written_translation.translation))\r\n```', 'comment_created': datetime.datetime(2022, 9, 22, 10, 56, 54, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 977541043, 'comment_body': ""I wouldn't place this here, can we think about some better place?"", 'comment_created': datetime.datetime(2022, 9, 22, 11, 30, 23, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 977542097, 'comment_body': 'Missing docstring', 'comment_created': datetime.datetime(2022, 9, 22, 11, 31, 26, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 977542246, 'comment_body': '```suggestion\r\n    def _remove_unwanted_content_ids_from_translations_and_voiceovers(\r\n        cls, state_dict: state_domain.StateDict\r\n    ):\r\n```', 'comment_created': datetime.datetime(2022, 9, 22, 11, 31, 36, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 977542674, 'comment_body': '```suggestion\r\n        categorized as:\r\n```', 'comment_created': datetime.datetime(2022, 9, 22, 11, 32, 9, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 977543451, 'comment_body': '```suggestion\r\n        in MultipleChoiceInput interactions, implements the following:\r\n```', 'comment_created': datetime.datetime(2022, 9, 22, 11, 32, 59, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 977544340, 'comment_body': 'Missing types.', 'comment_created': datetime.datetime(2022, 9, 22, 11, 34, 7, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 977546554, 'comment_body': 'This can be done using code to continue dictionary.', 'comment_created': datetime.datetime(2022, 9, 22, 11, 36, 57, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 977547214, 'comment_body': ""```suggestion\r\n            for rule_spec_index, rule_spec in enumerate(\r\n                answer_group['rule_specs']\r\n            ):\r\n                range_var = {\r\n```"", 'comment_created': datetime.datetime(2022, 9, 22, 11, 37, 45, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 977549861, 'comment_body': '```suggestion\r\n        cls,\r\n        html: str,\r\n        is_tags_nested_inside_tabs_or_collapsible: bool = False\r\n    ):\r\n```', 'comment_created': datetime.datetime(2022, 9, 22, 11, 40, 51, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 977552385, 'comment_body': '```suggestion\r\n    init_state_name: str, \r\n    language_code: str\r\n```', 'comment_created': datetime.datetime(2022, 9, 22, 11, 43, 49, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 978113797, 'comment_body': ""Hey @vojtechjelinek, I'm not sure what you mean by `code to continue dictionary`. I tried to look into the codebase but not sure where exactly to find it. Can you guide me here?\r\nThanks"", 'comment_created': datetime.datetime(2022, 9, 22, 21, 44, 49, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 978298887, 'comment_body': 'What if you only keep lines 3044-3047 and remove the rest of the code? When would it perform differently than your current code?', 'comment_created': datetime.datetime(2022, 9, 23, 6, 23, 41, tzinfo=datetime.timezone.utc), 'commenter': 'EricZLou', 'type': 'User'}, {'comment_id': 978300878, 'comment_body': 'you can create a dictionary that maps from language code to the unicode str. Then all this code can be compressed to just a single line of code', 'comment_created': datetime.datetime(2022, 9, 23, 6, 27, 40, tzinfo=datetime.timezone.utc), 'commenter': 'EricZLou', 'type': 'User'}, {'comment_id': 979264645, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 9, 24, 15, 42, 29, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 979264682, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 9, 24, 15, 42, 33, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 979264686, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 9, 24, 15, 42, 38, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 979264707, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 9, 24, 15, 42, 43, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 979264716, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 9, 24, 15, 42, 48, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 979264721, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 9, 24, 15, 42, 51, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 979264725, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 9, 24, 15, 42, 54, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 979264731, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 9, 24, 15, 42, 59, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 979264742, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 9, 24, 15, 43, 4, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 979264754, 'comment_body': 'Placed in utils.py', 'comment_created': datetime.datetime(2022, 9, 24, 15, 43, 12, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 979264758, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 9, 24, 15, 43, 16, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 979264762, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 9, 24, 15, 43, 20, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 979264781, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 9, 24, 15, 43, 23, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 979264803, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 9, 24, 15, 43, 27, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 979264804, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 9, 24, 15, 43, 30, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 979264809, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 9, 24, 15, 43, 34, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 979264826, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 9, 24, 15, 43, 42, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 979264829, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 9, 24, 15, 43, 46, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 979264834, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 9, 24, 15, 43, 50, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 979264894, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 9, 24, 15, 44, 32, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 979264920, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 9, 24, 15, 44, 40, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 979265411, 'comment_body': 'I think this would not go inside the else part, can you please guide me here why it should be in else part?\r\nThanks', 'comment_created': datetime.datetime(2022, 9, 24, 15, 48, 31, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 979477385, 'comment_body': 'you can remove the `if` line', 'comment_created': datetime.datetime(2022, 9, 25, 23, 43, 1, tzinfo=datetime.timezone.utc), 'commenter': 'EricZLou', 'type': 'User'}, {'comment_id': 979477430, 'comment_body': 'you can do similar fix here', 'comment_created': datetime.datetime(2022, 9, 25, 23, 43, 18, tzinfo=datetime.timezone.utc), 'commenter': 'EricZLou', 'type': 'User'}, {'comment_id': 979477452, 'comment_body': 'and here', 'comment_created': datetime.datetime(2022, 9, 25, 23, 43, 26, tzinfo=datetime.timezone.utc), 'commenter': 'EricZLou', 'type': 'User'}, {'comment_id': 979477835, 'comment_body': ""Would this be the same as:\r\n```\r\nfor written_translation in written_translations['translations_mapping'].values().values():\r\n```\r\nNot sure... but might make the code more concise"", 'comment_created': datetime.datetime(2022, 9, 25, 23, 46, 15, tzinfo=datetime.timezone.utc), 'commenter': 'EricZLou', 'type': 'User'}, {'comment_id': 979478140, 'comment_body': 'to reduce indentation and make code more readable\r\n```\r\nif exp_change.cmd != exp_domain.CMD_EDIT_STATE_PROPERTY:\r\n  continue\r\n...\r\n```', 'comment_created': datetime.datetime(2022, 9, 25, 23, 48, tzinfo=datetime.timezone.utc), 'commenter': 'EricZLou', 'type': 'User'}, {'comment_id': 979853779, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 9, 26, 10, 46, 48, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 979854797, 'comment_body': 'Will we be able to do that, because we only want to set it to `False` when the destination is state itself. Please let me know if I somehow understood this wrong.\r\nThanks', 'comment_created': datetime.datetime(2022, 9, 26, 10, 48, 6, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 979855297, 'comment_body': ""It didn't pass, was not able to use 2 `values()` together.\r\nThankd"", 'comment_created': datetime.datetime(2022, 9, 26, 10, 48, 45, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 979855353, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 9, 26, 10, 48, 49, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 980081041, 'comment_body': ""Nit:\r\n```suggestion\r\n        exp2_id = '0'\r\n```"", 'comment_created': datetime.datetime(2022, 9, 26, 14, 5, 58, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 980082172, 'comment_body': 'This can fit one line (without the brackets)', 'comment_created': datetime.datetime(2022, 9, 26, 14, 7, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 980083756, 'comment_body': 'Can you rather use `assert isinstance`?', 'comment_created': datetime.datetime(2022, 9, 26, 14, 8, 25, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 980083888, 'comment_body': 'ditto elsewhere', 'comment_created': datetime.datetime(2022, 9, 26, 14, 8, 32, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 980115230, 'comment_body': 'Please add unit tests for these.', 'comment_created': datetime.datetime(2022, 9, 26, 14, 35, 33, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 980120078, 'comment_body': '```suggestion\r\n    def fix_rte_tags(\r\n        cls, html: str,\r\n        is_tags_nested_inside_tabs_or_collapsible: bool = False\r\n```', 'comment_created': datetime.datetime(2022, 9, 26, 14, 39, 40, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 980617681, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 9, 27, 0, 22, 59, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 980617709, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 9, 27, 0, 23, 3, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 980618069, 'comment_body': ""Actually the reason why I needed to convert is because of the my py type checks. If I don't do this then the the type checks will fail.\r\nThanks"", 'comment_created': datetime.datetime(2022, 9, 27, 0, 24, 7, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 980618093, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 9, 27, 0, 24, 12, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 980618109, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 9, 27, 0, 24, 16, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 980760910, 'comment_body': 'Oh i just mean you can remove the first half of the if statement.', 'comment_created': datetime.datetime(2022, 9, 27, 5, 36, 30, tzinfo=datetime.timezone.utc), 'commenter': 'EricZLou', 'type': 'User'}, {'comment_id': 981598094, 'comment_body': 'But `isinstance` should also solve these kind of things.\r\n\r\nFor example, imagine variable `a` has type `Union[Aaa, Bbb]` (so it is either an instance of class `Aaa` or class `Bbb`), you have two options:\r\n```python\r\nassert instance(a, Aaa)\r\n```\r\nor\r\n\r\n```python\r\na_typed = cast(a, Aaa)\r\n```\r\n\r\nin the first case MyPy will know that `a` is `Aaa` after the `isinstance` in the second case too, but in runtime a will fail when it has some different type but the second case will still work and can lead to errors later.', 'comment_created': datetime.datetime(2022, 9, 27, 18, 45, 31, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 981600493, 'comment_body': ""Should some comment be added here? We don't really fix anything here."", 'comment_created': datetime.datetime(2022, 9, 27, 18, 47, 47, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 981602903, 'comment_body': 'For this part should we just throw the draft away, by raising `InvalidDraftConversionException`', 'comment_created': datetime.datetime(2022, 9, 27, 18, 50, 47, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 981604973, 'comment_body': '```suggestion\r\n    def _remove_unwanted_content_ids_from_translations_and_voiceovers(\r\n        cls, state_dict: state_domain.StateDict\r\n    ) -> None:\r\n```', 'comment_created': datetime.datetime(2022, 9, 27, 18, 53, 22, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 981606753, 'comment_body': 'Is this the correct version?', 'comment_created': datetime.datetime(2022, 9, 27, 18, 55, 21, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 981608867, 'comment_body': '```suggestion\r\n        new_translations_mapping = {\r\n             content_id: translation_item for \r\n             content_id, translation_item in translations_mapping.items()\r\n             if content_id in content_id_list\r\n        }\r\n```', 'comment_created': datetime.datetime(2022, 9, 27, 18, 57, 34, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 981615171, 'comment_body': 'Can we use a dictionary for this?', 'comment_created': datetime.datetime(2022, 9, 27, 19, 5, 10, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 981621607, 'comment_body': 'Unneeded comment. Please make sure that comments are not redundant. When I see `if len(empty_choices) == 1` it is pretty clear that only one choice is empty.', 'comment_created': datetime.datetime(2022, 9, 27, 19, 12, 45, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 981621715, 'comment_body': 'ditto elsewhere', 'comment_created': datetime.datetime(2022, 9, 27, 19, 12, 52, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 981622092, 'comment_body': '```suggestion\r\n                        if any(\r\n                            item in rule_values for item in\r\n                            invalid_choices_content_ids\r\n                        ):\r\n```', 'comment_created': datetime.datetime(2022, 9, 27, 19, 13, 22, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 981622965, 'comment_body': 'I already reviewed these in the other PR, similar changes apply.', 'comment_created': datetime.datetime(2022, 9, 27, 19, 14, 28, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 981623180, 'comment_body': 'applies to some functions below too', 'comment_created': datetime.datetime(2022, 9, 27, 19, 14, 44, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 981623720, 'comment_body': 'Again, comment not really needed.', 'comment_created': datetime.datetime(2022, 9, 27, 19, 15, 24, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 981626654, 'comment_body': '```suggestion\r\n            recc_exp_ids = recc_exp_ids[:3]\r\n```', 'comment_created': datetime.datetime(2022, 9, 27, 19, 19, 5, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 981627139, 'comment_body': '```suggestion\r\n    def _fix_numeric_input_interaction(\r\n        cls, state_dict: state_domain.StateDict, state_name: str\r\n    ) -> None:\r\n```', 'comment_created': datetime.datetime(2022, 9, 27, 19, 19, 39, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 981629798, 'comment_body': 'Maybe write something like, the tolerance value needs to be positive.', 'comment_created': datetime.datetime(2022, 9, 27, 19, 22, 59, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 981638469, 'comment_body': 'This can fit one line.', 'comment_created': datetime.datetime(2022, 9, 27, 19, 33, 49, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 981640732, 'comment_body': ""```suggestion\r\n                    rule_spec['rule_type'] == 'HasElementXBeforeElementY' and \r\n                    rule_spec['inputs']['x'] == rule_spec['inputs']['y']\r\n```"", 'comment_created': datetime.datetime(2022, 9, 27, 19, 36, 44, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 981641031, 'comment_body': ""```suggestion\r\n                        for layer_idx, layer in enumerate(\r\n                            rule_spec['inputs']['x']\r\n                        ):\r\n```"", 'comment_created': datetime.datetime(2022, 9, 27, 19, 37, 7, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 981641318, 'comment_body': 'Again, do we care about the number of wrong positions.', 'comment_created': datetime.datetime(2022, 9, 27, 19, 37, 30, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 981641913, 'comment_body': 'Why to set it to 10 when `rows_value < 1`', 'comment_created': datetime.datetime(2022, 9, 27, 19, 38, 19, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 981642278, 'comment_body': '```suggestion\r\n                                if rule_value.startswith(\r\n                                    start_with_rule_string\r\n                                ):\r\n```', 'comment_created': datetime.datetime(2022, 9, 27, 19, 38, 51, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 981642428, 'comment_body': 'ditto  elsewhere', 'comment_created': datetime.datetime(2022, 9, 27, 19, 39, 3, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 981643156, 'comment_body': ""Shouldn't `seen_strings_startswith.append(rule_values)` be added here?"", 'comment_created': datetime.datetime(2022, 9, 27, 19, 39, 54, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 981644475, 'comment_body': ""```suggestion\r\n            if not tag.has_attr('alt-with-value'):\r\n                tag['alt-with-value'] = '&quot;&quot;'\r\n                \r\n            if not tag.has_attr('filepath-with-value'):\r\n                tag.decompose()\r\n            else:\r\n                if tag['filepath-with-value'] in empty_values:\r\n                    tag.decompose()\r\n                    \r\n            if not tag.has_attr('caption-with-value'):\r\n                tag['caption-with-value'] = '&quot;&quot;'\r\n```\r\n\r\nPlease add empty lines between unrelated `if`, the code is then easier to read."", 'comment_created': datetime.datetime(2022, 9, 27, 19, 41, 40, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 981644641, 'comment_body': 'ditto elsewhere', 'comment_created': datetime.datetime(2022, 9, 27, 19, 41, 51, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 981759165, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 9, 27, 22, 14, 17, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 981759204, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 9, 27, 22, 14, 20, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 981759348, 'comment_body': 'I see, thanks for the explanation. I have updated it.', 'comment_created': datetime.datetime(2022, 9, 27, 22, 14, 37, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 981759453, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 9, 27, 22, 14, 47, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 981759532, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 9, 27, 22, 14, 52, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 981764968, 'comment_body': ""I have updated the version value to 53. Just want to make sure one thing, as this function is getting used in 2 conversion function, placing 53 as a version should not affect anything, right? I also checked the function `convert_customization_args_dict_to_customization_args` and there it was already taking the latest schema version so I figured there won't be any problem but please let me know.\r\nThanks"", 'comment_created': datetime.datetime(2022, 9, 27, 22, 18, 31, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 981765306, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 9, 27, 22, 18, 40, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 981765499, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 9, 27, 22, 18, 45, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 981765872, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 9, 27, 22, 18, 58, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 981766018, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 9, 27, 22, 19, 2, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 981766242, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 9, 27, 22, 19, 10, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 981766350, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 9, 27, 22, 19, 14, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 981766500, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 9, 27, 22, 19, 18, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 981766687, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 9, 27, 22, 19, 23, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 981766835, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 9, 27, 22, 19, 27, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 981766901, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 9, 27, 22, 19, 31, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 981767019, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 9, 27, 22, 19, 36, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 981767279, 'comment_body': 'Updated!', 'comment_created': datetime.datetime(2022, 9, 27, 22, 19, 43, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 981767512, 'comment_body': 'Updated', 'comment_created': datetime.datetime(2022, 9, 27, 22, 19, 49, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 981767719, 'comment_body': 'Done\r\n', 'comment_created': datetime.datetime(2022, 9, 27, 22, 19, 55, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 981769348, 'comment_body': 'Nope, this part is present inside the `Equals` rule and we add the `StartsWith` rule in the above part.', 'comment_created': datetime.datetime(2022, 9, 27, 22, 20, 57, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 981769516, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 9, 27, 22, 21, 3, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 981772934, 'comment_body': ""I'm not completely sure about that. So what I tried in my previous PR was I created a dictionary and mapped the interaction id with it's function, something like - `{'Continue': cls._fix_continue_interaction(state_dict, language_code)}` but it then started to misbehave and I'm not completely sure on why that was happening"", 'comment_created': datetime.datetime(2022, 9, 27, 22, 23, 19, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 981780504, 'comment_body': ""I think we can't do that, so mainly the value that I validate or correct inside interaction is of answer groups and I do have some basic checks for the answer group as well which belongs to the `general state checks`. So I think we can't do that."", 'comment_created': datetime.datetime(2022, 9, 27, 22, 29, 11, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 983485983, 'comment_body': ""Ah I see. When you do it as you write it will immediately execute. You will need to do `a = {'a': cls.xxx}` and then you can do `a['a'](yyy, zzz)`."", 'comment_created': datetime.datetime(2022, 9, 29, 12, 34, 33, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 983486989, 'comment_body': ""I'm not sure, maybe you can pass the schema version as an arg to this function."", 'comment_created': datetime.datetime(2022, 9, 29, 12, 35, 34, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 983489179, 'comment_body': 'Sorry, not sure what you mean. This is just about drafts, these can always be removed.', 'comment_created': datetime.datetime(2022, 9, 29, 12, 37, 45, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 983496333, 'comment_body': 'Please add a comment.', 'comment_created': datetime.datetime(2022, 9, 29, 12, 44, 35, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 983498422, 'comment_body': 'Ditto elsewhere where you use assert in non-test file.', 'comment_created': datetime.datetime(2022, 9, 29, 12, 46, 39, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 983499206, 'comment_body': 'Please add a few empty files for readability.', 'comment_created': datetime.datetime(2022, 9, 29, 12, 47, 25, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 983501530, 'comment_body': '```suggestion\r\n    """"""Dictionary representing the range variable for the NumericInput\r\n    interaction.\r\n    """"""\r\n\r\n    ans_group_index: int\r\n    rule_spec_index: int\r\n    lower_bound: Optional[float]\r\n    upper_bound: Optional[float]\r\n    lb_inclusive: bool\r\n    ub_inclusive: bool\r\n\r\n\r\nclass MatchedDenominatorDict(TypedDict):\r\n    """"""Dictionary representing the matched denominator variable for the\r\n    FractionInput interaction.\r\n```', 'comment_created': datetime.datetime(2022, 9, 29, 12, 49, 38, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 983502329, 'comment_body': '```suggestion\r\n        cls, state_dict: state_domain.StateDict\r\n```', 'comment_created': datetime.datetime(2022, 9, 29, 12, 50, 22, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 983502538, 'comment_body': '```suggestion\r\n        """"""Helper function to remove the content IDs from the translations\r\n        and voiceovers which are deleted from the state.\r\n```', 'comment_created': datetime.datetime(2022, 9, 29, 12, 50, 35, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 983506373, 'comment_body': '```suggestion\r\n        cls, state_dict: state_domain.StateDict, language_code: str\r\n```', 'comment_created': datetime.datetime(2022, 9, 29, 12, 54, 14, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 983506997, 'comment_body': 'Unneeded comment.', 'comment_created': datetime.datetime(2022, 9, 29, 12, 54, 50, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 983508652, 'comment_body': ""```suggestion\r\n        # Should be at most 3 recommended explorations.\r\n        recc_exp_ids = state_dict['interaction'][\r\n            'customization_args']['recommendedExplorationIds']['value']\r\n        state_dict['interaction']['customization_args'][\r\n            'recommendedExplorationIds']['value'] = recc_exp_ids[:3]\r\n```"", 'comment_created': datetime.datetime(2022, 9, 29, 12, 56, 22, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 983509310, 'comment_body': '```suggestion\r\n        cls, state_dict: state_domain.StateDict, state_name: str\r\n```', 'comment_created': datetime.datetime(2022, 9, 29, 12, 57, 1, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 983510995, 'comment_body': 'Is this fine?', 'comment_created': datetime.datetime(2022, 9, 29, 12, 58, 32, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 983511198, 'comment_body': 'ditto', 'comment_created': datetime.datetime(2022, 9, 29, 12, 58, 44, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 983511829, 'comment_body': '```suggestion\r\n        cls, state_dict: state_domain.StateDict, state_name: str\r\n```', 'comment_created': datetime.datetime(2022, 9, 29, 12, 59, 21, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 983512285, 'comment_body': '```suggestion\r\n        different state will be deleted.\r\n```', 'comment_created': datetime.datetime(2022, 9, 29, 12, 59, 44, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 983512866, 'comment_body': 'Please simplify this comment. Use shorter sentences.', 'comment_created': datetime.datetime(2022, 9, 29, 13, 0, 18, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 983515472, 'comment_body': '```suggestion\r\n        cls, state_dict: state_domain.StateDict, state_name: str\r\n```', 'comment_created': datetime.datetime(2022, 9, 29, 13, 2, 44, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 983515846, 'comment_body': 'Unneeded comment.', 'comment_created': datetime.datetime(2022, 9, 29, 13, 3, 7, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 983516444, 'comment_body': '```suggestion\r\n        cls, state_dict: state_domain.StateDict, state_name: str\r\n```', 'comment_created': datetime.datetime(2022, 9, 29, 13, 3, 42, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 983517959, 'comment_body': '```suggestion\r\n                            min_value = min(min_value, len(rule_value))\r\n                            max_value = max(max_value, len(rule_value))\r\n```', 'comment_created': datetime.datetime(2022, 9, 29, 13, 5, 5, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 983519139, 'comment_body': 'min_value = max(len(choices), 1)', 'comment_created': datetime.datetime(2022, 9, 29, 13, 6, 7, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 983519734, 'comment_body': '```suggestion\r\n        answer_groups: List[state_domain.AnswerGroupDict],\r\n        *,\r\n        is_item_selection_interaction: bool = False\r\n```', 'comment_created': datetime.datetime(2022, 9, 29, 13, 6, 40, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 983524270, 'comment_body': 'ditto below', 'comment_created': datetime.datetime(2022, 9, 29, 13, 10, 59, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 983525362, 'comment_body': ""```suggestion\r\n                for ele in rule_spec['inputs']['x']:\r\n                    if not multi_item_value and len(ele) > 1:\r\n                        invalid_rules.append(rule_spec)\r\n```"", 'comment_created': datetime.datetime(2022, 9, 29, 13, 11, 57, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 983528929, 'comment_body': '```suggestion\r\n        cls, \r\n        html: str,\r\n        *,\r\n        is_tags_nested_inside_tabs_or_collapsible: bool = False\r\n```', 'comment_created': datetime.datetime(2022, 9, 29, 13, 15, 12, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 983530335, 'comment_body': '```suggestion\r\n        cls, states_dict: Dict[str, state_domain.StateDict]\r\n```', 'comment_created': datetime.datetime(2022, 9, 29, 13, 16, 28, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 983530888, 'comment_body': ""```suggestion\r\n                    if isinstance(translation['translation'], list):\r\n```"", 'comment_created': datetime.datetime(2022, 9, 29, 13, 16, 58, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 983531677, 'comment_body': 'You can isolate this into a helper function and then use it here an below.', 'comment_created': datetime.datetime(2022, 9, 29, 13, 17, 41, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 983532428, 'comment_body': '```suggestion\r\n                start_value > end_value and \r\n                start_value != 0.0 and \r\n                end_value != 0.0\r\n```', 'comment_created': datetime.datetime(2022, 9, 29, 13, 18, 22, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 984074035, 'comment_body': ""Can we either leave this file as-is or delete it (and update the list in feconf accordingly)?\r\n\r\nOtherwise this is just incorrect and future folks will have questions about why it's working poorly."", 'comment_created': datetime.datetime(2022, 9, 29, 22, 39, 50, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 984740087, 'comment_body': 'can we move this to State class? Also, considering it accepts state**s** and it only does one thing, can we call it _fix_labelled_as_correct_value_in_state_dicts', 'comment_created': datetime.datetime(2022, 9, 30, 16, 1, 44, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 984741197, 'comment_body': 'If we are moving it to State class then call it `_fix_labelled_as_correct_value_in_state_dict(state_dict)`', 'comment_created': datetime.datetime(2022, 9, 30, 16, 2, 50, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 984748402, 'comment_body': 'ALso, have we added validation checks for the same in backend and frontend?', 'comment_created': datetime.datetime(2022, 9, 30, 16, 11, 14, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 984749176, 'comment_body': 'Are we going to do this for unpublished explorations as well?', 'comment_created': datetime.datetime(2022, 9, 30, 16, 12, 12, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 984754489, 'comment_body': ""Also, how are we going to ensure that published/unpublished exploration doesn't have such data in the future? "", 'comment_created': datetime.datetime(2022, 9, 30, 16, 17, 15, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 984756491, 'comment_body': 'explorations can have translations for these empty content, are we going to leave them as-is?', 'comment_created': datetime.datetime(2022, 9, 30, 16, 18, 55, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 984758890, 'comment_body': 'Can we do `choices.remove(choice_to_remove)` over here instead of saving it to a variable?', 'comment_created': datetime.datetime(2022, 9, 30, 16, 21, 16, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 984763108, 'comment_body': 'indexes will change after deletion on line 3298, is that expected?', 'comment_created': datetime.datetime(2022, 9, 30, 16, 26, 37, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 984769373, 'comment_body': 'Are we going to update/remove the translations/voicover as well?\r\n', 'comment_created': datetime.datetime(2022, 9, 30, 16, 35, 9, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 985060654, 'comment_body': 'We should at least mark them ""needs update"". @lkbhitesh07 this is something to make sure to do for anything where you\'re making non-trivial changes that may change the meaning of things.', 'comment_created': datetime.datetime(2022, 10, 1, 6, 54, 7, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 985061523, 'comment_body': 'Just confirming whether we have removed these choices from rule_specs and solution (if it exists).\r\n', 'comment_created': datetime.datetime(2022, 10, 1, 7, 3, 27, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 985061563, 'comment_body': 'Just confirming whether we have removed these choices from rule_specs and solution (if it exists).\r\n', 'comment_created': datetime.datetime(2022, 10, 1, 7, 3, 54, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 985062594, 'comment_body': 'non empty*', 'comment_created': datetime.datetime(2022, 10, 1, 7, 14, 49, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 985301149, 'comment_body': 'Hey @DubeySandeep,\r\nAs this is part of the conversion function, are we allowed to move this to some other class. I mean this will be called from the exploration conversion function, right? Am I missing something here? I will update the name here.\r\nThankd', 'comment_created': datetime.datetime(2022, 10, 2, 21, 46, 9, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 985301542, 'comment_body': ""Yes we are planning to do this for all types of explorations.\r\nI have opened the backend validations PR's so that we do not have such bad data in future. Some of the frontend validations at places are remaining and you can find them [here](https://github.com/oppia/oppia/issues/15753)\r\nThanks"", 'comment_created': datetime.datetime(2022, 10, 2, 21, 49, 36, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 985302518, 'comment_body': ""Well I'm updating the translations and voiceovers in case the content id is removed from the state. I'm not updating the translations in this case, I'll work towards it, thanks for mentioning it."", 'comment_created': datetime.datetime(2022, 10, 2, 21, 57, 9, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 985302653, 'comment_body': ""The reason why I'm doing this is because in case we have multiple errored values that needs to be removed, the for loop will skip some indexes.\r\nThanks"", 'comment_created': datetime.datetime(2022, 10, 2, 21, 58, 43, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 985302916, 'comment_body': 'The translations for these empty choices will be empty, right? So basically I should have translation for `Choice 1` ... etc in multiple languages and then put it according to the language code?\r\n\r\nRegarding the deleted choice, we do update the translations and voiceovers.', 'comment_created': datetime.datetime(2022, 10, 2, 22, 1, 15, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 985303059, 'comment_body': ""I have added the part where we remove it from the rule specs but not added the part for the `Solution`, I'll look into it. Thanks for the mention."", 'comment_created': datetime.datetime(2022, 10, 2, 22, 2, 19, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 985303385, 'comment_body': ""I have added the part where we remove it from the rule specs but not added the part for the Solution, I'll look into it. Thanks for the mention."", 'comment_created': datetime.datetime(2022, 10, 2, 22, 4, 58, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 985709201, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 10, 3, 12, 9, 39, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 985709556, 'comment_body': 'I did not understand this part.', 'comment_created': datetime.datetime(2022, 10, 3, 12, 10, 6, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 985709639, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 10, 3, 12, 10, 11, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 985709706, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 10, 3, 12, 10, 15, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 985709752, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 10, 3, 12, 10, 19, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 985709785, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 10, 3, 12, 10, 23, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 985709825, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 10, 3, 12, 10, 26, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 985709904, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 10, 3, 12, 10, 31, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 985709979, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 10, 3, 12, 10, 36, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 985710120, 'comment_body': 'I have updated this part', 'comment_created': datetime.datetime(2022, 10, 3, 12, 10, 44, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 985710175, 'comment_body': 'Updated', 'comment_created': datetime.datetime(2022, 10, 3, 12, 10, 48, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 985710223, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 10, 3, 12, 10, 52, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 985710290, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 10, 3, 12, 10, 57, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 985710360, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 10, 3, 12, 11, 2, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 985710415, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 10, 3, 12, 11, 5, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 985710469, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 10, 3, 12, 11, 9, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 985710533, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 10, 3, 12, 11, 13, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 985711517, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 10, 3, 12, 12, 17, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 985712637, 'comment_body': 'This will not work, I tested it and it failed.', 'comment_created': datetime.datetime(2022, 10, 3, 12, 13, 44, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 985712692, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 10, 3, 12, 13, 48, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 985712757, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 10, 3, 12, 13, 53, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 985712822, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 10, 3, 12, 13, 57, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 985712880, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 10, 3, 12, 14, 1, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 985712993, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 10, 3, 12, 14, 8, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 985713055, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 10, 3, 12, 14, 13, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 985713102, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 10, 3, 12, 14, 17, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 985713381, 'comment_body': 'I have removed this file.', 'comment_created': datetime.datetime(2022, 10, 3, 12, 14, 38, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 985713644, 'comment_body': 'Thanks for noticing it, I have updated this part.', 'comment_created': datetime.datetime(2022, 10, 3, 12, 14, 58, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 985714048, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 10, 3, 12, 15, 30, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 986831607, 'comment_body': 'Empty lines, sorry. Everything below is quite packed.', 'comment_created': datetime.datetime(2022, 10, 4, 12, 56, 46, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 986832456, 'comment_body': ""```suggestion\r\n                            if isinstance(\r\n                                written_translation['translation'], list\r\n                            ):\r\n```"", 'comment_created': datetime.datetime(2022, 10, 4, 12, 57, 30, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 986832807, 'comment_body': ""```suggestion\r\n                                    exp_domain.Exploration.fix_rte_tags(\r\n                                        written_translation['translation']))\r\n```"", 'comment_created': datetime.datetime(2022, 10, 4, 12, 57, 48, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 986834028, 'comment_body': 'Remove this change.', 'comment_created': datetime.datetime(2022, 10, 4, 12, 59, 1, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 986838133, 'comment_body': '```suggestion\r\n        cls, \r\n        states_dict: Dict[str, state_domain.StateDict],\r\n        language_code: str\r\n```', 'comment_created': datetime.datetime(2022, 10, 4, 13, 3, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 986840025, 'comment_body': '```suggestion\r\n        cls,\r\n        range_var: RangeVariableDict,\r\n        lower_bound: Optional[float],\r\n        upper_bound: Optional[float],\r\n        *,\r\n        lb_inclusive: bool,\r\n        ub_inclusive: bool\r\n```', 'comment_created': datetime.datetime(2022, 10, 4, 13, 4, 46, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 986840485, 'comment_body': '```suggestion\r\n        cls, rule_spec: state_domain.RuleSpecDict\r\n```', 'comment_created': datetime.datetime(2022, 10, 4, 13, 5, 17, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 986844060, 'comment_body': '```suggestion\r\n                    if (\r\n                        cls._should_check_range_criteria(\r\n                            earlier_rule, rule_spec\r\n                        ) and cls._is_enclosed_by(range_var, range_ele)\r\n```', 'comment_created': datetime.datetime(2022, 10, 4, 13, 8, 45, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 986846938, 'comment_body': 'Any update?', 'comment_created': datetime.datetime(2022, 10, 4, 13, 11, 22, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 986851020, 'comment_body': ""```suggestion\r\n            if (\r\n                not tag.has_attr('text-with-value') or\r\n                tag['text-with-value'] is None or\r\n                tag['text-with-value'].strip() in empty_values or\r\n                not tag.has_attr('skill_id-with-value') or\r\n                tag['skill_id-with-value'] is None or\r\n                tag['skill_id-with-value'].strip() in empty_values\r\n            ):\r\n                tag.decompose()\r\n                continue\r\n```\r\n\r\nOr maybe you can parameterized the three operations that you use (`tag.has_attr(x)`, `tag[x] is None`, `tag[x].strip() in empty_values`) and separate them into a function and the call the function for each param."", 'comment_created': datetime.datetime(2022, 10, 4, 13, 14, 56, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 986852141, 'comment_body': ""```suggestion\r\n            if (\r\n                not tag.has_attr('filepath-with-value') or\r\n                tag['filepath-with-value'] in empty_values\r\n            ):\r\n                tag.decompose()\r\n                continue\r\n```"", 'comment_created': datetime.datetime(2022, 10, 4, 13, 15, 50, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 986853158, 'comment_body': 'Again, the same three functions.', 'comment_created': datetime.datetime(2022, 10, 4, 13, 16, 28, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 986853598, 'comment_body': '```suggestion\r\n                start_value != 0 and\r\n                end_value != 0\r\n```', 'comment_created': datetime.datetime(2022, 10, 4, 13, 16, 51, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 986854256, 'comment_body': ""```suggestion\r\n            if (\r\n                not tag.has_attr('text-with-value') or\r\n                not tag.has_attr('url-with-value') or\r\n                tag['url-with-value'].strip() in empty_values\r\n            ):\r\n                tag.decompose()\r\n                continue\r\n```"", 'comment_created': datetime.datetime(2022, 10, 4, 13, 17, 26, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 986854589, 'comment_body': 'Again, the same three operations.', 'comment_created': datetime.datetime(2022, 10, 4, 13, 17, 44, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 986855623, 'comment_body': ""```suggestion\r\n            if (\r\n                not tag.has_attr('math_content-with-value') or\r\n                tag['math_content-with-value'] in empty_values\r\n            ):\r\n                tag.decompose()\r\n                continue\r\n                \r\n            math_content_json = utils.unescape_html(\r\n                tag['math_content-with-value'])\r\n            math_content_list = json.loads(math_content_json)\r\n```"", 'comment_created': datetime.datetime(2022, 10, 4, 13, 18, 39, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 986857920, 'comment_body': 'Not done.', 'comment_created': datetime.datetime(2022, 10, 4, 13, 20, 31, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 986897750, 'comment_body': 'Do similar changes as above.', 'comment_created': datetime.datetime(2022, 10, 4, 13, 53, 47, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 986897935, 'comment_body': 'Do similar changes as above.', 'comment_created': datetime.datetime(2022, 10, 4, 13, 53, 56, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 987200404, 'comment_body': 'Hey @seanlip, If I mark the translation as `needs update`, do I have to change the value of translations then? I think if I mark them as `needs update` then that will be taken care of, right?\r\nPlease let me know.\r\nThanks', 'comment_created': datetime.datetime(2022, 10, 4, 18, 19, 36, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 987202634, 'comment_body': ""Yes, I think so. Just to check though (to make sure I understand the alternative we're comparing against) -- if you were changing the values of the translations, what would you be changing them to anyway?"", 'comment_created': datetime.datetime(2022, 10, 4, 18, 22, 19, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 987206784, 'comment_body': 'I was planning to have a dictionary of `all the language code to `Continue` word in that language` and then iterating over the translations and changing the value accordingly.\r\nThanks', 'comment_created': datetime.datetime(2022, 10, 4, 18, 27, 29, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 987208603, 'comment_body': ""I see, ok. I think it's ok to just set the needs update flag in that case, and not modify the translations/voiceovers."", 'comment_created': datetime.datetime(2022, 10, 4, 18, 29, 42, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 987209870, 'comment_body': 'Thanks for the quick response. will do that.', 'comment_created': datetime.datetime(2022, 10, 4, 18, 31, 16, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 987270931, 'comment_body': 'I have updated the name. Also please let me know if it is fine to put it here only as I was thinking to keep all conversion related stuff at one place but please let me know.\r\nThanks', 'comment_created': datetime.datetime(2022, 10, 4, 19, 48, 41, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 987271343, 'comment_body': 'Hey I have flagged the `needs_update` field in the translations for this matter.', 'comment_created': datetime.datetime(2022, 10, 4, 19, 49, 13, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 987271506, 'comment_body': 'Updated', 'comment_created': datetime.datetime(2022, 10, 4, 19, 49, 23, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 987272856, 'comment_body': ""I think we won't be requiring to search or update the `Solution` part for `Exploration` as mostly the `Questions` have the `Solution` part right?"", 'comment_created': datetime.datetime(2022, 10, 4, 19, 51, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 987273132, 'comment_body': 'Same point for the `Solution`', 'comment_created': datetime.datetime(2022, 10, 4, 19, 51, 21, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 987516449, 'comment_body': ""It's better to move `State` specific things to `State` class but considering we are going to clean up the schema migration system, leave these functions here (exp_domain) as it will be easier to do the cleanup later!"", 'comment_created': datetime.datetime(2022, 10, 5, 3, 55, 59, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 987516739, 'comment_body': 'Ah, I see! Thanks for the explanation, @lkbhitesh07 ', 'comment_created': datetime.datetime(2022, 10, 5, 3, 56, 55, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 987517398, 'comment_body': ""AFAIK, Exploration's state can also have the `solution`! "", 'comment_created': datetime.datetime(2022, 10, 5, 3, 59, 1, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 987517518, 'comment_body': ""(AFAIK, Exploration's state can also have the `solution`!)"", 'comment_created': datetime.datetime(2022, 10, 5, 3, 59, 23, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 990865834, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 10, 10, 0, 40, 6, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 990865845, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 10, 10, 0, 40, 10, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 990865852, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 10, 10, 0, 40, 14, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 990865856, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 10, 10, 0, 40, 18, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 990865877, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 10, 10, 0, 40, 27, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 990865883, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 10, 10, 0, 40, 31, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 990865889, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 10, 10, 0, 40, 35, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 990865904, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 10, 10, 0, 40, 41, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 990865953, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 10, 10, 0, 40, 45, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 990865960, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 10, 10, 0, 40, 49, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 990865965, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 10, 10, 0, 40, 53, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 990866006, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 10, 10, 0, 41, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 990866012, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 10, 10, 0, 41, 7, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 990866019, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 10, 10, 0, 41, 11, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 991218599, 'comment_body': 'Sorry, forgot to update you. Done', 'comment_created': datetime.datetime(2022, 10, 10, 12, 14, 11, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 991218674, 'comment_body': 'Sorry, forgot to update you. Done', 'comment_created': datetime.datetime(2022, 10, 10, 12, 14, 16, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 991218761, 'comment_body': 'Sorry, forgot to update you. Done', 'comment_created': datetime.datetime(2022, 10, 10, 12, 14, 22, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 991218890, 'comment_body': 'Sorry, forgot to update you. Done', 'comment_created': datetime.datetime(2022, 10, 10, 12, 14, 31, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 991223647, 'comment_body': 'Yes, you are right. So I checked for the `Solution` part and found out that `MultipleChoice` and `ItemSelection` interaction specifically does not have solution as of now due to some issue. This particular function is only used for `MultipleChoice` and `ItemSelection`. For the confirmation, I took a look at [this](https://github.com/oppia/oppia/blob/develop/extensions/interactions/MultipleChoiceInput/MultipleChoiceInput.py#L44)', 'comment_created': datetime.datetime(2022, 10, 10, 12, 20, 12, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 991587096, 'comment_body': 'Oh there would be some previous solutions left. I have updated the code.', 'comment_created': datetime.datetime(2022, 10, 10, 19, 31, 50, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 991587154, 'comment_body': 'Oh there would be some previous solutions left. I have updated the code.', 'comment_created': datetime.datetime(2022, 10, 10, 19, 31, 56, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 991810215, 'comment_body': ""```suggestion\r\n        tags = exploration_dict['tags']\r\n        if len(tags) > 0:\r\n            exp_tags = list(set(tags))\r\n            exp_tags = [tag for tag in exp_tags if tag and len(tag) <= 30]\r\n            exploration_dict['tags'] = exp_tags[:10]\r\n```"", 'comment_created': datetime.datetime(2022, 10, 11, 4, 47, 23, tzinfo=datetime.timezone.utc), 'commenter': 'EricZLou', 'type': 'User'}, {'comment_id': 992314587, 'comment_body': ""Hey @EricZLou, the reason why I did not perform this part is because it was causing the tests to fail as set would return the value in any order and it would not match the expected value. I did try to use the `sort` to pass the test but using this was adding some spacing issue that is why I dropped this part.\r\nAlso please let me know if I'm missing anything but you suggested to remove the `exp_tags = [tag for tag in exp_tags if tag != '']`, I'm not sure why we should do that.\r\nThanks"", 'comment_created': datetime.datetime(2022, 10, 11, 13, 17, 3, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 992750019, 'comment_body': 'You can use sorted(list(set(tags))). What is the spacing issue exactly?\r\n\r\nNote that Eric\'s ""if tag"" corresponds to ""if tag != \'\'"".', 'comment_created': datetime.datetime(2022, 10, 11, 20, 29, 14, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 992751601, 'comment_body': ""I'll try that out @seanlip. Thanks for the response.\r\n**Edit** - Updated"", 'comment_created': datetime.datetime(2022, 10, 11, 20, 31, 15, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 993174067, 'comment_body': '```suggestion\r\n    # Here we use type Any because some rule specs have deeply nested types,\r\n    # such as for the `NumberWithUnits` interaction.\r\n    Mapping[\r\n        str, Union[str, List[str], int, bool, float, Dict[str, int], List[Any]]\r\n    ],\r\n```', 'comment_created': datetime.datetime(2022, 10, 12, 8, 47, 16, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 993748941, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 10, 12, 17, 52, 21, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 996251960, 'comment_body': 'Does it cover all the cases mentioned in the migration conversion function? (Wanted to confirm as I see the conversion function is doing so many things so I was not sure whether it will be safe to allow any old draft changes!) ', 'comment_created': datetime.datetime(2022, 10, 15, 4, 45, 3, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 996252189, 'comment_body': 'We need to make sure suggestions for such content are rejected!', 'comment_created': datetime.datetime(2022, 10, 15, 4, 47, 31, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 996253088, 'comment_body': ""We don't need any of these interaction fixes for questions? In case we are going to fix it in the future, then where the frontend and backend validation will work fine for the existing question models?"", 'comment_created': datetime.datetime(2022, 10, 15, 4, 57, 25, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 996303233, 'comment_body': 'It does not cover the cases for `interactions` the reason being is that we will not be able to collect enough info about the interactions in order to update it as the interactions are divided into further properties when it comes in the form of change list.\r\nBy this, I mean that we will require a complete interaction in order to make the appropriate changes. Like [here](https://github.com/oppia/oppia/blob/develop/core/domain/exp_domain.py#L292) the interactions are divided into further properties and there is a strong possibility that we will not be having exploration change for each interaction property and that is why we will not be editing it.\r\nI was also talking this part with @vojtechjelinek and he agrees.\r\nThanks', 'comment_created': datetime.datetime(2022, 10, 15, 12, 57, 33, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 996303481, 'comment_body': 'When I checked I was not able to create the translation suggestions for these.', 'comment_created': datetime.datetime(2022, 10, 15, 12, 59, 56, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 996305188, 'comment_body': ""@seanlip previously mentioned that the Questions are very recent so there might not be any validation errors. Also, the validations run on save so there won't be any problem loading any questions. What do you think?\r\nThanks"", 'comment_created': datetime.datetime(2022, 10, 15, 13, 14, 54, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 996337189, 'comment_body': ""> Also, the validations run on save so there won't be any problem loading any questions. \r\n\r\n@lkbhitesh07 Just to confirm, you have tested this? If not, probably worth doing so to double-check."", 'comment_created': datetime.datetime(2022, 10, 15, 18, 5, 11, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 997584150, 'comment_body': 'Please move this into some constant, I see you redefining this everywhere.', 'comment_created': datetime.datetime(2022, 10, 17, 23, 18, 18, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 997584641, 'comment_body': ""```suggestion\r\n            | 'Transform and migrate model' >> beam.FlatMap(\r\n                lambda objects: (\r\n                    self._update_suggestion_model(\r\n                        objects['suggestions'][0],\r\n                        objects['exploration'][0]\r\n                    )\r\n                ))\r\n```"", 'comment_created': datetime.datetime(2022, 10, 17, 23, 19, 27, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 997585097, 'comment_body': 'Is this neede? I thought `CoGroupByKey` will group them automatically.', 'comment_created': datetime.datetime(2022, 10, 17, 23, 20, 23, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 997585486, 'comment_body': '```suggestion\r\n        translatable_content_ids = (\r\n            exp_translatable_contents.content_id_to_translatable_content.keys()\r\n        )\r\n```', 'comment_created': datetime.datetime(2022, 10, 17, 23, 21, 24, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 997585610, 'comment_body': ""There should exist constant for `'rejected'`"", 'comment_created': datetime.datetime(2022, 10, 17, 23, 21, 44, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 997585751, 'comment_body': ""```suggestion\r\n            suggestion_change['translation_html'] = (\r\n                RejectSuggestionWithMissingContentIdMigrationJob._fix_content(\r\n                    suggestion_change['translation_html']))\r\n```"", 'comment_created': datetime.datetime(2022, 10, 17, 23, 22, 3, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 997586127, 'comment_body': '```suggestion\r\n    @classmethod\r\n    def _fix_content(cls, html: str) -> str:\r\n        """"""Helper function to fix the html.\r\n\r\n        Args:\r\n            html: str. The html data to fix.\r\n\r\n        Returns:\r\n            html: str. The fixed html data.\r\n        """"""\r\n        html = cls.fix_rte_tags(\r\n            html, is_tags_nested_inside_tabs_or_collapsible=False)\r\n        return cls.fix_tabs_and_collapsible_tags(html)\r\n```', 'comment_created': datetime.datetime(2022, 10, 17, 23, 22, 54, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 997587799, 'comment_body': 'Similar above, use `cls` to shorten the code a bit.', 'comment_created': datetime.datetime(2022, 10, 17, 23, 26, 50, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 997716463, 'comment_body': 'Removed this part as the changes were present in the conversion function and took directly from there. Initially I opened other PR for this and these changes were required there.\r\nThanks', 'comment_created': datetime.datetime(2022, 10, 18, 4, 53, 13, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 997716633, 'comment_body': 'Updated', 'comment_created': datetime.datetime(2022, 10, 18, 4, 53, 38, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 997716781, 'comment_body': 'No longer needed.', 'comment_created': datetime.datetime(2022, 10, 18, 4, 54, 4, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 997735254, 'comment_body': 'Need to change this part due to the lint error.', 'comment_created': datetime.datetime(2022, 10, 18, 5, 33, 37, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 997735632, 'comment_body': 'Doing this, results in an error.', 'comment_created': datetime.datetime(2022, 10, 18, 5, 34, 25, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 997742428, 'comment_body': '[Not a blocker] In the future if someone changes the schema of customization_args they will change this function so this conversion function will stop working. [In general, we should avoid creating an object in conversion functions (As the latest class in repo only supports the latest version schema]', 'comment_created': datetime.datetime(2022, 10, 18, 5, 47, 34, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 997745387, 'comment_body': '[Not a blocker] Rename it to `_remove_unwanted_content_ids_from_translations_and_voiceovers_from_state_v51_or_v52` else anyone will start using it for the general conversion function which starts to create problems if we have any migration to remove a field.', 'comment_created': datetime.datetime(2022, 10, 18, 5, 53, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 997748831, 'comment_body': ""[Not a blocker], I'm considering `<p><p></p></p>` as an empty choice (And there are other such possibilities), I think we should have a better function to identify empty HTML! (Not sure whether we need such checks)"", 'comment_created': datetime.datetime(2022, 10, 18, 5, 59, 6, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 997753021, 'comment_body': 'We are Updating empty choices to ""Choice 1"" and existing Choices can have the same value, right? Make sure there won\'t be any issue for such cases (like there can be duplicate content_ids in invalid_choices_index, can it create problem in the line below this).', 'comment_created': datetime.datetime(2022, 10, 18, 6, 6, 23, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 997758104, 'comment_body': ""Old cust args choices(content, content_id):\r\n```\r\n('  ', ca_1), ('<p></p>', ca_2), ('<p>Choice 1</p>', ca_3)\r\n```\r\n\r\nAfter populating empty choices:\r\n```\r\n('  ', ca_1), ('<p>Choice 1</p>', ca_2), ('<p>Choice 1</p>', ca_3)\r\n```\r\n\r\nAfter removing duplicate choices:\r\n```\r\n('  ', ca_1), ('<p>Choice 1</p>', ca_2)\r\n```\r\n\r\nAnd now if we have a rule for ca_3 we will remove the rule, I think we should not do that!\r\n"", 'comment_created': datetime.datetime(2022, 10, 18, 6, 14, 22, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 997762324, 'comment_body': 'Assume we have a published exploration for which we deleted the answer_groups, and other is no path to the next card, are we still leaving that as a published exploration?', 'comment_created': datetime.datetime(2022, 10, 18, 6, 21, 5, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 997764789, 'comment_body': 'will it handle solutions for all the interactions? Like the correct_answer for ItemSelectionInput is `SetOfTranslatableHtmlContentIds`?', 'comment_created': datetime.datetime(2022, 10, 18, 6, 24, 30, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 997768489, 'comment_body': 'Do we need to mark voiceover needs update as well?', 'comment_created': datetime.datetime(2022, 10, 18, 6, 29, 52, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 997771749, 'comment_body': 'For voiceover as well?', 'comment_created': datetime.datetime(2022, 10, 18, 6, 34, 21, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 998186167, 'comment_body': ""Yes you are correct. Actually, this is the method that Vojta's conversion function introduced and I also needed this to update the translations and voiceovers so I am using it, I created this as a separate method as previously it was only included in the `_convert_states_v51_dict_to_v52_dict`.\r\nAlso, we are planning to remove the conversion functions, right? I think @kevintab95 is working on this part. So, there won't be any problem with that, please let me know what do you think?"", 'comment_created': datetime.datetime(2022, 10, 18, 13, 3, 39, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 998203410, 'comment_body': 'I have handled this case and checked for all scenarios. For private it is fine to have state disconnection and for the public one there will be no state disconnection.\r\nThanks', 'comment_created': datetime.datetime(2022, 10, 18, 13, 15, 4, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 998230119, 'comment_body': ""There will be endless possibility then, don't you think? I mean if instead of Choice 1 I introduce some other value then there is a chance that it will also be present there. How will we handle that, I'm a bit confused. Will it be a good idea to do something like `Choice_1_one`, I think this will be unique and no one have had made choices like this?"", 'comment_created': datetime.datetime(2022, 10, 18, 13, 31, 48, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 998247966, 'comment_body': 'It will not be possible to create this part right?', 'comment_created': datetime.datetime(2022, 10, 18, 13, 42, 8, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 998262887, 'comment_body': 'Though as of now we cannot create `Solution` for the `ItemSelectionInput` interaction. Also, come to think of this part, in case there would be any part where it would be failing then we would get the stack trace for not finding the choice in the answer group, right? So, I think this will be fine. Please let me know what do you think?\r\nAlso in the future it will not be possible anyways to create the errored data.', 'comment_created': datetime.datetime(2022, 10, 18, 13, 51, 9, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 998414216, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 10, 18, 15, 43, 53, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 998414304, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 10, 18, 15, 43, 57, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 998415093, 'comment_body': 'What value should we assign it to as we would require something to assign. Please let me know your thoughts.\r\nThanks', 'comment_created': datetime.datetime(2022, 10, 18, 15, 44, 37, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 998415305, 'comment_body': 'Updated', 'comment_created': datetime.datetime(2022, 10, 18, 15, 44, 48, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 998416088, 'comment_body': 'I have updated this part, though I would still need to use `GroupBy` after removing these two lines.\r\nThanks', 'comment_created': datetime.datetime(2022, 10, 18, 15, 45, 27, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 998416154, 'comment_body': 'Fails, with the following error\r\n```\r\n    wrapper = lambda x: [fn(x)]\r\n  File ""/home/lkbhitesh07/Desktop/oppia/oppia/core/jobs/job_utils.py"", line 190, in get_beam_entity_from_ndb_model\r\n    ndb_model._entity_to_ds_entity(model) # pylint: disable=protected-access\r\n  File ""/home/lkbhitesh07/Desktop/oppia/oppia/third_party/python_libs/google/cloud/ndb/model.py"", line 763, in _entity_to_ds_entity\r\n    key = entity._key\r\nAttributeError: \'list\' object has no attribute \'_key\' [while running \'Put models into the datastore/Transforming the NDB models into Apache Beam entities\']\r\n```', 'comment_created': datetime.datetime(2022, 10, 18, 15, 45, 31, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 998638747, 'comment_body': 'Doing this was leading to the below error, so reverted back to the previous state.\r\n```\r\nwrapper = lambda x: [fn(x)]\r\n  File ""/home/runner/work/oppia/oppia/core/jobs/batch_jobs/rejecting_suggestion_for_invalid_content_ids_jobs.py"", line 140, in <lambda>\r\n    objects[\'exploration\'][0]\r\n  File ""/home/runner/work/oppia/oppia/core/jobs/batch_jobs/rejecting_suggestion_for_invalid_content_ids_jobs.py"", line 72, in _update_suggestion_model\r\n    exp_domain_obj = exp_fetchers.get_exploration_from_model(exp_model)\r\n  File ""/home/runner/work/oppia/oppia/core/domain/exp_fetchers.py"", line 189, in get_exploration_from_model\r\n    \'states_schema_version\': exploration_model.states_schema_version,\r\nAttributeError: \'list\' object has no attribute \'states_schema_version\' [while running \'Transform and migrate model\']\r\n```', 'comment_created': datetime.datetime(2022, 10, 18, 19, 42, 37, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 998690115, 'comment_body': ""Maybe replacing `'  '` with ``<p>Choice 1</p>, check whether this value already exists if not then only replace? Will that work?"", 'comment_created': datetime.datetime(2022, 10, 18, 20, 36, 13, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 998691399, 'comment_body': ""> I have handled this case and checked for all scenarios. \r\n\r\nHow you had validated this for all the published explorations? (Checking as the AuditExplorationMigrationJob doesn't validate published exploration with strict checks)"", 'comment_created': datetime.datetime(2022, 10, 18, 20, 37, 54, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 998723500, 'comment_body': 'In those cases should we not do the conversion and mark the draft invalid? In general, I think this migration is big and any state_property changes should lead to an invalid draft. This will help us avoid having invalid data in the draft which get stuck in the validation pipeline!', 'comment_created': datetime.datetime(2022, 10, 18, 21, 21, 15, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 999353901, 'comment_body': 'Hmm, okay no problem.', 'comment_created': datetime.datetime(2022, 10, 19, 12, 5, 58, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 999355097, 'comment_body': 'Okay, lets keep it as is.', 'comment_created': datetime.datetime(2022, 10, 19, 12, 6, 45, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 999819937, 'comment_body': 'Yes, I ran an audit job apart from using `AuditExplorationMigrationJob` and used the results. So hopefully we will not get any error.\r\nThanks', 'comment_created': datetime.datetime(2022, 10, 19, 18, 43, 38, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 999820021, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 10, 19, 18, 43, 46, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 999822525, 'comment_body': 'I have updated this part.', 'comment_created': datetime.datetime(2022, 10, 19, 18, 46, 30, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 1000571127, 'comment_body': '```suggestion\r\n                        not allow_imp_frac and \r\n                        den <= num and\r\n                        (\r\n                            rule_spec.rule_type in \r\n                            rules_that_can_have_improper_fractions\r\n                        )\r\n```', 'comment_created': datetime.datetime(2022, 10, 20, 12, 39, 32, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1000577306, 'comment_body': ""```suggestion\r\n            if cls._is_tag_removed_with_invalid_attributes(\r\n                tag, 'url-with-value'\r\n            ):\r\n```"", 'comment_created': datetime.datetime(2022, 10, 20, 12, 45, 13, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1008778540, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 10, 30, 1, 35, 27, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 1008778543, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 10, 30, 1, 35, 31, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 1008794445, 'comment_body': '@lkbhitesh07 Can you confirm this?', 'comment_created': datetime.datetime(2022, 10, 30, 5, 25, 53, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 1008846430, 'comment_body': 'Hey @DubeySandeep,\r\nSorry for the late response, I did check for the exploration and it was working perfectly fine, the validation only runs when we save the changes. For the question, It will be a problem because at the time of loading it uses `from_dict` method of state and that results in the calling of validation method.\r\nI think I have to bring the previous changes back where I was only calling the validations for the exploration and not for the Question.\r\nThanks', 'comment_created': datetime.datetime(2022, 10, 30, 12, 32, 58, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 1008847014, 'comment_body': 'I\'m also doing some changes for the validations in which I will be moving some validations to strict mode, along with that I will make the changes where the validations will only be called for the explorations.\r\nThe stack trace for the error which will help to understand the flow of calling validation in the questions - \r\n```\r\nTraceback (most recent call last):\r\n  File ""/tmp/tmpQLqm_p/lib/python3.8/site-packages/webapp2.py"", line 604, in dispatch\r\n    return method(*args, **kwargs)\r\n  File ""/home/lkbhitesh07/Desktop/oppia/oppia/core/controllers/acl_decorators.py"", line 91, in test_can_access\r\n    return handler(self, *args, **kwargs)\r\n  File ""/home/lkbhitesh07/Desktop/oppia/oppia/core/controllers/reader.py"", line 1651, in get\r\n    question_services.get_questions_by_skill_ids(\r\n  File ""/home/lkbhitesh07/Desktop/oppia/oppia/core/domain/question_services.py"", line 307, in get_questions_by_skill_ids\r\n    questions_with_none = question_fetchers.get_questions_by_ids(question_ids)\r\n  File ""/home/lkbhitesh07/Desktop/oppia/oppia/core/domain/question_fetchers.py"", line 105, in get_questions_by_ids\r\n    questions.append(get_question_from_model(question_model))\r\n  File ""/home/lkbhitesh07/Desktop/oppia/oppia/core/domain/question_fetchers.py"", line 139, in get_question_from_model\r\n    state_domain.State.from_dict(versioned_question_state[\'state\']),\r\n  File ""/home/lkbhitesh07/Desktop/oppia/oppia/core/domain/state_domain.py"", line 5156, in from_dict\r\n    content.validate()\r\n  File ""/home/lkbhitesh07/Desktop/oppia/oppia/core/domain/state_domain.py"", line 3941, in validate\r\n    html_cleaner.validate_rte_tags(self.html)\r\n  File ""/home/lkbhitesh07/Desktop/oppia/oppia/core/domain/html_cleaner.py"", line 362, in validate_rte_tags\r\n    raise utils.ValidationError(\r\ncore.utils.ValidationError: Image tag \'filepath-with-value\' attribute should not be empty.\r\n\r\n```', 'comment_created': datetime.datetime(2022, 10, 30, 12, 37, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 1008906201, 'comment_body': '@lkbhitesh07 just a note, when you are making the changes, do not pass any info about the exploration/question context into the from-dict method. The validation should still be called so we don\'t serve invalid questions. But we should handle have a code path when loading questions to handle the ""question is invalid,"" case, ie deal with errors properly.', 'comment_created': datetime.datetime(2022, 10, 30, 18, 15, 17, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 1009873426, 'comment_body': ""Hey!\r\n@seanlip, I and @vojtechjelinek was discussing about this part and he suggested to use the `try catch` block for the place where we call the validations at the time of loading so that we can still validate the data while storing. I don't think if we will be able to do that, the reason being is that when we call `from_dict` method inside the `question_fetchers.py` we are in the end using it to return the `Question` model, you can find the reference [here](https://github.com/oppia/oppia/blob/develop/core/domain/question_fetchers.py#L139). We will not be able to avoid this particular case, I think either the validation will be called for the question or it should not be called at all.\r\nWhat should I do in this case?\r\nThanks"", 'comment_created': datetime.datetime(2022, 10, 31, 21, 7, 36, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 1010632892, 'comment_body': 'Ah sorry, I missed this. OK, do the following:\r\n\r\n1. In state_domain.State.from_dict(), add an optional param ""validate=True"". The default arg should be True. Only in the question fetcher should you pass in validate=False explicitly and leave a TODO explaining why we\'re doing this.\r\n2. That TODO should point to an issue that says something like ""validate all question states by writing a migration + audit \r\njob that migrates all questions to their latest version and running it, then once everything passes, remove this TODO"".\r\n\r\nDoes that work?', 'comment_created': datetime.datetime(2022, 11, 1, 16, 24, 55, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 1010892034, 'comment_body': 'Yep!\r\nThat works, thanks for the response.', 'comment_created': datetime.datetime(2022, 11, 1, 20, 55, 36, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}]","[{'commit_sha': 'e63892c824b787bceb4d1688d3f0e41e3d8f1d11', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '10c90f62615ff915a8fcb4200997eb236216f87c', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '112d290c0ff6299098d72b2bbef9abfac863c3c2', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fdd7502780eac2ddfafe18db75db34897d857f7e', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a1c80d8bc3453105f48bc52c9be10f9a01d44c0e', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '285301d4fbf5e91b3e119f11144c563ab2357301', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b568875065ede2a2b8e0dcbcd5680c5e058cf45b', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'efcac798919798864ecf87799dde64c2e9427809', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a7a99e707d0144ee1b684867646a23c4ff4cc77f', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b0d15504ef352591e86149f2951314a3850f6771', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f91d021437f3e72ca8957df81abfd03300619f2a', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '59773802fa350264d8bd77b3911b8352a21c2068', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '45a612bc376a52674b05221c2298390fab91e948', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '31885af792c3fb6738deb245230dddd390ca6900', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2fc53a1aa35a45f26a3159e824f3e12124917c8a', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '16d47029108af4b32bdf26426b1b1d8db112d22d', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8b281a478f3a9a32fbd31becd161ef3a8575a438', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'eb108cd31ff66e9951a1e1df89b359df7ff5fb6e', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1536d21334df34fd6146023c417f37a438c4bdd1', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7e7207f5852f04588f660c2bbbeae03e07042c83', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '38da6152324ad130abfac553ede3bf5bf56e56de', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ef509e9eca6e6a27cfdcc8cf735c84765799b891', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '45ac85641911872eb9a988891f1ad4776ab75822', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6157b274854ff3c0decb059caf40c9fab1d8205e', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '61098123f7bb85f2deb893b463c472e15fb58a6c', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b416c3aedf1af9bb698f693c4e42ab054b1b08dc', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b929a251aa6a160a2b4954a0b0e840a8ff1f8b63', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e1ec6bdd4a0dea63ad9d5e39b36cc1fe517534c0', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bada1bb2837842db643cd9a75578173c022b4411', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'be0dbade24f9f118c7d9aa77e93217cbdf7779f8', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '96fdd2fd8a032bb37d9c9839371cb982eb420c8b', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd9e3fa5923d4adc657f24e3d52c49c770191756f', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6a3cab25bb9a121db64ea0c9177d3fd351b896fc', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'da5adc8066963fc0cfc3c8918006990a15fbb22f', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b640a14ca847a5b024909e876bf4b2b434e32ca1', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1c727e9ac1ab400902a2d824565f4a134ff9a18e', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '712c57708ef3733505103c15f031808f2f31e1f3', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b3a2752c5cd9ad95b5b5382bf0adcc49f7ca4be6', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8c64e7f9bdc5e8c54891be3c709cdd875c813a73', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ebbd87486f3673a126a9d5704c66b3349437f080', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '49abdf1c4549dad970f9d4b5eeda79457329180e', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cb7942fe196ba5aa10047e9969cac73f676dfc64', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f8cde4a41e0ba6c4f163da53f72ffb4896474b6d', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b5694c6088a57c9f8639035a0be941bd02617ba7', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2d0665c9dd0964d7b361d8df6143323e9a43a16a', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0dac73890597734805a6cf0079c33ad4d00afd51', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a9d90e4c21c59484b2c6d1cf609ac3f592fe9a43', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a2b0169ed23197e6290421772c34f03d42c78cbd', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f7d594014efe5faa201522c47479ce180f06d3d2', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e42ca42f53cf51443f467c1dd1afa1de40b2d4be', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '93ded23855249add8e78d0a2d15940309f0ca935', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4c222a000cc83a35cf981b8eda5f203da605a610', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '94fcb01efaf59d5de7ea01e005dfc86bd7534955', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '51bd27894f15e1e54b9abb7359919e40b2b6628e', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a0e69cec1de5dd2ea080fc6069d1d7271f65621c', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6f92fff4e3c72b1b56f5f7902e4f7ec814f37bbd', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '083215d7d7db5314da40dac0c61c2ac6793904e8', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a3d9b74782505c86c3a714bcbc7ae46df1158349', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a52ad6303d0e3b4b0405f2607933f36f6fcc8edd', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6d01a9ca7b9ee14ad9e073ddd13d6a4387c78d45', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fa2932834edaa7c3c0817afedd1b0a139a990540', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0a65af6cd6a4d00f88762a2f05fd23222d98b497', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8d51078eda184d5282d3d2e5ab22cb7b32cfadd1', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1f67a9b24d7644fcf4009b53701e7e71dedcfcec', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a9107e1b3c065169525e2e6d26c31e5020da59bd', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd93298833927be8bf6c2f45aed746081fb87a797', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c879d30703ab72c860d2cd6307b55d84a913c849', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '734851c560f41f6cc21f430ce31cde3fdc5dd031', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2bfacec3794a6a9d20cdd474e0b8329745982ed2', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd4cba23d698d18a4e1dcee610fbbf5abb630fb3d', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '21b17f5b51f4864bd8f040fd5f8b27432f4d1a00', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2f9b1d38416b8c0b45ef270cf4a53560ef7b3919', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '741acd4ea923e09166dca37f46524e54fadb7e9a', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9f89bf274c599f54ea6a48ceb2b02a7b5f8e6b4e', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1c56b94c7fa08cc71dee87e16a114012cde31b03', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '81c4f436ff703187d7e3b6e28d0ad9b09fd7679e', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fd9a425ae9bd494c5bc688ced2a7a3fc42d93d2c', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '16562f186c9a0cc4afcf8a4cc577bbad18ce7c06', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '090fcfb7218e04d54ae9221a5d8ca0d16ed92735', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1d41fba4e5208052ed50df30041af9db9706877f', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '09501083e1ec9dc5b775474ea75f3c29af93739b', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '19c3315ecd7dc1a8788caa8848e82a73693c5dfb', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2bfe0e8143a3d6c87d80ba942292d2606ee62877', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6984657e8e31dee6367174f4b7810b6bfc15d46f', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'af2e8c3490748f345437e4fbfd44c094d459b155', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0735ec53c925902a80834d9cd5f4d74bdd31d2b4', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '125033dc158526e9ef4097cda3e7f28e5b1bd554', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f949add82fca61b353bac6bf90005a12faeb0ffc', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd1e6bbac4a041e7078ec0ff9257a0e24105c43c5', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5e9de63ed6dbaee03c499bdf1652850e7930dd08', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '27cc9d7762680b77aec78ee4be1eda31fa881084', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2eebf96fd3a051ee9fb7bb2e51759d744bbaf52f', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e1eedad38e3f0440a03a4b7970eadb8190160672', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8014bbe7ad244e5cfbc8cfcc16fd0f0f69a0120c', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b3a91a2972304c96ebc8adefb556b43828d72e54', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd9bb5b25654e10a98f2a88e20512c2f8793d7a5a', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f2accbd228b4461dc88fc0938b80fd0ddaa674d3', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e840ced2930772dff16583b26b22a29b933accea', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8c21dbddb1eee581ba0b79a277a4b5a91aa5b66f', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6d3079c64adffa9c068ad1b7dd62b050f6dbe20a', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '51e5c9151d7ec0ee5016c36303d82c9b5e730caf', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '734d25bd5d7a979810f06872f86f26f5ef1b597f', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '856c4cef70d416a62bf3baf15ef068f6ae6c1850', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '92ea21963da0665250a93bf7e2320316f57d0fe1', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '48aefe951243af0bed5e7b3cb24a1ffb280725e5', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '790fc6af3b0da949236be607b3225402e9d8cb43', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4a19e11f0bfaef3fd11923241cf3be4a8d1876a2', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7c91c4bc7573aabefe86933ded7ce4f807119c1f', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'eeb9b1eb9fde1a5c2668d85bbe5677aae1234b42', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f0b9559edc333044fad4c1bdbccfc67305104805', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4a3a54f53cf0c92f312945487c72379070d5fb61', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'deb1412536ae2a0306a9cba1470e8472753b2a00', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ad1ca88e077f3d41ada877933173921be34bf582', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '553790d19a82f2878b008665aa2b5d70485d7c99', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c22146d6dd414ac65e1944a72460dd94b15decf9', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '14b0f68bc3bf5990ef15badadae437062bc871d6', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f030cfead8c7aaab5d01c77a40b4c5fce4dd1942', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3b2fb92ddee4ac1c7b5edca9521401024fa86ace', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'feb80603234aae8605e6624931ffba4c51a46d2c', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4e5dfcb222f0f0be032802ceb0b32b8486fc5513', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cae0c6fa30e51f7f5335bd6a63a30d5766fcc805', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8a2b2d0c0250c9e798354c3b3df14e2e2f8e67f6', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4c53d8794e10c1db81193ea85cabaada71195cb9', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1eace32b1e025e4cfbfe629752cc925532e3438d', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9f6f2e85ace6c28b2bc78c394e90dc6baa1fb4a0', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'adc9471c05cc42b585dee06d9ad5d3311f5af7ec', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '62c9121f3f5a77364e761406713fadb7416d1fb0', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '85fde25a2cce18e6dea30e9982b67b2bf4817b1f', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd345b352024846d0cc313a97702762a2bb6cb0b1', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9a1908fb5483b002b3f538fb5b5ace10893952c0', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '92d4325fde5575987a01f19d2ad457e671857351', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bb3e4874ef1992e22ede01f35f7db119c0914708', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5186e10da6e18674a4921b926e1adabce393c0c5', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0d3cb1cee236ed0ca0f88a94b4cf74ca4d9e7cbf', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '17a30a693c8e58f11f2d8f0846b9fb8553711ae9', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e6b4a25506092843940b4c79e660a481bd0cbde5', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a2e0a9fe6f076496990de7f8c589dc7a24b6dfea', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3ae4536da0f8cf69541f59677ca48cb8f8b747f7', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aa60607834dd0863a8dc3d48c0467caab19f08f8', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '351b6b41efb75956af1174fbc6bbcb80319e40ae', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '695f006adca3207a121783cf162f9b45a23d7c47', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '88d25a0b498b23f56c53ea20cd1ce6ba05d41dd1', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '86c2f3003393324f3ccfc4a9ad195bcf749a78fc', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '569a05bf3c3548131f8a5ffa190fce7ebde12957', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cfe1b2556908cb58d4ebb71f5142dd08447fda25', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fb872d990468ebc5bebabceb3da055878a26eeed', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '20cfa5632ed171a1fe4944de751c2c3e62725dac', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '58b654c13c8219ee0d5276c30dae9023164619c8', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '386e5e96cd0bb945d11c84dd56e55b256496d41b', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '09c42f951bd27d73e8c1c6b68e7f86b18fe107ef', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '47b34dc07da935612b74da2f6240761ef482ab39', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '10307229c6d424725a49e185fb95b12eed52f730', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '813ebf1d7672a301de42247fadde365d4069f9ba', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3e45afef078d3c31405a529ec2f985e934c60c7d', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3321dde6bc040c71182f1e32f14c5cf94d637ac3', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '37ea71ed18becf2e8a1ae7e7672bdb513e8e14ff', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd68df23131ef3f0ba33986f2870788cd2b40acaa', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fe96999ae7aed8202e1fb7270312c464dfa370cf', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '37fe2ebd9b55e2688d85b3dfd1afac9d2d2f7971', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f513726687625f1160b798f09a4afe8f8637c040', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '42fc97f817df5caf5846c880bad610d7878f3337', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0f89fd761bfcdcb498a7600f2a6bf8690b376242', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f85fd6e8a5e0d92d63094a10221a988ecdd78821', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '15d5857000bf920d7840b3eb2d62f8ddeded4095', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '53a2475949db369c3590373e276cd8c93337736e', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f5138c0c50990bb0975c90973344de487a3388b4', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f36330cb5fcc200fdee4d4b352a51ddb5fe45266', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5f9aa9a62a94cee976f0e4fb6ae8d33d45cfe900', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd1c79489efb99068165f4d699c2990dc4c192b15', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '753e8ad53ba4a07bcad7213d592d8dd0b899f8ed', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ac9ed3dcdc41b812c760b7654601254c6a363620', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4129ebadc7204eeeed6fd5bb1771b207da6e80a4', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0c66fa00078a60572e14dd2f28b7e09247f9abaa', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '998c3a4821f5745db6dd59568f9d19d74840d906', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'edbdb981f6c99189d1bfd1df74a1b851dd36e496', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7518aa5301e58a21d8fddccb585054b147b9ab1e', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6fee2081c6981d22cd61eb32aff9ad17d5b15789', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd3bdfa01897a1cc13d5f7535dbf2887e12f1c182', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '66394b7aaa7745e4eb91cd40df9c6c875bf00093', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3a036a23e74dc22d87eba9ab0110e3df7768be00', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4dbf63617aba6ecffb382e56a9f4e032eb972760', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0b69d3227c44ddac3de65c4b9cb40991ae96368f', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '727ed5d62e8f2a4cc33e626546d6c7312a8584a9', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e332ab86cbb498d9c9ca7c5f0995e0a5469c391f', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'debc00fe51d77c1068adf108404fa14ed18a83db', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'db64244b53d8497883f62ba6883419843a598091', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '83908800d1420d7ee10acd1cc9dd16763a1b5b17', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '26cd8f703c96522275862b3c38993f65bbe2e633', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '18859f9333f7c888ff323ea9b4c2305406892e4c', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cefddfbcbee16617f8ce99e667ade32f8bcddd81', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a82c1bceedea28d9163213f1db27d894c55b822f', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '51ae42725ca0648243d4151da8eeda378bf60657', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cd16cb65a57399499caf0187fdaf7791faf2d771', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c119f0d07dc014c8cb958963533dcd5f12f14e17', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e1b5b18df74546aeb7b3b3785a058f934fa790f2', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1925c2161fbeae4818f3b26cd6c1feaedb005b5e', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'afc07a054ba28439e9476b5c00fc59bac821791e', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4a9d27ce4cdf4861239bc01bf18e7d54f5d5c114', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '39328e8a59665b761da9b23dd48faf0794f360fc', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c7e276fca1e9be6b8b4a746748b96292a99315a8', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b46d2ff3e5f4b465e59978197245ea89c498dc4e', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '47ace41f0827d791caff00410ddb81bd21f7de18', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '396482c1ae7edf6ee0f89271a83174d2ed217291', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fb59b33e00c090370819a1cdab2cd29cba5bbab5', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3a9884a03b67fc44d66ea6ab0520551da3d61461', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7e7d5d77416694bc3c1b3a60546746642b5ce7d4', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '11218ccbbc4afc9695d36735436723c9ae0a418a', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a0a44148e1a51f811ac5ecc60d51beaf7ccc7a0e', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f076a220c02bcb0c47b1e318e1fb8ce2c3e7ecac', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'acb9c1e5ff409712e1e06f86f6c079aa8e779ed3', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8bb871d63022e9b9ee6043583bf5788b462be1cc', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '552306ce2bdde79d900f0adc7bd94a00f69d0db9', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0e8a376002246e0412610e6c7be740870872c1a5', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '12cbc42aecaa5628f48c3d984fece8560745345a', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6911e553761aedcdbfa504ac21f565f1e9242382', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a0aadb53934e760b3e436a9c5d4f84b59c8a35b8', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9cfeda30d2bfe426c35c7e40bf8eeb03433660dc', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '24031b0c6ea029a3f6706a146bfec5fcdddeb8c9', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b87a516be413273b722effa788f772460a5945a4', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e332c2208063b77726310d31a75022e3bc6ecff0', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}]",Hitesh Tomar,44300735,,User,,30,,3,13
1007243973,Fix part of #13822: Backend validation for general state,"## Overview
<!--
READ ME FIRST:
Please answer *both* questions below and check off every point from the Essential Checklist!
If there is no corresponding issue number, fill in N/A where it says [fill_in_number_here] below in 1.
-->

1. This PR fixes or fixes part of #13822.
2. This PR does the following: This PR edits the backend validation for the following general state checks.
- tagged_skill_misconception_id should be None
- The answer group should have at least one rule spec
- Exploration tabs should be non empty, unique and have length not more than 30. Total tags should not exceed the length of 10.

## Essential Checklist

- [x] The PR title starts with ""Fix #bugnum: "", followed by a short, clear summary of the changes. (If this PR fixes part of an issue, prefix the title with ""Fix part of #bugnum: ..."".)
- [x] The linter/Karma presubmit checks have passed locally on your machine.
- [x] ""Allow edits from maintainers"" is checked. (See [here](https://help.github.com/en/github/collaborating-with-issues-and-pull-requests/allowing-changes-to-a-pull-request-branch-created-from-a-fork) for instructions on how to enable it.)
  - This lets reviewers restart your CircleCI tests for you.
- [x] The PR is made from a branch that's **not** called ""develop"".

## Proof that changes are correct

<!--
Add videos/screenshots of the user-facing interface to demonstrate that the changes
made in this PR work correctly. If this PR is for a developer-facing feature,
provide the videos/screenshots of developer-facing interface.

Please also include videos/screenshots of the developer tools
browser console, so that we can be sure that there are no console errors.

If the changes in your PRs are autogenerated via a script and you cannot provide proof
for the changes then please leave a comment ""No proof of changes needed because {{Reason}}""
and remove all the sections below.
-->

#### Proof of changes on desktop with slow/throttled network

<!--
Make sure to properly verify that everything works correctly, and that there are
no weird UI mistakes or other problems. Also, if there are any newly added fields,
try to fill them out and test that different inputs are correctly accepted/rejected.

Throttle the network (to 3G) using the browser Developer Tools (see references below).
There should be no performance or UI issues while the network is slow.

References:
 - Chrome: https://css-tricks.com/throttling-the-network/
 - Firefox: https://developer.mozilla.org/en-US/docs/Tools/Network_Monitor/Throttling
-->

#### Proof of changes on mobile phone

<!--
In some cases this is not needed (e.g. for pages that we do not expect to
support mobile phones, or for backend-only features).

Feel free to use the Developer Tools emulator for this.

References:
 - Chrome: https://developer.chrome.com/docs/devtools/device-mode/
 - Firefox: https://firefox-source-docs.mozilla.org/devtools-user/index.html#responsive-design-mode
-->

#### Proof of changes in Arabic language

<!--
If the PR changes the UI, make sure to add screenshots with the site
language set to Arabic as well (we use Arabic as it is a language written from right to left).
-->

## PR Pointers

- Make sure to follow the [instructions for making a code change](https://github.com/oppia/oppia/wiki/Contributing-code-to-Oppia#instructions-for-making-a-code-change).
- If you need a review or an answer to a question, and don't have permissions to assign people, **leave a comment** like the following: ""{{Question/comment}} @{{reviewer_username}} PTAL"". Oppiabot will help assign that person for you.
- For what code owners will expect, see the [Code Owner's wiki page](https://github.com/oppia/oppia/wiki/Oppia%27s-code-owners-and-checks-to-be-carried-out-by-developers).
- Make sure your PR follows conventions in the [style guide](https://github.com/oppia/oppia/wiki/Coding-style-guide), otherwise this will lead to review delays.
- Never force push. If you do, your PR will be closed.
- Some of the e2e tests are flaky, and can fail for reasons unrelated to your PR. We are working on fixing this, but in the meantime, if you need to restart the tests, please check the [""If your build fails"" wiki page](https://github.com/oppia/oppia/wiki/If-your-build-fails).
",True,15796,https://api.github.com/repos/oppia/oppia/pulls/15796,https://github.com/oppia/oppia/pull/15796,closed,268,70,9,49,51,58,1,1,[{'name': 'PR: LGTM'}],2022-07-25 12:25:06+00:00,2022-10-13 19:54:44+00:00,6938978.0,"80 days, 7:29:38","[{'comment_id': 976932292, 'comment_body': '```suggestion\r\n        validation_from_exploration: bool = False\r\n```', 'comment_created': datetime.datetime(2022, 9, 21, 19, 55, 22, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 976932542, 'comment_body': '```suggestion\r\n        self, \r\n        exp_param_specs_dict: Dict[str, param_domain.ParamSpec],\r\n        validation_from_exploration: bool = False\r\n```', 'comment_created': datetime.datetime(2022, 9, 21, 19, 55, 42, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 976933457, 'comment_body': '```suggestion\r\n        exp_param_specs_dict: Dict[str, param_domain.ParamSpec],\r\n        validation_from_exploration: bool = False\r\n```', 'comment_created': datetime.datetime(2022, 9, 21, 19, 56, 53, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 978542398, 'comment_body': 'Does not pass the linter.', 'comment_created': datetime.datetime(2022, 9, 23, 11, 35, 33, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 978542539, 'comment_body': 'Does not pass the linter', 'comment_created': datetime.datetime(2022, 9, 23, 11, 35, 46, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 980350663, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 9, 26, 18, 2, 42, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 980350730, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 9, 26, 18, 2, 46, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 980350781, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 9, 26, 18, 2, 50, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 983542451, 'comment_body': '```suggestion\r\n        exp_param_specs_dict: Dict[str, param_domain.ParamSpec],\r\n        *,\r\n        validation_from_exploration: bool = False\r\n```', 'comment_created': datetime.datetime(2022, 9, 29, 13, 26, 57, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 983543637, 'comment_body': 'Please add this error to the ""Raises"" section in the docstring.', 'comment_created': datetime.datetime(2022, 9, 29, 13, 28, 1, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 983543752, 'comment_body': 'Please add this error to the ""Raises"" section in the docstring.', 'comment_created': datetime.datetime(2022, 9, 29, 13, 28, 7, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 983543907, 'comment_body': '```suggestion\r\n        exp_param_specs_dict: Dict[str, param_domain.ParamSpec],\r\n        *,\r\n        validation_from_exploration: bool = False\r\n```', 'comment_created': datetime.datetime(2022, 9, 29, 13, 28, 15, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 983544277, 'comment_body': '```suggestion\r\n        *,\r\n        allow_null_interaction: bool,\r\n        validation_from_exploration: bool = False\r\n```', 'comment_created': datetime.datetime(2022, 9, 29, 13, 28, 34, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 983958725, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 9, 29, 19, 45, 32, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 983958781, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 9, 29, 19, 45, 37, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 983958825, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 9, 29, 19, 45, 40, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 983958883, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 9, 29, 19, 45, 45, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 983958939, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 9, 29, 19, 45, 50, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 985073568, 'comment_body': 'Can this be a classmethod in exp_domain.ExplorationChange class. Reasons:\r\n- All the exp_changes related code in one place (Easy to maintain)', 'comment_created': datetime.datetime(2022, 10, 1, 9, 3, 24, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 985073925, 'comment_body': 'why are we adding these checks for change dict. generally we add these validations as part of exp/state validation?', 'comment_created': datetime.datetime(2022, 10, 1, 9, 7, 11, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 985074862, 'comment_body': 'I think we should avoid using exp/question term inside state class i.e, state class is generic! Can we call it tagged_skill_misconception_id_allowed?', 'comment_created': datetime.datetime(2022, 10, 1, 9, 16, 15, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 985074927, 'comment_body': ""Isn't this true for `question`'s state as well?"", 'comment_created': datetime.datetime(2022, 10, 1, 9, 16, 54, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 985077853, 'comment_body': ""I saw an explanation here: https://github.com/oppia/oppia/pull/15797/files#diff-f02dad94abb3850a7cd43536e8251abdf5388d63f60a08f19c33f51e120d52fdR1902\r\n\r\nI would suggest having two flags `tagged_skill_misconception_id_allowed` and `allow_empty_rule_specs` both defaults to False and in exp/question class call validate with required values and write code-comment in question class explaining why it's disabled. This will ensure that question class has all the information and it would be easier to do the cleanup later.  wdyt?"", 'comment_created': datetime.datetime(2022, 10, 1, 9, 38, 29, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 985151965, 'comment_body': 'Hey these changes are part of the controller layer validations, So I think these should be placed here only. Am I missing something here?', 'comment_created': datetime.datetime(2022, 10, 1, 22, 32, 12, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 985152213, 'comment_body': 'Same reason as above, please let me know if I missed something here.', 'comment_created': datetime.datetime(2022, 10, 1, 22, 34, 42, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 985152409, 'comment_body': 'We have validation for the `question` as well just below it. So in case we have `training data` available and no rule specs then it will be okay but that will not be the case in `Exploration`', 'comment_created': datetime.datetime(2022, 10, 1, 22, 37, 12, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 985219538, 'comment_body': 'Yes! I totally agree with you. I have made the changes, though I changed the variable name a bit. The reason is `allow_empty_rule_specs` kind of says that we allow empty rule specs which is not exactly true, it is only true for question if we provide training data instead. Please let me know if the changes looks good to you otherwise I will make the changes asap.\r\nThanks', 'comment_created': datetime.datetime(2022, 10, 2, 10, 52, 24, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 985253110, 'comment_body': 'If I\'m not wrong this validation is ""used"" in the controller layer, right? If yes, then the validation checks can exist in the domain/service layer.', 'comment_created': datetime.datetime(2022, 10, 2, 15, 9, 20, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 985253572, 'comment_body': ""This comment is not about the placement of this check, it's about why we need this check, don't we already have this check in the State class? In general, we don't have such data validations for change command, right? I mean we only validate the schema of change dict and we validate internal data after applying the change_dict to exploration using exploration.validate()\r\n\r\nIs there any specific reason why we are adding this check? (I'm assuming we also have these checks in State class) "", 'comment_created': datetime.datetime(2022, 10, 2, 15, 12, 15, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 985253713, 'comment_body': ""> I have made the changes, though I changed the variable name a bit\r\n\r\nI agree `allow_empty_rule_specs` isn't a good name for the variable (As it starts with a verb), thanks for raising it!"", 'comment_created': datetime.datetime(2022, 10, 2, 15, 13, 44, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 985253840, 'comment_body': 'Add newline at the end of file (here and elsewhere)', 'comment_created': datetime.datetime(2022, 10, 2, 15, 14, 54, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 985254401, 'comment_body': 'We are still having the exp keyword, can we make it `tagged_skill_misconception_id_required` and `empty_rule_specs_allowed`? (ro something around that)\r\n\r\nNote: typo in _misconception_', 'comment_created': datetime.datetime(2022, 10, 2, 15, 18, 52, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 985263132, 'comment_body': ""Yes, they are for controller layer and will be called directly from the handler while validating the schema. I'm following the [wiki page](https://github.com/oppia/oppia/wiki/Schemas#domain-object-arguments-schemas-with-type-object_dict) for the validation and I think all the additional validations that we add for the Handlers are present inside this file only. I agree with your point that it can also be added to domain/service layer but the validations related to schemas or Handlers are added here in this file.\r\nThanks"", 'comment_created': datetime.datetime(2022, 10, 2, 16, 24, 29, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 985264045, 'comment_body': 'Yes, we do have validations present inside the State class. As far as I know we are currently adding 2 layers of validation. One in the controller layer and another with the domain layer. We do validate the data inside the change command at the controller layer as well as at domain layer. This particular file calls the validation method for the data that is present in the change dict.\r\nThanks', 'comment_created': datetime.datetime(2022, 10, 2, 16, 31, 35, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 985264360, 'comment_body': 'I see, I will do that. Thanks for the suggestions and help.', 'comment_created': datetime.datetime(2022, 10, 2, 16, 34, 15, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 985274319, 'comment_body': 'In the controller layer we only validate the basic structure/schema and all other data-related validations exist in the State class. Do we have [all these](https://github.com/oppia/oppia/blob/develop/core/domain/state_domain.py#L2665) validations in the controller layer?\r\n\r\nIn general, I think having these validations in multiple places creates duplication which will be hard to maintain in the future! Let me know what you think.', 'comment_created': datetime.datetime(2022, 10, 2, 17, 58, 12, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 985274946, 'comment_body': ""@lkbhitesh07 I'm assuming earlier we were validating the entire change object for all the cases, right? If yes, please don't remove this, as this is a more exhaustive check than just introducing a check for rules/cust_arg."", 'comment_created': datetime.datetime(2022, 10, 2, 18, 3, 36, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 985275539, 'comment_body': ""We are also validating the complete change object in my changes too. So when I return the `ExplorationChange` domain object from the function it calls its validation method directly. I'm just adding some extra validation check on top of it."", 'comment_created': datetime.datetime(2022, 10, 2, 18, 9, 15, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 985275877, 'comment_body': 'I agree with you, so basically we do not directly have the validation for all of them in the controller layer but we call their validate method from the controller layer, in case we are adding some extra validation that is required. As my changes were few so I directly checked them here.\r\nShould I remove this complete part of validation?\r\n**Edit** - I think you are correct that we should only validate the simple schema part in the controller layer and all the data should be validated in the domain layer. Please let me know what should be the appropriate next steps I should follow.\r\ncc/ @vojtechjelinek\r\nThanks', 'comment_created': datetime.datetime(2022, 10, 2, 18, 11, 57, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 985299806, 'comment_body': 'I think we sometimes have redundancy in some of the validations. The main thing for controller validation is that it is only possible to do the validations separate for each arg (in some cases that means we can only validate it partially as for the full validation we would need some other arg (like the version)).\r\n\r\nAlso, the validation in the controller layer is important to make sure that the args are correctly typed. I agree that some of the additional stuff is not needed here and we should do only the basic validation here and the other stuff elsewhere.', 'comment_created': datetime.datetime(2022, 10, 2, 21, 33, 51, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 985504539, 'comment_body': '> Please let me know what should be the appropriate next steps I should follow.\r\n\r\nI think you can just leave the controller layer check as is and add additional checks in the relevant class validation method!\r\n\r\n(Note: The change_dict does go through the basic check in the existing structure!) ', 'comment_created': datetime.datetime(2022, 10, 3, 8, 23, 18, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 988265921, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 10, 5, 19, 22, 23, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 988266004, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 10, 5, 19, 22, 29, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 988266057, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 10, 5, 19, 22, 33, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 989531689, 'comment_body': 'We are expecting to change it to `empty_rule_specs_allowed=False` after auditing and fixing issues with questions, right? If yes, then please add a TODOD comment! ', 'comment_created': datetime.datetime(2022, 10, 6, 22, 32, 49, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 989532578, 'comment_body': 'The default values are False, right? So do we need to pass it? (I mean in the ideal case state should not allow empty rule specs so we should not highlight it here. ""ideal case"" = when the question also starts doing it.)\r\n\r\nNote: This way when we will fix issues with questions and remove the `empty_rule_specs_allowed` param we won\'t have to touch/change this file.', 'comment_created': datetime.datetime(2022, 10, 6, 22, 34, 48, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 989533708, 'comment_body': '[Optional] Can we simplify this to \r\n```\r\nself.tagged_skill_misconception_id is None and tagged_skill_misconception_id_required\r\n\r\n```', 'comment_created': datetime.datetime(2022, 10, 6, 22, 37, 10, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 989534446, 'comment_body': 'This check was working both for exploration and questions earlier, right? if yes, then why are we modifying it?', 'comment_created': datetime.datetime(2022, 10, 6, 22, 38, 40, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 989536351, 'comment_body': 'Thanks for fixing all these issues! :)', 'comment_created': datetime.datetime(2022, 10, 6, 22, 43, 5, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 990193076, 'comment_body': ""No, I think in general it is okay to have empty rule specs inside the `Question` as long as we have `training_data`. Isn't it?"", 'comment_created': datetime.datetime(2022, 10, 7, 15, 8, 20, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 990253615, 'comment_body': ""No questions currently have training data. Shouldn't we do the same thing we do for explorations, here?"", 'comment_created': datetime.datetime(2022, 10, 7, 16, 8, 58, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 990443689, 'comment_body': 'If that is the case then I think we can simply remove this variable. I was only using it to differentiate between the `Exploration` and `Question`. The validation for the empty rule specs will be common in both. Thanks for the response.', 'comment_created': datetime.datetime(2022, 10, 7, 19, 31, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 990449031, 'comment_body': 'Yes, so @vojtechjelinek suggested using `*` inside the function arguments and for that matter, I have to explicitly pass the values otherwise it will raise the error. Please let me know if it is required to be changed.\r\nThanks', 'comment_created': datetime.datetime(2022, 10, 7, 19, 40, 1, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 990450197, 'comment_body': 'I have removed the part for checking of the training data and it will raise an error when the `rule_specs` will be empty. Please let me know how does the new changes looks to you and I will make the changes asap if needed.\r\nThanks', 'comment_created': datetime.datetime(2022, 10, 7, 19, 41, 54, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 990794450, 'comment_body': 'Not needed, right? (Also, should we rewrite the above message without exp keyword?)', 'comment_created': datetime.datetime(2022, 10, 9, 14, 13, 56, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 990794676, 'comment_body': ""I'm not sure whether we are expecting this check or not but if it's expected than the code is looking good to me!"", 'comment_created': datetime.datetime(2022, 10, 9, 14, 16, 16, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 991052820, 'comment_body': 'I think `*` only enforces that we always use keyword and not that the arg need to be always passed.', 'comment_created': datetime.datetime(2022, 10, 10, 8, 56, 53, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 992561683, 'comment_body': 'Updated', 'comment_created': datetime.datetime(2022, 10, 11, 16, 44, 36, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}]","[{'commit_sha': '3dad0ef69c25761ff022f78eb7a419b6b0f122fa', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2029cac94d18267e36f3d755090e9315914cb56c', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ceb66a6d275633984cdcc965285f8d8d0d588fc9', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f65c90c9e85d444a00d5a464678ed70c77f02cee', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9bf67b19ef944356637f787eba6af9aff4de50f6', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '35febf2e4bb864321ccbca1872ed7540d16746b8', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '30094bbc45e525cea794bb55b23463ba6ecca7c9', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0b3c48c26a78b3a5e5a1f285bc25f33578554752', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0125b41052e9d2eac2a3b84edc8edf5b5ea5d235', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '937714acc1d46c8e6ab3935a33d73ed4258270c1', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd2cc675f6ebc5a44406e4652c052406a05c1ad94', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6734300ca7632eac5114f528d76114eb781b644b', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3ca80653a3af09b03990271024088981bde81c87', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b6fdb5e1683d9c1dce39688e35ccc1a874c630d0', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b8dd5fb28f7c1cccd2c610d97610ae26c344f034', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3cdc67eacdacdf7471decdb0668c11914f915b8f', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8517a924f7dd1eeeb054f8cd257e24963770f395', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '245419c20588d95d5c69d50504dc8be23f7f8089', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9ae19bce600a0b22942c755233c4e5f2cfef3130', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3a83a09f76842e5a5daf308332de06f451f2558a', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fb02b97a2f2c5389e7e8755ecd57d4a4ed677d09', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '981a829b7ba1ceaf1cd73591a9fb643e84b021c1', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8bd306fb2648bb041723ef3ac32e79022abb53ae', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bd45cae72fdfb55714f756c9286b853e96a41ca3', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '37a1db291e82e34e642f0974ee96d5072c2ca7dd', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '62cbd127c335357c6536397133beff17b274c5ee', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c9723809fb1e3430e89c03c7501f63611382dce9', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a27679ee66df412017cc4df11ab1f7ccbfab063b', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fd15626444f5d2b132d0da77ec7bff52c1933aa6', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4314eb6c6917ac027462d32f902dd8b5341ac747', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e08e867bd5cd621c5b2c2d802bad31170fe0d004', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0df4dbbd2301be7cced107c6cb84c9ccbb566a71', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1c9728f196a6e0e592c5b939fb6ee5812203fbb0', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8d7dc0dd81df67e8722acab89cdcdc50bf97605a', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd87f9b04aef8edde1e500b7221f32287c4a72de8', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f506e40d223849757494ff3ed8c082a06664a782', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0307ca85e384dff41545197de9b343f4ad65150b', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '90fc2e9327088b5e0671e095f9c73d3a3aad2e42', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '410a8db45ea0e30d5d7e98918536606385461148', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0d90ecf34e6de68e99d37dd1fdf45df31945c3d2', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1b14d801eb83865e168d68cf054b40ec8517e9d3', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '70588806f769c1e38b1689945d06e1af52c6220a', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '17b1b532a2e38c7dd66eeebf68a6fd94ddabd5fe', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a53d2e4d3e36d53fb81b8097cb42d117566d4d71', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '17b1bb9b484252ee1935a63267b7720c40997e13', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1a74d614d945765bd38a0b023a1c1ee14509c8dd', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0e9f4f5238025cf854a1b42b0190f9793e618783', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aaab52d07a1b5cf8a157f2b05dd9793b64049267', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4162bbda6569c2e1c56283312d55478e11ed4906', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}]",Hitesh Tomar,44300735,,User,,30,,3,13
1007455414,Fix part of #13821: Backend validation for general state interaction.,"## Overview
<!--
READ ME FIRST:
Please answer *both* questions below and check off every point from the Essential Checklist!
If there is no corresponding issue number, fill in N/A where it says [fill_in_number_here] below in 1.
-->

1. This PR fixes or fixes part of #13821.
2. This PR does the following: Adds the backend validation for interaction instance.

## Essential Checklist

- [x] The PR title starts with ""Fix #bugnum: "", followed by a short, clear summary of the changes. (If this PR fixes part of an issue, prefix the title with ""Fix part of #bugnum: ..."".)
- [x] The linter/Karma presubmit checks have passed locally on your machine.
- [x] ""Allow edits from maintainers"" is checked. (See [here](https://help.github.com/en/github/collaborating-with-issues-and-pull-requests/allowing-changes-to-a-pull-request-branch-created-from-a-fork) for instructions on how to enable it.)
  - This lets reviewers restart your CircleCI tests for you.
- [x] The PR is made from a branch that's **not** called ""develop"".

## Proof that changes are correct

<!--
Add videos/screenshots of the user-facing interface to demonstrate that the changes
made in this PR work correctly. If this PR is for a developer-facing feature,
provide the videos/screenshots of developer-facing interface.

Please also include videos/screenshots of the developer tools
browser console, so that we can be sure that there are no console errors.

If the changes in your PRs are autogenerated via a script and you cannot provide proof
for the changes then please leave a comment ""No proof of changes needed because {{Reason}}""
and remove all the sections below.
-->

#### Proof of changes on desktop with slow/throttled network

<!--
Make sure to properly verify that everything works correctly, and that there are
no weird UI mistakes or other problems. Also, if there are any newly added fields,
try to fill them out and test that different inputs are correctly accepted/rejected.

Throttle the network (to 3G) using the browser Developer Tools (see references below).
There should be no performance or UI issues while the network is slow.

References:
 - Chrome: https://css-tricks.com/throttling-the-network/
 - Firefox: https://developer.mozilla.org/en-US/docs/Tools/Network_Monitor/Throttling
-->

#### Proof of changes on mobile phone

<!--
In some cases this is not needed (e.g. for pages that we do not expect to
support mobile phones, or for backend-only features).

Feel free to use the Developer Tools emulator for this.

References:
 - Chrome: https://developer.chrome.com/docs/devtools/device-mode/
 - Firefox: https://firefox-source-docs.mozilla.org/devtools-user/index.html#responsive-design-mode
-->

#### Proof of changes in Arabic language

<!--
If the PR changes the UI, make sure to add screenshots with the site
language set to Arabic as well (we use Arabic as it is a language written from right to left).
-->

## PR Pointers

- Make sure to follow the [instructions for making a code change](https://github.com/oppia/oppia/wiki/Contributing-code-to-Oppia#instructions-for-making-a-code-change).
- If you need a review or an answer to a question, and don't have permissions to assign people, **leave a comment** like the following: ""{{Question/comment}} @{{reviewer_username}} PTAL"". Oppiabot will help assign that person for you.
- For what code owners will expect, see the [Code Owner's wiki page](https://github.com/oppia/oppia/wiki/Oppia%27s-code-owners-and-checks-to-be-carried-out-by-developers).
- Make sure your PR follows conventions in the [style guide](https://github.com/oppia/oppia/wiki/Coding-style-guide), otherwise this will lead to review delays.
- Never force push. If you do, your PR will be closed.
- Some of the e2e tests are flaky, and can fail for reasons unrelated to your PR. We are working on fixing this, but in the meantime, if you need to restart the tests, please check the [""If your build fails"" wiki page](https://github.com/oppia/oppia/wiki/If-your-build-fails).
",True,15797,https://api.github.com/repos/oppia/oppia/pulls/15797,https://github.com/oppia/oppia/pull/15797,closed,2294,5489,44,84,48,316,0,1,[],2022-07-25 15:25:04+00:00,2022-10-14 01:44:48+00:00,6949184.0,"80 days, 10:19:44","[{'comment_id': 929611251, 'comment_body': 'Use `else if`.', 'comment_created': datetime.datetime(2022, 7, 26, 7, 20, 48, tzinfo=datetime.timezone.utc), 'commenter': 'EricZLou', 'type': 'User'}, {'comment_id': 929612361, 'comment_body': ""For private functions that are only called within the class, it's good style for readability to use an underscore like `def _validate_numeric_input(self)`"", 'comment_created': datetime.datetime(2022, 7, 26, 7, 22, 9, tzinfo=datetime.timezone.utc), 'commenter': 'EricZLou', 'type': 'User'}, {'comment_id': 973048079, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 9, 16, 13, 50, 41, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 973048150, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 9, 16, 13, 50, 45, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 973242791, 'comment_body': '... should not have more than 3 recommended explorations.', 'comment_created': datetime.datetime(2022, 9, 16, 17, 30, 44, tzinfo=datetime.timezone.utc), 'commenter': 'EricZLou', 'type': 'User'}, {'comment_id': 973542999, 'comment_body': ""you can remove these one-line comments and the new lines since it's self-explanatory."", 'comment_created': datetime.datetime(2022, 9, 17, 5, 28, 19, tzinfo=datetime.timezone.utc), 'commenter': 'EricZLou', 'type': 'User'}, {'comment_id': 978282961, 'comment_body': ""```suggestion\r\n                    'Exploration in a story having MultipleChoiceInput '\r\n                    'interaction should have at least 4 choices present. '\r\n                    'Exploration with ID %s and state name %s have fewer than'\r\n                    '4 choices.' %(exp.id, state_name)\r\n```"", 'comment_created': datetime.datetime(2022, 9, 23, 5, 45, 38, tzinfo=datetime.timezone.utc), 'commenter': 'EricZLou', 'type': 'User'}, {'comment_id': 978285328, 'comment_body': ""This docstring for `is_enclosed` is not clear enough. What does 'both rule's ranges' mean? Doesn't it return True if `range_compared_with` lies within `range_compare_to`?"", 'comment_created': datetime.datetime(2022, 9, 23, 5, 52, 9, tzinfo=datetime.timezone.utc), 'commenter': 'EricZLou', 'type': 'User'}, {'comment_id': 978285684, 'comment_body': ""this whole function is quite long and difficult to read because the variable name is long i think. Maybe let's call it `base_range` and `test_range`"", 'comment_created': datetime.datetime(2022, 9, 23, 5, 52, 55, tzinfo=datetime.timezone.utc), 'commenter': 'EricZLou', 'type': 'User'}, {'comment_id': 978286093, 'comment_body': 'Compares the rule types of two rule specs to determine whether to check for range enclosure', 'comment_created': datetime.datetime(2022, 9, 23, 5, 53, 59, tzinfo=datetime.timezone.utc), 'commenter': 'EricZLou', 'type': 'User'}, {'comment_id': 978286854, 'comment_body': 'Just wanted to make sure -- is this correct? As long as the earlier rule is anything except `IsExactlyEqualTo`, then we should check the range enclosure? What if it is `IsEquivalentTo`?', 'comment_created': datetime.datetime(2022, 9, 23, 5, 55, 40, tzinfo=datetime.timezone.utc), 'commenter': 'EricZLou', 'type': 'User'}, {'comment_id': 978287143, 'comment_body': ""this function name and docstring should have something about 'fraction'"", 'comment_created': datetime.datetime(2022, 9, 23, 5, 56, 23, tzinfo=datetime.timezone.utc), 'commenter': 'EricZLou', 'type': 'User'}, {'comment_id': 978288295, 'comment_body': ""Please try to remember the previous comments I have made in your audit PRs. You don't need `float(...)` in Python. In Python, the integer `1` is equal to the float `1.0` (for example). So you can remove the `float` cast. Also, you can simplify this and just keep the `else` bloc, right (since wholeNumber will be 0 anyways)."", 'comment_created': datetime.datetime(2022, 9, 23, 5, 58, 59, tzinfo=datetime.timezone.utc), 'commenter': 'EricZLou', 'type': 'User'}, {'comment_id': 978289408, 'comment_body': ""```suggestion\r\n                            f'type \\'equals\\' contains string '\r\n```"", 'comment_created': datetime.datetime(2022, 9, 23, 6, 1, 55, tzinfo=datetime.timezone.utc), 'commenter': 'EricZLou', 'type': 'User'}, {'comment_id': 978290047, 'comment_body': 'new line', 'comment_created': datetime.datetime(2022, 9, 23, 6, 3, 24, tzinfo=datetime.timezone.utc), 'commenter': 'EricZLou', 'type': 'User'}, {'comment_id': 978290133, 'comment_body': 'put is greater than below the is less than part', 'comment_created': datetime.datetime(2022, 9, 23, 6, 3, 39, tzinfo=datetime.timezone.utc), 'commenter': 'EricZLou', 'type': 'User'}, {'comment_id': 978290404, 'comment_body': 'Did we decide that `rule_value_a == rule_value_b` is okay and valid?', 'comment_created': datetime.datetime(2022, 9, 23, 6, 4, 17, tzinfo=datetime.timezone.utc), 'commenter': 'EricZLou', 'type': 'User'}, {'comment_id': 978290997, 'comment_body': ""shouldn't this be wrapped in a `should_check_range_enclosure` function? We don't want this hardcoded to check range enclosure for every rule type by default. If we want it to run for every rule type that we currently have in the codebase, then we should hardcode a list of rule types."", 'comment_created': datetime.datetime(2022, 9, 23, 6, 5, 52, tzinfo=datetime.timezone.utc), 'commenter': 'EricZLou', 'type': 'User'}, {'comment_id': 978291251, 'comment_body': 'new line', 'comment_created': datetime.datetime(2022, 9, 23, 6, 6, 26, tzinfo=datetime.timezone.utc), 'commenter': 'EricZLou', 'type': 'User'}, {'comment_id': 978291760, 'comment_body': ""shouldn't this variable be named `inputs_without_fractions`? The `HasNoFractionalPart` doesn't really fit into the `inputs_with_whole_nums` name"", 'comment_created': datetime.datetime(2022, 9, 23, 6, 7, 42, tzinfo=datetime.timezone.utc), 'commenter': 'EricZLou', 'type': 'User'}, {'comment_id': 978292855, 'comment_body': ""I'm thinking about this again and don't think that denominator < 0 is an issue. Having a negative denominator seems okay to me. The issue is just denominator = 0. Can we change this? Also don't understand why this needs to be wrapped in the `if whole == 0` if you could explain"", 'comment_created': datetime.datetime(2022, 9, 23, 6, 10, 20, tzinfo=datetime.timezone.utc), 'commenter': 'EricZLou', 'type': 'User'}, {'comment_id': 978293301, 'comment_body': 'why are you only doing this check when whole is 0? Can you have a simplest form fraction that has an integer part? ', 'comment_created': datetime.datetime(2022, 9, 23, 6, 11, 23, tzinfo=datetime.timezone.utc), 'commenter': 'EricZLou', 'type': 'User'}, {'comment_id': 978294129, 'comment_body': 'what if the proper form setting is turned on and the integer part is non-zero? What should we do? Is it an error?', 'comment_created': datetime.datetime(2022, 9, 23, 6, 13, 11, tzinfo=datetime.timezone.utc), 'commenter': 'EricZLou', 'type': 'User'}, {'comment_id': 978294731, 'comment_body': 'change this to just = instead of <=', 'comment_created': datetime.datetime(2022, 9, 23, 6, 14, 36, tzinfo=datetime.timezone.utc), 'commenter': 'EricZLou', 'type': 'User'}, {'comment_id': 978295015, 'comment_body': 'new line above', 'comment_created': datetime.datetime(2022, 9, 23, 6, 15, 17, tzinfo=datetime.timezone.utc), 'commenter': 'EricZLou', 'type': 'User'}, {'comment_id': 978295732, 'comment_body': 'Instead of having these boolean flags, just raise the error right away.', 'comment_created': datetime.datetime(2022, 9, 23, 6, 16, 47, tzinfo=datetime.timezone.utc), 'commenter': 'EricZLou', 'type': 'User'}, {'comment_id': 978295916, 'comment_body': 'same', 'comment_created': datetime.datetime(2022, 9, 23, 6, 17, 13, tzinfo=datetime.timezone.utc), 'commenter': 'EricZLou', 'type': 'User'}, {'comment_id': 978296145, 'comment_body': 'same', 'comment_created': datetime.datetime(2022, 9, 23, 6, 17, 45, tzinfo=datetime.timezone.utc), 'commenter': 'EricZLou', 'type': 'User'}, {'comment_id': 978442744, 'comment_body': 'Yes, I did make the changes but the python type checking was failing. So, just to keep everything specific I did this. If you want I can change it back and edit the return type.\r\nThanks', 'comment_created': datetime.datetime(2022, 9, 23, 9, 28, 9, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 978452638, 'comment_body': ""Actually, casting to float is fine here, but do it as float(rule_value_f['numerator'])/denominator -- does that work? All the inputs given are ints and we need to do something somewhere to tell python/mypy to recognize it a float; typically this gets done somewhere in the fraction part.\r\n\r\nI also agree with Eric in terms of removing the if/else.\r\n\r\nAlso, if you have questions about types, @sahiljoster32 might be able to advise you.\r\n\r\n"", 'comment_created': datetime.datetime(2022, 9, 23, 9, 40, 3, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 978455065, 'comment_body': '```suggestion\r\n                allow_null_interaction = not strict,\r\n                validation_from_exploration = True\r\n```', 'comment_created': datetime.datetime(2022, 9, 23, 9, 42, 52, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 978455920, 'comment_body': ""```suggestion\r\n                    'interaction should have at least 4 choices present. '\r\n```"", 'comment_created': datetime.datetime(2022, 9, 23, 9, 44, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 978456821, 'comment_body': ""```suggestion\r\n                    'Exploration with ID %s and state name %s has less'\r\n                    'than 4 choices.' % (exp.id, state_name)\r\n```"", 'comment_created': datetime.datetime(2022, 9, 23, 9, 45, 7, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 978464088, 'comment_body': '```suggestion\r\n        """"""Dictionary representing the range variable for the NumericInput\r\n        interaction.\r\n```', 'comment_created': datetime.datetime(2022, 9, 23, 9, 51, 44, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 978464206, 'comment_body': '```suggestion\r\n        """"""Dictionary representing the matched denominator variable for the\r\n        FractionInput interaction.\r\n```', 'comment_created': datetime.datetime(2022, 9, 23, 9, 51, 54, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 978464744, 'comment_body': '```suggestion\r\n        """"""Validates the following in Continue interaction:\r\n        - Text should be non-empty and have a max-length of 20\r\n        - No answer groups should be present\r\n```\r\n\r\nditto elsewhere', 'comment_created': datetime.datetime(2022, 9, 23, 9, 52, 31, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 978465229, 'comment_body': 'Be specific and list all the possible errors here. You can maybe then omit the list above.', 'comment_created': datetime.datetime(2022, 9, 23, 9, 53, 10, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 978471430, 'comment_body': 'Thanks @seanlip, I will do that.', 'comment_created': datetime.datetime(2022, 9, 23, 10, 1, 9, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 978699406, 'comment_body': '```suggestion\r\n        self, \r\n        earlier_rule: state_domain.RuleSpec,\r\n        later_rule: state_domain.RuleSpec\r\n```', 'comment_created': datetime.datetime(2022, 9, 23, 13, 54, 43, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 978703267, 'comment_body': '```suggestion\r\n    def _set_lower_and_upper_bounds(\r\n        self, \r\n        range_var: RangeVariable, \r\n        lower_bound: float,\r\n        upper_bound: float, \r\n        *,\r\n        lb_inclusive: bool, \r\n        ub_inclusive: bool\r\n```', 'comment_created': datetime.datetime(2022, 9, 23, 13, 58, 31, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 978705073, 'comment_body': '```suggestion\r\n    class RangeVariableDict(TypedDict):\r\n```', 'comment_created': datetime.datetime(2022, 9, 23, 14, 0, 11, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 978705280, 'comment_body': '```suggestion\r\n    class MatchedDenominatorDict(TypedDict):\r\n```', 'comment_created': datetime.datetime(2022, 9, 23, 14, 0, 23, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 978710339, 'comment_body': '```suggestion\r\n            for rule_spec_index, rule_spec in enumerate(\r\n                answer_group.rule_specs\r\n            ):\r\n```', 'comment_created': datetime.datetime(2022, 9, 23, 14, 3, 31, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 978711995, 'comment_body': ""```suggestion\r\n                    if rule_spec.inputs['f'] in number_with_units_rules:\r\n```"", 'comment_created': datetime.datetime(2022, 9, 23, 14, 4, 56, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 978713223, 'comment_body': '```suggestion\r\n            for rule_spec_index, rule_spec in enumerate(\r\n                answer_group.rule_specs\r\n            ):\r\n```', 'comment_created': datetime.datetime(2022, 9, 23, 14, 6, 11, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 978713498, 'comment_body': 'Ditto as above.', 'comment_created': datetime.datetime(2022, 9, 23, 14, 6, 27, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 978713971, 'comment_body': 'Do not use the same variable name, use a different one.', 'comment_created': datetime.datetime(2022, 9, 23, 14, 7, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 978714230, 'comment_body': 'ditto above', 'comment_created': datetime.datetime(2022, 9, 23, 14, 7, 15, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 978716379, 'comment_body': '```suggestion\r\n            for rule_spec_index, rule_spec in enumerate(\r\n                answer_group.rule_specs\r\n            ):\r\n```', 'comment_created': datetime.datetime(2022, 9, 23, 14, 9, 25, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 978718329, 'comment_body': 'Rather `==`, right?', 'comment_created': datetime.datetime(2022, 9, 23, 14, 11, 23, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 978718809, 'comment_body': 'ditto below', 'comment_created': datetime.datetime(2022, 9, 23, 14, 11, 52, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 978721911, 'comment_body': ""```suggestion\r\n            self.customization_args['minAllowableSelectionCount'].value)\r\n        max_value = (\r\n            self.customization_args['maxAllowableSelectionCount'].value)\r\n```"", 'comment_created': datetime.datetime(2022, 9, 23, 14, 15, 3, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 978726868, 'comment_body': ""```suggestion\r\n        choices = self.customization_args['choices'].value\r\n```"", 'comment_created': datetime.datetime(2022, 9, 23, 14, 19, 46, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 978727736, 'comment_body': 'This code is pretty much the same as some of the code above, maybe try to deduplicate?', 'comment_created': datetime.datetime(2022, 9, 23, 14, 20, 37, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 978737248, 'comment_body': 'Can we use dictionary for this?', 'comment_created': datetime.datetime(2022, 9, 23, 14, 29, 19, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 979297273, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 9, 24, 19, 58, 26, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 979297289, 'comment_body': 'Updated', 'comment_created': datetime.datetime(2022, 9, 24, 19, 58, 35, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 979297292, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 9, 24, 19, 58, 38, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 979297299, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 9, 24, 19, 58, 45, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 979297317, 'comment_body': 'No, I have updated this part', 'comment_created': datetime.datetime(2022, 9, 24, 19, 59, 1, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 979297334, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 9, 24, 19, 59, 7, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 979297345, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 9, 24, 19, 59, 13, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 979297350, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 9, 24, 19, 59, 17, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 979297356, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 9, 24, 19, 59, 20, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 979297361, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 9, 24, 19, 59, 24, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 979297369, 'comment_body': 'Nope, I have updated this', 'comment_created': datetime.datetime(2022, 9, 24, 19, 59, 32, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 979297377, 'comment_body': 'Yep! Updated', 'comment_created': datetime.datetime(2022, 9, 24, 19, 59, 39, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 979297395, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 9, 24, 19, 59, 42, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 979297408, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 9, 24, 19, 59, 46, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 979297743, 'comment_body': 'So previously when I checked, if we only enter an whole number value then the numerator and denominator both would be `0` so just to check for the fraction part I did this. I have updated it now though.\r\nRegarding `<0` part - This check is also present in the controller layer stating that the minimum value should be `1` and also present on our [validation sheet](https://docs.google.com/spreadsheets/d/1kNLF-UkS_Qk0igNCGwLjJXM0ByHalqli41GPvWF43PE/edit#gid=290682831). Please let me know if we plan to update this.\r\nThanks for pointing it out', 'comment_created': datetime.datetime(2022, 9, 24, 20, 3, 15, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 979297751, 'comment_body': 'Updated', 'comment_created': datetime.datetime(2022, 9, 24, 20, 3, 21, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 979297770, 'comment_body': 'Yep! error should be raised. I have updated it', 'comment_created': datetime.datetime(2022, 9, 24, 20, 3, 36, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 979297814, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 9, 24, 20, 3, 43, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 979297831, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 9, 24, 20, 3, 46, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 979297837, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 9, 24, 20, 3, 49, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 979297849, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 9, 24, 20, 3, 52, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 979297851, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 9, 24, 20, 3, 54, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 979297854, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 9, 24, 20, 3, 57, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 979297929, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 9, 24, 20, 4, 9, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 979297966, 'comment_body': ""Updated according to Eric's comment"", 'comment_created': datetime.datetime(2022, 9, 24, 20, 4, 24, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 979297972, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 9, 24, 20, 4, 29, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 979297974, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 9, 24, 20, 4, 33, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 979297981, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 9, 24, 20, 4, 38, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 979297995, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 9, 24, 20, 4, 42, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 979298016, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 9, 24, 20, 4, 47, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 979298019, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 9, 24, 20, 4, 51, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 979298021, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 9, 24, 20, 4, 54, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 979298026, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 9, 24, 20, 4, 57, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 979298032, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 9, 24, 20, 5, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 979298042, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 9, 24, 20, 5, 6, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 979298058, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 9, 24, 20, 5, 10, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 979298064, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 9, 24, 20, 5, 17, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 979298072, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 9, 24, 20, 5, 21, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 979298075, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 9, 24, 20, 5, 25, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 979298078, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 9, 24, 20, 5, 29, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 979298082, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 9, 24, 20, 5, 32, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 979298111, 'comment_body': ""I have updated it according to Eric's comment. I think I would not require to create a separate function but please let me know.\r\nThanks"", 'comment_created': datetime.datetime(2022, 9, 24, 20, 6, 13, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 979298136, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 9, 24, 20, 6, 19, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 979314447, 'comment_body': ""I tried creating dictionary but it statrted to misbehave, as if I'm adding `Continue` interaction the validation for `End` interaction is running. So I changed it back.\r\nThanks"", 'comment_created': datetime.datetime(2022, 9, 24, 20, 40, 41, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 979479583, 'comment_body': ""Hm are you confident about the rest of your PR? We definitely don't want to introduce a bunch of bugs in these PRs."", 'comment_created': datetime.datetime(2022, 9, 25, 23, 56, 53, tzinfo=datetime.timezone.utc), 'commenter': 'EricZLou', 'type': 'User'}, {'comment_id': 979479877, 'comment_body': 'Ah I see that makes sense. Thanks for explaining!', 'comment_created': datetime.datetime(2022, 9, 25, 23, 58, 46, tzinfo=datetime.timezone.utc), 'commenter': 'EricZLou', 'type': 'User'}, {'comment_id': 979840247, 'comment_body': 'Yep! We also did a discussion on this particular part and confirmed that the changes are correct.\r\nThanks', 'comment_created': datetime.datetime(2022, 9, 26, 10, 30, 44, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 981535104, 'comment_body': ""Nit:\r\n```suggestion\r\n        exp2_id = '0'\r\n```"", 'comment_created': datetime.datetime(2022, 9, 27, 17, 38, 41, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 981542876, 'comment_body': ""```suggestion\r\n                raise utils.ValidationError(\r\n                    'Exploration in a story having MultipleChoiceInput '\r\n                    'interaction should have at least 4 choices present. '\r\n                    'Exploration with ID %s and state name %s have fewer than'\r\n                    '4 choices.' % (exp.id, state_name)\r\n                )\r\n```"", 'comment_created': datetime.datetime(2022, 9, 27, 17, 46, 44, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 981544613, 'comment_body': 'No, add a separate line for each validation error, like this:\r\n```suggestion\r\n            ValidationError. Text value is empty or is more than 20 characters.\r\n            ValidationError. Answer group is present.\r\n```\r\n\r\nditto elsewhere', 'comment_created': datetime.datetime(2022, 9, 27, 17, 48, 42, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 981545827, 'comment_body': 'Why do we do this? This will ignore the `ValidationError`', 'comment_created': datetime.datetime(2022, 9, 27, 17, 49, 58, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 981549729, 'comment_body': '```suggestion\r\n        upper_bound: float,\r\n        *,\r\n        lb_inclusive: bool,\r\n        ub_inclusive: bool\r\n```', 'comment_created': datetime.datetime(2022, 9, 27, 17, 53, 56, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 981553639, 'comment_body': ""```suggestion\r\n        lb_satisfied = (\r\n            base_range['lower_bound'] < test_range['lower_bound'] or \r\n            (\r\n                base_range['lower_bound'] == test_range['lower_bound'] and\r\n                (not test_range['lb_inclusive'] or base_range['lb_inclusive'])\r\n            )\r\n        )\r\n        ub_satisfied = (\r\n            base_range['upper_bound'] > test_range['upper_bound'] or \r\n            (\r\n                base_range['upper_bound'] == test_range['upper_bound'] and\r\n                (not test_range['ub_inclusive'] or base_range['ub_inclusive'])\r\n            )\r\n        )\r\n```"", 'comment_created': datetime.datetime(2022, 9, 27, 17, 56, 52, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 981554458, 'comment_body': '```suggestion\r\n        return lb_satisfied and ub_satisfied\r\n```', 'comment_created': datetime.datetime(2022, 9, 27, 17, 57, 41, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 981557125, 'comment_body': '```suggestion\r\n        """"""Helper function for NumericInput and FractionInput interaction,\r\n        Sets the lower and upper bounds for the range_var.\r\n```', 'comment_created': datetime.datetime(2022, 9, 27, 18, 0, 39, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 981557734, 'comment_body': '```suggestion\r\n            range_var: RangeVariableDict. Variable used to keep track of each \r\n                range.\r\n```', 'comment_created': datetime.datetime(2022, 9, 27, 18, 1, 20, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 981558677, 'comment_body': '```suggestion\r\n            bool. Returns True when test_range lies within base_range.\r\n```', 'comment_created': datetime.datetime(2022, 9, 27, 18, 2, 20, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 981560558, 'comment_body': 'I think you can commit the ""Helper function for NumericInput and FractionInput interaction"" everywhere it is not really relevant.', 'comment_created': datetime.datetime(2022, 9, 27, 18, 4, 11, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 981562786, 'comment_body': 'From these I\'m not really sure which is whci. Also the ""It keeps track of other rule\'s ans group index, rule spec index, lower bound, upper bound, lb inclusive, ub inclusive."" is not needed.', 'comment_created': datetime.datetime(2022, 9, 27, 18, 5, 4, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 981563624, 'comment_body': '```suggestion\r\n        """"""Returns rule value of the rule_spec of FractionInput interaction so\r\n        that we can keep track of rule\'s range.\r\n\r\n        Args:\r\n            rule_spec: RuleSpec. Rule spec of an answer group.\r\n\r\n        Returns:\r\n            rule_value_f: float. The value of the rule spec.\r\n```', 'comment_created': datetime.datetime(2022, 9, 27, 18, 6, 5, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 981568496, 'comment_body': 'Should all these if be rather elif block?', 'comment_created': datetime.datetime(2022, 9, 27, 18, 11, 42, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 981569470, 'comment_body': 'Can be just one `if`', 'comment_created': datetime.datetime(2022, 9, 27, 18, 13, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 981569622, 'comment_body': 'Can be just one `if`', 'comment_created': datetime.datetime(2022, 9, 27, 18, 13, 12, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 981570019, 'comment_body': 'Can be just one `if`', 'comment_created': datetime.datetime(2022, 9, 27, 18, 13, 37, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 981572040, 'comment_body': ""This would be IMO more readable\r\n```suggestion\r\n                    if not allow_imp_frac and whole != 0:\r\n                        raise utils.ValidationError(\r\n                            f'The rule \\'{rule_spec_index}\\' of '\r\n                            f'answer group \\'{ans_group_index}\\' do '\r\n                            f'not have value in proper fraction '\r\n                            f'in FractionInput interaction.'\r\n                        )\r\n                        \r\n                        if not allow_imp_frac and den <= num:\r\n                            raise utils.ValidationError(\r\n                                f'The rule \\'{rule_spec_index}\\' of answer \r\n                                f'group \\'{ans_group_index}\\' do '\r\n                                f'not have value in proper fraction '\r\n                                f'in FractionInput interaction.'\r\n                            )\r\n```\r\n\r\nyou might also want to reorganize the strings as we moved a bit more to the left"", 'comment_created': datetime.datetime(2022, 9, 27, 18, 16, 4, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 981573598, 'comment_body': 'Can be one `if`.', 'comment_created': datetime.datetime(2022, 9, 27, 18, 17, 48, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 981573991, 'comment_body': 'Can be one `if`', 'comment_created': datetime.datetime(2022, 9, 27, 18, 18, 14, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 981577999, 'comment_body': 'Why do we need the count of wrong positions? Bool would be enough, right?', 'comment_created': datetime.datetime(2022, 9, 27, 18, 22, 50, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 981578172, 'comment_body': ""```suggestion\r\n                    for layer_idx, layer in enumerate(\r\n                        rule_spec.inputs['x']\r\n                    ):\r\n```"", 'comment_created': datetime.datetime(2022, 9, 27, 18, 23, 2, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 981578546, 'comment_body': 'This is a bit useless comment, I think you can remove it.', 'comment_created': datetime.datetime(2022, 9, 27, 18, 23, 28, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 981578780, 'comment_body': '```suggestion\r\n        # All inputs should be non-empty and unique.\r\n```', 'comment_created': datetime.datetime(2022, 9, 27, 18, 23, 46, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 981579895, 'comment_body': '```suggestion\r\n                                if rule_value.startswith(\r\n                                    start_with_rule_string\r\n                                ):\r\n```\r\n\r\nditto elsewhere', 'comment_created': datetime.datetime(2022, 9, 27, 18, 24, 44, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 981580604, 'comment_body': '```suggestion\r\n        self, \r\n        exp_param_specs_dict: Dict[str, param_domain.ParamSpec],\r\n        validation_from_exploration: bool = False\r\n```', 'comment_created': datetime.datetime(2022, 9, 27, 18, 25, 23, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 981581692, 'comment_body': 'Why it started misbehaving?', 'comment_created': datetime.datetime(2022, 9, 27, 18, 26, 25, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 982972737, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 9, 29, 0, 55, 33, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 982972761, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 9, 29, 0, 55, 38, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 982972779, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 9, 29, 0, 55, 43, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 982972812, 'comment_body': 'Updated', 'comment_created': datetime.datetime(2022, 9, 29, 0, 55, 48, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 982973366, 'comment_body': ""Wat should we pass in the parameters while calling this function. It was giving an error regarding passing less arguments while calling the function as I added `*`. I tried searching online but wasn't able to find anything."", 'comment_created': datetime.datetime(2022, 9, 29, 0, 57, 15, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 982973409, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 9, 29, 0, 57, 20, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 982973428, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 9, 29, 0, 57, 24, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 982973458, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 9, 29, 0, 57, 28, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 982973488, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 9, 29, 0, 57, 32, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 982973510, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 9, 29, 0, 57, 35, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 982973526, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 9, 29, 0, 57, 39, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 982973541, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 9, 29, 0, 57, 43, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 982973557, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 9, 29, 0, 57, 47, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 982973596, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 9, 29, 0, 57, 54, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 982973612, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 9, 29, 0, 57, 59, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 982973637, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 9, 29, 0, 58, 3, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 982973655, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 9, 29, 0, 58, 6, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 982973673, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 9, 29, 0, 58, 11, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 982973951, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 9, 29, 0, 59, 5, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 982974030, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 9, 29, 0, 59, 17, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 982974061, 'comment_body': 'Updated', 'comment_created': datetime.datetime(2022, 9, 29, 0, 59, 23, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 982974086, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 9, 29, 0, 59, 27, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 982974106, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 9, 29, 0, 59, 32, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 982974149, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 9, 29, 0, 59, 38, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 982974168, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 9, 29, 0, 59, 41, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 982974197, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 9, 29, 0, 59, 47, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 982974409, 'comment_body': ""Honestly, I'm not sure. I will get back to you on this."", 'comment_created': datetime.datetime(2022, 9, 29, 1, 0, 23, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 983419981, 'comment_body': 'When `*` is added all args after that need to always be added explicitly (e.g. `def a(aaa, bbb, *, ccc)` will need to be called `a(1, 2, ccc=3)`', 'comment_created': datetime.datetime(2022, 9, 29, 11, 24, 12, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 983431871, 'comment_body': 'Move every set of validations into separate test function.', 'comment_created': datetime.datetime(2022, 9, 29, 11, 38, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 983437597, 'comment_body': 'Please add a comment in front of the asserts.', 'comment_created': datetime.datetime(2022, 9, 29, 11, 44, 33, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 983438231, 'comment_body': 'Unneeded comment.', 'comment_created': datetime.datetime(2022, 9, 29, 11, 45, 16, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 983443629, 'comment_body': 'Nit:\r\n```suggestion\r\n            return False\r\n            \r\n        lb_satisfied = (\r\n```', 'comment_created': datetime.datetime(2022, 9, 29, 11, 51, 31, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 983444198, 'comment_body': ""Nit:\r\n```suggestion\r\n            return True\r\n            \r\n        return later_rule.rule_type in (\r\n            'HasDenominatorEqualTo', 'IsLessThan', 'IsGreaterThan'\r\n```"", 'comment_created': datetime.datetime(2022, 9, 29, 11, 52, 12, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 983444360, 'comment_body': '```suggestion\r\n        self, rule_spec: RuleSpec\r\n```', 'comment_created': datetime.datetime(2022, 9, 29, 11, 52, 23, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 983444954, 'comment_body': '```suggestion\r\n        self, earlier_rule: RuleSpec, later_rule: RuleSpec\r\n```', 'comment_created': datetime.datetime(2022, 9, 29, 11, 53, 6, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 983445383, 'comment_body': '```suggestion\r\n        self, test_range: RangeVariableDict, base_range: RangeVariableDict\r\n```', 'comment_created': datetime.datetime(2022, 9, 29, 11, 53, 34, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 983446525, 'comment_body': ""```suggestion\r\n        return (\r\n            rule_value_f['wholeNumber'] +\r\n            float(rule_value_f['numerator']) / rule_value_f['denominator']\r\n        )\r\n```\r\nNot sure if it is possible."", 'comment_created': datetime.datetime(2022, 9, 29, 11, 54, 52, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 983447509, 'comment_body': 'Unneeded comment.', 'comment_created': datetime.datetime(2022, 9, 29, 11, 55, 56, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 983448443, 'comment_body': '```suggestion\r\n                        range_var, \r\n                        rule_value_x - rule_value_tol,\r\n                        rule_value_x + rule_value_tol, \r\n                        lb_inclusive=True, \r\n                        ub_inclusive=True\r\n```', 'comment_created': datetime.datetime(2022, 9, 29, 11, 56, 52, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 983448707, 'comment_body': 'Unneeded comment.', 'comment_created': datetime.datetime(2022, 9, 29, 11, 57, 8, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 983450995, 'comment_body': 'Unneeded comment.', 'comment_created': datetime.datetime(2022, 9, 29, 11, 59, 39, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 983452665, 'comment_body': 'Unneeded comment.', 'comment_created': datetime.datetime(2022, 9, 29, 12, 1, 4, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 983452884, 'comment_body': 'Can be one if.', 'comment_created': datetime.datetime(2022, 9, 29, 12, 1, 19, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 983455245, 'comment_body': '6 are mentioned here but in the function there are 7 errors', 'comment_created': datetime.datetime(2022, 9, 29, 12, 3, 46, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 983456922, 'comment_body': 'Can be one `if`', 'comment_created': datetime.datetime(2022, 9, 29, 12, 5, 37, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 983457728, 'comment_body': 'Not done.', 'comment_created': datetime.datetime(2022, 9, 29, 12, 6, 38, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 983458320, 'comment_body': '```suggestion\r\n            )\r\n\r\n        for ans_group_index, answer_group in enumerate(self.answer_groups):\r\n```', 'comment_created': datetime.datetime(2022, 9, 29, 12, 7, 16, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 983458943, 'comment_body': 'This still seems to be almost the same as in `_validate_multi_choice_input`', 'comment_created': datetime.datetime(2022, 9, 29, 12, 8, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 983459849, 'comment_body': 'Unneeded comment.', 'comment_created': datetime.datetime(2022, 9, 29, 12, 8, 58, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 983460524, 'comment_body': 'Which setting?', 'comment_created': datetime.datetime(2022, 9, 29, 12, 9, 41, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 983460962, 'comment_body': 'Unneeded comment.', 'comment_created': datetime.datetime(2022, 9, 29, 12, 10, 7, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 983463201, 'comment_body': 'This seems a bit confusing, the if checks whether `rule_spec.inputs[\'x\']` is empty, for ""values"" I would expect to check smth like `for input in rule_spec.inputs[\'x\'] if len(input) <= 0`', 'comment_created': datetime.datetime(2022, 9, 29, 12, 12, 28, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 983464248, 'comment_body': ""```suggestion\r\n       \r\n        choices = self.customization_args['choices'].value\r\n        if len(choices) < 2:\r\n```"", 'comment_created': datetime.datetime(2022, 9, 29, 12, 13, 31, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 983464589, 'comment_body': 'Again a duplicate.', 'comment_created': datetime.datetime(2022, 9, 29, 12, 13, 54, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 983468228, 'comment_body': 'Here are 4 errors but in the function there are 7', 'comment_created': datetime.datetime(2022, 9, 29, 12, 16, 29, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 983468705, 'comment_body': ""```suggestion\r\n        \r\n        # Text input height should be >= 1 and <= 10.\r\n        rows_value = self.customization_args['rows'].value\r\n```"", 'comment_created': datetime.datetime(2022, 9, 29, 12, 16, 47, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 983473482, 'comment_body': 'What are the so on types? You can always still use `Union[SubtitledHtmlDict, SubtitledUnicodeDict, ...]`', 'comment_created': datetime.datetime(2022, 9, 29, 12, 21, 54, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 983473683, 'comment_body': '```suggestion\r\n        self,\r\n        exp_param_specs_dict: Dict[str, param_domain.ParamSpec],\r\n        *,\r\n        validation_from_exploration: bool = False\r\n```', 'comment_created': datetime.datetime(2022, 9, 29, 12, 22, 9, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 984078724, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 9, 29, 22, 50, 13, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 984078754, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 9, 29, 22, 50, 17, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 984078782, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 9, 29, 22, 50, 20, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 984078807, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 9, 29, 22, 50, 24, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 984078864, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 9, 29, 22, 50, 28, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 984078889, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 9, 29, 22, 50, 32, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 984078904, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 9, 29, 22, 50, 35, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 984078930, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 9, 29, 22, 50, 38, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 984079114, 'comment_body': 'No, I need to do this for the mypy', 'comment_created': datetime.datetime(2022, 9, 29, 22, 51, 6, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 984079142, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 9, 29, 22, 51, 11, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 984079168, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 9, 29, 22, 51, 15, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 984079188, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 9, 29, 22, 51, 19, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 984079239, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 9, 29, 22, 51, 25, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 984079265, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 9, 29, 22, 51, 29, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 984079289, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 9, 29, 22, 51, 32, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 984079319, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 9, 29, 22, 51, 35, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 984079357, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 9, 29, 22, 51, 39, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 984079389, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 9, 29, 22, 51, 44, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 984079455, 'comment_body': 'Updated', 'comment_created': datetime.datetime(2022, 9, 29, 22, 51, 54, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 984079522, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 9, 29, 22, 52, 2, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 984079548, 'comment_body': 'Updated', 'comment_created': datetime.datetime(2022, 9, 29, 22, 52, 6, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 984079605, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 9, 29, 22, 52, 11, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 984080893, 'comment_body': 'No, actually there were several errors that I received while doing the audit job where the input was completely empty. This could be done when we initialized the drag and drop interaction but leave it as it as without entering anything in GUI. This is fixed in frontend though.', 'comment_created': datetime.datetime(2022, 9, 29, 22, 54, 58, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 984080927, 'comment_body': 'Updated', 'comment_created': datetime.datetime(2022, 9, 29, 22, 55, 4, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 984080952, 'comment_body': 'Updated', 'comment_created': datetime.datetime(2022, 9, 29, 22, 55, 8, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 984080978, 'comment_body': 'Updated', 'comment_created': datetime.datetime(2022, 9, 29, 22, 55, 11, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 984081049, 'comment_body': 'Updated', 'comment_created': datetime.datetime(2022, 9, 29, 22, 55, 16, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 984081066, 'comment_body': 'Updated', 'comment_created': datetime.datetime(2022, 9, 29, 22, 55, 19, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 984081099, 'comment_body': 'Updated', 'comment_created': datetime.datetime(2022, 9, 29, 22, 55, 24, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 984081589, 'comment_body': 'Updated', 'comment_created': datetime.datetime(2022, 9, 29, 22, 56, 36, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 984083438, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 9, 29, 23, 1, 3, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 984083467, 'comment_body': 'Updated', 'comment_created': datetime.datetime(2022, 9, 29, 23, 1, 7, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 984218668, 'comment_body': ""This change is fine, but I'm just curious ... why was it needed?"", 'comment_created': datetime.datetime(2022, 9, 30, 5, 26, 48, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 984218933, 'comment_body': ""Maybe let's just treat this the same as we do '2' -- no use keeping an invalid exploration and turning it into something that doesn't really flow correctly. (I think this one was originally meant to simulate a text adventure game with inventory.)"", 'comment_created': datetime.datetime(2022, 9, 30, 5, 27, 26, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 984219518, 'comment_body': 'These changes seem wrong to me. What was wrong with how it was before? I would still like the demo explorations to make sense.', 'comment_created': datetime.datetime(2022, 9, 30, 5, 28, 54, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 984425189, 'comment_body': 'Then it should rather be \r\n```suggestion\r\n                    # `IsEqualToOrdering` rule should not have empty value.\r\n```\r\n\r\nright?', 'comment_created': datetime.datetime(2022, 9, 30, 9, 55, 51, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 984432131, 'comment_body': 'Why is this done this way? And not by directly doing `test_continue_interaction`? You can prepare the content in `setUp` if needed.', 'comment_created': datetime.datetime(2022, 9, 30, 10, 4, 13, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 984446393, 'comment_body': '```suggestion\r\n        )\r\n        return value\r\n```', 'comment_created': datetime.datetime(2022, 9, 30, 10, 22, 19, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 984450937, 'comment_body': '```suggestion\r\n        self, \r\n        value: Any, \r\n        schema: Dict[\r\n            str, Union[SubtitledHtmlDict, SubtitledUnicodeDict, str]\r\n        ]\r\n```', 'comment_created': datetime.datetime(2022, 9, 30, 10, 28, 33, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 984480703, 'comment_body': 'Yeah, so when the multiple-choice interaction gets initialized it has empty values, and internally when the validation function gets called, it raises an error that the `choices should not be empty` So, just to avoid this completely I changed the interaction.\r\nThanks', 'comment_created': datetime.datetime(2022, 9, 30, 11, 9, 51, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 984481460, 'comment_body': 'Oh, as this was part of the `validate` function I did it like this. If you want I can do it that way.\r\nThanks\r\n', 'comment_created': datetime.datetime(2022, 9, 30, 11, 10, 59, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 984487092, 'comment_body': ""Oh, Actually the last answer group in this interaction was duplicate, I should've just removed it instead of making the changes to the rest of the answer groups. I will update you with the correct changes.\r\nThanks"", 'comment_created': datetime.datetime(2022, 9, 30, 11, 19, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 985076802, 'comment_body': ""There is a separation between interaction and state, the state provides structure to add any interaction, and the interaction layer defines the structure of any specific interaction. I don't think this is maintainable i.e, state explicitly handling/validating different types of interaction. Why can't we have such validations in the Interaction layer i.e, either in interaction_spec.json (As a schema validation for customization arg specs) or inside extensions/interaction/InteractionName/Interaction.py file OR any other way to allow interactions to validate its cust_arg/rule_specs? is there any issue with that? "", 'comment_created': datetime.datetime(2022, 10, 1, 9, 34, 9, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 985138902, 'comment_body': 'Sorry for the late reply @DubeySandeep.\r\nOh yes, you are right. But will it be possible to keep it this way as of now, I will complete this task after my GSoC, as we are planning to complete the migration part soon and along with that we would require the validation? I was also talking about this part with Vojta and he agrees. Please let me know if it will be alright? I will get back to this after the completion of my task.\r\nThanks', 'comment_created': datetime.datetime(2022, 10, 1, 19, 58, 34, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 985150972, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 10, 1, 22, 20, 42, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 985150978, 'comment_body': 'Updated', 'comment_created': datetime.datetime(2022, 10, 1, 22, 20, 55, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 985150994, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 10, 1, 22, 21, 10, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 985151001, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 10, 1, 22, 21, 16, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 985151003, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 10, 1, 22, 21, 20, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 985864637, 'comment_body': 'Unexpected change, remove it.', 'comment_created': datetime.datetime(2022, 10, 3, 14, 35, 23, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 985867016, 'comment_body': '```suggestion\r\n    def test_continue_interaction(self) -> None:\r\n```\r\n\r\nditto elsewhere', 'comment_created': datetime.datetime(2022, 10, 3, 14, 36, 51, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 985868496, 'comment_body': ""```suggestion\r\n                    'content_id': 'feedback_0',\r\n                    'html': '<p>good</p>'\r\n                },\r\n```"", 'comment_created': datetime.datetime(2022, 10, 3, 14, 37, 49, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 985869602, 'comment_body': ""```suggestion\r\n                    'content_id': 'feedback_0',\r\n                    'html': '<p>good</p>'\r\n                },\r\n```\r\n\r\nplease make sure that the dicts are formatted everywhere"", 'comment_created': datetime.datetime(2022, 10, 3, 14, 38, 30, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 985869999, 'comment_body': ""```suggestion\r\n                        'f': {\r\n```"", 'comment_created': datetime.datetime(2022, 10, 3, 14, 38, 46, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 985870641, 'comment_body': ""```suggestion\r\n                'feedback': {\r\n                    'content_id': 'feedback_0',\r\n                    'html': '<p>good</p>'\r\n                },\r\n```"", 'comment_created': datetime.datetime(2022, 10, 3, 14, 39, 13, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 985871688, 'comment_body': ""```suggestion\r\n                        'x': ['ca_choices_0', 'ca_choices_1', 'ca_choices_2']\r\n```"", 'comment_created': datetime.datetime(2022, 10, 3, 14, 39, 54, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 985871875, 'comment_body': 'ditto below', 'comment_created': datetime.datetime(2022, 10, 3, 14, 40, 1, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 985872884, 'comment_body': ""```suggestion\r\n                        'x': {\r\n                            'contentId': 'rule_input_27',\r\n                            'normalizedStrSet': [\r\n                                'hello',\r\n                                'abc',\r\n                                'def'\r\n                            ]\r\n                        }\r\n```\r\n\r\nditto below"", 'comment_created': datetime.datetime(2022, 10, 3, 14, 40, 41, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 985878346, 'comment_body': '```suggestion\r\n                        range_var, \r\n                        rule_value,\r\n                        rule_value, \r\n                        lb_inclusive=True, \r\n                        ub_inclusive=True\r\n```\r\nditto elsewhere', 'comment_created': datetime.datetime(2022, 10, 3, 14, 44, 11, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 985879958, 'comment_body': '```suggestion\r\n                matched_denominator: (\r\n                    InteractionInstance.MatchedDenominatorDict\r\n                ) = {\r\n```', 'comment_created': datetime.datetime(2022, 10, 3, 14, 45, 18, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 985880435, 'comment_body': ""```suggestion\r\n                        rule_spec.rule_type == 'IsExactlyEqualTo' and\r\n                        not allow_non_zero_integ_part and \r\n                        whole != 0\r\n```"", 'comment_created': datetime.datetime(2022, 10, 3, 14, 45, 36, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 985882983, 'comment_body': '```suggestion\r\n                rule_spec_till_now.append(rule_spec.to_dict())\r\n                \r\n                if not multi_item_value and (\r\n```', 'comment_created': datetime.datetime(2022, 10, 3, 14, 47, 18, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 985883298, 'comment_body': '```suggestion\r\n                    )\r\n          \r\n                # Multiple items cannot be in the same place iff the\r\n                # `allow multiple items at same place` setting is turned off.\r\n```', 'comment_created': datetime.datetime(2022, 10, 3, 14, 47, 32, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 985885425, 'comment_body': '```suggestion\r\n        *,\r\n        allow_null_interaction: bool,\r\n        validation_from_exploration: bool = False\r\n```', 'comment_created': datetime.datetime(2022, 10, 3, 14, 48, 49, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 987512471, 'comment_body': ""@DubeySandeep is right, this can't be checked in like this. This is permanent code and if you write it like this here then it's going to just get added on to by other contributors and the codebase will not be maintainable.\r\n\r\nQuestions are relatively recent, so there shouldn't actually be validation errors. Also this is only run on-save, right? So existing questions will still be loadable.\r\n\r\nGiven that, I recommend that you put this code in the proper place (and ditto for any other code that is in the wrong place). Otherwise we are introducing serious maintainability issues to the codebase and that will cause problems in the long run."", 'comment_created': datetime.datetime(2022, 10, 5, 3, 43, 50, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 987514264, 'comment_body': 'Thanks for your thoughts, @seanlip! \r\n\r\n@lkbhitesh07 Let me know if you need any help finding the correct place for these validations and can help you do it quickly!\r\n\r\n', 'comment_created': datetime.datetime(2022, 10, 5, 3, 49, 17, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 988478658, 'comment_body': 'Apologies -- I retract part of my earlier comment.\r\n\r\nThe part about validating state interactions in general, regardless of whether we are doing it with questions or explorations, still stands. I also think that we should rename `interaction_id_to_validation_dict` to `interaction_id_to_validation_func`.\r\n\r\nHowever, the part about putting it in the interaction files is trickier. Conceptually, yes, the code should go in each interaction and ""core"" code shouldn\'t refer to stuff in `extensions`. On the other hand, extensions/interactions is mainly meant to have declarative code -- notice how the interaction classes are all just static objects and there\'s no ""logic"" in the file. This starts breaking down, unfortunately, when you add validations etc., because the code becomes imperative and now the extensions folder needs to start knowing about domain object internal structures and that creates a tight coupling that we don\'t actually want.\r\n\r\nThe issue arises from it being difficult to encode some of these validations in a declarative way (e.g. I\'m not sure all of this can be easily represented in interaction_spec.json). I don\'t think it is feasible to do this in a short time period. Thus, I think that we should leave it as-is for now, but add a TODO/issue to find a way to encode these checks more declaratively.\r\n\r\n@DubeySandeep if you see a declarative way to encode these that I am missing, please say, otherwise I would suggest we go with the above. What do you think?', 'comment_created': datetime.datetime(2022, 10, 6, 1, 39, 1, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 988489271, 'comment_body': ""I took a quick pass and to me, it seems like all the checks can be implemented for different rule_specs but it would require some experience with interaction to correctly do it. In general, I think our interaction extension should allow having validation methods/schema  both in ts/py. \r\n\r\nI'm fine with doing it later (as TODO) but for the customization_args we already have a structure so I would suggest at least following that for the customization args. I'll leave inline comments which can be handled easily."", 'comment_created': datetime.datetime(2022, 10, 6, 2, 8, 44, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 988490653, 'comment_body': 'Can be handled via schema', 'comment_created': datetime.datetime(2022, 10, 6, 2, 12, 34, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 988492932, 'comment_body': 'Can be added via schema!', 'comment_created': datetime.datetime(2022, 10, 6, 2, 18, 52, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 988493842, 'comment_body': 'Can be added via schema!', 'comment_created': datetime.datetime(2022, 10, 6, 2, 21, 37, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 988494669, 'comment_body': 'Can be added via schema!', 'comment_created': datetime.datetime(2022, 10, 6, 2, 24, 3, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 989265313, 'comment_body': 'Hey @DubeySandeep, We already have a schema validation for this part but instead of `atleast 2 length` it is `atleast 1` and have a comment explaining that we need to do it because for the default value we have to put it as empty strings. You can find the comment [here](https://github.com/oppia/oppia/blob/develop/extensions/interactions/DragAndDropSortInput/DragAndDropSortInput.py#L49). What should I do? Do I remove the current validation or not.\r\nThanks', 'comment_created': datetime.datetime(2022, 10, 6, 16, 35, 12, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 989265874, 'comment_body': 'Already have validation in the interaction/TextInput file', 'comment_created': datetime.datetime(2022, 10, 6, 16, 35, 45, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 989267148, 'comment_body': ""I'm a bit confused on how should I handle the validation for the `custom` type objects. Do I have a validation for the complete object and was trying to find out how will the value be passed as."", 'comment_created': datetime.datetime(2022, 10, 6, 16, 37, 7, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 989267849, 'comment_body': 'There will be an issue with the `default_value` as we will introduce the validation for the empty values.', 'comment_created': datetime.datetime(2022, 10, 6, 16, 37, 54, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 989343742, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 10, 6, 18, 5, 24, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 989343797, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 10, 6, 18, 5, 28, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 989343851, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 10, 6, 18, 5, 32, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 989343893, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 10, 6, 18, 5, 36, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 989344019, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 10, 6, 18, 5, 45, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 989344649, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 10, 6, 18, 6, 28, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 989345370, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 10, 6, 18, 7, 22, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 989345517, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 10, 6, 18, 7, 30, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 989345564, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 10, 6, 18, 7, 33, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 989345613, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 10, 6, 18, 7, 37, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 989345654, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 10, 6, 18, 7, 41, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 989345699, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 10, 6, 18, 7, 45, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 989345745, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 10, 6, 18, 7, 49, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 989346204, 'comment_body': 'I have removed `validation_from_exploration` part.', 'comment_created': datetime.datetime(2022, 10, 6, 18, 8, 22, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 989618316, 'comment_body': 'Sorry, can you explain it a bit more?', 'comment_created': datetime.datetime(2022, 10, 7, 2, 0, 9, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 989618429, 'comment_body': 'So we can remove it from here?', 'comment_created': datetime.datetime(2022, 10, 7, 2, 0, 26, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 989621670, 'comment_body': 'Oh Sorry,\r\nWhat I meant was if we introduce a schema validation of not having `empty choices` then the `default_value` will raise an error as in the default value of `MultipleChoice` or `ItemSelection` we introduce empty choice for the starter. More descriptive explanation would be something like this [part](https://github.com/oppia/oppia/blob/develop/extensions/interactions/DragAndDropSortInput/DragAndDropSortInput.py#L49)', 'comment_created': datetime.datetime(2022, 10, 7, 2, 4, 54, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 989623377, 'comment_body': 'Yes! I will do that', 'comment_created': datetime.datetime(2022, 10, 7, 2, 6, 12, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 989624349, 'comment_body': ""nvm, got it! So even if we are adding these validations in the state class the default values are invalid, right? (I think, that's fine i.e, some default values are invalid e.g, content_id of SubtitledHtml object).\r\n\r\n> There will be an issue \r\n\r\nWhat will be the issue? Imean do you see any issue in the frontend?"", 'comment_created': datetime.datetime(2022, 10, 7, 2, 7, 46, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 989625862, 'comment_body': 'Maybe something like this (has_expected_subtitled_content_length(min_length, max_length)): https://github.com/oppia/oppia/blob/953dc2b1d39f604bca41db8540b865140e14a808/extensions/interactions/interaction_specs.json#L446-L449', 'comment_created': datetime.datetime(2022, 10, 7, 2, 11, 51, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 989625908, 'comment_body': ""By issue I meant if we are introducing a validation and default value does not follow that then it will raise the error, right? I'm not completely sure about this if the error will be raised or not, want to confirm this part also with you.\r\nI don't think there will be any issue with the frontend part.\r\n**Edit** Got it, Thanks for the detailed explanation.\r\nThanks\r\n"", 'comment_created': datetime.datetime(2022, 10, 7, 2, 11, 59, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 990184224, 'comment_body': 'I have added the TODO.', 'comment_created': datetime.datetime(2022, 10, 7, 14, 58, 54, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 990279232, 'comment_body': '@lkbhitesh07 Every TODO should have an issue number, and that issue should be described really clearly and in detail.', 'comment_created': datetime.datetime(2022, 10, 7, 16, 31, 8, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 990319766, 'comment_body': "">  I'm not completely sure about this if the error will be raised or not, want to confirm this part also with you.\r\n\r\nI would suggest trying and seeing whether it fails (if it won't take hrs. to test it)!"", 'comment_created': datetime.datetime(2022, 10, 7, 17, 6, 35, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 990515579, 'comment_body': 'Done! It is raising an error.\r\n```\r\nFAIL: test_default_interactions_are_valid (extensions.interactions.base_test.InteractionUnitTests)\r\n----------------------------------------------------------------------\r\nTraceback (most recent call last):\r\n  File ""/home/lkbhitesh07/Desktop/oppia/oppia/extensions/interactions/base_test.py"", line 686, in test_default_interactions_are_valid\r\n    interaction.customization_arg_specs)\r\n  File ""/home/lkbhitesh07/Desktop/oppia/oppia/extensions/interactions/base_test.py"", line 161, in _validate_customization_arg_specs\r\n    ca_spec.default_value, ca_spec.schema))\r\n  File ""/home/lkbhitesh07/Desktop/oppia/oppia/core/schema_utils.py"", line 218, in normalize_against_schema\r\n    ) for item in obj\r\n  File ""/home/lkbhitesh07/Desktop/oppia/oppia/core/schema_utils.py"", line 218, in <listcomp>\r\n    ) for item in obj\r\n  File ""/home/lkbhitesh07/Desktop/oppia/oppia/core/schema_utils.py"", line 295, in normalize_against_schema\r\n    validator[\'id\'], kwargs, normalized_obj))\r\nAssertionError: Validation failed: has_subtitled_html_non_empty ({}) for object {\'content_id\': None, \'html\': \'\'}\r\n\r\n```', 'comment_created': datetime.datetime(2022, 10, 7, 21, 42, 13, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 990515660, 'comment_body': 'Done!', 'comment_created': datetime.datetime(2022, 10, 7, 21, 42, 24, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 990527919, 'comment_body': ""So an existing test is failing, right? (And not the UI/UX)\r\n\r\nConsidering our default value isn't valid for some of the cases and we know it can we do something for default value such that it doesn't fail test. (Maybe have a flag that represents the default value isn't valid?)"", 'comment_created': datetime.datetime(2022, 10, 7, 22, 14, 31, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 990557141, 'comment_body': 'Done!', 'comment_created': datetime.datetime(2022, 10, 8, 0, 3, 59, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 990557161, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 10, 8, 0, 4, 8, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 990557178, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 10, 8, 0, 4, 15, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 990795586, 'comment_body': 'We have moved this check to schema now, right? (or we are still facing any issues?)', 'comment_created': datetime.datetime(2022, 10, 9, 14, 23, 57, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 990795873, 'comment_body': 'Can we change it to 2 now considering we are accepting invalid default values?', 'comment_created': datetime.datetime(2022, 10, 9, 14, 26, 17, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 990796453, 'comment_body': ""Don't we need to passkwargs here?"", 'comment_created': datetime.datetime(2022, 10, 9, 14, 31, 25, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 990797217, 'comment_body': ""Errr... let's not hardcode this. Do it similar to `id` something around:\r\n```                \r\n                kwargs = dict(validator)\r\n                expect_invalid_default_value = kwargs['expect_invalid_default_value']\r\n                del kwargs['id']\r\n                del kwargs['expect_invalid_default_value']\r\n                if (\r\n                    not get_validator(validator['id'])(normalized_obj, **kwargs)\r\n                    and expect_invalid_default_value\r\n                ):\r\n                    raise AssertionError(.....)\r\n```"", 'comment_created': datetime.datetime(2022, 10, 9, 14, 39, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 990797326, 'comment_body': ""Do we really need to pass it till here? (I've left a suggestion above, PTAL!)"", 'comment_created': datetime.datetime(2022, 10, 9, 14, 39, 52, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 990797462, 'comment_body': '`has_unique_subtitled_contents`', 'comment_created': datetime.datetime(2022, 10, 9, 14, 40, 58, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 990797746, 'comment_body': '(not html in the name because we can make it work for all the subtitled contents [HTML, unicode etc.] in future if needed)', 'comment_created': datetime.datetime(2022, 10, 9, 14, 43, 33, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 991311335, 'comment_body': ""```suggestion\r\n                    'ans_group_index': int(ans_group_index),\r\n                    'rule_spec_index': int(rule_spec_index),\r\n                    'denominator': 0\r\n```"", 'comment_created': datetime.datetime(2022, 10, 10, 13, 50, 16, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 991545776, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 10, 10, 18, 23, 2, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 991545873, 'comment_body': 'Updated', 'comment_created': datetime.datetime(2022, 10, 10, 18, 23, 10, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 991545924, 'comment_body': 'Updated', 'comment_created': datetime.datetime(2022, 10, 10, 18, 23, 14, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 991545975, 'comment_body': 'Updated', 'comment_created': datetime.datetime(2022, 10, 10, 18, 23, 18, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 991546047, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 10, 10, 18, 23, 23, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 991546153, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 10, 10, 18, 23, 32, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 991546821, 'comment_body': 'Done, I have updated this part.', 'comment_created': datetime.datetime(2022, 10, 10, 18, 24, 35, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 991794601, 'comment_body': '```suggestion\r\n                if (\r\n                    not validator_func(normalized_obj, **kwargs) and\r\n                    not expect_invalid_default_value\r\n                ):\r\n```', 'comment_created': datetime.datetime(2022, 10, 11, 4, 5, 49, tzinfo=datetime.timezone.utc), 'commenter': 'EricZLou', 'type': 'User'}, {'comment_id': 991794932, 'comment_body': ""```suggestion\r\n        return len(obj['unicode_str']) <= max_value\r\n```"", 'comment_created': datetime.datetime(2022, 10, 11, 4, 6, 49, tzinfo=datetime.timezone.utc), 'commenter': 'EricZLou', 'type': 'User'}, {'comment_id': 991795089, 'comment_body': ""```suggestion\r\n        return obj['html'] not in ('', '<p></p>')\r\n```"", 'comment_created': datetime.datetime(2022, 10, 11, 4, 7, 13, tzinfo=datetime.timezone.utc), 'commenter': 'EricZLou', 'type': 'User'}, {'comment_id': 991797697, 'comment_body': 'Do you need the `bool(...)` wrapper?', 'comment_created': datetime.datetime(2022, 10, 11, 4, 14, 27, tzinfo=datetime.timezone.utc), 'commenter': 'EricZLou', 'type': 'User'}, {'comment_id': 992576382, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 10, 11, 17, 0, 27, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 992576467, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 10, 11, 17, 0, 32, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 992576533, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 10, 11, 17, 0, 37, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 992576607, 'comment_body': 'Updated', 'comment_created': datetime.datetime(2022, 10, 11, 17, 0, 43, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}]","[{'commit_sha': '5f42476bde4695c0c9c90b69496e0a0bf3d797ee', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c9217654f7fb2ae8ee1386ba1d457211e247c96a', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '10e3bd742fca959a98badd5e8150f464b155bc13', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b7bc19ca4dc964ea5cc72d76de8becdebe631b21', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8c8e170b798f665c315a5be737e3e67a13a588c0', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c07768d0af357b284083722ac8109edf5b45988f', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '86c2f30e43b0cb7a7af82ed51b7892415be72733', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '43e4cc573491244ed1310c0294b9a39aaca46c32', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '145babb3b3a287bc3315a3e97f2d4963aa2e6d4c', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ea40dc9f3d623e9e12bbef3254732f691d1266da', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bcb272c7aa88218fe28888c8d4cdc31fbe5083ea', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6652af5ebb8174b1c878094b58cb50f58a56c63b', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dba4e59b6e58bc7fd8e6dec5b483da88609dd196', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '44c3c2dc4f24d29547cc31a0c78637ea8cf1ad8e', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '85ce82cdcdccfbbe583af4a802c42bdb7a8fe20b', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '031c28a1c6045a01dece84ddf758c298f573ce85', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '03fb21a5d6d45da50fdcfd8f9eb6f13486aacfac', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cfddf8c8916574be6163b5e0475b4630608a8df6', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5221fd588af5123360507b894e6607b0d28b2d9d', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c8e44c2dcc6e5b7bfe29a000498c5e5beb474c03', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ef84691411659129c77c26d12f3b158d6c6f2ed3', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7ad6f340c123337a547f7a02caaddd2b54031b42', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f639dba6ae320d906c2e4c7dad505416cdb481d0', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aacd2c2853dafe0b9fe6fb281f9132dc16242533', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8ca6f660cb73d031a2a5e335105671260b1cfaf4', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ef4523c4f578340f81d7fb6c296ff628588b5361', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f8b45ad8b6fcbd68486d766a11b6b24fed35adb4', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f7a0ec5786fab2c0d7ba02691c1a9295b8ddc27c', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2e78e34de6a4d4702efc4214777159afb000b93c', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9bcdfc626c673665da909860b73d6e5f2b90e033', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ca97eb48ba58ca25b727502fcdc2b7977395f862', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a4573bb225c4f533d0f1905e7d1510793a516821', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6dbe058c5f6d3a585fdd0f77ac3139ea9bc90aed', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e6fdba369d1e7bab845cb87c2f442e8e934d42b0', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e918c348fd415cc845416826b419fd543f3cb57f', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c312ab1c1a0f764ea1789221a16d237d5f1e23e7', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f069079e9bf954094209111000db8e7c69b4cbf2', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1b7f075473740478848fcf969cbb71513b3b2adb', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '35902dd4eed19eec42693e47797f39bb99001e62', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f0057efafef1f045ce9931e6a2aa8a4a23fc10ef', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '584879001723667eb6b404c41340c4481c29d3b0', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '382d9a7ade5898f7303c4cf5e041cfb3f318b8e9', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fee8d993add7efc9cd4fad07a59955a5af72c38f', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7d4334be380810f24bd5a072a193b169d3256de0', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ff9f1e2910f2df6e09a6b8cf3492cc7b9161d1e9', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8711f4830cf849570b58a4caf3992928789ab370', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '28d0c6909a91ff540879fcd07cf75139ea99a3cd', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4e7c1b573e0f472966f7973abe327d22cf051954', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ef3011bcb43448666e02988e3e73c194b87d2fb7', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '792af28eec1774f6942bb720f27da56e44f3bd74', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ff31c7c1640b3002ed24aa7db43b583ba634563c', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '409437e41418b1be80ac7dbdb62398842476a20f', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '43d01034581ad7c6642bc2596e87d5fed6c93e3f', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f1c15b50c426b7ef88132ff16df1478b733f328a', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '44bdd7357227ebc329dca597fcb43a818f3b6380', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '78d8d719a64e994242d162c37200c5907b7b8aef', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '07630851b845c5c283ca66fb6bdf6cd62807d03f', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6dcf45693d2b31010a09f6f3e0447c7b47f46872', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ce46aa98cd08b33dfaed33ed4b6b8433572bbfe6', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5c2d4b38a31eaf67d59c7cc415c90bd45ab74465', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd24a07b5aa6cc92bbf6b096ed597ac13781206cc', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4914135286bbe4f0ec6b3948f9f401028c2960bf', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7f30845e1293725693d101693f97f607debdebb2', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f9181e57b3bf67f5cb029b78917e3ac9b2a92545', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '94340f61a219400f280c24492a46b122e25f04f4', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0b87ca31eef10970b01433d6a6be846ce555c769', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '53d8de1795dcc7b3f0e9aa346bab34c1aef0e479', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4ca7232a56d57e9ac553cec7e8932b2e407a5142', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ef44ecd178d032e2a50d4937c1826a7d364104b3', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bc535c325e69c12cbafd3167f8a381debf1378cf', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c9e583eb89d91dbb74c580b9ff754bbccc9e9a61', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0f59e581d2cc9b15db5fca548f8c7e4519dd6269', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1f80369005355c8ccf3b3f4f10cd0131261ad98b', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '965abf45df1ca4409d41623e4b6a62447933ae4d', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fe2ca347f46ec8b7105ff60a7ec984a84ff76c14', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '425ce7bc706f70bf192d41cb2abbaaabacf8cc97', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '877d0e814c9ddfb665ca75a494e0e861dbf29ec0', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4f11e60a85f3a3b2a3789d18496711a88314daba', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fe2f0342ca010eac13f3c3b8ff9bc5c5f32137d5', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c2ac114c76b56f622e7e1cef4111e9df78c4a1dd', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '78b241577d8c2359230b37090c05af6e926b0f7c', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '82dbda85f80a177a2974198f32602791760607ab', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5271a4d2a0f5ce0763bc563162c388ed181430e4', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3e2d7aee05864b9087eae5da9df6231f16e4ad3b', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}]",Hitesh Tomar,44300735,,User,,30,,3,13
1058875721,Fix part of #13820: Adds backend validation for RTE content and translations of exploration state,"## Overview
<!--
READ ME FIRST:
Please answer *both* questions below and check off every point from the Essential Checklist!
If there is no corresponding issue number, fill in N/A where it says [fill_in_number_here] below in 1.
-->

1. This PR fixes or fixes part of #13820 .
2. This PR does the following: This PR adds backend validation for RTE content and translations of exploration state.

## Essential Checklist

- [x] The PR title starts with ""Fix #bugnum: "", followed by a short, clear summary of the changes. (If this PR fixes part of an issue, prefix the title with ""Fix part of #bugnum: ..."".)
- [x] The linter/Karma presubmit checks have passed locally on your machine.
- [x] ""Allow edits from maintainers"" is checked. (See [here](https://help.github.com/en/github/collaborating-with-issues-and-pull-requests/allowing-changes-to-a-pull-request-branch-created-from-a-fork) for instructions on how to enable it.)
  - This lets reviewers restart your CircleCI tests for you.
- [x] The PR is made from a branch that's **not** called ""develop"".

## Proof that changes are correct

<!--
Add videos/screenshots of the user-facing interface to demonstrate that the changes
made in this PR work correctly. If this PR is for a developer-facing feature,
provide the videos/screenshots of developer-facing interface.

Please also include videos/screenshots of the developer tools
browser console, so that we can be sure that there are no console errors.

If the changes in your PRs are autogenerated via a script and you cannot provide proof
for the changes then please leave a comment ""No proof of changes needed because {{Reason}}""
and remove all the sections below.
-->

#### Proof of changes on desktop with slow/throttled network

<!--
Make sure to properly verify that everything works correctly, and that there are
no weird UI mistakes or other problems. Also, if there are any newly added fields,
try to fill them out and test that different inputs are correctly accepted/rejected.

Throttle the network (to 3G) using the browser Developer Tools (see references below).
There should be no performance or UI issues while the network is slow.

References:
 - Chrome: https://css-tricks.com/throttling-the-network/
 - Firefox: https://developer.mozilla.org/en-US/docs/Tools/Network_Monitor/Throttling
-->

#### Proof of changes on mobile phone

<!--
In some cases this is not needed (e.g. for pages that we do not expect to
support mobile phones, or for backend-only features).

Feel free to use the Developer Tools emulator for this.

References:
 - Chrome: https://developer.chrome.com/docs/devtools/device-mode/
 - Firefox: https://firefox-source-docs.mozilla.org/devtools-user/index.html#responsive-design-mode
-->

#### Proof of changes in Arabic language

<!--
If the PR changes the UI, make sure to add screenshots with the site
language set to Arabic as well (we use Arabic as it is a language written from right to left).
-->

## PR Pointers

- Make sure to follow the [instructions for making a code change](https://github.com/oppia/oppia/wiki/Make-a-pull-request).
- If you need a review or an answer to a question, and don't have permissions to assign people, **leave a comment** like the following: ""{{Question/comment}} @{{reviewer_username}} PTAL"". Oppiabot will help assign that person for you.
- For what code owners will expect, see the [Code Owner's wiki page](https://github.com/oppia/oppia/wiki/Oppia's-code-owners-and-checks-to-be-carried-out-by-developers).
- Make sure your PR follows conventions in the [style guide](https://github.com/oppia/oppia/wiki/Coding-style-guide), otherwise this will lead to review delays.
- Never force push. If you do, your PR will be closed.
- Some of the e2e tests are flaky, and can fail for reasons unrelated to your PR. We are working on fixing this, but in the meantime, if you need to restart the tests, please check the [""If your build fails"" wiki page](https://github.com/oppia/oppia/wiki/If-CI-checks-fail-on-your-PR).
",True,16065,https://api.github.com/repos/oppia/oppia/pulls/16065,https://github.com/oppia/oppia/pull/16065,closed,1098,218,19,63,47,135,1,1,[{'name': 'PR: LGTM'}],2022-09-16 17:28:11+00:00,2022-10-13 19:53:30+00:00,2341519.0,"27 days, 2:25:19","[{'comment_id': 973542542, 'comment_body': 'do not put new line between if and else', 'comment_created': datetime.datetime(2022, 9, 17, 5, 23, 17, tzinfo=datetime.timezone.utc), 'commenter': 'EricZLou', 'type': 'User'}, {'comment_id': 973542618, 'comment_body': 'also, you can remove the `else` line. If it enters inside the `if` condition, it will raise an error and not continue anyways. So, you can cut down on some of your indentation and make it easier to read.', 'comment_created': datetime.datetime(2022, 9, 17, 5, 24, 14, tzinfo=datetime.timezone.utc), 'commenter': 'EricZLou', 'type': 'User'}, {'comment_id': 973589494, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 9, 17, 14, 2, 58, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 973612957, 'comment_body': ""Wasn't there also the 'cannot be http link' validation? What list of validations are you referencing for this PR? I have a feeling you aren't looking at the right list."", 'comment_created': datetime.datetime(2022, 9, 17, 18, 6, 33, tzinfo=datetime.timezone.utc), 'commenter': 'EricZLou', 'type': 'User'}, {'comment_id': 973613099, 'comment_body': 'you use these 4 ""empty strings"" in a few places. Can you just declare it as a variable once and then reuse it', 'comment_created': datetime.datetime(2022, 9, 17, 18, 8, 5, tzinfo=datetime.timezone.utc), 'commenter': 'EricZLou', 'type': 'User'}, {'comment_id': 973613150, 'comment_body': 'remove newlines between the if statements. ', 'comment_created': datetime.datetime(2022, 9, 17, 18, 8, 27, tzinfo=datetime.timezone.utc), 'commenter': 'EricZLou', 'type': 'User'}, {'comment_id': 973613278, 'comment_body': ""This will work most of the time, but not all the time. You're comparing two strings here (which is okay in most cases). You should compare float values instead."", 'comment_created': datetime.datetime(2022, 9, 17, 18, 10, 12, tzinfo=datetime.timezone.utc), 'commenter': 'EricZLou', 'type': 'User'}, {'comment_id': 973613532, 'comment_body': ""This try except block is not correct. If the code reaches line 2210 and raises an error, then it will enter the `except Exception` block at line 2218 and raise that error instead of the one at 2210. Just check if 'tabs_contents-with-value' is in 'tag' first."", 'comment_created': datetime.datetime(2022, 9, 17, 18, 12, 22, tzinfo=datetime.timezone.utc), 'commenter': 'EricZLou', 'type': 'User'}, {'comment_id': 973618343, 'comment_body': ""This one check will be done by @Lawful2002, you can take a look at his PR [here](https://github.com/oppia/oppia/pull/15955). I'm following [this](https://docs.google.com/spreadsheets/d/1kbjCeADo0VuP7ezSt84NOguA-z9tPJ2IokGGZuh1-Ts/edit?usp=sharing) list that I created for M1, I think now all checks are covered."", 'comment_created': datetime.datetime(2022, 9, 17, 19, 8, 22, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 973618350, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 9, 17, 19, 8, 26, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 973618352, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 9, 17, 19, 8, 29, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 973618359, 'comment_body': 'Updated', 'comment_created': datetime.datetime(2022, 9, 17, 19, 8, 34, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 973618371, 'comment_body': 'Right, updated!', 'comment_created': datetime.datetime(2022, 9, 17, 19, 8, 41, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 979367928, 'comment_body': 'Every docstring should end with a period.', 'comment_created': datetime.datetime(2022, 9, 25, 7, 29, 9, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 979367986, 'comment_body': ""It's not clear to me why this is being returned, given the name of the function. It sounds like the function takes a dict and validates it; why is it also converting the dict to a domain object in that case?"", 'comment_created': datetime.datetime(2022, 9, 25, 7, 29, 49, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 979368065, 'comment_body': 'What is the point of this statement if the result is not assigned to anything?\r\n\r\nIf this is just for validation purposes, a comment would be useful here.', 'comment_created': datetime.datetime(2022, 9, 25, 7, 30, 22, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 979368150, 'comment_body': 'valid_exp_change_commands or allowed_exp_change_commands (to prevent readers thinking that this relates to the dict that is being passed in)', 'comment_created': datetime.datetime(2022, 9, 25, 7, 31, 10, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 979368448, 'comment_body': 'This is wrong, it suggests that the attribute value is a number. It should instead be: ""The length of the ... attribute value should be at least 5 characters.""', 'comment_created': datetime.datetime(2022, 9, 25, 7, 33, 8, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 979368526, 'comment_body': ""Same note as above.\r\n\r\nAlso, these tests seem rather light for the added code. Aren't there other failure cases (e.g. validation issues when converting to domain objects)? Think of all the possible behaviours that you want the function to fulfill, and write a test for each of them."", 'comment_created': datetime.datetime(2022, 9, 25, 7, 34, 2, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 979387669, 'comment_body': 'Yeah, For validating the object, previously we were using `object_class` and in the schema utils file it was simply getting converted to the domain object and then pass on further. When I added the `validation_method` key for further validation, I have to return the domain object from validation function as `schema_utils` file simply pass on the result that it gets from the validation function. The reason why it needs to get converted to domain object is because all the further implementation of this handler is based on the domain object not the dictionary. I will update the function name.\r\nThanks for pointing it out\r\nHitesh', 'comment_created': datetime.datetime(2022, 9, 25, 10, 27, 14, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 979391660, 'comment_body': 'Thanks for pointing it out, you are correct. I have added the case for invalid `cmd`. I think now every scenario is taken care of. Please let me know in case I missed something. Also wanted to confirm that, the new changes are the one when you mentioned `validation issues when converting to domain objects`, right?\r\nThanks', 'comment_created': datetime.datetime(2022, 9, 25, 11, 6, 12, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 979391675, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 9, 25, 11, 6, 15, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 979391686, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 9, 25, 11, 6, 19, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 979391891, 'comment_body': ""Yes you are correct it is for the validation. According to the new code we won't be requiring this part as we are returning the domain object that will automatically call the `validation` method. So I have removed the initialization part.\r\nThanks"", 'comment_created': datetime.datetime(2022, 9, 25, 11, 7, 57, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 979391917, 'comment_body': 'Done, sorry about that.\r\nThanks\r\n', 'comment_created': datetime.datetime(2022, 9, 25, 11, 8, 9, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 979551367, 'comment_body': ""Why are there 2 possibilities for this validation? When does it have `'&quot;'` and when does it not have it?"", 'comment_created': datetime.datetime(2022, 9, 26, 4, 29, 53, tzinfo=datetime.timezone.utc), 'commenter': 'EricZLou', 'type': 'User'}, {'comment_id': 979578651, 'comment_body': ""I don't see a change to the function name (per [this comment](https://github.com/oppia/oppia/pull/16065#discussion_r979367986))?"", 'comment_created': datetime.datetime(2022, 9, 26, 5, 43, 53, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 979578925, 'comment_body': 'Why is this test deleted?', 'comment_created': datetime.datetime(2022, 9, 26, 5, 44, 39, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 979579976, 'comment_body': ""Re [this comment](https://github.com/oppia/oppia/pull/16065#discussion_r979391660):\r\n\r\n> Also wanted to confirm that, the new changes are the one when you mentioned validation issues when converting to domain objects, right?\r\n\r\nNo, not quite. It looks like your function is still returning something but I'm not seeing checks that the returned value is correct, or that it detects errors within the sub-domain objects like WrittenTranslation."", 'comment_created': datetime.datetime(2022, 9, 26, 5, 47, 9, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 979857878, 'comment_body': 'This test actually should return `None` when the math tag is invalid. This was failing as the invalid math tag was resulting in validation error and when I converted it to valid math tag then the test was not returning `None` as the tag is valid now. So @vojtechjelinek suggested that we can remove this particular test.\r\nThanks', 'comment_created': datetime.datetime(2022, 9, 26, 10, 51, 57, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 979860600, 'comment_body': 'To pass the tests present inside our codebase. In some places we use something like - `alt-with-value=""image""` and at some places we use `alt-with-value=""&quot;image&quot;""`(this is the correct one). So just to avoid them I have added this check too so that I don\'t mess up with the original test.\r\nThanks', 'comment_created': datetime.datetime(2022, 9, 26, 10, 55, 13, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 979861049, 'comment_body': 'Also, in case you missed my comment [here](https://github.com/oppia/oppia/pull/16065#issuecomment-1257090080). Thanks', 'comment_created': datetime.datetime(2022, 9, 26, 10, 55, 49, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 980043354, 'comment_body': ""@lkbhitesh07 Did you tried swapping the validation function so that it didn't fail and we could properly test this?"", 'comment_created': datetime.datetime(2022, 9, 26, 13, 33, 17, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 980058007, 'comment_body': 'Should unit tests be added for these? Or moved from some other file?', 'comment_created': datetime.datetime(2022, 9, 26, 13, 46, 9, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 980556902, 'comment_body': ""I have updated the name, though I'm not sure if it seems okay. Please let me know if I have to change.\r\nThanks"", 'comment_created': datetime.datetime(2022, 9, 26, 22, 31, 20, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 980557143, 'comment_body': 'Yep! I forgot about that part. Edited now, the tests are passing.\r\nThanks', 'comment_created': datetime.datetime(2022, 9, 26, 22, 31, 50, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 980557819, 'comment_body': 'I see. Though I have a test which raises an error if we enter invalid values inside translations. Also added the test to check for the returned value. Please let me know if it sounds good.\r\nThanks', 'comment_created': datetime.datetime(2022, 9, 26, 22, 33, 2, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 980558962, 'comment_body': 'I was not able to find them but I have created new unit tests and added them.\r\nThanks', 'comment_created': datetime.datetime(2022, 9, 26, 22, 33, 25, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 980573507, 'comment_body': 'How about get_exp_change_from_dict() and have this function throw an error if the input is invalid?\r\n\r\nAlso the docstring says ""change list"" whereas the function name is ""change dict"", which is it?', 'comment_created': datetime.datetime(2022, 9, 26, 22, 44, 37, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 980573685, 'comment_body': 'This docstring is incomplete.', 'comment_created': datetime.datetime(2022, 9, 26, 22, 45, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 980573884, 'comment_body': '""is present"" is duplicated?', 'comment_created': datetime.datetime(2022, 9, 26, 22, 45, 22, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 980574513, 'comment_body': 'Technically you should generate the domain object, and then check its fields one by one.', 'comment_created': datetime.datetime(2022, 9, 26, 22, 46, 45, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 980575208, 'comment_body': 'I see, thanks for the info. I will update it.', 'comment_created': datetime.datetime(2022, 9, 26, 22, 48, 22, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 980611221, 'comment_body': 'I have updated the name and the docstring. I already have a check for the invalid `cmd` part and the test regarding it. I think I will not be able to check for the other fields inside the change dict as the requirements for each of the field is different.\r\nThanks', 'comment_created': datetime.datetime(2022, 9, 27, 0, 5, 29, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 980611264, 'comment_body': 'Updated', 'comment_created': datetime.datetime(2022, 9, 27, 0, 5, 34, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 980611340, 'comment_body': 'Thanks for pointing it out. Updated', 'comment_created': datetime.datetime(2022, 9, 27, 0, 5, 47, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 980611378, 'comment_body': 'I have updated this part.', 'comment_created': datetime.datetime(2022, 9, 27, 0, 5, 55, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 980663109, 'comment_body': ""Expected objects should be created without any logic. So, in this case, just make a completely new object from scratch, or alternatively do something like `self.assertEqual('...', returned_domain_obj.cmd)` where the '...' is hardcoded."", 'comment_created': datetime.datetime(2022, 9, 27, 2, 9, 12, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 980976191, 'comment_body': 'Instead of ""isinstance"" should we use the data_format field to check the kind of translation? ', 'comment_created': datetime.datetime(2022, 9, 27, 9, 5, 45, tzinfo=datetime.timezone.utc), 'commenter': 'kevintab95', 'type': 'User'}, {'comment_id': 980978310, 'comment_body': 'Is it possible that translations can be unicode strings and not necessarily HTML strings? In that case, do we still have to validate tags?', 'comment_created': datetime.datetime(2022, 9, 27, 9, 7, 48, tzinfo=datetime.timezone.utc), 'commenter': 'kevintab95', 'type': 'User'}, {'comment_id': 980979216, 'comment_body': 'Better to explictily check the format of the translation and handle it accordingly rather than have a default case like this.', 'comment_created': datetime.datetime(2022, 9, 27, 9, 8, 40, tzinfo=datetime.timezone.utc), 'commenter': 'kevintab95', 'type': 'User'}, {'comment_id': 980982688, 'comment_body': 'Should this go in html_validation_service considering this is not tied to State domain objects?', 'comment_created': datetime.datetime(2022, 9, 27, 9, 11, 50, tzinfo=datetime.timezone.utc), 'commenter': 'kevintab95', 'type': 'User'}, {'comment_id': 980983160, 'comment_body': 'Ditto: Should we put this in a service?', 'comment_created': datetime.datetime(2022, 9, 27, 9, 12, 18, tzinfo=datetime.timezone.utc), 'commenter': 'kevintab95', 'type': 'User'}, {'comment_id': 981586915, 'comment_body': 'Hm I feel like this is not correct. Can you create an image and add an `alt-with-value` of `hello` versus an `alt-with-value` of `""hello""` and see what the difference is? We need to make sure that when the user enters a quotation mark as part of the alt caption, we aren\'t treating it as special (it should still just be a single character). And when you get the result of that, feel free to fix this if needed and update me!', 'comment_created': datetime.datetime(2022, 9, 27, 18, 32, 33, tzinfo=datetime.timezone.utc), 'commenter': 'EricZLou', 'type': 'User'}, {'comment_id': 981821514, 'comment_body': ""The `data_format` field will always be of type `str` and here I'm using `isinstance` because the translation can be an `str` or `List[str]` as per the type annotations in the `init` function. So I think we can't really check the type from `data_format`.\r\nThanks"", 'comment_created': datetime.datetime(2022, 9, 27, 23, 57, 16, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 981822917, 'comment_body': ""I'm not completely sure about this particular part. Also, I'm curious on how we can detect if the incoming data is unicode or HTML. And I don't think that we can validate unicode strings\r\n**EDIT** - After taking a look at the codebase and this function [here](https://github.com/oppia/oppia/blob/develop/core/domain/state_domain.py#L2361), we only save the data when it is of type `html`.\r\nThanks"", 'comment_created': datetime.datetime(2022, 9, 28, 0, 1, 3, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 981823988, 'comment_body': 'I\'m sorry, I didn\'t fully understand this part. According to me the data that we can receive in translation can be of this type -\r\n```\r\n""<p>Content</p>"" or [""<p>Content1</p>"", ""<p>Content2</p>""]\r\n```\r\nDo you mean that I should use `isinstance` here?', 'comment_created': datetime.datetime(2022, 9, 28, 0, 3, 46, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 981824056, 'comment_body': 'Okay I will update that.', 'comment_created': datetime.datetime(2022, 9, 28, 0, 3, 57, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 981824120, 'comment_body': 'I will update this part', 'comment_created': datetime.datetime(2022, 9, 28, 0, 4, 7, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 981830081, 'comment_body': 'Oh, I remember I will not be able to import these functions from the html_validation_service file because it will give me this listing error `Importing file named ""*_service*"" from module ""core.domain*"" in module ""*core.domain.*_domain"" is prohibited.`\r\nThanks', 'comment_created': datetime.datetime(2022, 9, 28, 0, 19, 16, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 981842882, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 9, 28, 0, 51, 14, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 982218314, 'comment_body': 'To clarify, I meant, can we use the value of data_format to determine what is the format of translation (e.g. HTML, unicode, set_of_normalized_string) instead of using ""isinstance""?', 'comment_created': datetime.datetime(2022, 9, 28, 10, 15, 36, tzinfo=datetime.timezone.utc), 'commenter': 'kevintab95', 'type': 'User'}, {'comment_id': 982225955, 'comment_body': 'That is not true, we store different formats of translations (see ""DATA_FORMAT_TO_TRANSLATABLE_OBJ_TYPE"" and related constants in this class.)\r\n\r\nThe function in the previous comment points to a method that runs a conversion function on all HTML content in WrittenTranslations -- it does not imply that all translations stored are of HTML type.', 'comment_created': datetime.datetime(2022, 9, 28, 10, 24, 13, tzinfo=datetime.timezone.utc), 'commenter': 'kevintab95', 'type': 'User'}, {'comment_id': 982232333, 'comment_body': 'See my comment above regarding use of data_format to determine the structure of translation and then handle the translation accordingly. We shoud avoid the scenario where we ""default case"" a validation -- this can lead to unexpected errors. It is harder to maintain too e.g. consider a scenario where we add support for a new data format of translations and this if-else block is not updated.', 'comment_created': datetime.datetime(2022, 9, 28, 10, 31, 32, tzinfo=datetime.timezone.utc), 'commenter': 'kevintab95', 'type': 'User'}, {'comment_id': 982246083, 'comment_body': 'Ah, I see. In that case, can we move it inside html_cleaner -- I see we have ""get_rte_components"" there which is related to RTE.', 'comment_created': datetime.datetime(2022, 9, 28, 10, 46, 54, tzinfo=datetime.timezone.utc), 'commenter': 'kevintab95', 'type': 'User'}, {'comment_id': 982800005, 'comment_body': 'Yep! You were right, that code wouldn\'t work properly when we have value with `""""`. I have updated the code now and have tested it with various values. Please let me know if any further changes are required. Just to give some context, when we have value like `""image""` then we will receive `\\""&amp;quot;\\\\&amp;quot;image\\\\&amp;quot;&amp;quot;\\` in backend and if we have a simple value like `image` then we will get `\\""&amp;quot;image&amp;quot;\\`. According to my  new code we will be able to get the exact value and test it.\r\nThanks', 'comment_created': datetime.datetime(2022, 9, 28, 19, 46, 25, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 982824566, 'comment_body': 'This is your new code:\r\n```\r\nalt_value = utils.unescape_html(\r\n  tag[\'alt-with-value\']\r\n)[1:-1].replace(\'\\\\""\', \'\')\r\n```\r\n\r\nLet\'s say you have `image` as the alt text. Here, the `tag` variable then has value `\\""&amp;quot;image&amp;quot;\\`. After calling `unescape_html` on it, you get `\\""&quot;image&quot;\\`. Then you do `[1:-1]` to get `""&quot;image&quot;` and `replace` does nothing. But that doesn\'t end up at `image` like it should.\r\n\r\nLook at how the RTE tags are converted from the backend storage `\\""&amp;quot;image&amp;quot;\\` all the way to the frontend UI `image`. You just need to duplicate that code to get the right string.', 'comment_created': datetime.datetime(2022, 9, 28, 20, 17, 55, tzinfo=datetime.timezone.utc), 'commenter': 'EricZLou', 'type': 'User'}, {'comment_id': 982829608, 'comment_body': 'Oh, that is not the case here. When we call `unescape_html` we will get `""image""` instead of `\\""&quot;image&quot;\\` because firstly `&amp` will be converted to `&` and then `&quot;` will be converted to `""`\r\n**EDIT** Forgot to mention about the `replace` part, it is specifically for the type `""image""` so that we can avoid the `\\""` thing and if don\'t have it then replace will do nothing.', 'comment_created': datetime.datetime(2022, 9, 28, 20, 24, 33, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 982944487, 'comment_body': 'Oh, I see. Sorry I was thinking something else. Thanks for clearing it up. I have updated the code.\r\nThanks', 'comment_created': datetime.datetime(2022, 9, 28, 23, 41, 26, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 982944720, 'comment_body': 'Thank you so much for the info, I get it now. Thanks. I have updated the code', 'comment_created': datetime.datetime(2022, 9, 28, 23, 41, 58, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 982945815, 'comment_body': 'Thanks, I understand it now. This part will only run when the type will be `html` but I would still need to check if the incoming data is coming in a list format or just str, right? Does the current sounds good, please let me know if I have to change something.\r\n**EDIT** - I will be rasing an error if the incoming type of HTML data will be a list. I had a talk with Vojta and he suggested that we should raise an error when the incoming data is in a form of list.', 'comment_created': datetime.datetime(2022, 9, 28, 23, 44, 59, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 982945867, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 9, 28, 23, 45, 4, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 982945889, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 9, 28, 23, 45, 8, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 982967691, 'comment_body': 'Ah I see -- thanks for the clarification!', 'comment_created': datetime.datetime(2022, 9, 29, 0, 41, 59, tzinfo=datetime.timezone.utc), 'commenter': 'EricZLou', 'type': 'User'}, {'comment_id': 983379531, 'comment_body': 'The comments are not needed.', 'comment_created': datetime.datetime(2022, 9, 29, 10, 42, 39, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 983381645, 'comment_body': 'Can fit one line, ditto above.', 'comment_created': datetime.datetime(2022, 9, 29, 10, 45, 6, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 983381961, 'comment_body': ""```suggestion\r\n            Exception, \r\n            'The length of the image tag \\'alt-with-value\\' '\r\n            'attribute value should be at least 5 characters.'\r\n```"", 'comment_created': datetime.datetime(2022, 9, 29, 10, 45, 28, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 983382812, 'comment_body': ""```suggestion\r\n            Exception, \r\n            'The length of the image tag \\'alt-with-value\\' '\r\n            'attribute value should be at least 5 characters.'\r\n```"", 'comment_created': datetime.datetime(2022, 9, 29, 10, 46, 23, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 983383659, 'comment_body': 'Add typing info.', 'comment_created': datetime.datetime(2022, 9, 29, 10, 47, 21, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 983386735, 'comment_body': ""```suggestion\r\n            if (\r\n                exp_change_dict['property_name'] == \r\n                exp_domain.STATE_PROPERTY_CONTENT\r\n            ):\r\n```"", 'comment_created': datetime.datetime(2022, 9, 29, 10, 50, 33, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 983387667, 'comment_body': ""or\r\n```suggestion\r\n            if exp_change_dict['property_name'] == (\r\n                exp_domain.STATE_PROPERTY_CONTENT\r\n            ):\r\n```"", 'comment_created': datetime.datetime(2022, 9, 29, 10, 51, 35, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 983388078, 'comment_body': '```suggestion\r\n                    for language_code_to_written_translation in (\r\n                        translations.values()\r\n                    ):\r\n```', 'comment_created': datetime.datetime(2022, 9, 29, 10, 52, 3, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 983389739, 'comment_body': '```suggestion\r\n                        for written_translation in (\r\n                            language_code_to_written_translation.values()\r\n                        ):\r\n```', 'comment_created': datetime.datetime(2022, 9, 29, 10, 53, 53, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 983394388, 'comment_body': 'Please add a space in between every test case.', 'comment_created': datetime.datetime(2022, 9, 29, 10, 59, 15, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 983395053, 'comment_body': 'And maybe split different tags (image, video, etc.) into separate test functions.', 'comment_created': datetime.datetime(2022, 9, 29, 10, 59, 55, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 983403069, 'comment_body': 'Please use empty lines in this function in some organized way. I think that each error (and its logic) should be enclosed by empty lines. For example:\r\n```\r\na = xxx\r\nb = yyy\r\nif a == b:\r\n    raise Err\r\n\r\nif xxx.c > 1:\r\n    raise Err\r\n\r\nif yyy.z == yyy.y:\r\n   raise Err\r\n```\r\n', 'comment_created': datetime.datetime(2022, 9, 29, 11, 8, 2, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 983404240, 'comment_body': 'Should we add every possible instance of the error?', 'comment_created': datetime.datetime(2022, 9, 29, 11, 8, 50, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 983405108, 'comment_body': 'ditto as above', 'comment_created': datetime.datetime(2022, 9, 29, 11, 9, 28, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 983407145, 'comment_body': 'Again, use spaces more sensibly.', 'comment_created': datetime.datetime(2022, 9, 29, 11, 10, 50, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 984557870, 'comment_body': 'Updated', 'comment_created': datetime.datetime(2022, 9, 30, 12, 49, 17, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 984557918, 'comment_body': 'Updated', 'comment_created': datetime.datetime(2022, 9, 30, 12, 49, 21, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 984557979, 'comment_body': 'Updated', 'comment_created': datetime.datetime(2022, 9, 30, 12, 49, 25, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 984558040, 'comment_body': 'Updated', 'comment_created': datetime.datetime(2022, 9, 30, 12, 49, 30, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 984558104, 'comment_body': 'Updated', 'comment_created': datetime.datetime(2022, 9, 30, 12, 49, 36, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 984558195, 'comment_body': 'Updated', 'comment_created': datetime.datetime(2022, 9, 30, 12, 49, 41, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 984558240, 'comment_body': 'Updated', 'comment_created': datetime.datetime(2022, 9, 30, 12, 49, 45, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 984558298, 'comment_body': 'Updated', 'comment_created': datetime.datetime(2022, 9, 30, 12, 49, 49, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 984558348, 'comment_body': 'Updated', 'comment_created': datetime.datetime(2022, 9, 30, 12, 49, 53, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 984558413, 'comment_body': 'Updated', 'comment_created': datetime.datetime(2022, 9, 30, 12, 49, 57, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 984558492, 'comment_body': 'Updated', 'comment_created': datetime.datetime(2022, 9, 30, 12, 50, 2, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 984558583, 'comment_body': 'Updated', 'comment_created': datetime.datetime(2022, 9, 30, 12, 50, 8, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 984560500, 'comment_body': 'Updated', 'comment_created': datetime.datetime(2022, 9, 30, 12, 52, 23, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 985025443, 'comment_body': ""This changes the e2e test to expect an auto-playing video, but we don't change the video creation code. Why does this work?"", 'comment_created': datetime.datetime(2022, 10, 1, 2, 23, 2, tzinfo=datetime.timezone.utc), 'commenter': 'U8NWXD', 'type': 'User'}, {'comment_id': 985264564, 'comment_body': 'I somehow missed this comment, sorry about that. Yes you are correct, I have updated this part.\r\nThanks', 'comment_created': datetime.datetime(2022, 10, 2, 16, 36, 10, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 986906317, 'comment_body': 'These three can be parametrized and put into a function, then you can reuse the function in a few places.', 'comment_created': datetime.datetime(2022, 10, 4, 14, 0, 16, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 986976495, 'comment_body': ""```suggestion\r\n                svg_filename = json.loads(utils.unescape_html(\r\n                        math_tag['svg_filename-with-value']))\r\n```"", 'comment_created': datetime.datetime(2022, 10, 4, 14, 53, 15, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 986978218, 'comment_body': 'Can this be parametrized and put into a function.', 'comment_created': datetime.datetime(2022, 10, 4, 14, 54, 20, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 986981733, 'comment_body': 'Can this be put into a constant and used everywhere instead of redefining it?', 'comment_created': datetime.datetime(2022, 10, 4, 14, 56, 29, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 989326066, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 10, 6, 17, 45, 11, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 989326120, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 10, 6, 17, 45, 14, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 989326189, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 10, 6, 17, 45, 19, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 989326253, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 10, 6, 17, 45, 24, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 990036367, 'comment_body': 'Why cannot you just add `EMPTY_VALUES = xxx` to the top of the file.', 'comment_created': datetime.datetime(2022, 10, 7, 12, 33, 20, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 990070496, 'comment_body': '```suggestion\r\n        caption_value = utils.unescape_html(\r\n            tag[\'caption-with-value\'])[1:-1].replace(\'\\\\""\', \'\')\r\n```', 'comment_created': datetime.datetime(2022, 10, 7, 13, 8, 22, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 990072092, 'comment_body': 'again do `if not: raise` instead of `else: raise`.', 'comment_created': datetime.datetime(2022, 10, 7, 13, 10, 6, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 990072303, 'comment_body': 'Can be parametrized?', 'comment_created': datetime.datetime(2022, 10, 7, 13, 10, 17, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 990072498, 'comment_body': 'Same as above.', 'comment_created': datetime.datetime(2022, 10, 7, 13, 10, 27, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 990072962, 'comment_body': 'do `if not xxx: raise` instead of `else: raise`', 'comment_created': datetime.datetime(2022, 10, 7, 13, 10, 53, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 990073099, 'comment_body': 'ditto elsewhere', 'comment_created': datetime.datetime(2022, 10, 7, 13, 11, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 990074173, 'comment_body': ""You always call this with `empty_values` so that doesn't need to be a param."", 'comment_created': datetime.datetime(2022, 10, 7, 13, 12, 2, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 990794453, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 10, 9, 14, 13, 59, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 990794457, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 10, 9, 14, 14, 3, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 990794462, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 10, 9, 14, 14, 6, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 990794465, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 10, 9, 14, 14, 10, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 990794469, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 10, 9, 14, 14, 13, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 990794474, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 10, 9, 14, 14, 16, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 990794477, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 10, 9, 14, 14, 19, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 991315289, 'comment_body': 'Not done.', 'comment_created': datetime.datetime(2022, 10, 10, 13, 52, 31, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 991801749, 'comment_body': '```suggestion\r\ndef _raise_validation_errors_for_empty_tabs_content(\r\n```', 'comment_created': datetime.datetime(2022, 10, 11, 4, 25, 33, tzinfo=datetime.timezone.utc), 'commenter': 'EricZLou', 'type': 'User'}, {'comment_id': 991804020, 'comment_body': 'Will put up a PR soon to fix this boolean checkbox -- if `true` is causing test errors, you will be able to change it back to `false` once my PR is merged. Otherwise can leave it as `true`', 'comment_created': datetime.datetime(2022, 10, 11, 4, 31, 26, tzinfo=datetime.timezone.utc), 'commenter': 'EricZLou', 'type': 'User'}, {'comment_id': 992560578, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 10, 11, 16, 43, 20, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 992560651, 'comment_body': 'Sure, thanks', 'comment_created': datetime.datetime(2022, 10, 11, 16, 43, 26, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 992561230, 'comment_body': 'Done, I missed that accidentally.\r\nThanks', 'comment_created': datetime.datetime(2022, 10, 11, 16, 44, 5, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 993167687, 'comment_body': 'cc @U8NWXD ', 'comment_created': datetime.datetime(2022, 10, 12, 8, 44, 9, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 993728473, 'comment_body': 'PR is here: https://github.com/oppia/oppia/pull/16271', 'comment_created': datetime.datetime(2022, 10, 12, 17, 26, 46, tzinfo=datetime.timezone.utc), 'commenter': 'EricZLou', 'type': 'User'}]","[{'commit_sha': '5f00122bcf38b0ab866ae552307487b0e7009771', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '09031f95e17ee4fc6397e44e02a43fbc885dddf7', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '91454519d81e97c3813b958c4059367cd69fe7b2', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e27e1f48018468f69cbfdc9253afda57afbafecc', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5bb9a3ad8564ad73a88a76558ee73610d699420f', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c55e9452f0ad909384ac297809cc7ff3296ebcfa', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f953a9245f38234fbb165e4f0fdd71ad0983c1ce', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5431e57d6c287c78eeb2fa0446e062aa0f719ea5', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dda5a9845bd3eac39ed48c767202d14540cf8e2b', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2651235ac3acfd48c2fff0db73882659e4d83c88', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e6c37e1ffb60859e7bb1fb0676b0b21858b21f1e', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7c63bb94918164405251fa5ad47b14cfd004e2bc', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '61a87a5b23a0dcb034116033da74ae4595fa7a85', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '57a125b1d9af3f644d903aef6953b8c632cfd6af', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f3bfc1723a17fcb3b2fb5649a2a5b1f8a48e765f', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd4ddde65049e3faf51bcd9e7e68c36c4a805b1b6', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e58102735f81a7a027a204b21c950bc5da0811f9', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2eb4b6fe6545cd295e8dcaab040d1faa48aa2d68', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'abe5b9c1296de953e4e5c7bf23380aff0b46db15', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7f7c20b8094010768e6ec5b25c2064ed54b6aea1', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a5b6a69562f284aefca2c410061a5c7bbb5b2d82', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3500b161cfb0e19dd0e33f60e762792088eae325', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd7da57870407defd160c14d82634d966f5ad61f6', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c92afe536df295900cadd23f10c0ce2f0f609290', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6a1805eb196b719baef61e73f4417ce0ba4048f5', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7cba54ccf16c93aba6f73700c0d12ff4ecf74098', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fef29bc7a06dace64b5c166ba4de11a34d087de7', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1163d3a04e1e03423e90f1c3ae56bdf4be22945d', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f5e88598deaa6840c0752b8b20e048d156e050be', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '356e13a8102cca8dc71d0794bfc6be485d3062ea', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f12c2e964410362ec8d8716622c3ed38b6925de1', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'efab23c46702d539b9c609dda628c4de3786fb64', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'de252af156eed42b5b9bafe0f7c5a24823d91e78', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0d7775db2f2e45322f5ecc211b358322dc8037c5', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b31e4b8bec8c3402f1ec551d185466087cecec0f', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '80c995e1d93669791314c02fedc1f168d5dc0aa1', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '07772e98483951a62ba01eba074d8dc80ede490d', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2d3380bd895a33bd1c55193525b6676136b417f9', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bc159e92c499dbc54efbdb4af7b91e432b646cb1', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ae6c9a73e1ecd741dd07b8755e44f8909459e0a5', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '525ee537b67aa255bb798070b578b62f4ec4f6c2', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5ab9182c8b12433a1bdc3c4a855a57bbcf1e5033', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '46b01e273d5d6de4f016ac677e6e1755ba833d7c', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a469931f0129903f3c9afa960c370fc28c208c47', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '26c533b9963df531d4fb3153c1e806ab6341ea46', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ad31a819ed32c4fdc85116868ba13856aa1779c4', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1a6d5c58a57384b292619109687614fcc8130bac', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3f5d279cff75edcaec09022ab894b68f630fa9d0', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e23b7f4bf22d88f4db593fd97cf40c2f35b83d8b', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '007e3c269bc0711873b674fb938349783977b22d', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '980e79b999e05ed0c877c13df8f3f449aeaa58fc', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f081e31158614d54ec4d6ee4af07fa27f0f1151c', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '09f44b02033c8e5de110bbc1c5f7364943fe3400', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f38e8a80dc898b5097bbaab91ca094aecedab038', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ce6e96de818a2a230c399f775139816ec151cbbe', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1c287884abdb6682e4a835773daddffe89a95ff8', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '75a4d00427a246c7eae078cf03e16c84d88fd59a', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '90c2aa7f1a0034be71dfa5b11d47b6b2767ec5fb', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd1b134999804a80b68e12d59e8c57bb431680af9', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0ece3872fdc5fd8a8929a04b689aaf41fe7b4e43', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b3d18807fb4f099c68b6cd4c2b6814f7b32e4a05', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '39edd469d31b8c979c364a8736776ce662aa7fc5', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7f242e4fd1982827cbd31f1d68e5f2711529fb0f', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}]",Hitesh Tomar,44300735,,User,,30,,3,13
1106026943,Move some backend validations to execute in strict mode only.,"## Overview
<!--
READ ME FIRST:
Please answer *both* questions below and check off every point from the Essential Checklist!
If there is no corresponding issue number, fill in N/A where it says [fill_in_number_here] below in 1.
-->

1. This PR fixes or fixes part of N/A.
2. This PR does the following: We decided to move some of the backend validation that was applied for the `state` to the strict mode as we want them to only execute for the public explorations.


## Essential Checklist

- [ ] The PR title starts with ""Fix #bugnum: "", followed by a short, clear summary of the changes. (If this PR fixes part of an issue, prefix the title with ""Fix part of #bugnum: ..."".)
- [x] The linter/Karma presubmit checks have passed locally on your machine.
- [x] ""Allow edits from maintainers"" is checked. (See [here](https://help.github.com/en/github/collaborating-with-issues-and-pull-requests/allowing-changes-to-a-pull-request-branch-created-from-a-fork) for instructions on how to enable it.)
  - This lets reviewers restart your CircleCI tests for you.
- [x] The PR is made from a branch that's **not** called ""develop"".

## Proof that changes are correct

<!--
Add videos/screenshots of the user-facing interface to demonstrate that the changes
made in this PR work correctly. If this PR is for a developer-facing feature,
provide the videos/screenshots of developer-facing interface.

Please also include videos/screenshots of the developer tools
browser console, so that we can be sure that there are no console errors.

If the changes in your PRs are autogenerated via a script and you cannot provide proof
for the changes then please leave a comment ""No proof of changes needed because {{Reason}}""
and remove all the sections below.
-->

#### Proof of changes on desktop with slow/throttled network

<!--
Make sure to properly verify that everything works correctly, and that there are
no weird UI mistakes or other problems. Also, if there are any newly added fields,
try to fill them out and test that different inputs are correctly accepted/rejected.

Throttle the network (to 3G) using the browser Developer Tools (see references below).
There should be no performance or UI issues while the network is slow.

References:
 - Chrome: https://css-tricks.com/throttling-the-network/
 - Firefox: https://developer.mozilla.org/en-US/docs/Tools/Network_Monitor/Throttling
-->

#### Proof of changes on mobile phone

<!--
In some cases this is not needed (e.g. for pages that we do not expect to
support mobile phones, or for backend-only features).

Feel free to use the Developer Tools emulator for this.

References:
 - Chrome: https://developer.chrome.com/docs/devtools/device-mode/
 - Firefox: https://firefox-source-docs.mozilla.org/devtools-user/index.html#responsive-design-mode
-->

#### Proof of changes in Arabic language

<!--
If the PR changes the UI, make sure to add screenshots with the site
language set to Arabic as well (we use Arabic as it is a language written from right to left).
-->

## PR Pointers

- Make sure to follow the [instructions for making a code change](https://github.com/oppia/oppia/wiki/Make-a-pull-request).
- If you need a review or an answer to a question, and don't have permissions to assign people, **leave a comment** like the following: ""{{Question/comment}} @{{reviewer_username}} PTAL"". Oppiabot will help assign that person for you.
- For what code owners will expect, see the [Code Owner's wiki page](https://github.com/oppia/oppia/wiki/Oppia's-code-owners-and-checks-to-be-carried-out-by-developers).
- Make sure your PR follows conventions in the [style guide](https://github.com/oppia/oppia/wiki/Coding-style-guide), otherwise this will lead to review delays.
- Never force push. If you do, your PR will be closed.
- Some of the e2e tests are flaky, and can fail for reasons unrelated to your PR. We are working on fixing this, but in the meantime, if you need to restart the tests, please check the [""If your build fails"" wiki page](https://github.com/oppia/oppia/wiki/If-CI-checks-fail-on-your-PR).
",True,16457,https://api.github.com/repos/oppia/oppia/pulls/16457,https://github.com/oppia/oppia/pull/16457,closed,396,180,6,228,7,8,0,1,[],2022-10-31 23:09:06+00:00,2022-11-05 18:02:22+00:00,413596.0,"4 days, 18:53:16","[{'comment_id': 1010296577, 'comment_body': 'Should we group the strict rules together under one `if strict:` block? ', 'comment_created': datetime.datetime(2022, 11, 1, 10, 36, 36, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1010301063, 'comment_body': 'The `allow_null_interaction` seems to be the opposite of `strict`, should we just get rid of it and only use `strict`.', 'comment_created': datetime.datetime(2022, 11, 1, 10, 42, 50, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1010301897, 'comment_body': 'Ditto in all other functions.', 'comment_created': datetime.datetime(2022, 11, 1, 10, 44, 1, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1013426697, 'comment_body': 'Adding a note to self, Add backend validation for the below scenario:\r\nNeed to check if the HasElementXAtPositionY inside the DragAndDrop interaction has valid position. Need to be applied for the strict exps. Consider the scenario - Equals rule having all the options at position 1 and we have HasElementXAtPositionY rule having Y as value 3. Now the HasElementXAtPositionY is invalid and it will never going to match.', 'comment_created': datetime.datetime(2022, 11, 3, 21, 48, 7, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 1014274148, 'comment_body': 'This can be done in a PR later.', 'comment_created': datetime.datetime(2022, 11, 4, 17, 6, 35, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1014438331, 'comment_body': 'Hey!\r\nDoing this part is resulting in various validation errors in exp_domain_test file, because all the exps created for testing are suppose to be unpublish so if call instead of doing `tagged_skill_misconception_id_required=True` -> `strict=True`, then all those validations are going to run for the strict mode and we are getting lots of error.', 'comment_created': datetime.datetime(2022, 11, 4, 20, 24, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 1014542978, 'comment_body': 'Done!', 'comment_created': datetime.datetime(2022, 11, 5, 1, 21, 40, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 1014671189, 'comment_body': 'Sorry not sure what you mean exactly. But fine to do in a later PR.', 'comment_created': datetime.datetime(2022, 11, 5, 17, 50, 36, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}]","[{'commit_sha': 'e63892c824b787bceb4d1688d3f0e41e3d8f1d11', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '10c90f62615ff915a8fcb4200997eb236216f87c', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '112d290c0ff6299098d72b2bbef9abfac863c3c2', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fdd7502780eac2ddfafe18db75db34897d857f7e', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a1c80d8bc3453105f48bc52c9be10f9a01d44c0e', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '285301d4fbf5e91b3e119f11144c563ab2357301', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b568875065ede2a2b8e0dcbcd5680c5e058cf45b', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'efcac798919798864ecf87799dde64c2e9427809', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a7a99e707d0144ee1b684867646a23c4ff4cc77f', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b0d15504ef352591e86149f2951314a3850f6771', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f91d021437f3e72ca8957df81abfd03300619f2a', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '59773802fa350264d8bd77b3911b8352a21c2068', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '45a612bc376a52674b05221c2298390fab91e948', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '31885af792c3fb6738deb245230dddd390ca6900', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2fc53a1aa35a45f26a3159e824f3e12124917c8a', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '16d47029108af4b32bdf26426b1b1d8db112d22d', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8b281a478f3a9a32fbd31becd161ef3a8575a438', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'eb108cd31ff66e9951a1e1df89b359df7ff5fb6e', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1536d21334df34fd6146023c417f37a438c4bdd1', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7e7207f5852f04588f660c2bbbeae03e07042c83', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '38da6152324ad130abfac553ede3bf5bf56e56de', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ef509e9eca6e6a27cfdcc8cf735c84765799b891', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '45ac85641911872eb9a988891f1ad4776ab75822', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6157b274854ff3c0decb059caf40c9fab1d8205e', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '61098123f7bb85f2deb893b463c472e15fb58a6c', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b416c3aedf1af9bb698f693c4e42ab054b1b08dc', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b929a251aa6a160a2b4954a0b0e840a8ff1f8b63', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e1ec6bdd4a0dea63ad9d5e39b36cc1fe517534c0', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bada1bb2837842db643cd9a75578173c022b4411', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'be0dbade24f9f118c7d9aa77e93217cbdf7779f8', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '96fdd2fd8a032bb37d9c9839371cb982eb420c8b', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd9e3fa5923d4adc657f24e3d52c49c770191756f', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6a3cab25bb9a121db64ea0c9177d3fd351b896fc', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'da5adc8066963fc0cfc3c8918006990a15fbb22f', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b640a14ca847a5b024909e876bf4b2b434e32ca1', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1c727e9ac1ab400902a2d824565f4a134ff9a18e', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '712c57708ef3733505103c15f031808f2f31e1f3', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b3a2752c5cd9ad95b5b5382bf0adcc49f7ca4be6', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8c64e7f9bdc5e8c54891be3c709cdd875c813a73', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ebbd87486f3673a126a9d5704c66b3349437f080', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '49abdf1c4549dad970f9d4b5eeda79457329180e', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cb7942fe196ba5aa10047e9969cac73f676dfc64', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f8cde4a41e0ba6c4f163da53f72ffb4896474b6d', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b5694c6088a57c9f8639035a0be941bd02617ba7', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2d0665c9dd0964d7b361d8df6143323e9a43a16a', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0dac73890597734805a6cf0079c33ad4d00afd51', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a9d90e4c21c59484b2c6d1cf609ac3f592fe9a43', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a2b0169ed23197e6290421772c34f03d42c78cbd', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f7d594014efe5faa201522c47479ce180f06d3d2', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e42ca42f53cf51443f467c1dd1afa1de40b2d4be', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '93ded23855249add8e78d0a2d15940309f0ca935', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4c222a000cc83a35cf981b8eda5f203da605a610', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '94fcb01efaf59d5de7ea01e005dfc86bd7534955', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '51bd27894f15e1e54b9abb7359919e40b2b6628e', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a0e69cec1de5dd2ea080fc6069d1d7271f65621c', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6f92fff4e3c72b1b56f5f7902e4f7ec814f37bbd', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '083215d7d7db5314da40dac0c61c2ac6793904e8', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a3d9b74782505c86c3a714bcbc7ae46df1158349', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a52ad6303d0e3b4b0405f2607933f36f6fcc8edd', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6d01a9ca7b9ee14ad9e073ddd13d6a4387c78d45', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fa2932834edaa7c3c0817afedd1b0a139a990540', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0a65af6cd6a4d00f88762a2f05fd23222d98b497', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8d51078eda184d5282d3d2e5ab22cb7b32cfadd1', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1f67a9b24d7644fcf4009b53701e7e71dedcfcec', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a9107e1b3c065169525e2e6d26c31e5020da59bd', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd93298833927be8bf6c2f45aed746081fb87a797', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c879d30703ab72c860d2cd6307b55d84a913c849', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '734851c560f41f6cc21f430ce31cde3fdc5dd031', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2bfacec3794a6a9d20cdd474e0b8329745982ed2', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd4cba23d698d18a4e1dcee610fbbf5abb630fb3d', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '21b17f5b51f4864bd8f040fd5f8b27432f4d1a00', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2f9b1d38416b8c0b45ef270cf4a53560ef7b3919', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '741acd4ea923e09166dca37f46524e54fadb7e9a', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9f89bf274c599f54ea6a48ceb2b02a7b5f8e6b4e', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1c56b94c7fa08cc71dee87e16a114012cde31b03', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '81c4f436ff703187d7e3b6e28d0ad9b09fd7679e', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fd9a425ae9bd494c5bc688ced2a7a3fc42d93d2c', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '16562f186c9a0cc4afcf8a4cc577bbad18ce7c06', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '090fcfb7218e04d54ae9221a5d8ca0d16ed92735', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1d41fba4e5208052ed50df30041af9db9706877f', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '09501083e1ec9dc5b775474ea75f3c29af93739b', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '19c3315ecd7dc1a8788caa8848e82a73693c5dfb', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2bfe0e8143a3d6c87d80ba942292d2606ee62877', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6984657e8e31dee6367174f4b7810b6bfc15d46f', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'af2e8c3490748f345437e4fbfd44c094d459b155', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0735ec53c925902a80834d9cd5f4d74bdd31d2b4', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '125033dc158526e9ef4097cda3e7f28e5b1bd554', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f949add82fca61b353bac6bf90005a12faeb0ffc', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd1e6bbac4a041e7078ec0ff9257a0e24105c43c5', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5e9de63ed6dbaee03c499bdf1652850e7930dd08', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '27cc9d7762680b77aec78ee4be1eda31fa881084', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2eebf96fd3a051ee9fb7bb2e51759d744bbaf52f', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e1eedad38e3f0440a03a4b7970eadb8190160672', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8014bbe7ad244e5cfbc8cfcc16fd0f0f69a0120c', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b3a91a2972304c96ebc8adefb556b43828d72e54', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd9bb5b25654e10a98f2a88e20512c2f8793d7a5a', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f2accbd228b4461dc88fc0938b80fd0ddaa674d3', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e840ced2930772dff16583b26b22a29b933accea', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8c21dbddb1eee581ba0b79a277a4b5a91aa5b66f', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6d3079c64adffa9c068ad1b7dd62b050f6dbe20a', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '51e5c9151d7ec0ee5016c36303d82c9b5e730caf', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '734d25bd5d7a979810f06872f86f26f5ef1b597f', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '856c4cef70d416a62bf3baf15ef068f6ae6c1850', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '92ea21963da0665250a93bf7e2320316f57d0fe1', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '48aefe951243af0bed5e7b3cb24a1ffb280725e5', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '790fc6af3b0da949236be607b3225402e9d8cb43', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4a19e11f0bfaef3fd11923241cf3be4a8d1876a2', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7c91c4bc7573aabefe86933ded7ce4f807119c1f', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'eeb9b1eb9fde1a5c2668d85bbe5677aae1234b42', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f0b9559edc333044fad4c1bdbccfc67305104805', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4a3a54f53cf0c92f312945487c72379070d5fb61', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'deb1412536ae2a0306a9cba1470e8472753b2a00', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ad1ca88e077f3d41ada877933173921be34bf582', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '553790d19a82f2878b008665aa2b5d70485d7c99', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c22146d6dd414ac65e1944a72460dd94b15decf9', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '14b0f68bc3bf5990ef15badadae437062bc871d6', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f030cfead8c7aaab5d01c77a40b4c5fce4dd1942', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3b2fb92ddee4ac1c7b5edca9521401024fa86ace', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'feb80603234aae8605e6624931ffba4c51a46d2c', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4e5dfcb222f0f0be032802ceb0b32b8486fc5513', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cae0c6fa30e51f7f5335bd6a63a30d5766fcc805', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8a2b2d0c0250c9e798354c3b3df14e2e2f8e67f6', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4c53d8794e10c1db81193ea85cabaada71195cb9', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1eace32b1e025e4cfbfe629752cc925532e3438d', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9f6f2e85ace6c28b2bc78c394e90dc6baa1fb4a0', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'adc9471c05cc42b585dee06d9ad5d3311f5af7ec', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '62c9121f3f5a77364e761406713fadb7416d1fb0', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '85fde25a2cce18e6dea30e9982b67b2bf4817b1f', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd345b352024846d0cc313a97702762a2bb6cb0b1', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9a1908fb5483b002b3f538fb5b5ace10893952c0', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '92d4325fde5575987a01f19d2ad457e671857351', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bb3e4874ef1992e22ede01f35f7db119c0914708', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5186e10da6e18674a4921b926e1adabce393c0c5', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0d3cb1cee236ed0ca0f88a94b4cf74ca4d9e7cbf', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '17a30a693c8e58f11f2d8f0846b9fb8553711ae9', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e6b4a25506092843940b4c79e660a481bd0cbde5', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a2e0a9fe6f076496990de7f8c589dc7a24b6dfea', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3ae4536da0f8cf69541f59677ca48cb8f8b747f7', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aa60607834dd0863a8dc3d48c0467caab19f08f8', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '351b6b41efb75956af1174fbc6bbcb80319e40ae', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '695f006adca3207a121783cf162f9b45a23d7c47', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '88d25a0b498b23f56c53ea20cd1ce6ba05d41dd1', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '86c2f3003393324f3ccfc4a9ad195bcf749a78fc', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '569a05bf3c3548131f8a5ffa190fce7ebde12957', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cfe1b2556908cb58d4ebb71f5142dd08447fda25', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fb872d990468ebc5bebabceb3da055878a26eeed', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '20cfa5632ed171a1fe4944de751c2c3e62725dac', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '58b654c13c8219ee0d5276c30dae9023164619c8', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '386e5e96cd0bb945d11c84dd56e55b256496d41b', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '09c42f951bd27d73e8c1c6b68e7f86b18fe107ef', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '47b34dc07da935612b74da2f6240761ef482ab39', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '10307229c6d424725a49e185fb95b12eed52f730', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '813ebf1d7672a301de42247fadde365d4069f9ba', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3e45afef078d3c31405a529ec2f985e934c60c7d', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3321dde6bc040c71182f1e32f14c5cf94d637ac3', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '37ea71ed18becf2e8a1ae7e7672bdb513e8e14ff', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd68df23131ef3f0ba33986f2870788cd2b40acaa', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fe96999ae7aed8202e1fb7270312c464dfa370cf', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '37fe2ebd9b55e2688d85b3dfd1afac9d2d2f7971', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f513726687625f1160b798f09a4afe8f8637c040', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '42fc97f817df5caf5846c880bad610d7878f3337', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0f89fd761bfcdcb498a7600f2a6bf8690b376242', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f85fd6e8a5e0d92d63094a10221a988ecdd78821', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '15d5857000bf920d7840b3eb2d62f8ddeded4095', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '53a2475949db369c3590373e276cd8c93337736e', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f5138c0c50990bb0975c90973344de487a3388b4', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f36330cb5fcc200fdee4d4b352a51ddb5fe45266', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5f9aa9a62a94cee976f0e4fb6ae8d33d45cfe900', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd1c79489efb99068165f4d699c2990dc4c192b15', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '753e8ad53ba4a07bcad7213d592d8dd0b899f8ed', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ac9ed3dcdc41b812c760b7654601254c6a363620', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4129ebadc7204eeeed6fd5bb1771b207da6e80a4', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0c66fa00078a60572e14dd2f28b7e09247f9abaa', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '998c3a4821f5745db6dd59568f9d19d74840d906', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'edbdb981f6c99189d1bfd1df74a1b851dd36e496', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7518aa5301e58a21d8fddccb585054b147b9ab1e', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6fee2081c6981d22cd61eb32aff9ad17d5b15789', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd3bdfa01897a1cc13d5f7535dbf2887e12f1c182', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '66394b7aaa7745e4eb91cd40df9c6c875bf00093', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3a036a23e74dc22d87eba9ab0110e3df7768be00', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4dbf63617aba6ecffb382e56a9f4e032eb972760', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0b69d3227c44ddac3de65c4b9cb40991ae96368f', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '727ed5d62e8f2a4cc33e626546d6c7312a8584a9', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e332ab86cbb498d9c9ca7c5f0995e0a5469c391f', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'debc00fe51d77c1068adf108404fa14ed18a83db', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'db64244b53d8497883f62ba6883419843a598091', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '83908800d1420d7ee10acd1cc9dd16763a1b5b17', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '26cd8f703c96522275862b3c38993f65bbe2e633', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '18859f9333f7c888ff323ea9b4c2305406892e4c', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cefddfbcbee16617f8ce99e667ade32f8bcddd81', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a82c1bceedea28d9163213f1db27d894c55b822f', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '51ae42725ca0648243d4151da8eeda378bf60657', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cd16cb65a57399499caf0187fdaf7791faf2d771', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c119f0d07dc014c8cb958963533dcd5f12f14e17', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e1b5b18df74546aeb7b3b3785a058f934fa790f2', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1925c2161fbeae4818f3b26cd6c1feaedb005b5e', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'afc07a054ba28439e9476b5c00fc59bac821791e', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4a9d27ce4cdf4861239bc01bf18e7d54f5d5c114', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '39328e8a59665b761da9b23dd48faf0794f360fc', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c7e276fca1e9be6b8b4a746748b96292a99315a8', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b46d2ff3e5f4b465e59978197245ea89c498dc4e', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '47ace41f0827d791caff00410ddb81bd21f7de18', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '396482c1ae7edf6ee0f89271a83174d2ed217291', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fb59b33e00c090370819a1cdab2cd29cba5bbab5', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3a9884a03b67fc44d66ea6ab0520551da3d61461', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7e7d5d77416694bc3c1b3a60546746642b5ce7d4', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '11218ccbbc4afc9695d36735436723c9ae0a418a', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a0a44148e1a51f811ac5ecc60d51beaf7ccc7a0e', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f076a220c02bcb0c47b1e318e1fb8ce2c3e7ecac', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'acb9c1e5ff409712e1e06f86f6c079aa8e779ed3', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8bb871d63022e9b9ee6043583bf5788b462be1cc', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '552306ce2bdde79d900f0adc7bd94a00f69d0db9', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0e8a376002246e0412610e6c7be740870872c1a5', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '12cbc42aecaa5628f48c3d984fece8560745345a', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6911e553761aedcdbfa504ac21f565f1e9242382', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a0aadb53934e760b3e436a9c5d4f84b59c8a35b8', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9cfeda30d2bfe426c35c7e40bf8eeb03433660dc', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '24031b0c6ea029a3f6706a146bfec5fcdddeb8c9', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '06778d352a02e70b282d112f7d60081e2d87e2cd', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8a70b5a9d24b5cec0828cb4f500c1ce1036848c1', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3e2803495b66df23988e465e3b3ecd303cfa677c', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ff19e628eafb8017447eeb34dcd817e02041ba90', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8e6c4d1316be9d6d5b39130956f96ec652b9bfe2', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '30f2390174ea3909c4e1d10a498da1a6f8e7c93e', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7b88e4feb6b659d9b8120647e4ef1ffa245af91e', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '28b8ae68d9fb39340d7007578e5c1c62b9321a5d', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ff507196c2c4d34bbf477904da747fcfba72e507', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '72e51c9249087102f9d1a157bb3fb45d1d00f89c', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}]",Hitesh Tomar,44300735,,User,,30,,3,13
1110246352,Edited suggestion batch job to fix the translation of type list.,"## Overview
<!--
READ ME FIRST:
Please answer *both* questions below and check off every point from the Essential Checklist!
If there is no corresponding issue number, fill in N/A where it says [fill_in_number_here] below in 1.
-->

1. This PR fixes or fixes part of n/a.
2. This PR does the following: Updates the suggestion job to fix the translation content of type List[str].

## Essential Checklist

- [ ] The PR title starts with ""Fix #bugnum: "", followed by a short, clear summary of the changes. (If this PR fixes part of an issue, prefix the title with ""Fix part of #bugnum: ..."".)
- [x] The linter/Karma presubmit checks have passed locally on your machine.
- [x] ""Allow edits from maintainers"" is checked. (See [here](https://help.github.com/en/github/collaborating-with-issues-and-pull-requests/allowing-changes-to-a-pull-request-branch-created-from-a-fork) for instructions on how to enable it.)
  - This lets reviewers restart your CircleCI tests for you.
- [x] The PR is made from a branch that's **not** called ""develop"".

## Proof that changes are correct

<!--
Add videos/screenshots of the user-facing interface to demonstrate that the changes
made in this PR work correctly. If this PR is for a developer-facing feature,
provide the videos/screenshots of developer-facing interface.

Please also include videos/screenshots of the developer tools
browser console, so that we can be sure that there are no console errors.

If the changes in your PRs are autogenerated via a script and you cannot provide proof
for the changes then please leave a comment ""No proof of changes needed because {{Reason}}""
and remove all the sections below.
-->

#### Proof of changes on desktop with slow/throttled network

<!--
Make sure to properly verify that everything works correctly, and that there are
no weird UI mistakes or other problems. Also, if there are any newly added fields,
try to fill them out and test that different inputs are correctly accepted/rejected.

Throttle the network (to 3G) using the browser Developer Tools (see references below).
There should be no performance or UI issues while the network is slow.

References:
 - Chrome: https://css-tricks.com/throttling-the-network/
 - Firefox: https://developer.mozilla.org/en-US/docs/Tools/Network_Monitor/Throttling
-->

#### Proof of changes on mobile phone

<!--
In some cases this is not needed (e.g. for pages that we do not expect to
support mobile phones, or for backend-only features).

Feel free to use the Developer Tools emulator for this.

References:
 - Chrome: https://developer.chrome.com/docs/devtools/device-mode/
 - Firefox: https://firefox-source-docs.mozilla.org/devtools-user/index.html#responsive-design-mode
-->

#### Proof of changes in Arabic language

<!--
If the PR changes the UI, make sure to add screenshots with the site
language set to Arabic as well (we use Arabic as it is a language written from right to left).
-->

## PR Pointers

- Make sure to follow the [instructions for making a code change](https://github.com/oppia/oppia/wiki/Make-a-pull-request).
- If you need a review or an answer to a question, and don't have permissions to assign people, **leave a comment** like the following: ""{{Question/comment}} @{{reviewer_username}} PTAL"". Oppiabot will help assign that person for you.
- For what code owners will expect, see the [Code Owner's wiki page](https://github.com/oppia/oppia/wiki/Oppia's-code-owners-and-checks-to-be-carried-out-by-developers).
- Make sure your PR follows conventions in the [style guide](https://github.com/oppia/oppia/wiki/Coding-style-guide), otherwise this will lead to review delays.
- Never force push. If you do, your PR will be closed.
- Some of the e2e tests are flaky, and can fail for reasons unrelated to your PR. We are working on fixing this, but in the meantime, if you need to restart the tests, please check the [""If your build fails"" wiki page](https://github.com/oppia/oppia/wiki/If-CI-checks-fail-on-your-PR).
",True,16483,https://api.github.com/repos/oppia/oppia/pulls/16483,https://github.com/oppia/oppia/pull/16483,closed,150,7,2,3,6,4,1,2,[{'name': 'PR: LGTM'}],2022-11-04 00:41:50+00:00,2022-11-04 06:55:54+00:00,22444.0,6:14:04,"[{'comment_id': 1013858754, 'comment_body': ""@lkbhitesh07 We don't have any list(html) data in translation, right? ([ref](https://github.com/oppia/oppia/blob/develop/core/domain/state_domain.py#L2956))\r\n\r\nSo do we need to run fi_content on normal/unicode strings?"", 'comment_created': datetime.datetime(2022, 11, 4, 10, 38, 19, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 1013877121, 'comment_body': ""Hey!\r\nThe fix_content only fixes the RTE `tags` and the content for which the suggestion is created is already been migrated or fixed. If that's what you mean.\r\nThanks"", 'comment_created': datetime.datetime(2022, 11, 4, 10, 59, 13, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 1014274736, 'comment_body': '@lkbhitesh07 `translation_html` can either be ""HTML(String)"" or ""List(normalString/UnicodeString/NonHtmlString)"", so I wanted to check whether it\'s needed to pass normal/UnicodeString into the fix_content function.', 'comment_created': datetime.datetime(2022, 11, 4, 17, 7, 16, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 1014306548, 'comment_body': 'If that is the case then we can avoid doing the changes to the list, although nothing will be changed as the function will not be able to find any RTE tags and will not make any changes.\r\nThanks', 'comment_created': datetime.datetime(2022, 11, 4, 17, 45, 5, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}]","[{'commit_sha': '96293656c6ae6cdb8eda515a0c45b7cb90883fcd', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c7eb1e8f9ab37ed06199ff62c270d8d5d5fc80be', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2bc6d3b9b2f33317353f0a559050beadc0126396', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}]",Hitesh Tomar,44300735,,User,,30,,3,13
1118961803,Remaining changes for the #15861,"## Overview
<!--
READ ME FIRST:
Please answer *both* questions below and check off every point from the Essential Checklist!
If there is no corresponding issue number, fill in N/A where it says [fill_in_number_here] below in 1.
-->

1. This PR fixes or fixes part of n/a.
2. This PR does the following: Edits the place where we remove the `DragAndDrop` rule considering it as invalid but it turns out that we do not actually want to remove that rule.

## Essential Checklist

- [ ] The PR title starts with ""Fix #bugnum: "", followed by a short, clear summary of the changes. (If this PR fixes part of an issue, prefix the title with ""Fix part of #bugnum: ..."".)
- [x] The linter/Karma presubmit checks have passed locally on your machine.
- [x] ""Allow edits from maintainers"" is checked. (See [here](https://help.github.com/en/github/collaborating-with-issues-and-pull-requests/allowing-changes-to-a-pull-request-branch-created-from-a-fork) for instructions on how to enable it.)
  - This lets reviewers restart your CircleCI tests for you.
- [x] The PR is made from a branch that's **not** called ""develop"".

## Proof that changes are correct

<!--
Add videos/screenshots of the user-facing interface to demonstrate that the changes
made in this PR work correctly. If this PR is for a developer-facing feature,
provide the videos/screenshots of developer-facing interface.

Please also include videos/screenshots of the developer tools
browser console, so that we can be sure that there are no console errors.

If the changes in your PRs are autogenerated via a script and you cannot provide proof
for the changes then please leave a comment ""No proof of changes needed because {{Reason}}""
and remove all the sections below.
-->

#### Proof of changes on desktop with slow/throttled network

<!--
Make sure to properly verify that everything works correctly, and that there are
no weird UI mistakes or other problems. Also, if there are any newly added fields,
try to fill them out and test that different inputs are correctly accepted/rejected.

Throttle the network (to 3G) using the browser Developer Tools (see references below).
There should be no performance or UI issues while the network is slow.

References:
 - Chrome: https://css-tricks.com/throttling-the-network/
 - Firefox: https://developer.mozilla.org/en-US/docs/Tools/Network_Monitor/Throttling
-->

#### Proof of changes on mobile phone

<!--
In some cases this is not needed (e.g. for pages that we do not expect to
support mobile phones, or for backend-only features).

Feel free to use the Developer Tools emulator for this.

References:
 - Chrome: https://developer.chrome.com/docs/devtools/device-mode/
 - Firefox: https://firefox-source-docs.mozilla.org/devtools-user/index.html#responsive-design-mode
-->

#### Proof of changes in Arabic language

<!--
If the PR changes the UI, make sure to add screenshots with the site
language set to Arabic as well (we use Arabic as it is a language written from right to left).
-->

## PR Pointers

- Make sure to follow the [instructions for making a code change](https://github.com/oppia/oppia/wiki/Make-a-pull-request).
- If you need a review or an answer to a question, and don't have permissions to assign people, **leave a comment** like the following: ""{{Question/comment}} @{{reviewer_username}} PTAL"". Oppiabot will help assign that person for you.
- For what code owners will expect, see the [Code Owner's wiki page](https://github.com/oppia/oppia/wiki/Oppia's-code-owners-and-checks-to-be-carried-out-by-developers).
- Make sure your PR follows conventions in the [style guide](https://github.com/oppia/oppia/wiki/Coding-style-guide), otherwise this will lead to review delays.
- Never force push. If you do, your PR will be closed.
- Some of the e2e tests are flaky, and can fail for reasons unrelated to your PR. We are working on fixing this, but in the meantime, if you need to restart the tests, please check the [""If your build fails"" wiki page](https://github.com/oppia/oppia/wiki/If-CI-checks-fail-on-your-PR).
",True,16525,https://api.github.com/repos/oppia/oppia/pulls/16525,https://github.com/oppia/oppia/pull/16525,closed,47,50,3,11,10,19,0,2,[],2022-11-11 11:08:35+00:00,2022-11-16 04:24:52+00:00,407777.0,"4 days, 17:16:17","[{'comment_id': 1020582574, 'comment_body': 'Hey @kevintab95, I have also added this encoding part from the doc [here](https://docs.google.com/document/d/1HFZdyQqG47dgbakz05lzSejcd8RlNAQaPWPfjGt4sWY/edit?usp=sharing) just to avoid any incase problem. Please let me know if this sounds good.', 'comment_created': datetime.datetime(2022, 11, 11, 22, 0, 30, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 1020582973, 'comment_body': '@kevintab95, Please note that I have also updated the part where `&nbsp;` was converting to `\\xa0`. Thanks', 'comment_created': datetime.datetime(2022, 11, 11, 22, 1, 36, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 1020598913, 'comment_body': 'Why do we change this?', 'comment_created': datetime.datetime(2022, 11, 11, 22, 46, 28, tzinfo=datetime.timezone.utc), 'commenter': 'kevintab95', 'type': 'User'}, {'comment_id': 1020599040, 'comment_body': 'Are you sure this will not cause other issues? Have you tested to make sure it does not?', 'comment_created': datetime.datetime(2022, 11, 11, 22, 46, 57, tzinfo=datetime.timezone.utc), 'commenter': 'kevintab95', 'type': 'User'}, {'comment_id': 1020601452, 'comment_body': ""Isn't this the recommended way to use the soup to avoid any invalid changes? All the tests do run successfully and it not causing any problem but let me know what do you think. If it is not necessary and recommended I will remove it.\r\nThanks"", 'comment_created': datetime.datetime(2022, 11, 11, 22, 55, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 1020603131, 'comment_body': 'Please manually test it to ensure that it does not result in any other encoding issues. It can potentially delay things even further.', 'comment_created': datetime.datetime(2022, 11, 11, 23, 0, 38, tzinfo=datetime.timezone.utc), 'commenter': 'kevintab95', 'type': 'User'}, {'comment_id': 1020603247, 'comment_body': ""This was the change I and @DubeySandeep was talking about, though it does not make any changes as we do not have Solution for `MultipleChoice` and `ItemSelection` but this is the correct way to perform these changes.\r\nPlease note that these changes are related to `MultipleChoice` and `ItemSelection`, at the time when I was making the changes I needed some reference to how a solution would look like, as it was not possible to see this via GUI and download the content I tried looking for the tests for this part and in there the `html_content` was used as the solution instead of the `content_id`.\r\nI'm just correcting it so that the tests that I wrote in the `exp_domain_test` file works correctly when Sandeep makes his changes.\r\nThanks"", 'comment_created': datetime.datetime(2022, 11, 11, 23, 0, 58, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 1020604478, 'comment_body': ""Hm, I think I don't have enough context to properly evaluate this. If @DubeySandeep can approve this, I'm happy to approve it as well."", 'comment_created': datetime.datetime(2022, 11, 11, 23, 5, 9, tzinfo=datetime.timezone.utc), 'commenter': 'kevintab95', 'type': 'User'}, {'comment_id': 1020617561, 'comment_body': ""I think I should remove this part, apart from my changes we do have many types of data present and the changes seemed to work fine the previous way. Just to avoid any kind of further delay or surprises, I'm removing it.\r\nThanks"", 'comment_created': datetime.datetime(2022, 11, 11, 23, 58, 50, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 1020985593, 'comment_body': 'Why are we removing this check?', 'comment_created': datetime.datetime(2022, 11, 13, 23, 38, 44, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 1020986294, 'comment_body': ""This looks good to me, thanks for adding it @lkbhitesh07 !\r\n\r\nI just have two things remaining to ensure:\r\n\r\n1. Validate state contains solutions only if interaction.can_have_solution.\r\n2. Validate all the keys are present in the customization args. (Not sure whether it already exists.)\r\n\r\nThese two validations are not a blocker from my side but just ensure with your mentor and LaCE team for the requirements. (Just trying to avoid future migration for similar stuff, if it's really needed!)\r\n\r\n "", 'comment_created': datetime.datetime(2022, 11, 13, 23, 42, 13, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 1020986369, 'comment_body': 'Why are we removing this? (No info in the PR description for the ""why is this needed?"")', 'comment_created': datetime.datetime(2022, 11, 13, 23, 42, 37, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 1020986919, 'comment_body': '(Just curious) It will replace an actual handwritten text ""\\xa0"" with &nbsp. (Not sure what\'s the RTE\'s output for user writing \\xa0 in the paragraph.)', 'comment_created': datetime.datetime(2022, 11, 13, 23, 46, 30, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 1021208329, 'comment_body': 'We would require to add the `continue` part here, mainly the validation error from here was removed because it was not a valid case. Consider the below case:\r\n```\r\nChoices: 1, 2, and 3\r\n\r\nEquals [[1, 2, 3], [4]]\r\nHasElement 1 at position 3\r\nAll Other Answers: ...\r\n```\r\nNow here the position 3 does not exists but it is possible that user have placed the element at position 3 and we should not raise an error at that time.', 'comment_created': datetime.datetime(2022, 11, 14, 8, 39, 36, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 1021209707, 'comment_body': 'This is also the drag and drop part, I have explained this part in the above comment as why we should not remove the rule. We will not consider the rule as invalid because the user is allowed to place the item at any position available.\r\nThanks', 'comment_created': datetime.datetime(2022, 11, 14, 8, 40, 59, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 1021214793, 'comment_body': 'Hmm, Well these were not initially included in the project and we did not had any discussions regarding this. For the `2` one I particularly do not remove any keys from the customization args AFAIK.\r\n\r\nHey @vojtechjelinekm Just wanted to ping you here for this particular discussion.\r\nThanks', 'comment_created': datetime.datetime(2022, 11, 14, 8, 46, 26, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 1021226633, 'comment_body': ""I'm not completely sure on what would happen but I can try it out and update you. I will try this out locally and will update you.\r\nThanks"", 'comment_created': datetime.datetime(2022, 11, 14, 8, 58, 10, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 1021353352, 'comment_body': 'The RTE output will be something like `\\\\xa0` which I think will be counted as a simple string instead of a special value.\r\nThanks', 'comment_created': datetime.datetime(2022, 11, 14, 10, 56, 27, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 1022613909, 'comment_body': ""Let's not add any more validations at this stage, we can do them later."", 'comment_created': datetime.datetime(2022, 11, 15, 10, 28, 19, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}]","[{'commit_sha': '737243dd365a8454aa0e4025a0e20aabcf75eb5f', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1d35ff273aec3256c8f17243873597a5f5decc5c', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4c70931e18d5123720fa5f9be520022e99251e0a', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '829d20217fafccd389b8ae8a5032b1e0afc973c9', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ee1b5528c494ba79f8f2e352c90a33afbd79d38f', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cf7e7b990f47930e2b160ac1a6fe1386b81babcb', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '21f85a989d6e5b353450cdd614a22581b1298202', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1997a13b58fda603115f6ba92bb9a1ab576fead7', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '881933ea14637b372350d5cc2d462b43722639fd', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0fe3d4d26d86cceaffc892c605209ac755a4a9e8', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7ad61b62d9a60877cbbd43ca7fa9b1c6b75fc3e9', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}]",Hitesh Tomar,44300735,,User,,30,,3,13
1111961971,M 2.1: GCS IO implementation.,"## Overview
<!--
READ ME FIRST:
Please answer *both* questions below and check off every point from the Essential Checklist!
If there is no corresponding issue number, fill in N/A where it says [fill_in_number_here] below in 1.
-->

1. This PR fixes or fixes part of n/a.
2. This PR does the following: Introduces the functionality to interact with GCS via beam jobs.

## Essential Checklist

- [ ] The PR title starts with ""Fix #bugnum: "", followed by a short, clear summary of the changes. (If this PR fixes part of an issue, prefix the title with ""Fix part of #bugnum: ..."".)
- [ ] The linter/Karma presubmit checks have passed locally on your machine.
- [x] ""Allow edits from maintainers"" is checked. (See [here](https://help.github.com/en/github/collaborating-with-issues-and-pull-requests/allowing-changes-to-a-pull-request-branch-created-from-a-fork) for instructions on how to enable it.)
  - This lets reviewers restart your CircleCI tests for you.
- [x] The PR is made from a branch that's **not** called ""develop"".

## Proof that changes are correct

<!--
Add videos/screenshots of the user-facing interface to demonstrate that the changes
made in this PR work correctly. If this PR is for a developer-facing feature,
provide the videos/screenshots of developer-facing interface.

Please also include videos/screenshots of the developer tools
browser console, so that we can be sure that there are no console errors.

If the changes in your PRs are autogenerated via a script and you cannot provide proof
for the changes then please leave a comment ""No proof of changes needed because {{Reason}}""
and remove all the sections below.
-->

#### Proof of changes on desktop with slow/throttled network

<!--
Make sure to properly verify that everything works correctly, and that there are
no weird UI mistakes or other problems. Also, if there are any newly added fields,
try to fill them out and test that different inputs are correctly accepted/rejected.

Throttle the network (to 3G) using the browser Developer Tools (see references below).
There should be no performance or UI issues while the network is slow.

References:
 - Chrome: https://css-tricks.com/throttling-the-network/
 - Firefox: https://developer.mozilla.org/en-US/docs/Tools/Network_Monitor/Throttling
-->

#### Proof of changes on mobile phone

<!--
In some cases this is not needed (e.g. for pages that we do not expect to
support mobile phones, or for backend-only features).

Feel free to use the Developer Tools emulator for this.

References:
 - Chrome: https://developer.chrome.com/docs/devtools/device-mode/
 - Firefox: https://firefox-source-docs.mozilla.org/devtools-user/index.html#responsive-design-mode
-->

#### Proof of changes in Arabic language

<!--
If the PR changes the UI, make sure to add screenshots with the site
language set to Arabic as well (we use Arabic as it is a language written from right to left).
-->

## PR Pointers

- Make sure to follow the [instructions for making a code change](https://github.com/oppia/oppia/wiki/Make-a-pull-request).
- If you need a review or an answer to a question, and don't have permissions to assign people, **leave a comment** like the following: ""{{Question/comment}} @{{reviewer_username}} PTAL"". Oppiabot will help assign that person for you.
- For what code owners will expect, see the [Code Owner's wiki page](https://github.com/oppia/oppia/wiki/Oppia's-code-owners-and-checks-to-be-carried-out-by-developers).
- Make sure your PR follows conventions in the [style guide](https://github.com/oppia/oppia/wiki/Coding-style-guide), otherwise this will lead to review delays.
- Never force push. If you do, your PR will be closed.
- Some of the e2e tests are flaky, and can fail for reasons unrelated to your PR. We are working on fixing this, but in the meantime, if you need to restart the tests, please check the [""If your build fails"" wiki page](https://github.com/oppia/oppia/wiki/If-CI-checks-fail-on-your-PR).
",True,16497,https://api.github.com/repos/oppia/oppia/pulls/16497,https://github.com/oppia/oppia/pull/16497,closed,427,8,5,80,48,88,2,1,"[{'name': 'PR: Affects datastore layer'}, {'name': ""PR: don't merge - STALE BUILD""}]",2022-11-06 13:44:36+00:00,2023-01-01 14:13:18+00:00,4840122.0,"56 days, 0:28:42","[{'comment_id': 1015807409, 'comment_body': 'Hey @vojtechjelinek,\r\nI tried to print the files present inside the GCS object but it turned out to be an empty dictionary. As discussed in the meet, the `filename_p_collec` will get executed when passed to `assert_pcoll_equal` and I tried to print after that but was not able to see the files.\r\nThanks', 'comment_created': datetime.datetime(2022, 11, 7, 19, 15, 38, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 1015810971, 'comment_body': 'I was not able to test both the changes together as we cannot use 2 `assert_pcoll_equal` in same function. While testing I got this note -\r\n```\r\nNOTE: This error most likely means you have called more than one PCollection assertion, which is forbidden. This is because running assertions on pipelines require us to wait for it to finish processing all of its data, after which there is nothing left to inspect. If you need to make multiple assertions, then split them into separate test cases.\r\n```', 'comment_created': datetime.datetime(2022, 11, 7, 19, 19, 58, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 1015812275, 'comment_body': ""I'm not sure why all of the following changes are getting done in this file."", 'comment_created': datetime.datetime(2022, 11, 7, 19, 21, 18, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 1015815802, 'comment_body': ""I was testing this batch job and here I was getting the below mentioned error which is regarding the file not found. This confirms that the files are not getting stored in the GCS(I also mentioned this part in the `gcs_io_test` part). I also tried to print the object to see if the file is stored or not, but it was not stored.\r\nThanks\r\n```\r\nRuntimeError: FileNotFoundError: [Errno 2] Not found: gs://test-bucket/dummy_file_1 [while running 'Read files from the GCS/Read the file']\r\n```"", 'comment_created': datetime.datetime(2022, 11, 7, 19, 25, 32, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 1015945277, 'comment_body': 'Hmm maybe use `JobTestBase` for this class and test it using the job testing functions.', 'comment_created': datetime.datetime(2022, 11, 7, 22, 5, 42, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1015945858, 'comment_body': 'Hmm not sure, probably remove them from this PR.', 'comment_created': datetime.datetime(2022, 11, 7, 22, 6, 29, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1016978546, 'comment_body': ""Hey @vojtechjelinek,\r\nI have added these print statements to debug the issue we are facing, I will post the results below. I think the `gcsio` library that we are using is not working correctly, please note that on line `101` I check if the gcs has a bucket or not, I'm checking a fake bucket but in the below results you will not see anywhere printing `bbbbbbbbbb...`. The `get_bucket` should return None but it is not. Please note that on line I try to print `gcsio-test` bucket if it exists or not, in the result below you will be able to see it, If I try to print some random bucket it will print that too.\r\n**Result**\r\n```\r\naaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\r\n<Bucket\r\n acl: []\r\n cors: []\r\n defaultObjectAcl: []\r\n name: 'gcsio-test'\r\n projectNumber: 1>\r\n******************************\r\n<apache_beam.io.gcp.gcsio_test.FakeGcsBuckets object at 0x7f0d88112160>\r\n<Bucket\r\n acl: []\r\n cors: []\r\n defaultObjectAcl: []\r\n name: 'gcsio-test'\r\n projectNumber: 1>\r\n<Bucket\r\n acl: []\r\n cors: []\r\n defaultObjectAcl: []\r\n name: 'gcsio-test'\r\n projectNumber: 1>\r\n{('gcsio-test', 'dummy_file_1'): <apache_beam.io.gcp.gcsio_test.FakeFile object at 0x7f0d88124520>}\r\naaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\r\n<Bucket\r\n acl: []\r\n cors: []\r\n defaultObjectAcl: []\r\n name: 'gcsio-test'\r\n projectNumber: 1>\r\n******************************\r\n<apache_beam.io.gcp.gcsio_test.FakeGcsBuckets object at 0x7f0d88112160>\r\n<Bucket\r\n acl: []\r\n cors: []\r\n defaultObjectAcl: []\r\n name: 'gcsio-test'\r\n projectNumber: 1>\r\n<Bucket\r\n acl: []\r\n cors: []\r\n defaultObjectAcl: []\r\n name: 'gcsio-test'\r\n projectNumber: 1>\r\n{('gcsio-test', 'dummy_file_1'): <apache_beam.io.gcp.gcsio_test.FakeFile object at 0x7f0d88124520>, ('gcsio-test', 'dummy_file_2'): <apache_beam.io.gcp.gcsio_test.FakeFile object at 0x7f0d881246a0>}\r\n```\r\nThanks"", 'comment_created': datetime.datetime(2022, 11, 8, 18, 23, 41, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 1017685704, 'comment_body': 'Resolving this as it is happening due to `FakeGcsBuckets`.\r\nThanks', 'comment_created': datetime.datetime(2022, 11, 9, 9, 32, 58, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 1020587629, 'comment_body': 'I think we should have a separate job for each IO so that we can run, see if the files exist through Google Cloud Console, and then run the second job for reading the files.', 'comment_created': datetime.datetime(2022, 11, 11, 22, 13, 30, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1020588134, 'comment_body': 'This should be `filepath` as it is not only a filename but also contains the activity type and ID, right? Ditto elsewhere.', 'comment_created': datetime.datetime(2022, 11, 11, 22, 14, 43, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1020588495, 'comment_body': 'These should be filepaths, so that they are in a proper testing folder.', 'comment_created': datetime.datetime(2022, 11, 11, 22, 15, 34, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1020588757, 'comment_body': 'Why is this needed?', 'comment_created': datetime.datetime(2022, 11, 11, 22, 16, 17, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1020588837, 'comment_body': 'Remove this.', 'comment_created': datetime.datetime(2022, 11, 11, 22, 16, 31, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1020589095, 'comment_body': 'Did you try using swaps here to test the writes were correct?', 'comment_created': datetime.datetime(2022, 11, 11, 22, 17, 15, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1023215814, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 11, 15, 20, 10, 41, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 1023215886, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 11, 15, 20, 10, 46, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 1023216190, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 11, 15, 20, 11, 11, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 1023216270, 'comment_body': 'Removed', 'comment_created': datetime.datetime(2022, 11, 15, 20, 11, 18, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 1023216330, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 11, 15, 20, 11, 23, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 1023216444, 'comment_body': 'I have updated the tests.', 'comment_created': datetime.datetime(2022, 11, 15, 20, 11, 33, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 1023300890, 'comment_body': 'Can this be `bool` that specify whether we want to do binary or not?', 'comment_created': datetime.datetime(2022, 11, 15, 22, 1, 54, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1023301371, 'comment_body': 'Ditto as above.', 'comment_created': datetime.datetime(2022, 11, 15, 22, 2, 36, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1023305009, 'comment_body': 'Should we init the `gcsio.GcsIO` in `__init__`?', 'comment_created': datetime.datetime(2022, 11, 15, 22, 7, 34, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1023305206, 'comment_body': 'ditto below', 'comment_created': datetime.datetime(2022, 11, 15, 22, 7, 48, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1023305580, 'comment_body': '```suggestion\r\n    def expand(self, prefixes: beam.PCollection) -> beam.PCollection:\r\n```', 'comment_created': datetime.datetime(2022, 11, 15, 22, 8, 19, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1023306499, 'comment_body': 'Also, can we init this in `__init__`?', 'comment_created': datetime.datetime(2022, 11, 15, 22, 9, 35, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1023306832, 'comment_body': 'I think we should have a comment explaining this.', 'comment_created': datetime.datetime(2022, 11, 15, 22, 10, 7, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1023307121, 'comment_body': '(why we pass fake client in non-test file)', 'comment_created': datetime.datetime(2022, 11, 15, 22, 10, 29, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1023307740, 'comment_body': 'Delete?', 'comment_created': datetime.datetime(2022, 11, 15, 22, 11, 23, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1023308108, 'comment_body': 'Can we return the correct urls here? So that we can later check them?', 'comment_created': datetime.datetime(2022, 11, 15, 22, 11, 55, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1023308824, 'comment_body': 'Why is this in this format?', 'comment_created': datetime.datetime(2022, 11, 15, 22, 12, 53, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1023309802, 'comment_body': ""You can move this into the `test_check_correct_files_are_passing` and you don't need to add a docstring."", 'comment_created': datetime.datetime(2022, 11, 15, 22, 14, 20, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1023309895, 'comment_body': 'ditto elsewhere', 'comment_created': datetime.datetime(2022, 11, 15, 22, 14, 28, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1023310803, 'comment_body': 'The data for file ### is ###', 'comment_created': datetime.datetime(2022, 11, 15, 22, 15, 42, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1023310975, 'comment_body': '```suggestion\r\n        total_files_with_prefixes = (\r\n```', 'comment_created': datetime.datetime(2022, 11, 15, 22, 15, 56, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1023996627, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 11, 16, 13, 30, 30, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 1023996735, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 11, 16, 13, 30, 36, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 1023996812, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 11, 16, 13, 30, 41, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 1023996899, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 11, 16, 13, 30, 46, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 1023996966, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 11, 16, 13, 30, 50, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 1023997038, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 11, 16, 13, 30, 54, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 1023997156, 'comment_body': 'Updated', 'comment_created': datetime.datetime(2022, 11, 16, 13, 31, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 1023997310, 'comment_body': 'Updated', 'comment_created': datetime.datetime(2022, 11, 16, 13, 31, 8, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 1023999727, 'comment_body': 'This is the format in which we receive the result from gcsio library, you can take a look [here](https://github.com/apache/beam/blob/b77413309ef3032a6422428cc430eca67582ff61/sdks/python/apache_beam/io/gcp/gcsio.py#L566)\r\nThanks', 'comment_created': datetime.datetime(2022, 11, 16, 13, 33, 17, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 1023999821, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 11, 16, 13, 33, 22, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 1023999943, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 11, 16, 13, 33, 29, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 1024000541, 'comment_body': ""I'm a bit confused on how to map this part with files, I will update this part after discussing with you.\r\nThanks"", 'comment_created': datetime.datetime(2022, 11, 16, 13, 34, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 1024006840, 'comment_body': 'Ok', 'comment_created': datetime.datetime(2022, 11, 16, 13, 39, 13, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1024012903, 'comment_body': 'Not done.', 'comment_created': datetime.datetime(2022, 11, 16, 13, 42, 47, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1024015017, 'comment_body': 'Hmm, maybe the `ReadFile` should return tuple of name and data?', 'comment_created': datetime.datetime(2022, 11, 16, 13, 44, 28, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1024217769, 'comment_body': 'As this are present in all transfroms I think it would make sense to have a base class for these in the future.', 'comment_created': datetime.datetime(2022, 11, 16, 16, 15, 57, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1032848110, 'comment_body': ""Hey @vojtechjelinek,\r\nI'm done with the new implementation of GCS Io and things are working perfectly fine. Just one nit, this test will fail and the reason is the sequence, when we do `listdirs` from storage services it gives the result in any sequence so sometimes the tests pass and sometimes they don't. Please let me know what I can I do here.\r\nEverything else is done and tested."", 'comment_created': datetime.datetime(2022, 11, 27, 0, 23, 57, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 1032915790, 'comment_body': 'No, do not import this. Or if it is absolutely needed do it inside `if MYPY`', 'comment_created': datetime.datetime(2022, 11, 27, 11, 43, 35, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1032916072, 'comment_body': 'Not needed anymore?', 'comment_created': datetime.datetime(2022, 11, 27, 11, 45, 42, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1032916223, 'comment_body': 'I think we can move this to init now, right?', 'comment_created': datetime.datetime(2022, 11, 27, 11, 46, 39, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1032916536, 'comment_body': 'Can we now make sure that we always púass bytes to write?', 'comment_created': datetime.datetime(2022, 11, 27, 11, 48, 42, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1032916649, 'comment_body': '```suggestion\r\n    def _read_file(self, file_path: str) -> Tuple[str, bytes]:\r\n```', 'comment_created': datetime.datetime(2022, 11, 27, 11, 49, 27, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1032916922, 'comment_body': ""Should we really return a list of blobs? Shouldn't we return just the filenames?"", 'comment_created': datetime.datetime(2022, 11, 27, 11, 51, 30, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1032917071, 'comment_body': ""Order shouldn't matter for `assert_pcoll_equal` I think?"", 'comment_created': datetime.datetime(2022, 11, 27, 11, 52, 28, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1033369338, 'comment_body': ""I was wondering if we have to do that, As only the `WriteFile` have an init function and all others don't we can maybe define bucket as an global variable?\r\nThanks"", 'comment_created': datetime.datetime(2022, 11, 28, 10, 28, 13, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 1033403157, 'comment_body': 'Removed, was required when we were returning the blob.', 'comment_created': datetime.datetime(2022, 11, 28, 11, 1, 38, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 1033403282, 'comment_body': 'Removed', 'comment_created': datetime.datetime(2022, 11, 28, 11, 1, 45, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 1033403814, 'comment_body': 'I have updated this part and I think now mypy will be able to validate the incoming values.', 'comment_created': datetime.datetime(2022, 11, 28, 11, 2, 20, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 1033404160, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 11, 28, 11, 2, 44, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 1033404411, 'comment_body': 'Updated, will only return the names.', 'comment_created': datetime.datetime(2022, 11, 28, 11, 3, 1, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 1033405266, 'comment_body': 'It was getting returned in the list and the order was not matching inside the returned list, I have updated this part and now the tests are passing.', 'comment_created': datetime.datetime(2022, 11, 28, 11, 3, 53, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 1033555201, 'comment_body': 'Add more tests and test that the file was deleted properly.', 'comment_created': datetime.datetime(2022, 11, 28, 13, 40, 26, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1033556000, 'comment_body': 'Add more tests.', 'comment_created': datetime.datetime(2022, 11, 28, 13, 41, 10, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1033556215, 'comment_body': 'Add more tests.', 'comment_created': datetime.datetime(2022, 11, 28, 13, 41, 21, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1033558468, 'comment_body': 'Add more tests.', 'comment_created': datetime.datetime(2022, 11, 28, 13, 43, 18, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1034763000, 'comment_body': 'I have updated the existing test, where I check if the file exists or not.', 'comment_created': datetime.datetime(2022, 11, 29, 13, 37, 34, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 1034764094, 'comment_body': 'What test I can add in this part? I mean we are printing the filepaths that we are getting and we are able to verify it. Is there anything else we can add?', 'comment_created': datetime.datetime(2022, 11, 29, 13, 38, 30, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 1034764812, 'comment_body': 'Same, we are getting the values from the read and the values are correct. Please let me know what else I should add here.', 'comment_created': datetime.datetime(2022, 11, 29, 13, 39, 9, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 1034765164, 'comment_body': 'I have updated the existing test, where I check if the file has been written or not.', 'comment_created': datetime.datetime(2022, 11, 29, 13, 39, 26, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 1035716589, 'comment_body': 'Ah I just realized the list of files is fixed for the jobs. Can you just test the prefix using a few different files so only part of them is returned?', 'comment_created': datetime.datetime(2022, 11, 30, 9, 19, 11, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1035719316, 'comment_body': ""Hmm, thinking about this I don't think we should do this here, the problem is that if there is a huge number of files returned it might be to slow to sort them. Lets rather do this only in tests where we need to compare the value."", 'comment_created': datetime.datetime(2022, 11, 30, 9, 21, 33, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1035721188, 'comment_body': ""```suggestion\r\n        with self.swap(gcs_io.DeleteFile, '_delete_file', lambda self, filepath: filepath):\r\n```"", 'comment_created': datetime.datetime(2022, 11, 30, 9, 23, 13, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1035721656, 'comment_body': ""```suggestion\r\n        def _mock_list_prefix(\r\n            unused_self: gcs_io.GetFiles, filepath: str\r\n        ) -> str: # pylint: disable=unused-argument\r\n            return filepath\r\n\r\n        with self.swap(\r\n            gcs_io.GetFiles, \r\n            '_get_file_with_prefix',\r\n            lambda self, filepath: filepath\r\n        ):\r\n```"", 'comment_created': datetime.datetime(2022, 11, 30, 9, 23, 41, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1037494789, 'comment_body': 'Yeah, I added few more files and then checked. It works.', 'comment_created': datetime.datetime(2022, 12, 1, 19, 37, 17, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 1037494899, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 12, 1, 19, 37, 26, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 1037495004, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 12, 1, 19, 37, 34, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 1037495067, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 12, 1, 19, 37, 38, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 1052053850, 'comment_body': 'Should we rather return `result.Ok` and `result.Err` so that we can easily recognize the errors when we are calling this?', 'comment_created': datetime.datetime(2022, 12, 19, 10, 38, 35, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1052110442, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 12, 19, 11, 42, 33, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 1052119324, 'comment_body': 'You need to handle these in your testing job, right?\r\n', 'comment_created': datetime.datetime(2022, 12, 19, 11, 53, 7, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1053454645, 'comment_body': 'Yes, I have updated that part.', 'comment_created': datetime.datetime(2022, 12, 20, 15, 37, 17, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 1053569291, 'comment_body': 'I think this should be only done after line 93 (in `output_files`). Because in `total_files_read` we want to show the errors too.', 'comment_created': datetime.datetime(2022, 12, 20, 17, 27, 58, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1053573017, 'comment_body': 'Make sense, I have updated this.', 'comment_created': datetime.datetime(2022, 12, 20, 17, 32, 22, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}]","[{'commit_sha': '1495a9d47ee494c9b4b2f774f00a725935677262', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e6a420edad0d4dd8f1434b54c82f56ab5f015c7d', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cdda5c611479c203bf8e537808f549fa2f36ae25', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e532d226b0c992e40688ee61ea3f5526788fa573', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1dd35a4cf08196ddf4af3a472cdcec895a7a9491', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bd4075f5c9e02fedaf4168a93b468bad2d3ab4fe', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0276f6d5541bc1db72a0ddfbd03ad05124f94ad8', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b8d636f4a472cabd1845ba032b7c5c86313d0809', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '239ce244edb5f17d7ebdf203f36368b1bb9deb84', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '69b8a4e6f58235971ce2be0d0159eee050a742d7', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd4f067970141ab719b7a7192365ff4bc024ccdb4', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd87cef177e411d26c9874c6fe263c01477181a4e', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f65860900a8e46a859839629690d30390b3ab916', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '01696df6c42ca2b57eed7fbd5e3e6d43bba47935', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8e89ae91ea7668f06d2852df0efed0626fc41396', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fe9f6c53abc6e09401e0ed9502df297fd9e911d2', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '52ce33d1769d33825845709b35542476fee0f941', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cf524e6e2be5cbc5e5fae19ca4b136f366a284c1', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '54853ce6d61963cf91896abe0ddffaa5bf4f4ff7', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '414301a9642865bac21262bcac0c8e0d25ae4e84', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd62afd60d965432329880c1969ba9f8760812011', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9b24296a66c2b2172e0551772e5488d189340564', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cba7e421bae9fda42fc3a77c380cc9d30c3cf3c1', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '26092ed8f5a7962e2c247e01ed91b3ce1a18f5ed', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '003656d5af0e7d23f7c15b7bc1a16e946f0ed704', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '46d4f960f9cd40d4ba0f0f55783726a5f7dc5d92', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '96c317a43abb82c97fb2a1591726fa771822aece', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '66b5cb731795dbc35ac340dd141cdf0dd18427b0', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4fae6373c331d683ac51144321572893f3c9840b', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '294b2373794924107a5a8f95e07b5db40d44373c', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cc5e08ca7d8d0c249ef88c9cc7de9da8dec93f68', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f22ff06bfb51e74f2302a48e886438a042fb1d02', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a37aa1c0360934f0bbc06c6dc0418c44fb7de718', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b7a157350337a7b1cb38c3bf1cc2e1c3c38654f7', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9d8b2ffc708b89ffed3a497ecbfef1b8bd2801c6', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5325d2640287d23cdae3f57f58ed73c334e83293', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8d2efea6c192f26366dca3453ca0c25f9627bf19', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '87ad04c4a3de9ff91e1ffb7c72b5c1c8aec47389', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '51c4a07f83758e8a0f39327f9e0f78ac1c5057f1', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '85e892441c844d3d4f5a85376d3d85a451087f5c', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0a9467efef7bb020c3e4fe7c38ff1bafcc3017c9', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '122faf36c3288de2daec437ef6e3031781c831f6', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5b39321913debc47108c5e43de093ae5645f1e13', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e348b272ee6f95bafabd3200ca492583383ebe75', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '58dc4e8203dbf9fff09058203ec70759b8f88141', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '49a3a8ccfc59b3b2c045a18fa4dd8ffadbb35c42', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '099d802e72c12541fc029ec7e4a05e016ba0297e', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dd51064d0d502703efee40baf493f1ed36263749', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8976cbcacc3ac601e33d881d1f145ed8b9d5bdd1', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cbf88e99992bbf4b5d39fd0d7c54e2b02a50d2d1', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a866ecccd3213e5c15160499b147a7372a06c7cd', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4e2577817d085450e4583dffc5a76f4ae873c426', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fc6ed809874e09a5551adf63b37f4479d106fc1f', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '842cc6702999d8f57d4d4147fac9c40de728b3d7', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '525574bf53d709945fce1e4cc560dada53be3c50', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b43552558d57c58eb0fb84d4544dabcd737af6bf', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '96d81ea15f81d3ce037fac6fdd9c74ec2e803ac9', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1527c9669f4faca6b1b6ca16c2718d1c0fcf944d', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '503afdbcbec0af83f2bee397c2d7181a051ef210', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '07cf8d1c8bc39dbc484f63c292975cf1da5d85cb', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '98e95f5ba641e3ff34df9bc162a72edbc6e13c19', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '605eefbc532ca988b1ac2d931dc0cddc1e0734c1', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '67c67953cdc2ef6d4682fbcb0b7c06e3d1e55891', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '105815a23d2c0e4942e2bd2e316a2143a4a92e71', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fa0ac4afaad8be8dc56410a7546361c25c3c4802', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f48ca0003ad0a3d29cd98e007af8cec323775264', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9ad0bdc242eab6604ce864803509c035a405249e', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4a5a9e609dfa607142f10b4acf1562fe3d60819b', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8bb00d1ef3f9b0b917e1f51047760ad6146fb704', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5f46698681f0c6cea71cd2f2148ad998cdec77d9', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f9af5197c74a52b2df9fe4398e9822bb8ec4006a', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0975fc50ab9e46701c66d78b01a93229328adb05', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '14863aa3cb5133184a15ac1799088e2c7ffe4d50', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2632a44952395a8bc462a796749ea4bd29a49034', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8bee4ac724903d6a074bfaa14b2034bc161c0197', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7a77b57ff943cf99b391fd36b47075665214a680', 'committer_username': 'vojtechjelinek', 'committer_name': 'Vojtěch Jelínek', 'committer_email': 'vojtech.jelinek@hey.com', 'commit_date': datetime.datetime(2014, 12, 10, 14, 8, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'efbf5b5fc198b8ed0d09a9be360d3c824de064a0', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'efbf6daa7f19aa65edd04649e9d54d5df10980ff', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '73c0da20d5fb30df33161743776ae0c902eb1de4', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '25d32d9f800b4e5d5a30af9f6eabd3d736dd9e02', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}]",Hitesh Tomar,44300735,,User,,30,,3,13
1111419892,M 2.2.1: Audit and Fix invalid profile picture inside UserSettingsModel,"## Overview
<!--
READ ME FIRST:
Please answer *both* questions below and check off every point from the Essential Checklist!
If there is no corresponding issue number, fill in N/A where it says [fill_in_number_here] below in 1.
-->

1. This PR fixes or fixes part of n/a.
2. This PR does the following: Contains 2 jobs, First is the audit job to filter out invalid profile_picture_data_url field of UserSettingsModel and another job is to fix the invalid profile_picture_data_url by generating gravatar for it.
**Note** - Please note that we are planning to handle the profile picture with wrong dimensions manually.

## Essential Checklist

- [ ] The PR title starts with ""Fix #bugnum: "", followed by a short, clear summary of the changes. (If this PR fixes part of an issue, prefix the title with ""Fix part of #bugnum: ..."".)
- [x] The linter/Karma presubmit checks have passed locally on your machine.
- [x] ""Allow edits from maintainers"" is checked. (See [here](https://help.github.com/en/github/collaborating-with-issues-and-pull-requests/allowing-changes-to-a-pull-request-branch-created-from-a-fork) for instructions on how to enable it.)
  - This lets reviewers restart your CircleCI tests for you.
- [x] The PR is made from a branch that's **not** called ""develop"".

## Proof that changes are correct

Below is the screenshot of the audit job when the `profile_picture_data_url` is empty or None.

![Screenshot from 2022-11-08 19-39-14](https://user-images.githubusercontent.com/44300735/200587969-e2ba6dd3-57b3-47d3-92d9-c13eb1f7b9da.png)

Below is the screenshot of the audit job when the profile picture has wrong dimensions, which is other than `150 x 150`.

![Screenshot from 2022-11-08 19-39-58](https://user-images.githubusercontent.com/44300735/200588223-2c833cb9-1721-4f5a-a6ea-c69a80b45a73.png)

Below is the screenshot of the migration job after fixing the empty `profile_picture_data_url`.

![Screenshot from 2022-11-08 19-41-04](https://user-images.githubusercontent.com/44300735/200588507-967cb754-479d-4a64-923e-34aca62a4b3e.png)

Below is the screenshot of the audit job after fixing the empty profile picture.

![Screenshot from 2022-11-08 19-40-31](https://user-images.githubusercontent.com/44300735/200588360-77f26f31-dc1d-4244-91b5-3d21409d16e1.png)

<!--
Add videos/screenshots of the user-facing interface to demonstrate that the changes
made in this PR work correctly. If this PR is for a developer-facing feature,
provide the videos/screenshots of developer-facing interface.

Please also include videos/screenshots of the developer tools
browser console, so that we can be sure that there are no console errors.

If the changes in your PRs are autogenerated via a script and you cannot provide proof
for the changes then please leave a comment ""No proof of changes needed because {{Reason}}""
and remove all the sections below.
-->

#### Proof of changes on desktop with slow/throttled network

<!--
Make sure to properly verify that everything works correctly, and that there are
no weird UI mistakes or other problems. Also, if there are any newly added fields,
try to fill them out and test that different inputs are correctly accepted/rejected.

Throttle the network (to 3G) using the browser Developer Tools (see references below).
There should be no performance or UI issues while the network is slow.

References:
 - Chrome: https://css-tricks.com/throttling-the-network/
 - Firefox: https://developer.mozilla.org/en-US/docs/Tools/Network_Monitor/Throttling
-->

#### Proof of changes on mobile phone

<!--
In some cases this is not needed (e.g. for pages that we do not expect to
support mobile phones, or for backend-only features).

Feel free to use the Developer Tools emulator for this.

References:
 - Chrome: https://developer.chrome.com/docs/devtools/device-mode/
 - Firefox: https://firefox-source-docs.mozilla.org/devtools-user/index.html#responsive-design-mode
-->

#### Proof of changes in Arabic language

<!--
If the PR changes the UI, make sure to add screenshots with the site
language set to Arabic as well (we use Arabic as it is a language written from right to left).
-->

## PR Pointers

- Make sure to follow the [instructions for making a code change](https://github.com/oppia/oppia/wiki/Make-a-pull-request).
- If you need a review or an answer to a question, and don't have permissions to assign people, **leave a comment** like the following: ""{{Question/comment}} @{{reviewer_username}} PTAL"". Oppiabot will help assign that person for you.
- For what code owners will expect, see the [Code Owner's wiki page](https://github.com/oppia/oppia/wiki/Oppia's-code-owners-and-checks-to-be-carried-out-by-developers).
- Make sure your PR follows conventions in the [style guide](https://github.com/oppia/oppia/wiki/Coding-style-guide), otherwise this will lead to review delays.
- Never force push. If you do, your PR will be closed.
- Some of the e2e tests are flaky, and can fail for reasons unrelated to your PR. We are working on fixing this, but in the meantime, if you need to restart the tests, please check the [""If your build fails"" wiki page](https://github.com/oppia/oppia/wiki/If-CI-checks-fail-on-your-PR).
",True,16492,https://api.github.com/repos/oppia/oppia/pulls/16492,https://github.com/oppia/oppia/pull/16492,closed,490,6,8,41,30,28,2,1,"[{'name': 'PR: Affects datastore layer'}, {'name': ""PR: don't merge - STALE BUILD""}]",2022-11-05 00:57:23+00:00,2023-01-02 19:38:12+00:00,5078449.0,"58 days, 18:40:49","[{'comment_id': 1014837077, 'comment_body': ""Hey @vojtechjelinek,\r\nPlease take a look at this test, Here I have assigned the `DEFAULT_IDENTICON_DATA_URL` as the profile picture URL which is for the `profile_picture_data_url`. Now as this is the test for the audit job I should not get any output because we have a valid `profile_picture_data_url` but it fails. So, I found out that I'm not able to calculate the size of the image in the audit job where I'm calculating the height and width. Also when I checked online to convert this default URL to image I was getting error. I also tried removing the `data:image/png;base64,` in front of the default URL but the image was still not loading. You can take a look at the Audit job having `_get_invalid_image` function which I use to filter the image. Please note that I also tried removing the line `63` from the function in order to check but still the audit job was not successful.\r\nPlease note that the `BASE64_STR` variable I define is for the base64 string that is successfully getting converted to image and the tests are passing.\r\nI will link the details to the error once the tests run completely.\r\nThanks"", 'comment_created': datetime.datetime(2022, 11, 6, 14, 13, 38, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 1015834177, 'comment_body': 'Hey @vojtechjelinek,\r\nAs per our discussion, I added the function for the conversion of png to binary, which is [`[utils.convert_png_data_url_to_binary]`](https://github.com/oppia/oppia/blob/develop/core/utils.py#L400). After running the tests I got to know that the dimensions of the default images are `76 x 76`. That means the dimension of [`[user_services.DEFAULT_IDENTICON_DATA_URL]`](https://github.com/oppia/oppia/blob/develop/core/domain/user_services.py#L70) is `76 x 76`.\r\nThanks', 'comment_created': datetime.datetime(2022, 11, 7, 19, 47, 45, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 1015941407, 'comment_body': 'So the default image is an exception from our normal images which are 150 × 150, right?', 'comment_created': datetime.datetime(2022, 11, 7, 22, 0, 26, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1015945344, 'comment_body': 'Yes, and at all the places where we have default images, they all have the wrong dimensions.', 'comment_created': datetime.datetime(2022, 11, 7, 22, 5, 47, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 1017091092, 'comment_body': 'Reporting the default images.', 'comment_created': datetime.datetime(2022, 11, 8, 20, 38, 48, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 1020746190, 'comment_body': 'insidr -> inside', 'comment_created': datetime.datetime(2022, 11, 12, 10, 51, 55, tzinfo=datetime.timezone.utc), 'commenter': 'kevintab95', 'type': 'User'}, {'comment_id': 1020746271, 'comment_body': 'Why are we logging this static text?', 'comment_created': datetime.datetime(2022, 11, 12, 10, 52, 43, tzinfo=datetime.timezone.utc), 'commenter': 'kevintab95', 'type': 'User'}, {'comment_id': 1021847659, 'comment_body': 'We just wanted to log the errors in case any exception occur, so that we can deal with it after that. That is all.\r\nThanks', 'comment_created': datetime.datetime(2022, 11, 14, 17, 19, 11, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 1021899318, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 11, 14, 18, 9, 40, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 1052061130, 'comment_body': '```suggestion\r\ngraft assets\r\n```\r\n\r\nSee the notation here https://packaging.python.org/en/latest/guides/using-manifest-in/#manifest-in-commands', 'comment_created': datetime.datetime(2022, 12, 19, 10, 46, 8, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1052062403, 'comment_body': 'Why is this needed?', 'comment_created': datetime.datetime(2022, 12, 19, 10, 47, 32, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1052064012, 'comment_body': 'Hmm, can you also test the same in the case when the `io.read` is not working?', 'comment_created': datetime.datetime(2022, 12, 19, 10, 49, 15, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1052066746, 'comment_body': '```suggestion\r\n        Returns:\r\n            Tuple[user_models.UserSettingsModel, bool]. The updated\r\n            UserSettingsModel.\r\n```\r\n\r\nAlso explain what the returned bool represents.', 'comment_created': datetime.datetime(2022, 12, 19, 10, 51, 27, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1052086870, 'comment_body': 'We need to read the image in the binary mode and for that we cannot specify the encoding because doing that will raise an error. So for that we would require to 2 ways for 2 modes, the above one is when we want to read simply from file and when we want to read an image or get data in binary form is mentioned below.', 'comment_created': datetime.datetime(2022, 12, 19, 11, 14, 49, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 1052089093, 'comment_body': ""On this 97 line I'm getting one lint error which is regarding the encoding. The error is as follows Using open without explicitly specifying an encoding . To read the image file in binary mode I cannot specify the encoding as it raises the error and for this the encoding needs to be None."", 'comment_created': datetime.datetime(2022, 12, 19, 11, 17, 36, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 1053466123, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 12, 20, 15, 47, 58, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 1053466376, 'comment_body': 'Added to the below test.', 'comment_created': datetime.datetime(2022, 12, 20, 15, 48, 14, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 1053466973, 'comment_body': 'Updated', 'comment_created': datetime.datetime(2022, 12, 20, 15, 48, 46, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 1054517675, 'comment_body': 'Rather use `binary_mode` instead of `is_binary`', 'comment_created': datetime.datetime(2022, 12, 21, 15, 27, 56, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1054527564, 'comment_body': '```suggestion\r\n@overload\r\ndef get_package_file_contents(\r\n    package: str, filepath: str, *, binary_mode: Literal[True]\r\n) -> bytes\r\n\r\n\r\n@overload\r\ndef get_package_file_contents(package: str, filepath: str) -> str\r\n\r\n\r\n@overload\r\ndef get_package_file_contents(\r\n    package: str, filepath: str, *, binary_mode: Literal[False]\r\n) -> str\r\n\r\n\r\ndef get_package_file_contents(\r\n    package: str, filepath: str, *, binary_mode: bool = False\r\n) -> Union[str, bytes]:\r\n```', 'comment_created': datetime.datetime(2022, 12, 21, 15, 35, 47, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1054528601, 'comment_body': 'The `assert` should no longer be needed when you implement the changes above.', 'comment_created': datetime.datetime(2022, 12, 21, 15, 36, 44, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1056015752, 'comment_body': 'Updated', 'comment_created': datetime.datetime(2022, 12, 23, 3, 39, 36, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 1056015784, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 12, 23, 3, 39, 42, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 1056015821, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 12, 23, 3, 39, 48, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 1057876575, 'comment_body': 'Please add separate test functions and do not extend the existing ones.', 'comment_created': datetime.datetime(2022, 12, 27, 19, 38, 40, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1057877756, 'comment_body': 'This should no longer be needed.', 'comment_created': datetime.datetime(2022, 12, 27, 19, 39, 32, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1058280542, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 12, 28, 11, 26, 20, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 1058280673, 'comment_body': 'Removed', 'comment_created': datetime.datetime(2022, 12, 28, 11, 26, 34, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}]","[{'commit_sha': 'b9728572e1cc6e9ccf8e3bece2b10a35545ec6ed', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f79dbd303661e9d9f70498e3145c5b70f1fe1d88', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '73d3d656b237142438635f764beacbeb92519b54', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3ba2eab90976b3c08228ed47cb02531b3e6de33a', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '480632957b1c889a24f356f5ab001879dacd833d', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8ce6d654126fb5c8201539f25563d23ab013d22e', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '86adc125b3cfbd08337584cfabee94b962f93257', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '167cdef556feac05d9f2a0cc56bf2f0031861457', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b4cb8b5e28a0d18c25b67d9826e5271c55501e1b', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7b14a23e19a3a06ac065ab903fda0e7660f5c174', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9d7ccb54987f711ccce020d8d145fb89a2e0505c', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '182f07b1ac8f0ecdc5df341ac05d8ea8515a4f91', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ac8a582e2481725c7890d74225b39e4a02b0f330', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e9221313643556c22ec5a047a8fe0293c368b3e6', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '09b118e9989801c602534efd10578d2119fb11b2', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '45661d3e24628b7b59a6e763cccbd5f0994447b4', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '18661da8ca905143e44857705d143a52ad1a3b88', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3ff653e84429681d1806bca90fb349834a16bb8e', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bb598dacc67d51dd11f2db290b4d5ba62383ae9c', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'febb6f039a51d02937285811a0c592c6788a2a87', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a36d142bdb5e952221a72afcc0946940303e71c4', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '856dca2f235b1b9cda263640604aa4374b3b717d', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4db68d4bc0adfd46ce67f83545a3aca928e8504f', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1c470bf0071aa28eca82f76db9f8154648ffe672', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '65d9b8b7402925d1d82888abf521926d425d4231', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '09b3c33f3bca2f5c86d68f4d09fde07ff07c9c31', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '20178cbaa070c9f48bfe1b1b3024c750c4065f8c', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6ceab52911cd1e7db72b303cc503936ff514bfa2', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5175ba4f283f13baff0925b9f14cc9dcb0f052cf', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f51d9695593be2e873eefc6ec6f9d85aa55b102d', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '52e144b371a29cd7cd11614b69f4eb56ad9286e5', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '25cee42f0155eaf9b8b7f7e42ad718cf73d1f89b', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd968500f6efb526e601674940f65dc10e269d55e', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c20cdc965d07e6aa59a755ae78a15de1ed7d003a', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4eb2a84126b454a1610d36e26163266517801f81', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ccc3eb002d6bec20f9dbcb3c8d589ca22350986e', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '603994bc61672a13532ec7d199918b5a08e1c684', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '24baffbcc0403fb3094a2280aa1227e7f80095a5', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '457d64853be70a75aa35d81ad299bfca41dd5361', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a217153c5332db45ae1732df2c0a5bfbca5d915f', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '552f1df15a639b1f1d943d56af6849d69c07561e', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}]",Hitesh Tomar,44300735,,User,,30,,3,13
1117783048,M 2.2.3: Changes to push user profile picture to GCS.,"## Overview
<!--
READ ME FIRST:
Please answer *both* questions below and check off every point from the Essential Checklist!
If there is no corresponding issue number, fill in N/A where it says [fill_in_number_here] below in 1.
-->

1. This PR fixes or fixes part of n/a.
2. This PR does the following: This PR handles the backend changes to push the user profile picture directly to GCS. Also handles the cleanup part for the `profile_picture_data_url` field, please note that except from the `gae_models` file for users we do cleanup everywhere.

## Essential Checklist

- [ ] The PR title starts with ""Fix #bugnum: "", followed by a short, clear summary of the changes. (If this PR fixes part of an issue, prefix the title with ""Fix part of #bugnum: ..."".)
- [x] The linter/Karma presubmit checks have passed locally on your machine.
- [x] ""Allow edits from maintainers"" is checked. (See [here](https://help.github.com/en/github/collaborating-with-issues-and-pull-requests/allowing-changes-to-a-pull-request-branch-created-from-a-fork) for instructions on how to enable it.)
  - This lets reviewers restart your CircleCI tests for you.
- [x] The PR is made from a branch that's **not** called ""develop"".

## Proof that changes are correct

<!--
Add videos/screenshots of the user-facing interface to demonstrate that the changes
made in this PR work correctly. If this PR is for a developer-facing feature,
provide the videos/screenshots of developer-facing interface.

Please also include videos/screenshots of the developer tools
browser console, so that we can be sure that there are no console errors.

If the changes in your PRs are autogenerated via a script and you cannot provide proof
for the changes then please leave a comment ""No proof of changes needed because {{Reason}}""
and remove all the sections below.
-->

#### Proof of changes on desktop with slow/throttled network

<!--
Make sure to properly verify that everything works correctly, and that there are
no weird UI mistakes or other problems. Also, if there are any newly added fields,
try to fill them out and test that different inputs are correctly accepted/rejected.

Throttle the network (to 3G) using the browser Developer Tools (see references below).
There should be no performance or UI issues while the network is slow.

References:
 - Chrome: https://css-tricks.com/throttling-the-network/
 - Firefox: https://developer.mozilla.org/en-US/docs/Tools/Network_Monitor/Throttling
-->

#### Proof of changes on mobile phone

<!--
In some cases this is not needed (e.g. for pages that we do not expect to
support mobile phones, or for backend-only features).

Feel free to use the Developer Tools emulator for this.

References:
 - Chrome: https://developer.chrome.com/docs/devtools/device-mode/
 - Firefox: https://firefox-source-docs.mozilla.org/devtools-user/index.html#responsive-design-mode
-->

#### Proof of changes in Arabic language

<!--
If the PR changes the UI, make sure to add screenshots with the site
language set to Arabic as well (we use Arabic as it is a language written from right to left).
-->

## PR Pointers

- Make sure to follow the [instructions for making a code change](https://github.com/oppia/oppia/wiki/Make-a-pull-request).
- If you need a review or an answer to a question, and don't have permissions to assign people, **leave a comment** like the following: ""{{Question/comment}} @{{reviewer_username}} PTAL"". Oppiabot will help assign that person for you.
- For what code owners will expect, see the [Code Owner's wiki page](https://github.com/oppia/oppia/wiki/Oppia's-code-owners-and-checks-to-be-carried-out-by-developers).
- Make sure your PR follows conventions in the [style guide](https://github.com/oppia/oppia/wiki/Coding-style-guide), otherwise this will lead to review delays.
- Never force push. If you do, your PR will be closed.
- Some of the e2e tests are flaky, and can fail for reasons unrelated to your PR. We are working on fixing this, but in the meantime, if you need to restart the tests, please check the [""If your build fails"" wiki page](https://github.com/oppia/oppia/wiki/If-CI-checks-fail-on-your-PR).
",True,16521,https://api.github.com/repos/oppia/oppia/pulls/16521,https://github.com/oppia/oppia/pull/16521,closed,2295,1823,177,150,86,242,0,1,[],2022-11-10 14:15:57+00:00,2023-03-19 06:33:42+00:00,11117865.0,"128 days, 16:17:45","[{'comment_id': 1020603960, 'comment_body': 'I think we should error in the case when the image does not exist.', 'comment_created': datetime.datetime(2022, 11, 11, 23, 3, 20, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1020604458, 'comment_body': ""Should we still work with the file as a data URL? Shouldn't we work with bytes already?"", 'comment_created': datetime.datetime(2022, 11, 11, 23, 5, 4, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1028395009, 'comment_body': 'I have updated this part.', 'comment_created': datetime.datetime(2022, 11, 21, 18, 28, 30, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 1028395115, 'comment_body': 'Updated!', 'comment_created': datetime.datetime(2022, 11, 21, 18, 28, 39, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 1031685148, 'comment_body': ""```suggestion\r\n        blob = cloud_storage_emulator.EmulatorBlob(\r\n            'name', 'string', 'image/webp')\r\n```"", 'comment_created': datetime.datetime(2022, 11, 24, 16, 25, 7, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1031685342, 'comment_body': 'Explain why is this needed.', 'comment_created': datetime.datetime(2022, 11, 24, 16, 25, 23, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1031692048, 'comment_body': 'This can only be done when `include_delete_at_end_models` is `False`, because when it is `True` we assume that ALL models were deleted so `UserSettingsModel` will not be accessible.', 'comment_created': datetime.datetime(2022, 11, 24, 16, 33, 4, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1031694466, 'comment_body': 'Why is this needed, per typing info `username` cannot be `None`.', 'comment_created': datetime.datetime(2022, 11, 24, 16, 36, 11, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1031694510, 'comment_body': 'Logging is not enough, the `verify_user_deleted` needs to return `False` when the images still exist (you can still log the information), but `_verify_profile_picture_is_deleted` also needs to return `bool` in order for this to work.\r\n\r\n', 'comment_created': datetime.datetime(2022, 11, 24, 16, 36, 16, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1031697796, 'comment_body': 'Why is this needed?', 'comment_created': datetime.datetime(2022, 11, 24, 16, 40, 36, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1031699900, 'comment_body': '```suggestion\r\nfrom PIL import Image\r\n```', 'comment_created': datetime.datetime(2022, 11, 24, 16, 43, 40, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1031700109, 'comment_body': ""```suggestion\r\n        with utils.open_file(\r\n            os.path.join(feconf.TESTS_DATA_DIR, 'test_png_img.png'),\r\n            'rb',\r\n            encoding=None\r\n        ) as f:\r\n```"", 'comment_created': datetime.datetime(2022, 11, 24, 16, 43, 58, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1031700344, 'comment_body': ""```suggestion\r\n        with utils.open_file(\r\n            os.path.join(feconf.TESTS_DATA_DIR, 'test_png_img.png'),\r\n            'rb',\r\n            encoding=None\r\n        ) as f:\r\n```"", 'comment_created': datetime.datetime(2022, 11, 24, 16, 44, 20, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1031702442, 'comment_body': 'Where do you verify that the file is actually returned in the zip?', 'comment_created': datetime.datetime(2022, 11, 24, 16, 47, 27, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1031703449, 'comment_body': 'Is this needed or did you use it just for testing?', 'comment_created': datetime.datetime(2022, 11, 24, 16, 48, 44, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1031704384, 'comment_body': ""```suggestion\r\n        with utils.open_file(\r\n            os.path.join(feconf.TESTS_DATA_DIR, 'test_png_img.png'), \r\n            'rb',\r\n            encoding=None\r\n        ) as f:\r\n            raw_image = f.read()\r\n```"", 'comment_created': datetime.datetime(2022, 11, 24, 16, 50, 5, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1031704787, 'comment_body': ""```suggestion\r\n        with utils.open_file(\r\n            os.path.join(feconf.TESTS_DATA_DIR, 'test_png_img.png'), \r\n            'rb',\r\n            encoding=None\r\n        ) as f:\r\n            raw_image = f.read()\r\n```"", 'comment_created': datetime.datetime(2022, 11, 24, 16, 50, 41, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1031705571, 'comment_body': '```suggestion\r\nclass SignupPage(\r\n    base.BaseHandler[Dict[str, str], SignupPageNormalizedRequestDict]\r\n):\r\n```', 'comment_created': datetime.datetime(2022, 11, 24, 16, 51, 46, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1031711429, 'comment_body': 'Hmm, should this be just a warning?', 'comment_created': datetime.datetime(2022, 11, 24, 16, 59, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1032799462, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 11, 26, 15, 12, 6, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 1032799468, 'comment_body': 'Updated', 'comment_created': datetime.datetime(2022, 11, 26, 15, 12, 13, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 1032799492, 'comment_body': 'Added this part with the condition when include_delete_at_end_models is False', 'comment_created': datetime.datetime(2022, 11, 26, 15, 12, 36, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 1032799498, 'comment_body': 'I have updated this.', 'comment_created': datetime.datetime(2022, 11, 26, 15, 12, 44, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 1032799539, 'comment_body': 'Done, I have updated the code.', 'comment_created': datetime.datetime(2022, 11, 26, 15, 13, 5, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 1032799662, 'comment_body': 'username can be None to prevent that part I added this and it was also creating problems for lots of test in the test file.', 'comment_created': datetime.datetime(2022, 11, 26, 15, 14, 13, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 1032799669, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 11, 26, 15, 14, 17, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 1032799674, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 11, 26, 15, 14, 22, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 1032799682, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 11, 26, 15, 14, 27, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 1032799823, 'comment_body': 'I think those tests are present in the `profile_test` file, in the handler part. Do we need separate testing for them? As all the tests were passing there I thought we would not require it.', 'comment_created': datetime.datetime(2022, 11, 26, 15, 15, 46, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 1032799827, 'comment_body': 'Removed', 'comment_created': datetime.datetime(2022, 11, 26, 15, 15, 52, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 1032799834, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 11, 26, 15, 15, 56, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 1032799852, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 11, 26, 15, 16, 1, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 1032799856, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 11, 26, 15, 16, 6, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 1032800104, 'comment_body': 'What else should we do? Do we have to return something else?', 'comment_created': datetime.datetime(2022, 11, 26, 15, 18, 36, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 1032800320, 'comment_body': ""Please note that the print statements were added intentionally, please ignore them. I'm still looking for a way to test this particular part and trying to debug it further. I will update this part after debugging. Also the linter is failing due to this only.\r\nThanks"", 'comment_created': datetime.datetime(2022, 11, 26, 15, 20, 36, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 1032808842, 'comment_body': 'Thinking about it we should first check if all the files exists and only then start doing modifications, so put these ifs to the above section.  line 1692', 'comment_created': datetime.datetime(2022, 11, 26, 16, 42, 46, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1032808995, 'comment_body': 'Unneeded comment.', 'comment_created': datetime.datetime(2022, 11, 26, 16, 44, 24, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1032809015, 'comment_body': 'What about the webp image?', 'comment_created': datetime.datetime(2022, 11, 26, 16, 44, 41, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1032809132, 'comment_body': 'Oh I though the tests are here, okay if it works in profile then it is fine.', 'comment_created': datetime.datetime(2022, 11, 26, 16, 45, 29, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1032809373, 'comment_body': ""```suggestion\r\n        logging.error(\r\n            '%s Profile picture is not deleted of user having '\r\n            'username %s.' % (WIPEOUT_LOGS_PREFIX, username)\r\n        )\r\n```"", 'comment_created': datetime.datetime(2022, 11, 26, 16, 46, 50, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1032809420, 'comment_body': 'Why is this needed?', 'comment_created': datetime.datetime(2022, 11, 26, 16, 47, 7, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1032809616, 'comment_body': 'But then the type is wrong.', 'comment_created': datetime.datetime(2022, 11, 26, 16, 48, 19, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1032809850, 'comment_body': '```suggestion\r\n        username = user_settings_model.username\r\n        if not _verify_profile_picture_is_deleted(username):\r\n            return False\r\n```\r\n\r\nThe model needs to exist for this to work.', 'comment_created': datetime.datetime(2022, 11, 26, 16, 50, 27, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1032812269, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 11, 26, 17, 16, 19, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 1032812281, 'comment_body': 'Removed', 'comment_created': datetime.datetime(2022, 11, 26, 17, 16, 25, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 1032812324, 'comment_body': 'I think we previously decided that we would not require to output the webp images that is why I did not added them.', 'comment_created': datetime.datetime(2022, 11, 26, 17, 16, 55, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 1032812358, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 11, 26, 17, 17, 2, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 1032812407, 'comment_body': 'The username can be None and if that is the case then the profile picture will not be present on GCS hence returning True.', 'comment_created': datetime.datetime(2022, 11, 26, 17, 17, 27, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 1032812555, 'comment_body': 'This code was updated, this is the old comment that is why I think. I removed this check from here and added where we are calling this function.', 'comment_created': datetime.datetime(2022, 11, 26, 17, 18, 56, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 1032812635, 'comment_body': 'I think I still am checking if the `user_settings_model` is present or not, if that is what you mean here.', 'comment_created': datetime.datetime(2022, 11, 26, 17, 19, 52, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 1032840217, 'comment_body': 'If we store user data in whatever form, then we need to export it, right?', 'comment_created': datetime.datetime(2022, 11, 26, 22, 39, 13, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 1032840340, 'comment_body': 'User should have a non-None username.', 'comment_created': datetime.datetime(2022, 11, 26, 22, 40, 28, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 1032840412, 'comment_body': 'Does mypy fail if you omit this? I thought the `if username is None` block above would then force it to be str. /cc @sahiljoster32 ', 'comment_created': datetime.datetime(2022, 11, 26, 22, 41, 13, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 1032840469, 'comment_body': 'Why are we doing the same thing here and above, and calling them two different names (png_binary and profile_picture_binary)?', 'comment_created': datetime.datetime(2022, 11, 26, 22, 41, 34, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 1032840513, 'comment_body': ""But by the mypy type definition of the argument, the argument is a str right, so None can't be passed in anyway?"", 'comment_created': datetime.datetime(2022, 11, 26, 22, 42, 35, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 1032840540, 'comment_body': 'of --> for\r\n\r\nAlso specify whether it\'s the png, webp, or ""png and webp"".', 'comment_created': datetime.datetime(2022, 11, 26, 22, 42, 57, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 1032840674, 'comment_body': ""At this point, wouldn't the user settings model already have been deleted? Where in the deletion process does this call happen?\r\n\r\nIf the user settings model has been deleted by this point, then where will you get the necessary information to verify the profile pictures?"", 'comment_created': datetime.datetime(2022, 11, 26, 22, 44, 13, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 1032851813, 'comment_body': 'Just a note that I have removed the print statements but I was not able to resolve the test for this particular part. I did created a debugging doc after the discussion with @vojtechjelinek [here](https://docs.google.com/document/d/1P7_xClSPdE2Jsc--XAD-TvHxwF2W5zE-8SUA_i3dhzM/edit?usp=sharing).', 'comment_created': datetime.datetime(2022, 11, 27, 1, 15, 51, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 1032861087, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 11, 27, 3, 30, 53, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 1032861135, 'comment_body': 'Oh it works without it, I guess I added this part before adding the `if username is None` check. Thanks for pointing it out.', 'comment_created': datetime.datetime(2022, 11, 27, 3, 31, 49, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 1032861161, 'comment_body': 'Ah, Updated.', 'comment_created': datetime.datetime(2022, 11, 27, 3, 32, 5, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 1032861193, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 11, 27, 3, 32, 10, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 1032861321, 'comment_body': ""Hmm, Yeah you are right. It is kind of problem, I will not be able to get the user settings and then the user's username. Should I add an additional argument for the username as I only need the username?"", 'comment_created': datetime.datetime(2022, 11, 27, 3, 33, 50, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 1032861339, 'comment_body': 'Updated the mypy type.', 'comment_created': datetime.datetime(2022, 11, 27, 3, 34, 2, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 1032861358, 'comment_body': 'Updated!', 'comment_created': datetime.datetime(2022, 11, 27, 3, 34, 14, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 1032862960, 'comment_body': ""If you do that, you'll need to update the docstring to explain why None is allowed and what None means.\r\n\r\nI don't understand why the username can be None though. That doesn't make sense logically. Did you look at the callers of this function and try to understand what is actually supposed to be going on here?"", 'comment_created': datetime.datetime(2022, 11, 27, 3, 59, 4, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 1032862968, 'comment_body': 'Profile picture in .png format is not ...\r\n\r\nDitto below for .webp.', 'comment_created': datetime.datetime(2022, 11, 27, 3, 59, 22, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 1032863023, 'comment_body': ""I don't know -- before you start making guesses about what to modify, it's important to understand the existing flow, so you can see what to surgically fix. Can you describe the existing flow and only then suggest what the correct thing to do is, based on that description?"", 'comment_created': datetime.datetime(2022, 11, 27, 4, 0, 26, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 1032873506, 'comment_body': ""Seems to me that this conversation is resolved 🙂, but if not I'm happy to help!"", 'comment_created': datetime.datetime(2022, 11, 27, 6, 16, 36, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 1033457198, 'comment_body': ""The `UserSettingsModel` (which has deletion policy `DELETE_AT_END`) will exist when we run the verify for the first time (we run it with `include_delete_at_end_models` set to `False` I think it might make sense to change the name of `include_delete_at_end_models` to more describe the situation), so that way we can retrieve data from it, if verify correctly checks that all other models were deleted we go on and delete `UserSettingsModel` and some other models, if it didn't work we then rerun the deletion again. "", 'comment_created': datetime.datetime(2022, 11, 28, 12, 1, 20, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1033483820, 'comment_body': ""```suggestion\r\n                'profile picture with png extension.' % old_username\r\n```"", 'comment_created': datetime.datetime(2022, 11, 28, 12, 29, 59, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1033483979, 'comment_body': ""```suggestion\r\n                'profile picture with webp extension.' % old_username\r\n```"", 'comment_created': datetime.datetime(2022, 11, 28, 12, 30, 10, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1033488381, 'comment_body': ""```suggestion\r\n        with self.swap(\r\n            user_services,\r\n            'generate_initial_profile_picture',\r\n            lambda _: None\r\n        ):\r\n```"", 'comment_created': datetime.datetime(2022, 11, 28, 12, 34, 46, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1033488901, 'comment_body': 'Please add more tests for this, or modify the existing ones to also check for the files.', 'comment_created': datetime.datetime(2022, 11, 28, 12, 35, 20, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1033494007, 'comment_body': ""I don't think this is needed for mock function"", 'comment_created': datetime.datetime(2022, 11, 28, 12, 40, 46, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1033496852, 'comment_body': 'Should this be removed?', 'comment_created': datetime.datetime(2022, 11, 28, 12, 43, 42, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1033497043, 'comment_body': 'Why is this needed?', 'comment_created': datetime.datetime(2022, 11, 28, 12, 43, 52, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1033498763, 'comment_body': 'I think this can be moved under `if feconf.ROLE_ID_MOBILE_LEARNER not in user_roles:` and then we do not need the username is not None check.', 'comment_created': datetime.datetime(2022, 11, 28, 12, 45, 36, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1033501080, 'comment_body': 'This should be WebP binary?', 'comment_created': datetime.datetime(2022, 11, 28, 12, 47, 57, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1033501512, 'comment_body': 'Missing tests for the times when the images are not deleted.', 'comment_created': datetime.datetime(2022, 11, 28, 12, 48, 22, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1033502491, 'comment_body': '```suggestion\r\ndef convert_data_url_to_binary(\r\n    image_data_url: str, file_type: str\r\n) -> bytes:\r\n```', 'comment_created': datetime.datetime(2022, 11, 28, 12, 49, 21, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1033502941, 'comment_body': '```suggestion\r\ndef convert_image_binary_to_data_url(\r\n    content: bytes, file_type: str\r\n) -> str:\r\n```', 'comment_created': datetime.datetime(2022, 11, 28, 12, 49, 48, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1035878442, 'comment_body': 'How are we making sure that removing this field does not breaks the whole functionality? Cause this would be resulting in an error on the frontend for sure.', 'comment_created': datetime.datetime(2022, 11, 30, 11, 55, 44, tzinfo=datetime.timezone.utc), 'commenter': 'paprajapati9', 'type': 'User'}, {'comment_id': 1037329103, 'comment_body': 'After some discussions I have removed this particular check and we will only be verifying the deletion of profile picture when the user role is not mobile-learner as they can have username as None.\r\nThanks', 'comment_created': datetime.datetime(2022, 12, 1, 16, 30, 38, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 1037329662, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 12, 1, 16, 31, 6, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 1037330238, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 12, 1, 16, 31, 35, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 1037330326, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 12, 1, 16, 31, 41, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 1037330647, 'comment_body': 'This part was removed completely.', 'comment_created': datetime.datetime(2022, 12, 1, 16, 32, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 1037331870, 'comment_body': 'Added the part where we check if after updating the username we are able to access the image via new username. The check is present in the above test `test_update_username`.', 'comment_created': datetime.datetime(2022, 12, 1, 16, 33, 8, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 1037332001, 'comment_body': 'Updated', 'comment_created': datetime.datetime(2022, 12, 1, 16, 33, 15, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 1037332094, 'comment_body': 'Removed', 'comment_created': datetime.datetime(2022, 12, 1, 16, 33, 20, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 1037333588, 'comment_body': 'Yeah, removed the check now we only check if the username is None or not, if it is then we return from there. Please note that this function gets called when a new user sign up and as the mobile-user can have None username we are directly returning from the function.', 'comment_created': datetime.datetime(2022, 12, 1, 16, 34, 48, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 1037333699, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 12, 1, 16, 34, 54, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 1037333825, 'comment_body': 'Updated', 'comment_created': datetime.datetime(2022, 12, 1, 16, 35, 1, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 1037333946, 'comment_body': 'Updated', 'comment_created': datetime.datetime(2022, 12, 1, 16, 35, 8, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 1037334051, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 12, 1, 16, 35, 15, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 1037334131, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 12, 1, 16, 35, 20, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 1037344406, 'comment_body': 'Yes you are right, please note that these changes are part of a complete project and for the detailed description and sequence of execution you can take a look at this [comment](https://github.com/oppia/oppia/pull/16584/files#r1034598191)', 'comment_created': datetime.datetime(2022, 12, 1, 16, 45, 7, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 1038130659, 'comment_body': '**Edit**\r\nI have removed the check where we check for the username is None or not, the reason being is that as the mobile is not connected in any way to web regarding the profile pictures so the user cannot have username as None at all. There is no possibility I can think of where user can even perform anything without having username, both via the code and via the GUI hence removing the check.', 'comment_created': datetime.datetime(2022, 12, 2, 13, 12, 45, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 1068021328, 'comment_body': '```suggestion\r\n            <img class=""group-learners-card-avatar"" \r\n                 [src]=""getProfileImageDataUrl(learnerInfo.username)"">\r\n```', 'comment_created': datetime.datetime(2023, 1, 12, 11, 41, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1068021588, 'comment_body': '```suggestion\r\n            <img class=""group-learners-card-avatar"" \r\n                 [src]=""getProfileImageDataUrl(learnerInfo.username)"">\r\n```', 'comment_created': datetime.datetime(2023, 1, 12, 11, 41, 17, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1068022462, 'comment_body': 'Why only PNG?', 'comment_created': datetime.datetime(2023, 1, 12, 11, 42, 23, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1068026108, 'comment_body': 'Hmm, do we need this? Cannot we make sure that we always either pass a username or we pass `null` and in that case there is no point for getting the user info?', 'comment_created': datetime.datetime(2023, 1, 12, 11, 46, 46, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1068026952, 'comment_body': 'Why we are still returning blob here? You can pass the URL as is into the img src right? Only in case of localhost you need to return blob, but you already do that above.', 'comment_created': datetime.datetime(2023, 1, 12, 11, 47, 40, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1068028156, 'comment_body': 'I think that should also get rid of any promises from this function.', 'comment_created': datetime.datetime(2023, 1, 12, 11, 48, 56, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1069796230, 'comment_body': ""I think we would require this. For example, in [blog-dashboard-page.component.ts](https://github.com/oppia/oppia/blob/develop/core/templates/pages/blog-dashboard-page/blog-dashboard-page.component.ts) we would require a username, now the way to get that is via `blogDashboardData` and we are doing this part in the `initMainTab()` but the first problem is that we would require to check both the draft and published blogs for the authorUsername and the second problem that I'm seeing is that whenever I'm trying to print the `dashboardData` I'm getting the `authorUsername` as undefined. You can check the below pic for reference:\r\n![Screenshot from 2023-01-13 23-34-40](https://user-images.githubusercontent.com/44300735/212389456-a5c7a902-8c25-4bdf-8543-8aee24f6253f.png)\r\n\r\nI think for this purpose it would make sense to get the username at this place only.\r\nThanks"", 'comment_created': datetime.datetime(2023, 1, 13, 18, 6, 58, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 1069798769, 'comment_body': 'Yep! You are correct we only need to pass the URL and I will make the changes. Now if we go ahead with the current method of getting the username we would require to return the Promise as we use the UserInfo promise to get the username.', 'comment_created': datetime.datetime(2023, 1, 13, 18, 8, 53, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 1069804384, 'comment_body': 'How we will be able to display both the `png` and `webp` images?', 'comment_created': datetime.datetime(2023, 1, 13, 18, 12, 44, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 1082657743, 'comment_body': ""```suggestion\r\n    with io.BytesIO() as output:\r\n        image = Image.open(io.BytesIO(png_binary)).convert('RGB')\r\n        image.save(output, 'webp')\r\n        return output.getvalue()\r\n```"", 'comment_created': datetime.datetime(2023, 1, 20, 14, 55, 8, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1082678532, 'comment_body': 'Hmm, should we just return tuple of png, webp URL?', 'comment_created': datetime.datetime(2023, 1, 20, 15, 8, 54, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1082678796, 'comment_body': '```suggestion\r\n  getProfileImageDataUrl(\r\n      username: string, isWebp: boolean = false\r\n  ): string {\r\n```', 'comment_created': datetime.datetime(2023, 1, 20, 15, 9, 10, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1082682023, 'comment_body': ""Hmm do you think that profile picture us just a decoration or should we add an alt tag? I'm bit unsure about it."", 'comment_created': datetime.datetime(2023, 1, 20, 15, 12, 6, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1082683882, 'comment_body': 'Wait, these seem to be almost the same.', 'comment_created': datetime.datetime(2023, 1, 20, 15, 13, 53, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1082693779, 'comment_body': 'Hmm, should the promise be kept here?', 'comment_created': datetime.datetime(2023, 1, 20, 15, 22, 16, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1082694392, 'comment_body': 'We want to make sure that the request finishes before we reload the page.', 'comment_created': datetime.datetime(2023, 1, 20, 15, 22, 50, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1082697459, 'comment_body': 'Hmm, in some places we use this call function approach and in some we use set variable approach should this be unified?', 'comment_created': datetime.datetime(2023, 1, 20, 15, 25, 48, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1082777227, 'comment_body': 'Why is this needed, cannot you just use `profilePicturePngDataUrl` directly?', 'comment_created': datetime.datetime(2023, 1, 20, 16, 26, 55, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1082779101, 'comment_body': ""Please remove the previous import and only do \r\n```suggestion\r\nimport { AppConstants } from 'app.constants';\r\n```\r\n`assets/constant` is a subset of `app.constants`\r\n"", 'comment_created': datetime.datetime(2023, 1, 20, 16, 28, 8, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1083266390, 'comment_body': 'Done', 'comment_created': datetime.datetime(2023, 1, 21, 9, 14, 51, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 1083266403, 'comment_body': 'Done', 'comment_created': datetime.datetime(2023, 1, 21, 9, 15, 3, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 1083266473, 'comment_body': 'You are right, I have updated the `alt` tag.\r\nThanks', 'comment_created': datetime.datetime(2023, 1, 21, 9, 15, 29, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 1083266694, 'comment_body': ""Yep! but the values will be different. We want to display the profile pictures differently when it is not of the current user. As we are getting the values of profile picture by the username it won't be a problem if we are getting of current user or some other user.\r\nThanks"", 'comment_created': datetime.datetime(2023, 1, 21, 9, 17, 16, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 1083266915, 'comment_body': 'You are right, So I made a small change for reloading, We are mainly concerned about the image we want to store at the server and for this what we will be doing is to reload the page after we have successfully pushed the image to the backend. Please take a look at the changes and let me know if it sounds good to you.', 'comment_created': datetime.datetime(2023, 1, 21, 9, 19, 39, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 1083267050, 'comment_body': 'Yes, the reason being is that in case we have list of users for which we want to display the profile picture we are using this method. In this case in our HTML we are iterating over the users and then passing the username to the function so that we can fetch the profile picture of that specefic user.', 'comment_created': datetime.datetime(2023, 1, 21, 9, 21, 19, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 1083267066, 'comment_body': 'Yep! I have updated this part.', 'comment_created': datetime.datetime(2023, 1, 21, 9, 21, 33, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 1083267072, 'comment_body': 'Done', 'comment_created': datetime.datetime(2023, 1, 21, 9, 21, 37, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 1083267433, 'comment_body': 'I was also thinking about this part but for the part where we have stored the profile picture in the session storage we are only returning that picture so we cannot always return tuple.\r\nThinking of this what we can do is to also return the tuple for the images stored in localStorage. So it will be something like return (localStoredImage, localStoredImage). Does this approach sounds good to you?\r\nThanks ', 'comment_created': datetime.datetime(2023, 1, 21, 9, 25, 4, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 1083304771, 'comment_body': 'I think it is fine to return a tuple with the same element(PNG image) for the specific case.', 'comment_created': datetime.datetime(2023, 1, 21, 15, 57, 55, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1083305464, 'comment_body': 'But we only need one of those, right?\r\n', 'comment_created': datetime.datetime(2023, 1, 21, 16, 4, 15, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1083305731, 'comment_body': 'Hmm, right, makes sense.', 'comment_created': datetime.datetime(2023, 1, 21, 16, 7, 17, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1083305931, 'comment_body': 'But we have different CSS for them. For current we have `e2e-test-profile-current-user-photo` and for other we have `e2e-test-profile-other-user-photo`', 'comment_created': datetime.datetime(2023, 1, 21, 16, 8, 57, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 1083434463, 'comment_body': 'Done', 'comment_created': datetime.datetime(2023, 1, 22, 11, 23, 28, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 1083449486, 'comment_body': 'Ah, I missed that, but looking at the usage if these two classes in e2e test I think we can keep just one of these and then modify the e2e tests a bit to not differentiate between the types of profile picture.', 'comment_created': datetime.datetime(2023, 1, 22, 13, 5, 16, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1083450301, 'comment_body': 'Please add an explanatory comment about this.', 'comment_created': datetime.datetime(2023, 1, 22, 13, 9, 58, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1083450953, 'comment_body': 'Can we simplify this a bit by destructuring https://www.geeksforgeeks.org/how-tuple-destructuring-works-in-typescript/?', 'comment_created': datetime.datetime(2023, 1, 22, 13, 14, 8, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1083452053, 'comment_body': 'ditto elsewhere', 'comment_created': datetime.datetime(2023, 1, 22, 13, 21, 9, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1083452339, 'comment_body': '```suggestion\r\n  profilePicturePngDataUrl: string | null = null;\r\n  profilePictureWebpDataUrl: string | null = null;\r\n```', 'comment_created': datetime.datetime(2023, 1, 22, 13, 23, 1, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1083452412, 'comment_body': 'OR\r\n```suggestion\r\n  profilePicturePngDataUrl!: string;\r\n  profilePictureWebpDataUrl!: string;\r\n```', 'comment_created': datetime.datetime(2023, 1, 22, 13, 23, 40, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1083453145, 'comment_body': 'Is it needed for local storage too? I think we should still preserve the reload but the comment might be different.', 'comment_created': datetime.datetime(2023, 1, 22, 13, 27, 21, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1083453737, 'comment_body': '```suggestion\r\n    this.userService.setProfileImageDataUrlAsync(image).then(() => {\r\n      // The reload is needed in order to update the profile picture\r\n      // in the top-right corner.\r\n      this.windowRef.nativeWindow.location.reload();\r\n    });\r\n```', 'comment_created': datetime.datetime(2023, 1, 22, 13, 30, 29, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1083454835, 'comment_body': 'Missing alt, please make sure it is everywhere.', 'comment_created': datetime.datetime(2023, 1, 22, 13, 34, 28, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1083455402, 'comment_body': 'Should this be called from the HTML', 'comment_created': datetime.datetime(2023, 1, 22, 13, 38, 18, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1083456222, 'comment_body': '```suggestion\r\n  profilePicturePngDataUrl!: string;\r\n  profilePictureWebpDataUrl!: string;\r\n```', 'comment_created': datetime.datetime(2023, 1, 22, 13, 43, 53, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1083456389, 'comment_body': '```suggestion\r\n      newMessageId: number, newMessageText: string, authorUsername: string\r\n  ): FeedbackMessageSummary {\r\n```', 'comment_created': datetime.datetime(2023, 1, 22, 13, 44, 58, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1083456459, 'comment_body': '```suggestion\r\n      createdOnMsecs: number\r\n  ) {\r\n```', 'comment_created': datetime.datetime(2023, 1, 22, 13, 45, 20, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1083456874, 'comment_body': ""I don't understand this, it should either be a `<picture>` or not here."", 'comment_created': datetime.datetime(2023, 1, 22, 13, 47, 8, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1083457029, 'comment_body': 'Should we modify these images to have the same dimensions as regular images?', 'comment_created': datetime.datetime(2023, 1, 22, 13, 48, 10, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1084309293, 'comment_body': 'I have updated this part.', 'comment_created': datetime.datetime(2023, 1, 23, 16, 57, 8, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 1084309562, 'comment_body': 'Done', 'comment_created': datetime.datetime(2023, 1, 23, 16, 57, 22, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 1084309634, 'comment_body': 'Done', 'comment_created': datetime.datetime(2023, 1, 23, 16, 57, 27, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 1084309719, 'comment_body': 'Done', 'comment_created': datetime.datetime(2023, 1, 23, 16, 57, 32, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 1084311971, 'comment_body': ""Yep! We also want to update the profile picture on top navbar we have. Should I replace the `top-right` with `top-navbar`? I'm not sure can you suggest something?"", 'comment_created': datetime.datetime(2023, 1, 23, 16, 59, 24, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 1084312096, 'comment_body': 'Done', 'comment_created': datetime.datetime(2023, 1, 23, 16, 59, 30, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 1084312235, 'comment_body': 'Done', 'comment_created': datetime.datetime(2023, 1, 23, 16, 59, 36, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 1084312845, 'comment_body': 'I have updated all the parts where we had an extra function for setting the profile pictures.', 'comment_created': datetime.datetime(2023, 1, 23, 17, 0, 7, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 1084312948, 'comment_body': 'Done', 'comment_created': datetime.datetime(2023, 1, 23, 17, 0, 13, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 1084313301, 'comment_body': 'Done', 'comment_created': datetime.datetime(2023, 1, 23, 17, 0, 29, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 1084314172, 'comment_body': ""I'm a bit confused too, I mean do we even require an extra image here?"", 'comment_created': datetime.datetime(2023, 1, 23, 17, 1, 6, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 1084314404, 'comment_body': 'I have updated this part.', 'comment_created': datetime.datetime(2023, 1, 23, 17, 1, 16, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 1084352871, 'comment_body': 'Not really. I just thought that for the local storage, the image will get updated, but I now realized that it is not the case.', 'comment_created': datetime.datetime(2023, 1, 23, 17, 36, 24, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1084353428, 'comment_body': '@lkbhitesh07 You missed this.', 'comment_created': datetime.datetime(2023, 1, 23, 17, 36, 59, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1084354034, 'comment_body': 'Not sure, you will have to investigate the code.', 'comment_created': datetime.datetime(2023, 1, 23, 17, 37, 40, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1084365869, 'comment_body': 'Please log a warning if any of these is not a file.', 'comment_created': datetime.datetime(2023, 1, 23, 17, 49, 30, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1084373752, 'comment_body': '```suggestion\r\n        user_settings_model = user_models.UserSettingsModel.get(user_id)\r\n```', 'comment_created': datetime.datetime(2023, 1, 23, 17, 57, 47, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1084376936, 'comment_body': '```suggestion\r\n\tall_profile_images_deleted = True\r\n    if fs.isfile(filename_png):\r\n        logging.error(\r\n            \'%s Profile picture in .png format is not deleted for user having \'\r\n            \'username ""%s"".\' % (WIPEOUT_LOGS_PREFIX, username)\r\n        )\r\n        all_profile_images_deleted = False\r\n    \r\n    if fs.isfile(filename_webp):\r\n        logging.error(\r\n            \'%s Profile picture in .webp format is not deleted for user having \'\r\n            \'username ""%s"".\' % (WIPEOUT_LOGS_PREFIX, username)\r\n        )\r\n        all_profile_images_deleted = False\r\n        \r\n    return all_profile_images_deleted\r\n```', 'comment_created': datetime.datetime(2023, 1, 23, 18, 0, 54, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1084377230, 'comment_body': '```suggestion\r\n        user_settings_model = user_models.UserSettingsModel.get(user_id)\r\n```', 'comment_created': datetime.datetime(2023, 1, 23, 18, 1, 14, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1084381460, 'comment_body': 'Should the verification be stronger? Maybe `user_roles == [feconf.ROLE_ID_MOBILE_LEARNER]` (not sure please check it first).', 'comment_created': datetime.datetime(2023, 1, 23, 18, 5, 13, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1084387343, 'comment_body': ""```suggestion\r\n            self.assertEqual(\r\n                logs[0],\r\n                '[WIPEOUT] Profile picture in .png format is not deleted '\r\n                'for user having username username2.'\r\n            )\r\n```"", 'comment_created': datetime.datetime(2023, 1, 23, 18, 10, 25, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1084387760, 'comment_body': 'ditto below', 'comment_created': datetime.datetime(2023, 1, 23, 18, 10, 53, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1084390470, 'comment_body': 'Please use the with only on the actually relevant part (`logs` will be available even outside the `with`-block.', 'comment_created': datetime.datetime(2023, 1, 23, 18, 13, 56, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1084391538, 'comment_body': 'Please use more descriptive name for the file system?', 'comment_created': datetime.datetime(2023, 1, 23, 18, 15, 6, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1084394350, 'comment_body': '```suggestion\r\n        <img mat-card-avatar \r\n             [src]=""authorProfilePicPngUrl""\r\n             class=""authorProfilePic e2e-test-author-profile-photo""\r\n             alt=""Profile image of the author"">\r\n```', 'comment_created': datetime.datetime(2023, 1, 23, 18, 18, 2, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1084394905, 'comment_body': '```suggestion\r\n        <img mat-card-avatar \r\n             [src]=""authorProfilePicPngUrl""\r\n             class=""e2e-test-profile-user-photo""\r\n             alt=""Profile image of the author of the blog post"">\r\n```', 'comment_created': datetime.datetime(2023, 1, 23, 18, 18, 41, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1084396437, 'comment_body': 'ditto below', 'comment_created': datetime.datetime(2023, 1, 23, 18, 20, 16, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1084547343, 'comment_body': 'Hmm, should we move the fetching of the image into the input-response-pair? I do not see why we need to load it here and then pass it to the input pair.', 'comment_created': datetime.datetime(2023, 1, 23, 21, 1, 23, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1084548957, 'comment_body': '```suggestion\r\n    let [pngImageUrl,] = this.userService.getProfileImageDataUrlAsync(\r\n      username);\r\n    return pngImageUrl;\r\n  }\r\n\r\n  getProfileImageWebpDataUrl(username: string): string {\r\n    let [, webpImageUrl] = this.userService.getProfileImageDataUrlAsync(\r\n      username);\r\n    return webpImageUrl;\r\n```', 'comment_created': datetime.datetime(2023, 1, 23, 21, 2, 51, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1084549630, 'comment_body': '```suggestion\r\n          <picture>\r\n            <source type=""image/webp"" \r\n                    [srcset]=""getProfileImageWebpDataUrl(learnerProgress.username)"">\r\n            <source type=""image/png"" \r\n                    [srcset]=""getProfileImagePngDataUrl(learnerProgress.username)"">\r\n            <img [src]=""getProfileImagePngDataUrl(learnerProgress.username)"">\r\n          </picture>\r\n```', 'comment_created': datetime.datetime(2023, 1, 23, 21, 3, 27, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1084549769, 'comment_body': 'ditto below', 'comment_created': datetime.datetime(2023, 1, 23, 21, 3, 36, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1084551879, 'comment_body': '```suggestion\r\n                    <picture>\r\n                      <source type=""image/webp"" \r\n                              [srcset]=""getProfileImageWebpDataUrl(learnerInfo.username)"">\r\n                      <source type=""image/png"" \r\n                              [srcset]=""getProfileImagePngDataUrl(learnerInfo.username)"">\r\n                      <img [src]=""getProfileImagePngDataUrl(learnerInfo.username)"" \r\n                           alt=""User profile picture"">\r\n                    </picture>\r\n```', 'comment_created': datetime.datetime(2023, 1, 23, 21, 5, 41, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1084552076, 'comment_body': 'ditto below', 'comment_created': datetime.datetime(2023, 1, 23, 21, 5, 53, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1084552619, 'comment_body': '```suggestion\r\n    let [pngImageUrl,] = this.userService.getProfileImageDataUrlAsync(\r\n```', 'comment_created': datetime.datetime(2023, 1, 23, 21, 6, 26, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1084553232, 'comment_body': 'ditto as above', 'comment_created': datetime.datetime(2023, 1, 23, 21, 7, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1084558727, 'comment_body': '```suggestion\r\n    // Normally, we return a tuple of PNG image URL and WebP image URL. \r\n    // In emulator mode we use local storage and we only store the PNG image.\r\n    // To handle this we return a tuple of the same PNG images in emulator mode.\r\n```', 'comment_created': datetime.datetime(2023, 1, 23, 21, 12, 3, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1084560680, 'comment_body': ""```suggestion\r\n    if (AppConstants.EMULATOR_MODE) {\r\n      let localStoredImage = this.imageLocalStorageService.getRawImageData(\r\n        username + '_profile_picture.png');\r\n      if (localStoredImage == null) {\r\n        return [defaultUrlPng, defaultUrlWebp];\r\n      }\r\n      return [localStoredImage, localStoredImage];\r\n    } else {\r\n      let pngImageUrl = this.urlInterpolationService.interpolateUrl(\r\n        this.assetsBackendApiService.profileImagePngUrlTemplate,\r\n        {username: username});\r\n      let WebpImageUrl = this.urlInterpolationService.interpolateUrl(\r\n        this.assetsBackendApiService.profileImageWebpUrlTemplate,\r\n        {username: username});\r\n      return [pngImageUrl, WebpImageUrl];\r\n    }\r\n```\r\n\r\nAnd move the image above the `return [localStoredImage, localStoredImage];`"", 'comment_created': datetime.datetime(2023, 1, 23, 21, 13, 56, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1084563298, 'comment_body': ""Isn't this called from anywhere?"", 'comment_created': datetime.datetime(2023, 1, 23, 21, 15, 48, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1093456166, 'comment_body': 'Done, also added the tests for the same.', 'comment_created': datetime.datetime(2023, 2, 1, 16, 26, 26, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 1093458919, 'comment_body': 'Regarding this, I was not able to use the `get` here as I was getting `EntityNotFoundError` but when I use `get_by_id` it works fine. I tried to search if we somewhere use `get` with `UserSettingsModel`, I got no results but we do use `get_by_id` everywhere. I think this will be fine.\r\nThanks', 'comment_created': datetime.datetime(2023, 2, 1, 16, 28, 38, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 1093459087, 'comment_body': 'Done', 'comment_created': datetime.datetime(2023, 2, 1, 16, 28, 47, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 1093459364, 'comment_body': 'Same reason as above.', 'comment_created': datetime.datetime(2023, 2, 1, 16, 29, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 1093461137, 'comment_body': 'Done', 'comment_created': datetime.datetime(2023, 2, 1, 16, 30, 27, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 1093461361, 'comment_body': 'Got it, I have updated this.', 'comment_created': datetime.datetime(2023, 2, 1, 16, 30, 39, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 1093461455, 'comment_body': 'Done', 'comment_created': datetime.datetime(2023, 2, 1, 16, 30, 45, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 1093461680, 'comment_body': 'Done', 'comment_created': datetime.datetime(2023, 2, 1, 16, 30, 50, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 1093461874, 'comment_body': 'Done', 'comment_created': datetime.datetime(2023, 2, 1, 16, 30, 56, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 1093465944, 'comment_body': 'The reason we are not doing that way because the value of the profile picture depends whether the tutor card is present on the exploration editor page or not which seems more specific thing for the tutor card.', 'comment_created': datetime.datetime(2023, 2, 1, 16, 34, 16, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 1093466169, 'comment_body': 'Done', 'comment_created': datetime.datetime(2023, 2, 1, 16, 34, 28, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 1093466342, 'comment_body': 'Done', 'comment_created': datetime.datetime(2023, 2, 1, 16, 34, 35, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 1093466436, 'comment_body': 'Done', 'comment_created': datetime.datetime(2023, 2, 1, 16, 34, 40, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 1093466586, 'comment_body': 'Done', 'comment_created': datetime.datetime(2023, 2, 1, 16, 34, 46, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 1093466676, 'comment_body': 'Done', 'comment_created': datetime.datetime(2023, 2, 1, 16, 34, 51, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 1093466794, 'comment_body': 'Done', 'comment_created': datetime.datetime(2023, 2, 1, 16, 34, 56, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 1093467008, 'comment_body': 'Done', 'comment_created': datetime.datetime(2023, 2, 1, 16, 35, 5, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 1093467373, 'comment_body': 'I have edited all the occurrences of this.', 'comment_created': datetime.datetime(2023, 2, 1, 16, 35, 23, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 1093474399, 'comment_body': 'All the occurrences where we have a check related to `ROLE_ID_MOBILE_LEARNER` we do it like this only, for reference in function `pre_delete_user` and `delete_user`, that also make sense because if we have a role of mobile learner inside the list of roles we do not want to do anything with the profile picture or deletion. Let me know what do you think.\r\nThanks', 'comment_created': datetime.datetime(2023, 2, 1, 16, 41, 14, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 1093685220, 'comment_body': 'Hmm, can you explain it more please?', 'comment_created': datetime.datetime(2023, 2, 1, 20, 13, 53, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1093725458, 'comment_body': 'Wait that is weird, it should work almost the same as `get_by_id`. Can you please explain the issue more.', 'comment_created': datetime.datetime(2023, 2, 1, 21, 3, 26, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1093726436, 'comment_body': 'Okay, lets keep it as is.', 'comment_created': datetime.datetime(2023, 2, 1, 21, 4, 41, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1093726850, 'comment_body': '```suggestion\r\n    def test_log_error_when_profile_pictures_are_missing_while_deletion(\r\n        self\r\n    ) -> None:\r\n```', 'comment_created': datetime.datetime(2023, 2, 1, 21, 5, 12, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1093727493, 'comment_body': ""```suggestion\r\n        self.assertEqual(\r\n            logs,\r\n            [\r\n                '[WIPEOUT] Profile picture of username username2 in '\r\n                '.png format does not exists.',\r\n                '[WIPEOUT] Profile picture of username username2 in '\r\n                '.webp format does not exists.'\r\n            ]\r\n         )\r\n```"", 'comment_created': datetime.datetime(2023, 2, 1, 21, 6, 6, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1093727935, 'comment_body': 'ditto below', 'comment_created': datetime.datetime(2023, 2, 1, 21, 6, 43, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1093728116, 'comment_body': 'ditto below', 'comment_created': datetime.datetime(2023, 2, 1, 21, 6, 58, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1093731645, 'comment_body': 'Not done', 'comment_created': datetime.datetime(2023, 2, 1, 21, 10, 37, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1093733326, 'comment_body': 'Make sure to not commit this.', 'comment_created': datetime.datetime(2023, 2, 1, 21, 12, 21, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1093777715, 'comment_body': 'I agree, I\'m not sure what is going wrong here. When I use `get` instead of `get_by_id` I get the following error\r\n```\r\nTraceback (most recent call last):\r\n  File ""/home/lkbhitesh07/Desktop/oppia/oppia/core/domain/wipeout_service_test.py"", line 5759, in test_log_error_when_profile_pictures_are_missing_while_deletion\r\n    wipeout_service.delete_user(\r\n  File ""/home/lkbhitesh07/Desktop/oppia/oppia/core/domain/wipeout_service.py"", line 507, in delete_user\r\n    user_settings_model = user_models.UserSettingsModel.get(user_id)\r\n  File ""/home/lkbhitesh07/Desktop/oppia/oppia/core/storage/base_model/gae_models.py"", line 358, in get\r\n    raise cls.EntityNotFoundError(\r\ncore.storage.base_model.gae_models.BaseModel.EntityNotFoundError: Entity for class UserSettingsModel with id uid_ipuuzrdbeobooegbdewbbxqiglyyrxvs not found\r\n```\r\nAfter this, I thought I should take a look at other tests where we use `UserSettingsModel.get(user_id)` but there were none and when I checked for `UserSettingsModel.get_by_id(user_id)` there were several. Below you can find the relevant files:\r\n[wipeout_service_test](https://github.com/oppia/oppia/blob/cf506ed05312ae3beaf079971b67e0a2061f81fa/core/domain/wipeout_service_test.py#L5719)\r\n[wipeout_service](https://github.com/oppia/oppia/blob/cf506ed05312ae3beaf079971b67e0a2061f81fa/core/domain/wipeout_service.py#L410)', 'comment_created': datetime.datetime(2023, 2, 1, 22, 2, 35, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 1093784684, 'comment_body': ""Sure,\r\nIn [tutor-card.component.ts](https://github.com/oppia/oppia/blob/cf506ed05312ae3beaf079971b67e0a2061f81fa/core/templates/pages/exploration-player-page/learner-experience/tutor-card.component.ts#L171) file we set the profile picture according to the mode of exploration, whether it is in the edit mode or in preview mode.\r\nThere is no problem in shifting the whole profile picture part to the `input-response-pair` we can do that but don't you think this particular part is more relevant to the `exploration-player-page` related and should be here only.\r\nLet me know what do you think we can totally shift this part."", 'comment_created': datetime.datetime(2023, 2, 1, 22, 12, 6, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 1093793463, 'comment_body': 'removed', 'comment_created': datetime.datetime(2023, 2, 1, 22, 23, 52, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 1093793508, 'comment_body': 'Done', 'comment_created': datetime.datetime(2023, 2, 1, 22, 23, 57, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 1093793586, 'comment_body': 'Done', 'comment_created': datetime.datetime(2023, 2, 1, 22, 24, 3, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 1093794180, 'comment_body': 'Done now.', 'comment_created': datetime.datetime(2023, 2, 1, 22, 24, 54, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 1093797321, 'comment_body': 'Need to change it back as the lint was failing.', 'comment_created': datetime.datetime(2023, 2, 1, 22, 28, 26, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 1095102736, 'comment_body': 'Yeah, I think I agree with you, it makes more sense here.', 'comment_created': datetime.datetime(2023, 2, 2, 21, 28, 21, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1095105380, 'comment_body': 'Aha, I know what is going on, the user is marked as deleted and `get` takes that into account and only returns models that are not marked as deleted. Okay, I think it is fine to keep using `get_by_id` here.', 'comment_created': datetime.datetime(2023, 2, 2, 21, 31, 36, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1098455842, 'comment_body': 'no need', 'comment_created': datetime.datetime(2023, 2, 7, 10, 14, 18, tzinfo=datetime.timezone.utc), 'commenter': 'heyimShivam', 'type': 'User'}, {'comment_id': 1098457583, 'comment_body': 'no need', 'comment_created': datetime.datetime(2023, 2, 7, 10, 15, 46, tzinfo=datetime.timezone.utc), 'commenter': 'heyimShivam', 'type': 'User'}, {'comment_id': 1098459610, 'comment_body': 'no need of it', 'comment_created': datetime.datetime(2023, 2, 7, 10, 17, 38, tzinfo=datetime.timezone.utc), 'commenter': 'heyimShivam', 'type': 'User'}, {'comment_id': 1098652390, 'comment_body': 'Done', 'comment_created': datetime.datetime(2023, 2, 7, 13, 21, 50, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 1098652990, 'comment_body': 'Done', 'comment_created': datetime.datetime(2023, 2, 7, 13, 22, 24, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 1098653148, 'comment_body': 'Done', 'comment_created': datetime.datetime(2023, 2, 7, 13, 22, 33, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 1105054731, 'comment_body': 'Can we move these lines to above line 190 since they are the default.', 'comment_created': datetime.datetime(2023, 2, 13, 21, 51, 36, tzinfo=datetime.timezone.utc), 'commenter': 'sagangwee', 'type': 'User'}, {'comment_id': 1105054947, 'comment_body': 'Move to above line 190.', 'comment_created': datetime.datetime(2023, 2, 13, 21, 51, 52, tzinfo=datetime.timezone.utc), 'commenter': 'sagangwee', 'type': 'User'}, {'comment_id': 1105057688, 'comment_body': ""Don't we also want to check for `profilePictureWebpDataUrl` in case that's falsey as well? Ditto below."", 'comment_created': datetime.datetime(2023, 2, 13, 21, 55, 1, tzinfo=datetime.timezone.utc), 'commenter': 'sagangwee', 'type': 'User'}, {'comment_id': 1105058526, 'comment_body': 'Just checking—Is this no longer the case?', 'comment_created': datetime.datetime(2023, 2, 13, 21, 56, 3, tzinfo=datetime.timezone.utc), 'commenter': 'sagangwee', 'type': 'User'}, {'comment_id': 1105450254, 'comment_body': 'Done', 'comment_created': datetime.datetime(2023, 2, 14, 8, 23, 20, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 1105450431, 'comment_body': 'Done', 'comment_created': datetime.datetime(2023, 2, 14, 8, 23, 29, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 1105451034, 'comment_body': 'Oh, this was from the previous changes, I have updated it now.\r\nThanks', 'comment_created': datetime.datetime(2023, 2, 14, 8, 23, 56, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 1105452697, 'comment_body': 'Oh, I think we would not require that. The method to fetch both type of images are exactly same just differs in extension if the ""png"" is working fine so does ""webp"" and vice versa.\r\nThanks', 'comment_created': datetime.datetime(2023, 2, 14, 8, 25, 27, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 1120258152, 'comment_body': ""Won't this ignore any variable with an underscore? According to https://eslint.org/docs/latest/rules/no-unused-vars#varsignorepattern (which is referenced by the typescript-eslint docs at https://typescript-eslint.io/rules/no-unused-vars/), the linter doesn't appear to require a full regex match"", 'comment_created': datetime.datetime(2023, 2, 28, 15, 30, 15, tzinfo=datetime.timezone.utc), 'commenter': 'U8NWXD', 'type': 'User'}, {'comment_id': 1124514825, 'comment_body': 'I have updated this part. @U8NWXD PTAL', 'comment_created': datetime.datetime(2023, 3, 3, 14, 15, 59, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 1131085004, 'comment_body': 'Add a TODO to get rid of this later.', 'comment_created': datetime.datetime(2023, 3, 9, 14, 12, 5, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1132034827, 'comment_body': 'Done @vojtechjelinek ', 'comment_created': datetime.datetime(2023, 3, 10, 7, 33, 34, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 1132119565, 'comment_body': '```suggestion\r\n    // TODO(#17663): Remove use of performance.now with a long term fix\r\n```', 'comment_created': datetime.datetime(2023, 3, 10, 9, 8, 1, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1132129259, 'comment_body': 'Done, submitted the testing request as well.', 'comment_created': datetime.datetime(2023, 3, 10, 9, 16, 56, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}]","[{'commit_sha': 'f1bc79382f844acb227446b3f017361e75810e04', 'committer_username': 'EricZLou', 'committer_name': 'Eric Lou', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 29, 17, 59, 3, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fc75f0daf85ea3209c21f33691bae034b37269d3', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3583d66253675807dd9454978f9f1e2ff9e82793', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b3ddec0da8de6f8798faee5d094c14c453e451c1', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'efccd4042e487d99c745094d9967a49f9fa493d0', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2f254005f3221a3d8b2d55f746eaf2999b1418f9', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '419868c2a684be452bd50a330348055fc759ad9f', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '30c4c1c8ece108237b6e36b272988db425646d25', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8e96a9f596caf62e1fe7b0da6ba3fe0fa707428d', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '66ad11ffd4fe3da18bbd640fe0e8a05fba23e06e', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5f553a4a3f916802a55733baa86c212372ced898', 'committer_username': 'EricZLou', 'committer_name': 'Eric Lou', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 29, 17, 59, 3, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aa4f22adf5f398ca0f6c756ebe052ecf9430a624', 'committer_username': 'EricZLou', 'committer_name': 'Eric Lou', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 29, 17, 59, 3, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f6cb0d99fd254ba37745cf15d430d0eeb6d73b38', 'committer_username': 'EricZLou', 'committer_name': 'Eric Lou', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 29, 17, 59, 3, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2a74aec00b822e306ad257c3938ab2d0ca5b0dcf', 'committer_username': 'EricZLou', 'committer_name': 'Eric Lou', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 29, 17, 59, 3, tzinfo=datetime.timezone.utc)}, {'commit_sha': '341c283d56da0a17db9e375a04ec7af4550e1697', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c998c985a878981dde661ca873fc8e350395e1cb', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '51b62c2184a41b610e903cd495838acce98b1cf2', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f9a25927a69c9a7385bdfdd07b4bdd12c5869124', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f6b68e4a533fbe79c281c8fc9a30aff0cd0f8ef3', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '21a6fa091c29aa250c6bc2871c00c9c8ce6af327', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ab3eb9a9e5c4328633754e352043a2c73ba46e46', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7442a0714b47a97e8f108db3cc00cd8ac803fcfa', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '275717db900ec2f1440f81723d3a53ba1f4a2270', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7b1bb607120170691ce377a2d389df97a0df679c', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e208b7bf19b4e54bab184a4f1c91747b72d0bda8', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8ba9a1bb2cdc25a281286271733a1b3c4b3f7e1e', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'beb7f3f086d30b1ec0929e9386cbaf3b4e9cd6f3', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5a67fca1a9e805a9a543bf69b0741a305ce6c6e9', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3a9f73138c48df2d896065248807b0770ac93180', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b625ae6009293191a44510d3643bfe2bf2d01640', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7285018520d726c8f1c4adf11194a3105ecad35f', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aeca7fd9742acb8bcd45512a2eb37e1d412bbc63', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f1cbabf4a422dce9e042bcf511b5d698ea3a39a8', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd2a2e9f5b810fa6c46a12a745f4500968a7d57ba', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '841f33ff3bd4b4c754495e1f2fa025d713fcb912', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '512941e5bec01c9c9897a7c9f67a6e69bc295a12', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a0458602f0085de62001025191be04c185344c9a', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8c405d754cb5a5542f7b47031324db845ea7d057', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9f7d94e14367a89f75707b54f9f81caa75f579d4', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd710dea43f4002f70cd8358eee095584769e94dd', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f112bf5826846528b13cfece10e766760f9636b7', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '887cd1969d0e0ec1afbe70bdd29f8d729a5106b0', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e4367ea56c13fd2144006dc3d575481884363e3a', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a59240ab6bc55ca76c6c1815e5f3e45eb6af4b32', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '348b51f801e1bc59d03ee8161d4297ceba4f442e', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'adafe5f06ac4c6fcb151d51c41e05d9d4095f9ba', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '60147a11301c5ddd940ae5dcb7abe531c2d92750', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6341b208dc79f0d7479166034145fccc3f21a5e2', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '449720d33ceba4aa226527d8f40013e7902b9dd3', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '62d32e8c6a2a35a87d104cebec8f840f8dd26266', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '475665f0df8c706163224b19409324d778285423', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1862d603ef77a267da7ea7e2d30170c2617dc047', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '766b2d197c89505f3595ffa204920f1e891cd98d', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1f06880a16bd7bc0fde7aed18e5c04d036f0d72f', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a53a088b1e6a4983ad6788290452201970d8144f', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1aff47778f11940a68e4c334181c56ac8dc8fb70', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b7e2dc7abbbfcd11aa619ecdcfeb33c0e628f5b9', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9a79dc0d92c701c0fea6900c85add4f9e697603c', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '47b4391b7bf09a8dc6f643dfa3a45848395ca54b', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '07e30e1ee3d113b3368573e793d556b6faa6aa71', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8105e8967a13dba50cb1bbdb0cc74fb5d541d610', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '832b7b120a23bedca936f399501278e4b56b23a3', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7d0e080153c673b6c506d88afaa3329761f5b12d', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8f83f2d80ad3378e95bd6341baa45d0917a4151d', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4456d7bda26e36d3be8d2dea6d2a469ba35f233d', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '25f4f01e88c872975bf5b966fb2ddd69c4f7ed3c', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7413f5f100b1e702f4e746097ab096a7c756a967', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f2dc127165ac4f0cd1924dc1c0de8d30b1216779', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2fec5cd0c3769fc3047e1d6e56c51464e279eccd', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b17265862fb5dc5017f2aca8b566becd7b882534', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '216ce36fb1bd5b7cf6b7e8940f18c93cd59085c4', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '176c0fbca7650e39a9251dd8cd963103dcbbf18d', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5ec952430d214ec7b219c81da85c74c00bb58581', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6fe1ed0d70082ac01310bba75743d445f73b1997', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5bf3cad82baca28704db92d4333565f03dc4fe52', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ca4afbf1e2165db7b6167543df44414f1a878368', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '80d1af97404ee2741e1628050ee1faaff67323fd', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '88e2ef4bcb645714103c9f7594b47c5258100a8e', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '776a7bb77fffba08a51ada96e49e2d5faeb0c2f8', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6ef0b2a3b1a9911a2a9d1acfd6c7b7ae8f4b9a71', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4e57ef0326fcf02ddfd35853e44bbeb18724ee76', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7f9195d92ced14c13160479a88b2a0d2dcde0709', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dd65bed057a62eaa60becc4b0b9b4bf7a673c966', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'be6cb016558e2f5ecabc60f5d44019635630f1be', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8ffb195432d247b8b6bb41fe338b1dd42b424054', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '75484a4d53c84279aed231bdd9de2f5c8b82962d', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9fc2f3038e7da4f6921d0bdb3ba717582b0b611e', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5acfe678bc9695b6b25665883a7a6cbfd9efd106', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e043b8283268c227236c502b8f75266cac6d2d52', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b2b0a665e5e51f6fd744754001bc41351c28247b', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '70eb857e2fa1e20dab766d0de126b29a4e8697a1', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cf506ed05312ae3beaf079971b67e0a2061f81fa', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1f00aeec41696106cfa2c579282e9ee8fc857b31', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b88b72eb9e5baafeb7afe4864d4000b88cae9525', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '53249a0189ee184c50314fe27ff3a7c7e169b7f8', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ff47bb380d180937853401cf5f64496629b44847', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1fcf2e6d5ef6bd730e21f2fb975bb35af03acae5', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3175fce01f54ceb025ec3696ff29d415b788d634', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fda16ac6652d7bd522f91d055d69d8598c3326a9', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b554651b813f31a472791504baae9ada966d7328', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e6e415012506c9173225a15a4ae7ecfb203dd962', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ea60edd3c4629e7303140a8d4b1321118671c46c', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'be8492e7c171e429752a66675e2b97aefab9e8b1', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ed1bad712f3416e9fe2b2c7e13f2e136172cb99f', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1230f5da3b37f77067a4f6b8d459545580aab6bc', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'eecd2b1334cd3d4ac0075b59ec564803be3d2fa2', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5deb598ac0e79a49679af76218682154c8fcbf7f', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4fdaf6258c505f09cb4701886361e1c497af7452', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '38338f052c8a55ec227e0d146e484c9d216c519c', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c1f7e6ad8bde68f6ebae5b2164fb0bb3ebf0ed36', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '42e43fca563a25719ce044c1397b8afd07031ae5', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5bb826f90838b027fdc46acb9b44311cae64fc22', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6da12277aee27468391c5d9c7758034be1b12795', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4ddb820bf2b78034841109b89b9b6e926cc7957e', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ec3d1b1877b7d583fd0703692218f77be1f5b502', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0c36486abbf5d1b1dfdffd06091a33474b6e5e63', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c8490c9e8acb65969473b69af3d7886d8d728a10', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f7d1ad1cf26ac9ad04a5a4d83ace185a6c99f09e', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0bc8970206370ca33aacd9f11bdffbb83f275bc5', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ebcb9171c6e5d71ff6a7f4ca9f6bdcbef0c26d43', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4cf3ef59f14b110861a447c5cbc5014dc20e05f1', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '304a608806850c3b5ab657773422c3d581617e10', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dc827daa48d4772f03d0a9da5ab570fd2d32b0b8', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd1d1bfd18e99eef3050ae315f3387ce603284bed', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b2c9212784d497db692613071acec454b232c531', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9443f8c2f7f8f09cc8d46b4e7da92ed2cf8eaf08', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9279d74e7857d954de2796fcbd27f8197e7e17e3', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1c2134c64df98ee2c1739ea7a32cbf8ec6eb1841', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '13701f16f84d99ac267a6ea920c363325c89dec1', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c1b169f73af5c3b0578e1a0d9b6122d54e492dfb', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8333011087a292ec840ac93a5ea45b40952d1278', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9a37de50b17df817447018f7f0ec2b7ee1ab4f60', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ec98711cd0876a6780344d6781533527a3982658', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fcb7397650d5d7d9fa29044f9edb942e695dfca4', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '898c19bc84e1a9d0d6687810304dc1ca5d3c0199', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '13466fe26554495a3d25664c66a00ab06fc5ad92', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1385850fd03b3da2d5d1bb0c51e6c11b43fec2a3', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '834b1745219ea11e619625b699379a7a5340e77f', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f253755cb7b379db4042b9d373dfcfc41c0b677a', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '244d63b19d104b780cde91d6c123bc5f59fc5569', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6c1a2f8a697310e92228053688ab3c6366c799a0', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '003d00fa79ddb91e1482af0e38458f65d69491b4', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '03601bead424a0b6cb170f19e15cf49093d66738', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7b939e01c787b61d1f099adef931b64a233d9ccb', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd72f5de20f586fdadb30cf3ef1bf3c70caa50089', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1ba11f600f7a57c4360964f0888814f60a4f36b7', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c39db2e858206febb7ddfc2efff86fc2ff8cdfe1', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0351cc2e0ed5b0bfb7f4ca3c0f0807d10d5b942b', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ab891b15aaad03e2ad88de0b37904da0924fc32a', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '46df39f6e11892c9d4217ec6e933d0d933a944bc', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}]",Hitesh Tomar,44300735,,User,,30,,3,13
1121298530,M 2.2: Store and audit the user images on GCS.,"## Overview
<!--
READ ME FIRST:
Please answer *both* questions below and check off every point from the Essential Checklist!
If there is no corresponding issue number, fill in N/A where it says [fill_in_number_here] below in 1.
-->

1. This PR fixes or fixes part of n/a.
2. This PR does the following: This PR contains 2 jobs, first job is `StoreProfilePictureToGCSJob` which pushes all the user profile pictures to GCS. The other job is `AuditProfilePictureFromGCSJob`, which checks if the profile pictures are successfully stored or not.

## Essential Checklist

- [ ] The PR title starts with ""Fix #bugnum: "", followed by a short, clear summary of the changes. (If this PR fixes part of an issue, prefix the title with ""Fix part of #bugnum: ..."".)
- [x] The linter/Karma presubmit checks have passed locally on your machine.
- [x] ""Allow edits from maintainers"" is checked. (See [here](https://help.github.com/en/github/collaborating-with-issues-and-pull-requests/allowing-changes-to-a-pull-request-branch-created-from-a-fork) for instructions on how to enable it.)
  - This lets reviewers restart your CircleCI tests for you.
- [x] The PR is made from a branch that's **not** called ""develop"".

## Proof that changes are correct
![Screenshot from 2023-01-18 22-20-36](https://user-images.githubusercontent.com/44300735/213244540-41a87c1a-bc36-4dd7-afd4-b2e525b0fe62.png)

![Screenshot from 2023-01-18 21-48-25](https://user-images.githubusercontent.com/44300735/213232902-982710a3-2b62-49cd-bd5e-32a1938c8e49.png)
<!--
Add videos/screenshots of the user-facing interface to demonstrate that the changes
made in this PR work correctly. If this PR is for a developer-facing feature,
provide the videos/screenshots of developer-facing interface.

Please also include videos/screenshots of the developer tools
browser console, so that we can be sure that there are no console errors.

If the changes in your PRs are autogenerated via a script and you cannot provide proof
for the changes then please leave a comment ""No proof of changes needed because {{Reason}}""
and remove all the sections below.
-->

#### Proof of changes on desktop with slow/throttled network

<!--
Make sure to properly verify that everything works correctly, and that there are
no weird UI mistakes or other problems. Also, if there are any newly added fields,
try to fill them out and test that different inputs are correctly accepted/rejected.

Throttle the network (to 3G) using the browser Developer Tools (see references below).
There should be no performance or UI issues while the network is slow.

References:
 - Chrome: https://css-tricks.com/throttling-the-network/
 - Firefox: https://developer.mozilla.org/en-US/docs/Tools/Network_Monitor/Throttling
-->

#### Proof of changes on mobile phone

<!--
In some cases this is not needed (e.g. for pages that we do not expect to
support mobile phones, or for backend-only features).

Feel free to use the Developer Tools emulator for this.

References:
 - Chrome: https://developer.chrome.com/docs/devtools/device-mode/
 - Firefox: https://firefox-source-docs.mozilla.org/devtools-user/index.html#responsive-design-mode
-->

#### Proof of changes in Arabic language

<!--
If the PR changes the UI, make sure to add screenshots with the site
language set to Arabic as well (we use Arabic as it is a language written from right to left).
-->

## PR Pointers

- Make sure to follow the [instructions for making a code change](https://github.com/oppia/oppia/wiki/Make-a-pull-request).
- If you need a review or an answer to a question, and don't have permissions to assign people, **leave a comment** like the following: ""{{Question/comment}} @{{reviewer_username}} PTAL"". Oppiabot will help assign that person for you.
- For what code owners will expect, see the [Code Owner's wiki page](https://github.com/oppia/oppia/wiki/Oppia's-code-owners-and-checks-to-be-carried-out-by-developers).
- Make sure your PR follows conventions in the [style guide](https://github.com/oppia/oppia/wiki/Coding-style-guide), otherwise this will lead to review delays.
- Never force push. If you do, your PR will be closed.
- Some of the e2e tests are flaky, and can fail for reasons unrelated to your PR. We are working on fixing this, but in the meantime, if you need to restart the tests, please check the [""If your build fails"" wiki page](https://github.com/oppia/oppia/wiki/If-CI-checks-fail-on-your-PR).
",True,16541,https://api.github.com/repos/oppia/oppia/pulls/16541,https://github.com/oppia/oppia/pull/16541,closed,646,15,11,116,46,70,1,1,[{'name': 'PR: Affects datastore layer'}],2022-11-14 12:36:58+00:00,2023-02-10 07:50:06+00:00,7585988.0,"87 days, 19:13:08","[{'comment_id': 1021796180, 'comment_body': ""I don't think it needs to be added here if we add it to _requirements.in_"", 'comment_created': datetime.datetime(2022, 11, 14, 16, 34, 1, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1021798076, 'comment_body': ""```suggestion\r\n        raise Exception('The given string does not represent a WebP data URL.')\r\n```"", 'comment_created': datetime.datetime(2022, 11, 14, 16, 35, 41, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1021799333, 'comment_body': 'Hmm, this is almost the same as the PNG version above, can we parametrize this?', 'comment_created': datetime.datetime(2022, 11, 14, 16, 36, 43, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1021799544, 'comment_body': 'And have just one function?', 'comment_created': datetime.datetime(2022, 11, 14, 16, 36, 53, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1021800671, 'comment_body': 'Users without username do not have profile pictures, right?', 'comment_created': datetime.datetime(2022, 11, 14, 16, 37, 50, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1021802950, 'comment_body': 'I think this job should make sure that the saved file and the `profile_picture_data_url` are the same, right? (with some transformations ofc)', 'comment_created': datetime.datetime(2022, 11, 14, 16, 39, 46, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1026488913, 'comment_body': 'Updated', 'comment_created': datetime.datetime(2022, 11, 18, 14, 20, 36, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 1026489017, 'comment_body': 'Updated', 'comment_created': datetime.datetime(2022, 11, 18, 14, 20, 42, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 1026489089, 'comment_body': 'Updated', 'comment_created': datetime.datetime(2022, 11, 18, 14, 20, 47, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 1026489871, 'comment_body': 'I have added the part where if the profile picture is None we will generate gravatar for it.\r\nThanks', 'comment_created': datetime.datetime(2022, 11, 18, 14, 21, 23, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 1026490106, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 11, 18, 14, 21, 34, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 1030327762, 'comment_body': '```suggestion\r\n                job_run_result.JobRunResult.as_stderr(\r\n```', 'comment_created': datetime.datetime(2022, 11, 23, 11, 31, 7, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1030329845, 'comment_body': 'Should we also audit the WebP image.', 'comment_created': datetime.datetime(2022, 11, 23, 11, 33, 13, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1030330119, 'comment_body': '```suggestion\r\n# Copyright 2022 The Oppia Authors. All Rights Reserved.\r\n```', 'comment_created': datetime.datetime(2022, 11, 23, 11, 33, 27, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1030330338, 'comment_body': '```suggestion\r\n    from mypy_imports import user_models\r\n    from apache_beam.io.gcp import gcsio_test\r\n```', 'comment_created': datetime.datetime(2022, 11, 23, 11, 33, 36, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1030331200, 'comment_body': 'Try with multiple users', 'comment_created': datetime.datetime(2022, 11, 23, 11, 34, 13, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1030332249, 'comment_body': 'Again, test multiple users.', 'comment_created': datetime.datetime(2022, 11, 23, 11, 35, 1, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1032370121, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 11, 25, 11, 38, 40, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 1032370220, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 11, 25, 11, 38, 47, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 1032370277, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 11, 25, 11, 38, 51, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 1032370332, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 11, 25, 11, 38, 56, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 1032370525, 'comment_body': 'Updated', 'comment_created': datetime.datetime(2022, 11, 25, 11, 39, 13, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 1032370579, 'comment_body': 'Updated', 'comment_created': datetime.datetime(2022, 11, 25, 11, 39, 18, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 1032374947, 'comment_body': ""Hey @vojtechjelinek,\r\nPlease note that the reason why I'm not outputting the image on gcs and in the model when they are not same, is because it is going to get [TRUNCATED] and we will not be able to compare the output anyway.\r\nFor the webp part I'm converting the GCS webp image to png and then comparing them with the `profile_picture_data_url` in the model as it seems to only way to verify the audit.\r\nThanks"", 'comment_created': datetime.datetime(2022, 11, 25, 11, 44, 11, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 1032807291, 'comment_body': 'Unneeded change.', 'comment_created': datetime.datetime(2022, 11, 26, 16, 29, 13, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1032807354, 'comment_body': 'Client no longer needed with Cloud Storage lib.', 'comment_created': datetime.datetime(2022, 11, 26, 16, 29, 46, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1032807877, 'comment_body': ""Client probably won't be needed."", 'comment_created': datetime.datetime(2022, 11, 26, 16, 34, 30, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1032808018, 'comment_body': 'Makes sense', 'comment_created': datetime.datetime(2022, 11, 26, 16, 35, 53, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1032808112, 'comment_body': '```suggestion\r\ndef convert_png_or_webp_binary_to_data_url(\r\n    content: bytes, file_type: str\r\n) -> str:\r\n```', 'comment_created': datetime.datetime(2022, 11, 26, 16, 36, 51, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1032808197, 'comment_body': ""```suggestion\r\nDATA_URL_FORMAT_PREFIX = 'data:image/%s;base64,'\r\n```"", 'comment_created': datetime.datetime(2022, 11, 26, 16, 37, 49, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1032808390, 'comment_body': ""```suggestion\r\n    if imghdr.what(None, h=content) == file_type:\r\n        return '%s%s' % (\r\n            DATA_URL_FORMAT_PREFIX % file_type, \r\n            urllib.parse.quote(base64.b64encode(content))\r\n        )\r\n    else:\r\n        raise Exception('The given string does not represent a WEBP image.')\r\n```"", 'comment_created': datetime.datetime(2022, 11, 26, 16, 38, 58, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1032808421, 'comment_body': 'Not needed if above changes are implemented', 'comment_created': datetime.datetime(2022, 11, 26, 16, 39, 17, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1032851374, 'comment_body': 'The line becomes more than 80, that is why I did that.', 'comment_created': datetime.datetime(2022, 11, 27, 1, 9, 45, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 1032851384, 'comment_body': 'Removed', 'comment_created': datetime.datetime(2022, 11, 27, 1, 9, 52, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 1032851387, 'comment_body': 'Removed', 'comment_created': datetime.datetime(2022, 11, 27, 1, 9, 58, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 1032851392, 'comment_body': 'Updated', 'comment_created': datetime.datetime(2022, 11, 27, 1, 10, 6, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 1032851394, 'comment_body': 'Updated', 'comment_created': datetime.datetime(2022, 11, 27, 1, 10, 11, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 1032851412, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 11, 27, 1, 10, 18, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 1032851428, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 11, 27, 1, 10, 24, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 1032918058, 'comment_body': 'Not needed anymore?', 'comment_created': datetime.datetime(2022, 11, 27, 11, 58, 52, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1032918338, 'comment_body': ""```suggestion\r\n        blob = cloud_storage_emulator.EmulatorBlob(\r\n            'name', 'string', 'image/webp')\r\n```"", 'comment_created': datetime.datetime(2022, 11, 27, 12, 1, 1, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1032918898, 'comment_body': '```suggestion\r\n    def _generate_png_file_object(\r\n```', 'comment_created': datetime.datetime(2022, 11, 27, 12, 4, 1, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1032918944, 'comment_body': '```suggestion\r\n    def _generate_webp_file_object(\r\n```', 'comment_created': datetime.datetime(2022, 11, 27, 12, 4, 9, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1032919018, 'comment_body': 'Can you move this inside `AuditProfilePictureFromGCSJob`', 'comment_created': datetime.datetime(2022, 11, 27, 12, 4, 35, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1032919083, 'comment_body': ""```suggestion\r\n            | 'Map username and data url' >> beam.Map(\r\n```"", 'comment_created': datetime.datetime(2022, 11, 27, 12, 5, 1, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1032919315, 'comment_body': 'Can you add a test case for valid PNG but invalid WebP', 'comment_created': datetime.datetime(2022, 11, 27, 12, 6, 36, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1033504292, 'comment_body': 'Removed', 'comment_created': datetime.datetime(2022, 11, 28, 12, 51, 11, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 1033504373, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 11, 28, 12, 51, 17, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 1033504467, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 11, 28, 12, 51, 22, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 1033504537, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 11, 28, 12, 51, 26, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 1033504624, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 11, 28, 12, 51, 31, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 1033504691, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 11, 28, 12, 51, 36, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 1033504782, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 11, 28, 12, 51, 42, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 1033525820, 'comment_body': '```suggestion\r\n        def _mock_list_prefix(self, filepath: str) -> str:\r\n            return filepath\r\n```', 'comment_created': datetime.datetime(2022, 11, 28, 13, 13, 4, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1033526334, 'comment_body': 'ditto elsewhere', 'comment_created': datetime.datetime(2022, 11, 28, 13, 13, 36, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1033527556, 'comment_body': '```suggestion\r\n        return list(\r\n            sorted(blob.name for blob in list_of_blobs)\r\n        )\r\n```', 'comment_created': datetime.datetime(2022, 11, 28, 13, 14, 51, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1033532235, 'comment_body': 'Hmm, not sure if I agree with this if in the future we would for some reason want to work with different buckets we would have to refactor this I think it would be better to define the bucket in the init and `BUCKET` can be the default (maybe with different name) but there should be an option to work with different bucket.', 'comment_created': datetime.datetime(2022, 11, 28, 13, 18, 54, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1033539866, 'comment_body': '```suggestion\r\n    file_objects = [\r\n```', 'comment_created': datetime.datetime(2022, 11, 28, 13, 26, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1033543553, 'comment_body': ""You don't need so many asserts if you correctly set the type for `fileobjects` (`FileObjectDict`)"", 'comment_created': datetime.datetime(2022, 11, 28, 13, 29, 31, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1033545376, 'comment_body': 'You should add more checks, if the files are actually deleted, there should be no problem with checking that here.', 'comment_created': datetime.datetime(2022, 11, 28, 13, 31, 13, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1035522554, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 11, 30, 4, 41, 32, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 1035522620, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 11, 30, 4, 41, 37, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 1035522666, 'comment_body': 'I agree, updated.', 'comment_created': datetime.datetime(2022, 11, 30, 4, 41, 45, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 1035522705, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 11, 30, 4, 41, 51, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 1035522730, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 11, 30, 4, 41, 55, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 1035522857, 'comment_body': 'I have updated the existing ones to check if the files exists after deletion.', 'comment_created': datetime.datetime(2022, 11, 30, 4, 42, 17, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 1035744096, 'comment_body': ""```suggestion\r\n        filepath_webp = (\r\n            f'user/{self.user_1.username}/assets/profile_picture.webp')\r\n```"", 'comment_created': datetime.datetime(2022, 11, 30, 9, 43, 29, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1037497197, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 12, 1, 19, 40, 25, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 1174531971, 'comment_body': 'The job errored on the server because newly created user settings models may have a valid username but an empty profile_picture_data_url field -- the image may be stored on GCS directly. The highlighted statement throws an error because ""replace"" method is accessed on a None type object (profile_picture_data_url) in the case of newly created models.\r\n\r\nWe will need to update this audit job to correctly handle that scenario.', 'comment_created': datetime.datetime(2023, 4, 23, 8, 5, 33, tzinfo=datetime.timezone.utc), 'commenter': 'kevintab95', 'type': 'User'}, {'comment_id': 1175005939, 'comment_body': 'Raised the PR - https://github.com/oppia/oppia/pull/18142\r\nThanks', 'comment_created': datetime.datetime(2023, 4, 24, 9, 15, 37, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}]","[{'commit_sha': '1495a9d47ee494c9b4b2f774f00a725935677262', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e6a420edad0d4dd8f1434b54c82f56ab5f015c7d', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cdda5c611479c203bf8e537808f549fa2f36ae25', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e532d226b0c992e40688ee61ea3f5526788fa573', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1dd35a4cf08196ddf4af3a472cdcec895a7a9491', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bd4075f5c9e02fedaf4168a93b468bad2d3ab4fe', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0276f6d5541bc1db72a0ddfbd03ad05124f94ad8', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b8d636f4a472cabd1845ba032b7c5c86313d0809', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '239ce244edb5f17d7ebdf203f36368b1bb9deb84', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '69b8a4e6f58235971ce2be0d0159eee050a742d7', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd4f067970141ab719b7a7192365ff4bc024ccdb4', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd87cef177e411d26c9874c6fe263c01477181a4e', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f65860900a8e46a859839629690d30390b3ab916', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '01696df6c42ca2b57eed7fbd5e3e6d43bba47935', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8e89ae91ea7668f06d2852df0efed0626fc41396', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fe9f6c53abc6e09401e0ed9502df297fd9e911d2', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '52ce33d1769d33825845709b35542476fee0f941', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cf524e6e2be5cbc5e5fae19ca4b136f366a284c1', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '54853ce6d61963cf91896abe0ddffaa5bf4f4ff7', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '414301a9642865bac21262bcac0c8e0d25ae4e84', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd62afd60d965432329880c1969ba9f8760812011', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9b24296a66c2b2172e0551772e5488d189340564', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cba7e421bae9fda42fc3a77c380cc9d30c3cf3c1', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '26092ed8f5a7962e2c247e01ed91b3ce1a18f5ed', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '003656d5af0e7d23f7c15b7bc1a16e946f0ed704', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '46d4f960f9cd40d4ba0f0f55783726a5f7dc5d92', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '96c317a43abb82c97fb2a1591726fa771822aece', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '66b5cb731795dbc35ac340dd141cdf0dd18427b0', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4fae6373c331d683ac51144321572893f3c9840b', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '294b2373794924107a5a8f95e07b5db40d44373c', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cc5e08ca7d8d0c249ef88c9cc7de9da8dec93f68', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f22ff06bfb51e74f2302a48e886438a042fb1d02', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f8e44978d91772441ceec08ad4918981c8437f6f', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c2909cdaf7d4980a3b1b8f0f0bb6da87c4cd4841', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8049c7e9a57931fc8c9eace7a48cd5bca40f91c6', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4c197d46b54574a050feb84e9d76faa7d6760267', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a37aa1c0360934f0bbc06c6dc0418c44fb7de718', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b7a157350337a7b1cb38c3bf1cc2e1c3c38654f7', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9d8b2ffc708b89ffed3a497ecbfef1b8bd2801c6', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3aa225e89ae925493b07fb657439a4f6a4f95b4a', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f84ab837113f358e28262dd50991e0d31b02ea9b', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5325d2640287d23cdae3f57f58ed73c334e83293', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8d2efea6c192f26366dca3453ca0c25f9627bf19', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '87ad04c4a3de9ff91e1ffb7c72b5c1c8aec47389', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '51c4a07f83758e8a0f39327f9e0f78ac1c5057f1', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '85e892441c844d3d4f5a85376d3d85a451087f5c', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0a9467efef7bb020c3e4fe7c38ff1bafcc3017c9', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '122faf36c3288de2daec437ef6e3031781c831f6', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5b39321913debc47108c5e43de093ae5645f1e13', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0d53cd2b8a8a609cf9b73b88ba176349f442a79d', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '890dd734bb8edb84eb02df13010879791bc31e42', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '537182eabfdc142af322965abb97beb2822e01a3', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '574cff6cf7ccf79708a7a341f230a5395c3566b4', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '566745c9911b64289838b2f6c126200710406041', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e348b272ee6f95bafabd3200ca492583383ebe75', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '58dc4e8203dbf9fff09058203ec70759b8f88141', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd2cd2612f0e8cfd30c4a3d7d817cfde32d921b5c', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '54cab6e76483e2a037e94af3432d28e2cfa453ad', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bdcd204af9e999e0d56e1c1b15198c60c907f4b8', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c30d907f20d889a8ea3d9178f64574a9cfa87b90', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '49a3a8ccfc59b3b2c045a18fa4dd8ffadbb35c42', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '099d802e72c12541fc029ec7e4a05e016ba0297e', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3c6836c720c2471ac1d4dbc480fc53c2acc64e41', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'af36e1beebdbf7ff16113913c5ba2ddefb270de5', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1979501e1e9d87e254dae97016d7bd20bd8947f5', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '355cfa7e8a4406c819cf6caff15964addd3e5b95', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dd51064d0d502703efee40baf493f1ed36263749', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8976cbcacc3ac601e33d881d1f145ed8b9d5bdd1', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '878e7a0edec0aa3a4873888218a3e466d35cfddd', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '687c53d16acdb9a43e424cefd1c0713e5acf8ad9', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2c3f7ae6a105274621a752a30bbeb0c64946c746', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f0d3db7dab580e377647c103b75a7b4ec5be15b5', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0dd149a2c2a1d3144de9c0a1c77d9d4aa51e367d', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3027176d910335fb9c57efe80f2187e4ae03e15f', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cbf88e99992bbf4b5d39fd0d7c54e2b02a50d2d1', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a866ecccd3213e5c15160499b147a7372a06c7cd', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1a077b02c7dc64106d9b0243ac4606145be5fa10', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8ce923dfe6832d663df12e077c6034b77c565249', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '401bd041a984015ca0d97f63a4ed1c9e83e1c63c', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4e2577817d085450e4583dffc5a76f4ae873c426', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fc6ed809874e09a5551adf63b37f4479d106fc1f', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c47c04340dabde743ae4e5e2ae3206339e028e71', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '441e7dab95740f5d7ca690480843771133e440d5', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '67fd8c8281ac77955d2762dc9cfd54566d91efde', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3df9b7ebf6939d551ae766dd9e317ab0b6d61605', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '842cc6702999d8f57d4d4147fac9c40de728b3d7', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '525574bf53d709945fce1e4cc560dada53be3c50', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b43552558d57c58eb0fb84d4544dabcd737af6bf', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '96d81ea15f81d3ce037fac6fdd9c74ec2e803ac9', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9dfc2738dd5cf1819d168a1191449c90438377f3', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a794058ae6930987252141b51ca84f9418218cb2', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1527c9669f4faca6b1b6ca16c2718d1c0fcf944d', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '503afdbcbec0af83f2bee397c2d7181a051ef210', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '07cf8d1c8bc39dbc484f63c292975cf1da5d85cb', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '98e95f5ba641e3ff34df9bc162a72edbc6e13c19', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '25fdf35d170105bdfa806e1359f2abb038138b5c', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b434824a314da69594f72e050c8da1e51b0a5d6c', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c2176fd8da604a985f8452237fed68a68dd39a2b', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2ae85a230ae67b4f1bfde595662abcd7f2b96ce5', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4597a6f641e7cd3ab032e5f79ded380cda7f2e27', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '75d4ec4b11c541ad820fb97ff896305487a017b3', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0c06aafb447dc9200f1d0a58d5b0271992355f13', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a32c7006dae5757ad76c2381360b9e8cca8af3c0', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5ac8ffdf437f83d8504bda0ccf147ae7ed22f210', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ec0363bbefc59b5fa6d00b1b144bfff364f14bea', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dde01fd599dd7cb601b6ff079705baab34498aa3', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '07e9afaf1edd76372edf62b411ce631d8702435e', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a8b3200e5b8d72bf47c8d67cb9c33ae196bee2bd', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'afea55bde181f3349175298629ebfe7df6cf1984', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '08f50d17f91976eef576cea85bba6867a8644fb6', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '97ba93c08fc8c071e1659af3a22e440ad23cf7ad', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2696812993ae3b5a2cd876645d6fe8352e33f035', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a840dd576c99f10766a32d29d317e9b3fbca7d7f', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3bd19a3b5f5174049b2f6d15a63f5da5ae2cebf1', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '96e9746df0b3812fb3d4e16322f01df1520ec1d9', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fd23e3c837ccc7535da5e35691b5e11e52030320', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}]",Hitesh Tomar,44300735,,User,,30,,3,13
1129192748,M2.2.4: Remove profile_picture_data_url field from UserSettingsModel,"## Overview
<!--
READ ME FIRST:
Please answer *both* questions below and check off every point from the Essential Checklist!
If there is no corresponding issue number, fill in N/A where it says [fill_in_number_here] below in 1.
-->

1. This PR fixes or fixes part of N/A
2. This PR does the following: This PR removes the profile_picture_data_url field from the existing UserSettingsModel.

## Essential Checklist

- [ ] The PR title starts with ""Fix #bugnum: "", followed by a short, clear summary of the changes. (If this PR fixes part of an issue, prefix the title with ""Fix part of #bugnum: ..."".)
- [x] The linter/Karma presubmit checks have passed locally on your machine.
- [x] ""Allow edits from maintainers"" is checked. (See [here](https://help.github.com/en/github/collaborating-with-issues-and-pull-requests/allowing-changes-to-a-pull-request-branch-created-from-a-fork) for instructions on how to enable it.)
  - This lets reviewers restart your CircleCI tests for you.
- [x] The PR is made from a branch that's **not** called ""develop"".

## Proof that changes are correct

<!--
Add videos/screenshots of the user-facing interface to demonstrate that the changes
made in this PR work correctly. If this PR is for a developer-facing feature,
provide the videos/screenshots of developer-facing interface.

Please also include videos/screenshots of the developer tools
browser console, so that we can be sure that there are no console errors.

If the changes in your PRs are autogenerated via a script and you cannot provide proof
for the changes then please leave a comment ""No proof of changes needed because {{Reason}}""
and remove all the sections below.
-->

#### Proof of changes on desktop with slow/throttled network

<!--
Make sure to properly verify that everything works correctly, and that there are
no weird UI mistakes or other problems. Also, if there are any newly added fields,
try to fill them out and test that different inputs are correctly accepted/rejected.

Throttle the network (to 3G) using the browser Developer Tools (see references below).
There should be no performance or UI issues while the network is slow.

References:
 - Chrome: https://css-tricks.com/throttling-the-network/
 - Firefox: https://developer.mozilla.org/en-US/docs/Tools/Network_Monitor/Throttling
-->

**Before running the job**
You can see that we have the `profile_picture_data_url` field present in the UserSettingsModel. This is the screenshot from the dsadmin dashboard. I only posted the relevant cropped part of the screenshot.
![Screenshot from 2023-03-25 14-58-15](https://user-images.githubusercontent.com/44300735/227709144-0746b6b6-8065-4761-8c54-29e1a188aebf.png)

**After running the job**
Please note that we no longer have the field. The job output is also successful.
![Screenshot from 2023-03-25 14-59-53](https://user-images.githubusercontent.com/44300735/227709190-0ae0b900-11f1-4773-96cd-467ecbcb220d.png)

![Screenshot from 2023-03-25 14-59-48](https://user-images.githubusercontent.com/44300735/227709196-241d187a-119a-427a-afa0-a0bc54f0753b.png)

#### Proof of changes on mobile phone

<!--
In some cases this is not needed (e.g. for pages that we do not expect to
support mobile phones, or for backend-only features).

Feel free to use the Developer Tools emulator for this.

References:
 - Chrome: https://developer.chrome.com/docs/devtools/device-mode/
 - Firefox: https://firefox-source-docs.mozilla.org/devtools-user/index.html#responsive-design-mode
-->

#### Proof of changes in Arabic language

<!--
If the PR changes the UI, make sure to add screenshots with the site
language set to Arabic as well (we use Arabic as it is a language written from right to left).
-->

## PR Pointers

- Make sure to follow the [instructions for making a code change](https://github.com/oppia/oppia/wiki/Make-a-pull-request).
- If you need a review or an answer to a question, and don't have permissions to assign people, **leave a comment** like the following: ""{{Question/comment}} @{{reviewer_username}} PTAL"". Oppiabot will help assign that person for you.
- For what code owners will expect, see the [Code Owner's wiki page](https://github.com/oppia/oppia/wiki/Oppia's-code-owners-and-checks-to-be-carried-out-by-developers).
- Make sure your PR follows conventions in the [style guide](https://github.com/oppia/oppia/wiki/Coding-style-guide), otherwise this will lead to review delays.
- Never force push. If you do, your PR will be closed.
- Some of the e2e tests are flaky, and can fail for reasons unrelated to your PR. We are working on fixing this, but in the meantime, if you need to restart the tests, please check the [""If your build fails"" wiki page](https://github.com/oppia/oppia/wiki/If-CI-checks-fail-on-your-PR).

## Reference for job run sequence

1. #16492 - Audit and fix invalid profile pictures in UserSettingsModel.
a. Deploy the PR to the backup server.
b. Run AuditInvalidProfilePictureJob to audit invalid profile pictures.
c. Run FixInvalidProfilePictureJob to fix the invalid profile pictures.
d. Run AuditInvalidProfilePictureJob to check if all the profile pictures are fixed.
e. After the successful run of all the jobs, merge the PR to develop.

2. Combine (#16541 - Store and audit profile pictures to GCS.) and (#16521 - Backend and frontend changes to store profile pictures directly to GCS and to handle takeout and wipeout services.)
a. Deploy the combined PR to the backup server.
b. Run StoreProfilePictureToGCSJob to push the profile pictures to GCS.
c. Run AuditProfilePictureFromGCSJob to check the images stored on GCS and the images in model are same.
d. Try to upload a dummy profile picture to any user in order to see if it gets stored to GCS.
d. After the successful run of all the jobs, merge the PR to develop.
From now on the images will be directly deployed to GCS.

3. Cut the release with 16492, 16541, and 16521 PRs to production.
a. Run AuditInvalidProfilePictureJob to audit invalid profile pictures.
b. Run FixInvalidProfilePictureJob to fix the invalid profile pictures.
c. Run AuditInvalidProfilePictureJob to check if all the profile pictures are fixed.
d. Run StoreProfilePictureToGCSJob to push the profile pictures to GCS.
e. Run AuditProfilePictureFromGCSJob to check the images stored on GCS and the images in model are same.

4. #16584 - This PR: Will remove all the occurrences of the profile_picture_data_url field from UserSettingsModel.
a. Deploy the PR to the backup server.
b. Run RemoveProfilePictureFieldJob, this will remove the field from the UserSettingsModel.
c. After the successful run of all the jobs, merge the PR to develop.

5. Deploy 16584 to production.
a. Run RemoveProfilePictureFieldJob, this will remove the field from the UserSettingsModel.
",True,16584,https://api.github.com/repos/oppia/oppia/pulls/16584,https://github.com/oppia/oppia/pull/16584,closed,237,1150,12,166,79,38,3,1,"[{'name': 'PR: LGTM'}, {'name': 'PR: Affects datastore layer'}, {'name': ""PR: don't merge - STALE BUILD""}]",2022-11-20 16:30:11+00:00,2023-05-17 05:37:26+00:00,15340035.0,"177 days, 13:07:15","[{'comment_id': 1028171528, 'comment_body': '```suggestion\r\n# Copyright 2022 The Oppia Authors. All Rights Reserved.\r\n```', 'comment_created': datetime.datetime(2022, 11, 21, 15, 18, 10, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1028173362, 'comment_body': 'I think this should be done on deleted models too.', 'comment_created': datetime.datetime(2022, 11, 21, 15, 19, 43, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1028178134, 'comment_body': '```suggestion\r\n# Copyright 2022 The Oppia Authors. All Rights Reserved.\r\n```', 'comment_created': datetime.datetime(2022, 11, 21, 15, 23, 46, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1028178792, 'comment_body': 'I think there should be more tests here.', 'comment_created': datetime.datetime(2022, 11, 21, 15, 24, 18, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1028179288, 'comment_body': ""Can you check if the model actually doesn't contain the profile picture URL?"", 'comment_created': datetime.datetime(2022, 11, 21, 15, 24, 43, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1028419282, 'comment_body': 'If this job errors for some reason, will we get info that the error occurred, and also know which models were affected?\r\n\r\nAlso, in such a case, do we just run the job again to fix that?', 'comment_created': datetime.datetime(2022, 11, 21, 18, 58, 32, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 1028422289, 'comment_body': ""I don't think I understand the launch process for this PR.\r\n\r\nIn what order will you do the following:\r\n\r\n- Merge this PR into develop\r\n- Deploy the PR to the prod server\r\n- Run the job\r\n\r\nIf it is the above order, then what does our datastore look like between deploying the PR to the prod server and running the job? Will the profile_picture_data_url field be accessible when the job fetches the model, if it is not in the ndb.Model class description? In what way have you tested this?\r\n\r\nAn alternative approach might be to set it to None for all models, and mark the field as deprecated. We can then remove the field at leisure.\r\n\r\nAlso, what happens if new models are created after running the job? Will their profile_picture_data_url field get populated? I think I need to see a really clear description of the launch process here, same as I asked about for M1."", 'comment_created': datetime.datetime(2022, 11, 21, 19, 2, 15, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 1029656422, 'comment_body': ""Hey @seanlip, thanks for the comment. Yes, your order is correct that is how we are planning to get things done. The complete launch plan for the profile_picture part is mentioned below:\r\n1. AUDIT: Run `AuditInvalidProfilePictureJob` to get invalid profile picture data.\r\n\r\n2. MIGRATION STEPS:\r\n        a. Run `FixInvalidProfilePictureJob` in case the errors from above job reported.\r\n        b. Run `AuditInvalidProfilePictureJob` to verify that the profile pictures are fixed.\r\n        \r\n3. STORE IMAGES TO GCS:\r\n        a. Store images to GCS via job.\r\n        b. Run an audit job to fetch the images via URL(user/<username>/profile_picture.webp).\r\n        \r\n4. MODIFICATIONS in FRONTEND and BACKEND:\r\n        a. Modify the frontend to get the profile images directly from the GCS instead of getting the base64 string using this URL - 'user/<username>/profile_image.webp'.\r\n        b. Modify the backend to upload images directly instead of storing the base64 string. This includes updating the handlers that send data to the frontend.\r\n        c. Remove all the occurences of `profile_picture_data_url` except from the `UserSettingsModel`.\r\n        \r\n5. CLEANUP: Write a job to remove the `profile_picture_data_url` field from the `UserSettingsModel` and manually verify that the field is removed.\r\n\r\n6. Run Step 3 again just to be sure if any user images were updated or added while the deployment.\r\n\r\n> what does our datastore look like between deploying the PR to the prod server and running the job?\r\n\r\nI'm a bit confused about this part please correct me if I'm wrong, while we are deploying the changes to the server don't we go in to the maintenance mode for a while because while deploying, the server will not be responsive. If that is the case then no new data will be coming till we are deploying also note that after the deployment is done and the new data comes, let's say the user updates or uploads the profile picture the data will directly be pushed to the GCS so we will not to worry about that part.\r\n\r\n> Will the profile_picture_data_url field be accessible when the job fetches the model\r\n\r\nI was talking about this part with @vojtechjelinek and he mentioned that it will work as we previously did the same part for `MapReduce` and it worked. Also we will be testing it on the backup server which will give us some more confirmation. And yes I will be adding more test to this part on the local part as Vojta mentioned above and can provide you further confirmation.\r\n\r\n> what happens if new models are created after running the job\r\n\r\nPlease note that all the new data will directly be uploaded to the GCS so we will not need to worry about that part.\r\n\r\nPlease note that this PR is the last part in the process and will be merged in the last after everything.\r\nPlease let me know if any point is not clear and I will try to elaborate it further.\r\nThanks"", 'comment_created': datetime.datetime(2022, 11, 22, 17, 49, 30, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 1029659079, 'comment_body': 'Hmm, what all kind of errors are we talking about. I mean I can add a try catch block here to get the info but I think in case any error is reported it will be most probably for all the models and we will be able to get info via the stack trace. And yes we will require to run the job again. Please let me know your thoughts.\r\nThanks', 'comment_created': datetime.datetime(2022, 11, 22, 17, 52, 26, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 1029725935, 'comment_body': 'Hi @lkbhitesh07, thanks. Some parts of this are still unclear. In your launch plan could you please ensure it is complete with regards to the following types of steps: ""PR merged into develop"", ""release with PR is deployed to production""? I only see the parts that are the jobs run on prod but I don\'t understand when we\'re deploying / merging things. \r\n\r\nYou also have stuff like ""Write ..."" and ""Modify..."" which I don\'t know how to interpret -- the only things that should be in this plan are ""Merge PR into develop that does X"", ""deploy PR into production"", ""run job X in production"".\r\n\r\nAlso, some jobs don\'t have names (in the ""Store images to GCS"" bit), please write the names down in a standard format following the protocol above.\r\n\r\nAlso, has the audit job been run on the backup server yet, and are there any errors?\r\n\r\nFor your questions -- \r\n\r\n(1) Note that we typically don\'t go into maintenance mode on the server, to avoid service downtime. If a maintenance mode window is needed, have you discussed this explicitly with Vojta and Kevin, the release coordinators, and have they agreed to it?\r\n\r\n(2) I don\'t understand what you mean by ""it will work as we previously did the same part for MapReduce and it worked"". Could you point to the PR in question, or docs that confirm this? The other checks sound good.', 'comment_created': datetime.datetime(2022, 11, 22, 19, 6, 59, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 1029726508, 'comment_body': ""Thanks @lkbhitesh07. @vojtechjelinek could you please confirm that this is the standard way errors are handled in Beam jobs (i.e. we don't need to do anything additional here to get the data about what error happened and what item it happened for)? "", 'comment_created': datetime.datetime(2022, 11, 22, 19, 7, 42, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 1032619958, 'comment_body': 'Oh sure, I will mention the steps according to the PR\'s open. Please note that the PRs mentioned below will be ran and merged in production in the given sequence only.\r\n1. #16492 - Audit and fix invalid profile pictures in UserSettingsModel.\r\n    a. Merge PR into develop.\r\n    b. Deploy PR to production.\r\n    c. Run `AuditInvalidProfilePictureJob` to audit invalid profile pictures.\r\n    d. Run `FixInvalidProfilePictureJob` to fix the invalid profile pictures.\r\n    e. Run `AuditInvalidProfilePictureJob` to check if all the profile pictures are fixed.\r\n\r\n2. #16541 - Store and audit profile pictures to GCS.\r\n    a. Merge PR into develop.\r\n    b. Deploy PR to production.\r\n    c. Run `StoreProfilePictureToGCSJob` to push the profile pictures to GCS.\r\n    d. Run `AuditProfilePictureFromGCSJob` to check the images stored on GCS and the images in model are same.\r\n\r\n3. #16521 - Backend and frontend changes to store profile pictures directly to GCS and to handle takeout and wipeout services.\r\n    a. Merge PR into develop.\r\n    b. Deploy PR to production.\r\n    From now on the images will be directly deployed to GCS.\r\n\r\n4. #16584 - This PR: Will remove all the occurrences of `profile_picture_data_url` field from UserSettingsModel.\r\n    a. Merge PR into develop.\r\n    b. Deploy PR to production.\r\n    c. Run `RemoveProfilePictureFieldJob`, this will remove the field from the UserSettingsModel.\r\n\r\n5. Repeat step 2 to in case the UserSettingsModel get populated while we were deploying the changes to the server.\r\n\r\n> Also, has the audit job been run on the backup server yet\r\n\r\nWe ran the jobs from step 1 on the backup server and onto which we were able to fix the invalid profile pictures but we found out that for some images gravatar was not generated and default value was assigned to them. We were using [`fetch_gravatar`](https://github.com/oppia/oppia/blob/develop/core/domain/user_services.py#L377) function for the generation. Now I and @vojtechjelinek are trying to discuss what is the root cause for this and why we are not able to generate the gravatar for some users though we discussed few things but not able to get to the exact reason.\r\n\r\n> Note that we typically don\'t go into maintenance mode on the server, to avoid service downtime. If a maintenance mode window is needed, have you discussed this explicitly with Vojta and Kevin, the release coordinators, and have they agreed to it?\r\n\r\nYes, so I just had one small doubt which I cleared with @vojtechjelinek which was ""What happens to the request made to the server when we are deploying some code at that time?"" to which I get to know that the server will work according to the old code till the changes are deployed. According to the above sequence I mentioned we will be able to work with things smoothly.\r\n\r\n> I don\'t understand what you mean by ""it will work as we previously did the same part for MapReduce and it worked"". Could you point to the PR in question, or docs that confirm this? The other checks sound good.\r\n\r\nI think @vojtechjelinek can give us more clarity on this part mainly the links to the PR and the changes because I only briefly discussed this part with him and he mentioned that it would work and we have to test it in order to be completely sure as we have also done the similar thing in past. Hey, @vojtechjelinek can you please give us some more pointers here?\r\n\r\nPlease let me know if anything else is not clear or does not make sense.\r\nThanks', 'comment_created': datetime.datetime(2022, 11, 25, 17, 28, 9, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 1032634916, 'comment_body': ""Regarding the last paragraph here is an example of what we did in MapReduce https://github.com/oppia/oppia/blob/v3.0.4/core/domain/user_jobs_one_off.py#L444. It will hopefully work the same way in the Beam jobs.\r\n\r\nIt is fine when the model definition doesn't contain some field but the field is still stored in the actually model in the datastore, the model will still get loaded. This job should just make sure that even the models in the datastore do not have the field."", 'comment_created': datetime.datetime(2022, 11, 25, 18, 7, 46, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1032653766, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 11, 25, 19, 6, 24, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 1032653798, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 11, 25, 19, 6, 30, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 1032653823, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 11, 25, 19, 6, 36, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 1032654085, 'comment_body': 'Can you please give me some idea regarding this? I have added the part to check for the absence of `profile_picture_data_url`.\r\nThanks', 'comment_created': datetime.datetime(2022, 11, 25, 19, 7, 34, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 1032659540, 'comment_body': ""Thanks @lkbhitesh07 and @vojtechjelinek.\r\n\r\nJust to check, is the plan to make 4+ separate deployments to production in 4 separate releases? That seems a bit excessive so I wanted to check. If some of them will be batched then can you be specific about which ones are batched in a single release?\r\n\r\nFor the missing gravatars, are you talking about gravatars not being generated for new users, or that some historical data didn't have gravatars? If it's the latter then just use a default gravatar and don't worry about it, it's not worth investigating in detail."", 'comment_created': datetime.datetime(2022, 11, 25, 19, 25, 53, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 1032801863, 'comment_body': ""Right, I think we can batch all of them together in a single release as I do not see anything that will not work. I would like to confirm this part with @vojtechjelinek just to confirm.\r\n\r\n> For the missing gravatars, are you talking about gravatars not being generated for new users, or that some historical data didn't have gravatars? If it's the latter then just use a default gravatar and don't worry about it, it's not worth investigating in detail.\r\n\r\nIt is the later one, thanks for the response. Also, currently the default image that are assigned do not have the correct dimensions, it has 76x76 and we want all the images to have 150x150, so we just have to replace the default images, rest all is done.\r\nPlease let me know if you have any other questions.\r\nThanks"", 'comment_created': datetime.datetime(2022, 11, 26, 15, 35, 54, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 1032801935, 'comment_body': 'Done, missed to comment.', 'comment_created': datetime.datetime(2022, 11, 26, 15, 36, 45, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 1032810095, 'comment_body': ""```suggestion\r\n        blob = cloud_storage_emulator.EmulatorBlob(\r\n            'name', 'string', 'image/webp')\r\n```"", 'comment_created': datetime.datetime(2022, 11, 26, 16, 53, 22, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1032810402, 'comment_body': ""Make sure the job works when there are no models, make sure that when ran on model that doesn't have the field already it does not fail."", 'comment_created': datetime.datetime(2022, 11, 26, 16, 56, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1032810503, 'comment_body': 'This is not proper testing of the presence of the field.', 'comment_created': datetime.datetime(2022, 11, 26, 16, 56, 43, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1032813672, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 11, 26, 17, 31, 39, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 1032813712, 'comment_body': 'Updated, does the new change is correct?\r\nThanks', 'comment_created': datetime.datetime(2022, 11, 26, 17, 32, 2, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 1032813773, 'comment_body': 'Updated!', 'comment_created': datetime.datetime(2022, 11, 26, 17, 32, 23, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 1032921194, 'comment_body': '1, 2, 3 need to be done together, 4 would be better to be done in a later release.', 'comment_created': datetime.datetime(2022, 11, 27, 12, 18, 20, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1033233511, 'comment_body': ""OK, thanks @vojtechjelinek. @lkbhitesh07, based on @vojtechjelinek's comment, could you please post an updated version of your launch plan here?"", 'comment_created': datetime.datetime(2022, 11, 28, 8, 15, 6, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 1034598191, 'comment_body': 'Sure @seanlip, I have also added the part where we are testing on the backup server.\r\n1. #16492 - Audit and fix invalid profile pictures in UserSettingsModel.\r\na. Deploy the PR to the backup server.\r\nb. Run AuditInvalidProfilePictureJob to audit invalid profile pictures.\r\nc. Run FixInvalidProfilePictureJob to fix the invalid profile pictures.\r\nd. Run AuditInvalidProfilePictureJob to check if all the profile pictures are fixed.\r\ne. After the successful run of all the jobs, merge the PR to develop.\r\n\r\n2. Combine (#16541 - Store and audit profile pictures to GCS.) and (#16521 - Backend and frontend changes to store profile pictures directly to GCS and to handle takeout and wipeout services.)\r\na. Deploy the combined PR to the backup server.\r\nb. Run StoreProfilePictureToGCSJob to push the profile pictures to GCS.\r\nc. Run AuditProfilePictureFromGCSJob to check the images stored on GCS and the images in model are same.\r\nd. Try to upload a dummy profile picture to any user in order to see if it gets stored to GCS.\r\nd. After the successful run of all the jobs, merge the PR to develop.\r\nFrom now on the images will be directly deployed to GCS.\r\n\r\n3. Cut the release with 16492, 16541, and 16521 PRs to production.\r\na. Run AuditInvalidProfilePictureJob to audit invalid profile pictures.\r\nb. Run FixInvalidProfilePictureJob to fix the invalid profile pictures.\r\nc. Run AuditInvalidProfilePictureJob to check if all the profile pictures are fixed.\r\nd. Run StoreProfilePictureToGCSJob to push the profile pictures to GCS.\r\ne. Run AuditProfilePictureFromGCSJob to check the images stored on GCS and the images in model are same.\r\n\r\n4. #16584 - This PR: Will remove all the occurrences of the profile_picture_data_url field from UserSettingsModel.\r\na. Deploy the PR to the backup server.\r\nb. Run RemoveProfilePictureFieldJob, this will remove the field from the UserSettingsModel.\r\nc. Run the jobs from step 2, which are StoreProfilePictureToGCSJob and AuditProfilePictureFromGCSJob.\r\nd. After the successful run of all the jobs, merge the PR to develop.\r\n\r\n5. Deploy 16584 to production.\r\na. Run RemoveProfilePictureFieldJob, this will remove the field from the UserSettingsModel.\r\nb. Run the jobs from step 2, which are StoreProfilePictureToGCSJob and AuditProfilePictureFromGCSJob.\r\n\r\nPlease let me know if you have any more questions.\r\nThanks', 'comment_created': datetime.datetime(2022, 11, 29, 10, 54, 25, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 1034600030, 'comment_body': '@vojtechjelinek, just a ping in case you missed this comment.\r\nThanks', 'comment_created': datetime.datetime(2022, 11, 29, 10, 56, 4, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 1038647374, 'comment_body': 'This looks excellent. Please provide proof of successful tests on the backup server before the corresponding PRs are approved, but we can refer to this as the official plan. Thanks!', 'comment_created': datetime.datetime(2022, 12, 3, 0, 30, 38, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 1038649371, 'comment_body': ""Actually, wait, I have one question about the 4th step.\r\n\r\nShouldn't we run the StoreProfilePictureToGCSJob **just before** deploying? Otherwise, once you deploy, the field will be removed -- wouldn't that make the previous profile picture inaccessible?\r\n\r\nAlso, could you confirm what happens to the older models when you run the StoreProfilePictureToGCSJob twice? Will it overwrite images that have already been updated in the interim?"", 'comment_created': datetime.datetime(2022, 12, 3, 0, 39, 2, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 1038685445, 'comment_body': 'Yes, this is the default way.', 'comment_created': datetime.datetime(2022, 12, 3, 3, 39, 4, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1038686721, 'comment_body': ""I don't think we need to run it before step 4, because the code in step 3 will already work with images in GCS so every new user will have the picture stored in GCS so there will be no data loss."", 'comment_created': datetime.datetime(2022, 12, 3, 3, 44, 32, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1044203070, 'comment_body': 'I think @vojtechjelinek has replied to the first part of the question and I agree with that. Regarding the second part which is to run the `StoreProfilePictureToGCSJob` twice - I have submitted the testing request for #16497 where we are running the `TestGCSIoWriteJob` job twice to confirm that we do not get any error when we run the job again and can overwrite the data in the second run. [This](https://docs.google.com/document/d/1AEb-RhoctyU_Ymh0QlwONHkAD7bUva99PEF_iMIwzok/edit) sequence will be followed when we will test the features I added for GCS Io implementation. Please note that the `StoreProfilePictureToGCSJob` is based upon the GCS Io implementation which means that the `StoreProfilePictureToGCSJob` internally uses the GCS Io functionality that I introduced in the 16496.\r\nThanks', 'comment_created': datetime.datetime(2022, 12, 9, 8, 30, 28, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 1044936373, 'comment_body': 'Thanks @lkbhitesh07 -- I have looked at the [release instructions doc](https://docs.google.com/document/d/1AEb-RhoctyU_Ymh0QlwONHkAD7bUva99PEF_iMIwzok/edit#). The expected conditions are very unclear. Please fix these and leave a comment here when you have done so, so that I can take a look at it again -- currently I cannot process your previous comment properly because of the gaps here.\r\n\r\nRegarding the first point, I think I understand what you are saying. Just to check -- can you and @vojtechjelinek confirm that after ""16492, 16541, and 16521 PRs"" are deployed to the server, then the profile_picture_data_url field in UserSettingsModel is no longer used at all?', 'comment_created': datetime.datetime(2022, 12, 10, 0, 55, 48, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 1045072685, 'comment_body': '[Release instructions doc](https://docs.google.com/document/d/1AEb-RhoctyU_Ymh0QlwONHkAD7bUva99PEF_iMIwzok/edit#): I have updated the instructions, please let me know if there is something that is still unclear and I will update that ASAP.\r\n\r\nYes, I can confirm that after ""16492, 16541, and 16521 PRs"" are deployed to the server, the `profile_picture_data_url` field will no longer be used.\r\ncc @vojtechjelinek', 'comment_created': datetime.datetime(2022, 12, 10, 11, 15, 31, tzinfo=datetime.timezone.utc), 'commenter': 'lkbhitesh07', 'type': 'User'}, {'comment_id': 1045129573, 'comment_body': 'Thanks, the release doc is much clearer now! I just had one last comment.\r\n\r\nFor the rest, sounds good, thanks!', 'comment_created': datetime.datetime(2022, 12, 10, 19, 46, 21, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}]","[{'commit_sha': 'f1bc79382f844acb227446b3f017361e75810e04', 'committer_username': 'EricZLou', 'committer_name': 'Eric Lou', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 29, 17, 59, 3, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fc75f0daf85ea3209c21f33691bae034b37269d3', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3583d66253675807dd9454978f9f1e2ff9e82793', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b3ddec0da8de6f8798faee5d094c14c453e451c1', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'efccd4042e487d99c745094d9967a49f9fa493d0', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2f254005f3221a3d8b2d55f746eaf2999b1418f9', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '419868c2a684be452bd50a330348055fc759ad9f', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '30c4c1c8ece108237b6e36b272988db425646d25', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8e96a9f596caf62e1fe7b0da6ba3fe0fa707428d', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '66ad11ffd4fe3da18bbd640fe0e8a05fba23e06e', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c8d5ca85dc98c5cc2a6557340f5bac65345b854f', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dff4b7643d9b33aaeac9cb2969cbe125d58a6917', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '26a2d66fc00b9ef6b8c5f641ae8404d2f3ef7ff7', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5f553a4a3f916802a55733baa86c212372ced898', 'committer_username': 'EricZLou', 'committer_name': 'Eric Lou', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 29, 17, 59, 3, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aa4f22adf5f398ca0f6c756ebe052ecf9430a624', 'committer_username': 'EricZLou', 'committer_name': 'Eric Lou', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 29, 17, 59, 3, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f6cb0d99fd254ba37745cf15d430d0eeb6d73b38', 'committer_username': 'EricZLou', 'committer_name': 'Eric Lou', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 29, 17, 59, 3, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2a74aec00b822e306ad257c3938ab2d0ca5b0dcf', 'committer_username': 'EricZLou', 'committer_name': 'Eric Lou', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 29, 17, 59, 3, tzinfo=datetime.timezone.utc)}, {'commit_sha': '341c283d56da0a17db9e375a04ec7af4550e1697', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c998c985a878981dde661ca873fc8e350395e1cb', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '51b62c2184a41b610e903cd495838acce98b1cf2', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '25aa414ce60b3ced5f1b54a8b285beaac6423757', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c9bc986bfeebc0ee86942f6f84683cf5623caed0', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5834f07ce5ff59c9e744c6248b27a0cb754d8ebe', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '92611e7c13e11745282d2ff77ff55d589190805a', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f9a25927a69c9a7385bdfdd07b4bdd12c5869124', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f6b68e4a533fbe79c281c8fc9a30aff0cd0f8ef3', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '21a6fa091c29aa250c6bc2871c00c9c8ce6af327', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ab3eb9a9e5c4328633754e352043a2c73ba46e46', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7442a0714b47a97e8f108db3cc00cd8ac803fcfa', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '275717db900ec2f1440f81723d3a53ba1f4a2270', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7b1bb607120170691ce377a2d389df97a0df679c', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e208b7bf19b4e54bab184a4f1c91747b72d0bda8', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8ba9a1bb2cdc25a281286271733a1b3c4b3f7e1e', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'beb7f3f086d30b1ec0929e9386cbaf3b4e9cd6f3', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e3a403881452fb0dcf265e19b5164b3f572bccf5', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a48eab37df5a18b7f4e0eccc3ff379a5d8f84225', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4ad418c40f768afa7c754ae15472d73f4c0d1bf7', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5a67fca1a9e805a9a543bf69b0741a305ce6c6e9', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3a9f73138c48df2d896065248807b0770ac93180', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b8d3042c26903ca366b040a907e73edeaa4a1d33', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7d0a3571c97d5391ff8472e9cce810a86a75a467', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b625ae6009293191a44510d3643bfe2bf2d01640', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7285018520d726c8f1c4adf11194a3105ecad35f', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c43a819684a838646c2976e2ac94287125d8a671', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aeca7fd9742acb8bcd45512a2eb37e1d412bbc63', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f1cbabf4a422dce9e042bcf511b5d698ea3a39a8', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd2a2e9f5b810fa6c46a12a745f4500968a7d57ba', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '841f33ff3bd4b4c754495e1f2fa025d713fcb912', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '512941e5bec01c9c9897a7c9f67a6e69bc295a12', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a0458602f0085de62001025191be04c185344c9a', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5a01d20167f2554c86594b3f0334826b2516359b', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '239af6c2df343e1fa78e56c253cd2300f9b94ff2', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5e91bd4ba6adfc6ff43032001477c0f2ea54f006', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8c405d754cb5a5542f7b47031324db845ea7d057', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9f7d94e14367a89f75707b54f9f81caa75f579d4', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd710dea43f4002f70cd8358eee095584769e94dd', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f112bf5826846528b13cfece10e766760f9636b7', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '887cd1969d0e0ec1afbe70bdd29f8d729a5106b0', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4821f513a61db725f22b8c29bec1274183077a28', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3c427be79027174c8cdd673c877e9800d6881fe3', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e4367ea56c13fd2144006dc3d575481884363e3a', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a59240ab6bc55ca76c6c1815e5f3e45eb6af4b32', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '348b51f801e1bc59d03ee8161d4297ceba4f442e', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'adafe5f06ac4c6fcb151d51c41e05d9d4095f9ba', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '60147a11301c5ddd940ae5dcb7abe531c2d92750', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'db1cfbc66f94171282b304dda223847260d85607', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c638044494cc41f4a3305fe90261cafc346e4f77', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ef224c53f597795061950f3641ce46178704cc6f', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2162ccaf5704b6a06339e2beaabeef92b0cc236c', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f448505975185b67e968aa43fad4a8b751b11f66', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '66070be2faed1b111a97f4597a66b2cf774aabd9', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6341b208dc79f0d7479166034145fccc3f21a5e2', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '449720d33ceba4aa226527d8f40013e7902b9dd3', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '62d32e8c6a2a35a87d104cebec8f840f8dd26266', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'af6e8cf5886be9cd153ae8a6b67c73705f1e99ed', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '475665f0df8c706163224b19409324d778285423', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1862d603ef77a267da7ea7e2d30170c2617dc047', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '766b2d197c89505f3595ffa204920f1e891cd98d', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1f06880a16bd7bc0fde7aed18e5c04d036f0d72f', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a53a088b1e6a4983ad6788290452201970d8144f', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1aff47778f11940a68e4c334181c56ac8dc8fb70', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b7e2dc7abbbfcd11aa619ecdcfeb33c0e628f5b9', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9a79dc0d92c701c0fea6900c85add4f9e697603c', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '47b4391b7bf09a8dc6f643dfa3a45848395ca54b', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '07e30e1ee3d113b3368573e793d556b6faa6aa71', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8105e8967a13dba50cb1bbdb0cc74fb5d541d610', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '832b7b120a23bedca936f399501278e4b56b23a3', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'eabaca17c52b198f28dc68bdd5bec25d372cd2c9', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7d0e080153c673b6c506d88afaa3329761f5b12d', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8f83f2d80ad3378e95bd6341baa45d0917a4151d', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4456d7bda26e36d3be8d2dea6d2a469ba35f233d', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '25f4f01e88c872975bf5b966fb2ddd69c4f7ed3c', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7413f5f100b1e702f4e746097ab096a7c756a967', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f2dc127165ac4f0cd1924dc1c0de8d30b1216779', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2fec5cd0c3769fc3047e1d6e56c51464e279eccd', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b17265862fb5dc5017f2aca8b566becd7b882534', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '216ce36fb1bd5b7cf6b7e8940f18c93cd59085c4', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '176c0fbca7650e39a9251dd8cd963103dcbbf18d', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5ec952430d214ec7b219c81da85c74c00bb58581', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6fe1ed0d70082ac01310bba75743d445f73b1997', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5bf3cad82baca28704db92d4333565f03dc4fe52', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ca4afbf1e2165db7b6167543df44414f1a878368', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c45b31134a95b22a279a38e36dfbfd4773030d8f', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '80d1af97404ee2741e1628050ee1faaff67323fd', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '88e2ef4bcb645714103c9f7594b47c5258100a8e', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '776a7bb77fffba08a51ada96e49e2d5faeb0c2f8', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6ef0b2a3b1a9911a2a9d1acfd6c7b7ae8f4b9a71', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b53ef2d516966fee4a1aead064dc8fe12ee6dd1b', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4e57ef0326fcf02ddfd35853e44bbeb18724ee76', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7f9195d92ced14c13160479a88b2a0d2dcde0709', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dd65bed057a62eaa60becc4b0b9b4bf7a673c966', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'be6cb016558e2f5ecabc60f5d44019635630f1be', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8ffb195432d247b8b6bb41fe338b1dd42b424054', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '75484a4d53c84279aed231bdd9de2f5c8b82962d', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9fc2f3038e7da4f6921d0bdb3ba717582b0b611e', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5acfe678bc9695b6b25665883a7a6cbfd9efd106', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e043b8283268c227236c502b8f75266cac6d2d52', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b2b0a665e5e51f6fd744754001bc41351c28247b', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '70eb857e2fa1e20dab766d0de126b29a4e8697a1', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cf506ed05312ae3beaf079971b67e0a2061f81fa', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1f00aeec41696106cfa2c579282e9ee8fc857b31', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b88b72eb9e5baafeb7afe4864d4000b88cae9525', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '53249a0189ee184c50314fe27ff3a7c7e169b7f8', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ff47bb380d180937853401cf5f64496629b44847', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1fcf2e6d5ef6bd730e21f2fb975bb35af03acae5', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3175fce01f54ceb025ec3696ff29d415b788d634', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fda16ac6652d7bd522f91d055d69d8598c3326a9', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b554651b813f31a472791504baae9ada966d7328', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e6e415012506c9173225a15a4ae7ecfb203dd962', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ea60edd3c4629e7303140a8d4b1321118671c46c', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'be8492e7c171e429752a66675e2b97aefab9e8b1', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ed1bad712f3416e9fe2b2c7e13f2e136172cb99f', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1230f5da3b37f77067a4f6b8d459545580aab6bc', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'eecd2b1334cd3d4ac0075b59ec564803be3d2fa2', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5deb598ac0e79a49679af76218682154c8fcbf7f', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4fdaf6258c505f09cb4701886361e1c497af7452', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '38338f052c8a55ec227e0d146e484c9d216c519c', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c1f7e6ad8bde68f6ebae5b2164fb0bb3ebf0ed36', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '42e43fca563a25719ce044c1397b8afd07031ae5', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5bb826f90838b027fdc46acb9b44311cae64fc22', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6da12277aee27468391c5d9c7758034be1b12795', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4ddb820bf2b78034841109b89b9b6e926cc7957e', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ec3d1b1877b7d583fd0703692218f77be1f5b502', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '34608f4f7bcded122387c85d97ff50a97023030f', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0c36486abbf5d1b1dfdffd06091a33474b6e5e63', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c8490c9e8acb65969473b69af3d7886d8d728a10', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f7d1ad1cf26ac9ad04a5a4d83ace185a6c99f09e', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0bc8970206370ca33aacd9f11bdffbb83f275bc5', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ebcb9171c6e5d71ff6a7f4ca9f6bdcbef0c26d43', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4cf3ef59f14b110861a447c5cbc5014dc20e05f1', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '304a608806850c3b5ab657773422c3d581617e10', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dc827daa48d4772f03d0a9da5ab570fd2d32b0b8', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd1d1bfd18e99eef3050ae315f3387ce603284bed', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b2c9212784d497db692613071acec454b232c531', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9807645280fd98e5bbcb50dfe3e5ea28e45092b7', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5f571b0f0b787032b1be4ce4ce508b47481e506b', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd354501e5168c3a16f29bc6e14c30511a2306a01', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a7a41981dfc1adb147444ba6a107437e22ceb159', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1afe1f774748a639caaf9c1312ef7891635de99f', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2553c8d9dd93a1f8ee2d67b35a5b02d6269e41a9', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b92b120c3608c9c0bf4fbce9514c7c7219655740', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '92d753557c6d680898873c2df9f17d662d7cfbd6', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e92d65a5006dc09d70b21770d8b5c899de12118a', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f0d4b0d576d72bf31930211771cc7d09313b3eeb', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5f6890d087b1b5a59976cec3b60e28af0ec62e8f', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0977a76c223b25cfb6ced3902194f5064e6db293', 'committer_username': 'lkbhitesh07', 'committer_name': 'Hitesh Tomar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 17, 8, 21, tzinfo=datetime.timezone.utc)}]",Hitesh Tomar,44300735,,User,,30,,3,13

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
40687563,oppia,oppia/oppia,Python,3844,5716,240,775,15757,1417,418,24,"[{'id': 2031938736, 'number': 20875, 'closed': None, 'created': datetime.datetime(2024, 8, 22, 11, 28, 34, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 0, 'deletions': 56, 'state': 'open'}, {'id': 1926463753, 'number': 20490, 'closed': datetime.datetime(2024, 6, 30, 10, 28, 7, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 6, 18, 13, 4, 50, tzinfo=datetime.timezone.utc), 'time_taken': 1027397.0, 'time_delta': '11 days, 21:23:17', 'additions': 908, 'deletions': 9, 'state': 'closed'}, {'id': 1912001157, 'number': 20429, 'closed': datetime.datetime(2024, 8, 24, 14, 23, 15, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 6, 10, 11, 30, 41, tzinfo=datetime.timezone.utc), 'time_taken': 6490354.0, 'time_delta': '75 days, 2:52:34', 'additions': 1905, 'deletions': 13, 'state': 'closed'}, {'id': 1837183268, 'number': 20204, 'closed': datetime.datetime(2024, 4, 23, 18, 51, 8, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 4, 23, 17, 42, 22, tzinfo=datetime.timezone.utc), 'time_taken': 4126.0, 'time_delta': '1:08:46', 'additions': 2, 'deletions': 2, 'state': 'closed'}, {'id': 1793076967, 'number': 20061, 'closed': datetime.datetime(2024, 4, 19, 19, 18, 54, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 3, 27, 4, 17, 36, tzinfo=datetime.timezone.utc), 'time_taken': 2041278.0, 'time_delta': '23 days, 15:01:18', 'additions': 246, 'deletions': 1, 'state': 'closed'}, {'id': 1762933656, 'number': 19906, 'closed': datetime.datetime(2024, 3, 15, 14, 56, 34, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 3, 8, 12, 47, 38, tzinfo=datetime.timezone.utc), 'time_taken': 612536.0, 'time_delta': '7 days, 2:08:56', 'additions': 63, 'deletions': 1311, 'state': 'closed'}, {'id': 1728282329, 'number': 19756, 'closed': datetime.datetime(2024, 2, 24, 17, 44, 44, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 2, 15, 18, 57, 17, tzinfo=datetime.timezone.utc), 'time_taken': 773247.0, 'time_delta': '8 days, 22:47:27', 'additions': 181, 'deletions': 208, 'state': 'closed'}, {'id': 1702010385, 'number': 19632, 'closed': datetime.datetime(2024, 2, 14, 20, 33, 44, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 1, 30, 12, 43, 31, tzinfo=datetime.timezone.utc), 'time_taken': 1324213.0, 'time_delta': '15 days, 7:50:13', 'additions': 868, 'deletions': 1987, 'state': 'closed'}, {'id': 1515145738, 'number': 18872, 'closed': datetime.datetime(2023, 9, 20, 7, 52, 41, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 9, 14, 7, 45, 8, tzinfo=datetime.timezone.utc), 'time_taken': 518853.0, 'time_delta': '6 days, 0:07:33', 'additions': 430, 'deletions': 249, 'state': 'closed'}, {'id': 1491781633, 'number': 18819, 'closed': datetime.datetime(2024, 2, 3, 20, 6, 34, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 8, 28, 9, 58, 31, tzinfo=datetime.timezone.utc), 'time_taken': 13774083.0, 'time_delta': '159 days, 10:08:03', 'additions': 3599, 'deletions': 1956, 'state': 'closed'}, {'id': 1462622606, 'number': 18739, 'closed': datetime.datetime(2023, 9, 3, 8, 53, 23, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 8, 4, 9, 30, 57, tzinfo=datetime.timezone.utc), 'time_taken': 2589746.0, 'time_delta': '29 days, 23:22:26', 'additions': 575, 'deletions': 206, 'state': 'closed'}, {'id': 1435942513, 'number': 18640, 'closed': datetime.datetime(2023, 8, 27, 14, 29, 11, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 7, 15, 15, 36, 49, tzinfo=datetime.timezone.utc), 'time_taken': 3711142.0, 'time_delta': '42 days, 22:52:22', 'additions': 191, 'deletions': 37, 'state': 'closed'}, {'id': 1430972576, 'number': 18619, 'closed': datetime.datetime(2023, 7, 19, 4, 18, 29, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 7, 12, 10, 8, tzinfo=datetime.timezone.utc), 'time_taken': 583829.0, 'time_delta': '6 days, 18:10:29', 'additions': 85, 'deletions': 267, 'state': 'closed'}, {'id': 1420572455, 'number': 18588, 'closed': datetime.datetime(2023, 9, 12, 9, 11, 23, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 7, 5, 7, 32, 51, tzinfo=datetime.timezone.utc), 'time_taken': 5967512.0, 'time_delta': '69 days, 1:38:32', 'additions': 872, 'deletions': 770, 'state': 'closed'}, {'id': 1412984266, 'number': 18564, 'closed': datetime.datetime(2023, 9, 6, 13, 27, 6, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 6, 29, 9, 4, 35, tzinfo=datetime.timezone.utc), 'time_taken': 5977351.0, 'time_delta': '69 days, 4:22:31', 'additions': 523, 'deletions': 874, 'state': 'closed'}, {'id': 1404823781, 'number': 18477, 'closed': datetime.datetime(2023, 9, 10, 22, 13, 21, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 6, 23, 10, 9, 41, tzinfo=datetime.timezone.utc), 'time_taken': 6869020.0, 'time_delta': '79 days, 12:03:40', 'additions': 1181, 'deletions': 952, 'state': 'closed'}, {'id': 1398016934, 'number': 18413, 'closed': datetime.datetime(2023, 6, 30, 7, 41, 44, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 6, 19, 11, 3, 26, tzinfo=datetime.timezone.utc), 'time_taken': 938298.0, 'time_delta': '10 days, 20:38:18', 'additions': 520, 'deletions': 115, 'state': 'closed'}, {'id': 1393388404, 'number': 18386, 'closed': datetime.datetime(2023, 6, 22, 8, 35, 52, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 6, 15, 4, 2, 33, tzinfo=datetime.timezone.utc), 'time_taken': 621199.0, 'time_delta': '7 days, 4:33:19', 'additions': 424, 'deletions': 302, 'state': 'closed'}, {'id': 1386062910, 'number': 18355, 'closed': datetime.datetime(2023, 6, 24, 2, 45, 4, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 6, 9, 11, 52, 16, tzinfo=datetime.timezone.utc), 'time_taken': 1263168.0, 'time_delta': '14 days, 14:52:48', 'additions': 138, 'deletions': 65, 'state': 'closed'}, {'id': 1385953465, 'number': 18354, 'closed': datetime.datetime(2023, 6, 24, 10, 55, 39, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 6, 9, 10, 32, 47, tzinfo=datetime.timezone.utc), 'time_taken': 1297372.0, 'time_delta': '15 days, 0:22:52', 'additions': 349, 'deletions': 177, 'state': 'closed'}, {'id': 1377655245, 'number': 18326, 'closed': datetime.datetime(2023, 6, 15, 19, 2, 6, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 6, 4, 9, 31, 16, tzinfo=datetime.timezone.utc), 'time_taken': 984650.0, 'time_delta': '11 days, 9:30:50', 'additions': 2283, 'deletions': 105, 'state': 'closed'}, {'id': 1372004880, 'number': 18308, 'closed': datetime.datetime(2023, 6, 10, 4, 32, 40, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 5, 31, 11, 28, 44, tzinfo=datetime.timezone.utc), 'time_taken': 839036.0, 'time_delta': '9 days, 17:03:56', 'additions': 886, 'deletions': 886, 'state': 'closed'}, {'id': 1370887759, 'number': 18306, 'closed': datetime.datetime(2023, 7, 7, 15, 44, 40, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 5, 30, 18, 11, 12, tzinfo=datetime.timezone.utc), 'time_taken': 3274408.0, 'time_delta': '37 days, 21:33:28', 'additions': 140, 'deletions': 1251, 'state': 'closed'}, {'id': 1349689956, 'number': 18226, 'closed': datetime.datetime(2023, 5, 27, 9, 51, 49, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 5, 14, 3, 34, 3, tzinfo=datetime.timezone.utc), 'time_taken': 1145866.0, 'time_delta': '13 days, 6:17:46', 'additions': 428, 'deletions': 317, 'state': 'closed'}, {'id': 1328354529, 'number': 18150, 'closed': datetime.datetime(2023, 6, 4, 11, 55, 25, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 4, 26, 8, 49, 48, tzinfo=datetime.timezone.utc), 'time_taken': 3380737.0, 'time_delta': '39 days, 3:05:37', 'additions': 2680, 'deletions': 948, 'state': 'closed'}, {'id': 1325029924, 'number': 18142, 'closed': datetime.datetime(2023, 5, 2, 2, 33, 4, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 4, 24, 9, 12, 27, tzinfo=datetime.timezone.utc), 'time_taken': 667237.0, 'time_delta': '7 days, 17:20:37', 'additions': 114, 'deletions': 0, 'state': 'closed'}, {'id': 1304192244, 'number': 17964, 'closed': datetime.datetime(2023, 5, 13, 12, 23, 40, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 4, 6, 6, 38, 30, tzinfo=datetime.timezone.utc), 'time_taken': 3217510.0, 'time_delta': '37 days, 5:45:10', 'additions': 13, 'deletions': 0, 'state': 'closed'}, {'id': 1285715838, 'number': 17799, 'closed': datetime.datetime(2023, 4, 10, 6, 14, 54, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 3, 22, 11, 45, 11, tzinfo=datetime.timezone.utc), 'time_taken': 1621783.0, 'time_delta': '18 days, 18:29:43', 'additions': 52, 'deletions': 2, 'state': 'closed'}, {'id': 1183688186, 'number': 16821, 'closed': datetime.datetime(2023, 1, 5, 19, 6, 33, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 1, 3, 16, 22, 18, tzinfo=datetime.timezone.utc), 'time_taken': 182655.0, 'time_delta': '2 days, 2:44:15', 'additions': 0, 'deletions': 3, 'state': 'closed'}, {'id': 1136519210, 'number': 16633, 'closed': datetime.datetime(2023, 1, 24, 19, 13, 6, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 11, 26, 18, 9, 9, tzinfo=datetime.timezone.utc), 'time_taken': 5101437.0, 'time_delta': '59 days, 1:03:57', 'additions': 741, 'deletions': 793, 'state': 'closed'}, {'id': 1133898147, 'number': 16614, 'closed': datetime.datetime(2022, 12, 28, 13, 37, 39, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 11, 23, 18, 10, 50, tzinfo=datetime.timezone.utc), 'time_taken': 3007609.0, 'time_delta': '34 days, 19:26:49', 'additions': 9, 'deletions': 0, 'state': 'closed'}, {'id': 1129192748, 'number': 16584, 'closed': datetime.datetime(2023, 5, 17, 5, 37, 26, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 11, 20, 16, 30, 11, tzinfo=datetime.timezone.utc), 'time_taken': 15340035.0, 'time_delta': '177 days, 13:07:15', 'additions': 237, 'deletions': 1150, 'state': 'closed'}, {'id': 1121298530, 'number': 16541, 'closed': datetime.datetime(2023, 2, 10, 7, 50, 6, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 11, 14, 12, 36, 58, tzinfo=datetime.timezone.utc), 'time_taken': 7585988.0, 'time_delta': '87 days, 19:13:08', 'additions': 646, 'deletions': 15, 'state': 'closed'}, {'id': 1118961803, 'number': 16525, 'closed': datetime.datetime(2022, 11, 16, 4, 24, 52, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 11, 11, 11, 8, 35, tzinfo=datetime.timezone.utc), 'time_taken': 407777.0, 'time_delta': '4 days, 17:16:17', 'additions': 47, 'deletions': 50, 'state': 'closed'}, {'id': 1117783048, 'number': 16521, 'closed': datetime.datetime(2023, 3, 19, 6, 33, 42, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 11, 10, 14, 15, 57, tzinfo=datetime.timezone.utc), 'time_taken': 11117865.0, 'time_delta': '128 days, 16:17:45', 'additions': 2295, 'deletions': 1823, 'state': 'closed'}, {'id': 1111961971, 'number': 16497, 'closed': datetime.datetime(2023, 1, 1, 14, 13, 18, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 11, 6, 13, 44, 36, tzinfo=datetime.timezone.utc), 'time_taken': 4840122.0, 'time_delta': '56 days, 0:28:42', 'additions': 427, 'deletions': 8, 'state': 'closed'}, {'id': 1111419892, 'number': 16492, 'closed': datetime.datetime(2023, 1, 2, 19, 38, 12, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 11, 5, 0, 57, 23, tzinfo=datetime.timezone.utc), 'time_taken': 5078449.0, 'time_delta': '58 days, 18:40:49', 'additions': 490, 'deletions': 6, 'state': 'closed'}, {'id': 1110246352, 'number': 16483, 'closed': datetime.datetime(2022, 11, 4, 6, 55, 54, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 11, 4, 0, 41, 50, tzinfo=datetime.timezone.utc), 'time_taken': 22444.0, 'time_delta': '6:14:04', 'additions': 150, 'deletions': 7, 'state': 'closed'}, {'id': 1106026943, 'number': 16457, 'closed': datetime.datetime(2022, 11, 5, 18, 2, 22, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 10, 31, 23, 9, 6, tzinfo=datetime.timezone.utc), 'time_taken': 413596.0, 'time_delta': '4 days, 18:53:16', 'additions': 396, 'deletions': 180, 'state': 'closed'}, {'id': 1088779141, 'number': 16328, 'closed': datetime.datetime(2022, 10, 18, 4, 51, 12, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 10, 17, 5, 37, 48, tzinfo=datetime.timezone.utc), 'time_taken': 83604.0, 'time_delta': '23:13:24', 'additions': 517, 'deletions': 8, 'state': 'closed'}, {'id': 1088656703, 'number': 16327, 'closed': datetime.datetime(2022, 10, 17, 5, 34, 28, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 10, 17, 2, 49, 51, tzinfo=datetime.timezone.utc), 'time_taken': 9877.0, 'time_delta': '2:44:37', 'additions': 14391, 'deletions': 120, 'state': 'closed'}, {'id': 1088618412, 'number': 16326, 'closed': datetime.datetime(2022, 10, 17, 2, 6, 8, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 10, 17, 1, 55, 7, tzinfo=datetime.timezone.utc), 'time_taken': 661.0, 'time_delta': '0:11:01', 'additions': 32617, 'deletions': 20561, 'state': 'closed'}, {'id': 1058875721, 'number': 16065, 'closed': datetime.datetime(2022, 10, 13, 19, 53, 30, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 9, 16, 17, 28, 11, tzinfo=datetime.timezone.utc), 'time_taken': 2341519.0, 'time_delta': '27 days, 2:25:19', 'additions': 1098, 'deletions': 218, 'state': 'closed'}, {'id': 1047703613, 'number': 16012, 'closed': datetime.datetime(2022, 10, 11, 22, 5, 56, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 9, 6, 15, 12, tzinfo=datetime.timezone.utc), 'time_taken': 3048836.0, 'time_delta': '35 days, 6:53:56', 'additions': 1320, 'deletions': 0, 'state': 'closed'}, {'id': 1020587952, 'number': 15861, 'closed': datetime.datetime(2022, 10, 30, 7, 51, 36, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 8, 17, 58, 23, tzinfo=datetime.timezone.utc), 'time_taken': 7134793.0, 'time_delta': '82 days, 13:53:13', 'additions': 8587, 'deletions': 176, 'state': 'closed'}, {'id': 1017627778, 'number': 15846, 'closed': datetime.datetime(2022, 9, 21, 10, 25, 22, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 4, 14, 32, 10, tzinfo=datetime.timezone.utc), 'time_taken': 4132392.0, 'time_delta': '47 days, 19:53:12', 'additions': 4636, 'deletions': 1, 'state': 'closed'}, {'id': 1007455414, 'number': 15797, 'closed': datetime.datetime(2022, 10, 14, 1, 44, 48, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 25, 15, 25, 4, tzinfo=datetime.timezone.utc), 'time_taken': 6949184.0, 'time_delta': '80 days, 10:19:44', 'additions': 2294, 'deletions': 5489, 'state': 'closed'}, {'id': 1007243973, 'number': 15796, 'closed': datetime.datetime(2022, 10, 13, 19, 54, 44, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 25, 12, 25, 6, tzinfo=datetime.timezone.utc), 'time_taken': 6938978.0, 'time_delta': '80 days, 7:29:38', 'additions': 268, 'deletions': 70, 'state': 'closed'}, {'id': 998479685, 'number': 15748, 'closed': datetime.datetime(2022, 8, 16, 16, 41, 29, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 16, 18, 47, 45, tzinfo=datetime.timezone.utc), 'time_taken': 2670824.0, 'time_delta': '30 days, 21:53:44', 'additions': 2340, 'deletions': 0, 'state': 'closed'}, {'id': 996722168, 'number': 15714, 'closed': datetime.datetime(2022, 8, 14, 14, 48, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 14, 14, 4, 20, tzinfo=datetime.timezone.utc), 'time_taken': 2681020.0, 'time_delta': '31 days, 0:43:40', 'additions': 2508, 'deletions': 0, 'state': 'closed'}, {'id': 963837567, 'number': 15563, 'closed': datetime.datetime(2022, 8, 14, 14, 47, 59, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 6, 10, 8, 10, 50, tzinfo=datetime.timezone.utc), 'time_taken': 5639829.0, 'time_delta': '65 days, 6:37:09', 'additions': 3105, 'deletions': 1, 'state': 'closed'}, {'id': 917695142, 'number': 15394, 'closed': datetime.datetime(2022, 4, 26, 16, 6, 26, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 4, 25, 4, 40, 28, tzinfo=datetime.timezone.utc), 'time_taken': 127558.0, 'time_delta': '1 day, 11:25:58', 'additions': 0, 'deletions': 5, 'state': 'closed'}, {'id': 904584111, 'number': 15283, 'closed': datetime.datetime(2022, 4, 14, 16, 39, 5, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 4, 9, 5, 24, 14, tzinfo=datetime.timezone.utc), 'time_taken': 472491.0, 'time_delta': '5 days, 11:14:51', 'additions': 0, 'deletions': 232, 'state': 'closed'}, {'id': 893170517, 'number': 15235, 'closed': datetime.datetime(2022, 5, 10, 16, 22, 35, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 3, 29, 14, 56, 24, tzinfo=datetime.timezone.utc), 'time_taken': 3633971.0, 'time_delta': '42 days, 1:26:11', 'additions': 13, 'deletions': 0, 'state': 'closed'}, {'id': 884199900, 'number': 15172, 'closed': datetime.datetime(2022, 6, 12, 18, 16, 4, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 3, 20, 15, 49, 3, tzinfo=datetime.timezone.utc), 'time_taken': 7266421.0, 'time_delta': '84 days, 2:27:01', 'additions': 263, 'deletions': 0, 'state': 'closed'}, {'id': 858757779, 'number': 14980, 'closed': datetime.datetime(2022, 2, 23, 2, 21, 55, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 2, 20, 6, 41, 58, tzinfo=datetime.timezone.utc), 'time_taken': 243597.0, 'time_delta': '2 days, 19:39:57', 'additions': 15, 'deletions': 0, 'state': 'closed'}, {'id': 845581955, 'number': 14908, 'closed': datetime.datetime(2022, 2, 16, 21, 16, 11, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 2, 10, 16, 24, 18, tzinfo=datetime.timezone.utc), 'time_taken': 535913.0, 'time_delta': '6 days, 4:51:53', 'additions': 9, 'deletions': 169, 'state': 'closed'}, {'id': 829748426, 'number': 14748, 'closed': datetime.datetime(2022, 2, 17, 19, 38, 10, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 1, 23, 13, 24, 40, tzinfo=datetime.timezone.utc), 'time_taken': 2182410.0, 'time_delta': '25 days, 6:13:30', 'additions': 232, 'deletions': 0, 'state': 'closed'}, {'id': 770108754, 'number': 14159, 'closed': datetime.datetime(2022, 1, 25, 4, 45, 13, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 11, 1, 2, 35, 20, tzinfo=datetime.timezone.utc), 'time_taken': 7351793.0, 'time_delta': '85 days, 2:09:53', 'additions': 106, 'deletions': 3, 'state': 'closed'}, {'id': 742419461, 'number': 13918, 'closed': datetime.datetime(2021, 10, 7, 10, 16, 5, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 9, 24, 18, 16, 52, tzinfo=datetime.timezone.utc), 'time_taken': 1094353.0, 'time_delta': '12 days, 15:59:13', 'additions': 25, 'deletions': 0, 'state': 'closed'}, {'id': 740266782, 'number': 13898, 'closed': datetime.datetime(2021, 9, 23, 18, 24, 58, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 9, 22, 9, 12, 12, tzinfo=datetime.timezone.utc), 'time_taken': 119566.0, 'time_delta': '1 day, 9:12:46', 'additions': 7, 'deletions': 6, 'state': 'closed'}, {'id': 730716888, 'number': 13839, 'closed': datetime.datetime(2021, 9, 9, 19, 31, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 9, 9, 15, 45, 36, tzinfo=datetime.timezone.utc), 'time_taken': 13524.0, 'time_delta': '3:45:24', 'additions': 19, 'deletions': 2, 'state': 'closed'}, {'id': 730706818, 'number': 13838, 'closed': datetime.datetime(2021, 10, 21, 16, 11, 7, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 9, 9, 15, 33, 27, tzinfo=datetime.timezone.utc), 'time_taken': 3631060.0, 'time_delta': '42 days, 0:37:40', 'additions': 112, 'deletions': 15, 'state': 'closed'}, {'id': 726603943, 'number': 13803, 'closed': datetime.datetime(2021, 9, 7, 22, 55, 39, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 9, 3, 8, 18, 32, tzinfo=datetime.timezone.utc), 'time_taken': 398227.0, 'time_delta': '4 days, 14:37:07', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 722363301, 'number': 13774, 'closed': datetime.datetime(2021, 8, 30, 16, 43, 7, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 30, 10, 25, 45, tzinfo=datetime.timezone.utc), 'time_taken': 22642.0, 'time_delta': '6:17:22', 'additions': 7, 'deletions': 1, 'state': 'closed'}, {'id': 721848789, 'number': 13763, 'closed': datetime.datetime(2021, 9, 19, 22, 47, 29, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 28, 21, 31, 55, tzinfo=datetime.timezone.utc), 'time_taken': 1905334.0, 'time_delta': '22 days, 1:15:34', 'additions': 3, 'deletions': 3, 'state': 'closed'}, {'id': 721845135, 'number': 13761, 'closed': datetime.datetime(2021, 8, 30, 17, 2, 24, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 28, 20, 57, 4, tzinfo=datetime.timezone.utc), 'time_taken': 158720.0, 'time_delta': '1 day, 20:05:20', 'additions': 0, 'deletions': 0, 'state': 'closed'}, {'id': 682998617, 'number': 13296, 'closed': datetime.datetime(2021, 7, 5, 21, 3, 38, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 3, 9, 42, 4, tzinfo=datetime.timezone.utc), 'time_taken': 213694.0, 'time_delta': '2 days, 11:21:34', 'additions': 0, 'deletions': 1, 'state': 'closed'}, {'id': 679561126, 'number': 13255, 'closed': datetime.datetime(2021, 7, 8, 8, 47, 6, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 29, 3, 40, 53, tzinfo=datetime.timezone.utc), 'time_taken': 795973.0, 'time_delta': '9 days, 5:06:13', 'additions': 7, 'deletions': 9, 'state': 'closed'}, {'id': 653679554, 'number': 12922, 'closed': datetime.datetime(2021, 6, 16, 6, 36, 24, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 5, 26, 12, 13, 19, tzinfo=datetime.timezone.utc), 'time_taken': 1794185.0, 'time_delta': '20 days, 18:23:05', 'additions': 6, 'deletions': 4, 'state': 'closed'}, {'id': 629940621, 'number': 12726, 'closed': datetime.datetime(2021, 5, 21, 3, 47, 5, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 5, 4, 16, 37, 21, tzinfo=datetime.timezone.utc), 'time_taken': 1422584.0, 'time_delta': '16 days, 11:09:44', 'additions': 2, 'deletions': 2, 'state': 'closed'}, {'id': 626332659, 'number': 12674, 'closed': datetime.datetime(2021, 5, 21, 0, 1, 44, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 4, 29, 17, 58, 10, tzinfo=datetime.timezone.utc), 'time_taken': 1836214.0, 'time_delta': '21 days, 6:03:34', 'additions': 3, 'deletions': 3, 'state': 'closed'}, {'id': 622545930, 'number': 12629, 'closed': datetime.datetime(2021, 5, 19, 22, 41, 12, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 4, 24, 8, 17, 38, tzinfo=datetime.timezone.utc), 'time_taken': 2211814.0, 'time_delta': '25 days, 14:23:34', 'additions': 9, 'deletions': 3, 'state': 'closed'}, {'id': 586816740, 'number': 12133, 'closed': datetime.datetime(2021, 3, 25, 2, 34, 59, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 3, 8, 14, 15, 27, tzinfo=datetime.timezone.utc), 'time_taken': 1426772.0, 'time_delta': '16 days, 12:19:32', 'additions': 4, 'deletions': 7, 'state': 'closed'}, {'id': 586238021, 'number': 12127, 'closed': datetime.datetime(2021, 3, 16, 11, 28, 55, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 3, 7, 11, 51, 3, tzinfo=datetime.timezone.utc), 'time_taken': 776272.0, 'time_delta': '8 days, 23:37:52', 'additions': 22, 'deletions': 22, 'state': 'closed'}, {'id': 562465966, 'number': 11800, 'closed': datetime.datetime(2021, 3, 4, 11, 27, 1, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 1, 27, 12, 21, 13, tzinfo=datetime.timezone.utc), 'time_taken': 3107148.0, 'time_delta': '35 days, 23:05:48', 'additions': 17, 'deletions': 10, 'state': 'closed'}, {'id': 561447259, 'number': 11783, 'closed': datetime.datetime(2021, 1, 26, 14, 12, 34, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 1, 26, 0, 29, 34, tzinfo=datetime.timezone.utc), 'time_taken': 49380.0, 'time_delta': '13:43:00', 'additions': 26, 'deletions': 25, 'state': 'closed'}, {'id': 561284284, 'number': 11782, 'closed': datetime.datetime(2021, 1, 26, 14, 10, 50, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 1, 25, 18, 35, 34, tzinfo=datetime.timezone.utc), 'time_taken': 70516.0, 'time_delta': '19:35:16', 'additions': 18, 'deletions': 17, 'state': 'closed'}, {'id': 561087264, 'number': 11778, 'closed': datetime.datetime(2021, 2, 13, 17, 44, 5, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 1, 25, 13, 40, 11, tzinfo=datetime.timezone.utc), 'time_taken': 1656234.0, 'time_delta': '19 days, 4:03:54', 'additions': 66, 'deletions': 57, 'state': 'closed'}, {'id': 330045448, 'number': 7803, 'closed': datetime.datetime(2019, 11, 4, 3, 48, 48, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2019, 10, 19, 18, 32, 30, tzinfo=datetime.timezone.utc), 'time_taken': 1329378.0, 'time_delta': '15 days, 9:16:18', 'additions': 110, 'deletions': 11, 'state': 'closed'}, {'id': 325083059, 'number': 7751, 'closed': datetime.datetime(2019, 11, 5, 19, 54, 21, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2019, 10, 6, 22, 56, 55, tzinfo=datetime.timezone.utc), 'time_taken': 2581046.0, 'time_delta': '29 days, 20:57:26', 'additions': 112, 'deletions': 11, 'state': 'closed'}, {'id': 324395669, 'number': 7740, 'closed': datetime.datetime(2019, 10, 6, 3, 57, 25, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2019, 10, 3, 20, 32, 59, tzinfo=datetime.timezone.utc), 'time_taken': 199466.0, 'time_delta': '2 days, 7:24:26', 'additions': 54, 'deletions': 724, 'state': 'closed'}, {'id': 323782868, 'number': 7732, 'closed': datetime.datetime(2019, 10, 2, 16, 12, 53, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2019, 10, 2, 14, 30, 46, tzinfo=datetime.timezone.utc), 'time_taken': 6127.0, 'time_delta': '1:42:07', 'additions': 47, 'deletions': 5, 'state': 'closed'}, {'id': 323402772, 'number': 7725, 'closed': datetime.datetime(2019, 10, 2, 9, 13, 22, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2019, 10, 1, 18, 2, 26, tzinfo=datetime.timezone.utc), 'time_taken': 54656.0, 'time_delta': '15:10:56', 'additions': 6, 'deletions': 0, 'state': 'closed'}]"
