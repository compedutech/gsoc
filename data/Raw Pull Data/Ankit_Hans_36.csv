pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
665794858,charmil as wrapper for cobra,"## Plugin 
`plugins/`
Uses Plugin structure to create a command

## Core 
`pkg/pluginloader/`
Takes the input from plugin and create a cobra command out of it.

## Host 
`cmd/host/`
Adds above created commands as host commands



## Example: 
- create an add command in the plugin using charmil-core
```go
var AddCommand = pluginloader.CreateCommand(&pluginloader.CommandConfig{
	Name: ""add"",
	Args: []string{""num1"", ""num2""},
	Flags: []pluginloader.FlagConfig{{
		Name:         ""float"",
		Alias:        ""f"",
		DefaultValue: ""false"",
		Type:         ""bool"",
		Description:  ""Add floating numbers"",
	}},
	ShortDescription: ""add numbers"",
	Examples:         ""$ host plus 1 2"",
}, func(cmd1 *cobra.Command, args []string) {
	ExecuteAddition(cmd1, args)
})
```
- Add this command to host CLI

According to https://github.com/aerogear/charmil/pull/37#issuecomment-856591977",True,45,https://api.github.com/repos/aerogear/charmil/pulls/45,https://github.com/aerogear/charmil/pull/45,closed,174,88,12,2,3,12,1,1,[{'name': 'core-api'}],2021-06-09 10:55:59+00:00,2021-06-11 14:47:32+00:00,186693.0,"2 days, 3:51:33","[{'comment_id': 649828058, 'comment_body': ""Example Host. Makes no sense in terms of placement. If we want host let's put that in example folder.\r\n\r\nGo requires root to be package so root will be our SDK and example could be separate submodule that does have host and example plugin. \r\nMakes sense?\r\n\r\n@namit-chandwani maybe we can agree on structure and kinda push that to the main so you both base on the same structure and we do not have issues?"", 'comment_created': datetime.datetime(2021, 6, 11, 9, 21, 39, tzinfo=datetime.timezone.utc), 'commenter': 'wtrocki', 'type': 'User'}, {'comment_id': 649829571, 'comment_body': 'What approach you use for arguments. This seems very limiting', 'comment_created': datetime.datetime(2021, 6, 11, 9, 24, 1, tzinfo=datetime.timezone.utc), 'commenter': 'wtrocki', 'type': 'User'}, {'comment_id': 649838418, 'comment_body': '> @namit-chandwani maybe we can agree on structure and kinda push that to the main so you both base on the same structure and we do not have issues?\n\nYeah sure\n', 'comment_created': datetime.datetime(2021, 6, 11, 9, 37, 22, tzinfo=datetime.timezone.utc), 'commenter': 'namit-chandwani', 'type': 'User'}, {'comment_id': 649898393, 'comment_body': 'cobra accepts the arguments in array of strings `args []string`. So I kept it that way. May be we can add NumArgs option for the user.\r\nAny other thoughts?\r\n\r\nThere might me some commands which sometimes require 1 arg sometimes 2 args. Then specifying exact number of args will be wrong!  ', 'comment_created': datetime.datetime(2021, 6, 11, 11, 19, 8, tzinfo=datetime.timezone.utc), 'commenter': 'ankithans', 'type': 'User'}, {'comment_id': 649926413, 'comment_body': 'my take is that wrapper will not work ad it will require significant refactor to integrate existing commands. Some of those will not work with wrapper assumptions which means that we need to break API etc. instead of pushing towards something that is broken we can join forces and do proper cobra based plugin\r\n\r\nTLDR - lets drop wrapper', 'comment_created': datetime.datetime(2021, 6, 11, 12, 10, 21, tzinfo=datetime.timezone.utc), 'commenter': 'wtrocki', 'type': 'User'}, {'comment_id': 650037393, 'comment_body': '?', 'comment_created': datetime.datetime(2021, 6, 11, 14, 45, 34, tzinfo=datetime.timezone.utc), 'commenter': 'wtrocki', 'type': 'User'}, {'comment_id': 650037943, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2021, 6, 11, 14, 46, 16, tzinfo=datetime.timezone.utc), 'commenter': 'wtrocki', 'type': 'User'}, {'comment_id': 650038417, 'comment_body': 'Leftover from wrapper! I guess it is ok to leave it.', 'comment_created': datetime.datetime(2021, 6, 11, 14, 46, 56, tzinfo=datetime.timezone.utc), 'commenter': 'wtrocki', 'type': 'User'}, {'comment_id': 650038613, 'comment_body': 'Leftover from wrapper? Ok to leave it for now', 'comment_created': datetime.datetime(2021, 6, 11, 14, 47, 14, tzinfo=datetime.timezone.utc), 'commenter': 'wtrocki', 'type': 'User'}, {'comment_id': 650041548, 'comment_body': 'makes sure that binary file is not pushed', 'comment_created': datetime.datetime(2021, 6, 11, 14, 51, 6, tzinfo=datetime.timezone.utc), 'commenter': 'ankithans', 'type': 'User'}, {'comment_id': 650044919, 'comment_body': 'proper format will be `host`, but this surprisingly works fine :D', 'comment_created': datetime.datetime(2021, 6, 11, 14, 55, 34, tzinfo=datetime.timezone.utc), 'commenter': 'wtrocki', 'type': 'User'}, {'comment_id': 650047901, 'comment_body': 'host took the `host` folder as well ü•≤ so had to do this', 'comment_created': datetime.datetime(2021, 6, 11, 14, 59, 24, tzinfo=datetime.timezone.utc), 'commenter': 'ankithans', 'type': 'User'}]","[{'commit_sha': 'bcdefea092625bc8e49c13a0b7dc0dcc100a08d2', 'committer_username': 'ankithans', 'committer_name': 'Ankit Hans', 'committer_email': 'ankithans1947@gmail.com', 'commit_date': datetime.datetime(2019, 5, 16, 6, 27, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': '39ad3d9143b977cd4323e734394649fbf45792a4', 'committer_username': 'ankithans', 'committer_name': 'Ankit Hans', 'committer_email': 'ankithans1947@gmail.com', 'commit_date': datetime.datetime(2019, 5, 16, 6, 27, 13, tzinfo=datetime.timezone.utc)}]",Ankit Hans,50692897,ankithans1947@gmail.com,User,,68,,37,123
669587074,feat: logger for output & errors,"## Description
- implement top level factory for commands
- logger for printing output and error
   - not a complete logger though, just implemented two methods
   - lot of useful methods & options can be added in logger
- use factory with logger in plugins
- import plugins into Host

want to validate, if this is a fine approach?",True,48,https://api.github.com/repos/aerogear/charmil/pulls/48,https://github.com/aerogear/charmil/pull/48,closed,214,143,11,1,2,2,1,1,[{'name': 'enhancement'}],2021-06-14 13:53:27+00:00,2021-06-15 07:20:15+00:00,62808.0,17:26:48,"[{'comment_id': 651503065, 'comment_body': 'Docs please', 'comment_created': datetime.datetime(2021, 6, 15, 7, 0, 47, tzinfo=datetime.timezone.utc), 'commenter': 'wtrocki', 'type': 'User'}, {'comment_id': 651503301, 'comment_body': 'Docs', 'comment_created': datetime.datetime(2021, 6, 15, 7, 1, 11, tzinfo=datetime.timezone.utc), 'commenter': 'wtrocki', 'type': 'User'}]","[{'commit_sha': 'd91eab0653627e2916fb2593726d86eebb5b60c6', 'committer_username': 'ankithans', 'committer_name': 'Ankit Hans', 'committer_email': 'ankithans1947@gmail.com', 'commit_date': datetime.datetime(2019, 5, 16, 6, 27, 13, tzinfo=datetime.timezone.utc)}]",Ankit Hans,50692897,ankithans1947@gmail.com,User,,68,,37,123
672609684,Add i18n support & improve logging,"i18n support from factory, provides each plugin to implement localization
- Plugin once initializes the localization package providing the config details
- can localize text items by id defined in locals file
- improve logging methods
- provide API docs

closes #50 
closes #51 ",True,52,https://api.github.com/repos/aerogear/charmil/pulls/52,https://github.com/aerogear/charmil/pull/52,closed,353,189,19,7,11,8,1,1,[{'name': 'enhancement'}],2021-06-17 13:00:17+00:00,2021-06-22 10:10:28+00:00,421811.0,"4 days, 21:10:11","[{'comment_id': 653552380, 'comment_body': 'Panic is not going to provide good output. Never use panic.\r\nEspecially that logger is there ( However undocumented )', 'comment_created': datetime.datetime(2021, 6, 17, 13, 14, tzinfo=datetime.timezone.utc), 'commenter': 'wtrocki', 'type': 'User'}, {'comment_id': 653585609, 'comment_body': 'Okay üëç\nHave to add some more methods in logger. Will document it.', 'comment_created': datetime.datetime(2021, 6, 17, 13, 51, 32, tzinfo=datetime.timezone.utc), 'commenter': 'ankithans', 'type': 'User'}, {'comment_id': 654172238, 'comment_body': 'Example should be smaller. \r\n\r\nIf we basically copy paste other library example and implement it what is the value we provide?\r\n', 'comment_created': datetime.datetime(2021, 6, 18, 6, 25, 53, tzinfo=datetime.timezone.utc), 'commenter': 'wtrocki', 'type': 'User'}, {'comment_id': 654192014, 'comment_body': 'will not say it exact copy paste, but yeah it is. When you see a good approach in the front of you, it blocks the way for other things. But I will try to minimize these things in further contributions!', 'comment_created': datetime.datetime(2021, 6, 18, 7, 6, 39, tzinfo=datetime.timezone.utc), 'commenter': 'ankithans', 'type': 'User'}, {'comment_id': 656052504, 'comment_body': '```suggestion\r\n1. Create a cobra command for your plugin\r\n\r\n```\r\nwe do not like dirty cobras? racial discrimination', 'comment_created': datetime.datetime(2021, 6, 22, 9, 39, 55, tzinfo=datetime.timezone.utc), 'commenter': 'wtrocki', 'type': 'User'}, {'comment_id': 656052871, 'comment_body': '```suggestion\r\n2. Create a factory instance in your command, which requires the localizer to be passed\r\n\r\n```', 'comment_created': datetime.datetime(2021, 6, 22, 9, 40, 23, tzinfo=datetime.timezone.utc), 'commenter': 'wtrocki', 'type': 'User'}, {'comment_id': 656071198, 'comment_body': 'done', 'comment_created': datetime.datetime(2021, 6, 22, 10, 4, tzinfo=datetime.timezone.utc), 'commenter': 'ankithans', 'type': 'User'}, {'comment_id': 656071242, 'comment_body': 'done', 'comment_created': datetime.datetime(2021, 6, 22, 10, 4, 4, tzinfo=datetime.timezone.utc), 'commenter': 'ankithans', 'type': 'User'}]","[{'commit_sha': '3dffde8bbb3838ffee57defc4a3a0ab601eec0d1', 'committer_username': 'ankithans', 'committer_name': 'Ankit Hans', 'committer_email': 'ankithans1947@gmail.com', 'commit_date': datetime.datetime(2019, 5, 16, 6, 27, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0620bf0de5b48d860b4901621b3a2a41f29317a8', 'committer_username': 'ankithans', 'committer_name': 'Ankit Hans', 'committer_email': 'ankithans1947@gmail.com', 'commit_date': datetime.datetime(2019, 5, 16, 6, 27, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3fbdeb51a66beec44e9c4db1e75cb66b1fcc10f6', 'committer_username': 'ankithans', 'committer_name': 'Ankit Hans', 'committer_email': 'ankithans1947@gmail.com', 'commit_date': datetime.datetime(2019, 5, 16, 6, 27, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8cdcc72e92c9082ac2b09bca0f9226976bcd4e31', 'committer_username': 'ankithans', 'committer_name': 'Ankit Hans', 'committer_email': 'ankithans1947@gmail.com', 'commit_date': datetime.datetime(2019, 5, 16, 6, 27, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cff5ee08ba51af0233382ece163dc33edfa5096a', 'committer_username': 'ankithans', 'committer_name': 'Ankit Hans', 'committer_email': 'ankithans1947@gmail.com', 'commit_date': datetime.datetime(2019, 5, 16, 6, 27, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': '47649ced9a1bc4471e36a323c1925ad84ca81591', 'committer_username': 'ankithans', 'committer_name': 'Ankit Hans', 'committer_email': 'ankithans1947@gmail.com', 'commit_date': datetime.datetime(2019, 5, 16, 6, 27, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': '75f42125f1b8574cb1a0b622e9f5819737ee6c39', 'committer_username': 'ankithans', 'committer_name': 'Ankit Hans', 'committer_email': 'ankithans1947@gmail.com', 'commit_date': datetime.datetime(2019, 5, 16, 6, 27, 13, tzinfo=datetime.timezone.utc)}]",Ankit Hans,50692897,ankithans1947@gmail.com,User,,68,,37,123
676902706,feat: validator for cobra cmds,"## Methods
Validates the command and it's descendants
- `func Validate(cmd *cobra.Command) error` // handles default errors declared in validator package
- `func ValidateCustom(cmd *cobra.Command, handleErrors func() error) error` // on the top of default errors, user can define custom errors

## To decide
- what aspects we want to control
  - For now : Use, Short, Long, Example, Args
- How do we like this validator package to be served
  - from factory?
  - seperate from sdk?

@aerogear/charmil-core 
closes #58 ",True,82,https://api.github.com/repos/aerogear/charmil/pulls/82,https://github.com/aerogear/charmil/pull/82,closed,424,5,10,17,39,69,1,1,[{'name': 'enhancement'}],2021-06-24 08:30:48+00:00,2021-06-29 09:34:57+00:00,435849.0,"5 days, 1:04:09","[{'comment_id': 657803278, 'comment_body': 'Yes.. while this is ok. It makes no sense. \r\n\r\nValidation is development feature but we are using it at runtime. This needs to change.', 'comment_created': datetime.datetime(2021, 6, 24, 9, 54, 26, tzinfo=datetime.timezone.utc), 'commenter': 'wtrocki', 'type': 'User'}, {'comment_id': 657804808, 'comment_body': 'This is wrong. Every rule should be custom rule. Create interface for rule with single method that validates single command and then traverse thru nested structure.  This is easier than current architecture and will allow anyone to drop any rules - users will always need to define rules somehow or override them, but it should not require to actually write them - for example fieldExist or string length rule needs to have some arguments to be defined. \r\n\r\n\r\n\r\n', 'comment_created': datetime.datetime(2021, 6, 24, 9, 56, 29, tzinfo=datetime.timezone.utc), 'commenter': 'wtrocki', 'type': 'User'}, {'comment_id': 657806142, 'comment_body': 'Makes no sense in number of dimensions:\r\n\r\n\r\n- we are missing exact location that can be used to pinpoint file that causing issues\r\n- we are returning only single issue (rather than numerous issues during linting)\r\n- Hardcoded values.', 'comment_created': datetime.datetime(2021, 6, 24, 9, 58, 14, tzinfo=datetime.timezone.utc), 'commenter': 'wtrocki', 'type': 'User'}, {'comment_id': 658636244, 'comment_body': 'This part might bring some maintenance challenges and breaks DRY rule. \r\n', 'comment_created': datetime.datetime(2021, 6, 25, 9, 42, 57, tzinfo=datetime.timezone.utc), 'commenter': 'wtrocki', 'type': 'User'}, {'comment_id': 658639764, 'comment_body': 'We can use reflect package to get values by strings there is no need to repeat them', 'comment_created': datetime.datetime(2021, 6, 25, 9, 48, 50, tzinfo=datetime.timezone.utc), 'commenter': 'wtrocki', 'type': 'User'}, {'comment_id': 658643469, 'comment_body': 'While this is clever I think it restricts us how rules are build. \r\nMy take is that rule:\r\n\r\n- Has name\r\n- Has Function that does something - Doesn\'t have any fields \r\n- Has specific arguments that configure how rule works.\r\n\r\nIn this case name is defined as Struct but I think we also need name as constant.\r\n\r\nthis way we can build `LengthRule` with dictionary of key values, where key could be cobra structure key like `Use` and values might be functions, min, max etc.\r\n```\r\nLengthRule(Arguments{\r\n""Use"": Limit{3,10},\r\n""Short"": Limit{3,10},\r\n})\r\n```\r\n\r\n', 'comment_created': datetime.datetime(2021, 6, 25, 9, 54, 29, tzinfo=datetime.timezone.utc), 'commenter': 'wtrocki', 'type': 'User'}, {'comment_id': 658644621, 'comment_body': ""This approach as number of drawbacks:\r\n\r\n- it is fixed to the point where we need to redeclare every field \r\n- cannot be declarative\r\n- Doesn't provide us base for adding other rules (missing interface for rule)"", 'comment_created': datetime.datetime(2021, 6, 25, 9, 56, 16, tzinfo=datetime.timezone.utc), 'commenter': 'wtrocki', 'type': 'User'}, {'comment_id': 658670912, 'comment_body': 'edit : ignore this \r\n\r\n```go\r\ntype LengthRuleMap map[string]Limit // instead of struct\r\n```\r\n```go\t\r\n// user\r\nvar r1 validator.Rule = &validator.LengthRuleMap{\r\n\t""Use"":     validator.Limit{Min: 1, Max: 5},\r\n\t""Short"":   validator.Limit{Min: 4, Max: 5},\r\n\t""Long"":    validator.Limit{Min: 5, Max: 20},\r\n\t""Example"": validator.Limit{Min: 5, Max: 30},\r\n}\r\n```\r\nyes this helps in traversing and don\'t break DRY\r\nhere we will need to validate the `key` in dict, to map with cobra command struct\r\n\r\n', 'comment_created': datetime.datetime(2021, 6, 25, 10, 43, 1, tzinfo=datetime.timezone.utc), 'commenter': 'ankithans', 'type': 'User'}, {'comment_id': 658755046, 'comment_body': 'we are doing only one level of commands. we should check all commands including children of children', 'comment_created': datetime.datetime(2021, 6, 25, 13, 15, 40, tzinfo=datetime.timezone.utc), 'commenter': 'wtrocki', 'type': 'User'}, {'comment_id': 658755787, 'comment_body': 'no error handling/input validation', 'comment_created': datetime.datetime(2021, 6, 25, 13, 16, 50, tzinfo=datetime.timezone.utc), 'commenter': 'wtrocki', 'type': 'User'}, {'comment_id': 658756042, 'comment_body': 'typo atleast', 'comment_created': datetime.datetime(2021, 6, 25, 13, 17, 16, tzinfo=datetime.timezone.utc), 'commenter': 'wtrocki', 'type': 'User'}, {'comment_id': 658757039, 'comment_body': 'lack of good message patterns.\r\n\r\nLimit to what is not set? Where?\r\n\r\nWould use rule name for all rule specific errors.', 'comment_created': datetime.datetime(2021, 6, 25, 13, 18, 47, tzinfo=datetime.timezone.utc), 'commenter': 'wtrocki', 'type': 'User'}, {'comment_id': 658757679, 'comment_body': 'Lets add verbose mode that prints debug info for each rule cmd field', 'comment_created': datetime.datetime(2021, 6, 25, 13, 19, 48, tzinfo=datetime.timezone.utc), 'commenter': 'wtrocki', 'type': 'User'}, {'comment_id': 658759070, 'comment_body': 'for visiting graph/tree best to pass info object and aggregate stats on it.\r\nNumber of commands checked. Errors.\r\nCurrently errors are string - we need this as struct with much more info', 'comment_created': datetime.datetime(2021, 6, 25, 13, 21, 48, tzinfo=datetime.timezone.utc), 'commenter': 'wtrocki', 'type': 'User'}, {'comment_id': 658759506, 'comment_body': 'What this does? Not sure why we need it', 'comment_created': datetime.datetime(2021, 6, 25, 13, 22, 25, tzinfo=datetime.timezone.utc), 'commenter': 'wtrocki', 'type': 'User'}, {'comment_id': 658761631, 'comment_body': 'cobra.Command struct has different types of attributes. Hence to address all of them. I did this. \r\nLike something is string, bool, []string, slice, func \r\neg - Args is func, SilenceUsage is bool\r\n\r\nby writing this function we can handle `mustPresent` for all the types present in cobra.Command', 'comment_created': datetime.datetime(2021, 6, 25, 13, 25, 26, tzinfo=datetime.timezone.utc), 'commenter': 'ankithans', 'type': 'User'}, {'comment_id': 658763531, 'comment_body': 'ok', 'comment_created': datetime.datetime(2021, 6, 25, 13, 28, 12, tzinfo=datetime.timezone.utc), 'commenter': 'wtrocki', 'type': 'User'}, {'comment_id': 659132950, 'comment_body': 'Why we run validator as part of the command?', 'comment_created': datetime.datetime(2021, 6, 26, 7, 20, 54, tzinfo=datetime.timezone.utc), 'commenter': 'wtrocki', 'type': 'User'}, {'comment_id': 659133129, 'comment_body': '[Style][ Errors can be local to the rules, for maintenance and redability.\r\nThis is only my own opinion', 'comment_created': datetime.datetime(2021, 6, 26, 7, 22, 46, tzinfo=datetime.timezone.utc), 'commenter': 'wtrocki', 'type': 'User'}, {'comment_id': 659133170, 'comment_body': ""I did this just to test it's working"", 'comment_created': datetime.datetime(2021, 6, 26, 7, 23, 17, tzinfo=datetime.timezone.utc), 'commenter': 'ankithans', 'type': 'User'}, {'comment_id': 659133203, 'comment_body': 'We should use interface for validator', 'comment_created': datetime.datetime(2021, 6, 26, 7, 23, 29, tzinfo=datetime.timezone.utc), 'commenter': 'wtrocki', 'type': 'User'}, {'comment_id': 659133269, 'comment_body': 'Verbose should be an config structure instead or prefferably part of the struct', 'comment_created': datetime.datetime(2021, 6, 26, 7, 24, 27, tzinfo=datetime.timezone.utc), 'commenter': 'wtrocki', 'type': 'User'}, {'comment_id': 659133430, 'comment_body': ""So let's not define them and do hardcode? as they will be limited"", 'comment_created': datetime.datetime(2021, 6, 26, 7, 26, 27, tzinfo=datetime.timezone.utc), 'commenter': 'ankithans', 'type': 'User'}, {'comment_id': 659133473, 'comment_body': 'totalTested?', 'comment_created': datetime.datetime(2021, 6, 26, 7, 27, 8, tzinfo=datetime.timezone.utc), 'commenter': 'wtrocki', 'type': 'User'}, {'comment_id': 659133481, 'comment_body': 'totalErrors', 'comment_created': datetime.datetime(2021, 6, 26, 7, 27, 20, tzinfo=datetime.timezone.utc), 'commenter': 'wtrocki', 'type': 'User'}, {'comment_id': 659133669, 'comment_body': 'We need errors to be separate structure - struct with cobra command and rule name that caused it..', 'comment_created': datetime.datetime(2021, 6, 26, 7, 29, 1, tzinfo=datetime.timezone.utc), 'commenter': 'wtrocki', 'type': 'User'}, {'comment_id': 659133766, 'comment_body': 'yes i did it\r\ncobra command can be added\r\n```go\r\ntype Error struct {\r\n\tName string\r\n\tErr  error\r\n\tRule string\r\n}\r\n```', 'comment_created': datetime.datetime(2021, 6, 26, 7, 30, 2, tzinfo=datetime.timezone.utc), 'commenter': 'ankithans', 'type': 'User'}, {'comment_id': 659133780, 'comment_body': 'Add issue to provide config with array of commands to skip/ignore', 'comment_created': datetime.datetime(2021, 6, 26, 7, 30, 24, tzinfo=datetime.timezone.utc), 'commenter': 'wtrocki', 'type': 'User'}, {'comment_id': 659134001, 'comment_body': 'I think that reflect has method for checking this before we call String', 'comment_created': datetime.datetime(2021, 6, 26, 7, 32, 15, tzinfo=datetime.timezone.utc), 'commenter': 'wtrocki', 'type': 'User'}, {'comment_id': 659134180, 'comment_body': '1) I do not think we should print to standard out - stdnerr should be used for debug to get meaningful info (likrnjson) into std out.\r\n\r\n1) I think we should use logger :)', 'comment_created': datetime.datetime(2021, 6, 26, 7, 34, 21, tzinfo=datetime.timezone.utc), 'commenter': 'wtrocki', 'type': 'User'}, {'comment_id': 659134388, 'comment_body': 'This should he separate structure - not error', 'comment_created': datetime.datetime(2021, 6, 26, 7, 36, 28, tzinfo=datetime.timezone.utc), 'commenter': 'wtrocki', 'type': 'User'}, {'comment_id': 659134557, 'comment_body': 'I will change package to rules', 'comment_created': datetime.datetime(2021, 6, 26, 7, 38, 39, tzinfo=datetime.timezone.utc), 'commenter': 'wtrocki', 'type': 'User'}, {'comment_id': 659134617, 'comment_body': ""answered above ignore this now\r\n\r\ncouldn't get you here?\r\nError is the separate struct which is defined as\r\n```go\r\ntype Error struct {\r\n\tName string\r\n\tErr  error\r\n\tRule string\r\n}\r\n```"", 'comment_created': datetime.datetime(2021, 6, 26, 7, 39, 40, tzinfo=datetime.timezone.utc), 'commenter': 'ankithans', 'type': 'User'}, {'comment_id': 659134830, 'comment_body': 'This will become map [string]Options once we get error levels etc.\r\n', 'comment_created': datetime.datetime(2021, 6, 26, 7, 41, 38, tzinfo=datetime.timezone.utc), 'commenter': 'wtrocki', 'type': 'User'}, {'comment_id': 659134913, 'comment_body': 'I have seen this before?', 'comment_created': datetime.datetime(2021, 6, 26, 7, 42, 16, tzinfo=datetime.timezone.utc), 'commenter': 'wtrocki', 'type': 'User'}, {'comment_id': 659134983, 'comment_body': 'Capital letter and less generic name needed', 'comment_created': datetime.datetime(2021, 6, 26, 7, 43, 17, tzinfo=datetime.timezone.utc), 'commenter': 'wtrocki', 'type': 'User'}, {'comment_id': 659135049, 'comment_body': 'my preference would be that those will be part of the rule structure', 'comment_created': datetime.datetime(2021, 6, 26, 7, 43, 46, tzinfo=datetime.timezone.utc), 'commenter': 'wtrocki', 'type': 'User'}, {'comment_id': 659135189, 'comment_body': 'Add name', 'comment_created': datetime.datetime(2021, 6, 26, 7, 45, 41, tzinfo=datetime.timezone.utc), 'commenter': 'wtrocki', 'type': 'User'}, {'comment_id': 659135252, 'comment_body': 'like different func name for each rule?', 'comment_created': datetime.datetime(2021, 6, 26, 7, 46, 32, tzinfo=datetime.timezone.utc), 'commenter': 'ankithans', 'type': 'User'}, {'comment_id': 659135385, 'comment_body': 'yes traversing through commands is same in all the rules\r\nwe should reuse', 'comment_created': datetime.datetime(2021, 6, 26, 7, 47, 45, tzinfo=datetime.timezone.utc), 'commenter': 'ankithans', 'type': 'User'}, {'comment_id': 659137080, 'comment_body': 'Too generic name. Lets change it', 'comment_created': datetime.datetime(2021, 6, 26, 8, 4, 53, tzinfo=datetime.timezone.utc), 'commenter': 'wtrocki', 'type': 'User'}, {'comment_id': 659137197, 'comment_body': 'define them but local to rule\r\n\r\nFolder structure:\r\n```\r\nrules\r\n   exist\r\n        rule.go\r\n        errros.go\r\n        utils etc \r\n```', 'comment_created': datetime.datetime(2021, 6, 26, 8, 6, 13, tzinfo=datetime.timezone.utc), 'commenter': 'wtrocki', 'type': 'User'}, {'comment_id': 659137640, 'comment_body': 'yes..\r\n\r\nwe can traverse outside and call rule for each command or have common traversing logic', 'comment_created': datetime.datetime(2021, 6, 26, 8, 9, 45, tzinfo=datetime.timezone.utc), 'commenter': 'wtrocki', 'type': 'User'}, {'comment_id': 659167367, 'comment_body': ""Yes.. We need way to join text representation of rule with it's implementation. If that is not part of interface then there is no easy way to provide rule name as rules will be hardcoded inside lib."", 'comment_created': datetime.datetime(2021, 6, 26, 13, 21, 4, tzinfo=datetime.timezone.utc), 'commenter': 'wtrocki', 'type': 'User'}, {'comment_id': 659260266, 'comment_body': 'I think we can do this minimal structure. As utils(including err) have same struct for all the rules. WDYT?\r\n```\r\nvalidator\r\n     validator.go\r\n     rules\r\n          length.go\r\n          exist.go\r\n          utils.go\r\n```', 'comment_created': datetime.datetime(2021, 6, 27, 4, 30, 21, tzinfo=datetime.timezone.utc), 'commenter': 'ankithans', 'type': 'User'}, {'comment_id': 659260628, 'comment_body': ""And also some defined errors will be used by all rules, like ErrFieldNotExist, ErrUnsupported, ErrAbsent etc. So ig it's better to have errors defined commonly? "", 'comment_created': datetime.datetime(2021, 6, 27, 4, 34, 56, tzinfo=datetime.timezone.utc), 'commenter': 'ankithans', 'type': 'User'}, {'comment_id': 659266955, 'comment_body': 'that was giving panic: reflect: call of reflect.Value.Type on zero Value', 'comment_created': datetime.datetime(2021, 6, 27, 5, 49, 37, tzinfo=datetime.timezone.utc), 'commenter': 'ankithans', 'type': 'User'}, {'comment_id': 659313492, 'comment_body': 'Why commented out code.', 'comment_created': datetime.datetime(2021, 6, 27, 12, 22, 56, tzinfo=datetime.timezone.utc), 'commenter': 'wtrocki', 'type': 'User'}, {'comment_id': 659313572, 'comment_body': 'Why we have validator used in CLI? ', 'comment_created': datetime.datetime(2021, 6, 27, 12, 23, 40, tzinfo=datetime.timezone.utc), 'commenter': 'wtrocki', 'type': 'User'}, {'comment_id': 659313652, 'comment_body': 'Wrong package. This is not part of the rules api', 'comment_created': datetime.datetime(2021, 6, 27, 12, 24, 20, tzinfo=datetime.timezone.utc), 'commenter': 'wtrocki', 'type': 'User'}, {'comment_id': 659313721, 'comment_body': 'Should be part of the core instead of rules', 'comment_created': datetime.datetime(2021, 6, 27, 12, 24, 51, tzinfo=datetime.timezone.utc), 'commenter': 'wtrocki', 'type': 'User'}, {'comment_id': 659313764, 'comment_body': 'I had comment here that we should have those defined per rule', 'comment_created': datetime.datetime(2021, 6, 27, 12, 25, 12, tzinfo=datetime.timezone.utc), 'commenter': 'wtrocki', 'type': 'User'}, {'comment_id': 659313797, 'comment_body': 'utils is not good name for this file.', 'comment_created': datetime.datetime(2021, 6, 27, 12, 25, 27, tzinfo=datetime.timezone.utc), 'commenter': 'wtrocki', 'type': 'User'}, {'comment_id': 659317166, 'comment_body': ""I think we don't need this file, we can move it + traverse.go to validator.go"", 'comment_created': datetime.datetime(2021, 6, 27, 12, 51, 20, tzinfo=datetime.timezone.utc), 'commenter': 'ankithans', 'type': 'User'}, {'comment_id': 659325421, 'comment_body': 'exactly!', 'comment_created': datetime.datetime(2021, 6, 27, 13, 53, 16, tzinfo=datetime.timezone.utc), 'commenter': 'wtrocki', 'type': 'User'}, {'comment_id': 659325912, 'comment_body': 'Those values are not good default values', 'comment_created': datetime.datetime(2021, 6, 27, 13, 56, 36, tzinfo=datetime.timezone.utc), 'commenter': 'wtrocki', 'type': 'User'}, {'comment_id': 659326185, 'comment_body': 'Could you do some default validator that does initialize those values and allow users to override something if needed.', 'comment_created': datetime.datetime(2021, 6, 27, 13, 58, 44, tzinfo=datetime.timezone.utc), 'commenter': 'wtrocki', 'type': 'User'}, {'comment_id': 659326250, 'comment_body': 'As per our agreement for development this should be the first commit to this PR not the last\r\n', 'comment_created': datetime.datetime(2021, 6, 27, 13, 59, 24, tzinfo=datetime.timezone.utc), 'commenter': 'wtrocki', 'type': 'User'}, {'comment_id': 659327100, 'comment_body': 'Each rule needs to be called explicitly?\r\n\r\nMy take is that end user api should finish in 2 lines no matter how many rules we have\r\n```\r\nvalidator := Validator{DefaultRuleConfig}\r\nvalidator.validate(root)\r\n```\r\n\r\nAlternatively users should be able to override rule comfig.', 'comment_created': datetime.datetime(2021, 6, 27, 14, 5, 16, tzinfo=datetime.timezone.utc), 'commenter': 'wtrocki', 'type': 'User'}, {'comment_id': 659533313, 'comment_body': '#### Now\r\n```go\r\nvar lenValidator rules.Length // user can give their config here or use default like this\r\nlenValidator.ValidateLength(cmd, true)\r\n```\r\nIs the above fine?\r\n> Each rule needs to be called explicitly?\r\n\r\nAs rule is a separate package now, we might be able to figure out something when we do ruleExecutor', 'comment_created': datetime.datetime(2021, 6, 28, 7, 12, 9, tzinfo=datetime.timezone.utc), 'commenter': 'ankithans', 'type': 'User'}, {'comment_id': 660371941, 'comment_body': 'do not put max by default', 'comment_created': datetime.datetime(2021, 6, 29, 7, 56, 35, tzinfo=datetime.timezone.utc), 'commenter': 'wtrocki', 'type': 'User'}, {'comment_id': 660375352, 'comment_body': 'default max = `math.MaxInt32`\r\nthis would be fine?', 'comment_created': datetime.datetime(2021, 6, 29, 8, 1, tzinfo=datetime.timezone.utc), 'commenter': 'ankithans', 'type': 'User'}, {'comment_id': 660406357, 'comment_body': 'No.. No max present', 'comment_created': datetime.datetime(2021, 6, 29, 8, 41, 44, tzinfo=datetime.timezone.utc), 'commenter': 'wtrocki', 'type': 'User'}, {'comment_id': 660418256, 'comment_body': '```suggestion\r\nvar vali := rules.RuleConfig{\r\n```', 'comment_created': datetime.datetime(2021, 6, 29, 8, 56, 32, tzinfo=datetime.timezone.utc), 'commenter': 'wtrocki', 'type': 'User'}, {'comment_id': 660418740, 'comment_body': 'Remove this! No commented code on master', 'comment_created': datetime.datetime(2021, 6, 29, 8, 57, 11, tzinfo=datetime.timezone.utc), 'commenter': 'wtrocki', 'type': 'User'}, {'comment_id': 660420562, 'comment_body': 'This is not test :) \r\nTest does asertions :)\r\nWe should at least check if no errors are returned.\r\nWe can also print out some info etc.\r\n\r\nTHis test should be passing as we going to use it for CI/CD #93 ', 'comment_created': datetime.datetime(2021, 6, 29, 8, 59, 24, tzinfo=datetime.timezone.utc), 'commenter': 'wtrocki', 'type': 'User'}, {'comment_id': 660421532, 'comment_body': 'What is this chunk of code doing? Some leftover/unfinished idea?', 'comment_created': datetime.datetime(2021, 6, 29, 9, 0, 35, tzinfo=datetime.timezone.utc), 'commenter': 'wtrocki', 'type': 'User'}]","[{'commit_sha': '41f4696676eec2ead641a5a4db8b499c25c83bdc', 'committer_username': 'ankithans', 'committer_name': 'Ankit Hans', 'committer_email': 'ankithans1947@gmail.com', 'commit_date': datetime.datetime(2019, 5, 16, 6, 27, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c1e8150d63b22fb18a5eb7bcaa452632efe69584', 'committer_username': 'ankithans', 'committer_name': 'Ankit Hans', 'committer_email': 'ankithans1947@gmail.com', 'commit_date': datetime.datetime(2019, 5, 16, 6, 27, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': '949eb7e64cdc83078c8a1810777c3dba9166c60a', 'committer_username': 'ankithans', 'committer_name': 'Ankit Hans', 'committer_email': 'ankithans1947@gmail.com', 'commit_date': datetime.datetime(2019, 5, 16, 6, 27, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': '04c97b151588628f9d04471eef5841c495a0040f', 'committer_username': 'ankithans', 'committer_name': 'Ankit Hans', 'committer_email': 'ankithans1947@gmail.com', 'commit_date': datetime.datetime(2019, 5, 16, 6, 27, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cee85e849ac403982671327aa28405ed018efd6a', 'committer_username': 'ankithans', 'committer_name': 'Ankit Hans', 'committer_email': 'ankithans1947@gmail.com', 'commit_date': datetime.datetime(2019, 5, 16, 6, 27, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd76e98b9fbd63b51152b2c252d8957a7931ea53b', 'committer_username': 'ankithans', 'committer_name': 'Ankit Hans', 'committer_email': 'ankithans1947@gmail.com', 'commit_date': datetime.datetime(2019, 5, 16, 6, 27, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bdff9239cfaa2544ed243472d52bff02be73abd0', 'committer_username': 'ankithans', 'committer_name': 'Ankit Hans', 'committer_email': 'ankithans1947@gmail.com', 'commit_date': datetime.datetime(2019, 5, 16, 6, 27, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f11645b5c86d69c61f522e691df2027a87a28911', 'committer_username': 'ankithans', 'committer_name': 'Ankit Hans', 'committer_email': 'ankithans1947@gmail.com', 'commit_date': datetime.datetime(2019, 5, 16, 6, 27, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1a3be98e47ef25a9e7b2e316670060cb270004ab', 'committer_username': 'ankithans', 'committer_name': 'Ankit Hans', 'committer_email': 'ankithans1947@gmail.com', 'commit_date': datetime.datetime(2019, 5, 16, 6, 27, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': '078661f2e522235f8dab0d1710a9b3d54b9a0b84', 'committer_username': 'ankithans', 'committer_name': 'Ankit Hans', 'committer_email': 'ankithans1947@gmail.com', 'commit_date': datetime.datetime(2019, 5, 16, 6, 27, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': '20cf9dca9da32f6d65c450fd7213e0e2bfce1dc3', 'committer_username': 'ankithans', 'committer_name': 'Ankit Hans', 'committer_email': 'ankithans1947@gmail.com', 'commit_date': datetime.datetime(2019, 5, 16, 6, 27, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f751681ba01148cd1d5661d553a301048720ea33', 'committer_username': 'ankithans', 'committer_name': 'Ankit Hans', 'committer_email': 'ankithans1947@gmail.com', 'commit_date': datetime.datetime(2019, 5, 16, 6, 27, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aae5c35812a521f0d528fa7315ef404242fd4079', 'committer_username': 'ankithans', 'committer_name': 'Ankit Hans', 'committer_email': 'ankithans1947@gmail.com', 'commit_date': datetime.datetime(2019, 5, 16, 6, 27, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a78b2f469111eb88aa72383def1faef8e0369513', 'committer_username': 'ankithans', 'committer_name': 'Ankit Hans', 'committer_email': 'ankithans1947@gmail.com', 'commit_date': datetime.datetime(2019, 5, 16, 6, 27, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4990b4491aa7faf7faaa1d631af2d3c65d2400b8', 'committer_username': 'ankithans', 'committer_name': 'Ankit Hans', 'committer_email': 'ankithans1947@gmail.com', 'commit_date': datetime.datetime(2019, 5, 16, 6, 27, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4f8a4c8b8d1c35b35c3f9bccba57f85cbbe57ee6', 'committer_username': 'ankithans', 'committer_name': 'Ankit Hans', 'committer_email': 'ankithans1947@gmail.com', 'commit_date': datetime.datetime(2019, 5, 16, 6, 27, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': '08d3ccc703b01f444379d4d120ed97b28c6a13b7', 'committer_username': 'ankithans', 'committer_name': 'Ankit Hans', 'committer_email': 'ankithans1947@gmail.com', 'commit_date': datetime.datetime(2019, 5, 16, 6, 27, 13, tzinfo=datetime.timezone.utc)}]",Ankit Hans,50692897,ankithans1947@gmail.com,User,,68,,37,123
677006738,Add CI/CD & issue pr templates,"closes #53 
I thought, it would be beneficial to have from start.

@aerogear/charmil-core ",True,83,https://api.github.com/repos/aerogear/charmil/pulls/83,https://github.com/aerogear/charmil/pull/83,closed,468,351,13,1,1,0,1,1,[{'name': 'enhancement'}],2021-06-24 10:56:06+00:00,2021-06-24 12:17:03+00:00,4857.0,1:20:57,[],"[{'commit_sha': 'b74f2a0fe177b0bde284652c1858262ae9a76ae2', 'committer_username': 'ankithans', 'committer_name': 'Ankit Hans', 'committer_email': 'ankithans1947@gmail.com', 'commit_date': datetime.datetime(2019, 5, 16, 6, 27, 13, tzinfo=datetime.timezone.utc)}]",Ankit Hans,50692897,ankithans1947@gmail.com,User,,68,,37,123
680206770,fix: traverse all the child cmds + duplicates,"Closes #95  <!-- If there is no issue to link, you can remove this -->

### Description
Fixes duplicate errors and traverse all the subcommands

### Type of change

- [x] Bug fix (non-breaking change which fixes an issue)

### Checklist

- [x] Duplication of validation errors
- [x] Traverse all the subcommands

## Screenshots (if appropriate):",True,97,https://api.github.com/repos/aerogear/charmil/pulls/97,https://github.com/aerogear/charmil/pull/97,closed,88,68,5,4,3,7,1,1,[{'name': 'bug'}],2021-06-29 17:00:40+00:00,2021-06-30 10:16:52+00:00,62172.0,17:16:12,"[{'comment_id': 660856542, 'comment_body': 'we should create method that does validate and add errorz for generic rule', 'comment_created': datetime.datetime(2021, 6, 29, 18, 15, 36, tzinfo=datetime.timezone.utc), 'commenter': 'wtrocki', 'type': 'User'}, {'comment_id': 660857361, 'comment_body': ' Add verbose logger here', 'comment_created': datetime.datetime(2021, 6, 29, 18, 16, 52, tzinfo=datetime.timezone.utc), 'commenter': 'wtrocki', 'type': 'User'}, {'comment_id': 660857966, 'comment_body': 'This is not verbose. It should be printed normally but to stderr', 'comment_created': datetime.datetime(2021, 6, 29, 18, 17, 28, tzinfo=datetime.timezone.utc), 'commenter': 'wtrocki', 'type': 'User'}, {'comment_id': 661247531, 'comment_body': 'Do you mind to use for loops for creating commands.\r\nIt will look better without DRY', 'comment_created': datetime.datetime(2021, 6, 30, 8, 32, 41, tzinfo=datetime.timezone.utc), 'commenter': 'wtrocki', 'type': 'User'}, {'comment_id': 661248376, 'comment_body': 'Lets remove verbose check and use sdterr (', 'comment_created': datetime.datetime(2021, 6, 30, 8, 33, 56, tzinfo=datetime.timezone.utc), 'commenter': 'wtrocki', 'type': 'User'}, {'comment_id': 661249171, 'comment_body': 'Lets use for loop for processing rules rather than calling each rule', 'comment_created': datetime.datetime(2021, 6, 30, 8, 34, 57, tzinfo=datetime.timezone.utc), 'commenter': 'wtrocki', 'type': 'User'}, {'comment_id': 661293723, 'comment_body': '@wtrocki I have addressed above 2 comments. As all rules gives different function to execute, how can I use them in loop?\r\nlike length - validateLength\r\nMustExist - validateMustExist\r\n\r\nAnd rule config also looks like this\r\n```go\r\ntype RuleConfig struct {\r\n\tVerbose bool\r\n\tLength\r\n\tMustExist\r\n}\r\n```\r\nCan you suggest some way?', 'comment_created': datetime.datetime(2021, 6, 30, 9, 34, 2, tzinfo=datetime.timezone.utc), 'commenter': 'ankithans', 'type': 'User'}]","[{'commit_sha': 'a6bd50549e076b8e373400b9b41f72b5f5796808', 'committer_username': 'ankithans', 'committer_name': 'Ankit Hans', 'committer_email': 'ankithans1947@gmail.com', 'commit_date': datetime.datetime(2019, 5, 16, 6, 27, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a469c92f019af2a411714f010df4d0ad9bae9c66', 'committer_username': 'ankithans', 'committer_name': 'Ankit Hans', 'committer_email': 'ankithans1947@gmail.com', 'commit_date': datetime.datetime(2019, 5, 16, 6, 27, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5bce1f3a427a8f7a77dfde63db07dde0da78aace', 'committer_username': 'ankithans', 'committer_name': 'Ankit Hans', 'committer_email': 'ankithans1947@gmail.com', 'commit_date': datetime.datetime(2019, 5, 16, 6, 27, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cc22a6eabae6075912f991cc95c48ef839c73d67', 'committer_username': 'ankithans', 'committer_name': 'Ankit Hans', 'committer_email': 'ankithans1947@gmail.com', 'commit_date': datetime.datetime(2019, 5, 16, 6, 27, 13, tzinfo=datetime.timezone.utc)}]",Ankit Hans,50692897,ankithans1947@gmail.com,User,,68,,37,123
681070758,chore: change folder pkg to core,"Closes #92 
Closes #94 

### Description
- change folder from pkg to core
- write test for validator
- pass test on validator

### Type of change

- [x] Bug fix (non-breaking change which fixes an issue)
- [ ] New feature (non-breaking change which adds functionality)
- [ ] Breaking change (fix or feature that would cause existing functionality to not work as expected)
- [x] Documentation change
- [ ] Other (please specify)

### Checklist

- [x] Documentation added for the feature
- [ ] CI and all relevant tests are passing
- [ ] Code Review completed
- [ ] Verified independently by reviewer

",True,101,https://api.github.com/repos/aerogear/charmil/pulls/101,https://github.com/aerogear/charmil/pull/101,closed,37,20,11,2,0,0,0,1,[],2021-06-30 17:34:19+00:00,2021-06-30 17:37:33+00:00,194.0,0:03:14,[],"[{'commit_sha': '08b5e6533d565cac11e08d46920cb99b8a61efd8', 'committer_username': 'ankithans', 'committer_name': 'Ankit Hans', 'committer_email': 'ankithans1947@gmail.com', 'commit_date': datetime.datetime(2019, 5, 16, 6, 27, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4745060bb866d6ccec4da05529ded47237f583ea', 'committer_username': 'ankithans', 'committer_name': 'Ankit Hans', 'committer_email': 'ankithans1947@gmail.com', 'commit_date': datetime.datetime(2019, 5, 16, 6, 27, 13, tzinfo=datetime.timezone.utc)}]",Ankit Hans,50692897,ankithans1947@gmail.com,User,,68,,37,123
680758219,chore: add cobra commands validator,"### Description
Add [charmil validator](https://github.com/aerogear/charmil/blob/main/docs/src/validator/validator.md) in root_test.go, for testing of cobra commands. The validator has some default rules defined, that can be overridden. 
Currently Validator supports 2 rules:
- Length Rule(ensures that cobra.Command attribute(like Use, Short) have defined length of characters) 
- Must Exist(ensures the field is present)

### logs
```bash
$ go test ./pkg/cmd/root/
commands checked: 35
checks failed: 47
--- FAIL: Test_ExecuteCommand (0.01s)
    root_test.go:40: LENGTH_RULE: cmd rhoas: Short length should be at least 15
    root_test.go:40: LENGTH_RULE: cmd rhoas: Long length should be at least 100
    root_test.go:40: LENGTH_RULE: cmd rhoas cluster connect: Example length should be at least 100
    root_test.go:40: LENGTH_RULE: cmd rhoas cluster status: Example length should be at least 100
    root_test.go:40: LENGTH_RULE: cmd rhoas completion bash: Example length should be at least 100
    root_test.go:40: MUST_EXIST_RULE: cmd rhoas completion bash: Example must be present
    root_test.go:40: LENGTH_RULE: cmd rhoas completion fish: Example length should be at least 100
    root_test.go:40: MUST_EXIST_RULE: cmd rhoas completion fish: Example must be present
    root_test.go:40: LENGTH_RULE: cmd rhoas completion zsh: Example length should be at least 100
    root_test.go:40: MUST_EXIST_RULE: cmd rhoas completion zsh: Example must be present
    root_test.go:40: LENGTH_RULE: cmd rhoas kafka consumergroup delete: Long length should be at least 100
    root_test.go:40: LENGTH_RULE: cmd rhoas kafka consumergroup delete: Example length should be at least 100
    root_test.go:40: LENGTH_RULE: cmd rhoas kafka consumergroup describe: Long length should be at least 100
    root_test.go:40: LENGTH_RULE: cmd rhoas kafka consumergroup describe: Example length should be at least 100
    root_test.go:40: LENGTH_RULE: cmd rhoas kafka consumergroup list: Long length should be at least 100
    root_test.go:40: LENGTH_RULE: cmd rhoas kafka topic create: Short length should be at least 15
    root_test.go:40: LENGTH_RULE: cmd rhoas kafka topic create: Example length should be at least 100
    root_test.go:40: LENGTH_RULE: cmd rhoas kafka topic delete: Example length should be at least 100
    root_test.go:40: LENGTH_RULE: cmd rhoas kafka topic delete: Short length should be at least 15
    root_test.go:40: LENGTH_RULE: cmd rhoas kafka topic delete: Long length should be at least 100
    root_test.go:40: LENGTH_RULE: cmd rhoas kafka topic describe: Long length should be at least 100
    root_test.go:40: LENGTH_RULE: cmd rhoas kafka topic describe: Example length should be at least 100
    root_test.go:40: LENGTH_RULE: cmd rhoas kafka topic list: Long length should be at least 100
    root_test.go:40: LENGTH_RULE: cmd rhoas kafka topic update: Long length should be at least 100
    root_test.go:40: LENGTH_RULE: cmd rhoas kafka consumergroup: Long length should be at least 100
    root_test.go:40: LENGTH_RULE: cmd rhoas kafka consumergroup: Example length should be at least 100
    root_test.go:40: MUST_EXIST_RULE: cmd rhoas kafka consumergroup: Example must be present
    root_test.go:40: LENGTH_RULE: cmd rhoas kafka list: Example length should be at least 100
    root_test.go:40: MUST_EXIST_RULE: cmd rhoas kafka list: Example must be present
    root_test.go:40: LENGTH_RULE: cmd rhoas kafka topic: Long length should be at least 100
    root_test.go:40: LENGTH_RULE: cmd rhoas kafka topic: Example length should be at least 100
    root_test.go:40: MUST_EXIST_RULE: cmd rhoas kafka topic: Example must be present
    root_test.go:40: LENGTH_RULE: cmd rhoas serviceaccount delete: Example length should be at least 100
    root_test.go:40: LENGTH_RULE: cmd rhoas cluster: Long length should be at least 100
    root_test.go:40: MUST_EXIST_RULE: cmd rhoas cluster: Long must be present
    root_test.go:40: LENGTH_RULE: cmd rhoas completion: Example length should be at least 100
    root_test.go:40: MUST_EXIST_RULE: cmd rhoas completion: Example must be present
    root_test.go:40: LENGTH_RULE: cmd rhoas kafka: Long length should be at least 100
    root_test.go:40: LENGTH_RULE: cmd rhoas kafka: Example length should be at least 100
    root_test.go:40: MUST_EXIST_RULE: cmd rhoas kafka: Long must be present
    root_test.go:40: MUST_EXIST_RULE: cmd rhoas kafka: Example must be present
    root_test.go:40: LENGTH_RULE: cmd rhoas logout: Long length should be at least 100
    root_test.go:40: LENGTH_RULE: cmd rhoas logout: Example length should be at least 100
    root_test.go:40: MUST_EXIST_RULE: cmd rhoas logout: Example must be present
    root_test.go:40: LENGTH_RULE: cmd rhoas serviceaccount: Example length should be at least 100
    root_test.go:40: MUST_EXIST_RULE: cmd rhoas serviceaccount: Example must be present
    root_test.go:40: LENGTH_RULE: cmd rhoas whoami: Example length should be at least 100
FAIL
FAIL    github.com/redhat-developer/app-services-cli/pkg/cmd/root       0.023s
FAIL
```

### Verification Steps
<!-- Add verification steps here if applicable. Remove this section if it does not apply -->
1. Run `go get github.com/aerogear/charmil`
2. Run `go test ./pkg/cmd/root`

### Type of change

- [ ] Bug fix (non-breaking change which fixes an issue)
- [x] New feature (non-breaking change which adds functionality)
- [ ] Breaking change (fix or feature that would cause existing functionality to not work as expected)
- [ ] Documentation change
- [ ] Other (please specify)

### Checklist

- [ ] Documentation added for the feature
- [ ] CI and all relevant tests are passing
- [ ] Code Review completed
- [ ] Verified independently by reviewer",True,767,https://api.github.com/repos/redhat-developer/app-services-cli/pulls/767,https://github.com/redhat-developer/app-services-cli/pull/767,closed,53,0,3,2,7,11,0,0,[],2021-06-30 11:02:07+00:00,2021-07-01 13:00:42+00:00,93515.0,"1 day, 1:58:35","[{'comment_id': 661359663, 'comment_body': 'For merge we will need official tag/release', 'comment_created': datetime.datetime(2021, 6, 30, 11, 10, 38, tzinfo=datetime.timezone.utc), 'commenter': 'wtrocki', 'type': 'User'}, {'comment_id': 661360595, 'comment_body': 'This is not great for visibility. \r\n\r\nWe can call it:\r\n\r\n- charmil/rules\r\n- cobralint\r\n\r\netc.\r\n\r\nWe can also keep that in the root but then rename `Test_ExecuteCommand` to be more descriptive', 'comment_created': datetime.datetime(2021, 6, 30, 11, 11, 41, tzinfo=datetime.timezone.utc), 'commenter': 'wtrocki', 'type': 'User'}, {'comment_id': 661362629, 'comment_body': 'We should fail test if error happends.', 'comment_created': datetime.datetime(2021, 6, 30, 11, 14, 56, tzinfo=datetime.timezone.utc), 'commenter': 'wtrocki', 'type': 'User'}, {'comment_id': 661363529, 'comment_body': 'Actually I have idea. How about we do keep test passing but have commented out assertions and follow up issue.\r\nThat will be better than changing rules. If we can make rules more adjusted to existing commands in rhoas + keep asertions to detect new commands but ignore errors that we currently have tat will be great deal.', 'comment_created': datetime.datetime(2021, 6, 30, 11, 16, 18, tzinfo=datetime.timezone.utc), 'commenter': 'wtrocki', 'type': 'User'}, {'comment_id': 661666603, 'comment_body': 'Lets do release :)', 'comment_created': datetime.datetime(2021, 6, 30, 17, 12, 24, tzinfo=datetime.timezone.utc), 'commenter': 'wtrocki', 'type': 'User'}, {'comment_id': 661666837, 'comment_body': 'rename', 'comment_created': datetime.datetime(2021, 6, 30, 17, 12, 46, tzinfo=datetime.timezone.utc), 'commenter': 'wtrocki', 'type': 'User'}, {'comment_id': 661667431, 'comment_body': 'That is this for? We have mockutil package that does mock config', 'comment_created': datetime.datetime(2021, 6, 30, 17, 13, 38, tzinfo=datetime.timezone.utc), 'commenter': 'wtrocki', 'type': 'User'}, {'comment_id': 662206532, 'comment_body': 'Validator_test', 'comment_created': datetime.datetime(2021, 7, 1, 11, 27, 10, tzinfo=datetime.timezone.utc), 'commenter': 'wtrocki', 'type': 'User'}, {'comment_id': 662206651, 'comment_body': 'ValidateCommandsUsingCharmilValidator', 'comment_created': datetime.datetime(2021, 7, 1, 11, 27, 21, tzinfo=datetime.timezone.utc), 'commenter': 'wtrocki', 'type': 'User'}, {'comment_id': 662261934, 'comment_body': '`Test_ValidateCommandsUsingCharmilValidator`\r\ndid this, to run the test', 'comment_created': datetime.datetime(2021, 7, 1, 12, 53, 6, tzinfo=datetime.timezone.utc), 'commenter': 'ankithans', 'type': 'User'}, {'comment_id': 662261941, 'comment_body': 'changed filename', 'comment_created': datetime.datetime(2021, 7, 1, 12, 53, 7, tzinfo=datetime.timezone.utc), 'commenter': 'ankithans', 'type': 'User'}]","[{'commit_sha': 'c0e14f365dcecaef133ac09dcdfde90a2982d268', 'committer_username': 'ankithans', 'committer_name': 'Ankit Hans', 'committer_email': 'ankithans1947@gmail.com', 'commit_date': datetime.datetime(2019, 5, 16, 6, 27, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e506b1e76a97418d77e856dcf3989c738f0607a5', 'committer_username': 'ankithans', 'committer_name': 'Ankit Hans', 'committer_email': 'ankithans1947@gmail.com', 'commit_date': datetime.datetime(2019, 5, 16, 6, 27, 13, tzinfo=datetime.timezone.utc)}]",Ankit Hans,50692897,ankithans1947@gmail.com,User,,68,,37,123
681441941,fix: validate rules in loop,"Closes #98 
Closes #93 
Closes #53 

### Description
- Rules implement `Rule` interface
- Validate rules in for loop(DRY), instead of calling one by one
- CI/CD tests & builds validator example

### Type of change

- [x] Bug fix (non-breaking change which fixes an issue)",True,103,https://api.github.com/repos/aerogear/charmil/pulls/103,https://github.com/aerogear/charmil/pull/103,closed,52,16,8,2,2,3,1,1,[{'name': 'bug'}],2021-07-01 04:25:04+00:00,2021-07-01 07:15:35+00:00,10231.0,2:50:31,"[{'comment_id': 662038442, 'comment_body': 'doc', 'comment_created': datetime.datetime(2021, 7, 1, 7, 13, 59, tzinfo=datetime.timezone.utc), 'commenter': 'wtrocki', 'type': 'User'}, {'comment_id': 662038694, 'comment_body': 'Wrap error aray in result structure for other elements', 'comment_created': datetime.datetime(2021, 7, 1, 7, 14, 25, tzinfo=datetime.timezone.utc), 'commenter': 'wtrocki', 'type': 'User'}, {'comment_id': 662040002, 'comment_body': 'actually lets leave it likt this', 'comment_created': datetime.datetime(2021, 7, 1, 7, 16, 29, tzinfo=datetime.timezone.utc), 'commenter': 'wtrocki', 'type': 'User'}]","[{'commit_sha': '879f3fc783f26f89870073288dcb25dc1a1046a9', 'committer_username': 'ankithans', 'committer_name': 'Ankit Hans', 'committer_email': 'ankithans1947@gmail.com', 'commit_date': datetime.datetime(2019, 5, 16, 6, 27, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': '96c7127a7eb734fe33058cb7f02b477f83542dd1', 'committer_username': 'ankithans', 'committer_name': 'Ankit Hans', 'committer_email': 'ankithans1947@gmail.com', 'commit_date': datetime.datetime(2019, 5, 16, 6, 27, 13, tzinfo=datetime.timezone.utc)}]",Ankit Hans,50692897,ankithans1947@gmail.com,User,,68,,37,123
681725384,refactor RuleConfig + overriding default values,"Closes #104 

### Description
Now Rule Config can be overridden by the user 
- [x] refactor ruleConfig and rules interface
- [x] overriding of rules by the user

### Type of change

- [x] Bug fix (non-breaking change which fixes an issue)
- [x] Documentation change
",True,105,https://api.github.com/repos/aerogear/charmil/pulls/105,https://github.com/aerogear/charmil/pull/105,closed,188,175,17,12,18,29,1,1,[{'name': 'bug'}],2021-07-01 10:35:46+00:00,2021-07-05 16:09:21+00:00,365615.0,"4 days, 5:33:35","[{'comment_id': 662179379, 'comment_body': 'Why we would merge specific rules. Can we merge all config paths?', 'comment_created': datetime.datetime(2021, 7, 1, 10, 40, 23, tzinfo=datetime.timezone.utc), 'commenter': 'wtrocki', 'type': 'User'}, {'comment_id': 662180455, 'comment_body': 'I think overal config is confusing. WE should either:\r\n\r\n- Add rules field with array of IRule\r\n- Put string Rule after each rule(not like it personally)', 'comment_created': datetime.datetime(2021, 7, 1, 10, 42, 17, tzinfo=datetime.timezone.utc), 'commenter': 'wtrocki', 'type': 'User'}, {'comment_id': 662196600, 'comment_body': ""okay, so I really need to rethink the architecture, as everything is dependent on config. I will refactor it, keeping the functionality same!\r\n\r\nI have one more concern - here we don't really need validator package, shall we do everything under rules package? But this can be changed while doing above refactoring!"", 'comment_created': datetime.datetime(2021, 7, 1, 11, 10, 29, tzinfo=datetime.timezone.utc), 'commenter': 'ankithans', 'type': 'User'}, {'comment_id': 662200978, 'comment_body': 'Yes.. No pressure. Take it easy ', 'comment_created': datetime.datetime(2021, 7, 1, 11, 18, 3, tzinfo=datetime.timezone.utc), 'commenter': 'wtrocki', 'type': 'User'}, {'comment_id': 662678122, 'comment_body': 'If the aim here is to merge two config files into one giving precedence to a passed in file but keeping default values were no values are passed in and we are already using `mergo`. We could try using merge with the transformer: `mergo.Merge(&config.Length, defaultConfig.Length, mergo.WithOverride)`. This should keep config with first values whilst only updating fields passed in from `defaultConfig.Length`.\r\n\r\nSpeaking of `.Length` is this the best name for this field? is it a validated ( element size wise ) map of config fields? I may just not be getting it either, in which case my suggestion may not be applicable.', 'comment_created': datetime.datetime(2021, 7, 2, 1, 25, 36, tzinfo=datetime.timezone.utc), 'commenter': 'dimakis', 'type': 'User'}, {'comment_id': 662776355, 'comment_body': ""I got you point @dimakis. But we want to keep defaultConfig.Length as it is and merge config.Length into it. We can do opposite as you suggested but then we need to do `*config = *defaultConfig`, extra lines of code. This can be avoided I'd say. And btw this code might change as there is some major refactoring going on.\r\n\r\n> Speaking of .Length is this the best name for this field? is it a validated ( element size wise ) map of config fields? I may just not be getting it either, in which case my suggestion may not be applicable.\r\n\r\nLength is a struct of Limits (that is map[string]Limit) and Limit is struct consisting of Max, Min length of field(int value). We can think over the names again.\r\n\r\n> Why we would merge specific rules. Can we merge all config paths?\r\n\r\nProblem was mergo cannot merge 2 slices. It can only merge structs and maps. And the previous method also had similar problems."", 'comment_created': datetime.datetime(2021, 7, 2, 6, 46, 31, tzinfo=datetime.timezone.utc), 'commenter': 'ankithans', 'type': 'User'}, {'comment_id': 662838381, 'comment_body': ""> I got you point @dimakis. But we want to keep defaultConfig.Length as it is and merge config.Length into it. We can do opposite as you suggested but then we need to do `*config = *defaultConfig`, extra lines of code. This can be avoided I'd say. And btw this code might change as there is some major refactoring going on.\r\n> > It may be one extra assignment, but it negates the need to check for duplication of values in a slice -> `removeDuplicates()` becomes obsolete.\r\n\r\n+1 on trying to find better fitting names\r\n"", 'comment_created': datetime.datetime(2021, 7, 2, 8, 31, 42, tzinfo=datetime.timezone.utc), 'commenter': 'dimakis', 'type': 'User'}, {'comment_id': 663332319, 'comment_body': ""@ankithans All I'm seeing is an empty TODO, have/ can you push up your implementation?"", 'comment_created': datetime.datetime(2021, 7, 3, 7, 40, 25, tzinfo=datetime.timezone.utc), 'commenter': 'dimakis', 'type': 'User'}, {'comment_id': 663332861, 'comment_body': 'sure give me sometime, I will ping you once done. i want to push some working code.', 'comment_created': datetime.datetime(2021, 7, 3, 7, 46, 24, tzinfo=datetime.timezone.utc), 'commenter': 'ankithans', 'type': 'User'}, {'comment_id': 663333512, 'comment_body': ""It's not essential for it to be working, just change the PR to a [WIP]. I enjoy that you don't want to push non functional code, but if you are still facing issues push it and I'll see if I can help. Don't get too hung up on a single piece of the puzzle. üëç"", 'comment_created': datetime.datetime(2021, 7, 3, 7, 53, 23, tzinfo=datetime.timezone.utc), 'commenter': 'dimakis', 'type': 'User'}, {'comment_id': 663334065, 'comment_body': 'thank you so much!!!\r\nNow Length rule is working fine! as it has a map field `Limits` (map[string]Limit) (Limit -> {Min, Max int}) to merge\r\nbut MustExist cannot be merged with mergo as it is a slice. One solution is to convert \r\n```go\r\nFields []string\r\n```\r\nto\r\n```go\r\nFields map[string]bool\r\n```\r\nwhat do you suggest?', 'comment_created': datetime.datetime(2021, 7, 3, 7, 59, 3, tzinfo=datetime.timezone.utc), 'commenter': 'ankithans', 'type': 'User'}, {'comment_id': 663339344, 'comment_body': 'I did it this way, changed the Fields []string to Fields map[string]bool. This way user can disable the default MustExist fields(which was not possible previously)\r\nand easy to merge with mergo üòÄ', 'comment_created': datetime.datetime(2021, 7, 3, 8, 53, 48, tzinfo=datetime.timezone.utc), 'commenter': 'ankithans', 'type': 'User'}, {'comment_id': 663816043, 'comment_body': '[Optional] Too Generic name IMHO ', 'comment_created': datetime.datetime(2021, 7, 5, 10, 18, 4, tzinfo=datetime.timezone.utc), 'commenter': 'wtrocki', 'type': 'User'}, {'comment_id': 663828067, 'comment_body': 'done! golangci-lint failing \r\n```\r\nrun golangci-lint\r\n  Running [/home/runner/golangci-lint-1.29.0-linux-amd64/golangci-lint run --out-format=github-actions --timeout 2m0s] in [] ...\r\n  level=error msg=""Running error: no such linter revive, run \'golangci-lint linters\' to see the list of supported linters""\r\n  \r\n  Error: golangci-lint exit with code 3\r\n  Ran golangci-lint in 127ms\r\n```', 'comment_created': datetime.datetime(2021, 7, 5, 10, 37, 37, tzinfo=datetime.timezone.utc), 'commenter': 'ankithans', 'type': 'User'}, {'comment_id': 663837751, 'comment_body': '@ankithans I think fixing linting rules will be separate issue - good first issue.\r\nyou can merge with failed linter', 'comment_created': datetime.datetime(2021, 7, 5, 10, 54, 5, tzinfo=datetime.timezone.utc), 'commenter': 'wtrocki', 'type': 'User'}, {'comment_id': 663837977, 'comment_body': 'Missing docs. Will be automatically fixed by failed linter from now on so I will never need to point that out :D', 'comment_created': datetime.datetime(2021, 7, 5, 10, 54, 32, tzinfo=datetime.timezone.utc), 'commenter': 'wtrocki', 'type': 'User'}, {'comment_id': 663839909, 'comment_body': 'Wrong place to put default config :)', 'comment_created': datetime.datetime(2021, 7, 5, 10, 57, 54, tzinfo=datetime.timezone.utc), 'commenter': 'wtrocki', 'type': 'User'}, {'comment_id': 663840721, 'comment_body': 'The structure will be much easier to maintain  when some external rules will be provided etc.', 'comment_created': datetime.datetime(2021, 7, 5, 10, 59, 27, tzinfo=datetime.timezone.utc), 'commenter': 'wtrocki', 'type': 'User'}, {'comment_id': 663841423, 'comment_body': 'What is that about?\r\nVery bad smell in code. Direct assignment. Why not make rule working with the validationOptions?', 'comment_created': datetime.datetime(2021, 7, 5, 11, 0, 35, tzinfo=datetime.timezone.utc), 'commenter': 'wtrocki', 'type': 'User'}, {'comment_id': 663841523, 'comment_body': 'Do we still need to use mergo?', 'comment_created': datetime.datetime(2021, 7, 5, 11, 0, 43, tzinfo=datetime.timezone.utc), 'commenter': 'wtrocki', 'type': 'User'}, {'comment_id': 663842162, 'comment_body': 'Do you dissagree with what I have proposed? \r\nIn what I have proposed config should not have any method (not to mention internal)', 'comment_created': datetime.datetime(2021, 7, 5, 11, 1, 51, tzinfo=datetime.timezone.utc), 'commenter': 'wtrocki', 'type': 'User'}, {'comment_id': 663889643, 'comment_body': 'yes..\r\n`default = Fields{""Use"": true, ""Short"": true, ""Long"": true, ""Example"": true}`\r\nif user specified `Fields: {""Args"": true, ""Long"": false}`, \r\nthen without mergo it will be - `Fields: {""Args"": true, ""Long"": false}`\r\n\r\nbut it should be  `Fields{""Use"": true, ""Short"": true, ""Long"": false, ""Example"": true, ""Args"": true}`', 'comment_created': datetime.datetime(2021, 7, 5, 12, 23, 22, tzinfo=datetime.timezone.utc), 'commenter': 'ankithans', 'type': 'User'}, {'comment_id': 663891348, 'comment_body': '@wtrocki addressed comments', 'comment_created': datetime.datetime(2021, 7, 5, 12, 26, 1, tzinfo=datetime.timezone.utc), 'commenter': 'ankithans', 'type': 'User'}, {'comment_id': 663978420, 'comment_body': 'Do we need to specify value that is used by default?\r\n\r\n```suggestion\r\n```\r\n\r\n', 'comment_created': datetime.datetime(2021, 7, 5, 14, 36, 30, tzinfo=datetime.timezone.utc), 'commenter': 'wtrocki', 'type': 'User'}, {'comment_id': 664029978, 'comment_body': '@wtrocki review required', 'comment_created': datetime.datetime(2021, 7, 5, 16, 3, 47, tzinfo=datetime.timezone.utc), 'commenter': 'ankithans', 'type': 'User'}, {'comment_id': 664032335, 'comment_body': 'Of the whole PR? or just this?', 'comment_created': datetime.datetime(2021, 7, 5, 16, 8, 48, tzinfo=datetime.timezone.utc), 'commenter': 'wtrocki', 'type': 'User'}, {'comment_id': 664033206, 'comment_body': 'whole', 'comment_created': datetime.datetime(2021, 7, 5, 16, 10, 30, tzinfo=datetime.timezone.utc), 'commenter': 'ankithans', 'type': 'User'}, {'comment_id': 664033268, 'comment_body': 'now merged', 'comment_created': datetime.datetime(2021, 7, 5, 16, 10, 41, tzinfo=datetime.timezone.utc), 'commenter': 'ankithans', 'type': 'User'}, {'comment_id': 664037501, 'comment_body': 'üôà ', 'comment_created': datetime.datetime(2021, 7, 5, 16, 20, 2, tzinfo=datetime.timezone.utc), 'commenter': 'wtrocki', 'type': 'User'}]","[{'commit_sha': '23e022af84323bc05cb094719101ea3a8c52cba6', 'committer_username': 'ankithans', 'committer_name': 'Ankit Hans', 'committer_email': 'ankithans1947@gmail.com', 'commit_date': datetime.datetime(2019, 5, 16, 6, 27, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4c61aef4be1faaf88767a345fa36f754a7ef6f54', 'committer_username': 'ankithans', 'committer_name': 'Ankit Hans', 'committer_email': 'ankithans1947@gmail.com', 'commit_date': datetime.datetime(2019, 5, 16, 6, 27, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6e53b377c5275f6d29b4286a066c4f851fc0b7fc', 'committer_username': 'ankithans', 'committer_name': 'Ankit Hans', 'committer_email': 'ankithans1947@gmail.com', 'commit_date': datetime.datetime(2019, 5, 16, 6, 27, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4f466eb7bc673722b3ad19b9fc655c32648cc5c0', 'committer_username': 'ankithans', 'committer_name': 'Ankit Hans', 'committer_email': 'ankithans1947@gmail.com', 'commit_date': datetime.datetime(2019, 5, 16, 6, 27, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8a43148ebde7c9580effa40324ac2c609bf34015', 'committer_username': 'ankithans', 'committer_name': 'Ankit Hans', 'committer_email': 'ankithans1947@gmail.com', 'commit_date': datetime.datetime(2019, 5, 16, 6, 27, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5abd7a8434935d9275731703f4ea78d32e04de60', 'committer_username': 'ankithans', 'committer_name': 'Ankit Hans', 'committer_email': 'ankithans1947@gmail.com', 'commit_date': datetime.datetime(2019, 5, 16, 6, 27, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': '399d6c65e78efd47c3725d7a15c1957930bfb51a', 'committer_username': 'ankithans', 'committer_name': 'Ankit Hans', 'committer_email': 'ankithans1947@gmail.com', 'commit_date': datetime.datetime(2019, 5, 16, 6, 27, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fbdaf5d12ce45eff84d728c9340633ac7187ead8', 'committer_username': 'ankithans', 'committer_name': 'Ankit Hans', 'committer_email': 'ankithans1947@gmail.com', 'commit_date': datetime.datetime(2019, 5, 16, 6, 27, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a5ed19c35c60c975b05c44b197ac21bb75383468', 'committer_username': 'ankithans', 'committer_name': 'Ankit Hans', 'committer_email': 'ankithans1947@gmail.com', 'commit_date': datetime.datetime(2019, 5, 16, 6, 27, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': '013122baa1396b5af0d719109e051de2efee2ca8', 'committer_username': 'ankithans', 'committer_name': 'Ankit Hans', 'committer_email': 'ankithans1947@gmail.com', 'commit_date': datetime.datetime(2019, 5, 16, 6, 27, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': '88910357cb3fbf7b1421b4bfcd01f0c9a49c916b', 'committer_username': 'ankithans', 'committer_name': 'Ankit Hans', 'committer_email': 'ankithans1947@gmail.com', 'commit_date': datetime.datetime(2019, 5, 16, 6, 27, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4635e1fceafdc8ec38fd10dc8ff7f8d37dccfc06', 'committer_username': 'ankithans', 'committer_name': 'Ankit Hans', 'committer_email': 'ankithans1947@gmail.com', 'commit_date': datetime.datetime(2019, 5, 16, 6, 27, 13, tzinfo=datetime.timezone.utc)}]",Ankit Hans,50692897,ankithans1947@gmail.com,User,,68,,37,123
683859661,feat: useMatches rule for Use,"Closes #84 

### Description
- UseMatches rule for validating use with default or user provided regex

### Type of change
 
- [x] New feature (non-breaking change which adds functionality)
- [x] Documentation change

### Checklist

- [x] Documentation added for the feature
- [x] CI and all relevant tests are passing
- [ ] Code Review completed
- [ ] Verified independently by reviewer",True,139,https://api.github.com/repos/aerogear/charmil/pulls/139,https://github.com/aerogear/charmil/pull/139,closed,57,13,7,3,4,8,1,1,[{'name': 'enhancement'}],2021-07-05 17:48:43+00:00,2021-07-05 18:49:03+00:00,3620.0,1:00:20,"[{'comment_id': 664078870, 'comment_body': 'If we have more then one thing to do in our `Validate` function it is good to pass them off to new ones but this `validateUse` just seems unnecessary for now.', 'comment_created': datetime.datetime(2021, 7, 5, 18, 14, 48, tzinfo=datetime.timezone.utc), 'commenter': 'jackdelahunt', 'type': 'User'}, {'comment_id': 664081429, 'comment_body': 'let me change that in all rules, if required?', 'comment_created': datetime.datetime(2021, 7, 5, 18, 23, 16, tzinfo=datetime.timezone.utc), 'commenter': 'ankithans', 'type': 'User'}, {'comment_id': 664082542, 'comment_body': 'Sure, I can see in the `lengthRule` and `mustExistRule` you have it like this so I think it would be best to quickly change them.', 'comment_created': datetime.datetime(2021, 7, 5, 18, 27, 26, tzinfo=datetime.timezone.utc), 'commenter': 'jackdelahunt', 'type': 'User'}, {'comment_id': 664082839, 'comment_body': 'done', 'comment_created': datetime.datetime(2021, 7, 5, 18, 28, 15, tzinfo=datetime.timezone.utc), 'commenter': 'ankithans', 'type': 'User'}, {'comment_id': 664084436, 'comment_body': 'Some rules might not need defaults. Is that default you would like to enforce?', 'comment_created': datetime.datetime(2021, 7, 5, 18, 33, 34, tzinfo=datetime.timezone.utc), 'commenter': 'wtrocki', 'type': 'User'}, {'comment_id': 664084910, 'comment_body': 'yes this is default, we can find some good default value, or can leave it empty', 'comment_created': datetime.datetime(2021, 7, 5, 18, 35, 6, tzinfo=datetime.timezone.utc), 'commenter': 'ankithans', 'type': 'User'}, {'comment_id': 664086353, 'comment_body': ""Maybe a default that checks for line breaks or EOF. Something basic that everyone wouldn't want. Or nothing is good also."", 'comment_created': datetime.datetime(2021, 7, 5, 18, 40, 28, tzinfo=datetime.timezone.utc), 'commenter': 'jackdelahunt', 'type': 'User'}, {'comment_id': 664088038, 'comment_body': 'kept it empty for now!', 'comment_created': datetime.datetime(2021, 7, 5, 18, 46, 3, tzinfo=datetime.timezone.utc), 'commenter': 'ankithans', 'type': 'User'}]","[{'commit_sha': 'ff7d0a5999dfe3406ec69617cd8c88fff215fe65', 'committer_username': 'ankithans', 'committer_name': 'Ankit Hans', 'committer_email': 'ankithans1947@gmail.com', 'commit_date': datetime.datetime(2019, 5, 16, 6, 27, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c1d545641bf14679e2f9a7be073a753136b7c35c', 'committer_username': 'ankithans', 'committer_name': 'Ankit Hans', 'committer_email': 'ankithans1947@gmail.com', 'commit_date': datetime.datetime(2019, 5, 16, 6, 27, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': '37376e569ffd0f85b6b32effe231a84dceea641d', 'committer_username': 'ankithans', 'committer_name': 'Ankit Hans', 'committer_email': 'ankithans1947@gmail.com', 'commit_date': datetime.datetime(2019, 5, 16, 6, 27, 13, tzinfo=datetime.timezone.utc)}]",Ankit Hans,50692897,ankithans1947@gmail.com,User,,68,,37,123
683924074,feat: deploy website & rm my-website,"Closes #129 

https://aerogear.github.io/charmil/docs",True,142,https://api.github.com/repos/aerogear/charmil/pulls/142,https://github.com/aerogear/charmil/pull/142,closed,212,22751,40,2,1,0,1,1,[{'name': 'enhancement'}],2021-07-05 20:40:49+00:00,2021-07-05 21:36:27+00:00,3338.0,0:55:38,[],"[{'commit_sha': 'c00e51682b2984365d396f10f2bda0a95dca07b3', 'committer_username': 'ankithans', 'committer_name': 'Ankit Hans', 'committer_email': 'ankithans1947@gmail.com', 'commit_date': datetime.datetime(2019, 5, 16, 6, 27, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8ba396c8969547e277d9586be5a4d200aee19e5a', 'committer_username': 'ankithans', 'committer_name': 'Ankit Hans', 'committer_email': 'ankithans1947@gmail.com', 'commit_date': datetime.datetime(2019, 5, 16, 6, 27, 13, tzinfo=datetime.timezone.utc)}]",Ankit Hans,50692897,ankithans1947@gmail.com,User,,68,,37,123
684158434,feat: add ignore command option,"Closes #86 

### Description
IgnoreCommands map[string]bool option in ValidatorOptions, for ignoring validation

### Type of change

- [x] New feature (non-breaking change which adds functionality)
- [x] Documentation change

### Checklist

- [x] Documentation added for the feature
- [x] CI and all relevant tests are passing
- [ ] Code Review completed
- [ ] Verified independently by reviewer
",True,144,https://api.github.com/repos/aerogear/charmil/pulls/144,https://github.com/aerogear/charmil/pull/144,closed,126,26,9,3,5,10,1,1,[{'name': 'enhancement'}],2021-07-06 08:17:18+00:00,2021-07-07 08:55:33+00:00,88695.0,"1 day, 0:38:15","[{'comment_id': 664369605, 'comment_body': 'How this will work with nested commands? Do we use `.` to map the nested commands.\r\n\r\nExample:\r\n```\r\nkafka.create \r\nregistry.create\r\n```', 'comment_created': datetime.datetime(2021, 7, 6, 8, 58, 1, tzinfo=datetime.timezone.utc), 'commenter': 'wtrocki', 'type': 'User'}, {'comment_id': 664371474, 'comment_body': ""it captures `Use` of the command, so \r\n```\r\nkafka.create \r\nregistry.create\r\n```\r\nall `create` subcommands will be ignored. Let's fix this!"", 'comment_created': datetime.datetime(2021, 7, 6, 9, 0, 26, tzinfo=datetime.timezone.utc), 'commenter': 'ankithans', 'type': 'User'}, {'comment_id': 664382121, 'comment_body': 'However, would that be hard? Can we simply create method that returns true or false for the current command and rule rule?\r\n\r\nEDIT: \r\n\r\nIgnore me that will be bad idea. \r\n\r\nI think we might need something as follows:\r\n\r\n- Ignore entire chain of commands (when you do dev etc.) and still want tests to pass\r\n- Ignore single command in nested scenario for all rules\r\n- Ignore single command in nested scenario for some rule. \r\n\r\n\r\nInstead of impleentatation I would love to see config you will come up with so we can discuss it.\r\nRemeber - we focus on API and docs first :D', 'comment_created': datetime.datetime(2021, 7, 6, 9, 14, 44, tzinfo=datetime.timezone.utc), 'commenter': 'wtrocki', 'type': 'User'}, {'comment_id': 664487017, 'comment_body': 'for nested/all commands, best way is to use CommandPath() provided by cobra. \r\nuser will specify : `{""kafka create"": true, ""echo"": true}`\r\n\r\nThis config is coming to my mind atm -\r\n```go\r\ntype ValidatorOptions struct {\r\n\tVerbose      bool            \r\n\tSkipChildren map[string]bool \r\n\tSkipCommands map[string]bool \r\n}\r\n```\r\nRuleOptions to be present in each rule, for controlling rule specific properties/options\r\n```go\r\ntype RuleOptions struct {\r\n\tVerbose      bool\r\n\tSkipCommands map[string]bool\r\n}\r\n```\r\neg - \r\n```go\r\ntype Length struct {\r\n\tRuleOptions validator.RuleOptions\r\n\tLimits      map[string]Limit\r\n}\r\n\r\n', 'comment_created': datetime.datetime(2021, 7, 6, 11, 55, 16, tzinfo=datetime.timezone.utc), 'commenter': 'ankithans', 'type': 'User'}, {'comment_id': 664556743, 'comment_body': '```\r\ntype Length struct {\r\n\tRuleOptions validator.RuleOptions\r\n```\t\r\n\r\nCould that be part of the interface so we can still have generic processing and enforce options for each rule\r\n\r\n```\r\nSkipChildren map[string]bool \r\n```\r\nNot needed/confusing. If you specify command path that is groping other commands all grouped ones will be disabled.\r\n\r\n```\r\n map[string]bool \r\n ```\r\n \r\n Not sure if that would give us enough to control command (path to command), rule, level - Error/Ignore (could be warn in the future)', 'comment_created': datetime.datetime(2021, 7, 6, 13, 29, 54, tzinfo=datetime.timezone.utc), 'commenter': 'wtrocki', 'type': 'User'}, {'comment_id': 664701622, 'comment_body': '> RuleOptions validator.RuleOptions\r\nCould that be part of the interface so we can still have generic processing and enforce options for each rule\r\n\r\nRules interface?\r\n\r\n> SkipChildren map[string]bool \r\nNot needed/confusing. If you specify command path that is grouping other commands all grouped ones will be disabled.\r\n\r\ncan you please provide an example for understanding\r\n\r\n> map[string]bool \r\n> Not sure if that would give us enough to control command (path to command), rule, level - Error/Ignore (could be warn in the future)\r\n\r\ndo we need all this details, when we ignore some command?', 'comment_created': datetime.datetime(2021, 7, 6, 16, 19, 49, tzinfo=datetime.timezone.utc), 'commenter': 'ankithans', 'type': 'User'}, {'comment_id': 664702620, 'comment_body': '> do we need all this details, when we ignore some command?\r\n\r\nAgreed. No need ', 'comment_created': datetime.datetime(2021, 7, 6, 16, 21, 11, tzinfo=datetime.timezone.utc), 'commenter': 'wtrocki', 'type': 'User'}, {'comment_id': 665174219, 'comment_body': '@ankithans is that ok?', 'comment_created': datetime.datetime(2021, 7, 7, 8, 50, 13, tzinfo=datetime.timezone.utc), 'commenter': 'wtrocki', 'type': 'User'}, {'comment_id': 665177121, 'comment_body': 'yes.. this looks good!', 'comment_created': datetime.datetime(2021, 7, 7, 8, 54, tzinfo=datetime.timezone.utc), 'commenter': 'ankithans', 'type': 'User'}, {'comment_id': 665178238, 'comment_body': ""example had only `create` command so I wasn't sure if you are using cobra paths for this"", 'comment_created': datetime.datetime(2021, 7, 7, 8, 55, 29, tzinfo=datetime.timezone.utc), 'commenter': 'wtrocki', 'type': 'User'}]","[{'commit_sha': 'ffaa9da9a635367a24bf8ed86a1ed5e799281a51', 'committer_username': 'ankithans', 'committer_name': 'Ankit Hans', 'committer_email': 'ankithans1947@gmail.com', 'commit_date': datetime.datetime(2019, 5, 16, 6, 27, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4b82b8ff8fba61a0f4673e2f08da24b55396cada', 'committer_username': 'ankithans', 'committer_name': 'Ankit Hans', 'committer_email': 'ankithans1947@gmail.com', 'commit_date': datetime.datetime(2019, 5, 16, 6, 27, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': '49d4f6c4e690fb9a9ffb816a4fe32cb087df5e3f', 'committer_username': 'wtrocki', 'committer_name': 'Wojciech Trocki', 'committer_email': None, 'commit_date': datetime.datetime(2011, 8, 15, 19, 48, 19, tzinfo=datetime.timezone.utc)}]",Ankit Hans,50692897,ankithans1947@gmail.com,User,,68,,37,123
685816193,Refactor core,"### Description
Extract packages from starter and put them into charmil-core
Next Step would be to make a starter CLI able to run all these packages!
after that a starter template -> then CLI tool

I will provide documentation for all the packages, once i get them running in the example ",True,154,https://api.github.com/repos/aerogear/charmil/pulls/154,https://github.com/aerogear/charmil/pull/154,closed,256,655,28,2,8,0,1,0,[{'name': 'enhancement'}],2021-07-08 08:50:38+00:00,2021-07-08 10:36:15+00:00,6337.0,1:45:37,[],"[{'commit_sha': '744ef46eaea9de46995beeda0c793e8a70553009', 'committer_username': 'ankithans', 'committer_name': 'Ankit Hans', 'committer_email': 'ankithans1947@gmail.com', 'commit_date': datetime.datetime(2019, 5, 16, 6, 27, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7e1382b5b27011becbfde40ac8fc79eff867928d', 'committer_username': 'ankithans', 'committer_name': 'Ankit Hans', 'committer_email': 'ankithans1947@gmail.com', 'commit_date': datetime.datetime(2019, 5, 16, 6, 27, 13, tzinfo=datetime.timezone.utc)}]",Ankit Hans,50692897,ankithans1947@gmail.com,User,,68,,37,123
685373827,chore: update charmil & validatorOptions,"<!-- Add a description here or link to the relevant GitHub issue
See https://docs.github.com/en/github/managing-your-work-on-github/linking-a-pull-request-to-an-issue on how to link an issue -->


### Verification Steps
<!-- Add verification steps here if applicable. Remove this section if it does not apply -->
1. go mod tidy
2. go test ./pkg/cmd/root

### Checklist

- [ ] CI and all relevant tests are passing
- [ ] Code Review completed
- [ ] Verified independently by reviewer",True,814,https://api.github.com/repos/redhat-developer/app-services-cli/pulls/814,https://github.com/redhat-developer/app-services-cli/pull/814,closed,37,7,3,1,0,2,0,0,[],2021-07-07 17:18:11+00:00,2021-07-07 20:13:07+00:00,10496.0,2:54:56,"[{'comment_id': 665598444, 'comment_body': 'Since we skip some problematic commands do we need this to be commented', 'comment_created': datetime.datetime(2021, 7, 7, 18, 6, 10, tzinfo=datetime.timezone.utc), 'commenter': 'wtrocki', 'type': 'User'}, {'comment_id': 665599759, 'comment_body': ""yep, it's deleted. in red"", 'comment_created': datetime.datetime(2021, 7, 7, 18, 8, 17, tzinfo=datetime.timezone.utc), 'commenter': 'ankithans', 'type': 'User'}]","[{'commit_sha': 'b443ebbab729ae1c0fc2057ca69c2904421b09fb', 'committer_username': 'ankithans', 'committer_name': 'Ankit Hans', 'committer_email': 'ankithans1947@gmail.com', 'commit_date': datetime.datetime(2019, 5, 16, 6, 27, 13, tzinfo=datetime.timezone.utc)}]",Ankit Hans,50692897,ankithans1947@gmail.com,User,,68,,37,123
686639239,charmil CLI for starter project,"Closes #143 

> WIP may be not ready for review yet

### Description

Charmil CLI for creating starter Charmil project

### Type of change

- [x] New feature (non-breaking change which adds functionality)
- [x] Documentation change

### Checklist

- [x] starter example for CLI
- [x] include charmil validator tests in starter
- [x] starter go template for CLI files
- [x] charmil CLI basic structure
- [ ] Adding license, contibuting.md and other no golang stuff
- [ ] charmil CLI init command
- [ ] Documentation added for the feature
- [ ] CI and all relevant tests are passing
- [ ] Code Review completed
- [ ] Verified independently by reviewer
",True,155,https://api.github.com/repos/aerogear/charmil/pulls/155,https://github.com/aerogear/charmil/pull/155,closed,458,705,48,8,26,18,1,1,[{'name': 'enhancement'}],2021-07-09 09:30:38+00:00,2021-07-21 06:11:45+00:00,1024867.0,"11 days, 20:41:07","[{'comment_id': 666832186, 'comment_body': 'I think using a `init()` function here that populates values defined in var would look a bit cleaner. Namit does this in his config pr', 'comment_created': datetime.datetime(2021, 7, 9, 10, 1, 55, tzinfo=datetime.timezone.utc), 'commenter': 'jackdelahunt', 'type': 'User'}, {'comment_id': 666832823, 'comment_body': 'Outsourcing the call back here is much cleaner then before aswell', 'comment_created': datetime.datetime(2021, 7, 9, 10, 3, 1, tzinfo=datetime.timezone.utc), 'commenter': 'jackdelahunt', 'type': 'User'}, {'comment_id': 666835001, 'comment_body': 'sure', 'comment_created': datetime.datetime(2021, 7, 9, 10, 6, 48, tzinfo=datetime.timezone.utc), 'commenter': 'ankithans', 'type': 'User'}, {'comment_id': 666861056, 'comment_body': 'Maybe you can use a logger function here:\r\n```suggestion\r\n\t\tcmdFactory.Logger.Errorln(os.Stderr, err)\r\n```\r\n\r\n WDYT?', 'comment_created': datetime.datetime(2021, 7, 9, 10, 53, 21, tzinfo=datetime.timezone.utc), 'commenter': 'namit-chandwani', 'type': 'User'}, {'comment_id': 666874409, 'comment_body': '`Nitpick`: Maybe we can convert this alias to lowercase. Almost every project that I\'ve come across follows this naming convention. \r\n```suggestion\r\n\tcliversion ""github.com/aerogear/charmil/starter-1/pkg/cmd/version""\r\n```\r\n\r\n\r\nWDYT?', 'comment_created': datetime.datetime(2021, 7, 9, 11, 17, 46, tzinfo=datetime.timezone.utc), 'commenter': 'namit-chandwani', 'type': 'User'}, {'comment_id': 666874761, 'comment_body': ' Please do not copy code to core ', 'comment_created': datetime.datetime(2021, 7, 9, 11, 18, 26, tzinfo=datetime.timezone.utc), 'commenter': 'wtrocki', 'type': 'User'}, {'comment_id': 666875617, 'comment_body': 'yes, this has to be configurable by CLI. I already made a note for it.. will not push in main with this', 'comment_created': datetime.datetime(2021, 7, 9, 11, 20, 2, tzinfo=datetime.timezone.utc), 'commenter': 'ankithans', 'type': 'User'}, {'comment_id': 666875909, 'comment_body': 'yep', 'comment_created': datetime.datetime(2021, 7, 9, 11, 20, 36, tzinfo=datetime.timezone.utc), 'commenter': 'ankithans', 'type': 'User'}, {'comment_id': 666875934, 'comment_body': 'sure', 'comment_created': datetime.datetime(2021, 7, 9, 11, 20, 40, tzinfo=datetime.timezone.utc), 'commenter': 'ankithans', 'type': 'User'}, {'comment_id': 673291895, 'comment_body': 'Maybe now you can add command to build the charmil CLI here', 'comment_created': datetime.datetime(2021, 7, 20, 16, 46, 2, tzinfo=datetime.timezone.utc), 'commenter': 'namit-chandwani', 'type': 'User'}, {'comment_id': 673307913, 'comment_body': ""As the starter will be using some released version of the core, so we'll need it to be a sub-module. Which is why `go.mod` will be required here"", 'comment_created': datetime.datetime(2021, 7, 20, 17, 1, 24, tzinfo=datetime.timezone.utc), 'commenter': 'namit-chandwani', 'type': 'User'}, {'comment_id': 673316919, 'comment_body': 'does it matter? as this will be most likely wiped and transformed into templates', 'comment_created': datetime.datetime(2021, 7, 20, 17, 9, 59, tzinfo=datetime.timezone.utc), 'commenter': 'ankithans', 'type': 'User'}, {'comment_id': 673317414, 'comment_body': 'done', 'comment_created': datetime.datetime(2021, 7, 20, 17, 10, 29, tzinfo=datetime.timezone.utc), 'commenter': 'ankithans', 'type': 'User'}, {'comment_id': 673419258, 'comment_body': ""> as this will be most likely wiped and transformed into templates\r\n\r\nYes, but there's still quite some time before we start working on templates, right?\r\nLike we have to refine core and starter then figure out the templating engine to use etc. (Ref: https://github.com/aerogear/charmil/issues/164#issuecomment-883185917)\r\n\r\nSo maybe till then, we can leave this as a module.\r\nAnyway, the issue of sub-module not working doesn't exist anymore after adding that `replace` directive on line 12, so I don't think keeping this for now will hurt us in any way.\r\n\r\nPlease correct me if I'm wrong\r\n\r\n"", 'comment_created': datetime.datetime(2021, 7, 20, 19, 32, 50, tzinfo=datetime.timezone.utc), 'commenter': 'namit-chandwani', 'type': 'User'}, {'comment_id': 673433072, 'comment_body': 'Also, maybe we can include a `go.mod` file in the template too. WDYT?', 'comment_created': datetime.datetime(2021, 7, 20, 19, 50, 39, tzinfo=datetime.timezone.utc), 'commenter': 'namit-chandwani', 'type': 'User'}, {'comment_id': 673656167, 'comment_body': 'done', 'comment_created': datetime.datetime(2021, 7, 21, 4, 42, 56, tzinfo=datetime.timezone.utc), 'commenter': 'ankithans', 'type': 'User'}, {'comment_id': 673840420, 'comment_body': 'that will make shell unusable without cli. lets disscus.\r\n\r\nCLI is gimmick. starter will not be starter if it doest have all files needed to compile', 'comment_created': datetime.datetime(2021, 7, 21, 10, 7, 24, tzinfo=datetime.timezone.utc), 'commenter': 'wtrocki', 'type': 'User'}, {'comment_id': 673843424, 'comment_body': '> CLI is gimmick. starter will not be starter if it doest have all files needed to compile\r\n\r\nAgreed. \r\n\r\nSo I think we need to keep starter and templates as something separate (unlike what Cobra does)\r\n\r\nThis rules out the option 2 here: https://github.com/aerogear/charmil/issues/164#issuecomment-884060416', 'comment_created': datetime.datetime(2021, 7, 21, 10, 11, 50, tzinfo=datetime.timezone.utc), 'commenter': 'namit-chandwani', 'type': 'User'}]","[{'commit_sha': '71219e386ec2e3bde21c5971781f398c193c7175', 'committer_username': 'ankithans', 'committer_name': 'Ankit Hans', 'committer_email': 'ankithans1947@gmail.com', 'commit_date': datetime.datetime(2019, 5, 16, 6, 27, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cd7343d0667fb733ae5e20548165a747251136bb', 'committer_username': 'ankithans', 'committer_name': 'Ankit Hans', 'committer_email': 'ankithans1947@gmail.com', 'commit_date': datetime.datetime(2019, 5, 16, 6, 27, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cfa1f26d29609cd833752129ee7c26a26bf79f9b', 'committer_username': 'ankithans', 'committer_name': 'Ankit Hans', 'committer_email': 'ankithans1947@gmail.com', 'commit_date': datetime.datetime(2019, 5, 16, 6, 27, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0104f6e73c6c642f9d4211b45e66f0933f53aff7', 'committer_username': 'ankithans', 'committer_name': 'Ankit Hans', 'committer_email': 'ankithans1947@gmail.com', 'commit_date': datetime.datetime(2019, 5, 16, 6, 27, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': '01f954049c9e34cbc2380fbe1dad4f4aca51cd8e', 'committer_username': 'ankithans', 'committer_name': 'Ankit Hans', 'committer_email': 'ankithans1947@gmail.com', 'commit_date': datetime.datetime(2019, 5, 16, 6, 27, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a60ec4ad2aaba588c4c3291c289ec0d82a220a10', 'committer_username': 'ankithans', 'committer_name': 'Ankit Hans', 'committer_email': 'ankithans1947@gmail.com', 'commit_date': datetime.datetime(2019, 5, 16, 6, 27, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': '98038ed46fd33036481291ba2577de8e0c46b0bf', 'committer_username': 'ankithans', 'committer_name': 'Ankit Hans', 'committer_email': 'ankithans1947@gmail.com', 'commit_date': datetime.datetime(2019, 5, 16, 6, 27, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c136ab4c84efe9e218c07fba6da0faca5e4c6821', 'committer_username': 'ankithans', 'committer_name': 'Ankit Hans', 'committer_email': 'ankithans1947@gmail.com', 'commit_date': datetime.datetime(2019, 5, 16, 6, 27, 13, tzinfo=datetime.timezone.utc)}]",Ankit Hans,50692897,ankithans1947@gmail.com,User,,68,,37,123
688511147,feat: example validation,"Closes #116 

### Description
- Example Validation Rule
- Tests for rules package

### Type of change
- [x] New feature (non-breaking change which adds functionality)
- [x] Documentation change

### Checklist

- [x] Documentation added for the feature
- [x] CI and all relevant tests are passing
- [ ] Code Review completed
- [ ] Verified independently by reviewer

### Logs
```bash
$ go test ./validator/rules/
commands checked: 16
checks failed: 3
--- FAIL: Test_ExecuteCommand (0.00s)
    cmd_test.go:42: validationErr was not empty, got length: 3; want 0
    cmd_test.go:46: EXAMPLE_MATCHES_RULE: cmd root echo echosub: provided example doesn't match with command
    cmd_test.go:46: EXAMPLE_MATCHES_RULE: cmd root echo times: provided example doesn't match with command
    cmd_test.go:46: EXAMPLE_MATCHES_RULE: cmd root echo: provided example doesn't match with command
FAIL
FAIL    github.com/aerogear/charmil/validator/rules     0.034s
FAIL
```",True,159,https://api.github.com/repos/aerogear/charmil/pulls/159,https://github.com/aerogear/charmil/pull/159,closed,165,130,7,3,0,11,1,1,[{'name': 'enhancement'}],2021-07-13 06:20:03+00:00,2021-07-14 04:29:00+00:00,79737.0,22:08:57,"[{'comment_id': 668762453, 'comment_body': 'I think we can leave this out, the validation already prints out how many errors occur and we hard code in the want value here anyway. ', 'comment_created': datetime.datetime(2021, 7, 13, 13, 27, 11, tzinfo=datetime.timezone.utc), 'commenter': 'jackdelahunt', 'type': 'User'}, {'comment_id': 668765969, 'comment_body': 'Comment needs to be updated ', 'comment_created': datetime.datetime(2021, 7, 13, 13, 31, 3, tzinfo=datetime.timezone.utc), 'commenter': 'jackdelahunt', 'type': 'User'}, {'comment_id': 668773896, 'comment_body': 'No need to store this in `cmd`, `rootCmd` is more descriptive anyway', 'comment_created': datetime.datetime(2021, 7, 13, 13, 40, 5, tzinfo=datetime.timezone.utc), 'commenter': 'jackdelahunt', 'type': 'User'}, {'comment_id': 668783800, 'comment_body': 'This error message uses the word ""match"" even though we only check if it contains. So depending on your intended functionality change error message or the condition checked.\r\n\r\nChanging the condition will make cases like the echo command fail so maybe that is not what you want. ', 'comment_created': datetime.datetime(2021, 7, 13, 13, 51, 11, tzinfo=datetime.timezone.utc), 'commenter': 'jackdelahunt', 'type': 'User'}, {'comment_id': 668796730, 'comment_body': 'Sorry for being annoying but we need to be a bit more concrete here, so they know what to do to fix this error.\r\n\r\nMaybe something like ""provided example doesn\'t contain command path,  Example:%cmdExample, Path:%cmdPath""', 'comment_created': datetime.datetime(2021, 7, 13, 14, 5, 19, tzinfo=datetime.timezone.utc), 'commenter': 'jackdelahunt', 'type': 'User'}, {'comment_id': 668798553, 'comment_body': 'yep can do this.\r\n> Sorry for being annoying\r\n\r\nno issue in that, this helps!', 'comment_created': datetime.datetime(2021, 7, 13, 14, 7, 19, tzinfo=datetime.timezone.utc), 'commenter': 'ankithans', 'type': 'User'}, {'comment_id': 668801926, 'comment_body': '> Example:%cmdExample, Path:%cmdPath\r\n\r\nwe provide cobra cmd object in every error, so this info is avoided in every rule\r\nValidationError looks like\r\n```go\r\ntype ValidationError struct {\r\n\tName string\r\n\tErr  error\r\n\tRule string\r\n\tCmd  *cobra.Command\r\n}\r\n```', 'comment_created': datetime.datetime(2021, 7, 13, 14, 10, 44, tzinfo=datetime.timezone.utc), 'commenter': 'ankithans', 'type': 'User'}, {'comment_id': 668804037, 'comment_body': 'this is actually verbose logging which I missed !', 'comment_created': datetime.datetime(2021, 7, 13, 14, 12, 53, tzinfo=datetime.timezone.utc), 'commenter': 'ankithans', 'type': 'User'}, {'comment_id': 668807904, 'comment_body': 'Oh okay I see how that works now, and yeah adding this when verbose logging is true would be better ', 'comment_created': datetime.datetime(2021, 7, 13, 14, 16, 46, tzinfo=datetime.timezone.utc), 'commenter': 'jackdelahunt', 'type': 'User'}, {'comment_id': 668814385, 'comment_body': 'can you put some real command names.', 'comment_created': datetime.datetime(2021, 7, 13, 14, 23, 24, tzinfo=datetime.timezone.utc), 'commenter': 'wtrocki', 'type': 'User'}, {'comment_id': 668815215, 'comment_body': 'shall we remove examples directory, as we have tests for validator now?\r\n\r\nremoved the example dir. not needed', 'comment_created': datetime.datetime(2021, 7, 13, 14, 24, 14, tzinfo=datetime.timezone.utc), 'commenter': 'ankithans', 'type': 'User'}]","[{'commit_sha': '99f2e0964b94a5379a7f6fcd5ce717f724449253', 'committer_username': 'ankithans', 'committer_name': 'Ankit Hans', 'committer_email': 'ankithans1947@gmail.com', 'commit_date': datetime.datetime(2019, 5, 16, 6, 27, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b3656307a29c0c3579c4f8557f38e711369b6bfd', 'committer_username': 'ankithans', 'committer_name': 'Ankit Hans', 'committer_email': 'ankithans1947@gmail.com', 'commit_date': datetime.datetime(2019, 5, 16, 6, 27, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4f8604657e5863b8d5d7886d58d9c0552c3c3596', 'committer_username': 'ankithans', 'committer_name': 'Ankit Hans', 'committer_email': 'ankithans1947@gmail.com', 'commit_date': datetime.datetime(2019, 5, 16, 6, 27, 13, tzinfo=datetime.timezone.utc)}]",Ankit Hans,50692897,ankithans1947@gmail.com,User,,68,,37,123
689704262,chore: refactor docs & contributing.md,"Closes #148 
Closes #54 
Closes #126

### Description
- [x] Move docs from website/docs to docs/src folder
- [x] Add contributing guide
- [x] move resources to docs/images and crop logo

### Type of change
- [x] Documentation change
",True,160,https://api.github.com/repos/aerogear/charmil/pulls/160,https://github.com/aerogear/charmil/pull/160,closed,37,16,20,2,1,4,1,1,[{'name': 'enhancement'}],2021-07-14 08:35:32+00:00,2021-07-14 08:54:08+00:00,1116.0,0:18:36,"[{'comment_id': 669412595, 'comment_body': ""```suggestion\r\n- We are keeping all the communications open, so that everyone can sync and is free to contribute. So if you have any feature/bugs suggestions about anything please don't hesitate to open up an [issue](https://github.com/aerogear/charmil/issues/new/choose)\r\n```"", 'comment_created': datetime.datetime(2021, 7, 14, 8, 41, 41, tzinfo=datetime.timezone.utc), 'commenter': 'namit-chandwani', 'type': 'User'}, {'comment_id': 669415663, 'comment_body': ""I'd replace the following as it is not a need for functionality:\r\nThe following ~will need~ should be ..."", 'comment_created': datetime.datetime(2021, 7, 14, 8, 45, 47, tzinfo=datetime.timezone.utc), 'commenter': 'dimakis', 'type': 'User'}, {'comment_id': 669417740, 'comment_body': 'Maybe you can add a link to the `.golangci.yaml` file here', 'comment_created': datetime.datetime(2021, 7, 14, 8, 48, 38, tzinfo=datetime.timezone.utc), 'commenter': 'namit-chandwani', 'type': 'User'}, {'comment_id': 669419158, 'comment_body': 'done', 'comment_created': datetime.datetime(2021, 7, 14, 8, 50, 29, tzinfo=datetime.timezone.utc), 'commenter': 'ankithans', 'type': 'User'}]","[{'commit_sha': '63c3d0691721cb1c7a9595cef9192b5c746e42c0', 'committer_username': 'ankithans', 'committer_name': 'Ankit Hans', 'committer_email': 'ankithans1947@gmail.com', 'commit_date': datetime.datetime(2019, 5, 16, 6, 27, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': '70e80c2f53cc806815f323e5c5203ac2bf0ee7e5', 'committer_username': 'ankithans', 'committer_name': 'Ankit Hans', 'committer_email': 'ankithans1947@gmail.com', 'commit_date': datetime.datetime(2019, 5, 16, 6, 27, 13, tzinfo=datetime.timezone.utc)}]",Ankit Hans,50692897,ankithans1947@gmail.com,User,,68,,37,123
689767102,fix: skip validation for children,"Closes #151 

### Description
- fix skip children commands by specifying path

### Type of change

- [x] Bug fix (non-breaking change which fixes an issue)",True,161,https://api.github.com/repos/aerogear/charmil/pulls/161,https://github.com/aerogear/charmil/pull/161,closed,56,32,4,2,12,5,1,1,[{'name': 'bug'}],2021-07-14 10:03:18+00:00,2021-07-15 15:24:19+00:00,105661.0,"1 day, 5:21:01","[{'comment_id': 669661794, 'comment_body': 'Is this removed?', 'comment_created': datetime.datetime(2021, 7, 14, 14, 21, 33, tzinfo=datetime.timezone.utc), 'commenter': 'wtrocki', 'type': 'User'}, {'comment_id': 669663318, 'comment_body': 'no', 'comment_created': datetime.datetime(2021, 7, 14, 14, 23, 11, tzinfo=datetime.timezone.utc), 'commenter': 'ankithans', 'type': 'User'}, {'comment_id': 669663490, 'comment_body': 'just removed from test', 'comment_created': datetime.datetime(2021, 7, 14, 14, 23, 23, tzinfo=datetime.timezone.utc), 'commenter': 'ankithans', 'type': 'User'}, {'comment_id': 670520920, 'comment_body': 'This should be helper method', 'comment_created': datetime.datetime(2021, 7, 15, 14, 33, 52, tzinfo=datetime.timezone.utc), 'commenter': 'wtrocki', 'type': 'User'}, {'comment_id': 670550337, 'comment_body': 'done', 'comment_created': datetime.datetime(2021, 7, 15, 15, 6, 4, tzinfo=datetime.timezone.utc), 'commenter': 'ankithans', 'type': 'User'}]","[{'commit_sha': 'a4bb5dcd14d7344a0882a2dd54d514bc6a6ed92c', 'committer_username': 'ankithans', 'committer_name': 'Ankit Hans', 'committer_email': 'ankithans1947@gmail.com', 'commit_date': datetime.datetime(2019, 5, 16, 6, 27, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9b9559add87bc3d9e0a07468977944aa627c18c3', 'committer_username': 'ankithans', 'committer_name': 'Ankit Hans', 'committer_email': 'ankithans1947@gmail.com', 'commit_date': datetime.datetime(2019, 5, 16, 6, 27, 13, tzinfo=datetime.timezone.utc)}]",Ankit Hans,50692897,ankithans1947@gmail.com,User,,68,,37,123
695026379,feat: charmil init command,"Closes #164 #165 


### Tasks
Charmil init command will clone the starter repo and set it up according to details provided by the user.
- [x] Get prompts for Owner, repo and CLI Name
- [x] Configure the [starter repo](https://github.com/ankithans/charmil-starter-template) with templates
- [x] Clone the starter repo
- [x] Replace template placeholders with prompts taken from user - ignore .git, .github, .chglog etc

### Type of change
- [x] New feature (non-breaking change which adds functionality)
- [x] Documentation change",True,170,https://api.github.com/repos/aerogear/charmil/pulls/170,https://github.com/aerogear/charmil/pull/170,closed,253,11,5,4,4,4,1,1,[{'name': 'enhancement'}],2021-07-22 09:54:50+00:00,2021-07-23 08:38:25+00:00,81815.0,22:43:35,"[{'comment_id': 675397118, 'comment_body': 'Why we have this?', 'comment_created': datetime.datetime(2021, 7, 23, 8, 38, 3, tzinfo=datetime.timezone.utc), 'commenter': 'wtrocki', 'type': 'User'}, {'comment_id': 675399799, 'comment_body': 'to ignore these folders, while applying template ', 'comment_created': datetime.datetime(2021, 7, 23, 8, 42, 29, tzinfo=datetime.timezone.utc), 'commenter': 'ankithans', 'type': 'User'}, {'comment_id': 675481378, 'comment_body': 'Yes. I get it but... why? Those are useful files that are part of starter', 'comment_created': datetime.datetime(2021, 7, 23, 10, 57, 31, tzinfo=datetime.timezone.utc), 'commenter': 'wtrocki', 'type': 'User'}, {'comment_id': 675483393, 'comment_body': ""I didn't have any templates defined in these folders and some of these were creating some error while applying templates. So I had to do this.\r\nno need to walk through the files with no templates.\r\nBut these will be generated untouched as it is.\r\n"", 'comment_created': datetime.datetime(2021, 7, 23, 11, 1, 27, tzinfo=datetime.timezone.utc), 'commenter': 'ankithans', 'type': 'User'}]","[{'commit_sha': '0763ebeee8b632c273ca5ae3ee72db87ea84cdee', 'committer_username': 'ankithans', 'committer_name': 'Ankit Hans', 'committer_email': 'ankithans1947@gmail.com', 'commit_date': datetime.datetime(2019, 5, 16, 6, 27, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': '15c142111212612d658c960465a4af6e702298fc', 'committer_username': 'ankithans', 'committer_name': 'Ankit Hans', 'committer_email': 'ankithans1947@gmail.com', 'commit_date': datetime.datetime(2019, 5, 16, 6, 27, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': '69a1ce99a281f6344827447022f5fe2b9fe51f27', 'committer_username': 'ankithans', 'committer_name': 'Ankit Hans', 'committer_email': 'ankithans1947@gmail.com', 'commit_date': datetime.datetime(2019, 5, 16, 6, 27, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ff7e70dbe4b977304199cd2bef3adc9b64b5ae06', 'committer_username': 'ankithans', 'committer_name': 'Ankit Hans', 'committer_email': 'ankithans1947@gmail.com', 'commit_date': datetime.datetime(2019, 5, 16, 6, 27, 13, tzinfo=datetime.timezone.utc)}]",Ankit Hans,50692897,ankithans1947@gmail.com,User,,68,,37,123
696492348,chore: remove starter from main,remove starter from main. No need to maintain the starter at 2 locations - in main and in separate repo [here](https://github.com/ankithans/charmil-starter-template),False,173,https://api.github.com/repos/aerogear/charmil/pulls/173,https://github.com/aerogear/charmil/pull/173,closed,1,1993,38,1,5,0,0,1,[],2021-07-25 12:16:31+00:00,2021-07-27 10:18:05+00:00,165694.0,"1 day, 22:01:34",[],"[{'commit_sha': '45320eabf1da05c54593d783dcdf52af2501cbc0', 'committer_username': 'ankithans', 'committer_name': 'Ankit Hans', 'committer_email': 'ankithans1947@gmail.com', 'commit_date': datetime.datetime(2019, 5, 16, 6, 27, 13, tzinfo=datetime.timezone.utc)}]",Ankit Hans,50692897,ankithans1947@gmail.com,User,,68,,37,123
697703798,Punctuation rule,"Closes #168 

### Description

Add Punctuation Rule which checks the full stops in flags usage. 
other punctuation things should be added in this rule.

### Type of change

- [x] New feature (non-breaking change which adds functionality)
- [x] Documentation change

### Checklist

- [x] Documentation added for the feature
- [x] CI and all relevant tests are passing
- [x] Code Review completed
- [x] Verified independently by reviewer
",True,182,https://api.github.com/repos/aerogear/charmil/pulls/182,https://github.com/aerogear/charmil/pull/182,closed,99,6,9,2,4,0,1,1,[{'name': 'enhancement'}],2021-07-27 09:46:23+00:00,2021-07-27 10:10:17+00:00,1434.0,0:23:54,[],"[{'commit_sha': '2aa72054ab650a826996d7ace1c256cc77258c41', 'committer_username': 'ankithans', 'committer_name': 'Ankit Hans', 'committer_email': 'ankithans1947@gmail.com', 'commit_date': datetime.datetime(2019, 5, 16, 6, 27, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e3b86aa4f042cfa0501dc3ed095756e64e55a5bd', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}]",Ankit Hans,50692897,ankithans1947@gmail.com,User,,68,,37,123
698588890,chore: refactor repo structure,"Closes #180 
### Description
rm pkg, put pkg into core",True,188,https://api.github.com/repos/aerogear/charmil/pulls/188,https://github.com/aerogear/charmil/pull/188,closed,19,13,16,2,12,1,0,1,[],2021-07-28 11:07:41+00:00,2021-07-29 09:32:19+00:00,80678.0,22:24:38,"[{'comment_id': 678986872, 'comment_body': 'Maybe you can change this too now\r\n\r\n```suggestion\r\nYou can run the CLI commands files directly with go run. All commands and subcommands are in the ./cli/internal/cmd folder.\r\n```', 'comment_created': datetime.datetime(2021, 7, 29, 9, 31, 21, tzinfo=datetime.timezone.utc), 'commenter': 'namit-chandwani', 'type': 'User'}]","[{'commit_sha': '20ff44964fcbeeac7b9d6675c6b2cd98c525e878', 'committer_username': 'ankithans', 'committer_name': 'Ankit Hans', 'committer_email': 'ankithans1947@gmail.com', 'commit_date': datetime.datetime(2019, 5, 16, 6, 27, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b4a85d1231bd873db83fbbdd82b645fe38bba692', 'committer_username': 'wtrocki', 'committer_name': 'Wojciech Trocki', 'committer_email': None, 'commit_date': datetime.datetime(2011, 8, 15, 19, 48, 19, tzinfo=datetime.timezone.utc)}]",Ankit Hans,50692897,ankithans1947@gmail.com,User,,68,,37,123

699374462,fix: goreleaser build path,,True,193,https://api.github.com/repos/aerogear/charmil/pulls/193,https://github.com/aerogear/charmil/pull/193,closed,2,2,2,1,0,0,1,1,[{'name': 'requires-release'}],2021-07-29 09:42:50+00:00,2021-07-29 09:54:55+00:00,725.0,0:12:05,[],"[{'commit_sha': '61cf4c1f6acd6ab5f7fdbadcdf4a571bd8c0f3bf', 'committer_username': 'ankithans', 'committer_name': 'Ankit Hans', 'committer_email': 'ankithans1947@gmail.com', 'commit_date': datetime.datetime(2019, 5, 16, 6, 27, 13, tzinfo=datetime.timezone.utc)}]",Ankit Hans,50692897,ankithans1947@gmail.com,User,,68,,37,123
700112633,chore: move factory to starter,"Closes #162 

### Description
Move factory from core to starter. 
",True,195,https://api.github.com/repos/aerogear/charmil/pulls/195,https://github.com/aerogear/charmil/pull/195,closed,127,58,38,3,6,2,0,0,[],2021-07-30 08:35:12+00:00,2021-08-02 08:14:07+00:00,257935.0,"2 days, 23:38:55","[{'comment_id': 679803951, 'comment_body': 'I think the `{{ .CliName }}` placeholder is being replaced by the `<no value>` value in every auto-generated doc, since `CliName` var is currently empty.\r\nSo maybe you can add a default value to it, in order to fix this temporarily.\r\n\r\nWDYT?', 'comment_created': datetime.datetime(2021, 7, 30, 9, 56, 57, tzinfo=datetime.timezone.utc), 'commenter': 'namit-chandwani', 'type': 'User'}, {'comment_id': 679806102, 'comment_body': ""thanks, I didn't noticed this. Will fix it."", 'comment_created': datetime.datetime(2021, 7, 30, 10, 0, 33, tzinfo=datetime.timezone.utc), 'commenter': 'ankithans', 'type': 'User'}]","[{'commit_sha': 'ddfe1953662cd9833154f097118553db87824e43', 'committer_username': 'ankithans', 'committer_name': 'Ankit Hans', 'committer_email': 'ankithans1947@gmail.com', 'commit_date': datetime.datetime(2019, 5, 16, 6, 27, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': '438dc528ac19d0810e9631c29591c00da5d314b9', 'committer_username': 'ankithans', 'committer_name': 'Ankit Hans', 'committer_email': 'ankithans1947@gmail.com', 'commit_date': datetime.datetime(2019, 5, 16, 6, 27, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a6bd34356dd0413f07f954aad5ef3bd86b90c3ea', 'committer_username': 'ankithans', 'committer_name': 'Ankit Hans', 'committer_email': 'ankithans1947@gmail.com', 'commit_date': datetime.datetime(2019, 5, 16, 6, 27, 13, tzinfo=datetime.timezone.utc)}]",Ankit Hans,50692897,ankithans1947@gmail.com,User,,68,,37,123
702347577,fix: update starter url and imports,"### Description
- update starter imports and url in starter and https://github.com/aerogear/charmil-starter/pull/4

",True,201,https://api.github.com/repos/aerogear/charmil/pulls/201,https://github.com/aerogear/charmil/pull/201,closed,2,2,2,1,0,0,0,1,[],2021-08-03 14:46:58+00:00,2021-08-03 14:53:32+00:00,394.0,0:06:34,[],"[{'commit_sha': '203cdba9670a8acc1e5098a85b4f96f92718af7b', 'committer_username': 'ankithans', 'committer_name': 'Ankit Hans', 'committer_email': 'ankithans1947@gmail.com', 'commit_date': datetime.datetime(2019, 5, 16, 6, 27, 13, tzinfo=datetime.timezone.utc)}]",Ankit Hans,50692897,ankithans1947@gmail.com,User,,68,,37,123

703186665,feat: disable validation rule option,"Closes #197 

### Description
- Add a Disable option in RulesOption for disabling the rule

I tried doing it with loop, but it gives problem. Here is the sample code which I tried.
```go
r := reflect.ValueOf(validatorConfig.ValidatorRules)
for i := 0; i < r.NumField(); i++ {
	a := r.Field(i)
        fmt.Println(a.FieldByName(""RuleOptions"").FieldByName(""Disable"").String())

	if a.FieldByName(""RuleOptions"").FieldByName(""Disable"").String() == ""false"" {
	 	ruleConfig.Rules = append(ruleConfig.Rules, a.interface{}.(Rules))  // here is the issue
        }

	fmt.Println(ruleConfig.Rules)
}
```

### Type of change

- [ ] Bug fix (non-breaking change which fixes an issue)
- [x] New feature (non-breaking change which adds functionality)
- [ ] Breaking change (fix or feature that would cause existing functionality to not work as expected)
- [x] Documentation change
- [ ] Other (please specify)

### Checklist
- [x] Documentation added for the feature
- [x] CI and all relevant tests are passing
- [ ] Code Review completed
- [ ] Verified independently by reviewer

",True,202,https://api.github.com/repos/aerogear/charmil/pulls/202,https://github.com/aerogear/charmil/pull/202,closed,41,8,4,1,0,0,0,1,[],2021-08-04 09:26:11+00:00,2021-08-04 09:41:40+00:00,929.0,0:15:29,[],"[{'commit_sha': '4dc345e77cabe70b1cddd522dc2cb7e1c850fae3', 'committer_username': 'ankithans', 'committer_name': 'Ankit Hans', 'committer_email': 'ankithans1947@gmail.com', 'commit_date': datetime.datetime(2019, 5, 16, 6, 27, 13, tzinfo=datetime.timezone.utc)}]",Ankit Hans,50692897,ankithans1947@gmail.com,User,,68,,37,123
704578437,feat: check for updates in starter,"Closes #138 

### Description
- In Starter template https://github.com/aerogear/charmil-starter/pull/5
- Check for updates in starter

confusion in (devel); while doing 
```go
if info, ok := debug.ReadBuildInfo(); ok {
	fmt.Println(info.Main.Version) // it prints (devel)
}
```

### Type of change

- [ ] Bug fix (non-breaking change which fixes an issue)
- [x] New feature (non-breaking change which adds functionality)
- [ ] Breaking change (fix or feature that would cause existing functionality to not work as expected)
- [ ] Documentation change
- [ ] Other (please specify)

### Checklist

- [ ] Documentation added for the feature
- [x] CI and all relevant tests are passing
- [ ] Code Review completed
- [ ] Verified independently by reviewer

",True,203,https://api.github.com/repos/aerogear/charmil/pulls/203,https://github.com/aerogear/charmil/pull/203,closed,101,6,9,1,4,0,0,0,[],2021-08-05 10:25:34+00:00,2021-08-05 11:41:15+00:00,4541.0,1:15:41,[],"[{'commit_sha': 'f8095ed4eb756eab66f9cb098e45fd63d2740990', 'committer_username': 'ankithans', 'committer_name': 'Ankit Hans', 'committer_email': 'ankithans1947@gmail.com', 'commit_date': datetime.datetime(2019, 5, 16, 6, 27, 13, tzinfo=datetime.timezone.utc)}]",Ankit Hans,50692897,ankithans1947@gmail.com,User,,68,,37,123
705889681,feat: add command in charmil cli,"Closes #166 

### Description
- Add command in charmil CLI
- Refactor charmil CLI

### Type of change

- [ ] Bug fix (non-breaking change which fixes an issue)
- [x] New feature (non-breaking change which adds functionality)
- [ ] Breaking change (fix or feature that would cause existing functionality to not work as expected)
- [x] Documentation change
- [ ] Other (please specify)

### Checklist

- [x] Documentation added for the feature
- [x] CI and all relevant tests are passing
- [ ] Code Review completed
- [ ] Verified independently by reviewer

![image](https://user-images.githubusercontent.com/50692897/128633005-8dba2a5c-e3f9-449f-ad15-9ab3b918be7f.png)
",True,207,https://api.github.com/repos/aerogear/charmil/pulls/207,https://github.com/aerogear/charmil/pull/207,closed,295,45,10,5,4,5,2,1,"[{'name': 'enhancement'}, {'name': 'requires-release'}]",2021-08-07 13:10:08+00:00,2021-08-09 10:12:17+00:00,162129.0,"1 day, 21:02:09","[{'comment_id': 684922400, 'comment_body': 'Maybe you can add a flag here that takes a target path for the language file and then generate the file in that location.\r\nThe crud command does this too. Check [this out](https://github.com/aerogear/charmil/blob/f4f743e2f55669cc3a849521deb37515d2bef8b8/cli/internal/cmd/crud/crud.go#L62) for reference.', 'comment_created': datetime.datetime(2021, 8, 9, 5, 45, 29, tzinfo=datetime.timezone.utc), 'commenter': 'namit-chandwani', 'type': 'User'}, {'comment_id': 684922789, 'comment_body': '```suggestion\r\n// AddTemplates stores embedded contents of all the add template files\r\n```', 'comment_created': datetime.datetime(2021, 8, 9, 5, 47, 1, tzinfo=datetime.timezone.utc), 'commenter': 'namit-chandwani', 'type': 'User'}, {'comment_id': 684961037, 'comment_body': 'This is outside the scope of this PR, but should we localize the use of command?', 'comment_created': datetime.datetime(2021, 8, 9, 7, 14, 2, tzinfo=datetime.timezone.utc), 'commenter': 'rkpattnaik780', 'type': 'User'}, {'comment_id': 684996492, 'comment_body': ""I think, we can leave it? it would be difficult for the user to give two paths. It's just a file, user can move it wherever they wants manually.\r\n\r\nit will be better to generate the locales file with the command file. to let the user figure out what really happened. "", 'comment_created': datetime.datetime(2021, 8, 9, 8, 17, 40, tzinfo=datetime.timezone.utc), 'commenter': 'ankithans', 'type': 'User'}, {'comment_id': 684998344, 'comment_body': ""i am not sure about this. It's being done in rhoas as well."", 'comment_created': datetime.datetime(2021, 8, 9, 8, 20, 38, tzinfo=datetime.timezone.utc), 'commenter': 'ankithans', 'type': 'User'}]","[{'commit_sha': 'e3494a7767b3a916588f5b703125468da29a6af7', 'committer_username': 'ankithans', 'committer_name': 'Ankit Hans', 'committer_email': 'ankithans1947@gmail.com', 'commit_date': datetime.datetime(2019, 5, 16, 6, 27, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': '051ccd4140795bd62619956c8f4db1ff059eebac', 'committer_username': 'ankithans', 'committer_name': 'Ankit Hans', 'committer_email': 'ankithans1947@gmail.com', 'commit_date': datetime.datetime(2019, 5, 16, 6, 27, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': '70810b0a65aef99ccbea28395cff61efbe7a8f58', 'committer_username': 'ankithans', 'committer_name': 'Ankit Hans', 'committer_email': 'ankithans1947@gmail.com', 'commit_date': datetime.datetime(2019, 5, 16, 6, 27, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ac19ebe8783dfa6feb5442cc764fcce934285d22', 'committer_username': 'ankithans', 'committer_name': 'Ankit Hans', 'committer_email': 'ankithans1947@gmail.com', 'commit_date': datetime.datetime(2019, 5, 16, 6, 27, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'acb41f0c1757df35459390e678b217101ffd6b65', 'committer_username': 'ankithans', 'committer_name': 'Ankit Hans', 'committer_email': 'ankithans1947@gmail.com', 'commit_date': datetime.datetime(2019, 5, 16, 6, 27, 13, tzinfo=datetime.timezone.utc)}]",Ankit Hans,50692897,ankithans1947@gmail.com,User,,68,,37,123
706045188,docs: update i18n docs,"Closes #163 

### Description
- update charmil i18n docs

### Type of change

- [ ] Bug fix (non-breaking change which fixes an issue)
- [ ] New feature (non-breaking change which adds functionality)
- [ ] Breaking change (fix or feature that would cause existing functionality to not work as expected)
- [x] Documentation change
- [ ] Other (please specify)

### Checklist

- [x] Documentation added for the feature
- [x] CI and all relevant tests are passing
- [ ] Code Review completed
- [ ] Verified independently by reviewer

",True,209,https://api.github.com/repos/aerogear/charmil/pulls/209,https://github.com/aerogear/charmil/pull/209,closed,36,9,1,2,0,1,1,1,[{'name': 'documentation'}],2021-08-08 13:36:57+00:00,2021-08-08 15:54:20+00:00,8243.0,2:17:23,"[{'comment_id': 684784631, 'comment_body': 'Could you add some more explanation on what this does and how embed works. Nothing too long as it is a stdlib feature but just a small note on what is going on here.\r\n\r\n```suggestion\r\n1. Embed provides access to files embedded in the running Go program meaning you can get your locales directory with the path to it.  \r\n```', 'comment_created': datetime.datetime(2021, 8, 8, 14, 36, 27, tzinfo=datetime.timezone.utc), 'commenter': 'jackdelahunt', 'type': 'User'}]","[{'commit_sha': 'ab1e0da81bdd00d02c8b10efc2ac7179b5e366b3', 'committer_username': 'ankithans', 'committer_name': 'Ankit Hans', 'committer_email': 'ankithans1947@gmail.com', 'commit_date': datetime.datetime(2019, 5, 16, 6, 27, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4c3e9a4ed4412c470cb5271a1d159a427ad996f3', 'committer_username': 'ankithans', 'committer_name': 'Ankit Hans', 'committer_email': 'ankithans1947@gmail.com', 'commit_date': datetime.datetime(2019, 5, 16, 6, 27, 13, tzinfo=datetime.timezone.utc)}]",Ankit Hans,50692897,ankithans1947@gmail.com,User,,68,,37,123
707210745,chore: refactor core package,"Closes #213 
Closes #183
Closes #115 

### Description
- refactor core structure into folders
- move factory from internal -> pkg
- remove charmil commands docs(outdated)
- update factory, i18n docs

### Type of change

- [ ] Bug fix (non-breaking change which fixes an issue)
- [ ] New feature (non-breaking change which adds functionality)
- [x] Breaking change (fix or feature that would cause existing functionality to not work as expected)
- [x] Documentation change
- [ ] Other (please specify)

### Checklist

- [x] Documentation added for the feature
- [x] CI and all relevant tests are passing
- [ ] Code Review completed
- [ ] Verified independently by reviewer
",True,219,https://api.github.com/repos/aerogear/charmil/pulls/219,https://github.com/aerogear/charmil/pull/219,closed,68,123,41,5,5,1,3,1,"[{'name': 'documentation'}, {'name': 'enhancement'}, {'name': 'requires-release'}]",2021-08-10 10:06:30+00:00,2021-08-10 11:36:57+00:00,5427.0,1:30:27,"[{'comment_id': 685898229, 'comment_body': ""```suggestion\r\n```\r\nThis part can be removed as it's independent and has nothing to do with the factory initialization."", 'comment_created': datetime.datetime(2021, 8, 10, 10, 35, 27, tzinfo=datetime.timezone.utc), 'commenter': 'namit-chandwani', 'type': 'User'}]","[{'commit_sha': 'c4f399bd22b575fd7c9807f5c3926ccd9b56b8de', 'committer_username': 'ankithans', 'committer_name': 'Ankit Hans', 'committer_email': 'ankithans1947@gmail.com', 'commit_date': datetime.datetime(2019, 5, 16, 6, 27, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3810caafb1720abdefb3ce59a865d7fba0206d5a', 'committer_username': 'ankithans', 'committer_name': 'Ankit Hans', 'committer_email': 'ankithans1947@gmail.com', 'commit_date': datetime.datetime(2019, 5, 16, 6, 27, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': '652fae1842d0640d7988e04634a9c0a64baaa3a0', 'committer_username': 'ankithans', 'committer_name': 'Ankit Hans', 'committer_email': 'ankithans1947@gmail.com', 'commit_date': datetime.datetime(2019, 5, 16, 6, 27, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b377eb99fec371655186a4b9936003e569cb1230', 'committer_username': 'namit-chandwani', 'committer_name': 'Namit Chandwani', 'committer_email': None, 'commit_date': datetime.datetime(2019, 6, 7, 10, 40, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': '07de3d055ac94fec88031728b3865287129b9b19', 'committer_username': 'ankithans', 'committer_name': 'Ankit Hans', 'committer_email': 'ankithans1947@gmail.com', 'commit_date': datetime.datetime(2019, 5, 16, 6, 27, 13, tzinfo=datetime.timezone.utc)}]",Ankit Hans,50692897,ankithans1947@gmail.com,User,,68,,37,123
703186665,feat: disable validation rule option,"Closes #197 

### Description
- Add a Disable option in RulesOption for disabling the rule

I tried doing it with loop, but it gives problem. Here is the sample code which I tried.
```go
r := reflect.ValueOf(validatorConfig.ValidatorRules)
for i := 0; i < r.NumField(); i++ {
	a := r.Field(i)
        fmt.Println(a.FieldByName(""RuleOptions"").FieldByName(""Disable"").String())

	if a.FieldByName(""RuleOptions"").FieldByName(""Disable"").String() == ""false"" {
	 	ruleConfig.Rules = append(ruleConfig.Rules, a.interface{}.(Rules))  // here is the issue
        }

	fmt.Println(ruleConfig.Rules)
}
```

### Type of change

- [ ] Bug fix (non-breaking change which fixes an issue)
- [x] New feature (non-breaking change which adds functionality)
- [ ] Breaking change (fix or feature that would cause existing functionality to not work as expected)
- [x] Documentation change
- [ ] Other (please specify)

### Checklist
- [x] Documentation added for the feature
- [x] CI and all relevant tests are passing
- [ ] Code Review completed
- [ ] Verified independently by reviewer

",True,202,https://api.github.com/repos/aerogear/charmil/pulls/202,https://github.com/aerogear/charmil/pull/202,closed,41,8,4,1,0,0,0,1,[],2021-08-04 09:26:11+00:00,2021-08-04 09:41:40+00:00,929.0,0:15:29,[],"[{'commit_sha': '4dc345e77cabe70b1cddd522dc2cb7e1c850fae3', 'committer_username': 'ankithans', 'committer_name': 'Ankit Hans', 'committer_email': 'ankithans1947@gmail.com', 'commit_date': datetime.datetime(2019, 5, 16, 6, 27, 13, tzinfo=datetime.timezone.utc)}]",Ankit Hans,50692897,ankithans1947@gmail.com,User,,68,,37,123

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
353677504,charmil,aerogear/charmil,Go,13,116,14,11,187,17,3,1,"[{'id': 732622300, 'number': 247, 'closed': datetime.datetime(2021, 9, 13, 11, 11, 57, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 9, 13, 10, 52, 36, tzinfo=datetime.timezone.utc), 'time_taken': 1161.0, 'time_delta': '0:19:21', 'additions': 6, 'deletions': 0, 'state': 'closed'}, {'id': 731896047, 'number': 245, 'closed': None, 'created': datetime.datetime(2021, 9, 11, 8, 24, 17, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 30, 'deletions': 17, 'state': 'open'}, {'id': 708535321, 'number': 223, 'closed': datetime.datetime(2021, 8, 11, 9, 20, 8, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 11, 8, 58, 47, tzinfo=datetime.timezone.utc), 'time_taken': 1281.0, 'time_delta': '0:21:21', 'additions': 38, 'deletions': 0, 'state': 'closed'}, {'id': 707210745, 'number': 219, 'closed': datetime.datetime(2021, 8, 10, 11, 36, 57, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 10, 10, 6, 30, tzinfo=datetime.timezone.utc), 'time_taken': 5427.0, 'time_delta': '1:30:27', 'additions': 68, 'deletions': 123, 'state': 'closed'}, {'id': 706045188, 'number': 209, 'closed': datetime.datetime(2021, 8, 8, 15, 54, 20, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 8, 13, 36, 57, tzinfo=datetime.timezone.utc), 'time_taken': 8243.0, 'time_delta': '2:17:23', 'additions': 36, 'deletions': 9, 'state': 'closed'}, {'id': 705889681, 'number': 207, 'closed': datetime.datetime(2021, 8, 9, 10, 12, 17, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 7, 13, 10, 8, tzinfo=datetime.timezone.utc), 'time_taken': 162129.0, 'time_delta': '1 day, 21:02:09', 'additions': 295, 'deletions': 45, 'state': 'closed'}, {'id': 704578437, 'number': 203, 'closed': datetime.datetime(2021, 8, 5, 11, 41, 15, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 5, 10, 25, 34, tzinfo=datetime.timezone.utc), 'time_taken': 4541.0, 'time_delta': '1:15:41', 'additions': 101, 'deletions': 6, 'state': 'closed'}, {'id': 703186665, 'number': 202, 'closed': datetime.datetime(2021, 8, 4, 9, 41, 40, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 4, 9, 26, 11, tzinfo=datetime.timezone.utc), 'time_taken': 929.0, 'time_delta': '0:15:29', 'additions': 41, 'deletions': 8, 'state': 'closed'}, {'id': 702347577, 'number': 201, 'closed': datetime.datetime(2021, 8, 3, 14, 53, 32, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 3, 14, 46, 58, tzinfo=datetime.timezone.utc), 'time_taken': 394.0, 'time_delta': '0:06:34', 'additions': 2, 'deletions': 2, 'state': 'closed'}, {'id': 700112633, 'number': 195, 'closed': datetime.datetime(2021, 8, 2, 8, 14, 7, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 30, 8, 35, 12, tzinfo=datetime.timezone.utc), 'time_taken': 257935.0, 'time_delta': '2 days, 23:38:55', 'additions': 127, 'deletions': 58, 'state': 'closed'}, {'id': 699374462, 'number': 193, 'closed': datetime.datetime(2021, 7, 29, 9, 54, 55, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 29, 9, 42, 50, tzinfo=datetime.timezone.utc), 'time_taken': 725.0, 'time_delta': '0:12:05', 'additions': 2, 'deletions': 2, 'state': 'closed'}, {'id': 698588890, 'number': 188, 'closed': datetime.datetime(2021, 7, 29, 9, 32, 19, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 28, 11, 7, 41, tzinfo=datetime.timezone.utc), 'time_taken': 80678.0, 'time_delta': '22:24:38', 'additions': 19, 'deletions': 13, 'state': 'closed'}, {'id': 697703798, 'number': 182, 'closed': datetime.datetime(2021, 7, 27, 10, 10, 17, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 27, 9, 46, 23, tzinfo=datetime.timezone.utc), 'time_taken': 1434.0, 'time_delta': '0:23:54', 'additions': 99, 'deletions': 6, 'state': 'closed'}, {'id': 696492348, 'number': 173, 'closed': datetime.datetime(2021, 7, 27, 10, 18, 5, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 25, 12, 16, 31, tzinfo=datetime.timezone.utc), 'time_taken': 165694.0, 'time_delta': '1 day, 22:01:34', 'additions': 1, 'deletions': 1993, 'state': 'closed'}, {'id': 695026379, 'number': 170, 'closed': datetime.datetime(2021, 7, 23, 8, 38, 25, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 22, 9, 54, 50, tzinfo=datetime.timezone.utc), 'time_taken': 81815.0, 'time_delta': '22:43:35', 'additions': 253, 'deletions': 11, 'state': 'closed'}, {'id': 689767102, 'number': 161, 'closed': datetime.datetime(2021, 7, 15, 15, 24, 19, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 14, 10, 3, 18, tzinfo=datetime.timezone.utc), 'time_taken': 105661.0, 'time_delta': '1 day, 5:21:01', 'additions': 56, 'deletions': 32, 'state': 'closed'}, {'id': 689704262, 'number': 160, 'closed': datetime.datetime(2021, 7, 14, 8, 54, 8, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 14, 8, 35, 32, tzinfo=datetime.timezone.utc), 'time_taken': 1116.0, 'time_delta': '0:18:36', 'additions': 37, 'deletions': 16, 'state': 'closed'}, {'id': 688511147, 'number': 159, 'closed': datetime.datetime(2021, 7, 14, 4, 29, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 13, 6, 20, 3, tzinfo=datetime.timezone.utc), 'time_taken': 79737.0, 'time_delta': '22:08:57', 'additions': 165, 'deletions': 130, 'state': 'closed'}, {'id': 686639239, 'number': 155, 'closed': datetime.datetime(2021, 7, 21, 6, 11, 45, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 9, 9, 30, 38, tzinfo=datetime.timezone.utc), 'time_taken': 1024867.0, 'time_delta': '11 days, 20:41:07', 'additions': 458, 'deletions': 705, 'state': 'closed'}, {'id': 685816193, 'number': 154, 'closed': datetime.datetime(2021, 7, 8, 10, 36, 15, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 8, 8, 50, 38, tzinfo=datetime.timezone.utc), 'time_taken': 6337.0, 'time_delta': '1:45:37', 'additions': 256, 'deletions': 655, 'state': 'closed'}, {'id': 684158434, 'number': 144, 'closed': datetime.datetime(2021, 7, 7, 8, 55, 33, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 6, 8, 17, 18, tzinfo=datetime.timezone.utc), 'time_taken': 88695.0, 'time_delta': '1 day, 0:38:15', 'additions': 126, 'deletions': 26, 'state': 'closed'}, {'id': 683924074, 'number': 142, 'closed': datetime.datetime(2021, 7, 5, 21, 36, 27, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 5, 20, 40, 49, tzinfo=datetime.timezone.utc), 'time_taken': 3338.0, 'time_delta': '0:55:38', 'additions': 212, 'deletions': 22751, 'state': 'closed'}, {'id': 683859661, 'number': 139, 'closed': datetime.datetime(2021, 7, 5, 18, 49, 3, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 5, 17, 48, 43, tzinfo=datetime.timezone.utc), 'time_taken': 3620.0, 'time_delta': '1:00:20', 'additions': 57, 'deletions': 13, 'state': 'closed'}, {'id': 681725384, 'number': 105, 'closed': datetime.datetime(2021, 7, 5, 16, 9, 21, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 1, 10, 35, 46, tzinfo=datetime.timezone.utc), 'time_taken': 365615.0, 'time_delta': '4 days, 5:33:35', 'additions': 188, 'deletions': 175, 'state': 'closed'}, {'id': 681441941, 'number': 103, 'closed': datetime.datetime(2021, 7, 1, 7, 15, 35, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 1, 4, 25, 4, tzinfo=datetime.timezone.utc), 'time_taken': 10231.0, 'time_delta': '2:50:31', 'additions': 52, 'deletions': 16, 'state': 'closed'}, {'id': 681070758, 'number': 101, 'closed': datetime.datetime(2021, 6, 30, 17, 37, 33, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 30, 17, 34, 19, tzinfo=datetime.timezone.utc), 'time_taken': 194.0, 'time_delta': '0:03:14', 'additions': 37, 'deletions': 20, 'state': 'closed'}, {'id': 680206770, 'number': 97, 'closed': datetime.datetime(2021, 6, 30, 10, 16, 52, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 29, 17, 0, 40, tzinfo=datetime.timezone.utc), 'time_taken': 62172.0, 'time_delta': '17:16:12', 'additions': 88, 'deletions': 68, 'state': 'closed'}, {'id': 677006738, 'number': 83, 'closed': datetime.datetime(2021, 6, 24, 12, 17, 3, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 24, 10, 56, 6, tzinfo=datetime.timezone.utc), 'time_taken': 4857.0, 'time_delta': '1:20:57', 'additions': 468, 'deletions': 351, 'state': 'closed'}, {'id': 676902706, 'number': 82, 'closed': datetime.datetime(2021, 6, 29, 9, 34, 57, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 24, 8, 30, 48, tzinfo=datetime.timezone.utc), 'time_taken': 435849.0, 'time_delta': '5 days, 1:04:09', 'additions': 424, 'deletions': 5, 'state': 'closed'}, {'id': 672609684, 'number': 52, 'closed': datetime.datetime(2021, 6, 22, 10, 10, 28, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 17, 13, 0, 17, tzinfo=datetime.timezone.utc), 'time_taken': 421811.0, 'time_delta': '4 days, 21:10:11', 'additions': 353, 'deletions': 189, 'state': 'closed'}, {'id': 669587074, 'number': 48, 'closed': datetime.datetime(2021, 6, 15, 7, 20, 15, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 14, 13, 53, 27, tzinfo=datetime.timezone.utc), 'time_taken': 62808.0, 'time_delta': '17:26:48', 'additions': 214, 'deletions': 143, 'state': 'closed'}, {'id': 665794858, 'number': 45, 'closed': datetime.datetime(2021, 6, 11, 14, 47, 32, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 9, 10, 55, 59, tzinfo=datetime.timezone.utc), 'time_taken': 186693.0, 'time_delta': '2 days, 3:51:33', 'additions': 174, 'deletions': 88, 'state': 'closed'}, {'id': 660036311, 'number': 37, 'closed': datetime.datetime(2021, 6, 15, 7, 20, 57, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 2, 12, 48, 39, tzinfo=datetime.timezone.utc), 'time_taken': 1103538.0, 'time_delta': '12 days, 18:32:18', 'additions': 232, 'deletions': 114, 'state': 'closed'}, {'id': 656701568, 'number': 28, 'closed': datetime.datetime(2021, 5, 28, 15, 47, 16, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 5, 28, 15, 47, 5, tzinfo=datetime.timezone.utc), 'time_taken': 11.0, 'time_delta': '0:00:11', 'additions': 802, 'deletions': 643, 'state': 'closed'}, {'id': 653383232, 'number': 27, 'closed': datetime.datetime(2021, 5, 28, 14, 22, 18, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 5, 26, 8, 14, 57, tzinfo=datetime.timezone.utc), 'time_taken': 194841.0, 'time_delta': '2 days, 6:07:21', 'additions': 858, 'deletions': 699, 'state': 'closed'}, {'id': 643000494, 'number': 25, 'closed': datetime.datetime(2021, 5, 28, 14, 24, 28, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 5, 12, 9, 48, 12, tzinfo=datetime.timezone.utc), 'time_taken': 1398976.0, 'time_delta': '16 days, 4:36:16', 'additions': 106, 'deletions': 1, 'state': 'closed'}, {'id': 613841948, 'number': 19, 'closed': datetime.datetime(2021, 4, 16, 18, 4, 21, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 4, 12, 18, 23, 6, tzinfo=datetime.timezone.utc), 'time_taken': 344475.0, 'time_delta': '3 days, 23:41:15', 'additions': 51, 'deletions': 0, 'state': 'closed'}, {'id': 611727870, 'number': 13, 'closed': datetime.datetime(2021, 4, 8, 22, 27, 44, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 4, 8, 17, 7, 45, tzinfo=datetime.timezone.utc), 'time_taken': 19199.0, 'time_delta': '5:19:59', 'additions': 17, 'deletions': 0, 'state': 'closed'}, {'id': 611509786, 'number': 12, 'closed': datetime.datetime(2021, 4, 8, 12, 26, 41, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 4, 8, 12, 22, 42, tzinfo=datetime.timezone.utc), 'time_taken': 239.0, 'time_delta': '0:03:59', 'additions': 44, 'deletions': 29, 'state': 'closed'}, {'id': 611382917, 'number': 11, 'closed': datetime.datetime(2021, 4, 8, 9, 46, 11, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 4, 8, 9, 26, 18, tzinfo=datetime.timezone.utc), 'time_taken': 1193.0, 'time_delta': '0:19:53', 'additions': 39, 'deletions': 15, 'state': 'closed'}, {'id': 610693054, 'number': 9, 'closed': datetime.datetime(2021, 4, 7, 14, 18, 29, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 4, 7, 14, 0, 8, tzinfo=datetime.timezone.utc), 'time_taken': 1101.0, 'time_delta': '0:18:21', 'additions': 7, 'deletions': 7, 'state': 'closed'}, {'id': 610614981, 'number': 8, 'closed': datetime.datetime(2021, 4, 7, 12, 36, 1, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 4, 7, 12, 15, 13, tzinfo=datetime.timezone.utc), 'time_taken': 1248.0, 'time_delta': '0:20:48', 'additions': 496, 'deletions': 8, 'state': 'closed'}, {'id': 610558950, 'number': 6, 'closed': datetime.datetime(2021, 4, 7, 11, 4, 14, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 4, 7, 10, 49, 5, tzinfo=datetime.timezone.utc), 'time_taken': 909.0, 'time_delta': '0:15:09', 'additions': 863, 'deletions': 0, 'state': 'closed'}, {'id': 610410430, 'number': 3, 'closed': datetime.datetime(2021, 4, 7, 10, 50, 53, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 4, 7, 7, 27, 34, tzinfo=datetime.timezone.utc), 'time_taken': 12199.0, 'time_delta': '3:23:19', 'additions': 41, 'deletions': 1, 'state': 'closed'}]"
309763858,app-services-cli,redhat-developer/app-services-cli,Go,72,41,25,50,1362,34,30,4,"[{'id': 710496319, 'number': 900, 'closed': datetime.datetime(2021, 8, 12, 8, 58, 2, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 12, 8, 48, 31, tzinfo=datetime.timezone.utc), 'time_taken': 571.0, 'time_delta': '0:09:31', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 700682675, 'number': 860, 'closed': datetime.datetime(2021, 8, 4, 4, 13, 44, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 31, 9, 24, 54, tzinfo=datetime.timezone.utc), 'time_taken': 326930.0, 'time_delta': '3 days, 18:48:50', 'additions': 146, 'deletions': 112, 'state': 'closed'}, {'id': 685373827, 'number': 814, 'closed': datetime.datetime(2021, 7, 7, 20, 13, 7, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 7, 17, 18, 11, tzinfo=datetime.timezone.utc), 'time_taken': 10496.0, 'time_delta': '2:54:56', 'additions': 37, 'deletions': 7, 'state': 'closed'}, {'id': 680758219, 'number': 767, 'closed': datetime.datetime(2021, 7, 1, 13, 0, 42, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 30, 11, 2, 7, tzinfo=datetime.timezone.utc), 'time_taken': 93515.0, 'time_delta': '1 day, 1:58:35', 'additions': 53, 'deletions': 0, 'state': 'closed'}]"
