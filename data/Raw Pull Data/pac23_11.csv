pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
473213165,Go port of CRIT - Encoding/Decoding ,"[7c83bf1](https://github.com/checkpoint-restore/go-criu/pull/28/commits/7c83bf1bde0f90dfb90c20f4c5a5463b35f259fc) once merge wont cause a problem. 
This pr is only for the main encode/decode functionality file and the protobindings.

Travis is not written yet thus passed.",False,28,https://api.github.com/repos/checkpoint-restore/go-criu/pulls/28,https://github.com/checkpoint-restore/go-criu/pull/28,closed,3583,2,16,2,10,25,0,0,[],2020-08-25 13:42:22+00:00,2021-03-17 11:59:39+00:00,17619437.0,"203 days, 22:17:17","[{'comment_id': 477006809, 'comment_body': 'all errors have to be printed on stderr', 'comment_created': datetime.datetime(2020, 8, 26, 3, 12, 4, tzinfo=datetime.timezone.utc), 'commenter': 'avagin', 'type': 'User'}, {'comment_id': 477008479, 'comment_body': 'need to remove this empty line', 'comment_created': datetime.datetime(2020, 8, 26, 3, 18, 30, tzinfo=datetime.timezone.utc), 'commenter': 'avagin', 'type': 'User'}, {'comment_id': 477008532, 'comment_body': 'what does this function do?', 'comment_created': datetime.datetime(2020, 8, 26, 3, 18, 45, tzinfo=datetime.timezone.utc), 'commenter': 'avagin', 'type': 'User'}, {'comment_id': 477009025, 'comment_body': 'all errors have to be printed on stderr, but I think you need to return error from this function so that the caller can handle it.\r\n', 'comment_created': datetime.datetime(2020, 8, 26, 3, 20, 26, tzinfo=datetime.timezone.utc), 'commenter': 'avagin', 'type': 'User'}, {'comment_id': 477011074, 'comment_body': 'it has to exit with a non-zero code if it failed to write into the file. ', 'comment_created': datetime.datetime(2020, 8, 26, 3, 27, 56, tzinfo=datetime.timezone.utc), 'commenter': 'avagin', 'type': 'User'}, {'comment_id': 477113938, 'comment_body': 'this is the show function basically decodes with nopl option. similar to the python version. ', 'comment_created': datetime.datetime(2020, 8, 26, 8, 8, 33, tzinfo=datetime.timezone.utc), 'commenter': 'mm-git01', 'type': 'User'}, {'comment_id': 477541998, 'comment_body': 'Fixed that. In some places i had to skip the exit on error. Example : [L233](https://github.com/Pac23/go-criu/blob/59082e70b35a0b2d295de9a7435fbc735d0a4d31/crit-go/images/handle.go#L233) jsonpb complains about the extra data not being a field in the protobinding but will output the .img file without any further errors. So Exit had to be avoided in all the dump functions of the extra handlers. Also if its too much of a weird error then at the next step it will exit anyways. ', 'comment_created': datetime.datetime(2020, 8, 26, 19, 35, 17, tzinfo=datetime.timezone.utc), 'commenter': 'mm-git01', 'type': 'User'}, {'comment_id': 477543138, 'comment_body': 'Resolved. :+1: ', 'comment_created': datetime.datetime(2020, 8, 26, 19, 37, 28, tzinfo=datetime.timezone.utc), 'commenter': 'mm-git01', 'type': 'User'}, {'comment_id': 477543265, 'comment_body': 'Resolved in the other branch pr.', 'comment_created': datetime.datetime(2020, 8, 26, 19, 37, 41, tzinfo=datetime.timezone.utc), 'commenter': 'mm-git01', 'type': 'User'}, {'comment_id': 477543416, 'comment_body': 'Resolved. ', 'comment_created': datetime.datetime(2020, 8, 26, 19, 37, 59, tzinfo=datetime.timezone.utc), 'commenter': 'mm-git01', 'type': 'User'}, {'comment_id': 478123297, 'comment_body': 'All errors have to be printed on stderr', 'comment_created': datetime.datetime(2020, 8, 27, 5, 4, 49, tzinfo=datetime.timezone.utc), 'commenter': 'avagin', 'type': 'User'}, {'comment_id': 478123702, 'comment_body': ""I don't understand how you resolved it. The code is the same."", 'comment_created': datetime.datetime(2020, 8, 27, 5, 5, 19, tzinfo=datetime.timezone.utc), 'commenter': 'avagin', 'type': 'User'}, {'comment_id': 478134946, 'comment_body': 'just missed this file,other files were fixed. ', 'comment_created': datetime.datetime(2020, 8, 27, 5, 23, 20, tzinfo=datetime.timezone.utc), 'commenter': 'mm-git01', 'type': 'User'}, {'comment_id': 478135186, 'comment_body': 'Resolved. ', 'comment_created': datetime.datetime(2020, 8, 27, 5, 23, 40, tzinfo=datetime.timezone.utc), 'commenter': 'mm-git01', 'type': 'User'}, {'comment_id': 478592219, 'comment_body': ""This error message will be non-informative. It will not say what operations triggers an error. I don't like these checkfile and Check functions, this isn't go-style."", 'comment_created': datetime.datetime(2020, 8, 27, 17, 47, 53, tzinfo=datetime.timezone.utc), 'commenter': 'avagin', 'type': 'User'}, {'comment_id': 478593074, 'comment_body': 'all errors and debug messages have to be printed on stderr. I would recomend to use one of logging libraries instead of using fmt.Println.', 'comment_created': datetime.datetime(2020, 8, 27, 17, 49, 10, tzinfo=datetime.timezone.utc), 'commenter': 'avagin', 'type': 'User'}, {'comment_id': 478593227, 'comment_body': 'stderr', 'comment_created': datetime.datetime(2020, 8, 27, 17, 49, 25, tzinfo=datetime.timezone.utc), 'commenter': 'avagin', 'type': 'User'}, {'comment_id': 478652568, 'comment_body': 'had fixed this with fmt.Fprint on the other branch but will move keep the cli fixes on this branch itself as they are easier to track. I will refactor the rest of the code of this branch  aswell to use a logger instead of Fprint to stderr. is there a recommended logging library that criu specifically uses or can i use any popular logging lib like logrus ?  ', 'comment_created': datetime.datetime(2020, 8, 27, 19, 41, 1, tzinfo=datetime.timezone.utc), 'commenter': 'mm-git01', 'type': 'User'}, {'comment_id': 478658371, 'comment_body': 'okay, i will remove this. ', 'comment_created': datetime.datetime(2020, 8, 27, 19, 51, 59, tzinfo=datetime.timezone.utc), 'commenter': 'mm-git01', 'type': 'User'}, {'comment_id': 478726945, 'comment_body': 'we can have a map of handlers and the code will looks like this:\r\nhandler, ok := handlers[m];\r\nif !ok {\r\n  \t\thandler := &entry_handler{}\r\n}\r\nhandler.m = m\r\nimage[""entries""] = handler.Load(f, pretty, nopl)', 'comment_created': datetime.datetime(2020, 8, 27, 22, 19, 8, tzinfo=datetime.timezone.utc), 'commenter': 'avagin', 'type': 'User'}, {'comment_id': 478727515, 'comment_body': 'you need to resolve it here. Each patch have to be clean to be merge.', 'comment_created': datetime.datetime(2020, 8, 27, 22, 20, 34, tzinfo=datetime.timezone.utc), 'commenter': 'avagin', 'type': 'User'}, {'comment_id': 479140487, 'comment_body': 'i would prefer a map aswell due to performance but then this will require type assertion for the struct methods like load etc to work which basically circles back to a type switch since we have bunch of different structs with methods(aka handlers). At the start of the project i tried a bunch of these thing,the current code seems to be the simplest and easiest approach. ', 'comment_created': datetime.datetime(2020, 8, 28, 11, 10, 9, tzinfo=datetime.timezone.utc), 'commenter': 'mm-git01', 'type': 'User'}, {'comment_id': 481199948, 'comment_body': 'Resolved with logging', 'comment_created': datetime.datetime(2020, 9, 1, 14, 54, 46, tzinfo=datetime.timezone.utc), 'commenter': 'mm-git01', 'type': 'User'}, {'comment_id': 481200163, 'comment_body': 'refactored to use logging', 'comment_created': datetime.datetime(2020, 9, 1, 14, 55, tzinfo=datetime.timezone.utc), 'commenter': 'mm-git01', 'type': 'User'}, {'comment_id': 481200383, 'comment_body': 'i have removed these functions replacing them with logging', 'comment_created': datetime.datetime(2020, 9, 1, 14, 55, 17, tzinfo=datetime.timezone.utc), 'commenter': 'mm-git01', 'type': 'User'}]","[{'commit_sha': '37bc3b0a58f3c373cfddb7a36580f332f408ee2c', 'committer_username': 'mm-git01', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2015, 2, 17, 17, 35, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '94cfd3f623e3649095f9efa1b732d8f2a7d68785', 'committer_username': 'mm-git01', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2015, 2, 17, 17, 35, 8, tzinfo=datetime.timezone.utc)}]",,11048203,,User,,63,,33,33

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
152456668,go-criu,checkpoint-restore/go-criu,Go,43,159,10,15,361,2,1,0,"[{'id': 474586072, 'number': 30, 'closed': datetime.datetime(2021, 3, 17, 12, 1, 43, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 27, 9, 54, 1, tzinfo=datetime.timezone.utc), 'time_taken': 17460462.0, 'time_delta': '202 days, 2:07:42', 'additions': 17788, 'deletions': 0, 'state': 'closed'}, {'id': 474069906, 'number': 29, 'closed': datetime.datetime(2020, 9, 16, 13, 24, 45, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 26, 18, 8, 43, tzinfo=datetime.timezone.utc), 'time_taken': 1797362.0, 'time_delta': '20 days, 19:16:02', 'additions': 4, 'deletions': 4, 'state': 'closed'}, {'id': 473213165, 'number': 28, 'closed': datetime.datetime(2021, 3, 17, 11, 59, 39, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 25, 13, 42, 22, tzinfo=datetime.timezone.utc), 'time_taken': 17619437.0, 'time_delta': '203 days, 22:17:17', 'additions': 3583, 'deletions': 2, 'state': 'closed'}, {'id': 420900379, 'number': 26, 'closed': datetime.datetime(2020, 5, 26, 12, 21, 43, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 5, 20, 17, 17, 58, tzinfo=datetime.timezone.utc), 'time_taken': 500625.0, 'time_delta': '5 days, 19:03:45', 'additions': 6, 'deletions': 0, 'state': 'closed'}, {'id': 416867931, 'number': 22, 'closed': datetime.datetime(2020, 5, 12, 18, 15, 28, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 5, 12, 17, 31, 5, tzinfo=datetime.timezone.utc), 'time_taken': 2663.0, 'time_delta': '0:44:23', 'additions': 3, 'deletions': 3, 'state': 'closed'}, {'id': 416751264, 'number': 21, 'closed': datetime.datetime(2020, 5, 26, 12, 21, 42, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 5, 12, 14, 9, 20, tzinfo=datetime.timezone.utc), 'time_taken': 1203142.0, 'time_delta': '13 days, 22:12:22', 'additions': 161, 'deletions': 0, 'state': 'closed'}, {'id': 393739607, 'number': 11, 'closed': datetime.datetime(2021, 3, 17, 11, 59, 51, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 3, 25, 17, 58, 26, tzinfo=datetime.timezone.utc), 'time_taken': 30823285.0, 'time_delta': '356 days, 18:01:25', 'additions': 300, 'deletions': 0, 'state': 'closed'}]"
