pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
1220386619,stream_settings: Add an option to make a stream default for new users in stream creation and editing UIs.,"<!-- Describe your pull request here.-->
To add or remove a stream as default for new users the admin has to navigate to a separate menu. To address this, added a [checkbox] Default stream for new users in the stream creation and editing UIs.

We prevent users from creating an incompatible configuration in both the stream creation and stream edition UIs.

For the front-end (stream_ui_updates.js > `update_default_stream_and_stream_privacy_state`):

- If the private stream option is selected, the default stream option is disabled with a tooltip that states, 'Private streams cannot be default streams for new users.'

- If the default stream option is checked, the private stream options are disabled with a tooltip that states, 'Default streams for new users cannot be made private.'

For the back-end (streams.py > `update_stream_backend`):

| Stream | Parameters | Result / Error message |
| ------------- | ------------- | ------------- |
| default | `is_private:True` | Error / 'Default streams cannot be made private.' |
| private | `is_default_stream:True` | Error / 'Private streams cannot be made default.' |
| any | `is_private:True`, `is_default_stream:True` | Error / 'A stream cannot be both a default stream for new users and private.' |
| any | `is_private:True`, `is_default_stream:False` | Success |
| any | `is_private:False`, `is_default_stream:True` | Success |

**Fixes:** #24048<!-- Issue link, or clear description.-->

**Screenshots:**

<details>
<summary>Tooltip: Private stream options are disabled</summary>

![image](https://github.com/zulip/zulip/assets/87542880/9d1e8d23-89ec-4615-9324-c05b48f9cbf6)

</details>

<details>
<summary>Tooltip: Default stream checkbox is disabled</summary>

![image](https://github.com/zulip/zulip/assets/87542880/0623f8d2-83d3-436b-a879-78c758d2e1bf)

</details>

<details>
<summary>Stream editing UI</summary>

![image](https://github.com/zulip/zulip/assets/87542880/ba1b4de2-8340-4117-89c1-1a625c380c79)

</details>

<details>
<summary>Stream creation UI</summary>

![image](https://github.com/zulip/zulip/assets/87542880/edd21601-dedb-49dc-b465-94b28a6c2900)

</details>

<details>
<summary>Self-review checklist</summary>

<!-- Prior to submitting a PR, follow our step-by-step guide to review your own code:
https://zulip.readthedocs.io/en/latest/contributing/code-reviewing.html#how-to-review-code -->

<!-- Once you create the PR, check off all the steps below that you have completed.
If any of these steps are not relevant or you have not completed, leave them unchecked.-->

- [x] [Self-reviewed](https://zulip.readthedocs.io/en/latest/contributing/code-reviewing.html#how-to-review-code) the changes for clarity and maintainability
      (variable names, code reuse, readability, etc.).

Communicate decisions, questions, and potential concerns.

- [x] Explains differences from previous plans (e.g., issue description).
- [x] Highlights technical choices and bugs encountered.
- [x] Calls out remaining decisions and concerns.
- [x] Automated tests verify logic where appropriate.

Individual commits are ready for review (see [commit discipline](https://zulip.readthedocs.io/en/latest/contributing/commit-discipline.html)).

- [x] Each commit is a coherent idea.
- [x] Commit message(s) explain reasoning and motivation for changes.

Completed manual review and testing of the following:

- [x] Visual appearance of the changes.
- [x] Responsiveness and internationalization.
- [x] Strings and tooltips.
- [x] End-to-end functionality of buttons, interactions and flows.
- [x] Corner cases, error conditions, and easily imagined bugs.
</details>
",True,24216,https://api.github.com/repos/zulip/zulip/pulls/24216,https://github.com/zulip/zulip/pull/24216,closed,306,16,17,2,27,64,4,0,"[{'name': 'size: XL'}, {'name': 'integration review'}, {'name': 'product review'}, {'name': 'priority integration review'}]",2023-01-28 20:09:24+00:00,2023-08-09 22:23:52+00:00,16683268.0,"193 days, 2:14:28","[{'comment_id': 1109886655, 'comment_body': 'Why this event is modified? We already pass all default streams.', 'comment_created': datetime.datetime(2023, 2, 17, 14, 27, 5, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1109894250, 'comment_body': 'You need to add `**Changes**` entry here as mentioned in last point [here](https://zulip.readthedocs.io/en/latest/documentation/api.html#step-by-step-guide).', 'comment_created': datetime.datetime(2023, 2, 17, 14, 32, 32, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1109898339, 'comment_body': 'I see you have added this to update the stream settings UI. I think this can be completely handled in the UI only without any change in the event object. You can just check whether the stream opened in the stream settings UI is present in the default streams list already passed in this event, and then update the checkbox state accordingly.', 'comment_created': datetime.datetime(2023, 2, 17, 14, 35, 33, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1109899474, 'comment_body': 'If we actually need this change, this should be done in a separate commit.', 'comment_created': datetime.datetime(2023, 2, 17, 14, 36, 23, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1109907344, 'comment_body': 'We might want to change this in future to use `bulk_create` rather than using a loop.', 'comment_created': datetime.datetime(2023, 2, 17, 14, 41, 58, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1109917724, 'comment_body': '""default checkbox"" -> ""default stream checkbox""', 'comment_created': datetime.datetime(2023, 2, 17, 14, 49, 24, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1109918747, 'comment_body': 'We can have a better name here. Something like `update_setting_state_based_on_stream_privacy`.', 'comment_created': datetime.datetime(2023, 2, 17, 14, 50, 8, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1109925969, 'comment_body': 'This should be done for all the API changes.', 'comment_created': datetime.datetime(2023, 2, 17, 14, 55, 11, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1111050367, 'comment_body': 'Made this change since we were using `announce_stream_` everywhere else. Reverting it since not mandatory.', 'comment_created': datetime.datetime(2023, 2, 18, 15, 30, 32, tzinfo=datetime.timezone.utc), 'commenter': 'HemantUmre12', 'type': 'User'}, {'comment_id': 1111103528, 'comment_body': 'Please! update me if we want this change.', 'comment_created': datetime.datetime(2023, 2, 18, 19, 49, 10, tzinfo=datetime.timezone.utc), 'commenter': 'HemantUmre12', 'type': 'User'}, {'comment_id': 1111728439, 'comment_body': 'Can we use already existing `settings_checkbox` or `stream_settings_checkbox` template here?', 'comment_created': datetime.datetime(2023, 2, 20, 10, 4, 20, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1111732275, 'comment_body': '`paramter which determines`', 'comment_created': datetime.datetime(2023, 2, 20, 10, 7, 47, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1111734708, 'comment_body': '`$(""#default-stream"")` should be good enough, since IDs are anyways unique to an element. And at a time only one of stream creation or stream edit UI can be opened.', 'comment_created': datetime.datetime(2023, 2, 20, 10, 10, 1, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1111735345, 'comment_body': 'Same as above comment,', 'comment_created': datetime.datetime(2023, 2, 20, 10, 10, 34, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1111739829, 'comment_body': 'We would need feedback from others on this and can be done as a follow-up in a separate PR too.\r\nWe can wait till Tim reviews this PR. ', 'comment_created': datetime.datetime(2023, 2, 20, 10, 14, 38, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1111744020, 'comment_body': 'We would also need to add code to raise error if someone tries to create a private stream and sets it as default.', 'comment_created': datetime.datetime(2023, 2, 20, 10, 18, 19, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1111746555, 'comment_body': 'We should show this element only when editing a stream in this commit and then update it to be shown for both stream creation and edit UI in the next commit. This will be helpful in the case when only first commit is merged and then the second is merged after some time.', 'comment_created': datetime.datetime(2023, 2, 20, 10, 20, 38, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1117641584, 'comment_body': 'We can use the `settings_checkbox` template but need to add the id to the container to style and hide the element. Updated the PR for the same. ', 'comment_created': datetime.datetime(2023, 2, 24, 21, 0, 46, tzinfo=datetime.timezone.utc), 'commenter': 'HemantUmre12', 'type': 'User'}, {'comment_id': 1117691031, 'comment_body': 'I\'ve tried making this change but it\'s causing the same kind of bug as #24238. After switching from stream editing UI to stream creation UI using the `$(""#default-stream"")` selector checkbox of stream editing UI is being selected. At a time, only one stream creation or stream edit UI is displayed and the other is hidden. But I think we can still access the hidden elements. \r\n\r\nhttps://user-images.githubusercontent.com/87542880/221297785-df2838b0-1f54-4425-96f1-3c6d777eef17.mp4\r\n\r\n', 'comment_created': datetime.datetime(2023, 2, 24, 21, 37, 41, tzinfo=datetime.timezone.utc), 'commenter': 'HemantUmre12', 'type': 'User'}, {'comment_id': 1117723058, 'comment_body': 'Added a property `show_default_stream_checkbox` to only display this option in stream editing UI in the first commit. Removed it in the second commit.', 'comment_created': datetime.datetime(2023, 2, 24, 22, 5, 30, tzinfo=datetime.timezone.utc), 'commenter': 'HemantUmre12', 'type': 'User'}, {'comment_id': 1121270556, 'comment_body': 'Can we use `stream_settings_checkbox` here?', 'comment_created': datetime.datetime(2023, 3, 1, 7, 31, 43, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1121276073, 'comment_body': 'You can use `is_stream_edit` variable here instead of adding this new variable.', 'comment_created': datetime.datetime(2023, 3, 1, 7, 37, 3, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1121292769, 'comment_body': 'I think we should have this check in `list_to_streams` before actually creating the stream. Otherwise we will just have a private stream without any subscribers which are added after this check here.', 'comment_created': datetime.datetime(2023, 3, 1, 7, 51, 8, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1124552569, 'comment_body': 'I don\'t think we can.\r\n\r\nWe have the following requirements(used in various functions) for [label > input] -\r\n\r\n- `id = ""id_is_default_stream""`(id_{setting_name}). \r\n- `class = ""prop-element""`. \r\n- `data-setting-widget-type=""boolean""`.\r\n\r\nWe can add class and data but can\'t get the desired id.\r\n\r\n_from stream_settings_checkbox.hbs_\r\n```\r\n    <label class=""checkbox"">\r\n        <input id=""{{setting_name}}_{{stream_id}}"" name=""{{setting_name}}""\r\n          class=""sub_setting_control"" type=""checkbox""\r\n          {{#if is_checked}}checked{{/if}}\r\n          {{#if is_disabled}}disabled=""disabled""{{/if}} />\r\n        <span></span>\r\n    </label>\r\n```\r\n', 'comment_created': datetime.datetime(2023, 3, 3, 14, 43, 37, tzinfo=datetime.timezone.utc), 'commenter': 'HemantUmre12', 'type': 'User'}, {'comment_id': 1129752232, 'comment_body': 'Ok, I think we can keep `settings_checkbox` for now to avoid complexity with save-discard widget code.', 'comment_created': datetime.datetime(2023, 3, 8, 16, 49, 15, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1129753587, 'comment_body': 'Do we actually need this container ID? I think we can avoid adding this now ', 'comment_created': datetime.datetime(2023, 3, 8, 16, 50, 12, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1129774432, 'comment_body': 'You can instead use `$(""#stream_creation_form .is_default_stream"").prop(""checked"")` here.', 'comment_created': datetime.datetime(2023, 3, 8, 17, 3, 47, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1129846705, 'comment_body': 'I am not sure what is the correct way to do this. For all other properties we pass them in `stream_dicts`, but `is_default_stream` is different as it is not a field in `Stream` object. We can include it in `stream_dicts` for consistency though. Will leave this as it is for now and can take feedback from Tim when he reviews.', 'comment_created': datetime.datetime(2023, 3, 8, 18, 3, 2, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1135419752, 'comment_body': 'We still need the container ID for styling. \r\n\r\n![image](https://user-images.githubusercontent.com/87542880/224990501-254a0218-911c-4157-b79f-acb0407acb38.png)\r\n\r\n\r\nWe can add a wrapper if we do not want changes to  `settings_checkbox.hbs` template.\r\n\r\n````\r\n<div id=""default-stream"">\r\n    {{> ../settings/settings_checkbox\r\n      prefix=""id_""\r\n      setting_name=""is_default_stream""\r\n      is_checked=check_default_stream\r\n      label=""Default stream for new users""\r\n      help_link=""/help/set-default-streams-for-new-users""\r\n      }}\r\n</div>\r\n````\r\n\r\n I have updated the code for the same.', 'comment_created': datetime.datetime(2023, 3, 14, 11, 47, 13, tzinfo=datetime.timezone.utc), 'commenter': 'HemantUmre12', 'type': 'User'}, {'comment_id': 1135470245, 'comment_body': 'Because the `announce-new-stream` checkbox uses the same margin, we used 25px for consistency.', 'comment_created': datetime.datetime(2023, 3, 14, 12, 31, 45, tzinfo=datetime.timezone.utc), 'commenter': 'HemantUmre12', 'type': 'User'}, {'comment_id': 1136972255, 'comment_body': 'I think you accidentally marked this as resolved without making changes.', 'comment_created': datetime.datetime(2023, 3, 15, 12, 22, 51, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1136977690, 'comment_body': 'It seems odd to use two selectors even when using ID, since IDs are meant to be unique. Would be better if you could use a class instead of ID for this wrapper div and not have any ID for that element.', 'comment_created': datetime.datetime(2023, 3, 15, 12, 27, 2, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1136981811, 'comment_body': 'Ok, we can keep this as it is for now. I am not sure about whether we want 25px margin here or not, so can be updated later if required.\r\n\r\nOk, I posted one comment about using class instead of ID for this wrapper element.', 'comment_created': datetime.datetime(2023, 3, 15, 12, 30, 8, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1139967707, 'comment_body': 'Ah! I must have missed it. This change has now been made.', 'comment_created': datetime.datetime(2023, 3, 17, 9, 5, 32, tzinfo=datetime.timezone.utc), 'commenter': 'HemantUmre12', 'type': 'User'}, {'comment_id': 1176036060, 'comment_body': ""@HemantUmre12 generally it's best to leave comments like this left unresolved for the reviewer (in this case @sahil839 to mark as resolved once they are satisfied)."", 'comment_created': datetime.datetime(2023, 4, 25, 5, 55, 20, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1189969220, 'comment_body': 'This condition is not correct. I can currently set a default stream as private.', 'comment_created': datetime.datetime(2023, 5, 10, 14, 8, 5, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1189969615, 'comment_body': 'Not sure how I missed this before.', 'comment_created': datetime.datetime(2023, 5, 10, 14, 8, 18, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1189993017, 'comment_body': 'We have a similar function in `stream_create.js`. Can we have a single function to handle both? I think it can be done by passing the container element and `is_stream_edit` variable as parameters to the function.', 'comment_created': datetime.datetime(2023, 5, 10, 14, 24, 50, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1189998283, 'comment_body': 'You might also need to add tests for checking case of passing `is_default_stream: True` and `is_private: True`.', 'comment_created': datetime.datetime(2023, 5, 10, 14, 28, 34, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1198597437, 'comment_body': ""That's on me. I think I made these changes in the last update. I wanted to handle some cases, but the execution was poor. The code has been updated to handle the following cases: \r\n\r\n| Stream | Parameters | Result |\r\n| ------------- | ------------- | ------------- |\r\n| default | `is_private:True` | Error |\r\n| private | `is_default_stream:True` | Error |\r\n| any | `is_private:True`, `is_default_stream:True` | Error |\r\n| any | `is_private:True`, `is_default_stream:False` | Success |\r\n| any | `is_private:False`, `is_default_stream:True` | Success |\r\n\r\nI have added a couple of test cases for them as well."", 'comment_created': datetime.datetime(2023, 5, 19, 6, 35, 10, tzinfo=datetime.timezone.utc), 'commenter': 'HemantUmre12', 'type': 'User'}, {'comment_id': 1198608564, 'comment_body': 'In the stream editing UI, we disable the `default stream` checkbox when the user switches to a `private` stream. Therefore, when the user switches back to a `public` stream without saving the changes, should the checkbox retain its previous value, similar to the `announce stream` or `is_default_stream` value of the stream?\r\n\r\nCurrently, the code supports the former behavior.', 'comment_created': datetime.datetime(2023, 5, 19, 6, 51, 15, tzinfo=datetime.timezone.utc), 'commenter': 'HemantUmre12', 'type': 'User'}, {'comment_id': 1199944379, 'comment_body': 'I am not sure whether we just do not want the user to allow changing it to ""private"" stream if the stream is default unless the user does not mark the stream to not be default. @alya thoughts?', 'comment_created': datetime.datetime(2023, 5, 22, 4, 33, 29, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1199949900, 'comment_body': 'I think we can move this logic to set `proposed_is_default_stream` outside this if-block for better readability. And then have a different block to decide the error message. ', 'comment_created': datetime.datetime(2023, 5, 22, 4, 48, 6, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1199951347, 'comment_body': 'I am also not sure what error message to show when stream was neither default nor private initailly and the user passes both `is_private` and `is_default_stream` as `True` in the request.', 'comment_created': datetime.datetime(2023, 5, 22, 4, 50, 21, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1203221817, 'comment_body': 'Yeah, I guess we should prevent the user from creating an incompatible configuration. So for both stream creation and stream editing, we can:\r\n\r\n- disable the private stream options if the default stream option is checked\r\n- disable the default stream option if a private stream option is selected\r\n\r\nAnd in both types of cases, we can show a tooltip:\r\n\r\n> Private streams cannot be default streams.\r\n\r\nI think that will be a nicer experience than showing an error after you try to make the changes, which is what we do now:\r\n\r\n![Screen Shot 2023-05-23 at 5 32 04 PM](https://github.com/zulip/zulip/assets/2090066/d5a6ff74-79b4-4c9d-a49e-183c4e37aed0)\r\n\r\n\r\n', 'comment_created': datetime.datetime(2023, 5, 24, 0, 34, 55, tzinfo=datetime.timezone.utc), 'commenter': 'alya', 'type': 'User'}, {'comment_id': 1231256333, 'comment_body': ""For now, if the user passes `is_private: True` and `is_default_stream: True`, the error message will be 'A stream cannot be both a default stream for new users and private.'"", 'comment_created': datetime.datetime(2023, 6, 15, 16, 17, 4, tzinfo=datetime.timezone.utc), 'commenter': 'HemantUmre12', 'type': 'User'}, {'comment_id': 1231264416, 'comment_body': ""I've updated the PR (stream_ui_updates.js > `update_default_stream_and_stream_privacy_state`) to address these changes. Please refer to the PR description for more details and screenshots."", 'comment_created': datetime.datetime(2023, 6, 15, 16, 22, 37, tzinfo=datetime.timezone.utc), 'commenter': 'HemantUmre12', 'type': 'User'}, {'comment_id': 1231858318, 'comment_body': '`is_stream_creation` would probably be better variable name here.', 'comment_created': datetime.datetime(2023, 6, 16, 6, 59, 27, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1231934286, 'comment_body': 'I think a cleaner and more readable way to do this would be to just find inputs using `input[value=\'....\']` and then using `closest(""label"")` below to add the class to label elements for tooltips.', 'comment_created': datetime.datetime(2023, 6, 16, 8, 13, 40, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1231995206, 'comment_body': 'It feels odd to use IDs in "".find"" since IDs are unique and we can instead use them directly. But I guess ID is not used because there are two of them here - one for stream creation and one for stream edit. I think would be better to instead use the class here.', 'comment_created': datetime.datetime(2023, 6, 16, 9, 10, 42, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1232012188, 'comment_body': 'I think we can restructure this code in a better way. We can perhaps have a condtion like `if proposed_is_private and proposed_is_default_stream` as the outer if block condition and then condition for these 3 messages inside it. This will lead to grouping of the errors for the case that stream cannot be private and default at the same time. \r\n\r\nI am not sure what would be more readable, your thoughts on this?', 'comment_created': datetime.datetime(2023, 6, 16, 9, 26, 27, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1233586027, 'comment_body': ""I think that's an improvement. I was thinking of writing them in if-else blocks to group these conditions, but this is better."", 'comment_created': datetime.datetime(2023, 6, 19, 6, 35, 9, tzinfo=datetime.timezone.utc), 'commenter': 'HemantUmre12', 'type': 'User'}, {'comment_id': 1265900348, 'comment_body': 'I think we don\'t need the three different error messages; we can just have it be ""A default stream cannot be private."" for all cases here. (This will save unnecessary work for translators)', 'comment_created': datetime.datetime(2023, 7, 17, 21, 2, 26, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1265901428, 'comment_body': 'We can add ""Previously, default stream status could only be changed using the [dedicated API endpoint](/api/add-default-stream).`', 'comment_created': datetime.datetime(2023, 7, 17, 21, 3, 45, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1265902629, 'comment_body': ""This selector doesn't seem specific to this particular element; I worry this tooltip will apply to other disabled setting tooltips. You need a more precise selector for both this and the next one."", 'comment_created': datetime.datetime(2023, 7, 17, 21, 5, 12, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1265904186, 'comment_body': ""These selectors seem like they'll apply to any radio input in this container; this is a very unsafe way to code it.\r\n\r\nPlease use selectors that clearly target only the target element.\r\n\r\n(I also wonder if there's an existing function that could read the value of this input without so much hand-coding in this file. Maybe `get_request_data_for_stream_privacy` or something?)"", 'comment_created': datetime.datetime(2023, 7, 17, 21, 7, 13, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1265907566, 'comment_body': ""Yes, this refactor would be a good idea. I think it's OK to do it in a separate prep or follow-up PR."", 'comment_created': datetime.datetime(2023, 7, 17, 21, 10, 17, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1265908751, 'comment_body': 'We also need a permissions check for whether the current user has permission to edit the set of default streams, both here and in the other code path. As written, anyone who can create a stream can make it one of the default streams for new users, which would be a significant security bug.', 'comment_created': datetime.datetime(2023, 7, 17, 21, 11, 52, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1271301278, 'comment_body': 'I think the only check we need is whether the user is an `admin`, and I have added that check here. The other code path already have this check. The error message is `Insufficient permission`, just like the other error messages here. Let me know if we want a more detailed error message.', 'comment_created': datetime.datetime(2023, 7, 22, 14, 8, 49, tzinfo=datetime.timezone.utc), 'commenter': 'HemantUmre12', 'type': 'User'}, {'comment_id': 1271302637, 'comment_body': 'I think the selectors are specific to private stream inputs only.\r\n\r\nI checked, and there is already a function called `update_private_stream_privacy_option_state` available. I made changes to it instead, accordingly.', 'comment_created': datetime.datetime(2023, 7, 22, 14, 23, 11, tzinfo=datetime.timezone.utc), 'commenter': 'HemantUmre12', 'type': 'User'}, {'comment_id': 1271311175, 'comment_body': 'The way to make selector here more specific is using `input[value=...]`. Instead, I used a different class to target the specific elements.', 'comment_created': datetime.datetime(2023, 7, 22, 15, 42, 16, tzinfo=datetime.timezone.utc), 'commenter': 'HemantUmre12', 'type': 'User'}, {'comment_id': 1287596590, 'comment_body': 'Yeah, adding a new class is the way to go, thanks.', 'comment_created': datetime.datetime(2023, 8, 8, 19, 36, 46, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1287599233, 'comment_body': '> I think the selectors are specific to private stream inputs only.\r\n\r\nNo, as written this will apply to any input whose value is `2` or whatever the value of that `.code` is.', 'comment_created': datetime.datetime(2023, 8, 8, 19, 37, 36, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1289271714, 'comment_body': 'That works, thanks!', 'comment_created': datetime.datetime(2023, 8, 9, 22, 22, 40, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}]","[{'commit_sha': 'a81715786c5fdfb031d9372d822ecfa633051064', 'committer_username': 'HemantUmre12', 'committer_name': 'Hemant Umre', 'committer_email': None, 'commit_date': datetime.datetime(2021, 7, 16, 17, 44, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': '63173ce1bc783be5eeb8416b2e5d10dadf669f82', 'committer_username': 'HemantUmre12', 'committer_name': 'Hemant Umre', 'committer_email': None, 'commit_date': datetime.datetime(2021, 7, 16, 17, 44, 47, tzinfo=datetime.timezone.utc)}]",Hemant Umre,87542880,,User,,42,,0,6
1281256268,Add settings for restricting direct messages.,"<!-- Describe your pull request here.-->

Preparatory commits for #24467 -

First Commit:
- Adds the direct_message_initiator_group and direct_message_permission_group fields to the Realm model.
- Sets default values for these settings after creating a Realm object.
- Enables the modification of these settings through the API.

Second Commit:
- Adds a dropdown-list-widget for the newly added direct message settings.

Fixes a part of #24467.

<!-- If the PR makes UI changes, always include one or more still screenshots to demonstrate your changes. If it seems helpful, add a screen capture of the new functionality as well.

Tooling tips: https://zulip.readthedocs.io/en/latest/tutorials/screenshot-and-gif-software.html
-->

<details>
<summary>Screenshots and screen captures</summary>

![Screenshot 2023-05-15 174534](https://github.com/zulip/zulip/assets/87542880/6fb709ec-55b4-43c3-bcd1-f980720956a2)

![Screenshot 2023-05-15 174612](https://github.com/zulip/zulip/assets/87542880/2907b499-3a4d-40d6-b638-31fedca48dc1)

</details>

<details>
<summary>Self-review checklist</summary>

<!-- Prior to submitting a PR, follow our step-by-step guide to review your own code:
https://zulip.readthedocs.io/en/latest/contributing/code-reviewing.html#how-to-review-code -->

<!-- Once you create the PR, check off all the steps below that you have completed.
If any of these steps are not relevant or you have not completed, leave them unchecked.-->

- [x] [Self-reviewed](https://zulip.readthedocs.io/en/latest/contributing/code-reviewing.html#how-to-review-code) the changes for clarity and maintainability
      (variable names, code reuse, readability, etc.).

Communicate decisions, questions, and potential concerns.

- [x] Explains differences from previous plans (e.g., issue description).
- [x] Highlights technical choices and bugs encountered.
- [x] Calls out remaining decisions and concerns.
- [x] Automated tests verify logic where appropriate.

Individual commits are ready for review (see [commit discipline](https://zulip.readthedocs.io/en/latest/contributing/commit-discipline.html)).

- [x] Each commit is a coherent idea.
- [x] Commit message(s) explain reasoning and motivation for changes.

Completed manual review and testing of the following:

- [x] Visual appearance of the changes.
- [x] Responsiveness and internationalization.
- [x] Strings and tooltips.
- [x] End-to-end functionality of buttons, interactions and flows.
- [x] Corner cases, error conditions, and easily imagined bugs.
</details>
",False,24762,https://api.github.com/repos/zulip/zulip/pulls/24762,https://github.com/zulip/zulip/pull/24762,closed,407,24,17,2,4,30,3,0,"[{'name': 'size: XL'}, {'name': 'has conflicts'}, {'name': 'post release'}]",2023-03-18 19:01:36+00:00,2023-09-23 15:27:44+00:00,16316768.0,"188 days, 20:26:08","[{'comment_id': 1153613904, 'comment_body': ""I think we want this to be replacing the existing `check_private_message_policy`, right?\r\n\r\n(How I'd usually do this is write an independently mergeable prep commit renaming the function as the first commit in the branch, and then have the main commit replace its implementation to use the new settings)"", 'comment_created': datetime.datetime(2023, 3, 30, 18, 7, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1153617219, 'comment_body': 'I think this check is wrong -- for ""initiator"", we need to query whether at least one message exists in the conversation, and if it does', 'comment_created': datetime.datetime(2023, 3, 30, 18, 9, 39, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1153617505, 'comment_body': 'Should the second parameter be called `recipient_users`?', 'comment_created': datetime.datetime(2023, 3, 30, 18, 9, 53, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1153620207, 'comment_body': '""atleast"" is not a word. But we probably want to rewrite the strings anyway; @alya perhaps you can draft error strings for us to use in this feature?', 'comment_created': datetime.datetime(2023, 3, 30, 18, 12, 4, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1153621007, 'comment_body': ""Can you just put this `AddField` operation in the previous commit? I'd prefer to not spend an extra migration ID without cause."", 'comment_created': datetime.datetime(2023, 3, 30, 18, 12, 54, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1153621506, 'comment_body': 'These checks should be spelled `if X is None:` in modern Python.', 'comment_created': datetime.datetime(2023, 3, 30, 18, 13, 30, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1153622216, 'comment_body': ""You're missing a newline at the end of the file; your editor configuration might have a bug, as usually editors ensure this never happens."", 'comment_created': datetime.datetime(2023, 3, 30, 18, 14, 16, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1153622873, 'comment_body': ""You can drop these hunks when rebasing, since we've added this properly now."", 'comment_created': datetime.datetime(2023, 3, 30, 18, 15, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1153623975, 'comment_body': ""What's the thinking behind the `-1` values here? I think it'd likely be better to just copy the value. Also `realm.direct_message_permission_group_id.id` isn't valid; you can do  `realm.direct_message_permission_group_id` or `realm.direct_message_permission_group.id`, though usually the former is better :)"", 'comment_created': datetime.datetime(2023, 3, 30, 18, 15, 55, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1153625832, 'comment_body': ""Rather than writing a custom function for just this pair of settings, please just extend `do_set_realm_property` to support these group IDs. You'll see it uses a bunch of clever techniques to avoid needing to write custom code for each individual setting."", 'comment_created': datetime.datetime(2023, 3, 30, 18, 17, 58, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1176026591, 'comment_body': ""This dict feels a little silly, if it's always going to be just appending `_id`. But maybe it's simpler to write this way than the alternative."", 'comment_created': datetime.datetime(2023, 4, 25, 5, 39, 8, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1193887345, 'comment_body': 'I am not sure about which `on_delete` option to use here. We previously used `on_delete=models.RESTRICT` for `can_remove_subscribers_group` ([here](https://github.com/zulip/zulip/pull/22589/commits/49d61d19f4cf20f6a940e98182c9308c407dff59)). However, using `RESTRICT` resulted in a test failure (test_do_change_realm_delete_clears_user_realm_cache (zerver.tests.test_realm.RealmTest)), where an error occurred while deleting a `Realm` instance (`realm.delete()`). This might be related to a cyclic dependence between the `Realm` and `UserGroup` models.\r\n\r\nCurrently, I have set `on_delete=models.SET_NULL`.', 'comment_created': datetime.datetime(2023, 5, 15, 14, 0, 15, tzinfo=datetime.timezone.utc), 'commenter': 'HemantUmre12', 'type': 'User'}, {'comment_id': 1193896201, 'comment_body': 'I wanted to use `UserGroup.EVERYONE_GROUP_NAME` but `UserGroup` model is not defined yet.', 'comment_created': datetime.datetime(2023, 5, 15, 14, 6, 41, tzinfo=datetime.timezone.utc), 'commenter': 'HemantUmre12', 'type': 'User'}, {'comment_id': 1194480477, 'comment_body': ""Yeah, I think `RESTRICT` is correct. We probably want to make the code path for deleting user groups check if the user group is used for any settings like this, and if so, do some nicer error message, such that this low-level constraint doesn't come up; started. But that decision shouldn't be a blocker for this PR, since we don't allow non-system groups anyway, and those can't be deleted.\r\n\r\nI'm not sure why that test would be failing; the definition of `RESTRICT` is meant to be that it allows deletion in the case that a `CASCADE` deletion is deleting both models; why don't you change it back to that way so it's easy to reproduce and debug the test failure?\r\n"", 'comment_created': datetime.datetime(2023, 5, 16, 0, 34, 31, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1194481576, 'comment_body': ""How did you test the changes in this file? It would be nice to make sure `zerver/tests/test_import_export.py` is verifying that the tables import properly; I'm not sure whether it already does; can you comment on that?\r\n"", 'comment_created': datetime.datetime(2023, 5, 16, 0, 37, 16, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1194481857, 'comment_body': ""This is fine for now. We may end up extracting these types to a separate object as we work on the system, but I don't see much risk in having this as written here."", 'comment_created': datetime.datetime(2023, 5, 16, 0, 37, 57, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1194482589, 'comment_body': ""Maybe we should all-caps this name, since that's our convention for data hanging off the class that is constant configuration, not a database field.\r\n\r\n@sahil839 thoughts? By that reasoning, we should possibly be renaming `property_types` to `PROPERTY_TYPES`, and similar; we definitely shouldn't do that in this PR."", 'comment_created': datetime.datetime(2023, 5, 16, 0, 39, 41, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1194483418, 'comment_body': 'We should spell this out more precisely. Maybe just add a second sentence: ""This policy prevents users who are not in this group from sending direct messages to a direct message recipient (individual or group) with which they have not previously exchanged messages"")\r\n\r\n(Also, please make sure the explanatory text for what the option does here is identical to the text for the parallel value in the `events` responses, above).', 'comment_created': datetime.datetime(2023, 5, 16, 0, 41, 35, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1194484569, 'comment_body': 'Let\'s spell this one out a bit more too, adding ""Direct messages can only been sent in direct message groups where at least one of the participating users is in this group. Setting this option to the Nobody system group will result in direct messages between users being disabled in the organization. Users can always send direct messages to themselves and to bots regardless of this setting.""', 'comment_created': datetime.datetime(2023, 5, 16, 0, 44, 29, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1194485372, 'comment_body': 'This is ugly code; I think you want something that explicitly removes `""_id""` if present at the end of the setting name; there\'s a number of reasonable Pythonic ways to do that. What you\'ve written behaves unexpectedly if a setting name is 2 characters long, and is also not readable.', 'comment_created': datetime.datetime(2023, 5, 16, 0, 46, 16, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1194486126, 'comment_body': ""Similar to the above, I don't think we ever want to write `[:-3]`. "", 'comment_created': datetime.datetime(2023, 5, 16, 0, 47, 44, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1194487010, 'comment_body': 'Given how much ""remove _id"" parsing you have elsewhere in this PR, I wonder if we should just provide two objects; `realm_permission_group_setting_fields` and `realm_permission_group_setting_id_fields`, with one constructed from the other by appending `_id` to the end of all the keys, so that code can access whichever is most convenient for it?', 'comment_created': datetime.datetime(2023, 5, 16, 0, 49, 57, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1194487287, 'comment_body': ""Could we write this as just `assert setting_id_name in req_vars`, since we don't expect the case where that doesn't happen to be possible?"", 'comment_created': datetime.datetime(2023, 5, 16, 0, 50, 42, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1194772915, 'comment_body': 'Yes, sounds good.', 'comment_created': datetime.datetime(2023, 5, 16, 8, 2, 44, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1194786949, 'comment_body': 'I guess the default for all settings would be system groups only. So would be better to just get all the system groups from database in single query and not in a loop.', 'comment_created': datetime.datetime(2023, 5, 16, 8, 14, 6, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1194787103, 'comment_body': 'I was thinking of adding `default_group_name` field in `GroupPermissionSetting` for this. I did this while working on #10970. @timabbott thoughts?', 'comment_created': datetime.datetime(2023, 5, 16, 8, 14, 14, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1194855440, 'comment_body': 'Would probably be better to have the group permission settings test separately. ', 'comment_created': datetime.datetime(2023, 5, 16, 9, 5, 47, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1194855910, 'comment_body': 'Here also we can have group permission setting tests separately.', 'comment_created': datetime.datetime(2023, 5, 16, 9, 6, 11, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1194894747, 'comment_body': 'Not sure if it is correct to include this in the `default` section since this is a special case where dropdown list widgets are used. We can probably update `set_input_element_value` and also `get_input_element_value` below, to handle the dropdown list widgets.', 'comment_created': datetime.datetime(2023, 5, 16, 9, 37, 25, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1194895669, 'comment_body': 'Although, we may have many settings coverted to dropdown list widgets later and we may probably need to change it to something else then where most of the settings are dropdown list widget.', 'comment_created': datetime.datetime(2023, 5, 16, 9, 38, 12, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}]","[{'commit_sha': 'abc8aeee8a68085f800d472b5ad990a98b6aab11', 'committer_username': 'HemantUmre12', 'committer_name': 'Hemant Umre', 'committer_email': None, 'commit_date': datetime.datetime(2021, 7, 16, 17, 44, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8695fc62aa27b663979927b9d2f079a4f11924c7', 'committer_username': 'HemantUmre12', 'committer_name': 'Hemant Umre', 'committer_email': None, 'commit_date': datetime.datetime(2021, 7, 16, 17, 44, 47, tzinfo=datetime.timezone.utc)}]",Hemant Umre,87542880,,User,,42,,0,6
1377731751,invitations: Add a new setting `Who can create multiuse invite link`.,"This PR adds a new realm level setting `Who can create multiuse invite link` based on the group permissions
model.  

Relevant discussions
1. [Regarding refactor of code to flush cache](https://chat.zulip.org/#narrow/stream/49-development-help/topic/Circular.20dependency.20of.20Django.20models)
2. [Discussion for adding realm level group setting](https://chat.zulip.org/#narrow/stream/101-design/topic/New.20permissions.20model)

Fixes: #15159 

<!-- If the PR makes UI changes, always include one or more still screenshots to demonstrate your changes. If it seems helpful, add a screen capture of the new functionality as well.

Tooling tips: https://zulip.readthedocs.io/en/latest/tutorials/screenshot-and-gif-software.html
-->

**Screenshots and screen captures:**
New organization settings panel
![image](https://github.com/zulip/zulip/assets/99073049/e1c1a079-5198-45cf-9452-d97b953339dd)

<details>
<summary>Self-review checklist</summary>

<!-- Prior to submitting a PR, follow our step-by-step guide to review your own code:
https://zulip.readthedocs.io/en/latest/contributing/code-reviewing.html#how-to-review-code -->

<!-- Once you create the PR, check off all the steps below that you have completed.
If any of these steps are not relevant or you have not completed, leave them unchecked.-->

- [ ] [Self-reviewed](https://zulip.readthedocs.io/en/latest/contributing/code-reviewing.html#how-to-review-code) the changes for clarity and maintainability
      (variable names, code reuse, readability, etc.).

Communicate decisions, questions, and potential concerns.

- [x] Explains differences from previous plans (e.g., issue description).
- [x] Highlights technical choices and bugs encountered.
- [x] Calls out remaining decisions and concerns.
- [x] Automated tests verify logic where appropriate.

Individual commits are ready for review (see [commit discipline](https://zulip.readthedocs.io/en/latest/contributing/commit-discipline.html)).

- [x] Each commit is a coherent idea.
- [x] Commit message(s) explain reasoning and motivation for changes.

Completed manual review and testing of the following:

- [x] Visual appearance of the changes.
- [x] Responsiveness and internationalization.
- [x] Strings and tooltips.
- [x] End-to-end functionality of buttons, interactions and flows.
- [x] Corner cases, error conditions, and easily imagined bugs.
</details>
",True,25884,https://api.github.com/repos/zulip/zulip/pulls/25884,https://github.com/zulip/zulip/pull/25884,closed,961,123,57,14,32,126,5,0,"[{'name': 'area: settings (admin/org)'}, {'name': 'size: XL'}, {'name': 'area: settings (user groups)'}, {'name': 'integration review'}, {'name': 'api docs review'}]",2023-06-04 12:34:58+00:00,2023-09-07 21:21:01+00:00,8239563.0,"95 days, 8:46:03","[{'comment_id': 1218280325, 'comment_body': 'I think it would be good idea to move all entries of system_groups names from `UserGroup` model to `Realm` model as a follow up after this PR.', 'comment_created': datetime.datetime(2023, 6, 5, 15, 57, 18, tzinfo=datetime.timezone.utc), 'commenter': 'Ujjawal3', 'type': 'User'}, {'comment_id': 1218281704, 'comment_body': 'I was getting a circular dependency error if it was imported at the beginning of module. ', 'comment_created': datetime.datetime(2023, 6, 5, 15, 58, 31, tzinfo=datetime.timezone.utc), 'commenter': 'Ujjawal3', 'type': 'User'}, {'comment_id': 1224869239, 'comment_body': 'I initially wrote the function like this \r\n```\r\nexport function user_can_create_muliuse_invite(): boolean {\r\n    return user_groups.is_user_in_group(\r\n        page_params.realm_create_multiuse_invite_group_id,\r\n        people.my_current_user_id()\r\n    );\r\n}\r\n```\r\nBut `People` module can not be imported because of circular dependancy. ', 'comment_created': datetime.datetime(2023, 6, 9, 22, 53, 10, tzinfo=datetime.timezone.utc), 'commenter': 'Ujjawal3', 'type': 'User'}, {'comment_id': 1225146966, 'comment_body': 'I think adding a type hint here and dictionary below would be helpful.', 'comment_created': datetime.datetime(2023, 6, 10, 6, 26, 24, tzinfo=datetime.timezone.utc), 'commenter': 'HemantUmre12', 'type': 'User'}, {'comment_id': 1225186453, 'comment_body': 'I think you can drop `group_name_to_group_dict` if you want to retrieve a `UserGroup` by its name, you can use `all_system_user_groups.get(name=group_name)` instead.', 'comment_created': datetime.datetime(2023, 6, 10, 7, 41, 20, tzinfo=datetime.timezone.utc), 'commenter': 'HemantUmre12', 'type': 'User'}, {'comment_id': 1225291105, 'comment_body': ""Using `local()` inside a loop is expensive and a it's a bit of code smell already as mentioned in above comment. Here's an alternative approach I can suggest:\r\n\r\nOutside this loop\r\n```\r\nreq_vars = {}\r\nreq_group_vars = {} # You may need to adjust the exact variable name here\r\n\r\nfor k, v in list(locals().items()):\r\n    if k in realm.property_types:\r\n        req_vars[k] = v\r\n    if k in Realm.REALM_PERMISSION_GROUP_SETTING_ID_TO_GROUP_SETTING:\r\n        req_group_vars[k] = v \r\n```\r\nAlternatively, if you want to include group settings in req_vars, you will need to make changes to the above loop to skip group settings."", 'comment_created': datetime.datetime(2023, 6, 10, 11, 7, 26, tzinfo=datetime.timezone.utc), 'commenter': 'HemantUmre12', 'type': 'User'}, {'comment_id': 1225467687, 'comment_body': 'I think this list is in alphabetic order and we should follow that. ', 'comment_created': datetime.datetime(2023, 6, 10, 17, 1, 39, tzinfo=datetime.timezone.utc), 'commenter': 'HemantUmre12', 'type': 'User'}, {'comment_id': 1225768244, 'comment_body': 'As suggested above, see if you can also drop this dictionary here.', 'comment_created': datetime.datetime(2023, 6, 11, 10, 17, 19, tzinfo=datetime.timezone.utc), 'commenter': 'HemantUmre12', 'type': 'User'}, {'comment_id': 1225768580, 'comment_body': 'Since we use `default_group` multiple times, it would be better to store it in a variable.', 'comment_created': datetime.datetime(2023, 6, 11, 10, 19, 34, tzinfo=datetime.timezone.utc), 'commenter': 'HemantUmre12', 'type': 'User'}, {'comment_id': 1225769998, 'comment_body': 'As suggested above, see if you can also drop this dictionary here.', 'comment_created': datetime.datetime(2023, 6, 11, 10, 27, 40, tzinfo=datetime.timezone.utc), 'commenter': 'HemantUmre12', 'type': 'User'}, {'comment_id': 1225779764, 'comment_body': 'As most of the fields have comments that explain what they do, I think we should do the same for this field.', 'comment_created': datetime.datetime(2023, 6, 11, 11, 14, 42, tzinfo=datetime.timezone.utc), 'commenter': 'HemantUmre12', 'type': 'User'}, {'comment_id': 1225793089, 'comment_body': ""I think you missed it. This link shouldn't be part of this commit; the later one should be."", 'comment_created': datetime.datetime(2023, 6, 11, 12, 6, 42, tzinfo=datetime.timezone.utc), 'commenter': 'HemantUmre12', 'type': 'User'}, {'comment_id': 1225873239, 'comment_body': '*multiuse', 'comment_created': datetime.datetime(2023, 6, 11, 17, 31, 37, tzinfo=datetime.timezone.utc), 'commenter': 'HemantUmre12', 'type': 'User'}, {'comment_id': 1225873301, 'comment_body': '*links', 'comment_created': datetime.datetime(2023, 6, 11, 17, 32, 9, tzinfo=datetime.timezone.utc), 'commenter': 'HemantUmre12', 'type': 'User'}, {'comment_id': 1226203473, 'comment_body': 'We can move this inside the if statement below. No need for the query if we are not using it.', 'comment_created': datetime.datetime(2023, 6, 12, 7, 28, 23, tzinfo=datetime.timezone.utc), 'commenter': 'HemantUmre12', 'type': 'User'}, {'comment_id': 1226222153, 'comment_body': ""I was just thinking that inside the action function, we don't check the permission configuration. So if we drop these checks, it will work just fine. However, we still need to keep `user_group.name == default_group_name` to make sure state changes."", 'comment_created': datetime.datetime(2023, 6, 12, 7, 44, 21, tzinfo=datetime.timezone.utc), 'commenter': 'HemantUmre12', 'type': 'User'}, {'comment_id': 1227958319, 'comment_body': 'I added this code after adding all event listener so that we can avoid some duplicate code by using `$(""#generate_multiuse_invite_radio"").trigger(""change"")`', 'comment_created': datetime.datetime(2023, 6, 13, 11, 19, 10, tzinfo=datetime.timezone.utc), 'commenter': 'Ujjawal3', 'type': 'User'}, {'comment_id': 1228023141, 'comment_body': ""I don't know why git is changing this line rather than the later one."", 'comment_created': datetime.datetime(2023, 6, 13, 12, 8, 56, tzinfo=datetime.timezone.utc), 'commenter': 'Ujjawal3', 'type': 'User'}, {'comment_id': 1228027746, 'comment_body': 'I liked the suggested approach. So, updated the code accordingly.', 'comment_created': datetime.datetime(2023, 6, 13, 12, 13, 1, tzinfo=datetime.timezone.utc), 'commenter': 'Ujjawal3', 'type': 'User'}, {'comment_id': 1232384665, 'comment_body': 'I think it is better to pass `update_fields` in `save()`.', 'comment_created': datetime.datetime(2023, 6, 16, 15, 12, 54, tzinfo=datetime.timezone.utc), 'commenter': 'HemantUmre12', 'type': 'User'}, {'comment_id': 1232385207, 'comment_body': 'I think can be better spelled as `if X is None:`.', 'comment_created': datetime.datetime(2023, 6, 16, 15, 13, 22, tzinfo=datetime.timezone.utc), 'commenter': 'HemantUmre12', 'type': 'User'}, {'comment_id': 1232968223, 'comment_body': 'This list is in alphabetical order.', 'comment_created': datetime.datetime(2023, 6, 17, 5, 46, 16, tzinfo=datetime.timezone.utc), 'commenter': 'HemantUmre12', 'type': 'User'}, {'comment_id': 1232978644, 'comment_body': 'These two classes could have been added in a single line: `$(""#email_invite_radio_container"").addClass(""control-label-disabled disabled_setting_tooltip"")`;.', 'comment_created': datetime.datetime(2023, 6, 17, 6, 33, 20, tzinfo=datetime.timezone.utc), 'commenter': 'HemantUmre12', 'type': 'User'}, {'comment_id': 1233000780, 'comment_body': 'Here also `elif X is Y:`.', 'comment_created': datetime.datetime(2023, 6, 17, 8, 46, 17, tzinfo=datetime.timezone.utc), 'commenter': 'HemantUmre12', 'type': 'User'}, {'comment_id': 1234164981, 'comment_body': 'You should add `durable=True` here inside `transaction.atomic`. And we should also add `savepoint=False` for transactions that are performed inside a transaction.', 'comment_created': datetime.datetime(2023, 6, 19, 14, 47, 32, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1234165520, 'comment_body': 'This should also contain `durable=True`.', 'comment_created': datetime.datetime(2023, 6, 19, 14, 48, 1, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1234176574, 'comment_body': 'We can create a system group dict with group name as key and group object as value outside the loop. This way we would avoid calling `.get` in a loop. This works fine currently because there is ony one setting in `REALM_PERMISSION_GROUP_SETTINGS`.', 'comment_created': datetime.datetime(2023, 6, 19, 14, 57, 52, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1234178408, 'comment_body': 'We are avoiding sending the `can_...` properties for new settings here. We instead expect client to calculate whether user can create the links or not using the setting value which is passed above.', 'comment_created': datetime.datetime(2023, 6, 19, 14, 59, 32, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1234233270, 'comment_body': '`rrealm.POLICY_NOBODY` is not `None` so I made it `realm.invite_to_realm_policy is realm.POLICY_NOBODY:`', 'comment_created': datetime.datetime(2023, 6, 19, 15, 49, 54, tzinfo=datetime.timezone.utc), 'commenter': 'Ujjawal3', 'type': 'User'}, {'comment_id': 1234257628, 'comment_body': 'We can have a separate function for group-based settings but I am not sure. We can wait for more feedback.', 'comment_created': datetime.datetime(2023, 6, 19, 16, 19, 43, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1234258578, 'comment_body': 'I think it would be better to combine both these functions for owner and admin and name it accordingly.', 'comment_created': datetime.datetime(2023, 6, 19, 16, 20, 59, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1234272522, 'comment_body': 'I get how this is used, but we can directly add ""_id"" to the setting name. I feel it is unnecessary, but we can wait for more feedback.', 'comment_created': datetime.datetime(2023, 6, 19, 16, 40, 5, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1234273090, 'comment_body': 'But this may be fine since we would convert other settings to group based settings eventually.', 'comment_created': datetime.datetime(2023, 6, 19, 16, 40, 56, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1237946384, 'comment_body': 'Hmm, this seems confusing to have a `check_if_owner_or_administrator_required` function and also another check to verify the user is an admin or not. I think we can instead rename the function to something like `check_admin_permissions` or `check_role_based_permissions` and add a parameter like `require_atleast_admin`. The function could be something like -\r\n```python\r\ndef func_name():\r\n    # owner check based on invite_as value\r\n\r\n    if require_atleast_admin and not user_profile.is_realm_admin:\r\n        raise JsonableError(""Must be an organization administrator"")\r\n\r\n    # admin check based on invite_as value\r\n\r\n```', 'comment_created': datetime.datetime(2023, 6, 22, 3, 22, 34, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1237950835, 'comment_body': 'Why the key for this dict is `Optional[str]`? I expect the `user_group` object would have name set in all cases. Also, we could possibly extract this as a function to get a dict for system groups since that would be re-used at a couple of places.', 'comment_created': datetime.datetime(2023, 6, 22, 3, 31, 12, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1237952560, 'comment_body': 'I guess this has `Optional` because we do not set it for `can_remove_subscribers_group` setting. Just noting here that I have added a commit for this in my PR #26070. We can rebase one of the PRs depending on which PR is merged first, so it is fine for now.', 'comment_created': datetime.datetime(2023, 6, 22, 3, 35, 12, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1237965688, 'comment_body': 'This `login` call can be removed I guess and there are a couple of such lines below as well. Basically there is no need to login as a admin user when changing setting using `do_...` function.', 'comment_created': datetime.datetime(2023, 6, 22, 4, 2, 56, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1238067677, 'comment_body': 'Running this migration gives an error on my system because you cannot access constants like `POLICY_NOBODY` and `NOBODY_GROUP_NAME`. You would need to define them at the top. You can see other such migrations where we do this.', 'comment_created': datetime.datetime(2023, 6, 22, 6, 42, 54, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1238086632, 'comment_body': 'Would also be good to rename `user_can_invite_others_to_realm` to something like `user_can_send_email_invite_to_others`.', 'comment_created': datetime.datetime(2023, 6, 22, 7, 1, 16, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1238103213, 'comment_body': 'A better fix here would to make the selector for setting margin-top to 10px more selective probably by using `input-group` class.', 'comment_created': datetime.datetime(2023, 6, 22, 7, 15, 59, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1238129700, 'comment_body': 'I think we should also test the cases where a user tries to set the setting to these groups and check that these raise an error.', 'comment_created': datetime.datetime(2023, 6, 22, 7, 40, 2, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1238221853, 'comment_body': 'Should I just rename this function or all the variables related to this setting?', 'comment_created': datetime.datetime(2023, 6, 22, 8, 55, 19, tzinfo=datetime.timezone.utc), 'commenter': 'Ujjawal3', 'type': 'User'}, {'comment_id': 1238253708, 'comment_body': 'I think both because having `can_invite_others_to_realm` as `False`, feels user is not allowed to create multiuse link as well. Would probably be better to do this change in a separate prep commit.', 'comment_created': datetime.datetime(2023, 6, 22, 9, 22, 43, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1241470412, 'comment_body': 'Ohh, sorry for the confusion here. But I did not meant to rename the database field and the API fields sent through `/events`, `/register`,etc. endpoints. I only meant the variables used internally. It would be better to get feedback from others before renaming the database fields and the fields sent in API responses.', 'comment_created': datetime.datetime(2023, 6, 26, 3, 26, 48, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1242838590, 'comment_body': 'I have updated the PR. Please have a look.', 'comment_created': datetime.datetime(2023, 6, 26, 21, 49, 19, tzinfo=datetime.timezone.utc), 'commenter': 'Ujjawal3', 'type': 'User'}, {'comment_id': 1243305251, 'comment_body': 'Would be better to use `==` for comparing values here. We generally use `is` for checking if  value is `None` or not.', 'comment_created': datetime.datetime(2023, 6, 27, 8, 0, 43, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1243315109, 'comment_body': 'This should have `durable=True` and not `savepoint=False` since we do not call this function inside another atomic transaction as of now.', 'comment_created': datetime.datetime(2023, 6, 27, 8, 8, 53, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1244924578, 'comment_body': 'There is an extra space here.', 'comment_created': datetime.datetime(2023, 6, 28, 9, 9, 47, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1253737339, 'comment_body': ""What's the thinking behind doing this here rather than around all of `create_internal_realm`? The latter certainly seems more correct to me, since then either we have a fully initialized server or a server that's not initialized at all."", 'comment_created': datetime.datetime(2023, 7, 5, 23, 1, 42, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1253738706, 'comment_body': '`require_admin` would be a more traditional name for this parameter.', 'comment_created': datetime.datetime(2023, 7, 5, 23, 4, 47, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1253740414, 'comment_body': 'I think this block could be replaced by having the one caller pass `require_admin=invited_as in [PreregistrationUser.INVITE_AS[""REALM_ADMIN""], ...]`, maybe with that variable being set on its own line, in the one caller that uses this.', 'comment_created': datetime.datetime(2023, 7, 5, 23, 6, 44, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1253740962, 'comment_body': 'The writing style here feels a lot more sloppy than existing API changelog entries; please read some similar ones and polish this.', 'comment_created': datetime.datetime(2023, 7, 5, 23, 7, 27, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1253741804, 'comment_body': 'I think a better change here would be to add a prep commit that makes this test call `do_create_realm` properly rather than trying to make a realm object hackily this other way.', 'comment_created': datetime.datetime(2023, 7, 5, 23, 8, 35, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1253742817, 'comment_body': '`do_change_realm_permission_group_setting` (singular, and using `change`) feels clearer to me. We\'re changing a single group setting.\r\n\r\nThe reason I prefer ""change"" over ""set"" is that we\'re moving a pointer (the group ID), effectively, rather than changing a value. ', 'comment_created': datetime.datetime(2023, 7, 5, 23, 10, 37, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1253743143, 'comment_body': ""Let's change `name` to `setting_name`, and have an `assert setting_name in REALM_PERMISSION_GROUP_SETTINGS` line, just for readability that we expect this to be one of those values."", 'comment_created': datetime.datetime(2023, 7, 5, 23, 11, 21, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1253743668, 'comment_body': ""As discussed in https://chat.zulip.org/#narrow/stream/378-api-design/topic/event.20for.20updating.20group.20setting/near/1600758, let's avoid the property/value format here."", 'comment_created': datetime.datetime(2023, 7, 5, 23, 12, 36, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1253744122, 'comment_body': 'This is an old pattern; switch this to `send_event_on_commit`. @HemantUmre12 @sahil839 FYI too since you may have some PRs that need this tweak too.', 'comment_created': datetime.datetime(2023, 7, 5, 23, 13, 23, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1253744828, 'comment_body': 'This could be accessing the shorter `REALM_PERMISSION_GROUP_SETTINGS`, right? I think there may be a few more cases in this PR too.', 'comment_created': datetime.datetime(2023, 7, 5, 23, 14, 56, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1253746983, 'comment_body': 'I think an even better plan might be to move them to a central object or dataclass, rather than hanging off a model at all, but agreed this is a good follow-up.', 'comment_created': datetime.datetime(2023, 7, 5, 23, 19, 23, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1253747643, 'comment_body': ""I'm not opposed to this existing; I guess most places that currently reference `REALM_PERMISSION_GROUP_SETTING_ID_TO_GROUP_SETTING` feel like they should access `REALM_PERMISSION_GROUP_SETTINGS` instead, but maybe that doesn't work because of the `_id` suffix. \r\n\r\nI think the right larger model would be to have `GroupPermissionSetting` have an `id_field_name` field."", 'comment_created': datetime.datetime(2023, 7, 5, 23, 20, 55, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1254011956, 'comment_body': 'Most of the places we use the `REALM_PERMISSION_GROUP_SETTING_ID_TO_GROUP_SETTING` object in a loop. So in those places we can just loop over `REALM_PERMISSION_GROUP_SETTINGS` and add ""_id"" to the string like we do for stream settings currently.\r\n\r\nAnd a couple of other places where we use this differently is in `has_permission` code in `models.py` and in `views/realm.py` to check whether a setting is a group-based settings to add its new value in `req_group_setting_vars` object.\r\n\r\nWe can actually directly use `create_multiuse_invite_group` instead of `create_multiuse_invite_group_id` in `has_permission` as we eventually pass user group object in `is_user_in_group`.\r\nWhile this dict is actually helpful to use in the `views/realm.py` code. And that also might be changed if we change the parameters to not have ""_id"" to allow setting them to single user groups.\r\n', 'comment_created': datetime.datetime(2023, 7, 6, 6, 53, 21, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1254013215, 'comment_body': 'But yeah, I agree that having `id_field_name` would be a better plan.', 'comment_created': datetime.datetime(2023, 7, 6, 6, 54, 38, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1254148649, 'comment_body': 'Hmm, keeping this dict is helpful in `views/realm.py`. If we will change the parameters to not have ""_id"" than we can remove this dict. But in that case I think we should also make changes in name of `page_params` and `events` because our current logic in frontend for changing the settings is based on the assumption that name of the setting received in `page_params` is same as name of the parameter used for changing the setting. Otherwise we need to maintain an array in frontend to distinguish between role based and group based setting.', 'comment_created': datetime.datetime(2023, 7, 6, 9, 0, 34, tzinfo=datetime.timezone.utc), 'commenter': 'Ujjawal3', 'type': 'User'}, {'comment_id': 1254735119, 'comment_body': 'By default `do_create_realm` creates a realm with `plan_type`=2. But the test expects realm of `plan_type`=1.', 'comment_created': datetime.datetime(2023, 7, 6, 17, 34, 27, tzinfo=datetime.timezone.utc), 'commenter': 'Ujjawal3', 'type': 'User'}, {'comment_id': 1255697129, 'comment_body': 'I am not sure whether there is anything better which can be done here.', 'comment_created': datetime.datetime(2023, 7, 7, 11, 41, 33, tzinfo=datetime.timezone.utc), 'commenter': 'Ujjawal3', 'type': 'User'}, {'comment_id': 1263144650, 'comment_body': ""Please don't use numerical values like `1`; always use readable values like `Realm.PLAN_TYPE_FOO` instead."", 'comment_created': datetime.datetime(2023, 7, 13, 23, 48, 9, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1283324310, 'comment_body': ""I don't think there is need for this code. It was only needed to pass [this](https://github.com/zulip/zulip/blob/6632eca2dcf2051043e95348658d6da02305669f/zerver/tests/test_import_export.py#L1554) test. In this test `zerver_usergroup` is not present in data but `create_multiuse_invite` field have a value. As `zerver_usergroup` is not present I need  to delete this from imported data. "", 'comment_created': datetime.datetime(2023, 8, 3, 14, 52, 3, tzinfo=datetime.timezone.utc), 'commenter': 'Ujjawal3', 'type': 'User'}, {'comment_id': 1285228813, 'comment_body': 'I am not sure whether we want a separate feature level entry for these API changes.', 'comment_created': datetime.datetime(2023, 8, 6, 14, 50, 8, tzinfo=datetime.timezone.utc), 'commenter': 'Ujjawal3', 'type': 'User'}, {'comment_id': 1286671358, 'comment_body': ""Yeah, this will not be needed. Can we instead modify the test data to set the setting fields to `None`? I guess that's what happens when a slack organization or data from any other product is imported."", 'comment_created': datetime.datetime(2023, 8, 8, 6, 51, 44, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1286682747, 'comment_body': 'I think we should add `atomic = False` here to prevent running a one large transaction.', 'comment_created': datetime.datetime(2023, 8, 8, 7, 4, 2, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1286687625, 'comment_body': 'We can avoid looping over objects here and instead run three queries - one for `invite_to_realm_policy` set to `POLICY_NOBODY`, one for `invite_to_realm_policy` set to `POLICY_ADMINS_ONLY` and one for rest of the realms where each query would be similar to what we do in the `0455` migration (without the batching I guess).\r\n\r\nBut I am not sure whether the complexity is required here for `Realm` table, so we can leave it as it is for now and just add the `atomic = False` as mentioned in the below comment.', 'comment_created': datetime.datetime(2023, 8, 8, 7, 8, 28, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1286710032, 'comment_body': 'I think using same feature level should be fine.', 'comment_created': datetime.datetime(2023, 8, 8, 7, 25, 52, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1286710250, 'comment_body': 'We can use `DELETE` instead of `DEL`.', 'comment_created': datetime.datetime(2023, 8, 8, 7, 26, 4, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1286716392, 'comment_body': 'This change should be done in the last commit that includes changes for this particular feature level.', 'comment_created': datetime.datetime(2023, 8, 8, 7, 30, 5, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1286725398, 'comment_body': 'We should also verify whether the event format sent here is as expected or not like we do in `do_set_realm_property_test`.', 'comment_created': datetime.datetime(2023, 8, 8, 7, 38, 38, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1286865415, 'comment_body': 'Should we just sent the event to admins and the user who would be affected like the one who sent the invite only and not all the non-admin users?', 'comment_created': datetime.datetime(2023, 8, 8, 9, 34, 10, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1286943690, 'comment_body': 'This should mirror the API changelog entries for new realm settings. See feature levels 162, 137, 129, 109.\r\n\r\nAlso, ID should be capitalized and normal text vs formatted as inline code.', 'comment_created': datetime.datetime(2023, 8, 8, 10, 47, 17, tzinfo=datetime.timezone.utc), 'commenter': 'laurynmm', 'type': 'User'}, {'comment_id': 1286952147, 'comment_body': 'Revised text w/link:\r\n`PATCH /realm`: Added `create_multiuse_invite_group` parameter to support changing the user group whose members can create [reusable invitation links](relative link to help center article).\r\n\r\nPerhaps a ""Previously, creating reusable invite links was ..."" note for when this endpoint is documented.', 'comment_created': datetime.datetime(2023, 8, 8, 10, 55, 45, tzinfo=datetime.timezone.utc), 'commenter': 'laurynmm', 'type': 'User'}, {'comment_id': 1286969053, 'comment_body': 'Revised text:\r\n`GET /invites`: Endpoint response for non-admin users now includes both email invitations and reusable invitation links that they have created. Previously, non-admin users could only create email invitations, and therefore the response did not include reusable invitation links for these users.""', 'comment_created': datetime.datetime(2023, 8, 8, 11, 13, 5, tzinfo=datetime.timezone.utc), 'commenter': 'laurynmm', 'type': 'User'}, {'comment_id': 1286971070, 'comment_body': 'Also, maybe revise text to: \r\n\r\n""Non-admin users can now revoke reusable invite links they have created. Previously, only admin users could create and revoke reusable invite links.""', 'comment_created': datetime.datetime(2023, 8, 8, 11, 15, 7, tzinfo=datetime.timezone.utc), 'commenter': 'laurynmm', 'type': 'User'}, {'comment_id': 1286978965, 'comment_body': 'Link to help center documentation, and maybe use ""reusable invitation links"" vs ""invite links"".\r\n\r\nSame note for register response feature level note.', 'comment_created': datetime.datetime(2023, 8, 8, 11, 23, 7, tzinfo=datetime.timezone.utc), 'commenter': 'laurynmm', 'type': 'User'}, {'comment_id': 1286981821, 'comment_body': 'I think we removed the `@` from these system group names. See `can_mention_group` in documentation.\r\n\r\nSame note for register response feature level note.', 'comment_created': datetime.datetime(2023, 8, 8, 11, 26, 8, tzinfo=datetime.timezone.utc), 'commenter': 'laurynmm', 'type': 'User'}, {'comment_id': 1287000573, 'comment_body': 'How about move the sentence from below here:\r\n\r\n```\r\n* You can [restrict the ability to invite new users](#change-who-can-send-invitations) to\r\n join your Zulip organzation to specific [roles](/help/roles-and-permissions).\r\n```', 'comment_created': datetime.datetime(2023, 8, 8, 11, 45, 50, tzinfo=datetime.timezone.utc), 'commenter': 'laurynmm', 'type': 'User'}, {'comment_id': 1287001075, 'comment_body': 'Delete this content here and move first sentence to bullet point above.', 'comment_created': datetime.datetime(2023, 8, 8, 11, 46, 20, tzinfo=datetime.timezone.utc), 'commenter': 'laurynmm', 'type': 'User'}, {'comment_id': 1287002223, 'comment_body': 'I think it would be good to have this be ""Who can create reusable invitation links"" here and in the UI.', 'comment_created': datetime.datetime(2023, 8, 8, 11, 47, 29, tzinfo=datetime.timezone.utc), 'commenter': 'laurynmm', 'type': 'User'}, {'comment_id': 1287003607, 'comment_body': 'Maybe ""Who can create reusable invitation links""?', 'comment_created': datetime.datetime(2023, 8, 8, 11, 48, 42, tzinfo=datetime.timezone.utc), 'commenter': 'laurynmm', 'type': 'User'}, {'comment_id': 1287028843, 'comment_body': 'Maybe change to ""Create a reusable invitation link"" for consistency.', 'comment_created': datetime.datetime(2023, 8, 8, 12, 13, 19, tzinfo=datetime.timezone.utc), 'commenter': 'laurynmm', 'type': 'User'}, {'comment_id': 1287107032, 'comment_body': 'I could not figure out how to define data type of events corresponding to group setting updates. We need to define required keys and optional keys but for these events there should be atleast one key from `Realm.REALM_GROUP_PERMISSIONS_SETTING` . I tried something like this but there was an error because of enum type.\r\n```\r\n    required_keys=[\r\n      (EnumType([setting_name for setting_name in Realm.REALM_PERMISSION_GROUP_SETTINGS]),int),\r\n    ]\r\n```\r\nI looked at other definitions but could not find any where we need to do such thing.', 'comment_created': datetime.datetime(2023, 8, 8, 13, 18, 27, tzinfo=datetime.timezone.utc), 'commenter': 'Ujjawal3', 'type': 'User'}, {'comment_id': 1287116657, 'comment_body': 'Yes we can do that. So I think we should change the function to something like this\r\n```\r\ndef notify_invites_changed(realm: Realm, acting_user: Optional[UserProfile]=None) -> None:\r\n    event = dict(type=""invites_changed"")\r\n    admin_ids = [user.id for user in realm.get_admin_users_and_bots()]\r\n    recipient_ids=admin_ids\r\n    if(acting_user):\r\n        recipient_ids.append(acting_user.id)\r\n   send_event(realm, event, recipient_ids)\r\n```', 'comment_created': datetime.datetime(2023, 8, 8, 13, 25, 22, tzinfo=datetime.timezone.utc), 'commenter': 'Ujjawal3', 'type': 'User'}, {'comment_id': 1288058636, 'comment_body': ""I don't think you can use `EnumType` as a first element of a tuple, it has to be a `str`.\r\n\r\nI think what we can do is define something like `group_setting_update_data_type` as a `DictType` with only `optional_keys` and then check that atlease one field is present. Something similar to what we do for `check_user_group_update`."", 'comment_created': datetime.datetime(2023, 8, 9, 7, 22, 38, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1288059577, 'comment_body': 'Yes, that seems correct.', 'comment_created': datetime.datetime(2023, 8, 9, 7, 23, 30, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1288482928, 'comment_body': 'Yes, I have modified the test data and have removed this code.', 'comment_created': datetime.datetime(2023, 8, 9, 13, 27, 25, tzinfo=datetime.timezone.utc), 'commenter': 'Ujjawal3', 'type': 'User'}, {'comment_id': 1290227395, 'comment_body': ""So, we can just combine these two bullet points, like we do for other new realm settings:\r\n\r\n```markdown\r\n* `PATCH /realm`, [`POST /register`](/api/register-queue),\r\n  [`GET /events`](/api/get-events): Added `create_multiuse_invite_group`\r\n  realm setting, which is the ID of the user group whose members can\r\n  create [reusable invitation links](/help/invite-new-users#create-a-reusable-invitation-link)\r\n  to an organization. Previously, only admin users could create these\r\n  links.\r\n```\r\n\r\nI switched the word order up a little bit so that the text wrapping in the rendered changelog looks better. Also, I think it's best to have the help link in the first bullet point."", 'comment_created': datetime.datetime(2023, 8, 10, 14, 31, 18, tzinfo=datetime.timezone.utc), 'commenter': 'laurynmm', 'type': 'User'}, {'comment_id': 1290230568, 'comment_body': 'We\'ll want a comma after ""Previously"" when it starts a sentence. Again, it would be good to be consistently using ""reusable invitation links"". And let\'s modify the second sentence to focus on the change to the endpoint:\r\n\r\n```markdown\r\n* `POST /invites/multiuse`: Non-admin users can now use this endpoint\r\n  to create reusable invitation links. Previously, this endpoint was\r\n  restricted to admin users only.\r\n```', 'comment_created': datetime.datetime(2023, 8, 10, 14, 33, 36, tzinfo=datetime.timezone.utc), 'commenter': 'laurynmm', 'type': 'User'}, {'comment_id': 1290234905, 'comment_body': ""Small note, there's an extra space after the colon here. I always find it useful to look at the documentation changes in a browser to catch these little things."", 'comment_created': datetime.datetime(2023, 8, 10, 14, 36, 35, tzinfo=datetime.timezone.utc), 'commenter': 'laurynmm', 'type': 'User'}, {'comment_id': 1290237895, 'comment_body': 'Again, let\'s be consistent with ""reusable invitation links"" here.', 'comment_created': datetime.datetime(2023, 8, 10, 14, 38, 48, tzinfo=datetime.timezone.utc), 'commenter': 'laurynmm', 'type': 'User'}, {'comment_id': 1290240323, 'comment_body': ""Again, I think we can just delete all the content before the header here, even the `{!owner-only.md!)` since that's at the top of this page."", 'comment_created': datetime.datetime(2023, 8, 10, 14, 40, 27, tzinfo=datetime.timezone.utc), 'commenter': 'laurynmm', 'type': 'User'}, {'comment_id': 1290243768, 'comment_body': 'One more small tweak here and in the register response:\r\n\r\n```markdown\r\nThe ID of the [user group](/api/get-user-groups) whose members are\r\nallowed to create [reusable invitation\r\nlinks](/help/invite-new-users#create-a-reusable-invitation-link)\r\nto the organization.\r\n```', 'comment_created': datetime.datetime(2023, 8, 10, 14, 42, 49, tzinfo=datetime.timezone.utc), 'commenter': 'laurynmm', 'type': 'User'}, {'comment_id': 1290247785, 'comment_body': 'I think this is being rendered a little differently than the other settings ...\r\n\r\n<details>\r\n<summary>screenshot as Iago</summary>\r\n\r\n![Screenshot from 2023-08-10 15-41-14](https://github.com/zulip/zulip/assets/63245456/ec0db657-6adf-4126-aa87-d2bef86a3df5)\r\n</details>\r\n\r\n', 'comment_created': datetime.datetime(2023, 8, 10, 14, 45, 25, tzinfo=datetime.timezone.utc), 'commenter': 'laurynmm', 'type': 'User'}, {'comment_id': 1293039436, 'comment_body': 'Yeah we use the custom dropdown widget, like the ones used for `New stream announcements` setting for group-based settings. And other settings used the default `select` element.', 'comment_created': datetime.datetime(2023, 8, 14, 6, 52, 53, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1293045784, 'comment_body': 'I am not completely sure, but we might need a changelog entry for this too. @laurynmm FYI.', 'comment_created': datetime.datetime(2023, 8, 14, 6, 58, 50, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1293059131, 'comment_body': 'I think duplicate events are being sent here for admins here. ', 'comment_created': datetime.datetime(2023, 8, 14, 7, 15, 23, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1293062082, 'comment_body': ""I think we don't need to send the event here to `user_profile` since this is called as a result of deactivating the user."", 'comment_created': datetime.datetime(2023, 8, 14, 7, 18, 37, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1293084934, 'comment_body': 'And the setting should be disabled for `Iago`. It is disabled for me.', 'comment_created': datetime.datetime(2023, 8, 14, 7, 43, 5, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1293168058, 'comment_body': 'Yeah, earlier the UI of dropdown widget was not consistent with the other select fields. I made changes in last push and now it looks consistent.', 'comment_created': datetime.datetime(2023, 8, 14, 8, 40, 16, tzinfo=datetime.timezone.utc), 'commenter': 'Ujjawal3', 'type': 'User'}, {'comment_id': 1293239011, 'comment_body': 'Yes, earlier there were duplicate eevents. I have made changes now.', 'comment_created': datetime.datetime(2023, 8, 14, 9, 41, 45, tzinfo=datetime.timezone.utc), 'commenter': 'Ujjawal3', 'type': 'User'}, {'comment_id': 1293403181, 'comment_body': 'Yeah, looking at https://zulip.com/api/get-events#invites_changed, we would need to update the event description for the new users that get these events as well as make a **Changes** note for the previous state (only admins received these events) and a corresponding entry/bullet point in the API changelog for feature level 202 (at this point).', 'comment_created': datetime.datetime(2023, 8, 14, 12, 36, 33, tzinfo=datetime.timezone.utc), 'commenter': 'laurynmm', 'type': 'User'}, {'comment_id': 1293413322, 'comment_body': 'Pulled up the latest changes and the color looks good now, but the down arrow/chevron in the new setting dropdown is still a bit bigger than the other ones (at least in Chrome and Firefox on Linux) ...\r\n\r\n<details>\r\n<summary>Organization settings - Joining the organization - Iago</summary>\r\n\r\n![Screenshot from 2023-08-14 14-41-29](https://github.com/zulip/zulip/assets/63245456/c7ca91b6-ce49-4f8e-a52b-20478b9858dd)\r\n</details>', 'comment_created': datetime.datetime(2023, 8, 14, 12, 46, 51, tzinfo=datetime.timezone.utc), 'commenter': 'laurynmm', 'type': 'User'}, {'comment_id': 1294429696, 'comment_body': 'Needs to be ""the creator of the changed invitation"" because we\'re referring to a specific user and invitation. Might be nice to expand the first sentence for clarity too...\r\n\r\n> A simple event sent when the set of invitations in the organization changes. This event is sent to organization administrators and the creator of the changed invitation; this tells clients ...\r\n\r\nAnd in the **Changes** note below, maybe expand to ""organization administrators"" for consistency with the text above.', 'comment_created': datetime.datetime(2023, 8, 15, 10, 26, 41, tzinfo=datetime.timezone.utc), 'commenter': 'laurynmm', 'type': 'User'}, {'comment_id': 1294432884, 'comment_body': 'Using feature level 163 as a template, how about ...\r\n\r\n```markdown\r\n* [`GET /events`](/api/get-events): When the set of invitations in an\r\n  organization changes, an `invites_changed` event is now sent to the\r\n  creator of the changed invitation, as well as all admin users.\r\n  Previously, this event was only sent to admin users.\r\n```', 'comment_created': datetime.datetime(2023, 8, 15, 10, 31, 20, tzinfo=datetime.timezone.utc), 'commenter': 'laurynmm', 'type': 'User'}, {'comment_id': 1294681898, 'comment_body': 'I think we can do this for other dropdown widgets as well. The widget for ""Who can remove subscribers from this stream"" setting is also different from other dropdowns on the page.\r\n\r\nWould be good to have a discussion on CZO, but should not be a blocker for this PR.', 'comment_created': datetime.datetime(2023, 8, 15, 14, 35, 59, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1317856586, 'comment_body': ""@sahil839 is there a reason `allow_owners_group` should be false here? I can see situations where one might want to limit it to just owners, but wasn't sure if there was some policy situation to think about here."", 'comment_created': datetime.datetime(2023, 9, 6, 21, 32, 36, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1317857432, 'comment_body': 'This is probably fine but deserves a comment. Later we might refactor this function away from living in `models.py` to some `zerver/lib/` space of its own to resolve that.', 'comment_created': datetime.datetime(2023, 9, 6, 21, 33, 38, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1317872713, 'comment_body': 'This is a known issue with the component in general and we can deal with separately.', 'comment_created': datetime.datetime(2023, 9, 6, 21, 56, 11, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1317880509, 'comment_body': 'Yeah, this would be good to discuss in chat.zulip.org @Ujjawal3 can you start such a thread and link back to it here?', 'comment_created': datetime.datetime(2023, 9, 6, 22, 8, 56, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1317890034, 'comment_body': ""I'm pretty sure it's going to be an import cycle to have `server_events_disptach` call a function in the `ui_init` module. I think what we should do is move `update_invite_user_option` into either `gear_menu.js` to or maybe better a new `right_sidebar_ui.js` module that's responsible for that little component.\r\n\r\nThis is OK to merge since we're not trying to avoid import cycles in this module right now, but please start a #frontend discussion about this detail."", 'comment_created': datetime.datetime(2023, 9, 6, 22, 25, 38, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1317892153, 'comment_body': 'There shouldn\'t be a space before the `?` here; I\'ll just fix that before merging.\r\n\r\nAlso, I wonder if it\'d be better to make the check ""If the referrer is anyone other than me""? \r\n\r\n', 'comment_created': datetime.datetime(2023, 9, 6, 22, 29, 25, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1317898370, 'comment_body': ""This logic does not match the API documentation -- we're notifying the **acting user**, not the user who created the modified invitation. I'm pretty sure this implementation is thus wrong if say an administrator revokes an invitation that a normal user had created.\r\n\r\nThis is definitely a bug and we should fix it but it's also obscure enough that I'm not going to block merging this on doing so; we can just fix it in a near-term follow-up."", 'comment_created': datetime.datetime(2023, 9, 6, 22, 34, 9, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1317907529, 'comment_body': ""So I think we actually want the default for existing administrators that hadn't specified `NOBODY` as their policy to be `role:administrators`, because that way we don't adjust permissions for anyone upwards unexpectedly. "", 'comment_created': datetime.datetime(2023, 9, 6, 22, 52, 26, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1317912629, 'comment_body': '``` diff\r\ndiff --git a/zerver/migrations/0470_set_default_value_for_create_multiuse_invite_group.py b/zerver/migrations/0470_set_default_value_for_create_multiuse_invite_group.py\r\nindex f162fb3e05..6a82d6afea 100644\r\n--- a/zerver/migrations/0470_set_default_value_for_create_multiuse_invite_group.py\r\n+++ b/zerver/migrations/0470_set_default_value_for_create_multiuse_invite_group.py\r\n@@ -11,34 +11,23 @@ def set_default_value_for_create_multiuse_invite_group(\r\n     Realm = apps.get_model(""zerver"", ""Realm"")\r\n     UserGroup = apps.get_model(""zerver"", ""UserGroup"")\r\n \r\n-    Realm.POLICY_NOBODY = 6\r\n-    Realm.POLICY_ADMINS_ONLY = 2\r\n-\r\n-    UserGroup.NOBODY_GROUP_NAME = ""role:nobody""\r\n     UserGroup.ADMINISTRATORS_GROUP_NAME = ""role:administrators""\r\n-    default_group_name = ""role:moderators""\r\n \r\n     for realm in Realm.objects.all():\r\n-        if realm.create_multiuse_invite_group is None:\r\n-            if realm.invite_to_realm_policy == Realm.POLICY_NOBODY:\r\n-                nobody_group = UserGroup.objects.get(\r\n-                    name=UserGroup.NOBODY_GROUP_NAME, realm=realm, is_system_group=True\r\n-                )\r\n-                realm.create_multiuse_invite_group = nobody_group\r\n-\r\n-            elif realm.invite_to_realm_policy == Realm.POLICY_ADMINS_ONLY:\r\n-                admins_group = UserGroup.objects.get(\r\n-                    name=UserGroup.ADMINISTRATORS_GROUP_NAME, realm=realm, is_system_group=True\r\n-                )\r\n-                realm.create_multiuse_invite_group = admins_group\r\n-\r\n-            else:\r\n-                default_group = UserGroup.objects.get(\r\n-                    name=default_group_name, realm=realm, is_system_group=True\r\n-                )\r\n-                realm.create_multiuse_invite_group = default_group\r\n-\r\n-            realm.save(update_fields=[""create_multiuse_invite_group""])\r\n+        if realm.create_multiuse_invite_group is not None:\r\n+            continue\r\n+\r\n+        # Prior to the new create_multiuse_invite_group field being\r\n+        # created, multi-use invitation links could only be created\r\n+        # and managed by administrators, regardless of\r\n+        # invite_to_realm_policy. We replicate that policy for the\r\n+        # initial value of the new setting.\r\n+        admins_group = UserGroup.objects.get(\r\n+            name=UserGroup.ADMINISTRATORS_GROUP_NAME, realm=realm, is_system_group=True\r\n+        )\r\n+        realm.create_multiuse_invite_group = admins_group\r\n+\r\n+        realm.save(update_fields=[""create_multiuse_invite_group""])\r\n \r\n \r\n class Migration(migrations.Migration):\r\n```', 'comment_created': datetime.datetime(2023, 9, 6, 23, 2, 3, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1317914970, 'comment_body': ""After discussion with @alya, I think we should change this to `ADMINISTRATORS_GROUP_NAME`; we couldn't come up with a ton of use cases for moderator use of this, and I feel like that might better match user expectations in new organizations."", 'comment_created': datetime.datetime(2023, 9, 6, 23, 6, 47, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1318000872, 'comment_body': 'I think there is nothing wrong. We are passing the user who created the invitation not the one changing the invitation to `acting_user`. We must change the `acting_user` to some other name to avoid this confusion. ', 'comment_created': datetime.datetime(2023, 9, 7, 2, 0, 53, tzinfo=datetime.timezone.utc), 'commenter': 'Ujjawal3', 'type': 'User'}, {'comment_id': 1318002423, 'comment_body': 'I have started the discussion about this earlier [here](https://chat.zulip.org/#narrow/stream/101-design/topic/Large.20down.20arrow.20in.20dropdown.20list.20widget)', 'comment_created': datetime.datetime(2023, 9, 7, 2, 3, 22, tzinfo=datetime.timezone.utc), 'commenter': 'Ujjawal3', 'type': 'User'}, {'comment_id': 1318169422, 'comment_body': ""I am not sure. I thought it was described as such in the issue, but it isn't. I don't think there would be any issues to allow `Owners only` option. @Ujjawal3 can you confirm if we are missing something here? If not then we can set `allow_owners_group` as true."", 'comment_created': datetime.datetime(2023, 9, 7, 7, 2, 20, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1318178236, 'comment_body': 'Yeah, I think we can just rename the `acting_user` to something else. I was thinking of `referred_by` first, but that would also be confusing since we do not include which invite wass changed in the event. Probably something like `changed_invite_referrer` could be better.', 'comment_created': datetime.datetime(2023, 9, 7, 7, 10, 33, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1318884468, 'comment_body': 'Yeah `changed_invite_referrer` works for me.', 'comment_created': datetime.datetime(2023, 9, 7, 16, 50, 20, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}]","[{'commit_sha': '65e1b14dcd3aaec1999f37e32332fe6bf11a5993', 'committer_username': 'Ujjawal3', 'committer_name': 'Ujjawal Modi', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 5, 9, 46, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1076b91b58be1ba718faff4c7fb69f9ad01cc367', 'committer_username': 'Ujjawal3', 'committer_name': 'Ujjawal Modi', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 5, 9, 46, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f942d8d15dbc5a9bc7cf04dd4cac25243ed43adf', 'committer_username': 'Ujjawal3', 'committer_name': 'Ujjawal Modi', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 5, 9, 46, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4313be654becad21e2cec648d0ec20273e40818f', 'committer_username': 'timabbott', 'committer_name': 'Tim Abbott', 'committer_email': None, 'commit_date': datetime.datetime(2012, 11, 7, 21, 18, 39, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c805c4906403b32e6b05cd6e0f0079c148aa7b4f', 'committer_username': 'Ujjawal3', 'committer_name': 'Ujjawal Modi', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 5, 9, 46, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e4b22927e94f87e0e3801575910e9ce8576f6bf5', 'committer_username': 'Ujjawal3', 'committer_name': 'Ujjawal Modi', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 5, 9, 46, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cc974815de7f92daeb18617b015a8c6a7915ccf0', 'committer_username': 'Ujjawal3', 'committer_name': 'Ujjawal Modi', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 5, 9, 46, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '47cb883d681a246023e52f3476db089d4a1e2393', 'committer_username': 'Ujjawal3', 'committer_name': 'Ujjawal Modi', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 5, 9, 46, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '05af0ce504b3a0ab8cfd10fd483d786a707359f7', 'committer_username': 'Ujjawal3', 'committer_name': 'Ujjawal Modi', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 5, 9, 46, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f43281518b4f1f138928a58ba96e9dab4ca9c65a', 'committer_username': 'Ujjawal3', 'committer_name': 'Ujjawal Modi', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 5, 9, 46, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9100f8756f716014fdddbe71d861b43443fae0a4', 'committer_username': 'Ujjawal3', 'committer_name': 'Ujjawal Modi', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 5, 9, 46, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3eb18fd117c93147092abca881d3fe5059269c85', 'committer_username': 'Ujjawal3', 'committer_name': 'Ujjawal Modi', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 5, 9, 46, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '96f4749edaafcfc9bd5f0380457b7b2bb2723207', 'committer_username': 'Ujjawal3', 'committer_name': 'Ujjawal Modi', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 5, 9, 46, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1e9c7145f2ea7c18720ec776e54a6ea9ee8e0d30', 'committer_username': 'timabbott', 'committer_name': 'Tim Abbott', 'committer_email': None, 'commit_date': datetime.datetime(2012, 11, 7, 21, 18, 39, tzinfo=datetime.timezone.utc)}]",Ujjawal Modi,99073049,,User,,30,,28,14
1377731751,invitations: Add a new setting `Who can create multiuse invite link`.,"This PR adds a new realm level setting `Who can create multiuse invite link` based on the group permissions
model.  

Relevant discussions
1. [Regarding refactor of code to flush cache](https://chat.zulip.org/#narrow/stream/49-development-help/topic/Circular.20dependency.20of.20Django.20models)
2. [Discussion for adding realm level group setting](https://chat.zulip.org/#narrow/stream/101-design/topic/New.20permissions.20model)

Fixes: #15159 

<!-- If the PR makes UI changes, always include one or more still screenshots to demonstrate your changes. If it seems helpful, add a screen capture of the new functionality as well.

Tooling tips: https://zulip.readthedocs.io/en/latest/tutorials/screenshot-and-gif-software.html
-->

**Screenshots and screen captures:**
New organization settings panel
![image](https://github.com/zulip/zulip/assets/99073049/e1c1a079-5198-45cf-9452-d97b953339dd)

<details>
<summary>Self-review checklist</summary>

<!-- Prior to submitting a PR, follow our step-by-step guide to review your own code:
https://zulip.readthedocs.io/en/latest/contributing/code-reviewing.html#how-to-review-code -->

<!-- Once you create the PR, check off all the steps below that you have completed.
If any of these steps are not relevant or you have not completed, leave them unchecked.-->

- [ ] [Self-reviewed](https://zulip.readthedocs.io/en/latest/contributing/code-reviewing.html#how-to-review-code) the changes for clarity and maintainability
      (variable names, code reuse, readability, etc.).

Communicate decisions, questions, and potential concerns.

- [x] Explains differences from previous plans (e.g., issue description).
- [x] Highlights technical choices and bugs encountered.
- [x] Calls out remaining decisions and concerns.
- [x] Automated tests verify logic where appropriate.

Individual commits are ready for review (see [commit discipline](https://zulip.readthedocs.io/en/latest/contributing/commit-discipline.html)).

- [x] Each commit is a coherent idea.
- [x] Commit message(s) explain reasoning and motivation for changes.

Completed manual review and testing of the following:

- [x] Visual appearance of the changes.
- [x] Responsiveness and internationalization.
- [x] Strings and tooltips.
- [x] End-to-end functionality of buttons, interactions and flows.
- [x] Corner cases, error conditions, and easily imagined bugs.
</details>
",True,25884,https://api.github.com/repos/zulip/zulip/pulls/25884,https://github.com/zulip/zulip/pull/25884,closed,961,123,57,14,32,126,5,0,"[{'name': 'area: settings (admin/org)'}, {'name': 'size: XL'}, {'name': 'area: settings (user groups)'}, {'name': 'integration review'}, {'name': 'api docs review'}]",2023-06-04 12:34:58+00:00,2023-09-07 21:21:01+00:00,8239563.0,"95 days, 8:46:03","[{'comment_id': 1218280325, 'comment_body': 'I think it would be good idea to move all entries of system_groups names from `UserGroup` model to `Realm` model as a follow up after this PR.', 'comment_created': datetime.datetime(2023, 6, 5, 15, 57, 18, tzinfo=datetime.timezone.utc), 'commenter': 'Ujjawal3', 'type': 'User'}, {'comment_id': 1218281704, 'comment_body': 'I was getting a circular dependency error if it was imported at the beginning of module. ', 'comment_created': datetime.datetime(2023, 6, 5, 15, 58, 31, tzinfo=datetime.timezone.utc), 'commenter': 'Ujjawal3', 'type': 'User'}, {'comment_id': 1224869239, 'comment_body': 'I initially wrote the function like this \r\n```\r\nexport function user_can_create_muliuse_invite(): boolean {\r\n    return user_groups.is_user_in_group(\r\n        page_params.realm_create_multiuse_invite_group_id,\r\n        people.my_current_user_id()\r\n    );\r\n}\r\n```\r\nBut `People` module can not be imported because of circular dependancy. ', 'comment_created': datetime.datetime(2023, 6, 9, 22, 53, 10, tzinfo=datetime.timezone.utc), 'commenter': 'Ujjawal3', 'type': 'User'}, {'comment_id': 1225146966, 'comment_body': 'I think adding a type hint here and dictionary below would be helpful.', 'comment_created': datetime.datetime(2023, 6, 10, 6, 26, 24, tzinfo=datetime.timezone.utc), 'commenter': 'HemantUmre12', 'type': 'User'}, {'comment_id': 1225186453, 'comment_body': 'I think you can drop `group_name_to_group_dict` if you want to retrieve a `UserGroup` by its name, you can use `all_system_user_groups.get(name=group_name)` instead.', 'comment_created': datetime.datetime(2023, 6, 10, 7, 41, 20, tzinfo=datetime.timezone.utc), 'commenter': 'HemantUmre12', 'type': 'User'}, {'comment_id': 1225291105, 'comment_body': ""Using `local()` inside a loop is expensive and a it's a bit of code smell already as mentioned in above comment. Here's an alternative approach I can suggest:\r\n\r\nOutside this loop\r\n```\r\nreq_vars = {}\r\nreq_group_vars = {} # You may need to adjust the exact variable name here\r\n\r\nfor k, v in list(locals().items()):\r\n    if k in realm.property_types:\r\n        req_vars[k] = v\r\n    if k in Realm.REALM_PERMISSION_GROUP_SETTING_ID_TO_GROUP_SETTING:\r\n        req_group_vars[k] = v \r\n```\r\nAlternatively, if you want to include group settings in req_vars, you will need to make changes to the above loop to skip group settings."", 'comment_created': datetime.datetime(2023, 6, 10, 11, 7, 26, tzinfo=datetime.timezone.utc), 'commenter': 'HemantUmre12', 'type': 'User'}, {'comment_id': 1225467687, 'comment_body': 'I think this list is in alphabetic order and we should follow that. ', 'comment_created': datetime.datetime(2023, 6, 10, 17, 1, 39, tzinfo=datetime.timezone.utc), 'commenter': 'HemantUmre12', 'type': 'User'}, {'comment_id': 1225768244, 'comment_body': 'As suggested above, see if you can also drop this dictionary here.', 'comment_created': datetime.datetime(2023, 6, 11, 10, 17, 19, tzinfo=datetime.timezone.utc), 'commenter': 'HemantUmre12', 'type': 'User'}, {'comment_id': 1225768580, 'comment_body': 'Since we use `default_group` multiple times, it would be better to store it in a variable.', 'comment_created': datetime.datetime(2023, 6, 11, 10, 19, 34, tzinfo=datetime.timezone.utc), 'commenter': 'HemantUmre12', 'type': 'User'}, {'comment_id': 1225769998, 'comment_body': 'As suggested above, see if you can also drop this dictionary here.', 'comment_created': datetime.datetime(2023, 6, 11, 10, 27, 40, tzinfo=datetime.timezone.utc), 'commenter': 'HemantUmre12', 'type': 'User'}, {'comment_id': 1225779764, 'comment_body': 'As most of the fields have comments that explain what they do, I think we should do the same for this field.', 'comment_created': datetime.datetime(2023, 6, 11, 11, 14, 42, tzinfo=datetime.timezone.utc), 'commenter': 'HemantUmre12', 'type': 'User'}, {'comment_id': 1225793089, 'comment_body': ""I think you missed it. This link shouldn't be part of this commit; the later one should be."", 'comment_created': datetime.datetime(2023, 6, 11, 12, 6, 42, tzinfo=datetime.timezone.utc), 'commenter': 'HemantUmre12', 'type': 'User'}, {'comment_id': 1225873239, 'comment_body': '*multiuse', 'comment_created': datetime.datetime(2023, 6, 11, 17, 31, 37, tzinfo=datetime.timezone.utc), 'commenter': 'HemantUmre12', 'type': 'User'}, {'comment_id': 1225873301, 'comment_body': '*links', 'comment_created': datetime.datetime(2023, 6, 11, 17, 32, 9, tzinfo=datetime.timezone.utc), 'commenter': 'HemantUmre12', 'type': 'User'}, {'comment_id': 1226203473, 'comment_body': 'We can move this inside the if statement below. No need for the query if we are not using it.', 'comment_created': datetime.datetime(2023, 6, 12, 7, 28, 23, tzinfo=datetime.timezone.utc), 'commenter': 'HemantUmre12', 'type': 'User'}, {'comment_id': 1226222153, 'comment_body': ""I was just thinking that inside the action function, we don't check the permission configuration. So if we drop these checks, it will work just fine. However, we still need to keep `user_group.name == default_group_name` to make sure state changes."", 'comment_created': datetime.datetime(2023, 6, 12, 7, 44, 21, tzinfo=datetime.timezone.utc), 'commenter': 'HemantUmre12', 'type': 'User'}, {'comment_id': 1227958319, 'comment_body': 'I added this code after adding all event listener so that we can avoid some duplicate code by using `$(""#generate_multiuse_invite_radio"").trigger(""change"")`', 'comment_created': datetime.datetime(2023, 6, 13, 11, 19, 10, tzinfo=datetime.timezone.utc), 'commenter': 'Ujjawal3', 'type': 'User'}, {'comment_id': 1228023141, 'comment_body': ""I don't know why git is changing this line rather than the later one."", 'comment_created': datetime.datetime(2023, 6, 13, 12, 8, 56, tzinfo=datetime.timezone.utc), 'commenter': 'Ujjawal3', 'type': 'User'}, {'comment_id': 1228027746, 'comment_body': 'I liked the suggested approach. So, updated the code accordingly.', 'comment_created': datetime.datetime(2023, 6, 13, 12, 13, 1, tzinfo=datetime.timezone.utc), 'commenter': 'Ujjawal3', 'type': 'User'}, {'comment_id': 1232384665, 'comment_body': 'I think it is better to pass `update_fields` in `save()`.', 'comment_created': datetime.datetime(2023, 6, 16, 15, 12, 54, tzinfo=datetime.timezone.utc), 'commenter': 'HemantUmre12', 'type': 'User'}, {'comment_id': 1232385207, 'comment_body': 'I think can be better spelled as `if X is None:`.', 'comment_created': datetime.datetime(2023, 6, 16, 15, 13, 22, tzinfo=datetime.timezone.utc), 'commenter': 'HemantUmre12', 'type': 'User'}, {'comment_id': 1232968223, 'comment_body': 'This list is in alphabetical order.', 'comment_created': datetime.datetime(2023, 6, 17, 5, 46, 16, tzinfo=datetime.timezone.utc), 'commenter': 'HemantUmre12', 'type': 'User'}, {'comment_id': 1232978644, 'comment_body': 'These two classes could have been added in a single line: `$(""#email_invite_radio_container"").addClass(""control-label-disabled disabled_setting_tooltip"")`;.', 'comment_created': datetime.datetime(2023, 6, 17, 6, 33, 20, tzinfo=datetime.timezone.utc), 'commenter': 'HemantUmre12', 'type': 'User'}, {'comment_id': 1233000780, 'comment_body': 'Here also `elif X is Y:`.', 'comment_created': datetime.datetime(2023, 6, 17, 8, 46, 17, tzinfo=datetime.timezone.utc), 'commenter': 'HemantUmre12', 'type': 'User'}, {'comment_id': 1234164981, 'comment_body': 'You should add `durable=True` here inside `transaction.atomic`. And we should also add `savepoint=False` for transactions that are performed inside a transaction.', 'comment_created': datetime.datetime(2023, 6, 19, 14, 47, 32, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1234165520, 'comment_body': 'This should also contain `durable=True`.', 'comment_created': datetime.datetime(2023, 6, 19, 14, 48, 1, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1234176574, 'comment_body': 'We can create a system group dict with group name as key and group object as value outside the loop. This way we would avoid calling `.get` in a loop. This works fine currently because there is ony one setting in `REALM_PERMISSION_GROUP_SETTINGS`.', 'comment_created': datetime.datetime(2023, 6, 19, 14, 57, 52, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1234178408, 'comment_body': 'We are avoiding sending the `can_...` properties for new settings here. We instead expect client to calculate whether user can create the links or not using the setting value which is passed above.', 'comment_created': datetime.datetime(2023, 6, 19, 14, 59, 32, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1234233270, 'comment_body': '`rrealm.POLICY_NOBODY` is not `None` so I made it `realm.invite_to_realm_policy is realm.POLICY_NOBODY:`', 'comment_created': datetime.datetime(2023, 6, 19, 15, 49, 54, tzinfo=datetime.timezone.utc), 'commenter': 'Ujjawal3', 'type': 'User'}, {'comment_id': 1234257628, 'comment_body': 'We can have a separate function for group-based settings but I am not sure. We can wait for more feedback.', 'comment_created': datetime.datetime(2023, 6, 19, 16, 19, 43, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1234258578, 'comment_body': 'I think it would be better to combine both these functions for owner and admin and name it accordingly.', 'comment_created': datetime.datetime(2023, 6, 19, 16, 20, 59, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1234272522, 'comment_body': 'I get how this is used, but we can directly add ""_id"" to the setting name. I feel it is unnecessary, but we can wait for more feedback.', 'comment_created': datetime.datetime(2023, 6, 19, 16, 40, 5, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1234273090, 'comment_body': 'But this may be fine since we would convert other settings to group based settings eventually.', 'comment_created': datetime.datetime(2023, 6, 19, 16, 40, 56, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1237946384, 'comment_body': 'Hmm, this seems confusing to have a `check_if_owner_or_administrator_required` function and also another check to verify the user is an admin or not. I think we can instead rename the function to something like `check_admin_permissions` or `check_role_based_permissions` and add a parameter like `require_atleast_admin`. The function could be something like -\r\n```python\r\ndef func_name():\r\n    # owner check based on invite_as value\r\n\r\n    if require_atleast_admin and not user_profile.is_realm_admin:\r\n        raise JsonableError(""Must be an organization administrator"")\r\n\r\n    # admin check based on invite_as value\r\n\r\n```', 'comment_created': datetime.datetime(2023, 6, 22, 3, 22, 34, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1237950835, 'comment_body': 'Why the key for this dict is `Optional[str]`? I expect the `user_group` object would have name set in all cases. Also, we could possibly extract this as a function to get a dict for system groups since that would be re-used at a couple of places.', 'comment_created': datetime.datetime(2023, 6, 22, 3, 31, 12, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1237952560, 'comment_body': 'I guess this has `Optional` because we do not set it for `can_remove_subscribers_group` setting. Just noting here that I have added a commit for this in my PR #26070. We can rebase one of the PRs depending on which PR is merged first, so it is fine for now.', 'comment_created': datetime.datetime(2023, 6, 22, 3, 35, 12, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1237965688, 'comment_body': 'This `login` call can be removed I guess and there are a couple of such lines below as well. Basically there is no need to login as a admin user when changing setting using `do_...` function.', 'comment_created': datetime.datetime(2023, 6, 22, 4, 2, 56, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1238067677, 'comment_body': 'Running this migration gives an error on my system because you cannot access constants like `POLICY_NOBODY` and `NOBODY_GROUP_NAME`. You would need to define them at the top. You can see other such migrations where we do this.', 'comment_created': datetime.datetime(2023, 6, 22, 6, 42, 54, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1238086632, 'comment_body': 'Would also be good to rename `user_can_invite_others_to_realm` to something like `user_can_send_email_invite_to_others`.', 'comment_created': datetime.datetime(2023, 6, 22, 7, 1, 16, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1238103213, 'comment_body': 'A better fix here would to make the selector for setting margin-top to 10px more selective probably by using `input-group` class.', 'comment_created': datetime.datetime(2023, 6, 22, 7, 15, 59, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1238129700, 'comment_body': 'I think we should also test the cases where a user tries to set the setting to these groups and check that these raise an error.', 'comment_created': datetime.datetime(2023, 6, 22, 7, 40, 2, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1238221853, 'comment_body': 'Should I just rename this function or all the variables related to this setting?', 'comment_created': datetime.datetime(2023, 6, 22, 8, 55, 19, tzinfo=datetime.timezone.utc), 'commenter': 'Ujjawal3', 'type': 'User'}, {'comment_id': 1238253708, 'comment_body': 'I think both because having `can_invite_others_to_realm` as `False`, feels user is not allowed to create multiuse link as well. Would probably be better to do this change in a separate prep commit.', 'comment_created': datetime.datetime(2023, 6, 22, 9, 22, 43, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1241470412, 'comment_body': 'Ohh, sorry for the confusion here. But I did not meant to rename the database field and the API fields sent through `/events`, `/register`,etc. endpoints. I only meant the variables used internally. It would be better to get feedback from others before renaming the database fields and the fields sent in API responses.', 'comment_created': datetime.datetime(2023, 6, 26, 3, 26, 48, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1242838590, 'comment_body': 'I have updated the PR. Please have a look.', 'comment_created': datetime.datetime(2023, 6, 26, 21, 49, 19, tzinfo=datetime.timezone.utc), 'commenter': 'Ujjawal3', 'type': 'User'}, {'comment_id': 1243305251, 'comment_body': 'Would be better to use `==` for comparing values here. We generally use `is` for checking if  value is `None` or not.', 'comment_created': datetime.datetime(2023, 6, 27, 8, 0, 43, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1243315109, 'comment_body': 'This should have `durable=True` and not `savepoint=False` since we do not call this function inside another atomic transaction as of now.', 'comment_created': datetime.datetime(2023, 6, 27, 8, 8, 53, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1244924578, 'comment_body': 'There is an extra space here.', 'comment_created': datetime.datetime(2023, 6, 28, 9, 9, 47, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1253737339, 'comment_body': ""What's the thinking behind doing this here rather than around all of `create_internal_realm`? The latter certainly seems more correct to me, since then either we have a fully initialized server or a server that's not initialized at all."", 'comment_created': datetime.datetime(2023, 7, 5, 23, 1, 42, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1253738706, 'comment_body': '`require_admin` would be a more traditional name for this parameter.', 'comment_created': datetime.datetime(2023, 7, 5, 23, 4, 47, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1253740414, 'comment_body': 'I think this block could be replaced by having the one caller pass `require_admin=invited_as in [PreregistrationUser.INVITE_AS[""REALM_ADMIN""], ...]`, maybe with that variable being set on its own line, in the one caller that uses this.', 'comment_created': datetime.datetime(2023, 7, 5, 23, 6, 44, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1253740962, 'comment_body': 'The writing style here feels a lot more sloppy than existing API changelog entries; please read some similar ones and polish this.', 'comment_created': datetime.datetime(2023, 7, 5, 23, 7, 27, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1253741804, 'comment_body': 'I think a better change here would be to add a prep commit that makes this test call `do_create_realm` properly rather than trying to make a realm object hackily this other way.', 'comment_created': datetime.datetime(2023, 7, 5, 23, 8, 35, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1253742817, 'comment_body': '`do_change_realm_permission_group_setting` (singular, and using `change`) feels clearer to me. We\'re changing a single group setting.\r\n\r\nThe reason I prefer ""change"" over ""set"" is that we\'re moving a pointer (the group ID), effectively, rather than changing a value. ', 'comment_created': datetime.datetime(2023, 7, 5, 23, 10, 37, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1253743143, 'comment_body': ""Let's change `name` to `setting_name`, and have an `assert setting_name in REALM_PERMISSION_GROUP_SETTINGS` line, just for readability that we expect this to be one of those values."", 'comment_created': datetime.datetime(2023, 7, 5, 23, 11, 21, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1253743668, 'comment_body': ""As discussed in https://chat.zulip.org/#narrow/stream/378-api-design/topic/event.20for.20updating.20group.20setting/near/1600758, let's avoid the property/value format here."", 'comment_created': datetime.datetime(2023, 7, 5, 23, 12, 36, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1253744122, 'comment_body': 'This is an old pattern; switch this to `send_event_on_commit`. @HemantUmre12 @sahil839 FYI too since you may have some PRs that need this tweak too.', 'comment_created': datetime.datetime(2023, 7, 5, 23, 13, 23, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1253744828, 'comment_body': 'This could be accessing the shorter `REALM_PERMISSION_GROUP_SETTINGS`, right? I think there may be a few more cases in this PR too.', 'comment_created': datetime.datetime(2023, 7, 5, 23, 14, 56, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1253746983, 'comment_body': 'I think an even better plan might be to move them to a central object or dataclass, rather than hanging off a model at all, but agreed this is a good follow-up.', 'comment_created': datetime.datetime(2023, 7, 5, 23, 19, 23, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1253747643, 'comment_body': ""I'm not opposed to this existing; I guess most places that currently reference `REALM_PERMISSION_GROUP_SETTING_ID_TO_GROUP_SETTING` feel like they should access `REALM_PERMISSION_GROUP_SETTINGS` instead, but maybe that doesn't work because of the `_id` suffix. \r\n\r\nI think the right larger model would be to have `GroupPermissionSetting` have an `id_field_name` field."", 'comment_created': datetime.datetime(2023, 7, 5, 23, 20, 55, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1254011956, 'comment_body': 'Most of the places we use the `REALM_PERMISSION_GROUP_SETTING_ID_TO_GROUP_SETTING` object in a loop. So in those places we can just loop over `REALM_PERMISSION_GROUP_SETTINGS` and add ""_id"" to the string like we do for stream settings currently.\r\n\r\nAnd a couple of other places where we use this differently is in `has_permission` code in `models.py` and in `views/realm.py` to check whether a setting is a group-based settings to add its new value in `req_group_setting_vars` object.\r\n\r\nWe can actually directly use `create_multiuse_invite_group` instead of `create_multiuse_invite_group_id` in `has_permission` as we eventually pass user group object in `is_user_in_group`.\r\nWhile this dict is actually helpful to use in the `views/realm.py` code. And that also might be changed if we change the parameters to not have ""_id"" to allow setting them to single user groups.\r\n', 'comment_created': datetime.datetime(2023, 7, 6, 6, 53, 21, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1254013215, 'comment_body': 'But yeah, I agree that having `id_field_name` would be a better plan.', 'comment_created': datetime.datetime(2023, 7, 6, 6, 54, 38, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1254148649, 'comment_body': 'Hmm, keeping this dict is helpful in `views/realm.py`. If we will change the parameters to not have ""_id"" than we can remove this dict. But in that case I think we should also make changes in name of `page_params` and `events` because our current logic in frontend for changing the settings is based on the assumption that name of the setting received in `page_params` is same as name of the parameter used for changing the setting. Otherwise we need to maintain an array in frontend to distinguish between role based and group based setting.', 'comment_created': datetime.datetime(2023, 7, 6, 9, 0, 34, tzinfo=datetime.timezone.utc), 'commenter': 'Ujjawal3', 'type': 'User'}, {'comment_id': 1254735119, 'comment_body': 'By default `do_create_realm` creates a realm with `plan_type`=2. But the test expects realm of `plan_type`=1.', 'comment_created': datetime.datetime(2023, 7, 6, 17, 34, 27, tzinfo=datetime.timezone.utc), 'commenter': 'Ujjawal3', 'type': 'User'}, {'comment_id': 1255697129, 'comment_body': 'I am not sure whether there is anything better which can be done here.', 'comment_created': datetime.datetime(2023, 7, 7, 11, 41, 33, tzinfo=datetime.timezone.utc), 'commenter': 'Ujjawal3', 'type': 'User'}, {'comment_id': 1263144650, 'comment_body': ""Please don't use numerical values like `1`; always use readable values like `Realm.PLAN_TYPE_FOO` instead."", 'comment_created': datetime.datetime(2023, 7, 13, 23, 48, 9, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1283324310, 'comment_body': ""I don't think there is need for this code. It was only needed to pass [this](https://github.com/zulip/zulip/blob/6632eca2dcf2051043e95348658d6da02305669f/zerver/tests/test_import_export.py#L1554) test. In this test `zerver_usergroup` is not present in data but `create_multiuse_invite` field have a value. As `zerver_usergroup` is not present I need  to delete this from imported data. "", 'comment_created': datetime.datetime(2023, 8, 3, 14, 52, 3, tzinfo=datetime.timezone.utc), 'commenter': 'Ujjawal3', 'type': 'User'}, {'comment_id': 1285228813, 'comment_body': 'I am not sure whether we want a separate feature level entry for these API changes.', 'comment_created': datetime.datetime(2023, 8, 6, 14, 50, 8, tzinfo=datetime.timezone.utc), 'commenter': 'Ujjawal3', 'type': 'User'}, {'comment_id': 1286671358, 'comment_body': ""Yeah, this will not be needed. Can we instead modify the test data to set the setting fields to `None`? I guess that's what happens when a slack organization or data from any other product is imported."", 'comment_created': datetime.datetime(2023, 8, 8, 6, 51, 44, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1286682747, 'comment_body': 'I think we should add `atomic = False` here to prevent running a one large transaction.', 'comment_created': datetime.datetime(2023, 8, 8, 7, 4, 2, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1286687625, 'comment_body': 'We can avoid looping over objects here and instead run three queries - one for `invite_to_realm_policy` set to `POLICY_NOBODY`, one for `invite_to_realm_policy` set to `POLICY_ADMINS_ONLY` and one for rest of the realms where each query would be similar to what we do in the `0455` migration (without the batching I guess).\r\n\r\nBut I am not sure whether the complexity is required here for `Realm` table, so we can leave it as it is for now and just add the `atomic = False` as mentioned in the below comment.', 'comment_created': datetime.datetime(2023, 8, 8, 7, 8, 28, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1286710032, 'comment_body': 'I think using same feature level should be fine.', 'comment_created': datetime.datetime(2023, 8, 8, 7, 25, 52, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1286710250, 'comment_body': 'We can use `DELETE` instead of `DEL`.', 'comment_created': datetime.datetime(2023, 8, 8, 7, 26, 4, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1286716392, 'comment_body': 'This change should be done in the last commit that includes changes for this particular feature level.', 'comment_created': datetime.datetime(2023, 8, 8, 7, 30, 5, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1286725398, 'comment_body': 'We should also verify whether the event format sent here is as expected or not like we do in `do_set_realm_property_test`.', 'comment_created': datetime.datetime(2023, 8, 8, 7, 38, 38, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1286865415, 'comment_body': 'Should we just sent the event to admins and the user who would be affected like the one who sent the invite only and not all the non-admin users?', 'comment_created': datetime.datetime(2023, 8, 8, 9, 34, 10, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1286943690, 'comment_body': 'This should mirror the API changelog entries for new realm settings. See feature levels 162, 137, 129, 109.\r\n\r\nAlso, ID should be capitalized and normal text vs formatted as inline code.', 'comment_created': datetime.datetime(2023, 8, 8, 10, 47, 17, tzinfo=datetime.timezone.utc), 'commenter': 'laurynmm', 'type': 'User'}, {'comment_id': 1286952147, 'comment_body': 'Revised text w/link:\r\n`PATCH /realm`: Added `create_multiuse_invite_group` parameter to support changing the user group whose members can create [reusable invitation links](relative link to help center article).\r\n\r\nPerhaps a ""Previously, creating reusable invite links was ..."" note for when this endpoint is documented.', 'comment_created': datetime.datetime(2023, 8, 8, 10, 55, 45, tzinfo=datetime.timezone.utc), 'commenter': 'laurynmm', 'type': 'User'}, {'comment_id': 1286969053, 'comment_body': 'Revised text:\r\n`GET /invites`: Endpoint response for non-admin users now includes both email invitations and reusable invitation links that they have created. Previously, non-admin users could only create email invitations, and therefore the response did not include reusable invitation links for these users.""', 'comment_created': datetime.datetime(2023, 8, 8, 11, 13, 5, tzinfo=datetime.timezone.utc), 'commenter': 'laurynmm', 'type': 'User'}, {'comment_id': 1286971070, 'comment_body': 'Also, maybe revise text to: \r\n\r\n""Non-admin users can now revoke reusable invite links they have created. Previously, only admin users could create and revoke reusable invite links.""', 'comment_created': datetime.datetime(2023, 8, 8, 11, 15, 7, tzinfo=datetime.timezone.utc), 'commenter': 'laurynmm', 'type': 'User'}, {'comment_id': 1286978965, 'comment_body': 'Link to help center documentation, and maybe use ""reusable invitation links"" vs ""invite links"".\r\n\r\nSame note for register response feature level note.', 'comment_created': datetime.datetime(2023, 8, 8, 11, 23, 7, tzinfo=datetime.timezone.utc), 'commenter': 'laurynmm', 'type': 'User'}, {'comment_id': 1286981821, 'comment_body': 'I think we removed the `@` from these system group names. See `can_mention_group` in documentation.\r\n\r\nSame note for register response feature level note.', 'comment_created': datetime.datetime(2023, 8, 8, 11, 26, 8, tzinfo=datetime.timezone.utc), 'commenter': 'laurynmm', 'type': 'User'}, {'comment_id': 1287000573, 'comment_body': 'How about move the sentence from below here:\r\n\r\n```\r\n* You can [restrict the ability to invite new users](#change-who-can-send-invitations) to\r\n join your Zulip organzation to specific [roles](/help/roles-and-permissions).\r\n```', 'comment_created': datetime.datetime(2023, 8, 8, 11, 45, 50, tzinfo=datetime.timezone.utc), 'commenter': 'laurynmm', 'type': 'User'}, {'comment_id': 1287001075, 'comment_body': 'Delete this content here and move first sentence to bullet point above.', 'comment_created': datetime.datetime(2023, 8, 8, 11, 46, 20, tzinfo=datetime.timezone.utc), 'commenter': 'laurynmm', 'type': 'User'}, {'comment_id': 1287002223, 'comment_body': 'I think it would be good to have this be ""Who can create reusable invitation links"" here and in the UI.', 'comment_created': datetime.datetime(2023, 8, 8, 11, 47, 29, tzinfo=datetime.timezone.utc), 'commenter': 'laurynmm', 'type': 'User'}, {'comment_id': 1287003607, 'comment_body': 'Maybe ""Who can create reusable invitation links""?', 'comment_created': datetime.datetime(2023, 8, 8, 11, 48, 42, tzinfo=datetime.timezone.utc), 'commenter': 'laurynmm', 'type': 'User'}, {'comment_id': 1287028843, 'comment_body': 'Maybe change to ""Create a reusable invitation link"" for consistency.', 'comment_created': datetime.datetime(2023, 8, 8, 12, 13, 19, tzinfo=datetime.timezone.utc), 'commenter': 'laurynmm', 'type': 'User'}, {'comment_id': 1287107032, 'comment_body': 'I could not figure out how to define data type of events corresponding to group setting updates. We need to define required keys and optional keys but for these events there should be atleast one key from `Realm.REALM_GROUP_PERMISSIONS_SETTING` . I tried something like this but there was an error because of enum type.\r\n```\r\n    required_keys=[\r\n      (EnumType([setting_name for setting_name in Realm.REALM_PERMISSION_GROUP_SETTINGS]),int),\r\n    ]\r\n```\r\nI looked at other definitions but could not find any where we need to do such thing.', 'comment_created': datetime.datetime(2023, 8, 8, 13, 18, 27, tzinfo=datetime.timezone.utc), 'commenter': 'Ujjawal3', 'type': 'User'}, {'comment_id': 1287116657, 'comment_body': 'Yes we can do that. So I think we should change the function to something like this\r\n```\r\ndef notify_invites_changed(realm: Realm, acting_user: Optional[UserProfile]=None) -> None:\r\n    event = dict(type=""invites_changed"")\r\n    admin_ids = [user.id for user in realm.get_admin_users_and_bots()]\r\n    recipient_ids=admin_ids\r\n    if(acting_user):\r\n        recipient_ids.append(acting_user.id)\r\n   send_event(realm, event, recipient_ids)\r\n```', 'comment_created': datetime.datetime(2023, 8, 8, 13, 25, 22, tzinfo=datetime.timezone.utc), 'commenter': 'Ujjawal3', 'type': 'User'}, {'comment_id': 1288058636, 'comment_body': ""I don't think you can use `EnumType` as a first element of a tuple, it has to be a `str`.\r\n\r\nI think what we can do is define something like `group_setting_update_data_type` as a `DictType` with only `optional_keys` and then check that atlease one field is present. Something similar to what we do for `check_user_group_update`."", 'comment_created': datetime.datetime(2023, 8, 9, 7, 22, 38, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1288059577, 'comment_body': 'Yes, that seems correct.', 'comment_created': datetime.datetime(2023, 8, 9, 7, 23, 30, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1288482928, 'comment_body': 'Yes, I have modified the test data and have removed this code.', 'comment_created': datetime.datetime(2023, 8, 9, 13, 27, 25, tzinfo=datetime.timezone.utc), 'commenter': 'Ujjawal3', 'type': 'User'}, {'comment_id': 1290227395, 'comment_body': ""So, we can just combine these two bullet points, like we do for other new realm settings:\r\n\r\n```markdown\r\n* `PATCH /realm`, [`POST /register`](/api/register-queue),\r\n  [`GET /events`](/api/get-events): Added `create_multiuse_invite_group`\r\n  realm setting, which is the ID of the user group whose members can\r\n  create [reusable invitation links](/help/invite-new-users#create-a-reusable-invitation-link)\r\n  to an organization. Previously, only admin users could create these\r\n  links.\r\n```\r\n\r\nI switched the word order up a little bit so that the text wrapping in the rendered changelog looks better. Also, I think it's best to have the help link in the first bullet point."", 'comment_created': datetime.datetime(2023, 8, 10, 14, 31, 18, tzinfo=datetime.timezone.utc), 'commenter': 'laurynmm', 'type': 'User'}, {'comment_id': 1290230568, 'comment_body': 'We\'ll want a comma after ""Previously"" when it starts a sentence. Again, it would be good to be consistently using ""reusable invitation links"". And let\'s modify the second sentence to focus on the change to the endpoint:\r\n\r\n```markdown\r\n* `POST /invites/multiuse`: Non-admin users can now use this endpoint\r\n  to create reusable invitation links. Previously, this endpoint was\r\n  restricted to admin users only.\r\n```', 'comment_created': datetime.datetime(2023, 8, 10, 14, 33, 36, tzinfo=datetime.timezone.utc), 'commenter': 'laurynmm', 'type': 'User'}, {'comment_id': 1290234905, 'comment_body': ""Small note, there's an extra space after the colon here. I always find it useful to look at the documentation changes in a browser to catch these little things."", 'comment_created': datetime.datetime(2023, 8, 10, 14, 36, 35, tzinfo=datetime.timezone.utc), 'commenter': 'laurynmm', 'type': 'User'}, {'comment_id': 1290237895, 'comment_body': 'Again, let\'s be consistent with ""reusable invitation links"" here.', 'comment_created': datetime.datetime(2023, 8, 10, 14, 38, 48, tzinfo=datetime.timezone.utc), 'commenter': 'laurynmm', 'type': 'User'}, {'comment_id': 1290240323, 'comment_body': ""Again, I think we can just delete all the content before the header here, even the `{!owner-only.md!)` since that's at the top of this page."", 'comment_created': datetime.datetime(2023, 8, 10, 14, 40, 27, tzinfo=datetime.timezone.utc), 'commenter': 'laurynmm', 'type': 'User'}, {'comment_id': 1290243768, 'comment_body': 'One more small tweak here and in the register response:\r\n\r\n```markdown\r\nThe ID of the [user group](/api/get-user-groups) whose members are\r\nallowed to create [reusable invitation\r\nlinks](/help/invite-new-users#create-a-reusable-invitation-link)\r\nto the organization.\r\n```', 'comment_created': datetime.datetime(2023, 8, 10, 14, 42, 49, tzinfo=datetime.timezone.utc), 'commenter': 'laurynmm', 'type': 'User'}, {'comment_id': 1290247785, 'comment_body': 'I think this is being rendered a little differently than the other settings ...\r\n\r\n<details>\r\n<summary>screenshot as Iago</summary>\r\n\r\n![Screenshot from 2023-08-10 15-41-14](https://github.com/zulip/zulip/assets/63245456/ec0db657-6adf-4126-aa87-d2bef86a3df5)\r\n</details>\r\n\r\n', 'comment_created': datetime.datetime(2023, 8, 10, 14, 45, 25, tzinfo=datetime.timezone.utc), 'commenter': 'laurynmm', 'type': 'User'}, {'comment_id': 1293039436, 'comment_body': 'Yeah we use the custom dropdown widget, like the ones used for `New stream announcements` setting for group-based settings. And other settings used the default `select` element.', 'comment_created': datetime.datetime(2023, 8, 14, 6, 52, 53, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1293045784, 'comment_body': 'I am not completely sure, but we might need a changelog entry for this too. @laurynmm FYI.', 'comment_created': datetime.datetime(2023, 8, 14, 6, 58, 50, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1293059131, 'comment_body': 'I think duplicate events are being sent here for admins here. ', 'comment_created': datetime.datetime(2023, 8, 14, 7, 15, 23, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1293062082, 'comment_body': ""I think we don't need to send the event here to `user_profile` since this is called as a result of deactivating the user."", 'comment_created': datetime.datetime(2023, 8, 14, 7, 18, 37, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1293084934, 'comment_body': 'And the setting should be disabled for `Iago`. It is disabled for me.', 'comment_created': datetime.datetime(2023, 8, 14, 7, 43, 5, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1293168058, 'comment_body': 'Yeah, earlier the UI of dropdown widget was not consistent with the other select fields. I made changes in last push and now it looks consistent.', 'comment_created': datetime.datetime(2023, 8, 14, 8, 40, 16, tzinfo=datetime.timezone.utc), 'commenter': 'Ujjawal3', 'type': 'User'}, {'comment_id': 1293239011, 'comment_body': 'Yes, earlier there were duplicate eevents. I have made changes now.', 'comment_created': datetime.datetime(2023, 8, 14, 9, 41, 45, tzinfo=datetime.timezone.utc), 'commenter': 'Ujjawal3', 'type': 'User'}, {'comment_id': 1293403181, 'comment_body': 'Yeah, looking at https://zulip.com/api/get-events#invites_changed, we would need to update the event description for the new users that get these events as well as make a **Changes** note for the previous state (only admins received these events) and a corresponding entry/bullet point in the API changelog for feature level 202 (at this point).', 'comment_created': datetime.datetime(2023, 8, 14, 12, 36, 33, tzinfo=datetime.timezone.utc), 'commenter': 'laurynmm', 'type': 'User'}, {'comment_id': 1293413322, 'comment_body': 'Pulled up the latest changes and the color looks good now, but the down arrow/chevron in the new setting dropdown is still a bit bigger than the other ones (at least in Chrome and Firefox on Linux) ...\r\n\r\n<details>\r\n<summary>Organization settings - Joining the organization - Iago</summary>\r\n\r\n![Screenshot from 2023-08-14 14-41-29](https://github.com/zulip/zulip/assets/63245456/c7ca91b6-ce49-4f8e-a52b-20478b9858dd)\r\n</details>', 'comment_created': datetime.datetime(2023, 8, 14, 12, 46, 51, tzinfo=datetime.timezone.utc), 'commenter': 'laurynmm', 'type': 'User'}, {'comment_id': 1294429696, 'comment_body': 'Needs to be ""the creator of the changed invitation"" because we\'re referring to a specific user and invitation. Might be nice to expand the first sentence for clarity too...\r\n\r\n> A simple event sent when the set of invitations in the organization changes. This event is sent to organization administrators and the creator of the changed invitation; this tells clients ...\r\n\r\nAnd in the **Changes** note below, maybe expand to ""organization administrators"" for consistency with the text above.', 'comment_created': datetime.datetime(2023, 8, 15, 10, 26, 41, tzinfo=datetime.timezone.utc), 'commenter': 'laurynmm', 'type': 'User'}, {'comment_id': 1294432884, 'comment_body': 'Using feature level 163 as a template, how about ...\r\n\r\n```markdown\r\n* [`GET /events`](/api/get-events): When the set of invitations in an\r\n  organization changes, an `invites_changed` event is now sent to the\r\n  creator of the changed invitation, as well as all admin users.\r\n  Previously, this event was only sent to admin users.\r\n```', 'comment_created': datetime.datetime(2023, 8, 15, 10, 31, 20, tzinfo=datetime.timezone.utc), 'commenter': 'laurynmm', 'type': 'User'}, {'comment_id': 1294681898, 'comment_body': 'I think we can do this for other dropdown widgets as well. The widget for ""Who can remove subscribers from this stream"" setting is also different from other dropdowns on the page.\r\n\r\nWould be good to have a discussion on CZO, but should not be a blocker for this PR.', 'comment_created': datetime.datetime(2023, 8, 15, 14, 35, 59, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1317856586, 'comment_body': ""@sahil839 is there a reason `allow_owners_group` should be false here? I can see situations where one might want to limit it to just owners, but wasn't sure if there was some policy situation to think about here."", 'comment_created': datetime.datetime(2023, 9, 6, 21, 32, 36, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1317857432, 'comment_body': 'This is probably fine but deserves a comment. Later we might refactor this function away from living in `models.py` to some `zerver/lib/` space of its own to resolve that.', 'comment_created': datetime.datetime(2023, 9, 6, 21, 33, 38, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1317872713, 'comment_body': 'This is a known issue with the component in general and we can deal with separately.', 'comment_created': datetime.datetime(2023, 9, 6, 21, 56, 11, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1317880509, 'comment_body': 'Yeah, this would be good to discuss in chat.zulip.org @Ujjawal3 can you start such a thread and link back to it here?', 'comment_created': datetime.datetime(2023, 9, 6, 22, 8, 56, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1317890034, 'comment_body': ""I'm pretty sure it's going to be an import cycle to have `server_events_disptach` call a function in the `ui_init` module. I think what we should do is move `update_invite_user_option` into either `gear_menu.js` to or maybe better a new `right_sidebar_ui.js` module that's responsible for that little component.\r\n\r\nThis is OK to merge since we're not trying to avoid import cycles in this module right now, but please start a #frontend discussion about this detail."", 'comment_created': datetime.datetime(2023, 9, 6, 22, 25, 38, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1317892153, 'comment_body': 'There shouldn\'t be a space before the `?` here; I\'ll just fix that before merging.\r\n\r\nAlso, I wonder if it\'d be better to make the check ""If the referrer is anyone other than me""? \r\n\r\n', 'comment_created': datetime.datetime(2023, 9, 6, 22, 29, 25, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1317898370, 'comment_body': ""This logic does not match the API documentation -- we're notifying the **acting user**, not the user who created the modified invitation. I'm pretty sure this implementation is thus wrong if say an administrator revokes an invitation that a normal user had created.\r\n\r\nThis is definitely a bug and we should fix it but it's also obscure enough that I'm not going to block merging this on doing so; we can just fix it in a near-term follow-up."", 'comment_created': datetime.datetime(2023, 9, 6, 22, 34, 9, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1317907529, 'comment_body': ""So I think we actually want the default for existing administrators that hadn't specified `NOBODY` as their policy to be `role:administrators`, because that way we don't adjust permissions for anyone upwards unexpectedly. "", 'comment_created': datetime.datetime(2023, 9, 6, 22, 52, 26, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1317912629, 'comment_body': '``` diff\r\ndiff --git a/zerver/migrations/0470_set_default_value_for_create_multiuse_invite_group.py b/zerver/migrations/0470_set_default_value_for_create_multiuse_invite_group.py\r\nindex f162fb3e05..6a82d6afea 100644\r\n--- a/zerver/migrations/0470_set_default_value_for_create_multiuse_invite_group.py\r\n+++ b/zerver/migrations/0470_set_default_value_for_create_multiuse_invite_group.py\r\n@@ -11,34 +11,23 @@ def set_default_value_for_create_multiuse_invite_group(\r\n     Realm = apps.get_model(""zerver"", ""Realm"")\r\n     UserGroup = apps.get_model(""zerver"", ""UserGroup"")\r\n \r\n-    Realm.POLICY_NOBODY = 6\r\n-    Realm.POLICY_ADMINS_ONLY = 2\r\n-\r\n-    UserGroup.NOBODY_GROUP_NAME = ""role:nobody""\r\n     UserGroup.ADMINISTRATORS_GROUP_NAME = ""role:administrators""\r\n-    default_group_name = ""role:moderators""\r\n \r\n     for realm in Realm.objects.all():\r\n-        if realm.create_multiuse_invite_group is None:\r\n-            if realm.invite_to_realm_policy == Realm.POLICY_NOBODY:\r\n-                nobody_group = UserGroup.objects.get(\r\n-                    name=UserGroup.NOBODY_GROUP_NAME, realm=realm, is_system_group=True\r\n-                )\r\n-                realm.create_multiuse_invite_group = nobody_group\r\n-\r\n-            elif realm.invite_to_realm_policy == Realm.POLICY_ADMINS_ONLY:\r\n-                admins_group = UserGroup.objects.get(\r\n-                    name=UserGroup.ADMINISTRATORS_GROUP_NAME, realm=realm, is_system_group=True\r\n-                )\r\n-                realm.create_multiuse_invite_group = admins_group\r\n-\r\n-            else:\r\n-                default_group = UserGroup.objects.get(\r\n-                    name=default_group_name, realm=realm, is_system_group=True\r\n-                )\r\n-                realm.create_multiuse_invite_group = default_group\r\n-\r\n-            realm.save(update_fields=[""create_multiuse_invite_group""])\r\n+        if realm.create_multiuse_invite_group is not None:\r\n+            continue\r\n+\r\n+        # Prior to the new create_multiuse_invite_group field being\r\n+        # created, multi-use invitation links could only be created\r\n+        # and managed by administrators, regardless of\r\n+        # invite_to_realm_policy. We replicate that policy for the\r\n+        # initial value of the new setting.\r\n+        admins_group = UserGroup.objects.get(\r\n+            name=UserGroup.ADMINISTRATORS_GROUP_NAME, realm=realm, is_system_group=True\r\n+        )\r\n+        realm.create_multiuse_invite_group = admins_group\r\n+\r\n+        realm.save(update_fields=[""create_multiuse_invite_group""])\r\n \r\n \r\n class Migration(migrations.Migration):\r\n```', 'comment_created': datetime.datetime(2023, 9, 6, 23, 2, 3, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1317914970, 'comment_body': ""After discussion with @alya, I think we should change this to `ADMINISTRATORS_GROUP_NAME`; we couldn't come up with a ton of use cases for moderator use of this, and I feel like that might better match user expectations in new organizations."", 'comment_created': datetime.datetime(2023, 9, 6, 23, 6, 47, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1318000872, 'comment_body': 'I think there is nothing wrong. We are passing the user who created the invitation not the one changing the invitation to `acting_user`. We must change the `acting_user` to some other name to avoid this confusion. ', 'comment_created': datetime.datetime(2023, 9, 7, 2, 0, 53, tzinfo=datetime.timezone.utc), 'commenter': 'Ujjawal3', 'type': 'User'}, {'comment_id': 1318002423, 'comment_body': 'I have started the discussion about this earlier [here](https://chat.zulip.org/#narrow/stream/101-design/topic/Large.20down.20arrow.20in.20dropdown.20list.20widget)', 'comment_created': datetime.datetime(2023, 9, 7, 2, 3, 22, tzinfo=datetime.timezone.utc), 'commenter': 'Ujjawal3', 'type': 'User'}, {'comment_id': 1318169422, 'comment_body': ""I am not sure. I thought it was described as such in the issue, but it isn't. I don't think there would be any issues to allow `Owners only` option. @Ujjawal3 can you confirm if we are missing something here? If not then we can set `allow_owners_group` as true."", 'comment_created': datetime.datetime(2023, 9, 7, 7, 2, 20, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1318178236, 'comment_body': 'Yeah, I think we can just rename the `acting_user` to something else. I was thinking of `referred_by` first, but that would also be confusing since we do not include which invite wass changed in the event. Probably something like `changed_invite_referrer` could be better.', 'comment_created': datetime.datetime(2023, 9, 7, 7, 10, 33, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1318884468, 'comment_body': 'Yeah `changed_invite_referrer` works for me.', 'comment_created': datetime.datetime(2023, 9, 7, 16, 50, 20, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}]","[{'commit_sha': '65e1b14dcd3aaec1999f37e32332fe6bf11a5993', 'committer_username': 'Ujjawal3', 'committer_name': 'Ujjawal Modi', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 5, 9, 46, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1076b91b58be1ba718faff4c7fb69f9ad01cc367', 'committer_username': 'Ujjawal3', 'committer_name': 'Ujjawal Modi', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 5, 9, 46, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f942d8d15dbc5a9bc7cf04dd4cac25243ed43adf', 'committer_username': 'Ujjawal3', 'committer_name': 'Ujjawal Modi', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 5, 9, 46, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4313be654becad21e2cec648d0ec20273e40818f', 'committer_username': 'timabbott', 'committer_name': 'Tim Abbott', 'committer_email': None, 'commit_date': datetime.datetime(2012, 11, 7, 21, 18, 39, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c805c4906403b32e6b05cd6e0f0079c148aa7b4f', 'committer_username': 'Ujjawal3', 'committer_name': 'Ujjawal Modi', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 5, 9, 46, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e4b22927e94f87e0e3801575910e9ce8576f6bf5', 'committer_username': 'Ujjawal3', 'committer_name': 'Ujjawal Modi', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 5, 9, 46, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cc974815de7f92daeb18617b015a8c6a7915ccf0', 'committer_username': 'Ujjawal3', 'committer_name': 'Ujjawal Modi', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 5, 9, 46, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '47cb883d681a246023e52f3476db089d4a1e2393', 'committer_username': 'Ujjawal3', 'committer_name': 'Ujjawal Modi', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 5, 9, 46, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '05af0ce504b3a0ab8cfd10fd483d786a707359f7', 'committer_username': 'Ujjawal3', 'committer_name': 'Ujjawal Modi', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 5, 9, 46, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f43281518b4f1f138928a58ba96e9dab4ca9c65a', 'committer_username': 'Ujjawal3', 'committer_name': 'Ujjawal Modi', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 5, 9, 46, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9100f8756f716014fdddbe71d861b43443fae0a4', 'committer_username': 'Ujjawal3', 'committer_name': 'Ujjawal Modi', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 5, 9, 46, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3eb18fd117c93147092abca881d3fe5059269c85', 'committer_username': 'Ujjawal3', 'committer_name': 'Ujjawal Modi', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 5, 9, 46, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '96f4749edaafcfc9bd5f0380457b7b2bb2723207', 'committer_username': 'Ujjawal3', 'committer_name': 'Ujjawal Modi', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 5, 9, 46, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1e9c7145f2ea7c18720ec776e54a6ea9ee8e0d30', 'committer_username': 'timabbott', 'committer_name': 'Tim Abbott', 'committer_email': None, 'commit_date': datetime.datetime(2012, 11, 7, 21, 18, 39, tzinfo=datetime.timezone.utc)}]",Ujjawal Modi,99073049,,User,,30,,28,14
1404689508,Allow admin to set organization language at creation time,"Commit-1: Adds a new dropdown, 'Organization language,' to the `/new` and `/realm/register` pages and utilizes it to set the `default_language` field of the `Realm` model.

Commit-2: Uses the `Realm.default_language` value, which is set by selecting the 'Organization language,' to internationalize the introductory messages of the initial streams.

Fixes: #25729.

<!-- Describe your pull request here.-->

<!-- If the PR makes UI changes, always include one or more still screenshots to demonstrate your changes. If it seems helpful, add a screen capture of the new functionality as well.

Tooling tips: https://zulip.readthedocs.io/en/latest/tutorials/screenshot-and-gif-software.html
-->

<details>
<summary>Screenshots and screen captures</summary>



https://github.com/zulip/zulip/assets/87542880/f989f46d-2055-4fe3-90d5-860b476cb233



</details>


<details>
<summary>Self-review checklist</summary>

<!-- Prior to submitting a PR, follow our step-by-step guide to review your own code:
https://zulip.readthedocs.io/en/latest/contributing/code-reviewing.html#how-to-review-code -->

<!-- Once you create the PR, check off all the steps below that you have completed.
If any of these steps are not relevant or you have not completed, leave them unchecked.-->

- [ ] [Self-reviewed](https://zulip.readthedocs.io/en/latest/contributing/code-reviewing.html#how-to-review-code) the changes for clarity and maintainability
      (variable names, code reuse, readability, etc.).

Communicate decisions, questions, and potential concerns.

- [x] Explains differences from previous plans (e.g., issue description).
- [x] Highlights technical choices and bugs encountered.
- [x] Calls out remaining decisions and concerns.
- [x] Automated tests verify logic where appropriate.

Individual commits are ready for review (see [commit discipline](https://zulip.readthedocs.io/en/latest/contributing/commit-discipline.html)).

- [x] Each commit is a coherent idea.
- [x] Commit message(s) explain reasoning and motivation for changes.

Completed manual review and testing of the following:

- [x] Visual appearance of the changes.
- [x] Responsiveness and internationalization.
- [x] Strings and tooltips.
- [x] End-to-end functionality of buttons, interactions and flows.
- [x] Corner cases, error conditions, and easily imagined bugs.
</details>
",True,26102,https://api.github.com/repos/zulip/zulip/pulls/26102,https://github.com/zulip/zulip/pull/26102,closed,259,77,19,5,16,14,2,0,"[{'name': 'size: XL'}, {'name': 'maintainer review'}]",2023-06-23 08:24:58+00:00,2023-10-26 23:27:36+00:00,10854158.0,"125 days, 15:02:38","[{'comment_id': 1242031069, 'comment_body': 'I added this since I received the following error. I don\'t know if it\'s the correct way to fix it.\r\n````\r\nDROP DATABASE\r\nnu.validator.servlet.VerifierServletTransaction - Starting static initializer.\r\nnu.validator.servlet.VerifierServletTransaction - Reading miscellaneous properties.\r\nnu.validator.servlet.VerifierServletTransaction - Starting to loop over config file lines.\r\nnu.validator.servlet.VerifierServletTransaction - Finished reading config.\r\nnu.validator.servlet.VerifierServletTransaction - Converted config to arrays.\r\nnu.validator.servlet.VerifierServletTransaction - Prepared namespace array.\r\nnu.validator.servlet.VerifierServletTransaction - Parsed doctype numbers into ints.\r\nnu.validator.servlet.VerifierServletTransaction - The cache path prefix is: null\r\nnu.validator.servlet.VerifierServletTransaction - Parsing set up. Starting to read schemas.\r\nnu.validator.servlet.VerifierServletTransaction - Will load schema: http://s.validator.nu/html5.rnc\r\nCREATE DATABASE\r\nnu.validator.servlet.VerifierServletTransaction - Will load schema: http://s.validator.nu/html5-all.rnc\r\nnu.validator.servlet.VerifierServletTransaction - Will load schema: http://s.validator.nu/xhtml5.rnc\r\n\r\nWaiting for test server (may take a while).nu.validator.servlet.VerifierServletTransaction - Will load schema: http://s.validator.nu/xhtml5-all.rnc\r\nnu.validator.servlet.VerifierServletTransaction - Will load schema: http://s.validator.nu/svg-xhtml5-rdf-mathml.rnc\r\n.nu.validator.servlet.VerifierServletTransaction - Schemas read.\r\nnu.validator.servlet.VerifierServletTransaction - Reading spec.\r\n..........nu.validator.servlet.VerifierServletTransaction - Spec read.\r\n.\r\nWARNING: Future checker releases will bind by default to 127.0.0.1.\r\nYour checker deployment might become unreachable unless you use the\r\nnu.validator.servlet.bind-address system property or --bind-address\r\nscript option to bind the checker to a different address:\r\n\r\n  python ./checker.py --bind-address 172.18.0.2 run\r\n  java -Dnu.validator.servlet.bind-address=172.18.0.2 -cp vnu.jar nu.validator.servlet.Main 8888\r\n  vnu-runtime-image/bin/java -Dnu.validator.servlet.bind-address=172.18.0.2 nu.validator.servlet.Main 8888\r\n  vnu-runtime-image\\bin\\java.exe -Dnu.validator.servlet.bind-address=172.18.0.2 nu.validator.servlet.Main 8888\r\n\r\nChecker service started at http://127.0.0.1:9988/\r\n\r\n\r\n--- SERVER IS UP! ---\r\n\r\n2023-06-25 16:01:04 [portico_documentation_crawler] ERROR: ""http://localhost:9981/new/"":243.46-243.57: info: Text run is not in Unicode Normalization Form C.\r\n\r\nFailed\r\n\r\nError: Process completed with exit code 1.\r\n````', 'comment_created': datetime.datetime(2023, 6, 26, 11, 16, 44, tzinfo=datetime.timezone.utc), 'commenter': 'HemantUmre12', 'type': 'User'}, {'comment_id': 1245242587, 'comment_body': 'It is not clear to me when you are seeing this error. Are you seeing this on locally or on CI?', 'comment_created': datetime.datetime(2023, 6, 28, 13, 49, 21, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1245253868, 'comment_body': 'Might be better to use `default_language` as the parameter here since we use the same in models.py.', 'comment_created': datetime.datetime(2023, 6, 28, 13, 56, 53, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1245268439, 'comment_body': 'We should use `default_language` here so that we have the same field name in `PreregistrationRealm` and `Realm` objects.', 'comment_created': datetime.datetime(2023, 6, 28, 14, 4, 29, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1245276506, 'comment_body': '`realm_default_language` should be more clear than `realm_language`.', 'comment_created': datetime.datetime(2023, 6, 28, 14, 8, 54, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1245326051, 'comment_body': 'Having passed all tests locally, I encounter this error during CI.', 'comment_created': datetime.datetime(2023, 6, 28, 14, 34, 56, tzinfo=datetime.timezone.utc), 'commenter': 'HemantUmre12', 'type': 'User'}, {'comment_id': 1245484037, 'comment_body': 'I am not sure as well that why the test is failing. You can ask in #automated-testing stream on CZO. Sharing a link to the failed job might be helpful. I can see this at https://github.com/zulip/zulip/actions/runs/5370569466/jobs/9742740276#step:16:98 but I am not sure about who all can access this.', 'comment_created': datetime.datetime(2023, 6, 28, 16, 32, 55, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1267498533, 'comment_body': 'Would be better to this text in a variable for readability like `italian_translation_for_private_stream` or something similar.', 'comment_created': datetime.datetime(2023, 7, 19, 3, 25, 58, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1267503246, 'comment_body': ""We use a simple `CharField` for `default_languge` in models.py, so that would have worked fine too. Let's keep it like this for now and update after some more feedback."", 'comment_created': datetime.datetime(2023, 7, 19, 3, 38, 32, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1267505616, 'comment_body': 'Would have been good to avoid this duplication here. Can we just pass the default code in `RealmCreationForm` as `initial_data`?', 'comment_created': datetime.datetime(2023, 7, 19, 3, 45, 24, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1271862752, 'comment_body': 'We should check whether the result contains something like `Enter valid langauge` or something like that.', 'comment_created': datetime.datetime(2023, 7, 24, 7, 34, 24, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1320423967, 'comment_body': 'So adding this bit of code to see which language has unicode normalization inconsistency, I get this:\r\n\r\n`Tiếng Việt Tiếng Việt False`\r\n\r\n```\r\n                normalized = unicodedata.normalize(""NFC"", lang_info[""name_local""])                      \r\n                print(lang_info[""name_local""], normalized, normalized == lang_info[""name_local""])       \r\n```\r\n\r\n', 'comment_created': datetime.datetime(2023, 9, 8, 23, 33, 3, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1320425397, 'comment_body': 'Linking a previous discussion: [#automated testing > Unicode normalization error](https://chat.zulip.org/#narrow/stream/43-automated-testing/topic/Unicode.20normalization.20error/near/1600910).\r\n\r\nOpened\r\n\r\n- #26674', 'comment_created': datetime.datetime(2023, 9, 8, 23, 37, 11, tzinfo=datetime.timezone.utc), 'commenter': 'andersk', 'type': 'User'}, {'comment_id': 1320427991, 'comment_body': '(In the future, @HemantUmre12, please cross-link in both directions when you start a conversation about some detail in a PR)', 'comment_created': datetime.datetime(2023, 9, 8, 23, 45, 42, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}]","[{'commit_sha': '86b57d79ee1fa6aa4f1e412f96af2cb3cefdd184', 'committer_username': 'HemantUmre12', 'committer_name': 'Hemant Umre', 'committer_email': None, 'commit_date': datetime.datetime(2021, 7, 16, 17, 44, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': '25b89a35ba2ec98448b9b34d5575be2b136422cb', 'committer_username': 'HemantUmre12', 'committer_name': 'Hemant Umre', 'committer_email': None, 'commit_date': datetime.datetime(2021, 7, 16, 17, 44, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cfe7b692347ad4efb059129124aa61c2dfd310d4', 'committer_username': 'timabbott', 'committer_name': 'Tim Abbott', 'committer_email': None, 'commit_date': datetime.datetime(2012, 11, 7, 21, 18, 39, tzinfo=datetime.timezone.utc)}, {'commit_sha': '21a6ffad5368c50ded8407775e4ff58184419a4e', 'committer_username': 'timabbott', 'committer_name': 'Tim Abbott', 'committer_email': None, 'commit_date': datetime.datetime(2012, 11, 7, 21, 18, 39, tzinfo=datetime.timezone.utc)}, {'commit_sha': '447ff901e237245b3b718f29adfecd4c9e0493f9', 'committer_username': 'andersk', 'committer_name': 'Anders Kaseorg', 'committer_email': 'andersk@mit.edu', 'commit_date': datetime.datetime(2008, 9, 27, 3, 31, 9, tzinfo=datetime.timezone.utc)}]",Hemant Umre,87542880,,User,,42,,0,6
1421680175,Improve design of empty list view.,"<!-- Describe your pull request here.-->
Based on the discussion [here](https://chat.zulip.org/#narrow/stream/9-issues/topic/.22No.20topics.20match.22.20on.20Recent.20conversations/near/1600888), we wanted to avoid using the `::after` pseudo-element for non-decorative content. As a solution, This PR adds a new function `render_empty_list_message_if_needed` to the list widget in `list_widget.js`. This function displays a message using the `data-empty` dataset when the list is empty, effectively replacing the need for the `::after` pseudo-element in rendering the empty list message.

Fixes: #23072<!-- Issue link, or clear description.-->

Related PR: #23134

<!-- If the PR makes UI changes, always include one or more still screenshots to demonstrate your changes. If it seems helpful, add a screen capture of the new functionality as well.

Tooling tips: https://zulip.readthedocs.io/en/latest/tutorials/screenshot-and-gif-software.html
-->

<details>
<summary>Screenshots and screen captures</summary>

![image](https://github.com/zulip/zulip/assets/87542880/dd9b3c2b-eea3-4697-abd5-e6dee1d05d54)
![image](https://github.com/zulip/zulip/assets/87542880/1eed95b3-3c15-4284-8ec4-dd65742259d7)

![image](https://github.com/zulip/zulip/assets/87542880/e37279c7-169a-4090-956e-f4e9d6a7bd17)

![image](https://github.com/zulip/zulip/assets/87542880/97ad6c4c-1959-4eac-976e-e8058dbb3322)

![image](https://github.com/zulip/zulip/assets/87542880/02dfdab1-6ed6-47bc-9523-2044c561be6c)

![image](https://github.com/zulip/zulip/assets/87542880/1f50b998-272e-4c78-91d8-ed8f87074b6b)

![image](https://github.com/zulip/zulip/assets/87542880/83f2bd93-0a03-4d03-a006-7cded6d571f3)
![image](https://github.com/zulip/zulip/assets/87542880/55a73316-5864-42c7-8a1e-968b9e0e8588)

![image](https://github.com/zulip/zulip/assets/87542880/4d7e55a8-0bec-43c2-a36b-6d93f02b15cb)

![image](https://github.com/zulip/zulip/assets/87542880/8473a757-c818-4d25-b1c7-dfaaf31ffdbd)
![image](https://github.com/zulip/zulip/assets/87542880/95fcad68-95ac-4cbe-ae8c-27a75c7e32d3)

![image](https://github.com/zulip/zulip/assets/87542880/613ee677-37b9-4070-84e1-4b67eed36fef)

![image](https://github.com/zulip/zulip/assets/87542880/57e3f723-043a-44e2-8a41-a1fd31d40116)

![image](https://github.com/zulip/zulip/assets/87542880/a3c6ad2d-d56b-4610-8622-65c0f68b634b)


</details>

<details>
<summary>Self-review checklist</summary>

<!-- Prior to submitting a PR, follow our step-by-step guide to review your own code:
https://zulip.readthedocs.io/en/latest/contributing/code-reviewing.html#how-to-review-code -->

<!-- Once you create the PR, check off all the steps below that you have completed.
If any of these steps are not relevant or you have not completed, leave them unchecked.-->

- [x] [Self-reviewed](https://zulip.readthedocs.io/en/latest/contributing/code-reviewing.html#how-to-review-code) the changes for clarity and maintainability
      (variable names, code reuse, readability, etc.).

Communicate decisions, questions, and potential concerns.

- [x] Explains differences from previous plans (e.g., issue description).
- [x] Highlights technical choices and bugs encountered.
- [ ] Calls out remaining decisions and concerns.
- [ ] Automated tests verify logic where appropriate.

Individual commits are ready for review (see [commit discipline](https://zulip.readthedocs.io/en/latest/contributing/commit-discipline.html)).

- [x] Each commit is a coherent idea.
- [x] Commit message(s) explain reasoning and motivation for changes.

Completed manual review and testing of the following:

- [x] Visual appearance of the changes.
- [x] Responsiveness and internationalization.
- [x] Strings and tooltips.
- [ ] End-to-end functionality of buttons, interactions and flows.
- [x] Corner cases, error conditions, and easily imagined bugs.
</details>
",True,26196,https://api.github.com/repos/zulip/zulip/pulls/26196,https://github.com/zulip/zulip/pull/26196,closed,173,72,32,7,9,22,2,0,"[{'name': 'size: XL'}, {'name': 'integration review'}]",2023-07-05 19:54:05+00:00,2023-10-12 01:03:53+00:00,8485788.0,"98 days, 5:09:48","[{'comment_id': 1254437915, 'comment_body': ""The idea of reaching into `list_widget` to get this functionality feels like it breaks the encapsulation of `buddy_list`, which already has its own separate widget for building lists.  I'm not saying it's **definitely** a bad strategy, but it's worthy of debate.  If there's a somewhat simple way to just extend `buddy_list` code to support this paradigm, even with a tiny bit of code duplication, I think I would prefer things to be decoupled here."", 'comment_created': datetime.datetime(2023, 7, 6, 13, 23, 56, tzinfo=datetime.timezone.utc), 'commenter': 'showell', 'type': 'User'}, {'comment_id': 1254572967, 'comment_body': ""BTW I don't think any discussion here should block the PR, as it can always be addressed after the fact."", 'comment_created': datetime.datetime(2023, 7, 6, 15, 3, 58, tzinfo=datetime.timezone.utc), 'commenter': 'showell', 'type': 'User'}, {'comment_id': 1255854726, 'comment_body': 'This small chunk of code seems really easy to extract into a function called `get_column_count_for_table($table)` and call it with `const column_count = get_column_count_for_table($container)`.', 'comment_created': datetime.datetime(2023, 7, 7, 13, 49, 29, tzinfo=datetime.timezone.utc), 'commenter': 'showell', 'type': 'User'}, {'comment_id': 1255857499, 'comment_body': ""It seems like we should just have two separate templates for the table version and the list version, and then just push up the conditional into actual JavaScript.  The two code paths don't seem to have enough in common to justify having all these ugly conditionals in the template."", 'comment_created': datetime.datetime(2023, 7, 7, 13, 51, 31, tzinfo=datetime.timezone.utc), 'commenter': 'showell', 'type': 'User'}, {'comment_id': 1257844135, 'comment_body': 'Is `render_empty_list_message` or `show_empty_list_message` a better name? Using toggle fells like it will also hide the message if it is rendered.', 'comment_created': datetime.datetime(2023, 7, 10, 7, 36, 37, tzinfo=datetime.timezone.utc), 'commenter': 'Ujjawal3', 'type': 'User'}, {'comment_id': 1257891576, 'comment_body': 'I think `show_empty_results_message` is a better name for `filter_value`.', 'comment_created': datetime.datetime(2023, 7, 10, 8, 17, 50, tzinfo=datetime.timezone.utc), 'commenter': 'Ujjawal3', 'type': 'User'}, {'comment_id': 1264075304, 'comment_body': ""Makes sense. I've named it `render_empty_list_message_if_needed` for now. We directly call it in places and the function itself checks whether to render the message or not."", 'comment_created': datetime.datetime(2023, 7, 14, 19, 23, 14, tzinfo=datetime.timezone.utc), 'commenter': 'HemantUmre12', 'type': 'User'}, {'comment_id': 1264081568, 'comment_body': ""I'm not sure about that. I think `filter_value` simply represents what it contains. Since `filter_value` is expected to contain `strings`, naming it as `show_empty_results_message` doesn't sound correct."", 'comment_created': datetime.datetime(2023, 7, 14, 19, 31, 25, tzinfo=datetime.timezone.utc), 'commenter': 'HemantUmre12', 'type': 'User'}, {'comment_id': 1269507832, 'comment_body': 'This UI does not uses `list_widget` module to render the bot list but seems fine for now to use this to avoid duplication. This should not require much duplication though.', 'comment_created': datetime.datetime(2023, 7, 20, 14, 0, 20, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1269512956, 'comment_body': 'I am not sure we need this `!empty_list_message` check here if this function is used for this list only as we know that this list has the `data-empty` attribute set. And we can probably anyway define the message here itself, but am not sure. We can wait for more feedback.', 'comment_created': datetime.datetime(2023, 7, 20, 14, 4, 8, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1269514524, 'comment_body': 'There is no filter object in alert words pannel currently, so we can probably remove `data-search-results-empty` for now.', 'comment_created': datetime.datetime(2023, 7, 20, 14, 5, 24, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1291203713, 'comment_body': 'From reading the code, I understand that this class needs to be added to hide the border around the container parent for list in user profile modal. Would be better to not have this here and only have this code specifically only for the lists which need this.\r\n\r\nI think this can be done by using `callback_after_render` and defining `onupdate` function in `filter`.', 'comment_created': datetime.datetime(2023, 8, 11, 10, 59, 1, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1291212202, 'comment_body': '`empty-list-message-for-table` sounds weird. `empty-table-message` or `empty-list-message` might be better. ', 'comment_created': datetime.datetime(2023, 8, 11, 11, 8, 51, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1296763507, 'comment_body': 'Can this be in a separate commit as we are not handling the search filter case here?', 'comment_created': datetime.datetime(2023, 8, 17, 7, 4, 24, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1299375985, 'comment_body': ""Added a separate commit. It's not a mandatory change though."", 'comment_created': datetime.datetime(2023, 8, 20, 13, 15, 55, tzinfo=datetime.timezone.utc), 'commenter': 'HemantUmre12', 'type': 'User'}, {'comment_id': 1299378399, 'comment_body': '> Posted one comment. And I cannot see the empty message in ""Custom emoji"" panel if there are no custom emojis for the realm.\r\n\r\n@sahil839 fixed it here. You can take a look. Thanks!', 'comment_created': datetime.datetime(2023, 8, 20, 13, 32, 5, tzinfo=datetime.timezone.utc), 'commenter': 'HemantUmre12', 'type': 'User'}, {'comment_id': 1301660074, 'comment_body': 'Can a better solution for this would be just exclude deactivated emojis from the list at the start only, i.e. before passing the data to `ListWidget`.', 'comment_created': datetime.datetime(2023, 8, 22, 13, 35, 4, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1301668966, 'comment_body': 'So, would be god to have this as a separate commit, in case we do not want to merge it.', 'comment_created': datetime.datetime(2023, 8, 22, 13, 41, 25, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1356119089, 'comment_body': ""Are we okay having `id`s that occur multiple times in the DOM? I thought it was best practice to use classnames for things we can't guarantee only appear once."", 'comment_created': datetime.datetime(2023, 10, 12, 6, 11, 13, tzinfo=datetime.timezone.utc), 'commenter': 'evykassirer', 'type': 'User'}, {'comment_id': 1356377647, 'comment_body': '@HemantUmre12 is there a reason for this and `empty-table-message` be not classes?', 'comment_created': datetime.datetime(2023, 10, 12, 7, 19, 29, tzinfo=datetime.timezone.utc), 'commenter': 'amanagr', 'type': 'User'}, {'comment_id': 1359858747, 'comment_body': 'Opened #27225', 'comment_created': datetime.datetime(2023, 10, 15, 11, 24, 11, tzinfo=datetime.timezone.utc), 'commenter': 'amanagr', 'type': 'User'}, {'comment_id': 1359921971, 'comment_body': 'Sorry for the late reply. I used `id` here to raise the specificity of the style. I agree with @evykassirer that if we can avoid using `id`, it would be better. Alternatively, we might need to write couple lines of CSS in a few places.', 'comment_created': datetime.datetime(2023, 10, 15, 18, 5, 9, tzinfo=datetime.timezone.utc), 'commenter': 'HemantUmre12', 'type': 'User'}]","[{'commit_sha': 'e22c25646460bfe38d999eb37144daafea09f493', 'committer_username': 'HemantUmre12', 'committer_name': 'Hemant Umre', 'committer_email': None, 'commit_date': datetime.datetime(2021, 7, 16, 17, 44, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0b86f39fc0aac17bdbd3035a27368b2544b24803', 'committer_username': 'HemantUmre12', 'committer_name': 'Hemant Umre', 'committer_email': None, 'commit_date': datetime.datetime(2021, 7, 16, 17, 44, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': '89fb67958211c0d5925fd971363fa6afbb3d1d7a', 'committer_username': 'HemantUmre12', 'committer_name': 'Hemant Umre', 'committer_email': None, 'commit_date': datetime.datetime(2021, 7, 16, 17, 44, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': '46bce9613f15f7c08a1727b24dbfb827bb369f54', 'committer_username': 'HemantUmre12', 'committer_name': 'Hemant Umre', 'committer_email': None, 'commit_date': datetime.datetime(2021, 7, 16, 17, 44, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0f3ab376f86b480a2ad0b46dc728edb8c7bd9e6c', 'committer_username': 'HemantUmre12', 'committer_name': 'Hemant Umre', 'committer_email': None, 'commit_date': datetime.datetime(2021, 7, 16, 17, 44, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7ec2699c7f2b2a33c89223237ca9d67e56033b03', 'committer_username': 'HemantUmre12', 'committer_name': 'Hemant Umre', 'committer_email': None, 'commit_date': datetime.datetime(2021, 7, 16, 17, 44, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': '043e95a772010706a82363cfbbee81c156ee543c', 'committer_username': 'HemantUmre12', 'committer_name': 'Hemant Umre', 'committer_email': None, 'commit_date': datetime.datetime(2021, 7, 16, 17, 44, 47, tzinfo=datetime.timezone.utc)}]",Hemant Umre,87542880,,User,,42,,0,6
1424284764,"Fix exception exiting ""more topics"" after losing access to a stream","The `stream_list.build_stream_list()` function is responsible for rendering the stream list in the left sidebar. Previously, it uses `topic_list.clear()` to clear the `active_widgets` that tracks active stream(s) in the left sidebar. This led to a bug where rendering stream list after adding or removing a stream through `build_stream_list()` while a stream was zoomed in (""more topics"" clicked) didn't fully exit the ""more topics"" view. So clicking ""BACK TO STREAMS"" throws an exception with the message ""Error: Unexpected number of topic lists to zoom out"" because `active_widgets`, cleared by `topic_list.clear()`, became inaccessible.

To address this issue, instead of clearing the topics list with `topic_list.clear()`, the code now ensures the closure of the zoomed stream by using `topic_zoom.clear_topics()`. This change ensures a proper exit from the ""more topics"" view and avoids the exception.

Fixes #25670.

<!-- Describe your pull request here.-->

<!-- If the PR makes UI changes, always include one or more still screenshots to demonstrate your changes. If it seems helpful, add a screen capture of the new functionality as well.

Tooling tips: https://zulip.readthedocs.io/en/latest/tutorials/screenshot-and-gif-software.html
-->

<details>
<summary>Before</summary>

https://github.com/zulip/zulip/assets/87542880/65936a26-9601-4cbf-b201-aee536b541ab

</details>

<details>
<summary>After</summary>

https://github.com/zulip/zulip/assets/87542880/c84f5470-ef2e-43fa-881a-8c7c281d026a

</details>

<details>
<summary>Self-review checklist</summary>

<!-- Prior to submitting a PR, follow our step-by-step guide to review your own code:
https://zulip.readthedocs.io/en/latest/contributing/code-reviewing.html#how-to-review-code -->

<!-- Once you create the PR, check off all the steps below that you have completed.
If any of these steps are not relevant or you have not completed, leave them unchecked.-->

- [x] [Self-reviewed](https://zulip.readthedocs.io/en/latest/contributing/code-reviewing.html#how-to-review-code) the changes for clarity and maintainability
      (variable names, code reuse, readability, etc.).

Communicate decisions, questions, and potential concerns.

- [ ] Explains differences from previous plans (e.g., issue description).
- [x] Highlights technical choices and bugs encountered.
- [ ] Calls out remaining decisions and concerns.
- [x] Automated tests verify logic where appropriate.

Individual commits are ready for review (see [commit discipline](https://zulip.readthedocs.io/en/latest/contributing/commit-discipline.html)).

- [x] Each commit is a coherent idea.
- [x] Commit message(s) explain reasoning and motivation for changes.

Completed manual review and testing of the following:

- [x] Visual appearance of the changes.
- [ ] Responsiveness and internationalization.
- [ ] Strings and tooltips.
- [ ] End-to-end functionality of buttons, interactions and flows.
- [x] Corner cases, error conditions, and easily imagined bugs.
</details>
",True,26210,https://api.github.com/repos/zulip/zulip/pulls/26210,https://github.com/zulip/zulip/pull/26210,closed,10,9,2,2,6,0,4,0,"[{'name': 'bug'}, {'name': 'area: left sidebar (misc)'}, {'name': 'size: S'}, {'name': 'integration review'}]",2023-07-07 08:58:39+00:00,2023-07-17 17:13:53+00:00,893714.0,"10 days, 8:15:14",[],"[{'commit_sha': '17db1138331d1d8456c9d17482842b2f566b171f', 'committer_username': 'HemantUmre12', 'committer_name': 'Hemant Umre', 'committer_email': None, 'commit_date': datetime.datetime(2021, 7, 16, 17, 44, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': '89897902858bf0fcb222d63a6d4e78bd5fb9397a', 'committer_username': 'HemantUmre12', 'committer_name': 'Hemant Umre', 'committer_email': None, 'commit_date': datetime.datetime(2021, 7, 16, 17, 44, 47, tzinfo=datetime.timezone.utc)}]",Hemant Umre,87542880,,User,,42,,0,6
1450206139,Show user pills in search typeahead dropdown even after user is selected,"Fixes #23365

<!-- Describe your pull request here.-->

<!-- If the PR makes UI changes, always include one or more still screenshots to demonstrate your changes. If it seems helpful, add a screen capture of the new functionality as well.

Tooling tips: https://zulip.readthedocs.io/en/latest/tutorials/screenshot-and-gif-software.html
-->

**Screenshots and screen captures:**

**Before:**

![image](https://github.com/zulip/zulip/assets/87542880/c8e20b71-a638-4a92-a5f6-b6ddf45e7744)

**After:**

![image](https://github.com/zulip/zulip/assets/87542880/ca0f51a6-c92b-4a9b-8de2-2f1be7d20554)

![image](https://github.com/zulip/zulip/assets/87542880/167e0a0a-3a43-444a-aad6-6d3090a8b6af)



<details>
<summary>Self-review checklist</summary>

<!-- Prior to submitting a PR, follow our step-by-step guide to review your own code:
https://zulip.readthedocs.io/en/latest/contributing/code-reviewing.html#how-to-review-code -->

<!-- Once you create the PR, check off all the steps below that you have completed.
If any of these steps are not relevant or you have not completed, leave them unchecked.-->

- [ ] [Self-reviewed](https://zulip.readthedocs.io/en/latest/contributing/code-reviewing.html#how-to-review-code) the changes for clarity and maintainability
      (variable names, code reuse, readability, etc.).

Communicate decisions, questions, and potential concerns.

- [ ] Explains differences from previous plans (e.g., issue description).
- [ ] Highlights technical choices and bugs encountered.
- [ ] Calls out remaining decisions and concerns.
- [ ] Automated tests verify logic where appropriate.

Individual commits are ready for review (see [commit discipline](https://zulip.readthedocs.io/en/latest/contributing/commit-discipline.html)).

- [ ] Each commit is a coherent idea.
- [ ] Commit message(s) explain reasoning and motivation for changes.

Completed manual review and testing of the following:

- [ ] Visual appearance of the changes.
- [ ] Responsiveness and internationalization.
- [ ] Strings and tooltips.
- [ ] End-to-end functionality of buttons, interactions and flows.
- [ ] Corner cases, error conditions, and easily imagined bugs.
</details>
",False,26360,https://api.github.com/repos/zulip/zulip/pulls/26360,https://github.com/zulip/zulip/pull/26360,open,64,27,2,1,5,0,6,0,"[{'name': 'design'}, {'name': 'area: search'}, {'name': 'priority: high'}, {'name': 'size: L'}, {'name': 'has conflicts'}, {'name': 'maintainer review'}]",2023-07-26 12:45:52+00:00,,0.0,,[],"[{'commit_sha': '5aa283533c100757ee7902adcb5a191599966e13', 'committer_username': 'HemantUmre12', 'committer_name': 'Hemant Umre', 'committer_email': None, 'commit_date': datetime.datetime(2021, 7, 16, 17, 44, 47, tzinfo=datetime.timezone.utc)}]",Hemant Umre,87542880,,User,,42,,0,6
1459856377,Make `jitsi_server_url` an organization-level setting.,"<!-- Describe your pull request here.-->

Fixes: #17914 

Related PR: #18455, #19788

<!-- If the PR makes UI changes, always include one or more still screenshots to demonstrate your changes. If it seems helpful, add a screen capture of the new functionality as well.

Tooling tips: https://zulip.readthedocs.io/en/latest/tutorials/screenshot-and-gif-software.html
-->

<details>
<summary>Screenshots and screen captures:</summary>

![image](https://github.com/zulip/zulip/assets/87542880/c10d51d6-742b-4d72-b868-b5e89fd99545)

![image](https://github.com/zulip/zulip/assets/87542880/1f540d52-fe72-4d86-87b7-8f5c15f7242f)

![image](https://github.com/zulip/zulip/assets/87542880/3a8e9d87-ebde-4418-8146-0e6a34838428)

![image](https://github.com/zulip/zulip/assets/87542880/ab53c9f8-d6e6-4750-8661-22ef428bf600)

</details>

<details>
<summary>Self-review checklist</summary>

<!-- Prior to submitting a PR, follow our step-by-step guide to review your own code:
https://zulip.readthedocs.io/en/latest/contributing/code-reviewing.html#how-to-review-code -->

<!-- Once you create the PR, check off all the steps below that you have completed.
If any of these steps are not relevant or you have not completed, leave them unchecked.-->

- [x] [Self-reviewed](https://zulip.readthedocs.io/en/latest/contributing/code-reviewing.html#how-to-review-code) the changes for clarity and maintainability
      (variable names, code reuse, readability, etc.).

Communicate decisions, questions, and potential concerns.

- [ ] Explains differences from previous plans (e.g., issue description).
- [ ] Highlights technical choices and bugs encountered.
- [ ] Calls out remaining decisions and concerns.
- [x] Automated tests verify logic where appropriate.

Individual commits are ready for review (see [commit discipline](https://zulip.readthedocs.io/en/latest/contributing/commit-discipline.html)).

- [x] Each commit is a coherent idea.
- [x] Commit message(s) explain reasoning and motivation for changes.

Completed manual review and testing of the following:

- [x] Visual appearance of the changes.
- [x] Responsiveness and internationalization.
- [x] Strings and tooltips.
- [x] End-to-end functionality of buttons, interactions and flows.
- [x] Corner cases, error conditions, and easily imagined bugs.
</details>
",True,26399,https://api.github.com/repos/zulip/zulip/pulls/26399,https://github.com/zulip/zulip/pull/26399,closed,364,21,18,4,10,45,3,0,"[{'name': 'area: settings (admin/org)'}, {'name': 'size: XL'}, {'name': 'area: integrations (video calls)'}]",2023-08-02 14:05:58+00:00,2023-09-22 00:39:11+00:00,4357993.0,"50 days, 10:33:13","[{'comment_id': 1282950516, 'comment_body': 'You would also need to update `API_FEATURE_LEVEL` in `version.py` accordingly.', 'comment_created': datetime.datetime(2023, 8, 3, 9, 51, 15, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1282983823, 'comment_body': '`for` attribute should be set to ID of the input.', 'comment_created': datetime.datetime(2023, 8, 3, 10, 13, 2, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1282989452, 'comment_body': 'This can be written such that we do not need `else` block-\r\n```js\r\nif (!is_video_chat_provider_jitsi_meet()) {\r\n    $(.....).hide();\r\n    return;\r\n}\r\n\r\n$(...).show();\r\n.....\r\n```', 'comment_created': datetime.datetime(2023, 8, 3, 10, 17, 52, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1283226927, 'comment_body': 'Default for `flex-direction` property is `row` only, so I think we can skip this.', 'comment_created': datetime.datetime(2023, 8, 3, 13, 43, 5, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1283228291, 'comment_body': 'Would be better to have this ID as `realm_jitsi_server_url_setting`.', 'comment_created': datetime.datetime(2023, 8, 3, 13, 44, 7, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1283231461, 'comment_body': 'I think this name is confusing in the sense that it can be interpreted as server level setting.\r\n\r\nSomething like `get_jitsi_server_url_setting_value` or `get_realm_jitsi_server_url_setting_value` would be better. And similarly we can update otehr functions and IDs used in templates if required.', 'comment_created': datetime.datetime(2023, 8, 3, 13, 46, 18, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1283232241, 'comment_body': 'We can also rename `data-setting-widget-type` value here similar to the functions like `jitsi-server-url-setting`.\r\n\r\nWe could also name it like `video-chat-provider-url-setting` which will be useful in future if we support more chat providers, but I think naming it as per jitsi is fine for now.', 'comment_created': datetime.datetime(2023, 8, 3, 13, 46, 53, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1287519782, 'comment_body': 'Replaced `flex-direction` with `flex-wrap`.', 'comment_created': datetime.datetime(2023, 8, 8, 18, 45, 59, tzinfo=datetime.timezone.utc), 'commenter': 'HemantUmre12', 'type': 'User'}, {'comment_id': 1288345996, 'comment_body': 'This should be called only for the relevant subsection. Currently this disables the save button for other subsections as well.', 'comment_created': datetime.datetime(2023, 8, 9, 11, 32, 25, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1288358899, 'comment_body': 'A better variable here would be `jitsi_url` and in case we decide to move this functions to a common file where it would be used by other parts of the code, then `url` would be better than string I guess.', 'comment_created': datetime.datetime(2023, 8, 9, 11, 45, 26, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1288363272, 'comment_body': 'This feels odd since we are passing the realm_jitsi_server_url even when video provider setting is not set to Jitsi. Would be better to add a comment explaining that we do this to make sure that the save button is hidden and API data does not contain the jitsi url parameter.', 'comment_created': datetime.datetime(2023, 8, 9, 11, 49, 38, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1288368872, 'comment_body': 'Another way to validate URL would be to use a regex but I am not sure which method will be efficient as we would check the validity of the input everytime the text in the input is changed.', 'comment_created': datetime.datetime(2023, 8, 9, 11, 54, 53, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1296989940, 'comment_body': 'Can we move this `is_video_chat_provider_jitsi_meet()` check in the `should_disable_save_....` function? I feel that would be better as this check is for a particular setting and not a whole subsection.', 'comment_created': datetime.datetime(2023, 8, 17, 9, 56, 21, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1297030894, 'comment_body': ""Can't we call `set_jitsi_server_url_dropdown` here?"", 'comment_created': datetime.datetime(2023, 8, 17, 10, 31, 6, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1299426016, 'comment_body': 'Considering that the Jitsi URL setting is dependent on the video chat provider, to prevent bugs when resetting the Jitsi URL setting to its initial state upon clicking ""Discard,"" we need to first reset the video chat provider dropdown. Using `set_jitsi_server_url_dropdown` or skipping the case would work just fine, given that `set_video_chat_provider_dropdown` will be called ahead in the code path for the video chat provider setting, thereby resetting both settings again.\r\n```\r\ncase ""realm_jitsi_server_url"":\r\n    set_jitsi_server_url_dropdown();\r\n    break;\r\n```\r\n```\r\n// skipping\r\ncase ""realm_jitsi_server_url"":\r\n    break;\r\n```\r\n\r\nI was thinking, using `set_video_chat_provider_dropdown` here would make it self-sufficient. The alternative mentioned above would also work just fine. What do you think?', 'comment_created': datetime.datetime(2023, 8, 20, 19, 40, 26, tzinfo=datetime.timezone.utc), 'commenter': 'HemantUmre12', 'type': 'User'}, {'comment_id': 1301736929, 'comment_body': 'Reading the code now, I am not sure why the code for calling `set_video_chat_provider_dropdown();` is in `update_dependent_subsettings`. I think `update_dependent_subsettings` is to update the elements which are not directly for the changed setting but to update the elements dependent on changed setting, which does not seem to be the case here.\r\n\r\nI think the correct code here should be that the `case` block for `realm_video_chat_provider` should be in discard_property_element_changes` itself and then after that call you can add `case` block for `realm_jitsi_server_url` which would only call `set_jitsi_server_url_dropdown`.', 'comment_created': datetime.datetime(2023, 8, 22, 14, 27, 38, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1301747241, 'comment_body': ""This `min-width` is eventually computed as `0px` by the browser, so I don't think this is of any use now except that it prevents the dropdown to have width of `325px` which is the `min-width` for all other `select` elements.\r\n\r\nSince, we are not sure about the widths currently, I think you can leave it as it is for now, but we should make sure to change it if needed after the UI is finalised to make sure we do not have any unnecessary or weird CSS rules."", 'comment_created': datetime.datetime(2023, 8, 22, 14, 34, 21, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1306030967, 'comment_body': ""I'm not sure if this change should be a separate commit. For now, I've included the change in the same frontend commit."", 'comment_created': datetime.datetime(2023, 8, 25, 18, 45, 14, tzinfo=datetime.timezone.utc), 'commenter': 'HemantUmre12', 'type': 'User'}, {'comment_id': 1306199104, 'comment_body': ""@sahil839, I have added this commit. It is related to the changes made in #25922, which were merged a couple of days back. It was missing an edge case, and we make changes around here in the following commit. Therefore, I have included this commit in this PR. I don't know if removing `available_providers.jitsi_meet` was really necessary, but we also don't check it in `compute_show_video_chat_button()`."", 'comment_created': datetime.datetime(2023, 8, 25, 22, 46, 2, tzinfo=datetime.timezone.utc), 'commenter': 'HemantUmre12', 'type': 'User'}, {'comment_id': 1307294010, 'comment_body': 'Ok, I also think that we do not need `available_providers.jitsi_meet` check.', 'comment_created': datetime.datetime(2023, 8, 28, 11, 17, 30, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1307307532, 'comment_body': 'Would be good to have this in a separate commit. This commit already has many changes in `settings_org.js`.', 'comment_created': datetime.datetime(2023, 8, 28, 11, 32, 21, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1314271568, 'comment_body': '@sahil839 done.', 'comment_created': datetime.datetime(2023, 9, 3, 14, 46, 42, tzinfo=datetime.timezone.utc), 'commenter': 'HemantUmre12', 'type': 'User'}, {'comment_id': 1320084195, 'comment_body': 'Would it make sense to leave this as `available_providers.jitsi_meet && page_params.jitsi_server_url`? I know `available_providers.jitsi_meet` is always true, but it seems more logically correct that way.', 'comment_created': datetime.datetime(2023, 9, 8, 16, 29, 48, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1320092996, 'comment_body': 'I think this should be using https://docs.djangoproject.com/en/4.2/ref/models/fields/#urlfield?', 'comment_created': datetime.datetime(2023, 9, 8, 16, 35, 11, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1320102035, 'comment_body': ""I think this description might be wrong; we have a separate/existing `jitsi_server_url` field (no `realm_` prefix) which is what the client should use to generate a call -- that value is always a URL (It will be the server-level value if this is unset.).\r\n\r\nI think the correct description for this is:\r\n\r\n> The URL of the custom Jitsi Meet server configured in this organization's settings. Clients should\r\n> NOT use this field when starting video calls; the `jitsi_server_url` property should be used for that.\r\n> This field is only used for the settings UI.\r\n> \r\n> - `null`, the default, means this realm is configured to use the server's default Jitsi Meet server.\r\n\r\n"", 'comment_created': datetime.datetime(2023, 9, 8, 16, 41, 20, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1320102614, 'comment_body': ""Let's do `jitsi1.example.com`, and `jitsi2.example.com` -- we want to always use URLs in the official RFC `example.com` domain, not those of third parties, for this sort of thing."", 'comment_created': datetime.datetime(2023, 9, 8, 16, 42, 3, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1320104031, 'comment_body': 'Is there a reason for this to be in this module? I would think it should just sit above the function that uses it.', 'comment_created': datetime.datetime(2023, 9, 8, 16, 43, 43, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1320110385, 'comment_body': 'This comment probably deserves some extra description or maybe an `else: pass` section -- I want it to be super clear that we expect `do_set_realm_property` to be called in the other cases, just via the loop below,', 'comment_created': datetime.datetime(2023, 9, 8, 16, 47, 17, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1320116834, 'comment_body': 'This error message is quite awkward, but I think the right plan for deleting it is for @PIG208 to just migrate this file to the new `@typed_endpoint` system after we merge this.', 'comment_created': datetime.datetime(2023, 9, 8, 16, 48, 41, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1320119272, 'comment_body': ""It's fairly awkward that we need to check both of these values.. but it is making me think we have the API not quite right."", 'comment_created': datetime.datetime(2023, 9, 8, 16, 50, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1320121007, 'comment_body': 'Maybe add a comment ""TODO: This is needed to override the 325px default for dropdowns but ideally we\'d remove it."" except maybe a bit clearer since I don\'t actually know what it\'s for -- but something to help a future developer know to clean it up.', 'comment_created': datetime.datetime(2023, 9, 8, 16, 51, 55, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1320121359, 'comment_body': 'Where does this 311 come from? A `calc()` or comment or CSS variable would usually be better.', 'comment_created': datetime.datetime(2023, 9, 8, 16, 52, 18, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1320129354, 'comment_body': 'Started https://chat.zulip.org/#narrow/stream/378-api-design/topic/realm_jitsi_server_url/near/1637106 to try to figure out what we want to do here; will likely require some minor code changes too once we figure it out.', 'comment_created': datetime.datetime(2023, 9, 8, 17, 1, 41, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1320132716, 'comment_body': 'Can we have this say `https://foo.bar (default)`, to make it clear this is the special default value.', 'comment_created': datetime.datetime(2023, 9, 8, 17, 5, 58, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1330560248, 'comment_body': 'Made some changes to the UI and now this is no longer required.', 'comment_created': datetime.datetime(2023, 9, 19, 18, 42, 44, tzinfo=datetime.timezone.utc), 'commenter': 'HemantUmre12', 'type': 'User'}, {'comment_id': 1330596974, 'comment_body': 'I did some refactoring with the style, using the existing class `setting_url_input`, so we no longer need to define width here. I also made some design changes; I think labels on a separate line look better. Below are the before and after screenshots.\r\n\r\n<details>\r\n\r\n<summary>Screenshots</summary>\r\n\r\n**Before:**\r\n\r\n![](https://user-images.githubusercontent.com/87542880/261873935-bf95392d-dfc7-4186-b79b-ad5fdcc93bd3.png)\r\n\r\n**After:**\r\n\r\n![Screenshot 2023-09-20 001026](https://github.com/zulip/zulip/assets/87542880/a5f591e3-3167-49ed-a42c-0e90082bcf47)\r\n\r\n![Screenshot 2023-09-20 001051](https://github.com/zulip/zulip/assets/87542880/420fcd75-4d37-4a79-bce7-ee43dbc49351)\r\n</details>\r\n', 'comment_created': datetime.datetime(2023, 9, 19, 19, 11, 13, tzinfo=datetime.timezone.utc), 'commenter': 'HemantUmre12', 'type': 'User'}, {'comment_id': 1330608113, 'comment_body': ""I don't exactly remember, maybe I confused the module with `lib/video_calls.py`. Moving it sounds good to me. I have updated the PR accordingly."", 'comment_created': datetime.datetime(2023, 9, 19, 19, 23, 32, tzinfo=datetime.timezone.utc), 'commenter': 'HemantUmre12', 'type': 'User'}, {'comment_id': 1334764855, 'comment_body': '""is using the should use the"" -> ""is using the"" (here and above)', 'comment_created': datetime.datetime(2023, 9, 22, 19, 51, 26, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 1334766978, 'comment_body': 'Better than `||` would be `??` — some linters that have the benefit of static types will rightly complain about `||` in this situation, because it falls back on an empty as well as nullish first operand, and leaves it unclear whether the code\'s author really intended that.\r\n\r\nThat\'s in JavaScript. In more-modern languages, `||` is likely to be flatly a type error, because ""nullable string"" is a different type from ""boolean"" and people have learned that the concept of falsiness is an endless source of bugs.\r\n\r\n(Similarly at `jitsi_server_url` below, twice.)', 'comment_created': datetime.datetime(2023, 9, 22, 19, 54, 19, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 1334773696, 'comment_body': ""This can also be written as a double fallback, like `realm_jitsi_server_url ?? server_jitsi_server_url ?? jitsi_server_url`.\r\n\r\nIn particular that's how I think I'd want to write it in client code. Typically I've preferred a fallback over a version check, where possible; the code feels more robust that way, less sensitive to the exact details in the API docs, and also more transparent to the reader without having to go look up the API docs.\r\n"", 'comment_created': datetime.datetime(2023, 9, 22, 20, 3, 35, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 1334773961, 'comment_body': ""There's no `realm` object here, right? I believe what this wants to say is that fields `server_jitsi_server_url` and `realm_jitsi_server_url` were added.\r\n"", 'comment_created': datetime.datetime(2023, 9, 22, 20, 3, 56, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 1334849103, 'comment_body': 'No, I meant what I wrote: The double fallback is I think wrong -- in the unlikely corner case of a modern server that starts out with `server_jitsi_server_url=None` and `realm_jitsi_server_url` set to `jitsi.example.com`, and one changes `realm_jitsi_server_url` to None, then `jitsi_server_url` will still have `jitsi.example.com`, because the bare value never live-updates, only the namespaced ones do.', 'comment_created': datetime.datetime(2023, 9, 22, 22, 10, 42, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1334849349, 'comment_body': 'Yeah, this is meant to be pseudocode, but changing to the JS thing seems fine.', 'comment_created': datetime.datetime(2023, 9, 22, 22, 11, 12, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1334849773, 'comment_body': ""Yeah, correct, those are added to the root, and of course when we extract `realm` and `server` objects, they'll land in different ones."", 'comment_created': datetime.datetime(2023, 9, 22, 22, 12, 17, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1334881250, 'comment_body': ""I see. I think I wasn't considering the possibility of the server-level value being null while the realm-level value isn't.\r\n"", 'comment_created': datetime.datetime(2023, 9, 22, 23, 32, 2, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}]","[{'commit_sha': 'f2051fae90a3012123de7f310a5162b594f3e565', 'committer_username': 'HemantUmre12', 'committer_name': 'Hemant Umre', 'committer_email': None, 'commit_date': datetime.datetime(2021, 7, 16, 17, 44, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7b8b60596626420a4780d483958255a317a6588a', 'committer_username': 'HemantUmre12', 'committer_name': 'Hemant Umre', 'committer_email': None, 'commit_date': datetime.datetime(2021, 7, 16, 17, 44, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7ca9a5e9bde79dff3db5d9355b75abcc8e56cd10', 'committer_username': 'HemantUmre12', 'committer_name': 'Hemant Umre', 'committer_email': None, 'commit_date': datetime.datetime(2021, 7, 16, 17, 44, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c1e2f06142937bd9bcc6be98eedf649c4b6c7906', 'committer_username': 'HemantUmre12', 'committer_name': 'Hemant Umre', 'committer_email': None, 'commit_date': datetime.datetime(2021, 7, 16, 17, 44, 47, tzinfo=datetime.timezone.utc)}]",Hemant Umre,87542880,,User,,42,,0,6
1501881871,"Migrate from spectrum to the HTML5 <input type=""color""/>.","Discussion: [CZO](https://chat.zulip.org/#narrow/stream/101-design/topic/colorpicker.20migration.20and.20redesign/near/1630238)
Fixes #14961.

<!-- Describe your pull request here.-->

<!-- If the PR makes UI changes, always include one or more still screenshots to demonstrate your changes. If it seems helpful, add a screen capture of the new functionality as well.

Tooling tips: https://zulip.readthedocs.io/en/latest/tutorials/screenshot-and-gif-software.html
-->

<details>
<summary>Screenshots and screen captures:</summary>

Light:


https://github.com/zulip/zulip/assets/87542880/b2304c73-6211-448f-b24b-9be6958438b1

Dark:


https://github.com/zulip/zulip/assets/87542880/c6a8add7-7e49-4e54-a7ab-9f1b0a3102f8

Screen recorder is not capturing the popover after clicking 'More colors'. Here is a screenshot instead.

![Screenshot 2023-09-11 145224](https://github.com/zulip/zulip/assets/87542880/151519d6-f70b-4441-aa0d-0a654d8ec027)
![Screenshot 2023-09-11 145300](https://github.com/zulip/zulip/assets/87542880/91810556-e5cb-4a0a-9232-37f62ec14458)
![Screenshot 2023-09-11 151152](https://github.com/zulip/zulip/assets/87542880/5a65bd69-a981-4482-b850-a04bc57f51bc)



</details>

<details>
<summary>Self-review checklist</summary>

<!-- Prior to submitting a PR, follow our step-by-step guide to review your own code:
https://zulip.readthedocs.io/en/latest/contributing/code-reviewing.html#how-to-review-code -->

<!-- Once you create the PR, check off all the steps below that you have completed.
If any of these steps are not relevant or you have not completed, leave them unchecked.-->

- [ ] [Self-reviewed](https://zulip.readthedocs.io/en/latest/contributing/code-reviewing.html#how-to-review-code) the changes for clarity and maintainability
      (variable names, code reuse, readability, etc.).

Communicate decisions, questions, and potential concerns.

- [ ] Explains differences from previous plans (e.g., issue description).
- [ ] Highlights technical choices and bugs encountered.
- [ ] Calls out remaining decisions and concerns.
- [ ] Automated tests verify logic where appropriate.

Individual commits are ready for review (see [commit discipline](https://zulip.readthedocs.io/en/latest/contributing/commit-discipline.html)).

- [ ] Each commit is a coherent idea.
- [ ] Commit message(s) explain reasoning and motivation for changes.

Completed manual review and testing of the following:

- [ ] Visual appearance of the changes.
- [ ] Responsiveness and internationalization.
- [ ] Strings and tooltips.
- [ ] End-to-end functionality of buttons, interactions and flows.
- [ ] Corner cases, error conditions, and easily imagined bugs.
</details>
",False,26637,https://api.github.com/repos/zulip/zulip/pulls/26637,https://github.com/zulip/zulip/pull/26637,open,237,158,16,1,3,0,7,0,"[{'name': 'design'}, {'name': 'area: dependencies'}, {'name': 'area: channel settings'}, {'name': 'priority: high'}, {'name': 'size: XL'}, {'name': 'has conflicts'}, {'name': 'product review'}]",2023-09-04 22:26:14+00:00,,0.0,,[],"[{'commit_sha': 'e87fc83aabfca9f0d9745dc6cf0364ea6724d9ec', 'committer_username': 'HemantUmre12', 'committer_name': 'Hemant Umre', 'committer_email': None, 'commit_date': datetime.datetime(2021, 7, 16, 17, 44, 47, tzinfo=datetime.timezone.utc)}]",Hemant Umre,87542880,,User,,42,,0,6
1500040138,Notify user when messages in unsubscribed streams are not marked as unread,"<!-- Describe your pull request here.-->
Discussion: [CZO](https://chat.zulip.org/#narrow/stream/101-design/topic/not.20marked.20as.20unread.20banner/near/1627530)

Fixes: #23470

<!-- If the PR makes UI changes, always include one or more still screenshots to demonstrate your changes. If it seems helpful, add a screen capture of the new functionality as well.

Tooling tips: https://zulip.readthedocs.io/en/latest/tutorials/screenshot-and-gif-software.html
-->

**Screenshots and screen captures:**
![Screenshot 2023-09-03 162435](https://github.com/zulip/zulip/assets/87542880/10902796-bd46-4c0c-b928-fa6ddee46c15)
![Screenshot 2023-09-03 162351](https://github.com/zulip/zulip/assets/87542880/a46ed78a-8cc5-42d7-ab42-93c2dcbd35eb)



<details>
<summary>Self-review checklist</summary>

<!-- Prior to submitting a PR, follow our step-by-step guide to review your own code:
https://zulip.readthedocs.io/en/latest/contributing/code-reviewing.html#how-to-review-code -->

<!-- Once you create the PR, check off all the steps below that you have completed.
If any of these steps are not relevant or you have not completed, leave them unchecked.-->

- [x] [Self-reviewed](https://zulip.readthedocs.io/en/latest/contributing/code-reviewing.html#how-to-review-code) the changes for clarity and maintainability
      (variable names, code reuse, readability, etc.).

Communicate decisions, questions, and potential concerns.

- [x] Explains differences from previous plans (e.g., issue description).
- [x] Highlights technical choices and bugs encountered.
- [x] Calls out remaining decisions and concerns.
- [x] Automated tests verify logic where appropriate.

Individual commits are ready for review (see [commit discipline](https://zulip.readthedocs.io/en/latest/contributing/commit-discipline.html)).

- [x] Each commit is a coherent idea.
- [x] Commit message(s) explain reasoning and motivation for changes.

Completed manual review and testing of the following:

- [x] Visual appearance of the changes.
- [ ] Responsiveness and internationalization.
- [ ] Strings and tooltips.
- [ ] End-to-end functionality of buttons, interactions and flows.
- [x] Corner cases, error conditions, and easily imagined bugs.
</details>
",False,26634,https://api.github.com/repos/zulip/zulip/pulls/26634,https://github.com/zulip/zulip/pull/26634,open,168,22,9,3,2,10,6,0,"[{'name': 'priority: high'}, {'name': 'size: XL'}, {'name': 'has conflicts'}, {'name': 'post release'}, {'name': 'area: message feed (UI)'}, {'name': 'completion candidate'}]",2023-09-02 18:07:49+00:00,,0.0,,"[{'comment_id': 1314220208, 'comment_body': 'I\'m not entirely sure about how to structure the changes in this commit. I was also considering separating this if block into a separate function that is called in `views > message_flags.py > update_message_flags_for_narrow`, like this:\r\n\r\n````\r\nif flag == ""read"" and operation == ""remove"":\r\n    (messages, skipped_marking_unread_stream_ids) = filter_messages_for_marking_as_unread(user_profile, messages)\r\n   ````\r\nReturning `skipped_marking_unread_stream_ids` from `do_update_message_flags` might seem unusual. If we choose to do this, we will also need to call the function in `views > message_flags.py > update_message_flags`.', 'comment_created': datetime.datetime(2023, 9, 3, 9, 54, 2, tzinfo=datetime.timezone.utc), 'commenter': 'HemantUmre12', 'type': 'User'}, {'comment_id': 1314311699, 'comment_body': 'I was using `Message.objects.get(id=message_id)` to retrieve the message object here, and the linter suggested using `access_message` to fetch the message object. However, after some testing, there is a bug in the code. If the narrow contains a message from an unsubscribed private stream, we will get an error because `access_message` does not permit accessing messages from unsubscribed private streams.\r\n\r\nPlease suggest on which query or function to use to get the message object in this case.', 'comment_created': datetime.datetime(2023, 9, 3, 20, 18, 46, tzinfo=datetime.timezone.utc), 'commenter': 'HemantUmre12', 'type': 'User'}, {'comment_id': 1314853563, 'comment_body': 'I think these changes are fine for now and we can update later if  Tim suggests to do something else now.', 'comment_created': datetime.datetime(2023, 9, 4, 11, 57, 17, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1314858430, 'comment_body': 'Not sure about this parameter name here. But I cannot think of something better currently.', 'comment_created': datetime.datetime(2023, 9, 4, 12, 2, 17, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1314859753, 'comment_body': 'You can probably ask for feedback on CZO just to make sure this name is fine.', 'comment_created': datetime.datetime(2023, 9, 4, 12, 3, 41, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1314865604, 'comment_body': 'How did you get the error, while testing in UI or when adding django tests? And the user should be able to access messages from unsubscribed private streams which they received that is they were sent when the user was subscribed to the stream. And I expect `access_message` code to allow that.', 'comment_created': datetime.datetime(2023, 9, 4, 12, 9, 58, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1314870026, 'comment_body': 'Also, I think here we can avoid doing additional DB queries. You can change the query for calculating `message_ids_in_unsubscribed_streams` to not use `values_list` and just get the `id` and `recipient.type_id` field from `Message` objects.', 'comment_created': datetime.datetime(2023, 9, 4, 12, 14, 46, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1314969142, 'comment_body': 'Can you fix the indentation here to make it more easy to read?', 'comment_created': datetime.datetime(2023, 9, 4, 13, 47, 17, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1315003347, 'comment_body': 'I think would be better to have stream names like ""stream1, stream2 and stream3"".', 'comment_created': datetime.datetime(2023, 9, 4, 14, 19, 47, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1333506817, 'comment_body': 'https://chat.zulip.org/#narrow/stream/3-backend/topic/update.20has_message_access.3F/near/1638961', 'comment_created': datetime.datetime(2023, 9, 21, 19, 21, 15, tzinfo=datetime.timezone.utc), 'commenter': 'HemantUmre12', 'type': 'User'}]","[{'commit_sha': 'a0ee840f720363d4b54f0452576e7451e928240d', 'committer_username': 'HemantUmre12', 'committer_name': 'Hemant Umre', 'committer_email': None, 'commit_date': datetime.datetime(2021, 7, 16, 17, 44, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': '29a26a6efe676f8ecb9ab7466b71a0e995c4d2fa', 'committer_username': 'HemantUmre12', 'committer_name': 'Hemant Umre', 'committer_email': None, 'commit_date': datetime.datetime(2021, 7, 16, 17, 44, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': '01ccc1abba08347519ef2066ad458e136f30d250', 'committer_username': 'HemantUmre12', 'committer_name': 'Hemant Umre', 'committer_email': None, 'commit_date': datetime.datetime(2021, 7, 16, 17, 44, 47, tzinfo=datetime.timezone.utc)}]",Hemant Umre,87542880,,User,,42,,0,6
1459856377,Make `jitsi_server_url` an organization-level setting.,"<!-- Describe your pull request here.-->

Fixes: #17914 

Related PR: #18455, #19788

<!-- If the PR makes UI changes, always include one or more still screenshots to demonstrate your changes. If it seems helpful, add a screen capture of the new functionality as well.

Tooling tips: https://zulip.readthedocs.io/en/latest/tutorials/screenshot-and-gif-software.html
-->

<details>
<summary>Screenshots and screen captures:</summary>

![image](https://github.com/zulip/zulip/assets/87542880/c10d51d6-742b-4d72-b868-b5e89fd99545)

![image](https://github.com/zulip/zulip/assets/87542880/1f540d52-fe72-4d86-87b7-8f5c15f7242f)

![image](https://github.com/zulip/zulip/assets/87542880/3a8e9d87-ebde-4418-8146-0e6a34838428)

![image](https://github.com/zulip/zulip/assets/87542880/ab53c9f8-d6e6-4750-8661-22ef428bf600)

</details>

<details>
<summary>Self-review checklist</summary>

<!-- Prior to submitting a PR, follow our step-by-step guide to review your own code:
https://zulip.readthedocs.io/en/latest/contributing/code-reviewing.html#how-to-review-code -->

<!-- Once you create the PR, check off all the steps below that you have completed.
If any of these steps are not relevant or you have not completed, leave them unchecked.-->

- [x] [Self-reviewed](https://zulip.readthedocs.io/en/latest/contributing/code-reviewing.html#how-to-review-code) the changes for clarity and maintainability
      (variable names, code reuse, readability, etc.).

Communicate decisions, questions, and potential concerns.

- [ ] Explains differences from previous plans (e.g., issue description).
- [ ] Highlights technical choices and bugs encountered.
- [ ] Calls out remaining decisions and concerns.
- [x] Automated tests verify logic where appropriate.

Individual commits are ready for review (see [commit discipline](https://zulip.readthedocs.io/en/latest/contributing/commit-discipline.html)).

- [x] Each commit is a coherent idea.
- [x] Commit message(s) explain reasoning and motivation for changes.

Completed manual review and testing of the following:

- [x] Visual appearance of the changes.
- [x] Responsiveness and internationalization.
- [x] Strings and tooltips.
- [x] End-to-end functionality of buttons, interactions and flows.
- [x] Corner cases, error conditions, and easily imagined bugs.
</details>
",True,26399,https://api.github.com/repos/zulip/zulip/pulls/26399,https://github.com/zulip/zulip/pull/26399,closed,364,21,18,4,10,45,3,0,"[{'name': 'area: settings (admin/org)'}, {'name': 'size: XL'}, {'name': 'area: integrations (video calls)'}]",2023-08-02 14:05:58+00:00,2023-09-22 00:39:11+00:00,4357993.0,"50 days, 10:33:13","[{'comment_id': 1282950516, 'comment_body': 'You would also need to update `API_FEATURE_LEVEL` in `version.py` accordingly.', 'comment_created': datetime.datetime(2023, 8, 3, 9, 51, 15, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1282983823, 'comment_body': '`for` attribute should be set to ID of the input.', 'comment_created': datetime.datetime(2023, 8, 3, 10, 13, 2, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1282989452, 'comment_body': 'This can be written such that we do not need `else` block-\r\n```js\r\nif (!is_video_chat_provider_jitsi_meet()) {\r\n    $(.....).hide();\r\n    return;\r\n}\r\n\r\n$(...).show();\r\n.....\r\n```', 'comment_created': datetime.datetime(2023, 8, 3, 10, 17, 52, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1283226927, 'comment_body': 'Default for `flex-direction` property is `row` only, so I think we can skip this.', 'comment_created': datetime.datetime(2023, 8, 3, 13, 43, 5, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1283228291, 'comment_body': 'Would be better to have this ID as `realm_jitsi_server_url_setting`.', 'comment_created': datetime.datetime(2023, 8, 3, 13, 44, 7, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1283231461, 'comment_body': 'I think this name is confusing in the sense that it can be interpreted as server level setting.\r\n\r\nSomething like `get_jitsi_server_url_setting_value` or `get_realm_jitsi_server_url_setting_value` would be better. And similarly we can update otehr functions and IDs used in templates if required.', 'comment_created': datetime.datetime(2023, 8, 3, 13, 46, 18, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1283232241, 'comment_body': 'We can also rename `data-setting-widget-type` value here similar to the functions like `jitsi-server-url-setting`.\r\n\r\nWe could also name it like `video-chat-provider-url-setting` which will be useful in future if we support more chat providers, but I think naming it as per jitsi is fine for now.', 'comment_created': datetime.datetime(2023, 8, 3, 13, 46, 53, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1287519782, 'comment_body': 'Replaced `flex-direction` with `flex-wrap`.', 'comment_created': datetime.datetime(2023, 8, 8, 18, 45, 59, tzinfo=datetime.timezone.utc), 'commenter': 'HemantUmre12', 'type': 'User'}, {'comment_id': 1288345996, 'comment_body': 'This should be called only for the relevant subsection. Currently this disables the save button for other subsections as well.', 'comment_created': datetime.datetime(2023, 8, 9, 11, 32, 25, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1288358899, 'comment_body': 'A better variable here would be `jitsi_url` and in case we decide to move this functions to a common file where it would be used by other parts of the code, then `url` would be better than string I guess.', 'comment_created': datetime.datetime(2023, 8, 9, 11, 45, 26, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1288363272, 'comment_body': 'This feels odd since we are passing the realm_jitsi_server_url even when video provider setting is not set to Jitsi. Would be better to add a comment explaining that we do this to make sure that the save button is hidden and API data does not contain the jitsi url parameter.', 'comment_created': datetime.datetime(2023, 8, 9, 11, 49, 38, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1288368872, 'comment_body': 'Another way to validate URL would be to use a regex but I am not sure which method will be efficient as we would check the validity of the input everytime the text in the input is changed.', 'comment_created': datetime.datetime(2023, 8, 9, 11, 54, 53, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1296989940, 'comment_body': 'Can we move this `is_video_chat_provider_jitsi_meet()` check in the `should_disable_save_....` function? I feel that would be better as this check is for a particular setting and not a whole subsection.', 'comment_created': datetime.datetime(2023, 8, 17, 9, 56, 21, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1297030894, 'comment_body': ""Can't we call `set_jitsi_server_url_dropdown` here?"", 'comment_created': datetime.datetime(2023, 8, 17, 10, 31, 6, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1299426016, 'comment_body': 'Considering that the Jitsi URL setting is dependent on the video chat provider, to prevent bugs when resetting the Jitsi URL setting to its initial state upon clicking ""Discard,"" we need to first reset the video chat provider dropdown. Using `set_jitsi_server_url_dropdown` or skipping the case would work just fine, given that `set_video_chat_provider_dropdown` will be called ahead in the code path for the video chat provider setting, thereby resetting both settings again.\r\n```\r\ncase ""realm_jitsi_server_url"":\r\n    set_jitsi_server_url_dropdown();\r\n    break;\r\n```\r\n```\r\n// skipping\r\ncase ""realm_jitsi_server_url"":\r\n    break;\r\n```\r\n\r\nI was thinking, using `set_video_chat_provider_dropdown` here would make it self-sufficient. The alternative mentioned above would also work just fine. What do you think?', 'comment_created': datetime.datetime(2023, 8, 20, 19, 40, 26, tzinfo=datetime.timezone.utc), 'commenter': 'HemantUmre12', 'type': 'User'}, {'comment_id': 1301736929, 'comment_body': 'Reading the code now, I am not sure why the code for calling `set_video_chat_provider_dropdown();` is in `update_dependent_subsettings`. I think `update_dependent_subsettings` is to update the elements which are not directly for the changed setting but to update the elements dependent on changed setting, which does not seem to be the case here.\r\n\r\nI think the correct code here should be that the `case` block for `realm_video_chat_provider` should be in discard_property_element_changes` itself and then after that call you can add `case` block for `realm_jitsi_server_url` which would only call `set_jitsi_server_url_dropdown`.', 'comment_created': datetime.datetime(2023, 8, 22, 14, 27, 38, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1301747241, 'comment_body': ""This `min-width` is eventually computed as `0px` by the browser, so I don't think this is of any use now except that it prevents the dropdown to have width of `325px` which is the `min-width` for all other `select` elements.\r\n\r\nSince, we are not sure about the widths currently, I think you can leave it as it is for now, but we should make sure to change it if needed after the UI is finalised to make sure we do not have any unnecessary or weird CSS rules."", 'comment_created': datetime.datetime(2023, 8, 22, 14, 34, 21, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1306030967, 'comment_body': ""I'm not sure if this change should be a separate commit. For now, I've included the change in the same frontend commit."", 'comment_created': datetime.datetime(2023, 8, 25, 18, 45, 14, tzinfo=datetime.timezone.utc), 'commenter': 'HemantUmre12', 'type': 'User'}, {'comment_id': 1306199104, 'comment_body': ""@sahil839, I have added this commit. It is related to the changes made in #25922, which were merged a couple of days back. It was missing an edge case, and we make changes around here in the following commit. Therefore, I have included this commit in this PR. I don't know if removing `available_providers.jitsi_meet` was really necessary, but we also don't check it in `compute_show_video_chat_button()`."", 'comment_created': datetime.datetime(2023, 8, 25, 22, 46, 2, tzinfo=datetime.timezone.utc), 'commenter': 'HemantUmre12', 'type': 'User'}, {'comment_id': 1307294010, 'comment_body': 'Ok, I also think that we do not need `available_providers.jitsi_meet` check.', 'comment_created': datetime.datetime(2023, 8, 28, 11, 17, 30, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1307307532, 'comment_body': 'Would be good to have this in a separate commit. This commit already has many changes in `settings_org.js`.', 'comment_created': datetime.datetime(2023, 8, 28, 11, 32, 21, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1314271568, 'comment_body': '@sahil839 done.', 'comment_created': datetime.datetime(2023, 9, 3, 14, 46, 42, tzinfo=datetime.timezone.utc), 'commenter': 'HemantUmre12', 'type': 'User'}, {'comment_id': 1320084195, 'comment_body': 'Would it make sense to leave this as `available_providers.jitsi_meet && page_params.jitsi_server_url`? I know `available_providers.jitsi_meet` is always true, but it seems more logically correct that way.', 'comment_created': datetime.datetime(2023, 9, 8, 16, 29, 48, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1320092996, 'comment_body': 'I think this should be using https://docs.djangoproject.com/en/4.2/ref/models/fields/#urlfield?', 'comment_created': datetime.datetime(2023, 9, 8, 16, 35, 11, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1320102035, 'comment_body': ""I think this description might be wrong; we have a separate/existing `jitsi_server_url` field (no `realm_` prefix) which is what the client should use to generate a call -- that value is always a URL (It will be the server-level value if this is unset.).\r\n\r\nI think the correct description for this is:\r\n\r\n> The URL of the custom Jitsi Meet server configured in this organization's settings. Clients should\r\n> NOT use this field when starting video calls; the `jitsi_server_url` property should be used for that.\r\n> This field is only used for the settings UI.\r\n> \r\n> - `null`, the default, means this realm is configured to use the server's default Jitsi Meet server.\r\n\r\n"", 'comment_created': datetime.datetime(2023, 9, 8, 16, 41, 20, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1320102614, 'comment_body': ""Let's do `jitsi1.example.com`, and `jitsi2.example.com` -- we want to always use URLs in the official RFC `example.com` domain, not those of third parties, for this sort of thing."", 'comment_created': datetime.datetime(2023, 9, 8, 16, 42, 3, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1320104031, 'comment_body': 'Is there a reason for this to be in this module? I would think it should just sit above the function that uses it.', 'comment_created': datetime.datetime(2023, 9, 8, 16, 43, 43, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1320110385, 'comment_body': 'This comment probably deserves some extra description or maybe an `else: pass` section -- I want it to be super clear that we expect `do_set_realm_property` to be called in the other cases, just via the loop below,', 'comment_created': datetime.datetime(2023, 9, 8, 16, 47, 17, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1320116834, 'comment_body': 'This error message is quite awkward, but I think the right plan for deleting it is for @PIG208 to just migrate this file to the new `@typed_endpoint` system after we merge this.', 'comment_created': datetime.datetime(2023, 9, 8, 16, 48, 41, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1320119272, 'comment_body': ""It's fairly awkward that we need to check both of these values.. but it is making me think we have the API not quite right."", 'comment_created': datetime.datetime(2023, 9, 8, 16, 50, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1320121007, 'comment_body': 'Maybe add a comment ""TODO: This is needed to override the 325px default for dropdowns but ideally we\'d remove it."" except maybe a bit clearer since I don\'t actually know what it\'s for -- but something to help a future developer know to clean it up.', 'comment_created': datetime.datetime(2023, 9, 8, 16, 51, 55, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1320121359, 'comment_body': 'Where does this 311 come from? A `calc()` or comment or CSS variable would usually be better.', 'comment_created': datetime.datetime(2023, 9, 8, 16, 52, 18, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1320129354, 'comment_body': 'Started https://chat.zulip.org/#narrow/stream/378-api-design/topic/realm_jitsi_server_url/near/1637106 to try to figure out what we want to do here; will likely require some minor code changes too once we figure it out.', 'comment_created': datetime.datetime(2023, 9, 8, 17, 1, 41, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1320132716, 'comment_body': 'Can we have this say `https://foo.bar (default)`, to make it clear this is the special default value.', 'comment_created': datetime.datetime(2023, 9, 8, 17, 5, 58, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1330560248, 'comment_body': 'Made some changes to the UI and now this is no longer required.', 'comment_created': datetime.datetime(2023, 9, 19, 18, 42, 44, tzinfo=datetime.timezone.utc), 'commenter': 'HemantUmre12', 'type': 'User'}, {'comment_id': 1330596974, 'comment_body': 'I did some refactoring with the style, using the existing class `setting_url_input`, so we no longer need to define width here. I also made some design changes; I think labels on a separate line look better. Below are the before and after screenshots.\r\n\r\n<details>\r\n\r\n<summary>Screenshots</summary>\r\n\r\n**Before:**\r\n\r\n![](https://user-images.githubusercontent.com/87542880/261873935-bf95392d-dfc7-4186-b79b-ad5fdcc93bd3.png)\r\n\r\n**After:**\r\n\r\n![Screenshot 2023-09-20 001026](https://github.com/zulip/zulip/assets/87542880/a5f591e3-3167-49ed-a42c-0e90082bcf47)\r\n\r\n![Screenshot 2023-09-20 001051](https://github.com/zulip/zulip/assets/87542880/420fcd75-4d37-4a79-bce7-ee43dbc49351)\r\n</details>\r\n', 'comment_created': datetime.datetime(2023, 9, 19, 19, 11, 13, tzinfo=datetime.timezone.utc), 'commenter': 'HemantUmre12', 'type': 'User'}, {'comment_id': 1330608113, 'comment_body': ""I don't exactly remember, maybe I confused the module with `lib/video_calls.py`. Moving it sounds good to me. I have updated the PR accordingly."", 'comment_created': datetime.datetime(2023, 9, 19, 19, 23, 32, tzinfo=datetime.timezone.utc), 'commenter': 'HemantUmre12', 'type': 'User'}, {'comment_id': 1334764855, 'comment_body': '""is using the should use the"" -> ""is using the"" (here and above)', 'comment_created': datetime.datetime(2023, 9, 22, 19, 51, 26, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 1334766978, 'comment_body': 'Better than `||` would be `??` — some linters that have the benefit of static types will rightly complain about `||` in this situation, because it falls back on an empty as well as nullish first operand, and leaves it unclear whether the code\'s author really intended that.\r\n\r\nThat\'s in JavaScript. In more-modern languages, `||` is likely to be flatly a type error, because ""nullable string"" is a different type from ""boolean"" and people have learned that the concept of falsiness is an endless source of bugs.\r\n\r\n(Similarly at `jitsi_server_url` below, twice.)', 'comment_created': datetime.datetime(2023, 9, 22, 19, 54, 19, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 1334773696, 'comment_body': ""This can also be written as a double fallback, like `realm_jitsi_server_url ?? server_jitsi_server_url ?? jitsi_server_url`.\r\n\r\nIn particular that's how I think I'd want to write it in client code. Typically I've preferred a fallback over a version check, where possible; the code feels more robust that way, less sensitive to the exact details in the API docs, and also more transparent to the reader without having to go look up the API docs.\r\n"", 'comment_created': datetime.datetime(2023, 9, 22, 20, 3, 35, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 1334773961, 'comment_body': ""There's no `realm` object here, right? I believe what this wants to say is that fields `server_jitsi_server_url` and `realm_jitsi_server_url` were added.\r\n"", 'comment_created': datetime.datetime(2023, 9, 22, 20, 3, 56, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 1334849103, 'comment_body': 'No, I meant what I wrote: The double fallback is I think wrong -- in the unlikely corner case of a modern server that starts out with `server_jitsi_server_url=None` and `realm_jitsi_server_url` set to `jitsi.example.com`, and one changes `realm_jitsi_server_url` to None, then `jitsi_server_url` will still have `jitsi.example.com`, because the bare value never live-updates, only the namespaced ones do.', 'comment_created': datetime.datetime(2023, 9, 22, 22, 10, 42, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1334849349, 'comment_body': 'Yeah, this is meant to be pseudocode, but changing to the JS thing seems fine.', 'comment_created': datetime.datetime(2023, 9, 22, 22, 11, 12, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1334849773, 'comment_body': ""Yeah, correct, those are added to the root, and of course when we extract `realm` and `server` objects, they'll land in different ones."", 'comment_created': datetime.datetime(2023, 9, 22, 22, 12, 17, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1334881250, 'comment_body': ""I see. I think I wasn't considering the possibility of the server-level value being null while the realm-level value isn't.\r\n"", 'comment_created': datetime.datetime(2023, 9, 22, 23, 32, 2, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}]","[{'commit_sha': 'f2051fae90a3012123de7f310a5162b594f3e565', 'committer_username': 'HemantUmre12', 'committer_name': 'Hemant Umre', 'committer_email': None, 'commit_date': datetime.datetime(2021, 7, 16, 17, 44, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7b8b60596626420a4780d483958255a317a6588a', 'committer_username': 'HemantUmre12', 'committer_name': 'Hemant Umre', 'committer_email': None, 'commit_date': datetime.datetime(2021, 7, 16, 17, 44, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7ca9a5e9bde79dff3db5d9355b75abcc8e56cd10', 'committer_username': 'HemantUmre12', 'committer_name': 'Hemant Umre', 'committer_email': None, 'commit_date': datetime.datetime(2021, 7, 16, 17, 44, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c1e2f06142937bd9bcc6be98eedf649c4b6c7906', 'committer_username': 'HemantUmre12', 'committer_name': 'Hemant Umre', 'committer_email': None, 'commit_date': datetime.datetime(2021, 7, 16, 17, 44, 47, tzinfo=datetime.timezone.utc)}]",Hemant Umre,87542880,,User,,42,,0,6
1321861376,streams: Make stream name in stream settings panel a link.,"This commit makes stream name in stream settings panel a link to that stream and also adds a tooltip saying the keyboard shortcut for navigating to stream.

<!-- Describe your pull request here.-->

Fixes: #25171

<!-- If the PR makes UI changes, always include one or more still screenshots to demonstrate your changes. If it seems helpful, add a screen capture of the new functionality as well.

Tooling tips: https://zulip.readthedocs.io/en/latest/tutorials/screenshot-and-gif-software.html
-->

**Screenshots and screen captures:**
![Screenshot from 2023-05-26 17-25-47](https://github.com/zulip/zulip/assets/99073049/68766121-cb8b-477a-87c9-04a711e4ee63)
<details>
<summary>Self-review checklist</summary>

<!-- Prior to submitting a PR, follow our step-by-step guide to review your own code:
https://zulip.readthedocs.io/en/latest/contributing/code-reviewing.html#how-to-review-code -->

<!-- Once you create the PR, check off all the steps below that you have completed.
If any of these steps are not relevant or you have not completed, leave them unchecked.-->

- [x] [Self-reviewed](https://zulip.readthedocs.io/en/latest/contributing/code-reviewing.html#how-to-review-code) the changes for clarity and maintainability
      (variable names, code reuse, readability, etc.).

Communicate decisions, questions, and potential concerns.

- [x] Explains differences from previous plans (e.g., issue description).
- [x] Highlights technical choices and bugs encountered.
- [x] Calls out remaining decisions and concerns.
- [ ] Automated tests verify logic where appropriate.

Individual commits are ready for review (see [commit discipline](https://zulip.readthedocs.io/en/latest/contributing/commit-discipline.html)).

- [x] Each commit is a coherent idea.
- [x] Commit message(s) explain reasoning and motivation for changes.

Completed manual review and testing of the following:

- [x] Visual appearance of the changes.
- [x] Responsiveness and internationalization.
- [x] Strings and tooltips.
- [x] End-to-end functionality of buttons, interactions and flows.
- [x] Corner cases, error conditions, and easily imagined bugs.
</details>
",False,25212,https://api.github.com/repos/zulip/zulip/pulls/25212,https://github.com/zulip/zulip/pull/25212,open,35,5,4,2,15,4,5,0,"[{'name': 'size: M'}, {'name': 'has conflicts'}, {'name': 'buddy review'}, {'name': 'mentor review'}, {'name': 'QA needed'}]",2023-04-20 17:23:19+00:00,,0.0,,"[{'comment_id': 1206801440, 'comment_body': 'I coulld not think of anything to avoid code duplicacy here. I tried something like \r\n```\r\n{{# if preview_url}}\r\n<a href=.....>\r\n{{/if}}\r\n.........\r\n{{# if preview_url}}\r\n</a>\r\n{{/if}}\r\n```   \r\nBut it does not passed lint test.', 'comment_created': datetime.datetime(2023, 5, 26, 13, 39, 25, tzinfo=datetime.timezone.utc), 'commenter': 'Ujjawal3', 'type': 'User'}, {'comment_id': 1207944496, 'comment_body': ""Can we also add `color: inherit;` here? That way, we won't need to make changes in dark_theme.css."", 'comment_created': datetime.datetime(2023, 5, 27, 12, 43, 11, tzinfo=datetime.timezone.utc), 'commenter': 'HemantUmre12', 'type': 'User'}, {'comment_id': 1207948059, 'comment_body': 'Can we retrieve the `stream_privacy_icon` in `set_right_panel_title()` and pass it to this template? Will that make it look better?', 'comment_created': datetime.datetime(2023, 5, 27, 12, 49, 25, tzinfo=datetime.timezone.utc), 'commenter': 'HemantUmre12', 'type': 'User'}, {'comment_id': 1207952476, 'comment_body': 'I am not sure. We can break `preview_url` into two variables: `preview_url` and `can_preview`. Then, using `can_preview` here might improve readability.', 'comment_created': datetime.datetime(2023, 5, 27, 12, 57, 48, tzinfo=datetime.timezone.utc), 'commenter': 'HemantUmre12', 'type': 'User'}]","[{'commit_sha': '69228346a36056567af2a16334fa7ce89b15fe00', 'committer_username': 'Ujjawal3', 'committer_name': 'Ujjawal Modi', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 5, 9, 46, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fda4b92b5a3a92be88536d90c3a810ab2df76077', 'committer_username': 'Ujjawal3', 'committer_name': 'Ujjawal Modi', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 5, 9, 46, 12, tzinfo=datetime.timezone.utc)}]",Ujjawal Modi,99073049,,User,,30,,28,14
1405812206,streams: Warn when archiving a notification stream.,"Archiving a user/stream notification stream disables user/stream notifications.This commit adds a warning that notifications will be disabled while archiving any notification stream.

This PR address the review comments of #23735.

Fixes: #22110.

<!-- If the PR makes UI changes, always include one or more still screenshots to demonstrate your changes. If it seems helpful, add a screen capture of the new functionality as well.

Tooling tips: https://zulip.readthedocs.io/en/latest/tutorials/screenshot-and-gif-software.html
-->

**Screenshots and screen captures:**
![Screenshot from 2023-07-03 16-51-19](https://github.com/zulip/zulip/assets/99073049/6930617f-694e-45b8-b085-1216ab1e6fae)
![Screenshot from 2023-07-03 16-50-50](https://github.com/zulip/zulip/assets/99073049/ada5b822-9c60-4e73-acf3-45aaaee70ea2)
![Screenshot from 2023-07-03 16-50-37](https://github.com/zulip/zulip/assets/99073049/faef1887-522f-42b9-81c5-a0838a1945f6)
<details>
<summary>Self-review checklist</summary>

<!-- Prior to submitting a PR, follow our step-by-step guide to review your own code:
https://zulip.readthedocs.io/en/latest/contributing/code-reviewing.html#how-to-review-code -->

<!-- Once you create the PR, check off all the steps below that you have completed.
If any of these steps are not relevant or you have not completed, leave them unchecked.-->

- [ ] [Self-reviewed](https://zulip.readthedocs.io/en/latest/contributing/code-reviewing.html#how-to-review-code) the changes for clarity and maintainability
      (variable names, code reuse, readability, etc.).

Communicate decisions, questions, and potential concerns.

- [ ] Explains differences from previous plans (e.g., issue description).
- [ ] Highlights technical choices and bugs encountered.
- [ ] Calls out remaining decisions and concerns.
- [ ] Automated tests verify logic where appropriate.

Individual commits are ready for review (see [commit discipline](https://zulip.readthedocs.io/en/latest/contributing/commit-discipline.html)).

- [x] Each commit is a coherent idea.
- [x] Commit message(s) explain reasoning and motivation for changes.

Completed manual review and testing of the following:

- [x] Visual appearance of the changes.
- [x] Responsiveness and internationalization.
- [x] Strings and tooltips.
- [x] End-to-end functionality of buttons, interactions and flows.
- [x] Corner cases, error conditions, and easily imagined bugs.
</details>
",True,26111,https://api.github.com/repos/zulip/zulip/pulls/26111,https://github.com/zulip/zulip/pull/26111,closed,32,4,3,1,10,5,4,0,"[{'name': 'area: channel settings'}, {'name': 'area: settings (admin/org)'}, {'name': 'size: M'}, {'name': 'integration review'}]",2023-06-23 23:41:36+00:00,2023-07-06 23:04:11+00:00,1120955.0,"12 days, 23:22:35","[{'comment_id': 1242527940, 'comment_body': 'I think this needs a wrapper as it is no longer alone here. A `<p>` tag would do the job, and then you might not need additional styling.', 'comment_created': datetime.datetime(2023, 6, 26, 17, 32, 52, tzinfo=datetime.timezone.utc), 'commenter': 'HemantUmre12', 'type': 'User'}, {'comment_id': 1245066456, 'comment_body': ""I think we don't need `margin-top` anymore, and I'm not sure, but removing `margin-bottom` and the UI still looks decent."", 'comment_created': datetime.datetime(2023, 6, 28, 11, 19, 40, tzinfo=datetime.timezone.utc), 'commenter': 'HemantUmre12', 'type': 'User'}, {'comment_id': 1245069390, 'comment_body': ""Do we need this class if we're not using it?"", 'comment_created': datetime.datetime(2023, 6, 28, 11, 22, 46, tzinfo=datetime.timezone.utc), 'commenter': 'HemantUmre12', 'type': 'User'}, {'comment_id': 1250939230, 'comment_body': 'There is no such setting currently. I am not sure whether we should include this now or wait till the setting is added since we might possible name the setting something else.', 'comment_created': datetime.datetime(2023, 7, 3, 14, 3, 18, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1252579658, 'comment_body': 'As per the discussion [here](https://chat.zulip.org/#narrow/stream/101-design/topic/warning.20when.20archiving.20a.20stream.20used.20for.20announcements.2E/near/1603027), I have removed the code. You can take a look now.', 'comment_created': datetime.datetime(2023, 7, 5, 6, 6, 51, tzinfo=datetime.timezone.utc), 'commenter': 'Ujjawal3', 'type': 'User'}]","[{'commit_sha': '18b77c8de6aa79686980346da015164a223f9d07', 'committer_username': 'Ujjawal3', 'committer_name': 'Ujjawal Modi', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 5, 9, 46, 12, tzinfo=datetime.timezone.utc)}]",Ujjawal Modi,99073049,,User,,30,,28,14
1377731751,invitations: Add a new setting `Who can create multiuse invite link`.,"This PR adds a new realm level setting `Who can create multiuse invite link` based on the group permissions
model.  

Relevant discussions
1. [Regarding refactor of code to flush cache](https://chat.zulip.org/#narrow/stream/49-development-help/topic/Circular.20dependency.20of.20Django.20models)
2. [Discussion for adding realm level group setting](https://chat.zulip.org/#narrow/stream/101-design/topic/New.20permissions.20model)

Fixes: #15159 

<!-- If the PR makes UI changes, always include one or more still screenshots to demonstrate your changes. If it seems helpful, add a screen capture of the new functionality as well.

Tooling tips: https://zulip.readthedocs.io/en/latest/tutorials/screenshot-and-gif-software.html
-->

**Screenshots and screen captures:**
New organization settings panel
![image](https://github.com/zulip/zulip/assets/99073049/e1c1a079-5198-45cf-9452-d97b953339dd)

<details>
<summary>Self-review checklist</summary>

<!-- Prior to submitting a PR, follow our step-by-step guide to review your own code:
https://zulip.readthedocs.io/en/latest/contributing/code-reviewing.html#how-to-review-code -->

<!-- Once you create the PR, check off all the steps below that you have completed.
If any of these steps are not relevant or you have not completed, leave them unchecked.-->

- [ ] [Self-reviewed](https://zulip.readthedocs.io/en/latest/contributing/code-reviewing.html#how-to-review-code) the changes for clarity and maintainability
      (variable names, code reuse, readability, etc.).

Communicate decisions, questions, and potential concerns.

- [x] Explains differences from previous plans (e.g., issue description).
- [x] Highlights technical choices and bugs encountered.
- [x] Calls out remaining decisions and concerns.
- [x] Automated tests verify logic where appropriate.

Individual commits are ready for review (see [commit discipline](https://zulip.readthedocs.io/en/latest/contributing/commit-discipline.html)).

- [x] Each commit is a coherent idea.
- [x] Commit message(s) explain reasoning and motivation for changes.

Completed manual review and testing of the following:

- [x] Visual appearance of the changes.
- [x] Responsiveness and internationalization.
- [x] Strings and tooltips.
- [x] End-to-end functionality of buttons, interactions and flows.
- [x] Corner cases, error conditions, and easily imagined bugs.
</details>
",True,25884,https://api.github.com/repos/zulip/zulip/pulls/25884,https://github.com/zulip/zulip/pull/25884,closed,961,123,57,14,32,126,5,0,"[{'name': 'area: settings (admin/org)'}, {'name': 'size: XL'}, {'name': 'area: settings (user groups)'}, {'name': 'integration review'}, {'name': 'api docs review'}]",2023-06-04 12:34:58+00:00,2023-09-07 21:21:01+00:00,8239563.0,"95 days, 8:46:03","[{'comment_id': 1218280325, 'comment_body': 'I think it would be good idea to move all entries of system_groups names from `UserGroup` model to `Realm` model as a follow up after this PR.', 'comment_created': datetime.datetime(2023, 6, 5, 15, 57, 18, tzinfo=datetime.timezone.utc), 'commenter': 'Ujjawal3', 'type': 'User'}, {'comment_id': 1218281704, 'comment_body': 'I was getting a circular dependency error if it was imported at the beginning of module. ', 'comment_created': datetime.datetime(2023, 6, 5, 15, 58, 31, tzinfo=datetime.timezone.utc), 'commenter': 'Ujjawal3', 'type': 'User'}, {'comment_id': 1224869239, 'comment_body': 'I initially wrote the function like this \r\n```\r\nexport function user_can_create_muliuse_invite(): boolean {\r\n    return user_groups.is_user_in_group(\r\n        page_params.realm_create_multiuse_invite_group_id,\r\n        people.my_current_user_id()\r\n    );\r\n}\r\n```\r\nBut `People` module can not be imported because of circular dependancy. ', 'comment_created': datetime.datetime(2023, 6, 9, 22, 53, 10, tzinfo=datetime.timezone.utc), 'commenter': 'Ujjawal3', 'type': 'User'}, {'comment_id': 1225146966, 'comment_body': 'I think adding a type hint here and dictionary below would be helpful.', 'comment_created': datetime.datetime(2023, 6, 10, 6, 26, 24, tzinfo=datetime.timezone.utc), 'commenter': 'HemantUmre12', 'type': 'User'}, {'comment_id': 1225186453, 'comment_body': 'I think you can drop `group_name_to_group_dict` if you want to retrieve a `UserGroup` by its name, you can use `all_system_user_groups.get(name=group_name)` instead.', 'comment_created': datetime.datetime(2023, 6, 10, 7, 41, 20, tzinfo=datetime.timezone.utc), 'commenter': 'HemantUmre12', 'type': 'User'}, {'comment_id': 1225291105, 'comment_body': ""Using `local()` inside a loop is expensive and a it's a bit of code smell already as mentioned in above comment. Here's an alternative approach I can suggest:\r\n\r\nOutside this loop\r\n```\r\nreq_vars = {}\r\nreq_group_vars = {} # You may need to adjust the exact variable name here\r\n\r\nfor k, v in list(locals().items()):\r\n    if k in realm.property_types:\r\n        req_vars[k] = v\r\n    if k in Realm.REALM_PERMISSION_GROUP_SETTING_ID_TO_GROUP_SETTING:\r\n        req_group_vars[k] = v \r\n```\r\nAlternatively, if you want to include group settings in req_vars, you will need to make changes to the above loop to skip group settings."", 'comment_created': datetime.datetime(2023, 6, 10, 11, 7, 26, tzinfo=datetime.timezone.utc), 'commenter': 'HemantUmre12', 'type': 'User'}, {'comment_id': 1225467687, 'comment_body': 'I think this list is in alphabetic order and we should follow that. ', 'comment_created': datetime.datetime(2023, 6, 10, 17, 1, 39, tzinfo=datetime.timezone.utc), 'commenter': 'HemantUmre12', 'type': 'User'}, {'comment_id': 1225768244, 'comment_body': 'As suggested above, see if you can also drop this dictionary here.', 'comment_created': datetime.datetime(2023, 6, 11, 10, 17, 19, tzinfo=datetime.timezone.utc), 'commenter': 'HemantUmre12', 'type': 'User'}, {'comment_id': 1225768580, 'comment_body': 'Since we use `default_group` multiple times, it would be better to store it in a variable.', 'comment_created': datetime.datetime(2023, 6, 11, 10, 19, 34, tzinfo=datetime.timezone.utc), 'commenter': 'HemantUmre12', 'type': 'User'}, {'comment_id': 1225769998, 'comment_body': 'As suggested above, see if you can also drop this dictionary here.', 'comment_created': datetime.datetime(2023, 6, 11, 10, 27, 40, tzinfo=datetime.timezone.utc), 'commenter': 'HemantUmre12', 'type': 'User'}, {'comment_id': 1225779764, 'comment_body': 'As most of the fields have comments that explain what they do, I think we should do the same for this field.', 'comment_created': datetime.datetime(2023, 6, 11, 11, 14, 42, tzinfo=datetime.timezone.utc), 'commenter': 'HemantUmre12', 'type': 'User'}, {'comment_id': 1225793089, 'comment_body': ""I think you missed it. This link shouldn't be part of this commit; the later one should be."", 'comment_created': datetime.datetime(2023, 6, 11, 12, 6, 42, tzinfo=datetime.timezone.utc), 'commenter': 'HemantUmre12', 'type': 'User'}, {'comment_id': 1225873239, 'comment_body': '*multiuse', 'comment_created': datetime.datetime(2023, 6, 11, 17, 31, 37, tzinfo=datetime.timezone.utc), 'commenter': 'HemantUmre12', 'type': 'User'}, {'comment_id': 1225873301, 'comment_body': '*links', 'comment_created': datetime.datetime(2023, 6, 11, 17, 32, 9, tzinfo=datetime.timezone.utc), 'commenter': 'HemantUmre12', 'type': 'User'}, {'comment_id': 1226203473, 'comment_body': 'We can move this inside the if statement below. No need for the query if we are not using it.', 'comment_created': datetime.datetime(2023, 6, 12, 7, 28, 23, tzinfo=datetime.timezone.utc), 'commenter': 'HemantUmre12', 'type': 'User'}, {'comment_id': 1226222153, 'comment_body': ""I was just thinking that inside the action function, we don't check the permission configuration. So if we drop these checks, it will work just fine. However, we still need to keep `user_group.name == default_group_name` to make sure state changes."", 'comment_created': datetime.datetime(2023, 6, 12, 7, 44, 21, tzinfo=datetime.timezone.utc), 'commenter': 'HemantUmre12', 'type': 'User'}, {'comment_id': 1227958319, 'comment_body': 'I added this code after adding all event listener so that we can avoid some duplicate code by using `$(""#generate_multiuse_invite_radio"").trigger(""change"")`', 'comment_created': datetime.datetime(2023, 6, 13, 11, 19, 10, tzinfo=datetime.timezone.utc), 'commenter': 'Ujjawal3', 'type': 'User'}, {'comment_id': 1228023141, 'comment_body': ""I don't know why git is changing this line rather than the later one."", 'comment_created': datetime.datetime(2023, 6, 13, 12, 8, 56, tzinfo=datetime.timezone.utc), 'commenter': 'Ujjawal3', 'type': 'User'}, {'comment_id': 1228027746, 'comment_body': 'I liked the suggested approach. So, updated the code accordingly.', 'comment_created': datetime.datetime(2023, 6, 13, 12, 13, 1, tzinfo=datetime.timezone.utc), 'commenter': 'Ujjawal3', 'type': 'User'}, {'comment_id': 1232384665, 'comment_body': 'I think it is better to pass `update_fields` in `save()`.', 'comment_created': datetime.datetime(2023, 6, 16, 15, 12, 54, tzinfo=datetime.timezone.utc), 'commenter': 'HemantUmre12', 'type': 'User'}, {'comment_id': 1232385207, 'comment_body': 'I think can be better spelled as `if X is None:`.', 'comment_created': datetime.datetime(2023, 6, 16, 15, 13, 22, tzinfo=datetime.timezone.utc), 'commenter': 'HemantUmre12', 'type': 'User'}, {'comment_id': 1232968223, 'comment_body': 'This list is in alphabetical order.', 'comment_created': datetime.datetime(2023, 6, 17, 5, 46, 16, tzinfo=datetime.timezone.utc), 'commenter': 'HemantUmre12', 'type': 'User'}, {'comment_id': 1232978644, 'comment_body': 'These two classes could have been added in a single line: `$(""#email_invite_radio_container"").addClass(""control-label-disabled disabled_setting_tooltip"")`;.', 'comment_created': datetime.datetime(2023, 6, 17, 6, 33, 20, tzinfo=datetime.timezone.utc), 'commenter': 'HemantUmre12', 'type': 'User'}, {'comment_id': 1233000780, 'comment_body': 'Here also `elif X is Y:`.', 'comment_created': datetime.datetime(2023, 6, 17, 8, 46, 17, tzinfo=datetime.timezone.utc), 'commenter': 'HemantUmre12', 'type': 'User'}, {'comment_id': 1234164981, 'comment_body': 'You should add `durable=True` here inside `transaction.atomic`. And we should also add `savepoint=False` for transactions that are performed inside a transaction.', 'comment_created': datetime.datetime(2023, 6, 19, 14, 47, 32, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1234165520, 'comment_body': 'This should also contain `durable=True`.', 'comment_created': datetime.datetime(2023, 6, 19, 14, 48, 1, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1234176574, 'comment_body': 'We can create a system group dict with group name as key and group object as value outside the loop. This way we would avoid calling `.get` in a loop. This works fine currently because there is ony one setting in `REALM_PERMISSION_GROUP_SETTINGS`.', 'comment_created': datetime.datetime(2023, 6, 19, 14, 57, 52, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1234178408, 'comment_body': 'We are avoiding sending the `can_...` properties for new settings here. We instead expect client to calculate whether user can create the links or not using the setting value which is passed above.', 'comment_created': datetime.datetime(2023, 6, 19, 14, 59, 32, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1234233270, 'comment_body': '`rrealm.POLICY_NOBODY` is not `None` so I made it `realm.invite_to_realm_policy is realm.POLICY_NOBODY:`', 'comment_created': datetime.datetime(2023, 6, 19, 15, 49, 54, tzinfo=datetime.timezone.utc), 'commenter': 'Ujjawal3', 'type': 'User'}, {'comment_id': 1234257628, 'comment_body': 'We can have a separate function for group-based settings but I am not sure. We can wait for more feedback.', 'comment_created': datetime.datetime(2023, 6, 19, 16, 19, 43, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1234258578, 'comment_body': 'I think it would be better to combine both these functions for owner and admin and name it accordingly.', 'comment_created': datetime.datetime(2023, 6, 19, 16, 20, 59, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1234272522, 'comment_body': 'I get how this is used, but we can directly add ""_id"" to the setting name. I feel it is unnecessary, but we can wait for more feedback.', 'comment_created': datetime.datetime(2023, 6, 19, 16, 40, 5, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1234273090, 'comment_body': 'But this may be fine since we would convert other settings to group based settings eventually.', 'comment_created': datetime.datetime(2023, 6, 19, 16, 40, 56, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1237946384, 'comment_body': 'Hmm, this seems confusing to have a `check_if_owner_or_administrator_required` function and also another check to verify the user is an admin or not. I think we can instead rename the function to something like `check_admin_permissions` or `check_role_based_permissions` and add a parameter like `require_atleast_admin`. The function could be something like -\r\n```python\r\ndef func_name():\r\n    # owner check based on invite_as value\r\n\r\n    if require_atleast_admin and not user_profile.is_realm_admin:\r\n        raise JsonableError(""Must be an organization administrator"")\r\n\r\n    # admin check based on invite_as value\r\n\r\n```', 'comment_created': datetime.datetime(2023, 6, 22, 3, 22, 34, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1237950835, 'comment_body': 'Why the key for this dict is `Optional[str]`? I expect the `user_group` object would have name set in all cases. Also, we could possibly extract this as a function to get a dict for system groups since that would be re-used at a couple of places.', 'comment_created': datetime.datetime(2023, 6, 22, 3, 31, 12, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1237952560, 'comment_body': 'I guess this has `Optional` because we do not set it for `can_remove_subscribers_group` setting. Just noting here that I have added a commit for this in my PR #26070. We can rebase one of the PRs depending on which PR is merged first, so it is fine for now.', 'comment_created': datetime.datetime(2023, 6, 22, 3, 35, 12, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1237965688, 'comment_body': 'This `login` call can be removed I guess and there are a couple of such lines below as well. Basically there is no need to login as a admin user when changing setting using `do_...` function.', 'comment_created': datetime.datetime(2023, 6, 22, 4, 2, 56, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1238067677, 'comment_body': 'Running this migration gives an error on my system because you cannot access constants like `POLICY_NOBODY` and `NOBODY_GROUP_NAME`. You would need to define them at the top. You can see other such migrations where we do this.', 'comment_created': datetime.datetime(2023, 6, 22, 6, 42, 54, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1238086632, 'comment_body': 'Would also be good to rename `user_can_invite_others_to_realm` to something like `user_can_send_email_invite_to_others`.', 'comment_created': datetime.datetime(2023, 6, 22, 7, 1, 16, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1238103213, 'comment_body': 'A better fix here would to make the selector for setting margin-top to 10px more selective probably by using `input-group` class.', 'comment_created': datetime.datetime(2023, 6, 22, 7, 15, 59, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1238129700, 'comment_body': 'I think we should also test the cases where a user tries to set the setting to these groups and check that these raise an error.', 'comment_created': datetime.datetime(2023, 6, 22, 7, 40, 2, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1238221853, 'comment_body': 'Should I just rename this function or all the variables related to this setting?', 'comment_created': datetime.datetime(2023, 6, 22, 8, 55, 19, tzinfo=datetime.timezone.utc), 'commenter': 'Ujjawal3', 'type': 'User'}, {'comment_id': 1238253708, 'comment_body': 'I think both because having `can_invite_others_to_realm` as `False`, feels user is not allowed to create multiuse link as well. Would probably be better to do this change in a separate prep commit.', 'comment_created': datetime.datetime(2023, 6, 22, 9, 22, 43, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1241470412, 'comment_body': 'Ohh, sorry for the confusion here. But I did not meant to rename the database field and the API fields sent through `/events`, `/register`,etc. endpoints. I only meant the variables used internally. It would be better to get feedback from others before renaming the database fields and the fields sent in API responses.', 'comment_created': datetime.datetime(2023, 6, 26, 3, 26, 48, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1242838590, 'comment_body': 'I have updated the PR. Please have a look.', 'comment_created': datetime.datetime(2023, 6, 26, 21, 49, 19, tzinfo=datetime.timezone.utc), 'commenter': 'Ujjawal3', 'type': 'User'}, {'comment_id': 1243305251, 'comment_body': 'Would be better to use `==` for comparing values here. We generally use `is` for checking if  value is `None` or not.', 'comment_created': datetime.datetime(2023, 6, 27, 8, 0, 43, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1243315109, 'comment_body': 'This should have `durable=True` and not `savepoint=False` since we do not call this function inside another atomic transaction as of now.', 'comment_created': datetime.datetime(2023, 6, 27, 8, 8, 53, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1244924578, 'comment_body': 'There is an extra space here.', 'comment_created': datetime.datetime(2023, 6, 28, 9, 9, 47, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1253737339, 'comment_body': ""What's the thinking behind doing this here rather than around all of `create_internal_realm`? The latter certainly seems more correct to me, since then either we have a fully initialized server or a server that's not initialized at all."", 'comment_created': datetime.datetime(2023, 7, 5, 23, 1, 42, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1253738706, 'comment_body': '`require_admin` would be a more traditional name for this parameter.', 'comment_created': datetime.datetime(2023, 7, 5, 23, 4, 47, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1253740414, 'comment_body': 'I think this block could be replaced by having the one caller pass `require_admin=invited_as in [PreregistrationUser.INVITE_AS[""REALM_ADMIN""], ...]`, maybe with that variable being set on its own line, in the one caller that uses this.', 'comment_created': datetime.datetime(2023, 7, 5, 23, 6, 44, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1253740962, 'comment_body': 'The writing style here feels a lot more sloppy than existing API changelog entries; please read some similar ones and polish this.', 'comment_created': datetime.datetime(2023, 7, 5, 23, 7, 27, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1253741804, 'comment_body': 'I think a better change here would be to add a prep commit that makes this test call `do_create_realm` properly rather than trying to make a realm object hackily this other way.', 'comment_created': datetime.datetime(2023, 7, 5, 23, 8, 35, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1253742817, 'comment_body': '`do_change_realm_permission_group_setting` (singular, and using `change`) feels clearer to me. We\'re changing a single group setting.\r\n\r\nThe reason I prefer ""change"" over ""set"" is that we\'re moving a pointer (the group ID), effectively, rather than changing a value. ', 'comment_created': datetime.datetime(2023, 7, 5, 23, 10, 37, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1253743143, 'comment_body': ""Let's change `name` to `setting_name`, and have an `assert setting_name in REALM_PERMISSION_GROUP_SETTINGS` line, just for readability that we expect this to be one of those values."", 'comment_created': datetime.datetime(2023, 7, 5, 23, 11, 21, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1253743668, 'comment_body': ""As discussed in https://chat.zulip.org/#narrow/stream/378-api-design/topic/event.20for.20updating.20group.20setting/near/1600758, let's avoid the property/value format here."", 'comment_created': datetime.datetime(2023, 7, 5, 23, 12, 36, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1253744122, 'comment_body': 'This is an old pattern; switch this to `send_event_on_commit`. @HemantUmre12 @sahil839 FYI too since you may have some PRs that need this tweak too.', 'comment_created': datetime.datetime(2023, 7, 5, 23, 13, 23, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1253744828, 'comment_body': 'This could be accessing the shorter `REALM_PERMISSION_GROUP_SETTINGS`, right? I think there may be a few more cases in this PR too.', 'comment_created': datetime.datetime(2023, 7, 5, 23, 14, 56, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1253746983, 'comment_body': 'I think an even better plan might be to move them to a central object or dataclass, rather than hanging off a model at all, but agreed this is a good follow-up.', 'comment_created': datetime.datetime(2023, 7, 5, 23, 19, 23, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1253747643, 'comment_body': ""I'm not opposed to this existing; I guess most places that currently reference `REALM_PERMISSION_GROUP_SETTING_ID_TO_GROUP_SETTING` feel like they should access `REALM_PERMISSION_GROUP_SETTINGS` instead, but maybe that doesn't work because of the `_id` suffix. \r\n\r\nI think the right larger model would be to have `GroupPermissionSetting` have an `id_field_name` field."", 'comment_created': datetime.datetime(2023, 7, 5, 23, 20, 55, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1254011956, 'comment_body': 'Most of the places we use the `REALM_PERMISSION_GROUP_SETTING_ID_TO_GROUP_SETTING` object in a loop. So in those places we can just loop over `REALM_PERMISSION_GROUP_SETTINGS` and add ""_id"" to the string like we do for stream settings currently.\r\n\r\nAnd a couple of other places where we use this differently is in `has_permission` code in `models.py` and in `views/realm.py` to check whether a setting is a group-based settings to add its new value in `req_group_setting_vars` object.\r\n\r\nWe can actually directly use `create_multiuse_invite_group` instead of `create_multiuse_invite_group_id` in `has_permission` as we eventually pass user group object in `is_user_in_group`.\r\nWhile this dict is actually helpful to use in the `views/realm.py` code. And that also might be changed if we change the parameters to not have ""_id"" to allow setting them to single user groups.\r\n', 'comment_created': datetime.datetime(2023, 7, 6, 6, 53, 21, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1254013215, 'comment_body': 'But yeah, I agree that having `id_field_name` would be a better plan.', 'comment_created': datetime.datetime(2023, 7, 6, 6, 54, 38, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1254148649, 'comment_body': 'Hmm, keeping this dict is helpful in `views/realm.py`. If we will change the parameters to not have ""_id"" than we can remove this dict. But in that case I think we should also make changes in name of `page_params` and `events` because our current logic in frontend for changing the settings is based on the assumption that name of the setting received in `page_params` is same as name of the parameter used for changing the setting. Otherwise we need to maintain an array in frontend to distinguish between role based and group based setting.', 'comment_created': datetime.datetime(2023, 7, 6, 9, 0, 34, tzinfo=datetime.timezone.utc), 'commenter': 'Ujjawal3', 'type': 'User'}, {'comment_id': 1254735119, 'comment_body': 'By default `do_create_realm` creates a realm with `plan_type`=2. But the test expects realm of `plan_type`=1.', 'comment_created': datetime.datetime(2023, 7, 6, 17, 34, 27, tzinfo=datetime.timezone.utc), 'commenter': 'Ujjawal3', 'type': 'User'}, {'comment_id': 1255697129, 'comment_body': 'I am not sure whether there is anything better which can be done here.', 'comment_created': datetime.datetime(2023, 7, 7, 11, 41, 33, tzinfo=datetime.timezone.utc), 'commenter': 'Ujjawal3', 'type': 'User'}, {'comment_id': 1263144650, 'comment_body': ""Please don't use numerical values like `1`; always use readable values like `Realm.PLAN_TYPE_FOO` instead."", 'comment_created': datetime.datetime(2023, 7, 13, 23, 48, 9, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1283324310, 'comment_body': ""I don't think there is need for this code. It was only needed to pass [this](https://github.com/zulip/zulip/blob/6632eca2dcf2051043e95348658d6da02305669f/zerver/tests/test_import_export.py#L1554) test. In this test `zerver_usergroup` is not present in data but `create_multiuse_invite` field have a value. As `zerver_usergroup` is not present I need  to delete this from imported data. "", 'comment_created': datetime.datetime(2023, 8, 3, 14, 52, 3, tzinfo=datetime.timezone.utc), 'commenter': 'Ujjawal3', 'type': 'User'}, {'comment_id': 1285228813, 'comment_body': 'I am not sure whether we want a separate feature level entry for these API changes.', 'comment_created': datetime.datetime(2023, 8, 6, 14, 50, 8, tzinfo=datetime.timezone.utc), 'commenter': 'Ujjawal3', 'type': 'User'}, {'comment_id': 1286671358, 'comment_body': ""Yeah, this will not be needed. Can we instead modify the test data to set the setting fields to `None`? I guess that's what happens when a slack organization or data from any other product is imported."", 'comment_created': datetime.datetime(2023, 8, 8, 6, 51, 44, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1286682747, 'comment_body': 'I think we should add `atomic = False` here to prevent running a one large transaction.', 'comment_created': datetime.datetime(2023, 8, 8, 7, 4, 2, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1286687625, 'comment_body': 'We can avoid looping over objects here and instead run three queries - one for `invite_to_realm_policy` set to `POLICY_NOBODY`, one for `invite_to_realm_policy` set to `POLICY_ADMINS_ONLY` and one for rest of the realms where each query would be similar to what we do in the `0455` migration (without the batching I guess).\r\n\r\nBut I am not sure whether the complexity is required here for `Realm` table, so we can leave it as it is for now and just add the `atomic = False` as mentioned in the below comment.', 'comment_created': datetime.datetime(2023, 8, 8, 7, 8, 28, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1286710032, 'comment_body': 'I think using same feature level should be fine.', 'comment_created': datetime.datetime(2023, 8, 8, 7, 25, 52, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1286710250, 'comment_body': 'We can use `DELETE` instead of `DEL`.', 'comment_created': datetime.datetime(2023, 8, 8, 7, 26, 4, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1286716392, 'comment_body': 'This change should be done in the last commit that includes changes for this particular feature level.', 'comment_created': datetime.datetime(2023, 8, 8, 7, 30, 5, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1286725398, 'comment_body': 'We should also verify whether the event format sent here is as expected or not like we do in `do_set_realm_property_test`.', 'comment_created': datetime.datetime(2023, 8, 8, 7, 38, 38, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1286865415, 'comment_body': 'Should we just sent the event to admins and the user who would be affected like the one who sent the invite only and not all the non-admin users?', 'comment_created': datetime.datetime(2023, 8, 8, 9, 34, 10, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1286943690, 'comment_body': 'This should mirror the API changelog entries for new realm settings. See feature levels 162, 137, 129, 109.\r\n\r\nAlso, ID should be capitalized and normal text vs formatted as inline code.', 'comment_created': datetime.datetime(2023, 8, 8, 10, 47, 17, tzinfo=datetime.timezone.utc), 'commenter': 'laurynmm', 'type': 'User'}, {'comment_id': 1286952147, 'comment_body': 'Revised text w/link:\r\n`PATCH /realm`: Added `create_multiuse_invite_group` parameter to support changing the user group whose members can create [reusable invitation links](relative link to help center article).\r\n\r\nPerhaps a ""Previously, creating reusable invite links was ..."" note for when this endpoint is documented.', 'comment_created': datetime.datetime(2023, 8, 8, 10, 55, 45, tzinfo=datetime.timezone.utc), 'commenter': 'laurynmm', 'type': 'User'}, {'comment_id': 1286969053, 'comment_body': 'Revised text:\r\n`GET /invites`: Endpoint response for non-admin users now includes both email invitations and reusable invitation links that they have created. Previously, non-admin users could only create email invitations, and therefore the response did not include reusable invitation links for these users.""', 'comment_created': datetime.datetime(2023, 8, 8, 11, 13, 5, tzinfo=datetime.timezone.utc), 'commenter': 'laurynmm', 'type': 'User'}, {'comment_id': 1286971070, 'comment_body': 'Also, maybe revise text to: \r\n\r\n""Non-admin users can now revoke reusable invite links they have created. Previously, only admin users could create and revoke reusable invite links.""', 'comment_created': datetime.datetime(2023, 8, 8, 11, 15, 7, tzinfo=datetime.timezone.utc), 'commenter': 'laurynmm', 'type': 'User'}, {'comment_id': 1286978965, 'comment_body': 'Link to help center documentation, and maybe use ""reusable invitation links"" vs ""invite links"".\r\n\r\nSame note for register response feature level note.', 'comment_created': datetime.datetime(2023, 8, 8, 11, 23, 7, tzinfo=datetime.timezone.utc), 'commenter': 'laurynmm', 'type': 'User'}, {'comment_id': 1286981821, 'comment_body': 'I think we removed the `@` from these system group names. See `can_mention_group` in documentation.\r\n\r\nSame note for register response feature level note.', 'comment_created': datetime.datetime(2023, 8, 8, 11, 26, 8, tzinfo=datetime.timezone.utc), 'commenter': 'laurynmm', 'type': 'User'}, {'comment_id': 1287000573, 'comment_body': 'How about move the sentence from below here:\r\n\r\n```\r\n* You can [restrict the ability to invite new users](#change-who-can-send-invitations) to\r\n join your Zulip organzation to specific [roles](/help/roles-and-permissions).\r\n```', 'comment_created': datetime.datetime(2023, 8, 8, 11, 45, 50, tzinfo=datetime.timezone.utc), 'commenter': 'laurynmm', 'type': 'User'}, {'comment_id': 1287001075, 'comment_body': 'Delete this content here and move first sentence to bullet point above.', 'comment_created': datetime.datetime(2023, 8, 8, 11, 46, 20, tzinfo=datetime.timezone.utc), 'commenter': 'laurynmm', 'type': 'User'}, {'comment_id': 1287002223, 'comment_body': 'I think it would be good to have this be ""Who can create reusable invitation links"" here and in the UI.', 'comment_created': datetime.datetime(2023, 8, 8, 11, 47, 29, tzinfo=datetime.timezone.utc), 'commenter': 'laurynmm', 'type': 'User'}, {'comment_id': 1287003607, 'comment_body': 'Maybe ""Who can create reusable invitation links""?', 'comment_created': datetime.datetime(2023, 8, 8, 11, 48, 42, tzinfo=datetime.timezone.utc), 'commenter': 'laurynmm', 'type': 'User'}, {'comment_id': 1287028843, 'comment_body': 'Maybe change to ""Create a reusable invitation link"" for consistency.', 'comment_created': datetime.datetime(2023, 8, 8, 12, 13, 19, tzinfo=datetime.timezone.utc), 'commenter': 'laurynmm', 'type': 'User'}, {'comment_id': 1287107032, 'comment_body': 'I could not figure out how to define data type of events corresponding to group setting updates. We need to define required keys and optional keys but for these events there should be atleast one key from `Realm.REALM_GROUP_PERMISSIONS_SETTING` . I tried something like this but there was an error because of enum type.\r\n```\r\n    required_keys=[\r\n      (EnumType([setting_name for setting_name in Realm.REALM_PERMISSION_GROUP_SETTINGS]),int),\r\n    ]\r\n```\r\nI looked at other definitions but could not find any where we need to do such thing.', 'comment_created': datetime.datetime(2023, 8, 8, 13, 18, 27, tzinfo=datetime.timezone.utc), 'commenter': 'Ujjawal3', 'type': 'User'}, {'comment_id': 1287116657, 'comment_body': 'Yes we can do that. So I think we should change the function to something like this\r\n```\r\ndef notify_invites_changed(realm: Realm, acting_user: Optional[UserProfile]=None) -> None:\r\n    event = dict(type=""invites_changed"")\r\n    admin_ids = [user.id for user in realm.get_admin_users_and_bots()]\r\n    recipient_ids=admin_ids\r\n    if(acting_user):\r\n        recipient_ids.append(acting_user.id)\r\n   send_event(realm, event, recipient_ids)\r\n```', 'comment_created': datetime.datetime(2023, 8, 8, 13, 25, 22, tzinfo=datetime.timezone.utc), 'commenter': 'Ujjawal3', 'type': 'User'}, {'comment_id': 1288058636, 'comment_body': ""I don't think you can use `EnumType` as a first element of a tuple, it has to be a `str`.\r\n\r\nI think what we can do is define something like `group_setting_update_data_type` as a `DictType` with only `optional_keys` and then check that atlease one field is present. Something similar to what we do for `check_user_group_update`."", 'comment_created': datetime.datetime(2023, 8, 9, 7, 22, 38, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1288059577, 'comment_body': 'Yes, that seems correct.', 'comment_created': datetime.datetime(2023, 8, 9, 7, 23, 30, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1288482928, 'comment_body': 'Yes, I have modified the test data and have removed this code.', 'comment_created': datetime.datetime(2023, 8, 9, 13, 27, 25, tzinfo=datetime.timezone.utc), 'commenter': 'Ujjawal3', 'type': 'User'}, {'comment_id': 1290227395, 'comment_body': ""So, we can just combine these two bullet points, like we do for other new realm settings:\r\n\r\n```markdown\r\n* `PATCH /realm`, [`POST /register`](/api/register-queue),\r\n  [`GET /events`](/api/get-events): Added `create_multiuse_invite_group`\r\n  realm setting, which is the ID of the user group whose members can\r\n  create [reusable invitation links](/help/invite-new-users#create-a-reusable-invitation-link)\r\n  to an organization. Previously, only admin users could create these\r\n  links.\r\n```\r\n\r\nI switched the word order up a little bit so that the text wrapping in the rendered changelog looks better. Also, I think it's best to have the help link in the first bullet point."", 'comment_created': datetime.datetime(2023, 8, 10, 14, 31, 18, tzinfo=datetime.timezone.utc), 'commenter': 'laurynmm', 'type': 'User'}, {'comment_id': 1290230568, 'comment_body': 'We\'ll want a comma after ""Previously"" when it starts a sentence. Again, it would be good to be consistently using ""reusable invitation links"". And let\'s modify the second sentence to focus on the change to the endpoint:\r\n\r\n```markdown\r\n* `POST /invites/multiuse`: Non-admin users can now use this endpoint\r\n  to create reusable invitation links. Previously, this endpoint was\r\n  restricted to admin users only.\r\n```', 'comment_created': datetime.datetime(2023, 8, 10, 14, 33, 36, tzinfo=datetime.timezone.utc), 'commenter': 'laurynmm', 'type': 'User'}, {'comment_id': 1290234905, 'comment_body': ""Small note, there's an extra space after the colon here. I always find it useful to look at the documentation changes in a browser to catch these little things."", 'comment_created': datetime.datetime(2023, 8, 10, 14, 36, 35, tzinfo=datetime.timezone.utc), 'commenter': 'laurynmm', 'type': 'User'}, {'comment_id': 1290237895, 'comment_body': 'Again, let\'s be consistent with ""reusable invitation links"" here.', 'comment_created': datetime.datetime(2023, 8, 10, 14, 38, 48, tzinfo=datetime.timezone.utc), 'commenter': 'laurynmm', 'type': 'User'}, {'comment_id': 1290240323, 'comment_body': ""Again, I think we can just delete all the content before the header here, even the `{!owner-only.md!)` since that's at the top of this page."", 'comment_created': datetime.datetime(2023, 8, 10, 14, 40, 27, tzinfo=datetime.timezone.utc), 'commenter': 'laurynmm', 'type': 'User'}, {'comment_id': 1290243768, 'comment_body': 'One more small tweak here and in the register response:\r\n\r\n```markdown\r\nThe ID of the [user group](/api/get-user-groups) whose members are\r\nallowed to create [reusable invitation\r\nlinks](/help/invite-new-users#create-a-reusable-invitation-link)\r\nto the organization.\r\n```', 'comment_created': datetime.datetime(2023, 8, 10, 14, 42, 49, tzinfo=datetime.timezone.utc), 'commenter': 'laurynmm', 'type': 'User'}, {'comment_id': 1290247785, 'comment_body': 'I think this is being rendered a little differently than the other settings ...\r\n\r\n<details>\r\n<summary>screenshot as Iago</summary>\r\n\r\n![Screenshot from 2023-08-10 15-41-14](https://github.com/zulip/zulip/assets/63245456/ec0db657-6adf-4126-aa87-d2bef86a3df5)\r\n</details>\r\n\r\n', 'comment_created': datetime.datetime(2023, 8, 10, 14, 45, 25, tzinfo=datetime.timezone.utc), 'commenter': 'laurynmm', 'type': 'User'}, {'comment_id': 1293039436, 'comment_body': 'Yeah we use the custom dropdown widget, like the ones used for `New stream announcements` setting for group-based settings. And other settings used the default `select` element.', 'comment_created': datetime.datetime(2023, 8, 14, 6, 52, 53, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1293045784, 'comment_body': 'I am not completely sure, but we might need a changelog entry for this too. @laurynmm FYI.', 'comment_created': datetime.datetime(2023, 8, 14, 6, 58, 50, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1293059131, 'comment_body': 'I think duplicate events are being sent here for admins here. ', 'comment_created': datetime.datetime(2023, 8, 14, 7, 15, 23, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1293062082, 'comment_body': ""I think we don't need to send the event here to `user_profile` since this is called as a result of deactivating the user."", 'comment_created': datetime.datetime(2023, 8, 14, 7, 18, 37, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1293084934, 'comment_body': 'And the setting should be disabled for `Iago`. It is disabled for me.', 'comment_created': datetime.datetime(2023, 8, 14, 7, 43, 5, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1293168058, 'comment_body': 'Yeah, earlier the UI of dropdown widget was not consistent with the other select fields. I made changes in last push and now it looks consistent.', 'comment_created': datetime.datetime(2023, 8, 14, 8, 40, 16, tzinfo=datetime.timezone.utc), 'commenter': 'Ujjawal3', 'type': 'User'}, {'comment_id': 1293239011, 'comment_body': 'Yes, earlier there were duplicate eevents. I have made changes now.', 'comment_created': datetime.datetime(2023, 8, 14, 9, 41, 45, tzinfo=datetime.timezone.utc), 'commenter': 'Ujjawal3', 'type': 'User'}, {'comment_id': 1293403181, 'comment_body': 'Yeah, looking at https://zulip.com/api/get-events#invites_changed, we would need to update the event description for the new users that get these events as well as make a **Changes** note for the previous state (only admins received these events) and a corresponding entry/bullet point in the API changelog for feature level 202 (at this point).', 'comment_created': datetime.datetime(2023, 8, 14, 12, 36, 33, tzinfo=datetime.timezone.utc), 'commenter': 'laurynmm', 'type': 'User'}, {'comment_id': 1293413322, 'comment_body': 'Pulled up the latest changes and the color looks good now, but the down arrow/chevron in the new setting dropdown is still a bit bigger than the other ones (at least in Chrome and Firefox on Linux) ...\r\n\r\n<details>\r\n<summary>Organization settings - Joining the organization - Iago</summary>\r\n\r\n![Screenshot from 2023-08-14 14-41-29](https://github.com/zulip/zulip/assets/63245456/c7ca91b6-ce49-4f8e-a52b-20478b9858dd)\r\n</details>', 'comment_created': datetime.datetime(2023, 8, 14, 12, 46, 51, tzinfo=datetime.timezone.utc), 'commenter': 'laurynmm', 'type': 'User'}, {'comment_id': 1294429696, 'comment_body': 'Needs to be ""the creator of the changed invitation"" because we\'re referring to a specific user and invitation. Might be nice to expand the first sentence for clarity too...\r\n\r\n> A simple event sent when the set of invitations in the organization changes. This event is sent to organization administrators and the creator of the changed invitation; this tells clients ...\r\n\r\nAnd in the **Changes** note below, maybe expand to ""organization administrators"" for consistency with the text above.', 'comment_created': datetime.datetime(2023, 8, 15, 10, 26, 41, tzinfo=datetime.timezone.utc), 'commenter': 'laurynmm', 'type': 'User'}, {'comment_id': 1294432884, 'comment_body': 'Using feature level 163 as a template, how about ...\r\n\r\n```markdown\r\n* [`GET /events`](/api/get-events): When the set of invitations in an\r\n  organization changes, an `invites_changed` event is now sent to the\r\n  creator of the changed invitation, as well as all admin users.\r\n  Previously, this event was only sent to admin users.\r\n```', 'comment_created': datetime.datetime(2023, 8, 15, 10, 31, 20, tzinfo=datetime.timezone.utc), 'commenter': 'laurynmm', 'type': 'User'}, {'comment_id': 1294681898, 'comment_body': 'I think we can do this for other dropdown widgets as well. The widget for ""Who can remove subscribers from this stream"" setting is also different from other dropdowns on the page.\r\n\r\nWould be good to have a discussion on CZO, but should not be a blocker for this PR.', 'comment_created': datetime.datetime(2023, 8, 15, 14, 35, 59, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1317856586, 'comment_body': ""@sahil839 is there a reason `allow_owners_group` should be false here? I can see situations where one might want to limit it to just owners, but wasn't sure if there was some policy situation to think about here."", 'comment_created': datetime.datetime(2023, 9, 6, 21, 32, 36, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1317857432, 'comment_body': 'This is probably fine but deserves a comment. Later we might refactor this function away from living in `models.py` to some `zerver/lib/` space of its own to resolve that.', 'comment_created': datetime.datetime(2023, 9, 6, 21, 33, 38, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1317872713, 'comment_body': 'This is a known issue with the component in general and we can deal with separately.', 'comment_created': datetime.datetime(2023, 9, 6, 21, 56, 11, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1317880509, 'comment_body': 'Yeah, this would be good to discuss in chat.zulip.org @Ujjawal3 can you start such a thread and link back to it here?', 'comment_created': datetime.datetime(2023, 9, 6, 22, 8, 56, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1317890034, 'comment_body': ""I'm pretty sure it's going to be an import cycle to have `server_events_disptach` call a function in the `ui_init` module. I think what we should do is move `update_invite_user_option` into either `gear_menu.js` to or maybe better a new `right_sidebar_ui.js` module that's responsible for that little component.\r\n\r\nThis is OK to merge since we're not trying to avoid import cycles in this module right now, but please start a #frontend discussion about this detail."", 'comment_created': datetime.datetime(2023, 9, 6, 22, 25, 38, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1317892153, 'comment_body': 'There shouldn\'t be a space before the `?` here; I\'ll just fix that before merging.\r\n\r\nAlso, I wonder if it\'d be better to make the check ""If the referrer is anyone other than me""? \r\n\r\n', 'comment_created': datetime.datetime(2023, 9, 6, 22, 29, 25, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1317898370, 'comment_body': ""This logic does not match the API documentation -- we're notifying the **acting user**, not the user who created the modified invitation. I'm pretty sure this implementation is thus wrong if say an administrator revokes an invitation that a normal user had created.\r\n\r\nThis is definitely a bug and we should fix it but it's also obscure enough that I'm not going to block merging this on doing so; we can just fix it in a near-term follow-up."", 'comment_created': datetime.datetime(2023, 9, 6, 22, 34, 9, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1317907529, 'comment_body': ""So I think we actually want the default for existing administrators that hadn't specified `NOBODY` as their policy to be `role:administrators`, because that way we don't adjust permissions for anyone upwards unexpectedly. "", 'comment_created': datetime.datetime(2023, 9, 6, 22, 52, 26, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1317912629, 'comment_body': '``` diff\r\ndiff --git a/zerver/migrations/0470_set_default_value_for_create_multiuse_invite_group.py b/zerver/migrations/0470_set_default_value_for_create_multiuse_invite_group.py\r\nindex f162fb3e05..6a82d6afea 100644\r\n--- a/zerver/migrations/0470_set_default_value_for_create_multiuse_invite_group.py\r\n+++ b/zerver/migrations/0470_set_default_value_for_create_multiuse_invite_group.py\r\n@@ -11,34 +11,23 @@ def set_default_value_for_create_multiuse_invite_group(\r\n     Realm = apps.get_model(""zerver"", ""Realm"")\r\n     UserGroup = apps.get_model(""zerver"", ""UserGroup"")\r\n \r\n-    Realm.POLICY_NOBODY = 6\r\n-    Realm.POLICY_ADMINS_ONLY = 2\r\n-\r\n-    UserGroup.NOBODY_GROUP_NAME = ""role:nobody""\r\n     UserGroup.ADMINISTRATORS_GROUP_NAME = ""role:administrators""\r\n-    default_group_name = ""role:moderators""\r\n \r\n     for realm in Realm.objects.all():\r\n-        if realm.create_multiuse_invite_group is None:\r\n-            if realm.invite_to_realm_policy == Realm.POLICY_NOBODY:\r\n-                nobody_group = UserGroup.objects.get(\r\n-                    name=UserGroup.NOBODY_GROUP_NAME, realm=realm, is_system_group=True\r\n-                )\r\n-                realm.create_multiuse_invite_group = nobody_group\r\n-\r\n-            elif realm.invite_to_realm_policy == Realm.POLICY_ADMINS_ONLY:\r\n-                admins_group = UserGroup.objects.get(\r\n-                    name=UserGroup.ADMINISTRATORS_GROUP_NAME, realm=realm, is_system_group=True\r\n-                )\r\n-                realm.create_multiuse_invite_group = admins_group\r\n-\r\n-            else:\r\n-                default_group = UserGroup.objects.get(\r\n-                    name=default_group_name, realm=realm, is_system_group=True\r\n-                )\r\n-                realm.create_multiuse_invite_group = default_group\r\n-\r\n-            realm.save(update_fields=[""create_multiuse_invite_group""])\r\n+        if realm.create_multiuse_invite_group is not None:\r\n+            continue\r\n+\r\n+        # Prior to the new create_multiuse_invite_group field being\r\n+        # created, multi-use invitation links could only be created\r\n+        # and managed by administrators, regardless of\r\n+        # invite_to_realm_policy. We replicate that policy for the\r\n+        # initial value of the new setting.\r\n+        admins_group = UserGroup.objects.get(\r\n+            name=UserGroup.ADMINISTRATORS_GROUP_NAME, realm=realm, is_system_group=True\r\n+        )\r\n+        realm.create_multiuse_invite_group = admins_group\r\n+\r\n+        realm.save(update_fields=[""create_multiuse_invite_group""])\r\n \r\n \r\n class Migration(migrations.Migration):\r\n```', 'comment_created': datetime.datetime(2023, 9, 6, 23, 2, 3, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1317914970, 'comment_body': ""After discussion with @alya, I think we should change this to `ADMINISTRATORS_GROUP_NAME`; we couldn't come up with a ton of use cases for moderator use of this, and I feel like that might better match user expectations in new organizations."", 'comment_created': datetime.datetime(2023, 9, 6, 23, 6, 47, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1318000872, 'comment_body': 'I think there is nothing wrong. We are passing the user who created the invitation not the one changing the invitation to `acting_user`. We must change the `acting_user` to some other name to avoid this confusion. ', 'comment_created': datetime.datetime(2023, 9, 7, 2, 0, 53, tzinfo=datetime.timezone.utc), 'commenter': 'Ujjawal3', 'type': 'User'}, {'comment_id': 1318002423, 'comment_body': 'I have started the discussion about this earlier [here](https://chat.zulip.org/#narrow/stream/101-design/topic/Large.20down.20arrow.20in.20dropdown.20list.20widget)', 'comment_created': datetime.datetime(2023, 9, 7, 2, 3, 22, tzinfo=datetime.timezone.utc), 'commenter': 'Ujjawal3', 'type': 'User'}, {'comment_id': 1318169422, 'comment_body': ""I am not sure. I thought it was described as such in the issue, but it isn't. I don't think there would be any issues to allow `Owners only` option. @Ujjawal3 can you confirm if we are missing something here? If not then we can set `allow_owners_group` as true."", 'comment_created': datetime.datetime(2023, 9, 7, 7, 2, 20, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1318178236, 'comment_body': 'Yeah, I think we can just rename the `acting_user` to something else. I was thinking of `referred_by` first, but that would also be confusing since we do not include which invite wass changed in the event. Probably something like `changed_invite_referrer` could be better.', 'comment_created': datetime.datetime(2023, 9, 7, 7, 10, 33, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1318884468, 'comment_body': 'Yeah `changed_invite_referrer` works for me.', 'comment_created': datetime.datetime(2023, 9, 7, 16, 50, 20, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}]","[{'commit_sha': '65e1b14dcd3aaec1999f37e32332fe6bf11a5993', 'committer_username': 'Ujjawal3', 'committer_name': 'Ujjawal Modi', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 5, 9, 46, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1076b91b58be1ba718faff4c7fb69f9ad01cc367', 'committer_username': 'Ujjawal3', 'committer_name': 'Ujjawal Modi', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 5, 9, 46, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f942d8d15dbc5a9bc7cf04dd4cac25243ed43adf', 'committer_username': 'Ujjawal3', 'committer_name': 'Ujjawal Modi', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 5, 9, 46, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4313be654becad21e2cec648d0ec20273e40818f', 'committer_username': 'timabbott', 'committer_name': 'Tim Abbott', 'committer_email': None, 'commit_date': datetime.datetime(2012, 11, 7, 21, 18, 39, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c805c4906403b32e6b05cd6e0f0079c148aa7b4f', 'committer_username': 'Ujjawal3', 'committer_name': 'Ujjawal Modi', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 5, 9, 46, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e4b22927e94f87e0e3801575910e9ce8576f6bf5', 'committer_username': 'Ujjawal3', 'committer_name': 'Ujjawal Modi', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 5, 9, 46, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cc974815de7f92daeb18617b015a8c6a7915ccf0', 'committer_username': 'Ujjawal3', 'committer_name': 'Ujjawal Modi', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 5, 9, 46, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '47cb883d681a246023e52f3476db089d4a1e2393', 'committer_username': 'Ujjawal3', 'committer_name': 'Ujjawal Modi', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 5, 9, 46, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '05af0ce504b3a0ab8cfd10fd483d786a707359f7', 'committer_username': 'Ujjawal3', 'committer_name': 'Ujjawal Modi', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 5, 9, 46, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f43281518b4f1f138928a58ba96e9dab4ca9c65a', 'committer_username': 'Ujjawal3', 'committer_name': 'Ujjawal Modi', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 5, 9, 46, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9100f8756f716014fdddbe71d861b43443fae0a4', 'committer_username': 'Ujjawal3', 'committer_name': 'Ujjawal Modi', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 5, 9, 46, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3eb18fd117c93147092abca881d3fe5059269c85', 'committer_username': 'Ujjawal3', 'committer_name': 'Ujjawal Modi', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 5, 9, 46, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '96f4749edaafcfc9bd5f0380457b7b2bb2723207', 'committer_username': 'Ujjawal3', 'committer_name': 'Ujjawal Modi', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 5, 9, 46, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1e9c7145f2ea7c18720ec776e54a6ea9ee8e0d30', 'committer_username': 'timabbott', 'committer_name': 'Tim Abbott', 'committer_email': None, 'commit_date': datetime.datetime(2012, 11, 7, 21, 18, 39, tzinfo=datetime.timezone.utc)}]",Ujjawal Modi,99073049,,User,,30,,28,14

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
43160685,zulip,zulip/zulip,Python,7616,21006,375,1133,60271,2474,28,798,"[{'id': 1501881871, 'number': 26637, 'closed': None, 'created': datetime.datetime(2023, 9, 4, 22, 26, 14, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 237, 'deletions': 158, 'state': 'open'}, {'id': 1500040138, 'number': 26634, 'closed': None, 'created': datetime.datetime(2023, 9, 2, 18, 7, 49, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 168, 'deletions': 22, 'state': 'open'}, {'id': 1459856377, 'number': 26399, 'closed': datetime.datetime(2023, 9, 22, 0, 39, 11, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 8, 2, 14, 5, 58, tzinfo=datetime.timezone.utc), 'time_taken': 4357993.0, 'time_delta': '50 days, 10:33:13', 'additions': 364, 'deletions': 21, 'state': 'closed'}, {'id': 1450206139, 'number': 26360, 'closed': None, 'created': datetime.datetime(2023, 7, 26, 12, 45, 52, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 64, 'deletions': 27, 'state': 'open'}, {'id': 1424284764, 'number': 26210, 'closed': datetime.datetime(2023, 7, 17, 17, 13, 53, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 7, 7, 8, 58, 39, tzinfo=datetime.timezone.utc), 'time_taken': 893714.0, 'time_delta': '10 days, 8:15:14', 'additions': 10, 'deletions': 9, 'state': 'closed'}, {'id': 1421680175, 'number': 26196, 'closed': datetime.datetime(2023, 10, 12, 1, 3, 53, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 7, 5, 19, 54, 5, tzinfo=datetime.timezone.utc), 'time_taken': 8485788.0, 'time_delta': '98 days, 5:09:48', 'additions': 173, 'deletions': 72, 'state': 'closed'}, {'id': 1404689508, 'number': 26102, 'closed': datetime.datetime(2023, 10, 26, 23, 27, 36, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 6, 23, 8, 24, 58, tzinfo=datetime.timezone.utc), 'time_taken': 10854158.0, 'time_delta': '125 days, 15:02:38', 'additions': 259, 'deletions': 77, 'state': 'closed'}, {'id': 1281256268, 'number': 24762, 'closed': datetime.datetime(2023, 9, 23, 15, 27, 44, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 3, 18, 19, 1, 36, tzinfo=datetime.timezone.utc), 'time_taken': 16316768.0, 'time_delta': '188 days, 20:26:08', 'additions': 407, 'deletions': 24, 'state': 'closed'}, {'id': 1225103068, 'number': 24254, 'closed': datetime.datetime(2023, 2, 22, 19, 53, 27, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 2, 1, 15, 57, 58, tzinfo=datetime.timezone.utc), 'time_taken': 1828529.0, 'time_delta': '21 days, 3:55:29', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 1220386619, 'number': 24216, 'closed': datetime.datetime(2023, 8, 9, 22, 23, 52, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 1, 28, 20, 9, 24, tzinfo=datetime.timezone.utc), 'time_taken': 16683268.0, 'time_delta': '193 days, 2:14:28', 'additions': 306, 'deletions': 16, 'state': 'closed'}, {'id': 1144453666, 'number': 23744, 'closed': datetime.datetime(2023, 2, 23, 23, 56, 51, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 12, 3, 20, 25, 33, tzinfo=datetime.timezone.utc), 'time_taken': 7097478.0, 'time_delta': '82 days, 3:31:18', 'additions': 6, 'deletions': 0, 'state': 'closed'}, {'id': 1136786451, 'number': 23676, 'closed': datetime.datetime(2022, 11, 30, 0, 35, 36, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 11, 27, 20, 6, 14, tzinfo=datetime.timezone.utc), 'time_taken': 188962.0, 'time_delta': '2 days, 4:29:22', 'additions': 8, 'deletions': 0, 'state': 'closed'}, {'id': 1119367553, 'number': 23540, 'closed': datetime.datetime(2022, 11, 23, 19, 43, 40, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 11, 11, 17, 23, 25, tzinfo=datetime.timezone.utc), 'time_taken': 1045215.0, 'time_delta': '12 days, 2:20:15', 'additions': 5, 'deletions': 2, 'state': 'closed'}, {'id': 1119233294, 'number': 23537, 'closed': datetime.datetime(2022, 11, 11, 16, 34, 54, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 11, 11, 15, 27, 14, tzinfo=datetime.timezone.utc), 'time_taken': 4060.0, 'time_delta': '1:07:40', 'additions': 8, 'deletions': 5, 'state': 'closed'}]"
