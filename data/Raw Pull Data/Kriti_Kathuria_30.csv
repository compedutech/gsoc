pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
1485256010,[1] Connection Monitor to close Dangling Connections,"PR [1] Connection Monitor: https://github.com/Netflix/mantis/pull/536
PR [2] Test: https://github.com/Netflix/mantis/pull/550
PR [3] Metrics: https://github.com/Netflix/mantis/pull/551

This PR is a part of GSoC 2023, fixing the issue detailed [here](https://netflix.github.io/mantis/updates/gsoc2023-ideas/#mantis-connection-monitor). 

The SSE connection b/w mantis-api and worker, for instances where the worker does not produce any data, does not close. 
For instances where the worker does not produce data, [this](https://github.com/Netflix/mantis/blob/d0ead57078c60031d34794ba199b9b17392f428f/mantis-network/src/main/java/io/reactivex/mantis/network/push/PushServer.java#L316) callback is not called. 
```
channel.closeFuture().addListener(new GenericFutureListener<io.netty.util.concurrent.Future<Void>>() {
      @Override
      public void operationComplete(io.netty.util.concurrent.Future<Void> future) throws Exception {
          connectionManager.remove(connection);
          connectionCleanup(heartbeatSubscription, connectionClosedCallback, metaMsgSubscription);
          // Callback from the channel is closed, we don't need to check channel status anymore.
          if (writableCheck != null) {
              writableCheck.cancel(false);
          }
      }
  });
```

We expose the underlying connection object created [in this client.submit()](https://github.com/Netflix/mantis/blob/d0ead57078c60031d34794ba199b9b17392f428f/mantis-server/mantis-server-worker-client/src/main/java/io/mantisrx/server/worker/client/SseWorkerConnection.java#L216) call with the aim of explicitly closing it.

We create a new client implementation class that `MantisHttpClientImpl` [here](https://github.com/kriti-sc/mantis/blob/608a9733d996aabbd2d4207d768919bb997bc821/mantis-server/mantis-server-worker-client/src/main/java/io/mantisrx/server/worker/client/MantisHttpClientImpl.java#L39) inherits the originally used `HttpClientImpl`. The client mentioned above used this new implementation. 

The above-mentioned submit call is present in `HttpClientImpl` [here](https://github.com/ReactiveX/RxNetty/blob/310a0469bf9a5d3d0978efe7504abcf645a2564a/rxnetty/src/main/java/io/reactivex/netty/protocol/http/client/HttpClientImpl.java#L64). This submit call calls the connect function in `RxClientImpl` present in [here](https://github.com/ReactiveX/RxNetty/blob/310a0469bf9a5d3d0978efe7504abcf645a2564a/rxnetty/src/main/java/io/reactivex/netty/client/RxClientImpl.java#L142). The new class `MantisHttpClientImpl` overrides this connect method, so as to expose the underlying connection object, or channel in this case. See [here](https://github.com/kriti-sc/mantis/blob/608a9733d996aabbd2d4207d768919bb997bc821/mantis-server/mantis-server-worker-client/src/main/java/io/mantisrx/server/worker/client/MantisHttpClientImpl.java#L57).
```
@Override
  public Observable<ObservableConnection<HttpClientResponse<O>, HttpClientRequest<I>>> connect() {
      this.observableConection = super.connect();
      return this.observableConection.doOnNext(conn -> {
          log.info(""Tracking connection: {}"", conn.getChannel().toString());
          this.connectionTracker.add(conn.getChannel());
      });
  }
```

The new client also stores the connection object as in the last line in above snippet ([code here](https://github.com/kriti-sc/mantis/blob/608a9733d996aabbd2d4207d768919bb997bc821/mantis-server/mantis-server-worker-client/src/main/java/io/mantisrx/server/worker/client/MantisHttpClientImpl.java#L59)). 

Later, when the connection is closed and cleanup is being performed [here](https://github.com/Netflix/mantis/blob/d0ead57078c60031d34794ba199b9b17392f428f/mantis-server/mantis-server-worker-client/src/main/java/io/mantisrx/server/worker/client/SseWorkerConnection.java#L242), an explicit close is performed on the connection object [here](https://github.com/kriti-sc/mantis/blob/608a9733d996aabbd2d4207d768919bb997bc821/mantis-server/mantis-server-worker-client/src/main/java/io/mantisrx/server/worker/client/SseWorkerConnection.java#L250). 
```
private void resetConnected() {
        // explicitly close the connection
        ((MantisHttpClientImpl<?, ?>)client).closeConn();
        if (isConnected.getAndSet(false)) {
             .....
        }
        ....
}
```

```
public void closeConn() {
      Channel channel;
      for (Channel value : this.connectionTracker) {
          channel = value;
          log.info(""Closing connection: {}. Status at close: isActive: {}, isOpen: {}, isWritable: {}"",
                  channel.toString(), channel.isActive(), channel.isOpen(), channel.isWritable());
          channel.close();
      }
      this.connectionTracker.clear();
  }
```






More details: [Mantis Connection Monitor.pdf](https://github.com/Netflix/mantis/files/12435319/Mantis.Connection.Monitor.pdf)",True,536,https://api.github.com/repos/Netflix/mantis/pulls/536,https://github.com/Netflix/mantis/pull/536,closed,122,7,3,33,3,14,0,0,[],2023-08-22 18:46:25+00:00,2023-09-28 01:03:03+00:00,3132998.0,"36 days, 6:16:38","[{'comment_id': 1314289965, 'comment_body': 'Add @Override annotation for methods that are inherited from parent class.', 'comment_created': datetime.datetime(2023, 9, 3, 17, 8, 46, tzinfo=datetime.timezone.utc), 'commenter': 'calvin681', 'type': 'User'}, {'comment_id': 1314290846, 'comment_body': ""I don't think this whole section is needed. Most of these instance variables are not used anywhere inside this class. The `super` call above should've handled all initializations for you."", 'comment_created': datetime.datetime(2023, 9, 3, 17, 16, 3, tzinfo=datetime.timezone.utc), 'commenter': 'calvin681', 'type': 'User'}, {'comment_id': 1314290886, 'comment_body': 'Same comment as above.', 'comment_created': datetime.datetime(2023, 9, 3, 17, 16, 15, tzinfo=datetime.timezone.utc), 'commenter': 'calvin681', 'type': 'User'}, {'comment_id': 1314290919, 'comment_body': 'Rename `x` to something more descriptive.', 'comment_created': datetime.datetime(2023, 9, 3, 17, 16, 42, tzinfo=datetime.timezone.utc), 'commenter': 'calvin681', 'type': 'User'}, {'comment_id': 1314290936, 'comment_body': '@Override annotation.', 'comment_created': datetime.datetime(2023, 9, 3, 17, 16, 55, tzinfo=datetime.timezone.utc), 'commenter': 'calvin681', 'type': 'User'}, {'comment_id': 1314291016, 'comment_body': 'Unnecessary change.', 'comment_created': datetime.datetime(2023, 9, 3, 17, 17, 21, tzinfo=datetime.timezone.utc), 'commenter': 'calvin681', 'type': 'User'}, {'comment_id': 1324662766, 'comment_body': ""nit: use Lombok's `@Slf4j`"", 'comment_created': datetime.datetime(2023, 9, 13, 15, 1, 24, tzinfo=datetime.timezone.utc), 'commenter': 'sundargates', 'type': 'User'}, {'comment_id': 1324665513, 'comment_body': 'Did you consider composition instead of inheritance? Can you potentially construct the HttpClientImpl outside and pass it to this constructor? This way a lot of the complex constructors will potentially go away.  ', 'comment_created': datetime.datetime(2023, 9, 13, 15, 3, 25, tzinfo=datetime.timezone.utc), 'commenter': 'sundargates', 'type': 'User'}, {'comment_id': 1324668328, 'comment_body': ""This class will still implement the HttpClient interface but delegate to it for most calls (you can use Lombok's @Delegate pattern for this) and decorate the methods that deal with the connection objects. "", 'comment_created': datetime.datetime(2023, 9, 13, 15, 5, 30, tzinfo=datetime.timezone.utc), 'commenter': 'sundargates', 'type': 'User'}, {'comment_id': 1325108824, 'comment_body': 'This is the only constructor you use in the code. Remove the other 2 constructors.', 'comment_created': datetime.datetime(2023, 9, 13, 21, 44, 14, tzinfo=datetime.timezone.utc), 'commenter': 'calvin681', 'type': 'User'}, {'comment_id': 1325108943, 'comment_body': 'See comment above, remove this.', 'comment_created': datetime.datetime(2023, 9, 13, 21, 44, 26, tzinfo=datetime.timezone.utc), 'commenter': 'calvin681', 'type': 'User'}, {'comment_id': 1325109078, 'comment_body': 'See comment above, remove this.', 'comment_created': datetime.datetime(2023, 9, 13, 21, 44, 36, tzinfo=datetime.timezone.utc), 'commenter': 'calvin681', 'type': 'User'}, {'comment_id': 1325110540, 'comment_body': 'I feel the current approach is simpler.', 'comment_created': datetime.datetime(2023, 9, 13, 21, 46, 47, tzinfo=datetime.timezone.utc), 'commenter': 'calvin681', 'type': 'User'}, {'comment_id': 1334700850, 'comment_body': 'Resolving without action. ', 'comment_created': datetime.datetime(2023, 9, 22, 18, 25, 17, tzinfo=datetime.timezone.utc), 'commenter': 'kriti-sc', 'type': 'User'}]","[{'commit_sha': '743fa673990ccddc893811ac86dd4f54f0f5644c', 'committer_username': 'kriti-sc', 'committer_name': 'Kriti Kathuria', 'committer_email': None, 'commit_date': datetime.datetime(2018, 4, 10, 8, 9, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': '02cad0d5ff972106c73332da6d6915e8072f478f', 'committer_username': 'kriti-sc', 'committer_name': 'Kriti Kathuria', 'committer_email': None, 'commit_date': datetime.datetime(2018, 4, 10, 8, 9, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e33630c93cdedb47aa8c7bb1b0783a54e9d97c6b', 'committer_username': 'kriti-sc', 'committer_name': 'Kriti Kathuria', 'committer_email': None, 'commit_date': datetime.datetime(2018, 4, 10, 8, 9, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6c84fb24f73279f015541a95c68a014c94724906', 'committer_username': 'kriti-sc', 'committer_name': 'Kriti Kathuria', 'committer_email': None, 'commit_date': datetime.datetime(2018, 4, 10, 8, 9, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': '046ba5212c3bc95d86f6145450423752dfb3a07b', 'committer_username': 'kriti-sc', 'committer_name': 'Kriti Kathuria', 'committer_email': None, 'commit_date': datetime.datetime(2018, 4, 10, 8, 9, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'eebd5b4ba1ae3c9ec733bf9aea616f65140fbf57', 'committer_username': 'kriti-sc', 'committer_name': 'Kriti Kathuria', 'committer_email': None, 'commit_date': datetime.datetime(2018, 4, 10, 8, 9, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': '50dfc129edb86bca8020822528e6c431ed128747', 'committer_username': 'kriti-sc', 'committer_name': 'Kriti Kathuria', 'committer_email': None, 'commit_date': datetime.datetime(2018, 4, 10, 8, 9, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4671bf92313bba1ae67bf76ad18148961250a74c', 'committer_username': 'kriti-sc', 'committer_name': 'Kriti Kathuria', 'committer_email': None, 'commit_date': datetime.datetime(2018, 4, 10, 8, 9, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ef60f463d49269317568133e280b03730ded3409', 'committer_username': 'kriti-sc', 'committer_name': 'Kriti Kathuria', 'committer_email': None, 'commit_date': datetime.datetime(2018, 4, 10, 8, 9, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c215402b862254f5d973b35b5ba57bddabc8ab78', 'committer_username': 'kriti-sc', 'committer_name': 'Kriti Kathuria', 'committer_email': None, 'commit_date': datetime.datetime(2018, 4, 10, 8, 9, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cdf59046c47702d94f907aa56d5022bdda27c9bc', 'committer_username': 'kriti-sc', 'committer_name': 'Kriti Kathuria', 'committer_email': None, 'commit_date': datetime.datetime(2018, 4, 10, 8, 9, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4724b21e4b6b27d61af5b3a553a3eb90f9a8129b', 'committer_username': 'kriti-sc', 'committer_name': 'Kriti Kathuria', 'committer_email': None, 'commit_date': datetime.datetime(2018, 4, 10, 8, 9, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1ecb437b8897d8fa6587b1992e0a7e63a332cda2', 'committer_username': 'kriti-sc', 'committer_name': 'Kriti Kathuria', 'committer_email': None, 'commit_date': datetime.datetime(2018, 4, 10, 8, 9, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f26c4471ea423cfbbeb79b8b252b66541db11dc7', 'committer_username': 'kriti-sc', 'committer_name': 'Kriti Kathuria', 'committer_email': None, 'commit_date': datetime.datetime(2018, 4, 10, 8, 9, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4525eeb7a896784a58dcd53dc974e64ca1b2d8de', 'committer_username': 'kriti-sc', 'committer_name': 'Kriti Kathuria', 'committer_email': None, 'commit_date': datetime.datetime(2018, 4, 10, 8, 9, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1fef9634fe915dbbce88050d7d493f03bf935000', 'committer_username': 'kriti-sc', 'committer_name': 'Kriti Kathuria', 'committer_email': None, 'commit_date': datetime.datetime(2018, 4, 10, 8, 9, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c8ebd94a022f96bd0c0085ea39865113fef1ffd8', 'committer_username': 'kriti-sc', 'committer_name': 'Kriti Kathuria', 'committer_email': None, 'commit_date': datetime.datetime(2018, 4, 10, 8, 9, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': '91a1319b6d6d6699cca87a0d0aea0d3542e259b7', 'committer_username': 'kriti-sc', 'committer_name': 'Kriti Kathuria', 'committer_email': None, 'commit_date': datetime.datetime(2018, 4, 10, 8, 9, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1fee40d1aa8618998b756e4d1e3de158ed807208', 'committer_username': 'kriti-sc', 'committer_name': 'Kriti Kathuria', 'committer_email': None, 'commit_date': datetime.datetime(2018, 4, 10, 8, 9, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': '703aa28894d84e4a8f00dcce90388e2553051992', 'committer_username': 'kriti-sc', 'committer_name': 'Kriti Kathuria', 'committer_email': None, 'commit_date': datetime.datetime(2018, 4, 10, 8, 9, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a09e5ac27883669ad1819988b767798eb9f2a517', 'committer_username': 'kriti-sc', 'committer_name': 'Kriti Kathuria', 'committer_email': None, 'commit_date': datetime.datetime(2018, 4, 10, 8, 9, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': '73b5bc5cb7d567043d33fb91289b837c5b1ceccf', 'committer_username': 'kriti-sc', 'committer_name': 'Kriti Kathuria', 'committer_email': None, 'commit_date': datetime.datetime(2018, 4, 10, 8, 9, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7a4dff9eca8b7701b526ce4a48634bd5777bcb8c', 'committer_username': 'kriti-sc', 'committer_name': 'Kriti Kathuria', 'committer_email': None, 'commit_date': datetime.datetime(2018, 4, 10, 8, 9, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd0f6eee8de734af2cef3ce20f47606d2a28d2558', 'committer_username': 'kriti-sc', 'committer_name': 'Kriti Kathuria', 'committer_email': None, 'commit_date': datetime.datetime(2018, 4, 10, 8, 9, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3b38e0181e615310c6ed6f32f38f451db50ac3bd', 'committer_username': 'kriti-sc', 'committer_name': 'Kriti Kathuria', 'committer_email': None, 'commit_date': datetime.datetime(2018, 4, 10, 8, 9, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': '45275ff7d15ce53feaba2ddcea6685014742669c', 'committer_username': 'kriti-sc', 'committer_name': 'Kriti Kathuria', 'committer_email': None, 'commit_date': datetime.datetime(2018, 4, 10, 8, 9, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd26ec129d522cb30ae0f49748ed29713c357eec6', 'committer_username': 'kriti-sc', 'committer_name': 'Kriti Kathuria', 'committer_email': None, 'commit_date': datetime.datetime(2018, 4, 10, 8, 9, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cc16457c27daad39dfde68bec3554d2d0af36af2', 'committer_username': 'kriti-sc', 'committer_name': 'Kriti Kathuria', 'committer_email': None, 'commit_date': datetime.datetime(2018, 4, 10, 8, 9, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c7a73e152ea81b1bbc8b89281c497982db3850c5', 'committer_username': 'kriti-sc', 'committer_name': 'Kriti Kathuria', 'committer_email': None, 'commit_date': datetime.datetime(2018, 4, 10, 8, 9, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': '608a9733d996aabbd2d4207d768919bb997bc821', 'committer_username': 'kriti-sc', 'committer_name': 'Kriti Kathuria', 'committer_email': None, 'commit_date': datetime.datetime(2018, 4, 10, 8, 9, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': '152f48cc86f54d241e4ea25e779e238433d4bf51', 'committer_username': 'kriti-sc', 'committer_name': 'Kriti Kathuria', 'committer_email': None, 'commit_date': datetime.datetime(2018, 4, 10, 8, 9, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3c17c2fb0be78b2feae4df5699b18d2d203f0080', 'committer_username': 'kriti-sc', 'committer_name': 'Kriti Kathuria', 'committer_email': None, 'commit_date': datetime.datetime(2018, 4, 10, 8, 9, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1a7dd1788467156c479fd21e547051c84c5fc520', 'committer_username': 'kriti-sc', 'committer_name': 'Kriti Kathuria', 'committer_email': None, 'commit_date': datetime.datetime(2018, 4, 10, 8, 9, 47, tzinfo=datetime.timezone.utc)}]",Kriti Kathuria,38242933,,User,,104,,3,12

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
190664284,mantis,Netflix/mantis,Java,202,1404,218,34,1148,70,12,35,"[{'id': 1498033754, 'number': 551, 'closed': datetime.datetime(2023, 9, 29, 17, 17, 9, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 9, 1, 0, 46, 54, tzinfo=datetime.timezone.utc), 'time_taken': 2478615.0, 'time_delta': '28 days, 16:30:15', 'additions': 26, 'deletions': 0, 'state': 'closed'}, {'id': 1498014827, 'number': 550, 'closed': datetime.datetime(2023, 9, 28, 1, 20, 49, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 9, 1, 0, 16, 48, tzinfo=datetime.timezone.utc), 'time_taken': 2336641.0, 'time_delta': '27 days, 1:04:01', 'additions': 67, 'deletions': 5, 'state': 'closed'}, {'id': 1485256010, 'number': 536, 'closed': datetime.datetime(2023, 9, 28, 1, 3, 3, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 8, 22, 18, 46, 25, tzinfo=datetime.timezone.utc), 'time_taken': 3132998.0, 'time_delta': '36 days, 6:16:38', 'additions': 122, 'deletions': 7, 'state': 'closed'}]"
