pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
841049650,Added new atom function xexp(),"## Description
Please include a short summary of the change.
Created a new file `xexp.py` in `cvxpy/atoms/elementwise/` and the corresponding canonicalizer file `xexp_canon.py` in `cvxpy/reductions/dcp2cone/atom_canonicalizers/` for defining a new atom function `xexp()` which returns `x*e^x` elementwise when a set of values of x is passed through it.

Issue link: #1517 

## Type of change
- [x] New feature (backwards compatible)
- [ ] New feature (breaking API changes)
- [ ] Bug fix
- [ ] Other (Documentation, CI, ...)

## [Contribution checklist](https://www.cvxpy.org/contributing/index.html#contribution-checklist)
- [x] Add our license to new files.
- [x] Check that your code adheres to our coding style.
- [ ] Write unittests.
- [ ] Run the unittests and check that they’re passing.
- [ ] Run the benchmarks to make sure your change doesn’t introduce a regression.",True,1641,https://api.github.com/repos/cvxpy/cvxpy/pulls/1641,https://github.com/cvxpy/cvxpy/pull/1641,closed,182,1,11,17,14,30,0,0,[],2022-02-06 11:22:59+00:00,2022-02-08 02:39:30+00:00,141391.0,"1 day, 15:16:31","[{'comment_id': 800216771, 'comment_body': 'Need to change this so the gradient is correct for xexp(x).', 'comment_created': datetime.datetime(2022, 2, 6, 18, 29, 41, tzinfo=datetime.timezone.utc), 'commenter': 'SteveDiamond', 'type': 'User'}, {'comment_id': 800216811, 'comment_body': ""It's not always positive. It should return (self.args[0].is_nonneg(), self.args[0].is_nonpos())"", 'comment_created': datetime.datetime(2022, 2, 6, 18, 30, 19, tzinfo=datetime.timezone.utc), 'commenter': 'SteveDiamond', 'type': 'User'}, {'comment_id': 800216867, 'comment_body': 'return self.args[0].is_nonneg()', 'comment_created': datetime.datetime(2022, 2, 6, 18, 30, 43, tzinfo=datetime.timezone.utc), 'commenter': 'SteveDiamond', 'type': 'User'}, {'comment_id': 800216900, 'comment_body': 'return False', 'comment_created': datetime.datetime(2022, 2, 6, 18, 30, 58, tzinfo=datetime.timezone.utc), 'commenter': 'SteveDiamond', 'type': 'User'}, {'comment_id': 800216969, 'comment_body': 'return self.args[0].is_nonneg()', 'comment_created': datetime.datetime(2022, 2, 6, 18, 31, 14, tzinfo=datetime.timezone.utc), 'commenter': 'SteveDiamond', 'type': 'User'}, {'comment_id': 800217197, 'comment_body': 'To avoid circular imports, be more specific with your imports. For example,\r\n```\r\nfrom cvxpy.constraints.exponential import ExpCone\r\nfrom cvxpy.atoms.elementwise.power import power\r\nfrom cvxpy.expressions.variable import Variable \r\n```', 'comment_created': datetime.datetime(2022, 2, 6, 18, 33, tzinfo=datetime.timezone.utc), 'commenter': 'SteveDiamond', 'type': 'User'}, {'comment_id': 800219830, 'comment_body': 'nvm', 'comment_created': datetime.datetime(2022, 2, 6, 18, 57, 58, tzinfo=datetime.timezone.utc), 'commenter': 'SteveDiamond', 'type': 'User'}, {'comment_id': 800219843, 'comment_body': 'nvm', 'comment_created': datetime.datetime(2022, 2, 6, 18, 58, 6, tzinfo=datetime.timezone.utc), 'commenter': 'SteveDiamond', 'type': 'User'}, {'comment_id': 800221924, 'comment_body': 'Put ""Copyright 2022, the CVXPY authors""', 'comment_created': datetime.datetime(2022, 2, 6, 19, 17, 40, tzinfo=datetime.timezone.utc), 'commenter': 'SteveDiamond', 'type': 'User'}, {'comment_id': 800223374, 'comment_body': ""Isn't `x = -2` the point of inflection for this function? So according to that shouldn't we check if the arguement is greater than -2?"", 'comment_created': datetime.datetime(2022, 2, 6, 19, 32, 8, tzinfo=datetime.timezone.utc), 'commenter': 'parthb83', 'type': 'User'}, {'comment_id': 800224458, 'comment_body': 'So in this I assigned `grad_vals = np.exp(values[0]) * (1 + values[0])`. I guess this should give the correct derivative of `x*e^x`.', 'comment_created': datetime.datetime(2022, 2, 6, 19, 42, 28, tzinfo=datetime.timezone.utc), 'commenter': 'parthb83', 'type': 'User'}, {'comment_id': 800224660, 'comment_body': ""That's true, but cvxpy can't tell whether something is >= -2. It only keeps track of signs."", 'comment_created': datetime.datetime(2022, 2, 6, 19, 44, 19, tzinfo=datetime.timezone.utc), 'commenter': 'SteveDiamond', 'type': 'User'}, {'comment_id': 800224706, 'comment_body': ""Regarding this, shouldn't the scope of `is_incr` and `is_decr` change as the function has a global minimum at `x=-1` and is increasing for x > 1 and decreasing for x < 1"", 'comment_created': datetime.datetime(2022, 2, 6, 19, 44, 53, tzinfo=datetime.timezone.utc), 'commenter': 'parthb83', 'type': 'User'}, {'comment_id': 800224907, 'comment_body': ""> That's true, but cvxpy can't tell whether something is >= -2. It only keeps track of signs.\r\n\r\nOhh so should I change `is_atom_concave` too to return true if x < 0?"", 'comment_created': datetime.datetime(2022, 2, 6, 19, 46, 17, tzinfo=datetime.timezone.utc), 'commenter': 'parthb83', 'type': 'User'}, {'comment_id': 800225497, 'comment_body': ""Hmm I was basically imagining we would restrict the domain to x >= 0. That's implied in the rewriting code."", 'comment_created': datetime.datetime(2022, 2, 6, 19, 52, 31, tzinfo=datetime.timezone.utc), 'commenter': 'SteveDiamond', 'type': 'User'}, {'comment_id': 800225812, 'comment_body': 'Ohh i guess it solves a lot of our dillema then! Should I also add `domain()` function to strictly enforce that \r\n`x-->[0,inf)`?', 'comment_created': datetime.datetime(2022, 2, 6, 19, 55, 20, tzinfo=datetime.timezone.utc), 'commenter': 'parthb83', 'type': 'User'}, {'comment_id': 800225860, 'comment_body': 'Good idea!', 'comment_created': datetime.datetime(2022, 2, 6, 19, 56, 11, tzinfo=datetime.timezone.utc), 'commenter': 'SteveDiamond', 'type': 'User'}, {'comment_id': 800346241, 'comment_body': 'So this is close but not quite right. You need to create a positive variable and then a negative variable. Like\r\n```\r\n# Test pos.\r\nx = cp.Variable(pos=True)\r\ntests\r\n\r\n# Test neg.\r\nx = cp.Variable(neg=True)\r\ntests\r\n```', 'comment_created': datetime.datetime(2022, 2, 7, 6, 27, 58, tzinfo=datetime.timezone.utc), 'commenter': 'SteveDiamond', 'type': 'User'}, {'comment_id': 800346575, 'comment_body': 'Maybe x \\geq 0?', 'comment_created': datetime.datetime(2022, 2, 7, 6, 28, 17, tzinfo=datetime.timezone.utc), 'commenter': 'SteveDiamond', 'type': 'User'}, {'comment_id': 800359756, 'comment_body': 'Hmm in curvature for x < 0, its giving it as `Quasilinear` and not Concave?', 'comment_created': datetime.datetime(2022, 2, 7, 6, 58, 21, tzinfo=datetime.timezone.utc), 'commenter': 'parthb83', 'type': 'User'}, {'comment_id': 800364946, 'comment_body': ""Yes, just do ``self.assertNotEqual(atom.curvature, s.CONVEX)``. It's not concave."", 'comment_created': datetime.datetime(2022, 2, 7, 7, 9, 46, tzinfo=datetime.timezone.utc), 'commenter': 'SteveDiamond', 'type': 'User'}, {'comment_id': 800932674, 'comment_body': ""Why don't you try\r\n```\r\n(lambda x: cp.xexp(cp.pos(x)), (2, 2), [[[1, 6], [3, 2]]],\r\n Constant([[math.e, 1], [math.e**2, 1.0 / math.e]])),"", 'comment_created': datetime.datetime(2022, 2, 7, 18, 17, 14, tzinfo=datetime.timezone.utc), 'commenter': 'SteveDiamond', 'type': 'User'}, {'comment_id': 800936754, 'comment_body': '```\r\natom_info = (<function <lambda> at 0x7f2e774b1f70>, (2, 2), [[[1, 6], [3, 2]]], Constant(CONSTANT, NONNEGATIVE, (2, 2)))\r\nobjective_type = <class \'cvxpy.problems.objective.Minimize\'>\r\n\r\n    @pytest.mark.parametrize(""atom_info, objective_type"", atoms_minimize + atoms_maximize)\r\n    def test_constant_atoms(atom_info, objective_type) -> None:\r\n    \r\n        atom, size, args, obj_val = atom_info\r\n    \r\n        for indexer in get_indices(size):\r\n            for solver in SOLVERS_TO_TRY:\r\n                # Atoms with Constant arguments.\r\n                prob_val = obj_val[indexer].value\r\n                const_args = [Constant(arg) for arg in args]\r\n                if len(size) != 0:\r\n                    objective = objective_type(atom(*const_args)[indexer])\r\n                else:\r\n                    objective = objective_type(atom(*const_args))\r\n                problem = Problem(objective)\r\n                run_atom(atom, problem, prob_val, solver)\r\n    \r\n                # Atoms with Variable arguments.\r\n                variables = []\r\n                constraints = []\r\n                for idx, expr in enumerate(args):\r\n                    variables.append(Variable(intf.shape(expr)))\r\n                    constraints.append(variables[-1] == expr)\r\n                if len(size) != 0:\r\n                    objective = objective_type(atom(*variables)[indexer])\r\n                else:\r\n                    objective = objective_type(atom(*variables))\r\n                problem = Problem(objective, constraints)\r\n>               run_atom(atom, problem, prob_val, solver)\r\n\r\ntest_constant_atoms.py:371: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\ntest_constant_atoms.py:316: in run_atom\r\n    result = problem.solve(solver=solver, verbose=verbose)\r\n../problems/problem.py:475: in solve\r\n    return solve_func(self, *args, **kwargs)\r\n../problems/problem.py:968: in _solve\r\n    data, solving_chain, inverse_data = self.get_problem_data(\r\n../problems/problem.py:629: in get_problem_data\r\n    data, inverse_data = solving_chain.apply(self, verbose)\r\n../reductions/chain.py:76: in apply\r\n    problem, inv = r.apply(problem)\r\n../reductions/dcp2cone/cone_matrix_stuffing.py:311: in apply\r\n    params_to_objective, flattened_variable = self.stuffed_objective(\r\n../reductions/dcp2cone/cone_matrix_stuffing.py:300: in stuffed_objective\r\n    c = extractor.affine(problem.objective.expr)\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n\r\nself = <cvxpy.utilities.coeff_extractor.CoeffExtractor object at 0x7f2e7741cee0>\r\nexpr = Expression(UNKNOWN, UNKNOWN, ())\r\n\r\n    def affine(self, expr):\r\n        """"""Extract problem data tensor from an expression that is reducible to\r\n        A*x + b.\r\n    \r\n        Applying the tensor to a flattened parameter vector and reshaping\r\n        will recover A and b (see the helpers in canonInterface).\r\n    \r\n        Parameters\r\n        ----------\r\n        expr : Expression or list of Expressions.\r\n            The expression(s) to process.\r\n    \r\n        Returns\r\n        -------\r\n        SciPy CSR matrix\r\n            Problem data tensor, of shape\r\n            (constraint length * (variable length + 1), parameter length + 1)\r\n        """"""\r\n        if isinstance(expr, list):\r\n            expr_list = expr\r\n        else:\r\n            expr_list = [expr]\r\n>       assert all([e.is_dpp() for e in expr_list])\r\nE       AssertionError\r\n\r\n../utilities/coeff_extractor.py:80: AssertionError\r\n------------------------------------- Captured stdout call --------------------------------------\r\nminimize xexp(maximum([[1. 3.]\r\n [6. 2.]], 0.0))[0, 0]\r\nminimize xexp(maximum(var2962, 0.0))[0, 0]\r\nsubject to var2962 == [[1. 3.]\r\n [6. 2.]]\r\n```\r\nShowing this error', 'comment_created': datetime.datetime(2022, 2, 7, 18, 22, 35, tzinfo=datetime.timezone.utc), 'commenter': 'parthb83', 'type': 'User'}, {'comment_id': 801113219, 'comment_body': ""I fixed it on my end. A lot of subtle issues. Thanks for being patient, I hadn't realized how many little pieces were involved in adding a new atom."", 'comment_created': datetime.datetime(2022, 2, 7, 22, 30, 45, tzinfo=datetime.timezone.utc), 'commenter': 'SteveDiamond', 'type': 'User'}, {'comment_id': 801199656, 'comment_body': ""Is the canonicalization valid for negative ``x``? We wouldn't want a DCP check to succeed when ``x`` is negative if we don't have a way to reformulate the atom appropriately."", 'comment_created': datetime.datetime(2022, 2, 8, 1, 40, 48, tzinfo=datetime.timezone.utc), 'commenter': 'rileyjmurray', 'type': 'User'}, {'comment_id': 801201943, 'comment_body': ""The domain is limited to x >= 0. It's only identified as convex for nonnegative arguments."", 'comment_created': datetime.datetime(2022, 2, 8, 1, 46, 59, tzinfo=datetime.timezone.utc), 'commenter': 'SteveDiamond', 'type': 'User'}, {'comment_id': 801203246, 'comment_body': 'Oh lol, I didn\'t see the ""not"" in ""assertNotEqual"".', 'comment_created': datetime.datetime(2022, 2, 8, 1, 50, 27, tzinfo=datetime.timezone.utc), 'commenter': 'rileyjmurray', 'type': 'User'}, {'comment_id': 801204889, 'comment_body': ""This test can easily pass even if there's a mistake in DGP canonicalization. It's better to define a simple yet nontrivial feasible set (like a box) along with an objective where you can easily determine the optimal value by hand. (We use the construction of restricting the feasible set to a single point in many tests, but in the end, I think those should be changed rather than mimicked.) \r\n\r\nThere should also be a test that hits the DCP canonicalization code path. \r\n\r\n"", 'comment_created': datetime.datetime(2022, 2, 8, 1, 54, 41, tzinfo=datetime.timezone.utc), 'commenter': 'rileyjmurray', 'type': 'User'}, {'comment_id': 801207740, 'comment_body': 'Ok, I changed it to an inequality. The objective is separable and monotonic, so I could only make it more complicated by adding a constraint, which is too confusing to verify IMO.\r\n\r\nThe DCP codepath is checked in test_constant_atoms.py. I agree that constraining to a point is not ideal though.', 'comment_created': datetime.datetime(2022, 2, 8, 2, 2, 17, tzinfo=datetime.timezone.utc), 'commenter': 'SteveDiamond', 'type': 'User'}, {'comment_id': 801211982, 'comment_body': ""The change to an inequality looks good.\r\n\r\nYou know, I never really looked at what ``test_constant_atoms.py`` was checking. It's nice! Although, as we move forward I suggest we think about how to implement a similar battery that doesn't fix an atom's argument to a specific value."", 'comment_created': datetime.datetime(2022, 2, 8, 2, 14, 23, tzinfo=datetime.timezone.utc), 'commenter': 'rileyjmurray', 'type': 'User'}]","[{'commit_sha': 'dd8171bd534df8eeadb0e0df20e2c39aebbdb9ee', 'committer_username': 'parthb83', 'committer_name': 'Parth Bansal', 'committer_email': None, 'commit_date': datetime.datetime(2021, 4, 2, 6, 9, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6334f53b1452a723f5cc37cdf12a32e7e0fe9a22', 'committer_username': 'parthb83', 'committer_name': 'Parth Bansal', 'committer_email': None, 'commit_date': datetime.datetime(2021, 4, 2, 6, 9, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '71ac6362ee1408a4bf2c69b9009a71d86280ca28', 'committer_username': 'parthb83', 'committer_name': 'Parth Bansal', 'committer_email': None, 'commit_date': datetime.datetime(2021, 4, 2, 6, 9, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '47da9db6fd20b38eb6f02c70c7602cd2e26179fe', 'committer_username': 'parthb83', 'committer_name': 'Parth Bansal', 'committer_email': None, 'commit_date': datetime.datetime(2021, 4, 2, 6, 9, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'eb26f82fec19b0d76a4469996e6e078d9c60bf9c', 'committer_username': 'parthb83', 'committer_name': 'Parth Bansal', 'committer_email': None, 'commit_date': datetime.datetime(2021, 4, 2, 6, 9, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a29ad934a599d7acab26f2c607f287c0879e28a4', 'committer_username': 'parthb83', 'committer_name': 'Parth Bansal', 'committer_email': None, 'commit_date': datetime.datetime(2021, 4, 2, 6, 9, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd60ae6c279e068c54f9485c6e9c1e9f320c7309e', 'committer_username': 'parthb83', 'committer_name': 'Parth Bansal', 'committer_email': None, 'commit_date': datetime.datetime(2021, 4, 2, 6, 9, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e2b773882da7911aaad072f2d061687cfa93548d', 'committer_username': 'parthb83', 'committer_name': 'Parth Bansal', 'committer_email': None, 'commit_date': datetime.datetime(2021, 4, 2, 6, 9, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '498364545e6b683b23c40602486d54c8847af4b1', 'committer_username': 'parthb83', 'committer_name': 'Parth Bansal', 'committer_email': None, 'commit_date': datetime.datetime(2021, 4, 2, 6, 9, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '68dfee2e7805f538081f19c3bfa1aa99816dd388', 'committer_username': 'parthb83', 'committer_name': 'Parth Bansal', 'committer_email': None, 'commit_date': datetime.datetime(2021, 4, 2, 6, 9, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e4ab2c855191cf5091b12f43186f7642c865ceac', 'committer_username': 'parthb83', 'committer_name': 'Parth Bansal', 'committer_email': None, 'commit_date': datetime.datetime(2021, 4, 2, 6, 9, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '600e9f6f49a63d83797ba201f0071e0543cc477a', 'committer_username': 'parthb83', 'committer_name': 'Parth Bansal', 'committer_email': None, 'commit_date': datetime.datetime(2021, 4, 2, 6, 9, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bb38f1f9e56c96f39f6072bc341ac326fc004619', 'committer_username': 'parthb83', 'committer_name': 'Parth Bansal', 'committer_email': None, 'commit_date': datetime.datetime(2021, 4, 2, 6, 9, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dcfa309021cb5f17f363ebe421c1739c05132e48', 'committer_username': 'parthb83', 'committer_name': 'Parth Bansal', 'committer_email': None, 'commit_date': datetime.datetime(2021, 4, 2, 6, 9, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '89e0f97882113e369c7b1923322386326af537a6', 'committer_username': 'SteveDiamond', 'committer_name': 'Steven Diamond', 'committer_email': 'diamond.po.central@gmail.com', 'commit_date': datetime.datetime(2010, 12, 13, 6, 40, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dbc238d187a0c4e4befad2ec5b1545e9417bd39a', 'committer_username': 'SteveDiamond', 'committer_name': 'Steven Diamond', 'committer_email': 'diamond.po.central@gmail.com', 'commit_date': datetime.datetime(2010, 12, 13, 6, 40, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8279fdcfc6ae1c4c4f19aef08da8b59327f0da06', 'committer_username': 'SteveDiamond', 'committer_name': 'Steven Diamond', 'committer_email': 'diamond.po.central@gmail.com', 'commit_date': datetime.datetime(2010, 12, 13, 6, 40, 15, tzinfo=datetime.timezone.utc)}]",Parth Bansal,81796068,,User,,14,,2,12
872313460,"Updated cumsum test, added cummax test, fix cummmax","## Description
Changed the `test_cumsum_axis()`, added a new unit test for `test_cummax_axis()` and updated the `cummax_canon` for axis bug.
Issue link : #1678 

## Type of change
- [ ] New feature (backwards compatible)
- [ ] New feature (breaking API changes)
- [x] Bug fix
- [ ] Other (Documentation, CI, ...)

## [Contribution checklist](https://www.cvxpy.org/contributing/index.html#contribution-checklist)
- [ ] Add our license to new files.
- [x] Check that your code adheres to our coding style.
- [x] Write unittests.
- [x] Run the unittests and check that they’re passing.
- [x] Run the benchmarks to make sure your change doesn’t introduce a regression.",True,1683,https://api.github.com/repos/cvxpy/cvxpy/pulls/1683,https://github.com/cvxpy/cvxpy/pull/1683,closed,40,10,3,1,1,0,0,0,[],2022-03-05 18:30:46+00:00,2022-03-05 19:01:38+00:00,1852.0,0:30:52,[],"[{'commit_sha': '52cbe69f3b7b295045b364a67ffd157a36affc3a', 'committer_username': 'parthb83', 'committer_name': 'Parth Bansal', 'committer_email': None, 'commit_date': datetime.datetime(2021, 4, 2, 6, 9, 56, tzinfo=datetime.timezone.utc)}]",Parth Bansal,81796068,,User,,14,,2,12
930536620,Add condition_number as a quasi-convex atom,"## Description
Added a new atom function `condition_number()` as a quasi-convex atom to compute the condition number.
Added the atom file, canonicalization file and written unittests for the same.
`condition_number(A) = lambda_max(A) / lambda_min(A)`

Issue link (if applicable): #858 

## Type of change
- [x] New feature (backwards compatible)
- [ ] New feature (breaking API changes)
- [ ] Bug fix
- [ ] Other (Documentation, CI, ...)

## [Contribution checklist](https://www.cvxpy.org/contributing/index.html#contribution-checklist)
- [x] Add our license to new files.
- [x] Check that your code adheres to our coding style.
- [x] Write unittests.
- [x] Run the unittests and check that they’re passing.
- [ ] Run the benchmarks to make sure your change doesn’t introduce a regression.",True,1768,https://api.github.com/repos/cvxpy/cvxpy/pulls/1768,https://github.com/cvxpy/cvxpy/pull/1768,closed,149,1,6,10,18,18,0,0,[],2022-05-08 19:08:41+00:00,2022-07-01 21:19:21+00:00,4673440.0,"54 days, 2:10:40","[{'comment_id': 867532273, 'comment_body': 'Should be False', 'comment_created': datetime.datetime(2022, 5, 8, 19, 26, 32, tzinfo=datetime.timezone.utc), 'commenter': 'SteveDiamond', 'type': 'User'}, {'comment_id': 867532389, 'comment_body': ""This reduction is in the wrong place. It's a dqcp2dcp reduction."", 'comment_created': datetime.datetime(2022, 5, 8, 19, 27, 21, tzinfo=datetime.timezone.utc), 'commenter': 'SteveDiamond', 'type': 'User'}, {'comment_id': 867533028, 'comment_body': 'But the dqcp2dcp folder has no subfolder for atom_canonicalization. Should we make a new folder for this or just add the canon file in the dqcp2dcp folder?', 'comment_created': datetime.datetime(2022, 5, 8, 19, 33, 51, tzinfo=datetime.timezone.utc), 'commenter': 'parthb83', 'type': 'User'}, {'comment_id': 867534021, 'comment_body': ""Hmm you're right, dqcp2dcp pulls from dcp atom_canonicalization. That's very strange. @akshayka is their a reason for not having a separate dqcp2dcp atom_canonicalization folder?"", 'comment_created': datetime.datetime(2022, 5, 8, 19, 42, 32, tzinfo=datetime.timezone.utc), 'commenter': 'SteveDiamond', 'type': 'User'}, {'comment_id': 875305191, 'comment_body': 'con_num -> condition_number', 'comment_created': datetime.datetime(2022, 5, 17, 22, 21, 18, tzinfo=datetime.timezone.utc), 'commenter': 'SteveDiamond', 'type': 'User'}, {'comment_id': 875305450, 'comment_body': 'I believe this is positive so should return (True, False)', 'comment_created': datetime.datetime(2022, 5, 17, 22, 21, 53, tzinfo=datetime.timezone.utc), 'commenter': 'SteveDiamond', 'type': 'User'}, {'comment_id': 875305679, 'comment_body': 'A >> 0 -> PSD(A)', 'comment_created': datetime.datetime(2022, 5, 17, 22, 22, 22, tzinfo=datetime.timezone.utc), 'commenter': 'SteveDiamond', 'type': 'User'}, {'comment_id': 875306284, 'comment_body': ""can we test something about the output? Ideally we would know the optimal value and check that the variable attains it. Right now you aren't testing the correctness of the canonicalization."", 'comment_created': datetime.datetime(2022, 5, 17, 22, 23, 35, tzinfo=datetime.timezone.utc), 'commenter': 'SteveDiamond', 'type': 'User'}, {'comment_id': 875468022, 'comment_body': ""@parthb83 in general it's good to do some digging into an atom to figure out the appropriate properties. For example, you can learn about condition numbers here: https://en.wikipedia.org/wiki/Condition_number#Matrices."", 'comment_created': datetime.datetime(2022, 5, 18, 4, 58, 55, tzinfo=datetime.timezone.utc), 'commenter': 'rileyjmurray', 'type': 'User'}, {'comment_id': 875557037, 'comment_body': ""Also, shouldn't we be using f-strings rather than the old %-formatting?"", 'comment_created': datetime.datetime(2022, 5, 18, 7, 27, 25, tzinfo=datetime.timezone.utc), 'commenter': 'keithbriggs', 'type': 'User'}, {'comment_id': 876018778, 'comment_body': ""So I tested this for the output and the output isn't accurate enough. For the above constraints, the output was\r\n```\r\n[[2.00004109, 0.97275377]\r\n [0.97275377, 2.99999668]]\r\n```\r\nwhich is close to the actual output but not accurate enough. Do you have any idea how can we increase the accuarcy of canonicalization?"", 'comment_created': datetime.datetime(2022, 5, 18, 15, 7, 33, tzinfo=datetime.timezone.utc), 'commenter': 'parthb83', 'type': 'User'}, {'comment_id': 876192682, 'comment_body': 'You can increase the accuracy by setting solver options (https://www.cvxpy.org/tutorial/advanced/index.html#setting-solver-options). But it would be better to just reduce the accuracy of the assert. Search the codebase for ``assertItemsAlmostEqual`` and use the ``places`` argument to control accuracy.', 'comment_created': datetime.datetime(2022, 5, 18, 18, 2, 56, tzinfo=datetime.timezone.utc), 'commenter': 'SteveDiamond', 'type': 'User'}, {'comment_id': 876195004, 'comment_body': 'But is the following accuracy acceptable for the canonicalization?', 'comment_created': datetime.datetime(2022, 5, 18, 18, 5, 44, tzinfo=datetime.timezone.utc), 'commenter': 'parthb83', 'type': 'User'}, {'comment_id': 876218934, 'comment_body': ""I see what you mean, the accuracy is pretty bad. Try solving it with ``prob.solve(solver=cp.SCS, qcp=True, eps=1e-8, max_iters=20_000)``. If that doesn't improve things it's ok. We can still merge the PR and investigate it more on our side."", 'comment_created': datetime.datetime(2022, 5, 18, 18, 27, 5, tzinfo=datetime.timezone.utc), 'commenter': 'SteveDiamond', 'type': 'User'}, {'comment_id': 876299284, 'comment_body': ""> I see what you mean, the accuracy is pretty bad. Try solving it with `prob.solve(solver=cp.SCS, qcp=True, eps=1e-8, max_iters=20_000)`. If that doesn't improve things it's ok. We can still merge the PR and investigate it more on our side.\r\n\r\nThis didn't change the answer much so I'm checking the answer in `test_dqcp.py` for just 1 place."", 'comment_created': datetime.datetime(2022, 5, 18, 19, 43, 26, tzinfo=datetime.timezone.utc), 'commenter': 'parthb83', 'type': 'User'}, {'comment_id': 893017275, 'comment_body': 'State that ``A`` needs to be PSD.', 'comment_created': datetime.datetime(2022, 6, 9, 2, 34, 34, tzinfo=datetime.timezone.utc), 'commenter': 'rileyjmurray', 'type': 'User'}, {'comment_id': 893018618, 'comment_body': '``A == A.T`` is an inefficient way to enforce symmetry. You only need ``n(n-1)/2`` of these ``n**2`` constraints. We should also check if ``A`` is declared as symmetric before bothering to enforce symmetry here.', 'comment_created': datetime.datetime(2022, 6, 9, 2, 38, 23, tzinfo=datetime.timezone.utc), 'commenter': 'rileyjmurray', 'type': 'User'}, {'comment_id': 893019223, 'comment_body': 'Let me check with another solver.', 'comment_created': datetime.datetime(2022, 6, 9, 2, 39, 58, tzinfo=datetime.timezone.utc), 'commenter': 'rileyjmurray', 'type': 'User'}]","[{'commit_sha': '817802c52ecdd8f8be3493ef0908eb5167e31475', 'committer_username': 'parthb83', 'committer_name': 'Parth Bansal', 'committer_email': None, 'commit_date': datetime.datetime(2021, 4, 2, 6, 9, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '82e6ac8455416870a75fee0bea2b3e2dcc5e7eb1', 'committer_username': 'parthb83', 'committer_name': 'Parth Bansal', 'committer_email': None, 'commit_date': datetime.datetime(2021, 4, 2, 6, 9, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd8aa419673ee0fb1394f3466bd6a9869937e4a46', 'committer_username': 'parthb83', 'committer_name': 'Parth Bansal', 'committer_email': None, 'commit_date': datetime.datetime(2021, 4, 2, 6, 9, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b0ac26fd9c035eeeb674587bc421ac6570ed5b0d', 'committer_username': 'parthb83', 'committer_name': 'Parth Bansal', 'committer_email': None, 'commit_date': datetime.datetime(2021, 4, 2, 6, 9, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0c7678e08e79c4e26b4fa08fd735d742507c3fd0', 'committer_username': 'parthb83', 'committer_name': 'Parth Bansal', 'committer_email': None, 'commit_date': datetime.datetime(2021, 4, 2, 6, 9, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aeaadc74e1c2f57fd18b45158e535c866b4b04d6', 'committer_username': 'parthb83', 'committer_name': 'Parth Bansal', 'committer_email': None, 'commit_date': datetime.datetime(2021, 4, 2, 6, 9, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd01b511f0d58e049f3876f6ffd98efd4f54c9183', 'committer_username': 'parthb83', 'committer_name': 'Parth Bansal', 'committer_email': None, 'commit_date': datetime.datetime(2021, 4, 2, 6, 9, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '15f9c600580432d92b2d2862b38b34ee1fab1e4f', 'committer_username': 'parthb83', 'committer_name': 'Parth Bansal', 'committer_email': None, 'commit_date': datetime.datetime(2021, 4, 2, 6, 9, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '883cafb8009a36ee7866fdeb36423b23489b96c0', 'committer_username': 'parthb83', 'committer_name': 'Parth Bansal', 'committer_email': None, 'commit_date': datetime.datetime(2021, 4, 2, 6, 9, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1554672edfe6499be6ebe33fb1a5ec24d2c5e557', 'committer_username': 'SteveDiamond', 'committer_name': 'Steven Diamond', 'committer_email': 'diamond.po.central@gmail.com', 'commit_date': datetime.datetime(2010, 12, 13, 6, 40, 15, tzinfo=datetime.timezone.utc)}]",Parth Bansal,81796068,,User,,14,,2,12
958282293,First working draft of Airspeed Velocity,This PR consists of the working draft for benchmarking the CVXPY repo using the `Airspeed Velocity(asv)` tool.,True,4,https://api.github.com/repos/cvxpy/benchmarks/pulls/4,https://github.com/cvxpy/benchmarks/pull/4,closed,182,582,16,12,0,0,0,0,[],2022-06-04 19:34:14+00:00,2022-06-05 20:23:37+00:00,89363.0,"1 day, 0:49:23",[],"[{'commit_sha': '526b1c3009fd57474d953eb7fb182f8949ed68a6', 'committer_username': 'parthb83', 'committer_name': 'Parth Bansal', 'committer_email': None, 'commit_date': datetime.datetime(2021, 4, 2, 6, 9, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ea7bb99ecd35f81f2ad0bb4b904d3b66eaf5e9c1', 'committer_username': 'parthb83', 'committer_name': 'Parth Bansal', 'committer_email': None, 'commit_date': datetime.datetime(2021, 4, 2, 6, 9, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8412f1f0805000ec4a34b8c642a148e1fda908ab', 'committer_username': 'parthb83', 'committer_name': 'Parth Bansal', 'committer_email': None, 'commit_date': datetime.datetime(2021, 4, 2, 6, 9, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '37e9913c29c669971c1a7008e32c8816fbbc9ac6', 'committer_username': 'parthb83', 'committer_name': 'Parth Bansal', 'committer_email': None, 'commit_date': datetime.datetime(2021, 4, 2, 6, 9, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f13e86121a12f865198f6dc9285241813ca38c04', 'committer_username': 'parthb83', 'committer_name': 'Parth Bansal', 'committer_email': None, 'commit_date': datetime.datetime(2021, 4, 2, 6, 9, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2e24a14f25fd01ba20a317bdcdc87a88fa19dd77', 'committer_username': 'phschiele', 'committer_name': 'Philipp Schiele', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 22, 8, 30, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '610a13927c4abc388c1fbbf224493afcb34dabd2', 'committer_username': 'phschiele', 'committer_name': 'Philipp Schiele', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 22, 8, 30, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1ad26e30071f3dd28af283d2b418a6f1c7d22351', 'committer_username': 'phschiele', 'committer_name': 'Philipp Schiele', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 22, 8, 30, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ff927491f8398ab6084a19a83f4448a5bbd264c5', 'committer_username': 'phschiele', 'committer_name': 'Philipp Schiele', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 22, 8, 30, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'daabe6b918bf51aa59f7424fa2d0ed5ddca47086', 'committer_username': 'phschiele', 'committer_name': 'Philipp Schiele', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 22, 8, 30, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '854877afe8f91be5dae8c3645dec72a847e5cb7a', 'committer_username': 'phschiele', 'committer_name': 'Philipp Schiele', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 22, 8, 30, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd3b97500670b7b8a4789933214692f427fb3df15', 'committer_username': 'parthb83', 'committer_name': 'Parth Bansal', 'committer_email': None, 'commit_date': datetime.datetime(2021, 4, 2, 6, 9, 56, tzinfo=datetime.timezone.utc)}]",Parth Bansal,81796068,,User,,14,,2,12
964399761,Added benchmarks workflow to benchmark the master branch of cvxpy and upload results,"## Description
Added a `benchmarks.yml` file in `.github/workflows` to trigger benchmarks on master branch of cvxpy whenever a PR?commit is made. The workflow works as follows:

- Checkout the `main` branch of `cvxpy/benchmarks` and install dependencies.
- Checkout the `gh-pages` branch of `cvxpy/benchmarks` and clone the `results` and `docs` folder inside the workflow.
- Benchmarks are run on the latest commit on `master` branch in cvxpy.
- Upload the `results` and `docs` folder created back to `gh-pages` branch of `cvxpy/benchmarks` to store the results and deploy the docs folder to see results in an interactive website.

## Things to do
Create a **Personal Access Token(PAT)** with minimum rights so that it is sufficient to push the changes back to `gh-pages` branch on `cvxpy/benchmarks`. Store the token in secrets as `BENCHMARK_DEPLOY_TOKEN`.


## Type of change
- [] New feature (backwards compatible)
- [ ] New feature (breaking API changes)
- [ ] Bug fix
- [x] Other (Documentation, CI, ...)

## [Contribution checklist](https://www.cvxpy.org/contributing/index.html#contribution-checklist)
- [ ] Add our license to new files.
- [x] Check that your code adheres to our coding style.
- [ ] Write unittests.
- [ ] Run the unittests and check that they’re passing.
- [x] Run the benchmarks to make sure your change doesn’t introduce a regression.",True,1798,https://api.github.com/repos/cvxpy/cvxpy/pulls/1798,https://github.com/cvxpy/cvxpy/pull/1798,closed,59,0,1,76,2,4,0,0,[],2022-06-10 17:50:40+00:00,2022-07-08 20:44:00+00:00,2429600.0,"28 days, 2:53:20","[{'comment_id': 895245013, 'comment_body': '```suggestion\r\n    push:\r\n        branches:\r\n            - master\r\n```', 'comment_created': datetime.datetime(2022, 6, 12, 23, 3, 5, tzinfo=datetime.timezone.utc), 'commenter': 'phschiele', 'type': 'User'}, {'comment_id': 895247655, 'comment_body': ""It would be better to use a deploy key over a personal access token, as the former can have permissions for only the benchmark repository. \r\nIf a PAT got leaked, all repos (public and private) of the person that generated the token would be exposed. The blast radius of the deploy keys would be very small.\r\nI'll look into how this can be done and post an update here."", 'comment_created': datetime.datetime(2022, 6, 12, 23, 28, 47, tzinfo=datetime.timezone.utc), 'commenter': 'phschiele', 'type': 'User'}, {'comment_id': 895248573, 'comment_body': 'We should run the current commit and also the previous to get a comparison on the same machine (GH action uses different servers so there would be a lot of noise in the timeline otherwise.', 'comment_created': datetime.datetime(2022, 6, 12, 23, 37, 31, tzinfo=datetime.timezone.utc), 'commenter': 'phschiele', 'type': 'User'}, {'comment_id': 895387877, 'comment_body': 'I was thinking that maybe we could use `asv machine --machine <Machine_Name>` to give a common name to all the machines across the different workflows.', 'comment_created': datetime.datetime(2022, 6, 13, 7, 3, 47, tzinfo=datetime.timezone.utc), 'commenter': 'parthb83', 'type': 'User'}]","[{'commit_sha': 'f5c19942fb1cd000e93f80de3e2f77029ae8dbe7', 'committer_username': 'parthb83', 'committer_name': 'Parth Bansal', 'committer_email': None, 'commit_date': datetime.datetime(2021, 4, 2, 6, 9, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3470c46867c385113cec3a4494226c04e20e8393', 'committer_username': 'parthb83', 'committer_name': 'Parth Bansal', 'committer_email': None, 'commit_date': datetime.datetime(2021, 4, 2, 6, 9, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd1c35a97bc93b04386612a1c1568f8442ef69840', 'committer_username': 'parthb83', 'committer_name': 'Parth Bansal', 'committer_email': None, 'commit_date': datetime.datetime(2021, 4, 2, 6, 9, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f32e5e74add92d3c1628f4fab352e9638479e126', 'committer_username': 'parthb83', 'committer_name': 'Parth Bansal', 'committer_email': None, 'commit_date': datetime.datetime(2021, 4, 2, 6, 9, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6333ef175f0642858f3e0c15a671af24d2aaa7c8', 'committer_username': 'parthb83', 'committer_name': 'Parth Bansal', 'committer_email': None, 'commit_date': datetime.datetime(2021, 4, 2, 6, 9, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '09e640addaccbf084b25b21ea370a538548c9819', 'committer_username': 'parthb83', 'committer_name': 'Parth Bansal', 'committer_email': None, 'commit_date': datetime.datetime(2021, 4, 2, 6, 9, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4db77bcc25fc368bd2ee32b55124684ba8cc0b7e', 'committer_username': 'parthb83', 'committer_name': 'Parth Bansal', 'committer_email': None, 'commit_date': datetime.datetime(2021, 4, 2, 6, 9, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4434b9d78330ba41add5e255b545b46fd06c5dd4', 'committer_username': 'parthb83', 'committer_name': 'Parth Bansal', 'committer_email': None, 'commit_date': datetime.datetime(2021, 4, 2, 6, 9, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f6ccb362255dd8dde269aa431e4ccf75adc3b83f', 'committer_username': 'parthb83', 'committer_name': 'Parth Bansal', 'committer_email': None, 'commit_date': datetime.datetime(2021, 4, 2, 6, 9, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '980944017b2e4e1e21e0b9fec5de4234ec3ae9f1', 'committer_username': 'parthb83', 'committer_name': 'Parth Bansal', 'committer_email': None, 'commit_date': datetime.datetime(2021, 4, 2, 6, 9, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '99affc72e58b7657815260ae3780f74d4069d742', 'committer_username': 'parthb83', 'committer_name': 'Parth Bansal', 'committer_email': None, 'commit_date': datetime.datetime(2021, 4, 2, 6, 9, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '95b79f4e16de504f6a7138f293c514a4a40117a8', 'committer_username': 'parthb83', 'committer_name': 'Parth Bansal', 'committer_email': None, 'commit_date': datetime.datetime(2021, 4, 2, 6, 9, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7365d487bf49860f92017cd3431f4ffcfe9dbc29', 'committer_username': 'parthb83', 'committer_name': 'Parth Bansal', 'committer_email': None, 'commit_date': datetime.datetime(2021, 4, 2, 6, 9, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dea2faca96be3ae08d468c08fbbe1296db6c85e1', 'committer_username': 'parthb83', 'committer_name': 'Parth Bansal', 'committer_email': None, 'commit_date': datetime.datetime(2021, 4, 2, 6, 9, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6dccb7eb534a9b25257d86aa694c041fb45d9363', 'committer_username': 'parthb83', 'committer_name': 'Parth Bansal', 'committer_email': None, 'commit_date': datetime.datetime(2021, 4, 2, 6, 9, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '229b18431941a749a0cc61fdf9cda9134605fd9e', 'committer_username': 'parthb83', 'committer_name': 'Parth Bansal', 'committer_email': None, 'commit_date': datetime.datetime(2021, 4, 2, 6, 9, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '609497340351d3f4278894941678433688822ab5', 'committer_username': 'parthb83', 'committer_name': 'Parth Bansal', 'committer_email': None, 'commit_date': datetime.datetime(2021, 4, 2, 6, 9, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f2bc51c1d126b4c3446c75e2716b34378d4f23f6', 'committer_username': 'parthb83', 'committer_name': 'Parth Bansal', 'committer_email': None, 'commit_date': datetime.datetime(2021, 4, 2, 6, 9, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1abf41d3d8ca7542982b52bcb9fe7491db17b587', 'committer_username': 'parthb83', 'committer_name': 'Parth Bansal', 'committer_email': None, 'commit_date': datetime.datetime(2021, 4, 2, 6, 9, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fd2873902361096e9ee589b9d8fdf4bad8a4a6ed', 'committer_username': 'parthb83', 'committer_name': 'Parth Bansal', 'committer_email': None, 'commit_date': datetime.datetime(2021, 4, 2, 6, 9, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bc7256fd8a607d0e41858775882fbceea650a718', 'committer_username': 'parthb83', 'committer_name': 'Parth Bansal', 'committer_email': None, 'commit_date': datetime.datetime(2021, 4, 2, 6, 9, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '615a53a291c91cd1a829681b7d1f2d33cea0ed3e', 'committer_username': 'parthb83', 'committer_name': 'Parth Bansal', 'committer_email': None, 'commit_date': datetime.datetime(2021, 4, 2, 6, 9, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1c3e650b62651cbd07b73df1795b3b7b6f97441b', 'committer_username': 'parthb83', 'committer_name': 'Parth Bansal', 'committer_email': None, 'commit_date': datetime.datetime(2021, 4, 2, 6, 9, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8da6302df270409d3038da8b026ab880e51b5e8c', 'committer_username': 'parthb83', 'committer_name': 'Parth Bansal', 'committer_email': None, 'commit_date': datetime.datetime(2021, 4, 2, 6, 9, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '32dcebe99f5a199ce869004e1db1dbe8fee7bf9f', 'committer_username': 'parthb83', 'committer_name': 'Parth Bansal', 'committer_email': None, 'commit_date': datetime.datetime(2021, 4, 2, 6, 9, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '829399bad40ada47e25132bce69df6a1cc730621', 'committer_username': 'parthb83', 'committer_name': 'Parth Bansal', 'committer_email': None, 'commit_date': datetime.datetime(2021, 4, 2, 6, 9, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e1025ed2a6803ea40927246acaf09936963a1bb5', 'committer_username': 'parthb83', 'committer_name': 'Parth Bansal', 'committer_email': None, 'commit_date': datetime.datetime(2021, 4, 2, 6, 9, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '97ab856ff0679c7b81e3294152a3c6f2b9fc01ee', 'committer_username': 'parthb83', 'committer_name': 'Parth Bansal', 'committer_email': None, 'commit_date': datetime.datetime(2021, 4, 2, 6, 9, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6d45918713b6e6afa23ced26252f7cb5bb256532', 'committer_username': 'parthb83', 'committer_name': 'Parth Bansal', 'committer_email': None, 'commit_date': datetime.datetime(2021, 4, 2, 6, 9, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1206d1de13eec21d9d3a845f21bc049e7f03b4a0', 'committer_username': 'parthb83', 'committer_name': 'Parth Bansal', 'committer_email': None, 'commit_date': datetime.datetime(2021, 4, 2, 6, 9, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fc6ae1b6daa18c0d7a319fe1b4e35d80fd37c561', 'committer_username': 'parthb83', 'committer_name': 'Parth Bansal', 'committer_email': None, 'commit_date': datetime.datetime(2021, 4, 2, 6, 9, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bebde677ca0fa11ef24f0c9adab4542936cc800b', 'committer_username': 'parthb83', 'committer_name': 'Parth Bansal', 'committer_email': None, 'commit_date': datetime.datetime(2021, 4, 2, 6, 9, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dfb5316ba673271975768d3fa9c009f0538e25f5', 'committer_username': 'parthb83', 'committer_name': 'Parth Bansal', 'committer_email': None, 'commit_date': datetime.datetime(2021, 4, 2, 6, 9, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '95aa1f72fb2fa82c3ce625eaf4d84270c0f91cd6', 'committer_username': 'parthb83', 'committer_name': 'Parth Bansal', 'committer_email': None, 'commit_date': datetime.datetime(2021, 4, 2, 6, 9, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '79ea524d1548e38ae92a835ca394e8c4dff029b0', 'committer_username': 'parthb83', 'committer_name': 'Parth Bansal', 'committer_email': None, 'commit_date': datetime.datetime(2021, 4, 2, 6, 9, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5f4608169fc823a53b46d5ec70da25c1e20f096c', 'committer_username': 'parthb83', 'committer_name': 'Parth Bansal', 'committer_email': None, 'commit_date': datetime.datetime(2021, 4, 2, 6, 9, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '12bc1db0db22683419beb3e3ea83a7f93630ae9c', 'committer_username': 'parthb83', 'committer_name': 'Parth Bansal', 'committer_email': None, 'commit_date': datetime.datetime(2021, 4, 2, 6, 9, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ffcefe4e290d20208bbeba19d67812d907de6248', 'committer_username': 'parthb83', 'committer_name': 'Parth Bansal', 'committer_email': None, 'commit_date': datetime.datetime(2021, 4, 2, 6, 9, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '884a4eecd7a254991c12157660b7e216ae4fd745', 'committer_username': 'parthb83', 'committer_name': 'Parth Bansal', 'committer_email': None, 'commit_date': datetime.datetime(2021, 4, 2, 6, 9, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '70bf90c6b290cffc8333bf0e532735c99ca60a87', 'committer_username': 'parthb83', 'committer_name': 'Parth Bansal', 'committer_email': None, 'commit_date': datetime.datetime(2021, 4, 2, 6, 9, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '12ee1ae3e23072b6107bdb6266b873c520fd2d13', 'committer_username': 'parthb83', 'committer_name': 'Parth Bansal', 'committer_email': None, 'commit_date': datetime.datetime(2021, 4, 2, 6, 9, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c3077b00b2dd4e1009dfa2bbbef884c0a1399b43', 'committer_username': 'parthb83', 'committer_name': 'Parth Bansal', 'committer_email': None, 'commit_date': datetime.datetime(2021, 4, 2, 6, 9, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3f4e955ab91b6158f6e9c1919b08d8ddea12d731', 'committer_username': 'parthb83', 'committer_name': 'Parth Bansal', 'committer_email': None, 'commit_date': datetime.datetime(2021, 4, 2, 6, 9, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e9194b2ca44dbcd520ae64a8924aedf081dc8077', 'committer_username': 'parthb83', 'committer_name': 'Parth Bansal', 'committer_email': None, 'commit_date': datetime.datetime(2021, 4, 2, 6, 9, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd52a63135596c82f93f25fbfeac64500875771ca', 'committer_username': 'parthb83', 'committer_name': 'Parth Bansal', 'committer_email': None, 'commit_date': datetime.datetime(2021, 4, 2, 6, 9, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2de4c4ab5ea5872569321bd30983152f82d12026', 'committer_username': 'parthb83', 'committer_name': 'Parth Bansal', 'committer_email': None, 'commit_date': datetime.datetime(2021, 4, 2, 6, 9, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '61c7178d394bfd55362b0bd726a31192de2bc6e3', 'committer_username': 'parthb83', 'committer_name': 'Parth Bansal', 'committer_email': None, 'commit_date': datetime.datetime(2021, 4, 2, 6, 9, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '87c58cae185e30344ada923f41b0ae5bd848c8c7', 'committer_username': 'parthb83', 'committer_name': 'Parth Bansal', 'committer_email': None, 'commit_date': datetime.datetime(2021, 4, 2, 6, 9, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7175bb0f1d4732d6c234ef1d43a767c2f9f5d09a', 'committer_username': 'parthb83', 'committer_name': 'Parth Bansal', 'committer_email': None, 'commit_date': datetime.datetime(2021, 4, 2, 6, 9, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a6804d4fe6c2b0e9eb6b99eb040cac39f098cd8c', 'committer_username': 'parthb83', 'committer_name': 'Parth Bansal', 'committer_email': None, 'commit_date': datetime.datetime(2021, 4, 2, 6, 9, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd91db0bbb52dd50858092bc62cd4b236cbb97b74', 'committer_username': 'parthb83', 'committer_name': 'Parth Bansal', 'committer_email': None, 'commit_date': datetime.datetime(2021, 4, 2, 6, 9, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '79aa0611d42d000dc01be634a896a010b52526da', 'committer_username': 'parthb83', 'committer_name': 'Parth Bansal', 'committer_email': None, 'commit_date': datetime.datetime(2021, 4, 2, 6, 9, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd88e491a4d312dde0d1c411e7b4f64e818b2af82', 'committer_username': 'parthb83', 'committer_name': 'Parth Bansal', 'committer_email': None, 'commit_date': datetime.datetime(2021, 4, 2, 6, 9, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '93d0d88778858b70011aa808b7a09b72d43f3f16', 'committer_username': 'parthb83', 'committer_name': 'Parth Bansal', 'committer_email': None, 'commit_date': datetime.datetime(2021, 4, 2, 6, 9, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cb776487c18d853f5473e28743253b965796b42b', 'committer_username': 'parthb83', 'committer_name': 'Parth Bansal', 'committer_email': None, 'commit_date': datetime.datetime(2021, 4, 2, 6, 9, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '70539765fff8100917b911e889d968e7383da95c', 'committer_username': 'parthb83', 'committer_name': 'Parth Bansal', 'committer_email': None, 'commit_date': datetime.datetime(2021, 4, 2, 6, 9, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e9ba8d400378d465dbbfe0607b904dc386d64827', 'committer_username': 'parthb83', 'committer_name': 'Parth Bansal', 'committer_email': None, 'commit_date': datetime.datetime(2021, 4, 2, 6, 9, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bd668df00d7d6e97e22f888817e24c8afc37bb36', 'committer_username': 'parthb83', 'committer_name': 'Parth Bansal', 'committer_email': None, 'commit_date': datetime.datetime(2021, 4, 2, 6, 9, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dad2e29d12b0b5023e70a609e9100c4fb6887096', 'committer_username': 'parthb83', 'committer_name': 'Parth Bansal', 'committer_email': None, 'commit_date': datetime.datetime(2021, 4, 2, 6, 9, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bb3c8c1915a0b375f6b579b3dbd13952ffa36cd2', 'committer_username': 'parthb83', 'committer_name': 'Parth Bansal', 'committer_email': None, 'commit_date': datetime.datetime(2021, 4, 2, 6, 9, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f0e5010d3fd05ee7b63aeeb02b8b3f8630e3219e', 'committer_username': 'parthb83', 'committer_name': 'Parth Bansal', 'committer_email': None, 'commit_date': datetime.datetime(2021, 4, 2, 6, 9, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bbc44aa09d2bc38a708edb696286fd0fbcdf1b08', 'committer_username': 'parthb83', 'committer_name': 'Parth Bansal', 'committer_email': None, 'commit_date': datetime.datetime(2021, 4, 2, 6, 9, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2f5d7eb4d8c1696f13cea0babdac8d91466e022f', 'committer_username': 'parthb83', 'committer_name': 'Parth Bansal', 'committer_email': None, 'commit_date': datetime.datetime(2021, 4, 2, 6, 9, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a63888800c2fab8caf3cdc940c1b434addda9159', 'committer_username': 'parthb83', 'committer_name': 'Parth Bansal', 'committer_email': None, 'commit_date': datetime.datetime(2021, 4, 2, 6, 9, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a2f13a9a3ff4811f1db14bf40169349f72be7930', 'committer_username': 'parthb83', 'committer_name': 'Parth Bansal', 'committer_email': None, 'commit_date': datetime.datetime(2021, 4, 2, 6, 9, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a169609ec121054d521434a45568d1f50e046dff', 'committer_username': 'parthb83', 'committer_name': 'Parth Bansal', 'committer_email': None, 'commit_date': datetime.datetime(2021, 4, 2, 6, 9, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7f8421504446d62cd9aec5d04416faa456cc64bc', 'committer_username': 'parthb83', 'committer_name': 'Parth Bansal', 'committer_email': None, 'commit_date': datetime.datetime(2021, 4, 2, 6, 9, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a1903dd5c1eab8b8f636b1256ab595d945180124', 'committer_username': 'parthb83', 'committer_name': 'Parth Bansal', 'committer_email': None, 'commit_date': datetime.datetime(2021, 4, 2, 6, 9, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b96aef47f9aaefe3bac1cbdf5c23ccf28281ea53', 'committer_username': 'parthb83', 'committer_name': 'Parth Bansal', 'committer_email': None, 'commit_date': datetime.datetime(2021, 4, 2, 6, 9, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e93e18c6ca4bbacdbffba28a091f37a21de67759', 'committer_username': 'parthb83', 'committer_name': 'Parth Bansal', 'committer_email': None, 'commit_date': datetime.datetime(2021, 4, 2, 6, 9, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '175cb4722f358595f055ac17ad96b6fb87c598c5', 'committer_username': 'parthb83', 'committer_name': 'Parth Bansal', 'committer_email': None, 'commit_date': datetime.datetime(2021, 4, 2, 6, 9, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4fe37a4cbc7daa812161697b2dfd4f7d5e5c3455', 'committer_username': 'parthb83', 'committer_name': 'Parth Bansal', 'committer_email': None, 'commit_date': datetime.datetime(2021, 4, 2, 6, 9, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b01b28e526727f63e3722069b2adcfc1a605f086', 'committer_username': 'parthb83', 'committer_name': 'Parth Bansal', 'committer_email': None, 'commit_date': datetime.datetime(2021, 4, 2, 6, 9, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '60f927b1ffd951ccd143be05c0b2edc73922aa37', 'committer_username': 'parthb83', 'committer_name': 'Parth Bansal', 'committer_email': None, 'commit_date': datetime.datetime(2021, 4, 2, 6, 9, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '45404250240dafe160a1bfd4148f07774e3fc73b', 'committer_username': 'parthb83', 'committer_name': 'Parth Bansal', 'committer_email': None, 'commit_date': datetime.datetime(2021, 4, 2, 6, 9, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '11471166c0f5aef9edbffe35099d573255079e2d', 'committer_username': 'parthb83', 'committer_name': 'Parth Bansal', 'committer_email': None, 'commit_date': datetime.datetime(2021, 4, 2, 6, 9, 56, tzinfo=datetime.timezone.utc)}]",Parth Bansal,81796068,,User,,14,,2,12
980502034,New workflow to make benchmarks to run on PR commits,"## Description
Added a new file `pr_benchmarks.yml` to run benchmarks on pull request commits and then comment on the pull request with the results.

## Type of change
- [ ] New feature (backwards compatible)
- [ ] New feature (breaking API changes)
- [ ] Bug fix
- [x] Other (Documentation, CI, ...)

## [Contribution checklist](https://www.cvxpy.org/contributing/index.html#contribution-checklist)
- [ ] Add our license to new files.
- [ ] Check that your code adheres to our coding style.
- [ ] Write unittests.
- [ ] Run the unittests and check that they’re passing.
- [x] Run the benchmarks to make sure your change doesn’t introduce a regression.",True,1810,https://api.github.com/repos/cvxpy/cvxpy/pulls/1810,https://github.com/cvxpy/cvxpy/pull/1810,closed,129,0,2,68,1,3,0,0,[],2022-06-27 20:22:41+00:00,2022-07-03 17:45:16+00:00,508955.0,"5 days, 21:22:35","[{'comment_id': 912334195, 'comment_body': ""@parthb83 Didn't we want to use the marketplace action using this ID instead of this handmade script?"", 'comment_created': datetime.datetime(2022, 7, 2, 7, 44, 57, tzinfo=datetime.timezone.utc), 'commenter': 'phschiele', 'type': 'User'}, {'comment_id': 912334601, 'comment_body': 'Yes but the workflow failed as it couldn\'t define ""context"" in `context.workflow_run.payload.id`. Therefore, I used this script that was given in `workflow_run` documentation.', 'comment_created': datetime.datetime(2022, 7, 2, 7, 48, 54, tzinfo=datetime.timezone.utc), 'commenter': 'parthb83', 'type': 'User'}, {'comment_id': 912400749, 'comment_body': 'Resolved through [b96aef4](https://github.com/cvxpy/cvxpy/pull/1810/commits/b96aef47f9aaefe3bac1cbdf5c23ccf28281ea53)', 'comment_created': datetime.datetime(2022, 7, 2, 21, 8, 45, tzinfo=datetime.timezone.utc), 'commenter': 'phschiele', 'type': 'User'}]","[{'commit_sha': 'f5c19942fb1cd000e93f80de3e2f77029ae8dbe7', 'committer_username': 'parthb83', 'committer_name': 'Parth Bansal', 'committer_email': None, 'commit_date': datetime.datetime(2021, 4, 2, 6, 9, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3470c46867c385113cec3a4494226c04e20e8393', 'committer_username': 'parthb83', 'committer_name': 'Parth Bansal', 'committer_email': None, 'commit_date': datetime.datetime(2021, 4, 2, 6, 9, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd1c35a97bc93b04386612a1c1568f8442ef69840', 'committer_username': 'parthb83', 'committer_name': 'Parth Bansal', 'committer_email': None, 'commit_date': datetime.datetime(2021, 4, 2, 6, 9, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f32e5e74add92d3c1628f4fab352e9638479e126', 'committer_username': 'parthb83', 'committer_name': 'Parth Bansal', 'committer_email': None, 'commit_date': datetime.datetime(2021, 4, 2, 6, 9, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6333ef175f0642858f3e0c15a671af24d2aaa7c8', 'committer_username': 'parthb83', 'committer_name': 'Parth Bansal', 'committer_email': None, 'commit_date': datetime.datetime(2021, 4, 2, 6, 9, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '09e640addaccbf084b25b21ea370a538548c9819', 'committer_username': 'parthb83', 'committer_name': 'Parth Bansal', 'committer_email': None, 'commit_date': datetime.datetime(2021, 4, 2, 6, 9, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4db77bcc25fc368bd2ee32b55124684ba8cc0b7e', 'committer_username': 'parthb83', 'committer_name': 'Parth Bansal', 'committer_email': None, 'commit_date': datetime.datetime(2021, 4, 2, 6, 9, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4434b9d78330ba41add5e255b545b46fd06c5dd4', 'committer_username': 'parthb83', 'committer_name': 'Parth Bansal', 'committer_email': None, 'commit_date': datetime.datetime(2021, 4, 2, 6, 9, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f6ccb362255dd8dde269aa431e4ccf75adc3b83f', 'committer_username': 'parthb83', 'committer_name': 'Parth Bansal', 'committer_email': None, 'commit_date': datetime.datetime(2021, 4, 2, 6, 9, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '980944017b2e4e1e21e0b9fec5de4234ec3ae9f1', 'committer_username': 'parthb83', 'committer_name': 'Parth Bansal', 'committer_email': None, 'commit_date': datetime.datetime(2021, 4, 2, 6, 9, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '99affc72e58b7657815260ae3780f74d4069d742', 'committer_username': 'parthb83', 'committer_name': 'Parth Bansal', 'committer_email': None, 'commit_date': datetime.datetime(2021, 4, 2, 6, 9, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '95b79f4e16de504f6a7138f293c514a4a40117a8', 'committer_username': 'parthb83', 'committer_name': 'Parth Bansal', 'committer_email': None, 'commit_date': datetime.datetime(2021, 4, 2, 6, 9, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7365d487bf49860f92017cd3431f4ffcfe9dbc29', 'committer_username': 'parthb83', 'committer_name': 'Parth Bansal', 'committer_email': None, 'commit_date': datetime.datetime(2021, 4, 2, 6, 9, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dea2faca96be3ae08d468c08fbbe1296db6c85e1', 'committer_username': 'parthb83', 'committer_name': 'Parth Bansal', 'committer_email': None, 'commit_date': datetime.datetime(2021, 4, 2, 6, 9, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6dccb7eb534a9b25257d86aa694c041fb45d9363', 'committer_username': 'parthb83', 'committer_name': 'Parth Bansal', 'committer_email': None, 'commit_date': datetime.datetime(2021, 4, 2, 6, 9, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '229b18431941a749a0cc61fdf9cda9134605fd9e', 'committer_username': 'parthb83', 'committer_name': 'Parth Bansal', 'committer_email': None, 'commit_date': datetime.datetime(2021, 4, 2, 6, 9, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '609497340351d3f4278894941678433688822ab5', 'committer_username': 'parthb83', 'committer_name': 'Parth Bansal', 'committer_email': None, 'commit_date': datetime.datetime(2021, 4, 2, 6, 9, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f2bc51c1d126b4c3446c75e2716b34378d4f23f6', 'committer_username': 'parthb83', 'committer_name': 'Parth Bansal', 'committer_email': None, 'commit_date': datetime.datetime(2021, 4, 2, 6, 9, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1abf41d3d8ca7542982b52bcb9fe7491db17b587', 'committer_username': 'parthb83', 'committer_name': 'Parth Bansal', 'committer_email': None, 'commit_date': datetime.datetime(2021, 4, 2, 6, 9, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fd2873902361096e9ee589b9d8fdf4bad8a4a6ed', 'committer_username': 'parthb83', 'committer_name': 'Parth Bansal', 'committer_email': None, 'commit_date': datetime.datetime(2021, 4, 2, 6, 9, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bc7256fd8a607d0e41858775882fbceea650a718', 'committer_username': 'parthb83', 'committer_name': 'Parth Bansal', 'committer_email': None, 'commit_date': datetime.datetime(2021, 4, 2, 6, 9, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '615a53a291c91cd1a829681b7d1f2d33cea0ed3e', 'committer_username': 'parthb83', 'committer_name': 'Parth Bansal', 'committer_email': None, 'commit_date': datetime.datetime(2021, 4, 2, 6, 9, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1c3e650b62651cbd07b73df1795b3b7b6f97441b', 'committer_username': 'parthb83', 'committer_name': 'Parth Bansal', 'committer_email': None, 'commit_date': datetime.datetime(2021, 4, 2, 6, 9, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8da6302df270409d3038da8b026ab880e51b5e8c', 'committer_username': 'parthb83', 'committer_name': 'Parth Bansal', 'committer_email': None, 'commit_date': datetime.datetime(2021, 4, 2, 6, 9, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '32dcebe99f5a199ce869004e1db1dbe8fee7bf9f', 'committer_username': 'parthb83', 'committer_name': 'Parth Bansal', 'committer_email': None, 'commit_date': datetime.datetime(2021, 4, 2, 6, 9, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '829399bad40ada47e25132bce69df6a1cc730621', 'committer_username': 'parthb83', 'committer_name': 'Parth Bansal', 'committer_email': None, 'commit_date': datetime.datetime(2021, 4, 2, 6, 9, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e1025ed2a6803ea40927246acaf09936963a1bb5', 'committer_username': 'parthb83', 'committer_name': 'Parth Bansal', 'committer_email': None, 'commit_date': datetime.datetime(2021, 4, 2, 6, 9, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '97ab856ff0679c7b81e3294152a3c6f2b9fc01ee', 'committer_username': 'parthb83', 'committer_name': 'Parth Bansal', 'committer_email': None, 'commit_date': datetime.datetime(2021, 4, 2, 6, 9, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6d45918713b6e6afa23ced26252f7cb5bb256532', 'committer_username': 'parthb83', 'committer_name': 'Parth Bansal', 'committer_email': None, 'commit_date': datetime.datetime(2021, 4, 2, 6, 9, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1206d1de13eec21d9d3a845f21bc049e7f03b4a0', 'committer_username': 'parthb83', 'committer_name': 'Parth Bansal', 'committer_email': None, 'commit_date': datetime.datetime(2021, 4, 2, 6, 9, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fc6ae1b6daa18c0d7a319fe1b4e35d80fd37c561', 'committer_username': 'parthb83', 'committer_name': 'Parth Bansal', 'committer_email': None, 'commit_date': datetime.datetime(2021, 4, 2, 6, 9, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bebde677ca0fa11ef24f0c9adab4542936cc800b', 'committer_username': 'parthb83', 'committer_name': 'Parth Bansal', 'committer_email': None, 'commit_date': datetime.datetime(2021, 4, 2, 6, 9, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dfb5316ba673271975768d3fa9c009f0538e25f5', 'committer_username': 'parthb83', 'committer_name': 'Parth Bansal', 'committer_email': None, 'commit_date': datetime.datetime(2021, 4, 2, 6, 9, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '95aa1f72fb2fa82c3ce625eaf4d84270c0f91cd6', 'committer_username': 'parthb83', 'committer_name': 'Parth Bansal', 'committer_email': None, 'commit_date': datetime.datetime(2021, 4, 2, 6, 9, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '79ea524d1548e38ae92a835ca394e8c4dff029b0', 'committer_username': 'parthb83', 'committer_name': 'Parth Bansal', 'committer_email': None, 'commit_date': datetime.datetime(2021, 4, 2, 6, 9, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5f4608169fc823a53b46d5ec70da25c1e20f096c', 'committer_username': 'parthb83', 'committer_name': 'Parth Bansal', 'committer_email': None, 'commit_date': datetime.datetime(2021, 4, 2, 6, 9, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '12bc1db0db22683419beb3e3ea83a7f93630ae9c', 'committer_username': 'parthb83', 'committer_name': 'Parth Bansal', 'committer_email': None, 'commit_date': datetime.datetime(2021, 4, 2, 6, 9, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ffcefe4e290d20208bbeba19d67812d907de6248', 'committer_username': 'parthb83', 'committer_name': 'Parth Bansal', 'committer_email': None, 'commit_date': datetime.datetime(2021, 4, 2, 6, 9, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '884a4eecd7a254991c12157660b7e216ae4fd745', 'committer_username': 'parthb83', 'committer_name': 'Parth Bansal', 'committer_email': None, 'commit_date': datetime.datetime(2021, 4, 2, 6, 9, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '70bf90c6b290cffc8333bf0e532735c99ca60a87', 'committer_username': 'parthb83', 'committer_name': 'Parth Bansal', 'committer_email': None, 'commit_date': datetime.datetime(2021, 4, 2, 6, 9, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '12ee1ae3e23072b6107bdb6266b873c520fd2d13', 'committer_username': 'parthb83', 'committer_name': 'Parth Bansal', 'committer_email': None, 'commit_date': datetime.datetime(2021, 4, 2, 6, 9, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c3077b00b2dd4e1009dfa2bbbef884c0a1399b43', 'committer_username': 'parthb83', 'committer_name': 'Parth Bansal', 'committer_email': None, 'commit_date': datetime.datetime(2021, 4, 2, 6, 9, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3f4e955ab91b6158f6e9c1919b08d8ddea12d731', 'committer_username': 'parthb83', 'committer_name': 'Parth Bansal', 'committer_email': None, 'commit_date': datetime.datetime(2021, 4, 2, 6, 9, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e9194b2ca44dbcd520ae64a8924aedf081dc8077', 'committer_username': 'parthb83', 'committer_name': 'Parth Bansal', 'committer_email': None, 'commit_date': datetime.datetime(2021, 4, 2, 6, 9, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd52a63135596c82f93f25fbfeac64500875771ca', 'committer_username': 'parthb83', 'committer_name': 'Parth Bansal', 'committer_email': None, 'commit_date': datetime.datetime(2021, 4, 2, 6, 9, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2de4c4ab5ea5872569321bd30983152f82d12026', 'committer_username': 'parthb83', 'committer_name': 'Parth Bansal', 'committer_email': None, 'commit_date': datetime.datetime(2021, 4, 2, 6, 9, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '61c7178d394bfd55362b0bd726a31192de2bc6e3', 'committer_username': 'parthb83', 'committer_name': 'Parth Bansal', 'committer_email': None, 'commit_date': datetime.datetime(2021, 4, 2, 6, 9, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '87c58cae185e30344ada923f41b0ae5bd848c8c7', 'committer_username': 'parthb83', 'committer_name': 'Parth Bansal', 'committer_email': None, 'commit_date': datetime.datetime(2021, 4, 2, 6, 9, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7175bb0f1d4732d6c234ef1d43a767c2f9f5d09a', 'committer_username': 'parthb83', 'committer_name': 'Parth Bansal', 'committer_email': None, 'commit_date': datetime.datetime(2021, 4, 2, 6, 9, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a6804d4fe6c2b0e9eb6b99eb040cac39f098cd8c', 'committer_username': 'parthb83', 'committer_name': 'Parth Bansal', 'committer_email': None, 'commit_date': datetime.datetime(2021, 4, 2, 6, 9, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd91db0bbb52dd50858092bc62cd4b236cbb97b74', 'committer_username': 'parthb83', 'committer_name': 'Parth Bansal', 'committer_email': None, 'commit_date': datetime.datetime(2021, 4, 2, 6, 9, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '79aa0611d42d000dc01be634a896a010b52526da', 'committer_username': 'parthb83', 'committer_name': 'Parth Bansal', 'committer_email': None, 'commit_date': datetime.datetime(2021, 4, 2, 6, 9, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd88e491a4d312dde0d1c411e7b4f64e818b2af82', 'committer_username': 'parthb83', 'committer_name': 'Parth Bansal', 'committer_email': None, 'commit_date': datetime.datetime(2021, 4, 2, 6, 9, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '93d0d88778858b70011aa808b7a09b72d43f3f16', 'committer_username': 'parthb83', 'committer_name': 'Parth Bansal', 'committer_email': None, 'commit_date': datetime.datetime(2021, 4, 2, 6, 9, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cb776487c18d853f5473e28743253b965796b42b', 'committer_username': 'parthb83', 'committer_name': 'Parth Bansal', 'committer_email': None, 'commit_date': datetime.datetime(2021, 4, 2, 6, 9, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '70539765fff8100917b911e889d968e7383da95c', 'committer_username': 'parthb83', 'committer_name': 'Parth Bansal', 'committer_email': None, 'commit_date': datetime.datetime(2021, 4, 2, 6, 9, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e9ba8d400378d465dbbfe0607b904dc386d64827', 'committer_username': 'parthb83', 'committer_name': 'Parth Bansal', 'committer_email': None, 'commit_date': datetime.datetime(2021, 4, 2, 6, 9, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bd668df00d7d6e97e22f888817e24c8afc37bb36', 'committer_username': 'parthb83', 'committer_name': 'Parth Bansal', 'committer_email': None, 'commit_date': datetime.datetime(2021, 4, 2, 6, 9, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dad2e29d12b0b5023e70a609e9100c4fb6887096', 'committer_username': 'parthb83', 'committer_name': 'Parth Bansal', 'committer_email': None, 'commit_date': datetime.datetime(2021, 4, 2, 6, 9, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bb3c8c1915a0b375f6b579b3dbd13952ffa36cd2', 'committer_username': 'parthb83', 'committer_name': 'Parth Bansal', 'committer_email': None, 'commit_date': datetime.datetime(2021, 4, 2, 6, 9, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f0e5010d3fd05ee7b63aeeb02b8b3f8630e3219e', 'committer_username': 'parthb83', 'committer_name': 'Parth Bansal', 'committer_email': None, 'commit_date': datetime.datetime(2021, 4, 2, 6, 9, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bbc44aa09d2bc38a708edb696286fd0fbcdf1b08', 'committer_username': 'parthb83', 'committer_name': 'Parth Bansal', 'committer_email': None, 'commit_date': datetime.datetime(2021, 4, 2, 6, 9, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2f5d7eb4d8c1696f13cea0babdac8d91466e022f', 'committer_username': 'parthb83', 'committer_name': 'Parth Bansal', 'committer_email': None, 'commit_date': datetime.datetime(2021, 4, 2, 6, 9, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a63888800c2fab8caf3cdc940c1b434addda9159', 'committer_username': 'parthb83', 'committer_name': 'Parth Bansal', 'committer_email': None, 'commit_date': datetime.datetime(2021, 4, 2, 6, 9, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a2f13a9a3ff4811f1db14bf40169349f72be7930', 'committer_username': 'parthb83', 'committer_name': 'Parth Bansal', 'committer_email': None, 'commit_date': datetime.datetime(2021, 4, 2, 6, 9, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7f8421504446d62cd9aec5d04416faa456cc64bc', 'committer_username': 'parthb83', 'committer_name': 'Parth Bansal', 'committer_email': None, 'commit_date': datetime.datetime(2021, 4, 2, 6, 9, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b96aef47f9aaefe3bac1cbdf5c23ccf28281ea53', 'committer_username': 'parthb83', 'committer_name': 'Parth Bansal', 'committer_email': None, 'commit_date': datetime.datetime(2021, 4, 2, 6, 9, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e93e18c6ca4bbacdbffba28a091f37a21de67759', 'committer_username': 'parthb83', 'committer_name': 'Parth Bansal', 'committer_email': None, 'commit_date': datetime.datetime(2021, 4, 2, 6, 9, 56, tzinfo=datetime.timezone.utc)}]",Parth Bansal,81796068,,User,,14,,2,12
1006058436,Added Optimal Advertising benchmark,"Added the benchmark for optimal advertising which is taking around `10s` on my local system.
The benchmark was taken from: https://nbviewer.org/github/cvxgrp/cvx_short_course/blob/master/applications/optimal_ad.ipynb",True,7,https://api.github.com/repos/cvxpy/benchmarks/pulls/7,https://github.com/cvxpy/benchmarks/pull/7,closed,57,0,1,3,0,0,0,0,[],2022-07-22 18:33:18+00:00,2022-07-27 17:12:46+00:00,427168.0,"4 days, 22:39:28",[],"[{'commit_sha': '6bc6530c4d8112ff528c8154f7b33466edb084f5', 'committer_username': 'parthb83', 'committer_name': 'Parth Bansal', 'committer_email': None, 'commit_date': datetime.datetime(2021, 4, 2, 6, 9, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '77a0ac0906a828325baf1aaa6c5ca39227cbeb00', 'committer_username': 'phschiele', 'committer_name': 'Philipp Schiele', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 22, 8, 30, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dd1537997063461755aad5fe62ede8dd9f869fdf', 'committer_username': 'phschiele', 'committer_name': 'Philipp Schiele', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 22, 8, 30, 11, tzinfo=datetime.timezone.utc)}]",Parth Bansal,81796068,,User,,14,,2,12
1024211701,Added a new benchmark for svm with l1 regularization,"Added a benchmark that uses `support vector machines(svm)` with `l1-norm regularization`. The benchmark takes about `13-14s` on my local system.

PS: Also fixed some files with `isort`.",True,8,https://api.github.com/repos/cvxpy/benchmarks/pulls/8,https://github.com/cvxpy/benchmarks/pull/8,closed,55,0,1,3,0,1,0,0,[],2022-08-11 18:55:48+00:00,2022-08-14 19:01:35+00:00,259547.0,"3 days, 0:05:47","[{'comment_id': 945329934, 'comment_body': '```suggestion\r\nclass SVMWithL1Regularization:\r\n```', 'comment_created': datetime.datetime(2022, 8, 14, 18, 59, 31, tzinfo=datetime.timezone.utc), 'commenter': 'phschiele', 'type': 'User'}]","[{'commit_sha': '1e0ddca0d44a1a5513356695cca9e59dbe19acd5', 'committer_username': 'parthb83', 'committer_name': 'Parth Bansal', 'committer_email': None, 'commit_date': datetime.datetime(2021, 4, 2, 6, 9, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '25f6b8441a5a9e89373e2b72d8af9dd06913e80c', 'committer_username': 'parthb83', 'committer_name': 'Parth Bansal', 'committer_email': None, 'commit_date': datetime.datetime(2021, 4, 2, 6, 9, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ea530a262264ab11b7597599c3b5576356150e8d', 'committer_username': 'phschiele', 'committer_name': 'Philipp Schiele', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 22, 8, 30, 11, tzinfo=datetime.timezone.utc)}]",Parth Bansal,81796068,,User,,14,,2,12
1033918938,Added benchmark for Huber Regression.,Added benchmark for Huber Regression in the benchmark suite. The benchmark is taking around `12s` on my local system.,True,9,https://api.github.com/repos/cvxpy/benchmarks/pulls/9,https://github.com/cvxpy/benchmarks/pull/9,closed,49,0,1,4,0,1,0,0,[],2022-08-23 09:41:33+00:00,2022-08-29 06:11:45+00:00,505812.0,"5 days, 20:30:12","[{'comment_id': 956926354, 'comment_body': '```suggestion\r\nclass HuberRegression:\r\n    """"""\r\n    Taken from https://stanford.edu/~boyd/papers/cvx_short_course.html\r\n    """"""\r\n\r\n    def setup(self):\r\n        np.random.seed(1)\r\n        n = 3000\r\n        p = 0.12\r\n        SAMPLES = int(1.5 * n)\r\n        beta_true = 5 * np.random.normal(size=(n, 1))\r\n        X = np.random.randn(n, SAMPLES)\r\n        v = np.random.normal(size=(SAMPLES, 1))\r\n```', 'comment_created': datetime.datetime(2022, 8, 29, 6, 9, 14, tzinfo=datetime.timezone.utc), 'commenter': 'phschiele', 'type': 'User'}]","[{'commit_sha': '2e5b97d9e913a6c5d6230986442c9130df7fa6e9', 'committer_username': 'parthb83', 'committer_name': 'Parth Bansal', 'committer_email': None, 'commit_date': datetime.datetime(2021, 4, 2, 6, 9, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '47632f78b574ba41f79d2cae171b58e7125e02da', 'committer_username': 'parthb83', 'committer_name': 'Parth Bansal', 'committer_email': None, 'commit_date': datetime.datetime(2021, 4, 2, 6, 9, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '614a305a2ec3d77a033072f4892ee7746c12d0d1', 'committer_username': 'parthb83', 'committer_name': 'Parth Bansal', 'committer_email': None, 'commit_date': datetime.datetime(2021, 4, 2, 6, 9, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3575124a744937fb98048d0c8502854fdd42d86b', 'committer_username': 'phschiele', 'committer_name': 'Philipp Schiele', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 22, 8, 30, 11, tzinfo=datetime.timezone.utc)}]",Parth Bansal,81796068,,User,,14,,2,12
1034011405,Added benchmark for Semidefinite Programming,Added benchmark for Semidefinite Programming in the benchmarking suite. It is taking around 11s on my local system.,True,10,https://api.github.com/repos/cvxpy/benchmarks/pulls/10,https://github.com/cvxpy/benchmarks/pull/10,closed,51,0,1,2,0,1,0,0,[],2022-08-23 11:00:03+00:00,2022-08-29 06:07:47+00:00,500864.0,"5 days, 19:07:44","[{'comment_id': 956923198, 'comment_body': '```suggestion\r\nclass SemidefiniteProgramming:\r\n```', 'comment_created': datetime.datetime(2022, 8, 29, 6, 3, 7, tzinfo=datetime.timezone.utc), 'commenter': 'phschiele', 'type': 'User'}]","[{'commit_sha': '76cd468ec64df2003dbcfacee669ab3c4a23b20e', 'committer_username': 'parthb83', 'committer_name': 'Parth Bansal', 'committer_email': None, 'commit_date': datetime.datetime(2021, 4, 2, 6, 9, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ea5d2331c778945530513736b9690b3997797aa9', 'committer_username': 'phschiele', 'committer_name': 'Philipp Schiele', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 22, 8, 30, 11, tzinfo=datetime.timezone.utc)}]",Parth Bansal,81796068,,User,,14,,2,12
1046700503,Added a gini portfolio and factor covariance portfolio optimization.,"Renamed the `cvar_benchmark` file to `finance`. Added a new benchmark for factor covariance model of Portfolio Optimization.

Also added benchmarks for `Gini Portfolio Optimization` with Yitzhaki formulation and Murray reformulation as well. Also added the Cajas formulation which has been commented out as it was failing on my system. Other than that, the benchmarks time is really varying on different runs so we should look into that.",True,11,https://api.github.com/repos/cvxpy/benchmarks/pulls/11,https://github.com/cvxpy/benchmarks/pull/11,closed,177,1,2,4,0,0,0,0,[],2022-09-05 16:58:26+00:00,2023-07-27 10:15:58+00:00,28055852.0,"324 days, 17:17:32",[],"[{'commit_sha': '8eb74e285295e7c20c92fe3d98c5d21fcaabdfe9', 'committer_username': 'parthb83', 'committer_name': 'Parth Bansal', 'committer_email': None, 'commit_date': datetime.datetime(2021, 4, 2, 6, 9, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '81798483980ebd1d978e0f28727392efaaa56e2d', 'committer_username': 'parthb83', 'committer_name': 'Parth Bansal', 'committer_email': None, 'commit_date': datetime.datetime(2021, 4, 2, 6, 9, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1f87ba0f62e07056af0cd881cca0215d66eb2e1d', 'committer_username': 'phschiele', 'committer_name': 'Philipp Schiele', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 22, 8, 30, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9ba1245bc2814d36febcb7313b65d4d4bdcd8d99', 'committer_username': 'phschiele', 'committer_name': 'Philipp Schiele', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 22, 8, 30, 11, tzinfo=datetime.timezone.utc)}]",Parth Bansal,81796068,,User,,14,,2,12

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
11110385,cvxpy,cvxpy/cvxpy,C++,1050,5289,123,201,3525,211,162,14,"[{'id': 980502034, 'number': 1810, 'closed': datetime.datetime(2022, 7, 3, 17, 45, 16, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 6, 27, 20, 22, 41, tzinfo=datetime.timezone.utc), 'time_taken': 508955.0, 'time_delta': '5 days, 21:22:35', 'additions': 129, 'deletions': 0, 'state': 'closed'}, {'id': 979606631, 'number': 1808, 'closed': datetime.datetime(2022, 6, 27, 20, 20, 26, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 6, 27, 5, 51, 17, tzinfo=datetime.timezone.utc), 'time_taken': 52149.0, 'time_delta': '14:29:09', 'additions': 80, 'deletions': 0, 'state': 'closed'}, {'id': 964399761, 'number': 1798, 'closed': datetime.datetime(2022, 7, 8, 20, 44, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 6, 10, 17, 50, 40, tzinfo=datetime.timezone.utc), 'time_taken': 2429600.0, 'time_delta': '28 days, 2:53:20', 'additions': 59, 'deletions': 0, 'state': 'closed'}, {'id': 930536620, 'number': 1768, 'closed': datetime.datetime(2022, 7, 1, 21, 19, 21, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 5, 8, 19, 8, 41, tzinfo=datetime.timezone.utc), 'time_taken': 4673440.0, 'time_delta': '54 days, 2:10:40', 'additions': 149, 'deletions': 1, 'state': 'closed'}, {'id': 872313460, 'number': 1683, 'closed': datetime.datetime(2022, 3, 5, 19, 1, 38, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 3, 5, 18, 30, 46, tzinfo=datetime.timezone.utc), 'time_taken': 1852.0, 'time_delta': '0:30:52', 'additions': 40, 'deletions': 10, 'state': 'closed'}, {'id': 871969011, 'number': 1680, 'closed': datetime.datetime(2022, 3, 4, 21, 58, 30, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 3, 4, 19, 53, 16, tzinfo=datetime.timezone.utc), 'time_taken': 7514.0, 'time_delta': '2:05:14', 'additions': 28, 'deletions': 2, 'state': 'closed'}, {'id': 841049650, 'number': 1641, 'closed': datetime.datetime(2022, 2, 8, 2, 39, 30, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 2, 6, 11, 22, 59, tzinfo=datetime.timezone.utc), 'time_taken': 141391.0, 'time_delta': '1 day, 15:16:31', 'additions': 182, 'deletions': 1, 'state': 'closed'}]"
480558518,benchmarks,cvxpy/benchmarks,Python,3,9,4,6,98,2,5,2,"[{'id': 1063105116, 'number': 12, 'closed': datetime.datetime(2022, 9, 23, 18, 37, 18, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 9, 21, 16, 42, 52, tzinfo=datetime.timezone.utc), 'time_taken': 179666.0, 'time_delta': '2 days, 1:54:26', 'additions': 12, 'deletions': 1, 'state': 'closed'}, {'id': 1046700503, 'number': 11, 'closed': datetime.datetime(2023, 7, 27, 10, 15, 58, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 9, 5, 16, 58, 26, tzinfo=datetime.timezone.utc), 'time_taken': 28055852.0, 'time_delta': '324 days, 17:17:32', 'additions': 177, 'deletions': 1, 'state': 'closed'}, {'id': 1034011405, 'number': 10, 'closed': datetime.datetime(2022, 8, 29, 6, 7, 47, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 23, 11, 0, 3, tzinfo=datetime.timezone.utc), 'time_taken': 500864.0, 'time_delta': '5 days, 19:07:44', 'additions': 51, 'deletions': 0, 'state': 'closed'}, {'id': 1033918938, 'number': 9, 'closed': datetime.datetime(2022, 8, 29, 6, 11, 45, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 23, 9, 41, 33, tzinfo=datetime.timezone.utc), 'time_taken': 505812.0, 'time_delta': '5 days, 20:30:12', 'additions': 49, 'deletions': 0, 'state': 'closed'}, {'id': 1024211701, 'number': 8, 'closed': datetime.datetime(2022, 8, 14, 19, 1, 35, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 11, 18, 55, 48, tzinfo=datetime.timezone.utc), 'time_taken': 259547.0, 'time_delta': '3 days, 0:05:47', 'additions': 55, 'deletions': 0, 'state': 'closed'}, {'id': 1006058436, 'number': 7, 'closed': datetime.datetime(2022, 7, 27, 17, 12, 46, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 22, 18, 33, 18, tzinfo=datetime.timezone.utc), 'time_taken': 427168.0, 'time_delta': '4 days, 22:39:28', 'additions': 57, 'deletions': 0, 'state': 'closed'}, {'id': 979363767, 'number': 6, 'closed': datetime.datetime(2022, 6, 27, 1, 40, 2, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 6, 26, 18, 14, 22, tzinfo=datetime.timezone.utc), 'time_taken': 26740.0, 'time_delta': '7:25:40', 'additions': 92, 'deletions': 0, 'state': 'closed'}, {'id': 963313701, 'number': 5, 'closed': datetime.datetime(2022, 6, 12, 17, 46, 56, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 6, 9, 20, 32, 49, tzinfo=datetime.timezone.utc), 'time_taken': 249247.0, 'time_delta': '2 days, 21:14:07', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 958282293, 'number': 4, 'closed': datetime.datetime(2022, 6, 5, 20, 23, 37, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 6, 4, 19, 34, 14, tzinfo=datetime.timezone.utc), 'time_taken': 89363.0, 'time_delta': '1 day, 0:49:23', 'additions': 182, 'deletions': 582, 'state': 'closed'}, {'id': 954378186, 'number': 3, 'closed': datetime.datetime(2022, 6, 2, 19, 47, 52, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 6, 1, 17, 2, 47, tzinfo=datetime.timezone.utc), 'time_taken': 96305.0, 'time_delta': '1 day, 2:45:05', 'additions': 165, 'deletions': 485, 'state': 'closed'}]"
