pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
454839828,Protocol Buffers integration,"This pull request integrates majority of the work done till now in the `protobuf` project.
- The chapel plugin to the `protobuf` compiler is added as a tool `protoc-gen-chpl`.
- The chapel module supporting the generated code is added in `modules/packages` as `ProtobufProtocolSupport.chpl`.
- A basic [user guide]( https://www.aniketmathur.me/Protobuf-doc/) is added in `doc/rst/tools/protoc-gen-chpl/`.

`protoc-gen-chpl` is the required plugin binary name by protobuf compiler `protoc` 

Link to base repository-> https://github.com/aniket21mathur/Chapel-protobuf (The changes in this pr are even with the master of the given repo)",True,16105,https://api.github.com/repos/chapel-lang/chapel/pulls/16105,https://github.com/chapel-lang/chapel/pull/16105,closed,4100,0,72,22,37,58,1,0,[{'name': 'stat: cla signed'}],2020-07-22 02:21:49+00:00,2020-08-26 14:58:23+00:00,3069394.0,"35 days, 12:36:34","[{'comment_id': 458583597, 'comment_body': '@lydia-duncan should we document the parent module and the submodules separately? No function in these modules is user exposed.', 'comment_created': datetime.datetime(2020, 7, 22, 7, 15, 58, tzinfo=datetime.timezone.utc), 'commenter': 'Aniket21mathur', 'type': 'User'}, {'comment_id': 458892811, 'comment_body': 'Do you mean ""should we add comments?"" or ""should we add `pragma ""no doc""` to these symbols?""  Or both?  It also doesn\'t look like the parent module provides anything beyond its three submodules - if the intention is for the submodules to be merely organizational while most places that need it would just import or use the parent module, then I think it\'s fine for the summary documentation to be on the parent rather than the particular submodules (though I do think there should be some information on why the submodules were divided in the way they were, to help developers determine where to place future functions).', 'comment_created': datetime.datetime(2020, 7, 22, 15, 46, 11, tzinfo=datetime.timezone.utc), 'commenter': 'lydia-duncan', 'type': 'User'}, {'comment_id': 458914277, 'comment_body': '> I do think there should be some information on why the submodules were divided in the way they were, to help developers determine where to place future functions).\r\n\r\nAdding comments for that would be sufficient?', 'comment_created': datetime.datetime(2020, 7, 22, 16, 17, 22, tzinfo=datetime.timezone.utc), 'commenter': 'Aniket21mathur', 'type': 'User'}, {'comment_id': 458926529, 'comment_body': '> Do you mean ""should we add comments?"" or ""should we add `pragma ""no doc""` to these symbols?"" Or both?\r\n\r\nI don\'t think comment for each function will be required, they are self-explanatory by name as long as we have explanatory documentation for the modules, but yeah should we add pragma ""no doc""?', 'comment_created': datetime.datetime(2020, 7, 22, 16, 31, 41, tzinfo=datetime.timezone.utc), 'commenter': 'Aniket21mathur', 'type': 'User'}, {'comment_id': 458941791, 'comment_body': ""Sure.  I think you could get away with adding it to the module symbols and having it propagate that way.  I'd be curious to see how the generated documentation in general looks like after doing so"", 'comment_created': datetime.datetime(2020, 7, 22, 16, 55, 44, tzinfo=datetime.timezone.utc), 'commenter': 'lydia-duncan', 'type': 'User'}, {'comment_id': 458944151, 'comment_body': '> I think you could get away with adding it to the module symbols and having it propagate that way.\r\n\r\nBy this did you mean something like this-\r\n\r\n```\r\npragma ""no doc""\r\nmodule RepeatedFields {\r\n```', 'comment_created': datetime.datetime(2020, 7, 22, 16, 59, 34, tzinfo=datetime.timezone.utc), 'commenter': 'Aniket21mathur', 'type': 'User'}, {'comment_id': 458953130, 'comment_body': 'And also we should have detailed documentation for the parent module, explaining all the submodules right?', 'comment_created': datetime.datetime(2020, 7, 22, 17, 14, 36, tzinfo=datetime.timezone.utc), 'commenter': 'Aniket21mathur', 'type': 'User'}, {'comment_id': 461057094, 'comment_body': 'These module has -> A module that has', 'comment_created': datetime.datetime(2020, 7, 27, 17, 37, tzinfo=datetime.timezone.utc), 'commenter': 'mppf', 'type': 'User'}, {'comment_id': 461057919, 'comment_body': 'Let\'s make a new paragraph for ""Here is an example"".\r\n\r\nI think that this should have a link to the official protobuf documentation. It could say something like\r\n\r\n""This section describes a simple ``.proto`` file. For complete details on ``.proto`` files see the links at the end of this document""', 'comment_created': datetime.datetime(2020, 7, 27, 17, 38, 32, tzinfo=datetime.timezone.utc), 'commenter': 'mppf', 'type': 'User'}, {'comment_id': 461058784, 'comment_body': 'It seems this point would be a good time to mention that we only handle proto3 (if that is the case).', 'comment_created': datetime.datetime(2020, 7, 27, 17, 40, 7, tzinfo=datetime.timezone.utc), 'commenter': 'mppf', 'type': 'User'}, {'comment_id': 461059722, 'comment_body': 'Could you say here what the `= 1` `= 2` is doing above protobuf message?', 'comment_created': datetime.datetime(2020, 7, 27, 17, 41, 54, tzinfo=datetime.timezone.utc), 'commenter': 'mppf', 'type': 'User'}, {'comment_id': 461061917, 'comment_body': 'I don\'t personally see a lot of benefit from talking about ""simple fields"" as different from other fields. I\'d leave this distinction out and just say something about what kinds of fields. E.g. ""As you can see, protobuf messages can have string and integer fields. You can also define enum types if...""\r\n', 'comment_created': datetime.datetime(2020, 7, 27, 17, 45, 42, tzinfo=datetime.timezone.utc), 'commenter': 'mppf', 'type': 'User'}, {'comment_id': 461062597, 'comment_body': 'Should just be ``name``, ``id``, ``email``, ``contact`` and ``number`` fields, right?', 'comment_created': datetime.datetime(2020, 7, 27, 17, 47, tzinfo=datetime.timezone.utc), 'commenter': 'mppf', 'type': 'User'}, {'comment_id': 461063616, 'comment_body': ""I think we might want to name these ``writeToOutputChannel`` and ``parseFromInputChannel``. Are these names common in other protobuf implementations? I would probably just call them ``writeToChannel`` and ``readFromChannel`` myself.\r\n\r\nNote that it is also possible to implement readThis / writeThis for the generated message types. In that event, you could just call `myChannel.write(myProtobufMessageType)`. But I don't think that's necessary to support immediately - it could be added later."", 'comment_created': datetime.datetime(2020, 7, 27, 17, 48, 50, tzinfo=datetime.timezone.utc), 'commenter': 'mppf', 'type': 'User'}, {'comment_id': 461065810, 'comment_body': 'Probably better to use https://chapel-lang.org/docs/master/modules/standard/FileSystem.html#FileSystem.listdir than spawning ls here.', 'comment_created': datetime.datetime(2020, 7, 27, 17, 52, 32, tzinfo=datetime.timezone.utc), 'commenter': 'mppf', 'type': 'User'}, {'comment_id': 461066232, 'comment_body': 'Better to call https://chapel-lang.org/docs/master/builtins/String.html#String.string.strip', 'comment_created': datetime.datetime(2020, 7, 27, 17, 53, 10, tzinfo=datetime.timezone.utc), 'commenter': 'mppf', 'type': 'User'}, {'comment_id': 461067360, 'comment_body': 'Can you make endToEndRunner use `assert` instead of printing out `true` lots of times? Or maye it print out an error in the event that something did not work? I would like to not have to modify this .good file if we add more read.chpl etc. ', 'comment_created': datetime.datetime(2020, 7, 27, 17, 55, 6, tzinfo=datetime.timezone.utc), 'commenter': 'mppf', 'type': 'User'}, {'comment_id': 461071869, 'comment_body': ""I don't really understand the purpose of the symbolic link business but we were doing it for mason and this code can follow that for now."", 'comment_created': datetime.datetime(2020, 7, 27, 18, 3, 3, tzinfo=datetime.timezone.utc), 'commenter': 'mppf', 'type': 'User'}, {'comment_id': 461073479, 'comment_body': 'This should start out by saying something about needing protobuf installed. Since you need header files, you probably need the `-dev` package on debian/ubuntu. If you have the `apt` commands handy it would be nice to show them like, ""For example, to install protobuf on an Ubuntu system, you might use ``apt-get install libprotobuf-dev``"". You don\'t have to cover all systems here but having some concrete detail can be helpful.', 'comment_created': datetime.datetime(2020, 7, 27, 18, 5, 54, tzinfo=datetime.timezone.utc), 'commenter': 'mppf', 'type': 'User'}, {'comment_id': 461074581, 'comment_body': '""It provides arguments to the ``protoc`` compiler so that it knows how to generate Chapel specific code for a given ``.proto`` file.""\r\n\r\n-> \r\n\r\n""It enables the ``protoc`` compiler to generate Chapel code.""\r\n\r\n(You cover the argument part later).', 'comment_created': datetime.datetime(2020, 7, 27, 18, 8, 1, tzinfo=datetime.timezone.utc), 'commenter': 'mppf', 'type': 'User'}, {'comment_id': 461696697, 'comment_body': '> Are these names common in other protobuf implementations?\r\n\r\nNot exactly these, but yes most of them have something with `writeTo` and `parseFrom`.\r\n\r\n> Note that it is also possible to implement readThis / writeThis for the generated message types. In that event, you could just call `myChannel.write(myProtobufMessageType)`.\r\n\r\nThis seems like a good approach. We can definitely discuss and implement this latter!', 'comment_created': datetime.datetime(2020, 7, 28, 16, 2, 44, tzinfo=datetime.timezone.utc), 'commenter': 'Aniket21mathur', 'type': 'User'}, {'comment_id': 461700326, 'comment_body': ""> For example, to install protobuf on an Ubuntu system, you might use `apt-get install libprotobuf-dev`\r\n\r\nI would rather prefer giving a link to the protobuf compiler official installation [guide](https://github.com/protocolbuffers/protobuf#protocol-compiler-installation). If that's ok?"", 'comment_created': datetime.datetime(2020, 7, 28, 16, 8, 12, tzinfo=datetime.timezone.utc), 'commenter': 'Aniket21mathur', 'type': 'User'}, {'comment_id': 461712227, 'comment_body': ""Those instructions don't seem to indicate that it is common for linux distributions to have packages for it, so I'd still put the part about `apt-get`."", 'comment_created': datetime.datetime(2020, 7, 28, 16, 25, 53, tzinfo=datetime.timezone.utc), 'commenter': 'mppf', 'type': 'User'}, {'comment_id': 461730144, 'comment_body': 'Yes, I made the changes. It prints that the tests failed if any single return is not a `true`, please see \r\n815accc', 'comment_created': datetime.datetime(2020, 7, 28, 16, 54, 43, tzinfo=datetime.timezone.utc), 'commenter': 'Aniket21mathur', 'type': 'User'}, {'comment_id': 461733762, 'comment_body': 'It seems fine to me, it is just creating a symbolic link between `/chapel/bin/linux64-x86_64/protoc-gen-chpl` (in Linux 64 bit case) and `tools/protoc-gen-chpl/protoc-gen-chpl`. This is necessary because only `/chapel/bin` is accessible through the system wide `PATH` variable. If that makes sense?', 'comment_created': datetime.datetime(2020, 7, 28, 17, 0, 33, tzinfo=datetime.timezone.utc), 'commenter': 'Aniket21mathur', 'type': 'User'}, {'comment_id': 461736100, 'comment_body': 'Sure!', 'comment_created': datetime.datetime(2020, 7, 28, 17, 4, 35, tzinfo=datetime.timezone.utc), 'commenter': 'Aniket21mathur', 'type': 'User'}, {'comment_id': 461744541, 'comment_body': 'Either way. I expect to change it later (along with mason) to not use this approach. It should just put the binary in the bin directory and not also in the tools directory.', 'comment_created': datetime.datetime(2020, 7, 28, 17, 18, 37, tzinfo=datetime.timezone.utc), 'commenter': 'mppf', 'type': 'User'}, {'comment_id': 461747948, 'comment_body': '> . It should just put the binary in the bin directory and not also in the tools directory.\r\n\r\nYes, that sounds good.', 'comment_created': datetime.datetime(2020, 7, 28, 17, 24, 23, tzinfo=datetime.timezone.utc), 'commenter': 'Aniket21mathur', 'type': 'User'}, {'comment_id': 461769276, 'comment_body': 'See also PR #16154.', 'comment_created': datetime.datetime(2020, 7, 28, 17, 59, tzinfo=datetime.timezone.utc), 'commenter': 'mppf', 'type': 'User'}, {'comment_id': 463177354, 'comment_body': 'Sorry, meant to come back to this before my vacation.  Yeah, I think the documentation for the parent module should explain the division into the submodules if the submodules themselves do not get documented', 'comment_created': datetime.datetime(2020, 7, 30, 18, 4, 32, tzinfo=datetime.timezone.utc), 'commenter': 'lydia-duncan', 'type': 'User'}, {'comment_id': 464502549, 'comment_body': 'Should the above two mentions of protoc-gen-chpl also be surrounded in `?', 'comment_created': datetime.datetime(2020, 8, 3, 15, 51, 51, tzinfo=datetime.timezone.utc), 'commenter': 'lydia-duncan', 'type': 'User'}, {'comment_id': 464503468, 'comment_body': ""I'd separate this sentence into a `.. note::`, that'll make it stand out more in the documentation"", 'comment_created': datetime.datetime(2020, 8, 3, 15, 53, 25, tzinfo=datetime.timezone.utc), 'commenter': 'lydia-duncan', 'type': 'User'}, {'comment_id': 464506366, 'comment_body': 'Typo: ""alphanumeric"", not ""aplhanumeric""', 'comment_created': datetime.datetime(2020, 8, 3, 15, 58, 2, tzinfo=datetime.timezone.utc), 'commenter': 'lydia-duncan', 'type': 'User'}, {'comment_id': 464508254, 'comment_body': 'Would it be helpful to call out the Chapel types these translate to here?', 'comment_created': datetime.datetime(2020, 8, 3, 16, 1, 16, tzinfo=datetime.timezone.utc), 'commenter': 'lydia-duncan', 'type': 'User'}, {'comment_id': 464517715, 'comment_body': 'I think grammatically each field description should start with ""a"", e.g. ""a ``string`` ...""\r\n\r\nI think it also should be ""typed"" not ""type""?', 'comment_created': datetime.datetime(2020, 8, 3, 16, 17, 51, tzinfo=datetime.timezone.utc), 'commenter': 'lydia-duncan', 'type': 'User'}, {'comment_id': 464518786, 'comment_body': 'I don\'t know that you need to call out the type here.  I\'d maybe just say ""The ``contact`` field"" instead', 'comment_created': datetime.datetime(2020, 8, 3, 16, 19, 46, tzinfo=datetime.timezone.utc), 'commenter': 'lydia-duncan', 'type': 'User'}, {'comment_id': 464519112, 'comment_body': 'I think this should be ""5"", not ""4""', 'comment_created': datetime.datetime(2020, 8, 3, 16, 20, 17, tzinfo=datetime.timezone.utc), 'commenter': 'lydia-duncan', 'type': 'User'}, {'comment_id': 464521235, 'comment_body': ""I'd use a semi-colon to end this sentence, to more obviously indicate that the code following it is related"", 'comment_created': datetime.datetime(2020, 8, 3, 16, 24, 10, tzinfo=datetime.timezone.utc), 'commenter': 'lydia-duncan', 'type': 'User'}, {'comment_id': 464522027, 'comment_body': ""These don't use the names with the trailing underscore - this might be confusing for the reader.  Is the trailing underscore name an artifact of a prior implementation?  (I seem to recall that being a discussion that went by)"", 'comment_created': datetime.datetime(2020, 8, 3, 16, 25, 32, tzinfo=datetime.timezone.utc), 'commenter': 'lydia-duncan', 'type': 'User'}, {'comment_id': 464522537, 'comment_body': 'If the underscore is still present, it would be good to explain that you are using the setter method or something.  If the underscore is not present, it should be removed from the names in the list of what is output', 'comment_created': datetime.datetime(2020, 8, 3, 16, 26, 30, tzinfo=datetime.timezone.utc), 'commenter': 'lydia-duncan', 'type': 'User'}, {'comment_id': 464523443, 'comment_body': '""have"" -> ""has the"" or ""contains the""', 'comment_created': datetime.datetime(2020, 8, 3, 16, 28, 14, tzinfo=datetime.timezone.utc), 'commenter': 'lydia-duncan', 'type': 'User'}, {'comment_id': 464523691, 'comment_body': '""have"" -> ""has"" or ""contains""', 'comment_created': datetime.datetime(2020, 8, 3, 16, 28, 38, tzinfo=datetime.timezone.utc), 'commenter': 'lydia-duncan', 'type': 'User'}, {'comment_id': 464523927, 'comment_body': 'Ditto the previous comment', 'comment_created': datetime.datetime(2020, 8, 3, 16, 29, 6, tzinfo=datetime.timezone.utc), 'commenter': 'lydia-duncan', 'type': 'User'}, {'comment_id': 464524465, 'comment_body': 'Missing a newline at the end of the file here', 'comment_created': datetime.datetime(2020, 8, 3, 16, 29, 59, tzinfo=datetime.timezone.utc), 'commenter': 'lydia-duncan', 'type': 'User'}, {'comment_id': 464533243, 'comment_body': ""Looks like you're got a typo here :)"", 'comment_created': datetime.datetime(2020, 8, 3, 16, 46, 2, tzinfo=datetime.timezone.utc), 'commenter': 'lydia-duncan', 'type': 'User'}, {'comment_id': 464535473, 'comment_body': ""Note to mentors: need to figure out a way to get this in our nightly testing set up - we'll need to install protoc somewhere, etc."", 'comment_created': datetime.datetime(2020, 8, 3, 16, 50, 7, tzinfo=datetime.timezone.utc), 'commenter': 'lydia-duncan', 'type': 'User'}, {'comment_id': 465479223, 'comment_body': 'I guess, it would be better to have it in the detailed guide for the generated code.\r\n\r\nWhat do you say?', 'comment_created': datetime.datetime(2020, 8, 5, 5, 20, 42, tzinfo=datetime.timezone.utc), 'commenter': 'Aniket21mathur', 'type': 'User'}, {'comment_id': 465479495, 'comment_body': 'Makes sense', 'comment_created': datetime.datetime(2020, 8, 5, 5, 21, 40, tzinfo=datetime.timezone.utc), 'commenter': 'Aniket21mathur', 'type': 'User'}, {'comment_id': 465480896, 'comment_body': '> If the underscore is not present, it should be removed from the names in the list of what is output\r\n\r\nYes, the underscore is no longer in use. Sorry, I missed that :sweat_smile: ', 'comment_created': datetime.datetime(2020, 8, 5, 5, 26, 28, tzinfo=datetime.timezone.utc), 'commenter': 'Aniket21mathur', 'type': 'User'}, {'comment_id': 466003678, 'comment_body': 'Seems reasonable to me :)', 'comment_created': datetime.datetime(2020, 8, 5, 21, 6, 1, tzinfo=datetime.timezone.utc), 'commenter': 'lydia-duncan', 'type': 'User'}, {'comment_id': 466003942, 'comment_body': ""It's easy to do XD"", 'comment_created': datetime.datetime(2020, 8, 5, 21, 6, 30, tzinfo=datetime.timezone.utc), 'commenter': 'lydia-duncan', 'type': 'User'}, {'comment_id': 466468497, 'comment_body': 'Yup :P', 'comment_created': datetime.datetime(2020, 8, 6, 14, 48, 54, tzinfo=datetime.timezone.utc), 'commenter': 'Aniket21mathur', 'type': 'User'}, {'comment_id': 470705806, 'comment_body': 'Should the helpers get renamed as well?', 'comment_created': datetime.datetime(2020, 8, 14, 15, 44, 54, tzinfo=datetime.timezone.utc), 'commenter': 'lydia-duncan', 'type': 'User'}, {'comment_id': 470706150, 'comment_body': 'And the _ methods?', 'comment_created': datetime.datetime(2020, 8, 14, 15, 45, 31, tzinfo=datetime.timezone.utc), 'commenter': 'lydia-duncan', 'type': 'User'}, {'comment_id': 470714556, 'comment_body': 'Made the changes :)', 'comment_created': datetime.datetime(2020, 8, 14, 16, 1, 9, tzinfo=datetime.timezone.utc), 'commenter': 'Aniket21mathur', 'type': 'User'}, {'comment_id': 475833463, 'comment_body': 'I needed to install also libprotoc-dev protobuf-compiler to get it to build', 'comment_created': datetime.datetime(2020, 8, 24, 19, 7, 15, tzinfo=datetime.timezone.utc), 'commenter': 'mppf', 'type': 'User'}, {'comment_id': 476641490, 'comment_body': '@mppf Should we rely on `Debian` packages? The download section of the official `protobuf` guide also points to the source repository instead of `debian` packages.\r\n ', 'comment_created': datetime.datetime(2020, 8, 25, 18, 6, 50, tzinfo=datetime.timezone.utc), 'commenter': 'Aniket21mathur', 'type': 'User'}, {'comment_id': 476664453, 'comment_body': ""Since the packages did not work for me at all - I think this should suggest installing 3.13 or later - and note that source installation might currently be required. It doesn't make sense to talk about `apt-get` in that event."", 'comment_created': datetime.datetime(2020, 8, 25, 18, 48, 43, tzinfo=datetime.timezone.utc), 'commenter': 'mppf', 'type': 'User'}]","[{'commit_sha': '91b4a24f596983e55c43c73be23c54d015817e20', 'committer_username': 'Aniket21mathur', 'committer_name': 'Aniket Mathur', 'committer_email': 'aniket.m@rigi.club', 'commit_date': datetime.datetime(2018, 1, 4, 6, 23, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cf0198a42dc3b8c47f42ebd5c954e213e3486bfd', 'committer_username': 'Aniket21mathur', 'committer_name': 'Aniket Mathur', 'committer_email': 'aniket.m@rigi.club', 'commit_date': datetime.datetime(2018, 1, 4, 6, 23, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'af6ea391953836e7ed687ff6d8f5fe3b7de6e5cc', 'committer_username': 'Aniket21mathur', 'committer_name': 'Aniket Mathur', 'committer_email': 'aniket.m@rigi.club', 'commit_date': datetime.datetime(2018, 1, 4, 6, 23, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ebafc30bbcdaf65dffdf4ac11ee5b5c42d1c3c1e', 'committer_username': 'Aniket21mathur', 'committer_name': 'Aniket Mathur', 'committer_email': 'aniket.m@rigi.club', 'commit_date': datetime.datetime(2018, 1, 4, 6, 23, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'da8b8e005b062eebcc71b7be639e0bf90cbbf4cb', 'committer_username': 'Aniket21mathur', 'committer_name': 'Aniket Mathur', 'committer_email': 'aniket.m@rigi.club', 'commit_date': datetime.datetime(2018, 1, 4, 6, 23, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e7e09a116eb636a1c3d7ea9bfe315e5d6681d7eb', 'committer_username': 'Aniket21mathur', 'committer_name': 'Aniket Mathur', 'committer_email': 'aniket.m@rigi.club', 'commit_date': datetime.datetime(2018, 1, 4, 6, 23, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4885b9ceff8169817dd37e0140023cd5446c1932', 'committer_username': 'Aniket21mathur', 'committer_name': 'Aniket Mathur', 'committer_email': 'aniket.m@rigi.club', 'commit_date': datetime.datetime(2018, 1, 4, 6, 23, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a00f0c93a4de78d571208ecf17c171a499c89ddd', 'committer_username': 'Aniket21mathur', 'committer_name': 'Aniket Mathur', 'committer_email': 'aniket.m@rigi.club', 'commit_date': datetime.datetime(2018, 1, 4, 6, 23, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8479f7cc0838c47d78ac708b60b13fcf8fe95e08', 'committer_username': 'Aniket21mathur', 'committer_name': 'Aniket Mathur', 'committer_email': 'aniket.m@rigi.club', 'commit_date': datetime.datetime(2018, 1, 4, 6, 23, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '66839255f576a19bb3c28e6bf8a0a70d86f90359', 'committer_username': 'Aniket21mathur', 'committer_name': 'Aniket Mathur', 'committer_email': 'aniket.m@rigi.club', 'commit_date': datetime.datetime(2018, 1, 4, 6, 23, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0c1a792e177b2cff38b1d9949f6220eada423f80', 'committer_username': 'Aniket21mathur', 'committer_name': 'Aniket Mathur', 'committer_email': 'aniket.m@rigi.club', 'commit_date': datetime.datetime(2018, 1, 4, 6, 23, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '16d675232f80fd06ff5c83cc32f11720525d4671', 'committer_username': 'Aniket21mathur', 'committer_name': 'Aniket Mathur', 'committer_email': 'aniket.m@rigi.club', 'commit_date': datetime.datetime(2018, 1, 4, 6, 23, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'caf1484226fc64012d35dc4686435a04662d10ce', 'committer_username': 'Aniket21mathur', 'committer_name': 'Aniket Mathur', 'committer_email': 'aniket.m@rigi.club', 'commit_date': datetime.datetime(2018, 1, 4, 6, 23, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7eb018174928c47a6351d4650fee2c1f9381a40c', 'committer_username': 'Aniket21mathur', 'committer_name': 'Aniket Mathur', 'committer_email': 'aniket.m@rigi.club', 'commit_date': datetime.datetime(2018, 1, 4, 6, 23, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd57a586c6bf620c9b92ddd01f298d808385cfc01', 'committer_username': 'Aniket21mathur', 'committer_name': 'Aniket Mathur', 'committer_email': 'aniket.m@rigi.club', 'commit_date': datetime.datetime(2018, 1, 4, 6, 23, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '36fffdc165ed1bb9e1910af98ff0897d3fa87480', 'committer_username': 'Aniket21mathur', 'committer_name': 'Aniket Mathur', 'committer_email': 'aniket.m@rigi.club', 'commit_date': datetime.datetime(2018, 1, 4, 6, 23, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ae21a528cd5c7347858b7899e7b808a510b4ba01', 'committer_username': 'Aniket21mathur', 'committer_name': 'Aniket Mathur', 'committer_email': 'aniket.m@rigi.club', 'commit_date': datetime.datetime(2018, 1, 4, 6, 23, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '18626ab2921dc57d783cbaf950fd2f72e8b13ed1', 'committer_username': 'Aniket21mathur', 'committer_name': 'Aniket Mathur', 'committer_email': 'aniket.m@rigi.club', 'commit_date': datetime.datetime(2018, 1, 4, 6, 23, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '999a7ced3cce22ec2e2832aa9084c3b565c0d65c', 'committer_username': 'Aniket21mathur', 'committer_name': 'Aniket Mathur', 'committer_email': 'aniket.m@rigi.club', 'commit_date': datetime.datetime(2018, 1, 4, 6, 23, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '852f5937f8dad2f885d92d29bc3242076e0e41a1', 'committer_username': 'Aniket21mathur', 'committer_name': 'Aniket Mathur', 'committer_email': 'aniket.m@rigi.club', 'commit_date': datetime.datetime(2018, 1, 4, 6, 23, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '84d1d1f44401e0c38267537b7c998e5b82a9e4d0', 'committer_username': 'Aniket21mathur', 'committer_name': 'Aniket Mathur', 'committer_email': 'aniket.m@rigi.club', 'commit_date': datetime.datetime(2018, 1, 4, 6, 23, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '163ac7cf0adfd45360e82acade09b15446642cce', 'committer_username': 'Aniket21mathur', 'committer_name': 'Aniket Mathur', 'committer_email': 'aniket.m@rigi.club', 'commit_date': datetime.datetime(2018, 1, 4, 6, 23, 57, tzinfo=datetime.timezone.utc)}]",Aniket Mathur,35092582,aniket.m@rigi.club,User,,35,,119,133
474032885,Add generated code guide and make check for the plugin,@lydia-duncan @mppf please have a look!,True,16297,https://api.github.com/repos/chapel-lang/chapel/pulls/16297,https://github.com/chapel-lang/chapel/pull/16297,closed,387,3,3,4,4,0,1,0,[{'name': 'stat: cla signed'}],2020-08-26 16:52:08+00:00,2020-09-03 14:43:09+00:00,683461.0,"7 days, 21:51:01",[],"[{'commit_sha': '71ed966d3ced1b5289235d53c582d9176653e82d', 'committer_username': 'Aniket21mathur', 'committer_name': 'Aniket Mathur', 'committer_email': 'aniket.m@rigi.club', 'commit_date': datetime.datetime(2018, 1, 4, 6, 23, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1e90b235190dbc151ea491d7003aaf8a18d1f32d', 'committer_username': 'Aniket21mathur', 'committer_name': 'Aniket Mathur', 'committer_email': 'aniket.m@rigi.club', 'commit_date': datetime.datetime(2018, 1, 4, 6, 23, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '336c30c8acedf555181672b41f64de1c3e81b6ac', 'committer_username': 'Aniket21mathur', 'committer_name': 'Aniket Mathur', 'committer_email': 'aniket.m@rigi.club', 'commit_date': datetime.datetime(2018, 1, 4, 6, 23, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c50fbb3c3e0962c1b5a7d1ee8405cb65b4d3a987', 'committer_username': 'Aniket21mathur', 'committer_name': 'Aniket Mathur', 'committer_email': 'aniket.m@rigi.club', 'commit_date': datetime.datetime(2018, 1, 4, 6, 23, 57, tzinfo=datetime.timezone.utc)}]",Aniket Mathur,35092582,aniket.m@rigi.club,User,,35,,119,133
475425314,"Protobuf: Add support for Any message type, Maps and Oneofs","This PR adds support for following features to Protobuf ->
- Any message type
-  Maps
- Oneofs

The user guide is also updated accordingly.",True,16309,https://api.github.com/repos/chapel-lang/chapel/pulls/16309,https://github.com/chapel-lang/chapel/pull/16309,closed,799,14,40,2,5,0,1,0,[{'name': 'stat: cla signed'}],2020-08-28 14:03:06+00:00,2020-09-03 14:59:37+00:00,521791.0,"6 days, 0:56:31",[],"[{'commit_sha': 'ea16195a3f8e87ed425a5aabd4038c823720512d', 'committer_username': 'Aniket21mathur', 'committer_name': 'Aniket Mathur', 'committer_email': 'aniket.m@rigi.club', 'commit_date': datetime.datetime(2018, 1, 4, 6, 23, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c8862d29a1a655fe816b7a198745cc9218fed0ec', 'committer_username': 'Aniket21mathur', 'committer_name': 'Aniket Mathur', 'committer_email': 'aniket.m@rigi.club', 'commit_date': datetime.datetime(2018, 1, 4, 6, 23, 57, tzinfo=datetime.timezone.utc)}]",Aniket Mathur,35092582,aniket.m@rigi.club,User,,35,,119,133
425958313,Set up the project and add plugin modules with basic functionality,"This Pr implements a basic working plugin, able to generate a `chpl` file. I have followed the general structure that other plugins have. The plugin files include -

- `protoc-gen-chpl.cc` - Calls the `PluginMain` function which handles the `CodeGeneratorRequest` and `CodeGeneratorResponse`, results in a generation of a `protoc-gen-chpl` binary file which is passed to `protoc` compiler.

- `generator.cc/hh` - It contains an inheritance class of `CodeGenerator` protobuf compiler class. Handles the generation of the output stream and calls the reflection class to generate the content of the output file.

- `reflection_class.cc/hh` - Initializes the content generation of the output file, will have basic classes to write descriptor and introductory code, make a call to the message class for each message.

- `message.cc/hh` - Supports classes to write a reflection of each message, make calls to the field reflection generators. 

- `field_base.cc/hh` - Set basic field properties that are common to all types of fields(required, optional, repeated, any, oneOf). Its base class is inherited by the various field type generator classes.

- `primitive_field.cc/hh` - Generate reflection of a message field, an inheritance of `field_base` class.

- `helpers.cc/hh` - Have helpers functions for the plugin, like converting to camel case naming convention.

To start with, these files currently have a very basic functionality implemented, just to support `int32` and `int64` types.

I have generated some [example](https://github.com/Aniket21mathur/ProtocolBuffers/tree/master/chapel/build) `chpl` files from these [source](https://github.com/Aniket21mathur/ProtocolBuffers/tree/master/chapel/src) files using the protoc compiler.

`protoc -I=src --chpl_out=build src/somefile.proto`

This pr also add `autotools`support  to build the project.

**I have not focused much on what should be the generated chapel code for `int` types, there is a little more discussion needed for that. My primary motive was to set up the architecture to let us begin with the code generation process**",True,2,https://api.github.com/repos/Aniket21mathur/Chapel-protobuf/pulls/2,https://github.com/Aniket21mathur/Chapel-protobuf/pull/2,closed,605,0,18,10,5,6,0,0,[],2020-06-01 12:46:33+00:00,2020-06-04 20:24:54+00:00,286701.0,"3 days, 7:38:21","[{'comment_id': 435445237, 'comment_body': ""We should be sure to verify that we don't get sent a file without an extension (or with an extension other than `.proto`)"", 'comment_created': datetime.datetime(2020, 6, 4, 17, 58, 52, tzinfo=datetime.timezone.utc), 'commenter': 'lydia-duncan', 'type': 'User'}, {'comment_id': 435445825, 'comment_body': ""This function doesn't seem to be used outside of a helper function that is not declared here.  Should its declaration also be internal to helpers.cc?"", 'comment_created': datetime.datetime(2020, 6, 4, 17, 59, 56, tzinfo=datetime.timezone.utc), 'commenter': 'lydia-duncan', 'type': 'User'}, {'comment_id': 435451840, 'comment_body': 'This seems to always result in the .chpl file being placed in the current directory?  I may not have followed the call chain back far enough, though', 'comment_created': datetime.datetime(2020, 6, 4, 18, 10, 34, tzinfo=datetime.timezone.utc), 'commenter': 'lydia-duncan', 'type': 'User'}, {'comment_id': 435496284, 'comment_body': 'No, the placement of the `.chpl` file is decided by the `GeneratorContext` object which deals with the output path passed to the `protoc` compiler as\r\n\r\n`protoc --chpl_out=/output/dir/ a.proto`\r\n\r\nThis is an internal implementation in `google/protobuf/compiler/code_generator.cc`. ', 'comment_created': datetime.datetime(2020, 6, 4, 19, 22, 24, tzinfo=datetime.timezone.utc), 'commenter': 'Aniket21mathur', 'type': 'User'}, {'comment_id': 435497185, 'comment_body': 'Yes, we can remove that. Thanks for pointing out :)', 'comment_created': datetime.datetime(2020, 6, 4, 19, 24, 6, tzinfo=datetime.timezone.utc), 'commenter': 'Aniket21mathur', 'type': 'User'}, {'comment_id': 435516537, 'comment_body': 'I added a check in 38323fd, please have a look', 'comment_created': datetime.datetime(2020, 6, 4, 20, 2, 6, tzinfo=datetime.timezone.utc), 'commenter': 'Aniket21mathur', 'type': 'User'}]","[{'commit_sha': '82c529090ec9845ac8549939ddb928bf50d97c6d', 'committer_username': 'Aniket21mathur', 'committer_name': 'Aniket Mathur', 'committer_email': 'aniket.m@rigi.club', 'commit_date': datetime.datetime(2018, 1, 4, 6, 23, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '03de319ae8397dda6c43c877370954b6acc42042', 'committer_username': 'Aniket21mathur', 'committer_name': 'Aniket Mathur', 'committer_email': 'aniket.m@rigi.club', 'commit_date': datetime.datetime(2018, 1, 4, 6, 23, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1a7cd83079ca6988917a80b0d723dcc9d1d2a295', 'committer_username': 'Aniket21mathur', 'committer_name': 'Aniket Mathur', 'committer_email': 'aniket.m@rigi.club', 'commit_date': datetime.datetime(2018, 1, 4, 6, 23, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'af3069505ebbfec2982a52eb21862ce5262433bc', 'committer_username': 'Aniket21mathur', 'committer_name': 'Aniket Mathur', 'committer_email': 'aniket.m@rigi.club', 'commit_date': datetime.datetime(2018, 1, 4, 6, 23, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '784c4520fc12b62c24e6970e7f9df1878a5bc99c', 'committer_username': 'Aniket21mathur', 'committer_name': 'Aniket Mathur', 'committer_email': 'aniket.m@rigi.club', 'commit_date': datetime.datetime(2018, 1, 4, 6, 23, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5c51e0aa8999fc7690ab1bda74754a4615f896c9', 'committer_username': 'Aniket21mathur', 'committer_name': 'Aniket Mathur', 'committer_email': 'aniket.m@rigi.club', 'commit_date': datetime.datetime(2018, 1, 4, 6, 23, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '704d4403c558b4eeba671ffc81ebb6c7bec69df6', 'committer_username': 'Aniket21mathur', 'committer_name': 'Aniket Mathur', 'committer_email': 'aniket.m@rigi.club', 'commit_date': datetime.datetime(2018, 1, 4, 6, 23, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd9cccff697abed11c572e9539caeaf149af8911b', 'committer_username': 'Aniket21mathur', 'committer_name': 'Aniket Mathur', 'committer_email': 'aniket.m@rigi.club', 'commit_date': datetime.datetime(2018, 1, 4, 6, 23, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3cf18043a10ed9f01497dd01e50380374ced81ac', 'committer_username': 'Aniket21mathur', 'committer_name': 'Aniket Mathur', 'committer_email': 'aniket.m@rigi.club', 'commit_date': datetime.datetime(2018, 1, 4, 6, 23, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '38323fd6e77a37c7b49f2258083473d2890a32c7', 'committer_username': 'Aniket21mathur', 'committer_name': 'Aniket Mathur', 'committer_email': 'aniket.m@rigi.club', 'commit_date': datetime.datetime(2018, 1, 4, 6, 23, 57, tzinfo=datetime.timezone.utc)}]",Aniket Mathur,35092582,aniket.m@rigi.club,User,,35,,119,133
428074183,Add setup script for the project,@astatide @lydia-duncan @mppf ,True,5,https://api.github.com/repos/Aniket21mathur/Chapel-protobuf/pulls/5,https://github.com/Aniket21mathur/Chapel-protobuf/pull/5,closed,32,0,1,3,6,0,0,0,[],2020-06-04 20:36:45+00:00,2020-06-15 15:52:58+00:00,933373.0,"10 days, 19:16:13",[],"[{'commit_sha': '1fa6240d10235ca3e2bc5b9ae1a8615d3e96e287', 'committer_username': 'Aniket21mathur', 'committer_name': 'Aniket Mathur', 'committer_email': 'aniket.m@rigi.club', 'commit_date': datetime.datetime(2018, 1, 4, 6, 23, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7ef347c31507042290c9d69db1609d1f2b2a9d61', 'committer_username': 'Aniket21mathur', 'committer_name': 'Aniket Mathur', 'committer_email': 'aniket.m@rigi.club', 'commit_date': datetime.datetime(2018, 1, 4, 6, 23, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2f420adda5f9d44ef1113bad7e34dee91ddabbfc', 'committer_username': 'Aniket21mathur', 'committer_name': 'Aniket Mathur', 'committer_email': 'aniket.m@rigi.club', 'commit_date': datetime.datetime(2018, 1, 4, 6, 23, 57, tzinfo=datetime.timezone.utc)}]",Aniket Mathur,35092582,aniket.m@rigi.club,User,,35,,119,133
437438569,Set up testing structure,"There are two types of tests that are performed-
- end to end (with Python as the other language)
- comparing serialize/deserialize output to expected byte stream",True,10,https://api.github.com/repos/Aniket21mathur/Chapel-protobuf/pulls/10,https://github.com/Aniket21mathur/Chapel-protobuf/pull/10,closed,182,21,10,2,2,0,0,0,[],2020-06-20 17:27:16+00:00,2020-06-29 17:29:22+00:00,777726.0,"9 days, 0:02:06",[],"[{'commit_sha': 'e5633539298354380256f8c50502da6408225616', 'committer_username': 'Aniket21mathur', 'committer_name': 'Aniket Mathur', 'committer_email': 'aniket.m@rigi.club', 'commit_date': datetime.datetime(2018, 1, 4, 6, 23, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '672b602ab8ddb5fbf5b11886d3006eb780d1a8af', 'committer_username': 'Aniket21mathur', 'committer_name': 'Aniket Mathur', 'committer_email': 'aniket.m@rigi.club', 'commit_date': datetime.datetime(2018, 1, 4, 6, 23, 57, tzinfo=datetime.timezone.utc)}]",Aniket Mathur,35092582,aniket.m@rigi.club,User,,35,,119,133
434642669,Add support for serializing/deserializing `int64` and `int32` type,"[File(https://github.com/Aniket21mathur/ProtocolBuffers/blob/master/chapel/integer/version/integer64v2.chpl) generated when [this](https://github.com/Aniket21mathur/ProtocolBuffers/blob/master/chapel/integer/integer64.proto) proto file is passed to the protoc compiler along with the chapel plugin.

**Note- The name of the output file is different, I renamed it after generation. The ideal file name will be integer64.chpl**",True,8,https://api.github.com/repos/Aniket21mathur/Chapel-protobuf/pulls/8,https://github.com/Aniket21mathur/Chapel-protobuf/pull/8,closed,94,153,19,5,3,0,0,0,[],2020-06-15 16:18:52+00:00,2020-06-20 16:51:45+00:00,433973.0,"5 days, 0:32:53",[],"[{'commit_sha': 'e5394cfef36e6deef9813fcfb27aee6d8f6f11d3', 'committer_username': 'Aniket21mathur', 'committer_name': 'Aniket Mathur', 'committer_email': 'aniket.m@rigi.club', 'commit_date': datetime.datetime(2018, 1, 4, 6, 23, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2ba088d4d990d0ae91e231bcf95c2c2dc2de81c6', 'committer_username': 'Aniket21mathur', 'committer_name': 'Aniket Mathur', 'committer_email': 'aniket.m@rigi.club', 'commit_date': datetime.datetime(2018, 1, 4, 6, 23, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '43b78113451471156680241c091dab2e99b20ef6', 'committer_username': 'Aniket21mathur', 'committer_name': 'Aniket Mathur', 'committer_email': 'aniket.m@rigi.club', 'commit_date': datetime.datetime(2018, 1, 4, 6, 23, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '33024871a1bbbc6f778a3f9116285f9c8b5d1769', 'committer_username': 'Aniket21mathur', 'committer_name': 'Aniket Mathur', 'committer_email': 'aniket.m@rigi.club', 'commit_date': datetime.datetime(2018, 1, 4, 6, 23, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd3da29efba366fa0b3a150cde39afe3d70205b69', 'committer_username': 'Aniket21mathur', 'committer_name': 'Aniket Mathur', 'committer_email': 'aniket.m@rigi.club', 'commit_date': datetime.datetime(2018, 1, 4, 6, 23, 57, tzinfo=datetime.timezone.utc)}]",Aniket Mathur,35092582,aniket.m@rigi.club,User,,35,,119,133
443919371,Add support for basic proto types,"Add support for other proto field types- DOUBLE, FLOAT, UINT64, FIXED64, FIXED32, BOOL , STRING , BYTES, UINT32, SFIXED32, SFIXED64, SINT32, SINT64.

Src file -> https://github.com/Aniket21mathur/ProtocolBuffers/blob/master/chapel/src/types.proto
Output file-> https://github.com/Aniket21mathur/ProtocolBuffers/blob/master/chapel/build/types.chpl",True,11,https://api.github.com/repos/Aniket21mathur/Chapel-protobuf/pulls/11,https://github.com/Aniket21mathur/Chapel-protobuf/pull/11,closed,609,108,15,22,3,36,0,0,[],2020-07-03 08:14:13+00:00,2020-07-09 14:56:11+00:00,542518.0,"6 days, 6:41:58","[{'comment_id': 450269049, 'comment_body': ""This does not seem right to me. Anyway in general I don't think this code should be calling readBytes / writeBytes; rather the channel should be configured for binary I/O (and specify the appropriate endianness) and then this code should just do read and write. "", 'comment_created': datetime.datetime(2020, 7, 6, 14, 40, 43, tzinfo=datetime.timezone.utc), 'commenter': 'mppf', 'type': 'User'}, {'comment_id': 450293394, 'comment_body': 'I guess you are pointing towards something like this ->\r\n```\r\nvar f = open(""out"", iomode.cw, style = new iostyle(binary=1));\r\n```\r\nIf our current implementation is seen, the channel passed to the serialize/unserialize procs is controlled by the user. Is there any other way we can achieve the binary configuration?', 'comment_created': datetime.datetime(2020, 7, 6, 15, 15, 50, tzinfo=datetime.timezone.utc), 'commenter': 'Aniket21mathur', 'type': 'User'}, {'comment_id': 450330396, 'comment_body': ""Yes, there are two ways.\r\n\r\nFirst, one can call 'set_style' - see https://github.com/chapel-lang/chapel/blob/c54a5da1fec9f5d889a805c54485d728db6dc467/modules/standard/IO.chpl#L2443 and https://github.com/chapel-lang/chapel/blob/c54a5da1fec9f5d889a805c54485d728db6dc467/modules/standard/IO.chpl#L2459 . You will want to lock the channel before doing these (and unlock it after) - see https://github.com/chapel-lang/chapel/blob/c54a5da1fec9f5d889a805c54485d728db6dc467/modules/standard/IO.chpl#L2193 . I think it would make sense to lock the channel for the entire serialization / deserialization operation.\r\n\r\nSecond, it's possible to create a new channel based upon another existing channel. For example see https://github.com/chapel-lang/chapel/blob/c54a5da1fec9f5d889a805c54485d728db6dc467/modules/standard/IO.chpl#L3162-L3169 . This is relevant because the Chapel channel types incudes a `param` (known at compile time) indicating binary I/O and endianness (see code starting at https://github.com/chapel-lang/chapel/blob/c54a5da1fec9f5d889a805c54485d728db6dc467/modules/standard/IO.chpl#L461 ) . So, it is possible to wrap the existing channel in a binary-big-endian channel, for example. This can be faster and allows us to skip even code handling locking. However there isn't a good user-facing way to do it yet (although I think such a thing would be reasonable to add to the I/O system; if we choose this path, the protobuf code will use some internal details of channel - or we have to add the user-facing thing to IO.chpl soon)."", 'comment_created': datetime.datetime(2020, 7, 6, 16, 12, 51, tzinfo=datetime.timezone.utc), 'commenter': 'mppf', 'type': 'User'}, {'comment_id': 450332842, 'comment_body': 'Oh, another interesting thing about the second option, is that it would allow all of your functions working with channels to have a concrete type.', 'comment_created': datetime.datetime(2020, 7, 6, 16, 16, 39, tzinfo=datetime.timezone.utc), 'commenter': 'mppf', 'type': 'User'}, {'comment_id': 450333309, 'comment_body': ""A third option is to use `writef`/`readf`. In practice this will just modify the channel's style to indicate binary I/O for each operation. (You could do that also - modify the style per-operation)."", 'comment_created': datetime.datetime(2020, 7, 6, 16, 17, 27, tzinfo=datetime.timezone.utc), 'commenter': 'mppf', 'type': 'User'}, {'comment_id': 451001122, 'comment_body': '@mppf I think now we can make the `ch` argument concrete? Something like this ->\r\n\r\n`proc unsignedVarintConsume(ch: channel(false,iokind.little,false)): (uint, int) throws {`', 'comment_created': datetime.datetime(2020, 7, 7, 16, 42, 29, tzinfo=datetime.timezone.utc), 'commenter': 'Aniket21mathur', 'type': 'User'}, {'comment_id': 451069753, 'comment_body': 'Yes', 'comment_created': datetime.datetime(2020, 7, 7, 18, 43, 9, tzinfo=datetime.timezone.utc), 'commenter': 'mppf', 'type': 'User'}, {'comment_id': 451072170, 'comment_body': 'Yup did that :+1: ', 'comment_created': datetime.datetime(2020, 7, 7, 18, 47, 44, tzinfo=datetime.timezone.utc), 'commenter': 'Aniket21mathur', 'type': 'User'}, {'comment_id': 451461283, 'comment_body': ""It is not a big deal but I think this is better written\r\n```\r\nvar zero: uint(8);\r\nch.write(zero);\r\n```\r\n\r\nI understand that is longer (it's just that it keeps the code using simpler I/O)."", 'comment_created': datetime.datetime(2020, 7, 8, 11, 7, 10, tzinfo=datetime.timezone.utc), 'commenter': 'mppf', 'type': 'User'}, {'comment_id': 451462413, 'comment_body': 'It might be nice to use type aliases for this channel type, at the top of the file, like\r\n```\r\ntype writingChannel = channel(true,iokind.little,false);\r\ntype readingChannel = channel(false,iokind.little,false);\r\n```\r\nthis will reduce future maintenance work if these types change for some reason.', 'comment_created': datetime.datetime(2020, 7, 8, 11, 9, 40, tzinfo=datetime.timezone.utc), 'commenter': 'mppf', 'type': 'User'}, {'comment_id': 451463147, 'comment_body': 'This will throw if the string is not UTF-8. Is that expected behavior for protocol buffer messages? (If this is a complex question to answer, feel free to add a TODO to check in your task list).', 'comment_created': datetime.datetime(2020, 7, 8, 11, 11, 12, tzinfo=datetime.timezone.utc), 'commenter': 'mppf', 'type': 'User'}, {'comment_id': 451463795, 'comment_body': 'This can just be `ch.write(newByte)` but more generally this is just outputting the 32-bit value in big-endian format. Which makes me wonder if iokind.big would be a better setting for the channels? If iokind.big is the setting, then this would just be `ch.write(val)`.\r\n\r\nThis comment applies similarly to all of the fixed append and consume functions.', 'comment_created': datetime.datetime(2020, 7, 8, 11, 12, 33, tzinfo=datetime.timezone.utc), 'commenter': 'mppf', 'type': 'User'}, {'comment_id': 451466572, 'comment_body': ""I was expecting that this code would be in the user-facing Chapel module supporting protobuf. Anyway it would be better if we can find a way to avoid putting it in the protobuf compiler plugin because that makes it harder to update and it's relatively strange code.\r\n\r\nPut another way, in an expected use case, where is writeToOutputFile called? Is it possible to handle the locking and making the binary channel at that point?\r\n\r\nIf not, is it possible to put these details in a helper function?"", 'comment_created': datetime.datetime(2020, 7, 8, 11, 18, 20, tzinfo=datetime.timezone.utc), 'commenter': 'mppf', 'type': 'User'}, {'comment_id': 451600818, 'comment_body': '> Put another way, in an expected use case, where is writeToOutputFile called\r\n\r\n`writeToOutputFile` is present in the chapel code generated through the plugin. It is called by the user in a `write.chpl` file (for e.g) to get the serialized values written to an `out` file. Example ->\r\n\r\n```\r\nuse repeatedfield;\r\nuse IO;\r\n\r\nvar file = open(""out"", iomode.cw);\r\nvar writingChannel = file.writer();\r\n\r\nvar messageObj = new repeatedField();\r\n\r\nmessageObj.ui64.append(1);\r\nmessageObj.ui64.append(2445464);\r\n\r\nmessageObj.writeToOutputFile(writingChannel);\r\n```\r\n\r\n> I was expecting that this code would be in the user-facing Chapel module supporting protobuf.\r\n\r\nI don\'t see a way of doing this with concrete functions, the `ch` channel from  `writeToOutputFile ` is passed directly to Append functions present in the user-facing Chapel module.\r\n\r\nI also see that https://github.com/chapel-lang/chapel/pull/16032 is merged, can\'t we directly use the user exposed IO function for creating the new channel?', 'comment_created': datetime.datetime(2020, 7, 8, 14, 44, 20, tzinfo=datetime.timezone.utc), 'commenter': 'Aniket21mathur', 'type': 'User'}, {'comment_id': 451607193, 'comment_body': '> This comment applies similarly to all of the fixed append and consume functions.\r\n\r\nI am also a bit confused regarding the encoding/decoding of fixed types. The protobuf-encoding guide states them to be encoded as little-endian, but I saw a similar kind of implementation in Go protbuf library by Google(https://github.com/protocolbuffers/protobuf-go/blob/master/encoding/protowire/wire.go#L373). ', 'comment_created': datetime.datetime(2020, 7, 8, 14, 52, 49, tzinfo=datetime.timezone.utc), 'commenter': 'Aniket21mathur', 'type': 'User'}, {'comment_id': 451620661, 'comment_body': 'From the protobuf encoding guide for [Strings](https://developers.google.com/protocol-buffers/docs/encoding#strings)\r\n\r\n> The red bytes are the UTF8 of ""testing"". The key here is 0x12 →\r\n\r\nI understand that string type expects users to pass a UTF-8 value, other values can be handles through bytes type. Though I am not 100% sure on this. ', 'comment_created': datetime.datetime(2020, 7, 8, 15, 11, tzinfo=datetime.timezone.utc), 'commenter': 'Aniket21mathur', 'type': 'User'}, {'comment_id': 451620921, 'comment_body': 'Yes! Agreed, will do that.', 'comment_created': datetime.datetime(2020, 7, 8, 15, 11, 22, tzinfo=datetime.timezone.utc), 'commenter': 'Aniket21mathur', 'type': 'User'}, {'comment_id': 451621284, 'comment_body': 'Yeah, I will make the change :)', 'comment_created': datetime.datetime(2020, 7, 8, 15, 11, 48, tzinfo=datetime.timezone.utc), 'commenter': 'Aniket21mathur', 'type': 'User'}, {'comment_id': 451635691, 'comment_body': '> This can just be `ch.write(newByte)`\r\n\r\nOhh! I missed that, will change it :+1: ', 'comment_created': datetime.datetime(2020, 7, 8, 15, 31, 53, tzinfo=datetime.timezone.utc), 'commenter': 'Aniket21mathur', 'type': 'User'}, {'comment_id': 451715686, 'comment_body': ""> I also see that chapel-lang/chapel#16032 is merged, can't we directly use the user exposed IO function for creating the new channel?\r\n\r\nYes\r\n\r\n> I don't see a way of doing this with concrete functions, the ch channel from writeToOutputFile is passed directly to Append functions present in the user-facing Chapel module.\r\n\r\nDoes that mean you do see a way of doing it with generic functions?\r\n\r\n(e.g. message.writeToOutputFile calls Encoding.helpWriteToOutputFile(message, channel) which calls message.doWriteToOutputFile(channel) ?)"", 'comment_created': datetime.datetime(2020, 7, 8, 17, 37, 43, tzinfo=datetime.timezone.utc), 'commenter': 'mppf', 'type': 'User'}, {'comment_id': 451716553, 'comment_body': '> I am also a bit confused regarding the encoding/decoding of fixed types. The protobuf-encoding guide states them to be encoded as little-endian, but I saw a similar kind of implementation in Go protbuf library by Google(https://github.com/protocolbuffers/protobuf-go/blob/master/encoding/protowire/wire.go#L373).\r\n\r\nThat go implementation is writing it little endian. So is your loop here, I think I read it wrong before. Anyway you should be able to just write `ch.write(val)`. Give it a try?', 'comment_created': datetime.datetime(2020, 7, 8, 17, 39, 15, tzinfo=datetime.timezone.utc), 'commenter': 'mppf', 'type': 'User'}, {'comment_id': 451718151, 'comment_body': 'I think protocol buffer strings are always UTF-8 - see https://developers.google.com/protocol-buffers/docs/proto3#scalar \r\n\r\n> \xa0 A string must always contain UTF-8 encoded or 7-bit ASCII text, and cannot be longer than 2^32.\r\n\r\n\r\n\r\n', 'comment_created': datetime.datetime(2020, 7, 8, 17, 41, 51, tzinfo=datetime.timezone.utc), 'commenter': 'mppf', 'type': 'User'}, {'comment_id': 452109464, 'comment_body': 'Yes! Agreed.', 'comment_created': datetime.datetime(2020, 7, 9, 10, 7, 24, tzinfo=datetime.timezone.utc), 'commenter': 'Aniket21mathur', 'type': 'User'}, {'comment_id': 452115162, 'comment_body': 'Yes, it works!', 'comment_created': datetime.datetime(2020, 7, 9, 10, 18, 16, tzinfo=datetime.timezone.utc), 'commenter': 'Aniket21mathur', 'type': 'User'}, {'comment_id': 452136606, 'comment_body': '@mppf I made the changes in 382a749 and updated the output file in the pr message. Please review.', 'comment_created': datetime.datetime(2020, 7, 9, 11, 1, 19, tzinfo=datetime.timezone.utc), 'commenter': 'Aniket21mathur', 'type': 'User'}, {'comment_id': 452216715, 'comment_body': 'The example output looks good. It will be relatively easy to add similar methods for reading from / writing to bytes using this mechanism!', 'comment_created': datetime.datetime(2020, 7, 9, 13, 28, 3, tzinfo=datetime.timezone.utc), 'commenter': 'mppf', 'type': 'User'}, {'comment_id': 452218120, 'comment_body': 'this and many other `var wireType` or `const wireTiype` are unused variables.\r\n\r\nThat might mean you can remove the `wireTypes` consts at the top, too.', 'comment_created': datetime.datetime(2020, 7, 9, 13, 30, 9, tzinfo=datetime.timezone.utc), 'commenter': 'mppf', 'type': 'User'}, {'comment_id': 452219793, 'comment_body': ""It's not something you have to change for this PR, but I wonder if `appendUnsignedVarint` would be a nicer method name. Not a big deal either way right now. (But, while these functions are not really intended to be user-facing, they do tie the protocol buffer compiler to particular versions of this module, so they should be stable). I recommend we revisit these names when we do the API review."", 'comment_created': datetime.datetime(2020, 7, 9, 13, 32, 26, tzinfo=datetime.timezone.utc), 'commenter': 'mppf', 'type': 'User'}, {'comment_id': 452222100, 'comment_body': 'This should still lock and unlock the channel, right?\r\n\r\n```\r\nch.lock();\r\ndefer { ch.unlock(); }\r\nvar binCh: channel(writing=true, kind=iokind.little, locking=false) = ch;\r\n```', 'comment_created': datetime.datetime(2020, 7, 9, 13, 35, 56, tzinfo=datetime.timezone.utc), 'commenter': 'mppf', 'type': 'User'}, {'comment_id': 452222229, 'comment_body': 'needs to lock/unlock as well', 'comment_created': datetime.datetime(2020, 7, 9, 13, 36, 7, tzinfo=datetime.timezone.utc), 'commenter': 'mppf', 'type': 'User'}, {'comment_id': 452223178, 'comment_body': ""Shouldn't this function be marked `throws` ? As well as the read version and the code calling it generated by the protobuf compiler?"", 'comment_created': datetime.datetime(2020, 7, 9, 13, 37, 26, tzinfo=datetime.timezone.utc), 'commenter': 'mppf', 'type': 'User'}, {'comment_id': 452223341, 'comment_body': 'Yes! The output is generated from the plugin itself. I think now we are good to go with this pr?', 'comment_created': datetime.datetime(2020, 7, 9, 13, 37, 41, tzinfo=datetime.timezone.utc), 'commenter': 'Aniket21mathur', 'type': 'User'}, {'comment_id': 452223960, 'comment_body': ""I'm not confident than Encoding will remain the name of this module but I recommend that we leave that choice for the API review. (In particular I think it probably should mention protobuf somewhere in the name)."", 'comment_created': datetime.datetime(2020, 7, 9, 13, 38, 40, tzinfo=datetime.timezone.utc), 'commenter': 'mppf', 'type': 'User'}, {'comment_id': 452266117, 'comment_body': 'Yes, agreed. I have also opened an issue for the same(https://github.com/Aniket21mathur/Chapel-protobuf/issues/12).', 'comment_created': datetime.datetime(2020, 7, 9, 14, 37, 28, tzinfo=datetime.timezone.utc), 'commenter': 'Aniket21mathur', 'type': 'User'}, {'comment_id': 452268839, 'comment_body': 'Hmm..I would rather prefer keeping these for now, there are used when we ensure backward compatibility, though we can remove them anytime if they turn out to be useless.', 'comment_created': datetime.datetime(2020, 7, 9, 14, 41, 10, tzinfo=datetime.timezone.utc), 'commenter': 'Aniket21mathur', 'type': 'User'}, {'comment_id': 452273424, 'comment_body': 'Sure, it makes sense to keep them in this PR if you plan to use them in a future PR.', 'comment_created': datetime.datetime(2020, 7, 9, 14, 47, 4, tzinfo=datetime.timezone.utc), 'commenter': 'mppf', 'type': 'User'}]","[{'commit_sha': '6a2f937ff13ead769b59a3507581a6f947ba7e4b', 'committer_username': 'Aniket21mathur', 'committer_name': 'Aniket Mathur', 'committer_email': 'aniket.m@rigi.club', 'commit_date': datetime.datetime(2018, 1, 4, 6, 23, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4f2046d6f9feb8c5d7ced24865b5679ff7849096', 'committer_username': 'Aniket21mathur', 'committer_name': 'Aniket Mathur', 'committer_email': 'aniket.m@rigi.club', 'commit_date': datetime.datetime(2018, 1, 4, 6, 23, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c806b95ddff55ebfd95df8f20dff6dd47bbf0778', 'committer_username': 'Aniket21mathur', 'committer_name': 'Aniket Mathur', 'committer_email': 'aniket.m@rigi.club', 'commit_date': datetime.datetime(2018, 1, 4, 6, 23, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fceec0c9ab7d2bd75d392a9e935b2386538dd354', 'committer_username': 'Aniket21mathur', 'committer_name': 'Aniket Mathur', 'committer_email': 'aniket.m@rigi.club', 'commit_date': datetime.datetime(2018, 1, 4, 6, 23, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e24116a2026f37f37ca7905c02924b5ea1ee2d53', 'committer_username': 'Aniket21mathur', 'committer_name': 'Aniket Mathur', 'committer_email': 'aniket.m@rigi.club', 'commit_date': datetime.datetime(2018, 1, 4, 6, 23, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a499becc76cc374843745dda00d041944f30b8c8', 'committer_username': 'Aniket21mathur', 'committer_name': 'Aniket Mathur', 'committer_email': 'aniket.m@rigi.club', 'commit_date': datetime.datetime(2018, 1, 4, 6, 23, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8594122412680219649a59aecf37eed9b06f19cc', 'committer_username': 'Aniket21mathur', 'committer_name': 'Aniket Mathur', 'committer_email': 'aniket.m@rigi.club', 'commit_date': datetime.datetime(2018, 1, 4, 6, 23, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '932a6d69b3d2b3b1ffbf67239c24fd1bb9fb2e65', 'committer_username': 'Aniket21mathur', 'committer_name': 'Aniket Mathur', 'committer_email': 'aniket.m@rigi.club', 'commit_date': datetime.datetime(2018, 1, 4, 6, 23, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'af258bde4290b31edf82b822846dccd19e4171ab', 'committer_username': 'Aniket21mathur', 'committer_name': 'Aniket Mathur', 'committer_email': 'aniket.m@rigi.club', 'commit_date': datetime.datetime(2018, 1, 4, 6, 23, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '93ced1e06f27a7880d1e3380b32ce96a6b183711', 'committer_username': 'Aniket21mathur', 'committer_name': 'Aniket Mathur', 'committer_email': 'aniket.m@rigi.club', 'commit_date': datetime.datetime(2018, 1, 4, 6, 23, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd454fd8013d99e2b1d6fe67ab5e617085fc588f5', 'committer_username': 'Aniket21mathur', 'committer_name': 'Aniket Mathur', 'committer_email': 'aniket.m@rigi.club', 'commit_date': datetime.datetime(2018, 1, 4, 6, 23, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b569968d60a1ef16227efcaf2a7c7b2f97fab38a', 'committer_username': 'Aniket21mathur', 'committer_name': 'Aniket Mathur', 'committer_email': 'aniket.m@rigi.club', 'commit_date': datetime.datetime(2018, 1, 4, 6, 23, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5077b4c64fe9839da9c5dd8ecacee07827fc117b', 'committer_username': 'Aniket21mathur', 'committer_name': 'Aniket Mathur', 'committer_email': 'aniket.m@rigi.club', 'commit_date': datetime.datetime(2018, 1, 4, 6, 23, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '709c2fb3d95046b05c0d7d6cebadf4506846975e', 'committer_username': 'Aniket21mathur', 'committer_name': 'Aniket Mathur', 'committer_email': 'aniket.m@rigi.club', 'commit_date': datetime.datetime(2018, 1, 4, 6, 23, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd88f3f35cf68a9584aebb4be576b1845fe6f9366', 'committer_username': 'Aniket21mathur', 'committer_name': 'Aniket Mathur', 'committer_email': 'aniket.m@rigi.club', 'commit_date': datetime.datetime(2018, 1, 4, 6, 23, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2bba98a90abedd1c69e2f228a7373cd64e3fa962', 'committer_username': 'Aniket21mathur', 'committer_name': 'Aniket Mathur', 'committer_email': 'aniket.m@rigi.club', 'commit_date': datetime.datetime(2018, 1, 4, 6, 23, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f4ec4288b7ae9ff7953ad8e85c5ba72e11f57c7e', 'committer_username': 'Aniket21mathur', 'committer_name': 'Aniket Mathur', 'committer_email': 'aniket.m@rigi.club', 'commit_date': datetime.datetime(2018, 1, 4, 6, 23, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '22c854016f2309248fcd98ff08e5fd26ebc787af', 'committer_username': 'Aniket21mathur', 'committer_name': 'Aniket Mathur', 'committer_email': 'aniket.m@rigi.club', 'commit_date': datetime.datetime(2018, 1, 4, 6, 23, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cd285ed2a1a888eecd10440face750431d983582', 'committer_username': 'Aniket21mathur', 'committer_name': 'Aniket Mathur', 'committer_email': 'aniket.m@rigi.club', 'commit_date': datetime.datetime(2018, 1, 4, 6, 23, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '58e71d1f2b9e298f8ee9a76db1bbf7ce5929bffa', 'committer_username': 'Aniket21mathur', 'committer_name': 'Aniket Mathur', 'committer_email': 'aniket.m@rigi.club', 'commit_date': datetime.datetime(2018, 1, 4, 6, 23, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '382a7496d4491df087bd80b82d2ffc1071cee56a', 'committer_username': 'Aniket21mathur', 'committer_name': 'Aniket Mathur', 'committer_email': 'aniket.m@rigi.club', 'commit_date': datetime.datetime(2018, 1, 4, 6, 23, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2cb0252b73fc52a1187c64a6308babdeebf7efdc', 'committer_username': 'Aniket21mathur', 'committer_name': 'Aniket Mathur', 'committer_email': 'aniket.m@rigi.club', 'commit_date': datetime.datetime(2018, 1, 4, 6, 23, 57, tzinfo=datetime.timezone.utc)}]",Aniket Mathur,35092582,aniket.m@rigi.club,User,,35,,119,133
446928211,Add support for package specifier,"A proto `package` name, if specified, is used as a module/file name for the generated chapel file, otherwise the proto file name is used as a default.

Examples-

With package [proto](https://github.com/Aniket21mathur/ProtocolBuffers/blob/master/chapel/src/with_package.proto) file - Corresponding [generated](https://github.com/Aniket21mathur/ProtocolBuffers/blob/master/chapel/build/my_Package_one.chpl) file.

Without package [proto](https://github.com/Aniket21mathur/ProtocolBuffers/blob/master/chapel/src/without_package.proto) file - Corresponding [generated](https://github.com/Aniket21mathur/ProtocolBuffers/blob/master/chapel/build/without_package.chpl) file.",True,13,https://api.github.com/repos/Aniket21mathur/Chapel-protobuf/pulls/13,https://github.com/Aniket21mathur/Chapel-protobuf/pull/13,closed,43,31,5,3,2,21,0,0,[],2020-07-09 15:17:58+00:00,2020-07-14 16:35:45+00:00,436667.0,"5 days, 1:17:47","[{'comment_id': 452299784, 'comment_body': ""I am not so sure about removing underscores in the name. Is this something we've talked about before? I have thought it would just have the package name - provided there are no illegal characters in the filename."", 'comment_created': datetime.datetime(2020, 7, 9, 15, 23, 7, tzinfo=datetime.timezone.utc), 'commenter': 'mppf', 'type': 'User'}, {'comment_id': 452301013, 'comment_body': ""I'm curious if protobuf compilers in other languages do this sort of thing."", 'comment_created': datetime.datetime(2020, 7, 9, 15, 24, 53, tzinfo=datetime.timezone.utc), 'commenter': 'mppf', 'type': 'User'}, {'comment_id': 452311742, 'comment_body': ""> I am not so sure about removing underscores in the name. Is this something we've talked about before?\r\n\r\nNo, I don't think so. While removing underscores I had in mind the general camel case convention followed in Chapel. I generally take `_` to be used for separating words, e.g - my_package and in Chapel we use camel case for that(myPackage), so I thought it might be useful to have underscores get converted.  \r\n\r\n> provided there are no illegal characters in the filename.\r\n\r\nNow, I am taking only alphanumeric chars to be valid chars. What other characters can we consider as valid(or some that we can consider invalid?)?"", 'comment_created': datetime.datetime(2020, 7, 9, 15, 40, 13, tzinfo=datetime.timezone.utc), 'commenter': 'Aniket21mathur', 'type': 'User'}, {'comment_id': 452314116, 'comment_body': ""It seems like this should use the same pathway as the code in GetOutputFile, so changes don't need to be made to two places in the future"", 'comment_created': datetime.datetime(2020, 7, 9, 15, 43, 42, tzinfo=datetime.timezone.utc), 'commenter': 'lydia-duncan', 'type': 'User'}, {'comment_id': 452314422, 'comment_body': 'Minor nit: the spacing in this call is a bit off', 'comment_created': datetime.datetime(2020, 7, 9, 15, 44, 9, tzinfo=datetime.timezone.utc), 'commenter': 'lydia-duncan', 'type': 'User'}, {'comment_id': 452315561, 'comment_body': '`-` is a character that could be in a filename that does not work in a module name, off the top of my head', 'comment_created': datetime.datetime(2020, 7, 9, 15, 45, 43, tzinfo=datetime.timezone.utc), 'commenter': 'lydia-duncan', 'type': 'User'}, {'comment_id': 452324289, 'comment_body': 'Yes, makes sense but from the return  of `GetOutputFile` we have to strip `.chpl` out. So I see two options here->\r\n\r\n1) Either modify `GetOutputFile` to just return the base name and we append `.chpl` latter. In this case we can directly use `GetOuputFile` here.\r\n\r\n2) Use `GetOutputFIle`here and strip `.chpl`.\r\n\r\nWhich one do you prefer? ', 'comment_created': datetime.datetime(2020, 7, 9, 15, 59, 12, tzinfo=datetime.timezone.utc), 'commenter': 'Aniket21mathur', 'type': 'User'}, {'comment_id': 452326592, 'comment_body': 'Are you pointing towards the spacing in the `Print` call? Somehow it is looking fine to me :sweat_smile: \r\n\r\nOhh! Or are you talking about the extra line -> no 30?', 'comment_created': datetime.datetime(2020, 7, 9, 16, 2, 55, tzinfo=datetime.timezone.utc), 'commenter': 'Aniket21mathur', 'type': 'User'}, {'comment_id': 452335023, 'comment_body': 'And in our case we want the filename and the module name to be same. :confused: ', 'comment_created': datetime.datetime(2020, 7, 9, 16, 16, 23, tzinfo=datetime.timezone.utc), 'commenter': 'Aniket21mathur', 'type': 'User'}, {'comment_id': 452335872, 'comment_body': 'What about having GetOutputFile rely on a helper function that both places can call, having GetOutputFile merely append `.chpl` onto the result of that so that it still reasonably fulfills its name and purpose?', 'comment_created': datetime.datetime(2020, 7, 9, 16, 17, 47, tzinfo=datetime.timezone.utc), 'commenter': 'lydia-duncan', 'type': 'User'}, {'comment_id': 452337833, 'comment_body': 'I\'m talking about how the ""use Encoding"" string is on a separate line from the start of the call when it seems like it would fit on one line (like line 27 does).  It also seems like it would be better to do a separate call for the second `""\\n""` (to maintain the readability you are going for) or put it in same string (to avoid spreading the contents of the file too much)', 'comment_created': datetime.datetime(2020, 7, 9, 16, 20, 57, tzinfo=datetime.timezone.utc), 'commenter': 'lydia-duncan', 'type': 'User'}, {'comment_id': 452339382, 'comment_body': 'I think we want it to be as reasonably close as possible, and to clearly define the behavior when it would differ.  I do suspect that other languages wrestle with this, so we should try to match those decisions as much as possible (though adjusting for different requirements for names).', 'comment_created': datetime.datetime(2020, 7, 9, 16, 23, 38, tzinfo=datetime.timezone.utc), 'commenter': 'lydia-duncan', 'type': 'User'}, {'comment_id': 452342222, 'comment_body': 'Yes, sounds great! How about GetOuputModule? GetOutputFile calls it and appends .chpl to the output?', 'comment_created': datetime.datetime(2020, 7, 9, 16, 28, 3, tzinfo=datetime.timezone.utc), 'commenter': 'Aniket21mathur', 'type': 'User'}, {'comment_id': 452343233, 'comment_body': 'That sounds like a good idea to me :)', 'comment_created': datetime.datetime(2020, 7, 9, 16, 29, 44, tzinfo=datetime.timezone.utc), 'commenter': 'lydia-duncan', 'type': 'User'}, {'comment_id': 452344127, 'comment_body': 'Ohh! Got it. I will make the changes.', 'comment_created': datetime.datetime(2020, 7, 9, 16, 31, 15, tzinfo=datetime.timezone.utc), 'commenter': 'Aniket21mathur', 'type': 'User'}, {'comment_id': 452353228, 'comment_body': ""> I think we want it to be as reasonably close as possible, and to clearly define the behavior when it would differ.\r\n\r\nBut AFAIK the module name and the file name should be the same? Aren't they?"", 'comment_created': datetime.datetime(2020, 7, 9, 16, 46, 21, tzinfo=datetime.timezone.utc), 'commenter': 'Aniket21mathur', 'type': 'User'}, {'comment_id': 452384889, 'comment_body': 'I have the changes in 1263928, please have a look.', 'comment_created': datetime.datetime(2020, 7, 9, 17, 41, 41, tzinfo=datetime.timezone.utc), 'commenter': 'Aniket21mathur', 'type': 'User'}, {'comment_id': 452419628, 'comment_body': 'Looks great, thanks!', 'comment_created': datetime.datetime(2020, 7, 9, 18, 46, 6, tzinfo=datetime.timezone.utc), 'commenter': 'lydia-duncan', 'type': 'User'}, {'comment_id': 452424180, 'comment_body': ""> But AFAIK the module name and the file name should be the same? Aren't they?\r\n\r\nHmm, maybe this is something that we should discuss more.  I don't know that I have a strong opinion on which way is correct, what's most important to me is that we are consistent with other protobuf compilers and that the behavior is clearly documented so that users know what to expect when they provide a .proto file whose name would not be a valid module name in Chapel.\r\n\r\nOh, and it looks like underscore is the only non alphanumeric character allowed in names, if the [spec](https://chapel-lang.org/docs/latest/language/spec/lexical-structure.html#identifiers) is up to date with the compiler."", 'comment_created': datetime.datetime(2020, 7, 9, 18, 54, 27, tzinfo=datetime.timezone.utc), 'commenter': 'lydia-duncan', 'type': 'User'}, {'comment_id': 452625786, 'comment_body': 'This is how Protobuf Style guide suggests writing package names (https://developers.google.com/protocol-buffers/docs/style#packages)\r\n\r\n> Package name should be in lowercase, and should correspond to the directory hierarchy. e.g., if a file is in my/package/, then the package name should be my.package.\r\n\r\n[Packages and name resolution](https://developers.google.com/protocol-buffers/docs/proto3#packages_and_name_resolution)\r\n\r\n[Packages](https://developers.google.com/protocol-buffers/docs/proto3#packages)', 'comment_created': datetime.datetime(2020, 7, 10, 5, 14, 2, tzinfo=datetime.timezone.utc), 'commenter': 'Aniket21mathur', 'type': 'User'}, {'comment_id': 452639599, 'comment_body': 'I tried playing around with some package names in a proto file and I observe that the `protoc` compiler only allows `_`, `.` and alphanumeric characters in package name and throws for other characters. For example in C++ ->\r\n\r\n```\r\npackage my_package;\r\n```\r\ngives \r\n\r\n```\r\nnamespace my_package {\r\n```\r\nand \r\n\r\n```\r\npackage my.package;\r\n```\r\ngives\r\n\r\n```\r\nnamespace my {\r\nnamespace package {\r\n```\r\n\r\nThe generated file names are always derived from the `proto` file name in other languages.\r\n\r\nIf Chapel only allows `_` we can keep them intact both for module name and the file name. But if user do not specify `package` then there is a need to ensure that the module name does not contain restricted characters. We can include this in the user guide, maybe under a ""Naming of proto files""?', 'comment_created': datetime.datetime(2020, 7, 10, 6, 6, 32, tzinfo=datetime.timezone.utc), 'commenter': 'Aniket21mathur', 'type': 'User'}]","[{'commit_sha': '51058cdaab93d673e2bb435cfc8ecd0f09c83793', 'committer_username': 'Aniket21mathur', 'committer_name': 'Aniket Mathur', 'committer_email': 'aniket.m@rigi.club', 'commit_date': datetime.datetime(2018, 1, 4, 6, 23, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '59abc4fe37623d5252b5212b36553da47bf75f6b', 'committer_username': 'Aniket21mathur', 'committer_name': 'Aniket Mathur', 'committer_email': 'aniket.m@rigi.club', 'commit_date': datetime.datetime(2018, 1, 4, 6, 23, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b5c1946be5569c1dd07be5eec672d637649e082c', 'committer_username': 'Aniket21mathur', 'committer_name': 'Aniket Mathur', 'committer_email': 'aniket.m@rigi.club', 'commit_date': datetime.datetime(2018, 1, 4, 6, 23, 57, tzinfo=datetime.timezone.utc)}]",Aniket Mathur,35092582,aniket.m@rigi.club,User,,35,,119,133
447737361,Handle forward and backward compatibility,"Src -> https://github.com/Aniket21mathur/ProtocolBuffers/blob/master/chapel/src/unknownfield.proto
Out -> https://github.com/Aniket21mathur/ProtocolBuffers/blob/master/chapel/build/unknownfield.chpl",True,15,https://api.github.com/repos/Aniket21mathur/Chapel-protobuf/pulls/15,https://github.com/Aniket21mathur/Chapel-protobuf/pull/15,closed,37,3,2,2,2,3,0,0,[],2020-07-11 08:05:01+00:00,2020-07-14 18:48:40+00:00,297819.0,"3 days, 10:43:39","[{'comment_id': 453805729, 'comment_body': 'Looks like you\'ve got a typo here: missing the last ""n"" in ""unknown""', 'comment_created': datetime.datetime(2020, 7, 13, 17, 18, 7, tzinfo=datetime.timezone.utc), 'commenter': 'lydia-duncan', 'type': 'User'}, {'comment_id': 453806032, 'comment_body': 'It happens at other parts of the PR as well, as a heads up', 'comment_created': datetime.datetime(2020, 7, 13, 17, 18, 38, tzinfo=datetime.timezone.utc), 'commenter': 'lydia-duncan', 'type': 'User'}, {'comment_id': 454497028, 'comment_body': 'Ahhh :sweat_smile: , thanks for pointing out I will fix it!', 'comment_created': datetime.datetime(2020, 7, 14, 16, 47, 41, tzinfo=datetime.timezone.utc), 'commenter': 'Aniket21mathur', 'type': 'User'}]","[{'commit_sha': '35a3c9bc5ee971d6f15f27a62a671d0515b43b9a', 'committer_username': 'Aniket21mathur', 'committer_name': 'Aniket Mathur', 'committer_email': 'aniket.m@rigi.club', 'commit_date': datetime.datetime(2018, 1, 4, 6, 23, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cfd0110774c2a30dc947ad2c0636275a74d0d2fd', 'committer_username': 'Aniket21mathur', 'committer_name': 'Aniket Mathur', 'committer_email': 'aniket.m@rigi.club', 'commit_date': datetime.datetime(2018, 1, 4, 6, 23, 57, tzinfo=datetime.timezone.utc)}]",Aniket Mathur,35092582,aniket.m@rigi.club,User,,35,,119,133
447737178,Support for Repeated fields and separate module for simple fields,"Src file -> https://github.com/Aniket21mathur/ProtocolBuffers/blob/master/chapel/src/repeated.proto
Generated file -> https://github.com/Aniket21mathur/ProtocolBuffers/blob/master/chapel/build/repeated.chpl",True,14,https://api.github.com/repos/Aniket21mathur/Chapel-protobuf/pulls/14,https://github.com/Aniket21mathur/Chapel-protobuf/pull/14,closed,1427,212,21,12,2,12,0,0,[],2020-07-11 08:03:17+00:00,2020-07-18 11:48:57+00:00,618340.0,"7 days, 3:45:40","[{'comment_id': 455213620, 'comment_body': 'Should we keep these helper functions in this module only? I was thinking of making a separate `helper` or `utils` module.', 'comment_created': datetime.datetime(2020, 7, 15, 17, 26, 15, tzinfo=datetime.timezone.utc), 'commenter': 'Aniket21mathur', 'type': 'User'}, {'comment_id': 456514348, 'comment_body': ""Sorry for the delay, I'm mostly hoping either @astatide or @mppf will review this instead of me.\r\n\r\nIn answer to your question, I'd keep helpers close to the code that uses them.  If you make a helper module, I'd want it to be a submodule and/or have a more unique name than `helper` or `utils`, so as not to cause issues with potential programs using the same names in their code."", 'comment_created': datetime.datetime(2020, 7, 17, 15, 27, 49, tzinfo=datetime.timezone.utc), 'commenter': 'lydia-duncan', 'type': 'User'}, {'comment_id': 456585036, 'comment_body': 'Some comments about the goals of this code would be nice here', 'comment_created': datetime.datetime(2020, 7, 17, 17, 44, 47, tzinfo=datetime.timezone.utc), 'commenter': 'mppf', 'type': 'User'}, {'comment_id': 456585600, 'comment_body': 'Can it be called `consumeUnknownField` or something along those lines?', 'comment_created': datetime.datetime(2020, 7, 17, 17, 45, 50, tzinfo=datetime.timezone.utc), 'commenter': 'mppf', 'type': 'User'}, {'comment_id': 456588538, 'comment_body': 'This is fine for now but I expect we will migrate these to one module (maybe with submodules) and then this would just e.g. `use ProtobufProtocolSupport;`.', 'comment_created': datetime.datetime(2020, 7, 17, 17, 51, 33, tzinfo=datetime.timezone.utc), 'commenter': 'mppf', 'type': 'User'}, {'comment_id': 456589504, 'comment_body': ""I'm happy to see tests along these lines, to make sure we can interoperate with the Python protobuf support. But are these actually run automatically yet?"", 'comment_created': datetime.datetime(2020, 7, 17, 17, 53, 21, tzinfo=datetime.timezone.utc), 'commenter': 'mppf', 'type': 'User'}, {'comment_id': 456594194, 'comment_body': 'Yes, these tests run automatically using the [test](https://github.com/Aniket21mathur/Chapel-protobuf/blob/master/test.sh) shell file that I have written. But I am not sure if that would be the best way to integrate the end to end tests with the main chapel repo. ', 'comment_created': datetime.datetime(2020, 7, 17, 18, 1, 46, tzinfo=datetime.timezone.utc), 'commenter': 'Aniket21mathur', 'type': 'User'}, {'comment_id': 456595598, 'comment_body': 'Yes, that sounds good to me. I will keep that in mind :)', 'comment_created': datetime.datetime(2020, 7, 17, 18, 4, 37, tzinfo=datetime.timezone.utc), 'commenter': 'Aniket21mathur', 'type': 'User'}, {'comment_id': 456597434, 'comment_body': ""These helpers are used by the generated code. \r\n\r\n> If you make a helper module, I'd want it to be a submodule and/or have a more unique name than `helper` or `utils`, so as not to cause issues with potential programs using the same names in their code.\r\n\r\nThat makes sense. I will focus on this part when we will integrate the code to the main chapel repo next week :)"", 'comment_created': datetime.datetime(2020, 7, 17, 18, 8, 46, tzinfo=datetime.timezone.utc), 'commenter': 'Aniket21mathur', 'type': 'User'}, {'comment_id': 456597815, 'comment_body': 'Yes in that situation we will need to use `start_test` to run them, somehow. It is possible to write a `sub_test` program that does anything you like and that is one option for running these tests. Another is writing a Chapel program that is a test that runs the right commands to run these.', 'comment_created': datetime.datetime(2020, 7, 17, 18, 9, 38, tzinfo=datetime.timezone.utc), 'commenter': 'mppf', 'type': 'User'}, {'comment_id': 456600112, 'comment_body': 'Yes, I will look into that. Also, we are doing the end testing with Python only, I guess that should be enough to mark the correctness of your encoding/decoding mechanism since it is an official Google implementation. Still, is there any need to test with other languages as well?', 'comment_created': datetime.datetime(2020, 7, 17, 18, 14, 34, tzinfo=datetime.timezone.utc), 'commenter': 'Aniket21mathur', 'type': 'User'}, {'comment_id': 456613554, 'comment_body': 'I think checking just Python is OK. It would present problems only if there are bugs in the Python version that are not also present in other implementations.', 'comment_created': datetime.datetime(2020, 7, 17, 18, 42, 35, tzinfo=datetime.timezone.utc), 'commenter': 'mppf', 'type': 'User'}]","[{'commit_sha': 'e64456755ba670fbd52a77a178342def47b14cd2', 'committer_username': 'Aniket21mathur', 'committer_name': 'Aniket Mathur', 'committer_email': 'aniket.m@rigi.club', 'commit_date': datetime.datetime(2018, 1, 4, 6, 23, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2f3eaa9f7498a6fcbb209b329ae918c748361e96', 'committer_username': 'Aniket21mathur', 'committer_name': 'Aniket Mathur', 'committer_email': 'aniket.m@rigi.club', 'commit_date': datetime.datetime(2018, 1, 4, 6, 23, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1e7add8ea7a0aa80ee5227394e3d872a560fe46c', 'committer_username': 'Aniket21mathur', 'committer_name': 'Aniket Mathur', 'committer_email': 'aniket.m@rigi.club', 'commit_date': datetime.datetime(2018, 1, 4, 6, 23, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '22482ef87fdf2c72eb46020162c094ef1230cc03', 'committer_username': 'Aniket21mathur', 'committer_name': 'Aniket Mathur', 'committer_email': 'aniket.m@rigi.club', 'commit_date': datetime.datetime(2018, 1, 4, 6, 23, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e67b95274998792710303c1d77d070d77dcff3aa', 'committer_username': 'Aniket21mathur', 'committer_name': 'Aniket Mathur', 'committer_email': 'aniket.m@rigi.club', 'commit_date': datetime.datetime(2018, 1, 4, 6, 23, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '38d9fc43106fc5e857741eca604bd2011fa1d348', 'committer_username': 'Aniket21mathur', 'committer_name': 'Aniket Mathur', 'committer_email': 'aniket.m@rigi.club', 'commit_date': datetime.datetime(2018, 1, 4, 6, 23, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '354900cc090c1ef0cbb0076f5f72a22b6f44a132', 'committer_username': 'Aniket21mathur', 'committer_name': 'Aniket Mathur', 'committer_email': 'aniket.m@rigi.club', 'commit_date': datetime.datetime(2018, 1, 4, 6, 23, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '16081c34ae7f28a4b79e200f542a7648ae8abf27', 'committer_username': 'Aniket21mathur', 'committer_name': 'Aniket Mathur', 'committer_email': 'aniket.m@rigi.club', 'commit_date': datetime.datetime(2018, 1, 4, 6, 23, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '041f192c31ddf81ce98c04bba5c051a5617d8331', 'committer_username': 'Aniket21mathur', 'committer_name': 'Aniket Mathur', 'committer_email': 'aniket.m@rigi.club', 'commit_date': datetime.datetime(2018, 1, 4, 6, 23, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '62d73817ae6ad08e2fc6fc35f5d577e1fb4ad179', 'committer_username': 'Aniket21mathur', 'committer_name': 'Aniket Mathur', 'committer_email': 'aniket.m@rigi.club', 'commit_date': datetime.datetime(2018, 1, 4, 6, 23, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '632041b34c1356631dbbc140d303b849032e66ea', 'committer_username': 'Aniket21mathur', 'committer_name': 'Aniket Mathur', 'committer_email': 'aniket.m@rigi.club', 'commit_date': datetime.datetime(2018, 1, 4, 6, 23, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7e6227feddab744f3c56e25dd66409be5d55e046', 'committer_username': 'Aniket21mathur', 'committer_name': 'Aniket Mathur', 'committer_email': 'aniket.m@rigi.club', 'commit_date': datetime.datetime(2018, 1, 4, 6, 23, 57, tzinfo=datetime.timezone.utc)}]",Aniket Mathur,35092582,aniket.m@rigi.club,User,,35,,119,133
452606160,Add support for enums,"This pr adds support for handling `proto` enums, simple and repeated enum fields.

Src -> https://github.com/Aniket21mathur/ProtocolBuffers/blob/master/chapel/src/enums.proto
Output -> https://github.com/Aniket21mathur/ProtocolBuffers/blob/master/chapel/build/enums.chpl",True,20,https://api.github.com/repos/Aniket21mathur/Chapel-protobuf/pulls/20,https://github.com/Aniket21mathur/Chapel-protobuf/pull/20,closed,346,11,19,2,0,0,0,0,[],2020-07-19 14:57:51+00:00,2020-07-20 13:59:07+00:00,82876.0,23:01:16,[],"[{'commit_sha': 'd76525ff528697ca682ccae60337756b69959492', 'committer_username': 'Aniket21mathur', 'committer_name': 'Aniket Mathur', 'committer_email': 'aniket.m@rigi.club', 'commit_date': datetime.datetime(2018, 1, 4, 6, 23, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '31fe42d42447a8fff214eaba6a6738832b471809', 'committer_username': 'Aniket21mathur', 'committer_name': 'Aniket Mathur', 'committer_email': 'aniket.m@rigi.club', 'commit_date': datetime.datetime(2018, 1, 4, 6, 23, 57, tzinfo=datetime.timezone.utc)}]",Aniket Mathur,35092582,aniket.m@rigi.club,User,,35,,119,133
456634878,Add support for Message fields,"Src -> https://github.com/Aniket21mathur/ProtocolBuffers-Examples/blob/master/chapel/src/messageField.proto
Output ->  https://github.com/Aniket21mathur/ProtocolBuffers-Examples/blob/master/chapel/build/messageField.chpl",True,22,https://api.github.com/repos/Aniket21mathur/Chapel-protobuf/pulls/22,https://github.com/Aniket21mathur/Chapel-protobuf/pull/22,closed,350,3,15,5,2,6,0,0,[],2020-07-25 16:22:51+00:00,2020-08-12 05:48:51+00:00,1517160.0,"17 days, 13:26:00","[{'comment_id': 468699288, 'comment_body': ""This doesn't look like it loops, should it?  The other repeatedConsumes seem like they do.  Do you have a test of longer repeated fields?"", 'comment_created': datetime.datetime(2020, 8, 11, 16, 12, 9, tzinfo=datetime.timezone.utc), 'commenter': 'lydia-duncan', 'type': 'User'}, {'comment_id': 468703479, 'comment_body': 'Should the enum repeated case also be using `extend`, like this and the outermost else branch do?', 'comment_created': datetime.datetime(2020, 8, 11, 16, 18, 41, tzinfo=datetime.timezone.utc), 'commenter': 'lydia-duncan', 'type': 'User'}, {'comment_id': 468738922, 'comment_body': ""> This doesn't look like it loops, should it?\r\n\r\nNo, it should not loop. Message types are `lengthDelimited`  types in itself just like `bytes` and `string`. Please see -> https://github.com/Aniket21mathur/Chapel-protobuf/pull/22/files#diff-82681d009c18bffcf9803ad6109f77f8R749. These (bytes, string, and message types)have a different way of appending in repeated fields, the other types need to be wrapped in a `lengthDelimited` type since all repeated fields should be `lengthDelimited`.\r\n\r\nFor message, bytes and string you can observe that we are appending tag multiple times, a new tag with the same field number for each value from the list, while for other types we have a single tag of the same field number for all the values.\r\n\r\nSo in this case instead of having a loop this consume function will be called again and again whenever a `messagetype` of the same field number is found, while for other types the consume function(called once)will have to loop over all the values.\r\n\r\nThese by default length delimited types were the reason, I used `list.extend` in the `readFrom` function for repeated fields.\r\n \r\n\r\n> Do you have a test of longer repeated fields?\r\n\r\nYes, I have tests for longer repeated fields. Not for message types, but for similar bytes and string types."", 'comment_created': datetime.datetime(2020, 8, 11, 17, 16, 15, tzinfo=datetime.timezone.utc), 'commenter': 'Aniket21mathur', 'type': 'User'}, {'comment_id': 468741354, 'comment_body': '> Should the enum repeated case also be using `extend`, like this and the outermost else branch do?\r\n\r\nWe can use extend in `enums` as well. But a one-time assignment will also work, since the Consume function of `enum` is called only once(following the concept from the above comment) and returns encoded values of all fields together.', 'comment_created': datetime.datetime(2020, 8, 11, 17, 20, 22, tzinfo=datetime.timezone.utc), 'commenter': 'Aniket21mathur', 'type': 'User'}, {'comment_id': 468754223, 'comment_body': 'Okay, sounds good :)', 'comment_created': datetime.datetime(2020, 8, 11, 17, 42, 40, tzinfo=datetime.timezone.utc), 'commenter': 'lydia-duncan', 'type': 'User'}, {'comment_id': 468754870, 'comment_body': 'Okay, that seems reasonable then :)', 'comment_created': datetime.datetime(2020, 8, 11, 17, 43, 56, tzinfo=datetime.timezone.utc), 'commenter': 'lydia-duncan', 'type': 'User'}]","[{'commit_sha': '60bfaa89c9cf70712fbaa794e0b706c001fb64ec', 'committer_username': 'Aniket21mathur', 'committer_name': 'Aniket Mathur', 'committer_email': 'aniket.m@rigi.club', 'commit_date': datetime.datetime(2018, 1, 4, 6, 23, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6a1f38fea14b7bee6302d76467237eed86067b4c', 'committer_username': 'Aniket21mathur', 'committer_name': 'Aniket Mathur', 'committer_email': 'aniket.m@rigi.club', 'commit_date': datetime.datetime(2018, 1, 4, 6, 23, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '53d81181fdc701cdd92f6d725d1c0b978b8fbb13', 'committer_username': 'Aniket21mathur', 'committer_name': 'Aniket Mathur', 'committer_email': 'aniket.m@rigi.club', 'commit_date': datetime.datetime(2018, 1, 4, 6, 23, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c54d21e83edc13eb462bb75d76deae3d0263d365', 'committer_username': 'Aniket21mathur', 'committer_name': 'Aniket Mathur', 'committer_email': 'aniket.m@rigi.club', 'commit_date': datetime.datetime(2018, 1, 4, 6, 23, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f7082b83b1978aa7c6cec39d373c93ee12a85cc5', 'committer_username': 'Aniket21mathur', 'committer_name': 'Aniket Mathur', 'committer_email': 'aniket.m@rigi.club', 'commit_date': datetime.datetime(2018, 1, 4, 6, 23, 57, tzinfo=datetime.timezone.utc)}]",Aniket Mathur,35092582,aniket.m@rigi.club,User,,35,,119,133
456722940,Handle nested types,"Src -> https://github.com/Aniket21mathur/ProtocolBuffers-Examples/blob/master/chapel/src/nestedTypes.proto
Build -> https://github.com/Aniket21mathur/ProtocolBuffers-Examples/blob/master/chapel/build/nestedTypes.chpl",True,23,https://api.github.com/repos/Aniket21mathur/Chapel-protobuf/pulls/23,https://github.com/Aniket21mathur/Chapel-protobuf/pull/23,closed,138,11,17,2,2,6,0,0,[],2020-07-26 08:59:20+00:00,2020-08-12 05:54:47+00:00,1457727.0,"16 days, 20:55:27","[{'comment_id': 468749081, 'comment_body': 'Typo on ""chindren"" :p', 'comment_created': datetime.datetime(2020, 8, 11, 17, 33, 47, tzinfo=datetime.timezone.utc), 'commenter': 'lydia-duncan', 'type': 'User'}, {'comment_id': 468750158, 'comment_body': '""is not"" -> ""are not"", you are talking about two categories so it should be plural', 'comment_created': datetime.datetime(2020, 8, 11, 17, 35, 35, tzinfo=datetime.timezone.utc), 'commenter': 'lydia-duncan', 'type': 'User'}, {'comment_id': 468751387, 'comment_body': 'We should test repeated instances of nested types as well', 'comment_created': datetime.datetime(2020, 8, 11, 17, 37, 54, tzinfo=datetime.timezone.utc), 'commenter': 'lydia-duncan', 'type': 'User'}, {'comment_id': 468753181, 'comment_body': 'Opps! Dumb me xD', 'comment_created': datetime.datetime(2020, 8, 11, 17, 41, 1, tzinfo=datetime.timezone.utc), 'commenter': 'Aniket21mathur', 'type': 'User'}, {'comment_id': 468753530, 'comment_body': 'Yes, I will correct it :sweat_smile: ', 'comment_created': datetime.datetime(2020, 8, 11, 17, 41, 37, tzinfo=datetime.timezone.utc), 'commenter': 'Aniket21mathur', 'type': 'User'}, {'comment_id': 468753883, 'comment_body': 'Good point! I will add tests for that :) ', 'comment_created': datetime.datetime(2020, 8, 11, 17, 42, 9, tzinfo=datetime.timezone.utc), 'commenter': 'Aniket21mathur', 'type': 'User'}]","[{'commit_sha': '34a841daa53004eec35ffe98d3deea5751c81d6d', 'committer_username': 'Aniket21mathur', 'committer_name': 'Aniket Mathur', 'committer_email': 'aniket.m@rigi.club', 'commit_date': datetime.datetime(2018, 1, 4, 6, 23, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aa80e556529747d62f806c28786848c7d72b5ca7', 'committer_username': 'Aniket21mathur', 'committer_name': 'Aniket Mathur', 'committer_email': 'aniket.m@rigi.club', 'commit_date': datetime.datetime(2018, 1, 4, 6, 23, 57, tzinfo=datetime.timezone.utc)}]",Aniket Mathur,35092582,aniket.m@rigi.club,User,,35,,119,133
469651882,Support for any message type,"SRC -> https://github.com/Aniket21mathur/ProtocolBuffers-Examples/blob/master/chapel/src/anytype.proto
OUT -> https://github.com/Aniket21mathur/ProtocolBuffers-Examples/blob/master/chapel/build/any.chpl",True,33,https://api.github.com/repos/Aniket21mathur/Chapel-protobuf/pulls/33,https://github.com/Aniket21mathur/Chapel-protobuf/pull/33,closed,159,1,8,5,9,2,0,0,[],2020-08-18 17:59:04+00:00,2020-08-24 15:48:56+00:00,510592.0,"5 days, 21:49:52","[{'comment_id': 475710688, 'comment_body': 'reword to maybe ""input message type does not match destination message type""', 'comment_created': datetime.datetime(2020, 8, 24, 15, 43, 44, tzinfo=datetime.timezone.utc), 'commenter': 'mppf', 'type': 'User'}, {'comment_id': 475712885, 'comment_body': 'Yeah sure!', 'comment_created': datetime.datetime(2020, 8, 24, 15, 47, 6, tzinfo=datetime.timezone.utc), 'commenter': 'Aniket21mathur', 'type': 'User'}]","[{'commit_sha': '62ef01762ecc21623236c6dbf6322572eb71ea95', 'committer_username': 'Aniket21mathur', 'committer_name': 'Aniket Mathur', 'committer_email': 'aniket.m@rigi.club', 'commit_date': datetime.datetime(2018, 1, 4, 6, 23, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9aefac5d587b8f7af71c7f2909d3d2f51da9fbf2', 'committer_username': 'Aniket21mathur', 'committer_name': 'Aniket Mathur', 'committer_email': 'aniket.m@rigi.club', 'commit_date': datetime.datetime(2018, 1, 4, 6, 23, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6ed56f49c866736ee0918599cb11f23debce6d54', 'committer_username': 'Aniket21mathur', 'committer_name': 'Aniket Mathur', 'committer_email': 'aniket.m@rigi.club', 'commit_date': datetime.datetime(2018, 1, 4, 6, 23, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a62e6955a14cf5fb4a81292049586420b41e5daf', 'committer_username': 'Aniket21mathur', 'committer_name': 'Aniket Mathur', 'committer_email': 'aniket.m@rigi.club', 'commit_date': datetime.datetime(2018, 1, 4, 6, 23, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '40b8af47d5187fd5875a5d14c6fbf4c8e6bc9589', 'committer_username': 'Aniket21mathur', 'committer_name': 'Aniket Mathur', 'committer_email': 'aniket.m@rigi.club', 'commit_date': datetime.datetime(2018, 1, 4, 6, 23, 57, tzinfo=datetime.timezone.utc)}]",Aniket Mathur,35092582,aniket.m@rigi.club,User,,35,,119,133
468949816,Add support for oneofs,"Src -> https://github.com/Aniket21mathur/ProtocolBuffers-Examples/blob/master/chapel/src/oneof.proto
Out -> https://github.com/Aniket21mathur/ProtocolBuffers-Examples/blob/master/chapel/build/oneof.chpl",True,32,https://api.github.com/repos/Aniket21mathur/Chapel-protobuf/pulls/32,https://github.com/Aniket21mathur/Chapel-protobuf/pull/32,closed,291,4,17,1,1,4,0,0,[],2020-08-17 16:49:17+00:00,2020-08-28 13:11:05+00:00,937308.0,"10 days, 20:21:48","[{'comment_id': 479237202, 'comment_body': 'It should say in the PR message that it adds avoidance of writing default value enums', 'comment_created': datetime.datetime(2020, 8, 28, 12, 32, 59, tzinfo=datetime.timezone.utc), 'commenter': 'mppf', 'type': 'User'}, {'comment_id': 479239005, 'comment_body': 'We just changed the other code to avoid using StrCat. Probably makes sense to either make these use `std::to_string` or un-do the other change.', 'comment_created': datetime.datetime(2020, 8, 28, 12, 34, 29, tzinfo=datetime.timezone.utc), 'commenter': 'mppf', 'type': 'User'}, {'comment_id': 479270642, 'comment_body': 'Sure, I will do that.', 'comment_created': datetime.datetime(2020, 8, 28, 13, 8, 12, tzinfo=datetime.timezone.utc), 'commenter': 'Aniket21mathur', 'type': 'User'}, {'comment_id': 479272400, 'comment_body': 'Yes, I have that in mind. I will make that change directly to the master branch :)', 'comment_created': datetime.datetime(2020, 8, 28, 13, 10, 3, tzinfo=datetime.timezone.utc), 'commenter': 'Aniket21mathur', 'type': 'User'}]","[{'commit_sha': '8d3d3017580a9d464b2f5404095b57f0d051213f', 'committer_username': 'Aniket21mathur', 'committer_name': 'Aniket Mathur', 'committer_email': 'aniket.m@rigi.club', 'commit_date': datetime.datetime(2018, 1, 4, 6, 23, 57, tzinfo=datetime.timezone.utc)}]",Aniket Mathur,35092582,aniket.m@rigi.club,User,,35,,119,133
461022518,Add support for Maps,"Src -> https://github.com/Aniket21mathur/ProtocolBuffers-Examples/blob/master/chapel/src/maps.proto
Output -> https://github.com/Aniket21mathur/ProtocolBuffers-Examples/blob/master/chapel/build/maps.chpl",True,24,https://api.github.com/repos/Aniket21mathur/Chapel-protobuf/pulls/24,https://github.com/Aniket21mathur/Chapel-protobuf/pull/24,closed,314,12,14,1,2,2,0,0,[],2020-08-01 11:16:37+00:00,2020-08-17 16:13:57+00:00,1400240.0,"16 days, 4:57:20","[{'comment_id': 464472951, 'comment_body': '@mppf please see this. If this works for us instead of using first class functions.', 'comment_created': datetime.datetime(2020, 8, 3, 15, 4, 17, tzinfo=datetime.timezone.utc), 'commenter': 'Aniket21mathur', 'type': 'User'}, {'comment_id': 464575481, 'comment_body': 'I like it, anyway :)', 'comment_created': datetime.datetime(2020, 8, 3, 18, 1, 28, tzinfo=datetime.timezone.utc), 'commenter': 'mppf', 'type': 'User'}]","[{'commit_sha': '51df5ce428f81fb68e3904c75c16bb815b0f8607', 'committer_username': 'Aniket21mathur', 'committer_name': 'Aniket Mathur', 'committer_email': 'aniket.m@rigi.club', 'commit_date': datetime.datetime(2018, 1, 4, 6, 23, 57, tzinfo=datetime.timezone.utc)}]",Aniket Mathur,35092582,aniket.m@rigi.club,User,,35,,119,133
448089114,Add user guide,,True,16,https://api.github.com/repos/Aniket21mathur/Chapel-protobuf/pulls/16,https://github.com/Aniket21mathur/Chapel-protobuf/pull/16,closed,153,4,4,5,1,26,0,0,[],2020-07-13 08:25:56+00:00,2020-07-15 18:07:21+00:00,207685.0,"2 days, 9:41:25","[{'comment_id': 453815001, 'comment_body': 'extra', 'comment_created': datetime.datetime(2020, 7, 13, 17, 33, 23, tzinfo=datetime.timezone.utc), 'commenter': 'mppf', 'type': 'User'}, {'comment_id': 453815501, 'comment_body': 'Add something about whatever happens with `.` or other special characters', 'comment_created': datetime.datetime(2020, 7, 13, 17, 34, 20, tzinfo=datetime.timezone.utc), 'commenter': 'mppf', 'type': 'User'}, {'comment_id': 454516792, 'comment_body': '""comprises of"" -> ""is comprised of""', 'comment_created': datetime.datetime(2020, 7, 14, 17, 19, 39, tzinfo=datetime.timezone.utc), 'commenter': 'lydia-duncan', 'type': 'User'}, {'comment_id': 454518586, 'comment_body': 'Do you mean ""augments"" instead of ""arguments""?', 'comment_created': datetime.datetime(2020, 7, 14, 17, 22, 34, tzinfo=datetime.timezone.utc), 'commenter': 'lydia-duncan', 'type': 'User'}, {'comment_id': 454520349, 'comment_body': '""have"" -> ""has"", the module is singular.', 'comment_created': datetime.datetime(2020, 7, 14, 17, 25, 25, tzinfo=datetime.timezone.utc), 'commenter': 'lydia-duncan', 'type': 'User'}, {'comment_id': 454525689, 'comment_body': 'I think ""Here is an example"" would be clearer.', 'comment_created': datetime.datetime(2020, 7, 14, 17, 33, 53, tzinfo=datetime.timezone.utc), 'commenter': 'lydia-duncan', 'type': 'User'}, {'comment_id': 454526191, 'comment_body': '""helps"" -> ""which helps""', 'comment_created': datetime.datetime(2020, 7, 14, 17, 34, 43, tzinfo=datetime.timezone.utc), 'commenter': 'lydia-duncan', 'type': 'User'}, {'comment_id': 454527017, 'comment_body': ""The ` around Person doesn't seem to do anything for the Github display"", 'comment_created': datetime.datetime(2020, 7, 14, 17, 36, 2, tzinfo=datetime.timezone.utc), 'commenter': 'lydia-duncan', 'type': 'User'}, {'comment_id': 454527396, 'comment_body': '""set default"" -> ""set, a default""', 'comment_created': datetime.datetime(2020, 7, 14, 17, 36, 35, tzinfo=datetime.timezone.utc), 'commenter': 'lydia-duncan', 'type': 'User'}, {'comment_id': 454527637, 'comment_body': '""is integrated""?', 'comment_created': datetime.datetime(2020, 7, 14, 17, 36, 59, tzinfo=datetime.timezone.utc), 'commenter': 'lydia-duncan', 'type': 'User'}, {'comment_id': 454527885, 'comment_body': 'I think this comma should be removed', 'comment_created': datetime.datetime(2020, 7, 14, 17, 37, 22, tzinfo=datetime.timezone.utc), 'commenter': 'lydia-duncan', 'type': 'User'}, {'comment_id': 454528533, 'comment_body': ""Don't forget to update this in your branch that changes the name :)"", 'comment_created': datetime.datetime(2020, 7, 14, 17, 38, 26, tzinfo=datetime.timezone.utc), 'commenter': 'lydia-duncan', 'type': 'User'}, {'comment_id': 454528716, 'comment_body': '""serialization"" (missing an \'i\')', 'comment_created': datetime.datetime(2020, 7, 14, 17, 38, 43, tzinfo=datetime.timezone.utc), 'commenter': 'lydia-duncan', 'type': 'User'}, {'comment_id': 454528982, 'comment_body': 'Same typo here', 'comment_created': datetime.datetime(2020, 7, 14, 17, 39, 7, tzinfo=datetime.timezone.utc), 'commenter': 'lydia-duncan', 'type': 'User'}, {'comment_id': 454529393, 'comment_body': 'The module owns the function, so I think this should be ""module\'s""', 'comment_created': datetime.datetime(2020, 7, 14, 17, 39, 36, tzinfo=datetime.timezone.utc), 'commenter': 'lydia-duncan', 'type': 'User'}, {'comment_id': 454530123, 'comment_body': 'It might be good to link from here to the protobuf definitions of these features or provide more details, something along those lines', 'comment_created': datetime.datetime(2020, 7, 14, 17, 40, 43, tzinfo=datetime.timezone.utc), 'commenter': 'lydia-duncan', 'type': 'User'}, {'comment_id': 455192759, 'comment_body': 'No, I meant ""arguments"" only, like we call the `PluginMain` function of `protoc` with the Chapel generator arguments....in that sense ', 'comment_created': datetime.datetime(2020, 7, 15, 16, 53, 8, tzinfo=datetime.timezone.utc), 'commenter': 'Aniket21mathur', 'type': 'User'}, {'comment_id': 455196799, 'comment_body': 'Yes, I will remember that. Thanks :)', 'comment_created': datetime.datetime(2020, 7, 15, 16, 59, 34, tzinfo=datetime.timezone.utc), 'commenter': 'Aniket21mathur', 'type': 'User'}, {'comment_id': 455201854, 'comment_body': ""I wanted to write  ' ``IO`` module and ``writeToOutputFile`` function. '.  `writeToOutputFile` is present in the generated file and used for serialization, while `IO` is used for generating reading/writing channels to a file.  "", 'comment_created': datetime.datetime(2020, 7, 15, 17, 8, 4, tzinfo=datetime.timezone.utc), 'commenter': 'Aniket21mathur', 'type': 'User'}, {'comment_id': 455202895, 'comment_body': 'So like ""It provides arguments to the ``protoc`` compiler""?  As it stands now, ""It arguments"" is not a proper phrase - ""arguments"" is a noun and so is ""it"".  Two nouns shouldn\'t be next to each other in a sentence without a comma and since there is a relationship between the nouns rather than them being both part of a list or part of separate phrases, a comma is not appropriate.', 'comment_created': datetime.datetime(2020, 7, 15, 17, 9, 47, tzinfo=datetime.timezone.utc), 'commenter': 'lydia-duncan', 'type': 'User'}, {'comment_id': 455203747, 'comment_body': 'Ah, okay.  That works for me!', 'comment_created': datetime.datetime(2020, 7, 15, 17, 10, 59, tzinfo=datetime.timezone.utc), 'commenter': 'lydia-duncan', 'type': 'User'}, {'comment_id': 455208157, 'comment_body': 'Yes, it sounds good, thanks for the explanation. Your grammar is really good!', 'comment_created': datetime.datetime(2020, 7, 15, 17, 17, 56, tzinfo=datetime.timezone.utc), 'commenter': 'Aniket21mathur', 'type': 'User'}, {'comment_id': 455212009, 'comment_body': 'That sounds like a good idea. I think we can link to the corresponding definitions in the [Language guide](https://developers.google.com/protocol-buffers/docs/proto3). Also, should we mention that we currently only support `proto3` and not `proto2`?', 'comment_created': datetime.datetime(2020, 7, 15, 17, 23, 44, tzinfo=datetime.timezone.utc), 'commenter': 'Aniket21mathur', 'type': 'User'}, {'comment_id': 455215096, 'comment_body': 'Yeah, I think that\'s a good idea (though I wouldn\'t say ""currently"", since we don\'t expect to support `proto2`, right?)', 'comment_created': datetime.datetime(2020, 7, 15, 17, 28, 12, tzinfo=datetime.timezone.utc), 'commenter': 'lydia-duncan', 'type': 'User'}, {'comment_id': 455224632, 'comment_body': ""`proto2` is an old version, all the features available in `proto2` are available in `proto3`(different implementations might be possible). Google has also updated the official published documentation to have generated code guides for the `proto3` version. So, I don't think there is a need to support `proto2` until and unless we face some `proto` file that we cannot handle with `proto3`. What do you think?"", 'comment_created': datetime.datetime(2020, 7, 15, 17, 37, 11, tzinfo=datetime.timezone.utc), 'commenter': 'Aniket21mathur', 'type': 'User'}, {'comment_id': 455226589, 'comment_body': 'I agree :)', 'comment_created': datetime.datetime(2020, 7, 15, 17, 39, 34, tzinfo=datetime.timezone.utc), 'commenter': 'lydia-duncan', 'type': 'User'}]","[{'commit_sha': '24cef45a2260bd8136d10fedab128bc74d80f203', 'committer_username': 'Aniket21mathur', 'committer_name': 'Aniket Mathur', 'committer_email': 'aniket.m@rigi.club', 'commit_date': datetime.datetime(2018, 1, 4, 6, 23, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '890fab4fe0a986568cc3f2e63f088ac031f088cd', 'committer_username': 'Aniket21mathur', 'committer_name': 'Aniket Mathur', 'committer_email': 'aniket.m@rigi.club', 'commit_date': datetime.datetime(2018, 1, 4, 6, 23, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5736f503d06236f98681950c86959fa4cfb78c83', 'committer_username': 'Aniket21mathur', 'committer_name': 'Aniket Mathur', 'committer_email': 'aniket.m@rigi.club', 'commit_date': datetime.datetime(2018, 1, 4, 6, 23, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1448ede3af3cce346662bd5514a18bb6293db27e', 'committer_username': 'Aniket21mathur', 'committer_name': 'Aniket Mathur', 'committer_email': 'aniket.m@rigi.club', 'commit_date': datetime.datetime(2018, 1, 4, 6, 23, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f5544e08f0b62c7719117bf3590a02e06c1a19d0', 'committer_username': 'Aniket21mathur', 'committer_name': 'Aniket Mathur', 'committer_email': 'aniket.m@rigi.club', 'commit_date': datetime.datetime(2018, 1, 4, 6, 23, 57, tzinfo=datetime.timezone.utc)}]",Aniket Mathur,35092582,aniket.m@rigi.club,User,,35,,119,133
468273170,Add generated code guide,,True,30,https://api.github.com/repos/Aniket21mathur/Chapel-protobuf/pulls/30,https://github.com/Aniket21mathur/Chapel-protobuf/pull/30,closed,286,0,1,6,6,48,0,0,[],2020-08-15 07:17:43+00:00,2020-08-21 17:19:38+00:00,554515.0,"6 days, 10:01:55","[{'comment_id': 471754616, 'comment_body': 'Typo: ""output"", not ""ouput"" :)', 'comment_created': datetime.datetime(2020, 8, 17, 20, 23, 27, tzinfo=datetime.timezone.utc), 'commenter': 'lydia-duncan', 'type': 'User'}, {'comment_id': 471754775, 'comment_body': ""Might need to do a find/replace on that typo, it's here too"", 'comment_created': datetime.datetime(2020, 8, 17, 20, 23, 49, tzinfo=datetime.timezone.utc), 'commenter': 'lydia-duncan', 'type': 'User'}, {'comment_id': 471756328, 'comment_body': '""alphanumeric"", not ""aplhanumeric""', 'comment_created': datetime.datetime(2020, 8, 17, 20, 26, 53, tzinfo=datetime.timezone.utc), 'commenter': 'lydia-duncan', 'type': 'User'}, {'comment_id': 471773887, 'comment_body': ""Missing a space after the period.  Also, I'd include the example .proto file that generates the .chpl file - people should be familiar with the ideas from the linked guide, but it will still help to show them side by side"", 'comment_created': datetime.datetime(2020, 8, 17, 21, 3, 43, tzinfo=datetime.timezone.utc), 'commenter': 'lydia-duncan', 'type': 'User'}, {'comment_id': 471774814, 'comment_body': 'I think you want just ""a"" here - ""the a"" is definitely wrong, but I think ""a"" is better than ""the"" :)', 'comment_created': datetime.datetime(2020, 8, 17, 21, 5, 35, tzinfo=datetime.timezone.utc), 'commenter': 'lydia-duncan', 'type': 'User'}, {'comment_id': 471775186, 'comment_body': 'In more nit-picky feedback - I think every word should be capitalized in the section title', 'comment_created': datetime.datetime(2020, 8, 17, 21, 6, 22, tzinfo=datetime.timezone.utc), 'commenter': 'lydia-duncan', 'type': 'User'}, {'comment_id': 471787720, 'comment_body': '""have"" -> ""has"", the compiler generates a singular record :)', 'comment_created': datetime.datetime(2020, 8, 17, 21, 34, 29, tzinfo=datetime.timezone.utc), 'commenter': 'lydia-duncan', 'type': 'User'}, {'comment_id': 471789352, 'comment_body': ""This probably isn't your fault, but this code is a little difficult to read.  I wonder if making them multi-line comments helps?  If not, it might be good to just separate the code and talk about each section of the generated file (e.g., show the whole file without comments, then describe each section, maybe calling out line numbers or something?)"", 'comment_created': datetime.datetime(2020, 8, 17, 21, 38, 14, tzinfo=datetime.timezone.utc), 'commenter': 'lydia-duncan', 'type': 'User'}, {'comment_id': 471790772, 'comment_body': 'Or maybe having an additional line break in between thoughts about a field/method, e.g.\r\n```chapel\r\n// Used to store encoded byte stream of unknown fields encountered while parsing.\r\n//\r\n// As per proto3 documentation, unknown fields should be preserved and appended\r\n// to the generated message byte stream.\r\nvar unknownFieldStream: bytes = """";\r\n```', 'comment_created': datetime.datetime(2020, 8, 17, 21, 41, 33, tzinfo=datetime.timezone.utc), 'commenter': 'lydia-duncan', 'type': 'User'}, {'comment_id': 471791485, 'comment_body': 'It might be good to have a `.. note::` up here reminding users that this is provided for understanding only and that they should not modify the generated .chpl file', 'comment_created': datetime.datetime(2020, 8, 17, 21, 43, 14, tzinfo=datetime.timezone.utc), 'commenter': 'lydia-duncan', 'type': 'User'}, {'comment_id': 471792393, 'comment_body': 'You called out earlier that a code snippet is partial - this code snippet seems partial as well.  Should it also get a similar call out?', 'comment_created': datetime.datetime(2020, 8, 17, 21, 45, 16, tzinfo=datetime.timezone.utc), 'commenter': 'lydia-duncan', 'type': 'User'}, {'comment_id': 471792588, 'comment_body': ""This seems like an implementation detail that the user doesn't need to know about."", 'comment_created': datetime.datetime(2020, 8, 17, 21, 45, 44, tzinfo=datetime.timezone.utc), 'commenter': 'lydia-duncan', 'type': 'User'}, {'comment_id': 471793278, 'comment_body': 'It might be good to call out that this is eventually intended to be a private method when those are supported (see chapel-lang/chapel#6067), and so should not be called by the user.  The previous method is good about saying it is user exposed but I think this one should also say that it is not intended to be called by users, to really drive the point home while we still have to expose it.', 'comment_created': datetime.datetime(2020, 8, 17, 21, 47, 29, tzinfo=datetime.timezone.utc), 'commenter': 'lydia-duncan', 'type': 'User'}, {'comment_id': 471793489, 'comment_body': 'Should the first append in this line be surrounded by `?', 'comment_created': datetime.datetime(2020, 8, 17, 21, 48, 1, tzinfo=datetime.timezone.utc), 'commenter': 'lydia-duncan', 'type': 'User'}, {'comment_id': 471793864, 'comment_body': 'Ditto comments on serialize and _serialize', 'comment_created': datetime.datetime(2020, 8, 17, 21, 48, 56, tzinfo=datetime.timezone.utc), 'commenter': 'lydia-duncan', 'type': 'User'}, {'comment_id': 471794257, 'comment_body': 'This is probably nitpicky and it would be okay to ignore, but I\'d say ""contains a nested enum _declaration_"".', 'comment_created': datetime.datetime(2020, 8, 17, 21, 49, 48, tzinfo=datetime.timezone.utc), 'commenter': 'lydia-duncan', 'type': 'User'}, {'comment_id': 471796852, 'comment_body': ""You're switching between plural and singular again in this section.  I think it's reasonable to indicate that every message declaration will get its own type, but would otherwise lean towards sticking with singular."", 'comment_created': datetime.datetime(2020, 8, 17, 21, 56, 6, tzinfo=datetime.timezone.utc), 'commenter': 'lydia-duncan', 'type': 'User'}, {'comment_id': 471797151, 'comment_body': 'This one should be purely plural, though (so ""is"" -> ""are"")', 'comment_created': datetime.datetime(2020, 8, 17, 21, 56, 46, tzinfo=datetime.timezone.utc), 'commenter': 'lydia-duncan', 'type': 'User'}, {'comment_id': 471797324, 'comment_body': 'And plural ""types""', 'comment_created': datetime.datetime(2020, 8, 17, 21, 57, 9, tzinfo=datetime.timezone.utc), 'commenter': 'lydia-duncan', 'type': 'User'}, {'comment_id': 471797860, 'comment_body': '""avoiding"" -> ""avoid"" (avoid keeps the same tense as declare, because the ""and"" joins it with can.  Put another way, you\'re saying ""we can declare ..."" and ""thus we can avoid ..."" but all in one sentence)', 'comment_created': datetime.datetime(2020, 8, 17, 21, 58, 40, tzinfo=datetime.timezone.utc), 'commenter': 'lydia-duncan', 'type': 'User'}, {'comment_id': 471798202, 'comment_body': 'I think there needs to be an additional line in between this and the start of your note for it to render properly', 'comment_created': datetime.datetime(2020, 8, 17, 21, 59, 22, tzinfo=datetime.timezone.utc), 'commenter': 'lydia-duncan', 'type': 'User'}, {'comment_id': 471798691, 'comment_body': 'Hmm, I would put this section prior to nested types.  Fields are more commonly used - you want to start with basics and then move to more complex topics.  It also ties more nicely back to the Messages section code', 'comment_created': datetime.datetime(2020, 8, 17, 22, 0, 32, tzinfo=datetime.timezone.utc), 'commenter': 'lydia-duncan', 'type': 'User'}, {'comment_id': 471800565, 'comment_body': 'I might remove ""In case of Chapel"" from this sentence and just start with ""Methods equivalent"".  Then I\'d finish the sentence with "", so do not need to be generated by the protocol buffer compiler.""', 'comment_created': datetime.datetime(2020, 8, 17, 22, 5, 8, tzinfo=datetime.timezone.utc), 'commenter': 'lydia-duncan', 'type': 'User'}, {'comment_id': 471801692, 'comment_body': 'I might call out that this table is intended to match the order given by the proto3 language documentation (but maybe in a hidden rst comment - I think we might have some helpful developer question the ordering, so would like the comment for their benefit.  Calling it out for users might be drawing too much attention to it)', 'comment_created': datetime.datetime(2020, 8, 17, 22, 8, 1, tzinfo=datetime.timezone.utc), 'commenter': 'lydia-duncan', 'type': 'User'}, {'comment_id': 471803289, 'comment_body': 'It might be helpful to link to [this section](https://developers.google.com/protocol-buffers/docs/proto3#specifying_field_rules) here, in case users forgot about it when reading the documentation (or were lazy and skipped it ;) )', 'comment_created': datetime.datetime(2020, 8, 17, 22, 12, 10, tzinfo=datetime.timezone.utc), 'commenter': 'lydia-duncan', 'type': 'User'}, {'comment_id': 471803399, 'comment_body': 'Ditto the previous comment', 'comment_created': datetime.datetime(2020, 8, 17, 22, 12, 26, tzinfo=datetime.timezone.utc), 'commenter': 'lydia-duncan', 'type': 'User'}, {'comment_id': 471803868, 'comment_body': 'I can never remember whether it should be ""typed variable"" or not, so would probably rearrange this to ""will generate a variable of ``bool`` type, with the default value of ``false``""', 'comment_created': datetime.datetime(2020, 8, 17, 22, 13, 42, tzinfo=datetime.timezone.utc), 'commenter': 'lydia-duncan', 'type': 'User'}, {'comment_id': 471806614, 'comment_body': 'I think it would also make sense to have this before the Nested Types section, especially since you reference enums there', 'comment_created': datetime.datetime(2020, 8, 17, 22, 21, 14, tzinfo=datetime.timezone.utc), 'commenter': 'lydia-duncan', 'type': 'User'}, {'comment_id': 471806812, 'comment_body': ""Obviously if you did that, you'd want to adjust this second sentence :)"", 'comment_created': datetime.datetime(2020, 8, 17, 22, 21, 44, tzinfo=datetime.timezone.utc), 'commenter': 'lydia-duncan', 'type': 'User'}, {'comment_id': 471927359, 'comment_body': 'I guess the wrong version is somehow stored in my text editor history, I just use the autocomplete feature for most of the words. Though from now, I will do a Grammarly check :sweat_smile: ', 'comment_created': datetime.datetime(2020, 8, 18, 5, 43, 20, tzinfo=datetime.timezone.utc), 'commenter': 'Aniket21mathur', 'type': 'User'}, {'comment_id': 471931111, 'comment_body': 'Yes ""the"" is extra, thanks for pointing out :)', 'comment_created': datetime.datetime(2020, 8, 18, 5, 54, 58, tzinfo=datetime.timezone.utc), 'commenter': 'Aniket21mathur', 'type': 'User'}, {'comment_id': 471931299, 'comment_body': 'Yes ""the"" is extra, thanks for pointing out :)', 'comment_created': datetime.datetime(2020, 8, 18, 5, 55, 31, tzinfo=datetime.timezone.utc), 'commenter': 'Aniket21mathur', 'type': 'User'}, {'comment_id': 471936327, 'comment_body': 'I guess we can keep it since this guide is not only for users. Some chapel developers might be interested in knowing the details of the generated code and this guide might be helpful in that case. \r\n\r\n(This guide might have helped in the API review process as well. A link to this guide might have saved us from some explanatory comments  :P)\r\n\r\nWhat do you say?', 'comment_created': datetime.datetime(2020, 8, 18, 6, 11, 19, tzinfo=datetime.timezone.utc), 'commenter': 'Aniket21mathur', 'type': 'User'}, {'comment_id': 471960569, 'comment_body': 'Yeah..makes sense!', 'comment_created': datetime.datetime(2020, 8, 18, 7, 8, 34, tzinfo=datetime.timezone.utc), 'commenter': 'Aniket21mathur', 'type': 'User'}, {'comment_id': 471972339, 'comment_body': 'Yes :)', 'comment_created': datetime.datetime(2020, 8, 18, 7, 30, 27, tzinfo=datetime.timezone.utc), 'commenter': 'Aniket21mathur', 'type': 'User'}, {'comment_id': 471981238, 'comment_body': 'I think it might be effective if we have explanation along with the method declaration. I have replaced single-line comments with multi-line, please check if it looks any better.', 'comment_created': datetime.datetime(2020, 8, 18, 7, 45, 7, tzinfo=datetime.timezone.utc), 'commenter': 'Aniket21mathur', 'type': 'User'}, {'comment_id': 471982966, 'comment_body': ""I did that, but I don't see any difference in the way it is rendered. I guess Github renders it in this way only, it comes with a nice looking grey box if we render the document as an `html` file using sphinx.  "", 'comment_created': datetime.datetime(2020, 8, 18, 7, 47, 57, tzinfo=datetime.timezone.utc), 'commenter': 'Aniket21mathur', 'type': 'User'}, {'comment_id': 471983477, 'comment_body': ""Sorry, I didn't get this point :sweat_smile: "", 'comment_created': datetime.datetime(2020, 8, 18, 7, 48, 53, tzinfo=datetime.timezone.utc), 'commenter': 'Aniket21mathur', 'type': 'User'}, {'comment_id': 472283957, 'comment_body': 'The trouble is that describing details like this can make it harder to change the implementation in the future - anything you talk about explicitly can be relied upon and thus broken if you reshuffle things.  This seems to me like a detail that is relevant when reading the code itself, and also something it would be easy to change there without realizing that this document needed to be updated as well.', 'comment_created': datetime.datetime(2020, 8, 18, 15, 27, 22, tzinfo=datetime.timezone.utc), 'commenter': 'lydia-duncan', 'type': 'User'}, {'comment_id': 472287643, 'comment_body': ""Hmm, yeah, I think I'd also insert more spacing to break up thoughts in the comments, like the additional line break in my example"", 'comment_created': datetime.datetime(2020, 8, 18, 15, 32, 5, tzinfo=datetime.timezone.utc), 'commenter': 'lydia-duncan', 'type': 'User'}, {'comment_id': 472291092, 'comment_body': ""I'd want the note about private as a separate paragraph in this comment"", 'comment_created': datetime.datetime(2020, 8, 18, 15, 36, 58, tzinfo=datetime.timezone.utc), 'commenter': 'lydia-duncan', 'type': 'User'}, {'comment_id': 472300486, 'comment_body': 'Sorry, I\'ll rephrase :)\r\n\r\nWhat I\'m imagining is that you\'d write something like ""... the compiler will generate a module level record/enum per nested type.  This generated record or enum will have a name prefixed by the parent message name.""', 'comment_created': datetime.datetime(2020, 8, 18, 15, 50, 42, tzinfo=datetime.timezone.utc), 'commenter': 'lydia-duncan', 'type': 'User'}, {'comment_id': 472303876, 'comment_body': 'I\'d put the link on ""singular"" and ""repeated"", since those are the terms that I think users will be more confused about.  I believe it is possible to make rst links display differently but still refer to the same place without having to make a separate link at the bottom, but I don\'t remember the syntax off the top of my head.', 'comment_created': datetime.datetime(2020, 8, 18, 15, 55, 10, tzinfo=datetime.timezone.utc), 'commenter': 'lydia-duncan', 'type': 'User'}, {'comment_id': 472435676, 'comment_body': 'Hmm...Makes sense, I guess this should be enough then? \r\n\r\n`User exposed method for serializing data to protobuf wire format. This is a wrapper method to the actual method.`\r\n', 'comment_created': datetime.datetime(2020, 8, 18, 19, 39, 35, tzinfo=datetime.timezone.utc), 'commenter': 'Aniket21mathur', 'type': 'User'}, {'comment_id': 473108347, 'comment_body': 'I am not able to find that syntax through googling :(', 'comment_created': datetime.datetime(2020, 8, 19, 15, 16, 19, tzinfo=datetime.timezone.utc), 'commenter': 'Aniket21mathur', 'type': 'User'}, {'comment_id': 474787795, 'comment_body': 'I think [this](https://docutils.sourceforge.io/docs/ref/rst/restructuredtext.html#embedded-uris-and-aliases) is what you want? (I got to that by googling rst links generally)', 'comment_created': datetime.datetime(2020, 8, 21, 15, 59, 54, tzinfo=datetime.timezone.utc), 'commenter': 'lydia-duncan', 'type': 'User'}, {'comment_id': 474788022, 'comment_body': ""(I'd also been to the page before so it helped that I knew vaguely where to look :) )"", 'comment_created': datetime.datetime(2020, 8, 21, 16, 0, 19, tzinfo=datetime.timezone.utc), 'commenter': 'lydia-duncan', 'type': 'User'}, {'comment_id': 474819731, 'comment_body': '@lydia-duncan thanks a lot for searching the doc <3. Now I am using `alias` of `singular` link for `repeated` link. Please have  a look :) ', 'comment_created': datetime.datetime(2020, 8, 21, 17, 3, 59, tzinfo=datetime.timezone.utc), 'commenter': 'Aniket21mathur', 'type': 'User'}]","[{'commit_sha': '125e76c8182384dab849845c6f88a044c59e4f9f', 'committer_username': 'Aniket21mathur', 'committer_name': 'Aniket Mathur', 'committer_email': 'aniket.m@rigi.club', 'commit_date': datetime.datetime(2018, 1, 4, 6, 23, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '44437551f319664396c34cf49c055288519948c3', 'committer_username': 'Aniket21mathur', 'committer_name': 'Aniket Mathur', 'committer_email': 'aniket.m@rigi.club', 'commit_date': datetime.datetime(2018, 1, 4, 6, 23, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5ec8c62097d0cd401c2ced13d4c1cc5b53ba0698', 'committer_username': 'Aniket21mathur', 'committer_name': 'Aniket Mathur', 'committer_email': 'aniket.m@rigi.club', 'commit_date': datetime.datetime(2018, 1, 4, 6, 23, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '08705ca527224cb21831f9611f50d7e38cabcb86', 'committer_username': 'Aniket21mathur', 'committer_name': 'Aniket Mathur', 'committer_email': 'aniket.m@rigi.club', 'commit_date': datetime.datetime(2018, 1, 4, 6, 23, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f975c05bea3279a5d2d6a5085f2c436369f8664f', 'committer_username': 'Aniket21mathur', 'committer_name': 'Aniket Mathur', 'committer_email': 'aniket.m@rigi.club', 'commit_date': datetime.datetime(2018, 1, 4, 6, 23, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2ed05630a143e5dcf8d46bf468a74d3eb54d665b', 'committer_username': 'Aniket21mathur', 'committer_name': 'Aniket Mathur', 'committer_email': 'aniket.m@rigi.club', 'commit_date': datetime.datetime(2018, 1, 4, 6, 23, 57, tzinfo=datetime.timezone.utc)}]",Aniket Mathur,35092582,aniket.m@rigi.club,User,,35,,119,133

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
21663285,chapel,chapel-lang/chapel,Chapel,415,1764,63,280,102386,2814,46,106,"[{'id': 552299438, 'number': 16924, 'closed': datetime.datetime(2021, 1, 11, 17, 58, 51, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 1, 10, 15, 19, 5, tzinfo=datetime.timezone.utc), 'time_taken': 95986.0, 'time_delta': '1 day, 2:39:46', 'additions': 4, 'deletions': 4, 'state': 'closed'}, {'id': 478698914, 'number': 16328, 'closed': datetime.datetime(2020, 9, 3, 15, 35, 41, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 9, 3, 15, 6, 45, tzinfo=datetime.timezone.utc), 'time_taken': 1736.0, 'time_delta': '0:28:56', 'additions': 2, 'deletions': 1, 'state': 'closed'}, {'id': 475425314, 'number': 16309, 'closed': datetime.datetime(2020, 9, 3, 14, 59, 37, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 28, 14, 3, 6, tzinfo=datetime.timezone.utc), 'time_taken': 521791.0, 'time_delta': '6 days, 0:56:31', 'additions': 799, 'deletions': 14, 'state': 'closed'}, {'id': 474032885, 'number': 16297, 'closed': datetime.datetime(2020, 9, 3, 14, 43, 9, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 26, 16, 52, 8, tzinfo=datetime.timezone.utc), 'time_taken': 683461.0, 'time_delta': '7 days, 21:51:01', 'additions': 387, 'deletions': 3, 'state': 'closed'}, {'id': 454839828, 'number': 16105, 'closed': datetime.datetime(2020, 8, 26, 14, 58, 23, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 22, 2, 21, 49, tzinfo=datetime.timezone.utc), 'time_taken': 3069394.0, 'time_delta': '35 days, 12:36:34', 'additions': 4100, 'deletions': 0, 'state': 'closed'}, {'id': 433155679, 'number': 15815, 'closed': datetime.datetime(2020, 6, 11, 20, 14, 25, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 11, 15, 21, 22, tzinfo=datetime.timezone.utc), 'time_taken': 17583.0, 'time_delta': '4:53:03', 'additions': 12, 'deletions': 12, 'state': 'closed'}, {'id': 420302771, 'number': 15702, 'closed': datetime.datetime(2020, 6, 9, 17, 5, 5, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 5, 19, 18, 53, 36, tzinfo=datetime.timezone.utc), 'time_taken': 1807889.0, 'time_delta': '20 days, 22:11:29', 'additions': 364, 'deletions': 0, 'state': 'closed'}, {'id': 407445935, 'number': 15569, 'closed': datetime.datetime(2020, 4, 23, 16, 56, 14, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 4, 22, 17, 54, 21, tzinfo=datetime.timezone.utc), 'time_taken': 82913.0, 'time_delta': '23:01:53', 'additions': 20, 'deletions': 1, 'state': 'closed'}, {'id': 404489191, 'number': 15529, 'closed': datetime.datetime(2020, 4, 20, 18, 58, 40, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 4, 16, 15, 53, 1, tzinfo=datetime.timezone.utc), 'time_taken': 356739.0, 'time_delta': '4 days, 3:05:39', 'additions': 10, 'deletions': 2, 'state': 'closed'}, {'id': 400983088, 'number': 15482, 'closed': datetime.datetime(2020, 4, 8, 17, 47, 53, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 4, 8, 17, 32, 12, tzinfo=datetime.timezone.utc), 'time_taken': 941.0, 'time_delta': '0:15:41', 'additions': 22, 'deletions': 25, 'state': 'closed'}, {'id': 388240642, 'number': 15222, 'closed': datetime.datetime(2020, 4, 15, 17, 23, 18, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 3, 14, 9, 51, 42, tzinfo=datetime.timezone.utc), 'time_taken': 2791896.0, 'time_delta': '32 days, 7:31:36', 'additions': 20, 'deletions': 12, 'state': 'closed'}, {'id': 388221625, 'number': 15221, 'closed': datetime.datetime(2020, 4, 9, 20, 58, 47, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 3, 14, 8, 42, 26, tzinfo=datetime.timezone.utc), 'time_taken': 2290581.0, 'time_delta': '26 days, 12:16:21', 'additions': 9, 'deletions': 4, 'state': 'closed'}, {'id': 388219706, 'number': 15220, 'closed': datetime.datetime(2020, 3, 14, 8, 35, 43, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 3, 14, 8, 35, 14, tzinfo=datetime.timezone.utc), 'time_taken': 29.0, 'time_delta': '0:00:29', 'additions': 20, 'deletions': 4, 'state': 'closed'}, {'id': 386155614, 'number': 15156, 'closed': datetime.datetime(2020, 3, 16, 20, 1, 52, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 3, 10, 14, 9, 21, tzinfo=datetime.timezone.utc), 'time_taken': 539551.0, 'time_delta': '6 days, 5:52:31', 'additions': 10, 'deletions': 10, 'state': 'closed'}, {'id': 385985939, 'number': 15154, 'closed': datetime.datetime(2020, 5, 6, 18, 1, 23, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 3, 10, 7, 55, 56, tzinfo=datetime.timezone.utc), 'time_taken': 4961127.0, 'time_delta': '57 days, 10:05:27', 'additions': 622, 'deletions': 252, 'state': 'closed'}, {'id': 385741415, 'number': 15145, 'closed': datetime.datetime(2020, 8, 6, 16, 56, 48, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 3, 9, 18, 14, 44, tzinfo=datetime.timezone.utc), 'time_taken': 12955324.0, 'time_delta': '149 days, 22:42:04', 'additions': 26, 'deletions': 3, 'state': 'closed'}, {'id': 385400779, 'number': 15140, 'closed': datetime.datetime(2020, 12, 1, 20, 53, 46, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 3, 9, 5, 57, 52, tzinfo=datetime.timezone.utc), 'time_taken': 23122554.0, 'time_delta': '267 days, 14:55:54', 'additions': 89, 'deletions': 24, 'state': 'closed'}, {'id': 385183455, 'number': 15135, 'closed': datetime.datetime(2020, 3, 9, 17, 5, 28, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 3, 7, 19, 17, 24, tzinfo=datetime.timezone.utc), 'time_taken': 164884.0, 'time_delta': '1 day, 21:48:04', 'additions': 6, 'deletions': 12, 'state': 'closed'}, {'id': 378738475, 'number': 14964, 'closed': datetime.datetime(2020, 5, 14, 16, 34, 8, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 2, 23, 18, 58, 4, tzinfo=datetime.timezone.utc), 'time_taken': 6989764.0, 'time_delta': '80 days, 21:36:04', 'additions': 13, 'deletions': 6, 'state': 'closed'}, {'id': 373766144, 'number': 14881, 'closed': datetime.datetime(2020, 2, 20, 16, 36, 59, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 2, 11, 16, 47, 48, tzinfo=datetime.timezone.utc), 'time_taken': 776951.0, 'time_delta': '8 days, 23:49:11', 'additions': 8, 'deletions': 8, 'state': 'closed'}, {'id': 372853438, 'number': 14872, 'closed': datetime.datetime(2020, 2, 12, 17, 30, 30, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 2, 9, 17, 35, 59, tzinfo=datetime.timezone.utc), 'time_taken': 258871.0, 'time_delta': '2 days, 23:54:31', 'additions': 9, 'deletions': 0, 'state': 'closed'}, {'id': 372842103, 'number': 14871, 'closed': datetime.datetime(2020, 3, 10, 7, 56, 31, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 2, 9, 15, 44, 13, tzinfo=datetime.timezone.utc), 'time_taken': 2563938.0, 'time_delta': '29 days, 16:12:18', 'additions': 196, 'deletions': 0, 'state': 'closed'}, {'id': 372573876, 'number': 14869, 'closed': datetime.datetime(2020, 2, 10, 15, 40, 46, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 2, 7, 19, 50, 44, tzinfo=datetime.timezone.utc), 'time_taken': 244202.0, 'time_delta': '2 days, 19:50:02', 'additions': 2, 'deletions': 0, 'state': 'closed'}, {'id': 372072589, 'number': 14863, 'closed': datetime.datetime(2020, 2, 10, 16, 53, 51, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 2, 6, 19, 30, 35, tzinfo=datetime.timezone.utc), 'time_taken': 336196.0, 'time_delta': '3 days, 21:23:16', 'additions': 0, 'deletions': 2, 'state': 'closed'}, {'id': 371579402, 'number': 14857, 'closed': datetime.datetime(2020, 2, 5, 21, 13, 12, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 2, 5, 20, 51, 50, tzinfo=datetime.timezone.utc), 'time_taken': 1282.0, 'time_delta': '0:21:22', 'additions': 4, 'deletions': 4, 'state': 'closed'}, {'id': 368221531, 'number': 14828, 'closed': datetime.datetime(2020, 2, 11, 16, 44, 34, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 1, 28, 20, 46, 48, tzinfo=datetime.timezone.utc), 'time_taken': 1195066.0, 'time_delta': '13 days, 19:57:46', 'additions': 172, 'deletions': 22, 'state': 'closed'}]"
255540522,Chapel-protobuf,Aniket21mathur/Chapel-protobuf,Chapel,0,13,4,1,131,5,4,0,"[{'id': 469651882, 'number': 33, 'closed': datetime.datetime(2020, 8, 24, 15, 48, 56, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 18, 17, 59, 4, tzinfo=datetime.timezone.utc), 'time_taken': 510592.0, 'time_delta': '5 days, 21:49:52', 'additions': 159, 'deletions': 1, 'state': 'closed'}, {'id': 468949816, 'number': 32, 'closed': datetime.datetime(2020, 8, 28, 13, 11, 5, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 17, 16, 49, 17, tzinfo=datetime.timezone.utc), 'time_taken': 937308.0, 'time_delta': '10 days, 20:21:48', 'additions': 291, 'deletions': 4, 'state': 'closed'}, {'id': 468273170, 'number': 30, 'closed': datetime.datetime(2020, 8, 21, 17, 19, 38, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 15, 7, 17, 43, tzinfo=datetime.timezone.utc), 'time_taken': 554515.0, 'time_delta': '6 days, 10:01:55', 'additions': 286, 'deletions': 0, 'state': 'closed'}, {'id': 465121946, 'number': 29, 'closed': datetime.datetime(2020, 8, 17, 16, 49, 39, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 9, 8, 5, 41, tzinfo=datetime.timezone.utc), 'time_taken': 722638.0, 'time_delta': '8 days, 8:43:58', 'additions': 604, 'deletions': 15, 'state': 'closed'}, {'id': 461022518, 'number': 24, 'closed': datetime.datetime(2020, 8, 17, 16, 13, 57, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 1, 11, 16, 37, tzinfo=datetime.timezone.utc), 'time_taken': 1400240.0, 'time_delta': '16 days, 4:57:20', 'additions': 314, 'deletions': 12, 'state': 'closed'}, {'id': 456722940, 'number': 23, 'closed': datetime.datetime(2020, 8, 12, 5, 54, 47, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 26, 8, 59, 20, tzinfo=datetime.timezone.utc), 'time_taken': 1457727.0, 'time_delta': '16 days, 20:55:27', 'additions': 138, 'deletions': 11, 'state': 'closed'}, {'id': 456634878, 'number': 22, 'closed': datetime.datetime(2020, 8, 12, 5, 48, 51, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 25, 16, 22, 51, tzinfo=datetime.timezone.utc), 'time_taken': 1517160.0, 'time_delta': '17 days, 13:26:00', 'additions': 350, 'deletions': 3, 'state': 'closed'}, {'id': 454690564, 'number': 21, 'closed': datetime.datetime(2020, 7, 25, 10, 39, 56, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 21, 19, 4, 22, tzinfo=datetime.timezone.utc), 'time_taken': 315334.0, 'time_delta': '3 days, 15:35:34', 'additions': 5, 'deletions': 39, 'state': 'closed'}, {'id': 452606160, 'number': 20, 'closed': datetime.datetime(2020, 7, 20, 13, 59, 7, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 19, 14, 57, 51, tzinfo=datetime.timezone.utc), 'time_taken': 82876.0, 'time_delta': '23:01:16', 'additions': 346, 'deletions': 11, 'state': 'closed'}, {'id': 448089114, 'number': 16, 'closed': datetime.datetime(2020, 7, 15, 18, 7, 21, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 13, 8, 25, 56, tzinfo=datetime.timezone.utc), 'time_taken': 207685.0, 'time_delta': '2 days, 9:41:25', 'additions': 153, 'deletions': 4, 'state': 'closed'}, {'id': 447737361, 'number': 15, 'closed': datetime.datetime(2020, 7, 14, 18, 48, 40, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 11, 8, 5, 1, tzinfo=datetime.timezone.utc), 'time_taken': 297819.0, 'time_delta': '3 days, 10:43:39', 'additions': 37, 'deletions': 3, 'state': 'closed'}, {'id': 447737178, 'number': 14, 'closed': datetime.datetime(2020, 7, 18, 11, 48, 57, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 11, 8, 3, 17, tzinfo=datetime.timezone.utc), 'time_taken': 618340.0, 'time_delta': '7 days, 3:45:40', 'additions': 1427, 'deletions': 212, 'state': 'closed'}, {'id': 446928211, 'number': 13, 'closed': datetime.datetime(2020, 7, 14, 16, 35, 45, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 9, 15, 17, 58, tzinfo=datetime.timezone.utc), 'time_taken': 436667.0, 'time_delta': '5 days, 1:17:47', 'additions': 43, 'deletions': 31, 'state': 'closed'}, {'id': 443919371, 'number': 11, 'closed': datetime.datetime(2020, 7, 9, 14, 56, 11, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 3, 8, 14, 13, tzinfo=datetime.timezone.utc), 'time_taken': 542518.0, 'time_delta': '6 days, 6:41:58', 'additions': 609, 'deletions': 108, 'state': 'closed'}, {'id': 437438569, 'number': 10, 'closed': datetime.datetime(2020, 6, 29, 17, 29, 22, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 20, 17, 27, 16, tzinfo=datetime.timezone.utc), 'time_taken': 777726.0, 'time_delta': '9 days, 0:02:06', 'additions': 182, 'deletions': 21, 'state': 'closed'}, {'id': 434642669, 'number': 8, 'closed': datetime.datetime(2020, 6, 20, 16, 51, 45, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 15, 16, 18, 52, tzinfo=datetime.timezone.utc), 'time_taken': 433973.0, 'time_delta': '5 days, 0:32:53', 'additions': 94, 'deletions': 153, 'state': 'closed'}, {'id': 432652261, 'number': 6, 'closed': datetime.datetime(2020, 6, 15, 16, 19, 25, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 10, 19, 23, 12, tzinfo=datetime.timezone.utc), 'time_taken': 420973.0, 'time_delta': '4 days, 20:56:13', 'additions': 127, 'deletions': 153, 'state': 'closed'}, {'id': 428074183, 'number': 5, 'closed': datetime.datetime(2020, 6, 15, 15, 52, 58, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 4, 20, 36, 45, tzinfo=datetime.timezone.utc), 'time_taken': 933373.0, 'time_delta': '10 days, 19:16:13', 'additions': 32, 'deletions': 0, 'state': 'closed'}, {'id': 425958313, 'number': 2, 'closed': datetime.datetime(2020, 6, 4, 20, 24, 54, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 1, 12, 46, 33, tzinfo=datetime.timezone.utc), 'time_taken': 286701.0, 'time_delta': '3 days, 7:38:21', 'additions': 605, 'deletions': 0, 'state': 'closed'}]"
