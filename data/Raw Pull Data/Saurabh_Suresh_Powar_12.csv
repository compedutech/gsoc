pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
1266629502,Added Leaky ReLU activation function (1D & 3D),"- Solves #46 
@milancurcic ",True,123,https://api.github.com/repos/modern-fortran/neural-fortran/pulls/123,https://github.com/modern-fortran/neural-fortran/pull/123,closed,149,57,6,8,14,4,1,1,[{'name': 'enhancement'}],2023-03-07 16:56:47+00:00,2023-03-17 19:07:35+00:00,871848.0,"10 days, 2:10:48","[{'comment_id': 1128538576, 'comment_body': '```suggestion\r\n                              leaky_relu, leaky_relu_prime, &\r\n```', 'comment_created': datetime.datetime(2023, 3, 7, 20, 19, 49, tzinfo=datetime.timezone.utc), 'commenter': 'milancurcic', 'type': 'User'}, {'comment_id': 1129833593, 'comment_body': 'It should be `optional` everywhere.\r\nIn this case, I would use something like the `stdlib` `optval` function.', 'comment_created': datetime.datetime(2023, 3, 8, 17, 49, 52, tzinfo=datetime.timezone.utc), 'commenter': 'jvdp1', 'type': 'User'}, {'comment_id': 1129844325, 'comment_body': ""I'd like to evaluate the performance impact of using `optval` since an activation function is invoked many times and are at the very bottom of the call stack. It would be a good opportunity to use stdlib as a dependency, and via fpm it will be easy. But we'd need to add it as a CMake dependency, which will require a bit more CMake code here. I'm wary of making this PR any larger because it's @Spnetic-5's first PR.\r\n\r\nOnce we do `activation_params` derived type (in a separate PR), there's a technique that will allow us to not rely on `present` or `optval`."", 'comment_created': datetime.datetime(2023, 3, 8, 18, 0, 27, tzinfo=datetime.timezone.utc), 'commenter': 'milancurcic', 'type': 'User'}, {'comment_id': 1129918773, 'comment_body': 'Good points! I agree with you.', 'comment_created': datetime.datetime(2023, 3, 8, 19, 14, 13, tzinfo=datetime.timezone.utc), 'commenter': 'jvdp1', 'type': 'User'}]","[{'commit_sha': '94744fb93d99fd216a461dd116c7328648a30c88', 'committer_username': 'Spnetic-5', 'committer_name': 'Saurabh Suresh Powar', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 8, 16, 26, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0a8d4def1f10c32642bc55da35ec6a77f319dfb7', 'committer_username': 'Spnetic-5', 'committer_name': 'Saurabh Suresh Powar', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 8, 16, 26, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8a0581298fcff40772e4983ef465d009d41a324e', 'committer_username': 'milancurcic', 'committer_name': 'Milan Curcic', 'committer_email': 'caomaco@gmail.com', 'commit_date': datetime.datetime(2013, 4, 12, 4, 47, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6914b910caaa6490b1eb0239def5c338e5850689', 'committer_username': 'Spnetic-5', 'committer_name': 'Saurabh Suresh Powar', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 8, 16, 26, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '131c516f3576ee17523fe41a85560fb2007a7096', 'committer_username': 'Spnetic-5', 'committer_name': 'Saurabh Suresh Powar', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 8, 16, 26, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1b310913f9d83da893f2c81bca2b5be393673734', 'committer_username': 'Spnetic-5', 'committer_name': 'Saurabh Suresh Powar', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 8, 16, 26, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '87c3db77ad5e6f500f849a03ef12400e8a2d9dfd', 'committer_username': 'Spnetic-5', 'committer_name': 'Saurabh Suresh Powar', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 8, 16, 26, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3b1d066cc47cd9c55ca39c92c798c3f6e2716cd8', 'committer_username': 'milancurcic', 'committer_name': 'Milan Curcic', 'committer_email': 'caomaco@gmail.com', 'commit_date': datetime.datetime(2013, 4, 12, 4, 47, 43, tzinfo=datetime.timezone.utc)}]",Saurabh Suresh Powar,66636289,,User,,54,,89,47
1366616608,GSoC Optimizers: Example program to fit a quadratic function,"Solving #133 @milancurcic 


**Optimizers to be implemented:**
- [x] Batch gradient descent
- [x] Mini-batch gradient descent
- [x] Stochastic gradient descent",True,134,https://api.github.com/repos/modern-fortran/neural-fortran/pulls/134,https://github.com/modern-fortran/neural-fortran/pull/134,closed,180,0,2,9,7,7,0,0,[],2023-05-26 16:33:52+00:00,2023-06-12 14:18:03+00:00,1460651.0,"16 days, 21:44:11","[{'comment_id': 1218153781, 'comment_body': '```suggestion\r\n  xtest = [((i - 1) * 2 / test_size, i = 1, test_size)]\r\n```', 'comment_created': datetime.datetime(2023, 6, 5, 14, 26, 16, tzinfo=datetime.timezone.utc), 'commenter': 'milancurcic', 'type': 'User'}, {'comment_id': 1218155213, 'comment_body': ""Don't need to deallocate at the end of the program\r\n\r\n```suggestion\r\n```"", 'comment_created': datetime.datetime(2023, 6, 5, 14, 27, 22, tzinfo=datetime.timezone.utc), 'commenter': 'milancurcic', 'type': 'User'}, {'comment_id': 1218156344, 'comment_body': 'You may want to put the `end program quadratic_fit` statement at the very end of the program (after subroutine definitions), and place a `contains` here so that the subroutines that follow get the program scope.', 'comment_created': datetime.datetime(2023, 6, 5, 14, 28, 12, tzinfo=datetime.timezone.utc), 'commenter': 'milancurcic', 'type': 'User'}, {'comment_id': 1218160919, 'comment_body': ""I don't think you'll need a custom subroutine for updating here.\r\n\r\nI think you can just use the `network % update` method as in\r\n\r\nhttps://github.com/modern-fortran/neural-fortran/blob/8293118220ec1e9c16abda766e3b273f161592b4/src/nf/nf_network_submodule.f90#L553\r\n\r\nand in your subroutines that would probably be\r\n\r\n```fortran\r\ncall net % update(learning_rate / batch_size)\r\n```"", 'comment_created': datetime.datetime(2023, 6, 5, 14, 31, 32, tzinfo=datetime.timezone.utc), 'commenter': 'milancurcic', 'type': 'User'}, {'comment_id': 1222026596, 'comment_body': '@Spnetic-5 sorry I mistyped the SGD subroutine in my earlier comment. I meant that the mini-batches should be shuffled here in the minibatch GD :).', 'comment_created': datetime.datetime(2023, 6, 7, 18, 47, 38, tzinfo=datetime.timezone.utc), 'commenter': 'milancurcic', 'type': 'User'}, {'comment_id': 1222028325, 'comment_body': ""Yeah, even I got confused as there are no batches in SGD, I'll update the changes"", 'comment_created': datetime.datetime(2023, 6, 7, 18, 49, tzinfo=datetime.timezone.utc), 'commenter': 'Spnetic-5', 'type': 'User'}, {'comment_id': 1222029587, 'comment_body': ""It's the same approach as what you already did, but just shuffling the start_indices for mini-batches rather than all indices in the dataset."", 'comment_created': datetime.datetime(2023, 6, 7, 18, 49, 53, tzinfo=datetime.timezone.utc), 'commenter': 'milancurcic', 'type': 'User'}]","[{'commit_sha': '614b6ec24f53f0f72fe76007c9737bd566337556', 'committer_username': 'Spnetic-5', 'committer_name': 'Saurabh Suresh Powar', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 8, 16, 26, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6fac0256748bced6904b654706c1fed4c44c6a4e', 'committer_username': 'Spnetic-5', 'committer_name': 'Saurabh Suresh Powar', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 8, 16, 26, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '66b4e8ac3a1896f8a8b82c9b9a5dc36a573316a1', 'committer_username': 'Spnetic-5', 'committer_name': 'Saurabh Suresh Powar', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 8, 16, 26, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '441c1e497134f7b4623ed9bde7d75e734dd2c81a', 'committer_username': 'Spnetic-5', 'committer_name': 'Saurabh Suresh Powar', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 8, 16, 26, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bda1968f70d0cbf03bb275cb0bbb043f74d3b102', 'committer_username': 'milancurcic', 'committer_name': 'Milan Curcic', 'committer_email': 'caomaco@gmail.com', 'commit_date': datetime.datetime(2013, 4, 12, 4, 47, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '728868f8f516aa767abf99ea8056a69914027211', 'committer_username': 'Spnetic-5', 'committer_name': 'Saurabh Suresh Powar', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 8, 16, 26, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bd6e58a05ae130294ec1e3e105e951d3b50d221c', 'committer_username': 'Spnetic-5', 'committer_name': 'Saurabh Suresh Powar', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 8, 16, 26, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e0313dfb5164013e3d9b60eb6ab95be49bf0177a', 'committer_username': 'milancurcic', 'committer_name': 'Milan Curcic', 'committer_email': 'caomaco@gmail.com', 'commit_date': datetime.datetime(2013, 4, 12, 4, 47, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2ba47c195f2583550264593ccaf3876076faff04', 'committer_username': 'milancurcic', 'committer_name': 'Milan Curcic', 'committer_email': 'caomaco@gmail.com', 'commit_date': datetime.datetime(2013, 4, 12, 4, 47, 43, tzinfo=datetime.timezone.utc)}]",Saurabh Suresh Powar,66636289,,User,,54,,89,47
1395801823,Added RMSProp Optimizer subroutine,"Solves #136 
This pull request adds an implementation of the RMSprop optimizer subroutine to the existing quadratic example. 

Approach:
- Initialized `rms_weights` and `rms_gradients` arrays of appropriate dimensions.
- Added a nested loop over the network layers to update the weights using the RMSprop update rule.
- Calculated `rms_weights` and `rms_gradients` using the decay rate and current weights/gradients.
- Updated the weights using the RMSprop update rule: `weights = weights - (learning_rate / sqrt(rms_weights + epsilon)) * gradients`.
",True,144,https://api.github.com/repos/modern-fortran/neural-fortran/pulls/144,https://github.com/modern-fortran/neural-fortran/pull/144,closed,81,2,1,4,5,2,0,0,[],2023-06-16 14:14:18+00:00,2023-06-20 16:24:49+00:00,353431.0,"4 days, 2:10:31","[{'comment_id': 1232516859, 'comment_body': 'According to slide 29 of [Hinton (2012)](https://www.cs.toronto.edu/~tijmen/csc321/slides/lecture_slides_lec6.pdf), `learning_rate` should be divided by `rms_gradients`, not `rms_weights`, correct?\r\n\r\n```suggestion\r\n            weights = weights - (learning_rate / sqrt(rms_gradients + epsilon)) * gradients\r\n```', 'comment_created': datetime.datetime(2023, 6, 16, 17, 4, 47, tzinfo=datetime.timezone.utc), 'commenter': 'milancurcic', 'type': 'User'}, {'comment_id': 1232517340, 'comment_body': 'Make `epsilon` a constant in the declaration, i.e. `real, parameter :: epsilon = 1e-8`.', 'comment_created': datetime.datetime(2023, 6, 16, 17, 5, 21, tzinfo=datetime.timezone.utc), 'commenter': 'milancurcic', 'type': 'User'}]","[{'commit_sha': '6efb8c449038cf53728517b26f9495f52b6fe18f', 'committer_username': 'Spnetic-5', 'committer_name': 'Saurabh Suresh Powar', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 8, 16, 26, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4799fd628aac9894858f9b9aab731191c3ae8ba0', 'committer_username': 'Spnetic-5', 'committer_name': 'Saurabh Suresh Powar', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 8, 16, 26, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'da36a65783093fbe1f837d76a4e40ab1e4895186', 'committer_username': 'Spnetic-5', 'committer_name': 'Saurabh Suresh Powar', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 8, 16, 26, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '642c07a1de770c9316811cbc42351558bcf5a389', 'committer_username': 'milancurcic', 'committer_name': 'Milan Curcic', 'committer_email': 'caomaco@gmail.com', 'commit_date': datetime.datetime(2013, 4, 12, 4, 47, 43, tzinfo=datetime.timezone.utc)}]",Saurabh Suresh Powar,66636289,,User,,54,,89,47
1404280905,Added Momentum and Nesterov modifications,"
Solves #137 ",True,148,https://api.github.com/repos/modern-fortran/neural-fortran/pulls/148,https://github.com/modern-fortran/neural-fortran/pull/148,closed,470,151,16,23,13,5,1,0,[{'name': 'enhancement'}],2023-06-22 23:49:30+00:00,2023-07-14 14:18:01+00:00,1866511.0,"21 days, 14:28:31","[{'comment_id': 1262578905, 'comment_body': 'Since this is only used in `check_convergence`, declare it there instead of here and make it a `parameter`.', 'comment_created': datetime.datetime(2023, 7, 13, 13, 39, 48, tzinfo=datetime.timezone.utc), 'commenter': 'milancurcic', 'type': 'User'}, {'comment_id': 1262599342, 'comment_body': ""We actually need to test for convergence of loss to some target low value, not to the value of loss from the previous iteration. Currently these convergence tests are passing but if you print out the network outputs you'll see that the solution is not actually converging because you're exiting the loop too early. Rather checking for `abs(loss - prev_loss) < tolerance`, you need to check for `loss < tolerance`.\r\n\r\n(I checked and the solutions are actually converging which is good news; you just need to fix the convergence tests)."", 'comment_created': datetime.datetime(2023, 7, 13, 13, 54, 38, tzinfo=datetime.timezone.utc), 'commenter': 'milancurcic', 'type': 'User'}, {'comment_id': 1262601663, 'comment_body': 'This should be a pure function.', 'comment_created': datetime.datetime(2023, 7, 13, 13, 56, 14, tzinfo=datetime.timezone.utc), 'commenter': 'milancurcic', 'type': 'User'}, {'comment_id': 1262603354, 'comment_body': ""Notice also that if the convergence test doesn't pass, you don't actually set the function result to `.false.`. A better way to write this is:\r\n\r\n```fortran\r\nconverged = loss < tolerance\r\n```"", 'comment_created': datetime.datetime(2023, 7, 13, 13, 57, 28, tzinfo=datetime.timezone.utc), 'commenter': 'milancurcic', 'type': 'User'}, {'comment_id': 1262604715, 'comment_body': ""These are used in the `check_convergence` function; it's generally less readable and more error-prone to keep the global state like this. Declare `loss` inside the function. "", 'comment_created': datetime.datetime(2023, 7, 13, 13, 58, 25, tzinfo=datetime.timezone.utc), 'commenter': 'milancurcic', 'type': 'User'}]","[{'commit_sha': '518e9bacbaead7f00edb8eb0cf51bc72edf41fec', 'committer_username': 'Spnetic-5', 'committer_name': 'Saurabh Suresh Powar', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 8, 16, 26, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3c99216b27380fdecd8a8a1977fcb6920c587537', 'committer_username': 'Spnetic-5', 'committer_name': 'Saurabh Suresh Powar', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 8, 16, 26, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e531ab32e11072d17de72dc80d0348d3bd5b68cc', 'committer_username': 'Spnetic-5', 'committer_name': 'Saurabh Suresh Powar', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 8, 16, 26, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c3ce4cae44fbfc5456c088602e6056d8cffeccff', 'committer_username': 'Spnetic-5', 'committer_name': 'Saurabh Suresh Powar', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 8, 16, 26, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '674e6c8a1deecbe23761ddf8c152e35fc73c4953', 'committer_username': 'Spnetic-5', 'committer_name': 'Saurabh Suresh Powar', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 8, 16, 26, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '38b6acd2ccd4abb53fb13c73496e1266ea414a09', 'committer_username': 'milancurcic', 'committer_name': 'Milan Curcic', 'committer_email': 'caomaco@gmail.com', 'commit_date': datetime.datetime(2013, 4, 12, 4, 47, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f9b41e64da71256b65bd66cf7897d1266bf1620c', 'committer_username': 'milancurcic', 'committer_name': 'Milan Curcic', 'committer_email': 'caomaco@gmail.com', 'commit_date': datetime.datetime(2013, 4, 12, 4, 47, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6146b75f173943a5326206ea4fe4cfcf249d18bc', 'committer_username': 'milancurcic', 'committer_name': 'Milan Curcic', 'committer_email': 'caomaco@gmail.com', 'commit_date': datetime.datetime(2013, 4, 12, 4, 47, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '94f6a82f5d41a66030716644999f017c7ad5e271', 'committer_username': 'milancurcic', 'committer_name': 'Milan Curcic', 'committer_email': 'caomaco@gmail.com', 'commit_date': datetime.datetime(2013, 4, 12, 4, 47, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'df756ab63bee351c5b8e19bcedf4031c4c34017c', 'committer_username': 'Spnetic-5', 'committer_name': 'Saurabh Suresh Powar', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 8, 16, 26, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bff6c4e0f383fe657edb560c9ab8ee3ddbbffff8', 'committer_username': 'milancurcic', 'committer_name': 'Milan Curcic', 'committer_email': 'caomaco@gmail.com', 'commit_date': datetime.datetime(2013, 4, 12, 4, 47, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '642b2f2c560df3f5046d7ad639800a509f5d3505', 'committer_username': 'milancurcic', 'committer_name': 'Milan Curcic', 'committer_email': 'caomaco@gmail.com', 'commit_date': datetime.datetime(2013, 4, 12, 4, 47, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd27bf0916f473cd445a5e470c462a1e68f7d859a', 'committer_username': 'milancurcic', 'committer_name': 'Milan Curcic', 'committer_email': 'caomaco@gmail.com', 'commit_date': datetime.datetime(2013, 4, 12, 4, 47, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '368a0100e78b0cf79afd7918f86f4f339bccd5c3', 'committer_username': 'milancurcic', 'committer_name': 'Milan Curcic', 'committer_email': 'caomaco@gmail.com', 'commit_date': datetime.datetime(2013, 4, 12, 4, 47, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2465cfaf4590666a0ceb18f65a4e73050ace97b3', 'committer_username': 'Spnetic-5', 'committer_name': 'Saurabh Suresh Powar', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 8, 16, 26, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '82192861bb4b208add7922774c67715c2422bd71', 'committer_username': 'milancurcic', 'committer_name': 'Milan Curcic', 'committer_email': 'caomaco@gmail.com', 'commit_date': datetime.datetime(2013, 4, 12, 4, 47, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f94c2186f45944d589f38912660fe30a2d12064b', 'committer_username': 'milancurcic', 'committer_name': 'Milan Curcic', 'committer_email': 'caomaco@gmail.com', 'commit_date': datetime.datetime(2013, 4, 12, 4, 47, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5e23fcd7d4992805524febc9080cfb90021cd027', 'committer_username': 'Spnetic-5', 'committer_name': 'Saurabh Suresh Powar', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 8, 16, 26, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '92575eb23a2db443cde4c7bfbe359b5aa5b9ccd0', 'committer_username': 'Spnetic-5', 'committer_name': 'Saurabh Suresh Powar', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 8, 16, 26, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b4ee014d32f6920edb86a7dba7ecd2425eca7129', 'committer_username': 'milancurcic', 'committer_name': 'Milan Curcic', 'committer_email': 'caomaco@gmail.com', 'commit_date': datetime.datetime(2013, 4, 12, 4, 47, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'deb98a671aee0bf036992c592a8bc85475bb9e0a', 'committer_username': 'milancurcic', 'committer_name': 'Milan Curcic', 'committer_email': 'caomaco@gmail.com', 'commit_date': datetime.datetime(2013, 4, 12, 4, 47, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'afaae1ae9eb5fffb9772348bf34f4822d5bb6846', 'committer_username': 'milancurcic', 'committer_name': 'Milan Curcic', 'committer_email': 'caomaco@gmail.com', 'commit_date': datetime.datetime(2013, 4, 12, 4, 47, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '18f9aeaa98983443131910b41b7c7f81100ecf7c', 'committer_username': 'milancurcic', 'committer_name': 'Milan Curcic', 'committer_email': 'caomaco@gmail.com', 'commit_date': datetime.datetime(2013, 4, 12, 4, 47, 43, tzinfo=datetime.timezone.utc)}]",Saurabh Suresh Powar,66636289,,User,,54,,89,47
1438401245,Added Adam optimizer implementation,"#### Adam Implementation:

- Momentum Update:
`m = beta1 * m + (1 - beta1) * gradient`

- Adaptive Learning Rates Update:
`v = beta2 * v + (1 - beta2) * gradient**2`

- Bias-Corrected First and Second Moment Estimates:
`m_hat = m / (1 - beta1**t)`
`v_hat = v / (1 - beta2**t)`

- Parameter Update:
`param = param - learning_rate * m_hat / (sqrt(v_hat) + epsilon)`",True,150,https://api.github.com/repos/modern-fortran/neural-fortran/pulls/150,https://github.com/modern-fortran/neural-fortran/pull/150,closed,230,74,6,16,4,10,1,0,[{'name': 'enhancement'}],2023-07-18 03:00:42+00:00,2023-07-26 14:14:06+00:00,731604.0,"8 days, 11:13:24","[{'comment_id': 1266806684, 'comment_body': '`m` and `v` will always be either both allocated or deallocated so we can fold the second `if` block into the first one.\r\n\r\n```suggestion\r\n    if (.not. allocated(self % m)) then\r\n      allocate(self % m(num_params), self % v(num_params))\r\n      self % m = 0\r\n      self % v = 0\r\n    end if\r\n```', 'comment_created': datetime.datetime(2023, 7, 18, 13, 49, 39, tzinfo=datetime.timezone.utc), 'commenter': 'milancurcic', 'type': 'User'}, {'comment_id': 1266810396, 'comment_body': ""Let's add the reference to the paper here."", 'comment_created': datetime.datetime(2023, 7, 18, 13, 52, 20, tzinfo=datetime.timezone.utc), 'commenter': 'milancurcic', 'type': 'User'}, {'comment_id': 1270671702, 'comment_body': 'Could `v` be allocated and not `m`?\r\nI suggest to check the status of both `m` and `v`.', 'comment_created': datetime.datetime(2023, 7, 21, 13, 22, 48, tzinfo=datetime.timezone.utc), 'commenter': 'jvdp1', 'type': 'User'}, {'comment_id': 1270744916, 'comment_body': ""That would be an error state, see https://github.com/modern-fortran/neural-fortran/pull/150#discussion_r1266806684. `v` and `m` will always have the same allocation status.\r\n\r\n@Spnetic-5 let's make `m` and `v` `private` so that the user can't fiddle with them directly.\r\n\r\nI'm also thinking whether we should make the `init` method `private` and invoke it from `minimize`. This decreases the number of places in the code at the network level that the optimizer instance is modified."", 'comment_created': datetime.datetime(2023, 7, 21, 14, 31, 6, tzinfo=datetime.timezone.utc), 'commenter': 'milancurcic', 'type': 'User'}, {'comment_id': 1274337064, 'comment_body': 'Why do you have a factor of 2 here? In the [paper, Algorithm 2, line 6](https://arxiv.org/pdf/1711.05101.pdf) I see just $\\lambda \\theta_{t-1}$ (i.e. `self % weight_decay * param`).\r\n\r\nAnother question is, based on my understanding from the paper, applying `weight_decay * param` here is L2 regularization. However, for decoupled weight decay regularization, it seems like it should be added below on L188.', 'comment_created': datetime.datetime(2023, 7, 26, 3, 34, 58, tzinfo=datetime.timezone.utc), 'commenter': 'milancurcic', 'type': 'User'}, {'comment_id': 1274337888, 'comment_body': 'Following up on my comment above, should the decoupled weight regularization not be:\r\n\r\n```suggestion\r\n      param = param - self % learning_rate &\r\n        * m_hat / (sqrt(v_hat) + self % epsilon) &\r\n        - self % weight_decay * param\r\n```', 'comment_created': datetime.datetime(2023, 7, 26, 3, 37, 8, tzinfo=datetime.timezone.utc), 'commenter': 'milancurcic', 'type': 'User'}, {'comment_id': 1274370681, 'comment_body': ""You're right, the scaling factor of 2 is not present in the paper. The reason was when the weight decay coefficient is large, the term `weight_decay * param` can become very large.\r\n\r\nPlease review the recent changes.\r\n\r\n"", 'comment_created': datetime.datetime(2023, 7, 26, 4, 48, 38, tzinfo=datetime.timezone.utc), 'commenter': 'Spnetic-5', 'type': 'User'}, {'comment_id': 1274372317, 'comment_body': 'Yeah, have made that change, just pushed', 'comment_created': datetime.datetime(2023, 7, 26, 4, 51, 53, tzinfo=datetime.timezone.utc), 'commenter': 'Spnetic-5', 'type': 'User'}, {'comment_id': 1274918279, 'comment_body': 'Thanks @Spnetic-5. We still need to decide how to handle the two different regularization approaches (L2 and decoupled). We currently have both enabled if `weight_decay > 0`. However, I think only one or the other should be applied at a time. PyTorch and Keras differentiate the two by providing two separate classes: Adam and AdamW. I think this is unnecessary in our case. We can have just Adam for now, and allow two different regularization approaches to be applied via input arguments. What do you think about using two separate weight decays to control this, i.e.:\r\n\r\n```fortran\r\n  real :: weight_decay_l2 = 0  ! L2 regularization (Adam)\r\n  real :: weight_decay_decoupled = 0 ! decoupled weight decay regularization (AdamW)\r\n```', 'comment_created': datetime.datetime(2023, 7, 26, 12, 56, 26, tzinfo=datetime.timezone.utc), 'commenter': 'milancurcic', 'type': 'User'}, {'comment_id': 1274948430, 'comment_body': ""Yup, I agree that having two separate input `weight_decay` arguments is a good approach. So by default, both weight decays will be set to 0, so no regularization will be applied. I'll go ahead and do the changes.\r\n\r\nThank you for the suggestion!"", 'comment_created': datetime.datetime(2023, 7, 26, 13, 20, 20, tzinfo=datetime.timezone.utc), 'commenter': 'Spnetic-5', 'type': 'User'}]","[{'commit_sha': 'c90723642dae3e70dc7a3a7945902ba0497dd6d1', 'committer_username': 'Spnetic-5', 'committer_name': 'Saurabh Suresh Powar', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 8, 16, 26, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '67caccb66eccf37e28e4cc259c7f6c2596ece4b1', 'committer_username': 'Spnetic-5', 'committer_name': 'Saurabh Suresh Powar', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 8, 16, 26, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3990bd3f8b9a92fda3b03383202b7b037f76bba6', 'committer_username': 'Spnetic-5', 'committer_name': 'Saurabh Suresh Powar', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 8, 16, 26, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2b7d86dae75c7fe0c5cbe8c67bbbeb0cf9556201', 'committer_username': 'Spnetic-5', 'committer_name': 'Saurabh Suresh Powar', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 8, 16, 26, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9e6efbfce576bd81d0e04378c0e5ededecc9ea1d', 'committer_username': 'milancurcic', 'committer_name': 'Milan Curcic', 'committer_email': 'caomaco@gmail.com', 'commit_date': datetime.datetime(2013, 4, 12, 4, 47, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e0b91ea8016e56d782b990e8e446e6591b23ae5e', 'committer_username': 'milancurcic', 'committer_name': 'Milan Curcic', 'committer_email': 'caomaco@gmail.com', 'commit_date': datetime.datetime(2013, 4, 12, 4, 47, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '879b4918706424f5bacb11360913a0a7be5dee2c', 'committer_username': 'Spnetic-5', 'committer_name': 'Saurabh Suresh Powar', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 8, 16, 26, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1ade50c31bce604264b00fd07c10a46d0fe684de', 'committer_username': 'Spnetic-5', 'committer_name': 'Saurabh Suresh Powar', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 8, 16, 26, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6884fd506efad95766b69e463fbc15a4a1106b9b', 'committer_username': 'Spnetic-5', 'committer_name': 'Saurabh Suresh Powar', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 8, 16, 26, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9ebd471392fccd604f280cfc3c45366ab9395400', 'committer_username': 'Spnetic-5', 'committer_name': 'Saurabh Suresh Powar', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 8, 16, 26, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8f326b95ddcb2ccead030dcd4f516c1504c468f7', 'committer_username': 'milancurcic', 'committer_name': 'Milan Curcic', 'committer_email': 'caomaco@gmail.com', 'commit_date': datetime.datetime(2013, 4, 12, 4, 47, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '72150af806139ea5374533fa9f33ff7c0054e1f3', 'committer_username': 'Spnetic-5', 'committer_name': 'Saurabh Suresh Powar', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 8, 16, 26, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '53fbe01457b5f2c2c351cf68e01f31fdc252bfd4', 'committer_username': 'Spnetic-5', 'committer_name': 'Saurabh Suresh Powar', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 8, 16, 26, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '32c3766cad71933ea2efb7ed57b7980944098ff4', 'committer_username': 'Spnetic-5', 'committer_name': 'Saurabh Suresh Powar', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 8, 16, 26, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cd8320f25fe8c7242e0eea28f8de5331123d67bc', 'committer_username': 'milancurcic', 'committer_name': 'Milan Curcic', 'committer_email': 'caomaco@gmail.com', 'commit_date': datetime.datetime(2013, 4, 12, 4, 47, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '84277f27ae6a297bb8da8f0180d8c516213e8ba1', 'committer_username': 'milancurcic', 'committer_name': 'Milan Curcic', 'committer_email': 'caomaco@gmail.com', 'commit_date': datetime.datetime(2013, 4, 12, 4, 47, 43, tzinfo=datetime.timezone.utc)}]",Saurabh Suresh Powar,66636289,,User,,54,,89,47
1453204362,Adagrad Optimizer Implementation,Reference: [PyTorch Docs]( https://pytorch.org/docs/stable/generated/torch.optim.Adagrad.html#torch.optim.Adagrad),True,154,https://api.github.com/repos/modern-fortran/neural-fortran/pulls/154,https://github.com/modern-fortran/neural-fortran/pull/154,closed,158,10,6,7,1,4,0,0,[],2023-07-28 05:14:20+00:00,2023-08-06 02:53:32+00:00,769152.0,"8 days, 21:39:12","[{'comment_id': 1277752174, 'comment_body': 'Need `learning_rate_decay` here ($\\eta$ in https://pytorch.org/docs/stable/generated/torch.optim.Adagrad.html#torch.optim.Adagrad)', 'comment_created': datetime.datetime(2023, 7, 28, 16, 22, 23, tzinfo=datetime.timezone.utc), 'commenter': 'milancurcic', 'type': 'User'}, {'comment_id': 1277753989, 'comment_body': 'I suggest:\r\n\r\n```\r\nparam = param &\r\n  - self % learning_rate * (m_hat / (sqrt(v_hat) + self % epsilon) + self % weight_decay_decoupled * param)\r\n```', 'comment_created': datetime.datetime(2023, 7, 28, 16, 24, 36, tzinfo=datetime.timezone.utc), 'commenter': 'milancurcic', 'type': 'User'}, {'comment_id': 1277754311, 'comment_body': 'The learning rate needs to adapt with every time step here, according to https://pytorch.org/docs/stable/generated/torch.optim.Adagrad.html#torch.optim.Adagrad.', 'comment_created': datetime.datetime(2023, 7, 28, 16, 24, 57, tzinfo=datetime.timezone.utc), 'commenter': 'milancurcic', 'type': 'User'}, {'comment_id': 1277756755, 'comment_body': ""Both Keras and PyTorch implement the `weight_decay` (the L2 kind) in Adagrad. We may as well do that since we're already here."", 'comment_created': datetime.datetime(2023, 7, 28, 16, 27, 42, tzinfo=datetime.timezone.utc), 'commenter': 'milancurcic', 'type': 'User'}]","[{'commit_sha': 'ffbf7f7aa86300621f613796d13fea2da1d9ec3e', 'committer_username': 'Spnetic-5', 'committer_name': 'Saurabh Suresh Powar', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 8, 16, 26, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'edfcfac6cdccaf4b1ff07b43af6c23b17c6f1d0d', 'committer_username': 'Spnetic-5', 'committer_name': 'Saurabh Suresh Powar', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 8, 16, 26, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '181aed1e91e34bd619a5fde02eb35c111b00e637', 'committer_username': 'Spnetic-5', 'committer_name': 'Saurabh Suresh Powar', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 8, 16, 26, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd79782b67a4cf052070e97079d539d0680efa526', 'committer_username': 'milancurcic', 'committer_name': 'Milan Curcic', 'committer_email': 'caomaco@gmail.com', 'commit_date': datetime.datetime(2013, 4, 12, 4, 47, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '72074150952eb06fac846642c709290625570f6b', 'committer_username': 'milancurcic', 'committer_name': 'Milan Curcic', 'committer_email': 'caomaco@gmail.com', 'commit_date': datetime.datetime(2013, 4, 12, 4, 47, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e2af3d47984c42b9780fd22eea6756645538c3d8', 'committer_username': 'milancurcic', 'committer_name': 'Milan Curcic', 'committer_email': 'caomaco@gmail.com', 'commit_date': datetime.datetime(2013, 4, 12, 4, 47, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '97b872fe412c18fc61035ad34e5ea1eb490cfb2c', 'committer_username': 'milancurcic', 'committer_name': 'Milan Curcic', 'committer_email': 'caomaco@gmail.com', 'commit_date': datetime.datetime(2013, 4, 12, 4, 47, 43, tzinfo=datetime.timezone.utc)}]",Saurabh Suresh Powar,66636289,,User,,54,,89,47
1469578110,Added Batch Normalization Layer modules,"Addresses #155  

@milancurcic , I've included the structure of the batch normalization layer. Could you please review it and confirm whether I'm in the correct direction?",False,157,https://api.github.com/repos/modern-fortran/neural-fortran/pulls/157,https://github.com/modern-fortran/neural-fortran/pull/157,open,313,3,10,9,7,4,0,0,[],2023-08-10 02:55:58+00:00,,0.0,,"[{'comment_id': 1304581862, 'comment_body': ""I don't think the shape for these should be `(num_features, num_features)`, but rather `(batch_size, num_features)`. The `batch_size` also won't be known until the first forward pass, so we should defer the allocation until then. In the forward pass, we could have a simple `allocated` check to see if they have not been allocated then, and allocate them to the shape of the `input`."", 'comment_created': datetime.datetime(2023, 8, 24, 16, 19, 49, tzinfo=datetime.timezone.utc), 'commenter': 'milancurcic', 'type': 'User'}, {'comment_id': 1304582464, 'comment_body': '`running_mean` and `running_var` are not yet updated anywhere, only initialized.', 'comment_created': datetime.datetime(2023, 8, 24, 16, 20, 26, tzinfo=datetime.timezone.utc), 'commenter': 'milancurcic', 'type': 'User'}, {'comment_id': 1304583731, 'comment_body': ""I'll add a simple test directly on the `batchnorm_layer` instance rather than the high-level `layer_type` instance so you get the idea how it will work."", 'comment_created': datetime.datetime(2023, 8, 24, 16, 21, 39, tzinfo=datetime.timezone.utc), 'commenter': 'milancurcic', 'type': 'User'}, {'comment_id': 1304586947, 'comment_body': 'Sorry, I meant `(num_features, batch_size)`.', 'comment_created': datetime.datetime(2023, 8, 24, 16, 24, 34, tzinfo=datetime.timezone.utc), 'commenter': 'milancurcic', 'type': 'User'}]","[{'commit_sha': '3b32c95a3d326862532178693344317963b6c7f3', 'committer_username': 'Spnetic-5', 'committer_name': 'Saurabh Suresh Powar', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 8, 16, 26, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1a0ff08f173bd347f482dff7c35a05f69ca6de0c', 'committer_username': 'Spnetic-5', 'committer_name': 'Saurabh Suresh Powar', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 8, 16, 26, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e4d8e1e9c156e57a19add5914d9002ad32cbdabd', 'committer_username': 'Spnetic-5', 'committer_name': 'Saurabh Suresh Powar', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 8, 16, 26, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '42335f18a7196efc5bf608bed11a01d03279d147', 'committer_username': 'Spnetic-5', 'committer_name': 'Saurabh Suresh Powar', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 8, 16, 26, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'de67a889b1bc21ca7b73c8d7a3544b6085040cfa', 'committer_username': 'milancurcic', 'committer_name': 'Milan Curcic', 'committer_email': 'caomaco@gmail.com', 'commit_date': datetime.datetime(2013, 4, 12, 4, 47, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b1e0d399def9d05cd0e6673ae547c51083c9f35f', 'committer_username': 'milancurcic', 'committer_name': 'Milan Curcic', 'committer_email': 'caomaco@gmail.com', 'commit_date': datetime.datetime(2013, 4, 12, 4, 47, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e8d040a5c02f9ae5a493984644069a38d0776926', 'committer_username': 'milancurcic', 'committer_name': 'Milan Curcic', 'committer_email': 'caomaco@gmail.com', 'commit_date': datetime.datetime(2013, 4, 12, 4, 47, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '17b06101fcc94f8d5f635f42e86a8d56cfa068bf', 'committer_username': 'milancurcic', 'committer_name': 'Milan Curcic', 'committer_email': 'caomaco@gmail.com', 'commit_date': datetime.datetime(2013, 4, 12, 4, 47, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7fb69f28c7f47d38feede10d6498e398a0aceb7a', 'committer_username': 'milancurcic', 'committer_name': 'Milan Curcic', 'committer_email': 'caomaco@gmail.com', 'commit_date': datetime.datetime(2013, 4, 12, 4, 47, 43, tzinfo=datetime.timezone.utc)}]",Saurabh Suresh Powar,66636289,,User,,54,,89,47

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
142798888,neural-fortran,modern-fortran/neural-fortran,Fortran,82,391,27,14,319,39,1,7,"[{'id': 1469578110, 'number': 157, 'closed': None, 'created': datetime.datetime(2023, 8, 10, 2, 55, 58, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 313, 'deletions': 3, 'state': 'open'}, {'id': 1453204362, 'number': 154, 'closed': datetime.datetime(2023, 8, 6, 2, 53, 32, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 7, 28, 5, 14, 20, tzinfo=datetime.timezone.utc), 'time_taken': 769152.0, 'time_delta': '8 days, 21:39:12', 'additions': 158, 'deletions': 10, 'state': 'closed'}, {'id': 1453197776, 'number': 153, 'closed': datetime.datetime(2023, 7, 28, 5, 6, 58, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 7, 28, 5, 6, 22, tzinfo=datetime.timezone.utc), 'time_taken': 36.0, 'time_delta': '0:00:36', 'additions': 310, 'deletions': 73, 'state': 'closed'}, {'id': 1438401245, 'number': 150, 'closed': datetime.datetime(2023, 7, 26, 14, 14, 6, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 7, 18, 3, 0, 42, tzinfo=datetime.timezone.utc), 'time_taken': 731604.0, 'time_delta': '8 days, 11:13:24', 'additions': 230, 'deletions': 74, 'state': 'closed'}, {'id': 1404280905, 'number': 148, 'closed': datetime.datetime(2023, 7, 14, 14, 18, 1, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 6, 22, 23, 49, 30, tzinfo=datetime.timezone.utc), 'time_taken': 1866511.0, 'time_delta': '21 days, 14:28:31', 'additions': 470, 'deletions': 151, 'state': 'closed'}, {'id': 1395801823, 'number': 144, 'closed': datetime.datetime(2023, 6, 20, 16, 24, 49, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 6, 16, 14, 14, 18, tzinfo=datetime.timezone.utc), 'time_taken': 353431.0, 'time_delta': '4 days, 2:10:31', 'additions': 81, 'deletions': 2, 'state': 'closed'}, {'id': 1366616608, 'number': 134, 'closed': datetime.datetime(2023, 6, 12, 14, 18, 3, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 5, 26, 16, 33, 52, tzinfo=datetime.timezone.utc), 'time_taken': 1460651.0, 'time_delta': '16 days, 21:44:11', 'additions': 180, 'deletions': 0, 'state': 'closed'}, {'id': 1266629502, 'number': 123, 'closed': datetime.datetime(2023, 3, 17, 19, 7, 35, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 3, 7, 16, 56, 47, tzinfo=datetime.timezone.utc), 'time_taken': 871848.0, 'time_delta': '10 days, 2:10:48', 'additions': 149, 'deletions': 57, 'state': 'closed'}]"
