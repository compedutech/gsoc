pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
1374397051,Add Plot representation,"### Worked on the issue:
- #1 

The example code produces the following picture:

![image](https://github.com/creativescala/chartreuse/assets/72448226/8a3aad8a-0c9a-4328-8b38-f3cda6b12db5)

I created the example using the Java2D backend. Should we rewrite it using Scala.js?
I also added a Java2D dependency to use this backend in the examples and I wonder if I did it correctly.",True,5,https://api.github.com/repos/creativescala/chartreuse/pulls/5,https://github.com/creativescala/chartreuse/pull/5,closed,130,0,3,6,0,6,0,0,[],2023-06-01 16:14:19+00:00,2023-06-07 17:17:28+00:00,522189.0,"6 days, 1:03:09","[{'comment_id': 1217791239, 'comment_body': ""The intention with the examples was that they'd run in the browser, so can be used in the documentation. E.g.: https://www.creativescala.org/chartreuse/examples.html\r\n\r\nThis means that Java2D backend is not usable in the examples, as it only runs on the JVM and not in the JS / browser."", 'comment_created': datetime.datetime(2023, 6, 5, 9, 26, 14, tzinfo=datetime.timezone.utc), 'commenter': 'noelwelsh', 'type': 'User'}, {'comment_id': 1217795157, 'comment_body': ""The Java2D backend is part of the main Doodle dependency, so it doesn't need to be included separately."", 'comment_created': datetime.datetime(2023, 6, 5, 9, 28, 48, tzinfo=datetime.timezone.utc), 'commenter': 'noelwelsh', 'type': 'User'}, {'comment_id': 1217818108, 'comment_body': 'If you follow the [existing example](https://github.com/creativescala/chartreuse/blob/main/examples/src/main/scala/chartreuse/examples/ScatterPlotExample.scala) this should be easy. You need to:\r\n\r\n1. add annotations for ScalaJS (@JSExportTopLevel and @JSExport)\r\n2. add a call to the code in [the examples page of the documentation](https://github.com/creativescala/chartreuse/blob/main/docs/src/pages/examples.md)\r\n\r\nThat should be all you need to do.', 'comment_created': datetime.datetime(2023, 6, 5, 9, 46, 52, tzinfo=datetime.timezone.utc), 'commenter': 'noelwelsh', 'type': 'User'}, {'comment_id': 1217834414, 'comment_body': ""I think this type parameter will cause problems in the future, but it's ok to keep around for now. "", 'comment_created': datetime.datetime(2023, 6, 5, 9, 59, 56, tzinfo=datetime.timezone.utc), 'commenter': 'noelwelsh', 'type': 'User'}, {'comment_id': 1217834455, 'comment_body': ""Probably want to generalize this in the future, but it's fine for now."", 'comment_created': datetime.datetime(2023, 6, 5, 9, 59, 58, tzinfo=datetime.timezone.utc), 'commenter': 'noelwelsh', 'type': 'User'}, {'comment_id': 1217843605, 'comment_body': 'The convention in other parts of Chartreuse (and Doodle) is to use the prefix `with`, not `set`, for builder style methods. See Layer for examples.', 'comment_created': datetime.datetime(2023, 6, 5, 10, 7, 33, tzinfo=datetime.timezone.utc), 'commenter': 'noelwelsh', 'type': 'User'}]","[{'commit_sha': '9c376282f0db73bfd4462608b58d679ddc55a3ba', 'committer_username': 'danielost', 'committer_name': 'Danylo Ostapchenko', 'committer_email': 'danya.ostap@gmail.com', 'commit_date': datetime.datetime(2020, 10, 6, 12, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4197b1affe5f1787692242708a28fba8ae220050', 'committer_username': 'danielost', 'committer_name': 'Danylo Ostapchenko', 'committer_email': 'danya.ostap@gmail.com', 'commit_date': datetime.datetime(2020, 10, 6, 12, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '62b412b30eef114db5fdc6fbc8d7113484391316', 'committer_username': 'danielost', 'committer_name': 'Danylo Ostapchenko', 'committer_email': 'danya.ostap@gmail.com', 'commit_date': datetime.datetime(2020, 10, 6, 12, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '612751f57d2aacb5b032ef60ab2d159393dfed5b', 'committer_username': 'danielost', 'committer_name': 'Danylo Ostapchenko', 'committer_email': 'danya.ostap@gmail.com', 'commit_date': datetime.datetime(2020, 10, 6, 12, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c8e736ab763699add0f5ad873b350fbe908834b2', 'committer_username': 'danielost', 'committer_name': 'Danylo Ostapchenko', 'committer_email': 'danya.ostap@gmail.com', 'commit_date': datetime.datetime(2020, 10, 6, 12, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4914594e283481e060c420bc967ecf0565a3bf3e', 'committer_username': 'danielost', 'committer_name': 'Danylo Ostapchenko', 'committer_email': 'danya.ostap@gmail.com', 'commit_date': datetime.datetime(2020, 10, 6, 12, 12, 45, tzinfo=datetime.timezone.utc)}]",Danylo Ostapchenko,72448226,danya.ostap@gmail.com,User,,32,,17,11
1400303788,Add an algorithm to calculate tick marks position,"### **Worked on the issue:**
- #4  

**The following PR contains the following features:**
- An algorithm that takes min and max data values as well as desired number of ticks. Output is the coordinates of the first and last ticks, and the distance between tick marks (i.e. step or tick size).
- Unit tests that cover diverse set of scenarios.

I created a separate object for axis builder methods. First I added the method directly to the `Plot` class, but we might want to access the algorithm without instantiating a `Plot` object. Also having methods like this in `Plot` would break the single responsibility principle, I suppose.",True,6,https://api.github.com/repos/creativescala/chartreuse/pulls/6,https://github.com/creativescala/chartreuse/pull/6,closed,211,0,3,9,3,4,0,0,[],2023-06-20 18:13:20+00:00,2023-06-30 09:14:55+00:00,831695.0,"9 days, 15:01:35","[{'comment_id': 1237038341, 'comment_body': ""A tuple isn't a good choice to return here, as from the users point of view there are three `Double` values and there is no information to distinguish between these values. Which one is the min, which one the max, etc? The only way to know is to read the code.\r\n\r\nBetter to create a simple type\r\n\r\n```scala\r\nfinal case class Ticks(min: Double, max: Double, size: Double)\r\n```"", 'comment_created': datetime.datetime(2023, 6, 21, 13, 50, 59, tzinfo=datetime.timezone.utc), 'commenter': 'noelwelsh', 'type': 'User'}, {'comment_id': 1237038968, 'comment_body': 'Why `1e6`? I think this could use some documentation.', 'comment_created': datetime.datetime(2023, 6, 21, 13, 51, 19, tzinfo=datetime.timezone.utc), 'commenter': 'noelwelsh', 'type': 'User'}, {'comment_id': 1237040042, 'comment_body': ""I don't understand what this algorithm is doing. It needs some comments. "", 'comment_created': datetime.datetime(2023, 6, 21, 13, 52, 1, tzinfo=datetime.timezone.utc), 'commenter': 'noelwelsh', 'type': 'User'}, {'comment_id': 1237040611, 'comment_body': 'Why are we taking ceiling and floor here? Needs comments.', 'comment_created': datetime.datetime(2023, 6, 21, 13, 52, 24, tzinfo=datetime.timezone.utc), 'commenter': 'noelwelsh', 'type': 'User'}]","[{'commit_sha': 'f6e1f214b52e5ca0cf9290aa3c86b45f3bff16f1', 'committer_username': 'danielost', 'committer_name': 'Danylo Ostapchenko', 'committer_email': 'danya.ostap@gmail.com', 'commit_date': datetime.datetime(2020, 10, 6, 12, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ec9cbac1da4af54097ae70bb41a2a664b582ecb9', 'committer_username': 'danielost', 'committer_name': 'Danylo Ostapchenko', 'committer_email': 'danya.ostap@gmail.com', 'commit_date': datetime.datetime(2020, 10, 6, 12, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '98bd2b0acded405032fa1126f98dee9ae0dddc4b', 'committer_username': 'danielost', 'committer_name': 'Danylo Ostapchenko', 'committer_email': 'danya.ostap@gmail.com', 'commit_date': datetime.datetime(2020, 10, 6, 12, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd90e3b8be69a508fdf08f7f0b772f342a7478878', 'committer_username': 'danielost', 'committer_name': 'Danylo Ostapchenko', 'committer_email': 'danya.ostap@gmail.com', 'commit_date': datetime.datetime(2020, 10, 6, 12, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c4fd2c2198c1aabad0fd27b5353387d91ce3a3b6', 'committer_username': 'danielost', 'committer_name': 'Danylo Ostapchenko', 'committer_email': 'danya.ostap@gmail.com', 'commit_date': datetime.datetime(2020, 10, 6, 12, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5618664e29f1448f29503f7348ba4a094f941ad4', 'committer_username': 'danielost', 'committer_name': 'Danylo Ostapchenko', 'committer_email': 'danya.ostap@gmail.com', 'commit_date': datetime.datetime(2020, 10, 6, 12, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fa2f4e9fdcfeb413eac602ccc890607ccc678ba3', 'committer_username': 'danielost', 'committer_name': 'Danylo Ostapchenko', 'committer_email': 'danya.ostap@gmail.com', 'commit_date': datetime.datetime(2020, 10, 6, 12, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9f8820f4f01c9f4d88b6b2d53d1b09fbf8ff6afd', 'committer_username': 'danielost', 'committer_name': 'Danylo Ostapchenko', 'committer_email': 'danya.ostap@gmail.com', 'commit_date': datetime.datetime(2020, 10, 6, 12, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '097b4f036106d333cf87cb5dfceb248953f7c7f4', 'committer_username': 'danielost', 'committer_name': 'Danylo Ostapchenko', 'committer_email': 'danya.ostap@gmail.com', 'commit_date': datetime.datetime(2020, 10, 6, 12, 12, 45, tzinfo=datetime.timezone.utc)}]",Danylo Ostapchenko,72448226,danya.ostap@gmail.com,User,,32,,17,11
1421563127,Tick Marks layout,"### Worked on the issue:
- #4 

### The following PR contains the following features:
- Major tick marks layout
- Grid layout

This is what a plot looks like now:

![image](https://github.com/creativescala/chartreuse/assets/72448226/a33fad7d-bd34-4ada-8b6d-3b8a41693fd8)

The same plot, but with a grid:

![image](https://github.com/creativescala/chartreuse/assets/72448226/bb0e3aeb-7f8d-4573-8f2b-bfdab5ee7bb3)

Next steps:
- Minor ticks layout
- Colour picking
- Font picking
- Fixing label location (right now label position is not relative to the tick, so it breaks when a label is a big number). Will use `Landmark` to fix this
- Using manual ticks (specified by the user)",True,8,https://api.github.com/repos/creativescala/chartreuse/pulls/8,https://github.com/creativescala/chartreuse/pull/8,closed,561,83,7,30,3,14,1,0,[{'name': 'enhancement'}],2023-07-05 18:29:42+00:00,2023-07-12 07:07:56+00:00,563894.0,"6 days, 12:38:14","[{'comment_id': 1254834934, 'comment_body': ""I think this is incorrect. This is a constraint on `layers`, and this seems an overly restrictive to require that they implement these algebras. (I'm not sure why the original constraint was `Layout & Shape`. I don't think it needs to be anything other than `doodle.algebra.Algebra`.) This constraint should be on `draw`, I think."", 'comment_created': datetime.datetime(2023, 7, 6, 19, 27, 15, tzinfo=datetime.timezone.utc), 'commenter': 'noelwelsh', 'type': 'User'}, {'comment_id': 1254845193, 'comment_body': ""This is only to calculate the enclosing bounding box, right? It's quite inefficient to do all this copying.\r\n\r\nI think this will do:\r\n\r\n```scala\r\nlayers.foldLeft(BoundingBox.empty){ (accum, layer) => \r\n  accum.on(layer.data.boundingBox)\r\n}\r\n```"", 'comment_created': datetime.datetime(2023, 7, 6, 19, 39, 33, tzinfo=datetime.timezone.utc), 'commenter': 'noelwelsh', 'type': 'User'}, {'comment_id': 1254847098, 'comment_body': ""Don't use `return`. Rewrite to an expression."", 'comment_created': datetime.datetime(2023, 7, 6, 19, 41, 44, tzinfo=datetime.timezone.utc), 'commenter': 'noelwelsh', 'type': 'User'}, {'comment_id': 1254865857, 'comment_body': ""Too much repetition in this code.  There  shouldn't be repeated code for the x- and y-axis. You can abstract over x- and y-coordinates using a function. E.g. \r\n\r\n```scala\r\nval asX: Double => Point = x => Point(x, 0)\r\nval asY: Double => Point = y => Point(0, y)\r\n```"", 'comment_created': datetime.datetime(2023, 7, 6, 20, 4, 39, tzinfo=datetime.timezone.utc), 'commenter': 'noelwelsh', 'type': 'User'}, {'comment_id': 1254876496, 'comment_body': ""I'm a bit not-fan of using these methods on tuple. I'd rather destructure with an irrefutable match like so:\r\n\r\n```scala\r\nval (screen, _) = tick\r\n```"", 'comment_created': datetime.datetime(2023, 7, 6, 20, 15, 32, tzinfo=datetime.timezone.utc), 'commenter': 'noelwelsh', 'type': 'User'}, {'comment_id': 1254878383, 'comment_body': 'Need to be clearer on what these coordinates mean. I think of screen vs data coordinates. \r\n\r\nScreen coordinates are the coordinates of the graph rendered on the screen. Data coordinates are the values in the data.\r\n\r\nConsider using opaque types to distinguish these at the type level, as I think it will be very easy to get them confused in code.', 'comment_created': datetime.datetime(2023, 7, 6, 20, 17, 38, tzinfo=datetime.timezone.utc), 'commenter': 'noelwelsh', 'type': 'User'}, {'comment_id': 1258079661, 'comment_body': '`layers.head.toPoint` is wrong. Different layers could have different `toPoint` functions. This only compiles due to the overly restrictive type of layers (should probably be `Layer[?, Alg]` not `Layer[A, Alg]`)\r\n\r\n```suggestion\r\n      bb.on(layer.data.boundingBox(layer.toPoint))\r\n```\r\n\r\nIt might be worth adding a `boundingBox` method to `Layer`.', 'comment_created': datetime.datetime(2023, 7, 10, 10, 59, 2, tzinfo=datetime.timezone.utc), 'commenter': 'noelwelsh', 'type': 'User'}, {'comment_id': 1258099931, 'comment_body': ""This wrapper object is not needed, if I'm correctly reading the documentation on opaque types."", 'comment_created': datetime.datetime(2023, 7, 10, 11, 20, 19, tzinfo=datetime.timezone.utc), 'commenter': 'noelwelsh', 'type': 'User'}, {'comment_id': 1258100720, 'comment_body': '```suggestion\r\nimport chartreuse.Coordinate.*\r\n```\r\n\r\n`_` is Scala 2 syntax and will be removed in the future.', 'comment_created': datetime.datetime(2023, 7, 10, 11, 20, 49, tzinfo=datetime.timezone.utc), 'commenter': 'noelwelsh', 'type': 'User'}, {'comment_id': 1258120215, 'comment_body': 'Might look at https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/text/NumberFormat.html instead of this rather ad-hoc method.', 'comment_created': datetime.datetime(2023, 7, 10, 11, 38, 38, tzinfo=datetime.timezone.utc), 'commenter': 'noelwelsh', 'type': 'User'}, {'comment_id': 1258135239, 'comment_body': 'Ad-hoc magic numbers need explanation. I assume this is a temporary decision that will be replaced by style options later.', 'comment_created': datetime.datetime(2023, 7, 10, 11, 54, 23, tzinfo=datetime.timezone.utc), 'commenter': 'noelwelsh', 'type': 'User'}, {'comment_id': 1258135594, 'comment_body': 'If this method only returned the `PlotPicture` that represents the ticks, instead of adding it to the plot, there would be more possibilities for composition in the use above.', 'comment_created': datetime.datetime(2023, 7, 10, 11, 54, 46, tzinfo=datetime.timezone.utc), 'commenter': 'noelwelsh', 'type': 'User'}, {'comment_id': 1258136743, 'comment_body': 'Repetition of this code and `withYTicks` is somewhat annoying. It would be nice to remove it.', 'comment_created': datetime.datetime(2023, 7, 10, 11, 56, tzinfo=datetime.timezone.utc), 'commenter': 'noelwelsh', 'type': 'User'}, {'comment_id': 1258139609, 'comment_body': 'If all the `with` methods (`withGrid, `withXTicks`) just returned the picture instead of adding it to the plot, you could write something like\r\n\r\n```\r\nxTicks\r\n  .on(yTicks)\r\n  .on(axes)\r\n  .on(allLayers)\r\n  .on(if grid then theGrid else empty[Shape])\r\n```\r\n\r\nI.e. emphasize composition.', 'comment_created': datetime.datetime(2023, 7, 10, 11, 59, tzinfo=datetime.timezone.utc), 'commenter': 'noelwelsh', 'type': 'User'}]","[{'commit_sha': 'f1b69e41927a358a9a13120fe7d507c0b34e90e2', 'committer_username': 'danielost', 'committer_name': 'Danylo Ostapchenko', 'committer_email': 'danya.ostap@gmail.com', 'commit_date': datetime.datetime(2020, 10, 6, 12, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e6f86e713192531f1e5dace1e02aa0d8b4fa165a', 'committer_username': 'danielost', 'committer_name': 'Danylo Ostapchenko', 'committer_email': 'danya.ostap@gmail.com', 'commit_date': datetime.datetime(2020, 10, 6, 12, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6f46d752cafecc3609aa9a108a9fe27caffa6e2d', 'committer_username': 'danielost', 'committer_name': 'Danylo Ostapchenko', 'committer_email': 'danya.ostap@gmail.com', 'commit_date': datetime.datetime(2020, 10, 6, 12, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '39625b545242e998980ab3d69ecfdcdf1bf81aad', 'committer_username': 'danielost', 'committer_name': 'Danylo Ostapchenko', 'committer_email': 'danya.ostap@gmail.com', 'commit_date': datetime.datetime(2020, 10, 6, 12, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6bcc79fb03b93909112c0f03e4a208b40da187fb', 'committer_username': 'danielost', 'committer_name': 'Danylo Ostapchenko', 'committer_email': 'danya.ostap@gmail.com', 'commit_date': datetime.datetime(2020, 10, 6, 12, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '760efa29e3d1e857b2d0861d84f430c6667fa56e', 'committer_username': 'danielost', 'committer_name': 'Danylo Ostapchenko', 'committer_email': 'danya.ostap@gmail.com', 'commit_date': datetime.datetime(2020, 10, 6, 12, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd16691c8fd91581f28b2f27384a6c84a29fbf54b', 'committer_username': 'danielost', 'committer_name': 'Danylo Ostapchenko', 'committer_email': 'danya.ostap@gmail.com', 'commit_date': datetime.datetime(2020, 10, 6, 12, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ef71598ddc810f7baacf7d0388f3d3a87b7fbb24', 'committer_username': 'danielost', 'committer_name': 'Danylo Ostapchenko', 'committer_email': 'danya.ostap@gmail.com', 'commit_date': datetime.datetime(2020, 10, 6, 12, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c3c79b8ab8397a097f63e432b4a2435b3528d8d9', 'committer_username': 'danielost', 'committer_name': 'Danylo Ostapchenko', 'committer_email': 'danya.ostap@gmail.com', 'commit_date': datetime.datetime(2020, 10, 6, 12, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5fef71dd0eece5cc72439360571b4e982ba180bd', 'committer_username': 'danielost', 'committer_name': 'Danylo Ostapchenko', 'committer_email': 'danya.ostap@gmail.com', 'commit_date': datetime.datetime(2020, 10, 6, 12, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '12b42b3195edf2903b9d9a48cb57103a3a8d3d39', 'committer_username': 'danielost', 'committer_name': 'Danylo Ostapchenko', 'committer_email': 'danya.ostap@gmail.com', 'commit_date': datetime.datetime(2020, 10, 6, 12, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f2ca421f848af457d2f8815e965147ce7e29b299', 'committer_username': 'danielost', 'committer_name': 'Danylo Ostapchenko', 'committer_email': 'danya.ostap@gmail.com', 'commit_date': datetime.datetime(2020, 10, 6, 12, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bff47effac6ab2f0a203b84733730ef014f3f64e', 'committer_username': 'danielost', 'committer_name': 'Danylo Ostapchenko', 'committer_email': 'danya.ostap@gmail.com', 'commit_date': datetime.datetime(2020, 10, 6, 12, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '18ec3a57c1c2b9340580ce6f151d44dce67fee1b', 'committer_username': 'danielost', 'committer_name': 'Danylo Ostapchenko', 'committer_email': 'danya.ostap@gmail.com', 'commit_date': datetime.datetime(2020, 10, 6, 12, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '634ceb010b871ba9f55c153b5ad0962c099020fa', 'committer_username': 'danielost', 'committer_name': 'Danylo Ostapchenko', 'committer_email': 'danya.ostap@gmail.com', 'commit_date': datetime.datetime(2020, 10, 6, 12, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '08963ff41e0efec33e6c77c6bfd9524027055c9a', 'committer_username': 'danielost', 'committer_name': 'Danylo Ostapchenko', 'committer_email': 'danya.ostap@gmail.com', 'commit_date': datetime.datetime(2020, 10, 6, 12, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2c7c02ce492d2da40369ac4547f8faa1922bf158', 'committer_username': 'danielost', 'committer_name': 'Danylo Ostapchenko', 'committer_email': 'danya.ostap@gmail.com', 'commit_date': datetime.datetime(2020, 10, 6, 12, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f8adeb475190d5930b963f1d6bf89eabe74f4c3c', 'committer_username': 'danielost', 'committer_name': 'Danylo Ostapchenko', 'committer_email': 'danya.ostap@gmail.com', 'commit_date': datetime.datetime(2020, 10, 6, 12, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a8c2778b4cf268f18016547da42235ad40a30954', 'committer_username': 'danielost', 'committer_name': 'Danylo Ostapchenko', 'committer_email': 'danya.ostap@gmail.com', 'commit_date': datetime.datetime(2020, 10, 6, 12, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '689f21da749293177bd8f57c8d5624f54fd95763', 'committer_username': 'danielost', 'committer_name': 'Danylo Ostapchenko', 'committer_email': 'danya.ostap@gmail.com', 'commit_date': datetime.datetime(2020, 10, 6, 12, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a82130d675e3ca8e06a58dadab6ee94b21a304cb', 'committer_username': 'danielost', 'committer_name': 'Danylo Ostapchenko', 'committer_email': 'danya.ostap@gmail.com', 'commit_date': datetime.datetime(2020, 10, 6, 12, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c4b4c1aaac5d0ab5279cd64af0b5e0828c986675', 'committer_username': 'danielost', 'committer_name': 'Danylo Ostapchenko', 'committer_email': 'danya.ostap@gmail.com', 'commit_date': datetime.datetime(2020, 10, 6, 12, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '06110c4a4e5a8df9f153b0872eb0adb7bd8cb162', 'committer_username': 'danielost', 'committer_name': 'Danylo Ostapchenko', 'committer_email': 'danya.ostap@gmail.com', 'commit_date': datetime.datetime(2020, 10, 6, 12, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e3626d96cf0cf6d80be9b1b7491519dcdaa747be', 'committer_username': 'danielost', 'committer_name': 'Danylo Ostapchenko', 'committer_email': 'danya.ostap@gmail.com', 'commit_date': datetime.datetime(2020, 10, 6, 12, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '937453a73ea4bd45dbf831a7447ad0efcf2f0022', 'committer_username': 'danielost', 'committer_name': 'Danylo Ostapchenko', 'committer_email': 'danya.ostap@gmail.com', 'commit_date': datetime.datetime(2020, 10, 6, 12, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '679ac979d58420dedd243684b87195039fecdfc3', 'committer_username': 'danielost', 'committer_name': 'Danylo Ostapchenko', 'committer_email': 'danya.ostap@gmail.com', 'commit_date': datetime.datetime(2020, 10, 6, 12, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'eb731e548df38d00f04d2d633dabb19d8f7c3a8c', 'committer_username': 'danielost', 'committer_name': 'Danylo Ostapchenko', 'committer_email': 'danya.ostap@gmail.com', 'commit_date': datetime.datetime(2020, 10, 6, 12, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cb73dd3e1e690f89c8c3e523cca6686343e9f0f1', 'committer_username': 'danielost', 'committer_name': 'Danylo Ostapchenko', 'committer_email': 'danya.ostap@gmail.com', 'commit_date': datetime.datetime(2020, 10, 6, 12, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7132d28a57f5885c5f8bf35a794558fe4b9d90cb', 'committer_username': 'danielost', 'committer_name': 'Danylo Ostapchenko', 'committer_email': 'danya.ostap@gmail.com', 'commit_date': datetime.datetime(2020, 10, 6, 12, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '482d74eef7195abee887091ffeb755253bda7830', 'committer_username': 'danielost', 'committer_name': 'Danylo Ostapchenko', 'committer_email': 'danya.ostap@gmail.com', 'commit_date': datetime.datetime(2020, 10, 6, 12, 12, 45, tzinfo=datetime.timezone.utc)}]",Danylo Ostapchenko,72448226,danya.ostap@gmail.com,User,,32,,17,11
1455202158,Add manual ticks layout,"Add support for manual ticks layout.

**Example:**

![image](https://github.com/creativescala/chartreuse/assets/72448226/661c8cd3-c560-4e2b-930a-e2064b3a3194)
",True,21,https://api.github.com/repos/creativescala/chartreuse/pulls/21,https://github.com/creativescala/chartreuse/pull/21,closed,429,259,3,9,1,6,0,0,[],2023-07-30 17:30:51+00:00,2023-08-07 14:25:10+00:00,680059.0,"7 days, 20:54:19","[{'comment_id': 1284258334, 'comment_body': ""I moved these types out of `Plot` to make them accessible from `Axes`. But I'm not sure they are supposed to be in `Coordinate.scala`. Where should we put them?"", 'comment_created': datetime.datetime(2023, 8, 4, 10, 29, 51, tzinfo=datetime.timezone.utc), 'commenter': 'danielost', 'type': 'User'}, {'comment_id': 1284264111, 'comment_body': ""I know It's better to use pattern matching in such situations, but I used tuple methods just to make the expressions shorter. Let me know if there is a better way to write these expressions.\r\n\r\nP.S. Math functions prevent layout issues when we use `Manual` or `NoTicks` layout."", 'comment_created': datetime.datetime(2023, 8, 4, 10, 36, 50, tzinfo=datetime.timezone.utc), 'commenter': 'danielost', 'type': 'User'}, {'comment_id': 1285822859, 'comment_body': 'I think we could probably have one `Axis` class, with separate instances for the x and y axes. There is a lot of repetition in here.', 'comment_created': datetime.datetime(2023, 8, 7, 12, 51, 4, tzinfo=datetime.timezone.utc), 'commenter': 'noelwelsh', 'type': 'User'}, {'comment_id': 1285828434, 'comment_body': 'In Scala 3 you can index a tuple like a collection, so you can write `head(0)` (indexes start at 0) instead of using `_1` etc.', 'comment_created': datetime.datetime(2023, 8, 7, 12, 55, 52, tzinfo=datetime.timezone.utc), 'commenter': 'noelwelsh', 'type': 'User'}, {'comment_id': 1285863554, 'comment_body': ""Honestly, I'm not sure either. `TicksSequence` could probably be in the `Axes` class, as I don't think it is needed outside of there. `PlotAlg` could probably be in a companion object for `Plot` as it's associated with `Plot`."", 'comment_created': datetime.datetime(2023, 8, 7, 13, 23, 58, tzinfo=datetime.timezone.utc), 'commenter': 'noelwelsh', 'type': 'User'}, {'comment_id': 1285942850, 'comment_body': ""That's a great idea. Will think about it. "", 'comment_created': datetime.datetime(2023, 8, 7, 14, 23, 28, tzinfo=datetime.timezone.utc), 'commenter': 'danielost', 'type': 'User'}]","[{'commit_sha': 'bf877215eef8e57e7f1d7e2a50dc5b9b20dc41f5', 'committer_username': 'danielost', 'committer_name': 'Danylo Ostapchenko', 'committer_email': 'danya.ostap@gmail.com', 'commit_date': datetime.datetime(2020, 10, 6, 12, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '02931ab4c180f582f257211b16d248ac105699a2', 'committer_username': 'danielost', 'committer_name': 'Danylo Ostapchenko', 'committer_email': 'danya.ostap@gmail.com', 'commit_date': datetime.datetime(2020, 10, 6, 12, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '887765db73f90b0953853051053e06f46efb4d87', 'committer_username': 'danielost', 'committer_name': 'Danylo Ostapchenko', 'committer_email': 'danya.ostap@gmail.com', 'commit_date': datetime.datetime(2020, 10, 6, 12, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cf9b45cb22859ac583836dc3f39f0fafd9733ef3', 'committer_username': 'danielost', 'committer_name': 'Danylo Ostapchenko', 'committer_email': 'danya.ostap@gmail.com', 'commit_date': datetime.datetime(2020, 10, 6, 12, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2cbf9aeed42bac2111036b68a3bc3e9e8ff2f67a', 'committer_username': 'danielost', 'committer_name': 'Danylo Ostapchenko', 'committer_email': 'danya.ostap@gmail.com', 'commit_date': datetime.datetime(2020, 10, 6, 12, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9a344d6c5e12cc5936a62ee3506179204f927eb4', 'committer_username': 'danielost', 'committer_name': 'Danylo Ostapchenko', 'committer_email': 'danya.ostap@gmail.com', 'commit_date': datetime.datetime(2020, 10, 6, 12, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '60653ecba73459e61a617426da912c56f9ccc85f', 'committer_username': 'danielost', 'committer_name': 'Danylo Ostapchenko', 'committer_email': 'danya.ostap@gmail.com', 'commit_date': datetime.datetime(2020, 10, 6, 12, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0f344398ba0631577d6c24ab475d622cf604598b', 'committer_username': 'danielost', 'committer_name': 'Danylo Ostapchenko', 'committer_email': 'danya.ostap@gmail.com', 'commit_date': datetime.datetime(2020, 10, 6, 12, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f1f035a8bebca4af245f0fef8c7c3ee87a03d683', 'committer_username': 'danielost', 'committer_name': 'Danylo Ostapchenko', 'committer_email': 'danya.ostap@gmail.com', 'commit_date': datetime.datetime(2020, 10, 6, 12, 12, 45, tzinfo=datetime.timezone.utc)}]",Danylo Ostapchenko,72448226,danya.ostap@gmail.com,User,,32,,17,11
1466929869,Add support for legends,"### **Worked on the issue:**
- #9 

### **The following PR contains the following features:**
- Legend layout
- Color and label picking when creating a `Layer`

**Example:**

![image](https://github.com/creativescala/chartreuse/assets/72448226/fa6691b5-3fd4-426a-87a4-0529c82879ea)
",True,22,https://api.github.com/repos/creativescala/chartreuse/pulls/22,https://github.com/creativescala/chartreuse/pull/22,closed,87,22,8,3,1,0,1,0,[{'name': 'enhancement'}],2023-08-08 13:44:45+00:00,2023-08-10 16:29:56+00:00,182711.0,"2 days, 2:45:11",[],"[{'commit_sha': 'b724be5139cb7746ec3ec6ac3c78ceb7242df5d8', 'committer_username': 'danielost', 'committer_name': 'Danylo Ostapchenko', 'committer_email': 'danya.ostap@gmail.com', 'commit_date': datetime.datetime(2020, 10, 6, 12, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0d502842ab1724889881baa1e22515e1084251cb', 'committer_username': 'danielost', 'committer_name': 'Danylo Ostapchenko', 'committer_email': 'danya.ostap@gmail.com', 'commit_date': datetime.datetime(2020, 10, 6, 12, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '726135b3f27337022acbb2325a71aaa8b66bfa9b', 'committer_username': 'danielost', 'committer_name': 'Danylo Ostapchenko', 'committer_email': 'danya.ostap@gmail.com', 'commit_date': datetime.datetime(2020, 10, 6, 12, 12, 45, tzinfo=datetime.timezone.utc)}]",Danylo Ostapchenko,72448226,danya.ostap@gmail.com,User,,32,,17,11
1477112963,Add rotated tick labels layout and refactor the code for axis,"### **Worked on the issues:**
- #24 
- #4 
 
### **The PR contains the following features:**
- Users can now specify whether they want to rotate labels (for the X-axis)
- `Axes` has been replaced with `Axis`
- Plot attributes have been moved to their corresponding objects

Rotated labels example:

![image](https://github.com/creativescala/chartreuse/assets/72448226/4c417fb1-d5ae-4082-ac68-ac3d6d7b4e7e)

",True,25,https://api.github.com/repos/creativescala/chartreuse/pulls/25,https://github.com/creativescala/chartreuse/pull/25,closed,587,454,7,9,0,2,0,0,[],2023-08-16 09:10:06+00:00,2023-08-24 11:51:15+00:00,700869.0,"8 days, 2:41:09","[{'comment_id': 1298633141, 'comment_body': 'I would probably write this as a pattern match\r\n\r\n```\r\nmajorTickLayout match {\r\n  case MajorTickLayout.NoTick => ???\r\n  case _ => ???\r\n}\r\n```', 'comment_created': datetime.datetime(2023, 8, 18, 16, 16, 52, tzinfo=datetime.timezone.utc), 'commenter': 'noelwelsh', 'type': 'User'}, {'comment_id': 1298644523, 'comment_body': 'I think a lot of these functions could live in the `Axis` companion object.', 'comment_created': datetime.datetime(2023, 8, 18, 16, 30, 5, tzinfo=datetime.timezone.utc), 'commenter': 'noelwelsh', 'type': 'User'}]","[{'commit_sha': '5f9ab9d204efe7f703ab814c9d6b40df4b516068', 'committer_username': 'danielost', 'committer_name': 'Danylo Ostapchenko', 'committer_email': 'danya.ostap@gmail.com', 'commit_date': datetime.datetime(2020, 10, 6, 12, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3cd955e07afe64f6b8111b450453b30114e0a00a', 'committer_username': 'danielost', 'committer_name': 'Danylo Ostapchenko', 'committer_email': 'danya.ostap@gmail.com', 'commit_date': datetime.datetime(2020, 10, 6, 12, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f08b4e0f823db277bafa2d195b69b42dd37fef9d', 'committer_username': 'danielost', 'committer_name': 'Danylo Ostapchenko', 'committer_email': 'danya.ostap@gmail.com', 'commit_date': datetime.datetime(2020, 10, 6, 12, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b55497972f2689d879997172be3be388971fd597', 'committer_username': 'danielost', 'committer_name': 'Danylo Ostapchenko', 'committer_email': 'danya.ostap@gmail.com', 'commit_date': datetime.datetime(2020, 10, 6, 12, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fdb825c5fb08278e9d8c0b2205da41c80dfec189', 'committer_username': 'danielost', 'committer_name': 'Danylo Ostapchenko', 'committer_email': 'danya.ostap@gmail.com', 'commit_date': datetime.datetime(2020, 10, 6, 12, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '55fbe39f3437f7d750d80ed2b9ed12e856c6837d', 'committer_username': 'danielost', 'committer_name': 'Danylo Ostapchenko', 'committer_email': 'danya.ostap@gmail.com', 'commit_date': datetime.datetime(2020, 10, 6, 12, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0fa4ca1e36b2515ab1eaeb6b9a82c23d8f706fab', 'committer_username': 'danielost', 'committer_name': 'Danylo Ostapchenko', 'committer_email': 'danya.ostap@gmail.com', 'commit_date': datetime.datetime(2020, 10, 6, 12, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd14b04427df2ceb0b831a748152ed09c9c1ee66b', 'committer_username': 'danielost', 'committer_name': 'Danylo Ostapchenko', 'committer_email': 'danya.ostap@gmail.com', 'commit_date': datetime.datetime(2020, 10, 6, 12, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1399da0897ad476e5d6475010a262108a477fdfa', 'committer_username': 'danielost', 'committer_name': 'Danylo Ostapchenko', 'committer_email': 'danya.ostap@gmail.com', 'commit_date': datetime.datetime(2020, 10, 6, 12, 12, 45, tzinfo=datetime.timezone.utc)}]",Danylo Ostapchenko,72448226,danya.ostap@gmail.com,User,,32,,17,11
1490766023,Add annotations,"### **Worked on the issue:**
- #18 

### **The PR contains the following features:**
- Annotations layout
- A couple of different annotation types
- Default annotation locations

**Example of an annotation:**

![image](https://github.com/creativescala/chartreuse/assets/72448226/7f15c299-fb8e-4e87-a9d6-857e4a52e9c3)",True,27,https://api.github.com/repos/creativescala/chartreuse/pulls/27,https://github.com/creativescala/chartreuse/pull/27,closed,362,1,6,7,0,3,1,0,[{'name': 'enhancement'}],2023-08-26 18:54:26+00:00,2023-08-29 15:43:48+00:00,247762.0,"2 days, 20:49:22","[{'comment_id': 1307351544, 'comment_body': ""It's not obvious what this function is doing. I think it could use a bit of documentation."", 'comment_created': datetime.datetime(2023, 8, 28, 12, 19, 17, tzinfo=datetime.timezone.utc), 'commenter': 'noelwelsh', 'type': 'User'}, {'comment_id': 1307352499, 'comment_body': 'If you import `doodle.syntax.all.*` you can write angles using the `degrees` extension method. E.g. you can write `90.degrees`, `180.degrees`, and so on.', 'comment_created': datetime.datetime(2023, 8, 28, 12, 20, 17, tzinfo=datetime.timezone.utc), 'commenter': 'noelwelsh', 'type': 'User'}, {'comment_id': 1309023584, 'comment_body': 'I have added a bit of documentation to clarify some things about `AnnotationPosition`. Also added a simple example of an annotated plot.', 'comment_created': datetime.datetime(2023, 8, 29, 15, 38, 41, tzinfo=datetime.timezone.utc), 'commenter': 'danielost', 'type': 'User'}]","[{'commit_sha': '194e5fe960daf1307e454f7268a31091e0cb20ca', 'committer_username': 'danielost', 'committer_name': 'Danylo Ostapchenko', 'committer_email': 'danya.ostap@gmail.com', 'commit_date': datetime.datetime(2020, 10, 6, 12, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c904ab3b704b46fea53a34b521d404fe6ef3b50f', 'committer_username': 'danielost', 'committer_name': 'Danylo Ostapchenko', 'committer_email': 'danya.ostap@gmail.com', 'commit_date': datetime.datetime(2020, 10, 6, 12, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f6779a275fd8ebe4a2def28dadd451c1543cbe70', 'committer_username': 'danielost', 'committer_name': 'Danylo Ostapchenko', 'committer_email': 'danya.ostap@gmail.com', 'commit_date': datetime.datetime(2020, 10, 6, 12, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f869586ba5cb852a53cc3f61725a05bab9bccb04', 'committer_username': 'danielost', 'committer_name': 'Danylo Ostapchenko', 'committer_email': 'danya.ostap@gmail.com', 'commit_date': datetime.datetime(2020, 10, 6, 12, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '31edbe71d7739d99f029505574569e04f3d7946d', 'committer_username': 'danielost', 'committer_name': 'Danylo Ostapchenko', 'committer_email': 'danya.ostap@gmail.com', 'commit_date': datetime.datetime(2020, 10, 6, 12, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6a41a7c28f1ea06ce88a78c26c4d69b445f4ef9b', 'committer_username': 'danielost', 'committer_name': 'Danylo Ostapchenko', 'committer_email': 'danya.ostap@gmail.com', 'commit_date': datetime.datetime(2020, 10, 6, 12, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b8282707acc971f5d0b0a327c2f4f7708dfa4d4a', 'committer_username': 'danielost', 'committer_name': 'Danylo Ostapchenko', 'committer_email': 'danya.ostap@gmail.com', 'commit_date': datetime.datetime(2020, 10, 6, 12, 12, 45, tzinfo=datetime.timezone.utc)}]",Danylo Ostapchenko,72448226,danya.ostap@gmail.com,User,,32,,17,11
1441405430,Fix tick labels layout,"Updated tick labels layout. The layout is now correct with big numbers.

**Example:**

![image](https://github.com/creativescala/chartreuse/assets/72448226/9b95d0dd-440b-43f7-b335-834c771ab5e6)

This works well for the Y-axis. For the X-axis we need to rotate labels to avoid overlapping. We need to think about how to determine if it is necessary to rotate the labels. I think we can check if the first two labels or the last two labels overlap, as they are supposed to be the longest strings.

On the other hand, even some labels in the middle can overlap in the following cases:
- The plot width is too small, the outer labels might be single-digit integers, and some labels in the middle might be floating-point numbers, which are generally longer
- With categorical data, the length of the label doesn't depend on its position

Considering this, it might be necessary to traverse the whole sequence of labels to determine if they overlap.",True,15,https://api.github.com/repos/creativescala/chartreuse/pulls/15,https://github.com/creativescala/chartreuse/pull/15,closed,29,17,1,2,0,0,2,0,"[{'name': 'bug'}, {'name': 'enhancement'}]",2023-07-19 17:07:40+00:00,2023-07-20 11:17:21+00:00,65381.0,18:09:41,[],"[{'commit_sha': 'aa803f68ed603d1fd96f0bb0d13cdddb8dfb9ce5', 'committer_username': 'danielost', 'committer_name': 'Danylo Ostapchenko', 'committer_email': 'danya.ostap@gmail.com', 'commit_date': datetime.datetime(2020, 10, 6, 12, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '66bf5721cb883ce5450817a62224def6b8f72f85', 'committer_username': 'danielost', 'committer_name': 'Danylo Ostapchenko', 'committer_email': 'danya.ostap@gmail.com', 'commit_date': datetime.datetime(2020, 10, 6, 12, 12, 45, tzinfo=datetime.timezone.utc)}]",Danylo Ostapchenko,72448226,danya.ostap@gmail.com,User,,32,,17,11
1439583785,Add minor ticks support,"Add minor ticks layout for `Plot`

**Example:**

![image_2023-07-18_17-49-15](https://github.com/creativescala/chartreuse/assets/72448226/4663f1fa-14e7-4459-a9c2-8e95d8fd64fe)
",True,14,https://api.github.com/repos/creativescala/chartreuse/pulls/14,https://github.com/creativescala/chartreuse/pull/14,closed,97,11,1,5,2,5,1,0,[{'name': 'enhancement'}],2023-07-18 16:34:53+00:00,2023-07-20 11:02:22+00:00,152849.0,"1 day, 18:27:29","[{'comment_id': 1267038318, 'comment_body': ""Please let me know if it's okay to name vals like this."", 'comment_created': datetime.datetime(2023, 7, 18, 16, 38, 57, tzinfo=datetime.timezone.utc), 'commenter': 'danielost', 'type': 'User'}, {'comment_id': 1267859172, 'comment_body': ""You seem to really really like putting [magic numbers](https://en.wikipedia.org/wiki/Magic_number_(programming)) in your code. Please don't."", 'comment_created': datetime.datetime(2023, 7, 19, 10, 6, 17, tzinfo=datetime.timezone.utc), 'commenter': 'noelwelsh', 'type': 'User'}, {'comment_id': 1267869035, 'comment_body': '1. You could have used more descriptive names\r\n2. Use a pattern match to extract the elements\r\nE.g. (untested)\r\n```scala\r\nval here +: neighbour +: _ = ticksSequence\r\n```', 'comment_created': datetime.datetime(2023, 7, 19, 10, 15, 40, tzinfo=datetime.timezone.utc), 'commenter': 'noelwelsh', 'type': 'User'}, {'comment_id': 1267870517, 'comment_body': 'More magic numbers.', 'comment_created': datetime.datetime(2023, 7, 19, 10, 17, 11, tzinfo=datetime.timezone.utc), 'commenter': 'noelwelsh', 'type': 'User'}, {'comment_id': 1267939757, 'comment_body': 'Later, I intend to replace those with code which decides how many ticks to put. I should have mentioned this in the PR description.', 'comment_created': datetime.datetime(2023, 7, 19, 11, 27, 52, tzinfo=datetime.timezone.utc), 'commenter': 'danielost', 'type': 'User'}]","[{'commit_sha': '2db2eea70cd6005d5ccb85da15a7edbb3d83484a', 'committer_username': 'danielost', 'committer_name': 'Danylo Ostapchenko', 'committer_email': 'danya.ostap@gmail.com', 'commit_date': datetime.datetime(2020, 10, 6, 12, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '50532062539cf99e4773e8bb61b963a23e07e476', 'committer_username': 'danielost', 'committer_name': 'Danylo Ostapchenko', 'committer_email': 'danya.ostap@gmail.com', 'commit_date': datetime.datetime(2020, 10, 6, 12, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cc299c46322373682259a3826907d09d4ea63ba9', 'committer_username': 'danielost', 'committer_name': 'Danylo Ostapchenko', 'committer_email': 'danya.ostap@gmail.com', 'commit_date': datetime.datetime(2020, 10, 6, 12, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a38392937911cdf274e93b9d72fcdca2a9c79f95', 'committer_username': 'danielost', 'committer_name': 'Danylo Ostapchenko', 'committer_email': 'danya.ostap@gmail.com', 'commit_date': datetime.datetime(2020, 10, 6, 12, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6323a4a6e90225a1a85e12e989853358ab8d09a3', 'committer_username': 'danielost', 'committer_name': 'Danylo Ostapchenko', 'committer_email': 'danya.ostap@gmail.com', 'commit_date': datetime.datetime(2020, 10, 6, 12, 12, 45, tzinfo=datetime.timezone.utc)}]",Danylo Ostapchenko,72448226,danya.ostap@gmail.com,User,,32,,17,11
1374397051,Add Plot representation,"### Worked on the issue:
- #1 

The example code produces the following picture:

![image](https://github.com/creativescala/chartreuse/assets/72448226/8a3aad8a-0c9a-4328-8b38-f3cda6b12db5)

I created the example using the Java2D backend. Should we rewrite it using Scala.js?
I also added a Java2D dependency to use this backend in the examples and I wonder if I did it correctly.",True,5,https://api.github.com/repos/creativescala/chartreuse/pulls/5,https://github.com/creativescala/chartreuse/pull/5,closed,130,0,3,6,0,6,0,0,[],2023-06-01 16:14:19+00:00,2023-06-07 17:17:28+00:00,522189.0,"6 days, 1:03:09","[{'comment_id': 1217791239, 'comment_body': ""The intention with the examples was that they'd run in the browser, so can be used in the documentation. E.g.: https://www.creativescala.org/chartreuse/examples.html\r\n\r\nThis means that Java2D backend is not usable in the examples, as it only runs on the JVM and not in the JS / browser."", 'comment_created': datetime.datetime(2023, 6, 5, 9, 26, 14, tzinfo=datetime.timezone.utc), 'commenter': 'noelwelsh', 'type': 'User'}, {'comment_id': 1217795157, 'comment_body': ""The Java2D backend is part of the main Doodle dependency, so it doesn't need to be included separately."", 'comment_created': datetime.datetime(2023, 6, 5, 9, 28, 48, tzinfo=datetime.timezone.utc), 'commenter': 'noelwelsh', 'type': 'User'}, {'comment_id': 1217818108, 'comment_body': 'If you follow the [existing example](https://github.com/creativescala/chartreuse/blob/main/examples/src/main/scala/chartreuse/examples/ScatterPlotExample.scala) this should be easy. You need to:\r\n\r\n1. add annotations for ScalaJS (@JSExportTopLevel and @JSExport)\r\n2. add a call to the code in [the examples page of the documentation](https://github.com/creativescala/chartreuse/blob/main/docs/src/pages/examples.md)\r\n\r\nThat should be all you need to do.', 'comment_created': datetime.datetime(2023, 6, 5, 9, 46, 52, tzinfo=datetime.timezone.utc), 'commenter': 'noelwelsh', 'type': 'User'}, {'comment_id': 1217834414, 'comment_body': ""I think this type parameter will cause problems in the future, but it's ok to keep around for now. "", 'comment_created': datetime.datetime(2023, 6, 5, 9, 59, 56, tzinfo=datetime.timezone.utc), 'commenter': 'noelwelsh', 'type': 'User'}, {'comment_id': 1217834455, 'comment_body': ""Probably want to generalize this in the future, but it's fine for now."", 'comment_created': datetime.datetime(2023, 6, 5, 9, 59, 58, tzinfo=datetime.timezone.utc), 'commenter': 'noelwelsh', 'type': 'User'}, {'comment_id': 1217843605, 'comment_body': 'The convention in other parts of Chartreuse (and Doodle) is to use the prefix `with`, not `set`, for builder style methods. See Layer for examples.', 'comment_created': datetime.datetime(2023, 6, 5, 10, 7, 33, tzinfo=datetime.timezone.utc), 'commenter': 'noelwelsh', 'type': 'User'}]","[{'commit_sha': '9c376282f0db73bfd4462608b58d679ddc55a3ba', 'committer_username': 'danielost', 'committer_name': 'Danylo Ostapchenko', 'committer_email': 'danya.ostap@gmail.com', 'commit_date': datetime.datetime(2020, 10, 6, 12, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4197b1affe5f1787692242708a28fba8ae220050', 'committer_username': 'danielost', 'committer_name': 'Danylo Ostapchenko', 'committer_email': 'danya.ostap@gmail.com', 'commit_date': datetime.datetime(2020, 10, 6, 12, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '62b412b30eef114db5fdc6fbc8d7113484391316', 'committer_username': 'danielost', 'committer_name': 'Danylo Ostapchenko', 'committer_email': 'danya.ostap@gmail.com', 'commit_date': datetime.datetime(2020, 10, 6, 12, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '612751f57d2aacb5b032ef60ab2d159393dfed5b', 'committer_username': 'danielost', 'committer_name': 'Danylo Ostapchenko', 'committer_email': 'danya.ostap@gmail.com', 'commit_date': datetime.datetime(2020, 10, 6, 12, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c8e736ab763699add0f5ad873b350fbe908834b2', 'committer_username': 'danielost', 'committer_name': 'Danylo Ostapchenko', 'committer_email': 'danya.ostap@gmail.com', 'commit_date': datetime.datetime(2020, 10, 6, 12, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4914594e283481e060c420bc967ecf0565a3bf3e', 'committer_username': 'danielost', 'committer_name': 'Danylo Ostapchenko', 'committer_email': 'danya.ostap@gmail.com', 'commit_date': datetime.datetime(2020, 10, 6, 12, 12, 45, tzinfo=datetime.timezone.utc)}]",Danylo Ostapchenko,72448226,danya.ostap@gmail.com,User,,32,,17,11
1400303788,Add an algorithm to calculate tick marks position,"### **Worked on the issue:**
- #4  

**The following PR contains the following features:**
- An algorithm that takes min and max data values as well as desired number of ticks. Output is the coordinates of the first and last ticks, and the distance between tick marks (i.e. step or tick size).
- Unit tests that cover diverse set of scenarios.

I created a separate object for axis builder methods. First I added the method directly to the `Plot` class, but we might want to access the algorithm without instantiating a `Plot` object. Also having methods like this in `Plot` would break the single responsibility principle, I suppose.",True,6,https://api.github.com/repos/creativescala/chartreuse/pulls/6,https://github.com/creativescala/chartreuse/pull/6,closed,211,0,3,9,3,4,0,0,[],2023-06-20 18:13:20+00:00,2023-06-30 09:14:55+00:00,831695.0,"9 days, 15:01:35","[{'comment_id': 1237038341, 'comment_body': ""A tuple isn't a good choice to return here, as from the users point of view there are three `Double` values and there is no information to distinguish between these values. Which one is the min, which one the max, etc? The only way to know is to read the code.\r\n\r\nBetter to create a simple type\r\n\r\n```scala\r\nfinal case class Ticks(min: Double, max: Double, size: Double)\r\n```"", 'comment_created': datetime.datetime(2023, 6, 21, 13, 50, 59, tzinfo=datetime.timezone.utc), 'commenter': 'noelwelsh', 'type': 'User'}, {'comment_id': 1237038968, 'comment_body': 'Why `1e6`? I think this could use some documentation.', 'comment_created': datetime.datetime(2023, 6, 21, 13, 51, 19, tzinfo=datetime.timezone.utc), 'commenter': 'noelwelsh', 'type': 'User'}, {'comment_id': 1237040042, 'comment_body': ""I don't understand what this algorithm is doing. It needs some comments. "", 'comment_created': datetime.datetime(2023, 6, 21, 13, 52, 1, tzinfo=datetime.timezone.utc), 'commenter': 'noelwelsh', 'type': 'User'}, {'comment_id': 1237040611, 'comment_body': 'Why are we taking ceiling and floor here? Needs comments.', 'comment_created': datetime.datetime(2023, 6, 21, 13, 52, 24, tzinfo=datetime.timezone.utc), 'commenter': 'noelwelsh', 'type': 'User'}]","[{'commit_sha': 'f6e1f214b52e5ca0cf9290aa3c86b45f3bff16f1', 'committer_username': 'danielost', 'committer_name': 'Danylo Ostapchenko', 'committer_email': 'danya.ostap@gmail.com', 'commit_date': datetime.datetime(2020, 10, 6, 12, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ec9cbac1da4af54097ae70bb41a2a664b582ecb9', 'committer_username': 'danielost', 'committer_name': 'Danylo Ostapchenko', 'committer_email': 'danya.ostap@gmail.com', 'commit_date': datetime.datetime(2020, 10, 6, 12, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '98bd2b0acded405032fa1126f98dee9ae0dddc4b', 'committer_username': 'danielost', 'committer_name': 'Danylo Ostapchenko', 'committer_email': 'danya.ostap@gmail.com', 'commit_date': datetime.datetime(2020, 10, 6, 12, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd90e3b8be69a508fdf08f7f0b772f342a7478878', 'committer_username': 'danielost', 'committer_name': 'Danylo Ostapchenko', 'committer_email': 'danya.ostap@gmail.com', 'commit_date': datetime.datetime(2020, 10, 6, 12, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c4fd2c2198c1aabad0fd27b5353387d91ce3a3b6', 'committer_username': 'danielost', 'committer_name': 'Danylo Ostapchenko', 'committer_email': 'danya.ostap@gmail.com', 'commit_date': datetime.datetime(2020, 10, 6, 12, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5618664e29f1448f29503f7348ba4a094f941ad4', 'committer_username': 'danielost', 'committer_name': 'Danylo Ostapchenko', 'committer_email': 'danya.ostap@gmail.com', 'commit_date': datetime.datetime(2020, 10, 6, 12, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fa2f4e9fdcfeb413eac602ccc890607ccc678ba3', 'committer_username': 'danielost', 'committer_name': 'Danylo Ostapchenko', 'committer_email': 'danya.ostap@gmail.com', 'commit_date': datetime.datetime(2020, 10, 6, 12, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9f8820f4f01c9f4d88b6b2d53d1b09fbf8ff6afd', 'committer_username': 'danielost', 'committer_name': 'Danylo Ostapchenko', 'committer_email': 'danya.ostap@gmail.com', 'commit_date': datetime.datetime(2020, 10, 6, 12, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '097b4f036106d333cf87cb5dfceb248953f7c7f4', 'committer_username': 'danielost', 'committer_name': 'Danylo Ostapchenko', 'committer_email': 'danya.ostap@gmail.com', 'commit_date': datetime.datetime(2020, 10, 6, 12, 12, 45, tzinfo=datetime.timezone.utc)}]",Danylo Ostapchenko,72448226,danya.ostap@gmail.com,User,,32,,17,11
1421563127,Tick Marks layout,"### Worked on the issue:
- #4 

### The following PR contains the following features:
- Major tick marks layout
- Grid layout

This is what a plot looks like now:

![image](https://github.com/creativescala/chartreuse/assets/72448226/a33fad7d-bd34-4ada-8b6d-3b8a41693fd8)

The same plot, but with a grid:

![image](https://github.com/creativescala/chartreuse/assets/72448226/bb0e3aeb-7f8d-4573-8f2b-bfdab5ee7bb3)

Next steps:
- Minor ticks layout
- Colour picking
- Font picking
- Fixing label location (right now label position is not relative to the tick, so it breaks when a label is a big number). Will use `Landmark` to fix this
- Using manual ticks (specified by the user)",True,8,https://api.github.com/repos/creativescala/chartreuse/pulls/8,https://github.com/creativescala/chartreuse/pull/8,closed,561,83,7,30,3,14,1,0,[{'name': 'enhancement'}],2023-07-05 18:29:42+00:00,2023-07-12 07:07:56+00:00,563894.0,"6 days, 12:38:14","[{'comment_id': 1254834934, 'comment_body': ""I think this is incorrect. This is a constraint on `layers`, and this seems an overly restrictive to require that they implement these algebras. (I'm not sure why the original constraint was `Layout & Shape`. I don't think it needs to be anything other than `doodle.algebra.Algebra`.) This constraint should be on `draw`, I think."", 'comment_created': datetime.datetime(2023, 7, 6, 19, 27, 15, tzinfo=datetime.timezone.utc), 'commenter': 'noelwelsh', 'type': 'User'}, {'comment_id': 1254845193, 'comment_body': ""This is only to calculate the enclosing bounding box, right? It's quite inefficient to do all this copying.\r\n\r\nI think this will do:\r\n\r\n```scala\r\nlayers.foldLeft(BoundingBox.empty){ (accum, layer) => \r\n  accum.on(layer.data.boundingBox)\r\n}\r\n```"", 'comment_created': datetime.datetime(2023, 7, 6, 19, 39, 33, tzinfo=datetime.timezone.utc), 'commenter': 'noelwelsh', 'type': 'User'}, {'comment_id': 1254847098, 'comment_body': ""Don't use `return`. Rewrite to an expression."", 'comment_created': datetime.datetime(2023, 7, 6, 19, 41, 44, tzinfo=datetime.timezone.utc), 'commenter': 'noelwelsh', 'type': 'User'}, {'comment_id': 1254865857, 'comment_body': ""Too much repetition in this code.  There  shouldn't be repeated code for the x- and y-axis. You can abstract over x- and y-coordinates using a function. E.g. \r\n\r\n```scala\r\nval asX: Double => Point = x => Point(x, 0)\r\nval asY: Double => Point = y => Point(0, y)\r\n```"", 'comment_created': datetime.datetime(2023, 7, 6, 20, 4, 39, tzinfo=datetime.timezone.utc), 'commenter': 'noelwelsh', 'type': 'User'}, {'comment_id': 1254876496, 'comment_body': ""I'm a bit not-fan of using these methods on tuple. I'd rather destructure with an irrefutable match like so:\r\n\r\n```scala\r\nval (screen, _) = tick\r\n```"", 'comment_created': datetime.datetime(2023, 7, 6, 20, 15, 32, tzinfo=datetime.timezone.utc), 'commenter': 'noelwelsh', 'type': 'User'}, {'comment_id': 1254878383, 'comment_body': 'Need to be clearer on what these coordinates mean. I think of screen vs data coordinates. \r\n\r\nScreen coordinates are the coordinates of the graph rendered on the screen. Data coordinates are the values in the data.\r\n\r\nConsider using opaque types to distinguish these at the type level, as I think it will be very easy to get them confused in code.', 'comment_created': datetime.datetime(2023, 7, 6, 20, 17, 38, tzinfo=datetime.timezone.utc), 'commenter': 'noelwelsh', 'type': 'User'}, {'comment_id': 1258079661, 'comment_body': '`layers.head.toPoint` is wrong. Different layers could have different `toPoint` functions. This only compiles due to the overly restrictive type of layers (should probably be `Layer[?, Alg]` not `Layer[A, Alg]`)\r\n\r\n```suggestion\r\n      bb.on(layer.data.boundingBox(layer.toPoint))\r\n```\r\n\r\nIt might be worth adding a `boundingBox` method to `Layer`.', 'comment_created': datetime.datetime(2023, 7, 10, 10, 59, 2, tzinfo=datetime.timezone.utc), 'commenter': 'noelwelsh', 'type': 'User'}, {'comment_id': 1258099931, 'comment_body': ""This wrapper object is not needed, if I'm correctly reading the documentation on opaque types."", 'comment_created': datetime.datetime(2023, 7, 10, 11, 20, 19, tzinfo=datetime.timezone.utc), 'commenter': 'noelwelsh', 'type': 'User'}, {'comment_id': 1258100720, 'comment_body': '```suggestion\r\nimport chartreuse.Coordinate.*\r\n```\r\n\r\n`_` is Scala 2 syntax and will be removed in the future.', 'comment_created': datetime.datetime(2023, 7, 10, 11, 20, 49, tzinfo=datetime.timezone.utc), 'commenter': 'noelwelsh', 'type': 'User'}, {'comment_id': 1258120215, 'comment_body': 'Might look at https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/text/NumberFormat.html instead of this rather ad-hoc method.', 'comment_created': datetime.datetime(2023, 7, 10, 11, 38, 38, tzinfo=datetime.timezone.utc), 'commenter': 'noelwelsh', 'type': 'User'}, {'comment_id': 1258135239, 'comment_body': 'Ad-hoc magic numbers need explanation. I assume this is a temporary decision that will be replaced by style options later.', 'comment_created': datetime.datetime(2023, 7, 10, 11, 54, 23, tzinfo=datetime.timezone.utc), 'commenter': 'noelwelsh', 'type': 'User'}, {'comment_id': 1258135594, 'comment_body': 'If this method only returned the `PlotPicture` that represents the ticks, instead of adding it to the plot, there would be more possibilities for composition in the use above.', 'comment_created': datetime.datetime(2023, 7, 10, 11, 54, 46, tzinfo=datetime.timezone.utc), 'commenter': 'noelwelsh', 'type': 'User'}, {'comment_id': 1258136743, 'comment_body': 'Repetition of this code and `withYTicks` is somewhat annoying. It would be nice to remove it.', 'comment_created': datetime.datetime(2023, 7, 10, 11, 56, tzinfo=datetime.timezone.utc), 'commenter': 'noelwelsh', 'type': 'User'}, {'comment_id': 1258139609, 'comment_body': 'If all the `with` methods (`withGrid, `withXTicks`) just returned the picture instead of adding it to the plot, you could write something like\r\n\r\n```\r\nxTicks\r\n  .on(yTicks)\r\n  .on(axes)\r\n  .on(allLayers)\r\n  .on(if grid then theGrid else empty[Shape])\r\n```\r\n\r\nI.e. emphasize composition.', 'comment_created': datetime.datetime(2023, 7, 10, 11, 59, tzinfo=datetime.timezone.utc), 'commenter': 'noelwelsh', 'type': 'User'}]","[{'commit_sha': 'f1b69e41927a358a9a13120fe7d507c0b34e90e2', 'committer_username': 'danielost', 'committer_name': 'Danylo Ostapchenko', 'committer_email': 'danya.ostap@gmail.com', 'commit_date': datetime.datetime(2020, 10, 6, 12, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e6f86e713192531f1e5dace1e02aa0d8b4fa165a', 'committer_username': 'danielost', 'committer_name': 'Danylo Ostapchenko', 'committer_email': 'danya.ostap@gmail.com', 'commit_date': datetime.datetime(2020, 10, 6, 12, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6f46d752cafecc3609aa9a108a9fe27caffa6e2d', 'committer_username': 'danielost', 'committer_name': 'Danylo Ostapchenko', 'committer_email': 'danya.ostap@gmail.com', 'commit_date': datetime.datetime(2020, 10, 6, 12, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '39625b545242e998980ab3d69ecfdcdf1bf81aad', 'committer_username': 'danielost', 'committer_name': 'Danylo Ostapchenko', 'committer_email': 'danya.ostap@gmail.com', 'commit_date': datetime.datetime(2020, 10, 6, 12, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6bcc79fb03b93909112c0f03e4a208b40da187fb', 'committer_username': 'danielost', 'committer_name': 'Danylo Ostapchenko', 'committer_email': 'danya.ostap@gmail.com', 'commit_date': datetime.datetime(2020, 10, 6, 12, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '760efa29e3d1e857b2d0861d84f430c6667fa56e', 'committer_username': 'danielost', 'committer_name': 'Danylo Ostapchenko', 'committer_email': 'danya.ostap@gmail.com', 'commit_date': datetime.datetime(2020, 10, 6, 12, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd16691c8fd91581f28b2f27384a6c84a29fbf54b', 'committer_username': 'danielost', 'committer_name': 'Danylo Ostapchenko', 'committer_email': 'danya.ostap@gmail.com', 'commit_date': datetime.datetime(2020, 10, 6, 12, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ef71598ddc810f7baacf7d0388f3d3a87b7fbb24', 'committer_username': 'danielost', 'committer_name': 'Danylo Ostapchenko', 'committer_email': 'danya.ostap@gmail.com', 'commit_date': datetime.datetime(2020, 10, 6, 12, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c3c79b8ab8397a097f63e432b4a2435b3528d8d9', 'committer_username': 'danielost', 'committer_name': 'Danylo Ostapchenko', 'committer_email': 'danya.ostap@gmail.com', 'commit_date': datetime.datetime(2020, 10, 6, 12, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5fef71dd0eece5cc72439360571b4e982ba180bd', 'committer_username': 'danielost', 'committer_name': 'Danylo Ostapchenko', 'committer_email': 'danya.ostap@gmail.com', 'commit_date': datetime.datetime(2020, 10, 6, 12, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '12b42b3195edf2903b9d9a48cb57103a3a8d3d39', 'committer_username': 'danielost', 'committer_name': 'Danylo Ostapchenko', 'committer_email': 'danya.ostap@gmail.com', 'commit_date': datetime.datetime(2020, 10, 6, 12, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f2ca421f848af457d2f8815e965147ce7e29b299', 'committer_username': 'danielost', 'committer_name': 'Danylo Ostapchenko', 'committer_email': 'danya.ostap@gmail.com', 'commit_date': datetime.datetime(2020, 10, 6, 12, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bff47effac6ab2f0a203b84733730ef014f3f64e', 'committer_username': 'danielost', 'committer_name': 'Danylo Ostapchenko', 'committer_email': 'danya.ostap@gmail.com', 'commit_date': datetime.datetime(2020, 10, 6, 12, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '18ec3a57c1c2b9340580ce6f151d44dce67fee1b', 'committer_username': 'danielost', 'committer_name': 'Danylo Ostapchenko', 'committer_email': 'danya.ostap@gmail.com', 'commit_date': datetime.datetime(2020, 10, 6, 12, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '634ceb010b871ba9f55c153b5ad0962c099020fa', 'committer_username': 'danielost', 'committer_name': 'Danylo Ostapchenko', 'committer_email': 'danya.ostap@gmail.com', 'commit_date': datetime.datetime(2020, 10, 6, 12, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '08963ff41e0efec33e6c77c6bfd9524027055c9a', 'committer_username': 'danielost', 'committer_name': 'Danylo Ostapchenko', 'committer_email': 'danya.ostap@gmail.com', 'commit_date': datetime.datetime(2020, 10, 6, 12, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2c7c02ce492d2da40369ac4547f8faa1922bf158', 'committer_username': 'danielost', 'committer_name': 'Danylo Ostapchenko', 'committer_email': 'danya.ostap@gmail.com', 'commit_date': datetime.datetime(2020, 10, 6, 12, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f8adeb475190d5930b963f1d6bf89eabe74f4c3c', 'committer_username': 'danielost', 'committer_name': 'Danylo Ostapchenko', 'committer_email': 'danya.ostap@gmail.com', 'commit_date': datetime.datetime(2020, 10, 6, 12, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a8c2778b4cf268f18016547da42235ad40a30954', 'committer_username': 'danielost', 'committer_name': 'Danylo Ostapchenko', 'committer_email': 'danya.ostap@gmail.com', 'commit_date': datetime.datetime(2020, 10, 6, 12, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '689f21da749293177bd8f57c8d5624f54fd95763', 'committer_username': 'danielost', 'committer_name': 'Danylo Ostapchenko', 'committer_email': 'danya.ostap@gmail.com', 'commit_date': datetime.datetime(2020, 10, 6, 12, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a82130d675e3ca8e06a58dadab6ee94b21a304cb', 'committer_username': 'danielost', 'committer_name': 'Danylo Ostapchenko', 'committer_email': 'danya.ostap@gmail.com', 'commit_date': datetime.datetime(2020, 10, 6, 12, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c4b4c1aaac5d0ab5279cd64af0b5e0828c986675', 'committer_username': 'danielost', 'committer_name': 'Danylo Ostapchenko', 'committer_email': 'danya.ostap@gmail.com', 'commit_date': datetime.datetime(2020, 10, 6, 12, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '06110c4a4e5a8df9f153b0872eb0adb7bd8cb162', 'committer_username': 'danielost', 'committer_name': 'Danylo Ostapchenko', 'committer_email': 'danya.ostap@gmail.com', 'commit_date': datetime.datetime(2020, 10, 6, 12, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e3626d96cf0cf6d80be9b1b7491519dcdaa747be', 'committer_username': 'danielost', 'committer_name': 'Danylo Ostapchenko', 'committer_email': 'danya.ostap@gmail.com', 'commit_date': datetime.datetime(2020, 10, 6, 12, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '937453a73ea4bd45dbf831a7447ad0efcf2f0022', 'committer_username': 'danielost', 'committer_name': 'Danylo Ostapchenko', 'committer_email': 'danya.ostap@gmail.com', 'commit_date': datetime.datetime(2020, 10, 6, 12, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '679ac979d58420dedd243684b87195039fecdfc3', 'committer_username': 'danielost', 'committer_name': 'Danylo Ostapchenko', 'committer_email': 'danya.ostap@gmail.com', 'commit_date': datetime.datetime(2020, 10, 6, 12, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'eb731e548df38d00f04d2d633dabb19d8f7c3a8c', 'committer_username': 'danielost', 'committer_name': 'Danylo Ostapchenko', 'committer_email': 'danya.ostap@gmail.com', 'commit_date': datetime.datetime(2020, 10, 6, 12, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cb73dd3e1e690f89c8c3e523cca6686343e9f0f1', 'committer_username': 'danielost', 'committer_name': 'Danylo Ostapchenko', 'committer_email': 'danya.ostap@gmail.com', 'commit_date': datetime.datetime(2020, 10, 6, 12, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7132d28a57f5885c5f8bf35a794558fe4b9d90cb', 'committer_username': 'danielost', 'committer_name': 'Danylo Ostapchenko', 'committer_email': 'danya.ostap@gmail.com', 'commit_date': datetime.datetime(2020, 10, 6, 12, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '482d74eef7195abee887091ffeb755253bda7830', 'committer_username': 'danielost', 'committer_name': 'Danylo Ostapchenko', 'committer_email': 'danya.ostap@gmail.com', 'commit_date': datetime.datetime(2020, 10, 6, 12, 12, 45, tzinfo=datetime.timezone.utc)}]",Danylo Ostapchenko,72448226,danya.ostap@gmail.com,User,,32,,17,11
1455202158,Add manual ticks layout,"Add support for manual ticks layout.

**Example:**

![image](https://github.com/creativescala/chartreuse/assets/72448226/661c8cd3-c560-4e2b-930a-e2064b3a3194)
",True,21,https://api.github.com/repos/creativescala/chartreuse/pulls/21,https://github.com/creativescala/chartreuse/pull/21,closed,429,259,3,9,1,6,0,0,[],2023-07-30 17:30:51+00:00,2023-08-07 14:25:10+00:00,680059.0,"7 days, 20:54:19","[{'comment_id': 1284258334, 'comment_body': ""I moved these types out of `Plot` to make them accessible from `Axes`. But I'm not sure they are supposed to be in `Coordinate.scala`. Where should we put them?"", 'comment_created': datetime.datetime(2023, 8, 4, 10, 29, 51, tzinfo=datetime.timezone.utc), 'commenter': 'danielost', 'type': 'User'}, {'comment_id': 1284264111, 'comment_body': ""I know It's better to use pattern matching in such situations, but I used tuple methods just to make the expressions shorter. Let me know if there is a better way to write these expressions.\r\n\r\nP.S. Math functions prevent layout issues when we use `Manual` or `NoTicks` layout."", 'comment_created': datetime.datetime(2023, 8, 4, 10, 36, 50, tzinfo=datetime.timezone.utc), 'commenter': 'danielost', 'type': 'User'}, {'comment_id': 1285822859, 'comment_body': 'I think we could probably have one `Axis` class, with separate instances for the x and y axes. There is a lot of repetition in here.', 'comment_created': datetime.datetime(2023, 8, 7, 12, 51, 4, tzinfo=datetime.timezone.utc), 'commenter': 'noelwelsh', 'type': 'User'}, {'comment_id': 1285828434, 'comment_body': 'In Scala 3 you can index a tuple like a collection, so you can write `head(0)` (indexes start at 0) instead of using `_1` etc.', 'comment_created': datetime.datetime(2023, 8, 7, 12, 55, 52, tzinfo=datetime.timezone.utc), 'commenter': 'noelwelsh', 'type': 'User'}, {'comment_id': 1285863554, 'comment_body': ""Honestly, I'm not sure either. `TicksSequence` could probably be in the `Axes` class, as I don't think it is needed outside of there. `PlotAlg` could probably be in a companion object for `Plot` as it's associated with `Plot`."", 'comment_created': datetime.datetime(2023, 8, 7, 13, 23, 58, tzinfo=datetime.timezone.utc), 'commenter': 'noelwelsh', 'type': 'User'}, {'comment_id': 1285942850, 'comment_body': ""That's a great idea. Will think about it. "", 'comment_created': datetime.datetime(2023, 8, 7, 14, 23, 28, tzinfo=datetime.timezone.utc), 'commenter': 'danielost', 'type': 'User'}]","[{'commit_sha': 'bf877215eef8e57e7f1d7e2a50dc5b9b20dc41f5', 'committer_username': 'danielost', 'committer_name': 'Danylo Ostapchenko', 'committer_email': 'danya.ostap@gmail.com', 'commit_date': datetime.datetime(2020, 10, 6, 12, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '02931ab4c180f582f257211b16d248ac105699a2', 'committer_username': 'danielost', 'committer_name': 'Danylo Ostapchenko', 'committer_email': 'danya.ostap@gmail.com', 'commit_date': datetime.datetime(2020, 10, 6, 12, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '887765db73f90b0953853051053e06f46efb4d87', 'committer_username': 'danielost', 'committer_name': 'Danylo Ostapchenko', 'committer_email': 'danya.ostap@gmail.com', 'commit_date': datetime.datetime(2020, 10, 6, 12, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cf9b45cb22859ac583836dc3f39f0fafd9733ef3', 'committer_username': 'danielost', 'committer_name': 'Danylo Ostapchenko', 'committer_email': 'danya.ostap@gmail.com', 'commit_date': datetime.datetime(2020, 10, 6, 12, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2cbf9aeed42bac2111036b68a3bc3e9e8ff2f67a', 'committer_username': 'danielost', 'committer_name': 'Danylo Ostapchenko', 'committer_email': 'danya.ostap@gmail.com', 'commit_date': datetime.datetime(2020, 10, 6, 12, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9a344d6c5e12cc5936a62ee3506179204f927eb4', 'committer_username': 'danielost', 'committer_name': 'Danylo Ostapchenko', 'committer_email': 'danya.ostap@gmail.com', 'commit_date': datetime.datetime(2020, 10, 6, 12, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '60653ecba73459e61a617426da912c56f9ccc85f', 'committer_username': 'danielost', 'committer_name': 'Danylo Ostapchenko', 'committer_email': 'danya.ostap@gmail.com', 'commit_date': datetime.datetime(2020, 10, 6, 12, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0f344398ba0631577d6c24ab475d622cf604598b', 'committer_username': 'danielost', 'committer_name': 'Danylo Ostapchenko', 'committer_email': 'danya.ostap@gmail.com', 'commit_date': datetime.datetime(2020, 10, 6, 12, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f1f035a8bebca4af245f0fef8c7c3ee87a03d683', 'committer_username': 'danielost', 'committer_name': 'Danylo Ostapchenko', 'committer_email': 'danya.ostap@gmail.com', 'commit_date': datetime.datetime(2020, 10, 6, 12, 12, 45, tzinfo=datetime.timezone.utc)}]",Danylo Ostapchenko,72448226,danya.ostap@gmail.com,User,,32,,17,11
1466929869,Add support for legends,"### **Worked on the issue:**
- #9 

### **The following PR contains the following features:**
- Legend layout
- Color and label picking when creating a `Layer`

**Example:**

![image](https://github.com/creativescala/chartreuse/assets/72448226/fa6691b5-3fd4-426a-87a4-0529c82879ea)
",True,22,https://api.github.com/repos/creativescala/chartreuse/pulls/22,https://github.com/creativescala/chartreuse/pull/22,closed,87,22,8,3,1,0,1,0,[{'name': 'enhancement'}],2023-08-08 13:44:45+00:00,2023-08-10 16:29:56+00:00,182711.0,"2 days, 2:45:11",[],"[{'commit_sha': 'b724be5139cb7746ec3ec6ac3c78ceb7242df5d8', 'committer_username': 'danielost', 'committer_name': 'Danylo Ostapchenko', 'committer_email': 'danya.ostap@gmail.com', 'commit_date': datetime.datetime(2020, 10, 6, 12, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0d502842ab1724889881baa1e22515e1084251cb', 'committer_username': 'danielost', 'committer_name': 'Danylo Ostapchenko', 'committer_email': 'danya.ostap@gmail.com', 'commit_date': datetime.datetime(2020, 10, 6, 12, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '726135b3f27337022acbb2325a71aaa8b66bfa9b', 'committer_username': 'danielost', 'committer_name': 'Danylo Ostapchenko', 'committer_email': 'danya.ostap@gmail.com', 'commit_date': datetime.datetime(2020, 10, 6, 12, 12, 45, tzinfo=datetime.timezone.utc)}]",Danylo Ostapchenko,72448226,danya.ostap@gmail.com,User,,32,,17,11
1477112963,Add rotated tick labels layout and refactor the code for axis,"### **Worked on the issues:**
- #24 
- #4 
 
### **The PR contains the following features:**
- Users can now specify whether they want to rotate labels (for the X-axis)
- `Axes` has been replaced with `Axis`
- Plot attributes have been moved to their corresponding objects

Rotated labels example:

![image](https://github.com/creativescala/chartreuse/assets/72448226/4c417fb1-d5ae-4082-ac68-ac3d6d7b4e7e)

",True,25,https://api.github.com/repos/creativescala/chartreuse/pulls/25,https://github.com/creativescala/chartreuse/pull/25,closed,587,454,7,9,0,2,0,0,[],2023-08-16 09:10:06+00:00,2023-08-24 11:51:15+00:00,700869.0,"8 days, 2:41:09","[{'comment_id': 1298633141, 'comment_body': 'I would probably write this as a pattern match\r\n\r\n```\r\nmajorTickLayout match {\r\n  case MajorTickLayout.NoTick => ???\r\n  case _ => ???\r\n}\r\n```', 'comment_created': datetime.datetime(2023, 8, 18, 16, 16, 52, tzinfo=datetime.timezone.utc), 'commenter': 'noelwelsh', 'type': 'User'}, {'comment_id': 1298644523, 'comment_body': 'I think a lot of these functions could live in the `Axis` companion object.', 'comment_created': datetime.datetime(2023, 8, 18, 16, 30, 5, tzinfo=datetime.timezone.utc), 'commenter': 'noelwelsh', 'type': 'User'}]","[{'commit_sha': '5f9ab9d204efe7f703ab814c9d6b40df4b516068', 'committer_username': 'danielost', 'committer_name': 'Danylo Ostapchenko', 'committer_email': 'danya.ostap@gmail.com', 'commit_date': datetime.datetime(2020, 10, 6, 12, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3cd955e07afe64f6b8111b450453b30114e0a00a', 'committer_username': 'danielost', 'committer_name': 'Danylo Ostapchenko', 'committer_email': 'danya.ostap@gmail.com', 'commit_date': datetime.datetime(2020, 10, 6, 12, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f08b4e0f823db277bafa2d195b69b42dd37fef9d', 'committer_username': 'danielost', 'committer_name': 'Danylo Ostapchenko', 'committer_email': 'danya.ostap@gmail.com', 'commit_date': datetime.datetime(2020, 10, 6, 12, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b55497972f2689d879997172be3be388971fd597', 'committer_username': 'danielost', 'committer_name': 'Danylo Ostapchenko', 'committer_email': 'danya.ostap@gmail.com', 'commit_date': datetime.datetime(2020, 10, 6, 12, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fdb825c5fb08278e9d8c0b2205da41c80dfec189', 'committer_username': 'danielost', 'committer_name': 'Danylo Ostapchenko', 'committer_email': 'danya.ostap@gmail.com', 'commit_date': datetime.datetime(2020, 10, 6, 12, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '55fbe39f3437f7d750d80ed2b9ed12e856c6837d', 'committer_username': 'danielost', 'committer_name': 'Danylo Ostapchenko', 'committer_email': 'danya.ostap@gmail.com', 'commit_date': datetime.datetime(2020, 10, 6, 12, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0fa4ca1e36b2515ab1eaeb6b9a82c23d8f706fab', 'committer_username': 'danielost', 'committer_name': 'Danylo Ostapchenko', 'committer_email': 'danya.ostap@gmail.com', 'commit_date': datetime.datetime(2020, 10, 6, 12, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd14b04427df2ceb0b831a748152ed09c9c1ee66b', 'committer_username': 'danielost', 'committer_name': 'Danylo Ostapchenko', 'committer_email': 'danya.ostap@gmail.com', 'commit_date': datetime.datetime(2020, 10, 6, 12, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1399da0897ad476e5d6475010a262108a477fdfa', 'committer_username': 'danielost', 'committer_name': 'Danylo Ostapchenko', 'committer_email': 'danya.ostap@gmail.com', 'commit_date': datetime.datetime(2020, 10, 6, 12, 12, 45, tzinfo=datetime.timezone.utc)}]",Danylo Ostapchenko,72448226,danya.ostap@gmail.com,User,,32,,17,11
1490766023,Add annotations,"### **Worked on the issue:**
- #18 

### **The PR contains the following features:**
- Annotations layout
- A couple of different annotation types
- Default annotation locations

**Example of an annotation:**

![image](https://github.com/creativescala/chartreuse/assets/72448226/7f15c299-fb8e-4e87-a9d6-857e4a52e9c3)",True,27,https://api.github.com/repos/creativescala/chartreuse/pulls/27,https://github.com/creativescala/chartreuse/pull/27,closed,362,1,6,7,0,3,1,0,[{'name': 'enhancement'}],2023-08-26 18:54:26+00:00,2023-08-29 15:43:48+00:00,247762.0,"2 days, 20:49:22","[{'comment_id': 1307351544, 'comment_body': ""It's not obvious what this function is doing. I think it could use a bit of documentation."", 'comment_created': datetime.datetime(2023, 8, 28, 12, 19, 17, tzinfo=datetime.timezone.utc), 'commenter': 'noelwelsh', 'type': 'User'}, {'comment_id': 1307352499, 'comment_body': 'If you import `doodle.syntax.all.*` you can write angles using the `degrees` extension method. E.g. you can write `90.degrees`, `180.degrees`, and so on.', 'comment_created': datetime.datetime(2023, 8, 28, 12, 20, 17, tzinfo=datetime.timezone.utc), 'commenter': 'noelwelsh', 'type': 'User'}, {'comment_id': 1309023584, 'comment_body': 'I have added a bit of documentation to clarify some things about `AnnotationPosition`. Also added a simple example of an annotated plot.', 'comment_created': datetime.datetime(2023, 8, 29, 15, 38, 41, tzinfo=datetime.timezone.utc), 'commenter': 'danielost', 'type': 'User'}]","[{'commit_sha': '194e5fe960daf1307e454f7268a31091e0cb20ca', 'committer_username': 'danielost', 'committer_name': 'Danylo Ostapchenko', 'committer_email': 'danya.ostap@gmail.com', 'commit_date': datetime.datetime(2020, 10, 6, 12, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c904ab3b704b46fea53a34b521d404fe6ef3b50f', 'committer_username': 'danielost', 'committer_name': 'Danylo Ostapchenko', 'committer_email': 'danya.ostap@gmail.com', 'commit_date': datetime.datetime(2020, 10, 6, 12, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f6779a275fd8ebe4a2def28dadd451c1543cbe70', 'committer_username': 'danielost', 'committer_name': 'Danylo Ostapchenko', 'committer_email': 'danya.ostap@gmail.com', 'commit_date': datetime.datetime(2020, 10, 6, 12, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f869586ba5cb852a53cc3f61725a05bab9bccb04', 'committer_username': 'danielost', 'committer_name': 'Danylo Ostapchenko', 'committer_email': 'danya.ostap@gmail.com', 'commit_date': datetime.datetime(2020, 10, 6, 12, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '31edbe71d7739d99f029505574569e04f3d7946d', 'committer_username': 'danielost', 'committer_name': 'Danylo Ostapchenko', 'committer_email': 'danya.ostap@gmail.com', 'commit_date': datetime.datetime(2020, 10, 6, 12, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6a41a7c28f1ea06ce88a78c26c4d69b445f4ef9b', 'committer_username': 'danielost', 'committer_name': 'Danylo Ostapchenko', 'committer_email': 'danya.ostap@gmail.com', 'commit_date': datetime.datetime(2020, 10, 6, 12, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b8282707acc971f5d0b0a327c2f4f7708dfa4d4a', 'committer_username': 'danielost', 'committer_name': 'Danylo Ostapchenko', 'committer_email': 'danya.ostap@gmail.com', 'commit_date': datetime.datetime(2020, 10, 6, 12, 12, 45, tzinfo=datetime.timezone.utc)}]",Danylo Ostapchenko,72448226,danya.ostap@gmail.com,User,,32,,17,11
1441405430,Fix tick labels layout,"Updated tick labels layout. The layout is now correct with big numbers.

**Example:**

![image](https://github.com/creativescala/chartreuse/assets/72448226/9b95d0dd-440b-43f7-b335-834c771ab5e6)

This works well for the Y-axis. For the X-axis we need to rotate labels to avoid overlapping. We need to think about how to determine if it is necessary to rotate the labels. I think we can check if the first two labels or the last two labels overlap, as they are supposed to be the longest strings.

On the other hand, even some labels in the middle can overlap in the following cases:
- The plot width is too small, the outer labels might be single-digit integers, and some labels in the middle might be floating-point numbers, which are generally longer
- With categorical data, the length of the label doesn't depend on its position

Considering this, it might be necessary to traverse the whole sequence of labels to determine if they overlap.",True,15,https://api.github.com/repos/creativescala/chartreuse/pulls/15,https://github.com/creativescala/chartreuse/pull/15,closed,29,17,1,2,0,0,2,0,"[{'name': 'bug'}, {'name': 'enhancement'}]",2023-07-19 17:07:40+00:00,2023-07-20 11:17:21+00:00,65381.0,18:09:41,[],"[{'commit_sha': 'aa803f68ed603d1fd96f0bb0d13cdddb8dfb9ce5', 'committer_username': 'danielost', 'committer_name': 'Danylo Ostapchenko', 'committer_email': 'danya.ostap@gmail.com', 'commit_date': datetime.datetime(2020, 10, 6, 12, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '66bf5721cb883ce5450817a62224def6b8f72f85', 'committer_username': 'danielost', 'committer_name': 'Danylo Ostapchenko', 'committer_email': 'danya.ostap@gmail.com', 'commit_date': datetime.datetime(2020, 10, 6, 12, 12, 45, tzinfo=datetime.timezone.utc)}]",Danylo Ostapchenko,72448226,danya.ostap@gmail.com,User,,32,,17,11
1439583785,Add minor ticks support,"Add minor ticks layout for `Plot`

**Example:**

![image_2023-07-18_17-49-15](https://github.com/creativescala/chartreuse/assets/72448226/4663f1fa-14e7-4459-a9c2-8e95d8fd64fe)
",True,14,https://api.github.com/repos/creativescala/chartreuse/pulls/14,https://github.com/creativescala/chartreuse/pull/14,closed,97,11,1,5,2,5,1,0,[{'name': 'enhancement'}],2023-07-18 16:34:53+00:00,2023-07-20 11:02:22+00:00,152849.0,"1 day, 18:27:29","[{'comment_id': 1267038318, 'comment_body': ""Please let me know if it's okay to name vals like this."", 'comment_created': datetime.datetime(2023, 7, 18, 16, 38, 57, tzinfo=datetime.timezone.utc), 'commenter': 'danielost', 'type': 'User'}, {'comment_id': 1267859172, 'comment_body': ""You seem to really really like putting [magic numbers](https://en.wikipedia.org/wiki/Magic_number_(programming)) in your code. Please don't."", 'comment_created': datetime.datetime(2023, 7, 19, 10, 6, 17, tzinfo=datetime.timezone.utc), 'commenter': 'noelwelsh', 'type': 'User'}, {'comment_id': 1267869035, 'comment_body': '1. You could have used more descriptive names\r\n2. Use a pattern match to extract the elements\r\nE.g. (untested)\r\n```scala\r\nval here +: neighbour +: _ = ticksSequence\r\n```', 'comment_created': datetime.datetime(2023, 7, 19, 10, 15, 40, tzinfo=datetime.timezone.utc), 'commenter': 'noelwelsh', 'type': 'User'}, {'comment_id': 1267870517, 'comment_body': 'More magic numbers.', 'comment_created': datetime.datetime(2023, 7, 19, 10, 17, 11, tzinfo=datetime.timezone.utc), 'commenter': 'noelwelsh', 'type': 'User'}, {'comment_id': 1267939757, 'comment_body': 'Later, I intend to replace those with code which decides how many ticks to put. I should have mentioned this in the PR description.', 'comment_created': datetime.datetime(2023, 7, 19, 11, 27, 52, tzinfo=datetime.timezone.utc), 'commenter': 'danielost', 'type': 'User'}]","[{'commit_sha': '2db2eea70cd6005d5ccb85da15a7edbb3d83484a', 'committer_username': 'danielost', 'committer_name': 'Danylo Ostapchenko', 'committer_email': 'danya.ostap@gmail.com', 'commit_date': datetime.datetime(2020, 10, 6, 12, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '50532062539cf99e4773e8bb61b963a23e07e476', 'committer_username': 'danielost', 'committer_name': 'Danylo Ostapchenko', 'committer_email': 'danya.ostap@gmail.com', 'commit_date': datetime.datetime(2020, 10, 6, 12, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cc299c46322373682259a3826907d09d4ea63ba9', 'committer_username': 'danielost', 'committer_name': 'Danylo Ostapchenko', 'committer_email': 'danya.ostap@gmail.com', 'commit_date': datetime.datetime(2020, 10, 6, 12, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a38392937911cdf274e93b9d72fcdca2a9c79f95', 'committer_username': 'danielost', 'committer_name': 'Danylo Ostapchenko', 'committer_email': 'danya.ostap@gmail.com', 'commit_date': datetime.datetime(2020, 10, 6, 12, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6323a4a6e90225a1a85e12e989853358ab8d09a3', 'committer_username': 'danielost', 'committer_name': 'Danylo Ostapchenko', 'committer_email': 'danya.ostap@gmail.com', 'commit_date': datetime.datetime(2020, 10, 6, 12, 12, 45, tzinfo=datetime.timezone.utc)}]",Danylo Ostapchenko,72448226,danya.ostap@gmail.com,User,,32,,17,11

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
636315084,chartreuse,creativescala/chartreuse,Scala,2,24,5,2,184,6,5,0,"[{'id': 1510954831, 'number': 30, 'closed': datetime.datetime(2023, 10, 6, 14, 59, 32, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 9, 11, 20, 18, 50, tzinfo=datetime.timezone.utc), 'time_taken': 2140842.0, 'time_delta': '24 days, 18:40:42', 'additions': 66, 'deletions': 43, 'state': 'closed'}, {'id': 1501098096, 'number': 29, 'closed': datetime.datetime(2023, 9, 4, 12, 40, 9, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 9, 4, 11, 10, 57, tzinfo=datetime.timezone.utc), 'time_taken': 5352.0, 'time_delta': '1:29:12', 'additions': 2424, 'deletions': 93, 'state': 'closed'}, {'id': 1490766023, 'number': 27, 'closed': datetime.datetime(2023, 8, 29, 15, 43, 48, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 8, 26, 18, 54, 26, tzinfo=datetime.timezone.utc), 'time_taken': 247762.0, 'time_delta': '2 days, 20:49:22', 'additions': 362, 'deletions': 1, 'state': 'closed'}, {'id': 1477112963, 'number': 25, 'closed': datetime.datetime(2023, 8, 24, 11, 51, 15, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 8, 16, 9, 10, 6, tzinfo=datetime.timezone.utc), 'time_taken': 700869.0, 'time_delta': '8 days, 2:41:09', 'additions': 587, 'deletions': 454, 'state': 'closed'}, {'id': 1466929869, 'number': 22, 'closed': datetime.datetime(2023, 8, 10, 16, 29, 56, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 8, 8, 13, 44, 45, tzinfo=datetime.timezone.utc), 'time_taken': 182711.0, 'time_delta': '2 days, 2:45:11', 'additions': 87, 'deletions': 22, 'state': 'closed'}, {'id': 1455202158, 'number': 21, 'closed': datetime.datetime(2023, 8, 7, 14, 25, 10, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 7, 30, 17, 30, 51, tzinfo=datetime.timezone.utc), 'time_taken': 680059.0, 'time_delta': '7 days, 20:54:19', 'additions': 429, 'deletions': 259, 'state': 'closed'}, {'id': 1441405430, 'number': 15, 'closed': datetime.datetime(2023, 7, 20, 11, 17, 21, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 7, 19, 17, 7, 40, tzinfo=datetime.timezone.utc), 'time_taken': 65381.0, 'time_delta': '18:09:41', 'additions': 29, 'deletions': 17, 'state': 'closed'}, {'id': 1439583785, 'number': 14, 'closed': datetime.datetime(2023, 7, 20, 11, 2, 22, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 7, 18, 16, 34, 53, tzinfo=datetime.timezone.utc), 'time_taken': 152849.0, 'time_delta': '1 day, 18:27:29', 'additions': 97, 'deletions': 11, 'state': 'closed'}, {'id': 1421563127, 'number': 8, 'closed': datetime.datetime(2023, 7, 12, 7, 7, 56, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 7, 5, 18, 29, 42, tzinfo=datetime.timezone.utc), 'time_taken': 563894.0, 'time_delta': '6 days, 12:38:14', 'additions': 561, 'deletions': 83, 'state': 'closed'}, {'id': 1400303788, 'number': 6, 'closed': datetime.datetime(2023, 6, 30, 9, 14, 55, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 6, 20, 18, 13, 20, tzinfo=datetime.timezone.utc), 'time_taken': 831695.0, 'time_delta': '9 days, 15:01:35', 'additions': 211, 'deletions': 0, 'state': 'closed'}, {'id': 1374397051, 'number': 5, 'closed': datetime.datetime(2023, 6, 7, 17, 17, 28, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 6, 1, 16, 14, 19, tzinfo=datetime.timezone.utc), 'time_taken': 522189.0, 'time_delta': '6 days, 1:03:09', 'additions': 130, 'deletions': 0, 'state': 'closed'}]"
