pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
1380026241,Refactor error handling of the repository,"### Why
Currently, most errors in r-polars are plain string error messages, and for the errors from other crates (e.g. pola-rs) we have to manually convert it into string. Sometimes we append extra string context to illustrate why there is an error. Such string errors could become hard to work with when there are multiple layers of results to unwrap, since we need to directly manipulate the error strings. We also lose the layered structure of the error in the process, and on the R side we only see a single error message.

### How
The [anyhow](https://docs.rs/anyhow/latest/anyhow/) crate provides common error handling implementations that can simplify our workflow:

- We can use `anyhow::Error` for all internal functions on the Rust side (e.g. `robj_to_*`). All errors implementing the `std::error::Error` trait (as well as `Sync` and `Send` traits) can be automatically converted to `anyhow::Error` with the `?` operator. We can also use `<error>.context(<msg>)` to wrap the error with additional context. Currently the `extendr_api::Error` unimplements `Sync` and `Send`, so we cannot directly reuse those errors for now.
- We need to implement our wrapper error (currently named `Rerr`) for the interops between R and Rust. An `anyhow::Error` can also be automatically wrapped to `Rerr` with the `?` operator. We use the wrapper error at boundary functions (e.g. `import_arrow_ipc`) that connects R and Rust. We can also implement as many helper functions for the wrapper error as we like to and export it to the R side (e.g. dump the layers of contexts to R).
- We can also implement helper methods on the R side to help process errors from Rust.

### Progress
I have implemented a minimal version of this error handling system. The `scan_arrow_ipc` function on the R side can dump error messages from an `anyhow::Error`. Currently the `import_arrow_ipc` on the Rust side looks messy since we are using Strings as errors, which do not implement the `std::error::Error` trait by default. Hopefully this could look a lot cleaner after we refactored the internal functions.

",True,233,https://api.github.com/repos/pola-rs/r-polars/pulls/233,https://github.com/pola-rs/r-polars/pull/233,closed,1597,921,41,27,18,10,0,0,[],2023-06-06 02:10:06+00:00,2023-06-21 20:53:26+00:00,1363400.0,"15 days, 18:43:20","[{'comment_id': 1218995276, 'comment_body': 'Well I forgot to import arrow library before document(). I will fix this later.', 'comment_created': datetime.datetime(2023, 6, 6, 6, 33, 24, tzinfo=datetime.timezone.utc), 'commenter': 'Sicheng-Pan', 'type': 'User'}, {'comment_id': 1219132313, 'comment_body': 'If implementing something like ~~`impl<E> From<Result<E, String>> for Result<E, anyhow::Error> {}`~~ then the ? should implicitly call it and map_err would not be needed.', 'comment_created': datetime.datetime(2023, 6, 6, 8, 2, 14, tzinfo=datetime.timezone.utc), 'commenter': 'sorhawell', 'type': 'User'}, {'comment_id': 1219240266, 'comment_body': 'actually like this in `ranyhow.rs`\r\n```rust\r\nimpl From<String> for Rerr {\r\n    fn from(err: String) -> Self {\r\n        Rerr(ranyhow!(err))\r\n    }\r\n}\r\n```', 'comment_created': datetime.datetime(2023, 6, 6, 9, 6, 11, tzinfo=datetime.timezone.utc), 'commenter': 'sorhawell', 'type': 'User'}, {'comment_id': 1219246642, 'comment_body': '> Currently the import_arrow_ipc on the Rust side looks messy since we are using Strings as errors, which do not implement the std::error::Error trait by default.\r\n\r\nwould above trait impl make it easier to still use String-errors in a transition phase?', 'comment_created': datetime.datetime(2023, 6, 6, 9, 9, 52, tzinfo=datetime.timezone.utc), 'commenter': 'sorhawell', 'type': 'User'}, {'comment_id': 1220405147, 'comment_body': 'Yeah we can use this for transition.', 'comment_created': datetime.datetime(2023, 6, 6, 21, 38, 56, tzinfo=datetime.timezone.utc), 'commenter': 'Sicheng-Pan', 'type': 'User'}, {'comment_id': 1228787268, 'comment_body': 'I think I would remove the `: Clone` from `T: Clone`. I think it is better to move T to avoid overhead.', 'comment_created': datetime.datetime(2023, 6, 13, 23, 0, 23, tzinfo=datetime.timezone.utc), 'commenter': 'sorhawell', 'type': 'User'}, {'comment_id': 1228908190, 'comment_body': 'I forgot to remove it when I refactor the code. This trait is not needed for us.', 'comment_created': datetime.datetime(2023, 6, 14, 2, 48, 21, tzinfo=datetime.timezone.utc), 'commenter': 'Sicheng-Pan', 'type': 'User'}, {'comment_id': 1233138791, 'comment_body': 'it would be needed to add contexts to an Rerr on R side also. I suggest adding `on_arg` like this and likewise for `hint` `when` and `type_missmatch`. `ctx` trait method perhpas not...\r\n\r\n```rust\r\n   pub fn on_arg(&self, s: String) -> Self {\r\n        let res: RResult<i32> = Err(self.clone()).on_arg(s); //i32 is a placeholder type, could be any\r\n        res.unwrap_err()\r\n    }\r\n    ```', 'comment_created': datetime.datetime(2023, 6, 17, 21, 51, 24, tzinfo=datetime.timezone.utc), 'commenter': 'sorhawell', 'type': 'User'}, {'comment_id': 1235992883, 'comment_body': 'This function needs to be exported?', 'comment_created': datetime.datetime(2023, 6, 20, 23, 11, 43, tzinfo=datetime.timezone.utc), 'commenter': 'eitsupi', 'type': 'User'}, {'comment_id': 1235994056, 'comment_body': 'uhh no, will remove after checks have completed', 'comment_created': datetime.datetime(2023, 6, 20, 23, 14, 19, tzinfo=datetime.timezone.utc), 'commenter': 'sorhawell', 'type': 'User'}]","[{'commit_sha': '87fc9733d641b3d6cc0ed57c1f510c020169fcf6', 'committer_username': 'Sicheng-Pan', 'committer_name': 'Macronova', 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 20, 0, 24, 39, tzinfo=datetime.timezone.utc)}, {'commit_sha': '02caa70a5e2154a53b7aee651a3349eb21990e6d', 'committer_username': 'Sicheng-Pan', 'committer_name': 'Macronova', 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 20, 0, 24, 39, tzinfo=datetime.timezone.utc)}, {'commit_sha': '70a8164631190da6ec5c5793f4e1ee51bccc8c5d', 'committer_username': 'Sicheng-Pan', 'committer_name': 'Macronova', 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 20, 0, 24, 39, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6ebb2489e978c49b66d67ac177754a391a6df48c', 'committer_username': 'Sicheng-Pan', 'committer_name': 'Macronova', 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 20, 0, 24, 39, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f5b0addead2896a9671b90265f2ad33b3545306e', 'committer_username': 'Sicheng-Pan', 'committer_name': 'Macronova', 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 20, 0, 24, 39, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a0b3f79f571e63429960104e8b832ef877f676ec', 'committer_username': 'Sicheng-Pan', 'committer_name': 'Macronova', 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 20, 0, 24, 39, tzinfo=datetime.timezone.utc)}, {'commit_sha': '691865e83c958a30a3ab8fb02224849c7b5c227e', 'committer_username': 'Sicheng-Pan', 'committer_name': 'Macronova', 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 20, 0, 24, 39, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3349349ad2ef6d3fcfc546920bf047688757aecc', 'committer_username': 'Sicheng-Pan', 'committer_name': 'Macronova', 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 20, 0, 24, 39, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bb905a9c4d44218166998fbf2e44c2379a5bfe28', 'committer_username': 'Sicheng-Pan', 'committer_name': 'Macronova', 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 20, 0, 24, 39, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3790129abdb8b19ab7f47fa8386cf165366be873', 'committer_username': 'Sicheng-Pan', 'committer_name': 'Macronova', 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 20, 0, 24, 39, tzinfo=datetime.timezone.utc)}, {'commit_sha': '26c5d8c8815eaf444551f62f3e226aa04fac8bea', 'committer_username': 'Sicheng-Pan', 'committer_name': 'Macronova', 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 20, 0, 24, 39, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cdaf2f7799eb8d7f2afe85cc902540b76e0eb6df', 'committer_username': 'Sicheng-Pan', 'committer_name': 'Macronova', 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 20, 0, 24, 39, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8bd8bbf5d177b75cdbfe3475ef5304bc14803f64', 'committer_username': 'Sicheng-Pan', 'committer_name': 'Macronova', 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 20, 0, 24, 39, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8d9219a796fc83d36a673fda039279ee01c9db03', 'committer_username': 'Sicheng-Pan', 'committer_name': 'Macronova', 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 20, 0, 24, 39, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2080c44d6b18a014052ea3232483ad8769575246', 'committer_username': 'sorhawell', 'committer_name': 'Søren Havelund Welling', 'committer_email': 'sorhawell@gmail.com', 'commit_date': datetime.datetime(2014, 6, 28, 21, 25, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ac2d576cdaed3afbbc0e82a4a3809b41248e42a2', 'committer_username': 'sorhawell', 'committer_name': 'Søren Havelund Welling', 'committer_email': 'sorhawell@gmail.com', 'commit_date': datetime.datetime(2014, 6, 28, 21, 25, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cce6a943d13f682ecee8bb65de936070be73e5d9', 'committer_username': 'sorhawell', 'committer_name': 'Søren Havelund Welling', 'committer_email': 'sorhawell@gmail.com', 'commit_date': datetime.datetime(2014, 6, 28, 21, 25, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8a7ebc7813856963a6fd7714c2a2cc82e49aa4b4', 'committer_username': 'sorhawell', 'committer_name': 'Søren Havelund Welling', 'committer_email': 'sorhawell@gmail.com', 'commit_date': datetime.datetime(2014, 6, 28, 21, 25, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '33fda5c0b48a05ac2a15720036b2046551fe3c69', 'committer_username': 'sorhawell', 'committer_name': 'Søren Havelund Welling', 'committer_email': 'sorhawell@gmail.com', 'commit_date': datetime.datetime(2014, 6, 28, 21, 25, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '079b8a38a6c6735e0e460b8fb3a1facc52210c54', 'committer_username': 'sorhawell', 'committer_name': 'Søren Havelund Welling', 'committer_email': 'sorhawell@gmail.com', 'commit_date': datetime.datetime(2014, 6, 28, 21, 25, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5ec11c875d5043ec77bcd0ab524836e271f4f894', 'committer_username': 'sorhawell', 'committer_name': 'Søren Havelund Welling', 'committer_email': 'sorhawell@gmail.com', 'commit_date': datetime.datetime(2014, 6, 28, 21, 25, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5b6765840f78c77aa95ded98a25ed79a98d20140', 'committer_username': 'sorhawell', 'committer_name': 'Søren Havelund Welling', 'committer_email': 'sorhawell@gmail.com', 'commit_date': datetime.datetime(2014, 6, 28, 21, 25, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8d504f2bbb5f0a5b7320b0c6031cfa8e930d9600', 'committer_username': 'sorhawell', 'committer_name': 'Søren Havelund Welling', 'committer_email': 'sorhawell@gmail.com', 'commit_date': datetime.datetime(2014, 6, 28, 21, 25, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ee1914efb7acde27d2e463a856339128d8e871f2', 'committer_username': 'sorhawell', 'committer_name': 'Søren Havelund Welling', 'committer_email': 'sorhawell@gmail.com', 'commit_date': datetime.datetime(2014, 6, 28, 21, 25, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '59702554f5a243193b06c82d9d292c913d5041ee', 'committer_username': 'sorhawell', 'committer_name': 'Søren Havelund Welling', 'committer_email': 'sorhawell@gmail.com', 'commit_date': datetime.datetime(2014, 6, 28, 21, 25, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b8f4d276ccef65ac655d2dd90627f2f58d7732e9', 'committer_username': 'sorhawell', 'committer_name': 'Søren Havelund Welling', 'committer_email': 'sorhawell@gmail.com', 'commit_date': datetime.datetime(2014, 6, 28, 21, 25, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd75ce6a00001b390a1c62691cbf79d3e8aaf4045', 'committer_username': 'sorhawell', 'committer_name': 'Søren Havelund Welling', 'committer_email': 'sorhawell@gmail.com', 'commit_date': datetime.datetime(2014, 6, 28, 21, 25, 58, tzinfo=datetime.timezone.utc)}]",Macronova,60079945,,User,,5,,1,3
1420330191,Background execution and R process pool,"This PR aims to implement an interface to create asynchronous jobs that can be executed in background threads.

Specifically, this will provide an alternative option to run the `Lazy` query in background without blocking the R console.

In order to run `map` and `apply` on the `LazyFrame` without using the existing R interpreter, new R processes have to be created in background to handle the evaluation tasks.

The user will get thread handles for the background jobs, and can check if they are done (non-blocking) or wait for them to finish (blocking).

Example:
```R
> handle <- pl$LazyFrame(mtcars)$with_column(pl$col(""mpg"")$map_in_background(function(x) x * 0.43)$alias(""kml""))$collect_in_background()
> handle$is_finished() |> unwrap()
[1] TRUE
> handle$join() |> unwrap()
shape: (32, 12)
┌──────┬─────┬───────┬───────┬───┬─────┬──────┬──────┬───────┐
│ mpg  ┆ cyl ┆ disp  ┆ hp    ┆ … ┆ am  ┆ gear ┆ carb ┆ kml   │
│ ---  ┆ --- ┆ ---   ┆ ---   ┆   ┆ --- ┆ ---  ┆ ---  ┆ ---   │
│ f64  ┆ f64 ┆ f64   ┆ f64   ┆   ┆ f64 ┆ f64  ┆ f64  ┆ f64   │
╞══════╪═════╪═══════╪═══════╪═══╪═════╪══════╪══════╪═══════╡
│ 21.0 ┆ 6.0 ┆ 160.0 ┆ 110.0 ┆ … ┆ 1.0 ┆ 4.0  ┆ 4.0  ┆ 9.03  │
│ 21.0 ┆ 6.0 ┆ 160.0 ┆ 110.0 ┆ … ┆ 1.0 ┆ 4.0  ┆ 4.0  ┆ 9.03  │
│ 22.8 ┆ 4.0 ┆ 108.0 ┆ 93.0  ┆ … ┆ 1.0 ┆ 4.0  ┆ 1.0  ┆ 9.804 │
│ 21.4 ┆ 6.0 ┆ 258.0 ┆ 110.0 ┆ … ┆ 0.0 ┆ 3.0  ┆ 1.0  ┆ 9.202 │
│ …    ┆ …   ┆ …     ┆ …     ┆ … ┆ …   ┆ …    ┆ …    ┆ …     │
│ 15.8 ┆ 8.0 ┆ 351.0 ┆ 264.0 ┆ … ┆ 1.0 ┆ 5.0  ┆ 4.0  ┆ 6.794 │
│ 19.7 ┆ 6.0 ┆ 145.0 ┆ 175.0 ┆ … ┆ 1.0 ┆ 5.0  ┆ 6.0  ┆ 8.471 │
│ 15.0 ┆ 8.0 ┆ 301.0 ┆ 335.0 ┆ … ┆ 1.0 ┆ 5.0  ┆ 8.0  ┆ 6.45  │
│ 21.4 ┆ 4.0 ┆ 121.0 ┆ 109.0 ┆ … ┆ 1.0 ┆ 4.0  ┆ 2.0  ┆ 9.202 │
└──────┴─────┴───────┴───────┴───┴─────┴──────┴──────┴───────┘
```",True,311,https://api.github.com/repos/pola-rs/r-polars/pulls/311,https://github.com/pola-rs/r-polars/pull/311,closed,2221,622,53,79,36,31,0,0,[],2023-07-05 03:13:54+00:00,2023-08-09 15:04:19+00:00,3066625.0,"35 days, 11:50:25","[{'comment_id': 1271557481, 'comment_body': '(updated)\r\n\r\n[envvars are not thread safe](https://stackoverflow.com/questions/30476600/how-can-getenv-be-thread-safe). We would probably be fine in most cases though.\r\n\r\n[How about copying this pattern from rust-polars where it is placed in a `Static Lazy`](https://github.com/pola-rs/polars/blob/8b0588fcdec2940126cfbb85ec3af13364490f57/polars/polars-core/src/lib.rs#L49)\r\n[the py-polars docs of this](https://pola-rs.github.io/polars/py-polars/html/reference/api/polars.threadpool_size.html)\r\n\r\n... or moving this Default setting to [.onLoad](https://github.com/pola-rs/r-polars/blob/5d4a59bd6e05f59ffc1ad9759a0c022caeffcdb9/R/zzz.R#L119)\r\n\r\n\r\n', 'comment_created': datetime.datetime(2023, 7, 23, 21, 1, 37, tzinfo=datetime.timezone.utc), 'commenter': 'sorhawell', 'type': 'User'}, {'comment_id': 1271559204, 'comment_body': 'Why does this needs to be thread safe? From my understanding the only scenario where this function could be called is when users are constructing expressions in the single-threaded R session. ', 'comment_created': datetime.datetime(2023, 7, 23, 21, 18, 41, tzinfo=datetime.timezone.utc), 'commenter': 'Sicheng-Pan', 'type': 'User'}, {'comment_id': 1271566543, 'comment_body': 'Depends on how easy it is to copy the `Static Lazy` pattern. Just in principle, it is cleanest to have as few ""invariants"" as possible.Some point in the future some careless dev may refactor your code and then it is good to have as few ""not causing havoc right now""-elements as possible.\r\n\r\nCurrently the thread ""message container"" struct `ParRobj` only works with plain R vectors, not R functions across. There is some type checking as function cannot be converted to a `Series`, but maybe some altRep, might make it blow in the future. The function  `map_alias()` do contain invariant it should be run from the main thread. I just missed some PyO3 features to implement this cleanly thread-safe. I had an experimental warning for a long time in docs.\r\n\r\nSo if not worth I also suggest to move the envvar check to `.onLoad.` I imagine this is a R session related setting, not a query specific setting. In the case a user serializes the query to disk and loads it from another machine it would not work. Maybe you have other scenarios in mind?', 'comment_created': datetime.datetime(2023, 7, 23, 22, 14, tzinfo=datetime.timezone.utc), 'commenter': 'sorhawell', 'type': 'User'}, {'comment_id': 1271568116, 'comment_body': '```suggestion\r\n  source(""inst/misc/develop_polars.R"")\r\n```', 'comment_created': datetime.datetime(2023, 7, 23, 22, 24, 22, tzinfo=datetime.timezone.utc), 'commenter': 'sorhawell', 'type': 'User'}, {'comment_id': 1271568349, 'comment_body': '```suggestion\r\n  check_polars() #assumes rust target at `paste0(getwd(),""/src/rust"")`\r\n```', 'comment_created': datetime.datetime(2023, 7, 23, 22, 26, 20, tzinfo=datetime.timezone.utc), 'commenter': 'sorhawell', 'type': 'User'}, {'comment_id': 1271568375, 'comment_body': 'update md also', 'comment_created': datetime.datetime(2023, 7, 23, 22, 26, 57, tzinfo=datetime.timezone.utc), 'commenter': 'sorhawell', 'type': 'User'}, {'comment_id': 1272362066, 'comment_body': 'It seems confusing to still have `$apply_in_background` as a separate method. It would would be better if there a param `in_background = TRUE` in `$apply( )` as with $map()', 'comment_created': datetime.datetime(2023, 7, 24, 14, 40, 44, tzinfo=datetime.timezone.utc), 'commenter': 'sorhawell', 'type': 'User'}, {'comment_id': 1272388572, 'comment_body': 'it seems the informative text from thiserror does not come through to the user\r\n```R\r\nError: Execution halted with the following contexts\r\n0: During function call [handle$join()]\r\n1: Handled\r\n```\r\nIt should state `Joined on a used thread handler`. A casual R user may not understand what just `Handled` means.', 'comment_created': datetime.datetime(2023, 7, 24, 15, 0, 32, tzinfo=datetime.timezone.utc), 'commenter': 'sorhawell', 'type': 'User'}, {'comment_id': 1272402986, 'comment_body': 'I just added this to docs ""Any use of $map() and $apply() will be diverted to other R session"" That was not entirely correct. Error messages when trying to use map and apply with `collect_in_background` are very poor.\r\n\r\nit seems map(in_background=TRUE) does not work with `collect_inbackground`\r\n\r\n```R\r\npl$set_global_rpool_cap(1)\r\n\r\nlf = pl$LazyFrame(iris)\r\n\r\nEDIT #panic is unrelated to this PR\r\nh = lf$groupby(""Species"")$agg(\r\n  pl$col(""Sepal.Length"")$apply(\\(s) s$to_r() |> length())\r\n)$collect_in_background()\r\n\r\n#poor error message, improve.\r\nh$join()\r\n\r\n#this works\r\nh = lf$groupby(""Species"")$agg(\r\n  pl$col(""Sepal.Length"")$apply_in_background(\\(s) s$to_r() |> length())\r\n)$collect_in_background()\r\nh$join()\r\n\r\n#this does not work, why not ?\r\nh = pl$LazyFrame(iris)$select(pl$col(""Species"")$map(\\(x) length(x)),in_background =TRUE)$collect_in_background()\r\n\r\n```', 'comment_created': datetime.datetime(2023, 7, 24, 15, 11, 54, tzinfo=datetime.timezone.utc), 'commenter': 'sorhawell', 'type': 'User'}, {'comment_id': 1272883798, 'comment_body': ""I referred `map_in_background` when I implemented `apply_in_background`, and I'm unsure if `apply` and `apply_in_background` have the same behavior now. Currently `apply_in_background` do not share the same parameters as `apply` in R."", 'comment_created': datetime.datetime(2023, 7, 25, 0, 43, 21, tzinfo=datetime.timezone.utc), 'commenter': 'Sicheng-Pan', 'type': 'User'}, {'comment_id': 1272885843, 'comment_body': 'Maybe we should remove `collect_inbackgrounnd` to avoid confusion', 'comment_created': datetime.datetime(2023, 7, 25, 0, 48, 25, tzinfo=datetime.timezone.utc), 'commenter': 'Sicheng-Pan', 'type': 'User'}, {'comment_id': 1272890258, 'comment_body': 'Updated', 'comment_created': datetime.datetime(2023, 7, 25, 0, 58, 44, tzinfo=datetime.timezone.utc), 'commenter': 'Sicheng-Pan', 'type': 'User'}, {'comment_id': 1272890304, 'comment_body': 'Updated', 'comment_created': datetime.datetime(2023, 7, 25, 0, 58, 51, tzinfo=datetime.timezone.utc), 'commenter': 'Sicheng-Pan', 'type': 'User'}, {'comment_id': 1272890326, 'comment_body': 'Updated', 'comment_created': datetime.datetime(2023, 7, 25, 0, 58, 56, tzinfo=datetime.timezone.utc), 'commenter': 'Sicheng-Pan', 'type': 'User'}, {'comment_id': 1276912448, 'comment_body': ""I don't think this has been resolved. Using collect_in_background gives to me surprising behavior and not clear error messages (see above)"", 'comment_created': datetime.datetime(2023, 7, 27, 23, 8, 10, tzinfo=datetime.timezone.utc), 'commenter': 'sorhawell', 'type': 'User'}, {'comment_id': 1276914458, 'comment_body': '@Sicheng-Pan I have resolved this now, use of Rctx::handled().into() was problematic because Rctx is casted to dyn Error and then back to Rctx.plain().', 'comment_created': datetime.datetime(2023, 7, 27, 23, 10, 11, tzinfo=datetime.timezone.utc), 'commenter': 'sorhawell', 'type': 'User'}, {'comment_id': 1276916277, 'comment_body': ""wouldn't it be possible to just reconcile the args with a few lines ?"", 'comment_created': datetime.datetime(2023, 7, 27, 23, 12, 12, tzinfo=datetime.timezone.utc), 'commenter': 'sorhawell', 'type': 'User'}, {'comment_id': 1278609319, 'comment_body': 'The final statement is broken because you have wrong parenthesis. The `in_background` argument is not passed to `map`.', 'comment_created': datetime.datetime(2023, 7, 30, 19, 52, 24, tzinfo=datetime.timezone.utc), 'commenter': 'Sicheng-Pan', 'type': 'User'}, {'comment_id': 1278618803, 'comment_body': 'I\'ve improved the error handling in background:\r\n``` r\r\n> th <- pl$LazyFrame(mtcars)$select(pl$col(""mpg"")$map(\\(x) y, in_background = TRUE))$collect_in_background()\r\n> th$join()\r\nError: Execution halted with the following contexts\r\n   0: During function call [th$join()]\r\n   1: When trying to map a polars series with R function in the background R process\r\n   2: EvalError(lang!(function (x) y, ExternalPtr.set_class([""Series""]))\r\n```', 'comment_created': datetime.datetime(2023, 7, 30, 21, 6, 22, tzinfo=datetime.timezone.utc), 'commenter': 'Sicheng-Pan', 'type': 'User'}, {'comment_id': 1280726648, 'comment_body': '@Sicheng-Pan  new tentative lease method', 'comment_created': datetime.datetime(2023, 8, 1, 14, 24, 43, tzinfo=datetime.timezone.utc), 'commenter': 'sorhawell', 'type': 'User'}, {'comment_id': 1281125913, 'comment_body': 'Well if you insists on implementing a fixed-size container I would suggest using synchronization primitives like semaphores or conditional variables instead of the timer mechanism.', 'comment_created': datetime.datetime(2023, 8, 1, 20, 34, 21, tzinfo=datetime.timezone.utc), 'commenter': 'Sicheng-Pan', 'type': 'User'}, {'comment_id': 1281195312, 'comment_body': 'I have a smarter suggestion comming up :)', 'comment_created': datetime.datetime(2023, 8, 1, 21, 59, 25, tzinfo=datetime.timezone.utc), 'commenter': 'sorhawell', 'type': 'User'}, {'comment_id': 1281223184, 'comment_body': 'Also for the current implementation I suppose it should always create new process when the pool is empty, just like before?', 'comment_created': datetime.datetime(2023, 8, 1, 22, 51, 15, tzinfo=datetime.timezone.utc), 'commenter': 'Sicheng-Pan', 'type': 'User'}, {'comment_id': 1281224208, 'comment_body': 'Maybe the pool is guaranteed to be empty when line 296 is reached, as `pop_front` fails to get an element? ', 'comment_created': datetime.datetime(2023, 8, 1, 22, 53, 21, tzinfo=datetime.timezone.utc), 'commenter': 'Sicheng-Pan', 'type': 'User'}, {'comment_id': 1281938137, 'comment_body': 'you\'re right I needed some extra counting of processes or to spawn all process at once to be sure of the number. I have changed to a different  approach were the pool keeps a count of `""active""` proceses which are either in the pool or leased to a polars worker.\r\n\r\nA polars worker which is not allowed to spawn more processes will ad one-shoot-channel to a `queue` and sleep until some gives it process-handler.\r\nWhen a polars worker shelf\'s a process-handler it will either kill it, pass send it to first sleeping worker in queue or place it in the idle pool.\r\n\r\nI moved queue + pool + cap + active behind a single shared Mutex to avoid potential race conditions where to workers each got hold of a Mutex but cannot get the other.\r\n\r\nI have added a feature r_polars_debug_print to show the state of all workers and processes, pools and queue. All the printing does slow down IO bound benchmarks. The easiest way to activate rpolars_debug_print feature is probably to set it as default in Cargo.toml.', 'comment_created': datetime.datetime(2023, 8, 2, 13, 50, 45, tzinfo=datetime.timezone.utc), 'commenter': 'sorhawell', 'type': 'User'}, {'comment_id': 1287083980, 'comment_body': 'Why this change?', 'comment_created': datetime.datetime(2023, 8, 8, 12, 59, 40, tzinfo=datetime.timezone.utc), 'commenter': 'eitsupi', 'type': 'User'}, {'comment_id': 1287086148, 'comment_body': 'Is this file autoformatted?', 'comment_created': datetime.datetime(2023, 8, 8, 13, 1, 23, tzinfo=datetime.timezone.utc), 'commenter': 'eitsupi', 'type': 'User'}, {'comment_id': 1287160436, 'comment_body': 'To debug the new polars IPC handling, I needed threads do a lot of std.out printing. I revisiting the new pool handler it will become much easier to debug.  I have hidden the debug printing behind the feature rpolars_debug_print.\r\n\r\nI will try to make it prettier', 'comment_created': datetime.datetime(2023, 8, 8, 13, 53, 51, tzinfo=datetime.timezone.utc), 'commenter': 'sorhawell', 'type': 'User'}, {'comment_id': 1288338593, 'comment_body': 'adding fmt https://github.com/pola-rs/r-polars/pull/311/commits/46058dbdcf72de11894a9888f4a255dde216893e', 'comment_created': datetime.datetime(2023, 8, 9, 11, 25, 1, tzinfo=datetime.timezone.utc), 'commenter': 'sorhawell', 'type': 'User'}, {'comment_id': 1288344319, 'comment_body': '@eitsupi  in commit [8af927f](https://github.com/pola-rs/r-polars/pull/311/commits/8af927f3872c41ca553d6b059172e5b0027e74ce) \r\n\r\nI tried the following\r\n\r\n>  Compile environment flag RPOLARS_ALL_FEATURES changes name to RPOLARS_FULL_FEATURES. If \'true\'\r\n  will trigger something like `Cargo build --features ""full_features""` which is not exactly the same\r\n  as `Cargo build --all-features`. Some dev features are not included in ""full_features"" (#311).\r\n  \r\nThe change allows a bit more flexibility than --all-features. Which features ""full_features"" adopt is defined in the Cargo.toml\r\n\r\nDo you think this change is ok?', 'comment_created': datetime.datetime(2023, 8, 9, 11, 30, 48, tzinfo=datetime.timezone.utc), 'commenter': 'sorhawell', 'type': 'User'}, {'comment_id': 1288353160, 'comment_body': 'Ok, thank for the update.', 'comment_created': datetime.datetime(2023, 8, 9, 11, 39, 53, tzinfo=datetime.timezone.utc), 'commenter': 'eitsupi', 'type': 'User'}]","[{'commit_sha': 'd577bc45596e57db8ca72a3198042081c5a75629', 'committer_username': 'Sicheng-Pan', 'committer_name': 'Macronova', 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 20, 0, 24, 39, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9918a6491512b7f1b4002831e0056246074a422c', 'committer_username': 'Sicheng-Pan', 'committer_name': 'Macronova', 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 20, 0, 24, 39, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cb41db296971d2daa36f9aabaddf0cb8fd7e190e', 'committer_username': 'Sicheng-Pan', 'committer_name': 'Macronova', 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 20, 0, 24, 39, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'eae0ebc0f880c1c3af42999cbbf14962a54ba208', 'committer_username': 'Sicheng-Pan', 'committer_name': 'Macronova', 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 20, 0, 24, 39, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9b1ad25cdd8a7d35aca88c22ac0f223a023d9291', 'committer_username': 'Sicheng-Pan', 'committer_name': 'Macronova', 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 20, 0, 24, 39, tzinfo=datetime.timezone.utc)}, {'commit_sha': '18f98c13cb756e43e55188bfda4c94fa4936d475', 'committer_username': 'Sicheng-Pan', 'committer_name': 'Macronova', 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 20, 0, 24, 39, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f907a22734a0e67f0c16397eef06d080dc9c6a49', 'committer_username': 'Sicheng-Pan', 'committer_name': 'Macronova', 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 20, 0, 24, 39, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fdee6b562448eb7799d5641893e6d221d494e444', 'committer_username': 'Sicheng-Pan', 'committer_name': 'Macronova', 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 20, 0, 24, 39, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4f5886b86ab24def0fb231e41cfdc3d36d73e2b6', 'committer_username': 'Sicheng-Pan', 'committer_name': 'Macronova', 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 20, 0, 24, 39, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fd3a9fb96c20fe3ca37e9aa219bae4f67c03abf6', 'committer_username': 'Sicheng-Pan', 'committer_name': 'Macronova', 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 20, 0, 24, 39, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4c8e06ccee8e2f05dfba668dc4bd02d4287e827e', 'committer_username': 'Sicheng-Pan', 'committer_name': 'Macronova', 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 20, 0, 24, 39, tzinfo=datetime.timezone.utc)}, {'commit_sha': '41f180a863f84b93a6fb60b91127fd8fdd2b2f60', 'committer_username': 'Sicheng-Pan', 'committer_name': 'Macronova', 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 20, 0, 24, 39, tzinfo=datetime.timezone.utc)}, {'commit_sha': '020f9028d118b7a0505df475cb05ee178ab003b4', 'committer_username': 'Sicheng-Pan', 'committer_name': 'Macronova', 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 20, 0, 24, 39, tzinfo=datetime.timezone.utc)}, {'commit_sha': '513fee6c0882bd30936ecc01513e788d918adc0e', 'committer_username': 'Sicheng-Pan', 'committer_name': 'Macronova', 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 20, 0, 24, 39, tzinfo=datetime.timezone.utc)}, {'commit_sha': '717ecd79efadb432fa5e49b9f9a33ecab2b53861', 'committer_username': 'Sicheng-Pan', 'committer_name': 'Macronova', 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 20, 0, 24, 39, tzinfo=datetime.timezone.utc)}, {'commit_sha': '44799fc804007d9655decde1b5f7053babe73f7f', 'committer_username': 'Sicheng-Pan', 'committer_name': 'Macronova', 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 20, 0, 24, 39, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5b9ffed2f63aa5e5695d20dbcff5219d263bc63b', 'committer_username': 'Sicheng-Pan', 'committer_name': 'Macronova', 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 20, 0, 24, 39, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6452598cfa9a0cb77838d2f36b5d16ecded09e13', 'committer_username': 'sorhawell', 'committer_name': 'Søren Havelund Welling', 'committer_email': 'sorhawell@gmail.com', 'commit_date': datetime.datetime(2014, 6, 28, 21, 25, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c60e5964d35b7cf5ee1c245e59e7a300905b2d4f', 'committer_username': 'sorhawell', 'committer_name': 'Søren Havelund Welling', 'committer_email': 'sorhawell@gmail.com', 'commit_date': datetime.datetime(2014, 6, 28, 21, 25, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '49181f7de60dce4af71b52044733984084b76be7', 'committer_username': 'sorhawell', 'committer_name': 'Søren Havelund Welling', 'committer_email': 'sorhawell@gmail.com', 'commit_date': datetime.datetime(2014, 6, 28, 21, 25, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ecd7199201b7dc126aa6dadb7fc35eb70116b404', 'committer_username': 'sorhawell', 'committer_name': 'Søren Havelund Welling', 'committer_email': 'sorhawell@gmail.com', 'commit_date': datetime.datetime(2014, 6, 28, 21, 25, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '01004415772f55dd5e6d80e07fc40d468397d532', 'committer_username': 'sorhawell', 'committer_name': 'Søren Havelund Welling', 'committer_email': 'sorhawell@gmail.com', 'commit_date': datetime.datetime(2014, 6, 28, 21, 25, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c68a443aeaf3f369e16b76170649aaa5aa33ca01', 'committer_username': 'Sicheng-Pan', 'committer_name': 'Macronova', 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 20, 0, 24, 39, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3c1e045fe67be4e9ce73cecf42e69ed3c6bd1d25', 'committer_username': 'Sicheng-Pan', 'committer_name': 'Macronova', 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 20, 0, 24, 39, tzinfo=datetime.timezone.utc)}, {'commit_sha': '07d150dc13540a68633912a3a7e958ff8ef21ec4', 'committer_username': 'sorhawell', 'committer_name': 'Søren Havelund Welling', 'committer_email': 'sorhawell@gmail.com', 'commit_date': datetime.datetime(2014, 6, 28, 21, 25, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '397c4dd383aabf9cb5dc02d6b7afb20b5ca98938', 'committer_username': 'sorhawell', 'committer_name': 'Søren Havelund Welling', 'committer_email': 'sorhawell@gmail.com', 'commit_date': datetime.datetime(2014, 6, 28, 21, 25, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '196e548e3ca67af0280981887090f0140bbd31d4', 'committer_username': 'Sicheng-Pan', 'committer_name': 'Macronova', 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 20, 0, 24, 39, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4557b1b228a70e9b1cc368ac8df17c61d5bafb52', 'committer_username': 'Sicheng-Pan', 'committer_name': 'Macronova', 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 20, 0, 24, 39, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'daa90c83f20bdaf804e1cebe4975eb170c5ee61b', 'committer_username': 'Sicheng-Pan', 'committer_name': 'Macronova', 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 20, 0, 24, 39, tzinfo=datetime.timezone.utc)}, {'commit_sha': '78a03c802177bc8923e869a6b01733f84c11b209', 'committer_username': 'Sicheng-Pan', 'committer_name': 'Macronova', 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 20, 0, 24, 39, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd99082276bef27995273e00ca044ef90ad9da308', 'committer_username': 'sorhawell', 'committer_name': 'Søren Havelund Welling', 'committer_email': 'sorhawell@gmail.com', 'commit_date': datetime.datetime(2014, 6, 28, 21, 25, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7a02517c90858a954ac341aefea1cd35cad46add', 'committer_username': 'sorhawell', 'committer_name': 'Søren Havelund Welling', 'committer_email': 'sorhawell@gmail.com', 'commit_date': datetime.datetime(2014, 6, 28, 21, 25, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f4b1f0f8fe35e77f00cae04819e5aa50ec1d20dc', 'committer_username': 'Sicheng-Pan', 'committer_name': 'Macronova', 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 20, 0, 24, 39, tzinfo=datetime.timezone.utc)}, {'commit_sha': '57def1fc435cc9d2b2f7389f28b0715eedbecbaf', 'committer_username': 'sorhawell', 'committer_name': 'Søren Havelund Welling', 'committer_email': 'sorhawell@gmail.com', 'commit_date': datetime.datetime(2014, 6, 28, 21, 25, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3fee2c5df28515335ad1d442214fe4e98257b6c7', 'committer_username': 'sorhawell', 'committer_name': 'Søren Havelund Welling', 'committer_email': 'sorhawell@gmail.com', 'commit_date': datetime.datetime(2014, 6, 28, 21, 25, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd0758f0c944752aade8ef9e5f90ae4413b870ebf', 'committer_username': 'sorhawell', 'committer_name': 'Søren Havelund Welling', 'committer_email': 'sorhawell@gmail.com', 'commit_date': datetime.datetime(2014, 6, 28, 21, 25, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3cbaceb8e8d3ed8c7ab97cddec95bab4c522d883', 'committer_username': 'sorhawell', 'committer_name': 'Søren Havelund Welling', 'committer_email': 'sorhawell@gmail.com', 'commit_date': datetime.datetime(2014, 6, 28, 21, 25, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5f05fcee793755c7daafc62349de95e598a942ca', 'committer_username': 'sorhawell', 'committer_name': 'Søren Havelund Welling', 'committer_email': 'sorhawell@gmail.com', 'commit_date': datetime.datetime(2014, 6, 28, 21, 25, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0694664ae6028c69760edefafea0aa92d64ab0f5', 'committer_username': 'sorhawell', 'committer_name': 'Søren Havelund Welling', 'committer_email': 'sorhawell@gmail.com', 'commit_date': datetime.datetime(2014, 6, 28, 21, 25, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4ef435ea76433a6205f574eac9e13264ba3daeab', 'committer_username': 'sorhawell', 'committer_name': 'Søren Havelund Welling', 'committer_email': 'sorhawell@gmail.com', 'commit_date': datetime.datetime(2014, 6, 28, 21, 25, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c7653c281f1fb0f6c09644e97246cb2f8b132636', 'committer_username': 'sorhawell', 'committer_name': 'Søren Havelund Welling', 'committer_email': 'sorhawell@gmail.com', 'commit_date': datetime.datetime(2014, 6, 28, 21, 25, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '88d8b5266f61048d73c70c7de17bbd0df9dd3f5d', 'committer_username': 'sorhawell', 'committer_name': 'Søren Havelund Welling', 'committer_email': 'sorhawell@gmail.com', 'commit_date': datetime.datetime(2014, 6, 28, 21, 25, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '88048f1afd029c3c2921f2d085fdefcc4f8a42c9', 'committer_username': 'sorhawell', 'committer_name': 'Søren Havelund Welling', 'committer_email': 'sorhawell@gmail.com', 'commit_date': datetime.datetime(2014, 6, 28, 21, 25, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3d81fcfa08f4612cf674779a0138ab4c271a07b6', 'committer_username': 'sorhawell', 'committer_name': 'Søren Havelund Welling', 'committer_email': 'sorhawell@gmail.com', 'commit_date': datetime.datetime(2014, 6, 28, 21, 25, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '07812420f45f468283d1cc9921a74a5d96a49872', 'committer_username': 'sorhawell', 'committer_name': 'Søren Havelund Welling', 'committer_email': 'sorhawell@gmail.com', 'commit_date': datetime.datetime(2014, 6, 28, 21, 25, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '65bb48f9ccc78aa53b1475f757914fb9056023d1', 'committer_username': 'Sicheng-Pan', 'committer_name': 'Macronova', 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 20, 0, 24, 39, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ca17fa3e6085dbdd722c6e88cfe0d9cd6e078f4f', 'committer_username': 'Sicheng-Pan', 'committer_name': 'Macronova', 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 20, 0, 24, 39, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b03de398a763f678dfa48ea504e9daeb734751f8', 'committer_username': 'Sicheng-Pan', 'committer_name': 'Macronova', 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 20, 0, 24, 39, tzinfo=datetime.timezone.utc)}, {'commit_sha': '00c2b4d3f3b38c2f18d7212ea5689007ea2e62af', 'committer_username': 'Sicheng-Pan', 'committer_name': 'Macronova', 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 20, 0, 24, 39, tzinfo=datetime.timezone.utc)}, {'commit_sha': '97b2fb958502b94e2b215dda183ad2d6c3a230e6', 'committer_username': 'sorhawell', 'committer_name': 'Søren Havelund Welling', 'committer_email': 'sorhawell@gmail.com', 'commit_date': datetime.datetime(2014, 6, 28, 21, 25, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '980abe858ca6b81a52ad42e17719c4426cd5693c', 'committer_username': 'sorhawell', 'committer_name': 'Søren Havelund Welling', 'committer_email': 'sorhawell@gmail.com', 'commit_date': datetime.datetime(2014, 6, 28, 21, 25, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bd15917e4d60fabb15250278eafcd6e7a9ad22da', 'committer_username': 'sorhawell', 'committer_name': 'Søren Havelund Welling', 'committer_email': 'sorhawell@gmail.com', 'commit_date': datetime.datetime(2014, 6, 28, 21, 25, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd21a881088c1ce98bef9fede6647fcf44a112337', 'committer_username': 'sorhawell', 'committer_name': 'Søren Havelund Welling', 'committer_email': 'sorhawell@gmail.com', 'commit_date': datetime.datetime(2014, 6, 28, 21, 25, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '75d02529edd63a9cb60fe4f021f7701676659561', 'committer_username': 'sorhawell', 'committer_name': 'Søren Havelund Welling', 'committer_email': 'sorhawell@gmail.com', 'commit_date': datetime.datetime(2014, 6, 28, 21, 25, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c2b623755577c4d69a07137456c6c034fc861535', 'committer_username': 'sorhawell', 'committer_name': 'Søren Havelund Welling', 'committer_email': 'sorhawell@gmail.com', 'commit_date': datetime.datetime(2014, 6, 28, 21, 25, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0dee41ac82edc357cb9841ff028864928a1bd544', 'committer_username': 'Sicheng-Pan', 'committer_name': 'Macronova', 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 20, 0, 24, 39, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd4dbb5f3734246d77339373b507378afbf70b3fb', 'committer_username': 'Sicheng-Pan', 'committer_name': 'Macronova', 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 20, 0, 24, 39, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd9e2dab7213a53056fd85b550e6e2df067af8072', 'committer_username': 'sorhawell', 'committer_name': 'Søren Havelund Welling', 'committer_email': 'sorhawell@gmail.com', 'commit_date': datetime.datetime(2014, 6, 28, 21, 25, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '388297a8afe17a2f25f5a665d076a459b2efac2b', 'committer_username': 'sorhawell', 'committer_name': 'Søren Havelund Welling', 'committer_email': 'sorhawell@gmail.com', 'commit_date': datetime.datetime(2014, 6, 28, 21, 25, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '87adf0d07de52ef17415a33eb424efc2eb8c0237', 'committer_username': 'Sicheng-Pan', 'committer_name': 'Macronova', 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 20, 0, 24, 39, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a2c30ae591cc81cee7cc59c556868f7cce40c5b9', 'committer_username': 'Sicheng-Pan', 'committer_name': 'Macronova', 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 20, 0, 24, 39, tzinfo=datetime.timezone.utc)}, {'commit_sha': '13bd3c733a0c27985d7f50f9db5bef61ce66aa0e', 'committer_username': 'sorhawell', 'committer_name': 'Søren Havelund Welling', 'committer_email': 'sorhawell@gmail.com', 'commit_date': datetime.datetime(2014, 6, 28, 21, 25, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd0f17655f16df53bec8ba977c713ef31f12caaf5', 'committer_username': 'sorhawell', 'committer_name': 'Søren Havelund Welling', 'committer_email': 'sorhawell@gmail.com', 'commit_date': datetime.datetime(2014, 6, 28, 21, 25, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ecd6a7cdedc3f09f28b98716eb3a31abe4acc7a0', 'committer_username': 'sorhawell', 'committer_name': 'Søren Havelund Welling', 'committer_email': 'sorhawell@gmail.com', 'commit_date': datetime.datetime(2014, 6, 28, 21, 25, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bc4bb4c90ab887a1535d2092849539eec19f8e84', 'committer_username': 'sorhawell', 'committer_name': 'Søren Havelund Welling', 'committer_email': 'sorhawell@gmail.com', 'commit_date': datetime.datetime(2014, 6, 28, 21, 25, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '08d8eab3a03f7a888182005c97576d9fd31a31ba', 'committer_username': 'sorhawell', 'committer_name': 'Søren Havelund Welling', 'committer_email': 'sorhawell@gmail.com', 'commit_date': datetime.datetime(2014, 6, 28, 21, 25, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4fea62d4c2e1329b2b1403a28297619c05cedafc', 'committer_username': 'sorhawell', 'committer_name': 'Søren Havelund Welling', 'committer_email': 'sorhawell@gmail.com', 'commit_date': datetime.datetime(2014, 6, 28, 21, 25, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2777c9495faadbcddc29d903a8ba5dbbff50bb02', 'committer_username': 'sorhawell', 'committer_name': 'Søren Havelund Welling', 'committer_email': 'sorhawell@gmail.com', 'commit_date': datetime.datetime(2014, 6, 28, 21, 25, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '95122a500c6f96eaeeba544b1fe09220acf7db49', 'committer_username': 'sorhawell', 'committer_name': 'Søren Havelund Welling', 'committer_email': 'sorhawell@gmail.com', 'commit_date': datetime.datetime(2014, 6, 28, 21, 25, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bc12766355ce0aa8d5c2003299be619cd0bc7408', 'committer_username': 'sorhawell', 'committer_name': 'Søren Havelund Welling', 'committer_email': 'sorhawell@gmail.com', 'commit_date': datetime.datetime(2014, 6, 28, 21, 25, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1cdefe4e08a5403a2534f396d741f06edb4a1edd', 'committer_username': 'sorhawell', 'committer_name': 'Søren Havelund Welling', 'committer_email': 'sorhawell@gmail.com', 'commit_date': datetime.datetime(2014, 6, 28, 21, 25, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1616095b807812a69f0bb42d1ab7faff26551041', 'committer_username': 'sorhawell', 'committer_name': 'Søren Havelund Welling', 'committer_email': 'sorhawell@gmail.com', 'commit_date': datetime.datetime(2014, 6, 28, 21, 25, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '90d8be74661e086f51b74d373fe2ae67c717239b', 'committer_username': 'sorhawell', 'committer_name': 'Søren Havelund Welling', 'committer_email': 'sorhawell@gmail.com', 'commit_date': datetime.datetime(2014, 6, 28, 21, 25, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'afee8a9af133e6f29b5b930791b63c6ade8e89f5', 'committer_username': 'sorhawell', 'committer_name': 'Søren Havelund Welling', 'committer_email': 'sorhawell@gmail.com', 'commit_date': datetime.datetime(2014, 6, 28, 21, 25, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '61cc469590a51c67701ffe8be91726ce7beb4fc5', 'committer_username': 'sorhawell', 'committer_name': 'Søren Havelund Welling', 'committer_email': 'sorhawell@gmail.com', 'commit_date': datetime.datetime(2014, 6, 28, 21, 25, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8af927f3872c41ca553d6b059172e5b0027e74ce', 'committer_username': 'sorhawell', 'committer_name': 'Søren Havelund Welling', 'committer_email': 'sorhawell@gmail.com', 'commit_date': datetime.datetime(2014, 6, 28, 21, 25, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '46058dbdcf72de11894a9888f4a255dde216893e', 'committer_username': 'sorhawell', 'committer_name': 'Søren Havelund Welling', 'committer_email': 'sorhawell@gmail.com', 'commit_date': datetime.datetime(2014, 6, 28, 21, 25, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f352e0b848097234a627907ffd04395beb1bd8f2', 'committer_username': 'sorhawell', 'committer_name': 'Søren Havelund Welling', 'committer_email': 'sorhawell@gmail.com', 'commit_date': datetime.datetime(2014, 6, 28, 21, 25, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b6916e4c9f7d22e869e8551f47287a3924b95b22', 'committer_username': 'sorhawell', 'committer_name': 'Søren Havelund Welling', 'committer_email': 'sorhawell@gmail.com', 'commit_date': datetime.datetime(2014, 6, 28, 21, 25, 58, tzinfo=datetime.timezone.utc)}]",Macronova,60079945,,User,,5,,1,3
1403028563,Implement LazyFrame$schema,"This PR aims to implement `schema`, `columns`, and `dtypes` for `LazyFrame`, as requested by #243",True,250,https://api.github.com/repos/pola-rs/r-polars/pulls/250,https://github.com/pola-rs/r-polars/pull/250,closed,775,676,15,10,6,0,0,0,[],2023-06-22 07:41:57+00:00,2023-06-24 21:54:03+00:00,223926.0,"2 days, 14:12:06",[],"[{'commit_sha': 'e26f25bd69d2982088b717333e45ccb305390c10', 'committer_username': 'Sicheng-Pan', 'committer_name': 'Macronova', 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 20, 0, 24, 39, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b8b5b54d773091cd9dd23d497c385acff23819e3', 'committer_username': 'sorhawell', 'committer_name': 'Søren Havelund Welling', 'committer_email': 'sorhawell@gmail.com', 'commit_date': datetime.datetime(2014, 6, 28, 21, 25, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8fc220505969976841bb8d5fd32605352b047d1c', 'committer_username': 'sorhawell', 'committer_name': 'Søren Havelund Welling', 'committer_email': 'sorhawell@gmail.com', 'commit_date': datetime.datetime(2014, 6, 28, 21, 25, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3a8d3e47f18f3f33e9a36a5925a02c5b13f896dc', 'committer_username': 'Sicheng-Pan', 'committer_name': 'Macronova', 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 20, 0, 24, 39, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0e622fb750c53f5a87879b7b12bcf6eed8b87cdb', 'committer_username': 'sorhawell', 'committer_name': 'Søren Havelund Welling', 'committer_email': 'sorhawell@gmail.com', 'commit_date': datetime.datetime(2014, 6, 28, 21, 25, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd125bef27c66f0876c05bd35ae5ea60f088dc223', 'committer_username': 'sorhawell', 'committer_name': 'Søren Havelund Welling', 'committer_email': 'sorhawell@gmail.com', 'commit_date': datetime.datetime(2014, 6, 28, 21, 25, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '17649030f6de5803fbb249e3fa3cc6f694f23ae1', 'committer_username': 'sorhawell', 'committer_name': 'Søren Havelund Welling', 'committer_email': 'sorhawell@gmail.com', 'commit_date': datetime.datetime(2014, 6, 28, 21, 25, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '510bb6f3dc9dabe66ba994be26e58961731a142e', 'committer_username': 'sorhawell', 'committer_name': 'Søren Havelund Welling', 'committer_email': 'sorhawell@gmail.com', 'commit_date': datetime.datetime(2014, 6, 28, 21, 25, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd83f30e2c10c6f30978b8c716f3e759997750d35', 'committer_username': 'sorhawell', 'committer_name': 'Søren Havelund Welling', 'committer_email': 'sorhawell@gmail.com', 'commit_date': datetime.datetime(2014, 6, 28, 21, 25, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9fc970078c7ef504e21731d47785300873653834', 'committer_username': 'sorhawell', 'committer_name': 'Søren Havelund Welling', 'committer_email': 'sorhawell@gmail.com', 'commit_date': datetime.datetime(2014, 6, 28, 21, 25, 58, tzinfo=datetime.timezone.utc)}]",Macronova,60079945,,User,,5,,1,3
1432031575,Implement lazyframe profiling and optimization toggles,#261,True,323,https://api.github.com/repos/pola-rs/r-polars/pulls/323,https://github.com/pola-rs/r-polars/pull/323,closed,520,129,16,24,4,27,0,0,[],2023-07-12 21:48:00+00:00,2023-08-08 17:15:28+00:00,2316448.0,"26 days, 19:27:28","[{'comment_id': 1284268155, 'comment_body': ""Shouldn't you put `type_coercion = FALSE` and `simplify_expression = FALSE` as well?"", 'comment_created': datetime.datetime(2023, 8, 4, 10, 41, 51, tzinfo=datetime.timezone.utc), 'commenter': 'etiennebacher', 'type': 'User'}, {'comment_id': 1284268418, 'comment_body': '```suggestion\r\n  collect_f = if(isTRUE(collect_in_background)) {\r\n```', 'comment_created': datetime.datetime(2023, 8, 4, 10, 42, 12, tzinfo=datetime.timezone.utc), 'commenter': 'etiennebacher', 'type': 'User'}, {'comment_id': 1284270816, 'comment_body': ""I don't understand this doc, how is this different from `$collect()`? I know it gets deprecated but until it's removed it will appear in the docs so it might be good to clarify. Also the example uses `collect()` instead of `collect_in_background()`"", 'comment_created': datetime.datetime(2023, 8, 4, 10, 45, 9, tzinfo=datetime.timezone.utc), 'commenter': 'etiennebacher', 'type': 'User'}, {'comment_id': 1284272270, 'comment_body': 'Can you improve the description of the parameters? For example, change ""Do type coercion optimization."" to ""Coerce types such that operations succeed and run on minimal required memory.""\r\n\r\nThere are good descriptions of each param here: https://pola-rs.github.io/polars-book/user-guide/lazy/optimizations/', 'comment_created': datetime.datetime(2023, 8, 4, 10, 46, 49, tzinfo=datetime.timezone.utc), 'commenter': 'etiennebacher', 'type': 'User'}, {'comment_id': 1284272663, 'comment_body': ""```suggestion\r\n#' Note: use `$fetch(n)` if you want to run your query on the first `n` rows only.\r\n```"", 'comment_created': datetime.datetime(2023, 8, 4, 10, 47, 15, tzinfo=datetime.timezone.utc), 'commenter': 'etiennebacher', 'type': 'User'}, {'comment_id': 1284273705, 'comment_body': '```suggestion\r\n#\' @return A `DataFrame`\r\n```\r\n(no idea what you meant after the ""or"")', 'comment_created': datetime.datetime(2023, 8, 4, 10, 48, 12, tzinfo=datetime.timezone.utc), 'commenter': 'etiennebacher', 'type': 'User'}, {'comment_id': 1284274001, 'comment_body': '```suggestion\r\n#\' @examples pl$LazyFrame(iris)$filter(pl$col(""Species"") == ""setosa"")$collect()\r\n```', 'comment_created': datetime.datetime(2023, 8, 4, 10, 48, 35, tzinfo=datetime.timezone.utc), 'commenter': 'etiennebacher', 'type': 'User'}, {'comment_id': 1284274779, 'comment_body': ""```suggestion\r\n#' @description This will run the query and return a list containing the materialized DataFrame and\r\n```\r\nI guess an R list is the equivalent of Python tuple?"", 'comment_created': datetime.datetime(2023, 8, 4, 10, 49, 34, tzinfo=datetime.timezone.utc), 'commenter': 'etiennebacher', 'type': 'User'}, {'comment_id': 1284275502, 'comment_body': ""```suggestion\r\n#' @return List of two `DataFrame`s: one with the collected result, the other with the timings of each step.\r\n```"", 'comment_created': datetime.datetime(2023, 8, 4, 10, 50, 25, tzinfo=datetime.timezone.utc), 'commenter': 'etiennebacher', 'type': 'User'}, {'comment_id': 1284276684, 'comment_body': ""```suggestion\r\n#' # Use $profile() to compare two queries\r\n```"", 'comment_created': datetime.datetime(2023, 8, 4, 10, 51, 55, tzinfo=datetime.timezone.utc), 'commenter': 'etiennebacher', 'type': 'User'}, {'comment_id': 1284277169, 'comment_body': ""example hard to grasp, isn't there a most simple / realistic example?"", 'comment_created': datetime.datetime(2023, 8, 4, 10, 52, 31, tzinfo=datetime.timezone.utc), 'commenter': 'etiennebacher', 'type': 'User'}, {'comment_id': 1284277419, 'comment_body': ""```suggestion\r\n#' # map each Species-group of each numeric column with an R function, takes ~7000us (slow!)\r\n```"", 'comment_created': datetime.datetime(2023, 8, 4, 10, 52, 50, tzinfo=datetime.timezone.utc), 'commenter': 'etiennebacher', 'type': 'User'}, {'comment_id': 1284277769, 'comment_body': '```suggestion\r\n#\'   sort(""Sepal.Length"")$  \r\n```', 'comment_created': datetime.datetime(2023, 8, 4, 10, 53, 6, tzinfo=datetime.timezone.utc), 'commenter': 'etiennebacher', 'type': 'User'}, {'comment_id': 1284278270, 'comment_body': ""```suggestion\r\n#' # map each Species-group with native polars, takes ~120us only\r\n```"", 'comment_created': datetime.datetime(2023, 8, 4, 10, 53, 29, tzinfo=datetime.timezone.utc), 'commenter': 'etiennebacher', 'type': 'User'}, {'comment_id': 1284279415, 'comment_body': '```suggestion\r\n  # TODO: some way to check if .pr$LazyFrame$optimization_toggle works\r\n```', 'comment_created': datetime.datetime(2023, 8, 4, 10, 54, 27, tzinfo=datetime.timezone.utc), 'commenter': 'etiennebacher', 'type': 'User'}, {'comment_id': 1284891144, 'comment_body': '[I just match py-polars definition of no_optimization](https://github.com/pola-rs/polars/blob/d9ff23c5316ad489de9e4411c5e3dc275a214e71/py-polars/polars/lazyframe/frame.py#L1580)\r\n\r\nwith rust-polars 0.31.0  a few more option will be added', 'comment_created': datetime.datetime(2023, 8, 4, 22, 41, 26, tzinfo=datetime.timezone.utc), 'commenter': 'sorhawell', 'type': 'User'}, {'comment_id': 1284898728, 'comment_body': '`.to_string()` could be omitted since `Into<String>` is implemented for `&str`.', 'comment_created': datetime.datetime(2023, 8, 4, 23, 2, 43, tzinfo=datetime.timezone.utc), 'commenter': 'Sicheng-Pan', 'type': 'User'}, {'comment_id': 1284898741, 'comment_body': 'This documentation and behavior will be updated alot in #311. I suggest to just leave it as is here.', 'comment_created': datetime.datetime(2023, 8, 4, 23, 2, 45, tzinfo=datetime.timezone.utc), 'commenter': 'sorhawell', 'type': 'User'}, {'comment_id': 1284899540, 'comment_body': 'Maybe consider about reusing `robj_to_i64` with additional bound checks?', 'comment_created': datetime.datetime(2023, 8, 4, 23, 5, 35, tzinfo=datetime.timezone.utc), 'commenter': 'Sicheng-Pan', 'type': 'User'}, {'comment_id': 1284902726, 'comment_body': 'Maybe something like `Ok(i32::try_from(robj_to_i64(robj)?)?)`', 'comment_created': datetime.datetime(2023, 8, 4, 23, 16, 39, tzinfo=datetime.timezone.utc), 'commenter': 'Sicheng-Pan', 'type': 'User'}, {'comment_id': 1284902947, 'comment_body': 'adding example `pl$LazyFrame()$select(pl$lit(2) + 2)$profile()`. Ordering other examples by complexity.', 'comment_created': datetime.datetime(2023, 8, 4, 23, 17, 39, tzinfo=datetime.timezone.utc), 'commenter': 'sorhawell', 'type': 'User'}, {'comment_id': 1284903193, 'comment_body': 'add in other commit', 'comment_created': datetime.datetime(2023, 8, 4, 23, 18, 29, tzinfo=datetime.timezone.utc), 'commenter': 'sorhawell', 'type': 'User'}, {'comment_id': 1284903717, 'comment_body': 'will be possible from rust-polars 0.31.0', 'comment_created': datetime.datetime(2023, 8, 4, 23, 20, 30, tzinfo=datetime.timezone.utc), 'commenter': 'sorhawell', 'type': 'User'}, {'comment_id': 1284905712, 'comment_body': 'that is certainly also an option and I did so for usize. Errors can look weird though for the user if the error is about i64 but the function needed an i32. I tried to boil the conversion so it would not be to lengthy to do for each type, at least for the regulars f64, i64 i32.', 'comment_created': datetime.datetime(2023, 8, 4, 23, 25, 36, tzinfo=datetime.timezone.utc), 'commenter': 'sorhawell', 'type': 'User'}, {'comment_id': 1284909371, 'comment_body': 'done', 'comment_created': datetime.datetime(2023, 8, 4, 23, 30, 41, tzinfo=datetime.timezone.utc), 'commenter': 'sorhawell', 'type': 'User'}, {'comment_id': 1284910335, 'comment_body': 'Actually there are multiple occurrences of `.to_string()` that you may want to remove', 'comment_created': datetime.datetime(2023, 8, 4, 23, 33, 21, tzinfo=datetime.timezone.utc), 'commenter': 'Sicheng-Pan', 'type': 'User'}, {'comment_id': 1284910477, 'comment_body': 'I must admit though, I do think I have gotten myself into to many rabbit holes lately and not progressed enough. Sry bout that :)', 'comment_created': datetime.datetime(2023, 8, 4, 23, 33, 58, tzinfo=datetime.timezone.utc), 'commenter': 'sorhawell', 'type': 'User'}]","[{'commit_sha': '2c9aac8852d5e1444e839fa96f858c718ecdd82a', 'committer_username': 'Sicheng-Pan', 'committer_name': 'Macronova', 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 20, 0, 24, 39, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ec74abbfcf48c1e8f7ba350915f4f2f2007c34bf', 'committer_username': 'Sicheng-Pan', 'committer_name': 'Macronova', 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 20, 0, 24, 39, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8d4ab37de71e291fc2b43c2aaed9ccd9a5d3cc44', 'committer_username': 'Sicheng-Pan', 'committer_name': 'Macronova', 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 20, 0, 24, 39, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f9d2826cf736c61949ef561422e8b6171b0e1423', 'committer_username': 'sorhawell', 'committer_name': 'Søren Havelund Welling', 'committer_email': 'sorhawell@gmail.com', 'commit_date': datetime.datetime(2014, 6, 28, 21, 25, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2ef049cdf2e7d54dbe80ecffab982d77bfec364e', 'committer_username': 'etiennebacher', 'committer_name': 'Etienne Bacher', 'committer_email': None, 'commit_date': datetime.datetime(2019, 6, 25, 20, 3, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b64fd8d4b834c93059c3ff2895ded69c07ef2fd4', 'committer_username': 'sorhawell', 'committer_name': 'Søren Havelund Welling', 'committer_email': 'sorhawell@gmail.com', 'commit_date': datetime.datetime(2014, 6, 28, 21, 25, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ec01a7ed3523e4b6b9589151dd7e5039b262a07a', 'committer_username': 'sorhawell', 'committer_name': 'Søren Havelund Welling', 'committer_email': 'sorhawell@gmail.com', 'commit_date': datetime.datetime(2014, 6, 28, 21, 25, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '17d15a5ec82a5877e15986e697dd6db1cfbd7be7', 'committer_username': 'sorhawell', 'committer_name': 'Søren Havelund Welling', 'committer_email': 'sorhawell@gmail.com', 'commit_date': datetime.datetime(2014, 6, 28, 21, 25, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd09740a9af3bcdf5759a0b3051e1b85857f93673', 'committer_username': 'sorhawell', 'committer_name': 'Søren Havelund Welling', 'committer_email': 'sorhawell@gmail.com', 'commit_date': datetime.datetime(2014, 6, 28, 21, 25, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3ada33f642297958f8effef872e10344333ba95b', 'committer_username': 'sorhawell', 'committer_name': 'Søren Havelund Welling', 'committer_email': 'sorhawell@gmail.com', 'commit_date': datetime.datetime(2014, 6, 28, 21, 25, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cb914ba44ca7d84c39259d9cc6bba940858b3690', 'committer_username': 'sorhawell', 'committer_name': 'Søren Havelund Welling', 'committer_email': 'sorhawell@gmail.com', 'commit_date': datetime.datetime(2014, 6, 28, 21, 25, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ccdafbaa40901b28f3d08536bce2b42131b6b951', 'committer_username': 'sorhawell', 'committer_name': 'Søren Havelund Welling', 'committer_email': 'sorhawell@gmail.com', 'commit_date': datetime.datetime(2014, 6, 28, 21, 25, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c66702c49f038e5d7b1e8bb348e3d92d63c63211', 'committer_username': 'sorhawell', 'committer_name': 'Søren Havelund Welling', 'committer_email': 'sorhawell@gmail.com', 'commit_date': datetime.datetime(2014, 6, 28, 21, 25, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0115b96f2f905f03d441b2ad96a2530b2c74b287', 'committer_username': 'sorhawell', 'committer_name': 'Søren Havelund Welling', 'committer_email': 'sorhawell@gmail.com', 'commit_date': datetime.datetime(2014, 6, 28, 21, 25, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ca80fe57dbb2d584e847960dc3c74d46f793fe88', 'committer_username': 'sorhawell', 'committer_name': 'Søren Havelund Welling', 'committer_email': 'sorhawell@gmail.com', 'commit_date': datetime.datetime(2014, 6, 28, 21, 25, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cff0b73347de6ae713051e0c6175fd7c2bb7e2ca', 'committer_username': 'sorhawell', 'committer_name': 'Søren Havelund Welling', 'committer_email': 'sorhawell@gmail.com', 'commit_date': datetime.datetime(2014, 6, 28, 21, 25, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '92d6be6fa015ca2c403449525b5ec4903a4bf284', 'committer_username': 'sorhawell', 'committer_name': 'Søren Havelund Welling', 'committer_email': 'sorhawell@gmail.com', 'commit_date': datetime.datetime(2014, 6, 28, 21, 25, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '018e04da5ed34783dd639b38839adb942119e7a6', 'committer_username': 'etiennebacher', 'committer_name': 'Etienne Bacher', 'committer_email': None, 'commit_date': datetime.datetime(2019, 6, 25, 20, 3, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': '11b77764153c731b3907078bc6de59210345a5d5', 'committer_username': 'sorhawell', 'committer_name': 'Søren Havelund Welling', 'committer_email': 'sorhawell@gmail.com', 'commit_date': datetime.datetime(2014, 6, 28, 21, 25, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0d0d0d4e8c4e59e81b8c2bfb475bf5192150cbd9', 'committer_username': 'sorhawell', 'committer_name': 'Søren Havelund Welling', 'committer_email': 'sorhawell@gmail.com', 'commit_date': datetime.datetime(2014, 6, 28, 21, 25, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '78b777c1decf54246e68ca391ae2aa998ec1ec47', 'committer_username': 'sorhawell', 'committer_name': 'Søren Havelund Welling', 'committer_email': 'sorhawell@gmail.com', 'commit_date': datetime.datetime(2014, 6, 28, 21, 25, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '131daee90e3afecad95396cf4b6234419eb61100', 'committer_username': 'sorhawell', 'committer_name': 'Søren Havelund Welling', 'committer_email': 'sorhawell@gmail.com', 'commit_date': datetime.datetime(2014, 6, 28, 21, 25, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9ee93b6b410e0c0533b3a5d00f657f82b12b8512', 'committer_username': 'etiennebacher', 'committer_name': 'Etienne Bacher', 'committer_email': None, 'commit_date': datetime.datetime(2019, 6, 25, 20, 3, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': '267c1a30bbd3faab62806908106aba4ca545ad46', 'committer_username': 'etiennebacher', 'committer_name': 'Etienne Bacher', 'committer_email': None, 'commit_date': datetime.datetime(2019, 6, 25, 20, 3, 15, tzinfo=datetime.timezone.utc)}]",Macronova,60079945,,User,,5,,1,3
1445124421,Implement `with_row_count` for `DataFrame` and `LazyFrame`,#236 ,True,329,https://api.github.com/repos/pola-rs/r-polars/pulls/329,https://github.com/pola-rs/r-polars/pull/329,closed,103,11,10,2,1,3,0,0,[],2023-07-22 01:03:45+00:00,2023-07-22 07:25:08+00:00,22883.0,6:21:23,"[{'comment_id': 1271264955, 'comment_body': 'Please use the latest rextendr', 'comment_created': datetime.datetime(2023, 7, 22, 7, 57, 12, tzinfo=datetime.timezone.utc), 'commenter': 'eitsupi', 'type': 'User'}, {'comment_id': 1271383978, 'comment_body': 'I tried `rextendr-0.3.1`, but this comments seems to show up as well. Do you mean the latest commit of `rextendr`?', 'comment_created': datetime.datetime(2023, 7, 23, 5, 28, 40, tzinfo=datetime.timezone.utc), 'commenter': 'Sicheng-Pan', 'type': 'User'}, {'comment_id': 1271406029, 'comment_body': 'The addition of this comment is intentional (rextendr >= 0.3.0); see extendr/rextendr#214.', 'comment_created': datetime.datetime(2023, 7, 23, 8, 32, 20, tzinfo=datetime.timezone.utc), 'commenter': 'eitsupi', 'type': 'User'}]","[{'commit_sha': '559d08b3248532db1c359e782164863b52d1b3c4', 'committer_username': 'Sicheng-Pan', 'committer_name': 'Macronova', 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 20, 0, 24, 39, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ae7d7872f2079c6d949309230e3348cb42af13ba', 'committer_username': 'Sicheng-Pan', 'committer_name': 'Macronova', 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 20, 0, 24, 39, tzinfo=datetime.timezone.utc)}]",Macronova,60079945,,User,,5,,1,3
1460645418,Implement sink stream for LazyFrame,"#260

Implements `sink_ipc` and `sink_parquet` for `LazyFrame`",True,343,https://api.github.com/repos/pola-rs/r-polars/pulls/343,https://github.com/pola-rs/r-polars/pull/343,closed,511,43,12,14,1,21,0,0,[],2023-08-03 01:47:21+00:00,2023-08-11 08:48:58+00:00,716497.0,"8 days, 7:01:37","[{'comment_id': 1282836502, 'comment_body': 'before I would make a separate fn called e.g. new_parquet_compression and place it in rdatatype.rs. To have the conversion looks good also as long as only one method needs it.', 'comment_created': datetime.datetime(2023, 8, 3, 8, 27, 33, tzinfo=datetime.timezone.utc), 'commenter': 'sorhawell', 'type': 'User'}, {'comment_id': 1282838542, 'comment_body': '```suggestion\r\n            ""zstd"" => robj_to!(Option, i32, compression_level)?\r\n```', 'comment_created': datetime.datetime(2023, 8, 3, 8, 29, 13, tzinfo=datetime.timezone.utc), 'commenter': 'sorhawell', 'type': 'User'}, {'comment_id': 1282839029, 'comment_body': '```suggestion\r\n                .map(|cl| polars::prelude::ZstdLevel::try_new(cl))\r\n```', 'comment_created': datetime.datetime(2023, 8, 3, 8, 29, 36, tzinfo=datetime.timezone.utc), 'commenter': 'sorhawell', 'type': 'User'}, {'comment_id': 1282955392, 'comment_body': ""`Cannot combine 'streaming' with 'common_subplan_elimination'. CSE will be turned off.`\r\nThis error pops up. Maybe I should merge optimization toggles now."", 'comment_created': datetime.datetime(2023, 8, 3, 9, 53, 7, tzinfo=datetime.timezone.utc), 'commenter': 'sorhawell', 'type': 'User'}, {'comment_id': 1282966531, 'comment_body': 'argument names must match as much as possible [py-polars](https://github.com/pola-rs/polars/blob/e24bfa5233afd96285092d5bd022213bdcaa6a89/py-polars/polars/lazyframe/frame.py#L1563-L1662)\r\n\r\nfor both sink_parquet and sink_ipc', 'comment_created': datetime.datetime(2023, 8, 3, 9, 58, 41, tzinfo=datetime.timezone.utc), 'commenter': 'sorhawell', 'type': 'User'}, {'comment_id': 1282969270, 'comment_body': 'unit-test bad compression method', 'comment_created': datetime.datetime(2023, 8, 3, 10, 0, 15, tzinfo=datetime.timezone.utc), 'commenter': 'sorhawell', 'type': 'User'}, {'comment_id': 1282969794, 'comment_body': 'unit-test', 'comment_created': datetime.datetime(2023, 8, 3, 10, 0, 35, tzinfo=datetime.timezone.utc), 'commenter': 'sorhawell', 'type': 'User'}, {'comment_id': 1283522448, 'comment_body': 'I believe we cannot directly use `robj_to!(Option, i32, ...)` because we do not have `robj_to_i32`. We only have `robj_to_i64`.', 'comment_created': datetime.datetime(2023, 8, 3, 17, 39, 45, tzinfo=datetime.timezone.utc), 'commenter': 'Sicheng-Pan', 'type': 'User'}, {'comment_id': 1283522606, 'comment_body': 'See above.', 'comment_created': datetime.datetime(2023, 8, 3, 17, 39, 54, tzinfo=datetime.timezone.utc), 'commenter': 'Sicheng-Pan', 'type': 'User'}, {'comment_id': 1283574644, 'comment_body': 'Refactored', 'comment_created': datetime.datetime(2023, 8, 3, 18, 32, 14, tzinfo=datetime.timezone.utc), 'commenter': 'Sicheng-Pan', 'type': 'User'}, {'comment_id': 1283574870, 'comment_body': 'Refactored.', 'comment_created': datetime.datetime(2023, 8, 3, 18, 32, 29, tzinfo=datetime.timezone.utc), 'commenter': 'Sicheng-Pan', 'type': 'User'}, {'comment_id': 1283575148, 'comment_body': 'Added a small test.', 'comment_created': datetime.datetime(2023, 8, 3, 18, 32, 43, tzinfo=datetime.timezone.utc), 'commenter': 'Sicheng-Pan', 'type': 'User'}, {'comment_id': 1283575259, 'comment_body': 'Added a small test.', 'comment_created': datetime.datetime(2023, 8, 3, 18, 32, 52, tzinfo=datetime.timezone.utc), 'commenter': 'Sicheng-Pan', 'type': 'User'}, {'comment_id': 1283764117, 'comment_body': 'oh yes my bad. But we should have i32 and f64. I will impl those conversions now.\r\n\r\n\r\nI\'m a bit pedantic about it, because it is good practice in rust to only use `as` if the new type do fully contain the old type.  So `i32 as i64` is always fine. `u32 as i32` is not. \r\n\r\nrust will silently wrap overflows\r\n```rust\r\nfn main() {\r\n    println!(""max {} min {}"",i64::MAX as i32, i64::MIN as i32);\r\n}\r\n```\r\noutput is\r\n```\r\nmax -1 min 0\r\n```\r\n\r\n\r\n\r\n', 'comment_created': datetime.datetime(2023, 8, 3, 22, 5, 41, tzinfo=datetime.timezone.utc), 'commenter': 'sorhawell', 'type': 'User'}, {'comment_id': 1283768750, 'comment_body': 'Undeniably this is a good practice, but since the zstd compression levels should range from -7 to 22, I thought a `i64` should be no different from a `i32` here (still we should use `robj_to_i32` if possible). We should probably check this on the R side.', 'comment_created': datetime.datetime(2023, 8, 3, 22, 12, 1, tzinfo=datetime.timezone.utc), 'commenter': 'Sicheng-Pan', 'type': 'User'}, {'comment_id': 1283814694, 'comment_body': 'yeah it is very exotic concerns  ^^\r\n\r\nI have added `robj_to!(f64/i32, )` to this PR now', 'comment_created': datetime.datetime(2023, 8, 3, 23, 32, 55, tzinfo=datetime.timezone.utc), 'commenter': 'sorhawell', 'type': 'User'}, {'comment_id': 1283816158, 'comment_body': 'oups added it to #323  :/ , well needed to merge in CSE anyways', 'comment_created': datetime.datetime(2023, 8, 3, 23, 35, 55, tzinfo=datetime.timezone.utc), 'commenter': 'sorhawell', 'type': 'User'}, {'comment_id': 1288328086, 'comment_body': '@Sicheng-Pan  #323  is now merged and CSE is a default feature (which can be toggled). I guess this PR is missing to add the optimization toggles to sink and then is good to go.', 'comment_created': datetime.datetime(2023, 8, 9, 11, 15, 26, tzinfo=datetime.timezone.utc), 'commenter': 'sorhawell', 'type': 'User'}, {'comment_id': 1288329342, 'comment_body': 'robj_to(i32', 'comment_created': datetime.datetime(2023, 8, 9, 11, 16, 40, tzinfo=datetime.timezone.utc), 'commenter': 'sorhawell', 'type': 'User'}, {'comment_id': 1288333009, 'comment_body': '[add opt toggles](https://pola-rs.github.io/polars/py-polars/html/reference/api/polars.LazyFrame.sink_parquet.html#polars.LazyFrame.sink_parquet)', 'comment_created': datetime.datetime(2023, 8, 9, 11, 20, 17, tzinfo=datetime.timezone.utc), 'commenter': 'sorhawell', 'type': 'User'}, {'comment_id': 1288334552, 'comment_body': '[add opt toggles](https://pola-rs.github.io/polars/py-polars/html/reference/api/polars.LazyFrame.sink_ipc.html#polars.LazyFrame.sink_ipc)', 'comment_created': datetime.datetime(2023, 8, 9, 11, 21, 43, tzinfo=datetime.timezone.utc), 'commenter': 'sorhawell', 'type': 'User'}]","[{'commit_sha': 'f9f48310c16026832d8aa7d653e8338c9b8059b2', 'committer_username': 'Sicheng-Pan', 'committer_name': 'Macronova', 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 20, 0, 24, 39, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dade2613abec74fd435d4cd0f669ce938ffa9303', 'committer_username': 'Sicheng-Pan', 'committer_name': 'Macronova', 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 20, 0, 24, 39, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5ae9b49684b7238aec41cbcf7f5f9eeb6f43603f', 'committer_username': 'sorhawell', 'committer_name': 'Søren Havelund Welling', 'committer_email': 'sorhawell@gmail.com', 'commit_date': datetime.datetime(2014, 6, 28, 21, 25, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '110eed57e01ceb54ecfa2b0dbd8dd29761f34c94', 'committer_username': 'sorhawell', 'committer_name': 'Søren Havelund Welling', 'committer_email': 'sorhawell@gmail.com', 'commit_date': datetime.datetime(2014, 6, 28, 21, 25, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '73071e6a7a34f462f4df523e96eea6e08c5e201e', 'committer_username': 'Sicheng-Pan', 'committer_name': 'Macronova', 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 20, 0, 24, 39, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7b3b954aad6f0846e2b2500504d9eb74f298b48e', 'committer_username': 'Sicheng-Pan', 'committer_name': 'Macronova', 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 20, 0, 24, 39, tzinfo=datetime.timezone.utc)}, {'commit_sha': '63bc64d7c76c2ced9a97735fae2511fd7253200b', 'committer_username': 'Sicheng-Pan', 'committer_name': 'Macronova', 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 20, 0, 24, 39, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6810c4f6d55aca49779e763ae6344a373c6ece50', 'committer_username': 'Sicheng-Pan', 'committer_name': 'Macronova', 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 20, 0, 24, 39, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6aa8fca4be125b0b58ad766a6a15382372ca8da3', 'committer_username': 'Sicheng-Pan', 'committer_name': 'Macronova', 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 20, 0, 24, 39, tzinfo=datetime.timezone.utc)}, {'commit_sha': '18b00f304547a2c1c97c5cf0e10b20e7d3097e1a', 'committer_username': 'Sicheng-Pan', 'committer_name': 'Macronova', 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 20, 0, 24, 39, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b85d0f9e7c431e14cd580c8ad98a90cfebc7e945', 'committer_username': 'Sicheng-Pan', 'committer_name': 'Macronova', 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 20, 0, 24, 39, tzinfo=datetime.timezone.utc)}, {'commit_sha': '763f74852286a11723d48e2c6c69998b9cc315f5', 'committer_username': 'sorhawell', 'committer_name': 'Søren Havelund Welling', 'committer_email': 'sorhawell@gmail.com', 'commit_date': datetime.datetime(2014, 6, 28, 21, 25, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '04e34d6a32faf66506aeac32e01504b4e63b6d31', 'committer_username': 'sorhawell', 'committer_name': 'Søren Havelund Welling', 'committer_email': 'sorhawell@gmail.com', 'commit_date': datetime.datetime(2014, 6, 28, 21, 25, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9024046348af71ed26e4e845d42ea5e888d558b8', 'committer_username': 'sorhawell', 'committer_name': 'Søren Havelund Welling', 'committer_email': 'sorhawell@gmail.com', 'commit_date': datetime.datetime(2014, 6, 28, 21, 25, 58, tzinfo=datetime.timezone.utc)}]",Macronova,60079945,,User,,5,,1,3
1464381485,"Implement `cov`, `corr`, `rolling_cov`, `rolling_corr`",#204 ,True,351,https://api.github.com/repos/pola-rs/r-polars/pulls/351,https://github.com/pola-rs/r-polars/pull/351,closed,301,42,13,6,1,9,0,0,[],2023-08-07 00:22:22+00:00,2023-08-07 23:07:57+00:00,81935.0,22:45:35,"[{'comment_id': 1285858614, 'comment_body': 'use `robj_to!(PLExprCol, a)?` on rust side', 'comment_created': datetime.datetime(2023, 8, 7, 13, 19, 54, tzinfo=datetime.timezone.utc), 'commenter': 'sorhawell', 'type': 'User'}, {'comment_id': 1285858965, 'comment_body': 'as above', 'comment_created': datetime.datetime(2023, 8, 7, 13, 20, 11, tzinfo=datetime.timezone.utc), 'commenter': 'sorhawell', 'type': 'User'}, {'comment_id': 1285859159, 'comment_body': 'as above', 'comment_created': datetime.datetime(2023, 8, 7, 13, 20, 21, tzinfo=datetime.timezone.utc), 'commenter': 'sorhawell', 'type': 'User'}, {'comment_id': 1285859434, 'comment_body': 'add unwrap here', 'comment_created': datetime.datetime(2023, 8, 7, 13, 20, 38, tzinfo=datetime.timezone.utc), 'commenter': 'sorhawell', 'type': 'User'}, {'comment_id': 1285861549, 'comment_body': 'avoid use of `&Expr` (see comment) or any other arg type than `Robj` it is still around in code base. But every PR should chip away at old conversions.', 'comment_created': datetime.datetime(2023, 8, 7, 13, 22, 21, tzinfo=datetime.timezone.utc), 'commenter': 'sorhawell', 'type': 'User'}, {'comment_id': 1286353063, 'comment_body': 'updated', 'comment_created': datetime.datetime(2023, 8, 7, 20, 24, 48, tzinfo=datetime.timezone.utc), 'commenter': 'Sicheng-Pan', 'type': 'User'}, {'comment_id': 1286353130, 'comment_body': 'updated', 'comment_created': datetime.datetime(2023, 8, 7, 20, 24, 51, tzinfo=datetime.timezone.utc), 'commenter': 'Sicheng-Pan', 'type': 'User'}, {'comment_id': 1286353185, 'comment_body': 'updated', 'comment_created': datetime.datetime(2023, 8, 7, 20, 24, 55, tzinfo=datetime.timezone.utc), 'commenter': 'Sicheng-Pan', 'type': 'User'}, {'comment_id': 1286353247, 'comment_body': 'updated', 'comment_created': datetime.datetime(2023, 8, 7, 20, 25, tzinfo=datetime.timezone.utc), 'commenter': 'Sicheng-Pan', 'type': 'User'}]","[{'commit_sha': 'a58ad39c8fae9fc548d73d5d10a53463c0ca30a6', 'committer_username': 'Sicheng-Pan', 'committer_name': 'Macronova', 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 20, 0, 24, 39, tzinfo=datetime.timezone.utc)}, {'commit_sha': '859284c663e0daafe6916a9ecfcd39978844fc2c', 'committer_username': 'sorhawell', 'committer_name': 'Søren Havelund Welling', 'committer_email': 'sorhawell@gmail.com', 'commit_date': datetime.datetime(2014, 6, 28, 21, 25, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '93d579d2aefb7b22cc054e4a45f27261602c9d0f', 'committer_username': 'sorhawell', 'committer_name': 'Søren Havelund Welling', 'committer_email': 'sorhawell@gmail.com', 'commit_date': datetime.datetime(2014, 6, 28, 21, 25, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '14e35337f738053f31a1b096844b980881eac41d', 'committer_username': 'sorhawell', 'committer_name': 'Søren Havelund Welling', 'committer_email': 'sorhawell@gmail.com', 'commit_date': datetime.datetime(2014, 6, 28, 21, 25, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e0794f3363aeb1b2e3eb495373f1915039875c35', 'committer_username': 'Sicheng-Pan', 'committer_name': 'Macronova', 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 20, 0, 24, 39, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e132d093a56e84026d5501cb24e6fef731580f4a', 'committer_username': 'sorhawell', 'committer_name': 'Søren Havelund Welling', 'committer_email': 'sorhawell@gmail.com', 'commit_date': datetime.datetime(2014, 6, 28, 21, 25, 58, tzinfo=datetime.timezone.utc)}]",Macronova,60079945,,User,,5,,1,3

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
582387164,r-polars,pola-rs/r-polars,R,38,447,11,26,1228,62,9,7,"[{'id': 1535011435, 'number': 405, 'closed': datetime.datetime(2023, 10, 10, 22, 6, 22, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 9, 29, 0, 54, 2, tzinfo=datetime.timezone.utc), 'time_taken': 1026740.0, 'time_delta': '11 days, 21:12:20', 'additions': 283, 'deletions': 75, 'state': 'closed'}, {'id': 1464381485, 'number': 351, 'closed': datetime.datetime(2023, 8, 7, 23, 7, 57, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 8, 7, 0, 22, 22, tzinfo=datetime.timezone.utc), 'time_taken': 81935.0, 'time_delta': '22:45:35', 'additions': 301, 'deletions': 42, 'state': 'closed'}, {'id': 1460645418, 'number': 343, 'closed': datetime.datetime(2023, 8, 11, 8, 48, 58, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 8, 3, 1, 47, 21, tzinfo=datetime.timezone.utc), 'time_taken': 716497.0, 'time_delta': '8 days, 7:01:37', 'additions': 511, 'deletions': 43, 'state': 'closed'}, {'id': 1445124421, 'number': 329, 'closed': datetime.datetime(2023, 7, 22, 7, 25, 8, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 7, 22, 1, 3, 45, tzinfo=datetime.timezone.utc), 'time_taken': 22883.0, 'time_delta': '6:21:23', 'additions': 103, 'deletions': 11, 'state': 'closed'}, {'id': 1432031575, 'number': 323, 'closed': datetime.datetime(2023, 8, 8, 17, 15, 28, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 7, 12, 21, 48, tzinfo=datetime.timezone.utc), 'time_taken': 2316448.0, 'time_delta': '26 days, 19:27:28', 'additions': 520, 'deletions': 129, 'state': 'closed'}, {'id': 1420330191, 'number': 311, 'closed': datetime.datetime(2023, 8, 9, 15, 4, 19, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 7, 5, 3, 13, 54, tzinfo=datetime.timezone.utc), 'time_taken': 3066625.0, 'time_delta': '35 days, 11:50:25', 'additions': 2221, 'deletions': 622, 'state': 'closed'}, {'id': 1403028563, 'number': 250, 'closed': datetime.datetime(2023, 6, 24, 21, 54, 3, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 6, 22, 7, 41, 57, tzinfo=datetime.timezone.utc), 'time_taken': 223926.0, 'time_delta': '2 days, 14:12:06', 'additions': 775, 'deletions': 676, 'state': 'closed'}, {'id': 1403012541, 'number': 249, 'closed': datetime.datetime(2023, 6, 22, 7, 31, 3, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 6, 22, 7, 29, 27, tzinfo=datetime.timezone.utc), 'time_taken': 96.0, 'time_delta': '0:01:36', 'additions': 632, 'deletions': 585, 'state': 'closed'}, {'id': 1380026241, 'number': 233, 'closed': datetime.datetime(2023, 6, 21, 20, 53, 26, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 6, 6, 2, 10, 6, tzinfo=datetime.timezone.utc), 'time_taken': 1363400.0, 'time_delta': '15 days, 18:43:20', 'additions': 1597, 'deletions': 921, 'state': 'closed'}, {'id': 1368494640, 'number': 227, 'closed': datetime.datetime(2023, 5, 31, 11, 11, 46, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 5, 29, 4, 56, 52, tzinfo=datetime.timezone.utc), 'time_taken': 195294.0, 'time_delta': '2 days, 6:14:54', 'additions': 51, 'deletions': 47, 'state': 'closed'}, {'id': 1263255666, 'number': 63, 'closed': datetime.datetime(2023, 3, 10, 7, 43, 17, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 3, 5, 0, 48, 19, tzinfo=datetime.timezone.utc), 'time_taken': 456898.0, 'time_delta': '5 days, 6:54:58', 'additions': 241, 'deletions': 57, 'state': 'closed'}, {'id': 1258247038, 'number': 54, 'closed': datetime.datetime(2023, 3, 4, 11, 10, 55, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 3, 1, 6, 18, 9, tzinfo=datetime.timezone.utc), 'time_taken': 276766.0, 'time_delta': '3 days, 4:52:46', 'additions': 200, 'deletions': 0, 'state': 'closed'}]"
