pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
1394860647,KDE Rendering Experimental Program ,"[UPDATED]
Hello everyone, this PR contains an experimental implementation of Kernel Density Estimation calculations for a set of points. This uses some of fury's existing APIs and some straight vtk ones. This program may be a good example of shader usage and how to apply post-processing effects inside FURY. The result from running that should be:

![image](https://github.com/fury-gl/fury/assets/61475630/875fa7d4-9724-4b5d-b4f0-1ebcd7b7be80)

Below, what is the idea here:

1. Render billboards with KDE calculations of points to an offscreen window.
2. Capture the offscreen window with a texture.
3. Render a second billboard, this time to the screen, with the texture of the prior rendered window, having a post processing effect applied to it (color map application).

In more details, what is done:

1. The offscreen and normal screen managers are created. The offscreen window is set to be for offscreen rendering with `SetOffscreenRendering(True)`.
2. The parameters of the rendering are created: Random points are initialized, the sigma for the KDE is set, and the scale of the billboards is defined. The points are passed to the billboard actor as its centers.
3. `shaders.shader_apply_effects()` is used to tell OpenGL additive blending is desired for this code.
4. The billboards are rendered to the offscreen window.
5. After this render, the second billboard, the one that will receive the texture from the prior rendering, is created.
6. The colormap is chosen from `matplotlib.colormaps` and passed to the billboard as a texture named `""colormapTexture""` with the function `colormap_to_texture()`
7. The window is captured as a texture and passed to the second billboard with `window_to_texture()`
8. The billboard is then finally rendered to the screen.

Some minor details that may be useful for a better understanding of it:
* The billboard actor got a set o shaders for the [KDE calculation](https://en.wikipedia.org/wiki/Kernel_density_estimation). In its declaration, a function that calculates the non-normalized (yet, I intend to implement a normalized version) KDE as: $KDE(x, \sigma) = exp(-\frac{1}{2}(\frac{x}{\sigma})^2)$.
* For all of that to work, I have created some functions to ease the work, functions that may be even used later in other FURY applications, so I wonder it would be a good idea to make a separate small PR for them.",False,804,https://api.github.com/repos/fury-gl/fury/pulls/804,https://github.com/fury-gl/fury/pull/804,open,278,0,1,18,8,39,0,0,[],2023-06-15 23:07:47+00:00,,0.0,,"[{'comment_id': 1242876735, 'comment_body': '@JoaoDell  you should declare `in vec3 normalizedVertexMCVSOutput;` here\r\n\r\n```python\r\nfrag_decl = """"""varying vec2 out_tex;\r\n               in vec3 normalizedVertexMCVSOutput;\r\n               uniform vec2 res0;\r\n               uniform vec3 point0;""""""\r\n```', 'comment_created': datetime.datetime(2023, 6, 26, 22, 26, 3, tzinfo=datetime.timezone.utc), 'commenter': 'devmessias', 'type': 'User'}, {'comment_id': 1242892249, 'comment_body': ""I don't believe this action is feasible as it would attempt to create new instances of 'point0' and 'res0' variables. This leads to an error. The error message I received :\r\n```\r\n2023-06-26 19:22:22.899 (   0.328s) [        B8DAB000]   vtkShaderProgram.cxx:453    ERR| vtkShaderProgram (0x558732a3cb20): 0:109(15): error: `res0' redeclared\r\n0:110(15): error: `point0' redeclared\r\n```\r\n\r\nWe have a old PR that deals with that \r\nhttps://github.com/fury-gl/fury/pull/424 maybe we need to look into this again @skoudoro  and @filipinascimento \r\n\r\n\r\n\r\n"", 'comment_created': datetime.datetime(2023, 6, 26, 22, 50, 51, tzinfo=datetime.timezone.utc), 'commenter': 'devmessias', 'type': 'User'}, {'comment_id': 1244272736, 'comment_body': ""Interesting, I didn't know how VTK handled uniforms so I thought the `SetUniform` methods only passed uniform values to the shader. That seems like something worth checking out indeed üëç "", 'comment_created': datetime.datetime(2023, 6, 27, 19, 49, 25, tzinfo=datetime.timezone.utc), 'commenter': 'JoaoDell', 'type': 'User'}, {'comment_id': 1244273455, 'comment_body': ""It seems like the problem was somewhere else, but i have just updated the PR with some changes that don't conflict with the shaders"", 'comment_created': datetime.datetime(2023, 6, 27, 19, 50, 15, tzinfo=datetime.timezone.utc), 'commenter': 'JoaoDell', 'type': 'User'}, {'comment_id': 1244314196, 'comment_body': 'texture should be 2D vec right?\r\ntry this\r\n\r\n```\r\nvoid main(){\r\n    //vec2 texture = texture(screenTexture, out_tex);\r\n   // gl_FragColor = texture;\r\n  vec3 normalColor = texture2D(screenTexture, out_tex).rgb;\r\n  gl_FragColor = vec4(normalColor.r, normalColor.g, normalColor.b, 1);\r\n    //gl_FragColor = vec4(0.0, 0.0, 1.0, 1.0);\r\n}\r\n```', 'comment_created': datetime.datetime(2023, 6, 27, 20, 28, 33, tzinfo=datetime.timezone.utc), 'commenter': 'devmessias', 'type': 'User'}, {'comment_id': 1244327391, 'comment_body': 'I was passing out_tex as texture coordinates, but I will try what you recommended', 'comment_created': datetime.datetime(2023, 6, 27, 20, 41, 46, tzinfo=datetime.timezone.utc), 'commenter': 'JoaoDell', 'type': 'User'}, {'comment_id': 1269822377, 'comment_body': 'You are not using this function', 'comment_created': datetime.datetime(2023, 7, 20, 18, 28, 3, tzinfo=datetime.timezone.utc), 'commenter': 'tvcastillod', 'type': 'User'}, {'comment_id': 1269823583, 'comment_body': '`axis` parameter is not used', 'comment_created': datetime.datetime(2023, 7, 20, 18, 29, 23, tzinfo=datetime.timezone.utc), 'commenter': 'tvcastillod', 'type': 'User'}, {'comment_id': 1269833861, 'comment_body': 'Is it necessary to define it now? can you explain what is this parameter for?\r\nI think you might delete `normalizingFactor` as is not doing relevant changes right now. Maybe leave a comment as a reference for future changes.', 'comment_created': datetime.datetime(2023, 7, 20, 18, 37, 12, tzinfo=datetime.timezone.utc), 'commenter': 'tvcastillod', 'type': 'User'}, {'comment_id': 1269836540, 'comment_body': 'This is not necessary since it is just one string, you can pass to the billboard actor `kde_dec` and `kde_impl` directly.', 'comment_created': datetime.datetime(2023, 7, 20, 18, 39, 57, tzinfo=datetime.timezone.utc), 'commenter': 'tvcastillod', 'type': 'User'}, {'comment_id': 1270750367, 'comment_body': 'Indeed, I forgot to take it out, thanks Tania', 'comment_created': datetime.datetime(2023, 7, 21, 14, 36, 7, tzinfo=datetime.timezone.utc), 'commenter': 'JoaoDell', 'type': 'User'}, {'comment_id': 1270752562, 'comment_body': ""This parameter was to avoid final intensity values that exceeded the 1.0 limit, I left it as a reminder here but I guess this will be better adressed on the API so as well, so I don't think it needs to be defined now as well"", 'comment_created': datetime.datetime(2023, 7, 21, 14, 38, 6, tzinfo=datetime.timezone.utc), 'commenter': 'JoaoDell', 'type': 'User'}, {'comment_id': 1270875397, 'comment_body': ""Maybe it should be `from fury import actor, window`\r\nalphabetically ordered!\r\nThis used to automatically happen with python formatters not sure why it isn't happening now!"", 'comment_created': datetime.datetime(2023, 7, 21, 16, 36, 35, tzinfo=datetime.timezone.utc), 'commenter': 'ganimtron-10', 'type': 'User'}, {'comment_id': 1270876268, 'comment_body': 'Same here fury.io then .lib, .shaders and then utils ', 'comment_created': datetime.datetime(2023, 7, 21, 16, 37, 46, tzinfo=datetime.timezone.utc), 'commenter': 'ganimtron-10', 'type': 'User'}, {'comment_id': 1270878708, 'comment_body': 'I think, this should be there at line 2.\r\n\r\nFURY examples usually follow \r\n\r\nexternal packages first\r\n\r\nthen internal packages', 'comment_created': datetime.datetime(2023, 7, 21, 16, 40, 26, tzinfo=datetime.timezone.utc), 'commenter': 'ganimtron-10', 'type': 'User'}, {'comment_id': 1270881586, 'comment_body': 'I am not sure whether we use `typedhint` for the function parameters as we basically mention them in our docs.\r\nMaybe @skoudoro or @filipinascimento can clarify this.', 'comment_created': datetime.datetime(2023, 7, 21, 16, 43, 57, tzinfo=datetime.timezone.utc), 'commenter': 'ganimtron-10', 'type': 'User'}, {'comment_id': 1270882264, 'comment_body': '`Capture` instead, we mostly use singular starters for all the docs.', 'comment_created': datetime.datetime(2023, 7, 21, 16, 44, 46, tzinfo=datetime.timezone.utc), 'commenter': 'ganimtron-10', 'type': 'User'}, {'comment_id': 1270883084, 'comment_body': 'Not properly indented. It should be indented same as that of above text `Texture blending...`', 'comment_created': datetime.datetime(2023, 7, 21, 16, 45, 42, tzinfo=datetime.timezone.utc), 'commenter': 'ganimtron-10', 'type': 'User'}, {'comment_id': 1270883258, 'comment_body': 'same as above', 'comment_created': datetime.datetime(2023, 7, 21, 16, 45, 54, tzinfo=datetime.timezone.utc), 'commenter': 'ganimtron-10', 'type': 'User'}, {'comment_id': 1270885012, 'comment_body': 'you can remove line 64 and use `texture.SetBorderColor(*border_color)`', 'comment_created': datetime.datetime(2023, 7, 21, 16, 48, 4, tzinfo=datetime.timezone.utc), 'commenter': 'ganimtron-10', 'type': 'User'}, {'comment_id': 1270885782, 'comment_body': 'Mentors will update on the `typedhint` as above', 'comment_created': datetime.datetime(2023, 7, 21, 16, 48, 59, tzinfo=datetime.timezone.utc), 'commenter': 'ganimtron-10', 'type': 'User'}, {'comment_id': 1270885965, 'comment_body': '`Convert` instead', 'comment_created': datetime.datetime(2023, 7, 21, 16, 49, 11, tzinfo=datetime.timezone.utc), 'commenter': 'ganimtron-10', 'type': 'User'}, {'comment_id': 1270886343, 'comment_body': '`bool, optional`', 'comment_created': datetime.datetime(2023, 7, 21, 16, 49, 41, tzinfo=datetime.timezone.utc), 'commenter': 'ganimtron-10', 'type': 'User'}, {'comment_id': 1270886950, 'comment_body': '`Ease` instead', 'comment_created': datetime.datetime(2023, 7, 21, 16, 50, 26, tzinfo=datetime.timezone.utc), 'commenter': 'ganimtron-10', 'type': 'User'}, {'comment_id': 1270890489, 'comment_body': ""I don't think user should remember the case sensitivity in the parameter options!\r\nI think we could do something like\r\n\r\ntake input from user for eg. `wrap_mode` and use it like `wrap_mode.lower()` and keep all our dictionary key values in lower case to avoid any case insensitivity.\r\n\r\nThis change would require more discussion!"", 'comment_created': datetime.datetime(2023, 7, 21, 16, 54, 46, tzinfo=datetime.timezone.utc), 'commenter': 'ganimtron-10', 'type': 'User'}, {'comment_id': 1270891096, 'comment_body': '`shader.lower()` instead', 'comment_created': datetime.datetime(2023, 7, 21, 16, 55, 32, tzinfo=datetime.timezone.utc), 'commenter': 'ganimtron-10', 'type': 'User'}, {'comment_id': 1270891321, 'comment_body': '`Convert` instead', 'comment_created': datetime.datetime(2023, 7, 21, 16, 55, 44, tzinfo=datetime.timezone.utc), 'commenter': 'ganimtron-10', 'type': 'User'}, {'comment_id': 1270891767, 'comment_body': '`float, optional`', 'comment_created': datetime.datetime(2023, 7, 21, 16, 56, 17, tzinfo=datetime.timezone.utc), 'commenter': 'ganimtron-10', 'type': 'User'}, {'comment_id': 1270891898, 'comment_body': 'same as above', 'comment_created': datetime.datetime(2023, 7, 21, 16, 56, 28, tzinfo=datetime.timezone.utc), 'commenter': 'ganimtron-10', 'type': 'User'}, {'comment_id': 1270892529, 'comment_body': 'the parameter definitions should have indentation', 'comment_created': datetime.datetime(2023, 7, 21, 16, 57, 18, tzinfo=datetime.timezone.utc), 'commenter': 'ganimtron-10', 'type': 'User'}, {'comment_id': 1270893215, 'comment_body': 'space not needed', 'comment_created': datetime.datetime(2023, 7, 21, 16, 58, 8, tzinfo=datetime.timezone.utc), 'commenter': 'ganimtron-10', 'type': 'User'}, {'comment_id': 1270893559, 'comment_body': 'value defination needs indentation', 'comment_created': datetime.datetime(2023, 7, 21, 16, 58, 32, tzinfo=datetime.timezone.utc), 'commenter': 'ganimtron-10', 'type': 'User'}, {'comment_id': 1270897722, 'comment_body': 'If this is a demo or example we would need the usual\r\n\r\n```python\r\nif interactive:\r\n   manager.start()\r\n\r\nwindow.record(...)\r\n\r\n```', 'comment_created': datetime.datetime(2023, 7, 21, 17, 2, 41, tzinfo=datetime.timezone.utc), 'commenter': 'ganimtron-10', 'type': 'User'}, {'comment_id': 1270919376, 'comment_body': 'I set those like that because it is how their names are defined inside VTK, however this suggestion makes sense as a way to prevent this kind of problems a user may have. I think it is an easy and minor thing to be modified, so for me that seems alright to do üëç ', 'comment_created': datetime.datetime(2023, 7, 21, 17, 30, 19, tzinfo=datetime.timezone.utc), 'commenter': 'JoaoDell', 'type': 'User'}, {'comment_id': 1270921034, 'comment_body': 'This is indeed a demo of this experimental feature I am about to implement as an API, so that is indeed needed, thank you üëç ', 'comment_created': datetime.datetime(2023, 7, 21, 17, 32, 13, tzinfo=datetime.timezone.utc), 'commenter': 'JoaoDell', 'type': 'User'}, {'comment_id': 1270921581, 'comment_body': ""Nice, I didn't know about that, thanks"", 'comment_created': datetime.datetime(2023, 7, 21, 17, 32, 58, tzinfo=datetime.timezone.utc), 'commenter': 'JoaoDell', 'type': 'User'}, {'comment_id': 1275310798, 'comment_body': 'Not yet, but we should go toward this direction. \r\n\r\nActually, I think we should make it a standard for FURY and start slowly the process for all module', 'comment_created': datetime.datetime(2023, 7, 26, 17, 56, 27, tzinfo=datetime.timezone.utc), 'commenter': 'skoudoro', 'type': 'User'}, {'comment_id': 1275351960, 'comment_body': 'Sounds good to me. ', 'comment_created': datetime.datetime(2023, 7, 26, 18, 36, 51, tzinfo=datetime.timezone.utc), 'commenter': 'ganimtron-10', 'type': 'User'}, {'comment_id': 1276335570, 'comment_body': ""Okay, so should I leave it like that and keep using `typedhint` for my future commits or should I stay on today's standards and not use it for now until the make it standard decision for FURY is made @skoudoro?"", 'comment_created': datetime.datetime(2023, 7, 27, 14, 6, 52, tzinfo=datetime.timezone.utc), 'commenter': 'JoaoDell', 'type': 'User'}]","[{'commit_sha': 'ad3fda15e633d4768252c95ae446a1f2548b4bae', 'committer_username': 'JoaoDell', 'committer_name': 'Jo√£o Victor Dell Agli Floriano', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 25, 19, 47, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '41bf2b1ab12f217879297a556275f4703a8c1ca7', 'committer_username': 'JoaoDell', 'committer_name': 'Jo√£o Victor Dell Agli Floriano', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 25, 19, 47, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1a0ae7c221d17d796864b3646a682076d95dcc47', 'committer_username': 'JoaoDell', 'committer_name': 'Jo√£o Victor Dell Agli Floriano', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 25, 19, 47, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3de574565d157f65e40a7029c895d34f2b58f24b', 'committer_username': 'JoaoDell', 'committer_name': 'Jo√£o Victor Dell Agli Floriano', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 25, 19, 47, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3c5e4c0031afda2f7d2573207ca90cc20913aedf', 'committer_username': 'JoaoDell', 'committer_name': 'Jo√£o Victor Dell Agli Floriano', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 25, 19, 47, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd08f137c58dcf942154240356c0ef2344a235253', 'committer_username': 'JoaoDell', 'committer_name': 'Jo√£o Victor Dell Agli Floriano', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 25, 19, 47, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0cc63f54fdc52f5f194000fa479f8b09925ba878', 'committer_username': 'JoaoDell', 'committer_name': 'Jo√£o Victor Dell Agli Floriano', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 25, 19, 47, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ceb076fbcddf8ae615c24802e7fe946c53d115e9', 'committer_username': 'JoaoDell', 'committer_name': 'Jo√£o Victor Dell Agli Floriano', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 25, 19, 47, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c848f5666a4066179ebd9e78feb504475f0d9ae3', 'committer_username': 'JoaoDell', 'committer_name': 'Jo√£o Victor Dell Agli Floriano', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 25, 19, 47, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '620060a841c03149fd70fdabc5c54c6bdb1f1b63', 'committer_username': 'JoaoDell', 'committer_name': 'Jo√£o Victor Dell Agli Floriano', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 25, 19, 47, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '961dbd76009ec6adcd5e776fef2b8cd7b146da1b', 'committer_username': 'JoaoDell', 'committer_name': 'Jo√£o Victor Dell Agli Floriano', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 25, 19, 47, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dc989b72b6f6fe1e82b5162208ce9cd2eeedd112', 'committer_username': 'JoaoDell', 'committer_name': 'Jo√£o Victor Dell Agli Floriano', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 25, 19, 47, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '06ad2a8179144e2ce03cf5ee39a6c2a89397da14', 'committer_username': 'JoaoDell', 'committer_name': 'Jo√£o Victor Dell Agli Floriano', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 25, 19, 47, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1d937dccdfd87a4a6199d6b85b33e0d93984e40a', 'committer_username': 'JoaoDell', 'committer_name': 'Jo√£o Victor Dell Agli Floriano', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 25, 19, 47, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b611368f42082a2384a82f85314eac187d2f4968', 'committer_username': 'JoaoDell', 'committer_name': 'Jo√£o Victor Dell Agli Floriano', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 25, 19, 47, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '06dd4a18cc92af0b0c8482a2930158056dbe26f1', 'committer_username': 'JoaoDell', 'committer_name': 'Jo√£o Victor Dell Agli Floriano', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 25, 19, 47, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '93ca6c29cd56db0e10f15ab30043ad84e585971f', 'committer_username': 'JoaoDell', 'committer_name': 'Jo√£o Victor Dell Agli Floriano', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 25, 19, 47, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bf2b91afe1269a46d3c671e67e08f5a3f05eb12d', 'committer_username': 'JoaoDell', 'committer_name': 'Jo√£o Victor Dell Agli Floriano', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 25, 19, 47, 16, tzinfo=datetime.timezone.utc)}]",Jo√£o Victor Dell Agli Floriano,61475630,,User,,15,,31,14
1394860647,KDE Rendering Experimental Program ,"[UPDATED]
Hello everyone, this PR contains an experimental implementation of Kernel Density Estimation calculations for a set of points. This uses some of fury's existing APIs and some straight vtk ones. This program may be a good example of shader usage and how to apply post-processing effects inside FURY. The result from running that should be:

![image](https://github.com/fury-gl/fury/assets/61475630/875fa7d4-9724-4b5d-b4f0-1ebcd7b7be80)

Below, what is the idea here:

1. Render billboards with KDE calculations of points to an offscreen window.
2. Capture the offscreen window with a texture.
3. Render a second billboard, this time to the screen, with the texture of the prior rendered window, having a post processing effect applied to it (color map application).

In more details, what is done:

1. The offscreen and normal screen managers are created. The offscreen window is set to be for offscreen rendering with `SetOffscreenRendering(True)`.
2. The parameters of the rendering are created: Random points are initialized, the sigma for the KDE is set, and the scale of the billboards is defined. The points are passed to the billboard actor as its centers.
3. `shaders.shader_apply_effects()` is used to tell OpenGL additive blending is desired for this code.
4. The billboards are rendered to the offscreen window.
5. After this render, the second billboard, the one that will receive the texture from the prior rendering, is created.
6. The colormap is chosen from `matplotlib.colormaps` and passed to the billboard as a texture named `""colormapTexture""` with the function `colormap_to_texture()`
7. The window is captured as a texture and passed to the second billboard with `window_to_texture()`
8. The billboard is then finally rendered to the screen.

Some minor details that may be useful for a better understanding of it:
* The billboard actor got a set o shaders for the [KDE calculation](https://en.wikipedia.org/wiki/Kernel_density_estimation). In its declaration, a function that calculates the non-normalized (yet, I intend to implement a normalized version) KDE as: $KDE(x, \sigma) = exp(-\frac{1}{2}(\frac{x}{\sigma})^2)$.
* For all of that to work, I have created some functions to ease the work, functions that may be even used later in other FURY applications, so I wonder it would be a good idea to make a separate small PR for them.",False,804,https://api.github.com/repos/fury-gl/fury/pulls/804,https://github.com/fury-gl/fury/pull/804,open,278,0,1,18,8,39,0,0,[],2023-06-15 23:07:47+00:00,,0.0,,"[{'comment_id': 1242876735, 'comment_body': '@JoaoDell  you should declare `in vec3 normalizedVertexMCVSOutput;` here\r\n\r\n```python\r\nfrag_decl = """"""varying vec2 out_tex;\r\n               in vec3 normalizedVertexMCVSOutput;\r\n               uniform vec2 res0;\r\n               uniform vec3 point0;""""""\r\n```', 'comment_created': datetime.datetime(2023, 6, 26, 22, 26, 3, tzinfo=datetime.timezone.utc), 'commenter': 'devmessias', 'type': 'User'}, {'comment_id': 1242892249, 'comment_body': ""I don't believe this action is feasible as it would attempt to create new instances of 'point0' and 'res0' variables. This leads to an error. The error message I received :\r\n```\r\n2023-06-26 19:22:22.899 (   0.328s) [        B8DAB000]   vtkShaderProgram.cxx:453    ERR| vtkShaderProgram (0x558732a3cb20): 0:109(15): error: `res0' redeclared\r\n0:110(15): error: `point0' redeclared\r\n```\r\n\r\nWe have a old PR that deals with that \r\nhttps://github.com/fury-gl/fury/pull/424 maybe we need to look into this again @skoudoro  and @filipinascimento \r\n\r\n\r\n\r\n"", 'comment_created': datetime.datetime(2023, 6, 26, 22, 50, 51, tzinfo=datetime.timezone.utc), 'commenter': 'devmessias', 'type': 'User'}, {'comment_id': 1244272736, 'comment_body': ""Interesting, I didn't know how VTK handled uniforms so I thought the `SetUniform` methods only passed uniform values to the shader. That seems like something worth checking out indeed üëç "", 'comment_created': datetime.datetime(2023, 6, 27, 19, 49, 25, tzinfo=datetime.timezone.utc), 'commenter': 'JoaoDell', 'type': 'User'}, {'comment_id': 1244273455, 'comment_body': ""It seems like the problem was somewhere else, but i have just updated the PR with some changes that don't conflict with the shaders"", 'comment_created': datetime.datetime(2023, 6, 27, 19, 50, 15, tzinfo=datetime.timezone.utc), 'commenter': 'JoaoDell', 'type': 'User'}, {'comment_id': 1244314196, 'comment_body': 'texture should be 2D vec right?\r\ntry this\r\n\r\n```\r\nvoid main(){\r\n    //vec2 texture = texture(screenTexture, out_tex);\r\n   // gl_FragColor = texture;\r\n  vec3 normalColor = texture2D(screenTexture, out_tex).rgb;\r\n  gl_FragColor = vec4(normalColor.r, normalColor.g, normalColor.b, 1);\r\n    //gl_FragColor = vec4(0.0, 0.0, 1.0, 1.0);\r\n}\r\n```', 'comment_created': datetime.datetime(2023, 6, 27, 20, 28, 33, tzinfo=datetime.timezone.utc), 'commenter': 'devmessias', 'type': 'User'}, {'comment_id': 1244327391, 'comment_body': 'I was passing out_tex as texture coordinates, but I will try what you recommended', 'comment_created': datetime.datetime(2023, 6, 27, 20, 41, 46, tzinfo=datetime.timezone.utc), 'commenter': 'JoaoDell', 'type': 'User'}, {'comment_id': 1269822377, 'comment_body': 'You are not using this function', 'comment_created': datetime.datetime(2023, 7, 20, 18, 28, 3, tzinfo=datetime.timezone.utc), 'commenter': 'tvcastillod', 'type': 'User'}, {'comment_id': 1269823583, 'comment_body': '`axis` parameter is not used', 'comment_created': datetime.datetime(2023, 7, 20, 18, 29, 23, tzinfo=datetime.timezone.utc), 'commenter': 'tvcastillod', 'type': 'User'}, {'comment_id': 1269833861, 'comment_body': 'Is it necessary to define it now? can you explain what is this parameter for?\r\nI think you might delete `normalizingFactor` as is not doing relevant changes right now. Maybe leave a comment as a reference for future changes.', 'comment_created': datetime.datetime(2023, 7, 20, 18, 37, 12, tzinfo=datetime.timezone.utc), 'commenter': 'tvcastillod', 'type': 'User'}, {'comment_id': 1269836540, 'comment_body': 'This is not necessary since it is just one string, you can pass to the billboard actor `kde_dec` and `kde_impl` directly.', 'comment_created': datetime.datetime(2023, 7, 20, 18, 39, 57, tzinfo=datetime.timezone.utc), 'commenter': 'tvcastillod', 'type': 'User'}, {'comment_id': 1270750367, 'comment_body': 'Indeed, I forgot to take it out, thanks Tania', 'comment_created': datetime.datetime(2023, 7, 21, 14, 36, 7, tzinfo=datetime.timezone.utc), 'commenter': 'JoaoDell', 'type': 'User'}, {'comment_id': 1270752562, 'comment_body': ""This parameter was to avoid final intensity values that exceeded the 1.0 limit, I left it as a reminder here but I guess this will be better adressed on the API so as well, so I don't think it needs to be defined now as well"", 'comment_created': datetime.datetime(2023, 7, 21, 14, 38, 6, tzinfo=datetime.timezone.utc), 'commenter': 'JoaoDell', 'type': 'User'}, {'comment_id': 1270875397, 'comment_body': ""Maybe it should be `from fury import actor, window`\r\nalphabetically ordered!\r\nThis used to automatically happen with python formatters not sure why it isn't happening now!"", 'comment_created': datetime.datetime(2023, 7, 21, 16, 36, 35, tzinfo=datetime.timezone.utc), 'commenter': 'ganimtron-10', 'type': 'User'}, {'comment_id': 1270876268, 'comment_body': 'Same here fury.io then .lib, .shaders and then utils ', 'comment_created': datetime.datetime(2023, 7, 21, 16, 37, 46, tzinfo=datetime.timezone.utc), 'commenter': 'ganimtron-10', 'type': 'User'}, {'comment_id': 1270878708, 'comment_body': 'I think, this should be there at line 2.\r\n\r\nFURY examples usually follow \r\n\r\nexternal packages first\r\n\r\nthen internal packages', 'comment_created': datetime.datetime(2023, 7, 21, 16, 40, 26, tzinfo=datetime.timezone.utc), 'commenter': 'ganimtron-10', 'type': 'User'}, {'comment_id': 1270881586, 'comment_body': 'I am not sure whether we use `typedhint` for the function parameters as we basically mention them in our docs.\r\nMaybe @skoudoro or @filipinascimento can clarify this.', 'comment_created': datetime.datetime(2023, 7, 21, 16, 43, 57, tzinfo=datetime.timezone.utc), 'commenter': 'ganimtron-10', 'type': 'User'}, {'comment_id': 1270882264, 'comment_body': '`Capture` instead, we mostly use singular starters for all the docs.', 'comment_created': datetime.datetime(2023, 7, 21, 16, 44, 46, tzinfo=datetime.timezone.utc), 'commenter': 'ganimtron-10', 'type': 'User'}, {'comment_id': 1270883084, 'comment_body': 'Not properly indented. It should be indented same as that of above text `Texture blending...`', 'comment_created': datetime.datetime(2023, 7, 21, 16, 45, 42, tzinfo=datetime.timezone.utc), 'commenter': 'ganimtron-10', 'type': 'User'}, {'comment_id': 1270883258, 'comment_body': 'same as above', 'comment_created': datetime.datetime(2023, 7, 21, 16, 45, 54, tzinfo=datetime.timezone.utc), 'commenter': 'ganimtron-10', 'type': 'User'}, {'comment_id': 1270885012, 'comment_body': 'you can remove line 64 and use `texture.SetBorderColor(*border_color)`', 'comment_created': datetime.datetime(2023, 7, 21, 16, 48, 4, tzinfo=datetime.timezone.utc), 'commenter': 'ganimtron-10', 'type': 'User'}, {'comment_id': 1270885782, 'comment_body': 'Mentors will update on the `typedhint` as above', 'comment_created': datetime.datetime(2023, 7, 21, 16, 48, 59, tzinfo=datetime.timezone.utc), 'commenter': 'ganimtron-10', 'type': 'User'}, {'comment_id': 1270885965, 'comment_body': '`Convert` instead', 'comment_created': datetime.datetime(2023, 7, 21, 16, 49, 11, tzinfo=datetime.timezone.utc), 'commenter': 'ganimtron-10', 'type': 'User'}, {'comment_id': 1270886343, 'comment_body': '`bool, optional`', 'comment_created': datetime.datetime(2023, 7, 21, 16, 49, 41, tzinfo=datetime.timezone.utc), 'commenter': 'ganimtron-10', 'type': 'User'}, {'comment_id': 1270886950, 'comment_body': '`Ease` instead', 'comment_created': datetime.datetime(2023, 7, 21, 16, 50, 26, tzinfo=datetime.timezone.utc), 'commenter': 'ganimtron-10', 'type': 'User'}, {'comment_id': 1270890489, 'comment_body': ""I don't think user should remember the case sensitivity in the parameter options!\r\nI think we could do something like\r\n\r\ntake input from user for eg. `wrap_mode` and use it like `wrap_mode.lower()` and keep all our dictionary key values in lower case to avoid any case insensitivity.\r\n\r\nThis change would require more discussion!"", 'comment_created': datetime.datetime(2023, 7, 21, 16, 54, 46, tzinfo=datetime.timezone.utc), 'commenter': 'ganimtron-10', 'type': 'User'}, {'comment_id': 1270891096, 'comment_body': '`shader.lower()` instead', 'comment_created': datetime.datetime(2023, 7, 21, 16, 55, 32, tzinfo=datetime.timezone.utc), 'commenter': 'ganimtron-10', 'type': 'User'}, {'comment_id': 1270891321, 'comment_body': '`Convert` instead', 'comment_created': datetime.datetime(2023, 7, 21, 16, 55, 44, tzinfo=datetime.timezone.utc), 'commenter': 'ganimtron-10', 'type': 'User'}, {'comment_id': 1270891767, 'comment_body': '`float, optional`', 'comment_created': datetime.datetime(2023, 7, 21, 16, 56, 17, tzinfo=datetime.timezone.utc), 'commenter': 'ganimtron-10', 'type': 'User'}, {'comment_id': 1270891898, 'comment_body': 'same as above', 'comment_created': datetime.datetime(2023, 7, 21, 16, 56, 28, tzinfo=datetime.timezone.utc), 'commenter': 'ganimtron-10', 'type': 'User'}, {'comment_id': 1270892529, 'comment_body': 'the parameter definitions should have indentation', 'comment_created': datetime.datetime(2023, 7, 21, 16, 57, 18, tzinfo=datetime.timezone.utc), 'commenter': 'ganimtron-10', 'type': 'User'}, {'comment_id': 1270893215, 'comment_body': 'space not needed', 'comment_created': datetime.datetime(2023, 7, 21, 16, 58, 8, tzinfo=datetime.timezone.utc), 'commenter': 'ganimtron-10', 'type': 'User'}, {'comment_id': 1270893559, 'comment_body': 'value defination needs indentation', 'comment_created': datetime.datetime(2023, 7, 21, 16, 58, 32, tzinfo=datetime.timezone.utc), 'commenter': 'ganimtron-10', 'type': 'User'}, {'comment_id': 1270897722, 'comment_body': 'If this is a demo or example we would need the usual\r\n\r\n```python\r\nif interactive:\r\n   manager.start()\r\n\r\nwindow.record(...)\r\n\r\n```', 'comment_created': datetime.datetime(2023, 7, 21, 17, 2, 41, tzinfo=datetime.timezone.utc), 'commenter': 'ganimtron-10', 'type': 'User'}, {'comment_id': 1270919376, 'comment_body': 'I set those like that because it is how their names are defined inside VTK, however this suggestion makes sense as a way to prevent this kind of problems a user may have. I think it is an easy and minor thing to be modified, so for me that seems alright to do üëç ', 'comment_created': datetime.datetime(2023, 7, 21, 17, 30, 19, tzinfo=datetime.timezone.utc), 'commenter': 'JoaoDell', 'type': 'User'}, {'comment_id': 1270921034, 'comment_body': 'This is indeed a demo of this experimental feature I am about to implement as an API, so that is indeed needed, thank you üëç ', 'comment_created': datetime.datetime(2023, 7, 21, 17, 32, 13, tzinfo=datetime.timezone.utc), 'commenter': 'JoaoDell', 'type': 'User'}, {'comment_id': 1270921581, 'comment_body': ""Nice, I didn't know about that, thanks"", 'comment_created': datetime.datetime(2023, 7, 21, 17, 32, 58, tzinfo=datetime.timezone.utc), 'commenter': 'JoaoDell', 'type': 'User'}, {'comment_id': 1275310798, 'comment_body': 'Not yet, but we should go toward this direction. \r\n\r\nActually, I think we should make it a standard for FURY and start slowly the process for all module', 'comment_created': datetime.datetime(2023, 7, 26, 17, 56, 27, tzinfo=datetime.timezone.utc), 'commenter': 'skoudoro', 'type': 'User'}, {'comment_id': 1275351960, 'comment_body': 'Sounds good to me. ', 'comment_created': datetime.datetime(2023, 7, 26, 18, 36, 51, tzinfo=datetime.timezone.utc), 'commenter': 'ganimtron-10', 'type': 'User'}, {'comment_id': 1276335570, 'comment_body': ""Okay, so should I leave it like that and keep using `typedhint` for my future commits or should I stay on today's standards and not use it for now until the make it standard decision for FURY is made @skoudoro?"", 'comment_created': datetime.datetime(2023, 7, 27, 14, 6, 52, tzinfo=datetime.timezone.utc), 'commenter': 'JoaoDell', 'type': 'User'}]","[{'commit_sha': 'ad3fda15e633d4768252c95ae446a1f2548b4bae', 'committer_username': 'JoaoDell', 'committer_name': 'Jo√£o Victor Dell Agli Floriano', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 25, 19, 47, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '41bf2b1ab12f217879297a556275f4703a8c1ca7', 'committer_username': 'JoaoDell', 'committer_name': 'Jo√£o Victor Dell Agli Floriano', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 25, 19, 47, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1a0ae7c221d17d796864b3646a682076d95dcc47', 'committer_username': 'JoaoDell', 'committer_name': 'Jo√£o Victor Dell Agli Floriano', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 25, 19, 47, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3de574565d157f65e40a7029c895d34f2b58f24b', 'committer_username': 'JoaoDell', 'committer_name': 'Jo√£o Victor Dell Agli Floriano', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 25, 19, 47, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3c5e4c0031afda2f7d2573207ca90cc20913aedf', 'committer_username': 'JoaoDell', 'committer_name': 'Jo√£o Victor Dell Agli Floriano', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 25, 19, 47, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd08f137c58dcf942154240356c0ef2344a235253', 'committer_username': 'JoaoDell', 'committer_name': 'Jo√£o Victor Dell Agli Floriano', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 25, 19, 47, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0cc63f54fdc52f5f194000fa479f8b09925ba878', 'committer_username': 'JoaoDell', 'committer_name': 'Jo√£o Victor Dell Agli Floriano', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 25, 19, 47, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ceb076fbcddf8ae615c24802e7fe946c53d115e9', 'committer_username': 'JoaoDell', 'committer_name': 'Jo√£o Victor Dell Agli Floriano', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 25, 19, 47, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c848f5666a4066179ebd9e78feb504475f0d9ae3', 'committer_username': 'JoaoDell', 'committer_name': 'Jo√£o Victor Dell Agli Floriano', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 25, 19, 47, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '620060a841c03149fd70fdabc5c54c6bdb1f1b63', 'committer_username': 'JoaoDell', 'committer_name': 'Jo√£o Victor Dell Agli Floriano', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 25, 19, 47, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '961dbd76009ec6adcd5e776fef2b8cd7b146da1b', 'committer_username': 'JoaoDell', 'committer_name': 'Jo√£o Victor Dell Agli Floriano', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 25, 19, 47, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dc989b72b6f6fe1e82b5162208ce9cd2eeedd112', 'committer_username': 'JoaoDell', 'committer_name': 'Jo√£o Victor Dell Agli Floriano', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 25, 19, 47, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '06ad2a8179144e2ce03cf5ee39a6c2a89397da14', 'committer_username': 'JoaoDell', 'committer_name': 'Jo√£o Victor Dell Agli Floriano', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 25, 19, 47, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1d937dccdfd87a4a6199d6b85b33e0d93984e40a', 'committer_username': 'JoaoDell', 'committer_name': 'Jo√£o Victor Dell Agli Floriano', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 25, 19, 47, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b611368f42082a2384a82f85314eac187d2f4968', 'committer_username': 'JoaoDell', 'committer_name': 'Jo√£o Victor Dell Agli Floriano', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 25, 19, 47, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '06dd4a18cc92af0b0c8482a2930158056dbe26f1', 'committer_username': 'JoaoDell', 'committer_name': 'Jo√£o Victor Dell Agli Floriano', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 25, 19, 47, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '93ca6c29cd56db0e10f15ab30043ad84e585971f', 'committer_username': 'JoaoDell', 'committer_name': 'Jo√£o Victor Dell Agli Floriano', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 25, 19, 47, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bf2b91afe1269a46d3c671e67e08f5a3f05eb12d', 'committer_username': 'JoaoDell', 'committer_name': 'Jo√£o Victor Dell Agli Floriano', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 25, 19, 47, 16, tzinfo=datetime.timezone.utc)}]",Jo√£o Victor Dell Agli Floriano,61475630,,User,,15,,31,14
1394860647,KDE Rendering Experimental Program ,"[UPDATED]
Hello everyone, this PR contains an experimental implementation of Kernel Density Estimation calculations for a set of points. This uses some of fury's existing APIs and some straight vtk ones. This program may be a good example of shader usage and how to apply post-processing effects inside FURY. The result from running that should be:

![image](https://github.com/fury-gl/fury/assets/61475630/875fa7d4-9724-4b5d-b4f0-1ebcd7b7be80)

Below, what is the idea here:

1. Render billboards with KDE calculations of points to an offscreen window.
2. Capture the offscreen window with a texture.
3. Render a second billboard, this time to the screen, with the texture of the prior rendered window, having a post processing effect applied to it (color map application).

In more details, what is done:

1. The offscreen and normal screen managers are created. The offscreen window is set to be for offscreen rendering with `SetOffscreenRendering(True)`.
2. The parameters of the rendering are created: Random points are initialized, the sigma for the KDE is set, and the scale of the billboards is defined. The points are passed to the billboard actor as its centers.
3. `shaders.shader_apply_effects()` is used to tell OpenGL additive blending is desired for this code.
4. The billboards are rendered to the offscreen window.
5. After this render, the second billboard, the one that will receive the texture from the prior rendering, is created.
6. The colormap is chosen from `matplotlib.colormaps` and passed to the billboard as a texture named `""colormapTexture""` with the function `colormap_to_texture()`
7. The window is captured as a texture and passed to the second billboard with `window_to_texture()`
8. The billboard is then finally rendered to the screen.

Some minor details that may be useful for a better understanding of it:
* The billboard actor got a set o shaders for the [KDE calculation](https://en.wikipedia.org/wiki/Kernel_density_estimation). In its declaration, a function that calculates the non-normalized (yet, I intend to implement a normalized version) KDE as: $KDE(x, \sigma) = exp(-\frac{1}{2}(\frac{x}{\sigma})^2)$.
* For all of that to work, I have created some functions to ease the work, functions that may be even used later in other FURY applications, so I wonder it would be a good idea to make a separate small PR for them.",False,804,https://api.github.com/repos/fury-gl/fury/pulls/804,https://github.com/fury-gl/fury/pull/804,open,278,0,1,18,8,39,0,0,[],2023-06-15 23:07:47+00:00,,0.0,,"[{'comment_id': 1242876735, 'comment_body': '@JoaoDell  you should declare `in vec3 normalizedVertexMCVSOutput;` here\r\n\r\n```python\r\nfrag_decl = """"""varying vec2 out_tex;\r\n               in vec3 normalizedVertexMCVSOutput;\r\n               uniform vec2 res0;\r\n               uniform vec3 point0;""""""\r\n```', 'comment_created': datetime.datetime(2023, 6, 26, 22, 26, 3, tzinfo=datetime.timezone.utc), 'commenter': 'devmessias', 'type': 'User'}, {'comment_id': 1242892249, 'comment_body': ""I don't believe this action is feasible as it would attempt to create new instances of 'point0' and 'res0' variables. This leads to an error. The error message I received :\r\n```\r\n2023-06-26 19:22:22.899 (   0.328s) [        B8DAB000]   vtkShaderProgram.cxx:453    ERR| vtkShaderProgram (0x558732a3cb20): 0:109(15): error: `res0' redeclared\r\n0:110(15): error: `point0' redeclared\r\n```\r\n\r\nWe have a old PR that deals with that \r\nhttps://github.com/fury-gl/fury/pull/424 maybe we need to look into this again @skoudoro  and @filipinascimento \r\n\r\n\r\n\r\n"", 'comment_created': datetime.datetime(2023, 6, 26, 22, 50, 51, tzinfo=datetime.timezone.utc), 'commenter': 'devmessias', 'type': 'User'}, {'comment_id': 1244272736, 'comment_body': ""Interesting, I didn't know how VTK handled uniforms so I thought the `SetUniform` methods only passed uniform values to the shader. That seems like something worth checking out indeed üëç "", 'comment_created': datetime.datetime(2023, 6, 27, 19, 49, 25, tzinfo=datetime.timezone.utc), 'commenter': 'JoaoDell', 'type': 'User'}, {'comment_id': 1244273455, 'comment_body': ""It seems like the problem was somewhere else, but i have just updated the PR with some changes that don't conflict with the shaders"", 'comment_created': datetime.datetime(2023, 6, 27, 19, 50, 15, tzinfo=datetime.timezone.utc), 'commenter': 'JoaoDell', 'type': 'User'}, {'comment_id': 1244314196, 'comment_body': 'texture should be 2D vec right?\r\ntry this\r\n\r\n```\r\nvoid main(){\r\n    //vec2 texture = texture(screenTexture, out_tex);\r\n   // gl_FragColor = texture;\r\n  vec3 normalColor = texture2D(screenTexture, out_tex).rgb;\r\n  gl_FragColor = vec4(normalColor.r, normalColor.g, normalColor.b, 1);\r\n    //gl_FragColor = vec4(0.0, 0.0, 1.0, 1.0);\r\n}\r\n```', 'comment_created': datetime.datetime(2023, 6, 27, 20, 28, 33, tzinfo=datetime.timezone.utc), 'commenter': 'devmessias', 'type': 'User'}, {'comment_id': 1244327391, 'comment_body': 'I was passing out_tex as texture coordinates, but I will try what you recommended', 'comment_created': datetime.datetime(2023, 6, 27, 20, 41, 46, tzinfo=datetime.timezone.utc), 'commenter': 'JoaoDell', 'type': 'User'}, {'comment_id': 1269822377, 'comment_body': 'You are not using this function', 'comment_created': datetime.datetime(2023, 7, 20, 18, 28, 3, tzinfo=datetime.timezone.utc), 'commenter': 'tvcastillod', 'type': 'User'}, {'comment_id': 1269823583, 'comment_body': '`axis` parameter is not used', 'comment_created': datetime.datetime(2023, 7, 20, 18, 29, 23, tzinfo=datetime.timezone.utc), 'commenter': 'tvcastillod', 'type': 'User'}, {'comment_id': 1269833861, 'comment_body': 'Is it necessary to define it now? can you explain what is this parameter for?\r\nI think you might delete `normalizingFactor` as is not doing relevant changes right now. Maybe leave a comment as a reference for future changes.', 'comment_created': datetime.datetime(2023, 7, 20, 18, 37, 12, tzinfo=datetime.timezone.utc), 'commenter': 'tvcastillod', 'type': 'User'}, {'comment_id': 1269836540, 'comment_body': 'This is not necessary since it is just one string, you can pass to the billboard actor `kde_dec` and `kde_impl` directly.', 'comment_created': datetime.datetime(2023, 7, 20, 18, 39, 57, tzinfo=datetime.timezone.utc), 'commenter': 'tvcastillod', 'type': 'User'}, {'comment_id': 1270750367, 'comment_body': 'Indeed, I forgot to take it out, thanks Tania', 'comment_created': datetime.datetime(2023, 7, 21, 14, 36, 7, tzinfo=datetime.timezone.utc), 'commenter': 'JoaoDell', 'type': 'User'}, {'comment_id': 1270752562, 'comment_body': ""This parameter was to avoid final intensity values that exceeded the 1.0 limit, I left it as a reminder here but I guess this will be better adressed on the API so as well, so I don't think it needs to be defined now as well"", 'comment_created': datetime.datetime(2023, 7, 21, 14, 38, 6, tzinfo=datetime.timezone.utc), 'commenter': 'JoaoDell', 'type': 'User'}, {'comment_id': 1270875397, 'comment_body': ""Maybe it should be `from fury import actor, window`\r\nalphabetically ordered!\r\nThis used to automatically happen with python formatters not sure why it isn't happening now!"", 'comment_created': datetime.datetime(2023, 7, 21, 16, 36, 35, tzinfo=datetime.timezone.utc), 'commenter': 'ganimtron-10', 'type': 'User'}, {'comment_id': 1270876268, 'comment_body': 'Same here fury.io then .lib, .shaders and then utils ', 'comment_created': datetime.datetime(2023, 7, 21, 16, 37, 46, tzinfo=datetime.timezone.utc), 'commenter': 'ganimtron-10', 'type': 'User'}, {'comment_id': 1270878708, 'comment_body': 'I think, this should be there at line 2.\r\n\r\nFURY examples usually follow \r\n\r\nexternal packages first\r\n\r\nthen internal packages', 'comment_created': datetime.datetime(2023, 7, 21, 16, 40, 26, tzinfo=datetime.timezone.utc), 'commenter': 'ganimtron-10', 'type': 'User'}, {'comment_id': 1270881586, 'comment_body': 'I am not sure whether we use `typedhint` for the function parameters as we basically mention them in our docs.\r\nMaybe @skoudoro or @filipinascimento can clarify this.', 'comment_created': datetime.datetime(2023, 7, 21, 16, 43, 57, tzinfo=datetime.timezone.utc), 'commenter': 'ganimtron-10', 'type': 'User'}, {'comment_id': 1270882264, 'comment_body': '`Capture` instead, we mostly use singular starters for all the docs.', 'comment_created': datetime.datetime(2023, 7, 21, 16, 44, 46, tzinfo=datetime.timezone.utc), 'commenter': 'ganimtron-10', 'type': 'User'}, {'comment_id': 1270883084, 'comment_body': 'Not properly indented. It should be indented same as that of above text `Texture blending...`', 'comment_created': datetime.datetime(2023, 7, 21, 16, 45, 42, tzinfo=datetime.timezone.utc), 'commenter': 'ganimtron-10', 'type': 'User'}, {'comment_id': 1270883258, 'comment_body': 'same as above', 'comment_created': datetime.datetime(2023, 7, 21, 16, 45, 54, tzinfo=datetime.timezone.utc), 'commenter': 'ganimtron-10', 'type': 'User'}, {'comment_id': 1270885012, 'comment_body': 'you can remove line 64 and use `texture.SetBorderColor(*border_color)`', 'comment_created': datetime.datetime(2023, 7, 21, 16, 48, 4, tzinfo=datetime.timezone.utc), 'commenter': 'ganimtron-10', 'type': 'User'}, {'comment_id': 1270885782, 'comment_body': 'Mentors will update on the `typedhint` as above', 'comment_created': datetime.datetime(2023, 7, 21, 16, 48, 59, tzinfo=datetime.timezone.utc), 'commenter': 'ganimtron-10', 'type': 'User'}, {'comment_id': 1270885965, 'comment_body': '`Convert` instead', 'comment_created': datetime.datetime(2023, 7, 21, 16, 49, 11, tzinfo=datetime.timezone.utc), 'commenter': 'ganimtron-10', 'type': 'User'}, {'comment_id': 1270886343, 'comment_body': '`bool, optional`', 'comment_created': datetime.datetime(2023, 7, 21, 16, 49, 41, tzinfo=datetime.timezone.utc), 'commenter': 'ganimtron-10', 'type': 'User'}, {'comment_id': 1270886950, 'comment_body': '`Ease` instead', 'comment_created': datetime.datetime(2023, 7, 21, 16, 50, 26, tzinfo=datetime.timezone.utc), 'commenter': 'ganimtron-10', 'type': 'User'}, {'comment_id': 1270890489, 'comment_body': ""I don't think user should remember the case sensitivity in the parameter options!\r\nI think we could do something like\r\n\r\ntake input from user for eg. `wrap_mode` and use it like `wrap_mode.lower()` and keep all our dictionary key values in lower case to avoid any case insensitivity.\r\n\r\nThis change would require more discussion!"", 'comment_created': datetime.datetime(2023, 7, 21, 16, 54, 46, tzinfo=datetime.timezone.utc), 'commenter': 'ganimtron-10', 'type': 'User'}, {'comment_id': 1270891096, 'comment_body': '`shader.lower()` instead', 'comment_created': datetime.datetime(2023, 7, 21, 16, 55, 32, tzinfo=datetime.timezone.utc), 'commenter': 'ganimtron-10', 'type': 'User'}, {'comment_id': 1270891321, 'comment_body': '`Convert` instead', 'comment_created': datetime.datetime(2023, 7, 21, 16, 55, 44, tzinfo=datetime.timezone.utc), 'commenter': 'ganimtron-10', 'type': 'User'}, {'comment_id': 1270891767, 'comment_body': '`float, optional`', 'comment_created': datetime.datetime(2023, 7, 21, 16, 56, 17, tzinfo=datetime.timezone.utc), 'commenter': 'ganimtron-10', 'type': 'User'}, {'comment_id': 1270891898, 'comment_body': 'same as above', 'comment_created': datetime.datetime(2023, 7, 21, 16, 56, 28, tzinfo=datetime.timezone.utc), 'commenter': 'ganimtron-10', 'type': 'User'}, {'comment_id': 1270892529, 'comment_body': 'the parameter definitions should have indentation', 'comment_created': datetime.datetime(2023, 7, 21, 16, 57, 18, tzinfo=datetime.timezone.utc), 'commenter': 'ganimtron-10', 'type': 'User'}, {'comment_id': 1270893215, 'comment_body': 'space not needed', 'comment_created': datetime.datetime(2023, 7, 21, 16, 58, 8, tzinfo=datetime.timezone.utc), 'commenter': 'ganimtron-10', 'type': 'User'}, {'comment_id': 1270893559, 'comment_body': 'value defination needs indentation', 'comment_created': datetime.datetime(2023, 7, 21, 16, 58, 32, tzinfo=datetime.timezone.utc), 'commenter': 'ganimtron-10', 'type': 'User'}, {'comment_id': 1270897722, 'comment_body': 'If this is a demo or example we would need the usual\r\n\r\n```python\r\nif interactive:\r\n   manager.start()\r\n\r\nwindow.record(...)\r\n\r\n```', 'comment_created': datetime.datetime(2023, 7, 21, 17, 2, 41, tzinfo=datetime.timezone.utc), 'commenter': 'ganimtron-10', 'type': 'User'}, {'comment_id': 1270919376, 'comment_body': 'I set those like that because it is how their names are defined inside VTK, however this suggestion makes sense as a way to prevent this kind of problems a user may have. I think it is an easy and minor thing to be modified, so for me that seems alright to do üëç ', 'comment_created': datetime.datetime(2023, 7, 21, 17, 30, 19, tzinfo=datetime.timezone.utc), 'commenter': 'JoaoDell', 'type': 'User'}, {'comment_id': 1270921034, 'comment_body': 'This is indeed a demo of this experimental feature I am about to implement as an API, so that is indeed needed, thank you üëç ', 'comment_created': datetime.datetime(2023, 7, 21, 17, 32, 13, tzinfo=datetime.timezone.utc), 'commenter': 'JoaoDell', 'type': 'User'}, {'comment_id': 1270921581, 'comment_body': ""Nice, I didn't know about that, thanks"", 'comment_created': datetime.datetime(2023, 7, 21, 17, 32, 58, tzinfo=datetime.timezone.utc), 'commenter': 'JoaoDell', 'type': 'User'}, {'comment_id': 1275310798, 'comment_body': 'Not yet, but we should go toward this direction. \r\n\r\nActually, I think we should make it a standard for FURY and start slowly the process for all module', 'comment_created': datetime.datetime(2023, 7, 26, 17, 56, 27, tzinfo=datetime.timezone.utc), 'commenter': 'skoudoro', 'type': 'User'}, {'comment_id': 1275351960, 'comment_body': 'Sounds good to me. ', 'comment_created': datetime.datetime(2023, 7, 26, 18, 36, 51, tzinfo=datetime.timezone.utc), 'commenter': 'ganimtron-10', 'type': 'User'}, {'comment_id': 1276335570, 'comment_body': ""Okay, so should I leave it like that and keep using `typedhint` for my future commits or should I stay on today's standards and not use it for now until the make it standard decision for FURY is made @skoudoro?"", 'comment_created': datetime.datetime(2023, 7, 27, 14, 6, 52, tzinfo=datetime.timezone.utc), 'commenter': 'JoaoDell', 'type': 'User'}]","[{'commit_sha': 'ad3fda15e633d4768252c95ae446a1f2548b4bae', 'committer_username': 'JoaoDell', 'committer_name': 'Jo√£o Victor Dell Agli Floriano', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 25, 19, 47, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '41bf2b1ab12f217879297a556275f4703a8c1ca7', 'committer_username': 'JoaoDell', 'committer_name': 'Jo√£o Victor Dell Agli Floriano', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 25, 19, 47, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1a0ae7c221d17d796864b3646a682076d95dcc47', 'committer_username': 'JoaoDell', 'committer_name': 'Jo√£o Victor Dell Agli Floriano', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 25, 19, 47, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3de574565d157f65e40a7029c895d34f2b58f24b', 'committer_username': 'JoaoDell', 'committer_name': 'Jo√£o Victor Dell Agli Floriano', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 25, 19, 47, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3c5e4c0031afda2f7d2573207ca90cc20913aedf', 'committer_username': 'JoaoDell', 'committer_name': 'Jo√£o Victor Dell Agli Floriano', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 25, 19, 47, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd08f137c58dcf942154240356c0ef2344a235253', 'committer_username': 'JoaoDell', 'committer_name': 'Jo√£o Victor Dell Agli Floriano', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 25, 19, 47, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0cc63f54fdc52f5f194000fa479f8b09925ba878', 'committer_username': 'JoaoDell', 'committer_name': 'Jo√£o Victor Dell Agli Floriano', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 25, 19, 47, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ceb076fbcddf8ae615c24802e7fe946c53d115e9', 'committer_username': 'JoaoDell', 'committer_name': 'Jo√£o Victor Dell Agli Floriano', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 25, 19, 47, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c848f5666a4066179ebd9e78feb504475f0d9ae3', 'committer_username': 'JoaoDell', 'committer_name': 'Jo√£o Victor Dell Agli Floriano', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 25, 19, 47, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '620060a841c03149fd70fdabc5c54c6bdb1f1b63', 'committer_username': 'JoaoDell', 'committer_name': 'Jo√£o Victor Dell Agli Floriano', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 25, 19, 47, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '961dbd76009ec6adcd5e776fef2b8cd7b146da1b', 'committer_username': 'JoaoDell', 'committer_name': 'Jo√£o Victor Dell Agli Floriano', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 25, 19, 47, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dc989b72b6f6fe1e82b5162208ce9cd2eeedd112', 'committer_username': 'JoaoDell', 'committer_name': 'Jo√£o Victor Dell Agli Floriano', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 25, 19, 47, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '06ad2a8179144e2ce03cf5ee39a6c2a89397da14', 'committer_username': 'JoaoDell', 'committer_name': 'Jo√£o Victor Dell Agli Floriano', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 25, 19, 47, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1d937dccdfd87a4a6199d6b85b33e0d93984e40a', 'committer_username': 'JoaoDell', 'committer_name': 'Jo√£o Victor Dell Agli Floriano', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 25, 19, 47, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b611368f42082a2384a82f85314eac187d2f4968', 'committer_username': 'JoaoDell', 'committer_name': 'Jo√£o Victor Dell Agli Floriano', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 25, 19, 47, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '06dd4a18cc92af0b0c8482a2930158056dbe26f1', 'committer_username': 'JoaoDell', 'committer_name': 'Jo√£o Victor Dell Agli Floriano', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 25, 19, 47, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '93ca6c29cd56db0e10f15ab30043ad84e585971f', 'committer_username': 'JoaoDell', 'committer_name': 'Jo√£o Victor Dell Agli Floriano', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 25, 19, 47, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bf2b91afe1269a46d3c671e67e08f5a3f05eb12d', 'committer_username': 'JoaoDell', 'committer_name': 'Jo√£o Victor Dell Agli Floriano', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 25, 19, 47, 16, tzinfo=datetime.timezone.utc)}]",Jo√£o Victor Dell Agli Floriano,61475630,,User,,15,,31,14
1441796332,First Stage of the KDE Rendering API,"Hello, this is a draft PR to start discussing the details of the KDE rendering API for FURY. Talking with @devmessias, some points arised regarding how this API should be done:

The way this kind of render work is different from other actors because it deals with **post-processing effects**. This means this render needs first to render the scene into a renderer, capture that rendered scene and pass it as a texture to another actor inside another scene assigned to another window, so the effect can be applied. This involves offscreen renderers and an implicit callback function declared when that actor is created to do that job of calling the offscreen rendering, so it is kinda more complex than a simple actor and a standard pipeline. Having that in mind, we thought in two options:

1. Create a simple actor that deals with one or more KDE renders.
2. Create a class to manage KDE actors, or maybe in a more general way, a class that manages post-processing effects. 

The first one may be a more simple and user-friendly approach at first, but may present some issues regarding optimization and needs to be carefully thought. For example, it needs to be decided whether the user will pass an offscreen manager together with the onscreen one, or if this will be created inside the function. Leaving that to the user may difficult the actor usage as several pieces would need to be put together by them to work, but creating the offscreen manager inside the function may slow the rendering if the user decides to create multiple KDE actors and not multiple KDE renders inside only one KDE actor. 

The second one considers the possibility of creation of another future feature in FURY, which is the post-processing feature, as the implementation of capturing the screen to a texture and pass it to be rendered in a billboard can have more general usages than only a KDE render. It also may deal with the problems pointed above internally, as a post-processing manager may reduce the probability of several managers being created, resulting in faster processing time. However, it needs to be carefully thought as well, as it needs to be simple and straightforward, existing only to avoid conflicts and diminish user misusage, even though the latter can never be extinguished, I think.

Having that in mind, we decided to take the second path, as it seems to solve issues that may arise. However, it would be important to have other opinions on that, so feel free to use this PR as a place to do that üëç 

[UPDATE]

The first draft of the API is done and ready for review. Below, a brief explanation of how this works:

The main programs here are:
* `effect_manager.py`
* `viz_kde_render.py`

Those two are where the implementation of the API is done and tested, so you should be looking into that when reviewing then. Also, there is the testing script for the API:
* `test_effect_manager.py`

And the test for the kde actor under:
* `test_actors.py` (I have put it down the end)

There are also new shaders to be used:
* `*_distribution.glsl`
* `color_mapping.glsl`

The first ones are different kernels for the kde calculations, and the last one is the function to map intensities to a color map passed by the user. I have also altered some files:
* `shaders/__init__.py`
* `shaders/base.py`
* `_valid_examples.toml`
* `window.py`

With some minor changes necessary for this API to work. In case anyone got any questions, feel free to tell me down below so we can discuss about all of this. I got some doubts regarding some implementation choices, like, for example, if the ""effects"" name won't cause any confusion as FURY already has `shader_apply_effects()` function, so I would like to hear from that as well.

![exponential](https://github.com/fury-gl/fury/assets/61475630/ba6d798f-ecd2-47b7-9ebe-da2dbf4de0ca)

An important thing to say is that there are some important details missing from this API:
* This is **not** a KDE rendering, exactly. It still lacks the division by the number of points rendered so the density can be calculated, however this is a more complicated detail as it steps on the problem of not having enough precision as it lacks a float framebuffer, being replaced by an unsigned integer one. To understand that, you can check my week 9 blogpost on that on #831. Bruno and Filipi oriented me to leave that for a later PR.
* Talking with Filipi, he hinted me it would be good to have a slider for the intensities. I tried that, however it seems to be crashing the whole program, but I didn't understand exactly why yet, so we decided to leave that for later as well.
",False,826,https://api.github.com/repos/fury-gl/fury/pulls/826,https://github.com/fury-gl/fury/pull/826,open,1091,3,16,43,6,46,1,0,[{'name': 'type:New Feature'}],2023-07-19 22:00:22+00:00,,0.0,,"[{'comment_id': 1281757663, 'comment_body': 'Remove this', 'comment_created': datetime.datetime(2023, 8, 2, 11, 11, 11, tzinfo=datetime.timezone.utc), 'commenter': 'devmessias', 'type': 'User'}, {'comment_id': 1281757877, 'comment_body': 'Remove this', 'comment_created': datetime.datetime(2023, 8, 2, 11, 11, 25, tzinfo=datetime.timezone.utc), 'commenter': 'devmessias', 'type': 'User'}, {'comment_id': 1281757941, 'comment_body': 'Remove this', 'comment_created': datetime.datetime(2023, 8, 2, 11, 11, 30, tzinfo=datetime.timezone.utc), 'commenter': 'devmessias', 'type': 'User'}, {'comment_id': 1281760895, 'comment_body': '""""""\r\nScales parameter will be defined by the empirical rule:\r\n1*sima radius = 68.27% of data inside the curve\r\n 2*sigma radius = 95.45% of data inside the curve\r\n3*sigma radius = 99.73% of data inside the curve\r\n""""""', 'comment_created': datetime.datetime(2023, 8, 2, 11, 14, 52, tzinfo=datetime.timezone.utc), 'commenter': 'devmessias', 'type': 'User'}, {'comment_id': 1281764590, 'comment_body': 'Because this is the first PR for the effect manager, avoid adding any additional features to it. If you implement everything now, it could make creating tests and debugging your code more difficult.', 'comment_created': datetime.datetime(2023, 8, 2, 11, 18, 43, tzinfo=datetime.timezone.utc), 'commenter': 'devmessias', 'type': 'User'}, {'comment_id': 1281766750, 'comment_body': 'Change \r\n\r\n```\r\n  """"""Capture a rendered window and pass it as a texture to the given actor.\r\n    Parameters\r\n```\r\nto\r\n\r\n```\r\n  """"""Capture a rendered window and pass it as a texture to the given actor.\r\n   \r\n    Parameters\r\n```\r\nDocstrings follow a set of well-defined patterns, allowing for automatic documentation generation through tools like Sphinx.', 'comment_created': datetime.datetime(2023, 8, 2, 11, 20, 52, tzinfo=datetime.timezone.utc), 'commenter': 'devmessias', 'type': 'User'}, {'comment_id': 1281767250, 'comment_body': 'same as before, break a line between the first docstring line and the Parameters', 'comment_created': datetime.datetime(2023, 8, 2, 11, 21, 25, tzinfo=datetime.timezone.utc), 'commenter': 'devmessias', 'type': 'User'}, {'comment_id': 1281767412, 'comment_body': 'same as before, break a line between the first docstring line and the Parameters', 'comment_created': datetime.datetime(2023, 8, 2, 11, 21, 36, tzinfo=datetime.timezone.utc), 'commenter': 'devmessias', 'type': 'User'}, {'comment_id': 1289221796, 'comment_body': '```\r\n    SHADER_FUNCTIONS = {""vertex"" : actor.GetShaderProperty().GetVertexCustomUniforms(), \r\n                        ""fragment"" : actor.GetShaderProperty().GetFragmentCustomUniforms(),\r\n                        ""geometry"" : actor.GetShaderProperty().GetGeometryCustomUniforms()}\r\n    if shader_type not in SHADER_FUNCTIONS:\r\n        raise ValueError(\'Shader type should be: ...\')\r\n    return SHADER_FUNCTIONS[shader_type]\r\n    \r\n    \r\n    ', 'comment_created': datetime.datetime(2023, 8, 9, 21, 32, 45, tzinfo=datetime.timezone.utc), 'commenter': 'devmessias', 'type': 'User'}, {'comment_id': 1290333261, 'comment_body': 'why do you need to return this?', 'comment_created': datetime.datetime(2023, 8, 10, 15, 40, 23, tzinfo=datetime.timezone.utc), 'commenter': 'tvcastillod', 'type': 'User'}, {'comment_id': 1290341633, 'comment_body': 'I suggest you to put in order the shader code to make it easier to understand. I mean, first put the _vertex_ shader code, then the _fragment_ shader code. Because `varying_dec`, `kde_dec`, and `kde_impl` are from fs, but appear first, so I got confused at first when reading the whole implementation.', 'comment_created': datetime.datetime(2023, 8, 10, 15, 47, 41, tzinfo=datetime.timezone.utc), 'commenter': 'tvcastillod', 'type': 'User'}, {'comment_id': 1290346467, 'comment_body': 'Maybe move this just before the `textured_billboard` definition, since it is used there.\r\n', 'comment_created': datetime.datetime(2023, 8, 10, 15, 51, 39, tzinfo=datetime.timezone.utc), 'commenter': 'tvcastillod', 'type': 'User'}, {'comment_id': 1290351167, 'comment_body': 'How is _opacity_ handled here? I mean, is the alpha channel of `final_color` important? I would leave just one parameter to control the _opacity_, not both.', 'comment_created': datetime.datetime(2023, 8, 10, 15, 54, 58, tzinfo=datetime.timezone.utc), 'commenter': 'tvcastillod', 'type': 'User'}, {'comment_id': 1290357911, 'comment_body': 'May I know how are you calculating the correct scaling?', 'comment_created': datetime.datetime(2023, 8, 10, 16, 0, 24, tzinfo=datetime.timezone.utc), 'commenter': 'tvcastillod', 'type': 'User'}, {'comment_id': 1290360511, 'comment_body': 'set `interactive` to `False`', 'comment_created': datetime.datetime(2023, 8, 10, 16, 2, 6, tzinfo=datetime.timezone.utc), 'commenter': 'tvcastillod', 'type': 'User'}, {'comment_id': 1290370991, 'comment_body': ""Not sure if this should be tested here, as you don't have a `kde` actor definition on `actor.py`, maybe take a look at `actors/peak.py` and `peak` in `actor.py`, to see how you could adjust that."", 'comment_created': datetime.datetime(2023, 8, 10, 16, 11, 10, tzinfo=datetime.timezone.utc), 'commenter': 'tvcastillod', 'type': 'User'}, {'comment_id': 1290409100, 'comment_body': 'This change was made to assure anyone working with the window callback or the interactor callback could have access to the added callback id, in case they need to remove or change it later. I use it, for example, to remove the callbacks added by an effect inside the `remove_effect()` method', 'comment_created': datetime.datetime(2023, 8, 10, 16, 42, 24, tzinfo=datetime.timezone.utc), 'commenter': 'JoaoDell', 'type': 'User'}, {'comment_id': 1290419682, 'comment_body': 'The alpha channel of final_color is important as, if the colormap passed by the user got some color with alpha different from 1.0, it needs to show up here. The opacity is a parameter to control the general opacity apart from the already existing ones from the colormap, so the final alpha will be the u_opacity (that got its value from opacity parameter) multiplying the final_color alpha channel. Is it clear?', 'comment_created': datetime.datetime(2023, 8, 10, 16, 51, 29, tzinfo=datetime.timezone.utc), 'commenter': 'JoaoDell', 'type': 'User'}, {'comment_id': 1290432936, 'comment_body': 'Sure. The actor_scales is a dynamic variable that calculates the general scale of the `textured_billboard` depending on some parameters:\r\n* `bill_bounds` : The bounds of the offscreen rendered billboards\r\n* `center_of_mass` : The average of all of the points positions. This accounts for the possible displacement of the points\r\n* `max_sigma` : The maximum value that includes all of the non-zero values of the KDE calculation. It relates to the empirical rule of the gaussian disstribution, that says that $3\\sigma$ includes 99.73% of the values, so $4\\sigma$ should include the remaining ones.\r\n\r\nAll of them are them summed together to calculate a possible size so the billboard would not cut the renderization. This is like this for now, but I have identified that I may need to change the scaling to a way that it occupies the whole screen, as it is affecting the real size of the points, so expect some change regarding that.', 'comment_created': datetime.datetime(2023, 8, 10, 17, 3, 1, tzinfo=datetime.timezone.utc), 'commenter': 'JoaoDell', 'type': 'User'}, {'comment_id': 1290440241, 'comment_body': 'Ok, I will be looking into that üëç ', 'comment_created': datetime.datetime(2023, 8, 10, 17, 10, 17, tzinfo=datetime.timezone.utc), 'commenter': 'JoaoDell', 'type': 'User'}, {'comment_id': 1293581271, 'comment_body': 'instead of naming the window `demo`  be more specific like maybe `kde render` or something else.', 'comment_created': datetime.datetime(2023, 8, 14, 14, 52, 34, tzinfo=datetime.timezone.utc), 'commenter': 'ganimtron-10', 'type': 'User'}, {'comment_id': 1293585308, 'comment_body': 'why not `size = (1200, 1000)` as I can see you have not used the width and height specifically', 'comment_created': datetime.datetime(2023, 8, 14, 14, 55, 35, tzinfo=datetime.timezone.utc), 'commenter': 'ganimtron-10', 'type': 'User'}, {'comment_id': 1293592144, 'comment_body': 'This sentence sounds a bit weird to me `as well` is repeated twice.', 'comment_created': datetime.datetime(2023, 8, 14, 15, 0, 53, tzinfo=datetime.timezone.utc), 'commenter': 'ganimtron-10', 'type': 'User'}, {'comment_id': 1293596482, 'comment_body': 'By default -> `False`', 'comment_created': datetime.datetime(2023, 8, 14, 15, 3, 34, tzinfo=datetime.timezone.utc), 'commenter': 'ganimtron-10', 'type': 'User'}, {'comment_id': 1293605327, 'comment_body': 'Do you need this screen shot? As I see you are not testing anything on this it is better to remove it!', 'comment_created': datetime.datetime(2023, 8, 14, 15, 9, 19, tzinfo=datetime.timezone.utc), 'commenter': 'ganimtron-10', 'type': 'User'}, {'comment_id': 1293609327, 'comment_body': 'some specific window name instead of `demo`', 'comment_created': datetime.datetime(2023, 8, 14, 15, 12, 34, tzinfo=datetime.timezone.utc), 'commenter': 'ganimtron-10', 'type': 'User'}, {'comment_id': 1293609456, 'comment_body': 'same as above', 'comment_created': datetime.datetime(2023, 8, 14, 15, 12, 41, tzinfo=datetime.timezone.utc), 'commenter': 'ganimtron-10', 'type': 'User'}, {'comment_id': 1293613958, 'comment_body': '`, optional`', 'comment_created': datetime.datetime(2023, 8, 14, 15, 16, 38, tzinfo=datetime.timezone.utc), 'commenter': 'ganimtron-10', 'type': 'User'}, {'comment_id': 1293614192, 'comment_body': '`, optional`', 'comment_created': datetime.datetime(2023, 8, 14, 15, 16, 50, tzinfo=datetime.timezone.utc), 'commenter': 'ganimtron-10', 'type': 'User'}, {'comment_id': 1293614731, 'comment_body': '`, optional`', 'comment_created': datetime.datetime(2023, 8, 14, 15, 17, 13, tzinfo=datetime.timezone.utc), 'commenter': 'ganimtron-10', 'type': 'User'}, {'comment_id': 1293614831, 'comment_body': '`, optional`', 'comment_created': datetime.datetime(2023, 8, 14, 15, 17, 19, tzinfo=datetime.timezone.utc), 'commenter': 'ganimtron-10', 'type': 'User'}, {'comment_id': 1293616120, 'comment_body': '`, optional`', 'comment_created': datetime.datetime(2023, 8, 14, 15, 18, 21, tzinfo=datetime.timezone.utc), 'commenter': 'ganimtron-10', 'type': 'User'}, {'comment_id': 1293628754, 'comment_body': 'you would also need to add `shader_custom_uniforms` in the `__all__`', 'comment_created': datetime.datetime(2023, 8, 14, 15, 26, 15, tzinfo=datetime.timezone.utc), 'commenter': 'ganimtron-10', 'type': 'User'}, {'comment_id': 1293629555, 'comment_body': '`Ease` singular.', 'comment_created': datetime.datetime(2023, 8, 14, 15, 26, 59, tzinfo=datetime.timezone.utc), 'commenter': 'ganimtron-10', 'type': 'User'}, {'comment_id': 1293630176, 'comment_body': '`shader_type.lower()`', 'comment_created': datetime.datetime(2023, 8, 14, 15, 27, 30, tzinfo=datetime.timezone.utc), 'commenter': 'ganimtron-10', 'type': 'User'}, {'comment_id': 1293633214, 'comment_body': 'following the alphabetical order just shift this line at ln 14', 'comment_created': datetime.datetime(2023, 8, 14, 15, 29, 52, tzinfo=datetime.timezone.utc), 'commenter': 'ganimtron-10', 'type': 'User'}, {'comment_id': 1293634123, 'comment_body': 'some specific window name', 'comment_created': datetime.datetime(2023, 8, 14, 15, 30, 17, tzinfo=datetime.timezone.utc), 'commenter': 'ganimtron-10', 'type': 'User'}, {'comment_id': 1293636605, 'comment_body': 'maybe you could use `size = ...` as you are not using the width and height individually', 'comment_created': datetime.datetime(2023, 8, 14, 15, 31, 40, tzinfo=datetime.timezone.utc), 'commenter': 'ganimtron-10', 'type': 'User'}, {'comment_id': 1296056156, 'comment_body': 'you can directly use `size`', 'comment_created': datetime.datetime(2023, 8, 16, 15, 4, 38, tzinfo=datetime.timezone.utc), 'commenter': 'ganimtron-10', 'type': 'User'}, {'comment_id': 1299301817, 'comment_body': ""This hasn't been updated! While testing you would need it to be true but make sure to set it to false once you are pushing code!"", 'comment_created': datetime.datetime(2023, 8, 20, 5, 21, 40, tzinfo=datetime.timezone.utc), 'commenter': 'ganimtron-10', 'type': 'User'}, {'comment_id': 1299301979, 'comment_body': 'Why there is no type specified for `bandwidth`?', 'comment_created': datetime.datetime(2023, 8, 20, 5, 23, 56, tzinfo=datetime.timezone.utc), 'commenter': 'ganimtron-10', 'type': 'User'}, {'comment_id': 1299431042, 'comment_body': 'It is because also allow the passing of single values, not only `np.ndarrays`. I guess I just need to change the description of it to be more clear, what do you think?', 'comment_created': datetime.datetime(2023, 8, 20, 20, 29, 13, tzinfo=datetime.timezone.utc), 'commenter': 'JoaoDell', 'type': 'User'}, {'comment_id': 1299597265, 'comment_body': 'Typing union can be used instead\r\nhttps://docs.python.org/3/library/typing.html#typing.Union\r\n\r\nFor instance:\r\n\r\n```python\r\nfrom typing import Union as tUnion\r\n...\r\nbandwidth : tUnion(float, np.ndarray),\r\n...\r\n\r\n```', 'comment_created': datetime.datetime(2023, 8, 21, 4, 52, 45, tzinfo=datetime.timezone.utc), 'commenter': 'filipinascimento', 'type': 'User'}, {'comment_id': 1299598714, 'comment_body': '`SHADER_FUNCTIONS` is not a ""global"" or module constant. Use lowercase for it?', 'comment_created': datetime.datetime(2023, 8, 21, 4, 56, 11, tzinfo=datetime.timezone.utc), 'commenter': 'filipinascimento', 'type': 'User'}, {'comment_id': 1300204864, 'comment_body': '@filipinascimento for some reason `Union` is outputting the following error:\r\n\r\n  File ""..."", line 220, in KDE\r\n    bandwidths : Union(float, np.ndarray),\r\n  File ""..."", line 387, in __call__\r\n    raise TypeError(f""Cannot instantiate {self!r}"")\r\nTypeError: Cannot instantiate typing.Union\r\n\r\nDo you know how to fix it?', 'comment_created': datetime.datetime(2023, 8, 21, 14, 37, 12, tzinfo=datetime.timezone.utc), 'commenter': 'JoaoDell', 'type': 'User'}, {'comment_id': 1300263243, 'comment_body': 'Ops it is tUnion[float, np.ndarray]', 'comment_created': datetime.datetime(2023, 8, 21, 15, 14, 50, tzinfo=datetime.timezone.utc), 'commenter': 'filipinascimento', 'type': 'User'}]","[{'commit_sha': '35bbb9852524515db7fa6996065200e8d365c8dc', 'committer_username': 'JoaoDell', 'committer_name': 'Jo√£o Victor Dell Agli Floriano', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 25, 19, 47, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ef06af3a5130a6bc2895e7a0ad554e0a2835bf86', 'committer_username': 'JoaoDell', 'committer_name': 'Jo√£o Victor Dell Agli Floriano', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 25, 19, 47, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '110ad6bde018d032ed119d6d0228c6efdfb3d03d', 'committer_username': 'JoaoDell', 'committer_name': 'Jo√£o Victor Dell Agli Floriano', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 25, 19, 47, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a09e26230bb43a2ea5a6f3394f808650a540f8ca', 'committer_username': 'JoaoDell', 'committer_name': 'Jo√£o Victor Dell Agli Floriano', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 25, 19, 47, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bec5f0ee2be2c14fa80dfa27aca48cdeb2eff1c9', 'committer_username': 'JoaoDell', 'committer_name': 'Jo√£o Victor Dell Agli Floriano', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 25, 19, 47, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b572b4bbcd21c2bf3ac59231e4733b6c4f426851', 'committer_username': 'JoaoDell', 'committer_name': 'Jo√£o Victor Dell Agli Floriano', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 25, 19, 47, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '269c4de1ad06b9509f6ac6f8a98c9f8d4ea9a1af', 'committer_username': 'JoaoDell', 'committer_name': 'Jo√£o Victor Dell Agli Floriano', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 25, 19, 47, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fae89e18b6ed5692921efe31ca3b385191ea5361', 'committer_username': 'JoaoDell', 'committer_name': 'Jo√£o Victor Dell Agli Floriano', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 25, 19, 47, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '39f43b4bfc6dd41b36a840b9cb42ec1c178df757', 'committer_username': 'JoaoDell', 'committer_name': 'Jo√£o Victor Dell Agli Floriano', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 25, 19, 47, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '13687bed9aadd9c3b46405215a85764f9b0c0040', 'committer_username': 'JoaoDell', 'committer_name': 'Jo√£o Victor Dell Agli Floriano', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 25, 19, 47, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6be3ddc7e0c39503715843dc68800d231feb2fd4', 'committer_username': 'JoaoDell', 'committer_name': 'Jo√£o Victor Dell Agli Floriano', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 25, 19, 47, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6dedaec7477cb343804706b378ebf6890d3a1e1c', 'committer_username': 'JoaoDell', 'committer_name': 'Jo√£o Victor Dell Agli Floriano', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 25, 19, 47, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bf1503cc8c151fb7c48aed378a9431b17f0c828e', 'committer_username': 'JoaoDell', 'committer_name': 'Jo√£o Victor Dell Agli Floriano', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 25, 19, 47, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fb024d8cfaed0ddf912d78e51704a633b1e5290f', 'committer_username': 'JoaoDell', 'committer_name': 'Jo√£o Victor Dell Agli Floriano', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 25, 19, 47, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'edd06e80dc7ef441a041dcc2302d71fcad8c026b', 'committer_username': 'JoaoDell', 'committer_name': 'Jo√£o Victor Dell Agli Floriano', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 25, 19, 47, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7ecefeb48977a05a9e1882ed494b89e8cf6c7954', 'committer_username': 'JoaoDell', 'committer_name': 'Jo√£o Victor Dell Agli Floriano', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 25, 19, 47, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '68e520e88b1d592d178a86e771e56e5b593b4edd', 'committer_username': 'JoaoDell', 'committer_name': 'Jo√£o Victor Dell Agli Floriano', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 25, 19, 47, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f0a3d6d70a5aa4cea82c48ad6842fca0028f55a5', 'committer_username': 'JoaoDell', 'committer_name': 'Jo√£o Victor Dell Agli Floriano', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 25, 19, 47, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f35626e6315f5a3562ebdf34744049a7ce680b1a', 'committer_username': 'JoaoDell', 'committer_name': 'Jo√£o Victor Dell Agli Floriano', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 25, 19, 47, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9ad150113149228b8dea7bfb32a8dac3248c9170', 'committer_username': 'JoaoDell', 'committer_name': 'Jo√£o Victor Dell Agli Floriano', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 25, 19, 47, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0ffaf28204607982d716a696e7e45497faa7d8fc', 'committer_username': 'JoaoDell', 'committer_name': 'Jo√£o Victor Dell Agli Floriano', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 25, 19, 47, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '03299b11af9ec0bfad5e8cc7c31093af252ebb68', 'committer_username': 'JoaoDell', 'committer_name': 'Jo√£o Victor Dell Agli Floriano', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 25, 19, 47, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2c1685aeebbbe22917b5e6e41a522ccb3c7716fc', 'committer_username': 'JoaoDell', 'committer_name': 'Jo√£o Victor Dell Agli Floriano', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 25, 19, 47, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '73dfc3fa12bbf936a87d08a1e90eab340e7c4074', 'committer_username': 'JoaoDell', 'committer_name': 'Jo√£o Victor Dell Agli Floriano', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 25, 19, 47, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bacae2eb1cded2bc25fe2b400b1f5ce0982baa49', 'committer_username': 'JoaoDell', 'committer_name': 'Jo√£o Victor Dell Agli Floriano', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 25, 19, 47, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '80acf71454489c58a07c6bff58a2cfaecf40aeae', 'committer_username': 'JoaoDell', 'committer_name': 'Jo√£o Victor Dell Agli Floriano', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 25, 19, 47, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '449095001b0b6e7ef3218592785e72ed79010b09', 'committer_username': 'JoaoDell', 'committer_name': 'Jo√£o Victor Dell Agli Floriano', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 25, 19, 47, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '51ae7a6714839bbe377c4ec1490f491242db61f8', 'committer_username': 'JoaoDell', 'committer_name': 'Jo√£o Victor Dell Agli Floriano', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 25, 19, 47, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e1532970f55997b24d86df462f480a51845ccc81', 'committer_username': 'JoaoDell', 'committer_name': 'Jo√£o Victor Dell Agli Floriano', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 25, 19, 47, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '10bcb90cf0f1a8836b3ed33bd86e6610b64acee1', 'committer_username': 'JoaoDell', 'committer_name': 'Jo√£o Victor Dell Agli Floriano', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 25, 19, 47, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e4612b500ed7a40dac88730458c76ebf6944d865', 'committer_username': 'JoaoDell', 'committer_name': 'Jo√£o Victor Dell Agli Floriano', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 25, 19, 47, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0e475f62ee87ac548bafdc801f346f6872a3e45f', 'committer_username': 'JoaoDell', 'committer_name': 'Jo√£o Victor Dell Agli Floriano', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 25, 19, 47, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '70d911bc758dc18a11254fbacfa2249b15523a6c', 'committer_username': 'JoaoDell', 'committer_name': 'Jo√£o Victor Dell Agli Floriano', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 25, 19, 47, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '734e8e730994803bc05f2c1e781b19c10ecea773', 'committer_username': 'JoaoDell', 'committer_name': 'Jo√£o Victor Dell Agli Floriano', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 25, 19, 47, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1722b2ee2570805523baae64734a2c816f20cdaa', 'committer_username': 'JoaoDell', 'committer_name': 'Jo√£o Victor Dell Agli Floriano', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 25, 19, 47, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c54c97f66f322a55f375b6884bc30b7b62268bf8', 'committer_username': 'devmessias', 'committer_name': 'bruno messias', 'committer_email': 'messias.physics@gmail.com', 'commit_date': datetime.datetime(2014, 3, 17, 19, 39, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3f7d335b876d249524947cf7683d92af5c159457', 'committer_username': 'devmessias', 'committer_name': 'bruno messias', 'committer_email': 'messias.physics@gmail.com', 'commit_date': datetime.datetime(2014, 3, 17, 19, 39, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f996852408339e33fcf3a41f3c591c8129fde3a8', 'committer_username': 'JoaoDell', 'committer_name': 'Jo√£o Victor Dell Agli Floriano', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 25, 19, 47, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'daa810b83a51cc7b1136953b302814bb0361693a', 'committer_username': 'JoaoDell', 'committer_name': 'Jo√£o Victor Dell Agli Floriano', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 25, 19, 47, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f0d855cd5f47951afc189232a9c7ffc98ec5b173', 'committer_username': 'JoaoDell', 'committer_name': 'Jo√£o Victor Dell Agli Floriano', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 25, 19, 47, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '700e0104042ceb2501ec562e93332b385acfc57f', 'committer_username': 'JoaoDell', 'committer_name': 'Jo√£o Victor Dell Agli Floriano', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 25, 19, 47, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f03bd6a52972d9da66180f4349999e9f1682b8b5', 'committer_username': 'JoaoDell', 'committer_name': 'Jo√£o Victor Dell Agli Floriano', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 25, 19, 47, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ac2ce0deffe0f68542219b75593799eaad0f66ba', 'committer_username': 'JoaoDell', 'committer_name': 'Jo√£o Victor Dell Agli Floriano', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 25, 19, 47, 16, tzinfo=datetime.timezone.utc)}]",Jo√£o Victor Dell Agli Floriano,61475630,,User,,15,,31,14
1491076836,[WIP] UI intensity slider for the KDE rendering API,"Hello everyone, this is a draft PR to implement a UI intensity slider for the KDE rendering API. It is a simple slider that controls the intensity of the bandwidths:
![image](https://raw.githubusercontent.com/JoaoDell/gsoc_assets/main/images/slider.gif)
Currently, it is based on the old version of the API and shall be updated to match the current one, but I am already going to open this so it is properly registered. One important thing to say is that, the way it is now, it is for some reason I still don't know, crashing. When I work on it again I am going to investigate it and probably open an issue, so expect updates.",False,849,https://api.github.com/repos/fury-gl/fury/pulls/849,https://github.com/fury-gl/fury/pull/849,open,668,2,13,33,1,0,1,0,[{'name': 'state: work-in-progress'}],2023-08-27 21:21:12+00:00,,0.0,,[],"[{'commit_sha': '35bbb9852524515db7fa6996065200e8d365c8dc', 'committer_username': 'JoaoDell', 'committer_name': 'Jo√£o Victor Dell Agli Floriano', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 25, 19, 47, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ef06af3a5130a6bc2895e7a0ad554e0a2835bf86', 'committer_username': 'JoaoDell', 'committer_name': 'Jo√£o Victor Dell Agli Floriano', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 25, 19, 47, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '110ad6bde018d032ed119d6d0228c6efdfb3d03d', 'committer_username': 'JoaoDell', 'committer_name': 'Jo√£o Victor Dell Agli Floriano', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 25, 19, 47, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a09e26230bb43a2ea5a6f3394f808650a540f8ca', 'committer_username': 'JoaoDell', 'committer_name': 'Jo√£o Victor Dell Agli Floriano', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 25, 19, 47, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bec5f0ee2be2c14fa80dfa27aca48cdeb2eff1c9', 'committer_username': 'JoaoDell', 'committer_name': 'Jo√£o Victor Dell Agli Floriano', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 25, 19, 47, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b572b4bbcd21c2bf3ac59231e4733b6c4f426851', 'committer_username': 'JoaoDell', 'committer_name': 'Jo√£o Victor Dell Agli Floriano', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 25, 19, 47, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '269c4de1ad06b9509f6ac6f8a98c9f8d4ea9a1af', 'committer_username': 'JoaoDell', 'committer_name': 'Jo√£o Victor Dell Agli Floriano', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 25, 19, 47, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fae89e18b6ed5692921efe31ca3b385191ea5361', 'committer_username': 'JoaoDell', 'committer_name': 'Jo√£o Victor Dell Agli Floriano', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 25, 19, 47, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '39f43b4bfc6dd41b36a840b9cb42ec1c178df757', 'committer_username': 'JoaoDell', 'committer_name': 'Jo√£o Victor Dell Agli Floriano', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 25, 19, 47, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '13687bed9aadd9c3b46405215a85764f9b0c0040', 'committer_username': 'JoaoDell', 'committer_name': 'Jo√£o Victor Dell Agli Floriano', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 25, 19, 47, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6be3ddc7e0c39503715843dc68800d231feb2fd4', 'committer_username': 'JoaoDell', 'committer_name': 'Jo√£o Victor Dell Agli Floriano', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 25, 19, 47, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6dedaec7477cb343804706b378ebf6890d3a1e1c', 'committer_username': 'JoaoDell', 'committer_name': 'Jo√£o Victor Dell Agli Floriano', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 25, 19, 47, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bf1503cc8c151fb7c48aed378a9431b17f0c828e', 'committer_username': 'JoaoDell', 'committer_name': 'Jo√£o Victor Dell Agli Floriano', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 25, 19, 47, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fb024d8cfaed0ddf912d78e51704a633b1e5290f', 'committer_username': 'JoaoDell', 'committer_name': 'Jo√£o Victor Dell Agli Floriano', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 25, 19, 47, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'edd06e80dc7ef441a041dcc2302d71fcad8c026b', 'committer_username': 'JoaoDell', 'committer_name': 'Jo√£o Victor Dell Agli Floriano', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 25, 19, 47, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7ecefeb48977a05a9e1882ed494b89e8cf6c7954', 'committer_username': 'JoaoDell', 'committer_name': 'Jo√£o Victor Dell Agli Floriano', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 25, 19, 47, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '68e520e88b1d592d178a86e771e56e5b593b4edd', 'committer_username': 'JoaoDell', 'committer_name': 'Jo√£o Victor Dell Agli Floriano', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 25, 19, 47, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f0a3d6d70a5aa4cea82c48ad6842fca0028f55a5', 'committer_username': 'JoaoDell', 'committer_name': 'Jo√£o Victor Dell Agli Floriano', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 25, 19, 47, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f35626e6315f5a3562ebdf34744049a7ce680b1a', 'committer_username': 'JoaoDell', 'committer_name': 'Jo√£o Victor Dell Agli Floriano', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 25, 19, 47, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9ad150113149228b8dea7bfb32a8dac3248c9170', 'committer_username': 'JoaoDell', 'committer_name': 'Jo√£o Victor Dell Agli Floriano', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 25, 19, 47, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0ffaf28204607982d716a696e7e45497faa7d8fc', 'committer_username': 'JoaoDell', 'committer_name': 'Jo√£o Victor Dell Agli Floriano', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 25, 19, 47, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '03299b11af9ec0bfad5e8cc7c31093af252ebb68', 'committer_username': 'JoaoDell', 'committer_name': 'Jo√£o Victor Dell Agli Floriano', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 25, 19, 47, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bd335f10cc5241d636b022fadb75d61dabe50cb9', 'committer_username': 'JoaoDell', 'committer_name': 'Jo√£o Victor Dell Agli Floriano', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 25, 19, 47, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a173dfd22f44716263149f463c0ed75c45434c0c', 'committer_username': 'JoaoDell', 'committer_name': 'Jo√£o Victor Dell Agli Floriano', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 25, 19, 47, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '25921c366430c912100feacf075d648adbfe079d', 'committer_username': 'JoaoDell', 'committer_name': 'Jo√£o Victor Dell Agli Floriano', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 25, 19, 47, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2d72b48d43da5ec40bf3ee52c1eb21c0b08b668f', 'committer_username': 'JoaoDell', 'committer_name': 'Jo√£o Victor Dell Agli Floriano', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 25, 19, 47, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '90069bfb7c53be98a02e52cdedde71dc53c7202e', 'committer_username': 'JoaoDell', 'committer_name': 'Jo√£o Victor Dell Agli Floriano', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 25, 19, 47, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '18bda117a21c887718f6933bc8d6b618ff7f0b3c', 'committer_username': 'JoaoDell', 'committer_name': 'Jo√£o Victor Dell Agli Floriano', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 25, 19, 47, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6ff0f0b409ff8d797e5dd4a8f1a0b798479e740d', 'committer_username': 'JoaoDell', 'committer_name': 'Jo√£o Victor Dell Agli Floriano', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 25, 19, 47, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ca2e1e3ab9546ef346232dc06d237bf978f5665e', 'committer_username': 'JoaoDell', 'committer_name': 'Jo√£o Victor Dell Agli Floriano', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 25, 19, 47, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '82fbbb22d111d1a8c208c93062ba86f8a3dda650', 'committer_username': 'JoaoDell', 'committer_name': 'Jo√£o Victor Dell Agli Floriano', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 25, 19, 47, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '071b3b5b0894fadcc79c2c51237221669c8243c4', 'committer_username': 'JoaoDell', 'committer_name': 'Jo√£o Victor Dell Agli Floriano', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 25, 19, 47, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1c4c52cb87a8d204a85e2ca7ee17a0d1d46a0014', 'committer_username': 'JoaoDell', 'committer_name': 'Jo√£o Victor Dell Agli Floriano', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 25, 19, 47, 16, tzinfo=datetime.timezone.utc)}]",Jo√£o Victor Dell Agli Floriano,61475630,,User,,15,,31,14
1491088165,[WIP] Post-processing effects for FURY Effects API,"Hello, this is a draft PR that aims to implement some other post-processing effects to the FURY Effects API. Currently, this is basedon the old API version and shall be updated as soon as I have the time to do it, but I have decided to create this draft PR anyway to keep track of the work and keep everyone updated. 

The current effects this PR introduces are:
* Gaussian Blur
* Laplacian 
* Grayscale

![image](https://github.com/fury-gl/fury/assets/61475630/17f1a5ff-2cab-4700-acb5-112c7fb4f2ab)
",False,850,https://api.github.com/repos/fury-gl/fury/pulls/850,https://github.com/fury-gl/fury/pull/850,open,578,2,5,34,1,0,0,0,[],2023-08-27 22:18:47+00:00,,0.0,,[],"[{'commit_sha': '35bbb9852524515db7fa6996065200e8d365c8dc', 'committer_username': 'JoaoDell', 'committer_name': 'Jo√£o Victor Dell Agli Floriano', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 25, 19, 47, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ef06af3a5130a6bc2895e7a0ad554e0a2835bf86', 'committer_username': 'JoaoDell', 'committer_name': 'Jo√£o Victor Dell Agli Floriano', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 25, 19, 47, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '110ad6bde018d032ed119d6d0228c6efdfb3d03d', 'committer_username': 'JoaoDell', 'committer_name': 'Jo√£o Victor Dell Agli Floriano', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 25, 19, 47, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a09e26230bb43a2ea5a6f3394f808650a540f8ca', 'committer_username': 'JoaoDell', 'committer_name': 'Jo√£o Victor Dell Agli Floriano', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 25, 19, 47, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bec5f0ee2be2c14fa80dfa27aca48cdeb2eff1c9', 'committer_username': 'JoaoDell', 'committer_name': 'Jo√£o Victor Dell Agli Floriano', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 25, 19, 47, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b572b4bbcd21c2bf3ac59231e4733b6c4f426851', 'committer_username': 'JoaoDell', 'committer_name': 'Jo√£o Victor Dell Agli Floriano', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 25, 19, 47, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '269c4de1ad06b9509f6ac6f8a98c9f8d4ea9a1af', 'committer_username': 'JoaoDell', 'committer_name': 'Jo√£o Victor Dell Agli Floriano', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 25, 19, 47, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fae89e18b6ed5692921efe31ca3b385191ea5361', 'committer_username': 'JoaoDell', 'committer_name': 'Jo√£o Victor Dell Agli Floriano', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 25, 19, 47, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '39f43b4bfc6dd41b36a840b9cb42ec1c178df757', 'committer_username': 'JoaoDell', 'committer_name': 'Jo√£o Victor Dell Agli Floriano', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 25, 19, 47, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '13687bed9aadd9c3b46405215a85764f9b0c0040', 'committer_username': 'JoaoDell', 'committer_name': 'Jo√£o Victor Dell Agli Floriano', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 25, 19, 47, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6be3ddc7e0c39503715843dc68800d231feb2fd4', 'committer_username': 'JoaoDell', 'committer_name': 'Jo√£o Victor Dell Agli Floriano', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 25, 19, 47, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6dedaec7477cb343804706b378ebf6890d3a1e1c', 'committer_username': 'JoaoDell', 'committer_name': 'Jo√£o Victor Dell Agli Floriano', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 25, 19, 47, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bf1503cc8c151fb7c48aed378a9431b17f0c828e', 'committer_username': 'JoaoDell', 'committer_name': 'Jo√£o Victor Dell Agli Floriano', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 25, 19, 47, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fb024d8cfaed0ddf912d78e51704a633b1e5290f', 'committer_username': 'JoaoDell', 'committer_name': 'Jo√£o Victor Dell Agli Floriano', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 25, 19, 47, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'edd06e80dc7ef441a041dcc2302d71fcad8c026b', 'committer_username': 'JoaoDell', 'committer_name': 'Jo√£o Victor Dell Agli Floriano', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 25, 19, 47, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7ecefeb48977a05a9e1882ed494b89e8cf6c7954', 'committer_username': 'JoaoDell', 'committer_name': 'Jo√£o Victor Dell Agli Floriano', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 25, 19, 47, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '68e520e88b1d592d178a86e771e56e5b593b4edd', 'committer_username': 'JoaoDell', 'committer_name': 'Jo√£o Victor Dell Agli Floriano', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 25, 19, 47, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f0a3d6d70a5aa4cea82c48ad6842fca0028f55a5', 'committer_username': 'JoaoDell', 'committer_name': 'Jo√£o Victor Dell Agli Floriano', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 25, 19, 47, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f35626e6315f5a3562ebdf34744049a7ce680b1a', 'committer_username': 'JoaoDell', 'committer_name': 'Jo√£o Victor Dell Agli Floriano', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 25, 19, 47, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9ad150113149228b8dea7bfb32a8dac3248c9170', 'committer_username': 'JoaoDell', 'committer_name': 'Jo√£o Victor Dell Agli Floriano', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 25, 19, 47, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0ffaf28204607982d716a696e7e45497faa7d8fc', 'committer_username': 'JoaoDell', 'committer_name': 'Jo√£o Victor Dell Agli Floriano', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 25, 19, 47, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '03299b11af9ec0bfad5e8cc7c31093af252ebb68', 'committer_username': 'JoaoDell', 'committer_name': 'Jo√£o Victor Dell Agli Floriano', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 25, 19, 47, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bd335f10cc5241d636b022fadb75d61dabe50cb9', 'committer_username': 'JoaoDell', 'committer_name': 'Jo√£o Victor Dell Agli Floriano', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 25, 19, 47, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a173dfd22f44716263149f463c0ed75c45434c0c', 'committer_username': 'JoaoDell', 'committer_name': 'Jo√£o Victor Dell Agli Floriano', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 25, 19, 47, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '25921c366430c912100feacf075d648adbfe079d', 'committer_username': 'JoaoDell', 'committer_name': 'Jo√£o Victor Dell Agli Floriano', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 25, 19, 47, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2d72b48d43da5ec40bf3ee52c1eb21c0b08b668f', 'committer_username': 'JoaoDell', 'committer_name': 'Jo√£o Victor Dell Agli Floriano', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 25, 19, 47, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '90069bfb7c53be98a02e52cdedde71dc53c7202e', 'committer_username': 'JoaoDell', 'committer_name': 'Jo√£o Victor Dell Agli Floriano', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 25, 19, 47, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '18bda117a21c887718f6933bc8d6b618ff7f0b3c', 'committer_username': 'JoaoDell', 'committer_name': 'Jo√£o Victor Dell Agli Floriano', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 25, 19, 47, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6ff0f0b409ff8d797e5dd4a8f1a0b798479e740d', 'committer_username': 'JoaoDell', 'committer_name': 'Jo√£o Victor Dell Agli Floriano', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 25, 19, 47, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ca2e1e3ab9546ef346232dc06d237bf978f5665e', 'committer_username': 'JoaoDell', 'committer_name': 'Jo√£o Victor Dell Agli Floriano', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 25, 19, 47, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '82fbbb22d111d1a8c208c93062ba86f8a3dda650', 'committer_username': 'JoaoDell', 'committer_name': 'Jo√£o Victor Dell Agli Floriano', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 25, 19, 47, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '071b3b5b0894fadcc79c2c51237221669c8243c4', 'committer_username': 'JoaoDell', 'committer_name': 'Jo√£o Victor Dell Agli Floriano', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 25, 19, 47, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a1f9eed4c4a60c6d63c9fc6a0f3e415fa075c546', 'committer_username': 'JoaoDell', 'committer_name': 'Jo√£o Victor Dell Agli Floriano', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 25, 19, 47, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e738df7bec7ca678fb08d0eb321a621e7d51062e', 'committer_username': 'JoaoDell', 'committer_name': 'Jo√£o Victor Dell Agli Floriano', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 25, 19, 47, 16, tzinfo=datetime.timezone.utc)}]",Jo√£o Victor Dell Agli Floriano,61475630,,User,,15,,31,14

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
149529946,fury,fury-gl/fury,Python,164,229,20,88,5475,137,11,56,"[{'id': 1491088165, 'number': 850, 'closed': None, 'created': datetime.datetime(2023, 8, 27, 22, 18, 47, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 578, 'deletions': 2, 'state': 'open'}, {'id': 1491076836, 'number': 849, 'closed': None, 'created': datetime.datetime(2023, 8, 27, 21, 21, 12, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 668, 'deletions': 2, 'state': 'open'}, {'id': 1488408609, 'number': 845, 'closed': datetime.datetime(2024, 2, 23, 17, 42, 24, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 8, 24, 17, 8, 59, tzinfo=datetime.timezone.utc), 'time_taken': 15813205.0, 'time_delta': '183 days, 0:33:25', 'additions': 360, 'deletions': 0, 'state': 'closed'}, {'id': 1487153779, 'number': 844, 'closed': datetime.datetime(2023, 8, 29, 16, 55, 8, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 8, 23, 23, 31, 41, tzinfo=datetime.timezone.utc), 'time_taken': 494607.0, 'time_delta': '5 days, 17:23:27', 'additions': 39, 'deletions': 0, 'state': 'closed'}, {'id': 1480758580, 'number': 842, 'closed': datetime.datetime(2023, 8, 29, 16, 47, 23, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 8, 18, 15, 35, 8, tzinfo=datetime.timezone.utc), 'time_taken': 954735.0, 'time_delta': '11 days, 1:12:15', 'additions': 86, 'deletions': 0, 'state': 'closed'}, {'id': 1470416368, 'number': 836, 'closed': datetime.datetime(2023, 8, 11, 13, 36, 27, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 8, 10, 14, 5, 22, tzinfo=datetime.timezone.utc), 'time_taken': 84665.0, 'time_delta': '23:31:05', 'additions': 37, 'deletions': 0, 'state': 'closed'}, {'id': 1460415011, 'number': 831, 'closed': datetime.datetime(2023, 8, 11, 13, 47, 40, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 8, 2, 20, 45, 41, tzinfo=datetime.timezone.utc), 'time_taken': 752519.0, 'time_delta': '8 days, 17:01:59', 'additions': 116, 'deletions': 0, 'state': 'closed'}, {'id': 1447293574, 'number': 828, 'closed': datetime.datetime(2023, 7, 30, 18, 33, 16, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 7, 24, 20, 2, 39, tzinfo=datetime.timezone.utc), 'time_taken': 513037.0, 'time_delta': '5 days, 22:30:37', 'additions': 127, 'deletions': 0, 'state': 'closed'}, {'id': 1441796332, 'number': 826, 'closed': None, 'created': datetime.datetime(2023, 7, 19, 22, 0, 22, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 1091, 'deletions': 3, 'state': 'open'}, {'id': 1441762880, 'number': 825, 'closed': datetime.datetime(2023, 7, 19, 21, 44, 58, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 7, 19, 21, 25, 3, tzinfo=datetime.timezone.utc), 'time_taken': 1195.0, 'time_delta': '0:19:55', 'additions': 717, 'deletions': 0, 'state': 'closed'}, {'id': 1441755894, 'number': 824, 'closed': datetime.datetime(2023, 7, 19, 21, 23, 26, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 7, 19, 21, 18, 55, tzinfo=datetime.timezone.utc), 'time_taken': 271.0, 'time_delta': '0:04:31', 'additions': 717, 'deletions': 0, 'state': 'closed'}, {'id': 1439748640, 'number': 822, 'closed': datetime.datetime(2023, 7, 26, 17, 17, 18, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 7, 18, 18, 37, tzinfo=datetime.timezone.utc), 'time_taken': 686418.0, 'time_delta': '7 days, 22:40:18', 'additions': 65, 'deletions': 0, 'state': 'closed'}, {'id': 1427988955, 'number': 819, 'closed': datetime.datetime(2023, 7, 19, 14, 8, 15, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 7, 10, 18, 30, 47, tzinfo=datetime.timezone.utc), 'time_taken': 761848.0, 'time_delta': '8 days, 19:37:28', 'additions': 63, 'deletions': 0, 'state': 'closed'}, {'id': 1420126212, 'number': 815, 'closed': datetime.datetime(2023, 7, 19, 14, 3, 12, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 7, 4, 20, 39, 28, tzinfo=datetime.timezone.utc), 'time_taken': 1272224.0, 'time_delta': '14 days, 17:23:44', 'additions': 77, 'deletions': 0, 'state': 'closed'}, {'id': 1408713487, 'number': 809, 'closed': datetime.datetime(2023, 6, 30, 16, 14, 13, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 6, 26, 21, 9, 20, tzinfo=datetime.timezone.utc), 'time_taken': 327893.0, 'time_delta': '3 days, 19:04:53', 'additions': 60, 'deletions': 0, 'state': 'closed'}, {'id': 1402115660, 'number': 806, 'closed': datetime.datetime(2023, 6, 23, 14, 6, 18, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 6, 21, 17, 18, 43, tzinfo=datetime.timezone.utc), 'time_taken': 161255.0, 'time_delta': '1 day, 20:47:35', 'additions': 40, 'deletions': 0, 'state': 'closed'}, {'id': 1394860647, 'number': 804, 'closed': None, 'created': datetime.datetime(2023, 6, 15, 23, 7, 47, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 278, 'deletions': 0, 'state': 'open'}, {'id': 1392930146, 'number': 800, 'closed': datetime.datetime(2023, 6, 19, 19, 6, 20, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 6, 14, 19, 2, 38, tzinfo=datetime.timezone.utc), 'time_taken': 432222.0, 'time_delta': '5 days, 0:03:42', 'additions': 86, 'deletions': 0, 'state': 'closed'}, {'id': 1384961040, 'number': 797, 'closed': datetime.datetime(2023, 6, 12, 15, 15, 32, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 6, 8, 18, 50, 28, tzinfo=datetime.timezone.utc), 'time_taken': 332704.0, 'time_delta': '3 days, 20:25:04', 'additions': 61, 'deletions': 0, 'state': 'closed'}, {'id': 1382622023, 'number': 792, 'closed': datetime.datetime(2023, 6, 9, 15, 22, 15, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 6, 7, 12, 54, 15, tzinfo=datetime.timezone.utc), 'time_taken': 181680.0, 'time_delta': '2 days, 2:28:00', 'additions': 35, 'deletions': 0, 'state': 'closed'}, {'id': 1314489891, 'number': 783, 'closed': None, 'created': datetime.datetime(2023, 4, 14, 17, 47, 47, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 2043, 'deletions': 0, 'state': 'open'}]"
