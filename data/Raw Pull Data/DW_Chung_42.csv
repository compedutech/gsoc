pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
1486163180,"Add push, publish workflows","Adding the push and publish workflows for this project. Marked as draft, as I would like to shift the CIBW commands back to the pyproject.toml file to cut down on code duplication, but also because the PyPI details need to be finalized as well (ie. user & secret).",True,23,https://api.github.com/repos/gis-ops/py-osrm/pulls/23,https://github.com/gis-ops/py-osrm/pull/23,closed,489,265,23,16,5,8,0,0,[],2023-08-23 10:23:25+00:00,2023-08-28 06:36:22+00:00,418377.0,"4 days, 20:12:57","[{'comment_id': 1303860481, 'comment_body': '```suggestion\r\n        password: ${{ secrets.PYPI_SECRET }}\r\n```', 'comment_created': datetime.datetime(2023, 8, 24, 6, 29, 57, tzinfo=datetime.timezone.utc), 'commenter': 'nilsnolde', 'type': 'User'}, {'comment_id': 1303862900, 'comment_body': '```suggestion\r\n        password: ${{ secrets.PYPI_SECRET }}\r\n```', 'comment_created': datetime.datetime(2023, 8, 24, 6, 32, 55, tzinfo=datetime.timezone.utc), 'commenter': 'nilsnolde', 'type': 'User'}, {'comment_id': 1306695968, 'comment_body': '```suggestion\r\n    sys.exit(1)\r\n```', 'comment_created': datetime.datetime(2023, 8, 27, 17, 10, 34, tzinfo=datetime.timezone.utc), 'commenter': 'nilsnolde', 'type': 'User'}, {'comment_id': 1306697167, 'comment_body': 'It\'d be better to use smth that can capture stdout & stderr, e.g.\r\n\r\n```suggestion\r\n# will stream any output to the shell\r\n# shell=True is safe here and lets people use ""~"" in paths etc\r\nproc = subprocess.run(args, encoding=""utf-8"", capture_output=True, shell=True)\r\nsys.exit(proc.returncode)\r\n```', 'comment_created': datetime.datetime(2023, 8, 27, 17, 22, 21, tzinfo=datetime.timezone.utc), 'commenter': 'nilsnolde', 'type': 'User'}, {'comment_id': 1307143561, 'comment_body': ""After testing this, I wasn't able to get `subprocess.run` to work properly. `capture_output=True` results in no output, and disabling that causes it the executables to not work for me. Did we miss something here?"", 'comment_created': datetime.datetime(2023, 8, 28, 8, 52, 53, tzinfo=datetime.timezone.utc), 'commenter': 'whytro', 'type': 'User'}, {'comment_id': 1307176743, 'comment_body': ""If I try other commands it works. But I think you're right, capture_output should be False, only then it streams to stdout/err (misunderstood the docs there) and one gotcha is, with `shell=True` you'll need to pass one string, not a list of strings, as command. You can directly edit the sources in your installation tree, since this is only python, and try if that makes it work."", 'comment_created': datetime.datetime(2023, 8, 28, 9, 23, 7, tzinfo=datetime.timezone.utc), 'commenter': 'nilsnolde', 'type': 'User'}, {'comment_id': 1307177320, 'comment_body': 'if capture_output=True, stdout/err are only available in `proc.stdout/err` it seems', 'comment_created': datetime.datetime(2023, 8, 28, 9, 23, 44, tzinfo=datetime.timezone.utc), 'commenter': 'nilsnolde', 'type': 'User'}, {'comment_id': 1307231683, 'comment_body': ""> If I try other commands it works. But I think you're right, capture_output should be False, only then it streams to stdout/err (misunderstood the docs there) and one gotcha is, with `shell=True` you'll need to pass one string, not a list of strings, as command. You can directly edit the sources in your installation tree, since this is only python, and try if that makes it work.\r\n\r\nOh, in that case, I can add a change to it to work as a single string rather than an array."", 'comment_created': datetime.datetime(2023, 8, 28, 10, 14, 9, tzinfo=datetime.timezone.utc), 'commenter': 'whytro', 'type': 'User'}]","[{'commit_sha': '40535e198b067d392ac4752d6052ffa2285f6987', 'committer_username': 'whytro', 'committer_name': 'Whytro', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 12, 17, 19, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'da29f41c6c2b90f1595abdea6aa2c58577e1ccc2', 'committer_username': 'whytro', 'committer_name': 'Whytro', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 12, 17, 19, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '698867af941a31aaf8533ec1daed07c153220cdf', 'committer_username': 'whytro', 'committer_name': 'Whytro', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 12, 17, 19, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '42edc394378fb85ed1e9d70356b35ddc10d7bc0f', 'committer_username': 'whytro', 'committer_name': 'Whytro', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 12, 17, 19, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '913c12437e7b9302c3cc4b30613c1e71aaae686d', 'committer_username': 'whytro', 'committer_name': 'Whytro', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 12, 17, 19, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '760516fc978a33ecdb0d43764036845023408d37', 'committer_username': 'whytro', 'committer_name': 'Whytro', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 12, 17, 19, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '02554908e6f8102b25bcb5553421cf280273a6aa', 'committer_username': 'whytro', 'committer_name': 'Whytro', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 12, 17, 19, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cd23d2e48c28b314388fa75d994998a0f7db5a1f', 'committer_username': 'whytro', 'committer_name': 'Whytro', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 12, 17, 19, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9b68de1d21e7aab1db9b6abb45a7d128c1fe86f2', 'committer_username': 'whytro', 'committer_name': 'Whytro', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 12, 17, 19, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '06cf081d0d37fcd52d53c24c073cea1cfe0f5567', 'committer_username': 'whytro', 'committer_name': 'Whytro', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 12, 17, 19, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '77972179c611cb8a2b737659ae9e0b8ae4322be1', 'committer_username': 'whytro', 'committer_name': 'Whytro', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 12, 17, 19, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9e914b47f755c8b20fd444b614696bed10d9c9ef', 'committer_username': 'whytro', 'committer_name': 'Whytro', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 12, 17, 19, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ed6a19d6e2435da94ed7d6feadcf8df18bb04846', 'committer_username': 'whytro', 'committer_name': 'Whytro', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 12, 17, 19, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '70c94c94fd9fc6dc07cc964c30b834f66c0232e4', 'committer_username': 'whytro', 'committer_name': 'Whytro', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 12, 17, 19, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '25de456572b2ce80d162677ca4b23427e895def7', 'committer_username': 'whytro', 'committer_name': 'Whytro', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 12, 17, 19, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2a7f46176bcc5a5ba8d89c578b29a156dd16b679', 'committer_username': 'whytro', 'committer_name': 'Whytro', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 12, 17, 19, 45, tzinfo=datetime.timezone.utc)}]",Whytro,20995911,,User,,5,,0,1
1485712271,Add CMakeLists adjustments,"Added the build type default recommended per nanobind documentation, but also added additional includes for the FetchContent branch, as it would not properly link/compile due to missing third party headers.",True,21,https://api.github.com/repos/gis-ops/py-osrm/pulls/21,https://github.com/gis-ops/py-osrm/pull/21,closed,7,1,1,1,0,0,0,0,[],2023-08-23 04:01:28+00:00,2023-08-23 08:14:20+00:00,15172.0,4:12:52,[],"[{'commit_sha': 'b51ed491891f960d91f2d532df5c6f5ff557b215', 'committer_username': 'whytro', 'committer_name': 'Whytro', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 12, 17, 19, 45, tzinfo=datetime.timezone.utc)}]",Whytro,20995911,,User,,5,,0,1
1482107304,Adjust MacOS CI Workflow,Adjusted MacOS CI since there was an issue where a difference between CMake versions on the `osrm-backend.yml` runner and the `pull_request.yml` runner was causing the build to fail sporadically. This should also be faster and leaner compared to the old `make install` on target approach.,True,19,https://api.github.com/repos/gis-ops/py-osrm/pulls/19,https://github.com/gis-ops/py-osrm/pull/19,closed,20,11,2,1,0,0,0,0,[],2023-08-21 03:26:55+00:00,2023-08-22 06:40:40+00:00,98025.0,"1 day, 3:13:45",[],"[{'commit_sha': 'd7f37d75f7687cc5241ead8d6e8d0e167c861b8e', 'committer_username': 'whytro', 'committer_name': 'Whytro', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 12, 17, 19, 45, tzinfo=datetime.timezone.utc)}]",Whytro,20995911,,User,,5,,0,1
1465105620,Add osrm-backend workflow,Add osrm-backend workflow to build osrm-backend as an artifact for the MacOS workflow. ,True,15,https://api.github.com/repos/gis-ops/py-osrm/pulls/15,https://github.com/gis-ops/py-osrm/pull/15,closed,47,0,1,1,0,0,0,0,[],2023-08-07 11:55:25+00:00,2023-08-07 11:59:20+00:00,235.0,0:03:55,[],"[{'commit_sha': '144b330895e686ff8dde2dd5fa33a926c955cc49', 'committer_username': 'whytro', 'committer_name': 'Whytro', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 12, 17, 19, 45, tzinfo=datetime.timezone.utc)}]",Whytro,20995911,,User,,5,,0,1
1463678018,Add MacOS support to cibuildwheels,"I've shifted the cibuildwheel configuration from the pyproject.toml to the workflow files, to take advantage of GHA's feature to view the Workflow file that was run.

I've also had to take care of some code issues (ie. missing includes) that prevented compilation on MacOS, though I will take a closer look at the code soon - to make sure there aren't any more missing includes, or formatting issues.

Currently, the time to run the osrm-backend workflow is around 7-9 minutes, while the time to build the MacOS wheels seems to be around 8-9 minutes. Without separation, its about 12 minutes. There is maybe room for more optimization here, since most of the time seems to be sunk into installing the dependencies like `brew install lua tbb boost@1.76`, but I wonder if it is faster/feasible to pack those into the artifact.",True,13,https://api.github.com/repos/gis-ops/py-osrm/pulls/13,https://github.com/gis-ops/py-osrm/pull/13,closed,100,53,7,6,3,6,0,0,[],2023-08-05 05:45:25+00:00,2023-08-07 12:46:20+00:00,198055.0,"2 days, 7:00:55","[{'comment_id': 1285428939, 'comment_body': 'is there a reason why we pin boost to 1.76?', 'comment_created': datetime.datetime(2023, 8, 7, 6, 29, 36, tzinfo=datetime.timezone.utc), 'commenter': 'nilsnolde', 'type': 'User'}, {'comment_id': 1285431309, 'comment_body': ""I think so, AFAIR there is a bug in the latest boost which doesn't allow OSRM to build."", 'comment_created': datetime.datetime(2023, 8, 7, 6, 33, 5, tzinfo=datetime.timezone.utc), 'commenter': 'SiarheiFedartsou', 'type': 'User'}, {'comment_id': 1285437641, 'comment_body': 'setting `HOMEBREW_NO_AUTO_UPDATE=1` can potentially speed it up', 'comment_created': datetime.datetime(2023, 8, 7, 6, 41, 42, tzinfo=datetime.timezone.utc), 'commenter': 'SiarheiFedartsou', 'type': 'User'}, {'comment_id': 1285443421, 'comment_body': ""let's just build the lowest python version, python3.8"", 'comment_created': datetime.datetime(2023, 8, 7, 6, 47, 27, tzinfo=datetime.timezone.utc), 'commenter': 'nilsnolde', 'type': 'User'}, {'comment_id': 1285462961, 'comment_body': 'we should pin osrm to the most recent tag/release', 'comment_created': datetime.datetime(2023, 8, 7, 7, 9, 19, tzinfo=datetime.timezone.utc), 'commenter': 'nilsnolde', 'type': 'User'}, {'comment_id': 1285507766, 'comment_body': ""Can confirm. After checking again, I remembered that there was a duplicate symbols issue that I encountered previously on latest, and brew didn't have 1.79 - hence the 1.76 pin."", 'comment_created': datetime.datetime(2023, 8, 7, 7, 49, 36, tzinfo=datetime.timezone.utc), 'commenter': 'whytro', 'type': 'User'}]","[{'commit_sha': 'a1b7658eb6bc9ae3b4f3277ba5c0456c741cbee0', 'committer_username': 'whytro', 'committer_name': 'Whytro', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 12, 17, 19, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4d78fe1b593ffd76ad2ae4a660f8835be8d1f1e3', 'committer_username': 'whytro', 'committer_name': 'Whytro', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 12, 17, 19, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b02b0908a72c9485ee3456ddfb4054e04c2ded88', 'committer_username': 'whytro', 'committer_name': 'Whytro', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 12, 17, 19, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '00d7d5deac0d7705358a8ae865d9bec3d08897f7', 'committer_username': 'whytro', 'committer_name': 'Whytro', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 12, 17, 19, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c0ede2a369bf2a787e34695bd902ac49c5864856', 'committer_username': 'whytro', 'committer_name': 'Whytro', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 12, 17, 19, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0efdd699980e0308ffe25eaf0eff5d8d345916a5', 'committer_username': 'whytro', 'committer_name': 'Whytro', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 12, 17, 19, 45, tzinfo=datetime.timezone.utc)}]",Whytro,20995911,,User,,5,,0,1
1455111051,Add cibuildwheels support,"Added rudimentary cibuildwheels support, using a modified `manylinux` from [here](https://github.com/gis-ops/manylinux/tree/py-osrm). 
The main changes made in this version of `manylinux` is [installing boost](https://github.com/pypa/manylinux/compare/main...gis-ops:manylinux:py-osrm#diff-6e80fedc6095017a37ae0db6fbc71b259e15e5972bb8aa810877344dd666b79b) so CI runs can be sped up without having to build boost every time.
Relevant to #10 (GHA workflow(s) for Linux).",True,12,https://api.github.com/repos/gis-ops/py-osrm/pulls/12,https://github.com/gis-ops/py-osrm/pull/12,closed,133,27,5,4,1,13,0,0,[],2023-07-30 11:18:16+00:00,2023-07-31 16:17:06+00:00,104330.0,"1 day, 4:58:50","[{'comment_id': 1278584423, 'comment_body': ""I'd only do PR for now. If you do `push` as well, it'd run twice I think for every push on a PR. Eventually we'll have a workflow for `push` as well, but only to `master` (i.e. PR merges or hot fixes)."", 'comment_created': datetime.datetime(2023, 7, 30, 15, 42, 49, tzinfo=datetime.timezone.utc), 'commenter': 'nilsnolde', 'type': 'User'}, {'comment_id': 1278584592, 'comment_body': ""I'd do `ubuntu-latest`, AFAIK they only use stable versions, i.e. next one will be 24.04"", 'comment_created': datetime.datetime(2023, 7, 30, 15, 45, 4, tzinfo=datetime.timezone.utc), 'commenter': 'nilsnolde', 'type': 'User'}, {'comment_id': 1278584635, 'comment_body': 'and then here we can call it `PR - cp*, linux`', 'comment_created': datetime.datetime(2023, 7, 30, 15, 45, 41, tzinfo=datetime.timezone.utc), 'commenter': 'nilsnolde', 'type': 'User'}, {'comment_id': 1278584974, 'comment_body': 'the whole `before-all`  should be done in the `manylinux` image no?', 'comment_created': datetime.datetime(2023, 7, 30, 15, 48, 48, tzinfo=datetime.timezone.utc), 'commenter': 'nilsnolde', 'type': 'User'}, {'comment_id': 1278585182, 'comment_body': ""let's open that up before merging to `cp-*`"", 'comment_created': datetime.datetime(2023, 7, 30, 15, 50, 54, tzinfo=datetime.timezone.utc), 'commenter': 'nilsnolde', 'type': 'User'}, {'comment_id': 1278587061, 'comment_body': 'what was the issue with lua again? on the manylinux image with almalinux 8 we should have 5.3.4. available, is that not compatible with osrm?', 'comment_created': datetime.datetime(2023, 7, 30, 16, 8, 26, tzinfo=datetime.timezone.utc), 'commenter': 'nilsnolde', 'type': 'User'}, {'comment_id': 1278595446, 'comment_body': 'For some reason, the default `lua-devel` from dnf seems to cause an error with sol, on [this line](https://github.com/Project-OSRM/osrm-backend/blob/3bb82ce1e2fd2299712b96176e651e6f7e999aae/third_party/sol2-3.3.0/include/sol/sol.hpp#L3110) if I recall correctly. ', 'comment_created': datetime.datetime(2023, 7, 30, 17, 31, 8, tzinfo=datetime.timezone.utc), 'commenter': 'whytro', 'type': 'User'}, {'comment_id': 1278595955, 'comment_body': 'I tried to minimize the amount of dependencies done on the `manylinux` side because I thought it might make it more convenient to maneuver around when `osrm-backend` changes in the future. \r\nBut I suppose having `manylinux` build on `osrm-backend` push might take care of that anyways!', 'comment_created': datetime.datetime(2023, 7, 30, 17, 36, 17, tzinfo=datetime.timezone.utc), 'commenter': 'whytro', 'type': 'User'}, {'comment_id': 1278831192, 'comment_body': 'Yeah we can leave OSRM in here for now, but def we should install the dependencies inside the image.', 'comment_created': datetime.datetime(2023, 7, 31, 6, 14, 4, tzinfo=datetime.timezone.utc), 'commenter': 'nilsnolde', 'type': 'User'}, {'comment_id': 1278845489, 'comment_body': 'nit. should be a bit faster\r\n```suggestion\r\n        git clone https://github.com/Project-OSRM/osrm-backend.git --recursive --depth 1 &&\r\n```', 'comment_created': datetime.datetime(2023, 7, 31, 6, 35, tzinfo=datetime.timezone.utc), 'commenter': 'SiarheiFedartsou', 'type': 'User'}, {'comment_id': 1279198860, 'comment_body': ""I ended up moving osrm-backend over to the `manylinux` side entirely, since with Conan, the only thing that would've been left over there is the TBB install - and because as discussed, osrm-backend won't change too frequently."", 'comment_created': datetime.datetime(2023, 7, 31, 12, 5, 51, tzinfo=datetime.timezone.utc), 'commenter': 'whytro', 'type': 'User'}, {'comment_id': 1279200716, 'comment_body': 'This suggested change did result in a noticeable speedup actually! I made sure to implement this change when moving the `before-all` code block over to the `manylinux` section.', 'comment_created': datetime.datetime(2023, 7, 31, 12, 7, 46, tzinfo=datetime.timezone.utc), 'commenter': 'whytro', 'type': 'User'}, {'comment_id': 1279548330, 'comment_body': 'Great :)', 'comment_created': datetime.datetime(2023, 7, 31, 16, 13, 50, tzinfo=datetime.timezone.utc), 'commenter': 'nilsnolde', 'type': 'User'}]","[{'commit_sha': 'ba8796b14398f7e4b5b64bdfc6f87eba007be5c5', 'committer_username': 'whytro', 'committer_name': 'Whytro', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 12, 17, 19, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3e026b002659cc803fd65e31229006a33b55adad', 'committer_username': 'whytro', 'committer_name': 'Whytro', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 12, 17, 19, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '692086fadd49d0d869034bcabf27fc01a3e9acce', 'committer_username': 'whytro', 'committer_name': 'Whytro', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 12, 17, 19, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'abdc90b6216dc8bcd0fd4b5fbe9576eded77f91a', 'committer_username': 'whytro', 'committer_name': 'Whytro', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 12, 17, 19, 45, tzinfo=datetime.timezone.utc)}]",Whytro,20995911,,User,,5,,0,1
1435780736,"Add tests, usability adjustments and test data","Added the bulk of tests, with reference to the OSRM NodeJS tests. In addition, precompiled test data has been added for now, to run the tests off of. Some changes have also been made to improve usability (intuitiveness) of the code.",True,9,https://api.github.com/repos/gis-ops/py-osrm/pulls/9,https://github.com/gis-ops/py-osrm/pull/9,closed,3229,449,149,11,5,13,0,0,[],2023-07-15 09:27:32+00:00,2023-07-18 09:14:57+00:00,258445.0,"2 days, 23:47:25","[{'comment_id': 1266281888, 'comment_body': ""you should be able to set that while configuring the project, I'd recommend `RelWithDebInfo` instead of `Debug`"", 'comment_created': datetime.datetime(2023, 7, 18, 6, 16, 52, tzinfo=datetime.timezone.utc), 'commenter': 'nilsnolde', 'type': 'User'}, {'comment_id': 1266282881, 'comment_body': 'Seems with `-C` for the build command: https://github.com/scikit-build/scikit-build-core#configuration', 'comment_created': datetime.datetime(2023, 7, 18, 6, 18, 11, tzinfo=datetime.timezone.utc), 'commenter': 'nilsnolde', 'type': 'User'}, {'comment_id': 1266284424, 'comment_body': 'this is VERY nice for users, good idea!', 'comment_created': datetime.datetime(2023, 7, 18, 6, 20, 11, tzinfo=datetime.timezone.utc), 'commenter': 'nilsnolde', 'type': 'User'}, {'comment_id': 1266293778, 'comment_body': ""did you try these again? if they currently don't work, let's shelve it for after the GHA workflow"", 'comment_created': datetime.datetime(2023, 7, 18, 6, 30, 5, tzinfo=datetime.timezone.utc), 'commenter': 'nilsnolde', 'type': 'User'}, {'comment_id': 1266294761, 'comment_body': 'this returns the right byte size now?', 'comment_created': datetime.datetime(2023, 7, 18, 6, 31, 9, tzinfo=datetime.timezone.utc), 'commenter': 'nilsnolde', 'type': 'User'}, {'comment_id': 1266339345, 'comment_body': 'Yes, this test now passes after the fixes mentioned above!', 'comment_created': datetime.datetime(2023, 7, 18, 7, 18, 55, tzinfo=datetime.timezone.utc), 'commenter': 'whytro', 'type': 'User'}, {'comment_id': 1266343054, 'comment_body': ""Currently, no. I'll take another look after GHA workflow!"", 'comment_created': datetime.datetime(2023, 7, 18, 7, 22, 30, tzinfo=datetime.timezone.utc), 'commenter': 'whytro', 'type': 'User'}, {'comment_id': 1266355930, 'comment_body': ""I've moved the build type specification to the .toml file as suggested, but curiously, `RelWithDebInfo` seems to break the build for some reason. I've reverted to defaulting to `Release` for now while I try to figure out why that seems to be the case."", 'comment_created': datetime.datetime(2023, 7, 18, 7, 35, 5, tzinfo=datetime.timezone.utc), 'commenter': 'whytro', 'type': 'User'}, {'comment_id': 1266364250, 'comment_body': 'That’s also hard coded though. The default is (usually) Release, you can override that for your own local build with the -C option on the command line when building.', 'comment_created': datetime.datetime(2023, 7, 18, 7, 41, 59, tzinfo=datetime.timezone.utc), 'commenter': 'nilsnolde', 'type': 'User'}, {'comment_id': 1266384754, 'comment_body': ""Ah okay, I misunderstood - I'll remove it completely. Should I force push to remove the last few commits to remove the back and forth?"", 'comment_created': datetime.datetime(2023, 7, 18, 7, 59, tzinfo=datetime.timezone.utc), 'commenter': 'whytro', 'type': 'User'}, {'comment_id': 1266387507, 'comment_body': '>Should I force push to remove the last few commits to remove the back and forth?\r\n\r\nYou can, but we can simply do ""squash & merge"" when merging this PR.', 'comment_created': datetime.datetime(2023, 7, 18, 8, 1, 23, tzinfo=datetime.timezone.utc), 'commenter': 'SiarheiFedartsou', 'type': 'User'}, {'comment_id': 1266393344, 'comment_body': ""Okay! In that case, I'll avoid force pushing. I've gone ahead and removed the hardcoded build-type specification completely as well."", 'comment_created': datetime.datetime(2023, 7, 18, 8, 6, 52, tzinfo=datetime.timezone.utc), 'commenter': 'whytro', 'type': 'User'}, {'comment_id': 1266483829, 'comment_body': 'Jep, we should get in the habit of ""squash and merge"" to avoid cluttering the history. IIRC it\'ll default to whatever was selected last time.', 'comment_created': datetime.datetime(2023, 7, 18, 9, 13, 49, tzinfo=datetime.timezone.utc), 'commenter': 'nilsnolde', 'type': 'User'}]","[{'commit_sha': '1a119415029594612d1d94ad9df77eb812878b52', 'committer_username': 'whytro', 'committer_name': 'Whytro', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 12, 17, 19, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd5e710c12814fec561e31eb5d9ccac1762821682', 'committer_username': 'whytro', 'committer_name': 'Whytro', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 12, 17, 19, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b00d4c6f44a9995080bf8e446b13c57a127dd637', 'committer_username': 'whytro', 'committer_name': 'Whytro', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 12, 17, 19, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '45cd1af34a18a36a4f46e60d4a468e5765f880c2', 'committer_username': 'whytro', 'committer_name': 'Whytro', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 12, 17, 19, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '27ca9719b7785e20295d848fb7250cacba40fce4', 'committer_username': 'whytro', 'committer_name': 'Whytro', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 12, 17, 19, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3c89d11379bef183a370e076174f0d2d099ecf4c', 'committer_username': 'whytro', 'committer_name': 'Whytro', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 12, 17, 19, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '38753515aee6df69419e8e39b937c7f2214a5d6b', 'committer_username': 'whytro', 'committer_name': 'Whytro', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 12, 17, 19, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c6e07a72edb4107d8c952a7fa7f40d18c4bc4341', 'committer_username': 'whytro', 'committer_name': 'Whytro', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 12, 17, 19, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6f7b91788e3e60ea78763addcb64ec1e46fd0769', 'committer_username': 'whytro', 'committer_name': 'Whytro', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 12, 17, 19, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b9a4d96d55159c9395e0d182909dd5b1651ce9ea', 'committer_username': 'whytro', 'committer_name': 'Whytro', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 12, 17, 19, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fd02484766e716bab754fc3df24806cd5ab7bcb4', 'committer_username': 'whytro', 'committer_name': 'Whytro', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 12, 17, 19, 45, tzinfo=datetime.timezone.utc)}]",Whytro,20995911,,User,,5,,0,1
1456173077,Modify to install osrm-backend dependencies,"Apologies for the messy way of handling things. I decided that this method would be cleaner in the end, and have made the changes requested in #2.",True,4,https://api.github.com/repos/gis-ops/manylinux/pulls/4,https://github.com/gis-ops/manylinux/pull/4,closed,75,372,4,1,0,0,0,0,[],2023-07-31 12:38:50+00:00,2023-07-31 14:31:02+00:00,6732.0,1:52:12,[],"[{'commit_sha': 'd5a9dc38723c89821fdd0b90c723c7612940995e', 'committer_username': 'whytro', 'committer_name': 'Whytro', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 12, 17, 19, 45, tzinfo=datetime.timezone.utc)}]",Whytro,20995911,,User,,5,,0,1
1486128978,Adjust docs CI & add LICENSE,"This change adjusts the CI workflow for the docs page, as it was incorrectly set to a non-existent branch, and also simply relies on FetchContent to install osrm-backend instead of having to checkout and build it separately. 

Also adds a LICENSE file, with the pyproject.toml reference to it, for PyPI.",True,22,https://api.github.com/repos/gis-ops/py-osrm/pulls/22,https://github.com/gis-ops/py-osrm/pull/22,closed,6,25,2,3,0,3,0,0,[],2023-08-23 10:01:44+00:00,2023-08-23 12:24:50+00:00,8586.0,2:23:06,"[{'comment_id': 1302876195, 'comment_body': ""technically we don't need this, we're just using it as a dependency, we don't re-distribute it.\r\n\r\nlet me add a license via Github, same as osrm though."", 'comment_created': datetime.datetime(2023, 8, 23, 11, 26, 52, tzinfo=datetime.timezone.utc), 'commenter': 'nilsnolde', 'type': 'User'}, {'comment_id': 1302878394, 'comment_body': 'Ok done. You can remove this one', 'comment_created': datetime.datetime(2023, 8, 23, 11, 29, 8, tzinfo=datetime.timezone.utc), 'commenter': 'nilsnolde', 'type': 'User'}, {'comment_id': 1302891728, 'comment_body': ""Okay, I've removed it!"", 'comment_created': datetime.datetime(2023, 8, 23, 11, 42, 19, tzinfo=datetime.timezone.utc), 'commenter': 'whytro', 'type': 'User'}]","[{'commit_sha': '49474ecd3b5e8267b785b351fb0d64750ee3df16', 'committer_username': 'whytro', 'committer_name': 'Whytro', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 12, 17, 19, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6440a7adfe549bde0f92a59c069d097b868d8b96', 'committer_username': 'whytro', 'committer_name': 'Whytro', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 12, 17, 19, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9e233e8e96206a9254ba36d7f70a6369c59bac0a', 'committer_username': 'whytro', 'committer_name': 'Whytro', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 12, 17, 19, 45, tzinfo=datetime.timezone.utc)}]",Whytro,20995911,,User,,5,,0,1
1481855369,Add docstrings and mkdocs support,"Continuation of #17, but in a new PR, using mkdocs. 

I've also set up a sample here for reference:
https://whytro.github.io/py-osrm/

As for the unused default column, I couldn't find documentation regarding how to manually set the default, or disable it, and I'm also not sure if it's able to pull the default from the nanobind signature, resulting in everything being labeled as `required`.",True,18,https://api.github.com/repos/gis-ops/py-osrm/pulls/18,https://github.com/gis-ops/py-osrm/pull/18,closed,527,53,22,5,0,4,0,0,[],2023-08-20 17:18:16+00:00,2023-08-23 08:38:49+00:00,228033.0,"2 days, 15:20:33","[{'comment_id': 1301049000, 'comment_body': '```suggestion\r\n`py-osrm` is a Python package that binds to [osrm-backend](https://github.com/Project-OSRM/osrm-backend) using [nanobind](https://github.com/wjakob/nanobind).\r\n```', 'comment_created': datetime.datetime(2023, 8, 22, 6, 18, 38, tzinfo=datetime.timezone.utc), 'commenter': 'nilsnolde', 'type': 'User'}, {'comment_id': 1301049348, 'comment_body': '```suggestion\r\npy_osrm is supported on **CPython 3.8+**, and can be installed from source via running the following command in the source folder:\r\n```', 'comment_created': datetime.datetime(2023, 8, 22, 6, 19, 2, tzinfo=datetime.timezone.utc), 'commenter': 'nilsnolde', 'type': 'User'}, {'comment_id': 1301053665, 'comment_body': ""I'd symlink the README here, one less place to maintain:)"", 'comment_created': datetime.datetime(2023, 8, 22, 6, 24, 5, tzinfo=datetime.timezone.utc), 'commenter': 'nilsnolde', 'type': 'User'}, {'comment_id': 1301055636, 'comment_body': '```suggestion\r\n::: py_osrm.OSRM.Trip\r\n```', 'comment_created': datetime.datetime(2023, 8, 22, 6, 26, 12, tzinfo=datetime.timezone.utc), 'commenter': 'nilsnolde', 'type': 'User'}]","[{'commit_sha': '6901ac7bf35aa85a1665073716486acaa4048bc5', 'committer_username': 'whytro', 'committer_name': 'Whytro', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 12, 17, 19, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '548174192cf66b29dc6888b498b4c111276864a7', 'committer_username': 'whytro', 'committer_name': 'Whytro', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 12, 17, 19, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f103fa518ec12531ff11e5c8e05bb0bcad45906a', 'committer_username': 'whytro', 'committer_name': 'Whytro', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 12, 17, 19, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fb61dca53cc09b758ffae9db24335fbc2e2ebd5e', 'committer_username': 'whytro', 'committer_name': 'Whytro', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 12, 17, 19, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd255179460710996c03630a19c5956cb5f81c136', 'committer_username': 'whytro', 'committer_name': 'Whytro', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 12, 17, 19, 45, tzinfo=datetime.timezone.utc)}]",Whytro,20995911,,User,,5,,0,1
1435780736,"Add tests, usability adjustments and test data","Added the bulk of tests, with reference to the OSRM NodeJS tests. In addition, precompiled test data has been added for now, to run the tests off of. Some changes have also been made to improve usability (intuitiveness) of the code.",True,9,https://api.github.com/repos/gis-ops/py-osrm/pulls/9,https://github.com/gis-ops/py-osrm/pull/9,closed,3229,449,149,11,5,13,0,0,[],2023-07-15 09:27:32+00:00,2023-07-18 09:14:57+00:00,258445.0,"2 days, 23:47:25","[{'comment_id': 1266281888, 'comment_body': ""you should be able to set that while configuring the project, I'd recommend `RelWithDebInfo` instead of `Debug`"", 'comment_created': datetime.datetime(2023, 7, 18, 6, 16, 52, tzinfo=datetime.timezone.utc), 'commenter': 'nilsnolde', 'type': 'User'}, {'comment_id': 1266282881, 'comment_body': 'Seems with `-C` for the build command: https://github.com/scikit-build/scikit-build-core#configuration', 'comment_created': datetime.datetime(2023, 7, 18, 6, 18, 11, tzinfo=datetime.timezone.utc), 'commenter': 'nilsnolde', 'type': 'User'}, {'comment_id': 1266284424, 'comment_body': 'this is VERY nice for users, good idea!', 'comment_created': datetime.datetime(2023, 7, 18, 6, 20, 11, tzinfo=datetime.timezone.utc), 'commenter': 'nilsnolde', 'type': 'User'}, {'comment_id': 1266293778, 'comment_body': ""did you try these again? if they currently don't work, let's shelve it for after the GHA workflow"", 'comment_created': datetime.datetime(2023, 7, 18, 6, 30, 5, tzinfo=datetime.timezone.utc), 'commenter': 'nilsnolde', 'type': 'User'}, {'comment_id': 1266294761, 'comment_body': 'this returns the right byte size now?', 'comment_created': datetime.datetime(2023, 7, 18, 6, 31, 9, tzinfo=datetime.timezone.utc), 'commenter': 'nilsnolde', 'type': 'User'}, {'comment_id': 1266339345, 'comment_body': 'Yes, this test now passes after the fixes mentioned above!', 'comment_created': datetime.datetime(2023, 7, 18, 7, 18, 55, tzinfo=datetime.timezone.utc), 'commenter': 'whytro', 'type': 'User'}, {'comment_id': 1266343054, 'comment_body': ""Currently, no. I'll take another look after GHA workflow!"", 'comment_created': datetime.datetime(2023, 7, 18, 7, 22, 30, tzinfo=datetime.timezone.utc), 'commenter': 'whytro', 'type': 'User'}, {'comment_id': 1266355930, 'comment_body': ""I've moved the build type specification to the .toml file as suggested, but curiously, `RelWithDebInfo` seems to break the build for some reason. I've reverted to defaulting to `Release` for now while I try to figure out why that seems to be the case."", 'comment_created': datetime.datetime(2023, 7, 18, 7, 35, 5, tzinfo=datetime.timezone.utc), 'commenter': 'whytro', 'type': 'User'}, {'comment_id': 1266364250, 'comment_body': 'That’s also hard coded though. The default is (usually) Release, you can override that for your own local build with the -C option on the command line when building.', 'comment_created': datetime.datetime(2023, 7, 18, 7, 41, 59, tzinfo=datetime.timezone.utc), 'commenter': 'nilsnolde', 'type': 'User'}, {'comment_id': 1266384754, 'comment_body': ""Ah okay, I misunderstood - I'll remove it completely. Should I force push to remove the last few commits to remove the back and forth?"", 'comment_created': datetime.datetime(2023, 7, 18, 7, 59, tzinfo=datetime.timezone.utc), 'commenter': 'whytro', 'type': 'User'}, {'comment_id': 1266387507, 'comment_body': '>Should I force push to remove the last few commits to remove the back and forth?\r\n\r\nYou can, but we can simply do ""squash & merge"" when merging this PR.', 'comment_created': datetime.datetime(2023, 7, 18, 8, 1, 23, tzinfo=datetime.timezone.utc), 'commenter': 'SiarheiFedartsou', 'type': 'User'}, {'comment_id': 1266393344, 'comment_body': ""Okay! In that case, I'll avoid force pushing. I've gone ahead and removed the hardcoded build-type specification completely as well."", 'comment_created': datetime.datetime(2023, 7, 18, 8, 6, 52, tzinfo=datetime.timezone.utc), 'commenter': 'whytro', 'type': 'User'}, {'comment_id': 1266483829, 'comment_body': 'Jep, we should get in the habit of ""squash and merge"" to avoid cluttering the history. IIRC it\'ll default to whatever was selected last time.', 'comment_created': datetime.datetime(2023, 7, 18, 9, 13, 49, tzinfo=datetime.timezone.utc), 'commenter': 'nilsnolde', 'type': 'User'}]","[{'commit_sha': '1a119415029594612d1d94ad9df77eb812878b52', 'committer_username': 'whytro', 'committer_name': 'Whytro', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 12, 17, 19, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd5e710c12814fec561e31eb5d9ccac1762821682', 'committer_username': 'whytro', 'committer_name': 'Whytro', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 12, 17, 19, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b00d4c6f44a9995080bf8e446b13c57a127dd637', 'committer_username': 'whytro', 'committer_name': 'Whytro', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 12, 17, 19, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '45cd1af34a18a36a4f46e60d4a468e5765f880c2', 'committer_username': 'whytro', 'committer_name': 'Whytro', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 12, 17, 19, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '27ca9719b7785e20295d848fb7250cacba40fce4', 'committer_username': 'whytro', 'committer_name': 'Whytro', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 12, 17, 19, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3c89d11379bef183a370e076174f0d2d099ecf4c', 'committer_username': 'whytro', 'committer_name': 'Whytro', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 12, 17, 19, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '38753515aee6df69419e8e39b937c7f2214a5d6b', 'committer_username': 'whytro', 'committer_name': 'Whytro', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 12, 17, 19, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c6e07a72edb4107d8c952a7fa7f40d18c4bc4341', 'committer_username': 'whytro', 'committer_name': 'Whytro', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 12, 17, 19, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6f7b91788e3e60ea78763addcb64ec1e46fd0769', 'committer_username': 'whytro', 'committer_name': 'Whytro', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 12, 17, 19, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b9a4d96d55159c9395e0d182909dd5b1651ce9ea', 'committer_username': 'whytro', 'committer_name': 'Whytro', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 12, 17, 19, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fd02484766e716bab754fc3df24806cd5ab7bcb4', 'committer_username': 'whytro', 'committer_name': 'Whytro', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 12, 17, 19, 45, tzinfo=datetime.timezone.utc)}]",Whytro,20995911,,User,,5,,0,1
1414840818,Adding further engine bindings,"Added more bindings for the other engine calls. However, I did run into an issue with the MatchParameters bindings, which I suspect has something to do with the way the argument forwarding is set up.

Also added `__repr__` outputs for the custom JSON types, so they print out as expected.",True,6,https://api.github.com/repos/gis-ops/py-osrm/pulls/6,https://github.com/gis-ops/py-osrm/pull/6,closed,555,80,22,6,4,22,0,0,[],2023-06-30 13:15:33+00:00,2023-07-10 08:25:30+00:00,846597.0,"9 days, 19:09:57","[{'comment_id': 1249569778, 'comment_body': ""seems a bit more complicated than necessary? couldn't we just return the string value from each operator? unless it's needed to concatenate multiple values from a single `ValueStringifyVisitor` instance?"", 'comment_created': datetime.datetime(2023, 7, 2, 15, 17, 27, tzinfo=datetime.timezone.utc), 'commenter': 'nilsnolde', 'type': 'User'}, {'comment_id': 1249570389, 'comment_body': 'does this need a `obj.get()`?', 'comment_created': datetime.datetime(2023, 7, 2, 15, 18, 34, tzinfo=datetime.timezone.utc), 'commenter': 'nilsnolde', 'type': 'User'}, {'comment_id': 1250328594, 'comment_body': '```suggestion\r\n    std::string operator()(const json::String& str) {\r\n```', 'comment_created': datetime.datetime(2023, 7, 3, 6, 39, 10, tzinfo=datetime.timezone.utc), 'commenter': 'SiarheiFedartsou', 'type': 'User'}, {'comment_id': 1250377693, 'comment_body': 'just for reference: better to check in the function body if it was exactly 3 parameters passed, no more/less. also the result here is very likely binary protobuf', 'comment_created': datetime.datetime(2023, 7, 3, 7, 18, 36, tzinfo=datetime.timezone.utc), 'commenter': 'nilsnolde', 'type': 'User'}, {'comment_id': 1250597338, 'comment_body': ""Okay, I've adjusted this to validate the vector, and throw a runtime error if the size is not 3."", 'comment_created': datetime.datetime(2023, 7, 3, 9, 54, 12, tzinfo=datetime.timezone.utc), 'commenter': 'whytro', 'type': 'User'}, {'comment_id': 1250598137, 'comment_body': ""I've adjusted the visitor to return string values accordingly!"", 'comment_created': datetime.datetime(2023, 7, 3, 9, 54, 47, tzinfo=datetime.timezone.utc), 'commenter': 'whytro', 'type': 'User'}, {'comment_id': 1250604950, 'comment_body': 'I\'ve done the MatchParameters in the ""assigning"" way, but I\'m not sure if it would be clearer to just fully assign all values manually, or use the constructor for MatchParameters and RouteParameters, and then manually assign for BaseParameters. \r\n\r\nI believe the NodeJS bindings do it in the inverse way instead (ie. assigning BaseParameters, and then everything else is explicitly assigned), but I think that would be more complicated to replicate here.', 'comment_created': datetime.datetime(2023, 7, 3, 9, 59, 56, tzinfo=datetime.timezone.utc), 'commenter': 'whytro', 'type': 'User'}, {'comment_id': 1250841443, 'comment_body': ""> but I'm not sure if it would be clearer to just fully assign all values manually\r\n\r\nYeah I agree here"", 'comment_created': datetime.datetime(2023, 7, 3, 12, 49, 20, tzinfo=datetime.timezone.utc), 'commenter': 'nilsnolde', 'type': 'User'}, {'comment_id': 1250845898, 'comment_body': 'and this still works for recursive arrays (and objects further down)? seems like that was the reason why you did it in the first place with the class variable no? at least that made sense to me:)', 'comment_created': datetime.datetime(2023, 7, 3, 12, 52, 42, tzinfo=datetime.timezone.utc), 'commenter': 'nilsnolde', 'type': 'User'}, {'comment_id': 1250898046, 'comment_body': 'To clarify, do you mean that you agree with manually assigning all values over ""hybrid"" instantiation?', 'comment_created': datetime.datetime(2023, 7, 3, 13, 29, 14, tzinfo=datetime.timezone.utc), 'commenter': 'whytro', 'type': 'User'}, {'comment_id': 1250979835, 'comment_body': '> you agree with manually assigning all values\r\n\r\nexactly that:)', 'comment_created': datetime.datetime(2023, 7, 3, 14, 39, 50, tzinfo=datetime.timezone.utc), 'commenter': 'nilsnolde', 'type': 'User'}, {'comment_id': 1250981540, 'comment_body': 'you want to integrate that change before merging or make an issue out of it?', 'comment_created': datetime.datetime(2023, 7, 3, 14, 41, 25, tzinfo=datetime.timezone.utc), 'commenter': 'nilsnolde', 'type': 'User'}, {'comment_id': 1251062039, 'comment_body': 'After taking a closer look, it seems like default initializing MatchParameters and setting each parameter explicitly might result in additional complications. This is because when values are passed into the parent constructor, the parent constructor does perform some more transformations and assignments of its own.\r\n\r\nFor example, `AnnotationsType` gets converted to a boolean value, and the `number_of_alternatives` value is also calculated based off the passed `alternatives` value. As a result, I would have to copy over those calculations to the bindings side (ie. `number_of_alternatives = alternatives ? 1u : 0u`).\r\n\r\nAs a result, I think this approach may lose code clarity, since those value calculations would have to be replicated on the bindings side, and also require additional copied hardcoded values/calculations.', 'comment_created': datetime.datetime(2023, 7, 3, 15, 53, 41, tzinfo=datetime.timezone.utc), 'commenter': 'whytro', 'type': 'User'}, {'comment_id': 1251070934, 'comment_body': '>  and the number_of_alternatives value is also calculated based off the passed alternatives value. As a result, I would have to copy over those calculations to the bindings side (ie. number_of_alternatives = alternatives ? 1u : 0u).\r\n\r\nif we want to be in sync with NodeJs bindings we should support both boolean and number as an input in bindings for this `alternatives` parameter, so you have to handle it on bindings side anyway(to dynamically detect type and convert it to proper value on C++ side). See NodeJS bindings for example: https://github.com/Project-OSRM/osrm-backend/blob/62e11fd5dbc8d5e888c6e2555505ae684d8a2759/include/nodejs/node_osrm_support.hpp#L1070\r\n\r\nOfc we can start from just generic integer type here and don\'t do any conversions like ""true -> 1"", ""false -> 0"" for the time being, but still.\r\n\r\n>For example, AnnotationsType gets converted to a boolean value\r\n\r\nThe same here. See https://github.com/Project-OSRM/osrm-backend/blob/62e11fd5dbc8d5e888c6e2555505ae684d8a2759/include/nodejs/node_osrm_support.hpp#L853. But AFAIR `annotations = true` is considered deprecated in NodeJS API.', 'comment_created': datetime.datetime(2023, 7, 3, 16, 0, 8, tzinfo=datetime.timezone.utc), 'commenter': 'SiarheiFedartsou', 'type': 'User'}, {'comment_id': 1251071208, 'comment_body': 'Btw boolean `alternatives` is considered deprecated as well https://github.com/Project-OSRM/osrm-backend/blob/62e11fd5dbc8d5e888c6e2555505ae684d8a2759/include/engine/api/route_parameters.hpp#L168', 'comment_created': datetime.datetime(2023, 7, 3, 16, 0, 26, tzinfo=datetime.timezone.utc), 'commenter': 'SiarheiFedartsou', 'type': 'User'}, {'comment_id': 1251099298, 'comment_body': ""Ah, if its `alternatives` bool input is getting deprecated, should we still support bool input for the Python bindings? \r\n\r\nThe part that I didn't fully understand about the NodeJS `annotations_type` part there is that it seems to check what enum type was sent for `annotations` to assign the `annotations_type` value (in an array), but for the C++ side of things, it seems to base it off which RouteParameters constructor is called. If I'm understanding this part correctly, the user is able to send in an array of AnnotationsTypes, which gets calculated up? In that case, it would make sense to apply that same abstraction to the Python bindings."", 'comment_created': datetime.datetime(2023, 7, 3, 16, 35, 39, tzinfo=datetime.timezone.utc), 'commenter': 'whytro', 'type': 'User'}, {'comment_id': 1251335588, 'comment_body': '> Ah, if its alternatives bool input is getting deprecated, should we still support bool input for the Python bindings?\r\n\r\nIMO no. Boolean never really made sense there and it should be int. \r\n\r\nThe other stuff @SiarheiFedartsou is better suited answering:)', 'comment_created': datetime.datetime(2023, 7, 3, 23, 24, 8, tzinfo=datetime.timezone.utc), 'commenter': 'nilsnolde', 'type': 'User'}, {'comment_id': 1251573430, 'comment_body': '> The part that I didn\'t fully understand about the NodeJS annotations_type part there is that it seems to check what enum type was sent for annotations to assign the annotations_type value (in an array), but for the C++ side of things, it seems to base it off which RouteParameters constructor is called. If I\'m understanding this part correctly, the user is able to send in an array of AnnotationsTypes, which gets calculated up? In that case, it would make sense to apply that same abstraction to the Python bindings.\r\n\r\nNot sure I fully understand the question... What happens in NodeJS bindings it simply converts something like this on JS side `[""nodes"", ""distance"", ""speed""]` to smth like this on C++ side `std::vector<AnnotationType>{AnnotationType::Nodes, AnnotationType::Distance, AnnotationType::Speed}`. Can we do the same on Python side? Ofc we can use https://docs.python.org/3/library/enum.html or smth like this if needed.\r\n', 'comment_created': datetime.datetime(2023, 7, 4, 6, 51, 54, tzinfo=datetime.timezone.utc), 'commenter': 'SiarheiFedartsou', 'type': 'User'}, {'comment_id': 1251667633, 'comment_body': '> > The part that I didn\'t fully understand about the NodeJS annotations_type part there is that it seems to check what enum type was sent for annotations to assign the annotations_type value (in an array), but for the C++ side of things, it seems to base it off which RouteParameters constructor is called. If I\'m understanding this part correctly, the user is able to send in an array of AnnotationsTypes, which gets calculated up? In that case, it would make sense to apply that same abstraction to the Python bindings.\r\n> \r\n> Not sure I fully understand the question... What happens in NodeJS bindings it simply converts something like this on JS side `[""nodes"", ""distance"", ""speed""]` to smth like this on C++ side `std::vector<AnnotationType>{AnnotationType::Nodes, AnnotationType::Distance, AnnotationType::Speed}`. Can we do the same on Python side? Ofc we can use https://docs.python.org/3/library/enum.html or smth like this if needed.\r\n\r\nIt\'s definitely possible, but my confusion stemmed from the C++ side of things not accepting a vector of AnnotationsType - only an AnnotationsType enum. On the C++ end, is the user expected to perform that calculation prior to passing it in? Otherwise I can create an abstraction for that, like on the NodeJS bindings', 'comment_created': datetime.datetime(2023, 7, 4, 8, 15, 10, tzinfo=datetime.timezone.utc), 'commenter': 'whytro', 'type': 'User'}, {'comment_id': 1251678585, 'comment_body': 'ahhh, I got it. `annotations_type` is not vector indeed, it is [bitmask](https://en.wikipedia.org/wiki/Mask_(computing)). Then you indeed can follow NodeJS path and just transform Python\'s list to this bitmask just like NodeJS bindings do. \r\n\r\n So I would rephrase what I said above:\r\n \r\n > Not sure I fully understand the question... What happens in NodeJS bindings it simply converts something like this on JS side `[""nodes"", ""distance"", ""speed""]` to smth like this on C++ side `AnnotationType::Nodes | AnnotationType::Distance | AnnotationType::Speed`. Can we do the same on Python side? Ofc we can use https://docs.python.org/3/library/enum.html or smth like this if needed.', 'comment_created': datetime.datetime(2023, 7, 4, 8, 23, 9, tzinfo=datetime.timezone.utc), 'commenter': 'SiarheiFedartsou', 'type': 'User'}, {'comment_id': 1251713934, 'comment_body': 'Okay, that sounds doable, thanks for the clarifications!', 'comment_created': datetime.datetime(2023, 7, 4, 8, 51, 48, tzinfo=datetime.timezone.utc), 'commenter': 'whytro', 'type': 'User'}, {'comment_id': 1251840619, 'comment_body': ""I've made adjustments to accommodate the requested changes. In the process, I've also discovered a bug in osrm-backend's RouteParameter's AnnotationsType `|=` operator overload that renders it nonfunctional, so I've also put in a [PR over there](https://github.com/Project-OSRM/osrm-backend/pull/6646) to address that."", 'comment_created': datetime.datetime(2023, 7, 4, 10, 30, 56, tzinfo=datetime.timezone.utc), 'commenter': 'whytro', 'type': 'User'}]","[{'commit_sha': '2490fcb5046ebd5b9e70ed92907bc5a62b8819e1', 'committer_username': 'whytro', 'committer_name': 'Whytro', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 12, 17, 19, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '171e825aecdc8fdcedec3875baacc7bd0c74ca9e', 'committer_username': 'whytro', 'committer_name': 'Whytro', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 12, 17, 19, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c5b00de35f2c3331e81dc5b08a773571bc50b314', 'committer_username': 'whytro', 'committer_name': 'Whytro', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 12, 17, 19, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'af1adc7a74325475eaf2e68fb7764262ec184fc5', 'committer_username': 'whytro', 'committer_name': 'Whytro', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 12, 17, 19, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0bc51a570fee018a4668715e275a89f8aa7b2edd', 'committer_username': 'whytro', 'committer_name': 'Whytro', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 12, 17, 19, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cc5ed2b04c90eff078cb59487f2101430fef8299', 'committer_username': 'whytro', 'committer_name': 'Whytro', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 12, 17, 19, 45, tzinfo=datetime.timezone.utc)}]",Whytro,20995911,,User,,5,,0,1
1397229911,Add basic type bindings & lay groundwork for JSON,"Added more bindings for basic types, which allows, for example, proper parameter usage in RouteParameter (per test example). However, `Hint` support still needs to be added, but since it relies on a lot of other custom types, it requires some further thought on how to best approach it (ie. if there's room for simplification).

The Result object bindings part still needs to be worked on further in order to achieve proper functionality.",True,4,https://api.github.com/repos/gis-ops/py-osrm/pulls/4,https://github.com/gis-ops/py-osrm/pull/4,closed,360,7,17,5,1,16,0,0,[],2023-06-18 18:08:27+00:00,2023-06-26 09:01:18+00:00,658371.0,"7 days, 14:52:51","[{'comment_id': 1233566810, 'comment_body': ""to me it's not immediately obvious what a bearing pair is. I guess we'll do docstrings once the API stabilized, still curious:)\r\n\r\nalso:\r\n- can bearing be negative? or should it be `unsigned short`?\r\n- can we use the more relatable aliases `uint16_t` etc?"", 'comment_created': datetime.datetime(2023, 6, 19, 6, 9, 9, tzinfo=datetime.timezone.utc), 'commenter': 'nilsnolde', 'type': 'User'}, {'comment_id': 1233567301, 'comment_body': 'what do these do?', 'comment_created': datetime.datetime(2023, 6, 19, 6, 9, 52, tzinfo=datetime.timezone.utc), 'commenter': 'nilsnolde', 'type': 'User'}, {'comment_id': 1233568232, 'comment_body': ""seems like a ton of coord constructors. does py-osrm/nanobind need all of them to be registered internally? I'd have guessed we only expose one type"", 'comment_created': datetime.datetime(2023, 6, 19, 6, 11, 13, tzinfo=datetime.timezone.utc), 'commenter': 'nilsnolde', 'type': 'User'}, {'comment_id': 1233571184, 'comment_body': 'we should try to include-what-you-use', 'comment_created': datetime.datetime(2023, 6, 19, 6, 15, 43, tzinfo=datetime.timezone.utc), 'commenter': 'nilsnolde', 'type': 'User'}, {'comment_id': 1233571924, 'comment_body': 'it needs to be boost instead of std? or is osrm c++14 still?', 'comment_created': datetime.datetime(2023, 6, 19, 6, 16, 42, tzinfo=datetime.timezone.utc), 'commenter': 'nilsnolde', 'type': 'User'}, {'comment_id': 1233574297, 'comment_body': 'this could also be initialized with `[(3, 3)]` right?', 'comment_created': datetime.datetime(2023, 6, 19, 6, 20, 18, tzinfo=datetime.timezone.utc), 'commenter': 'nilsnolde', 'type': 'User'}, {'comment_id': 1233584617, 'comment_body': 'Bearing should be in [0; 360] range AFAIR.', 'comment_created': datetime.datetime(2023, 6, 19, 6, 33, 14, tzinfo=datetime.timezone.utc), 'commenter': 'SiarheiFedartsou', 'type': 'User'}, {'comment_id': 1233584847, 'comment_body': 'what this `nb::self == nb::self` means?', 'comment_created': datetime.datetime(2023, 6, 19, 6, 33, 32, tzinfo=datetime.timezone.utc), 'commenter': 'SiarheiFedartsou', 'type': 'User'}, {'comment_id': 1233585535, 'comment_body': 'it is already c++17, but some boost things are still used there unfortunately...', 'comment_created': datetime.datetime(2023, 6, 19, 6, 34, 25, tzinfo=datetime.timezone.utc), 'commenter': 'SiarheiFedartsou', 'type': 'User'}, {'comment_id': 1233596909, 'comment_body': '`mapbox::util::apply_visitor`\r\n\r\nPlease use this as keyword in codebase to find `std::visit`-like example for `mapbox::util::variant`', 'comment_created': datetime.datetime(2023, 6, 19, 6, 46, 52, tzinfo=datetime.timezone.utc), 'commenter': 'SiarheiFedartsou', 'type': 'User'}, {'comment_id': 1233762756, 'comment_body': 'Those are bindings for operators - so in this case, it would allow `==` and `!=` comparisons between the Coordinate objects.', 'comment_created': datetime.datetime(2023, 6, 19, 9, 13, 45, tzinfo=datetime.timezone.utc), 'commenter': 'whytro', 'type': 'User'}, {'comment_id': 1233765242, 'comment_body': 'Those are operator bindings, so it would allow `==` comparisons for the Bearing object.', 'comment_created': datetime.datetime(2023, 6, 19, 9, 15, 52, tzinfo=datetime.timezone.utc), 'commenter': 'whytro', 'type': 'User'}, {'comment_id': 1233770046, 'comment_body': 'It looks like Coordinate converts both Float types and UnsafeFloat types to Fixed, ie:\r\n```cpp\r\ninline FixedLatitude toFixed(const FloatLatitude floating)\r\n{\r\n    const auto latitude = static_cast<double>(floating);\r\n    const auto fixed = static_cast<std::int32_t>(std::round(latitude * COORDINATE_PRECISION));\r\n    return FixedLatitude{fixed};\r\n}\r\n```\r\nWould it then make more sense to keep the Fixed constructors, or should I still go with just the one Float constructor?\r\n', 'comment_created': datetime.datetime(2023, 6, 19, 9, 19, 47, tzinfo=datetime.timezone.utc), 'commenter': 'whytro', 'type': 'User'}, {'comment_id': 1234750795, 'comment_body': 'I would use simple Python’s float instead of all these FixedLatitude/Longitude, FloatLatitude/Longitude etc… Just accept float as a parameter and convert to this “safe” type under the hood in glue code… WDYT? Will it be doable with nanobind?', 'comment_created': datetime.datetime(2023, 6, 20, 5, 25, 45, tzinfo=datetime.timezone.utc), 'commenter': 'SiarheiFedartsou', 'type': 'User'}, {'comment_id': 1235372401, 'comment_body': 'It\'s doable to do away with all the Longitude/Latitude definitions, but one of the 3 types has to be used for the manual constructor for coordinates, as that\'s what the C++ constructor expects.\r\n\r\n```cpp\r\n\r\n.def(""__init__"", [](Coordinate* t, std::pair<double, double> coords) {\r\n    const UnsafeFloatLongitude lon_ = UnsafeFloatLongitude{coords.first};\r\n    const UnsafeFloatLatitude lat_ = UnsafeFloatLatitude{coords.second};\r\n\r\n    new (t) Coordinate(lon_, lat_);\r\n })\r\n```\r\n\r\nMy main confusion stemmed around if we wanted to treat user input as the Unsafe archetype by default, or Float. Unsafe types use `boost::numeric_cast` to perform an overflow check, while Float types cast it to an `int32_t` (both do the same rounding calculation in the end).\r\n\r\nHowever, FloatCoordinate does not accept UnsafeFloatLongitude/Latitude, though it does accept Float types.\r\n\r\nShould I go with Float default for both, and ignore UnsafeFloat, and thus give up the overflow check?', 'comment_created': datetime.datetime(2023, 6, 20, 14, 39, 24, tzinfo=datetime.timezone.utc), 'commenter': 'whytro', 'type': 'User'}, {'comment_id': 1235384834, 'comment_body': ""I would just go with FloatLongitude/FloatLatitude and that's it. IMO NodeJs bindings are very good to use as a reference here, just because people are using them for years(i.e. this approach is kind of tested by time)... https://github.com/Project-OSRM/osrm-backend/blob/62e11fd5dbc8d5e888c6e2555505ae684d8a2759/include/nodejs/node_osrm_support.hpp#L413\r\n\r\nI quickly looked over codebase and UnsafeFloatLongitude/Latitude is very rarely used for now. There are only 2 usecases: validation of coordinates input in osrm-routed and validation of OSM node coordinates in osrm-extract. Yes, if you would ask me in general, then I would say that Unsafe seems to be much more robust approach - it is a good practice to check external input, BUT since OSRM's codebase is more prepared to use FloatLongitude/FloatLatitude I would go this way for now. After all you will always be able to move to Unsafe version in the future..."", 'comment_created': datetime.datetime(2023, 6, 20, 14, 48, 4, tzinfo=datetime.timezone.utc), 'commenter': 'SiarheiFedartsou', 'type': 'User'}]","[{'commit_sha': '444fc95fda2daac2edd279154a195173b17f67fe', 'committer_username': 'whytro', 'committer_name': 'Whytro', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 12, 17, 19, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'af640fc2696757f131ea0e0564e3b96f9b432c59', 'committer_username': 'whytro', 'committer_name': 'Whytro', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 12, 17, 19, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f97a7aa966d43e5dc6a4188ebf352554d27b8efa', 'committer_username': 'whytro', 'committer_name': 'Whytro', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 12, 17, 19, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0e068def52ed2565b5a4de08c322b556a497531b', 'committer_username': 'whytro', 'committer_name': 'Whytro', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 12, 17, 19, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a45eb1491ca384b75d682ac8042147dc76b4f73f', 'committer_username': 'whytro', 'committer_name': 'Whytro', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 12, 17, 19, 45, tzinfo=datetime.timezone.utc)}]",Whytro,20995911,,User,,5,,0,1
1387505695,Adjust OSRM constructors & add RouteParameters,"Added in additional custom OSRM constructors so that it can be called with just the storage path, or with keyword arguments. 
Preliminary support for `RouteParameters` was also added, though real definition or customization for some of the additional objects is required for it to be fully complete.",True,3,https://api.github.com/repos/gis-ops/py-osrm/pulls/3,https://github.com/gis-ops/py-osrm/pull/3,closed,367,107,13,3,0,4,0,0,[],2023-06-11 11:51:49+00:00,2023-06-18 17:11:55+00:00,624006.0,"7 days, 5:20:06","[{'comment_id': 1226158623, 'comment_body': 'Is ""placement new"" a recommended way of implementing constructors in nanobind?', 'comment_created': datetime.datetime(2023, 6, 12, 6, 42, 40, tzinfo=datetime.timezone.utc), 'commenter': 'SiarheiFedartsou', 'type': 'User'}, {'comment_id': 1226165056, 'comment_body': 'Can we put it into header file? Like routeparameter_nb.hpp...', 'comment_created': datetime.datetime(2023, 6, 12, 6, 50, 30, tzinfo=datetime.timezone.utc), 'commenter': 'SiarheiFedartsou', 'type': 'User'}, {'comment_id': 1226196358, 'comment_body': 'It appears that this is recommended because the memory was already allocated.\r\n\r\nThis behavior is referenced [here](https://nanobind.readthedocs.io/en/latest/porting.html#custom-constructors).\r\n> The provided lambda function will be called with a pointer to uninitialized memory that has already been allocated (this memory region is co-located with the Python object for reasons of efficiency). ', 'comment_created': datetime.datetime(2023, 6, 12, 7, 22, 47, tzinfo=datetime.timezone.utc), 'commenter': 'whytro', 'type': 'User'}, {'comment_id': 1226423296, 'comment_body': ""I've separated these into their respective header files, so it should be clearer now."", 'comment_created': datetime.datetime(2023, 6, 12, 10, 17, 17, tzinfo=datetime.timezone.utc), 'commenter': 'whytro', 'type': 'User'}]","[{'commit_sha': 'faef0efb9f7d43a62c812c6f099bca84357fca04', 'committer_username': 'whytro', 'committer_name': 'Whytro', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 12, 17, 19, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '62b363b0ce22ffc6a547d8c2eea8c8eb95f59f14', 'committer_username': 'whytro', 'committer_name': 'Whytro', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 12, 17, 19, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fd8a01e2f99211f52e19e4e9cb7b3f958aaef7ae', 'committer_username': 'whytro', 'committer_name': 'Whytro', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 12, 17, 19, 45, tzinfo=datetime.timezone.utc)}]",Whytro,20995911,,User,,5,,0,1
1376941929,Add install/build related files,"# Issue
Relevant to:
> https://github.com/gis-ops/py-osrm/issues/1 Local build & install of new package

Adds install/build related files so that it can be installed via running `python3 -m pip install .`",True,2,https://api.github.com/repos/gis-ops/py-osrm/pulls/2,https://github.com/gis-ops/py-osrm/pull/2,closed,246,0,8,2,4,4,0,0,[],2023-06-03 12:14:22+00:00,2023-06-07 06:55:05+00:00,326443.0,"3 days, 18:40:43","[{'comment_id': 1219916445, 'comment_body': 'Will it work if my installed version of Python is other than 3.8 (e.g. 3.9 or 3.10?)?', 'comment_created': datetime.datetime(2023, 6, 6, 15, 59, 41, tzinfo=datetime.timezone.utc), 'commenter': 'SiarheiFedartsou', 'type': 'User'}, {'comment_id': 1219924875, 'comment_body': ""I didn't quite understand the purpose of this by the docs: https://github.com/scikit-build/scikit-build-core#configuration.\r\n\r\nSo this would be ABI compatible with future versions Python? If we put 3.7 here, it'd be compatible with 3.7+? I always figured Python is ABI incompatible between minor versions, that's why we always need to build for each one separately (via e.g. cibuildwheel)"", 'comment_created': datetime.datetime(2023, 6, 6, 16, 5, 9, tzinfo=datetime.timezone.utc), 'commenter': 'nilsnolde', 'type': 'User'}, {'comment_id': 1219926272, 'comment_body': 'IMO we can still have it `osrm`, but no need to change that now..', 'comment_created': datetime.datetime(2023, 6, 6, 16, 6, 7, tzinfo=datetime.timezone.utc), 'commenter': 'nilsnolde', 'type': 'User'}, {'comment_id': 1220925707, 'comment_body': 'https://github.com/Project-OSRM/osrm-backend/blob/503d558e902a6a5f7a53ee28a4c2103f9f02c9e2/include/nodejs/node_osrm_support.hpp#L152', 'comment_created': datetime.datetime(2023, 6, 7, 6, 22, 22, tzinfo=datetime.timezone.utc), 'commenter': 'SiarheiFedartsou', 'type': 'User'}]","[{'commit_sha': 'edbc0612d7a8a47bd8598fcc97beec7dbe3ec09c', 'committer_username': 'whytro', 'committer_name': 'Whytro', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 12, 17, 19, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b99953a550bc4f0353bd4a48c056176ee5089385', 'committer_username': 'whytro', 'committer_name': 'Whytro', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 12, 17, 19, 45, tzinfo=datetime.timezone.utc)}]",Whytro,20995911,,User,,5,,0,1

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
647599384,py-osrm,gis-ops/py-osrm,Lua,8,8,2,2,48,6,2,2,"[{'id': 1637237170, 'number': 30, 'closed': None, 'created': datetime.datetime(2023, 12, 9, 13, 16, 56, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 123, 'deletions': 113, 'state': 'open'}, {'id': 1498987933, 'number': 27, 'closed': datetime.datetime(2023, 9, 10, 19, 9, 42, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 9, 1, 14, 44, 15, tzinfo=datetime.timezone.utc), 'time_taken': 793527.0, 'time_delta': '9 days, 4:25:27', 'additions': 4337, 'deletions': 636, 'state': 'closed'}, {'id': 1492011815, 'number': 26, 'closed': datetime.datetime(2023, 8, 28, 12, 54, 45, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 8, 28, 12, 37, 32, tzinfo=datetime.timezone.utc), 'time_taken': 1033.0, 'time_delta': '0:17:13', 'additions': 17, 'deletions': 17, 'state': 'closed'}, {'id': 1491910346, 'number': 25, 'closed': datetime.datetime(2023, 8, 28, 11, 50, 39, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 8, 28, 11, 27, 18, tzinfo=datetime.timezone.utc), 'time_taken': 1401.0, 'time_delta': '0:23:21', 'additions': 10, 'deletions': 12, 'state': 'closed'}, {'id': 1491653559, 'number': 24, 'closed': datetime.datetime(2023, 8, 28, 11, 51, 11, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 8, 28, 8, 37, 28, tzinfo=datetime.timezone.utc), 'time_taken': 11623.0, 'time_delta': '3:13:43', 'additions': 0, 'deletions': 16, 'state': 'closed'}, {'id': 1486163180, 'number': 23, 'closed': datetime.datetime(2023, 8, 28, 6, 36, 22, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 8, 23, 10, 23, 25, tzinfo=datetime.timezone.utc), 'time_taken': 418377.0, 'time_delta': '4 days, 20:12:57', 'additions': 489, 'deletions': 265, 'state': 'closed'}, {'id': 1486128978, 'number': 22, 'closed': datetime.datetime(2023, 8, 23, 12, 24, 50, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 8, 23, 10, 1, 44, tzinfo=datetime.timezone.utc), 'time_taken': 8586.0, 'time_delta': '2:23:06', 'additions': 6, 'deletions': 25, 'state': 'closed'}, {'id': 1485712271, 'number': 21, 'closed': datetime.datetime(2023, 8, 23, 8, 14, 20, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 8, 23, 4, 1, 28, tzinfo=datetime.timezone.utc), 'time_taken': 15172.0, 'time_delta': '4:12:52', 'additions': 7, 'deletions': 1, 'state': 'closed'}, {'id': 1482107304, 'number': 19, 'closed': datetime.datetime(2023, 8, 22, 6, 40, 40, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 8, 21, 3, 26, 55, tzinfo=datetime.timezone.utc), 'time_taken': 98025.0, 'time_delta': '1 day, 3:13:45', 'additions': 20, 'deletions': 11, 'state': 'closed'}, {'id': 1481855369, 'number': 18, 'closed': datetime.datetime(2023, 8, 23, 8, 38, 49, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 8, 20, 17, 18, 16, tzinfo=datetime.timezone.utc), 'time_taken': 228033.0, 'time_delta': '2 days, 15:20:33', 'additions': 527, 'deletions': 53, 'state': 'closed'}, {'id': 1481383359, 'number': 17, 'closed': datetime.datetime(2023, 8, 20, 15, 5, 6, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 8, 19, 7, 44, 15, tzinfo=datetime.timezone.utc), 'time_taken': 112851.0, 'time_delta': '1 day, 7:20:51', 'additions': 749, 'deletions': 5, 'state': 'closed'}, {'id': 1465105620, 'number': 15, 'closed': datetime.datetime(2023, 8, 7, 11, 59, 20, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 8, 7, 11, 55, 25, tzinfo=datetime.timezone.utc), 'time_taken': 235.0, 'time_delta': '0:03:55', 'additions': 47, 'deletions': 0, 'state': 'closed'}, {'id': 1463678018, 'number': 13, 'closed': datetime.datetime(2023, 8, 7, 12, 46, 20, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 8, 5, 5, 45, 25, tzinfo=datetime.timezone.utc), 'time_taken': 198055.0, 'time_delta': '2 days, 7:00:55', 'additions': 100, 'deletions': 53, 'state': 'closed'}, {'id': 1455111051, 'number': 12, 'closed': datetime.datetime(2023, 7, 31, 16, 17, 6, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 7, 30, 11, 18, 16, tzinfo=datetime.timezone.utc), 'time_taken': 104330.0, 'time_delta': '1 day, 4:58:50', 'additions': 133, 'deletions': 27, 'state': 'closed'}, {'id': 1435780736, 'number': 9, 'closed': datetime.datetime(2023, 7, 18, 9, 14, 57, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 7, 15, 9, 27, 32, tzinfo=datetime.timezone.utc), 'time_taken': 258445.0, 'time_delta': '2 days, 23:47:25', 'additions': 3229, 'deletions': 449, 'state': 'closed'}, {'id': 1414840818, 'number': 6, 'closed': datetime.datetime(2023, 7, 10, 8, 25, 30, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 6, 30, 13, 15, 33, tzinfo=datetime.timezone.utc), 'time_taken': 846597.0, 'time_delta': '9 days, 19:09:57', 'additions': 555, 'deletions': 80, 'state': 'closed'}, {'id': 1397229911, 'number': 4, 'closed': datetime.datetime(2023, 6, 26, 9, 1, 18, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 6, 18, 18, 8, 27, tzinfo=datetime.timezone.utc), 'time_taken': 658371.0, 'time_delta': '7 days, 14:52:51', 'additions': 360, 'deletions': 7, 'state': 'closed'}, {'id': 1387505695, 'number': 3, 'closed': datetime.datetime(2023, 6, 18, 17, 11, 55, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 6, 11, 11, 51, 49, tzinfo=datetime.timezone.utc), 'time_taken': 624006.0, 'time_delta': '7 days, 5:20:06', 'additions': 367, 'deletions': 107, 'state': 'closed'}, {'id': 1376941929, 'number': 2, 'closed': datetime.datetime(2023, 6, 7, 6, 55, 5, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 6, 3, 12, 14, 22, tzinfo=datetime.timezone.utc), 'time_taken': 326443.0, 'time_delta': '3 days, 18:40:43', 'additions': 246, 'deletions': 0, 'state': 'closed'}]"
387478977,manylinux,gis-ops/manylinux,Shell,0,0,2,63,1370,0,9,0,"[{'id': 1456173077, 'number': 4, 'closed': datetime.datetime(2023, 7, 31, 14, 31, 2, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 7, 31, 12, 38, 50, tzinfo=datetime.timezone.utc), 'time_taken': 6732.0, 'time_delta': '1:52:12', 'additions': 75, 'deletions': 372, 'state': 'closed'}, {'id': 1456099338, 'number': 3, 'closed': datetime.datetime(2023, 7, 31, 12, 23, 3, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 7, 31, 11, 53, 23, tzinfo=datetime.timezone.utc), 'time_taken': 1780.0, 'time_delta': '0:29:40', 'additions': 448, 'deletions': 647, 'state': 'closed'}]"
