pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
668865421,Add `hiddump` - a utility to record HID events ,"Dear Tamas,

this PR adds a utility program named `hiddump` to the tools-directory. `hiddump` captures HID events and stores relative and normalized versions of those events in a file, which can then serve later as a template for sending HID events to an analysis guest. 

### Inner working of the tool

To record those events, the input subsystem of the Linux kernel is utilized. The `hiddump` reads `input_event`-structs from one or multiple event files under `/dev/input/`, which are continuosly polled during the recording period. The timing information, which is provided in the form of `timeval`-structs, is converted to a relative timestamp starting at the beginning of the recording. If the event houses coordinates, those are mapped to a value range, which qemu uses in its monitor protocol. Afterwards the events are dumped to `stdout` or written to a specified file in binary representation. By using the input event format of the Linux input subsystem the tool builds upon a proven format and a stable interface.

### Usage

The tool can be build with the command   
`gcc -o hiddump hiddump.c -lX11`.   
_Edit: The compilation of the tool is now hooked into the automake-system. It is performed, if the X11-library (-lX11) is available._

`hiddump` can then be used as follows:
```
    usage: ./hiddump [-h] [-e /dev/input/eventX] [file]

    A utility to record HID events

    positional arguments:
      file          binary file to store events

    optional arguments:
      -h                    show this help message and exit
      -e <eventfile>        event file to read events from;
                multiple event files can be specifed -e file1 -e file2 (max. 3)
      -d <seconds>          time frame in seconds to record events

    examples:
      # capture mouse events infinitely
      ./hiddump > events.in

      # read from specified event files for 20 secs
      ./hiddump -e /dev/input/event7 -e /dev/input/event16 -d 20 events.bin

    If no output file is specified as a positional argument, all events will be sent to stdout.
    If no event file is specified via '-e', the default event file for mouse events will be used.
    To capture events of a specific input device, use '-e' after retrieving the relevant event file via

        ls -l /dev/input/by-id | grep -E ""mouse|kbd""

    or alternatively

        cat /proc/bus/input/devices | grep -E ""mouse|kdb""
```

### File format 
To preserve the relative and normalized HID events for later use, the `input_event`-structs are stored sequentially in a binary file, whereas each entry consists of the following fields:

``` c
struct input_event {
	struct timeval time;     // relative to the start
	unsigned short type;     // EV_REL, EV_KEY, etc.
	unsigned short code;     // REL_X, BTN_LEFT, etc.
	unsigned int value;      // Coordinates, button down, etc.
};
```
In order to be able to identify a file as a valid HID template file, which was created by `hiddump` and contains HID events in the specified format, a short header is prepended at the beginning of the file. The header consists of 12 bytes in total. The magic number is derived from the string 'DRAK'.
```
| Symbol                    | Size  | Content             |
|---------------------------+-------+---------------------|
| Magic number              | DWORD | 0xCB 0xC1 0xD2 0xC4 |
| ASCII identifier ('DRAK') | DWORD | 0x44 0x52 0x41 0x4b |
| Version information       | DWORD | 0x01 0x00 0x00 0x00 |
```

I am planning to feed the output of the newly added tool `hiddump`, which follows the a/m file format, into the plugin for simulating human interaction, on which I am working actively.

Thank you already in advance for considering this pull request.
If you see any general issues with the concept or the code, please let me know.

Best regards,
Jan 
",True,1237,https://api.github.com/repos/tklengyel/drakvuf/pulls/1237,https://github.com/tklengyel/drakvuf/pull/1237,closed,845,2,8,1,8,6,0,0,[],2021-06-12 13:09:15+00:00,2021-06-14 15:25:38+00:00,180983.0,"2 days, 2:16:23","[{'comment_id': 650512354, 'comment_body': ""You'll want to have a check for this library in `configure.ac` and only enable compiling it if it was found"", 'comment_created': datetime.datetime(2021, 6, 13, 11, 35, 36, tzinfo=datetime.timezone.utc), 'commenter': 'tklengyel', 'type': 'User'}, {'comment_id': 650549429, 'comment_body': 'Added an AM_CONDITIONAL named `HAVE_LIBX11`, which is fed by the result of PKG_CHECK_MODULE for -lX11.  ', 'comment_created': datetime.datetime(2021, 6, 13, 16, 37, 37, tzinfo=datetime.timezone.utc), 'commenter': 'jgru', 'type': 'User'}, {'comment_id': 650821033, 'comment_body': '`lx111=0`? Prob wanted `lx11=0` instead', 'comment_created': datetime.datetime(2021, 6, 14, 10, 15, 9, tzinfo=datetime.timezone.utc), 'commenter': 'tklengyel', 'type': 'User'}, {'comment_id': 650823532, 'comment_body': 'Corrected. Sorry for the typo. (think this had no sideffects, since lx11 was undefined anyway) ', 'comment_created': datetime.datetime(2021, 6, 14, 10, 18, 51, tzinfo=datetime.timezone.utc), 'commenter': 'jgru', 'type': 'User'}, {'comment_id': 650825554, 'comment_body': 'Since you used PKG_CHECK_MODULES you want to use `X11_LIBS` here and also use LDFLAGS instead of LDADD. Probably also want CFLAGS added. Check the other makefiles for examples. ', 'comment_created': datetime.datetime(2021, 6, 14, 10, 22, tzinfo=datetime.timezone.utc), 'commenter': 'tklengyel', 'type': 'User'}, {'comment_id': 650836756, 'comment_body': 'Thanks for the hint. I changed it accordingly! (Used src/xen_helper/Makefile.am for orientation)', 'comment_created': datetime.datetime(2021, 6, 14, 10, 41, 13, tzinfo=datetime.timezone.utc), 'commenter': 'jgru', 'type': 'User'}]","[{'commit_sha': 'a007370cc63d8dca70a1d0aa8206d18ce6cb31de', 'committer_username': 'jgru', 'committer_name': 'Jan', 'committer_email': None, 'commit_date': datetime.datetime(2015, 4, 9, 14, 34, 28, tzinfo=datetime.timezone.utc)}]",Jan,11872675,,User,,63,,51,52
676110468,Add QMP-based HID simulation-plugin,"Dear Tamas, 

as discussed earlier, I send you a PR, which adds a plugin named `hidsim`, which can be used to perform simulation of user input by utilizing QEMU's machine protocol interface. 

For a description of the newly added plugin, please refer to `./src/plugins/hidsim/readme.org`

Thanks already in advance for reviewing and considering this PR.

Best regards,  
   Jan",True,1245,https://api.github.com/repos/tklengyel/drakvuf/pulls/1245,https://github.com/tklengyel/drakvuf/pull/1245,closed,2366,0,14,4,15,48,0,0,[],2021-06-23 09:25:47+00:00,2021-07-09 14:06:24+00:00,1399237.0,"16 days, 4:40:37","[{'comment_id': 656982290, 'comment_body': '```suggestion\r\n        this->template_path = config->template_fp;\r\n```', 'comment_created': datetime.datetime(2021, 6, 23, 10, 54, 14, tzinfo=datetime.timezone.utc), 'commenter': 'BonusPlay', 'type': 'User'}, {'comment_id': 656985080, 'comment_body': '```suggestion\r\n        this->template_path.c_str() : nullptr;\r\n```', 'comment_created': datetime.datetime(2021, 6, 23, 10, 58, 34, tzinfo=datetime.timezone.utc), 'commenter': 'BonusPlay', 'type': 'User'}, {'comment_id': 656985700, 'comment_body': ""Please don't. If you're accessing data across threads at least use atomic."", 'comment_created': datetime.datetime(2021, 6, 23, 10, 59, 32, tzinfo=datetime.timezone.utc), 'commenter': 'BonusPlay', 'type': 'User'}, {'comment_id': 656986043, 'comment_body': 'Please no raw C-style casts.', 'comment_created': datetime.datetime(2021, 6, 23, 11, 0, 1, tzinfo=datetime.timezone.utc), 'commenter': 'BonusPlay', 'type': 'User'}, {'comment_id': 656986586, 'comment_body': '```suggestion\r\n        if (pthread_join(this->t, NULL))\r\n```\r\nunnecessary braces', 'comment_created': datetime.datetime(2021, 6, 23, 11, 0, 54, tzinfo=datetime.timezone.utc), 'commenter': 'BonusPlay', 'type': 'User'}, {'comment_id': 656987563, 'comment_body': '`std::cerr`?', 'comment_created': datetime.datetime(2021, 6, 23, 11, 2, 24, tzinfo=datetime.timezone.utc), 'commenter': 'BonusPlay', 'type': 'User'}, {'comment_id': 656987674, 'comment_body': '`std::cerr`?', 'comment_created': datetime.datetime(2021, 6, 23, 11, 2, 36, tzinfo=datetime.timezone.utc), 'commenter': 'BonusPlay', 'type': 'User'}, {'comment_id': 656988224, 'comment_body': 'mixing pthread and C++ :(\r\nwhy not `std::thread`?', 'comment_created': datetime.datetime(2021, 6, 23, 11, 3, 27, tzinfo=datetime.timezone.utc), 'commenter': 'BonusPlay', 'type': 'User'}, {'comment_id': 657009953, 'comment_body': 'I wanted to keep it as close to raw C as possible. Should I perform a (re)rewrite to utilize std::thread, as I had a while back?', 'comment_created': datetime.datetime(2021, 6, 23, 11, 37, 16, tzinfo=datetime.timezone.utc), 'commenter': 'jgru', 'type': 'User'}, {'comment_id': 657014162, 'comment_body': ""I've found an alternative way to implement this:\r\nWe can call `qom-list /machine/unattached` to query devices emulated by QEMU.\r\nIn my case there's `device[6] (child<VGA>)`. Now we can call:\r\n`qom-get /machine/unattached/device[6]/xres` to get width, and similarly `yres` to get height of the display.\r\n\r\nWhat do you think?"", 'comment_created': datetime.datetime(2021, 6, 23, 11, 43, 51, tzinfo=datetime.timezone.utc), 'commenter': 'chivay', 'type': 'User'}, {'comment_id': 657018821, 'comment_body': 'Might as well just use standard c++ features', 'comment_created': datetime.datetime(2021, 6, 23, 11, 51, 5, tzinfo=datetime.timezone.utc), 'commenter': 'tklengyel', 'type': 'User'}, {'comment_id': 657018936, 'comment_body': '`file:/usr/local/src/drakvuf/src/helpers/hiddump/` is broken on GitHub', 'comment_created': datetime.datetime(2021, 6, 23, 11, 51, 15, tzinfo=datetime.timezone.utc), 'commenter': 'chivay', 'type': 'User'}, {'comment_id': 657019997, 'comment_body': ""IMO it wouldn't hurt if the commands were generated with json-c."", 'comment_created': datetime.datetime(2021, 6, 23, 11, 52, 52, tzinfo=datetime.timezone.utc), 'commenter': 'chivay', 'type': 'User'}, {'comment_id': 657020393, 'comment_body': 'No need to check for null', 'comment_created': datetime.datetime(2021, 6, 23, 11, 53, 27, tzinfo=datetime.timezone.utc), 'commenter': 'chivay', 'type': 'User'}, {'comment_id': 657020739, 'comment_body': 'Okay, I will rewrite it to use std::thread. ', 'comment_created': datetime.datetime(2021, 6, 23, 11, 53, 59, tzinfo=datetime.timezone.utc), 'commenter': 'jgru', 'type': 'User'}, {'comment_id': 657021045, 'comment_body': 'Unchecked return value', 'comment_created': datetime.datetime(2021, 6, 23, 11, 54, 23, tzinfo=datetime.timezone.utc), 'commenter': 'chivay', 'type': 'User'}, {'comment_id': 657031189, 'comment_body': '""In practice, you can assume that int is atomic."" -- https://www.gnu.org/software/libc/manual/html_node/Atomic-Types.html\r\n ...and bool is a typedefed int or am I wrong? \r\nI\'ll wrap it in sig_atomic_t nevertheless.', 'comment_created': datetime.datetime(2021, 6, 23, 12, 9, 22, tzinfo=datetime.timezone.utc), 'commenter': 'jgru', 'type': 'User'}, {'comment_id': 657032522, 'comment_body': 'I thought about that, but what would the benefit beside from notable overhead? \r\nA lot of events get generated in a microsecond intervals. It just adds complexity...especially computional-wise. ', 'comment_created': datetime.datetime(2021, 6, 23, 12, 11, 11, tzinfo=datetime.timezone.utc), 'commenter': 'jgru', 'type': 'User'}, {'comment_id': 657038159, 'comment_body': ""It's dynamically allocated, as one can't be sure, that it is not deleted in the meantime, I think, it is safer to check for NULL before freeing, as a caller, who allocated the `qmp_connection` in question can do, what he wants with the capabilities-ptr."", 'comment_created': datetime.datetime(2021, 6, 23, 12, 19, 19, tzinfo=datetime.timezone.utc), 'commenter': 'jgru', 'type': 'User'}, {'comment_id': 657039489, 'comment_body': 'Changed to `std::thread`', 'comment_created': datetime.datetime(2021, 6, 23, 12, 21, 8, tzinfo=datetime.timezone.utc), 'commenter': 'jgru', 'type': 'User'}, {'comment_id': 657039897, 'comment_body': 'Changed!', 'comment_created': datetime.datetime(2021, 6, 23, 12, 21, 41, tzinfo=datetime.timezone.utc), 'commenter': 'jgru', 'type': 'User'}, {'comment_id': 657040023, 'comment_body': 'Changed!', 'comment_created': datetime.datetime(2021, 6, 23, 12, 21, 51, tzinfo=datetime.timezone.utc), 'commenter': 'jgru', 'type': 'User'}, {'comment_id': 657040131, 'comment_body': 'Changed!', 'comment_created': datetime.datetime(2021, 6, 23, 12, 21, 59, tzinfo=datetime.timezone.utc), 'commenter': 'jgru', 'type': 'User'}, {'comment_id': 657040252, 'comment_body': 'Code changed.', 'comment_created': datetime.datetime(2021, 6, 23, 12, 22, 10, tzinfo=datetime.timezone.utc), 'commenter': 'jgru', 'type': 'User'}, {'comment_id': 657044950, 'comment_body': 'Changed.', 'comment_created': datetime.datetime(2021, 6, 23, 12, 28, 4, tzinfo=datetime.timezone.utc), 'commenter': 'jgru', 'type': 'User'}, {'comment_id': 657045110, 'comment_body': 'Changed!', 'comment_created': datetime.datetime(2021, 6, 23, 12, 28, 14, tzinfo=datetime.timezone.utc), 'commenter': 'jgru', 'type': 'User'}, {'comment_id': 657045202, 'comment_body': 'Corrected!', 'comment_created': datetime.datetime(2021, 6, 23, 12, 28, 25, tzinfo=datetime.timezone.utc), 'commenter': 'jgru', 'type': 'User'}, {'comment_id': 657047449, 'comment_body': 'Corrected!', 'comment_created': datetime.datetime(2021, 6, 23, 12, 31, 26, tzinfo=datetime.timezone.utc), 'commenter': 'jgru', 'type': 'User'}, {'comment_id': 657094444, 'comment_body': 'I evaluated the retrieval via QEMU\'s device model as well, but in my case it is -- somehow -- not that easy. Looking in ""my"" device tree yields the following content regarding vga:  \r\n```\r\n/machine/peripheral-anon/device[0]\r\n  type: VGA (string)\r\n  parent_bus: /machine/i440fx/pci.0 (link<bus>)\r\n  realized: True (bool)\r\n  <snip>\r\n  ymax: 0 (uint32)\r\n  yres: 0 (uint32)\r\n  xmax: 0 (uint32)\r\n  edid: False (bool)\r\n  xres: 0 (uint32)\r\n  <snip>\r\n```\r\nTherefore the utilization of screendump seemed to work best. \r\nDid I oversee something or are my thought erroneous? ', 'comment_created': datetime.datetime(2021, 6, 23, 13, 23, 38, tzinfo=datetime.timezone.utc), 'commenter': 'jgru', 'type': 'User'}, {'comment_id': 657094567, 'comment_body': 'Changed!', 'comment_created': datetime.datetime(2021, 6, 23, 13, 23, 47, tzinfo=datetime.timezone.utc), 'commenter': 'jgru', 'type': 'User'}, {'comment_id': 657212908, 'comment_body': 'Ah yes, you\'re right. I was lazy and used ""normal"" QEMU instead. Seems like Xen doesn\'t enable edid (?).\r\nOh well. ', 'comment_created': datetime.datetime(2021, 6, 23, 15, 22, 26, tzinfo=datetime.timezone.utc), 'commenter': 'chivay', 'type': 'User'}, {'comment_id': 657219180, 'comment_body': '>I think, it is safer to check for NULL\r\n\r\nNot really, free will be a noop when called with NULL :wink: ', 'comment_created': datetime.datetime(2021, 6, 23, 15, 27, 40, tzinfo=datetime.timezone.utc), 'commenter': 'chivay', 'type': 'User'}, {'comment_id': 657226907, 'comment_body': ""Yes, looks like it is disable by default, see https://xenbits.xen.org/docs/unstable/misc/xen-command-line.html#edid-x86\r\nBut don't know, if this is the reason, for not being able to retrieve this info. "", 'comment_created': datetime.datetime(2021, 6, 23, 15, 34, 29, tzinfo=datetime.timezone.utc), 'commenter': 'jgru', 'type': 'User'}, {'comment_id': 657231850, 'comment_body': 'Sound like a premature optimization to me.\r\nWe still have to send the data over the socket, QEMU has to parse JSON etc. Quite a lot of overhead comparing to what we have to do here.\r\n\r\nSafety and maintainability are IMO more important than raw performance (at least at this stage).', 'comment_created': datetime.datetime(2021, 6, 23, 15, 39, 46, tzinfo=datetime.timezone.utc), 'commenter': 'chivay', 'type': 'User'}, {'comment_id': 657258642, 'comment_body': ""Oh yes,....thought this would be undefined behaviour, but you're absolutely right..sorry. "", 'comment_created': datetime.datetime(2021, 6, 23, 16, 9, 19, tzinfo=datetime.timezone.utc), 'commenter': 'jgru', 'type': 'User'}, {'comment_id': 657261848, 'comment_body': ""Sure, maintainability comes first. But I think the maintainability of those simple format-strings is at least as good as the construction of json-objects IMHO. If you insist, I'll build up those strings with json-c...just say"", 'comment_created': datetime.datetime(2021, 6, 23, 16, 13, 20, tzinfo=datetime.timezone.utc), 'commenter': 'jgru', 'type': 'User'}, {'comment_id': 657263565, 'comment_body': 'I agree with @jgru, fairly simple for now, no issue with keeping it as-is', 'comment_created': datetime.datetime(2021, 6, 23, 16, 15, 31, tzinfo=datetime.timezone.utc), 'commenter': 'tklengyel', 'type': 'User'}, {'comment_id': 657269825, 'comment_body': 'Changed...set `qc->capabilities` to NULL, to make it obvious, that this intends to prevent double free-issues', 'comment_created': datetime.datetime(2021, 6, 23, 16, 23, 36, tzinfo=datetime.timezone.utc), 'commenter': 'jgru', 'type': 'User'}, {'comment_id': 658384294, 'comment_body': 'Any reason why this is a pointer?', 'comment_created': datetime.datetime(2021, 6, 25, 1, 2, 12, tzinfo=datetime.timezone.utc), 'commenter': 'BonusPlay', 'type': 'User'}, {'comment_id': 658524314, 'comment_body': 'Corrected! (This was an unintended left-over from reworking the `pthread`-solution. Sorry!)', 'comment_created': datetime.datetime(2021, 6, 25, 7, 8, 22, tzinfo=datetime.timezone.utc), 'commenter': 'jgru', 'type': 'User'}, {'comment_id': 658727283, 'comment_body': 'The xen command line option has nothing to do what option of qemu gets enabled. Use the xl config option `device_model_args = []` to pass addition arguments to QEMU if you need to.', 'comment_created': datetime.datetime(2021, 6, 25, 12, 31, 41, tzinfo=datetime.timezone.utc), 'commenter': 'tklengyel', 'type': 'User'}, {'comment_id': 658740306, 'comment_body': '> The xen command line option has nothing to do what option of qemu gets enabled. Use the xl config option `device_model_args = []` to pass addition arguments to QEMU if you need to.\r\n\r\nThanks for clarification, @tklengyel! \r\n\r\nIf everybody would be okay with the current solution using the qmp-`screendump`-command to retrieve the display dimensions, I would leave it as it is, since it is a generic solution, which is decoupled of the specification of a specific `device_model` IMHO. What do you think? \r\n\r\nFurthermore, is there anything, that I should change until the PR is ready for merging?  \r\nThe ""default""-build still fails, but by browsing the UI on Jenkins I can\'t derive the reason for that, do you have a hint, where to look for the problem?', 'comment_created': datetime.datetime(2021, 6, 25, 12, 53, 9, tzinfo=datetime.timezone.utc), 'commenter': 'jgru', 'type': 'User'}, {'comment_id': 664170005, 'comment_body': 'I would really use json-c here instead of substituting path ""by hand"". This was a source of errors already in the past.', 'comment_created': datetime.datetime(2021, 7, 6, 0, 50, 3, tzinfo=datetime.timezone.utc), 'commenter': 'icedevml', 'type': 'User'}, {'comment_id': 664170167, 'comment_body': 'We have a lot of problems with JSON being glued ""by hand"" already.\r\n\r\nI think I\'ve submitted at least 10 PRs correcting typos in such JSONs generated ""by hand"" and this was pretty frustrating as the JSON parse errors are thrown in runtime.\r\n\r\nRight now some user-provided parameters are glued with JSON template using format string, this was a source of errors in the past already.\r\nhttps://github.com/tklengyel/drakvuf/pull/1245/files#r664170005', 'comment_created': datetime.datetime(2021, 7, 6, 0, 50, 47, tzinfo=datetime.timezone.utc), 'commenter': 'icedevml', 'type': 'User'}, {'comment_id': 664900252, 'comment_body': ""Why do we guard here against calling destructor multiple times? I don't think this is going to happen unless there is some corruption."", 'comment_created': datetime.datetime(2021, 7, 6, 21, 50, 2, tzinfo=datetime.timezone.utc), 'commenter': 'icedevml', 'type': 'User'}, {'comment_id': 665252070, 'comment_body': 'Resolved.', 'comment_created': datetime.datetime(2021, 7, 7, 10, 37, 37, tzinfo=datetime.timezone.utc), 'commenter': 'jgru', 'type': 'User'}, {'comment_id': 665252499, 'comment_body': 'I changed each and every QMP-command construction inside hid_injection.cpp to be based on json_objects.', 'comment_created': datetime.datetime(2021, 7, 7, 10, 38, 22, tzinfo=datetime.timezone.utc), 'commenter': 'jgru', 'type': 'User'}, {'comment_id': 665280133, 'comment_body': ""The thought behind it, was that it's theoretically possible to call it multiple times, but you are right, should never happen unless corruption. I removed it to simplify the code."", 'comment_created': datetime.datetime(2021, 7, 7, 11, 23, 22, tzinfo=datetime.timezone.utc), 'commenter': 'jgru', 'type': 'User'}]","[{'commit_sha': '46452b9ab6526831f982a35f945634307f15da1e', 'committer_username': 'jgru', 'committer_name': 'Jan', 'committer_email': None, 'commit_date': datetime.datetime(2015, 4, 9, 14, 34, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4fb70054262e35f63d6a15ba9cacacbbcc63f183', 'committer_username': 'jgru', 'committer_name': 'Jan', 'committer_email': None, 'commit_date': datetime.datetime(2015, 4, 9, 14, 34, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bb898c405bff9468b39fde53e47522b830318f1c', 'committer_username': 'jgru', 'committer_name': 'Jan', 'committer_email': None, 'commit_date': datetime.datetime(2015, 4, 9, 14, 34, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd7c9ce842229a2a8c632c8ec6cdc6f7a73baea22', 'committer_username': 'jgru', 'committer_name': 'Jan', 'committer_email': None, 'commit_date': datetime.datetime(2015, 4, 9, 14, 34, 28, tzinfo=datetime.timezone.utc)}]",Jan,11872675,,User,,63,,51,52
700679257,Enhance HID simulation by automatic button clicking,"Dear Tamas,

this pull requests extends the functionality of the `hidsim`-plugin with the ability to scan the GUI of the default desktop for windows of interest and automatically click on those regions, when running a Windows 7-guest.

Please refer to `./src/plugins/hidsim/readme.org` for the documentation on the usage of this feature and a thorough description of the concepts behind the implementation.

Thanks already in advance for reviewing and considering this PR.

Best regards,
Jan
",True,1275,https://api.github.com/repos/tklengyel/drakvuf/pulls/1275,https://github.com/tklengyel/drakvuf/pull/1275,closed,4308,69,27,75,15,138,0,0,[],2021-07-31 08:55:22+00:00,2021-08-13 16:41:45+00:00,1151183.0,"13 days, 7:46:23","[{'comment_id': 680501956, 'comment_body': '`std::lock_guard`', 'comment_created': datetime.datetime(2021, 8, 1, 12, 10, 44, tzinfo=datetime.timezone.utc), 'commenter': 'BonusPlay', 'type': 'User'}, {'comment_id': 680502189, 'comment_body': ""1) I'm 99.9% sure `register_trap` will shadow some already existing function name and cause confusion, please rename it.\r\n2) I'm 99.9% sure `event_response_t` type is already defined somewhere so you don't need to redefine it."", 'comment_created': datetime.datetime(2021, 8, 1, 12, 12, 22, tzinfo=datetime.timezone.utc), 'commenter': 'BonusPlay', 'type': 'User'}, {'comment_id': 680502335, 'comment_body': 'Please add a scope here, no need to hold lock any longer than this.', 'comment_created': datetime.datetime(2021, 8, 1, 12, 13, 47, tzinfo=datetime.timezone.utc), 'commenter': 'BonusPlay', 'type': 'User'}, {'comment_id': 680502745, 'comment_body': 'This function will leak `win32k_json` on eaerly returns.', 'comment_created': datetime.datetime(2021, 8, 1, 12, 16, 38, tzinfo=datetime.timezone.utc), 'commenter': 'BonusPlay', 'type': 'User'}, {'comment_id': 680502817, 'comment_body': '`vmi_lock_guard` with scope', 'comment_created': datetime.datetime(2021, 8, 1, 12, 17, 11, tzinfo=datetime.timezone.utc), 'commenter': 'BonusPlay', 'type': 'User'}, {'comment_id': 680502915, 'comment_body': '`vmi_lock_guard` with scope', 'comment_created': datetime.datetime(2021, 8, 1, 12, 18, 3, tzinfo=datetime.timezone.utc), 'commenter': 'BonusPlay', 'type': 'User'}, {'comment_id': 680502982, 'comment_body': '`std::lock_guard`', 'comment_created': datetime.datetime(2021, 8, 1, 12, 18, 35, tzinfo=datetime.timezone.utc), 'commenter': 'BonusPlay', 'type': 'User'}, {'comment_id': 680503007, 'comment_body': '`vmi_lock_guard`', 'comment_created': datetime.datetime(2021, 8, 1, 12, 18, 51, tzinfo=datetime.timezone.utc), 'commenter': 'BonusPlay', 'type': 'User'}, {'comment_id': 680503054, 'comment_body': '`PRINT_DEBUG` here or it will be a nightmare to debug', 'comment_created': datetime.datetime(2021, 8, 1, 12, 19, 13, tzinfo=datetime.timezone.utc), 'commenter': 'BonusPlay', 'type': 'User'}, {'comment_id': 680503140, 'comment_body': 'commented out code', 'comment_created': datetime.datetime(2021, 8, 1, 12, 19, 59, tzinfo=datetime.timezone.utc), 'commenter': 'BonusPlay', 'type': 'User'}, {'comment_id': 680503400, 'comment_body': ""I don't see the write happening anywhere..."", 'comment_created': datetime.datetime(2021, 8, 1, 12, 21, 45, tzinfo=datetime.timezone.utc), 'commenter': 'BonusPlay', 'type': 'User'}, {'comment_id': 680503523, 'comment_body': 'Pretty sure there are like 10 not needed newlines in there.', 'comment_created': datetime.datetime(2021, 8, 1, 12, 22, 35, tzinfo=datetime.timezone.utc), 'commenter': 'BonusPlay', 'type': 'User'}, {'comment_id': 680503689, 'comment_body': '```suggestion\r\n        return gui_init_reconstruction(drakvuf, this->win32k_json_path.c_str(), is_x86) == 0;\r\n```', 'comment_created': datetime.datetime(2021, 8, 1, 12, 24, 19, tzinfo=datetime.timezone.utc), 'commenter': 'BonusPlay', 'type': 'User'}, {'comment_id': 680716832, 'comment_body': 'A leftover, which was accidentally included by squashing the commits, sorry! Removed.', 'comment_created': datetime.datetime(2021, 8, 2, 7, 28, 30, tzinfo=datetime.timezone.utc), 'commenter': 'jgru', 'type': 'User'}, {'comment_id': 680728123, 'comment_body': 'Added a `PRINT_DEBUG` statement. ', 'comment_created': datetime.datetime(2021, 8, 2, 7, 43, 24, tzinfo=datetime.timezone.utc), 'commenter': 'jgru', 'type': 'User'}, {'comment_id': 680728321, 'comment_body': 'Removed it.', 'comment_created': datetime.datetime(2021, 8, 2, 7, 43, 33, tzinfo=datetime.timezone.utc), 'commenter': 'jgru', 'type': 'User'}, {'comment_id': 680728814, 'comment_body': 'Performed a clean up to condense the code.', 'comment_created': datetime.datetime(2021, 8, 2, 7, 43, 58, tzinfo=datetime.timezone.utc), 'commenter': 'jgru', 'type': 'User'}, {'comment_id': 680729182, 'comment_body': 'Incorporated!', 'comment_created': datetime.datetime(2021, 8, 2, 7, 44, 16, tzinfo=datetime.timezone.utc), 'commenter': 'jgru', 'type': 'User'}, {'comment_id': 680733833, 'comment_body': 'Changed!', 'comment_created': datetime.datetime(2021, 8, 2, 7, 48, 12, tzinfo=datetime.timezone.utc), 'commenter': 'jgru', 'type': 'User'}, {'comment_id': 680736816, 'comment_body': 'Changed.', 'comment_created': datetime.datetime(2021, 8, 2, 7, 50, 42, tzinfo=datetime.timezone.utc), 'commenter': 'jgru', 'type': 'User'}, {'comment_id': 680741732, 'comment_body': 'Changed.', 'comment_created': datetime.datetime(2021, 8, 2, 7, 54, 54, tzinfo=datetime.timezone.utc), 'commenter': 'jgru', 'type': 'User'}, {'comment_id': 680748208, 'comment_body': 'Added a scope.', 'comment_created': datetime.datetime(2021, 8, 2, 8, 0, 17, tzinfo=datetime.timezone.utc), 'commenter': 'jgru', 'type': 'User'}, {'comment_id': 680768551, 'comment_body': ""> I'm 99.9% sure `register_trap` will shadow some already existing function name and cause confusion, please rename it.\r\n \r\nChanged.\r\n \r\n >  I'm 99.9% sure `event_response_t` type is already defined somewhere so you don't need to redefine it.\r\n \r\n`event_response_t` is defined in `libvmi.h`. However, since I'm passing a function pointer, I don't see another way, than defining the function signature of the expected function pointer, which should be passed as an argument to this function.  \r\nPlease give me some direction...\r\n"", 'comment_created': datetime.datetime(2021, 8, 2, 8, 18, 15, tzinfo=datetime.timezone.utc), 'commenter': 'jgru', 'type': 'User'}, {'comment_id': 680772502, 'comment_body': 'Changed to `std::lock_guard`', 'comment_created': datetime.datetime(2021, 8, 2, 8, 24, 5, tzinfo=datetime.timezone.utc), 'commenter': 'jgru', 'type': 'User'}, {'comment_id': 680772666, 'comment_body': 'Changed to `std::lock_guard`', 'comment_created': datetime.datetime(2021, 8, 2, 8, 24, 18, tzinfo=datetime.timezone.utc), 'commenter': 'jgru', 'type': 'User'}, {'comment_id': 682155061, 'comment_body': ""We usually use: https://github.com/tklengyel/drakvuf/blob/03a21caedf63a086f2f64683f56efecf5cbc1226/src/plugins/plugins_ex.h#L413 typedef, but now I see it's in pluginex not in plugin. Imo it could easily be moved to superclass."", 'comment_created': datetime.datetime(2021, 8, 3, 22, 56, 59, tzinfo=datetime.timezone.utc), 'commenter': 'BonusPlay', 'type': 'User'}, {'comment_id': 682714241, 'comment_body': ""> now I see it's in pluginex not in plugin. Imo it could easily be moved to superclass.\r\n\r\nSince this is `gui_monitor.cpp` and not in the actual plugin-class: Do you think a change would have a real benefit or could you live with the current implementation, @BonusPlay ?"", 'comment_created': datetime.datetime(2021, 8, 4, 15, 15, 45, tzinfo=datetime.timezone.utc), 'commenter': 'jgru', 'type': 'User'}, {'comment_id': 683437843, 'comment_body': ""Maybe I'm a bore but.. you never check malloc returning value. Null pointer dereference is UB and that's not good idea as for me. (this is not the only place in your code without this check)"", 'comment_created': datetime.datetime(2021, 8, 5, 13, 11, 3, tzinfo=datetime.timezone.utc), 'commenter': 'exescript', 'type': 'User'}, {'comment_id': 683439154, 'comment_body': 'why function definitions are placed in header "".h"" files?', 'comment_created': datetime.datetime(2021, 8, 5, 13, 12, 36, tzinfo=datetime.timezone.utc), 'commenter': 'exescript', 'type': 'User'}, {'comment_id': 683473007, 'comment_body': 'Thanks for your review, @exescript. \r\nShould I check `malloc`s success each and every time I call the function in hidsim or just in there?\r\n \r\nShould I maybe write a wrapper function like this\r\n```c\r\nvoid * xmalloc(size_t size) \r\n{\r\n    void* p; \r\n    p = malloc(size); \r\n    if (!p)\r\n    {\r\n        PRINT_DEBUG(...);\r\n        exit(1);\r\n    }  \r\n    return p;\r\n}\r\n```\r\nwhich is called throughout my code? What do you think....? What is you opinion on this, @icedevml / @bonusplay? ', 'comment_created': datetime.datetime(2021, 8, 5, 13, 51, 43, tzinfo=datetime.timezone.utc), 'commenter': 'jgru', 'type': 'User'}, {'comment_id': 683480257, 'comment_body': 'I thought, it is okay to place it in there, since some plugins also house function implementations in their `private.h` (e.g. https://github.com/tklengyel/drakvuf/blob/master/src/plugins/tlsmon/private.h) and the overhead is negligible. \r\n\r\nShould I separate all implementations from their declarations in the .h-files in `./src/plugins/hidsim/gui/`? \r\nAgain: What is you opinion on this, @icedevml / @bonusplay? ', 'comment_created': datetime.datetime(2021, 8, 5, 13, 59, 42, tzinfo=datetime.timezone.utc), 'commenter': 'jgru', 'type': 'User'}, {'comment_id': 683495471, 'comment_body': 'Yep, fine with me.', 'comment_created': datetime.datetime(2021, 8, 5, 14, 16, 21, tzinfo=datetime.timezone.utc), 'commenter': 'BonusPlay', 'type': 'User'}, {'comment_id': 683499946, 'comment_body': ""I'd like implementations in separate file - it's easier for someone who wants to understand the code to just read .h with comments and signatures instead of scrolling 100LoC of function body."", 'comment_created': datetime.datetime(2021, 8, 5, 14, 21, 9, tzinfo=datetime.timezone.utc), 'commenter': 'BonusPlay', 'type': 'User'}, {'comment_id': 683501325, 'comment_body': ""Don't ask me as I'd tell you to purge out of existence every instance of `malloc`/`new` ¯\\\\\\_(ツ)\\_/¯\r\nOpinions @kscieslinski @chivay?"", 'comment_created': datetime.datetime(2021, 8, 5, 14, 22, 31, tzinfo=datetime.timezone.utc), 'commenter': 'BonusPlay', 'type': 'User'}, {'comment_id': 684076286, 'comment_body': 'Changed in 512cd01a19b8ee1822ea4fc9f3f00ca309c655fc, @BonusPlay @exescript !', 'comment_created': datetime.datetime(2021, 8, 6, 9, 3, 6, tzinfo=datetime.timezone.utc), 'commenter': 'jgru', 'type': 'User'}, {'comment_id': 684261989, 'comment_body': 'Personally, I would avoid using libc functions such as malloc/free in C++ code. But yeah, checking for allocation failures would be nice.', 'comment_created': datetime.datetime(2021, 8, 6, 14, 4, 36, tzinfo=datetime.timezone.utc), 'commenter': 'chivay', 'type': 'User'}, {'comment_id': 684265561, 'comment_body': '> Personally, I would avoid using libc functions such as malloc/free in C++ code. But yeah, checking for allocation failures would be nice.\r\n\r\nThanks, @chivay. I intentionally implemented most of the plugin in raw C-style, which I voted with @BonusPlay and @icedevml...so I prefer staying with that. I will add checks for allocation failures. ', 'comment_created': datetime.datetime(2021, 8, 6, 14, 9, 16, tzinfo=datetime.timezone.utc), 'commenter': 'jgru', 'type': 'User'}, {'comment_id': 684273675, 'comment_body': ""I think that the simplest way would be to just use glib allocator functions such as g_malloc.\r\nWe're already linking against it so IMO it would be better than writing custom wrappers. "", 'comment_created': datetime.datetime(2021, 8, 6, 14, 20, 26, tzinfo=datetime.timezone.utc), 'commenter': 'chivay', 'type': 'User'}, {'comment_id': 684281212, 'comment_body': ""Isn't it better to use calloc instead of malloc(num * sizeof) + memset? \r\n(or g_malloc0, I suppose)"", 'comment_created': datetime.datetime(2021, 8, 6, 14, 30, 41, tzinfo=datetime.timezone.utc), 'commenter': 'exescript', 'type': 'User'}, {'comment_id': 684592621, 'comment_body': 'Changed in 117b2e134f2a0ef99990a085eb32ef28983f4281, thanks @exescript.', 'comment_created': datetime.datetime(2021, 8, 7, 6, 28, 7, tzinfo=datetime.timezone.utc), 'commenter': 'jgru', 'type': 'User'}, {'comment_id': 684593291, 'comment_body': ""> I think that the simplest way would be to just use glib allocator functions such as g_malloc.\r\n\r\n`g_malloc` will abort the application, when the memory application fails (see e.g. [here](http://www.gtk-server.org/gtk1/glib/glib-memory-allocation.html)). Since this is not what should be done for a thread, which is not absolutely mission critical for DRAKVUF's overall goal, I decided to stay with glibc's `malloc` and added the appropriate checks. Those were added in 467a35a4dd03721782051369be2699d463a37fcf. Thanks for the hint, @exescript, and the corresponding input, @chivay!"", 'comment_created': datetime.datetime(2021, 8, 7, 6, 35, 15, tzinfo=datetime.timezone.utc), 'commenter': 'jgru', 'type': 'User'}, {'comment_id': 684611911, 'comment_body': 'I think the correct way of calloc usage here is:\r\nwchar_t* s = (wchar_t*) calloc(len, sizeof(wchar_t));\r\n\r\nThis is better because calloc has internal check for size multiplication overflow (sizeof * len).', 'comment_created': datetime.datetime(2021, 8, 7, 9, 46, 52, tzinfo=datetime.timezone.utc), 'commenter': 'exescript', 'type': 'User'}, {'comment_id': 684614012, 'comment_body': 'Makes total sense, thanks @exescript! Changed in 44490fb04916dc41686d1d714bde7758b5fd598d.', 'comment_created': datetime.datetime(2021, 8, 7, 10, 8, 37, tzinfo=datetime.timezone.utc), 'commenter': 'jgru', 'type': 'User'}, {'comment_id': 684618691, 'comment_body': 'calloc ?', 'comment_created': datetime.datetime(2021, 8, 7, 10, 57, 15, tzinfo=datetime.timezone.utc), 'commenter': 'exescript', 'type': 'User'}, {'comment_id': 684618716, 'comment_body': 'empty line', 'comment_created': datetime.datetime(2021, 8, 7, 10, 57, 34, tzinfo=datetime.timezone.utc), 'commenter': 'exescript', 'type': 'User'}, {'comment_id': 684618753, 'comment_body': 'malloc result check?', 'comment_created': datetime.datetime(2021, 8, 7, 10, 57, 56, tzinfo=datetime.timezone.utc), 'commenter': 'exescript', 'type': 'User'}, {'comment_id': 684618774, 'comment_body': 'empty line', 'comment_created': datetime.datetime(2021, 8, 7, 10, 58, 10, tzinfo=datetime.timezone.utc), 'commenter': 'exescript', 'type': 'User'}, {'comment_id': 684619406, 'comment_body': 'bool is_x86 = pm == VMI_PM_PAE;\r\nis enough :)', 'comment_created': datetime.datetime(2021, 8, 7, 11, 5, 31, tzinfo=datetime.timezone.utc), 'commenter': 'exescript', 'type': 'User'}, {'comment_id': 684620201, 'comment_body': 'Changed in f22d6d3460047e8db37afebe41201d46bfc24b90', 'comment_created': datetime.datetime(2021, 8, 7, 11, 13, 36, tzinfo=datetime.timezone.utc), 'commenter': 'jgru', 'type': 'User'}, {'comment_id': 684620241, 'comment_body': 'Removed', 'comment_created': datetime.datetime(2021, 8, 7, 11, 13, 52, tzinfo=datetime.timezone.utc), 'commenter': 'jgru', 'type': 'User'}, {'comment_id': 684620336, 'comment_body': 'Added additional checks for allocation failures, which sneaked through my search and replace in bb3b7867851265325991cdc23361e049ab5cf85f and bc66be92ca943a6d4a6472e76c10c0801b6c0d1a', 'comment_created': datetime.datetime(2021, 8, 7, 11, 14, 49, tzinfo=datetime.timezone.utc), 'commenter': 'jgru', 'type': 'User'}, {'comment_id': 684620339, 'comment_body': 'Removed', 'comment_created': datetime.datetime(2021, 8, 7, 11, 14, 58, tzinfo=datetime.timezone.utc), 'commenter': 'jgru', 'type': 'User'}, {'comment_id': 684620365, 'comment_body': 'Changed in 1e27e2979ac71a0dc3de2f3758ed61c48c15e3de', 'comment_created': datetime.datetime(2021, 8, 7, 11, 15, 12, tzinfo=datetime.timezone.utc), 'commenter': 'jgru', 'type': 'User'}, {'comment_id': 684652675, 'comment_body': 'fix comparison of unsigned type and 0 and then ...\r\nLGTM ', 'comment_created': datetime.datetime(2021, 8, 7, 16, 36, 2, tzinfo=datetime.timezone.utc), 'commenter': 'exescript', 'type': 'User'}, {'comment_id': 684657065, 'comment_body': 'Thanks, @exescript! Changed the predicate 3558eb368bb0dbe2cf8fe0189457b7ed271b6630\r\n', 'comment_created': datetime.datetime(2021, 8, 7, 17, 18, 54, tzinfo=datetime.timezone.utc), 'commenter': 'jgru', 'type': 'User'}, {'comment_id': 684659707, 'comment_body': ""That's not an issue: I can not fully understand the logic of this replacement. Is this code equivalent to previous version?"", 'comment_created': datetime.datetime(2021, 8, 7, 17, 46, 27, tzinfo=datetime.timezone.utc), 'commenter': 'exescript', 'type': 'User'}, {'comment_id': 684661234, 'comment_body': '> Is this code equivalent to previous version?\r\n\r\nIt\'s not equivalent, it actually corrects the calculation of the amount of possible shifts.   \r\n\r\nIn the housing function it is checked, whether the target-string (defined in `vmi_win_gui_filter_definitions.h`) can be found within the first  `MAX_DISPLACEMENT` positions of the candidate window\'s text. \r\n\r\nThis statement here\r\n```\r\nmax_disp = tlen - llen < MAX_DISPLACEMENT ?\r\n                tlen - llen : MAX_DISPLACEMENT;\r\n``` \r\ncalculates the maximum displacement to take into account -- meaning how many characters to shift through, which is dependent of the overall length of the window\'s text and the length of the target text. \r\nE.g.: Looking at the window-text of `&Agree` and the target-text `agree`,  then two comparisons will be conducted (comparing ""&Agre"" with ""agree"" and ""Agree"" with ""agree"").  \r\n\r\nHope, this clarifies the operations.\r\n', 'comment_created': datetime.datetime(2021, 8, 7, 18, 2, 16, tzinfo=datetime.timezone.utc), 'commenter': 'jgru', 'type': 'User'}, {'comment_id': 686768922, 'comment_body': '```suggestion\r\nvoid print_atom(gpointer key, gpointer value, gpointer user_data)\r\n```', 'comment_created': datetime.datetime(2021, 8, 11, 12, 11, 30, tzinfo=datetime.timezone.utc), 'commenter': 'chivay', 'type': 'User'}, {'comment_id': 686770683, 'comment_body': ""Looks like we're leaking memory in case any of these fails.\r\nAlso, redundant casts."", 'comment_created': datetime.datetime(2021, 8, 11, 12, 14, 2, tzinfo=datetime.timezone.utc), 'commenter': 'chivay', 'type': 'User'}, {'comment_id': 686779055, 'comment_body': 'Unchecked memory allocation', 'comment_created': datetime.datetime(2021, 8, 11, 12, 24, 10, tzinfo=datetime.timezone.utc), 'commenter': 'chivay', 'type': 'User'}, {'comment_id': 686783791, 'comment_body': '```suggestion\r\n            symbol_offsets.atom_table_num_buckets_off, 0, (uint32_t*)&num_buckets))\r\n```\r\n\r\nThis cast seems redundant', 'comment_created': datetime.datetime(2021, 8, 11, 12, 30, 30, tzinfo=datetime.timezone.utc), 'commenter': 'chivay', 'type': 'User'}, {'comment_id': 686790399, 'comment_body': 'Unchecked memory allocations', 'comment_created': datetime.datetime(2021, 8, 11, 12, 39, 31, tzinfo=datetime.timezone.utc), 'commenter': 'chivay', 'type': 'User'}, {'comment_id': 686793096, 'comment_body': 'Any specific reason to use while loop instead of for? It seems more natural', 'comment_created': datetime.datetime(2021, 8, 11, 12, 43, 7, tzinfo=datetime.timezone.utc), 'commenter': 'chivay', 'type': 'User'}, {'comment_id': 686794436, 'comment_body': 'These variables can be moved inside the loop;', 'comment_created': datetime.datetime(2021, 8, 11, 12, 44, 50, tzinfo=datetime.timezone.utc), 'commenter': 'chivay', 'type': 'User'}, {'comment_id': 686796164, 'comment_body': '```suggestion\r\nvoid print_atom(gpointer key, gpointer value, gpointer user_data);\r\n```', 'comment_created': datetime.datetime(2021, 8, 11, 12, 47, 10, tzinfo=datetime.timezone.utc), 'commenter': 'chivay', 'type': 'User'}, {'comment_id': 686796892, 'comment_body': '```suggestion\r\n * BTN_TEXT is contained within a longer window text.\r\n```', 'comment_created': datetime.datetime(2021, 8, 11, 12, 47, 57, tzinfo=datetime.timezone.utc), 'commenter': 'chivay', 'type': 'User'}, {'comment_id': 686797734, 'comment_body': '```suggestion\r\nconst wchar_t* IRRELEVANT_ATOM_CLASSES[] =\r\n```', 'comment_created': datetime.datetime(2021, 8, 11, 12, 48, 58, tzinfo=datetime.timezone.utc), 'commenter': 'chivay', 'type': 'User'}, {'comment_id': 686804944, 'comment_body': 'Quite a few mistakes in error messages of this function `-struct`, `-field`. I presume they come from copy pasting  ;)\r\n\r\nMaybe introducing two helper functions for retrieving sizes and offsets would be helpful?\r\nThey could also simplify `find_offsets_from_win32k_json`', 'comment_created': datetime.datetime(2021, 8, 11, 12, 57, 54, tzinfo=datetime.timezone.utc), 'commenter': 'chivay', 'type': 'User'}, {'comment_id': 686806749, 'comment_body': 'Please, be consistent and use stderr instead of printf', 'comment_created': datetime.datetime(2021, 8, 11, 13, 0, 7, tzinfo=datetime.timezone.utc), 'commenter': 'chivay', 'type': 'User'}, {'comment_id': 686814458, 'comment_body': '```suggestion\r\nIf you are observing a Windows 7 system, you can specify ~--hid-monitor-gui~ and supply a win32k-IST-file via ~-W~ like this:\r\n```', 'comment_created': datetime.datetime(2021, 8, 11, 13, 9, 27, tzinfo=datetime.timezone.utc), 'commenter': 'chivay', 'type': 'User'}, {'comment_id': 686876724, 'comment_body': ""Are those used anywhere? I can't find any usage apart from setting the fields.\r\n\r\nOTOH, adding redundant fields is IMO a bad idea.\r\nPersonally I'd use x,y coordinates and width/height instead of two point, but I guess it's a matter of preference."", 'comment_created': datetime.datetime(2021, 8, 11, 14, 17, 51, tzinfo=datetime.timezone.utc), 'commenter': 'chivay', 'type': 'User'}, {'comment_id': 686877964, 'comment_body': '```suggestion\r\n    addr_t obj_hdr_nameinfo_addr = 0;\r\n```', 'comment_created': datetime.datetime(2021, 8, 11, 14, 19, 8, tzinfo=datetime.timezone.utc), 'commenter': 'chivay', 'type': 'User'}, {'comment_id': 686890155, 'comment_body': '```suggestion\r\n    size_t h = root->r.y1;\r\n```', 'comment_created': datetime.datetime(2021, 8, 11, 14, 31, 46, tzinfo=datetime.timezone.utc), 'commenter': 'chivay', 'type': 'User'}, {'comment_id': 686898835, 'comment_body': 'Redundant cast', 'comment_created': datetime.datetime(2021, 8, 11, 14, 41, 9, tzinfo=datetime.timezone.utc), 'commenter': 'chivay', 'type': 'User'}, {'comment_id': 686899588, 'comment_body': ""More redundant casts in this function.\r\nAnd I don't really get why set the `ret` variable  if we're going to overwrite it anyway :thinking: "", 'comment_created': datetime.datetime(2021, 8, 11, 14, 42, 1, tzinfo=datetime.timezone.utc), 'commenter': 'chivay', 'type': 'User'}, {'comment_id': 686902412, 'comment_body': 'can `x < 0` be ever true?', 'comment_created': datetime.datetime(2021, 8, 11, 14, 44, 56, tzinfo=datetime.timezone.utc), 'commenter': 'chivay', 'type': 'User'}, {'comment_id': 686903484, 'comment_body': 'Maybe allocate the structure first, and copy the data directly instead of using temporaries?', 'comment_created': datetime.datetime(2021, 8, 11, 14, 46, 8, tzinfo=datetime.timezone.utc), 'commenter': 'chivay', 'type': 'User'}, {'comment_id': 687433129, 'comment_body': 'Yes, I double-checked that. `x` will be smaller than zero in rare cases, where a window and its relevant button protrudes the left frame edge. ', 'comment_created': datetime.datetime(2021, 8, 12, 6, 46, 30, tzinfo=datetime.timezone.utc), 'commenter': 'jgru', 'type': 'User'}, {'comment_id': 687438312, 'comment_body': 'Fixed in 0bd10f9c48cc640fa0bed377ccdb95d0f0d95e0d and 82654b669423aecdebb87f139fda10d47c7a5871', 'comment_created': datetime.datetime(2021, 8, 12, 6, 55, 58, tzinfo=datetime.timezone.utc), 'commenter': 'jgru', 'type': 'User'}, {'comment_id': 687438562, 'comment_body': 'Added in 4f4ea16613bb07cde6357047e9cacd22c27b1900', 'comment_created': datetime.datetime(2021, 8, 12, 6, 56, 19, tzinfo=datetime.timezone.utc), 'commenter': 'jgru', 'type': 'User'}, {'comment_id': 687438655, 'comment_body': 'Changed in fe0998f12563d5015b04349d52677fb2e8a5a9cd', 'comment_created': datetime.datetime(2021, 8, 12, 6, 56, 30, tzinfo=datetime.timezone.utc), 'commenter': 'jgru', 'type': 'User'}, {'comment_id': 687439164, 'comment_body': 'Checks added in dd2bef04ae0ccf5d3e21f5b4ad10131455b07cfe', 'comment_created': datetime.datetime(2021, 8, 12, 6, 57, 25, tzinfo=datetime.timezone.utc), 'commenter': 'jgru', 'type': 'User'}, {'comment_id': 687439847, 'comment_body': 'Changed in fe0998f12563d5015b04349d52677fb2e8a5a9cd', 'comment_created': datetime.datetime(2021, 8, 12, 6, 58, 39, tzinfo=datetime.timezone.utc), 'commenter': 'jgru', 'type': 'User'}, {'comment_id': 687440720, 'comment_body': ""> And I don't really get why set the ret variable if we're going to overwrite it anyway thinking\r\n\r\nThanks for catching this bug. Changed in 6c187990d3e5598875d99bc4ceada013e7b3c167"", 'comment_created': datetime.datetime(2021, 8, 12, 7, 0, 17, tzinfo=datetime.timezone.utc), 'commenter': 'jgru', 'type': 'User'}, {'comment_id': 687441055, 'comment_body': 'Changed in 86768f9dd87db010d2c03d6e582d29d7fdbd1b04', 'comment_created': datetime.datetime(2021, 8, 12, 7, 0, 49, tzinfo=datetime.timezone.utc), 'commenter': 'jgru', 'type': 'User'}, {'comment_id': 687499893, 'comment_body': 'Changed in e508f2371d34b0736a3b8ff3b2423dd6cbc65d46', 'comment_created': datetime.datetime(2021, 8, 12, 8, 28, 44, tzinfo=datetime.timezone.utc), 'commenter': 'jgru', 'type': 'User'}, {'comment_id': 687508833, 'comment_body': ""Those are used in `gui_monitor.cpp`, l. 421 and in `vmi_win_gui_parser.cpp` in `find_button_to_click`. I introduced those with reasoning. I'd prefer to stick with this implementation."", 'comment_created': datetime.datetime(2021, 8, 12, 8, 39, 30, tzinfo=datetime.timezone.utc), 'commenter': 'jgru', 'type': 'User'}, {'comment_id': 687526526, 'comment_body': ""> Quite a few mistakes in error messages of this function -struct, -field. I presume they come from copy pasting ;)\r\n\r\nFixed in 97e33bcaa2ee19675ec461e156cd2e683987dbb0\r\n\r\n> Maybe introducing two helper functions for retrieving sizes and offsets would be helpful?\r\n> They could also simplify find_offsets_from_win32k_json\r\n\r\nI left it as it was, since there are only three retrievals of struct-sizes and I do not see any significant simplification. Hope, you're okay with that.\r\n"", 'comment_created': datetime.datetime(2021, 8, 12, 9, 2, 47, tzinfo=datetime.timezone.utc), 'commenter': 'jgru', 'type': 'User'}, {'comment_id': 687526836, 'comment_body': 'Enforced consistency in 567aec373b3c80e3cea5caefdfd1449282351eed', 'comment_created': datetime.datetime(2021, 8, 12, 9, 3, 12, tzinfo=datetime.timezone.utc), 'commenter': 'jgru', 'type': 'User'}, {'comment_id': 687527058, 'comment_body': 'Corrected in d792f344db7f73a95d70f6de763ffc9b640048b4', 'comment_created': datetime.datetime(2021, 8, 12, 9, 3, 28, tzinfo=datetime.timezone.utc), 'commenter': 'jgru', 'type': 'User'}, {'comment_id': 687527367, 'comment_body': 'Cleaned up in 10a5100f7458b398e157e739f9ac1cf0ab8ffd1f', 'comment_created': datetime.datetime(2021, 8, 12, 9, 3, 53, tzinfo=datetime.timezone.utc), 'commenter': 'jgru', 'type': 'User'}, {'comment_id': 687527753, 'comment_body': 'Changed in 85735b38f8fa2b1ea9115a9b281bbfb526dbcd49', 'comment_created': datetime.datetime(2021, 8, 12, 9, 4, 26, tzinfo=datetime.timezone.utc), 'commenter': 'jgru', 'type': 'User'}, {'comment_id': 688038214, 'comment_body': '```suggestion\r\n    [Disable atom table parsing in hidsim plugin @<:@no@:>@])],\r\n```', 'comment_created': datetime.datetime(2021, 8, 12, 19, 49, 8, tzinfo=datetime.timezone.utc), 'commenter': 'chivay', 'type': 'User'}, {'comment_id': 688038877, 'comment_body': '```suggestion\r\n        ""\\t                           The template specifying the HID events to simulate. If not specified, the mouse will move randomly\\n""\r\n```', 'comment_created': datetime.datetime(2021, 8, 12, 19, 50, 16, tzinfo=datetime.timezone.utc), 'commenter': 'chivay', 'type': 'User'}, {'comment_id': 688045801, 'comment_body': '```suggestion\r\n            "" Continuing anyway\\n"");\r\n```', 'comment_created': datetime.datetime(2021, 8, 12, 20, 1, 48, tzinfo=datetime.timezone.utc), 'commenter': 'chivay', 'type': 'User'}, {'comment_id': 688047762, 'comment_body': '```suggestion\r\n/* Data structures */\r\n```', 'comment_created': datetime.datetime(2021, 8, 12, 20, 5, 12, tzinfo=datetime.timezone.utc), 'commenter': 'chivay', 'type': 'User'}, {'comment_id': 688051229, 'comment_body': 'I may be wrong but this field won\'t have any meaningful value\r\n\r\n```suggestion\r\n        fprintf(stderr, ""Error retrieving size of _OBJECT_HEADER-struct\\n"");\r\n```', 'comment_created': datetime.datetime(2021, 8, 12, 20, 11, 8, tzinfo=datetime.timezone.utc), 'commenter': 'chivay', 'type': 'User'}, {'comment_id': 688051734, 'comment_body': '```suggestion\r\n        fprintf(stderr, ""Error retrieving offset to HashLink-field of _RTL_ATOM_TABLE_ENTRY\\n"");\r\n```', 'comment_created': datetime.datetime(2021, 8, 12, 20, 11, 54, tzinfo=datetime.timezone.utc), 'commenter': 'chivay', 'type': 'User'}, {'comment_id': 688086134, 'comment_body': '```suggestion\r\n            symbol_offsets.rc_right_offset, pid, (uint32_t*)&wc->r.x1))\r\n```', 'comment_created': datetime.datetime(2021, 8, 12, 21, 8, 38, tzinfo=datetime.timezone.utc), 'commenter': 'chivay', 'type': 'User'}, {'comment_id': 688091229, 'comment_body': '```suggestion\r\n        if (cand && cand->atom)\r\n```', 'comment_created': datetime.datetime(2021, 8, 12, 21, 17, 40, tzinfo=datetime.timezone.utc), 'commenter': 'chivay', 'type': 'User'}, {'comment_id': 688091382, 'comment_body': '```suggestion\r\n                for (size_t j = 0; j < ARRAY_SIZE(IRRELEVANT_ATOM_CLASSES); j++)\r\n```', 'comment_created': datetime.datetime(2021, 8, 12, 21, 17, 56, tzinfo=datetime.timezone.utc), 'commenter': 'chivay', 'type': 'User'}, {'comment_id': 688094608, 'comment_body': '```suggestion\r\nvoid free_data(gpointer data)\r\n```', 'comment_created': datetime.datetime(2021, 8, 12, 21, 23, 30, tzinfo=datetime.timezone.utc), 'commenter': 'chivay', 'type': 'User'}, {'comment_id': 688095345, 'comment_body': '```suggestion\r\n        printf(""Failed to read pointer to _DESKTOPINFO at %"" PRIx64 ""\\n"",\r\n```', 'comment_created': datetime.datetime(2021, 8, 12, 21, 24, 55, tzinfo=datetime.timezone.utc), 'commenter': 'chivay', 'type': 'User'}, {'comment_id': 688095418, 'comment_body': '```suggestion\r\n        printf(""Failed to read pointer to _WINDOW at %"" PRIx64 ""\\n"",\r\n```', 'comment_created': datetime.datetime(2021, 8, 12, 21, 25, 3, tzinfo=datetime.timezone.utc), 'commenter': 'chivay', 'type': 'User'}, {'comment_id': 688095466, 'comment_body': '```suggestion\r\n        printf(""No valid windows for _DESKTOPINFO %"" PRIx64 ""\\n"", desktop_info);\r\n```', 'comment_created': datetime.datetime(2021, 8, 12, 21, 25, 10, tzinfo=datetime.timezone.utc), 'commenter': 'chivay', 'type': 'User'}, {'comment_id': 688107146, 'comment_body': 'I think it would be more readable if written with a for loop, similarly to:\r\n```\r\nfor (size_t i = 0; i < *max_size; i++, cur = next)\r\n```', 'comment_created': datetime.datetime(2021, 8, 12, 21, 47, 14, tzinfo=datetime.timezone.utc), 'commenter': 'chivay', 'type': 'User'}, {'comment_id': 688110444, 'comment_body': '```suggestion\r\n            + symbol_offsets.rc_right_offset, pid, (uint32_t*)&wc->rclient.x1))\r\n```', 'comment_created': datetime.datetime(2021, 8, 12, 21, 54, 5, tzinfo=datetime.timezone.utc), 'commenter': 'chivay', 'type': 'User'}, {'comment_id': 688110566, 'comment_body': '```suggestion\r\n            + symbol_offsets.rc_top_offset, pid, (uint32_t*)&wc->rclient.y0))\r\n```', 'comment_created': datetime.datetime(2021, 8, 12, 21, 54, 20, tzinfo=datetime.timezone.utc), 'commenter': 'chivay', 'type': 'User'}, {'comment_id': 688110626, 'comment_body': '```suggestion\r\n            + symbol_offsets.rc_bottom_offset, pid, (uint32_t*)&wc->rclient.y1))\r\n```', 'comment_created': datetime.datetime(2021, 8, 12, 21, 54, 27, tzinfo=datetime.timezone.utc), 'commenter': 'chivay', 'type': 'User'}, {'comment_id': 688111416, 'comment_body': '```suggestion\r\n        printf(""Failed to read desktop ID at %"" PRIx64 ""\\n"", desktop +\r\n```', 'comment_created': datetime.datetime(2021, 8, 12, 21, 56, 12, tzinfo=datetime.timezone.utc), 'commenter': 'chivay', 'type': 'User'}, {'comment_id': 688115831, 'comment_body': 'I think it would be easier to understand (and more idiomatic I guess (?)) if the caller passed the `winstas` array as an argument instead of allocating it here', 'comment_created': datetime.datetime(2021, 8, 12, 22, 5, 41, tzinfo=datetime.timezone.utc), 'commenter': 'chivay', 'type': 'User'}, {'comment_id': 688116029, 'comment_body': '```suggestion\r\n                printf(""Failed to read pointer to tagWINDOWSTATION at %"" PRIx64\r\n```', 'comment_created': datetime.datetime(2021, 8, 12, 22, 6, 10, tzinfo=datetime.timezone.utc), 'commenter': 'chivay', 'type': 'User'}, {'comment_id': 688116411, 'comment_body': 'This variable could be moved inside the for loop', 'comment_created': datetime.datetime(2021, 8, 12, 22, 7, tzinfo=datetime.timezone.utc), 'commenter': 'chivay', 'type': 'User'}, {'comment_id': 688117049, 'comment_body': '`strcmp(desk_name, ""Default"")` seems simpler. Any reason to avoid this function?', 'comment_created': datetime.datetime(2021, 8, 12, 22, 8, 25, tzinfo=datetime.timezone.utc), 'commenter': 'chivay', 'type': 'User'}, {'comment_id': 688121531, 'comment_body': 'Hm, I thought that I mentionted it already. IMO this should take `struct winsta*` as an argument, similarly to the other functions.', 'comment_created': datetime.datetime(2021, 8, 12, 22, 18, 21, tzinfo=datetime.timezone.utc), 'commenter': 'chivay', 'type': 'User'}, {'comment_id': 688123159, 'comment_body': ""Function name is fixed and I think it's unnecessary to pass it as an argument"", 'comment_created': datetime.datetime(2021, 8, 12, 22, 22, 13, tzinfo=datetime.timezone.utc), 'commenter': 'chivay', 'type': 'User'}, {'comment_id': 688124695, 'comment_body': '```suggestion\r\n        PRINT_DEBUG(""[HIDSIM] [MONITOR] Failed to find EPROCESS of \\""explorer.exe\\""\\n"");\r\n```', 'comment_created': datetime.datetime(2021, 8, 12, 22, 26, 13, tzinfo=datetime.timezone.utc), 'commenter': 'chivay', 'type': 'User'}, {'comment_id': 688125245, 'comment_body': '```suggestion\r\n            PRINT_DEBUG(""[HIDSIM] [Init] Failed to get DTB of \\""explorer.exe\\""\\n"");\r\n```', 'comment_created': datetime.datetime(2021, 8, 12, 22, 27, 41, tzinfo=datetime.timezone.utc), 'commenter': 'chivay', 'type': 'User'}, {'comment_id': 688126853, 'comment_body': '```suggestion\r\n * Worker function to monitor and reconstruct the GUIs, when NtUserShowWindow-\r\n```', 'comment_created': datetime.datetime(2021, 8, 12, 22, 31, 11, tzinfo=datetime.timezone.utc), 'commenter': 'chivay', 'type': 'User'}, {'comment_id': 688132701, 'comment_body': 'Some prints are tagged with `[Init]` and some with `[MONITOR]`. This should be made uniform.', 'comment_created': datetime.datetime(2021, 8, 12, 22, 46, 1, tzinfo=datetime.timezone.utc), 'commenter': 'chivay', 'type': 'User'}, {'comment_id': 688134998, 'comment_body': '```suggestion\r\n            if (res > 0)\r\n```', 'comment_created': datetime.datetime(2021, 8, 12, 22, 51, 50, tzinfo=datetime.timezone.utc), 'commenter': 'chivay', 'type': 'User'}, {'comment_id': 688142492, 'comment_body': '`sig_atomic_t` is not a safe way of sharing data between threads. Please use appropriate constructs from C++ standard library.', 'comment_created': datetime.datetime(2021, 8, 12, 23, 11, 52, tzinfo=datetime.timezone.utc), 'commenter': 'chivay', 'type': 'User'}, {'comment_id': 688242291, 'comment_body': ""You're right, it was used for debugging. "", 'comment_created': datetime.datetime(2021, 8, 13, 4, 55, 39, tzinfo=datetime.timezone.utc), 'commenter': 'jgru', 'type': 'User'}, {'comment_id': 688245431, 'comment_body': 'Coverity complained about the use of `strcmp` in one of my previous submission of being insecure, therefore I decided to use bounded strncmp here.', 'comment_created': datetime.datetime(2021, 8, 13, 5, 6, 19, tzinfo=datetime.timezone.utc), 'commenter': 'jgru', 'type': 'User'}, {'comment_id': 688246420, 'comment_body': 'The reason, that this is pointer to a pointer is the fact, that this function is used as `GDestroyNotify` on the cleanup of a `GHashTable`:  \r\nhttps://github.com/tklengyel/drakvuf/blob/40e4cbde2dc1b9dc2c10ccfe2de37d854263958b/src/plugins/hidsim/gui/vmi_win_gui_parser.cpp#L783\r\n\r\nTherefore this function has to have the function signature it has.', 'comment_created': datetime.datetime(2021, 8, 13, 5, 9, 31, tzinfo=datetime.timezone.utc), 'commenter': 'jgru', 'type': 'User'}, {'comment_id': 688280640, 'comment_body': 'Changed in 6b0afb9dd241ef9225f83d2dbca675c164dce1bf', 'comment_created': datetime.datetime(2021, 8, 13, 6, 41, 44, tzinfo=datetime.timezone.utc), 'commenter': 'jgru', 'type': 'User'}, {'comment_id': 688280873, 'comment_body': 'Changed in 756dea2a62442217975d00ec90d9095d9fc5ab5d', 'comment_created': datetime.datetime(2021, 8, 13, 6, 42, 4, tzinfo=datetime.timezone.utc), 'commenter': 'jgru', 'type': 'User'}, {'comment_id': 688281005, 'comment_body': 'Changed in a6ad1b3f37e1906cd04c0f74cffa480c2cb33d08', 'comment_created': datetime.datetime(2021, 8, 13, 6, 42, 21, tzinfo=datetime.timezone.utc), 'commenter': 'jgru', 'type': 'User'}, {'comment_id': 688281102, 'comment_body': 'Changed in aa4201b9ee4768f5f3aa97c0a60b238d945b2281', 'comment_created': datetime.datetime(2021, 8, 13, 6, 42, 34, tzinfo=datetime.timezone.utc), 'commenter': 'jgru', 'type': 'User'}, {'comment_id': 688281178, 'comment_body': 'Changed in aa4201b9ee4768f5f3aa97c0a60b238d945b2281', 'comment_created': datetime.datetime(2021, 8, 13, 6, 42, 45, tzinfo=datetime.timezone.utc), 'commenter': 'jgru', 'type': 'User'}, {'comment_id': 688281333, 'comment_body': 'Changed in aa4201b9ee4768f5f3aa97c0a60b238d945b2281', 'comment_created': datetime.datetime(2021, 8, 13, 6, 43, 4, tzinfo=datetime.timezone.utc), 'commenter': 'jgru', 'type': 'User'}, {'comment_id': 688281534, 'comment_body': 'Changed in aa4201b9ee4768f5f3aa97c0a60b238d945b2281', 'comment_created': datetime.datetime(2021, 8, 13, 6, 43, 31, tzinfo=datetime.timezone.utc), 'commenter': 'jgru', 'type': 'User'}, {'comment_id': 688281637, 'comment_body': 'Changed in 02f0ee9499f9c6c7f895e0cbf3b54adf13a71f03', 'comment_created': datetime.datetime(2021, 8, 13, 6, 43, 45, tzinfo=datetime.timezone.utc), 'commenter': 'jgru', 'type': 'User'}, {'comment_id': 688281729, 'comment_body': 'Changed in aa4201b9ee4768f5f3aa97c0a60b238d945b2281', 'comment_created': datetime.datetime(2021, 8, 13, 6, 43, 56, tzinfo=datetime.timezone.utc), 'commenter': 'jgru', 'type': 'User'}, {'comment_id': 688281776, 'comment_body': 'Changed in aa4201b9ee4768f5f3aa97c0a60b238d945b2281', 'comment_created': datetime.datetime(2021, 8, 13, 6, 44, 5, tzinfo=datetime.timezone.utc), 'commenter': 'jgru', 'type': 'User'}, {'comment_id': 688343312, 'comment_body': ""Changed in 6ef93dc6bc9e3b9ec0d32272d06eac5fe6b1a656 and df16b512c921ca31a2715fb343bcb767609df77c to use C++'s `std::atomic<...>` \r\n\r\n(Although I would have found it nicer to use the `atomic_*` primitives specified in C11) "", 'comment_created': datetime.datetime(2021, 8, 13, 8, 34, 57, tzinfo=datetime.timezone.utc), 'commenter': 'jgru', 'type': 'User'}]","[{'commit_sha': '4391b2e3dd7e9b292b59bad9badbc3e8db4680d7', 'committer_username': 'jgru', 'committer_name': 'Jan', 'committer_email': None, 'commit_date': datetime.datetime(2015, 4, 9, 14, 34, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c07d13dd3e45c28ac0c842b59a351f7dac6a057e', 'committer_username': 'jgru', 'committer_name': 'Jan', 'committer_email': None, 'commit_date': datetime.datetime(2015, 4, 9, 14, 34, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a7f6e22fe2a034cf90d9d5789709841501a2b6a0', 'committer_username': 'jgru', 'committer_name': 'Jan', 'committer_email': None, 'commit_date': datetime.datetime(2015, 4, 9, 14, 34, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': '33ff8dce84eba58182b7bc17b0eb71c1dea26301', 'committer_username': 'jgru', 'committer_name': 'Jan', 'committer_email': None, 'commit_date': datetime.datetime(2015, 4, 9, 14, 34, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7ab3261183d8dafd26b16f10f7c89b736c03031f', 'committer_username': 'jgru', 'committer_name': 'Jan', 'committer_email': None, 'commit_date': datetime.datetime(2015, 4, 9, 14, 34, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2b956d3aba3b94b2b41b6ce46293453ffe8dbdca', 'committer_username': 'jgru', 'committer_name': 'Jan', 'committer_email': None, 'commit_date': datetime.datetime(2015, 4, 9, 14, 34, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ac2cc56c5ee964d78c50f7f203d7e4e8245ba922', 'committer_username': 'jgru', 'committer_name': 'Jan', 'committer_email': None, 'commit_date': datetime.datetime(2015, 4, 9, 14, 34, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': '28cb69f921f6b35a717690dddaa8b2952b607d72', 'committer_username': 'jgru', 'committer_name': 'Jan', 'committer_email': None, 'commit_date': datetime.datetime(2015, 4, 9, 14, 34, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b5792b27cb757bd990c047f53a5bfb0c2922168c', 'committer_username': 'jgru', 'committer_name': 'Jan', 'committer_email': None, 'commit_date': datetime.datetime(2015, 4, 9, 14, 34, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': '63551421359dc7a9ce0f330cad68743e779c1fd1', 'committer_username': 'jgru', 'committer_name': 'Jan', 'committer_email': None, 'commit_date': datetime.datetime(2015, 4, 9, 14, 34, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'eb0dfe24a25d69c32c62083b76d1153a7f8f8516', 'committer_username': 'jgru', 'committer_name': 'Jan', 'committer_email': None, 'commit_date': datetime.datetime(2015, 4, 9, 14, 34, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': '07e72946915e93ce3a772f4dd63184122fa74edf', 'committer_username': 'jgru', 'committer_name': 'Jan', 'committer_email': None, 'commit_date': datetime.datetime(2015, 4, 9, 14, 34, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fe47ace9cc5dd6a37176f5ecbbbc3d6bfeae0fe4', 'committer_username': 'jgru', 'committer_name': 'Jan', 'committer_email': None, 'commit_date': datetime.datetime(2015, 4, 9, 14, 34, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9a7eed7d0b317cddf72355449066f61a9ef1e94d', 'committer_username': 'jgru', 'committer_name': 'Jan', 'committer_email': None, 'commit_date': datetime.datetime(2015, 4, 9, 14, 34, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': '512cd01a19b8ee1822ea4fc9f3f00ca309c655fc', 'committer_username': 'jgru', 'committer_name': 'Jan', 'committer_email': None, 'commit_date': datetime.datetime(2015, 4, 9, 14, 34, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': '117b2e134f2a0ef99990a085eb32ef28983f4281', 'committer_username': 'jgru', 'committer_name': 'Jan', 'committer_email': None, 'commit_date': datetime.datetime(2015, 4, 9, 14, 34, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': '467a35a4dd03721782051369be2699d463a37fcf', 'committer_username': 'jgru', 'committer_name': 'Jan', 'committer_email': None, 'commit_date': datetime.datetime(2015, 4, 9, 14, 34, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': '44490fb04916dc41686d1d714bde7758b5fd598d', 'committer_username': 'jgru', 'committer_name': 'Jan', 'committer_email': None, 'commit_date': datetime.datetime(2015, 4, 9, 14, 34, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7f536d19decbb9d1f91a621c50eac20ea3b319e9', 'committer_username': 'jgru', 'committer_name': 'Jan', 'committer_email': None, 'commit_date': datetime.datetime(2015, 4, 9, 14, 34, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bb3b7867851265325991cdc23361e049ab5cf85f', 'committer_username': 'jgru', 'committer_name': 'Jan', 'committer_email': None, 'commit_date': datetime.datetime(2015, 4, 9, 14, 34, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7842d3ced9a2229f5c4bab8428a132325f68721b', 'committer_username': 'jgru', 'committer_name': 'Jan', 'committer_email': None, 'commit_date': datetime.datetime(2015, 4, 9, 14, 34, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bc66be92ca943a6d4a6472e76c10c0801b6c0d1a', 'committer_username': 'jgru', 'committer_name': 'Jan', 'committer_email': None, 'commit_date': datetime.datetime(2015, 4, 9, 14, 34, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1e27e2979ac71a0dc3de2f3758ed61c48c15e3de', 'committer_username': 'jgru', 'committer_name': 'Jan', 'committer_email': None, 'commit_date': datetime.datetime(2015, 4, 9, 14, 34, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f22d6d3460047e8db37afebe41201d46bfc24b90', 'committer_username': 'jgru', 'committer_name': 'Jan', 'committer_email': None, 'commit_date': datetime.datetime(2015, 4, 9, 14, 34, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bb1de1c360d7e39ab96f17bae6450048b69c4063', 'committer_username': 'jgru', 'committer_name': 'Jan', 'committer_email': None, 'commit_date': datetime.datetime(2015, 4, 9, 14, 34, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3558eb368bb0dbe2cf8fe0189457b7ed271b6630', 'committer_username': 'jgru', 'committer_name': 'Jan', 'committer_email': None, 'commit_date': datetime.datetime(2015, 4, 9, 14, 34, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4e65a7a229e0ca3b6cbc446c9b50bed6be1c1ca4', 'committer_username': 'jgru', 'committer_name': 'Jan', 'committer_email': None, 'commit_date': datetime.datetime(2015, 4, 9, 14, 34, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7a25d385a2ceef3608c8986d405aaadaea36a548', 'committer_username': 'jgru', 'committer_name': 'Jan', 'committer_email': None, 'commit_date': datetime.datetime(2015, 4, 9, 14, 34, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0bd10f9c48cc640fa0bed377ccdb95d0f0d95e0d', 'committer_username': 'jgru', 'committer_name': 'Jan', 'committer_email': None, 'commit_date': datetime.datetime(2015, 4, 9, 14, 34, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': '82654b669423aecdebb87f139fda10d47c7a5871', 'committer_username': 'jgru', 'committer_name': 'Jan', 'committer_email': None, 'commit_date': datetime.datetime(2015, 4, 9, 14, 34, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dd2bef04ae0ccf5d3e21f5b4ad10131455b07cfe', 'committer_username': 'jgru', 'committer_name': 'Jan', 'committer_email': None, 'commit_date': datetime.datetime(2015, 4, 9, 14, 34, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4f4ea16613bb07cde6357047e9cacd22c27b1900', 'committer_username': 'jgru', 'committer_name': 'Jan', 'committer_email': None, 'commit_date': datetime.datetime(2015, 4, 9, 14, 34, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fe0998f12563d5015b04349d52677fb2e8a5a9cd', 'committer_username': 'jgru', 'committer_name': 'Jan', 'committer_email': None, 'commit_date': datetime.datetime(2015, 4, 9, 14, 34, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6c187990d3e5598875d99bc4ceada013e7b3c167', 'committer_username': 'jgru', 'committer_name': 'Jan', 'committer_email': None, 'commit_date': datetime.datetime(2015, 4, 9, 14, 34, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': '44795b90daccea38aad146cffd3fd131e2987dd5', 'committer_username': 'jgru', 'committer_name': 'Jan', 'committer_email': None, 'commit_date': datetime.datetime(2015, 4, 9, 14, 34, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': '86768f9dd87db010d2c03d6e582d29d7fdbd1b04', 'committer_username': 'jgru', 'committer_name': 'Jan', 'committer_email': None, 'commit_date': datetime.datetime(2015, 4, 9, 14, 34, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e508f2371d34b0736a3b8ff3b2423dd6cbc65d46', 'committer_username': 'jgru', 'committer_name': 'Jan', 'committer_email': None, 'commit_date': datetime.datetime(2015, 4, 9, 14, 34, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b09448606148efc91032bd1e83456db93dba5bea', 'committer_username': 'jgru', 'committer_name': 'Jan', 'committer_email': None, 'commit_date': datetime.datetime(2015, 4, 9, 14, 34, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0c201d2a859bb53d90ec10b9a6f9f01e4454e605', 'committer_username': 'jgru', 'committer_name': 'Jan', 'committer_email': None, 'commit_date': datetime.datetime(2015, 4, 9, 14, 34, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': '475e1a1c292004072decaea5e4d2fd9343259453', 'committer_username': 'jgru', 'committer_name': 'Jan', 'committer_email': None, 'commit_date': datetime.datetime(2015, 4, 9, 14, 34, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': '567aec373b3c80e3cea5caefdfd1449282351eed', 'committer_username': 'jgru', 'committer_name': 'Jan', 'committer_email': None, 'commit_date': datetime.datetime(2015, 4, 9, 14, 34, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd792f344db7f73a95d70f6de763ffc9b640048b4', 'committer_username': 'jgru', 'committer_name': 'Jan', 'committer_email': None, 'commit_date': datetime.datetime(2015, 4, 9, 14, 34, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': '10a5100f7458b398e157e739f9ac1cf0ab8ffd1f', 'committer_username': 'jgru', 'committer_name': 'Jan', 'committer_email': None, 'commit_date': datetime.datetime(2015, 4, 9, 14, 34, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': '85735b38f8fa2b1ea9115a9b281bbfb526dbcd49', 'committer_username': 'jgru', 'committer_name': 'Jan', 'committer_email': None, 'commit_date': datetime.datetime(2015, 4, 9, 14, 34, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': '97e33bcaa2ee19675ec461e156cd2e683987dbb0', 'committer_username': 'jgru', 'committer_name': 'Jan', 'committer_email': None, 'commit_date': datetime.datetime(2015, 4, 9, 14, 34, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': '40e4cbde2dc1b9dc2c10ccfe2de37d854263958b', 'committer_username': 'jgru', 'committer_name': 'Jan', 'committer_email': None, 'commit_date': datetime.datetime(2015, 4, 9, 14, 34, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2879e74fd35c7e22321c3645dbb6d7227446b7f8', 'committer_username': 'jgru', 'committer_name': 'Jan', 'committer_email': None, 'commit_date': datetime.datetime(2015, 4, 9, 14, 34, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'db5bcf38f0bc9459501e558514a3f985420e6061', 'committer_username': 'jgru', 'committer_name': 'Jan', 'committer_email': None, 'commit_date': datetime.datetime(2015, 4, 9, 14, 34, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3c1ba1d8b39f58db8727972ffac2b4c9f69a9319', 'committer_username': 'jgru', 'committer_name': 'Jan', 'committer_email': None, 'commit_date': datetime.datetime(2015, 4, 9, 14, 34, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0c83f42182cf348551d6a61f73d61223c43c7abe', 'committer_username': 'jgru', 'committer_name': 'Jan', 'committer_email': None, 'commit_date': datetime.datetime(2015, 4, 9, 14, 34, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b8941b7ee5ff20e79c2f90ec75b19ffc21d6b5a5', 'committer_username': 'jgru', 'committer_name': 'Jan', 'committer_email': None, 'commit_date': datetime.datetime(2015, 4, 9, 14, 34, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': '925177a0ad2c2234cf2c399f5586bda1478e18eb', 'committer_username': 'jgru', 'committer_name': 'Jan', 'committer_email': None, 'commit_date': datetime.datetime(2015, 4, 9, 14, 34, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': '41e4c942defff7b8b7d54d88ab9bc56a379c2312', 'committer_username': 'jgru', 'committer_name': 'Jan', 'committer_email': None, 'commit_date': datetime.datetime(2015, 4, 9, 14, 34, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': '17c23ff61b55116be77ae4cee331a31bd419d546', 'committer_username': 'jgru', 'committer_name': 'Jan', 'committer_email': None, 'commit_date': datetime.datetime(2015, 4, 9, 14, 34, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ee1a00092e02e1ca241801e2c841e919e160bcf1', 'committer_username': 'jgru', 'committer_name': 'Jan', 'committer_email': None, 'commit_date': datetime.datetime(2015, 4, 9, 14, 34, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f6406af0c6e46a350119ce307c16fc6fb38d611f', 'committer_username': 'jgru', 'committer_name': 'Jan', 'committer_email': None, 'commit_date': datetime.datetime(2015, 4, 9, 14, 34, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ccacbf68a110697b74e421c39207a001e255616d', 'committer_username': 'jgru', 'committer_name': 'Jan', 'committer_email': None, 'commit_date': datetime.datetime(2015, 4, 9, 14, 34, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4ab6065d3501234295ae48ad45fdc40fc68b5813', 'committer_username': 'jgru', 'committer_name': 'Jan', 'committer_email': None, 'commit_date': datetime.datetime(2015, 4, 9, 14, 34, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd1b1e9239b813079a8aa6c137cbea27dbdba15f5', 'committer_username': 'jgru', 'committer_name': 'Jan', 'committer_email': None, 'commit_date': datetime.datetime(2015, 4, 9, 14, 34, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7a73a86438a93343c87a8e4cbe0c4f67955d90eb', 'committer_username': 'jgru', 'committer_name': 'Jan', 'committer_email': None, 'commit_date': datetime.datetime(2015, 4, 9, 14, 34, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd27dc2ca5d75c2589e9267542c01e07df3b7d8a7', 'committer_username': 'jgru', 'committer_name': 'Jan', 'committer_email': None, 'commit_date': datetime.datetime(2015, 4, 9, 14, 34, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6d83f24a9add29bf964e7dd8887017d7953c0b48', 'committer_username': 'jgru', 'committer_name': 'Jan', 'committer_email': None, 'commit_date': datetime.datetime(2015, 4, 9, 14, 34, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2a2033ff7715d9dc05c867e7896600f284df743e', 'committer_username': 'jgru', 'committer_name': 'Jan', 'committer_email': None, 'commit_date': datetime.datetime(2015, 4, 9, 14, 34, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': '756dea2a62442217975d00ec90d9095d9fc5ab5d', 'committer_username': 'jgru', 'committer_name': 'Jan', 'committer_email': None, 'commit_date': datetime.datetime(2015, 4, 9, 14, 34, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b655061a67fff6ec7561c0b24d34b80aa153b615', 'committer_username': 'jgru', 'committer_name': 'Jan', 'committer_email': None, 'commit_date': datetime.datetime(2015, 4, 9, 14, 34, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aa4201b9ee4768f5f3aa97c0a60b238d945b2281', 'committer_username': 'jgru', 'committer_name': 'Jan', 'committer_email': None, 'commit_date': datetime.datetime(2015, 4, 9, 14, 34, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': '02f0ee9499f9c6c7f895e0cbf3b54adf13a71f03', 'committer_username': 'jgru', 'committer_name': 'Jan', 'committer_email': None, 'commit_date': datetime.datetime(2015, 4, 9, 14, 34, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2beb20ee720e35731a482d0ff74bfd03ebfca369', 'committer_username': 'jgru', 'committer_name': 'Jan', 'committer_email': None, 'commit_date': datetime.datetime(2015, 4, 9, 14, 34, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a6ad1b3f37e1906cd04c0f74cffa480c2cb33d08', 'committer_username': 'jgru', 'committer_name': 'Jan', 'committer_email': None, 'commit_date': datetime.datetime(2015, 4, 9, 14, 34, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9a2545f2fdb633355ae82b143be8eeffd43d936a', 'committer_username': 'jgru', 'committer_name': 'Jan', 'committer_email': None, 'commit_date': datetime.datetime(2015, 4, 9, 14, 34, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6b0afb9dd241ef9225f83d2dbca675c164dce1bf', 'committer_username': 'jgru', 'committer_name': 'Jan', 'committer_email': None, 'commit_date': datetime.datetime(2015, 4, 9, 14, 34, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6ef93dc6bc9e3b9ec0d32272d06eac5fe6b1a656', 'committer_username': 'jgru', 'committer_name': 'Jan', 'committer_email': None, 'commit_date': datetime.datetime(2015, 4, 9, 14, 34, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'df16b512c921ca31a2715fb343bcb767609df77c', 'committer_username': 'jgru', 'committer_name': 'Jan', 'committer_email': None, 'commit_date': datetime.datetime(2015, 4, 9, 14, 34, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cb183811aeca1e2d5938eb3b290b8097e88070c9', 'committer_username': 'jgru', 'committer_name': 'Jan', 'committer_email': None, 'commit_date': datetime.datetime(2015, 4, 9, 14, 34, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cfbb9bbc68384ccea31beea71872ac8cf7111c9c', 'committer_username': 'jgru', 'committer_name': 'Jan', 'committer_email': None, 'commit_date': datetime.datetime(2015, 4, 9, 14, 34, 28, tzinfo=datetime.timezone.utc)}]",Jan,11872675,,User,,63,,51,52
658409317,Add the ability to access qemu monitor from drakvuf's core,"Dear Tamas,

I want to ask for incorporating this pull request to drakvuf. The changes were made in order to enable access to qemu's monitor interface by utilizing [human-monitor-commands][] via the function [`libxl_qemu_monitor_command(...)`][] of `<libxl.h>` , which can be accessed directly from drakvuf's core now, so that the aforementioned HMP-commands can be transferred to a specific Xen-guest by utilizing its [`xen_interface_t`][] and domID.

This addition might be useful for future plugins to interact with the guests. (It might be especially useful for performing HID simulation, which is the task I currently work on.)

If you want to test the code by yourself, you could use the following snippet:
``` C
const char* in = ""info version""; 
char* out = NULL;
/* 
 * The following code effectively executes the command
 * { ""execute"": ""human-monitor-command"", ""arguments"": { ""command-line"": ""info version"" } }
 *  on the guest specified by the variable of type drakvuf_t.
 */
drakvuf_send_qemu_monitor_command(drakvuf, in, &out); // drakvuf has to be of type drakvuf_t
PRINT_DEBUG(""[QMPTEST] Result: %s"", out);
```

The following files were modified to accomplish the access of qemu's monitor:
-   `src/libdrakvuf/drakvuf.c`
-   `src/libdrakvuf/libdrakvuf.h`
-   `src/xen_helper/xen_helper.c`
-   `src/xen_helper/xen_helper.h`

Thanks already in advance for reviewing this PR.

Best regards  
Jan

  [human-monitor-commands]: https://qemu-project.gitlab.io/qemu/interop/qemu-qmp-ref.html#qapidoc-2399
  [`<libxl.h>`]: https://github.com/xen-project/xen/blob/e25aa9939ae0cd8317605be3d5c5611b76bc4ab4/tools/include/libxl.h#L2761
  [`libxl_qemu_monitor_command(...)`]: https://github.com/xen-project/xen/blob/e25aa9939ae0cd8317605be3d5c5611b76bc4ab4/tools/libs/light/libxl_qmp.c#L905
  [`xen_interface_t`]: https://github.com/tklengyel/drakvuf/blob/9605ac160f2636c352d2901a83e1bd7f86bb8779/src/xen_helper/xen_helper.h#L123",True,1229,https://api.github.com/repos/tklengyel/drakvuf/pulls/1229,https://github.com/tklengyel/drakvuf/pull/1229,closed,27,0,4,1,4,0,0,0,[],2021-05-31 16:00:45+00:00,2021-06-01 11:55:10+00:00,71665.0,19:54:25,[],"[{'commit_sha': 'e1b1a1af20c415f9b90af339bfdac053c7caf986', 'committer_username': 'jgru', 'committer_name': 'Jan', 'committer_email': None, 'commit_date': datetime.datetime(2015, 4, 9, 14, 34, 28, tzinfo=datetime.timezone.utc)}]",Jan,11872675,,User,,63,,51,52
664386673,Add function to expose drakvuf_t's domID in libdrakvuf.h,"Dear Tamas, 

this patch exposes `drakvuf_t`'s member variable ` domID` by introducing a getter-function named `drakvuf_get_dom_id(...)` in `libdrakvuf.h`. The addition of this getter-function enables plugins to
retrieve the ID of the Xen guest of interest in a convenient way. 

Diverging from my initial statement to use libvmi's `vmi_get_vmid(...)` I decided to expose the domID directly in `libdrakvuf.h`, since this seems to me to be a cleaner way than calling `drakvuf_lock_and_get_vmi(..)` and releasing it  afterwards.

To accomplish exposing the domID, I decided to typedef `domid_t` inside `libdrakvuf.h`, which is originally typedef'ed inside `xen.h` but not exposed anywhere. If you think, the getter-function should return a plain uint16_t to omit this repeated typedef, please let me know.   

If there are any issues with the patch or if you disagree on this decision, please let me know. 

Thanks already in advance for considering the patch and merging it eventually. 

Best regards,  
    Jan

P.S.: Please excuse the temporary closure and reopening of this PR due to a compilation error, that I oversaw.
",True,1231,https://api.github.com/repos/tklengyel/drakvuf/pulls/1231,https://github.com/tklengyel/drakvuf/pull/1231,closed,7,0,2,1,1,6,0,0,[],2021-06-08 07:27:59+00:00,2021-06-08 19:02:22+00:00,41663.0,11:34:23,"[{'comment_id': 647403750, 'comment_body': 'Please move this to be around the same spot get_kernel_base is', 'comment_created': datetime.datetime(2021, 6, 8, 12, 45, 39, tzinfo=datetime.timezone.utc), 'commenter': 'tklengyel', 'type': 'User'}, {'comment_id': 647523526, 'comment_body': 'Done. I moved it just above `drakvuf_get_kernel_base(...)` \r\n(This was actually my first intuition...)\r\n\r\nHope, this place is good now.', 'comment_created': datetime.datetime(2021, 6, 8, 14, 54, 13, tzinfo=datetime.timezone.utc), 'commenter': 'jgru', 'type': 'User'}, {'comment_id': 647533406, 'comment_body': ""I don't think we need this typedef."", 'comment_created': datetime.datetime(2021, 6, 8, 15, 4, 33, tzinfo=datetime.timezone.utc), 'commenter': 'tklengyel', 'type': 'User'}, {'comment_id': 647546148, 'comment_body': ""Compilation fails, if `domid_t` will not be defined. It throuws the following error:\r\n```\r\nlibdrakvuf.h:412:1: error: unknown type name ‘domid_t’; did you mean ‘id_t’?\r\n  412 | domid_t drakvuf_get_dom_id(drakvuf_t drakvuf) NOEXCEPT;\r\n```\r\ndomid_t is defined in <xen.h>, this header file is only included by xen_helper/xen_helper and xen_helper in turn is only included in libdrakvuf/drakvuf.c and libdrakvuf/private.h \r\n\r\nDo you see another solution? (Including xen_helper directly didn't seem apt to me)"", 'comment_created': datetime.datetime(2021, 6, 8, 15, 18, 19, tzinfo=datetime.timezone.utc), 'commenter': 'jgru', 'type': 'User'}, {'comment_id': 647611278, 'comment_body': 'Return uint16_t instead of domid_t', 'comment_created': datetime.datetime(2021, 6, 8, 16, 34, 41, tzinfo=datetime.timezone.utc), 'commenter': 'tklengyel', 'type': 'User'}, {'comment_id': 647615502, 'comment_body': 'Done. Newly added function `drakvuf_get_dom_id(...)` returns uint16_t now. Thanks for reviewing!', 'comment_created': datetime.datetime(2021, 6, 8, 16, 40, 34, tzinfo=datetime.timezone.utc), 'commenter': 'jgru', 'type': 'User'}]","[{'commit_sha': '964c5ef4d41f397f5b7eac355fd38dea56dfabc8', 'committer_username': 'jgru', 'committer_name': 'Jan', 'committer_email': None, 'commit_date': datetime.datetime(2015, 4, 9, 14, 34, 28, tzinfo=datetime.timezone.utc)}]",Jan,11872675,,User,,63,,51,52
669778324,Fix issues in hiddump.c identified by coverity,"Dear Tamas, 

this PR fixes the issues with the newly added code in `src/helpers/hiddump/hiddump.c`, which were identified by Coverity. The following issues were addressed: 

- control flow issues in L. 246 and 599 (of the previous file version)
- error handling issue in L. 468 previously  
- resource leak issue in  L. 488 previously

I added the report, which was provided by you as an attachment to this PR: [2021-06-14_hiddump-coverity.txt](https://github.com/tklengyel/drakvuf/files/6650421/2021-06-14_hiddump-coverity.txt)

I hope, that these changes solve my blunders!

Thanks for pointing me on them. 

Best regards 
Jan ",True,1238,https://api.github.com/repos/tklengyel/drakvuf/pulls/1238,https://github.com/tklengyel/drakvuf/pull/1238,closed,36,35,1,1,1,0,0,0,[],2021-06-14 18:17:48+00:00,2021-06-14 18:46:07+00:00,1699.0,0:28:19,[],"[{'commit_sha': 'a2f464843e18dd28ba881611ed8846136020f390', 'committer_username': 'jgru', 'committer_name': 'Jan', 'committer_email': None, 'commit_date': datetime.datetime(2015, 4, 9, 14, 34, 28, tzinfo=datetime.timezone.utc)}]",Jan,11872675,,User,,63,,51,52
687165167,"Fix issues in the hidsim-plugin, which were identified by static code analysis","Dear Tamas, 

this PR addresses the following issues, which were identified by Coverity, and tries to solve those:

- CID 350859: Fix usage of `strdup(...)` with unterminated string 
- CID 350856: Fix resource leaks in `get_display_dimensions(...)`
- CID 350857: Fix resource leaks in `get_display_dimensions(...)` 
- CID 350854: Fix unterminated strings in `qmp_init_conn()`
- CID 350852: Fix potential buffer overflow in `get_display_dimensions(...)`
- CID 350851: Fix submission of tainted data to `usleep(...)`
- CID 350855: Fix calculations with tainted scalar ` get_display_dimensions(...)` 
- CID 350860: Replace `rand()` with `std::mt19937` to fix WEAK_CRYPTO-warning
- CID 350853: Replace `rand()` with `std::mt19937` to fix WEAK_CRYPTO-warning
- CID 350858: Replace `rand()` with `std::mt19937` to fix WEAK_CRYPTO-warning

Besides that, a few minor clean-ups have been performed. 
Thank you already in advance for considering this PR. 
I hope, that this patch will solve the problems introduced by #1245. 

Best regards  
Jan 

",True,1255,https://api.github.com/repos/tklengyel/drakvuf/pulls/1255,https://github.com/tklengyel/drakvuf/pull/1255,closed,72,35,3,1,4,12,0,0,[],2021-07-10 10:52:25+00:00,2021-07-10 23:04:45+00:00,43940.0,12:12:20,"[{'comment_id': 667337973, 'comment_body': ' Code scanning\r\n\r\nComparison result is always the same\r\nComparison is always false because width <= 4294967295. ', 'comment_created': datetime.datetime(2021, 7, 10, 13, 13, 19, tzinfo=datetime.timezone.utc), 'commenter': 'tklengyel', 'type': 'User'}, {'comment_id': 667338001, 'comment_body': 'Code scanning\r\n\r\nComparison result is always the same\r\nComparison is always false because height <= 4294967295', 'comment_created': datetime.datetime(2021, 7, 10, 13, 13, 38, tzinfo=datetime.timezone.utc), 'commenter': 'tklengyel', 'type': 'User'}, {'comment_id': 667338042, 'comment_body': 'Code scanning\r\n\r\nComparison result is always the same\r\nComparison is always false because width >= 0. ', 'comment_created': datetime.datetime(2021, 7, 10, 13, 14, 1, tzinfo=datetime.timezone.utc), 'commenter': 'tklengyel', 'type': 'User'}, {'comment_id': 667340877, 'comment_body': 'Changed to `UINT16_MAX` and forcely pushed the change. Sorry for the negligence!!', 'comment_created': datetime.datetime(2021, 7, 10, 13, 42, 30, tzinfo=datetime.timezone.utc), 'commenter': 'jgru', 'type': 'User'}, {'comment_id': 667340883, 'comment_body': 'Changed to `UINT16_MAX` and forcely pushed the change. Sorry for the negligence!!', 'comment_created': datetime.datetime(2021, 7, 10, 13, 42, 39, tzinfo=datetime.timezone.utc), 'commenter': 'jgru', 'type': 'User'}, {'comment_id': 667340964, 'comment_body': 'Changed and forcely pushed -- again please excuse the sloppiness. \r\nThanks for reviewing, @tklengyel!', 'comment_created': datetime.datetime(2021, 7, 10, 13, 43, 18, tzinfo=datetime.timezone.utc), 'commenter': 'jgru', 'type': 'User'}, {'comment_id': 667340968, 'comment_body': 'Thanks for reviewing!', 'comment_created': datetime.datetime(2021, 7, 10, 13, 43, 23, tzinfo=datetime.timezone.utc), 'commenter': 'jgru', 'type': 'User'}, {'comment_id': 667340971, 'comment_body': 'Thanks for reviewing, @tklengyel!', 'comment_created': datetime.datetime(2021, 7, 10, 13, 43, 26, tzinfo=datetime.timezone.utc), 'commenter': 'jgru', 'type': 'User'}, {'comment_id': 667347964, 'comment_body': 'Comparison result is always the same\r\nComparison is always false because width <= 65535.', 'comment_created': datetime.datetime(2021, 7, 10, 14, 48, 55, tzinfo=datetime.timezone.utc), 'commenter': 'tklengyel', 'type': 'User'}, {'comment_id': 667348018, 'comment_body': 'Code scanning\r\nComparison result is always the same\r\nComparison is always false because height <= 65535.', 'comment_created': datetime.datetime(2021, 7, 10, 14, 49, 22, tzinfo=datetime.timezone.utc), 'commenter': 'tklengyel', 'type': 'User'}, {'comment_id': 667352140, 'comment_body': 'Added the needed brackets to cast _after_ evaluating the ternary predicate. Would have needed a fresh view obviously...sorry for changing sloppiness with sloppiness :(...and thanks again, @tklengyel !\r\n\r\n``` c\r\ndims->width = (uint16_t)(width > UINT16_MAX ? UINT16_MAX : width);\r\ndims->height = (uint16_t)(height > UINT16_MAX ? UINT16_MAX : height);\r\n``` ', 'comment_created': datetime.datetime(2021, 7, 10, 15, 24, 39, tzinfo=datetime.timezone.utc), 'commenter': 'jgru', 'type': 'User'}, {'comment_id': 667352211, 'comment_body': 'Fixed by adding the needed brackets to cast after the ternary predicate. ', 'comment_created': datetime.datetime(2021, 7, 10, 15, 25, 29, tzinfo=datetime.timezone.utc), 'commenter': 'jgru', 'type': 'User'}]","[{'commit_sha': '934e565b0d5de8a388c117ad8ee14ffc297f4268', 'committer_username': 'jgru', 'committer_name': 'Jan', 'committer_email': None, 'commit_date': datetime.datetime(2015, 4, 9, 14, 34, 28, tzinfo=datetime.timezone.utc)}]",Jan,11872675,,User,,63,,51,52
687282805,Fix defects introduced by PR #1255,"Dear Tamas, 

this patch fixes the defects introduced by PR #1255.  
The following issues, which were identified by Coverity, were addressed:

* CID 350856: Fix use after free of file stream in l. 731 of `hid_cleanup()`
* CID 350879: Fix use after close in l. 242 in `get_display_dimensions(...)`
* CID 350855: Fix untrusted divisor in l. 249 of `get_display_dimensions(...)`

Thanks already in advance for reviewing and considering this PR. 

Best regards  
Jan ",True,1256,https://api.github.com/repos/tklengyel/drakvuf/pulls/1256,https://github.com/tklengyel/drakvuf/pull/1256,closed,26,16,1,1,2,0,0,0,[],2021-07-11 06:24:37+00:00,2021-07-11 12:33:33+00:00,22136.0,6:08:56,[],"[{'commit_sha': 'e32be125ebfbfae66b920be0519ec1cda3431e8e', 'committer_username': 'jgru', 'committer_name': 'Jan', 'committer_email': None, 'commit_date': datetime.datetime(2015, 4, 9, 14, 34, 28, tzinfo=datetime.timezone.utc)}]",Jan,11872675,,User,,63,,51,52
687354683,Fix/clean-up low impact issues in libinjector and libusermode,"Dear Tamas, 

this PR submits three patches, which fix the following issues identified by static code analysis with low to medium impact :

- CID 307533: Fix error handling in `injector_int3_cb(...)` by checking the return value from `vmi_read(...)`
- CID 309662: Remove unused value (and therefore unnecessary variable assignment) in `print_injection_info(...)` 
- CID 304049: Add initialization of the scalar field `func_addr` of struct `rh_data_t` in `uh-private.hpp`

Although those are only minor changes, I think, they might help to declutter the results of static code analysis.
Thank you already advance for considering this PR. 

Best regards  
Jan 

P.S.: I decided to not squash the commits this time, because they try to solve distinct issues. If you want me to do so, please let me know.",True,1257,https://api.github.com/repos/tklengyel/drakvuf/pulls/1257,https://github.com/tklengyel/drakvuf/pull/1257,closed,11,4,2,3,2,0,0,0,[],2021-07-11 15:38:46+00:00,2021-07-11 21:02:35+00:00,19429.0,5:23:49,[],"[{'commit_sha': '445d999750860267e5742c58c75d154f71932027', 'committer_username': 'jgru', 'committer_name': 'Jan', 'committer_email': None, 'commit_date': datetime.datetime(2015, 4, 9, 14, 34, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': '56bebfd3f19092921aa3b60d55596a758e68ef40', 'committer_username': 'jgru', 'committer_name': 'Jan', 'committer_email': None, 'commit_date': datetime.datetime(2015, 4, 9, 14, 34, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': '383b0016684a5c6b722f1b204733674f1758ffc4', 'committer_username': 'jgru', 'committer_name': 'Jan', 'committer_email': None, 'commit_date': datetime.datetime(2015, 4, 9, 14, 34, 28, tzinfo=datetime.timezone.utc)}]",Jan,11872675,,User,,63,,51,52
712729149,Fix defects introduced by #1275,"Dear Tamas, 

this patch fixes the defects introduced by PR #1275.
The following issues were addressed, which Coverity identified:

- CID 354685: Fix unchecked return value in l. 800  in `retrieve_winstas_from_procs(...)`
- CID 354686: Fix resource leak in l. 243+ in `construct_wnd_container(...)`

I did not address CID 354683, since I think, that this is a false positive.

Thanks already in advance for reviewing and considering this PR.

Best regards
Jan",True,1287,https://api.github.com/repos/tklengyel/drakvuf/pulls/1287,https://github.com/tklengyel/drakvuf/pull/1287,closed,18,1,1,2,2,0,0,0,[],2021-08-14 06:48:19+00:00,2021-08-14 13:59:10+00:00,25851.0,7:10:51,[],"[{'commit_sha': 'ecbebcb1bbb539c7e20bab83f7f14c481490fc5c', 'committer_username': 'jgru', 'committer_name': 'Jan', 'committer_email': None, 'commit_date': datetime.datetime(2015, 4, 9, 14, 34, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a2b8b893649750bfd00b0b394d10b6e2c4b6ed84', 'committer_username': 'jgru', 'committer_name': 'Jan', 'committer_email': None, 'commit_date': datetime.datetime(2015, 4, 9, 14, 34, 28, tzinfo=datetime.timezone.utc)}]",Jan,11872675,,User,,63,,51,52

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
23253045,drakvuf,tklengyel/drakvuf,C++,247,1039,62,57,1424,97,7,3,"[{'id': 774771011, 'number': 1332, 'closed': datetime.datetime(2021, 11, 7, 18, 32, 22, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 11, 6, 10, 0, 6, tzinfo=datetime.timezone.utc), 'time_taken': 117136.0, 'time_delta': '1 day, 8:32:16', 'additions': 57, 'deletions': 7, 'state': 'closed'}, {'id': 770225513, 'number': 1328, 'closed': datetime.datetime(2021, 11, 3, 0, 1, 40, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 11, 1, 6, 50, 3, tzinfo=datetime.timezone.utc), 'time_taken': 148297.0, 'time_delta': '1 day, 17:11:37', 'additions': 7, 'deletions': 0, 'state': 'closed'}, {'id': 736122629, 'number': 1308, 'closed': datetime.datetime(2021, 9, 17, 19, 41, 28, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 9, 17, 7, 12, 2, tzinfo=datetime.timezone.utc), 'time_taken': 44966.0, 'time_delta': '12:29:26', 'additions': 3, 'deletions': 0, 'state': 'closed'}, {'id': 712729149, 'number': 1287, 'closed': datetime.datetime(2021, 8, 14, 13, 59, 10, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 14, 6, 48, 19, tzinfo=datetime.timezone.utc), 'time_taken': 25851.0, 'time_delta': '7:10:51', 'additions': 18, 'deletions': 1, 'state': 'closed'}, {'id': 700679257, 'number': 1275, 'closed': datetime.datetime(2021, 8, 13, 16, 41, 45, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 31, 8, 55, 22, tzinfo=datetime.timezone.utc), 'time_taken': 1151183.0, 'time_delta': '13 days, 7:46:23', 'additions': 4308, 'deletions': 69, 'state': 'closed'}, {'id': 687354683, 'number': 1257, 'closed': datetime.datetime(2021, 7, 11, 21, 2, 35, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 11, 15, 38, 46, tzinfo=datetime.timezone.utc), 'time_taken': 19429.0, 'time_delta': '5:23:49', 'additions': 11, 'deletions': 4, 'state': 'closed'}, {'id': 687282805, 'number': 1256, 'closed': datetime.datetime(2021, 7, 11, 12, 33, 33, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 11, 6, 24, 37, tzinfo=datetime.timezone.utc), 'time_taken': 22136.0, 'time_delta': '6:08:56', 'additions': 26, 'deletions': 16, 'state': 'closed'}, {'id': 687165167, 'number': 1255, 'closed': datetime.datetime(2021, 7, 10, 23, 4, 45, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 10, 10, 52, 25, tzinfo=datetime.timezone.utc), 'time_taken': 43940.0, 'time_delta': '12:12:20', 'additions': 72, 'deletions': 35, 'state': 'closed'}, {'id': 676110468, 'number': 1245, 'closed': datetime.datetime(2021, 7, 9, 14, 6, 24, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 23, 9, 25, 47, tzinfo=datetime.timezone.utc), 'time_taken': 1399237.0, 'time_delta': '16 days, 4:40:37', 'additions': 2366, 'deletions': 0, 'state': 'closed'}, {'id': 669778324, 'number': 1238, 'closed': datetime.datetime(2021, 6, 14, 18, 46, 7, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 14, 18, 17, 48, tzinfo=datetime.timezone.utc), 'time_taken': 1699.0, 'time_delta': '0:28:19', 'additions': 36, 'deletions': 35, 'state': 'closed'}, {'id': 668865421, 'number': 1237, 'closed': datetime.datetime(2021, 6, 14, 15, 25, 38, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 12, 13, 9, 15, tzinfo=datetime.timezone.utc), 'time_taken': 180983.0, 'time_delta': '2 days, 2:16:23', 'additions': 845, 'deletions': 2, 'state': 'closed'}, {'id': 664386673, 'number': 1231, 'closed': datetime.datetime(2021, 6, 8, 19, 2, 22, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 8, 7, 27, 59, tzinfo=datetime.timezone.utc), 'time_taken': 41663.0, 'time_delta': '11:34:23', 'additions': 7, 'deletions': 0, 'state': 'closed'}, {'id': 658409317, 'number': 1229, 'closed': datetime.datetime(2021, 6, 1, 11, 55, 10, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 5, 31, 16, 0, 45, tzinfo=datetime.timezone.utc), 'time_taken': 71665.0, 'time_delta': '19:54:25', 'additions': 27, 'deletions': 0, 'state': 'closed'}]"
