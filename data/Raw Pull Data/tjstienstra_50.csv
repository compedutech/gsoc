pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
909635779,"Revert ""Check if velocity is defined in frame before taking derivative of pos_vector","This reverts commit 4c969e4ded0ab76a1a22fa3c93bc8f22af854e22.

<!-- Your title above should be a short description of what
was changed. Do not include the issue number in the title. -->

#### References to other Issues or PRs
<!-- If this pull request fixes an issue, write ""Fixes #NNNN"" in that exact
format, e.g. ""Fixes #1234"" (see
https://tinyurl.com/auto-closing for more information). Also, please
write a comment on that issue linking back to this pull request once it is
open. -->


#### Brief description of what is fixed or changed
Fixes #23358 by removing an incorrect assumption in the velocity calculation of a point.

#### Other comments


#### Release Notes

<!-- Write the release notes for this release below between the BEGIN and END
statements. The basic format is a bulleted list with the name of the subpackage
and the release note for this PR. For example:

* solvers
  * Added a new solver for logarithmic equations.

* functions
  * Fixed a bug with log of integers.

or if no release note(s) should be included use:

NO ENTRY

See https://github.com/sympy/sympy/wiki/Writing-Release-Notes for more
information on how to write release notes. The bot will check your release
notes automatically to see if they are formatted correctly. -->

<!-- BEGIN RELEASE NOTES -->
* physics.vector
  * Fixed bug in the calculation of the velocity of a point.
<!-- END RELEASE NOTES -->
",True,23362,https://api.github.com/repos/sympy/sympy/pulls/23362,https://github.com/sympy/sympy/pull/23362,closed,46,36,5,5,26,15,1,0,[{'name': 'CZI: Codegen/Biomech'}],2022-04-14 06:57:27+00:00,2022-04-18 16:12:23+00:00,378896.0,"4 days, 9:14:56","[{'comment_id': 850365036, 'comment_body': ""The purpose of this file is to show when commits with different metadata belong to the same person and to say what name and email address should be used for recording that person's identity in the AUTHORS file. Here you are listing three separate authors. If you run the `mailmap_check.py` script you will see:\r\n```console\r\n$ bin/mailmap_check.py \r\nNo changes needed in .mailmap\r\n\r\nThe following authors will be added to the AUTHORS file at the time of\r\nthe next SymPy release.\r\n\r\n\tAndrii Oriekhov <andriyorehov@gmail.com>\r\n\tArie Bovenberg <a.c.bovenberg@gmail.com>\r\n\tCarson McManus <carson.mcmanus1@gmail.com>\r\n\tGaurav Jain <gjain369@gmail.com>\r\n\tJack Schmidt <1107865+jackschmidt@users.noreply.github.com>\r\n\tLuis Talavera <luisfertalavera15@gmail.com>\r\n\tShivam Sagar <technoshivam12@gmail.com>\r\n\tSiddhant Jain <siddhantashoknagar@gmail.com>\r\n\tSumit Kumar <mr.sumitkrr@gmail.com>\r\n\tTimo Stienstra <T.J.Stienstra@student.tudelft.nl>\r\n\tTimo Stienstra <timostienstra00@gmail.com>\r\n\tTirthankar Mazumder <63574588+wermos@users.noreply.github.com>\r\n```\r\nThis is showing that it things that there are 2 different people called Timo Stienstra. The third entry with the no reply email address only appears in CI because a temporary merge commit is created by GitHub.\r\n\r\nInstead what you should add here (in .mailmap) is something like these two lines:\r\n```\r\nTimo Stienstra <timostienstra00@gmail.com> Timo Stienstra <T.J.Stienstra@student.tudelft.nl>\r\nTimo Stienstra <timostienstra00@gmail.com> Timo Stienstra <97806294+TJStienstra@users.noreply.github.com>\r\n```\r\nThese lines associate the other email addresses with the same person so that then only a single person will be added to the AUTHORS file as `￼Timo Stienstra <timostienstra00@gmail.com>`."", 'comment_created': datetime.datetime(2022, 4, 14, 11, 49, 49, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 850369339, 'comment_body': 'Thank you, I assume I should also add:\r\n```Timo Stienstra <timostienstra00@gmail.com> Timo Stienstra <timostienstra00@gmail.com>```\r\nSince I just switched to that mail (the other one I use on my university account), so I will use that e-mail in future commits.', 'comment_created': datetime.datetime(2022, 4, 14, 11, 56, 9, tzinfo=datetime.timezone.utc), 'commenter': 'tjstienstra', 'type': 'User'}, {'comment_id': 850372467, 'comment_body': ""You don't need to map the same email address to itself."", 'comment_created': datetime.datetime(2022, 4, 14, 12, 0, 26, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 850381696, 'comment_body': 'You should run the `mailmap_check.py` script yourself before pushing:\r\n```console\r\n$ bin/mailmap_check.py \r\nThis author is not included in the .mailmap file:\r\nTJStienstra <T.J.Stienstra@student.tudelft.nl>\r\nAmbiguous names in .mailmap\r\nThis email address appears for multiple entries:\r\nPerson: TJStienstra <timostienstra00@gmail.com>\r\nMailmap entries:\r\nTimo Stienstra <timostienstra00@gmail.com> Timo Stienstra <97806294+TJStienstra@users.noreply.github.com>\r\nTimo Stienstra <timostienstra00@gmail.com> Timo Stienstra <T.J.Stienstra@student.tudelft.nl>\r\n\r\nThe .mailmap file needs to be updated because there are commits with\r\nunrecognised author/email metadata.\r\n\r\nLines should be added to .mailmap to indicate the correct name and\r\nemail aliases for all commits.\r\n\r\nFor instructions on updating the .mailmap file see:\r\nhttps://github.com/sympy/sympy/wiki/Development-workflow#add-your-name-and-email-address-to-the-mailmap-file\r\n\r\nThe following authors will be added to the AUTHORS file at the time of\r\nthe next SymPy release.\r\n\r\n\tAndrii Oriekhov <andriyorehov@gmail.com>\r\n\tArie Bovenberg <a.c.bovenberg@gmail.com>\r\n\tCarson McManus <carson.mcmanus1@gmail.com>\r\n\tGaurav Jain <gjain369@gmail.com>\r\n\tJack Schmidt <1107865+jackschmidt@users.noreply.github.com>\r\n\tLuis Talavera <luisfertalavera15@gmail.com>\r\n\tShivam Sagar <technoshivam12@gmail.com>\r\n\tSiddhant Jain <siddhantashoknagar@gmail.com>\r\n\tSumit Kumar <mr.sumitkrr@gmail.com>\r\n\tTirthankar Mazumder <63574588+wermos@users.noreply.github.com>\r\n\tTJStienstra <T.J.Stienstra@student.tudelft.nl>\r\n\tTJStienstra <timostienstra00@gmail.com>\r\n```\r\nThe problem is that your name (as recorded in the commits) is TJStienstra rather than Timo Stienstra:\r\nhttps://github.com/sympy/sympy/commit/d76c7ac376daaa46cf376ad7743532c0840cf7dd.patch\r\n\r\nYou need to associate the name and email address that is in the commits with the name and email address that should be recorded in the .mailmap file.', 'comment_created': datetime.datetime(2022, 4, 14, 12, 13, 32, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 850395915, 'comment_body': 'Oh sorry, I only read the lowest part of the output and thought that it was fixed. However if I change it to:\r\n```\r\nTimo Stienstra <timostienstra00@gmail.com> TJStienstra <97806294+TJStienstra@users.noreply.github.com>\r\nTimo Stienstra <timostienstra00@gmail.com> TJStienstra <T.J.Stienstra@student.tudelft.nl>\r\n```\r\nWhich should be fine, but it still gives the error:\r\n```\r\n←This email address appears for multiple entries:\r\nPerson: TJStienstra <timostienstra00@gmail.com>\r\nMailmap entries:\r\nTimo Stienstra <timostienstra00@gmail.com> TJStienstra <97806294+TJStienstra@users.noreply.github.com>\r\nTimo Stienstra <timostienstra00@gmail.com> TJStienstra <T.J.Stienstra@student.tudelft.nl>\r\n```\r\nEven when removing the noreply.github alias.', 'comment_created': datetime.datetime(2022, 4, 14, 12, 32, 6, tzinfo=datetime.timezone.utc), 'commenter': 'tjstienstra', 'type': 'User'}, {'comment_id': 850521089, 'comment_body': 'If you look at `git log` then you can see what name and email address has been used in your commits:\r\n```console\r\n$ git log\r\ncommit d76c7ac376daaa46cf376ad7743532c0840cf7dd\r\nAuthor: TJStienstra <timostienstra00@gmail.com>\r\n```\r\nIf you want the AUTHORS file to say Timo Sienstra then you need to add a line to .mailmap like\r\n```\r\nTimo Stienstra <timostienstra00@gmail.com> TJStienstra <timostienstra00@gmail.com>\r\n```', 'comment_created': datetime.datetime(2022, 4, 14, 14, 46, 7, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 850552612, 'comment_body': 'I think I have finally fixed it, thank you for the help and sorry for the mess.\r\nIf you like I can also delete this PR and replace it with one, where I did not accidentally use my previous mail for a commit? This will also keep the commit tree a bit more clean.', 'comment_created': datetime.datetime(2022, 4, 14, 15, 19, 5, tzinfo=datetime.timezone.utc), 'commenter': 'tjstienstra', 'type': 'User'}, {'comment_id': 850555806, 'comment_body': ""It isn't necessary to delete the PR if you want to do that. You can just set up your name and email address with `git config`, redo the commits and then force-push to the same branch."", 'comment_created': datetime.datetime(2022, 4, 14, 15, 22, 36, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 850560994, 'comment_body': 'Okay (I already setup the correct stuff for `git config`), so now I can create a local branch with the same name `FixVelocityCalculation` and do the correct changes and `git push --set-upstream origin FixVelocityCalculation --force`, overwriting the current branch?', 'comment_created': datetime.datetime(2022, 4, 14, 15, 28, tzinfo=datetime.timezone.utc), 'commenter': 'tjstienstra', 'type': 'User'}, {'comment_id': 850566274, 'comment_body': 'You can keep the same branch. Just use `git reset` to undo your commits e.g. to undo the 5 most recent commits you can just do `git reset HEAD~5`. Then you can use `git diff/add/commit` etc to redo the commits. Since this involves ""rewriting history"" you need to force push to send the new commits to github.', 'comment_created': datetime.datetime(2022, 4, 14, 15, 33, 45, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 851203659, 'comment_body': ""I think instead of removing this code, we should write a more robust code that handles all cases.\n\nRemoving this code might break joints test.\n\nWill do more detailed review, once I'm home.(will take 2-3 days)"", 'comment_created': datetime.datetime(2022, 4, 15, 10, 35, 18, tzinfo=datetime.timezone.utc), 'commenter': 'sidhu1012', 'type': 'User'}, {'comment_id': 851222143, 'comment_body': '> Removing this code might break joints test.\r\n\r\n@TJStienstra showed that (at least one) of the joints tests are incorrect.', 'comment_created': datetime.datetime(2022, 4, 15, 11, 29, 5, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 851244878, 'comment_body': ""Besides the failing test. The code seems to me like a shortcut for computing the velocity. Which means that after removing it, it should in fact still work. Unless taking the derivative of the position vector, leads to a wrong answer, which can only be caused by:\r\n- Mistake in the derivative function (unlikely)\r\n- Mistake in the definition of someones position vector\r\n\r\nBoth these problems don't seem to be the case and otherwise would form a separate issue.\r\n> I think instead of removing this code, we should write a more robust code that handles all cases.\r\n\r\nWith having a shortcut I do agree, but the only option I see for that is checking if we can use the `v1pt_theory`:\r\n```py\r\nvel = None\r\nfor interframe, frame_vel in neighbor._vel_dict.items():\r\n    # Other option is to calculate self.vel(interframe), which gives recursions\r\n    if frame_vel==0 and interframe in self._vel_dict:\r\n        vel = self._vel_dict[interframe] + (interframe.ang_vel_in(frame) ^ self.pos_from(neighbor))\r\nif vel is None:\r\n    vel = self.pos_from(neighbor).dt(frame)\r\nself.set_vel(frame, vel + neighbor_velocity)\r\n```\r\nNot sure if this is in the end really better. Also is there a reason why almost no recursive structures are used in these kind of calculations (just something I noticed)?"", 'comment_created': datetime.datetime(2022, 4, 15, 12, 30, 58, tzinfo=datetime.timezone.utc), 'commenter': 'tjstienstra', 'type': 'User'}, {'comment_id': 852199811, 'comment_body': ""Why don't we need to fix how the velocities for pin joints are defined to get the correct answer?"", 'comment_created': datetime.datetime(2022, 4, 18, 15, 30, 15, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 852208369, 'comment_body': 'It does not use the route of velocity calculation via the incorrect velocity set with `self.child.masscenter.v2pt_theory(self.parent.masscenter, self.parent.frame, self.child.frame)` I have also checked it with this fix corrected.', 'comment_created': datetime.datetime(2022, 4, 18, 15, 42, 45, tzinfo=datetime.timezone.utc), 'commenter': 'tjstienstra', 'type': 'User'}]","[{'commit_sha': '5bf73d11c06f682761cb6b0e1f904a74abee5a71', 'committer_username': 'tjstienstra', 'committer_name': 'Timo Stienstra', 'committer_email': None, 'commit_date': datetime.datetime(2022, 1, 15, 19, 30, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'acbbc193a4c304f62c7b808bc17cf2a2729a4df1', 'committer_username': 'tjstienstra', 'committer_name': 'Timo Stienstra', 'committer_email': None, 'commit_date': datetime.datetime(2022, 1, 15, 19, 30, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fc68f9c2d5a0ab57ba87cf178e27c8916f657f33', 'committer_username': 'tjstienstra', 'committer_name': 'Timo Stienstra', 'committer_email': None, 'commit_date': datetime.datetime(2022, 1, 15, 19, 30, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ffac8c2cd5eae2bda3f4a9134d218efac8201ac9', 'committer_username': 'tjstienstra', 'committer_name': 'Timo Stienstra', 'committer_email': None, 'commit_date': datetime.datetime(2022, 1, 15, 19, 30, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9b2ab3eb4a70823eb4f8c18dfbf929d51a1c069b', 'committer_username': 'tjstienstra', 'committer_name': 'Timo Stienstra', 'committer_email': None, 'commit_date': datetime.datetime(2022, 1, 15, 19, 30, 35, tzinfo=datetime.timezone.utc)}]",Timo Stienstra,97806294,,User,,12,,11,5
909385190,Add zero velocity constraint in v1pt and v2pt,"<!-- Your title above should be a short description of what
was changed. Do not include the issue number in the title. -->

#### References to other Issues or PRs
<!-- If this pull request fixes an issue, write ""Fixes #NNNN"" in that exact
format, e.g. ""Fixes #1234"" (see
https://tinyurl.com/auto-closing for more information). Also, please
write a comment on that issue linking back to this pull request once it is
open. -->
Fixes the problem presented in pull request [12322](https://github.com/sympy/sympy/pull/12322).

#### Brief description of what is fixed or changed
Add a check if the velocity of the `otherpoint` in the velocity theorems is indeed set to `0`

#### Other comments
Possibly also add a check for the acceleration theorems (i.e. `a1pt_theory` and `a2pt_theory`).

#### Release Notes

<!-- Write the release notes for this release below between the BEGIN and END
statements. The basic format is a bulleted list with the name of the subpackage
and the release note for this PR. For example:

* solvers
  * Added a new solver for logarithmic equations.

* functions
  * Fixed a bug with log of integers.

or if no release note(s) should be included use:

NO ENTRY

See https://github.com/sympy/sympy/wiki/Writing-Release-Notes for more
information on how to write release notes. The bot will check your release
notes automatically to see if they are formatted correctly. -->

<!-- BEGIN RELEASE NOTES -->
* physics.vector
  * Add a zero velocity requirement to `v1pt_theory` and `v2pt_theory`
<!-- END RELEASE NOTES -->
",False,23359,https://api.github.com/repos/sympy/sympy/pulls/23359,https://github.com/sympy/sympy/pull/23359,closed,46,5,2,1,5,9,2,0,"[{'name': 'physics.mechanics'}, {'name': 'CZI: Codegen/Biomech'}]",2022-04-13 21:43:26+00:00,2024-03-28 21:12:04+00:00,61774118.0,"714 days, 23:28:38","[{'comment_id': 850098387, 'comment_body': ""Seeing that we have to add this now, I'm not sure this is the solution we want. I thought that we only want to through an error if the velocity of the fixed point is such that it has a value and that value indicates it isn't fixed. So we should allow the velocity to 1) be undefined or 2) fixed in the shared frame. Having to set this velocity to zero is just going to be annoying for users."", 'comment_created': datetime.datetime(2022, 4, 14, 5, 37, 53, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 850098993, 'comment_body': 'Given my comment above, this should be something like ""if otherpoint velocity is defined and it isn\'t zero in the shared frame, then ....""', 'comment_created': datetime.datetime(2022, 4, 14, 5, 39, 21, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 850122669, 'comment_body': ""Yes, I agree. We could at most display a warning. The best option I see is to use `try` `except` to catch the `ValueError`, when the velocity is not defined. This will result in something like:\r\n```py\r\nother_point_is_valid = True\r\ntry:\r\n    if not otherpoint.vel(interframe)==0:\r\n        otherpoint_is_valid = False\r\nexcept ValueError:\r\n    pass\r\nif not other_point_is_valid:\r\n    raise ValueError(...)\r\n```\r\nAdvantage is that this is a extensive test, which really checks whether the velocity is defined. Disadvantages: it uses `try` `except` and will possibly add `{interframe: 0}` to the `otherpoint._vel_dict' by calling `otherpoint.vel` (not sure if this is a disadvantage).\r\n\r\nShall I implement this solution? Or is there a better one? Also should I revert my previous commit, so the test files and `model.py` will not be changed?"", 'comment_created': datetime.datetime(2022, 4, 14, 6, 29, 27, tzinfo=datetime.timezone.utc), 'commenter': 'tjstienstra', 'type': 'User'}, {'comment_id': 850165950, 'comment_body': ""It is fine to do explicit checks over the try/except clause. Maybe preferred in this case.\r\n\r\nWe try to avoid warnings in SymPy, but we already have some for this particular piece of code. I think it is fine to throw an error if the velocity is defined and it is not constant. If it is not defined, the behavior should be as it is, don't do anything."", 'comment_created': datetime.datetime(2022, 4, 14, 7, 35, 1, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 850170112, 'comment_body': 'Should I also undo my previous changes to the other files?\r\n', 'comment_created': datetime.datetime(2022, 4, 14, 7, 40, 19, tzinfo=datetime.timezone.utc), 'commenter': 'tjstienstra', 'type': 'User'}, {'comment_id': 850180451, 'comment_body': ""Yes, unfortunately. I don't think we want to add this requirement that you have to set the velocity of the base point in the shared frame. It is really unnecessary. The alternative is, as @angadhn suggested, to set that velocity automatically for the user. It's probably ok to do that. So, if the velocity is undefined, set it to 0 and if it is defined and not zero, then throw an error. The only thing I'm hung up on that is that we don't set more than one velocity with any other methods. But I may be warmed up to the idea by now. If it throws an error if it is not constant and sets it to zero otherwise, I can't see a major issue, but then we wouldn't return that second velocity.  But that method really shouldn't return a velocity, it should just set them. If you set the velocity to zero and make that very clear in the documentation, then that's probably fine."", 'comment_created': datetime.datetime(2022, 4, 14, 7, 53, 34, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 850187883, 'comment_body': 'I will just revert my changes and implement the [suggestion](https://github.com/sympy/sympy/pull/23359#discussion_r850122669). For this one the velocity in that frame will only be set to `0` if it is already known that it is `0`.', 'comment_created': datetime.datetime(2022, 4, 14, 8, 2, 58, tzinfo=datetime.timezone.utc), 'commenter': 'tjstienstra', 'type': 'User'}, {'comment_id': 1544062052, 'comment_body': 'Was this an error in the example?', 'comment_created': datetime.datetime(2024, 3, 29, 5, 1, 50, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 1544313362, 'comment_body': 'Yes, the next line sets the velocity as `P.set_vel(B, qd * B.x + q2d * B.y)` ', 'comment_created': datetime.datetime(2024, 3, 29, 10, 1, 25, tzinfo=datetime.timezone.utc), 'commenter': 'tjstienstra', 'type': 'User'}]","[{'commit_sha': '7945460774541029658f9eead33cadbc57307674', 'committer_username': 'tjstienstra', 'committer_name': 'Timo Stienstra', 'committer_email': None, 'commit_date': datetime.datetime(2022, 1, 15, 19, 30, 35, tzinfo=datetime.timezone.utc)}]",Timo Stienstra,97806294,,User,,12,,11,5
913063736,Fix PinJoint velocity calculation,"<!-- Your title above should be a short description of what
was changed. Do not include the issue number in the title. -->

#### References to other Issues or PRs
<!-- If this pull request fixes an issue, write ""Fixes #NNNN"" in that exact
format, e.g. ""Fixes #1234"" (see
https://tinyurl.com/auto-closing for more information). Also, please
write a comment on that issue linking back to this pull request once it is
open. -->
Fixes #22956 

#### Brief description of what is fixed or changed
Fix incorrect velocity definition of the center of mass of the child body, when the center of mass is not at the joint position.

#### Other comments


#### Release Notes

<!-- Write the release notes for this release below between the BEGIN and END
statements. The basic format is a bulleted list with the name of the subpackage
and the release note for this PR. For example:

* solvers
  * Added a new solver for logarithmic equations.

* functions
  * Fixed a bug with log of integers.

or if no release note(s) should be included use:

NO ENTRY

See https://github.com/sympy/sympy/wiki/Writing-Release-Notes for more
information on how to write release notes. The bot will check your release
notes automatically to see if they are formatted correctly. -->

<!-- BEGIN RELEASE NOTES -->
* physics.mechanics
   * Fixed incorrect center of mass velocity bug.
<!-- END RELEASE NOTES -->
",True,23392,https://api.github.com/repos/sympy/sympy/pulls/23392,https://github.com/sympy/sympy/pull/23392,closed,8,10,2,2,4,15,2,0,"[{'name': 'physics.mechanics'}, {'name': 'CZI: Codegen/Biomech'}]",2022-04-19 12:38:38+00:00,2022-04-23 06:04:37+00:00,321959.0,"3 days, 17:25:59","[{'comment_id': 853288222, 'comment_body': ""In the pin joint, wouldn't the velocity of both the parent and child points be zero in both frames?"", 'comment_created': datetime.datetime(2022, 4, 19, 16, 49, 2, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 853304244, 'comment_body': ""The angle between the angular velocity vector and the rotation axis should be zero. Odd that you have to subsitute omega: 1 here. Not quite sure what that is about. The angle shouldn't be a function of omega."", 'comment_created': datetime.datetime(2022, 4, 19, 17, 7, 36, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 853305934, 'comment_body': ""N is the reference frame of body P. The mass center of body C is at the joint because it wasn't defined. So the velocity of Co in N should be zero. Makes sense."", 'comment_created': datetime.datetime(2022, 4, 19, 17, 9, 46, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 853308275, 'comment_body': 'Did you work this out by hand to verify it?', 'comment_created': datetime.datetime(2022, 4, 19, 17, 12, 33, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 853458109, 'comment_body': 'I have used a few methods, since the answer was a bit different than I expected. I used the following code which reuses the defined ReferenceFrames:\r\n```py\r\nPm = Point(""Pm"")\r\nPm.set_vel(N, 0)\r\nPj = Pm.locatenew(\'Pj\', m * N.x)\r\nPj.set_vel(N, 0)\r\nPj.set_vel(A, 0)\r\nCm = Pj.locatenew(\'Cj\', - n * A.x)\r\nCm.set_vel(A, 0)\r\nprint(Cm.v2pt_theory(Pj, N, A).simplify())\r\n```\r\nBesides this I also plotted the situation with which you can see, that the velocity `n*omega` is split in three parts, of which only the `y` and `z` component appear in the velocity since the `x` is parallel to the arm. I do also expect that the last check is a logical change, since it now checks if indeed the velocity is perpendicular to the axis of the PinJoint.', 'comment_created': datetime.datetime(2022, 4, 19, 20, 26, 11, tzinfo=datetime.timezone.utc), 'commenter': 'tjstienstra', 'type': 'User'}, {'comment_id': 853467975, 'comment_body': '`angle=acos(omega_J(t)/sqrt(omega_J(t)**2))`, so it kind of is `0`, I can replace this one with a dot-product. That is a bit more general and does the same.', 'comment_created': datetime.datetime(2022, 4, 19, 20, 39, 40, tzinfo=datetime.timezone.utc), 'commenter': 'tjstienstra', 'type': 'User'}, {'comment_id': 853470222, 'comment_body': 'Yes, but this way I thought that the `vel` method gets a bit easier job searching and defining both will probably give cycles.', 'comment_created': datetime.datetime(2022, 4, 19, 20, 42, 51, tzinfo=datetime.timezone.utc), 'commenter': 'tjstienstra', 'type': 'User'}, {'comment_id': 855423463, 'comment_body': 'Setting this velocity to `0` may actually not be correct at all, see #23393. As example you may actually use a `PinJoint` in combination with a `PrismaticJoint`.', 'comment_created': datetime.datetime(2022, 4, 21, 17, 28, 13, tzinfo=datetime.timezone.utc), 'commenter': 'tjstienstra', 'type': 'User'}, {'comment_id': 855522924, 'comment_body': ""What's the precise example that demonstrates this?\r\n\r\nAlso, I'm wondering if we can only really set these velocities once the whole system of body connections is defined. Maybe it is ill designed thinking we can set velocities correctly as we go along."", 'comment_created': datetime.datetime(2022, 4, 21, 19, 20, 33, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 855524191, 'comment_body': 'This is due to a different issue. The bottom should be `Abs(omega_J)`. See https://github.com/sympy/sympy/issues/23173', 'comment_created': datetime.datetime(2022, 4, 21, 19, 22, 34, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 855525045, 'comment_body': 'This is fine, but it would probably reduce without subbing in 1 if it was Abs(omega_J).', 'comment_created': datetime.datetime(2022, 4, 21, 19, 23, 56, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 855555892, 'comment_body': ""```py\r\nfrom sympy.physics.mechanics import Body, PinJoint, PrismaticJoint, dynamicsymbols\r\n\r\nq1, q2, u1, u2 = dynamicsymbols('q1, q2, u1, u2')\r\n\r\nwall = Body('N')\r\nblock = Body('A')\r\npend = Body('B')\r\n\r\nslider = PrismaticJoint('J1', wall, block, coordinates=q1, speeds=u1)\r\nhinge = PinJoint('J2', block, pend, coordinates=q2, speeds=u2)\r\n\r\nfor point in (block.masscenter, slider.parent_point, slider.child_point):\r\n    print(point)\r\n    print(point.vel(wall.frame))\r\n    print(point.vel(block.frame), end='\\n\\n')\r\n```\r\nThese should all be the same."", 'comment_created': datetime.datetime(2022, 4, 21, 20, 9, 49, tzinfo=datetime.timezone.utc), 'commenter': 'tjstienstra', 'type': 'User'}, {'comment_id': 855557464, 'comment_body': 'The change is that the velocity should not be set to `0`, but use the `masscenter` as reference. However this will cause errors on the `v2pt_theory` and `v1pt_theory` checks.', 'comment_created': datetime.datetime(2022, 4, 21, 20, 11, 43, tzinfo=datetime.timezone.utc), 'commenter': 'tjstienstra', 'type': 'User'}, {'comment_id': 855564034, 'comment_body': ""I think I miss understood some theory, is it the case that `ReferenceFrames` can have a different zero-velocity references? Than #23393 isn't an issue."", 'comment_created': datetime.datetime(2022, 4, 21, 20, 22, tzinfo=datetime.timezone.utc), 'commenter': 'tjstienstra', 'type': 'User'}, {'comment_id': 855588520, 'comment_body': 'I by the way meant `cross` product. That would always just return `0` as long as they are parallel, and it is not affected by the issue.', 'comment_created': datetime.datetime(2022, 4, 21, 20, 57, 55, tzinfo=datetime.timezone.utc), 'commenter': 'tjstienstra', 'type': 'User'}]","[{'commit_sha': '1daf1e621163b2b26d25c3ada6be931fc402f5ce', 'committer_username': 'tjstienstra', 'committer_name': 'Timo Stienstra', 'committer_email': None, 'commit_date': datetime.datetime(2022, 1, 15, 19, 30, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a573c359c65025af42da96b0cc097a0b110c830f', 'committer_username': 'tjstienstra', 'committer_name': 'Timo Stienstra', 'committer_email': None, 'commit_date': datetime.datetime(2022, 1, 15, 19, 30, 35, tzinfo=datetime.timezone.utc)}]",Timo Stienstra,97806294,,User,,12,,11,5
958448716,adding option to return kinematic equations implicitly in KanesMethod #22818,"Fixes #22626 

This adds an option to KanesMethod to expose kinematic matrices in implicit form.

Default behavior should remain unchanged, so existing tests should be fine. Added one test to exercise the new code.

Closing PR https://github.com/sympy/sympy/pull/22818 to take a different approach as proposed by @moorepants in https://github.com/sympy/sympy/pull/22818#issuecomment-1086811861 . Doing this in a different PR in case we decide to pursue the other method at some point (and because I have some 3rd party code relying on that branch right now which I'll migrate to this PR once it's approved)

<!-- BEGIN RELEASE NOTES -->
* physics.mechanics
  * Added option to return kinematics and full mass matrix in implicit form in KanesMethod

<!-- END RELEASE NOTES -->
",True,23580,https://api.github.com/repos/sympy/sympy/pulls/23580,https://github.com/sympy/sympy/pull/23580,closed,244,39,2,8,17,29,1,0,[{'name': 'physics.mechanics'}],2022-06-05 15:55:18+00:00,2022-10-14 10:49:21+00:00,11300043.0,"130 days, 18:54:03","[{'comment_id': 912839538, 'comment_body': 'Adding these comments here will add them as two attributes in the online documentation, which is not preferred. I would instead propose to do the following. Add the explanation about explicit and implicit form to the notes:\r\n```\r\nNotes\r\n====\r\n\r\n<Explanation about the difference between the explicit and implicit form, because currently I have to go through the code to actually see that it is a change on the level of the kde, which has assumptions and which is used as default>\r\n```\r\nBesides this you could also add the four new properties to the attributes list.\r\n\r\nP.S. Another small problem is that \\`_implicit\\` will appear as $_implicit$ in the online documentation, so rather use double quotes \\`\\`_implicit\\`\\`. [Here](https://docs.sympy.org/dev/guides/contributing/documentation-style-guide.html#code) is some information about the styling in docstrings.', 'comment_created': datetime.datetime(2022, 7, 4, 9, 59, 16, tzinfo=datetime.timezone.utc), 'commenter': 'tjstienstra', 'type': 'User'}, {'comment_id': 912843310, 'comment_body': ""Why is this check not necessary anymore? Shouldn't it be added to `_forcing_full`?"", 'comment_created': datetime.datetime(2022, 7, 4, 10, 3, 26, tzinfo=datetime.timezone.utc), 'commenter': 'tjstienstra', 'type': 'User'}, {'comment_id': 912891388, 'comment_body': 'Not sure why the switch to `Y_...` is made, rather use the previously mentioned names from [the documentation](https://docs.sympy.org/latest/modules/physics/mechanics/kane.html). Also note that these `_methods` are not visible in the online documentation. So if this should be known in should be in the visible methods.', 'comment_created': datetime.datetime(2022, 7, 4, 11, 3, 55, tzinfo=datetime.timezone.utc), 'commenter': 'tjstienstra', 'type': 'User'}, {'comment_id': 912925846, 'comment_body': 'Nice performance check, would it be possible to also check the system itself? Currently the only check whether the given answer is correct is in `test_one_dof`.', 'comment_created': datetime.datetime(2022, 7, 4, 11, 50, 44, tzinfo=datetime.timezone.utc), 'commenter': 'tjstienstra', 'type': 'User'}, {'comment_id': 912939940, 'comment_body': ""I'm missing the method to get `Y_q` (i.e. $\\mathbf{k}_{k\\dot{q}}$). Which was also [proposed](https://github.com/sympy/sympy/pull/22818#issuecomment-1086811861)."", 'comment_created': datetime.datetime(2022, 7, 4, 12, 9, 23, tzinfo=datetime.timezone.utc), 'commenter': 'tjstienstra', 'type': 'User'}, {'comment_id': 981721116, 'comment_body': '`forcing_full` calls `self._forcing_full` which calls `self.forcing`, it is that last one which now checks that `_fr` and `_frstar` have been computed and thus the check is no longer needed here.', 'comment_created': datetime.datetime(2022, 9, 27, 21, 14, 38, tzinfo=datetime.timezone.utc), 'commenter': 'zouhairm', 'type': 'User'}, {'comment_id': 981725934, 'comment_body': ""I used `Y_...` as proposed by @moorepants \r\nI've switched to the convention in the documentation (i.e. `k_...` and `f_...`)"", 'comment_created': datetime.datetime(2022, 9, 27, 21, 21, 46, tzinfo=datetime.timezone.utc), 'commenter': 'zouhairm', 'type': 'User'}, {'comment_id': 981726257, 'comment_body': 'fixed documentation.\r\n\r\nRe Y_q (or rather k_kqdot), I called it `mass_matrix_kin` as I thought it\'d be better to be consistent with the remainder ""public"" properties from this method being more ""verbose"" names rather than symbols.', 'comment_created': datetime.datetime(2022, 9, 27, 21, 22, 14, tzinfo=datetime.timezone.utc), 'commenter': 'zouhairm', 'type': 'User'}, {'comment_id': 981800633, 'comment_body': ""the other test is actually in `test_two_dof`\r\n\r\nI added another test, although turned out this is not so easy as I couldn't use the whole explicit form as a way to check things against since the explicit equations are too slow to handle (hence the whole point of this PR :p)\r\n\r\nI've  basically used the explicit form for the linear velocities which are 'trivial', and a 'textbook' solution for the quaternion rates which are more involved and thus their explicit form is too complex."", 'comment_created': datetime.datetime(2022, 9, 27, 23, 10, 46, tzinfo=datetime.timezone.utc), 'commenter': 'zouhairm', 'type': 'User'}, {'comment_id': 982309304, 'comment_body': '```suggestion\r\n    mass_matrix_full : Matrix\r\n        The ""mass matrix"" for the u\'s and q\'s with dynamics and kinematics\r\n    forcing_full : Matrix\r\n        The ""forcing vector"" for the u\'s and q\'s with dynamics and kinematics\r\n    explicit : bool\r\n        Boolean whether the mass matrices and forcing vectors should be returned\r\n        in the explicit form (default) or explicit form. See the notes for more\r\n        details. \r\n\r\n    Notes\r\n    =====\r\n\r\n    The mass matrices and forcing vectors, which involve kinematic equations,\r\n    are given in the explicit form by default. In other words, the kinematic\r\n    mass matrix is $\\mathbf{k_{k\\dot{q}}} = \\mathbf{I}$.\r\n\r\n    In order to get the implicit form of those matrices/vectors, you can set the\r\n    ``explicit`` attribute to ``False``. So $\\mathbf{k_{k\\dot{q}}}$ is not\r\n    necessarily an identity matrix. This can provide more compact equations for\r\n    non-simple kinematics (see #22626).\r\n```', 'comment_created': datetime.datetime(2022, 9, 28, 11, 56, 19, tzinfo=datetime.timezone.utc), 'commenter': 'tjstienstra', 'type': 'User'}, {'comment_id': 982311509, 'comment_body': '```suggestion\r\n    @property\r\n    def mass_matrix_kin(self):\r\n        """"""The kinematic ""mass matrix"" $\\mathbf{k_{k\\dot{q}}}$ of the system.""""""\r\n        return self._k_kqdot if self.explicit else self._k_kqdot_implicit\r\n\r\n    @property\r\n    def forcing_kin(self):\r\n        """"""The kinematic ""forcing vector"" of the system.""""""\r\n        if self.explicit:\r\n            return -(self._k_ku * Matrix(self.u) + self._f_k)\r\n        else:\r\n            return -(self._k_ku_implicit * Matrix(self.u) + self._f_k_implicit)\r\n\r\n    @property\r\n    def mass_matrix(self):\r\n        """"""The mass matrix of the system.""""""\r\n        if not self._fr or not self._frstar:\r\n            raise ValueError(\'Need to compute Fr, Fr* first.\')\r\n        return Matrix([self._k_d, self._k_dnh])\r\n\r\n    @property\r\n    def forcing(self):\r\n        """"""The forcing vector of the system.""""""\r\n        if not self._fr or not self._frstar:\r\n            raise ValueError(\'Need to compute Fr, Fr* first.\')\r\n        return -Matrix([self._f_d, self._f_dnh])\r\n\r\n    @property\r\n    def mass_matrix_full(self):\r\n        """"""The mass matrix of the system, augmented by the kinematic\r\n        differential equations in explicit or implicit form.""""""\r\n        if not self._fr or not self._frstar:\r\n            raise ValueError(\'Need to compute Fr, Fr* first.\')\r\n        o, n = len(self.u), len(self.q)\r\n        return (self.mass_matrix_kin.row_join(zeros(n, o))).col_join(\r\n            zeros(o, n).row_join(self.mass_matrix))\r\n\r\n    @property\r\n    def forcing_full(self):\r\n        """"""The forcing vector of the system, augmented by the kinematic\r\n        differential equations in explicit or implicit form.""""""\r\n        return Matrix([self.forcing_kin, self.forcing])\r\n```', 'comment_created': datetime.datetime(2022, 9, 28, 11, 58, 50, tzinfo=datetime.timezone.utc), 'commenter': 'tjstienstra', 'type': 'User'}, {'comment_id': 982312677, 'comment_body': '```sugggestion\r\n    rhs = KM.rhs()\r\n    assert simplify(rhs -\r\n                    KM.mass_matrix_full.LUsolve(KM.forcing_full)) == zeros(4, 1)\r\n\r\n    # Check that the implicit form also gives the same result\r\n    KM.explicit = False\r\n    assert simplify(rhs -\r\n                    KM.mass_matrix_full.LUsolve(KM.forcing_full)) == zeros(4, 1)\r\n```', 'comment_created': datetime.datetime(2022, 9, 28, 12, 0, 9, tzinfo=datetime.timezone.utc), 'commenter': 'tjstienstra', 'type': 'User'}, {'comment_id': 982313300, 'comment_body': '```suggestion\r\n    KM.explicit = False\r\n    n_ops_implicit = sum(\r\n        [x.count_ops() for x in KM.forcing_full] +\r\n        [x.count_ops() for x in KM.mass_matrix_full]\r\n    )\r\n```', 'comment_created': datetime.datetime(2022, 9, 28, 12, 0, 52, tzinfo=datetime.timezone.utc), 'commenter': 'tjstienstra', 'type': 'User'}, {'comment_id': 982313560, 'comment_body': '```suggestion\r\nassert (KM.mass_matrix_kin * KM.q.diff() - KM.forcing_kin) == Matrix(kinematic_eqs)\r\n```', 'comment_created': datetime.datetime(2022, 9, 28, 12, 1, 11, tzinfo=datetime.timezone.utc), 'commenter': 'tjstienstra', 'type': 'User'}, {'comment_id': 982314103, 'comment_body': '```suggestion\r\n    KM.explicit = True\r\n    qdot_candidate = KM.forcing_kin\r\n```', 'comment_created': datetime.datetime(2022, 9, 28, 12, 1, 47, tzinfo=datetime.timezone.utc), 'commenter': 'tjstienstra', 'type': 'User'}, {'comment_id': 982314506, 'comment_body': '```suggestion\r\n    KM.explicit = False\r\n    lhs_candidate = simplify(KM.mass_matrix_kin * qdot_candidate).subs({q_att_vec[0]: lambda_0_sol})\r\n    assert lhs_candidate == KM.forcing_kin\r\n```', 'comment_created': datetime.datetime(2022, 9, 28, 12, 2, 15, tzinfo=datetime.timezone.utc), 'commenter': 'tjstienstra', 'type': 'User'}, {'comment_id': 983845949, 'comment_body': 'I would remove it as argument from the `__init__` to make sure that we do not get an overflow of possible arguments. @moorepants What is your opinion?', 'comment_created': datetime.datetime(2022, 9, 29, 17, 34, 12, tzinfo=datetime.timezone.utc), 'commenter': 'tjstienstra', 'type': 'User'}, {'comment_id': 983900238, 'comment_body': ""I would personally not usethese kind of test loops, since they are not nice to debug. Rather write them out, since you don't even use less lines in the end. Besides that I would also suggest to directly check the implicit kinematic mass matrix and forcing vector (they are really simple), i.e. `KM.mass_matrix_kin == Matrix([[1/2, 0], [0, 2]])` (is also bit more useful and accurate)\r\n\r\nP.S. Try to keep the lines within 80 characters"", 'comment_created': datetime.datetime(2022, 9, 29, 18, 32, 27, tzinfo=datetime.timezone.utc), 'commenter': 'tjstienstra', 'type': 'User'}, {'comment_id': 983911618, 'comment_body': 'Where would it go then? I think this is the only chance for the user to infuence the construction of this, right? Once they call `.kanes_equations()` it is too late.', 'comment_created': datetime.datetime(2022, 9, 29, 18, 46, 25, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 983914076, 'comment_body': ""Let's just try to get this in. We've nitpicked @zouhairm enough :)"", 'comment_created': datetime.datetime(2022, 9, 29, 18, 49, 20, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 984695013, 'comment_body': 'the way we\'ve implemented it know, explicit_kinematics can be ""hot-swapped"" as both the implicit and explicit forms are available.\r\nThis is because we are only doing the ""2nd"" part of the original PR of providing the mass/forcing matrices for kinematics in implicit form, i.e. this has no impact on how the dynamics (Kane\'s) equations themselves are constructed.\r\n\r\nI\'ve dropped it from the initializer for now, and we can later add it to the `kanes_equations()` call when the ""1"" part of the original PR is eventually implemented (i.e. where it can no longer be hotswapped as it would now have an impact on how the dynamics are computed)\r\nI remember the argument for putting it in `kanes_equations()`, which makes sense regarding the ""1st"" part of the original PR, but since kinematic equations are available before  `kanes_equations()` is invoked, I think it still makes sense to set it in the initial constructor. Perhaps in the future we can decide that `kanes_equations()` can also take it as an argument to overwrite the original value if so desired.\r\n\r\n\r\nFor now I\'m tempted to make it a \'private\' member so as to signal that it should not be changed mid-run (even though that\'d the only way to do it right now if we remove it from the initializer) and to remove it from the initializer and kick the can down the road to figure this out based on how the ""1st"" part of the original PR is ultimately implemented.\r\n\r\nThoughts?', 'comment_created': datetime.datetime(2022, 9, 30, 15, 9, 39, tzinfo=datetime.timezone.utc), 'commenter': 'zouhairm', 'type': 'User'}, {'comment_id': 984709476, 'comment_body': ""- the for loop was on purpose, not to save lines of code, but to make it clear that the only thing changing between the two tests is the explicit flag. pytest should print out the variables when something fails, so hopefully shouldn't be too difficult to debug.\r\n\r\n-  I've removed one of them anyway by implementing a more, excuse the pun, explicit matrix check as you suggested as opposed to just checking that they are different\r\n\r\n- sorry about the 80 chars: I know it's a PEP8 thing but I didn't see it enforced by code_quality so I assumed the codebase uses a different value (we certainly do in ours as 80 is just too small for most modern monitors). If you feel strongly about it lmk and I'll clean it up.\r\n"", 'comment_created': datetime.datetime(2022, 9, 30, 15, 25, 30, tzinfo=datetime.timezone.utc), 'commenter': 'zouhairm', 'type': 'User'}, {'comment_id': 984927441, 'comment_body': 'I do agree with the first point, was just a bit surprised to see this kind of code in tests. Furthermore, thanks for taking the time to update. As for the last point, the 80 character line width is in SymPy as far as I know not a strict rule, but personally I like consistency in formatting (even though I personally prefer 120 chars).', 'comment_created': datetime.datetime(2022, 9, 30, 20, 28, 21, tzinfo=datetime.timezone.utc), 'commenter': 'tjstienstra', 'type': 'User'}, {'comment_id': 984941767, 'comment_body': ""Making it a private member is indeed more future safe. As for where we can set the argument, I'm with either of them. `kanes_equations` is probably the most logical location from a users perspective, but `__init__` is the location where we actually need it. So I would prefere making it a private member and putting it in either the `__init__` or `kanes_equations`. Biggest disadvantage I see here is that it is an extra argument, especially in the `__init__` case.\r\n\r\n@moorepants what is your opinion?"", 'comment_created': datetime.datetime(2022, 9, 30, 20, 53, 17, tzinfo=datetime.timezone.utc), 'commenter': 'tjstienstra', 'type': 'User'}, {'comment_id': 984944815, 'comment_body': ""You have to make the `1/2` a sympy object, i.e. `S(1)/2`, then it'll pass the symengine test."", 'comment_created': datetime.datetime(2022, 9, 30, 20, 58, 1, tzinfo=datetime.timezone.utc), 'commenter': 'tjstienstra', 'type': 'User'}, {'comment_id': 985689030, 'comment_body': ""I don't have any issues with adding new arguments to `__init__`. The KanesMethod class does alot already, of course, but it seems in line to let it also return the explicit form of the kinematic equations."", 'comment_created': datetime.datetime(2022, 10, 3, 11, 43, 58, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 986056711, 'comment_body': ""So is the PR fine as is? If so I'll leave to one of you to please merge.\r\nOtherwise please lmk what is left for us to do."", 'comment_created': datetime.datetime(2022, 10, 3, 17, 36, 31, tzinfo=datetime.timezone.utc), 'commenter': 'zouhairm', 'type': 'User'}, {'comment_id': 988211933, 'comment_body': '@moorepants Based on your comments I assumed that you do agree with the current implementation, i.e. `explicit_kinematics` as attribute and as kwarg in the `__init__`, which is also fine with me.\r\nSince I have no more comments on the PR (all suggestions have been taken into account), can this PR be merged?', 'comment_created': datetime.datetime(2022, 10, 5, 18, 16, 34, tzinfo=datetime.timezone.utc), 'commenter': 'tjstienstra', 'type': 'User'}, {'comment_id': 995176656, 'comment_body': 'bump - any chance you can merge please @moorepants ?\r\nThanks :) ', 'comment_created': datetime.datetime(2022, 10, 13, 22, 33, 19, tzinfo=datetime.timezone.utc), 'commenter': 'zouhairm', 'type': 'User'}]","[{'commit_sha': '1e522ee112f19216f367b457b6804fd58b94f28b', 'committer_username': 'zouhairm', 'committer_name': 'zouhair', 'committer_email': 'zouhair.mahboubi@gmail.com', 'commit_date': datetime.datetime(2010, 10, 6, 21, 29, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '27dd7550e8b346f322380d430070ccbd9e8ca846', 'committer_username': 'zouhairm', 'committer_name': 'zouhair', 'committer_email': 'zouhair.mahboubi@gmail.com', 'commit_date': datetime.datetime(2010, 10, 6, 21, 29, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9aae3bfb2a601cb3f72b22f5dfbd80e04f17f188', 'committer_username': 'zouhairm', 'committer_name': 'zouhair', 'committer_email': 'zouhair.mahboubi@gmail.com', 'commit_date': datetime.datetime(2010, 10, 6, 21, 29, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '892f20ba12af030f61c8f6f5bdaff39e352667d7', 'committer_username': 'zouhairm', 'committer_name': 'zouhair', 'committer_email': 'zouhair.mahboubi@gmail.com', 'commit_date': datetime.datetime(2010, 10, 6, 21, 29, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6f5b7973c7e94b505985cfd946692e28da31fc99', 'committer_username': 'zouhairm', 'committer_name': 'zouhair', 'committer_email': 'zouhair.mahboubi@gmail.com', 'commit_date': datetime.datetime(2010, 10, 6, 21, 29, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4b777ba4d319e00479e5286beef9d79a97e480d4', 'committer_username': 'zouhairm', 'committer_name': 'zouhair', 'committer_email': 'zouhair.mahboubi@gmail.com', 'commit_date': datetime.datetime(2010, 10, 6, 21, 29, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4a2910d32009524b65982e4f98c97a7351e518a0', 'committer_username': 'zouhairm', 'committer_name': 'zouhair', 'committer_email': 'zouhair.mahboubi@gmail.com', 'commit_date': datetime.datetime(2010, 10, 6, 21, 29, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5938c63f85dee9ec9ce9dc5ae8b1d5fe6399a74f', 'committer_username': 'zouhairm', 'committer_name': 'zouhair', 'committer_email': 'zouhair.mahboubi@gmail.com', 'commit_date': datetime.datetime(2010, 10, 6, 21, 29, 36, tzinfo=datetime.timezone.utc)}]",zouhair,430175,zouhair.mahboubi@gmail.com,User,,20,,0,5
966696822,Reduce Point.acc dependency on computed velocities,"<!-- Your title above should be a short description of what
was changed. Do not include the issue number in the title. -->

#### References to other Issues or PRs
<!-- If this pull request fixes an issue, write ""Fixes #NNNN"" in that exact
format, e.g. ""Fixes #1234"" (see
https://tinyurl.com/auto-closing for more information). Also, please
write a comment on that issue linking back to this pull request once it is
open. -->
None

#### Brief description of what is fixed or changed
This PR reduces the dependency of the `Point.acc` method on the computed velocities.

#### Other comments
If the velocity in the frame is not yet know. This velocity is computed with the `.vel` method. This also means that this velocity if computed is saved to the `_vel_dict`.

#### Release Notes

<!-- Write the release notes for this release below between the BEGIN and END
statements. The basic format is a bulleted list with the name of the subpackage
and the release note for this PR. For example:

* solvers
  * Added a new solver for logarithmic equations.

* functions
  * Fixed a bug with log of integers.

or if no release note(s) should be included use:

NO ENTRY

See https://github.com/sympy/sympy/wiki/Writing-Release-Notes for more
information on how to write release notes. The bot will check your release
notes automatically to see if they are formatted correctly. -->

<!-- BEGIN RELEASE NOTES -->
* physics.vector
  * Point.acc() will compute acceleration from the point's position vector when the point's velocity is not yet defined. 
<!-- END RELEASE NOTES -->
",True,23628,https://api.github.com/repos/sympy/sympy/pulls/23628,https://github.com/sympy/sympy/pull/23628,closed,54,1,2,4,5,13,3,0,"[{'name': 'GSoC'}, {'name': 'physics.vector'}, {'name': 'CZI: Codegen/Biomech'}]",2022-06-14 09:44:50+00:00,2022-07-14 16:32:51+00:00,2616481.0,"30 days, 6:48:01","[{'comment_id': 910296344, 'comment_body': ""Why are these two lines above needed? It makes me think we'll have to require users to do this?"", 'comment_created': datetime.datetime(2022, 6, 29, 18, 51, 34, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 910297173, 'comment_body': ""Should you also check that the vel_dict is populated even though .vel() isn't explicitly called?"", 'comment_created': datetime.datetime(2022, 6, 29, 18, 52, 37, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 910300704, 'comment_body': ""Can you write out in words in a comment what this test is checking? It isn't clear to me at a first glance what the purpose is."", 'comment_created': datetime.datetime(2022, 6, 29, 18, 56, 54, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 910302302, 'comment_body': 'Because this PR changes the `Point.acc` to also save the accelerations to the `_acc_dict` just like `Point.vel`. The dictionary should be cleaned before using it for another test. Otherwise there are still wrong accelerations in it from the previous test. Note that `a1pt_theory` uses `acc`.', 'comment_created': datetime.datetime(2022, 6, 29, 18, 58, 53, tzinfo=datetime.timezone.utc), 'commenter': 'tjstienstra', 'type': 'User'}, {'comment_id': 910305973, 'comment_body': '`vel_dict` is indeed changed because we call `vel` in the `acc` method.', 'comment_created': datetime.datetime(2022, 6, 29, 19, 3, 28, tzinfo=datetime.timezone.utc), 'commenter': 'tjstienstra', 'type': 'User'}, {'comment_id': 910306555, 'comment_body': 'Would it be better to then just separate these two tests, but this does seem to indicate we are have a change in behavior.', 'comment_created': datetime.datetime(2022, 6, 29, 19, 4, 7, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 910308716, 'comment_body': 'It basically the same as `test_auto_vel_derivative`, where we have three points attached to each other and it is checked whether the `acc` method computes the acceleration correctly while having minimal information (at the same time I check the answer also using the normal velocity theories). But I can indeed add a simple comment.', 'comment_created': datetime.datetime(2022, 6, 29, 19, 6, 29, tzinfo=datetime.timezone.utc), 'commenter': 'tjstienstra', 'type': 'User'}, {'comment_id': 910309622, 'comment_body': ""If `_acc_dict` is used a a cache of sorts, then shouldn't it get cleared internally when the velocities are changed?"", 'comment_created': datetime.datetime(2022, 6, 29, 19, 7, 33, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 910310125, 'comment_body': 'That would become three almost the same tests. The problem is that we just want to try a few different velocities here and building up the entire system again is a bit much code duplication.', 'comment_created': datetime.datetime(2022, 6, 29, 19, 8, 17, tzinfo=datetime.timezone.utc), 'commenter': 'tjstienstra', 'type': 'User'}, {'comment_id': 910312150, 'comment_body': ""> If `_acc_dict` is used a a cache of sorts, then shouldn't it get cleared internally when the velocities are changed?\r\n\r\nI would like the idea, but than we would have to add that to the `set_vel` method. Would be quite nice indeed. But you have the problem that you do not know what other things have been computed using that velocity.\r\n\r\nAn option would be to give a warning that someone is changing an already set velocity, but that would just make you crazy, since you may replace derivative symbols."", 'comment_created': datetime.datetime(2022, 6, 29, 19, 10, 52, tzinfo=datetime.timezone.utc), 'commenter': 'tjstienstra', 'type': 'User'}, {'comment_id': 910322163, 'comment_body': '@moorepants Are these comments clear enough?', 'comment_created': datetime.datetime(2022, 6, 29, 19, 24, 3, tzinfo=datetime.timezone.utc), 'commenter': 'tjstienstra', 'type': 'User'}, {'comment_id': 916072092, 'comment_body': 'Removed the acceleration caching as requested. And hope to soon open an issue about what we want to store in the `_vel_dict` and `_acc_dict`.', 'comment_created': datetime.datetime(2022, 7, 7, 16, 31, 20, tzinfo=datetime.timezone.utc), 'commenter': 'tjstienstra', 'type': 'User'}, {'comment_id': 921260426, 'comment_body': '```suggestion\r\n    # end point of two linkages in series, while getting minimal information.\r\n```', 'comment_created': datetime.datetime(2022, 7, 14, 15, 2, 26, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}]","[{'commit_sha': 'd146f1cb703b1fda846e88bdd5469c871727831d', 'committer_username': 'tjstienstra', 'committer_name': 'Timo Stienstra', 'committer_email': None, 'commit_date': datetime.datetime(2022, 1, 15, 19, 30, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '902aa14c0bb12d98f465eabed14868d7256592fe', 'committer_username': 'tjstienstra', 'committer_name': 'Timo Stienstra', 'committer_email': None, 'commit_date': datetime.datetime(2022, 1, 15, 19, 30, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4de2f76a996b4750c1d7b54d3ed94698d554401a', 'committer_username': 'tjstienstra', 'committer_name': 'Timo Stienstra', 'committer_email': None, 'commit_date': datetime.datetime(2022, 1, 15, 19, 30, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9058e205e8f7021136136434bf7eea635df2c71c', 'committer_username': 'moorepants', 'committer_name': 'Jason K. Moore', 'committer_email': 'moorepants@gmail.com', 'commit_date': datetime.datetime(2010, 5, 13, 22, 43, 8, tzinfo=datetime.timezone.utc)}]",Timo Stienstra,97806294,,User,,12,,11,5
982841986,[GSoC] Four bar linkage example,"<!-- Your title above should be a short description of what
was changed. Do not include the issue number in the title. -->

#### References to other Issues or PRs
<!-- If this pull request fixes an issue, write ""Fixes #NNNN"" in that exact
format, e.g. ""Fixes #1234"" (see
https://tinyurl.com/auto-closing for more information). Also, please
write a comment on that issue linking back to this pull request once it is
open. -->


#### Brief description of what is fixed or changed
Fixed a typo in the multi degree of freedom system example. And added a four bar linkage example which uses the joints framework. What this example also shows is how to deal with for example holonomic constraints when using the joints framework.

#### Other comments


#### Release Notes

<!-- Write the release notes for this release below between the BEGIN and END
statements. The basic format is a bulleted list with the name of the subpackage
and the release note for this PR. For example:

* solvers
  * Added a new solver for logarithmic equations.

* functions
  * Fixed a bug with log of integers.

or if no release note(s) should be included use:

NO ENTRY

See https://github.com/sympy/sympy/wiki/Writing-Release-Notes for more
information on how to write release notes. The bot will check your release
notes automatically to see if they are formatted correctly. -->

<!-- BEGIN RELEASE NOTES -->
* other
  * Added a four bar linkage example which uses the joints framework
<!-- END RELEASE NOTES -->
",True,23705,https://api.github.com/repos/sympy/sympy/pulls/23705,https://github.com/sympy/sympy/pull/23705,closed,226,1,5,9,15,27,3,0,"[{'name': 'Documentation'}, {'name': 'physics.mechanics'}, {'name': 'CZI: Codegen/Biomech'}]",2022-06-29 16:52:06+00:00,2022-07-14 18:09:34+00:00,1300648.0,"15 days, 1:17:28","[{'comment_id': 910339768, 'comment_body': 'A good habit to start is to make these references: `:py:class:~JointsMethod` or something like that. I think there are examples in the documentation style guide.', 'comment_created': datetime.datetime(2022, 6, 29, 19, 47, 3, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 910342117, 'comment_body': 'Instead of ""frontend"" and ""backend"", maybe just say JointsMethod is used to book keep the open loop system.', 'comment_created': datetime.datetime(2022, 6, 29, 19, 48, 37, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 910343821, 'comment_body': 'These `_` methods are effectively private and showing how they are used in the docs indicates that we might be supporting them as public API. Can you just setup a KanesMethod() separately and extract the info you need from JointsMethod and pass into the KanesMethod without attaching it to JointsMethod so that private methods are not used?', 'comment_created': datetime.datetime(2022, 6, 29, 19, 50, 36, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 910344213, 'comment_body': 'Probably a good idea to set a width for svgs.', 'comment_created': datetime.datetime(2022, 6, 29, 19, 51, 8, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 910344451, 'comment_body': '```suggestion\r\nThe four bar linkage is a common example used in mechanics, which has two holonomic constraints. This example will make use of joints functionality provided in :mod:`sympy.physics.mechanics`. In summary we will use bodies and joints to define the open loop system. Next, we define the configuration constraints to close the loop. With the ``JointsMethod`` we get the input to manually setup the ``KanesMethod`` as its backend.\r\n```', 'comment_created': datetime.datetime(2022, 6, 29, 19, 51, 29, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 910344831, 'comment_body': 'Yeah is probably clearer, used fronted and backend since [the other joints example](https://docs.sympy.org/latest/modules/physics/mechanics/examples/multi_degree_freedom_holonomic_system.html) also uses those terms.', 'comment_created': datetime.datetime(2022, 6, 29, 19, 52, 3, tzinfo=datetime.timezone.utc), 'commenter': 'tjstienstra', 'type': 'User'}, {'comment_id': 910347064, 'comment_body': 'Ok, you can keep it then since we already did it. Just make sure the terms are defined somewhere if that is what we will use.', 'comment_created': datetime.datetime(2022, 6, 29, 19, 53, 43, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 910357178, 'comment_body': ""Yeah, sure. Personally I liked to keep it under the `JointsMethod`, so you just keep one method variable in the open and than you'll also be able to use `jointsmethod.mass_matrix` etc.<br>\r\nAlso we are also using `_convert_bodies`. Not sure exactly why this method is in the `JointMethod`. You should be able to pass bodies from the `Body` class to the backend methods (opinion, not sure whether this is possible)."", 'comment_created': datetime.datetime(2022, 6, 29, 20, 0, 19, tzinfo=datetime.timezone.utc), 'commenter': 'tjstienstra', 'type': 'User'}, {'comment_id': 910371815, 'comment_body': 'Will look into it, thanks.', 'comment_created': datetime.datetime(2022, 6, 29, 20, 9, 50, tzinfo=datetime.timezone.utc), 'commenter': 'tjstienstra', 'type': 'User'}, {'comment_id': 910618774, 'comment_body': ""> Yeah, sure. Personally I liked to keep it under the JointsMethod, so you just keep one method variable in the open and than you'll also be able to use jointsmethod.mass_matrix etc.\r\n\r\nSure, but we shouldn't have private methods in the documentation. The two options are: 1) don't use private methods or 2) convert methods to public. If 2) is used we should be fairly certain that is the API we want because once public, we are stuck with it.\r\n\r\n>  Also we are also using _convert_bodies. Not sure exactly why this method is in the JointMethod. You should be able to pass bodies from the Body class to the backend methods (opinion, not sure whether this is possible).\r\n\r\nRigidBody and Particle work with KanesMethod but I don't think Body does. So maybe that's why."", 'comment_created': datetime.datetime(2022, 6, 30, 5, 29, 5, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 910662718, 'comment_body': 'I would personally go with a third option, namely check why `Lagrange` and/or `Kanes` cannot handle the `Body` class and fix that. Because it seems to me that `Body` should also be compatible.', 'comment_created': datetime.datetime(2022, 6, 30, 6, 44, 50, tzinfo=datetime.timezone.utc), 'commenter': 'tjstienstra', 'type': 'User'}, {'comment_id': 910778970, 'comment_body': ""This is a related issue: https://github.com/sympy/sympy/issues/21964\r\n\r\nYes, you can make that fix, but if the goal is to get this example in now, then it's simpler to make the example work with the current public API and then when you improve the functionality later, this example is updated to match."", 'comment_created': datetime.datetime(2022, 6, 30, 8, 55, 35, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 912956227, 'comment_body': ""The `JointsMethod` is not added to the docstring yet. Currently I'm thinking about making a new PR in which:\r\n- [The Joint (Docstrings) page](https://docs.sympy.org/dev/modules/physics/mechanics/api/joint.html) is renamed to `Joints Framework (Docstrings)` (better name for framework is welcome).\r\n   - Here I would also add the `JointsMethod` docstring\r\n- Add a separate guide to the [guide to mechanics](https://docs.sympy.org/dev/modules/physics/mechanics/index.html#guide-to-mechanics) called `Joints Framework in Physics/Mechanics`. This guide will include:\r\n   - An explanation of the purposes of the different classes used (e.g. `Joint`, `PinJoint`, `JointsMethod`)\r\n   - The explanation mentioned in #21705\r\n\r\nI would put the images about each of the joints (like shown [here](https://tjstienstra.github.io/gsoc/2022/2022/05/21/my-first-post.html) for the `CylindricalJoint`)) in the docstrings.\r\n\r\n@sidhu1012 and @moorepants what do you think of this proposal?"", 'comment_created': datetime.datetime(2022, 7, 4, 12, 30, 7, tzinfo=datetime.timezone.utc), 'commenter': 'tjstienstra', 'type': 'User'}, {'comment_id': 912975612, 'comment_body': 'I hope it is a bit more clear now, personally like the word book-keeping more and also the split that it is specifically for the open-loop system.', 'comment_created': datetime.datetime(2022, 7, 4, 12, 53, 33, tzinfo=datetime.timezone.utc), 'commenter': 'tjstienstra', 'type': 'User'}, {'comment_id': 913123557, 'comment_body': '@sidhu1012 Do I understand correctly that `_convert_bodies` is used for the purpose of converting bodies that are in fact a `Particle`, since a `Particle` for example does not have a central inertia?', 'comment_created': datetime.datetime(2022, 7, 4, 15, 59, 13, tzinfo=datetime.timezone.utc), 'commenter': 'tjstienstra', 'type': 'User'}, {'comment_id': 913128852, 'comment_body': 'Thanks for the suggestion.', 'comment_created': datetime.datetime(2022, 7, 4, 16, 8, 57, tzinfo=datetime.timezone.utc), 'commenter': 'tjstienstra', 'type': 'User'}, {'comment_id': 915123125, 'comment_body': 'Created a [draft PR](https://github.com/sympy/sympy/pull/23730) for it.', 'comment_created': datetime.datetime(2022, 7, 6, 18, 8, 22, tzinfo=datetime.timezone.utc), 'commenter': 'tjstienstra', 'type': 'User'}, {'comment_id': 915958803, 'comment_body': 'We suggest adding a legend for the color meanings.', 'comment_created': datetime.datetime(2022, 7, 7, 14, 42, 58, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 915960042, 'comment_body': 'I think we generally avoid the backslash for line continuation and instead make use of parentheses for this.', 'comment_created': datetime.datetime(2022, 7, 7, 14, 44, 5, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 916186136, 'comment_body': '![four_bar_linkage](https://user-images.githubusercontent.com/97806294/177849226-4dab38ac-402e-46e8-98cb-fa1ba46e5e14.svg)\r\nChanged it to this, it is currently only suited for the light theme.', 'comment_created': datetime.datetime(2022, 7, 7, 18, 49, 58, tzinfo=datetime.timezone.utc), 'commenter': 'tjstienstra', 'type': 'User'}, {'comment_id': 916188406, 'comment_body': 'Okay, thought I should keep it within the 80 line width, but updated it.\r\nWhere is stated what line width is used within SymPy? Saw someone else also speaking about 100.', 'comment_created': datetime.datetime(2022, 7, 7, 18, 52, 55, tzinfo=datetime.timezone.utc), 'commenter': 'tjstienstra', 'type': 'User'}, {'comment_id': 916243489, 'comment_body': ""This is a numerical test I've created, apparently I cannot import ``array`` from ``numpy``. But do you also agree with this setup to test systems, where the equations of motion become bigger?"", 'comment_created': datetime.datetime(2022, 7, 7, 20, 10, 35, tzinfo=datetime.timezone.utc), 'commenter': 'tjstienstra', 'type': 'User'}, {'comment_id': 916991900, 'comment_body': ""I've just removed the `numpy` dependency, so should work now."", 'comment_created': datetime.datetime(2022, 7, 8, 16, 55, 5, tzinfo=datetime.timezone.utc), 'commenter': 'tjstienstra', 'type': 'User'}, {'comment_id': 921242565, 'comment_body': '"".., which can be formulated with only two explicit holonomic constraints"" is a bit more correct.', 'comment_created': datetime.datetime(2022, 7, 14, 14, 46, 37, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 921277745, 'comment_body': '> @sidhu1012 Do I understand correctly that `_convert_bodies` is used for the purpose of converting bodies that are in fact a `Particle`, since a `Particle` for example does not have a central inertia?\r\n\r\nWill look into it .', 'comment_created': datetime.datetime(2022, 7, 14, 15, 18, 31, tzinfo=datetime.timezone.utc), 'commenter': 'sidhu1012', 'type': 'User'}, {'comment_id': 921437435, 'comment_body': 'We (mostly) follow pep8: https://peps.python.org/pep-0008/#maximum-line-length', 'comment_created': datetime.datetime(2022, 7, 14, 18, 4, 48, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 921438388, 'comment_body': 'Oh yeah, since numpy is an optional dependency of sympy, you would have to accommodate that.', 'comment_created': datetime.datetime(2022, 7, 14, 18, 6, 3, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}]","[{'commit_sha': 'c281b9c20865ab029ba8ddcb86748442c3827df1', 'committer_username': 'tjstienstra', 'committer_name': 'Timo Stienstra', 'committer_email': None, 'commit_date': datetime.datetime(2022, 1, 15, 19, 30, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f2e83cc3c4b500193ad027552edcb5a1ece779db', 'committer_username': 'tjstienstra', 'committer_name': 'Timo Stienstra', 'committer_email': None, 'commit_date': datetime.datetime(2022, 1, 15, 19, 30, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '558dc5302a98db6514d9594db37d9c13a9d80b71', 'committer_username': 'tjstienstra', 'committer_name': 'Timo Stienstra', 'committer_email': None, 'commit_date': datetime.datetime(2022, 1, 15, 19, 30, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4052d45183e94bec703f5054999592224f44aa20', 'committer_username': 'tjstienstra', 'committer_name': 'Timo Stienstra', 'committer_email': None, 'commit_date': datetime.datetime(2022, 1, 15, 19, 30, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0e0e8b5ac62bf0d7659569c901a18adcd9e24203', 'committer_username': 'tjstienstra', 'committer_name': 'Timo Stienstra', 'committer_email': None, 'commit_date': datetime.datetime(2022, 1, 15, 19, 30, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '725eda35eccf7a195aa7d1ee1a90a892ed47a395', 'committer_username': 'tjstienstra', 'committer_name': 'Timo Stienstra', 'committer_email': None, 'commit_date': datetime.datetime(2022, 1, 15, 19, 30, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '14779ee5cba8f30ba818ef92a65a75e8b3cfd1ee', 'committer_username': 'tjstienstra', 'committer_name': 'Timo Stienstra', 'committer_email': None, 'commit_date': datetime.datetime(2022, 1, 15, 19, 30, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9c74c5e7b4a4c08103329cdb7b8f0194b7d83775', 'committer_username': 'tjstienstra', 'committer_name': 'Timo Stienstra', 'committer_email': None, 'commit_date': datetime.datetime(2022, 1, 15, 19, 30, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3500fe37308382700b8f61ca4ca1a21b274e45df', 'committer_username': 'tjstienstra', 'committer_name': 'Timo Stienstra', 'committer_email': None, 'commit_date': datetime.datetime(2022, 1, 15, 19, 30, 35, tzinfo=datetime.timezone.utc)}]",Timo Stienstra,97806294,,User,,12,,11,5
989122978,[GSoC] Joints framework documentation,"<!-- Your title above should be a short description of what
was changed. Do not include the issue number in the title. -->

#### References to other Issues or PRs
<!-- If this pull request fixes an issue, write ""Fixes #NNNN"" in that exact
format, e.g. ""Fixes #1234"" (see
https://tinyurl.com/auto-closing for more information). Also, please
write a comment on that issue linking back to this pull request once it is
open. -->


#### Brief description of what is fixed or changed
Fixes #21705.
Add general explanation about the joints framework within the physics/mechanics module.
Add images explaining the `PinJoint` and `PrismaticJoint`.
Add the `JointsMethod` docstring to the online documentation.

#### Other comments


#### Release Notes

<!-- Write the release notes for this release below between the BEGIN and END
statements. The basic format is a bulleted list with the name of the subpackage
and the release note for this PR. For example:

* solvers
  * Added a new solver for logarithmic equations.

* functions
  * Fixed a bug with log of integers.

or if no release note(s) should be included use:

NO ENTRY

See https://github.com/sympy/sympy/wiki/Writing-Release-Notes for more
information on how to write release notes. The bot will check your release
notes automatically to see if they are formatted correctly. -->

<!-- BEGIN RELEASE NOTES -->
* other
  * Add documentation about the joints framework in the physics/mechanics module.
<!-- END RELEASE NOTES -->
",True,23730,https://api.github.com/repos/sympy/sympy/pulls/23730,https://github.com/sympy/sympy/pull/23730,closed,19687,8,9,5,10,5,3,0,"[{'name': 'Documentation'}, {'name': 'physics.mechanics'}, {'name': 'CZI: Codegen/Biomech'}]",2022-07-06 18:07:53+00:00,2022-07-14 18:10:28+00:00,691355.0,"8 days, 0:02:35","[{'comment_id': 921223891, 'comment_body': '```suggestion\r\nFirst off it needs two bodies: the parent body (shown in green) and the child body (shown in blue).\r\n```', 'comment_created': datetime.datetime(2022, 7, 14, 14, 29, 58, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 921224352, 'comment_body': '```suggestion\r\nBoth of these bodies have a mass center from which the position of the joint is defined.\r\n```', 'comment_created': datetime.datetime(2022, 7, 14, 14, 30, 22, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 921225106, 'comment_body': 'The color looks more red than orange to me.', 'comment_created': datetime.datetime(2022, 7, 14, 14, 31, 3, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 921227259, 'comment_body': ""I guess people could create these joints to just get static connections of bodies, so having a dynamicsymbol isn't strictly needed."", 'comment_created': datetime.datetime(2022, 7, 14, 14, 32, 54, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 921237836, 'comment_body': 'Maybe note the position vectors are 1/2*P.x + 1/10*P.y, etc.', 'comment_created': datetime.datetime(2022, 7, 14, 14, 42, 19, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}]","[{'commit_sha': '7ea2a7b8393e861c11fecf45fd2e76a598794ebf', 'committer_username': 'tjstienstra', 'committer_name': 'Timo Stienstra', 'committer_email': None, 'commit_date': datetime.datetime(2022, 1, 15, 19, 30, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '80f5778df744029b26d9abc6a9367e11a89564ac', 'committer_username': 'tjstienstra', 'committer_name': 'Timo Stienstra', 'committer_email': None, 'commit_date': datetime.datetime(2022, 1, 15, 19, 30, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '09191ff0f59d4c3e93e0a0963336a580375fbc79', 'committer_username': 'tjstienstra', 'committer_name': 'Timo Stienstra', 'committer_email': None, 'commit_date': datetime.datetime(2022, 1, 15, 19, 30, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a712deab624663d75864abf896864be09fe32902', 'committer_username': 'tjstienstra', 'committer_name': 'Timo Stienstra', 'committer_email': None, 'commit_date': datetime.datetime(2022, 1, 15, 19, 30, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'abd14ffc5dd69ce723598e58f5b933750cacaa12', 'committer_username': 'tjstienstra', 'committer_name': 'Timo Stienstra', 'committer_email': None, 'commit_date': datetime.datetime(2022, 1, 15, 19, 30, 35, tzinfo=datetime.timezone.utc)}]",Timo Stienstra,97806294,,User,,12,,11,5
1019961010,[GSoC] Joint images to SVG,"<!-- Your title above should be a short description of what
was changed. Do not include the issue number in the title. -->

#### References to other Issues or PRs
<!-- If this pull request fixes an issue, write ""Fixes #NNNN"" in that exact
format, e.g. ""Fixes #1234"" (see
https://tinyurl.com/auto-closing for more information). Also, please
write a comment on that issue linking back to this pull request once it is
open. -->
Improves #23730


#### Brief description of what is fixed or changed
This PR replaces the PNG images introduced in #23730 for SVG, which have a small file size.

#### Other comments


#### Release Notes

<!-- Write the release notes for this release below between the BEGIN and END
statements. The basic format is a bulleted list with the name of the subpackage
and the release note for this PR. For example:

* solvers
  * Added a new solver for logarithmic equations.

* functions
  * Fixed a bug with log of integers.

or if no release note(s) should be included use:

NO ENTRY

See https://github.com/sympy/sympy/wiki/Writing-Release-Notes for more
information on how to write release notes. The bot will check your release
notes automatically to see if they are formatted correctly. -->

<!-- BEGIN RELEASE NOTES -->
* other
   * Replace PNG joint images for SVG
<!-- END RELEASE NOTES -->
",True,23890,https://api.github.com/repos/sympy/sympy/pulls/23890,https://github.com/sympy/sympy/pull/23890,closed,187,19586,6,1,5,0,2,0,"[{'name': 'physics.mechanics'}, {'name': 'CZI: Codegen/Biomech'}]",2022-08-08 08:12:12+00:00,2022-08-10 12:53:51+00:00,189699.0,"2 days, 4:41:39",[],"[{'commit_sha': '997a590f0c6274ebec0c3bad9efd9f19838ce032', 'committer_username': 'tjstienstra', 'committer_name': 'Timo Stienstra', 'committer_email': None, 'commit_date': datetime.datetime(2022, 1, 15, 19, 30, 35, tzinfo=datetime.timezone.utc)}]",Timo Stienstra,97806294,,User,,12,,11,5
989122978,[GSoC] Joints framework documentation,"<!-- Your title above should be a short description of what
was changed. Do not include the issue number in the title. -->

#### References to other Issues or PRs
<!-- If this pull request fixes an issue, write ""Fixes #NNNN"" in that exact
format, e.g. ""Fixes #1234"" (see
https://tinyurl.com/auto-closing for more information). Also, please
write a comment on that issue linking back to this pull request once it is
open. -->


#### Brief description of what is fixed or changed
Fixes #21705.
Add general explanation about the joints framework within the physics/mechanics module.
Add images explaining the `PinJoint` and `PrismaticJoint`.
Add the `JointsMethod` docstring to the online documentation.

#### Other comments


#### Release Notes

<!-- Write the release notes for this release below between the BEGIN and END
statements. The basic format is a bulleted list with the name of the subpackage
and the release note for this PR. For example:

* solvers
  * Added a new solver for logarithmic equations.

* functions
  * Fixed a bug with log of integers.

or if no release note(s) should be included use:

NO ENTRY

See https://github.com/sympy/sympy/wiki/Writing-Release-Notes for more
information on how to write release notes. The bot will check your release
notes automatically to see if they are formatted correctly. -->

<!-- BEGIN RELEASE NOTES -->
* other
  * Add documentation about the joints framework in the physics/mechanics module.
<!-- END RELEASE NOTES -->
",True,23730,https://api.github.com/repos/sympy/sympy/pulls/23730,https://github.com/sympy/sympy/pull/23730,closed,19687,8,9,5,10,5,3,0,"[{'name': 'Documentation'}, {'name': 'physics.mechanics'}, {'name': 'CZI: Codegen/Biomech'}]",2022-07-06 18:07:53+00:00,2022-07-14 18:10:28+00:00,691355.0,"8 days, 0:02:35","[{'comment_id': 921223891, 'comment_body': '```suggestion\r\nFirst off it needs two bodies: the parent body (shown in green) and the child body (shown in blue).\r\n```', 'comment_created': datetime.datetime(2022, 7, 14, 14, 29, 58, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 921224352, 'comment_body': '```suggestion\r\nBoth of these bodies have a mass center from which the position of the joint is defined.\r\n```', 'comment_created': datetime.datetime(2022, 7, 14, 14, 30, 22, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 921225106, 'comment_body': 'The color looks more red than orange to me.', 'comment_created': datetime.datetime(2022, 7, 14, 14, 31, 3, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 921227259, 'comment_body': ""I guess people could create these joints to just get static connections of bodies, so having a dynamicsymbol isn't strictly needed."", 'comment_created': datetime.datetime(2022, 7, 14, 14, 32, 54, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 921237836, 'comment_body': 'Maybe note the position vectors are 1/2*P.x + 1/10*P.y, etc.', 'comment_created': datetime.datetime(2022, 7, 14, 14, 42, 19, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}]","[{'commit_sha': '7ea2a7b8393e861c11fecf45fd2e76a598794ebf', 'committer_username': 'tjstienstra', 'committer_name': 'Timo Stienstra', 'committer_email': None, 'commit_date': datetime.datetime(2022, 1, 15, 19, 30, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '80f5778df744029b26d9abc6a9367e11a89564ac', 'committer_username': 'tjstienstra', 'committer_name': 'Timo Stienstra', 'committer_email': None, 'commit_date': datetime.datetime(2022, 1, 15, 19, 30, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '09191ff0f59d4c3e93e0a0963336a580375fbc79', 'committer_username': 'tjstienstra', 'committer_name': 'Timo Stienstra', 'committer_email': None, 'commit_date': datetime.datetime(2022, 1, 15, 19, 30, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a712deab624663d75864abf896864be09fe32902', 'committer_username': 'tjstienstra', 'committer_name': 'Timo Stienstra', 'committer_email': None, 'commit_date': datetime.datetime(2022, 1, 15, 19, 30, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'abd14ffc5dd69ce723598e58f5b933750cacaa12', 'committer_username': 'tjstienstra', 'committer_name': 'Timo Stienstra', 'committer_email': None, 'commit_date': datetime.datetime(2022, 1, 15, 19, 30, 35, tzinfo=datetime.timezone.utc)}]",Timo Stienstra,97806294,,User,,12,,11,5
1025350724,[GSoC] Switch joints framework to using intermediate frames,"<!-- Your title above should be a short description of what
was changed. Do not include the issue number in the title. -->

#### References to other Issues or PRs
<!-- If this pull request fixes an issue, write ""Fixes #NNNN"" in that exact
format, e.g. ""Fixes #1234"" (see
https://tinyurl.com/auto-closing for more information). Also, please
write a comment on that issue linking back to this pull request once it is
open. -->


#### Brief description of what is fixed or changed
This PR changes the basic definition of a joint. Instead of using a `parent_axis` in combination with a `child_axis` to determine the intermediate frame and joint axis, it now uses a separate intermediate frame for both the parent and child as well as a separately defined joint axis. This follows mostly a general definition of a mobilizer described in [this paper](https://link.springer.com/article/10.1007/s11071-010-9717-3) by Seth, A., Sherman, M., Eastman, P., & Delp, S.

#### Other comments
This will also make it more easy to implement a `Mobilizer` class, for defining more advanced joints as described in the paper.

This PR will also fix #23913 in the joints part.

#### Release Notes

<!-- Write the release notes for this release below between the BEGIN and END
statements. The basic format is a bulleted list with the name of the subpackage
and the release note for this PR. For example:

* solvers
  * Added a new solver for logarithmic equations.

* functions
  * Fixed a bug with log of integers.

or if no release note(s) should be included use:

NO ENTRY

See https://github.com/sympy/sympy/wiki/Writing-Release-Notes for more
information on how to write release notes. The bot will check your release
notes automatically to see if they are formatted correctly. -->

<!-- BEGIN RELEASE NOTES -->
* physics.mechanics
   * BREAKING: deprecated parent_axis and child_axis arguments for the joint classes
   * Implemented a joint axis in combination with intermediate frames for defining joints
   * BREAKING: replaced parent_joint_pos and child_joint_pos arguments for parent_point and child_point
<!-- END RELEASE NOTES -->
",True,23920,https://api.github.com/repos/sympy/sympy/pulls/23920,https://github.com/sympy/sympy/pull/23920,closed,1289,397,10,26,15,60,3,0,"[{'name': 'physics.mechanics'}, {'name': 'GSoC'}, {'name': 'CZI: Codegen/Biomech'}]",2022-08-12 20:14:29+00:00,2022-09-08 14:05:49+00:00,2310680.0,"26 days, 17:51:20","[{'comment_id': 949245504, 'comment_body': ""Move to separate `else` in try-except block as this line won't be the one throwing the intended `ValueError`."", 'comment_created': datetime.datetime(2022, 8, 18, 14, 52, 31, tzinfo=datetime.timezone.utc), 'commenter': 'brocksam', 'type': 'User'}, {'comment_id': 949246275, 'comment_body': 'Can this method be made part of a mixin class inherited by the appropriate joint subclasses?', 'comment_created': datetime.datetime(2022, 8, 18, 14, 53, 12, tzinfo=datetime.timezone.utc), 'commenter': 'brocksam', 'type': 'User'}, {'comment_id': 949266755, 'comment_body': 'Can we make `theta` and `omega` keyword arguments here? Otherwise it relies on the person reading the documentation having good understanding on `PinJoint`s constructor signature.', 'comment_created': datetime.datetime(2022, 8, 18, 15, 8, 56, tzinfo=datetime.timezone.utc), 'commenter': 'brocksam', 'type': 'User'}, {'comment_id': 950588315, 'comment_body': 'Thank you for the suggestion. Is the `JointAxisMixin` as you would expect? Did leave the `joint_axis` property with the subclasses themselves, so it is more clear in the documentation.', 'comment_created': datetime.datetime(2022, 8, 19, 22, 21, 47, tzinfo=datetime.timezone.utc), 'commenter': 'tjstienstra', 'type': 'User'}, {'comment_id': 954752551, 'comment_body': '@sidhu1012 I thought based on #22304 that this issue would be fixed, but it still fails when using the symengine. Could you give some clarification?', 'comment_created': datetime.datetime(2022, 8, 25, 9, 44, 38, tzinfo=datetime.timezone.utc), 'commenter': 'tjstienstra', 'type': 'User'}, {'comment_id': 954984484, 'comment_body': ""This https://github.com/sympy/sympy/issues/22304#issuecomment-1085461259 says that the issue is fixed, earlier it wasn't sympy's error, I think using latest symengine version should fix this. "", 'comment_created': datetime.datetime(2022, 8, 25, 13, 41, 35, tzinfo=datetime.timezone.utc), 'commenter': 'sidhu1012', 'type': 'User'}, {'comment_id': 955003829, 'comment_body': ""After [this commit](https://github.com/sympy/sympy/pull/23920/commits/30d833b1d3e5a0703ef2d7da6681d23f1fbd75f5) I've introduced Xfail, but before that it was still failing on the latest symengine version (I tested 0.9.2 local)."", 'comment_created': datetime.datetime(2022, 8, 25, 13, 57, 8, tzinfo=datetime.timezone.utc), 'commenter': 'tjstienstra', 'type': 'User'}, {'comment_id': 959545637, 'comment_body': ""Currently the velocities are only set in the body frames not also in the intermediate frames. This means that these intermediate frames can still be translating with respect to their body, which should not be the case.\r\nEither some extra `set_vel`'s should be added or `self.parent_point.set_vel(self.parent.frame, 0)` should be changed to `self.parent_point.set_vel(self.parent_interframe, 0)` (same for the child).\r\n\r\nWhich option would be best?"", 'comment_created': datetime.datetime(2022, 8, 31, 12, 51, 35, tzinfo=datetime.timezone.utc), 'commenter': 'tjstienstra', 'type': 'User'}, {'comment_id': 959548668, 'comment_body': ""Here is a simple experiment:\r\n```py\r\nfrom sympy import pi\r\nfrom sympy.physics.mechanics import Body, PrismaticJoint, ReferenceFrame\r\n\r\nP, C = Body('P'), Body('C')\r\nPint, Cint = ReferenceFrame('Pint'), ReferenceFrame('Cint')\r\nPint.orient_axis(P.frame, P.frame.x, pi)\r\nCint.orient_axis(C.frame, C.frame.y, -pi / 2)\r\njoint = PrismaticJoint('P', P, C, parent_interframe=Pint, child_interframe=Cint,\r\n                       parent_point=P.x, child_point=-C.y, joint_axis=P.z)\r\nP.masscenter.vel(joint.parent_interframe)\r\nValueError: Velocity of point P_masscenter has not been defined in ReferenceFrame Pint\r\n```"", 'comment_created': datetime.datetime(2022, 8, 31, 12, 54, 30, tzinfo=datetime.timezone.utc), 'commenter': 'tjstienstra', 'type': 'User'}, {'comment_id': 963568962, 'comment_body': '```suggestion\r\ne.g. the axis around which the rotation occurs, then this axis can be specified\r\n```', 'comment_created': datetime.datetime(2022, 9, 6, 10, 59, 47, tzinfo=datetime.timezone.utc), 'commenter': 'brocksam', 'type': 'User'}, {'comment_id': 963569722, 'comment_body': '```suggestion\r\nboth bodies. Furthermore, if a joint like the ``PinJoint`` has a specific joint axis,\r\n```', 'comment_created': datetime.datetime(2022, 9, 6, 11, 0, 39, tzinfo=datetime.timezone.utc), 'commenter': 'brocksam', 'type': 'User'}, {'comment_id': 963570595, 'comment_body': '```suggestion\r\nusing the ``joint_axis`` argument. An advantage of this setup is that one can\r\nmore accurately define the transformation from a parent body to a child body.\r\n```', 'comment_created': datetime.datetime(2022, 9, 6, 11, 1, 41, tzinfo=datetime.timezone.utc), 'commenter': 'brocksam', 'type': 'User'}, {'comment_id': 963571414, 'comment_body': '```suggestion\r\nFor example, suppose you want a ``PinJoint`` that rotates the child body around the\r\n```', 'comment_created': datetime.datetime(2022, 9, 6, 11, 2, 42, tzinfo=datetime.timezone.utc), 'commenter': 'brocksam', 'type': 'User'}, {'comment_id': 963572562, 'comment_body': '```suggestion\r\nfor you, then you can still make use of this feature by providing vectors to\r\n```', 'comment_created': datetime.datetime(2022, 9, 6, 11, 4, 7, tzinfo=datetime.timezone.utc), 'commenter': 'brocksam', 'type': 'User'}, {'comment_id': 963572733, 'comment_body': '```suggestion\r\n``parent_interframe`` and ``child_interframe``, which are then oriented such\r\n```', 'comment_created': datetime.datetime(2022, 9, 6, 11, 4, 19, tzinfo=datetime.timezone.utc), 'commenter': 'brocksam', 'type': 'User'}, {'comment_id': 963573169, 'comment_body': '```suggestion\r\ngiven vector:\r\n```', 'comment_created': datetime.datetime(2022, 9, 6, 11, 4, 48, tzinfo=datetime.timezone.utc), 'commenter': 'brocksam', 'type': 'User'}, {'comment_id': 963574933, 'comment_body': '```suggestion\r\nThe argument names for specifying the attachment points of a joint in\r\n``sympy.physics.mechanics`` , i.e. ``parent_joint_pos`` and ``child_joint_pos``,\r\nhave been changed to ``parent_point`` and ``child_point``. This is because these\r\narguments can now also be ``Point`` objects, so they can be exactly the same as\r\nthe ``parent_point`` and ``child_point`` attributes.\r\n```', 'comment_created': datetime.datetime(2022, 9, 6, 11, 6, 58, tzinfo=datetime.timezone.utc), 'commenter': 'brocksam', 'type': 'User'}, {'comment_id': 963577143, 'comment_body': '```suggestion\r\n        vector is provided, then the attachment point is computed by adding the\r\n```', 'comment_created': datetime.datetime(2022, 9, 6, 11, 9, 42, tzinfo=datetime.timezone.utc), 'commenter': 'brocksam', 'type': 'User'}, {'comment_id': 963577408, 'comment_body': '```suggestion\r\n        vector is provided, then the attachment point is computed by adding the\r\n```', 'comment_created': datetime.datetime(2022, 9, 6, 11, 10, tzinfo=datetime.timezone.utc), 'commenter': 'brocksam', 'type': 'User'}, {'comment_id': 963578611, 'comment_body': ""This first sentence isn't clear, possible typo?"", 'comment_created': datetime.datetime(2022, 9, 6, 11, 11, 19, tzinfo=datetime.timezone.utc), 'commenter': 'brocksam', 'type': 'User'}, {'comment_id': 963578731, 'comment_body': ""This first sentence isn't clear, possible typo?"", 'comment_created': datetime.datetime(2022, 9, 6, 11, 11, 28, tzinfo=datetime.timezone.utc), 'commenter': 'brocksam', 'type': 'User'}, {'comment_id': 963579165, 'comment_body': ""This first sentence isn't clear, possible typo?"", 'comment_created': datetime.datetime(2022, 9, 6, 11, 11, 57, tzinfo=datetime.timezone.utc), 'commenter': 'brocksam', 'type': 'User'}, {'comment_id': 963579290, 'comment_body': ""This first sentence isn't clear, possible typo?"", 'comment_created': datetime.datetime(2022, 9, 6, 11, 12, 5, tzinfo=datetime.timezone.utc), 'commenter': 'brocksam', 'type': 'User'}, {'comment_id': 963580959, 'comment_body': '```suggestion\r\n    When providing a vector as the intermediate frame, a new intermediate frame\r\n    is created which aligns its X axis with the provided vector. This is done\r\n    with a single fixed rotation around a rotation axis. This rotation axis is\r\n    determined by taking the cross product of the ``body.x`` axis with the\r\n    provided vector. In the case where the provided vector is in the ``-body.x``\r\n    direction, the rotation is done around the ``body.y`` axis.\r\n```', 'comment_created': datetime.datetime(2022, 9, 6, 11, 13, 58, tzinfo=datetime.timezone.utc), 'commenter': 'brocksam', 'type': 'User'}, {'comment_id': 963585008, 'comment_body': 'would say ""the parent body to the child body""', 'comment_created': datetime.datetime(2022, 9, 6, 11, 18, 46, tzinfo=datetime.timezone.utc), 'commenter': 'tjstienstra', 'type': 'User'}, {'comment_id': 963586125, 'comment_body': ""Should avoid having superfluous code within the `try` block that isn't expected to raise the intended exception to be caught. Move to separate `else` block.\r\n```suggestion\r\n            try:\r\n                ax.to_matrix(frame)\r\n            except ValueError:\r\n                pass\r\n            else:\r\n                ref_frame = frame\r\n                break\r\n```"", 'comment_created': datetime.datetime(2022, 9, 6, 11, 20, 3, tzinfo=datetime.timezone.utc), 'commenter': 'brocksam', 'type': 'User'}, {'comment_id': 963588409, 'comment_body': 'Can this be refracted to remove redundancy?\r\n```suggestion\r\n        if x != 0:\r\n            if y != 0:\r\n                if z != 0:\r\n                    return cross(axis, frame.x)\r\n            if z != 0:\r\n                return frame.y\r\n            return frame.z\r\n    else:\r\n            if y != 0:\r\n                return frame.x\r\n            return frame.y\r\n```', 'comment_created': datetime.datetime(2022, 9, 6, 11, 22, 45, tzinfo=datetime.timezone.utc), 'commenter': 'brocksam', 'type': 'User'}, {'comment_id': 963589718, 'comment_body': '```suggestion\r\n            frame is oriented.\r\n```', 'comment_created': datetime.datetime(2022, 9, 6, 11, 24, 17, tzinfo=datetime.timezone.utc), 'commenter': 'brocksam', 'type': 'User'}, {'comment_id': 963592656, 'comment_body': '```suggestion\r\n        The direction cosine matrix between the given frame and intermediate\r\n        frame is formed using a simple rotation about an axis that is normal to\r\n        both ``align_axis`` and ``frame_axis``. In general, the normal axis is\r\n        formed by crossing the ``frame_axis`` with the ``align_axis``. The\r\n        exception is if the axes are parallel with opposite directions, in which\r\n        case the rotation vector is chosen using the rules in the following table\r\n        with the vectors expressed in the given frame:\r\n```', 'comment_created': datetime.datetime(2022, 9, 6, 11, 27, 35, tzinfo=datetime.timezone.utc), 'commenter': 'brocksam', 'type': 'User'}, {'comment_id': 963595259, 'comment_body': 'Reorder to avoid excess nesting.\r\n```suggestion\r\n        if rotation_axis == Vector(0) or angle != pi:\r\n            return frame\r\n        if angle == pi:\r\n            rotation_axis = Joint._choose_rotation_axis(frame, align_axis)\r\n\r\n        int_frame = ReferenceFrame(frame_name)\r\n        int_frame.orient_axis(frame, rotation_axis, angle)\r\n        int_frame.set_ang_vel(frame, 0 * rotation_axis)\r\n        return int_frame\r\n```', 'comment_created': datetime.datetime(2022, 9, 6, 11, 30, 39, tzinfo=datetime.timezone.utc), 'commenter': 'brocksam', 'type': 'User'}, {'comment_id': 963596640, 'comment_body': ""Use f-strings for consistency with other methods.\r\n```suggestion\r\n            point_name = f'{self._name}_{body.name}_joint'\r\n```"", 'comment_created': datetime.datetime(2022, 9, 6, 11, 32, 15, tzinfo=datetime.timezone.utc), 'commenter': 'brocksam', 'type': 'User'}, {'comment_id': 963598320, 'comment_body': '```suggestion\r\n    parent. The direction cosine matrix between the child interframe and\r\n    parent interframe is formed using a simple rotation about the joint axis.\r\n    The page on the joints framework gives a more detailed explanation of the\r\n    intermediate frames.\r\n```', 'comment_created': datetime.datetime(2022, 9, 6, 11, 34, 5, tzinfo=datetime.timezone.utc), 'commenter': 'brocksam', 'type': 'User'}, {'comment_id': 963598670, 'comment_body': '```suggestion\r\n        vector is provided, then the attachment point is computed by adding the\r\n```', 'comment_created': datetime.datetime(2022, 9, 6, 11, 34, 29, tzinfo=datetime.timezone.utc), 'commenter': 'brocksam', 'type': 'User'}, {'comment_id': 963598826, 'comment_body': '```suggestion\r\n        vector is provided, then the attachment point is computed by adding the\r\n```', 'comment_created': datetime.datetime(2022, 9, 6, 11, 34, 38, tzinfo=datetime.timezone.utc), 'commenter': 'brocksam', 'type': 'User'}, {'comment_id': 963599401, 'comment_body': ""This first sentence doesn't make sense, possible typo?"", 'comment_created': datetime.datetime(2022, 9, 6, 11, 35, 18, tzinfo=datetime.timezone.utc), 'commenter': 'brocksam', 'type': 'User'}, {'comment_id': 963599701, 'comment_body': ""This first sentence doesn't make sense, possible typo?"", 'comment_created': datetime.datetime(2022, 9, 6, 11, 35, 42, tzinfo=datetime.timezone.utc), 'commenter': 'brocksam', 'type': 'User'}, {'comment_id': 963600189, 'comment_body': ""This first sentence doesn't make sense, possible typo?"", 'comment_created': datetime.datetime(2022, 9, 6, 11, 36, 15, tzinfo=datetime.timezone.utc), 'commenter': 'brocksam', 'type': 'User'}, {'comment_id': 963600360, 'comment_body': ""This first sentence doesn't make sense, possible typo?"", 'comment_created': datetime.datetime(2022, 9, 6, 11, 36, 22, tzinfo=datetime.timezone.utc), 'commenter': 'brocksam', 'type': 'User'}, {'comment_id': 963601715, 'comment_body': 'Struggling to see which joint type this is on the diff, assuming `PinJoint`?\r\n```suggestion\r\n        """"""Axis about which the child rotates with respect to the parent.""""""\r\n```', 'comment_created': datetime.datetime(2022, 9, 6, 11, 38, 8, tzinfo=datetime.timezone.utc), 'commenter': 'brocksam', 'type': 'User'}, {'comment_id': 963602974, 'comment_body': 'It should have been: `Interframe of the joint fixed to the parent body, i.e. frame in the parent body with respect to which the joint is formulated.`\r\nHowever I think it could be made clearer by using one of the following:\r\n1. Joint attachment frame of the parent body, i.e. frame fixed to the parent body with respect to which the joint transformation is formulated.\r\n2. Intermediate frame of the parent body with respect to which the joint transformation is formulated.\r\n\r\nWhich one do you think is more clear? Or do you have a better suggestion?', 'comment_created': datetime.datetime(2022, 9, 6, 11, 40, 7, tzinfo=datetime.timezone.utc), 'commenter': 'tjstienstra', 'type': 'User'}, {'comment_id': 963603992, 'comment_body': '```suggestion\r\n    body along the body-fixed joint axis. The location of the joint is defined\r\n    by two points, one in each body, which coincide when the generalized\r\n    coordinate is zero. The direction cosine matrix between the\r\n    parent_interframe and child_interframe is the identity matrix. Therefore, the\r\n    direction cosine matrix between the parent and child frames is fully\r\n    defined by the definition of the intermediate frames. For a detailed\r\n    explanation on the intermediate frames, see the page on the joints\r\n    framework.\r\n```', 'comment_created': datetime.datetime(2022, 9, 6, 11, 42, 9, tzinfo=datetime.timezone.utc), 'commenter': 'brocksam', 'type': 'User'}, {'comment_id': 963604880, 'comment_body': '```suggestion\r\n        vector is provided, then the attachment point is computed by adding the\r\n```', 'comment_created': datetime.datetime(2022, 9, 6, 11, 43, 18, tzinfo=datetime.timezone.utc), 'commenter': 'brocksam', 'type': 'User'}, {'comment_id': 963605092, 'comment_body': '```suggestion\r\n        vector is provided, then the attachment point is computed by adding the\r\n```', 'comment_created': datetime.datetime(2022, 9, 6, 11, 43, 33, tzinfo=datetime.timezone.utc), 'commenter': 'brocksam', 'type': 'User'}, {'comment_id': 963605465, 'comment_body': ""This first sentence doesn't make sense, possible typo?"", 'comment_created': datetime.datetime(2022, 9, 6, 11, 44, 1, tzinfo=datetime.timezone.utc), 'commenter': 'brocksam', 'type': 'User'}, {'comment_id': 963605750, 'comment_body': ""This first sentence doesn't make sense, possible typo?"", 'comment_created': datetime.datetime(2022, 9, 6, 11, 44, 20, tzinfo=datetime.timezone.utc), 'commenter': 'brocksam', 'type': 'User'}, {'comment_id': 963605959, 'comment_body': '```suggestion\r\n        The axis along which the translation occurs. Note that the components\r\n```', 'comment_created': datetime.datetime(2022, 9, 6, 11, 44, 35, tzinfo=datetime.timezone.utc), 'commenter': 'brocksam', 'type': 'User'}, {'comment_id': 963606251, 'comment_body': ""This first sentence doesn't make sense, possible typo?"", 'comment_created': datetime.datetime(2022, 9, 6, 11, 44, 57, tzinfo=datetime.timezone.utc), 'commenter': 'brocksam', 'type': 'User'}, {'comment_id': 963666560, 'comment_body': 'We could also just add a `body.masscenter.set_vel(int_frame, 0)` in the interframe creation method. This would make sure that no joint will make a mistake in this part.', 'comment_created': datetime.datetime(2022, 9, 6, 12, 49, 53, tzinfo=datetime.timezone.utc), 'commenter': 'tjstienstra', 'type': 'User'}, {'comment_id': 963708092, 'comment_body': '```suggestion\r\nThe definition of the joint axis in the ``sympy.physics.mechanics`` has changed.\r\nInstead of using the arguments ``parent_axis`` and ``child_axis`` to\r\nautomatically determine the joint axis and an intermediate reference frame, the\r\njoints now use an intermediate frame argument for both the parent and the child\r\nbody, i.e. ``parent_interframe`` and ``child_interframe``. This means that you\r\ncan now fully define the joint attachment, consisting of a point and frame, for\r\nboth bodies. Furthermore, if a joint like the ``PinJoint`` has a specific joint\r\naxis, e.g. the axis about which the rotation occurs, then this axis can be\r\nspecified using the ``joint_axis`` argument. An advantage of this setup is that\r\none can more accurately define the transformation from the parent body to the\r\nchild body.\r\n```', 'comment_created': datetime.datetime(2022, 9, 6, 13, 27, 10, tzinfo=datetime.timezone.utc), 'commenter': 'brocksam', 'type': 'User'}, {'comment_id': 963714975, 'comment_body': '```suggestion\r\n3\\hat{c}_z$ in the ``child_interframe``. Practically this means that in the case\r\nof the :class:`~.PinJoint`, also shown below, the ``joint_axis`` is the axis of\r\nrotation, with the generalized coordinate :math:`\\theta` as the angle of rotation\r\nand the generalized speed :math:`\\omega` as the angular velocity.\r\n```', 'comment_created': datetime.datetime(2022, 9, 6, 13, 33, 14, tzinfo=datetime.timezone.utc), 'commenter': 'brocksam', 'type': 'User'}, {'comment_id': 963723132, 'comment_body': 'I think the below is much more readable formatting.\r\n```suggestion\r\n        self.child_point.set_pos(\r\n            self.parent_point,\r\n            self.coordinates[0] * self.joint_axis.normalize()\r\n        )\r\n```', 'comment_created': datetime.datetime(2022, 9, 6, 13, 40, 18, tzinfo=datetime.timezone.utc), 'commenter': 'brocksam', 'type': 'User'}, {'comment_id': 963724162, 'comment_body': 'I think the below is much more readable formatting.\r\n```suggestion\r\n        self.child_point.set_vel(\r\n            self.parent.frame,\r\n            self.speeds[0] * self.joint_axis.normalize()\r\n        )\r\n```', 'comment_created': datetime.datetime(2022, 9, 6, 13, 41, 9, tzinfo=datetime.timezone.utc), 'commenter': 'brocksam', 'type': 'User'}, {'comment_id': 963724849, 'comment_body': 'I think the below is much more readable formatting.\r\n```suggestion\r\n        self.child.masscenter.set_vel(\r\n            self.parent.frame,\r\n            self.speeds[0] * self.joint_axis.normalize()\r\n        )\r\n```', 'comment_created': datetime.datetime(2022, 9, 6, 13, 41, 41, tzinfo=datetime.timezone.utc), 'commenter': 'brocksam', 'type': 'User'}, {'comment_id': 963734036, 'comment_body': '> We could also just add a `body.masscenter.set_vel(int_frame, 0)` in the interframe creation method. This would make sure that no joint will make a mistake in this part.\r\n\r\nI think this is my preferred option as this does the setting as early as possible, which is generally a sensible approach.', 'comment_created': datetime.datetime(2022, 9, 6, 13, 49, 13, tzinfo=datetime.timezone.utc), 'commenter': 'brocksam', 'type': 'User'}, {'comment_id': 963739514, 'comment_body': 'I think #2 is clearest.', 'comment_created': datetime.datetime(2022, 9, 6, 13, 53, 45, tzinfo=datetime.timezone.utc), 'commenter': 'brocksam', 'type': 'User'}, {'comment_id': 963796966, 'comment_body': '`rotation_axis == Vector(0) and angle == 0` seems more correct to me.', 'comment_created': datetime.datetime(2022, 9, 6, 14, 41, 32, tzinfo=datetime.timezone.utc), 'commenter': 'tjstienstra', 'type': 'User'}, {'comment_id': 963821284, 'comment_body': ""I'll make a separate variable `axis = self.joint_axis.normalize()`. Makes it more readable and keeps all set commands on a single line."", 'comment_created': datetime.datetime(2022, 9, 6, 15, 1, 26, tzinfo=datetime.timezone.utc), 'commenter': 'tjstienstra', 'type': 'User'}, {'comment_id': 963889215, 'comment_body': 'Has this been left in by error?', 'comment_created': datetime.datetime(2022, 9, 6, 15, 56, 14, tzinfo=datetime.timezone.utc), 'commenter': 'brocksam', 'type': 'User'}, {'comment_id': 963899603, 'comment_body': 'Yes, that is my method of quickly testing a test. Will remove it.', 'comment_created': datetime.datetime(2022, 9, 6, 16, 3, 42, tzinfo=datetime.timezone.utc), 'commenter': 'tjstienstra', 'type': 'User'}, {'comment_id': 964778265, 'comment_body': '@sidhu1012 It seems it is still not fixed see [#22304 comment](https://github.com/sympy/sympy/issues/22304#issuecomment-1239321187)', 'comment_created': datetime.datetime(2022, 9, 7, 12, 26, 14, tzinfo=datetime.timezone.utc), 'commenter': 'tjstienstra', 'type': 'User'}]","[{'commit_sha': '9b751feaf5e7156bbb8774a7b7ffc809948861b4', 'committer_username': 'tjstienstra', 'committer_name': 'Timo Stienstra', 'committer_email': None, 'commit_date': datetime.datetime(2022, 1, 15, 19, 30, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '00fd39d12f9b19b52fd56db66a8eca450b80f35a', 'committer_username': 'tjstienstra', 'committer_name': 'Timo Stienstra', 'committer_email': None, 'commit_date': datetime.datetime(2022, 1, 15, 19, 30, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7c199e306648513c13c9b5c5b5fad06e5f1c3020', 'committer_username': 'tjstienstra', 'committer_name': 'Timo Stienstra', 'committer_email': None, 'commit_date': datetime.datetime(2022, 1, 15, 19, 30, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e701e822843651c5c8a2591eb6b9229d36e68dab', 'committer_username': 'tjstienstra', 'committer_name': 'Timo Stienstra', 'committer_email': None, 'commit_date': datetime.datetime(2022, 1, 15, 19, 30, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '06c66d6c69c6fe7955854a615956242d680f6b9a', 'committer_username': 'tjstienstra', 'committer_name': 'Timo Stienstra', 'committer_email': None, 'commit_date': datetime.datetime(2022, 1, 15, 19, 30, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e7896f45e33dc5d5e11bd99f1fa4e11fe25096a4', 'committer_username': 'tjstienstra', 'committer_name': 'Timo Stienstra', 'committer_email': None, 'commit_date': datetime.datetime(2022, 1, 15, 19, 30, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '87190211d89e356a90eb4013672e5c35195a4bef', 'committer_username': 'tjstienstra', 'committer_name': 'Timo Stienstra', 'committer_email': None, 'commit_date': datetime.datetime(2022, 1, 15, 19, 30, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd49d93aa5eba0af3b470e7b49667596a80cb45e5', 'committer_username': 'tjstienstra', 'committer_name': 'Timo Stienstra', 'committer_email': None, 'commit_date': datetime.datetime(2022, 1, 15, 19, 30, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1cff58ef841754cb9f405b4a039721cc10c9a280', 'committer_username': 'tjstienstra', 'committer_name': 'Timo Stienstra', 'committer_email': None, 'commit_date': datetime.datetime(2022, 1, 15, 19, 30, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '60f248d33ad325b83e82612c1b71691e0309ebcc', 'committer_username': 'tjstienstra', 'committer_name': 'Timo Stienstra', 'committer_email': None, 'commit_date': datetime.datetime(2022, 1, 15, 19, 30, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '76b9f68ce3ca73a1983f65bbee74332512d11f06', 'committer_username': 'tjstienstra', 'committer_name': 'Timo Stienstra', 'committer_email': None, 'commit_date': datetime.datetime(2022, 1, 15, 19, 30, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5b90f7d36b8291b61391d457bfad94648af8afe3', 'committer_username': 'tjstienstra', 'committer_name': 'Timo Stienstra', 'committer_email': None, 'commit_date': datetime.datetime(2022, 1, 15, 19, 30, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '039d8bc29c6783b28ec962e7be94171cacce2127', 'committer_username': 'tjstienstra', 'committer_name': 'Timo Stienstra', 'committer_email': None, 'commit_date': datetime.datetime(2022, 1, 15, 19, 30, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '73211d43d0f734ec4330faac5878b299f9b2ca79', 'committer_username': 'tjstienstra', 'committer_name': 'Timo Stienstra', 'committer_email': None, 'commit_date': datetime.datetime(2022, 1, 15, 19, 30, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '30d833b1d3e5a0703ef2d7da6681d23f1fbd75f5', 'committer_username': 'tjstienstra', 'committer_name': 'Timo Stienstra', 'committer_email': None, 'commit_date': datetime.datetime(2022, 1, 15, 19, 30, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c699c98401d2f79fb5c9603eb4b70033d3649752', 'committer_username': 'tjstienstra', 'committer_name': 'Timo Stienstra', 'committer_email': None, 'commit_date': datetime.datetime(2022, 1, 15, 19, 30, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '22d16d07834d609de1dcb7fad4e446df339025d5', 'committer_username': 'tjstienstra', 'committer_name': 'Timo Stienstra', 'committer_email': None, 'commit_date': datetime.datetime(2022, 1, 15, 19, 30, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c4ab184611d73bf02c95bfedbccab83358af8030', 'committer_username': 'tjstienstra', 'committer_name': 'Timo Stienstra', 'committer_email': None, 'commit_date': datetime.datetime(2022, 1, 15, 19, 30, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '36de400a74f5d25a91e4c25e917436329a997a20', 'committer_username': 'tjstienstra', 'committer_name': 'Timo Stienstra', 'committer_email': None, 'commit_date': datetime.datetime(2022, 1, 15, 19, 30, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ccd510d33e466b3015776511f49eec53fe13a89c', 'committer_username': 'tjstienstra', 'committer_name': 'Timo Stienstra', 'committer_email': None, 'commit_date': datetime.datetime(2022, 1, 15, 19, 30, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4e40fb4fa3d55756eabd1318f937e25368f22324', 'committer_username': 'tjstienstra', 'committer_name': 'Timo Stienstra', 'committer_email': None, 'commit_date': datetime.datetime(2022, 1, 15, 19, 30, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b9258e3d66786155557103ec29977ce8fc07f60e', 'committer_username': 'tjstienstra', 'committer_name': 'Timo Stienstra', 'committer_email': None, 'commit_date': datetime.datetime(2022, 1, 15, 19, 30, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cca3fe83a47f39e0d49afe38ac24703cd6e9e6e8', 'committer_username': 'tjstienstra', 'committer_name': 'Timo Stienstra', 'committer_email': None, 'commit_date': datetime.datetime(2022, 1, 15, 19, 30, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd28a2ac24491dd16ac1e6d20baf6f06bfe2b36ad', 'committer_username': 'tjstienstra', 'committer_name': 'Timo Stienstra', 'committer_email': None, 'commit_date': datetime.datetime(2022, 1, 15, 19, 30, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7afba2b2dff3990030023442f0af6a30117bd729', 'committer_username': 'tjstienstra', 'committer_name': 'Timo Stienstra', 'committer_email': None, 'commit_date': datetime.datetime(2022, 1, 15, 19, 30, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b90d8a4f7b4be976e7ce1bb785798bfd5d891ace', 'committer_username': 'tjstienstra', 'committer_name': 'Timo Stienstra', 'committer_email': None, 'commit_date': datetime.datetime(2022, 1, 15, 19, 30, 35, tzinfo=datetime.timezone.utc)}]",Timo Stienstra,97806294,,User,,12,,11,5
1025350724,[GSoC] Switch joints framework to using intermediate frames,"<!-- Your title above should be a short description of what
was changed. Do not include the issue number in the title. -->

#### References to other Issues or PRs
<!-- If this pull request fixes an issue, write ""Fixes #NNNN"" in that exact
format, e.g. ""Fixes #1234"" (see
https://tinyurl.com/auto-closing for more information). Also, please
write a comment on that issue linking back to this pull request once it is
open. -->


#### Brief description of what is fixed or changed
This PR changes the basic definition of a joint. Instead of using a `parent_axis` in combination with a `child_axis` to determine the intermediate frame and joint axis, it now uses a separate intermediate frame for both the parent and child as well as a separately defined joint axis. This follows mostly a general definition of a mobilizer described in [this paper](https://link.springer.com/article/10.1007/s11071-010-9717-3) by Seth, A., Sherman, M., Eastman, P., & Delp, S.

#### Other comments
This will also make it more easy to implement a `Mobilizer` class, for defining more advanced joints as described in the paper.

This PR will also fix #23913 in the joints part.

#### Release Notes

<!-- Write the release notes for this release below between the BEGIN and END
statements. The basic format is a bulleted list with the name of the subpackage
and the release note for this PR. For example:

* solvers
  * Added a new solver for logarithmic equations.

* functions
  * Fixed a bug with log of integers.

or if no release note(s) should be included use:

NO ENTRY

See https://github.com/sympy/sympy/wiki/Writing-Release-Notes for more
information on how to write release notes. The bot will check your release
notes automatically to see if they are formatted correctly. -->

<!-- BEGIN RELEASE NOTES -->
* physics.mechanics
   * BREAKING: deprecated parent_axis and child_axis arguments for the joint classes
   * Implemented a joint axis in combination with intermediate frames for defining joints
   * BREAKING: replaced parent_joint_pos and child_joint_pos arguments for parent_point and child_point
<!-- END RELEASE NOTES -->
",True,23920,https://api.github.com/repos/sympy/sympy/pulls/23920,https://github.com/sympy/sympy/pull/23920,closed,1289,397,10,26,15,60,3,0,"[{'name': 'physics.mechanics'}, {'name': 'GSoC'}, {'name': 'CZI: Codegen/Biomech'}]",2022-08-12 20:14:29+00:00,2022-09-08 14:05:49+00:00,2310680.0,"26 days, 17:51:20","[{'comment_id': 949245504, 'comment_body': ""Move to separate `else` in try-except block as this line won't be the one throwing the intended `ValueError`."", 'comment_created': datetime.datetime(2022, 8, 18, 14, 52, 31, tzinfo=datetime.timezone.utc), 'commenter': 'brocksam', 'type': 'User'}, {'comment_id': 949246275, 'comment_body': 'Can this method be made part of a mixin class inherited by the appropriate joint subclasses?', 'comment_created': datetime.datetime(2022, 8, 18, 14, 53, 12, tzinfo=datetime.timezone.utc), 'commenter': 'brocksam', 'type': 'User'}, {'comment_id': 949266755, 'comment_body': 'Can we make `theta` and `omega` keyword arguments here? Otherwise it relies on the person reading the documentation having good understanding on `PinJoint`s constructor signature.', 'comment_created': datetime.datetime(2022, 8, 18, 15, 8, 56, tzinfo=datetime.timezone.utc), 'commenter': 'brocksam', 'type': 'User'}, {'comment_id': 950588315, 'comment_body': 'Thank you for the suggestion. Is the `JointAxisMixin` as you would expect? Did leave the `joint_axis` property with the subclasses themselves, so it is more clear in the documentation.', 'comment_created': datetime.datetime(2022, 8, 19, 22, 21, 47, tzinfo=datetime.timezone.utc), 'commenter': 'tjstienstra', 'type': 'User'}, {'comment_id': 954752551, 'comment_body': '@sidhu1012 I thought based on #22304 that this issue would be fixed, but it still fails when using the symengine. Could you give some clarification?', 'comment_created': datetime.datetime(2022, 8, 25, 9, 44, 38, tzinfo=datetime.timezone.utc), 'commenter': 'tjstienstra', 'type': 'User'}, {'comment_id': 954984484, 'comment_body': ""This https://github.com/sympy/sympy/issues/22304#issuecomment-1085461259 says that the issue is fixed, earlier it wasn't sympy's error, I think using latest symengine version should fix this. "", 'comment_created': datetime.datetime(2022, 8, 25, 13, 41, 35, tzinfo=datetime.timezone.utc), 'commenter': 'sidhu1012', 'type': 'User'}, {'comment_id': 955003829, 'comment_body': ""After [this commit](https://github.com/sympy/sympy/pull/23920/commits/30d833b1d3e5a0703ef2d7da6681d23f1fbd75f5) I've introduced Xfail, but before that it was still failing on the latest symengine version (I tested 0.9.2 local)."", 'comment_created': datetime.datetime(2022, 8, 25, 13, 57, 8, tzinfo=datetime.timezone.utc), 'commenter': 'tjstienstra', 'type': 'User'}, {'comment_id': 959545637, 'comment_body': ""Currently the velocities are only set in the body frames not also in the intermediate frames. This means that these intermediate frames can still be translating with respect to their body, which should not be the case.\r\nEither some extra `set_vel`'s should be added or `self.parent_point.set_vel(self.parent.frame, 0)` should be changed to `self.parent_point.set_vel(self.parent_interframe, 0)` (same for the child).\r\n\r\nWhich option would be best?"", 'comment_created': datetime.datetime(2022, 8, 31, 12, 51, 35, tzinfo=datetime.timezone.utc), 'commenter': 'tjstienstra', 'type': 'User'}, {'comment_id': 959548668, 'comment_body': ""Here is a simple experiment:\r\n```py\r\nfrom sympy import pi\r\nfrom sympy.physics.mechanics import Body, PrismaticJoint, ReferenceFrame\r\n\r\nP, C = Body('P'), Body('C')\r\nPint, Cint = ReferenceFrame('Pint'), ReferenceFrame('Cint')\r\nPint.orient_axis(P.frame, P.frame.x, pi)\r\nCint.orient_axis(C.frame, C.frame.y, -pi / 2)\r\njoint = PrismaticJoint('P', P, C, parent_interframe=Pint, child_interframe=Cint,\r\n                       parent_point=P.x, child_point=-C.y, joint_axis=P.z)\r\nP.masscenter.vel(joint.parent_interframe)\r\nValueError: Velocity of point P_masscenter has not been defined in ReferenceFrame Pint\r\n```"", 'comment_created': datetime.datetime(2022, 8, 31, 12, 54, 30, tzinfo=datetime.timezone.utc), 'commenter': 'tjstienstra', 'type': 'User'}, {'comment_id': 963568962, 'comment_body': '```suggestion\r\ne.g. the axis around which the rotation occurs, then this axis can be specified\r\n```', 'comment_created': datetime.datetime(2022, 9, 6, 10, 59, 47, tzinfo=datetime.timezone.utc), 'commenter': 'brocksam', 'type': 'User'}, {'comment_id': 963569722, 'comment_body': '```suggestion\r\nboth bodies. Furthermore, if a joint like the ``PinJoint`` has a specific joint axis,\r\n```', 'comment_created': datetime.datetime(2022, 9, 6, 11, 0, 39, tzinfo=datetime.timezone.utc), 'commenter': 'brocksam', 'type': 'User'}, {'comment_id': 963570595, 'comment_body': '```suggestion\r\nusing the ``joint_axis`` argument. An advantage of this setup is that one can\r\nmore accurately define the transformation from a parent body to a child body.\r\n```', 'comment_created': datetime.datetime(2022, 9, 6, 11, 1, 41, tzinfo=datetime.timezone.utc), 'commenter': 'brocksam', 'type': 'User'}, {'comment_id': 963571414, 'comment_body': '```suggestion\r\nFor example, suppose you want a ``PinJoint`` that rotates the child body around the\r\n```', 'comment_created': datetime.datetime(2022, 9, 6, 11, 2, 42, tzinfo=datetime.timezone.utc), 'commenter': 'brocksam', 'type': 'User'}, {'comment_id': 963572562, 'comment_body': '```suggestion\r\nfor you, then you can still make use of this feature by providing vectors to\r\n```', 'comment_created': datetime.datetime(2022, 9, 6, 11, 4, 7, tzinfo=datetime.timezone.utc), 'commenter': 'brocksam', 'type': 'User'}, {'comment_id': 963572733, 'comment_body': '```suggestion\r\n``parent_interframe`` and ``child_interframe``, which are then oriented such\r\n```', 'comment_created': datetime.datetime(2022, 9, 6, 11, 4, 19, tzinfo=datetime.timezone.utc), 'commenter': 'brocksam', 'type': 'User'}, {'comment_id': 963573169, 'comment_body': '```suggestion\r\ngiven vector:\r\n```', 'comment_created': datetime.datetime(2022, 9, 6, 11, 4, 48, tzinfo=datetime.timezone.utc), 'commenter': 'brocksam', 'type': 'User'}, {'comment_id': 963574933, 'comment_body': '```suggestion\r\nThe argument names for specifying the attachment points of a joint in\r\n``sympy.physics.mechanics`` , i.e. ``parent_joint_pos`` and ``child_joint_pos``,\r\nhave been changed to ``parent_point`` and ``child_point``. This is because these\r\narguments can now also be ``Point`` objects, so they can be exactly the same as\r\nthe ``parent_point`` and ``child_point`` attributes.\r\n```', 'comment_created': datetime.datetime(2022, 9, 6, 11, 6, 58, tzinfo=datetime.timezone.utc), 'commenter': 'brocksam', 'type': 'User'}, {'comment_id': 963577143, 'comment_body': '```suggestion\r\n        vector is provided, then the attachment point is computed by adding the\r\n```', 'comment_created': datetime.datetime(2022, 9, 6, 11, 9, 42, tzinfo=datetime.timezone.utc), 'commenter': 'brocksam', 'type': 'User'}, {'comment_id': 963577408, 'comment_body': '```suggestion\r\n        vector is provided, then the attachment point is computed by adding the\r\n```', 'comment_created': datetime.datetime(2022, 9, 6, 11, 10, tzinfo=datetime.timezone.utc), 'commenter': 'brocksam', 'type': 'User'}, {'comment_id': 963578611, 'comment_body': ""This first sentence isn't clear, possible typo?"", 'comment_created': datetime.datetime(2022, 9, 6, 11, 11, 19, tzinfo=datetime.timezone.utc), 'commenter': 'brocksam', 'type': 'User'}, {'comment_id': 963578731, 'comment_body': ""This first sentence isn't clear, possible typo?"", 'comment_created': datetime.datetime(2022, 9, 6, 11, 11, 28, tzinfo=datetime.timezone.utc), 'commenter': 'brocksam', 'type': 'User'}, {'comment_id': 963579165, 'comment_body': ""This first sentence isn't clear, possible typo?"", 'comment_created': datetime.datetime(2022, 9, 6, 11, 11, 57, tzinfo=datetime.timezone.utc), 'commenter': 'brocksam', 'type': 'User'}, {'comment_id': 963579290, 'comment_body': ""This first sentence isn't clear, possible typo?"", 'comment_created': datetime.datetime(2022, 9, 6, 11, 12, 5, tzinfo=datetime.timezone.utc), 'commenter': 'brocksam', 'type': 'User'}, {'comment_id': 963580959, 'comment_body': '```suggestion\r\n    When providing a vector as the intermediate frame, a new intermediate frame\r\n    is created which aligns its X axis with the provided vector. This is done\r\n    with a single fixed rotation around a rotation axis. This rotation axis is\r\n    determined by taking the cross product of the ``body.x`` axis with the\r\n    provided vector. In the case where the provided vector is in the ``-body.x``\r\n    direction, the rotation is done around the ``body.y`` axis.\r\n```', 'comment_created': datetime.datetime(2022, 9, 6, 11, 13, 58, tzinfo=datetime.timezone.utc), 'commenter': 'brocksam', 'type': 'User'}, {'comment_id': 963585008, 'comment_body': 'would say ""the parent body to the child body""', 'comment_created': datetime.datetime(2022, 9, 6, 11, 18, 46, tzinfo=datetime.timezone.utc), 'commenter': 'tjstienstra', 'type': 'User'}, {'comment_id': 963586125, 'comment_body': ""Should avoid having superfluous code within the `try` block that isn't expected to raise the intended exception to be caught. Move to separate `else` block.\r\n```suggestion\r\n            try:\r\n                ax.to_matrix(frame)\r\n            except ValueError:\r\n                pass\r\n            else:\r\n                ref_frame = frame\r\n                break\r\n```"", 'comment_created': datetime.datetime(2022, 9, 6, 11, 20, 3, tzinfo=datetime.timezone.utc), 'commenter': 'brocksam', 'type': 'User'}, {'comment_id': 963588409, 'comment_body': 'Can this be refracted to remove redundancy?\r\n```suggestion\r\n        if x != 0:\r\n            if y != 0:\r\n                if z != 0:\r\n                    return cross(axis, frame.x)\r\n            if z != 0:\r\n                return frame.y\r\n            return frame.z\r\n    else:\r\n            if y != 0:\r\n                return frame.x\r\n            return frame.y\r\n```', 'comment_created': datetime.datetime(2022, 9, 6, 11, 22, 45, tzinfo=datetime.timezone.utc), 'commenter': 'brocksam', 'type': 'User'}, {'comment_id': 963589718, 'comment_body': '```suggestion\r\n            frame is oriented.\r\n```', 'comment_created': datetime.datetime(2022, 9, 6, 11, 24, 17, tzinfo=datetime.timezone.utc), 'commenter': 'brocksam', 'type': 'User'}, {'comment_id': 963592656, 'comment_body': '```suggestion\r\n        The direction cosine matrix between the given frame and intermediate\r\n        frame is formed using a simple rotation about an axis that is normal to\r\n        both ``align_axis`` and ``frame_axis``. In general, the normal axis is\r\n        formed by crossing the ``frame_axis`` with the ``align_axis``. The\r\n        exception is if the axes are parallel with opposite directions, in which\r\n        case the rotation vector is chosen using the rules in the following table\r\n        with the vectors expressed in the given frame:\r\n```', 'comment_created': datetime.datetime(2022, 9, 6, 11, 27, 35, tzinfo=datetime.timezone.utc), 'commenter': 'brocksam', 'type': 'User'}, {'comment_id': 963595259, 'comment_body': 'Reorder to avoid excess nesting.\r\n```suggestion\r\n        if rotation_axis == Vector(0) or angle != pi:\r\n            return frame\r\n        if angle == pi:\r\n            rotation_axis = Joint._choose_rotation_axis(frame, align_axis)\r\n\r\n        int_frame = ReferenceFrame(frame_name)\r\n        int_frame.orient_axis(frame, rotation_axis, angle)\r\n        int_frame.set_ang_vel(frame, 0 * rotation_axis)\r\n        return int_frame\r\n```', 'comment_created': datetime.datetime(2022, 9, 6, 11, 30, 39, tzinfo=datetime.timezone.utc), 'commenter': 'brocksam', 'type': 'User'}, {'comment_id': 963596640, 'comment_body': ""Use f-strings for consistency with other methods.\r\n```suggestion\r\n            point_name = f'{self._name}_{body.name}_joint'\r\n```"", 'comment_created': datetime.datetime(2022, 9, 6, 11, 32, 15, tzinfo=datetime.timezone.utc), 'commenter': 'brocksam', 'type': 'User'}, {'comment_id': 963598320, 'comment_body': '```suggestion\r\n    parent. The direction cosine matrix between the child interframe and\r\n    parent interframe is formed using a simple rotation about the joint axis.\r\n    The page on the joints framework gives a more detailed explanation of the\r\n    intermediate frames.\r\n```', 'comment_created': datetime.datetime(2022, 9, 6, 11, 34, 5, tzinfo=datetime.timezone.utc), 'commenter': 'brocksam', 'type': 'User'}, {'comment_id': 963598670, 'comment_body': '```suggestion\r\n        vector is provided, then the attachment point is computed by adding the\r\n```', 'comment_created': datetime.datetime(2022, 9, 6, 11, 34, 29, tzinfo=datetime.timezone.utc), 'commenter': 'brocksam', 'type': 'User'}, {'comment_id': 963598826, 'comment_body': '```suggestion\r\n        vector is provided, then the attachment point is computed by adding the\r\n```', 'comment_created': datetime.datetime(2022, 9, 6, 11, 34, 38, tzinfo=datetime.timezone.utc), 'commenter': 'brocksam', 'type': 'User'}, {'comment_id': 963599401, 'comment_body': ""This first sentence doesn't make sense, possible typo?"", 'comment_created': datetime.datetime(2022, 9, 6, 11, 35, 18, tzinfo=datetime.timezone.utc), 'commenter': 'brocksam', 'type': 'User'}, {'comment_id': 963599701, 'comment_body': ""This first sentence doesn't make sense, possible typo?"", 'comment_created': datetime.datetime(2022, 9, 6, 11, 35, 42, tzinfo=datetime.timezone.utc), 'commenter': 'brocksam', 'type': 'User'}, {'comment_id': 963600189, 'comment_body': ""This first sentence doesn't make sense, possible typo?"", 'comment_created': datetime.datetime(2022, 9, 6, 11, 36, 15, tzinfo=datetime.timezone.utc), 'commenter': 'brocksam', 'type': 'User'}, {'comment_id': 963600360, 'comment_body': ""This first sentence doesn't make sense, possible typo?"", 'comment_created': datetime.datetime(2022, 9, 6, 11, 36, 22, tzinfo=datetime.timezone.utc), 'commenter': 'brocksam', 'type': 'User'}, {'comment_id': 963601715, 'comment_body': 'Struggling to see which joint type this is on the diff, assuming `PinJoint`?\r\n```suggestion\r\n        """"""Axis about which the child rotates with respect to the parent.""""""\r\n```', 'comment_created': datetime.datetime(2022, 9, 6, 11, 38, 8, tzinfo=datetime.timezone.utc), 'commenter': 'brocksam', 'type': 'User'}, {'comment_id': 963602974, 'comment_body': 'It should have been: `Interframe of the joint fixed to the parent body, i.e. frame in the parent body with respect to which the joint is formulated.`\r\nHowever I think it could be made clearer by using one of the following:\r\n1. Joint attachment frame of the parent body, i.e. frame fixed to the parent body with respect to which the joint transformation is formulated.\r\n2. Intermediate frame of the parent body with respect to which the joint transformation is formulated.\r\n\r\nWhich one do you think is more clear? Or do you have a better suggestion?', 'comment_created': datetime.datetime(2022, 9, 6, 11, 40, 7, tzinfo=datetime.timezone.utc), 'commenter': 'tjstienstra', 'type': 'User'}, {'comment_id': 963603992, 'comment_body': '```suggestion\r\n    body along the body-fixed joint axis. The location of the joint is defined\r\n    by two points, one in each body, which coincide when the generalized\r\n    coordinate is zero. The direction cosine matrix between the\r\n    parent_interframe and child_interframe is the identity matrix. Therefore, the\r\n    direction cosine matrix between the parent and child frames is fully\r\n    defined by the definition of the intermediate frames. For a detailed\r\n    explanation on the intermediate frames, see the page on the joints\r\n    framework.\r\n```', 'comment_created': datetime.datetime(2022, 9, 6, 11, 42, 9, tzinfo=datetime.timezone.utc), 'commenter': 'brocksam', 'type': 'User'}, {'comment_id': 963604880, 'comment_body': '```suggestion\r\n        vector is provided, then the attachment point is computed by adding the\r\n```', 'comment_created': datetime.datetime(2022, 9, 6, 11, 43, 18, tzinfo=datetime.timezone.utc), 'commenter': 'brocksam', 'type': 'User'}, {'comment_id': 963605092, 'comment_body': '```suggestion\r\n        vector is provided, then the attachment point is computed by adding the\r\n```', 'comment_created': datetime.datetime(2022, 9, 6, 11, 43, 33, tzinfo=datetime.timezone.utc), 'commenter': 'brocksam', 'type': 'User'}, {'comment_id': 963605465, 'comment_body': ""This first sentence doesn't make sense, possible typo?"", 'comment_created': datetime.datetime(2022, 9, 6, 11, 44, 1, tzinfo=datetime.timezone.utc), 'commenter': 'brocksam', 'type': 'User'}, {'comment_id': 963605750, 'comment_body': ""This first sentence doesn't make sense, possible typo?"", 'comment_created': datetime.datetime(2022, 9, 6, 11, 44, 20, tzinfo=datetime.timezone.utc), 'commenter': 'brocksam', 'type': 'User'}, {'comment_id': 963605959, 'comment_body': '```suggestion\r\n        The axis along which the translation occurs. Note that the components\r\n```', 'comment_created': datetime.datetime(2022, 9, 6, 11, 44, 35, tzinfo=datetime.timezone.utc), 'commenter': 'brocksam', 'type': 'User'}, {'comment_id': 963606251, 'comment_body': ""This first sentence doesn't make sense, possible typo?"", 'comment_created': datetime.datetime(2022, 9, 6, 11, 44, 57, tzinfo=datetime.timezone.utc), 'commenter': 'brocksam', 'type': 'User'}, {'comment_id': 963666560, 'comment_body': 'We could also just add a `body.masscenter.set_vel(int_frame, 0)` in the interframe creation method. This would make sure that no joint will make a mistake in this part.', 'comment_created': datetime.datetime(2022, 9, 6, 12, 49, 53, tzinfo=datetime.timezone.utc), 'commenter': 'tjstienstra', 'type': 'User'}, {'comment_id': 963708092, 'comment_body': '```suggestion\r\nThe definition of the joint axis in the ``sympy.physics.mechanics`` has changed.\r\nInstead of using the arguments ``parent_axis`` and ``child_axis`` to\r\nautomatically determine the joint axis and an intermediate reference frame, the\r\njoints now use an intermediate frame argument for both the parent and the child\r\nbody, i.e. ``parent_interframe`` and ``child_interframe``. This means that you\r\ncan now fully define the joint attachment, consisting of a point and frame, for\r\nboth bodies. Furthermore, if a joint like the ``PinJoint`` has a specific joint\r\naxis, e.g. the axis about which the rotation occurs, then this axis can be\r\nspecified using the ``joint_axis`` argument. An advantage of this setup is that\r\none can more accurately define the transformation from the parent body to the\r\nchild body.\r\n```', 'comment_created': datetime.datetime(2022, 9, 6, 13, 27, 10, tzinfo=datetime.timezone.utc), 'commenter': 'brocksam', 'type': 'User'}, {'comment_id': 963714975, 'comment_body': '```suggestion\r\n3\\hat{c}_z$ in the ``child_interframe``. Practically this means that in the case\r\nof the :class:`~.PinJoint`, also shown below, the ``joint_axis`` is the axis of\r\nrotation, with the generalized coordinate :math:`\\theta` as the angle of rotation\r\nand the generalized speed :math:`\\omega` as the angular velocity.\r\n```', 'comment_created': datetime.datetime(2022, 9, 6, 13, 33, 14, tzinfo=datetime.timezone.utc), 'commenter': 'brocksam', 'type': 'User'}, {'comment_id': 963723132, 'comment_body': 'I think the below is much more readable formatting.\r\n```suggestion\r\n        self.child_point.set_pos(\r\n            self.parent_point,\r\n            self.coordinates[0] * self.joint_axis.normalize()\r\n        )\r\n```', 'comment_created': datetime.datetime(2022, 9, 6, 13, 40, 18, tzinfo=datetime.timezone.utc), 'commenter': 'brocksam', 'type': 'User'}, {'comment_id': 963724162, 'comment_body': 'I think the below is much more readable formatting.\r\n```suggestion\r\n        self.child_point.set_vel(\r\n            self.parent.frame,\r\n            self.speeds[0] * self.joint_axis.normalize()\r\n        )\r\n```', 'comment_created': datetime.datetime(2022, 9, 6, 13, 41, 9, tzinfo=datetime.timezone.utc), 'commenter': 'brocksam', 'type': 'User'}, {'comment_id': 963724849, 'comment_body': 'I think the below is much more readable formatting.\r\n```suggestion\r\n        self.child.masscenter.set_vel(\r\n            self.parent.frame,\r\n            self.speeds[0] * self.joint_axis.normalize()\r\n        )\r\n```', 'comment_created': datetime.datetime(2022, 9, 6, 13, 41, 41, tzinfo=datetime.timezone.utc), 'commenter': 'brocksam', 'type': 'User'}, {'comment_id': 963734036, 'comment_body': '> We could also just add a `body.masscenter.set_vel(int_frame, 0)` in the interframe creation method. This would make sure that no joint will make a mistake in this part.\r\n\r\nI think this is my preferred option as this does the setting as early as possible, which is generally a sensible approach.', 'comment_created': datetime.datetime(2022, 9, 6, 13, 49, 13, tzinfo=datetime.timezone.utc), 'commenter': 'brocksam', 'type': 'User'}, {'comment_id': 963739514, 'comment_body': 'I think #2 is clearest.', 'comment_created': datetime.datetime(2022, 9, 6, 13, 53, 45, tzinfo=datetime.timezone.utc), 'commenter': 'brocksam', 'type': 'User'}, {'comment_id': 963796966, 'comment_body': '`rotation_axis == Vector(0) and angle == 0` seems more correct to me.', 'comment_created': datetime.datetime(2022, 9, 6, 14, 41, 32, tzinfo=datetime.timezone.utc), 'commenter': 'tjstienstra', 'type': 'User'}, {'comment_id': 963821284, 'comment_body': ""I'll make a separate variable `axis = self.joint_axis.normalize()`. Makes it more readable and keeps all set commands on a single line."", 'comment_created': datetime.datetime(2022, 9, 6, 15, 1, 26, tzinfo=datetime.timezone.utc), 'commenter': 'tjstienstra', 'type': 'User'}, {'comment_id': 963889215, 'comment_body': 'Has this been left in by error?', 'comment_created': datetime.datetime(2022, 9, 6, 15, 56, 14, tzinfo=datetime.timezone.utc), 'commenter': 'brocksam', 'type': 'User'}, {'comment_id': 963899603, 'comment_body': 'Yes, that is my method of quickly testing a test. Will remove it.', 'comment_created': datetime.datetime(2022, 9, 6, 16, 3, 42, tzinfo=datetime.timezone.utc), 'commenter': 'tjstienstra', 'type': 'User'}, {'comment_id': 964778265, 'comment_body': '@sidhu1012 It seems it is still not fixed see [#22304 comment](https://github.com/sympy/sympy/issues/22304#issuecomment-1239321187)', 'comment_created': datetime.datetime(2022, 9, 7, 12, 26, 14, tzinfo=datetime.timezone.utc), 'commenter': 'tjstienstra', 'type': 'User'}]","[{'commit_sha': '9b751feaf5e7156bbb8774a7b7ffc809948861b4', 'committer_username': 'tjstienstra', 'committer_name': 'Timo Stienstra', 'committer_email': None, 'commit_date': datetime.datetime(2022, 1, 15, 19, 30, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '00fd39d12f9b19b52fd56db66a8eca450b80f35a', 'committer_username': 'tjstienstra', 'committer_name': 'Timo Stienstra', 'committer_email': None, 'commit_date': datetime.datetime(2022, 1, 15, 19, 30, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7c199e306648513c13c9b5c5b5fad06e5f1c3020', 'committer_username': 'tjstienstra', 'committer_name': 'Timo Stienstra', 'committer_email': None, 'commit_date': datetime.datetime(2022, 1, 15, 19, 30, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e701e822843651c5c8a2591eb6b9229d36e68dab', 'committer_username': 'tjstienstra', 'committer_name': 'Timo Stienstra', 'committer_email': None, 'commit_date': datetime.datetime(2022, 1, 15, 19, 30, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '06c66d6c69c6fe7955854a615956242d680f6b9a', 'committer_username': 'tjstienstra', 'committer_name': 'Timo Stienstra', 'committer_email': None, 'commit_date': datetime.datetime(2022, 1, 15, 19, 30, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e7896f45e33dc5d5e11bd99f1fa4e11fe25096a4', 'committer_username': 'tjstienstra', 'committer_name': 'Timo Stienstra', 'committer_email': None, 'commit_date': datetime.datetime(2022, 1, 15, 19, 30, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '87190211d89e356a90eb4013672e5c35195a4bef', 'committer_username': 'tjstienstra', 'committer_name': 'Timo Stienstra', 'committer_email': None, 'commit_date': datetime.datetime(2022, 1, 15, 19, 30, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd49d93aa5eba0af3b470e7b49667596a80cb45e5', 'committer_username': 'tjstienstra', 'committer_name': 'Timo Stienstra', 'committer_email': None, 'commit_date': datetime.datetime(2022, 1, 15, 19, 30, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1cff58ef841754cb9f405b4a039721cc10c9a280', 'committer_username': 'tjstienstra', 'committer_name': 'Timo Stienstra', 'committer_email': None, 'commit_date': datetime.datetime(2022, 1, 15, 19, 30, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '60f248d33ad325b83e82612c1b71691e0309ebcc', 'committer_username': 'tjstienstra', 'committer_name': 'Timo Stienstra', 'committer_email': None, 'commit_date': datetime.datetime(2022, 1, 15, 19, 30, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '76b9f68ce3ca73a1983f65bbee74332512d11f06', 'committer_username': 'tjstienstra', 'committer_name': 'Timo Stienstra', 'committer_email': None, 'commit_date': datetime.datetime(2022, 1, 15, 19, 30, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5b90f7d36b8291b61391d457bfad94648af8afe3', 'committer_username': 'tjstienstra', 'committer_name': 'Timo Stienstra', 'committer_email': None, 'commit_date': datetime.datetime(2022, 1, 15, 19, 30, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '039d8bc29c6783b28ec962e7be94171cacce2127', 'committer_username': 'tjstienstra', 'committer_name': 'Timo Stienstra', 'committer_email': None, 'commit_date': datetime.datetime(2022, 1, 15, 19, 30, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '73211d43d0f734ec4330faac5878b299f9b2ca79', 'committer_username': 'tjstienstra', 'committer_name': 'Timo Stienstra', 'committer_email': None, 'commit_date': datetime.datetime(2022, 1, 15, 19, 30, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '30d833b1d3e5a0703ef2d7da6681d23f1fbd75f5', 'committer_username': 'tjstienstra', 'committer_name': 'Timo Stienstra', 'committer_email': None, 'commit_date': datetime.datetime(2022, 1, 15, 19, 30, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c699c98401d2f79fb5c9603eb4b70033d3649752', 'committer_username': 'tjstienstra', 'committer_name': 'Timo Stienstra', 'committer_email': None, 'commit_date': datetime.datetime(2022, 1, 15, 19, 30, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '22d16d07834d609de1dcb7fad4e446df339025d5', 'committer_username': 'tjstienstra', 'committer_name': 'Timo Stienstra', 'committer_email': None, 'commit_date': datetime.datetime(2022, 1, 15, 19, 30, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c4ab184611d73bf02c95bfedbccab83358af8030', 'committer_username': 'tjstienstra', 'committer_name': 'Timo Stienstra', 'committer_email': None, 'commit_date': datetime.datetime(2022, 1, 15, 19, 30, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '36de400a74f5d25a91e4c25e917436329a997a20', 'committer_username': 'tjstienstra', 'committer_name': 'Timo Stienstra', 'committer_email': None, 'commit_date': datetime.datetime(2022, 1, 15, 19, 30, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ccd510d33e466b3015776511f49eec53fe13a89c', 'committer_username': 'tjstienstra', 'committer_name': 'Timo Stienstra', 'committer_email': None, 'commit_date': datetime.datetime(2022, 1, 15, 19, 30, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4e40fb4fa3d55756eabd1318f937e25368f22324', 'committer_username': 'tjstienstra', 'committer_name': 'Timo Stienstra', 'committer_email': None, 'commit_date': datetime.datetime(2022, 1, 15, 19, 30, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b9258e3d66786155557103ec29977ce8fc07f60e', 'committer_username': 'tjstienstra', 'committer_name': 'Timo Stienstra', 'committer_email': None, 'commit_date': datetime.datetime(2022, 1, 15, 19, 30, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cca3fe83a47f39e0d49afe38ac24703cd6e9e6e8', 'committer_username': 'tjstienstra', 'committer_name': 'Timo Stienstra', 'committer_email': None, 'commit_date': datetime.datetime(2022, 1, 15, 19, 30, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd28a2ac24491dd16ac1e6d20baf6f06bfe2b36ad', 'committer_username': 'tjstienstra', 'committer_name': 'Timo Stienstra', 'committer_email': None, 'commit_date': datetime.datetime(2022, 1, 15, 19, 30, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7afba2b2dff3990030023442f0af6a30117bd729', 'committer_username': 'tjstienstra', 'committer_name': 'Timo Stienstra', 'committer_email': None, 'commit_date': datetime.datetime(2022, 1, 15, 19, 30, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b90d8a4f7b4be976e7ce1bb785798bfd5d891ace', 'committer_username': 'tjstienstra', 'committer_name': 'Timo Stienstra', 'committer_email': None, 'commit_date': datetime.datetime(2022, 1, 15, 19, 30, 35, tzinfo=datetime.timezone.utc)}]",Timo Stienstra,97806294,,User,,12,,11,5
1050537943,[GSoC] Implement auto coordinate generation helper for the joints framework,"<!-- Your title above should be a short description of what
was changed. Do not include the issue number in the title. -->

#### References to other Issues or PRs
<!-- If this pull request fixes an issue, write ""Fixes #NNNN"" in that exact
format, e.g. ""Fixes #1234"" (see
https://tinyurl.com/auto-closing for more information). Also, please
write a comment on that issue linking back to this pull request once it is
open. -->
Fixes #23933.


#### Brief description of what is fixed or changed
This PR adds a `Joint` method that functions as a helper to generate the coordinates for every type of joint in a generic way.

#### Other comments
There is a slide change in the generated name of the generalized coordinates and speeds for the `PinJoint` and `PrismaticJoint`, so they suite the new standard.

#### Release Notes

<!-- Write the release notes for this release below between the BEGIN and END
statements. The basic format is a bulleted list with the name of the subpackage
and the release note for this PR. For example:

* solvers
  * Added a new solver for logarithmic equations.

* functions
  * Fixed a bug with log of integers.

or if no release note(s) should be included use:

NO ENTRY

See https://github.com/sympy/sympy/wiki/Writing-Release-Notes for more
information on how to write release notes. The bot will check your release
notes automatically to see if they are formatted correctly. -->

<!-- BEGIN RELEASE NOTES -->
* physics.mechanics
  * Introduce a more flexible generalized coordinates/speeds parser to the joints framework.
  * BREAKING: Generalize the formatting of the generalized coordinates/speeds in the joints framework.
<!-- END RELEASE NOTES -->
",True,24028,https://api.github.com/repos/sympy/sympy/pulls/24028,https://github.com/sympy/sympy/pull/24028,closed,305,220,9,9,9,16,1,0,[{'name': 'CZI: Codegen/Biomech'}],2022-09-08 16:28:10+00:00,2022-09-13 17:02:28+00:00,434058.0,"5 days, 0:34:18","[{'comment_id': 967098994, 'comment_body': 'It\'s not clear what you mean by ""format"" here. Is it the types returned by these property attributes? If so, just state that changes have been made for consistency with the rest of `sympy.physics.mechanics` and this means changing those return types and unifying the symbols used for the generalized coordinates and generalized speeds.', 'comment_created': datetime.datetime(2022, 9, 9, 13, 53, 56, tzinfo=datetime.timezone.utc), 'commenter': 'brocksam', 'type': 'User'}, {'comment_id': 967103576, 'comment_body': 'I think reading this is clearer if the `create_symbol` closure function is at the very top of the function body, i.e. directly after the docstrong and before the declaration of the `name` variable.', 'comment_created': datetime.datetime(2022, 9, 9, 13, 58, 13, tzinfo=datetime.timezone.utc), 'commenter': 'brocksam', 'type': 'User'}, {'comment_id': 967105800, 'comment_body': ""As this is only needed to help construct error messages, I'd recommend just having it (two copies) directly before each of the two potential `ValueError` exceptions are raised. That way it'd avoid the variable assignment if it is not required."", 'comment_created': datetime.datetime(2022, 9, 9, 14, 0, 28, tzinfo=datetime.timezone.utc), 'commenter': 'brocksam', 'type': 'User'}, {'comment_id': 967110922, 'comment_body': ""Potentially more efficient and readable to do this with `kd_ind` as a list and cast to a `Matrix` in the return statement. Also mirrors what's being done for similar methods, e.g. `_generate_q` and `_generate_u`."", 'comment_created': datetime.datetime(2022, 9, 9, 14, 5, 12, tzinfo=datetime.timezone.utc), 'commenter': 'brocksam', 'type': 'User'}, {'comment_id': 967112721, 'comment_body': 'Not required.', 'comment_created': datetime.datetime(2022, 9, 9, 14, 6, 35, tzinfo=datetime.timezone.utc), 'commenter': 'brocksam', 'type': 'User'}, {'comment_id': 967113984, 'comment_body': 'Formatting looks slightly out of alignment from preceding line.', 'comment_created': datetime.datetime(2022, 9, 9, 14, 7, 50, tzinfo=datetime.timezone.utc), 'commenter': 'brocksam', 'type': 'User'}, {'comment_id': 967122988, 'comment_body': 'Then you would have to cast it to a list first from the joints and then cast it back to a `Matrix`. The reason of this strange `Matrix` initialization is to make sure the symengine is fine with it. It can be simplified to `Matrix()` or a version without transpose once that is fixed in the symengine or we should support only two arguments within sympy when initiating a `Matrix`.', 'comment_created': datetime.datetime(2022, 9, 9, 14, 16, 29, tzinfo=datetime.timezone.utc), 'commenter': 'tjstienstra', 'type': 'User'}, {'comment_id': 967125454, 'comment_body': 'It is the type and the autonaming, that is why I choose for format.', 'comment_created': datetime.datetime(2022, 9, 9, 14, 18, 53, tzinfo=datetime.timezone.utc), 'commenter': 'tjstienstra', 'type': 'User'}, {'comment_id': 967127527, 'comment_body': 'This way it still fitted on a single line, otherwise its twice 4 extra lines (with backlash 2)', 'comment_created': datetime.datetime(2022, 9, 9, 14, 20, 59, tzinfo=datetime.timezone.utc), 'commenter': 'tjstienstra', 'type': 'User'}, {'comment_id': 967128094, 'comment_body': 'woops', 'comment_created': datetime.datetime(2022, 9, 9, 14, 21, 33, tzinfo=datetime.timezone.utc), 'commenter': 'tjstienstra', 'type': 'User'}, {'comment_id': 967155138, 'comment_body': 'My mistake, I missed that it was using `joint.kdes`. Ignore my comment and leave as is.', 'comment_created': datetime.datetime(2022, 9, 9, 14, 44, tzinfo=datetime.timezone.utc), 'commenter': 'brocksam', 'type': 'User'}, {'comment_id': 967179869, 'comment_body': 'Having seen the changed version I think I now agree with you here that it was neater before.', 'comment_created': datetime.datetime(2022, 9, 9, 15, 4, 41, tzinfo=datetime.timezone.utc), 'commenter': 'brocksam', 'type': 'User'}, {'comment_id': 967182361, 'comment_body': 'I think standard formatting is for there to only be one blank line above and below a closure (no preceding blank line if the closure directly follows a docstring). Is this also the case in SymPy? I think this could be removed.', 'comment_created': datetime.datetime(2022, 9, 9, 15, 7, 15, tzinfo=datetime.timezone.utc), 'commenter': 'brocksam', 'type': 'User'}, {'comment_id': 967191298, 'comment_body': 'yeah, my mistake', 'comment_created': datetime.datetime(2022, 9, 9, 15, 12, 14, tzinfo=datetime.timezone.utc), 'commenter': 'tjstienstra', 'type': 'User'}, {'comment_id': 969730129, 'comment_body': ""I didn't notice any tests for this method. Could you add a few regression tests for it?"", 'comment_created': datetime.datetime(2022, 9, 13, 14, 49, 32, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 969778249, 'comment_body': ""Forgot those, thanks for noting. They've been added."", 'comment_created': datetime.datetime(2022, 9, 13, 15, 27, 51, tzinfo=datetime.timezone.utc), 'commenter': 'tjstienstra', 'type': 'User'}]","[{'commit_sha': 'ad21672632d2724ceb69a627a2a403d0b4e8ec3d', 'committer_username': 'tjstienstra', 'committer_name': 'Timo Stienstra', 'committer_email': None, 'commit_date': datetime.datetime(2022, 1, 15, 19, 30, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b193567f4614203f99d684f52401cfcaf8c94718', 'committer_username': 'tjstienstra', 'committer_name': 'Timo Stienstra', 'committer_email': None, 'commit_date': datetime.datetime(2022, 1, 15, 19, 30, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '200c05c54c0e62ae6e740808411b945cdebabc20', 'committer_username': 'tjstienstra', 'committer_name': 'Timo Stienstra', 'committer_email': None, 'commit_date': datetime.datetime(2022, 1, 15, 19, 30, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bbf1f8a78b63dc072de1d75af1a40f3d9a487d3f', 'committer_username': 'tjstienstra', 'committer_name': 'Timo Stienstra', 'committer_email': None, 'commit_date': datetime.datetime(2022, 1, 15, 19, 30, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd978b4b48621eda2d2948f961953019c229b768d', 'committer_username': 'tjstienstra', 'committer_name': 'Timo Stienstra', 'committer_email': None, 'commit_date': datetime.datetime(2022, 1, 15, 19, 30, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5edd549367da7fab99e6320e7c6a9379520530c2', 'committer_username': 'tjstienstra', 'committer_name': 'Timo Stienstra', 'committer_email': None, 'commit_date': datetime.datetime(2022, 1, 15, 19, 30, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0c22906621e2567f5415b0211d81929e7f62a213', 'committer_username': 'tjstienstra', 'committer_name': 'Timo Stienstra', 'committer_email': None, 'commit_date': datetime.datetime(2022, 1, 15, 19, 30, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7ac3d6e2dbbbc41a9971031aef3dedebb5378d4a', 'committer_username': 'tjstienstra', 'committer_name': 'Timo Stienstra', 'committer_email': None, 'commit_date': datetime.datetime(2022, 1, 15, 19, 30, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a0ae89f1defb326783d241f00974b74ad30701d7', 'committer_username': 'tjstienstra', 'committer_name': 'Timo Stienstra', 'committer_email': None, 'commit_date': datetime.datetime(2022, 1, 15, 19, 30, 35, tzinfo=datetime.timezone.utc)}]",Timo Stienstra,97806294,,User,,12,,11,5
1038673082,[GSoC] Add parallel axis method to Body,"<!-- Your title above should be a short description of what
was changed. Do not include the issue number in the title. -->

#### References to other Issues or PRs
<!-- If this pull request fixes an issue, write ""Fixes #NNNN"" in that exact
format, e.g. ""Fixes #1234"" (see
https://tinyurl.com/auto-closing for more information). Also, please
write a comment on that issue linking back to this pull request once it is
open. -->


#### Brief description of what is fixed or changed
This PR adds the optional frame argument to `RigidBody.parallel_axis` and also implements the `parallel_axis` method for the `Body` class.

#### Other comments


#### Release Notes

<!-- Write the release notes for this release below between the BEGIN and END
statements. The basic format is a bulleted list with the name of the subpackage
and the release note for this PR. For example:

* solvers
  * Added a new solver for logarithmic equations.

* functions
  * Fixed a bug with log of integers.

or if no release note(s) should be included use:

NO ENTRY

See https://github.com/sympy/sympy/wiki/Writing-Release-Notes for more
information on how to write release notes. The bot will check your release
notes automatically to see if they are formatted correctly. -->

<!-- BEGIN RELEASE NOTES -->
* physics.mechanics
  * Add optional frame argument to the parallel axis method of RigidBody
  * Implement parallel axis method for Body
<!-- END RELEASE NOTES -->
",True,23981,https://api.github.com/repos/sympy/sympy/pulls/23981,https://github.com/sympy/sympy/pull/23981,closed,81,11,4,6,4,10,2,0,"[{'name': 'physics.mechanics'}, {'name': 'CZI: Codegen/Biomech'}]",2022-08-27 17:12:46+00:00,2022-09-06 11:55:02+00:00,844936.0,"9 days, 18:42:16","[{'comment_id': 956608438, 'comment_body': 'Why does the symengine let `simplify` return `None`, while normal python engine returns `zeros(3, 3)`?', 'comment_created': datetime.datetime(2022, 8, 27, 18, 4, 31, tzinfo=datetime.timezone.utc), 'commenter': 'tjstienstra', 'type': 'User'}, {'comment_id': 956617428, 'comment_body': ""SymPy's Matrix class is mutable and therefore not a subclass of Basic. Unlike everything else in SymPy the mutable Matrix class has a `simplify` method that does in-place simplification and returns None in the same way that `list.sort` does an in place sort and returns `None`. On the other hand if you `sympify` a Matrix then you get an ImmutableMatrix which is an instance of Basic and has a simplify method that returns a new simplified ImmutableMatrix without modifying the original (immutable) matrix.\r\n\r\nDifferent operations will convert a mutable Matrix into an ImmutableMatrix or not. SymEngine also has the same mutable and immutable matrix concept but doesn't handle the distinction in the same way as SymPy. Most likely you're hitting up against:\r\nhttps://github.com/symengine/symengine.py/issues/363"", 'comment_created': datetime.datetime(2022, 8, 27, 19, 49, 27, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 956694540, 'comment_body': 'Thank you for the clarification and it indeed seems to be the same issue, so good to know it is already open.', 'comment_created': datetime.datetime(2022, 8, 28, 9, 5, 26, tzinfo=datetime.timezone.utc), 'commenter': 'tjstienstra', 'type': 'User'}, {'comment_id': 963276597, 'comment_body': 'You can add two dyadics without needing to express it in a frame. Why do you need to explicitly expression the central inertia in this frame?', 'comment_created': datetime.datetime(2022, 9, 6, 5, 49, 12, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 963343539, 'comment_body': ""I'll remove the `express`, there is indeed no good reason to do so."", 'comment_created': datetime.datetime(2022, 9, 6, 7, 21, 5, tzinfo=datetime.timezone.utc), 'commenter': 'tjstienstra', 'type': 'User'}, {'comment_id': 963378156, 'comment_body': ""It would be helpful if you make a comment before line 306 that says in a sentence what you are testing. It's hard to read the few lines and immediately think of why this should be zero. If you have short explanations before each test then the reader can more quickly know what is going on. I recommend that for all your code additions."", 'comment_created': datetime.datetime(2022, 9, 6, 7, 56, 19, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 963533046, 'comment_body': ""Was taking another look at it ad it should be allowed to not convert it to matrices I would say, but:\r\n```py\r\nfrom sympy import trigsimp\r\nfrom sympy.physics.mechanics import inertia, Point, ReferenceFrame, RigidBody, Dyadic\r\nN = ReferenceFrame('N')\r\nm, Ix, Iy, Iz, a, b = symbols('m, I_x, I_y, I_z, a, b')\r\nIo = inertia(N, Ix, Iy, Iz)\r\no = Point('o')\r\np = o.locatenew('p', a * N.x + b * N.y)\r\nR = RigidBody('R', o, N, m, (Io, o))\r\nIp = R.parallel_axis(p)\r\nIp_expected = inertia(N, Ix + m * b**2, Iy + m * a**2,\r\n                      Iz + m * (a**2 + b**2), ixy=-m * a * b)\r\nassert Ip == Ip_expected\r\n# Reference frame from which the parallel axis is viewed should not matter\r\nA = ReferenceFrame('A')\r\nA.orient_axis(N, N.z, 1)\r\nassert trigsimp(R.parallel_axis(p, A) - Ip_expected) == Dyadic(0)\r\n```\r\nresults in `AttributeError: 'function' object has no attribute 'x'`\r\n\r\n`assert (R.parallel_axis(p, A) - Ip_expected).express(N).simplify() == Dyadic(0)` does work, since it simplifies the components of the dyadic. What shall we use the matrix conversion or `express(N).simplify()` option?"", 'comment_created': datetime.datetime(2022, 9, 6, 10, 21, 38, tzinfo=datetime.timezone.utc), 'commenter': 'tjstienstra', 'type': 'User'}, {'comment_id': 963535976, 'comment_body': '`assert _simplify_matrix((R.parallel_axis(p, A) - Ip_expected).to_matrix(A)) == zeros(3, 3)` seems best to me. However I do find the `AttributeError` rather strange.', 'comment_created': datetime.datetime(2022, 9, 6, 10, 24, 59, tzinfo=datetime.timezone.utc), 'commenter': 'tjstienstra', 'type': 'User'}, {'comment_id': 963553114, 'comment_body': ""The attribute error is because our physics vectors are not subclassed from SymPy's basic (and are mutable). There is a common issue that sympy functions don't work with Vectors/Dyadics."", 'comment_created': datetime.datetime(2022, 9, 6, 10, 45, 15, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 963554358, 'comment_body': 'Ah okay, thanks for the clarification.', 'comment_created': datetime.datetime(2022, 9, 6, 10, 46, 45, tzinfo=datetime.timezone.utc), 'commenter': 'tjstienstra', 'type': 'User'}]","[{'commit_sha': '801e149d69d5f88919a735f8b55b6024f97c6950', 'committer_username': 'tjstienstra', 'committer_name': 'Timo Stienstra', 'committer_email': None, 'commit_date': datetime.datetime(2022, 1, 15, 19, 30, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '227993d9bd8bf4efa5d46519e763dec95ec0c291', 'committer_username': 'tjstienstra', 'committer_name': 'Timo Stienstra', 'committer_email': None, 'commit_date': datetime.datetime(2022, 1, 15, 19, 30, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8c21dfd7ea24459f22eac65a71761d09e8c98eea', 'committer_username': 'tjstienstra', 'committer_name': 'Timo Stienstra', 'committer_email': None, 'commit_date': datetime.datetime(2022, 1, 15, 19, 30, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '91e752d3bb5ce70b33b3a3f9cb9f0418ce0e78de', 'committer_username': 'tjstienstra', 'committer_name': 'Timo Stienstra', 'committer_email': None, 'commit_date': datetime.datetime(2022, 1, 15, 19, 30, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '68fe3f29a14c93c237a419e997621861345cd29a', 'committer_username': 'tjstienstra', 'committer_name': 'Timo Stienstra', 'committer_email': None, 'commit_date': datetime.datetime(2022, 1, 15, 19, 30, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '00b2cfea6c44938867eb5c8d13e64ff7e59b1937', 'committer_username': 'tjstienstra', 'committer_name': 'Timo Stienstra', 'committer_email': None, 'commit_date': datetime.datetime(2022, 1, 15, 19, 30, 35, tzinfo=datetime.timezone.utc)}]",Timo Stienstra,97806294,,User,,12,,11,5
1038673864,[GSoC] Body zero inertia,"<!-- Your title above should be a short description of what
was changed. Do not include the issue number in the title. -->

#### References to other Issues or PRs
<!-- If this pull request fixes an issue, write ""Fixes #NNNN"" in that exact
format, e.g. ""Fixes #1234"" (see
https://tinyurl.com/auto-closing for more information). Also, please
write a comment on that issue linking back to this pull request once it is
open. -->
Partially fixes #23269


#### Brief description of what is fixed or changed
Change the inertia of a Body, which represents as Particle, to zero. And add a central inertia setter to RigidBody.

#### Other comments


#### Release Notes

<!-- Write the release notes for this release below between the BEGIN and END
statements. The basic format is a bulleted list with the name of the subpackage
and the release note for this PR. For example:

* solvers
  * Added a new solver for logarithmic equations.

* functions
  * Fixed a bug with log of integers.

or if no release note(s) should be included use:

NO ENTRY

See https://github.com/sympy/sympy/wiki/Writing-Release-Notes for more
information on how to write release notes. The bot will check your release
notes automatically to see if they are formatted correctly. -->

<!-- BEGIN RELEASE NOTES -->
* physics.mechanics
  * A Body representing a particle now has a zero inertia.
  * Implemented a central inertia setter.
<!-- END RELEASE NOTES -->
",True,23982,https://api.github.com/repos/sympy/sympy/pulls/23982,https://github.com/sympy/sympy/pull/23982,closed,58,4,4,4,3,9,2,0,"[{'name': 'physics.mechanics'}, {'name': 'CZI: Codegen/Biomech'}]",2022-08-27 17:17:07+00:00,2022-09-06 05:45:36+00:00,822509.0,"9 days, 12:28:29","[{'comment_id': 959928285, 'comment_body': 'A simple docstring is needed for these properties. Should the be called central_inertia?', 'comment_created': datetime.datetime(2022, 8, 31, 18, 59, 10, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 959930781, 'comment_body': 'It seems `.inertia` gives the central inertia, so why are both needed here? What if you want an inertia about another point? Is that part of the API?', 'comment_created': datetime.datetime(2022, 8, 31, 19, 2, 19, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 959931820, 'comment_body': ""i didn't see any tests for these additions to Body."", 'comment_created': datetime.datetime(2022, 8, 31, 19, 3, 38, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 959932313, 'comment_body': 'nevermind this, I now see them', 'comment_created': datetime.datetime(2022, 8, 31, 19, 4, 17, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 959936940, 'comment_body': 'I see now that RigidBody can be defined with its `.inertia` wrt to any point. Does this work for particle too? A particle can have inertia wrt a point other than its mass center.', 'comment_created': datetime.datetime(2022, 8, 31, 19, 10, 19, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 960325401, 'comment_body': ""No, `inertia` is overall defined as being a `tuple` `(Dyadic, Point)` (see `RigidBody`). However personally I would just most of the time set the central inertia of a body. The argument for `Body` also implies this preference, as it is `central_inertia` and not `inertia` like for `RigidBody`. This is also the reason why I've added a `central_inertia.setter` to `RigidBody`."", 'comment_created': datetime.datetime(2022, 9, 1, 7, 45, 46, tzinfo=datetime.timezone.utc), 'commenter': 'tjstienstra', 'type': 'User'}, {'comment_id': 960337020, 'comment_body': ""I've just added a test showing the expected behaviour."", 'comment_created': datetime.datetime(2022, 9, 1, 7, 57, 50, tzinfo=datetime.timezone.utc), 'commenter': 'tjstienstra', 'type': 'User'}, {'comment_id': 963273886, 'comment_body': ""I'm confused about this. It seems that you set the inertia of this body to be Ixx=0, Iyy=1, Izz=1 about a point 1 unit along x from the mass center. Then you ask for the inertia about the mass center here and it gives zero. If the body has inertia about y and z, shouldn't this be nonzero? Or is it that the mass=1 and r=1, so m*r**2=1, then you substract 1 from 1 for the y and z terms. I guess that is it."", 'comment_created': datetime.datetime(2022, 9, 6, 5, 44, 20, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 963274426, 'comment_body': 'I convinced myself there.', 'comment_created': datetime.datetime(2022, 9, 6, 5, 45, 16, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}]","[{'commit_sha': 'e37aebbc309baceba3c08122adfd68c33f397667', 'committer_username': 'tjstienstra', 'committer_name': 'Timo Stienstra', 'committer_email': None, 'commit_date': datetime.datetime(2022, 1, 15, 19, 30, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '56b19935a683e490a2ef8a9fa6287e39cc8f3e30', 'committer_username': 'tjstienstra', 'committer_name': 'Timo Stienstra', 'committer_email': None, 'commit_date': datetime.datetime(2022, 1, 15, 19, 30, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f0ccc88c86f77f1c3e13d590d4506e49c8cb2a12', 'committer_username': 'tjstienstra', 'committer_name': 'Timo Stienstra', 'committer_email': None, 'commit_date': datetime.datetime(2022, 1, 15, 19, 30, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'db02dcb9071786c63e3551ff06a4221a96af2c8b', 'committer_username': 'tjstienstra', 'committer_name': 'Timo Stienstra', 'committer_email': None, 'commit_date': datetime.datetime(2022, 1, 15, 19, 30, 35, tzinfo=datetime.timezone.utc)}]",Timo Stienstra,97806294,,User,,12,,11,5
1050537943,[GSoC] Implement auto coordinate generation helper for the joints framework,"<!-- Your title above should be a short description of what
was changed. Do not include the issue number in the title. -->

#### References to other Issues or PRs
<!-- If this pull request fixes an issue, write ""Fixes #NNNN"" in that exact
format, e.g. ""Fixes #1234"" (see
https://tinyurl.com/auto-closing for more information). Also, please
write a comment on that issue linking back to this pull request once it is
open. -->
Fixes #23933.


#### Brief description of what is fixed or changed
This PR adds a `Joint` method that functions as a helper to generate the coordinates for every type of joint in a generic way.

#### Other comments
There is a slide change in the generated name of the generalized coordinates and speeds for the `PinJoint` and `PrismaticJoint`, so they suite the new standard.

#### Release Notes

<!-- Write the release notes for this release below between the BEGIN and END
statements. The basic format is a bulleted list with the name of the subpackage
and the release note for this PR. For example:

* solvers
  * Added a new solver for logarithmic equations.

* functions
  * Fixed a bug with log of integers.

or if no release note(s) should be included use:

NO ENTRY

See https://github.com/sympy/sympy/wiki/Writing-Release-Notes for more
information on how to write release notes. The bot will check your release
notes automatically to see if they are formatted correctly. -->

<!-- BEGIN RELEASE NOTES -->
* physics.mechanics
  * Introduce a more flexible generalized coordinates/speeds parser to the joints framework.
  * BREAKING: Generalize the formatting of the generalized coordinates/speeds in the joints framework.
<!-- END RELEASE NOTES -->
",True,24028,https://api.github.com/repos/sympy/sympy/pulls/24028,https://github.com/sympy/sympy/pull/24028,closed,305,220,9,9,9,16,1,0,[{'name': 'CZI: Codegen/Biomech'}],2022-09-08 16:28:10+00:00,2022-09-13 17:02:28+00:00,434058.0,"5 days, 0:34:18","[{'comment_id': 967098994, 'comment_body': 'It\'s not clear what you mean by ""format"" here. Is it the types returned by these property attributes? If so, just state that changes have been made for consistency with the rest of `sympy.physics.mechanics` and this means changing those return types and unifying the symbols used for the generalized coordinates and generalized speeds.', 'comment_created': datetime.datetime(2022, 9, 9, 13, 53, 56, tzinfo=datetime.timezone.utc), 'commenter': 'brocksam', 'type': 'User'}, {'comment_id': 967103576, 'comment_body': 'I think reading this is clearer if the `create_symbol` closure function is at the very top of the function body, i.e. directly after the docstrong and before the declaration of the `name` variable.', 'comment_created': datetime.datetime(2022, 9, 9, 13, 58, 13, tzinfo=datetime.timezone.utc), 'commenter': 'brocksam', 'type': 'User'}, {'comment_id': 967105800, 'comment_body': ""As this is only needed to help construct error messages, I'd recommend just having it (two copies) directly before each of the two potential `ValueError` exceptions are raised. That way it'd avoid the variable assignment if it is not required."", 'comment_created': datetime.datetime(2022, 9, 9, 14, 0, 28, tzinfo=datetime.timezone.utc), 'commenter': 'brocksam', 'type': 'User'}, {'comment_id': 967110922, 'comment_body': ""Potentially more efficient and readable to do this with `kd_ind` as a list and cast to a `Matrix` in the return statement. Also mirrors what's being done for similar methods, e.g. `_generate_q` and `_generate_u`."", 'comment_created': datetime.datetime(2022, 9, 9, 14, 5, 12, tzinfo=datetime.timezone.utc), 'commenter': 'brocksam', 'type': 'User'}, {'comment_id': 967112721, 'comment_body': 'Not required.', 'comment_created': datetime.datetime(2022, 9, 9, 14, 6, 35, tzinfo=datetime.timezone.utc), 'commenter': 'brocksam', 'type': 'User'}, {'comment_id': 967113984, 'comment_body': 'Formatting looks slightly out of alignment from preceding line.', 'comment_created': datetime.datetime(2022, 9, 9, 14, 7, 50, tzinfo=datetime.timezone.utc), 'commenter': 'brocksam', 'type': 'User'}, {'comment_id': 967122988, 'comment_body': 'Then you would have to cast it to a list first from the joints and then cast it back to a `Matrix`. The reason of this strange `Matrix` initialization is to make sure the symengine is fine with it. It can be simplified to `Matrix()` or a version without transpose once that is fixed in the symengine or we should support only two arguments within sympy when initiating a `Matrix`.', 'comment_created': datetime.datetime(2022, 9, 9, 14, 16, 29, tzinfo=datetime.timezone.utc), 'commenter': 'tjstienstra', 'type': 'User'}, {'comment_id': 967125454, 'comment_body': 'It is the type and the autonaming, that is why I choose for format.', 'comment_created': datetime.datetime(2022, 9, 9, 14, 18, 53, tzinfo=datetime.timezone.utc), 'commenter': 'tjstienstra', 'type': 'User'}, {'comment_id': 967127527, 'comment_body': 'This way it still fitted on a single line, otherwise its twice 4 extra lines (with backlash 2)', 'comment_created': datetime.datetime(2022, 9, 9, 14, 20, 59, tzinfo=datetime.timezone.utc), 'commenter': 'tjstienstra', 'type': 'User'}, {'comment_id': 967128094, 'comment_body': 'woops', 'comment_created': datetime.datetime(2022, 9, 9, 14, 21, 33, tzinfo=datetime.timezone.utc), 'commenter': 'tjstienstra', 'type': 'User'}, {'comment_id': 967155138, 'comment_body': 'My mistake, I missed that it was using `joint.kdes`. Ignore my comment and leave as is.', 'comment_created': datetime.datetime(2022, 9, 9, 14, 44, tzinfo=datetime.timezone.utc), 'commenter': 'brocksam', 'type': 'User'}, {'comment_id': 967179869, 'comment_body': 'Having seen the changed version I think I now agree with you here that it was neater before.', 'comment_created': datetime.datetime(2022, 9, 9, 15, 4, 41, tzinfo=datetime.timezone.utc), 'commenter': 'brocksam', 'type': 'User'}, {'comment_id': 967182361, 'comment_body': 'I think standard formatting is for there to only be one blank line above and below a closure (no preceding blank line if the closure directly follows a docstring). Is this also the case in SymPy? I think this could be removed.', 'comment_created': datetime.datetime(2022, 9, 9, 15, 7, 15, tzinfo=datetime.timezone.utc), 'commenter': 'brocksam', 'type': 'User'}, {'comment_id': 967191298, 'comment_body': 'yeah, my mistake', 'comment_created': datetime.datetime(2022, 9, 9, 15, 12, 14, tzinfo=datetime.timezone.utc), 'commenter': 'tjstienstra', 'type': 'User'}, {'comment_id': 969730129, 'comment_body': ""I didn't notice any tests for this method. Could you add a few regression tests for it?"", 'comment_created': datetime.datetime(2022, 9, 13, 14, 49, 32, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 969778249, 'comment_body': ""Forgot those, thanks for noting. They've been added."", 'comment_created': datetime.datetime(2022, 9, 13, 15, 27, 51, tzinfo=datetime.timezone.utc), 'commenter': 'tjstienstra', 'type': 'User'}]","[{'commit_sha': 'ad21672632d2724ceb69a627a2a403d0b4e8ec3d', 'committer_username': 'tjstienstra', 'committer_name': 'Timo Stienstra', 'committer_email': None, 'commit_date': datetime.datetime(2022, 1, 15, 19, 30, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b193567f4614203f99d684f52401cfcaf8c94718', 'committer_username': 'tjstienstra', 'committer_name': 'Timo Stienstra', 'committer_email': None, 'commit_date': datetime.datetime(2022, 1, 15, 19, 30, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '200c05c54c0e62ae6e740808411b945cdebabc20', 'committer_username': 'tjstienstra', 'committer_name': 'Timo Stienstra', 'committer_email': None, 'commit_date': datetime.datetime(2022, 1, 15, 19, 30, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bbf1f8a78b63dc072de1d75af1a40f3d9a487d3f', 'committer_username': 'tjstienstra', 'committer_name': 'Timo Stienstra', 'committer_email': None, 'commit_date': datetime.datetime(2022, 1, 15, 19, 30, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd978b4b48621eda2d2948f961953019c229b768d', 'committer_username': 'tjstienstra', 'committer_name': 'Timo Stienstra', 'committer_email': None, 'commit_date': datetime.datetime(2022, 1, 15, 19, 30, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5edd549367da7fab99e6320e7c6a9379520530c2', 'committer_username': 'tjstienstra', 'committer_name': 'Timo Stienstra', 'committer_email': None, 'commit_date': datetime.datetime(2022, 1, 15, 19, 30, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0c22906621e2567f5415b0211d81929e7f62a213', 'committer_username': 'tjstienstra', 'committer_name': 'Timo Stienstra', 'committer_email': None, 'commit_date': datetime.datetime(2022, 1, 15, 19, 30, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7ac3d6e2dbbbc41a9971031aef3dedebb5378d4a', 'committer_username': 'tjstienstra', 'committer_name': 'Timo Stienstra', 'committer_email': None, 'commit_date': datetime.datetime(2022, 1, 15, 19, 30, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a0ae89f1defb326783d241f00974b74ad30701d7', 'committer_username': 'tjstienstra', 'committer_name': 'Timo Stienstra', 'committer_email': None, 'commit_date': datetime.datetime(2022, 1, 15, 19, 30, 35, tzinfo=datetime.timezone.utc)}]",Timo Stienstra,97806294,,User,,12,,11,5
1051553405,[GSoC] Cylindrical joint,"<!-- Your title above should be a short description of what
was changed. Do not include the issue number in the title. -->

#### References to other Issues or PRs
<!-- If this pull request fixes an issue, write ""Fixes #NNNN"" in that exact
format, e.g. ""Fixes #1234"" (see
https://tinyurl.com/auto-closing for more information). Also, please
write a comment on that issue linking back to this pull request once it is
open. -->
Part of #21519

#### Brief description of what is fixed or changed
Implements the CylindricalJoint

#### Other comments


#### Release Notes

<!-- Write the release notes for this release below between the BEGIN and END
statements. The basic format is a bulleted list with the name of the subpackage
and the release note for this PR. For example:

* solvers
  * Added a new solver for logarithmic equations.

* functions
  * Fixed a bug with log of integers.

or if no release note(s) should be included use:

NO ENTRY

See https://github.com/sympy/sympy/wiki/Writing-Release-Notes for more
information on how to write release notes. The bot will check your release
notes automatically to see if they are formatted correctly. -->

<!-- BEGIN RELEASE NOTES -->
* physics.mechanics
  * Added a CylindricalJoint
<!-- END RELEASE NOTES -->
",True,24037,https://api.github.com/repos/sympy/sympy/pulls/24037,https://github.com/sympy/sympy/pull/24037,closed,503,4,5,1,6,19,1,0,[{'name': 'CZI: Codegen/Biomech'}],2022-09-09 13:03:31+00:00,2022-09-14 14:17:48+00:00,436457.0,"5 days, 1:14:17","[{'comment_id': 968480021, 'comment_body': ""It's slightly tricky to follow the logic of this function with `coords` and `coordinates`. Can one of them be given a more descriptive name? For example, make `coords` something like `new_coords` or `generated_coordinates`."", 'comment_created': datetime.datetime(2022, 9, 12, 14, 18, 10, tzinfo=datetime.timezone.utc), 'commenter': 'brocksam', 'type': 'User'}, {'comment_id': 968484270, 'comment_body': '```suggestion\r\n    A cylindrical joint is defined such that the child body both rotates about\r\n    and translates along the body-fixed joint axis with respect to the\r\n    parent body. The joint axis is both the rotation and translation axis.\r\n```', 'comment_created': datetime.datetime(2022, 9, 12, 14, 21, 49, tzinfo=datetime.timezone.utc), 'commenter': 'brocksam', 'type': 'User'}, {'comment_id': 968485982, 'comment_body': 'Are ""childinterframe"" and ""parentinterframe"" consistently referred with this stylising throughout the docs? Should ""child interframe"" and ""parent interframe"" be preferred? I think the later is more readable.', 'comment_created': datetime.datetime(2022, 9, 12, 14, 23, 17, tzinfo=datetime.timezone.utc), 'commenter': 'brocksam', 'type': 'User'}, {'comment_id': 968486364, 'comment_body': '```suggestion\r\n    explanation of the intermediate frames.\r\n```', 'comment_created': datetime.datetime(2022, 9, 12, 14, 23, 36, tzinfo=datetime.timezone.utc), 'commenter': 'brocksam', 'type': 'User'}, {'comment_id': 968487750, 'comment_body': '""displacement"" over ""distance"" as this is a vector quantity?\r\n```suggestion\r\n        Generalized coordinate corresponding to the translation displacement. The\r\n```', 'comment_created': datetime.datetime(2022, 9, 12, 14, 24, 46, tzinfo=datetime.timezone.utc), 'commenter': 'brocksam', 'type': 'User'}, {'comment_id': 968489912, 'comment_body': 'Same as above.\r\n```suggestion\r\n        Generalized coordinate corresponding to the translation displacement.\r\n```', 'comment_created': datetime.datetime(2022, 9, 12, 14, 26, 29, tzinfo=datetime.timezone.utc), 'commenter': 'brocksam', 'type': 'User'}, {'comment_id': 968490806, 'comment_body': '```suggestion\r\n        The axis of rotation and translation.\r\n```', 'comment_created': datetime.datetime(2022, 9, 12, 14, 27, 14, tzinfo=datetime.timezone.utc), 'commenter': 'brocksam', 'type': 'User'}, {'comment_id': 968492454, 'comment_body': '```suggestion\r\n    The second body represents a freely moving tube around that pole. The\r\n```', 'comment_created': datetime.datetime(2022, 9, 12, 14, 28, 32, tzinfo=datetime.timezone.utc), 'commenter': 'brocksam', 'type': 'User'}, {'comment_id': 968493021, 'comment_body': '```suggestion\r\n    along and rotating around the Z axis of both bodies.\r\n```', 'comment_created': datetime.datetime(2022, 9, 12, 14, 29, 1, tzinfo=datetime.timezone.utc), 'commenter': 'brocksam', 'type': 'User'}, {'comment_id': 968493528, 'comment_body': '```suggestion\r\n    The second joint will connect the tube perpendicular to the flag along the Y\r\n```', 'comment_created': datetime.datetime(2022, 9, 12, 14, 29, 26, tzinfo=datetime.timezone.utc), 'commenter': 'brocksam', 'type': 'User'}, {'comment_id': 968494523, 'comment_body': '```suggestion\r\n    Finally, the linear velocities of the two tube centers of mass can be\r\n```', 'comment_created': datetime.datetime(2022, 9, 12, 14, 30, 12, tzinfo=datetime.timezone.utc), 'commenter': 'brocksam', 'type': 'User'}, {'comment_id': 968495771, 'comment_body': '```suggestion\r\n        """"""Axis about and along which the rotation and translation occurs.""""""\r\n```', 'comment_created': datetime.datetime(2022, 9, 12, 14, 31, 14, tzinfo=datetime.timezone.utc), 'commenter': 'brocksam', 'type': 'User'}, {'comment_id': 968496184, 'comment_body': 'Same as above.\r\n```suggestion\r\n        """"""Generalized coordinate corresponding to the translation displacement.""""""\r\n```', 'comment_created': datetime.datetime(2022, 9, 12, 14, 31, 34, tzinfo=datetime.timezone.utc), 'commenter': 'brocksam', 'type': 'User'}, {'comment_id': 969665233, 'comment_body': 'yeah should be the later. The full formulation would be intermediate frame of the child body. A bit shorter would be child intermediate frame, of which child interframe is kind of the abbreviation. The attribute is also named ``child_interframe``. So I think it is best to indeed use the later ""child interframe"".', 'comment_created': datetime.datetime(2022, 9, 13, 13, 57, 9, tzinfo=datetime.timezone.utc), 'commenter': 'tjstienstra', 'type': 'User'}, {'comment_id': 969707111, 'comment_body': ""[Distance](https://www.dictionary.com/browse/distance) is defined as the amount of space between two things. While [displacement](https://www.dictionary.com/browse/displacement) is more defined as the distance of a thing from a reference position.\r\nSo I would say each of them would be correct. Distance, because it is the amount of space between the `parent_point` and `child_point`. Displacement, because it is the distance the `child_point` has translated along the `joint_axis`.\r\n\r\nPersonally I think translation distance might be clearer, but if you think translational displacement is more clear, then I'll change it.\r\n"", 'comment_created': datetime.datetime(2022, 9, 13, 14, 30, 50, tzinfo=datetime.timezone.utc), 'commenter': 'tjstienstra', 'type': 'User'}, {'comment_id': 969713866, 'comment_body': 'Another slight pro of distance over displacement is that it is a bit shorter, so that the description of the `translation_coordinate` property fits within the 80 characters.', 'comment_created': datetime.datetime(2022, 9, 13, 14, 36, 18, tzinfo=datetime.timezone.utc), 'commenter': 'tjstienstra', 'type': 'User'}, {'comment_id': 969715250, 'comment_body': 'This is part of #24028 ', 'comment_created': datetime.datetime(2022, 9, 13, 14, 37, 25, tzinfo=datetime.timezone.utc), 'commenter': 'tjstienstra', 'type': 'User'}, {'comment_id': 969888323, 'comment_body': 'The other PR is merged, but maybe this still needs to be addressed?', 'comment_created': datetime.datetime(2022, 9, 13, 17, 12, 21, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 969890472, 'comment_body': ""[It](https://github.com/sympy/sympy/pull/24028/commits/7ac3d6e2dbbbc41a9971031aef3dedebb5378d4a) has been. I changed it to `generated_coordinates`, since that is most clear and does not require wrapping. I'll be updating this branch to use the latest commits of the master, i.e. reset new commits -> rebase -> redo the commit (will be a squashed commit)."", 'comment_created': datetime.datetime(2022, 9, 13, 17, 14, 50, tzinfo=datetime.timezone.utc), 'commenter': 'tjstienstra', 'type': 'User'}]","[{'commit_sha': '61b9dd2e33edff3369ce84bc20d784a1c8148594', 'committer_username': 'tjstienstra', 'committer_name': 'Timo Stienstra', 'committer_email': None, 'commit_date': datetime.datetime(2022, 1, 15, 19, 30, 35, tzinfo=datetime.timezone.utc)}]",Timo Stienstra,97806294,,User,,12,,11,5
1053113149,[GSoC] Planar Joint,"<!-- Your title above should be a short description of what
was changed. Do not include the issue number in the title. -->

#### References to other Issues or PRs
<!-- If this pull request fixes an issue, write ""Fixes #NNNN"" in that exact
format, e.g. ""Fixes #1234"" (see
https://tinyurl.com/auto-closing for more information). Also, please
write a comment on that issue linking back to this pull request once it is
open. -->
Part of #21519

#### Brief description of what is fixed or changed
Implements the PlanarJoint

#### Other comments


#### Release Notes

<!-- Write the release notes for this release below between the BEGIN and END
statements. The basic format is a bulleted list with the name of the subpackage
and the release note for this PR. For example:

* solvers
  * Added a new solver for logarithmic equations.

* functions
  * Fixed a bug with log of integers.

or if no release note(s) should be included use:

NO ENTRY

See https://github.com/sympy/sympy/wiki/Writing-Release-Notes for more
information on how to write release notes. The bot will check your release
notes automatically to see if they are formatted correctly. -->

<!-- BEGIN RELEASE NOTES -->
* physics.mechanics
  * Added a PlanarJoint
<!-- END RELEASE NOTES -->
",True,24046,https://api.github.com/repos/sympy/sympy/pulls/24046,https://github.com/sympy/sympy/pull/24046,closed,619,12,5,5,13,32,1,0,[{'name': 'CZI: Codegen/Biomech'}],2022-09-12 10:34:04+00:00,2022-09-23 14:08:11+00:00,963247.0,"11 days, 3:34:07","[{'comment_id': 970981325, 'comment_body': '```suggestion\r\n    create a rotated intermediate frame, so that the ``parent_vectors`` and\r\n```', 'comment_created': datetime.datetime(2022, 9, 14, 15, 32, 46, tzinfo=datetime.timezone.utc), 'commenter': 'brocksam', 'type': 'User'}, {'comment_id': 970985597, 'comment_body': ""```suggestion\r\n    The planar joint can be created using these bodies and intermediate frame. \r\n    Specify the origin of the slope to be ``d`` above the slope's center of mass\r\n    and the block's center of mass to be a distance``h`` above the slope's surface.\r\n```"", 'comment_created': datetime.datetime(2022, 9, 14, 15, 35, 33, tzinfo=datetime.timezone.utc), 'commenter': 'brocksam', 'type': 'User'}, {'comment_id': 970986385, 'comment_body': '```suggestion\r\n    First the ``rotation_axis``, which is normal to the plane and the\r\n    ``plane_vectors``, can be found.\r\n```', 'comment_created': datetime.datetime(2022, 9, 14, 15, 36, 6, tzinfo=datetime.timezone.utc), 'commenter': 'brocksam', 'type': 'User'}, {'comment_id': 970987301, 'comment_body': ""```suggestion\r\n    Finally, the linear velocity of the block's center of mass can be\r\n    computed with respect to the ground.\r\n```"", 'comment_created': datetime.datetime(2022, 9, 14, 15, 36, 40, tzinfo=datetime.timezone.utc), 'commenter': 'brocksam', 'type': 'User'}, {'comment_id': 970989589, 'comment_body': '```suggestion\r\n    The provided rotation axis and planar vectors are parsed as following. All\r\n    directions metioned here, i.e. ``x``, ``y`` and ``z``, are seen from the perspective of the\r\n    ``parent_interframe``. After analyzing the planar vectors, the rotation axis\r\n    is created if it is not provided. The method to create the rotation axis is\r\n    dependent on the provided planar vectors according to the following rules:\r\n```', 'comment_created': datetime.datetime(2022, 9, 14, 15, 38, 15, tzinfo=datetime.timezone.utc), 'commenter': 'brocksam', 'type': 'User'}, {'comment_id': 970990980, 'comment_body': '```suggestion\r\n    Now the rotation axis is known the missing planar vectors are determined. If\r\n    no planar vectors are provided, the first planar vector is determined as follows:\r\n```', 'comment_created': datetime.datetime(2022, 9, 14, 15, 39, 15, tzinfo=datetime.timezone.utc), 'commenter': 'brocksam', 'type': 'User'}, {'comment_id': 970993255, 'comment_body': 'This should probably be moved higher up as it provides context around why the first and second planar vectors are derived the way they are if not supplied.\r\n```suggestion\r\n    Overall the aim is for ``z`` to be the rotation axis and ``x`` and ``y`` to be the\r\n    planar vectors. This is also the default.\r\n```', 'comment_created': datetime.datetime(2022, 9, 14, 15, 40, 56, tzinfo=datetime.timezone.utc), 'commenter': 'brocksam', 'type': 'User'}, {'comment_id': 970998027, 'comment_body': 'Do we ever add any sanitisation in the other joint classes? Should we be checking whether the user provides a valid vector here?', 'comment_created': datetime.datetime(2022, 9, 14, 15, 44, 7, tzinfo=datetime.timezone.utc), 'commenter': 'brocksam', 'type': 'User'}, {'comment_id': 970998599, 'comment_body': 'Same as above for the `rotation_axis`.', 'comment_created': datetime.datetime(2022, 9, 14, 15, 44, 33, tzinfo=datetime.timezone.utc), 'commenter': 'brocksam', 'type': 'User'}, {'comment_id': 971006196, 'comment_body': 'It feels like quite specialist knowledge to know that `^` is overloaded on a `Vector` to compute a cross product. A comment might be useful here.', 'comment_created': datetime.datetime(2022, 9, 14, 15, 49, 38, tzinfo=datetime.timezone.utc), 'commenter': 'brocksam', 'type': 'User'}, {'comment_id': 971007306, 'comment_body': ""If we're using the `cross` function elsewhere within this method then I think it's clearer to be consistent here too."", 'comment_created': datetime.datetime(2022, 9, 14, 15, 50, 40, tzinfo=datetime.timezone.utc), 'commenter': 'brocksam', 'type': 'User'}, {'comment_id': 971009611, 'comment_body': 'I think this can be ignored, looks like the initialiser is just temporarily storing the value in `self._rotation_axis` with `self._set_vectors` handling the sanitisation.', 'comment_created': datetime.datetime(2022, 9, 14, 15, 52, 34, tzinfo=datetime.timezone.utc), 'commenter': 'brocksam', 'type': 'User'}, {'comment_id': 971009940, 'comment_body': 'I think this can be ignored, looks like the initialiser is just temporarily storing the value in `self._planar_vectors` with `self._set_vectors` handling the sanitisation.', 'comment_created': datetime.datetime(2022, 9, 14, 15, 52, 47, tzinfo=datetime.timezone.utc), 'commenter': 'brocksam', 'type': 'User'}, {'comment_id': 971014789, 'comment_body': 'How confident are you that the `trigsimp` approach suffices for all reasonable instances of parallel vectors?', 'comment_created': datetime.datetime(2022, 9, 14, 15, 56, 44, tzinfo=datetime.timezone.utc), 'commenter': 'brocksam', 'type': 'User'}, {'comment_id': 971105210, 'comment_body': 'yep, the entire checking is done in `_set_vectors`. The difficulty is that for the checking some of the basic attributes should be set first. So, the first possibility to start setting those properties is in the `_orient_frames` method.', 'comment_created': datetime.datetime(2022, 9, 14, 17, 26, 47, tzinfo=datetime.timezone.utc), 'commenter': 'tjstienstra', 'type': 'User'}, {'comment_id': 971109235, 'comment_body': '`cross` is actually a little bit more general, since it uses `^` after checking the type of the first vector. But I agree that `cross` is a lot easier to read.', 'comment_created': datetime.datetime(2022, 9, 14, 17, 31, 26, tzinfo=datetime.timezone.utc), 'commenter': 'tjstienstra', 'type': 'User'}, {'comment_id': 971113208, 'comment_body': ""Not really, but if someone manages to make it really complex, that `trigsimp` does not manage to simplify it. I'd rather throw an error, then keep trying to simplify it forever. You could argue more about the fact whether my checks whether something is parallel with an axis, which don't use a simplify, should get some kind of simplify wrapper."", 'comment_created': datetime.datetime(2022, 9, 14, 17, 35, 38, tzinfo=datetime.timezone.utc), 'commenter': 'tjstienstra', 'type': 'User'}, {'comment_id': 971129009, 'comment_body': ""Changed it to:\r\n```\r\nThe planar joint can be created using these bodies and intermediate frame.\r\nWe can specify the origin of the slope to be ``d`` above the slope's center\r\nof mass and the block's center of mass to be a distance ``h`` above the\r\nslope's surface.\r\n```"", 'comment_created': datetime.datetime(2022, 9, 14, 17, 51, 29, tzinfo=datetime.timezone.utc), 'commenter': 'tjstienstra', 'type': 'User'}, {'comment_id': 971131106, 'comment_body': ""I've implemented most of your suggestions on the first part and also moved this line to the start of the notes."", 'comment_created': datetime.datetime(2022, 9, 14, 17, 53, 51, tzinfo=datetime.timezone.utc), 'commenter': 'tjstienstra', 'type': 'User'}, {'comment_id': 975381907, 'comment_body': 'Is this a typo here? Is it meant to be `coordinates` still but with the trailing space for formatting?', 'comment_created': datetime.datetime(2022, 9, 20, 13, 42, 3, tzinfo=datetime.timezone.utc), 'commenter': 'brocksam', 'type': 'User'}, {'comment_id': 975385819, 'comment_body': ""Is it worth adding a note about why we're not allowing this?"", 'comment_created': datetime.datetime(2022, 9, 20, 13, 45, 12, tzinfo=datetime.timezone.utc), 'commenter': 'brocksam', 'type': 'User'}, {'comment_id': 975388513, 'comment_body': 'It gives an underdefined error. Personally I think it is not worth noting, since it would only make it more confusing.', 'comment_created': datetime.datetime(2022, 9, 20, 13, 47, 23, tzinfo=datetime.timezone.utc), 'commenter': 'tjstienstra', 'type': 'User'}, {'comment_id': 975389631, 'comment_body': 'Yep, fixed it', 'comment_created': datetime.datetime(2022, 9, 20, 13, 48, 10, tzinfo=datetime.timezone.utc), 'commenter': 'tjstienstra', 'type': 'User'}, {'comment_id': 978372664, 'comment_body': 'Can you provide the reader with an explanation of why this is the case?', 'comment_created': datetime.datetime(2022, 9, 23, 8, 7, 19, tzinfo=datetime.timezone.utc), 'commenter': 'brocksam', 'type': 'User'}, {'comment_id': 978374743, 'comment_body': 'Additional punctuation in this sentence would definitely help with its readability.\r\n```suggestion\r\n    of the ``Joint`` class. In the code below, the above example (with the block\r\n    on the slope) is recreated by supplying vectors to the interframe arguments.\r\n```', 'comment_created': datetime.datetime(2022, 9, 23, 8, 9, 53, tzinfo=datetime.timezone.utc), 'commenter': 'brocksam', 'type': 'User'}, {'comment_id': 978375786, 'comment_body': 'Should there be a blank line between these two paragraphs?', 'comment_created': datetime.datetime(2022, 9, 23, 8, 11, 11, tzinfo=datetime.timezone.utc), 'commenter': 'brocksam', 'type': 'User'}, {'comment_id': 978376687, 'comment_body': '```suggestion\r\n    In order to simplify the definition of the ``PlanarJoint``, the\r\n    ``rotation_axis`` and ``planar_vectors`` are set to be the unit vectors of\r\n```', 'comment_created': datetime.datetime(2022, 9, 23, 8, 12, 17, tzinfo=datetime.timezone.utc), 'commenter': 'brocksam', 'type': 'User'}, {'comment_id': 978377263, 'comment_body': '```suggestion\r\n    that as the interframe. If you however would only like to supply the normals of\r\n```', 'comment_created': datetime.datetime(2022, 9, 23, 8, 12, 59, tzinfo=datetime.timezone.utc), 'commenter': 'brocksam', 'type': 'User'}, {'comment_id': 978378025, 'comment_body': '```suggestion\r\n    the plane with respect to the parent and child bodies, then you can also supply\r\n```', 'comment_created': datetime.datetime(2022, 9, 23, 8, 13, 54, tzinfo=datetime.timezone.utc), 'commenter': 'brocksam', 'type': 'User'}, {'comment_id': 978386469, 'comment_body': ""Yeah, wasn't sure thought it may improve readability (but like this it will just be one big paragraph. Will add an extra blank line."", 'comment_created': datetime.datetime(2022, 9, 23, 8, 24, tzinfo=datetime.timezone.utc), 'commenter': 'tjstienstra', 'type': 'User'}, {'comment_id': 978386773, 'comment_body': 'Haha, of course', 'comment_created': datetime.datetime(2022, 9, 23, 8, 24, 20, tzinfo=datetime.timezone.utc), 'commenter': 'tjstienstra', 'type': 'User'}, {'comment_id': 978394695, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 9, 23, 8, 33, 54, tzinfo=datetime.timezone.utc), 'commenter': 'tjstienstra', 'type': 'User'}]","[{'commit_sha': '7485fbcf12ae60390598341a5c57ff25374c10df', 'committer_username': 'tjstienstra', 'committer_name': 'Timo Stienstra', 'committer_email': None, 'commit_date': datetime.datetime(2022, 1, 15, 19, 30, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '207dbd8b9842a201282e47f47b88a32b196989d4', 'committer_username': 'tjstienstra', 'committer_name': 'Timo Stienstra', 'committer_email': None, 'commit_date': datetime.datetime(2022, 1, 15, 19, 30, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0e6b5d4c87e32ff7ed27034b1e5ebe49574a774b', 'committer_username': 'tjstienstra', 'committer_name': 'Timo Stienstra', 'committer_email': None, 'commit_date': datetime.datetime(2022, 1, 15, 19, 30, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3fb764e8550a311145dc52a934d702ac69cc7dbe', 'committer_username': 'tjstienstra', 'committer_name': 'Timo Stienstra', 'committer_email': None, 'commit_date': datetime.datetime(2022, 1, 15, 19, 30, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5de0e1053fe0595744a14f343a8a7250ee941776', 'committer_username': 'tjstienstra', 'committer_name': 'Timo Stienstra', 'committer_email': None, 'commit_date': datetime.datetime(2022, 1, 15, 19, 30, 35, tzinfo=datetime.timezone.utc)}]",Timo Stienstra,97806294,,User,,12,,11,5
1054960499,[GSoC] Spherical joint,"<!-- Your title above should be a short description of what
was changed. Do not include the issue number in the title. -->

#### References to other Issues or PRs
<!-- If this pull request fixes an issue, write ""Fixes #NNNN"" in that exact
format, e.g. ""Fixes #1234"" (see
https://tinyurl.com/auto-closing for more information). Also, please
write a comment on that issue linking back to this pull request once it is
open. -->
Part of #21519
Fixes #24098

#### Brief description of what is fixed or changed
Implements the SphericalJoint

#### Other comments


#### Release Notes

<!-- Write the release notes for this release below between the BEGIN and END
statements. The basic format is a bulleted list with the name of the subpackage
and the release note for this PR. For example:

* solvers
  * Added a new solver for logarithmic equations.

* functions
  * Fixed a bug with log of integers.

or if no release note(s) should be included use:

NO ENTRY

See https://github.com/sympy/sympy/wiki/Writing-Release-Notes for more
information on how to write release notes. The bot will check your release
notes automatically to see if they are formatted correctly. -->

<!-- BEGIN RELEASE NOTES -->
* physics.mechanics
  * Added a SphericalJoint
<!-- END RELEASE NOTES -->
",True,24053,https://api.github.com/repos/sympy/sympy/pulls/24053,https://github.com/sympy/sympy/pull/24053,closed,574,3,6,5,16,20,1,0,[{'name': 'CZI: Codegen/Biomech'}],2022-09-13 16:59:11+00:00,2022-09-30 15:06:53+00:00,1462062.0,"16 days, 22:07:42","[{'comment_id': 984443476, 'comment_body': 'How confident are you that all these are correct?', 'comment_created': datetime.datetime(2022, 9, 30, 10, 18, 22, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 984519406, 'comment_body': ""Is this a change you are introducing or is it to match a change that's been made upstream? If so, can you please explain why it's needed? It feels a bit out of place to me that this PR is also changing something so far removed."", 'comment_created': datetime.datetime(2022, 9, 30, 12, 4, tzinfo=datetime.timezone.utc), 'commenter': 'brocksam', 'type': 'User'}, {'comment_id': 984523559, 'comment_body': ""Why do some references to attributes get double backticks (e.g. ` ``parent_point`` `) while others don't (e.g. `joint_point`)?\r\n```suggestion\r\n    A spherical joint is defined such that the child body is free to rotate in\r\n    any direction, without allowing a translation of the ``child_point``. As can\r\n    also be seen in the image, the ``parent_point`` and ``child_point`` are fixed\r\n    on top of each other, i.e. the joint_point. This rotation is defined using the\r\n    :func:`parent_interframe.orient(child_interframe, rot_type, amounts,\r\n    rot_order)<sympy.physics.vector.frame.ReferenceFrame.orient>` method. The\r\n    default rotation consists of three relative rotations, i.e. body fixed\r\n    rotations. Based on the direction cosine matrix following from these\r\n    rotations, the angular velocity is computed based on the generalized\r\n    coordinates and generalized speeds.\r\n```"", 'comment_created': datetime.datetime(2022, 9, 30, 12, 9, 34, tzinfo=datetime.timezone.utc), 'commenter': 'brocksam', 'type': 'User'}, {'comment_id': 984524675, 'comment_body': '```suggestion\r\n    To further demonstrate the use of the spherical joint, the kinematics of a\r\n    spherical joint with a ZXZ rotation can be created as follows.\r\n```', 'comment_created': datetime.datetime(2022, 9, 30, 12, 11, 2, tzinfo=datetime.timezone.utc), 'commenter': 'brocksam', 'type': 'User'}, {'comment_id': 984525725, 'comment_body': ""```suggestion\r\n    The joint will connect the bob to the floor, with the joint located at\r\n    a distance of ``l1`` from the child's center of mass and the rotation set\r\n    to a body-fixed ZXZ rotation.\r\n```"", 'comment_created': datetime.datetime(2022, 9, 30, 12, 12, 20, tzinfo=datetime.timezone.utc), 'commenter': 'brocksam', 'type': 'User'}, {'comment_id': 984525993, 'comment_body': '```suggestion\r\n    Now that the joint is established, the kinematics of the connected body can\r\n    be accessed.\r\n```', 'comment_created': datetime.datetime(2022, 9, 30, 12, 12, 40, tzinfo=datetime.timezone.utc), 'commenter': 'brocksam', 'type': 'User'}, {'comment_id': 984526279, 'comment_body': ""```suggestion\r\n    Finally, the linear velocity of the bob's center of mass can be\r\n    computed.\r\n```"", 'comment_created': datetime.datetime(2022, 9, 30, 12, 13, 5, tzinfo=datetime.timezone.utc), 'commenter': 'brocksam', 'type': 'User'}, {'comment_id': 984527191, 'comment_body': 'These should be class attributes not instance attributes. We should also indicate that these are constant by renaming to `_SUPPORTED_ROT_TYPES`.', 'comment_created': datetime.datetime(2022, 9, 30, 12, 14, 10, tzinfo=datetime.timezone.utc), 'commenter': 'brocksam', 'type': 'User'}, {'comment_id': 984527728, 'comment_body': 'Should `rot_type` have a default value that is titlecase if the supported rotation types are uppercase strings?', 'comment_created': datetime.datetime(2022, 9, 30, 12, 14, 51, tzinfo=datetime.timezone.utc), 'commenter': 'brocksam', 'type': 'User'}, {'comment_id': 984528494, 'comment_body': ""See comment below on l1921.\r\n```suggestion\r\n\r\n    _SUPPORTED_ROT_TYPES = {'BODY', 'SPACE'}\r\n\r\n```\r\nMight as well make this container a set as it is only being used to check membership."", 'comment_created': datetime.datetime(2022, 9, 30, 12, 15, 56, tzinfo=datetime.timezone.utc), 'commenter': 'brocksam', 'type': 'User'}, {'comment_id': 984528812, 'comment_body': 'See comment above on l1916.', 'comment_created': datetime.datetime(2022, 9, 30, 12, 16, 21, tzinfo=datetime.timezone.utc), 'commenter': 'brocksam', 'type': 'User'}, {'comment_id': 984533068, 'comment_body': 'Will change it to uppercase', 'comment_created': datetime.datetime(2022, 9, 30, 12, 21, 52, tzinfo=datetime.timezone.utc), 'commenter': 'tjstienstra', 'type': 'User'}, {'comment_id': 984535955, 'comment_body': 'If I remember correctly I created this output using `orient_axis` (or `orient_body_fixed`), so in that sense quite confident, since I belief both of those methods to give correct output.', 'comment_created': datetime.datetime(2022, 9, 30, 12, 25, 25, tzinfo=datetime.timezone.utc), 'commenter': 'tjstienstra', 'type': 'User'}, {'comment_id': 984536660, 'comment_body': 'Fixes #24098 (should probably have been moved in a separate PR)', 'comment_created': datetime.datetime(2022, 9, 30, 12, 26, 15, tzinfo=datetime.timezone.utc), 'commenter': 'tjstienstra', 'type': 'User'}, {'comment_id': 984539659, 'comment_body': 'Typo: missing space.', 'comment_created': datetime.datetime(2022, 9, 30, 12, 29, 46, tzinfo=datetime.timezone.utc), 'commenter': 'brocksam', 'type': 'User'}, {'comment_id': 984540148, 'comment_body': 'Forgot that one', 'comment_created': datetime.datetime(2022, 9, 30, 12, 30, 23, tzinfo=datetime.timezone.utc), 'commenter': 'tjstienstra', 'type': 'User'}, {'comment_id': 984551847, 'comment_body': 'Now it did exactly not fit anymore within the 80 characters', 'comment_created': datetime.datetime(2022, 9, 30, 12, 42, 10, tzinfo=datetime.timezone.utc), 'commenter': 'tjstienstra', 'type': 'User'}, {'comment_id': 984664294, 'comment_body': ""But that's checking the result with the same solution method, no? I guess I mean more do you know these are correct by doing it by hand? Or some other checks. We got some of these wrong with Sudeep's work because we didn't have careful sanity checks."", 'comment_created': datetime.datetime(2022, 9, 30, 14, 37, 16, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 984682980, 'comment_body': ""Overall I do most of the time assume that for checking that I can use at least one level lower API to generate the answer. This means that in case of the PR around `orient_body_fixed` and `orient_space_fixed` that I verified those methods using matrix multiplication in sympy, `orient_axis` (the by hand derivation of the formulas used and a check with the old implementation). As for the joints I've always use `orient_axis` and the velocity theorems to do all computations.\r\n\r\nBut if you like I can try and think of some more sanity checks."", 'comment_created': datetime.datetime(2022, 9, 30, 14, 56, 34, tzinfo=datetime.timezone.utc), 'commenter': 'tjstienstra', 'type': 'User'}, {'comment_id': 984692386, 'comment_body': ""That's sufficient, just as long as you are being careful."", 'comment_created': datetime.datetime(2022, 9, 30, 15, 6, 47, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}]","[{'commit_sha': 'e69a6e9ea6eba3f6e08df141fb0470acb351f079', 'committer_username': 'tjstienstra', 'committer_name': 'Timo Stienstra', 'committer_email': None, 'commit_date': datetime.datetime(2022, 1, 15, 19, 30, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dae7aa4e3ddc79f877d645e5da3cb6a735291f7f', 'committer_username': 'tjstienstra', 'committer_name': 'Timo Stienstra', 'committer_email': None, 'commit_date': datetime.datetime(2022, 1, 15, 19, 30, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd1662c94dccbe551de92dc3ac7292a4832caf6ec', 'committer_username': 'tjstienstra', 'committer_name': 'Timo Stienstra', 'committer_email': None, 'commit_date': datetime.datetime(2022, 1, 15, 19, 30, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '319c79cbe01e8c3d849451f23758ed4fe42c5700', 'committer_username': 'tjstienstra', 'committer_name': 'Timo Stienstra', 'committer_email': None, 'commit_date': datetime.datetime(2022, 1, 15, 19, 30, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5715fb951e8263c86546f890990640962a805329', 'committer_username': 'tjstienstra', 'committer_name': 'Timo Stienstra', 'committer_email': None, 'commit_date': datetime.datetime(2022, 1, 15, 19, 30, 35, tzinfo=datetime.timezone.utc)}]",Timo Stienstra,97806294,,User,,12,,11,5
1064488443,[GSoC] Revert JointAxisMixin,"<!-- Your title above should be a short description of what
was changed. Do not include the issue number in the title. -->

#### References to other Issues or PRs
<!-- If this pull request fixes an issue, write ""Fixes #NNNN"" in that exact
format, e.g. ""Fixes #1234"" (see
https://tinyurl.com/auto-closing for more information). Also, please
write a comment on that issue linking back to this pull request once it is
open. -->


#### Brief description of what is fixed or changed
Reduces the flexibility of the `joint_axis` introduced in #23920, namely the option to provide the `joint_axis` expressed in the `child` body. This feature is removed, because as for `ReferenceFrame.orient_axis` you also ought to supply the rotation axis expressed in the parent. Besides this it is also favorable to keep the code base less complex for future features as implementing constraints. 

#### Other comments
Nothing is put in the release notes, since this PR reduces undocumented redundant functionality of #23920

#### Release Notes

<!-- Write the release notes for this release below between the BEGIN and END
statements. The basic format is a bulleted list with the name of the subpackage
and the release note for this PR. For example:

* solvers
  * Added a new solver for logarithmic equations.

* functions
  * Fixed a bug with log of integers.

or if no release note(s) should be included use:

NO ENTRY

See https://github.com/sympy/sympy/wiki/Writing-Release-Notes for more
information on how to write release notes. The bot will check your release
notes automatically to see if they are formatted correctly. -->

<!-- BEGIN RELEASE NOTES -->
NO ENTRY
<!-- END RELEASE NOTES -->
",True,24080,https://api.github.com/repos/sympy/sympy/pulls/24080,https://github.com/sympy/sympy/pull/24080,closed,18,72,3,1,4,0,2,0,"[{'name': 'physics.mechanics'}, {'name': 'CZI: Codegen/Biomech'}]",2022-09-22 18:00:37+00:00,2022-09-23 07:35:48+00:00,48911.0,13:35:11,[],"[{'commit_sha': 'b5811b0748371d9fc3ca009e02f0d31104e2bb7f', 'committer_username': 'tjstienstra', 'committer_name': 'Timo Stienstra', 'committer_email': None, 'commit_date': datetime.datetime(2022, 1, 15, 19, 30, 35, tzinfo=datetime.timezone.utc)}]",Timo Stienstra,97806294,,User,,12,,11,5
1025350724,[GSoC] Switch joints framework to using intermediate frames,"<!-- Your title above should be a short description of what
was changed. Do not include the issue number in the title. -->

#### References to other Issues or PRs
<!-- If this pull request fixes an issue, write ""Fixes #NNNN"" in that exact
format, e.g. ""Fixes #1234"" (see
https://tinyurl.com/auto-closing for more information). Also, please
write a comment on that issue linking back to this pull request once it is
open. -->


#### Brief description of what is fixed or changed
This PR changes the basic definition of a joint. Instead of using a `parent_axis` in combination with a `child_axis` to determine the intermediate frame and joint axis, it now uses a separate intermediate frame for both the parent and child as well as a separately defined joint axis. This follows mostly a general definition of a mobilizer described in [this paper](https://link.springer.com/article/10.1007/s11071-010-9717-3) by Seth, A., Sherman, M., Eastman, P., & Delp, S.

#### Other comments
This will also make it more easy to implement a `Mobilizer` class, for defining more advanced joints as described in the paper.

This PR will also fix #23913 in the joints part.

#### Release Notes

<!-- Write the release notes for this release below between the BEGIN and END
statements. The basic format is a bulleted list with the name of the subpackage
and the release note for this PR. For example:

* solvers
  * Added a new solver for logarithmic equations.

* functions
  * Fixed a bug with log of integers.

or if no release note(s) should be included use:

NO ENTRY

See https://github.com/sympy/sympy/wiki/Writing-Release-Notes for more
information on how to write release notes. The bot will check your release
notes automatically to see if they are formatted correctly. -->

<!-- BEGIN RELEASE NOTES -->
* physics.mechanics
   * BREAKING: deprecated parent_axis and child_axis arguments for the joint classes
   * Implemented a joint axis in combination with intermediate frames for defining joints
   * BREAKING: replaced parent_joint_pos and child_joint_pos arguments for parent_point and child_point
<!-- END RELEASE NOTES -->
",True,23920,https://api.github.com/repos/sympy/sympy/pulls/23920,https://github.com/sympy/sympy/pull/23920,closed,1289,397,10,26,15,60,3,0,"[{'name': 'physics.mechanics'}, {'name': 'GSoC'}, {'name': 'CZI: Codegen/Biomech'}]",2022-08-12 20:14:29+00:00,2022-09-08 14:05:49+00:00,2310680.0,"26 days, 17:51:20","[{'comment_id': 949245504, 'comment_body': ""Move to separate `else` in try-except block as this line won't be the one throwing the intended `ValueError`."", 'comment_created': datetime.datetime(2022, 8, 18, 14, 52, 31, tzinfo=datetime.timezone.utc), 'commenter': 'brocksam', 'type': 'User'}, {'comment_id': 949246275, 'comment_body': 'Can this method be made part of a mixin class inherited by the appropriate joint subclasses?', 'comment_created': datetime.datetime(2022, 8, 18, 14, 53, 12, tzinfo=datetime.timezone.utc), 'commenter': 'brocksam', 'type': 'User'}, {'comment_id': 949266755, 'comment_body': 'Can we make `theta` and `omega` keyword arguments here? Otherwise it relies on the person reading the documentation having good understanding on `PinJoint`s constructor signature.', 'comment_created': datetime.datetime(2022, 8, 18, 15, 8, 56, tzinfo=datetime.timezone.utc), 'commenter': 'brocksam', 'type': 'User'}, {'comment_id': 950588315, 'comment_body': 'Thank you for the suggestion. Is the `JointAxisMixin` as you would expect? Did leave the `joint_axis` property with the subclasses themselves, so it is more clear in the documentation.', 'comment_created': datetime.datetime(2022, 8, 19, 22, 21, 47, tzinfo=datetime.timezone.utc), 'commenter': 'tjstienstra', 'type': 'User'}, {'comment_id': 954752551, 'comment_body': '@sidhu1012 I thought based on #22304 that this issue would be fixed, but it still fails when using the symengine. Could you give some clarification?', 'comment_created': datetime.datetime(2022, 8, 25, 9, 44, 38, tzinfo=datetime.timezone.utc), 'commenter': 'tjstienstra', 'type': 'User'}, {'comment_id': 954984484, 'comment_body': ""This https://github.com/sympy/sympy/issues/22304#issuecomment-1085461259 says that the issue is fixed, earlier it wasn't sympy's error, I think using latest symengine version should fix this. "", 'comment_created': datetime.datetime(2022, 8, 25, 13, 41, 35, tzinfo=datetime.timezone.utc), 'commenter': 'sidhu1012', 'type': 'User'}, {'comment_id': 955003829, 'comment_body': ""After [this commit](https://github.com/sympy/sympy/pull/23920/commits/30d833b1d3e5a0703ef2d7da6681d23f1fbd75f5) I've introduced Xfail, but before that it was still failing on the latest symengine version (I tested 0.9.2 local)."", 'comment_created': datetime.datetime(2022, 8, 25, 13, 57, 8, tzinfo=datetime.timezone.utc), 'commenter': 'tjstienstra', 'type': 'User'}, {'comment_id': 959545637, 'comment_body': ""Currently the velocities are only set in the body frames not also in the intermediate frames. This means that these intermediate frames can still be translating with respect to their body, which should not be the case.\r\nEither some extra `set_vel`'s should be added or `self.parent_point.set_vel(self.parent.frame, 0)` should be changed to `self.parent_point.set_vel(self.parent_interframe, 0)` (same for the child).\r\n\r\nWhich option would be best?"", 'comment_created': datetime.datetime(2022, 8, 31, 12, 51, 35, tzinfo=datetime.timezone.utc), 'commenter': 'tjstienstra', 'type': 'User'}, {'comment_id': 959548668, 'comment_body': ""Here is a simple experiment:\r\n```py\r\nfrom sympy import pi\r\nfrom sympy.physics.mechanics import Body, PrismaticJoint, ReferenceFrame\r\n\r\nP, C = Body('P'), Body('C')\r\nPint, Cint = ReferenceFrame('Pint'), ReferenceFrame('Cint')\r\nPint.orient_axis(P.frame, P.frame.x, pi)\r\nCint.orient_axis(C.frame, C.frame.y, -pi / 2)\r\njoint = PrismaticJoint('P', P, C, parent_interframe=Pint, child_interframe=Cint,\r\n                       parent_point=P.x, child_point=-C.y, joint_axis=P.z)\r\nP.masscenter.vel(joint.parent_interframe)\r\nValueError: Velocity of point P_masscenter has not been defined in ReferenceFrame Pint\r\n```"", 'comment_created': datetime.datetime(2022, 8, 31, 12, 54, 30, tzinfo=datetime.timezone.utc), 'commenter': 'tjstienstra', 'type': 'User'}, {'comment_id': 963568962, 'comment_body': '```suggestion\r\ne.g. the axis around which the rotation occurs, then this axis can be specified\r\n```', 'comment_created': datetime.datetime(2022, 9, 6, 10, 59, 47, tzinfo=datetime.timezone.utc), 'commenter': 'brocksam', 'type': 'User'}, {'comment_id': 963569722, 'comment_body': '```suggestion\r\nboth bodies. Furthermore, if a joint like the ``PinJoint`` has a specific joint axis,\r\n```', 'comment_created': datetime.datetime(2022, 9, 6, 11, 0, 39, tzinfo=datetime.timezone.utc), 'commenter': 'brocksam', 'type': 'User'}, {'comment_id': 963570595, 'comment_body': '```suggestion\r\nusing the ``joint_axis`` argument. An advantage of this setup is that one can\r\nmore accurately define the transformation from a parent body to a child body.\r\n```', 'comment_created': datetime.datetime(2022, 9, 6, 11, 1, 41, tzinfo=datetime.timezone.utc), 'commenter': 'brocksam', 'type': 'User'}, {'comment_id': 963571414, 'comment_body': '```suggestion\r\nFor example, suppose you want a ``PinJoint`` that rotates the child body around the\r\n```', 'comment_created': datetime.datetime(2022, 9, 6, 11, 2, 42, tzinfo=datetime.timezone.utc), 'commenter': 'brocksam', 'type': 'User'}, {'comment_id': 963572562, 'comment_body': '```suggestion\r\nfor you, then you can still make use of this feature by providing vectors to\r\n```', 'comment_created': datetime.datetime(2022, 9, 6, 11, 4, 7, tzinfo=datetime.timezone.utc), 'commenter': 'brocksam', 'type': 'User'}, {'comment_id': 963572733, 'comment_body': '```suggestion\r\n``parent_interframe`` and ``child_interframe``, which are then oriented such\r\n```', 'comment_created': datetime.datetime(2022, 9, 6, 11, 4, 19, tzinfo=datetime.timezone.utc), 'commenter': 'brocksam', 'type': 'User'}, {'comment_id': 963573169, 'comment_body': '```suggestion\r\ngiven vector:\r\n```', 'comment_created': datetime.datetime(2022, 9, 6, 11, 4, 48, tzinfo=datetime.timezone.utc), 'commenter': 'brocksam', 'type': 'User'}, {'comment_id': 963574933, 'comment_body': '```suggestion\r\nThe argument names for specifying the attachment points of a joint in\r\n``sympy.physics.mechanics`` , i.e. ``parent_joint_pos`` and ``child_joint_pos``,\r\nhave been changed to ``parent_point`` and ``child_point``. This is because these\r\narguments can now also be ``Point`` objects, so they can be exactly the same as\r\nthe ``parent_point`` and ``child_point`` attributes.\r\n```', 'comment_created': datetime.datetime(2022, 9, 6, 11, 6, 58, tzinfo=datetime.timezone.utc), 'commenter': 'brocksam', 'type': 'User'}, {'comment_id': 963577143, 'comment_body': '```suggestion\r\n        vector is provided, then the attachment point is computed by adding the\r\n```', 'comment_created': datetime.datetime(2022, 9, 6, 11, 9, 42, tzinfo=datetime.timezone.utc), 'commenter': 'brocksam', 'type': 'User'}, {'comment_id': 963577408, 'comment_body': '```suggestion\r\n        vector is provided, then the attachment point is computed by adding the\r\n```', 'comment_created': datetime.datetime(2022, 9, 6, 11, 10, tzinfo=datetime.timezone.utc), 'commenter': 'brocksam', 'type': 'User'}, {'comment_id': 963578611, 'comment_body': ""This first sentence isn't clear, possible typo?"", 'comment_created': datetime.datetime(2022, 9, 6, 11, 11, 19, tzinfo=datetime.timezone.utc), 'commenter': 'brocksam', 'type': 'User'}, {'comment_id': 963578731, 'comment_body': ""This first sentence isn't clear, possible typo?"", 'comment_created': datetime.datetime(2022, 9, 6, 11, 11, 28, tzinfo=datetime.timezone.utc), 'commenter': 'brocksam', 'type': 'User'}, {'comment_id': 963579165, 'comment_body': ""This first sentence isn't clear, possible typo?"", 'comment_created': datetime.datetime(2022, 9, 6, 11, 11, 57, tzinfo=datetime.timezone.utc), 'commenter': 'brocksam', 'type': 'User'}, {'comment_id': 963579290, 'comment_body': ""This first sentence isn't clear, possible typo?"", 'comment_created': datetime.datetime(2022, 9, 6, 11, 12, 5, tzinfo=datetime.timezone.utc), 'commenter': 'brocksam', 'type': 'User'}, {'comment_id': 963580959, 'comment_body': '```suggestion\r\n    When providing a vector as the intermediate frame, a new intermediate frame\r\n    is created which aligns its X axis with the provided vector. This is done\r\n    with a single fixed rotation around a rotation axis. This rotation axis is\r\n    determined by taking the cross product of the ``body.x`` axis with the\r\n    provided vector. In the case where the provided vector is in the ``-body.x``\r\n    direction, the rotation is done around the ``body.y`` axis.\r\n```', 'comment_created': datetime.datetime(2022, 9, 6, 11, 13, 58, tzinfo=datetime.timezone.utc), 'commenter': 'brocksam', 'type': 'User'}, {'comment_id': 963585008, 'comment_body': 'would say ""the parent body to the child body""', 'comment_created': datetime.datetime(2022, 9, 6, 11, 18, 46, tzinfo=datetime.timezone.utc), 'commenter': 'tjstienstra', 'type': 'User'}, {'comment_id': 963586125, 'comment_body': ""Should avoid having superfluous code within the `try` block that isn't expected to raise the intended exception to be caught. Move to separate `else` block.\r\n```suggestion\r\n            try:\r\n                ax.to_matrix(frame)\r\n            except ValueError:\r\n                pass\r\n            else:\r\n                ref_frame = frame\r\n                break\r\n```"", 'comment_created': datetime.datetime(2022, 9, 6, 11, 20, 3, tzinfo=datetime.timezone.utc), 'commenter': 'brocksam', 'type': 'User'}, {'comment_id': 963588409, 'comment_body': 'Can this be refracted to remove redundancy?\r\n```suggestion\r\n        if x != 0:\r\n            if y != 0:\r\n                if z != 0:\r\n                    return cross(axis, frame.x)\r\n            if z != 0:\r\n                return frame.y\r\n            return frame.z\r\n    else:\r\n            if y != 0:\r\n                return frame.x\r\n            return frame.y\r\n```', 'comment_created': datetime.datetime(2022, 9, 6, 11, 22, 45, tzinfo=datetime.timezone.utc), 'commenter': 'brocksam', 'type': 'User'}, {'comment_id': 963589718, 'comment_body': '```suggestion\r\n            frame is oriented.\r\n```', 'comment_created': datetime.datetime(2022, 9, 6, 11, 24, 17, tzinfo=datetime.timezone.utc), 'commenter': 'brocksam', 'type': 'User'}, {'comment_id': 963592656, 'comment_body': '```suggestion\r\n        The direction cosine matrix between the given frame and intermediate\r\n        frame is formed using a simple rotation about an axis that is normal to\r\n        both ``align_axis`` and ``frame_axis``. In general, the normal axis is\r\n        formed by crossing the ``frame_axis`` with the ``align_axis``. The\r\n        exception is if the axes are parallel with opposite directions, in which\r\n        case the rotation vector is chosen using the rules in the following table\r\n        with the vectors expressed in the given frame:\r\n```', 'comment_created': datetime.datetime(2022, 9, 6, 11, 27, 35, tzinfo=datetime.timezone.utc), 'commenter': 'brocksam', 'type': 'User'}, {'comment_id': 963595259, 'comment_body': 'Reorder to avoid excess nesting.\r\n```suggestion\r\n        if rotation_axis == Vector(0) or angle != pi:\r\n            return frame\r\n        if angle == pi:\r\n            rotation_axis = Joint._choose_rotation_axis(frame, align_axis)\r\n\r\n        int_frame = ReferenceFrame(frame_name)\r\n        int_frame.orient_axis(frame, rotation_axis, angle)\r\n        int_frame.set_ang_vel(frame, 0 * rotation_axis)\r\n        return int_frame\r\n```', 'comment_created': datetime.datetime(2022, 9, 6, 11, 30, 39, tzinfo=datetime.timezone.utc), 'commenter': 'brocksam', 'type': 'User'}, {'comment_id': 963596640, 'comment_body': ""Use f-strings for consistency with other methods.\r\n```suggestion\r\n            point_name = f'{self._name}_{body.name}_joint'\r\n```"", 'comment_created': datetime.datetime(2022, 9, 6, 11, 32, 15, tzinfo=datetime.timezone.utc), 'commenter': 'brocksam', 'type': 'User'}, {'comment_id': 963598320, 'comment_body': '```suggestion\r\n    parent. The direction cosine matrix between the child interframe and\r\n    parent interframe is formed using a simple rotation about the joint axis.\r\n    The page on the joints framework gives a more detailed explanation of the\r\n    intermediate frames.\r\n```', 'comment_created': datetime.datetime(2022, 9, 6, 11, 34, 5, tzinfo=datetime.timezone.utc), 'commenter': 'brocksam', 'type': 'User'}, {'comment_id': 963598670, 'comment_body': '```suggestion\r\n        vector is provided, then the attachment point is computed by adding the\r\n```', 'comment_created': datetime.datetime(2022, 9, 6, 11, 34, 29, tzinfo=datetime.timezone.utc), 'commenter': 'brocksam', 'type': 'User'}, {'comment_id': 963598826, 'comment_body': '```suggestion\r\n        vector is provided, then the attachment point is computed by adding the\r\n```', 'comment_created': datetime.datetime(2022, 9, 6, 11, 34, 38, tzinfo=datetime.timezone.utc), 'commenter': 'brocksam', 'type': 'User'}, {'comment_id': 963599401, 'comment_body': ""This first sentence doesn't make sense, possible typo?"", 'comment_created': datetime.datetime(2022, 9, 6, 11, 35, 18, tzinfo=datetime.timezone.utc), 'commenter': 'brocksam', 'type': 'User'}, {'comment_id': 963599701, 'comment_body': ""This first sentence doesn't make sense, possible typo?"", 'comment_created': datetime.datetime(2022, 9, 6, 11, 35, 42, tzinfo=datetime.timezone.utc), 'commenter': 'brocksam', 'type': 'User'}, {'comment_id': 963600189, 'comment_body': ""This first sentence doesn't make sense, possible typo?"", 'comment_created': datetime.datetime(2022, 9, 6, 11, 36, 15, tzinfo=datetime.timezone.utc), 'commenter': 'brocksam', 'type': 'User'}, {'comment_id': 963600360, 'comment_body': ""This first sentence doesn't make sense, possible typo?"", 'comment_created': datetime.datetime(2022, 9, 6, 11, 36, 22, tzinfo=datetime.timezone.utc), 'commenter': 'brocksam', 'type': 'User'}, {'comment_id': 963601715, 'comment_body': 'Struggling to see which joint type this is on the diff, assuming `PinJoint`?\r\n```suggestion\r\n        """"""Axis about which the child rotates with respect to the parent.""""""\r\n```', 'comment_created': datetime.datetime(2022, 9, 6, 11, 38, 8, tzinfo=datetime.timezone.utc), 'commenter': 'brocksam', 'type': 'User'}, {'comment_id': 963602974, 'comment_body': 'It should have been: `Interframe of the joint fixed to the parent body, i.e. frame in the parent body with respect to which the joint is formulated.`\r\nHowever I think it could be made clearer by using one of the following:\r\n1. Joint attachment frame of the parent body, i.e. frame fixed to the parent body with respect to which the joint transformation is formulated.\r\n2. Intermediate frame of the parent body with respect to which the joint transformation is formulated.\r\n\r\nWhich one do you think is more clear? Or do you have a better suggestion?', 'comment_created': datetime.datetime(2022, 9, 6, 11, 40, 7, tzinfo=datetime.timezone.utc), 'commenter': 'tjstienstra', 'type': 'User'}, {'comment_id': 963603992, 'comment_body': '```suggestion\r\n    body along the body-fixed joint axis. The location of the joint is defined\r\n    by two points, one in each body, which coincide when the generalized\r\n    coordinate is zero. The direction cosine matrix between the\r\n    parent_interframe and child_interframe is the identity matrix. Therefore, the\r\n    direction cosine matrix between the parent and child frames is fully\r\n    defined by the definition of the intermediate frames. For a detailed\r\n    explanation on the intermediate frames, see the page on the joints\r\n    framework.\r\n```', 'comment_created': datetime.datetime(2022, 9, 6, 11, 42, 9, tzinfo=datetime.timezone.utc), 'commenter': 'brocksam', 'type': 'User'}, {'comment_id': 963604880, 'comment_body': '```suggestion\r\n        vector is provided, then the attachment point is computed by adding the\r\n```', 'comment_created': datetime.datetime(2022, 9, 6, 11, 43, 18, tzinfo=datetime.timezone.utc), 'commenter': 'brocksam', 'type': 'User'}, {'comment_id': 963605092, 'comment_body': '```suggestion\r\n        vector is provided, then the attachment point is computed by adding the\r\n```', 'comment_created': datetime.datetime(2022, 9, 6, 11, 43, 33, tzinfo=datetime.timezone.utc), 'commenter': 'brocksam', 'type': 'User'}, {'comment_id': 963605465, 'comment_body': ""This first sentence doesn't make sense, possible typo?"", 'comment_created': datetime.datetime(2022, 9, 6, 11, 44, 1, tzinfo=datetime.timezone.utc), 'commenter': 'brocksam', 'type': 'User'}, {'comment_id': 963605750, 'comment_body': ""This first sentence doesn't make sense, possible typo?"", 'comment_created': datetime.datetime(2022, 9, 6, 11, 44, 20, tzinfo=datetime.timezone.utc), 'commenter': 'brocksam', 'type': 'User'}, {'comment_id': 963605959, 'comment_body': '```suggestion\r\n        The axis along which the translation occurs. Note that the components\r\n```', 'comment_created': datetime.datetime(2022, 9, 6, 11, 44, 35, tzinfo=datetime.timezone.utc), 'commenter': 'brocksam', 'type': 'User'}, {'comment_id': 963606251, 'comment_body': ""This first sentence doesn't make sense, possible typo?"", 'comment_created': datetime.datetime(2022, 9, 6, 11, 44, 57, tzinfo=datetime.timezone.utc), 'commenter': 'brocksam', 'type': 'User'}, {'comment_id': 963666560, 'comment_body': 'We could also just add a `body.masscenter.set_vel(int_frame, 0)` in the interframe creation method. This would make sure that no joint will make a mistake in this part.', 'comment_created': datetime.datetime(2022, 9, 6, 12, 49, 53, tzinfo=datetime.timezone.utc), 'commenter': 'tjstienstra', 'type': 'User'}, {'comment_id': 963708092, 'comment_body': '```suggestion\r\nThe definition of the joint axis in the ``sympy.physics.mechanics`` has changed.\r\nInstead of using the arguments ``parent_axis`` and ``child_axis`` to\r\nautomatically determine the joint axis and an intermediate reference frame, the\r\njoints now use an intermediate frame argument for both the parent and the child\r\nbody, i.e. ``parent_interframe`` and ``child_interframe``. This means that you\r\ncan now fully define the joint attachment, consisting of a point and frame, for\r\nboth bodies. Furthermore, if a joint like the ``PinJoint`` has a specific joint\r\naxis, e.g. the axis about which the rotation occurs, then this axis can be\r\nspecified using the ``joint_axis`` argument. An advantage of this setup is that\r\none can more accurately define the transformation from the parent body to the\r\nchild body.\r\n```', 'comment_created': datetime.datetime(2022, 9, 6, 13, 27, 10, tzinfo=datetime.timezone.utc), 'commenter': 'brocksam', 'type': 'User'}, {'comment_id': 963714975, 'comment_body': '```suggestion\r\n3\\hat{c}_z$ in the ``child_interframe``. Practically this means that in the case\r\nof the :class:`~.PinJoint`, also shown below, the ``joint_axis`` is the axis of\r\nrotation, with the generalized coordinate :math:`\\theta` as the angle of rotation\r\nand the generalized speed :math:`\\omega` as the angular velocity.\r\n```', 'comment_created': datetime.datetime(2022, 9, 6, 13, 33, 14, tzinfo=datetime.timezone.utc), 'commenter': 'brocksam', 'type': 'User'}, {'comment_id': 963723132, 'comment_body': 'I think the below is much more readable formatting.\r\n```suggestion\r\n        self.child_point.set_pos(\r\n            self.parent_point,\r\n            self.coordinates[0] * self.joint_axis.normalize()\r\n        )\r\n```', 'comment_created': datetime.datetime(2022, 9, 6, 13, 40, 18, tzinfo=datetime.timezone.utc), 'commenter': 'brocksam', 'type': 'User'}, {'comment_id': 963724162, 'comment_body': 'I think the below is much more readable formatting.\r\n```suggestion\r\n        self.child_point.set_vel(\r\n            self.parent.frame,\r\n            self.speeds[0] * self.joint_axis.normalize()\r\n        )\r\n```', 'comment_created': datetime.datetime(2022, 9, 6, 13, 41, 9, tzinfo=datetime.timezone.utc), 'commenter': 'brocksam', 'type': 'User'}, {'comment_id': 963724849, 'comment_body': 'I think the below is much more readable formatting.\r\n```suggestion\r\n        self.child.masscenter.set_vel(\r\n            self.parent.frame,\r\n            self.speeds[0] * self.joint_axis.normalize()\r\n        )\r\n```', 'comment_created': datetime.datetime(2022, 9, 6, 13, 41, 41, tzinfo=datetime.timezone.utc), 'commenter': 'brocksam', 'type': 'User'}, {'comment_id': 963734036, 'comment_body': '> We could also just add a `body.masscenter.set_vel(int_frame, 0)` in the interframe creation method. This would make sure that no joint will make a mistake in this part.\r\n\r\nI think this is my preferred option as this does the setting as early as possible, which is generally a sensible approach.', 'comment_created': datetime.datetime(2022, 9, 6, 13, 49, 13, tzinfo=datetime.timezone.utc), 'commenter': 'brocksam', 'type': 'User'}, {'comment_id': 963739514, 'comment_body': 'I think #2 is clearest.', 'comment_created': datetime.datetime(2022, 9, 6, 13, 53, 45, tzinfo=datetime.timezone.utc), 'commenter': 'brocksam', 'type': 'User'}, {'comment_id': 963796966, 'comment_body': '`rotation_axis == Vector(0) and angle == 0` seems more correct to me.', 'comment_created': datetime.datetime(2022, 9, 6, 14, 41, 32, tzinfo=datetime.timezone.utc), 'commenter': 'tjstienstra', 'type': 'User'}, {'comment_id': 963821284, 'comment_body': ""I'll make a separate variable `axis = self.joint_axis.normalize()`. Makes it more readable and keeps all set commands on a single line."", 'comment_created': datetime.datetime(2022, 9, 6, 15, 1, 26, tzinfo=datetime.timezone.utc), 'commenter': 'tjstienstra', 'type': 'User'}, {'comment_id': 963889215, 'comment_body': 'Has this been left in by error?', 'comment_created': datetime.datetime(2022, 9, 6, 15, 56, 14, tzinfo=datetime.timezone.utc), 'commenter': 'brocksam', 'type': 'User'}, {'comment_id': 963899603, 'comment_body': 'Yes, that is my method of quickly testing a test. Will remove it.', 'comment_created': datetime.datetime(2022, 9, 6, 16, 3, 42, tzinfo=datetime.timezone.utc), 'commenter': 'tjstienstra', 'type': 'User'}, {'comment_id': 964778265, 'comment_body': '@sidhu1012 It seems it is still not fixed see [#22304 comment](https://github.com/sympy/sympy/issues/22304#issuecomment-1239321187)', 'comment_created': datetime.datetime(2022, 9, 7, 12, 26, 14, tzinfo=datetime.timezone.utc), 'commenter': 'tjstienstra', 'type': 'User'}]","[{'commit_sha': '9b751feaf5e7156bbb8774a7b7ffc809948861b4', 'committer_username': 'tjstienstra', 'committer_name': 'Timo Stienstra', 'committer_email': None, 'commit_date': datetime.datetime(2022, 1, 15, 19, 30, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '00fd39d12f9b19b52fd56db66a8eca450b80f35a', 'committer_username': 'tjstienstra', 'committer_name': 'Timo Stienstra', 'committer_email': None, 'commit_date': datetime.datetime(2022, 1, 15, 19, 30, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7c199e306648513c13c9b5c5b5fad06e5f1c3020', 'committer_username': 'tjstienstra', 'committer_name': 'Timo Stienstra', 'committer_email': None, 'commit_date': datetime.datetime(2022, 1, 15, 19, 30, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e701e822843651c5c8a2591eb6b9229d36e68dab', 'committer_username': 'tjstienstra', 'committer_name': 'Timo Stienstra', 'committer_email': None, 'commit_date': datetime.datetime(2022, 1, 15, 19, 30, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '06c66d6c69c6fe7955854a615956242d680f6b9a', 'committer_username': 'tjstienstra', 'committer_name': 'Timo Stienstra', 'committer_email': None, 'commit_date': datetime.datetime(2022, 1, 15, 19, 30, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e7896f45e33dc5d5e11bd99f1fa4e11fe25096a4', 'committer_username': 'tjstienstra', 'committer_name': 'Timo Stienstra', 'committer_email': None, 'commit_date': datetime.datetime(2022, 1, 15, 19, 30, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '87190211d89e356a90eb4013672e5c35195a4bef', 'committer_username': 'tjstienstra', 'committer_name': 'Timo Stienstra', 'committer_email': None, 'commit_date': datetime.datetime(2022, 1, 15, 19, 30, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd49d93aa5eba0af3b470e7b49667596a80cb45e5', 'committer_username': 'tjstienstra', 'committer_name': 'Timo Stienstra', 'committer_email': None, 'commit_date': datetime.datetime(2022, 1, 15, 19, 30, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1cff58ef841754cb9f405b4a039721cc10c9a280', 'committer_username': 'tjstienstra', 'committer_name': 'Timo Stienstra', 'committer_email': None, 'commit_date': datetime.datetime(2022, 1, 15, 19, 30, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '60f248d33ad325b83e82612c1b71691e0309ebcc', 'committer_username': 'tjstienstra', 'committer_name': 'Timo Stienstra', 'committer_email': None, 'commit_date': datetime.datetime(2022, 1, 15, 19, 30, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '76b9f68ce3ca73a1983f65bbee74332512d11f06', 'committer_username': 'tjstienstra', 'committer_name': 'Timo Stienstra', 'committer_email': None, 'commit_date': datetime.datetime(2022, 1, 15, 19, 30, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5b90f7d36b8291b61391d457bfad94648af8afe3', 'committer_username': 'tjstienstra', 'committer_name': 'Timo Stienstra', 'committer_email': None, 'commit_date': datetime.datetime(2022, 1, 15, 19, 30, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '039d8bc29c6783b28ec962e7be94171cacce2127', 'committer_username': 'tjstienstra', 'committer_name': 'Timo Stienstra', 'committer_email': None, 'commit_date': datetime.datetime(2022, 1, 15, 19, 30, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '73211d43d0f734ec4330faac5878b299f9b2ca79', 'committer_username': 'tjstienstra', 'committer_name': 'Timo Stienstra', 'committer_email': None, 'commit_date': datetime.datetime(2022, 1, 15, 19, 30, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '30d833b1d3e5a0703ef2d7da6681d23f1fbd75f5', 'committer_username': 'tjstienstra', 'committer_name': 'Timo Stienstra', 'committer_email': None, 'commit_date': datetime.datetime(2022, 1, 15, 19, 30, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c699c98401d2f79fb5c9603eb4b70033d3649752', 'committer_username': 'tjstienstra', 'committer_name': 'Timo Stienstra', 'committer_email': None, 'commit_date': datetime.datetime(2022, 1, 15, 19, 30, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '22d16d07834d609de1dcb7fad4e446df339025d5', 'committer_username': 'tjstienstra', 'committer_name': 'Timo Stienstra', 'committer_email': None, 'commit_date': datetime.datetime(2022, 1, 15, 19, 30, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c4ab184611d73bf02c95bfedbccab83358af8030', 'committer_username': 'tjstienstra', 'committer_name': 'Timo Stienstra', 'committer_email': None, 'commit_date': datetime.datetime(2022, 1, 15, 19, 30, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '36de400a74f5d25a91e4c25e917436329a997a20', 'committer_username': 'tjstienstra', 'committer_name': 'Timo Stienstra', 'committer_email': None, 'commit_date': datetime.datetime(2022, 1, 15, 19, 30, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ccd510d33e466b3015776511f49eec53fe13a89c', 'committer_username': 'tjstienstra', 'committer_name': 'Timo Stienstra', 'committer_email': None, 'commit_date': datetime.datetime(2022, 1, 15, 19, 30, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4e40fb4fa3d55756eabd1318f937e25368f22324', 'committer_username': 'tjstienstra', 'committer_name': 'Timo Stienstra', 'committer_email': None, 'commit_date': datetime.datetime(2022, 1, 15, 19, 30, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b9258e3d66786155557103ec29977ce8fc07f60e', 'committer_username': 'tjstienstra', 'committer_name': 'Timo Stienstra', 'committer_email': None, 'commit_date': datetime.datetime(2022, 1, 15, 19, 30, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cca3fe83a47f39e0d49afe38ac24703cd6e9e6e8', 'committer_username': 'tjstienstra', 'committer_name': 'Timo Stienstra', 'committer_email': None, 'commit_date': datetime.datetime(2022, 1, 15, 19, 30, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd28a2ac24491dd16ac1e6d20baf6f06bfe2b36ad', 'committer_username': 'tjstienstra', 'committer_name': 'Timo Stienstra', 'committer_email': None, 'commit_date': datetime.datetime(2022, 1, 15, 19, 30, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7afba2b2dff3990030023442f0af6a30117bd729', 'committer_username': 'tjstienstra', 'committer_name': 'Timo Stienstra', 'committer_email': None, 'commit_date': datetime.datetime(2022, 1, 15, 19, 30, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b90d8a4f7b4be976e7ce1bb785798bfd5d891ace', 'committer_username': 'tjstienstra', 'committer_name': 'Timo Stienstra', 'committer_email': None, 'commit_date': datetime.datetime(2022, 1, 15, 19, 30, 35, tzinfo=datetime.timezone.utc)}]",Timo Stienstra,97806294,,User,,12,,11,5
1067058455,Improve efficiency of orient body fixed and space fixed,"<!-- Your title above should be a short description of what
was changed. Do not include the issue number in the title. -->

#### References to other Issues or PRs
<!-- If this pull request fixes an issue, write ""Fixes #NNNN"" in that exact
format, e.g. ""Fixes #1234"" (see
https://tinyurl.com/auto-closing for more information). Also, please
write a comment on that issue linking back to this pull request once it is
open. -->


#### Brief description of what is fixed or changed
Changed the computation behind `ReferenceFrame.orient_body_fixed` and `ReferenceFrame.orient_space_fixed` to be more efficient. It now directly computes the simplified angular velocity instead of solving the kinematic equations and simplifying those. Another advantage is that it makes these methods compatible with the symengine (see #22304).
Lastly, there have been added a few more tests.

#### Other comments


#### Release Notes

<!-- Write the release notes for this release below between the BEGIN and END
statements. The basic format is a bulleted list with the name of the subpackage
and the release note for this PR. For example:

* solvers
  * Added a new solver for logarithmic equations.

* functions
  * Fixed a bug with log of integers.

or if no release note(s) should be included use:

NO ENTRY

See https://github.com/sympy/sympy/wiki/Writing-Release-Notes for more
information on how to write release notes. The bot will check your release
notes automatically to see if they are formatted correctly. -->

<!-- BEGIN RELEASE NOTES -->
NO ENTRY
<!-- END RELEASE NOTES -->
",True,24085,https://api.github.com/repos/sympy/sympy/pulls/24085,https://github.com/sympy/sympy/pull/24085,closed,156,97,3,3,7,16,1,0,[{'name': 'CZI: Codegen/Biomech'}],2022-09-26 12:16:53+00:00,2022-09-28 11:34:53+00:00,170280.0,"1 day, 23:18:00","[{'comment_id': 979996343, 'comment_body': '```suggestion\r\n    assert B.ang_vel_in(A).to_matrix(B) == Matrix([\r\n        [-sin(q3) * cos(q2) * u1 + cos(q3) * u2],\r\n        [sin(q2) * u1 + u3],\r\n        [sin(q3) * u2 + cos(q2) * cos(q3) * u1]])\r\n```', 'comment_created': datetime.datetime(2022, 9, 26, 12, 53, 36, tzinfo=datetime.timezone.utc), 'commenter': 'brocksam', 'type': 'User'}, {'comment_id': 979996960, 'comment_body': '```suggestion\r\n    assert B.ang_vel_in(A).to_matrix(B) == Matrix([\r\n        [cos(c2) * u1 + u3],\r\n        [-sin(c2) * cos(q3) * u1],\r\n        [sin(c2) * sin(q3) * u1]])\r\n```', 'comment_created': datetime.datetime(2022, 9, 26, 12, 54, 11, tzinfo=datetime.timezone.utc), 'commenter': 'brocksam', 'type': 'User'}, {'comment_id': 979997637, 'comment_body': '```suggestion\r\n    assert B.ang_vel_in(A).to_matrix(B) == Matrix([\r\n        [cos(c2) * u1 + u3],\r\n        [-sin(c2) * cos(q3) * u1],\r\n        [sin(c2) * sin(q3) * u1]])\r\n```', 'comment_created': datetime.datetime(2022, 9, 26, 12, 54, 52, tzinfo=datetime.timezone.utc), 'commenter': 'brocksam', 'type': 'User'}, {'comment_id': 979997861, 'comment_body': '```suggestion\r\n    assert B.ang_vel_in(A).to_matrix(B) == Matrix([\r\n        [-sin(q3) * cos(q2) * u1 + cos(q3) * u2],\r\n        [sin(q2) * u1 + u3],\r\n        [sin(q3) * u2 + cos(q2) * cos(q3) * u1]])\r\n```', 'comment_created': datetime.datetime(2022, 9, 26, 12, 55, 5, tzinfo=datetime.timezone.utc), 'commenter': 'brocksam', 'type': 'User'}, {'comment_id': 979999850, 'comment_body': ""I'm not a fan of these mid-method imports. They are a symptom of poor package organisation. But I assume this is absolutely necessary in this case to avoid a circular import?"", 'comment_created': datetime.datetime(2022, 9, 26, 12, 57, 2, tzinfo=datetime.timezone.utc), 'commenter': 'brocksam', 'type': 'User'}, {'comment_id': 980004379, 'comment_body': ""Could rewrite as suggested below, but I'm not sure whether this improves clarity.\r\n```suggestion\r\n        rot_matrices = (self._rot(int(order), amount) \r\n                        for (order, amount) in zip(rot_order, amounts))\r\n        self._dcm(parent, sum(rot_matrices))\r\n```"", 'comment_created': datetime.datetime(2022, 9, 26, 13, 1, 26, tzinfo=datetime.timezone.utc), 'commenter': 'brocksam', 'type': 'User'}, {'comment_id': 980007503, 'comment_body': 'Has this been left in by accident?', 'comment_created': datetime.datetime(2022, 9, 26, 13, 4, 23, tzinfo=datetime.timezone.utc), 'commenter': 'brocksam', 'type': 'User'}, {'comment_id': 980009334, 'comment_body': ""Okay, I see `rot_matrices` is actually used elsewhere, so using a generator comprehension here won't be useful as it'll be consumed. Casting to a `tuple` or using a list comprehension instead would also work if you prefer the sentiment of the above."", 'comment_created': datetime.datetime(2022, 9, 26, 13, 5, 37, tzinfo=datetime.timezone.utc), 'commenter': 'brocksam', 'type': 'User'}, {'comment_id': 980009977, 'comment_body': 'Has this been left in by accident?', 'comment_created': datetime.datetime(2022, 9, 26, 13, 5, 55, tzinfo=datetime.timezone.utc), 'commenter': 'brocksam', 'type': 'User'}, {'comment_id': 980013497, 'comment_body': 'CI error message is suggesting that this can be amended to\r\n```suggestion\r\nfrom sympy.core.backend import (diff, expand, sin, cos, sympify, eye,\r\n```', 'comment_created': datetime.datetime(2022, 9, 26, 13, 8, 7, tzinfo=datetime.timezone.utc), 'commenter': 'brocksam', 'type': 'User'}, {'comment_id': 980030696, 'comment_body': 'Yep, circular import problem we import `ReferenceFrame` in `functions.py`. Can move it to the top of the function, is a bit nicer in my opinion.', 'comment_created': datetime.datetime(2022, 9, 26, 13, 22, 50, tzinfo=datetime.timezone.utc), 'commenter': 'tjstienstra', 'type': 'User'}, {'comment_id': 980037714, 'comment_body': 'Yeah this can be done, kept it currently like this, because I thought it would improve readability, but I can also change it to a list comprehension.', 'comment_created': datetime.datetime(2022, 9, 26, 13, 28, 23, tzinfo=datetime.timezone.utc), 'commenter': 'tjstienstra', 'type': 'User'}, {'comment_id': 980038462, 'comment_body': 'See [this comment](https://github.com/sympy/sympy/pull/24085#issuecomment-1257951598)', 'comment_created': datetime.datetime(2022, 9, 26, 13, 29, tzinfo=datetime.timezone.utc), 'commenter': 'tjstienstra', 'type': 'User'}, {'comment_id': 980039176, 'comment_body': 'Yeah saw it and fixed it with a force push.', 'comment_created': datetime.datetime(2022, 9, 26, 13, 29, 38, tzinfo=datetime.timezone.utc), 'commenter': 'tjstienstra', 'type': 'User'}, {'comment_id': 980045488, 'comment_body': 'See [this comment](https://github.com/sympy/sympy/pull/24085#issuecomment-1257951598)', 'comment_created': datetime.datetime(2022, 9, 26, 13, 35, 17, tzinfo=datetime.timezone.utc), 'commenter': 'tjstienstra', 'type': 'User'}, {'comment_id': 980989965, 'comment_body': 'This is a common issue in SymPy and this is the required solution (other than breaking backwards compat of module layout).', 'comment_created': datetime.datetime(2022, 9, 27, 9, 18, 47, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}]","[{'commit_sha': 'cadcbea8655e322172ddfda834d9ffee2a8a096b', 'committer_username': 'tjstienstra', 'committer_name': 'Timo Stienstra', 'committer_email': None, 'commit_date': datetime.datetime(2022, 1, 15, 19, 30, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a73b4471ebb1801a2d20771e3049a63603cf5dc6', 'committer_username': 'tjstienstra', 'committer_name': 'Timo Stienstra', 'committer_email': None, 'commit_date': datetime.datetime(2022, 1, 15, 19, 30, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e56f0581c91100450f08902a3359dfc510d2913f', 'committer_username': 'tjstienstra', 'committer_name': 'Timo Stienstra', 'committer_email': None, 'commit_date': datetime.datetime(2022, 1, 15, 19, 30, 35, tzinfo=datetime.timezone.utc)}]",Timo Stienstra,97806294,,User,,12,,11,5

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
640534,sympy,sympy/sympy,Python,4363,12693,293,1320,58674,5120,14,716,"[{'id': 1797716671, 'number': 26420, 'closed': datetime.datetime(2024, 3, 30, 8, 11, 59, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 3, 29, 10, 22, 5, tzinfo=datetime.timezone.utc), 'time_taken': 78594.0, 'time_delta': '21:49:54', 'additions': 5, 'deletions': 5, 'state': 'closed'}, {'id': 1780033074, 'number': 26374, 'closed': datetime.datetime(2024, 3, 29, 11, 21, 35, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 3, 19, 14, 29, 12, tzinfo=datetime.timezone.utc), 'time_taken': 852743.0, 'time_delta': '9 days, 20:52:23', 'additions': 138, 'deletions': 14, 'state': 'closed'}, {'id': 1762698796, 'number': 26325, 'closed': datetime.datetime(2024, 3, 19, 14, 29, 56, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 3, 8, 10, 17, 23, tzinfo=datetime.timezone.utc), 'time_taken': 965553.0, 'time_delta': '11 days, 4:12:33', 'additions': 153, 'deletions': 28, 'state': 'closed'}, {'id': 1758818676, 'number': 26315, 'closed': datetime.datetime(2024, 3, 6, 18, 28, 20, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 3, 6, 12, 30, 54, tzinfo=datetime.timezone.utc), 'time_taken': 21446.0, 'time_delta': '5:57:26', 'additions': 4, 'deletions': 4, 'state': 'closed'}, {'id': 1743484711, 'number': 26277, 'closed': datetime.datetime(2024, 3, 3, 16, 53, 58, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 2, 26, 14, 0, 6, tzinfo=datetime.timezone.utc), 'time_taken': 528832.0, 'time_delta': '6 days, 2:53:52', 'additions': 31, 'deletions': 0, 'state': 'closed'}, {'id': 1711655687, 'number': 26179, 'closed': datetime.datetime(2024, 2, 6, 9, 14, 59, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 2, 5, 13, 16, 43, tzinfo=datetime.timezone.utc), 'time_taken': 71896.0, 'time_delta': '19:58:16', 'additions': 301, 'deletions': 151, 'state': 'closed'}, {'id': 1523189372, 'number': 25708, 'closed': datetime.datetime(2023, 9, 20, 17, 52, 35, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 9, 20, 14, 6, 8, tzinfo=datetime.timezone.utc), 'time_taken': 13587.0, 'time_delta': '3:46:27', 'additions': 20, 'deletions': 15, 'state': 'closed'}, {'id': 1521876535, 'number': 25702, 'closed': datetime.datetime(2024, 2, 3, 0, 19, 28, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 9, 19, 19, 27, 40, tzinfo=datetime.timezone.utc), 'time_taken': 11767908.0, 'time_delta': '136 days, 4:51:48', 'additions': 784, 'deletions': 1747, 'state': 'closed'}, {'id': 1482532208, 'number': 25560, 'closed': datetime.datetime(2023, 11, 29, 10, 41, 48, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 8, 21, 9, 35, 32, tzinfo=datetime.timezone.utc), 'time_taken': 8643976.0, 'time_delta': '100 days, 1:06:16', 'additions': 1288, 'deletions': 1165, 'state': 'closed'}, {'id': 1472729136, 'number': 25500, 'closed': datetime.datetime(2023, 8, 12, 8, 55, 4, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 8, 12, 8, 7, 55, tzinfo=datetime.timezone.utc), 'time_taken': 2829.0, 'time_delta': '0:47:09', 'additions': 13, 'deletions': 13, 'state': 'closed'}, {'id': 1466894087, 'number': 25481, 'closed': datetime.datetime(2023, 8, 8, 14, 35, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 8, 8, 13, 23, 28, tzinfo=datetime.timezone.utc), 'time_taken': 4292.0, 'time_delta': '1:11:32', 'additions': 20, 'deletions': 13, 'state': 'closed'}, {'id': 1428931357, 'number': 25353, 'closed': datetime.datetime(2023, 8, 14, 11, 2, 4, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 7, 11, 7, 56, 35, tzinfo=datetime.timezone.utc), 'time_taken': 2948729.0, 'time_delta': '34 days, 3:05:29', 'additions': 43, 'deletions': 9, 'state': 'closed'}, {'id': 1382698456, 'number': 25212, 'closed': datetime.datetime(2023, 6, 9, 8, 50, 37, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 6, 7, 13, 31, 39, tzinfo=datetime.timezone.utc), 'time_taken': 155938.0, 'time_delta': '1 day, 19:18:58', 'additions': 85, 'deletions': 29, 'state': 'closed'}, {'id': 1367169573, 'number': 25179, 'closed': datetime.datetime(2023, 6, 15, 8, 48, 53, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 5, 27, 8, 58, 7, tzinfo=datetime.timezone.utc), 'time_taken': 1641046.0, 'time_delta': '18 days, 23:50:46', 'additions': 330, 'deletions': 269, 'state': 'closed'}, {'id': 1350294637, 'number': 25144, 'closed': datetime.datetime(2023, 5, 26, 11, 38, 10, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 5, 15, 7, 56, 58, tzinfo=datetime.timezone.utc), 'time_taken': 963672.0, 'time_delta': '11 days, 3:41:12', 'additions': 79, 'deletions': 12, 'state': 'closed'}, {'id': 1336369798, 'number': 25102, 'closed': datetime.datetime(2023, 5, 3, 17, 5, 36, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 5, 3, 9, 21, 3, tzinfo=datetime.timezone.utc), 'time_taken': 27873.0, 'time_delta': '7:44:33', 'additions': 14, 'deletions': 0, 'state': 'closed'}, {'id': 1287118657, 'number': 24964, 'closed': datetime.datetime(2023, 3, 23, 10, 55, 4, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 3, 23, 10, 1, 33, tzinfo=datetime.timezone.utc), 'time_taken': 3211.0, 'time_delta': '0:53:31', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 1287020342, 'number': 24962, 'closed': datetime.datetime(2023, 4, 6, 10, 53, 24, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 3, 23, 8, 50, 4, tzinfo=datetime.timezone.utc), 'time_taken': 1217000.0, 'time_delta': '14 days, 2:03:20', 'additions': 1689, 'deletions': 2, 'state': 'closed'}, {'id': 1279987236, 'number': 24924, 'closed': datetime.datetime(2023, 3, 22, 9, 36, 18, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 3, 17, 10, 20, 13, tzinfo=datetime.timezone.utc), 'time_taken': 429365.0, 'time_delta': '4 days, 23:16:05', 'additions': 328, 'deletions': 61, 'state': 'closed'}, {'id': 1277065957, 'number': 24916, 'closed': None, 'created': datetime.datetime(2023, 3, 15, 15, 35, 5, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 130, 'deletions': 33, 'state': 'open'}, {'id': 1272185657, 'number': 24905, 'closed': datetime.datetime(2023, 3, 15, 10, 37, 25, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 3, 12, 0, 18, 13, tzinfo=datetime.timezone.utc), 'time_taken': 296352.0, 'time_delta': '3 days, 10:19:12', 'additions': 199, 'deletions': 19, 'state': 'closed'}, {'id': 1271293274, 'number': 24890, 'closed': datetime.datetime(2023, 3, 11, 6, 49, 1, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 3, 10, 15, 4, 39, tzinfo=datetime.timezone.utc), 'time_taken': 56662.0, 'time_delta': '15:44:22', 'additions': 29, 'deletions': 3, 'state': 'closed'}, {'id': 1271103771, 'number': 24889, 'closed': datetime.datetime(2023, 3, 16, 17, 53, 24, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 3, 10, 12, 34, 31, tzinfo=datetime.timezone.utc), 'time_taken': 537533.0, 'time_delta': '6 days, 5:18:53', 'additions': 536, 'deletions': 311, 'state': 'closed'}, {'id': 1270289567, 'number': 24886, 'closed': None, 'created': datetime.datetime(2023, 3, 9, 20, 47, 49, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 23, 'deletions': 6, 'state': 'open'}, {'id': 1264983222, 'number': 24866, 'closed': datetime.datetime(2023, 3, 6, 23, 17, 38, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 3, 6, 18, 22, 2, tzinfo=datetime.timezone.utc), 'time_taken': 17736.0, 'time_delta': '4:55:36', 'additions': 12, 'deletions': 2, 'state': 'closed'}, {'id': 1264789917, 'number': 24865, 'closed': datetime.datetime(2023, 3, 6, 19, 44, 58, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 3, 6, 16, 15, 24, tzinfo=datetime.timezone.utc), 'time_taken': 12574.0, 'time_delta': '3:29:34', 'additions': 45, 'deletions': 0, 'state': 'closed'}, {'id': 1264588670, 'number': 24863, 'closed': datetime.datetime(2023, 3, 6, 16, 10, 11, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 3, 6, 14, 25, 51, tzinfo=datetime.timezone.utc), 'time_taken': 6260.0, 'time_delta': '1:44:20', 'additions': 10, 'deletions': 0, 'state': 'closed'}, {'id': 1260888145, 'number': 24830, 'closed': datetime.datetime(2023, 3, 9, 19, 40, 6, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 3, 2, 18, 29, 13, tzinfo=datetime.timezone.utc), 'time_taken': 609053.0, 'time_delta': '7 days, 1:10:53', 'additions': 387, 'deletions': 245, 'state': 'closed'}, {'id': 1256847017, 'number': 24822, 'closed': datetime.datetime(2023, 2, 28, 18, 2, 9, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 2, 28, 10, 18, 59, tzinfo=datetime.timezone.utc), 'time_taken': 27790.0, 'time_delta': '7:43:10', 'additions': 48, 'deletions': 36, 'state': 'closed'}, {'id': 1254330628, 'number': 24792, 'closed': datetime.datetime(2023, 3, 7, 9, 31, 41, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 2, 25, 22, 12, 27, tzinfo=datetime.timezone.utc), 'time_taken': 818354.0, 'time_delta': '9 days, 11:19:14', 'additions': 3, 'deletions': 1, 'state': 'closed'}, {'id': 1250577230, 'number': 24763, 'closed': datetime.datetime(2023, 3, 2, 8, 32, 49, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 2, 22, 18, 33, 55, tzinfo=datetime.timezone.utc), 'time_taken': 655134.0, 'time_delta': '7 days, 13:58:54', 'additions': 193, 'deletions': 177, 'state': 'closed'}, {'id': 1247149257, 'number': 24744, 'closed': datetime.datetime(2023, 2, 21, 11, 44, 11, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 2, 20, 11, 31, 31, tzinfo=datetime.timezone.utc), 'time_taken': 87160.0, 'time_delta': '1 day, 0:12:40', 'additions': 5787, 'deletions': 1543, 'state': 'closed'}, {'id': 1243977736, 'number': 24731, 'closed': datetime.datetime(2023, 2, 28, 9, 44, 42, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 2, 16, 16, 23, 8, tzinfo=datetime.timezone.utc), 'time_taken': 1012894.0, 'time_delta': '11 days, 17:21:34', 'additions': 1891, 'deletions': 98, 'state': 'closed'}, {'id': 1241874198, 'number': 24722, 'closed': datetime.datetime(2023, 2, 20, 11, 29, 39, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 2, 15, 10, 38, 20, tzinfo=datetime.timezone.utc), 'time_taken': 435079.0, 'time_delta': '5 days, 0:51:19', 'additions': 13, 'deletions': 43, 'state': 'closed'}, {'id': 1241845296, 'number': 24721, 'closed': datetime.datetime(2023, 2, 20, 11, 28, 34, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 2, 15, 10, 15, 34, tzinfo=datetime.timezone.utc), 'time_taken': 436380.0, 'time_delta': '5 days, 1:13:00', 'additions': 18, 'deletions': 6, 'state': 'closed'}, {'id': 1236543678, 'number': 24699, 'closed': datetime.datetime(2023, 2, 14, 10, 19, 28, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 2, 10, 11, 31, 5, tzinfo=datetime.timezone.utc), 'time_taken': 341303.0, 'time_delta': '3 days, 22:48:23', 'additions': 186, 'deletions': 182, 'state': 'closed'}, {'id': 1224496822, 'number': 24641, 'closed': datetime.datetime(2023, 2, 3, 15, 44, 15, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 2, 1, 8, 43, 23, tzinfo=datetime.timezone.utc), 'time_taken': 198052.0, 'time_delta': '2 days, 7:00:52', 'additions': 322, 'deletions': 65, 'state': 'closed'}, {'id': 1223693935, 'number': 24636, 'closed': datetime.datetime(2023, 2, 1, 8, 25, 1, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 1, 31, 17, 56, 27, tzinfo=datetime.timezone.utc), 'time_taken': 52114.0, 'time_delta': '14:28:34', 'additions': 4943, 'deletions': 3085, 'state': 'closed'}, {'id': 1223681298, 'number': 24635, 'closed': datetime.datetime(2023, 1, 31, 17, 51, 22, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 1, 31, 17, 45, 33, tzinfo=datetime.timezone.utc), 'time_taken': 349.0, 'time_delta': '0:05:49', 'additions': 4943, 'deletions': 3084, 'state': 'closed'}, {'id': 1216300751, 'number': 24589, 'closed': datetime.datetime(2023, 1, 25, 13, 23, 15, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 1, 25, 9, 48, 34, tzinfo=datetime.timezone.utc), 'time_taken': 12881.0, 'time_delta': '3:34:41', 'additions': 17, 'deletions': 3, 'state': 'closed'}, {'id': 1216255996, 'number': 24588, 'closed': datetime.datetime(2023, 1, 31, 16, 11, 39, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 1, 25, 9, 12, 21, tzinfo=datetime.timezone.utc), 'time_taken': 543558.0, 'time_delta': '6 days, 6:59:18', 'additions': 409, 'deletions': 178, 'state': 'closed'}, {'id': 1209801140, 'number': 24550, 'closed': datetime.datetime(2023, 1, 30, 9, 59, 38, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 1, 19, 10, 26, 37, tzinfo=datetime.timezone.utc), 'time_taken': 948781.0, 'time_delta': '10 days, 23:33:01', 'additions': 190, 'deletions': 130, 'state': 'closed'}, {'id': 1196385143, 'number': 24515, 'closed': datetime.datetime(2023, 1, 13, 12, 16, 51, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 1, 13, 8, 45, 12, tzinfo=datetime.timezone.utc), 'time_taken': 12699.0, 'time_delta': '3:31:39', 'additions': 5077, 'deletions': 91256, 'state': 'closed'}, {'id': 1192577527, 'number': 24491, 'closed': datetime.datetime(2023, 1, 13, 8, 42, 20, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 1, 10, 15, 48, 24, tzinfo=datetime.timezone.utc), 'time_taken': 233636.0, 'time_delta': '2 days, 16:53:56', 'additions': 4959, 'deletions': 90855, 'state': 'closed'}, {'id': 1192554406, 'number': 24490, 'closed': datetime.datetime(2023, 1, 10, 15, 46, 34, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 1, 10, 15, 30, 48, tzinfo=datetime.timezone.utc), 'time_taken': 946.0, 'time_delta': '0:15:46', 'additions': 4902, 'deletions': 90755, 'state': 'closed'}, {'id': 1117989322, 'number': 24242, 'closed': datetime.datetime(2022, 11, 10, 18, 14, 25, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 11, 10, 16, 32, 37, tzinfo=datetime.timezone.utc), 'time_taken': 6108.0, 'time_delta': '1:41:48', 'additions': 7, 'deletions': 5, 'state': 'closed'}, {'id': 1114489703, 'number': 24238, 'closed': datetime.datetime(2023, 1, 19, 9, 13, 31, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 11, 8, 14, 14, 51, tzinfo=datetime.timezone.utc), 'time_taken': 6202720.0, 'time_delta': '71 days, 18:58:40', 'additions': 450, 'deletions': 368, 'state': 'closed'}, {'id': 1114134689, 'number': 24234, 'closed': datetime.datetime(2023, 9, 1, 8, 34, 33, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 11, 8, 10, 14, 49, tzinfo=datetime.timezone.utc), 'time_taken': 25654784.0, 'time_delta': '296 days, 22:19:44', 'additions': 3308, 'deletions': 882, 'state': 'closed'}, {'id': 1114127498, 'number': 24233, 'closed': datetime.datetime(2022, 11, 8, 10, 10, 55, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 11, 8, 10, 10, 28, tzinfo=datetime.timezone.utc), 'time_taken': 27.0, 'time_delta': '0:00:27', 'additions': 18, 'deletions': 0, 'state': 'closed'}, {'id': 1109763568, 'number': 24214, 'closed': datetime.datetime(2022, 11, 3, 20, 3, 33, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 11, 3, 15, 26, 41, tzinfo=datetime.timezone.utc), 'time_taken': 16612.0, 'time_delta': '4:36:52', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 1103100268, 'number': 24192, 'closed': datetime.datetime(2022, 11, 2, 8, 59, 56, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 10, 28, 13, 19, 9, tzinfo=datetime.timezone.utc), 'time_taken': 416447.0, 'time_delta': '4 days, 19:40:47', 'additions': 102, 'deletions': 5, 'state': 'closed'}, {'id': 1101866746, 'number': 24188, 'closed': datetime.datetime(2022, 10, 28, 11, 40, 25, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 10, 27, 15, 22, 49, tzinfo=datetime.timezone.utc), 'time_taken': 73056.0, 'time_delta': '20:17:36', 'additions': 20, 'deletions': 22, 'state': 'closed'}, {'id': 1099051592, 'number': 24177, 'closed': datetime.datetime(2022, 10, 26, 8, 31, 27, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 10, 25, 15, 8, 39, tzinfo=datetime.timezone.utc), 'time_taken': 62568.0, 'time_delta': '17:22:48', 'additions': 339, 'deletions': 6, 'state': 'closed'}, {'id': 1067058455, 'number': 24085, 'closed': datetime.datetime(2022, 9, 28, 11, 34, 53, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 9, 26, 12, 16, 53, tzinfo=datetime.timezone.utc), 'time_taken': 170280.0, 'time_delta': '1 day, 23:18:00', 'additions': 156, 'deletions': 97, 'state': 'closed'}, {'id': 1064488443, 'number': 24080, 'closed': datetime.datetime(2022, 9, 23, 7, 35, 48, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 9, 22, 18, 0, 37, tzinfo=datetime.timezone.utc), 'time_taken': 48911.0, 'time_delta': '13:35:11', 'additions': 18, 'deletions': 72, 'state': 'closed'}, {'id': 1054960499, 'number': 24053, 'closed': datetime.datetime(2022, 9, 30, 15, 6, 53, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 9, 13, 16, 59, 11, tzinfo=datetime.timezone.utc), 'time_taken': 1462062.0, 'time_delta': '16 days, 22:07:42', 'additions': 574, 'deletions': 3, 'state': 'closed'}, {'id': 1053113149, 'number': 24046, 'closed': datetime.datetime(2022, 9, 23, 14, 8, 11, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 9, 12, 10, 34, 4, tzinfo=datetime.timezone.utc), 'time_taken': 963247.0, 'time_delta': '11 days, 3:34:07', 'additions': 619, 'deletions': 12, 'state': 'closed'}, {'id': 1051553405, 'number': 24037, 'closed': datetime.datetime(2022, 9, 14, 14, 17, 48, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 9, 9, 13, 3, 31, tzinfo=datetime.timezone.utc), 'time_taken': 436457.0, 'time_delta': '5 days, 1:14:17', 'additions': 503, 'deletions': 4, 'state': 'closed'}, {'id': 1050537943, 'number': 24028, 'closed': datetime.datetime(2022, 9, 13, 17, 2, 28, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 9, 8, 16, 28, 10, tzinfo=datetime.timezone.utc), 'time_taken': 434058.0, 'time_delta': '5 days, 0:34:18', 'additions': 305, 'deletions': 220, 'state': 'closed'}, {'id': 1038673864, 'number': 23982, 'closed': datetime.datetime(2022, 9, 6, 5, 45, 36, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 27, 17, 17, 7, tzinfo=datetime.timezone.utc), 'time_taken': 822509.0, 'time_delta': '9 days, 12:28:29', 'additions': 58, 'deletions': 4, 'state': 'closed'}, {'id': 1038673082, 'number': 23981, 'closed': datetime.datetime(2022, 9, 6, 11, 55, 2, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 27, 17, 12, 46, tzinfo=datetime.timezone.utc), 'time_taken': 844936.0, 'time_delta': '9 days, 18:42:16', 'additions': 81, 'deletions': 11, 'state': 'closed'}, {'id': 1025350724, 'number': 23920, 'closed': datetime.datetime(2022, 9, 8, 14, 5, 49, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 12, 20, 14, 29, tzinfo=datetime.timezone.utc), 'time_taken': 2310680.0, 'time_delta': '26 days, 17:51:20', 'additions': 1289, 'deletions': 397, 'state': 'closed'}, {'id': 1019961010, 'number': 23890, 'closed': datetime.datetime(2022, 8, 10, 12, 53, 51, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 8, 8, 12, 12, tzinfo=datetime.timezone.utc), 'time_taken': 189699.0, 'time_delta': '2 days, 4:41:39', 'additions': 187, 'deletions': 19586, 'state': 'closed'}, {'id': 989122978, 'number': 23730, 'closed': datetime.datetime(2022, 7, 14, 18, 10, 28, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 6, 18, 7, 53, tzinfo=datetime.timezone.utc), 'time_taken': 691355.0, 'time_delta': '8 days, 0:02:35', 'additions': 19687, 'deletions': 8, 'state': 'closed'}, {'id': 982841986, 'number': 23705, 'closed': datetime.datetime(2022, 7, 14, 18, 9, 34, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 6, 29, 16, 52, 6, tzinfo=datetime.timezone.utc), 'time_taken': 1300648.0, 'time_delta': '15 days, 1:17:28', 'additions': 226, 'deletions': 1, 'state': 'closed'}, {'id': 966696822, 'number': 23628, 'closed': datetime.datetime(2022, 7, 14, 16, 32, 51, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 6, 14, 9, 44, 50, tzinfo=datetime.timezone.utc), 'time_taken': 2616481.0, 'time_delta': '30 days, 6:48:01', 'additions': 54, 'deletions': 1, 'state': 'closed'}, {'id': 913063736, 'number': 23392, 'closed': datetime.datetime(2022, 4, 23, 6, 4, 37, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 4, 19, 12, 38, 38, tzinfo=datetime.timezone.utc), 'time_taken': 321959.0, 'time_delta': '3 days, 17:25:59', 'additions': 8, 'deletions': 10, 'state': 'closed'}, {'id': 909635779, 'number': 23362, 'closed': datetime.datetime(2022, 4, 18, 16, 12, 23, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 4, 14, 6, 57, 27, tzinfo=datetime.timezone.utc), 'time_taken': 378896.0, 'time_delta': '4 days, 9:14:56', 'additions': 46, 'deletions': 36, 'state': 'closed'}, {'id': 909385190, 'number': 23359, 'closed': datetime.datetime(2024, 3, 28, 21, 12, 4, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 4, 13, 21, 43, 26, tzinfo=datetime.timezone.utc), 'time_taken': 61774118.0, 'time_delta': '714 days, 23:28:38', 'additions': 46, 'deletions': 5, 'state': 'closed'}]"
