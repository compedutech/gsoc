pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
381386520,Document YAML data output that Tern produces,"Listing the all the keys of the YAML output and their description.

Works towards #175 

Signed-off-by: WangJL <hazard15020@gmail.com>",True,561,https://api.github.com/repos/tern-tools/tern/pulls/561,https://github.com/tern-tools/tern/pull/561,closed,45,0,1,1,5,6,0,0,[],2020-02-28 13:20:25+00:00,2020-03-02 16:26:02+00:00,270337.0,"3 days, 3:05:37","[{'comment_id': 385711233, 'comment_body': ""IIRC nothing shows up in the YAML here. It's probably a bug we need to fix."", 'comment_created': datetime.datetime(2020, 2, 28, 14, 2, 58, tzinfo=datetime.timezone.utc), 'commenter': 'nishakm', 'type': 'User'}, {'comment_id': 385946403, 'comment_body': 'small nit: `YAML` instead of `yaml` and `format` instead of `foramt`', 'comment_created': datetime.datetime(2020, 2, 28, 22, 12, 37, tzinfo=datetime.timezone.utc), 'commenter': 'rnjudge', 'type': 'User'}, {'comment_id': 385948643, 'comment_body': '@nishakm do we want to list any metadta options of the `config` key? There are a few interesting ones like `architecture`, `created` and `os`.', 'comment_created': datetime.datetime(2020, 2, 28, 22, 19, tzinfo=datetime.timezone.utc), 'commenter': 'rnjudge', 'type': 'User'}, {'comment_id': 385949358, 'comment_body': 'small nit: `follows` instead of `followed`.', 'comment_created': datetime.datetime(2020, 2, 28, 22, 21, 15, tzinfo=datetime.timezone.utc), 'commenter': 'rnjudge', 'type': 'User'}, {'comment_id': 385950382, 'comment_body': 'On second thought, this might be overkill as there are lots of other subkeys with lots of metadata we would need to update as well.', 'comment_created': datetime.datetime(2020, 2, 28, 22, 24, 18, tzinfo=datetime.timezone.utc), 'commenter': 'rnjudge', 'type': 'User'}, {'comment_id': 385995702, 'comment_body': 'In the YAML output from the latest Release 1.0.1, I find these keys under the `image`-`layers`-`analyzed_output`. For image with multiple layers, the analysis of each layer is under the key `analyzed_output`.', 'comment_created': datetime.datetime(2020, 2, 29, 3, 10, 52, tzinfo=datetime.timezone.utc), 'commenter': 'ForgetMe17', 'type': 'User'}]","[{'commit_sha': '4d9a91ac8e695ce401d8ea671950747be600b6fe', 'committer_username': 'ForgetMe17', 'committer_name': 'WangJL', 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 19, 1, 12, 45, tzinfo=datetime.timezone.utc)}]",WangJL,32082049,,User,,16,,15,5
384306404,Record git project name and sha,"This pr adds functions to the dockerfile parser. If the parser
comes across the ADD directive, record the git projeect name and
sha in a comment after the command.

This pr modifies utils/general.py and analyze/docker/dockerfile.py.

In dockerfile.py, function find_git_info recieve a line of ADD
command and the path to the parsed dockerfile. Function
expand_add_command receives a dfobj and iter it with find_git_info.

In general.py, function check_git_folder is used to find git info
in a folder and funtion check_git_tar in a tar file. Function
check_git_src looks into the src_path, and check the file type.

Work towards #509.",True,571,https://api.github.com/repos/tern-tools/tern/pulls/571,https://github.com/tern-tools/tern/pull/571,closed,129,1,5,1,9,36,0,0,[],2020-03-05 14:26:01+00:00,2020-03-23 15:35:38+00:00,1559377.0,"18 days, 1:09:37","[{'comment_id': 388425391, 'comment_body': 'Instead of raising a `ValueError` can you log the error? If we raise the error it will cause Tern to quit and ideally we would continue with the rest of the potential lines in the Dockerfile. Something like:\r\n\r\n```\r\nlogger.error(""Invalid ADD command line: %s"", line)\r\n```', 'comment_created': datetime.datetime(2020, 3, 5, 16, 52, 43, tzinfo=datetime.timezone.utc), 'commenter': 'rnjudge', 'type': 'User'}, {'comment_id': 388425631, 'comment_body': 'Same comment as above. Log the error instead of raising it.', 'comment_created': datetime.datetime(2020, 3, 5, 16, 53, 4, tzinfo=datetime.timezone.utc), 'commenter': 'rnjudge', 'type': 'User'}, {'comment_id': 388429349, 'comment_body': ""I'm not sure if `dfobj.filepath` will necessarily be an absolute path. @nishakm is it possible that this path could be relative? From what I can tell, `dfobj.filepath` gets assigned to whatever the user specifies as the Dockerfile, which may not be absolute."", 'comment_created': datetime.datetime(2020, 3, 5, 16, 58, 41, tzinfo=datetime.timezone.utc), 'commenter': 'rnjudge', 'type': 'User'}, {'comment_id': 388443817, 'comment_body': 'I use open() and tarfile.open() to read the src file of ADD command. So once we make sure the relative path is in the sys.path, we can also get the src file. I will check if it works in my local test.', 'comment_created': datetime.datetime(2020, 3, 5, 17, 21, 54, tzinfo=datetime.timezone.utc), 'commenter': 'ForgetMe17', 'type': 'User'}, {'comment_id': 388478827, 'comment_body': ""What if the potential `git` directory, specified by `src_path`, is not in the same directory as the Dockerfile folder path? Or what if  the Dockerfile is in a few subfolders below? @nishakm not sure how hard we want to look for the source that is being copied in. It's also common to see the source being copied in as just `.` which could be multiple tars or directories. We should probably account for this in some way even if we don't filter through all the directories for potential git information."", 'comment_created': datetime.datetime(2020, 3, 5, 18, 26, 20, tzinfo=datetime.timezone.utc), 'commenter': 'rnjudge', 'type': 'User'}, {'comment_id': 388497028, 'comment_body': 'In general the src file path is the relative path to the Dockerfile path. I tested that it works with the git repo in the subfolders. If the dockerfile is in a few subfolders below, the given dockerfile_path is changed. What we do here is looking around the folder containing dockerfile and its subfolders. So we need to locate the dockerfile in this situation. I am wondering if I have missed some situations.', 'comment_created': datetime.datetime(2020, 3, 5, 19, 0, tzinfo=datetime.timezone.utc), 'commenter': 'ForgetMe17', 'type': 'User'}, {'comment_id': 388509805, 'comment_body': "">> In general the src file path is the relative path to the Dockerfile path\r\n\r\nThis is true in most cases, but we need to account for when it is not true. People do weird things with Dockerfiles :) \r\n\r\n>> If the dockerfile is in a few subfolders below, the given dockerfile_path is changed.\r\n\r\nIf the Dockerfile is a few subfolders below the git folder then wouldn't `src_path = os.path.join(dockerfile_folder_path, src_path)` give you `dir/dockerfile_folder_below/gitdirectory` even though the git directory could be a directory above in `dir`? "", 'comment_created': datetime.datetime(2020, 3, 5, 19, 21, 51, tzinfo=datetime.timezone.utc), 'commenter': 'rnjudge', 'type': 'User'}, {'comment_id': 388925707, 'comment_body': ""@rnjudge No it's not an absolute path and it doesn't need to be that. We just need to find the git repo and commit HEAD. I don't think we need to read what is in the tar file."", 'comment_created': datetime.datetime(2020, 3, 6, 14, 15, 50, tzinfo=datetime.timezone.utc), 'commenter': 'nishakm', 'type': 'User'}, {'comment_id': 389174356, 'comment_body': ""I don't think we need to look into the tarball that gets included into the docker image. It is already in there by the time we analyze it. I think this function can be deleted."", 'comment_created': datetime.datetime(2020, 3, 6, 22, 27, 20, tzinfo=datetime.timezone.utc), 'commenter': 'nishakm', 'type': 'User'}, {'comment_id': 389176965, 'comment_body': ""I don't think this functionality is testable, because the git sha of the tern repo will change every time a PR is merged. We'll just have to test the parts that adds the comment and the function that gets the git repository name (if those two things are in different functions)."", 'comment_created': datetime.datetime(2020, 3, 6, 22, 35, 12, tzinfo=datetime.timezone.utc), 'commenter': 'nishakm', 'type': 'User'}, {'comment_id': 389210416, 'comment_body': 'You can get the sha info in one line using `git rev-parse HEAD`. Take a look at `get_git_rev_or_version()` function in  tern/tern/utils/general.py for an example on how to do this. You may also want to break this into a mini-function called something like `get_git_sha(path)` for clarity. ', 'comment_created': datetime.datetime(2020, 3, 7, 1, 5, 48, tzinfo=datetime.timezone.utc), 'commenter': 'rnjudge', 'type': 'User'}, {'comment_id': 389211671, 'comment_body': 'You can find the top level directory (that will container .git inside it) with `git rev-parse --show-toplevel` command.', 'comment_created': datetime.datetime(2020, 3, 7, 1, 14, 43, tzinfo=datetime.timezone.utc), 'commenter': 'rnjudge', 'type': 'User'}, {'comment_id': 389216267, 'comment_body': 'This is tricky because while most remotes will be named `origin`, it is possible to rename `origin` to something else. We also want to get the complete repo name (i.e. github.com/tern.git)\r\n\r\nAssuming you are in a git repository, `basename `git rev-parse --show-toplevel` will give you just the name of the actual project. Finding the url will be a little harder.', 'comment_created': datetime.datetime(2020, 3, 7, 1, 53, 24, tzinfo=datetime.timezone.utc), 'commenter': 'rnjudge', 'type': 'User'}, {'comment_id': 389219867, 'comment_body': 'Thanks for your suggestion!\r\n', 'comment_created': datetime.datetime(2020, 3, 7, 2, 34, 21, tzinfo=datetime.timezone.utc), 'commenter': 'ForgetMe17', 'type': 'User'}, {'comment_id': 389815991, 'comment_body': 'Small nit: This description says the function returns true and also returns the absolute path to the top level directory when only the latter is true :)', 'comment_created': datetime.datetime(2020, 3, 9, 16, 42, 13, tzinfo=datetime.timezone.utc), 'commenter': 'rnjudge', 'type': 'User'}, {'comment_id': 392364048, 'comment_body': 'Can you use `logger.debug` instead?', 'comment_created': datetime.datetime(2020, 3, 13, 17, 16, 43, tzinfo=datetime.timezone.utc), 'commenter': 'nishakm', 'type': 'User'}, {'comment_id': 392365382, 'comment_body': 'Can you use `logger.debug` instead?', 'comment_created': datetime.datetime(2020, 3, 13, 17, 19, 4, tzinfo=datetime.timezone.utc), 'commenter': 'nishakm', 'type': 'User'}, {'comment_id': 392365654, 'comment_body': 'Change to `get_git_project_name`', 'comment_created': datetime.datetime(2020, 3, 13, 17, 19, 34, tzinfo=datetime.timezone.utc), 'commenter': 'nishakm', 'type': 'User'}, {'comment_id': 392367371, 'comment_body': 'You can use `os.path.basename` instead of invoking a shell command.', 'comment_created': datetime.datetime(2020, 3, 13, 17, 22, 36, tzinfo=datetime.timezone.utc), 'commenter': 'nishakm', 'type': 'User'}, {'comment_id': 392408634, 'comment_body': ""This `src_path` is incorrect here. You will want to use `get_git_toplevel(dockerfile_path)` for the `src_path` here and then you don't need to grab it later in line 472."", 'comment_created': datetime.datetime(2020, 3, 13, 18, 44, 56, tzinfo=datetime.timezone.utc), 'commenter': 'rnjudge', 'type': 'User'}, {'comment_id': 392412572, 'comment_body': ""You are updating the `dfobj.structure[i]['content']` correctly here, but we also need to update `dfobj.structure[i]['value']` in the structure dictionary to match. Note that the `value` is the same as the associated `content` value minus the Dockerfile command and newline character. Example of the dictionary from a run command:\r\n\r\n```{'instruction': 'RUN', 'startline': 12, 'endline': 12, 'content': 'RUN pip3 install --upgrade pip && pip3 install tern\\n', 'value': 'pip3 install --upgrade pip && pip3 install tern'}```"", 'comment_created': datetime.datetime(2020, 3, 13, 18, 53, 15, tzinfo=datetime.timezone.utc), 'commenter': 'rnjudge', 'type': 'User'}, {'comment_id': 392554478, 'comment_body': 'I am considering this situation:\r\n- dockerfile_folder\r\n    - Dockerfile\r\n    - git_project_folder\r\n\r\nADD command is like `ADD git_project_folder /tmp`. \r\n\r\nIn this situation, args given to `check_git_src` equals: \r\n`src_path = git_project_folder`\r\n`dockerfile_path = path_to_dockerfile_folder/dockerfile_folder/Dockerfile`.\r\n\r\nSo I use `os.path.join` to get the path `path_to_dockerfile_folder/dockerfile_folder/git_project_folder`.\r\nIf `src_path = get_git_toplevel(dockerfile_folder_path)`, we will get the toplevel directory containing this dockerfile instead of looking into the src given in ADD command first.\r\n\r\nIn another way, if ADD command is copying a folder which contains a git project(assume the name is A) into the image, and the dockerfile itself is in a git repo(assume the name is B), should we record the A or B?\r\n- B\r\n    - subfolder\r\n        - Dockerfile\r\n        - A(src of the ADD command)', 'comment_created': datetime.datetime(2020, 3, 14, 4, 3, 45, tzinfo=datetime.timezone.utc), 'commenter': 'ForgetMe17', 'type': 'User'}, {'comment_id': 393970334, 'comment_body': '> I am considering this situation:\r\n> \r\n>     * dockerfile_folder\r\n>       \r\n>       * Dockerfile\r\n>       * git_project_folder\r\n> \r\n\r\nYour code works for this situation, but this is a corner case. See below. \r\n\r\n> In another way, if ADD command is copying a folder which contains a git project(assume the name is A) into the image, and the dockerfile itself is in a git repo(assume the name is B), should we record the A or B?\r\n> \r\n>     * B\r\n>       \r\n>       * subfolder\r\n>         \r\n>         * Dockerfile\r\n>         * A(src of the ADD command)\r\n\r\nWe want to record the git information from the repo that is being copied, so we would want to record A. However, I think we should focus this PR for now on the following use case and we can add more later.\r\n\r\nThe most common use case we will see for this is:\r\n* git_project_folder\r\n    * directroy1\r\n    * directory2/Dockerfile\r\n\r\nADD git_project_folder /tmp\r\n\r\nwhich means that with your code now:\r\n`dockerfile_folder_path = ~/git_project_folder/directory2`\r\n`src_path = git_project_folder`\r\nand thus, `src_path = ~/git_project_folder/directory2/git_project_folder`. If you check to see if this directory exists, it will return false and the comment will say ""Unable to find the src file or filter"".\r\n\r\nBecause the above is the most common case, I think we should just use `get_top_dir` of the dockerfile location and worry about the other corner cases later. We have a release next week and ideally, this functionality will be included. What do you think?\r\n\r\nI also want to apologize, because I think I may have confused you a bit considering all of the situations. I am sorry for that and want you to know that you are doing an excellent job of contributing and making meaningful changes. Your efforts do not go unnoticed!', 'comment_created': datetime.datetime(2020, 3, 17, 21, 5, 50, tzinfo=datetime.timezone.utc), 'commenter': 'rnjudge', 'type': 'User'}, {'comment_id': 394286678, 'comment_body': 'Thinks for your explanation! Maybe I should figure out the use case clearly before coding. I am enjoying contributing and thanks for encouragement! I will work on it now!', 'comment_created': datetime.datetime(2020, 3, 18, 11, 45, 54, tzinfo=datetime.timezone.utc), 'commenter': 'ForgetMe17', 'type': 'User'}, {'comment_id': 394330870, 'comment_body': 'I find the `src_path` of ADD command is not used when looking for the toplevel folder. So I add this line to avoid linting check. `src_path` may be useful when considering other corner situations.', 'comment_created': datetime.datetime(2020, 3, 18, 13, 6, 20, tzinfo=datetime.timezone.utc), 'commenter': 'ForgetMe17', 'type': 'User'}, {'comment_id': 394466487, 'comment_body': ""What happens if we just do `get_git_toplevel(dockerfile_path)`? Shouldn't we get the same thing? If so, this would eliminate having to create a `dockerfile_folder_path` variable that is only used once."", 'comment_created': datetime.datetime(2020, 3, 18, 16, 9, 36, tzinfo=datetime.timezone.utc), 'commenter': 'rnjudge', 'type': 'User'}, {'comment_id': 394754921, 'comment_body': 'I set the `cwd(current wording diretory)` to be `dockerfile_folder_path` in `subprocess.check_output` when looking for toplevel dir. `dockerfile_path` points to a file, not a diretory which cannot be set as `cwd`.', 'comment_created': datetime.datetime(2020, 3, 19, 2, 23, 19, tzinfo=datetime.timezone.utc), 'commenter': 'ForgetMe17', 'type': 'User'}, {'comment_id': 395009512, 'comment_body': ""Seems to me you don't need `src_path` here. You can get the path to the git repository from the directory where the Dockerfile is."", 'comment_created': datetime.datetime(2020, 3, 19, 13, 5, 25, tzinfo=datetime.timezone.utc), 'commenter': 'nishakm', 'type': 'User'}, {'comment_id': 395009958, 'comment_body': ""The reason why the linter was complaining is because you don't use `src_path` anywhere."", 'comment_created': datetime.datetime(2020, 3, 19, 13, 6, 11, tzinfo=datetime.timezone.utc), 'commenter': 'nishakm', 'type': 'User'}, {'comment_id': 395010267, 'comment_body': 'So if you remove `src_path` these two lines can be removed as well.', 'comment_created': datetime.datetime(2020, 3, 19, 13, 6, 44, tzinfo=datetime.timezone.utc), 'commenter': 'nishakm', 'type': 'User'}, {'comment_id': 395011868, 'comment_body': 'Rather than check if the path exists you can check if `path_to_toplevel` is an empty string just by saying `if path_to_toplevel:`', 'comment_created': datetime.datetime(2020, 3, 19, 13, 9, 26, tzinfo=datetime.timezone.utc), 'commenter': 'nishakm', 'type': 'User'}, {'comment_id': 395026295, 'comment_body': ""Do we still need to parse `ADD` command to get the `src_path`? since we don't need `src_path` in this function.\r\nI am thinking if `find_git_info` in tern/analyze/docker/dockerfile.py is necessary, because it seems that we don't need to know what is being copied by `ADD` command, and what we use is the `dockerfile path` which is given by a `dfobj`."", 'comment_created': datetime.datetime(2020, 3, 19, 13, 32, 15, tzinfo=datetime.timezone.utc), 'commenter': 'ForgetMe17', 'type': 'User'}, {'comment_id': 395049576, 'comment_body': 'So it looks to me like `find_git_info` does the ADD command parsing, and you want to check if what got added is a git repository in itself. In this case, you will need functionality to:\r\n1. See if src_path exists (if os.path.exists(src_path))\r\n2. If it does, see if it is a git repository (get_git_toplevel(src_path))\r\nThis is only useful if you can produce a full repository url for the git project, otherwise you just get whatever was in the ADD command.\r\nSo I think in this case, you do not have to worry about parsing the ADD command to get the `src_path`. We just want to see if the Dockerfile lives in a github repo.', 'comment_created': datetime.datetime(2020, 3, 19, 14, 4, 58, tzinfo=datetime.timezone.utc), 'commenter': 'nishakm', 'type': 'User'}, {'comment_id': 395066757, 'comment_body': 'Maybe i can keep the current `find_git_info` which implements parsing ADD command, and not use the parsed `src_path`? ', 'comment_created': datetime.datetime(2020, 3, 19, 14, 27, 42, tzinfo=datetime.timezone.utc), 'commenter': 'ForgetMe17', 'type': 'User'}, {'comment_id': 395068708, 'comment_body': ""Yup! In fact, you don't need to parse it out right now. You can work on that part for #585."", 'comment_created': datetime.datetime(2020, 3, 19, 14, 30, 3, tzinfo=datetime.timezone.utc), 'commenter': 'nishakm', 'type': 'User'}, {'comment_id': 395178237, 'comment_body': 'small nit that doesn\'t need to be fixed to merge this but should be noted in the future: ""Given"" not Give and should note that this has to be a path to a directory, not a file.', 'comment_created': datetime.datetime(2020, 3, 19, 16, 58, 17, tzinfo=datetime.timezone.utc), 'commenter': 'rnjudge', 'type': 'User'}]","[{'commit_sha': '6916ebdec9165353c95cd0bc92d384e67eafa289', 'committer_username': 'ForgetMe17', 'committer_name': 'WangJL', 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 19, 1, 12, 45, tzinfo=datetime.timezone.utc)}]",WangJL,32082049,,User,,16,,15,5
387242753,Parsing ARG varibales,"Replace the arg varibles in the dockerfile if known.

Work towards #508.

Signed-off-by: WangJL <hazard15020@gmail.com>",True,580,https://api.github.com/repos/tern-tools/tern/pulls/580,https://github.com/tern-tools/tern/pull/580,closed,49,0,3,1,5,3,0,0,[],2020-03-12 13:27:09+00:00,2020-03-17 16:53:08+00:00,444359.0,"5 days, 3:25:59","[{'comment_id': 391696253, 'comment_body': '@ForgetMe17 does this work when `{}` are used too? i.e. `FROM debian:${version}`', 'comment_created': datetime.datetime(2020, 3, 12, 15, 21, 8, tzinfo=datetime.timezone.utc), 'commenter': 'rnjudge', 'type': 'User'}, {'comment_id': 391718089, 'comment_body': 'Yes, i use `replace_env` to replace `$xxx` and `${xxx}`. This function has already been tested in `tests\\test_analyze_docker_dockerfile.py`', 'comment_created': datetime.datetime(2020, 3, 12, 15, 53, 42, tzinfo=datetime.timezone.utc), 'commenter': 'ForgetMe17', 'type': 'User'}, {'comment_id': 392377349, 'comment_body': ""Instead of creating a new `instruction` variable, can you just check if `instruction_desc['instruction'] == 'ARG'` ?"", 'comment_created': datetime.datetime(2020, 3, 13, 17, 41, 11, tzinfo=datetime.timezone.utc), 'commenter': 'rnjudge', 'type': 'User'}]","[{'commit_sha': '5c3ef8d2d92c08ff386eb64881b2b486609619e3', 'committer_username': 'ForgetMe17', 'committer_name': 'WangJL', 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 19, 1, 12, 45, tzinfo=datetime.timezone.utc)}]",WangJL,32082049,,User,,16,,15,5
393463162,Find Git Project URL,"Adds git project url to the comments.

In tern/analyze/common.py
Adds function find_git_url which parses the output of 'git remote
-v' to get all the fecth labels containing a http or https url and
returns them as string.

Add test for this function.

Works towards #585.
Signed-off-by: WangJL <hazard15020@gmail.com>",True,606,https://api.github.com/repos/tern-tools/tern/pulls/606,https://github.com/tern-tools/tern/pull/606,closed,68,2,3,1,5,27,0,0,[],2020-03-25 08:57:17+00:00,2020-04-08 19:02:31+00:00,1245914.0,"14 days, 10:05:14","[{'comment_id': 399467837, 'comment_body': 'Can you explain why you chose this check?', 'comment_created': datetime.datetime(2020, 3, 27, 18, 39, 12, tzinfo=datetime.timezone.utc), 'commenter': 'nishakm', 'type': 'User'}, {'comment_id': 399469445, 'comment_body': ""This could also be of the form `git@github.com/`. Maybe also check for `startswith('git')`?"", 'comment_created': datetime.datetime(2020, 3, 27, 18, 42, 11, tzinfo=datetime.timezone.utc), 'commenter': 'nishakm', 'type': 'User'}, {'comment_id': 399470429, 'comment_body': 'You may have to do more manipulation if the remote happened to be of the form `git@`', 'comment_created': datetime.datetime(2020, 3, 27, 18, 44, 4, tzinfo=datetime.timezone.utc), 'commenter': 'nishakm', 'type': 'User'}, {'comment_id': 399472616, 'comment_body': 'I may have missed something obvious here but why would url be `(not found)`?', 'comment_created': datetime.datetime(2020, 3, 27, 18, 48, tzinfo=datetime.timezone.utc), 'commenter': 'nishakm', 'type': 'User'}, {'comment_id': 399616182, 'comment_body': 'The last line of output is a empty line, so i use this to skip the last line.', 'comment_created': datetime.datetime(2020, 3, 28, 4, 6, 49, tzinfo=datetime.timezone.utc), 'commenter': 'ForgetMe17', 'type': 'User'}, {'comment_id': 399616274, 'comment_body': 'Yes, I can add this to the output comment.', 'comment_created': datetime.datetime(2020, 3, 28, 4, 8, 2, tzinfo=datetime.timezone.utc), 'commenter': 'ForgetMe17', 'type': 'User'}, {'comment_id': 399616565, 'comment_body': 'In the circleci test, the project folder seems not to have the git project url. In github `Pull Request Lint and Test / PRs (pull_request)` test, it has the git project url. Since we need to pass both check, i use this form of test, like the test for git project name which is in the form of assertIn.', 'comment_created': datetime.datetime(2020, 3, 28, 4, 11, 50, tzinfo=datetime.timezone.utc), 'commenter': 'ForgetMe17', 'type': 'User'}, {'comment_id': 400526884, 'comment_body': 'OK, I got the CircleCI issue. I think there should be a better way to test this. Let me get back to you on this one.', 'comment_created': datetime.datetime(2020, 3, 30, 22, 14, 58, tzinfo=datetime.timezone.utc), 'commenter': 'nishakm', 'type': 'User'}, {'comment_id': 400980571, 'comment_body': ""You can remove the last line by doing `lines = output.decode('utf-8').split('\\n')` and then `lines.pop()` to get rid of the last line."", 'comment_created': datetime.datetime(2020, 3, 31, 14, 55, 53, tzinfo=datetime.timezone.utc), 'commenter': 'nishakm', 'type': 'User'}, {'comment_id': 400993026, 'comment_body': 'Did you mean `<label>\\t<url>`?', 'comment_created': datetime.datetime(2020, 3, 31, 15, 11, 54, tzinfo=datetime.timezone.utc), 'commenter': 'nishakm', 'type': 'User'}, {'comment_id': 400995145, 'comment_body': ""Also, I don't think you need to keep the remote name. You can just keep the url."", 'comment_created': datetime.datetime(2020, 3, 31, 15, 14, 40, tzinfo=datetime.timezone.utc), 'commenter': 'nishakm', 'type': 'User'}, {'comment_id': 400998883, 'comment_body': 'Here you can make a list of urls from the `git remote -v` result and make sure to convert it into the form `https://<domain>/<org>/<repo>`', 'comment_created': datetime.datetime(2020, 3, 31, 15, 19, 23, tzinfo=datetime.timezone.utc), 'commenter': 'nishakm', 'type': 'User'}, {'comment_id': 401227513, 'comment_body': ""I tried running this test locally on my clone of tern and I get `url info: (not found)` which shouldn't happen. It should be something like `url info: https://github.com/nishakm/tern, https://github.com/vmware/tern`."", 'comment_created': datetime.datetime(2020, 3, 31, 21, 31, 15, tzinfo=datetime.timezone.utc), 'commenter': 'nishakm', 'type': 'User'}, {'comment_id': 401285746, 'comment_body': 'I ran a test on running `git remote -v` on CircleCI and GHA. It looks like the difference is just the addition of the upstream project in the GHA environment, which is expected because all the tests are run in the same environment there.\r\nCircleCI:\r\n```\r\n#!/bin/bash -eo pipefail\r\npython ci/test_commit_message.py\r\n\r\norigin\tgit@github.com:vmware/tern.git (fetch)\r\norigin\tgit@github.com:vmware/tern.git (push)\r\n\r\nCommit message checks pass\r\n```\r\nGHA:\r\n```\r\n\r\nRun python ci/test_commit_message.py\r\norigin\thttps://github.com/vmware/tern (fetch)\r\norigin\thttps://github.com/vmware/tern (push)\r\nupstream\thttps://github.com/vmware/tern.git (fetch)\r\nupstream\thttps://github.com/vmware/tern.git (push)\r\n\r\nCommit message checks pass\r\n```\r\nEither way, you should get one url here: `https://github.com/vmware/tern`\r\n\r\nSee results in this PR: https://github.com/vmware/tern/pull/621\r\n\r\nAnother issue is that if you are working on a fork of the main project, then `git remote -v` will return something like `https://github.com/<username>/tern.git`. In this case the assert will still have to pass. I wonder if you could instead check if the beginning string has `https://github.com` and the end says `tern`.', 'comment_created': datetime.datetime(2020, 4, 1, 0, 12, 13, tzinfo=datetime.timezone.utc), 'commenter': 'nishakm', 'type': 'User'}, {'comment_id': 401575302, 'comment_body': 'Yes! The form of one line in the output is like `<label>\\t<url> (fetch/push)`', 'comment_created': datetime.datetime(2020, 4, 1, 12, 27, 1, tzinfo=datetime.timezone.utc), 'commenter': 'ForgetMe17', 'type': 'User'}, {'comment_id': 401631120, 'comment_body': 'Shoud we include ssh?like\r\n`upstream\tssh://git@github.com/vmware/tern.git (fetch)`', 'comment_created': datetime.datetime(2020, 4, 1, 13, 51, 7, tzinfo=datetime.timezone.utc), 'commenter': 'ForgetMe17', 'type': 'User'}, {'comment_id': 401722799, 'comment_body': ""I don't think we should. In fact, I think not including the transport protocol (`http/https/git`) would be better. So `get_git_url` should produce `['github.com/vmware/tern']` for the CircleCI and GHA case and `['github.com/vmware/tern', 'github.com/<username>/tern']` for the local development case."", 'comment_created': datetime.datetime(2020, 4, 1, 15, 52, 51, tzinfo=datetime.timezone.utc), 'commenter': 'nishakm', 'type': 'User'}, {'comment_id': 402356325, 'comment_body': 'In the latest commit, i change the test from test_analyze_dockerfile.py to test_analyze_common.py, since testing the url list is more convient than testing the comments and also needs less modifications.', 'comment_created': datetime.datetime(2020, 4, 2, 14, 27, 35, tzinfo=datetime.timezone.utc), 'commenter': 'ForgetMe17', 'type': 'User'}, {'comment_id': 402357366, 'comment_body': 'I use the dockerfile_folder_path as the cwd which assums that the dockerfile is under a git project.', 'comment_created': datetime.datetime(2020, 4, 2, 14, 28, 54, tzinfo=datetime.timezone.utc), 'commenter': 'ForgetMe17', 'type': 'User'}, {'comment_id': 404139726, 'comment_body': ""If `url_list = set()` then you don't have to do the `extract_url not in url_list` check and just do `url_list.add(extract_url)`."", 'comment_created': datetime.datetime(2020, 4, 6, 14, 33, 34, tzinfo=datetime.timezone.utc), 'commenter': 'nishakm', 'type': 'User'}, {'comment_id': 404150337, 'comment_body': 'Can you post a test result from a Dockerfile here then?', 'comment_created': datetime.datetime(2020, 4, 6, 14, 47, 25, tzinfo=datetime.timezone.utc), 'commenter': 'nishakm', 'type': 'User'}, {'comment_id': 404656156, 'comment_body': ""I ran a local test on `tests/dockerfiles/pin_add_command_test/pin_add_command_test_dockerfile`\r\nHere is the test code\r\n`def testCreatLockedFile(self):`\r\n     `dfobj = dockerfile.get_dockerfile_obj(self.testfile)`\r\n     `dffile = dockerfile.create_locked_dockerfile(dfobj)`\r\n     `dockerfile.write_locked_dockerfile(dffile, self.testfile + '_lock')`\r\nI have some problems with uploading the locked file, so i just paste the content below(2 lines).\r\n`FROM ubuntu@sha256:04d48df82c938587820d7b6006f5071dbbffceb7ca01d2814f81857c631d44df`\r\n`ADD plain_file /tmp # git project name: tern, HEAD sha: 0f84e2099e085fd085a6e6348b8fa411011ff57f, project url: github.com/ForgetMe17/tern github.com/vmware/tern \r\n`"", 'comment_created': datetime.datetime(2020, 4, 7, 9, 9, 53, tzinfo=datetime.timezone.utc), 'commenter': 'ForgetMe17', 'type': 'User'}, {'comment_id': 405179084, 'comment_body': 'small nit: change `project url` to `project url(s)` since there will likely be more than one.', 'comment_created': datetime.datetime(2020, 4, 7, 23, 50, 3, tzinfo=datetime.timezone.utc), 'commenter': 'rnjudge', 'type': 'User'}, {'comment_id': 405179190, 'comment_body': '@nishakm  small nit -- do we want to separate the URLs with nothing but a space? I would think if there is a list of URLs we would want to separate by comma, but maybe that is getting too in to semantics :) ', 'comment_created': datetime.datetime(2020, 4, 7, 23, 50, 20, tzinfo=datetime.timezone.utc), 'commenter': 'rnjudge', 'type': 'User'}, {'comment_id': 405192315, 'comment_body': ""@rnjudge Good catch! I didn't notice. @ForgetMe17 can you make this change?"", 'comment_created': datetime.datetime(2020, 4, 8, 0, 34, 38, tzinfo=datetime.timezone.utc), 'commenter': 'nishakm', 'type': 'User'}, {'comment_id': 405230629, 'comment_body': 'Yes!', 'comment_created': datetime.datetime(2020, 4, 8, 3, 0, 30, tzinfo=datetime.timezone.utc), 'commenter': 'ForgetMe17', 'type': 'User'}, {'comment_id': 405283091, 'comment_body': 'The output now is (2 lines)\r\n`FROM ubuntu@sha256:04d48df82c938587820d7b6006f5071dbbffceb7ca01d2814f81857c631d44df`\r\n`ADD plain_file /tmp # git project name: tern, HEAD sha: 7009ee03938a4f18b9e884f101a4d1bb999a36f3, project url(s): github.com/vmware/tern, github.com/ForgetMe17/tern`\r\n', 'comment_created': datetime.datetime(2020, 4, 8, 6, 19, 33, tzinfo=datetime.timezone.utc), 'commenter': 'ForgetMe17', 'type': 'User'}]","[{'commit_sha': '10e7f76eceb2fc7cf2123e50e7fd31d461c1b11a', 'committer_username': 'ForgetMe17', 'committer_name': 'WangJL', 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 19, 1, 12, 45, tzinfo=datetime.timezone.utc)}]",WangJL,32082049,,User,,16,,15,5
407314654,Fix linting error for helper.py,"Add a new function get_base_image_tag to replace the deeper branches.

Fixes #647.
Signed-off-by: WangJL <hazard15020@gmail.com>",True,650,https://api.github.com/repos/tern-tools/tern/pulls/650,https://github.com/tern-tools/tern/pull/650,closed,23,17,1,1,2,2,0,0,[],2020-04-22 14:07:13+00:00,2020-04-23 21:53:15+00:00,114362.0,"1 day, 7:46:02","[{'comment_id': 413298175, 'comment_body': 'We can get rid of this line', 'comment_created': datetime.datetime(2020, 4, 22, 20, 16, 29, tzinfo=datetime.timezone.utc), 'commenter': 'nishakm', 'type': 'User'}, {'comment_id': 413298519, 'comment_body': 'And pass in `docker_commands` here', 'comment_created': datetime.datetime(2020, 4, 22, 20, 17, tzinfo=datetime.timezone.utc), 'commenter': 'nishakm', 'type': 'User'}]","[{'commit_sha': 'e253b74cd2b400ccad91372ae97841a40be3cdc5', 'committer_username': 'ForgetMe17', 'committer_name': 'WangJL', 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 19, 1, 12, 45, tzinfo=datetime.timezone.utc)}]",WangJL,32082049,,User,,16,,15,5
407342330,Fix linting error for generator.py,"Add a new function get_layer_info_list() to replace the deeper branches.

Fixes #648.
Signed-off-by: WangJL <hazard15020@gmail.com>",True,651,https://api.github.com/repos/tern-tools/tern/pulls/651,https://github.com/tern-tools/tern/pull/651,closed,27,20,1,1,5,0,0,0,[],2020-04-22 14:51:28+00:00,2020-04-23 12:34:15+00:00,78167.0,21:42:47,[],"[{'commit_sha': 'edee98c0d53aa6708812fcc768ce1786dd323148', 'committer_username': 'ForgetMe17', 'committer_name': 'WangJL', 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 19, 1, 12, 45, tzinfo=datetime.timezone.utc)}]",WangJL,32082049,,User,,16,,15,5
427023985,Using Regex to split shell script,"Add function split_shell_script() in tern/utils/general.py.
This function receives a shell script, split it into statements:
- command
- variable
- loop
- branch

In this commit, use Regex to split the shell script by seperators
which are `&&`, `||`, `|`, `;`, `:;`(this is a special case).
To skip quotes while spliting, use (*SKIP)(*F). This is a feature
in Regex not in re(python module).

Works towards #682.

Signed-off-by: WangJL <hazard15020@gmail.com>",True,717,https://api.github.com/repos/tern-tools/tern/pulls/717,https://github.com/tern-tools/tern/pull/717,closed,118,0,3,3,7,8,0,0,[],2020-06-03 07:47:03+00:00,2020-06-19 13:22:04+00:00,1402501.0,"16 days, 5:35:01","[{'comment_id': 434611736, 'comment_body': '`regex` is not part of the standard library, so you will need to add it to `requirements.in` and `requirements.txt`', 'comment_created': datetime.datetime(2020, 6, 3, 14, 29, 41, tzinfo=datetime.timezone.utc), 'commenter': 'nishakm', 'type': 'User'}, {'comment_id': 434613688, 'comment_body': ""Small nit: I don't think it's necessary to alias `regex`. `re` is a very commonly used python module and included in the standard library."", 'comment_created': datetime.datetime(2020, 6, 3, 14, 32, 17, tzinfo=datetime.timezone.utc), 'commenter': 'nishakm', 'type': 'User'}, {'comment_id': 434756599, 'comment_body': ""I've noticed that this creates empty strings for some commands like if a `}` appeared after a `;`, so you might want to check for those.\r\n"", 'comment_created': datetime.datetime(2020, 6, 3, 18, 4, 16, tzinfo=datetime.timezone.utc), 'commenter': 'nishakm', 'type': 'User'}, {'comment_id': 440498835, 'comment_body': 'You can fix this issue in this PR as well. If you need to, add another commit on top of this one.', 'comment_created': datetime.datetime(2020, 6, 15, 23, 21, 14, tzinfo=datetime.timezone.utc), 'commenter': 'nishakm', 'type': 'User'}, {'comment_id': 440499064, 'comment_body': ""I don't understand what this TODO is for. Help?"", 'comment_created': datetime.datetime(2020, 6, 15, 23, 21, 57, tzinfo=datetime.timezone.utc), 'commenter': 'nishakm', 'type': 'User'}]","[{'commit_sha': '179df2ee363732de5ce3802c439b8abf942741e2', 'committer_username': 'ForgetMe17', 'committer_name': 'WangJL', 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 19, 1, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c090e49c1cae5d43292bb3fd5b8217e97e6c8ab9', 'committer_username': 'ForgetMe17', 'committer_name': 'WangJL', 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 19, 1, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c1f7e339618de4cc41220e090cfebaabce723e7f', 'committer_username': 'ForgetMe17', 'committer_name': 'WangJL', 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 19, 1, 12, 45, tzinfo=datetime.timezone.utc)}]",WangJL,32082049,,User,,16,,15,5
427041076,Add test dockerfiles for split shell script.,"Dockerfiles are added at tests/dockerfiles/split_shell_script.

Works towards #682.

Signed-off-by: WangJL <hazard15020@gmail.com>",True,718,https://api.github.com/repos/tern-tools/tern/pulls/718,https://github.com/tern-tools/tern/pull/718,closed,250,0,3,1,2,0,0,0,[],2020-06-03 08:20:58+00:00,2020-06-03 22:41:31+00:00,51633.0,14:20:33,[],"[{'commit_sha': '4b75c926e009b87a683908e96c35dd1d3fca35c1', 'committer_username': 'ForgetMe17', 'committer_name': 'WangJL', 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 19, 1, 12, 45, tzinfo=datetime.timezone.utc)}]",WangJL,32082049,,User,,16,,15,5
445188211,Update functions to use the shell script parser,"This PR updates functions `split_command()`, `get_shell_commands()` and `clean_command()` to implement a shell script parser for RUN commands.",True,756,https://api.github.com/repos/tern-tools/tern/pulls/756,https://github.com/tern-tools/tern/pull/756,closed,128,127,2,1,4,4,0,0,[],2020-07-07 06:35:49+00:00,2020-07-09 12:55:20+00:00,195571.0,"2 days, 6:19:31","[{'comment_id': 450656755, 'comment_body': 'i move the function split_shell_script() here.', 'comment_created': datetime.datetime(2020, 7, 7, 7, 15, 9, tzinfo=datetime.timezone.utc), 'commenter': 'ForgetMe17', 'type': 'User'}, {'comment_id': 450658452, 'comment_body': 'Use `shlex` to clean commands instead of `re.sub`. `shlex` can clean long whitespaces.', 'comment_created': datetime.datetime(2020, 7, 7, 7, 18, 43, tzinfo=datetime.timezone.utc), 'commenter': 'ForgetMe17', 'type': 'User'}, {'comment_id': 450660647, 'comment_body': 'Here we use the shell script parser to get statements, and then pick out `commands` and `commands in a loop`. For each `command` statement, we append it to the `command_list`.', 'comment_created': datetime.datetime(2020, 7, 7, 7, 22, 49, tzinfo=datetime.timezone.utc), 'commenter': 'ForgetMe17', 'type': 'User'}, {'comment_id': 451880286, 'comment_body': ""> In the code check, it failed on Prospector_Linting which says:\r\n> \r\n> ```\r\n> tern/analyze/common.py\r\n>   Line: 196\r\n>     pep8: E741 / ambiguous variable name 'l' (col 9)\r\n>     pep8: E741 / ambiguous variable name 'l' (col 9)\r\n> ```\r\n> \r\n> it seems that using `l` for the variable name will casue this problem.\r\n\r\nLooks like prospector version 1.3 checks for [letters that look like numbers](https://www.flake8rules.com/rules/E741.html). I will submit a fix and rerun the build."", 'comment_created': datetime.datetime(2020, 7, 8, 23, 30, 22, tzinfo=datetime.timezone.utc), 'commenter': 'nishakm', 'type': 'User'}]","[{'commit_sha': '11d1a2becfe91d8d4bfc53c0c5f7fc35121fce7d', 'committer_username': 'ForgetMe17', 'committer_name': 'WangJL', 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 19, 1, 12, 45, tzinfo=datetime.timezone.utc)}]",WangJL,32082049,,User,,16,,15,5
447697813,Add report for branch statement,"Previously, we just ignore the branch statement during parsing, this
commit add report for branch statement. The report will have a new
section called 'Non-deterministic branching statement' if there is a
branch in the RUN command.

Modified get_shell_commands() in tern\analyze\common.py.

Resolves #763.

Signed-off-by: WangJL <hazard15020@gmail.com>",True,764,https://api.github.com/repos/tern-tools/tern/pulls/764,https://github.com/tern-tools/tern/pull/764,closed,22,5,2,2,2,3,0,0,[],2020-07-11 01:09:53+00:00,2020-07-17 23:51:00+00:00,600067.0,"6 days, 22:41:07","[{'comment_id': 453137667, 'comment_body': 'For branch statements, we just record its content in the report. Like:\r\n```\r\nUnrecognized Commands:set -eux\r\nwget -O go.tgz $url\r\necho ${goRelSha256} *go.tgz | sha256sum -c -\r\ntar -C /usr/local -xzf go.tgz\r\nrm go.tgz\r\ngo version\r\n\r\nNon-deterministic branching statement: \r\ncase ""${dpkgArch##*-}"" in \t\tamd64) goRelArch=\'linux-amd64\'\r\ngoRelSha256=\'08df79b46b0adf498ea9f320a0f23d6ec59e9003660b4c9c1ce8e5e2c6f823ca\'\r\narmhf) goRelArch=\'linux-armv6l\'\r\ngoRelSha256=\'b5e682176d7ad3944404619a39b585453a740a2f82683e789f4279ec285b7ecd\'\r\narm64) goRelArch=\'linux-arm64\'\r\ngoRelSha256=\'cd813387f770c07819912f8ff4b9796a4e317dee92548b7226a19e60ac79eb27\'\r\ni386) goRelArch=\'linux-386\'\r\ngoRelSha256=\'cdcdab6c8d1f2dcea3bbec793352ef84db167a2eb6c60ff69e5cf94dca575f9a\'\r\nppc64el) goRelArch=\'linux-ppc64le\'\r\ngoRelSha256=\'b896b5eba616d27fd3bb8218de6bef557cb62221e42f73c84ae4b89cdb602dec\'\r\ns390x) goRelArch=\'linux-s390x\'\r\ngoRelSha256=\'22e67470fe872c893face196f02323a11ffe89999260c136b9c50f06619e0243\'\r\n*) goRelArch=\'src\'\r\ngoRelSha256=\'6d643e46ad565058c7a39dac01144172ef9bd476521f42148be59249e4b74389\'\r\necho >&2\r\necho >&2 ""warning: current architecture ($dpkgArch) does not have a corresponding Go binary release; will be building from source""\r\necho >&2\r\nesac\r\n\r\nif [ ""$goRelArch"" = \'src\' ]\r\nthen \t\techo >&2\r\necho >&2 \'error: UNIMPLEMENTED\'\r\necho >&2 \'TODO install golang-any from jessie-backports for GOROOT_BOOTSTRAP (and uninstall after build)\'\r\necho >&2\r\nexit 1\r\nfi\r\n\r\n```\r\n', 'comment_created': datetime.datetime(2020, 7, 11, 1, 21, 38, tzinfo=datetime.timezone.utc), 'commenter': 'ForgetMe17', 'type': 'User'}, {'comment_id': 454567267, 'comment_body': 'If you can add a test here for a branching command such as `if [ -z $var ]; then do something; fi`', 'comment_created': datetime.datetime(2020, 7, 14, 18, 43, 16, tzinfo=datetime.timezone.utc), 'commenter': 'nishakm', 'type': 'User'}, {'comment_id': 455276941, 'comment_body': 'I think there should be a `then`? You can find an if statement in one of the Dockerfiles you are testing with to help you out.', 'comment_created': datetime.datetime(2020, 7, 15, 19, 3, 54, tzinfo=datetime.timezone.utc), 'commenter': 'nishakm', 'type': 'User'}]","[{'commit_sha': '4ab945d1252cf1fc6d669cc8c77e03187e53418a', 'committer_username': 'ForgetMe17', 'committer_name': 'WangJL', 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 19, 1, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5d69043bd331ef74f12dc7d4801f9b62c4c363a7', 'committer_username': 'ForgetMe17', 'committer_name': 'WangJL', 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 19, 1, 12, 45, tzinfo=datetime.timezone.utc)}]",WangJL,32082049,,User,,16,,15,5
452070849,Split multistage dockerfile by stage,"This PR will implement functions on building multistage dockerfile images. Here are goals:
1. Get the dockerfiles for build(df1: stage1, df2: stage1 + stage2, df3: stage1 + stage2 + stage3).
2. Get the splited dockerfile object for analyze(stage1, stage2, stage3).

To implement this:
1. Split multistage dockerfile by stage.
2. Combine stages in order to get dockerfile for build.
3. Adding necessary tests.",True,774,https://api.github.com/repos/tern-tools/tern/pulls/774,https://github.com/tern-tools/tern/pull/774,closed,52,0,2,1,2,22,0,0,[],2020-07-18 18:29:27+00:00,2020-08-20 17:25:08+00:00,2847341.0,"32 days, 22:55:41","[{'comment_id': 459588475, 'comment_body': 'In this new function, we will create dockerfiles for each stage to build. A list of the dockerfile names will be returned.', 'comment_created': datetime.datetime(2020, 7, 23, 16, 48, 48, tzinfo=datetime.timezone.utc), 'commenter': 'ForgetMe17', 'type': 'User'}, {'comment_id': 459589244, 'comment_body': 'Since docker.image.build receives a path of folder which contains Dockerfile, so i chose to create a folder for each stage dockerfile.', 'comment_created': datetime.datetime(2020, 7, 23, 16, 50, 7, tzinfo=datetime.timezone.utc), 'commenter': 'ForgetMe17', 'type': 'User'}, {'comment_id': 459590609, 'comment_body': 'Same logic with execute_dockerfile(), we are going to loop on this for each dockerfile.', 'comment_created': datetime.datetime(2020, 7, 23, 16, 52, 22, tzinfo=datetime.timezone.utc), 'commenter': 'ForgetMe17', 'type': 'User'}, {'comment_id': 460245277, 'comment_body': ""spelling error: `check_multistage_dockerfile`\r\n\r\nStraightforward logic is good for readability:\r\n```\r\n342     count = 0                                                                   \r\n343     for c in dfobj.structure:                                                   \r\n344         if c['instruction'] == 'FROM':                                          \r\n345             count = count + 1                                                   \r\n346     return count > 1  \r\n```\r\n"", 'comment_created': datetime.datetime(2020, 7, 24, 19, 24, 11, tzinfo=datetime.timezone.utc), 'commenter': 'nishakm', 'type': 'User'}, {'comment_id': 460246892, 'comment_body': 'I am getting 3 Dockerfile objects for a 2 stage dockerfile: https://github.com/anuvu/zot/blob/master/Dockerfile', 'comment_created': datetime.datetime(2020, 7, 24, 19, 27, 44, tzinfo=datetime.timezone.utc), 'commenter': 'nishakm', 'type': 'User'}, {'comment_id': 460248667, 'comment_body': 'I wonder if you can make use of the `check_multistage_dockerfile` function to also return the start line and the end line of the first `FROM` line and the next `FROM` line and then use that to split the dockerfiles. I would think that for a 2 stage dockerfile, you will only need one new Dockerfile object not including the original. ', 'comment_created': datetime.datetime(2020, 7, 24, 19, 31, 44, tzinfo=datetime.timezone.utc), 'commenter': 'nishakm', 'type': 'User'}, {'comment_id': 464987415, 'comment_body': 'In the new commit, i have removed this function. We are now spliting the dockerfile for building, and `split_multistage_dockerfile()` gets the dfobj for analyze, so i will fix this function while i am working on the analyze.', 'comment_created': datetime.datetime(2020, 8, 4, 11, 38, 44, tzinfo=datetime.timezone.utc), 'commenter': 'ForgetMe17', 'type': 'User'}, {'comment_id': 464987965, 'comment_body': 'Good advice! @nishakm. I have made these changes in the new commit.', 'comment_created': datetime.datetime(2020, 8, 4, 11, 39, 45, tzinfo=datetime.timezone.utc), 'commenter': 'ForgetMe17', 'type': 'User'}, {'comment_id': 467293281, 'comment_body': ""See Nisha's notes on readability here but this function works for me when I tested it."", 'comment_created': datetime.datetime(2020, 8, 7, 21, 47, 15, tzinfo=datetime.timezone.utc), 'commenter': 'rnjudge', 'type': 'User'}, {'comment_id': 468694434, 'comment_body': 'small nit: `and the index(es) of the FROM line(s)` since we are checking for multistage dockefiles, in which case there would be multiple FROM lines.', 'comment_created': datetime.datetime(2020, 8, 11, 16, 4, 48, tzinfo=datetime.timezone.utc), 'commenter': 'rnjudge', 'type': 'User'}, {'comment_id': 468699995, 'comment_body': 'small nit: maybe call this variable `from_lines` (plural) since there will be multiple?', 'comment_created': datetime.datetime(2020, 8, 11, 16, 13, 21, tzinfo=datetime.timezone.utc), 'commenter': 'rnjudge', 'type': 'User'}, {'comment_id': 468700610, 'comment_body': 'Do you see yourself using the True/False return value here? It seems somewhat redundant. The only other place `check_multistage_dockerfile` is called in the PR, you throw away the True/False value. Users of this function will know it is a multistage dockerfile if the length of the list returned is > 1. ', 'comment_created': datetime.datetime(2020, 8, 11, 16, 14, 18, tzinfo=datetime.timezone.utc), 'commenter': 'rnjudge', 'type': 'User'}, {'comment_id': 468702906, 'comment_body': 'Proposal to only return the `from_line` here.', 'comment_created': datetime.datetime(2020, 8, 11, 16, 17, 47, tzinfo=datetime.timezone.utc), 'commenter': 'rnjudge', 'type': 'User'}, {'comment_id': 468738854, 'comment_body': 'I think there\'s some work to be done on this function. Here\'s what I did to test in a python environment (Note that I pulled the multistage Dockerfile from here: https://github.com/anuvu/zot/blob/master/Dockerfile:\r\n\r\n```\r\n>>> from tern.analyze.docker import dockerfile\r\n>>> dfobj_multi = dockerfile.get_dockerfile_obj(\'Dockerfile\')\r\n>>> struct_list = dockerfile.get_multistage_image_dockerfiles(dfobj_multi)\r\n>>> struct_list\r\n[\'Dockerfile_0/Dockerfile\', \'Dockerfile\']\r\n```\r\nI would expect there to be `[\'Dockerfile_0/Dockerfile\', \'Dockerfile_1/Dockerfile\']`\r\nFurthermore, when I check the files written (according to the `struct_list` above) the Dockerfile in the struct is just the original:\r\n\r\n```\r\n(ternenv) rjudge:tern$ cat Dockerfile\r\n# ---\r\n# Stage 1: Install certs, build binary, create default config file\r\n# ---\r\nFROM docker.io/golang:1.13.6-alpine3.11 AS builder\r\nRUN apk --update add git make ca-certificates\r\nRUN mkdir -p /go/src/github.com/anuvu/zot\r\nWORKDIR /go/src/github.com/anuvu/zot\r\nCOPY . .\r\nRUN CGO_ENABLED=0 make clean binary\r\nRUN echo -e \'# Default config file for zot server\\n\\\r\nhttp:\\n\\\r\n  address: 0.0.0.0\\n\\\r\n  port: 5000\\n\\\r\nstorage:\\n\\\r\n  rootDirectory: /var/lib/registry\' > config.yml && cat config.yml\r\n\r\n# ---\r\n# Stage 2: Final image with nothing but certs, binary, and default config file\r\n# ---\r\nFROM scratch AS final\r\nCOPY --from=builder /etc/ssl/certs/ca-certificates.crt /etc/ssl/certs/ca-certificates.crt\r\nCOPY --from=builder /go/src/github.com/anuvu/zot/bin/zot /zot\r\nCOPY --from=builder /go/src/github.com/anuvu/zot/config.yml /etc/zot/config.yml\r\nENTRYPOINT [""/zot""]\r\nEXPOSE 5000\r\nVOLUME [""/var/lib/registry""]\r\nCMD [""serve"", ""/etc/zot/config.yml""]\r\n```\r\n\r\nDockerfile_0/Dockerfile looks correct as the first stage of the Dockerfile:\r\n\r\n```\r\n(ternenv) rjudge:tern$ cat Dockerfile_0/Dockerfile \r\n# ---\r\n# Stage 1: Install certs, build binary, create default config file\r\n# ---\r\nFROM docker.io/golang:1.13.6-alpine3.11 AS builder\r\nRUN apk --update add git make ca-certificates\r\nRUN mkdir -p /go/src/github.com/anuvu/zot\r\nWORKDIR /go/src/github.com/anuvu/zot\r\nCOPY . .\r\nRUN CGO_ENABLED=0 make clean binary\r\nRUN echo -e \'# Default config file for zot server\\n\\\r\nhttp:\\n\\\r\n  address: 0.0.0.0\\n\\\r\n  port: 5000\\n\\\r\nstorage:\\n\\\r\n  rootDirectory: /var/lib/registry\' > config.yml && cat config.yml\r\n# ---\r\n# Stage 2: Final image with nothing but certs, binary, and default config file\r\n# ---\r\n\r\n```', 'comment_created': datetime.datetime(2020, 8, 11, 17, 16, 6, tzinfo=datetime.timezone.utc), 'commenter': 'rnjudge', 'type': 'User'}, {'comment_id': 469371882, 'comment_body': 'No. I think this is redundant here. I will remove this.', 'comment_created': datetime.datetime(2020, 8, 12, 16, 3, 8, tzinfo=datetime.timezone.utc), 'commenter': 'ForgetMe17', 'type': 'User'}, {'comment_id': 469380127, 'comment_body': 'I have removed True/False return value and use `from_lines` here since there are possibly more than one FROM line. ', 'comment_created': datetime.datetime(2020, 8, 12, 16, 15, 56, tzinfo=datetime.timezone.utc), 'commenter': 'ForgetMe17', 'type': 'User'}, {'comment_id': 469424781, 'comment_body': 'According to the proposal in https://github.com/tern-tools/tern/issues/612#issuecomment-657929436, this is working as intended.', 'comment_created': datetime.datetime(2020, 8, 12, 17, 30, 29, tzinfo=datetime.timezone.utc), 'commenter': 'rnjudge', 'type': 'User'}, {'comment_id': 472306436, 'comment_body': ""Just a note that there needs to be follow up code to clean up the newly created Dockerfiles after analysis. I wonder if it would be easier to manage if there was a canonical path for these intermediate stages. For example, if we are reading a path to a Dockerfile like `/home/z/Dockerfile`, if we make a path like `/home/z/dftemp` and then in each one create your individual files `/home/z/dftemp/0/Dockerfile`, `/home/z/dftemp/1/Dockerfile`, when analysis is done, it will be easier to cleanup because you will only need to do `shutil.rmtree('/home/z/dftemp')` to clean-up. What do you think?"", 'comment_created': datetime.datetime(2020, 8, 18, 15, 59, 8, tzinfo=datetime.timezone.utc), 'commenter': 'nishakm', 'type': 'User'}, {'comment_id': 473053983, 'comment_body': 'Can you move the constant `dftemp` to `tern/utils/constants.py`?', 'comment_created': datetime.datetime(2020, 8, 19, 14, 3, 14, tzinfo=datetime.timezone.utc), 'commenter': 'nishakm', 'type': 'User'}, {'comment_id': 473069866, 'comment_body': ""Do you mean `temp_folder_path = os.path.dirname(dfobj_multi.filepath) + constans.dftemp_dir` \r\nand in `tern/utils/constants.py` , `dftemp_dir='/dftemp'`"", 'comment_created': datetime.datetime(2020, 8, 19, 14, 24, 41, tzinfo=datetime.timezone.utc), 'commenter': 'ForgetMe17', 'type': 'User'}, {'comment_id': 473073819, 'comment_body': ""In `tern/utils/constants.py` enter:\r\n```\r\n# temporary directory for multistage Dockerfile analysis\r\nmultistage_dir = 'dftemp'\r\n```\r\nAnd then in this line\r\n`temp_folder_path = os.path.join(os.path.dirname(dfobj_multi.filepath), multistage_dir)`"", 'comment_created': datetime.datetime(2020, 8, 19, 14, 29, 49, tzinfo=datetime.timezone.utc), 'commenter': 'nishakm', 'type': 'User'}, {'comment_id': 473075009, 'comment_body': 'Got it!', 'comment_created': datetime.datetime(2020, 8, 19, 14, 31, 17, tzinfo=datetime.timezone.utc), 'commenter': 'ForgetMe17', 'type': 'User'}]","[{'commit_sha': '41e9dadd031cc6092ebf2388c4f58ec799c2e8af', 'committer_username': 'ForgetMe17', 'committer_name': 'WangJL', 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 19, 1, 12, 45, tzinfo=datetime.timezone.utc)}]",WangJL,32082049,,User,,16,,15,5
467453549,Analyze multistage,"The commit `Draft version of analyze multistage dockerfile` is a draft implementation of analyzing multistage dockfile.  Here are the steps.
1. split the dockfile for build.
2. build the images.
3. split the dockerfile by stage for analyze.
4. analyze each image and generate a report.",False,786,https://api.github.com/repos/tern-tools/tern/pulls/786,https://github.com/tern-tools/tern/pull/786,closed,19,0,1,1,11,5,0,0,[],2020-08-13 15:17:13+00:00,2020-11-17 13:36:03+00:00,8288330.0,"95 days, 22:18:50","[{'comment_id': 483119679, 'comment_body': 'How is this different from `get_multistage_image_dockerfiles(dfobj_multi)`?\r\n\r\nIt looks like that gives you the list of dockerfile paths to build and analyze images one by one.', 'comment_created': datetime.datetime(2020, 9, 3, 16, 49, 4, tzinfo=datetime.timezone.utc), 'commenter': 'nishakm', 'type': 'User'}, {'comment_id': 483216717, 'comment_body': 'This is a hard coded path. Also, why the `.html` file extension?', 'comment_created': datetime.datetime(2020, 9, 3, 19, 49, 51, tzinfo=datetime.timezone.utc), 'commenter': 'nishakm', 'type': 'User'}, {'comment_id': 483685066, 'comment_body': '`get_multistage_image_dockerfiles(dfobj_multi)` split the dockerfile like this:\r\nFile 1: Stage 1\r\nFile 2: Stage 2\r\nand  `split_multistage_dockerfile_by_stage(dfobj_multi)` split the dockerfile like this:\r\nFile 1: Stage 1\r\nFile 2: Stage 1 + Stage 2', 'comment_created': datetime.datetime(2020, 9, 4, 15, 19, 59, tzinfo=datetime.timezone.utc), 'commenter': 'ForgetMe17', 'type': 'User'}, {'comment_id': 483685436, 'comment_body': 'This is a draft version, `html` is easy for read.', 'comment_created': datetime.datetime(2020, 9, 4, 15, 20, 38, tzinfo=datetime.timezone.utc), 'commenter': 'ForgetMe17', 'type': 'User'}, {'comment_id': 485053398, 'comment_body': 'Hmm...but you write out the Dockerfiles appropriately in `get_multistage_image_dockerfiles`. In path `dftemp/0` exists Stage1 and the original Dockerfile is `Stage1+Stage2`.\r\n\r\nI tried this with https://github.com/anuvu/zot and it works (at least the Dockerfiles are split into the appropriate stages)\r\n\r\nOne thing to note is that when you are building with docker, you will have to provide the absolute path to the Dockerfile *in the locally cloned repository*. That should solve the COPY issue you are having.', 'comment_created': datetime.datetime(2020, 9, 8, 16, 35, 15, tzinfo=datetime.timezone.utc), 'commenter': 'nishakm', 'type': 'User'}]","[{'commit_sha': 'b91c4b04e6cac2d82bd88bf32f69873c3eb5cc28', 'committer_username': 'ForgetMe17', 'committer_name': 'WangJL', 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 19, 1, 12, 45, tzinfo=datetime.timezone.utc)}]",WangJL,32082049,,User,,16,,15,5
452057917,Bug fix with Dockerfile RUN parsing,"Fixed Tern exits with 'killed' when Dockerfile RUN statement is complex.
Changed logic in the function consolidate_commands() in
tern/analyze/common.py.

Fixes tern-tools#772.

Signed-off-by: WangJL <hazard15020@gmail.com>",True,773,https://api.github.com/repos/tern-tools/tern/pulls/773,https://github.com/tern-tools/tern/pull/773,closed,6,2,1,1,2,1,0,0,[],2020-07-18 18:00:19+00:00,2020-07-21 23:37:42+00:00,279443.0,"3 days, 5:37:23","[{'comment_id': 456813597, 'comment_body': 'append(first) here may cause two or more same Command objects in the `command_list`.\r\nIt seems more reasonable to append `second` since we have popped `second` from the list, if we cannot merge `second` into `first`, we need to keep `second` in the list instead of `first` for next while loop to analyze it.', 'comment_created': datetime.datetime(2020, 7, 18, 18, 4, 55, tzinfo=datetime.timezone.utc), 'commenter': 'ForgetMe17', 'type': 'User'}]","[{'commit_sha': '9faefb93ef0dabce2fb5d10cc9a4e69d167142db', 'committer_username': 'ForgetMe17', 'committer_name': 'WangJL', 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 19, 1, 12, 45, tzinfo=datetime.timezone.utc)}]",WangJL,32082049,,User,,16,,15,5

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
112261191,tern,tern-tools/tern,Python,188,950,31,77,1102,58,3,4,"[{'id': 493031227, 'number': 813, 'closed': datetime.datetime(2020, 9, 25, 17, 15, 53, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 9, 25, 12, 11, 47, tzinfo=datetime.timezone.utc), 'time_taken': 18246.0, 'time_delta': '5:04:06', 'additions': 3, 'deletions': 0, 'state': 'closed'}, {'id': 486454362, 'number': 809, 'closed': datetime.datetime(2020, 11, 9, 15, 0, 57, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 9, 14, 8, 55, 2, tzinfo=datetime.timezone.utc), 'time_taken': 4860355.0, 'time_delta': '56 days, 6:05:55', 'additions': 30, 'deletions': 15, 'state': 'closed'}, {'id': 467453549, 'number': 786, 'closed': datetime.datetime(2020, 11, 17, 13, 36, 3, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 13, 15, 17, 13, tzinfo=datetime.timezone.utc), 'time_taken': 8288330.0, 'time_delta': '95 days, 22:18:50', 'additions': 19, 'deletions': 0, 'state': 'closed'}, {'id': 452070849, 'number': 774, 'closed': datetime.datetime(2020, 8, 20, 17, 25, 8, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 18, 18, 29, 27, tzinfo=datetime.timezone.utc), 'time_taken': 2847341.0, 'time_delta': '32 days, 22:55:41', 'additions': 52, 'deletions': 0, 'state': 'closed'}, {'id': 452057917, 'number': 773, 'closed': datetime.datetime(2020, 7, 21, 23, 37, 42, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 18, 18, 0, 19, tzinfo=datetime.timezone.utc), 'time_taken': 279443.0, 'time_delta': '3 days, 5:37:23', 'additions': 6, 'deletions': 2, 'state': 'closed'}, {'id': 447697813, 'number': 764, 'closed': datetime.datetime(2020, 7, 17, 23, 51, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 11, 1, 9, 53, tzinfo=datetime.timezone.utc), 'time_taken': 600067.0, 'time_delta': '6 days, 22:41:07', 'additions': 22, 'deletions': 5, 'state': 'closed'}, {'id': 445188211, 'number': 756, 'closed': datetime.datetime(2020, 7, 9, 12, 55, 20, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 7, 6, 35, 49, tzinfo=datetime.timezone.utc), 'time_taken': 195571.0, 'time_delta': '2 days, 6:19:31', 'additions': 128, 'deletions': 127, 'state': 'closed'}, {'id': 439174432, 'number': 744, 'closed': datetime.datetime(2020, 7, 7, 7, 9, 7, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 24, 12, 26, 49, tzinfo=datetime.timezone.utc), 'time_taken': 1104138.0, 'time_delta': '12 days, 18:42:18', 'additions': 33, 'deletions': 2, 'state': 'closed'}, {'id': 427041076, 'number': 718, 'closed': datetime.datetime(2020, 6, 3, 22, 41, 31, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 3, 8, 20, 58, tzinfo=datetime.timezone.utc), 'time_taken': 51633.0, 'time_delta': '14:20:33', 'additions': 250, 'deletions': 0, 'state': 'closed'}, {'id': 427023985, 'number': 717, 'closed': datetime.datetime(2020, 6, 19, 13, 22, 4, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 3, 7, 47, 3, tzinfo=datetime.timezone.utc), 'time_taken': 1402501.0, 'time_delta': '16 days, 5:35:01', 'additions': 118, 'deletions': 0, 'state': 'closed'}, {'id': 417945330, 'number': 688, 'closed': datetime.datetime(2020, 6, 3, 7, 47, 35, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 5, 14, 11, 53, 38, tzinfo=datetime.timezone.utc), 'time_taken': 1713237.0, 'time_delta': '19 days, 19:53:57', 'additions': 173, 'deletions': 0, 'state': 'closed'}, {'id': 407342330, 'number': 651, 'closed': datetime.datetime(2020, 4, 23, 12, 34, 15, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 4, 22, 14, 51, 28, tzinfo=datetime.timezone.utc), 'time_taken': 78167.0, 'time_delta': '21:42:47', 'additions': 27, 'deletions': 20, 'state': 'closed'}, {'id': 407314654, 'number': 650, 'closed': datetime.datetime(2020, 4, 23, 21, 53, 15, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 4, 22, 14, 7, 13, tzinfo=datetime.timezone.utc), 'time_taken': 114362.0, 'time_delta': '1 day, 7:46:02', 'additions': 23, 'deletions': 17, 'state': 'closed'}, {'id': 393463162, 'number': 606, 'closed': datetime.datetime(2020, 4, 8, 19, 2, 31, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 3, 25, 8, 57, 17, tzinfo=datetime.timezone.utc), 'time_taken': 1245914.0, 'time_delta': '14 days, 10:05:14', 'additions': 68, 'deletions': 2, 'state': 'closed'}, {'id': 387242753, 'number': 580, 'closed': datetime.datetime(2020, 3, 17, 16, 53, 8, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 3, 12, 13, 27, 9, tzinfo=datetime.timezone.utc), 'time_taken': 444359.0, 'time_delta': '5 days, 3:25:59', 'additions': 49, 'deletions': 0, 'state': 'closed'}, {'id': 384306404, 'number': 571, 'closed': datetime.datetime(2020, 3, 23, 15, 35, 38, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 3, 5, 14, 26, 1, tzinfo=datetime.timezone.utc), 'time_taken': 1559377.0, 'time_delta': '18 days, 1:09:37', 'additions': 129, 'deletions': 1, 'state': 'closed'}, {'id': 381386520, 'number': 561, 'closed': datetime.datetime(2020, 3, 2, 16, 26, 2, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 2, 28, 13, 20, 25, tzinfo=datetime.timezone.utc), 'time_taken': 270337.0, 'time_delta': '3 days, 3:05:37', 'additions': 45, 'deletions': 0, 'state': 'closed'}]"
