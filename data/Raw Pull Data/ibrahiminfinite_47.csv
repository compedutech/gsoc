pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
1306491280,[Servo] Update MoveIt Servo to use generate_parameter_library,"### Description

This PR modifies Moveit Servo to use the `generate_parameter_library` to load the servo parameters.
Fixes #2095 

### Checklist
- [x] **Required by CI**: Code is auto formatted using [clang-format](http://moveit.ros.org/documentation/contributing/code)
- [x] Extend the tutorials / documentation [reference](http://moveit.ros.org/documentation/contributing/)
- [x] Document API changes relevant to the user in the [MIGRATION.md](https://github.com/ros-planning/moveit2/blob/main/MIGRATION.md) notes
",True,2096,https://api.github.com/repos/moveit/moveit2/pulls/2096,https://github.com/moveit/moveit2/pull/2096,closed,681,1230,27,52,17,49,0,0,[],2023-04-08 12:54:42+00:00,2023-04-27 13:19:38+00:00,1643096.0,"19 days, 0:24:56","[{'comment_id': 1161815365, 'comment_body': ""I recently learned that the smoothing filter coefficient was hard-coded in the code to be 1.5. Could you make this a parameter in this PR too, if that's possible?"", 'comment_created': datetime.datetime(2023, 4, 10, 15, 22, 55, tzinfo=datetime.timezone.utc), 'commenter': 'sea-bass', 'type': 'User'}, {'comment_id': 1161818485, 'comment_body': 'To answer your top-level question about what to do about parameters: Many other nodes that use this library basically have a boolean parameter that configures whether the node should be continuously checking for parameter updates on every tick vs. just initialize once and not check again. For performance reasons.\r\n\r\nan example of this would be [the ros2_control admittance controller](https://github.com/ros-controls/ros2_controllers/blob/master/admittance_controller/src/admittance_controller_parameters.yaml#L155-L159), where the use of this parameter would be [here](https://github.com/ros-controls/ros2_controllers/blob/master/admittance_controller/include/admittance_controller/admittance_rule_impl.hpp#L169-L172).', 'comment_created': datetime.datetime(2023, 4, 10, 15, 26, 31, tzinfo=datetime.timezone.utc), 'commenter': 'sea-bass', 'type': 'User'}, {'comment_id': 1161867284, 'comment_body': 'There is a PR going to make that a parameter .\r\nhttps://github.com/ros-planning/moveit2/pull/2091\r\nIs this what you are referring to ? ', 'comment_created': datetime.datetime(2023, 4, 10, 16, 22, 16, tzinfo=datetime.timezone.utc), 'commenter': 'ibrahiminfinite', 'type': 'User'}, {'comment_id': 1161903621, 'comment_body': 'Thanks !\r\nWill add that here as well .', 'comment_created': datetime.datetime(2023, 4, 10, 17, 7, 34, tzinfo=datetime.timezone.utc), 'commenter': 'ibrahiminfinite', 'type': 'User'}, {'comment_id': 1166922266, 'comment_body': '@sea-bass  #2114  and #2091  have taken care of this.', 'comment_created': datetime.datetime(2023, 4, 14, 14, 39, 29, tzinfo=datetime.timezone.utc), 'commenter': 'ibrahiminfinite', 'type': 'User'}, {'comment_id': 1171696403, 'comment_body': 'Add this in alphabetical order, so before `geometry_msgs`', 'comment_created': datetime.datetime(2023, 4, 19, 18, 7, 23, tzinfo=datetime.timezone.utc), 'commenter': 'sea-bass', 'type': 'User'}, {'comment_id': 1171699079, 'comment_body': 'Seems to be a lingering debug statement that should probably be removed', 'comment_created': datetime.datetime(2023, 4, 19, 18, 10, 18, tzinfo=datetime.timezone.utc), 'commenter': 'sea-bass', 'type': 'User'}, {'comment_id': 1171699962, 'comment_body': 'If this is in the constructor, does it mean that none of the parameters can be dynamically updated at runtime?\r\n\r\nEDIT: Ah, never mind, I see `updateParams()` now.\r\n\r\n', 'comment_created': datetime.datetime(2023, 4, 19, 18, 10, 59, tzinfo=datetime.timezone.utc), 'commenter': 'sea-bass', 'type': 'User'}, {'comment_id': 1171702895, 'comment_body': 'not necessarily for this PR, but is this where we would choose to add more parameters that we would like to be dynamically settable in future?\r\n\r\nIf so, worth saying that in the header file docstring for this?', 'comment_created': datetime.datetime(2023, 4, 19, 18, 14, 6, tzinfo=datetime.timezone.utc), 'commenter': 'sea-bass', 'type': 'User'}, {'comment_id': 1171704789, 'comment_body': ""Shall we move this to the very top of the function? Because let's say we eventually have `low_latency_mode` also be responsive to this function, it wouldn't take effect til the next tick."", 'comment_created': datetime.datetime(2023, 4, 19, 18, 16, 6, tzinfo=datetime.timezone.utc), 'commenter': 'sea-bass', 'type': 'User'}, {'comment_id': 1171706295, 'comment_body': 'What needs to be clearly communicated here is that right now, only 2 parameters are actually updated!', 'comment_created': datetime.datetime(2023, 4, 19, 18, 17, 49, tzinfo=datetime.timezone.utc), 'commenter': 'sea-bass', 'type': 'User'}, {'comment_id': 1171712020, 'comment_body': '> not necessarily for this PR, but is this where we would choose to add more parameters that we would like to be dynamically settable in future?\r\n\r\nyes , that is right.\r\nWill add that information in the docstring. Thanks!', 'comment_created': datetime.datetime(2023, 4, 19, 18, 24, 1, tzinfo=datetime.timezone.utc), 'commenter': 'ibrahiminfinite', 'type': 'User'}, {'comment_id': 1171720491, 'comment_body': 'Does the `moveit_common` also need to be moved ?\r\nOr is that put there on purpose ?', 'comment_created': datetime.datetime(2023, 4, 19, 18, 32, 19, tzinfo=datetime.timezone.utc), 'commenter': 'ibrahiminfinite', 'type': 'User'}, {'comment_id': 1171723254, 'comment_body': 'Not sure. It seems to be at the top for most moveit packages, so maybe just leave that one there?', 'comment_created': datetime.datetime(2023, 4, 19, 18, 35, 32, tzinfo=datetime.timezone.utc), 'commenter': 'sea-bass', 'type': 'User'}, {'comment_id': 1171733403, 'comment_body': 'Did not see any issues after I moved it.\r\nIs there anyone who can clarify on this?\r\nFeels weird to leave it like that now. ', 'comment_created': datetime.datetime(2023, 4, 19, 18, 46, 40, tzinfo=datetime.timezone.utc), 'commenter': 'ibrahiminfinite', 'type': 'User'}, {'comment_id': 1171735219, 'comment_body': ""I'd be surprised if order mattered.\r\n\r\nPersonally, I'd prefer alphabetized but no strong opinion"", 'comment_created': datetime.datetime(2023, 4, 19, 18, 48, 44, tzinfo=datetime.timezone.utc), 'commenter': 'AndyZe', 'type': 'User'}, {'comment_id': 1171736699, 'comment_body': ""I don't think there's any issues with rearranging things in `package.xml`. Typically they are alphabetized, but I'm sure there was a decision to have `moveit_common` at the top for some visibility reason. Don't worry about it."", 'comment_created': datetime.datetime(2023, 4, 19, 18, 50, 25, tzinfo=datetime.timezone.utc), 'commenter': 'sea-bass', 'type': 'User'}, {'comment_id': 1172896803, 'comment_body': 'alphabetize plz', 'comment_created': datetime.datetime(2023, 4, 20, 17, 27, 33, tzinfo=datetime.timezone.utc), 'commenter': 'AndyZe', 'type': 'User'}, {'comment_id': 1172897830, 'comment_body': '```suggestion\r\n// Auto-generated\r\n#include <moveit_servo_lib_parameters.hpp>\r\n```', 'comment_created': datetime.datetime(2023, 4, 20, 17, 28, 9, tzinfo=datetime.timezone.utc), 'commenter': 'AndyZe', 'type': 'User'}, {'comment_id': 1172899631, 'comment_body': ""Nitpick: it's pretty obvious what these are from the name I think, the comment isn't needed.\r\n\r\n```suggestion\r\n  servo::Params servo_params_;\r\n```"", 'comment_created': datetime.datetime(2023, 4, 20, 17, 30, 5, tzinfo=datetime.timezone.utc), 'commenter': 'AndyZe', 'type': 'User'}, {'comment_id': 1172900365, 'comment_body': 'Any reason to have `shared_ptr` or can it be a `unique_ptr`?', 'comment_created': datetime.datetime(2023, 4, 20, 17, 30, 53, tzinfo=datetime.timezone.utc), 'commenter': 'AndyZe', 'type': 'User'}, {'comment_id': 1172901240, 'comment_body': 'I wonder if we should be concerned with thread safety here? B/c at least 2 threads will have access to this ParamListener at once (PoseTracker and ServoCalcs).\r\n\r\n@tylerjw does ParamListener happen to be threadsafe?', 'comment_created': datetime.datetime(2023, 4, 20, 17, 31, 44, tzinfo=datetime.timezone.utc), 'commenter': 'AndyZe', 'type': 'User'}, {'comment_id': 1172904486, 'comment_body': ""It's good that you're creating a copy of these parameters so we don't have to worry about thread safety."", 'comment_created': datetime.datetime(2023, 4, 20, 17, 35, 28, tzinfo=datetime.timezone.utc), 'commenter': 'AndyZe', 'type': 'User'}, {'comment_id': 1172909204, 'comment_body': ""I believe this parameter actually isn't being used anymore. Please do `grep -r num_outgoing_halt_msgs_to_publish` then delete any references to it."", 'comment_created': datetime.datetime(2023, 4, 20, 17, 40, 43, tzinfo=datetime.timezone.utc), 'commenter': 'AndyZe', 'type': 'User'}, {'comment_id': 1172909728, 'comment_body': '```suggestion\r\n// Auto-generated\r\n#include <moveit_servo_lib_parameters.hpp>\r\n```', 'comment_created': datetime.datetime(2023, 4, 20, 17, 41, 20, tzinfo=datetime.timezone.utc), 'commenter': 'AndyZe', 'type': 'User'}, {'comment_id': 1172937922, 'comment_body': 'We are passing the `ParamListener` when creating the `Servo` object.\r\n`unique_ptr` reference might be fine as long as the original copy stays in scope.\r\nWhich is the case for pose tracking demo.\r\nNot sure if there will be a case were the `ParamListener` is created in a function and passed and the function goes out of scope and destroys the `ParamListener` `unique_ptr`', 'comment_created': datetime.datetime(2023, 4, 20, 18, 12, 42, tzinfo=datetime.timezone.utc), 'commenter': 'ibrahiminfinite', 'type': 'User'}, {'comment_id': 1172941908, 'comment_body': '`PoseTracker` only uses `ParamListener` at construction to make a copy of the Params.\r\nAnd then it is passed to `Servo` .\r\nSo this should not be a problem I think.', 'comment_created': datetime.datetime(2023, 4, 20, 18, 17, 12, tzinfo=datetime.timezone.utc), 'commenter': 'ibrahiminfinite', 'type': 'User'}, {'comment_id': 1173043080, 'comment_body': ""So, the shared_ptr is always passed by reference. That means, the reference count isn't incremented --> no need to use a shared_ptr here. If you agree, let's change this to a unique_ptr"", 'comment_created': datetime.datetime(2023, 4, 20, 20, 10, 36, tzinfo=datetime.timezone.utc), 'commenter': 'AndyZe', 'type': 'User'}, {'comment_id': 1173048678, 'comment_body': 'I agree with you about thread safety  :+1:  It seems fine since `servo_calcs.cpp` is the only thread that will be updating at runtime.', 'comment_created': datetime.datetime(2023, 4, 20, 20, 15, 36, tzinfo=datetime.timezone.utc), 'commenter': 'AndyZe', 'type': 'User'}, {'comment_id': 1173282171, 'comment_body': ""> So, the shared_ptr is always passed by reference. That means, the reference count isn't incremented\r\n\r\nEven though it is passed by reference to `Servo` , this is passsed to `ServoCalcs` and  a copy of the `ParamListener`  is created there as `ServoCalcs` needs to have its own copy to check for updates. `Servo` also makes a copy which is used in the `getParameters()` method. \r\nIf I am correct, the copy of `shared_ptr` [here](https://github.com/ibrahiminfinite/moveit2/blob/4b1083c8b841624462438818ce2a40733ae4cd08/moveit_ros/moveit_servo/src/servo_calcs.cpp#L79) increments the reference count. "", 'comment_created': datetime.datetime(2023, 4, 21, 4, 5, 31, tzinfo=datetime.timezone.utc), 'commenter': 'ibrahiminfinite', 'type': 'User'}, {'comment_id': 1173309688, 'comment_body': 'I looked into it a bit more and turns out we never really needed the `shared_ptr`.\r\nChanged the order of some of the initializations and that removed the need for a `shared_ptr`.\r\nNow there is only a `unqiue_ptr` passed (`std::move`) through all the classes till it reaches `ServoCalcs` \r\nAll classes except `ServoCalcs` only need a copy of `servo::Params` and not the `ParamListener` itself.\r\nNo more thread safety issues. \r\n', 'comment_created': datetime.datetime(2023, 4, 21, 5, 11, 20, tzinfo=datetime.timezone.utc), 'commenter': 'ibrahiminfinite', 'type': 'User'}, {'comment_id': 1173756239, 'comment_body': ""that's really great!"", 'comment_created': datetime.datetime(2023, 4, 21, 13, 17, 5, tzinfo=datetime.timezone.utc), 'commenter': 'AndyZe', 'type': 'User'}, {'comment_id': 1173804705, 'comment_body': 'I missed why we needed this function when `generate_parameter_library` already has parameter validators.\r\n\r\nMight be worth saying in the comment that this validates not the individual parameters, as this is captured in the YAML file itself, but any additional parameters that are interdependent (like the self vs scene collision threshold, etc.)', 'comment_created': datetime.datetime(2023, 4, 21, 14, 0, 6, tzinfo=datetime.timezone.utc), 'commenter': 'sea-bass', 'type': 'User'}, {'comment_id': 1173805669, 'comment_body': '```suggestion\r\n                         ""Check the parameters YAML file used to launch this node."");\r\n```\r\n\r\nSame with the others.', 'comment_created': datetime.datetime(2023, 4, 21, 14, 0, 59, tzinfo=datetime.timezone.utc), 'commenter': 'sea-bass', 'type': 'User'}, {'comment_id': 1173806790, 'comment_body': 'More importantly, should this really have a void return type? Or should some errors return a boolean (true/false), where false should prevent servo from actually running?', 'comment_created': datetime.datetime(2023, 4, 21, 14, 2, 1, tzinfo=datetime.timezone.utc), 'commenter': 'sea-bass', 'type': 'User'}, {'comment_id': 1173842732, 'comment_body': 'Good catch! Thanks\r\nIn the [old implementation](https://github.com/ros-planning/moveit2/blob/acbf3770763e58e4f86ce0dea251a50cd4987fe6/moveit_ros/moveit_servo/src/servo_node.cpp#L81) the behaviour was to throw an error.\r\nThis was what I intented as well but looks like I forgot to `throw` the error and only printed it.', 'comment_created': datetime.datetime(2023, 4, 21, 14, 29, 47, tzinfo=datetime.timezone.utc), 'commenter': 'ibrahiminfinite', 'type': 'User'}, {'comment_id': 1173884392, 'comment_body': 'Maybe it is better to move to this validation to `ServoNode` instead ?\r\nThere is no reason to delay the validation till the construction of `ServoCalcs`', 'comment_created': datetime.datetime(2023, 4, 21, 15, 4, 48, tzinfo=datetime.timezone.utc), 'commenter': 'ibrahiminfinite', 'type': 'User'}, {'comment_id': 1173898386, 'comment_body': 'If this throws, then the logger messages above should either be `RCLCPP_ERROR` or `RCLCPP_FATAL`, not warnings, right?', 'comment_created': datetime.datetime(2023, 4, 21, 15, 17, 52, tzinfo=datetime.timezone.utc), 'commenter': 'sea-bass', 'type': 'User'}, {'comment_id': 1173902040, 'comment_body': 'Not sure about that, it was like this in the old implementation.\r\nSo I followed that pattern.', 'comment_created': datetime.datetime(2023, 4, 21, 15, 21, 32, tzinfo=datetime.timezone.utc), 'commenter': 'ibrahiminfinite', 'type': 'User'}, {'comment_id': 1173902114, 'comment_body': 'Recommend taking some extra time in documenting things and checking for typos and punctuation -- there is no hurry to turn around feedback, and it takes longer to go back and forth multiple times in the long run.\r\n\r\nThis is just an idea:\r\n\r\n```suggestion\r\n   * \\brief Most servo parameters are individually validated using the validation methods in `generate_parameter_library`, with limits specified in the parameters YAML file.\r\n   * This method performs additional validation for parameters whose values depend on each other. \r\n```\r\n\r\n', 'comment_created': datetime.datetime(2023, 4, 21, 15, 21, 38, tzinfo=datetime.timezone.utc), 'commenter': 'sea-bass', 'type': 'User'}, {'comment_id': 1173923149, 'comment_body': 'Got it, will take care.\r\nThanks.', 'comment_created': datetime.datetime(2023, 4, 21, 15, 42, 4, tzinfo=datetime.timezone.utc), 'commenter': 'ibrahiminfinite', 'type': 'User'}, {'comment_id': 1173933053, 'comment_body': 'Should the failed checks be considered as errors ?\r\nor can we have a single error message at the end before throwing?\r\nStating servo failed to initialize due to invalid parameter values', 'comment_created': datetime.datetime(2023, 4, 21, 15, 52, 58, tzinfo=datetime.timezone.utc), 'commenter': 'ibrahiminfinite', 'type': 'User'}, {'comment_id': 1173936910, 'comment_body': 'You can definitely do that. Start with an empty `std::string` and append any of the logger messages to it, then if you throw an error you tack that string on there.', 'comment_created': datetime.datetime(2023, 4, 21, 15, 57, 8, tzinfo=datetime.timezone.utc), 'commenter': 'sea-bass', 'type': 'User'}, {'comment_id': 1173939338, 'comment_body': 'Heads-up, clang-tidy may yell at you if you use the `+` operator for this. So do:\r\n\r\n```\r\nstd::string error_text = """";\r\n\r\nif (some_bad_thing_happened)\r\n{\r\n    my_error = ""Everything is broken."";\r\n    RCLCPP_ERROR(LOGGER, my_error.c_str());\r\n    my_error.append(error_text).append(""\\n"");\r\n    has_error = true;\r\n}\r\n\r\nif (has_error)\r\n{\r\n    throw std::runtime_error(std::string(""Failed with reason: "").append(error_text));\r\n}\r\n```', 'comment_created': datetime.datetime(2023, 4, 21, 15, 59, 56, tzinfo=datetime.timezone.utc), 'commenter': 'sea-bass', 'type': 'User'}, {'comment_id': 1173949607, 'comment_body': 'Feels like this would make it less readable.\r\nSince multiple checks could fail and the error message will get quite big (huge multi-line error message)\r\nI think we can convert all the warnings to errors instead and just throw with a `Servo failed to initialize : Invalid parameters` message.', 'comment_created': datetime.datetime(2023, 4, 21, 16, 11, 37, tzinfo=datetime.timezone.utc), 'commenter': 'ibrahiminfinite', 'type': 'User'}, {'comment_id': 1173950400, 'comment_body': ""That's fine too so long as the errors are being logged"", 'comment_created': datetime.datetime(2023, 4, 21, 16, 12, 35, tzinfo=datetime.timezone.utc), 'commenter': 'sea-bass', 'type': 'User'}, {'comment_id': 1176544847, 'comment_body': 'CI suggests this\r\n\r\n```suggestion\r\n  void validateParams(const servo::Params&);\r\n```', 'comment_created': datetime.datetime(2023, 4, 25, 13, 46, 48, tzinfo=datetime.timezone.utc), 'commenter': 'AndyZe', 'type': 'User'}, {'comment_id': 1176545170, 'comment_body': '```suggestion\r\nvoid ServoNode::validateParams(const servo::Params& servo_params)\r\n```', 'comment_created': datetime.datetime(2023, 4, 25, 13, 47, 2, tzinfo=datetime.timezone.utc), 'commenter': 'AndyZe', 'type': 'User'}, {'comment_id': 1176599998, 'comment_body': ""Can someone apply this suggestion? It's one last clang-tidy failure\r\n\r\n```suggestion\r\n  void validateParams(const servo::Params& servo_params);\r\n```"", 'comment_created': datetime.datetime(2023, 4, 25, 14, 25, 29, tzinfo=datetime.timezone.utc), 'commenter': 'sea-bass', 'type': 'User'}]","[{'commit_sha': 'b733b6775856816d1934ef8dd4cf4d497efd69e7', 'committer_username': 'ibrahiminfinite', 'committer_name': 'V Mohammed Ibrahim', 'committer_email': None, 'commit_date': datetime.datetime(2015, 5, 10, 4, 26, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '680bfbe100b94c77c8e1025d12c9ffbd77c730ba', 'committer_username': 'ibrahiminfinite', 'committer_name': 'V Mohammed Ibrahim', 'committer_email': None, 'commit_date': datetime.datetime(2015, 5, 10, 4, 26, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '000dd41bf2dd186b5814b631aa5f121c0196c157', 'committer_username': 'ibrahiminfinite', 'committer_name': 'V Mohammed Ibrahim', 'committer_email': None, 'commit_date': datetime.datetime(2015, 5, 10, 4, 26, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5e4ff5e93bc6c27e0c66139cde33baa7fc22ce0d', 'committer_username': 'ibrahiminfinite', 'committer_name': 'V Mohammed Ibrahim', 'committer_email': None, 'commit_date': datetime.datetime(2015, 5, 10, 4, 26, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8d8cbf2f8fed3def7ebc8eb2fd32faa884f68e2f', 'committer_username': 'ibrahiminfinite', 'committer_name': 'V Mohammed Ibrahim', 'committer_email': None, 'commit_date': datetime.datetime(2015, 5, 10, 4, 26, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ad6704759b60c415840d0aa68f9d345ac8b84d88', 'committer_username': 'ibrahiminfinite', 'committer_name': 'V Mohammed Ibrahim', 'committer_email': None, 'commit_date': datetime.datetime(2015, 5, 10, 4, 26, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c25148f694fc70bac6e879d3610cf4dd4464479e', 'committer_username': 'ibrahiminfinite', 'committer_name': 'V Mohammed Ibrahim', 'committer_email': None, 'commit_date': datetime.datetime(2015, 5, 10, 4, 26, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '237d178b9c9ee115f9735b7f8ee3597fa8bfde20', 'committer_username': 'ibrahiminfinite', 'committer_name': 'V Mohammed Ibrahim', 'committer_email': None, 'commit_date': datetime.datetime(2015, 5, 10, 4, 26, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd9288b3e2a9551ac47398d667b2b1eb302baf86b', 'committer_username': 'ibrahiminfinite', 'committer_name': 'V Mohammed Ibrahim', 'committer_email': None, 'commit_date': datetime.datetime(2015, 5, 10, 4, 26, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1d589c27142f805a1964d179802e1b9614047e8a', 'committer_username': 'ibrahiminfinite', 'committer_name': 'V Mohammed Ibrahim', 'committer_email': None, 'commit_date': datetime.datetime(2015, 5, 10, 4, 26, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c7653d7f56cb229e135dabb74c8c1d7509cf70e6', 'committer_username': 'ibrahiminfinite', 'committer_name': 'V Mohammed Ibrahim', 'committer_email': None, 'commit_date': datetime.datetime(2015, 5, 10, 4, 26, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b5c8740740866a06b282dad574a30d8c76d77864', 'committer_username': 'ibrahiminfinite', 'committer_name': 'V Mohammed Ibrahim', 'committer_email': None, 'commit_date': datetime.datetime(2015, 5, 10, 4, 26, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '952cdacffea896bf134984237cf4032192804f10', 'committer_username': 'ibrahiminfinite', 'committer_name': 'V Mohammed Ibrahim', 'committer_email': None, 'commit_date': datetime.datetime(2015, 5, 10, 4, 26, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '04d37dce63b9d8763cca89f3df9245c5bf58d9e7', 'committer_username': 'ibrahiminfinite', 'committer_name': 'V Mohammed Ibrahim', 'committer_email': None, 'commit_date': datetime.datetime(2015, 5, 10, 4, 26, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '089dbf7276b499138024ab08f2bcc54c8b68283d', 'committer_username': 'ibrahiminfinite', 'committer_name': 'V Mohammed Ibrahim', 'committer_email': None, 'commit_date': datetime.datetime(2015, 5, 10, 4, 26, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd09d1fbe10a69a121905a78b350c3ce93b5f8319', 'committer_username': 'ibrahiminfinite', 'committer_name': 'V Mohammed Ibrahim', 'committer_email': None, 'commit_date': datetime.datetime(2015, 5, 10, 4, 26, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '760f5cdf7ef7b3dac187977900750d1140bfe79d', 'committer_username': 'ibrahiminfinite', 'committer_name': 'V Mohammed Ibrahim', 'committer_email': None, 'commit_date': datetime.datetime(2015, 5, 10, 4, 26, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '17a507631f12f9ea5794b68b096fdfecfacf0ea9', 'committer_username': 'ibrahiminfinite', 'committer_name': 'V Mohammed Ibrahim', 'committer_email': None, 'commit_date': datetime.datetime(2015, 5, 10, 4, 26, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dd49678b35f16588341a5bff79b3887404826a44', 'committer_username': 'ibrahiminfinite', 'committer_name': 'V Mohammed Ibrahim', 'committer_email': None, 'commit_date': datetime.datetime(2015, 5, 10, 4, 26, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '872c78276dae9828509e05d91de807e9e1194b93', 'committer_username': 'ibrahiminfinite', 'committer_name': 'V Mohammed Ibrahim', 'committer_email': None, 'commit_date': datetime.datetime(2015, 5, 10, 4, 26, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e30b46b2ff85eafe6633e502f93b1d9304d73cad', 'committer_username': 'ibrahiminfinite', 'committer_name': 'V Mohammed Ibrahim', 'committer_email': None, 'commit_date': datetime.datetime(2015, 5, 10, 4, 26, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '03cb4ea784e399fe51a598dd472085405ffc0fba', 'committer_username': 'ibrahiminfinite', 'committer_name': 'V Mohammed Ibrahim', 'committer_email': None, 'commit_date': datetime.datetime(2015, 5, 10, 4, 26, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bee20dcb4724fbb8dee9b2ecc13f7148de76e255', 'committer_username': 'ibrahiminfinite', 'committer_name': 'V Mohammed Ibrahim', 'committer_email': None, 'commit_date': datetime.datetime(2015, 5, 10, 4, 26, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cdfa552df3dd7d4332b56e18cd81402f8eac04fd', 'committer_username': 'ibrahiminfinite', 'committer_name': 'V Mohammed Ibrahim', 'committer_email': None, 'commit_date': datetime.datetime(2015, 5, 10, 4, 26, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5b26a8a954427d84d24fceae870b5d913f7b8910', 'committer_username': 'ibrahiminfinite', 'committer_name': 'V Mohammed Ibrahim', 'committer_email': None, 'commit_date': datetime.datetime(2015, 5, 10, 4, 26, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd38b01d6d866e33c2c5098463a84782053abc407', 'committer_username': 'ibrahiminfinite', 'committer_name': 'V Mohammed Ibrahim', 'committer_email': None, 'commit_date': datetime.datetime(2015, 5, 10, 4, 26, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2ed0fc62556c349b9437b7b0904c66a18e3f363c', 'committer_username': 'ibrahiminfinite', 'committer_name': 'V Mohammed Ibrahim', 'committer_email': None, 'commit_date': datetime.datetime(2015, 5, 10, 4, 26, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6ab4db8fc8dd8e662804e9659d31081df34bbfa4', 'committer_username': 'ibrahiminfinite', 'committer_name': 'V Mohammed Ibrahim', 'committer_email': None, 'commit_date': datetime.datetime(2015, 5, 10, 4, 26, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '531a2d1bc5a0c2fde393df3e1a0585b5b4620574', 'committer_username': 'ibrahiminfinite', 'committer_name': 'V Mohammed Ibrahim', 'committer_email': None, 'commit_date': datetime.datetime(2015, 5, 10, 4, 26, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e4ac3120d810c9eefbdfd37811020a585c8a2f22', 'committer_username': 'ibrahiminfinite', 'committer_name': 'V Mohammed Ibrahim', 'committer_email': None, 'commit_date': datetime.datetime(2015, 5, 10, 4, 26, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5e276e9e95aab7d2caa5ecf5b4db28591aad10dc', 'committer_username': 'ibrahiminfinite', 'committer_name': 'V Mohammed Ibrahim', 'committer_email': None, 'commit_date': datetime.datetime(2015, 5, 10, 4, 26, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '69d64bc694037c31dc1a0f28006163ff51e019b3', 'committer_username': 'ibrahiminfinite', 'committer_name': 'V Mohammed Ibrahim', 'committer_email': None, 'commit_date': datetime.datetime(2015, 5, 10, 4, 26, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '51f22bacb4922ed5e5e6f12fc8aea236be2a3978', 'committer_username': 'ibrahiminfinite', 'committer_name': 'V Mohammed Ibrahim', 'committer_email': None, 'commit_date': datetime.datetime(2015, 5, 10, 4, 26, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '87056ed4f5647fc32de125d87d1c10130908d5c1', 'committer_username': 'ibrahiminfinite', 'committer_name': 'V Mohammed Ibrahim', 'committer_email': None, 'commit_date': datetime.datetime(2015, 5, 10, 4, 26, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '45168b8e6a999af399128b0d4d2b01368cefcdc0', 'committer_username': 'ibrahiminfinite', 'committer_name': 'V Mohammed Ibrahim', 'committer_email': None, 'commit_date': datetime.datetime(2015, 5, 10, 4, 26, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dbb11a97d3920d50b1ca9c2601ede0aff3404062', 'committer_username': 'ibrahiminfinite', 'committer_name': 'V Mohammed Ibrahim', 'committer_email': None, 'commit_date': datetime.datetime(2015, 5, 10, 4, 26, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0efd6855d0aca28fc226b09f41d4564a865951dc', 'committer_username': 'ibrahiminfinite', 'committer_name': 'V Mohammed Ibrahim', 'committer_email': None, 'commit_date': datetime.datetime(2015, 5, 10, 4, 26, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '057137c19d62c51521919768566dd326c8ddbec8', 'committer_username': 'ibrahiminfinite', 'committer_name': 'V Mohammed Ibrahim', 'committer_email': None, 'commit_date': datetime.datetime(2015, 5, 10, 4, 26, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1587ea2069ba7b367ba7b4a6b5ad83e16b125eb2', 'committer_username': 'ibrahiminfinite', 'committer_name': 'V Mohammed Ibrahim', 'committer_email': None, 'commit_date': datetime.datetime(2015, 5, 10, 4, 26, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '015dd4a57d9b3402659dafdde6b88c0f2bc5b73b', 'committer_username': 'ibrahiminfinite', 'committer_name': 'V Mohammed Ibrahim', 'committer_email': None, 'commit_date': datetime.datetime(2015, 5, 10, 4, 26, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '92ce6706241f805b607bef87bfd816125d89d7b6', 'committer_username': 'ibrahiminfinite', 'committer_name': 'V Mohammed Ibrahim', 'committer_email': None, 'commit_date': datetime.datetime(2015, 5, 10, 4, 26, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cee7e0f9634bcb14ba6f0a3e215e8d2e2ab91abb', 'committer_username': 'ibrahiminfinite', 'committer_name': 'V Mohammed Ibrahim', 'committer_email': None, 'commit_date': datetime.datetime(2015, 5, 10, 4, 26, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7da9060cfca841411f20c78c6047e70e9e181524', 'committer_username': 'ibrahiminfinite', 'committer_name': 'V Mohammed Ibrahim', 'committer_email': None, 'commit_date': datetime.datetime(2015, 5, 10, 4, 26, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5eed0f0397913cb56756a5e3d7cf005e26407f63', 'committer_username': 'ibrahiminfinite', 'committer_name': 'V Mohammed Ibrahim', 'committer_email': None, 'commit_date': datetime.datetime(2015, 5, 10, 4, 26, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4762cf4fb9ca2d4c4b19208b77548fcfa29db9e4', 'committer_username': 'ibrahiminfinite', 'committer_name': 'V Mohammed Ibrahim', 'committer_email': None, 'commit_date': datetime.datetime(2015, 5, 10, 4, 26, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'afadf211252d39492710e8553ce8dd7f2b939412', 'committer_username': 'ibrahiminfinite', 'committer_name': 'V Mohammed Ibrahim', 'committer_email': None, 'commit_date': datetime.datetime(2015, 5, 10, 4, 26, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '786e3ad97a7f74cf62023183e1ba50bd49474983', 'committer_username': 'ibrahiminfinite', 'committer_name': 'V Mohammed Ibrahim', 'committer_email': None, 'commit_date': datetime.datetime(2015, 5, 10, 4, 26, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b12d8a6fcdeffebc95e497fd78c647bbe80e887a', 'committer_username': 'ibrahiminfinite', 'committer_name': 'V Mohammed Ibrahim', 'committer_email': None, 'commit_date': datetime.datetime(2015, 5, 10, 4, 26, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e09a4d940909a7359ea59eb320d3f3ea7fbef69d', 'committer_username': 'ibrahiminfinite', 'committer_name': 'V Mohammed Ibrahim', 'committer_email': None, 'commit_date': datetime.datetime(2015, 5, 10, 4, 26, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd774d2c49e7f5165b5d9c238f2d892bdd0879cf9', 'committer_username': 'AndyZe', 'committer_name': 'AndyZe', 'committer_email': None, 'commit_date': datetime.datetime(2015, 3, 3, 2, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6703029459471282bc4bb558eb83045140f4ac21', 'committer_username': 'AndyZe', 'committer_name': 'AndyZe', 'committer_email': None, 'commit_date': datetime.datetime(2015, 3, 3, 2, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7f13e3fc1c86d8ef10f3bd641915584c9f64d76f', 'committer_username': 'AndyZe', 'committer_name': 'AndyZe', 'committer_email': None, 'commit_date': datetime.datetime(2015, 3, 3, 2, 16, tzinfo=datetime.timezone.utc)}]",V Mohammed Ibrahim,12377945,,User,,37,,5,8
1377022672,[Servo] Refactoring servo,"### Description

This is an effort supported by GSoC 2023 to refactor the MoveIt Servo package to improve its usability and performance.
The primary focus is on implementing clearly seperated and performant C++ and ROS APIs to interact with Servo. 
An effort has also been made to make the logic more readable.

The moveit_msgs PR https://github.com/ros-planning/moveit_msgs/pull/161 must be merged before this can go in.

Please feel free to test it out and provide your feedback.

JontJog: [Video](https://youtu.be/P2640BoFM9Q), [Code](https://github.com/ibrahiminfinite/moveit2/blob/new_servo/moveit_ros/moveit_servo/demos/cpp_interface/demo_joint_jog.cpp)
Twist: [Video](https://youtu.be/IxwDHgGpun4), [Code](https://github.com/ibrahiminfinite/moveit2/blob/new_servo/moveit_ros/moveit_servo/demos/cpp_interface/demo_twist.cpp)
Pose: [Video](https://youtu.be/8RVPj8hV2FA), [Code](https://github.com/ibrahiminfinite/moveit2/blob/new_servo/moveit_ros/moveit_servo/demos/cpp_interface/demo_pose.cpp) 


---

Using the ROS APIs 

To run the demo: 

**NOTE : The moveit_msgs package should be updated to  https://github.com/ibrahiminfinite/moveit_msgs/tree/new_servo**

```
ros2 launch moveit_servo demo_ros_api.launch.py
```

Once the demo is running, the jointjog and twist inputs can be tried out using `demos/servo_keyboard_input.cpp` by running.

```
ros2 run moveit_servo servo_keyboard_input
```

The servo loop runs automatically on Servo instance creation.
Servo can be paused/ unpaused using the bool type service `/servo_node/pause_servo`. 
There is no notion of start/stop in the current implementation.

Before sending any commands, you should set the command type for servo using the `/servo_node/switch_command_type` service.

0 - JointJog
1 - Twist
2 - Pose

So if you want to send pose command

```
ros2 service call /servo_node/switch_command_type moveit_msgs/srv/ServoCommandType ""{command_type: 2}""
```
And then you can send the specific type of commands to their respective topics:
```
/servo_node/delta_joint_cmds
/servo_node/delta_twist_cmds
/servo_node/pose_target_cmds
```
---


Timings for C++ API calls:

JointJog ~ 100 us
Twist ~ 350 us
Pose ~ 350 us

---

TODO :
- [x] C++ API demos
- [x] Tests for C++ APIs
- [x] ROS input type switching service
- [x] ROS API pause service
- [x] ROS API demo
- [x] Tests for ROS APIs 
--------------------------------

- [x] Keyboard teleop demo
-----",True,2224,https://api.github.com/repos/moveit/moveit2/pulls/2224,https://github.com/moveit/moveit2/pull/2224,closed,4486,5316,60,55,42,243,0,0,[],2023-06-03 14:08:47+00:00,2023-08-07 16:12:26+00:00,5623419.0,"65 days, 2:03:39","[{'comment_id': 1220244409, 'comment_body': 'you could delete all of these pose tracking parameters since we expect them to change significantly', 'comment_created': datetime.datetime(2023, 6, 6, 19, 58, 30, tzinfo=datetime.timezone.utc), 'commenter': 'AndyZe', 'type': 'User'}, {'comment_id': 1220246582, 'comment_body': 'Use an ""anonymous namespace"" to ensure this stays local to this file.\r\n\r\n```suggestion\r\nnamespace\r\n{\r\nconst rclcpp::Logger LOGGER = rclcpp::get_logger(""moveit_servo.joint_jog_demo"");\r\n}\r\n```', 'comment_created': datetime.datetime(2023, 6, 6, 19, 59, 58, tzinfo=datetime.timezone.utc), 'commenter': 'AndyZe', 'type': 'User'}, {'comment_id': 1220253098, 'comment_body': '```suggestion\r\n  rclcpp::Publisher<trajectory_msgs::msg::JointTrajectory>::SharedPtr trajectory_outgoing_cmd_pub = servo_node->create_publisher<trajectory_msgs::msg::JointTrajectory>(\r\n      servo_params.command_out_topic, rclcpp::SystemDefaultsQoS());\r\n```', 'comment_created': datetime.datetime(2023, 6, 6, 20, 2, 32, tzinfo=datetime.timezone.utc), 'commenter': 'AndyZe', 'type': 'User'}, {'comment_id': 1220254677, 'comment_body': ""Seems like this line doesn't do anything?\r\n\r\n```suggestion\r\n```"", 'comment_created': datetime.datetime(2023, 6, 6, 20, 3, 41, tzinfo=datetime.timezone.utc), 'commenter': 'AndyZe', 'type': 'User'}, {'comment_id': 1220255328, 'comment_body': '```suggestion\r\n    vec << 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0;  // rad/s\r\n```', 'comment_created': datetime.datetime(2023, 6, 6, 20, 4, 13, tzinfo=datetime.timezone.utc), 'commenter': 'AndyZe', 'type': 'User'}, {'comment_id': 1220257320, 'comment_body': 'I believe these are unused but please double-check.\r\n\r\n```suggestion\r\n#include <chrono>\r\n#include <rclcpp/rclcpp.hpp>\r\n#include <moveit_servo/servo.hpp>\r\n#include <moveit_servo/utils.hpp>\r\n```', 'comment_created': datetime.datetime(2023, 6, 6, 20, 5, 42, tzinfo=datetime.timezone.utc), 'commenter': 'AndyZe', 'type': 'User'}, {'comment_id': 1220260361, 'comment_body': '```suggestion\r\n  Eigen::VectorXd deltaFromIkSolver(const Eigen::VectorXd& cartesian_position_delta);\r\n```', 'comment_created': datetime.datetime(2023, 6, 6, 20, 7, 48, tzinfo=datetime.timezone.utc), 'commenter': 'AndyZe', 'type': 'User'}, {'comment_id': 1220261285, 'comment_body': ""Check if these are used. I don't see why they would be.\r\n```suggestion\r\n```"", 'comment_created': datetime.datetime(2023, 6, 6, 20, 8, 15, tzinfo=datetime.timezone.utc), 'commenter': 'AndyZe', 'type': 'User'}, {'comment_id': 1220262214, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2023, 6, 6, 20, 8, 40, tzinfo=datetime.timezone.utc), 'commenter': 'AndyZe', 'type': 'User'}, {'comment_id': 1220264326, 'comment_body': ""Please add a Description field. Something like:\r\n\r\n```suggestion\r\n *      Author    : Brian O'Neil, Andy Zelenak, Blake Anderson, V Mohammed Ibrahim\r\n *      Description    : todo\r\n```"", 'comment_created': datetime.datetime(2023, 6, 6, 20, 9, 53, tzinfo=datetime.timezone.utc), 'commenter': 'AndyZe', 'type': 'User'}, {'comment_id': 1220264979, 'comment_body': 'Seem to be unused. Please double-check your includes.\r\n\r\n```suggestion\r\n#include <variant>\r\n#include <control_toolbox/pid.hpp>\r\n\r\n```', 'comment_created': datetime.datetime(2023, 6, 6, 20, 10, 28, tzinfo=datetime.timezone.utc), 'commenter': 'AndyZe', 'type': 'User'}, {'comment_id': 1220267178, 'comment_body': 'Might as well initialize all of them\r\n\r\n```suggestion\r\n  JOINT_JOG = 0,\r\n  TWIST = 1,\r\n  POSE = 2\r\n```', 'comment_created': datetime.datetime(2023, 6, 6, 20, 12, 1, tzinfo=datetime.timezone.utc), 'commenter': 'AndyZe', 'type': 'User'}, {'comment_id': 1220269175, 'comment_body': 'Is this accurate?\r\n\r\n```suggestion\r\n  // This needs to be threadsafe so it can be updated in realtime with Dynamic Reconfigure\r\n  std::atomic<CommandType> incoming_command_type_;\r\n```', 'comment_created': datetime.datetime(2023, 6, 6, 20, 13, 41, tzinfo=datetime.timezone.utc), 'commenter': 'AndyZe', 'type': 'User'}, {'comment_id': 1220270407, 'comment_body': ""It seems like `smoothing_loader_` could be a local variable, it doesn't need to be a class member.\r\n\r\n```suggestion\r\n  pluginlib::ClassLoader<online_signal_smoothing::SmoothingBaseClass> smoothing_loader_;\r\n```"", 'comment_created': datetime.datetime(2023, 6, 6, 20, 14, 47, tzinfo=datetime.timezone.utc), 'commenter': 'AndyZe', 'type': 'User'}, {'comment_id': 1221985966, 'comment_body': 'mabye this should just be ""moveit_servo_demo_joint_jog"", we know this is a node from context.', 'comment_created': datetime.datetime(2023, 6, 7, 18, 6, 41, tzinfo=datetime.timezone.utc), 'commenter': 'tylerjw', 'type': 'User'}, {'comment_id': 1221993186, 'comment_body': 'Oh , that was a poor naming choice for the variable as well.\r\nSince this is not actually a `Servo` node.', 'comment_created': datetime.datetime(2023, 6, 7, 18, 14, 48, tzinfo=datetime.timezone.utc), 'commenter': 'ibrahiminfinite', 'type': 'User'}, {'comment_id': 1224800059, 'comment_body': 'If you merge/rebase on main, these params should retain the original structure', 'comment_created': datetime.datetime(2023, 6, 9, 21, 36, 6, tzinfo=datetime.timezone.utc), 'commenter': 'sea-bass', 'type': 'User'}, {'comment_id': 1224800910, 'comment_body': 'I feel like for some applications a min of 10 Hz might be too high, I think greater than zero is ok', 'comment_created': datetime.datetime(2023, 6, 9, 21, 37, tzinfo=datetime.timezone.utc), 'commenter': 'sea-bass', 'type': 'User'}, {'comment_id': 1224805438, 'comment_body': 'These `demo` files as they are would actually serve as good integration tests. Basically do something like:\r\n\r\n* Start node\r\n* Record the joint states\r\n* Jog the 7th joint for a while\r\n* Check that the final joint states are different\r\n\r\nUnsure if the timing will be accurate enough to actually check the value of the final joint state (probably not), but having it move at least validates the interface', 'comment_created': datetime.datetime(2023, 6, 9, 21, 41, 13, tzinfo=datetime.timezone.utc), 'commenter': 'sea-bass', 'type': 'User'}, {'comment_id': 1224806449, 'comment_body': 'Add comments', 'comment_created': datetime.datetime(2023, 6, 9, 21, 42, 10, tzinfo=datetime.timezone.utc), 'commenter': 'sea-bass', 'type': 'User'}, {'comment_id': 1224806915, 'comment_body': 'This file also needs more comments', 'comment_created': datetime.datetime(2023, 6, 9, 21, 42, 36, tzinfo=datetime.timezone.utc), 'commenter': 'sea-bass', 'type': 'User'}, {'comment_id': 1224807472, 'comment_body': 'mmmm functional interface! Awesome to see', 'comment_created': datetime.datetime(2023, 6, 9, 21, 43, 22, tzinfo=datetime.timezone.utc), 'commenter': 'sea-bass', 'type': 'User'}, {'comment_id': 1224808613, 'comment_body': ""Don't we want these to always be updated to 1.0 even when `servo_params_.check_collisions` is false?\r\n\r\nMay want to put these outside the `if` above"", 'comment_created': datetime.datetime(2023, 6, 9, 21, 44, 55, tzinfo=datetime.timezone.utc), 'commenter': 'sea-bass', 'type': 'User'}, {'comment_id': 1224810464, 'comment_body': 'Could put this in the utilities file so this looks even cleaner', 'comment_created': datetime.datetime(2023, 6, 9, 21, 46, 38, tzinfo=datetime.timezone.utc), 'commenter': 'sea-bass', 'type': 'User'}, {'comment_id': 1224811214, 'comment_body': 'for consistency call this `jointDeltaFromIkSolver`', 'comment_created': datetime.datetime(2023, 6, 9, 21, 47, 26, tzinfo=datetime.timezone.utc), 'commenter': 'sea-bass', 'type': 'User'}, {'comment_id': 1224811975, 'comment_body': 'really nitpicky, but these comments were generated in the US date format which is Month/Day/Year, so for consistency may be worth switching them around. Sorry...', 'comment_created': datetime.datetime(2023, 6, 9, 21, 48, 35, tzinfo=datetime.timezone.utc), 'commenter': 'sea-bass', 'type': 'User'}, {'comment_id': 1224813636, 'comment_body': 'Since the `command.index()` check is common to all of the cases, you could pull this out one level above, so\r\n\r\n```\r\nif (command.index() == static_cast<size_t>(incoming_type))\r\n{\r\n  if (incoming_type == CommandType::JOINT_JOG)\r\n  {\r\n    ...\r\n```', 'comment_created': datetime.datetime(2023, 6, 9, 21, 50, 30, tzinfo=datetime.timezone.utc), 'commenter': 'sea-bass', 'type': 'User'}, {'comment_id': 1224814634, 'comment_body': ""Can we make this 0.01 a constant that is more visible, rather than hard-coded? I've had to explain this one to a lot of people haha"", 'comment_created': datetime.datetime(2023, 6, 9, 21, 51, 58, tzinfo=datetime.timezone.utc), 'commenter': 'sea-bass', 'type': 'User'}, {'comment_id': 1224815421, 'comment_body': '```suggestion\r\n  // 1. The workflow for when command is not in planning frame.\r\n```', 'comment_created': datetime.datetime(2023, 6, 9, 21, 52, 49, tzinfo=datetime.timezone.utc), 'commenter': 'sea-bass', 'type': 'User'}, {'comment_id': 1224816397, 'comment_body': ""Personal preference, but this lambda is pretty long and at this point I'd prefer a regular function.\r\n\r\nAlso, should this have a timeout just in case?"", 'comment_created': datetime.datetime(2023, 6, 9, 21, 53, 21, tzinfo=datetime.timezone.utc), 'commenter': 'sea-bass', 'type': 'User'}, {'comment_id': 1224817340, 'comment_body': '```suggestion\r\n   * @return The required joint angle deltas.\r\n```', 'comment_created': datetime.datetime(2023, 6, 9, 21, 54, 34, tzinfo=datetime.timezone.utc), 'commenter': 'sea-bass', 'type': 'User'}, {'comment_id': 1224818239, 'comment_body': ""```suggestion\r\n   * \\brief Computes the required change in joint angles for given Cartesian change, using the robot's IK solver.\r\n```"", 'comment_created': datetime.datetime(2023, 6, 9, 21, 55, 21, tzinfo=datetime.timezone.utc), 'commenter': 'sea-bass', 'type': 'User'}, {'comment_id': 1224818539, 'comment_body': 'nit: but Cartesian and Jacobian are both capitalized.', 'comment_created': datetime.datetime(2023, 6, 9, 21, 55, 45, tzinfo=datetime.timezone.utc), 'commenter': 'sea-bass', 'type': 'User'}, {'comment_id': 1224818826, 'comment_body': '```suggestion\r\n   * @param cartesian_position_delta The change in Cartesian position.\r\n```', 'comment_created': datetime.datetime(2023, 6, 9, 21, 56, 5, tzinfo=datetime.timezone.utc), 'commenter': 'sea-bass', 'type': 'User'}, {'comment_id': 1224818980, 'comment_body': 'for consistency call this `jointDeltaFromIKSolver`?', 'comment_created': datetime.datetime(2023, 6, 9, 21, 56, 21, tzinfo=datetime.timezone.utc), 'commenter': 'sea-bass', 'type': 'User'}, {'comment_id': 1225308896, 'comment_body': 'These have been removed.', 'comment_created': datetime.datetime(2023, 6, 10, 11, 42, 8, tzinfo=datetime.timezone.utc), 'commenter': 'ibrahiminfinite', 'type': 'User'}, {'comment_id': 1225309102, 'comment_body': 'All loggers have been put into anonymous namespaces.', 'comment_created': datetime.datetime(2023, 6, 10, 11, 42, 41, tzinfo=datetime.timezone.utc), 'commenter': 'ibrahiminfinite', 'type': 'User'}, {'comment_id': 1225309610, 'comment_body': 'This is here just for convenience to print the status before beginning the demo.', 'comment_created': datetime.datetime(2023, 6, 10, 11, 43, 43, tzinfo=datetime.timezone.utc), 'commenter': 'ibrahiminfinite', 'type': 'User'}, {'comment_id': 1225310038, 'comment_body': 'Removed these as well, since the last update moves away from PID based control.', 'comment_created': datetime.datetime(2023, 6, 10, 11, 44, 41, tzinfo=datetime.timezone.utc), 'commenter': 'ibrahiminfinite', 'type': 'User'}, {'comment_id': 1225310339, 'comment_body': 'It is now local', 'comment_created': datetime.datetime(2023, 6, 10, 11, 45, 21, tzinfo=datetime.timezone.utc), 'commenter': 'ibrahiminfinite', 'type': 'User'}, {'comment_id': 1225310838, 'comment_body': 'These are unused now since support for unitless command is not added yet, so I removed them in the last update.\r\nI am not yet sure on how those should be handled. It does not make sense for servo to directly receive a ""unitless"" command. \r\nThis should probably be handled by a utility function before the command is passed to servo.\r\n', 'comment_created': datetime.datetime(2023, 6, 10, 11, 46, 21, tzinfo=datetime.timezone.utc), 'commenter': 'ibrahiminfinite', 'type': 'User'}, {'comment_id': 1225311518, 'comment_body': 'Done', 'comment_created': datetime.datetime(2023, 6, 10, 11, 47, 51, tzinfo=datetime.timezone.utc), 'commenter': 'ibrahiminfinite', 'type': 'User'}, {'comment_id': 1225312017, 'comment_body': 'Good point.\r\nHave made the change.', 'comment_created': datetime.datetime(2023, 6, 10, 11, 48, 34, tzinfo=datetime.timezone.utc), 'commenter': 'ibrahiminfinite', 'type': 'User'}, {'comment_id': 1225314707, 'comment_body': 'I combined this together with the IK solver and made it into a single method called `jointDeltaFromIK`.\r\nLooks much cleaner overall.', 'comment_created': datetime.datetime(2023, 6, 10, 11, 54, 27, tzinfo=datetime.timezone.utc), 'commenter': 'ibrahiminfinite', 'type': 'User'}, {'comment_id': 1225314953, 'comment_body': 'haha!\r\nDid not notice that, have fixed it for all the files.', 'comment_created': datetime.datetime(2023, 6, 10, 11, 55, 1, tzinfo=datetime.timezone.utc), 'commenter': 'ibrahiminfinite', 'type': 'User'}, {'comment_id': 1225315195, 'comment_body': 'Good catch!\r\nThis helped make the error message more specific as well.', 'comment_created': datetime.datetime(2023, 6, 10, 11, 55, 47, tzinfo=datetime.timezone.utc), 'commenter': 'ibrahiminfinite', 'type': 'User'}, {'comment_id': 1225315563, 'comment_body': '```c++\r\nnamespace\r\n{\r\n// The threshold above which `override_velocity_scaling_factor` will be used instead of computing the scaling from joint bounds.\r\nconst double SCALING_OVERRIDE_THRESHOLD = 0.01;\r\n}  // namespace\r\n\r\n```\r\n\r\nThis should be enough ?', 'comment_created': datetime.datetime(2023, 6, 10, 11, 56, 41, tzinfo=datetime.timezone.utc), 'commenter': 'ibrahiminfinite', 'type': 'User'}, {'comment_id': 1225317281, 'comment_body': 'Have reduced the size of this lambda, making it into a function in the demo would require passing around 5 arguments, which felt more complex than a slightly long lambda.', 'comment_created': datetime.datetime(2023, 6, 10, 11, 59, 12, tzinfo=datetime.timezone.utc), 'commenter': 'ibrahiminfinite', 'type': 'User'}, {'comment_id': 1225317623, 'comment_body': 'Have added a timeout as well.', 'comment_created': datetime.datetime(2023, 6, 10, 11, 59, 35, tzinfo=datetime.timezone.utc), 'commenter': 'ibrahiminfinite', 'type': 'User'}, {'comment_id': 1225319135, 'comment_body': 'That is a good idea.\r\nMaybe we can do an Eigen `isApprox` check with a slightly bigger tolerance for where we expect it to be.', 'comment_created': datetime.datetime(2023, 6, 10, 12, 2, 23, tzinfo=datetime.timezone.utc), 'commenter': 'ibrahiminfinite', 'type': 'User'}, {'comment_id': 1236955816, 'comment_body': 'Looking at this class again, I wonder if it would be at all possible to change it from a class to a bunch of free functions... but maybe MoveIt makes this really hard to do this because you need to have an IK solver, robot model, robot state, etc. Just something to think about.', 'comment_created': datetime.datetime(2023, 6, 21, 12, 54, 31, tzinfo=datetime.timezone.utc), 'commenter': 'sea-bass', 'type': 'User'}, {'comment_id': 1236956394, 'comment_body': ""I wasn't aware of this `.head<3>` / `.tail<3>` syntax in Eigen. Super handy."", 'comment_created': datetime.datetime(2023, 6, 21, 12, 54, 57, tzinfo=datetime.timezone.utc), 'commenter': 'sea-bass', 'type': 'User'}, {'comment_id': 1236957887, 'comment_body': 'Not sure this comment adds much. Yes, the C++ API is new (it had to be ROS before), but probably fairly obvious since there is now a `start()` function right below this line.\r\n\r\n```suggestion\r\n```', 'comment_created': datetime.datetime(2023, 6, 21, 12, 56, 6, tzinfo=datetime.timezone.utc), 'commenter': 'sea-bass', 'type': 'User'}, {'comment_id': 1236961109, 'comment_body': 'Should the smoother reset on every iteration? No, right?', 'comment_created': datetime.datetime(2023, 6, 21, 12, 58, 38, tzinfo=datetime.timezone.utc), 'commenter': 'sea-bass', 'type': 'User'}, {'comment_id': 1236963713, 'comment_body': 'why did these change?', 'comment_created': datetime.datetime(2023, 6, 21, 13, 0, 31, tzinfo=datetime.timezone.utc), 'commenter': 'sea-bass', 'type': 'User'}, {'comment_id': 1236964990, 'comment_body': ""In speaking to folks here at PickNik, wondering if we should make our lives easier and just always assume this is true... if someone changes a parameter, it's up to them. It will make some of the logic simpler!"", 'comment_created': datetime.datetime(2023, 6, 21, 13, 1, 32, tzinfo=datetime.timezone.utc), 'commenter': 'sea-bass', 'type': 'User'}, {'comment_id': 1236966611, 'comment_body': 'remove extra lines', 'comment_created': datetime.datetime(2023, 6, 21, 13, 2, 34, tzinfo=datetime.timezone.utc), 'commenter': 'sea-bass', 'type': 'User'}, {'comment_id': 1236967350, 'comment_body': ""Not a big deal, but there's probably a way to initialize these in 1 line, right?"", 'comment_created': datetime.datetime(2023, 6, 21, 13, 3, 10, tzinfo=datetime.timezone.utc), 'commenter': 'sea-bass', 'type': 'User'}, {'comment_id': 1237070422, 'comment_body': '```suggestion\r\n  // Check if the transforms to planning frame and end effector frame exist.\r\n```', 'comment_created': datetime.datetime(2023, 6, 21, 14, 10, 23, tzinfo=datetime.timezone.utc), 'commenter': 'sea-bass', 'type': 'User'}, {'comment_id': 1237073424, 'comment_body': 'Can you do e.g. this instead?\r\n\r\n```\r\nincoming_velocities(0) *= 1.1;\r\n```', 'comment_created': datetime.datetime(2023, 6, 21, 14, 12, 26, tzinfo=datetime.timezone.utc), 'commenter': 'sea-bass', 'type': 'User'}, {'comment_id': 1237075811, 'comment_body': ""You should do\r\n\r\n```\r\nASSERT_NEAR(scaling_factor, 0.9, tol);\r\n```\r\n\r\nwith `constexpr double tol = 0.01;` or something\r\n\r\n... also 0.01 is a much bigger difference than just floating-point equality. But I'm sure there are other valid reasons."", 'comment_created': datetime.datetime(2023, 6, 21, 14, 13, 52, tzinfo=datetime.timezone.utc), 'commenter': 'sea-bass', 'type': 'User'}, {'comment_id': 1237076729, 'comment_body': 'Can you get this directly from a named state from the `robot_state_` variable? No big deal either way.', 'comment_created': datetime.datetime(2023, 6, 21, 14, 14, 24, tzinfo=datetime.timezone.utc), 'commenter': 'sea-bass', 'type': 'User'}, {'comment_id': 1237078143, 'comment_body': 'typo: should be `received_pose`', 'comment_created': datetime.datetime(2023, 6, 21, 14, 15, 7, tzinfo=datetime.timezone.utc), 'commenter': 'sea-bass', 'type': 'User'}, {'comment_id': 1237078944, 'comment_body': 'same here, use `ASSERT_NEAR` instead', 'comment_created': datetime.datetime(2023, 6, 21, 14, 15, 31, tzinfo=datetime.timezone.utc), 'commenter': 'sea-bass', 'type': 'User'}, {'comment_id': 1237120508, 'comment_body': ""It should.\r\nIf we don't update the smoother every iteration, there will be jumps when servo resumes after the robot state was changed by some other agent.\r\nThe current `servo_calcs` also does this [here](https://github.com/ros-planning/moveit2/blob/636b98849127ef6dd29b104e1ab421b278b93ee2/moveit_ros/moveit_servo/src/servo_calcs.cpp#L401) and [here](https://github.com/ros-planning/moveit2/blob/636b98849127ef6dd29b104e1ab421b278b93ee2/moveit_ros/moveit_servo/src/servo_calcs.cpp#L491) \r\n\r\n"", 'comment_created': datetime.datetime(2023, 6, 21, 14, 38, 32, tzinfo=datetime.timezone.utc), 'commenter': 'ibrahiminfinite', 'type': 'User'}, {'comment_id': 1237127211, 'comment_body': 'It is the same as it was before.\r\nhttps://github.com/ros-planning/moveit2/blob/636b98849127ef6dd29b104e1ab421b278b93ee2/moveit_ros/moveit_servo/config/panda_simulated_config.yaml#LL43C1-L45C135', 'comment_created': datetime.datetime(2023, 6, 21, 14, 42, 48, tzinfo=datetime.timezone.utc), 'commenter': 'ibrahiminfinite', 'type': 'User'}, {'comment_id': 1237129006, 'comment_body': 'Yup, was going to change it but looks like I forgot. Thanks!', 'comment_created': datetime.datetime(2023, 6, 21, 14, 43, 49, tzinfo=datetime.timezone.utc), 'commenter': 'ibrahiminfinite', 'type': 'User'}, {'comment_id': 1237130321, 'comment_body': 'I see -- I think I confused `reset()` vs. `initialize()` and was thinking it was the other.\r\n\r\nWeird naming, then.', 'comment_created': datetime.datetime(2023, 6, 21, 14, 44, 39, tzinfo=datetime.timezone.utc), 'commenter': 'sea-bass', 'type': 'User'}, {'comment_id': 1237135301, 'comment_body': 'YES !\r\nI would love to remove the check for if it should update or not.\r\nAlso based on what Tyler said, it is not expensive even if we check at every iteration.', 'comment_created': datetime.datetime(2023, 6, 21, 14, 47, 51, tzinfo=datetime.timezone.utc), 'commenter': 'ibrahiminfinite', 'type': 'User'}, {'comment_id': 1237137962, 'comment_body': 'One thing to note here is , the new implementation does not use the `robot_link_command_frame` parameter since the command frame is always included with the command. Will remove it from the config.', 'comment_created': datetime.datetime(2023, 6, 21, 14, 49, 37, tzinfo=datetime.timezone.utc), 'commenter': 'ibrahiminfinite', 'type': 'User'}, {'comment_id': 1237142112, 'comment_body': 'I did consider making them into free functions but decided not to go that route since it would require passing in a lot of stuff along with the actual command to process and it felt really ugly.\r\n', 'comment_created': datetime.datetime(2023, 6, 21, 14, 52, 19, tzinfo=datetime.timezone.utc), 'commenter': 'ibrahiminfinite', 'type': 'User'}, {'comment_id': 1239326478, 'comment_body': 'Done', 'comment_created': datetime.datetime(2023, 6, 23, 5, 11, 26, tzinfo=datetime.timezone.utc), 'commenter': 'ibrahiminfinite', 'type': 'User'}, {'comment_id': 1239339209, 'comment_body': 'Not possible if using `VectorXd`,  but since we already know the number of joints for panda robot, I changed this to \r\n`vector<double, 7>` which will let us initialize directly.', 'comment_created': datetime.datetime(2023, 6, 23, 5, 37, 15, tzinfo=datetime.timezone.utc), 'commenter': 'ibrahiminfinite', 'type': 'User'}, {'comment_id': 1239341670, 'comment_body': 'Done', 'comment_created': datetime.datetime(2023, 6, 23, 5, 41, 27, tzinfo=datetime.timezone.utc), 'commenter': 'ibrahiminfinite', 'type': 'User'}, {'comment_id': 1239350189, 'comment_body': 'My bad, it is actually supposed to be 0.90909~ ( i.e 1 / 1.1) not 0.9 \r\nHave changed the float checks to use ASSERT_NEAR.\r\nThanks.', 'comment_created': datetime.datetime(2023, 6, 23, 5, 56, 40, tzinfo=datetime.timezone.utc), 'commenter': 'ibrahiminfinite', 'type': 'User'}, {'comment_id': 1239359063, 'comment_body': 'YES ! , the configuration is available as the named state ""ready"". \r\nThanks for pointing it out.', 'comment_created': datetime.datetime(2023, 6, 23, 6, 11, 22, tzinfo=datetime.timezone.utc), 'commenter': 'ibrahiminfinite', 'type': 'User'}, {'comment_id': 1241312860, 'comment_body': 'Per your latest commit, the concept of ""command frame"" doesn\'t make sense anymore. The command must always be in the EE frame.', 'comment_created': datetime.datetime(2023, 6, 25, 22, 48, 44, tzinfo=datetime.timezone.utc), 'commenter': 'AndyZe', 'type': 'User'}, {'comment_id': 1241316132, 'comment_body': 'Another place where the concept of ""command frame"" and ""planning frame"" seems to be confused. I think commands must be received in `ik_solver_.getTipFrame()` per your most recent commit.\r\n\r\n```suggestion\r\n                         ""Command frame is: "" << command.frame_id << "" expected: "" << ik_solver_.getTipFrame());\r\n```', 'comment_created': datetime.datetime(2023, 6, 25, 22, 56, 4, tzinfo=datetime.timezone.utc), 'commenter': 'AndyZe', 'type': 'User'}, {'comment_id': 1241316861, 'comment_body': 'Similar to my other comments, I believe commands must be given in the ""ik_solver_.getTipFrame()"" or this won\'t work.\r\n\r\n```suggestion\r\n                         ""Command frame is: "" << command.frame_id << "" expected: "" << ik_solver_.getTIpFrame());\r\n```', 'comment_created': datetime.datetime(2023, 6, 25, 22, 58, 2, tzinfo=datetime.timezone.utc), 'commenter': 'AndyZe', 'type': 'User'}, {'comment_id': 1241317399, 'comment_body': ""Un-resolving this conversation so it's not forgotten"", 'comment_created': datetime.datetime(2023, 6, 25, 22, 59, 5, tzinfo=datetime.timezone.utc), 'commenter': 'AndyZe', 'type': 'User'}, {'comment_id': 1241317534, 'comment_body': ""Per your latest commit, I believe it's not possible to update the robot_link_command_frame at runtime. Commands must always be received in `ik_solver_.getTipFrame()`"", 'comment_created': datetime.datetime(2023, 6, 25, 22, 59, 55, tzinfo=datetime.timezone.utc), 'commenter': 'AndyZe', 'type': 'User'}, {'comment_id': 1241317584, 'comment_body': '```suggestion\r\n *  Copyright (c) 2023, PickNik Inc.\r\n```', 'comment_created': datetime.datetime(2023, 6, 25, 23, 0, 24, tzinfo=datetime.timezone.utc), 'commenter': 'AndyZe', 'type': 'User'}, {'comment_id': 1241318234, 'comment_body': 'Did you skip 2 on accident?  ;)\r\n\r\n```suggestion\r\n  HALT_FOR_SINGULARITY = 2,\r\n  DECELERATE_FOR_LEAVING_SINGULARITY = 3,\r\n  DECELERATE_FOR_COLLISION = 4,\r\n  HALT_FOR_COLLISION = 5,\r\n  JOINT_BOUND = 6,\r\n  POSE_ACHIEVED = 7\r\n```', 'comment_created': datetime.datetime(2023, 6, 25, 23, 4, 29, tzinfo=datetime.timezone.utc), 'commenter': 'AndyZe', 'type': 'User'}, {'comment_id': 1241486115, 'comment_body': 'I think had added another status which I assigned 2, forgot to adjust the numbering after I removed it. Thanks', 'comment_created': datetime.datetime(2023, 6, 26, 4, 2, 39, tzinfo=datetime.timezone.utc), 'commenter': 'ibrahiminfinite', 'type': 'User'}, {'comment_id': 1254611179, 'comment_body': ""Noting that this file doesn't seem to do anything yet.\r\n\r\nI'd recommend pulling `servo_keyboard_input.cpp` out of the tutorials and putting it here instead, so users have something convenient to test with.\r\n\r\nhttps://github.com/ros-planning/moveit2_tutorials/blob/main/doc/examples/realtime_servo/src/servo_keyboard_input.cpp"", 'comment_created': datetime.datetime(2023, 7, 6, 15, 35, 9, tzinfo=datetime.timezone.utc), 'commenter': 'AndyZe', 'type': 'User'}, {'comment_id': 1254616531, 'comment_body': 'ohh , that file is not needed, must have forgotten to remove it.\r\nInitially I was going to have 3 separate launch files like for C++ API demos, but then realized that only one launch is needed.\r\nWill remove the `ros_demo_joint_jog.launch.py`', 'comment_created': datetime.datetime(2023, 7, 6, 15, 39, 21, tzinfo=datetime.timezone.utc), 'commenter': 'ibrahiminfinite', 'type': 'User'}, {'comment_id': 1254631305, 'comment_body': ""\r\n\r\n> I'd recommend pulling `servo_keyboard_input.cpp` out of the tutorials and putting it here instead, so users have something convenient to test with.\r\n\r\nThat sounds like a good idea.\r\nI already have an updated version of the `servo_keyboard_input.cpp`."", 'comment_created': datetime.datetime(2023, 7, 6, 15, 52, 17, tzinfo=datetime.timezone.utc), 'commenter': 'ibrahiminfinite', 'type': 'User'}, {'comment_id': 1255831109, 'comment_body': 'This is going to cause another incompatibility. Can we keep this as `ee_frame_name`?', 'comment_created': datetime.datetime(2023, 7, 7, 13, 32, 39, tzinfo=datetime.timezone.utc), 'commenter': 'sea-bass', 'type': 'User'}, {'comment_id': 1255832127, 'comment_body': 'I would call this `~/pose_target_cmds` or `~/pose_tracking_cmds` for consistency... and generally instead of just ""pose command"" I would say ""pose target commands"" or ""pose tracking commands"" all throughout these changes.', 'comment_created': datetime.datetime(2023, 7, 7, 13, 33, 22, tzinfo=datetime.timezone.utc), 'commenter': 'sea-bass', 'type': 'User'}, {'comment_id': 1255832966, 'comment_body': 'Rather than default this parameter to true, my suggestion was to simply get rid of this parameter and have the behavior be tunable always.', 'comment_created': datetime.datetime(2023, 7, 7, 13, 33, 57, tzinfo=datetime.timezone.utc), 'commenter': 'sea-bass', 'type': 'User'}, {'comment_id': 1255843618, 'comment_body': 'Rather than using #defines, just make these all constants or constexprs...', 'comment_created': datetime.datetime(2023, 7, 7, 13, 41, 29, tzinfo=datetime.timezone.utc), 'commenter': 'sea-bass', 'type': 'User'}, {'comment_id': 1255933294, 'comment_body': 'Feels odd to me to have this expressed as frequency vs. other things expressed with a time step. Maybe use time step here instead?', 'comment_created': datetime.datetime(2023, 7, 7, 14, 42, 2, tzinfo=datetime.timezone.utc), 'commenter': 'sea-bass', 'type': 'User'}, {'comment_id': 1255934218, 'comment_body': '```suggestion\r\n  // Frequency at which the commands will be send to robot controller.\r\n```', 'comment_created': datetime.datetime(2023, 7, 7, 14, 42, 37, tzinfo=datetime.timezone.utc), 'commenter': 'sea-bass', 'type': 'User'}, {'comment_id': 1255936040, 'comment_body': 'Do we want to use `WallRate` or `Rate` here? Does this differentiate whether the timer honors the ROS clock or not, like in cases where `use_sim_time=True`?\r\n\r\nMaybe more of an @AndyZe question.', 'comment_created': datetime.datetime(2023, 7, 7, 14, 43, 47, tzinfo=datetime.timezone.utc), 'commenter': 'sea-bass', 'type': 'User'}, {'comment_id': 1255943582, 'comment_body': 'Nitpick: But can you specify in each separate implementation the type of command you are validating?', 'comment_created': datetime.datetime(2023, 7, 7, 14, 48, 24, tzinfo=datetime.timezone.utc), 'commenter': 'sea-bass', 'type': 'User'}, {'comment_id': 1255945400, 'comment_body': ""Should we rename these structure so they denote it's specifically a command?\r\n\r\nLike `TwistCommand` and `PoseTrackingCommand`?"", 'comment_created': datetime.datetime(2023, 7, 7, 14, 49, 34, tzinfo=datetime.timezone.utc), 'commenter': 'sea-bass', 'type': 'User'}, {'comment_id': 1256095759, 'comment_body': 'In that case do we also change the `planning_frame` to `planning_frame_name` ?\r\nFeels weird otherwise since both are referring to the frame names.', 'comment_created': datetime.datetime(2023, 7, 7, 16, 25, 3, tzinfo=datetime.timezone.utc), 'commenter': 'ibrahiminfinite', 'type': 'User'}, {'comment_id': 1256097452, 'comment_body': ""gah, I see the naming was inconsistent already in the existing YAML. In that case, let's keep it as `ee_frame` and we'll handle the migrations..."", 'comment_created': datetime.datetime(2023, 7, 7, 16, 26, 23, tzinfo=datetime.timezone.utc), 'commenter': 'sea-bass', 'type': 'User'}, {'comment_id': 1256098339, 'comment_body': '`planning_frame` parameter is going to disappear anyway, right?', 'comment_created': datetime.datetime(2023, 7, 7, 16, 27, 4, tzinfo=datetime.timezone.utc), 'commenter': 'AndyZe', 'type': 'User'}, {'comment_id': 1256102177, 'comment_body': '> `planning_frame` parameter is going to disappear anyway, right?\r\n\r\nIf we are going to assume all commands are in the ""IK tip frame""  (might not be same as the end effector (TCP) )\r\nThen there is no need for either `planning_frame` or `ee_frame_name`  parameters right?\r\n', 'comment_created': datetime.datetime(2023, 7, 7, 16, 30, 7, tzinfo=datetime.timezone.utc), 'commenter': 'ibrahiminfinite', 'type': 'User'}, {'comment_id': 1256104225, 'comment_body': 'that seems ok to me', 'comment_created': datetime.datetime(2023, 7, 7, 16, 31, 39, tzinfo=datetime.timezone.utc), 'commenter': 'AndyZe', 'type': 'User'}, {'comment_id': 1256108725, 'comment_body': 'This is something I myself had questioned.\r\nWhat is a more meaningful parameter ?  Should `Servo` itself use `frequency` ?\r\nWas there any reason for `Servo`  using `publish_period` rather than a frequency ? @AndyZe \r\n', 'comment_created': datetime.datetime(2023, 7, 7, 16, 35, 19, tzinfo=datetime.timezone.utc), 'commenter': 'ibrahiminfinite', 'type': 'User'}, {'comment_id': 1256110018, 'comment_body': ""no, i don't care either way"", 'comment_created': datetime.datetime(2023, 7, 7, 16, 36, 29, tzinfo=datetime.timezone.utc), 'commenter': 'AndyZe', 'type': 'User'}, {'comment_id': 1256111487, 'comment_body': ""here's the reason why it should be a WallRate:  https://github.com/ros-planning/moveit2/pull/1543"", 'comment_created': datetime.datetime(2023, 7, 7, 16, 37, 42, tzinfo=datetime.timezone.utc), 'commenter': 'AndyZe', 'type': 'User'}, {'comment_id': 1256116111, 'comment_body': 'yeah, that will be good.\r\nLets go with it. `JointJogCommand` , `TwistCommand` and `PoseCommand`.\r\nMight help keep things clearer in cases like when a `geometry_msgs::msg::Twist` is being used without the namespace prefix.', 'comment_created': datetime.datetime(2023, 7, 7, 16, 41, 17, tzinfo=datetime.timezone.utc), 'commenter': 'ibrahiminfinite', 'type': 'User'}, {'comment_id': 1256147923, 'comment_body': 'I thought it was still in discussion with the PickNik team.\r\nWill remove it if that is okay. One less check happening continuously. ', 'comment_created': datetime.datetime(2023, 7, 7, 17, 7, 7, tzinfo=datetime.timezone.utc), 'commenter': 'ibrahiminfinite', 'type': 'User'}, {'comment_id': 1256156581, 'comment_body': 'Not sure what you mean here.\r\nAre you pointing to the `VectorXd` and `Isometry3d` overloads ?', 'comment_created': datetime.datetime(2023, 7, 7, 17, 14, 17, tzinfo=datetime.timezone.utc), 'commenter': 'ibrahiminfinite', 'type': 'User'}, {'comment_id': 1263526294, 'comment_body': 'Marking this and following set of comments as resolved since these change were reverted.', 'comment_created': datetime.datetime(2023, 7, 14, 9, 39, 53, tzinfo=datetime.timezone.utc), 'commenter': 'ibrahiminfinite', 'type': 'User'}, {'comment_id': 1264335307, 'comment_body': 'Keeping both parameters as `planning_frame` and `ee_frame` since we have decided not to go with IK tip only commands.', 'comment_created': datetime.datetime(2023, 7, 15, 5, 40, 56, tzinfo=datetime.timezone.utc), 'commenter': 'ibrahiminfinite', 'type': 'User'}, {'comment_id': 1264349863, 'comment_body': 'Updated to `~/pose_target_cmds`', 'comment_created': datetime.datetime(2023, 7, 15, 7, 18, 34, tzinfo=datetime.timezone.utc), 'commenter': 'ibrahiminfinite', 'type': 'User'}, {'comment_id': 1264349980, 'comment_body': 'Servo will now always check for parameter updates', 'comment_created': datetime.datetime(2023, 7, 15, 7, 19, 22, tzinfo=datetime.timezone.utc), 'commenter': 'ibrahiminfinite', 'type': 'User'}, {'comment_id': 1264350106, 'comment_body': 'The `frequency` and `timeout` parameters of pose tracking has been removed, since there is no longer a pose tracking thread, `Servo`  responds to pose commands in the same way it handles twist and jointjog', 'comment_created': datetime.datetime(2023, 7, 15, 7, 21, 4, tzinfo=datetime.timezone.utc), 'commenter': 'ibrahiminfinite', 'type': 'User'}, {'comment_id': 1264350168, 'comment_body': 'Fixed', 'comment_created': datetime.datetime(2023, 7, 15, 7, 21, 49, tzinfo=datetime.timezone.utc), 'commenter': 'ibrahiminfinite', 'type': 'User'}, {'comment_id': 1264350269, 'comment_body': 'Have added more info in the docstrings', 'comment_created': datetime.datetime(2023, 7, 15, 7, 22, 13, tzinfo=datetime.timezone.utc), 'commenter': 'ibrahiminfinite', 'type': 'User'}, {'comment_id': 1264350311, 'comment_body': 'The above mentioned change has been applied.', 'comment_created': datetime.datetime(2023, 7, 15, 7, 22, 32, tzinfo=datetime.timezone.utc), 'commenter': 'ibrahiminfinite', 'type': 'User'}, {'comment_id': 1264360369, 'comment_body': 'The `#define` s have been removed.\r\nTwo new keys `j`  for  jointjog and `t`  for twist have been added to call the service to switch the input type.\r\n', 'comment_created': datetime.datetime(2023, 7, 15, 8, 32, 49, tzinfo=datetime.timezone.utc), 'commenter': 'ibrahiminfinite', 'type': 'User'}, {'comment_id': 1264485596, 'comment_body': 'Get rid of this frame-changing code since we are always using the planning frame now, right?\r\n\r\n```suggestion\r\n```', 'comment_created': datetime.datetime(2023, 7, 15, 15, 59, tzinfo=datetime.timezone.utc), 'commenter': 'AndyZe', 'type': 'User'}, {'comment_id': 1264487559, 'comment_body': 'Nitpick: can you go through and sort the includes alphabetically? Makes for better readability. Your IDE should have a hotkey to do this quickly.', 'comment_created': datetime.datetime(2023, 7, 15, 16, 8, 31, tzinfo=datetime.timezone.utc), 'commenter': 'AndyZe', 'type': 'User'}, {'comment_id': 1264489061, 'comment_body': '```suggestion\r\n  while (!stop_tracking && rclcpp::ok())\r\n```', 'comment_created': datetime.datetime(2023, 7, 15, 16, 16, 40, tzinfo=datetime.timezone.utc), 'commenter': 'AndyZe', 'type': 'User'}, {'comment_id': 1264489125, 'comment_body': 'To ensure Ctrl+C still functions. Please check if this change is needed anywhere else.\r\n\r\n```suggestion\r\n    while (!stop_tracking && rclcpp::ok())\r\n```', 'comment_created': datetime.datetime(2023, 7, 15, 16, 17, 12, tzinfo=datetime.timezone.utc), 'commenter': 'AndyZe', 'type': 'User'}, {'comment_id': 1264489928, 'comment_body': 'Is this comment correct? I think it would be nice to highlight dynamic pose tracking.\r\n\r\n```suggestion\r\n      // Dynamically update the target pose\r\n      target_pose.pose.translate(Eigen::Vector3d(0.0, 0.0, -delta));\r\n```', 'comment_created': datetime.datetime(2023, 7, 15, 16, 18, 10, tzinfo=datetime.timezone.utc), 'commenter': 'AndyZe', 'type': 'User'}, {'comment_id': 1264491943, 'comment_body': 'Changing license holders is not cool.\r\n\r\n```suggestion\r\n * Copyright (c) 2019, Los Alamos National Security, LLC\r\n```', 'comment_created': datetime.datetime(2023, 7, 15, 16, 24, 24, tzinfo=datetime.timezone.utc), 'commenter': 'AndyZe', 'type': 'User'}, {'comment_id': 1264498767, 'comment_body': 'Yeah, those can be removed. \r\nThanks.', 'comment_created': datetime.datetime(2023, 7, 15, 16, 51, 37, tzinfo=datetime.timezone.utc), 'commenter': 'ibrahiminfinite', 'type': 'User'}, {'comment_id': 1264500163, 'comment_body': 'Yeah, makes it more clear. 👍', 'comment_created': datetime.datetime(2023, 7, 15, 16, 58, 5, tzinfo=datetime.timezone.utc), 'commenter': 'ibrahiminfinite', 'type': 'User'}, {'comment_id': 1264500299, 'comment_body': 'oh, sorry about that !!', 'comment_created': datetime.datetime(2023, 7, 15, 16, 59, 43, tzinfo=datetime.timezone.utc), 'commenter': 'ibrahiminfinite', 'type': 'User'}, {'comment_id': 1264507214, 'comment_body': 'Done !', 'comment_created': datetime.datetime(2023, 7, 15, 17, 32, 6, tzinfo=datetime.timezone.utc), 'commenter': 'ibrahiminfinite', 'type': 'User'}, {'comment_id': 1264507234, 'comment_body': 'Done', 'comment_created': datetime.datetime(2023, 7, 15, 17, 32, 27, tzinfo=datetime.timezone.utc), 'commenter': 'ibrahiminfinite', 'type': 'User'}, {'comment_id': 1264759073, 'comment_body': ""In my opinion we should default to having Servo be a node component. It should help reduce latency. That's on main branch now:\r\n\r\nhttps://github.com/ros-planning/moveit2/blob/c9a9e407b0a27858c8eea838ccbbd389d7109f9e/moveit_ros/moveit_servo/launch/servo_example.launch.py#L13C5-L13C30\r\n\r\nSo can you take a shot at making Servo a node component in all of these launch files?"", 'comment_created': datetime.datetime(2023, 7, 16, 22, 52, 32, tzinfo=datetime.timezone.utc), 'commenter': 'AndyZe', 'type': 'User'}, {'comment_id': 1264759138, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2023, 7, 16, 22, 53, 19, tzinfo=datetime.timezone.utc), 'commenter': 'AndyZe', 'type': 'User'}, {'comment_id': 1264759735, 'comment_body': ""I think you could easily get rid of this function. Looks like it's only used in `demo_pose.cpp`.\r\n\r\nrobot_state->getGlobalLinkTransform(servo_params.ee_frame) is used elsewhere"", 'comment_created': datetime.datetime(2023, 7, 16, 22, 58, 22, tzinfo=datetime.timezone.utc), 'commenter': 'AndyZe', 'type': 'User'}, {'comment_id': 1264759914, 'comment_body': '```suggestion\r\n   * \\brief Converts the given pose to planning frame. Assumes the command is in a stationary reference frame (issue #2150)\r\n```', 'comment_created': datetime.datetime(2023, 7, 16, 23, 0, 23, tzinfo=datetime.timezone.utc), 'commenter': 'AndyZe', 'type': 'User'}, {'comment_id': 1264784614, 'comment_body': '@AndyZe already mentioned it via email, but reminder that we want to merge in `moveit_msgs` to main first and then update this repos file.', 'comment_created': datetime.datetime(2023, 7, 17, 1, 43, 1, tzinfo=datetime.timezone.utc), 'commenter': 'sea-bass', 'type': 'User'}, {'comment_id': 1264785106, 'comment_body': 'Thoughts on possibly adding a deprecation warning of sorts for people transitioning from using `ee_frame_name` to now `ee_frame`?\r\n\r\nWhat this would do is check if `ee_frame_name` is defined and `ee_frame` is not, and then reassign it + print out a warning.\r\n\r\nOr should we just move on this from and deal with issues that may come in?', 'comment_created': datetime.datetime(2023, 7, 17, 1, 45, 26, tzinfo=datetime.timezone.utc), 'commenter': 'sea-bass', 'type': 'User'}, {'comment_id': 1264785291, 'comment_body': '```suggestion\r\n    description: ""Enables the use of smoothing plugins for joint trajectory smoothing""\r\n```', 'comment_created': datetime.datetime(2023, 7, 17, 1, 46, 16, tzinfo=datetime.timezone.utc), 'commenter': 'sea-bass', 'type': 'User'}, {'comment_id': 1264785552, 'comment_body': '```suggestion\r\n/*      Title     : demo_joint_jog.cpp\r\n```', 'comment_created': datetime.datetime(2023, 7, 17, 1, 47, 34, tzinfo=datetime.timezone.utc), 'commenter': 'sea-bass', 'type': 'User'}, {'comment_id': 1264785669, 'comment_body': '```suggestion\r\n/*      Title     : demo_twist.cpp\r\n```', 'comment_created': datetime.datetime(2023, 7, 17, 1, 47, 51, tzinfo=datetime.timezone.utc), 'commenter': 'sea-bass', 'type': 'User'}, {'comment_id': 1264785988, 'comment_body': '```suggestion\r\n   * @return True if parameters are valid, else False\r\n```', 'comment_created': datetime.datetime(2023, 7, 17, 1, 49, 23, tzinfo=datetime.timezone.utc), 'commenter': 'sea-bass', 'type': 'User'}, {'comment_id': 1264786091, 'comment_body': '```suggestion\r\n   * \\brief Create and initialize the smoothing plugin to be used by servo.\r\n```', 'comment_created': datetime.datetime(2023, 7, 17, 1, 49, 52, tzinfo=datetime.timezone.utc), 'commenter': 'sea-bass', 'type': 'User'}, {'comment_id': 1264786400, 'comment_body': 'Rather than showing the current enum numbers here, which are prone to change, should we instead point people to the actual file where the supported commands are defined?', 'comment_created': datetime.datetime(2023, 7, 17, 1, 51, 29, tzinfo=datetime.timezone.utc), 'commenter': 'sea-bass', 'type': 'User'}, {'comment_id': 1264786703, 'comment_body': ""```suggestion\r\n * \\brief Computes the required change in joint angles for given Cartesian change, using the robot's IK solver.\r\n * @param cartesian_position_delta The change in Cartesian position.\r\n```"", 'comment_created': datetime.datetime(2023, 7, 17, 1, 52, 43, tzinfo=datetime.timezone.utc), 'commenter': 'sea-bass', 'type': 'User'}, {'comment_id': 1264787050, 'comment_body': 'a little more formal terminology here would be nice\r\n\r\n```suggestion\r\n * \\brief Finds the joints that are exceeding allowable joint limits.\r\n```', 'comment_created': datetime.datetime(2023, 7, 17, 1, 54, 17, tzinfo=datetime.timezone.utc), 'commenter': 'sea-bass', 'type': 'User'}, {'comment_id': 1264787348, 'comment_body': '```suggestion\r\n * @param margin Additional buffer on the actual joint limits.\r\n```', 'comment_created': datetime.datetime(2023, 7, 17, 1, 55, 36, tzinfo=datetime.timezone.utc), 'commenter': 'sea-bass', 'type': 'User'}, {'comment_id': 1264787882, 'comment_body': 'Is there any info such that we can print *which* IK solver was used?', 'comment_created': datetime.datetime(2023, 7, 17, 1, 57, 58, tzinfo=datetime.timezone.utc), 'commenter': 'sea-bass', 'type': 'User'}, {'comment_id': 1264788056, 'comment_body': 'typo?\r\n\r\n```suggestion\r\n      // JointJogCommand is an alias for VectorXd, so we can directly make a map and pass it.\r\n```', 'comment_created': datetime.datetime(2023, 7, 17, 1, 58, 46, tzinfo=datetime.timezone.utc), 'commenter': 'sea-bass', 'type': 'User'}, {'comment_id': 1264788442, 'comment_body': 'Maybe make these comments less redundant, e.g.\r\n\r\n```suggestion\r\n  // Get separate transformation matrices with the desired position and orientation change.\r\n```', 'comment_created': datetime.datetime(2023, 7, 17, 2, 0, 19, tzinfo=datetime.timezone.utc), 'commenter': 'sea-bass', 'type': 'User'}, {'comment_id': 1264789505, 'comment_body': ""Doesn't seem like this was resolved?\r\n\r\n```suggestion\r\n *  Copyright (c) 2023, PickNik Inc.\r\n```"", 'comment_created': datetime.datetime(2023, 7, 17, 2, 4, 54, tzinfo=datetime.timezone.utc), 'commenter': 'sea-bass', 'type': 'User'}, {'comment_id': 1264794187, 'comment_body': 'That sounds good 👍', 'comment_created': datetime.datetime(2023, 7, 17, 2, 25, 20, tzinfo=datetime.timezone.utc), 'commenter': 'ibrahiminfinite', 'type': 'User'}, {'comment_id': 1264794557, 'comment_body': 'Ohh, got leftover during the update of typedef name from JointJog -> JointjogCommand', 'comment_created': datetime.datetime(2023, 7, 17, 2, 27, 3, tzinfo=datetime.timezone.utc), 'commenter': 'ibrahiminfinite', 'type': 'User'}, {'comment_id': 1264960528, 'comment_body': 'The function was kept intentionally, (mostly a convenience function)  so that users can write control logic like in the pose demo if they need to.', 'comment_created': datetime.datetime(2023, 7, 17, 7, 12, 52, tzinfo=datetime.timezone.utc), 'commenter': 'ibrahiminfinite', 'type': 'User'}, {'comment_id': 1264963040, 'comment_body': '> should we just move on this from and deal with issues that may come in?\r\n\r\nI am in favour of this.', 'comment_created': datetime.datetime(2023, 7, 17, 7, 15, 41, tzinfo=datetime.timezone.utc), 'commenter': 'ibrahiminfinite', 'type': 'User'}, {'comment_id': 1265420494, 'comment_body': 'Yeah, will update it to run as node component :+1: ', 'comment_created': datetime.datetime(2023, 7, 17, 14, 5, 26, tzinfo=datetime.timezone.utc), 'commenter': 'ibrahiminfinite', 'type': 'User'}, {'comment_id': 1265441225, 'comment_body': 'Rather than make it into a single comment, I think it would be more meaningful to split the comment into two and place it before the respective operations.', 'comment_created': datetime.datetime(2023, 7, 17, 14, 19, 53, tzinfo=datetime.timezone.utc), 'commenter': 'ibrahiminfinite', 'type': 'User'}, {'comment_id': 1265446631, 'comment_body': ""that was another suggestion I was considering. I'm fine with that too"", 'comment_created': datetime.datetime(2023, 7, 17, 14, 23, 53, tzinfo=datetime.timezone.utc), 'commenter': 'sea-bass', 'type': 'User'}, {'comment_id': 1265472487, 'comment_body': 'Unfortunately it does not look like that information is not available from the `KinematicsBase`, maybe this is something worth adding ?', 'comment_created': datetime.datetime(2023, 7, 17, 14, 40, 52, tzinfo=datetime.timezone.utc), 'commenter': 'ibrahiminfinite', 'type': 'User'}, {'comment_id': 1269649630, 'comment_body': 'We got an interesting request about this...\r\n\r\nIs there a way we can have this class have a standalone function that can be called in other code that accepts a robot state and/or twist and returns to you the collision scaling?\r\n\r\nSo basically create a method that is called in the loop of `checkCollisions()` that can also be called by itself? Also lets you unit test easily.', 'comment_created': datetime.datetime(2023, 7, 20, 15, 39, 23, tzinfo=datetime.timezone.utc), 'commenter': 'sea-bass', 'type': 'User'}, {'comment_id': 1269657292, 'comment_body': ""IMO this is the type of feature that can be worked on later. Can't/shouldn't put too much on @ibrahiminfinite's TODO list at once."", 'comment_created': datetime.datetime(2023, 7, 20, 15, 46, tzinfo=datetime.timezone.utc), 'commenter': 'AndyZe', 'type': 'User'}, {'comment_id': 1269658100, 'comment_body': 'I completely agree!', 'comment_created': datetime.datetime(2023, 7, 20, 15, 46, 41, tzinfo=datetime.timezone.utc), 'commenter': 'sea-bass', 'type': 'User'}, {'comment_id': 1269666750, 'comment_body': ""Yeah, I'd be happy to get these done once this main PR goes in :+1: \r\n"", 'comment_created': datetime.datetime(2023, 7, 20, 15, 53, 46, tzinfo=datetime.timezone.utc), 'commenter': 'ibrahiminfinite', 'type': 'User'}, {'comment_id': 1275623346, 'comment_body': 'Maybe bring back a comment above this parameter since this example config is meant to help people understand their options', 'comment_created': datetime.datetime(2023, 7, 27, 1, 7, 9, tzinfo=datetime.timezone.utc), 'commenter': 'sea-bass', 'type': 'User'}, {'comment_id': 1275625014, 'comment_body': ' Is this timeout gone now? Does something else replace it?', 'comment_created': datetime.datetime(2023, 7, 27, 1, 11, 3, tzinfo=datetime.timezone.utc), 'commenter': 'sea-bass', 'type': 'User'}, {'comment_id': 1275625266, 'comment_body': ""We're currently using this parameter on MoveIt Studio for Gazebo, but it's kind of a workaround and I'm OK removing this parameter and seeing what happens / looking for better solutions."", 'comment_created': datetime.datetime(2023, 7, 27, 1, 11, 42, tzinfo=datetime.timezone.utc), 'commenter': 'sea-bass', 'type': 'User'}, {'comment_id': 1275625543, 'comment_body': 'Bring back comments for all these parameters, as in the old version', 'comment_created': datetime.datetime(2023, 7, 27, 1, 12, 25, tzinfo=datetime.timezone.utc), 'commenter': 'sea-bass', 'type': 'User'}, {'comment_id': 1275625860, 'comment_body': 'Again, is this functionality gone?', 'comment_created': datetime.datetime(2023, 7, 27, 1, 12, 52, tzinfo=datetime.timezone.utc), 'commenter': 'sea-bass', 'type': 'User'}, {'comment_id': 1275626263, 'comment_body': '```suggestion\r\n  // Frequency at which commands will be sent to the robot controller.\r\n```', 'comment_created': datetime.datetime(2023, 7, 27, 1, 13, 48, tzinfo=datetime.timezone.utc), 'commenter': 'sea-bass', 'type': 'User'}, {'comment_id': 1275629506, 'comment_body': ""What is `delta`? Consider adding a comment and a more descriptive name explaining what this does -- which is dynamically updating the target pose so it's moving up in the +Z direction at a particular rate.\r\n\r\nIn fact, I might say bring up the entire `Eigen::Vector3d` defining the translation up in front of the loop so people can more easily change this value. Also, consider making it an `Isometry3d` instantiated using both translation and euler angles for the same reason. So people can change the demo to have the target pose rotate as well.\r\n\r\nAs an example, see:\r\n\r\n```\r\nEigen::Isometry3d const goal_frame =\r\n            Eigen::Translation3d(std::sin(M_PI_4), 3.0 * std::sin(M_PI_4), 0.0) *\r\n            Eigen::AngleAxisd(0.75 * M_PI, Eigen::Vector3d::UnitZ());\r\n```"", 'comment_created': datetime.datetime(2023, 7, 27, 1, 17, 54, tzinfo=datetime.timezone.utc), 'commenter': 'sea-bass', 'type': 'User'}, {'comment_id': 1275629750, 'comment_body': '```suggestion\r\n  // Frequency at which commands will be sent to the robot controller.\r\n```', 'comment_created': datetime.datetime(2023, 7, 27, 1, 18, 34, tzinfo=datetime.timezone.utc), 'commenter': 'sea-bass', 'type': 'User'}, {'comment_id': 1275631300, 'comment_body': ""```suggestion\r\n * \\brief Finds the joints that are exceeding allowable limits.\r\n * @param positions The joint positions.\r\n * @param velocities The current commanded velocities.\r\n * @param joint_bounds The bounding information for the robot joints.\r\n * @param margin Additional buffer on the actual joint limits.\r\n * @return The joints that are violating the specified limits.\r\n```\r\n\r\nit's not just position limits that can be exceeded, right?\r\n\r\n"", 'comment_created': datetime.datetime(2023, 7, 27, 1, 22, tzinfo=datetime.timezone.utc), 'commenter': 'sea-bass', 'type': 'User'}, {'comment_id': 1275631644, 'comment_body': '```suggestion\r\n * @return The isometry as a TransformStamped message.\r\n ```', 'comment_created': datetime.datetime(2023, 7, 27, 1, 22, 36, tzinfo=datetime.timezone.utc), 'commenter': 'sea-bass', 'type': 'User'}, {'comment_id': 1275632501, 'comment_body': ""There's no `else` to this which simply sets the scaling to 1.0 -- should there be?"", 'comment_created': datetime.datetime(2023, 7, 27, 1, 24, 24, tzinfo=datetime.timezone.utc), 'commenter': 'sea-bass', 'type': 'User'}, {'comment_id': 1275633885, 'comment_body': 'Is this TODO for this PR? Seems like a quick one, so probably?', 'comment_created': datetime.datetime(2023, 7, 27, 1, 27, 27, tzinfo=datetime.timezone.utc), 'commenter': 'sea-bass', 'type': 'User'}, {'comment_id': 1275634058, 'comment_body': 'const?', 'comment_created': datetime.datetime(2023, 7, 27, 1, 27, 51, tzinfo=datetime.timezone.utc), 'commenter': 'sea-bass', 'type': 'User'}, {'comment_id': 1275634472, 'comment_body': 'Should this be const?', 'comment_created': datetime.datetime(2023, 7, 27, 1, 28, 55, tzinfo=datetime.timezone.utc), 'commenter': 'sea-bass', 'type': 'User'}, {'comment_id': 1275634890, 'comment_body': 'This addition seems a bit hacky... could it at least be configurable?', 'comment_created': datetime.datetime(2023, 7, 27, 1, 30, 3, tzinfo=datetime.timezone.utc), 'commenter': 'sea-bass', 'type': 'User'}, {'comment_id': 1275635892, 'comment_body': 'For maintanability, I would suggest not listing everything out and saying something like\r\n\r\n```suggestion\r\n      // Mark latest joint jog command as processed and also reject any other command types that had arrived simultaneously.\r\n```\r\n\r\nand same for the other comments like it here', 'comment_created': datetime.datetime(2023, 7, 27, 1, 32, 7, tzinfo=datetime.timezone.utc), 'commenter': 'sea-bass', 'type': 'User'}, {'comment_id': 1275635995, 'comment_body': 'const?', 'comment_created': datetime.datetime(2023, 7, 27, 1, 32, 21, tzinfo=datetime.timezone.utc), 'commenter': 'sea-bass', 'type': 'User'}, {'comment_id': 1275636231, 'comment_body': 'const?', 'comment_created': datetime.datetime(2023, 7, 27, 1, 32, 49, tzinfo=datetime.timezone.utc), 'commenter': 'sea-bass', 'type': 'User'}, {'comment_id': 1275636385, 'comment_body': 'const for both of these?', 'comment_created': datetime.datetime(2023, 7, 27, 1, 33, 7, tzinfo=datetime.timezone.utc), 'commenter': 'sea-bass', 'type': 'User'}, {'comment_id': 1275636504, 'comment_body': 'const?', 'comment_created': datetime.datetime(2023, 7, 27, 1, 33, 21, tzinfo=datetime.timezone.utc), 'commenter': 'sea-bass', 'type': 'User'}, {'comment_id': 1275636821, 'comment_body': 'Is there a need to make this a unique pointer vs. just making the Int8 message and not having to dereference/move it to publish?', 'comment_created': datetime.datetime(2023, 7, 27, 1, 34, 1, tzinfo=datetime.timezone.utc), 'commenter': 'sea-bass', 'type': 'User'}, {'comment_id': 1275638014, 'comment_body': 'const', 'comment_created': datetime.datetime(2023, 7, 27, 1, 36, 2, tzinfo=datetime.timezone.utc), 'commenter': 'sea-bass', 'type': 'User'}, {'comment_id': 1275638267, 'comment_body': 'const', 'comment_created': datetime.datetime(2023, 7, 27, 1, 36, 41, tzinfo=datetime.timezone.utc), 'commenter': 'sea-bass', 'type': 'User'}, {'comment_id': 1275638441, 'comment_body': 'const for all 3?', 'comment_created': datetime.datetime(2023, 7, 27, 1, 37, 3, tzinfo=datetime.timezone.utc), 'commenter': 'sea-bass', 'type': 'User'}, {'comment_id': 1275638702, 'comment_body': 'const?', 'comment_created': datetime.datetime(2023, 7, 27, 1, 37, 47, tzinfo=datetime.timezone.utc), 'commenter': 'sea-bass', 'type': 'User'}, {'comment_id': 1275638914, 'comment_body': 'all const?', 'comment_created': datetime.datetime(2023, 7, 27, 1, 38, 11, tzinfo=datetime.timezone.utc), 'commenter': 'sea-bass', 'type': 'User'}, {'comment_id': 1275639738, 'comment_body': 'can you instead use `hasNaN()` from Eigen itself?\r\nhttps://eigen.tuxfamily.org/dox/classEigen_1_1DenseBase.html#ab13d158c900560d3e1b25d85d2d33dd6\r\n\r\nsame for the other `isValidCommand` versions below', 'comment_created': datetime.datetime(2023, 7, 27, 1, 40, 1, tzinfo=datetime.timezone.utc), 'commenter': 'sea-bass', 'type': 'User'}, {'comment_id': 1275640359, 'comment_body': ""assuming you can't just use `hasNaN()` to do everything for you in this function, at least change `not_nan` to `is_valid_translation` to be consistent. But definitely try the first."", 'comment_created': datetime.datetime(2023, 7, 27, 1, 41, 32, tzinfo=datetime.timezone.utc), 'commenter': 'sea-bass', 'type': 'User'}, {'comment_id': 1275640712, 'comment_body': 'const?', 'comment_created': datetime.datetime(2023, 7, 27, 1, 42, 23, tzinfo=datetime.timezone.utc), 'commenter': 'sea-bass', 'type': 'User'}, {'comment_id': 1275641016, 'comment_body': 'const?', 'comment_created': datetime.datetime(2023, 7, 27, 1, 42, 35, tzinfo=datetime.timezone.utc), 'commenter': 'sea-bass', 'type': 'User'}, {'comment_id': 1275641152, 'comment_body': 'const?', 'comment_created': datetime.datetime(2023, 7, 27, 1, 42, 45, tzinfo=datetime.timezone.utc), 'commenter': 'sea-bass', 'type': 'User'}, {'comment_id': 1275641460, 'comment_body': ""What is this magic number? Shouldn't this be configurable in some way, or at least put in a more visible place, kind of like that SCALING_OVERRIDE_THRESHOLD value?"", 'comment_created': datetime.datetime(2023, 7, 27, 1, 43, 27, tzinfo=datetime.timezone.utc), 'commenter': 'sea-bass', 'type': 'User'}, {'comment_id': 1275641565, 'comment_body': 'const', 'comment_created': datetime.datetime(2023, 7, 27, 1, 43, 42, tzinfo=datetime.timezone.utc), 'commenter': 'sea-bass', 'type': 'User'}, {'comment_id': 1275641630, 'comment_body': 'const?', 'comment_created': datetime.datetime(2023, 7, 27, 1, 43, 53, tzinfo=datetime.timezone.utc), 'commenter': 'sea-bass', 'type': 'User'}, {'comment_id': 1275643230, 'comment_body': 'small typo\r\n\r\n```suggestion\r\nTEST(ServoUtilsUnitTests, JointLimitVelocityScaling)\r\n```', 'comment_created': datetime.datetime(2023, 7, 27, 1, 47, 36, tzinfo=datetime.timezone.utc), 'commenter': 'sea-bass', 'type': 'User'}, {'comment_id': 1275668080, 'comment_body': 'Can be fixed by setting `collision_velocity_scale_` to 1.0 at the beginning of every loop :+1: ', 'comment_created': datetime.datetime(2023, 7, 27, 2, 34, 29, tzinfo=datetime.timezone.utc), 'commenter': 'ibrahiminfinite', 'type': 'User'}, {'comment_id': 1275690088, 'comment_body': 'This cannot be const as it could be updated with a sign flip later.', 'comment_created': datetime.datetime(2023, 7, 27, 3, 25, 48, tzinfo=datetime.timezone.utc), 'commenter': 'ibrahiminfinite', 'type': 'User'}, {'comment_id': 1275695294, 'comment_body': '`jointsToHalt` only checks if the commanded velocity will make the joint go past position limit.', 'comment_created': datetime.datetime(2023, 7, 27, 3, 38, 51, tzinfo=datetime.timezone.utc), 'commenter': 'ibrahiminfinite', 'type': 'User'}, {'comment_id': 1275791589, 'comment_body': 'That was copy-pasta from the old implementation.\r\nNow that I look at the [documentation](https://docs.ros2.org/latest/api/rclcpp/classrclcpp_1_1Publisher.html), it seems creating the status once on the stack is better, since it takes a reference.\r\n\r\n```\r\nvirtual void rclcpp::Publisher< MessageT, AllocatorT >::publish(const MessageT &  msg)\r\n```', 'comment_created': datetime.datetime(2023, 7, 27, 6, 31, 8, tzinfo=datetime.timezone.utc), 'commenter': 'ibrahiminfinite', 'type': 'User'}, {'comment_id': 1275803411, 'comment_body': ""Oh, didn't notice Eigen had these.\r\nThe `allFinite()` feels more intuitive to use here."", 'comment_created': datetime.datetime(2023, 7, 27, 6, 45, 17, tzinfo=datetime.timezone.utc), 'commenter': 'ibrahiminfinite', 'type': 'User'}, {'comment_id': 1275831259, 'comment_body': 'Updated this to be configurable parameter, will be useful to set priority without recompiling.', 'comment_created': datetime.datetime(2023, 7, 27, 7, 15, 5, tzinfo=datetime.timezone.utc), 'commenter': 'ibrahiminfinite', 'type': 'User'}, {'comment_id': 1275831552, 'comment_body': 'Made this into a parameter with default value as well', 'comment_created': datetime.datetime(2023, 7, 27, 7, 15, 22, tzinfo=datetime.timezone.utc), 'commenter': 'ibrahiminfinite', 'type': 'User'}, {'comment_id': 1275894252, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2023, 7, 27, 8, 9, 26, tzinfo=datetime.timezone.utc), 'commenter': 'ibrahiminfinite', 'type': 'User'}, {'comment_id': 1275907531, 'comment_body': 'Done', 'comment_created': datetime.datetime(2023, 7, 27, 8, 19, 49, tzinfo=datetime.timezone.utc), 'commenter': 'ibrahiminfinite', 'type': 'User'}, {'comment_id': 1275921639, 'comment_body': 'We can add this later if necessary :+1: ', 'comment_created': datetime.datetime(2023, 7, 27, 8, 29, 5, tzinfo=datetime.timezone.utc), 'commenter': 'ibrahiminfinite', 'type': 'User'}, {'comment_id': 1276140946, 'comment_body': '`ServoNode` can now be launched as a component.\r\nThe C++ API demos are still launched as standalone, not sure if making the demos composable is necessary.', 'comment_created': datetime.datetime(2023, 7, 27, 11, 22, 50, tzinfo=datetime.timezone.utc), 'commenter': 'ibrahiminfinite', 'type': 'User'}, {'comment_id': 1276479585, 'comment_body': 'You could keep the same comment as before? Seems the old comment had more details.', 'comment_created': datetime.datetime(2023, 7, 27, 15, 42, 56, tzinfo=datetime.timezone.utc), 'commenter': 'sea-bass', 'type': 'User'}, {'comment_id': 1276484495, 'comment_body': 'Use the enum names instead of hard-coded numbers here.', 'comment_created': datetime.datetime(2023, 7, 27, 15, 46, 52, tzinfo=datetime.timezone.utc), 'commenter': 'sea-bass', 'type': 'User'}, {'comment_id': 1276858348, 'comment_body': ""It's confusing that these both have the same name... maybe call them get/set?"", 'comment_created': datetime.datetime(2023, 7, 27, 21, 58, 34, tzinfo=datetime.timezone.utc), 'commenter': 'sea-bass', 'type': 'User'}, {'comment_id': 1277012427, 'comment_body': 'Those additional details do not apply to the new version.\r\nIt was about ""filtered halt"" since the old implementation would always publish a message every iteration.', 'comment_created': datetime.datetime(2023, 7, 28, 2, 23, 55, tzinfo=datetime.timezone.utc), 'commenter': 'ibrahiminfinite', 'type': 'User'}, {'comment_id': 1277260892, 'comment_body': 'Done', 'comment_created': datetime.datetime(2023, 7, 28, 8, 24, 53, tzinfo=datetime.timezone.utc), 'commenter': 'ibrahiminfinite', 'type': 'User'}, {'comment_id': 1277261974, 'comment_body': 'Done', 'comment_created': datetime.datetime(2023, 7, 28, 8, 26, 1, tzinfo=datetime.timezone.utc), 'commenter': 'ibrahiminfinite', 'type': 'User'}, {'comment_id': 1277442265, 'comment_body': 'Double comments', 'comment_created': datetime.datetime(2023, 7, 28, 11, 41, 47, tzinfo=datetime.timezone.utc), 'commenter': 'sea-bass', 'type': 'User'}, {'comment_id': 1277442507, 'comment_body': 'Re-add? Might have been testing with it', 'comment_created': datetime.datetime(2023, 7, 28, 11, 42, 9, tzinfo=datetime.timezone.utc), 'commenter': 'sea-bass', 'type': 'User'}, {'comment_id': 1277443250, 'comment_body': 'We should have an ""else"" that logs an error with invalid type -- unless this is validated elsewhere?', 'comment_created': datetime.datetime(2023, 7, 28, 11, 43, 8, tzinfo=datetime.timezone.utc), 'commenter': 'sea-bass', 'type': 'User'}, {'comment_id': 1277444888, 'comment_body': 'This code addition is duplicated from above -- worth making it into a function?', 'comment_created': datetime.datetime(2023, 7, 28, 11, 45, 18, tzinfo=datetime.timezone.utc), 'commenter': 'sea-bass', 'type': 'User'}, {'comment_id': 1277450499, 'comment_body': 'It is validated by generate_parameter_library', 'comment_created': datetime.datetime(2023, 7, 28, 11, 51, 13, tzinfo=datetime.timezone.utc), 'commenter': 'ibrahiminfinite', 'type': 'User'}, {'comment_id': 1277452366, 'comment_body': 'The one above is for publisher creation during `ServoNode` initialisation.\r\nThis is for publishing.', 'comment_created': datetime.datetime(2023, 7, 28, 11, 53, tzinfo=datetime.timezone.utc), 'commenter': 'ibrahiminfinite', 'type': 'User'}, {'comment_id': 1277457451, 'comment_body': ""wow, my bad!\r\n\r\nI was confused because of the if/else. I think the publishers should both be created no matter what -- it doesn't hurt to have that extra publisher sitting around doing nothing, and would allow switching the command type at runtime (though not sure why someone would do that lol)"", 'comment_created': datetime.datetime(2023, 7, 28, 11, 57, 48, tzinfo=datetime.timezone.utc), 'commenter': 'sea-bass', 'type': 'User'}, {'comment_id': 1277520212, 'comment_body': 'In that case, we would have to add another `command_out_topic` parameter for the `Float64MultiArray`.\r\nOtherwise two different type of publishers point to the same topic.\r\nThe old `servo_calcs` also use the [same](https://github.com/ros-planning/moveit2/blob/830ceda79b8f67c2224eb9ea8eb37f4aa0fe2596/moveit_ros/moveit_servo/src/servo_calcs.cpp#L109) condition based publisher creation ', 'comment_created': datetime.datetime(2023, 7, 28, 13, 2, 26, tzinfo=datetime.timezone.utc), 'commenter': 'ibrahiminfinite', 'type': 'User'}, {'comment_id': 1277526641, 'comment_body': ""Ah, I see, it's only one topic. Ignore me then, sorry!"", 'comment_created': datetime.datetime(2023, 7, 28, 13, 9, 8, tzinfo=datetime.timezone.utc), 'commenter': 'sea-bass', 'type': 'User'}, {'comment_id': 1277557675, 'comment_body': '```suggestion\r\n *      Author      : Andy Zelenak, V Mohammed Ibrahim\r\n```', 'comment_created': datetime.datetime(2023, 7, 28, 13, 38, 24, tzinfo=datetime.timezone.utc), 'commenter': 'AndyZe', 'type': 'User'}, {'comment_id': 1277558096, 'comment_body': 'already covered by the description above\r\n```suggestion\r\n```', 'comment_created': datetime.datetime(2023, 7, 28, 13, 38, 49, tzinfo=datetime.timezone.utc), 'commenter': 'AndyZe', 'type': 'User'}, {'comment_id': 1277562541, 'comment_body': '```suggestion\r\n/*      Title       : servo_node.cpp\r\n *      Project     : moveit_servo\r\n *      Created     : 12/31/2018\r\n *      Author      : Andy Zelenak, V Mohammed Ibrahim\r\n```', 'comment_created': datetime.datetime(2023, 7, 28, 13, 43, 9, tzinfo=datetime.timezone.utc), 'commenter': 'AndyZe', 'type': 'User'}, {'comment_id': 1277574616, 'comment_body': 'We definitely want to preserve previous authorship. Adam was a former GSOC coder like you.\r\n\r\n```suggestion\r\n/* Author    : Adam Pettinger, V Mohammed Ibrahim\r\n```', 'comment_created': datetime.datetime(2023, 7, 28, 13, 54, 43, tzinfo=datetime.timezone.utc), 'commenter': 'AndyZe', 'type': 'User'}, {'comment_id': 1277577263, 'comment_body': '```suggestion\r\n   Created   : 07/13/2020\r\n```', 'comment_created': datetime.datetime(2023, 7, 28, 13, 57, 7, tzinfo=datetime.timezone.utc), 'commenter': 'AndyZe', 'type': 'User'}, {'comment_id': 1277578273, 'comment_body': '```suggestion\r\n  std::mutex joint_state_mutex_;\r\n```', 'comment_created': datetime.datetime(2023, 7, 28, 13, 57, 49, tzinfo=datetime.timezone.utc), 'commenter': 'AndyZe', 'type': 'User'}, {'comment_id': 1277579102, 'comment_body': 'This appears to not actually exit', 'comment_created': datetime.datetime(2023, 7, 28, 13, 58, 33, tzinfo=datetime.timezone.utc), 'commenter': 'AndyZe', 'type': 'User'}, {'comment_id': 1277580390, 'comment_body': 'I think they could figure this out from L96\r\n\r\n```suggestion\r\n```', 'comment_created': datetime.datetime(2023, 7, 28, 13, 59, 39, tzinfo=datetime.timezone.utc), 'commenter': 'AndyZe', 'type': 'User'}, {'comment_id': 1277600709, 'comment_body': 'Oh sorry about that , I did take care to check that I included previous authors, some of it must have gotten lost during license copy paste in between.', 'comment_created': datetime.datetime(2023, 7, 28, 14, 17, 44, tzinfo=datetime.timezone.utc), 'commenter': 'ibrahiminfinite', 'type': 'User'}, {'comment_id': 1277620575, 'comment_body': 'I think you could just add `std::exit(EXIT_FAILURE);`. That would cause whatever test to fail', 'comment_created': datetime.datetime(2023, 7, 28, 14, 25, 33, tzinfo=datetime.timezone.utc), 'commenter': 'AndyZe', 'type': 'User'}, {'comment_id': 1277622457, 'comment_body': 'This was added in for L116, since `panda_joint7` is not actually in the 7th position within the joint state array.\r\n```\r\nASSERT_NE(curr_state.position[8], prev_state.position[8]);\r\n```', 'comment_created': datetime.datetime(2023, 7, 28, 14, 27, 21, tzinfo=datetime.timezone.utc), 'commenter': 'ibrahiminfinite', 'type': 'User'}, {'comment_id': 1277624417, 'comment_body': 'Thanks for the catch!\r\nThere was originally a `std::exit()` there, but got deleted sometime during the changes.', 'comment_created': datetime.datetime(2023, 7, 28, 14, 29, 14, tzinfo=datetime.timezone.utc), 'commenter': 'ibrahiminfinite', 'type': 'User'}, {'comment_id': 1280970602, 'comment_body': '```suggestion\r\n      RCLCPP_WARN_STREAM(LOGGER, ""Invalid joint names in joint jog command"");\r\n    if (!velocity_valid)\r\n      RCLCPP_WARN_STREAM(LOGGER, ""Invalid velocity values in joint jog command"");\r\n```', 'comment_created': datetime.datetime(2023, 8, 1, 17, 56, 1, tzinfo=datetime.timezone.utc), 'commenter': 'sea-bass', 'type': 'User'}, {'comment_id': 1280970910, 'comment_body': ""Strong preference to still use curly brackets even if it's one line under the `if`"", 'comment_created': datetime.datetime(2023, 8, 1, 17, 56, 20, tzinfo=datetime.timezone.utc), 'commenter': 'sea-bass', 'type': 'User'}, {'comment_id': 1283703271, 'comment_body': 'This should really be a parameter (we found issues with that on Kinova robots), but definitely not for this PR!', 'comment_created': datetime.datetime(2023, 8, 3, 20, 46, 34, tzinfo=datetime.timezone.utc), 'commenter': 'sea-bass', 'type': 'User'}, {'comment_id': 1285225294, 'comment_body': 'Can this be brought back to its original 0.1 seconds for the timeout, or is there valid reason to increase it?', 'comment_created': datetime.datetime(2023, 8, 6, 14, 19, 16, tzinfo=datetime.timezone.utc), 'commenter': 'sea-bass', 'type': 'User'}, {'comment_id': 1285225383, 'comment_body': 'I am still not sure why we had to change from `panda_hand` to `panda_link8` -- what was this again?', 'comment_created': datetime.datetime(2023, 8, 6, 14, 19, 52, tzinfo=datetime.timezone.utc), 'commenter': 'sea-bass', 'type': 'User'}, {'comment_id': 1285226215, 'comment_body': ""Rather than suppressing this, can we change it to `getNodeBaseInterface()`? Or is this something specifically inherited from rclcpp that we can't control?\r\n\r\nIf it's the latter, maybe worth also leaving a comment with this reason."", 'comment_created': datetime.datetime(2023, 8, 6, 14, 26, 21, tzinfo=datetime.timezone.utc), 'commenter': 'sea-bass', 'type': 'User'}, {'comment_id': 1285228197, 'comment_body': 'This can now be reverted as the PR is merged! 🎉 ', 'comment_created': datetime.datetime(2023, 8, 6, 14, 44, 25, tzinfo=datetime.timezone.utc), 'commenter': 'sea-bass', 'type': 'User'}]","[{'commit_sha': '8050f38cf0c0ecdf69bd5b70cfd5ade9a4342edc', 'committer_username': 'ibrahiminfinite', 'committer_name': 'V Mohammed Ibrahim', 'committer_email': None, 'commit_date': datetime.datetime(2015, 5, 10, 4, 26, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dd3375475e20777d5c7c6e93da2ac8a7875add0f', 'committer_username': 'ibrahiminfinite', 'committer_name': 'V Mohammed Ibrahim', 'committer_email': None, 'commit_date': datetime.datetime(2015, 5, 10, 4, 26, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '57fffac161d2c3818c735c5c78b3e8217763acd8', 'committer_username': 'ibrahiminfinite', 'committer_name': 'V Mohammed Ibrahim', 'committer_email': None, 'commit_date': datetime.datetime(2015, 5, 10, 4, 26, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5d73ad72e31543419b9b69a8cfa6b8b292e1dfbf', 'committer_username': 'ibrahiminfinite', 'committer_name': 'V Mohammed Ibrahim', 'committer_email': None, 'commit_date': datetime.datetime(2015, 5, 10, 4, 26, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2de4c3383939be00d6fbefc3eabf34018b38c2ad', 'committer_username': 'ibrahiminfinite', 'committer_name': 'V Mohammed Ibrahim', 'committer_email': None, 'commit_date': datetime.datetime(2015, 5, 10, 4, 26, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1008a0e788a7e4aedc0a2163e3d2dcbf7e998f33', 'committer_username': 'ibrahiminfinite', 'committer_name': 'V Mohammed Ibrahim', 'committer_email': None, 'commit_date': datetime.datetime(2015, 5, 10, 4, 26, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '965bc5c0e064efcd098f6180cba49bab6987ae36', 'committer_username': 'ibrahiminfinite', 'committer_name': 'V Mohammed Ibrahim', 'committer_email': None, 'commit_date': datetime.datetime(2015, 5, 10, 4, 26, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '19921894e23cdc992229c272add09601a5d7cf90', 'committer_username': 'ibrahiminfinite', 'committer_name': 'V Mohammed Ibrahim', 'committer_email': None, 'commit_date': datetime.datetime(2015, 5, 10, 4, 26, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b63d0b605ab460c989986460aa399f922ca50f72', 'committer_username': 'ibrahiminfinite', 'committer_name': 'V Mohammed Ibrahim', 'committer_email': None, 'commit_date': datetime.datetime(2015, 5, 10, 4, 26, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '00081cb1012db1300a02533c85edfa3a988e9f7e', 'committer_username': 'ibrahiminfinite', 'committer_name': 'V Mohammed Ibrahim', 'committer_email': None, 'commit_date': datetime.datetime(2015, 5, 10, 4, 26, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5e2b2116b8e642bddc1c7c7648157a3deb8043c9', 'committer_username': 'ibrahiminfinite', 'committer_name': 'V Mohammed Ibrahim', 'committer_email': None, 'commit_date': datetime.datetime(2015, 5, 10, 4, 26, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '66840957f6c3154e0eeebf7cd64a05f799eb24cc', 'committer_username': 'ibrahiminfinite', 'committer_name': 'V Mohammed Ibrahim', 'committer_email': None, 'commit_date': datetime.datetime(2015, 5, 10, 4, 26, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0c1ee22274e2677ebbd6f5d61cea5fce0a89d5c8', 'committer_username': 'ibrahiminfinite', 'committer_name': 'V Mohammed Ibrahim', 'committer_email': None, 'commit_date': datetime.datetime(2015, 5, 10, 4, 26, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e4029d83cfa6fab72b02343472843c47c90b2eed', 'committer_username': 'ibrahiminfinite', 'committer_name': 'V Mohammed Ibrahim', 'committer_email': None, 'commit_date': datetime.datetime(2015, 5, 10, 4, 26, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '47f7db5b5cda287068543231857178290c9a9fe8', 'committer_username': 'ibrahiminfinite', 'committer_name': 'V Mohammed Ibrahim', 'committer_email': None, 'commit_date': datetime.datetime(2015, 5, 10, 4, 26, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c1ec27ebd76aaca5ded5e9d210c251f87191e2f1', 'committer_username': 'ibrahiminfinite', 'committer_name': 'V Mohammed Ibrahim', 'committer_email': None, 'commit_date': datetime.datetime(2015, 5, 10, 4, 26, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '67e1be320a373cad5b06d6d40998a8def82f2d57', 'committer_username': 'ibrahiminfinite', 'committer_name': 'V Mohammed Ibrahim', 'committer_email': None, 'commit_date': datetime.datetime(2015, 5, 10, 4, 26, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '90441e7fb11cc154f690f7ecd20cfa4a8fb4fd3d', 'committer_username': 'ibrahiminfinite', 'committer_name': 'V Mohammed Ibrahim', 'committer_email': None, 'commit_date': datetime.datetime(2015, 5, 10, 4, 26, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9772b3819fa5055e1ed5a5e57470da7a258d0fd9', 'committer_username': 'ibrahiminfinite', 'committer_name': 'V Mohammed Ibrahim', 'committer_email': None, 'commit_date': datetime.datetime(2015, 5, 10, 4, 26, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '72a5137e0a002994facebbafb34638dc351f1b6f', 'committer_username': 'ibrahiminfinite', 'committer_name': 'V Mohammed Ibrahim', 'committer_email': None, 'commit_date': datetime.datetime(2015, 5, 10, 4, 26, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a9d5edc063c4782d73896064a5449ef5395a9378', 'committer_username': 'ibrahiminfinite', 'committer_name': 'V Mohammed Ibrahim', 'committer_email': None, 'commit_date': datetime.datetime(2015, 5, 10, 4, 26, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1feb399ae518271a30dd829abfe8194ceeec0948', 'committer_username': 'ibrahiminfinite', 'committer_name': 'V Mohammed Ibrahim', 'committer_email': None, 'commit_date': datetime.datetime(2015, 5, 10, 4, 26, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5abc826f5e8ca29d1dce9c347047c38b3c32af38', 'committer_username': 'ibrahiminfinite', 'committer_name': 'V Mohammed Ibrahim', 'committer_email': None, 'commit_date': datetime.datetime(2015, 5, 10, 4, 26, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '84511ed8f7f20e1d88b4c566ade0f3655854dfe2', 'committer_username': 'ibrahiminfinite', 'committer_name': 'V Mohammed Ibrahim', 'committer_email': None, 'commit_date': datetime.datetime(2015, 5, 10, 4, 26, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '95bdaba6031439422aff6b353cd24d32df5a857a', 'committer_username': 'ibrahiminfinite', 'committer_name': 'V Mohammed Ibrahim', 'committer_email': None, 'commit_date': datetime.datetime(2015, 5, 10, 4, 26, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '345bec02dfbc6c9fb80e1e720a1bbe864b12d176', 'committer_username': 'ibrahiminfinite', 'committer_name': 'V Mohammed Ibrahim', 'committer_email': None, 'commit_date': datetime.datetime(2015, 5, 10, 4, 26, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6c525ef5ef13630f028a05926af74a7988ef971c', 'committer_username': 'ibrahiminfinite', 'committer_name': 'V Mohammed Ibrahim', 'committer_email': None, 'commit_date': datetime.datetime(2015, 5, 10, 4, 26, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2575b5f1c935f34fb0a24c4d9fde2d37e0292d8b', 'committer_username': 'ibrahiminfinite', 'committer_name': 'V Mohammed Ibrahim', 'committer_email': None, 'commit_date': datetime.datetime(2015, 5, 10, 4, 26, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '25b99d6064788c24f966ef90d0e6d3b92938ce1d', 'committer_username': 'ibrahiminfinite', 'committer_name': 'V Mohammed Ibrahim', 'committer_email': None, 'commit_date': datetime.datetime(2015, 5, 10, 4, 26, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7358d68f53ce61dbf588c7175503ddf398499db3', 'committer_username': 'ibrahiminfinite', 'committer_name': 'V Mohammed Ibrahim', 'committer_email': None, 'commit_date': datetime.datetime(2015, 5, 10, 4, 26, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'df619c78827c77b2d0545691df733b35fcfd8edd', 'committer_username': 'ibrahiminfinite', 'committer_name': 'V Mohammed Ibrahim', 'committer_email': None, 'commit_date': datetime.datetime(2015, 5, 10, 4, 26, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '63229e6597da0b1736417ea3636b20913507c65e', 'committer_username': 'ibrahiminfinite', 'committer_name': 'V Mohammed Ibrahim', 'committer_email': None, 'commit_date': datetime.datetime(2015, 5, 10, 4, 26, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b43abf853d66670d4c4ea7da2e12691a856c90a8', 'committer_username': 'ibrahiminfinite', 'committer_name': 'V Mohammed Ibrahim', 'committer_email': None, 'commit_date': datetime.datetime(2015, 5, 10, 4, 26, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '06739504878770a6f49dee107d0d9dfcf0de807f', 'committer_username': 'ibrahiminfinite', 'committer_name': 'V Mohammed Ibrahim', 'committer_email': None, 'commit_date': datetime.datetime(2015, 5, 10, 4, 26, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e28d088147fbb6460515699f49f131d5237feca4', 'committer_username': 'ibrahiminfinite', 'committer_name': 'V Mohammed Ibrahim', 'committer_email': None, 'commit_date': datetime.datetime(2015, 5, 10, 4, 26, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e45e96353334af53668125e33f681676f91c0b0e', 'committer_username': 'ibrahiminfinite', 'committer_name': 'V Mohammed Ibrahim', 'committer_email': None, 'commit_date': datetime.datetime(2015, 5, 10, 4, 26, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5b26b0521f524a1f0eb629356bae015f9a1d5bf5', 'committer_username': 'ibrahiminfinite', 'committer_name': 'V Mohammed Ibrahim', 'committer_email': None, 'commit_date': datetime.datetime(2015, 5, 10, 4, 26, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '99d980508d9e2c26a89374dcc30bf40096531765', 'committer_username': 'ibrahiminfinite', 'committer_name': 'V Mohammed Ibrahim', 'committer_email': None, 'commit_date': datetime.datetime(2015, 5, 10, 4, 26, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f0b7fdc9be0b5b423f33e1b66a72cb7074419b78', 'committer_username': 'ibrahiminfinite', 'committer_name': 'V Mohammed Ibrahim', 'committer_email': None, 'commit_date': datetime.datetime(2015, 5, 10, 4, 26, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e5ccdf28599c050900db7770129029e8023498fd', 'committer_username': 'ibrahiminfinite', 'committer_name': 'V Mohammed Ibrahim', 'committer_email': None, 'commit_date': datetime.datetime(2015, 5, 10, 4, 26, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a8fa0425cfce7757fdb5724f81635356a05c0ec4', 'committer_username': 'ibrahiminfinite', 'committer_name': 'V Mohammed Ibrahim', 'committer_email': None, 'commit_date': datetime.datetime(2015, 5, 10, 4, 26, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dc1cb302b93624748021286630bfdc3a13557e55', 'committer_username': 'ibrahiminfinite', 'committer_name': 'V Mohammed Ibrahim', 'committer_email': None, 'commit_date': datetime.datetime(2015, 5, 10, 4, 26, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '70c06eac20fe279830a320c2fc8d63f2c876f821', 'committer_username': 'ibrahiminfinite', 'committer_name': 'V Mohammed Ibrahim', 'committer_email': None, 'commit_date': datetime.datetime(2015, 5, 10, 4, 26, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd524172e12d134a5694f63974d735470e7b136fc', 'committer_username': 'ibrahiminfinite', 'committer_name': 'V Mohammed Ibrahim', 'committer_email': None, 'commit_date': datetime.datetime(2015, 5, 10, 4, 26, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '78f5c43f9c6865894bc0b3617265ab89113e778c', 'committer_username': 'ibrahiminfinite', 'committer_name': 'V Mohammed Ibrahim', 'committer_email': None, 'commit_date': datetime.datetime(2015, 5, 10, 4, 26, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7dfe3de81eb4de873044ea2fd6576019d6c77ea5', 'committer_username': 'ibrahiminfinite', 'committer_name': 'V Mohammed Ibrahim', 'committer_email': None, 'commit_date': datetime.datetime(2015, 5, 10, 4, 26, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7d5a9d6f181d8a74119ee89d4d4eb488c65d5be9', 'committer_username': 'ibrahiminfinite', 'committer_name': 'V Mohammed Ibrahim', 'committer_email': None, 'commit_date': datetime.datetime(2015, 5, 10, 4, 26, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '46a9ead543a56e8e9a90f08439977b8e56d22905', 'committer_username': 'ibrahiminfinite', 'committer_name': 'V Mohammed Ibrahim', 'committer_email': None, 'commit_date': datetime.datetime(2015, 5, 10, 4, 26, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a1024a311dd51dc96ac58ced314eea1c20abd119', 'committer_username': 'ibrahiminfinite', 'committer_name': 'V Mohammed Ibrahim', 'committer_email': None, 'commit_date': datetime.datetime(2015, 5, 10, 4, 26, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '061fb695136a8780f3565489b2896d016c6ad9f2', 'committer_username': 'ibrahiminfinite', 'committer_name': 'V Mohammed Ibrahim', 'committer_email': None, 'commit_date': datetime.datetime(2015, 5, 10, 4, 26, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '83a11c430e67f1b6f6d28d74fa3a3bf0a1a2186e', 'committer_username': 'ibrahiminfinite', 'committer_name': 'V Mohammed Ibrahim', 'committer_email': None, 'commit_date': datetime.datetime(2015, 5, 10, 4, 26, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '710eb64ab87bc6848cbc10128007290fad524760', 'committer_username': 'ibrahiminfinite', 'committer_name': 'V Mohammed Ibrahim', 'committer_email': None, 'commit_date': datetime.datetime(2015, 5, 10, 4, 26, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2ee77d3ab82f98ebd5006f9034f781603756662e', 'committer_username': 'ibrahiminfinite', 'committer_name': 'V Mohammed Ibrahim', 'committer_email': None, 'commit_date': datetime.datetime(2015, 5, 10, 4, 26, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'eda31330572e27faf1e1cb4366cda3e6de843f7c', 'committer_username': 'sea-bass', 'committer_name': 'Sebastian Castro', 'committer_email': None, 'commit_date': datetime.datetime(2013, 6, 3, 17, 53, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b40a11d09080a26c73914e6460a657db5e1a2c1b', 'committer_username': 'sea-bass', 'committer_name': 'Sebastian Castro', 'committer_email': None, 'commit_date': datetime.datetime(2013, 6, 3, 17, 53, 22, tzinfo=datetime.timezone.utc)}]",V Mohammed Ibrahim,12377945,,User,,37,,5,8
1451841551,[Servo]: Refactor updates,"This PR updates moveit_msgs to support the new MoveIt Servo implementation, https://github.com/ros-planning/moveit2/pull/2224

- Removes the services `ChangeControlDimensions` and `ChangeDriftDimensions`.
- Add the `ServoCommandType` service and `ServoStatus` message.

Ping : @AndyZe @tylerjw ",True,161,https://api.github.com/repos/moveit/moveit_msgs/pulls/161,https://github.com/moveit/moveit_msgs/pull/161,closed,25,31,5,1,0,0,0,0,[],2023-07-27 11:40:46+00:00,2023-08-06 14:38:07+00:00,874641.0,"10 days, 2:57:21",[],"[{'commit_sha': 'd4769cac770ba08a69016b1c7628478dbe057e97', 'committer_username': 'ibrahiminfinite', 'committer_name': 'V Mohammed Ibrahim', 'committer_email': None, 'commit_date': datetime.datetime(2015, 5, 10, 4, 26, 45, tzinfo=datetime.timezone.utc)}]",V Mohammed Ibrahim,12377945,,User,,37,,5,8
1466565552,[Servo] Update servo tutorials,"### Description

This PR updates the tutorials for MoveIt Servo as part the recent refactor https://github.com/ros-planning/moveit2/pull/2224.

### Checklist
- [x] **Required by CI**: Code is auto formatted using [clang-format](http://moveit.ros.org/documentation/contributing/code)

Pining @sea-bass  @AndyZe  for review.",True,734,https://api.github.com/repos/moveit/moveit2_tutorials/pulls/734,https://github.com/moveit/moveit2_tutorials/pull/734,closed,728,749,9,3,1,46,0,0,[],2023-08-08 09:33:57+00:00,2023-08-08 18:44:46+00:00,33049.0,9:10:49,"[{'comment_id': 1287052018, 'comment_body': 'Should we also put the butterworth filter coefficient in here, or does it go elsewhere?', 'comment_created': datetime.datetime(2023, 8, 8, 12, 33, 48, tzinfo=datetime.timezone.utc), 'commenter': 'sea-bass', 'type': 'User'}, {'comment_id': 1287053019, 'comment_body': ""I'd remove the pull request link at this point"", 'comment_created': datetime.datetime(2023, 8, 8, 12, 34, 43, tzinfo=datetime.timezone.utc), 'commenter': 'sea-bass', 'type': 'User'}, {'comment_id': 1287053993, 'comment_body': '```suggestion\r\nMoveIt Servo accepts any of the following types of commands:\r\n```\r\n\r\nThis is true in a lot of other places as well. Try to say ""MoveIt Servo"" instead of just ""Servo""', 'comment_created': datetime.datetime(2023, 8, 8, 12, 35, 34, tzinfo=datetime.timezone.utc), 'commenter': 'sea-bass', 'type': 'User'}, {'comment_id': 1287055873, 'comment_body': 'end effector is not hyphenated', 'comment_created': datetime.datetime(2023, 8, 8, 12, 37, 14, tzinfo=datetime.timezone.utc), 'commenter': 'sea-bass', 'type': 'User'}, {'comment_id': 1287056442, 'comment_body': '```suggestion\r\nMoveit Servo consists of two main parts: The core implementation ``Servo`` which provides a C++ interface, and the ``ServoNode`` which\r\n```', 'comment_created': datetime.datetime(2023, 8, 8, 12, 37, 46, tzinfo=datetime.timezone.utc), 'commenter': 'sea-bass', 'type': 'User'}, {'comment_id': 1287058742, 'comment_body': 'It might be worth expanding a little here and saying that these features specifically will scale down the commanded velocities when approaching singularities/collisions for safe operation.', 'comment_created': datetime.datetime(2023, 8, 8, 12, 39, 45, tzinfo=datetime.timezone.utc), 'commenter': 'sea-bass', 'type': 'User'}, {'comment_id': 1287063586, 'comment_body': 'Rather than linking directly to a URL, there is a `:moveit_codedir:` directive you can use to ensure things stay in sync. You can look at examples in this repo, but I think it works something like this:\r\n\r\n```\r\n:moveit_codedir:`servo_parameters.yaml <moveit_ros/moveit_servo/config/servo_parameters.yaml>`\r\n```', 'comment_created': datetime.datetime(2023, 8, 8, 12, 43, 42, tzinfo=datetime.timezone.utc), 'commenter': 'sea-bass', 'type': 'User'}, {'comment_id': 1287063820, 'comment_body': 'Again, use `:moveit_codedir:`', 'comment_created': datetime.datetime(2023, 8, 8, 12, 43, 54, tzinfo=datetime.timezone.utc), 'commenter': 'sea-bass', 'type': 'User'}, {'comment_id': 1287065531, 'comment_body': 'Either use a single code block or add some non-code text with explanations in between these.', 'comment_created': datetime.datetime(2023, 8, 8, 12, 45, 16, tzinfo=datetime.timezone.utc), 'commenter': 'sea-bass', 'type': 'User'}, {'comment_id': 1287066540, 'comment_body': 'Might be nice to expand a bit more on the text to officially define what `JointJogCommand`, `TwistCommand`, and `PoseCommand` actually do.', 'comment_created': datetime.datetime(2023, 8, 8, 12, 46, 7, tzinfo=datetime.timezone.utc), 'commenter': 'sea-bass', 'type': 'User'}, {'comment_id': 1287067137, 'comment_body': '```suggestion\r\nThe status can be used as input for various decisions.\r\n```\r\n... various decisions, such as? Might be good to provide examples.', 'comment_created': datetime.datetime(2023, 8, 8, 12, 46, 37, tzinfo=datetime.timezone.utc), 'commenter': 'sea-bass', 'type': 'User'}, {'comment_id': 1287067480, 'comment_body': '`:moveit_codedir:`', 'comment_created': datetime.datetime(2023, 8, 8, 12, 46, 52, tzinfo=datetime.timezone.utc), 'commenter': 'sea-bass', 'type': 'User'}, {'comment_id': 1287068276, 'comment_body': '```suggestion\r\n    1. ``control_msgs::msg::JointJog`` on the topic specified by the ``joint_command_in_topic`` parameter.\r\n    2. ``geometry_msgs::msg::TwistStamped`` on the topic specified by the ``cartesian_command_in_topic`` parameter.\r\n    3. ``geometry_msgs::msg::PoseStamped`` on the topic specified by the ``pose_command_in_topic`` parameter.\r\n```', 'comment_created': datetime.datetime(2023, 8, 8, 12, 47, 33, tzinfo=datetime.timezone.utc), 'commenter': 'sea-bass', 'type': 'User'}, {'comment_id': 1287069355, 'comment_body': 'There is actually a `:moveit_msgs_codedir:` you can use here too :)\r\n\r\nThese are all defined here btw: https://github.com/ros-planning/moveit2_tutorials/blob/f226955d549b4f5e650d17b96ba1174302d7adcd/conf.py#L188', 'comment_created': datetime.datetime(2023, 8, 8, 12, 48, 28, tzinfo=datetime.timezone.utc), 'commenter': 'sea-bass', 'type': 'User'}, {'comment_id': 1287069928, 'comment_body': 'typo\r\n\r\n```suggestion\r\n        switch_input_client = node->create_client<moveit_msgs::srv::ServoCommandType>(""servo_node/switch_command_type"");\r\n```\r\n\r\nmake sure the whole code block is updated with this', 'comment_created': datetime.datetime(2023, 8, 8, 12, 48, 54, tzinfo=datetime.timezone.utc), 'commenter': 'sea-bass', 'type': 'User'}, {'comment_id': 1287070550, 'comment_body': '`:moveit_msgs_codedir:`', 'comment_created': datetime.datetime(2023, 8, 8, 12, 49, 16, tzinfo=datetime.timezone.utc), 'commenter': 'sea-bass', 'type': 'User'}, {'comment_id': 1287071600, 'comment_body': 'specify the name of the service here, `<node_mame>/switch_command_type`', 'comment_created': datetime.datetime(2023, 8, 8, 12, 50, 2, tzinfo=datetime.timezone.utc), 'commenter': 'sea-bass', 'type': 'User'}, {'comment_id': 1287072397, 'comment_body': 'Specify the service name here as well, `<node_name>/pause_servo` is it?', 'comment_created': datetime.datetime(2023, 8, 8, 12, 50, 37, tzinfo=datetime.timezone.utc), 'commenter': 'sea-bass', 'type': 'User'}, {'comment_id': 1287073346, 'comment_body': 'And here... you guessed it, use `:codedir:`', 'comment_created': datetime.datetime(2023, 8, 8, 12, 51, 22, tzinfo=datetime.timezone.utc), 'commenter': 'sea-bass', 'type': 'User'}, {'comment_id': 1287074113, 'comment_body': 'Unnecessary blank lines?\r\n\r\nInstead, consider replacing them with a comment explaining what this demo does.', 'comment_created': datetime.datetime(2023, 8, 8, 12, 52, tzinfo=datetime.timezone.utc), 'commenter': 'sea-bass', 'type': 'User'}, {'comment_id': 1287075210, 'comment_body': 'Also, there are no comments explaining anything for the first 158 lines of this code!\r\n\r\nPlease add at least top level `@brief` docstring to all the class/struct definitions and functions created here. It will help users understand what this is all for.', 'comment_created': datetime.datetime(2023, 8, 8, 12, 52, 53, tzinfo=datetime.timezone.utc), 'commenter': 'sea-bass', 'type': 'User'}, {'comment_id': 1287077739, 'comment_body': 'maybe consider using `1.0 * M_PI / 180.0` for clarity?', 'comment_created': datetime.datetime(2023, 8, 8, 12, 54, 51, tzinfo=datetime.timezone.utc), 'commenter': 'sea-bass', 'type': 'User'}, {'comment_id': 1287079316, 'comment_body': ""I think range-based for loop will work here since you don't need the index\r\n\r\n```suggestion\r\n  for (const auto& pose : path)\r\n  {\r\n    ee_pose.rotate(Eigen::AngleAxisd(-step, Eigen::Vector3d::UnitZ()));\r\n    auto target_pose = getPose(pose, Eigen::Quaterniond(ee_pose.rotation()));\r\n    target_pose.header.stamp = node->now();\r\n    pose_publisher->publish(target_pose);\r\n    rate.sleep();\r\n    door.rotateDoor(door_angle);\r\n    door_angle += step;\r\n  }"", 'comment_created': datetime.datetime(2023, 8, 8, 12, 56, 8, tzinfo=datetime.timezone.utc), 'commenter': 'sea-bass', 'type': 'User'}, {'comment_id': 1287082206, 'comment_body': 'I might suggest creating a new subsection here called e.g. ""Application Examples"" that shows this door opening demo, and later can show some of the other cool servo tutorials planned.', 'comment_created': datetime.datetime(2023, 8, 8, 12, 58, 22, tzinfo=datetime.timezone.utc), 'commenter': 'sea-bass', 'type': 'User'}, {'comment_id': 1287097290, 'comment_body': 'That is loaded directly in the launch file at the moment.\r\nSince that parameter is not under ""moveit_servo"" namespace ', 'comment_created': datetime.datetime(2023, 8, 8, 13, 10, 34, tzinfo=datetime.timezone.utc), 'commenter': 'ibrahiminfinite', 'type': 'User'}, {'comment_id': 1287098675, 'comment_body': 'Oh awesome! Thanks!', 'comment_created': datetime.datetime(2023, 8, 8, 13, 11, 46, tzinfo=datetime.timezone.utc), 'commenter': 'ibrahiminfinite', 'type': 'User'}, {'comment_id': 1287099601, 'comment_body': '```suggestion\r\n    pose_tracking_tutorial\r\n```', 'comment_created': datetime.datetime(2023, 8, 8, 13, 12, 30, tzinfo=datetime.timezone.utc), 'commenter': 'AndyZe', 'type': 'User'}, {'comment_id': 1287101531, 'comment_body': ""I'd rather if you got this config file from the servo pkg. One less thing to keep in sync.\r\n\r\nhttps://github.com/ros-planning/moveit2/blob/main/moveit_ros/moveit_servo/config/panda_simulated_config.yaml"", 'comment_created': datetime.datetime(2023, 8, 8, 13, 14, 2, tzinfo=datetime.timezone.utc), 'commenter': 'AndyZe', 'type': 'User'}, {'comment_id': 1287103736, 'comment_body': 'meh', 'comment_created': datetime.datetime(2023, 8, 8, 13, 15, 52, tzinfo=datetime.timezone.utc), 'commenter': 'AndyZe', 'type': 'User'}, {'comment_id': 1287105004, 'comment_body': 'The next line should be part of this line too, I think. rst will handle the text wrapping.', 'comment_created': datetime.datetime(2023, 8, 8, 13, 16, 50, tzinfo=datetime.timezone.utc), 'commenter': 'AndyZe', 'type': 'User'}, {'comment_id': 1287105788, 'comment_body': '```suggestion\r\nThis can be beneficial when there is a performance requirement to avoid the overhead of ROS communication infrastucture, or when the output generated by Servo needs to be fed into some other controller that does not have a ROS interface.\r\n```', 'comment_created': datetime.datetime(2023, 8, 8, 13, 17, 28, tzinfo=datetime.timezone.utc), 'commenter': 'AndyZe', 'type': 'User'}, {'comment_id': 1287108132, 'comment_body': 'Not sure about that. Brevity is good sometimes, and the names are pretty obvious.', 'comment_created': datetime.datetime(2023, 8, 8, 13, 19, 6, tzinfo=datetime.timezone.utc), 'commenter': 'AndyZe', 'type': 'User'}, {'comment_id': 1287108856, 'comment_body': 'Gotta mention somewhere that this can only be in the planning frame (for now).', 'comment_created': datetime.datetime(2023, 8, 8, 13, 19, 33, tzinfo=datetime.timezone.utc), 'commenter': 'AndyZe', 'type': 'User'}, {'comment_id': 1287110673, 'comment_body': '```suggestion\r\nThe user can use status for higher-level decision making.\r\n```', 'comment_created': datetime.datetime(2023, 8, 8, 13, 20, 53, tzinfo=datetime.timezone.utc), 'commenter': 'AndyZe', 'type': 'User'}, {'comment_id': 1287111845, 'comment_body': '```suggestion\r\n    2. ``geometry_msgs::msg::TwistStamped`` on the topic specified by ``cartesian_command_in_topic`` parameter. For now, the twist message must be in the planning frame of the robot. (This will be updated soon.)\r\n```', 'comment_created': datetime.datetime(2023, 8, 8, 13, 21, 47, tzinfo=datetime.timezone.utc), 'commenter': 'AndyZe', 'type': 'User'}, {'comment_id': 1287115262, 'comment_body': ""I think we're losing this information about IK plugins. Can you bring it back?"", 'comment_created': datetime.datetime(2023, 8, 8, 13, 24, 20, tzinfo=datetime.timezone.utc), 'commenter': 'AndyZe', 'type': 'User'}, {'comment_id': 1287117104, 'comment_body': '```suggestion\r\n  for (size_t i = 0; i < path.size(); ++i)\r\n```', 'comment_created': datetime.datetime(2023, 8, 8, 13, 25, 42, tzinfo=datetime.timezone.utc), 'commenter': 'AndyZe', 'type': 'User'}, {'comment_id': 1287124627, 'comment_body': 'Had considered this, but it felt more confusing that way.  So went with the comment.', 'comment_created': datetime.datetime(2023, 8, 8, 13, 31, 26, tzinfo=datetime.timezone.utc), 'commenter': 'ibrahiminfinite', 'type': 'User'}, {'comment_id': 1287128265, 'comment_body': 'Yeah, that is a very important point.\r\nThanks.', 'comment_created': datetime.datetime(2023, 8, 8, 13, 32, 55, tzinfo=datetime.timezone.utc), 'commenter': 'ibrahiminfinite', 'type': 'User'}, {'comment_id': 1287132128, 'comment_body': ""Related to one of @AndyZe's comments, I think this is also information we're losing and we should add back in wherever it makes sense. Not necessarily the demo, but the info on possible sources of commands.\r\n\r\nAdditionally, with pose tracking mode enabled we could say this could also come from some other object/frame tracker.\r\n\r\n"", 'comment_created': datetime.datetime(2023, 8, 8, 13, 35, 26, tzinfo=datetime.timezone.utc), 'commenter': 'sea-bass', 'type': 'User'}, {'comment_id': 1287181924, 'comment_body': 'Did not add that separately since it is already in the example right below this line. ', 'comment_created': datetime.datetime(2023, 8, 8, 14, 8, 59, tzinfo=datetime.timezone.utc), 'commenter': 'ibrahiminfinite', 'type': 'User'}, {'comment_id': 1287183631, 'comment_body': 'LOL, sorry about that , totally forgot to add comments in the code after I cleaned it up.', 'comment_created': datetime.datetime(2023, 8, 8, 14, 10, 11, tzinfo=datetime.timezone.utc), 'commenter': 'ibrahiminfinite', 'type': 'User'}, {'comment_id': 1287205281, 'comment_body': 'I agree with Andy on this,  we are already linking the `datatypes.hpp` header in the beginning of the section so that users can take a look at that before proceeding to the section where we show how to use the commands.', 'comment_created': datetime.datetime(2023, 8, 8, 14, 25, 21, tzinfo=datetime.timezone.utc), 'commenter': 'ibrahiminfinite', 'type': 'User'}, {'comment_id': 1287284738, 'comment_body': 'Did not add explanations between  the blocks since I put comments in the blocks, making it a single block with inline comments might be the better idea.', 'comment_created': datetime.datetime(2023, 8, 8, 15, 22, 14, tzinfo=datetime.timezone.utc), 'commenter': 'ibrahiminfinite', 'type': 'User'}, {'comment_id': 1287287495, 'comment_body': 'Maybe later one we have more application demos ?\r\nRight now it is just the door opening pose demo. ', 'comment_created': datetime.datetime(2023, 8, 8, 15, 24, 19, tzinfo=datetime.timezone.utc), 'commenter': 'ibrahiminfinite', 'type': 'User'}, {'comment_id': 1287347739, 'comment_body': '\r\n>This enables teleoperation via a wide range of input schemes, or for other autonomous software to control the robot - in visual servoing or closed loop position control for instance.\r\n\r\nThis statement at the beginning covers it right?', 'comment_created': datetime.datetime(2023, 8, 8, 16, 8, 35, tzinfo=datetime.timezone.utc), 'commenter': 'ibrahiminfinite', 'type': 'User'}]","[{'commit_sha': 'a3e94cf0b0b0a69c620273f63a561905412952f4', 'committer_username': 'ibrahiminfinite', 'committer_name': 'V Mohammed Ibrahim', 'committer_email': None, 'commit_date': datetime.datetime(2015, 5, 10, 4, 26, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ce3f729363745c4d953ed2e78355865de466d1b1', 'committer_username': 'ibrahiminfinite', 'committer_name': 'V Mohammed Ibrahim', 'committer_email': None, 'commit_date': datetime.datetime(2015, 5, 10, 4, 26, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '41400e042ba79f3263f36aa32d0afa1afd8c114e', 'committer_username': 'ibrahiminfinite', 'committer_name': 'V Mohammed Ibrahim', 'committer_email': None, 'commit_date': datetime.datetime(2015, 5, 10, 4, 26, 45, tzinfo=datetime.timezone.utc)}]",V Mohammed Ibrahim,12377945,,User,,37,,5,8
1483239144,[Servo] Fix Twist transformation ,"### Description

Fixes #2150 
Previous discussions on https://github.com/ros-planning/moveit2/pull/2301

The problem had boiled down to:
> How do we reconcile that some users (like myself) want the rotation-only part of the twist, whereas others (like those who reported https://github.com/ros-planning/moveit2/issues/2150) want the actual translation+rotation portion of twisting the EE frame w.r.t. the base frame?

This PR addresses  the  above by adding the option for proper twist conversion while preserving the existing method of twist conversion (which is wrong).
The selection is made using the parameter  `apply_twist_commands_about_ee_frame`.

@sea-bass 
@AndyZe 




",True,2311,https://api.github.com/repos/moveit/moveit2/pulls/2311,https://github.com/moveit/moveit2/pull/2311,closed,97,17,7,4,4,7,0,0,[],2023-08-21 16:52:17+00:00,2023-08-23 17:24:15+00:00,174718.0,"2 days, 0:31:58","[{'comment_id': 1301136649, 'comment_body': ""This param name doesn't read like it's a boolean, but rather as the angular velocity itself.\r\n\r\nMaybe `apply_twist_commands_about_ee_frame` or something?"", 'comment_created': datetime.datetime(2023, 8, 22, 7, 18, 52, tzinfo=datetime.timezone.utc), 'commenter': 'sea-bass', 'type': 'User'}, {'comment_id': 1301141263, 'comment_body': 'Should we be linking here to some of the resources in @AndyZe\'s Eigen conversion function in case people want to read more about that?\r\n\r\nAlso, I\'m not sure that ""not accurate"" is quite the right thing here anymore. It really is whether you want the twist to be applied about the planning frame vs. about the end effector frame, which is what caused all our confusion last week in the first place. So probably worth rewording that here as well?', 'comment_created': datetime.datetime(2023, 8, 22, 7, 22, 48, tzinfo=datetime.timezone.utc), 'commenter': 'sea-bass', 'type': 'User'}, {'comment_id': 1301221391, 'comment_body': '👍', 'comment_created': datetime.datetime(2023, 8, 22, 8, 10, 1, tzinfo=datetime.timezone.utc), 'commenter': 'ibrahiminfinite', 'type': 'User'}, {'comment_id': 1301222882, 'comment_body': 'Yeah that is a good idea.', 'comment_created': datetime.datetime(2023, 8, 22, 8, 10, 38, tzinfo=datetime.timezone.utc), 'commenter': 'ibrahiminfinite', 'type': 'User'}, {'comment_id': 1301623775, 'comment_body': ""I'd bump up the tolerance quite a bit so we don't end up with a flaky test. Especially since it involves quite a few factors like the filter type, etc.\r\n\r\n```suggestion\r\n  constexpr double tol = 0.0001;\r\n  ASSERT_NEAR(delta, expected_delta, tol);\r\n```"", 'comment_created': datetime.datetime(2023, 8, 22, 13, 9, 5, tzinfo=datetime.timezone.utc), 'commenter': 'AndyZe', 'type': 'User'}, {'comment_id': 1302536859, 'comment_body': 'Not sure that will be a problem.\r\nI had added an option to disable the use of smoothing plugins during the refactor for making testing easier.\r\nSo the tests run without using the smoothing plugins, and the command values are well below any type of scaling limit.\r\n', 'comment_created': datetime.datetime(2023, 8, 23, 6, 25, 20, tzinfo=datetime.timezone.utc), 'commenter': 'ibrahiminfinite', 'type': 'User'}, {'comment_id': 1302541049, 'comment_body': '> It really is whether you want the twist to be applied about the planning frame vs. about the end effector frame,\r\n\r\nThe ""not accurate"" part is about the command being in some moving frame other than ee frame. (eg: the case of elbow frame)', 'comment_created': datetime.datetime(2023, 8, 23, 6, 30, 18, tzinfo=datetime.timezone.utc), 'commenter': 'ibrahiminfinite', 'type': 'User'}]","[{'commit_sha': '961434f11cf3ebc1d908e9e8c3f758871c9cf61e', 'committer_username': 'ibrahiminfinite', 'committer_name': 'V Mohammed Ibrahim', 'committer_email': None, 'commit_date': datetime.datetime(2015, 5, 10, 4, 26, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5001d863f8946ac9e0fd2001a108b9c88f41dc69', 'committer_username': 'ibrahiminfinite', 'committer_name': 'V Mohammed Ibrahim', 'committer_email': None, 'commit_date': datetime.datetime(2015, 5, 10, 4, 26, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cebe63a48c3512fb0f07f0e1253c448c833a6bf7', 'committer_username': 'ibrahiminfinite', 'committer_name': 'V Mohammed Ibrahim', 'committer_email': None, 'commit_date': datetime.datetime(2015, 5, 10, 4, 26, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'be8860c8488010d0a7e2d4bbcc3e8552132820f4', 'committer_username': 'ibrahiminfinite', 'committer_name': 'V Mohammed Ibrahim', 'committer_email': None, 'commit_date': datetime.datetime(2015, 5, 10, 4, 26, 45, tzinfo=datetime.timezone.utc)}]",V Mohammed Ibrahim,12377945,,User,,37,,5,8

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
170893393,moveit2,moveit/moveit2,C++,503,1019,46,457,9277,306,22,44,"[{'id': 1540074260, 'number': 2405, 'closed': datetime.datetime(2023, 10, 22, 17, 53, 8, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 10, 3, 14, 3, 59, tzinfo=datetime.timezone.utc), 'time_taken': 1655349.0, 'time_delta': '19 days, 3:49:09', 'additions': 75, 'deletions': 43, 'state': 'closed'}, {'id': 1527309690, 'number': 2381, 'closed': datetime.datetime(2023, 9, 25, 17, 17, 40, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 9, 23, 6, 51, 53, tzinfo=datetime.timezone.utc), 'time_taken': 210347.0, 'time_delta': '2 days, 10:25:47', 'additions': 156, 'deletions': 130, 'state': 'closed'}, {'id': 1494204491, 'number': 2333, 'closed': datetime.datetime(2023, 9, 16, 12, 51, 49, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 8, 29, 18, 9, 16, tzinfo=datetime.timezone.utc), 'time_taken': 1536153.0, 'time_delta': '17 days, 18:42:33', 'additions': 181, 'deletions': 146, 'state': 'closed'}, {'id': 1483239144, 'number': 2311, 'closed': datetime.datetime(2023, 8, 23, 17, 24, 15, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 8, 21, 16, 52, 17, tzinfo=datetime.timezone.utc), 'time_taken': 174718.0, 'time_delta': '2 days, 0:31:58', 'additions': 97, 'deletions': 17, 'state': 'closed'}, {'id': 1475511986, 'number': 2301, 'closed': datetime.datetime(2023, 8, 21, 16, 36, 25, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 8, 15, 7, 17, 49, tzinfo=datetime.timezone.utc), 'time_taken': 551916.0, 'time_delta': '6 days, 9:18:36', 'additions': 0, 'deletions': 0, 'state': 'closed'}, {'id': 1471992346, 'number': 2295, 'closed': datetime.datetime(2023, 8, 11, 16, 23, 25, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 8, 11, 15, 25, 53, tzinfo=datetime.timezone.utc), 'time_taken': 3452.0, 'time_delta': '0:57:32', 'additions': 12, 'deletions': 1, 'state': 'closed'}, {'id': 1377022672, 'number': 2224, 'closed': datetime.datetime(2023, 8, 7, 16, 12, 26, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 6, 3, 14, 8, 47, tzinfo=datetime.timezone.utc), 'time_taken': 5623419.0, 'time_delta': '65 days, 2:03:39', 'additions': 4486, 'deletions': 5316, 'state': 'closed'}, {'id': 1352398284, 'number': 2180, 'closed': datetime.datetime(2023, 5, 24, 15, 30, 55, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 5, 16, 12, 11, 20, tzinfo=datetime.timezone.utc), 'time_taken': 703175.0, 'time_delta': '8 days, 3:19:35', 'additions': 158, 'deletions': 266, 'state': 'closed'}, {'id': 1349399177, 'number': 2175, 'closed': datetime.datetime(2023, 5, 16, 15, 25, 12, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 5, 13, 5, 1, 44, tzinfo=datetime.timezone.utc), 'time_taken': 296608.0, 'time_delta': '3 days, 10:23:28', 'additions': 0, 'deletions': 222, 'state': 'closed'}, {'id': 1346693963, 'number': 2171, 'closed': datetime.datetime(2023, 5, 11, 13, 9, 26, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 5, 11, 8, 52, 30, tzinfo=datetime.timezone.utc), 'time_taken': 15416.0, 'time_delta': '4:16:56', 'additions': 24, 'deletions': 21, 'state': 'closed'}, {'id': 1332817215, 'number': 2149, 'closed': datetime.datetime(2023, 5, 8, 7, 3, 24, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 4, 29, 17, 26, 17, tzinfo=datetime.timezone.utc), 'time_taken': 740227.0, 'time_delta': '8 days, 13:37:07', 'additions': 91, 'deletions': 68, 'state': 'closed'}, {'id': 1330844475, 'number': 2146, 'closed': datetime.datetime(2023, 5, 5, 15, 44, 11, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 4, 27, 18, 34, 28, tzinfo=datetime.timezone.utc), 'time_taken': 680983.0, 'time_delta': '7 days, 21:09:43', 'additions': 8, 'deletions': 20, 'state': 'closed'}, {'id': 1317763773, 'number': 2121, 'closed': datetime.datetime(2023, 4, 19, 15, 31, 6, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 4, 18, 6, 47, 1, tzinfo=datetime.timezone.utc), 'time_taken': 117845.0, 'time_delta': '1 day, 8:44:05', 'additions': 62, 'deletions': 53, 'state': 'closed'}, {'id': 1312043153, 'number': 2106, 'closed': datetime.datetime(2023, 4, 18, 16, 59, 43, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 4, 13, 7, 37, 18, tzinfo=datetime.timezone.utc), 'time_taken': 465745.0, 'time_delta': '5 days, 9:22:25', 'additions': 55, 'deletions': 68, 'state': 'closed'}, {'id': 1306491280, 'number': 2096, 'closed': datetime.datetime(2023, 4, 27, 13, 19, 38, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 4, 8, 12, 54, 42, tzinfo=datetime.timezone.utc), 'time_taken': 1643096.0, 'time_delta': '19 days, 0:24:56', 'additions': 681, 'deletions': 1230, 'state': 'closed'}, {'id': 1305790721, 'number': 2091, 'closed': datetime.datetime(2023, 4, 11, 20, 50, 22, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 4, 7, 10, 54, 37, tzinfo=datetime.timezone.utc), 'time_taken': 381345.0, 'time_delta': '4 days, 9:55:45', 'additions': 24, 'deletions': 6, 'state': 'closed'}, {'id': 1302092072, 'number': 2080, 'closed': datetime.datetime(2023, 4, 13, 9, 29, 59, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 4, 4, 18, 26, 20, tzinfo=datetime.timezone.utc), 'time_taken': 745419.0, 'time_delta': '8 days, 15:03:39', 'additions': 19, 'deletions': 7, 'state': 'closed'}, {'id': 1263302581, 'number': 1990, 'closed': datetime.datetime(2023, 3, 16, 17, 42, 22, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 3, 5, 5, 41, 22, tzinfo=datetime.timezone.utc), 'time_taken': 993660.0, 'time_delta': '11 days, 12:01:00', 'additions': 24, 'deletions': 25, 'state': 'closed'}]"
5870597,moveit_msgs,moveit/moveit_msgs,CMake,124,46,25,47,277,15,12,9,"[{'id': 1451841551, 'number': 161, 'closed': datetime.datetime(2023, 8, 6, 14, 38, 7, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 7, 27, 11, 40, 46, tzinfo=datetime.timezone.utc), 'time_taken': 874641.0, 'time_delta': '10 days, 2:57:21', 'additions': 25, 'deletions': 31, 'state': 'closed'}, {'id': 1351079189, 'number': 158, 'closed': datetime.datetime(2023, 7, 27, 11, 42, 2, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 5, 15, 16, 10, 50, tzinfo=datetime.timezone.utc), 'time_taken': 6291072.0, 'time_delta': '72 days, 19:31:12', 'additions': 0, 'deletions': 31, 'state': 'closed'}]"
335394569,moveit2_tutorials,moveit/moveit2_tutorials,CSS,188,144,26,160,785,111,24,30,"[{'id': 1466565552, 'number': 734, 'closed': datetime.datetime(2023, 8, 8, 18, 44, 46, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 8, 8, 9, 33, 57, tzinfo=datetime.timezone.utc), 'time_taken': 33049.0, 'time_delta': '9:10:49', 'additions': 728, 'deletions': 749, 'state': 'closed'}, {'id': 1362708480, 'number': 689, 'closed': datetime.datetime(2023, 5, 26, 16, 27, 19, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 5, 24, 9, 18, 2, tzinfo=datetime.timezone.utc), 'time_taken': 198557.0, 'time_delta': '2 days, 7:09:17', 'additions': 5, 'deletions': 8, 'state': 'closed'}]"
