pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
985617724,[WIP] Proximal Policy Optimization,"- [x] Added basic skeleton
- [x] Write Update() , SelectAction(), Episode()
- [x] Add epsilon in training_config.hpp
- [x] Implement Tests


",False,3239,https://api.github.com/repos/mlpack/mlpack/pulls/3239,https://github.com/mlpack/mlpack/pull/3239,closed,564,1,6,8,4,17,2,0,"[{'name': 's: stale'}, {'name': 's: keep open'}]",2022-07-03 00:52:49+00:00,2022-10-31 18:34:52+00:00,10431723.0,"120 days, 17:42:03","[{'comment_id': 913211664, 'comment_body': '```suggestion\r\n  for (size_t i = 0; i<prob.n_rows; i++)\r\n  {\r\n   if (randValue <= prob[i])\r\n   {\r\n     action.action = static_cast<decltype(action.action)>(i);\r\n     return;\r\n    }\r\n  } \r\n```\r\n\r\nTo match the coding style and make it easier to read.', 'comment_created': datetime.datetime(2022, 7, 4, 18, 33, 17, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 913212235, 'comment_body': '```suggestion\r\n    if (isTerminal[i - 1])\r\n```\r\n\r\nMinor style adjustment, using a space between operations.', 'comment_created': datetime.datetime(2022, 7, 4, 18, 33, 53, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 913212584, 'comment_body': '```suggestion\r\n  for (size_t i = 1; i < prob.n_rows; i++)\r\n```\r\n\r\nAdd missing space.', 'comment_created': datetime.datetime(2022, 7, 4, 18, 34, 15, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 913213422, 'comment_body': 'Should be tabbed twice, see https://github.com/mlpack/mlpack/wiki/DesignGuidelines#line-length-and-wrapping for more details.', 'comment_created': datetime.datetime(2022, 7, 4, 18, 35, 7, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 913213918, 'comment_body': 'Should be tabbed twice.', 'comment_created': datetime.datetime(2022, 7, 4, 18, 35, 42, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 913214011, 'comment_body': 'Should be tabbed twice.', 'comment_created': datetime.datetime(2022, 7, 4, 18, 35, 48, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 913214182, 'comment_body': '```suggestion\r\n  // Since empty loss is used, we give the gradient as input to Backward(),\r\n  // instead of target.\r\n```', 'comment_created': datetime.datetime(2022, 7, 4, 18, 36, 1, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 913214553, 'comment_body': 'Should be tabbed twice or be aligned with the first parameter.', 'comment_created': datetime.datetime(2022, 7, 4, 18, 36, 29, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 916130727, 'comment_body': 'Sorry for the late reply ! I will correct the coding style at all places.', 'comment_created': datetime.datetime(2022, 7, 7, 17, 43, 6, tzinfo=datetime.timezone.utc), 'commenter': 'eshaanagarwal', 'type': 'User'}, {'comment_id': 916813515, 'comment_body': 'Next step adding, a test case I think?', 'comment_created': datetime.datetime(2022, 7, 8, 13, 24, 52, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 917048404, 'comment_body': 'This is the discrete version of PPO. I am currently blocked as to how to adapt it to continuous. \r\nShould we first proceed with testing this or adapt it to continuous ?', 'comment_created': datetime.datetime(2022, 7, 8, 18, 22, 49, tzinfo=datetime.timezone.utc), 'commenter': 'eshaanagarwal', 'type': 'User'}, {'comment_id': 920543524, 'comment_body': 'Does this pass on your system at least once?', 'comment_created': datetime.datetime(2022, 7, 13, 21, 51, 16, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 921275853, 'comment_body': ""No. I can not understand as to it isn't converging. Will dig in more ! \r\nDo you have any ideas ? "", 'comment_created': datetime.datetime(2022, 7, 14, 15, 16, 48, tzinfo=datetime.timezone.utc), 'commenter': 'eshaanagarwal', 'type': 'User'}, {'comment_id': 922804756, 'comment_body': ""Few things, normally we expect variables names to be explanatory, unless it's blatantly obvious. For L133, it's fine, but L138 not so much. \r\n\r\nFor L128, you could just rename `prob` to `cumulativeProb`, so it's intent is clear. That way you can eliminate L132 entirely.\r\n\r\nL138, `size_t actionIdx = 0; actionIdx < cumulativeProb.n_rows; ++actionIdx`. Also no need to declare `randValue` directly compare L140 `if (arma::randu<double> <= cumulativeProb[actionIdx])`\r\n\r\nExcept that, some spacing issues. Please refer the style guidelines.  For ex: L138 `i<prob.n_rows` => `i < prob.n_rows`"", 'comment_created': datetime.datetime(2022, 7, 17, 9, 42, 56, tzinfo=datetime.timezone.utc), 'commenter': 'jonpsy', 'type': 'User'}, {'comment_id': 922805524, 'comment_body': ""Let's discuss this today."", 'comment_created': datetime.datetime(2022, 7, 17, 9, 49, 31, tzinfo=datetime.timezone.utc), 'commenter': 'jonpsy', 'type': 'User'}, {'comment_id': 922889449, 'comment_body': 'Also a random comment, I happened to see this while scrolling through my emails (nice work with the PR by the way!), it would be good for consistency to use `mlpack::math::Random()` instead of `arma::randu<>()`. :+1:  But that is a super minor comment. :)', 'comment_created': datetime.datetime(2022, 7, 17, 20, 5, 49, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 940284833, 'comment_body': 'Sure ! i will make those changes.', 'comment_created': datetime.datetime(2022, 8, 8, 14, 7, 21, tzinfo=datetime.timezone.utc), 'commenter': 'eshaanagarwal', 'type': 'User'}]","[{'commit_sha': '066655aa505b4f17a4addeb12f5091a40979f308', 'committer_username': 'eshaanagarwal', 'committer_name': 'Eshaan Agarwal', 'committer_email': 'eshaan060202@gmail.com', 'commit_date': datetime.datetime(2021, 2, 1, 16, 18, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cff99b0c91e6bd5899d09283cd65e7d5555386a7', 'committer_username': 'eshaanagarwal', 'committer_name': 'Eshaan Agarwal', 'committer_email': 'eshaan060202@gmail.com', 'commit_date': datetime.datetime(2021, 2, 1, 16, 18, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7635fd9003f0ddb493491b1baba6dec76f1892e3', 'committer_username': 'eshaanagarwal', 'committer_name': 'Eshaan Agarwal', 'committer_email': 'eshaan060202@gmail.com', 'commit_date': datetime.datetime(2021, 2, 1, 16, 18, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '87dfcbfa58b4b4e43952acaba7fbe60f19b2b495', 'committer_username': 'eshaanagarwal', 'committer_name': 'Eshaan Agarwal', 'committer_email': 'eshaan060202@gmail.com', 'commit_date': datetime.datetime(2021, 2, 1, 16, 18, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '63564e0512fae4aa57132ffce7e85e0fa1d2072e', 'committer_username': 'eshaanagarwal', 'committer_name': 'Eshaan Agarwal', 'committer_email': 'eshaan060202@gmail.com', 'commit_date': datetime.datetime(2021, 2, 1, 16, 18, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '128459a487b5a35a1ceffa7e66555cd715fbfeec', 'committer_username': 'eshaanagarwal', 'committer_name': 'Eshaan Agarwal', 'committer_email': 'eshaan060202@gmail.com', 'commit_date': datetime.datetime(2021, 2, 1, 16, 18, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '114d6e13623d5e2ed25fc777a85cef0dcac05c96', 'committer_username': 'eshaanagarwal', 'committer_name': 'Eshaan Agarwal', 'committer_email': 'eshaan060202@gmail.com', 'commit_date': datetime.datetime(2021, 2, 1, 16, 18, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cea352edf3bf845630a44613bb646c8a82cde9ba', 'committer_username': 'eshaanagarwal', 'committer_name': 'Eshaan Agarwal', 'committer_email': 'eshaan060202@gmail.com', 'commit_date': datetime.datetime(2021, 2, 1, 16, 18, 38, tzinfo=datetime.timezone.utc)}]",Eshaan Agarwal,78371148,eshaan060202@gmail.com,User,,64,,132,101
1081241941,HIndsight Experience Replay,"Hindsight Experience Replay - [LINK](https://arxiv.org/abs/1707.01495)

Reference Implementation - [link](https://github.com/IntelLabs/coach/tree/master/rl_coach/memories/episodic)

- [x] Basic Skeleton
- [x] Implememted her functions
- [x]  Bit Flipping environment
- [x]  Maze Environment
- [x]  Random Maze Generation Code
- [x]  Testing suite

",False,3283,https://api.github.com/repos/mlpack/mlpack/pulls/3283,https://github.com/mlpack/mlpack/pull/3283,closed,1430,24,20,29,7,144,3,0,"[{'name': 's: stale'}, {'name': 's: needs review'}, {'name': 'c: methods'}]",2022-10-09 11:04:59+00:00,2022-12-12 15:53:29+00:00,5546910.0,"64 days, 4:48:30","[{'comment_id': 995209280, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2022, 10, 13, 23, 40, 17, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 995209453, 'comment_body': '```suggestion\r\n      desiredGoal = episodeTransitions[arma::randi(\r\n          distr_param(transitionIndex + 1, episodeTransitions.size() -1))];\r\n```', 'comment_created': datetime.datetime(2022, 10, 13, 23, 40, 41, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 995209642, 'comment_body': '```suggestion\r\n      desiredGoal = episodeTransitions[arma::randi(\r\n          distr_param(0, episodeTransitions.size() - 1))];\r\n```', 'comment_created': datetime.datetime(2022, 10, 13, 23, 41, 10, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 995209830, 'comment_body': '```suggestion\r\n    for (size_t goalIndex = 0; goalIndex < herRatio; ++goalIndex )\r\n    {\r\n```', 'comment_created': datetime.datetime(2022, 10, 13, 23, 41, 39, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 995210009, 'comment_body': '```suggestion\r\n    if (goalSelectionStrategy == goalStrategy::FUTURE)\r\n```', 'comment_created': datetime.datetime(2022, 10, 13, 23, 42, 6, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 995210509, 'comment_body': '```suggestion\r\n    for(size_t transitionIndex = 0; transitionIndex < baseTransitions.size();\r\n        ++transitionIndex)\r\n```', 'comment_created': datetime.datetime(2022, 10, 13, 23, 42, 27, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 995210905, 'comment_body': '```suggestion\r\n      for(size_t goalIndex = 0; goalIndex < herRatio; ++goalIndex)\r\n```', 'comment_created': datetime.datetime(2022, 10, 13, 23, 43, 6, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 995211095, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2022, 10, 13, 23, 43, 39, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 995211222, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2022, 10, 13, 23, 43, 57, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 995211664, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2022, 10, 13, 23, 45, 9, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 995211753, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2022, 10, 13, 23, 45, 29, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 995211930, 'comment_body': 'Can you comment on each parameter.', 'comment_created': datetime.datetime(2022, 10, 13, 23, 45, 58, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 995211975, 'comment_body': '```suggestion\r\n  arma::mat goals;\r\n```', 'comment_created': datetime.datetime(2022, 10, 13, 23, 46, 3, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 1008895238, 'comment_body': 'Make it `vec` , `colvec`== `vec`, we use `rowvec` for row vectors.', 'comment_created': datetime.datetime(2022, 10, 30, 16, 54, 53, tzinfo=datetime.timezone.utc), 'commenter': 'jonpsy', 'type': 'User'}, {'comment_id': 1008903430, 'comment_body': 'Again, no need of this.', 'comment_created': datetime.datetime(2022, 10, 30, 17, 56, 22, tzinfo=datetime.timezone.utc), 'commenter': 'jonpsy', 'type': 'User'}, {'comment_id': 1008903804, 'comment_body': 'so, `currentState == goal`?', 'comment_created': datetime.datetime(2022, 10, 30, 17, 58, 4, tzinfo=datetime.timezone.utc), 'commenter': 'jonpsy', 'type': 'User'}, {'comment_id': 1008904089, 'comment_body': 'It was giving some error i dont know why. Wait let me paste that here.\r\nhttps://stackoverflow.com/questions/63062118/c-error-expression-must-have-bool-type\r\n\r\nso i found this work around.', 'comment_created': datetime.datetime(2022, 10, 30, 18, 0, 20, tzinfo=datetime.timezone.utc), 'commenter': 'eshaanagarwal', 'type': 'User'}, {'comment_id': 1008906899, 'comment_body': 'Paste the error you get when `currentState == goal`', 'comment_created': datetime.datetime(2022, 10, 30, 18, 21, 33, tzinfo=datetime.timezone.utc), 'commenter': 'jonpsy', 'type': 'User'}, {'comment_id': 1008907861, 'comment_body': '> Paste the error you get when `currentState == goal`\r\n\r\nI have pasted the stack overflow link for it. It was basically that\r\nC++ Error: Expression Must Have Bool Type\r\n', 'comment_created': datetime.datetime(2022, 10, 30, 18, 28, 57, tzinfo=datetime.timezone.utc), 'commenter': 'eshaanagarwal', 'type': 'User'}, {'comment_id': 1008908950, 'comment_body': 'No, I meant compile it. Show me the entire compile error message. Or replicate this error in smallest possible code.', 'comment_created': datetime.datetime(2022, 10, 30, 18, 38, 10, tzinfo=datetime.timezone.utc), 'commenter': 'jonpsy', 'type': 'User'}, {'comment_id': 1008910167, 'comment_body': 'Here is the pastebin link. - **https://pastebin.com/Nc7sFy1j**', 'comment_created': datetime.datetime(2022, 10, 30, 18, 47, 53, tzinfo=datetime.timezone.utc), 'commenter': 'eshaanagarwal', 'type': 'User'}, {'comment_id': 1011444168, 'comment_body': 'Store this `unordered_map` internally', 'comment_created': datetime.datetime(2022, 11, 2, 9, 19, 42, tzinfo=datetime.timezone.utc), 'commenter': 'jonpsy', 'type': 'User'}, {'comment_id': 1011445187, 'comment_body': 'Revisit our design guidelines', 'comment_created': datetime.datetime(2022, 11, 2, 9, 20, 5, tzinfo=datetime.timezone.utc), 'commenter': 'jonpsy', 'type': 'User'}, {'comment_id': 1011483650, 'comment_body': 'Apologies ! I will make the style fixes ! i pushed the code so that you could have chance to look at it first hand.', 'comment_created': datetime.datetime(2022, 11, 2, 9, 47, 15, tzinfo=datetime.timezone.utc), 'commenter': 'eshaanagarwal', 'type': 'User'}, {'comment_id': 1014549669, 'comment_body': 'Missing documentation for the `transitionGoal` parameter.', 'comment_created': datetime.datetime(2022, 11, 5, 2, 20, 32, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 1014549701, 'comment_body': 'Missing description.', 'comment_created': datetime.datetime(2022, 11, 5, 2, 21, 10, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 1014549736, 'comment_body': '```suggestion\r\n    // To store the action (index of n bit number to be flipped).\r\n```', 'comment_created': datetime.datetime(2022, 11, 5, 2, 21, 42, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 1014549750, 'comment_body': '```suggestion\r\n   * @param length Length of the binary vector for state and goal.\r\n```', 'comment_created': datetime.datetime(2022, 11, 5, 2, 21, 54, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 1014549813, 'comment_body': '```suggestion\r\n    // Modify state according to action\r\n```', 'comment_created': datetime.datetime(2022, 11, 5, 2, 22, 31, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 1014549843, 'comment_body': 'Why is this always 1? I can see you return 0 at the end.', 'comment_created': datetime.datetime(2022, 11, 5, 2, 22, 45, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 1014549961, 'comment_body': '```suggestion\r\n  double Sample(const State& state,\r\n                const Action& action,\r\n                const State& transitionGoal)\r\n```', 'comment_created': datetime.datetime(2022, 11, 5, 2, 23, 51, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 1014549994, 'comment_body': '```suggestion\r\n   * Initial state representation is a randomly generated binary vector.\r\n```', 'comment_created': datetime.datetime(2022, 11, 5, 2, 24, 9, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 1014550026, 'comment_body': '```suggestion\r\n  double GetHERReward(const State& nextState,\r\n                      const State& transitionGoal)\r\n```', 'comment_created': datetime.datetime(2022, 11, 5, 2, 24, 34, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 1014550035, 'comment_body': '```suggestion\r\n   * Get reward for particular goal.\r\n```', 'comment_created': datetime.datetime(2022, 11, 5, 2, 24, 42, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 1014550057, 'comment_body': '```suggestion\r\n    // Reward agent if it reaches the goal of transition and is not done.\r\n```', 'comment_created': datetime.datetime(2022, 11, 5, 2, 24, 52, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 1014550098, 'comment_body': 'There is no `cart`.', 'comment_created': datetime.datetime(2022, 11, 5, 2, 25, 23, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 1014550133, 'comment_body': '```suggestion\r\n          "" being taken."";\r\n```', 'comment_created': datetime.datetime(2022, 11, 5, 2, 25, 42, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 1014550158, 'comment_body': '```suggestion\r\n   * Initial goal representation for the environment\r\n```', 'comment_created': datetime.datetime(2022, 11, 5, 2, 25, 55, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 1014550170, 'comment_body': '```suggestion\r\n  //! Set the size of binary vector.\r\n```', 'comment_created': datetime.datetime(2022, 11, 5, 2, 26, 11, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 1014550176, 'comment_body': '```suggestion\r\n  //! Get the goal for the episode.\r\n```', 'comment_created': datetime.datetime(2022, 11, 5, 2, 26, 20, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 1014550211, 'comment_body': '```suggestion\r\n  //! Set the goal for the episode.\r\n```', 'comment_created': datetime.datetime(2022, 11, 5, 2, 26, 27, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 1014550249, 'comment_body': '```suggestion\r\n  //! Locally stored goal for the episode.\r\n```', 'comment_created': datetime.datetime(2022, 11, 5, 2, 26, 42, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 1014550288, 'comment_body': '```suggestion\r\n  //! Locally stored initialState for the episode.\r\n```', 'comment_created': datetime.datetime(2022, 11, 5, 2, 26, 59, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 1014550310, 'comment_body': '```suggestion\r\n  //! Locally stored size of binary vector.\r\n```', 'comment_created': datetime.datetime(2022, 11, 5, 2, 27, 10, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 1014550376, 'comment_body': '```suggestion\r\n  double Sample(const State& state, const Action& action,\r\n                State& nextState,\r\n                const State& transitionGoal)\r\n```', 'comment_created': datetime.datetime(2022, 11, 5, 2, 27, 51, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 1014550401, 'comment_body': 'Missing description for the `transitionGoal` parameter.', 'comment_created': datetime.datetime(2022, 11, 5, 2, 28, 14, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 1014550424, 'comment_body': '```suggestion\r\n   * Initial goal representation for the environment.\r\n```', 'comment_created': datetime.datetime(2022, 11, 5, 2, 28, 31, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 1014550473, 'comment_body': '```suggestion\r\n  double Sample(const State& state, const Action& action,\r\n                State& nextState,\r\n                const State& transitionGoal)\r\n```', 'comment_created': datetime.datetime(2022, 11, 5, 2, 29, 13, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 1014550510, 'comment_body': 'Description of the `transitionGoal` parameter is missing.', 'comment_created': datetime.datetime(2022, 11, 5, 2, 29, 35, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 1014550525, 'comment_body': '```suggestion\r\n   * Initial goal representation for the environment.\r\n```', 'comment_created': datetime.datetime(2022, 11, 5, 2, 29, 49, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 1014550583, 'comment_body': '```suggestion\r\n  double Sample(const State& state, const Action& action,\r\n                State& nextState,\r\n                const State& transitionGoal)\r\n```', 'comment_created': datetime.datetime(2022, 11, 5, 2, 30, 22, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 1014550594, 'comment_body': 'Description is missing here.', 'comment_created': datetime.datetime(2022, 11, 5, 2, 30, 37, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 1014550634, 'comment_body': '```suggestion\r\n   * Initial goal representation for the environment.\r\n```', 'comment_created': datetime.datetime(2022, 11, 5, 2, 30, 51, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 1014550738, 'comment_body': '```suggestion\r\n  double Sample(const State& state,\r\n                const Action& action,\r\n                State& nextState,\r\n                const State& transitionGoal)\r\n```', 'comment_created': datetime.datetime(2022, 11, 5, 2, 32, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 1014550767, 'comment_body': 'Missing description. ', 'comment_created': datetime.datetime(2022, 11, 5, 2, 32, 12, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 1014550799, 'comment_body': '```suggestion\r\n   * Initial goal representation for the environment.\r\n```', 'comment_created': datetime.datetime(2022, 11, 5, 2, 32, 25, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 1014550934, 'comment_body': 'Looks like some further description is missing here.', 'comment_created': datetime.datetime(2022, 11, 5, 2, 33, 45, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 1014550982, 'comment_body': '```suggestion\r\n   * Each State is a tuple {(row, column)} in n * n maze matrix.\r\n```', 'comment_created': datetime.datetime(2022, 11, 5, 2, 34, 3, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 1014551073, 'comment_body': '```suggestion\r\n  Maze(const size_t rows = 4,\r\n       const size_t columns = 4,\r\n       const size_t maxSteps = 200) :\r\n```', 'comment_created': datetime.datetime(2022, 11, 5, 2, 35, 4, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 1014551102, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2022, 11, 5, 2, 35, 18, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 1014551136, 'comment_body': '```suggestion\r\n    directions = std::unordered_map<Action::actions, arma::vec>({\r\n            { Action::actions::left, arma::vec({0, -1}) },\r\n            { Action::actions::right, arma::vec({0, 1}) },\r\n            { Action::actions::up, arma::vec({-1, 0}) },\r\n            { Action::actions::down, arma::vec({1, 0}) }\r\n```', 'comment_created': datetime.datetime(2022, 11, 5, 2, 35, 44, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 1014551146, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2022, 11, 5, 2, 35, 54, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 1014551153, 'comment_body': '```suggestion\r\n   * 0.4 * rows * column steps.\r\n```', 'comment_created': datetime.datetime(2022, 11, 5, 2, 36, 2, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 1014551251, 'comment_body': 'Please keep the 80 character limit in mind - see https://github.com/mlpack/mlpack/wiki/DesignGuidelines#line-length-and-wrapping for more details.', 'comment_created': datetime.datetime(2022, 11, 5, 2, 37, 2, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 1014551271, 'comment_body': 'See comment above.', 'comment_created': datetime.datetime(2022, 11, 5, 2, 37, 30, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 1014551286, 'comment_body': '```suggestion\r\n    // Loop till stack is empty.\r\n```', 'comment_created': datetime.datetime(2022, 11, 5, 2, 37, 47, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 1014551305, 'comment_body': '```suggestion\r\n        // Pop a vertex from the stack.\r\n```', 'comment_created': datetime.datetime(2022, 11, 5, 2, 38, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 1014551365, 'comment_body': 'See comment above.', 'comment_created': datetime.datetime(2022, 11, 5, 2, 38, 31, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 1014551375, 'comment_body': 'See comment above.', 'comment_created': datetime.datetime(2022, 11, 5, 2, 38, 43, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 1014551402, 'comment_body': '```suggestion\r\n        || nextCell(0) < 0 || nextCell(1) < 0;\r\n```', 'comment_created': datetime.datetime(2022, 11, 5, 2, 39, 1, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 1014551432, 'comment_body': 'Looks like the indentation is off here, some of the lines below as well, see https://github.com/mlpack/mlpack/wiki/DesignGuidelines#line-length-and-wrapping for more details.', 'comment_created': datetime.datetime(2022, 11, 5, 2, 39, 33, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 1014588176, 'comment_body': ""Let's make it configurable? With `0.4` as default param @zoq  @eshaanagarwal "", 'comment_created': datetime.datetime(2022, 11, 5, 6, 15, 42, tzinfo=datetime.timezone.utc), 'commenter': 'jonpsy', 'type': 'User'}, {'comment_id': 1014588273, 'comment_body': 'This can be a one liner. \r\n\r\n`arma::umat visited(rows, columns, arma::fill::zeros)`\r\n', 'comment_created': datetime.datetime(2022, 11, 5, 6, 16, 57, tzinfo=datetime.timezone.utc), 'commenter': 'jonpsy', 'type': 'User'}, {'comment_id': 1014589263, 'comment_body': ""Init variable using `const` if it isn't changing."", 'comment_created': datetime.datetime(2022, 11, 5, 6, 20, 29, tzinfo=datetime.timezone.utc), 'commenter': 'jonpsy', 'type': 'User'}, {'comment_id': 1014589462, 'comment_body': 'Pretty sure we can use `stl` here or [imbue](https://arma.sourceforge.net/docs.html#imbue)', 'comment_created': datetime.datetime(2022, 11, 5, 6, 23, 20, tzinfo=datetime.timezone.utc), 'commenter': 'jonpsy', 'type': 'User'}, {'comment_id': 1014589928, 'comment_body': '```\r\nstd::generate(maze.begin(), maze.end(), \r\n  [](auto& elem) {\r\n      if (elem != 0 && elem != 1)\r\n           elem = arma::randi(arma::distr_param(-1, 0));\r\n       });\r\n```\r\n\r\nOR\r\n\r\n```\r\nmaze.transform([] (double cell) {\r\n  if (cell != 0 && cell != 1)\r\n     cell = arma::randi(arma::distr_param(-1, 0));\r\n     });\r\n```     ', 'comment_created': datetime.datetime(2022, 11, 5, 6, 27, 30, tzinfo=datetime.timezone.utc), 'commenter': 'jonpsy', 'type': 'User'}, {'comment_id': 1014590184, 'comment_body': 'See comment regarding STL and arma functions, avoid blind for loops. ', 'comment_created': datetime.datetime(2022, 11, 5, 6, 28, 53, tzinfo=datetime.timezone.utc), 'commenter': 'jonpsy', 'type': 'User'}, {'comment_id': 1014590341, 'comment_body': 'Also the spacing is off', 'comment_created': datetime.datetime(2022, 11, 5, 6, 29, 16, tzinfo=datetime.timezone.utc), 'commenter': 'jonpsy', 'type': 'User'}, {'comment_id': 1014591180, 'comment_body': ""Another question. What's stopping us from using `arma::mat` as `startingPoints`. That way each `arma::vec` will be stored in column based index. "", 'comment_created': datetime.datetime(2022, 11, 5, 6, 31, 32, tzinfo=datetime.timezone.utc), 'commenter': 'jonpsy', 'type': 'User'}, {'comment_id': 1014592342, 'comment_body': 'state.Data()?', 'comment_created': datetime.datetime(2022, 11, 5, 6, 34, 44, tzinfo=datetime.timezone.utc), 'commenter': 'jonpsy', 'type': 'User'}, {'comment_id': 1014592535, 'comment_body': 'nextState.Data() = currentState + direction; ', 'comment_created': datetime.datetime(2022, 11, 5, 6, 35, 42, tzinfo=datetime.timezone.utc), 'commenter': 'jonpsy', 'type': 'User'}, {'comment_id': 1014592652, 'comment_body': 'Might as well create internal private function for this', 'comment_created': datetime.datetime(2022, 11, 5, 6, 37, 7, tzinfo=datetime.timezone.utc), 'commenter': 'jonpsy', 'type': 'User'}, {'comment_id': 1014592712, 'comment_body': 'see prev comment', 'comment_created': datetime.datetime(2022, 11, 5, 6, 38, 11, tzinfo=datetime.timezone.utc), 'commenter': 'jonpsy', 'type': 'User'}, {'comment_id': 1014592796, 'comment_body': 'nextState.Data() == goal?', 'comment_created': datetime.datetime(2022, 11, 5, 6, 38, 57, tzinfo=datetime.timezone.utc), 'commenter': 'jonpsy', 'type': 'User'}, {'comment_id': 1014592905, 'comment_body': 'startPoints[index], copy ctor is deep by default', 'comment_created': datetime.datetime(2022, 11, 5, 6, 40, 12, tzinfo=datetime.timezone.utc), 'commenter': 'jonpsy', 'type': 'User'}, {'comment_id': 1014592952, 'comment_body': 'see prev comment', 'comment_created': datetime.datetime(2022, 11, 5, 6, 40, 32, tzinfo=datetime.timezone.utc), 'commenter': 'jonpsy', 'type': 'User'}, {'comment_id': 1014593052, 'comment_body': 'Also print `stepsPerformed` & `maxSteps`', 'comment_created': datetime.datetime(2022, 11, 5, 6, 41, 9, tzinfo=datetime.timezone.utc), 'commenter': 'jonpsy', 'type': 'User'}, {'comment_id': 1014593210, 'comment_body': ""Comment out `transitionGoal`, I'm sure you've seen others do it \r\n\r\n```\r\ndouble Sample(const State& state, const Action& action, State& nextState,\r\n              const State& /* transitionGoal */)\r\n```              "", 'comment_created': datetime.datetime(2022, 11, 5, 6, 43, 17, tzinfo=datetime.timezone.utc), 'commenter': 'jonpsy', 'type': 'User'}, {'comment_id': 1014595486, 'comment_body': 'Unnecessary ', 'comment_created': datetime.datetime(2022, 11, 5, 7, 5, 52, tzinfo=datetime.timezone.utc), 'commenter': 'jonpsy', 'type': 'User'}, {'comment_id': 1014597304, 'comment_body': 'Doc descriptive...', 'comment_created': datetime.datetime(2022, 11, 5, 7, 23, 37, tzinfo=datetime.timezone.utc), 'commenter': 'jonpsy', 'type': 'User'}, {'comment_id': 1014597377, 'comment_body': '??', 'comment_created': datetime.datetime(2022, 11, 5, 7, 24, 25, tzinfo=datetime.timezone.utc), 'commenter': 'jonpsy', 'type': 'User'}, {'comment_id': 1014598446, 'comment_body': 'I actually copied this from other environments. I will write some for decsription then.', 'comment_created': datetime.datetime(2022, 11, 5, 7, 31, 17, tzinfo=datetime.timezone.utc), 'commenter': 'eshaanagarwal', 'type': 'User'}, {'comment_id': 1014598502, 'comment_body': '~length~ bitWidth?', 'comment_created': datetime.datetime(2022, 11, 5, 7, 31, 26, tzinfo=datetime.timezone.utc), 'commenter': 'jonpsy', 'type': 'User'}, {'comment_id': 1014598685, 'comment_body': 'I will make that change. I took it from other environmenets.\r\n', 'comment_created': datetime.datetime(2022, 11, 5, 7, 33, 39, tzinfo=datetime.timezone.utc), 'commenter': 'eshaanagarwal', 'type': 'User'}, {'comment_id': 1014598808, 'comment_body': '`episodeTransitions.back().nextState`', 'comment_created': datetime.datetime(2022, 11, 5, 7, 34, 58, tzinfo=datetime.timezone.utc), 'commenter': 'jonpsy', 'type': 'User'}, {'comment_id': 1014598901, 'comment_body': 'const int', 'comment_created': datetime.datetime(2022, 11, 5, 7, 35, 55, tzinfo=datetime.timezone.utc), 'commenter': 'jonpsy', 'type': 'User'}, {'comment_id': 1014598922, 'comment_body': 'Oops Sorry ! I might have missed that.\r\n', 'comment_created': datetime.datetime(2022, 11, 5, 7, 36, 12, tzinfo=datetime.timezone.utc), 'commenter': 'eshaanagarwal', 'type': 'User'}, {'comment_id': 1014599293, 'comment_body': ""python doesn't have case switch doesn't mean we don't."", 'comment_created': datetime.datetime(2022, 11, 5, 7, 38, 58, tzinfo=datetime.timezone.utc), 'commenter': 'jonpsy', 'type': 'User'}, {'comment_id': 1014599581, 'comment_body': 'be more explicit', 'comment_created': datetime.datetime(2022, 11, 5, 7, 40, 33, tzinfo=datetime.timezone.utc), 'commenter': 'jonpsy', 'type': 'User'}, {'comment_id': 1014599735, 'comment_body': 'rename to more discriptive. ', 'comment_created': datetime.datetime(2022, 11, 5, 7, 41, 2, tzinfo=datetime.timezone.utc), 'commenter': 'jonpsy', 'type': 'User'}, {'comment_id': 1014599939, 'comment_body': '`arma::Col<Transition>`', 'comment_created': datetime.datetime(2022, 11, 5, 7, 42, 57, tzinfo=datetime.timezone.utc), 'commenter': 'jonpsy', 'type': 'User'}, {'comment_id': 1014600200, 'comment_body': 'When we say `ratio` its 0 => 1, so either the code is wrong or the description is.', 'comment_created': datetime.datetime(2022, 11, 5, 7, 45, 57, tzinfo=datetime.timezone.utc), 'commenter': 'jonpsy', 'type': 'User'}, {'comment_id': 1014600571, 'comment_body': 'Sorry ! This one got left. I will make this change.\r\n', 'comment_created': datetime.datetime(2022, 11, 5, 7, 49, 34, tzinfo=datetime.timezone.utc), 'commenter': 'eshaanagarwal', 'type': 'User'}, {'comment_id': 1014600633, 'comment_body': 'I mean i have no issue with that. I will make that change then ?\r\n', 'comment_created': datetime.datetime(2022, 11, 5, 7, 50, 10, tzinfo=datetime.timezone.utc), 'commenter': 'eshaanagarwal', 'type': 'User'}, {'comment_id': 1014601247, 'comment_body': 'We could do this efficiently by first reserving spacing for `hindsight_transitions_per_regular_transition` aka `herRatio`.\r\n\r\n```cpp\r\nstd::vector<StateType> SampleGoals(const int transitionIdx)\r\n{\r\n   std::vector<StateType> desiredGoals(herRatio);\r\n   std::generate(desiredGoals.begin(), desiredGoals.end(), SampleGoal);\r\n   return desiredGoals;\r\n}\r\n```\r\n\r\nOfcourse its not that simple, but I guess you get the point? This should be two line code.', 'comment_created': datetime.datetime(2022, 11, 5, 7, 56, 27, tzinfo=datetime.timezone.utc), 'commenter': 'jonpsy', 'type': 'User'}, {'comment_id': 1014601415, 'comment_body': 'Can you please explain in more detail ?\r\n', 'comment_created': datetime.datetime(2022, 11, 5, 7, 57, 58, tzinfo=datetime.timezone.utc), 'commenter': 'eshaanagarwal', 'type': 'User'}, {'comment_id': 1014601482, 'comment_body': 'Sure that looks way better. I will make that change\r\n', 'comment_created': datetime.datetime(2022, 11, 5, 7, 58, 43, tzinfo=datetime.timezone.utc), 'commenter': 'eshaanagarwal', 'type': 'User'}, {'comment_id': 1014601681, 'comment_body': '`SampleGoal` return type would be `StateType`, RVO should be able to deal with this.', 'comment_created': datetime.datetime(2022, 11, 5, 7, 59, 39, tzinfo=datetime.timezone.utc), 'commenter': 'jonpsy', 'type': 'User'}, {'comment_id': 1014601970, 'comment_body': ""Do we need `episodeTransitions` after this? If not, then ig it's fine to corrupt its value here."", 'comment_created': datetime.datetime(2022, 11, 5, 8, 2, 38, tzinfo=datetime.timezone.utc), 'commenter': 'jonpsy', 'type': 'User'}, {'comment_id': 1014602097, 'comment_body': 'Actually ration means the number of HER Transition per normal per normal transitions. so if its 4. That means 4 for 1. Also ratio can be greater than 1. It just simply means how many times one number contains another.', 'comment_created': datetime.datetime(2022, 11, 5, 8, 3, 48, tzinfo=datetime.timezone.utc), 'commenter': 'eshaanagarwal', 'type': 'User'}, {'comment_id': 1014602209, 'comment_body': 'declare inside for loop, remove `desiredGoals.clear()`, or make `SampleGoals` return `std::vector<StateType>`? \r\n\r\n\r\n```cpp\r\nconst std::vector<StateType> desiredGoals = SampleGoals(transitionIndex);\r\n```', 'comment_created': datetime.datetime(2022, 11, 5, 8, 5, 14, tzinfo=datetime.timezone.utc), 'commenter': 'jonpsy', 'type': 'User'}, {'comment_id': 1014602331, 'comment_body': 'I actually took this reference from other replay implementation.\r\n', 'comment_created': datetime.datetime(2022, 11, 5, 8, 6, 22, tzinfo=datetime.timezone.utc), 'commenter': 'eshaanagarwal', 'type': 'User'}, {'comment_id': 1014602373, 'comment_body': 'Fair Point. I will make that change.', 'comment_created': datetime.datetime(2022, 11, 5, 8, 6, 50, tzinfo=datetime.timezone.utc), 'commenter': 'eshaanagarwal', 'type': 'User'}, {'comment_id': 1014602603, 'comment_body': 'Sure that seems more appropriate. I will make that change.\r\n', 'comment_created': datetime.datetime(2022, 11, 5, 8, 9, 29, tzinfo=datetime.timezone.utc), 'commenter': 'eshaanagarwal', 'type': 'User'}, {'comment_id': 1014602802, 'comment_body': ""Why don't we use `episodeTransitions` directly? "", 'comment_created': datetime.datetime(2022, 11, 5, 8, 11, 35, tzinfo=datetime.timezone.utc), 'commenter': 'jonpsy', 'type': 'User'}, {'comment_id': 1014603247, 'comment_body': 'Sure I can do that.\r\n', 'comment_created': datetime.datetime(2022, 11, 5, 8, 16, 41, tzinfo=datetime.timezone.utc), 'commenter': 'eshaanagarwal', 'type': 'User'}, {'comment_id': 1014603359, 'comment_body': 'Its going to give me a vector rather than a bool', 'comment_created': datetime.datetime(2022, 11, 5, 8, 17, 53, tzinfo=datetime.timezone.utc), 'commenter': 'eshaanagarwal', 'type': 'User'}, {'comment_id': 1014603462, 'comment_body': 'Can you please explain this a bit ?', 'comment_created': datetime.datetime(2022, 11, 5, 8, 18, 33, tzinfo=datetime.timezone.utc), 'commenter': 'eshaanagarwal', 'type': 'User'}, {'comment_id': 1014603478, 'comment_body': ""I know what it means, but not everyone will so its better to make the name more descriptive. Also look at other suggestions I've mentioned above"", 'comment_created': datetime.datetime(2022, 11, 5, 8, 18, 55, tzinfo=datetime.timezone.utc), 'commenter': 'jonpsy', 'type': 'User'}, {'comment_id': 1014603484, 'comment_body': 'Its going to give me a vector rather than a bool. ', 'comment_created': datetime.datetime(2022, 11, 5, 8, 19, 4, tzinfo=datetime.timezone.utc), 'commenter': 'eshaanagarwal', 'type': 'User'}, {'comment_id': 1014603788, 'comment_body': ""We'll be better, please read our guidelines. Variable names should be as descriptive as possible. We won't need commenting if variable names were correct in the first place. Have a [look](https://codegym.cc/groups/posts/369-coding-rules-the-power-of-correct-names-good-and-bad-comments)"", 'comment_created': datetime.datetime(2022, 11, 5, 8, 21, 40, tzinfo=datetime.timezone.utc), 'commenter': 'jonpsy', 'type': 'User'}, {'comment_id': 1014605184, 'comment_body': 'I think we can do that too. Let me try that out.  There shouldnt be any issue', 'comment_created': datetime.datetime(2022, 11, 5, 8, 35, 26, tzinfo=datetime.timezone.utc), 'commenter': 'eshaanagarwal', 'type': 'User'}, {'comment_id': 1014605260, 'comment_body': '> We could do this efficiently by first reserving spacing for `hindsight_transitions_per_regular_transition` aka `herRatio`.\r\n> \r\n> ```c++\r\n> std::vector<StateType> SampleGoals(const int transitionIdx)\r\n> {\r\n>    std::vector<StateType> desiredGoals(herRatio);\r\n>    std::generate(desiredGoals.begin(), desiredGoals.end(), SampleGoal);\r\n>    return desiredGoals;\r\n> }\r\n> ```\r\n> \r\n> Ofcourse its not that simple, but I guess you get the point? This should be two line code.\r\n\r\nI will take a look this.', 'comment_created': datetime.datetime(2022, 11, 5, 8, 36, 51, tzinfo=datetime.timezone.utc), 'commenter': 'eshaanagarwal', 'type': 'User'}, {'comment_id': 1014605330, 'comment_body': 'Can you explain this a bit ? ', 'comment_created': datetime.datetime(2022, 11, 5, 8, 37, 39, tzinfo=datetime.timezone.utc), 'commenter': 'eshaanagarwal', 'type': 'User'}, {'comment_id': 1014605887, 'comment_body': 'Can you please explain this ?', 'comment_created': datetime.datetime(2022, 11, 5, 8, 43, 22, tzinfo=datetime.timezone.utc), 'commenter': 'eshaanagarwal', 'type': 'User'}, {'comment_id': 1014606027, 'comment_body': '> declare inside for loop, remove `desiredGoals.clear()`, or make `SampleGoals` return `std::vector<StateType>`?\r\n> \r\n> ```c++\r\n> const std::vector<StateType> desiredGoals = SampleGoals(transitionIndex);\r\n> ```\r\n\r\nI actually did it my way so that we avoid having to initialise one more sample goals vector inside the function. And we could directly set a the values into the main `sampleGoals`', 'comment_created': datetime.datetime(2022, 11, 5, 8, 45, 6, tzinfo=datetime.timezone.utc), 'commenter': 'eshaanagarwal', 'type': 'User'}, {'comment_id': 1014606552, 'comment_body': 'I think we can now ! Previously i had done this to accomodate something else but looks like i have changed that. Since i am storing HER Transitions only just before termination of episode.', 'comment_created': datetime.datetime(2022, 11, 5, 8, 50, 20, tzinfo=datetime.timezone.utc), 'commenter': 'eshaanagarwal', 'type': 'User'}, {'comment_id': 1014607249, 'comment_body': 'as far as i know we cant push_back in `arma::Col` right ?', 'comment_created': datetime.datetime(2022, 11, 5, 8, 56, 33, tzinfo=datetime.timezone.utc), 'commenter': 'eshaanagarwal', 'type': 'User'}, {'comment_id': 1014609577, 'comment_body': 'yeah', 'comment_created': datetime.datetime(2022, 11, 5, 9, 17, 25, tzinfo=datetime.timezone.utc), 'commenter': 'jonpsy', 'type': 'User'}, {'comment_id': 1014609623, 'comment_body': '`const int index = arma...`\r\n', 'comment_created': datetime.datetime(2022, 11, 5, 9, 18, 1, tzinfo=datetime.timezone.utc), 'commenter': 'jonpsy', 'type': 'User'}, {'comment_id': 1014609750, 'comment_body': 'See previous comment reg STL, you can apply the same here.', 'comment_created': datetime.datetime(2022, 11, 5, 9, 18, 58, tzinfo=datetime.timezone.utc), 'commenter': 'jonpsy', 'type': 'User'}, {'comment_id': 1014609876, 'comment_body': 'remember `arma::approx_equal`?\r\n', 'comment_created': datetime.datetime(2022, 11, 5, 9, 19, 55, tzinfo=datetime.timezone.utc), 'commenter': 'jonpsy', 'type': 'User'}, {'comment_id': 1014610506, 'comment_body': ""In C++ whenever you assign a value, its deep copied by default. So you could just do `initialState = startPoints[index]` , unless `startPoints[index]` isn't an arma::vec? "", 'comment_created': datetime.datetime(2022, 11, 5, 9, 26, 14, tzinfo=datetime.timezone.utc), 'commenter': 'jonpsy', 'type': 'User'}, {'comment_id': 1014610852, 'comment_body': 'Ah that sucks, stick to vector then', 'comment_created': datetime.datetime(2022, 11, 5, 9, 30, 35, tzinfo=datetime.timezone.utc), 'commenter': 'jonpsy', 'type': 'User'}, {'comment_id': 1014611337, 'comment_body': 'Understood\r\n', 'comment_created': datetime.datetime(2022, 11, 5, 9, 34, 56, tzinfo=datetime.timezone.utc), 'commenter': 'eshaanagarwal', 'type': 'User'}, {'comment_id': 1014611539, 'comment_body': 'I was getting some error on this ! let me check that out and revert back to you.', 'comment_created': datetime.datetime(2022, 11, 5, 9, 37, 17, tzinfo=datetime.timezone.utc), 'commenter': 'eshaanagarwal', 'type': 'User'}, {'comment_id': 1014611797, 'comment_body': 'Yeah I do. I just thought that is pretty straight forward. I will make that change then ?', 'comment_created': datetime.datetime(2022, 11, 5, 9, 39, 56, tzinfo=datetime.timezone.utc), 'commenter': 'eshaanagarwal', 'type': 'User'}, {'comment_id': 1014616119, 'comment_body': ""> Another question. What's stopping us from using `arma::mat` as `startingPoints`. That way each `arma::vec` will be stored in column based index.\r\n\r\nI am not sure if i can understand what you are suggesting. \r\nI have used startingpoints as vector because we dont know the count of number of zeroes in whole matrix before hand. Therefor i loop through matrix and push_back all the valid starting points. Moreover, it helps me in selecting a random starting point. Which i do using `randi()` when i select the initial state in `InitialSample()`.\r\n"", 'comment_created': datetime.datetime(2022, 11, 5, 10, 20, 48, tzinfo=datetime.timezone.utc), 'commenter': 'eshaanagarwal', 'type': 'User'}, {'comment_id': 1014619958, 'comment_body': 'Nvm, keep the original format. Just use STL instead of blind loops.', 'comment_created': datetime.datetime(2022, 11, 5, 10, 56, 52, tzinfo=datetime.timezone.utc), 'commenter': 'jonpsy', 'type': 'User'}, {'comment_id': 1014620031, 'comment_body': 'K', 'comment_created': datetime.datetime(2022, 11, 5, 10, 57, 30, tzinfo=datetime.timezone.utc), 'commenter': 'jonpsy', 'type': 'User'}, {'comment_id': 1014620100, 'comment_body': 'Prev comment about making a private function', 'comment_created': datetime.datetime(2022, 11, 5, 10, 58, 18, tzinfo=datetime.timezone.utc), 'commenter': 'jonpsy', 'type': 'User'}, {'comment_id': 1014623579, 'comment_body': ""> Why don't we use `episodeTransitions` directly?\r\n\r\nwe actually need it ! when we future strategy we want to sample goal from transitions which happened after the required transition. So if pop_back in `epsiodeTransitions` when i sample a index using randi i get index out of bounds issue."", 'comment_created': datetime.datetime(2022, 11, 5, 11, 32, 53, tzinfo=datetime.timezone.utc), 'commenter': 'eshaanagarwal', 'type': 'User'}, {'comment_id': 1014636591, 'comment_body': '@jonpsy  using std::generate or arma::for_each or arma::transform i am not able to access the row and column of the 0th cell. I think for this for loop seems ok.', 'comment_created': datetime.datetime(2022, 11, 5, 13, 35, 28, tzinfo=datetime.timezone.utc), 'commenter': 'eshaanagarwal', 'type': 'User'}, {'comment_id': 1014636954, 'comment_body': 'I think printing one of them would suffice here. since it terminates as soon as  `stepsPerformed`  becomes biggeer than `maxSteps`.', 'comment_created': datetime.datetime(2022, 11, 5, 13, 39, 8, tzinfo=datetime.timezone.utc), 'commenter': 'eshaanagarwal', 'type': 'User'}]","[{'commit_sha': '329f09525f196e7a24cd15089f604f1d162da397', 'committer_username': 'eshaanagarwal', 'committer_name': 'Eshaan Agarwal', 'committer_email': 'eshaan060202@gmail.com', 'commit_date': datetime.datetime(2021, 2, 1, 16, 18, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'da9860bd99db45180c95bce8be1fe33749a478eb', 'committer_username': 'eshaanagarwal', 'committer_name': 'Eshaan Agarwal', 'committer_email': 'eshaan060202@gmail.com', 'commit_date': datetime.datetime(2021, 2, 1, 16, 18, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0974d00555e78771452e94e3d4f681a61759a63f', 'committer_username': 'eshaanagarwal', 'committer_name': 'Eshaan Agarwal', 'committer_email': 'eshaan060202@gmail.com', 'commit_date': datetime.datetime(2021, 2, 1, 16, 18, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c7735379f059558fad30d9f0e3000582c5470a9f', 'committer_username': 'eshaanagarwal', 'committer_name': 'Eshaan Agarwal', 'committer_email': 'eshaan060202@gmail.com', 'commit_date': datetime.datetime(2021, 2, 1, 16, 18, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd7f1761080510bcffd611aabbcdcd44fd19e79b6', 'committer_username': 'eshaanagarwal', 'committer_name': 'Eshaan Agarwal', 'committer_email': 'eshaan060202@gmail.com', 'commit_date': datetime.datetime(2021, 2, 1, 16, 18, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9e58fd81a48c09f02cefb704c577e28aca72b20d', 'committer_username': 'eshaanagarwal', 'committer_name': 'Eshaan Agarwal', 'committer_email': 'eshaan060202@gmail.com', 'commit_date': datetime.datetime(2021, 2, 1, 16, 18, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bb75892428bd7c128ae0694342666201d771d649', 'committer_username': 'eshaanagarwal', 'committer_name': 'Eshaan Agarwal', 'committer_email': 'eshaan060202@gmail.com', 'commit_date': datetime.datetime(2021, 2, 1, 16, 18, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd3719dd955a44af49487f3746897e100b5cf42b4', 'committer_username': 'eshaanagarwal', 'committer_name': 'Eshaan Agarwal', 'committer_email': 'eshaan060202@gmail.com', 'commit_date': datetime.datetime(2021, 2, 1, 16, 18, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fdf3d0c7eda4caed5ef1e8748ed37df97916665b', 'committer_username': 'eshaanagarwal', 'committer_name': 'Eshaan Agarwal', 'committer_email': 'eshaan060202@gmail.com', 'commit_date': datetime.datetime(2021, 2, 1, 16, 18, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '522aae4bc1620d8be811983d68d52ff398e4fd05', 'committer_username': 'eshaanagarwal', 'committer_name': 'Eshaan Agarwal', 'committer_email': 'eshaan060202@gmail.com', 'commit_date': datetime.datetime(2021, 2, 1, 16, 18, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8ed96b6d5d2a4f386e5e7fa907bd0d56975ab7ff', 'committer_username': 'eshaanagarwal', 'committer_name': 'Eshaan Agarwal', 'committer_email': 'eshaan060202@gmail.com', 'commit_date': datetime.datetime(2021, 2, 1, 16, 18, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cfc080b45b9a16708586eacfde6a24acc44ccae9', 'committer_username': 'eshaanagarwal', 'committer_name': 'Eshaan Agarwal', 'committer_email': 'eshaan060202@gmail.com', 'commit_date': datetime.datetime(2021, 2, 1, 16, 18, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f87552ec551d47731c6303d198f8b07359b1135e', 'committer_username': 'eshaanagarwal', 'committer_name': 'Eshaan Agarwal', 'committer_email': 'eshaan060202@gmail.com', 'commit_date': datetime.datetime(2021, 2, 1, 16, 18, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bacba559bfe9f4db680ff93165a6c6475872fb23', 'committer_username': 'eshaanagarwal', 'committer_name': 'Eshaan Agarwal', 'committer_email': 'eshaan060202@gmail.com', 'commit_date': datetime.datetime(2021, 2, 1, 16, 18, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2a5e313b890d043c66f8f8843d080d280bbde382', 'committer_username': 'eshaanagarwal', 'committer_name': 'Eshaan Agarwal', 'committer_email': 'eshaan060202@gmail.com', 'commit_date': datetime.datetime(2021, 2, 1, 16, 18, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a198f3fd6b5d5d5e9acc155bd734d29627a33411', 'committer_username': 'eshaanagarwal', 'committer_name': 'Eshaan Agarwal', 'committer_email': 'eshaan060202@gmail.com', 'commit_date': datetime.datetime(2021, 2, 1, 16, 18, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3133a02494d17cfc8ad1c0d63b3bf999884ba893', 'committer_username': 'eshaanagarwal', 'committer_name': 'Eshaan Agarwal', 'committer_email': 'eshaan060202@gmail.com', 'commit_date': datetime.datetime(2021, 2, 1, 16, 18, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5045bf7491d21175d57d03d5d4942bfc2cb8427d', 'committer_username': 'eshaanagarwal', 'committer_name': 'Eshaan Agarwal', 'committer_email': 'eshaan060202@gmail.com', 'commit_date': datetime.datetime(2021, 2, 1, 16, 18, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3767c6ff65617b7105de50c6b894eb49b8305b15', 'committer_username': 'eshaanagarwal', 'committer_name': 'Eshaan Agarwal', 'committer_email': 'eshaan060202@gmail.com', 'commit_date': datetime.datetime(2021, 2, 1, 16, 18, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a7e35b8b683125f12f4e5f555d6fd52649018f04', 'committer_username': 'eshaanagarwal', 'committer_name': 'Eshaan Agarwal', 'committer_email': 'eshaan060202@gmail.com', 'commit_date': datetime.datetime(2021, 2, 1, 16, 18, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5ab5f5a02f58cfb2d93d54fe0a985e9fc7141b22', 'committer_username': 'eshaanagarwal', 'committer_name': 'Eshaan Agarwal', 'committer_email': 'eshaan060202@gmail.com', 'commit_date': datetime.datetime(2021, 2, 1, 16, 18, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '789871c9fdae40923fbdbea82fed00f6c749a729', 'committer_username': 'eshaanagarwal', 'committer_name': 'Eshaan Agarwal', 'committer_email': 'eshaan060202@gmail.com', 'commit_date': datetime.datetime(2021, 2, 1, 16, 18, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e40de290d797478e6b1d50d1c12a5d9077b03d10', 'committer_username': 'eshaanagarwal', 'committer_name': 'Eshaan Agarwal', 'committer_email': 'eshaan060202@gmail.com', 'commit_date': datetime.datetime(2021, 2, 1, 16, 18, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '40f8b8ec02aeb981a38058956039e6c98b49b734', 'committer_username': 'eshaanagarwal', 'committer_name': 'Eshaan Agarwal', 'committer_email': 'eshaan060202@gmail.com', 'commit_date': datetime.datetime(2021, 2, 1, 16, 18, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5628cd41c3fad80a18e78958a7bd48fa45a3ea95', 'committer_username': 'eshaanagarwal', 'committer_name': 'Eshaan Agarwal', 'committer_email': 'eshaan060202@gmail.com', 'commit_date': datetime.datetime(2021, 2, 1, 16, 18, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cb6ef40c06cf789b776f6ad2f8bb419b217068dd', 'committer_username': 'eshaanagarwal', 'committer_name': 'Eshaan Agarwal', 'committer_email': 'eshaan060202@gmail.com', 'commit_date': datetime.datetime(2021, 2, 1, 16, 18, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b9c6db728d8693a3ca7922a559fc187dc8dc37fa', 'committer_username': 'eshaanagarwal', 'committer_name': 'Eshaan Agarwal', 'committer_email': 'eshaan060202@gmail.com', 'commit_date': datetime.datetime(2021, 2, 1, 16, 18, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cb9078c22a9b6245c83df53d0557cf00c552152d', 'committer_username': 'eshaanagarwal', 'committer_name': 'Eshaan Agarwal', 'committer_email': 'eshaan060202@gmail.com', 'commit_date': datetime.datetime(2021, 2, 1, 16, 18, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a6c39b2553855a10fc9ce9d0e45e607d3b44c637', 'committer_username': 'eshaanagarwal', 'committer_name': 'Eshaan Agarwal', 'committer_email': 'eshaan060202@gmail.com', 'commit_date': datetime.datetime(2021, 2, 1, 16, 18, 38, tzinfo=datetime.timezone.utc)}]",Eshaan Agarwal,78371148,eshaan060202@gmail.com,User,,64,,132,101
1111750969,add HER Tutorial with Maze Environment,- [x] Add Her Tutorial with Maze Environment,False,3306,https://api.github.com/repos/mlpack/mlpack/pulls/3306,https://github.com/mlpack/mlpack/pull/3306,closed,150,0,1,1,1,0,4,0,"[{'name': 's: stale'}, {'name': 's: needs review'}, {'name': 's: unanswered'}, {'name': 's: unlabeled'}]",2022-11-05 18:20:06+00:00,2022-12-12 19:53:29+00:00,3202403.0,"37 days, 1:33:23",[],"[{'commit_sha': '5ccbc5f2b370023784df0fd29d62ecec7e00d93f', 'committer_username': 'eshaanagarwal', 'committer_name': 'Eshaan Agarwal', 'committer_email': 'eshaan060202@gmail.com', 'commit_date': datetime.datetime(2021, 2, 1, 16, 18, 38, tzinfo=datetime.timezone.utc)}]",Eshaan Agarwal,78371148,eshaan060202@gmail.com,User,,64,,132,101

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
28149409,mlpack,mlpack/mlpack,C++,1592,4979,183,321,30199,24,11,15,"[{'id': 1111750969, 'number': 3306, 'closed': datetime.datetime(2022, 12, 12, 19, 53, 29, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 11, 5, 18, 20, 6, tzinfo=datetime.timezone.utc), 'time_taken': 3202403.0, 'time_delta': '37 days, 1:33:23', 'additions': 150, 'deletions': 0, 'state': 'closed'}, {'id': 1081241941, 'number': 3283, 'closed': datetime.datetime(2022, 12, 12, 15, 53, 29, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 10, 9, 11, 4, 59, tzinfo=datetime.timezone.utc), 'time_taken': 5546910.0, 'time_delta': '64 days, 4:48:30', 'additions': 1430, 'deletions': 24, 'state': 'closed'}, {'id': 985617724, 'number': 3239, 'closed': datetime.datetime(2022, 10, 31, 18, 34, 52, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 3, 0, 52, 49, tzinfo=datetime.timezone.utc), 'time_taken': 10431723.0, 'time_delta': '120 days, 17:42:03', 'additions': 564, 'deletions': 1, 'state': 'closed'}, {'id': 909026735, 'number': 3186, 'closed': datetime.datetime(2022, 5, 22, 17, 59, 2, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 4, 13, 14, 47, 22, tzinfo=datetime.timezone.utc), 'time_taken': 3381100.0, 'time_delta': '39 days, 3:11:40', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 874598350, 'number': 3164, 'closed': datetime.datetime(2022, 4, 18, 22, 43, 3, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 3, 8, 21, 14, 30, tzinfo=datetime.timezone.utc), 'time_taken': 3547713.0, 'time_delta': '41 days, 1:28:33', 'additions': 36, 'deletions': 27, 'state': 'closed'}]"
