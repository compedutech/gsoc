pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
687394265,add raisedTo method for PMMatrix,"A `raisedTo: anInteger` method is added for PMMatrix. Now, exponentiation of matrices can be performed using this method.

Eg: You can calculate A<sup>3</sup> using `A raisedTo: 3`.",True,209,https://api.github.com/repos/PolyMathOrg/PolyMath/pulls/209,https://github.com/PolyMathOrg/PolyMath/pull/209,closed,71,0,2,3,4,11,0,0,[],2021-07-11 21:01:06+00:00,2021-07-17 12:55:24+00:00,489258.0,"5 days, 15:54:18","[{'comment_id': 669086963, 'comment_body': ""Nested ifs can impact comprehensibility. Perhaps, makes this a guard clause all on its own for a power = 0. Assuming you've not considered this already, is there a way we may avoid chains ifTrue/ifFalse, as I personally am finding it hard to follow "", 'comment_created': datetime.datetime(2021, 7, 13, 20, 28, 56, tzinfo=datetime.timezone.utc), 'commenter': 'hemalvarambhia', 'type': 'User'}, {'comment_id': 669087134, 'comment_body': '```suggestion\r\nPMMatrix >> raisedTo: power [\r\n```', 'comment_created': datetime.datetime(2021, 7, 13, 20, 29, 13, tzinfo=datetime.timezone.utc), 'commenter': 'hemalvarambhia', 'type': 'User'}, {'comment_id': 669087831, 'comment_body': ""Check there isn't an `isSquare` message already. Use it if there is one, or use the extract method refactor. Add any tests you deem necessary."", 'comment_created': datetime.datetime(2021, 7, 13, 20, 30, 22, tzinfo=datetime.timezone.utc), 'commenter': 'hemalvarambhia', 'type': 'User'}, {'comment_id': 669089274, 'comment_body': 'These are great tests! Well done. My only suggestions are formatting to Arrange Act Assert.', 'comment_created': datetime.datetime(2021, 7, 13, 20, 32, 45, tzinfo=datetime.timezone.utc), 'commenter': 'hemalvarambhia', 'type': 'User'}, {'comment_id': 669089582, 'comment_body': 'Move the `expected` to be close to the `self assert...`', 'comment_created': datetime.datetime(2021, 7, 13, 20, 33, 12, tzinfo=datetime.timezone.utc), 'commenter': 'hemalvarambhia', 'type': 'User'}, {'comment_id': 669089818, 'comment_body': 'Same suggestion here - move the `expected` closer to `self assert ...`', 'comment_created': datetime.datetime(2021, 7, 13, 20, 33, 38, tzinfo=datetime.timezone.utc), 'commenter': 'hemalvarambhia', 'type': 'User'}, {'comment_id': 669089945, 'comment_body': 'Same suggestion here.', 'comment_created': datetime.datetime(2021, 7, 13, 20, 33, 54, tzinfo=datetime.timezone.utc), 'commenter': 'hemalvarambhia', 'type': 'User'}, {'comment_id': 669426703, 'comment_body': '@hemalvarambhia I have reformatted it now. Can you please check it?', 'comment_created': datetime.datetime(2021, 7, 14, 8, 59, 50, tzinfo=datetime.timezone.utc), 'commenter': 'rakki-18', 'type': 'User'}, {'comment_id': 669427217, 'comment_body': 'Yes, `isSquare` method is there, thank you!\r\nI am now using this method.', 'comment_created': datetime.datetime(2021, 7, 14, 9, 0, 29, tzinfo=datetime.timezone.utc), 'commenter': 'rakki-18', 'type': 'User'}, {'comment_id': 669458369, 'comment_body': ""Recursion! Is there a way to iterate instead in order to make it faster? I misread this due to a lack of space between the '-' and '1'"", 'comment_created': datetime.datetime(2021, 7, 14, 9, 44, 1, tzinfo=datetime.timezone.utc), 'commenter': 'hemalvarambhia', 'type': 'User'}, {'comment_id': 669580186, 'comment_body': '@hemalvarambhia Yes, I could change the recursion to iteration. I had kept recursion because I felt that the code looked more concise and elegant.', 'comment_created': datetime.datetime(2021, 7, 14, 12, 44, 11, tzinfo=datetime.timezone.utc), 'commenter': 'rakki-18', 'type': 'User'}]","[{'commit_sha': 'ebca7eaed37fe4840fd17fec4d646f3198cf2aab', 'committer_username': 'rakki-18', 'committer_name': 'Rakshit P', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 18, 12, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a9bc4b8dd6edeaf03e36359ca4e0a40f6c03dcf6', 'committer_username': 'rakki-18', 'committer_name': 'Rakshit P', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 18, 12, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '399dccb7def4654898374e85fb66aabcf75f65ef', 'committer_username': 'rakki-18', 'committer_name': 'Rakshit P', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 18, 12, 36, tzinfo=datetime.timezone.utc)}]",Rakshit P,55957545,,User,,38,,30,36
666887406,check for invalid shapes in strassen multiplication,"Strassen multiplication between two matrices is only possible when the dimensions of both the matrices are a power of 2.
Currently, we get an error when we try to do `strassenProductWithMatrix:` with a matrix of dimension that is not a power of 2.

Changes introduced with this PR:
- An assertion condition is added to the `strassenProductWithMatrix:` method that checks that the shapes of the matrices are a power of 2.
- Unit test to check if the assertion failure is raised when `stassenProductWithMatrix` is called on invalid shapes.
- Unit test that checks if the output of Strassen multiplication on two valid matrices is correct

A better solution for this [problem](https://cs.stackexchange.com/questions/97998/strassens-matrix-multiplication-algorithm-when-n-is-not-a-power-of-2) would be to pad the matrix with zeros and make the dimensions to be a power of two. ",True,208,https://api.github.com/repos/PolyMathOrg/PolyMath/pulls/208,https://github.com/PolyMathOrg/PolyMath/pull/208,closed,28,0,2,3,3,9,0,0,[],2021-06-10 13:21:46+00:00,2021-06-20 08:55:48+00:00,848042.0,"9 days, 19:34:02","[{'comment_id': 651138870, 'comment_body': 'I like the use of assertions here. Pragmatic Programmers talks about using this to check pre-conditions in production', 'comment_created': datetime.datetime(2021, 6, 14, 17, 25, 32, tzinfo=datetime.timezone.utc), 'commenter': 'hemalvarambhia', 'type': 'User'}, {'comment_id': 651139986, 'comment_body': 'This, I think, has to be the other way around. `self assert: strassenProduct equals: expected`, which reads better.\r\n\r\nI really like the variable naming. Thank you ', 'comment_created': datetime.datetime(2021, 6, 14, 17, 27, 13, tzinfo=datetime.timezone.utc), 'commenter': 'hemalvarambhia', 'type': 'User'}, {'comment_id': 651586464, 'comment_body': '@hemalvarambhia I have changed the order of `strassenProduct` and `expected`. Thank you.', 'comment_created': datetime.datetime(2021, 6, 15, 8, 52, 6, tzinfo=datetime.timezone.utc), 'commenter': 'rakki-18', 'type': 'User'}, {'comment_id': 653673338, 'comment_body': ""Is this aligned with L345. In github it looks like it's been indented, @rakki-18 "", 'comment_created': datetime.datetime(2021, 6, 17, 15, 25, 3, tzinfo=datetime.timezone.utc), 'commenter': 'hemalvarambhia', 'type': 'User'}, {'comment_id': 654217466, 'comment_body': '@hemalvarambhia I have fixed the indentation now.', 'comment_created': datetime.datetime(2021, 6, 18, 7, 48, 28, tzinfo=datetime.timezone.utc), 'commenter': 'rakki-18', 'type': 'User'}, {'comment_id': 654941573, 'comment_body': '@rakki-18 I just thought of something that maybe worth experimenting with. With the `assert: description:` message, is there a way to have it raise a more specific exception, such as `MatrixHasInvalidShape` - this helps with debugging, but has the disadvantage of YAGNI, unless the kind of shape checking done here is also done elsewhere, meaning a possible refactoring opportunity.', 'comment_created': datetime.datetime(2021, 6, 20, 14, 11, 5, tzinfo=datetime.timezone.utc), 'commenter': 'hemalvarambhia', 'type': 'User'}, {'comment_id': 655001750, 'comment_body': '@hemalvarambhia We could try making a `MatrixHasInvalidShape` exception class. But as you mentioned, I could only find ""matrix multiplication"" where this class could be potentially used.', 'comment_created': datetime.datetime(2021, 6, 20, 23, 12, 5, tzinfo=datetime.timezone.utc), 'commenter': 'rakki-18', 'type': 'User'}, {'comment_id': 655070771, 'comment_body': '@rakki-18 Explore the idea, if you can, then, to examine the consequences for the design and debugging ', 'comment_created': datetime.datetime(2021, 6, 21, 4, 45, 42, tzinfo=datetime.timezone.utc), 'commenter': 'hemalvarambhia', 'type': 'User'}, {'comment_id': 655102247, 'comment_body': 'Yeah, I will try to explore.', 'comment_created': datetime.datetime(2021, 6, 21, 6, 19, 29, tzinfo=datetime.timezone.utc), 'commenter': 'rakki-18', 'type': 'User'}]","[{'commit_sha': '9f82124ad2987c3e7f4cf68ecbb36583cd8ee1b6', 'committer_username': 'rakki-18', 'committer_name': 'Rakshit P', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 18, 12, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b46d87fc57ea9903607c238470b62ab0a4cb5d2b', 'committer_username': 'rakki-18', 'committer_name': 'Rakshit P', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 18, 12, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '13732d8cda208eb3f9010c13deeb003554133b24', 'committer_username': 'rakki-18', 'committer_name': 'Rakshit P', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 18, 12, 36, tzinfo=datetime.timezone.utc)}]",Rakshit P,55957545,,User,,38,,30,36
654127657,handle negative values for shapes in PMMatrix,"This PR solves the issue - #205 partially.
Changes introduced with this PR :
- When negative values are given as input to the shapes of a PMMatrix, an AssertionFailure error is returned.",True,206,https://api.github.com/repos/PolyMathOrg/PolyMath/pulls/206,https://github.com/PolyMathOrg/PolyMath/pull/206,closed,39,20,3,11,4,14,0,0,[],2021-05-26 18:44:26+00:00,2021-06-06 07:29:25+00:00,909899.0,"10 days, 12:44:59","[{'comment_id': 641928012, 'comment_body': 'These, according to the project guidelines, should be a separate test method e.g. `testMatrixInitialisationWithNegativeDimensions` as this is an edge case.', 'comment_created': datetime.datetime(2021, 5, 29, 11, 41, 29, tzinfo=datetime.timezone.utc), 'commenter': 'hemalvarambhia', 'type': 'User'}, {'comment_id': 642335991, 'comment_body': ""What failure message do clients get here? I'd it easy to debug from?"", 'comment_created': datetime.datetime(2021, 5, 31, 9, 5, 14, tzinfo=datetime.timezone.utc), 'commenter': 'hemalvarambhia', 'type': 'User'}, {'comment_id': 642337562, 'comment_body': 'It shows up as an assertion failure only.', 'comment_created': datetime.datetime(2021, 5, 31, 9, 7, 40, tzinfo=datetime.timezone.utc), 'commenter': 'rakki-18', 'type': 'User'}, {'comment_id': 642352989, 'comment_body': 'Would you mind posting it here? It might be worth documenting that message in the test as an alternative. ', 'comment_created': datetime.datetime(2021, 5, 31, 9, 30, 55, tzinfo=datetime.timezone.utc), 'commenter': 'hemalvarambhia', 'type': 'User'}, {'comment_id': 642364704, 'comment_body': '`AssertionFailure: Assertion failed`', 'comment_created': datetime.datetime(2021, 5, 31, 9, 49, 6, tzinfo=datetime.timezone.utc), 'commenter': 'rakki-18', 'type': 'User'}, {'comment_id': 642478476, 'comment_body': ""Perhaps, then, we should be clearer e.g. 'Dimension of a matrix must be greater than zero' (as mentioned above, can the dimension be zero?)"", 'comment_created': datetime.datetime(2021, 5, 31, 13, 11, tzinfo=datetime.timezone.utc), 'commenter': 'hemalvarambhia', 'type': 'User'}, {'comment_id': 642478901, 'comment_body': ""Can we have a zero dimensional matrix? I don't think we do."", 'comment_created': datetime.datetime(2021, 5, 31, 13, 11, 42, tzinfo=datetime.timezone.utc), 'commenter': 'hemalvarambhia', 'type': 'User'}, {'comment_id': 642498686, 'comment_body': 'I am not sure of this actually. But `Array2D` allows zero-dimensional matrix and we can create a `PMVector` of size 0. So, I felt we should allow zero-dimensional matrix in `PMMatrix`. What do you think?', 'comment_created': datetime.datetime(2021, 5, 31, 13, 42, 17, tzinfo=datetime.timezone.utc), 'commenter': 'rakki-18', 'type': 'User'}, {'comment_id': 642505309, 'comment_body': 'This is a domain question that may be worth raising with Serge or in discord', 'comment_created': datetime.datetime(2021, 5, 31, 13, 52, 6, tzinfo=datetime.timezone.utc), 'commenter': 'hemalvarambhia', 'type': 'User'}, {'comment_id': 642525515, 'comment_body': 'Maybe the initialize method should be renamed after the discord conversation, and the comment for this method, which says clients get a square matrix', 'comment_created': datetime.datetime(2021, 5, 31, 14, 23, 26, tzinfo=datetime.timezone.utc), 'commenter': 'hemalvarambhia', 'type': 'User'}, {'comment_id': 642576423, 'comment_body': '`dimension` rather than `anInteger`', 'comment_created': datetime.datetime(2021, 5, 31, 15, 53, 21, tzinfo=datetime.timezone.utc), 'commenter': 'hemalvarambhia', 'type': 'User'}, {'comment_id': 642584608, 'comment_body': 'dimension rather than anInteger', 'comment_created': datetime.datetime(2021, 5, 31, 16, 11, 31, tzinfo=datetime.timezone.utc), 'commenter': 'hemalvarambhia', 'type': 'User'}, {'comment_id': 644549915, 'comment_body': ""Correct the variable name in the comment, if you don't mind."", 'comment_created': datetime.datetime(2021, 6, 3, 7, 23, 45, tzinfo=datetime.timezone.utc), 'commenter': 'hemalvarambhia', 'type': 'User'}, {'comment_id': 644647113, 'comment_body': 'Yeah, done.', 'comment_created': datetime.datetime(2021, 6, 3, 9, 42, 3, tzinfo=datetime.timezone.utc), 'commenter': 'rakki-18', 'type': 'User'}]","[{'commit_sha': '96a08256486c169159109a45ece69eb0835229ee', 'committer_username': 'rakki-18', 'committer_name': 'Rakshit P', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 18, 12, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '09a5187b17c3423bb9599f0366bf2ee94ab9f340', 'committer_username': 'rakki-18', 'committer_name': 'Rakshit P', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 18, 12, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '05caf5a510d1975df66c87c7a82f17e9be61f97c', 'committer_username': 'rakki-18', 'committer_name': 'Rakshit P', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 18, 12, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4894bda2b3dc99cd4a358b9e9cececc5b554798c', 'committer_username': 'rakki-18', 'committer_name': 'Rakshit P', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 18, 12, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'caf9b6df21d1488ecb872bb843e0b977e6e4b228', 'committer_username': 'rakki-18', 'committer_name': 'Rakshit P', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 18, 12, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fcbf0cc3c2753a3c0316c6dd3d29ace5085b03a0', 'committer_username': 'rakki-18', 'committer_name': 'Rakshit P', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 18, 12, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9f087d9b3f6b8f9718e43db6da21c38518a3dc62', 'committer_username': 'rakki-18', 'committer_name': 'Rakshit P', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 18, 12, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ddf173f4f8462612c0aff784ce266b886ca94f22', 'committer_username': 'rakki-18', 'committer_name': 'Rakshit P', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 18, 12, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '33cb31650be63f26192553a35fbccde4f0f2874f', 'committer_username': 'rakki-18', 'committer_name': 'Rakshit P', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 18, 12, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'de6f5629218d69b03d5a82e14c46bfb2f3ae00cf', 'committer_username': 'rakki-18', 'committer_name': 'Rakshit P', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 18, 12, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c8aaa3bb333d2630e7d446109b4352e33349e5b8', 'committer_username': 'rakki-18', 'committer_name': 'Rakshit P', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 18, 12, 36, tzinfo=datetime.timezone.utc)}]",Rakshit P,55957545,,User,,38,,30,36
648835398,add identity matrix instance creation for PMMatrix,"Changes introduced from this PR
- Identity matrix can now be initialized using PMMatrix class
- Added tests for Identity matrix initialization using PMMatrix class
- Added tests for Identity matrix initialization using PMSymmetricMatrix class.",True,202,https://api.github.com/repos/PolyMathOrg/PolyMath/pulls/202,https://github.com/PolyMathOrg/PolyMath/pull/202,closed,30,1,3,3,1,12,0,0,[],2021-05-20 12:35:15+00:00,2021-05-31 14:42:22+00:00,958027.0,"11 days, 2:07:07","[{'comment_id': 642255513, 'comment_body': 'Great name!', 'comment_created': datetime.datetime(2021, 5, 31, 6, 58, 17, tzinfo=datetime.timezone.utc), 'commenter': 'hemalvarambhia', 'type': 'User'}, {'comment_id': 642256193, 'comment_body': ""identityMatrix rather than a2. Gérard Mezsaros has a nice heuristic called 'Write tests for humans'"", 'comment_created': datetime.datetime(2021, 5, 31, 6, 59, 40, tzinfo=datetime.timezone.utc), 'commenter': 'hemalvarambhia', 'type': 'User'}, {'comment_id': 642256506, 'comment_body': 'Maybe call this expected or expectedIdentityMatrix', 'comment_created': datetime.datetime(2021, 5, 31, 7, 0, 12, tzinfo=datetime.timezone.utc), 'commenter': 'hemalvarambhia', 'type': 'User'}, {'comment_id': 642256825, 'comment_body': 'Again here, consider improving the naming of the variables.', 'comment_created': datetime.datetime(2021, 5, 31, 7, 0, 51, tzinfo=datetime.timezone.utc), 'commenter': 'hemalvarambhia', 'type': 'User'}, {'comment_id': 642266751, 'comment_body': 'What is anInteger? Is that the matrix size? If so, consider improving that argument name.', 'comment_created': datetime.datetime(2021, 5, 31, 7, 18, 47, tzinfo=datetime.timezone.utc), 'commenter': 'hemalvarambhia', 'type': 'User'}, {'comment_id': 642347617, 'comment_body': 'Would `dimension` be a better variable name instead of `anInteger`?', 'comment_created': datetime.datetime(2021, 5, 31, 9, 22, 48, tzinfo=datetime.timezone.utc), 'commenter': 'rakki-18', 'type': 'User'}, {'comment_id': 642351861, 'comment_body': '@rakki-18 yes, great idea :+1:', 'comment_created': datetime.datetime(2021, 5, 31, 9, 29, 14, tzinfo=datetime.timezone.utc), 'commenter': 'hemalvarambhia', 'type': 'User'}, {'comment_id': 642362727, 'comment_body': ""You mean `equals: expectedIdentityMatrix.`\n\nAs, given the factory method is well named, you can, as an option, inline the local variable. Happy either way. I'll leave exercising the option in your good hands."", 'comment_created': datetime.datetime(2021, 5, 31, 9, 46, 9, tzinfo=datetime.timezone.utc), 'commenter': 'hemalvarambhia', 'type': 'User'}, {'comment_id': 642363458, 'comment_body': 'Fix this before merging', 'comment_created': datetime.datetime(2021, 5, 31, 9, 47, 8, tzinfo=datetime.timezone.utc), 'commenter': 'hemalvarambhia', 'type': 'User'}, {'comment_id': 642367420, 'comment_body': 'My bad, I have fixed it now.', 'comment_created': datetime.datetime(2021, 5, 31, 9, 53, 12, tzinfo=datetime.timezone.utc), 'commenter': 'rakki-18', 'type': 'User'}, {'comment_id': 642519785, 'comment_body': 'Identity matrices are usually square matrices.if we have a square matrix class already, should it moved there?', 'comment_created': datetime.datetime(2021, 5, 31, 14, 14, 20, tzinfo=datetime.timezone.utc), 'commenter': 'hemalvarambhia', 'type': 'User'}, {'comment_id': 642533624, 'comment_body': 'I understand that PMMatrix represents square AND non-square matrices. Since the identity matrix is square, it maybe safe here for the time being.', 'comment_created': datetime.datetime(2021, 5, 31, 14, 36, 14, tzinfo=datetime.timezone.utc), 'commenter': 'hemalvarambhia', 'type': 'User'}]","[{'commit_sha': 'cd53694449a29cddec619cd59255267fc50c955c', 'committer_username': 'rakki-18', 'committer_name': 'Rakshit P', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 18, 12, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '11cccba5c8f173477358922ea6915b38a50fa63a', 'committer_username': 'rakki-18', 'committer_name': 'Rakshit P', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 18, 12, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b3a7de80a397acd6f16c116963fcdf0a2638d829', 'committer_username': 'rakki-18', 'committer_name': 'Rakshit P', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 18, 12, 36, tzinfo=datetime.timezone.utc)}]",Rakshit P,55957545,,User,,38,,30,36
635877390,add atRow: method for PMMatrix,"The `PMMatrix` class did not have the method `atRow:` initialised even though the method `atColumn:` was initialised.

The method, `atRow:` is introduced through this PR.",True,201,https://api.github.com/repos/PolyMathOrg/PolyMath/pulls/201,https://github.com/PolyMathOrg/PolyMath/pull/201,closed,18,2,2,4,3,11,0,0,[],2021-05-09 13:43:24+00:00,2021-05-18 04:00:38+00:00,742634.0,"8 days, 14:17:14","[{'comment_id': 632796257, 'comment_body': 'Any programmer tests to write here, @rakki-18 ? I seems simple enough', 'comment_created': datetime.datetime(2021, 5, 14, 20, 51, 48, tzinfo=datetime.timezone.utc), 'commenter': 'hemalvarambhia', 'type': 'User'}, {'comment_id': 632796534, 'comment_body': '`anInteger` -> `rowNumber` . Here should be 0 index it, do you think?', 'comment_created': datetime.datetime(2021, 5, 14, 20, 52, 25, tzinfo=datetime.timezone.utc), 'commenter': 'hemalvarambhia', 'type': 'User'}, {'comment_id': 632797864, 'comment_body': ""By cell accessing, you mean accessing a matrix element? If so, maybe that's a more domain-driven naming. Again, thoughts welcome."", 'comment_created': datetime.datetime(2021, 5, 14, 20, 54, 35, tzinfo=datetime.timezone.utc), 'commenter': 'hemalvarambhia', 'type': 'User'}, {'comment_id': 632917812, 'comment_body': '@hemalvarambhia Yeah sure, I will write some tests.', 'comment_created': datetime.datetime(2021, 5, 15, 8, 48, 45, tzinfo=datetime.timezone.utc), 'commenter': 'rakki-18', 'type': 'User'}, {'comment_id': 632918041, 'comment_body': '> `anInteger` -> `rowNumber` . Here should be 0 index it, do you think?\r\n\r\nYes, `rowNumber` makes more sense. But `atColumn:` method had the argument name as `anInteger`, so I thought it would be better to stick on to the same here also. Shall I change it to `rowNumber`?', 'comment_created': datetime.datetime(2021, 5, 15, 8, 50, 43, tzinfo=datetime.timezone.utc), 'commenter': 'rakki-18', 'type': 'User'}, {'comment_id': 632918635, 'comment_body': ""> By cell accessing, you mean accessing a matrix element? If so, maybe that's a more domain-driven naming. Again, thoughts welcome.\r\n\r\nYeah, cell accessing doesn't seem the exact category for this method but again I stuck on to this because `atColumn:` method also had the same category."", 'comment_created': datetime.datetime(2021, 5, 15, 8, 56, 25, tzinfo=datetime.timezone.utc), 'commenter': 'rakki-18', 'type': 'User'}, {'comment_id': 632918759, 'comment_body': '> > `anInteger` -> `rowNumber` . Here should be 0 index it, do you think?\n> \n> Yes, `rowNumber` makes more sense. But `atColumn:` method had the argument name as `anInteger`, so I thought it would be better to stick on to the same here also. Shall I change it to `rowNumber`?\n\nYes please. It makes the code clearer, I think. \n\nI would suggest you do the same for the argument name for atColumn. Great spot', 'comment_created': datetime.datetime(2021, 5, 15, 8, 58, 9, tzinfo=datetime.timezone.utc), 'commenter': 'hemalvarambhia', 'type': 'User'}, {'comment_id': 632918867, 'comment_body': ""> > By cell accessing, you mean accessing a matrix element? If so, maybe that's a more domain-driven naming. Again, thoughts welcome.\n> \n> Yeah, cell accessing doesn't seem the exact category for this method but again I stuck on to this because `atColumn:` method also had the same category.\n\nLeave it as it is in this PR, and propose a separate one for improving the category name."", 'comment_created': datetime.datetime(2021, 5, 15, 8, 59, 33, tzinfo=datetime.timezone.utc), 'commenter': 'hemalvarambhia', 'type': 'User'}, {'comment_id': 632918904, 'comment_body': '> @hemalvarambhia Yeah sure, I will write some tests.\n\nTYSM', 'comment_created': datetime.datetime(2021, 5, 15, 9, 0, 4, tzinfo=datetime.timezone.utc), 'commenter': 'hemalvarambhia', 'type': 'User'}, {'comment_id': 632921374, 'comment_body': '`aColumnNumber`', 'comment_created': datetime.datetime(2021, 5, 15, 9, 23, 29, tzinfo=datetime.timezone.utc), 'commenter': 'hemalvarambhia', 'type': 'User'}, {'comment_id': 632922182, 'comment_body': 'Thanks, I have corrected it.', 'comment_created': datetime.datetime(2021, 5, 15, 9, 31, 36, tzinfo=datetime.timezone.utc), 'commenter': 'rakki-18', 'type': 'User'}]","[{'commit_sha': 'f5fd0c0303d8bd079dff27a3f8990a895274d60e', 'committer_username': 'rakki-18', 'committer_name': 'Rakshit P', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 18, 12, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '300f53651b38ef8ee9d919856083fc842518b239', 'committer_username': 'rakki-18', 'committer_name': 'Rakshit P', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 18, 12, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '39e618b919927bf690dd0d8824edfe7049cfd987', 'committer_username': 'rakki-18', 'committer_name': 'Rakshit P', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 18, 12, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '24c001208c041072aac1ebc1d896a485de4e7167', 'committer_username': 'rakki-18', 'committer_name': 'Rakshit P', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 18, 12, 36, tzinfo=datetime.timezone.utc)}]",Rakshit P,55957545,,User,,38,,30,36



695458823,"Add missing instance variable, todoListPresenter","In the tutorial, the instance variable`todoListPresenter` was missing from the `TODOListPresenter` class initialization.

This PR adds the missing variable to the tutorial.",True,6,https://api.github.com/repos/pharo-spec/smalltodo-example/pulls/6,https://github.com/pharo-spec/smalltodo-example/pull/6,closed,1,1,1,1,1,0,0,0,[],2021-07-22 19:58:31+00:00,2021-07-22 20:15:17+00:00,1006.0,0:16:46,[],"[{'commit_sha': 'f5479f9df2bc6b3b9437f8a17b9cbb266066774f', 'committer_username': 'rakki-18', 'committer_name': 'Rakshit P', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 18, 12, 36, tzinfo=datetime.timezone.utc)}]",Rakshit P,55957545,,User,,38,,30,36
627355074,add upperbound on seed in random,"Aims to solve #6231

When a large seed is given to Random, it starts giving negative values.
Every seed greater than 1e12 seems to be producing negative values.

This PR adds an upper bound( m = 2^31 - 1) to the value that a seed can take.

",True,9221,https://api.github.com/repos/pharo-project/pharo/pulls/9221,https://github.com/pharo-project/pharo/pull/9221,closed,3,1,1,1,2,0,1,0,[{'name': 'Status: Tests passed please review!'}],2021-04-30 12:44:36+00:00,2021-07-19 19:07:31+00:00,6934975.0,"80 days, 6:22:55",[],"[{'commit_sha': '5c8ae8d0e8b3c8add69b8edfa1c559aca3748c55', 'committer_username': 'rakki-18', 'committer_name': 'Rakshit P', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 18, 12, 36, tzinfo=datetime.timezone.utc)}]",Rakshit P,55957545,,User,,38,,30,36
601753827,add isDoubleQuote method,"Fixes #5279 
Added a new method that checks if the given Character is a double quote or not.",True,8896,https://api.github.com/repos/pharo-project/pharo/pulls/8896,https://github.com/pharo-project/pharo/pull/8896,closed,7,0,1,1,1,1,0,0,[],2021-03-26 16:22:02+00:00,2021-03-26 21:24:21+00:00,18139.0,5:02:19,"[{'comment_id': 602434418, 'comment_body': 'There is no need of a temporary variable here.\r\nThat would simplify the code like\r\n\r\n```smalltalk\r\n^ (self asInteger) == 34\r\n```\r\n\r\nAlso remember message precedence: unary methods are always executed before binary methods, and those are before keyword methods. This means that in this case, parenthesis are not required. That would give us\r\n\r\n```smalltalk\r\n^ self asInteger == 34\r\n```\r\n\r\nFinally, to compare Characters, you don\'t need to extract their internal code point value. Instead, Characters can be expressed as literal objects. For example, the character `a` is  `$a`, the character `4` is  `$4` (this is kinda the same as single quotes in C. This means you could obtain a literal double quote character by doing `$""`, and with that we could just compare characters!\r\n\r\n```smalltalk\r\n^ self == $""\r\n```\r\n\r\nFinally, remember in most object oriented languages there are two equality operations: object equality (`=` in Pharo, `.equals()` in Java) and object identity (`==` in both Pharo and Java). Object equality checks if two objects have the same value. Object identity checks if they are **the same object**. In general, we should not use object identity unless really required.\r\nThen I\'d simplify further the code to:\r\n\r\n```smalltalk\r\n^ self = $""\r\n```', 'comment_created': datetime.datetime(2021, 3, 26, 16, 32, 34, tzinfo=datetime.timezone.utc), 'commenter': 'guillep', 'type': 'User'}]","[{'commit_sha': 'f19d6bf846e5e1255aa96b7473667b23c9b082d4', 'committer_username': 'rakki-18', 'committer_name': 'Rakshit P', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 18, 12, 36, tzinfo=datetime.timezone.utc)}]",Rakshit P,55957545,,User,,38,,30,36
600170263,add test for Array2D zeros method,The `Array2D zeros: `method did not have a test in `Array2DTest`. This PR fixes that issue.,True,8873,https://api.github.com/repos/pharo-project/pharo/pulls/8873,https://github.com/pharo-project/pharo/pull/8873,closed,19,0,1,1,1,0,0,0,[],2021-03-24 22:51:50+00:00,2021-03-25 12:26:35+00:00,48885.0,13:34:45,[],"[{'commit_sha': '68cc27311c7ee4760b622c4b894530a4b383fa60', 'committer_username': 'rakki-18', 'committer_name': 'Rakshit P', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 18, 12, 36, tzinfo=datetime.timezone.utc)}]",Rakshit P,55957545,,User,,38,,30,36

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
54906925,PolyMath,PolyMathOrg/PolyMath,Smalltalk,41,168,21,30,1631,56,9,0,"[{'id': 753086043, 'number': 224, 'closed': datetime.datetime(2021, 10, 18, 0, 14, 24, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 10, 7, 11, 24, 18, tzinfo=datetime.timezone.utc), 'time_taken': 910206.0, 'time_delta': '10 days, 12:50:06', 'additions': 18, 'deletions': 9, 'state': 'closed'}, {'id': 687394265, 'number': 209, 'closed': datetime.datetime(2021, 7, 17, 12, 55, 24, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 11, 21, 1, 6, tzinfo=datetime.timezone.utc), 'time_taken': 489258.0, 'time_delta': '5 days, 15:54:18', 'additions': 71, 'deletions': 0, 'state': 'closed'}, {'id': 666887406, 'number': 208, 'closed': datetime.datetime(2021, 6, 20, 8, 55, 48, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 10, 13, 21, 46, tzinfo=datetime.timezone.utc), 'time_taken': 848042.0, 'time_delta': '9 days, 19:34:02', 'additions': 28, 'deletions': 0, 'state': 'closed'}, {'id': 654127657, 'number': 206, 'closed': datetime.datetime(2021, 6, 6, 7, 29, 25, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 5, 26, 18, 44, 26, tzinfo=datetime.timezone.utc), 'time_taken': 909899.0, 'time_delta': '10 days, 12:44:59', 'additions': 39, 'deletions': 20, 'state': 'closed'}, {'id': 648835398, 'number': 202, 'closed': datetime.datetime(2021, 5, 31, 14, 42, 22, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 5, 20, 12, 35, 15, tzinfo=datetime.timezone.utc), 'time_taken': 958027.0, 'time_delta': '11 days, 2:07:07', 'additions': 30, 'deletions': 1, 'state': 'closed'}, {'id': 635877390, 'number': 201, 'closed': datetime.datetime(2021, 5, 18, 4, 0, 38, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 5, 9, 13, 43, 24, tzinfo=datetime.timezone.utc), 'time_taken': 742634.0, 'time_delta': '8 days, 14:17:14', 'additions': 18, 'deletions': 2, 'state': 'closed'}]"
484100842,linear-algebra,pharo-ai/linear-algebra,Smalltalk,1,4,4,4,54,0,1,0,[]
283009734,smalltodo-example,pharo-spec/smalltodo-example,Smalltalk,7,2,3,5,37,7,1,2,"[{'id': 695458823, 'number': 6, 'closed': datetime.datetime(2021, 7, 22, 20, 15, 17, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 22, 19, 58, 31, tzinfo=datetime.timezone.utc), 'time_taken': 1006.0, 'time_delta': '0:16:46', 'additions': 1, 'deletions': 1, 'state': 'closed'}]"
64123480,pharo,pharo-project/pharo,Smalltalk,352,1183,41,256,29517,1315,8,66,"[{'id': 627355074, 'number': 9221, 'closed': datetime.datetime(2021, 7, 19, 19, 7, 31, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 4, 30, 12, 44, 36, tzinfo=datetime.timezone.utc), 'time_taken': 6934975.0, 'time_delta': '80 days, 6:22:55', 'additions': 3, 'deletions': 1, 'state': 'closed'}, {'id': 601753827, 'number': 8896, 'closed': datetime.datetime(2021, 3, 26, 21, 24, 21, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 3, 26, 16, 22, 2, tzinfo=datetime.timezone.utc), 'time_taken': 18139.0, 'time_delta': '5:02:19', 'additions': 7, 'deletions': 0, 'state': 'closed'}, {'id': 600170263, 'number': 8873, 'closed': datetime.datetime(2021, 3, 25, 12, 26, 35, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 3, 24, 22, 51, 50, tzinfo=datetime.timezone.utc), 'time_taken': 48885.0, 'time_delta': '13:34:45', 'additions': 19, 'deletions': 0, 'state': 'closed'}, {'id': 599218556, 'number': 8862, 'closed': datetime.datetime(2021, 3, 24, 7, 34, 31, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 3, 23, 22, 2, 5, tzinfo=datetime.timezone.utc), 'time_taken': 34346.0, 'time_delta': '9:32:26', 'additions': 11, 'deletions': 0, 'state': 'closed'}]"
