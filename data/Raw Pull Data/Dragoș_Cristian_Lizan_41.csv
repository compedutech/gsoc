pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
1065975523,[circt-lec] Introduce the `circt-lec` tool,"A logical equivalence checking tool for CIRCT.
As of now, it covers some basic `hw` operations and the whole `comb` dialect, making it suitable for combinational equivalence checking with the caveat of lowering data types like `hw.array` to bitvectors.
`Z3` acts as the logical backend and has been introduced as a build dependency for the tool; that said I think it would merit getting added to CI before merging this PR.
Furthermore, regression tests for part of the implemented operations and features have been written. I tried to adhere to the operational semantics as defined in the CIRCT documentation, but errors or omissions might still be present. Specifically, the lack of multi-valued logic support arose during a developer's meeting.
Information about the tool's usage can be found in the README file from the tool's directory.

This has been my Google's Summer of Code project ([url](https://summerofcode.withgoogle.com/programs/2022/projects/EDrBHxfN)).
I want to thank @fabianschuiki and @maerhart for their guidance.",True,3991,https://api.github.com/repos/llvm/circt/pulls/3991,https://github.com/llvm/circt/pull/3991,closed,2075,1,19,39,20,67,0,0,[],2022-09-24 07:46:52+00:00,2023-05-01 16:02:21+00:00,18951329.0,"219 days, 8:15:29","[{'comment_id': 979523822, 'comment_body': 'nit:typo CIRC_LEC', 'comment_created': datetime.datetime(2022, 9, 26, 2, 58, 8, tzinfo=datetime.timezone.utc), 'commenter': 'uenoku', 'type': 'User'}, {'comment_id': 979524075, 'comment_body': 'typo: s/CIRC_LEC_DISABLE/CIRCT_LEC_DISABLE/g', 'comment_created': datetime.datetime(2022, 9, 26, 2, 58, 58, tzinfo=datetime.timezone.utc), 'commenter': 'uenoku', 'type': 'User'}, {'comment_id': 979524582, 'comment_body': ""Can we can use StringAttr as a key? Then you don't have to define `DenseMapInfo<std::string>`"", 'comment_created': datetime.datetime(2022, 9, 26, 3, 0, 49, tzinfo=datetime.timezone.utc), 'commenter': 'uenoku', 'type': 'User'}, {'comment_id': 983878786, 'comment_body': 'nit: Can we use namespaces consistent with other places?\r\n\r\n```\r\ncirct::StringRef -> llvm::StringRef\r\ncirct::OperandRange -> mlir::OperandRange\r\ncirct::Value -> mlir::Value\r\nmlir::function_ref -> llvm::function_ref\r\ncirct::Operation -> mlir::Operation\r\n```\r\n\r\n, ', 'comment_created': datetime.datetime(2022, 9, 29, 18, 7, 29, tzinfo=datetime.timezone.utc), 'commenter': 'uenoku', 'type': 'User'}, {'comment_id': 983879764, 'comment_body': 'Can we use existing CombVisitor instead of reimplementing dispatchers?', 'comment_created': datetime.datetime(2022, 9, 29, 18, 8, 48, tzinfo=datetime.timezone.utc), 'commenter': 'uenoku', 'type': 'User'}, {'comment_id': 984359436, 'comment_body': ""I understand consistency, but shouldn't the project namespace be preferred whenever possible?"", 'comment_created': datetime.datetime(2022, 9, 30, 8, 42, 23, tzinfo=datetime.timezone.utc), 'commenter': 'frog-in-the-well', 'type': 'User'}, {'comment_id': 1051435146, 'comment_body': ""nit: you don't need const reference for mlir values in general\r\n```suggestion\r\n  for (mlir::OpOperand operand : op->getOpOperands()) {\r\n```"", 'comment_created': datetime.datetime(2022, 12, 17, 17, 50, 18, tzinfo=datetime.timezone.utc), 'commenter': 'uenoku', 'type': 'User'}, {'comment_id': 1051435175, 'comment_body': 'ditto', 'comment_created': datetime.datetime(2022, 12, 17, 17, 50, 42, tzinfo=datetime.timezone.utc), 'commenter': 'uenoku', 'type': 'User'}, {'comment_id': 1051435403, 'comment_body': 'Can we use tablegen to define a pass? ', 'comment_created': datetime.datetime(2022, 12, 17, 17, 52, 33, tzinfo=datetime.timezone.utc), 'commenter': 'uenoku', 'type': 'User'}, {'comment_id': 1051435886, 'comment_body': 'Can we just print arg? \r\n```suggestion\r\n        // Argument of a different operation.\r\n        lec::dbgs << arg;\r\n```', 'comment_created': datetime.datetime(2022, 12, 17, 17, 55, 31, tzinfo=datetime.timezone.utc), 'commenter': 'uenoku', 'type': 'User'}, {'comment_id': 1068209477, 'comment_body': ""@frog-in-the-well Looks to me like there's an issue here - on my machine the build fails with z3 4.11.2. The problem seems to be that the variable `Z3_VERSION` is empty - both on my machine and in CI `circt-lec` doesn't build, and the message `Cannot build circt-lec with outdated Z3 version , requires 4.8.11.` is shown, with no outdated version number given. Does this need to be `Z3_VERSION_STRING`?"", 'comment_created': datetime.datetime(2023, 1, 12, 14, 44, 48, tzinfo=datetime.timezone.utc), 'commenter': 'TaoBi22', 'type': 'User'}, {'comment_id': 1068715884, 'comment_body': ""@TaoBi22 Thank you for the catch, it should be working now.\r\nI didn't expect that to be unset from https://github.com/llvm/llvm-project/blob/d6ab9cae4b689b51ad2c62ff5adce8e8f11c527b/llvm/cmake/modules/FindZ3.cmake#L124"", 'comment_created': datetime.datetime(2023, 1, 12, 22, 6, 31, tzinfo=datetime.timezone.utc), 'commenter': 'frog-in-the-well', 'type': 'User'}, {'comment_id': 1090238388, 'comment_body': 'You can use symbol table to look up module from the name. ', 'comment_created': datetime.datetime(2023, 1, 30, 7, 3, 29, tzinfo=datetime.timezone.utc), 'commenter': 'uenoku', 'type': 'User'}, {'comment_id': 1090238929, 'comment_body': 'comment', 'comment_created': datetime.datetime(2023, 1, 30, 7, 4, 24, tzinfo=datetime.timezone.utc), 'commenter': 'uenoku', 'type': 'User'}, {'comment_id': 1090239215, 'comment_body': 'Can we use `getOps<hw::ModuleOp>()`?', 'comment_created': datetime.datetime(2023, 1, 30, 7, 4, 49, tzinfo=datetime.timezone.utc), 'commenter': 'uenoku', 'type': 'User'}, {'comment_id': 1090240942, 'comment_body': 'Can we reduce unnecessary deps?', 'comment_created': datetime.datetime(2023, 1, 30, 7, 7, 53, tzinfo=datetime.timezone.utc), 'commenter': 'uenoku', 'type': 'User'}, {'comment_id': 1100393147, 'comment_body': 'It certainly seems like this is more dialects than actually handled.', 'comment_created': datetime.datetime(2023, 2, 8, 16, 32, 47, tzinfo=datetime.timezone.utc), 'commenter': 'darthscsi', 'type': 'User'}, {'comment_id': 1100401139, 'comment_body': ""If the operations were done via include table visitor pattern (see firrtl lexer, *ops.cpp, etc), having these macros makes sense.  But since they are only wrapping a couple lines of code, it doesn't seem worth it (see LowerToHW.cpp)."", 'comment_created': datetime.datetime(2023, 2, 8, 16, 39, 20, tzinfo=datetime.timezone.utc), 'commenter': 'darthscsi', 'type': 'User'}, {'comment_id': 1100402148, 'comment_body': 'If the comparison is not valid for n-state logic, then it should reject circuits which use it.', 'comment_created': datetime.datetime(2023, 2, 8, 16, 40, 9, tzinfo=datetime.timezone.utc), 'commenter': 'darthscsi', 'type': 'User'}, {'comment_id': 1100402886, 'comment_body': ""I'm assuming this also doesn't model n-state mux behavior."", 'comment_created': datetime.datetime(2023, 2, 8, 16, 40, 44, tzinfo=datetime.timezone.utc), 'commenter': 'darthscsi', 'type': 'User'}, {'comment_id': 1100405852, 'comment_body': 'appreciated, but generally not done in other sources which define it.', 'comment_created': datetime.datetime(2023, 2, 8, 16, 43, 7, tzinfo=datetime.timezone.utc), 'commenter': 'darthscsi', 'type': 'User'}, {'comment_id': 1100407354, 'comment_body': ""Since this is a pass, it needs to reset it's class members, since it could be reused by the pass manager."", 'comment_created': datetime.datetime(2023, 2, 8, 16, 44, 15, tzinfo=datetime.timezone.utc), 'commenter': 'darthscsi', 'type': 'User'}, {'comment_id': 1100407588, 'comment_body': 'That would be nice.', 'comment_created': datetime.datetime(2023, 2, 8, 16, 44, 27, tzinfo=datetime.timezone.utc), 'commenter': 'darthscsi', 'type': 'User'}, {'comment_id': 1100408767, 'comment_body': 'A reminder echoing a previous comment, passes need to clean up their state in case they get reused.  A common way around this is to put the stateful logic in one class and the pass logic in another so the pass proper has no state.', 'comment_created': datetime.datetime(2023, 2, 8, 16, 45, 22, tzinfo=datetime.timezone.utc), 'commenter': 'darthscsi', 'type': 'User'}, {'comment_id': 1100414767, 'comment_body': 'Adding globals are frowned upon by llvm coding standard.  Adding globals with constructors is not allowed.  https://llvm.org/docs/CodingStandards.html#do-not-use-static-constructors', 'comment_created': datetime.datetime(2023, 2, 8, 16, 50, 23, tzinfo=datetime.timezone.utc), 'commenter': 'darthscsi', 'type': 'User'}, {'comment_id': 1100416020, 'comment_body': 'command-line options should be passed to the pass from the tool as pass options.  There should not be coupling through globals.', 'comment_created': datetime.datetime(2023, 2, 8, 16, 51, 28, tzinfo=datetime.timezone.utc), 'commenter': 'darthscsi', 'type': 'User'}, {'comment_id': 1100417049, 'comment_body': 'just do the if in the code rather than making a macro.  Also the macro has to generic a name.', 'comment_created': datetime.datetime(2023, 2, 8, 16, 52, 21, tzinfo=datetime.timezone.utc), 'commenter': 'darthscsi', 'type': 'User'}, {'comment_id': 1100417721, 'comment_body': 'No, pass the values to the passes as pass options.', 'comment_created': datetime.datetime(2023, 2, 8, 16, 52, 55, tzinfo=datetime.timezone.utc), 'commenter': 'darthscsi', 'type': 'User'}, {'comment_id': 1100425581, 'comment_body': ""It's not clear that a pass is the appropriate abstraction here, since it depends on and modifies external state.  It isn't impossible, some other passes manipulate stream and file state.  Parsing, for example, is not a pass (yet export is)."", 'comment_created': datetime.datetime(2023, 2, 8, 16, 58, 44, tzinfo=datetime.timezone.utc), 'commenter': 'darthscsi', 'type': 'User'}, {'comment_id': 1117410755, 'comment_body': '`mlir::OpOperand` constructors are not accessible.', 'comment_created': datetime.datetime(2023, 2, 24, 17, 59, 12, tzinfo=datetime.timezone.utc), 'commenter': 'frog-in-the-well', 'type': 'User'}, {'comment_id': 1133078986, 'comment_body': 'Outdated because `LogicExporter` is no longer a pass.', 'comment_created': datetime.datetime(2023, 3, 11, 12, 37, 49, tzinfo=datetime.timezone.utc), 'commenter': 'frog-in-the-well', 'type': 'User'}, {'comment_id': 1133079396, 'comment_body': 'It was done mimicking [`circt-reduce`](https://github.com/llvm/circt/blob/main/tools/circt-reduce/circt-reduce.cpp#L26).\r\n', 'comment_created': datetime.datetime(2023, 3, 11, 12, 41, 11, tzinfo=datetime.timezone.utc), 'commenter': 'frog-in-the-well', 'type': 'User'}, {'comment_id': 1147972299, 'comment_body': ""I didn't know you could have multiple RUN lines spread around like this."", 'comment_created': datetime.datetime(2023, 3, 24, 19, 17, 42, tzinfo=datetime.timezone.utc), 'commenter': 'darthscsi', 'type': 'User'}, {'comment_id': 1147973245, 'comment_body': 'lec-circuit perhaps?', 'comment_created': datetime.datetime(2023, 3, 24, 19, 18, 52, tzinfo=datetime.timezone.utc), 'commenter': 'darthscsi', 'type': 'User'}, {'comment_id': 1147974027, 'comment_body': 'anyreason not to use llvm::dbgs for all these?', 'comment_created': datetime.datetime(2023, 3, 24, 19, 19, 44, tzinfo=datetime.timezone.utc), 'commenter': 'darthscsi', 'type': 'User'}, {'comment_id': 1147977239, 'comment_body': 'std::reduce?', 'comment_created': datetime.datetime(2023, 3, 24, 19, 23, 57, tzinfo=datetime.timezone.utc), 'commenter': 'darthscsi', 'type': 'User'}, {'comment_id': 1147978458, 'comment_body': ""Why are you adding a block?  I don't see any lifetimes it is constraining, unless INDENT is doing something."", 'comment_created': datetime.datetime(2023, 3, 24, 19, 25, 39, tzinfo=datetime.timezone.utc), 'commenter': 'darthscsi', 'type': 'User'}, {'comment_id': 1147979292, 'comment_body': 'It looks like you might be better off deriving from the HW and comb visitors.', 'comment_created': datetime.datetime(2023, 3, 24, 19, 26, 49, tzinfo=datetime.timezone.utc), 'commenter': 'darthscsi', 'type': 'User'}, {'comment_id': 1147979914, 'comment_body': 'Solver& presumably (and in constructor).  No reason for nullable pointers floating about.', 'comment_created': datetime.datetime(2023, 3, 24, 19, 27, 39, tzinfo=datetime.timezone.utc), 'commenter': 'darthscsi', 'type': 'User'}, {'comment_id': 1147980629, 'comment_body': ""inline isn't really needed on these static functions."", 'comment_created': datetime.datetime(2023, 3, 24, 19, 28, 33, tzinfo=datetime.timezone.utc), 'commenter': 'darthscsi', 'type': 'User'}, {'comment_id': 1147982387, 'comment_body': 'The visitors have fallback, default functions so you can implement this as a function in your visitor, no need to enumerate everything yourself.', 'comment_created': datetime.datetime(2023, 3, 24, 19, 30, 57, tzinfo=datetime.timezone.utc), 'commenter': 'darthscsi', 'type': 'User'}, {'comment_id': 1147984026, 'comment_body': 'nit: lots of excessive types are written out.  consider auto.', 'comment_created': datetime.datetime(2023, 3, 24, 19, 32, 54, tzinfo=datetime.timezone.utc), 'commenter': 'darthscsi', 'type': 'User'}, {'comment_id': 1147984272, 'comment_body': 'Or consider not using temporaries.', 'comment_created': datetime.datetime(2023, 3, 24, 19, 33, 13, tzinfo=datetime.timezone.utc), 'commenter': 'darthscsi', 'type': 'User'}, {'comment_id': 1147985359, 'comment_body': ""Why aren't you just dumping the ops rather than making functions and deconstructing them?"", 'comment_created': datetime.datetime(2023, 3, 24, 19, 34, 20, tzinfo=datetime.timezone.utc), 'commenter': 'darthscsi', 'type': 'User'}, {'comment_id': 1147986740, 'comment_body': 'If this is static, you can just use an std::array or C-style array.', 'comment_created': datetime.datetime(2023, 3, 24, 19, 36, 21, tzinfo=datetime.timezone.utc), 'commenter': 'darthscsi', 'type': 'User'}, {'comment_id': 1147987301, 'comment_body': ""If circuits didn't use raw pointers, this wouldn't be necessary."", 'comment_created': datetime.datetime(2023, 3, 24, 19, 37, 9, tzinfo=datetime.timezone.utc), 'commenter': 'darthscsi', 'type': 'User'}, {'comment_id': 1147987807, 'comment_body': 'add this to the initialization list.  `statisticsOpt(statisticsOpt)`', 'comment_created': datetime.datetime(2023, 3, 24, 19, 37, 56, tzinfo=datetime.timezone.utc), 'commenter': 'darthscsi', 'type': 'User'}, {'comment_id': 1147989013, 'comment_body': 'See point on array above.', 'comment_created': datetime.datetime(2023, 3, 24, 19, 39, 39, tzinfo=datetime.timezone.utc), 'commenter': 'darthscsi', 'type': 'User'}, {'comment_id': 1147989355, 'comment_body': 'This should be a runtime error, not just an assertion.  addCircuit is failing.', 'comment_created': datetime.datetime(2023, 3, 24, 19, 40, 9, tzinfo=datetime.timezone.utc), 'commenter': 'darthscsi', 'type': 'User'}, {'comment_id': 1147989851, 'comment_body': 'Is this normal output?  if so, then why dbgs?', 'comment_created': datetime.datetime(2023, 3, 24, 19, 40, 53, tzinfo=datetime.timezone.utc), 'commenter': 'darthscsi', 'type': 'User'}, {'comment_id': 1147990690, 'comment_body': '`if (auto arg = value.dyn_cast<BlockArgument>)`\r\nNo empty blocks.', 'comment_created': datetime.datetime(2023, 3, 24, 19, 41, 52, tzinfo=datetime.timezone.utc), 'commenter': 'darthscsi', 'type': 'User'}, {'comment_id': 1148034004, 'comment_body': 'This is not great.  It could be wrapped in a struct instead of a macro.', 'comment_created': datetime.datetime(2023, 3, 24, 20, 43, 29, tzinfo=datetime.timezone.utc), 'commenter': 'darthscsi', 'type': 'User'}, {'comment_id': 1150053570, 'comment_body': 'The idea is to represent the current instance nesting level through indentation; this is tracked over `lec::dbgs()`.', 'comment_created': datetime.datetime(2023, 3, 28, 5, 42, 6, tzinfo=datetime.timezone.utc), 'commenter': 'frog-in-the-well', 'type': 'User'}, {'comment_id': 1150054991, 'comment_body': 'Unfortunately `variadicOperation` is used to drive `comb.concat` and `comb.sub`, both of which are not commutative operations, so `std::reduce` is unsuitable.\r\n`std::accumulate` could be used instead, but I don’t believe it to have merits over the current implementation.', 'comment_created': datetime.datetime(2023, 3, 28, 5, 44, 43, tzinfo=datetime.timezone.utc), 'commenter': 'frog-in-the-well', 'type': 'User'}, {'comment_id': 1150056962, 'comment_body': 'Indeed `INDENT` works through RAII.', 'comment_created': datetime.datetime(2023, 3, 28, 5, 47, 23, tzinfo=datetime.timezone.utc), 'commenter': 'frog-in-the-well', 'type': 'User'}, {'comment_id': 1151477932, 'comment_body': 'Dumping only prints the ASM, but for debug purposes it is very useful to also see the `hash_value` for each operand and result value.', 'comment_created': datetime.datetime(2023, 3, 29, 7, 2, 38, tzinfo=datetime.timezone.utc), 'commenter': 'frog-in-the-well', 'type': 'User'}, {'comment_id': 1151537030, 'comment_body': ""I am aware and they're useful to lay out common fallback behavior, but in this case I need to specialize each implementation (with the `OP_NAME` parameter for instance) so I believe this approach to be appropriate."", 'comment_created': datetime.datetime(2023, 3, 29, 7, 58, 46, tzinfo=datetime.timezone.utc), 'commenter': 'frog-in-the-well', 'type': 'User'}, {'comment_id': 1151544332, 'comment_body': 'Those are indeed employed in `LogicExporter` class to handle visiting logic.', 'comment_created': datetime.datetime(2023, 3, 29, 8, 5, 3, tzinfo=datetime.timezone.utc), 'commenter': 'frog-in-the-well', 'type': 'User'}, {'comment_id': 1152850898, 'comment_body': ""Pointers were used because `Circuit` gets forward declared so `Solver` doesn't know their size."", 'comment_created': datetime.datetime(2023, 3, 30, 7, 35, 23, tzinfo=datetime.timezone.utc), 'commenter': 'frog-in-the-well', 'type': 'User'}, {'comment_id': 1152964427, 'comment_body': ""I would argue it's an assertion because it couldn't be triggered from user input. The LLVM Coding Standards manual recommends asserting preconditions and provides examples where they're used for bound checking. "", 'comment_created': datetime.datetime(2023, 3, 30, 9, 9, 9, tzinfo=datetime.timezone.utc), 'commenter': 'frog-in-the-well', 'type': 'User'}, {'comment_id': 1156165573, 'comment_body': 'nit: const reference is not necessary for values/operations (ref: https://mlir.llvm.org/docs/Rationale/UsageOfConst/)\r\n```suggestion\r\nstatic void debugOpResult(mlir::Value result) {\r\n```', 'comment_created': datetime.datetime(2023, 4, 3, 16, 5, 15, tzinfo=datetime.timezone.utc), 'commenter': 'uenoku', 'type': 'User'}, {'comment_id': 1158877857, 'comment_body': ""It's very cool that we can have these kinds of self-contained tests where we just logically compare two things to each other. Very exciting. I could totally see us use this pattern to verify canonicalizations and folders which aren't supposed to functionally change the circuit :star_struck: "", 'comment_created': datetime.datetime(2023, 4, 5, 18, 34, 4, tzinfo=datetime.timezone.utc), 'commenter': 'fabianschuiki', 'type': 'User'}, {'comment_id': 1158888470, 'comment_body': ""I'm curious if this would be something that's worth upstreaming to MLIR at a later point. Seems useful in general."", 'comment_created': datetime.datetime(2023, 4, 5, 18, 41, 53, tzinfo=datetime.timezone.utc), 'commenter': 'fabianschuiki', 'type': 'User'}, {'comment_id': 1158895018, 'comment_body': ""I like that this exporter is reusable. Depending on the sat problem we're trying to solve, I could see different tools using this `LogicExporter` to get the main Z3 mapping out of the way, and then have special handling for things like registers (e.g. to handle differences between bounded model checks and inductive proofs).\r\n\r\nWe might be able to save on some repetition by moving `Visitor` into the `LogicExporter.cpp` file and pulling all function bodies into the `struct Visitor` declaration. Just some nitpicking though, no need to change this PR."", 'comment_created': datetime.datetime(2023, 4, 5, 18, 49, 18, tzinfo=datetime.timezone.utc), 'commenter': 'fabianschuiki', 'type': 'User'}, {'comment_id': 1158901099, 'comment_body': 'One way to avoid the macro could be to have just a `circuit-perform` function that is overloaded for the different ops, and use the type system to switch between them. That still leaves the problem that the `visitComb` function bodies share a lot of code. You could have a templated function like `template <class ConcreteOp> LogicalResult visitVariadicCombOp(ConcreteOp op)` that you call from `visitComb`, and which then contains the common code.\r\n\r\nBut I think this is definitely something we can tweak and iterate on after this PR has landed, since having all of this available in the codebase is already extremely useful. And people will want to iterate and tweak and improve and extend things anyway :+1: ', 'comment_created': datetime.datetime(2023, 4, 5, 18, 55, 55, tzinfo=datetime.timezone.utc), 'commenter': 'fabianschuiki', 'type': 'User'}, {'comment_id': 1158905338, 'comment_body': 'After this PR lands, we could look into turning this into something like `getCircuitA` and `getCircuitB`, since the solver has this `Circuit *circuit[2]` member that really forces two circuits to be present. Having `addCircuit` makes it easy to abuse the solver by not having exactly two calls to `addCircuit`. Just some random thoughts on future refactorings.', 'comment_created': datetime.datetime(2023, 4, 5, 19, 0, 23, tzinfo=datetime.timezone.utc), 'commenter': 'fabianschuiki', 'type': 'User'}, {'comment_id': 1158910938, 'comment_body': 'Very cool. I love that CIRCT has gotten to a point where we can have a tool print this help output :sunglasses: ', 'comment_created': datetime.datetime(2023, 4, 5, 19, 7, 5, tzinfo=datetime.timezone.utc), 'commenter': 'fabianschuiki', 'type': 'User'}]","[{'commit_sha': 'f52dd6e391e9d008ec6d77cd24a5cffaf594c5fd', 'committer_username': 'frog-in-the-well', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2022, 6, 3, 17, 55, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd3ca95a04be878c71065c0517b3afc76eef9a7cb', 'committer_username': 'frog-in-the-well', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2022, 6, 3, 17, 55, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ca36d01964f74bfd5432e1e339c40d43a6f21f9d', 'committer_username': 'frog-in-the-well', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2022, 6, 3, 17, 55, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': '74ae51b8e7f06773415aec193945bc6f98c4244b', 'committer_username': 'frog-in-the-well', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2022, 6, 3, 17, 55, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ae04de2a4717b48a9ba6307681100bca885f696a', 'committer_username': 'frog-in-the-well', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2022, 6, 3, 17, 55, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': '743b41dd717a151badccc1dc9077b370ce330d23', 'committer_username': 'frog-in-the-well', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2022, 6, 3, 17, 55, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b295bac01501b9aa8efd2e5259f99b1c664e6ed2', 'committer_username': 'frog-in-the-well', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2022, 6, 3, 17, 55, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd926e544e74a14616d13d4db5d2988704b0d6012', 'committer_username': 'frog-in-the-well', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2022, 6, 3, 17, 55, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': '63f2e1298ec7e8407e0f0fe726b7aec1b3228653', 'committer_username': 'frog-in-the-well', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2022, 6, 3, 17, 55, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': '76970302900b1b2ceb956dfdb595a0217410daac', 'committer_username': 'frog-in-the-well', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2022, 6, 3, 17, 55, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': '79d5d1ddb1473bc91421e5c53f8531f3cdedc8b3', 'committer_username': 'frog-in-the-well', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2022, 6, 3, 17, 55, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': '75a3ae0528f35c88fcfa8433a6b042d315861850', 'committer_username': 'frog-in-the-well', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2022, 6, 3, 17, 55, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': '16fd18db6d9861b2f0d7d3cb306c91f7e0eed544', 'committer_username': 'frog-in-the-well', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2022, 6, 3, 17, 55, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3087f811e58a454e6c9e0ac995549bb69924c30d', 'committer_username': 'frog-in-the-well', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2022, 6, 3, 17, 55, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6e36bb1ea88f7baa6ae8d08dcece6afb6e137349', 'committer_username': 'frog-in-the-well', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2022, 6, 3, 17, 55, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3626a41a9e502c79b6ae5f15ea173f56471765cd', 'committer_username': 'frog-in-the-well', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2022, 6, 3, 17, 55, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c762ee115aec42edceeb56c6d2c2e8f6f3576473', 'committer_username': 'frog-in-the-well', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2022, 6, 3, 17, 55, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8f4ac6845b405b15c178d07dad72e9218e1700a3', 'committer_username': 'frog-in-the-well', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2022, 6, 3, 17, 55, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2b5d3db5dc1bc2bfc22f1f43487459487247b16f', 'committer_username': 'frog-in-the-well', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2022, 6, 3, 17, 55, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dbcfb502fa8814bdf276fa7531b9b0c363918bac', 'committer_username': 'frog-in-the-well', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2022, 6, 3, 17, 55, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7fdcec5f700efd436c45a39beb4a8e23a9c1f65c', 'committer_username': 'frog-in-the-well', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2022, 6, 3, 17, 55, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd80f9d7c7bfd6c5e37baa85f564ba4080f917e91', 'committer_username': 'frog-in-the-well', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2022, 6, 3, 17, 55, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8515594bc5b34e5dc4fd02246be9bf8115c22d08', 'committer_username': 'frog-in-the-well', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2022, 6, 3, 17, 55, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd6cc972f55718424fe3844a25f68309b84d11b3f', 'committer_username': 'frog-in-the-well', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2022, 6, 3, 17, 55, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0bb2973bc0c0c1bbfac2f9375f57be8e00cd6237', 'committer_username': 'frog-in-the-well', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2022, 6, 3, 17, 55, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': '993c834a58df4e061274503935b5cfddf7234da4', 'committer_username': 'frog-in-the-well', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2022, 6, 3, 17, 55, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e52f2270d1499db38514c8239f4c78b5acf9c328', 'committer_username': 'frog-in-the-well', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2022, 6, 3, 17, 55, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4ce5155f4dde7ae8652de364a6835a65147f6289', 'committer_username': 'frog-in-the-well', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2022, 6, 3, 17, 55, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7e3d7bee9277012bb76eb66dd6742f1a105cc2e3', 'committer_username': 'frog-in-the-well', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2022, 6, 3, 17, 55, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': '351eaede84a4f86f7c11991061d4906c5584516e', 'committer_username': 'frog-in-the-well', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2022, 6, 3, 17, 55, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4391f242d7ed789cafec0910a59357b5ffcd2909', 'committer_username': 'frog-in-the-well', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2022, 6, 3, 17, 55, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': '97a8c2f9b1048466b05cef0436d6588afa19b129', 'committer_username': 'frog-in-the-well', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2022, 6, 3, 17, 55, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3852499245b1f8dc7a1287d149b3040a0743b8d9', 'committer_username': 'frog-in-the-well', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2022, 6, 3, 17, 55, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4921d850c732efe8a301317a6487f463d3fa42f4', 'committer_username': 'frog-in-the-well', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2022, 6, 3, 17, 55, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6d4869c76f78c659dc0abca7d3705978a716f0bd', 'committer_username': 'frog-in-the-well', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2022, 6, 3, 17, 55, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c0d1f3436d7bbeb76d96d53cde8d6889706d1362', 'committer_username': 'frog-in-the-well', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2022, 6, 3, 17, 55, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': '41dd724e115b2e149db9c31e9b25831f76b7f06b', 'committer_username': 'frog-in-the-well', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2022, 6, 3, 17, 55, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': '96f5fee1c4dcef48dc1801dfab175813c2d54528', 'committer_username': 'frog-in-the-well', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2022, 6, 3, 17, 55, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': '20866dc1ff93742338a3740abff8da2a5b92a53b', 'committer_username': 'frog-in-the-well', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2022, 6, 3, 17, 55, 33, tzinfo=datetime.timezone.utc)}]",,106834163,,User,,3,,0,0

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
245072514,circt,llvm/circt,C++,279,1605,252,119,8724,791,333,137,"[{'id': 1065975523, 'number': 3991, 'closed': datetime.datetime(2023, 5, 1, 16, 2, 21, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 9, 24, 7, 46, 52, tzinfo=datetime.timezone.utc), 'time_taken': 18951329.0, 'time_delta': '219 days, 8:15:29', 'additions': 2075, 'deletions': 1, 'state': 'closed'}]"
