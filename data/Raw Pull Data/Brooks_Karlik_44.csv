pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
433634997,"GSOC 2020: Code cleanup, Updating dependencies, and moving to rust 2018 idioms","This PR bumps many of the dependencies and updates much of the code to use rust 2018 idioms. This makes reading and reasoning about the code easier, especially in the areas of imports. 

Previously, main.rs used the following 2015 syntax:

https://github.com/matrix-org/matrix-ircd/blob/624a5256602af7a88a7e69966e2e38523a970480/src/main.rs#L18-L49

and modules would use macros in the following way:

https://github.com/matrix-org/matrix-ircd/blob/624a5256602af7a88a7e69966e2e38523a970480/src/irc/protocol.rs#L281-L294

Now, the imports are more abbreviated and the function / macro calls throughout the codebase are more explicit as they are now required to be explicitly imported in each file or use `module::macro!()` syntax. main.rs cargo crate imports are now able to be abbreviated to:

```
use tokio_core;
use tokio_tls;
use slog_async;
use slog_term;
use url;
use lazy_static;
use clap;
use tasked_futures;
use native_tls;
```
",True,64,https://api.github.com/repos/matrix-org/matrix-ircd/pulls/64,https://github.com/matrix-org/matrix-ircd/pull/64,closed,1257,777,16,4,0,11,0,0,[],2020-06-12 11:50:35+00:00,2020-06-18 10:36:35+00:00,513960.0,"5 days, 22:46:00","[{'comment_id': 441715269, 'comment_body': 'AFAIK these are all redundant.', 'comment_created': datetime.datetime(2020, 6, 17, 17, 37, 30, tzinfo=datetime.timezone.utc), 'commenter': 'jplatte', 'type': 'User'}, {'comment_id': 441715898, 'comment_body': 'Thanks for updating this to use `lazy_static!`, but why did you leave a commented-out version of the same code in?', 'comment_created': datetime.datetime(2020, 6, 17, 17, 38, 33, tzinfo=datetime.timezone.utc), 'commenter': 'jplatte', 'type': 'User'}, {'comment_id': 441716535, 'comment_body': ""I guess CI doesn't yet check formatting and the code base isn't fully rustfmt'ed anyway, but please try not to introduce arbitrary extra newlines."", 'comment_created': datetime.datetime(2020, 6, 17, 17, 39, 42, tzinfo=datetime.timezone.utc), 'commenter': 'jplatte', 'type': 'User'}, {'comment_id': 441998326, 'comment_body': 'Updated this in a later commit but it wasnt included in this PR. I fixed this but accidentally included it in the rustfmt commit.', 'comment_created': datetime.datetime(2020, 6, 18, 6, 35, 15, tzinfo=datetime.timezone.utc), 'commenter': 'VanillaBrooks', 'type': 'User'}, {'comment_id': 441999982, 'comment_body': 'Originally missed this since my `rustfmt` runs in the background and was working as expected. After manually running it there are 6/8 invalid config options in `rustfmt.toml` and an invalid value for `fn_args_layout`.\r\n\r\nI tried to look at modern updates for the configs but I either could not find them or they were unstable. \r\n\r\nI committed formatted files, but if you think this is a significant change we can discuss in an issue perhaps ?', 'comment_created': datetime.datetime(2020, 6, 18, 6, 39, 43, tzinfo=datetime.timezone.utc), 'commenter': 'VanillaBrooks', 'type': 'User'}, {'comment_id': 442128244, 'comment_body': ""This is [the default](https://github.com/rust-lang/rustfmt/blob/rust-1.45/Configurations.md#fn_args_layout), so we don't need to specify it manually."", 'comment_created': datetime.datetime(2020, 6, 18, 10, 29, 15, tzinfo=datetime.timezone.utc), 'commenter': 'jplatte', 'type': 'User'}, {'comment_id': 442130436, 'comment_body': ""This module can probably be replaced by `futures`' implementation in a subsequent PR."", 'comment_created': datetime.datetime(2020, 6, 18, 10, 33, 38, tzinfo=datetime.timezone.utc), 'commenter': 'jplatte', 'type': 'User'}, {'comment_id': 442138964, 'comment_body': 'Are you referring to `futures::stream::fold` ? I actually just noticed it existed, converting it without a significant rewrite would be tricky due to how `StreamFold` currently returns the stream which is not possible with `Pin`. Good info!', 'comment_created': datetime.datetime(2020, 6, 18, 10, 50, 18, tzinfo=datetime.timezone.utc), 'commenter': 'VanillaBrooks', 'type': 'User'}, {'comment_id': 442139526, 'comment_body': 'I saw that. I thought it would be good to be explicit due to the other removals', 'comment_created': datetime.datetime(2020, 6, 18, 10, 51, 28, tzinfo=datetime.timezone.utc), 'commenter': 'VanillaBrooks', 'type': 'User'}, {'comment_id': 442141058, 'comment_body': ""I don't much care either way :shrug: "", 'comment_created': datetime.datetime(2020, 6, 18, 10, 54, 41, tzinfo=datetime.timezone.utc), 'commenter': 'jplatte', 'type': 'User'}, {'comment_id': 442141265, 'comment_body': ""Okay. I didn't look at this module in detail. If it's hard to replace, let's keep it around for now."", 'comment_created': datetime.datetime(2020, 6, 18, 10, 55, 6, tzinfo=datetime.timezone.utc), 'commenter': 'jplatte', 'type': 'User'}]","[{'commit_sha': 'a40a75a09f5f4124223d0212428ce8a7829d9c8e', 'committer_username': 'VanillaBrooks', 'committer_name': 'brooks', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 17, 21, 47, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': '70a42172992af72db6ba9b0f2ab90387aacbb756', 'committer_username': 'VanillaBrooks', 'committer_name': 'brooks', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 17, 21, 47, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': '47c3c4ed0aaa7339af2c6964fc892178bd53d81c', 'committer_username': 'VanillaBrooks', 'committer_name': 'brooks', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 17, 21, 47, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4150efc4ccf150154d6868ec5b6f8818c2e6498c', 'committer_username': 'VanillaBrooks', 'committer_name': 'brooks', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 17, 21, 47, 20, tzinfo=datetime.timezone.utc)}]",brooks,45132001,,User,,60,,52,14
435081901,GSCO 2020: Swap travis-ci to stable rust,"Signed-off-by: VanillaBrooks <brooks@karlik.org>

There are currently no nightly features used in matrix-ircd. This PR changes the CI build to use stable rust instead of nightly due to PR #64 not compiling correctly correctly.",True,65,https://api.github.com/repos/matrix-org/matrix-ircd/pulls/65,https://github.com/matrix-org/matrix-ircd/pull/65,closed,3,1,2,3,0,2,0,0,[],2020-06-16 09:14:12+00:00,2020-06-17 08:46:26+00:00,84734.0,23:32:14,"[{'comment_id': 440827903, 'comment_body': ""There's a trailing space here. Seems to not affect anything, but it should probably not be there."", 'comment_created': datetime.datetime(2020, 6, 16, 12, 57, 4, tzinfo=datetime.timezone.utc), 'commenter': 'jplatte', 'type': 'User'}, {'comment_id': 441295666, 'comment_body': 'updated it', 'comment_created': datetime.datetime(2020, 6, 17, 5, 51, 24, tzinfo=datetime.timezone.utc), 'commenter': 'VanillaBrooks', 'type': 'User'}]","[{'commit_sha': '7364d624bf687f0debd95ce7992b5fce133e8784', 'committer_username': 'VanillaBrooks', 'committer_name': 'brooks', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 17, 21, 47, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2b21823bb8a9a02664138d100864b4e83ad4fe19', 'committer_username': 'VanillaBrooks', 'committer_name': 'brooks', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 17, 21, 47, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e60b9d26fa09232e4d5ba035eb8276eba59e1b1d', 'committer_username': 'VanillaBrooks', 'committer_name': 'brooks', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 17, 21, 47, 20, tzinfo=datetime.timezone.utc)}]",brooks,45132001,,User,,60,,52,14
440263537,GSOC 2020: Add additional test coverage for matrix / http implementations,This pr adds some additional tests to the matrix module to ensure that the correct http requests are being called with each. The overall test coverage is approximately doubled with these additions.,True,66,https://api.github.com/repos/matrix-org/matrix-ircd/pulls/66,https://github.com/matrix-org/matrix-ircd/pull/66,closed,1350,660,5,8,6,8,0,0,[],2020-06-25 21:20:14+00:00,2020-07-03 09:18:19+00:00,647885.0,"7 days, 11:58:05","[{'comment_id': 447318134, 'comment_body': 'I would be nice to get rid of this. I tried without the sleeps and it seems to work just fine, can you confirm that?', 'comment_created': datetime.datetime(2020, 6, 29, 23, 34, 46, tzinfo=datetime.timezone.utc), 'commenter': 'phlmn', 'type': 'User'}, {'comment_id': 447319483, 'comment_body': 'What happened to the query part?', 'comment_created': datetime.datetime(2020, 6, 29, 23, 38, 49, tzinfo=datetime.timezone.utc), 'commenter': 'phlmn', 'type': 'User'}, {'comment_id': 447320434, 'comment_body': 'This looks weird without a blank line before this line', 'comment_created': datetime.datetime(2020, 6, 29, 23, 41, 53, tzinfo=datetime.timezone.utc), 'commenter': 'phlmn', 'type': 'User'}, {'comment_id': 447598325, 'comment_body': ""I've never seen `println!` used with curly (or square) braces. Please use regular braces."", 'comment_created': datetime.datetime(2020, 6, 30, 11, 2, 28, tzinfo=datetime.timezone.utc), 'commenter': 'jplatte', 'type': 'User'}, {'comment_id': 447598692, 'comment_body': 'Same here.', 'comment_created': datetime.datetime(2020, 6, 30, 11, 3, 14, tzinfo=datetime.timezone.utc), 'commenter': 'jplatte', 'type': 'User'}, {'comment_id': 448133137, 'comment_body': 'This was an issue that happened when spawning the futures instead of using `core.run()`. I have removed it since we no longer spawn them.', 'comment_created': datetime.datetime(2020, 7, 1, 6, 2, 15, tzinfo=datetime.timezone.utc), 'commenter': 'VanillaBrooks', 'type': 'User'}, {'comment_id': 448142048, 'comment_body': 'Good catch! This is left over from me trying to figure out why http requests were not correctly being made and I forgot to remove it. I actually noticed this was a problem yesterday when the async / await tests didnt work correctly.', 'comment_created': datetime.datetime(2020, 7, 1, 6, 28, 6, tzinfo=datetime.timezone.utc), 'commenter': 'VanillaBrooks', 'type': 'User'}, {'comment_id': 448143494, 'comment_body': 'Fixed. I checked rustfmt for an option to force parenthesis for `println` but it doesnt appear to exist. This might come up in the future but ill try to catch them before the PR.', 'comment_created': datetime.datetime(2020, 7, 1, 6, 31, 38, tzinfo=datetime.timezone.utc), 'commenter': 'VanillaBrooks', 'type': 'User'}]","[{'commit_sha': 'a40a75a09f5f4124223d0212428ce8a7829d9c8e', 'committer_username': 'VanillaBrooks', 'committer_name': 'brooks', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 17, 21, 47, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': '70a42172992af72db6ba9b0f2ab90387aacbb756', 'committer_username': 'VanillaBrooks', 'committer_name': 'brooks', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 17, 21, 47, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ac6c76e47e27ccbc18a84e3912247563d0b34836', 'committer_username': 'VanillaBrooks', 'committer_name': 'brooks', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 17, 21, 47, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': '272e39c919bee0eb34204d8a28ef58c523edcb53', 'committer_username': 'VanillaBrooks', 'committer_name': 'brooks', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 17, 21, 47, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': '99af5b4ab79b6e6a710624c3f5ba7a58488ff3c6', 'committer_username': 'VanillaBrooks', 'committer_name': 'brooks', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 17, 21, 47, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': '142f08da6145856ccbdf5ae8e778665a2f5d405e', 'committer_username': 'VanillaBrooks', 'committer_name': 'brooks', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 17, 21, 47, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': '08ea7ae4c4243ee54899a39b6899eb2f655dc93e', 'committer_username': 'VanillaBrooks', 'committer_name': 'brooks', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 17, 21, 47, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd0a666ccf3c22661912045f43d9cfb7e7cad2aa0', 'committer_username': 'VanillaBrooks', 'committer_name': 'brooks', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 17, 21, 47, 20, tzinfo=datetime.timezone.utc)}]",brooks,45132001,,User,,60,,52,14
442507555,GSOC 2020: Migrate http / matrix implementations to futures 0.3,"This PR swaps the http.rs implementation to use hyper for more readable and reliable http requests. Additionally, the matrix module is also updated to futures 0.3 so that async / await can be used in `bridge/mod.rs` in a future PR. ",True,67,https://api.github.com/repos/matrix-org/matrix-ircd/pulls/67,https://github.com/matrix-org/matrix-ircd/pull/67,closed,1191,1561,8,6,3,6,0,0,[],2020-07-01 07:43:14+00:00,2020-07-13 13:58:36+00:00,1059322.0,"12 days, 6:15:22","[{'comment_id': 448179363, 'comment_body': 'In order to remove the `.unwrap()`s from `join_room()` I unified all the error possibilities under one type. Previously this was done by many `.map_err()`s, and I thought this made things more readable. Thoughts on this? ', 'comment_created': datetime.datetime(2020, 7, 1, 7, 47, 10, tzinfo=datetime.timezone.utc), 'commenter': 'VanillaBrooks', 'type': 'User'}, {'comment_id': 449062829, 'comment_body': 'All these new imports are redundant. Why did you add them?', 'comment_created': datetime.datetime(2020, 7, 2, 14, 57, 5, tzinfo=datetime.timezone.utc), 'commenter': 'jplatte', 'type': 'User'}, {'comment_id': 449063144, 'comment_body': 'Why is this import all the way down here?', 'comment_created': datetime.datetime(2020, 7, 2, 14, 57, 36, tzinfo=datetime.timezone.utc), 'commenter': 'jplatte', 'type': 'User'}, {'comment_id': 449252120, 'comment_body': 'These are issues that were solved in a previous PR, I have not rebased correctly so you are seeing ~5 (?) commits that have previously been pulled. Ill work on sorting this out.', 'comment_created': datetime.datetime(2020, 7, 2, 20, 31, 59, tzinfo=datetime.timezone.utc), 'commenter': 'VanillaBrooks', 'type': 'User'}, {'comment_id': 452212177, 'comment_body': ""I think that's fine"", 'comment_created': datetime.datetime(2020, 7, 9, 13, 21, 21, tzinfo=datetime.timezone.utc), 'commenter': 'phlmn', 'type': 'User'}, {'comment_id': 452212575, 'comment_body': '@VanillaBrooks could you move this to the other imports?', 'comment_created': datetime.datetime(2020, 7, 9, 13, 21, 54, tzinfo=datetime.timezone.utc), 'commenter': 'phlmn', 'type': 'User'}]","[{'commit_sha': 'd8cddd532c7692b9eb5e72a72062c9b10d551bf7', 'committer_username': 'VanillaBrooks', 'committer_name': 'brooks', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 17, 21, 47, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6a308d0835932f6d110d3b488b5d1696e4f333d0', 'committer_username': 'VanillaBrooks', 'committer_name': 'brooks', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 17, 21, 47, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5ca17099e040d217d66747200e4fe0373e2e9ab1', 'committer_username': 'VanillaBrooks', 'committer_name': 'brooks', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 17, 21, 47, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0878a7436c194e61a47b9537577803f8162577a4', 'committer_username': 'VanillaBrooks', 'committer_name': 'brooks', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 17, 21, 47, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': '039e5f40fe47e00fba2a45f504270f4a28daf592', 'committer_username': 'VanillaBrooks', 'committer_name': 'brooks', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 17, 21, 47, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'caf5fcc94083d600f031b9046eca9cf224fb6019', 'committer_username': 'VanillaBrooks', 'committer_name': 'brooks', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 17, 21, 47, 20, tzinfo=datetime.timezone.utc)}]",brooks,45132001,,User,,60,,52,14
449546663,"GSOC 2020: Port bridge / irc modules to async / await, remove futures 0.1 dependencies",,True,71,https://api.github.com/repos/matrix-org/matrix-ircd/pulls/71,https://github.com/matrix-org/matrix-ircd/pull/71,closed,825,1126,10,17,2,52,0,0,[],2020-07-15 15:10:52+00:00,2020-07-27 19:52:01+00:00,1053669.0,"12 days, 4:41:09","[{'comment_id': 456580076, 'comment_body': 'previously these were used with the custom http implementation, but since `url::Url` and is later converted to `hyper::Uri`, i think these are safe to remove.', 'comment_created': datetime.datetime(2020, 7, 17, 17, 34, 44, tzinfo=datetime.timezone.utc), 'commenter': 'VanillaBrooks', 'type': 'User'}, {'comment_id': 456583083, 'comment_body': 'A lot of these function signatures are changing from rustfmt and I dont know why', 'comment_created': datetime.datetime(2020, 7, 17, 17, 40, 49, tzinfo=datetime.timezone.utc), 'commenter': 'VanillaBrooks', 'type': 'User'}, {'comment_id': 456583167, 'comment_body': 'same here', 'comment_created': datetime.datetime(2020, 7, 17, 17, 40, 59, tzinfo=datetime.timezone.utc), 'commenter': 'VanillaBrooks', 'type': 'User'}, {'comment_id': 456583174, 'comment_body': 'Instead of adding that comment, could you rewrite this and any other occurrences of the `<expr>.ok();` pattern to `let _ = <expr>;`, which is the standard way of saying ""ignore result of <expr>"" in Rust?', 'comment_created': datetime.datetime(2020, 7, 17, 17, 41, 1, tzinfo=datetime.timezone.utc), 'commenter': 'jplatte', 'type': 'User'}, {'comment_id': 456585181, 'comment_body': 'These can also probably be removed', 'comment_created': datetime.datetime(2020, 7, 17, 17, 45, 4, tzinfo=datetime.timezone.utc), 'commenter': 'VanillaBrooks', 'type': 'User'}, {'comment_id': 456585614, 'comment_body': 'remove this', 'comment_created': datetime.datetime(2020, 7, 17, 17, 45, 51, tzinfo=datetime.timezone.utc), 'commenter': 'VanillaBrooks', 'type': 'User'}, {'comment_id': 456585683, 'comment_body': 'Extra newline seems pointless.', 'comment_created': datetime.datetime(2020, 7, 17, 17, 45, 59, tzinfo=datetime.timezone.utc), 'commenter': 'jplatte', 'type': 'User'}, {'comment_id': 456585758, 'comment_body': 'Please move this up to the other `std` imports.', 'comment_created': datetime.datetime(2020, 7, 17, 17, 46, 9, tzinfo=datetime.timezone.utc), 'commenter': 'jplatte', 'type': 'User'}, {'comment_id': 456585942, 'comment_body': 'Why change the task local into a thread local?', 'comment_created': datetime.datetime(2020, 7, 17, 17, 46, 32, tzinfo=datetime.timezone.utc), 'commenter': 'jplatte', 'type': 'User'}, {'comment_id': 456586659, 'comment_body': 'Would be good for readability to shorten `futures::future` into just `future` by `use`ing `futures::future` at the start of the file.', 'comment_created': datetime.datetime(2020, 7, 17, 17, 47, 54, tzinfo=datetime.timezone.utc), 'commenter': 'jplatte', 'type': 'User'}, {'comment_id': 456586979, 'comment_body': 'Yeah, sounds good.', 'comment_created': datetime.datetime(2020, 7, 17, 17, 48, 34, tzinfo=datetime.timezone.utc), 'commenter': 'jplatte', 'type': 'User'}, {'comment_id': 456587598, 'comment_body': 'Why extra newlines between `std` imports?', 'comment_created': datetime.datetime(2020, 7, 17, 17, 49, 43, tzinfo=datetime.timezone.utc), 'commenter': 'jplatte', 'type': 'User'}, {'comment_id': 456588128, 'comment_body': ""Potentially the codebase just wasn't `rustfmt`ed before. I've thought this for some other bits of code. Don't worry about it."", 'comment_created': datetime.datetime(2020, 7, 17, 17, 50, 42, tzinfo=datetime.timezone.utc), 'commenter': 'jplatte', 'type': 'User'}, {'comment_id': 456588906, 'comment_body': 'remove', 'comment_created': datetime.datetime(2020, 7, 17, 17, 52, 17, tzinfo=datetime.timezone.utc), 'commenter': 'VanillaBrooks', 'type': 'User'}, {'comment_id': 456590823, 'comment_body': 'add this back', 'comment_created': datetime.datetime(2020, 7, 17, 17, 55, 38, tzinfo=datetime.timezone.utc), 'commenter': 'VanillaBrooks', 'type': 'User'}, {'comment_id': 456594749, 'comment_body': ""I believe `.await` will replicate how the `self.stop()` call to `taskedfutures` work based on eric's explanation but this needs to be tested before merging to master"", 'comment_created': datetime.datetime(2020, 7, 17, 18, 2, 56, tzinfo=datetime.timezone.utc), 'commenter': 'VanillaBrooks', 'type': 'User'}, {'comment_id': 456595823, 'comment_body': 'Some of these are probably unnecessary, ill have to check since this was a copy paste from the matrix module', 'comment_created': datetime.datetime(2020, 7, 17, 18, 5, 5, tzinfo=datetime.timezone.utc), 'commenter': 'VanillaBrooks', 'type': 'User'}, {'comment_id': 456599470, 'comment_body': ""I mentioned this on matrix but no one really got back to me on it. Ill copy paste it here so its more open:\r\n\r\nsince `futures::task_local!` does not exist in `futures` 0.3 I'm using `tokio::task_local!`, but there is one notable difference in that you no longer set the default value:\r\n\r\n```\r\nfutures::task_local!{\r\n    static CONTEXT: RefCell<Option<ConnectionContext>> = RefCell::new(None);\r\n}\r\n```\r\nbecomes:\r\n\r\n```\r\ntokio::task_local!{\r\n    static CONTEXT: RefCell<Option<ConnectionContext>>;\r\n}\r\n```\r\nRunning the tests from my branch here gives the error:\r\n\r\n```\r\n'cannot access a Task Local Storage value without setting it via `LocalKey::set`: AccessError'\r\n```\r\nbut I dont see a `LocalKey::set` anywhere in the `tokio` docs. It looks like in [the source code](https://docs.rs/tokio/0.2.21/src/tokio/task/task_local.rs.html#34-46) `tokio` uses `std::thread_local!`, is it safe to use this as a replacement?\r\n"", 'comment_created': datetime.datetime(2020, 7, 17, 18, 13, 9, tzinfo=datetime.timezone.utc), 'commenter': 'VanillaBrooks', 'type': 'User'}, {'comment_id': 456600036, 'comment_body': 'Ill look into adding it to the ci', 'comment_created': datetime.datetime(2020, 7, 17, 18, 14, 25, tzinfo=datetime.timezone.utc), 'commenter': 'VanillaBrooks', 'type': 'User'}, {'comment_id': 456604980, 'comment_body': 'This did not get ported since I check that all fields are filled before exiting the `StreamFold`, whereas this version allows the password field to stay `None` until later. Will update for this', 'comment_created': datetime.datetime(2020, 7, 17, 18, 24, 57, tzinfo=datetime.timezone.utc), 'commenter': 'VanillaBrooks', 'type': 'User'}, {'comment_id': 456951808, 'comment_body': 'Is this still used? We certainly want to get rid of it.', 'comment_created': datetime.datetime(2020, 7, 19, 20, 27, 26, tzinfo=datetime.timezone.utc), 'commenter': 'phlmn', 'type': 'User'}, {'comment_id': 456952355, 'comment_body': 'yeah, logging here would be really nice', 'comment_created': datetime.datetime(2020, 7, 19, 20, 32, 42, tzinfo=datetime.timezone.utc), 'commenter': 'phlmn', 'type': 'User'}, {'comment_id': 456959195, 'comment_body': 'Could you add a simple log here?', 'comment_created': datetime.datetime(2020, 7, 19, 21, 44, 48, tzinfo=datetime.timezone.utc), 'commenter': 'phlmn', 'type': 'User'}, {'comment_id': 456959351, 'comment_body': ""Just add simple logs here, then it's done :)"", 'comment_created': datetime.datetime(2020, 7, 19, 21, 46, 16, tzinfo=datetime.timezone.utc), 'commenter': 'phlmn', 'type': 'User'}, {'comment_id': 456959491, 'comment_body': 'What is this doing here?', 'comment_created': datetime.datetime(2020, 7, 19, 21, 47, 58, tzinfo=datetime.timezone.utc), 'commenter': 'phlmn', 'type': 'User'}, {'comment_id': 458010605, 'comment_body': ""This is a method to set the state for `crate::CONTEXT` when using `tokio::task_local!` as a replacement for `futures::task_local!` since the `tokio` version doesn't provide default state. [docs here](https://docs.rs/tokio/0.2.21/tokio/task/struct.LocalKey.html#method.scope).  I never actually got this to work, so i switched to `std::thread_local!`. There's an unresolved discussion about this above, but for now ill remove this dead code."", 'comment_created': datetime.datetime(2020, 7, 21, 10, 56, 46, tzinfo=datetime.timezone.utc), 'commenter': 'VanillaBrooks', 'type': 'User'}, {'comment_id': 458012583, 'comment_body': 'Not used, good catch', 'comment_created': datetime.datetime(2020, 7, 21, 11, 0, 37, tzinfo=datetime.timezone.utc), 'commenter': 'VanillaBrooks', 'type': 'User'}, {'comment_id': 458052507, 'comment_body': 'Oh, sorry, I guess I misread this. If we actually do something on `Err` (run `task_warn` in this case), that shouldn\'t be a `map_err` at all, instead you can use `if self.matrix_client.send_text_message(room_id, text).await.is_err() { task_warn!(""Failed to send""); }`.', 'comment_created': datetime.datetime(2020, 7, 21, 12, 19, 35, tzinfo=datetime.timezone.utc), 'commenter': 'jplatte', 'type': 'User'}, {'comment_id': 458052702, 'comment_body': 'Please always leave an empty line between toplevel items.', 'comment_created': datetime.datetime(2020, 7, 21, 12, 19, 58, tzinfo=datetime.timezone.utc), 'commenter': 'jplatte', 'type': 'User'}, {'comment_id': 458052888, 'comment_body': 'Same here.\r\n\r\n```suggestion\r\n    }\r\n\r\n    /// Check that the user has input all fields except password.\r\n```', 'comment_created': datetime.datetime(2020, 7, 21, 12, 20, 19, tzinfo=datetime.timezone.utc), 'commenter': 'jplatte', 'type': 'User'}, {'comment_id': 458053383, 'comment_body': 'Is this change in behavior somehow linked to porting to async/await? If not, please do this in a separate PR, this one is already very large.', 'comment_created': datetime.datetime(2020, 7, 21, 12, 21, 24, tzinfo=datetime.timezone.utc), 'commenter': 'jplatte', 'type': 'User'}, {'comment_id': 458053673, 'comment_body': '```suggestion\r\n        // We cant consume the future since we need to split it into the irc connection and\r\n```', 'comment_created': datetime.datetime(2020, 7, 21, 12, 21, 57, tzinfo=datetime.timezone.utc), 'commenter': 'jplatte', 'type': 'User'}, {'comment_id': 458208012, 'comment_body': 'Im not sure what you mean. The changes regarding getting IRC user information from the irc connection stream required a large rewrite of `stream_fold.rs` + the creation of `stream_fold::StateUpdate` trait to be compatible with the `Pin<&mut Self>` requirements of futures 0.3.\r\n\r\nAs far as checking the password field in `await_login` (and allowing the `StreamFold` to keep it as `None` in the builder): this is an addition that I made recently to mirror the way futures 0.1 does it after spotting the discrepancy in the diffs:\r\n\r\nhttps://github.com/matrix-org/matrix-ircd/blob/7d5f660e11037ee380a08ed74cb6ea95dba3bb9d/src/irc/mod.rs#L96-L104', 'comment_created': datetime.datetime(2020, 7, 21, 15, 56, 31, tzinfo=datetime.timezone.utc), 'commenter': 'VanillaBrooks', 'type': 'User'}, {'comment_id': 458209455, 'comment_body': 'How would you like to proceed?', 'comment_created': datetime.datetime(2020, 7, 21, 15, 58, 24, tzinfo=datetime.timezone.utc), 'commenter': 'VanillaBrooks', 'type': 'User'}, {'comment_id': 458211096, 'comment_body': 'I agree, updated it', 'comment_created': datetime.datetime(2020, 7, 21, 16, 0, 38, tzinfo=datetime.timezone.utc), 'commenter': 'VanillaBrooks', 'type': 'User'}, {'comment_id': 458211989, 'comment_body': 'thanks, good catch', 'comment_created': datetime.datetime(2020, 7, 21, 16, 2, 2, tzinfo=datetime.timezone.utc), 'commenter': 'VanillaBrooks', 'type': 'User'}, {'comment_id': 458220631, 'comment_body': 'Sounds like it is indeed related, so consider this resolved.', 'comment_created': datetime.datetime(2020, 7, 21, 16, 14, 22, tzinfo=datetime.timezone.utc), 'commenter': 'jplatte', 'type': 'User'}, {'comment_id': 460308773, 'comment_body': ""This doesn't seem to be very useful now that the context is no longer a thread local. As a followup (after this PR), could you rewrite all uses of it to the regular log macros?"", 'comment_created': datetime.datetime(2020, 7, 24, 22, 9, 7, tzinfo=datetime.timezone.utc), 'commenter': 'jplatte', 'type': 'User'}, {'comment_id': 460309059, 'comment_body': ""Please don't leave this commented code lying around. If it's no longer needed, remove it."", 'comment_created': datetime.datetime(2020, 7, 24, 22, 10, 3, tzinfo=datetime.timezone.utc), 'commenter': 'jplatte', 'type': 'User'}, {'comment_id': 460415939, 'comment_body': 'I agree thats a good change, mildly confusing how log macros take `ctx.logger.as_ref()` but the task_log just take `ctx`', 'comment_created': datetime.datetime(2020, 7, 25, 15, 34, 51, tzinfo=datetime.timezone.utc), 'commenter': 'VanillaBrooks', 'type': 'User'}, {'comment_id': 460521726, 'comment_body': '@VanillaBrooks Why did you mark this as resolved? There is still no logging here.', 'comment_created': datetime.datetime(2020, 7, 26, 12, 30, 43, tzinfo=datetime.timezone.utc), 'commenter': 'jplatte', 'type': 'User'}, {'comment_id': 460521783, 'comment_body': ""There's still commented-out code here."", 'comment_created': datetime.datetime(2020, 7, 26, 12, 31, 23, tzinfo=datetime.timezone.utc), 'commenter': 'jplatte', 'type': 'User'}, {'comment_id': 460521905, 'comment_body': 'Why did you mark as resolved?', 'comment_created': datetime.datetime(2020, 7, 26, 12, 32, 43, tzinfo=datetime.timezone.utc), 'commenter': 'jplatte', 'type': 'User'}, {'comment_id': 461052948, 'comment_body': 'I dont know what to tell you. Its not there on my branch https://github.com/VanillaBrooks/matrix-ircd/blob/async-await/src/main.rs#L170-L183. ctrl + F `new_handle` shows nothing as well.', 'comment_created': datetime.datetime(2020, 7, 27, 17, 29, 51, tzinfo=datetime.timezone.utc), 'commenter': 'VanillaBrooks', 'type': 'User'}, {'comment_id': 461056537, 'comment_body': 'This one is also fixed on my branch but is not carrying over correctly (?) https://github.com/VanillaBrooks/matrix-ircd/blob/async-await/src/irc/mod.rs#L103-L106. Any idea whats going on here ?', 'comment_created': datetime.datetime(2020, 7, 27, 17, 35, 55, tzinfo=datetime.timezone.utc), 'commenter': 'VanillaBrooks', 'type': 'User'}, {'comment_id': 461060942, 'comment_body': 'These logs appear on my branch https://github.com/VanillaBrooks/matrix-ircd/blob/async-await/src/main.rs#L231-L247. more logging is in the tls bridge version above. ', 'comment_created': datetime.datetime(2020, 7, 27, 17, 43, 59, tzinfo=datetime.timezone.utc), 'commenter': 'VanillaBrooks', 'type': 'User'}, {'comment_id': 461061571, 'comment_body': 'These I did actually mess up on. Should have paid more attention to the line numbers! Ive added it now. ', 'comment_created': datetime.datetime(2020, 7, 27, 17, 45, 6, tzinfo=datetime.timezone.utc), 'commenter': 'VanillaBrooks', 'type': 'User'}, {'comment_id': 461127257, 'comment_body': '@VanillaBrooks This still needs to be addressed.', 'comment_created': datetime.datetime(2020, 7, 27, 19, 45, 24, tzinfo=datetime.timezone.utc), 'commenter': 'jplatte', 'type': 'User'}, {'comment_id': 461128323, 'comment_body': ""[This function panics if called outside of a local task set.](https://docs.rs/tokio/0.2.22/tokio/task/fn.spawn_local.html) You can't use it like this."", 'comment_created': datetime.datetime(2020, 7, 27, 19, 47, 17, tzinfo=datetime.timezone.utc), 'commenter': 'jplatte', 'type': 'User'}, {'comment_id': 461128474, 'comment_body': ""I'm guessing this also got lost in my not-actually-submitted previous review."", 'comment_created': datetime.datetime(2020, 7, 27, 19, 47, 36, tzinfo=datetime.timezone.utc), 'commenter': 'jplatte', 'type': 'User'}, {'comment_id': 461363934, 'comment_body': 'This means that if `spawn_local` is called outside of a task it will panic? So `tokio::spawn` would be required, and therefore everything must be `Send`?', 'comment_created': datetime.datetime(2020, 7, 28, 7, 7, 19, tzinfo=datetime.timezone.utc), 'commenter': 'VanillaBrooks', 'type': 'User'}, {'comment_id': 461466391, 'comment_body': 'No. Everything is inside a task with `#[tokio::main]`. What this is talking about it `LocalTaskSet`. Please look at the linked documentation (and the one for `LocalTaskSet`) if you want to know more. We probably should be making everything `Send` and not use `LocalTaskSet` though.', 'comment_created': datetime.datetime(2020, 7, 28, 10, 2, 12, tzinfo=datetime.timezone.utc), 'commenter': 'jplatte', 'type': 'User'}]","[{'commit_sha': 'cd85267fb37be4d19090d75b98979e8fc9d7aa16', 'committer_username': 'VanillaBrooks', 'committer_name': 'brooks', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 17, 21, 47, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3e795725f1af110b612c80e4f41b05ea706f0e2f', 'committer_username': 'VanillaBrooks', 'committer_name': 'brooks', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 17, 21, 47, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fbae734cf1baa927f83425385be32337bde4514c', 'committer_username': 'VanillaBrooks', 'committer_name': 'brooks', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 17, 21, 47, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5defe76c8594f198ad1a7edc44ff41ca92fc4c22', 'committer_username': 'VanillaBrooks', 'committer_name': 'brooks', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 17, 21, 47, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': '47df8f266d0ec959efa40f6066f9fe37cb00f76b', 'committer_username': 'VanillaBrooks', 'committer_name': 'brooks', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 17, 21, 47, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b7dbfde5d70d0300bfcc4eac1dba97a02967614d', 'committer_username': 'VanillaBrooks', 'committer_name': 'brooks', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 17, 21, 47, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': '712db5effa07554d47e2ee27f22d6df4c1283484', 'committer_username': 'VanillaBrooks', 'committer_name': 'brooks', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 17, 21, 47, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4ecfc601a36574a807ebab99d8df18b7e60dbc86', 'committer_username': 'VanillaBrooks', 'committer_name': 'brooks', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 17, 21, 47, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': '93506f320668470aeb61993cf98d307cd1e7950d', 'committer_username': 'VanillaBrooks', 'committer_name': 'brooks', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 17, 21, 47, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e2e50a03b3451ab544c13a0dee12c7c64d79ccca', 'committer_username': 'VanillaBrooks', 'committer_name': 'brooks', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 17, 21, 47, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3ffe213ab703895813d6ad80901c2750ad2522f8', 'committer_username': 'VanillaBrooks', 'committer_name': 'brooks', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 17, 21, 47, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1e49262d74c2da62c950cdf8ac7222f1e07e71ca', 'committer_username': 'VanillaBrooks', 'committer_name': 'brooks', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 17, 21, 47, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6d19a7bc8590ac5062f789b1298ba649d483ea51', 'committer_username': 'VanillaBrooks', 'committer_name': 'brooks', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 17, 21, 47, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b2a3c2ee7dc208b6a5823b6ae5e01eee439104b1', 'committer_username': 'VanillaBrooks', 'committer_name': 'brooks', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 17, 21, 47, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': '91b0de4563427985bc4d95ebf68947244f049a52', 'committer_username': 'VanillaBrooks', 'committer_name': 'brooks', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 17, 21, 47, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f1501eb7e85a1942400e4bbfc3256d49e652970c', 'committer_username': 'VanillaBrooks', 'committer_name': 'brooks', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 17, 21, 47, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0cdbe68bf24d61fbf686ea0038390edcec628b4f', 'committer_username': 'VanillaBrooks', 'committer_name': 'brooks', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 17, 21, 47, 20, tzinfo=datetime.timezone.utc)}]",brooks,45132001,,User,,60,,52,14
460849665,GSOC 2020: Move from tokio::task::spawn_local to tokio::spawn,"This PR makes all types `Send`, as well as some types (such as `StreamFold`) `Sync` as per some of the feedback in #71. Additionally, a few methods were modified to take `&self` instead of `&mut self` to satisfy compiler errors with aliasing as a result of some additional `Mutex`s.

One important note here is that all mutexes added are from `std`. In the future, this should be updated to use `tokio::sync::Mutex`, but current method signatures (non-async) currently prevent this. ",True,72,https://api.github.com/repos/matrix-org/matrix-ircd/pulls/72,https://github.com/matrix-org/matrix-ircd/pull/72,closed,77,55,8,5,0,2,0,0,[],2020-08-01 06:49:05+00:00,2020-08-03 12:44:08+00:00,194103.0,"2 days, 5:55:03","[{'comment_id': 463947949, 'comment_body': '`Deref`s methods should never have to be used directly\r\n\r\n```suggestion\r\n            match &mut *current_sync {\r\n```', 'comment_created': datetime.datetime(2020, 8, 1, 10, 21, 39, tzinfo=datetime.timezone.utc), 'commenter': 'jplatte', 'type': 'User'}, {'comment_id': 464385511, 'comment_body': 'fixed', 'comment_created': datetime.datetime(2020, 8, 3, 12, 37, 35, tzinfo=datetime.timezone.utc), 'commenter': 'VanillaBrooks', 'type': 'User'}]","[{'commit_sha': 'aa46b0d5769fcf029879bf8b2d3769315e74469e', 'committer_username': 'VanillaBrooks', 'committer_name': 'brooks', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 17, 21, 47, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dd4c93e63218bd548e173cd5adcdbfc551cd3c53', 'committer_username': 'VanillaBrooks', 'committer_name': 'brooks', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 17, 21, 47, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7a2233c955fa3b57febc316513c58372a92b0edb', 'committer_username': 'VanillaBrooks', 'committer_name': 'brooks', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 17, 21, 47, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ef02914e9153897ea15df64abd25da0db56e166b', 'committer_username': 'VanillaBrooks', 'committer_name': 'brooks', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 17, 21, 47, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd68aa40b76842a9139453165dbc496355d976fd2', 'committer_username': 'VanillaBrooks', 'committer_name': 'brooks', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 17, 21, 47, 20, tzinfo=datetime.timezone.utc)}]",brooks,45132001,,User,,60,,52,14
471218941,GSOC 2020: Bugfixes and improvements to broken async await patch ,"This PR adds a few things to the async await update:

* A new test to ensure `StreamFold` is implemented correctly. This was done as part of the debugging for the buffer issues below

* Add TLS support to http requests which previously flew under the radar

* A bunch of additional `trace!` level logging in addition to some extra `debug!` logging. Some of these may be unnecessary, feel free to give feedback on those.  

* Fix resizing the `read_buffer` when polling the underlying TCP connection used in the IRC server. Previously the buffer was not correctly returning to its original size if the TCP connection returned `Poll::Pending` on the first poll.

* Two minor bug fixes for the matrix module's http usage. Previously `RequestStatus` was not properly set to `NoRequest` when the underlying request future was completed which led to a panic. Additionally, `200 OK` responses were thrown out due to using `==` instead of `!=` when checking the status (whoops).

* use `async move {}` blocks instead of `futures::future::lazy(|_| {})` wherever possible
 ",True,77,https://api.github.com/repos/matrix-org/matrix-ircd/pulls/77,https://github.com/matrix-org/matrix-ircd/pull/77,closed,263,36,9,6,0,5,0,0,[],2020-08-20 20:17:04+00:00,2020-08-21 10:36:32+00:00,51568.0,14:19:28,"[{'comment_id': 474317291, 'comment_body': '```suggestion\r\nslog = { version = ""2.5.2"", features = [""max_level_debug""] }\r\n```', 'comment_created': datetime.datetime(2020, 8, 20, 23, 0, 28, tzinfo=datetime.timezone.utc), 'commenter': 'jplatte', 'type': 'User'}, {'comment_id': 474321733, 'comment_body': ""Since the return value isn't used, it seems unusual to leave out the trailing semicolon here.\r\n\r\n```suggestion\r\n                waker.wake_by_ref();\r\n```"", 'comment_created': datetime.datetime(2020, 8, 20, 23, 15, 11, tzinfo=datetime.timezone.utc), 'commenter': 'jplatte', 'type': 'User'}, {'comment_id': 474321872, 'comment_body': 'Same here, quite unusual to not terminate an assignment with a semicolon.', 'comment_created': datetime.datetime(2020, 8, 20, 23, 15, 34, tzinfo=datetime.timezone.utc), 'commenter': 'jplatte', 'type': 'User'}, {'comment_id': 474614263, 'comment_body': 'fixed', 'comment_created': datetime.datetime(2020, 8, 21, 10, 29, 1, tzinfo=datetime.timezone.utc), 'commenter': 'VanillaBrooks', 'type': 'User'}, {'comment_id': 474614288, 'comment_body': 'fixed', 'comment_created': datetime.datetime(2020, 8, 21, 10, 29, 5, tzinfo=datetime.timezone.utc), 'commenter': 'VanillaBrooks', 'type': 'User'}]","[{'commit_sha': '78ab036f055aee687d8b895e94e5e7754f6fbbab', 'committer_username': 'VanillaBrooks', 'committer_name': 'brooks', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 17, 21, 47, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e8f436dc50c8a8cdcf4319f7f367f7b5803435b9', 'committer_username': 'VanillaBrooks', 'committer_name': 'brooks', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 17, 21, 47, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f45d698b7d22ff0a0ae107ffb2a28079ac813437', 'committer_username': 'VanillaBrooks', 'committer_name': 'brooks', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 17, 21, 47, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2c6fc92eee8f220920121f88086cd486302b598e', 'committer_username': 'VanillaBrooks', 'committer_name': 'brooks', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 17, 21, 47, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e04de8cc0e330a36689dd5321db3bae6f02ed1f6', 'committer_username': 'VanillaBrooks', 'committer_name': 'brooks', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 17, 21, 47, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd734e6cf46c3c766db1b198726320f433b9c7114', 'committer_username': 'VanillaBrooks', 'committer_name': 'brooks', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 17, 21, 47, 20, tzinfo=datetime.timezone.utc)}]",brooks,45132001,,User,,60,,52,14
433634997,"GSOC 2020: Code cleanup, Updating dependencies, and moving to rust 2018 idioms","This PR bumps many of the dependencies and updates much of the code to use rust 2018 idioms. This makes reading and reasoning about the code easier, especially in the areas of imports. 

Previously, main.rs used the following 2015 syntax:

https://github.com/matrix-org/matrix-ircd/blob/624a5256602af7a88a7e69966e2e38523a970480/src/main.rs#L18-L49

and modules would use macros in the following way:

https://github.com/matrix-org/matrix-ircd/blob/624a5256602af7a88a7e69966e2e38523a970480/src/irc/protocol.rs#L281-L294

Now, the imports are more abbreviated and the function / macro calls throughout the codebase are more explicit as they are now required to be explicitly imported in each file or use `module::macro!()` syntax. main.rs cargo crate imports are now able to be abbreviated to:

```
use tokio_core;
use tokio_tls;
use slog_async;
use slog_term;
use url;
use lazy_static;
use clap;
use tasked_futures;
use native_tls;
```
",True,64,https://api.github.com/repos/matrix-org/matrix-ircd/pulls/64,https://github.com/matrix-org/matrix-ircd/pull/64,closed,1257,777,16,4,0,11,0,0,[],2020-06-12 11:50:35+00:00,2020-06-18 10:36:35+00:00,513960.0,"5 days, 22:46:00","[{'comment_id': 441715269, 'comment_body': 'AFAIK these are all redundant.', 'comment_created': datetime.datetime(2020, 6, 17, 17, 37, 30, tzinfo=datetime.timezone.utc), 'commenter': 'jplatte', 'type': 'User'}, {'comment_id': 441715898, 'comment_body': 'Thanks for updating this to use `lazy_static!`, but why did you leave a commented-out version of the same code in?', 'comment_created': datetime.datetime(2020, 6, 17, 17, 38, 33, tzinfo=datetime.timezone.utc), 'commenter': 'jplatte', 'type': 'User'}, {'comment_id': 441716535, 'comment_body': ""I guess CI doesn't yet check formatting and the code base isn't fully rustfmt'ed anyway, but please try not to introduce arbitrary extra newlines."", 'comment_created': datetime.datetime(2020, 6, 17, 17, 39, 42, tzinfo=datetime.timezone.utc), 'commenter': 'jplatte', 'type': 'User'}, {'comment_id': 441998326, 'comment_body': 'Updated this in a later commit but it wasnt included in this PR. I fixed this but accidentally included it in the rustfmt commit.', 'comment_created': datetime.datetime(2020, 6, 18, 6, 35, 15, tzinfo=datetime.timezone.utc), 'commenter': 'VanillaBrooks', 'type': 'User'}, {'comment_id': 441999982, 'comment_body': 'Originally missed this since my `rustfmt` runs in the background and was working as expected. After manually running it there are 6/8 invalid config options in `rustfmt.toml` and an invalid value for `fn_args_layout`.\r\n\r\nI tried to look at modern updates for the configs but I either could not find them or they were unstable. \r\n\r\nI committed formatted files, but if you think this is a significant change we can discuss in an issue perhaps ?', 'comment_created': datetime.datetime(2020, 6, 18, 6, 39, 43, tzinfo=datetime.timezone.utc), 'commenter': 'VanillaBrooks', 'type': 'User'}, {'comment_id': 442128244, 'comment_body': ""This is [the default](https://github.com/rust-lang/rustfmt/blob/rust-1.45/Configurations.md#fn_args_layout), so we don't need to specify it manually."", 'comment_created': datetime.datetime(2020, 6, 18, 10, 29, 15, tzinfo=datetime.timezone.utc), 'commenter': 'jplatte', 'type': 'User'}, {'comment_id': 442130436, 'comment_body': ""This module can probably be replaced by `futures`' implementation in a subsequent PR."", 'comment_created': datetime.datetime(2020, 6, 18, 10, 33, 38, tzinfo=datetime.timezone.utc), 'commenter': 'jplatte', 'type': 'User'}, {'comment_id': 442138964, 'comment_body': 'Are you referring to `futures::stream::fold` ? I actually just noticed it existed, converting it without a significant rewrite would be tricky due to how `StreamFold` currently returns the stream which is not possible with `Pin`. Good info!', 'comment_created': datetime.datetime(2020, 6, 18, 10, 50, 18, tzinfo=datetime.timezone.utc), 'commenter': 'VanillaBrooks', 'type': 'User'}, {'comment_id': 442139526, 'comment_body': 'I saw that. I thought it would be good to be explicit due to the other removals', 'comment_created': datetime.datetime(2020, 6, 18, 10, 51, 28, tzinfo=datetime.timezone.utc), 'commenter': 'VanillaBrooks', 'type': 'User'}, {'comment_id': 442141058, 'comment_body': ""I don't much care either way :shrug: "", 'comment_created': datetime.datetime(2020, 6, 18, 10, 54, 41, tzinfo=datetime.timezone.utc), 'commenter': 'jplatte', 'type': 'User'}, {'comment_id': 442141265, 'comment_body': ""Okay. I didn't look at this module in detail. If it's hard to replace, let's keep it around for now."", 'comment_created': datetime.datetime(2020, 6, 18, 10, 55, 6, tzinfo=datetime.timezone.utc), 'commenter': 'jplatte', 'type': 'User'}]","[{'commit_sha': 'a40a75a09f5f4124223d0212428ce8a7829d9c8e', 'committer_username': 'VanillaBrooks', 'committer_name': 'brooks', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 17, 21, 47, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': '70a42172992af72db6ba9b0f2ab90387aacbb756', 'committer_username': 'VanillaBrooks', 'committer_name': 'brooks', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 17, 21, 47, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': '47c3c4ed0aaa7339af2c6964fc892178bd53d81c', 'committer_username': 'VanillaBrooks', 'committer_name': 'brooks', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 17, 21, 47, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4150efc4ccf150154d6868ec5b6f8818c2e6498c', 'committer_username': 'VanillaBrooks', 'committer_name': 'brooks', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 17, 21, 47, 20, tzinfo=datetime.timezone.utc)}]",brooks,45132001,,User,,60,,52,14
435081901,GSCO 2020: Swap travis-ci to stable rust,"Signed-off-by: VanillaBrooks <brooks@karlik.org>

There are currently no nightly features used in matrix-ircd. This PR changes the CI build to use stable rust instead of nightly due to PR #64 not compiling correctly correctly.",True,65,https://api.github.com/repos/matrix-org/matrix-ircd/pulls/65,https://github.com/matrix-org/matrix-ircd/pull/65,closed,3,1,2,3,0,2,0,0,[],2020-06-16 09:14:12+00:00,2020-06-17 08:46:26+00:00,84734.0,23:32:14,"[{'comment_id': 440827903, 'comment_body': ""There's a trailing space here. Seems to not affect anything, but it should probably not be there."", 'comment_created': datetime.datetime(2020, 6, 16, 12, 57, 4, tzinfo=datetime.timezone.utc), 'commenter': 'jplatte', 'type': 'User'}, {'comment_id': 441295666, 'comment_body': 'updated it', 'comment_created': datetime.datetime(2020, 6, 17, 5, 51, 24, tzinfo=datetime.timezone.utc), 'commenter': 'VanillaBrooks', 'type': 'User'}]","[{'commit_sha': '7364d624bf687f0debd95ce7992b5fce133e8784', 'committer_username': 'VanillaBrooks', 'committer_name': 'brooks', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 17, 21, 47, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2b21823bb8a9a02664138d100864b4e83ad4fe19', 'committer_username': 'VanillaBrooks', 'committer_name': 'brooks', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 17, 21, 47, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e60b9d26fa09232e4d5ba035eb8276eba59e1b1d', 'committer_username': 'VanillaBrooks', 'committer_name': 'brooks', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 17, 21, 47, 20, tzinfo=datetime.timezone.utc)}]",brooks,45132001,,User,,60,,52,14
440263537,GSOC 2020: Add additional test coverage for matrix / http implementations,This pr adds some additional tests to the matrix module to ensure that the correct http requests are being called with each. The overall test coverage is approximately doubled with these additions.,True,66,https://api.github.com/repos/matrix-org/matrix-ircd/pulls/66,https://github.com/matrix-org/matrix-ircd/pull/66,closed,1350,660,5,8,6,8,0,0,[],2020-06-25 21:20:14+00:00,2020-07-03 09:18:19+00:00,647885.0,"7 days, 11:58:05","[{'comment_id': 447318134, 'comment_body': 'I would be nice to get rid of this. I tried without the sleeps and it seems to work just fine, can you confirm that?', 'comment_created': datetime.datetime(2020, 6, 29, 23, 34, 46, tzinfo=datetime.timezone.utc), 'commenter': 'phlmn', 'type': 'User'}, {'comment_id': 447319483, 'comment_body': 'What happened to the query part?', 'comment_created': datetime.datetime(2020, 6, 29, 23, 38, 49, tzinfo=datetime.timezone.utc), 'commenter': 'phlmn', 'type': 'User'}, {'comment_id': 447320434, 'comment_body': 'This looks weird without a blank line before this line', 'comment_created': datetime.datetime(2020, 6, 29, 23, 41, 53, tzinfo=datetime.timezone.utc), 'commenter': 'phlmn', 'type': 'User'}, {'comment_id': 447598325, 'comment_body': ""I've never seen `println!` used with curly (or square) braces. Please use regular braces."", 'comment_created': datetime.datetime(2020, 6, 30, 11, 2, 28, tzinfo=datetime.timezone.utc), 'commenter': 'jplatte', 'type': 'User'}, {'comment_id': 447598692, 'comment_body': 'Same here.', 'comment_created': datetime.datetime(2020, 6, 30, 11, 3, 14, tzinfo=datetime.timezone.utc), 'commenter': 'jplatte', 'type': 'User'}, {'comment_id': 448133137, 'comment_body': 'This was an issue that happened when spawning the futures instead of using `core.run()`. I have removed it since we no longer spawn them.', 'comment_created': datetime.datetime(2020, 7, 1, 6, 2, 15, tzinfo=datetime.timezone.utc), 'commenter': 'VanillaBrooks', 'type': 'User'}, {'comment_id': 448142048, 'comment_body': 'Good catch! This is left over from me trying to figure out why http requests were not correctly being made and I forgot to remove it. I actually noticed this was a problem yesterday when the async / await tests didnt work correctly.', 'comment_created': datetime.datetime(2020, 7, 1, 6, 28, 6, tzinfo=datetime.timezone.utc), 'commenter': 'VanillaBrooks', 'type': 'User'}, {'comment_id': 448143494, 'comment_body': 'Fixed. I checked rustfmt for an option to force parenthesis for `println` but it doesnt appear to exist. This might come up in the future but ill try to catch them before the PR.', 'comment_created': datetime.datetime(2020, 7, 1, 6, 31, 38, tzinfo=datetime.timezone.utc), 'commenter': 'VanillaBrooks', 'type': 'User'}]","[{'commit_sha': 'a40a75a09f5f4124223d0212428ce8a7829d9c8e', 'committer_username': 'VanillaBrooks', 'committer_name': 'brooks', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 17, 21, 47, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': '70a42172992af72db6ba9b0f2ab90387aacbb756', 'committer_username': 'VanillaBrooks', 'committer_name': 'brooks', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 17, 21, 47, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ac6c76e47e27ccbc18a84e3912247563d0b34836', 'committer_username': 'VanillaBrooks', 'committer_name': 'brooks', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 17, 21, 47, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': '272e39c919bee0eb34204d8a28ef58c523edcb53', 'committer_username': 'VanillaBrooks', 'committer_name': 'brooks', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 17, 21, 47, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': '99af5b4ab79b6e6a710624c3f5ba7a58488ff3c6', 'committer_username': 'VanillaBrooks', 'committer_name': 'brooks', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 17, 21, 47, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': '142f08da6145856ccbdf5ae8e778665a2f5d405e', 'committer_username': 'VanillaBrooks', 'committer_name': 'brooks', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 17, 21, 47, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': '08ea7ae4c4243ee54899a39b6899eb2f655dc93e', 'committer_username': 'VanillaBrooks', 'committer_name': 'brooks', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 17, 21, 47, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd0a666ccf3c22661912045f43d9cfb7e7cad2aa0', 'committer_username': 'VanillaBrooks', 'committer_name': 'brooks', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 17, 21, 47, 20, tzinfo=datetime.timezone.utc)}]",brooks,45132001,,User,,60,,52,14
442507555,GSOC 2020: Migrate http / matrix implementations to futures 0.3,"This PR swaps the http.rs implementation to use hyper for more readable and reliable http requests. Additionally, the matrix module is also updated to futures 0.3 so that async / await can be used in `bridge/mod.rs` in a future PR. ",True,67,https://api.github.com/repos/matrix-org/matrix-ircd/pulls/67,https://github.com/matrix-org/matrix-ircd/pull/67,closed,1191,1561,8,6,3,6,0,0,[],2020-07-01 07:43:14+00:00,2020-07-13 13:58:36+00:00,1059322.0,"12 days, 6:15:22","[{'comment_id': 448179363, 'comment_body': 'In order to remove the `.unwrap()`s from `join_room()` I unified all the error possibilities under one type. Previously this was done by many `.map_err()`s, and I thought this made things more readable. Thoughts on this? ', 'comment_created': datetime.datetime(2020, 7, 1, 7, 47, 10, tzinfo=datetime.timezone.utc), 'commenter': 'VanillaBrooks', 'type': 'User'}, {'comment_id': 449062829, 'comment_body': 'All these new imports are redundant. Why did you add them?', 'comment_created': datetime.datetime(2020, 7, 2, 14, 57, 5, tzinfo=datetime.timezone.utc), 'commenter': 'jplatte', 'type': 'User'}, {'comment_id': 449063144, 'comment_body': 'Why is this import all the way down here?', 'comment_created': datetime.datetime(2020, 7, 2, 14, 57, 36, tzinfo=datetime.timezone.utc), 'commenter': 'jplatte', 'type': 'User'}, {'comment_id': 449252120, 'comment_body': 'These are issues that were solved in a previous PR, I have not rebased correctly so you are seeing ~5 (?) commits that have previously been pulled. Ill work on sorting this out.', 'comment_created': datetime.datetime(2020, 7, 2, 20, 31, 59, tzinfo=datetime.timezone.utc), 'commenter': 'VanillaBrooks', 'type': 'User'}, {'comment_id': 452212177, 'comment_body': ""I think that's fine"", 'comment_created': datetime.datetime(2020, 7, 9, 13, 21, 21, tzinfo=datetime.timezone.utc), 'commenter': 'phlmn', 'type': 'User'}, {'comment_id': 452212575, 'comment_body': '@VanillaBrooks could you move this to the other imports?', 'comment_created': datetime.datetime(2020, 7, 9, 13, 21, 54, tzinfo=datetime.timezone.utc), 'commenter': 'phlmn', 'type': 'User'}]","[{'commit_sha': 'd8cddd532c7692b9eb5e72a72062c9b10d551bf7', 'committer_username': 'VanillaBrooks', 'committer_name': 'brooks', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 17, 21, 47, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6a308d0835932f6d110d3b488b5d1696e4f333d0', 'committer_username': 'VanillaBrooks', 'committer_name': 'brooks', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 17, 21, 47, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5ca17099e040d217d66747200e4fe0373e2e9ab1', 'committer_username': 'VanillaBrooks', 'committer_name': 'brooks', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 17, 21, 47, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0878a7436c194e61a47b9537577803f8162577a4', 'committer_username': 'VanillaBrooks', 'committer_name': 'brooks', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 17, 21, 47, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': '039e5f40fe47e00fba2a45f504270f4a28daf592', 'committer_username': 'VanillaBrooks', 'committer_name': 'brooks', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 17, 21, 47, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'caf5fcc94083d600f031b9046eca9cf224fb6019', 'committer_username': 'VanillaBrooks', 'committer_name': 'brooks', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 17, 21, 47, 20, tzinfo=datetime.timezone.utc)}]",brooks,45132001,,User,,60,,52,14
449546663,"GSOC 2020: Port bridge / irc modules to async / await, remove futures 0.1 dependencies",,True,71,https://api.github.com/repos/matrix-org/matrix-ircd/pulls/71,https://github.com/matrix-org/matrix-ircd/pull/71,closed,825,1126,10,17,2,52,0,0,[],2020-07-15 15:10:52+00:00,2020-07-27 19:52:01+00:00,1053669.0,"12 days, 4:41:09","[{'comment_id': 456580076, 'comment_body': 'previously these were used with the custom http implementation, but since `url::Url` and is later converted to `hyper::Uri`, i think these are safe to remove.', 'comment_created': datetime.datetime(2020, 7, 17, 17, 34, 44, tzinfo=datetime.timezone.utc), 'commenter': 'VanillaBrooks', 'type': 'User'}, {'comment_id': 456583083, 'comment_body': 'A lot of these function signatures are changing from rustfmt and I dont know why', 'comment_created': datetime.datetime(2020, 7, 17, 17, 40, 49, tzinfo=datetime.timezone.utc), 'commenter': 'VanillaBrooks', 'type': 'User'}, {'comment_id': 456583167, 'comment_body': 'same here', 'comment_created': datetime.datetime(2020, 7, 17, 17, 40, 59, tzinfo=datetime.timezone.utc), 'commenter': 'VanillaBrooks', 'type': 'User'}, {'comment_id': 456583174, 'comment_body': 'Instead of adding that comment, could you rewrite this and any other occurrences of the `<expr>.ok();` pattern to `let _ = <expr>;`, which is the standard way of saying ""ignore result of <expr>"" in Rust?', 'comment_created': datetime.datetime(2020, 7, 17, 17, 41, 1, tzinfo=datetime.timezone.utc), 'commenter': 'jplatte', 'type': 'User'}, {'comment_id': 456585181, 'comment_body': 'These can also probably be removed', 'comment_created': datetime.datetime(2020, 7, 17, 17, 45, 4, tzinfo=datetime.timezone.utc), 'commenter': 'VanillaBrooks', 'type': 'User'}, {'comment_id': 456585614, 'comment_body': 'remove this', 'comment_created': datetime.datetime(2020, 7, 17, 17, 45, 51, tzinfo=datetime.timezone.utc), 'commenter': 'VanillaBrooks', 'type': 'User'}, {'comment_id': 456585683, 'comment_body': 'Extra newline seems pointless.', 'comment_created': datetime.datetime(2020, 7, 17, 17, 45, 59, tzinfo=datetime.timezone.utc), 'commenter': 'jplatte', 'type': 'User'}, {'comment_id': 456585758, 'comment_body': 'Please move this up to the other `std` imports.', 'comment_created': datetime.datetime(2020, 7, 17, 17, 46, 9, tzinfo=datetime.timezone.utc), 'commenter': 'jplatte', 'type': 'User'}, {'comment_id': 456585942, 'comment_body': 'Why change the task local into a thread local?', 'comment_created': datetime.datetime(2020, 7, 17, 17, 46, 32, tzinfo=datetime.timezone.utc), 'commenter': 'jplatte', 'type': 'User'}, {'comment_id': 456586659, 'comment_body': 'Would be good for readability to shorten `futures::future` into just `future` by `use`ing `futures::future` at the start of the file.', 'comment_created': datetime.datetime(2020, 7, 17, 17, 47, 54, tzinfo=datetime.timezone.utc), 'commenter': 'jplatte', 'type': 'User'}, {'comment_id': 456586979, 'comment_body': 'Yeah, sounds good.', 'comment_created': datetime.datetime(2020, 7, 17, 17, 48, 34, tzinfo=datetime.timezone.utc), 'commenter': 'jplatte', 'type': 'User'}, {'comment_id': 456587598, 'comment_body': 'Why extra newlines between `std` imports?', 'comment_created': datetime.datetime(2020, 7, 17, 17, 49, 43, tzinfo=datetime.timezone.utc), 'commenter': 'jplatte', 'type': 'User'}, {'comment_id': 456588128, 'comment_body': ""Potentially the codebase just wasn't `rustfmt`ed before. I've thought this for some other bits of code. Don't worry about it."", 'comment_created': datetime.datetime(2020, 7, 17, 17, 50, 42, tzinfo=datetime.timezone.utc), 'commenter': 'jplatte', 'type': 'User'}, {'comment_id': 456588906, 'comment_body': 'remove', 'comment_created': datetime.datetime(2020, 7, 17, 17, 52, 17, tzinfo=datetime.timezone.utc), 'commenter': 'VanillaBrooks', 'type': 'User'}, {'comment_id': 456590823, 'comment_body': 'add this back', 'comment_created': datetime.datetime(2020, 7, 17, 17, 55, 38, tzinfo=datetime.timezone.utc), 'commenter': 'VanillaBrooks', 'type': 'User'}, {'comment_id': 456594749, 'comment_body': ""I believe `.await` will replicate how the `self.stop()` call to `taskedfutures` work based on eric's explanation but this needs to be tested before merging to master"", 'comment_created': datetime.datetime(2020, 7, 17, 18, 2, 56, tzinfo=datetime.timezone.utc), 'commenter': 'VanillaBrooks', 'type': 'User'}, {'comment_id': 456595823, 'comment_body': 'Some of these are probably unnecessary, ill have to check since this was a copy paste from the matrix module', 'comment_created': datetime.datetime(2020, 7, 17, 18, 5, 5, tzinfo=datetime.timezone.utc), 'commenter': 'VanillaBrooks', 'type': 'User'}, {'comment_id': 456599470, 'comment_body': ""I mentioned this on matrix but no one really got back to me on it. Ill copy paste it here so its more open:\r\n\r\nsince `futures::task_local!` does not exist in `futures` 0.3 I'm using `tokio::task_local!`, but there is one notable difference in that you no longer set the default value:\r\n\r\n```\r\nfutures::task_local!{\r\n    static CONTEXT: RefCell<Option<ConnectionContext>> = RefCell::new(None);\r\n}\r\n```\r\nbecomes:\r\n\r\n```\r\ntokio::task_local!{\r\n    static CONTEXT: RefCell<Option<ConnectionContext>>;\r\n}\r\n```\r\nRunning the tests from my branch here gives the error:\r\n\r\n```\r\n'cannot access a Task Local Storage value without setting it via `LocalKey::set`: AccessError'\r\n```\r\nbut I dont see a `LocalKey::set` anywhere in the `tokio` docs. It looks like in [the source code](https://docs.rs/tokio/0.2.21/src/tokio/task/task_local.rs.html#34-46) `tokio` uses `std::thread_local!`, is it safe to use this as a replacement?\r\n"", 'comment_created': datetime.datetime(2020, 7, 17, 18, 13, 9, tzinfo=datetime.timezone.utc), 'commenter': 'VanillaBrooks', 'type': 'User'}, {'comment_id': 456600036, 'comment_body': 'Ill look into adding it to the ci', 'comment_created': datetime.datetime(2020, 7, 17, 18, 14, 25, tzinfo=datetime.timezone.utc), 'commenter': 'VanillaBrooks', 'type': 'User'}, {'comment_id': 456604980, 'comment_body': 'This did not get ported since I check that all fields are filled before exiting the `StreamFold`, whereas this version allows the password field to stay `None` until later. Will update for this', 'comment_created': datetime.datetime(2020, 7, 17, 18, 24, 57, tzinfo=datetime.timezone.utc), 'commenter': 'VanillaBrooks', 'type': 'User'}, {'comment_id': 456951808, 'comment_body': 'Is this still used? We certainly want to get rid of it.', 'comment_created': datetime.datetime(2020, 7, 19, 20, 27, 26, tzinfo=datetime.timezone.utc), 'commenter': 'phlmn', 'type': 'User'}, {'comment_id': 456952355, 'comment_body': 'yeah, logging here would be really nice', 'comment_created': datetime.datetime(2020, 7, 19, 20, 32, 42, tzinfo=datetime.timezone.utc), 'commenter': 'phlmn', 'type': 'User'}, {'comment_id': 456959195, 'comment_body': 'Could you add a simple log here?', 'comment_created': datetime.datetime(2020, 7, 19, 21, 44, 48, tzinfo=datetime.timezone.utc), 'commenter': 'phlmn', 'type': 'User'}, {'comment_id': 456959351, 'comment_body': ""Just add simple logs here, then it's done :)"", 'comment_created': datetime.datetime(2020, 7, 19, 21, 46, 16, tzinfo=datetime.timezone.utc), 'commenter': 'phlmn', 'type': 'User'}, {'comment_id': 456959491, 'comment_body': 'What is this doing here?', 'comment_created': datetime.datetime(2020, 7, 19, 21, 47, 58, tzinfo=datetime.timezone.utc), 'commenter': 'phlmn', 'type': 'User'}, {'comment_id': 458010605, 'comment_body': ""This is a method to set the state for `crate::CONTEXT` when using `tokio::task_local!` as a replacement for `futures::task_local!` since the `tokio` version doesn't provide default state. [docs here](https://docs.rs/tokio/0.2.21/tokio/task/struct.LocalKey.html#method.scope).  I never actually got this to work, so i switched to `std::thread_local!`. There's an unresolved discussion about this above, but for now ill remove this dead code."", 'comment_created': datetime.datetime(2020, 7, 21, 10, 56, 46, tzinfo=datetime.timezone.utc), 'commenter': 'VanillaBrooks', 'type': 'User'}, {'comment_id': 458012583, 'comment_body': 'Not used, good catch', 'comment_created': datetime.datetime(2020, 7, 21, 11, 0, 37, tzinfo=datetime.timezone.utc), 'commenter': 'VanillaBrooks', 'type': 'User'}, {'comment_id': 458052507, 'comment_body': 'Oh, sorry, I guess I misread this. If we actually do something on `Err` (run `task_warn` in this case), that shouldn\'t be a `map_err` at all, instead you can use `if self.matrix_client.send_text_message(room_id, text).await.is_err() { task_warn!(""Failed to send""); }`.', 'comment_created': datetime.datetime(2020, 7, 21, 12, 19, 35, tzinfo=datetime.timezone.utc), 'commenter': 'jplatte', 'type': 'User'}, {'comment_id': 458052702, 'comment_body': 'Please always leave an empty line between toplevel items.', 'comment_created': datetime.datetime(2020, 7, 21, 12, 19, 58, tzinfo=datetime.timezone.utc), 'commenter': 'jplatte', 'type': 'User'}, {'comment_id': 458052888, 'comment_body': 'Same here.\r\n\r\n```suggestion\r\n    }\r\n\r\n    /// Check that the user has input all fields except password.\r\n```', 'comment_created': datetime.datetime(2020, 7, 21, 12, 20, 19, tzinfo=datetime.timezone.utc), 'commenter': 'jplatte', 'type': 'User'}, {'comment_id': 458053383, 'comment_body': 'Is this change in behavior somehow linked to porting to async/await? If not, please do this in a separate PR, this one is already very large.', 'comment_created': datetime.datetime(2020, 7, 21, 12, 21, 24, tzinfo=datetime.timezone.utc), 'commenter': 'jplatte', 'type': 'User'}, {'comment_id': 458053673, 'comment_body': '```suggestion\r\n        // We cant consume the future since we need to split it into the irc connection and\r\n```', 'comment_created': datetime.datetime(2020, 7, 21, 12, 21, 57, tzinfo=datetime.timezone.utc), 'commenter': 'jplatte', 'type': 'User'}, {'comment_id': 458208012, 'comment_body': 'Im not sure what you mean. The changes regarding getting IRC user information from the irc connection stream required a large rewrite of `stream_fold.rs` + the creation of `stream_fold::StateUpdate` trait to be compatible with the `Pin<&mut Self>` requirements of futures 0.3.\r\n\r\nAs far as checking the password field in `await_login` (and allowing the `StreamFold` to keep it as `None` in the builder): this is an addition that I made recently to mirror the way futures 0.1 does it after spotting the discrepancy in the diffs:\r\n\r\nhttps://github.com/matrix-org/matrix-ircd/blob/7d5f660e11037ee380a08ed74cb6ea95dba3bb9d/src/irc/mod.rs#L96-L104', 'comment_created': datetime.datetime(2020, 7, 21, 15, 56, 31, tzinfo=datetime.timezone.utc), 'commenter': 'VanillaBrooks', 'type': 'User'}, {'comment_id': 458209455, 'comment_body': 'How would you like to proceed?', 'comment_created': datetime.datetime(2020, 7, 21, 15, 58, 24, tzinfo=datetime.timezone.utc), 'commenter': 'VanillaBrooks', 'type': 'User'}, {'comment_id': 458211096, 'comment_body': 'I agree, updated it', 'comment_created': datetime.datetime(2020, 7, 21, 16, 0, 38, tzinfo=datetime.timezone.utc), 'commenter': 'VanillaBrooks', 'type': 'User'}, {'comment_id': 458211989, 'comment_body': 'thanks, good catch', 'comment_created': datetime.datetime(2020, 7, 21, 16, 2, 2, tzinfo=datetime.timezone.utc), 'commenter': 'VanillaBrooks', 'type': 'User'}, {'comment_id': 458220631, 'comment_body': 'Sounds like it is indeed related, so consider this resolved.', 'comment_created': datetime.datetime(2020, 7, 21, 16, 14, 22, tzinfo=datetime.timezone.utc), 'commenter': 'jplatte', 'type': 'User'}, {'comment_id': 460308773, 'comment_body': ""This doesn't seem to be very useful now that the context is no longer a thread local. As a followup (after this PR), could you rewrite all uses of it to the regular log macros?"", 'comment_created': datetime.datetime(2020, 7, 24, 22, 9, 7, tzinfo=datetime.timezone.utc), 'commenter': 'jplatte', 'type': 'User'}, {'comment_id': 460309059, 'comment_body': ""Please don't leave this commented code lying around. If it's no longer needed, remove it."", 'comment_created': datetime.datetime(2020, 7, 24, 22, 10, 3, tzinfo=datetime.timezone.utc), 'commenter': 'jplatte', 'type': 'User'}, {'comment_id': 460415939, 'comment_body': 'I agree thats a good change, mildly confusing how log macros take `ctx.logger.as_ref()` but the task_log just take `ctx`', 'comment_created': datetime.datetime(2020, 7, 25, 15, 34, 51, tzinfo=datetime.timezone.utc), 'commenter': 'VanillaBrooks', 'type': 'User'}, {'comment_id': 460521726, 'comment_body': '@VanillaBrooks Why did you mark this as resolved? There is still no logging here.', 'comment_created': datetime.datetime(2020, 7, 26, 12, 30, 43, tzinfo=datetime.timezone.utc), 'commenter': 'jplatte', 'type': 'User'}, {'comment_id': 460521783, 'comment_body': ""There's still commented-out code here."", 'comment_created': datetime.datetime(2020, 7, 26, 12, 31, 23, tzinfo=datetime.timezone.utc), 'commenter': 'jplatte', 'type': 'User'}, {'comment_id': 460521905, 'comment_body': 'Why did you mark as resolved?', 'comment_created': datetime.datetime(2020, 7, 26, 12, 32, 43, tzinfo=datetime.timezone.utc), 'commenter': 'jplatte', 'type': 'User'}, {'comment_id': 461052948, 'comment_body': 'I dont know what to tell you. Its not there on my branch https://github.com/VanillaBrooks/matrix-ircd/blob/async-await/src/main.rs#L170-L183. ctrl + F `new_handle` shows nothing as well.', 'comment_created': datetime.datetime(2020, 7, 27, 17, 29, 51, tzinfo=datetime.timezone.utc), 'commenter': 'VanillaBrooks', 'type': 'User'}, {'comment_id': 461056537, 'comment_body': 'This one is also fixed on my branch but is not carrying over correctly (?) https://github.com/VanillaBrooks/matrix-ircd/blob/async-await/src/irc/mod.rs#L103-L106. Any idea whats going on here ?', 'comment_created': datetime.datetime(2020, 7, 27, 17, 35, 55, tzinfo=datetime.timezone.utc), 'commenter': 'VanillaBrooks', 'type': 'User'}, {'comment_id': 461060942, 'comment_body': 'These logs appear on my branch https://github.com/VanillaBrooks/matrix-ircd/blob/async-await/src/main.rs#L231-L247. more logging is in the tls bridge version above. ', 'comment_created': datetime.datetime(2020, 7, 27, 17, 43, 59, tzinfo=datetime.timezone.utc), 'commenter': 'VanillaBrooks', 'type': 'User'}, {'comment_id': 461061571, 'comment_body': 'These I did actually mess up on. Should have paid more attention to the line numbers! Ive added it now. ', 'comment_created': datetime.datetime(2020, 7, 27, 17, 45, 6, tzinfo=datetime.timezone.utc), 'commenter': 'VanillaBrooks', 'type': 'User'}, {'comment_id': 461127257, 'comment_body': '@VanillaBrooks This still needs to be addressed.', 'comment_created': datetime.datetime(2020, 7, 27, 19, 45, 24, tzinfo=datetime.timezone.utc), 'commenter': 'jplatte', 'type': 'User'}, {'comment_id': 461128323, 'comment_body': ""[This function panics if called outside of a local task set.](https://docs.rs/tokio/0.2.22/tokio/task/fn.spawn_local.html) You can't use it like this."", 'comment_created': datetime.datetime(2020, 7, 27, 19, 47, 17, tzinfo=datetime.timezone.utc), 'commenter': 'jplatte', 'type': 'User'}, {'comment_id': 461128474, 'comment_body': ""I'm guessing this also got lost in my not-actually-submitted previous review."", 'comment_created': datetime.datetime(2020, 7, 27, 19, 47, 36, tzinfo=datetime.timezone.utc), 'commenter': 'jplatte', 'type': 'User'}, {'comment_id': 461363934, 'comment_body': 'This means that if `spawn_local` is called outside of a task it will panic? So `tokio::spawn` would be required, and therefore everything must be `Send`?', 'comment_created': datetime.datetime(2020, 7, 28, 7, 7, 19, tzinfo=datetime.timezone.utc), 'commenter': 'VanillaBrooks', 'type': 'User'}, {'comment_id': 461466391, 'comment_body': 'No. Everything is inside a task with `#[tokio::main]`. What this is talking about it `LocalTaskSet`. Please look at the linked documentation (and the one for `LocalTaskSet`) if you want to know more. We probably should be making everything `Send` and not use `LocalTaskSet` though.', 'comment_created': datetime.datetime(2020, 7, 28, 10, 2, 12, tzinfo=datetime.timezone.utc), 'commenter': 'jplatte', 'type': 'User'}]","[{'commit_sha': 'cd85267fb37be4d19090d75b98979e8fc9d7aa16', 'committer_username': 'VanillaBrooks', 'committer_name': 'brooks', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 17, 21, 47, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3e795725f1af110b612c80e4f41b05ea706f0e2f', 'committer_username': 'VanillaBrooks', 'committer_name': 'brooks', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 17, 21, 47, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fbae734cf1baa927f83425385be32337bde4514c', 'committer_username': 'VanillaBrooks', 'committer_name': 'brooks', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 17, 21, 47, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5defe76c8594f198ad1a7edc44ff41ca92fc4c22', 'committer_username': 'VanillaBrooks', 'committer_name': 'brooks', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 17, 21, 47, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': '47df8f266d0ec959efa40f6066f9fe37cb00f76b', 'committer_username': 'VanillaBrooks', 'committer_name': 'brooks', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 17, 21, 47, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b7dbfde5d70d0300bfcc4eac1dba97a02967614d', 'committer_username': 'VanillaBrooks', 'committer_name': 'brooks', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 17, 21, 47, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': '712db5effa07554d47e2ee27f22d6df4c1283484', 'committer_username': 'VanillaBrooks', 'committer_name': 'brooks', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 17, 21, 47, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4ecfc601a36574a807ebab99d8df18b7e60dbc86', 'committer_username': 'VanillaBrooks', 'committer_name': 'brooks', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 17, 21, 47, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': '93506f320668470aeb61993cf98d307cd1e7950d', 'committer_username': 'VanillaBrooks', 'committer_name': 'brooks', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 17, 21, 47, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e2e50a03b3451ab544c13a0dee12c7c64d79ccca', 'committer_username': 'VanillaBrooks', 'committer_name': 'brooks', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 17, 21, 47, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3ffe213ab703895813d6ad80901c2750ad2522f8', 'committer_username': 'VanillaBrooks', 'committer_name': 'brooks', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 17, 21, 47, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1e49262d74c2da62c950cdf8ac7222f1e07e71ca', 'committer_username': 'VanillaBrooks', 'committer_name': 'brooks', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 17, 21, 47, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6d19a7bc8590ac5062f789b1298ba649d483ea51', 'committer_username': 'VanillaBrooks', 'committer_name': 'brooks', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 17, 21, 47, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b2a3c2ee7dc208b6a5823b6ae5e01eee439104b1', 'committer_username': 'VanillaBrooks', 'committer_name': 'brooks', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 17, 21, 47, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': '91b0de4563427985bc4d95ebf68947244f049a52', 'committer_username': 'VanillaBrooks', 'committer_name': 'brooks', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 17, 21, 47, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f1501eb7e85a1942400e4bbfc3256d49e652970c', 'committer_username': 'VanillaBrooks', 'committer_name': 'brooks', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 17, 21, 47, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0cdbe68bf24d61fbf686ea0038390edcec628b4f', 'committer_username': 'VanillaBrooks', 'committer_name': 'brooks', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 17, 21, 47, 20, tzinfo=datetime.timezone.utc)}]",brooks,45132001,,User,,60,,52,14
460849665,GSOC 2020: Move from tokio::task::spawn_local to tokio::spawn,"This PR makes all types `Send`, as well as some types (such as `StreamFold`) `Sync` as per some of the feedback in #71. Additionally, a few methods were modified to take `&self` instead of `&mut self` to satisfy compiler errors with aliasing as a result of some additional `Mutex`s.

One important note here is that all mutexes added are from `std`. In the future, this should be updated to use `tokio::sync::Mutex`, but current method signatures (non-async) currently prevent this. ",True,72,https://api.github.com/repos/matrix-org/matrix-ircd/pulls/72,https://github.com/matrix-org/matrix-ircd/pull/72,closed,77,55,8,5,0,2,0,0,[],2020-08-01 06:49:05+00:00,2020-08-03 12:44:08+00:00,194103.0,"2 days, 5:55:03","[{'comment_id': 463947949, 'comment_body': '`Deref`s methods should never have to be used directly\r\n\r\n```suggestion\r\n            match &mut *current_sync {\r\n```', 'comment_created': datetime.datetime(2020, 8, 1, 10, 21, 39, tzinfo=datetime.timezone.utc), 'commenter': 'jplatte', 'type': 'User'}, {'comment_id': 464385511, 'comment_body': 'fixed', 'comment_created': datetime.datetime(2020, 8, 3, 12, 37, 35, tzinfo=datetime.timezone.utc), 'commenter': 'VanillaBrooks', 'type': 'User'}]","[{'commit_sha': 'aa46b0d5769fcf029879bf8b2d3769315e74469e', 'committer_username': 'VanillaBrooks', 'committer_name': 'brooks', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 17, 21, 47, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dd4c93e63218bd548e173cd5adcdbfc551cd3c53', 'committer_username': 'VanillaBrooks', 'committer_name': 'brooks', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 17, 21, 47, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7a2233c955fa3b57febc316513c58372a92b0edb', 'committer_username': 'VanillaBrooks', 'committer_name': 'brooks', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 17, 21, 47, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ef02914e9153897ea15df64abd25da0db56e166b', 'committer_username': 'VanillaBrooks', 'committer_name': 'brooks', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 17, 21, 47, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd68aa40b76842a9139453165dbc496355d976fd2', 'committer_username': 'VanillaBrooks', 'committer_name': 'brooks', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 17, 21, 47, 20, tzinfo=datetime.timezone.utc)}]",brooks,45132001,,User,,60,,52,14
471218941,GSOC 2020: Bugfixes and improvements to broken async await patch ,"This PR adds a few things to the async await update:

* A new test to ensure `StreamFold` is implemented correctly. This was done as part of the debugging for the buffer issues below

* Add TLS support to http requests which previously flew under the radar

* A bunch of additional `trace!` level logging in addition to some extra `debug!` logging. Some of these may be unnecessary, feel free to give feedback on those.  

* Fix resizing the `read_buffer` when polling the underlying TCP connection used in the IRC server. Previously the buffer was not correctly returning to its original size if the TCP connection returned `Poll::Pending` on the first poll.

* Two minor bug fixes for the matrix module's http usage. Previously `RequestStatus` was not properly set to `NoRequest` when the underlying request future was completed which led to a panic. Additionally, `200 OK` responses were thrown out due to using `==` instead of `!=` when checking the status (whoops).

* use `async move {}` blocks instead of `futures::future::lazy(|_| {})` wherever possible
 ",True,77,https://api.github.com/repos/matrix-org/matrix-ircd/pulls/77,https://github.com/matrix-org/matrix-ircd/pull/77,closed,263,36,9,6,0,5,0,0,[],2020-08-20 20:17:04+00:00,2020-08-21 10:36:32+00:00,51568.0,14:19:28,"[{'comment_id': 474317291, 'comment_body': '```suggestion\r\nslog = { version = ""2.5.2"", features = [""max_level_debug""] }\r\n```', 'comment_created': datetime.datetime(2020, 8, 20, 23, 0, 28, tzinfo=datetime.timezone.utc), 'commenter': 'jplatte', 'type': 'User'}, {'comment_id': 474321733, 'comment_body': ""Since the return value isn't used, it seems unusual to leave out the trailing semicolon here.\r\n\r\n```suggestion\r\n                waker.wake_by_ref();\r\n```"", 'comment_created': datetime.datetime(2020, 8, 20, 23, 15, 11, tzinfo=datetime.timezone.utc), 'commenter': 'jplatte', 'type': 'User'}, {'comment_id': 474321872, 'comment_body': 'Same here, quite unusual to not terminate an assignment with a semicolon.', 'comment_created': datetime.datetime(2020, 8, 20, 23, 15, 34, tzinfo=datetime.timezone.utc), 'commenter': 'jplatte', 'type': 'User'}, {'comment_id': 474614263, 'comment_body': 'fixed', 'comment_created': datetime.datetime(2020, 8, 21, 10, 29, 1, tzinfo=datetime.timezone.utc), 'commenter': 'VanillaBrooks', 'type': 'User'}, {'comment_id': 474614288, 'comment_body': 'fixed', 'comment_created': datetime.datetime(2020, 8, 21, 10, 29, 5, tzinfo=datetime.timezone.utc), 'commenter': 'VanillaBrooks', 'type': 'User'}]","[{'commit_sha': '78ab036f055aee687d8b895e94e5e7754f6fbbab', 'committer_username': 'VanillaBrooks', 'committer_name': 'brooks', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 17, 21, 47, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e8f436dc50c8a8cdcf4319f7f367f7b5803435b9', 'committer_username': 'VanillaBrooks', 'committer_name': 'brooks', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 17, 21, 47, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f45d698b7d22ff0a0ae107ffb2a28079ac813437', 'committer_username': 'VanillaBrooks', 'committer_name': 'brooks', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 17, 21, 47, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2c6fc92eee8f220920121f88086cd486302b598e', 'committer_username': 'VanillaBrooks', 'committer_name': 'brooks', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 17, 21, 47, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e04de8cc0e330a36689dd5321db3bae6f02ed1f6', 'committer_username': 'VanillaBrooks', 'committer_name': 'brooks', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 17, 21, 47, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd734e6cf46c3c766db1b198726320f433b9c7114', 'committer_username': 'VanillaBrooks', 'committer_name': 'brooks', 'committer_email': None, 'commit_date': datetime.datetime(2018, 11, 17, 21, 47, 20, tzinfo=datetime.timezone.utc)}]",brooks,45132001,,User,,60,,52,14

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
70084498,matrix-ircd,matrix-org/matrix-ircd,Rust,41,224,42,13,108,47,7,3,"[{'id': 568758202, 'number': 82, 'closed': datetime.datetime(2021, 12, 2, 13, 39, 34, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 2, 6, 9, 55, 21, tzinfo=datetime.timezone.utc), 'time_taken': 25847053.0, 'time_delta': '299 days, 3:44:13', 'additions': 423, 'deletions': 649, 'state': 'closed'}, {'id': 568757032, 'number': 81, 'closed': datetime.datetime(2021, 2, 6, 9, 54, 47, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 2, 6, 9, 50, 4, tzinfo=datetime.timezone.utc), 'time_taken': 283.0, 'time_delta': '0:04:43', 'additions': 1498, 'deletions': 2352, 'state': 'closed'}, {'id': 471218941, 'number': 77, 'closed': datetime.datetime(2020, 8, 21, 10, 36, 32, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 20, 20, 17, 4, tzinfo=datetime.timezone.utc), 'time_taken': 51568.0, 'time_delta': '14:19:28', 'additions': 263, 'deletions': 36, 'state': 'closed'}, {'id': 460849665, 'number': 72, 'closed': datetime.datetime(2020, 8, 3, 12, 44, 8, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 1, 6, 49, 5, tzinfo=datetime.timezone.utc), 'time_taken': 194103.0, 'time_delta': '2 days, 5:55:03', 'additions': 77, 'deletions': 55, 'state': 'closed'}, {'id': 449546663, 'number': 71, 'closed': datetime.datetime(2020, 7, 27, 19, 52, 1, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 15, 15, 10, 52, tzinfo=datetime.timezone.utc), 'time_taken': 1053669.0, 'time_delta': '12 days, 4:41:09', 'additions': 825, 'deletions': 1126, 'state': 'closed'}, {'id': 442507555, 'number': 67, 'closed': datetime.datetime(2020, 7, 13, 13, 58, 36, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 1, 7, 43, 14, tzinfo=datetime.timezone.utc), 'time_taken': 1059322.0, 'time_delta': '12 days, 6:15:22', 'additions': 1191, 'deletions': 1561, 'state': 'closed'}, {'id': 440263537, 'number': 66, 'closed': datetime.datetime(2020, 7, 3, 9, 18, 19, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 25, 21, 20, 14, tzinfo=datetime.timezone.utc), 'time_taken': 647885.0, 'time_delta': '7 days, 11:58:05', 'additions': 1350, 'deletions': 660, 'state': 'closed'}, {'id': 435081901, 'number': 65, 'closed': datetime.datetime(2020, 6, 17, 8, 46, 26, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 16, 9, 14, 12, tzinfo=datetime.timezone.utc), 'time_taken': 84734.0, 'time_delta': '23:32:14', 'additions': 3, 'deletions': 1, 'state': 'closed'}, {'id': 433634997, 'number': 64, 'closed': datetime.datetime(2020, 6, 18, 10, 36, 35, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 12, 11, 50, 35, tzinfo=datetime.timezone.utc), 'time_taken': 513960.0, 'time_delta': '5 days, 22:46:00', 'additions': 1257, 'deletions': 777, 'state': 'closed'}]"
