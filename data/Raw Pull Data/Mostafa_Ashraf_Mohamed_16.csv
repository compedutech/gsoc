pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
651551685,Spirv-fuzz: Enhancing permute function variables and it's testing,"Fixes #4257. 
Fixes #4259. ",True,4295,https://api.github.com/repos/KhronosGroup/SPIRV-Tools/pulls/4295,https://github.com/KhronosGroup/SPIRV-Tools/pull/4295,closed,32,6,3,3,1,8,0,0,[],2021-05-24 18:52:58+00:00,2021-05-25 23:41:32+00:00,103714.0,"1 day, 4:48:34","[{'comment_id': 638616454, 'comment_body': 'While we are here, the comments above should end with a full stop / period. ', 'comment_created': datetime.datetime(2021, 5, 25, 9, 26, 42, tzinfo=datetime.timezone.utc), 'commenter': 'paulthomson', 'type': 'User'}, {'comment_id': 638689036, 'comment_body': ""After thinking about it, I don't think we should swap the _contents_ of two instructions. That seems difficult in terms of trying to preserve the data structures in ir_context. E.g. the DecorationManager stores pointers to Instruction (i.e. Instruction*), so we really don't want to be changing the pointees. \r\n\r\nInstead, try this:\r\n\r\n```\r\nstd::unique_ptr<opt::Instruction> temp_instruction =\r\n      MakeUnique<opt::Instruction>();\r\n\r\n  temp_instruction->InsertBefore(instruction1);\r\n  instruction1->InsertAfter(instruction2);\r\n  instruction2->InsertAfter(temp_instruction.get());\r\n  temp_instruction->RemoveFromList();\r\n```\r\n\r\nWith this change, I think you can also remove the lines below that update the def use manager. I don't think we need to update or invalidate any analyses here.\r\n\r\nOne analysis that you might think you need to invalidate is the dominator analysis. However, the dominates relationship for instructions within a block is computed on-the-fly based on the instruction list, so nothing else needs to be updated or invalidated."", 'comment_created': datetime.datetime(2021, 5, 25, 11, 10, 20, tzinfo=datetime.timezone.utc), 'commenter': 'paulthomson', 'type': 'User'}, {'comment_id': 638689948, 'comment_body': 'Once you have made the change above per my suggestion, I guess you will need to swap these back! :-) And the same below. ', 'comment_created': datetime.datetime(2021, 5, 25, 11, 11, 43, tzinfo=datetime.timezone.utc), 'commenter': 'paulthomson', 'type': 'User'}, {'comment_id': 638809886, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 5, 25, 13, 53, 16, tzinfo=datetime.timezone.utc), 'commenter': 'Mostafa-ashraf19', 'type': 'User'}, {'comment_id': 638810188, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 5, 25, 13, 53, 33, tzinfo=datetime.timezone.utc), 'commenter': 'Mostafa-ashraf19', 'type': 'User'}, {'comment_id': 638814846, 'comment_body': 'Done, Thanks for the clarification @paulthomson. Can I understand what is the benefits of a known ""dominates relationship for instructions""?', 'comment_created': datetime.datetime(2021, 5, 25, 13, 58, 29, tzinfo=datetime.timezone.utc), 'commenter': 'Mostafa-ashraf19', 'type': 'User'}, {'comment_id': 638815878, 'comment_body': 'This is explained in the SPIR-V introduction slides, which we will go through again in our meeting...now! :-) ', 'comment_created': datetime.datetime(2021, 5, 25, 13, 59, 38, tzinfo=datetime.timezone.utc), 'commenter': 'paulthomson', 'type': 'User'}, {'comment_id': 638894409, 'comment_body': 'Thanks :-)', 'comment_created': datetime.datetime(2021, 5, 25, 15, 15, 22, tzinfo=datetime.timezone.utc), 'commenter': 'Mostafa-ashraf19', 'type': 'User'}]","[{'commit_sha': '8b07424ec22d313dc9f16d4a7e555c530d961619', 'committer_username': 'Mostafa-ashraf19', 'committer_name': 'Mostafa Ashraf', 'committer_email': 'mostaphaashraf1996@gmail.com', 'commit_date': datetime.datetime(2019, 12, 2, 23, 2, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': '87f4c2155c048f901582da1d8cb14f447123b8a4', 'committer_username': 'Mostafa-ashraf19', 'committer_name': 'Mostafa Ashraf', 'committer_email': 'mostaphaashraf1996@gmail.com', 'commit_date': datetime.datetime(2019, 12, 2, 23, 2, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': '011a7c9c4b0cc978195c982880e3acf79e0f189b', 'committer_username': 'Mostafa-ashraf19', 'committer_name': 'Mostafa Ashraf', 'committer_email': 'mostaphaashraf1996@gmail.com', 'commit_date': datetime.datetime(2019, 12, 2, 23, 2, 10, tzinfo=datetime.timezone.utc)}]",Mostafa Ashraf,58448694,mostaphaashraf1996@gmail.com,User,,43,,10,36
650786162,Enhance test to improve lines covered,"This PR will solve #4287 by enhancing the test to get 100% of lines covered.

Results `100%` instead of `98%`.",True,4289,https://api.github.com/repos/KhronosGroup/SPIRV-Tools/pulls/4289,https://github.com/KhronosGroup/SPIRV-Tools/pull/4289,closed,5,0,1,2,1,0,0,0,[],2021-05-23 13:04:26+00:00,2021-05-24 13:24:12+00:00,87586.0,"1 day, 0:19:46",[],"[{'commit_sha': 'c347d5a9e44c6a27e8f71c521b6e5c5fb37bae24', 'committer_username': 'Mostafa-ashraf19', 'committer_name': 'Mostafa Ashraf', 'committer_email': 'mostaphaashraf1996@gmail.com', 'commit_date': datetime.datetime(2019, 12, 2, 23, 2, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e29882634f770c5c38d436f3228dff9136adc0cf', 'committer_username': 'Mostafa-ashraf19', 'committer_name': 'Mostafa Ashraf', 'committer_email': 'mostaphaashraf1996@gmail.com', 'commit_date': datetime.datetime(2019, 12, 2, 23, 2, 10, tzinfo=datetime.timezone.utc)}]",Mostafa Ashraf,58448694,mostaphaashraf1996@gmail.com,User,,43,,10,36
660329767,Spirv-fuzz: Improve TransformationAddBitInstructionSynonym to check integer signedness,"This PR fixes #4170, by check the signedness of bitwise operands in transformation and fuzzer for avoiding `Expected Base Type to be equal to Result Type`.",True,4312,https://api.github.com/repos/KhronosGroup/SPIRV-Tools/pulls/4312,https://github.com/KhronosGroup/SPIRV-Tools/pull/4312,closed,131,43,4,11,1,37,0,0,[],2021-06-02 19:16:45+00:00,2021-06-09 18:56:56+00:00,603611.0,"6 days, 23:40:11","[{'comment_id': 644650082, 'comment_body': 'You can remove this condition since we are already checking that the `instruction` is one of those opcodes above.', 'comment_created': datetime.datetime(2021, 6, 3, 9, 46, 24, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 644650282, 'comment_body': '`this` can be omitted.', 'comment_created': datetime.datetime(2021, 6, 3, 9, 46, 40, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 644654130, 'comment_body': ""`OpNot` operand can be a vector as well. Since this transformation doesn't support vectors, I suggest you put a condition on lines 111-116 above your changes."", 'comment_created': datetime.datetime(2021, 6, 3, 9, 52, 10, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 644656114, 'comment_body': ""I don't think this covers all the cases (e.g. when two operands are unsigned and the result is signed). It'd be better to just rewrite this into `first_operand_sign != second_operand_sign || first_operand_sign != type_id_sign`."", 'comment_created': datetime.datetime(2021, 6, 3, 9, 55, 1, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 644656970, 'comment_body': 'You can remove the condition since we are already checking that the `instruction` is one of those opcodes above.', 'comment_created': datetime.datetime(2021, 6, 3, 9, 56, 5, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 644658010, 'comment_body': 'These instructions can take vector operands. To fix this, you can move the condition on line 99 above your changes.', 'comment_created': datetime.datetime(2021, 6, 3, 9, 57, 37, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 644658676, 'comment_body': 'The same thing as in the fuzzer pass. Please, rewrite this into `first_operand_sign == second_operand_sign && first_operand_sign == type_id_sign`.', 'comment_created': datetime.datetime(2021, 6, 3, 9, 58, 37, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 644660176, 'comment_body': 'You can just rename this to `DifferentSingedness` to enable the test.\r\n\r\nAlso, please add `OpBitwiseOr`, `OpBitwiseXor` and `OpBitwiseAnd` instructions (with operands with different signedness) to this test as well.', 'comment_created': datetime.datetime(2021, 6, 3, 10, 0, 45, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 644700657, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 6, 3, 11, 6, 57, tzinfo=datetime.timezone.utc), 'commenter': 'Mostafa-ashraf19', 'type': 'User'}, {'comment_id': 644700780, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 6, 3, 11, 7, 9, tzinfo=datetime.timezone.utc), 'commenter': 'Mostafa-ashraf19', 'type': 'User'}, {'comment_id': 644703357, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 6, 3, 11, 11, 28, tzinfo=datetime.timezone.utc), 'commenter': 'Mostafa-ashraf19', 'type': 'User'}, {'comment_id': 644703876, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 6, 3, 11, 12, 24, tzinfo=datetime.timezone.utc), 'commenter': 'Mostafa-ashraf19', 'type': 'User'}, {'comment_id': 644704852, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 6, 3, 11, 14, 3, tzinfo=datetime.timezone.utc), 'commenter': 'Mostafa-ashraf19', 'type': 'User'}, {'comment_id': 644707752, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 6, 3, 11, 18, 52, tzinfo=datetime.timezone.utc), 'commenter': 'Mostafa-ashraf19', 'type': 'User'}, {'comment_id': 644707807, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 6, 3, 11, 18, 59, tzinfo=datetime.timezone.utc), 'commenter': 'Mostafa-ashraf19', 'type': 'User'}, {'comment_id': 644735356, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 6, 3, 12, 6, 19, tzinfo=datetime.timezone.utc), 'commenter': 'Mostafa-ashraf19', 'type': 'User'}, {'comment_id': 644765897, 'comment_body': ""I agree with @paulthomson that it'd be better to refactor duplicated code into a separate method. Usually, when we have duplications like this, we create a public static method in the transformation class and put all the duplicated code there. Then, we can call that method in `IsApplicable` as well as `FuzzerPass::Apply`. You can check out an example in `TransformationAddCopyMemory`."", 'comment_created': datetime.datetime(2021, 6, 3, 12, 52, 27, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 644769851, 'comment_body': 'It would make sense to use these instructions in the test somehow as well. For example, you can check that the transformation is inapplicable for the first instruction and can be applied for the second one.', 'comment_created': datetime.datetime(2021, 6, 3, 12, 58, 15, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 644861889, 'comment_body': 'OK, I will do that.', 'comment_created': datetime.datetime(2021, 6, 3, 14, 50, 53, tzinfo=datetime.timezone.utc), 'commenter': 'Mostafa-ashraf19', 'type': 'User'}, {'comment_id': 645076505, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 6, 3, 19, 39, 25, tzinfo=datetime.timezone.utc), 'commenter': 'Mostafa-ashraf19', 'type': 'User'}, {'comment_id': 645076549, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 6, 3, 19, 39, 31, tzinfo=datetime.timezone.utc), 'commenter': 'Mostafa-ashraf19', 'type': 'User'}, {'comment_id': 647257238, 'comment_body': 'I think we can also move the two `if` statements above into this function (they are duplicated in the `IsApplicable` as well).', 'comment_created': datetime.datetime(2021, 6, 8, 9, 2, 19, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 647257630, 'comment_body': 'I think we can also move the two `if` statements above into this function.', 'comment_created': datetime.datetime(2021, 6, 8, 9, 2, 50, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 647259758, 'comment_body': ""Probably better to rename the method to `IsInstructionSupported` if we are going to move those conditions into it.\n\nDon't forget to adjust the docs."", 'comment_created': datetime.datetime(2021, 6, 8, 9, 5, 39, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 647260676, 'comment_body': 'This should be `operand_sign == type_id_sign` since the function is supposed to return `true` when the operands have the same signedness.', 'comment_created': datetime.datetime(2021, 6, 8, 9, 6, 50, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 647261073, 'comment_body': 'Same as above - `first_operand_sign == second_operand_sign && first_operand_sign == type_id_sign`.', 'comment_created': datetime.datetime(2021, 6, 8, 9, 7, 25, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 647265448, 'comment_body': ""This is probably a tedious change but it's a good idea to always have tests to test a single thing. In this case, this vector of numbers is supposed to have fresh (unused) ids whereas the first two ids (40, 41) are already in use. It'd be better to adjust it to start the ids from, for example, 300. To simplify this, you can just create a vector separately and initialize it with necessary ids in a loop (or use `std::iota`)."", 'comment_created': datetime.datetime(2021, 6, 8, 9, 13, 15, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 647950110, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 6, 9, 4, 7, 32, tzinfo=datetime.timezone.utc), 'commenter': 'Mostafa-ashraf19', 'type': 'User'}, {'comment_id': 647950160, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 6, 9, 4, 7, 44, tzinfo=datetime.timezone.utc), 'commenter': 'Mostafa-ashraf19', 'type': 'User'}, {'comment_id': 647950220, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 6, 9, 4, 7, 52, tzinfo=datetime.timezone.utc), 'commenter': 'Mostafa-ashraf19', 'type': 'User'}, {'comment_id': 647950244, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 6, 9, 4, 7, 58, tzinfo=datetime.timezone.utc), 'commenter': 'Mostafa-ashraf19', 'type': 'User'}, {'comment_id': 647950263, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 6, 9, 4, 8, 2, tzinfo=datetime.timezone.utc), 'commenter': 'Mostafa-ashraf19', 'type': 'User'}, {'comment_id': 647974228, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 6, 9, 5, 21, 22, tzinfo=datetime.timezone.utc), 'commenter': 'Mostafa-ashraf19', 'type': 'User'}, {'comment_id': 648042193, 'comment_body': ""Don't forget to adjust the docs. This will be something like\r\n```\r\nReturns true if:\r\n- A |bit_instruction| is one of OpBitwiseOr, OpBitwiseAnd, OpBitwiseXor or OpNot.\r\n- |bit_instruction|'s operands are scalars.\r\n- The operands have the same signedness.\r\n```"", 'comment_created': datetime.datetime(2021, 6, 9, 7, 32, 25, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 648042598, 'comment_body': ""Don't forget to check here that the `instruction` is not a `nullptr`."", 'comment_created': datetime.datetime(2021, 6, 9, 7, 32, 56, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 648165302, 'comment_body': 'Done. I moved line 42 inside `IsInstructionSupported` method.', 'comment_created': datetime.datetime(2021, 6, 9, 10, 15, 42, tzinfo=datetime.timezone.utc), 'commenter': 'Mostafa-ashraf19', 'type': 'User'}, {'comment_id': 648165751, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 6, 9, 10, 16, 25, tzinfo=datetime.timezone.utc), 'commenter': 'Mostafa-ashraf19', 'type': 'User'}]","[{'commit_sha': 'db740b28adae51cf7adce04a70abc866e66354c6', 'committer_username': 'Mostafa-ashraf19', 'committer_name': 'Mostafa Ashraf', 'committer_email': 'mostaphaashraf1996@gmail.com', 'commit_date': datetime.datetime(2019, 12, 2, 23, 2, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1c472e239d3675367462b02440a9dcd85fc7c1ae', 'committer_username': 'Mostafa-ashraf19', 'committer_name': 'Mostafa Ashraf', 'committer_email': 'mostaphaashraf1996@gmail.com', 'commit_date': datetime.datetime(2019, 12, 2, 23, 2, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'da052fd28aed1adaf7c8fe49bb1a6257929e7fe4', 'committer_username': 'Mostafa-ashraf19', 'committer_name': 'Mostafa Ashraf', 'committer_email': 'mostaphaashraf1996@gmail.com', 'commit_date': datetime.datetime(2019, 12, 2, 23, 2, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e48355ecc2df1a2490d665ad7bb21bed898a0ad1', 'committer_username': 'Mostafa-ashraf19', 'committer_name': 'Mostafa Ashraf', 'committer_email': 'mostaphaashraf1996@gmail.com', 'commit_date': datetime.datetime(2019, 12, 2, 23, 2, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': '998eaaf435a4091d795068b25e8daca6abc11d1e', 'committer_username': 'Mostafa-ashraf19', 'committer_name': 'Mostafa Ashraf', 'committer_email': 'mostaphaashraf1996@gmail.com', 'commit_date': datetime.datetime(2019, 12, 2, 23, 2, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c952fd71818cbe99826e4a1a0de7b45df28078ea', 'committer_username': 'Mostafa-ashraf19', 'committer_name': 'Mostafa Ashraf', 'committer_email': 'mostaphaashraf1996@gmail.com', 'commit_date': datetime.datetime(2019, 12, 2, 23, 2, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5b3f6a28822b4a08f4f875c43010667751246f14', 'committer_username': 'Mostafa-ashraf19', 'committer_name': 'Mostafa Ashraf', 'committer_email': 'mostaphaashraf1996@gmail.com', 'commit_date': datetime.datetime(2019, 12, 2, 23, 2, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f5745651d9ec662e438ba10d53db9158d7618bb1', 'committer_username': 'Mostafa-ashraf19', 'committer_name': 'Mostafa Ashraf', 'committer_email': 'mostaphaashraf1996@gmail.com', 'commit_date': datetime.datetime(2019, 12, 2, 23, 2, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5bbb461ea46abd5aa107ef0ee8d6765e7f99b85e', 'committer_username': 'Mostafa-ashraf19', 'committer_name': 'Mostafa Ashraf', 'committer_email': 'mostaphaashraf1996@gmail.com', 'commit_date': datetime.datetime(2019, 12, 2, 23, 2, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5cc67d95056a996c065fa56e53fbdd6f83d42c3b', 'committer_username': 'Mostafa-ashraf19', 'committer_name': 'Mostafa Ashraf', 'committer_email': 'mostaphaashraf1996@gmail.com', 'commit_date': datetime.datetime(2019, 12, 2, 23, 2, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': '876ad5bd4ccd94546b483e2e0dabde8f3be89d65', 'committer_username': 'Mostafa-ashraf19', 'committer_name': 'Mostafa Ashraf', 'committer_email': 'mostaphaashraf1996@gmail.com', 'commit_date': datetime.datetime(2019, 12, 2, 23, 2, 10, tzinfo=datetime.timezone.utc)}]",Mostafa Ashraf,58448694,mostaphaashraf1996@gmail.com,User,,43,,10,36
654366497,Spirv-fuzz: Achieve coverage of TransformationAddDeadBlock test ,"This PR fixes #4290, by enhancing the test to get 100% of the lines covered.",True,4306,https://api.github.com/repos/KhronosGroup/SPIRV-Tools/pulls/4306,https://github.com/KhronosGroup/SPIRV-Tools/pull/4306,closed,93,0,1,2,1,10,1,0,[{'name': 'kokoro:run'}],2021-05-27 00:48:57+00:00,2021-06-02 16:16:44+00:00,574067.0,"6 days, 15:27:47","[{'comment_id': 640317411, 'comment_body': 'Can you add a comment to explain what is wrong with `transformation` - i.e., explaining why we should expect `IsApplicable` to return false?', 'comment_created': datetime.datetime(2021, 5, 27, 6, 17, 32, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 640318230, 'comment_body': ""A key part of the design of spirv-fuzz is that transformations should only be applied if `IsApplicable` holds. The `Apply` method (which is called by `ApplyAndCheckFreshIds`) assumes that `IsApplicable` holds.\r\n\r\nHere, you are applying a transformation for which `IsApplicable` returns *false*, and that's wrong.\r\n\r\nDo you need to apply the transformation? If the missing coverage was in branches of `IsApplicable` that return false then it would be fine to have a test that merely creates a bad transformation and asserts that it is not applicable."", 'comment_created': datetime.datetime(2021, 5, 27, 6, 19, 31, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 641810482, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 5, 28, 20, 54, 31, tzinfo=datetime.timezone.utc), 'commenter': 'Mostafa-ashraf19', 'type': 'User'}, {'comment_id': 641815282, 'comment_body': 'Yes, @afd, you are right, I want to apply the transformation, I\'ve followed your suggestion, and I think that\'s it: \r\n```CPP\r\n   \r\n    TEST(TransformationAddDeadBlockTest, NotApplicable) {\r\n  std::string reference_shader = R""(\r\n               OpCapability Shader\r\n          %1 = OpExtInstImport ""GLSL.std.450""\r\n               OpMemoryModel Logical GLSL450\r\n               OpEntryPoint Fragment %6 ""main""\r\n               OpExecutionMode %6 OriginUpperLeft\r\n\r\n; Types\r\n          %2 = OpTypeBool\r\n          %3 = OpTypeVoid\r\n          %4 = OpTypeFunction %3\r\n\r\n; Constants\r\n          %5 = OpConstantTrue %2\r\n\r\n; main function\r\n          %6 = OpFunction %3 None %4\r\n          %7 = OpLabel\r\n               OpSelectionMerge %11 None\r\n               OpBranchConditional %5 %8 %9\r\n          %8 = OpLabel\r\n               OpBranch %10\r\n          %9 = OpLabel\r\n               OpBranch %10\r\n         %10 = OpLabel\r\n               OpBranch %11\r\n         %11 = OpLabel\r\n               OpBranch %13\r\n         %12 = OpLabel\r\n               OpBranch %13\r\n         %13 = OpLabel\r\n               OpReturn\r\n               OpFunctionEnd\r\n  )"";\r\n  const auto env = SPV_ENV_UNIVERSAL_1_4;\r\n  const auto consumer = nullptr;\r\n  const auto context =\r\n      BuildModule(env, consumer, reference_shader, kFuzzAssembleOption);\r\n  spvtools::ValidatorOptions validator_options;\r\n  ASSERT_TRUE(fuzzerutil::IsValidAndWellFormed(context.get(), validator_options,\r\n                                               kConsoleMessageConsumer));\r\n  TransformationContext transformation_context(\r\n      MakeUnique<FactManager>(context.get()), validator_options);\r\n  auto transformation = TransformationAddDeadBlock(14, 11, false);\r\n\r\n  // Constant with same value of condition value not present.\r\n  ASSERT_FALSE(\r\n      transformation.IsApplicable(context.get(), transformation_context));\r\n\r\n  ApplyAndCheckFreshIds(transformation, context.get(), &transformation_context);\r\n\r\n  std::string variant_shader = R""(\r\n               OpCapability Shader\r\n          %1 = OpExtInstImport ""GLSL.std.450""\r\n               OpMemoryModel Logical GLSL450\r\n               OpEntryPoint Fragment %6 ""main""\r\n               OpExecutionMode %6 OriginUpperLeft\r\n\r\n; Types\r\n          %2 = OpTypeBool\r\n          %3 = OpTypeVoid\r\n          %4 = OpTypeFunction %3\r\n\r\n; Constants\r\n          %5 = OpConstantTrue %2\r\n\r\n; main function\r\n          %6 = OpFunction %3 None %4\r\n          %7 = OpLabel\r\n               OpSelectionMerge %11 None\r\n               OpBranchConditional %5 %8 %9\r\n          %8 = OpLabel\r\n               OpBranch %10\r\n          %9 = OpLabel\r\n               OpBranch %10\r\n         %10 = OpLabel\r\n               OpBranch %11\r\n         %11 = OpLabel\r\n               OpSelectionMerge %13 None\r\n               OpBranchConditional %5 %13 %14\r\n         %14 = OpLabel\r\n               OpBranch %13\r\n         %12 = OpLabel\r\n               OpBranch %13\r\n         %13 = OpLabel\r\n               OpReturn\r\n               OpFunctionEnd\r\n  )"";\r\n\r\n  ASSERT_FALSE(fuzzerutil::IsValidAndWellFormed(\r\n      context.get(), validator_options, kConsoleMessageConsumer));\r\n  ASSERT_FALSE(IsEqual(env, variant_shader, context.get()));\r\n}\r\n\r\n```\r\nIf I\'m right! I will push it. ', 'comment_created': datetime.datetime(2021, 5, 28, 21, 7, 4, tzinfo=datetime.timezone.utc), 'commenter': 'Mostafa-ashraf19', 'type': 'User'}, {'comment_id': 642927468, 'comment_body': 'In the above comment, I still see:\r\n\r\n```c++\r\n  ASSERT_FALSE(\r\n      transformation.IsApplicable(context.get(), transformation_context));\r\n\r\n  ApplyAndCheckFreshIds(transformation, context.get(), &transformation_context);\r\n```\r\n\r\nIn other words, IsApplicable will return false, and then you will call Apply. Thus, your test is doing something invalid (according to our rules about how transformations must be used). Based on the test name (""NotApplicable""), it looks like you want to test that IsApplicable returns false; you have done that. You must not apply that transformation. If you want to get coverage of something in `Apply` then write another test. Or, if you think the additional coverage should be part of this test, then create another transformation such that IsApplicable will return true so that you can then apply the transformation. ', 'comment_created': datetime.datetime(2021, 6, 1, 9, 14, 5, tzinfo=datetime.timezone.utc), 'commenter': 'paulthomson', 'type': 'User'}, {'comment_id': 642983959, 'comment_body': 'OK, Thanks @paulthomson, I will adjust it. ', 'comment_created': datetime.datetime(2021, 6, 1, 10, 35, 9, tzinfo=datetime.timezone.utc), 'commenter': 'Mostafa-ashraf19', 'type': 'User'}, {'comment_id': 643091815, 'comment_body': 'I\'ve understood what is the problem I made and fix the test. Could you please review this @afd, @paulthomson?\r\n```CPP\r\n\r\n      TEST(TransformationAddDeadBlockTest, Applicable) {\r\n        std::string reference_shader = R""(\r\n                     OpCapability Shader\r\n                %1 = OpExtInstImport ""GLSL.std.450""\r\n                     OpMemoryModel Logical GLSL450\r\n                     OpEntryPoint Fragment %6 ""main""\r\n                     OpExecutionMode %6 OriginUpperLeft\r\n      \r\n      ; Types\r\n                %2 = OpTypeBool\r\n                %3 = OpTypeVoid\r\n                %4 = OpTypeFunction %3\r\n      \r\n      ; Constants\r\n                %5 = OpConstantFalse %2\r\n      \r\n      ; main function\r\n                %6 = OpFunction %3 None %4\r\n                %7 = OpLabel\r\n                     OpSelectionMerge %11 None\r\n                     OpBranchConditional %5 %8 %9\r\n                %8 = OpLabel\r\n                     OpBranch %10\r\n                %9 = OpLabel\r\n                     OpBranch %10\r\n               %10 = OpLabel\r\n                     OpBranch %11\r\n               %11 = OpLabel\r\n                     OpBranch %13\r\n               %12 = OpLabel\r\n                     OpBranch %13\r\n               %13 = OpLabel\r\n                     OpReturn\r\n                     OpFunctionEnd\r\n        )"";\r\n        const auto env = SPV_ENV_UNIVERSAL_1_4;\r\n        const auto consumer = nullptr;\r\n        const auto context =\r\n            BuildModule(env, consumer, reference_shader, kFuzzAssembleOption);\r\n        spvtools::ValidatorOptions validator_options;\r\n        ASSERT_TRUE(fuzzerutil::IsValidAndWellFormed(context.get(), validator_options,\r\n                                                     kConsoleMessageConsumer));\r\n        TransformationContext transformation_context(\r\n            MakeUnique<FactManager>(context.get()), validator_options);\r\n        auto transformation = TransformationAddDeadBlock(14, 11, false);\r\n      \r\n        ASSERT_TRUE(\r\n            transformation.IsApplicable(context.get(), transformation_context));\r\n      \r\n        ApplyAndCheckFreshIds(transformation, context.get(), &transformation_context);\r\n      \r\n        std::string variant_shader = R""(\r\n                     OpCapability Shader\r\n                %1 = OpExtInstImport ""GLSL.std.450""\r\n                     OpMemoryModel Logical GLSL450\r\n                     OpEntryPoint Fragment %6 ""main""\r\n                     OpExecutionMode %6 OriginUpperLeft\r\n      \r\n      ; Types\r\n                %2 = OpTypeBool\r\n                %3 = OpTypeVoid\r\n                %4 = OpTypeFunction %3\r\n      \r\n      ; Constants\r\n                %5 = OpConstantFalse %2\r\n      \r\n      ; main function\r\n                %6 = OpFunction %3 None %4\r\n                %7 = OpLabel\r\n                     OpSelectionMerge %11 None\r\n                     OpBranchConditional %5 %8 %9\r\n                %8 = OpLabel\r\n                     OpBranch %10\r\n                %9 = OpLabel\r\n                     OpBranch %10\r\n               %10 = OpLabel\r\n                     OpBranch %11\r\n               %11 = OpLabel\r\n                     OpSelectionMerge %13 None\r\n                     OpBranchConditional %5 %14 %13\r\n               %14 = OpLabel\r\n                     OpBranch %13\r\n               %12 = OpLabel\r\n                     OpBranch %13\r\n               %13 = OpLabel\r\n                     OpReturn\r\n                     OpFunctionEnd\r\n        )"";\r\n      \r\n        ASSERT_TRUE(fuzzerutil::IsValidAndWellFormed(\r\n            context.get(), validator_options, kConsoleMessageConsumer));\r\n        ASSERT_TRUE(IsEqual(env, variant_shader, context.get()));\r\n      }\r\n\r\n```\r\n\r\n', 'comment_created': datetime.datetime(2021, 6, 1, 13, 15, 16, tzinfo=datetime.timezone.utc), 'commenter': 'Mostafa-ashraf19', 'type': 'User'}, {'comment_id': 643099968, 'comment_body': 'Looks good. I guess you are trying to cover the the use of OpConstantFalse? If so, maybe make it clear from the test name and/or with a comment above where you create the transformation.', 'comment_created': datetime.datetime(2021, 6, 1, 13, 25, 3, tzinfo=datetime.timezone.utc), 'commenter': 'paulthomson', 'type': 'User'}, {'comment_id': 643128227, 'comment_body': ""The change looks good to me. Alternatively, you could've changed the `%5 = OpConstantFalse %2` to `OpConstantTrue` and specified `true` instead of `false` here `auto transformation = TransformationAddDeadBlock(14, 11, false);`. That would also make the transformation applicable."", 'comment_created': datetime.datetime(2021, 6, 1, 13, 57, 16, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 643174820, 'comment_body': 'Yes, you are right @Vasniktel, but it will not handle the coverage case in the `apply` method in `transformation_add_dead_block.cpp`  ', 'comment_created': datetime.datetime(2021, 6, 1, 14, 48, 56, tzinfo=datetime.timezone.utc), 'commenter': 'Mostafa-ashraf19', 'type': 'User'}]","[{'commit_sha': '68cd9aba497c169c1fe6d0d8b148e46a9a6b1e53', 'committer_username': 'Mostafa-ashraf19', 'committer_name': 'Mostafa Ashraf', 'committer_email': 'mostaphaashraf1996@gmail.com', 'commit_date': datetime.datetime(2019, 12, 2, 23, 2, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a718f84c0113d38dd3b6bae239ae696efc0bfc7b', 'committer_username': 'Mostafa-ashraf19', 'committer_name': 'Mostafa Ashraf', 'committer_email': 'mostaphaashraf1996@gmail.com', 'commit_date': datetime.datetime(2019, 12, 2, 23, 2, 10, tzinfo=datetime.timezone.utc)}]",Mostafa Ashraf,58448694,mostaphaashraf1996@gmail.com,User,,43,,10,36
678220900,spirv-fuzz: Don't allow to use of a non-constant operands,"Fixes #4346. 

This PR is responsible for avoiding the replacement of constant operands with another one not constant. Particularly with atomic operations.
Rule: ""All used for Scope and Memory Semantics in shader capability must be of an `OpConstant`.""

### Example 

In this shader:
https://github.com/KhronosGroup/SPIRV-Tools/blob/8cc8b6562be9de063a22ddf7f75d11c641779e36/test/fuzz/transformation_replace_id_with_synonym_test.cpp#L1820-L1857
When we trying to do something like this:
https://github.com/KhronosGroup/SPIRV-Tools/blob/8cc8b6562be9de063a22ddf7f75d11c641779e36/test/fuzz/transformation_replace_id_with_synonym_test.cpp#L1878 
Or, 
https://github.com/KhronosGroup/SPIRV-Tools/blob/8cc8b6562be9de063a22ddf7f75d11c641779e36/test/fuzz/transformation_replace_id_with_synonym_test.cpp#L1883

That's forbidden because it's will break the rule mentioned above, because `%100` and `%101` must be `OpConstant`.",True,4349,https://api.github.com/repos/KhronosGroup/SPIRV-Tools/pulls/4349,https://github.com/KhronosGroup/SPIRV-Tools/pull/4349,closed,202,22,2,6,1,24,0,0,[],2021-06-25 22:55:44+00:00,2021-07-15 18:03:52+00:00,1710488.0,"19 days, 19:08:08","[{'comment_id': 662537087, 'comment_body': ""It looks like you changed this formatting by mistake - please revert to the original formatting. Occasionally this happens when using clang-format and I'm not quite sure why."", 'comment_created': datetime.datetime(2021, 7, 1, 19, 20, 45, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 662538611, 'comment_body': ""A few comments here.\r\n\r\nFirst: `opCode` does not follow the Google C++ style for variable naming - variable names use `snake_case`.\r\n\r\nSecond, I think it would be neater to use a switch statement here. You can switch on use_instruction->opcode(), have a case for each atomic operation and a default that breaks.\r\n\r\nThird: the cases need to be more nuanced: you should check whether `use_in_operand_index` is one of the indices corresponding to a scope or memory semantics argument and only return false in those cases - if it's not one of those operands you can just break from the switch statement."", 'comment_created': datetime.datetime(2021, 7, 1, 19, 23, 42, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 668311901, 'comment_body': ""What we want to do is return `false` for any operand that corresponds to a memory scope or memory semantics argument.\r\n\r\nThis varies from instruction to instruction. For many/most of them, it is indeed input operands 1 and 2, but not for all of them. For example, for `OpAtomicCompareExchange`, input operands 1, 2 and 3 cannot be replaced. Please check each instruction carefully.\r\n\r\nAlso: we should simply return false in such cases - we don't need to check whether the existing operand is an SpvOpConstant."", 'comment_created': datetime.datetime(2021, 7, 12, 23, 3, 8, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 668312494, 'comment_body': 'It\'s Section 2.16.2 of the SPIR-V spec, ""Validation Rules for Shader Capabilities"", that says:\r\n\r\n""All <id> used for Scope <id> and Memory Semantics <id> must be of an OpConstant.""\r\n\r\nSo this switch statement could be wrapped inside an if statement that checks whether the Shader capability is enabled. This can be obtained by looking up the feature manager from `ir_context`.', 'comment_created': datetime.datetime(2021, 7, 12, 23, 4, 47, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 669438234, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 7, 14, 9, 15, 33, tzinfo=datetime.timezone.utc), 'commenter': 'Mostafa-ashraf19', 'type': 'User'}, {'comment_id': 669438388, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 7, 14, 9, 15, 47, tzinfo=datetime.timezone.utc), 'commenter': 'Mostafa-ashraf19', 'type': 'User'}, {'comment_id': 669447054, 'comment_body': 'Add a comment here, something like:\r\n\r\n```\r\n// With the Shader capability, memory scope and memory semantics operands are required to be constants, so they cannot be replaced arbitrarily.\r\n```', 'comment_created': datetime.datetime(2021, 7, 14, 9, 27, 51, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 669447757, 'comment_body': 'Change this to:\r\n\r\n```\r\nif (use_in_operand_index == 1 || use_in_operand_index == 2) {\r\n  return false;\r\n}\r\nbreak;\r\n```\r\n\r\nAnd then add another switch case:\r\n\r\n```\r\ncase SpvOpAtomicCompareExchange:\r\n  ...\r\n```\r\n\r\nwhere you check the different condition for the compare exchange case.', 'comment_created': datetime.datetime(2021, 7, 14, 9, 28, 47, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 669448591, 'comment_body': ""I would omit this comment, as it merely duplicates information that's already available in the spec."", 'comment_created': datetime.datetime(2021, 7, 14, 9, 29, 57, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 669448758, 'comment_body': '""in shader"" -> ""with the Shader""', 'comment_created': datetime.datetime(2021, 7, 14, 9, 30, 13, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 669509525, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 7, 14, 11, 2, 48, tzinfo=datetime.timezone.utc), 'commenter': 'Mostafa-ashraf19', 'type': 'User'}, {'comment_id': 669509700, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 7, 14, 11, 3, 4, tzinfo=datetime.timezone.utc), 'commenter': 'Mostafa-ashraf19', 'type': 'User'}, {'comment_id': 669510155, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 7, 14, 11, 3, 47, tzinfo=datetime.timezone.utc), 'commenter': 'Mostafa-ashraf19', 'type': 'User'}, {'comment_id': 669510227, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 7, 14, 11, 3, 51, tzinfo=datetime.timezone.utc), 'commenter': 'Mostafa-ashraf19', 'type': 'User'}, {'comment_id': 669545025, 'comment_body': 'Please move the comment so that it is inside the if statement - to make it clear that it relates to the code in the body of the if statement.', 'comment_created': datetime.datetime(2021, 7, 14, 11, 58, 10, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 669545203, 'comment_body': 'Remove this line of whitespace.', 'comment_created': datetime.datetime(2021, 7, 14, 11, 58, 25, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 669545534, 'comment_body': ""Remove this line of whitespace, since you didn't leave whitespace between a break and the next case above."", 'comment_created': datetime.datetime(2021, 7, 14, 11, 58, 53, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 669592616, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 7, 14, 13, 0, 37, tzinfo=datetime.timezone.utc), 'commenter': 'Mostafa-ashraf19', 'type': 'User'}, {'comment_id': 669592759, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 7, 14, 13, 0, 49, tzinfo=datetime.timezone.utc), 'commenter': 'Mostafa-ashraf19', 'type': 'User'}, {'comment_id': 669592813, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 7, 14, 13, 0, 53, tzinfo=datetime.timezone.utc), 'commenter': 'Mostafa-ashraf19', 'type': 'User'}, {'comment_id': 670208049, 'comment_body': 'The TODO comment above this test should be removed, because you have now addressed the TODO.', 'comment_created': datetime.datetime(2021, 7, 15, 7, 31, 34, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 670208822, 'comment_body': 'Thanks for improving the test to feature AtomicExchange and AtomicStore.\r\n\r\nIt would be even better if you could extend it further to feature the other atomic operations that are available with the Shader capability, so that we have good coverage.', 'comment_created': datetime.datetime(2021, 7, 15, 7, 32, 47, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 670227127, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 7, 15, 7, 59, 5, tzinfo=datetime.timezone.utc), 'commenter': 'Mostafa-ashraf19', 'type': 'User'}, {'comment_id': 670607915, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 7, 15, 16, 9, 45, tzinfo=datetime.timezone.utc), 'commenter': 'Mostafa-ashraf19', 'type': 'User'}]","[{'commit_sha': 'ed6d2267e013c0f8d586645a8087c4c7739a7690', 'committer_username': 'Mostafa-ashraf19', 'committer_name': 'Mostafa Ashraf', 'committer_email': 'mostaphaashraf1996@gmail.com', 'commit_date': datetime.datetime(2019, 12, 2, 23, 2, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': '092127883a9201e680bfaf81a98ffa88ee246bac', 'committer_username': 'Mostafa-ashraf19', 'committer_name': 'Mostafa Ashraf', 'committer_email': 'mostaphaashraf1996@gmail.com', 'commit_date': datetime.datetime(2019, 12, 2, 23, 2, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f0de602b5d0885fdcd55f561548770f5369b1554', 'committer_username': 'Mostafa-ashraf19', 'committer_name': 'Mostafa Ashraf', 'committer_email': 'mostaphaashraf1996@gmail.com', 'commit_date': datetime.datetime(2019, 12, 2, 23, 2, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b7a8ae5a9fb832fbd2279a635bfcb341ff06f99c', 'committer_username': 'Mostafa-ashraf19', 'committer_name': 'Mostafa Ashraf', 'committer_email': 'mostaphaashraf1996@gmail.com', 'commit_date': datetime.datetime(2019, 12, 2, 23, 2, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': '731ff45f2500cb21ba6abf1c8c925c5ee66efa39', 'committer_username': 'Mostafa-ashraf19', 'committer_name': 'Mostafa Ashraf', 'committer_email': 'mostaphaashraf1996@gmail.com', 'commit_date': datetime.datetime(2019, 12, 2, 23, 2, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': '28691cf79e0f315bf0ff1a99da59d67085e17105', 'committer_username': 'Mostafa-ashraf19', 'committer_name': 'Mostafa Ashraf', 'committer_email': 'mostaphaashraf1996@gmail.com', 'commit_date': datetime.datetime(2019, 12, 2, 23, 2, 10, tzinfo=datetime.timezone.utc)}]",Mostafa Ashraf,58448694,mostaphaashraf1996@gmail.com,User,,43,,10,36
678081147,spirv-fuzz: Support atomic operations opcode,"Fixes #4345. 

This PR is responsible for supporting atomic operations opcode and checks it's in operands signedness neutrality.

### Example:

Original shader 

https://github.com/KhronosGroup/SPIRV-Tools/blob/8cc8b6562be9de063a22ddf7f75d11c641779e36/test/fuzz/transformation_replace_id_with_synonym_test.cpp#L1911-L1948

After applying transformation

https://github.com/KhronosGroup/SPIRV-Tools/blob/8cc8b6562be9de063a22ddf7f75d11c641779e36/test/fuzz/transformation_replace_id_with_synonym_test.cpp#L1992-L2029

That's the Important changes from original shader ` %21 = OpAtomicLoad %6 %14 %15 %20`, and this transformed  shader ` %21 = OpAtomicLoad %6 %14 %100 %101`. ",True,4348,https://api.github.com/repos/KhronosGroup/SPIRV-Tools/pulls/4348,https://github.com/KhronosGroup/SPIRV-Tools/pull/4348,closed,237,6,2,6,2,30,1,0,[{'name': 'kokoro:run'}],2021-06-25 17:43:14+00:00,2021-07-20 09:03:59+00:00,2128845.0,"24 days, 15:20:45","[{'comment_id': 659034814, 'comment_body': ""This is the right function to be editing, but what you have done is not quite enough.\r\n\r\nFor the existing instructions above, such as `OpSGreaterThanEqual`, all of their arguments have integer type and the signedness is not important, so we can ignore the `use_in_operand_index` parameter.\r\n\r\nHowever, that's not true for atomic operations.\r\n\r\nFor example, with `OpAtomicLoad` there are three operands: pointer, memory scope and memory semantics. The instruction is agnostic to the signedness of the memory scope and memory semantics operands. So we should return true for this instruction only when `use_in_operand_index` is >= 1.\r\n\r\nWith `OpAtomicCompareExchange` there are several operands: pointer, memory scope, memory semantics for equality, memory semantics for inequality, value, and comparator. If you read the description of that instruction carefully you'll see that the value and comparator operands have to have types that match the result type of the instruction, and the pointee type of the pointer, respectively, thus the instruction is *not* agnostic to the signedness of these operands. So for this instruction we should return true only if `use_in_operand_index` is 1, 2 or 3.\r\n\r\nCan you please go through the instructions and think carefully about for which operands the signedness doesn't matter? "", 'comment_created': datetime.datetime(2021, 6, 25, 21, 3, 25, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 659063415, 'comment_body': 'Okay, I will do that.', 'comment_created': datetime.datetime(2021, 6, 25, 22, 17, 2, tzinfo=datetime.timezone.utc), 'commenter': 'Mostafa-ashraf19', 'type': 'User'}, {'comment_id': 670210876, 'comment_body': 'Because this PR addresses the above TODO comment, the TODO comment should be removed as part of the PR.', 'comment_created': datetime.datetime(2021, 7, 15, 7, 35, 51, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 670212489, 'comment_body': ""I think we need to keep this test disabled at the moment.\r\n\r\nThe reason is that #4349 is going to make it illegal to replace a memory semantics or memory scope operand, so replacing them with constants of a different sign won't be allowed anymore by spirv-fuzz (even though it is legal).\r\n\r\nWe can consider returning to this particular test in the future."", 'comment_created': datetime.datetime(2021, 7, 15, 7, 38, 11, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 670215062, 'comment_body': 'Please remove this comment as part of the PR, since the purpose of the PR is to enable the functionality that this tests.', 'comment_created': datetime.datetime(2021, 7, 15, 7, 42, 13, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 670215383, 'comment_body': 'Please improve this, and the rest of the test, to cover all the atomic operations that are allowed with the Shader capability.', 'comment_created': datetime.datetime(2021, 7, 15, 7, 42, 42, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 670516136, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 7, 15, 14, 28, 38, tzinfo=datetime.timezone.utc), 'commenter': 'Mostafa-ashraf19', 'type': 'User'}, {'comment_id': 670516454, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 7, 15, 14, 28, 56, tzinfo=datetime.timezone.utc), 'commenter': 'Mostafa-ashraf19', 'type': 'User'}, {'comment_id': 670611136, 'comment_body': 'All right!', 'comment_created': datetime.datetime(2021, 7, 15, 16, 13, 20, tzinfo=datetime.timezone.utc), 'commenter': 'Mostafa-ashraf19', 'type': 'User'}, {'comment_id': 670658082, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 7, 15, 17, 8, 26, tzinfo=datetime.timezone.utc), 'commenter': 'Mostafa-ashraf19', 'type': 'User'}, {'comment_id': 671131400, 'comment_body': ""You can include that instruction in the list of case labels, and there's no need to check for capability.\r\n\r\nThe reason is that whether signedness of operands matters is independent of the capability.\r\n\r\nThat's different from the situation with operands being OpConstant in your previous PR - there, the capability determined the rules. Here the capability only determines whether this instruction exists. If it doesn't exist we won't see it in this function, so that's OK :)\r\n\r\nIn short: you can just include it in the list of case labels, and then have your `return` statement handle all of them."", 'comment_created': datetime.datetime(2021, 7, 16, 10, 13, 4, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 671131657, 'comment_body': 'Remove this.', 'comment_created': datetime.datetime(2021, 7, 16, 10, 13, 27, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 671131922, 'comment_body': 'Change ""Forbidden"" to something like: ""Signedness check should not occur on a pointer operand.""', 'comment_created': datetime.datetime(2021, 7, 16, 10, 13, 56, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 671132052, 'comment_body': 'Similar.', 'comment_created': datetime.datetime(2021, 7, 16, 10, 14, 8, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 671132483, 'comment_body': ""Same as above, there's no need for this check. If the module contains an OpAtomicCompareExchangeWeak instruction then we should handle signedness of its operands appropriately."", 'comment_created': datetime.datetime(2021, 7, 16, 10, 14, 51, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 671132721, 'comment_body': 'Similar change to the string.', 'comment_created': datetime.datetime(2021, 7, 16, 10, 15, 20, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 671132962, 'comment_body': 'No need for these checks.', 'comment_created': datetime.datetime(2021, 7, 16, 10, 15, 44, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 671134856, 'comment_body': ""Actually, I think now that 4349 is merged this test will no longer pass: 4349 will stop the synonym replacements being possible due to the rules on constants for the Shader capability.\r\n\r\nPlease confirm this by updating master and rebasing, and then seeing whether this fails. If it does fail, please put back the comment about the test being disabled and make the test disabled again.\r\n\r\nIf it passes then let's discuss (because I don't think it should)."", 'comment_created': datetime.datetime(2021, 7, 16, 10, 19, 5, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 671165781, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 7, 16, 11, 17, 22, tzinfo=datetime.timezone.utc), 'commenter': 'Mostafa-ashraf19', 'type': 'User'}, {'comment_id': 671165883, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 7, 16, 11, 17, 32, tzinfo=datetime.timezone.utc), 'commenter': 'Mostafa-ashraf19', 'type': 'User'}, {'comment_id': 671166080, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 7, 16, 11, 17, 56, tzinfo=datetime.timezone.utc), 'commenter': 'Mostafa-ashraf19', 'type': 'User'}, {'comment_id': 671166335, 'comment_body': 'OK, Done.', 'comment_created': datetime.datetime(2021, 7, 16, 11, 18, 29, tzinfo=datetime.timezone.utc), 'commenter': 'Mostafa-ashraf19', 'type': 'User'}, {'comment_id': 671167826, 'comment_body': 'OK, removed.', 'comment_created': datetime.datetime(2021, 7, 16, 11, 21, 23, tzinfo=datetime.timezone.utc), 'commenter': 'Mostafa-ashraf19', 'type': 'User'}, {'comment_id': 671168273, 'comment_body': 'Changed.', 'comment_created': datetime.datetime(2021, 7, 16, 11, 22, 14, tzinfo=datetime.timezone.utc), 'commenter': 'Mostafa-ashraf19', 'type': 'User'}, {'comment_id': 671170733, 'comment_body': 'Thanks for the clarification, done.', 'comment_created': datetime.datetime(2021, 7, 16, 11, 27, 4, tzinfo=datetime.timezone.utc), 'commenter': 'Mostafa-ashraf19', 'type': 'User'}, {'comment_id': 671213766, 'comment_body': '@afd Test `SignOfAtomicScopeAndMemorySemanticsDoesNotMatter` fails.', 'comment_created': datetime.datetime(2021, 7, 16, 12, 36, 2, tzinfo=datetime.timezone.utc), 'commenter': 'Mostafa-ashraf19', 'type': 'User'}, {'comment_id': 671554484, 'comment_body': ""You should reinstate this comment, since we weren't able to enable the test after all."", 'comment_created': datetime.datetime(2021, 7, 16, 22, 30, 38, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 671554672, 'comment_body': ""This kind of comment doesn't belong in the source code, and we already have TODO comments explaining that the test isn't expected to pass at present, so please remove."", 'comment_created': datetime.datetime(2021, 7, 16, 22, 31, 21, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 671569110, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 7, 16, 23, 29, 20, tzinfo=datetime.timezone.utc), 'commenter': 'Mostafa-ashraf19', 'type': 'User'}, {'comment_id': 671569138, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 7, 16, 23, 29, 27, tzinfo=datetime.timezone.utc), 'commenter': 'Mostafa-ashraf19', 'type': 'User'}]","[{'commit_sha': '282b67d48717de5fc2762253a0b9f80766e34049', 'committer_username': 'Mostafa-ashraf19', 'committer_name': 'Mostafa Ashraf', 'committer_email': 'mostaphaashraf1996@gmail.com', 'commit_date': datetime.datetime(2019, 12, 2, 23, 2, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6ab1848bb58ea6bf9f5190a1d448dcb59ff48155', 'committer_username': 'Mostafa-ashraf19', 'committer_name': 'Mostafa Ashraf', 'committer_email': 'mostaphaashraf1996@gmail.com', 'commit_date': datetime.datetime(2019, 12, 2, 23, 2, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': '00d6708d4ca6b90e9f4956bbb63bca4d0d2c8676', 'committer_username': 'Mostafa-ashraf19', 'committer_name': 'Mostafa Ashraf', 'committer_email': 'mostaphaashraf1996@gmail.com', 'commit_date': datetime.datetime(2019, 12, 2, 23, 2, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3edc24a3790c53a0cf3f206f83bbbceda5faf83d', 'committer_username': 'Mostafa-ashraf19', 'committer_name': 'Mostafa Ashraf', 'committer_email': 'mostaphaashraf1996@gmail.com', 'commit_date': datetime.datetime(2019, 12, 2, 23, 2, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1995716809c5dc7cc26b2febf9182ee28b1844d0', 'committer_username': 'Mostafa-ashraf19', 'committer_name': 'Mostafa Ashraf', 'committer_email': 'mostaphaashraf1996@gmail.com', 'commit_date': datetime.datetime(2019, 12, 2, 23, 2, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': '300c98a51797f0a65e067842d38a1079a80b0b44', 'committer_username': 'Mostafa-ashraf19', 'committer_name': 'Mostafa Ashraf', 'committer_email': 'mostaphaashraf1996@gmail.com', 'commit_date': datetime.datetime(2019, 12, 2, 23, 2, 10, tzinfo=datetime.timezone.utc)}]",Mostafa Ashraf,58448694,mostaphaashraf1996@gmail.com,User,,43,,10,36
673186670,Spirv-fuzz: support AtomicLoad (WIP),Fixes #4324.,True,4330,https://api.github.com/repos/KhronosGroup/SPIRV-Tools/pulls/4330,https://github.com/KhronosGroup/SPIRV-Tools/pull/4330,closed,582,70,7,18,1,98,0,0,[],2021-06-18 05:52:06+00:00,2021-08-03 20:51:26+00:00,4028360.0,"46 days, 14:59:20","[{'comment_id': 654768525, 'comment_body': 'Note that the spec also says this, if the Shader capability is ues:\r\n\r\n> Atomic access rules\r\n>\r\n>The pointers taken by atomic operation instructions are further restricted to not point into the Function storage class.\r\n\r\nThus your transformation should be designed to say that a transformation that tries to do an atomic load from a pointer with Function storage class is *not* allowed if the module uses the Shader capability.', 'comment_created': datetime.datetime(2021, 6, 19, 8, 38, 3, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 654768635, 'comment_body': 'When we discussed scopes in our recent meeting I forgot to mention this: CrossDevice is for memory operations that should be visible right across the system - even when multiple GPUs are executing simultaneously.', 'comment_created': datetime.datetime(2021, 6, 19, 8, 39, 17, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 654768758, 'comment_body': 'These are only allowed if certain capabilities are used, so you could either (1) ignore them completely, of (2) allow them only if the module has the right capabilities.', 'comment_created': datetime.datetime(2021, 6, 19, 8, 40, 33, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 654769288, 'comment_body': 'This looks along the right lines.\r\n\r\nI suggset you have:\r\n\r\n- uint32_t fresh_id\r\n- uint32_t pointer_id\r\n- bool is_atomic\r\n- uint32_t memory_scope // required to be 0 if is_atomic is false\r\n- uint32_t memory_semantics // required to be 0 if is_atomic is false\r\n- InstructionDescriptor instruction_to_insert_before\r\n\r\nI would not use any default parameters.', 'comment_created': datetime.datetime(2021, 6, 19, 8, 46, 23, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 655781790, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 6, 21, 23, 58, 9, tzinfo=datetime.timezone.utc), 'commenter': 'Mostafa-ashraf19', 'type': 'User'}, {'comment_id': 675183156, 'comment_body': 'Remove this. If `is_atomic` is true then we want the `TransformationLoad` class to always add an `OpAtomicLoad` instruction with scope `Invocation`, so there is no need to store anything about the scope in the protobuf.', 'comment_created': datetime.datetime(2021, 7, 22, 21, 45, 20, tzinfo=datetime.timezone.utc), 'commenter': 'paulthomson', 'type': 'User'}, {'comment_id': 675185127, 'comment_body': 'Remove this. If `is_atomic` is true then we want the `TransformationLoad` class to always add an `OpAtomicLoad` instruction with memory semantics `None (Relaxed)` bitwise OR with either `WorkgroupStorage` or `UniformStorage`.\r\n\r\nThe code in the `TransformationLoad` class will choose `WorkgroupStorage` or `UniformStorage` by considering the storage class of the type of the instruction `pointer_id`.\r\n\r\nThus, the code in the `TransformationLoad` class does not require any memory semantics information from the protobuf.', 'comment_created': datetime.datetime(2021, 7, 22, 21, 49, 23, tzinfo=datetime.timezone.utc), 'commenter': 'paulthomson', 'type': 'User'}, {'comment_id': 675267991, 'comment_body': 'Done. ', 'comment_created': datetime.datetime(2021, 7, 23, 2, 11, 37, tzinfo=datetime.timezone.utc), 'commenter': 'Mostafa-ashraf19', 'type': 'User'}, {'comment_id': 675564423, 'comment_body': 'Sorry, please ignore this comment. ', 'comment_created': datetime.datetime(2021, 7, 23, 13, 28, 25, tzinfo=datetime.timezone.utc), 'commenter': 'paulthomson', 'type': 'User'}, {'comment_id': 675564515, 'comment_body': 'Sorry, please ignore this comment.', 'comment_created': datetime.datetime(2021, 7, 23, 13, 28, 33, tzinfo=datetime.timezone.utc), 'commenter': 'paulthomson', 'type': 'User'}, {'comment_id': 675568307, 'comment_body': 'Please rename `memory_scope` to `memory_scope_id`. Please rename `memory_semantics` to `memory_semantics_id`. The doc comments could be something like:\r\n\r\nThe [memory scope | memory semantics] for the atomic load. Ignored unless |is_atomic| is true.', 'comment_created': datetime.datetime(2021, 7, 23, 13, 33, 34, tzinfo=datetime.timezone.utc), 'commenter': 'paulthomson', 'type': 'User'}, {'comment_id': 675587315, 'comment_body': 'In addition to your changes, please also add the following checks to IsApplicable; if the checks fails then return false.\r\n\r\n* If `is_atomic` is true then:\r\n  * The memory scope and memory semantics ids must exist and must be ""available"" before |instruction_to_insert_before|. An ""available"" id is one that can be used without violating the rule that the id\'s definition must dominate its uses. Use `fuzzerutil::IdIsAvailableBeforeInstruction`. \r\n  * The memory scope and memory semantics ids must be `OpConstant` instructions. They must also have the correct type (32 bit integer - I don\'t think the signedness matters).\r\n  * The memory scope constant value must be that of `SpvScopeInvocation`.\r\n  * The memory semantics constant value must be either `SpvMemorySemanticsWorkgroupMemoryMask` or `SpvMemorySemanticsUniformMemoryMask`, depending on the type of the pointer id being loaded from. The memory ordering bits that define Acquire, Release, AcquireRelease, or SequentiallyConsistent, but must all be 0, which is implied by checking that the value is either `SpvMemorySemanticsWorkgroupMemoryMask` or `SpvMemorySemanticsUniformMemoryMask` (but we could include a comment that clarifies that we only ever create load instructions with relaxed ordering). \r\n\r\nPlease update the doc comment for IsApplicable.\r\n\r\nYou will then also need to add tests that cover every `return false`, but you don\'t have to do this immediately (we can review first), unless you want to. ', 'comment_created': datetime.datetime(2021, 7, 23, 13, 59, 43, tzinfo=datetime.timezone.utc), 'commenter': 'paulthomson', 'type': 'User'}, {'comment_id': 675686983, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 7, 23, 16, 22, 55, tzinfo=datetime.timezone.utc), 'commenter': 'Mostafa-ashraf19', 'type': 'User'}, {'comment_id': 677598753, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 7, 27, 16, 9, 3, tzinfo=datetime.timezone.utc), 'commenter': 'Mostafa-ashraf19', 'type': 'User'}, {'comment_id': 677644673, 'comment_body': 'I think you mean `||`. And I think you have the same issue below, more than once.', 'comment_created': datetime.datetime(2021, 7, 27, 17, 10, 30, tzinfo=datetime.timezone.utc), 'commenter': 'paulthomson', 'type': 'User'}, {'comment_id': 677646043, 'comment_body': ""Also, it must have 32 bits. `with signedness matters` -> actually, signedness does not matter (as far as I can tell, and you don't check it anyway)."", 'comment_created': datetime.datetime(2021, 7, 27, 17, 12, 24, tzinfo=datetime.timezone.utc), 'commenter': 'paulthomson', 'type': 'User'}, {'comment_id': 677648947, 'comment_body': 'I think you might have the `return false` and `break` the wrong way around.', 'comment_created': datetime.datetime(2021, 7, 27, 17, 16, 38, tzinfo=datetime.timezone.utc), 'commenter': 'paulthomson', 'type': 'User'}, {'comment_id': 677672771, 'comment_body': 'While you are here, please fix the comment above (store -> load). ', 'comment_created': datetime.datetime(2021, 7, 27, 17, 50, 55, tzinfo=datetime.timezone.utc), 'commenter': 'paulthomson', 'type': 'User'}, {'comment_id': 677676024, 'comment_body': ""I suggest removing `, 0 otherwise` in both cases because we don't actually check that (and I don't think we need to).\r\n\r\nAlso, technically, you should say something like: |message_.memory_scope_id| if |is_atomic| is true then this must be the id of an OpConstant 32 bit integer instruction with the value SpvScopeInvocation.\r\n\r\n(In other words, there are a few details missing.)"", 'comment_created': datetime.datetime(2021, 7, 27, 17, 55, 39, tzinfo=datetime.timezone.utc), 'commenter': 'paulthomson', 'type': 'User'}, {'comment_id': 677684182, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 7, 27, 18, 7, 19, tzinfo=datetime.timezone.utc), 'commenter': 'Mostafa-ashraf19', 'type': 'User'}, {'comment_id': 677686099, 'comment_body': ""Thanks, it's Fixed."", 'comment_created': datetime.datetime(2021, 7, 27, 18, 10, 3, tzinfo=datetime.timezone.utc), 'commenter': 'Mostafa-ashraf19', 'type': 'User'}, {'comment_id': 677687757, 'comment_body': 'Fixed.', 'comment_created': datetime.datetime(2021, 7, 27, 18, 12, 17, tzinfo=datetime.timezone.utc), 'commenter': 'Mostafa-ashraf19', 'type': 'User'}, {'comment_id': 677690262, 'comment_body': 'Fixed.', 'comment_created': datetime.datetime(2021, 7, 27, 18, 15, 55, tzinfo=datetime.timezone.utc), 'commenter': 'Mostafa-ashraf19', 'type': 'User'}, {'comment_id': 677694735, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 7, 27, 18, 22, 38, tzinfo=datetime.timezone.utc), 'commenter': 'Mostafa-ashraf19', 'type': 'User'}, {'comment_id': 677742938, 'comment_body': 'I think you mean `||` here as well. Actually, I suggest that you replace all `if (!a || !b) {...}` with `if (!a) {...} if (!b) {...}`. This will avoid these mistakes and also make the line coverage really clear. ', 'comment_created': datetime.datetime(2021, 7, 27, 19, 35, 32, tzinfo=datetime.timezone.utc), 'commenter': 'paulthomson', 'type': 'User'}, {'comment_id': 677757492, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 7, 27, 19, 58, 6, tzinfo=datetime.timezone.utc), 'commenter': 'Mostafa-ashraf19', 'type': 'User'}, {'comment_id': 678157526, 'comment_body': 'Split this into two ifs.', 'comment_created': datetime.datetime(2021, 7, 28, 10, 1, 36, tzinfo=datetime.timezone.utc), 'commenter': 'paulthomson', 'type': 'User'}, {'comment_id': 678160346, 'comment_body': 'You still also need to check that the integer has 32 bits.', 'comment_created': datetime.datetime(2021, 7, 28, 10, 5, 55, tzinfo=datetime.timezone.utc), 'commenter': 'paulthomson', 'type': 'User'}, {'comment_id': 678161060, 'comment_body': 'Nit: I would prefer to not use ""related to"". I would just say: memory scope value must be 4 (SpvScopeInvocation).', 'comment_created': datetime.datetime(2021, 7, 28, 10, 6, 59, tzinfo=datetime.timezone.utc), 'commenter': 'paulthomson', 'type': 'User'}, {'comment_id': 678161674, 'comment_body': '```\r\nBad: memory semantics value must be either:\r\n* 64 (SpvMemorySemanticsUniformMemoryMask)\r\n* 256 (SpvMemorySemanticsWorkgroupMemoryMask)\r\n```', 'comment_created': datetime.datetime(2021, 7, 28, 10, 7, 53, tzinfo=datetime.timezone.utc), 'commenter': 'paulthomson', 'type': 'User'}, {'comment_id': 678166014, 'comment_body': 'After addressing my comments for IsApplicable, make sure that every ""return false"" that you have added will be covered by a test.', 'comment_created': datetime.datetime(2021, 7, 28, 10, 14, 10, tzinfo=datetime.timezone.utc), 'commenter': 'paulthomson', 'type': 'User'}, {'comment_id': 678173678, 'comment_body': 'You should also add a test that starts with a compute shader and uses workgroup memory (`shared` in GLSL), and successfully applies the transformation with SpvMemorySemanticsWorkgroupMemoryMask.', 'comment_created': datetime.datetime(2021, 7, 28, 10, 25, 28, tzinfo=datetime.timezone.utc), 'commenter': 'paulthomson', 'type': 'User'}, {'comment_id': 678179998, 'comment_body': 'Please make sure your tests all pass in the Debug build configuration. You can resolve this comment once you have confirmed this.', 'comment_created': datetime.datetime(2021, 7, 28, 10, 34, 50, tzinfo=datetime.timezone.utc), 'commenter': 'paulthomson', 'type': 'User'}, {'comment_id': 678182064, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 7, 28, 10, 37, 53, tzinfo=datetime.timezone.utc), 'commenter': 'Mostafa-ashraf19', 'type': 'User'}, {'comment_id': 678182941, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 7, 28, 10, 39, 14, tzinfo=datetime.timezone.utc), 'commenter': 'Mostafa-ashraf19', 'type': 'User'}, {'comment_id': 678182991, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 7, 28, 10, 39, 20, tzinfo=datetime.timezone.utc), 'commenter': 'Mostafa-ashraf19', 'type': 'User'}, {'comment_id': 678212753, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 7, 28, 11, 27, 6, tzinfo=datetime.timezone.utc), 'commenter': 'Mostafa-ashraf19', 'type': 'User'}, {'comment_id': 678224781, 'comment_body': 'Doone.', 'comment_created': datetime.datetime(2021, 7, 28, 11, 46, 51, tzinfo=datetime.timezone.utc), 'commenter': 'Mostafa-ashraf19', 'type': 'User'}, {'comment_id': 678281985, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 7, 28, 13, 6, 32, tzinfo=datetime.timezone.utc), 'commenter': 'Mostafa-ashraf19', 'type': 'User'}, {'comment_id': 678646766, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 7, 28, 20, 57, 16, tzinfo=datetime.timezone.utc), 'commenter': 'Mostafa-ashraf19', 'type': 'User'}, {'comment_id': 678660526, 'comment_body': 'I suggest removing all of the ""Bad:"" checks from this test (unless there is a case that is very different from AtomicLoadTestCase). You can just do a successful transformation in this test. And the same thing for AtomicLoadTestCaseForWorkgroupMemory_2. ', 'comment_created': datetime.datetime(2021, 7, 28, 21, 20, 54, tzinfo=datetime.timezone.utc), 'commenter': 'paulthomson', 'type': 'User'}, {'comment_id': 678663876, 'comment_body': 'Something that I originally asked for but forgot about in my last few reviews: you should check that memory_scope_id and memory_semantics_id are _available_ before the |insert_before| instruction. It might be easier to move the `FindInstruction` code up. Then use `IdIsAvailableBeforeInstruction` to check this.  And then make sure your tests cover the two additional `return false;` statements you will add.', 'comment_created': datetime.datetime(2021, 7, 28, 21, 26, 54, tzinfo=datetime.timezone.utc), 'commenter': 'paulthomson', 'type': 'User'}, {'comment_id': 678665175, 'comment_body': 'How does this test differ from AtomicLoadTestCaseForWorkgroupMemory? I suggest adding a comment that explains how it is different. If it is not very different, you could remove it (or remove the above test, and keep this test). Usually I would say: more tests is better. But at this stage I would avoid too much repetition, unless there is some scenario that you think is good to include in the tests. Perhaps this test is more interesting because the SPIR-V has some control flow?', 'comment_created': datetime.datetime(2021, 7, 28, 21, 29, 15, tzinfo=datetime.timezone.utc), 'commenter': 'paulthomson', 'type': 'User'}, {'comment_id': 678678056, 'comment_body': ""Yes, you are right. \r\nThanks for the clarification. \r\nIt's Removed."", 'comment_created': datetime.datetime(2021, 7, 28, 21, 53, 14, tzinfo=datetime.timezone.utc), 'commenter': 'Mostafa-ashraf19', 'type': 'User'}, {'comment_id': 678678150, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 7, 28, 21, 53, 25, tzinfo=datetime.timezone.utc), 'commenter': 'Mostafa-ashraf19', 'type': 'User'}, {'comment_id': 678685696, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 7, 28, 22, 8, 27, tzinfo=datetime.timezone.utc), 'commenter': 'Mostafa-ashraf19', 'type': 'User'}, {'comment_id': 679190511, 'comment_body': 'You still have not checked that memory_scope_id and memory_semantics_id are _available_ before the |insert_before| instruction, using IdIsAvailableBeforeInstruction.', 'comment_created': datetime.datetime(2021, 7, 29, 14, 13, 22, tzinfo=datetime.timezone.utc), 'commenter': 'paulthomson', 'type': 'User'}, {'comment_id': 679234466, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 7, 29, 15, 0, 37, tzinfo=datetime.timezone.utc), 'commenter': 'Mostafa-ashraf19', 'type': 'User'}, {'comment_id': 679242204, 'comment_body': ""Sorry, I still don't see the checks.\r\n\r\n* `memory_scope_id` must be available before `insert_before`; if not, return false.\r\n* `memory_semantics_id` must be available before `insert_before`; if not, return false.\r\n\r\nTo check if an id X is available before an instruction Y, use `fuzzerutil::IdIsAvailableBeforeInstruction(ir_context, Y, X)`."", 'comment_created': datetime.datetime(2021, 7, 29, 15, 9, 32, tzinfo=datetime.timezone.utc), 'commenter': 'paulthomson', 'type': 'User'}, {'comment_id': 679259187, 'comment_body': 'Done. I Hope now is good.', 'comment_created': datetime.datetime(2021, 7, 29, 15, 29, 2, tzinfo=datetime.timezone.utc), 'commenter': 'Mostafa-ashraf19', 'type': 'User'}, {'comment_id': 680836762, 'comment_body': 'You have not actually checked this. You need to check if the chosen_instruction points to workgroup or storage buffer memory. If it does not, then do not try to create an atomic load. The `if (choosen_instruction)` check is incorrect.', 'comment_created': datetime.datetime(2021, 8, 2, 9, 55, 45, tzinfo=datetime.timezone.utc), 'commenter': 'paulthomson', 'type': 'User'}, {'comment_id': 680838229, 'comment_body': 'You should use a random choice (`ChooseEven()`) to decide on signed or unsigned. ', 'comment_created': datetime.datetime(2021, 8, 2, 9, 57, 56, tzinfo=datetime.timezone.utc), 'commenter': 'paulthomson', 'type': 'User'}, {'comment_id': 680839525, 'comment_body': 'You are creating a 32 bit integer with 2 words (i.e. 64 bits). This is incorrect. Use `SpvMemorySemanticsWorkgroupMemoryMask` or `SpvMemorySemanticsUniformMemoryMask`, but not both. The choice depends on whether choosen_instruction points at workgroup memory or storage buffer memory.', 'comment_created': datetime.datetime(2021, 8, 2, 10, 0, 4, tzinfo=datetime.timezone.utc), 'commenter': 'paulthomson', 'type': 'User'}, {'comment_id': 680841378, 'comment_body': 'choosen_instruction -> chosen_instruction', 'comment_created': datetime.datetime(2021, 8, 2, 10, 2, 52, tzinfo=datetime.timezone.utc), 'commenter': 'paulthomson', 'type': 'User'}, {'comment_id': 680841750, 'comment_body': 'This comment needs to be updated, as it is incorrect after your changes. ', 'comment_created': datetime.datetime(2021, 8, 2, 10, 3, 26, tzinfo=datetime.timezone.utc), 'commenter': 'paulthomson', 'type': 'User'}, {'comment_id': 680842566, 'comment_body': 'Typo: OppAccessChin -> OpAccessChain\r\n\r\nAnd again below.', 'comment_created': datetime.datetime(2021, 8, 2, 10, 4, 41, tzinfo=datetime.timezone.utc), 'commenter': 'paulthomson', 'type': 'User'}, {'comment_id': 680844007, 'comment_body': 'Is every `return false` in `IsApplicable` covered by your tests? Including the `IdIsAvailableBeforeInstruction` checks? ', 'comment_created': datetime.datetime(2021, 8, 2, 10, 6, 47, tzinfo=datetime.timezone.utc), 'commenter': 'paulthomson', 'type': 'User'}, {'comment_id': 680907701, 'comment_body': 'Solved.', 'comment_created': datetime.datetime(2021, 8, 2, 11, 54, 27, tzinfo=datetime.timezone.utc), 'commenter': 'Mostafa-ashraf19', 'type': 'User'}, {'comment_id': 680907788, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 8, 2, 11, 54, 34, tzinfo=datetime.timezone.utc), 'commenter': 'Mostafa-ashraf19', 'type': 'User'}, {'comment_id': 680907927, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 8, 2, 11, 54, 48, tzinfo=datetime.timezone.utc), 'commenter': 'Mostafa-ashraf19', 'type': 'User'}, {'comment_id': 680911574, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 8, 2, 12, 1, 3, tzinfo=datetime.timezone.utc), 'commenter': 'Mostafa-ashraf19', 'type': 'User'}, {'comment_id': 680912907, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 8, 2, 12, 3, 20, tzinfo=datetime.timezone.utc), 'commenter': 'Mostafa-ashraf19', 'type': 'User'}, {'comment_id': 680927720, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 8, 2, 12, 26, 50, tzinfo=datetime.timezone.utc), 'commenter': 'Mostafa-ashraf19', 'type': 'User'}, {'comment_id': 680927818, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 8, 2, 12, 26, 59, tzinfo=datetime.timezone.utc), 'commenter': 'Mostafa-ashraf19', 'type': 'User'}, {'comment_id': 680995748, 'comment_body': ""This is a good try, but not quite right.\r\n\r\n1. This would work if |chosen_instruction| was an OpVariable instruction, but it needs to also work, for example, if |chosen_instruction| is an OpAccessChain instruction. Thus, you should get the _type instruction_ of |chosen_instruction| (which will be a pointer type) and check the storage class of the type instruction instead.\r\n\r\nE.g.\r\n```\r\n%13 = OpTypePointer StorageBuffer %6\r\n...\r\n%24 = OpAccessChain %13 %11 %12\r\n```\r\n\r\n2. You are checking the storage class, but `SpvMemorySemanticsUniformMemoryMask` and `SpvMemorySemanticsWorkgroupMemoryMask` are not _storage classes_. Check the spec to see which storage classes can be accessed using `SpvMemorySemanticsUniformMemoryMask` and `SpvMemorySemanticsWorkgroupMemoryMask`. I think there are about 4 storage classes you need to consider. \r\n\r\nUnfortunately, we don't support unit tests for fuzzer passes yet, otherwise we could have discovered this issue via tests. If you want, you could add a member function like `FuzzerPassAddLoads::GetAtomicMemorySemanticsMaskFromType(uint32_t target_pointer_instruction)`, which would maybe return 0 if an atomic load is not appropriate. Then you could add a unit test to test `GetAtomicMemorySemanticsMaskFromType` in isolation on a module with various `OpVariable` instructions and `OpAccessChain` instructions. But I will leave this up to you. @afd see what you think. "", 'comment_created': datetime.datetime(2021, 8, 2, 13, 59, 20, tzinfo=datetime.timezone.utc), 'commenter': 'paulthomson', 'type': 'User'}, {'comment_id': 681005700, 'comment_body': 'Sorry, that is not what I meant. I suggest describing what is happening below the comment. Delete text that describes what is happening above the comment. So I suggest you just change it to: create and apply the transformation.\r\n\r\nOr just remove the comment entirely, in this case.', 'comment_created': datetime.datetime(2021, 8, 2, 14, 11, 59, tzinfo=datetime.timezone.utc), 'commenter': 'paulthomson', 'type': 'User'}, {'comment_id': 681010520, 'comment_body': ""Nit regarding the comment style: `// has work group or storage buffer (storage class)`\r\n\r\nUse a capital letter at the start and a full stop (period) at the end. Also, this comment will probably change once you have updated the code because there are about 4 storage classes that need to be considered (but you don't need to list the storage classes in the comment AND the code). \r\n\r\n"", 'comment_created': datetime.datetime(2021, 8, 2, 14, 17, 46, tzinfo=datetime.timezone.utc), 'commenter': 'paulthomson', 'type': 'User'}, {'comment_id': 681031284, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 8, 2, 14, 42, 40, tzinfo=datetime.timezone.utc), 'commenter': 'Mostafa-ashraf19', 'type': 'User'}, {'comment_id': 681033176, 'comment_body': 'Removed.', 'comment_created': datetime.datetime(2021, 8, 2, 14, 45, 5, tzinfo=datetime.timezone.utc), 'commenter': 'Mostafa-ashraf19', 'type': 'User'}, {'comment_id': 681094234, 'comment_body': 'Done.\r\nRegarding the `FuzzerPassAddLoads::GetAtomicMemorySemanticsMaskFromType(uint32_t target_pointer_instruction)` I will be planing for this because I would like to support unit tests for all current fuzzer or at least I have made (but in separate PR).\r\nWhat is your opinion @paulthomson?', 'comment_created': datetime.datetime(2021, 8, 2, 16, 2, 42, tzinfo=datetime.timezone.utc), 'commenter': 'Mostafa-ashraf19', 'type': 'User'}, {'comment_id': 681133334, 'comment_body': 'I am afraid this is not what I meant. We want to support any op code. You do not need to check if the op code is OpAccessChain. My point was simply: your code needs to support both OpVariable and OpAccessChain (and maybe other instructions). Your previous code did not support OpAccessChain. I think your code below looks good because it looks like it supports OpVariable and OpAccessChain. ', 'comment_created': datetime.datetime(2021, 8, 2, 17, 3, 20, tzinfo=datetime.timezone.utc), 'commenter': 'paulthomson', 'type': 'User'}, {'comment_id': 681138341, 'comment_body': ""I don't think we want to insert atomic loads from _Function_ nor _Private_ storage classes. Check the SPIR-V specification to see which memory classes can be used with the memory semantics _UniformMemory_ and _WorkgroupMemory_. "", 'comment_created': datetime.datetime(2021, 8, 2, 17, 11, 49, tzinfo=datetime.timezone.utc), 'commenter': 'paulthomson', 'type': 'User'}, {'comment_id': 681138996, 'comment_body': 'This will need updating, but either way, I suggest using a switch or if statements, instead of nested ternary expressions. ', 'comment_created': datetime.datetime(2021, 8, 2, 17, 12, 52, tzinfo=datetime.timezone.utc), 'commenter': 'paulthomson', 'type': 'User'}, {'comment_id': 681150747, 'comment_body': 'Removed. \r\nI thought need to add them for the `opLoad`.', 'comment_created': datetime.datetime(2021, 8, 2, 17, 33, 3, tzinfo=datetime.timezone.utc), 'commenter': 'Mostafa-ashraf19', 'type': 'User'}, {'comment_id': 681150885, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 8, 2, 17, 33, 19, tzinfo=datetime.timezone.utc), 'commenter': 'Mostafa-ashraf19', 'type': 'User'}, {'comment_id': 681151357, 'comment_body': ""Done.\r\nI hope that's good now."", 'comment_created': datetime.datetime(2021, 8, 2, 17, 34, 5, tzinfo=datetime.timezone.utc), 'commenter': 'Mostafa-ashraf19', 'type': 'User'}, {'comment_id': 681514395, 'comment_body': '""atomic load"" -> ""atomic load"" (because we are using informal English here; we are not using the names of SPIR-V opcodes).', 'comment_created': datetime.datetime(2021, 8, 3, 7, 40, 48, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 681526645, 'comment_body': 'The SPIR-V specification says this:\r\n\r\n> The pointers taken by atomic operation instructions must be a pointer into one of the following Storage Classes:\r\n>\r\n> Uniform when used with the BufferBlock Decoration\r\n>\r\n> StorageBuffer\r\n>\r\n> PhysicalStorageBuffer\r\n>\r\n> Workgroup\r\n>\r\n> CrossWorkgroup\r\n>\r\n> Generic\r\n>\r\n> AtomicCounter\r\n>\r\n> Image\r\n>\r\n> Function\r\n\r\nHowever, ""Uniform when used with the BufferBlock Decoration"" is hard to check for, and is also deprecated, so let\'s ignore it. Furthermore, the validation rules for the Shader capability say: ""The pointers taken by atomic operation instructions are further restricted to not point into the Function storage class."", so let\'s ignore Function. And Generic is not well documented with respect to memory semantics, so let\'s ignore it too.\r\n\r\nThat leaves these storage classes:\r\n\r\n- StorageBuffer\r\n- PhysicalStorageBuffer\r\n- Workgroup\r\n- CrossWorkgroup\r\n- AtomicCounter\r\n- Image\r\n\r\nSo, please do:\r\n\r\n```\r\nswitch(storage_class) {\r\n  case SpvStorageClassStorageBuffer:\r\n  case SpvStorageClassPhysicalStorageBuffer:\r\n    ...\r\n  case SpvStorageClassImage: {\r\n    // The code that you have for setting is_atomic_load, memory_scope_id and memory_semantics_id\r\n    break;\r\n  }\r\n  default:\r\n    break;\r\n}\r\n```\r\n\r\nExcept that I suggest you do this for memory semantics id:\r\n\r\n```\r\nmemory_semantics_id = FindOrCreateConstant({ GetMemorySemanticsForStorageClass(storage_class) }, FindOrCreateIntegerType(...)), false);\r\n```\r\n\r\nYou can make `GetMemorySemanticsForStorageClass` a static method of TransformationLoad, that takes a storage class and returns the corresponding memory semantics.\r\n\r\nAccording to the table in 3.25 of the spec, we want:\r\n\r\n- UniformMemory for StorageBuffer or PhysicalStorageBuffer\r\n- WorkgroupMemory for Workgroup\r\n- CrossWorkgroupMemory for CrossWorkgroup\r\n- AtomicCounterMemory for AtomicCounter\r\n- ImageMemory for Image\r\n\r\nIn TransformationLoad you can use this method in IsApplicable - I will comment elsewhere in this PR on how to do that.', 'comment_created': datetime.datetime(2021, 8, 3, 7, 58, 15, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 681527646, 'comment_body': 'Here you can use GetSingleWordInOperand(0) instead of GetInOperand(0).words[0]', 'comment_created': datetime.datetime(2021, 8, 3, 7, 59, 45, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 681528222, 'comment_body': 'Here, you can do:\r\n\r\n```\r\nif (memory_semantics_const_value != GetMemorySemanticsForStorageClass(/* the storage class associated with the pointer*/) {\r\n  return false;\r\n}\r\n```', 'comment_created': datetime.datetime(2021, 8, 3, 8, 0, 34, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 681563810, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 8, 3, 8, 49, 3, tzinfo=datetime.timezone.utc), 'commenter': 'Mostafa-ashraf19', 'type': 'User'}, {'comment_id': 681565552, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 8, 3, 8, 51, 23, tzinfo=datetime.timezone.utc), 'commenter': 'Mostafa-ashraf19', 'type': 'User'}, {'comment_id': 681586344, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 8, 3, 9, 18, 7, tzinfo=datetime.timezone.utc), 'commenter': 'Mostafa-ashraf19', 'type': 'User'}, {'comment_id': 681598756, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 8, 3, 9, 34, 54, tzinfo=datetime.timezone.utc), 'commenter': 'Mostafa-ashraf19', 'type': 'User'}, {'comment_id': 681689638, 'comment_body': '-> ""memory_semantics_id""', 'comment_created': datetime.datetime(2021, 8, 3, 11, 57, 25, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 681690715, 'comment_body': 'This comment is now out of date. You could change it to: ""The memory semantics constant value must match the storage class of the pointer being loaded from.""', 'comment_created': datetime.datetime(2021, 8, 3, 11, 58, 57, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 681694142, 'comment_body': 'Better to give this return type SpvMemorySemanticsMask.\r\n\r\nThen you can get rid of the need for the static casts, and you can return `SpvMemorySemanticsMaskNone` in the default case.', 'comment_created': datetime.datetime(2021, 8, 3, 12, 4, 22, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 681695175, 'comment_body': 'Rephrase to: ""- If |is_atomic| is true then |message_memory_scope_id| must be the ...""\r\n\r\nAlso, make sure your comments are indented so that when a bullet point spans multiple lines, the additional lines are aligned with the start of the bullet text.\r\n\r\nOn the line below, `id of an ...` should align with `|message_....` on the line above, for example.', 'comment_created': datetime.datetime(2021, 8, 3, 12, 6, 4, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 681695274, 'comment_body': 'Please rewrite this similarly.', 'comment_created': datetime.datetime(2021, 8, 3, 12, 6, 13, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 681703278, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 8, 3, 12, 18, 4, tzinfo=datetime.timezone.utc), 'commenter': 'Mostafa-ashraf19', 'type': 'User'}, {'comment_id': 681704405, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 8, 3, 12, 19, 48, tzinfo=datetime.timezone.utc), 'commenter': 'Mostafa-ashraf19', 'type': 'User'}, {'comment_id': 681705395, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 8, 3, 12, 21, 14, tzinfo=datetime.timezone.utc), 'commenter': 'Mostafa-ashraf19', 'type': 'User'}, {'comment_id': 681707718, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 8, 3, 12, 24, 43, tzinfo=datetime.timezone.utc), 'commenter': 'Mostafa-ashraf19', 'type': 'User'}, {'comment_id': 681707765, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 8, 3, 12, 24, 48, tzinfo=datetime.timezone.utc), 'commenter': 'Mostafa-ashraf19', 'type': 'User'}, {'comment_id': 681815507, 'comment_body': 'I think it might prove necessary to declare this as having type SpvMemorySemanticsMask, and static_cast it to that type. I bet some of the bots will complain with an error about there being an implicit cast.', 'comment_created': datetime.datetime(2021, 8, 3, 14, 29, 37, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 681816805, 'comment_body': ""Ah, I didn't notice in my last review, but this parameter should have type SpvStorageClass instead of uint32_t. You will need to do a static cast at the call site when you invoke it with a uint32_t.\r\n\r\nI think it's good practice to make the function work on more abstract types."", 'comment_created': datetime.datetime(2021, 8, 3, 14, 30, 59, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 681829622, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 8, 3, 14, 44, 53, tzinfo=datetime.timezone.utc), 'commenter': 'Mostafa-ashraf19', 'type': 'User'}, {'comment_id': 681830181, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 8, 3, 14, 45, 25, tzinfo=datetime.timezone.utc), 'commenter': 'Mostafa-ashraf19', 'type': 'User'}]","[{'commit_sha': 'ba40d02c5ab115fbfe8abadd9dbdc87287091e30', 'committer_username': 'Mostafa-ashraf19', 'committer_name': 'Mostafa Ashraf', 'committer_email': 'mostaphaashraf1996@gmail.com', 'commit_date': datetime.datetime(2019, 12, 2, 23, 2, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9af9721d4c989a1432e8bd3a9b5f7fc5a31b375b', 'committer_username': 'Mostafa-ashraf19', 'committer_name': 'Mostafa Ashraf', 'committer_email': 'mostaphaashraf1996@gmail.com', 'commit_date': datetime.datetime(2019, 12, 2, 23, 2, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5404d572b6a3f83c9dc19cdba1bace184fdf75cc', 'committer_username': 'Mostafa-ashraf19', 'committer_name': 'Mostafa Ashraf', 'committer_email': 'mostaphaashraf1996@gmail.com', 'commit_date': datetime.datetime(2019, 12, 2, 23, 2, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c6101d4a4643a61bf2f9bca68cb1e96907d1cc6d', 'committer_username': 'Mostafa-ashraf19', 'committer_name': 'Mostafa Ashraf', 'committer_email': 'mostaphaashraf1996@gmail.com', 'commit_date': datetime.datetime(2019, 12, 2, 23, 2, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e6c6aa08fd3a6ffc19d5da2721edcf102ec350ce', 'committer_username': 'Mostafa-ashraf19', 'committer_name': 'Mostafa Ashraf', 'committer_email': 'mostaphaashraf1996@gmail.com', 'commit_date': datetime.datetime(2019, 12, 2, 23, 2, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a212246b6553fe081a31699a9dfbcdb3e493c26d', 'committer_username': 'Mostafa-ashraf19', 'committer_name': 'Mostafa Ashraf', 'committer_email': 'mostaphaashraf1996@gmail.com', 'commit_date': datetime.datetime(2019, 12, 2, 23, 2, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9955518d49a92b23805efae80adf54407faaec89', 'committer_username': 'Mostafa-ashraf19', 'committer_name': 'Mostafa Ashraf', 'committer_email': 'mostaphaashraf1996@gmail.com', 'commit_date': datetime.datetime(2019, 12, 2, 23, 2, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9a14f1b5d68b1808d0ba0f30e23c2b9ee29c3064', 'committer_username': 'Mostafa-ashraf19', 'committer_name': 'Mostafa Ashraf', 'committer_email': 'mostaphaashraf1996@gmail.com', 'commit_date': datetime.datetime(2019, 12, 2, 23, 2, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0e6e5c028c5362c28740dbecabfa0fe9eb852256', 'committer_username': 'Mostafa-ashraf19', 'committer_name': 'Mostafa Ashraf', 'committer_email': 'mostaphaashraf1996@gmail.com', 'commit_date': datetime.datetime(2019, 12, 2, 23, 2, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': '70c0a1cc7160fb510b31ae476c6b2e3f000b786a', 'committer_username': 'Mostafa-ashraf19', 'committer_name': 'Mostafa Ashraf', 'committer_email': 'mostaphaashraf1996@gmail.com', 'commit_date': datetime.datetime(2019, 12, 2, 23, 2, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cd0a33c67e37c4e0d525ef14835240200324b6a0', 'committer_username': 'Mostafa-ashraf19', 'committer_name': 'Mostafa Ashraf', 'committer_email': 'mostaphaashraf1996@gmail.com', 'commit_date': datetime.datetime(2019, 12, 2, 23, 2, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f862bd7e7c81c1198f667d133acf700a46c9e0cd', 'committer_username': 'Mostafa-ashraf19', 'committer_name': 'Mostafa Ashraf', 'committer_email': 'mostaphaashraf1996@gmail.com', 'commit_date': datetime.datetime(2019, 12, 2, 23, 2, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4b121fc2ab6ea274d61d024680bdbe4fc585be80', 'committer_username': 'Mostafa-ashraf19', 'committer_name': 'Mostafa Ashraf', 'committer_email': 'mostaphaashraf1996@gmail.com', 'commit_date': datetime.datetime(2019, 12, 2, 23, 2, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e1a9479dcb8330005cb7180800355d9b4efea6e0', 'committer_username': 'Mostafa-ashraf19', 'committer_name': 'Mostafa Ashraf', 'committer_email': 'mostaphaashraf1996@gmail.com', 'commit_date': datetime.datetime(2019, 12, 2, 23, 2, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0fb817c1b380ad95a183fe8da3ac2646718badcc', 'committer_username': 'Mostafa-ashraf19', 'committer_name': 'Mostafa Ashraf', 'committer_email': 'mostaphaashraf1996@gmail.com', 'commit_date': datetime.datetime(2019, 12, 2, 23, 2, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b00637e45e9419c35463a55bfc36fe270f5d8390', 'committer_username': 'Mostafa-ashraf19', 'committer_name': 'Mostafa Ashraf', 'committer_email': 'mostaphaashraf1996@gmail.com', 'commit_date': datetime.datetime(2019, 12, 2, 23, 2, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': '95e9a3e61e69626e21aab7ca1612ad1828b738e3', 'committer_username': 'Mostafa-ashraf19', 'committer_name': 'Mostafa Ashraf', 'committer_email': 'mostaphaashraf1996@gmail.com', 'commit_date': datetime.datetime(2019, 12, 2, 23, 2, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0b1739610905a7008156fc1928dd1cfa05ab98ec', 'committer_username': 'Mostafa-ashraf19', 'committer_name': 'Mostafa Ashraf', 'committer_email': 'mostaphaashraf1996@gmail.com', 'commit_date': datetime.datetime(2019, 12, 2, 23, 2, 10, tzinfo=datetime.timezone.utc)}]",Mostafa Ashraf,58448694,mostaphaashraf1996@gmail.com,User,,43,,10,36
701498455,spirv-fuzz: Support AtomicStore,This PR Fixes #4337.,True,4440,https://api.github.com/repos/KhronosGroup/SPIRV-Tools/pulls/4440,https://github.com/KhronosGroup/SPIRV-Tools/pull/4440,closed,498,121,12,5,1,4,0,0,[],2021-08-02 14:05:29+00:00,2021-08-05 13:08:45+00:00,255796.0,"2 days, 23:03:16","[{'comment_id': 682414084, 'comment_body': ""It would be cleaner to declare this as SpvStorageClass and static_cast it to that type. (If we didn't do this in fuzzer_pass_add_loads then feel free to do so there in this PR too.)"", 'comment_created': datetime.datetime(2021, 8, 4, 8, 43, 7, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 682416873, 'comment_body': 'This duplicates the method you added in TransformationLoad.\r\n\r\nTherefore, please move the method to `fuzzer_util.h` and `fuzzer_util.cpp`, remove it from `TransformationLoad` and `TransformationStore`, and adapt all references to the method to call the `fuzzerutil::GetMemorySemanticsForStorageClass` version instead.', 'comment_created': datetime.datetime(2021, 8, 4, 8, 47, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 682438824, 'comment_body': 'I made it down when passing to the function.\r\nMoved.', 'comment_created': datetime.datetime(2021, 8, 4, 9, 15, 5, tzinfo=datetime.timezone.utc), 'commenter': 'Mostafa-ashraf19', 'type': 'User'}, {'comment_id': 682446384, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 8, 4, 9, 25, 34, tzinfo=datetime.timezone.utc), 'commenter': 'Mostafa-ashraf19', 'type': 'User'}]","[{'commit_sha': 'b21fcf6c41389e80e9d87186d814c7219efc1b39', 'committer_username': 'Mostafa-ashraf19', 'committer_name': 'Mostafa Ashraf', 'committer_email': 'mostaphaashraf1996@gmail.com', 'commit_date': datetime.datetime(2019, 12, 2, 23, 2, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f1b46c647a72e2c56aed7020076f8888aaeec4cd', 'committer_username': 'Mostafa-ashraf19', 'committer_name': 'Mostafa Ashraf', 'committer_email': 'mostaphaashraf1996@gmail.com', 'commit_date': datetime.datetime(2019, 12, 2, 23, 2, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': '892fed2ebac83daaa7de1b01154c9f254ce9197e', 'committer_username': 'Mostafa-ashraf19', 'committer_name': 'Mostafa Ashraf', 'committer_email': 'mostaphaashraf1996@gmail.com', 'commit_date': datetime.datetime(2019, 12, 2, 23, 2, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f72c9d9d5aff60ba8ab6243784beac622c2dbaab', 'committer_username': 'Mostafa-ashraf19', 'committer_name': 'Mostafa Ashraf', 'committer_email': 'mostaphaashraf1996@gmail.com', 'commit_date': datetime.datetime(2019, 12, 2, 23, 2, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': '47328ee1443aeba76662733f1b1a89fe0a613e6a', 'committer_username': 'Mostafa-ashraf19', 'committer_name': 'Mostafa Ashraf', 'committer_email': 'mostaphaashraf1996@gmail.com', 'commit_date': datetime.datetime(2019, 12, 2, 23, 2, 10, tzinfo=datetime.timezone.utc)}]",Mostafa Ashraf,58448694,mostaphaashraf1996@gmail.com,User,,43,,10,36
622873745,solve Permute the order of variables at function scope ,Fixes #4194,True,4248,https://api.github.com/repos/KhronosGroup/SPIRV-Tools/pulls/4248,https://github.com/KhronosGroup/SPIRV-Tools/pull/4248,closed,562,2,13,1,0,0,0,0,[],2021-04-26 00:31:30+00:00,2021-04-26 15:53:56+00:00,55346.0,15:22:26,[],"[{'commit_sha': '98bfcebb1590869d5f16920bec8a95f646e58b7f', 'committer_username': 'Mostafa-ashraf19', 'committer_name': 'Mostafa Ashraf', 'committer_email': 'mostaphaashraf1996@gmail.com', 'commit_date': datetime.datetime(2019, 12, 2, 23, 2, 10, tzinfo=datetime.timezone.utc)}]",Mostafa Ashraf,58448694,mostaphaashraf1996@gmail.com,User,,43,,10,36
705914297,spirv-fuzz: transformation and fuzzer pass for changing memory semantics,This PR Fixes #4421.,False,4455,https://api.github.com/repos/KhronosGroup/SPIRV-Tools/pulls/4455,https://github.com/KhronosGroup/SPIRV-Tools/pull/4455,closed,1485,0,13,15,4,189,0,0,[],2021-08-07 16:27:36+00:00,2022-07-04 13:53:38+00:00,28589162.0,"330 days, 21:26:02","[{'comment_id': 685212489, 'comment_body': 'In the protobuf, we said it must be 0 or 1, and I suggest that we indeed make sure it is only 0 or 1.', 'comment_created': datetime.datetime(2021, 8, 9, 13, 52, 8, tzinfo=datetime.timezone.utc), 'commenter': 'paulthomson', 'type': 'User'}, {'comment_id': 685221763, 'comment_body': ""I suggest that you create a member function (maybe static, maybe not) that checks that the opcode of |atomic_instruction| is one of the atomic instruction opcodes that we expect, and also checks that:\r\n - |memory_semantics_operand_index| is 0 when the opcode only supports one memory semantics;\r\n - |memory_semantics_operand_index| is 0 or 1 when the opcode supports two memory semantics;\r\n\r\nI then suggest that you _assert_ these conditions in both constructors. You might think: why move the checks to the constructor and why assert these conditions? The answer is: these checks are checking the values of the protobuf (i.e. of the transformation itself). These checks do _not_ depend on the SPIR-V module (an ir_context). Thus, there is no need to do them here; we can do them at the earliest possible point (in the constructor). And, if the checks fail, then we have made a mistake in our code (e.g. in our fuzzer pass code), hence we should assert these conditions. This is very different to most IsApplicable checks, which are used to ensure that we can _try_ to apply the transformation to a slightly different SPIR-V module during shrinking, but of course it may fail, and that is OK. \r\n\r\nAnother reason why we don't need to check the opcode is because the opcode is already checked by |FindInstruction|. Thus, we can instead assert (in the constructor) that the opcode is one of the opcodes we expect. "", 'comment_created': datetime.datetime(2021, 8, 9, 14, 3, 2, tzinfo=datetime.timezone.utc), 'commenter': 'paulthomson', 'type': 'User'}, {'comment_id': 685226871, 'comment_body': 'I would avoid calling this ""new instruction"". This sounds like we are adding a new instruction, but we are not. Maybe call it: `value_instruction`. ', 'comment_created': datetime.datetime(2021, 8, 9, 14, 9, 18, tzinfo=datetime.timezone.utc), 'commenter': 'paulthomson', 'type': 'User'}, {'comment_id': 685229921, 'comment_body': 'I think we should remove this check. We actually need to do a more restrictive check, so this is potentially just confusing. Once we get to the point where we think the new value is OK, we could _then_ assert that it is larger than the old value, as a safety check. But we have more checks to do first. \r\n\r\nI think you will end up having a similar check in `IsValidConverstion`, though.', 'comment_created': datetime.datetime(2021, 8, 9, 14, 12, 53, tzinfo=datetime.timezone.utc), 'commenter': 'paulthomson', 'type': 'User'}, {'comment_id': 685236088, 'comment_body': 'This is not quite right.\r\n\r\nFirstly, the old value might have a lot of bits set, other than just the first 5 bits. This is allowed. Thus, we have bits 0-31. We only want to change bits 0-4 (the first 5 bits). \r\n\r\n* Bits 5-31 of the old value must equal bits 5-31 of the new value.\r\n\r\nNow, consider just the first 5 bits. I.e. bits 0-4. The logic you have below does not consider the old value, but you need to consider the old value.\r\n\r\nE.g. for load:\r\n\r\n* if old value is None, then new value must be Acquire or SequentiallyConsistent.\r\n* if old value is Acquire, then new value must be SequentiallyConsistent\r\n* if old value is anything else then return false.\r\n\r\nYou probably noticed that we can achieve mostly the same thing by doing:\r\n\r\n* old value and new value must both be in the set {None, Acquire, SequentiallyConsistent}, and old value must be less than new value.\r\n\r\nThis is fine, except for barrier instructions; it is not OK to go from acquire -> release (even though acquire < release). That changes the semantics. You will need to handle barrier instructions more carefully, perhaps just by checking for that one case (acquire -> release) and returning false in that case.\r\n\r\n', 'comment_created': datetime.datetime(2021, 8, 9, 14, 20, 1, tzinfo=datetime.timezone.utc), 'commenter': 'paulthomson', 'type': 'User'}, {'comment_id': 685249020, 'comment_body': ""I don't think this is quite right. The memory semantics should probably be `SequentiallyConsistent | UniformMemory` otherwise I don't think it has an effect. The same probably applies below. The SPIR-V might currently be valid (or it might be invalid; I am not sure), but regardless, for now, we only really care about _sensible_ uses of memory semantics. Thus, if you are doing an atomic load from a storage buffer, you need to specify `UniformMemory` as part of the memory semantics. This is also helpful for you to understand why your current transformation code is not quite right. "", 'comment_created': datetime.datetime(2021, 8, 9, 14, 34, 25, tzinfo=datetime.timezone.utc), 'commenter': 'paulthomson', 'type': 'User'}, {'comment_id': 685279602, 'comment_body': 'Something else I just noticed in the spec: If the ""memory model"" of the SPIR-V module is ""Vulkan"" then ""SequentiallyConsistent"" must not be used. So you will need to also check this, which means you will need to pass another parameter into this function (e.g. ""is vulkan memory model"" bool, the memory mode itself, or the `ir_context`). ', 'comment_created': datetime.datetime(2021, 8, 9, 15, 8, 57, tzinfo=datetime.timezone.utc), 'commenter': 'paulthomson', 'type': 'User'}, {'comment_id': 685471977, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 8, 9, 19, 44, 4, tzinfo=datetime.timezone.utc), 'commenter': 'Mostafa-ashraf19', 'type': 'User'}, {'comment_id': 685473380, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 8, 9, 19, 46, 23, tzinfo=datetime.timezone.utc), 'commenter': 'Mostafa-ashraf19', 'type': 'User'}, {'comment_id': 685512677, 'comment_body': 'Thanks for the clarification.\r\nDone.', 'comment_created': datetime.datetime(2021, 8, 9, 20, 52, 8, tzinfo=datetime.timezone.utc), 'commenter': 'Mostafa-ashraf19', 'type': 'User'}, {'comment_id': 685513519, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 8, 9, 20, 53, 35, tzinfo=datetime.timezone.utc), 'commenter': 'Mostafa-ashraf19', 'type': 'User'}, {'comment_id': 685540471, 'comment_body': 'Yes @paulthomson, you are right.\r\nI think can made it something like this e.g. `NOT FINAL`\r\n```CPP\r\n  const std::string shader = R""(\r\n               OpCapability Shader\r\n               OpCapability Int8\r\n          %1 = OpExtInstImport ""GLSL.std.450""\r\n               OpMemoryModel Logical GLSL450\r\n               OpEntryPoint Fragment %4 ""main""\r\n               OpExecutionMode %4 OriginUpperLeft\r\n               OpSource ESSL 320\r\n          %2 = OpTypeVoid\r\n          %3 = OpTypeFunction %2\r\n          %6 = OpTypeInt 32 1\r\n          %7 = OpTypeInt 8 1\r\n          %9 = OpTypeInt 32 0\r\n         %26 = OpTypeFloat 32\r\n          %8 = OpTypeStruct %6\r\n         %10 = OpTypePointer StorageBuffer %8\r\n         %11 = OpVariable %10 StorageBuffer\r\n         %99 = OpTypePointer Workgroup %6\r\n         %100 = OpVariable %99 Workgroup\r\n         %19 = OpConstant %26 0\r\n         %18 = OpConstant %9 1\r\n         %12 = OpConstant %6 0\r\n         %13 = OpTypePointer StorageBuffer %6\r\n         %15 = OpConstant %6 4\r\n         %16 = OpConstant %6 7\r\n         %17 = OpConstant %7 4\r\n         %20 = OpConstant %6 16 ; SequentiallyConsistent mode\r\n         %96 = OpConstant %6 64 ; UniformMemory mode\r\n         %97 = OpConstant %6 0 ; None mode\r\n         %98 = OpConstant %6 2 ; Acquire mode\r\n         %99 = OpConstant %6 4 ; Release mode\r\n        %100 = OpConstant %6 8 ; AcquireRelease mode\r\n          %4 = OpFunction %2 None %3\r\n          %5 = OpLabel\r\n         %14 = OpAccessChain %13 %11 %12\r\n         %21 = OpAtomicLoad %6 %100 %15 %20\r\n         %22 = OpAtomicLoad %6 %100 %15 %98\r\n         %23 = OpAtomicExchange %6 %100 %15 %98 %16\r\n         %25 = OpAtomicCompareExchange %6 %100 %15 %20 %20 %16 %15\r\n         %24 = OpAccessChain %13 %11 %12\r\n               OpAtomicStore %14 %15 %99 %16\r\n               OpReturn\r\n               OpFunctionEnd\r\n  )"";\r\n```\r\nIt\'s now a `Workgroup` storage class.\r\nI think it now will be good with memory semantics values.\r\nWhat do you think @paulthomson?', 'comment_created': datetime.datetime(2021, 8, 9, 21, 41, 6, tzinfo=datetime.timezone.utc), 'commenter': 'Mostafa-ashraf19', 'type': 'User'}, {'comment_id': 685548451, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 8, 9, 21, 56, 46, tzinfo=datetime.timezone.utc), 'commenter': 'Mostafa-ashraf19', 'type': 'User'}, {'comment_id': 685553172, 'comment_body': ""I was considering the first OpAtomicLoad instruction. \r\n\r\n```\r\n%21 = OpAtomicLoad %6 %14 %15 %20\r\n```\r\n\r\nThe memory semantics operand is `%20`, which is a constant with value `16`.\r\n\r\nLooking at section `3.25` in the [SPIR-V specification](https://www.khronos.org/registry/SPIR-V/specs/unified1/SPIRV.pdf) (around page 93), you can see the table of bits for memory semantics. We want the value to be formed from one of: None, Acquire, Release, AcquireRelease, SequentiallyConsistent; **as well as** a value like `UniformMemory`, `WorkgroupMemory`, etc. To combine the values, they should be OR'ed together (binary or), because this value is a bit mask. For example, it looks like you want to use SequentiallyConsistent, and you are accessing a storage buffer.\r\n\r\n* SequentiallyConsistent == 0x10 == 16 == `0010000b`\r\n* UniformMemory == 0x40 == 64 == `1000000b`\r\n\r\n```\r\n  0010000b\r\n| 1000000b  (binary OR)\r\n  -------- \r\n  1010000b\r\n```\r\n\r\n*   1010000b == 0x50 == 80\r\n\r\nSo I would expect `%20` to have the value 80.\r\n"", 'comment_created': datetime.datetime(2021, 8, 9, 22, 7, 7, tzinfo=datetime.timezone.utc), 'commenter': 'paulthomson', 'type': 'User'}, {'comment_id': 685970701, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 8, 10, 12, 30, 59, tzinfo=datetime.timezone.utc), 'commenter': 'Mostafa-ashraf19', 'type': 'User'}, {'comment_id': 686410274, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 8, 11, 0, 37, 53, tzinfo=datetime.timezone.utc), 'commenter': 'Mostafa-ashraf19', 'type': 'User'}, {'comment_id': 687692352, 'comment_body': 'You should add the assert in this constructor as well.', 'comment_created': datetime.datetime(2021, 8, 12, 13, 5, 20, tzinfo=datetime.timezone.utc), 'commenter': 'paulthomson', 'type': 'User'}, {'comment_id': 687693836, 'comment_body': 'I think you should just make this function static, or remove the function parameters; you can instead just access `message_`. If you access `message_`, make sure the assert statements in the constructors come after `message_` has been initialized.', 'comment_created': datetime.datetime(2021, 8, 12, 13, 7, 19, tzinfo=datetime.timezone.utc), 'commenter': 'paulthomson', 'type': 'User'}, {'comment_id': 687695296, 'comment_body': 'This is not dependent on the SPIR-V module. It is guaranteed to be true (as long as you assert this in both constructors). Thus, please remove this check, or assert it again here, if you wish. But do not return false.', 'comment_created': datetime.datetime(2021, 8, 12, 13, 9, 5, tzinfo=datetime.timezone.utc), 'commenter': 'paulthomson', 'type': 'User'}, {'comment_id': 687708513, 'comment_body': 'As with adding AtomicLoads and AtomicStores, you also need to confirm that the constant is a 32 bit integer. ', 'comment_created': datetime.datetime(2021, 8, 12, 13, 25, 16, tzinfo=datetime.timezone.utc), 'commenter': 'paulthomson', 'type': 'User'}, {'comment_id': 687712088, 'comment_body': 'I suggest that you extract this into a function and use it again in IsApplicable. Just because I think it will be clearer, as long as you give the function a good name. ', 'comment_created': datetime.datetime(2021, 8, 12, 13, 29, 18, tzinfo=datetime.timezone.utc), 'commenter': 'paulthomson', 'type': 'User'}, {'comment_id': 688188259, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 8, 13, 1, 40, 41, tzinfo=datetime.timezone.utc), 'commenter': 'Mostafa-ashraf19', 'type': 'User'}, {'comment_id': 688188293, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 8, 13, 1, 40, 46, tzinfo=datetime.timezone.utc), 'commenter': 'Mostafa-ashraf19', 'type': 'User'}, {'comment_id': 688188319, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 8, 13, 1, 40, 52, tzinfo=datetime.timezone.utc), 'commenter': 'Mostafa-ashraf19', 'type': 'User'}, {'comment_id': 688188354, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 8, 13, 1, 41, tzinfo=datetime.timezone.utc), 'commenter': 'Mostafa-ashraf19', 'type': 'User'}, {'comment_id': 688199414, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 8, 13, 2, 19, 33, tzinfo=datetime.timezone.utc), 'commenter': 'Mostafa-ashraf19', 'type': 'User'}, {'comment_id': 688493793, 'comment_body': 'One more thing, I suggest that you use a switch case; that way, if we end up taking the ""default"" case, we can fail (assert false). Then we know we have forgotten to handle an opcode, rather than just returning 2 or 3, which could lead to silent (and difficult to understand) bugs. ', 'comment_created': datetime.datetime(2021, 8, 13, 12, 58, 35, tzinfo=datetime.timezone.utc), 'commenter': 'paulthomson', 'type': 'User'}, {'comment_id': 688494687, 'comment_body': 'Converstion -> Conversion\r\n', 'comment_created': datetime.datetime(2021, 8, 13, 13, 0, 1, tzinfo=datetime.timezone.utc), 'commenter': 'paulthomson', 'type': 'User'}, {'comment_id': 688495762, 'comment_body': 'Instead of sets, I suggest adding static functions. E.g. `IsAtomicLoadMemorySemanticsValue(SpvMemorySemanticsMask memory_semantics_value)`. Each function can use a switch case and return true if it is one of the values we expect, otherwise false.', 'comment_created': datetime.datetime(2021, 8, 13, 13, 1, 38, tzinfo=datetime.timezone.utc), 'commenter': 'paulthomson', 'type': 'User'}, {'comment_id': 688496907, 'comment_body': 'Add a comment to explain why we need this special case check. In fact, you should also add a comment at the top of the function body explaining what it is we are trying to check. In other words, the things we list in our doc:\r\n\r\n* Load: None -> Acquire  -> SequentiallyConsistent\r\n* Store: None -> Release -> SequentiallyConsistent\r\n* RMW: None -> AcquireRelease -> SequentiallyConsistent\r\n* Barrier: None -> Acquire / Release -> AcquireRelease -> SequentiallyConsistent\r\n* When the memory model is Vulkan, SequentiallyConsistent must not be used.\r\n', 'comment_created': datetime.datetime(2021, 8, 13, 13, 3, 26, tzinfo=datetime.timezone.utc), 'commenter': 'paulthomson', 'type': 'User'}, {'comment_id': 688499569, 'comment_body': ""This variable name is confusing. I don't think it is the operand index. It is the memory semantics value."", 'comment_created': datetime.datetime(2021, 8, 13, 13, 7, 41, tzinfo=datetime.timezone.utc), 'commenter': 'paulthomson', 'type': 'User'}, {'comment_id': 688502638, 'comment_body': 'This matches what I wrote in the doc, but it is not quite what I meant, and is not correct according to the spec. Check the spec of `OpAtomicCompareExchange` to see the restrictions. The two memory semantics values are called ""equal"" and ""unequal"". There are actually multiple restrictions on the ""unequal"" value. ', 'comment_created': datetime.datetime(2021, 8, 13, 13, 11, 59, tzinfo=datetime.timezone.utc), 'commenter': 'paulthomson', 'type': 'User'}, {'comment_id': 688505121, 'comment_body': 'I suggest you extract all hex values into global constants. E.g. `kMemorySemanticsHigherBitmask`. [Like this](https://github.com/KhronosGroup/SPIRV-Tools/blob/bed84792f9dd77bca4fefb72195be153bc64fa4b/source/fuzz/transformation_replace_load_store_with_copy_memory.cpp#L25). And add comments above each constant to explain what it is for.', 'comment_created': datetime.datetime(2021, 8, 13, 13, 15, 34, tzinfo=datetime.timezone.utc), 'commenter': 'paulthomson', 'type': 'User'}, {'comment_id': 688522234, 'comment_body': ""I don't think this looks correct. If so, your tests should not pass. So rather than explain, I will just move on to your tests."", 'comment_created': datetime.datetime(2021, 8, 13, 13, 40, tzinfo=datetime.timezone.utc), 'commenter': 'paulthomson', 'type': 'User'}, {'comment_id': 688524875, 'comment_body': 'It looks like maybe your tests need to be updated? We said the operand index will be 0 or 1.', 'comment_created': datetime.datetime(2021, 8, 13, 13, 43, 40, tzinfo=datetime.timezone.utc), 'commenter': 'paulthomson', 'type': 'User'}, {'comment_id': 688527459, 'comment_body': 'Actually, this will probably be need to be a [""death test""](https://github.com/google/googletest/blob/master/docs/advanced.md#death-tests).\r\n\r\n[Example](https://github.com/KhronosGroup/SPIRV-Tools/blob/ec1bc3e2e5678f2c72c0d3b196780a17df637d60/test/fuzz/transformation_add_type_int_test.cpp#L104).\r\n\r\nDeath tests are interesting, but actually I find that in a lot cases, they aren\'t particularly necessary. I suggest removing this assert. ', 'comment_created': datetime.datetime(2021, 8, 13, 13, 47, 13, tzinfo=datetime.timezone.utc), 'commenter': 'paulthomson', 'type': 'User'}, {'comment_id': 688528014, 'comment_body': 'Convert to death test, or remove. ', 'comment_created': datetime.datetime(2021, 8, 13, 13, 47, 57, tzinfo=datetime.timezone.utc), 'commenter': 'paulthomson', 'type': 'User'}, {'comment_id': 688528973, 'comment_body': 'The comment (and probably the assert) is not quite right, as I have highlighted in the transformation code. You will probably want to write a few additional tests here, once you have addressed my above comments about this.', 'comment_created': datetime.datetime(2021, 8, 13, 13, 49, 16, tzinfo=datetime.timezone.utc), 'commenter': 'paulthomson', 'type': 'User'}, {'comment_id': 688530917, 'comment_body': 'Do the tests all pass?', 'comment_created': datetime.datetime(2021, 8, 13, 13, 51, 54, tzinfo=datetime.timezone.utc), 'commenter': 'paulthomson', 'type': 'User'}, {'comment_id': 688538582, 'comment_body': 'Yes.', 'comment_created': datetime.datetime(2021, 8, 13, 14, 2, tzinfo=datetime.timezone.utc), 'commenter': 'Mostafa-ashraf19', 'type': 'User'}, {'comment_id': 688539863, 'comment_body': 'Updated.', 'comment_created': datetime.datetime(2021, 8, 13, 14, 3, 47, tzinfo=datetime.timezone.utc), 'commenter': 'Mostafa-ashraf19', 'type': 'User'}, {'comment_id': 688540505, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 8, 13, 14, 4, 42, tzinfo=datetime.timezone.utc), 'commenter': 'Mostafa-ashraf19', 'type': 'User'}, {'comment_id': 688541156, 'comment_body': 'All tests are passed @paulthomson.', 'comment_created': datetime.datetime(2021, 8, 13, 14, 5, 37, tzinfo=datetime.timezone.utc), 'commenter': 'Mostafa-ashraf19', 'type': 'User'}, {'comment_id': 688543475, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 8, 13, 14, 8, 49, tzinfo=datetime.timezone.utc), 'commenter': 'Mostafa-ashraf19', 'type': 'User'}, {'comment_id': 688544175, 'comment_body': 'Converted.', 'comment_created': datetime.datetime(2021, 8, 13, 14, 9, 38, tzinfo=datetime.timezone.utc), 'commenter': 'Mostafa-ashraf19', 'type': 'User'}, {'comment_id': 688549289, 'comment_body': 'Changed.', 'comment_created': datetime.datetime(2021, 8, 13, 14, 16, 44, tzinfo=datetime.timezone.utc), 'commenter': 'Mostafa-ashraf19', 'type': 'User'}, {'comment_id': 688553342, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 8, 13, 14, 22, 18, tzinfo=datetime.timezone.utc), 'commenter': 'Mostafa-ashraf19', 'type': 'User'}, {'comment_id': 688564791, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 8, 13, 14, 37, 56, tzinfo=datetime.timezone.utc), 'commenter': 'Mostafa-ashraf19', 'type': 'User'}, {'comment_id': 688570972, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 8, 13, 14, 46, 46, tzinfo=datetime.timezone.utc), 'commenter': 'Mostafa-ashraf19', 'type': 'User'}, {'comment_id': 688586685, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 8, 13, 15, 8, 23, tzinfo=datetime.timezone.utc), 'commenter': 'Mostafa-ashraf19', 'type': 'User'}, {'comment_id': 688599890, 'comment_body': 'Improved.', 'comment_created': datetime.datetime(2021, 8, 13, 15, 27, 52, tzinfo=datetime.timezone.utc), 'commenter': 'Mostafa-ashraf19', 'type': 'User'}, {'comment_id': 688616839, 'comment_body': 'Yes, you are right.\r\nRemoved.', 'comment_created': datetime.datetime(2021, 8, 13, 15, 53, 22, tzinfo=datetime.timezone.utc), 'commenter': 'Mostafa-ashraf19', 'type': 'User'}, {'comment_id': 688705070, 'comment_body': 'Improved.', 'comment_created': datetime.datetime(2021, 8, 13, 18, 28, 7, tzinfo=datetime.timezone.utc), 'commenter': 'Mostafa-ashraf19', 'type': 'User'}, {'comment_id': 688712594, 'comment_body': '@paulthomson All tests are passed in normal build and debug configuration build.', 'comment_created': datetime.datetime(2021, 8, 13, 18, 42, 5, tzinfo=datetime.timezone.utc), 'commenter': 'Mostafa-ashraf19', 'type': 'User'}, {'comment_id': 688722666, 'comment_body': ""I don't think you have checked that it is actually an integer."", 'comment_created': datetime.datetime(2021, 8, 13, 19, 1, 57, tzinfo=datetime.timezone.utc), 'commenter': 'paulthomson', 'type': 'User'}, {'comment_id': 688723219, 'comment_body': 'Use `GetNeededIndex`. ', 'comment_created': datetime.datetime(2021, 8, 13, 19, 3, 4, tzinfo=datetime.timezone.utc), 'commenter': 'paulthomson', 'type': 'User'}, {'comment_id': 688724926, 'comment_body': 'I suggest using a better name, like `GetMemorySemanticsOperandIndex(SpvOp opcode, uint32_t zero_or_one)`.\r\n\r\nUnder `SpvOpMemoryBarrier`, assert that `zero_or_one` is 0. List all other atomic instructions as cases. Under the default case, assert(false).\r\n', 'comment_created': datetime.datetime(2021, 8, 13, 19, 6, 37, tzinfo=datetime.timezone.utc), 'commenter': 'paulthomson', 'type': 'User'}, {'comment_id': 688725630, 'comment_body': ""I don't see a comment here. (Reply to [previous comment](https://github.com/KhronosGroup/SPIRV-Tools/pull/4455/files/1ec5ec89691cc173ca1685d644d357a3c9817e63#r688496907).)"", 'comment_created': datetime.datetime(2021, 8, 13, 19, 8, 2, tzinfo=datetime.timezone.utc), 'commenter': 'paulthomson', 'type': 'User'}, {'comment_id': 688728399, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 8, 13, 19, 13, 28, tzinfo=datetime.timezone.utc), 'commenter': 'Mostafa-ashraf19', 'type': 'User'}, {'comment_id': 688734641, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 8, 13, 19, 26, 33, tzinfo=datetime.timezone.utc), 'commenter': 'Mostafa-ashraf19', 'type': 'User'}, {'comment_id': 688735931, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 8, 13, 19, 29, 10, tzinfo=datetime.timezone.utc), 'commenter': 'Mostafa-ashraf19', 'type': 'User'}, {'comment_id': 688736287, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 8, 13, 19, 29, 57, tzinfo=datetime.timezone.utc), 'commenter': 'Mostafa-ashraf19', 'type': 'User'}, {'comment_id': 688905915, 'comment_body': '`ForEachInstructionWithInstructionDescriptor` iterates over _all_ instructions. `FindAvailableInstructions` finds instructions that are ""in scope"" (i.e. ""available"") at that point.\r\n\r\nHere is an example that gives an intuition in GLSL (it is not quite the same because SPIR-V is very different to GLSL, but I think you will get the idea).\r\n\r\n```\r\nvoid main() {\r\n  int g = 1;\r\n  if (...) {\r\n    int a = 2;\r\n    g += 2;\r\n  } else {\r\n    int b = 3;\r\n    b += z;\r\n    \r\n    // At this ""instruction"" (actually a statement):\r\n    // - |g| is available.\r\n    // - |a| is NOT available.\r\n    // - |b| is available.\r\n    // Thus, we could insert |g| or |b| somewhere \r\n    // on the right hand side of this instruction,\r\n    // but not |a|.\r\n    int calculation = 2 + 3;\r\n  }\r\n}\r\n```\r\n\r\nGiven this, do you see why you probably _don\'t_ want to find _available_ atomic instructions? You want to iterate over all instructions but only when the |inst_it| is an atomic instruction will you consider adding a transformation. Also, you will want to use the `InstructionDescriptor` rather than leaving it as `/*unused*/`. ', 'comment_created': datetime.datetime(2021, 8, 14, 9, 17, 20, tzinfo=datetime.timezone.utc), 'commenter': 'paulthomson', 'type': 'User'}, {'comment_id': 688906277, 'comment_body': '`RandomIndex` should only be used to get an index within a list or container of some kind. ', 'comment_created': datetime.datetime(2021, 8, 14, 9, 21, 26, tzinfo=datetime.timezone.utc), 'commenter': 'paulthomson', 'type': 'User'}, {'comment_id': 688907013, 'comment_body': 'I suggest that you do not randomly pick a semantics mask, because you might pick one that is is not allowed. This is OK for some fuzzer passes where the transformation is very complex but guesses are likely to be allowed (we can just give up if it is not allowed), but in this case we will need to work out what the allowed values are anyway (because of the higher bits) and then pick between those.\r\n\r\nI suggest you proceed roughly as follows:\r\n * Iterate over all instructions\r\n * If the instruction is not one of the atomic instructions we are targeting: continue to the next instruction (i.e. return, because we are inside a lambda).\r\n * Probability check\r\n * Call a function (that you will need to write) that returns how many memory semantics operands the opcode has. Remember to add an assert(false) for the default case. **Note: you will have quite a few switch statements in your transformation and fuzzer pass code; after writing this function, you might be able to remove most other switch statements and just call this function instead. See what you think.**\r\n * If there are two memory semantics operands, randomly pick 0 or 1. Otherwise, we just use 0. Use the value to get the current memory semantics value.\r\n * Create a list of potential new memory order values: {Acquire, Release, AcquireRelease, SequentiallyConsistent}. For each potential value, remove the value if it is not allowed according to `IsValidConversion`.\r\n * If list is empty, continue to the next instruction (i.e. return).\r\n * Randomly choose one of the allowed memory semantics values (low bits only).\r\n * ...\r\n\r\nYou may want to change your global mask constants to be members of your transformation class, so that you can reuse them here.\r\n', 'comment_created': datetime.datetime(2021, 8, 14, 9, 27, 58, tzinfo=datetime.timezone.utc), 'commenter': 'paulthomson', 'type': 'User'}, {'comment_id': 688907300, 'comment_body': 'Perhaps we should rename this to `memory_semantics_operand_position`. And then in all of your C++ code, when referring to the 0 or 1 value, use the word ""position"" in the variable name. And when referring to the actual operand index within the instruction, use ""operand_index"" in the variable name. This probably requires a lot of small changes to your transformation and fuzzer pass.', 'comment_created': datetime.datetime(2021, 8, 14, 9, 30, 7, tzinfo=datetime.timezone.utc), 'commenter': 'paulthomson', 'type': 'User'}, {'comment_id': 688907722, 'comment_body': 'As hinted above, you should use the `instruction_descriptor` that is provided by `ForEachInstructionWithInstructionDescriptor`.', 'comment_created': datetime.datetime(2021, 8, 14, 9, 34, 34, tzinfo=datetime.timezone.utc), 'commenter': 'paulthomson', 'type': 'User'}, {'comment_id': 688909320, 'comment_body': 'I think we should change the comments and the code to now always use ""lower bits"" and ""higher bits"".', 'comment_created': datetime.datetime(2021, 8, 14, 9, 50, 35, tzinfo=datetime.timezone.utc), 'commenter': 'paulthomson', 'type': 'User'}, {'comment_id': 688909470, 'comment_body': 'Once again, I think we should remove this `if`. We have a function for this already: `GetMemorySemanticsOperandIndex`. The `if` is doing exactly the same thing as the switch in `GetMemorySemanticsOperandIndex`. ', 'comment_created': datetime.datetime(2021, 8, 14, 9, 52, 18, tzinfo=datetime.timezone.utc), 'commenter': 'paulthomson', 'type': 'User'}, {'comment_id': 688909576, 'comment_body': 'Again, I think this function needs comments. It needs one big comment at the top, explaining roughly what we are doing, and it needs a comment above each check below. As I said in one of my other comments:\r\n\r\n>  In fact, you should also add a comment at the top of the function body explaining what it is we are trying to check. In other words, the things we list in our doc:\r\n>\r\n> * Load: None -> Acquire  -> SequentiallyConsistent\r\n> * Store: None -> Release -> SequentiallyConsistent\r\n> * RMW: None -> AcquireRelease -> SequentiallyConsistent\r\n> * Barrier: None -> Acquire / Release -> AcquireRelease -> SequentiallyConsistent\r\n> * When the memory model is Vulkan, SequentiallyConsistent must not be used.\r\n', 'comment_created': datetime.datetime(2021, 8, 14, 9, 53, 31, tzinfo=datetime.timezone.utc), 'commenter': 'paulthomson', 'type': 'User'}, {'comment_id': 688909662, 'comment_body': 'I think you can remove most of this comment. And instead, add some comments inside `IsValidConversion`, as I have previously suggested.', 'comment_created': datetime.datetime(2021, 8, 14, 9, 54, 17, tzinfo=datetime.timezone.utc), 'commenter': 'paulthomson', 'type': 'User'}, {'comment_id': 688910364, 'comment_body': 'I suggest removing the casts in this case. The values may not end up as actual values of the enum, and we are not comparing against values of the enum, so there is no real advantage. ', 'comment_created': datetime.datetime(2021, 8, 14, 10, 1, 23, tzinfo=datetime.timezone.utc), 'commenter': 'paulthomson', 'type': 'User'}, {'comment_id': 688910624, 'comment_body': 'I suggest you replace with: Compare and exchange instructions take two memory semantics values: ""Equal"" and ""Unequal"". There are extra restrictions in this case.\r\n\r\nAnd then add comments to the statements below, within the `if`, for each check that you are doing. ', 'comment_created': datetime.datetime(2021, 8, 14, 10, 3, 59, tzinfo=datetime.timezone.utc), 'commenter': 'paulthomson', 'type': 'User'}, {'comment_id': 688912097, 'comment_body': 'Actually, according to our shared doc, we only wanted to support:\r\n\r\n* RMW: None -> AcquireRelease -> SequentiallyConsistent\r\n\r\nSo, although the check passes, I think the comment is incorrect. IsApplicable returns false because the old value is not one of the RMW values we expect. And so, the check is not actually very interesting. You should probably change the OpAtomicExchange in the original SPIR-V module use a memory semantics value that we expect. ', 'comment_created': datetime.datetime(2021, 8, 14, 10, 18, 50, tzinfo=datetime.timezone.utc), 'commenter': 'paulthomson', 'type': 'User'}, {'comment_id': 688912856, 'comment_body': 'This comment is very hard to understand because you use ""unequal"" without saying what it means or what it is. You should introduce the two operands, or at least mention that it is an operand (e.g. ""the unequal operand"") because then at least the reader knows that they need to lookup the operands for `OpAtomicCompareExchange`.\r\n\r\nI suggest that you say ""takes two memory semantics operands: Equal and Unequal. Unequal can\'t be..."". Or ""takes two memory semantics operands. The second operand cannot be ..."". \r\n\r\nAlso, I think the comment is incorrect. I believe the Unequal operand must not be `Release` nor `AcquireRelease`. So I guess you meant to say `AcquireRelease` instead of `acquire/release`. In English, `/` usually means ""either"", so either `Acquire` or `Release`, which is different to the `AcquireRelease` value (which means both acquire and release). ', 'comment_created': datetime.datetime(2021, 8, 14, 10, 27, 23, tzinfo=datetime.timezone.utc), 'commenter': 'paulthomson', 'type': 'User'}, {'comment_id': 688914774, 'comment_body': 'These look like good tests. But I think it would be clearer if you gave the full details in the comment. E.g.\r\n// Bad transformation:\r\n// OpAtomicLoad Acquire | UniformMemory\r\n// to:\r\n// OpAtomicLoad Acquire | WorkgroupMemory\r\n\r\nAlso, in hindsight, I should have suggested two different tests:\r\n// Bad transformation: (higher bits must not change)\r\n// OpAtomicLoad Acquire | UniformMemory\r\n// to:\r\n// OpAtomicLoad SequentiallyConsistent | WorkgroupMemory\r\n\r\n// Bad transformation: (lower bits must change)\r\n// OpAtomicLoad Acquire | UniformMemory\r\n// to:\r\n// OpAtomicLoad Acquire | UniformMemory\r\n\r\nBut this was my mistake, so no need to do this right now.', 'comment_created': datetime.datetime(2021, 8, 14, 10, 45, 41, tzinfo=datetime.timezone.utc), 'commenter': 'paulthomson', 'type': 'User'}, {'comment_id': 688914787, 'comment_body': 'Good comments! I suggest changing it a bit:\r\n\r\n```\r\n// OpAtomicLoad Acquire                | UniformMemory\r\n// to:\r\n// OpAtomicLoad SequentiallyConsistent | UniformMemory\r\n```', 'comment_created': datetime.datetime(2021, 8, 14, 10, 46, 8, tzinfo=datetime.timezone.utc), 'commenter': 'paulthomson', 'type': 'User'}, {'comment_id': 688918907, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 8, 14, 11, 28, 10, tzinfo=datetime.timezone.utc), 'commenter': 'Mostafa-ashraf19', 'type': 'User'}, {'comment_id': 688923176, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 8, 14, 12, 11, 2, tzinfo=datetime.timezone.utc), 'commenter': 'Mostafa-ashraf19', 'type': 'User'}, {'comment_id': 688924186, 'comment_body': 'Improved.', 'comment_created': datetime.datetime(2021, 8, 14, 12, 21, 17, tzinfo=datetime.timezone.utc), 'commenter': 'Mostafa-ashraf19', 'type': 'User'}, {'comment_id': 688924757, 'comment_body': 'Changed to:\r\n```\r\n  // Bad transformation:\r\n  // OpAtomicExchange AcquireRelease | UniformMemory\r\n  // to:\r\n  // OpAtomicExchange None           | UniformMemory\r\n```', 'comment_created': datetime.datetime(2021, 8, 14, 12, 26, 18, tzinfo=datetime.timezone.utc), 'commenter': 'Mostafa-ashraf19', 'type': 'User'}, {'comment_id': 688925149, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 8, 14, 12, 29, 50, tzinfo=datetime.timezone.utc), 'commenter': 'Mostafa-ashraf19', 'type': 'User'}, {'comment_id': 688925251, 'comment_body': 'Removed.', 'comment_created': datetime.datetime(2021, 8, 14, 12, 30, 59, tzinfo=datetime.timezone.utc), 'commenter': 'Mostafa-ashraf19', 'type': 'User'}, {'comment_id': 688925519, 'comment_body': 'Removed.', 'comment_created': datetime.datetime(2021, 8, 14, 12, 33, 55, tzinfo=datetime.timezone.utc), 'commenter': 'Mostafa-ashraf19', 'type': 'User'}, {'comment_id': 688926260, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 8, 14, 12, 41, 7, tzinfo=datetime.timezone.utc), 'commenter': 'Mostafa-ashraf19', 'type': 'User'}, {'comment_id': 688926717, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 8, 14, 12, 45, 29, tzinfo=datetime.timezone.utc), 'commenter': 'Mostafa-ashraf19', 'type': 'User'}, {'comment_id': 688930706, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 8, 14, 13, 26, 13, tzinfo=datetime.timezone.utc), 'commenter': 'Mostafa-ashraf19', 'type': 'User'}, {'comment_id': 688933566, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 8, 14, 13, 54, 53, tzinfo=datetime.timezone.utc), 'commenter': 'Mostafa-ashraf19', 'type': 'User'}, {'comment_id': 688941970, 'comment_body': 'Removed.', 'comment_created': datetime.datetime(2021, 8, 14, 15, 18, 33, tzinfo=datetime.timezone.utc), 'commenter': 'Mostafa-ashraf19', 'type': 'User'}, {'comment_id': 688941998, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 8, 14, 15, 18, 57, tzinfo=datetime.timezone.utc), 'commenter': 'Mostafa-ashraf19', 'type': 'User'}, {'comment_id': 688976747, 'comment_body': 'Thanks for the clarification.\r\nDone.', 'comment_created': datetime.datetime(2021, 8, 14, 18, 19, 2, tzinfo=datetime.timezone.utc), 'commenter': 'Mostafa-ashraf19', 'type': 'User'}, {'comment_id': 688976777, 'comment_body': 'Thanks for the clarification.\r\nDone.', 'comment_created': datetime.datetime(2021, 8, 14, 18, 19, 36, tzinfo=datetime.timezone.utc), 'commenter': 'Mostafa-ashraf19', 'type': 'User'}, {'comment_id': 689393940, 'comment_body': 'I see. You are using this function to check whether _any_ instruction has memory semantics operands, so 0 is a valid return value. So I agree that you can remove the assert. ', 'comment_created': datetime.datetime(2021, 8, 16, 9, 50, 17, tzinfo=datetime.timezone.utc), 'commenter': 'paulthomson', 'type': 'User'}, {'comment_id': 689421941, 'comment_body': 'I suggest you replace both of the comments with just one comment:\r\n\r\n```c++\r\n// The instruction must have at least one memory semantics operand.\r\nauto number_of_memory_semantics = ...;\r\nif (number_of_memory_semantics == 0) ...\r\n```\r\n', 'comment_created': datetime.datetime(2021, 8, 16, 10, 35, 17, tzinfo=datetime.timezone.utc), 'commenter': 'paulthomson', 'type': 'User'}, {'comment_id': 689429391, 'comment_body': 'One could argue that this code is not redundant. If a future version of SPIR-V adds a new instruction that takes a memory semantics operand at index 4, we might update `GetNumberOfMemorySemantics` to add the new opcode case, but forget to update `GetMemorySemanticsOperandIndex`. With the switch, the assert would fail and we would notice the mistake. If we remove the switch, the code would silently do the wrong thing (return 2), which would be difficult to debug. Thus, I suggest you use a switch here. ', 'comment_created': datetime.datetime(2021, 8, 16, 10, 47, 7, tzinfo=datetime.timezone.utc), 'commenter': 'paulthomson', 'type': 'User'}, {'comment_id': 689432606, 'comment_body': 'Typo. memory_semanitcs_masks -> memory_semantics_masks\r\n\r\nAlso, I think a better name would be one of the following, or similar:\r\n\r\n* potential_new_memory_orders\r\n* potential_new_memory_semantics', 'comment_created': datetime.datetime(2021, 8, 16, 10, 52, 12, tzinfo=datetime.timezone.utc), 'commenter': 'paulthomson', 'type': 'User'}, {'comment_id': 689433221, 'comment_body': 'This looks wrong, as does the code below. `std::remove_if` is iterating over `memory_semanitcs_masks`. The value of each element is stored in `SpvMemorySemanticsMask /*unused*/`. You need to give that variable a name and check that value. ', 'comment_created': datetime.datetime(2021, 8, 16, 10, 53, 17, tzinfo=datetime.timezone.utc), 'commenter': 'paulthomson', 'type': 'User'}, {'comment_id': 689439073, 'comment_body': ""I don't think you need this. `std::remove_if` removes elements. You don't also need to call `erase`. \r\n\r\nIf the `erase` call is not triggering undefined behavior, then I think it is doing nothing because you are essentially calling:\r\n\r\n```\r\nmemory_semanitcs_masks.erase(memory_semanitcs_masks.end(), memory_semanitcs_masks.end());\r\n```\r\n\r\n...which does nothing.\r\n\r\nBut I think the `erase` call might even trigger undefined behavior because the `remove_if`is modifying the vector and thus invalidating iterators, and yet you are passing `memory_semanitcs_masks.end()` to `erase`. "", 'comment_created': datetime.datetime(2021, 8, 16, 11, 2, 40, tzinfo=datetime.timezone.utc), 'commenter': 'paulthomson', 'type': 'User'}, {'comment_id': 689444728, 'comment_body': 'I suggest doing this in two steps, so that it is super clear.\r\n\r\n```c++\r\n// Randomly choose a new memory semantics value (lower bits).\r\n...\r\n// Bitwise-OR with the higher bits of the old value, to get the new value (all bits).\r\n...\r\n```', 'comment_created': datetime.datetime(2021, 8, 16, 11, 12, 21, tzinfo=datetime.timezone.utc), 'commenter': 'paulthomson', 'type': 'User'}, {'comment_id': 689446337, 'comment_body': 'Change to: Strengthens a memory semantics operand within an instruction. Only the memory order (the first 5 bits) is changed.', 'comment_created': datetime.datetime(2021, 8, 16, 11, 15, 1, tzinfo=datetime.timezone.utc), 'commenter': 'paulthomson', 'type': 'User'}, {'comment_id': 689447102, 'comment_body': 'Change to: The operand position of the memory semantics operand within |atomic_instruction|; 0 for the first memory semantics operand, 1 for the second memory semantics operand.', 'comment_created': datetime.datetime(2021, 8, 16, 11, 16, 20, tzinfo=datetime.timezone.utc), 'commenter': 'paulthomson', 'type': 'User'}, {'comment_id': 689447244, 'comment_body': 'Remove the double spaces after `uint32`.', 'comment_created': datetime.datetime(2021, 8, 16, 11, 16, 34, tzinfo=datetime.timezone.utc), 'commenter': 'paulthomson', 'type': 'User'}, {'comment_id': 689449296, 'comment_body': 'I think you can replace this with:\r\n\r\n```c++\r\nassert(GetNumberOfMemorySemantics(...) > 0 && ""The instruction does not have any memory semantics operands."");\r\nassert(memory_semantics_operand_position < GetNumberOfMemorySemantics(...) && ""The operand position is out of bounds."");\r\n```\r\n\r\nI think you can remove the `IsNeededOpcodeWithAppropriatePosition` function. ', 'comment_created': datetime.datetime(2021, 8, 16, 11, 19, 39, tzinfo=datetime.timezone.utc), 'commenter': 'paulthomson', 'type': 'User'}, {'comment_id': 689452148, 'comment_body': 'See my comment below on the other constructor. ', 'comment_created': datetime.datetime(2021, 8, 16, 11, 24, 35, tzinfo=datetime.timezone.utc), 'commenter': 'paulthomson', 'type': 'User'}, {'comment_id': 689454369, 'comment_body': 'Change to: The lower bits of the new memory semantics value must be suitable.', 'comment_created': datetime.datetime(2021, 8, 16, 11, 28, 32, tzinfo=datetime.timezone.utc), 'commenter': 'paulthomson', 'type': 'User'}, {'comment_id': 689454879, 'comment_body': 'Rename to `IsSuitableStrengthening`. ', 'comment_created': datetime.datetime(2021, 8, 16, 11, 29, 29, tzinfo=datetime.timezone.utc), 'commenter': 'paulthomson', 'type': 'User'}, {'comment_id': 689456564, 'comment_body': 'Move this comment to above the `if` statement and change to:\r\n\r\nCompare and exchange instructions take two memory semantics values: ""Equal"" and ""Unequal"". There are extra restrictions on the ""Unequal"" value.', 'comment_created': datetime.datetime(2021, 8, 16, 11, 32, 23, tzinfo=datetime.timezone.utc), 'commenter': 'paulthomson', 'type': 'User'}, {'comment_id': 689457880, 'comment_body': 'Replace `1` with a constant `kUnequalMemorySemanticsOperandPosition`. Otherwise, it is not clear what is happening here. ', 'comment_created': datetime.datetime(2021, 8, 16, 11, 34, 17, tzinfo=datetime.timezone.utc), 'commenter': 'paulthomson', 'type': 'User'}, {'comment_id': 689459832, 'comment_body': 'Nit: I would personally split this into multiple statements:\r\n\r\n```c++\r\nauto equal_memory_semantics_value_instruction = ir_context->get_def_use_mgr()->GetDef(needed_atomic_instruction->GetSingleWordInOperand(2));\r\nauto equal_memory_semantics_value_lower_bits = static_cast<SpvMemorySemanticsMask>(equal_memory_semantics_value_instruction->GetSingleWordInOperand(0) & kMemorySemanticsLowerBitmask);\r\n```', 'comment_created': datetime.datetime(2021, 8, 16, 11, 37, 33, tzinfo=datetime.timezone.utc), 'commenter': 'paulthomson', 'type': 'User'}, {'comment_id': 689480946, 'comment_body': 'Add a comment above the `if`: The memory order of the ""Unequal"" value must not be stronger than the ""Equal"" value.\r\n', 'comment_created': datetime.datetime(2021, 8, 16, 12, 11, 6, tzinfo=datetime.timezone.utc), 'commenter': 'paulthomson', 'type': 'User'}, {'comment_id': 689481730, 'comment_body': 'Add a comment above this `if`: The ""Unequal"" memory order (i.e. the lower bits) must not be Release or AcquireRelease.', 'comment_created': datetime.datetime(2021, 8, 16, 12, 12, 19, tzinfo=datetime.timezone.utc), 'commenter': 'paulthomson', 'type': 'User'}, {'comment_id': 689483999, 'comment_body': 'As I suggested in my last review, you should use `IsValidConversion` here, instead of duplicating some of its logic. ', 'comment_created': datetime.datetime(2021, 8, 16, 12, 15, 54, tzinfo=datetime.timezone.utc), 'commenter': 'paulthomson', 'type': 'User'}, {'comment_id': 689485563, 'comment_body': 'I have left some comments about this code below, but it generally looks very good! However, you should move this logic into `IsValidConversion` so that the logic for checking the lower bits is all in one place. You will need to add a parameter for the memory semantics operand position. \r\n\r\nAs I specified in my previous review, and in another comment this time, you should use `IsValidConversion` is your fuzzer pass to make sure you never create a transformation that cannot be applied. If you did not move this code into `IsValidConversion` then you might end up creating a transformation that violates one of these extra restrictions, and so cannot be applied. This would crash spirv-fuzz. ', 'comment_created': datetime.datetime(2021, 8, 16, 12, 18, 21, tzinfo=datetime.timezone.utc), 'commenter': 'paulthomson', 'type': 'User'}, {'comment_id': 689518461, 'comment_body': 'Please remove this comment. I said that you should add a comment in the function body, which means after the opening `{`. I also said that you should include the bullet points from our doc to give the reader a high-level explanation of what we are doing; I see that you have done this in the header, but I will actually suggest that we save the detail for the function body in this case (this is my subjective opinion on what is best). I will give you the comment here. Please add it after the `{`. The other comments in the function body look good.\r\n\r\nThe comment:\r\n\r\nOur aim is to strengthen the memory order because this does not change the semantics of the SPIR-V module. However, some memory orders are invalid (according the SPIR-V specification) in certain cases, and others are technically allowed, but confusing. Thus, we only allow the following strengthenings depending on the type of instruction:\r\n\r\n* Load: None -> Acquire -> SequentiallyConsistent\r\n* Store: None -> Release -> SequentiallyConsistent\r\n* Read-modify-write: None -> AcquireRelease -> SequentiallyConsistent\r\n* Barrier: None -> Acquire / Release -> AcquireRelease -> SequentiallyConsistent\r\n\r\nNote that in the barrier case, we can strengthen from None to Acquire, or from None to Release, but we cannot go from Acquire to Release. We can easily check all the above by checking that the old and new memory order values are both one of the expected values for the instruction type, and that: old value < new value, with a special case to disallow going from Acquire to Release in a barrier instruction.\r\n\r\nThere are also other restrictions, explained below.', 'comment_created': datetime.datetime(2021, 8, 16, 13, 4, 22, tzinfo=datetime.timezone.utc), 'commenter': 'paulthomson', 'type': 'User'}, {'comment_id': 689521784, 'comment_body': 'Change to: Strengthens a memory semantics operand within an instruction. Only the memory order (the first 5 bits) is changed.', 'comment_created': datetime.datetime(2021, 8, 16, 13, 8, 37, tzinfo=datetime.timezone.utc), 'commenter': 'paulthomson', 'type': 'User'}, {'comment_id': 689522099, 'comment_body': 'Comments need updating at some point. ', 'comment_created': datetime.datetime(2021, 8, 16, 13, 9, tzinfo=datetime.timezone.utc), 'commenter': 'paulthomson', 'type': 'User'}, {'comment_id': 689526702, 'comment_body': 'Thank you for writing this, but I suggest that, in this case, we leave the details within a comment in the function body (which I have already provided in another comment). I suggest that you replace this documentation comment with:\r\n\r\nReturns true if the proposed memory order strengthening from |first_5bits_old_memory_semantics| to |first_5bits_new_memory_semantics| is both valid (according to the SPIR-V specification) and is actually a strengthening that would not change the semantics of a SPIR-V module. For full details, see the comments within the function body.', 'comment_created': datetime.datetime(2021, 8, 16, 13, 14, 28, tzinfo=datetime.timezone.utc), 'commenter': 'paulthomson', 'type': 'User'}, {'comment_id': 689528527, 'comment_body': 'According to the Google C++ style guide, the comment should probably start with: Returns true if...\r\n\r\nAnd same below. Just so you are aware: in this project, we typically violate the style guide for the `IsApplicable` documentation comment. ', 'comment_created': datetime.datetime(2021, 8, 16, 13, 16, 50, tzinfo=datetime.timezone.utc), 'commenter': 'paulthomson', 'type': 'User'}, {'comment_id': 689533535, 'comment_body': 'Rename function: GetMemorySemanticsInOperandIndex\r\n\r\nRename parameter: `zero_or_one` -> `memory_semantics_operand_position`\r\n\r\nChange comment to: Returns the ""in operand"" index of the memory semantics operand for the instruction. \r\n- |opcode|: the instruction opcode.\r\n- |memory_semantics_operand_position|: 0 for the first memory semantics operand or 1 for the second memory semantics operand in the instruction.', 'comment_created': datetime.datetime(2021, 8, 16, 13, 23, 11, tzinfo=datetime.timezone.utc), 'commenter': 'paulthomson', 'type': 'User'}, {'comment_id': 689533683, 'comment_body': 'Return -> Returns', 'comment_created': datetime.datetime(2021, 8, 16, 13, 23, 22, tzinfo=datetime.timezone.utc), 'commenter': 'paulthomson', 'type': 'User'}, {'comment_id': 689535695, 'comment_body': 'You should remove the `.IsApplicable` call. And the same below. The assertion fails in the `TransformationChangingMemorySemantics` constructor. ', 'comment_created': datetime.datetime(2021, 8, 16, 13, 26, 1, tzinfo=datetime.timezone.utc), 'commenter': 'paulthomson', 'type': 'User'}, {'comment_id': 689538273, 'comment_body': 'Since you have assert death tests, you should add a test that passes a non-atomic and non-barrier opcode. You will get a different assertion message (if you make the other changes I suggested). ', 'comment_created': datetime.datetime(2021, 8, 16, 13, 29, 9, tzinfo=datetime.timezone.utc), 'commenter': 'paulthomson', 'type': 'User'}, {'comment_id': 689541953, 'comment_body': 'Very nice comments!\r\n\r\nHowever, I would add the information about the two operands being called ""Equal"" and ""Unequal"" here, just because you have introduced a variable called `memory_semantics_unequal_position`. So you are using the ""unequal"" term here, without explaining it. Or, you could rename `memory_semantics_unequal_position` to `memory_semantics_operand_second_position`. ', 'comment_created': datetime.datetime(2021, 8, 16, 13, 33, 46, tzinfo=datetime.timezone.utc), 'commenter': 'paulthomson', 'type': 'User'}, {'comment_id': 689543112, 'comment_body': 'Excellent comments. They really help make the tests readable. ', 'comment_created': datetime.datetime(2021, 8, 16, 13, 35, 17, tzinfo=datetime.timezone.utc), 'commenter': 'paulthomson', 'type': 'User'}, {'comment_id': 689561131, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 8, 16, 13, 57, 13, tzinfo=datetime.timezone.utc), 'commenter': 'Mostafa-ashraf19', 'type': 'User'}, {'comment_id': 689563416, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 8, 16, 13, 59, 53, tzinfo=datetime.timezone.utc), 'commenter': 'Mostafa-ashraf19', 'type': 'User'}, {'comment_id': 689565326, 'comment_body': 'Thanks for the clarification, Done.', 'comment_created': datetime.datetime(2021, 8, 16, 14, 2, 6, tzinfo=datetime.timezone.utc), 'commenter': 'Mostafa-ashraf19', 'type': 'User'}, {'comment_id': 689566334, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 8, 16, 14, 3, 19, tzinfo=datetime.timezone.utc), 'commenter': 'Mostafa-ashraf19', 'type': 'User'}, {'comment_id': 689573265, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 8, 16, 14, 11, 46, tzinfo=datetime.timezone.utc), 'commenter': 'Mostafa-ashraf19', 'type': 'User'}, {'comment_id': 689573802, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 8, 16, 14, 12, 26, tzinfo=datetime.timezone.utc), 'commenter': 'Mostafa-ashraf19', 'type': 'User'}, {'comment_id': 689573946, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 8, 16, 14, 12, 39, tzinfo=datetime.timezone.utc), 'commenter': 'Mostafa-ashraf19', 'type': 'User'}, {'comment_id': 689574922, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 8, 16, 14, 13, 50, tzinfo=datetime.timezone.utc), 'commenter': 'Mostafa-ashraf19', 'type': 'User'}, {'comment_id': 689576292, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 8, 16, 14, 15, 24, tzinfo=datetime.timezone.utc), 'commenter': 'Mostafa-ashraf19', 'type': 'User'}, {'comment_id': 689577149, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 8, 16, 14, 16, 19, tzinfo=datetime.timezone.utc), 'commenter': 'Mostafa-ashraf19', 'type': 'User'}, {'comment_id': 689578020, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 8, 16, 14, 17, 21, tzinfo=datetime.timezone.utc), 'commenter': 'Mostafa-ashraf19', 'type': 'User'}, {'comment_id': 689580142, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 8, 16, 14, 19, 54, tzinfo=datetime.timezone.utc), 'commenter': 'Mostafa-ashraf19', 'type': 'User'}, {'comment_id': 689580540, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 8, 16, 14, 20, 25, tzinfo=datetime.timezone.utc), 'commenter': 'Mostafa-ashraf19', 'type': 'User'}, {'comment_id': 689580975, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 8, 16, 14, 20, 56, tzinfo=datetime.timezone.utc), 'commenter': 'Mostafa-ashraf19', 'type': 'User'}, {'comment_id': 689582690, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 8, 16, 14, 22, 50, tzinfo=datetime.timezone.utc), 'commenter': 'Mostafa-ashraf19', 'type': 'User'}, {'comment_id': 689585696, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 8, 16, 14, 26, 18, tzinfo=datetime.timezone.utc), 'commenter': 'Mostafa-ashraf19', 'type': 'User'}, {'comment_id': 689586174, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 8, 16, 14, 26, 52, tzinfo=datetime.timezone.utc), 'commenter': 'Mostafa-ashraf19', 'type': 'User'}, {'comment_id': 689587331, 'comment_body': 'Thanks.', 'comment_created': datetime.datetime(2021, 8, 16, 14, 28, 10, tzinfo=datetime.timezone.utc), 'commenter': 'Mostafa-ashraf19', 'type': 'User'}, {'comment_id': 689590431, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 8, 16, 14, 31, 44, tzinfo=datetime.timezone.utc), 'commenter': 'Mostafa-ashraf19', 'type': 'User'}, {'comment_id': 689962291, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 8, 17, 1, 16, 13, tzinfo=datetime.timezone.utc), 'commenter': 'Mostafa-ashraf19', 'type': 'User'}, {'comment_id': 689963477, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 8, 17, 1, 20, 5, tzinfo=datetime.timezone.utc), 'commenter': 'Mostafa-ashraf19', 'type': 'User'}, {'comment_id': 689966300, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 8, 17, 1, 28, 17, tzinfo=datetime.timezone.utc), 'commenter': 'Mostafa-ashraf19', 'type': 'User'}, {'comment_id': 689966708, 'comment_body': 'Thanks for the clarification.\r\nDone.', 'comment_created': datetime.datetime(2021, 8, 17, 1, 29, 26, tzinfo=datetime.timezone.utc), 'commenter': 'Mostafa-ashraf19', 'type': 'User'}, {'comment_id': 689968839, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 8, 17, 1, 35, 59, tzinfo=datetime.timezone.utc), 'commenter': 'Mostafa-ashraf19', 'type': 'User'}, {'comment_id': 689969766, 'comment_body': 'Thanks for the clarification.\r\nDone.', 'comment_created': datetime.datetime(2021, 8, 17, 1, 38, 51, tzinfo=datetime.timezone.utc), 'commenter': 'Mostafa-ashraf19', 'type': 'User'}, {'comment_id': 689969974, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 8, 17, 1, 39, 37, tzinfo=datetime.timezone.utc), 'commenter': 'Mostafa-ashraf19', 'type': 'User'}, {'comment_id': 689970628, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 8, 17, 1, 41, 29, tzinfo=datetime.timezone.utc), 'commenter': 'Mostafa-ashraf19', 'type': 'User'}, {'comment_id': 689974114, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 8, 17, 1, 51, 56, tzinfo=datetime.timezone.utc), 'commenter': 'Mostafa-ashraf19', 'type': 'User'}, {'comment_id': 689986491, 'comment_body': 'Improved.', 'comment_created': datetime.datetime(2021, 8, 17, 2, 24, 5, tzinfo=datetime.timezone.utc), 'commenter': 'Mostafa-ashraf19', 'type': 'User'}, {'comment_id': 689989219, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 8, 17, 2, 32, 15, tzinfo=datetime.timezone.utc), 'commenter': 'Mostafa-ashraf19', 'type': 'User'}, {'comment_id': 689989770, 'comment_body': ""I can't use this function as I talk with you because the `IsValidConversion` with its new name `IsSuitableStrengthening`, takes these arguments:\r\n```cpp\r\n  // function prototype\r\n  static bool IsSuitableStrengthening(\r\n      opt::IRContext* ir_context,\r\n      spvtools::opt::Instruction* needed_atomic_instruction,\r\n      SpvMemorySemanticsMask first_5bits_old_memory_semantics,\r\n      SpvMemorySemanticsMask first_5bits_new_memory_semantics,\r\n      uint32_t memory_semantics_operand_position, SpvMemoryModel memory_model);\r\n```\r\nIt needs `first_5bits_new_memory_semantics` and I'm not generating it at this step.\r\nWhat do you think @paulthomson?"", 'comment_created': datetime.datetime(2021, 8, 17, 2, 33, 59, tzinfo=datetime.timezone.utc), 'commenter': 'Mostafa-ashraf19', 'type': 'User'}, {'comment_id': 689990216, 'comment_body': ""Yes, you are right, but here I'm don't need `SpvMemorySemanticsMask /*unused*/` because I would like to filter the `potential_new_memory_orders` vector and remove elements that are not suitable for specific atomic or barrier instruction depend on `lower_bits_old_memory_semantics`.\r\nWhat do you think @paulthomson?"", 'comment_created': datetime.datetime(2021, 8, 17, 2, 35, 9, tzinfo=datetime.timezone.utc), 'commenter': 'Mostafa-ashraf19', 'type': 'User'}, {'comment_id': 690226901, 'comment_body': ""Let's discuss this via a video call."", 'comment_created': datetime.datetime(2021, 8, 17, 10, 8, 56, tzinfo=datetime.timezone.utc), 'commenter': 'paulthomson', 'type': 'User'}, {'comment_id': 690227797, 'comment_body': ""Let's discuss this via video call. In short: `potential_new_memory_orders` is your list of first_5bits_new_memory_semantics. Also, while we are here, you should rename first_5bits to lower_bits, as per a previous comment of mine. "", 'comment_created': datetime.datetime(2021, 8, 17, 10, 10, 16, tzinfo=datetime.timezone.utc), 'commenter': 'paulthomson', 'type': 'User'}, {'comment_id': 690246739, 'comment_body': 'Could you please add a static function similar to:\r\n\r\n```c++\r\nstd::vector<SpvMemorySemanticsMask> FuzzerPassChangingMemorySemantics::GetSuitableNewMemorySemanticsLowerBitValues(SpvOp opcode, SpvMemorySemanticsMask lower_bits_old_memory_semantics_value)\r\n```\r\n\r\nIt should return a vector containing only the suitable new memory semantic values (lower bits) given the opcode and old memory semantics value (lower bits). E.g. for OpAtomicLoad and None, it should return [Acquire, SequentiallyConsistent]. You can then write a test for this function in a file called ""fuzzer_pass_changing_memory_semantics_test.cpp"".\r\n\r\nYou may end up adding other parameters to this function at some point, which is fine.\r\n', 'comment_created': datetime.datetime(2021, 8, 17, 10, 38, 50, tzinfo=datetime.timezone.utc), 'commenter': 'paulthomson', 'type': 'User'}, {'comment_id': 690367743, 'comment_body': 'I was wrong about this. Thank you for explaining that `std::remove_if` does not actually remove any elements; it just reorders the elements so that the ""remaining"" elements are at the front of the vector. As discussed, I think you should separate the `remove_if` and `erase` calls so that the code is clearer, perhaps adding a comment to remind the reader that: std::remove_if does not actually remove any elements from the vector; it just reorders them to the end of the vector.', 'comment_created': datetime.datetime(2021, 8, 17, 13, 25, 23, tzinfo=datetime.timezone.utc), 'commenter': 'paulthomson', 'type': 'User'}, {'comment_id': 690375914, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 8, 17, 13, 34, 11, tzinfo=datetime.timezone.utc), 'commenter': 'Mostafa-ashraf19', 'type': 'User'}, {'comment_id': 690376125, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 8, 17, 13, 34, 26, tzinfo=datetime.timezone.utc), 'commenter': 'Mostafa-ashraf19', 'type': 'User'}, {'comment_id': 690398720, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 8, 17, 13, 58, 25, tzinfo=datetime.timezone.utc), 'commenter': 'Mostafa-ashraf19', 'type': 'User'}, {'comment_id': 690503948, 'comment_body': 'Could you replace the check above with a few checks that look a bit like the below. And could you add more similar checks for a RMW instruction with one semantics value, RMW instruction with two semantics value (which will check that the ""Unequal"" values are restricted appropriately), and a barrier instruction, specifically checking that when the old value is `None` we get: Acquire, Release, AcquireRelease, SequentiallyConsistent; and when the old value is Acquire, we get: AcquireRelease, SequentiallyConsisntent (i.e. no Release value).\r\n\r\nI think it is OK here to ""lie"" about the memory model of the ir_context, and the old memory semantics value, etc. where helpful. In other words, you don\'t need to add two barrier instructions to the SPIR-V assembly; you could just use one. \r\n\r\n```c++\r\n    // OpAtomicLoad: None -> [Acquire, SequentiallyConsistent].\r\n    {\r\n      auto old_value = SpvMemorySemanticsMaskNone;\r\n      auto expected = std::vector<SpvMemorySemanticsMask>{\r\n          SpvMemorySemanticsAcquireMask,\r\n          SpvMemorySemanticsSequentiallyConsistentMask};\r\n      auto actual = FuzzerPassChangingMemorySemantics::\r\n          GetSuitableNewMemorySemanticsLowerBitValues(\r\n              context.get(), atomic_load_instruction, old_value, 0,\r\n              SpvMemoryModelGLSL450);\r\n      ASSERT_EQ(expected, actual);\r\n    }\r\n\r\n    // OpAtomicLoad: Acquire -> [SequentiallyConsistent].\r\n    {\r\n      auto old_value = SpvMemorySemanticsAcquireMask;\r\n      auto expected = std::vector<SpvMemorySemanticsMask>{\r\n          SpvMemorySemanticsSequentiallyConsistentMask};\r\n      auto actual = FuzzerPassChangingMemorySemantics::\r\n          GetSuitableNewMemorySemanticsLowerBitValues(\r\n              context.get(), atomic_load_instruction, old_value, 0,\r\n              SpvMemoryModelGLSL450);\r\n      ASSERT_EQ(expected, actual);\r\n    }\r\n\r\n    // OpAtomicLoad: Acquire -> []\r\n    // (with Vulkan memory model).\r\n    {\r\n      auto old_value = SpvMemorySemanticsAcquireMask;\r\n      auto expected = std::vector<SpvMemorySemanticsMask>{};\r\n      auto actual = FuzzerPassChangingMemorySemantics::\r\n          GetSuitableNewMemorySemanticsLowerBitValues(\r\n              context.get(), atomic_load_instruction, old_value, 0,\r\n              SpvMemoryModelVulkan);\r\n      ASSERT_EQ(expected, actual);\r\n    }\r\n  }\r\n  \r\n```', 'comment_created': datetime.datetime(2021, 8, 17, 15, 51, 56, tzinfo=datetime.timezone.utc), 'commenter': 'paulthomson', 'type': 'User'}, {'comment_id': 690509880, 'comment_body': 'Could you add one more transformation here for a compare and exchange instruction with two memory semantic values, where the transformation changes the ""Unequal"" operand? It should be successful. ', 'comment_created': datetime.datetime(2021, 8, 17, 15, 58, 42, tzinfo=datetime.timezone.utc), 'commenter': 'paulthomson', 'type': 'User'}, {'comment_id': 690538792, 'comment_body': 'Remove this call. Just use `inst_it`. If a function call needs an `Instruction*`, use `*inst_it`. ', 'comment_created': datetime.datetime(2021, 8, 17, 16, 35, 42, tzinfo=datetime.timezone.utc), 'commenter': 'paulthomson', 'type': 'User'}, {'comment_id': 690542739, 'comment_body': 'Change comment to: We need at least one suitable memory order.', 'comment_created': datetime.datetime(2021, 8, 17, 16, 40, 58, tzinfo=datetime.timezone.utc), 'commenter': 'paulthomson', 'type': 'User'}, {'comment_id': 690542879, 'comment_body': 'Use `.empty()`.', 'comment_created': datetime.datetime(2021, 8, 17, 16, 41, 7, tzinfo=datetime.timezone.utc), 'commenter': 'paulthomson', 'type': 'User'}, {'comment_id': 690544483, 'comment_body': 'Remove double space after ""//""', 'comment_created': datetime.datetime(2021, 8, 17, 16, 43, 4, tzinfo=datetime.timezone.utc), 'commenter': 'paulthomson', 'type': 'User'}, {'comment_id': 690546387, 'comment_body': 'Rename to GetNumberOfMemorySemanticsOperands', 'comment_created': datetime.datetime(2021, 8, 17, 16, 45, 19, tzinfo=datetime.timezone.utc), 'commenter': 'paulthomson', 'type': 'User'}, {'comment_id': 690546549, 'comment_body': 'End comments with "".""', 'comment_created': datetime.datetime(2021, 8, 17, 16, 45, 31, tzinfo=datetime.timezone.utc), 'commenter': 'paulthomson', 'type': 'User'}, {'comment_id': 690549745, 'comment_body': 'Change comment to: The old and new memory order values must both be expected values for the given opcode.', 'comment_created': datetime.datetime(2021, 8, 17, 16, 49, 30, tzinfo=datetime.timezone.utc), 'commenter': 'paulthomson', 'type': 'User'}, {'comment_id': 690553663, 'comment_body': 'A convention of this project is that the IsApplicable documentation comment describes the checks performed in IsApplicable. We violate the Google C++ style guide in this case.\r\n\r\nYou seem to have listed the protobuf fields, which does not follow the project convention. Please list the checks performed in IsApplicable (without too much detail). ', 'comment_created': datetime.datetime(2021, 8, 17, 16, 54, 36, tzinfo=datetime.timezone.utc), 'commenter': 'paulthomson', 'type': 'User'}, {'comment_id': 690554620, 'comment_body': 'Replace comment: Returns the number of memory semantic operands for |opcode|.', 'comment_created': datetime.datetime(2021, 8, 17, 16, 55, 54, tzinfo=datetime.timezone.utc), 'commenter': 'paulthomson', 'type': 'User'}, {'comment_id': 690557062, 'comment_body': 'Add a comment above: Filter a list of all possible memory orders using IsSuitableStrengthening.', 'comment_created': datetime.datetime(2021, 8, 17, 16, 59, 3, tzinfo=datetime.timezone.utc), 'commenter': 'paulthomson', 'type': 'User'}, {'comment_id': 690558432, 'comment_body': 'Replace comment: Erase the unsuitable memory order values.', 'comment_created': datetime.datetime(2021, 8, 17, 17, 0, 45, tzinfo=datetime.timezone.utc), 'commenter': 'paulthomson', 'type': 'User'}, {'comment_id': 690638216, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 8, 17, 18, 54, 34, tzinfo=datetime.timezone.utc), 'commenter': 'Mostafa-ashraf19', 'type': 'User'}, {'comment_id': 690639047, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 8, 17, 18, 55, 38, tzinfo=datetime.timezone.utc), 'commenter': 'Mostafa-ashraf19', 'type': 'User'}, {'comment_id': 690640769, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 8, 17, 18, 58, 3, tzinfo=datetime.timezone.utc), 'commenter': 'Mostafa-ashraf19', 'type': 'User'}, {'comment_id': 690641194, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 8, 17, 18, 58, 40, tzinfo=datetime.timezone.utc), 'commenter': 'Mostafa-ashraf19', 'type': 'User'}, {'comment_id': 690641695, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 8, 17, 18, 59, 22, tzinfo=datetime.timezone.utc), 'commenter': 'Mostafa-ashraf19', 'type': 'User'}, {'comment_id': 690642073, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 8, 17, 18, 59, 58, tzinfo=datetime.timezone.utc), 'commenter': 'Mostafa-ashraf19', 'type': 'User'}, {'comment_id': 690642668, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 8, 17, 19, 0, 46, tzinfo=datetime.timezone.utc), 'commenter': 'Mostafa-ashraf19', 'type': 'User'}, {'comment_id': 690642971, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 8, 17, 19, 1, 16, tzinfo=datetime.timezone.utc), 'commenter': 'Mostafa-ashraf19', 'type': 'User'}, {'comment_id': 690643904, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 8, 17, 19, 2, 32, tzinfo=datetime.timezone.utc), 'commenter': 'Mostafa-ashraf19', 'type': 'User'}, {'comment_id': 690646144, 'comment_body': 'The `*inst_it` gives `instruction` not a pointer to instruction. I have used this instead `&*inst_it`.', 'comment_created': datetime.datetime(2021, 8, 17, 19, 5, 57, tzinfo=datetime.timezone.utc), 'commenter': 'Mostafa-ashraf19', 'type': 'User'}, {'comment_id': 690658040, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 8, 17, 19, 24, 9, tzinfo=datetime.timezone.utc), 'commenter': 'Mostafa-ashraf19', 'type': 'User'}, {'comment_id': 690666276, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 8, 17, 19, 37, 27, tzinfo=datetime.timezone.utc), 'commenter': 'Mostafa-ashraf19', 'type': 'User'}, {'comment_id': 690721787, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 8, 17, 21, 4, 4, tzinfo=datetime.timezone.utc), 'commenter': 'Mostafa-ashraf19', 'type': 'User'}]","[{'commit_sha': '41cdb7b62bf2617932c129e169c96ed4b3865a8e', 'committer_username': 'Mostafa-ashraf19', 'committer_name': 'Mostafa Ashraf', 'committer_email': 'mostaphaashraf1996@gmail.com', 'commit_date': datetime.datetime(2019, 12, 2, 23, 2, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': '01644518196982e5b515802a95c263f0f5ab5cfe', 'committer_username': 'Mostafa-ashraf19', 'committer_name': 'Mostafa Ashraf', 'committer_email': 'mostaphaashraf1996@gmail.com', 'commit_date': datetime.datetime(2019, 12, 2, 23, 2, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': '920352472c22bdfcc08fdcddd20ca9cb7e1bc370', 'committer_username': 'Mostafa-ashraf19', 'committer_name': 'Mostafa Ashraf', 'committer_email': 'mostaphaashraf1996@gmail.com', 'commit_date': datetime.datetime(2019, 12, 2, 23, 2, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5b9f0dbb06a11beb6b7dbf683a7769e02f943275', 'committer_username': 'Mostafa-ashraf19', 'committer_name': 'Mostafa Ashraf', 'committer_email': 'mostaphaashraf1996@gmail.com', 'commit_date': datetime.datetime(2019, 12, 2, 23, 2, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1ec5ec89691cc173ca1685d644d357a3c9817e63', 'committer_username': 'Mostafa-ashraf19', 'committer_name': 'Mostafa Ashraf', 'committer_email': 'mostaphaashraf1996@gmail.com', 'commit_date': datetime.datetime(2019, 12, 2, 23, 2, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': '07e28dd6e267bb2d287b04c71e024eadde8f9ca1', 'committer_username': 'Mostafa-ashraf19', 'committer_name': 'Mostafa Ashraf', 'committer_email': 'mostaphaashraf1996@gmail.com', 'commit_date': datetime.datetime(2019, 12, 2, 23, 2, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4f69f8367f5d2367643e3aa25c63c9bde9cd6319', 'committer_username': 'Mostafa-ashraf19', 'committer_name': 'Mostafa Ashraf', 'committer_email': 'mostaphaashraf1996@gmail.com', 'commit_date': datetime.datetime(2019, 12, 2, 23, 2, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': '418da028512e695823e23c1cbe3a174aa0a12952', 'committer_username': 'Mostafa-ashraf19', 'committer_name': 'Mostafa Ashraf', 'committer_email': 'mostaphaashraf1996@gmail.com', 'commit_date': datetime.datetime(2019, 12, 2, 23, 2, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6f37f272e3af7436b137deb64592314e496e46fc', 'committer_username': 'Mostafa-ashraf19', 'committer_name': 'Mostafa Ashraf', 'committer_email': 'mostaphaashraf1996@gmail.com', 'commit_date': datetime.datetime(2019, 12, 2, 23, 2, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': '55bb07b6c730c369a0e2837146ebbdd3e8652ea1', 'committer_username': 'Mostafa-ashraf19', 'committer_name': 'Mostafa Ashraf', 'committer_email': 'mostaphaashraf1996@gmail.com', 'commit_date': datetime.datetime(2019, 12, 2, 23, 2, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cc15ed1a5638340f1aa067a28ab2b31b02861c1d', 'committer_username': 'Mostafa-ashraf19', 'committer_name': 'Mostafa Ashraf', 'committer_email': 'mostaphaashraf1996@gmail.com', 'commit_date': datetime.datetime(2019, 12, 2, 23, 2, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': '02c7976e802af7c1f2b62daa9b17dd160a47610a', 'committer_username': 'Mostafa-ashraf19', 'committer_name': 'Mostafa Ashraf', 'committer_email': 'mostaphaashraf1996@gmail.com', 'commit_date': datetime.datetime(2019, 12, 2, 23, 2, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': '66afbdda5f3c0569d668f51bf436ca196fa31a2e', 'committer_username': 'Mostafa-ashraf19', 'committer_name': 'Mostafa Ashraf', 'committer_email': 'mostaphaashraf1996@gmail.com', 'commit_date': datetime.datetime(2019, 12, 2, 23, 2, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': '18b377a5023ccecd80394baefea2df7a6a41e7f6', 'committer_username': 'Mostafa-ashraf19', 'committer_name': 'Mostafa Ashraf', 'committer_email': 'mostaphaashraf1996@gmail.com', 'commit_date': datetime.datetime(2019, 12, 2, 23, 2, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': '23872fdbe917ba01616ac67666787f39cb993f97', 'committer_username': 'Mostafa-ashraf19', 'committer_name': 'Mostafa Ashraf', 'committer_email': 'mostaphaashraf1996@gmail.com', 'commit_date': datetime.datetime(2019, 12, 2, 23, 2, 10, tzinfo=datetime.timezone.utc)}]",Mostafa Ashraf,58448694,mostaphaashraf1996@gmail.com,User,,43,,10,36
717219894, spirv-fuzz: Transformation and fuzzer pass for changing memory scope,This PR Fixes Issue #4451.,False,4483,https://api.github.com/repos/KhronosGroup/SPIRV-Tools/pulls/4483,https://github.com/KhronosGroup/SPIRV-Tools/pull/4483,closed,694,0,12,2,0,18,0,0,[],2021-08-21 23:02:27+00:00,2022-07-04 13:53:39+00:00,27355872.0,"316 days, 14:51:12","[{'comment_id': 694073192, 'comment_body': 'As discussed in our meeting, we should include barrier instructions. Perhaps rename `IsAtomicInstruction` to `HasMemorySemanticsOperand`. ', 'comment_created': datetime.datetime(2021, 8, 23, 15, 23, 11, tzinfo=datetime.timezone.utc), 'commenter': 'paulthomson', 'type': 'User'}, {'comment_id': 694073626, 'comment_body': 'GetSuitableNewMemoryScope -> GetSuitableNewMemoryScopes', 'comment_created': datetime.datetime(2021, 8, 23, 15, 23, 43, tzinfo=datetime.timezone.utc), 'commenter': 'paulthomson', 'type': 'User'}, {'comment_id': 694074091, 'comment_body': 'Use TransformationChangingMemoryScope::IsValidScope.', 'comment_created': datetime.datetime(2021, 8, 23, 15, 24, 16, tzinfo=datetime.timezone.utc), 'commenter': 'paulthomson', 'type': 'User'}, {'comment_id': 694075868, 'comment_body': 'Change to: Widens a memory scope operand within an instruction.', 'comment_created': datetime.datetime(2021, 8, 23, 15, 26, 24, tzinfo=datetime.timezone.utc), 'commenter': 'paulthomson', 'type': 'User'}, {'comment_id': 694078272, 'comment_body': 'See your other PR and follow the same approach. We do not need to check the opcode in IsApplicable.', 'comment_created': datetime.datetime(2021, 8, 23, 15, 29, 15, tzinfo=datetime.timezone.utc), 'commenter': 'paulthomson', 'type': 'User'}, {'comment_id': 694079288, 'comment_body': 'new_memory_scope_value >= old_memory_scope_value', 'comment_created': datetime.datetime(2021, 8, 23, 15, 30, 20, tzinfo=datetime.timezone.utc), 'commenter': 'paulthomson', 'type': 'User'}, {'comment_id': 694083834, 'comment_body': 'I think you need to update the def use manager and call `set_instr_block`, or just clear all analyzes. ', 'comment_created': datetime.datetime(2021, 8, 23, 15, 35, 40, tzinfo=datetime.timezone.utc), 'commenter': 'paulthomson', 'type': 'User'}, {'comment_id': 694084611, 'comment_body': 'If old_memory_scope_value is not one of the values below, we should return false.', 'comment_created': datetime.datetime(2021, 8, 23, 15, 36, 27, tzinfo=datetime.timezone.utc), 'commenter': 'paulthomson', 'type': 'User'}, {'comment_id': 694108616, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 8, 23, 16, 5, 38, tzinfo=datetime.timezone.utc), 'commenter': 'Mostafa-ashraf19', 'type': 'User'}, {'comment_id': 694108758, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 8, 23, 16, 5, 49, tzinfo=datetime.timezone.utc), 'commenter': 'Mostafa-ashraf19', 'type': 'User'}, {'comment_id': 694109012, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 8, 23, 16, 6, 6, tzinfo=datetime.timezone.utc), 'commenter': 'Mostafa-ashraf19', 'type': 'User'}, {'comment_id': 694109163, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 8, 23, 16, 6, 16, tzinfo=datetime.timezone.utc), 'commenter': 'Mostafa-ashraf19', 'type': 'User'}, {'comment_id': 694112825, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 8, 23, 16, 10, 51, tzinfo=datetime.timezone.utc), 'commenter': 'Mostafa-ashraf19', 'type': 'User'}, {'comment_id': 694122428, 'comment_body': 'Done. I believe here you meant `HasMemoryScopesOperand`.', 'comment_created': datetime.datetime(2021, 8, 23, 16, 23, 48, tzinfo=datetime.timezone.utc), 'commenter': 'Mostafa-ashraf19', 'type': 'User'}, {'comment_id': 694124200, 'comment_body': 'Yes, oops. I think `HasMemoryScopeOperand` would be good (remove ""s""). ', 'comment_created': datetime.datetime(2021, 8, 23, 16, 26, 5, tzinfo=datetime.timezone.utc), 'commenter': 'paulthomson', 'type': 'User'}, {'comment_id': 694127803, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 8, 23, 16, 30, 5, tzinfo=datetime.timezone.utc), 'commenter': 'Mostafa-ashraf19', 'type': 'User'}, {'comment_id': 694136454, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 8, 23, 16, 41, 59, tzinfo=datetime.timezone.utc), 'commenter': 'Mostafa-ashraf19', 'type': 'User'}, {'comment_id': 694162163, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 8, 23, 17, 16, 53, tzinfo=datetime.timezone.utc), 'commenter': 'Mostafa-ashraf19', 'type': 'User'}]","[{'commit_sha': '99e9f15ed3706dd28431a930777acda8bfddc8f2', 'committer_username': 'Mostafa-ashraf19', 'committer_name': 'Mostafa Ashraf', 'committer_email': 'mostaphaashraf1996@gmail.com', 'commit_date': datetime.datetime(2019, 12, 2, 23, 2, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': '646f8090772111870af68a81940946ba7ca19048', 'committer_username': 'Mostafa-ashraf19', 'committer_name': 'Mostafa Ashraf', 'committer_email': 'mostaphaashraf1996@gmail.com', 'commit_date': datetime.datetime(2019, 12, 2, 23, 2, 10, tzinfo=datetime.timezone.utc)}]",Mostafa Ashraf,58448694,mostaphaashraf1996@gmail.com,User,,43,,10,36
712713606,spirv-fuzz: Transformation and fuzzer pass for adding atomic RMW instruction,This PR Fixes #4419.,False,4470,https://api.github.com/repos/KhronosGroup/SPIRV-Tools/pulls/4470,https://github.com/KhronosGroup/SPIRV-Tools/pull/4470,closed,1369,0,14,4,1,26,0,0,[],2021-08-14 05:02:31+00:00,2022-07-04 13:53:39+00:00,28025468.0,"324 days, 8:51:08","[{'comment_id': 688940030, 'comment_body': ""I don't think this should be a final pass."", 'comment_created': datetime.datetime(2021, 8, 14, 15, 0, 15, tzinfo=datetime.timezone.utc), 'commenter': 'paulthomson', 'type': 'User'}, {'comment_id': 688940668, 'comment_body': ""I don't understand this."", 'comment_created': datetime.datetime(2021, 8, 14, 15, 6, 52, tzinfo=datetime.timezone.utc), 'commenter': 'paulthomson', 'type': 'User'}, {'comment_id': 688941429, 'comment_body': ""~~This has a similar issue to your changing memory semantics PR. Please update this PR similarly. We don't need to check the opcode in IsApplicable because it is part of the protobuf; we know what it is; it does not change depending on ir_context.~~\r\n\r\nI see that you do additional checks in this function, and these depend on the opcode. I think you should be checking `message_.opcode()` here, not `pointer->opcode()`. "", 'comment_created': datetime.datetime(2021, 8, 14, 15, 13, 35, tzinfo=datetime.timezone.utc), 'commenter': 'paulthomson', 'type': 'User'}, {'comment_id': 688941553, 'comment_body': ""I don't understand this function. Why do we need to check `insert_before`?"", 'comment_created': datetime.datetime(2021, 8, 14, 15, 14, 39, tzinfo=datetime.timezone.utc), 'commenter': 'paulthomson', 'type': 'User'}, {'comment_id': 688941754, 'comment_body': ""I don't think I understand the code below this point either. Are we checking `value_id` and `comparator_id` somewhere? Why are we checking `insert_before`? `insert_before` could be any instruction; it is not necessarily an atomic instruction. It is not the instruction we are creating. "", 'comment_created': datetime.datetime(2021, 8, 14, 15, 16, 17, tzinfo=datetime.timezone.utc), 'commenter': 'paulthomson', 'type': 'User'}, {'comment_id': 688942644, 'comment_body': 'I suggest that you add some extra instructions in here, perhaps by writing a new shader in GLSL. It would be good to see some other instructions, that are not atomic instructions nor OpVariable nor OpAccessChain. Instructions that perform computation would be good. E.g. OpFAdd, OpIAdd, OpINotEqual, etc. \r\n\r\nThen you can apply transformations that add atomic RMW instructions above the computation instructions (OpFAdd, OpIAdd, OpINotEqual). I think this might make things a bit clearer for you when writing your transformation class, as you seem to be treating `instruction_to_insert_before` as some kind of atomic instruction, when it could in fact be almost any instruction.', 'comment_created': datetime.datetime(2021, 8, 14, 15, 24, 49, tzinfo=datetime.timezone.utc), 'commenter': 'paulthomson', 'type': 'User'}, {'comment_id': 688954554, 'comment_body': 'This transformation is responsible for adding atomic(read-modify-write) instructions only, so if the instruction is `SpvOpAtomicLoad` or `SpvOpAtomicStore` this is not acceptable, because we already supported them into this PRs [#4330](https://github.com/KhronosGroup/SPIRV-Tools/pull/4330) and [#4440 ](https://github.com/KhronosGroup/SPIRV-Tools/pull/4440).\r\nWhat do you think @paulthomson?', 'comment_created': datetime.datetime(2021, 8, 14, 16, 16, 45, tzinfo=datetime.timezone.utc), 'commenter': 'Mostafa-ashraf19', 'type': 'User'}, {'comment_id': 688956333, 'comment_body': 'Oh I see. Please ignore this. ', 'comment_created': datetime.datetime(2021, 8, 14, 16, 19, 37, tzinfo=datetime.timezone.utc), 'commenter': 'paulthomson', 'type': 'User'}, {'comment_id': 688956670, 'comment_body': 'Oh I see. Please ignore this. ', 'comment_created': datetime.datetime(2021, 8, 14, 16, 20, 4, tzinfo=datetime.timezone.utc), 'commenter': 'paulthomson', 'type': 'User'}, {'comment_id': 688957060, 'comment_body': ""I don't think the opcode of the pointer matters, does it?"", 'comment_created': datetime.datetime(2021, 8, 14, 16, 20, 45, tzinfo=datetime.timezone.utc), 'commenter': 'paulthomson', 'type': 'User'}, {'comment_id': 688962538, 'comment_body': ""Yes, you are right.\r\nBut in this case, we can't use this transformation for adding `SpvOpAtomicLoad` or `SpvOpAtomicStore`."", 'comment_created': datetime.datetime(2021, 8, 14, 16, 29, 19, tzinfo=datetime.timezone.utc), 'commenter': 'Mostafa-ashraf19', 'type': 'User'}, {'comment_id': 688967583, 'comment_body': 'I edited the comment above.', 'comment_created': datetime.datetime(2021, 8, 14, 16, 44, 41, tzinfo=datetime.timezone.utc), 'commenter': 'paulthomson', 'type': 'User'}, {'comment_id': 688967658, 'comment_body': 'Perhaps you meant to check `message_.opcode()`?', 'comment_created': datetime.datetime(2021, 8, 14, 16, 45, 31, tzinfo=datetime.timezone.utc), 'commenter': 'paulthomson', 'type': 'User'}, {'comment_id': 688969672, 'comment_body': 'OK, I think I see what is happening now. I think this can be made a bit simpler. I can think of two ways. \r\n\r\n## Approach 1\r\n\r\nCheck each protobuf field in order:\r\n\r\n* memory_scope_id\r\n* memory_semantics_id_1\r\n* memory_semantics_id_2\r\n* value_id\r\n* comparator_id\r\n\r\nIn some cases (e.g. `memory_scope_id`), you can just always do the check. In other cases (e.g. `memory_semantics_id_2`), you can call a function like `IsMemorySemanticsId2Valid`. But modify `IsMemorySemanticsId2Valid` so that, at the start, it returns true if the opcode is one of the atomic opcodes that we support, but does NOT use the memory_semantics_id_2 field. E.g. if the opcode is `OpAtomicExchange`, this function will just immediately return true, and so the `memory_semantics_id_2` field will not actually be checked.\r\n\r\n## Approach 2\r\n\r\nAdd a switch statement here with all opcodes that we consider, with three categories:\r\n\r\n* Opcodes like `OpAtomicExchange` that use value_id but no comparator.\r\n* Opcodes like `OpAtomicCompareExchange` that use value_id and the comparator.\r\n* Opcodes like `OpAtomicIIncrement` that do not use value_id nor comparator.\r\n\r\nIn each case, call a function that does all the necessary checks for each category.', 'comment_created': datetime.datetime(2021, 8, 14, 17, 5, 2, tzinfo=datetime.timezone.utc), 'commenter': 'paulthomson', 'type': 'User'}, {'comment_id': 688977277, 'comment_body': 'Yes, you are right. Sorry for this mistake.', 'comment_created': datetime.datetime(2021, 8, 14, 18, 25, 3, tzinfo=datetime.timezone.utc), 'commenter': 'Mostafa-ashraf19', 'type': 'User'}, {'comment_id': 688977832, 'comment_body': 'Thanks, I will following the second approach probably.', 'comment_created': datetime.datetime(2021, 8, 14, 18, 30, 42, tzinfo=datetime.timezone.utc), 'commenter': 'Mostafa-ashraf19', 'type': 'User'}, {'comment_id': 688983568, 'comment_body': 'Changed.', 'comment_created': datetime.datetime(2021, 8, 14, 19, 32, 39, tzinfo=datetime.timezone.utc), 'commenter': 'Mostafa-ashraf19', 'type': 'User'}, {'comment_id': 688991858, 'comment_body': 'Done.\r\nCould you please tell me why should change it to `RepeatedPass`? @paulthomson ', 'comment_created': datetime.datetime(2021, 8, 14, 21, 5, 15, tzinfo=datetime.timezone.utc), 'commenter': 'Mostafa-ashraf19', 'type': 'User'}, {'comment_id': 688991873, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 8, 14, 21, 5, 27, tzinfo=datetime.timezone.utc), 'commenter': 'Mostafa-ashraf19', 'type': 'User'}, {'comment_id': 691325236, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 8, 18, 15, 1, 46, tzinfo=datetime.timezone.utc), 'commenter': 'Mostafa-ashraf19', 'type': 'User'}, {'comment_id': 691686624, 'comment_body': 'As I understood, fuzzer pass needs to unlock other passes to work appropriately also depends on other passes, but in our case, it does not depend on any transformation or passes, so I think it should be still `MaybeAddFinalPass`.\r\nWhat do you think @paulthomson?', 'comment_created': datetime.datetime(2021, 8, 19, 0, 13, 24, tzinfo=datetime.timezone.utc), 'commenter': 'Mostafa-ashraf19', 'type': 'User'}, {'comment_id': 694072148, 'comment_body': 'There is no exact science, but fuzzer passes should probably be repeated passes, by default. Your pass that changes memory semantics is a good example of a pass that should be a final pass; if we ran such a pass repeatedly, we are likely to end up changing most (if not all) memory orders to sequentially consistent. This may end up decreasing our coverage of other memory orders, such as acquire, release, etc. ', 'comment_created': datetime.datetime(2021, 8, 23, 15, 21, 58, tzinfo=datetime.timezone.utc), 'commenter': 'paulthomson', 'type': 'User'}, {'comment_id': 694078427, 'comment_body': 'Thanks for the clarification.', 'comment_created': datetime.datetime(2021, 8, 23, 15, 29, 24, tzinfo=datetime.timezone.utc), 'commenter': 'Mostafa-ashraf19', 'type': 'User'}, {'comment_id': 694098734, 'comment_body': ""However, I still don't think you need this. As with our other PRs, you can assert in the constructors that the opcode is one of the opcodes that we support. There is no need to have this in IsApplicable. "", 'comment_created': datetime.datetime(2021, 8, 23, 15, 53, 11, tzinfo=datetime.timezone.utc), 'commenter': 'paulthomson', 'type': 'User'}, {'comment_id': 694445531, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 8, 24, 2, 36, 15, tzinfo=datetime.timezone.utc), 'commenter': 'Mostafa-ashraf19', 'type': 'User'}, {'comment_id': 694490474, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 8, 24, 4, 51, 54, tzinfo=datetime.timezone.utc), 'commenter': 'Mostafa-ashraf19', 'type': 'User'}]","[{'commit_sha': '9084298d04f21ba9c7cebcbb2a4e2c144f19d1fe', 'committer_username': 'Mostafa-ashraf19', 'committer_name': 'Mostafa Ashraf', 'committer_email': 'mostaphaashraf1996@gmail.com', 'commit_date': datetime.datetime(2019, 12, 2, 23, 2, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': '50b998c2efe8555ff61ad77c6ed6f4cabf1f20f7', 'committer_username': 'Mostafa-ashraf19', 'committer_name': 'Mostafa Ashraf', 'committer_email': 'mostaphaashraf1996@gmail.com', 'commit_date': datetime.datetime(2019, 12, 2, 23, 2, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b0e6813931c81650e7b55890decb2dcfae163418', 'committer_username': 'Mostafa-ashraf19', 'committer_name': 'Mostafa Ashraf', 'committer_email': 'mostaphaashraf1996@gmail.com', 'commit_date': datetime.datetime(2019, 12, 2, 23, 2, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7e1f1106e4bdee005a19e2ceec28f737004cfb36', 'committer_username': 'Mostafa-ashraf19', 'committer_name': 'Mostafa Ashraf', 'committer_email': 'mostaphaashraf1996@gmail.com', 'commit_date': datetime.datetime(2019, 12, 2, 23, 2, 10, tzinfo=datetime.timezone.utc)}]",Mostafa Ashraf,58448694,mostaphaashraf1996@gmail.com,User,,43,,10,36
665537990,ShaderTrap: Examples of computing a histogram of values,This PR Fixes #63. Providing 6 examples of histogram compute shaders. ,True,68,https://api.github.com/repos/google/shadertrap/pulls/68,https://github.com/google/shadertrap/pull/68,closed,647,0,8,17,0,49,1,0,[{'name': 'cla: yes'}],2021-06-09 04:38:56+00:00,2021-06-19 08:32:55+00:00,878039.0,"10 days, 3:53:59","[{'comment_id': 648464686, 'comment_body': ""I would call this something like `data_values`, because it's not actually the histogram - it's the data we are doing to compute the histogram from.\r\n\r\nI also propose that you declare a duplicate buffer, called e.g. `original_data_values`. See below for why."", 'comment_created': datetime.datetime(2021, 6, 9, 16, 10, 11, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 648465457, 'comment_body': 'You could also assert that `data_values` is equal to `original_data_values`. This should obviously be true, so it might not seem worth doing. But it could be good because it guards against the possibility that a shader compiler is buggy and ends up somehow writing to the input buffer when it should not.', 'comment_created': datetime.datetime(2021, 6, 9, 16, 11, 9, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 648467417, 'comment_body': 'I *think* you could apply the `readonly` qualifier to this field. Can you try it? See https://www.khronos.org/opengl/wiki/Type_Qualifier_(GLSL)\r\n\r\nAnd you could probably apply `writeonly` to `res` below.', 'comment_created': datetime.datetime(2021, 6, 9, 16, 13, 41, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 648469845, 'comment_body': ""OpenGL has a few different memory layouts for buffers. These are specified via `shared`, `packed`, `std140` or `std430` after `layout(`.\r\n\r\nBy default I think `shared` is used, and with this qualifier the way data is laid out is implementation-defined.\r\n\r\nThus we should use either `std140` or `std430`.\r\n\r\nPlease have a read about these and decide which to use. They are similar, except that in `std140` when you have an array of scalars you end up with lots of padding - e.g. if you have an array of uints, each array element gets 16 bytes, with the first 4 bytes storing the uint, followed by 12 bytes of padding.\r\n\r\nIt's probably simplest for you to use `std430`."", 'comment_created': datetime.datetime(2021, 6, 9, 16, 16, 50, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 648471944, 'comment_body': 'This cannot be correct: if the histogram data is the same as in the previous example, then the computed histogram should be the same. There certainly are not 224 occurrences of 0 in the histogram data.', 'comment_created': datetime.datetime(2021, 6, 9, 16, 19, 34, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 648472625, 'comment_body': 'This is not correct - you want to check whether histo[j] == i, and if it does increment res[i]. That should give you the expected result.', 'comment_created': datetime.datetime(2021, 6, 9, 16, 20, 28, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 648582309, 'comment_body': ""I think I don't need to use `writeonly` in `res`, because I want to count so need to read an old value in a specific index and increment it, So if I have used `writeonly` with something like this: **res[data[i]]++** or **res[data[i]] += 1** it will give me error like this:  **++': can't read from writeonly object** or **Read from write-only variable `res'**, respectively. \r\nWhat do you think @afd?"", 'comment_created': datetime.datetime(2021, 6, 9, 18, 45, 13, tzinfo=datetime.timezone.utc), 'commenter': 'Mostafa-ashraf19', 'type': 'User'}, {'comment_id': 648590457, 'comment_body': ""Oops - you're absolutely correct :)"", 'comment_created': datetime.datetime(2021, 6, 9, 18, 53, 6, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 648930343, 'comment_body': 'I think I have solved the problem.', 'comment_created': datetime.datetime(2021, 6, 10, 7, 41, 2, tzinfo=datetime.timezone.utc), 'commenter': 'Mostafa-ashraf19', 'type': 'User'}, {'comment_id': 648930440, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 6, 10, 7, 41, 10, tzinfo=datetime.timezone.utc), 'commenter': 'Mostafa-ashraf19', 'type': 'User'}, {'comment_id': 648969081, 'comment_body': ""I didn't spot this in my first review, but `histo` is the wrong name here since it's the input data and not a histogram (a histogram is what gets computed). How about `input_data`? Please apply similar changes to the other examples."", 'comment_created': datetime.datetime(2021, 6, 10, 8, 31, 39, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 648972938, 'comment_body': '(1) Please remove this comment. There\'s no need to explain how a basic feature of GLSL, like accessing components of a uvec4, work in your code comments. You can assume that someone reading your code is familiar with the programming language. The purpose of comments is to point out particularly surprising aspects of your code and explain them, or to give a high level overview of what your code is doing.\r\n\r\n(2) This isn\'t swizzling - it\'s just component-lookup. Swizzing is where you form a vector from components of an existing vector. For instance, if v is a uvec4, then I could write: ""uvec4 u = v.xxyy"" to get a uvec4 whose x and y components are equal to the x component of v, and whose z and w components are equal to the y component of v. Doing ""v.x"" yields a scalar, so it\'s not an example of swizzling.', 'comment_created': datetime.datetime(2021, 6, 10, 8, 36, 12, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 648978218, 'comment_body': 'I think I got confused when creating the issue. I think it would be better to make this an array of 256 uints again. See below for why.', 'comment_created': datetime.datetime(2021, 6, 10, 8, 42, 29, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 648983636, 'comment_body': ""Here, create a uvec4, `values` containing the values i, i+1, i+2, i+3.\r\n\r\nThen you can do something like this:\r\n\r\n```\r\nfor (int j = 0; j < 256; j++) {\r\n  bvec4 match = equal(histo[j], values);\r\n  uvec4 increment = mix(....);\r\n  res[i/4] += increment;\r\n}\r\n```\r\n\r\nYou might have to change histo[j] to uvec4(histo[j]) - I can't remember whether a uint gets automatically converted to a vector of 4 uints with the scalar's value.\r\n\r\nFor the bit of code where I've written `mix`, the idea is to use the `mix` builtin to obtain a vector that will be 1 whenever `match` is true, and 0 whenever `match` is false - please look up the definition of `mix` in the GLSL specification - look at the version that takes a boolean vector as argument."", 'comment_created': datetime.datetime(2021, 6, 10, 8, 48, 50, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 648997636, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 6, 10, 9, 5, 44, tzinfo=datetime.timezone.utc), 'commenter': 'Mostafa-ashraf19', 'type': 'User'}, {'comment_id': 649005322, 'comment_body': 'Thanks for the clarification.', 'comment_created': datetime.datetime(2021, 6, 10, 9, 15, 27, tzinfo=datetime.timezone.utc), 'commenter': 'Mostafa-ashraf19', 'type': 'User'}, {'comment_id': 649354755, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 6, 10, 16, 42, 44, tzinfo=datetime.timezone.utc), 'commenter': 'Mostafa-ashraf19', 'type': 'User'}, {'comment_id': 649807125, 'comment_body': 'space before ""("". And what do you mean by ""using iterations"" here?', 'comment_created': datetime.datetime(2021, 6, 11, 8, 50, 17, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 649808037, 'comment_body': ""No change required, but just for info, uvec4(0, 0, 0, 0) can be written in shorthand as uvec4(0). Since we'll use this shader for fuzzing there's something quite nice about writing it the longer way, like you've done, though - it gives the fuzzer more places to play with."", 'comment_created': datetime.datetime(2021, 6, 11, 8, 51, 41, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 649808548, 'comment_body': 'Space before ""(""', 'comment_created': datetime.datetime(2021, 6, 11, 8, 52, 23, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 649808825, 'comment_body': 'What is `arrow_id`?', 'comment_created': datetime.datetime(2021, 6, 11, 8, 52, 46, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 649813500, 'comment_body': ""The if is not needed: it's duplicating what you do when you compute `match` below. If you remove the `if` then when `input_data[j]` doesn't match any of the conditions in the `if`, `match` will end up being `(false, false, false, false)`, and so increment will be `(0, 0, 0, 0)`, and so we will harmlessly update `res[...]` by adding 0 to it."", 'comment_created': datetime.datetime(2021, 6, 11, 8, 59, 39, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 649813873, 'comment_body': 'Since `invocation_id_offset / 4` is the same as `gl_LocalInvocationID.x`, it would be better to use `gl_LocalInvocationID.x` here.', 'comment_created': datetime.datetime(2021, 6, 11, 9, 0, 8, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 649814846, 'comment_body': 'Space before ""("".\r\n\r\n""to counting"" -> ""to count""', 'comment_created': datetime.datetime(2021, 6, 11, 9, 1, 36, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 649816493, 'comment_body': '`counting` -> `count`', 'comment_created': datetime.datetime(2021, 6, 11, 9, 4, 8, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 649888137, 'comment_body': 'iterations mean here not support parallel counting yet(using threads).', 'comment_created': datetime.datetime(2021, 6, 11, 10, 59, 39, tzinfo=datetime.timezone.utc), 'commenter': 'Mostafa-ashraf19', 'type': 'User'}, {'comment_id': 649888848, 'comment_body': 'Thanks for the clarification.', 'comment_created': datetime.datetime(2021, 6, 11, 11, 0, 56, tzinfo=datetime.timezone.utc), 'commenter': 'Mostafa-ashraf19', 'type': 'User'}, {'comment_id': 649890968, 'comment_body': 'removed ( it was in old commits).', 'comment_created': datetime.datetime(2021, 6, 11, 11, 5, 14, tzinfo=datetime.timezone.utc), 'commenter': 'Mostafa-ashraf19', 'type': 'User'}, {'comment_id': 649902654, 'comment_body': 'Thanks for the clarification.', 'comment_created': datetime.datetime(2021, 6, 11, 11, 27, 3, tzinfo=datetime.timezone.utc), 'commenter': 'Mostafa-ashraf19', 'type': 'User'}, {'comment_id': 652205906, 'comment_body': ""The issue had asked for this to be based on version 1, where we sweep through the input array once, incrementing res at each relevant index. The difference is that we should divide the input array up into 16 chunks and process them in parallel.\r\n\r\nExample 1 had this form:\r\n\r\n```\r\n  for (int i = 0; i <; 256; i++) {\r\n      res[input_data[i]]++;\r\n  }\r\n```\r\n\r\nWhat I'd like here is:\r\n\r\n```\r\nfor (i = chunkStart; i < chunkStart + 16; i++) {\r\n   atomicAdd(res[input_data[i]], 1);\r\n}\r\n```\r\n\r\nwhere each thread processes a different chunk of 16 elements."", 'comment_created': datetime.datetime(2021, 6, 15, 22, 54, 5, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 652206117, 'comment_body': 'Nit: ""range from 0:3"" -> ""ranges from 0 to 3""', 'comment_created': datetime.datetime(2021, 6, 15, 22, 54, 38, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 652206368, 'comment_body': '-> ""This version uses vector instructions to perform counting in parallel""', 'comment_created': datetime.datetime(2021, 6, 15, 22, 55, 15, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 652207583, 'comment_body': '-> something like: ""In this example, we divide the input data into work group-sized chunks. Each work group computes a mini histogram for a chunk of input data, and then combines the mini histogram with the overall result.""\r\n\r\n(But please split this up into multiple lines as with your current comments, so that it\'s not one massive line :))', 'comment_created': datetime.datetime(2021, 6, 15, 22, 58, 18, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 652207685, 'comment_body': '-> ranges from 0 to 15', 'comment_created': datetime.datetime(2021, 6, 15, 22, 58, 34, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 652207873, 'comment_body': '-> Initialize a mini histogram in shared memory.', 'comment_created': datetime.datetime(2021, 6, 15, 22, 59, 4, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 652208241, 'comment_body': ""I find this comment hard to understand - can you work on rephrasing it? I don't find the moving arrow text intuitive. Perhaps you could just say that each thread takes care of incrementing the mini-histogram for a particular input data element."", 'comment_created': datetime.datetime(2021, 6, 15, 23, 0, 3, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 652215209, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 6, 15, 23, 13, 12, tzinfo=datetime.timezone.utc), 'commenter': 'Mostafa-ashraf19', 'type': 'User'}, {'comment_id': 652215276, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 6, 15, 23, 13, 15, tzinfo=datetime.timezone.utc), 'commenter': 'Mostafa-ashraf19', 'type': 'User'}, {'comment_id': 652215845, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 6, 15, 23, 13, 53, tzinfo=datetime.timezone.utc), 'commenter': 'Mostafa-ashraf19', 'type': 'User'}, {'comment_id': 652215940, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 6, 15, 23, 14, tzinfo=datetime.timezone.utc), 'commenter': 'Mostafa-ashraf19', 'type': 'User'}, {'comment_id': 652216027, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 6, 15, 23, 14, 5, tzinfo=datetime.timezone.utc), 'commenter': 'Mostafa-ashraf19', 'type': 'User'}, {'comment_id': 652228858, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 6, 15, 23, 28, 7, tzinfo=datetime.timezone.utc), 'commenter': 'Mostafa-ashraf19', 'type': 'User'}, {'comment_id': 652228957, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 6, 15, 23, 28, 12, tzinfo=datetime.timezone.utc), 'commenter': 'Mostafa-ashraf19', 'type': 'User'}, {'comment_id': 652628758, 'comment_body': '-> ""Divide input_data into chunks, each managed by a single thread""', 'comment_created': datetime.datetime(2021, 6, 16, 12, 13, 40, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 652641743, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 6, 16, 12, 31, 31, tzinfo=datetime.timezone.utc), 'commenter': 'Mostafa-ashraf19', 'type': 'User'}, {'comment_id': 652655964, 'comment_body': ""Can you add your name to the list below, before Shiyu's (so that we use alphabetical order of surname)?"", 'comment_created': datetime.datetime(2021, 6, 16, 12, 49, 59, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 652666937, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 6, 16, 13, 3, 19, tzinfo=datetime.timezone.utc), 'commenter': 'Mostafa-ashraf19', 'type': 'User'}, {'comment_id': 652733376, 'comment_body': 'I meant:\r\n\r\n```\r\nIndependent contributors via Google Summer of Code\r\n  Mostafa Ashraf\r\n  Shiyu Liu\r\n```', 'comment_created': datetime.datetime(2021, 6, 16, 14, 15, 14, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 652774109, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 6, 16, 14, 56, 54, tzinfo=datetime.timezone.utc), 'commenter': 'Mostafa-ashraf19', 'type': 'User'}]","[{'commit_sha': '44cb54127ffe9dca62f6fd8bf86f40ef5033ecda', 'committer_username': 'Mostafa-ashraf19', 'committer_name': 'Mostafa Ashraf', 'committer_email': 'mostaphaashraf1996@gmail.com', 'commit_date': datetime.datetime(2019, 12, 2, 23, 2, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd9d289c3fc0c04d1a7a2084e66e1e5370b7e9f46', 'committer_username': 'Mostafa-ashraf19', 'committer_name': 'Mostafa Ashraf', 'committer_email': 'mostaphaashraf1996@gmail.com', 'commit_date': datetime.datetime(2019, 12, 2, 23, 2, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c66d3cc7685421db7f4ab17869ace92fec4af6c1', 'committer_username': 'Mostafa-ashraf19', 'committer_name': 'Mostafa Ashraf', 'committer_email': 'mostaphaashraf1996@gmail.com', 'commit_date': datetime.datetime(2019, 12, 2, 23, 2, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b90e0c1d0d078c4fa8ccd22efc9c307bb465e3b6', 'committer_username': 'Mostafa-ashraf19', 'committer_name': 'Mostafa Ashraf', 'committer_email': 'mostaphaashraf1996@gmail.com', 'commit_date': datetime.datetime(2019, 12, 2, 23, 2, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': '05e62ad44972732ee58f3afd773c1330111dbb6b', 'committer_username': 'Mostafa-ashraf19', 'committer_name': 'Mostafa Ashraf', 'committer_email': 'mostaphaashraf1996@gmail.com', 'commit_date': datetime.datetime(2019, 12, 2, 23, 2, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': '19bf5418d40a5cab54345f3df805cffda3313fc9', 'committer_username': 'Mostafa-ashraf19', 'committer_name': 'Mostafa Ashraf', 'committer_email': 'mostaphaashraf1996@gmail.com', 'commit_date': datetime.datetime(2019, 12, 2, 23, 2, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': '87cc13845db9812019fc1575b777d0ae1546ad75', 'committer_username': 'Mostafa-ashraf19', 'committer_name': 'Mostafa Ashraf', 'committer_email': 'mostaphaashraf1996@gmail.com', 'commit_date': datetime.datetime(2019, 12, 2, 23, 2, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': '84b306e0e0ff8d0d87edfd3b4cd9439d67f9e5b3', 'committer_username': 'Mostafa-ashraf19', 'committer_name': 'Mostafa Ashraf', 'committer_email': 'mostaphaashraf1996@gmail.com', 'commit_date': datetime.datetime(2019, 12, 2, 23, 2, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9709482ea177016a7273ac6dfa1a2edb3e60526c', 'committer_username': 'Mostafa-ashraf19', 'committer_name': 'Mostafa Ashraf', 'committer_email': 'mostaphaashraf1996@gmail.com', 'commit_date': datetime.datetime(2019, 12, 2, 23, 2, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0c60ca264600de03d4ad9b278b13a6da1f0409c7', 'committer_username': 'Mostafa-ashraf19', 'committer_name': 'Mostafa Ashraf', 'committer_email': 'mostaphaashraf1996@gmail.com', 'commit_date': datetime.datetime(2019, 12, 2, 23, 2, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ee96a1e4ee5f7d124ef517d7fbd3f8d059085b04', 'committer_username': 'Mostafa-ashraf19', 'committer_name': 'Mostafa Ashraf', 'committer_email': 'mostaphaashraf1996@gmail.com', 'commit_date': datetime.datetime(2019, 12, 2, 23, 2, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4f07858bd7fbb6b555d24233b0af9cdd620f7309', 'committer_username': 'Mostafa-ashraf19', 'committer_name': 'Mostafa Ashraf', 'committer_email': 'mostaphaashraf1996@gmail.com', 'commit_date': datetime.datetime(2019, 12, 2, 23, 2, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f57992cefa309ab16c3750ab7118f541255d7791', 'committer_username': 'Mostafa-ashraf19', 'committer_name': 'Mostafa Ashraf', 'committer_email': 'mostaphaashraf1996@gmail.com', 'commit_date': datetime.datetime(2019, 12, 2, 23, 2, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b4ff74886785b3baa504be4fa7561829faac2629', 'committer_username': 'Mostafa-ashraf19', 'committer_name': 'Mostafa Ashraf', 'committer_email': 'mostaphaashraf1996@gmail.com', 'commit_date': datetime.datetime(2019, 12, 2, 23, 2, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': '286e053dfc30d303ff440ee2597b6e8378f2b815', 'committer_username': 'Mostafa-ashraf19', 'committer_name': 'Mostafa Ashraf', 'committer_email': 'mostaphaashraf1996@gmail.com', 'commit_date': datetime.datetime(2019, 12, 2, 23, 2, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e8fa010c397f3338bf2e9649fa27e62b8e9e7c36', 'committer_username': 'Mostafa-ashraf19', 'committer_name': 'Mostafa Ashraf', 'committer_email': 'mostaphaashraf1996@gmail.com', 'commit_date': datetime.datetime(2019, 12, 2, 23, 2, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f49d321b87c128fc5ff5602c86e9a49bbc721b6e', 'committer_username': 'Mostafa-ashraf19', 'committer_name': 'Mostafa Ashraf', 'committer_email': 'mostaphaashraf1996@gmail.com', 'commit_date': datetime.datetime(2019, 12, 2, 23, 2, 10, tzinfo=datetime.timezone.utc)}]",Mostafa Ashraf,58448694,mostaphaashraf1996@gmail.com,User,,43,,10,36

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
45981801,SPIRV-Tools,KhronosGroup/SPIRV-Tools,C++,545,1038,85,243,4010,399,23,21,"[{'id': 720913548, 'number': 4494, 'closed': datetime.datetime(2022, 7, 4, 13, 53, 40, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 26, 23, 38, 35, tzinfo=datetime.timezone.utc), 'time_taken': 26921705.0, 'time_delta': '311 days, 14:15:05', 'additions': 557, 'deletions': 0, 'state': 'closed'}, {'id': 717219894, 'number': 4483, 'closed': datetime.datetime(2022, 7, 4, 13, 53, 39, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 21, 23, 2, 27, tzinfo=datetime.timezone.utc), 'time_taken': 27355872.0, 'time_delta': '316 days, 14:51:12', 'additions': 694, 'deletions': 0, 'state': 'closed'}, {'id': 712713606, 'number': 4470, 'closed': datetime.datetime(2022, 7, 4, 13, 53, 39, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 14, 5, 2, 31, tzinfo=datetime.timezone.utc), 'time_taken': 28025468.0, 'time_delta': '324 days, 8:51:08', 'additions': 1369, 'deletions': 0, 'state': 'closed'}, {'id': 705914297, 'number': 4455, 'closed': datetime.datetime(2022, 7, 4, 13, 53, 38, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 7, 16, 27, 36, tzinfo=datetime.timezone.utc), 'time_taken': 28589162.0, 'time_delta': '330 days, 21:26:02', 'additions': 1485, 'deletions': 0, 'state': 'closed'}, {'id': 701498455, 'number': 4440, 'closed': datetime.datetime(2021, 8, 5, 13, 8, 45, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 2, 14, 5, 29, tzinfo=datetime.timezone.utc), 'time_taken': 255796.0, 'time_delta': '2 days, 23:03:16', 'additions': 498, 'deletions': 121, 'state': 'closed'}, {'id': 678220900, 'number': 4349, 'closed': datetime.datetime(2021, 7, 15, 18, 3, 52, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 25, 22, 55, 44, tzinfo=datetime.timezone.utc), 'time_taken': 1710488.0, 'time_delta': '19 days, 19:08:08', 'additions': 202, 'deletions': 22, 'state': 'closed'}, {'id': 678081147, 'number': 4348, 'closed': datetime.datetime(2021, 7, 20, 9, 3, 59, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 25, 17, 43, 14, tzinfo=datetime.timezone.utc), 'time_taken': 2128845.0, 'time_delta': '24 days, 15:20:45', 'additions': 237, 'deletions': 6, 'state': 'closed'}, {'id': 674896096, 'number': 4336, 'closed': datetime.datetime(2021, 7, 22, 17, 16, 13, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 21, 21, 25, 3, tzinfo=datetime.timezone.utc), 'time_taken': 2663470.0, 'time_delta': '30 days, 19:51:10', 'additions': 28, 'deletions': 7, 'state': 'closed'}, {'id': 673186670, 'number': 4330, 'closed': datetime.datetime(2021, 8, 3, 20, 51, 26, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 18, 5, 52, 6, tzinfo=datetime.timezone.utc), 'time_taken': 4028360.0, 'time_delta': '46 days, 14:59:20', 'additions': 582, 'deletions': 70, 'state': 'closed'}, {'id': 660329767, 'number': 4312, 'closed': datetime.datetime(2021, 6, 9, 18, 56, 56, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 2, 19, 16, 45, tzinfo=datetime.timezone.utc), 'time_taken': 603611.0, 'time_delta': '6 days, 23:40:11', 'additions': 131, 'deletions': 43, 'state': 'closed'}, {'id': 654366497, 'number': 4306, 'closed': datetime.datetime(2021, 6, 2, 16, 16, 44, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 5, 27, 0, 48, 57, tzinfo=datetime.timezone.utc), 'time_taken': 574067.0, 'time_delta': '6 days, 15:27:47', 'additions': 93, 'deletions': 0, 'state': 'closed'}, {'id': 651551685, 'number': 4295, 'closed': datetime.datetime(2021, 5, 25, 23, 41, 32, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 5, 24, 18, 52, 58, tzinfo=datetime.timezone.utc), 'time_taken': 103714.0, 'time_delta': '1 day, 4:48:34', 'additions': 32, 'deletions': 6, 'state': 'closed'}, {'id': 650786162, 'number': 4289, 'closed': datetime.datetime(2021, 5, 24, 13, 24, 12, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 5, 23, 13, 4, 26, tzinfo=datetime.timezone.utc), 'time_taken': 87586.0, 'time_delta': '1 day, 0:19:46', 'additions': 5, 'deletions': 0, 'state': 'closed'}, {'id': 628512574, 'number': 4262, 'closed': datetime.datetime(2021, 5, 24, 15, 35, 35, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 5, 1, 23, 52, 57, tzinfo=datetime.timezone.utc), 'time_taken': 1957358.0, 'time_delta': '22 days, 15:42:38', 'additions': 0, 'deletions': 0, 'state': 'closed'}, {'id': 628478329, 'number': 4261, 'closed': datetime.datetime(2021, 5, 1, 21, 50, 27, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 5, 1, 18, 57, 56, tzinfo=datetime.timezone.utc), 'time_taken': 10351.0, 'time_delta': '2:52:31', 'additions': 589, 'deletions': 2, 'state': 'closed'}, {'id': 623282201, 'number': 4249, 'closed': datetime.datetime(2021, 4, 28, 23, 43, 30, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 4, 26, 12, 20, 41, tzinfo=datetime.timezone.utc), 'time_taken': 213769.0, 'time_delta': '2 days, 11:22:49', 'additions': 3, 'deletions': 3, 'state': 'closed'}, {'id': 622873745, 'number': 4248, 'closed': datetime.datetime(2021, 4, 26, 15, 53, 56, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 4, 26, 0, 31, 30, tzinfo=datetime.timezone.utc), 'time_taken': 55346.0, 'time_delta': '15:22:26', 'additions': 562, 'deletions': 2, 'state': 'closed'}, {'id': 616278034, 'number': 4240, 'closed': datetime.datetime(2021, 4, 26, 12, 21, 28, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 4, 15, 18, 36, 34, tzinfo=datetime.timezone.utc), 'time_taken': 927894.0, 'time_delta': '10 days, 17:44:54', 'additions': 418, 'deletions': 6, 'state': 'closed'}, {'id': 599497999, 'number': 4213, 'closed': datetime.datetime(2021, 4, 26, 16, 4, 37, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 3, 24, 8, 46, 16, tzinfo=datetime.timezone.utc), 'time_taken': 2877501.0, 'time_delta': '33 days, 7:18:21', 'additions': 563, 'deletions': 3, 'state': 'closed'}]"
331634916,shadertrap,google/shadertrap,C++,12,11,4,7,55,10,4,4,"[{'id': 665537990, 'number': 68, 'closed': datetime.datetime(2021, 6, 19, 8, 32, 55, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 9, 4, 38, 56, tzinfo=datetime.timezone.utc), 'time_taken': 878039.0, 'time_delta': '10 days, 3:53:59', 'additions': 647, 'deletions': 0, 'state': 'closed'}]"
