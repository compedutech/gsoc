pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
1447178785,[GSoC23] Support of mixed model in stereo calibration and multi-view calibration,"### Pull Request Readiness Checklist

See details at https://github.com/opencv/opencv/wiki/How_to_contribute#making-a-good-pull-request

- [x] I agree to contribute to the project under Apache 2 License.
- [x] To the best of my knowledge, the proposed patch is not based on a code under GPL or another license that is incompatible with OpenCV
- [x] The PR is proposed to the proper branch
- [x] There is a reference to the original bug report and related work
- [x] There is accuracy test, performance test and test data in opencv_extra repository, if applicable
      Patch to opencv_extra has the same branch name.
- [x] The feature is well documented and sample code can be built with the project CMake

---
### Summary

This is the major pull request for the project ""Multi-camera calibration part 2"" in GSoC 2023. [This](https://drive.google.com/file/d/1FESZG-ekE5LbTHCzPTaskWWCT9OYLbxb/view?usp=drive_link) links to the final report of the project. For details of how the project was extended can be found there.

The major contribution is to add the support for a mixed model of pinhole and fisheye camera models, and the support of calibrating cameras without constraints of overlapping field of view and complete.

The documentation is also improved with debugging advice on multi-camera calibration added. [This link](https://drive.google.com/file/d/1jjzHy_qFlrdj_fNIPDKPWb8JPuC9ZczU/view?usp=sharing) and [this](https://drive.google.com/file/d/1Q3YRZFRFP12C2prVdwxzGsSPOQo2pii0/view?usp=drive_link) correspond to the documentation for the implemented registerCameras. [This](https://drive.google.com/file/d/1Qxs6Yxb-WewvbmnaBXe2ip6yXCdL8zMy/view?usp=sharing) links to the documentation of the multiview calibration funtion. As for the tutorial, it can be found [here]( https://drive.google.com/file/d/1WSA6Ai_Q_iQNjQijZ9ZRwLRfPVFqJzCu/view?usp=sharing).

Besides, some self captured data can be found in the opencv_extra (currently in pull request [1089](https://github.com/opencv/opencv_extra/pull/1089)).
",False,24052,https://api.github.com/repos/opencv/opencv/pulls/24052,https://github.com/opencv/opencv/pull/24052,open,709,319,14,49,1,26,3,0,"[{'name': 'category: calib3d'}, {'name': 'GSoC'}, {'name': 'pr: needs test'}]",2023-07-24 18:30:40+00:00,,0.0,,"[{'comment_id': 1281486205, 'comment_body': 'Use CV_Assert here.', 'comment_created': datetime.datetime(2023, 8, 2, 7, 8, 13, tzinfo=datetime.timezone.utc), 'commenter': 'asmorkalov', 'type': 'User'}, {'comment_id': 1281486786, 'comment_body': 'CV_Assert', 'comment_created': datetime.datetime(2023, 8, 2, 7, 8, 51, tzinfo=datetime.timezone.utc), 'commenter': 'asmorkalov', 'type': 'User'}, {'comment_id': 1281508858, 'comment_body': 'Stereo is bad choice for the function name:\r\n- You cannot get real stereo if cameras have different type.\r\n- The function just registers two cameras, but does not run intrinsics tuning.\r\n\r\nI propose to name it `registerCameras`.', 'comment_created': datetime.datetime(2023, 8, 2, 7, 30, 36, tzinfo=datetime.timezone.utc), 'commenter': 'asmorkalov', 'type': 'User'}, {'comment_id': 1281510494, 'comment_body': '@ivashmak @lpanaf I propose to add fisheye overload for solvePnP to namespace `fisheye`.', 'comment_created': datetime.datetime(2023, 8, 2, 7, 32, 13, tzinfo=datetime.timezone.utc), 'commenter': 'asmorkalov', 'type': 'User'}, {'comment_id': 1283183381, 'comment_body': ""It makes sense to rename the parameter to cameraModel and use int/enum. It's more future proof."", 'comment_created': datetime.datetime(2023, 8, 3, 13, 11, 7, tzinfo=datetime.timezone.utc), 'commenter': 'asmorkalov', 'type': 'User'}, {'comment_id': 1283249044, 'comment_body': 'Do you want to make a separate function within `fisheye` namespace that takes as input distorted points from fisheye camera, internally undistorts them and runs the PnP solver?', 'comment_created': datetime.datetime(2023, 8, 3, 13, 58, 44, tzinfo=datetime.timezone.utc), 'commenter': 'ivashmak', 'type': 'User'}, {'comment_id': 1283604106, 'comment_body': ""In general - yes. We have solvePnP that expects pinhole model. Let's introduce fisheye::solvePnP that expects fisheye camera model internally. The first implementation may be done with just undistort->solvePnP, if it produces reasonable result."", 'comment_created': datetime.datetime(2023, 8, 3, 19, 1, 12, tzinfo=datetime.timezone.utc), 'commenter': 'asmorkalov', 'type': 'User'}, {'comment_id': 1286271436, 'comment_body': 'Yes, that makes sense. It looks like just a combination of two functions. @lpanaf will you do it since it is your pull request, or I can try to push here too?', 'comment_created': datetime.datetime(2023, 8, 7, 18, 47, 32, tzinfo=datetime.timezone.utc), 'commenter': 'ivashmak', 'type': 'User'}, {'comment_id': 1287270709, 'comment_body': 'I can add it, no problem :)', 'comment_created': datetime.datetime(2023, 8, 8, 15, 12, 23, tzinfo=datetime.timezone.utc), 'commenter': 'lpanaf', 'type': 'User'}, {'comment_id': 1287392751, 'comment_body': 'This is reflected in the new code', 'comment_created': datetime.datetime(2023, 8, 8, 16, 38, 51, tzinfo=datetime.timezone.utc), 'commenter': 'lpanaf', 'type': 'User'}, {'comment_id': 1488036141, 'comment_body': 'Need to split the test on 3 cases:\r\n- Pinhole only\r\n- Fisheye only\r\n- Mixed.', 'comment_created': datetime.datetime(2024, 2, 13, 15, 7, 12, tzinfo=datetime.timezone.utc), 'commenter': 'asmorkalov', 'type': 'User'}, {'comment_id': 1488039057, 'comment_body': ':+1: ', 'comment_created': datetime.datetime(2024, 2, 13, 15, 8, 49, tzinfo=datetime.timezone.utc), 'commenter': 'asmorkalov', 'type': 'User'}, {'comment_id': 1488044139, 'comment_body': 'Not needed for Charuco.', 'comment_created': datetime.datetime(2024, 2, 13, 15, 11, 41, tzinfo=datetime.timezone.utc), 'commenter': 'asmorkalov', 'type': 'User'}, {'comment_id': 1489111910, 'comment_body': 'typo', 'comment_created': datetime.datetime(2024, 2, 14, 8, 46, 16, tzinfo=datetime.timezone.utc), 'commenter': 'asmorkalov', 'type': 'User'}, {'comment_id': 1489249564, 'comment_body': ':+1: ', 'comment_created': datetime.datetime(2024, 2, 14, 10, 31, 16, tzinfo=datetime.timezone.utc), 'commenter': 'asmorkalov', 'type': 'User'}, {'comment_id': 1489250845, 'comment_body': ':+1: ', 'comment_created': datetime.datetime(2024, 2, 14, 10, 32, 17, tzinfo=datetime.timezone.utc), 'commenter': 'asmorkalov', 'type': 'User'}, {'comment_id': 1489266889, 'comment_body': 'Why?', 'comment_created': datetime.datetime(2024, 2, 14, 10, 44, 25, tzinfo=datetime.timezone.utc), 'commenter': 'asmorkalov', 'type': 'User'}, {'comment_id': 1497186255, 'comment_body': 'Looks like redundant.  `A[k]` is always initialized with the following copyTo.', 'comment_created': datetime.datetime(2024, 2, 21, 9, 37, 44, tzinfo=datetime.timezone.utc), 'commenter': 'asmorkalov', 'type': 'User'}, {'comment_id': 1497188373, 'comment_body': 'Need assert in else branch.', 'comment_created': datetime.datetime(2024, 2, 21, 9, 38, 36, tzinfo=datetime.timezone.utc), 'commenter': 'asmorkalov', 'type': 'User'}, {'comment_id': 1497190111, 'comment_body': 'Add assert on size here.', 'comment_created': datetime.datetime(2024, 2, 21, 9, 39, 46, tzinfo=datetime.timezone.utc), 'commenter': 'asmorkalov', 'type': 'User'}, {'comment_id': 1497195141, 'comment_body': 'Sounds strange.', 'comment_created': datetime.datetime(2024, 2, 21, 9, 43, 20, tzinfo=datetime.timezone.utc), 'commenter': 'asmorkalov', 'type': 'User'}, {'comment_id': 1497195364, 'comment_body': 'sounds strange.', 'comment_created': datetime.datetime(2024, 2, 21, 9, 43, 29, tzinfo=datetime.timezone.utc), 'commenter': 'asmorkalov', 'type': 'User'}, {'comment_id': 1497201405, 'comment_body': 'formatting.', 'comment_created': datetime.datetime(2024, 2, 21, 9, 47, 22, tzinfo=datetime.timezone.utc), 'commenter': 'asmorkalov', 'type': 'User'}, {'comment_id': 1497205955, 'comment_body': ""It's not stereo pair frankly speaking."", 'comment_created': datetime.datetime(2024, 2, 21, 9, 50, 32, tzinfo=datetime.timezone.utc), 'commenter': 'asmorkalov', 'type': 'User'}, {'comment_id': 1497212026, 'comment_body': 'TermCriteria differs from other overloads.', 'comment_created': datetime.datetime(2024, 2, 21, 9, 54, 46, tzinfo=datetime.timezone.utc), 'commenter': 'asmorkalov', 'type': 'User'}, {'comment_id': 1497215964, 'comment_body': 'The 3rd overload looks redundant. Need to check use-cases.', 'comment_created': datetime.datetime(2024, 2, 21, 9, 56, 52, tzinfo=datetime.timezone.utc), 'commenter': 'asmorkalov', 'type': 'User'}]","[{'commit_sha': '0659d8043b329aac13ed711c22ee802cf4265244', 'committer_username': 'lpanaf', 'committer_name': 'Linfei Pan', 'committer_email': None, 'commit_date': datetime.datetime(2018, 2, 11, 2, 22, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ea07783f587036831860e34ed878c269dacd9288', 'committer_username': 'lpanaf', 'committer_name': 'Linfei Pan', 'committer_email': None, 'commit_date': datetime.datetime(2018, 2, 11, 2, 22, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7ae8e0e3c99c145176cc638cb8c62d82ef2c9e88', 'committer_username': 'lpanaf', 'committer_name': 'Linfei Pan', 'committer_email': None, 'commit_date': datetime.datetime(2018, 2, 11, 2, 22, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2920f9bdcd34c5f0d5fbadb3904d1abfb5ed67c8', 'committer_username': 'lpanaf', 'committer_name': 'Linfei Pan', 'committer_email': None, 'commit_date': datetime.datetime(2018, 2, 11, 2, 22, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '83cd4890f35c7067a6edcaf4825aac7999f878f5', 'committer_username': 'lpanaf', 'committer_name': 'Linfei Pan', 'committer_email': None, 'commit_date': datetime.datetime(2018, 2, 11, 2, 22, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5b50e9c2a678957339ea95f77922e64c4b211ac0', 'committer_username': 'lpanaf', 'committer_name': 'Linfei Pan', 'committer_email': None, 'commit_date': datetime.datetime(2018, 2, 11, 2, 22, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8bb8d731811e51c2ed1964bfa07b340a499b2e40', 'committer_username': 'lpanaf', 'committer_name': 'Linfei Pan', 'committer_email': None, 'commit_date': datetime.datetime(2018, 2, 11, 2, 22, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4e4a003520c2ae24e98ffcb70bf9e5176ee1c062', 'committer_username': 'lpanaf', 'committer_name': 'Linfei Pan', 'committer_email': None, 'commit_date': datetime.datetime(2018, 2, 11, 2, 22, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5f5aaf51a05bc3586d89a2892a38675ae9b7d04d', 'committer_username': 'lpanaf', 'committer_name': 'Linfei Pan', 'committer_email': None, 'commit_date': datetime.datetime(2018, 2, 11, 2, 22, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f8e4957367b388bc5fb0f9a2ba68bf106bee8a4b', 'committer_username': 'lpanaf', 'committer_name': 'Linfei Pan', 'committer_email': None, 'commit_date': datetime.datetime(2018, 2, 11, 2, 22, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4d877ad0b17e159a537eb14737a2212db2716d23', 'committer_username': 'lpanaf', 'committer_name': 'Linfei Pan', 'committer_email': None, 'commit_date': datetime.datetime(2018, 2, 11, 2, 22, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3d804292988ec82e2f421485db3522bb90455b43', 'committer_username': 'lpanaf', 'committer_name': 'Linfei Pan', 'committer_email': None, 'commit_date': datetime.datetime(2018, 2, 11, 2, 22, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6e1503d43265566c20b9323cfd65f458a0e4b08c', 'committer_username': 'lpanaf', 'committer_name': 'Linfei Pan', 'committer_email': None, 'commit_date': datetime.datetime(2018, 2, 11, 2, 22, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c510e27831ab01802e03defe9f903940d622027c', 'committer_username': 'lpanaf', 'committer_name': 'Linfei Pan', 'committer_email': None, 'commit_date': datetime.datetime(2018, 2, 11, 2, 22, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f59593276b71fec2f36d4f3ef08fd9b3dc5127e8', 'committer_username': 'lpanaf', 'committer_name': 'Linfei Pan', 'committer_email': None, 'commit_date': datetime.datetime(2018, 2, 11, 2, 22, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '36c3d453e9c53ff9567f670b6cca4326849b0b11', 'committer_username': 'lpanaf', 'committer_name': 'Linfei Pan', 'committer_email': None, 'commit_date': datetime.datetime(2018, 2, 11, 2, 22, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a9b3f76421c7105114a03d230083a80a805bb55b', 'committer_username': 'lpanaf', 'committer_name': 'Linfei Pan', 'committer_email': None, 'commit_date': datetime.datetime(2018, 2, 11, 2, 22, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '42e8781595e93820d9f54c1dcfb11ebc6f696470', 'committer_username': 'lpanaf', 'committer_name': 'Linfei Pan', 'committer_email': None, 'commit_date': datetime.datetime(2018, 2, 11, 2, 22, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c5dff225b80f103ddd2502a99f3d9fc4c747d703', 'committer_username': 'lpanaf', 'committer_name': 'Linfei Pan', 'committer_email': None, 'commit_date': datetime.datetime(2018, 2, 11, 2, 22, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c825cc4dd632f36045339a975e2c5ba0b454e726', 'committer_username': 'lpanaf', 'committer_name': 'Linfei Pan', 'committer_email': None, 'commit_date': datetime.datetime(2018, 2, 11, 2, 22, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5ce92add6809785d5526f2ff39301488acd08c52', 'committer_username': 'lpanaf', 'committer_name': 'Linfei Pan', 'committer_email': None, 'commit_date': datetime.datetime(2018, 2, 11, 2, 22, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '53b6330af87754afdc783c0c787b41df57e90e11', 'committer_username': 'lpanaf', 'committer_name': 'Linfei Pan', 'committer_email': None, 'commit_date': datetime.datetime(2018, 2, 11, 2, 22, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5b02ed4c03d91b50acb5b0b700707f8b4952ff47', 'committer_username': 'lpanaf', 'committer_name': 'Linfei Pan', 'committer_email': None, 'commit_date': datetime.datetime(2018, 2, 11, 2, 22, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '68582aa291d79b25b419be4af2ae94e3c97d3a96', 'committer_username': 'lpanaf', 'committer_name': 'Linfei Pan', 'committer_email': None, 'commit_date': datetime.datetime(2018, 2, 11, 2, 22, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a2e2c4c89217d18388fa67528da291f181ece464', 'committer_username': 'lpanaf', 'committer_name': 'Linfei Pan', 'committer_email': None, 'commit_date': datetime.datetime(2018, 2, 11, 2, 22, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2812c6dd8a9da9bd8a7ed7d9f52fa1d2e4fc033d', 'committer_username': 'lpanaf', 'committer_name': 'Linfei Pan', 'committer_email': None, 'commit_date': datetime.datetime(2018, 2, 11, 2, 22, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3f7c88c667f6ba27349a5065f0b5b12c467e7d6d', 'committer_username': 'lpanaf', 'committer_name': 'Linfei Pan', 'committer_email': None, 'commit_date': datetime.datetime(2018, 2, 11, 2, 22, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bed4e8a8bb68fa152216ccf1f2d4da432f6fb4c9', 'committer_username': 'lpanaf', 'committer_name': 'Linfei Pan', 'committer_email': None, 'commit_date': datetime.datetime(2018, 2, 11, 2, 22, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '74ffddc99fccba91efaacc438372af0f70aeae69', 'committer_username': 'lpanaf', 'committer_name': 'Linfei Pan', 'committer_email': None, 'commit_date': datetime.datetime(2018, 2, 11, 2, 22, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9c956b7180c7c12b482010edb96bc79e5fd580f0', 'committer_username': 'lpanaf', 'committer_name': 'Linfei Pan', 'committer_email': None, 'commit_date': datetime.datetime(2018, 2, 11, 2, 22, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f392c5ad509828cfba1dc565c939ef261334d998', 'committer_username': 'lpanaf', 'committer_name': 'Linfei Pan', 'committer_email': None, 'commit_date': datetime.datetime(2018, 2, 11, 2, 22, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '10458ac9ec694f4a134e8c877aebbd04630c9fff', 'committer_username': 'lpanaf', 'committer_name': 'Linfei Pan', 'committer_email': None, 'commit_date': datetime.datetime(2018, 2, 11, 2, 22, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '88523c0620b274a4c029bcf340cda8554b1ae705', 'committer_username': 'lpanaf', 'committer_name': 'Linfei Pan', 'committer_email': None, 'commit_date': datetime.datetime(2018, 2, 11, 2, 22, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '721ba77232c725e2c6149379c29f8ed655cb2873', 'committer_username': 'lpanaf', 'committer_name': 'Linfei Pan', 'committer_email': None, 'commit_date': datetime.datetime(2018, 2, 11, 2, 22, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd3b1db77b90d03fca226cfe4dffa633531247d39', 'committer_username': 'lpanaf', 'committer_name': 'Linfei Pan', 'committer_email': None, 'commit_date': datetime.datetime(2018, 2, 11, 2, 22, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cfc28eb8745c12f4a8d79e1807b62308e14fa20d', 'committer_username': 'lpanaf', 'committer_name': 'Linfei Pan', 'committer_email': None, 'commit_date': datetime.datetime(2018, 2, 11, 2, 22, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '118160f979e99f102b827b16c3c39795429f1188', 'committer_username': 'lpanaf', 'committer_name': 'Linfei Pan', 'committer_email': None, 'commit_date': datetime.datetime(2018, 2, 11, 2, 22, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7c7871236c7142a16dbba4c38b2baee1b7775bb5', 'committer_username': 'lpanaf', 'committer_name': 'Linfei Pan', 'committer_email': None, 'commit_date': datetime.datetime(2018, 2, 11, 2, 22, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a65779acb977e29dc4f8f8c4f5b8a7749e3fce19', 'committer_username': 'lpanaf', 'committer_name': 'Linfei Pan', 'committer_email': None, 'commit_date': datetime.datetime(2018, 2, 11, 2, 22, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '548a5b434b300d80ef7509f307a8ab6d5d53709b', 'committer_username': 'lpanaf', 'committer_name': 'Linfei Pan', 'committer_email': None, 'commit_date': datetime.datetime(2018, 2, 11, 2, 22, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5a49c83a79b2ec03b32c2f31008090956b78b085', 'committer_username': 'lpanaf', 'committer_name': 'Linfei Pan', 'committer_email': None, 'commit_date': datetime.datetime(2018, 2, 11, 2, 22, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '74d08b6744bf7d24ba31a7cd285a43c54b2804a2', 'committer_username': 'lpanaf', 'committer_name': 'Linfei Pan', 'committer_email': None, 'commit_date': datetime.datetime(2018, 2, 11, 2, 22, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2a8f4032961d8506d81d0aa65425fc71e43cf068', 'committer_username': 'lpanaf', 'committer_name': 'Linfei Pan', 'committer_email': None, 'commit_date': datetime.datetime(2018, 2, 11, 2, 22, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6bc3a4288fe3912ddc0ee9ead564976f794a4278', 'committer_username': 'asmorkalov', 'committer_name': 'Alexander Smorkalov', 'committer_email': None, 'commit_date': datetime.datetime(2012, 10, 11, 11, 21, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '10f6f76e3c7d7c00263b7a0602e7cfc9e8338016', 'committer_username': 'asmorkalov', 'committer_name': 'Alexander Smorkalov', 'committer_email': None, 'commit_date': datetime.datetime(2012, 10, 11, 11, 21, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3632187ea3439ee74231afc42dec66ceaa82f334', 'committer_username': 'asmorkalov', 'committer_name': 'Alexander Smorkalov', 'committer_email': None, 'commit_date': datetime.datetime(2012, 10, 11, 11, 21, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9ce8d192d16f7b2651edb9630901bcf987c05e31', 'committer_username': 'asmorkalov', 'committer_name': 'Alexander Smorkalov', 'committer_email': None, 'commit_date': datetime.datetime(2012, 10, 11, 11, 21, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '43c4fb8e9c38f22927bc9f5f3b223c6a81e9e36a', 'committer_username': 'asmorkalov', 'committer_name': 'Alexander Smorkalov', 'committer_email': None, 'commit_date': datetime.datetime(2012, 10, 11, 11, 21, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5dc9dd85ada2716eb2232089a5c6b2f46a600dcc', 'committer_username': 'asmorkalov', 'committer_name': 'Alexander Smorkalov', 'committer_email': None, 'commit_date': datetime.datetime(2012, 10, 11, 11, 21, 16, tzinfo=datetime.timezone.utc)}]",Linfei Pan,36349740,,User,,6,,8,29

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
5108051,opencv,opencv/opencv,C++,55711,77624,2656,2195,34493,2601,6,134,"[{'id': 1447178785, 'number': 24052, 'closed': None, 'created': datetime.datetime(2023, 7, 24, 18, 30, 40, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 709, 'deletions': 319, 'state': 'open'}, {'id': 1427402855, 'number': 23957, 'closed': datetime.datetime(2023, 8, 2, 14, 45, 15, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 7, 10, 12, 7, 38, tzinfo=datetime.timezone.utc), 'time_taken': 1996657.0, 'time_delta': '23 days, 2:37:37', 'additions': 36, 'deletions': 36, 'state': 'closed'}]"
