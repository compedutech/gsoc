pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
683222356,[GSoC] Add nftables based network locking/unlocking,"## Overview

During checkpointing and restoring, CRIU locks the network to make sure no TCP packets are accepted by the network stack during the time the process is checkpointed (to avoid the kernel from sending a RST packet).
Currently CRIU calls out to ```iptables-restore``` to create and delete the corresponding iptables rules (external binary).

This approach uses ```nftables``` as a replacement for ```iptables-restore```.
Using ```libnftables``` eliminates the external ```iptables-restore``` binary dependency, also ```nftables``` is much more efficient than ```iptables```.


## Proposed design

### Kerndat

*Check needed kernel features exist*
Check that nftables [concatenations](https://wiki.nftables.org/wiki-nftables/index.php/Concatenations) is supported [has_nftables_concat]

### Feature check
`criu check --feature network-lock-nftables`

Add ability to check if nftables based locking/unlocking is possible.
This would typically check the corresponding kerndat fields.

### Add --network-lock option

After nftables based locking/unlocking we would have two values available for this option (`iptables` and `nftables`)
It would be better to default to `iptables` until nftables method is tested thoroughly.
e.g.
`criu dump -t 2221 --tcp-established --network-lock iptables`
`criu dump -t 2221 --tcp-established --network-lock nftables`

Corresponding RPC and libcriu option must be added.

### Algorithm flow

I want to use the same hooks that invoke iptables locking/unlocking.
i.e. `network_lock_internal`, `network_unlock_internal` for network-wide case
`nf_lock_connection` for per-socket case (could be renamed to `lock_connection`)

Note: Per-socket rule should be loaded in `network_lock`, `lock_connection` will just add connection tuple entries to the associated nftables set.

CRIU could just decide in those hooks which method should be used based on ```--network-lock``` option.

```c
if (opts.network_lock_method == NETWORK_LOCK_IPTABLES)
	ret |= iptables_network_unlock_internal();
else if (opts.network_lock_method == NETWORK_LOCK_NFTABLES)
	ret |= nftables_network_unlock_internal();
```

This flow would centralize network locking/unlocking in those hooks and avoid forgetting using one or the other anywhere in the source code, both should have identical behavior anyway and should be interchangeable seamlessly with the ```--network-lock``` option.

#### Locking (netns-wide)

1. Create a table named CRIU
    Similar to `nft add table inet CRIU`
2. Create INPUT/OUTPUT chains with a default *""drop""* policy
    Similar to `nft add chain inet CRIU output { type filter hook output priority 0 ; policy drop; }`
3. Create a rule to *""accept""* packets with SOCCR_MARK
    Similar to `nft add rule inet CRIU output meta mark 0xC114 accept`

#### Locking (per-socket)

**Preparation**

1. Create a table named CRIU
    Similar to `nft add table inet CRIU`
2. Create INPUT/OUTPUT chains
    Similar to `nft add chain inet CRIU output { type filter hook output priority 0 }`
3. Create a rule to *""accept""* packets with SOCCR_MARK
    Similar to `nft add rule inet CRIU output meta mark 0xC114 accept`
4. Create connections set, which should contain connection identifying tuples (*src_addr, src_port, dst_addr, dst_port*)
    This is possible due to concatenations support for nftables sets which requires kernel â‰¥ 4.1 [https://wiki.nftables.org/wiki-nftables/index.php/Concatenations](https://wiki.nftables.org/wiki-nftables/index.php/Concatenations).
     Similar to `nft add set inet CRIU conns { type ipv4_addr . inet_service . ipv4_addr . inet_service ;}`
5. Create a rule to *""drop""* packets that match connections in the `conns` set
    Similar to `nft add rule inet CRIU output ip saddr . tcp sport . ip daddr . tcp dport @conns drop`

Note: A separate set/rule is needed for IPv6.

**Locking one socket**

CRIU just needs to add the connection identifying tuple to the `conns` set in `nftables_lock_connection`.
Similar to `nft add element inet CRIU conns { 192.168.1.96 . 46315 . 1.1.1.1 . 53 }`
Nftables sets are very efficient and avoids adding a separate rule for each connection, we only need to add connection entries to the `conns` set.

#### Unlocking

With nftables the process is much easier, we only need to delete the CRIU table and that is it.
Similar to `nft delete table inet CRIU`

## Progress
- [x] Network-wide locking test #1465 
- [x] Add ```--network-lock``` option
- [x] Feature check
- [x] Nftables based network-wide locking
- [x] Per-socket locking tests
- [x] Nftables based per-socket locking
",True,1539,https://api.github.com/repos/checkpoint-restore/criu/pulls/1539,https://github.com/checkpoint-restore/criu/pull/1539,closed,724,41,36,12,27,40,0,0,[],2021-07-04 19:07:23+00:00,2021-08-17 15:50:42+00:00,3789799.0,"43 days, 20:43:19","[{'comment_id': 666592786, 'comment_body': 'We also need to add a description in `criu --help` and [`man criu`](https://github.com/checkpoint-restore/criu/blob/f29a02a395083941fea8d5f09ccf7efacdd60836/Documentation/criu.txt)', 'comment_created': datetime.datetime(2021, 7, 9, 0, 18, 17, tzinfo=datetime.timezone.utc), 'commenter': 'rst0git', 'type': 'User'}, {'comment_id': 666593921, 'comment_body': 'I think the following message would be more descriptive\r\n```\r\npr_err(""Invalid value for --network-lock: %s\\n"", optarg);\r\n```', 'comment_created': datetime.datetime(2021, 7, 9, 0, 22, 11, tzinfo=datetime.timezone.utc), 'commenter': 'rst0git', 'type': 'User'}, {'comment_id': 666869322, 'comment_body': ""I was thinking of adding that later when I add the ```--network-lock nftables``` option, but now that you pointed it out, I think I should add the ```nftables``` option + help/docs here because the rest depends on the option's existence anyway.\r\nI will update it right away."", 'comment_created': datetime.datetime(2021, 7, 9, 11, 9, 19, tzinfo=datetime.timezone.utc), 'commenter': 'ZeyadYasser', 'type': 'User'}, {'comment_id': 667171352, 'comment_body': 'This could be simplified to something like:\r\n```C\r\nint criu_local_set_network_lock(criu_opts *opts, enum criu_network_lock_method method)\r\n{\r\n\tint ret = -1;\r\n\r\n\tif (method == CRIU_NETWORK_LOCK_IPTABLES || method == CRIU_NETWORK_LOCK_NFTABLES) {\r\n\t\topts->rpc->has_network_lock = true;\r\n\t\topts->rpc->network_lock = (CriuNetworkLockMethod)method;\r\n\t\tret = 0;\r\n\t}\r\n\r\n\treturn ret;\r\n}\r\n```', 'comment_created': datetime.datetime(2021, 7, 9, 19, 36, 2, tzinfo=datetime.timezone.utc), 'commenter': 'rst0git', 'type': 'User'}, {'comment_id': 667175987, 'comment_body': 'When `NFT_RUN_CMD()` fails here, `kdat.has_nftables_concat` would remain set to `true`.', 'comment_created': datetime.datetime(2021, 7, 9, 19, 46, 15, tzinfo=datetime.timezone.utc), 'commenter': 'rst0git', 'type': 'User'}, {'comment_id': 667178213, 'comment_body': 'Could you please change the indentation on these lines to tabs?', 'comment_created': datetime.datetime(2021, 7, 9, 19, 50, 56, tzinfo=datetime.timezone.utc), 'commenter': 'rst0git', 'type': 'User'}, {'comment_id': 667180512, 'comment_body': 'It would be better to use a different name here because `free` is a function defined in `stdlib.h`. For example:\r\n```diff\r\n-free:\r\n+out:\r\n```', 'comment_created': datetime.datetime(2021, 7, 9, 19, 55, 54, tzinfo=datetime.timezone.utc), 'commenter': 'rst0git', 'type': 'User'}, {'comment_id': 671726559, 'comment_body': 'These `SO_MARK` and `SOCCR_MARK` constants are not used.', 'comment_created': datetime.datetime(2021, 7, 17, 18, 5, 19, tzinfo=datetime.timezone.utc), 'commenter': 'rst0git', 'type': 'User'}, {'comment_id': 671726619, 'comment_body': '`subprocess` is not used', 'comment_created': datetime.datetime(2021, 7, 17, 18, 6, 21, tzinfo=datetime.timezone.utc), 'commenter': 'rst0git', 'type': 'User'}, {'comment_id': 671728006, 'comment_body': 'It would be better to add a prefix to the test name, because ""lock"" could mean something else (e.g. file lock).\r\nFor example: `net_lock_socket_iptables`.', 'comment_created': datetime.datetime(2021, 7, 17, 18, 19, 56, tzinfo=datetime.timezone.utc), 'commenter': 'rst0git', 'type': 'User'}, {'comment_id': 671728222, 'comment_body': 'It would be more reliable to check for a `pass` message instead.\r\n```diff\r\n-if status == ""fail"":\r\n+if status != ""pass"":\r\n```', 'comment_created': datetime.datetime(2021, 7, 17, 18, 21, 51, tzinfo=datetime.timezone.utc), 'commenter': 'rst0git', 'type': 'User'}, {'comment_id': 671728943, 'comment_body': 'It would be better to move the sync file deletion inside `wait_sync_file()`, just before `return`.', 'comment_created': datetime.datetime(2021, 7, 17, 18, 29, 35, tzinfo=datetime.timezone.utc), 'commenter': 'rst0git', 'type': 'User'}, {'comment_id': 671729335, 'comment_body': '`raise TimeoutError(""Sync timeout: file ({}) not found"".format(SYNCFILE))`', 'comment_created': datetime.datetime(2021, 7, 17, 18, 33, 58, tzinfo=datetime.timezone.utc), 'commenter': 'rst0git', 'type': 'User'}, {'comment_id': 671738455, 'comment_body': 'We could add an error message here. It might be helpful when debugging.\r\n```\r\npr_err(""Failed to lock TCP connection\\n"");\r\n```', 'comment_created': datetime.datetime(2021, 7, 17, 20, 9, 14, tzinfo=datetime.timezone.utc), 'commenter': 'rst0git', 'type': 'User'}, {'comment_id': 673498537, 'comment_body': ""```diff\r\n@@ -408,7 +408,7 @@ By default the option is set to *fpu* and *ins*.\r\n     Set the method to be used to validate open files. Validation is done\r\n     to ensure that the version of the file being restored is the same\r\n     version when it was dumped.\r\n-\r\n++\r\n The 'mode' may be one of the following:\r\n \r\n     *filesize*:::\r\n@@ -426,16 +426,13 @@ The 'mode' may be one of the following:\r\n     done to avoid the kernel sending RST when a packet arrives destined for\r\n     the dumped process.\r\n \r\n++\r\n The 'mode' may be one of the following:\r\n \r\n-    *iptables*:::\r\n-                Iptables rules are used to drop the packets. 'iptables-restore'\r\n-                executable is required. This is the default if mode is\r\n-                unspecified.\r\n+    *iptables*::: Use iptables rules to drop the packets.\r\n+    This is the default if 'mode' is not specified.\r\n \r\n-    *nftables*:::\r\n-                Nftables rules are used to drop the packets. 'libnftables' is\r\n-                required at compile time.\r\n+    *nftables*::: Use nftables rules to drop the packets.\r\n \r\n *restore*\r\n ~~~~~~~~~\r\n```\r\n\r\n>'libnftables' is required at compile time.\r\n\r\nand\r\n>'iptables-restore' executable is required.\r\n\r\nare not necessary in the man page because these are dependencies, usually described on this page:\r\nhttps://criu.org/Installation"", 'comment_created': datetime.datetime(2021, 7, 20, 21, 14, 40, tzinfo=datetime.timezone.utc), 'commenter': 'rst0git', 'type': 'User'}, {'comment_id': 673513140, 'comment_body': '>CRIU was built without libnftables support\r\n\r\nThis message may appear when CRIU is installed from a package.', 'comment_created': datetime.datetime(2021, 7, 20, 21, 41, 38, tzinfo=datetime.timezone.utc), 'commenter': 'rst0git', 'type': 'User'}, {'comment_id': 673513983, 'comment_body': '>CRIU was built without libnftables support\r\n\r\nThis message may appear when CRIU has been installed from a package.\r\n', 'comment_created': datetime.datetime(2021, 7, 20, 21, 43, 23, tzinfo=datetime.timezone.utc), 'commenter': 'rst0git', 'type': 'User'}, {'comment_id': 673515225, 'comment_body': '> CRIU was built without libnftables support\r\n\r\nThis message may appear when CRIU is installed from a package.\r\n', 'comment_created': datetime.datetime(2021, 7, 20, 21, 46, 2, tzinfo=datetime.timezone.utc), 'commenter': 'rst0git', 'type': 'User'}, {'comment_id': 673516303, 'comment_body': '\r\n>CRIU was built without libnftables support\r\n\r\nThis message may appear when CRIU is installed from a package.\r\n', 'comment_created': datetime.datetime(2021, 7, 20, 21, 48, 2, tzinfo=datetime.timezone.utc), 'commenter': 'rst0git', 'type': 'User'}, {'comment_id': 673518244, 'comment_body': 'To make debugging easier, it might be better to split this into two `if` conditions:\r\n```C\r\nif (!inet_ntop(family, (void *)src_addr, sip, INET_ADDR_LEN)) {\r\n    pr_perror(""nf: Can\'t convert src ip addr"");\r\n    return -1;\r\n}\r\n\r\nif (!inet_ntop(family, (void *)dst_addr, dip, INET_ADDR_LEN)) {\r\n    pr_perror(""nf: Can\'t convert dst ip addr"");\r\n    return -1;\r\n}\r\n```', 'comment_created': datetime.datetime(2021, 7, 20, 21, 51, 48, tzinfo=datetime.timezone.utc), 'commenter': 'rst0git', 'type': 'User'}, {'comment_id': 673518570, 'comment_body': '\r\n> CRIU was built without libnftables support\r\n\r\nThis message may appear when CRIU is installed from a package.\r\n', 'comment_created': datetime.datetime(2021, 7, 20, 21, 52, 35, tzinfo=datetime.timezone.utc), 'commenter': 'rst0git', 'type': 'User'}, {'comment_id': 674299019, 'comment_body': 'I am not sure I understand clearly, Do you mean the message should appear when CRIU is installed from a package manager?', 'comment_created': datetime.datetime(2021, 7, 21, 20, 9, 17, tzinfo=datetime.timezone.utc), 'commenter': 'ZeyadYasser', 'type': 'User'}, {'comment_id': 674505450, 'comment_body': 'There are some indentation issues in the `man criu` page, but we could fix them in another PR.\r\n\r\n![Screenshot](https://user-images.githubusercontent.com/9142901/126592670-e1e3efda-e88e-486b-8326-bcb06d0abcd3.png)\r\n', 'comment_created': datetime.datetime(2021, 7, 22, 5, 14, 33, tzinfo=datetime.timezone.utc), 'commenter': 'rst0git', 'type': 'User'}, {'comment_id': 674510034, 'comment_body': 'No. I meant to say that I think we could make the following change:\r\n```diff\r\n-pr_err(""CRIU must be compiled with libnftables support\\n"");\r\n+pr_err(""CRIU was built without libnftables support\\n"");\r\n```\r\nThe reason is because when CRIU is installed from a package (e.g. `apt-get install criu`) this message may appear to a user who hasn\'t compiled it.', 'comment_created': datetime.datetime(2021, 7, 22, 5, 30, 47, tzinfo=datetime.timezone.utc), 'commenter': 'rst0git', 'type': 'User'}, {'comment_id': 676199850, 'comment_body': ""Hmm, the tests are passing when I run them with multiple iterations locally.\r\n\r\n```console\r\nsudo ./zdtm.py run -T 'zdtm/static/net_lock_socket_*' --parallel 4 --iter 3\r\n\r\nChecking feature network_lock_nftables\r\nnetwork_lock_nftables is supported\r\nuserns is supported\r\n=== Run 1/2 ========-------- zdtm/static/net_lock_socket_nftables\r\ntimens isn't supported on 5.13.4-200.fc34.x86_64\r\n================ Run zdtm/static/net_lock_socket_nftables in h =================\r\nStart test\r\nTest is SUID\r\n./net_lock_socket_nftables --pidfile=net_lock_socket_nftables.pid --outfile=net_lock_socket_nftables.out\r\nRunning zdtm/static/net_lock_socket_nftables.hook(--post-start)\r\nRunning zdtm/static/net_lock_socket_nftables.hook(--pre-dump)\r\nRun criu dump\r\nRunning zdtm/static/net_lock_socket_nftables.hook(--pre-restore)\r\nRun criu restore\r\nRunning zdtm/static/net_lock_socket_nftables.hook(--post-restore)\r\nRunning zdtm/static/net_lock_socket_nftables.hook(--pre-dump)\r\nRun criu dump\r\nRunning zdtm/static/net_lock_socket_nftables.hook(--pre-restore)\r\nRun criu restore\r\nRunning zdtm/static/net_lock_socket_nftables.hook(--post-restore)\r\nRunning zdtm/static/net_lock_socket_nftables.hook(--pre-dump)\r\nRun criu dump\r\nRunning zdtm/static/net_lock_socket_nftables.hook(--pre-restore)\r\nRun criu restore\r\nRunning zdtm/static/net_lock_socket_nftables.hook(--post-restore)\r\nSend the 15 signal to  57\r\nWait for zdtm/static/net_lock_socket_nftables(57) to die for 0.100000\r\nRunning zdtm/static/net_lock_socket_nftables.hook(--clean)\r\nRemoving dump/zdtm/static/net_lock_socket_nftables/57\r\n================ Test zdtm/static/net_lock_socket_nftables PASS ================\r\n\r\nuserns is supported\r\n=== Run 2/2 ================ zdtm/static/net_lock_socket_iptables\r\ntimens isn't supported on 5.13.4-200.fc34.x86_64\r\n================ Run zdtm/static/net_lock_socket_iptables in h =================\r\nStart test\r\nTest is SUID\r\n./net_lock_socket_iptables --pidfile=net_lock_socket_iptables.pid --outfile=net_lock_socket_iptables.out\r\nRunning zdtm/static/net_lock_socket_iptables.hook(--post-start)\r\nRunning zdtm/static/net_lock_socket_iptables.hook(--pre-dump)\r\nRun criu dump\r\nRunning zdtm/static/net_lock_socket_iptables.hook(--pre-restore)\r\nRun criu restore\r\nRunning zdtm/static/net_lock_socket_iptables.hook(--post-restore)\r\nRunning zdtm/static/net_lock_socket_iptables.hook(--pre-dump)\r\nRun criu dump\r\nRunning zdtm/static/net_lock_socket_iptables.hook(--pre-restore)\r\nRun criu restore\r\nRunning zdtm/static/net_lock_socket_iptables.hook(--post-restore)\r\nRunning zdtm/static/net_lock_socket_iptables.hook(--pre-dump)\r\nRun criu dump\r\nRunning zdtm/static/net_lock_socket_iptables.hook(--pre-restore)\r\nRun criu restore\r\nRunning zdtm/static/net_lock_socket_iptables.hook(--post-restore)\r\nSend the 15 signal to  57\r\nWait for zdtm/static/net_lock_socket_iptables(57) to die for 0.100000\r\nRunning zdtm/static/net_lock_socket_iptables.hook(--clean)\r\nRemoving dump/zdtm/static/net_lock_socket_iptables/57\r\n================ Test zdtm/static/net_lock_socket_iptables PASS ================\r\n```"", 'comment_created': datetime.datetime(2021, 7, 25, 20, 43, 13, tzinfo=datetime.timezone.utc), 'commenter': 'rst0git', 'type': 'User'}, {'comment_id': 676825563, 'comment_body': 'I am sorry, this is my bad. I assumed that it would fail the same as the netns tests did.', 'comment_created': datetime.datetime(2021, 7, 26, 17, 59, 21, tzinfo=datetime.timezone.utc), 'commenter': 'ZeyadYasser', 'type': 'User'}, {'comment_id': 680557087, 'comment_body': 'unnecessary `elif` and `else` after return:\r\n```python\r\nif addr == ""ipv4"":\r\n    return ""127.0.0.1""\r\n\r\nif addr == ""ipv6"":\r\n    return ""::1""\r\n\r\nraise ValueError(""Invalid address type"")\r\n```', 'comment_created': datetime.datetime(2021, 8, 1, 19, 48, 15, tzinfo=datetime.timezone.utc), 'commenter': 'rst0git', 'type': 'User'}, {'comment_id': 680560359, 'comment_body': 'to avoid duplicating `ret = -1;`, it could be moved after the `err:` label', 'comment_created': datetime.datetime(2021, 8, 1, 20, 15, 11, tzinfo=datetime.timezone.utc), 'commenter': 'rst0git', 'type': 'User'}, {'comment_id': 680776926, 'comment_body': 'ctx should always be freed not on failure only.', 'comment_created': datetime.datetime(2021, 8, 2, 8, 30, 37, tzinfo=datetime.timezone.utc), 'commenter': 'ZeyadYasser', 'type': 'User'}, {'comment_id': 686004175, 'comment_body': ""nit: don't we want to add `unshare(CLONE_NEWNET)` to prevent any collisions here?"", 'comment_created': datetime.datetime(2021, 8, 10, 13, 13, 38, tzinfo=datetime.timezone.utc), 'commenter': 'mihalicyn', 'type': 'User'}, {'comment_id': 686008194, 'comment_body': 'nit: `|=` not needed here', 'comment_created': datetime.datetime(2021, 8, 10, 13, 17, 52, tzinfo=datetime.timezone.utc), 'commenter': 'mihalicyn', 'type': 'User'}, {'comment_id': 686017229, 'comment_body': '`pr_warn` for the first message, and `pr_info` for the second, IMHO', 'comment_created': datetime.datetime(2021, 8, 10, 13, 26, 50, tzinfo=datetime.timezone.utc), 'commenter': 'mihalicyn', 'type': 'User'}, {'comment_id': 686033939, 'comment_body': 'nit: `|=` -> `=`', 'comment_created': datetime.datetime(2021, 8, 10, 13, 45, 11, tzinfo=datetime.timezone.utc), 'commenter': 'mihalicyn', 'type': 'User'}, {'comment_id': 686042529, 'comment_body': 'what about `pr_err(""Failed to lock TCP connection %x\\n"", sk->sd.ino);`?', 'comment_created': datetime.datetime(2021, 8, 10, 13, 54, 16, tzinfo=datetime.timezone.utc), 'commenter': 'mihalicyn', 'type': 'User'}, {'comment_id': 686045201, 'comment_body': '`pr_err(""Failed to unlock TCP connection %x\\n"", sk->sd.ino);` just to be consistent.\r\nalso looks line `errno` is not valid here, so `pr_perror` makes no sense', 'comment_created': datetime.datetime(2021, 8, 10, 13, 56, 56, tzinfo=datetime.timezone.utc), 'commenter': 'mihalicyn', 'type': 'User'}, {'comment_id': 687125425, 'comment_body': ""I can add it, but I think it wouldn't collide with anything, since no filtering rules are added (only a test set is created) which is added to separate CRIU table.\r\nHaving two instances of CRIU running at the same time would be a problem since the table name will for sure collide, I think actually that would also be the case during normal locking/unlocking like [here](https://github.com/checkpoint-restore/criu/pull/1539/files/1d7d0d252e350c0ec4f441c5b95dbb9ce6f99b02#diff-ffdccecb1d7573f5f13830e82a1b1c6e200f33b3bdb934ea9add47d68ad23406R3028). Is that a use case I should consider?"", 'comment_created': datetime.datetime(2021, 8, 11, 19, 46, 37, tzinfo=datetime.timezone.utc), 'commenter': 'ZeyadYasser', 'type': 'User'}, {'comment_id': 687155132, 'comment_body': 'It looks like the only difference between `add table inet CRIU` and `create table inet CRIU` is that the former will not return an error if the table already exists while `create` will return an error.\r\n\r\nTo avoid collisions we could replace `add` with `create` and append the PID number specified with `-t` (`--tree`) to the table name. However, the table name may not be unique when CRIU runs in unshared PID namespace where the network namespace is shared (e.g., a container inside pod).', 'comment_created': datetime.datetime(2021, 8, 11, 20, 15, 57, tzinfo=datetime.timezone.utc), 'commenter': 'rst0git', 'type': 'User'}, {'comment_id': 692882404, 'comment_body': 'I believe that there is still a race window here... One kerndat_has_nftables_concat can remove the table under another kerndat_has_nftables_concat, and another would fail on no table and wrongly set kdat.has_nftables_concat = false and will save it to kerndat cache.\r\n\r\nActually running multiple migrations of different containers in parallel can be quite a usecase for cloud cluster load balancing.', 'comment_created': datetime.datetime(2021, 8, 20, 11, 46, 28, tzinfo=datetime.timezone.utc), 'commenter': 'Snorch', 'type': 'User'}, {'comment_id': 693019862, 'comment_body': 'kerndat is cached, so it has to be collected once. But I agree that this looks like a race and we need to generate a unique name for this test table.', 'comment_created': datetime.datetime(2021, 8, 20, 15, 6, 43, tzinfo=datetime.timezone.utc), 'commenter': 'avagin', 'type': 'User'}, {'comment_id': 693497141, 'comment_body': 'Thank you for pointing this out. https://github.com/checkpoint-restore/criu/pull/1588', 'comment_created': datetime.datetime(2021, 8, 22, 12, 46, 4, tzinfo=datetime.timezone.utc), 'commenter': 'ZeyadYasser', 'type': 'User'}]","[{'commit_sha': '65cd4632ef301877e4a6671c3146e3d9fd720992', 'committer_username': 'ZeyadYasser', 'committer_name': 'Zeyad Yasser', 'committer_email': 'zeyady98@gmail.com', 'commit_date': datetime.datetime(2015, 8, 2, 15, 47, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': '906df7e92ff9590d2cc5c43e3f134c78e6473e7c', 'committer_username': 'ZeyadYasser', 'committer_name': 'Zeyad Yasser', 'committer_email': 'zeyady98@gmail.com', 'commit_date': datetime.datetime(2015, 8, 2, 15, 47, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': '804505025e57f25ed5b4a289b6dbdd74947ac00b', 'committer_username': 'ZeyadYasser', 'committer_name': 'Zeyad Yasser', 'committer_email': 'zeyady98@gmail.com', 'commit_date': datetime.datetime(2015, 8, 2, 15, 47, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1a4c9f22a18715478d7669ff2bc86c91725174b0', 'committer_username': 'ZeyadYasser', 'committer_name': 'Zeyad Yasser', 'committer_email': 'zeyady98@gmail.com', 'commit_date': datetime.datetime(2015, 8, 2, 15, 47, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cd996901e7468fc02853cd822195f90a8ec7f6ab', 'committer_username': 'ZeyadYasser', 'committer_name': 'Zeyad Yasser', 'committer_email': 'zeyady98@gmail.com', 'commit_date': datetime.datetime(2015, 8, 2, 15, 47, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': '12c0d0d36f53251a7a685bb903a902152dc2956a', 'committer_username': 'ZeyadYasser', 'committer_name': 'Zeyad Yasser', 'committer_email': 'zeyady98@gmail.com', 'commit_date': datetime.datetime(2015, 8, 2, 15, 47, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': '917c23cf724f52b17c3e9f751bcd3b44289c4a4f', 'committer_username': 'ZeyadYasser', 'committer_name': 'Zeyad Yasser', 'committer_email': 'zeyady98@gmail.com', 'commit_date': datetime.datetime(2015, 8, 2, 15, 47, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8f4165635ed7dab141f5a056852f4784b662656d', 'committer_username': 'ZeyadYasser', 'committer_name': 'Zeyad Yasser', 'committer_email': 'zeyady98@gmail.com', 'commit_date': datetime.datetime(2015, 8, 2, 15, 47, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': '40d4d8c8b39d40a8c403bdf1a938fec6d1678417', 'committer_username': 'ZeyadYasser', 'committer_name': 'Zeyad Yasser', 'committer_email': 'zeyady98@gmail.com', 'commit_date': datetime.datetime(2015, 8, 2, 15, 47, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8c955802a9c98dcbafd0af1af13d30dfc4a3da56', 'committer_username': 'ZeyadYasser', 'committer_name': 'Zeyad Yasser', 'committer_email': 'zeyady98@gmail.com', 'commit_date': datetime.datetime(2015, 8, 2, 15, 47, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0be34d778fa19781e8a8861adaa502037cbe1020', 'committer_username': 'ZeyadYasser', 'committer_name': 'Zeyad Yasser', 'committer_email': 'zeyady98@gmail.com', 'commit_date': datetime.datetime(2015, 8, 2, 15, 47, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0b80768ad74f770ff62841612ac67c664c7bc7b9', 'committer_username': 'ZeyadYasser', 'committer_name': 'Zeyad Yasser', 'committer_email': 'zeyady98@gmail.com', 'commit_date': datetime.datetime(2015, 8, 2, 15, 47, 28, tzinfo=datetime.timezone.utc)}]",Zeyad Yasser,13612175,zeyady98@gmail.com,User,,22,,112,58
695020634,Fix protobuf-c v1.4.0 breaking CRIU's build,"Fixes: #1560

The latest protobuf-c compiler breaks CRIU because they removed
leading underscores from structs in 1.4.0.

This replaces those definitions with the standard generated structs.

Signed-off-by: Zeyad Yasser <zeyady98@gmail.com>

<!--
Please make sure you've read and understood our contributing guidelines:
https://github.com/checkpoint-restore/criu/blob/criu-dev/CONTRIBUTING.md

In short you need to:

- Describe What you do and How you do it;
- Separate each logical change into a separate commit;
- Add a ""Signed-off-by:"" line identifying that you certify your work with DCO;
- If you fix some specific bug or commit, please add ""Fixes: ..."" line;
- Review fixes should be made by amending the original commits. For example:
  a) fix the code (e.g. this fixes commit with hash aaa1111)
  b) git commit -a --fixup aaa1111
  c) git rebase --interactive --autosquash aaa1111^
- Pull request integration tests should generally be passing;
- If you change something non-obvious, please consider adding a ZDTM test for it;

-->
",True,1561,https://api.github.com/repos/checkpoint-restore/criu/pulls/1561,https://github.com/checkpoint-restore/criu/pull/1561,closed,79,26,16,3,6,10,0,0,[],2021-07-22 09:45:55+00:00,2021-07-25 13:29:04+00:00,272589.0,"3 days, 3:43:09","[{'comment_id': 674679356, 'comment_body': 'The ccache setup was removed in https://github.com/checkpoint-restore/criu/pull/1395', 'comment_created': datetime.datetime(2021, 7, 22, 10, 30, 57, tzinfo=datetime.timezone.utc), 'commenter': 'rst0git', 'type': 'User'}, {'comment_id': 674709601, 'comment_body': 'You might need to update [scripts/ci/Makefile](https://github.com/checkpoint-restore/criu/blob/47611e668e49fe0b17c39d9b2b2d83b04b2b4cb6/scripts/ci/Makefile) as well.', 'comment_created': datetime.datetime(2021, 7, 22, 11, 23, 44, tzinfo=datetime.timezone.utc), 'commenter': 'rst0git', 'type': 'User'}, {'comment_id': 674741481, 'comment_body': 'Thanks I missed that. My bad :)', 'comment_created': datetime.datetime(2021, 7, 22, 12, 16, tzinfo=datetime.timezone.utc), 'commenter': 'ZeyadYasser', 'type': 'User'}, {'comment_id': 674748322, 'comment_body': 'Please do not use just a shortname. Use something like `docker.io/library/archlinux:latest\r\n`', 'comment_created': datetime.datetime(2021, 7, 22, 12, 26, 16, tzinfo=datetime.timezone.utc), 'commenter': 'adrianreber', 'type': 'User'}, {'comment_id': 674748452, 'comment_body': 'Probably unnecessary.', 'comment_created': datetime.datetime(2021, 7, 22, 12, 26, 26, tzinfo=datetime.timezone.utc), 'commenter': 'adrianreber', 'type': 'User'}, {'comment_id': 674749053, 'comment_body': 'Can you install all packages in one run of pacman?', 'comment_created': datetime.datetime(2021, 7, 22, 12, 27, 20, tzinfo=datetime.timezone.utc), 'commenter': 'adrianreber', 'type': 'User'}, {'comment_id': 674749250, 'comment_body': ""Isn't there an arch package for this?"", 'comment_created': datetime.datetime(2021, 7, 22, 12, 27, 38, tzinfo=datetime.timezone.utc), 'commenter': 'adrianreber', 'type': 'User'}, {'comment_id': 674749485, 'comment_body': 'New line at end of file missing.', 'comment_created': datetime.datetime(2021, 7, 22, 12, 27, 55, tzinfo=datetime.timezone.utc), 'commenter': 'adrianreber', 'type': 'User'}, {'comment_id': 674998335, 'comment_body': '> ####### Test zdtm/static/bridge FAIL at Deps check /usr/bin/diff failed ########\r\n\r\nThe [diffutils](https://archlinux.org/packages/core/x86_64/diffutils/) package should provide `/usr/bin/diff`', 'comment_created': datetime.datetime(2021, 7, 22, 17, 12, 12, tzinfo=datetime.timezone.utc), 'commenter': 'rst0git', 'type': 'User'}, {'comment_id': 675506641, 'comment_body': 'This change should be in a separate commit.', 'comment_created': datetime.datetime(2021, 7, 23, 11, 50, 55, tzinfo=datetime.timezone.utc), 'commenter': 'rst0git', 'type': 'User'}]","[{'commit_sha': '410f979a7fd05097b3137fce711bb3c879b623ca', 'committer_username': 'ZeyadYasser', 'committer_name': 'Zeyad Yasser', 'committer_email': 'zeyady98@gmail.com', 'commit_date': datetime.datetime(2015, 8, 2, 15, 47, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ec73d764af1ecf5bc5abe7af14eb7473521d3d39', 'committer_username': 'ZeyadYasser', 'committer_name': 'Zeyad Yasser', 'committer_email': 'zeyady98@gmail.com', 'commit_date': datetime.datetime(2015, 8, 2, 15, 47, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cdef8d81b7b6a13d651fdeb7a4d678f2b5c9b832', 'committer_username': 'ZeyadYasser', 'committer_name': 'Zeyad Yasser', 'committer_email': 'zeyady98@gmail.com', 'commit_date': datetime.datetime(2015, 8, 2, 15, 47, 28, tzinfo=datetime.timezone.utc)}]",Zeyad Yasser,13612175,zeyady98@gmail.com,User,,22,,112,58
560105747,Add pidfd based pid reuse detection,"This PR closes #717.

This increases the reliability of pid reuse detection using pidfds, mainly during migration like in P.Haul.
A unix domain socket pair is passed to criu (--pidfd-in-fd and --pidfd-in-fd) in CLI or RPC mode.
If those options are set, criu sends tasks pidfds to pidfd_out_fd in send_pidfd_entry() and receives them in the next pre-dump/dump iteration from pidfd_in_fd in init_pidfd_hash().
These pidfds will be used later in detect_pid_reuse().

When pidfd based pid reuse detection is used, the output of detect_pid_reuse() is deterministic hence it returns -1 if pid reuse is detected (task associated with pidfd is closed) which causes criu to exit.

How it should be used in migration tools like P.Haul:
	- Open unix domain socket pair
	- Launch criu in SWRK mode so that it inherits the socket pair fds
	- Pass the socket pair fds in the RPC opts pidfd_in_fd and pidfd_out_fd when doing a pre-dump or dump

This will fail if the kernel does not support pidfd_open syscall, so those options should not be set if the kernel does not support pidfd_open.
This could be checked with: ```criu check --feature pidfd_open```

I have already tried this with P.Haul and it is working as expected. As soon as this gets merged I will open a PR for P.Haul to enable this feature.

Thanks @Snorch  for giving me an idea on how to approach this.",True,1341,https://api.github.com/repos/checkpoint-restore/criu/pulls/1341,https://github.com/checkpoint-restore/criu/pull/1341,closed,476,2,22,7,11,26,0,0,[],2021-01-22 17:25:44+00:00,2021-05-31 16:52:59+00:00,11143635.0,"128 days, 23:27:15","[{'comment_id': 578320609, 'comment_body': 'In case of not supported SYS_pidfd_open you would call close(-1) and would get error from close and fail, probably it\'s not what you want. Please consider to use close_safe() helper.\r\n\r\nAlso please rename ""ret"" to ""fd"" to make your code easier to read.', 'comment_created': datetime.datetime(2021, 2, 18, 10, 55, 51, tzinfo=datetime.timezone.utc), 'commenter': 'Snorch', 'type': 'User'}, {'comment_id': 578343613, 'comment_body': 'Strange offsets -> Please left-allign names of struct members with tabs.', 'comment_created': datetime.datetime(2021, 2, 18, 11, 32, 6, tzinfo=datetime.timezone.utc), 'commenter': 'Snorch', 'type': 'User'}, {'comment_id': 578346046, 'comment_body': ""This is wrong, You don't want to cleanup hlist like this.\r\n\r\nYou should use hlist_for_each_entry_safe and delete entries from hlist for consistency before you free them."", 'comment_created': datetime.datetime(2021, 2, 18, 11, 36, 15, tzinfo=datetime.timezone.utc), 'commenter': 'Snorch', 'type': 'User'}, {'comment_id': 578356150, 'comment_body': 'You should ""return 1;"" instead of ""return -1;"" in both cases above. If new process arrives which was not noticed in previous predump we should just make a full memory image for it without using previous predumps, and we don\'t want to fail in this case.\r\n\r\nAlso please use pr_warn instead of pr_err.\r\n\r\n""return -1;"" is used to report some internal error, 0 is for non-reuse, 1 for reuse cases.', 'comment_created': datetime.datetime(2021, 2, 18, 11, 53, 21, tzinfo=datetime.timezone.utc), 'commenter': 'Snorch', 'type': 'User'}, {'comment_id': 610662043, 'comment_body': 'You have some formatting problems (likely missing tab):\r\n\r\n```\r\n__NR_clone3             435             sys_clone3              (struct clone_args *uargs, size_t size)\r\n__NR_pidfd_open 434             sys_pidfd_open          (pid_t pid, unsigned int flags)\r\n__NR_pidfd_getfd        438             sys_pidfd_getfd         (int pidfd, int targetfd, unsigned int flags)\r\n```\r\n\r\nSame applies to all definitions of __NR_pidfd_open in other architectures. Note that in previous version you had this tab.', 'comment_created': datetime.datetime(2021, 4, 9, 14, 16, 4, tzinfo=datetime.timezone.utc), 'commenter': 'Snorch', 'type': 'User'}, {'comment_id': 610677690, 'comment_body': 'Your function always return 0, so you can make it void and remove error checking like:\r\n\r\n```\r\nif (!ret)\r\n        kerndat_has_pidfd_open();\r\n```', 'comment_created': datetime.datetime(2021, 4, 9, 14, 36, 11, tzinfo=datetime.timezone.utc), 'commenter': 'Snorch', 'type': 'User'}, {'comment_id': 610688281, 'comment_body': 'When val_b != val_a, that means tha some unexpected problem unrelated to pidfd_getfd support happened, would be better to set ret = -1 instead of has_pidfd_getfd = false.', 'comment_created': datetime.datetime(2021, 4, 9, 14, 48, 18, tzinfo=datetime.timezone.utc), 'commenter': 'Snorch', 'type': 'User'}, {'comment_id': 610689879, 'comment_body': ""Let's check that we wrote the right size:\r\n```\r\nif (write(fd, &val_a, sizeof(val_a)) != sizeof(val_a)) {\r\n```\r\n\r\nSame applies to read() below."", 'comment_created': datetime.datetime(2021, 4, 9, 14, 50, 23, tzinfo=datetime.timezone.utc), 'commenter': 'Snorch', 'type': 'User'}, {'comment_id': 610704417, 'comment_body': 'This close overrides the errno of syscall. And the pr_perror below would print wrong errno. Probably it\'s better to instead do:\r\n\r\n```\r\n+       pidfd_store_sk = syscall(SYS_pidfd_getfd, pidfd, sk, 0);\r\n+       if (pidfd_store_sk == -1) {\r\n+               pr_perror(""Can\'t steal fd %d using pidfd_getfd"", sk);\r\n+               close(pidfd);\r\n+               goto err;\r\n+       }\r\n+       close(pidfd);\r\n```\r\n\r\n', 'comment_created': datetime.datetime(2021, 4, 9, 15, 9, 21, tzinfo=datetime.timezone.utc), 'commenter': 'Snorch', 'type': 'User'}, {'comment_id': 610717611, 'comment_body': 'I would prefer doing close_safe(&pidfd_store_sk) before opening it, because we can have some leftover from pervious iterations of pre-dump/dump, I see that you do close_safe(&pidfd_store_sk); in free_pidfd_store() but it is only done in the last patch, so after ""cr-service: add pidfd_store_sk option to rpc.proto"" but before ""criu: add pidfd based pid reuse detection for RPC clients"" we can see situations where this pidfd_store_sk is not -1 and is open fd...', 'comment_created': datetime.datetime(2021, 4, 9, 15, 27, 19, tzinfo=datetime.timezone.utc), 'commenter': 'Snorch', 'type': 'User'}, {'comment_id': 610722679, 'comment_body': 'Probably some reasonable limit on polling restarts would be nice here.', 'comment_created': datetime.datetime(2021, 4, 9, 15, 34, 23, tzinfo=datetime.timezone.utc), 'commenter': 'Snorch', 'type': 'User'}, {'comment_id': 610723613, 'comment_body': 'Space at the end of line.', 'comment_created': datetime.datetime(2021, 4, 9, 15, 35, 42, tzinfo=datetime.timezone.utc), 'commenter': 'Snorch', 'type': 'User'}, {'comment_id': 610728860, 'comment_body': '```\r\nif (!entry)\r\n    close(pidfd);\r\n```', 'comment_created': datetime.datetime(2021, 4, 9, 15, 43, 10, tzinfo=datetime.timezone.utc), 'commenter': 'Snorch', 'type': 'User'}, {'comment_id': 610729032, 'comment_body': '```\r\nif (!entry)\r\n    close(pidfd);\r\n```\r\nElse you would leak it.', 'comment_created': datetime.datetime(2021, 4, 9, 15, 43, 24, tzinfo=datetime.timezone.utc), 'commenter': 'Snorch', 'type': 'User'}, {'comment_id': 642011963, 'comment_body': '@ZeyadYasser could you address this comment?', 'comment_created': datetime.datetime(2021, 5, 30, 3, 21, 57, tzinfo=datetime.timezone.utc), 'commenter': 'avagin', 'type': 'User'}, {'comment_id': 642012333, 'comment_body': ""poll with the zero timeout can't return EINTR, can it?"", 'comment_created': datetime.datetime(2021, 5, 30, 3, 27, 13, tzinfo=datetime.timezone.utc), 'commenter': 'avagin', 'type': 'User'}, {'comment_id': 642019793, 'comment_body': 'if (entry == NULL) ...', 'comment_created': datetime.datetime(2021, 5, 30, 5, 7, 21, tzinfo=datetime.timezone.utc), 'commenter': 'avagin', 'type': 'User'}, {'comment_id': 642038955, 'comment_body': ""@avagin I don't understand what is the problem, could you please clarify?"", 'comment_created': datetime.datetime(2021, 5, 30, 8, 12, 4, tzinfo=datetime.timezone.utc), 'commenter': 'ZeyadYasser', 'type': 'User'}, {'comment_id': 642038959, 'comment_body': '@avagin I encountered this behavior before once when polling with zero timeout in Golang, This was most likely due to the Go runtime bombarding the thread with ```SIGURG```. I am not sure if there is a scenario where CRIU would receive a high frequency of signals that would cause zero timeout poll to interrupt, so I went with the safe route.\r\n\r\nYour perspective on this would be highly valuble.', 'comment_created': datetime.datetime(2021, 5, 30, 8, 12, 8, tzinfo=datetime.timezone.utc), 'commenter': 'ZeyadYasser', 'type': 'User'}, {'comment_id': 642038996, 'comment_body': ""@avagin I not sure why github didn't reflect the change in the conversation, but I updated that part using ```hlist_for_each_entry_safe```. Also I just noticed that I need to reset the heads of each hlist ```INIT_HLIST_HEAD```,  thanks for pointing it out.\r\nhttps://github.com/checkpoint-restore/criu/pull/1341/files#diff-b6aa45df2259d449d7828c7a5ed410a3282d977aa73607e6111808016dd3e2d3R150"", 'comment_created': datetime.datetime(2021, 5, 30, 8, 12, 19, tzinfo=datetime.timezone.utc), 'commenter': 'ZeyadYasser', 'type': 'User'}, {'comment_id': 642314033, 'comment_body': ""@avagin Looks like it actually can return EINTR.\r\n\r\n```\r\ndo_poll()\r\n{\r\n...\r\n                if (!count) {\r\n                        count = wait->error;\r\n                        if (signal_pending(current))\r\n                                count = -ERESTARTNOHAND;\r\n                }\r\n}\r\n```\r\nhttps://github.com/torvalds/linux/blob/8124c8a6b35386f73523d27eacb71b5364a68c4c/fs/select.c#L935\r\n\r\nIf signal_pending is true. I don't see any explicit protection from it. I not clearly, but also remember that I faced this kinda thing."", 'comment_created': datetime.datetime(2021, 5, 31, 8, 33, 25, tzinfo=datetime.timezone.utc), 'commenter': 'Snorch', 'type': 'User'}, {'comment_id': 642317426, 'comment_body': '@ZeyadYasser you should check error on allocation.', 'comment_created': datetime.datetime(2021, 5, 31, 8, 38, 42, tzinfo=datetime.timezone.utc), 'commenter': 'Snorch', 'type': 'User'}, {'comment_id': 642344280, 'comment_body': 'e.g., something like this\r\n```C\r\nentry = xmalloc(sizeof(struct pidfd_entry));\r\nif (entry == NULL) {\r\n    return -1;\r\n}', 'comment_created': datetime.datetime(2021, 5, 31, 9, 17, 42, tzinfo=datetime.timezone.utc), 'commenter': 'rst0git', 'type': 'User'}, {'comment_id': 642598073, 'comment_body': 'Ok, I had to be more detailed. I actually mean that it will not return EINTR if there is any event. ', 'comment_created': datetime.datetime(2021, 5, 31, 16, 45, 53, tzinfo=datetime.timezone.utc), 'commenter': 'avagin', 'type': 'User'}, {'comment_id': 642861318, 'comment_body': '@ZeyadYasser Anyway, the code in check_pidfd_entry_state() is badly broken. Shame on me that I initially missed it...\r\n\r\n!!!!One should never rely on errno if libc syscall is successful!!!!\r\n\r\nImagine on the first iteration you get no event and a signal and thus get errno == EINTR or errno was already EINTR before we even started poll-ing because of previous calls, then all later iterations would be successful but errno would still continue to be EINTR, and we would cycle 10 times for no reason.\r\n\r\nAlso it is known practice for glibc to set errno to some error even in case of successful glibc syscall, because it can do ""retries"" inside glibc and first try may set errno, while second try would be successful.\r\n\r\nProbably it was the case with Golang too, I\'ve seen places in docker code where they forget to check retcode and wrongly rely on errno =)\r\n\r\n(upd) So we should check ret too, will send a patch.\r\n(upd2) Patch https://github.com/checkpoint-restore/criu/pull/1494', 'comment_created': datetime.datetime(2021, 6, 1, 7, 45, 29, tzinfo=datetime.timezone.utc), 'commenter': 'Snorch', 'type': 'User'}, {'comment_id': 643130078, 'comment_body': ""My bad, I didn't know that a call could be successful and errno not changing.\r\nThank you"", 'comment_created': datetime.datetime(2021, 6, 1, 13, 59, 24, tzinfo=datetime.timezone.utc), 'commenter': 'ZeyadYasser', 'type': 'User'}]","[{'commit_sha': 'e26631effb100a5286df95ba721a36586285f573', 'committer_username': 'ZeyadYasser', 'committer_name': 'Zeyad Yasser', 'committer_email': 'zeyady98@gmail.com', 'commit_date': datetime.datetime(2015, 8, 2, 15, 47, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f553da5ed5a337d9c3731377361973b1cd250816', 'committer_username': 'ZeyadYasser', 'committer_name': 'Zeyad Yasser', 'committer_email': 'zeyady98@gmail.com', 'commit_date': datetime.datetime(2015, 8, 2, 15, 47, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': '62f99ff2a8b6eda2f7a0405f403f450e68d61537', 'committer_username': 'ZeyadYasser', 'committer_name': 'Zeyad Yasser', 'committer_email': 'zeyady98@gmail.com', 'commit_date': datetime.datetime(2015, 8, 2, 15, 47, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e9ca35802059e80d8936138bd9efbfd2bb2aa0cf', 'committer_username': 'ZeyadYasser', 'committer_name': 'Zeyad Yasser', 'committer_email': 'zeyady98@gmail.com', 'commit_date': datetime.datetime(2015, 8, 2, 15, 47, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': '24fa6f6f4f337ed36b1b10b21b58cc0b3756d7e9', 'committer_username': 'ZeyadYasser', 'committer_name': 'Zeyad Yasser', 'committer_email': 'zeyady98@gmail.com', 'commit_date': datetime.datetime(2015, 8, 2, 15, 47, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': '86ecce2657b04037a879c18683de13111b963726', 'committer_username': 'ZeyadYasser', 'committer_name': 'Zeyad Yasser', 'committer_email': 'zeyady98@gmail.com', 'commit_date': datetime.datetime(2015, 8, 2, 15, 47, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aa3e624271ab9f3ca95a259b63fcb5e9d004ec93', 'committer_username': 'ZeyadYasser', 'committer_name': 'Zeyad Yasser', 'committer_email': 'zeyady98@gmail.com', 'commit_date': datetime.datetime(2015, 8, 2, 15, 47, 28, tzinfo=datetime.timezone.utc)}]",Zeyad Yasser,13612175,zeyady98@gmail.com,User,,22,,112,58
402371202,Optimize find_unix_sk_by_ino(),"Optimize find_unix_sk_by_ino().
Replaced the linear search with a hashtable lookup.
Fixes #339",True,1020,https://api.github.com/repos/checkpoint-restore/criu/pulls/1020,https://github.com/checkpoint-restore/criu/pull/1020,closed,21,1,3,1,6,13,0,0,[],2020-04-12 17:22:26+00:00,2020-05-31 09:22:58+00:00,4204832.0,"48 days, 16:00:32","[{'comment_id': 407455033, 'comment_body': 'NIT: as I can see `add_socket_table_entry` always returns 0, so, we could use `void` as a return type for it.', 'comment_created': datetime.datetime(2020, 4, 13, 12, 28, 55, tzinfo=datetime.timezone.utc), 'commenter': 'mihalicyn', 'type': 'User'}, {'comment_id': 407466741, 'comment_body': ""I think it doesn't make sense to add fake sockets to sockets hashtable, because all fake sockets have the same inode number (0) and we use fake sockets only as queuers (and we search for it by using `find_queuer_for` function)."", 'comment_created': datetime.datetime(2020, 4, 13, 13, 1, 28, tzinfo=datetime.timezone.utc), 'commenter': 'mihalicyn', 'type': 'User'}, {'comment_id': 407946560, 'comment_body': 'hlist_for_each_entry', 'comment_created': datetime.datetime(2020, 4, 14, 8, 10, 53, tzinfo=datetime.timezone.utc), 'commenter': 'Snorch', 'type': 'User'}, {'comment_id': 407948726, 'comment_body': 'hlist_add_head', 'comment_created': datetime.datetime(2020, 4, 14, 8, 14, 22, tzinfo=datetime.timezone.utc), 'commenter': 'Snorch', 'type': 'User'}, {'comment_id': 407948801, 'comment_body': 'hlist_node', 'comment_created': datetime.datetime(2020, 4, 14, 8, 14, 30, tzinfo=datetime.timezone.utc), 'commenter': 'Snorch', 'type': 'User'}, {'comment_id': 407948881, 'comment_body': 'hlist_node', 'comment_created': datetime.datetime(2020, 4, 14, 8, 14, 39, tzinfo=datetime.timezone.utc), 'commenter': 'Snorch', 'type': 'User'}, {'comment_id': 407953412, 'comment_body': 'hlist_head', 'comment_created': datetime.datetime(2020, 4, 14, 8, 22, 14, tzinfo=datetime.timezone.utc), 'commenter': 'Snorch', 'type': 'User'}, {'comment_id': 408329236, 'comment_body': 'Thanks for the advice, I will try doing this, just one question.\r\nShould the lookup table be initialized to NULL like [here](https://github.com/checkpoint-restore/criu/blob/328c1d540df827fa5abfbbc2056b7cdcb0648818/criu/files.c#L66)? I am asking because the previous implementation for socket_desc was not initializing the table and the tests passed successfully.\r\nIf it needs initialization, I am guessing that could be done [here](https://github.com/checkpoint-restore/criu/blob/328c1d540df827fa5abfbbc2056b7cdcb0648818/criu/files.c#L1749), please correct me if I am wrong.', 'comment_created': datetime.datetime(2020, 4, 14, 17, 57, 51, tzinfo=datetime.timezone.utc), 'commenter': 'ZeyadYasser', 'type': 'User'}, {'comment_id': 408445368, 'comment_body': ""@Snorch \r\nI faced a problem, I can't use `struct unix_sk_info` from `sockets.c` because it is only defined in `sk_unix.c`.\r\nI am thinking of two solutions:\r\n1. This is a workaround and I think it is ugly:\r\n- Add a function to get the `hlist_head` by ino.\r\n- Then `hlist_for_each_entry` to get the `struct unix_sk_info` entry in `sk_unix.c`.\r\n2. Another solution is leaving the hashtable implementation for `struct socket_desc` as it was originally and creating a table in `sk_unix.c` only for `struct unix_sk_info`, this is not generalized but will work well.\r\n\r\nbtw I think `container_of` could be used `struct socket_table_entry` if we don't want it to be always be the first member.\r\nmaybe something like this:\r\n```c\r\n#define table_entry(ptr, type, member) container_of(ptr,type,member)\r\n```\r\nI could also use `hlist_node` as the linked list for `socket_table_entry`\r\n\r\nWhat is your opinion? Any suggestions?"", 'comment_created': datetime.datetime(2020, 4, 14, 21, 25, 47, tzinfo=datetime.timezone.utc), 'commenter': 'ZeyadYasser', 'type': 'User'}, {'comment_id': 408669066, 'comment_body': "">Should the lookup table be initialized to NULL ...\r\n\r\nTechnically for file_desc_hash we can skip it because global variables are zero-initialized. But for me personally explicitly using INIT_HLIST_HEAD protects us from any internal changes in hlist (which will likely never happen I  know, but to be on the safe side).\r\n\r\n>I am guessing that could be done here ...\r\n\r\nInitializing hlists in prepare_files looks like a right place on restore, but you miss dump.\r\n\r\n>I faced a problem, I can't use struct unix_sk_info from sockets.c because it is only defined in sk_unix.c. 1. ... 2. ...\r\n\r\nI like (2) we don't want both unix_sk_info-s and socket_desc-s in one list anyway, why not separating lists for readability.\r\n\r\nYou should likely resurect find_unix_sk_by_ino, it will lookup through unix_sk_info-s and lookup_socket_ino will lookup through socket_desc-s. Something like:\r\n\r\n```\r\nstatic struct hlist_head sockets[SK_HASH_SIZE];\r\n\r\nstruct unix_sk_info {\r\n\t...\r\n\tstruct hlist_node h;\r\n};\r\n\r\n\r\nstatic struct unix_sk_info *find_unix_sk_by_ino(int ino)\r\n{\r\n\tstruct unix_sk_info *ui;\r\n\r\n\thlist_for_each_entry(ui, &sockets[ino % SK_HASH_SIZE], h) {\r\n\t\tif (ui->ue->ino == ino)\r\n\t\t\t...\r\n\t}\r\n\t...\r\n}\r\n\r\nstruct socket_desc{\r\n\t...\r\n\tstruct hlist_node h;\r\n};\r\n\r\nstatic struct socket_desc *lookup_socket_ino(int ino)\r\n{\r\n\tstruct socket_desc *d;\r\n\r\n\thlist_for_each_entry(d, &sockets[ino % SK_HASH_SIZE], h) {\r\n\t\tif (d->ino == ino)\r\n\t\t\t...\r\n\t}\r\n\t...\r\n}\r\n```"", 'comment_created': datetime.datetime(2020, 4, 15, 8, 27, 49, tzinfo=datetime.timezone.utc), 'commenter': 'Snorch', 'type': 'User'}, {'comment_id': 409164713, 'comment_body': 'Done, But I think we should keep the PR focused on one thing at a time.\r\nI only optimized ```find_unix_sk_by_ino()```, I think a separate PR should be made to refactor other hashtable implementations, like [this](https://github.com/checkpoint-restore/criu/blob/996a11d708fd5a5fc6166fe8cfaee80095e920a3/criu/sockets.c#L428) and [this](https://github.com/checkpoint-restore/criu/blob/996a11d708fd5a5fc6166fe8cfaee80095e920a3/criu/sk-unix.c#L118).\r\nThanks for the advice.', 'comment_created': datetime.datetime(2020, 4, 15, 22, 11, 54, tzinfo=datetime.timezone.utc), 'commenter': 'ZeyadYasser', 'type': 'User'}, {'comment_id': 409341386, 'comment_body': 'Looks like you add to the hlist before hlist initialization:\r\n\r\n```\r\ncr_restore_tasks\r\n| crtools_prepare_shared\r\n|   prepare_files\r\n|     collect_image(&files_cinfo)\r\n|       collect_one_file\r\n|         collect_one_file_entry(&unix_sk_cinfo)\r\n|           collect_one_unixsk\r\n|             hlist_add_head(&sk_info_hash)\r\n|\r\n+-restore_root_task\r\n    fork_with_pid\r\n      restore_task_with_children\r\n        if (current->parent == NULL) # root task\r\n          root_prepare_shared\r\n            unix_prepare_root_shared\r\n              INIT_HLIST_HEAD(&sk_info_hash)\r\n```\r\n\r\n>Initializing hlists in prepare_files looks like a right place on restore, but you miss dump.\r\n\r\nYou can add new init_sk_info_hash() helper and call it from there.', 'comment_created': datetime.datetime(2020, 4, 16, 7, 32, 48, tzinfo=datetime.timezone.utc), 'commenter': 'Snorch', 'type': 'User'}, {'comment_id': 409343549, 'comment_body': 'Extra space in the end of the line.', 'comment_created': datetime.datetime(2020, 4, 16, 7, 36, 38, tzinfo=datetime.timezone.utc), 'commenter': 'Snorch', 'type': 'User'}]","[{'commit_sha': 'd27c0ef0118b873db4e54e50189cf8fdfe34261d', 'committer_username': 'ZeyadYasser', 'committer_name': 'Zeyad Yasser', 'committer_email': 'zeyady98@gmail.com', 'commit_date': datetime.datetime(2015, 8, 2, 15, 47, 28, tzinfo=datetime.timezone.utc)}]",Zeyad Yasser,13612175,zeyady98@gmail.com,User,,22,,112,58
628301847,zdtm: add network namespace locking test,"This test would be useful when testing that the network is locked using different ways (using iptables currently and eBPF later).

When CRIU dumps a process in a network namespace it locks the network so that no packets from peer enters the stack, otherwise RST will be sent by a kernel causing the connection to fail.

In netns_lock.c we try to enter the netns created by post-start hook so that criu locks the network namespace between dump and restore.

A TCP server is started in post-start hook inside the test netns and runs in the background detached from its parent so that it stays alive for the duration of the test.

Other hooks (pre-dump, pre-restore, post-restore) try to connect to the server.

Pre-dump and post-restore hooks should be able to connect successfully.

Pre-restore hook should not be able to connect but also it should not get connection refused as all packets are dropped in the namespace so the kernel shouldn't send an RST packet as a result. Instead we check that the connect operation causes a timeout.",True,1465,https://api.github.com/repos/checkpoint-restore/criu/pulls/1465,https://github.com/checkpoint-restore/criu/pull/1465,closed,222,0,4,1,5,8,0,0,[],2021-05-01 01:39:27+00:00,2021-06-25 05:18:02+00:00,4765115.0,"55 days, 3:38:35","[{'comment_id': 624474853, 'comment_body': 'There are a few other tests related to network namesapce. Could you please move this one up?\r\n```diff\r\n                uffd-events                     \\\r\n                thread_different_uid_gid        \\\r\n                pipe03                          \\\r\n+               netns_lock                      \\\r\n                netns_sub                       \\\r\n                netns_sub_veth                  \\\r\n                netns_sub_sysctl        \\\r\n```', 'comment_created': datetime.datetime(2021, 5, 1, 9, 34, 53, tzinfo=datetime.timezone.utc), 'commenter': 'rst0git', 'type': 'User'}, {'comment_id': 624476327, 'comment_body': 'To avoid duplicating this line, we could move it inside the loop, just before the first if statement.\r\n\r\n```diff\r\n         * a timeout.\r\n         */\r\n \r\n-       ns_fd = open(NS_PATH, O_RDONLY);\r\n        for (i = 0; i < MAX_RETRY; i++) {\r\n+               ns_fd = open(NS_PATH, O_RDONLY);\r\n                if (ns_fd < 0) {\r\n                        if (errno == ENOENT) {\r\n                                /* Netns is not created yet by post-start hook */\r\n                                sleep(1);\r\n-                               ns_fd = open(NS_PATH, O_RDONLY);\r\n                                continue;\r\n                        }\r\n                        pr_perror(""can\'t open network ns"");\r\n```', 'comment_created': datetime.datetime(2021, 5, 1, 9, 47, 32, tzinfo=datetime.timezone.utc), 'commenter': 'rst0git', 'type': 'User'}, {'comment_id': 624476340, 'comment_body': 'These two lines could also be removed as the same check is done outside the loop.', 'comment_created': datetime.datetime(2021, 5, 1, 9, 47, 35, tzinfo=datetime.timezone.utc), 'commenter': 'rst0git', 'type': 'User'}, {'comment_id': 624484315, 'comment_body': 'Python has a [`with`](https://www.python.org/dev/peps/pep-0343/) statement that could handle exceptions to ensure closing the file descriptor\r\n```py\r\nwith open(""/var/run/netns/{}"".format(NETNS)) as f:\r\n    libc.setns(f.fileno(), CLONE_NEWNET)\r\n```', 'comment_created': datetime.datetime(2021, 5, 1, 10, 1, tzinfo=datetime.timezone.utc), 'commenter': 'rst0git', 'type': 'User'}, {'comment_id': 636709970, 'comment_body': 'Missing `>` after email.', 'comment_created': datetime.datetime(2021, 5, 21, 7, 48, 2, tzinfo=datetime.timezone.utc), 'commenter': 'Snorch', 'type': 'User'}, {'comment_id': 636726541, 'comment_body': ""We can remove --join-ns from dump ops, as we don't nedd it on dump.\r\n```--- a/test/zdtm/static/netns_lock.desc\r\n+++ b/test/zdtm/static/netns_lock.desc\r\n@@ -1,4 +1,5 @@\r\n {\r\n     'flavor': 'h',\r\n-    'opts': '--tcp-established --join-ns net:/var/run/netns/criu-net-lock-test'\r\n+    'opts': '--tcp-established',\r\n+    'ropts': '--join-ns net:/var/run/netns/criu-net-lock-test'\r\n }\r\n```"", 'comment_created': datetime.datetime(2021, 5, 21, 8, 14, 46, tzinfo=datetime.timezone.utc), 'commenter': 'Snorch', 'type': 'User'}, {'comment_id': 636752447, 'comment_body': ""Probably we can move test_init() up into begining of main() so that we actually enter netns from final dumpable process and not from some intermediate helper. Note that this would also make you add `'flags': 'suid'` to test description file explicitly and not implicitly when helper process is not yet switched user ids, we need to have `suid` for nsenter."", 'comment_created': datetime.datetime(2021, 5, 21, 8, 53, 33, tzinfo=datetime.timezone.utc), 'commenter': 'Snorch', 'type': 'User'}, {'comment_id': 642648991, 'comment_body': ""This is wrong, I shouldn't exit in case of success here. Test that the non-SOCCR_MARK connection fails first"", 'comment_created': datetime.datetime(2021, 5, 31, 19, 25, 21, tzinfo=datetime.timezone.utc), 'commenter': 'ZeyadYasser', 'type': 'User'}]","[{'commit_sha': '8c599e9693677efad58e0863777fe6ab1f9394e6', 'committer_username': 'ZeyadYasser', 'committer_name': 'Zeyad Yasser', 'committer_email': 'zeyady98@gmail.com', 'commit_date': datetime.datetime(2015, 8, 2, 15, 47, 28, tzinfo=datetime.timezone.utc)}]",Zeyad Yasser,13612175,zeyady98@gmail.com,User,,22,,112,58
683222356,[GSoC] Add nftables based network locking/unlocking,"## Overview

During checkpointing and restoring, CRIU locks the network to make sure no TCP packets are accepted by the network stack during the time the process is checkpointed (to avoid the kernel from sending a RST packet).
Currently CRIU calls out to ```iptables-restore``` to create and delete the corresponding iptables rules (external binary).

This approach uses ```nftables``` as a replacement for ```iptables-restore```.
Using ```libnftables``` eliminates the external ```iptables-restore``` binary dependency, also ```nftables``` is much more efficient than ```iptables```.


## Proposed design

### Kerndat

*Check needed kernel features exist*
Check that nftables [concatenations](https://wiki.nftables.org/wiki-nftables/index.php/Concatenations) is supported [has_nftables_concat]

### Feature check
`criu check --feature network-lock-nftables`

Add ability to check if nftables based locking/unlocking is possible.
This would typically check the corresponding kerndat fields.

### Add --network-lock option

After nftables based locking/unlocking we would have two values available for this option (`iptables` and `nftables`)
It would be better to default to `iptables` until nftables method is tested thoroughly.
e.g.
`criu dump -t 2221 --tcp-established --network-lock iptables`
`criu dump -t 2221 --tcp-established --network-lock nftables`

Corresponding RPC and libcriu option must be added.

### Algorithm flow

I want to use the same hooks that invoke iptables locking/unlocking.
i.e. `network_lock_internal`, `network_unlock_internal` for network-wide case
`nf_lock_connection` for per-socket case (could be renamed to `lock_connection`)

Note: Per-socket rule should be loaded in `network_lock`, `lock_connection` will just add connection tuple entries to the associated nftables set.

CRIU could just decide in those hooks which method should be used based on ```--network-lock``` option.

```c
if (opts.network_lock_method == NETWORK_LOCK_IPTABLES)
	ret |= iptables_network_unlock_internal();
else if (opts.network_lock_method == NETWORK_LOCK_NFTABLES)
	ret |= nftables_network_unlock_internal();
```

This flow would centralize network locking/unlocking in those hooks and avoid forgetting using one or the other anywhere in the source code, both should have identical behavior anyway and should be interchangeable seamlessly with the ```--network-lock``` option.

#### Locking (netns-wide)

1. Create a table named CRIU
    Similar to `nft add table inet CRIU`
2. Create INPUT/OUTPUT chains with a default *""drop""* policy
    Similar to `nft add chain inet CRIU output { type filter hook output priority 0 ; policy drop; }`
3. Create a rule to *""accept""* packets with SOCCR_MARK
    Similar to `nft add rule inet CRIU output meta mark 0xC114 accept`

#### Locking (per-socket)

**Preparation**

1. Create a table named CRIU
    Similar to `nft add table inet CRIU`
2. Create INPUT/OUTPUT chains
    Similar to `nft add chain inet CRIU output { type filter hook output priority 0 }`
3. Create a rule to *""accept""* packets with SOCCR_MARK
    Similar to `nft add rule inet CRIU output meta mark 0xC114 accept`
4. Create connections set, which should contain connection identifying tuples (*src_addr, src_port, dst_addr, dst_port*)
    This is possible due to concatenations support for nftables sets which requires kernel â‰¥ 4.1 [https://wiki.nftables.org/wiki-nftables/index.php/Concatenations](https://wiki.nftables.org/wiki-nftables/index.php/Concatenations).
     Similar to `nft add set inet CRIU conns { type ipv4_addr . inet_service . ipv4_addr . inet_service ;}`
5. Create a rule to *""drop""* packets that match connections in the `conns` set
    Similar to `nft add rule inet CRIU output ip saddr . tcp sport . ip daddr . tcp dport @conns drop`

Note: A separate set/rule is needed for IPv6.

**Locking one socket**

CRIU just needs to add the connection identifying tuple to the `conns` set in `nftables_lock_connection`.
Similar to `nft add element inet CRIU conns { 192.168.1.96 . 46315 . 1.1.1.1 . 53 }`
Nftables sets are very efficient and avoids adding a separate rule for each connection, we only need to add connection entries to the `conns` set.

#### Unlocking

With nftables the process is much easier, we only need to delete the CRIU table and that is it.
Similar to `nft delete table inet CRIU`

## Progress
- [x] Network-wide locking test #1465 
- [x] Add ```--network-lock``` option
- [x] Feature check
- [x] Nftables based network-wide locking
- [x] Per-socket locking tests
- [x] Nftables based per-socket locking
",True,1539,https://api.github.com/repos/checkpoint-restore/criu/pulls/1539,https://github.com/checkpoint-restore/criu/pull/1539,closed,724,41,36,12,27,40,0,0,[],2021-07-04 19:07:23+00:00,2021-08-17 15:50:42+00:00,3789799.0,"43 days, 20:43:19","[{'comment_id': 666592786, 'comment_body': 'We also need to add a description in `criu --help` and [`man criu`](https://github.com/checkpoint-restore/criu/blob/f29a02a395083941fea8d5f09ccf7efacdd60836/Documentation/criu.txt)', 'comment_created': datetime.datetime(2021, 7, 9, 0, 18, 17, tzinfo=datetime.timezone.utc), 'commenter': 'rst0git', 'type': 'User'}, {'comment_id': 666593921, 'comment_body': 'I think the following message would be more descriptive\r\n```\r\npr_err(""Invalid value for --network-lock: %s\\n"", optarg);\r\n```', 'comment_created': datetime.datetime(2021, 7, 9, 0, 22, 11, tzinfo=datetime.timezone.utc), 'commenter': 'rst0git', 'type': 'User'}, {'comment_id': 666869322, 'comment_body': ""I was thinking of adding that later when I add the ```--network-lock nftables``` option, but now that you pointed it out, I think I should add the ```nftables``` option + help/docs here because the rest depends on the option's existence anyway.\r\nI will update it right away."", 'comment_created': datetime.datetime(2021, 7, 9, 11, 9, 19, tzinfo=datetime.timezone.utc), 'commenter': 'ZeyadYasser', 'type': 'User'}, {'comment_id': 667171352, 'comment_body': 'This could be simplified to something like:\r\n```C\r\nint criu_local_set_network_lock(criu_opts *opts, enum criu_network_lock_method method)\r\n{\r\n\tint ret = -1;\r\n\r\n\tif (method == CRIU_NETWORK_LOCK_IPTABLES || method == CRIU_NETWORK_LOCK_NFTABLES) {\r\n\t\topts->rpc->has_network_lock = true;\r\n\t\topts->rpc->network_lock = (CriuNetworkLockMethod)method;\r\n\t\tret = 0;\r\n\t}\r\n\r\n\treturn ret;\r\n}\r\n```', 'comment_created': datetime.datetime(2021, 7, 9, 19, 36, 2, tzinfo=datetime.timezone.utc), 'commenter': 'rst0git', 'type': 'User'}, {'comment_id': 667175987, 'comment_body': 'When `NFT_RUN_CMD()` fails here, `kdat.has_nftables_concat` would remain set to `true`.', 'comment_created': datetime.datetime(2021, 7, 9, 19, 46, 15, tzinfo=datetime.timezone.utc), 'commenter': 'rst0git', 'type': 'User'}, {'comment_id': 667178213, 'comment_body': 'Could you please change the indentation on these lines to tabs?', 'comment_created': datetime.datetime(2021, 7, 9, 19, 50, 56, tzinfo=datetime.timezone.utc), 'commenter': 'rst0git', 'type': 'User'}, {'comment_id': 667180512, 'comment_body': 'It would be better to use a different name here because `free` is a function defined in `stdlib.h`. For example:\r\n```diff\r\n-free:\r\n+out:\r\n```', 'comment_created': datetime.datetime(2021, 7, 9, 19, 55, 54, tzinfo=datetime.timezone.utc), 'commenter': 'rst0git', 'type': 'User'}, {'comment_id': 671726559, 'comment_body': 'These `SO_MARK` and `SOCCR_MARK` constants are not used.', 'comment_created': datetime.datetime(2021, 7, 17, 18, 5, 19, tzinfo=datetime.timezone.utc), 'commenter': 'rst0git', 'type': 'User'}, {'comment_id': 671726619, 'comment_body': '`subprocess` is not used', 'comment_created': datetime.datetime(2021, 7, 17, 18, 6, 21, tzinfo=datetime.timezone.utc), 'commenter': 'rst0git', 'type': 'User'}, {'comment_id': 671728006, 'comment_body': 'It would be better to add a prefix to the test name, because ""lock"" could mean something else (e.g. file lock).\r\nFor example: `net_lock_socket_iptables`.', 'comment_created': datetime.datetime(2021, 7, 17, 18, 19, 56, tzinfo=datetime.timezone.utc), 'commenter': 'rst0git', 'type': 'User'}, {'comment_id': 671728222, 'comment_body': 'It would be more reliable to check for a `pass` message instead.\r\n```diff\r\n-if status == ""fail"":\r\n+if status != ""pass"":\r\n```', 'comment_created': datetime.datetime(2021, 7, 17, 18, 21, 51, tzinfo=datetime.timezone.utc), 'commenter': 'rst0git', 'type': 'User'}, {'comment_id': 671728943, 'comment_body': 'It would be better to move the sync file deletion inside `wait_sync_file()`, just before `return`.', 'comment_created': datetime.datetime(2021, 7, 17, 18, 29, 35, tzinfo=datetime.timezone.utc), 'commenter': 'rst0git', 'type': 'User'}, {'comment_id': 671729335, 'comment_body': '`raise TimeoutError(""Sync timeout: file ({}) not found"".format(SYNCFILE))`', 'comment_created': datetime.datetime(2021, 7, 17, 18, 33, 58, tzinfo=datetime.timezone.utc), 'commenter': 'rst0git', 'type': 'User'}, {'comment_id': 671738455, 'comment_body': 'We could add an error message here. It might be helpful when debugging.\r\n```\r\npr_err(""Failed to lock TCP connection\\n"");\r\n```', 'comment_created': datetime.datetime(2021, 7, 17, 20, 9, 14, tzinfo=datetime.timezone.utc), 'commenter': 'rst0git', 'type': 'User'}, {'comment_id': 673498537, 'comment_body': ""```diff\r\n@@ -408,7 +408,7 @@ By default the option is set to *fpu* and *ins*.\r\n     Set the method to be used to validate open files. Validation is done\r\n     to ensure that the version of the file being restored is the same\r\n     version when it was dumped.\r\n-\r\n++\r\n The 'mode' may be one of the following:\r\n \r\n     *filesize*:::\r\n@@ -426,16 +426,13 @@ The 'mode' may be one of the following:\r\n     done to avoid the kernel sending RST when a packet arrives destined for\r\n     the dumped process.\r\n \r\n++\r\n The 'mode' may be one of the following:\r\n \r\n-    *iptables*:::\r\n-                Iptables rules are used to drop the packets. 'iptables-restore'\r\n-                executable is required. This is the default if mode is\r\n-                unspecified.\r\n+    *iptables*::: Use iptables rules to drop the packets.\r\n+    This is the default if 'mode' is not specified.\r\n \r\n-    *nftables*:::\r\n-                Nftables rules are used to drop the packets. 'libnftables' is\r\n-                required at compile time.\r\n+    *nftables*::: Use nftables rules to drop the packets.\r\n \r\n *restore*\r\n ~~~~~~~~~\r\n```\r\n\r\n>'libnftables' is required at compile time.\r\n\r\nand\r\n>'iptables-restore' executable is required.\r\n\r\nare not necessary in the man page because these are dependencies, usually described on this page:\r\nhttps://criu.org/Installation"", 'comment_created': datetime.datetime(2021, 7, 20, 21, 14, 40, tzinfo=datetime.timezone.utc), 'commenter': 'rst0git', 'type': 'User'}, {'comment_id': 673513140, 'comment_body': '>CRIU was built without libnftables support\r\n\r\nThis message may appear when CRIU is installed from a package.', 'comment_created': datetime.datetime(2021, 7, 20, 21, 41, 38, tzinfo=datetime.timezone.utc), 'commenter': 'rst0git', 'type': 'User'}, {'comment_id': 673513983, 'comment_body': '>CRIU was built without libnftables support\r\n\r\nThis message may appear when CRIU has been installed from a package.\r\n', 'comment_created': datetime.datetime(2021, 7, 20, 21, 43, 23, tzinfo=datetime.timezone.utc), 'commenter': 'rst0git', 'type': 'User'}, {'comment_id': 673515225, 'comment_body': '> CRIU was built without libnftables support\r\n\r\nThis message may appear when CRIU is installed from a package.\r\n', 'comment_created': datetime.datetime(2021, 7, 20, 21, 46, 2, tzinfo=datetime.timezone.utc), 'commenter': 'rst0git', 'type': 'User'}, {'comment_id': 673516303, 'comment_body': '\r\n>CRIU was built without libnftables support\r\n\r\nThis message may appear when CRIU is installed from a package.\r\n', 'comment_created': datetime.datetime(2021, 7, 20, 21, 48, 2, tzinfo=datetime.timezone.utc), 'commenter': 'rst0git', 'type': 'User'}, {'comment_id': 673518244, 'comment_body': 'To make debugging easier, it might be better to split this into two `if` conditions:\r\n```C\r\nif (!inet_ntop(family, (void *)src_addr, sip, INET_ADDR_LEN)) {\r\n    pr_perror(""nf: Can\'t convert src ip addr"");\r\n    return -1;\r\n}\r\n\r\nif (!inet_ntop(family, (void *)dst_addr, dip, INET_ADDR_LEN)) {\r\n    pr_perror(""nf: Can\'t convert dst ip addr"");\r\n    return -1;\r\n}\r\n```', 'comment_created': datetime.datetime(2021, 7, 20, 21, 51, 48, tzinfo=datetime.timezone.utc), 'commenter': 'rst0git', 'type': 'User'}, {'comment_id': 673518570, 'comment_body': '\r\n> CRIU was built without libnftables support\r\n\r\nThis message may appear when CRIU is installed from a package.\r\n', 'comment_created': datetime.datetime(2021, 7, 20, 21, 52, 35, tzinfo=datetime.timezone.utc), 'commenter': 'rst0git', 'type': 'User'}, {'comment_id': 674299019, 'comment_body': 'I am not sure I understand clearly, Do you mean the message should appear when CRIU is installed from a package manager?', 'comment_created': datetime.datetime(2021, 7, 21, 20, 9, 17, tzinfo=datetime.timezone.utc), 'commenter': 'ZeyadYasser', 'type': 'User'}, {'comment_id': 674505450, 'comment_body': 'There are some indentation issues in the `man criu` page, but we could fix them in another PR.\r\n\r\n![Screenshot](https://user-images.githubusercontent.com/9142901/126592670-e1e3efda-e88e-486b-8326-bcb06d0abcd3.png)\r\n', 'comment_created': datetime.datetime(2021, 7, 22, 5, 14, 33, tzinfo=datetime.timezone.utc), 'commenter': 'rst0git', 'type': 'User'}, {'comment_id': 674510034, 'comment_body': 'No. I meant to say that I think we could make the following change:\r\n```diff\r\n-pr_err(""CRIU must be compiled with libnftables support\\n"");\r\n+pr_err(""CRIU was built without libnftables support\\n"");\r\n```\r\nThe reason is because when CRIU is installed from a package (e.g. `apt-get install criu`) this message may appear to a user who hasn\'t compiled it.', 'comment_created': datetime.datetime(2021, 7, 22, 5, 30, 47, tzinfo=datetime.timezone.utc), 'commenter': 'rst0git', 'type': 'User'}, {'comment_id': 676199850, 'comment_body': ""Hmm, the tests are passing when I run them with multiple iterations locally.\r\n\r\n```console\r\nsudo ./zdtm.py run -T 'zdtm/static/net_lock_socket_*' --parallel 4 --iter 3\r\n\r\nChecking feature network_lock_nftables\r\nnetwork_lock_nftables is supported\r\nuserns is supported\r\n=== Run 1/2 ========-------- zdtm/static/net_lock_socket_nftables\r\ntimens isn't supported on 5.13.4-200.fc34.x86_64\r\n================ Run zdtm/static/net_lock_socket_nftables in h =================\r\nStart test\r\nTest is SUID\r\n./net_lock_socket_nftables --pidfile=net_lock_socket_nftables.pid --outfile=net_lock_socket_nftables.out\r\nRunning zdtm/static/net_lock_socket_nftables.hook(--post-start)\r\nRunning zdtm/static/net_lock_socket_nftables.hook(--pre-dump)\r\nRun criu dump\r\nRunning zdtm/static/net_lock_socket_nftables.hook(--pre-restore)\r\nRun criu restore\r\nRunning zdtm/static/net_lock_socket_nftables.hook(--post-restore)\r\nRunning zdtm/static/net_lock_socket_nftables.hook(--pre-dump)\r\nRun criu dump\r\nRunning zdtm/static/net_lock_socket_nftables.hook(--pre-restore)\r\nRun criu restore\r\nRunning zdtm/static/net_lock_socket_nftables.hook(--post-restore)\r\nRunning zdtm/static/net_lock_socket_nftables.hook(--pre-dump)\r\nRun criu dump\r\nRunning zdtm/static/net_lock_socket_nftables.hook(--pre-restore)\r\nRun criu restore\r\nRunning zdtm/static/net_lock_socket_nftables.hook(--post-restore)\r\nSend the 15 signal to  57\r\nWait for zdtm/static/net_lock_socket_nftables(57) to die for 0.100000\r\nRunning zdtm/static/net_lock_socket_nftables.hook(--clean)\r\nRemoving dump/zdtm/static/net_lock_socket_nftables/57\r\n================ Test zdtm/static/net_lock_socket_nftables PASS ================\r\n\r\nuserns is supported\r\n=== Run 2/2 ================ zdtm/static/net_lock_socket_iptables\r\ntimens isn't supported on 5.13.4-200.fc34.x86_64\r\n================ Run zdtm/static/net_lock_socket_iptables in h =================\r\nStart test\r\nTest is SUID\r\n./net_lock_socket_iptables --pidfile=net_lock_socket_iptables.pid --outfile=net_lock_socket_iptables.out\r\nRunning zdtm/static/net_lock_socket_iptables.hook(--post-start)\r\nRunning zdtm/static/net_lock_socket_iptables.hook(--pre-dump)\r\nRun criu dump\r\nRunning zdtm/static/net_lock_socket_iptables.hook(--pre-restore)\r\nRun criu restore\r\nRunning zdtm/static/net_lock_socket_iptables.hook(--post-restore)\r\nRunning zdtm/static/net_lock_socket_iptables.hook(--pre-dump)\r\nRun criu dump\r\nRunning zdtm/static/net_lock_socket_iptables.hook(--pre-restore)\r\nRun criu restore\r\nRunning zdtm/static/net_lock_socket_iptables.hook(--post-restore)\r\nRunning zdtm/static/net_lock_socket_iptables.hook(--pre-dump)\r\nRun criu dump\r\nRunning zdtm/static/net_lock_socket_iptables.hook(--pre-restore)\r\nRun criu restore\r\nRunning zdtm/static/net_lock_socket_iptables.hook(--post-restore)\r\nSend the 15 signal to  57\r\nWait for zdtm/static/net_lock_socket_iptables(57) to die for 0.100000\r\nRunning zdtm/static/net_lock_socket_iptables.hook(--clean)\r\nRemoving dump/zdtm/static/net_lock_socket_iptables/57\r\n================ Test zdtm/static/net_lock_socket_iptables PASS ================\r\n```"", 'comment_created': datetime.datetime(2021, 7, 25, 20, 43, 13, tzinfo=datetime.timezone.utc), 'commenter': 'rst0git', 'type': 'User'}, {'comment_id': 676825563, 'comment_body': 'I am sorry, this is my bad. I assumed that it would fail the same as the netns tests did.', 'comment_created': datetime.datetime(2021, 7, 26, 17, 59, 21, tzinfo=datetime.timezone.utc), 'commenter': 'ZeyadYasser', 'type': 'User'}, {'comment_id': 680557087, 'comment_body': 'unnecessary `elif` and `else` after return:\r\n```python\r\nif addr == ""ipv4"":\r\n    return ""127.0.0.1""\r\n\r\nif addr == ""ipv6"":\r\n    return ""::1""\r\n\r\nraise ValueError(""Invalid address type"")\r\n```', 'comment_created': datetime.datetime(2021, 8, 1, 19, 48, 15, tzinfo=datetime.timezone.utc), 'commenter': 'rst0git', 'type': 'User'}, {'comment_id': 680560359, 'comment_body': 'to avoid duplicating `ret = -1;`, it could be moved after the `err:` label', 'comment_created': datetime.datetime(2021, 8, 1, 20, 15, 11, tzinfo=datetime.timezone.utc), 'commenter': 'rst0git', 'type': 'User'}, {'comment_id': 680776926, 'comment_body': 'ctx should always be freed not on failure only.', 'comment_created': datetime.datetime(2021, 8, 2, 8, 30, 37, tzinfo=datetime.timezone.utc), 'commenter': 'ZeyadYasser', 'type': 'User'}, {'comment_id': 686004175, 'comment_body': ""nit: don't we want to add `unshare(CLONE_NEWNET)` to prevent any collisions here?"", 'comment_created': datetime.datetime(2021, 8, 10, 13, 13, 38, tzinfo=datetime.timezone.utc), 'commenter': 'mihalicyn', 'type': 'User'}, {'comment_id': 686008194, 'comment_body': 'nit: `|=` not needed here', 'comment_created': datetime.datetime(2021, 8, 10, 13, 17, 52, tzinfo=datetime.timezone.utc), 'commenter': 'mihalicyn', 'type': 'User'}, {'comment_id': 686017229, 'comment_body': '`pr_warn` for the first message, and `pr_info` for the second, IMHO', 'comment_created': datetime.datetime(2021, 8, 10, 13, 26, 50, tzinfo=datetime.timezone.utc), 'commenter': 'mihalicyn', 'type': 'User'}, {'comment_id': 686033939, 'comment_body': 'nit: `|=` -> `=`', 'comment_created': datetime.datetime(2021, 8, 10, 13, 45, 11, tzinfo=datetime.timezone.utc), 'commenter': 'mihalicyn', 'type': 'User'}, {'comment_id': 686042529, 'comment_body': 'what about `pr_err(""Failed to lock TCP connection %x\\n"", sk->sd.ino);`?', 'comment_created': datetime.datetime(2021, 8, 10, 13, 54, 16, tzinfo=datetime.timezone.utc), 'commenter': 'mihalicyn', 'type': 'User'}, {'comment_id': 686045201, 'comment_body': '`pr_err(""Failed to unlock TCP connection %x\\n"", sk->sd.ino);` just to be consistent.\r\nalso looks line `errno` is not valid here, so `pr_perror` makes no sense', 'comment_created': datetime.datetime(2021, 8, 10, 13, 56, 56, tzinfo=datetime.timezone.utc), 'commenter': 'mihalicyn', 'type': 'User'}, {'comment_id': 687125425, 'comment_body': ""I can add it, but I think it wouldn't collide with anything, since no filtering rules are added (only a test set is created) which is added to separate CRIU table.\r\nHaving two instances of CRIU running at the same time would be a problem since the table name will for sure collide, I think actually that would also be the case during normal locking/unlocking like [here](https://github.com/checkpoint-restore/criu/pull/1539/files/1d7d0d252e350c0ec4f441c5b95dbb9ce6f99b02#diff-ffdccecb1d7573f5f13830e82a1b1c6e200f33b3bdb934ea9add47d68ad23406R3028). Is that a use case I should consider?"", 'comment_created': datetime.datetime(2021, 8, 11, 19, 46, 37, tzinfo=datetime.timezone.utc), 'commenter': 'ZeyadYasser', 'type': 'User'}, {'comment_id': 687155132, 'comment_body': 'It looks like the only difference between `add table inet CRIU` and `create table inet CRIU` is that the former will not return an error if the table already exists while `create` will return an error.\r\n\r\nTo avoid collisions we could replace `add` with `create` and append the PID number specified with `-t` (`--tree`) to the table name. However, the table name may not be unique when CRIU runs in unshared PID namespace where the network namespace is shared (e.g., a container inside pod).', 'comment_created': datetime.datetime(2021, 8, 11, 20, 15, 57, tzinfo=datetime.timezone.utc), 'commenter': 'rst0git', 'type': 'User'}, {'comment_id': 692882404, 'comment_body': 'I believe that there is still a race window here... One kerndat_has_nftables_concat can remove the table under another kerndat_has_nftables_concat, and another would fail on no table and wrongly set kdat.has_nftables_concat = false and will save it to kerndat cache.\r\n\r\nActually running multiple migrations of different containers in parallel can be quite a usecase for cloud cluster load balancing.', 'comment_created': datetime.datetime(2021, 8, 20, 11, 46, 28, tzinfo=datetime.timezone.utc), 'commenter': 'Snorch', 'type': 'User'}, {'comment_id': 693019862, 'comment_body': 'kerndat is cached, so it has to be collected once. But I agree that this looks like a race and we need to generate a unique name for this test table.', 'comment_created': datetime.datetime(2021, 8, 20, 15, 6, 43, tzinfo=datetime.timezone.utc), 'commenter': 'avagin', 'type': 'User'}, {'comment_id': 693497141, 'comment_body': 'Thank you for pointing this out. https://github.com/checkpoint-restore/criu/pull/1588', 'comment_created': datetime.datetime(2021, 8, 22, 12, 46, 4, tzinfo=datetime.timezone.utc), 'commenter': 'ZeyadYasser', 'type': 'User'}]","[{'commit_sha': '65cd4632ef301877e4a6671c3146e3d9fd720992', 'committer_username': 'ZeyadYasser', 'committer_name': 'Zeyad Yasser', 'committer_email': 'zeyady98@gmail.com', 'commit_date': datetime.datetime(2015, 8, 2, 15, 47, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': '906df7e92ff9590d2cc5c43e3f134c78e6473e7c', 'committer_username': 'ZeyadYasser', 'committer_name': 'Zeyad Yasser', 'committer_email': 'zeyady98@gmail.com', 'commit_date': datetime.datetime(2015, 8, 2, 15, 47, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': '804505025e57f25ed5b4a289b6dbdd74947ac00b', 'committer_username': 'ZeyadYasser', 'committer_name': 'Zeyad Yasser', 'committer_email': 'zeyady98@gmail.com', 'commit_date': datetime.datetime(2015, 8, 2, 15, 47, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1a4c9f22a18715478d7669ff2bc86c91725174b0', 'committer_username': 'ZeyadYasser', 'committer_name': 'Zeyad Yasser', 'committer_email': 'zeyady98@gmail.com', 'commit_date': datetime.datetime(2015, 8, 2, 15, 47, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cd996901e7468fc02853cd822195f90a8ec7f6ab', 'committer_username': 'ZeyadYasser', 'committer_name': 'Zeyad Yasser', 'committer_email': 'zeyady98@gmail.com', 'commit_date': datetime.datetime(2015, 8, 2, 15, 47, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': '12c0d0d36f53251a7a685bb903a902152dc2956a', 'committer_username': 'ZeyadYasser', 'committer_name': 'Zeyad Yasser', 'committer_email': 'zeyady98@gmail.com', 'commit_date': datetime.datetime(2015, 8, 2, 15, 47, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': '917c23cf724f52b17c3e9f751bcd3b44289c4a4f', 'committer_username': 'ZeyadYasser', 'committer_name': 'Zeyad Yasser', 'committer_email': 'zeyady98@gmail.com', 'commit_date': datetime.datetime(2015, 8, 2, 15, 47, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8f4165635ed7dab141f5a056852f4784b662656d', 'committer_username': 'ZeyadYasser', 'committer_name': 'Zeyad Yasser', 'committer_email': 'zeyady98@gmail.com', 'commit_date': datetime.datetime(2015, 8, 2, 15, 47, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': '40d4d8c8b39d40a8c403bdf1a938fec6d1678417', 'committer_username': 'ZeyadYasser', 'committer_name': 'Zeyad Yasser', 'committer_email': 'zeyady98@gmail.com', 'commit_date': datetime.datetime(2015, 8, 2, 15, 47, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8c955802a9c98dcbafd0af1af13d30dfc4a3da56', 'committer_username': 'ZeyadYasser', 'committer_name': 'Zeyad Yasser', 'committer_email': 'zeyady98@gmail.com', 'commit_date': datetime.datetime(2015, 8, 2, 15, 47, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0be34d778fa19781e8a8861adaa502037cbe1020', 'committer_username': 'ZeyadYasser', 'committer_name': 'Zeyad Yasser', 'committer_email': 'zeyady98@gmail.com', 'commit_date': datetime.datetime(2015, 8, 2, 15, 47, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0b80768ad74f770ff62841612ac67c664c7bc7b9', 'committer_username': 'ZeyadYasser', 'committer_name': 'Zeyad Yasser', 'committer_email': 'zeyady98@gmail.com', 'commit_date': datetime.datetime(2015, 8, 2, 15, 47, 28, tzinfo=datetime.timezone.utc)}]",Zeyad Yasser,13612175,zeyady98@gmail.com,User,,22,,112,58

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
15999638,criu,checkpoint-restore/criu,C,570,2816,67,206,11469,211,10,26,"[{'id': 717304206, 'number': 1588, 'closed': datetime.datetime(2021, 8, 27, 10, 19, 17, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 22, 12, 44, 18, tzinfo=datetime.timezone.utc), 'time_taken': 423299.0, 'time_delta': '4 days, 21:34:59', 'additions': 35, 'deletions': 10, 'state': 'closed'}, {'id': 714541314, 'number': 1583, 'closed': datetime.datetime(2021, 8, 17, 21, 41, 16, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 17, 20, 22, 8, tzinfo=datetime.timezone.utc), 'time_taken': 4748.0, 'time_delta': '1:19:08', 'additions': 6, 'deletions': 6, 'state': 'closed'}, {'id': 695020634, 'number': 1561, 'closed': datetime.datetime(2021, 7, 25, 13, 29, 4, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 22, 9, 45, 55, tzinfo=datetime.timezone.utc), 'time_taken': 272589.0, 'time_delta': '3 days, 3:43:09', 'additions': 79, 'deletions': 26, 'state': 'closed'}, {'id': 683222356, 'number': 1539, 'closed': datetime.datetime(2021, 8, 17, 15, 50, 42, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 4, 19, 7, 23, tzinfo=datetime.timezone.utc), 'time_taken': 3789799.0, 'time_delta': '43 days, 20:43:19', 'additions': 724, 'deletions': 41, 'state': 'closed'}, {'id': 678919123, 'number': 1531, 'closed': datetime.datetime(2021, 7, 5, 6, 30, 29, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 28, 10, 29, 3, tzinfo=datetime.timezone.utc), 'time_taken': 590486.0, 'time_delta': '6 days, 20:01:26', 'additions': 39, 'deletions': 26, 'state': 'closed'}, {'id': 677016804, 'number': 1528, 'closed': datetime.datetime(2021, 7, 5, 12, 29, 45, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 24, 11, 11, 11, tzinfo=datetime.timezone.utc), 'time_taken': 955114.0, 'time_delta': '11 days, 1:18:34', 'additions': 357, 'deletions': 314, 'state': 'closed'}, {'id': 628301847, 'number': 1465, 'closed': datetime.datetime(2021, 6, 25, 5, 18, 2, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 5, 1, 1, 39, 27, tzinfo=datetime.timezone.utc), 'time_taken': 4765115.0, 'time_delta': '55 days, 3:38:35', 'additions': 222, 'deletions': 0, 'state': 'closed'}, {'id': 594154003, 'number': 1409, 'closed': datetime.datetime(2021, 3, 24, 7, 27, 44, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 3, 16, 18, 43, 54, tzinfo=datetime.timezone.utc), 'time_taken': 650630.0, 'time_delta': '7 days, 12:43:50', 'additions': 3, 'deletions': 2, 'state': 'closed'}, {'id': 560582030, 'number': 1343, 'closed': datetime.datetime(2021, 3, 14, 21, 41, 24, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 1, 24, 11, 1, 39, tzinfo=datetime.timezone.utc), 'time_taken': 4271985.0, 'time_delta': '49 days, 10:39:45', 'additions': 2, 'deletions': 0, 'state': 'closed'}, {'id': 560105747, 'number': 1341, 'closed': datetime.datetime(2021, 5, 31, 16, 52, 59, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 1, 22, 17, 25, 44, tzinfo=datetime.timezone.utc), 'time_taken': 11143635.0, 'time_delta': '128 days, 23:27:15', 'additions': 476, 'deletions': 2, 'state': 'closed'}, {'id': 402371202, 'number': 1020, 'closed': datetime.datetime(2020, 5, 31, 9, 22, 58, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 4, 12, 17, 22, 26, tzinfo=datetime.timezone.utc), 'time_taken': 4204832.0, 'time_delta': '48 days, 16:00:32', 'additions': 21, 'deletions': 1, 'state': 'closed'}, {'id': 402240985, 'number': 1019, 'closed': datetime.datetime(2020, 4, 11, 23, 55, 45, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 4, 11, 20, 10, 25, tzinfo=datetime.timezone.utc), 'time_taken': 13520.0, 'time_delta': '3:45:20', 'additions': 64, 'deletions': 32, 'state': 'closed'}]"
