pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
966382606,Synchronization,"<!--

Thank you for opening a new PR to the Unikraft Open Source Project!  We welcome
new changes, features, fixes, and more!  Please fill in this form to indicate
the status of your PR.  Please ensure you have read the contribution guidelines
before opening a new PR as this will cover the PR process:

  https://unikraft.org/docs/contributing/

-->

### Prerequisite checklist

<!--
Please mark items appropriately:
-->

 - [x] Read the [contribution guidelines](https://unikraft.org/docs/contributing/) regarding submitting new changes to the project;
 - [x] Tested your changes against relevant architectures and platforms;
 - [x] Ran the [`checkpatch.pl`](https://github.com/unikraft/unikraft/blob/staging/support/scripts/checkpatch.pl) on your commit series before opening this PR;
 - [ ] Updated relevant documentation.


### Base target

 - Architecture(s): x86_64, arm64
 - Platform(s): N/A
 - Application(s): N/A


<!--
Please specify any additional configuration which is needed for this feature to
work or any new configuration parameters which are introduced by this PR.  This
will help during the review process.  For example:

 - `CONFIG_LIBUKDEBUG=y`

-->


<!--
Please provide a detailed description of the changes made in this new PR.
-->
### Description

The pull request introduces irq save API for the spinlock as well as SMP safe mutex implementation.
Previously for UP arch, the Mutex disabled the interrupt, this implementation also synchronized the wait queue. 
Along with this the previous implementation also used the two conditions to indicate the lock that lock is free, which was
`owner == current || lock_count == 0
`
but if we observe closely we can separate these conditions since if the owner is the current thread then we can increment the lock count, otherwise, we can wait for the current to be null and can acquire the lock. This implementation does not disable interrupts but we can definitely introduce an API that does. 
One requirement of this commit is that we need to separately implement the SMP safe wait queue. currently, these wait queue is only used in uklock lib but SMP safe wait queues can be used anywhere in the kernel. ",False,476,https://api.github.com/repos/unikraft/unikraft/pulls/476,https://github.com/unikraft/unikraft/pull/476,closed,553,82,13,7,16,131,11,1,"[{'name': 'area/arch'}, {'name': 'area/plat'}, {'name': 'area/lib'}, {'name': 'lib/uklock'}, {'name': 'lib/uksched'}, {'name': 'release-note'}, {'name': 'lang/c'}, {'name': 'ci/merged'}, {'name': 'area/include'}, {'name': 'topic/smp'}, {'name': 'gsoc22'}]",2022-06-14 02:45:08+00:00,2023-05-13 18:24:19+00:00,28827551.0,"333 days, 15:39:11","[{'comment_id': 1000210570, 'comment_body': 'Hi @Sairajkodilkar,\r\n\r\nis there still a bug here? What is the problem?', 'comment_created': datetime.datetime(2022, 10, 20, 6, 52, 7, tzinfo=datetime.timezone.utc), 'commenter': 'marcrittinghaus', 'type': 'User'}, {'comment_id': 1000212916, 'comment_body': 'Remove the trailing returns as we do not have them anywhere else.', 'comment_created': datetime.datetime(2022, 10, 20, 6, 55, tzinfo=datetime.timezone.utc), 'commenter': 'marcrittinghaus', 'type': 'User'}, {'comment_id': 1000213789, 'comment_body': '```suggestion\r\n#endif /* CONFIG_RWLOCK_WRITE_RECURSE */\r\n```\r\n\r\nAlways add a comment to the endif with the condition', 'comment_created': datetime.datetime(2022, 10, 20, 6, 56, 1, tzinfo=datetime.timezone.utc), 'commenter': 'marcrittinghaus', 'type': 'User'}, {'comment_id': 1000214026, 'comment_body': 'Is this still needed?', 'comment_created': datetime.datetime(2022, 10, 20, 6, 56, 18, tzinfo=datetime.timezone.utc), 'commenter': 'marcrittinghaus', 'type': 'User'}, {'comment_id': 1000214885, 'comment_body': 'There seems to be a space too many.', 'comment_created': datetime.datetime(2022, 10, 20, 6, 57, 18, tzinfo=datetime.timezone.utc), 'commenter': 'marcrittinghaus', 'type': 'User'}, {'comment_id': 1000215173, 'comment_body': '```suggestion\r\n * Perform an atomic add/sub and fetch operation\r\n```', 'comment_created': datetime.datetime(2022, 10, 20, 6, 57, 37, tzinfo=datetime.timezone.utc), 'commenter': 'marcrittinghaus', 'type': 'User'}, {'comment_id': 1000215505, 'comment_body': 'Let us discuss. What was your question here?', 'comment_created': datetime.datetime(2022, 10, 20, 6, 58, tzinfo=datetime.timezone.utc), 'commenter': 'marcrittinghaus', 'type': 'User'}, {'comment_id': 1000228360, 'comment_body': ""My gut feeling here is that disabling (the) IRQ should be done by the user if needed and not generally in every case.\r\n\r\nBut if you have something like:\r\n```C\r\nflags = ukplat_lcpu_save_irqf();\r\nuk_mutex_lock(&mutex);\r\n/* do something */\r\nuk_mutex_unlock(&mutex);\r\nukplat_lcpu_restore_irqf(flags);\r\n```\r\nand you don't get the mutex and would block, it is really bad that IRQs are turned off as long as you block (which might actually also deadlock the system).\r\n\r\nNevertheless, acquiring a mutex in an IRQ handler is not a great idea anyways and the proper way would be to use a spinlock with `uk_spin_lock_irqf()` instead."", 'comment_created': datetime.datetime(2022, 10, 20, 7, 12, 51, tzinfo=datetime.timezone.utc), 'commenter': 'marcrittinghaus', 'type': 'User'}, {'comment_id': 1000229726, 'comment_body': 'Looking at the changes to the waitqueue below, I guess this is done by now?', 'comment_created': datetime.datetime(2022, 10, 20, 7, 14, 22, tzinfo=datetime.timezone.utc), 'commenter': 'marcrittinghaus', 'type': 'User'}, {'comment_id': 1000231544, 'comment_body': 'I am wondering if it makes sense to globally enable/disable this. Because if you want to use it in a single place this will affect all locks in the system, which might also hide bugs or trigger unexpected or unintended behavior.\r\n\r\nWould it be possible to decide on a per-lock basis, when initializing the lock?', 'comment_created': datetime.datetime(2022, 10, 20, 7, 16, 24, tzinfo=datetime.timezone.utc), 'commenter': 'marcrittinghaus', 'type': 'User'}, {'comment_id': 1000233338, 'comment_body': 'Regarding changes in `uksched` we should wait for the sched/musl changes being upstream and then adapt as necessary.', 'comment_created': datetime.datetime(2022, 10, 20, 7, 18, 22, tzinfo=datetime.timezone.utc), 'commenter': 'marcrittinghaus', 'type': 'User'}, {'comment_id': 1000234810, 'comment_body': 'I am wondering if it really makes sense to still have these functions as `static inline`, as they are much longer than for mutex/semaphore.', 'comment_created': datetime.datetime(2022, 10, 20, 7, 19, 54, tzinfo=datetime.timezone.utc), 'commenter': 'marcrittinghaus', 'type': 'User'}, {'comment_id': 1089723451, 'comment_body': 'With regard to the commit messages, in general, can you please double-check them and, where it is needed, can you please adjust the text e.g. remove duplicate wording, focus more on the why & what for the proposed changes, can replace ""This commit <adds / provides / other action> ..."" with ""Add / Provide / Other action ..."", fix typos. If not already aware of this reference - https://cbea.ms/git-commit/, could check this out.\r\n\r\nFor example: ""Add a spinlock API to save and restore the irq flags"".\r\n\r\nAlso, can you please include in the PR overview description the details of the testing that you\'ve done so far (e.g. scenarios, commands used).\r\n\r\nThank you.', 'comment_created': datetime.datetime(2023, 1, 28, 12, 5, 10, tzinfo=datetime.timezone.utc), 'commenter': 'andraprs', 'type': 'User'}, {'comment_id': 1089724716, 'comment_body': 'Shouldn\'t this be ""irqf"", similar to the other changes in this commit?\r\n\r\nSame for the change below.', 'comment_created': datetime.datetime(2023, 1, 28, 12, 16, 26, tzinfo=datetime.timezone.utc), 'commenter': 'andraprs', 'type': 'User'}, {'comment_id': 1089777883, 'comment_body': 'Can remove ""Here"" from the beginning of this sentence.', 'comment_created': datetime.datetime(2023, 1, 28, 17, 14, 34, tzinfo=datetime.timezone.utc), 'commenter': 'andraprs', 'type': 'User'}, {'comment_id': 1089779861, 'comment_body': 'As per the initial comment from my side, could modify, for example, this commit message to ""Update the UKARCH_SPINLOCK_INITIALIZER macro to set the irq flags to 0."".', 'comment_created': datetime.datetime(2023, 1, 28, 17, 32, 51, tzinfo=datetime.timezone.utc), 'commenter': 'andraprs', 'type': 'User'}, {'comment_id': 1089781636, 'comment_body': 'Here should be ""(lock)->irqf"", as per the other changes in this commit, for these macros.', 'comment_created': datetime.datetime(2023, 1, 28, 17, 47, 27, tzinfo=datetime.timezone.utc), 'commenter': 'andraprs', 'type': 'User'}, {'comment_id': 1089786429, 'comment_body': 'Please let us know if there are any updates about this.', 'comment_created': datetime.datetime(2023, 1, 28, 18, 2, 54, tzinfo=datetime.timezone.utc), 'commenter': 'andraprs', 'type': 'User'}, {'comment_id': 1089787918, 'comment_body': 'Can you please squash the following commit ""arch/\\*, lib/uklock, include/uk/arch/spinlock.h: Change the spinlock IRQ API"" with ""arch/\\*, lib/uklock: Add save irqf API for the spinlock "", ""arch/*: Remove irqf initialization from uk_spin_init "", and keep the latest version of the API.', 'comment_created': datetime.datetime(2023, 1, 28, 18, 15, 48, tzinfo=datetime.timezone.utc), 'commenter': 'andraprs', 'type': 'User'}, {'comment_id': 1089789542, 'comment_body': 'Unrelated change. Same for the ones below, if they are not only shown by the codebase preview on the web page and they are actual changes.', 'comment_created': datetime.datetime(2023, 1, 28, 18, 30, 22, tzinfo=datetime.timezone.utc), 'commenter': 'andraprs', 'type': 'User'}, {'comment_id': 1089789565, 'comment_body': 'Unrelated change.', 'comment_created': datetime.datetime(2023, 1, 28, 18, 30, 46, tzinfo=datetime.timezone.utc), 'commenter': 'andraprs', 'type': 'User'}, {'comment_id': 1089789659, 'comment_body': 'Unrelated change.', 'comment_created': datetime.datetime(2023, 1, 28, 18, 31, 28, tzinfo=datetime.timezone.utc), 'commenter': 'andraprs', 'type': 'User'}, {'comment_id': 1089789723, 'comment_body': 'Unrelated change.', 'comment_created': datetime.datetime(2023, 1, 28, 18, 32, 6, tzinfo=datetime.timezone.utc), 'commenter': 'andraprs', 'type': 'User'}, {'comment_id': 1089790084, 'comment_body': 'Unrelated change.', 'comment_created': datetime.datetime(2023, 1, 28, 18, 35, 34, tzinfo=datetime.timezone.utc), 'commenter': 'andraprs', 'type': 'User'}, {'comment_id': 1089790992, 'comment_body': 'Should include the license / copyright header(s) in all new files. One example of the header can be found in: https://github.com/unikraft/unikraft/blob/staging/lib/uklock/include/uk/spinlock.h.', 'comment_created': datetime.datetime(2023, 1, 28, 18, 44, 17, tzinfo=datetime.timezone.utc), 'commenter': 'andraprs', 'type': 'User'}, {'comment_id': 1089795981, 'comment_body': 'Can squash commit ""lib/uklock: Add lock function for reader and writer"" with ""lib/uklock: Correct the function name"", to have the corresponding function names in one commit.', 'comment_created': datetime.datetime(2023, 1, 28, 19, 9, 16, tzinfo=datetime.timezone.utc), 'commenter': 'andraprs', 'type': 'User'}, {'comment_id': 1089797129, 'comment_body': 'Please include a commit message description for the following commit: ""lib/uklock: Add the priority for writer locks"".', 'comment_created': datetime.datetime(2023, 1, 28, 19, 15, 19, tzinfo=datetime.timezone.utc), 'commenter': 'andraprs', 'type': 'User'}, {'comment_id': 1089798102, 'comment_body': 'Should explain in the commit message which is the bug that is fixed in the following commit: ""lib/uklock: Resolve the bug in reader writer unlock"".', 'comment_created': datetime.datetime(2023, 1, 28, 19, 22, 5, tzinfo=datetime.timezone.utc), 'commenter': 'andraprs', 'type': 'User'}, {'comment_id': 1089798785, 'comment_body': 'Should explain the fixed bugs and cleanups in this commit "" lib/uklock: Complete the implementation of lock and unlock for reader-writer"".\r\n\r\nOr, better, put together all these commits for read/write locks, the initial implementation and the fixes / cleanups. Then can split in different commits the functionality for read / write lock / unlock, that includes the latest version of the codebase, with the fixes.', 'comment_created': datetime.datetime(2023, 1, 28, 19, 28, 34, tzinfo=datetime.timezone.utc), 'commenter': 'andraprs', 'type': 'User'}, {'comment_id': 1089799837, 'comment_body': 'Should include the changes from the commit ""lib/uklock: Add the upgrade and downgrade functions for reader writer\r\nlock"", that are not related to the upgrade / downgrade functionality, in the corresponding commits for lock / unlock.', 'comment_created': datetime.datetime(2023, 1, 28, 19, 38, 4, tzinfo=datetime.timezone.utc), 'commenter': 'andraprs', 'type': 'User'}, {'comment_id': 1089800264, 'comment_body': 'The following commit ""lib/uklock, include/uk/arch/atomic.h: Add the atomic OR and remove bug in downgrade"" should be split and keep the ""OR"" functionality in a separate commit. Then include the bug fixes in the corresponding commit for the rw lock downgrade functionality. ', 'comment_created': datetime.datetime(2023, 1, 28, 19, 41, 58, tzinfo=datetime.timezone.utc), 'commenter': 'andraprs', 'type': 'User'}, {'comment_id': 1089800538, 'comment_body': 'Please include the fixes from the commit ""lib/uklock: Remove bugs in reader-writer lock"" in the corresponding commits for each functionality e.g. rw lock / unlock / upgrade / downgrade.', 'comment_created': datetime.datetime(2023, 1, 28, 19, 44, 46, tzinfo=datetime.timezone.utc), 'commenter': 'andraprs', 'type': 'User'}, {'comment_id': 1089801020, 'comment_body': 'Please include the fixes for the issues identified by checkpatch in the initial commits that introduced each functionality.', 'comment_created': datetime.datetime(2023, 1, 28, 19, 48, 6, tzinfo=datetime.timezone.utc), 'commenter': 'andraprs', 'type': 'User'}, {'comment_id': 1089801382, 'comment_body': 'Similarly as before, should include the fixes in the initial commits for the upgrade / downgrade path.', 'comment_created': datetime.datetime(2023, 1, 28, 19, 51, 56, tzinfo=datetime.timezone.utc), 'commenter': 'andraprs', 'type': 'User'}, {'comment_id': 1089802364, 'comment_body': 'The following commit ""lib/uklock: Add recursive lock configuration"" could be split in two commits, one for the mutex, one for the rw lock.', 'comment_created': datetime.datetime(2023, 1, 28, 19, 56, 18, tzinfo=datetime.timezone.utc), 'commenter': 'andraprs', 'type': 'User'}, {'comment_id': 1089803313, 'comment_body': 'This commit - ""lib/ukrust: Update ukrust to work alongside Cargo"" - and the previous one ""lib/nolibc: Add bcmp"" don\'t seem related to the PR topic, possibly they are part of a rebase.', 'comment_created': datetime.datetime(2023, 1, 28, 20, 2, 16, tzinfo=datetime.timezone.utc), 'commenter': 'andraprs', 'type': 'User'}, {'comment_id': 1089972034, 'comment_body': ""No, We don't need it, I created a separate interface for irq enable disable."", 'comment_created': datetime.datetime(2023, 1, 29, 14, 6, 21, tzinfo=datetime.timezone.utc), 'commenter': 'Sairajkodilkar', 'type': 'User'}, {'comment_id': 1089972298, 'comment_body': 'Hi @marcrittinghaus, It was a simple discussion in the early stage of development. I just remembered that I need to remove this and other TODOs. ', 'comment_created': datetime.datetime(2023, 1, 29, 14, 8, tzinfo=datetime.timezone.utc), 'commenter': 'Sairajkodilkar', 'type': 'User'}, {'comment_id': 1089974916, 'comment_body': ""Hi @marcrittinghaus, you are right that it is the programmer's job not to sleep while holding a lock or not hold a lock which is needed by an interrupt handler."", 'comment_created': datetime.datetime(2023, 1, 29, 14, 15, 35, tzinfo=datetime.timezone.utc), 'commenter': 'Sairajkodilkar', 'type': 'User'}, {'comment_id': 1089975105, 'comment_body': 'yes I added the a lock for a queue, but in future we need a SMP safe threads and scheduler', 'comment_created': datetime.datetime(2023, 1, 29, 14, 16, 40, tzinfo=datetime.timezone.utc), 'commenter': 'Sairajkodilkar', 'type': 'User'}, {'comment_id': 1089975936, 'comment_body': 'Yes, we can keep a write recurse flag along with rwlock. This flag can be configured at the time of initialization.', 'comment_created': datetime.datetime(2023, 1, 29, 14, 20, 41, tzinfo=datetime.timezone.utc), 'commenter': 'Sairajkodilkar', 'type': 'User'}, {'comment_id': 1089976282, 'comment_body': 'Yes I agree, do you have any better alternative for the owner, like a property of thread whose value is unique per thread ?', 'comment_created': datetime.datetime(2023, 1, 29, 14, 23, 5, tzinfo=datetime.timezone.utc), 'commenter': 'Sairajkodilkar', 'type': 'User'}, {'comment_id': 1089976504, 'comment_body': 'I did this because mutex and semaphore were defined in header files.\r\nI am planning to split the rwlock in the header and `.c` file.', 'comment_created': datetime.datetime(2023, 1, 29, 14, 24, 41, tzinfo=datetime.timezone.utc), 'commenter': 'Sairajkodilkar', 'type': 'User'}, {'comment_id': 1098484585, 'comment_body': 'With regard to the commit message:\r\n\r\n""Unikraft provides macros for limited number ..."" => ""Unikraft provides macros for a limited number ..."".\r\n\r\nFor the functions comment, in general, can end the sentence with a dot, if that is the coding style from the rest of the file.  For example, including the above suggested change from Marc:\r\n\r\n""Perform a atomic add/sub and fetch operation"" => ""Perform an atomic add/sub and fetch operation.""', 'comment_created': datetime.datetime(2023, 2, 7, 10, 40, 9, tzinfo=datetime.timezone.utc), 'commenter': 'andraprs', 'type': 'User'}, {'comment_id': 1098505514, 'comment_body': '""Perform the atomic OR operation and returns the old value"" => ""Perform an atomic OR operation and return the old value.""', 'comment_created': datetime.datetime(2023, 2, 7, 10, 59, 7, tzinfo=datetime.timezone.utc), 'commenter': 'andraprs', 'type': 'User'}, {'comment_id': 1098510851, 'comment_body': 'With regard to the commit message:\r\n\r\n""release the spinlock and set the interrupt flag to the value provided"" => ""Release the spinlock and set the interrupt flag to the provided value.""', 'comment_created': datetime.datetime(2023, 2, 7, 11, 4, 2, tzinfo=datetime.timezone.utc), 'commenter': 'andraprs', 'type': 'User'}, {'comment_id': 1098530577, 'comment_body': 'With regard to the commit message:\r\n\r\n""Also stack is aligned to the 4K boundary, this allows us to use the\r\nbottom 12 bit of the stack pointer to store lock specific info such as\r\nflags"" => ""Also stack is aligned to the 4K boundary. This allows us to use the\r\nbottom 12 bit of the stack pointer to store lock specific info such as\r\nflags.""', 'comment_created': datetime.datetime(2023, 2, 7, 11, 23, 17, tzinfo=datetime.timezone.utc), 'commenter': 'andraprs', 'type': 'User'}, {'comment_id': 1098534085, 'comment_body': 'There seems to be two empty lines here, unrelated to the current commit.', 'comment_created': datetime.datetime(2023, 2, 7, 11, 26, 47, tzinfo=datetime.timezone.utc), 'commenter': 'andraprs', 'type': 'User'}, {'comment_id': 1098666105, 'comment_body': 'The comment could be split in two. For example: ""If the owner is the current thread, then it definitely can\'t unlock during uk_mutex_lock. Then we can simply increment the lock count."".', 'comment_created': datetime.datetime(2023, 2, 7, 13, 33, 57, tzinfo=datetime.timezone.utc), 'commenter': 'andraprs', 'type': 'User'}, {'comment_id': 1098679792, 'comment_body': 'It depends on the coding style so far and what corresponds to each file. Could add a dot after each sentence, as a delimiter. For example: ""If there is no owner for the lock we can grab it and increment the lock count. The owner acts as the lock. We don\'t need to disable interrupts because the compare exchange is atomic even on the single processor.""', 'comment_created': datetime.datetime(2023, 2, 7, 13, 45, 29, tzinfo=datetime.timezone.utc), 'commenter': 'andraprs', 'type': 'User'}, {'comment_id': 1106719076, 'comment_body': '""recusive"" => ""recursive""', 'comment_created': datetime.datetime(2023, 2, 15, 6, 53, 22, tzinfo=datetime.timezone.utc), 'commenter': 'andraprs', 'type': 'User'}, {'comment_id': 1106720643, 'comment_body': 'The assert needs to be moved after the local variable declarations, before accessing ""rwl"".', 'comment_created': datetime.datetime(2023, 2, 15, 6, 55, 45, tzinfo=datetime.timezone.utc), 'commenter': 'andraprs', 'type': 'User'}, {'comment_id': 1106722396, 'comment_body': 'Should include the license / copyright header(s) in all new files, such as ""rwlock,h"" and ""rwlock.c"". One example of the header can be found in: https://github.com/unikraft/unikraft/blob/staging/lib/uklock/include/uk/spinlock.h.', 'comment_created': datetime.datetime(2023, 2, 15, 6, 58, 29, tzinfo=datetime.timezone.utc), 'commenter': 'andraprs', 'type': 'User'}, {'comment_id': 1106723443, 'comment_body': 'What about the changes for the ""ticketlock"" from the previous revision?', 'comment_created': datetime.datetime(2023, 2, 15, 7, 0, 10, tzinfo=datetime.timezone.utc), 'commenter': 'andraprs', 'type': 'User'}, {'comment_id': 1106724265, 'comment_body': '""synchornization"" => ""synchronization""', 'comment_created': datetime.datetime(2023, 2, 15, 7, 1, 29, tzinfo=datetime.timezone.utc), 'commenter': 'andraprs', 'type': 'User'}, {'comment_id': 1106735482, 'comment_body': 'For the overall changes from the PR, please also check the Codacy results [1] and the modifications / tags that are needed based on the ""checkpatch"" warnings.\r\n\r\n[1] https://github.com/unikraft/unikraft/pull/476/checks', 'comment_created': datetime.datetime(2023, 2, 15, 7, 17, 54, tzinfo=datetime.timezone.utc), 'commenter': 'andraprs', 'type': 'User'}, {'comment_id': 1106740340, 'comment_body': 'With regard to the commit message: \r\n\r\n""Decrease number of reader-writer flags from five"" => ""Decrease number of reader-writer flags bits from five""\r\n\r\n""in the lower five bits\r\nowner field, This was possible because stack was align to 4K and we had\r\ntweleve free bits in stack pointer. "" => ""in the lower five bits\r\nowner field. This was possible because the stack was aligned to 4K and we had\r\ntwelve free bits in the stack pointer. "".\r\n\r\nCan you also please reference in the description the commit that includes the alignment change (e.g. add commit title and commit id).', 'comment_created': datetime.datetime(2023, 2, 15, 7, 24, 8, tzinfo=datetime.timezone.utc), 'commenter': 'andraprs', 'type': 'User'}, {'comment_id': 1106743240, 'comment_body': 'With regard to the commit message: ""Hence this commits move these functions from header file to\r\nsource file"" => ""Hence this commit moves these functions from the header file to the\r\nsource file"".', 'comment_created': datetime.datetime(2023, 2, 15, 7, 27, 13, tzinfo=datetime.timezone.utc), 'commenter': 'andraprs', 'type': 'User'}, {'comment_id': 1109392246, 'comment_body': 'Just double-checking, is there any other update needed for the current implementation given this bits number decrease? (e.g. update codebase that relies on having 5 bits available)', 'comment_created': datetime.datetime(2023, 2, 17, 7, 35, 52, tzinfo=datetime.timezone.utc), 'commenter': 'andraprs', 'type': 'User'}, {'comment_id': 1109398983, 'comment_body': 'For the flags name, it should be RWLOCK instead of RW. Just to target the type of lock, as it was initially done for the Kconfig options.\r\n\r\nAnd the flags defines should be moved outside of the data structure definition, in a separate codebase block (e.g. before ""struct __align(8) uk_rwlock""). ', 'comment_created': datetime.datetime(2023, 2, 17, 7, 45, 34, tzinfo=datetime.timezone.utc), 'commenter': 'andraprs', 'type': 'User'}, {'comment_id': 1109746850, 'comment_body': 'The commit message could be updated to ""Remove compile time flags since the configuration flags are set during runtime."" .', 'comment_created': datetime.datetime(2023, 2, 17, 12, 38, 17, tzinfo=datetime.timezone.utc), 'commenter': 'andraprs', 'type': 'User'}, {'comment_id': 1109757633, 'comment_body': 'In the commit message, there should be ""UK_MUTEX_CONFIG_WRITE_RECURSE"" instead of ""UK_RW_CONFIG_WRITE_RECURSE"".', 'comment_created': datetime.datetime(2023, 2, 17, 12, 45, 54, tzinfo=datetime.timezone.utc), 'commenter': 'andraprs', 'type': 'User'}, {'comment_id': 1109762008, 'comment_body': 'Similarly in this case, the flag define should be moved outside of the data structure definition, in a separate codebase block.', 'comment_created': datetime.datetime(2023, 2, 17, 12, 49, 12, tzinfo=datetime.timezone.utc), 'commenter': 'andraprs', 'type': 'User'}, {'comment_id': 1109774053, 'comment_body': 'As for the previous occurrence, the commit message could be ""Remove compile time flags since the configuration flags are set during runtime."" .', 'comment_created': datetime.datetime(2023, 2, 17, 12, 58, 58, tzinfo=datetime.timezone.utc), 'commenter': 'andraprs', 'type': 'User'}, {'comment_id': 1109813574, 'comment_body': 'This new file also should have the license / copyright header(s).\r\n\r\nAnd a couple of notes for the commit message:\r\n\r\n* ""the lock type and function as argument. The macro then define"" => ""the lock type and function as arguments. The macro then defines"".\r\n\r\n* ""Defines a new function which saves irq flag before acquiring lock"" => ""Defines a new function which saves the irq flag before acquiring lock."" (just a ""."" at the end, the same as for the other bullet points sentences).\r\n\r\n* ""before trying to aquire the flags"" => """"before trying to acquire the flags""\r\n\r\n* ""if the lock is not aquired."" => ""if the lock is not acquired.""', 'comment_created': datetime.datetime(2023, 2, 17, 13, 31, 7, tzinfo=datetime.timezone.utc), 'commenter': 'andraprs', 'type': 'User'}, {'comment_id': 1109848880, 'comment_body': 'Should mention in the commit message the lock types e.g. ""This commit defines the irq safe interface for the mutex, rwlock and spinlock."". As, for example, the semaphore is not part of this commit.\r\n\r\n""trying to aquire a lock inside a interrupt"" => ""trying to acquire a lock inside an interrupt""', 'comment_created': datetime.datetime(2023, 2, 17, 13, 59, 2, tzinfo=datetime.timezone.utc), 'commenter': 'andraprs', 'type': 'User'}, {'comment_id': 1109857883, 'comment_body': 'This should be removed, given it is already defined in the ""lock-common"" header.', 'comment_created': datetime.datetime(2023, 2, 17, 14, 5, 50, tzinfo=datetime.timezone.utc), 'commenter': 'andraprs', 'type': 'User'}, {'comment_id': 1109868675, 'comment_body': 'A couple of notes for the commit message:\r\n\r\n* ""the owner and flags for the reader writer lock were store"" => ""the owner and flags for the reader writer lock were stored""\r\n* Could add in the commit description a reference to the commit that updated the stack alignment e.g. commit title and id.\r\n* ""separates the owner and flag field"" => ""separates the owner and flag fields""\r\n* ""new implementation uses pointer to the `struct uk_thread` as the owner of the lock"" => ""the new implementation uses a pointer to the `struct uk_thread` as the owner of the lock.""', 'comment_created': datetime.datetime(2023, 2, 17, 14, 14, 2, tzinfo=datetime.timezone.utc), 'commenter': 'andraprs', 'type': 'User'}, {'comment_id': 1109873286, 'comment_body': 'Should be included in the ""rwlock"" header file, as ""struct uk_thread"" is used there as a struct field type.', 'comment_created': datetime.datetime(2023, 2, 17, 14, 17, 35, tzinfo=datetime.timezone.utc), 'commenter': 'andraprs', 'type': 'User'}, {'comment_id': 1111459701, 'comment_body': 'Hi, Previous changes stored the interrupt flag with the lock. The new implementation provides a different interface for IRQF store and restores. Hence I restored the changes in ticketlock\r\n', 'comment_created': datetime.datetime(2023, 2, 20, 5, 7, 57, tzinfo=datetime.timezone.utc), 'commenter': 'Sairajkodilkar', 'type': 'User'}, {'comment_id': 1111461282, 'comment_body': 'No, current implementation uses only 3 bits. The remaining bits are reserved for future use.', 'comment_created': datetime.datetime(2023, 2, 20, 5, 11, 59, tzinfo=datetime.timezone.utc), 'commenter': 'Sairajkodilkar', 'type': 'User'}, {'comment_id': 1111485278, 'comment_body': 'I resolved the bug in the commit ae96713a5c8cf2535fe754d87ac1937f753f579e. But I have not tested the code.', 'comment_created': datetime.datetime(2023, 2, 20, 5, 59, 48, tzinfo=datetime.timezone.utc), 'commenter': 'Sairajkodilkar', 'type': 'User'}, {'comment_id': 1176470286, 'comment_body': 'The NEC part of the header does not make sense 😏 You can just use this one from the new coding conventions to simplify and also save some trees for people printing the code 😄🌲 \r\n\r\n```\r\n/* SPDX-License-Identifier: BSD-3-Clause */\r\n/* Copyright (c) 2023, Unikraft GmbH and The Unikraft Authors.\r\n * Licensed under the BSD-3-Clause License (the ""License"").\r\n * You may not use this file except in compliance with the License.\r\n */\r\n```', 'comment_created': datetime.datetime(2023, 4, 25, 12, 51, 4, tzinfo=datetime.timezone.utc), 'commenter': 'marcrittinghaus', 'type': 'User'}, {'comment_id': 1176472226, 'comment_body': 'Please ensure that you use 8 spaces for each tab. The `\\` should be in column 73 on all lines.', 'comment_created': datetime.datetime(2023, 4, 25, 12, 52, 41, tzinfo=datetime.timezone.utc), 'commenter': 'marcrittinghaus', 'type': 'User'}, {'comment_id': 1176478969, 'comment_body': 'See header comment.', 'comment_created': datetime.datetime(2023, 4, 25, 12, 57, 57, tzinfo=datetime.timezone.utc), 'commenter': 'marcrittinghaus', 'type': 'User'}, {'comment_id': 1176493821, 'comment_body': 'Please refrain from adding yourself as author for the existing files, if changes are marginal (e.g., if you did not completely change how things are done or added major things). Generally, we would like to get away from the authors field and use the shorter more generic header as stated in the earlier comment. The authors field is quickly outdated and does not provide information on what changes you have authored (e.g., in this case, it suggests you have introduced the whole file). Instead, your authorship is very well documented via the git history automatically.', 'comment_created': datetime.datetime(2023, 4, 25, 13, 9, 33, tzinfo=datetime.timezone.utc), 'commenter': 'marcrittinghaus', 'type': 'User'}, {'comment_id': 1176496540, 'comment_body': ""Broken indentation. Use spaces in comments to indent. Align with other authors' names."", 'comment_created': datetime.datetime(2023, 4, 25, 13, 11, 12, tzinfo=datetime.timezone.utc), 'commenter': 'marcrittinghaus', 'type': 'User'}, {'comment_id': 1176573956, 'comment_body': 'What is the reason for the `__`-function name? Besides being discouraged by the coding convention, you can just define `uk_rwlock_init_config` as the actual main function, right?!\r\n\r\n```C\r\nvoid uk_rwlock_init_config(struct uk_rwlock *rwl, uint8_t config_flags);\r\n\r\n#define uk_rwlock_init(rwl) uk_rwlock_init_config(rwl, 0)\r\n```', 'comment_created': datetime.datetime(2023, 4, 25, 14, 7, 30, tzinfo=datetime.timezone.utc), 'commenter': 'marcrittinghaus', 'type': 'User'}, {'comment_id': 1176582622, 'comment_body': 'Please add proper documentation for all functions in the following form. Make clear under what circumstances the function can be called. For example, when is it possible to up- or downgrade a lock? Can the function be called multiple times (i.e., recursive locking behavior)?\r\n\r\n```C\r\n/**\r\n * Does X and Y. Description of state, requirements, etc.\r\n *\r\n * @param rwl\r\n *   Reader-writer lock to operate on\r\n */\r\nvoid uk_rwlock_XY(struct uk_rwlock *rwl);\r\n```\r\n', 'comment_created': datetime.datetime(2023, 4, 25, 14, 13, 8, tzinfo=datetime.timezone.utc), 'commenter': 'marcrittinghaus', 'type': 'User'}, {'comment_id': 1176585384, 'comment_body': 'Broken indentation', 'comment_created': datetime.datetime(2023, 4, 25, 14, 15, 1, tzinfo=datetime.timezone.utc), 'commenter': 'marcrittinghaus', 'type': 'User'}, {'comment_id': 1176588249, 'comment_body': 'Please add short comments on the purpose of each field like so:\r\n\r\n```C\r\n/** Reader-Writer Lock */\r\nstruct __align(8) uk_rwlock {\r\n\t/** Number of active readers, -1 if writer active */\r\n\tint nactive;\r\n\t/** ... */\r\n\tint npending_reads;\r\n        /** Configuration flags (see UK_RWLOCK_CONFIG_*) */\r\n        unsigned int config_flags;\r\n...\r\n```', 'comment_created': datetime.datetime(2023, 4, 25, 14, 16, 59, tzinfo=datetime.timezone.utc), 'commenter': 'marcrittinghaus', 'type': 'User'}, {'comment_id': 1176593444, 'comment_body': 'Please add a short comment on the meaning of the config options like so:\r\n\r\n```C\r\n#define UK_RWLOCK_CONFIG_SPIN\t\t0x01 /* ??? */\r\n#define UK_RWLOCK_CONFIG_WRITE_RECURSE\t0x02 /* Recursive locking for writers */\r\n```', 'comment_created': datetime.datetime(2023, 4, 25, 14, 20, 46, tzinfo=datetime.timezone.utc), 'commenter': 'marcrittinghaus', 'type': 'User'}, {'comment_id': 1176661353, 'comment_body': 'Same as for `rwlock`. Get rid of `__uk_mutex_init()`. Rename that function to `uk_mutex_init_config()`. Define `uk_mutex_init()` as shortcut', 'comment_created': datetime.datetime(2023, 4, 25, 15, 6, 6, tzinfo=datetime.timezone.utc), 'commenter': 'marcrittinghaus', 'type': 'User'}, {'comment_id': 1176661849, 'comment_body': 'Does not make sense to have a `_WRITE_` in there, right? Just call it `UK_MUTEX_CONFIG_RECURSE`.\r\n\r\nAlso add a short comment:\r\n```C\r\n#define UK_MUTEX_CONFIG_RECURSE 0x01 /* ... */\r\n```', 'comment_created': datetime.datetime(2023, 4, 25, 15, 6, 26, tzinfo=datetime.timezone.utc), 'commenter': 'marcrittinghaus', 'type': 'User'}, {'comment_id': 1176677367, 'comment_body': ""With the new coding convention, we want to avoid `__` names for things like this. Actually, I find it totally fine to define a proper function for this:\r\n\r\n```C\r\nstatic inline int uk_mutex_is_recursive(struct uk_mutex *m)\r\n{\r\n\treturn (m->config_flags & UK_MUTEX_CONFIG_RECURSE);\r\n}\r\n```\r\n\r\nSince the name is shorter and you don't have to specify the flags, you can also fit everything in one line for the `if` in line 117."", 'comment_created': datetime.datetime(2023, 4, 25, 15, 18, 27, tzinfo=datetime.timezone.utc), 'commenter': 'marcrittinghaus', 'type': 'User'}, {'comment_id': 1176683259, 'comment_body': 'Remove the excess new line.', 'comment_created': datetime.datetime(2023, 4, 25, 15, 22, 51, tzinfo=datetime.timezone.utc), 'commenter': 'marcrittinghaus', 'type': 'User'}, {'comment_id': 1176693840, 'comment_body': 'Missing include guards', 'comment_created': datetime.datetime(2023, 4, 25, 15, 30, 48, tzinfo=datetime.timezone.utc), 'commenter': 'marcrittinghaus', 'type': 'User'}, {'comment_id': 1176694526, 'comment_body': 'Missing cplusplus block (below includes)\r\n\r\n```C\r\n#ifdef __cplusplus\r\nextern ""C"" {\r\n#endif\r\n```', 'comment_created': datetime.datetime(2023, 4, 25, 15, 31, 23, tzinfo=datetime.timezone.utc), 'commenter': 'marcrittinghaus', 'type': 'User'}, {'comment_id': 1176706476, 'comment_body': 'Move outside the `cpluscplus` block', 'comment_created': datetime.datetime(2023, 4, 25, 15, 40, 43, tzinfo=datetime.timezone.utc), 'commenter': 'marcrittinghaus', 'type': 'User'}, {'comment_id': 1176707913, 'comment_body': 'Add the necessary `#include <uk/spinlock.h>` to the list of includes.', 'comment_created': datetime.datetime(2023, 4, 25, 15, 41, 49, tzinfo=datetime.timezone.utc), 'commenter': 'marcrittinghaus', 'type': 'User'}, {'comment_id': 1176709656, 'comment_body': 'Same as before.', 'comment_created': datetime.datetime(2023, 4, 25, 15, 43, 20, tzinfo=datetime.timezone.utc), 'commenter': 'marcrittinghaus', 'type': 'User'}, {'comment_id': 1176709835, 'comment_body': 'Remove additional newline', 'comment_created': datetime.datetime(2023, 4, 25, 15, 43, 28, tzinfo=datetime.timezone.utc), 'commenter': 'marcrittinghaus', 'type': 'User'}, {'comment_id': 1176712278, 'comment_body': 'The includes come after the header. The first line must be the SPDX license identifier.', 'comment_created': datetime.datetime(2023, 4, 25, 15, 45, 30, tzinfo=datetime.timezone.utc), 'commenter': 'marcrittinghaus', 'type': 'User'}, {'comment_id': 1176712465, 'comment_body': 'Same as above', 'comment_created': datetime.datetime(2023, 4, 25, 15, 45, 39, tzinfo=datetime.timezone.utc), 'commenter': 'marcrittinghaus', 'type': 'User'}, {'comment_id': 1176723020, 'comment_body': 'Same as before', 'comment_created': datetime.datetime(2023, 4, 25, 15, 54, 6, tzinfo=datetime.timezone.utc), 'commenter': 'marcrittinghaus', 'type': 'User'}, {'comment_id': 1176724749, 'comment_body': '```suggestion\r\n\t\tUK_STAILQ_REMOVE(&(wq->wait_list), entry,\r\n\t\t\t\t struct uk_waitq_entry, thread_list);\r\n```', 'comment_created': datetime.datetime(2023, 4, 25, 15, 55, 30, tzinfo=datetime.timezone.utc), 'commenter': 'marcrittinghaus', 'type': 'User'}, {'comment_id': 1176726828, 'comment_body': 'What needs to be done here? Can this be removed?', 'comment_created': datetime.datetime(2023, 4, 25, 15, 57, 9, tzinfo=datetime.timezone.utc), 'commenter': 'marcrittinghaus', 'type': 'User'}, {'comment_id': 1176728027, 'comment_body': 'Remove excess newline', 'comment_created': datetime.datetime(2023, 4, 25, 15, 58, 9, tzinfo=datetime.timezone.utc), 'commenter': 'marcrittinghaus', 'type': 'User'}, {'comment_id': 1176729227, 'comment_body': 'Same here', 'comment_created': datetime.datetime(2023, 4, 25, 15, 59, 10, tzinfo=datetime.timezone.utc), 'commenter': 'marcrittinghaus', 'type': 'User'}, {'comment_id': 1176733003, 'comment_body': 'Remove excess newline', 'comment_created': datetime.datetime(2023, 4, 25, 16, 2, 26, tzinfo=datetime.timezone.utc), 'commenter': 'marcrittinghaus', 'type': 'User'}, {'comment_id': 1176735722, 'comment_body': 'Exceeds 80 columns.\r\n\r\n```suggestion\r\n\t/* If the owner is the current thread we increment the lock count */\r\n```', 'comment_created': datetime.datetime(2023, 4, 25, 16, 4, 46, tzinfo=datetime.timezone.utc), 'commenter': 'marcrittinghaus', 'type': 'User'}, {'comment_id': 1176736736, 'comment_body': 'Exceeds 80 columns\r\n```suggestion\r\n\t\t/* If there is no owner we can acquire the lock\r\n\t\t * and increment the lock count\r\n\t\t */\r\n```', 'comment_created': datetime.datetime(2023, 4, 25, 16, 5, 41, tzinfo=datetime.timezone.utc), 'commenter': 'marcrittinghaus', 'type': 'User'}, {'comment_id': 1176742509, 'comment_body': 'Exceeds 80 columns. Use `NULL` for pointers.\r\nRename `current` -> `cur` in this function and `uk_mutex_trylock`.\r\n\r\n```suggestion\r\n\t\tif (ukarch_compare_exchange_sync(&m->owner, NULL, cur) == cur) {\r\n```', 'comment_created': datetime.datetime(2023, 4, 25, 16, 10, 24, tzinfo=datetime.timezone.utc), 'commenter': 'marcrittinghaus', 'type': 'User'}, {'comment_id': 1176745987, 'comment_body': 'Make more obvious that there is no way around this assert if you continue to execute the function.\r\n```suggestion\r\n\t}\r\n\t\r\n\tUK_ASSERT(m->owner != current);\r\n```', 'comment_created': datetime.datetime(2023, 4, 25, 16, 12, 57, tzinfo=datetime.timezone.utc), 'commenter': 'marcrittinghaus', 'type': 'User'}, {'comment_id': 1176752137, 'comment_body': 'Why do we need an atomic increment here? Since we are the owner of the lock, no other thread will increment or decrement this count. The only situation could be an interrupt. But we should not try to acquire a blocking synchronization primitive in an interrupt handler anyways.', 'comment_created': datetime.datetime(2023, 4, 25, 16, 17, 2, tzinfo=datetime.timezone.utc), 'commenter': 'marcrittinghaus', 'type': 'User'}, {'comment_id': 1176765064, 'comment_body': 'Same question concerning the atomic needed or not. If not, I would even suggest the following to save the read.\r\n```suggestion\r\n\t\t\tUK_ASSERT(m->lock_count == 0);\r\n\t\t\tm->lock_count = 1;\r\n```', 'comment_created': datetime.datetime(2023, 4, 25, 16, 27, 35, tzinfo=datetime.timezone.utc), 'commenter': 'marcrittinghaus', 'type': 'User'}, {'comment_id': 1176770374, 'comment_body': 'We use snake_case.\r\n```suggestion\r\n\tint nactive;\r\n\tint npending_reads;\r\n\tint npending_writes;\r\n```', 'comment_created': datetime.datetime(2023, 4, 25, 16, 32, 36, tzinfo=datetime.timezone.utc), 'commenter': 'marcrittinghaus', 'type': 'User'}, {'comment_id': 1176783224, 'comment_body': 'Due to padding you do not gain any savings by using `uint8_t`. In fact, since you have to use longer `movzx` instructions to zero-extend the value during load, it can happen that the OPCODE becomes even longer. Although that depends on the code. \r\n\r\nNevertheless, since you are using an `unsigned int` in `uk_rwlock`, I would use the same here for consistency.\r\n\r\n```suggestion\r\n\tunsigned int config_flags;\r\n```', 'comment_created': datetime.datetime(2023, 4, 25, 16, 45, 2, tzinfo=datetime.timezone.utc), 'commenter': 'marcrittinghaus', 'type': 'User'}, {'comment_id': 1176786774, 'comment_body': 'Reminder: use `unsigned int config_flags` here, too, if you change the type in the `struct`.', 'comment_created': datetime.datetime(2023, 4, 25, 16, 48, 32, tzinfo=datetime.timezone.utc), 'commenter': 'marcrittinghaus', 'type': 'User'}, {'comment_id': 1176793719, 'comment_body': '`m->lock_count == 1` is always true.\r\n\r\nBtw: It is only guaranteed that true is a non-zero value. But it does not need to be `1`. So this was already broken before.', 'comment_created': datetime.datetime(2023, 4, 25, 16, 55, 6, tzinfo=datetime.timezone.utc), 'commenter': 'marcrittinghaus', 'type': 'User'}, {'comment_id': 1176814441, 'comment_body': 'This looks like a lot of unnecessary operations. There also seem to be some bugs in the existing code. The metrics miss locking and the `unlocked` is incremented instead of decremented. \r\n\r\nWhat about:\r\n```C\r\nstatic inline int uk_mutex_trylock(struct uk_mutex *m)\r\n{\r\n\tstruct uk_thread *cur;\r\n\r\n\tUK_ASSERT(m);\r\n\r\n\tcur = uk_thread_current();\r\n\r\n\tif (unlikely(uk_mutex_is_recursive(m) && m->owner == cur)) {\r\n\t\tm->lock_count++;\r\n\r\n#ifdef CONFIG_LIBUKLOCK_MUTEX_METRICS\r\n\t\tukarch_spin_lock(&_uk_mutex_metrics_lock);\r\n\t\t_uk_mutex_metrics.total_ok_trylocks++;\r\n\t\tukarch_spin_unlock(&_uk_mutex_metrics_lock);\r\n#endif /* CONFIG_LIBUKLOCK_MUTEX_METRICS */\r\n\r\n\t\treturn 1;\r\n\t}\r\n\r\n\tUK_ASSERT(m->owner != cur);\r\n\r\n\tif (ukarch_compare_exchange_sync(&m->owner, NULL, cur) == cur) {\r\n\t\tUK_ASSERT(m->lock_count == 0);\r\n\t\tm->lock_count = 1;\r\n\r\n#ifdef CONFIG_LIBUKLOCK_MUTEX_METRICS\r\n\t\tukarch_spin_lock(&_uk_mutex_metrics_lock);\r\n\t\t_uk_mutex_metrics.active_locked++;\r\n\t\t_uk_mutex_metrics.active_unlocked--;\r\n\t\t_uk_mutex_metrics.total_ok_trylocks++;\r\n\t\tukarch_spin_unlock(&_uk_mutex_metrics_lock);\r\n#endif /* CONFIG_LIBUKLOCK_MUTEX_METRICS */\r\n\r\n\t\treturn 1;\r\n\t}\r\n\r\n#ifdef CONFIG_LIBUKLOCK_MUTEX_METRICS\r\n\tukarch_spin_lock(&_uk_mutex_metrics_lock);\r\n\t_uk_mutex_metrics.total_failed_trylocks++;\r\n\tukarch_spin_unlock(&_uk_mutex_metrics_lock);\r\n#endif /* CONFIG_LIBUKLOCK_MUTEX_METRICS */\r\n\r\n\treturn 0;\r\n}\r\n```\r\n\r\n', 'comment_created': datetime.datetime(2023, 4, 25, 17, 16, 11, tzinfo=datetime.timezone.utc), 'commenter': 'marcrittinghaus', 'type': 'User'}, {'comment_id': 1176817837, 'comment_body': 'I think it is safe to assume that recursive locks are less used. So if you want to use the `unlikely` attribute, I would put it around the whole condition.\r\n```suggestion\r\n\tif (unlikely(uk_mutex_is_recursive(m) && m->owner == cur)) {\r\n```', 'comment_created': datetime.datetime(2023, 4, 25, 17, 19, 48, tzinfo=datetime.timezone.utc), 'commenter': 'marcrittinghaus', 'type': 'User'}, {'comment_id': 1176821540, 'comment_body': 'Only include headers that are really needed for definitions in this file. All other includes go into the `*.c` file.', 'comment_created': datetime.datetime(2023, 4, 25, 17, 23, 54, tzinfo=datetime.timezone.utc), 'commenter': 'marcrittinghaus', 'type': 'User'}, {'comment_id': 1176822151, 'comment_body': 'Missing cplusplus block after the includes\r\n```C\r\n#ifdef __cplusplus\r\nextern ""C"" {\r\n#endif\r\n```', 'comment_created': datetime.datetime(2023, 4, 25, 17, 24, 29, tzinfo=datetime.timezone.utc), 'commenter': 'marcrittinghaus', 'type': 'User'}, {'comment_id': 1176853576, 'comment_body': ""Again, I don't think, we really need atomic instructions here. You just need to make sure you use a memory barrier.\r\n```suggestion\r\n\tif (--m->lock_count == 0) {\r\n\t\t/* Make sure lock_count is visible before resetting the\r\n\t\t * owner. The lock can be acquired afterwards.\r\n\t\t */\r\n\t\twmb();\r\n\t\t...\r\n```"", 'comment_created': datetime.datetime(2023, 4, 25, 17, 57, 24, tzinfo=datetime.timezone.utc), 'commenter': 'marcrittinghaus', 'type': 'User'}, {'comment_id': 1176860896, 'comment_body': 'Although not part of your changes, it is a pretty bad idea to keep the stats spinlock while calling `uk_waitq_wake_up()`. The scheduler is invoked in there and depending on the implementation (e.g., priority based) it can immediately switch threads. If the woken thread then tries to acquire/release **any** lock, we run into a deadlock! ⚠️⚠️⚠️\r\n\r\nPlease update the code to acquire the spinlock after the fact like so:\r\n```C\r\nif (ukarch_sub_fetch(&(m->lock_count), 1) == 0) {\r\n\tm->owner = NULL;\r\n\tuk_waitq_wake_up(&m->wait);\r\n\r\n#ifdef CONFIG_LIBUKLOCK_MUTEX_METRICS\r\n\tukarch_spin_lock(&_uk_mutex_metrics_lock);\r\n\t_uk_mutex_metrics.active_locked--;\r\n\t_uk_mutex_metrics.active_unlocked++;\r\n\t_uk_mutex_metrics.total_unlocks++;\r\n\tukarch_spin_unlock(&_uk_mutex_metrics_lock);\r\n#endif /* CONFIG_LIBUKLOCK_MUTEX_METRICS */\r\n} else {\r\n#ifdef CONFIG_LIBUKLOCK_MUTEX_METRICS\r\n\tukarch_spin_lock(&_uk_mutex_metrics_lock);\r\n\t_uk_mutex_metrics.total_unlocks++;\r\n\tukarch_spin_unlock(&_uk_mutex_metrics_lock);\r\n#endif /* CONFIG_LIBUKLOCK_MUTEX_METRICS */\r\n}\r\n``` ', 'comment_created': datetime.datetime(2023, 4, 25, 18, 4, 52, tzinfo=datetime.timezone.utc), 'commenter': 'marcrittinghaus', 'type': 'User'}, {'comment_id': 1177572828, 'comment_body': 'Remove excess newline', 'comment_created': datetime.datetime(2023, 4, 26, 9, 5, 1, tzinfo=datetime.timezone.utc), 'commenter': 'marcrittinghaus', 'type': 'User'}, {'comment_id': 1177572919, 'comment_body': 'Remove excess newline', 'comment_created': datetime.datetime(2023, 4, 26, 9, 5, 5, tzinfo=datetime.timezone.utc), 'commenter': 'marcrittinghaus', 'type': 'User'}, {'comment_id': 1177573255, 'comment_body': 'Remove excess newline', 'comment_created': datetime.datetime(2023, 4, 26, 9, 5, 24, tzinfo=datetime.timezone.utc), 'commenter': 'marcrittinghaus', 'type': 'User'}, {'comment_id': 1177582335, 'comment_body': 'Avoid `__`-names. Just use `RWLOCK_IS_CONFIG_SPIN` etc. without the `uk` prefix to signal that it is private.\r\n\r\n+ Indentation broken', 'comment_created': datetime.datetime(2023, 4, 26, 9, 13, 16, tzinfo=datetime.timezone.utc), 'commenter': 'marcrittinghaus', 'type': 'User'}, {'comment_id': 1177605395, 'comment_body': 'Please break the arguments like so. We had this topic in the last maintainers meeting for the coding convention.\r\n```suggestion\r\n\t\tuk_waitq_wait_locked(&rwl->shared,\r\n\t\t\t\t     uk_spin_lock,\r\n\t\t\t\t     uk_spin_unlock,\r\n\t\t\t\t     &rwl->sl);\r\n```', 'comment_created': datetime.datetime(2023, 4, 26, 9, 28, 1, tzinfo=datetime.timezone.utc), 'commenter': 'marcrittinghaus', 'type': 'User'}, {'comment_id': 1177660560, 'comment_body': 'I suggest to add `UK_ASSERT`s in the code at various points to make assumptions you have explicit, like here `UK_ASSERT(rwl->nActive > 0);`, or for `uk_rwlock_wunlock()` you should add a `UK_ASSERT(rwl->nActive == -1);`.', 'comment_created': datetime.datetime(2023, 4, 26, 10, 15, tzinfo=datetime.timezone.utc), 'commenter': 'marcrittinghaus', 'type': 'User'}, {'comment_id': 1177680016, 'comment_body': 'Generally, it is good to structure similar functions in a similar way. In the other functions you save the result from the condition to a variable and perform the check outside the lock. I do not particularly prefer one over the other but it simplifies comprehension and maintenance of the code.', 'comment_created': datetime.datetime(2023, 4, 26, 10, 29, 21, tzinfo=datetime.timezone.utc), 'commenter': 'marcrittinghaus', 'type': 'User'}, {'comment_id': 1177774001, 'comment_body': 'I do understand your idea here and I find it to be a clever solution. I think it would be good to have a separate comment block at the beginning of the source file after the header to describe how the rwlock works. In particular, when writers are prioritized over readers and the other way around and how starvation is prevented.\r\n\r\n```C\r\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n * POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n\r\n/*\r\n * Reader-Writer Lock\r\n * <DESCRIPTION HERE>\r\n */\r\n\r\n#include <uk/rwlock.h>\r\n```', 'comment_created': datetime.datetime(2023, 4, 26, 12, 2, 25, tzinfo=datetime.timezone.utc), 'commenter': 'marcrittinghaus', 'type': 'User'}, {'comment_id': 1177789458, 'comment_body': 'Also here, I would add a `UK_ASSERT` to make sure you are not trying to upgrade a writer lock. Same for the downgrade etc.', 'comment_created': datetime.datetime(2023, 4, 26, 12, 17, 40, tzinfo=datetime.timezone.utc), 'commenter': 'marcrittinghaus', 'type': 'User'}, {'comment_id': 1177795056, 'comment_body': 'Please indent the definition. And also uniformly use a single whitespace here before the `\\` (first line uses a tab).', 'comment_created': datetime.datetime(2023, 4, 26, 12, 22, 51, tzinfo=datetime.timezone.utc), 'commenter': 'marcrittinghaus', 'type': 'User'}, {'comment_id': 1177798660, 'comment_body': 'Exceeds 80 columns', 'comment_created': datetime.datetime(2023, 4, 26, 12, 25, 11, tzinfo=datetime.timezone.utc), 'commenter': 'marcrittinghaus', 'type': 'User'}, {'comment_id': 1178748140, 'comment_body': 'Remove `{` `}`', 'comment_created': datetime.datetime(2023, 4, 27, 7, 40, 26, tzinfo=datetime.timezone.utc), 'commenter': 'marcrittinghaus', 'type': 'User'}, {'comment_id': 1181415537, 'comment_body': 'Hi @marcrittinghaus, Could you explain what you mean by indenting the definition?', 'comment_created': datetime.datetime(2023, 5, 1, 6, 26, 59, tzinfo=datetime.timezone.utc), 'commenter': 'Sairajkodilkar', 'type': 'User'}, {'comment_id': 1181418794, 'comment_body': 'Yes you are right, we dont need an atomic increment', 'comment_created': datetime.datetime(2023, 5, 1, 6, 37, 27, tzinfo=datetime.timezone.utc), 'commenter': 'Sairajkodilkar', 'type': 'User'}, {'comment_id': 1188818528, 'comment_body': 'Hi Marc, I am thinking to create a new PR to fix this issue, as the bug is not introduced by my changes', 'comment_created': datetime.datetime(2023, 5, 9, 15, 57, 8, tzinfo=datetime.timezone.utc), 'commenter': 'Sairajkodilkar', 'type': 'User'}]","[{'commit_sha': 'f449264e53bb6a8359779abeb91db6e3e07a55fd', 'committer_username': 'Sairajkodilkar', 'committer_name': 'Sairaj Kodilkar', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 21, 17, 35, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '87f2632cc637e75e6ca83a9439aa610805137228', 'committer_username': 'Sairajkodilkar', 'committer_name': 'Sairaj Kodilkar', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 21, 17, 35, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dd3fb8d59debc612ba62797319a5c7e976c56c65', 'committer_username': 'Sairajkodilkar', 'committer_name': 'Sairaj Kodilkar', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 21, 17, 35, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dfc927fae9b28e278ceb8e32c832829d7c63e954', 'committer_username': 'Sairajkodilkar', 'committer_name': 'Sairaj Kodilkar', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 21, 17, 35, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '384a5b544895333828a2a955fa9dc0c4bd22e0da', 'committer_username': 'Sairajkodilkar', 'committer_name': 'Sairaj Kodilkar', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 21, 17, 35, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8f26d1abef01905055d5a7c03d06d34d4dad9d2a', 'committer_username': 'Sairajkodilkar', 'committer_name': 'Sairaj Kodilkar', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 21, 17, 35, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bba0ef70a490f0b472092b5c7f1a265af6c2c10c', 'committer_username': 'Sairajkodilkar', 'committer_name': 'Sairaj Kodilkar', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 21, 17, 35, 7, tzinfo=datetime.timezone.utc)}]",Sairaj Kodilkar,56842052,,User,,19,,12,16

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
181022316,unikraft,unikraft/unikraft,C,1532,2491,36,114,3296,282,7,110,"[{'id': 1237633112, 'number': 759, 'closed': None, 'created': datetime.datetime(2023, 2, 11, 8, 58, 9, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 1210, 'deletions': 193, 'state': 'open'}, {'id': 1193850069, 'number': 712, 'closed': None, 'created': datetime.datetime(2023, 1, 11, 13, 46, 5, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 306, 'deletions': 69, 'state': 'open'}, {'id': 1024567756, 'number': 517, 'closed': None, 'created': datetime.datetime(2022, 8, 12, 5, 38, 28, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 937, 'deletions': 105, 'state': 'open'}, {'id': 966382606, 'number': 476, 'closed': datetime.datetime(2023, 5, 13, 18, 24, 19, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 6, 14, 2, 45, 8, tzinfo=datetime.timezone.utc), 'time_taken': 28827551.0, 'time_delta': '333 days, 15:39:11', 'additions': 553, 'deletions': 82, 'state': 'closed'}, {'id': 892875169, 'number': 435, 'closed': datetime.datetime(2022, 6, 11, 11, 18, 4, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 3, 29, 10, 38, 54, tzinfo=datetime.timezone.utc), 'time_taken': 6395950.0, 'time_delta': '74 days, 0:39:10', 'additions': 4, 'deletions': 75, 'state': 'closed'}]"
