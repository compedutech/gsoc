pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
422621611,Add utilities for parallelization,"This adds `utils.parallel.map_{multiprocess,multiprocess}`.  It is to settle a fallback mechanism for worker pools to resolve GH-8169.  Additionally, I want to use this as the place to discuss of the future use of this module.  To avoid situation like GH-8161, it'd be really nice if we can have parallelization as an toggle-able unstable feature and frequent prereleases to attract more feedbacks, especially from those using more obscure platforms.  Edit: I forget to run pre-commit before commit *again*.

cc @bmartinn on `map_multiprocess`",True,8320,https://api.github.com/repos/pypa/pip/pulls/8320,https://github.com/pypa/pip/pull/8320,closed,173,0,3,4,16,8,1,0,[{'name': 'type: feature request'}],2020-05-25 08:38:21+00:00,2020-06-29 07:54:15+00:00,3021354.0,"34 days, 23:15:54","[{'comment_id': 443215616, 'comment_body': ""This isn't necessary, since pool's __exit__ should handle closing and other details."", 'comment_created': datetime.datetime(2020, 6, 21, 12, 37, 53, tzinfo=datetime.timezone.utc), 'commenter': 'pradyunsg', 'type': 'User'}, {'comment_id': 443216142, 'comment_body': ""```suggestion\r\n    map_multiprocess = _imap_multiprocess_py3\r\n    map_multithread = _imap_multithread_py3\r\n```\r\n\r\nI'd say we should trim the API for this module to just 2 functions -- a multithreaded unordered map, and a multiprocess unordered map.\r\n\r\nI don't see any particular use cases within this codebase, where this difference is relevant to users and reducing one dimension of the matrix of potential parallelization configurations will help keep this from getting overbearing/difficult to maintain."", 'comment_created': datetime.datetime(2020, 6, 21, 12, 44, 20, tzinfo=datetime.timezone.utc), 'commenter': 'pradyunsg', 'type': 'User'}, {'comment_id': 443216681, 'comment_body': ""I'd suggest dropping the docstrings in all the function definitions, and instead describe the functions in the module docstring (see other comment about trimming the API of this module to only 2 functions).\r\n\r\nThese internal-only function names are fairly self-explanatory, and I don't think the value-add of static analysis finding the relevant docstring is worth the duplication in this module; which makes it difficult to navigate + find relevant code.\r\n"", 'comment_created': datetime.datetime(2020, 6, 21, 12, 51, 17, tzinfo=datetime.timezone.utc), 'commenter': 'pradyunsg', 'type': 'User'}, {'comment_id': 443217446, 'comment_body': 'Here\'s a rough sample for what the docstring could be:\r\n\r\n```py\r\n""""""Helpers for parallelization of higher order functions.\r\n\r\nThis module provides two helper functions, with appropriate fallbacks on Py2\r\nand on systems lacking support for synchronization mechanisms.\r\n\r\n- ``map_multiprocess``\r\n- ``map_multithread``\r\n\r\nThese helpers work like `map`, with 2 differences:\r\n\r\n- They don\'t guarantee the order of processing of the elements of the iterable.\r\n- The underlying process/thread pools chop the iterable into a number of chunks,\r\n  and the (approximate) size of these chunks can be specified by passing\r\n  an optional keyword-only argument ``chunksize`` (positive integer).\r\n""""""\r\n```', 'comment_created': datetime.datetime(2020, 6, 21, 13, 1, 5, tzinfo=datetime.timezone.utc), 'commenter': 'pradyunsg', 'type': 'User'}, {'comment_id': 443217908, 'comment_body': ""To this end, I'm also 100% OK with just falling back to _imap_fallback on Python 2 (and dropping those implementations) since trying to get things working on Python 2 when we're gonna drop support real soon isn't gonna be worth it.\r\n"", 'comment_created': datetime.datetime(2020, 6, 21, 13, 7, 30, tzinfo=datetime.timezone.utc), 'commenter': 'pradyunsg', 'type': 'User'}, {'comment_id': 443231610, 'comment_body': ""It's needed for `imap*` to start submitting tasks to the pool for some reason.  The non lazy variant doesn't need it though.  ~~I think I'll add a comment explaining why it is needed.~~  Edit: I have, but I think my pun made it unclear so I'm gonna rephrase."", 'comment_created': datetime.datetime(2020, 6, 21, 15, 40, 25, tzinfo=datetime.timezone.utc), 'commenter': 'McSinyx', 'type': 'User'}, {'comment_id': 443233234, 'comment_body': ""> I'd suggest dropping the docstrings in all the function definitions\r\n\r\n[I'm from the ask-docs camp](https://twitter.com/matplotlib/status/1272066451428573184) (which is bound to `K` in my editor), and I'd like to support my kind!  I wonder if we keep the function docstrings, should we add the docs you suggested to the module docstring or that those should exist exclusively though.\r\n\r\nEdit: I figure the intended API would be either `map_multi*` which says neither about what happens to long input nor unorderedness.\r\n\r\nAnother edit: I'm going non-ReST for the module docstring."", 'comment_created': datetime.datetime(2020, 6, 21, 16, 0, 32, tzinfo=datetime.timezone.utc), 'commenter': 'McSinyx', 'type': 'User'}, {'comment_id': 449701878, 'comment_body': 'Ideally this should be called one last time after all the tests have run (maybe via an auto-use fixture at module scope) to make sure it is loaded without being affected by the tests monkeypatch.', 'comment_created': datetime.datetime(2020, 7, 3, 20, 53, 26, tzinfo=datetime.timezone.utc), 'commenter': 'xavfernandez', 'type': 'User'}]","[{'commit_sha': '134ae32a16786d0944dc6d3c30afd8b49e0e4497', 'committer_username': 'McSinyx', 'committer_name': None, 'committer_email': 'cnx@loang.net', 'commit_date': datetime.datetime(2015, 8, 7, 4, 35, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e7f637e5ca7940dc352234e1a224c9b5d987b0e8', 'committer_username': 'McSinyx', 'committer_name': None, 'committer_email': 'cnx@loang.net', 'commit_date': datetime.datetime(2015, 8, 7, 4, 35, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '13539d00f831e0b6d31989c22c7bc56c5d972a05', 'committer_username': 'McSinyx', 'committer_name': None, 'committer_email': 'cnx@loang.net', 'commit_date': datetime.datetime(2015, 8, 7, 4, 35, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0a3b20f9b8514b261eed225c4b635d59bb4a5167', 'committer_username': 'McSinyx', 'committer_name': None, 'committer_email': 'cnx@loang.net', 'commit_date': datetime.datetime(2015, 8, 7, 4, 35, 24, tzinfo=datetime.timezone.utc)}]",,13689192,cnx@loang.net,User,,36,,44,62

444255557,Make utils.parallel tests tear down properly,"This makes unit tests for `utils.parallel` tear down properly and independent of execution order, by unloading the module after each time its import is monkeypatched.

The heads-up was given by @xavfernandez in https://github.com/pypa/pip/pull/8320#discussion_r449701878 (unfortunately) after I nudged @pradyunsg to merge it :smile:",True,8538,https://api.github.com/repos/pypa/pip/pulls/8538,https://github.com/pypa/pip/pull/8538,closed,16,7,2,1,0,0,0,0,[],2020-07-04 08:13:07+00:00,2020-07-08 01:19:29+00:00,320782.0,"3 days, 17:06:22",[],"[{'commit_sha': '512221e1c158b885980391a86db403a592742fb6', 'committer_username': 'McSinyx', 'committer_name': None, 'committer_email': 'cnx@loang.net', 'commit_date': datetime.datetime(2015, 8, 7, 4, 35, 24, tzinfo=datetime.timezone.utc)}]",,13689192,cnx@loang.net,User,,36,,44,62
440889040,Parallelize pip list --outdated and --uptodate,"This reverses GH-8167 and parallelizes the networking operations done by `pip list --outdated` and `pip list --uptodate`.  It would be lovely if this can make it before the next beta release (GH-8206).

I wonder if we should roll this out an an unstable feature or just keep it as-is.  Currently sometimes Control C needs to be issued twice for the command to be terminated properly.",True,8504,https://api.github.com/repos/pypa/pip/pulls/8504,https://github.com/pypa/pip/pull/8504,closed,3,1,2,1,4,0,1,0,[{'name': 'type: feature request'}],2020-06-27 09:47:43+00:00,2020-07-03 22:01:27+00:00,562424.0,"6 days, 12:13:44",[],"[{'commit_sha': 'dd3a3b5eb7c2319d77a0efa9a0b245883564f5b3', 'committer_username': 'McSinyx', 'committer_name': None, 'committer_email': 'cnx@loang.net', 'commit_date': datetime.datetime(2015, 8, 7, 4, 35, 24, tzinfo=datetime.timezone.utc)}]",,13689192,cnx@loang.net,User,,36,,44,62
422621611,Add utilities for parallelization,"This adds `utils.parallel.map_{multiprocess,multiprocess}`.  It is to settle a fallback mechanism for worker pools to resolve GH-8169.  Additionally, I want to use this as the place to discuss of the future use of this module.  To avoid situation like GH-8161, it'd be really nice if we can have parallelization as an toggle-able unstable feature and frequent prereleases to attract more feedbacks, especially from those using more obscure platforms.  Edit: I forget to run pre-commit before commit *again*.

cc @bmartinn on `map_multiprocess`",True,8320,https://api.github.com/repos/pypa/pip/pulls/8320,https://github.com/pypa/pip/pull/8320,closed,173,0,3,4,16,8,1,0,[{'name': 'type: feature request'}],2020-05-25 08:38:21+00:00,2020-06-29 07:54:15+00:00,3021354.0,"34 days, 23:15:54","[{'comment_id': 443215616, 'comment_body': ""This isn't necessary, since pool's __exit__ should handle closing and other details."", 'comment_created': datetime.datetime(2020, 6, 21, 12, 37, 53, tzinfo=datetime.timezone.utc), 'commenter': 'pradyunsg', 'type': 'User'}, {'comment_id': 443216142, 'comment_body': ""```suggestion\r\n    map_multiprocess = _imap_multiprocess_py3\r\n    map_multithread = _imap_multithread_py3\r\n```\r\n\r\nI'd say we should trim the API for this module to just 2 functions -- a multithreaded unordered map, and a multiprocess unordered map.\r\n\r\nI don't see any particular use cases within this codebase, where this difference is relevant to users and reducing one dimension of the matrix of potential parallelization configurations will help keep this from getting overbearing/difficult to maintain."", 'comment_created': datetime.datetime(2020, 6, 21, 12, 44, 20, tzinfo=datetime.timezone.utc), 'commenter': 'pradyunsg', 'type': 'User'}, {'comment_id': 443216681, 'comment_body': ""I'd suggest dropping the docstrings in all the function definitions, and instead describe the functions in the module docstring (see other comment about trimming the API of this module to only 2 functions).\r\n\r\nThese internal-only function names are fairly self-explanatory, and I don't think the value-add of static analysis finding the relevant docstring is worth the duplication in this module; which makes it difficult to navigate + find relevant code.\r\n"", 'comment_created': datetime.datetime(2020, 6, 21, 12, 51, 17, tzinfo=datetime.timezone.utc), 'commenter': 'pradyunsg', 'type': 'User'}, {'comment_id': 443217446, 'comment_body': 'Here\'s a rough sample for what the docstring could be:\r\n\r\n```py\r\n""""""Helpers for parallelization of higher order functions.\r\n\r\nThis module provides two helper functions, with appropriate fallbacks on Py2\r\nand on systems lacking support for synchronization mechanisms.\r\n\r\n- ``map_multiprocess``\r\n- ``map_multithread``\r\n\r\nThese helpers work like `map`, with 2 differences:\r\n\r\n- They don\'t guarantee the order of processing of the elements of the iterable.\r\n- The underlying process/thread pools chop the iterable into a number of chunks,\r\n  and the (approximate) size of these chunks can be specified by passing\r\n  an optional keyword-only argument ``chunksize`` (positive integer).\r\n""""""\r\n```', 'comment_created': datetime.datetime(2020, 6, 21, 13, 1, 5, tzinfo=datetime.timezone.utc), 'commenter': 'pradyunsg', 'type': 'User'}, {'comment_id': 443217908, 'comment_body': ""To this end, I'm also 100% OK with just falling back to _imap_fallback on Python 2 (and dropping those implementations) since trying to get things working on Python 2 when we're gonna drop support real soon isn't gonna be worth it.\r\n"", 'comment_created': datetime.datetime(2020, 6, 21, 13, 7, 30, tzinfo=datetime.timezone.utc), 'commenter': 'pradyunsg', 'type': 'User'}, {'comment_id': 443231610, 'comment_body': ""It's needed for `imap*` to start submitting tasks to the pool for some reason.  The non lazy variant doesn't need it though.  ~~I think I'll add a comment explaining why it is needed.~~  Edit: I have, but I think my pun made it unclear so I'm gonna rephrase."", 'comment_created': datetime.datetime(2020, 6, 21, 15, 40, 25, tzinfo=datetime.timezone.utc), 'commenter': 'McSinyx', 'type': 'User'}, {'comment_id': 443233234, 'comment_body': ""> I'd suggest dropping the docstrings in all the function definitions\r\n\r\n[I'm from the ask-docs camp](https://twitter.com/matplotlib/status/1272066451428573184) (which is bound to `K` in my editor), and I'd like to support my kind!  I wonder if we keep the function docstrings, should we add the docs you suggested to the module docstring or that those should exist exclusively though.\r\n\r\nEdit: I figure the intended API would be either `map_multi*` which says neither about what happens to long input nor unorderedness.\r\n\r\nAnother edit: I'm going non-ReST for the module docstring."", 'comment_created': datetime.datetime(2020, 6, 21, 16, 0, 32, tzinfo=datetime.timezone.utc), 'commenter': 'McSinyx', 'type': 'User'}, {'comment_id': 449701878, 'comment_body': 'Ideally this should be called one last time after all the tests have run (maybe via an auto-use fixture at module scope) to make sure it is loaded without being affected by the tests monkeypatch.', 'comment_created': datetime.datetime(2020, 7, 3, 20, 53, 26, tzinfo=datetime.timezone.utc), 'commenter': 'xavfernandez', 'type': 'User'}]","[{'commit_sha': '134ae32a16786d0944dc6d3c30afd8b49e0e4497', 'committer_username': 'McSinyx', 'committer_name': None, 'committer_email': 'cnx@loang.net', 'commit_date': datetime.datetime(2015, 8, 7, 4, 35, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e7f637e5ca7940dc352234e1a224c9b5d987b0e8', 'committer_username': 'McSinyx', 'committer_name': None, 'committer_email': 'cnx@loang.net', 'commit_date': datetime.datetime(2015, 8, 7, 4, 35, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '13539d00f831e0b6d31989c22c7bc56c5d972a05', 'committer_username': 'McSinyx', 'committer_name': None, 'committer_email': 'cnx@loang.net', 'commit_date': datetime.datetime(2015, 8, 7, 4, 35, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0a3b20f9b8514b261eed225c4b635d59bb4a5167', 'committer_username': 'McSinyx', 'committer_name': None, 'committer_email': 'cnx@loang.net', 'commit_date': datetime.datetime(2015, 8, 7, 4, 35, 24, tzinfo=datetime.timezone.utc)}]",,13689192,cnx@loang.net,User,,36,,44,62

436597569,Add utitlity to lazily acquire wheel metadata over HTTP,"This is created as discussed in GH-7819, GH-8448 and GH-8442.

TODO: Finalize the interface to integrate it into the current codebase.",True,8467,https://api.github.com/repos/pypa/pip/pulls/8467,https://github.com/pypa/pip/pull/8467,closed,296,27,6,3,7,4,0,0,[],2020-06-18 16:19:32+00:00,2020-06-30 13:39:05+00:00,1027173.0,"11 days, 21:19:33","[{'comment_id': 443218612, 'comment_body': ""Please add a line denoting who added this comment originally, and in which commit this was added (moving across files disrupts git blames, so we'd need to compensate for that)."", 'comment_created': datetime.datetime(2020, 6, 21, 13, 16, 4, tzinfo=datetime.timezone.utc), 'commenter': 'pradyunsg', 'type': 'User'}, {'comment_id': 443218860, 'comment_body': 'Inherit from `object` for Python 2, or possibly `io.IOBase` or `io.BufferedReader`.', 'comment_created': datetime.datetime(2020, 6, 21, 13, 19, 24, tzinfo=datetime.timezone.utc), 'commenter': 'pradyunsg', 'type': 'User'}, {'comment_id': 445309123, 'comment_body': ""Do you think we should inherit from `IO` and make mypy happy, since [it would require many unused methods](https://github.com/McSinyx/lazip/blob/6309d68b7b5c054980eeac70c5b6941a5e83b35b/lazip.py#L36)?  Edit: per a private discussion, we don't need to."", 'comment_created': datetime.datetime(2020, 6, 25, 5, 6, 48, tzinfo=datetime.timezone.utc), 'commenter': 'McSinyx', 'type': 'User'}, {'comment_id': 445309350, 'comment_body': ""No problem!  BTW this has been moved around quite many times, so I'll note the first commit adding it."", 'comment_created': datetime.datetime(2020, 6, 25, 5, 7, 40, tzinfo=datetime.timezone.utc), 'commenter': 'McSinyx', 'type': 'User'}]","[{'commit_sha': '3eb85a0619371ca9a20a131ae9394d40eb949b5c', 'committer_username': 'McSinyx', 'committer_name': None, 'committer_email': 'cnx@loang.net', 'commit_date': datetime.datetime(2015, 8, 7, 4, 35, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e1438d06b522c0f6ce9bb403ddd701bc82382df7', 'committer_username': 'McSinyx', 'committer_name': None, 'committer_email': 'cnx@loang.net', 'commit_date': datetime.datetime(2015, 8, 7, 4, 35, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '25a25a0975841ce319790d8047999876ecb1188b', 'committer_username': 'McSinyx', 'committer_name': None, 'committer_email': 'cnx@loang.net', 'commit_date': datetime.datetime(2015, 8, 7, 4, 35, 24, tzinfo=datetime.timezone.utc)}]",,13689192,cnx@loang.net,User,,36,,44,62
449566741,Revise lazy wheel and its tests,"This PR aims to do two things

- Raise HTTPRangeRequestUnsupported instead of RuntimeError when range request is not supported
- Use local server to not support range request in a unit test

At the moment I haven't quite figured out how to use pallets/werkzeug#978 as suggested by @chrahunt in https://github.com/pypa/pip/pull/8532#discussion_r453990496.",True,8584,https://api.github.com/repos/pypa/pip/pulls/8584,https://github.com/pypa/pip/pull/8584,closed,28,11,3,2,7,0,1,0,[{'name': 'skip news'}],2020-07-15 15:41:35+00:00,2020-07-21 08:23:21+00:00,492106.0,"5 days, 16:41:46",[],"[{'commit_sha': 'db217992bd837c6a8a526dbd4c68a897e84a4148', 'committer_username': 'McSinyx', 'committer_name': None, 'committer_email': 'cnx@loang.net', 'commit_date': datetime.datetime(2015, 8, 7, 4, 35, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '892018eaf20f7bff96de65deaf267dd584787b43', 'committer_username': 'McSinyx', 'committer_name': None, 'committer_email': 'cnx@loang.net', 'commit_date': datetime.datetime(2015, 8, 7, 4, 35, 24, tzinfo=datetime.timezone.utc)}]",,13689192,cnx@loang.net,User,,36,,44,62
461784359,[fast-deps] Make range requests closer to chunk size,"This addresses the discovery in https://github.com/pypa/pip/issues/8670#issuecomment-667644636.  It is pretty stably reproducible on my network, I've run the before-after `pip install tensorflow` with early exit right after new resolver resolution for 3 times and the execution duration is consistent (30&ndash;31s before and 19.5&ndash;20s after patching).

Regarding the news file, I'm thinking about marking this as trivial since the feature is rather experimental and I am not entirely sure if this always make it faster for all requirement sets.  If this can be merged before the bugfix release it would be nice too!
",True,8681,https://api.github.com/repos/pypa/pip/pulls/8681,https://github.com/pypa/pip/pull/8681,closed,3,1,2,1,2,0,0,0,[],2020-08-02 09:43:18+00:00,2020-08-04 02:08:49+00:00,145531.0,"1 day, 16:25:31",[],"[{'commit_sha': 'd98ff19c270667d4a52d714676608094d096c6f3', 'committer_username': 'McSinyx', 'committer_name': None, 'committer_email': 'cnx@loang.net', 'commit_date': datetime.datetime(2015, 8, 7, 4, 35, 24, tzinfo=datetime.timezone.utc)}]",,13689192,cnx@loang.net,User,,36,,44,62

463457049,Disable caching for range requests,This fixes corrupted shallow wheels when caching is involved (resolves GH-8701) until we know better on why range responses are not cached correctly.  It would be really nice if this can land as part of the next bugfix release (20.2.2).,True,8716,https://api.github.com/repos/pypa/pip/pulls/8716,https://github.com/pypa/pip/pull/8716,closed,4,2,2,1,2,0,0,0,[],2020-08-05 15:25:51+00:00,2020-08-05 23:58:23+00:00,30752.0,8:32:32,[],"[{'commit_sha': 'ffd6a38646a32811cd150790e9f762aca545438b', 'committer_username': 'McSinyx', 'committer_name': None, 'committer_email': 'cnx@loang.net', 'commit_date': datetime.datetime(2015, 8, 7, 4, 35, 24, tzinfo=datetime.timezone.utc)}]",,13689192,cnx@loang.net,User,,36,,44,62
464725134,Add news for disabling range response caching,This adds the news files for GH-8701 and GH-8716 which I forgot to :smile:,True,8730,https://api.github.com/repos/pypa/pip/pulls/8730,https://github.com/pypa/pip/pull/8730,closed,4,0,2,1,1,0,0,0,[],2020-08-07 17:19:07+00:00,2020-08-11 10:11:36+00:00,319949.0,"3 days, 16:52:29",[],"[{'commit_sha': '8dc0d9c8d916b0371fa61d67916ffc5155a90e92', 'committer_username': 'McSinyx', 'committer_name': None, 'committer_email': 'cnx@loang.net', 'commit_date': datetime.datetime(2015, 8, 7, 4, 35, 24, tzinfo=datetime.timezone.utc)}]",,13689192,cnx@loang.net,User,,36,,44,62
429904659,Refactor operations.prepare.prepare_linked_requirement,"Break `operations.prepare.prepare_linked_requirement`
into smaller (not small enough IMHO) methods.

This *not* meant to solve GH-7815 completely.  I agree with https://github.com/pypa/pip/issues/7815#issuecomment-605614152 that we should somehow put the `populate_link` in the same place for the logic to be easier to parse.

Rather, this is purely to make the method easier for me to read to proceed with more experiments on the downloading process.

As for the stylistic changes with the placement of the closing parentheses, I don't really have a strong opinion on them; although I'd be happier if they're not used for single-line argument list.",True,8411,https://api.github.com/repos/pypa/pip/pulls/8411,https://github.com/pypa/pip/pull/8411,closed,78,84,2,4,6,31,1,0,[{'name': 'type: refactor'}],2020-06-07 09:28:54+00:00,2020-06-30 13:41:12+00:00,2002338.0,"23 days, 4:12:18","[{'comment_id': 437354876, 'comment_body': 'Suggestion for a different name:\r\n\r\n```suggestion\r\n        self._log_preparing_link(req, link, req.original_link)\r\n```', 'comment_created': datetime.datetime(2020, 6, 9, 12, 3, 44, tzinfo=datetime.timezone.utc), 'commenter': 'pradyunsg', 'type': 'User'}, {'comment_id': 437453656, 'comment_body': ""Thank you for noting it here, I've reduced the scope of the patch as suggested.  I think I'll give this a trivial news file to make CI a bit happier (could we please have GH-8405 merged now with 2 approvals though?)."", 'comment_created': datetime.datetime(2020, 6, 9, 14, 11, 5, tzinfo=datetime.timezone.utc), 'commenter': 'McSinyx', 'type': 'User'}, {'comment_id': 438140996, 'comment_body': ""This formatting change shouldn't be done. It acts as noise in the diff, triggers style discussions (which can drain dev-time) and isn't related to the main change of this PR.\r\n"", 'comment_created': datetime.datetime(2020, 6, 10, 13, 55, 9, tzinfo=datetime.timezone.utc), 'commenter': 'pradyunsg', 'type': 'User'}, {'comment_id': 438143407, 'comment_body': ""The change in how this is set, is unrelated to moving the code out into a separate function, and IMO should be a separate commit.\r\n\r\nI also think the change in how this is set, makes it more difficult to follow the logic and what the logic is behind this. I'd prefer we avoid making this change, keeping the logic for `autodelete_unpacked` as-is in the original function, and passing it into this function as an additional argument."", 'comment_created': datetime.datetime(2020, 6, 10, 13, 58, 22, tzinfo=datetime.timezone.utc), 'commenter': 'pradyunsg', 'type': 'User'}, {'comment_id': 438144983, 'comment_body': 'This should stay as it was IMO.', 'comment_created': datetime.datetime(2020, 6, 10, 14, 0, 26, tzinfo=datetime.timezone.utc), 'commenter': 'pradyunsg', 'type': 'User'}, {'comment_id': 438146383, 'comment_body': 'We lost this comment.', 'comment_created': datetime.datetime(2020, 6, 10, 14, 2, 23, tzinfo=datetime.timezone.utc), 'commenter': 'pradyunsg', 'type': 'User'}, {'comment_id': 438146680, 'comment_body': ""This docstring doesn't really add much value, and can be removed."", 'comment_created': datetime.datetime(2020, 6, 10, 14, 2, 47, tzinfo=datetime.timezone.utc), 'commenter': 'pradyunsg', 'type': 'User'}, {'comment_id': 438147343, 'comment_body': ""This logger call contains the stacktrace, and shouldn't be removed."", 'comment_created': datetime.datetime(2020, 6, 10, 14, 3, 42, tzinfo=datetime.timezone.utc), 'commenter': 'pradyunsg', 'type': 'User'}, {'comment_id': 439194088, 'comment_body': ""I'll move the logic to this method since `autodelete_unpacked` is not used in the original one."", 'comment_created': datetime.datetime(2020, 6, 12, 3, 58, 56, tzinfo=datetime.timezone.utc), 'commenter': 'McSinyx', 'type': 'User'}, {'comment_id': 439201022, 'comment_body': 'By stacktrace, do you mean the whole multiline traceback?  If so, then I think I disagree, since string format of `HTTPError` (which wraps around `RequestException` which in turn wraps `IOError`) is just the string passed to it.', 'comment_created': datetime.datetime(2020, 6, 12, 4, 31, 22, tzinfo=datetime.timezone.utc), 'commenter': 'McSinyx', 'type': 'User'}, {'comment_id': 439201898, 'comment_body': ""I've reverted the style, however the diff still contains it because of the code movement.  Edit: does that mean I am encouraged to revert the revert? :snowman:"", 'comment_created': datetime.datetime(2020, 6, 12, 4, 35, 37, tzinfo=datetime.timezone.utc), 'commenter': 'McSinyx', 'type': 'User'}, {'comment_id': 441584490, 'comment_body': ""This doesn't need to pass link into this, since `link = req.link` is performed outside. We can move that assignment in here."", 'comment_created': datetime.datetime(2020, 6, 17, 14, 22, 36, tzinfo=datetime.timezone.utc), 'commenter': 'pradyunsg', 'type': 'User'}, {'comment_id': 441584693, 'comment_body': '```suggestion\r\n            parallel_builds=parallel_builds,\r\n       )\r\n```', 'comment_created': datetime.datetime(2020, 6, 17, 14, 22, 52, tzinfo=datetime.timezone.utc), 'commenter': 'pradyunsg', 'type': 'User'}, {'comment_id': 441584808, 'comment_body': '```suggestion\r\n                ""Please delete it and try again."".format(req, req.source_dir)\r\n            )\r\n```', 'comment_created': datetime.datetime(2020, 6, 17, 14, 23, 1, tzinfo=datetime.timezone.utc), 'commenter': 'pradyunsg', 'type': 'User'}, {'comment_id': 441585544, 'comment_body': 'suggestion: assign this outside the try block, and then keep the hashes=hashes here.', 'comment_created': datetime.datetime(2020, 6, 17, 14, 23, 56, tzinfo=datetime.timezone.utc), 'commenter': 'pradyunsg', 'type': 'User'}, {'comment_id': 441586497, 'comment_body': '```suggestion\r\n        if req.link.is_existing_dir():\r\n```', 'comment_created': datetime.datetime(2020, 6, 17, 14, 25, 10, tzinfo=datetime.timezone.utc), 'commenter': 'pradyunsg', 'type': 'User'}, {'comment_id': 441588424, 'comment_body': ""```suggestion\r\n                        logger.info('Saved %s', download_path)\r\n```"", 'comment_created': datetime.datetime(2020, 6, 17, 14, 27, 42, tzinfo=datetime.timezone.utc), 'commenter': 'pradyunsg', 'type': 'User'}, {'comment_id': 441588603, 'comment_body': 'Oh no.', 'comment_created': datetime.datetime(2020, 6, 17, 14, 27, 55, tzinfo=datetime.timezone.utc), 'commenter': 'McSinyx', 'type': 'User'}, {'comment_id': 441662695, 'comment_body': ""I prefer it this way since there's no ambiguity what `_get_linked_req_hashes` returns."", 'comment_created': datetime.datetime(2020, 6, 17, 16, 10, 26, tzinfo=datetime.timezone.utc), 'commenter': 'McSinyx', 'type': 'User'}, {'comment_id': 441720008, 'comment_body': '```suggestion\r\n                        download_dir, link.filename\r\n                    )\r\n```', 'comment_created': datetime.datetime(2020, 6, 17, 17, 45, 32, tzinfo=datetime.timezone.utc), 'commenter': 'pradyunsg', 'type': 'User'}, {'comment_id': 441720245, 'comment_body': '```suggestion\r\n                    hashes=self._get_linked_req_hashes(req)\r\n                )\r\n```', 'comment_created': datetime.datetime(2020, 6, 17, 17, 45, 58, tzinfo=datetime.timezone.utc), 'commenter': 'pradyunsg', 'type': 'User'}, {'comment_id': 442142309, 'comment_body': ""I understand that this is to clean up the way for black and black is an automation (i.e. non-human) but ugh!  I promise that this is my last complain on pip's styling decision though :smile:"", 'comment_created': datetime.datetime(2020, 6, 18, 10, 57, 14, tzinfo=datetime.timezone.utc), 'commenter': 'McSinyx', 'type': 'User'}, {'comment_id': 446628308, 'comment_body': '```python\r\n# When downloading, we only unpack wheels to get metadata, \r\n# but when installing we use the unpacked wheel\r\nautodelete_unpacked = True if download_dir else False\r\n```\r\n\r\nFor line 393-399', 'comment_created': datetime.datetime(2020, 6, 28, 9, 49, 42, tzinfo=datetime.timezone.utc), 'commenter': 'deveshks', 'type': 'User'}, {'comment_id': 446628691, 'comment_body': 'We can avoid the extra `else` by putting `download_dir = self.download_dir` before the `if`, same as what was being done before', 'comment_created': datetime.datetime(2020, 6, 28, 9, 53, 45, tzinfo=datetime.timezone.utc), 'commenter': 'deveshks', 'type': 'User'}, {'comment_id': 446628983, 'comment_body': ""At https://github.com/pypa/pip/pull/8411/files#diff-e8eca5e33f546b893bee9f5abc68611bL393 , we are directly calling `display_path` in `logger.info`, but here we are assigning it to a variable and then passing the variable?\r\n\r\nIf this was just to make flake8 happy in terms of line-length, I don't think it's worth it, and we can stick with what was done previously"", 'comment_created': datetime.datetime(2020, 6, 28, 9, 56, 24, tzinfo=datetime.timezone.utc), 'commenter': 'deveshks', 'type': 'User'}, {'comment_id': 446629790, 'comment_body': 'Thanks for the review.  Personally I believe the if-else form convey the logic better than changing the state.', 'comment_created': datetime.datetime(2020, 6, 28, 10, 4, 52, tzinfo=datetime.timezone.utc), 'commenter': 'McSinyx', 'type': 'User'}, {'comment_id': 446629905, 'comment_body': ""I think the reasoning for the line-length limit is that if a statement is too long, it's probably doing too many things.  For this case in particular I don't think the difference is major though."", 'comment_created': datetime.datetime(2020, 6, 28, 10, 5, 53, tzinfo=datetime.timezone.utc), 'commenter': 'McSinyx', 'type': 'User'}, {'comment_id': 446630100, 'comment_body': ""I also prefer the shorter version, but let's wait for @pradyunsg to settle this: https://github.com/pypa/pip/pull/8411#discussion_r438144983"", 'comment_created': datetime.datetime(2020, 6, 28, 10, 8, 2, tzinfo=datetime.timezone.utc), 'commenter': 'McSinyx', 'type': 'User'}, {'comment_id': 446630693, 'comment_body': ""In that case, I would personally prefer the original version, although I don't feel strongly about it.\r\n\r\n```python\r\n logger.info(\r\n    'Saved %s', display_path(download_location)\r\n)\r\n```"", 'comment_created': datetime.datetime(2020, 6, 28, 10, 13, 41, tzinfo=datetime.timezone.utc), 'commenter': 'deveshks', 'type': 'User'}, {'comment_id': 446839187, 'comment_body': ""Let's keep this as is. We can change this later if someone really thinks we should."", 'comment_created': datetime.datetime(2020, 6, 29, 7, 56, 15, tzinfo=datetime.timezone.utc), 'commenter': 'pradyunsg', 'type': 'User'}, {'comment_id': 446840073, 'comment_body': ""Either works, and since no one feels strongly either way; let's keep what's in the PR right now. :)"", 'comment_created': datetime.datetime(2020, 6, 29, 7, 57, 53, tzinfo=datetime.timezone.utc), 'commenter': 'pradyunsg', 'type': 'User'}]","[{'commit_sha': '6bb0d289f8e6a4109b8907f1e3b7b30e389b1b29', 'committer_username': 'McSinyx', 'committer_name': None, 'committer_email': 'cnx@loang.net', 'commit_date': datetime.datetime(2015, 8, 7, 4, 35, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'eb2deab2f64664553db95ff6fbd03103445dfe78', 'committer_username': 'McSinyx', 'committer_name': None, 'committer_email': 'cnx@loang.net', 'commit_date': datetime.datetime(2015, 8, 7, 4, 35, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8b5ff72a13b29d86ca4e8a5d475f46acd1637d35', 'committer_username': 'McSinyx', 'committer_name': None, 'committer_email': 'cnx@loang.net', 'commit_date': datetime.datetime(2015, 8, 7, 4, 35, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '343f863785bd1477c5bf2b5686577a8da7f455e0', 'committer_username': 'pradyunsg', 'committer_name': 'Pradyun Gedam', 'committer_email': None, 'commit_date': datetime.datetime(2013, 1, 15, 13, 45, 19, tzinfo=datetime.timezone.utc)}]",,13689192,cnx@loang.net,User,,36,,44,62
456733576,Abstract away AbstractDistribution in higher-level resolver code,This (hopefully) simplifies the implementation and makes the logic a bit more obvious.,True,8629,https://api.github.com/repos/pypa/pip/pulls/8629,https://github.com/pypa/pip/pull/8629,closed,30,39,4,1,8,0,0,0,[],2020-07-26 10:50:47+00:00,2020-08-02 18:41:25+00:00,633038.0,"7 days, 7:50:38",[],"[{'commit_sha': 'b795c9a7d6b39eaa5138d51a78d307fbaee96573', 'committer_username': 'McSinyx', 'committer_name': None, 'committer_email': 'cnx@loang.net', 'commit_date': datetime.datetime(2015, 8, 7, 4, 35, 24, tzinfo=datetime.timezone.utc)}]",,13689192,cnx@loang.net,User,,36,,44,62
434633597,Mockup partial wheel download during resolvelib resolution,"This is open to facilitate discussions relevant GH-7819.  I believe that dry run could be done by injecting `print` and `exit` after the resolution is complete, so I'll focus on the matter of real installation:

1. For pure-python wheel this (the idea) is kinda nice.  For project released under GPL the metadata is somewhere in the last 32 kB, and it's 8 kB for others (GPL is long :smile:).
2. The trick doesn't seem to work with extensions, or at least not with manylinux, although IIRC rarely one will have multiple extension requirements at the same time for parallel to make sense.  Edit: I'm gonna investigate this tomorrow, but there might be something with the wheel reparation (auditwheel) maybe?
3. If hashing is required, of course this doesn't work.

After resolution, the undownloaded wheels can be downloaded in parallel, which warranties a higher number (> 5 vs < 5 I guess) of packages to download at the same time.

For local test run, I used `oslo-utils=1.4.0` for pure-python with heavy backtracking and `axuy` for something depending on extension modules (`numpy` in this case).

cc @pradyunsg, @cosmicexplorer, @ofek and @dholth specifically for opinions on the approach.",False,8442,https://api.github.com/repos/pypa/pip/pulls/8442,https://github.com/pypa/pip/pull/8442,closed,84,94,3,1,15,0,0,0,[],2020-06-15 16:02:03+00:00,2020-06-24 01:33:57+00:00,725514.0,"8 days, 9:31:54",[],"[{'commit_sha': '2f57690e0d171e80640c51b4d9f629d7ee34fef3', 'committer_username': 'McSinyx', 'committer_name': None, 'committer_email': 'cnx@loang.net', 'commit_date': datetime.datetime(2015, 8, 7, 4, 35, 24, tzinfo=datetime.timezone.utc)}]",,13689192,cnx@loang.net,User,,36,,44,62
444121022,Use lazy wheel to obtain dep info for new resolver,"This PR is created to continue the path to implement GH-7819 (this is half way there).  I file this a bit early to iron out the UX that we'd want to have.  At the time of writing, the patch produce something like the following, which IMHO a bit too verbose
<details><summary>Installation of django-rest-swagger</summary><p>

```console
$ pip install django-rest-swagger --no-cache
Collecting django-rest-swagger
  Obtaining dependency information from django-rest-swagger 2.2.0
Collecting openapi-codec>=1.3.1
  Downloading openapi-codec-1.3.2.tar.gz (6.3 kB)
Collecting coreapi>=2.3.0
  Obtaining dependency information from coreapi 2.3.3
Collecting itypes
  Obtaining dependency information from itypes 1.2.0
Collecting coreschema
  Downloading coreschema-0.0.4.tar.gz (10 kB)
Collecting uritemplate
  Obtaining dependency information from uritemplate 3.0.1
Collecting djangorestframework>=3.5.4
  Obtaining dependency information from djangorestframework 3.11.0
Collecting jinja2
  Obtaining dependency information from jinja2 2.11.2
Collecting MarkupSafe>=0.23
  Obtaining dependency information from markupsafe 1.1.1
Collecting django>=1.11
  Obtaining dependency information from django 3.0.8
Collecting sqlparse>=0.2.2
  Obtaining dependency information from sqlparse 0.3.1
Collecting asgiref~=3.2
  Obtaining dependency information from asgiref 3.2.10
Collecting pytz
  Obtaining dependency information from pytz 2020.1
Collecting simplejson
  Downloading simplejson-3.17.0.tar.gz (83 kB)
     |████████████████████████████████| 83 kB 666 kB/s 
Collecting requests
  Obtaining dependency information from requests 2.24.0
Collecting chardet<4,>=3.0.2
  Obtaining dependency information from chardet 3.0.4
Collecting idna<3,>=2.5
  Obtaining dependency information from idna 2.10
Collecting urllib3!=1.25.0,!=1.25.1,<1.26,>=1.21.1
  Obtaining dependency information from urllib3 1.25.9
Collecting certifi>=2017.4.17
  Obtaining dependency information from certifi 2020.6.20
Collecting django-rest-swagger
  Downloading django_rest_swagger-2.2.0-py2.py3-none-any.whl (495 kB)
     |████████████████████████████████| 495 kB 329 kB/s 
Collecting coreapi>=2.3.0
  Downloading coreapi-2.3.3-py2.py3-none-any.whl (25 kB)
Collecting itypes
  Downloading itypes-1.2.0-py2.py3-none-any.whl (4.8 kB)
Collecting uritemplate
  Downloading uritemplate-3.0.1-py2.py3-none-any.whl (15 kB)
Collecting djangorestframework>=3.5.4
  Downloading djangorestframework-3.11.0-py3-none-any.whl (911 kB)
     |████████████████████████████████| 911 kB 315 kB/s 
Collecting jinja2
  Downloading Jinja2-2.11.2-py2.py3-none-any.whl (125 kB)
     |████████████████████████████████| 125 kB 691 kB/s 
Collecting MarkupSafe>=0.23
  Downloading MarkupSafe-1.1.1-cp38-cp38-manylinux1_x86_64.whl (32 kB)
Collecting django>=1.11
  Downloading Django-3.0.8-py3-none-any.whl (7.5 MB)
     |████████████████████████████████| 7.5 MB 624 kB/s 
Collecting sqlparse>=0.2.2
  Downloading sqlparse-0.3.1-py2.py3-none-any.whl (40 kB)
     |████████████████████████████████| 40 kB 1.5 MB/s 
Collecting asgiref~=3.2
  Downloading asgiref-3.2.10-py3-none-any.whl (19 kB)
Collecting pytz
  Downloading pytz-2020.1-py2.py3-none-any.whl (510 kB)
     |████████████████████████████████| 510 kB 73 kB/s 
Collecting requests
  Downloading requests-2.24.0-py2.py3-none-any.whl (61 kB)
     |████████████████████████████████| 61 kB 1.0 MB/s 
Collecting chardet<4,>=3.0.2
  Downloading chardet-3.0.4-py2.py3-none-any.whl (133 kB)
     |████████████████████████████████| 133 kB 827 kB/s 
Collecting idna<3,>=2.5
  Downloading idna-2.10-py2.py3-none-any.whl (58 kB)
     |████████████████████████████████| 58 kB 1.1 MB/s 
Collecting urllib3!=1.25.0,!=1.25.1,<1.26,>=1.21.1
  Downloading urllib3-1.25.9-py2.py3-none-any.whl (126 kB)
     |████████████████████████████████| 126 kB 820 kB/s 
Collecting certifi>=2017.4.17
  Downloading certifi-2020.6.20-py2.py3-none-any.whl (156 kB)
     |████████████████████████████████| 156 kB 706 kB/s 
Using legacy setup.py install for openapi-codec, since package 'wheel' is not installed.
Using legacy setup.py install for coreschema, since package 'wheel' is not installed.
Using legacy setup.py install for simplejson, since package 'wheel' is not installed.
Installing collected packages: MarkupSafe, urllib3, jinja2, idna, chardet, certifi, uritemplate, sqlparse, requests, pytz, itypes, coreschema, asgiref, django, coreapi, simplejson, openapi-codec, djangorestframework, django-rest-swagger
    Running setup.py install for coreschema ... done
    Running setup.py install for simplejson ... done
    Running setup.py install for openapi-codec ... done
Successfully installed MarkupSafe-1.1.1 asgiref-3.2.10 certifi-2020.6.20 chardet-3.0.4 coreapi-2.3.3 coreschema-0.0.4 django-3.0.8 django-rest-swagger-2.2.0 djangorestframework-3.11.0 idna-2.10 itypes-1.2.0 jinja2-2.11.2 openapi-codec-1.3.2 pytz-2020.1 requests-2.24.0 simplejson-3.17.0 sqlparse-0.3.1 uritemplate-3.0.1 urllib3-1.25.9
```

</p></details>

cc @cosmicexplorer for review and other thoughts on the lazy wheel

cc @nlhkabu and @ei8fdb for the UI/UX

TODOs:
- [x] Make all tests passes
- [x] Make the optimization available only as an opt-in via `--use-feature`
- [x] Add functional tests for the opt-in",False,8532,https://api.github.com/repos/pypa/pip/pulls/8532,https://github.com/pypa/pip/pull/8532,closed,119,34,11,5,10,18,0,0,[],2020-07-03 15:57:19+00:00,2020-07-16 09:04:11+00:00,1098412.0,"12 days, 17:06:52","[{'comment_id': 449885083, 'comment_body': 'Why would a Runtime Error be raised here? ', 'comment_created': datetime.datetime(2020, 7, 5, 14, 41, 30, tzinfo=datetime.timezone.utc), 'commenter': 'pradyunsg', 'type': 'User'}, {'comment_id': 449891315, 'comment_body': ""This is raised from the initialization of the lazy wheel object if range requests are not supported by the package index:\r\n\r\nhttps://github.com/pypa/pip/blob/c2350444e1b32801a191cac3b8d9ed9026c48d94/src/pip/_internal/network/lazy_wheel.py#L62-L63\r\n\r\nI don't think RuntimeError is descriptive though so I'm open for suggestion."", 'comment_created': datetime.datetime(2020, 7, 5, 15, 47, 2, tzinfo=datetime.timezone.utc), 'commenter': 'McSinyx', 'type': 'User'}, {'comment_id': 449895587, 'comment_body': ""I'd suggest raising a specific exception subclass and instead of suppressing it, to logger.debug when that happens."", 'comment_created': datetime.datetime(2020, 7, 5, 16, 34, 31, tzinfo=datetime.timezone.utc), 'commenter': 'pradyunsg', 'type': 'User'}, {'comment_id': 449974725, 'comment_body': 'ad5d3dc94e9dcbbb749bb350ba0c958cbd57279f used `HTTPRangeRequestUnsupported`.  Do you think that name is a bit too long?  Also, how about the log message?\r\n\r\nhttps://github.com/pypa/pip/blob/ad5d3dc94e9dcbbb749bb350ba0c958cbd57279f/src/pip/_internal/resolution/resolvelib/candidates.py#L322-L326', 'comment_created': datetime.datetime(2020, 7, 6, 4, 13, 21, tzinfo=datetime.timezone.utc), 'commenter': 'McSinyx', 'type': 'User'}, {'comment_id': 450331866, 'comment_body': 'HTTPRangeRequestUnsupported is a good exception name', 'comment_created': datetime.datetime(2020, 7, 6, 16, 15, 9, tzinfo=datetime.timezone.utc), 'commenter': 'dholth', 'type': 'User'}, {'comment_id': 450389896, 'comment_body': 'This also needs a warning to be printed that this functionality is *not* stable and not meant for production use at this time.', 'comment_created': datetime.datetime(2020, 7, 6, 17, 58, 58, tzinfo=datetime.timezone.utc), 'commenter': 'pradyunsg', 'type': 'User'}, {'comment_id': 450393567, 'comment_body': '```suggestion\r\n        preparer = self._factory.preparer\r\n        lazy_wheel = self._factory.lazy_wheel\r\n```', 'comment_created': datetime.datetime(2020, 7, 6, 18, 5, 35, tzinfo=datetime.timezone.utc), 'commenter': 'pradyunsg', 'type': 'User'}, {'comment_id': 450400938, 'comment_body': 'I feel like `lazy-wheel` is not a good name for this feature -- for the user-facing parts or within the pip codebase. OTOH, I wonder what else we could call this?\r\n\r\nThis is performing partial downloads of wheel files, to only download the metadata necessary. So, maybe `partial-wheel-metadata-download`?\r\n', 'comment_created': datetime.datetime(2020, 7, 6, 18, 20, 19, tzinfo=datetime.timezone.utc), 'commenter': 'pradyunsg', 'type': 'User'}, {'comment_id': 450401610, 'comment_body': '```suggestion\r\n        self._use_lazy_wheel = lazy_wheel\r\n```\r\n\r\nI\'d like us to have a ""_use_"" prefix to this variable, to indicate that it\'s a boolean.\r\n', 'comment_created': datetime.datetime(2020, 7, 6, 18, 21, 32, tzinfo=datetime.timezone.utc), 'commenter': 'pradyunsg', 'type': 'User'}, {'comment_id': 450402053, 'comment_body': '```suggestion\r\nclass HTTPRangeRequestUnsupported(Exception):\r\n```\r\n', 'comment_created': datetime.datetime(2020, 7, 6, 18, 22, 22, tzinfo=datetime.timezone.utc), 'commenter': 'pradyunsg', 'type': 'User'}, {'comment_id': 453990496, 'comment_body': ""Are any of these tests exercising the new code? It will only impact the network tests, and there aren't many in our unit tests. Personally I'd trade all of these for 1 or 2 integration tests where we know the new code is being used. werkzeug (which we build on for our [mock server](https://github.com/pypa/pip/blob/77ead320b02d7922030f3fd36a41b05fa686f1e8/tests/lib/server.py#L97) test helper) has some built-in helpers for handling range requests so we could do all of this locally, without reaching out to PyPI. The PR in pallets/werkzeug#977 might provide some help in using it."", 'comment_created': datetime.datetime(2020, 7, 13, 22, 47, 48, tzinfo=datetime.timezone.utc), 'commenter': 'chrahunt', 'type': 'User'}, {'comment_id': 453990728, 'comment_body': ""The `RequirementPreparer` currently hides all details about the way that we're accessing distributions, so the only thing that the Candidate needs to be aware of is the abstract distribution after preparing. If we put the lazy wheel logic there instead (probably used to create the abstract distribution), then:\r\n\r\n1. it preserves that separation of concerns, with all of the associated benefits\r\n2. we get more code reuse, since the lazy-wheel-backed abstract distribution would follow the same path as the eager-wheel-backed one, with all of the associated benefits\r\n2. it gives us control over whether the wheel download is actually lazy - IIUC currently we're relying on the fact that no one happens to access `_InstallRequirementBackedCandidate.dist` prior to `iter_dependencies()`\r\n3. it gives us control over when the real wheel download happens - IIUC currently we're relying on the fact that someone happens to access `_InstallRequirementBackedCandidate.dist` before actually trying to install the wheel\r\n4. it works when we compose candidates, like in `ExtrasCandidate`, which currently directly accesses `self.base.dist` and bypasses the lazy wheel logic"", 'comment_created': datetime.datetime(2020, 7, 13, 22, 48, 31, tzinfo=datetime.timezone.utc), 'commenter': 'chrahunt', 'type': 'User'}, {'comment_id': 454003277, 'comment_body': ""To add on to this, because of the code that we're touching, these are the specific integration tests I think would give us the most impact:\r\n\r\n1. `pip wheel`\r\n2. `pip download`\r\n3. `pip install` of a wheel that has extras that are also wheels\r\n\r\nOne approach would be to find existing integration tests, then convert them to use our mock server and then parameterize which mock server to use: plain one or range-request-supporting one."", 'comment_created': datetime.datetime(2020, 7, 13, 23, 26, 23, tzinfo=datetime.timezone.utc), 'commenter': 'chrahunt', 'type': 'User'}, {'comment_id': 454397832, 'comment_body': ""Oooo! I missed `ExtrasCandidate` when I discussed this w/ @McSinyx.\r\n\r\nI think we can cover this by changing how self.dist is populated (instead of changing how iter_dependencies works), since what's really happening in `_iter_dependencies` -- we're creating a separate distribution object and using it.\r\n"", 'comment_created': datetime.datetime(2020, 7, 14, 14, 28, 2, tzinfo=datetime.timezone.utc), 'commenter': 'pradyunsg', 'type': 'User'}, {'comment_id': 454667373, 'comment_body': 'Similar to what was done in #8448.', 'comment_created': datetime.datetime(2020, 7, 14, 21, 52, 45, tzinfo=datetime.timezone.utc), 'commenter': 'chrahunt', 'type': 'User'}, {'comment_id': 454908517, 'comment_body': ""@pradyunsg, I think we did discuss point (5) and what you came up with (1a28d089e03af2c86b65c560c95aadaedd117cbe) will handle it just fine.  So now we came to a consensus on how to cover the listed points above, which is different from what this PR is pushing, I'm thinking about filing another one (likely within today) to avoid intensive rebasing which I'm not exactly good at :smile:\r\n\r\n@chrahunt, thank you for the thoughtful heads up as well as the tips on testing."", 'comment_created': datetime.datetime(2020, 7, 15, 9, 12, 41, tzinfo=datetime.timezone.utc), 'commenter': 'McSinyx', 'type': 'User'}, {'comment_id': 455611727, 'comment_body': ""I'll keep it exposed since it's used in another model BTW."", 'comment_created': datetime.datetime(2020, 7, 16, 8, 23, 25, tzinfo=datetime.timezone.utc), 'commenter': 'McSinyx', 'type': 'User'}, {'comment_id': 455617144, 'comment_body': ""I'll keep in mind that this is the prefered style."", 'comment_created': datetime.datetime(2020, 7, 16, 8, 32, 1, tzinfo=datetime.timezone.utc), 'commenter': 'McSinyx', 'type': 'User'}]","[{'commit_sha': 'a073856bf4681adebc7f6e9029f4dc128c5d5911', 'committer_username': 'McSinyx', 'committer_name': None, 'committer_email': 'cnx@loang.net', 'commit_date': datetime.datetime(2015, 8, 7, 4, 35, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd718192a8c4c08cd1ca26c22f9a9f96488745c79', 'committer_username': 'McSinyx', 'committer_name': None, 'committer_email': 'cnx@loang.net', 'commit_date': datetime.datetime(2015, 8, 7, 4, 35, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c127459c13c6ca9e74ea5c6873a708ee3edf93a4', 'committer_username': 'McSinyx', 'committer_name': None, 'committer_email': 'cnx@loang.net', 'commit_date': datetime.datetime(2015, 8, 7, 4, 35, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4db613ca87b02cf3ecbb0ca34f6357aef8b80a73', 'committer_username': 'McSinyx', 'committer_name': None, 'committer_email': 'cnx@loang.net', 'commit_date': datetime.datetime(2015, 8, 7, 4, 35, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c53aeac2973c46ce22caff5ce3cc8e88312b6ca8', 'committer_username': 'McSinyx', 'committer_name': None, 'committer_email': 'cnx@loang.net', 'commit_date': datetime.datetime(2015, 8, 7, 4, 35, 24, tzinfo=datetime.timezone.utc)}]",,13689192,cnx@loang.net,User,,36,,44,62
450027970,Use lazy wheel to obtain dep info for new resolver,"TODOs:
- [x] Finish GH-8584 for HTTPRangeRequestUnsupported
- [x] Add functional tests",True,8588,https://api.github.com/repos/pypa/pip/pulls/8588,https://github.com/pypa/pip/pull/8588,closed,124,16,9,3,4,8,0,0,[],2020-07-16 09:02:20+00:00,2020-07-24 03:31:57+00:00,671377.0,"7 days, 18:29:37","[{'comment_id': 457922856, 'comment_body': 'Suggestion for future PRs: keep ""moved code"" changes separate from functional changes, by making them in separate commits. It makes it easier to keep track of what changed. :)', 'comment_created': datetime.datetime(2020, 7, 21, 8, 22, 36, tzinfo=datetime.timezone.utc), 'commenter': 'pradyunsg', 'type': 'User'}, {'comment_id': 457923685, 'comment_body': 'This needs to be updated.', 'comment_created': datetime.datetime(2020, 7, 21, 8, 23, 54, tzinfo=datetime.timezone.utc), 'commenter': 'pradyunsg', 'type': 'User'}, {'comment_id': 457935644, 'comment_body': ""I'll do it for this one too, since I have a rebase to do."", 'comment_created': datetime.datetime(2020, 7, 21, 8, 44, 9, tzinfo=datetime.timezone.utc), 'commenter': 'McSinyx', 'type': 'User'}, {'comment_id': 457947974, 'comment_body': ""Thank you for the reminder.  I've just rebased everything, so I think you might want to take a second look to make sure that everything is alright."", 'comment_created': datetime.datetime(2020, 7, 21, 9, 4, 14, tzinfo=datetime.timezone.utc), 'commenter': 'McSinyx', 'type': 'User'}, {'comment_id': 458094801, 'comment_body': ""```suggestion\r\nauthor = 'A Random Developer'\r\n```\r\n\r\n"", 'comment_created': datetime.datetime(2020, 7, 21, 13, 26, 42, tzinfo=datetime.timezone.utc), 'commenter': 'pradyunsg', 'type': 'User'}, {'comment_id': 458856968, 'comment_body': 'This is actually taken from [the packaging guide from python.org](https://packaging.python.org/guides/distributing-packages-using-setuptools/#author).  I think they intended to make `A.` looks like initial of a real person name :smile:', 'comment_created': datetime.datetime(2020, 7, 22, 14, 57, 13, tzinfo=datetime.timezone.utc), 'commenter': 'McSinyx', 'type': 'User'}, {'comment_id': 459107315, 'comment_body': ""Hmm... this isn't as funny now as it was in my head when I suggested the change. :)"", 'comment_created': datetime.datetime(2020, 7, 22, 21, 57, 19, tzinfo=datetime.timezone.utc), 'commenter': 'pradyunsg', 'type': 'User'}, {'comment_id': 459264571, 'comment_body': ""Not entirely related but this reminds me of [SICP's characters](https://en.wikipedia.org/wiki/Structure_and_Interpretation_of_Computer_Programs#Characters)."", 'comment_created': datetime.datetime(2020, 7, 23, 7, 35, 2, tzinfo=datetime.timezone.utc), 'commenter': 'McSinyx', 'type': 'User'}]","[{'commit_sha': '2152a51b8c580570a105cf8b0139ad77f60f3720', 'committer_username': 'McSinyx', 'committer_name': None, 'committer_email': 'cnx@loang.net', 'commit_date': datetime.datetime(2015, 8, 7, 4, 35, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5d152912746ebe92a04c5571d6b59fd9e4580281', 'committer_username': 'McSinyx', 'committer_name': None, 'committer_email': 'cnx@loang.net', 'commit_date': datetime.datetime(2015, 8, 7, 4, 35, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4efae5c21a60d3475dfed45ed12acf39e3b55c21', 'committer_username': 'McSinyx', 'committer_name': None, 'committer_email': 'cnx@loang.net', 'commit_date': datetime.datetime(2015, 8, 7, 4, 35, 24, tzinfo=datetime.timezone.utc)}]",,13689192,cnx@loang.net,User,,36,,44,62
461871301,Move fast-dep handling to RequirementPreparer,"This PR moves our new fast-dep lazy wheel handling to `RequirementPreparer`, addressing comments on #8532 that I neglected to follow up on in #8588.

To hopefully support that this approach will leave us happy and carefree, in the last commit I also added a hook to download lazy wheels once we're certain we're going to install them (as an alternative to #8638).",True,8685,https://api.github.com/repos/pypa/pip/pulls/8685,https://github.com/pypa/pip/pull/8685,closed,92,51,7,18,1,7,1,0,[{'name': 'skip news'}],2020-08-02 22:45:00+00:00,2020-08-04 13:16:57+00:00,138717.0,"1 day, 14:31:57","[{'comment_id': 464304046, 'comment_body': ""I'm wondering about these checks: what is the difference from _check_metadata_consistency?  I initially thought that these are to fail early, but assertions are not executed in compiled code."", 'comment_created': datetime.datetime(2020, 8, 3, 9, 37, 32, tzinfo=datetime.timezone.utc), 'commenter': 'McSinyx', 'type': 'User'}, {'comment_id': 464304642, 'comment_body': 'Thanks, this is fantastic!', 'comment_created': datetime.datetime(2020, 8, 3, 9, 38, 37, tzinfo=datetime.timezone.utc), 'commenter': 'McSinyx', 'type': 'User'}, {'comment_id': 464416765, 'comment_body': ""We use assertions to:\r\n\r\n1. express assumptions that we're operating under, and that the code may depend on\r\n2. enforce invariants in objects\r\n3. generally to guard against developer errors (as opposed to user errors, which should raise)\r\n\r\nIn this case, I switched to extracting the name and version from the link in 9e46391, but didn't feel like ignoring the existing name and version was the right thing to do. Because of the way we do processing the assertions are true now, but that may change later and we'd want to catch it if it does.\r\n\r\nAs far as I know assertions are only disabled when optimization is turned on, so I'd expect in the majority of cases (like our tests and anyone using default Python options) the assertions will execute."", 'comment_created': datetime.datetime(2020, 8, 3, 13, 35, 8, tzinfo=datetime.timezone.utc), 'commenter': 'chrahunt', 'type': 'User'}, {'comment_id': 464434895, 'comment_body': ""Thank you for the insight, I think I've just learnt something new today."", 'comment_created': datetime.datetime(2020, 8, 3, 14, 4, 44, tzinfo=datetime.timezone.utc), 'commenter': 'McSinyx', 'type': 'User'}, {'comment_id': 464759379, 'comment_body': ""This is probably something we can do in a follow-up, but we should add logging here, to denote which branch we're going through, and introduce early returns to make the flow cleaner.\r\n\r\n```py\r\nif not preparer.use_lazy_wheel:\r\n    return None\r\n\r\nif preparer.require_hashes:\r\n    logger.debug(...)\r\n    return None\r\n\r\nif link.is_file or not link.is_wheel:\r\n    logger.debug(...)\r\n    return None\r\n\r\n<all the logic, currently inside if block>\r\n```"", 'comment_created': datetime.datetime(2020, 8, 4, 2, 17, 38, tzinfo=datetime.timezone.utc), 'commenter': 'pradyunsg', 'type': 'User'}, {'comment_id': 465041298, 'comment_body': ""Let's do this in a follow up. @McSinyx wanna pick this up? :)"", 'comment_created': datetime.datetime(2020, 8, 4, 13, 15, 23, tzinfo=datetime.timezone.utc), 'commenter': 'pradyunsg', 'type': 'User'}, {'comment_id': 465041992, 'comment_body': ""Yes I'm glad to."", 'comment_created': datetime.datetime(2020, 8, 4, 13, 16, 27, tzinfo=datetime.timezone.utc), 'commenter': 'McSinyx', 'type': 'User'}]","[{'commit_sha': 'd957cc94c8ff9e83503f0a509ecbc90b61180775', 'committer_username': 'chrahunt', 'committer_name': 'Chris Hunt', 'committer_email': 'chrahunt@gmail.com', 'commit_date': datetime.datetime(2012, 9, 9, 17, 23, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7289625734e07f425a616727c2c9925a9df724d8', 'committer_username': 'chrahunt', 'committer_name': 'Chris Hunt', 'committer_email': 'chrahunt@gmail.com', 'commit_date': datetime.datetime(2012, 9, 9, 17, 23, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7a5e043776d6601f1c425e7a18a4b6a1538baa99', 'committer_username': 'chrahunt', 'committer_name': 'Chris Hunt', 'committer_email': 'chrahunt@gmail.com', 'commit_date': datetime.datetime(2012, 9, 9, 17, 23, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4d94ae4c40dd6a22bf0062c4e899aa23bc09250d', 'committer_username': 'chrahunt', 'committer_name': 'Chris Hunt', 'committer_email': 'chrahunt@gmail.com', 'commit_date': datetime.datetime(2012, 9, 9, 17, 23, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8c3c0ade7831d7e82b2390d1fcd1f41c1b0e80f7', 'committer_username': 'chrahunt', 'committer_name': 'Chris Hunt', 'committer_email': 'chrahunt@gmail.com', 'commit_date': datetime.datetime(2012, 9, 9, 17, 23, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a72d04f734150992328442113ee9df3ce2f2fb00', 'committer_username': 'chrahunt', 'committer_name': 'Chris Hunt', 'committer_email': 'chrahunt@gmail.com', 'commit_date': datetime.datetime(2012, 9, 9, 17, 23, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ec5b6d7b8091b80533d3f2268eb3df16ad3d19f6', 'committer_username': 'chrahunt', 'committer_name': 'Chris Hunt', 'committer_email': 'chrahunt@gmail.com', 'commit_date': datetime.datetime(2012, 9, 9, 17, 23, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': '45ab317610a0e713c515d405d39f79c8746a5056', 'committer_username': 'chrahunt', 'committer_name': 'Chris Hunt', 'committer_email': 'chrahunt@gmail.com', 'commit_date': datetime.datetime(2012, 9, 9, 17, 23, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e49dcfdc35e7c941df1fc7388adb78c1981496ce', 'committer_username': 'chrahunt', 'committer_name': 'Chris Hunt', 'committer_email': 'chrahunt@gmail.com', 'commit_date': datetime.datetime(2012, 9, 9, 17, 23, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f0d4df10eb8f757f6bfb66aa5f3ed34629866447', 'committer_username': 'chrahunt', 'committer_name': 'Chris Hunt', 'committer_email': 'chrahunt@gmail.com', 'commit_date': datetime.datetime(2012, 9, 9, 17, 23, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f4603078cf0ba6415612a3130dc85c57f5337b0e', 'committer_username': 'chrahunt', 'committer_name': 'Chris Hunt', 'committer_email': 'chrahunt@gmail.com', 'commit_date': datetime.datetime(2012, 9, 9, 17, 23, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'defbf82a8fba7c1e3e8cc0e4dcf83fbd313b33df', 'committer_username': 'chrahunt', 'committer_name': 'Chris Hunt', 'committer_email': 'chrahunt@gmail.com', 'commit_date': datetime.datetime(2012, 9, 9, 17, 23, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9e463916d0077d8db6f616c72ec35b80fa289af5', 'committer_username': 'chrahunt', 'committer_name': 'Chris Hunt', 'committer_email': 'chrahunt@gmail.com', 'commit_date': datetime.datetime(2012, 9, 9, 17, 23, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4e1bff741dba2a15035a949c380b440bbce13927', 'committer_username': 'chrahunt', 'committer_name': 'Chris Hunt', 'committer_email': 'chrahunt@gmail.com', 'commit_date': datetime.datetime(2012, 9, 9, 17, 23, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6c4d4f3b78f54fe305da9882b37a1d88769a4d23', 'committer_username': 'chrahunt', 'committer_name': 'Chris Hunt', 'committer_email': 'chrahunt@gmail.com', 'commit_date': datetime.datetime(2012, 9, 9, 17, 23, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': '21db4f3096c3a907a7168152872d36bba97e27f1', 'committer_username': 'chrahunt', 'committer_name': 'Chris Hunt', 'committer_email': 'chrahunt@gmail.com', 'commit_date': datetime.datetime(2012, 9, 9, 17, 23, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c7ade159d46ba0b2ffc0cd1c2b61f721678d00bd', 'committer_username': 'chrahunt', 'committer_name': 'Chris Hunt', 'committer_email': 'chrahunt@gmail.com', 'commit_date': datetime.datetime(2012, 9, 9, 17, 23, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8b838ebb89c521cd92dd7a1c7cec075c3b30d72f', 'committer_username': 'chrahunt', 'committer_name': 'Chris Hunt', 'committer_email': 'chrahunt@gmail.com', 'commit_date': datetime.datetime(2012, 9, 9, 17, 23, 13, tzinfo=datetime.timezone.utc)}]",Chris Hunt,2312275,chrahunt@gmail.com,User,,114,,3,85
465562412,Test hash checking for fast-deps,"Just realized that I missed that hash checking :sweat:  Guess I'll need to write a test to automate the check for fast-deps before this happens again.

_Originally posted by @McSinyx in https://github.com/pypa/pip/pull/8737#issuecomment-671219958_

This PR does exactly that ^

Edit: *sigh* Python 2 compatibility",True,8743,https://api.github.com/repos/pypa/pip/pulls/8743,https://github.com/pypa/pip/pull/8743,closed,29,0,2,1,3,0,0,0,[],2020-08-10 15:12:04+00:00,2020-08-18 13:55:08+00:00,686584.0,"7 days, 22:43:04",[],"[{'commit_sha': '14397418d178bdc20c8084d39c1219d08425dbd3', 'committer_username': 'McSinyx', 'committer_name': None, 'committer_email': 'cnx@loang.net', 'commit_date': datetime.datetime(2015, 8, 7, 4, 35, 24, tzinfo=datetime.timezone.utc)}]",,13689192,cnx@loang.net,User,,36,,44,62
473282198,[fast-deps] Check download directory before making requests,,True,8804,https://api.github.com/repos/pypa/pip/pulls/8804,https://github.com/pypa/pip/pull/8804,closed,23,14,2,2,2,2,0,0,[],2020-08-25 15:22:09+00:00,2020-10-01 22:11:44+00:00,3221375.0,"37 days, 6:49:35","[{'comment_id': 498240109, 'comment_body': ""We should add comments here to aid the understanding of the control flow. I'd also move the `file_path` variable out of the `if` to avoid the single-statement else branch.\r\n\r\n```suggestion\r\n            # Check if the relevant file is already available in the download directory\r\n            file_path = None\r\n            download_dir = self._get_download_dir(req.link)\r\n            if download_dir is not None and link.is_wheel:\r\n                hashes = self._get_linked_req_hashes(req)\r\n                file_path = _check_download_dir(req.link, download_dir, hashes)\r\n\r\n            if file_path is not None:\r\n                # The file is already available, so mark it as downloaded\r\n                self._downloaded[req.link.url] = file_path, None\r\n            else:\r\n                # The file is not available, attempt to fetch only metadata.\r\n                wheel_dist = self._fetch_metadata_using_lazy_wheel(link)\r\n                if wheel_dist is not None:\r\n                    req.needs_more_preparation = True\r\n                    return wheel_dist\r\n            \r\n            # None of the optimizations worked, fully prepare the requirement.\r\n            return self._prepare_linked_requirement(req, parallel_builds)\r\n```"", 'comment_created': datetime.datetime(2020, 10, 1, 13, 23, 14, tzinfo=datetime.timezone.utc), 'commenter': 'pradyunsg', 'type': 'User'}, {'comment_id': 498264961, 'comment_body': 'Thanks, this is easier to understand for me as now most of the details are freed from my biological RAM :smile:', 'comment_created': datetime.datetime(2020, 10, 1, 13, 57, 32, tzinfo=datetime.timezone.utc), 'commenter': 'McSinyx', 'type': 'User'}]","[{'commit_sha': 'c947d00882ef6f12cbae1bfb71bc2677c4d2a82a', 'committer_username': 'McSinyx', 'committer_name': None, 'committer_email': 'cnx@loang.net', 'commit_date': datetime.datetime(2015, 8, 7, 4, 35, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2ef8040495711c7e7e695f80a35e208f7404f879', 'committer_username': 'McSinyx', 'committer_name': None, 'committer_email': 'cnx@loang.net', 'commit_date': datetime.datetime(2015, 8, 7, 4, 35, 24, tzinfo=datetime.timezone.utc)}]",,13689192,cnx@loang.net,User,,36,,44,62
463242978,Revise method fetching metadata using lazy wheels ,This addresses https://github.com/pypa/pip/pull/8685#discussion_r464759379,True,8710,https://api.github.com/repos/pypa/pip/pulls/8710,https://github.com/pypa/pip/pull/8710,closed,36,20,4,2,1,6,0,0,[],2020-08-05 08:50:43+00:00,2020-08-06 14:42:33+00:00,107510.0,"1 day, 5:51:50","[{'comment_id': 465721587, 'comment_body': ""We shouldn't introduce local variables that we don't use."", 'comment_created': datetime.datetime(2020, 8, 5, 13, 21, 32, tzinfo=datetime.timezone.utc), 'commenter': 'chrahunt', 'type': 'User'}, {'comment_id': 465728789, 'comment_body': 'I think if we pass `session` into `RequirementPreparer` that would be easier to refactor later (one class to change, not two), and easier to understand since the `Downloader` interface remains very small.', 'comment_created': datetime.datetime(2020, 8, 5, 13, 32, 30, tzinfo=datetime.timezone.utc), 'commenter': 'chrahunt', 'type': 'User'}, {'comment_id': 465815567, 'comment_body': ""I will revert this back to the `str.split` one—I don't like how it look (too cryptic), but this is probably worse :smile:  Edit: this has been done in bd06594."", 'comment_created': datetime.datetime(2020, 8, 5, 15, 33, 29, tzinfo=datetime.timezone.utc), 'commenter': 'McSinyx', 'type': 'User'}, {'comment_id': 465820299, 'comment_body': ""I am a bit skeptical about this: `RequirementPreparer.__init__` is already taking 11 parameters and a Downloader having a session seems to be natural enough.  I don't have a really strong opinion though, if you really think it's a good idea I'll do it."", 'comment_created': datetime.datetime(2020, 8, 5, 15, 40, 20, tzinfo=datetime.timezone.utc), 'commenter': 'McSinyx', 'type': 'User'}, {'comment_id': 466079568, 'comment_body': 'I think it is a good idea. `RequirementPreparer.__init__` has 11 documented and explicit dependencies that are clear when looking at the class definition and the 2 places it is instantiated. If it works for 11, I think 12 would also be OK. A Downloader needing a session to do its work is reasonable, but to me nothing about ""downloader"" implies that it shares that session with others.', 'comment_created': datetime.datetime(2020, 8, 6, 0, 39, 27, tzinfo=datetime.timezone.utc), 'commenter': 'chrahunt', 'type': 'User'}, {'comment_id': 466320911, 'comment_body': '> nothing about ""downloader"" implies that it shares that session with others.\r\n\r\nAha, I missed this point.  I\'ve adapted the patch to use `RequirementPreparer.session`.\r\n', 'comment_created': datetime.datetime(2020, 8, 6, 10, 34, 45, tzinfo=datetime.timezone.utc), 'commenter': 'McSinyx', 'type': 'User'}]","[{'commit_sha': '487d00295ce0409ab59fd162e328654c6f93afc3', 'committer_username': 'McSinyx', 'committer_name': None, 'committer_email': 'cnx@loang.net', 'commit_date': datetime.datetime(2015, 8, 7, 4, 35, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '11f7994a6690fcce5a1fdaddc9e3c779255cb334', 'committer_username': 'McSinyx', 'committer_name': None, 'committer_email': 'cnx@loang.net', 'commit_date': datetime.datetime(2015, 8, 7, 4, 35, 24, tzinfo=datetime.timezone.utc)}]",,13689192,cnx@loang.net,User,,36,,44,62
464085646,Dedent late download logs,This fixes GH-8721.  The news file is trivial because the behavior described in the issue has never made it into any release. ,True,8722,https://api.github.com/repos/pypa/pip/pulls/8722,https://github.com/pypa/pip/pull/8722,closed,45,48,2,1,4,5,1,0,[{'name': 'type: enhancement'}],2020-08-06 15:03:50+00:00,2020-09-16 12:02:52+00:00,3531542.0,"40 days, 20:59:02","[{'comment_id': 487528643, 'comment_body': 'This seems unrelated to this PR ?', 'comment_created': datetime.datetime(2020, 9, 13, 13, 18, 10, tzinfo=datetime.timezone.utc), 'commenter': 'xavfernandez', 'type': 'User'}, {'comment_id': 487529376, 'comment_body': 'If we have some `reqs` to download, we might want to have a log line explaining that we are finishing the downloads here with an other `indent_log()` ?\r\n\r\nThis would transform:\r\n```\r\n$ pip --use-feature=2020-resolver --use-feature=fast-deps  download scipy\r\nWARNING: pip is using lazily downloaded wheels using HTTP range requests to obtain dependency information. This experimental feature is enabled through --use-feature=fast-deps and it is not ready for production.\r\nCollecting scipy\r\n  Obtaining dependency information from scipy 1.5.2\r\nCollecting numpy>=1.14.5\r\n  Obtaining dependency information from numpy 1.19.2\r\nDownloading scipy-1.5.2-cp38-cp38-manylinux1_x86_64.whl (25.7 MB)\r\n   |████████████████████████████████| 25.7 MB 8.5 MB/s \r\nDownloading numpy-1.19.2-cp38-cp38-manylinux2010_x86_64.whl (14.5 MB)\r\n   |████████████████████████████████| 14.5 MB 25.3 MB/s \r\nSaved ./scipy-1.5.2-cp38-cp38-manylinux1_x86_64.whl\r\nSaved ./numpy-1.19.2-cp38-cp38-manylinux2010_x86_64.whl\r\nSuccessfully downloaded scipy numpy\r\n```\r\nto\r\n```\r\n$ pip --use-feature=2020-resolver --use-feature=fast-deps  download scipy\r\nWARNING: pip is using lazily downloaded wheels using HTTP range requests to obtain dependency information. This experimental feature is enabled through --use-feature=fast-deps and it is not ready for production.\r\nCollecting scipy\r\n  Obtaining dependency information from scipy 1.5.2\r\nCollecting numpy>=1.14.5\r\n  Obtaining dependency information from numpy 1.19.2\r\nCompleting dependencies download\r\n  Downloading scipy-1.5.2-cp38-cp38-manylinux1_x86_64.whl (25.7 MB)\r\n     |████████████████████████████████| 25.7 MB 8.5 MB/s \r\n  Downloading numpy-1.19.2-cp38-cp38-manylinux2010_x86_64.whl (14.5 MB)\r\n     |████████████████████████████████| 14.5 MB 25.3 MB/s \r\nSaved ./scipy-1.5.2-cp38-cp38-manylinux1_x86_64.whl\r\nSaved ./numpy-1.19.2-cp38-cp38-manylinux2010_x86_64.whl\r\nSuccessfully downloaded scipy numpy\r\n```\r\n?', 'comment_created': datetime.datetime(2020, 9, 13, 13, 25, 47, tzinfo=datetime.timezone.utc), 'commenter': 'xavfernandez', 'type': 'User'}, {'comment_id': 487533513, 'comment_body': ""It seems so, I'll revert the line."", 'comment_created': datetime.datetime(2020, 9, 13, 14, 4, 2, tzinfo=datetime.timezone.utc), 'commenter': 'McSinyx', 'type': 'User'}, {'comment_id': 487533982, 'comment_body': ""Thanks for the review!  Would it be OK to delay to GH-8771?  I have no problem implemented what you're suggesting though (nor I have any strong opinion favoring either the this PR's current implementation or your suggestion)."", 'comment_created': datetime.datetime(2020, 9, 13, 14, 8, 18, tzinfo=datetime.timezone.utc), 'commenter': 'McSinyx', 'type': 'User'}, {'comment_id': 489382254, 'comment_body': '> Would it be OK to delay to GH-8771?\r\n\r\nSure :)', 'comment_created': datetime.datetime(2020, 9, 16, 12, 2, 3, tzinfo=datetime.timezone.utc), 'commenter': 'xavfernandez', 'type': 'User'}]","[{'commit_sha': '8f8a1d65b2d6b68dcfad6946ee9e24f76d867fe5', 'committer_username': 'McSinyx', 'committer_name': None, 'committer_email': 'cnx@loang.net', 'commit_date': datetime.datetime(2015, 8, 7, 4, 35, 24, tzinfo=datetime.timezone.utc)}]",,13689192,cnx@loang.net,User,,36,,44,62

465168592,[fast-deps] Add a hook for batch downloading,"This is the first stab at GH-8697 and aim to:

* Add a separate hook to pass all links wheels whose downloads are postponed to Downloader, thus e.g. UI handling can be encapsulated at Downloader.download_many
* Memoize the downloaded files by the call above so that _prepare_linked_requirement can use them naturally use them

@pradyunsg and @chrahunt, I hope this is going in the correct direction of what we discussed.",True,8737,https://api.github.com/repos/pypa/pip/pulls/8737,https://github.com/pypa/pip/pull/8737,closed,128,108,7,6,9,21,0,0,[],2020-08-09 15:53:06+00:00,2020-08-14 05:16:18+00:00,393792.0,"4 days, 13:23:12","[{'comment_id': 467690059, 'comment_body': '- Let\'s break out the filename and content_type into separate variables assigned before this line, so that it\'s very clear what\'s being returned -- simpler, less ""dense"" code is good.\r\n\r\n- Let\'s change the return type here, to be inline with what is returned as part of download_many\'s iterable, which simplifies call sites and `download_many`.\r\n\r\n```suggestion\r\n        content_type = resp.headers.get(\'Content-Type\', \'\')\r\n        return link.url, (filepath, content_type)\r\n```', 'comment_created': datetime.datetime(2020, 8, 10, 5, 9, 28, tzinfo=datetime.timezone.utc), 'commenter': 'pradyunsg', 'type': 'User'}, {'comment_id': 467690227, 'comment_body': ""```suggestion\r\n        filename = _get_http_response_filename(resp, link)\r\n        filepath = os.path.join(location, filename)\r\n\r\n        chunks = _prepare_download(resp, link, self._progress_bar)\r\n        with open(filepath, 'wb') as content_file:\r\n```"", 'comment_created': datetime.datetime(2020, 8, 10, 5, 10, 25, tzinfo=datetime.timezone.utc), 'commenter': 'pradyunsg', 'type': 'User'}, {'comment_id': 467691019, 'comment_body': ""Toward making the function's calling contract more explicit.\r\n\r\n```suggestion\r\n        assert all(req.needs_more_preparation for req in reqs)\r\n\r\n        # TODO: Download directly to download_dir instead of\r\n```"", 'comment_created': datetime.datetime(2020, 8, 10, 5, 14, 41, tzinfo=datetime.timezone.utc), 'commenter': 'pradyunsg', 'type': 'User'}, {'comment_id': 467691260, 'comment_body': ""nit: keep the else block smaller between an if-else.\r\n\r\n```suggestion\r\n            if link.url not in self._downloaded:\r\n                try:\r\n                    local_file = unpack_url(\r\n                        link, req.source_dir, self.downloader, download_dir,\r\n                        hashes=self._get_linked_req_hashes(req)\r\n                    )\r\n                except NetworkConnectionError as exc:\r\n                    raise InstallationError(\r\n                        'Could not install requirement {} because of HTTP '\r\n                        'error {} for URL {}'.format(req, exc, link)\r\n                    )\r\n            else:\r\n                local_file = File(*self._downloaded[link.url])\r\n```"", 'comment_created': datetime.datetime(2020, 8, 10, 5, 15, 52, tzinfo=datetime.timezone.utc), 'commenter': 'pradyunsg', 'type': 'User'}, {'comment_id': 467693157, 'comment_body': 'See above comment about changing return type of `download_one`.\r\n\r\n```suggestion\r\n            yield self.download_one(link, location)\r\n```', 'comment_created': datetime.datetime(2020, 8, 10, 5, 26, 3, tzinfo=datetime.timezone.utc), 'commenter': 'pradyunsg', 'type': 'User'}, {'comment_id': 467898948, 'comment_body': ""The status quo was OK, we don't need to add more requirements here. If we think this optimization is worthwhile then we can create a separate issue to address it."", 'comment_created': datetime.datetime(2020, 8, 10, 13, 22, 23, tzinfo=datetime.timezone.utc), 'commenter': 'chrahunt', 'type': 'User'}, {'comment_id': 467903981, 'comment_body': 'If we keep the filtering in `prepare_linked_requirements_more` then the resolver can stay oblivious to the details, and the use of `needs_more_preparation` will only be in this class.', 'comment_created': datetime.datetime(2020, 8, 10, 13, 30, 5, tzinfo=datetime.timezone.utc), 'commenter': 'chrahunt', 'type': 'User'}, {'comment_id': 467904453, 'comment_body': ""As mentioned in another comment, we can move the filtering here. Then we will not need to assert, since we're enforcing."", 'comment_created': datetime.datetime(2020, 8, 10, 13, 30, 49, tzinfo=datetime.timezone.utc), 'commenter': 'chrahunt', 'type': 'User'}, {'comment_id': 467979810, 'comment_body': 'However GitHub generated this diff is a mystery to me :thinking:', 'comment_created': datetime.datetime(2020, 8, 10, 15, 20, 41, tzinfo=datetime.timezone.utc), 'commenter': 'McSinyx', 'type': 'User'}, {'comment_id': 467984939, 'comment_body': ""> Let's change the return type here, to be inline with what is returned as part of download_many's iterable, which simplifies call sites and download_many.\r\n\r\nThe return type of download_many is intended to be similar to that of enumerate, i.e. to keep track of which file belong to which link since probably we don't want to warranty it to retain the order.  Currently that method is only a placeholder, while the caller of download_one doesn't need the URL anyhow.  Do you still want me to change the return type here?"", 'comment_created': datetime.datetime(2020, 8, 10, 15, 28, 24, tzinfo=datetime.timezone.utc), 'commenter': 'McSinyx', 'type': 'User'}, {'comment_id': 467985485, 'comment_body': '*(hidden to keep the conversation in the comment above)*', 'comment_created': datetime.datetime(2020, 8, 10, 15, 29, 13, tzinfo=datetime.timezone.utc), 'commenter': 'McSinyx', 'type': 'User'}, {'comment_id': 468434059, 'comment_body': ""The comment is referring to the following snippet\r\n\r\nhttps://github.com/pypa/pip/blob/4c7bbdb4e42dffd37c881105c94512b8836731fc/src/pip/_internal/operations/prepare.py#L545-L555\r\n\r\nwhich IMHO can (or should?) be avoided, especially the copying part.  If it's not a problem, let's leave the comment here to be addressed later once I'm done messing with the relevant routines in the next few PRs :smile:"", 'comment_created': datetime.datetime(2020, 8, 11, 9, 3, 41, tzinfo=datetime.timezone.utc), 'commenter': 'McSinyx', 'type': 'User'}, {'comment_id': 468564230, 'comment_body': 'Yes, that sounds fair. :)', 'comment_created': datetime.datetime(2020, 8, 11, 13, 6, 41, tzinfo=datetime.timezone.utc), 'commenter': 'pradyunsg', 'type': 'User'}, {'comment_id': 468582854, 'comment_body': ""A TODO comment here is, IMO, a distraction from the more pressing work we're trying to do. For this particular issue I think an extra copy is worth the relatively clearer separation of concerns that we have now. I would really prefer that we break it into an issue, since that tends to foster better discussion compared to PRs, can be prioritized, and doesn't risk the burden passing to someone else."", 'comment_created': datetime.datetime(2020, 8, 11, 13, 34, 34, tzinfo=datetime.timezone.utc), 'commenter': 'chrahunt', 'type': 'User'}, {'comment_id': 468584715, 'comment_body': ""Similar comment here as with the other TODO, let's break this into a separate issue."", 'comment_created': datetime.datetime(2020, 8, 11, 13, 37, 15, tzinfo=datetime.timezone.utc), 'commenter': 'chrahunt', 'type': 'User'}, {'comment_id': 468585046, 'comment_body': 'Sorry, I think it may have been left from another revision. It looks like you got my meaning though. :)', 'comment_created': datetime.datetime(2020, 8, 11, 13, 37, 43, tzinfo=datetime.timezone.utc), 'commenter': 'chrahunt', 'type': 'User'}, {'comment_id': 468680059, 'comment_body': 'I removed the TODO and made a note to my personal TODO to convert this TODO to an issue.', 'comment_created': datetime.datetime(2020, 8, 11, 15, 43, 2, tzinfo=datetime.timezone.utc), 'commenter': 'McSinyx', 'type': 'User'}, {'comment_id': 469817602, 'comment_body': 'I definitely prefer ""downloader"" as the name for the variable holding `Downloader` instances. It\'ll also make the diff *much* smaller. :)', 'comment_created': datetime.datetime(2020, 8, 13, 9, 22, 42, tzinfo=datetime.timezone.utc), 'commenter': 'pradyunsg', 'type': 'User'}, {'comment_id': 469836366, 'comment_body': ""This is how I interpret your review :laughing:\r\n\r\n![mixed-signal](https://user-images.githubusercontent.com/13689192/90120165-a6ad0580-dd84-11ea-9775-3b54bab46b2f.jpg)\r\n\r\nJokes aside I think it'd be nicer for you to read `Downloader` as `Callable[..., ...]`.  TBH I've been pushing my agenda on eliminating the `downloader(...)` call for quite a few PRs and I really hope you and other maintainers of pip can put up with it."", 'comment_created': datetime.datetime(2020, 8, 13, 9, 55, 9, tzinfo=datetime.timezone.utc), 'commenter': 'McSinyx', 'type': 'User'}, {'comment_id': 469897441, 'comment_body': 'Naming convention around this kind of first-class callables is an actively debated topic, unfortunately. Maybe a better way to do this would be to rename the `Downloader` type to something that expresses the fact the instance is a callable, not an arbitrary object.', 'comment_created': datetime.datetime(2020, 8, 13, 11, 57, 51, tzinfo=datetime.timezone.utc), 'commenter': 'uranusjr', 'type': 'User'}, {'comment_id': 470414384, 'comment_body': '> This is how I interpret your review 😆\r\n\r\nHaha, it\'s more of ""let\'s ship it, and here\'s a non-blocking concern"". :)', 'comment_created': datetime.datetime(2020, 8, 14, 5, 15, 38, tzinfo=datetime.timezone.utc), 'commenter': 'pradyunsg', 'type': 'User'}]","[{'commit_sha': 'e62f16e96938ee24e7a57168b829942526be56e2', 'committer_username': 'McSinyx', 'committer_name': None, 'committer_email': 'cnx@loang.net', 'commit_date': datetime.datetime(2015, 8, 7, 4, 35, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '078e0effb72b1078bab3d268aa5b4e374505e18a', 'committer_username': 'McSinyx', 'committer_name': None, 'committer_email': 'cnx@loang.net', 'commit_date': datetime.datetime(2015, 8, 7, 4, 35, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '39d296eeb8cb8b0f8e09493bc8f1cb6eb5940a46', 'committer_username': 'McSinyx', 'committer_name': None, 'committer_email': 'cnx@loang.net', 'commit_date': datetime.datetime(2015, 8, 7, 4, 35, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '18c803a41363612569a57b26376693f8b7d72eea', 'committer_username': 'McSinyx', 'committer_name': None, 'committer_email': 'cnx@loang.net', 'commit_date': datetime.datetime(2015, 8, 7, 4, 35, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a1aeb4ce01cf8753bcca89ea3f83eb30abf51ae3', 'committer_username': 'McSinyx', 'committer_name': None, 'committer_email': 'cnx@loang.net', 'commit_date': datetime.datetime(2015, 8, 7, 4, 35, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b46576d9336ba2c081b486adb49ec773847c16ee', 'committer_username': 'McSinyx', 'committer_name': None, 'committer_email': 'cnx@loang.net', 'commit_date': datetime.datetime(2015, 8, 7, 4, 35, 24, tzinfo=datetime.timezone.utc)}]",,13689192,cnx@loang.net,User,,36,,44,62
468446584,[fast-deps] Parallelize wheel download,"Example output:

```console
$ pip --use-feature=2020-resolver --use-feature=fast-deps install scipy
WARNING: pip is using lazily downloaded wheels using HTTP range requests to obtain dependency information. This experimental feature is enabled through --use-feature=fast-deps and it is not ready for production.
Collecting scipy
  Obtaining dependency information from scipy 1.5.2
Collecting numpy>=1.14.5
  Obtaining dependency information from numpy 1.19.1
Downloading 2 files (40.3 MB)
   |████████████████████████████████| 40.3 MB 822 kB/s 
Installing collected packages: numpy, scipy
Successfully installed numpy-1.19.1 scipy-1.5.2
```",False,8771,https://api.github.com/repos/pypa/pip/pulls/8771,https://github.com/pypa/pip/pull/8771,closed,155,66,2,9,15,9,2,0,"[{'name': 'type: enhancement'}, {'name': 'needs rebase or merge'}]",2020-08-16 13:43:27+00:00,2021-03-05 16:43:36+00:00,17377209.0,"201 days, 3:00:09","[{'comment_id': 472058202, 'comment_body': 'I figured that this mutex re-implementation is what is causing the slow down, e.g. using `sleep(0.1)` in place of `continue` would bring the (estimated) download speed back to my bandwidth.', 'comment_created': datetime.datetime(2020, 8, 18, 9, 53, 5, tzinfo=datetime.timezone.utc), 'commenter': 'McSinyx', 'type': 'User'}, {'comment_id': 472086887, 'comment_body': 'Fixed by using a separate lock.', 'comment_created': datetime.datetime(2020, 8, 18, 10, 47, 17, tzinfo=datetime.timezone.utc), 'commenter': 'McSinyx', 'type': 'User'}, {'comment_id': 502238459, 'comment_body': ""The result of HEAD and GET seem so different that I would wonder if instead we would want to make this method's error handling into a `@contextmanager`. This is also driven by the thought that we might want to extract `link.url.split('#', 1)[0]` into its own named method, because it's not immediately clear what it's doing if you don't know or remember that pypi urls are structured this way.\r\n\r\nTo avoid breaking other callers, we could keep `_http_get_download()` undisturbed, making use of the new url splitting method and wrapping the `session.get(...)` call in the new contextmanager. That is just what first came to my mind when thinking of how to reuse the error-handling mechanisms in this method -- not a blocking review."", 'comment_created': datetime.datetime(2020, 10, 9, 7, 28, 22, tzinfo=datetime.timezone.utc), 'commenter': 'cosmicexplorer', 'type': 'User'}, {'comment_id': 502239987, 'comment_body': 'I understand the utility of factoring this away into a method though, so `def _http_head(session, link):`, which wraps its `session.head(...)` in the error-handling contextmanager could perhaps be a way to keep the `_FileToDownload` object clean. Just suggestions.', 'comment_created': datetime.datetime(2020, 10, 9, 7, 31, 24, tzinfo=datetime.timezone.utc), 'commenter': 'cosmicexplorer', 'type': 'User'}, {'comment_id': 502241329, 'comment_body': ""I personally find this `url_repr` indirection somewhat hard to follow. Is there a reason we're not just doing:\r\n```python\r\nif response_size is None:\r\n    logged_url = url\r\nelse:\r\n    logged_url = '{} ({})'.format(url, format_size(response_size))\r\n```"", 'comment_created': datetime.datetime(2020, 10, 9, 7, 34, 9, tzinfo=datetime.timezone.utc), 'commenter': 'cosmicexplorer', 'type': 'User'}, {'comment_id': 502489086, 'comment_body': ""I've just addressed this, thanks!"", 'comment_created': datetime.datetime(2020, 10, 9, 14, 57, 29, tzinfo=datetime.timezone.utc), 'commenter': 'McSinyx', 'type': 'User'}, {'comment_id': 502497438, 'comment_body': ""Thanks for the review!\r\n\r\n> we might want to extract `link.url.split('#', 1)[0]` into its own named method, because it's not immediately clear what it's doing if you don't know or remember that pypi urls are structured this way.\r\n\r\nI also think that this is a good idea—the 1/0 numbers looks really cryptic.  I'll add an reference to [PEP 503](https://www.python.org/dev/peps/pep-0503/#specification) to clarify it for future readers.  Edit: many spots in the codebase uses this same expression.  I'd prefer to do this in a follow-up since it does not exactly fit in the scope of this PR.\r\n\r\nRegarding splitting a separate method for HEAD, however, I don't *feel* that it would make the callers' code any cleaner, i.e. [this level of abstraction feel just right for me, although it's just personal taste](https://twitter.com/nedbat/status/1299450077967196163).  I'll reword s/head=/just_head=/ to hopefully makes it make more sense."", 'comment_created': datetime.datetime(2020, 10, 9, 15, 9, 43, tzinfo=datetime.timezone.utc), 'commenter': 'McSinyx', 'type': 'User'}, {'comment_id': 502507573, 'comment_body': 'Regarding `head`, it won’t make the caller’s code cleaner, but is still a good idea since having a boolean flag switching between behaviours is a smell in general. it is better to extract the `session.method(...)` call out of this function.', 'comment_created': datetime.datetime(2020, 10, 9, 15, 25, 51, tzinfo=datetime.timezone.utc), 'commenter': 'uranusjr', 'type': 'User'}, {'comment_id': 507816128, 'comment_body': '@cosmicexplorer and @uranusjr, does 307c4ae20 make it look better to you (sorry for the delay though)?', 'comment_created': datetime.datetime(2020, 10, 19, 14, 50, 19, tzinfo=datetime.timezone.utc), 'commenter': 'McSinyx', 'type': 'User'}]","[{'commit_sha': '30a57802585fa1bd3cce0f8753dc6f4235f6aca6', 'committer_username': 'McSinyx', 'committer_name': None, 'committer_email': 'cnx@loang.net', 'commit_date': datetime.datetime(2015, 8, 7, 4, 35, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '74d94095bf72411157c608623ba27b943548508b', 'committer_username': 'McSinyx', 'committer_name': None, 'committer_email': 'cnx@loang.net', 'commit_date': datetime.datetime(2015, 8, 7, 4, 35, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c7db18c80b2b433bee786853e66aa13e2920271c', 'committer_username': 'McSinyx', 'committer_name': None, 'committer_email': 'cnx@loang.net', 'commit_date': datetime.datetime(2015, 8, 7, 4, 35, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6ee5d6ec5083ba496dcb24f144eba24294e13e9c', 'committer_username': 'McSinyx', 'committer_name': None, 'committer_email': 'cnx@loang.net', 'commit_date': datetime.datetime(2015, 8, 7, 4, 35, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1c529a71f3c09197b476ed89de025accb9c5cb16', 'committer_username': 'McSinyx', 'committer_name': None, 'committer_email': 'cnx@loang.net', 'commit_date': datetime.datetime(2015, 8, 7, 4, 35, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2499c8ab1aa3b40c14ae0cbcff6c0c2ae56102a6', 'committer_username': 'McSinyx', 'committer_name': None, 'committer_email': 'cnx@loang.net', 'commit_date': datetime.datetime(2015, 8, 7, 4, 35, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '156ebf9bb9c2cc312d24247c9b94f72564922cae', 'committer_username': 'McSinyx', 'committer_name': None, 'committer_email': 'cnx@loang.net', 'commit_date': datetime.datetime(2015, 8, 7, 4, 35, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4bb165503e98a8f6fcd511a9a13900bd3e8bfdc4', 'committer_username': 'McSinyx', 'committer_name': None, 'committer_email': 'cnx@loang.net', 'commit_date': datetime.datetime(2015, 8, 7, 4, 35, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '307c4ae20f80a67cf4aea4b04787787e49260d39', 'committer_username': 'McSinyx', 'committer_name': None, 'committer_email': 'cnx@loang.net', 'commit_date': datetime.datetime(2015, 8, 7, 4, 35, 24, tzinfo=datetime.timezone.utc)}]",,13689192,cnx@loang.net,User,,36,,44,62
391827218,Rephrases documentation,Fixes #7683 ,True,7878,https://api.github.com/repos/pypa/pip/pulls/7878,https://github.com/pypa/pip/pull/7878,closed,6,6,1,7,8,15,3,0,"[{'name': 'type: docs'}, {'name': 'skip news'}, {'name': 'auto-locked'}]",2020-03-21 07:30:23+00:00,2020-03-25 08:02:43+00:00,347540.0,"4 days, 0:32:20","[{'comment_id': 395971179, 'comment_body': 'Typo at _Without_.', 'comment_created': datetime.datetime(2020, 3, 21, 7, 43, 16, tzinfo=datetime.timezone.utc), 'commenter': 'uranusjr', 'type': 'User'}, {'comment_id': 395971228, 'comment_body': 'I feel it is unnecessary to emphasise the parallelism, but it is personal preference.', 'comment_created': datetime.datetime(2020, 3, 21, 7, 44, 14, tzinfo=datetime.timezone.utc), 'commenter': 'uranusjr', 'type': 'User'}, {'comment_id': 395971332, 'comment_body': 'This part reads a bit awkward to me, but I can’t point my finger to why.', 'comment_created': datetime.datetime(2020, 3, 21, 7, 46, 9, tzinfo=datetime.timezone.utc), 'commenter': 'uranusjr', 'type': 'User'}, {'comment_id': 395971578, 'comment_body': 'Acknowledged, would be fixed in new commit', 'comment_created': datetime.datetime(2020, 3, 21, 7, 50, 51, tzinfo=datetime.timezone.utc), 'commenter': 'onlinejudge95', 'type': 'User'}, {'comment_id': 395971648, 'comment_body': 'I guess the parallelism emphasis is what is laid in the attached issue #7683 \r\nDo provide any changes you feel would go well', 'comment_created': datetime.datetime(2020, 3, 21, 7, 52, 14, tzinfo=datetime.timezone.utc), 'commenter': 'onlinejudge95', 'type': 'User'}, {'comment_id': 395971724, 'comment_body': 'Should I drop the `running sequentially` part?', 'comment_created': datetime.datetime(2020, 3, 21, 7, 53, 13, tzinfo=datetime.timezone.utc), 'commenter': 'onlinejudge95', 'type': 'User'}, {'comment_id': 395975030, 'comment_body': 'I suggest removing the emphasis, since it looks weird. Also, ""user experience"" -> ""experience"" would be nice.', 'comment_created': datetime.datetime(2020, 3, 21, 8, 51, 16, tzinfo=datetime.timezone.utc), 'commenter': 'pradyunsg', 'type': 'User'}, {'comment_id': 395975268, 'comment_body': ""I'd suggest changing this to...\n\n> since the tests can take a long time to finish when run sequentially."", 'comment_created': datetime.datetime(2020, 3, 21, 8, 55, 6, tzinfo=datetime.timezone.utc), 'commenter': 'pradyunsg', 'type': 'User'}, {'comment_id': 395975369, 'comment_body': 'We can simplify this to:\n\n> To run tests without parallelization, run:', 'comment_created': datetime.datetime(2020, 3, 21, 8, 56, 25, tzinfo=datetime.timezone.utc), 'commenter': 'pradyunsg', 'type': 'User'}, {'comment_id': 395975399, 'comment_body': 'It\'d be a good idea to drop the word ""locally"" from here, and add a blank line above, to separate it from the previous paragraph.', 'comment_created': datetime.datetime(2020, 3, 21, 8, 56, 57, tzinfo=datetime.timezone.utc), 'commenter': 'pradyunsg', 'type': 'User'}, {'comment_id': 395975538, 'comment_body': 'Acknowledged, changes in new commit to reflect the same', 'comment_created': datetime.datetime(2020, 3, 21, 8, 59, 14, tzinfo=datetime.timezone.utc), 'commenter': 'onlinejudge95', 'type': 'User'}, {'comment_id': 395975567, 'comment_body': 'Acknowledged, changes in new commit to reflect the same', 'comment_created': datetime.datetime(2020, 3, 21, 8, 59, 53, tzinfo=datetime.timezone.utc), 'commenter': 'onlinejudge95', 'type': 'User'}, {'comment_id': 397169237, 'comment_body': 'This file can be deleted.', 'comment_created': datetime.datetime(2020, 3, 24, 13, 53, 54, tzinfo=datetime.timezone.utc), 'commenter': 'pradyunsg', 'type': 'User'}, {'comment_id': 397171213, 'comment_body': 'on it', 'comment_created': datetime.datetime(2020, 3, 24, 13, 56, 34, tzinfo=datetime.timezone.utc), 'commenter': 'onlinejudge95', 'type': 'User'}, {'comment_id': 397175112, 'comment_body': 'on it', 'comment_created': datetime.datetime(2020, 3, 24, 14, 2, 2, tzinfo=datetime.timezone.utc), 'commenter': 'onlinejudge95', 'type': 'User'}]","[{'commit_sha': 'e42929dcf64fccbea0d93a0bfaf965e20c569e39', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'c387d8e7663584914112b328b50fba53a83a775a', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '3cadfd2e80456656332f738c3e1abd0f95a38228', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'adf3dc8572ee06d1ee5526b14440eb5fc3cfe8d1', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '4d6a982976135fcc09a54edb2f5ddcefe8ba24bc', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '88e4abd66ff6fe065c6aad408e636a0e22526f60', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '4d0a55ee6f7d7458a4f8e5688782f3a907c76057', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}]",onlinejudge95,44158581,,User,,87,,84,52
395229429,Fix rst syntax in Getting Started guide,"The regression was introduced by GH-7878, which is not released so I'm not sure if I need to add the change to the news.",True,7928,https://api.github.com/repos/pypa/pip/pulls/7928,https://github.com/pypa/pip/pull/7928,closed,2,0,1,1,1,0,2,0,"[{'name': 'skip news'}, {'name': 'auto-locked'}]",2020-03-29 10:29:01+00:00,2020-03-29 13:17:43+00:00,10122.0,2:48:42,[],"[{'commit_sha': '76c955e16b722f3fd59d1aa986824911a4353154', 'committer_username': 'McSinyx', 'committer_name': None, 'committer_email': 'cnx@loang.net', 'commit_date': datetime.datetime(2015, 8, 7, 4, 35, 24, tzinfo=datetime.timezone.utc)}]",,13689192,cnx@loang.net,User,,36,,44,62
399521778,Fix tabulate col size in case of empty cell,"Previously, the size is no less than `len(str(None)) == 4`.

This commit also add type hint and docstring to the function.

Edit: I'm not sure if this change is trivial, please tell me if news is required.",True,7988,https://api.github.com/repos/pypa/pip/pulls/7988,https://github.com/pypa/pip/pull/7988,closed,35,20,4,2,8,0,2,0,"[{'name': 'type: enhancement'}, {'name': 'auto-locked'}]",2020-04-06 09:53:14+00:00,2020-04-09 11:35:17+00:00,265323.0,"3 days, 1:42:03",[],"[{'commit_sha': 'c2aa573107998f4ceeaff03c64312a97117f76bc', 'committer_username': 'McSinyx', 'committer_name': None, 'committer_email': 'cnx@loang.net', 'commit_date': datetime.datetime(2015, 8, 7, 4, 35, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '26b76f6f11dfe51632acf321af186e7a227090c8', 'committer_username': 'McSinyx', 'committer_name': None, 'committer_email': 'cnx@loang.net', 'commit_date': datetime.datetime(2015, 8, 7, 4, 35, 24, tzinfo=datetime.timezone.utc)}]",,13689192,cnx@loang.net,User,,36,,44,62
408924760,Add subcommand alias mechanism,"This should be able to resolve GH-8130.  Edit: this is the PR's current behavior:
```console
$ pip help

Usage:   
  pip <command> [options]

Commands:
  install, add                Install packages.
  download                    Download packages.
  uninstall, remove           Uninstall packages.
  ...
$ pip remove -h # or
$ pip help remove

Usage:   
  pip remove [options] <package> ...
  pip remove [options] -r <requirements file> ...
  ...
$ pip remoe -h # or
$ pip help remoe
ERROR: unknown command ""remoe"" - maybe you meant ""remove""
```",False,8137,https://api.github.com/repos/pypa/pip/pulls/8137,https://github.com/pypa/pip/pull/8137,closed,71,40,8,1,6,0,1,0,[{'name': 'needs rebase or merge'}],2020-04-25 15:25:25+00:00,2021-04-02 09:08:21+00:00,29526176.0,"341 days, 17:42:56",[],"[{'commit_sha': '467ca53003b63b241f7e1facbb68301fb5c24309', 'committer_username': 'McSinyx', 'committer_name': None, 'committer_email': 'cnx@loang.net', 'commit_date': datetime.datetime(2015, 8, 7, 4, 35, 24, tzinfo=datetime.timezone.utc)}]",,13689192,cnx@loang.net,User,,36,,44,62
409048702,Make mypy happy with beta release automation,"The linting issue was originally found in https://github.com/pypa/pip/pull/8137#issuecomment-619403842:

    mypy.....................................................................Failed
    - hook id: mypy
    - exit code: 1

    tools/automation/release/check_version.py:23: error: Value of type ""Optional[Tuple[str, int]]"" is not indexable
    Found 1 error in 1 file (checked 135 source files)

This seems only to affect mypy on Python 3.8.  Edit: this makes me start to wonder if we want to run lint on all testing environments, since linting time will take a small proportion in testing time if we do it.  That'd be a bit redundant though.",True,8143,https://api.github.com/repos/pypa/pip/pulls/8143,https://github.com/pypa/pip/pull/8143,closed,1,1,2,1,4,2,1,0,[{'name': 'type: maintenance'}],2020-04-26 09:17:43+00:00,2020-05-07 13:19:49+00:00,964926.0,"11 days, 4:02:06","[{'comment_id': 415329283, 'comment_body': 'This is what I had earlier, but changed it because we hadn\'t added the required annotations in packaging. Maybe it works now? Or maybe we need to tell mypy to include packaging at runtime?\r\n\r\n```suggestion\r\n    if v.pre and v.pre[0] != ""b"":\r\n```\r\n', 'comment_created': datetime.datetime(2020, 4, 26, 14, 58, 14, tzinfo=datetime.timezone.utc), 'commenter': 'pradyunsg', 'type': 'User'}, {'comment_id': 415336423, 'comment_body': ""Yes, that seems to work on my machine.  I've updated the patch accordingly."", 'comment_created': datetime.datetime(2020, 4, 26, 15, 34, 17, tzinfo=datetime.timezone.utc), 'commenter': 'McSinyx', 'type': 'User'}]","[{'commit_sha': 'ff869e0c1588bf3a922534b5b2c6cfffc9a62bdd', 'committer_username': 'McSinyx', 'committer_name': None, 'committer_email': 'cnx@loang.net', 'commit_date': datetime.datetime(2015, 8, 7, 4, 35, 24, tzinfo=datetime.timezone.utc)}]",,13689192,cnx@loang.net,User,,36,,44,62
418916621,Fix typo and simplify ireq call,"Hi, this PR does some minor nits of a typo and a redundant call to get install requirement that existed for historical reasons.  I hope it's is helpful.",True,8248,https://api.github.com/repos/pypa/pip/pulls/8248,https://github.com/pypa/pip/pull/8248,closed,2,7,4,1,1,0,0,0,[],2020-05-16 05:07:54+00:00,2020-05-16 09:21:20+00:00,15206.0,4:13:26,[],"[{'commit_sha': '29940371ccce820706677e414e39d6e671006983', 'committer_username': 'McSinyx', 'committer_name': None, 'committer_email': 'cnx@loang.net', 'commit_date': datetime.datetime(2015, 8, 7, 4, 35, 24, tzinfo=datetime.timezone.utc)}]",,13689192,cnx@loang.net,User,,36,,44,62
423728098,Add license requirement to _vendor/README.rst,"Originally posted in GH-8330:

> As pip is licensed under MIT, I believe packages shipped along (i.e. vendored) with pip must be released under MIT-compatible licenses, i.e. permissive licenses. [...] I am not a lawyer so there's a high chance that I am wrong though [...] I think our vendoring policy might want to require libraries to be vendored must be available under a MIT-compatible license. If this is agreed upon, I'll file a PR to clarify it.

~~I also added a lint commit to this PR, but if it's not agreed upon, I can easily drop it.~~  Edit: the linting is moved to GH-8456.  Furthermore, I'm not sure if this should be a trivial or documentation change.",True,8332,https://api.github.com/repos/pypa/pip/pulls/8332,https://github.com/pypa/pip/pull/8332,closed,3,0,2,2,6,4,2,0,"[{'name': 'project: vendored dependency'}, {'name': 'type: maintenance'}]",2020-05-27 09:33:14+00:00,2020-06-29 18:27:27+00:00,2883253.0,"33 days, 8:54:13","[{'comment_id': 441580310, 'comment_body': '```suggestion\r\n* Libraries to be vendored **MUST** be available under MIT-compatible licenses.\r\n```', 'comment_created': datetime.datetime(2020, 6, 17, 14, 17, 9, tzinfo=datetime.timezone.utc), 'commenter': 'pradyunsg', 'type': 'User'}, {'comment_id': 445853582, 'comment_body': ""Maybe I'd stick with the previous wordings.\r\n```suggestion\r\n* Vendored libraries **MUST** be available under a license that allows\r\n```"", 'comment_created': datetime.datetime(2020, 6, 25, 21, 39, 10, tzinfo=datetime.timezone.utc), 'commenter': 'xavfernandez', 'type': 'User'}, {'comment_id': 445954791, 'comment_body': 'Thank you for the review.  IIUC the other policies are referring to the downstream packages in `pip._vendor`, while the requirement I want to add here wants to specify the upstream libraries.', 'comment_created': datetime.datetime(2020, 6, 26, 3, 58, 27, tzinfo=datetime.timezone.utc), 'commenter': 'McSinyx', 'type': 'User'}, {'comment_id': 447103944, 'comment_body': ""I think @xavfernandez's suggestion is a good one -- the language consistency is good to have, and the difference between the two forms doesn't seem significant to me."", 'comment_created': datetime.datetime(2020, 6, 29, 16, 35, 51, tzinfo=datetime.timezone.utc), 'commenter': 'pradyunsg', 'type': 'User'}]","[{'commit_sha': 'cef064dc4b2bee2b5e872410d20500969132080e', 'committer_username': 'McSinyx', 'committer_name': None, 'committer_email': 'cnx@loang.net', 'commit_date': datetime.datetime(2015, 8, 7, 4, 35, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ecda6650ff37f4b15198917098c63f62659bad3b', 'committer_username': 'pradyunsg', 'committer_name': 'Pradyun Gedam', 'committer_email': None, 'commit_date': datetime.datetime(2013, 1, 15, 13, 45, 19, tzinfo=datetime.timezone.utc)}]",,13689192,cnx@loang.net,User,,36,,44,62
432566272,Nitpick logging calls,"This PR is opened initially to facilitate an discussion.  Actual lazy evaluation of log messages will be added later.

https://github.com/globality-corp/flake8-logging-format",True,8423,https://api.github.com/repos/pypa/pip/pulls/8423,https://github.com/pypa/pip/pull/8423,closed,61,69,23,4,17,35,0,0,[],2020-06-10 16:21:20+00:00,2020-07-18 00:10:44+00:00,3224964.0,"37 days, 7:49:24","[{'comment_id': 438262692, 'comment_body': 'I think you should start with enabling all rules via `enable-extensions=G`, and that based on review suggestions, explicitly define the rules to enable.', 'comment_created': datetime.datetime(2020, 6, 10, 16, 38, 33, tzinfo=datetime.timezone.utc), 'commenter': 'deveshks', 'type': 'User'}, {'comment_id': 438501672, 'comment_body': 'I must be missing something. Isn’t this the kind of the wrong call `flake8-logging-format` is supposed to reject?', 'comment_created': datetime.datetime(2020, 6, 11, 2, 1, 3, tzinfo=datetime.timezone.utc), 'commenter': 'uranusjr', 'type': 'User'}, {'comment_id': 438519013, 'comment_body': ""The plugin has a rule for it. It's not been opted into, IIUC."", 'comment_created': datetime.datetime(2020, 6, 11, 3, 14, 27, tzinfo=datetime.timezone.utc), 'commenter': 'pradyunsg', 'type': 'User'}, {'comment_id': 439207809, 'comment_body': 'This is a behaviour change. ', 'comment_created': datetime.datetime(2020, 6, 12, 5, 3, 11, tzinfo=datetime.timezone.utc), 'commenter': 'pradyunsg', 'type': 'User'}, {'comment_id': 439209624, 'comment_body': ""Sorry for my carelessness, I'm reverting it now.  Edit: apparently the plugin is not so good at analysis.  I wonder if we want to drop the check and only keep the code change.  I'll try to see if it works with wrapped logger and continue this discussion when I figure that out."", 'comment_created': datetime.datetime(2020, 6, 12, 5, 10, 33, tzinfo=datetime.timezone.utc), 'commenter': 'McSinyx', 'type': 'User'}, {'comment_id': 439244376, 'comment_body': 'Could you try `logger.exception(message, exc_info=show_traceback)` instead? I am not sure if even that will count as a behaviour change, but I think you can try both of them when hitting this error condition, and see if the output from pip changes.', 'comment_created': datetime.datetime(2020, 6, 12, 7, 5, 18, tzinfo=datetime.timezone.utc), 'commenter': 'deveshks', 'type': 'User'}, {'comment_id': 439247336, 'comment_body': ""That'd be complained by G202: Logging statements should not use redundant `exc_info=True` in `exception`.  The problem here is that `show_traceback` is evaluated as constant `True` somehow and I haven't investigate any further (nor want to do it until we decide if we want to use it)."", 'comment_created': datetime.datetime(2020, 6, 12, 7, 12, 41, tzinfo=datetime.timezone.utc), 'commenter': 'McSinyx', 'type': 'User'}, {'comment_id': 439730989, 'comment_body': '@McSinyx Why aren\'t we enabling the entire ""G"" class of errors here?', 'comment_created': datetime.datetime(2020, 6, 13, 11, 11, 23, tzinfo=datetime.timezone.utc), 'commenter': 'pradyunsg', 'type': 'User'}, {'comment_id': 439744194, 'comment_body': ""I don't remember the exact reason but I wasn't happy with the plugin's suggestion (the `extra` thing) and thus disabling those wanting such.  I'd be avoiding going through the reformatting twice, but I guess it doesn't hurt enabling it *now* (edit: 72eda76) since I'll shift my focus to GH-8435."", 'comment_created': datetime.datetime(2020, 6, 13, 14, 42, 14, tzinfo=datetime.timezone.utc), 'commenter': 'McSinyx', 'type': 'User'}, {'comment_id': 439770184, 'comment_body': 'Would it be possible to check for “encoded as” here? “Subprocess output” is too vague here and may produce false positive.', 'comment_created': datetime.datetime(2020, 6, 13, 21, 18, 4, tzinfo=datetime.timezone.utc), 'commenter': 'uranusjr', 'type': 'User'}, {'comment_id': 439770967, 'comment_body': 'I wonder if this would work:\r\n\r\n```python\r\nif parent is None:\r\n    message = (\r\n        ""Could not find a version that satisfies ""\r\n        ""the requirement {}""\r\n    )\r\nelse:\r\n    message = (\r\n        ""Could not find a version that satisfies ""\r\n        ""the requirement {} (from {})""\r\n    )\r\nlogger.critical(message, req, parent.name)\r\n```\r\n\r\nIt’d make the log record much cleaner IMO.', 'comment_created': datetime.datetime(2020, 6, 13, 21, 31, 51, tzinfo=datetime.timezone.utc), 'commenter': 'uranusjr', 'type': 'User'}, {'comment_id': 439788785, 'comment_body': ""TBH I don't even know where the `Subprocess output` thing come from :smile:  I'll check the message as well just in case."", 'comment_created': datetime.datetime(2020, 6, 14, 3, 49, 39, tzinfo=datetime.timezone.utc), 'commenter': 'McSinyx', 'type': 'User'}, {'comment_id': 439788847, 'comment_body': 'After applying GH-8435 to enable `str.format` it should work, but the default logger does not support `str.format` just yet.', 'comment_created': datetime.datetime(2020, 6, 14, 3, 50, 54, tzinfo=datetime.timezone.utc), 'commenter': 'McSinyx', 'type': 'User'}, {'comment_id': 439795476, 'comment_body': 'Cool, looking forward to it.', 'comment_created': datetime.datetime(2020, 6, 14, 6, 4, 4, tzinfo=datetime.timezone.utc), 'commenter': 'uranusjr', 'type': 'User'}, {'comment_id': 439832351, 'comment_body': ""I've just tried this and realized that in this case we still need to check for `parent` to pass `parent.name`.  BTW other than this is there anything else that should be changed?"", 'comment_created': datetime.datetime(2020, 6, 14, 13, 54, 25, tzinfo=datetime.timezone.utc), 'commenter': 'McSinyx', 'type': 'User'}, {'comment_id': 439838648, 'comment_body': 'Nit: Would it be better to follow the same format of keeping the entire log message in a new line as before, instead of breaking it in two lines?', 'comment_created': datetime.datetime(2020, 6, 14, 15, 3, 9, tzinfo=datetime.timezone.utc), 'commenter': 'deveshks', 'type': 'User'}, {'comment_id': 439838999, 'comment_body': ""Nit: Perhaps we can update this to \r\n\r\n```python\r\nmsg_format = '{} does not appear to be encoded as %s'.format(desc or 'Bytes Object')\r\n```\r\n\r\ninstead of doing it in `logger.warning`\r\n\r\nOr just define `desc = desc or 'Bytes object'` before `msg_format`"", 'comment_created': datetime.datetime(2020, 6, 14, 15, 6, 58, tzinfo=datetime.timezone.utc), 'commenter': 'deveshks', 'type': 'User'}, {'comment_id': 439839572, 'comment_body': ""Direct call to `str.format` was avoided to make this patch the best practice we can get as suggested by @uranusjr.  As for the `desc or 'Bytes object'`, we can't fit it in one line even if it was just `desc` so I kept it that way.  I don't really have a strong opinion on this though."", 'comment_created': datetime.datetime(2020, 6, 14, 15, 13, 41, tzinfo=datetime.timezone.utc), 'commenter': 'McSinyx', 'type': 'User'}, {'comment_id': 439840054, 'comment_body': ""I don't have a strong opinion on this, but I don't really like the dedented closing parenthesis, especially when the enclosed content is a single line.  IMHO the style is to facilitate adding more arguments in the same call w/o diff noise later, but this is not the case and dedented for closing of block doesn't look very Pythonic to me.  That being said, I'm fine if we have a consensus (e.g. black, which is yet to be applied for pip ATM) on what you recommended."", 'comment_created': datetime.datetime(2020, 6, 14, 15, 19, 7, tzinfo=datetime.timezone.utc), 'commenter': 'McSinyx', 'type': 'User'}, {'comment_id': 439959863, 'comment_body': ""Yes, it’s easier for debugging if the logger can get the data as structured as possible, and each format call loses a bit of structural context. For the same reason, I’m fine with either the current form or setting `desc = 'Bytes object'` before the logging call, since both pass the same thing to the logger."", 'comment_created': datetime.datetime(2020, 6, 15, 6, 42, 58, tzinfo=datetime.timezone.utc), 'commenter': 'uranusjr', 'type': 'User'}, {'comment_id': 441702241, 'comment_body': '```suggestion\r\n            logger.exception(\r\n                ""Unable to save configuration. Please report this as a bug.""\r\n            )\r\n```', 'comment_created': datetime.datetime(2020, 6, 17, 17, 15, 38, tzinfo=datetime.timezone.utc), 'commenter': 'pradyunsg', 'type': 'User'}, {'comment_id': 441703859, 'comment_body': ""Well, consistency within the module is important, and this module definitely follows this style. That on it's own is reason enough to maintain the style as it was originally. \r\n\r\nGenerally, I think it's a good idea to avoid making changes that could initiate code-style discussions in PRs. A good way to do that is to follow the style from the original code as much as possible/reasonable.\r\n\r\nAdditionally, given that the plan is to adopt black eventually, I think it'd be a good thing to minimise the diff wherever reasonable."", 'comment_created': datetime.datetime(2020, 6, 17, 17, 18, 36, tzinfo=datetime.timezone.utc), 'commenter': 'pradyunsg', 'type': 'User'}, {'comment_id': 441704979, 'comment_body': '```suggestion\r\n                    ""Ignoring cached wheel %s for %s as it ""\r\n                    ""does not match the expected distribution name %s."",\r\n                    wheel_name, link, package_name,\r\n                )\r\n```', 'comment_created': datetime.datetime(2020, 6, 17, 17, 20, 33, tzinfo=datetime.timezone.utc), 'commenter': 'pradyunsg', 'type': 'User'}, {'comment_id': 441705573, 'comment_body': '```suggestion\r\n            logger.error(\r\n                ""Need an action ({}) to perform."",\r\n                "", "".join(sorted(handlers)),\r\n            )\r\n```', 'comment_created': datetime.datetime(2020, 6, 17, 17, 21, 37, tzinfo=datetime.timezone.utc), 'commenter': 'pradyunsg', 'type': 'User'}, {'comment_id': 441705827, 'comment_body': '```suggestion\r\n            logger.error(\r\n                ""Need an action (%s) to perform."",\r\n                "", "".join(sorted(handlers)),\r\n            )\r\n```', 'comment_created': datetime.datetime(2020, 6, 17, 17, 22, 4, tzinfo=datetime.timezone.utc), 'commenter': 'pradyunsg', 'type': 'User'}, {'comment_id': 441706314, 'comment_body': '```suggestion\r\n                        ""Path \'%s\' is ignored: it is a directory."", path,\r\n                    )\r\n```', 'comment_created': datetime.datetime(2020, 6, 17, 17, 22, 52, tzinfo=datetime.timezone.utc), 'commenter': 'pradyunsg', 'type': 'User'}, {'comment_id': 441706811, 'comment_body': '```suggestion\r\n            logger.debug(\r\n                ""Cannot parse \'%s\' as requirements file"", req, exc_info=True\r\n            )\r\n```', 'comment_created': datetime.datetime(2020, 6, 17, 17, 23, 47, tzinfo=datetime.timezone.utc), 'commenter': 'pradyunsg', 'type': 'User'}, {'comment_id': 441706972, 'comment_body': '```suggestion\r\n                ""Cannot remove entries from nonexistent file %s"", self.file\r\n            )\r\n```', 'comment_created': datetime.datetime(2020, 6, 17, 17, 24, 4, tzinfo=datetime.timezone.utc), 'commenter': 'pradyunsg', 'type': 'User'}, {'comment_id': 441707590, 'comment_body': '```suggestion\r\n                        ""Could not find a version that satisfies the ""\r\n                        ""requirement %s"",\r\n                        req_disp,\r\n                    )\r\n```', 'comment_created': datetime.datetime(2020, 6, 17, 17, 25, tzinfo=datetime.timezone.utc), 'commenter': 'pradyunsg', 'type': 'User'}, {'comment_id': 441708504, 'comment_body': '```suggestion\r\n            subprocess_logger.warning(\r\n                \'Command ""%s"" had error code %s in %s\',\r\n                command_desc,\r\n                proc.returncode,\r\n                cwd,\r\n            )\r\n```', 'comment_created': datetime.datetime(2020, 6, 17, 17, 26, 28, tzinfo=datetime.timezone.utc), 'commenter': 'pradyunsg', 'type': 'User'}, {'comment_id': 441708708, 'comment_body': '```suggestion\r\n            tempfile.mkdtemp(prefix=""pip-{}-"".format(kind))\r\n        )\r\n```', 'comment_created': datetime.datetime(2020, 6, 17, 17, 26, 47, tzinfo=datetime.timezone.utc), 'commenter': 'pradyunsg', 'type': 'User'}, {'comment_id': 441708834, 'comment_body': '```suggestion\r\n                tempfile.mkdtemp(prefix=""pip-{}-"".format(kind))\r\n            )\r\n```', 'comment_created': datetime.datetime(2020, 6, 17, 17, 26, 59, tzinfo=datetime.timezone.utc), 'commenter': 'pradyunsg', 'type': 'User'}, {'comment_id': 441709497, 'comment_body': ""```suggestion\r\n        logger.warning(\r\n            '%s does not appear to be encoded as %s',\r\n            desc or 'Bytes object',\r\n            encoding,\r\n        )\r\n```"", 'comment_created': datetime.datetime(2020, 6, 17, 17, 27, 58, tzinfo=datetime.timezone.utc), 'commenter': 'pradyunsg', 'type': 'User'}, {'comment_id': 454725891, 'comment_body': 'It looks like this needs to be made to use `%s`, since `.format` was removed.\r\n\r\n```suggestion\r\n                ""Need an action (%s) to perform."",\r\n```', 'comment_created': datetime.datetime(2020, 7, 15, 0, 49, 51, tzinfo=datetime.timezone.utc), 'commenter': 'chrahunt', 'type': 'User'}, {'comment_id': 454902093, 'comment_body': ""Thanks for the catch, I've just integrated this into one of the commits."", 'comment_created': datetime.datetime(2020, 7, 15, 9, 1, 36, tzinfo=datetime.timezone.utc), 'commenter': 'McSinyx', 'type': 'User'}]","[{'commit_sha': 'cb8d81d1356aadf74953bc2a72fc7d10dd1eab17', 'committer_username': 'McSinyx', 'committer_name': None, 'committer_email': 'cnx@loang.net', 'commit_date': datetime.datetime(2015, 8, 7, 4, 35, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '05bdc69aa3193b7ba3940e6d4e19bac639274d6e', 'committer_username': 'McSinyx', 'committer_name': None, 'committer_email': 'cnx@loang.net', 'commit_date': datetime.datetime(2015, 8, 7, 4, 35, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f8b06a3906fe7c7b9f004a9731d4ef0000a22605', 'committer_username': 'McSinyx', 'committer_name': None, 'committer_email': 'cnx@loang.net', 'commit_date': datetime.datetime(2015, 8, 7, 4, 35, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6fa4a9a0a7d4ba30792e01aaf332f11d197a1b6a', 'committer_username': 'pradyunsg', 'committer_name': 'Pradyun Gedam', 'committer_email': None, 'commit_date': datetime.datetime(2013, 1, 15, 13, 45, 19, tzinfo=datetime.timezone.utc)}]",,13689192,cnx@loang.net,User,,36,,44,62
433770826,Use str.format style in logging calls,"This is trying to resolve GH-7009.  TODOs:

- [x] Adapt the logger to use `str.format`
- [x] Substitute `%` *message* formatting by `{}`
- [ ] Make the tests pass

LoggerAdapter might not be a good idea since one module imported by of utils.logging needs logging to.",False,8435,https://api.github.com/repos/pypa/pip/pulls/8435,https://github.com/pypa/pip/pull/8435,closed,368,324,68,11,5,2,1,0,[{'name': 'needs rebase or merge'}],2020-06-12 16:09:50+00:00,2021-04-02 09:09:24+00:00,25376374.0,"293 days, 16:59:34","[{'comment_id': 441614597, 'comment_body': 'As suggested by @pradyunsg, move this thing to the next commit when this PR is done.', 'comment_created': datetime.datetime(2020, 6, 17, 15, 1, 40, tzinfo=datetime.timezone.utc), 'commenter': 'McSinyx', 'type': 'User'}, {'comment_id': 454047286, 'comment_body': ""I don't think we can make this change unilaterally, because some of our dependencies may also be using `logging` with the normal format. At the very least it needs to be scoped to `pip` loggers (other than ones under `pip._vendor`)."", 'comment_created': datetime.datetime(2020, 7, 14, 1, 42, 9, tzinfo=datetime.timezone.utc), 'commenter': 'chrahunt', 'type': 'User'}]","[{'commit_sha': 'd42b099360664b78e3d037f5ece774cd3bef660c', 'committer_username': 'McSinyx', 'committer_name': None, 'committer_email': 'cnx@loang.net', 'commit_date': datetime.datetime(2015, 8, 7, 4, 35, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a58e2ef8650bf1a4b6478ce3ba102617489f1629', 'committer_username': 'McSinyx', 'committer_name': None, 'committer_email': 'cnx@loang.net', 'commit_date': datetime.datetime(2015, 8, 7, 4, 35, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6eb8d79147f3c0c08d76930f16a08d03032a4d86', 'committer_username': 'McSinyx', 'committer_name': None, 'committer_email': 'cnx@loang.net', 'commit_date': datetime.datetime(2015, 8, 7, 4, 35, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6b6dd28eca259a46161bd62b7950dfce253287de', 'committer_username': 'pradyunsg', 'committer_name': 'Pradyun Gedam', 'committer_email': None, 'commit_date': datetime.datetime(2013, 1, 15, 13, 45, 19, tzinfo=datetime.timezone.utc)}, {'commit_sha': '052f09a681ce1e39056a59b7d304287f8ff17467', 'committer_username': 'McSinyx', 'committer_name': None, 'committer_email': 'cnx@loang.net', 'commit_date': datetime.datetime(2015, 8, 7, 4, 35, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ef07cf332bb56d5ee254222ce48c737a27b7c0ee', 'committer_username': 'McSinyx', 'committer_name': None, 'committer_email': 'cnx@loang.net', 'commit_date': datetime.datetime(2015, 8, 7, 4, 35, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7d736c269cf423dcb431885c2078bc6c00cdf186', 'committer_username': 'McSinyx', 'committer_name': None, 'committer_email': 'cnx@loang.net', 'commit_date': datetime.datetime(2015, 8, 7, 4, 35, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '819e2924632c2ba51b14a5847ff4874865456e2d', 'committer_username': 'McSinyx', 'committer_name': None, 'committer_email': 'cnx@loang.net', 'commit_date': datetime.datetime(2015, 8, 7, 4, 35, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '63d7f9106e1ca58598db9b77312b5d47d940267b', 'committer_username': 'McSinyx', 'committer_name': None, 'committer_email': 'cnx@loang.net', 'commit_date': datetime.datetime(2015, 8, 7, 4, 35, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'eb284f72fdf8231e87b07351d79180899f2eebee', 'committer_username': 'McSinyx', 'committer_name': None, 'committer_email': 'cnx@loang.net', 'commit_date': datetime.datetime(2015, 8, 7, 4, 35, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '19f13cbc5ddc8a2ef6ffae37ead4252065cd6a8c', 'committer_username': 'McSinyx', 'committer_name': None, 'committer_email': 'cnx@loang.net', 'commit_date': datetime.datetime(2015, 8, 7, 4, 35, 24, tzinfo=datetime.timezone.utc)}]",,13689192,cnx@loang.net,User,,36,,44,62
435922161,Lint src/pip/_vendor/README.rst,,True,8456,https://api.github.com/repos/pypa/pip/pulls/8456,https://github.com/pypa/pip/pull/8456,closed,54,57,2,1,4,0,2,0,"[{'name': 'type: docs'}, {'name': 'skip news'}]",2020-06-17 15:17:45+00:00,2020-07-08 01:40:39+00:00,1765374.0,"20 days, 10:22:54",[],"[{'commit_sha': 'da9c7c7f6948c8fd9f100c601299be82900e70c4', 'committer_username': 'McSinyx', 'committer_name': None, 'committer_email': 'cnx@loang.net', 'commit_date': datetime.datetime(2015, 8, 7, 4, 35, 24, tzinfo=datetime.timezone.utc)}]",,13689192,cnx@loang.net,User,,36,,44,62
447001720,Declare constants in configuration.py as such,"This is the result of me being burnt out and bored at the same time :smile:  The naming of the `KINDS` scoped enum is up for debate, I don't feel exactly strong about it.",True,8568,https://api.github.com/repos/pypa/pip/pulls/8568,https://github.com/pypa/pip/pull/8568,closed,23,32,2,1,6,7,0,0,[],2020-07-09 17:40:16+00:00,2020-09-18 16:13:30+00:00,6129194.0,"70 days, 22:33:14","[{'comment_id': 453037714, 'comment_body': 'Nit, the previous implementation is likely slight more performant due to short-circuiting skips the `lower()` call. This can be significant since we need to read all the environment variables', 'comment_created': datetime.datetime(2020, 7, 10, 19, 26, 24, tzinfo=datetime.timezone.utc), 'commenter': 'uranusjr', 'type': 'User'}, {'comment_id': 453038659, 'comment_body': 'I’d probably prefer `(kind for kind in VALID_LOAD_ONLY if kind)`. I needed to dart between the definition and usage to understand what the `[:-1]` part is about.\r\n\r\nAlternatively we should remove `None` from `VALID_LOAD_ONLY` and add `and load_only is not None` at line 121.', 'comment_created': datetime.datetime(2020, 7, 10, 19, 28, 45, tzinfo=datetime.timezone.utc), 'commenter': 'uranusjr', 'type': 'User'}, {'comment_id': 453171122, 'comment_body': ""Thanks, I forgot that there's virtually no limit on how long the value an unrelated env var might be."", 'comment_created': datetime.datetime(2020, 7, 11, 8, 17, 26, tzinfo=datetime.timezone.utc), 'commenter': 'McSinyx', 'type': 'User'}, {'comment_id': 453171530, 'comment_body': ""I'd go for the alternative, that also seems clearer to me."", 'comment_created': datetime.datetime(2020, 7, 11, 8, 22, 17, tzinfo=datetime.timezone.utc), 'commenter': 'McSinyx', 'type': 'User'}, {'comment_id': 456754317, 'comment_body': 'Would it be possible to build this ordering into `enum`? I’m not very familiar with how the functional API works, but it’s be nicer to iterate directly on `kinds` if possible.', 'comment_created': datetime.datetime(2020, 7, 18, 5, 57, 40, tzinfo=datetime.timezone.utc), 'commenter': 'uranusjr', 'type': 'User'}, {'comment_id': 456771188, 'comment_body': ""I don't think it's possible, at least if `enum(**kwargs)` is used since `dict` didn't preserve order until Python 3.7.  After dropping Python 2 however we can use [the standard library](https://docs.python.org/3/library/enum.html) though.\r\n\r\nI start to wonder if we want to start noting a list of things to be done when Python 2 support is retired.  I alone have encounter quite a few but I can't remember anything else at the moment."", 'comment_created': datetime.datetime(2020, 7, 18, 9, 32, 39, tzinfo=datetime.timezone.utc), 'commenter': 'McSinyx', 'type': 'User'}, {'comment_id': 456829576, 'comment_body': 'I looked at the implementation and indeed it’s not possible, the `dict` call unfortunately looses any ordering. It’s quite trivial to fix, but probably out of the scope of this PR.', 'comment_created': datetime.datetime(2020, 7, 18, 21, 27, 21, tzinfo=datetime.timezone.utc), 'commenter': 'uranusjr', 'type': 'User'}]","[{'commit_sha': 'e0f311b1f42e0a41fe5c1b4d263bbdabf74cdc6d', 'committer_username': 'McSinyx', 'committer_name': None, 'committer_email': 'cnx@loang.net', 'commit_date': datetime.datetime(2015, 8, 7, 4, 35, 24, tzinfo=datetime.timezone.utc)}]",,13689192,cnx@loang.net,User,,36,,44,62
447742604,Clean up Configuration.unset_value and nit __init__,"This follows up GH-8566:

* Clean up the implementation of `Configuration.unset_value`
* Nit the type hint of `Configuration.__init__` that mypy somehow mypy failed to catch",True,8571,https://api.github.com/repos/pypa/pip/pulls/8571,https://github.com/pypa/pip/pull/8571,closed,12,25,2,1,1,2,0,0,[],2020-07-11 08:59:23+00:00,2020-07-13 21:52:38+00:00,219195.0,"2 days, 12:53:15","[{'comment_id': 453949974, 'comment_body': ""As described [here](https://stackoverflow.com/a/51084715/1698058), a default of `None` causes mypy to implicitly make the corresponding type `Optional`. Personally I don't like that default and would support enabling stricter options, but just to explain why it didn't alert about this annotation."", 'comment_created': datetime.datetime(2020, 7, 13, 21, 41, 20, tzinfo=datetime.timezone.utc), 'commenter': 'chrahunt', 'type': 'User'}, {'comment_id': 454080686, 'comment_body': 'Thanks, I did not know that it applies to parameter list as well.', 'comment_created': datetime.datetime(2020, 7, 14, 3, 43, 3, tzinfo=datetime.timezone.utc), 'commenter': 'McSinyx', 'type': 'User'}]","[{'commit_sha': 'c5e19c01c46e4402ce3f7b24f0b17e2bcf2f20bd', 'committer_username': 'McSinyx', 'committer_name': None, 'committer_email': 'cnx@loang.net', 'commit_date': datetime.datetime(2015, 8, 7, 4, 35, 24, tzinfo=datetime.timezone.utc)}]",,13689192,cnx@loang.net,User,,36,,44,62
448030891,Allow verbose/quiet level to be specified via config file and env var,"This allows options of action `count` to be specified via configuration files as well as environmental variables.  The affected options include `verbose` and `quiet`.  If this patch is merged, for example the following will be equivalent:

    pip -vvv
    PIP_VERBOSE=3 pip",True,8578,https://api.github.com/repos/pypa/pip/pulls/8578,https://github.com/pypa/pip/pull/8578,closed,142,36,4,3,7,34,0,0,[],2020-07-13 04:44:25+00:00,2020-09-03 16:34:54+00:00,4535429.0,"52 days, 11:50:29","[{'comment_id': 453554506, 'comment_body': '`environmental` -> `environment`', 'comment_created': datetime.datetime(2020, 7, 13, 10, 32, tzinfo=datetime.timezone.utc), 'commenter': 'deveshks', 'type': 'User'}, {'comment_id': 453572909, 'comment_body': 'This seems to be an unrelated change to what this PR is meant for. I would suggest reverting this, and perhaps do it as a followup.', 'comment_created': datetime.datetime(2020, 7, 13, 11, 7, 55, tzinfo=datetime.timezone.utc), 'commenter': 'deveshks', 'type': 'User'}, {'comment_id': 453574780, 'comment_body': 'The wolfram definition of natural number (https://mathworld.wolfram.com/NaturalNumber.html) have definitions which both include and exclude 0, which I believe is a valid value here. Perhaps we can say `non-negative integers` here (https://mathworld.wolfram.com/NonnegativeInteger.html)', 'comment_created': datetime.datetime(2020, 7, 13, 11, 11, 38, tzinfo=datetime.timezone.utc), 'commenter': 'deveshks', 'type': 'User'}, {'comment_id': 453619413, 'comment_body': ""Does this change not mean that `quiet=true` is no longer valid in a config file? That would be a breaking change, and not one that I think we should make.\r\n\r\nIn fact, if this change didn't cause a test to fail (that checked that `quiet=true` worked in a config file) then we should probably add such a test, so that we don't accidentally break that behaviour..."", 'comment_created': datetime.datetime(2020, 7, 13, 12, 40, 21, tzinfo=datetime.timezone.utc), 'commenter': 'pfmoore', 'type': 'User'}, {'comment_id': 454240314, 'comment_body': ""The behavioral change would be easier to execute if `invalid_config_error_message` is split into two separate routines, so I think I'll keep it this way."", 'comment_created': datetime.datetime(2020, 7, 14, 9, 53, 30, tzinfo=datetime.timezone.utc), 'commenter': 'McSinyx', 'type': 'User'}, {'comment_id': 454240505, 'comment_body': 'Thanks, TIL about such ambiguity.', 'comment_created': datetime.datetime(2020, 7, 14, 9, 53, 53, tzinfo=datetime.timezone.utc), 'commenter': 'McSinyx', 'type': 'User'}, {'comment_id': 454241816, 'comment_body': ""I can make both the config-like boolean and int work, and I agree that it's more sensible to do so, since there's no reason to enforce the env var/config option to be strictly int.  I also agree on the tests thing."", 'comment_created': datetime.datetime(2020, 7, 14, 9, 56, 15, tzinfo=datetime.timezone.utc), 'commenter': 'McSinyx', 'type': 'User'}, {'comment_id': 454263433, 'comment_body': ""Not sure why this got marked as resolved (maybe because of a force-push?) I don't see a fix yet, so I've unresolved it. Hope that's OK."", 'comment_created': datetime.datetime(2020, 7, 14, 10, 37, 21, tzinfo=datetime.timezone.utc), 'commenter': 'pfmoore', 'type': 'User'}, {'comment_id': 454433298, 'comment_body': ""Oops, sorry, I meant to make a reply that I'll write the tests somewhere in the near future to notice @deveshks as well.  Regarding the behavior,  `quite=true` is working as of c810ee9.  However, thanks to your checking, I found that the behavior I intended to push is broken.\r\n\r\nI'm sorry for resolve the conversation too soon.  For the moment I'll convert this back into a draft PR until I rethink everything out with proper tests to avoid draining others' attention to something that's not ready."", 'comment_created': datetime.datetime(2020, 7, 14, 15, 14, 18, tzinfo=datetime.timezone.utc), 'commenter': 'McSinyx', 'type': 'User'}, {'comment_id': 454463695, 'comment_body': ""No worries, I assumed all was OK, just a glitch. My main worry was that it had been resolved by accident and we'd both forget to check it!"", 'comment_created': datetime.datetime(2020, 7, 14, 15, 57, 7, tzinfo=datetime.timezone.utc), 'commenter': 'pfmoore', 'type': 'User'}, {'comment_id': 456765750, 'comment_body': '```suggestion\r\na non-negative integer can be used to represent the level to be specified:\r\n```', 'comment_created': datetime.datetime(2020, 7, 18, 8, 26, 27, tzinfo=datetime.timezone.utc), 'commenter': 'gutsytechster', 'type': 'User'}, {'comment_id': 456766099, 'comment_body': '```suggestion\r\nas a space-separated list. For example, having ``PIP_FIND_LINKS`` set to\r\n```', 'comment_created': datetime.datetime(2020, 7, 18, 8, 30, 37, tzinfo=datetime.timezone.utc), 'commenter': 'gutsytechster', 'type': 'User'}, {'comment_id': 456766186, 'comment_body': '```suggestion\r\nand environment variables. Previously these options were treated as\r\n```', 'comment_created': datetime.datetime(2020, 7, 18, 8, 31, 44, tzinfo=datetime.timezone.utc), 'commenter': 'gutsytechster', 'type': 'User'}, {'comment_id': 456766270, 'comment_body': '`nonnegative` -> `non-negative` can be a personal choice. I just think the latter is more readable.', 'comment_created': datetime.datetime(2020, 7, 18, 8, 32, 55, tzinfo=datetime.timezone.utc), 'commenter': 'gutsytechster', 'type': 'User'}, {'comment_id': 456766304, 'comment_body': '```suggestion\r\nlike ``--quite`` or ``--verbose``, use a non-negative integer to represent\r\n```', 'comment_created': datetime.datetime(2020, 7, 18, 8, 33, 32, tzinfo=datetime.timezone.utc), 'commenter': 'gutsytechster', 'type': 'User'}, {'comment_id': 456766350, 'comment_body': '```suggestion\r\nthe number of repetition, for instance, setting ``PIP_VERBOSE`` to 3 is\r\n```', 'comment_created': datetime.datetime(2020, 7, 18, 8, 34, 12, tzinfo=datetime.timezone.utc), 'commenter': 'gutsytechster', 'type': 'User'}, {'comment_id': 456766502, 'comment_body': '```suggestion\r\nFruitful repeatable options, however, can be specified via environment variable\r\n```', 'comment_created': datetime.datetime(2020, 7, 18, 8, 35, 51, tzinfo=datetime.timezone.utc), 'commenter': 'gutsytechster', 'type': 'User'}, {'comment_id': 460388117, 'comment_body': 'I feel the previous rendering (using code blocks) is more readable than prose form.', 'comment_created': datetime.datetime(2020, 7, 25, 9, 52, 51, tzinfo=datetime.timezone.utc), 'commenter': 'uranusjr', 'type': 'User'}, {'comment_id': 460405500, 'comment_body': 'I have the same feeling too, but I tried to avoid variable setting syntax because I couldn\'t find anything that is portable, e.g. [PowerShell uses the hideous `$Env:<variable-name> = ""<new-value>""`](https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_environment_variables).', 'comment_created': datetime.datetime(2020, 7, 25, 13, 34, 5, tzinfo=datetime.timezone.utc), 'commenter': 'McSinyx', 'type': 'User'}, {'comment_id': 460406242, 'comment_body': '~~You can use `.. code-block:: none` to have a code block without syntax highlighting.~~\r\n\r\nAh, I misunderstood, you’re avoiding the shell-dependant set syntax.\r\n\r\nMaybe it would help to demostrate this in Python? It would never work, but all readers would probably understand what it means.', 'comment_created': datetime.datetime(2020, 7, 25, 13, 43, 26, tzinfo=datetime.timezone.utc), 'commenter': 'uranusjr', 'type': 'User'}, {'comment_id': 460407982, 'comment_body': ""> Maybe it would help to demonstrate this in Python?\r\n\r\nProbably, but I've yet to thought of a way to phrase the surrounding text to interject `os.environ['PIP_FOO'] = bar` that would fit into the comparison with `pip --foo=bar ...`.  I think waiting for https://github.com/pypa/pip/pull/8589#issuecomment-662054242 might be a better idea, or doing a follow-up after it gets merged, depending on which PR will get merged first."", 'comment_created': datetime.datetime(2020, 7, 25, 14, 3, 19, tzinfo=datetime.timezone.utc), 'commenter': 'McSinyx', 'type': 'User'}, {'comment_id': 460408504, 'comment_body': ""Honestly, I've never heard a Windows user complain about being confused by\r\n\r\n```\r\nexport PIP_DEFAULT_TIMEOUT=60\r\n```\r\n\r\nI don't think the issue is important enough to warrant changing things, let's just stick with what we've been using up to now."", 'comment_created': datetime.datetime(2020, 7, 25, 14, 9, 37, tzinfo=datetime.timezone.utc), 'commenter': 'pfmoore', 'type': 'User'}, {'comment_id': 460408772, 'comment_body': 'Again, let\'s leave the existing text as it is, and just add the extra text about options that don\'t take a value but can be repeated. (If we do want to change the text, though, ""Fruitful repeatable options"" doesn\'t mean anything to me - maybe it\'s a phrase that didn\'t translate well to English? Or maybe it\'s just something I\'ve never heard before?)', 'comment_created': datetime.datetime(2020, 7, 25, 14, 13, 1, tzinfo=datetime.timezone.utc), 'commenter': 'pfmoore', 'type': 'User'}, {'comment_id': 460409093, 'comment_body': ""As somebody who doesn't use Windows, I am delighted to revert back to using `export` :smile:"", 'comment_created': datetime.datetime(2020, 7, 25, 14, 16, 34, tzinfo=datetime.timezone.utc), 'commenter': 'McSinyx', 'type': 'User'}, {'comment_id': 460409766, 'comment_body': ""*Fruitful function* is used in [a book I read quite some time ago](https://www.greenteapress.com/thinkpython/thinkCSpy/html/chap05.html) to refer to function with a positive number of parameters but after looking it up all results point to this exact book (or its derivatives), so I think it's definitely not something to be used in a documentation and I am sorry for not checking it more carefully before hand<sup>*nervously thinking about everything I've written in the past few years*</sup>\r\n\r\nWhat is your suggestion in this case to document the `count` and `append` options.  Those don't seem to be intuitive out of implementation context, and originally `count` options were not documented."", 'comment_created': datetime.datetime(2020, 7, 25, 14, 24, 41, tzinfo=datetime.timezone.utc), 'commenter': 'McSinyx', 'type': 'User'}, {'comment_id': 460431957, 'comment_body': '>  I am sorry for not checking it more carefully before hand\r\n\r\nNot a problem!\r\n\r\n> What is your suggestion in this case\r\n\r\nI would go with something like:\r\n\r\n```suggestion\r\n\r\nFor command line options which can be repeated, use a space to separate\r\nmultiple values. For example::\r\n\r\n    export PIP_FIND_LINKS=""http://mirror1.example.com http://mirror2.example.com""\r\n\r\nis the same as calling::\r\n\r\n        pip install --find-links=http://mirror1.example.com --find-links=http://mirror2.example.com\r\n        \r\nOptions that do not take a value, but can be repeated (such as ``--verbose``) can be specified using the number of repetitions, so::\r\n\r\n    export PIP_VERBOSE=3\r\n\r\nis the same as calling::\r\n\r\n    pip install -vvv\r\n```\r\n\r\nI\'m not sure if github\'s ""Suggestion"" thing handled this correctly, but I hope you see what I mean, leave the existing text alone and just add a new paragraph about count-style options.', 'comment_created': datetime.datetime(2020, 7, 25, 18, 37, 27, tzinfo=datetime.timezone.utc), 'commenter': 'pfmoore', 'type': 'User'}, {'comment_id': 460489460, 'comment_body': ""GitHub suggestion doesn't seem to work, but this is clearer than what I wrote earlier so I'll apply it manually."", 'comment_created': datetime.datetime(2020, 7, 26, 7, 6, 59, tzinfo=datetime.timezone.utc), 'commenter': 'McSinyx', 'type': 'User'}, {'comment_id': 461134092, 'comment_body': '```suggestion\r\nFor options which can be repeated like ``--verbose`` and ``--quiet``,\r\n```', 'comment_created': datetime.datetime(2020, 7, 27, 19, 58, 1, tzinfo=datetime.timezone.utc), 'commenter': 'xavfernandez', 'type': 'User'}, {'comment_id': 461134202, 'comment_body': '```suggestion\r\n    quiet = 0\r\n```', 'comment_created': datetime.datetime(2020, 7, 27, 19, 58, 12, tzinfo=datetime.timezone.utc), 'commenter': 'xavfernandez', 'type': 'User'}, {'comment_id': 461134756, 'comment_body': '```suggestion\r\nAllow specifying verbosity and quiet level via configuration files\r\n```', 'comment_created': datetime.datetime(2020, 7, 27, 19, 59, 19, tzinfo=datetime.timezone.utc), 'commenter': 'xavfernandez', 'type': 'User'}, {'comment_id': 468564707, 'comment_body': ""Why not\r\n```suggestion\r\ndef tmpconfig(option, value, section='global'):\r\n    with NamedTemporaryFile(mode='w', delete=True) as f:\r\n        f.write('[{}]\\n{}={}\\n'.format(section, option, value))\r\n        yield f.name\r\n```"", 'comment_created': datetime.datetime(2020, 8, 11, 13, 7, 25, tzinfo=datetime.timezone.utc), 'commenter': 'xavfernandez', 'type': 'User'}, {'comment_id': 468606980, 'comment_body': ""I spent a solid minute trying to figure out why I wrote it as I did it :smile:  Turns out it was to ensure that the file is written to disk (which is warrantied by `f.__exit__`).  I think we can use `f.flush()` as well although I'm not sure enough about NamedTemporaryFile semantic to tell if that is safe on all platforms."", 'comment_created': datetime.datetime(2020, 8, 11, 14, 7, 13, tzinfo=datetime.timezone.utc), 'commenter': 'McSinyx', 'type': 'User'}, {'comment_id': 486417418, 'comment_body': ""The file is definitely written on every newline AFAICT, so I think @xavfernandez's suggestion will work well for simplifying this logic. :)"", 'comment_created': datetime.datetime(2020, 9, 10, 15, 4, 55, tzinfo=datetime.timezone.utc), 'commenter': 'pradyunsg', 'type': 'User'}, {'comment_id': 486911342, 'comment_body': ""FYI writing newline doesn't write to disk (at least not by default), but thanks for raising this up.  The best source I can refer to is [ISO C99 7.19.3.3](http://www.open-std.org/jtc1/sc22/WG14/www/docs/n1256.pdf#%5B%7B%22num%22%3A555%2C%22gen%22%3A0%7D%2C%7B%22name%22%3A%22XYZ%22%7D%2C-27%2C816%2Cnull%5D) which states:\r\n\r\n> When a stream is unbuffered, characters are intended to appear from the source or at the destination as soon as possible. Otherwise characters may be accumulated and transmitted to or from the host environment as a block.\r\n>\r\n> When a stream is fully buffered, characters are intended to be transmitted to or from the host environment as a block when a buffer is filled.\r\n>\r\n> When a stream is line buffered, characters are intended to be transmitted to or from the host environment as a block when a new-line character is encountered.\r\n\r\nI dig down CPython docs again and found (NamedTemporaryFile passes `buffering` to [open](https://docs.python.org/3/library/functions.html#open)):\r\n\r\n> `buffering` is an optional integer used to set the buffering policy. Pass 0 to switch buffering off (only allowed in binary mode), 1 to select line buffering (only usable in text mode), and an integer > 1 to indicate the size in bytes of a fixed-size chunk buffer. When no buffering argument is given, the default buffering policy works as follows:\r\n>\r\n> * Binary files are buffered in fixed-size chunks; the size of the buffer is chosen using a heuristic trying to determine the underlying device’s “block size” and falling back on `io.DEFAULT_BUFFER_SIZE`. On many systems, the buffer will typically be 4096 or 8192 bytes long.\r\n> * “Interactive” text files (files for which `isatty()` returns True) use line buffering. Other text files use the policy described above for binary files.\r\n\r\nSo if we set `buffering=1` the file would be `flush`ed upon newline, otherwise after a few KiB.  However, `TextIOWrapper.flush` [does not seem warranty to flush the filesystem file](https://github.com/python/cpython/blob/3d17c045b4c3d09b72bbd95ed78af1ae6f0d98d2/Modules/_io/textio.c#L1540-L1541) (or maybe I interpret the comment incorrectly, please don't ask me what the code actually does).\r\n\r\nThat being said, I'm pretty sure on most platforms it is safe to assume `flush` would do the job and would not object *someone else* applying the patch above.  Personally I just do know enough to be responsible for such change."", 'comment_created': datetime.datetime(2020, 9, 11, 9, 32, 36, tzinfo=datetime.timezone.utc), 'commenter': 'McSinyx', 'type': 'User'}]","[{'commit_sha': '2439d80a83d9cc23982972b9c9f9c8458774382f', 'committer_username': 'McSinyx', 'committer_name': None, 'committer_email': 'cnx@loang.net', 'commit_date': datetime.datetime(2015, 8, 7, 4, 35, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7a0061d8864d5fab7abc3d0d82ad01a43a0d23cc', 'committer_username': 'McSinyx', 'committer_name': None, 'committer_email': 'cnx@loang.net', 'commit_date': datetime.datetime(2015, 8, 7, 4, 35, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a85be3f5557e49f9e35e8abcf9365dd3b6cfabab', 'committer_username': 'McSinyx', 'committer_name': None, 'committer_email': 'cnx@loang.net', 'commit_date': datetime.datetime(2015, 8, 7, 4, 35, 24, tzinfo=datetime.timezone.utc)}]",,13689192,cnx@loang.net,User,,36,,44,62
451840422,Replace tabs by spaces for consistency,,True,8599,https://api.github.com/repos/pypa/pip/pulls/8599,https://github.com/pypa/pip/pull/8599,closed,8,7,3,1,0,0,0,0,[],2020-07-18 10:01:38+00:00,2020-07-19 12:57:42+00:00,96964.0,"1 day, 2:56:04",[],"[{'commit_sha': 'd363b4a42719bf5fa08cebfc90a6685773176175', 'committer_username': 'McSinyx', 'committer_name': None, 'committer_email': 'cnx@loang.net', 'commit_date': datetime.datetime(2015, 8, 7, 4, 35, 24, tzinfo=datetime.timezone.utc)}]",,13689192,cnx@loang.net,User,,36,,44,62
455213549,Use monkeypatch.setenv to mock env vars,IMHO it'd be more reliable to let pytest perform the setup and teardown of the environment variables.,True,8614,https://api.github.com/repos/pypa/pip/pulls/8614,https://github.com/pypa/pip/pull/8614,closed,147,225,10,4,1,11,0,0,[],2020-07-22 16:05:32+00:00,2020-09-04 09:05:16+00:00,3776384.0,"43 days, 16:59:44","[{'comment_id': 460389779, 'comment_body': 'This no longer has an effect? The local variable `environ` is not used anywhere afaict.', 'comment_created': datetime.datetime(2020, 7, 25, 10, 12, 22, tzinfo=datetime.timezone.utc), 'commenter': 'uranusjr', 'type': 'User'}, {'comment_id': 460407457, 'comment_body': ""It actually does, because is it equivalent to\r\n```python\r\nenviron = kwargs.get('environ', os.environ.copy())\r\nkwargs['environ'] = environ\r\n```\r\nand `kwargs` is to be passed to `TestFileEnvironment` (L510 of the new revision).  Now that you're asking, I'm not sure if this line is really obvious (as in, easy to read and interpret).  Also the current test suit doesn't seem to pass `environ` to `PipTestEnvironment` at all&mdash;do you want me to switch to solely `environ = os.environ.copy()` and pass that to `super().__init__` explicitly?"", 'comment_created': datetime.datetime(2020, 7, 25, 13, 57, 12, tzinfo=datetime.timezone.utc), 'commenter': 'McSinyx', 'type': 'User'}, {'comment_id': 460407905, 'comment_body': ""Ah OK, you’re modifying `kwargs['environ']` in-place. This is not very straightforward IMO (in-place modification to a nested item generally isn’t), but I guess I’m fine here since code here does not need to be read often."", 'comment_created': datetime.datetime(2020, 7, 25, 14, 2, 9, tzinfo=datetime.timezone.utc), 'commenter': 'uranusjr', 'type': 'User'}, {'comment_id': 464419691, 'comment_body': ""I could see this tripping someone up if they are executing tests in a shell that has this set already. If we want to run tests with new features then I'd rather that is explicit via a command-line option."", 'comment_created': datetime.datetime(2020, 8, 3, 13, 40, 6, tzinfo=datetime.timezone.utc), 'commenter': 'chrahunt', 'type': 'User'}, {'comment_id': 467551820, 'comment_body': ""This is what I imagine after applying this patch:\r\n\r\n| Original PIP_USE_FEATURE | With --new-resolver | Without --new-resolver |\r\n| ------------------------ | ------------------- | ---------------------- |\r\n|                          | 2020-resolver       |                        |\r\n| 2020-resolver            | 2020-resolver       |                        |\r\n| 2020-resolver spam       | 2020-resolver spam  | spam                   |\r\n| spam                     | 2020-resolver spam  | spam                   |\r\n\r\nIIUC are you suggesting the following, regardless of original PIP_USE_FEATURE, by *explicitly setting via a CLI option*?\r\n\r\n| With --new-resolver | Without --new-resolver |\r\n| ------------------- | ---------------------- |\r\n| 2020-resolver       |                        |\r\n\r\nI thought of this earlier, but it doesn't seem to work well when we have more features to toggle."", 'comment_created': datetime.datetime(2020, 8, 9, 8, 5, 36, tzinfo=datetime.timezone.utc), 'commenter': 'McSinyx', 'type': 'User'}, {'comment_id': 467556558, 'comment_body': 'For both `2020-resolver` and `fast-dep`, I’d argue we should actually *unset* what ever the user sets to run the tests, to ensure we’re testing the right thing. So the correct approach would be to overwrite this environment variable in one fixture.\r\n\r\nAlso, this is not an issue if the tests are run with tox as suggested in the development guide, since tox does not pass through environment variables by default.', 'comment_created': datetime.datetime(2020, 8, 9, 8, 53, 49, tzinfo=datetime.timezone.utc), 'commenter': 'uranusjr', 'type': 'User'}, {'comment_id': 467558489, 'comment_body': ""As tox doesn't pass env vars, can we use PIP_USE_FEATURE as the common state, e.g. if there's another fixture use_spam, is this PR's current behavior OK for testing 4 cases when they are on/off?"", 'comment_created': datetime.datetime(2020, 8, 9, 9, 13, 58, tzinfo=datetime.timezone.utc), 'commenter': 'McSinyx', 'type': 'User'}, {'comment_id': 467564244, 'comment_body': 'Yes, I believe the intention when `use_new_resolver` was original implemented was exactly this; the environment variable is used as the main state for what feature(s) the test is currently testing against.', 'comment_created': datetime.datetime(2020, 8, 9, 10, 13, 3, tzinfo=datetime.timezone.utc), 'commenter': 'uranusjr', 'type': 'User'}, {'comment_id': 483257115, 'comment_body': 'This could be a `fixed_time` fixture that would also use a shared `utc` fixture with the one defined in ` tests/unit/test_logging.py`', 'comment_created': datetime.datetime(2020, 9, 3, 21, 13, tzinfo=datetime.timezone.utc), 'commenter': 'xavfernandez', 'type': 'User'}, {'comment_id': 483458446, 'comment_body': ""In cd549eb7f1f8de518929381de698bfa32c33ba0d I moved this `utc` fixture to the test suite's root conftest.  I hope that's OK."", 'comment_created': datetime.datetime(2020, 9, 4, 8, 8, 34, tzinfo=datetime.timezone.utc), 'commenter': 'McSinyx', 'type': 'User'}, {'comment_id': 483460294, 'comment_body': 'Thanks :)', 'comment_created': datetime.datetime(2020, 9, 4, 8, 12, 5, tzinfo=datetime.timezone.utc), 'commenter': 'xavfernandez', 'type': 'User'}]","[{'commit_sha': 'c564a3d5414690060c7c41197e2cbed6f4ca5233', 'committer_username': 'McSinyx', 'committer_name': None, 'committer_email': 'cnx@loang.net', 'commit_date': datetime.datetime(2015, 8, 7, 4, 35, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5b1093fc7521857715938cce13b347108e824b50', 'committer_username': 'McSinyx', 'committer_name': None, 'committer_email': 'cnx@loang.net', 'commit_date': datetime.datetime(2015, 8, 7, 4, 35, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cd549eb7f1f8de518929381de698bfa32c33ba0d', 'committer_username': 'McSinyx', 'committer_name': None, 'committer_email': 'cnx@loang.net', 'commit_date': datetime.datetime(2015, 8, 7, 4, 35, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4a2e03c4ff293e6295b854819ab574873778f94d', 'committer_username': 'McSinyx', 'committer_name': None, 'committer_email': 'cnx@loang.net', 'commit_date': datetime.datetime(2015, 8, 7, 4, 35, 24, tzinfo=datetime.timezone.utc)}]",,13689192,cnx@loang.net,User,,36,,44,62
460974946,"Fix tests/functional/test_install_check.py, when run with new resolver","This fixes new resolver's tests [failures today](https://travis-ci.org/github/pypa/pip/jobs/713970845) triggered by 1b2ae22e7b0b2d1963bec769d4f070bfbc6d932a.  The real reason is that at the beginning of each error log, `ERROR: ` is appended, and we shouldn't rely on which sentence shows up first in a message.",True,8674,https://api.github.com/repos/pypa/pip/pulls/8674,https://github.com/pypa/pip/pull/8674,closed,10,24,3,2,0,4,0,0,[],2020-08-01 10:06:08+00:00,2020-08-02 01:49:12+00:00,56584.0,15:43:04,"[{'comment_id': 464019317, 'comment_body': 'This won\'t give us a very useful failure message.\r\n\r\nI suggest adding a f""{line!r} not found in:\\n{string}"" to this assert.', 'comment_created': datetime.datetime(2020, 8, 2, 1, 47, 51, tzinfo=datetime.timezone.utc), 'commenter': 'pradyunsg', 'type': 'User'}, {'comment_id': 464038319, 'comment_body': 'Oh no you merged this before I was able to response :smile:  Would you like a follow up on this?', 'comment_created': datetime.datetime(2020, 8, 2, 6, 28, tzinfo=datetime.timezone.utc), 'commenter': 'McSinyx', 'type': 'User'}, {'comment_id': 464801953, 'comment_body': 'Go ahead!', 'comment_created': datetime.datetime(2020, 8, 4, 5, 7, 4, tzinfo=datetime.timezone.utc), 'commenter': 'pradyunsg', 'type': 'User'}, {'comment_id': 464887787, 'comment_body': ""I've just followed this up in GH-8692."", 'comment_created': datetime.datetime(2020, 8, 4, 8, 30, 21, tzinfo=datetime.timezone.utc), 'commenter': 'McSinyx', 'type': 'User'}]","[{'commit_sha': '0ef877339a270c760a51c3a61e55c2f4f86f84ab', 'committer_username': 'McSinyx', 'committer_name': None, 'committer_email': 'cnx@loang.net', 'commit_date': datetime.datetime(2015, 8, 7, 4, 35, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e48a0cb7cba70d7184f7a08b49163cf5a6451b61', 'committer_username': 'McSinyx', 'committer_name': None, 'committer_email': 'cnx@loang.net', 'commit_date': datetime.datetime(2015, 8, 7, 4, 35, 24, tzinfo=datetime.timezone.utc)}]",,13689192,cnx@loang.net,User,,36,,44,62
462612884,Make assertion failure give better message,0ef8773 was silly of to check for substring of each line :see_no_evil:,True,8692,https://api.github.com/repos/pypa/pip/pulls/8692,https://github.com/pypa/pip/pull/8692,closed,1,2,2,1,0,2,3,0,"[{'name': 'C: tests'}, {'name': 'type: refactor'}, {'name': 'skip news'}]",2020-08-04 08:28:07+00:00,2020-08-06 10:10:14+00:00,178927.0,"2 days, 1:42:07","[{'comment_id': 464968558, 'comment_body': 'Best of both worlds:\r\n\r\n```suggestion\r\n        assert (expected_line + ""\\n"") in string\r\n```', 'comment_created': datetime.datetime(2020, 8, 4, 10, 58, 42, tzinfo=datetime.timezone.utc), 'commenter': 'pradyunsg', 'type': 'User'}, {'comment_id': 464971953, 'comment_body': ""Indeed, it's `assert_contains_expected_lines` after all."", 'comment_created': datetime.datetime(2020, 8, 4, 11, 5, 51, tzinfo=datetime.timezone.utc), 'commenter': 'McSinyx', 'type': 'User'}]","[{'commit_sha': '7ee5f1ed9a74aec11238509d81dd06cb01b2d735', 'committer_username': 'McSinyx', 'committer_name': None, 'committer_email': 'cnx@loang.net', 'commit_date': datetime.datetime(2015, 8, 7, 4, 35, 24, tzinfo=datetime.timezone.utc)}]",,13689192,cnx@loang.net,User,,36,,44,62
463222393,[2020-resolver] List downloaded distributions before exiting ,This unifies the behavior of pip download (listing downloaded distributions before exiting) and fixes GH-8696.,True,8709,https://api.github.com/repos/pypa/pip/pulls/8709,https://github.com/pypa/pip/pull/8709,closed,9,19,4,1,5,0,0,0,[],2020-08-05 08:11:46+00:00,2020-08-17 11:52:18+00:00,1050032.0,"12 days, 3:40:32",[],"[{'commit_sha': '4f210f36089398fccce91c1a5769a8b5e7258cc7', 'committer_username': 'McSinyx', 'committer_name': None, 'committer_email': 'cnx@loang.net', 'commit_date': datetime.datetime(2015, 8, 7, 4, 35, 24, tzinfo=datetime.timezone.utc)}]",,13689192,cnx@loang.net,User,,36,,44,62

467911835,Allow py2 deprecation warning from setuptools,This should be able to make master green again.,True,8759,https://api.github.com/repos/pypa/pip/pulls/8759,https://github.com/pypa/pip/pull/8759,closed,6,1,3,1,5,0,0,0,[],2020-08-14 10:41:14+00:00,2020-08-14 17:03:48+00:00,22954.0,6:22:34,[],"[{'commit_sha': '46b938349abc8b57a8f132b9859c24b9620cb380', 'committer_username': 'McSinyx', 'committer_name': None, 'committer_email': 'cnx@loang.net', 'commit_date': datetime.datetime(2015, 8, 7, 4, 35, 24, tzinfo=datetime.timezone.utc)}]",,13689192,cnx@loang.net,User,,36,,44,62
468322652,Use the new resolver for test requirements,Supersede GH-8764,True,8766,https://api.github.com/repos/pypa/pip/pulls/8766,https://github.com/pypa/pip/pull/8766,closed,10,11,5,3,4,3,0,0,[],2020-08-15 14:23:27+00:00,2020-08-17 12:50:18+00:00,167211.0,"1 day, 22:26:51","[{'comment_id': 471054708, 'comment_body': ""Soory, it's not clear for me, why must change `--duration` for `--durations` ? "", 'comment_created': datetime.datetime(2020, 8, 16, 2, 14, 57, tzinfo=datetime.timezone.utc), 'commenter': 'eamanu', 'type': 'User'}, {'comment_id': 471064267, 'comment_body': 'From the commit message:\r\n\r\n> Note that newer pytest no longer accept --duration as an alias for --durations.', 'comment_created': datetime.datetime(2020, 8, 16, 4, 37, 42, tzinfo=datetime.timezone.utc), 'commenter': 'pradyunsg', 'type': 'User'}, {'comment_id': 471764706, 'comment_body': 'perfect @pradyunsg ', 'comment_created': datetime.datetime(2020, 8, 17, 20, 44, 15, tzinfo=datetime.timezone.utc), 'commenter': 'eamanu', 'type': 'User'}]","[{'commit_sha': '530463879ed5d988038fcb481a043f5092a30ead', 'committer_username': 'McSinyx', 'committer_name': None, 'committer_email': 'cnx@loang.net', 'commit_date': datetime.datetime(2015, 8, 7, 4, 35, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0c0223765ae7ba6eda5d6317d83155c227e2002e', 'committer_username': 'McSinyx', 'committer_name': None, 'committer_email': 'cnx@loang.net', 'commit_date': datetime.datetime(2015, 8, 7, 4, 35, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '15e5680d8a66a96ded6a578c554292cc654f0b11', 'committer_username': 'McSinyx', 'committer_name': None, 'committer_email': 'cnx@loang.net', 'commit_date': datetime.datetime(2015, 8, 7, 4, 35, 24, tzinfo=datetime.timezone.utc)}]",,13689192,cnx@loang.net,User,,36,,44,62
470810844,Mark tests using remote svn and hg as xfail,"colorstudy.com has been down for a few days now.  TBH I'm not sure how long will GitHub keep supporting SVN checkouts, but for the moment I think it is OK.

Edit: This doesn't seem to work.  Is it OK to mark the 4 subversion tests as xfail?",True,8790,https://api.github.com/repos/pypa/pip/pulls/8790,https://github.com/pypa/pip/pull/8790,closed,5,0,5,1,18,4,0,0,[],2020-08-20 10:18:31+00:00,2020-08-24 06:11:34+00:00,330783.0,"3 days, 19:53:03","[{'comment_id': 474059147, 'comment_body': 'Seems wrong to use git for a test named `test_install_subversion_usersite_editable_with_distribute`. Are these not tests specifically designed to test subversion features?', 'comment_created': datetime.datetime(2020, 8, 20, 15, 12, tzinfo=datetime.timezone.utc), 'commenter': 'pfmoore', 'type': 'User'}, {'comment_id': 474625891, 'comment_body': 'I renamed the test to `test_install_git_usersite_editable_with_distribute` now.  It seems to be the only test doing editable install for user and subversion was used for historical reasons.', 'comment_created': datetime.datetime(2020, 8, 21, 10, 56, 43, tzinfo=datetime.timezone.utc), 'commenter': 'McSinyx', 'type': 'User'}, {'comment_id': 475223728, 'comment_body': 'sorrry, this test should be mark as xfail, isnt?', 'comment_created': datetime.datetime(2020, 8, 23, 14, 6, tzinfo=datetime.timezone.utc), 'commenter': 'eamanu', 'type': 'User'}, {'comment_id': 475313336, 'comment_body': 'Thanks, this uses the `-e git+file://` thing too.', 'comment_created': datetime.datetime(2020, 8, 24, 2, 42, 47, tzinfo=datetime.timezone.utc), 'commenter': 'McSinyx', 'type': 'User'}]","[{'commit_sha': 'c84ef7a67c2bb3b38a4e0616a433b143e0ddc87c', 'committer_username': 'McSinyx', 'committer_name': None, 'committer_email': 'cnx@loang.net', 'commit_date': datetime.datetime(2015, 8, 7, 4, 35, 24, tzinfo=datetime.timezone.utc)}]",,13689192,cnx@loang.net,User,,36,,44,62
472366023,Reformat a few spots in user guide,"* One commit fixes that some literal blocks and lists are rendered as indented
* The other commit tries to make the table readable in plain text (also fixes a typo spotted in GH-8672, which was merged in a hurry with such change reverted)",True,8795,https://api.github.com/repos/pypa/pip/pulls/8795,https://github.com/pypa/pip/pull/8795,closed,46,44,2,2,3,0,0,0,[],2020-08-24 08:52:59+00:00,2020-09-13 13:08:10+00:00,1743311.0,"20 days, 4:15:11",[],"[{'commit_sha': 'f060669e05931e6d69c315b4e718ea38f91bf84d', 'committer_username': 'McSinyx', 'committer_name': None, 'committer_email': 'cnx@loang.net', 'commit_date': datetime.datetime(2015, 8, 7, 4, 35, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '984fa3c66419c69cadc9b45daae54522666cc5ed', 'committer_username': 'McSinyx', 'committer_name': None, 'committer_email': 'cnx@loang.net', 'commit_date': datetime.datetime(2015, 8, 7, 4, 35, 24, tzinfo=datetime.timezone.utc)}]",,13689192,cnx@loang.net,User,,36,,44,62

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
1446467,pip,pypa/pip,Python,2991,9446,321,802,14768,1078,3,139,"[{'id': 506081669, 'number': 9015, 'closed': datetime.datetime(2020, 10, 30, 9, 51, 50, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 10, 19, 15, 41, 10, tzinfo=datetime.timezone.utc), 'time_taken': 929440.0, 'time_delta': '10 days, 18:10:40', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 506079397, 'number': 9014, 'closed': datetime.datetime(2020, 10, 26, 12, 39, 27, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 10, 19, 15, 37, 52, tzinfo=datetime.timezone.utc), 'time_taken': 594095.0, 'time_delta': '6 days, 21:01:35', 'additions': 8, 'deletions': 8, 'state': 'closed'}, {'id': 506067291, 'number': 9013, 'closed': datetime.datetime(2020, 11, 9, 15, 13, 26, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 10, 19, 15, 19, 45, tzinfo=datetime.timezone.utc), 'time_taken': 1814021.0, 'time_delta': '20 days, 23:53:41', 'additions': 18, 'deletions': 5, 'state': 'closed'}, {'id': 500012214, 'number': 8971, 'closed': datetime.datetime(2020, 10, 19, 13, 53, 50, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 10, 8, 15, 33, 30, tzinfo=datetime.timezone.utc), 'time_taken': 944420.0, 'time_delta': '10 days, 22:20:20', 'additions': 12, 'deletions': 10, 'state': 'closed'}, {'id': 498594808, 'number': 8962, 'closed': datetime.datetime(2020, 10, 6, 22, 21, 4, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 10, 6, 14, 35, 23, tzinfo=datetime.timezone.utc), 'time_taken': 27941.0, 'time_delta': '7:45:41', 'additions': 0, 'deletions': 0, 'state': 'closed'}, {'id': 479563161, 'number': 8844, 'closed': datetime.datetime(2020, 9, 5, 7, 12, 51, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 9, 4, 10, 41, 30, tzinfo=datetime.timezone.utc), 'time_taken': 73881.0, 'time_delta': '20:31:21', 'additions': 0, 'deletions': 6, 'state': 'closed'}, {'id': 479502144, 'number': 8843, 'closed': datetime.datetime(2020, 10, 7, 9, 56, 48, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 9, 4, 9, 30, 34, tzinfo=datetime.timezone.utc), 'time_taken': 2852774.0, 'time_delta': '33 days, 0:26:14', 'additions': 47, 'deletions': 67, 'state': 'closed'}, {'id': 473282198, 'number': 8804, 'closed': datetime.datetime(2020, 10, 1, 22, 11, 44, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 25, 15, 22, 9, tzinfo=datetime.timezone.utc), 'time_taken': 3221375.0, 'time_delta': '37 days, 6:49:35', 'additions': 23, 'deletions': 14, 'state': 'closed'}, {'id': 472366023, 'number': 8795, 'closed': datetime.datetime(2020, 9, 13, 13, 8, 10, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 24, 8, 52, 59, tzinfo=datetime.timezone.utc), 'time_taken': 1743311.0, 'time_delta': '20 days, 4:15:11', 'additions': 46, 'deletions': 44, 'state': 'closed'}, {'id': 470810844, 'number': 8790, 'closed': datetime.datetime(2020, 8, 24, 6, 11, 34, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 20, 10, 18, 31, tzinfo=datetime.timezone.utc), 'time_taken': 330783.0, 'time_delta': '3 days, 19:53:03', 'additions': 5, 'deletions': 0, 'state': 'closed'}, {'id': 468446584, 'number': 8771, 'closed': datetime.datetime(2021, 3, 5, 16, 43, 36, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 16, 13, 43, 27, tzinfo=datetime.timezone.utc), 'time_taken': 17377209.0, 'time_delta': '201 days, 3:00:09', 'additions': 155, 'deletions': 66, 'state': 'closed'}, {'id': 468322652, 'number': 8766, 'closed': datetime.datetime(2020, 8, 17, 12, 50, 18, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 15, 14, 23, 27, tzinfo=datetime.timezone.utc), 'time_taken': 167211.0, 'time_delta': '1 day, 22:26:51', 'additions': 10, 'deletions': 11, 'state': 'closed'}, {'id': 468258785, 'number': 8764, 'closed': datetime.datetime(2020, 8, 15, 14, 56, 27, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 15, 4, 29, 25, tzinfo=datetime.timezone.utc), 'time_taken': 37622.0, 'time_delta': '10:27:02', 'additions': 2, 'deletions': 1, 'state': 'closed'}, {'id': 467911835, 'number': 8759, 'closed': datetime.datetime(2020, 8, 14, 17, 3, 48, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 14, 10, 41, 14, tzinfo=datetime.timezone.utc), 'time_taken': 22954.0, 'time_delta': '6:22:34', 'additions': 6, 'deletions': 1, 'state': 'closed'}, {'id': 465562412, 'number': 8743, 'closed': datetime.datetime(2020, 8, 18, 13, 55, 8, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 10, 15, 12, 4, tzinfo=datetime.timezone.utc), 'time_taken': 686584.0, 'time_delta': '7 days, 22:43:04', 'additions': 29, 'deletions': 0, 'state': 'closed'}, {'id': 465168592, 'number': 8737, 'closed': datetime.datetime(2020, 8, 14, 5, 16, 18, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 9, 15, 53, 6, tzinfo=datetime.timezone.utc), 'time_taken': 393792.0, 'time_delta': '4 days, 13:23:12', 'additions': 128, 'deletions': 108, 'state': 'closed'}, {'id': 464725134, 'number': 8730, 'closed': datetime.datetime(2020, 8, 11, 10, 11, 36, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 7, 17, 19, 7, tzinfo=datetime.timezone.utc), 'time_taken': 319949.0, 'time_delta': '3 days, 16:52:29', 'additions': 4, 'deletions': 0, 'state': 'closed'}, {'id': 464085646, 'number': 8722, 'closed': datetime.datetime(2020, 9, 16, 12, 2, 52, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 6, 15, 3, 50, tzinfo=datetime.timezone.utc), 'time_taken': 3531542.0, 'time_delta': '40 days, 20:59:02', 'additions': 45, 'deletions': 48, 'state': 'closed'}, {'id': 463457049, 'number': 8716, 'closed': datetime.datetime(2020, 8, 5, 23, 58, 23, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 5, 15, 25, 51, tzinfo=datetime.timezone.utc), 'time_taken': 30752.0, 'time_delta': '8:32:32', 'additions': 4, 'deletions': 2, 'state': 'closed'}, {'id': 463242978, 'number': 8710, 'closed': datetime.datetime(2020, 8, 6, 14, 42, 33, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 5, 8, 50, 43, tzinfo=datetime.timezone.utc), 'time_taken': 107510.0, 'time_delta': '1 day, 5:51:50', 'additions': 36, 'deletions': 20, 'state': 'closed'}, {'id': 463222393, 'number': 8709, 'closed': datetime.datetime(2020, 8, 17, 11, 52, 18, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 5, 8, 11, 46, tzinfo=datetime.timezone.utc), 'time_taken': 1050032.0, 'time_delta': '12 days, 3:40:32', 'additions': 9, 'deletions': 19, 'state': 'closed'}, {'id': 462612884, 'number': 8692, 'closed': datetime.datetime(2020, 8, 6, 10, 10, 14, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 4, 8, 28, 7, tzinfo=datetime.timezone.utc), 'time_taken': 178927.0, 'time_delta': '2 days, 1:42:07', 'additions': 1, 'deletions': 2, 'state': 'closed'}, {'id': 461784359, 'number': 8681, 'closed': datetime.datetime(2020, 8, 4, 2, 8, 49, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 2, 9, 43, 18, tzinfo=datetime.timezone.utc), 'time_taken': 145531.0, 'time_delta': '1 day, 16:25:31', 'additions': 3, 'deletions': 1, 'state': 'closed'}, {'id': 460974946, 'number': 8674, 'closed': datetime.datetime(2020, 8, 2, 1, 49, 12, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 1, 10, 6, 8, tzinfo=datetime.timezone.utc), 'time_taken': 56584.0, 'time_delta': '15:43:04', 'additions': 10, 'deletions': 24, 'state': 'closed'}, {'id': 457209390, 'number': 8638, 'closed': datetime.datetime(2020, 8, 5, 7, 55, 10, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 27, 14, 42, 21, tzinfo=datetime.timezone.utc), 'time_taken': 753169.0, 'time_delta': '8 days, 17:12:49', 'additions': 122, 'deletions': 136, 'state': 'closed'}, {'id': 456733576, 'number': 8629, 'closed': datetime.datetime(2020, 8, 2, 18, 41, 25, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 26, 10, 50, 47, tzinfo=datetime.timezone.utc), 'time_taken': 633038.0, 'time_delta': '7 days, 7:50:38', 'additions': 30, 'deletions': 39, 'state': 'closed'}, {'id': 455213549, 'number': 8614, 'closed': datetime.datetime(2020, 9, 4, 9, 5, 16, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 22, 16, 5, 32, tzinfo=datetime.timezone.utc), 'time_taken': 3776384.0, 'time_delta': '43 days, 16:59:44', 'additions': 147, 'deletions': 225, 'state': 'closed'}, {'id': 451840422, 'number': 8599, 'closed': datetime.datetime(2020, 7, 19, 12, 57, 42, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 18, 10, 1, 38, tzinfo=datetime.timezone.utc), 'time_taken': 96964.0, 'time_delta': '1 day, 2:56:04', 'additions': 8, 'deletions': 7, 'state': 'closed'}, {'id': 450944497, 'number': 8597, 'closed': datetime.datetime(2020, 7, 17, 14, 54, 15, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 17, 9, 10, 25, tzinfo=datetime.timezone.utc), 'time_taken': 20630.0, 'time_delta': '5:43:50', 'additions': 60, 'deletions': 65, 'state': 'closed'}, {'id': 450027970, 'number': 8588, 'closed': datetime.datetime(2020, 7, 24, 3, 31, 57, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 16, 9, 2, 20, tzinfo=datetime.timezone.utc), 'time_taken': 671377.0, 'time_delta': '7 days, 18:29:37', 'additions': 124, 'deletions': 16, 'state': 'closed'}, {'id': 449566741, 'number': 8584, 'closed': datetime.datetime(2020, 7, 21, 8, 23, 21, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 15, 15, 41, 35, tzinfo=datetime.timezone.utc), 'time_taken': 492106.0, 'time_delta': '5 days, 16:41:46', 'additions': 28, 'deletions': 11, 'state': 'closed'}, {'id': 448030891, 'number': 8578, 'closed': datetime.datetime(2020, 9, 3, 16, 34, 54, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 13, 4, 44, 25, tzinfo=datetime.timezone.utc), 'time_taken': 4535429.0, 'time_delta': '52 days, 11:50:29', 'additions': 142, 'deletions': 36, 'state': 'closed'}, {'id': 447742604, 'number': 8571, 'closed': datetime.datetime(2020, 7, 13, 21, 52, 38, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 11, 8, 59, 23, tzinfo=datetime.timezone.utc), 'time_taken': 219195.0, 'time_delta': '2 days, 12:53:15', 'additions': 12, 'deletions': 25, 'state': 'closed'}, {'id': 447001720, 'number': 8568, 'closed': datetime.datetime(2020, 9, 18, 16, 13, 30, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 9, 17, 40, 16, tzinfo=datetime.timezone.utc), 'time_taken': 6129194.0, 'time_delta': '70 days, 22:33:14', 'additions': 23, 'deletions': 32, 'state': 'closed'}, {'id': 444255557, 'number': 8538, 'closed': datetime.datetime(2020, 7, 8, 1, 19, 29, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 4, 8, 13, 7, tzinfo=datetime.timezone.utc), 'time_taken': 320782.0, 'time_delta': '3 days, 17:06:22', 'additions': 16, 'deletions': 7, 'state': 'closed'}, {'id': 444121022, 'number': 8532, 'closed': datetime.datetime(2020, 7, 16, 9, 4, 11, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 3, 15, 57, 19, tzinfo=datetime.timezone.utc), 'time_taken': 1098412.0, 'time_delta': '12 days, 17:06:52', 'additions': 119, 'deletions': 34, 'state': 'closed'}, {'id': 440889040, 'number': 8504, 'closed': datetime.datetime(2020, 7, 3, 22, 1, 27, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 27, 9, 47, 43, tzinfo=datetime.timezone.utc), 'time_taken': 562424.0, 'time_delta': '6 days, 12:13:44', 'additions': 3, 'deletions': 1, 'state': 'closed'}, {'id': 436597569, 'number': 8467, 'closed': datetime.datetime(2020, 6, 30, 13, 39, 5, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 18, 16, 19, 32, tzinfo=datetime.timezone.utc), 'time_taken': 1027173.0, 'time_delta': '11 days, 21:19:33', 'additions': 296, 'deletions': 27, 'state': 'closed'}, {'id': 435922161, 'number': 8456, 'closed': datetime.datetime(2020, 7, 8, 1, 40, 39, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 17, 15, 17, 45, tzinfo=datetime.timezone.utc), 'time_taken': 1765374.0, 'time_delta': '20 days, 10:22:54', 'additions': 54, 'deletions': 57, 'state': 'closed'}, {'id': 434633597, 'number': 8442, 'closed': datetime.datetime(2020, 6, 24, 1, 33, 57, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 15, 16, 2, 3, tzinfo=datetime.timezone.utc), 'time_taken': 725514.0, 'time_delta': '8 days, 9:31:54', 'additions': 84, 'deletions': 94, 'state': 'closed'}, {'id': 433770826, 'number': 8435, 'closed': datetime.datetime(2021, 4, 2, 9, 9, 24, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 12, 16, 9, 50, tzinfo=datetime.timezone.utc), 'time_taken': 25376374.0, 'time_delta': '293 days, 16:59:34', 'additions': 368, 'deletions': 324, 'state': 'closed'}, {'id': 432566272, 'number': 8423, 'closed': datetime.datetime(2020, 7, 18, 0, 10, 44, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 10, 16, 21, 20, tzinfo=datetime.timezone.utc), 'time_taken': 3224964.0, 'time_delta': '37 days, 7:49:24', 'additions': 61, 'deletions': 69, 'state': 'closed'}, {'id': 429904659, 'number': 8411, 'closed': datetime.datetime(2020, 6, 30, 13, 41, 12, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 7, 9, 28, 54, tzinfo=datetime.timezone.utc), 'time_taken': 2002338.0, 'time_delta': '23 days, 4:12:18', 'additions': 78, 'deletions': 84, 'state': 'closed'}, {'id': 423728098, 'number': 8332, 'closed': datetime.datetime(2020, 6, 29, 18, 27, 27, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 5, 27, 9, 33, 14, tzinfo=datetime.timezone.utc), 'time_taken': 2883253.0, 'time_delta': '33 days, 8:54:13', 'additions': 3, 'deletions': 0, 'state': 'closed'}, {'id': 422621611, 'number': 8320, 'closed': datetime.datetime(2020, 6, 29, 7, 54, 15, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 5, 25, 8, 38, 21, tzinfo=datetime.timezone.utc), 'time_taken': 3021354.0, 'time_delta': '34 days, 23:15:54', 'additions': 173, 'deletions': 0, 'state': 'closed'}, {'id': 418916621, 'number': 8248, 'closed': datetime.datetime(2020, 5, 16, 9, 21, 20, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 5, 16, 5, 7, 54, tzinfo=datetime.timezone.utc), 'time_taken': 15206.0, 'time_delta': '4:13:26', 'additions': 2, 'deletions': 7, 'state': 'closed'}, {'id': 409048702, 'number': 8143, 'closed': datetime.datetime(2020, 5, 7, 13, 19, 49, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 4, 26, 9, 17, 43, tzinfo=datetime.timezone.utc), 'time_taken': 964926.0, 'time_delta': '11 days, 4:02:06', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 408924760, 'number': 8137, 'closed': datetime.datetime(2021, 4, 2, 9, 8, 21, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 4, 25, 15, 25, 25, tzinfo=datetime.timezone.utc), 'time_taken': 29526176.0, 'time_delta': '341 days, 17:42:56', 'additions': 71, 'deletions': 40, 'state': 'closed'}, {'id': 402463439, 'number': 8031, 'closed': datetime.datetime(2020, 4, 14, 13, 32, 41, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 4, 13, 4, 14, 41, tzinfo=datetime.timezone.utc), 'time_taken': 119880.0, 'time_delta': '1 day, 9:18:00', 'additions': 15, 'deletions': 12, 'state': 'closed'}, {'id': 399521778, 'number': 7988, 'closed': datetime.datetime(2020, 4, 9, 11, 35, 17, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 4, 6, 9, 53, 14, tzinfo=datetime.timezone.utc), 'time_taken': 265323.0, 'time_delta': '3 days, 1:42:03', 'additions': 35, 'deletions': 20, 'state': 'closed'}, {'id': 395229742, 'number': 7929, 'closed': datetime.datetime(2020, 4, 1, 15, 47, 31, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 3, 29, 10, 32, 11, tzinfo=datetime.timezone.utc), 'time_taken': 278120.0, 'time_delta': '3 days, 5:15:20', 'additions': 40, 'deletions': 34, 'state': 'closed'}, {'id': 395229429, 'number': 7928, 'closed': datetime.datetime(2020, 3, 29, 13, 17, 43, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 3, 29, 10, 29, 1, tzinfo=datetime.timezone.utc), 'time_taken': 10122.0, 'time_delta': '2:48:42', 'additions': 2, 'deletions': 0, 'state': 'closed'}, {'id': 385106454, 'number': 7828, 'closed': datetime.datetime(2021, 3, 5, 16, 41, 35, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 3, 7, 5, 23, 40, tzinfo=datetime.timezone.utc), 'time_taken': 31403875.0, 'time_delta': '363 days, 11:17:55', 'additions': 311, 'deletions': 129, 'state': 'closed'}]"
