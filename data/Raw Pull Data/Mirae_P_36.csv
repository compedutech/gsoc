pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
977848914,[ENH] HMM annotation estimator,"I wanted to share a draft PR of what I have been working on with HMM estimator. 


<details>
<summary>More Details:</summary>
<br>

- rather than assuming a particular emission distribution function, which I believe is what `hmmlearn` does (ie you can choose to use a Guassian HMM vs a Multinomial Discrete HMM, and you need to either build, or hope an HMM with your emission distribution has already been built), we simply accept a list of functions which behave as pdf and use those to calculate the emission probability.  The viterbi algorithm gets to treat those as a black box. 
    - the hope here is that we can add some functionality which automatically generates some nice functions for people if needed (ie give me an n-dimensional gaussian!), but it also gives the flexibility to do more interesting things!  - Have an empirical distribution you want to act as a ""pdf""?  Have some other distribution you are getting from some other system that you would like to use? As long as it can return a valid probability then it *should* work with our HMM estimator, no need to write your own!
- I have spent some time optimizing the algorithms with numpy (in particular, the `_calculate_trans_mats` function which is the slowest part), the plan is to push this a bit more and then conduct speed tests between this draft estimator and `hmmlearn`, so we can have a more quantitative comparison of speed. 
- I implemented a very simple version of a base object, named `SimpleBaseEstimator` and used that here.  It is very similar to what Lukasz did in his annotation flavored PR actually, just added in the `get_params()` and `set_params()` functions, which are technically required for it to be a sklearn like estimator. 
    - I am not proposing we replace our Base Object with what I wrote at all, just wanted to see how many of the bells and whistles in Base Estimator I could get away without! Again - just for testing purposes.


### Example of how to use it: 

```
from sktime.annotation.hmm import HMM
from scipy.stats import norm
from numpy import asarray

centers = [3.5,-5]
sd = [.25 for i in centers]
emi_funcs = [(norm.pdf, {'loc': mean, 'scale': sd[ind]}) for ind, mean in enumerate(centers)]

test = HMM(emi_funcs, asarray([[0.25,0.75], [0.666, 0.333]]))
obs = asarray([3.7,3.2,3.4,3.6,-5.1,-5.2,-4.9])
test.fit(obs)
print(test.predict())
```

<\details>

@fkiraly, @lmmentel, @GuzalBulatova 
   ",True,2855,https://api.github.com/repos/sktime/sktime/pulls/2855,https://github.com/sktime/sktime/pull/2855,closed,503,3,5,28,11,30,2,2,"[{'name': 'module:annotation'}, {'name': 'enhancement'}]",2022-06-24 03:12:13+00:00,2022-08-07 16:14:58+00:00,3848565.0,"44 days, 13:02:45","[{'comment_id': 926952692, 'comment_body': 'Viterbi', 'comment_created': datetime.datetime(2022, 7, 21, 17, 49, 5, tzinfo=datetime.timezone.utc), 'commenter': 'fkiraly', 'type': 'User'}, {'comment_id': 926954923, 'comment_body': 'It would be crucial to be more precise to describe what the output is, given input.\r\nI.e., given the X, what is being produced in `predict`? What is the fit doing?\r\n\r\nThe current docstring is just a high-level description of HMM, not of the specific procedure that fit/predict below carries out.', 'comment_created': datetime.datetime(2022, 7, 21, 17, 50, 52, tzinfo=datetime.timezone.utc), 'commenter': 'fkiraly', 'type': 'User'}, {'comment_id': 926955906, 'comment_body': 'must be more precise. What signature do the functions have?\r\nShould also probably be callable.', 'comment_created': datetime.datetime(2022, 7, 21, 17, 51, 34, tzinfo=datetime.timezone.utc), 'commenter': 'fkiraly', 'type': 'User'}, {'comment_id': 926956294, 'comment_body': 'please specify python type', 'comment_created': datetime.datetime(2022, 7, 21, 17, 51, 48, tzinfo=datetime.timezone.utc), 'commenter': 'fkiraly', 'type': 'User'}, {'comment_id': 926957095, 'comment_body': 'please specify python types, and specify which dimensions must be equal, e.g., should the length match something else, above?', 'comment_created': datetime.datetime(2022, 7, 21, 17, 52, 27, tzinfo=datetime.timezone.utc), 'commenter': 'fkiraly', 'type': 'User'}, {'comment_id': 926958294, 'comment_body': 're naming, avoid calling things `test` or `temp` or similar. Names, even if short, should be as descriptive as possible. Better, perhaps: `hmm`, `hmm_est`', 'comment_created': datetime.datetime(2022, 7, 21, 17, 53, 23, tzinfo=datetime.timezone.utc), 'commenter': 'fkiraly', 'type': 'User'}, {'comment_id': 926959172, 'comment_body': 'should happen after `super.__init__` call', 'comment_created': datetime.datetime(2022, 7, 21, 17, 54, 1, tzinfo=datetime.timezone.utc), 'commenter': 'fkiraly', 'type': 'User'}, {'comment_id': 926959813, 'comment_body': 'clearer: `self.transition_prob_mat.shape[0]`', 'comment_created': datetime.datetime(2022, 7, 21, 17, 54, 29, tzinfo=datetime.timezone.utc), 'commenter': 'fkiraly', 'type': 'User'}, {'comment_id': 926960205, 'comment_body': 'use `x.ndim` instead of `len(x.shape)`', 'comment_created': datetime.datetime(2022, 7, 21, 17, 54, 48, tzinfo=datetime.timezone.utc), 'commenter': 'fkiraly', 'type': 'User'}, {'comment_id': 926961264, 'comment_body': 'say more explicitly:\r\n* what *needs* to be the case\r\n* which variables are being referred to here, so the user can compare to the function docstring by matching variable names rather than trying to match text', 'comment_created': datetime.datetime(2022, 7, 21, 17, 56, 1, tzinfo=datetime.timezone.utc), 'commenter': 'fkiraly', 'type': 'User'}, {'comment_id': 926961707, 'comment_body': 'capitalize Viterbi (name of a person)', 'comment_created': datetime.datetime(2022, 7, 21, 17, 56, 32, tzinfo=datetime.timezone.utc), 'commenter': 'fkiraly', 'type': 'User'}, {'comment_id': 926965339, 'comment_body': 'typo?', 'comment_created': datetime.datetime(2022, 7, 21, 18, 0, 58, tzinfo=datetime.timezone.utc), 'commenter': 'fkiraly', 'type': 'User'}, {'comment_id': 926966557, 'comment_body': 'this canÂ´t be right - `_hmm_viterbi_label` not using `X`? Can this only be used in-sample?', 'comment_created': datetime.datetime(2022, 7, 21, 18, 2, 19, tzinfo=datetime.timezone.utc), 'commenter': 'fkiraly', 'type': 'User'}, {'comment_id': 927087567, 'comment_body': 'how about?\r\n```suggestion\r\nTo read more about the algorithm, check out the `HMM wikipedia page <https://en.wikipedia.org/wiki/Hidden_Markov_model>`_.\r\n```', 'comment_created': datetime.datetime(2022, 7, 21, 20, 44, 51, tzinfo=datetime.timezone.utc), 'commenter': 'lmmentel', 'type': 'User'}, {'comment_id': 927089056, 'comment_body': ""alternative wording \r\n\r\n```suggestion\r\n    The HMM annotation estimator uses\r\n    the Veterbi algorithm to fit a sequence of 'hidden state' class\r\n```"", 'comment_created': datetime.datetime(2022, 7, 21, 20, 46, 57, tzinfo=datetime.timezone.utc), 'commenter': 'lmmentel', 'type': 'User'}, {'comment_id': 927092712, 'comment_body': 'all attributes that are not part of the `__init__` signature should be assigned in `fit` to avoid side effects when using `set_params`', 'comment_created': datetime.datetime(2022, 7, 21, 20, 50, 54, tzinfo=datetime.timezone.utc), 'commenter': 'lmmentel', 'type': 'User'}, {'comment_id': 927095321, 'comment_body': 'how about using `np.isclose` and compare against a vector of ones to avoid the loop? ', 'comment_created': datetime.datetime(2022, 7, 21, 20, 54, 46, tzinfo=datetime.timezone.utc), 'commenter': 'lmmentel', 'type': 'User'}, {'comment_id': 927097070, 'comment_body': 'this could work as well\r\n\r\n```suggestion\r\n    assert isinstance(y_pred, (pd.Series, np.ndarray))\r\n```', 'comment_created': datetime.datetime(2022, 7, 21, 20, 57, 17, tzinfo=datetime.timezone.utc), 'commenter': 'lmmentel', 'type': 'User'}, {'comment_id': 927490339, 'comment_body': 'Yes, that is cleaner', 'comment_created': datetime.datetime(2022, 7, 22, 9, 51, 25, tzinfo=datetime.timezone.utc), 'commenter': 'miraep8', 'type': 'User'}, {'comment_id': 927491498, 'comment_body': 'Yes, also implemented Viterbi in another situation, and the comment was more relevant there. (biological annotation).  Good catch!', 'comment_created': datetime.datetime(2022, 7, 22, 9, 52, 50, tzinfo=datetime.timezone.utc), 'commenter': 'miraep8', 'type': 'User'}, {'comment_id': 927492985, 'comment_body': 'Yes, good suggestion!', 'comment_created': datetime.datetime(2022, 7, 22, 9, 54, 33, tzinfo=datetime.timezone.utc), 'commenter': 'miraep8', 'type': 'User'}, {'comment_id': 927494247, 'comment_body': 'I added some more details to that effect (and also moved all the logic to predict as you had suggested). Are you happier with it now, or does it still need more? ', 'comment_created': datetime.datetime(2022, 7, 22, 9, 56, tzinfo=datetime.timezone.utc), 'commenter': 'miraep8', 'type': 'User'}, {'comment_id': 927495723, 'comment_body': 'Yes!  Although I have changed it.  As you pointed out below the estimator (as it is) is only applying Viterbi to a single observation (_predict looked this was as originally all the logic that extracted information from `X` was in `_fit`.  I have since moved everything to `_predict`)', 'comment_created': datetime.datetime(2022, 7, 22, 9, 57, 43, tzinfo=datetime.timezone.utc), 'commenter': 'miraep8', 'type': 'User'}, {'comment_id': 927642663, 'comment_body': 'My suggestions for improvement regarding the docstrings: an example of conventional docs can be found in [boss.py file](https://github.com/alan-turing-institute/sktime/blob/main/sktime/classification/dictionary_based/_boss.py). For example, first line is the type, and broader description of a parameter starts from the next line, which makes it further easier to read. Sth like\r\n```\r\nparameter : float, optional, default=1.5\r\n   Broader description of the parameter.\r\n```', 'comment_created': datetime.datetime(2022, 7, 22, 13, 17, 28, tzinfo=datetime.timezone.utc), 'commenter': 'GuzalBulatova', 'type': 'User'}, {'comment_id': 927650711, 'comment_body': 'This might read less intuitive but we could use just `range` with all its params `(start, stop, step)` here, like \r\n`for index in range(self.num_obs, 0, -1)`, \r\nwhat do you think?', 'comment_created': datetime.datetime(2022, 7, 22, 13, 26, 18, tzinfo=datetime.timezone.utc), 'commenter': 'GuzalBulatova', 'type': 'User'}, {'comment_id': 927655443, 'comment_body': 'Suggest to group all imports up in the beginning.', 'comment_created': datetime.datetime(2022, 7, 22, 13, 31, 21, tzinfo=datetime.timezone.utc), 'commenter': 'GuzalBulatova', 'type': 'User'}, {'comment_id': 928124903, 'comment_body': 'I think that reads a lot better actually!  Thanks for the suggestion!', 'comment_created': datetime.datetime(2022, 7, 23, 13, 39, 58, tzinfo=datetime.timezone.utc), 'commenter': 'miraep8', 'type': 'User'}, {'comment_id': 928128251, 'comment_body': 'Thank you!  It was useful to see a more concrete example of what a good example of docstring looks like :) ', 'comment_created': datetime.datetime(2022, 7, 23, 14, 12, 5, tzinfo=datetime.timezone.utc), 'commenter': 'miraep8', 'type': 'User'}, {'comment_id': 929005808, 'comment_body': ""This looks great, thanks for the changes! \r\nI think the only docstr left is `_calculate_trans_mats`, and it'll be good to go."", 'comment_created': datetime.datetime(2022, 7, 25, 15, 16, 47, tzinfo=datetime.timezone.utc), 'commenter': 'GuzalBulatova', 'type': 'User'}, {'comment_id': 929008601, 'comment_body': 'Ah yes, good catch!  Will work on that now.  Thanks again for the helpful feedback! :) \r\n', 'comment_created': datetime.datetime(2022, 7, 25, 15, 19, 20, tzinfo=datetime.timezone.utc), 'commenter': 'miraep8', 'type': 'User'}]","[{'commit_sha': 'fac45f54e22c397a4e0419f6b4c01dad1c8d1e46', 'committer_username': 'miraep8', 'committer_name': 'Mirae Baichoo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 13, 7, 36, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a84fbbe9a0e1ced1d3e4307456786a35fb37fe0a', 'committer_username': 'miraep8', 'committer_name': 'Mirae Baichoo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 13, 7, 36, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2f40abcaaa7f42e57ea3b2aa0a656827b27b5bed', 'committer_username': 'miraep8', 'committer_name': 'Mirae Baichoo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 13, 7, 36, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '70c5d68c94c7edcd81915f8b116e64e3d97febd9', 'committer_username': 'miraep8', 'committer_name': 'Mirae Baichoo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 13, 7, 36, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3e693ce6febdb31f83037e0325b5e16c822b2c28', 'committer_username': 'miraep8', 'committer_name': 'Mirae Baichoo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 13, 7, 36, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '43d91ecaa540bbe8ea264c1fc89fa1011eb41f1f', 'committer_username': 'miraep8', 'committer_name': 'Mirae Baichoo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 13, 7, 36, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b724a3aab27656cc9ddcf9d85fb4b35016aeb48e', 'committer_username': 'miraep8', 'committer_name': 'Mirae Baichoo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 13, 7, 36, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '08c5b54914efd4e581c96d02fd4910f90c4ab6f2', 'committer_username': 'miraep8', 'committer_name': 'Mirae Baichoo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 13, 7, 36, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '86c0e02f3c9029312a83df695e0cecec6bb1050e', 'committer_username': 'miraep8', 'committer_name': 'Mirae Baichoo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 13, 7, 36, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4abcbd4f829e4d574d9f98066419061568f54f59', 'committer_username': 'miraep8', 'committer_name': 'Mirae Baichoo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 13, 7, 36, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '672e79cbd549c6de15418daa866d016a59afb1e5', 'committer_username': 'miraep8', 'committer_name': 'Mirae Baichoo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 13, 7, 36, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '37d9cf08c800782ff41d8565f3e07ec034222217', 'committer_username': 'miraep8', 'committer_name': 'Mirae Baichoo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 13, 7, 36, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '952defa668c96bdd1a069b11c709affcdd8d754f', 'committer_username': 'miraep8', 'committer_name': 'Mirae Baichoo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 13, 7, 36, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b5da5a59ac5432481974791efd7576864c2ff43f', 'committer_username': 'miraep8', 'committer_name': 'Mirae Baichoo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 13, 7, 36, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '11d2cab1e5f9f911a21a6479f6c2bcfbd023da74', 'committer_username': 'miraep8', 'committer_name': 'Mirae Baichoo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 13, 7, 36, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '486a1ff3146f98beff75ca7a006d761e22b43dbe', 'committer_username': 'miraep8', 'committer_name': 'Mirae Baichoo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 13, 7, 36, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '78cbd8c62d0aa1371ac89b9595d1c8031e6236af', 'committer_username': 'miraep8', 'committer_name': 'Mirae Baichoo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 13, 7, 36, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '84885d7bfa4ce087145fbe9bffca7b29a115050b', 'committer_username': 'miraep8', 'committer_name': 'Mirae Baichoo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 13, 7, 36, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bb3e59e41837c1ef063d7ca5303507f4065dd4aa', 'committer_username': 'miraep8', 'committer_name': 'Mirae Baichoo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 13, 7, 36, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bba4da6c2ff83c4fa447b52c37db8d231ce4aa3d', 'committer_username': 'miraep8', 'committer_name': 'Mirae Baichoo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 13, 7, 36, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '62bd38590cf231c102091b9e1410875af5c21d4d', 'committer_username': 'miraep8', 'committer_name': 'Mirae Baichoo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 13, 7, 36, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '63ec870781484c78b762a6339f6d777b98d9516a', 'committer_username': 'miraep8', 'committer_name': 'Mirae Baichoo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 13, 7, 36, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ecd39644e07fb49229151a35efedcfe375258178', 'committer_username': 'miraep8', 'committer_name': 'Mirae Baichoo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 13, 7, 36, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fe8ba038914a09b7c70869026d7ae633465cf98e', 'committer_username': 'miraep8', 'committer_name': 'Mirae Baichoo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 13, 7, 36, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dc52bbf175524d4b03871e205f1eb77ae1ef720c', 'committer_username': 'miraep8', 'committer_name': 'Mirae Baichoo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 13, 7, 36, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ee1b825029671837861bdfe758e8d69696e9abac', 'committer_username': 'miraep8', 'committer_name': 'Mirae Baichoo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 13, 7, 36, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8dda9589c0cf61d8aedffc4a6dd1dfba23b6a00e', 'committer_username': 'miraep8', 'committer_name': 'Mirae Baichoo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 13, 7, 36, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '380815eae83af31068bfad7a4e9919b5799f8acf', 'committer_username': 'miraep8', 'committer_name': 'Mirae Baichoo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 13, 7, 36, 26, tzinfo=datetime.timezone.utc)}]",Mirae Baichoo,10511777,,User,,14,,4,12
1013899718,[ENH] Wrapper for hmmlearn,"Related to my issue #3099 on how I plan to further improve our support of HMM-like algorithms in `sktime` and also the issue I opened in `hmmlearn` ([#484](https://github.com/hmmlearn/hmmlearn/issues/484))

Will make a non-draft PR when it is ready for review.  At a high level the plan is o have a simple base class that interfaces with the `BaseAnnotator` class and provides interface compatibility.  Then each HMM-like class which inherits from this base class simply imports the relevant HMM estimator from `hmmlearn`. 

Still to do:
- make sure parameter setting is consistent/works!
- add some more tests that things work as expected. ",False,3156,https://api.github.com/repos/sktime/sktime/pulls/3156,https://github.com/sktime/sktime/pull/3156,closed,351,0,5,30,4,13,1,1,[{'name': 'module:annotation'}],2022-08-01 13:46:01+00:00,2022-09-21 20:58:46+00:00,4432365.0,"51 days, 7:12:45","[{'comment_id': 955126302, 'comment_body': 'Whoops, this was a small workaround I had put into place to deal with the fact that I had constructed a different __init__ (via define).  Will fix this before merging ', 'comment_created': datetime.datetime(2022, 8, 25, 15, 35, 39, tzinfo=datetime.timezone.utc), 'commenter': 'miraep8', 'type': 'User'}, {'comment_id': 955198482, 'comment_body': ""hm, you *had* to sneak this in, didn't you?\r\nI suppose it's ok in an experimental part of sktime, let's see whether this causes any problems...\r\n\r\nCan you check whether the top level of the test suite is executed on `GaussianHMM`? This should be the case if it ultimately inherits from `BaseObject`."", 'comment_created': datetime.datetime(2022, 8, 25, 16, 38, 29, tzinfo=datetime.timezone.utc), 'commenter': 'fkiraly', 'type': 'User'}, {'comment_id': 955201630, 'comment_body': ""ok, I just scrolled down and do see that the little `define` thing causes errors...\r\n\r\nwe can't change the core interface contract because of that.\r\n`vars`, for instance, does not return all init args, so this change breaks the test!"", 'comment_created': datetime.datetime(2022, 8, 25, 16, 42, 2, tzinfo=datetime.timezone.utc), 'commenter': 'fkiraly', 'type': 'User'}, {'comment_id': 955226172, 'comment_body': 'I totally agree, it was a spandrel I left in by mistake.  Currently working to see if I can still make the `attrs` work despite this though! :) ', 'comment_created': datetime.datetime(2022, 8, 25, 17, 9, 46, tzinfo=datetime.timezone.utc), 'commenter': 'miraep8', 'type': 'User'}, {'comment_id': 955227772, 'comment_body': 'Yes, I do believe it ultimately ends up running the test suite on `GaussianHMM` given the fact that I had to debug a few of them :) ', 'comment_created': datetime.datetime(2022, 8, 25, 17, 11, 34, tzinfo=datetime.timezone.utc), 'commenter': 'miraep8', 'type': 'User'}, {'comment_id': 955269859, 'comment_body': ""well, I've also tried and failed...\r\nhttps://github.com/alan-turing-institute/sktime/pull/2735"", 'comment_created': datetime.datetime(2022, 8, 25, 18, 1, 40, tzinfo=datetime.timezone.utc), 'commenter': 'fkiraly', 'type': 'User'}, {'comment_id': 955281881, 'comment_body': 'with `attrs`, `vars` seems not to work properly.  I think this has something to do with it not playing well with the `__dict__` function that `vars` seems to rely on.  They do get added as valid attributes in the `__init__` however, which is captured by using `dir` instead, and I think is what we are really interested in???\r\n\r\nThey are slightly different functions though, as is summarized a bit [here](https://stackoverflow.com/questions/980249/difference-between-dir-and-vars-keys-in-python).  Let me know if people think this is a reasonable change or not.  (I believe it should still execute this test as expected for other estimators, ie if something is passed in init, but is not added as an attribute then this test **should** still fail as expected).   ', 'comment_created': datetime.datetime(2022, 8, 25, 18, 16, 26, tzinfo=datetime.timezone.utc), 'commenter': 'miraep8', 'type': 'User'}, {'comment_id': 955438130, 'comment_body': ""could we separate out the `attrs` business from this PR? In a separate PR?\r\n\r\nI think that's a different issue - modification of the base object interface.\r\n\r\nThe separate PR should be accompanied by tests and dummy examples for the `attr` variant."", 'comment_created': datetime.datetime(2022, 8, 25, 21, 28, 50, tzinfo=datetime.timezone.utc), 'commenter': 'fkiraly', 'type': 'User'}, {'comment_id': 956078590, 'comment_body': 'Yes I can do that.', 'comment_created': datetime.datetime(2022, 8, 26, 14, 4, 32, tzinfo=datetime.timezone.utc), 'commenter': 'miraep8', 'type': 'User'}, {'comment_id': 964412713, 'comment_body': ""I'm wondering what type of expected type X is (i.e. pd.DaraFrame/Series or np.Array) - a docstring?"", 'comment_created': datetime.datetime(2022, 9, 7, 6, 1, 21, tzinfo=datetime.timezone.utc), 'commenter': 'KatieBuc', 'type': 'User'}, {'comment_id': 964413390, 'comment_body': ""I like how you've taken care of reshaping the data in the Base Class, is this also true for when inputs are numpy arrays?"", 'comment_created': datetime.datetime(2022, 9, 7, 6, 2, 28, tzinfo=datetime.timezone.utc), 'commenter': 'KatieBuc', 'type': 'User'}, {'comment_id': 964414017, 'comment_body': 'ah but then do we need a reshape here?', 'comment_created': datetime.datetime(2022, 9, 7, 6, 3, 36, tzinfo=datetime.timezone.utc), 'commenter': 'KatieBuc', 'type': 'User'}, {'comment_id': 965080201, 'comment_body': 'Yep, there should be some docstrings here.  Adding them now!', 'comment_created': datetime.datetime(2022, 9, 7, 16, 55, 8, tzinfo=datetime.timezone.utc), 'commenter': 'miraep8', 'type': 'User'}]","[{'commit_sha': '27a8a02c8d983123f55fe18af8cea1205b74b5f8', 'committer_username': 'miraep8', 'committer_name': 'Mirae Baichoo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 13, 7, 36, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '45dfdd6b435c81f392d2733341f9bdc3e9b086e9', 'committer_username': 'miraep8', 'committer_name': 'Mirae Baichoo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 13, 7, 36, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f6ce60f0243b35475780e1db153fee56bbe2f19a', 'committer_username': 'miraep8', 'committer_name': 'Mirae Baichoo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 13, 7, 36, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2a3f506c51b8df2847a63e5536de5bce5f7c8e54', 'committer_username': 'miraep8', 'committer_name': 'Mirae Baichoo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 13, 7, 36, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1b1ad8725a40e796a1aee990284179d30a181f45', 'committer_username': 'miraep8', 'committer_name': 'Mirae Baichoo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 13, 7, 36, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '453461c0595d727f126b9b188ff68b75cdcc6839', 'committer_username': 'miraep8', 'committer_name': 'Mirae Baichoo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 13, 7, 36, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd8f1a303f47218edb014b61998bc3a02220994da', 'committer_username': 'miraep8', 'committer_name': 'Mirae Baichoo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 13, 7, 36, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e315526656c2ad40faa4374ad7ad013a118aeffd', 'committer_username': 'miraep8', 'committer_name': 'Mirae Baichoo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 13, 7, 36, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b114ab67cc91eed547391e1fb8d1ecb3f66331dc', 'committer_username': 'miraep8', 'committer_name': 'Mirae Baichoo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 13, 7, 36, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '74aa924678add85720acc6b1478a01798f2d2a67', 'committer_username': 'miraep8', 'committer_name': 'Mirae Baichoo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 13, 7, 36, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f8e424326e891f24411eb183bcd9f60aba32d58f', 'committer_username': 'miraep8', 'committer_name': 'Mirae Baichoo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 13, 7, 36, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '86d0b571537c1df7ca87c388acefbbf23d970e89', 'committer_username': 'miraep8', 'committer_name': 'Mirae Baichoo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 13, 7, 36, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '78e84babda3c8df8928af441afad6234277f79f1', 'committer_username': 'miraep8', 'committer_name': 'Mirae Baichoo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 13, 7, 36, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3e9ba5f66d5b4898462c23056aa90499edba46ec', 'committer_username': 'miraep8', 'committer_name': 'Mirae Baichoo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 13, 7, 36, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fb49576af888e9a48cf72120dc55d7a79e19d6a7', 'committer_username': 'miraep8', 'committer_name': 'Mirae Baichoo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 13, 7, 36, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '21c6cfa802aa9e70190a7baf6312ba95fc1aea76', 'committer_username': 'miraep8', 'committer_name': 'Mirae Baichoo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 13, 7, 36, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dfeca203fe4c0b1f4589b9232366d6b74a6a37ae', 'committer_username': 'miraep8', 'committer_name': 'Mirae Baichoo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 13, 7, 36, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '261bb481a4cd9dbb0fc4be8663d48e2690dddd0a', 'committer_username': 'miraep8', 'committer_name': 'Mirae Baichoo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 13, 7, 36, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '48609fa88a4118d05f734fe3425bd3f839ebc019', 'committer_username': 'miraep8', 'committer_name': 'Mirae Baichoo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 13, 7, 36, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0c9e92a15a9f456e94755ccb5f49cfcbb30684f4', 'committer_username': 'miraep8', 'committer_name': 'Mirae Baichoo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 13, 7, 36, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5d566f9f626e04c800b6a2082e5ac06eb1f4232a', 'committer_username': 'miraep8', 'committer_name': 'Mirae Baichoo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 13, 7, 36, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8dc28d48a240f80c4de54dd0a0e515d38594f0a9', 'committer_username': 'miraep8', 'committer_name': 'Mirae Baichoo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 13, 7, 36, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e9afeb2312a586793b066b00b3b86e6c72702ef0', 'committer_username': 'miraep8', 'committer_name': 'Mirae Baichoo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 13, 7, 36, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1e252d792bfb01722b1de9bbea43b0d8d9e2a28d', 'committer_username': 'miraep8', 'committer_name': 'Mirae Baichoo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 13, 7, 36, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bc8d7d129a095a30811755eb4c44349364734cd3', 'committer_username': 'miraep8', 'committer_name': 'Mirae Baichoo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 13, 7, 36, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8005d0780de471e70ea3340a47bec4a637f88bfa', 'committer_username': 'miraep8', 'committer_name': 'Mirae Baichoo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 13, 7, 36, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c8a62cf6b85d808495dc9331105db0905c28f1fc', 'committer_username': 'miraep8', 'committer_name': 'Mirae Baichoo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 13, 7, 36, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2169ac6895a4bec597661dcde3b4e95531b2514e', 'committer_username': 'miraep8', 'committer_name': 'Mirae Baichoo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 13, 7, 36, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8d87091426ebf056c0359b55094843d7395e359b', 'committer_username': 'miraep8', 'committer_name': 'Mirae Baichoo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 13, 7, 36, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '961cad7953922613bd30e567b5f67286ba024af5', 'committer_username': 'miraep8', 'committer_name': 'Mirae Baichoo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 13, 7, 36, 26, tzinfo=datetime.timezone.utc)}]",Mirae Baichoo,10511777,,User,,14,,4,12
1040143682,[ENH] add GMMHMM from hmmlearn,"Building on success I have had with wrapping GuassianHMM in   #3156 this is a simple PR which wraps GMMHMM from `hmmlearn`. 

I intend this to be a reference as to how some of the other estimators from `hmmlearn` can also be wrapped and incorporated into `sktime`.

Contains PR #3156.
",True,3362,https://api.github.com/repos/sktime/sktime/pulls/3362,https://github.com/sktime/sktime/pull/3362,closed,586,0,6,42,2,0,2,1,"[{'name': 'module:annotation'}, {'name': 'enhancement'}]",2022-08-29 20:02:12+00:00,2022-09-21 20:56:27+00:00,1990455.0,"23 days, 0:54:15",[],"[{'commit_sha': '27a8a02c8d983123f55fe18af8cea1205b74b5f8', 'committer_username': 'miraep8', 'committer_name': 'Mirae Baichoo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 13, 7, 36, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '45dfdd6b435c81f392d2733341f9bdc3e9b086e9', 'committer_username': 'miraep8', 'committer_name': 'Mirae Baichoo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 13, 7, 36, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f6ce60f0243b35475780e1db153fee56bbe2f19a', 'committer_username': 'miraep8', 'committer_name': 'Mirae Baichoo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 13, 7, 36, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2a3f506c51b8df2847a63e5536de5bce5f7c8e54', 'committer_username': 'miraep8', 'committer_name': 'Mirae Baichoo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 13, 7, 36, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1b1ad8725a40e796a1aee990284179d30a181f45', 'committer_username': 'miraep8', 'committer_name': 'Mirae Baichoo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 13, 7, 36, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '453461c0595d727f126b9b188ff68b75cdcc6839', 'committer_username': 'miraep8', 'committer_name': 'Mirae Baichoo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 13, 7, 36, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd8f1a303f47218edb014b61998bc3a02220994da', 'committer_username': 'miraep8', 'committer_name': 'Mirae Baichoo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 13, 7, 36, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e315526656c2ad40faa4374ad7ad013a118aeffd', 'committer_username': 'miraep8', 'committer_name': 'Mirae Baichoo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 13, 7, 36, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b114ab67cc91eed547391e1fb8d1ecb3f66331dc', 'committer_username': 'miraep8', 'committer_name': 'Mirae Baichoo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 13, 7, 36, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '74aa924678add85720acc6b1478a01798f2d2a67', 'committer_username': 'miraep8', 'committer_name': 'Mirae Baichoo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 13, 7, 36, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f8e424326e891f24411eb183bcd9f60aba32d58f', 'committer_username': 'miraep8', 'committer_name': 'Mirae Baichoo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 13, 7, 36, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '86d0b571537c1df7ca87c388acefbbf23d970e89', 'committer_username': 'miraep8', 'committer_name': 'Mirae Baichoo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 13, 7, 36, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '78e84babda3c8df8928af441afad6234277f79f1', 'committer_username': 'miraep8', 'committer_name': 'Mirae Baichoo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 13, 7, 36, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3e9ba5f66d5b4898462c23056aa90499edba46ec', 'committer_username': 'miraep8', 'committer_name': 'Mirae Baichoo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 13, 7, 36, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fb49576af888e9a48cf72120dc55d7a79e19d6a7', 'committer_username': 'miraep8', 'committer_name': 'Mirae Baichoo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 13, 7, 36, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '21c6cfa802aa9e70190a7baf6312ba95fc1aea76', 'committer_username': 'miraep8', 'committer_name': 'Mirae Baichoo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 13, 7, 36, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dfeca203fe4c0b1f4589b9232366d6b74a6a37ae', 'committer_username': 'miraep8', 'committer_name': 'Mirae Baichoo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 13, 7, 36, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '261bb481a4cd9dbb0fc4be8663d48e2690dddd0a', 'committer_username': 'miraep8', 'committer_name': 'Mirae Baichoo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 13, 7, 36, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '48609fa88a4118d05f734fe3425bd3f839ebc019', 'committer_username': 'miraep8', 'committer_name': 'Mirae Baichoo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 13, 7, 36, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0c9e92a15a9f456e94755ccb5f49cfcbb30684f4', 'committer_username': 'miraep8', 'committer_name': 'Mirae Baichoo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 13, 7, 36, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5d566f9f626e04c800b6a2082e5ac06eb1f4232a', 'committer_username': 'miraep8', 'committer_name': 'Mirae Baichoo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 13, 7, 36, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8dc28d48a240f80c4de54dd0a0e515d38594f0a9', 'committer_username': 'miraep8', 'committer_name': 'Mirae Baichoo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 13, 7, 36, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '19f783f7b2242139ac24432e222c4da74e9d9e3f', 'committer_username': 'miraep8', 'committer_name': 'Mirae Baichoo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 13, 7, 36, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e9afeb2312a586793b066b00b3b86e6c72702ef0', 'committer_username': 'miraep8', 'committer_name': 'Mirae Baichoo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 13, 7, 36, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '787bfbd3b8eaff5d0c6d9ab7d8fc6225294f580c', 'committer_username': 'miraep8', 'committer_name': 'Mirae Baichoo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 13, 7, 36, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f2f79950babefad17641324e5209f0a7a618e07a', 'committer_username': 'miraep8', 'committer_name': 'Mirae Baichoo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 13, 7, 36, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1e252d792bfb01722b1de9bbea43b0d8d9e2a28d', 'committer_username': 'miraep8', 'committer_name': 'Mirae Baichoo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 13, 7, 36, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e763f266b7982f34b8bef5a74913d08b11f5e350', 'committer_username': 'miraep8', 'committer_name': 'Mirae Baichoo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 13, 7, 36, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1facbb8532bb6a925ff26c48c0859ebf4508d1e5', 'committer_username': 'miraep8', 'committer_name': 'Mirae Baichoo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 13, 7, 36, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cffcae87ad4cb7ca771404f8ef7a60580c168e76', 'committer_username': 'miraep8', 'committer_name': 'Mirae Baichoo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 13, 7, 36, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '355505e8a1532b9ba005774b2ad2a0b4e98817e0', 'committer_username': 'miraep8', 'committer_name': 'Mirae Baichoo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 13, 7, 36, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c5116c25c7b8992bd088273bf667b50b41a24eff', 'committer_username': 'miraep8', 'committer_name': 'Mirae Baichoo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 13, 7, 36, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '24bed8b86349b95b9943626f7dcd0a5dbbf6eb94', 'committer_username': 'miraep8', 'committer_name': 'Mirae Baichoo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 13, 7, 36, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6346c1e42e3c0817d19c93575590b1bac66de701', 'committer_username': 'miraep8', 'committer_name': 'Mirae Baichoo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 13, 7, 36, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '98fdc347aa1c5048d4bf9bc3da9e2d22d7f5451b', 'committer_username': 'miraep8', 'committer_name': 'Mirae Baichoo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 13, 7, 36, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c81fa05441d87f41c15c83f7f91bb9cadbefc81d', 'committer_username': 'miraep8', 'committer_name': 'Mirae Baichoo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 13, 7, 36, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bc8d7d129a095a30811755eb4c44349364734cd3', 'committer_username': 'miraep8', 'committer_name': 'Mirae Baichoo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 13, 7, 36, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8005d0780de471e70ea3340a47bec4a637f88bfa', 'committer_username': 'miraep8', 'committer_name': 'Mirae Baichoo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 13, 7, 36, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c8a62cf6b85d808495dc9331105db0905c28f1fc', 'committer_username': 'miraep8', 'committer_name': 'Mirae Baichoo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 13, 7, 36, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd4d754e7432dbb02fb29a85dddba1f68723d583c', 'committer_username': 'miraep8', 'committer_name': 'Mirae Baichoo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 13, 7, 36, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3fad66ac1d4c7e19386e39b0d3733fd136cec30d', 'committer_username': 'miraep8', 'committer_name': 'Mirae Baichoo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 13, 7, 36, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '91683a725b6974bed1b402b9c2fd9161fedfaace', 'committer_username': 'miraep8', 'committer_name': 'Mirae Baichoo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 13, 7, 36, 26, tzinfo=datetime.timezone.utc)}]",Mirae Baichoo,10511777,,User,,14,,4,12
1041232996,[BUG] fixing HMM last read bug,There was an issue with the way the HMM estimator was setting the last annotated segment in the list.  Thanks to @lmmentel for spotting it/letting me know.  I think this small change should fix it.  Will also add the example provided as a test shortly. ,True,3366,https://api.github.com/repos/sktime/sktime/pulls/3366,https://github.com/sktime/sktime/pull/3366,closed,48,33,2,6,4,2,0,0,[],2022-08-30 16:47:07+00:00,2022-09-08 16:00:57+00:00,774830.0,"8 days, 23:13:50","[{'comment_id': 966029260, 'comment_body': 'FYI since you are using `@staticmethod` you can do\r\n```suggestion\r\n        trans_prob, trans_id = self._calculate_trans_mats(\r\n```', 'comment_created': datetime.datetime(2022, 9, 8, 14, 17, 2, tzinfo=datetime.timezone.utc), 'commenter': 'lmmentel', 'type': 'User'}, {'comment_id': 966041481, 'comment_body': 'Nice ð  I am not really sure what the difference is between these two things, but seems reasonable to me.  Will look more into it, but in the meantime went ahead and make the change! :) ', 'comment_created': datetime.datetime(2022, 9, 8, 14, 26, 59, tzinfo=datetime.timezone.utc), 'commenter': 'miraep8', 'type': 'User'}]","[{'commit_sha': '8ebca1f760b12f1b2c2e1a280dda0467211a0ada', 'committer_username': 'miraep8', 'committer_name': 'Mirae Baichoo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 13, 7, 36, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3c65fcbd1ee92564523e51e2825e92862addd783', 'committer_username': 'miraep8', 'committer_name': 'Mirae Baichoo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 13, 7, 36, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dd18f71f1ea8da0aac3a0b28b132d8acbf6dd681', 'committer_username': 'miraep8', 'committer_name': 'Mirae Baichoo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 13, 7, 36, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b88cf9d84dd0a3e6682aec3260d1e37677d8df12', 'committer_username': 'miraep8', 'committer_name': 'Mirae Baichoo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 13, 7, 36, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '656b8470f856f06a81bb532ab94173ab8ec193e8', 'committer_username': 'miraep8', 'committer_name': 'Mirae Baichoo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 13, 7, 36, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4ecd98223181da6f5d02e58d2d5fe11c1c54cd4f', 'committer_username': 'miraep8', 'committer_name': 'Mirae Baichoo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 13, 7, 36, 26, tzinfo=datetime.timezone.utc)}]",Mirae Baichoo,10511777,,User,,14,,4,12
1050857861,[ENH] Fix for hmm sporadic test failure,"Thank you to @fkiraly for bringing this error to my attention in #3394 

I believe the issues was arising from potential randomness in the generation of fake data for the testing of output types for the estimator.  Depending on the data set that was generated, I believe the probability of seeing that data was accidentally running into a -Inf.  This is behavior I should fix in a more elegant manner (ie by detecting that we are approaching a -Inf and either recalibrating or using a modulo solution), but for now I believe I have fixed the error by changing two things:

- Increasing the sd of the emission functions for my test parameters.  This should make a range of values far more likely than what we saw before, helping the tests to avoid the region where it encountered errors
- changing the value error to a warning instead of an error. 

Happy to merge @fkiraly's PR (#3395) which simply skips this test for the meantime and we can think if we need more to solve this problem or not, but I think these two changes should solve it! ",True,3396,https://api.github.com/repos/sktime/sktime/pulls/3396,https://github.com/sktime/sktime/pull/3396,closed,4,8,2,3,2,0,2,0,"[{'name': 'module:annotation'}, {'name': 'bugfix'}]",2022-09-08 21:24:30+00:00,2022-09-09 22:01:00+00:00,88590.0,"1 day, 0:36:30",[],"[{'commit_sha': 'd891078f3b99cdcca49100ef154d3592b5ea8d43', 'committer_username': 'miraep8', 'committer_name': 'Mirae Baichoo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 13, 7, 36, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '883bec6992ae0cf714605f2b1112c37c1bc5da4e', 'committer_username': 'miraep8', 'committer_name': 'Mirae Baichoo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 13, 7, 36, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6cfeb5bb438fd80e943eb445f04fef92a5ad586a', 'committer_username': 'miraep8', 'committer_name': 'Mirae Baichoo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 13, 7, 36, 26, tzinfo=datetime.timezone.utc)}]",Mirae Baichoo,10511777,,User,,14,,4,12
915434929,[ENH] Added tests for MultiplexForecaster,"#### Reference Issues/PRs

As mentioned in #2514 wrote some tests to see if `MultiplexForecaster` performs as expected.  

#### What does this implement/fix? Explain your changes.

Essentially - run `ForecastingGridSearchCV`  on `MultiplexForecaster` and verify that the best forecaster from the grid search is also the one we select if we simply evaluated all the forecasters separately. 

*Note - I use a very small data set and only compare have 2 forecasters in `MultiplexForecaster`.  I did this to not make the test too slow - but it is not the most thorough test.  Hopefully it would still help catch some obvious issues.*

#### Does your contribution introduce a new dependency? If yes, which one?

No

#### What should a reviewer concentrate their feedback on?

Any other obvious tests that should be added? Should we add more forecasters?  Does this test make sense to you? 

#### Any other comments?

@aiwalter I went ahead and added you as an author to this file.  I figured since you had a hand in co-creating `MultiplexForecaster` in the first place and also weighed in on #2514 it seemed reasonable.  However - please let me know if you would prefer if I removed you. 

#### PR checklist
- [x] I've added myself to the [list of contributors](https://github.com/alan-turing-institute/sktime/blob/main/.all-contributorsrc).
- [x] I've added unit tests and made sure they pass locally.
- [x] The PR title starts with either [ENH], [DOC] or [BUG] indicating whether the PR topic is related to enhancement, documentation or bug


<!--
Thanks for contributing!
-->
",True,2520,https://api.github.com/repos/sktime/sktime/pulls/2520,https://github.com/sktime/sktime/pull/2520,closed,96,0,1,7,2,14,0,0,[],2022-04-21 14:39:41+00:00,2022-04-21 23:53:47+00:00,33246.0,9:14:06,"[{'comment_id': 855561551, 'comment_body': 'why is aiwalter an author? Did you take code from elsewhere?', 'comment_created': datetime.datetime(2022, 4, 21, 20, 18, 7, tzinfo=datetime.timezone.utc), 'commenter': 'fkiraly', 'type': 'User'}, {'comment_id': 855562413, 'comment_body': 'better not use `forecasting.all`, it has not been used in a while, and who knows what will happen with it.\r\n\r\nIn case you want to help fix the `all` import, have a look at this issue: https://github.com/alan-turing-institute/sktime/issues/1928 (until then I would recommend to not use it)', 'comment_created': datetime.datetime(2022, 4, 21, 20, 19, 30, tzinfo=datetime.timezone.utc), 'commenter': 'fkiraly', 'type': 'User'}, {'comment_id': 855564387, 'comment_body': 'I think we need to be careful, there is a subtle point here:\r\nobjects are being passed by reference in python. So, both the `MultiplexForecaster` hyper-parameters and the `forecasters` list are pointing to the *identical* forecaster objects!\r\nThey should be cloned inside the `MultiplexForecaster`, but you could think up a situation where two bugs cancel each other out - i.e., if clone is not done properly.\r\nI would recommend a deepcopy to have the two sides of the comparison, or separate construction from the class.', 'comment_created': datetime.datetime(2022, 4, 21, 20, 22, 35, tzinfo=datetime.timezone.utc), 'commenter': 'fkiraly', 'type': 'User'}, {'comment_id': 855574773, 'comment_body': 'Oof, my bad!  Very important point! Will be sure to fix that immediately, thanks for spotting! ', 'comment_created': datetime.datetime(2022, 4, 21, 20, 38, 12, tzinfo=datetime.timezone.utc), 'commenter': 'miraep8', 'type': 'User'}, {'comment_id': 855574855, 'comment_body': 'Sure, will fix this to be more specific with the imports!  Thanks for the heads up :) ', 'comment_created': datetime.datetime(2022, 4, 21, 20, 38, 20, tzinfo=datetime.timezone.utc), 'commenter': 'miraep8', 'type': 'User'}, {'comment_id': 855578188, 'comment_body': 'I actually think I may have copied that from the MutliplexForecaster example haha, so will be sure to go and fix it there as well. :) ', 'comment_created': datetime.datetime(2022, 4, 21, 20, 43, 5, tzinfo=datetime.timezone.utc), 'commenter': 'miraep8', 'type': 'User'}, {'comment_id': 855581752, 'comment_body': 'Sorry - chalk this up to me being new to collaborative coding/open source projects!  I wanted to ere on the side of giving as much credit as possible (as I mentioned in the **Any other comments** section above!) But no - the code including the unfortunate reference error is mine! (though I certainly did look at the example `MultiplexForecaster` code as well as other test scripts for inspiration!).', 'comment_created': datetime.datetime(2022, 4, 21, 20, 48, 12, tzinfo=datetime.timezone.utc), 'commenter': 'miraep8', 'type': 'User'}, {'comment_id': 855585930, 'comment_body': 'Oh actually - I do remember this! I think I was being a bit lazy as I noticed that MultiplexForecaster does technically make a deep copy via sklearn.base.clone (see below)  But still, this code is ugly regardless and I will fix it. \r\n\r\n  ```\r\n  def _set_forecaster(self):\r\n        self._check_selected_forecaster()\r\n        if self.selected_forecaster is not None:\r\n            for name, forecaster in self.forecasters:\r\n                if self.selected_forecaster == name:\r\n                    self.forecaster_ = clone(forecaster)\r\n```', 'comment_created': datetime.datetime(2022, 4, 21, 20, 54, 1, tzinfo=datetime.timezone.utc), 'commenter': 'miraep8', 'type': 'User'}, {'comment_id': 855588530, 'comment_body': '> as I noticed that MultiplexForecaster does technically make a deep copy via sklearn.base.clone (see below)\r\n\r\nYes, I know - my point being, if that gets broken somehow (and it is not difficult to break this, with all the underscores or not-underscores floating around, IÂ´ve done this already a couple times), then the test will no longer pick up if the tested property fails...', 'comment_created': datetime.datetime(2022, 4, 21, 20, 57, 56, tzinfo=datetime.timezone.utc), 'commenter': 'fkiraly', 'type': 'User'}, {'comment_id': 855597718, 'comment_body': ""Actually - if it all right with you I might actually fix the MultiplexForecaster input example in my upcoming `|` dunder PR.  As it stands it is all mixed up with those changes I was working on but didn't necessarily want to be a part of this PR."", 'comment_created': datetime.datetime(2022, 4, 21, 21, 13, 9, tzinfo=datetime.timezone.utc), 'commenter': 'miraep8', 'type': 'User'}, {'comment_id': 855599080, 'comment_body': 'Ah, got it!  Sorry, and yes I totally agree.  Better to have code that is easier to break.  Thanks! Hopefully this resolves it for you! ', 'comment_created': datetime.datetime(2022, 4, 21, 21, 15, 34, tzinfo=datetime.timezone.utc), 'commenter': 'miraep8', 'type': 'User'}, {'comment_id': 855615200, 'comment_body': 'so, unless @aiwalter objects, IÂ´d just suggest to remove it.\r\n\r\nThis is not like academia where you have to put the department head, their cousin and their dog on the paper ð \r\n\r\nAlso, whoever is in the authorÂ´s list is the person to blame for bugs in the file ð ', 'comment_created': datetime.datetime(2022, 4, 21, 21, 43, 31, tzinfo=datetime.timezone.utc), 'commenter': 'fkiraly', 'type': 'User'}, {'comment_id': 855615481, 'comment_body': 'sure, makes sense - generally itÂ´s a good idea to keep PR localized (by file or by content)', 'comment_created': datetime.datetime(2022, 4, 21, 21, 44, 6, tzinfo=datetime.timezone.utc), 'commenter': 'fkiraly', 'type': 'User'}, {'comment_id': 855622694, 'comment_body': 'It has been removed!   Blame me for the bugs!! ð ð ð ', 'comment_created': datetime.datetime(2022, 4, 21, 21, 56, 52, tzinfo=datetime.timezone.utc), 'commenter': 'miraep8', 'type': 'User'}]","[{'commit_sha': '1c69be44e2c034fdffb11b121fe2c037ca56df5d', 'committer_username': 'miraep8', 'committer_name': 'Mirae Baichoo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 13, 7, 36, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3efce72bd45314133834d319095b218a8b44d60a', 'committer_username': 'miraep8', 'committer_name': 'Mirae Baichoo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 13, 7, 36, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3a2c297d57b505a8771e267249035c414fd3e658', 'committer_username': 'miraep8', 'committer_name': 'Mirae Baichoo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 13, 7, 36, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '44a9868466808c5d43311fcd992e6beb4a3634fd', 'committer_username': 'miraep8', 'committer_name': 'Mirae Baichoo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 13, 7, 36, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '79ccd70b65f28f474d0d88839eef1582e2ef9a34', 'committer_username': 'miraep8', 'committer_name': 'Mirae Baichoo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 13, 7, 36, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '346a51d276a09a869cd11fecbc09dbc629af7829', 'committer_username': 'miraep8', 'committer_name': 'Mirae Baichoo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 13, 7, 36, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aef9df9a4ede73a5948fcfe877ad285bb1c2065f', 'committer_username': 'miraep8', 'committer_name': 'Mirae Baichoo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 13, 7, 36, 26, tzinfo=datetime.timezone.utc)}]",Mirae Baichoo,10511777,,User,,14,,4,12
917292384,[ENH] Added '|' dunder method to MultiplexForecaster,"#### Reference Issues/PRs

Implements part of #2459. **Note this PR is dependent on PR #2458**

#### What does this implement/fix? Explain your changes.

Have implemented a `|` dunder method for both `MultiplexForecaster`/`BaseForecaster`. Have also introduced new tests for this code.

Other things in this PR:
- added a small `_get_forecaster_names()` helper method to `_HeterogenousEnsembleForecaster` seemed useful to me!
- updated the example code in for using `MultiplexForecaster` so that it no longer imports from all.

#### Does your contribution introduce a new dependency? If yes, which one?

No

#### What should a reviewer concentrate their feedback on?

In addition to the dunder behaving as expected - would be great to get feedback on how I decided to do the unique name handling.

Essentially a use case I was imagining was that a user might want to do this:
``
multiplex_forecaster = AutoETS() | NaiveForecaster() | ThetaForecaster()
``
or potentially even this:
``
multiplex_forecaster = NaiveForecaster(method=""last"") | NaiveForecaster(method=""mean"") | NaiveForecaster(method=""drift"")
``

In these cases we would want to generate unique names for them.   Would appreciate feedback on whether the approach I took to do this seems reasonable. (mostly I tried to leverage the `super()` methods which already existed and were relevant)

#### PR checklist

##### For all contributions
- [x] I've added myself to the [list of contributors](https://github.com/alan-turing-institute/sktime/blob/main/.all-contributorsrc).
- [x] I've added unit tests and made sure they pass locally.
- [x] The PR title starts with either [ENH], [DOC] or [BUG] indicating whether the PR topic is related to enhancement, documentation or bug

",True,2540,https://api.github.com/repos/sktime/sktime/pulls/2540,https://github.com/sktime/sktime/pull/2540,closed,118,10,3,37,11,12,0,0,[],2022-04-23 20:35:38+00:00,2022-04-29 08:07:31+00:00,473513.0,"5 days, 11:31:53","[{'comment_id': 857033916, 'comment_body': 'I think the `MultiplexForecaster` shouhld take care of generating the name - I would just do `MultiplexForecaster(self)`', 'comment_created': datetime.datetime(2022, 4, 23, 20, 43, 52, tzinfo=datetime.timezone.utc), 'commenter': 'fkiraly', 'type': 'User'}, {'comment_id': 857034010, 'comment_body': 'we need to make a case distinction - you do the above if `other` is an instance of `BaseForecaster`, otherwise you need to return `NotImplemented` (see the other dunders)', 'comment_created': datetime.datetime(2022, 4, 23, 20, 45, 7, tzinfo=datetime.timezone.utc), 'commenter': 'fkiraly', 'type': 'User'}, {'comment_id': 857034156, 'comment_body': 'here, I would construct a new `MultiplexForecaster`, instead of modifying the current one. Otherwise we get all kinds of weird side effects from partially fitted chains etc.', 'comment_created': datetime.datetime(2022, 4, 23, 20, 46, 59, tzinfo=datetime.timezone.utc), 'commenter': 'fkiraly', 'type': 'User'}, {'comment_id': 857034176, 'comment_body': 'in all similar places as well', 'comment_created': datetime.datetime(2022, 4, 23, 20, 47, 7, tzinfo=datetime.timezone.utc), 'commenter': 'fkiraly', 'type': 'User'}, {'comment_id': 857036903, 'comment_body': ""So - two things I would appreciate some clarity on!  \r\n1) I actually intententionally had the code return a `ValueError` if other isn't a `BaseForecaster` or a `MultiplexForecaster` instead of `NotImplemented`. (My impression is that [they plan to phase out NotImplemented](https://docs.python.org/3/library/constants.html#NotImplemented), so I decided to just use an error instead).  But given that would you prefer I stick with the `NotImplemented` all the same?   \r\n2) is your issue that there are not checks (as there are - they are just wrapped up in the `MultiplexForecaster` `__or__`) or that you want them in 2 places?  I can understand the logic for the second as it makes it clearer what is going on at all stages, but does lead to code bloat a bit too..... Hence the clarification question :) "", 'comment_created': datetime.datetime(2022, 4, 23, 21, 26, 20, tzinfo=datetime.timezone.utc), 'commenter': 'miraep8', 'type': 'User'}, {'comment_id': 857037079, 'comment_body': 'Whoops!  Just kidding - I think I misread the python docs page!  Just went back and reread it!  I guess they are just depreciating the use of `NotImplemented` in a boolean context not all together! ', 'comment_created': datetime.datetime(2022, 4, 23, 21, 28, 23, tzinfo=datetime.timezone.utc), 'commenter': 'miraep8', 'type': 'User'}, {'comment_id': 857037166, 'comment_body': 'In which case I am happy to stick with it since that is what the other dunders use!  Though personally I might find a `ValueError` more useful haha. ', 'comment_created': datetime.datetime(2022, 4, 23, 21, 29, 29, tzinfo=datetime.timezone.utc), 'commenter': 'miraep8', 'type': 'User'}, {'comment_id': 857037184, 'comment_body': 'Sounds good will do! ', 'comment_created': datetime.datetime(2022, 4, 23, 21, 29, 46, tzinfo=datetime.timezone.utc), 'commenter': 'miraep8', 'type': 'User'}, {'comment_id': 857037226, 'comment_body': 'ok! ', 'comment_created': datetime.datetime(2022, 4, 23, 21, 30, 12, tzinfo=datetime.timezone.utc), 'commenter': 'miraep8', 'type': 'User'}, {'comment_id': 857049490, 'comment_body': ""I think the convention with dunders is returning `NotImplemented` if they are not implemented, and it is important to do so.\r\n\r\nWhy? There is a dunder parse order, let's say we have an expression `a * b * c`. If `a` does not implement `__mul__` for `b`, then python looks next whether `__rmul__` of `b` implements for `a`, which can be the case, and so on.\r\n\r\nHad you raised an exception in `a.__mul__`, this would have broken in the first step of parsing. But, expected behaviour and implementation is that python needs to check whether one of the two objects implements it. The information is passed via `NotImplemented`, without raising an exception."", 'comment_created': datetime.datetime(2022, 4, 24, 0, 49, 32, tzinfo=datetime.timezone.utc), 'commenter': 'fkiraly', 'type': 'User'}, {'comment_id': 857049643, 'comment_body': 'No worries - it is implemented like that in the new code! :)', 'comment_created': datetime.datetime(2022, 4, 24, 0, 52, 27, tzinfo=datetime.timezone.utc), 'commenter': 'miraep8', 'type': 'User'}, {'comment_id': 857049829, 'comment_body': 'But this is helpful to know/makes sense', 'comment_created': datetime.datetime(2022, 4, 24, 0, 55, 56, tzinfo=datetime.timezone.utc), 'commenter': 'miraep8', 'type': 'User'}]","[{'commit_sha': '13448fe1953aaeb4c2606189be3eac876d542366', 'committer_username': 'fkiraly', 'committer_name': 'Franz KirÃ¡ly', 'committer_email': 'f.kiraly@ucl.ac.uk', 'commit_date': datetime.datetime(2014, 6, 25, 12, 31, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4153cb6eec4bde87a14bc593583d368e16110ab7', 'committer_username': 'fkiraly', 'committer_name': 'Franz KirÃ¡ly', 'committer_email': 'f.kiraly@ucl.ac.uk', 'commit_date': datetime.datetime(2014, 6, 25, 12, 31, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f726e79b0b8ed59cd6d74390d87694f35793300b', 'committer_username': 'fkiraly', 'committer_name': 'Franz KirÃ¡ly', 'committer_email': 'f.kiraly@ucl.ac.uk', 'commit_date': datetime.datetime(2014, 6, 25, 12, 31, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8f04e3367a3f91cb05c3faa5ef4d4673719ab4ab', 'committer_username': 'fkiraly', 'committer_name': 'Franz KirÃ¡ly', 'committer_email': 'f.kiraly@ucl.ac.uk', 'commit_date': datetime.datetime(2014, 6, 25, 12, 31, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e016493ae6c486ef0a6b0ab08e30659f76415422', 'committer_username': 'fkiraly', 'committer_name': 'Franz KirÃ¡ly', 'committer_email': 'f.kiraly@ucl.ac.uk', 'commit_date': datetime.datetime(2014, 6, 25, 12, 31, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '44b77c56737265d8ff25f15dbdd924d424f0c1bc', 'committer_username': 'fkiraly', 'committer_name': 'Franz KirÃ¡ly', 'committer_email': 'f.kiraly@ucl.ac.uk', 'commit_date': datetime.datetime(2014, 6, 25, 12, 31, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '93911ac7b1297474f0b36118319355ef962801b0', 'committer_username': 'fkiraly', 'committer_name': 'Franz KirÃ¡ly', 'committer_email': 'f.kiraly@ucl.ac.uk', 'commit_date': datetime.datetime(2014, 6, 25, 12, 31, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1f3be57078677fe8e8c57d9e5266be8861ff489c', 'committer_username': 'fkiraly', 'committer_name': 'Franz KirÃ¡ly', 'committer_email': 'f.kiraly@ucl.ac.uk', 'commit_date': datetime.datetime(2014, 6, 25, 12, 31, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '45c4125f5ce35846b5a7fffa1d30c23e6f134e01', 'committer_username': 'fkiraly', 'committer_name': 'Franz KirÃ¡ly', 'committer_email': 'f.kiraly@ucl.ac.uk', 'commit_date': datetime.datetime(2014, 6, 25, 12, 31, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4d386426e601a72adb2dc2d0ac04d9115d8ce731', 'committer_username': 'fkiraly', 'committer_name': 'Franz KirÃ¡ly', 'committer_email': 'f.kiraly@ucl.ac.uk', 'commit_date': datetime.datetime(2014, 6, 25, 12, 31, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1c69be44e2c034fdffb11b121fe2c037ca56df5d', 'committer_username': 'miraep8', 'committer_name': 'Mirae Baichoo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 13, 7, 36, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3efce72bd45314133834d319095b218a8b44d60a', 'committer_username': 'miraep8', 'committer_name': 'Mirae Baichoo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 13, 7, 36, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3a2c297d57b505a8771e267249035c414fd3e658', 'committer_username': 'miraep8', 'committer_name': 'Mirae Baichoo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 13, 7, 36, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '44a9868466808c5d43311fcd992e6beb4a3634fd', 'committer_username': 'miraep8', 'committer_name': 'Mirae Baichoo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 13, 7, 36, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '79ccd70b65f28f474d0d88839eef1582e2ef9a34', 'committer_username': 'miraep8', 'committer_name': 'Mirae Baichoo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 13, 7, 36, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '346a51d276a09a869cd11fecbc09dbc629af7829', 'committer_username': 'miraep8', 'committer_name': 'Mirae Baichoo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 13, 7, 36, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd8ee716d6d9657ffa664f2040710415b4635a87b', 'committer_username': 'fkiraly', 'committer_name': 'Franz KirÃ¡ly', 'committer_email': 'f.kiraly@ucl.ac.uk', 'commit_date': datetime.datetime(2014, 6, 25, 12, 31, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '849ac5cd7440809849d29b884abf1f749c46d52c', 'committer_username': 'fkiraly', 'committer_name': 'Franz KirÃ¡ly', 'committer_email': 'f.kiraly@ucl.ac.uk', 'commit_date': datetime.datetime(2014, 6, 25, 12, 31, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0db3b7160d53dfeb1ef9cdbd1df85a24fa427fc8', 'committer_username': 'fkiraly', 'committer_name': 'Franz KirÃ¡ly', 'committer_email': 'f.kiraly@ucl.ac.uk', 'commit_date': datetime.datetime(2014, 6, 25, 12, 31, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8e5036d19730be4d85dab14697b6d50568fba357', 'committer_username': 'miraep8', 'committer_name': 'Mirae Baichoo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 13, 7, 36, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a7ee8e7e808d5710d4e8de1cfcd1f416b2a43ff2', 'committer_username': 'miraep8', 'committer_name': 'Mirae Baichoo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 13, 7, 36, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '72fc843319cf5f4148c18da58bac550d147728ae', 'committer_username': 'miraep8', 'committer_name': 'Mirae Baichoo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 13, 7, 36, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '85cfb3658334abc4dc8e6bca10a6f14eeab1ead8', 'committer_username': 'miraep8', 'committer_name': 'Mirae Baichoo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 13, 7, 36, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '32ef9cd838e3fad724fc6854440992a7c1ec0a40', 'committer_username': 'miraep8', 'committer_name': 'Mirae Baichoo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 13, 7, 36, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6ba07f8dedfe7b648f32885ac26a585c71538519', 'committer_username': 'miraep8', 'committer_name': 'Mirae Baichoo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 13, 7, 36, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd48030e41faf9eb38f364033c5324871c9ea75eb', 'committer_username': 'miraep8', 'committer_name': 'Mirae Baichoo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 13, 7, 36, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '773bb882a0661c4329c80f12bb8e1ad053898393', 'committer_username': 'miraep8', 'committer_name': 'Mirae Baichoo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 13, 7, 36, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fc6309c0363fcd662ae8b8470bf6ecaee9e884e0', 'committer_username': 'miraep8', 'committer_name': 'Mirae Baichoo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 13, 7, 36, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9356066494f1381181da6c9cfa30f91ef7161224', 'committer_username': 'miraep8', 'committer_name': 'Mirae Baichoo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 13, 7, 36, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cfd1d20e0e2ade30e494c7093881d1d8e2d68811', 'committer_username': 'miraep8', 'committer_name': 'Mirae Baichoo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 13, 7, 36, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c0006c1a30ad5cba935bc5f6e1225fea2caa42ad', 'committer_username': 'miraep8', 'committer_name': 'Mirae Baichoo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 13, 7, 36, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1e5a5983e3bdbb9da6a3bc112aefdbc186872a2e', 'committer_username': 'fkiraly', 'committer_name': 'Franz KirÃ¡ly', 'committer_email': 'f.kiraly@ucl.ac.uk', 'commit_date': datetime.datetime(2014, 6, 25, 12, 31, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '68e1117ca8d618c430010f2240aac2dbbed52b7f', 'committer_username': 'miraep8', 'committer_name': 'Mirae Baichoo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 13, 7, 36, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c3debeca5253d3f8cd166f1065e34cef36f8f24b', 'committer_username': 'fkiraly', 'committer_name': 'Franz KirÃ¡ly', 'committer_email': 'f.kiraly@ucl.ac.uk', 'commit_date': datetime.datetime(2014, 6, 25, 12, 31, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bcedbeaa3a6d0c1cc95a2b4dc9676328f4cb3314', 'committer_username': 'fkiraly', 'committer_name': 'Franz KirÃ¡ly', 'committer_email': 'f.kiraly@ucl.ac.uk', 'commit_date': datetime.datetime(2014, 6, 25, 12, 31, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '75aae2c5daf99fab3bcf38ede1f2ac6bc90bb129', 'committer_username': 'miraep8', 'committer_name': 'Mirae Baichoo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 13, 7, 36, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '74d55eca8776588a464565313ad2ae3fc16c838f', 'committer_username': 'miraep8', 'committer_name': 'Mirae Baichoo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 13, 7, 36, 26, tzinfo=datetime.timezone.utc)}]",Mirae Baichoo,10511777,,User,,14,,4,12
930337637,[ENH] Created _DelegatedTransformer,"#### Reference Issues/PRs

Related to convo in #2603, and replaces #2570


#### What does this implement/fix? Explain your changes.

Creates a DelegatedTransformer.  Method is identical to creation of DelegatedForecaster. 

#### Does your contribution introduce a new dependency? If yes, which one?

No
",True,2612,https://api.github.com/repos/sktime/sktime/pulls/2612,https://github.com/sktime/sktime/pull/2612,closed,168,0,1,4,4,10,1,0,[{'name': 'enhancement'}],2022-05-07 19:16:24+00:00,2022-05-10 11:46:24+00:00,232200.0,"2 days, 16:30:00","[{'comment_id': 867561773, 'comment_body': 'does not need me here, thanks for the thought', 'comment_created': datetime.datetime(2022, 5, 9, 0, 18, 5, tzinfo=datetime.timezone.utc), 'commenter': 'fkiraly', 'type': 'User'}, {'comment_id': 867561787, 'comment_body': 'transformer', 'comment_created': datetime.datetime(2022, 5, 9, 0, 18, 11, tzinfo=datetime.timezone.utc), 'commenter': 'fkiraly', 'type': 'User'}, {'comment_id': 868024334, 'comment_body': 'sure thing!  I figured since it was so heavily based on your _DelegatedForecaster I would try to err on the side of caution, but you have now been removed. ', 'comment_created': datetime.datetime(2022, 5, 9, 13, 38, 36, tzinfo=datetime.timezone.utc), 'commenter': 'miraep8', 'type': 'User'}, {'comment_id': 868024513, 'comment_body': 'Good catch!', 'comment_created': datetime.datetime(2022, 5, 9, 13, 38, 47, tzinfo=datetime.timezone.utc), 'commenter': 'miraep8', 'type': 'User'}, {'comment_id': 868388310, 'comment_body': 'non-blocking issue - this is not correct. The setting of the `is_fitted` flag is done by `fit`, not `_fit`.', 'comment_created': datetime.datetime(2022, 5, 9, 19, 53, 38, tzinfo=datetime.timezone.utc), 'commenter': 'fkiraly', 'type': 'User'}, {'comment_id': 868388710, 'comment_body': 'also not true, only `transform` accesses `is_fitted`.', 'comment_created': datetime.datetime(2022, 5, 9, 19, 54, tzinfo=datetime.timezone.utc), 'commenter': 'fkiraly', 'type': 'User'}, {'comment_id': 868389286, 'comment_body': 'should be y=y', 'comment_created': datetime.datetime(2022, 5, 9, 19, 54, 32, tzinfo=datetime.timezone.utc), 'commenter': 'fkiraly', 'type': 'User'}, {'comment_id': 868407819, 'comment_body': 'Correct, also removed/modified. ', 'comment_created': datetime.datetime(2022, 5, 9, 20, 12, 48, tzinfo=datetime.timezone.utc), 'commenter': 'miraep8', 'type': 'User'}, {'comment_id': 868408623, 'comment_body': 'Definitely! ', 'comment_created': datetime.datetime(2022, 5, 9, 20, 13, 40, tzinfo=datetime.timezone.utc), 'commenter': 'miraep8', 'type': 'User'}, {'comment_id': 868408839, 'comment_body': 'Change has been made', 'comment_created': datetime.datetime(2022, 5, 9, 20, 13, 51, tzinfo=datetime.timezone.utc), 'commenter': 'miraep8', 'type': 'User'}]","[{'commit_sha': 'a08c0acb9236298aee2eaa0760e1b232422f5c31', 'committer_username': 'miraep8', 'committer_name': 'Mirae Baichoo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 13, 7, 36, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2e7becfa1f114da7e0aaf8aace45878677eaf64b', 'committer_username': 'miraep8', 'committer_name': 'Mirae Baichoo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 13, 7, 36, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '41f7e3de386e93929a3c45383a3eac8f381d4d36', 'committer_username': 'miraep8', 'committer_name': 'Mirae Baichoo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 13, 7, 36, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '87c3085b89fae1c49564184b663458d8cda5c1fa', 'committer_username': 'miraep8', 'committer_name': 'Mirae Baichoo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 13, 7, 36, 26, tzinfo=datetime.timezone.utc)}]",Mirae Baichoo,10511777,,User,,14,,4,12
955044945,[ENH] Add MultiplexTransformer,"#### Reference Issues/PRs

Related to #2670 and #2459.  Note this implementation is meant to be very similar to how `MultiplexForecaster` currently works - see #2458 making use of the `_DelegatedTransformer` in #2612

#### What does this implement/fix? Explain your changes.

With `MultiplexTransformer` one now in theory has a new way to multiplex over multiple transformers.  (Note one could optionally include various transformers with the pre-existing `OptionalPassthrough` but `MultiplexTransformer` should be useful when people want exactly one transformer.

#### Does your contribution introduce a new dependency? If yes, which one?

No

#### What should a reviewer concentrate their feedback on?

As it stands - it seems the easiest use case is to bundle `MultiplexTransformer` into either `TransformedTargetForecaster` or `ForecastingPipeline` and then evaluate which transformer is best using `ForecastingGridCV`.  However - one might imagine that you could wish to use `MultiplexTransformer` outside of the forecasting context.  Which begs the question - is it worth building some sort of `GridSearch` functionality into transformers as well? If so - what might be the best way to ""evaluate"" which transformer is best? Just wondering if this would be worth opening an issue for. 


##### For all contributions
- [x] I've added unit tests and made sure they pass locally.
- [x] The PR title starts with either [ENH], [MNT], [DOC], or [BUG] indicating whether the PR topic is related to enhancement, maintenance, documentation, or bug.

##### For new estimators
I guess this is technically a new estimator.... I did not do these things.  But, I can. Lmk! 
- [x] I've added the estimator to the online documentation.
- [ ] I've updated the existing example notebooks or provided a new one to showcase how my estimator works.

",True,2738,https://api.github.com/repos/sktime/sktime/pulls/2738,https://github.com/sktime/sktime/pull/2738,closed,338,0,5,22,22,25,0,0,[],2022-06-01 22:46:18+00:00,2022-06-10 14:49:59+00:00,749021.0,"8 days, 16:03:41","[{'comment_id': 889059148, 'comment_body': 'Please move this to the import group above', 'comment_created': datetime.datetime(2022, 6, 3, 15, 37, 4, tzinfo=datetime.timezone.utc), 'commenter': 'GuzalBulatova', 'type': 'User'}, {'comment_id': 889063584, 'comment_body': 'It\'s recommended to start docstrings with a bare infinitive, """"""Evaluate... """""" in this case. You can find more on docstring conventions here:  [PEP 257](https://peps.python.org/pep-0257/)', 'comment_created': datetime.datetime(2022, 6, 3, 15, 42, 35, tzinfo=datetime.timezone.utc), 'commenter': 'GuzalBulatova', 'type': 'User'}, {'comment_id': 889078016, 'comment_body': ""Also, don't forget to update `CODEOWNERS` and `docs/source/api_reference/transformations.rst` :)"", 'comment_created': datetime.datetime(2022, 6, 3, 16, 0, 38, tzinfo=datetime.timezone.utc), 'commenter': 'GuzalBulatova', 'type': 'User'}, {'comment_id': 889196709, 'comment_body': 'Good catch! ', 'comment_created': datetime.datetime(2022, 6, 3, 17, 43, 57, tzinfo=datetime.timezone.utc), 'commenter': 'miraep8', 'type': 'User'}, {'comment_id': 889196958, 'comment_body': 'Yes, that is definitely the right way to do it! :) Thank you!', 'comment_created': datetime.datetime(2022, 6, 3, 17, 44, 22, tzinfo=datetime.timezone.utc), 'commenter': 'miraep8', 'type': 'User'}, {'comment_id': 889198249, 'comment_body': ""Thank you for the reminder on the CODEOWNERS bit.  And I actually haven't changed the docs directly like this before, so the pointer was really helpful.  I will leave this as unresolved until I can check out how the read the docs build looks after the changes. :) "", 'comment_created': datetime.datetime(2022, 6, 3, 17, 46, 14, tzinfo=datetime.timezone.utc), 'commenter': 'miraep8', 'type': 'User'}, {'comment_id': 889223180, 'comment_body': 'perhaps clarify better - there is no such thing as an ""exogeneous transformer"", being exogeneous is not a property of the transformer but a contextual property, i.e., of how it is used within the different pipeline constructs.', 'comment_created': datetime.datetime(2022, 6, 3, 18, 22, 41, tzinfo=datetime.timezone.utc), 'commenter': 'fkiraly', 'type': 'User'}, {'comment_id': 889223842, 'comment_body': 'seems redundant with the `Parameters` section?\r\nThough, might be useful.\r\n\r\nWhat would be important is to describe *behaviour*. I.e., what will the transformer do in `fit`, `transform`, `inverse_transform`?', 'comment_created': datetime.datetime(2022, 6, 3, 18, 23, 40, tzinfo=datetime.timezone.utc), 'commenter': 'fkiraly', 'type': 'User'}, {'comment_id': 889225066, 'comment_body': 'should be ""transformer""', 'comment_created': datetime.datetime(2022, 6, 3, 18, 25, 24, tzinfo=datetime.timezone.utc), 'commenter': 'fkiraly', 'type': 'User'}, {'comment_id': 889226161, 'comment_body': 'I would also test the ""no names"" way of passing it. You could do this by removing the names from `params2`.\r\n\r\nThe principle here is testing each important condition at least once, but not necessarily the product of all possible conditions.', 'comment_created': datetime.datetime(2022, 6, 3, 18, 27, 1, tzinfo=datetime.timezone.utc), 'commenter': 'fkiraly', 'type': 'User'}, {'comment_id': 889228535, 'comment_body': 'transformer', 'comment_created': datetime.datetime(2022, 6, 3, 18, 30, 7, tzinfo=datetime.timezone.utc), 'commenter': 'fkiraly', 'type': 'User'}, {'comment_id': 889229927, 'comment_body': '`__init__` is actually run now at the start every time `fit` is run, so this could be *completely empty* imo', 'comment_created': datetime.datetime(2022, 6, 3, 18, 32, 12, tzinfo=datetime.timezone.utc), 'commenter': 'fkiraly', 'type': 'User'}, {'comment_id': 889230184, 'comment_body': 'i.e., I think it should be ok to remove `_fit`', 'comment_created': datetime.datetime(2022, 6, 3, 18, 32, 33, tzinfo=datetime.timezone.utc), 'commenter': 'fkiraly', 'type': 'User'}, {'comment_id': 889633236, 'comment_body': 'Yes, good spots here, and elsewhere!  ', 'comment_created': datetime.datetime(2022, 6, 5, 1, 21, 47, tzinfo=datetime.timezone.utc), 'commenter': 'miraep8', 'type': 'User'}, {'comment_id': 889633274, 'comment_body': 'Yes, I agree it would be better to clarify this. ', 'comment_created': datetime.datetime(2022, 6, 5, 1, 22, 13, tzinfo=datetime.timezone.utc), 'commenter': 'miraep8', 'type': 'User'}, {'comment_id': 889633427, 'comment_body': 'Ah yea, I did forget about that change.  Sounds good. ', 'comment_created': datetime.datetime(2022, 6, 5, 1, 25, 6, tzinfo=datetime.timezone.utc), 'commenter': 'miraep8', 'type': 'User'}, {'comment_id': 889633833, 'comment_body': 'Agreed, I got rid of it and put more clarity on what tasks are delegated and how.', 'comment_created': datetime.datetime(2022, 6, 5, 1, 30, 31, tzinfo=datetime.timezone.utc), 'commenter': 'miraep8', 'type': 'User'}, {'comment_id': 889643820, 'comment_body': 'This is a good suggestion.  It is behaving strangely though.  Will push code with fix when I have it sorted out. ', 'comment_created': datetime.datetime(2022, 6, 5, 3, 38, 2, tzinfo=datetime.timezone.utc), 'commenter': 'miraep8', 'type': 'User'}, {'comment_id': 889657012, 'comment_body': ""well, that's one of the signs of a good test - that it catches bugs ð "", 'comment_created': datetime.datetime(2022, 6, 5, 6, 51, 34, tzinfo=datetime.timezone.utc), 'commenter': 'fkiraly', 'type': 'User'}, {'comment_id': 889657047, 'comment_body': ""I'll wait for the fix then"", 'comment_created': datetime.datetime(2022, 6, 5, 6, 51, 58, tzinfo=datetime.timezone.utc), 'commenter': 'fkiraly', 'type': 'User'}, {'comment_id': 892682030, 'comment_body': 'Well Franz, I guess in the end we go with `_transformers` not `transformers_` after all.  Lmk if you see anything else that needs fixing! ', 'comment_created': datetime.datetime(2022, 6, 8, 17, 41, 25, tzinfo=datetime.timezone.utc), 'commenter': 'miraep8', 'type': 'User'}, {'comment_id': 893739870, 'comment_body': 'I think there should be a newline here?', 'comment_created': datetime.datetime(2022, 6, 9, 16, 47, 37, tzinfo=datetime.timezone.utc), 'commenter': 'fkiraly', 'type': 'User'}, {'comment_id': 893740033, 'comment_body': 'number of tildes should equal number of characters above', 'comment_created': datetime.datetime(2022, 6, 9, 16, 47, 49, tzinfo=datetime.timezone.utc), 'commenter': 'fkiraly', 'type': 'User'}, {'comment_id': 893740426, 'comment_body': 'I think these are not copies but direct references', 'comment_created': datetime.datetime(2022, 6, 9, 16, 48, 16, tzinfo=datetime.timezone.utc), 'commenter': 'fkiraly', 'type': 'User'}, {'comment_id': 893801000, 'comment_body': 'Yes, I can see how the language would be confusing. ', 'comment_created': datetime.datetime(2022, 6, 9, 17, 50, 16, tzinfo=datetime.timezone.utc), 'commenter': 'miraep8', 'type': 'User'}]","[{'commit_sha': 'b8c6a1f0766c56e9c89d253fe5540e109a402371', 'committer_username': 'miraep8', 'committer_name': 'Mirae Baichoo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 13, 7, 36, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '856ca7463810e0b5f1a0a4855a8ad258890b5c10', 'committer_username': 'miraep8', 'committer_name': 'Mirae Baichoo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 13, 7, 36, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '67ceec2e0d3329415a60f9f0061f5bbe6dbab663', 'committer_username': 'miraep8', 'committer_name': 'Mirae Baichoo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 13, 7, 36, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '86263737ab45c46e37f4c3c0c34eb16f8fa66555', 'committer_username': 'miraep8', 'committer_name': 'Mirae Baichoo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 13, 7, 36, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cfcfeb15fc65a721a31ef16040edeb3358023396', 'committer_username': 'miraep8', 'committer_name': 'Mirae Baichoo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 13, 7, 36, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aab16c315a2450e956991aab96013368c2499bcc', 'committer_username': 'miraep8', 'committer_name': 'Mirae Baichoo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 13, 7, 36, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a907b1091e7bf74d79e03effe6079cfa2215069c', 'committer_username': 'miraep8', 'committer_name': 'Mirae Baichoo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 13, 7, 36, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6c8318c5d8f8e8f7ea31dfa65f4337ca8516cfb8', 'committer_username': 'miraep8', 'committer_name': 'Mirae Baichoo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 13, 7, 36, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3cf80c0ceaa7bf012d886597e85751e6788bdf74', 'committer_username': 'miraep8', 'committer_name': 'Mirae Baichoo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 13, 7, 36, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '597f9712908f7b1256d8ad383927a53ae245fa18', 'committer_username': 'miraep8', 'committer_name': 'Mirae Baichoo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 13, 7, 36, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3a13246ef144ded6e6e732de46f8231aebba3efb', 'committer_username': 'miraep8', 'committer_name': 'Mirae Baichoo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 13, 7, 36, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd890d6ff54fdf20725455bf5c7ea7225fa1c0532', 'committer_username': 'miraep8', 'committer_name': 'Mirae Baichoo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 13, 7, 36, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '966f889a5fbde7cd0638d530a5c4fb32279c0d4a', 'committer_username': 'miraep8', 'committer_name': 'Mirae Baichoo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 13, 7, 36, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9110304301bd0905b6f5da42649067dd970a1016', 'committer_username': 'miraep8', 'committer_name': 'Mirae Baichoo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 13, 7, 36, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '58a273570c2580174750090e4ea6933440fbaf51', 'committer_username': 'miraep8', 'committer_name': 'Mirae Baichoo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 13, 7, 36, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1be3d3687607fc738bdb6c6d06aa7d2f36c10bf9', 'committer_username': 'miraep8', 'committer_name': 'Mirae Baichoo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 13, 7, 36, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cdde9ebf70b4b8f875576ea1dafc7656a93b7c85', 'committer_username': 'miraep8', 'committer_name': 'Mirae Baichoo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 13, 7, 36, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '73eb918797c0cdd5e4d46f263ab702a35ac08ce3', 'committer_username': 'miraep8', 'committer_name': 'Mirae Baichoo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 13, 7, 36, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '95d570d32ca5140c8c8f7d4183d6d4b552b671cf', 'committer_username': 'miraep8', 'committer_name': 'Mirae Baichoo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 13, 7, 36, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '827f1456f4c96b48e4f57f2e208a9ca2a3c52faf', 'committer_username': 'miraep8', 'committer_name': 'Mirae Baichoo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 13, 7, 36, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '84af9a6e386375bf1a48aef775295275f19f28aa', 'committer_username': 'miraep8', 'committer_name': 'Mirae Baichoo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 13, 7, 36, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b72319e3964bb71dd0121c48e44ee27813c25e23', 'committer_username': 'miraep8', 'committer_name': 'Mirae Baichoo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 13, 7, 36, 26, tzinfo=datetime.timezone.utc)}]",Mirae Baichoo,10511777,,User,,14,,4,12
965906617,[ENH] Adding | dunder for MultiplexTransformer,"Related to design discussion on transformer dunder methods in #2459.  Also related to #2670 #2738

The `|` dunder is implemented the same way it is for `MultiplexForecaster` (ie makes use of `dunder_concat`). There are also tests for this that pass locally. ",True,2810,https://api.github.com/repos/sktime/sktime/pulls/2810,https://github.com/sktime/sktime/pull/2810,closed,135,31,3,10,7,3,0,0,[],2022-06-13 15:46:01+00:00,2022-06-21 17:51:18+00:00,698717.0,"8 days, 2:05:17","[{'comment_id': 896859587, 'comment_body': 'looks like missing double quotes here, could you kindly add them too?', 'comment_created': datetime.datetime(2022, 6, 14, 14, 1, 7, tzinfo=datetime.timezone.utc), 'commenter': 'fkiraly', 'type': 'User'}, {'comment_id': 896861699, 'comment_body': 'this expression is the same, logically, as `isinstance(other, BaseTransformer)`, because all `MultiplexTransformer` instances are also `BaseTransformer` instances. `isinstance` checks for subclass instance, not ""just"" direct instance.', 'comment_created': datetime.datetime(2022, 6, 14, 14, 2, 55, tzinfo=datetime.timezone.utc), 'commenter': 'fkiraly', 'type': 'User'}, {'comment_id': 897173316, 'comment_body': 'that makes sense', 'comment_created': datetime.datetime(2022, 6, 14, 18, 23, 46, tzinfo=datetime.timezone.utc), 'commenter': 'miraep8', 'type': 'User'}]","[{'commit_sha': 'f12ba9bfa3b8371b9dcbb0d7fe140ac1bba9e7ec', 'committer_username': 'miraep8', 'committer_name': 'Mirae Baichoo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 13, 7, 36, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6d7fb7c05c8d1e3ccf4b346c5d4b30b2d42c0b21', 'committer_username': 'miraep8', 'committer_name': 'Mirae Baichoo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 13, 7, 36, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7b0af22a08de67d59188a1bcd0a1e91bdf79ebae', 'committer_username': 'miraep8', 'committer_name': 'Mirae Baichoo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 13, 7, 36, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9131b23b3b7edfb826c793b483458cc56c068e66', 'committer_username': 'miraep8', 'committer_name': 'Mirae Baichoo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 13, 7, 36, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '04e576f453b1b857962bdfa47febb25e671767d7', 'committer_username': 'miraep8', 'committer_name': 'Mirae Baichoo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 13, 7, 36, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e052036fa7e54152c472a2d32b0fa1f70180f637', 'committer_username': 'miraep8', 'committer_name': 'Mirae Baichoo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 13, 7, 36, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '31ea64609ff35fa59e310a21ed963ab1174ae21e', 'committer_username': 'miraep8', 'committer_name': 'Mirae Baichoo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 13, 7, 36, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '99cccc987f97d82e60c3c9432417ec616712f924', 'committer_username': 'miraep8', 'committer_name': 'Mirae Baichoo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 13, 7, 36, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '79d046c217647647efa4a60fd3b1413addc483ea', 'committer_username': 'miraep8', 'committer_name': 'Mirae Baichoo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 13, 7, 36, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5c6350860de5d54ad877c187874b32fd61e497ef', 'committer_username': 'miraep8', 'committer_name': 'Mirae Baichoo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 13, 7, 36, 26, tzinfo=datetime.timezone.utc)}]",Mirae Baichoo,10511777,,User,,14,,4,12
1012206200,[BUG] Delay trimming in ForecastingGridSearchCV until after transforming,"@anthonygiorgio97 noticed + helpfully pointed out a strange bug that came up when using Differencer within TransformedTargetForecaster in ForecastingGridSearchCV. (see https://github.com/alan-turing-institute/sktime/issues/2807 and https://github.com/alan-turing-institute/sktime/issues/2880)

From what I could tell this bug was caused by the fact that Differencer reduces the size of X. Usually this isn't a problem, but because ForecastingGridSearchCV was pre-trimming all X input before passing it into the underlying forecaster, X ended up being too small by the time it got to the final forecaster and was causing problems.

My proposed solution is thus simply - avoid pre-trimming X in the _split function and instead trim it to the right size right before the actual forecasting step. (I do this specifically in _predict_last_window, but there is a decent chance it might need to be changed elsewhere as well).",True,3132,https://api.github.com/repos/sktime/sktime/pulls/3132,https://github.com/sktime/sktime/pull/3132,closed,89,9,3,13,12,0,0,0,[],2022-07-29 17:29:40+00:00,2022-08-23 19:39:36+00:00,2167796.0,"25 days, 2:09:56",[],"[{'commit_sha': '702b5190da0f855224a6ec598c3b4cccc96c72ff', 'committer_username': 'miraep8', 'committer_name': 'Mirae Baichoo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 13, 7, 36, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5a34bf355311eab11c3d0f6204afe93172c94690', 'committer_username': 'miraep8', 'committer_name': 'Mirae Baichoo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 13, 7, 36, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b50c6feab253001358726d1ea3f5f2b073c7d3e7', 'committer_username': 'miraep8', 'committer_name': 'Mirae Baichoo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 13, 7, 36, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e1a1effd24364edcb87b435cd1bce0dfc8d5895b', 'committer_username': 'miraep8', 'committer_name': 'Mirae Baichoo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 13, 7, 36, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5d5f92828a2befb06d3620708292e241cbfb9e2f', 'committer_username': 'miraep8', 'committer_name': 'Mirae Baichoo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 13, 7, 36, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5a69fe9ef75cec38d4665714fdee2e203c10fab0', 'committer_username': 'miraep8', 'committer_name': 'Mirae Baichoo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 13, 7, 36, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3ee8ed572fadb6b91bf4ba08e818602f38f327ee', 'committer_username': 'miraep8', 'committer_name': 'Mirae Baichoo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 13, 7, 36, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '797e8b3106e45fb4c2c5df76d38cb7ad17148bfd', 'committer_username': 'miraep8', 'committer_name': 'Mirae Baichoo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 13, 7, 36, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '466b6541d5ffff6ec0906448b714932c8360a4aa', 'committer_username': 'miraep8', 'committer_name': 'Mirae Baichoo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 13, 7, 36, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a934f0750b2d7fa93639032e757348c3fd73543e', 'committer_username': 'miraep8', 'committer_name': 'Mirae Baichoo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 13, 7, 36, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '04cf4bc41ffd21c8122f18b809a954ea781d3cb2', 'committer_username': 'miraep8', 'committer_name': 'Mirae Baichoo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 13, 7, 36, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9b351bad772d18af46afb47e89eab9846e606dd0', 'committer_username': 'miraep8', 'committer_name': 'Mirae Baichoo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 13, 7, 36, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fcff6e0789b19a83f36742f9389d6d7fb69b5572', 'committer_username': 'miraep8', 'committer_name': 'Mirae Baichoo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 13, 7, 36, 26, tzinfo=datetime.timezone.utc)}]",Mirae Baichoo,10511777,,User,,14,,4,12
997713258,[ENH] GraphPipeline Design Study,"@benHeid @fkiraly @SMEISEN

Draft Design PR based on what I discussed during the pywatts discussion today! :) ",False,3026,https://api.github.com/repos/sktime/sktime/pulls/3026,https://github.com/sktime/sktime/pull/3026,closed,347,0,3,1,1,5,0,0,[],2022-07-15 12:34:30+00:00,2022-09-07 16:56:06+00:00,4681296.0,"54 days, 4:21:36","[{'comment_id': 927564792, 'comment_body': 'I am unsure if we need the input_indices besides input_edges. We also should discuss if input_edges is a list or a dict. In the pyWATTS implementation of your API it is currently an API to enable a matching of the predecessors to the parameters of the fit.transform (pyWATTS allows more arguments than x and y).', 'comment_created': datetime.datetime(2022, 7, 22, 11, 34, 7, tzinfo=datetime.timezone.utc), 'commenter': 'benHeid', 'type': 'User'}, {'comment_id': 927565910, 'comment_body': 'This can be probably extracted into the steps or graphnodes (we have to decide on the naming graphnode vs step). Then this could be solved via inheritance. On specific graphnode per base class.', 'comment_created': datetime.datetime(2022, 7, 22, 11, 35, 56, tzinfo=datetime.timezone.utc), 'commenter': 'benHeid', 'type': 'User'}, {'comment_id': 927567219, 'comment_body': 'Is the idea of this class to manage and collect the results of all graphnodes and steps? \r\n\r\nI like this idea, this probably makes the pipeline class easier to understand. ', 'comment_created': datetime.datetime(2022, 7, 22, 11, 37, 55, tzinfo=datetime.timezone.utc), 'commenter': 'benHeid', 'type': 'User'}, {'comment_id': 927568242, 'comment_body': 'Thank you for adding _tests_and_checks.py Which assumption we have on the input data and thus which checks we need. ', 'comment_created': datetime.datetime(2022, 7, 22, 11, 39, 23, tzinfo=datetime.timezone.utc), 'commenter': 'benHeid', 'type': 'User'}, {'comment_id': 927569305, 'comment_body': 'Is the pipeline an estimator or a transformer. I am not sure what fits better. We should discuss this. However, currently I tend to an estimator since pipelines can contain estimators and thus the pipeline needs to be fitted.', 'comment_created': datetime.datetime(2022, 7, 22, 11, 40, 55, tzinfo=datetime.timezone.utc), 'commenter': 'benHeid', 'type': 'User'}]","[{'commit_sha': '8abe54a5588961d293c23c5688fd3e4d9b8e53ee', 'committer_username': 'miraep8', 'committer_name': 'Mirae Baichoo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 13, 7, 36, 26, tzinfo=datetime.timezone.utc)}]",Mirae Baichoo,10511777,,User,,14,,4,12
921713631,[ENH] Refactoring and Generalizing DelegatedForecaster,"#### Reference Issues/PRs

While implementing `MultiplexTransformer` for #2459 to mimic the changes in #2458 it became clear that writing a more general delegator function would be helpful.

This PR technically depends on #2540.... was making sure there weren't any clashes with #2458... but if needed I can rebase and get rid of that dependency  

#### What does this implement/fix? Explain your changes.

This replaces the `DelegatedForecaster` mixin with a decorator.  The decorator will defer the function being wrapped to a  delegated estimator if one is provided, and will also check that the current function is supported for the wrapped estimator (which should allow the decorating ability to be more general).  So far it has only been implemented for Forecasters (with particular focus on making sure it works for the solution in `MultiplexForecaster`, but I believe it should be easy to extend to transformers as well! (*Note - it now becomes very important that whatever we are wrapping the estimator in has all the same supported functions as the wrapped estimator itself, thought I think this was the case/practice before!*)

this PR implements the following changes:
- removed current `DelegatedForecaster` and associated references to it.
- added a `delegate_name` attribute to `BaseObject` as well as `get_delegate` function (borrowed from `DelegateForecaster`)
- wrote a decorator (`delegate_if_needed`) which will now handle the delegation and type checking.  Currently lives in sktime.utils.check_estimators - but there might be a better place for it! (*Let me know what you think!*)
- added a new public function to `MultiplexForecaster` to facilitate changing the `selected_forecaster` to ensure `forecaster_` is also updated (Used to be done within `fit()`, but now you have to ensure the new `forecaster_` is set before calling `fit()` on it.) 
- Added an inheritance to `BaseForecaster` to `MultiplexForecaster`.
- Checked that the change didn't break anything (at least not locally)


#### Does your contribution introduce a new dependency? If yes, which one?
No

#### What should a reviewer concentrate their feedback on?

- [ ] Overall - concerns on using the decorator vs the mixin approach???
- [ ] Suggestions on how names/where code lives could be changed to make this clearer

#### Any other comments?

Still have some Todos before I would consider this ""ready to merge"":

- [ ] extend to delegating transformers as well
- [ ] test that the new delegator approach throws the appropriate `TypeError` if you try to use a method not supported by the wrapped estimator.  
- [ ] adding a more detailed explanation about what is going on in estimator_checks (and also where I use the decorator)

(*Also note - using the decorator actually solves some of the issues that were brough up in #2458 in that the `MultiplexForecaster` no longer needs to dynamically set the tags in order for the fit to work since it is technically 'bypassed' in the fit process.  I left the `clone_tags` so that `get_tags` on a `MultiplexForecaster` will return the correct tags for the wrapped forecaster (since `get_tags` is not delegated)- but perhaps this could be delegated as well, and we wouldn't need to set the tags dynamically at all.  Thoughts??*)

Also - very much ok if we don't refactor in this way!  I stopped before applying it to the transformers as well to get feedback on what you all thought of this solution! :)


",False,2570,https://api.github.com/repos/sktime/sktime/pulls/2570,https://github.com/sktime/sktime/pull/2570,closed,136,398,9,70,8,6,0,0,[],2022-04-28 11:15:33+00:00,2022-05-20 12:46:12+00:00,1906239.0,"22 days, 1:30:39","[{'comment_id': 861551809, 'comment_body': 'for my edification (I do not know): will this also properly update the state of `estimator`?\r\nI usually use `getattr`, but I assume passing `estimator` for `self` does the same thing?', 'comment_created': datetime.datetime(2022, 4, 29, 7, 57, 21, tzinfo=datetime.timezone.utc), 'commenter': 'fkiraly', 'type': 'User'}, {'comment_id': 862382794, 'comment_body': 'There is actually a ""hidden"" call to `getattr` in `self._get_delegate()` (which I borrowed from your original `DelegateForecaster`!).  I *think* what should be happening here is that we are swapping a reference to `self` for a reference to `estimator`, which should allow us to update `estimator` properly.  (The other reason why I believe `estimator` is in fact properly updated is that if it wasn\'t more tests would break... (ie, a call to `fit()` and then `predict()` might not work because `estimator`\'s `_is_fitted` property never got properly updated)).  But let me know if you disagree/have further concerns. ', 'comment_created': datetime.datetime(2022, 4, 30, 18, 8, 26, tzinfo=datetime.timezone.utc), 'commenter': 'miraep8', 'type': 'User'}, {'comment_id': 862393473, 'comment_body': 'I think `__init__` is not the right place for attributes. See also here: https://scikit-learn.org/stable/developers/develop.html#instantiation and here https://scikit-learn.org/stable/developers/develop.html#estimated-attributes', 'comment_created': datetime.datetime(2022, 4, 30, 20, 29, 32, tzinfo=datetime.timezone.utc), 'commenter': 'aiwalter', 'type': 'User'}, {'comment_id': 862393745, 'comment_body': 'why do you rename here to `fit()`? This means you overwrite the parent `fit()` and I think we should not do so ð¤ ', 'comment_created': datetime.datetime(2022, 4, 30, 20, 32, 16, tzinfo=datetime.timezone.utc), 'commenter': 'aiwalter', 'type': 'User'}, {'comment_id': 862828751, 'comment_body': 'Thanks @aiwalter, I definitely want to be consistent!  Think I have a working work-around now  so that defining `self.best_forecaster_` no longer happens in `init`.  ', 'comment_created': datetime.datetime(2022, 5, 2, 13, 8, 28, tzinfo=datetime.timezone.utc), 'commenter': 'miraep8', 'type': 'User'}, {'comment_id': 862832666, 'comment_body': ""So, it was actually intentional that I overwrote the parent `fit()`, though I no longer do so now. :)  Long story short - the overwriting was a way to get around the delegation of `fit()`, but turns out this solution requires some sort of hacky workaround anyway.... so now this is `_fit()` again, and we no longer attempt to delegate `BaseGricCV`'s `fit()` - though we do still delegate the other functions!  If you get a chance I would appreciate your thoughts on the new version!  :) Thank you for flagging this, it was kind of a subtle point, and I think the new version that doesn't do this is cleaner. "", 'comment_created': datetime.datetime(2022, 5, 2, 13, 13, 50, tzinfo=datetime.timezone.utc), 'commenter': 'miraep8', 'type': 'User'}]","[{'commit_sha': '13448fe1953aaeb4c2606189be3eac876d542366', 'committer_username': 'fkiraly', 'committer_name': 'Franz KirÃ¡ly', 'committer_email': 'f.kiraly@ucl.ac.uk', 'commit_date': datetime.datetime(2014, 6, 25, 12, 31, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4153cb6eec4bde87a14bc593583d368e16110ab7', 'committer_username': 'fkiraly', 'committer_name': 'Franz KirÃ¡ly', 'committer_email': 'f.kiraly@ucl.ac.uk', 'commit_date': datetime.datetime(2014, 6, 25, 12, 31, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f726e79b0b8ed59cd6d74390d87694f35793300b', 'committer_username': 'fkiraly', 'committer_name': 'Franz KirÃ¡ly', 'committer_email': 'f.kiraly@ucl.ac.uk', 'commit_date': datetime.datetime(2014, 6, 25, 12, 31, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8f04e3367a3f91cb05c3faa5ef4d4673719ab4ab', 'committer_username': 'fkiraly', 'committer_name': 'Franz KirÃ¡ly', 'committer_email': 'f.kiraly@ucl.ac.uk', 'commit_date': datetime.datetime(2014, 6, 25, 12, 31, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e016493ae6c486ef0a6b0ab08e30659f76415422', 'committer_username': 'fkiraly', 'committer_name': 'Franz KirÃ¡ly', 'committer_email': 'f.kiraly@ucl.ac.uk', 'commit_date': datetime.datetime(2014, 6, 25, 12, 31, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '44b77c56737265d8ff25f15dbdd924d424f0c1bc', 'committer_username': 'fkiraly', 'committer_name': 'Franz KirÃ¡ly', 'committer_email': 'f.kiraly@ucl.ac.uk', 'commit_date': datetime.datetime(2014, 6, 25, 12, 31, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '93911ac7b1297474f0b36118319355ef962801b0', 'committer_username': 'fkiraly', 'committer_name': 'Franz KirÃ¡ly', 'committer_email': 'f.kiraly@ucl.ac.uk', 'commit_date': datetime.datetime(2014, 6, 25, 12, 31, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1f3be57078677fe8e8c57d9e5266be8861ff489c', 'committer_username': 'fkiraly', 'committer_name': 'Franz KirÃ¡ly', 'committer_email': 'f.kiraly@ucl.ac.uk', 'commit_date': datetime.datetime(2014, 6, 25, 12, 31, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '45c4125f5ce35846b5a7fffa1d30c23e6f134e01', 'committer_username': 'fkiraly', 'committer_name': 'Franz KirÃ¡ly', 'committer_email': 'f.kiraly@ucl.ac.uk', 'commit_date': datetime.datetime(2014, 6, 25, 12, 31, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4d386426e601a72adb2dc2d0ac04d9115d8ce731', 'committer_username': 'fkiraly', 'committer_name': 'Franz KirÃ¡ly', 'committer_email': 'f.kiraly@ucl.ac.uk', 'commit_date': datetime.datetime(2014, 6, 25, 12, 31, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1c69be44e2c034fdffb11b121fe2c037ca56df5d', 'committer_username': 'miraep8', 'committer_name': 'Mirae Baichoo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 13, 7, 36, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3efce72bd45314133834d319095b218a8b44d60a', 'committer_username': 'miraep8', 'committer_name': 'Mirae Baichoo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 13, 7, 36, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3a2c297d57b505a8771e267249035c414fd3e658', 'committer_username': 'miraep8', 'committer_name': 'Mirae Baichoo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 13, 7, 36, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '44a9868466808c5d43311fcd992e6beb4a3634fd', 'committer_username': 'miraep8', 'committer_name': 'Mirae Baichoo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 13, 7, 36, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '79ccd70b65f28f474d0d88839eef1582e2ef9a34', 'committer_username': 'miraep8', 'committer_name': 'Mirae Baichoo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 13, 7, 36, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '346a51d276a09a869cd11fecbc09dbc629af7829', 'committer_username': 'miraep8', 'committer_name': 'Mirae Baichoo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 13, 7, 36, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd8ee716d6d9657ffa664f2040710415b4635a87b', 'committer_username': 'fkiraly', 'committer_name': 'Franz KirÃ¡ly', 'committer_email': 'f.kiraly@ucl.ac.uk', 'commit_date': datetime.datetime(2014, 6, 25, 12, 31, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '849ac5cd7440809849d29b884abf1f749c46d52c', 'committer_username': 'fkiraly', 'committer_name': 'Franz KirÃ¡ly', 'committer_email': 'f.kiraly@ucl.ac.uk', 'commit_date': datetime.datetime(2014, 6, 25, 12, 31, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0db3b7160d53dfeb1ef9cdbd1df85a24fa427fc8', 'committer_username': 'fkiraly', 'committer_name': 'Franz KirÃ¡ly', 'committer_email': 'f.kiraly@ucl.ac.uk', 'commit_date': datetime.datetime(2014, 6, 25, 12, 31, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8e5036d19730be4d85dab14697b6d50568fba357', 'committer_username': 'miraep8', 'committer_name': 'Mirae Baichoo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 13, 7, 36, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a7ee8e7e808d5710d4e8de1cfcd1f416b2a43ff2', 'committer_username': 'miraep8', 'committer_name': 'Mirae Baichoo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 13, 7, 36, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '72fc843319cf5f4148c18da58bac550d147728ae', 'committer_username': 'miraep8', 'committer_name': 'Mirae Baichoo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 13, 7, 36, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '85cfb3658334abc4dc8e6bca10a6f14eeab1ead8', 'committer_username': 'miraep8', 'committer_name': 'Mirae Baichoo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 13, 7, 36, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '32ef9cd838e3fad724fc6854440992a7c1ec0a40', 'committer_username': 'miraep8', 'committer_name': 'Mirae Baichoo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 13, 7, 36, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6ba07f8dedfe7b648f32885ac26a585c71538519', 'committer_username': 'miraep8', 'committer_name': 'Mirae Baichoo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 13, 7, 36, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd48030e41faf9eb38f364033c5324871c9ea75eb', 'committer_username': 'miraep8', 'committer_name': 'Mirae Baichoo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 13, 7, 36, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '773bb882a0661c4329c80f12bb8e1ad053898393', 'committer_username': 'miraep8', 'committer_name': 'Mirae Baichoo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 13, 7, 36, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fc6309c0363fcd662ae8b8470bf6ecaee9e884e0', 'committer_username': 'miraep8', 'committer_name': 'Mirae Baichoo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 13, 7, 36, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9356066494f1381181da6c9cfa30f91ef7161224', 'committer_username': 'miraep8', 'committer_name': 'Mirae Baichoo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 13, 7, 36, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cfd1d20e0e2ade30e494c7093881d1d8e2d68811', 'committer_username': 'miraep8', 'committer_name': 'Mirae Baichoo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 13, 7, 36, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c0006c1a30ad5cba935bc5f6e1225fea2caa42ad', 'committer_username': 'miraep8', 'committer_name': 'Mirae Baichoo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 13, 7, 36, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1e5a5983e3bdbb9da6a3bc112aefdbc186872a2e', 'committer_username': 'fkiraly', 'committer_name': 'Franz KirÃ¡ly', 'committer_email': 'f.kiraly@ucl.ac.uk', 'commit_date': datetime.datetime(2014, 6, 25, 12, 31, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '68e1117ca8d618c430010f2240aac2dbbed52b7f', 'committer_username': 'miraep8', 'committer_name': 'Mirae Baichoo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 13, 7, 36, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e4cd2cdda1c8a259f709380dc2c7cae53b795711', 'committer_username': 'miraep8', 'committer_name': 'Mirae Baichoo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 13, 7, 36, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a8f99c7959ffa1b722337e9ae243ebce4448d654', 'committer_username': 'miraep8', 'committer_name': 'Mirae Baichoo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 13, 7, 36, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd9409ef265793f1603d9d4cfb7ad120b0654fab4', 'committer_username': 'miraep8', 'committer_name': 'Mirae Baichoo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 13, 7, 36, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f8f344de8b64e16cfeac3ae58e1fd0137462df43', 'committer_username': 'miraep8', 'committer_name': 'Mirae Baichoo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 13, 7, 36, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0cb360688646967604e391b6191fde25899938a2', 'committer_username': 'miraep8', 'committer_name': 'Mirae Baichoo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 13, 7, 36, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '302911bf246ac4d60ddd33a699ee77d3a20d28e0', 'committer_username': 'miraep8', 'committer_name': 'Mirae Baichoo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 13, 7, 36, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd0a5557d12c2c216fcdd9648ff9c350d1ea9a903', 'committer_username': 'miraep8', 'committer_name': 'Mirae Baichoo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 13, 7, 36, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '88a8aa777944a5a9d1b81d88ed00f8bf01d5d150', 'committer_username': 'miraep8', 'committer_name': 'Mirae Baichoo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 13, 7, 36, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0b42a806ab94781e66354a975452a5bf590a1455', 'committer_username': 'miraep8', 'committer_name': 'Mirae Baichoo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 13, 7, 36, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f62415767f5bd8a62a026ccf27cbc683f7669981', 'committer_username': 'miraep8', 'committer_name': 'Mirae Baichoo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 13, 7, 36, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b242c56d80172a3221d926e207a98134997eef68', 'committer_username': 'miraep8', 'committer_name': 'Mirae Baichoo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 13, 7, 36, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b2c4c89170382438889ae708d9922415898c2b1a', 'committer_username': 'miraep8', 'committer_name': 'Mirae Baichoo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 13, 7, 36, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6c15c868098f040f31a504797261b73238649b72', 'committer_username': 'miraep8', 'committer_name': 'Mirae Baichoo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 13, 7, 36, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9897d602d7bfd29dcce7bca8273b316d87beb402', 'committer_username': 'miraep8', 'committer_name': 'Mirae Baichoo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 13, 7, 36, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '02cfe7721d7837ee8bf200612bc2a02f150fe846', 'committer_username': 'miraep8', 'committer_name': 'Mirae Baichoo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 13, 7, 36, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c64c6fbfea11c192b37832b8b487448aac52cad1', 'committer_username': 'miraep8', 'committer_name': 'Mirae Baichoo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 13, 7, 36, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '37baf16e7ab98588bfd4a47921aee75aeb7a192e', 'committer_username': 'miraep8', 'committer_name': 'Mirae Baichoo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 13, 7, 36, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8e3a9b25b5331a2f163773dff4ea9a0e91a907ac', 'committer_username': 'miraep8', 'committer_name': 'Mirae Baichoo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 13, 7, 36, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f0d7173411f775d1a7632d96d1876ca3d1d1f174', 'committer_username': 'miraep8', 'committer_name': 'Mirae Baichoo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 13, 7, 36, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '71fd2b3aeb0e43f6bb52462e034c5058e7369fb1', 'committer_username': 'miraep8', 'committer_name': 'Mirae Baichoo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 13, 7, 36, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '240f905c3f0b40e42f99861795a2073c0dd378d7', 'committer_username': 'miraep8', 'committer_name': 'Mirae Baichoo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 13, 7, 36, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a8bcc4ae25b5c2a2c6e28aef8be4f8c43dfd3757', 'committer_username': 'miraep8', 'committer_name': 'Mirae Baichoo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 13, 7, 36, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4f5fb1142eabb996557da636eafc7e4c82f38aaf', 'committer_username': 'miraep8', 'committer_name': 'Mirae Baichoo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 13, 7, 36, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aa84965d5513fffbd1d99a8f0ddeec49c4f61069', 'committer_username': 'miraep8', 'committer_name': 'Mirae Baichoo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 13, 7, 36, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '12c10217a7b420348896270e6403b737c1f5a5d6', 'committer_username': 'miraep8', 'committer_name': 'Mirae Baichoo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 13, 7, 36, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '705428955662bdf66e0a0af2a649de6d1b474695', 'committer_username': 'miraep8', 'committer_name': 'Mirae Baichoo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 13, 7, 36, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '976ab62325adc0c097120f7d3eb40fb0ab54a887', 'committer_username': 'miraep8', 'committer_name': 'Mirae Baichoo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 13, 7, 36, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '61c2ed7325e111a8213e5e062d52066804532dbc', 'committer_username': 'miraep8', 'committer_name': 'Mirae Baichoo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 13, 7, 36, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1fc49b4b31dcfb2be2ed11b755553b03ceab7339', 'committer_username': 'miraep8', 'committer_name': 'Mirae Baichoo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 13, 7, 36, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a49b3aedb00909b40c31879c0ce90982cbfe6f8d', 'committer_username': 'miraep8', 'committer_name': 'Mirae Baichoo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 13, 7, 36, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e74a049a7defbd5886c7794988884fcd483de5e5', 'committer_username': 'miraep8', 'committer_name': 'Mirae Baichoo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 13, 7, 36, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9d1c31e58a3cb44cd615eb61f4454de51e3fc589', 'committer_username': 'miraep8', 'committer_name': 'Mirae Baichoo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 13, 7, 36, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '364bd2098da9660255413f0c81247162c69b166b', 'committer_username': 'miraep8', 'committer_name': 'Mirae Baichoo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 13, 7, 36, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '642b6e484a88400dd9c48088d6942218bcb8b968', 'committer_username': 'miraep8', 'committer_name': 'Mirae Baichoo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 13, 7, 36, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bba64f0935fcab323da79fb04647c40480f25a42', 'committer_username': 'miraep8', 'committer_name': 'Mirae Baichoo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 13, 7, 36, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '672e4d9edfc837caf4e8ef42f29b72b051ec6528', 'committer_username': 'miraep8', 'committer_name': 'Mirae Baichoo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 13, 7, 36, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '353d8ae8825dad9040836fe24323dc058b00f8a5', 'committer_username': 'miraep8', 'committer_name': 'Mirae Baichoo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 13, 7, 36, 26, tzinfo=datetime.timezone.utc)}]",Mirae Baichoo,10511777,,User,,14,,4,12

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
156401841,sktime,sktime/sktime,Python,1309,7697,103,386,4830,1166,319,237,"[{'id': 1185415694, 'number': 4063, 'closed': datetime.datetime(2023, 1, 11, 16, 51, 54, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 1, 4, 20, 45, 37, tzinfo=datetime.timezone.utc), 'time_taken': 590777.0, 'time_delta': '6 days, 20:06:17', 'additions': 22, 'deletions': 10, 'state': 'closed'}, {'id': 1091467119, 'number': 3610, 'closed': datetime.datetime(2022, 10, 19, 10, 17, 35, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 10, 18, 23, 55, 10, tzinfo=datetime.timezone.utc), 'time_taken': 37345.0, 'time_delta': '10:22:25', 'additions': 2, 'deletions': 0, 'state': 'closed'}, {'id': 1091107977, 'number': 3607, 'closed': datetime.datetime(2022, 10, 19, 18, 51, 42, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 10, 18, 17, 20, 56, tzinfo=datetime.timezone.utc), 'time_taken': 91846.0, 'time_delta': '1 day, 1:30:46', 'additions': 15, 'deletions': 1, 'state': 'closed'}, {'id': 1081977599, 'number': 3563, 'closed': datetime.datetime(2022, 10, 10, 22, 7, 30, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 10, 10, 12, 34, 17, tzinfo=datetime.timezone.utc), 'time_taken': 34393.0, 'time_delta': '9:33:13', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 1053940998, 'number': 3416, 'closed': datetime.datetime(2022, 9, 21, 19, 53, 53, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 9, 12, 22, 15, 5, tzinfo=datetime.timezone.utc), 'time_taken': 769128.0, 'time_delta': '8 days, 21:38:48', 'additions': 8, 'deletions': 0, 'state': 'closed'}, {'id': 1050857861, 'number': 3396, 'closed': datetime.datetime(2022, 9, 9, 22, 1, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 9, 8, 21, 24, 30, tzinfo=datetime.timezone.utc), 'time_taken': 88590.0, 'time_delta': '1 day, 0:36:30', 'additions': 4, 'deletions': 8, 'state': 'closed'}, {'id': 1041232996, 'number': 3366, 'closed': datetime.datetime(2022, 9, 8, 16, 0, 57, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 30, 16, 47, 7, tzinfo=datetime.timezone.utc), 'time_taken': 774830.0, 'time_delta': '8 days, 23:13:50', 'additions': 48, 'deletions': 33, 'state': 'closed'}, {'id': 1040143682, 'number': 3362, 'closed': datetime.datetime(2022, 9, 21, 20, 56, 27, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 29, 20, 2, 12, tzinfo=datetime.timezone.utc), 'time_taken': 1990455.0, 'time_delta': '23 days, 0:54:15', 'additions': 586, 'deletions': 0, 'state': 'closed'}, {'id': 1035494297, 'number': 3331, 'closed': datetime.datetime(2022, 9, 7, 20, 12, 1, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 24, 13, 32, 54, tzinfo=datetime.timezone.utc), 'time_taken': 1233547.0, 'time_delta': '14 days, 6:39:07', 'additions': 33, 'deletions': 14, 'state': 'closed'}, {'id': 1013899718, 'number': 3156, 'closed': datetime.datetime(2022, 9, 21, 20, 58, 46, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 1, 13, 46, 1, tzinfo=datetime.timezone.utc), 'time_taken': 4432365.0, 'time_delta': '51 days, 7:12:45', 'additions': 351, 'deletions': 0, 'state': 'closed'}, {'id': 1012206200, 'number': 3132, 'closed': datetime.datetime(2022, 8, 23, 19, 39, 36, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 29, 17, 29, 40, tzinfo=datetime.timezone.utc), 'time_taken': 2167796.0, 'time_delta': '25 days, 2:09:56', 'additions': 89, 'deletions': 9, 'state': 'closed'}, {'id': 1011161711, 'number': 3125, 'closed': datetime.datetime(2022, 7, 29, 17, 20, 31, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 28, 18, 18, 12, tzinfo=datetime.timezone.utc), 'time_taken': 82939.0, 'time_delta': '23:02:19', 'additions': 3116, 'deletions': 8542, 'state': 'closed'}, {'id': 1001361636, 'number': 3059, 'closed': datetime.datetime(2022, 7, 20, 10, 44, 31, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 19, 23, 2, 22, tzinfo=datetime.timezone.utc), 'time_taken': 42129.0, 'time_delta': '11:42:09', 'additions': 3, 'deletions': 3, 'state': 'closed'}, {'id': 997713258, 'number': 3026, 'closed': datetime.datetime(2022, 9, 7, 16, 56, 6, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 15, 12, 34, 30, tzinfo=datetime.timezone.utc), 'time_taken': 4681296.0, 'time_delta': '54 days, 4:21:36', 'additions': 347, 'deletions': 0, 'state': 'closed'}, {'id': 977848914, 'number': 2855, 'closed': datetime.datetime(2022, 8, 7, 16, 14, 58, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 6, 24, 3, 12, 13, tzinfo=datetime.timezone.utc), 'time_taken': 3848565.0, 'time_delta': '44 days, 13:02:45', 'additions': 503, 'deletions': 3, 'state': 'closed'}, {'id': 965906617, 'number': 2810, 'closed': datetime.datetime(2022, 6, 21, 17, 51, 18, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 6, 13, 15, 46, 1, tzinfo=datetime.timezone.utc), 'time_taken': 698717.0, 'time_delta': '8 days, 2:05:17', 'additions': 135, 'deletions': 31, 'state': 'closed'}, {'id': 955044945, 'number': 2738, 'closed': datetime.datetime(2022, 6, 10, 14, 49, 59, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 6, 1, 22, 46, 18, tzinfo=datetime.timezone.utc), 'time_taken': 749021.0, 'time_delta': '8 days, 16:03:41', 'additions': 338, 'deletions': 0, 'state': 'closed'}, {'id': 930337637, 'number': 2612, 'closed': datetime.datetime(2022, 5, 10, 11, 46, 24, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 5, 7, 19, 16, 24, tzinfo=datetime.timezone.utc), 'time_taken': 232200.0, 'time_delta': '2 days, 16:30:00', 'additions': 168, 'deletions': 0, 'state': 'closed'}, {'id': 921713631, 'number': 2570, 'closed': datetime.datetime(2022, 5, 20, 12, 46, 12, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 4, 28, 11, 15, 33, tzinfo=datetime.timezone.utc), 'time_taken': 1906239.0, 'time_delta': '22 days, 1:30:39', 'additions': 136, 'deletions': 398, 'state': 'closed'}, {'id': 917292384, 'number': 2540, 'closed': datetime.datetime(2022, 4, 29, 8, 7, 31, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 4, 23, 20, 35, 38, tzinfo=datetime.timezone.utc), 'time_taken': 473513.0, 'time_delta': '5 days, 11:31:53', 'additions': 118, 'deletions': 10, 'state': 'closed'}, {'id': 915434929, 'number': 2520, 'closed': datetime.datetime(2022, 4, 21, 23, 53, 47, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 4, 21, 14, 39, 41, tzinfo=datetime.timezone.utc), 'time_taken': 33246.0, 'time_delta': '9:14:06', 'additions': 96, 'deletions': 0, 'state': 'closed'}, {'id': 903364681, 'number': 2410, 'closed': datetime.datetime(2022, 4, 13, 6, 26, 14, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 4, 8, 2, 33, 45, tzinfo=datetime.timezone.utc), 'time_taken': 445949.0, 'time_delta': '5 days, 3:52:29', 'additions': 195, 'deletions': 33, 'state': 'closed'}]"
