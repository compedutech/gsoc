pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
687101296,Base implementation of SVGP,"This PR has the core implementation of stochastic variational GPs.

The approximate posterior in `svgp.jl` quite closely follows that in AbstractGPs. `elbo.jl` has the implementations of both the closed form Gaussian likelihood ELBO and quadrature for non-conjugate - I'll add other closed form likelihoods and MC estimation in other PRs.

The examples in this PR are extremely rough, and will be superseded soon, but give working examples of how to train the SVGP end to end.",True,9,https://api.github.com/repos/JuliaGaussianProcesses/ApproximateGPs.jl/pulls/9,https://github.com/JuliaGaussianProcesses/ApproximateGPs.jl/pull/9,closed,925,0,14,69,3,91,0,0,[],2021-07-10 01:00:29+00:00,2021-07-30 21:08:01+00:00,1800452.0,"20 days, 20:07:32","[{'comment_id': 669899619, 'comment_body': 'Instead of `MvNormal` you could expect an `AbstractMvNormal` and instead of `q.μ` call `mean(q)`', 'comment_created': datetime.datetime(2021, 7, 14, 19, 39, 3, tzinfo=datetime.timezone.utc), 'commenter': 'theogf', 'type': 'User'}, {'comment_id': 669900884, 'comment_body': 'Also here `q` could be `AbstractMvNormal`', 'comment_created': datetime.datetime(2021, 7, 14, 19, 40, 56, tzinfo=datetime.timezone.utc), 'commenter': 'theogf', 'type': 'User'}, {'comment_id': 669902169, 'comment_body': ""You don't need to allocate a vector for  `variational_exp` you could sum it inside already."", 'comment_created': datetime.datetime(2021, 7, 14, 19, 42, 53, tzinfo=datetime.timezone.utc), 'commenter': 'theogf', 'type': 'User'}, {'comment_id': 669903260, 'comment_body': '`CategoricalLikelihood` does not belong to this category', 'comment_created': datetime.datetime(2021, 7, 14, 19, 44, 47, tzinfo=datetime.timezone.utc), 'commenter': 'theogf', 'type': 'User'}, {'comment_id': 669914889, 'comment_body': 'It would be nice to plot the mean as well', 'comment_created': datetime.datetime(2021, 7, 14, 20, 2, 49, tzinfo=datetime.timezone.utc), 'commenter': 'theogf', 'type': 'User'}, {'comment_id': 669975095, 'comment_body': ""I'm going to rework the examples a lot, so I won't add that in this PR but will do later"", 'comment_created': datetime.datetime(2021, 7, 14, 21, 42, 59, tzinfo=datetime.timezone.utc), 'commenter': 'rossviljoen', 'type': 'User'}, {'comment_id': 671268591, 'comment_body': '```suggestion\r\n    elbo(lfx::LatentFiniteGP, y::AbstractVector, fz::FiniteGP, q::AbstractMvNormal; n_data=length(y))\r\n```', 'comment_created': datetime.datetime(2021, 7, 16, 13, 48, 7, tzinfo=datetime.timezone.utc), 'commenter': 'st--', 'type': 'User'}, {'comment_id': 671268774, 'comment_body': '```suggestion\r\n    elbo(fx::FiniteGP, y::AbstractVector{<:Real}, fz::FiniteGP, q::AbstractMvNormal; n_data=length(y))\r\n```', 'comment_created': datetime.datetime(2021, 7, 16, 13, 48, 22, tzinfo=datetime.timezone.utc), 'commenter': 'st--', 'type': 'User'}, {'comment_id': 671269996, 'comment_body': '```suggestion\r\nobservations of `fx`, pseudo-inputs are given by `z = fz.x` and `q(u)` is a\r\n```', 'comment_created': datetime.datetime(2021, 7, 16, 13, 49, 57, tzinfo=datetime.timezone.utc), 'commenter': 'st--', 'type': 'User'}, {'comment_id': 671273543, 'comment_body': 'How about directly passing `Σy` to `expected_loglik` (which could in turn have the `diag()` hard-coded assumption, or maybe dispatch on the type of the matrix...)?\r\n\r\nA second thought, how about having the whole method simply construct an appropriate LatentFiniteGP, either with some kind of `(Mv)Normal` distribution object, or (maybe simpler if a bit more hacky/inconsistent) even just having `lfx.lik = fx.Σy`?', 'comment_created': datetime.datetime(2021, 7, 16, 13, 54, 37, tzinfo=datetime.timezone.utc), 'commenter': 'st--', 'type': 'User'}, {'comment_id': 671274390, 'comment_body': ""If I'm not missing something `_elbo_intermediates` would then only be called in a single place and could just be inlined?"", 'comment_created': datetime.datetime(2021, 7, 16, 13, 55, 42, tzinfo=datetime.timezone.utc), 'commenter': 'st--', 'type': 'User'}, {'comment_id': 671275181, 'comment_body': '```suggestion\r\n```\r\nso that it is actually parsed as a docstring attached to a function, and not as a stand-alone ""string"" comment.', 'comment_created': datetime.datetime(2021, 7, 16, 13, 56, 46, tzinfo=datetime.timezone.utc), 'commenter': 'st--', 'type': 'User'}, {'comment_id': 671276279, 'comment_body': 'Maybe something to leave for the future, but we might want to think about how to encode which quadrature method to use - similar to what kind of MCMC sampler in something like Turing.jl - e.g. for the same likelihood, I might want to be able to compare analytic vs. Monte Carlo vs. Gauss Hermite quadrature.', 'comment_created': datetime.datetime(2021, 7, 16, 13, 58, 5, tzinfo=datetime.timezone.utc), 'commenter': 'st--', 'type': 'User'}, {'comment_id': 671276474, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2021, 7, 16, 13, 58, 23, tzinfo=datetime.timezone.utc), 'commenter': 'st--', 'type': 'User'}, {'comment_id': 671282713, 'comment_body': '```suggestion\r\nfunction StatsBase.kldivergence(q::AbstractMvNormal, p::AbstractMvNormal)\r\n```\r\n(and changing all calls from `kl_divergence` to `kldivergence`, of course)\r\n\r\nI was expecting to see implementations from Distributions.jl already, but all I could find was https://github.com/theogf/KLDivergences.jl - would it be worth building on that @theogf ?', 'comment_created': datetime.datetime(2021, 7, 16, 14, 6, 44, tzinfo=datetime.timezone.utc), 'commenter': 'st--', 'type': 'User'}, {'comment_id': 671283244, 'comment_body': ""what makes it non-differentiable ? it's just a dot product, which should be easy to differentiate?"", 'comment_created': datetime.datetime(2021, 7, 16, 14, 7, 22, tzinfo=datetime.timezone.utc), 'commenter': 'st--', 'type': 'User'}, {'comment_id': 671283971, 'comment_body': '``````suggestion\r\nraw""""""\r\n    approx_posterior(::SVGP, fz::FiniteGP, q::MvNormal)\r\n\r\nCompute the approximate posterior [1] over the process `f = fz.f`, given inducing\r\ninputs `z = fz.x` and a variational distribution over inducing points `q(u)` where `u =\r\nf(z)`. The approximate posterior at test points ``x^*`` where ``f^* = f(x^*)``\r\nis then given by:\r\n\r\n```math\r\nq(f^*) = \\int p(f | u) q(u) du\r\n```\r\nwhich can be found in closed form.\r\n``````\r\nif you\'re not using string interpolation (i.e. basically all docstrings, the `raw` prefix makes it a lot easier to write (and read) LaTeX formulas:)', 'comment_created': datetime.datetime(2021, 7, 16, 14, 8, 17, tzinfo=datetime.timezone.utc), 'commenter': 'st--', 'type': 'User'}, {'comment_id': 671289626, 'comment_body': ""Could be removed now that there's actual tests being run as well"", 'comment_created': datetime.datetime(2021, 7, 16, 14, 15, 51, tzinfo=datetime.timezone.utc), 'commenter': 'st--', 'type': 'User'}, {'comment_id': 671289806, 'comment_body': 'Well I started building this to take it out of AGP.jl, but it is quite ""brittle""', 'comment_created': datetime.datetime(2021, 7, 16, 14, 16, 4, tzinfo=datetime.timezone.utc), 'commenter': 'theogf', 'type': 'User'}, {'comment_id': 671290784, 'comment_body': '```suggestion\r\n```\r\nalready covered by the docstring:)', 'comment_created': datetime.datetime(2021, 7, 16, 14, 17, 24, tzinfo=datetime.timezone.utc), 'commenter': 'st--', 'type': 'User'}, {'comment_id': 671350641, 'comment_body': ""Ah, I didn't see that package - I suppose I'll keep the implementation here for now, and replace it if it gets more stable. @theogf what makes it brittle atm? I'd be up for working on it if needed."", 'comment_created': datetime.datetime(2021, 7, 16, 15, 39, 2, tzinfo=datetime.timezone.utc), 'commenter': 'rossviljoen', 'type': 'User'}, {'comment_id': 671361009, 'comment_body': ""`gausshermite(n)` just returns the nodes and weights, so it's a constant for a given n - it also does a load of mutation so it's not differentiable anyway"", 'comment_created': datetime.datetime(2021, 7, 16, 15, 54, 16, tzinfo=datetime.timezone.utc), 'commenter': 'rossviljoen', 'type': 'User'}, {'comment_id': 671362496, 'comment_body': ""Yes, sorry that's still WIP - I need to look through https://github.com/JuliaGaussianProcesses/AbstractGPs.jl/pull/179 and see what I can use from that here"", 'comment_created': datetime.datetime(2021, 7, 16, 15, 56, 34, tzinfo=datetime.timezone.utc), 'commenter': 'rossviljoen', 'type': 'User'}, {'comment_id': 672241933, 'comment_body': 'Ah woops, I misread - I thought you marked the whole `gauss_hermite_quadrate` non-differentiable!', 'comment_created': datetime.datetime(2021, 7, 19, 12, 12, 2, tzinfo=datetime.timezone.utc), 'commenter': 'st--', 'type': 'User'}, {'comment_id': 672320977, 'comment_body': ""> what makes it brittle atm\r\n\r\nI don't think it's very well tested and does not account for edge cases...\r\n\r\nLet me have a look back to what I did, for example I did not know StatsBase.kldivergence existed, I should probably reuse that!"", 'comment_created': datetime.datetime(2021, 7, 19, 13, 56, 27, tzinfo=datetime.timezone.utc), 'commenter': 'theogf', 'type': 'User'}, {'comment_id': 673609671, 'comment_body': ""I've added the standard AbstractGP interface tests"", 'comment_created': datetime.datetime(2021, 7, 21, 2, 11, 37, tzinfo=datetime.timezone.utc), 'commenter': 'rossviljoen', 'type': 'User'}, {'comment_id': 673612551, 'comment_body': ""I've refactored this quite a lot - doing something similar to what you suggested - so hopefully it's a bit nicer now?"", 'comment_created': datetime.datetime(2021, 7, 21, 2, 20, 10, tzinfo=datetime.timezone.utc), 'commenter': 'rossviljoen', 'type': 'User'}, {'comment_id': 673613595, 'comment_body': ""I've added Monte Carlo as well as a way of picking a method (via the `method` argument to `elbo`). \r\n\r\nbtw I'm using symbols for the argument, but I'm not sure if that's the most idiomatic way - should I use strings/enums instead?"", 'comment_created': datetime.datetime(2021, 7, 21, 2, 23, 29, tzinfo=datetime.timezone.utc), 'commenter': 'rossviljoen', 'type': 'User'}, {'comment_id': 674007758, 'comment_body': '```suggestion\r\n    n_points::Int\r\n```\r\n\r\nHere you can enforce the type', 'comment_created': datetime.datetime(2021, 7, 21, 14, 8, 56, tzinfo=datetime.timezone.utc), 'commenter': 'theogf', 'type': 'User'}, {'comment_id': 674020748, 'comment_body': 'Maybe `Quadrature` would be more adapted, especially if we want to consider different approaches than `GaussHermite` later', 'comment_created': datetime.datetime(2021, 7, 21, 14, 23, 9, tzinfo=datetime.timezone.utc), 'commenter': 'theogf', 'type': 'User'}, {'comment_id': 674023246, 'comment_body': 'That makes sense - also, do you think I should call them `DefaultExpectation`, `AnalyticExpectation` etc... instead or leave them as they are?', 'comment_created': datetime.datetime(2021, 7, 21, 14, 25, 51, tzinfo=datetime.timezone.utc), 'commenter': 'rossviljoen', 'type': 'User'}, {'comment_id': 674023474, 'comment_body': ""~~Personally, I think this is fine for now. Lets just get this merged. We can break / generalise it later if needed.~~\r\n\r\nLooks like you've already changed it, so please ignore this."", 'comment_created': datetime.datetime(2021, 7, 21, 14, 26, 8, tzinfo=datetime.timezone.utc), 'commenter': 'willtebbutt', 'type': 'User'}, {'comment_id': 674056388, 'comment_body': 'To answer your question what is assumed to be computed here if we have no information about the likelihood?', 'comment_created': datetime.datetime(2021, 7, 21, 15, 1, 52, tzinfo=datetime.timezone.utc), 'commenter': 'theogf', 'type': 'User'}, {'comment_id': 674060184, 'comment_body': 'If I understand correctly, we implicitly use the Gaussian likelihood, so one could simply call `elbo(LatentFiniteGP(fx, GaussianLikelihood()), y, fz, q; ...)` or something similar', 'comment_created': datetime.datetime(2021, 7, 21, 15, 6, 17, tzinfo=datetime.timezone.utc), 'commenter': 'theogf', 'type': 'User'}, {'comment_id': 674068556, 'comment_body': ""Yes, exactly, but what if `fx.Σy` is not homoscedastic - I can't figure out a good way to do something like `elbo(LatentFiniteGP(fx, GaussianLikelihood(diag(fx.Σy))), y, fz, q; ...)` if that makes sense"", 'comment_created': datetime.datetime(2021, 7, 21, 15, 15, 47, tzinfo=datetime.timezone.utc), 'commenter': 'rossviljoen', 'type': 'User'}, {'comment_id': 674071103, 'comment_body': ""Unless we just assume it's homoscedastic for now and use `GaussianLikelihood(Σy[1])` as I already do for MC/quadrature for the Gaussian likelihood"", 'comment_created': datetime.datetime(2021, 7, 21, 15, 18, 45, tzinfo=datetime.timezone.utc), 'commenter': 'rossviljoen', 'type': 'User'}, {'comment_id': 674080439, 'comment_body': 'Could definitely do that -- would make sense to me.\r\n\r\nMight be an idea to dispatch on `fx.Σy` being a `Diagonal{<:Real, <:Fill}` or something though to prevent silent failure.', 'comment_created': datetime.datetime(2021, 7, 21, 15, 28, 1, tzinfo=datetime.timezone.utc), 'commenter': 'willtebbutt', 'type': 'User'}, {'comment_id': 674087420, 'comment_body': 'Using heteroskedastic likelihoods is definitely not standard, I think we can ignore this case as a default.', 'comment_created': datetime.datetime(2021, 7, 21, 15, 33, 4, tzinfo=datetime.timezone.utc), 'commenter': 'theogf', 'type': 'User'}, {'comment_id': 674107051, 'comment_body': ""Alright, I'll do that. ~~@willtebbutt should I maybe just throw a warning if the matrix isn't explicitly `Diagonal`? otherwise it seems a bit overzealous to only dispatch on that?~~\r\n\r\nActually, that would be really annoying - maybe I should just mention it prominently in the docs?"", 'comment_created': datetime.datetime(2021, 7, 21, 15, 49, 19, tzinfo=datetime.timezone.utc), 'commenter': 'rossviljoen', 'type': 'User'}, {'comment_id': 674129429, 'comment_body': 'Good idea. You could also add a method which throws an informative error if you get something other than a `Diagonal{<:Real, <:Fill}`.\r\n\r\nedit: to be clear, `Diagonal{<:Real, <:Fill}` is what you get if you construct a `FiniteGP` as `f(x, 0.1)` or something, so it happens all of the time.', 'comment_created': datetime.datetime(2021, 7, 21, 16, 8, 34, tzinfo=datetime.timezone.utc), 'commenter': 'willtebbutt', 'type': 'User'}, {'comment_id': 674635154, 'comment_body': '> Using heteroskedastic likelihoods is definitely not standard, I think we can ignore this case as a default.\r\n\r\nAllowing for heteroskedastic likelihoods is actually very relevant in practice, it would be really good to keep that use-case in mind in the design instead of inadvertently making it really hard. The key difference to ""scalar"" likelihoods is that now there are several latent outputs for each observation.\r\n\r\nSo this requires multi-output GPs - but for example with mixing kernels the number of ""latent outputs"" (what the likelihood sees) can be different from the number of ""latent GPs"" (what we parametrize with q(u))...', 'comment_created': datetime.datetime(2021, 7, 22, 9, 22, 25, tzinfo=datetime.timezone.utc), 'commenter': 'st--', 'type': 'User'}, {'comment_id': 674636901, 'comment_body': ""I'm confused by what `fx.Σy[1]` refers to. I thought `Σy` was a matrix (potentially diagonal/scaled identity) ?"", 'comment_created': datetime.datetime(2021, 7, 22, 9, 24, 58, tzinfo=datetime.timezone.utc), 'commenter': 'st--', 'type': 'User'}, {'comment_id': 674637614, 'comment_body': 'should this be updated to clarify that `method` determines how the expectation is evaluated?', 'comment_created': datetime.datetime(2021, 7, 22, 9, 26, 6, tzinfo=datetime.timezone.utc), 'commenter': 'st--', 'type': 'User'}, {'comment_id': 674640570, 'comment_body': 'Just wondering aloud: would there be any (significant) runtime cost (overhead) in representing this as an `AbstractVector{<:Normal}` instead?', 'comment_created': datetime.datetime(2021, 7, 22, 9, 30, 19, tzinfo=datetime.timezone.utc), 'commenter': 'st--', 'type': 'User'}, {'comment_id': 674644331, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2021, 7, 22, 9, 36, tzinfo=datetime.timezone.utc), 'commenter': 'st--', 'type': 'User'}, {'comment_id': 676590669, 'comment_body': '@rossviljoen what are the steps to render the notebook? I tried `Literate.notebook(""examples/regression.jl""; execute=true)`, but the resulting .ipynb doesn\'t actually contain any plots. (I also had to add a couple dependencies - Optim and IterTools are used by the notebook but not in the SparseGPs.jl/Project.toml)', 'comment_created': datetime.datetime(2021, 7, 26, 13, 13, 1, tzinfo=datetime.timezone.utc), 'commenter': 'st--', 'type': 'User'}, {'comment_id': 676599042, 'comment_body': 'This likelihood requires `y` to be a number, so should this be\r\n```suggestion\r\n    y::AbstractVector{<:Real},\r\n```\r\n?\r\n\r\n(Side note: My understanding is that the way KernelFunctions and AbstractGPs are designed, the elements of `y` are all scalars, as multi-output handling is based around the output-as-input formulation. How would we actually handle homotopic multi-output efficiently? probably one for @willtebbutt)\r\n\r\nThe same question also applies to the methods below.', 'comment_created': datetime.datetime(2021, 7, 26, 13, 23, 29, tzinfo=datetime.timezone.utc), 'commenter': 'st--', 'type': 'User'}, {'comment_id': 676602203, 'comment_body': 'what would be the ""vector of scalars"" case ?', 'comment_created': datetime.datetime(2021, 7, 26, 13, 27, 15, tzinfo=datetime.timezone.utc), 'commenter': 'st--', 'type': 'User'}, {'comment_id': 676604963, 'comment_body': 'not sure if we can find a better way of formulating it in code, but I did make a double-take and got a bit confused by the type parametrisation making it seem like it was an exponential link - not invlink - function.. what do the rest of you think ?\r\n\r\nnot helped by link functions being invertible ... I\'m wondering if it\'d be more helpful to somehow encode input/output domains (e.g. ""ExpLink() isa LinkFunction{with input domain (-infty, +infty) and output domain (0, infty)}"")', 'comment_created': datetime.datetime(2021, 7, 26, 13, 30, 30, tzinfo=datetime.timezone.utc), 'commenter': 'st--', 'type': 'User'}, {'comment_id': 676607265, 'comment_body': 'Maybe this is better turned into its own issue: Have we hardcoded that ""inducing variable"" is only u = f(Z)? How would we support generic inducing variables (Fourier features, spherical harmonics, or even conditioning on gradients)?', 'comment_created': datetime.datetime(2021, 7, 26, 13, 33, 15, tzinfo=datetime.timezone.utc), 'commenter': 'st--', 'type': 'User'}, {'comment_id': 676641797, 'comment_body': 'Is it intentional to not extend `AbstractGPs.approx_posterior`?', 'comment_created': datetime.datetime(2021, 7, 26, 14, 12, 8, tzinfo=datetime.timezone.utc), 'commenter': 'st--', 'type': 'User'}, {'comment_id': 676717310, 'comment_body': ""They're not set up as notebooks or anything yet - they're basically just scripts at the moment. I was going to set up proper example notebooks with their own dependencies etc later."", 'comment_created': datetime.datetime(2021, 7, 26, 15, 34, 19, tzinfo=datetime.timezone.utc), 'commenter': 'rossviljoen', 'type': 'User'}, {'comment_id': 676728832, 'comment_body': 'I suppose it would add a bit of unnecessary converting between var and std in the closed form case, but not a huge amount', 'comment_created': datetime.datetime(2021, 7, 26, 15, 48, 7, tzinfo=datetime.timezone.utc), 'commenter': 'rossviljoen', 'type': 'User'}, {'comment_id': 676729728, 'comment_body': ""No, I thought I'd fixed that.. thanks!"", 'comment_created': datetime.datetime(2021, 7, 26, 15, 49, 3, tzinfo=datetime.timezone.utc), 'commenter': 'rossviljoen', 'type': 'User'}, {'comment_id': 676739857, 'comment_body': 'I am super used to consider the transformation on `f` and therefore `ExpLink` sounds natural to me, but I can see your point.\r\nWe could always reparametrize everything in terms of links and not inverse links and that would be more mathematically consistent but computationally much more verbose (and eventually less efficient ?)', 'comment_created': datetime.datetime(2021, 7, 26, 16, 0, 41, tzinfo=datetime.timezone.utc), 'commenter': 'theogf', 'type': 'User'}, {'comment_id': 676760157, 'comment_body': ""I'm not sure what I meant by that...."", 'comment_created': datetime.datetime(2021, 7, 26, 16, 26, 17, tzinfo=datetime.timezone.utc), 'commenter': 'rossviljoen', 'type': 'User'}, {'comment_id': 676851923, 'comment_body': ""Yeah, it's just the first element of Σy"", 'comment_created': datetime.datetime(2021, 7, 26, 18, 39, 33, tzinfo=datetime.timezone.utc), 'commenter': 'rossviljoen', 'type': 'User'}, {'comment_id': 677261172, 'comment_body': 'Well, I see it as an unfortunate legacy from statistics, it\'s just that it\'s very well defined that ""f = link(expectation(y))"" so when we think about transforming f to get the mean parameter e.g. for Poisson likelihood, then lambda = invlink(f). And `PoissonLikelihood{ExpLink}` then makes it seem like it might be a ""log invlink"" (not that that makes any sense)...', 'comment_created': datetime.datetime(2021, 7, 27, 9, 3, 33, tzinfo=datetime.timezone.utc), 'commenter': 'st--', 'type': 'User'}, {'comment_id': 677265619, 'comment_body': 'Ah, I was just hoping for recommended instructions to see a rendered version : )', 'comment_created': datetime.datetime(2021, 7, 27, 9, 9, 37, tzinfo=datetime.timezone.utc), 'commenter': 'st--', 'type': 'User'}, {'comment_id': 677266057, 'comment_body': 'is that because length(Σy) == 1?', 'comment_created': datetime.datetime(2021, 7, 27, 9, 10, 11, tzinfo=datetime.timezone.utc), 'commenter': 'st--', 'type': 'User'}, {'comment_id': 677267841, 'comment_body': ""It's not clear to me how this convention would compromise performance. Perhaps we should discuss elsewhere?"", 'comment_created': datetime.datetime(2021, 7, 27, 9, 12, 26, tzinfo=datetime.timezone.utc), 'commenter': 'willtebbutt', 'type': 'User'}, {'comment_id': 677269035, 'comment_body': ""I think it's because we're assuming it to be constant? (which is something that we should enforce via dispatch)"", 'comment_created': datetime.datetime(2021, 7, 27, 9, 13, 56, tzinfo=datetime.timezone.utc), 'commenter': 'willtebbutt', 'type': 'User'}, {'comment_id': 677827670, 'comment_body': 'Do you mean heteroscedastic here?\r\n```suggestion\r\n    return error(""The observation noise fx.Σy may not be heteroscedastic.\\n To avoid this error, construct fx using: f = GP(kernel); fx = f(x, σ²)"")\r\n```', 'comment_created': datetime.datetime(2021, 7, 27, 21, 55, 33, tzinfo=datetime.timezone.utc), 'commenter': 'willtebbutt', 'type': 'User'}, {'comment_id': 677832935, 'comment_body': 'I meant it as in ""the noise you supplied might not be homoscedastic, you should fix it"", but yeah the phrasing\'s terrible - what about `The observation noise fx.Σy must be homoscedastic...`?', 'comment_created': datetime.datetime(2021, 7, 27, 22, 6, 26, tzinfo=datetime.timezone.utc), 'commenter': 'rossviljoen', 'type': 'User'}, {'comment_id': 677835781, 'comment_body': 'Ohhh okay. Yeah, that sounds good to me.', 'comment_created': datetime.datetime(2021, 7, 27, 22, 12, 8, tzinfo=datetime.timezone.utc), 'commenter': 'willtebbutt', 'type': 'User'}, {'comment_id': 677847955, 'comment_body': ""I've changed `elbo` to dispatch on the type of `fx.Σy` - I'm not 100% sure about the way I've done it and the style though, so feedback would be v appreciated."", 'comment_created': datetime.datetime(2021, 7, 27, 22, 39, 11, tzinfo=datetime.timezone.utc), 'commenter': 'rossviljoen', 'type': 'User'}, {'comment_id': 677848302, 'comment_body': 'Changed it do dispatch on the type of `Σy` - see my comment above (to keep discussion in one place)', 'comment_created': datetime.datetime(2021, 7, 27, 22, 39, 59, tzinfo=datetime.timezone.utc), 'commenter': 'rossviljoen', 'type': 'User'}, {'comment_id': 677849533, 'comment_body': 'Opened #11 ', 'comment_created': datetime.datetime(2021, 7, 27, 22, 42, 49, tzinfo=datetime.timezone.utc), 'commenter': 'rossviljoen', 'type': 'User'}, {'comment_id': 678053784, 'comment_body': ""Maybe something that deserves better documentation (or an outer constructor with a sensible default value), but LatentGP's `Σy` field (can we find a more sensible name!?) is effectively just the jitter for numeric stability, so should be more something like 1e-6 or so..."", 'comment_created': datetime.datetime(2021, 7, 28, 7, 40, 57, tzinfo=datetime.timezone.utc), 'commenter': 'st--', 'type': 'User'}, {'comment_id': 678056416, 'comment_body': 'Might be instructive to show the full data generating process, including sampling y based on the likelihood, in addition to plotting the result of passing the latent f sample through the invlink function - happy to leave this for future PR though', 'comment_created': datetime.datetime(2021, 7, 28, 7, 44, 40, tzinfo=datetime.timezone.utc), 'commenter': 'st--', 'type': 'User'}, {'comment_id': 678056594, 'comment_body': '```suggestion\r\n    f = LatentGP(GP(kernel), BernoulliLikelihood(), 1e-6)\r\n```', 'comment_created': datetime.datetime(2021, 7, 28, 7, 44, 57, tzinfo=datetime.timezone.utc), 'commenter': 'st--', 'type': 'User'}, {'comment_id': 678057706, 'comment_body': ""nice - giving the constants proper names really helps making it clearer what's going on!"", 'comment_created': datetime.datetime(2021, 7, 28, 7, 46, 38, tzinfo=datetime.timezone.utc), 'commenter': 'st--', 'type': 'User'}, {'comment_id': 678063321, 'comment_body': ""does this count as type piracy?\r\n\r\nmaybe we should leave this for separate discussion in an issue / future refactoring, but I'm wondering about whether it'd be helpful to have an object that contains everything needed for p(f | u) [for u=f(Z) that might be `fz` already, but might need to be something different for interdomain inducing variables] as well as q(u) = `q`]"", 'comment_created': datetime.datetime(2021, 7, 28, 7, 54, 25, tzinfo=datetime.timezone.utc), 'commenter': 'st--', 'type': 'User'}, {'comment_id': 678065199, 'comment_body': 'The only reason `_elbo` needs `fx` is to access `x`, right? what do you think of passing `x` as an explicit argument and writing\r\n```suggestion\r\n    variational_exp = expected_loglik(method, y, post(x), lik)\r\n```\r\n- how would that work ?', 'comment_created': datetime.datetime(2021, 7, 28, 7, 57, 2, tzinfo=datetime.timezone.utc), 'commenter': 'st--', 'type': 'User'}, {'comment_id': 678066681, 'comment_body': 'Could we just call it `Exp` ? It would be even nicer if we could just dispatch on `exp` itself... :thinking: ', 'comment_created': datetime.datetime(2021, 7, 28, 7, 59, 6, tzinfo=datetime.timezone.utc), 'commenter': 'st--', 'type': 'User'}, {'comment_id': 678067110, 'comment_body': '```suggestion\r\n    kl_term = kldivergence(q, fz)\r\n```\r\nshould work just the same', 'comment_created': datetime.datetime(2021, 7, 28, 7, 59, 41, tzinfo=datetime.timezone.utc), 'commenter': 'st--', 'type': 'User'}, {'comment_id': 678070551, 'comment_body': ""does the cov(q) need a `Symmetric` as well? what's the difference to using AbstractGPs's `_symmetric` (that you also import)?"", 'comment_created': datetime.datetime(2021, 7, 28, 8, 4, 46, tzinfo=datetime.timezone.utc), 'commenter': 'st--', 'type': 'User'}, {'comment_id': 678072735, 'comment_body': 'Could we encode the assumption in code, e.g.\r\n```suggestion\r\n# equations (11) & (12)).\r\nfunction exact_variational_posterior(fu, fx, y)\r\n    @assert fu.f.mean isa ZeroMean\r\n```\r\n?', 'comment_created': datetime.datetime(2021, 7, 28, 8, 7, 59, tzinfo=datetime.timezone.utc), 'commenter': 'st--', 'type': 'User'}, {'comment_id': 678124123, 'comment_body': '`@assert` is generally not a good (check its docs). It\'s better to have something like `fu.f.mean isa ZeroMean || error(""Nope"")`', 'comment_created': datetime.datetime(2021, 7, 28, 9, 15, 42, tzinfo=datetime.timezone.utc), 'commenter': 'theogf', 'type': 'User'}, {'comment_id': 678250609, 'comment_body': '@willtebbutt @theogf ', 'comment_created': datetime.datetime(2021, 7, 28, 12, 25, 5, tzinfo=datetime.timezone.utc), 'commenter': 'st--', 'type': 'User'}, {'comment_id': 678296695, 'comment_body': ""Looks like it needs at least `1e-4` jitter to work well which is interesting - I'll completely redo the examples in another PR after this one is merged though, so let's discuss it there?"", 'comment_created': datetime.datetime(2021, 7, 28, 13, 24, 14, tzinfo=datetime.timezone.utc), 'commenter': 'rossviljoen', 'type': 'User'}, {'comment_id': 678319670, 'comment_body': ""I removed the import of `_symmetric` because I don't think it's really necessary here - and I suppose it's better not to depend on internals of AbstractGPs.\r\n\r\nI suppose it should really be `cholesky(Symmetric(cov(q)))`, but that would break the zero overhead cholesky for `MvNormal` from [here](https://github.com/JuliaStats/Distributions.jl/pull/1373) no?"", 'comment_created': datetime.datetime(2021, 7, 28, 13, 49, 46, tzinfo=datetime.timezone.utc), 'commenter': 'rossviljoen', 'type': 'User'}, {'comment_id': 678320527, 'comment_body': 'Should we move this to an issue in GPLikelihoods?', 'comment_created': datetime.datetime(2021, 7, 28, 13, 50, 43, tzinfo=datetime.timezone.utc), 'commenter': 'rossviljoen', 'type': 'User'}, {'comment_id': 678342054, 'comment_body': ""I've changed it to dispatch on the type of `q` - which should solve this"", 'comment_created': datetime.datetime(2021, 7, 28, 14, 13, 32, tzinfo=datetime.timezone.utc), 'commenter': 'rossviljoen', 'type': 'User'}, {'comment_id': 678348156, 'comment_body': 'Have now switched to using `KLDivergences.jl` for this', 'comment_created': datetime.datetime(2021, 7, 28, 14, 20, 8, tzinfo=datetime.timezone.utc), 'commenter': 'rossviljoen', 'type': 'User'}, {'comment_id': 678396747, 'comment_body': 'Changed this to use `AbstractVector{<:Normal}` instead', 'comment_created': datetime.datetime(2021, 7, 28, 15, 10, 14, tzinfo=datetime.timezone.utc), 'commenter': 'rossviljoen', 'type': 'User'}, {'comment_id': 679806718, 'comment_body': ""I think refactoring this a little to put more information in a single object would be a good idea, but I'm happy for this to go in as-is for now."", 'comment_created': datetime.datetime(2021, 7, 30, 10, 1, 31, tzinfo=datetime.timezone.utc), 'commenter': 'willtebbutt', 'type': 'User'}, {'comment_id': 679807320, 'comment_body': '```suggestion\r\n)\r\n```', 'comment_created': datetime.datetime(2021, 7, 30, 10, 2, 30, tzinfo=datetime.timezone.utc), 'commenter': 'willtebbutt', 'type': 'User'}, {'comment_id': 679807409, 'comment_body': '```suggestion\r\n)\r\n```', 'comment_created': datetime.datetime(2021, 7, 30, 10, 2, 39, tzinfo=datetime.timezone.utc), 'commenter': 'willtebbutt', 'type': 'User'}, {'comment_id': 679807663, 'comment_body': '```suggestion\r\n           .- lik.α * f_μ .- loggamma(lik.α))\r\n```', 'comment_created': datetime.datetime(2021, 7, 30, 10, 3, 3, tzinfo=datetime.timezone.utc), 'commenter': 'willtebbutt', 'type': 'User'}, {'comment_id': 679807831, 'comment_body': '```suggestion\r\n    α = Kuu \\ (m - mean(fz))\r\n```', 'comment_created': datetime.datetime(2021, 7, 30, 10, 3, 18, tzinfo=datetime.timezone.utc), 'commenter': 'willtebbutt', 'type': 'User'}]","[{'commit_sha': '3cec6a0935a483ebce5e5fea2b6e4e4729acf60a', 'committer_username': 'rossviljoen', 'committer_name': 'Ross Viljoen', 'committer_email': 'ross@viljoen.co.uk', 'commit_date': datetime.datetime(2017, 6, 16, 22, 30, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6c814a6c23e35e833b879b28f7712b2ea7585265', 'committer_username': 'rossviljoen', 'committer_name': 'Ross Viljoen', 'committer_email': 'ross@viljoen.co.uk', 'commit_date': datetime.datetime(2017, 6, 16, 22, 30, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '798f77a6f742e69a286507e807298aac3a98c6b4', 'committer_username': 'rossviljoen', 'committer_name': 'Ross Viljoen', 'committer_email': 'ross@viljoen.co.uk', 'commit_date': datetime.datetime(2017, 6, 16, 22, 30, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0641423c1cfbee868ca66ceb7fabba3cd026bba9', 'committer_username': 'rossviljoen', 'committer_name': 'Ross Viljoen', 'committer_email': 'ross@viljoen.co.uk', 'commit_date': datetime.datetime(2017, 6, 16, 22, 30, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1e4fc90986ed5e7ba5296a59e2b732f1de9e9853', 'committer_username': 'rossviljoen', 'committer_name': 'Ross Viljoen', 'committer_email': 'ross@viljoen.co.uk', 'commit_date': datetime.datetime(2017, 6, 16, 22, 30, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bb42044683078cc106a2dc0dbfb9daf62fd3f321', 'committer_username': 'rossviljoen', 'committer_name': 'Ross Viljoen', 'committer_email': 'ross@viljoen.co.uk', 'commit_date': datetime.datetime(2017, 6, 16, 22, 30, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '102d8128369f57a462b18ee67db3370dc86fcdd9', 'committer_username': 'rossviljoen', 'committer_name': 'Ross Viljoen', 'committer_email': 'ross@viljoen.co.uk', 'commit_date': datetime.datetime(2017, 6, 16, 22, 30, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3089d939eb4c9dc34da953c6605942d69435e848', 'committer_username': 'rossviljoen', 'committer_name': 'Ross Viljoen', 'committer_email': 'ross@viljoen.co.uk', 'commit_date': datetime.datetime(2017, 6, 16, 22, 30, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '59474c5e357a3700eb58757d2bc060043bcf5060', 'committer_username': 'rossviljoen', 'committer_name': 'Ross Viljoen', 'committer_email': 'ross@viljoen.co.uk', 'commit_date': datetime.datetime(2017, 6, 16, 22, 30, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '25e662791c1ba444803b618a7afb06fd9124e301', 'committer_username': 'rossviljoen', 'committer_name': 'Ross Viljoen', 'committer_email': 'ross@viljoen.co.uk', 'commit_date': datetime.datetime(2017, 6, 16, 22, 30, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '54b5470bc470f1422464b423887756e5ba656f7c', 'committer_username': 'rossviljoen', 'committer_name': 'Ross Viljoen', 'committer_email': 'ross@viljoen.co.uk', 'commit_date': datetime.datetime(2017, 6, 16, 22, 30, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5e1c8829eee86dd6139ade8fc8c264952ff7511a', 'committer_username': 'rossviljoen', 'committer_name': 'Ross Viljoen', 'committer_email': 'ross@viljoen.co.uk', 'commit_date': datetime.datetime(2017, 6, 16, 22, 30, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ce20ebac3395c595fe59599a54fbd840781ac851', 'committer_username': 'rossviljoen', 'committer_name': 'Ross Viljoen', 'committer_email': 'ross@viljoen.co.uk', 'commit_date': datetime.datetime(2017, 6, 16, 22, 30, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '359b3d54d621c5a0b6af21c2ee2071506e58e45c', 'committer_username': 'rossviljoen', 'committer_name': 'Ross Viljoen', 'committer_email': 'ross@viljoen.co.uk', 'commit_date': datetime.datetime(2017, 6, 16, 22, 30, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3bdbedb4a4fe8e05f79960c10618548f53f8371a', 'committer_username': 'rossviljoen', 'committer_name': 'Ross Viljoen', 'committer_email': 'ross@viljoen.co.uk', 'commit_date': datetime.datetime(2017, 6, 16, 22, 30, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cb3a341d6f2bcb1b4474d7e3b2c8b8f48ef94681', 'committer_username': 'rossviljoen', 'committer_name': 'Ross Viljoen', 'committer_email': 'ross@viljoen.co.uk', 'commit_date': datetime.datetime(2017, 6, 16, 22, 30, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3a2c8a921fc2ab339a00196bcb23034419bc6537', 'committer_username': 'rossviljoen', 'committer_name': 'Ross Viljoen', 'committer_email': 'ross@viljoen.co.uk', 'commit_date': datetime.datetime(2017, 6, 16, 22, 30, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '005f8f03c9d896774260b760df33d77cad00d42d', 'committer_username': 'rossviljoen', 'committer_name': 'Ross Viljoen', 'committer_email': 'ross@viljoen.co.uk', 'commit_date': datetime.datetime(2017, 6, 16, 22, 30, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '443a2d4f1c5675b9bf21b9cedbe98a1483f53e92', 'committer_username': 'rossviljoen', 'committer_name': 'Ross Viljoen', 'committer_email': 'ross@viljoen.co.uk', 'commit_date': datetime.datetime(2017, 6, 16, 22, 30, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '92da73c4871becf5418257be2c11ce28e691a181', 'committer_username': 'rossviljoen', 'committer_name': 'Ross Viljoen', 'committer_email': 'ross@viljoen.co.uk', 'commit_date': datetime.datetime(2017, 6, 16, 22, 30, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7d05d1b92969d79ca5e4a7b093cab1f67ad3611e', 'committer_username': 'rossviljoen', 'committer_name': 'Ross Viljoen', 'committer_email': 'ross@viljoen.co.uk', 'commit_date': datetime.datetime(2017, 6, 16, 22, 30, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c0dd7372e70331b63ff00fffae831d2c18bcc74d', 'committer_username': 'rossviljoen', 'committer_name': 'Ross Viljoen', 'committer_email': 'ross@viljoen.co.uk', 'commit_date': datetime.datetime(2017, 6, 16, 22, 30, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '92dcdf5a9bf0f4003767a5ef9196e36c2a0b4973', 'committer_username': 'rossviljoen', 'committer_name': 'Ross Viljoen', 'committer_email': 'ross@viljoen.co.uk', 'commit_date': datetime.datetime(2017, 6, 16, 22, 30, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f8086c8f726b0d6ccad41c6c038a8dab2e62d15b', 'committer_username': 'rossviljoen', 'committer_name': 'Ross Viljoen', 'committer_email': 'ross@viljoen.co.uk', 'commit_date': datetime.datetime(2017, 6, 16, 22, 30, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '787c57d1ce82eb856ab19b6c44421832fce7713d', 'committer_username': 'rossviljoen', 'committer_name': 'Ross Viljoen', 'committer_email': 'ross@viljoen.co.uk', 'commit_date': datetime.datetime(2017, 6, 16, 22, 30, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ec5fa05e546fe7966a88f46fe2b14b695352c27c', 'committer_username': 'rossviljoen', 'committer_name': 'Ross Viljoen', 'committer_email': 'ross@viljoen.co.uk', 'commit_date': datetime.datetime(2017, 6, 16, 22, 30, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6d4e87b87f5329eb00750c0c4c5c7cadf2c97328', 'committer_username': 'rossviljoen', 'committer_name': 'Ross Viljoen', 'committer_email': 'ross@viljoen.co.uk', 'commit_date': datetime.datetime(2017, 6, 16, 22, 30, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '22c999ae39f11989fd556be47b5254cee0af8487', 'committer_username': 'rossviljoen', 'committer_name': 'Ross Viljoen', 'committer_email': 'ross@viljoen.co.uk', 'commit_date': datetime.datetime(2017, 6, 16, 22, 30, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '27639723ce0d4d4c7d9f85e6ec453e387f9a53bb', 'committer_username': 'rossviljoen', 'committer_name': 'Ross Viljoen', 'committer_email': 'ross@viljoen.co.uk', 'commit_date': datetime.datetime(2017, 6, 16, 22, 30, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '23e5c2e3c6ba7174d679002d0a482853d2227778', 'committer_username': 'rossviljoen', 'committer_name': 'Ross Viljoen', 'committer_email': 'ross@viljoen.co.uk', 'commit_date': datetime.datetime(2017, 6, 16, 22, 30, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '60d5072de8f8a468191a900e1d9eabf4a4c9036c', 'committer_username': 'rossviljoen', 'committer_name': 'Ross Viljoen', 'committer_email': 'ross@viljoen.co.uk', 'commit_date': datetime.datetime(2017, 6, 16, 22, 30, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a8e5cbe740e26e0090021cc0cc05cf67e07435e0', 'committer_username': 'rossviljoen', 'committer_name': 'Ross Viljoen', 'committer_email': 'ross@viljoen.co.uk', 'commit_date': datetime.datetime(2017, 6, 16, 22, 30, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1bbeae0e18f5f18de08d8e5a2a07afc69040a744', 'committer_username': 'rossviljoen', 'committer_name': 'Ross Viljoen', 'committer_email': 'ross@viljoen.co.uk', 'commit_date': datetime.datetime(2017, 6, 16, 22, 30, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1a0782ffbb0ead758ba80b7892fcd0094306c576', 'committer_username': 'rossviljoen', 'committer_name': 'Ross Viljoen', 'committer_email': 'ross@viljoen.co.uk', 'commit_date': datetime.datetime(2017, 6, 16, 22, 30, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'eddc7ab8ebaa675efb463d601ca21696c31018bb', 'committer_username': 'rossviljoen', 'committer_name': 'Ross Viljoen', 'committer_email': 'ross@viljoen.co.uk', 'commit_date': datetime.datetime(2017, 6, 16, 22, 30, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7ea3c2f7e2e9256ceb68047bebd3f087c0849244', 'committer_username': 'rossviljoen', 'committer_name': 'Ross Viljoen', 'committer_email': 'ross@viljoen.co.uk', 'commit_date': datetime.datetime(2017, 6, 16, 22, 30, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9b6557fcc7b2481512a82b350fef18e97e522837', 'committer_username': 'rossviljoen', 'committer_name': 'Ross Viljoen', 'committer_email': 'ross@viljoen.co.uk', 'commit_date': datetime.datetime(2017, 6, 16, 22, 30, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0e59e49ae9d32be55c20c96336addb85304e350c', 'committer_username': 'rossviljoen', 'committer_name': 'Ross Viljoen', 'committer_email': 'ross@viljoen.co.uk', 'commit_date': datetime.datetime(2017, 6, 16, 22, 30, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '38ed15ff973beb73fd694ad5f4f1f25c8373129e', 'committer_username': 'rossviljoen', 'committer_name': 'Ross Viljoen', 'committer_email': 'ross@viljoen.co.uk', 'commit_date': datetime.datetime(2017, 6, 16, 22, 30, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c8a974f5d77f379a3688de35931c16983329e92b', 'committer_username': 'rossviljoen', 'committer_name': 'Ross Viljoen', 'committer_email': 'ross@viljoen.co.uk', 'commit_date': datetime.datetime(2017, 6, 16, 22, 30, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '56507a8e2157f236a687d82d40a33b873b073ee2', 'committer_username': 'rossviljoen', 'committer_name': 'Ross Viljoen', 'committer_email': 'ross@viljoen.co.uk', 'commit_date': datetime.datetime(2017, 6, 16, 22, 30, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '857ecc34f4c718a063cb83c7caff61903acbffef', 'committer_username': 'rossviljoen', 'committer_name': 'Ross Viljoen', 'committer_email': 'ross@viljoen.co.uk', 'commit_date': datetime.datetime(2017, 6, 16, 22, 30, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1bbf38568b8e3ed935786a093e64e066c7b88231', 'committer_username': 'rossviljoen', 'committer_name': 'Ross Viljoen', 'committer_email': 'ross@viljoen.co.uk', 'commit_date': datetime.datetime(2017, 6, 16, 22, 30, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bbd8502c66dfabf7000066df56de5d0b14e08fb3', 'committer_username': 'rossviljoen', 'committer_name': 'Ross Viljoen', 'committer_email': 'ross@viljoen.co.uk', 'commit_date': datetime.datetime(2017, 6, 16, 22, 30, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0563d0192f830889f40e9feda51c2274008aee8d', 'committer_username': 'rossviljoen', 'committer_name': 'Ross Viljoen', 'committer_email': 'ross@viljoen.co.uk', 'commit_date': datetime.datetime(2017, 6, 16, 22, 30, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fb9a56399e1710578928ecc20d52751f8fe57992', 'committer_username': 'rossviljoen', 'committer_name': 'Ross Viljoen', 'committer_email': 'ross@viljoen.co.uk', 'commit_date': datetime.datetime(2017, 6, 16, 22, 30, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e62fbf70e2c588bc797a0645c96ad7be27a00003', 'committer_username': 'rossviljoen', 'committer_name': 'Ross Viljoen', 'committer_email': 'ross@viljoen.co.uk', 'commit_date': datetime.datetime(2017, 6, 16, 22, 30, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '36c62b941812b48b34cc98ddb4fac43012474172', 'committer_username': 'rossviljoen', 'committer_name': 'Ross Viljoen', 'committer_email': 'ross@viljoen.co.uk', 'commit_date': datetime.datetime(2017, 6, 16, 22, 30, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0ee10044df91dee8496cd3efcabe83bed0855467', 'committer_username': 'rossviljoen', 'committer_name': 'Ross Viljoen', 'committer_email': 'ross@viljoen.co.uk', 'commit_date': datetime.datetime(2017, 6, 16, 22, 30, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f648a7c6f11191d22c63dbdff31101d8a19f3450', 'committer_username': 'rossviljoen', 'committer_name': 'Ross Viljoen', 'committer_email': 'ross@viljoen.co.uk', 'commit_date': datetime.datetime(2017, 6, 16, 22, 30, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a9b9a57dab947ae20711de6f9e8ef2af1e6fc6f1', 'committer_username': 'rossviljoen', 'committer_name': 'Ross Viljoen', 'committer_email': 'ross@viljoen.co.uk', 'commit_date': datetime.datetime(2017, 6, 16, 22, 30, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b8e7d6b71a3659df52ef28270b02b2e1336a9605', 'committer_username': 'rossviljoen', 'committer_name': 'Ross Viljoen', 'committer_email': 'ross@viljoen.co.uk', 'commit_date': datetime.datetime(2017, 6, 16, 22, 30, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9353e44d5511af90362de4cf8c576eb0ea9ca6ad', 'committer_username': 'rossviljoen', 'committer_name': 'Ross Viljoen', 'committer_email': 'ross@viljoen.co.uk', 'commit_date': datetime.datetime(2017, 6, 16, 22, 30, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ea3d3c68c476b0c4a9e641c02d4a351b53ae0d1d', 'committer_username': 'rossviljoen', 'committer_name': 'Ross Viljoen', 'committer_email': 'ross@viljoen.co.uk', 'commit_date': datetime.datetime(2017, 6, 16, 22, 30, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c1a45464d75f73ea9e8e53c533e3d4168008bbf2', 'committer_username': 'rossviljoen', 'committer_name': 'Ross Viljoen', 'committer_email': 'ross@viljoen.co.uk', 'commit_date': datetime.datetime(2017, 6, 16, 22, 30, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '835da224cfb0b6a5bbc8c0d43e2f99162c3f4c16', 'committer_username': 'rossviljoen', 'committer_name': 'Ross Viljoen', 'committer_email': 'ross@viljoen.co.uk', 'commit_date': datetime.datetime(2017, 6, 16, 22, 30, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fa1cdc36bbd9b340b069a37d568645ee3534c04e', 'committer_username': 'rossviljoen', 'committer_name': 'Ross Viljoen', 'committer_email': 'ross@viljoen.co.uk', 'commit_date': datetime.datetime(2017, 6, 16, 22, 30, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'af41ca3a0384e0300aa1720569902e8a9b27708b', 'committer_username': 'rossviljoen', 'committer_name': 'Ross Viljoen', 'committer_email': 'ross@viljoen.co.uk', 'commit_date': datetime.datetime(2017, 6, 16, 22, 30, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'de2c4cd42fc0cae5079ff91501a329bc5f7de7e2', 'committer_username': 'rossviljoen', 'committer_name': 'Ross Viljoen', 'committer_email': 'ross@viljoen.co.uk', 'commit_date': datetime.datetime(2017, 6, 16, 22, 30, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f07c6f17a4722234546acdd1ddff0de0e11a86a8', 'committer_username': 'rossviljoen', 'committer_name': 'Ross Viljoen', 'committer_email': 'ross@viljoen.co.uk', 'commit_date': datetime.datetime(2017, 6, 16, 22, 30, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9f4d2951c1663f04657e603663c9b5220fd5b142', 'committer_username': 'rossviljoen', 'committer_name': 'Ross Viljoen', 'committer_email': 'ross@viljoen.co.uk', 'commit_date': datetime.datetime(2017, 6, 16, 22, 30, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ca5f1488b4f374ed5e005c8a66c54e618509df21', 'committer_username': 'rossviljoen', 'committer_name': 'Ross Viljoen', 'committer_email': 'ross@viljoen.co.uk', 'commit_date': datetime.datetime(2017, 6, 16, 22, 30, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '66ec256e8df64bb13447fc052b12ff7c7421dfde', 'committer_username': 'rossviljoen', 'committer_name': 'Ross Viljoen', 'committer_email': 'ross@viljoen.co.uk', 'commit_date': datetime.datetime(2017, 6, 16, 22, 30, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6841074f3aaf0a09a917250732739df4b30035a6', 'committer_username': 'rossviljoen', 'committer_name': 'Ross Viljoen', 'committer_email': 'ross@viljoen.co.uk', 'commit_date': datetime.datetime(2017, 6, 16, 22, 30, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1594ee8ff9490c8c568412b3da7a540e5c8345ab', 'committer_username': 'rossviljoen', 'committer_name': 'Ross Viljoen', 'committer_email': 'ross@viljoen.co.uk', 'commit_date': datetime.datetime(2017, 6, 16, 22, 30, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '878b2145d1e8346b4ada39f7a0ed0babb6f9791e', 'committer_username': 'rossviljoen', 'committer_name': 'Ross Viljoen', 'committer_email': 'ross@viljoen.co.uk', 'commit_date': datetime.datetime(2017, 6, 16, 22, 30, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'be967226317e5f9aa7e23474b9b86c9434d70d6a', 'committer_username': 'rossviljoen', 'committer_name': 'Ross Viljoen', 'committer_email': 'ross@viljoen.co.uk', 'commit_date': datetime.datetime(2017, 6, 16, 22, 30, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '39f243a3622b13c61b5f6db89d8fe85735836dda', 'committer_username': 'rossviljoen', 'committer_name': 'Ross Viljoen', 'committer_email': 'ross@viljoen.co.uk', 'commit_date': datetime.datetime(2017, 6, 16, 22, 30, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ef3292cb44f74581fce32e6d4563b4611870deb3', 'committer_username': 'rossviljoen', 'committer_name': 'Ross Viljoen', 'committer_email': 'ross@viljoen.co.uk', 'commit_date': datetime.datetime(2017, 6, 16, 22, 30, 57, tzinfo=datetime.timezone.utc)}]",Ross Viljoen,29493846,ross@viljoen.co.uk,User,,17,,24,3
714603395,Proper documentation,"Sets up docs CI and cleans up documentation/examples in general.

Heavily pilfered from KernelFunctions and AbstractGPs

[Preview](https://juliagaussianprocesses.github.io/SparseGPs.jl/previews/PR32/)",True,32,https://api.github.com/repos/JuliaGaussianProcesses/ApproximateGPs.jl/pulls/32,https://github.com/JuliaGaussianProcesses/ApproximateGPs.jl/pull/32,closed,3534,400,25,58,0,61,0,0,[],2021-08-17 22:21:30+00:00,2021-08-26 15:44:58+00:00,753808.0,"8 days, 17:23:28","[{'comment_id': 690763413, 'comment_body': '**[JuliaFormatter]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br>\n```suggestion\ndeploydocs(; repo=""github.com/rossviljoen/SparseGPs.jl.git"", push_preview=true)\n```\n', 'comment_created': datetime.datetime(2021, 8, 17, 22, 22, 50, tzinfo=datetime.timezone.utc), 'commenter': 'github-actions[bot]', 'type': 'Bot'}, {'comment_id': 690763418, 'comment_body': '**[JuliaFormatter]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br>\n```suggestion\nz = range(0; stop=6, length=M)\n```\n', 'comment_created': datetime.datetime(2021, 8, 17, 22, 22, 50, tzinfo=datetime.timezone.utc), 'commenter': 'github-actions[bot]', 'type': 'Bot'}, {'comment_id': 690763421, 'comment_body': '**[JuliaFormatter]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br>\n```suggestion\nplt = plot(x_plot, post_y_samples; seriescolor=""red"", linealpha=0.2, label="""")\n```\n', 'comment_created': datetime.datetime(2021, 8, 17, 22, 22, 50, tzinfo=datetime.timezone.utc), 'commenter': 'github-actions[bot]', 'type': 'Bot'}, {'comment_id': 690763423, 'comment_body': '**[JuliaFormatter]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br>\n```suggestion\nplot!(\n    x_true, mean.(f.lik.(f_true)); seriescolor=""green"", linewidth=3, label=""True function""\n)\n```\n', 'comment_created': datetime.datetime(2021, 8, 17, 22, 22, 51, tzinfo=datetime.timezone.utc), 'commenter': 'github-actions[bot]', 'type': 'Bot'}, {'comment_id': 693259321, 'comment_body': '**[JuliaFormatter]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br>\n```suggestion\nmodel = SVGPModel(k_init, z_init, m_init, A_init)\n```\n', 'comment_created': datetime.datetime(2021, 8, 20, 23, 11, 27, tzinfo=datetime.timezone.utc), 'commenter': 'github-actions[bot]', 'type': 'Bot'}, {'comment_id': 693376517, 'comment_body': '**[JuliaFormatter]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br>\n```suggestion\n    k=(var=positive(rand()), precision=positive(rand())),\n    z=bounded.(range(0.1; stop=5.9, length=M), 0.0, 6.0),  # constrain z to simplify optimisation\n    m=zeros(M),\n    A=pdmatrix(4 * Matrix{Float64}(I, M, M)),  # pdmatrix is defined in utils.jl\n```\n', 'comment_created': datetime.datetime(2021, 8, 21, 16, 50, 13, tzinfo=datetime.timezone.utc), 'commenter': 'github-actions[bot]', 'type': 'Bot'}, {'comment_id': 693376518, 'comment_body': '**[JuliaFormatter]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br>\n```suggestion\n    LBFGS(;\n        alphaguess=Optim.LineSearches.InitialStatic(; scaled=true),\n        linesearch=Optim.LineSearches.BackTracking(),\n    );\n```\n', 'comment_created': datetime.datetime(2021, 8, 21, 16, 50, 13, tzinfo=datetime.timezone.utc), 'commenter': 'github-actions[bot]', 'type': 'Bot'}, {'comment_id': 693376519, 'comment_body': '**[JuliaFormatter]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br>\n```suggestion\nfunction ParameterHandling.flatten(::Type{T}, P::PDMatrix) where {T}\n```\n', 'comment_created': datetime.datetime(2021, 8, 21, 16, 50, 14, tzinfo=datetime.timezone.utc), 'commenter': 'github-actions[bot]', 'type': 'Bot'}, {'comment_id': 693388249, 'comment_body': '**[JuliaFormatter]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br>\n```suggestion\n    );\n    Optim.Options(; iterations=4_000)inplace=false,\n```\n', 'comment_created': datetime.datetime(2021, 8, 21, 18, 50, 5, tzinfo=datetime.timezone.utc), 'commenter': 'github-actions[bot]', 'type': 'Bot'}, {'comment_id': 693388475, 'comment_body': '**[JuliaFormatter]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br>\n```suggestion\n    );\n    Optim.Options(; iterations=4_000)inplace=false,\n```\n', 'comment_created': datetime.datetime(2021, 8, 21, 18, 52, 31, tzinfo=datetime.timezone.utc), 'commenter': 'github-actions[bot]', 'type': 'Bot'}, {'comment_id': 693388533, 'comment_body': '**[JuliaFormatter]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br>\n```suggestion\n    );\n    Optim.Options(; iterations=4_000),\n```\n', 'comment_created': datetime.datetime(2021, 8, 21, 18, 53, 12, tzinfo=datetime.timezone.utc), 'commenter': 'github-actions[bot]', 'type': 'Bot'}, {'comment_id': 693789064, 'comment_body': ""link doesn't seem to be working (same for classification example)"", 'comment_created': datetime.datetime(2021, 8, 23, 8, 58, 26, tzinfo=datetime.timezone.utc), 'commenter': 'st--', 'type': 'User'}, {'comment_id': 693789598, 'comment_body': '```suggestion\r\n# We define a data-generating function `g`:\r\n```', 'comment_created': datetime.datetime(2021, 8, 23, 8, 59, 10, tzinfo=datetime.timezone.utc), 'commenter': 'st--', 'type': 'User'}, {'comment_id': 693790544, 'comment_body': '```suggestion\r\ng(x) = sin(3π * x) + 0.3 * cos(9π * x) + 0.5 * sin(7π * x)\r\n```\r\n?', 'comment_created': datetime.datetime(2021, 8, 23, 9, 0, 26, tzinfo=datetime.timezone.utc), 'commenter': 'st--', 'type': 'User'}, {'comment_id': 693795352, 'comment_body': ""It'd be very helpful to newcomers to add a comment to make explicit that Flux will do unconstrained optimisation, i.e. parameters anywhere on the real line, so we use `softplus()` to ensure positivity of kernel variances and lengthscales."", 'comment_created': datetime.datetime(2021, 8, 23, 9, 7, 20, tzinfo=datetime.timezone.utc), 'commenter': 'st--', 'type': 'User'}, {'comment_id': 693796009, 'comment_body': '```suggestion\r\n    return softplus(k[1]) * with_lengthscale(SqExponentialKernel(), softplus(k[2]))\r\n```\r\n?\r\nor add a comment saying that `softplus(k[2])` is the _inverse_ lengthscale.\r\n', 'comment_created': datetime.datetime(2021, 8, 23, 9, 8, 13, tzinfo=datetime.timezone.utc), 'commenter': 'st--', 'type': 'User'}, {'comment_id': 693796895, 'comment_body': 'Or how about:\r\n```suggestion\r\nfunction make_kernel(k_params)\r\n    variance = softplus(k_params[1])\r\n    lengthscale = softplus(k_params[2])\r\n    return variance * with_lengthscale(SqExponentialKernel(), lengthscale)\r\nend\r\n```\r\n(my preference)\r\nor, if you prefer:\r\n\r\n```suggestion\r\nfunction make_kernel(k_params)\r\n    variance = softplus(k_params[1])\r\n    inv_lengthscale = softplus(k_params[2])\r\n    return variance * (SqExponentialKernel() ∘ ScaleTransform(inv_lengthscale))\r\nend\r\n```', 'comment_created': datetime.datetime(2021, 8, 23, 9, 9, 26, tzinfo=datetime.timezone.utc), 'commenter': 'st--', 'type': 'User'}, {'comment_id': 693798106, 'comment_body': 'ideally, in a notebook you\'d show how to set them to ""interpretable"" values - I don\'t know if there\'s an `inv_softplus` already implemented somewhere, but something along the lines of\r\n```suggestion\r\ninit_variance = 1.3\r\ninit_lengthscale = 0.3\r\nk_init = [inv_softplus(init_variance), inv_softplus(init_lengthscale)]\r\n```', 'comment_created': datetime.datetime(2021, 8, 23, 9, 11, 2, tzinfo=datetime.timezone.utc), 'commenter': 'st--', 'type': 'User'}, {'comment_id': 693798249, 'comment_body': 'this would be much neater with bijectors ;)', 'comment_created': datetime.datetime(2021, 8, 23, 9, 11, 14, tzinfo=datetime.timezone.utc), 'commenter': 'st--', 'type': 'User'}, {'comment_id': 693798975, 'comment_body': '```suggestion\r\n    A  # square-root of variational covariance\r\n```', 'comment_created': datetime.datetime(2021, 8, 23, 9, 12, 15, tzinfo=datetime.timezone.utc), 'commenter': 'st--', 'type': 'User'}, {'comment_id': 693799265, 'comment_body': 'Would inline-math work for the equations?', 'comment_created': datetime.datetime(2021, 8, 23, 9, 12, 40, tzinfo=datetime.timezone.utc), 'commenter': 'st--', 'type': 'User'}, {'comment_id': 693799807, 'comment_body': 'This paragraph seems to hang a bit in the middle of nowhere - how does it connect to the previous/next ones?', 'comment_created': datetime.datetime(2021, 8, 23, 9, 13, 24, tzinfo=datetime.timezone.utc), 'commenter': 'st--', 'type': 'User'}, {'comment_id': 693800004, 'comment_body': '```suggestion\r\njitter = 1e-5\r\n#md nothing #hide\r\n```', 'comment_created': datetime.datetime(2021, 8, 23, 9, 13, 43, tzinfo=datetime.timezone.utc), 'commenter': 'st--', 'type': 'User'}, {'comment_id': 693801318, 'comment_body': ""I think this would make more sense to the reader if you move it next to the `make_approx` definition - then it's all in one place, explanation, initialisation, and at-runtime evaluation"", 'comment_created': datetime.datetime(2021, 8, 23, 9, 15, 23, tzinfo=datetime.timezone.utc), 'commenter': 'st--', 'type': 'User'}, {'comment_id': 693802243, 'comment_body': 'minor point: how about calling this a bit more explicitly `num_data`? (within the definition of `elbo` as well as in the notebook)', 'comment_created': datetime.datetime(2021, 8, 23, 9, 16, 40, tzinfo=datetime.timezone.utc), 'commenter': 'st--', 'type': 'User'}, {'comment_id': 693803186, 'comment_body': ""Could you make more explicit that, when minibatching, it's crucial to explicitly pass the full length of the dataset (so that the scaling of data-fit vs KL penalty terms is correct)? maybe a comment here and a mention in the text above?"", 'comment_created': datetime.datetime(2021, 8, 23, 9, 18, 7, tzinfo=datetime.timezone.utc), 'commenter': 'st--', 'type': 'User'}, {'comment_id': 693805280, 'comment_body': '```suggestion\r\nM = 10 # number of inducing points\r\n```\r\nor something like that?\r\n\r\nWould make the final plot less cluttered, and show the strength of the pseudo-point approximation', 'comment_created': datetime.datetime(2021, 8, 23, 9, 20, 58, tzinfo=datetime.timezone.utc), 'commenter': 'st--', 'type': 'User'}, {'comment_id': 693806084, 'comment_body': 'Could you change it to only mark the location as little ticks `|` on the x-axis (if you can get Plots.jl to let you overplot ""outside the axes"")? it looks quite cluttered at the moment', 'comment_created': datetime.datetime(2021, 8, 23, 9, 22, 4, tzinfo=datetime.timezone.utc), 'commenter': 'st--', 'type': 'User'}, {'comment_id': 693806476, 'comment_body': ""samples? isn't it the confidence intervals?"", 'comment_created': datetime.datetime(2021, 8, 23, 9, 22, 33, tzinfo=datetime.timezone.utc), 'commenter': 'st--', 'type': 'User'}, {'comment_id': 693806857, 'comment_body': 'Why not just\r\n```suggestion\r\nloss(model, x, y)\r\n```\r\n?', 'comment_created': datetime.datetime(2021, 8, 23, 9, 23, 5, tzinfo=datetime.timezone.utc), 'commenter': 'st--', 'type': 'User'}, {'comment_id': 693807943, 'comment_body': 'what are these used for? maybe an explicit\r\n```suggestion\r\nusing IterTools: ncycle\r\n```\r\n(or whichever it is) could be helpful here', 'comment_created': datetime.datetime(2021, 8, 23, 9, 24, 23, tzinfo=datetime.timezone.utc), 'commenter': 'st--', 'type': 'User'}, {'comment_id': 693808427, 'comment_body': ""again, reference doesn't work"", 'comment_created': datetime.datetime(2021, 8, 23, 9, 24, 59, tzinfo=datetime.timezone.utc), 'commenter': 'st--', 'type': 'User'}, {'comment_id': 693809238, 'comment_body': 'would be helpful to explain the 1e-12 here again\r\n```suggestion\r\njitter = 1e-12  # for numeric stability\r\nlgp = LatentGP(GP(kernel_true), BernoulliLikelihood(), jitter)\r\n```\r\nalong those lines..:)', 'comment_created': datetime.datetime(2021, 8, 23, 9, 26, 4, tzinfo=datetime.timezone.utc), 'commenter': 'st--', 'type': 'User'}, {'comment_id': 693809937, 'comment_body': 'could you find a more ""interesting"" sample (e.g. more wiggles)? either a different seed or perhaps somewhat shorter lengthscale...', 'comment_created': datetime.datetime(2021, 8, 23, 9, 27, 3, tzinfo=datetime.timezone.utc), 'commenter': 'st--', 'type': 'User'}, {'comment_id': 693810928, 'comment_body': '```suggestion\r\nplot!(x_true, mean.(lgp.lik.(f_true)); seriescolor=""red"", label=""True probability"")\r\n```\r\nor\r\n```suggestion\r\nplot!(x_true, mean.(lgp.lik.(f_true)); seriescolor=""red"", label=""True mean"")\r\n```\r\nseems more appropriate (""function"" makes me think of the latent `f`)', 'comment_created': datetime.datetime(2021, 8, 23, 9, 28, 21, tzinfo=datetime.timezone.utc), 'commenter': 'st--', 'type': 'User'}, {'comment_id': 693812980, 'comment_body': '```suggestion\r\nplt = scatter(plt, x, y; seriescolor=""blue"", label=""Data points"")\r\nplot!(x_true, post_μ_samples; seriescolor=""red"", linealpha=0.2, label=""Posterior samples"")\r\n```', 'comment_created': datetime.datetime(2021, 8, 23, 9, 31, 13, tzinfo=datetime.timezone.utc), 'commenter': 'st--', 'type': 'User'}, {'comment_id': 693815654, 'comment_body': ""This isn't actually _stochastic_ optimisation...:\r\n```suggestion\r\n# # 2. Classification: Sparse Variational Approximation for Non-Conjugate Likelihoods with Optim's L-BFGS\r\n```"", 'comment_created': datetime.datetime(2021, 8, 23, 9, 34, 52, tzinfo=datetime.timezone.utc), 'commenter': 'st--', 'type': 'User'}, {'comment_id': 693816137, 'comment_body': '```suggestion\r\n# # 1. Regression: Sparse Variational Gaussian Process for Stochastic Optimisation with Flux.jl\r\n```', 'comment_created': datetime.datetime(2021, 8, 23, 9, 35, 32, tzinfo=datetime.timezone.utc), 'commenter': 'st--', 'type': 'User'}, {'comment_id': 693931848, 'comment_body': ""(NB- I'd prefer the more explicit headings even if you take out the numbering again)"", 'comment_created': datetime.datetime(2021, 8, 23, 12, 36, 43, tzinfo=datetime.timezone.utc), 'commenter': 'st--', 'type': 'User'}, {'comment_id': 693962593, 'comment_body': 'how about:\r\n```suggestion\r\n    z=bounded.(range(0.1, 5.9; length=M), 0.0, 6.0),  # constrain z to simplify optimisation\r\n```\r\nfeels a bit more natural to me', 'comment_created': datetime.datetime(2021, 8, 23, 13, 17, 45, tzinfo=datetime.timezone.utc), 'commenter': 'st--', 'type': 'User'}, {'comment_id': 694035626, 'comment_body': ""Yeah - I can't figure out why..."", 'comment_created': datetime.datetime(2021, 8, 23, 14, 40, 55, tzinfo=datetime.timezone.utc), 'commenter': 'rossviljoen', 'type': 'User'}, {'comment_id': 694086681, 'comment_body': ""The reason for the simple sample is that optimisation gets a bit dodgy when it's more interesting :)"", 'comment_created': datetime.datetime(2021, 8, 23, 15, 38, 42, tzinfo=datetime.timezone.utc), 'commenter': 'rossviljoen', 'type': 'User'}, {'comment_id': 694090152, 'comment_body': 'Ah - I forgot to remove this when moving things around', 'comment_created': datetime.datetime(2021, 8, 23, 15, 42, 45, tzinfo=datetime.timezone.utc), 'commenter': 'rossviljoen', 'type': 'User'}, {'comment_id': 694576887, 'comment_body': 'fair enough!', 'comment_created': datetime.datetime(2021, 8, 24, 7, 30, 22, tzinfo=datetime.timezone.utc), 'commenter': 'st--', 'type': 'User'}, {'comment_id': 694577357, 'comment_body': ""though I think that might be an issue with the parametrisation; normally, there shouldn't be any issues fitting 1D toy datasets!"", 'comment_created': datetime.datetime(2021, 8, 24, 7, 31, 5, tzinfo=datetime.timezone.utc), 'commenter': 'st--', 'type': 'User'}, {'comment_id': 695098387, 'comment_body': 'https://github.com/JuliaGaussianProcesses/SparseGPs.jl/issues/35', 'comment_created': datetime.datetime(2021, 8, 24, 18, 27, 4, tzinfo=datetime.timezone.utc), 'commenter': 'st--', 'type': 'User'}, {'comment_id': 695099205, 'comment_body': '#36 ', 'comment_created': datetime.datetime(2021, 8, 24, 18, 28, 2, tzinfo=datetime.timezone.utc), 'commenter': 'st--', 'type': 'User'}, {'comment_id': 695099462, 'comment_body': '#36 ', 'comment_created': datetime.datetime(2021, 8, 24, 18, 28, 27, tzinfo=datetime.timezone.utc), 'commenter': 'st--', 'type': 'User'}, {'comment_id': 695100034, 'comment_body': 'oh, that IS a thing :D', 'comment_created': datetime.datetime(2021, 8, 24, 18, 29, 12, tzinfo=datetime.timezone.utc), 'commenter': 'st--', 'type': 'User'}, {'comment_id': 695158574, 'comment_body': '**[JuliaFormatter]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br>\n```suggestion\n    svgp::SVGP,\n    lfx::LatentFiniteGP,\n    y::AbstractVector;\n    num_data=length(y),\n    quadrature=Default(),\n```\n', 'comment_created': datetime.datetime(2021, 8, 24, 19, 56, 12, tzinfo=datetime.timezone.utc), 'commenter': 'github-actions[bot]', 'type': 'Bot'}, {'comment_id': 695158576, 'comment_body': '**[JuliaFormatter]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br>\n```suggestion\n    gh::GaussHermite,\n    y::AbstractVector,\n    q_f::AbstractVector{<:Normal},\n    lik::ScalarLikelihood,\n```\n', 'comment_created': datetime.datetime(2021, 8, 24, 19, 56, 12, tzinfo=datetime.timezone.utc), 'commenter': 'github-actions[bot]', 'type': 'Bot'}, {'comment_id': 695182131, 'comment_body': '```suggestion\r\nstruct DefaultQuadrature <: QuadratureMethod end\r\n```', 'comment_created': datetime.datetime(2021, 8, 24, 20, 33, 26, tzinfo=datetime.timezone.utc), 'commenter': 'st--', 'type': 'User'}, {'comment_id': 696085022, 'comment_body': '**[JuliaFormatter]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br>\n```suggestion\nscatter(\n    x,\n    y;\n    xlabel=""x"",\n    ylabel=""y"",\n    markershape=:xcross,\n    markeralpha=0.1,\n    label=""Training Data"",\n)\n```\n', 'comment_created': datetime.datetime(2021, 8, 25, 20, 21, 29, tzinfo=datetime.timezone.utc), 'commenter': 'github-actions[bot]', 'type': 'Bot'}, {'comment_id': 696085034, 'comment_body': '**[JuliaFormatter]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br>\n```suggestion\nsticks!(model.z, fill(0.13, M); label=""Pseudo-points"", linewidth=1.5, color=5)\n```\n', 'comment_created': datetime.datetime(2021, 8, 25, 20, 21, 30, tzinfo=datetime.timezone.utc), 'commenter': 'github-actions[bot]', 'type': 'Bot'}, {'comment_id': 696085039, 'comment_body': '**[JuliaFormatter]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br>\n```suggestion\n    ::DefaultQuadrature,\n    y::AbstractVector,\n    q_f::AbstractVector{<:Normal},\n    lik::ScalarLikelihood,\n```\n', 'comment_created': datetime.datetime(2021, 8, 25, 20, 21, 30, tzinfo=datetime.timezone.utc), 'commenter': 'github-actions[bot]', 'type': 'Bot'}, {'comment_id': 696151470, 'comment_body': ""`documenter=false` here is the reason for #36. Unfortunately, if you set it to `true` then the `#md nothing #hide` thing no longer works to hide output in the markdown renders of the examples, so I think it's worth it just to have the links not work (and I should probably open an issue in `Literate.jl`)"", 'comment_created': datetime.datetime(2021, 8, 25, 22, 17, 25, tzinfo=datetime.timezone.utc), 'commenter': 'rossviljoen', 'type': 'User'}, {'comment_id': 696354510, 'comment_body': 'You can also suppress output by appending a `;` at the end of the last line of a cell - effectively that makes it return `nothing`:)', 'comment_created': datetime.datetime(2021, 8, 26, 7, 13, 22, tzinfo=datetime.timezone.utc), 'commenter': 'st--', 'type': 'User'}, {'comment_id': 696355251, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2021, 8, 26, 7, 14, 30, tzinfo=datetime.timezone.utc), 'commenter': 'st--', 'type': 'User'}, {'comment_id': 696356343, 'comment_body': 'e.g.\r\n```suggestion\r\nRandom.seed!(1234);\r\n```\r\nto get `documenter=true` to work without having lots of nuisance outputs', 'comment_created': datetime.datetime(2021, 8, 26, 7, 16, 12, tzinfo=datetime.timezone.utc), 'commenter': 'st--', 'type': 'User'}, {'comment_id': 696596878, 'comment_body': '**[JuliaFormatter]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br>\n```suggestion\n    SCRIPTJL,\n    OUTDIR;\n    name=EXAMPLE,\n    documenter=true,\n    execute=true,\n    preprocess=preprocess,\n    postprocess=md_postprocess,\n```\n', 'comment_created': datetime.datetime(2021, 8, 26, 12, 49, 58, tzinfo=datetime.timezone.utc), 'commenter': 'github-actions[bot]', 'type': 'Bot'}, {'comment_id': 696745498, 'comment_body': ""Turns out using `;` just has the effect of adding `nothing #hide` in the md render anyway (which for some reason doesn't get removed), so i just added a postprocess to filter it out again"", 'comment_created': datetime.datetime(2021, 8, 26, 15, 31, 53, tzinfo=datetime.timezone.utc), 'commenter': 'rossviljoen', 'type': 'User'}]","[{'commit_sha': 'e970038fa42fe2e5e9e68cda81f90213743c70d6', 'committer_username': 'rossviljoen', 'committer_name': 'Ross Viljoen', 'committer_email': 'ross@viljoen.co.uk', 'commit_date': datetime.datetime(2017, 6, 16, 22, 30, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bb58109d8847ab0dc0eeaa2dd18911c233d192df', 'committer_username': 'rossviljoen', 'committer_name': 'Ross Viljoen', 'committer_email': 'ross@viljoen.co.uk', 'commit_date': datetime.datetime(2017, 6, 16, 22, 30, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '72736da1278beb12b38822a79e9539329ce54db8', 'committer_username': 'rossviljoen', 'committer_name': 'Ross Viljoen', 'committer_email': 'ross@viljoen.co.uk', 'commit_date': datetime.datetime(2017, 6, 16, 22, 30, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd6a90d8263e30b0ab1a2ac613bf675604016ca73', 'committer_username': 'rossviljoen', 'committer_name': 'Ross Viljoen', 'committer_email': 'ross@viljoen.co.uk', 'commit_date': datetime.datetime(2017, 6, 16, 22, 30, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd1279cb4b06e2f5a5e6fd2fa68af3fd42cc549e1', 'committer_username': 'rossviljoen', 'committer_name': 'Ross Viljoen', 'committer_email': 'ross@viljoen.co.uk', 'commit_date': datetime.datetime(2017, 6, 16, 22, 30, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '89141c6907bbb6935bdc345ea8fe9cae22eba253', 'committer_username': 'rossviljoen', 'committer_name': 'Ross Viljoen', 'committer_email': 'ross@viljoen.co.uk', 'commit_date': datetime.datetime(2017, 6, 16, 22, 30, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd419bd7e050b5493e85296a1bf824191cdd2c413', 'committer_username': 'rossviljoen', 'committer_name': 'Ross Viljoen', 'committer_email': 'ross@viljoen.co.uk', 'commit_date': datetime.datetime(2017, 6, 16, 22, 30, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c029ed1bd48e7a4387924c16570cafd99012f159', 'committer_username': 'rossviljoen', 'committer_name': 'Ross Viljoen', 'committer_email': 'ross@viljoen.co.uk', 'commit_date': datetime.datetime(2017, 6, 16, 22, 30, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a5be249d800c24f3ac15e7a368f9fcc89cae1afc', 'committer_username': 'rossviljoen', 'committer_name': 'Ross Viljoen', 'committer_email': 'ross@viljoen.co.uk', 'commit_date': datetime.datetime(2017, 6, 16, 22, 30, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8dc58fe3d947eba822a534b9e984c4c2ffee7253', 'committer_username': 'rossviljoen', 'committer_name': 'Ross Viljoen', 'committer_email': 'ross@viljoen.co.uk', 'commit_date': datetime.datetime(2017, 6, 16, 22, 30, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5e77318a60ebd09cc8940573a45229396985a5f5', 'committer_username': 'rossviljoen', 'committer_name': 'Ross Viljoen', 'committer_email': 'ross@viljoen.co.uk', 'commit_date': datetime.datetime(2017, 6, 16, 22, 30, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'de095a47f635a08b6fcd786f7d4b37602d0a6a45', 'committer_username': 'rossviljoen', 'committer_name': 'Ross Viljoen', 'committer_email': 'ross@viljoen.co.uk', 'commit_date': datetime.datetime(2017, 6, 16, 22, 30, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e0bffed111a8e05dbfeec7053bf036c02a4bb24c', 'committer_username': 'rossviljoen', 'committer_name': 'Ross Viljoen', 'committer_email': 'ross@viljoen.co.uk', 'commit_date': datetime.datetime(2017, 6, 16, 22, 30, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '08ba50f189d7f66877d74abe82d6778005779d82', 'committer_username': 'rossviljoen', 'committer_name': 'Ross Viljoen', 'committer_email': 'ross@viljoen.co.uk', 'commit_date': datetime.datetime(2017, 6, 16, 22, 30, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6a11fda9660a76fe74a25a75ef0879fbed8ab173', 'committer_username': 'rossviljoen', 'committer_name': 'Ross Viljoen', 'committer_email': 'ross@viljoen.co.uk', 'commit_date': datetime.datetime(2017, 6, 16, 22, 30, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '88e6b41bba7c73bedf8d1c1bbfd7e9bc85c60536', 'committer_username': 'rossviljoen', 'committer_name': 'Ross Viljoen', 'committer_email': 'ross@viljoen.co.uk', 'commit_date': datetime.datetime(2017, 6, 16, 22, 30, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dfec92959f3514f8a9a79aeabd0fe658f692cf57', 'committer_username': 'rossviljoen', 'committer_name': 'Ross Viljoen', 'committer_email': 'ross@viljoen.co.uk', 'commit_date': datetime.datetime(2017, 6, 16, 22, 30, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4e3aebe55ba5ec29e0b057b716de8644f1464a08', 'committer_username': 'rossviljoen', 'committer_name': 'Ross Viljoen', 'committer_email': 'ross@viljoen.co.uk', 'commit_date': datetime.datetime(2017, 6, 16, 22, 30, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5cadbd371fa1e1d1cf1d259c0e8468726c1d85c8', 'committer_username': 'rossviljoen', 'committer_name': 'Ross Viljoen', 'committer_email': 'ross@viljoen.co.uk', 'commit_date': datetime.datetime(2017, 6, 16, 22, 30, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0fa7655f631b2ffbe8d85fe2a940ef66eefe448f', 'committer_username': 'rossviljoen', 'committer_name': 'Ross Viljoen', 'committer_email': 'ross@viljoen.co.uk', 'commit_date': datetime.datetime(2017, 6, 16, 22, 30, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '562dd365d932d0b1f7450e1e169b8e0ef45b29d7', 'committer_username': 'rossviljoen', 'committer_name': 'Ross Viljoen', 'committer_email': 'ross@viljoen.co.uk', 'commit_date': datetime.datetime(2017, 6, 16, 22, 30, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4c835942728b32b5e96a791dcf8ba2e046ecf8b5', 'committer_username': 'rossviljoen', 'committer_name': 'Ross Viljoen', 'committer_email': 'ross@viljoen.co.uk', 'commit_date': datetime.datetime(2017, 6, 16, 22, 30, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f0e46ef8f1af665f0deefa4d46756fd49d848aa6', 'committer_username': 'rossviljoen', 'committer_name': 'Ross Viljoen', 'committer_email': 'ross@viljoen.co.uk', 'commit_date': datetime.datetime(2017, 6, 16, 22, 30, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4f45efbe7de0f9966c45f788782f573d25034071', 'committer_username': 'rossviljoen', 'committer_name': 'Ross Viljoen', 'committer_email': 'ross@viljoen.co.uk', 'commit_date': datetime.datetime(2017, 6, 16, 22, 30, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cf35026091dd3af2f43c6f0a1e8298262eedc930', 'committer_username': 'rossviljoen', 'committer_name': 'Ross Viljoen', 'committer_email': 'ross@viljoen.co.uk', 'commit_date': datetime.datetime(2017, 6, 16, 22, 30, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4d3f73ada388493a6cba41aca9325c025db31047', 'committer_username': 'rossviljoen', 'committer_name': 'Ross Viljoen', 'committer_email': 'ross@viljoen.co.uk', 'commit_date': datetime.datetime(2017, 6, 16, 22, 30, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '93746cf9f43fc4a7e19255ab9b400ece90f700fb', 'committer_username': 'rossviljoen', 'committer_name': 'Ross Viljoen', 'committer_email': 'ross@viljoen.co.uk', 'commit_date': datetime.datetime(2017, 6, 16, 22, 30, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cec8c6716fd9644ebe47a2a297acfe3577d15e38', 'committer_username': 'rossviljoen', 'committer_name': 'Ross Viljoen', 'committer_email': 'ross@viljoen.co.uk', 'commit_date': datetime.datetime(2017, 6, 16, 22, 30, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'df51af6440521065ab0f12f9abf6287281ec0c0f', 'committer_username': 'rossviljoen', 'committer_name': 'Ross Viljoen', 'committer_email': 'ross@viljoen.co.uk', 'commit_date': datetime.datetime(2017, 6, 16, 22, 30, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '311a89be098e369cadebde7caf7783005d098bbf', 'committer_username': 'rossviljoen', 'committer_name': 'Ross Viljoen', 'committer_email': 'ross@viljoen.co.uk', 'commit_date': datetime.datetime(2017, 6, 16, 22, 30, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a9ea3db888c2ffe08e1fd2ec94c601b33af22088', 'committer_username': 'rossviljoen', 'committer_name': 'Ross Viljoen', 'committer_email': 'ross@viljoen.co.uk', 'commit_date': datetime.datetime(2017, 6, 16, 22, 30, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5bfaa348e4248f62d1c914bc31490f54efd79592', 'committer_username': 'rossviljoen', 'committer_name': 'Ross Viljoen', 'committer_email': 'ross@viljoen.co.uk', 'commit_date': datetime.datetime(2017, 6, 16, 22, 30, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '09fbd855436bb63af3f45d510c72ae76b07c7f27', 'committer_username': 'rossviljoen', 'committer_name': 'Ross Viljoen', 'committer_email': 'ross@viljoen.co.uk', 'commit_date': datetime.datetime(2017, 6, 16, 22, 30, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1d25048da06c5017646e6067efab9502ca21de35', 'committer_username': 'rossviljoen', 'committer_name': 'Ross Viljoen', 'committer_email': 'ross@viljoen.co.uk', 'commit_date': datetime.datetime(2017, 6, 16, 22, 30, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0f27cb28467aea0d6d39824a887e29de32c56f56', 'committer_username': 'rossviljoen', 'committer_name': 'Ross Viljoen', 'committer_email': 'ross@viljoen.co.uk', 'commit_date': datetime.datetime(2017, 6, 16, 22, 30, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7a611bc691b15448a3a38415335b3b36c443b622', 'committer_username': 'rossviljoen', 'committer_name': 'Ross Viljoen', 'committer_email': 'ross@viljoen.co.uk', 'commit_date': datetime.datetime(2017, 6, 16, 22, 30, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2024468ffdb8efb8ba0887dd774e7c0adf60696f', 'committer_username': 'rossviljoen', 'committer_name': 'Ross Viljoen', 'committer_email': 'ross@viljoen.co.uk', 'commit_date': datetime.datetime(2017, 6, 16, 22, 30, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a8d203674b58f0db8f6e1efa31d229c3a74317ca', 'committer_username': 'rossviljoen', 'committer_name': 'Ross Viljoen', 'committer_email': 'ross@viljoen.co.uk', 'commit_date': datetime.datetime(2017, 6, 16, 22, 30, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ce6d51eaa2a372edc12ed3ad31a537d22f775384', 'committer_username': 'rossviljoen', 'committer_name': 'Ross Viljoen', 'committer_email': 'ross@viljoen.co.uk', 'commit_date': datetime.datetime(2017, 6, 16, 22, 30, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b5d7e4a8495492aa6e3480979eb2830a6135facd', 'committer_username': 'rossviljoen', 'committer_name': 'Ross Viljoen', 'committer_email': 'ross@viljoen.co.uk', 'commit_date': datetime.datetime(2017, 6, 16, 22, 30, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9702a2b6802add9a7be0ec2c0eaf1a6b0997f94f', 'committer_username': 'rossviljoen', 'committer_name': 'Ross Viljoen', 'committer_email': 'ross@viljoen.co.uk', 'commit_date': datetime.datetime(2017, 6, 16, 22, 30, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '436330b27d2910f53d0612e6697602ca1ea9ebf7', 'committer_username': 'rossviljoen', 'committer_name': 'Ross Viljoen', 'committer_email': 'ross@viljoen.co.uk', 'commit_date': datetime.datetime(2017, 6, 16, 22, 30, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '86f352c70088025354f56a3d3af123c0f1d749e6', 'committer_username': 'rossviljoen', 'committer_name': 'Ross Viljoen', 'committer_email': 'ross@viljoen.co.uk', 'commit_date': datetime.datetime(2017, 6, 16, 22, 30, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b83e84c257320f5a0b6480854b9d8e5967817db3', 'committer_username': 'rossviljoen', 'committer_name': 'Ross Viljoen', 'committer_email': 'ross@viljoen.co.uk', 'commit_date': datetime.datetime(2017, 6, 16, 22, 30, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'eb5d9cae4b0f3ab48ea253ca4dc5b28b045d7525', 'committer_username': 'rossviljoen', 'committer_name': 'Ross Viljoen', 'committer_email': 'ross@viljoen.co.uk', 'commit_date': datetime.datetime(2017, 6, 16, 22, 30, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '884084d785f722b7f77c75fe49b4762ee7b8c4a8', 'committer_username': 'rossviljoen', 'committer_name': 'Ross Viljoen', 'committer_email': 'ross@viljoen.co.uk', 'commit_date': datetime.datetime(2017, 6, 16, 22, 30, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4942f8475d556be6322afb366bb6fcb476572381', 'committer_username': 'rossviljoen', 'committer_name': 'Ross Viljoen', 'committer_email': 'ross@viljoen.co.uk', 'commit_date': datetime.datetime(2017, 6, 16, 22, 30, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1c646d6db8120543bc051358c9d92ac7f07a7189', 'committer_username': 'rossviljoen', 'committer_name': 'Ross Viljoen', 'committer_email': 'ross@viljoen.co.uk', 'commit_date': datetime.datetime(2017, 6, 16, 22, 30, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3788b9107c62944ec4c0e81633d15fd9ff02bb0b', 'committer_username': 'rossviljoen', 'committer_name': 'Ross Viljoen', 'committer_email': 'ross@viljoen.co.uk', 'commit_date': datetime.datetime(2017, 6, 16, 22, 30, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6ccfa205a8354ac5b81d205787c575fd599d2f79', 'committer_username': 'rossviljoen', 'committer_name': 'Ross Viljoen', 'committer_email': 'ross@viljoen.co.uk', 'commit_date': datetime.datetime(2017, 6, 16, 22, 30, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '19efc32861c7819c2941b0d121631d48bc512a7e', 'committer_username': 'rossviljoen', 'committer_name': 'Ross Viljoen', 'committer_email': 'ross@viljoen.co.uk', 'commit_date': datetime.datetime(2017, 6, 16, 22, 30, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '541e03659ae8529910b14d8f4ac9d962f015b571', 'committer_username': 'rossviljoen', 'committer_name': 'Ross Viljoen', 'committer_email': 'ross@viljoen.co.uk', 'commit_date': datetime.datetime(2017, 6, 16, 22, 30, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '979ab2dbd61862afc32373417a5fee1fd58924c9', 'committer_username': 'rossviljoen', 'committer_name': 'Ross Viljoen', 'committer_email': 'ross@viljoen.co.uk', 'commit_date': datetime.datetime(2017, 6, 16, 22, 30, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'abf1a9d95fcfc6de5bf15867eebeb9f2e343916d', 'committer_username': 'rossviljoen', 'committer_name': 'Ross Viljoen', 'committer_email': 'ross@viljoen.co.uk', 'commit_date': datetime.datetime(2017, 6, 16, 22, 30, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '037e9a6ec783ba30a142ea873d2b707b8f855217', 'committer_username': 'rossviljoen', 'committer_name': 'Ross Viljoen', 'committer_email': 'ross@viljoen.co.uk', 'commit_date': datetime.datetime(2017, 6, 16, 22, 30, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2d06bf1f682215ba7b3c830ee7cde2c36154a71b', 'committer_username': 'rossviljoen', 'committer_name': 'Ross Viljoen', 'committer_email': 'ross@viljoen.co.uk', 'commit_date': datetime.datetime(2017, 6, 16, 22, 30, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5154ec54b8f43f64d58646695cdc5a8f786733bc', 'committer_username': 'rossviljoen', 'committer_name': 'Ross Viljoen', 'committer_email': 'ross@viljoen.co.uk', 'commit_date': datetime.datetime(2017, 6, 16, 22, 30, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '61dbf74ebbf10044a888ae4ef1d0f0f4f96bb80d', 'committer_username': 'rossviljoen', 'committer_name': 'Ross Viljoen', 'committer_email': 'ross@viljoen.co.uk', 'commit_date': datetime.datetime(2017, 6, 16, 22, 30, 57, tzinfo=datetime.timezone.utc)}]",Ross Viljoen,29493846,ross@viljoen.co.uk,User,,17,,24,3
687101522,A Flux model,"Adds a high level API for a model which can easily be used with Flux (although doesn't add a dependency on Flux itself).

Examples have been updated to use the model.

It should also be straightforward to adapt the model to support something like [ParameterHandling.jl](https://github.com/invenia/ParameterHandling.jl) for use with general optimisers - this will probably be left to a future PR though.",False,10,https://api.github.com/repos/JuliaGaussianProcesses/ApproximateGPs.jl/pulls/10,https://github.com/JuliaGaussianProcesses/ApproximateGPs.jl/pull/10,closed,245,313,11,25,2,22,0,0,[],2021-07-10 01:01:53+00:00,2022-02-27 03:31:23+00:00,20053770.0,"232 days, 2:29:30","[{'comment_id': 669916419, 'comment_body': 'As a general formatting rule, there should be no spaces in `Union`', 'comment_created': datetime.datetime(2021, 7, 14, 20, 5, 35, tzinfo=datetime.timezone.utc), 'commenter': 'theogf', 'type': 'User'}, {'comment_id': 669918057, 'comment_body': '```suggestion\r\nif VERSION < v""1.7""\r\n    LinearAlgebra.Cholesky(L::LowerTriangular{T}) where {T} = Cholesky{T,typeof(L.data)}(L.data, \'L\', 0)\r\n    LinearAlgebra.Cholesky(U::UpperTriangular{T}) where {T} = Cholesky{T,typeof(U.data)}(U.data, \'U\', 0)\r\nend\r\n```', 'comment_created': datetime.datetime(2021, 7, 14, 20, 8, 24, tzinfo=datetime.timezone.utc), 'commenter': 'theogf', 'type': 'User'}, {'comment_id': 669919846, 'comment_body': 'we could define `vfe = - elbo` :D (VFE is the Variational Free Energy which is exactly the negative elbo)', 'comment_created': datetime.datetime(2021, 7, 14, 20, 11, 18, tzinfo=datetime.timezone.utc), 'commenter': 'theogf', 'type': 'User'}, {'comment_id': 669920231, 'comment_body': 'Should we add a keyword argument to enforce the eltype and type of \\mu and \\Sigma?', 'comment_created': datetime.datetime(2021, 7, 14, 20, 11, 59, tzinfo=datetime.timezone.utc), 'commenter': 'theogf', 'type': 'User'}, {'comment_id': 669989009, 'comment_body': ""I added an eltype parameter, but I can't think of a reason why you wouldn't want to use `Vector` / `Matrix`, so maybe a type parameter isn't needed?"", 'comment_created': datetime.datetime(2021, 7, 14, 22, 11, 36, tzinfo=datetime.timezone.utc), 'commenter': 'rossviljoen', 'type': 'User'}, {'comment_id': 669990010, 'comment_body': 'do you mean rename `loss` to `vfe`?', 'comment_created': datetime.datetime(2021, 7, 14, 22, 13, 55, tzinfo=datetime.timezone.utc), 'commenter': 'rossviljoen', 'type': 'User'}, {'comment_id': 671294160, 'comment_body': ':+1: ', 'comment_created': datetime.datetime(2021, 7, 16, 14, 21, 45, tzinfo=datetime.timezone.utc), 'commenter': 'st--', 'type': 'User'}, {'comment_id': 671301250, 'comment_body': 'Well in the crazy case where someone would like to use GPUs, one would need pass CuArrays but I guess they would just have to make the effort of passing their own variational parameters.', 'comment_created': datetime.datetime(2021, 7, 16, 14, 31, 2, tzinfo=datetime.timezone.utc), 'commenter': 'theogf', 'type': 'User'}, {'comment_id': 671302268, 'comment_body': ""I meant more simply to have an alias:\r\n```\r\nvfe(args...; kwargs...) = -elbo(args...; kwargs...)\r\n```\r\nbut maybe @st-- and @willtebbutt think it's not necessary"", 'comment_created': datetime.datetime(2021, 7, 16, 14, 32, 22, tzinfo=datetime.timezone.utc), 'commenter': 'theogf', 'type': 'User'}, {'comment_id': 681330416, 'comment_body': ""Since it's a functor, isn't it easiest to just use `Flux.gpu` for that after it's initialised?"", 'comment_created': datetime.datetime(2021, 8, 2, 23, 30, 37, tzinfo=datetime.timezone.utc), 'commenter': 'rossviljoen', 'type': 'User'}, {'comment_id': 688144280, 'comment_body': '**[JuliaFormatter]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br>\n```suggestion\n    likelihood=BernoulliLikelihood(),\n```\n', 'comment_created': datetime.datetime(2021, 8, 12, 23, 16, 58, tzinfo=datetime.timezone.utc), 'commenter': 'github-actions[bot]', 'type': 'Bot'}, {'comment_id': 688144281, 'comment_body': '**[JuliaFormatter]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br>\n```suggestion\nplot(x_plot, post_y_samples; seriescolor=""green"", linealpha=0.2, label="""")\n```\n', 'comment_created': datetime.datetime(2021, 8, 12, 23, 16, 58, tzinfo=datetime.timezone.utc), 'commenter': 'github-actions[bot]', 'type': 'Bot'}, {'comment_id': 688144282, 'comment_body': '**[JuliaFormatter]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br>\n```suggestion\ndata_loader = Flux.Data.DataLoader((x, y); batchsize=b)\n```\n', 'comment_created': datetime.datetime(2021, 8, 12, 23, 16, 58, tzinfo=datetime.timezone.utc), 'commenter': 'github-actions[bot]', 'type': 'Bot'}, {'comment_id': 688144283, 'comment_body': '**[JuliaFormatter]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br>\n```suggestion\n    (x, y) -> loss(model, x, y; n_data=N),\n```\n', 'comment_created': datetime.datetime(2021, 8, 12, 23, 16, 59, tzinfo=datetime.timezone.utc), 'commenter': 'github-actions[bot]', 'type': 'Bot'}, {'comment_id': 688144284, 'comment_body': '**[JuliaFormatter]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br>\n```suggestion\nusing AbstractGPs: AbstractGP, FiniteGP, LatentFiniteGP, ApproxPosteriorGP, At_A, diag_At_A\n```\n', 'comment_created': datetime.datetime(2021, 8, 12, 23, 16, 59, tzinfo=datetime.timezone.utc), 'commenter': 'github-actions[bot]', 'type': 'Bot'}, {'comment_id': 688144288, 'comment_body': '**[JuliaFormatter]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br>\n```suggestion\n```\n', 'comment_created': datetime.datetime(2021, 8, 12, 23, 16, 59, tzinfo=datetime.timezone.utc), 'commenter': 'github-actions[bot]', 'type': 'Bot'}, {'comment_id': 688144289, 'comment_body': '**[JuliaFormatter]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br>\n```suggestion\n@functor SVGPModel (k, m, A, z)\n```\n', 'comment_created': datetime.datetime(2021, 8, 12, 23, 16, 59, tzinfo=datetime.timezone.utc), 'commenter': 'github-actions[bot]', 'type': 'Bot'}, {'comment_id': 688144291, 'comment_body': '**[JuliaFormatter]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br>\n```suggestion\n    likelihood=GaussianLikelihood(jitter),\n```\n', 'comment_created': datetime.datetime(2021, 8, 12, 23, 16, 59, tzinfo=datetime.timezone.utc), 'commenter': 'github-actions[bot]', 'type': 'Bot'}, {'comment_id': 688144294, 'comment_body': '**[JuliaFormatter]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br>\n```suggestion\n    return SVGPModel(kernel_func, likelihood, jitter, kernel_params, m, A, inducing_inputs)\n```\n', 'comment_created': datetime.datetime(2021, 8, 12, 23, 17, tzinfo=datetime.timezone.utc), 'commenter': 'github-actions[bot]', 'type': 'Bot'}, {'comment_id': 688144298, 'comment_body': '**[JuliaFormatter]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br>\n```suggestion\n    q_eltype=Float64,\n```\n', 'comment_created': datetime.datetime(2021, 8, 12, 23, 17, tzinfo=datetime.timezone.utc), 'commenter': 'github-actions[bot]', 'type': 'Bot'}, {'comment_id': 688144302, 'comment_body': ""**[JuliaFormatter]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br>\n```suggestion\n    function LinearAlgebra.Cholesky(L::LowerTriangular{T}) where {T}\n        return Cholesky{T,typeof(L.data)}(L.data, 'L', 0)\n    end\n    function LinearAlgebra.Cholesky(U::UpperTriangular{T}) where {T}\n        return Cholesky{T,typeof(U.data)}(U.data, 'U', 0)\n    end\n```\n"", 'comment_created': datetime.datetime(2021, 8, 12, 23, 17, tzinfo=datetime.timezone.utc), 'commenter': 'github-actions[bot]', 'type': 'Bot'}, {'comment_id': 688144304, 'comment_body': '**[JuliaFormatter]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br>\n```suggestion\n        svgp = SVGPModel(\n            make_kernel,\n            copy(k_init),\n            copy(z);\n            jitter=jitter,\n            likelihood=GaussianLikelihood(lik_noise),\n        )\n```\n', 'comment_created': datetime.datetime(2021, 8, 12, 23, 17, tzinfo=datetime.timezone.utc), 'commenter': 'github-actions[bot]', 'type': 'Bot'}]","[{'commit_sha': '33d255ec2d555613be9a7ea3e5ab753c164cff77', 'committer_username': 'rossviljoen', 'committer_name': 'Ross Viljoen', 'committer_email': 'ross@viljoen.co.uk', 'commit_date': datetime.datetime(2017, 6, 16, 22, 30, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd48390b6cfa7da3c7d4bb80c9ae919344160296d', 'committer_username': 'rossviljoen', 'committer_name': 'Ross Viljoen', 'committer_email': 'ross@viljoen.co.uk', 'commit_date': datetime.datetime(2017, 6, 16, 22, 30, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd0b17441937f1898ab55b5f67779a34bf0b17497', 'committer_username': 'rossviljoen', 'committer_name': 'Ross Viljoen', 'committer_email': 'ross@viljoen.co.uk', 'commit_date': datetime.datetime(2017, 6, 16, 22, 30, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '944f4c0e2112351c9fbaa10a3b6841b5d11b9508', 'committer_username': 'rossviljoen', 'committer_name': 'Ross Viljoen', 'committer_email': 'ross@viljoen.co.uk', 'commit_date': datetime.datetime(2017, 6, 16, 22, 30, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0d4f3bf6b8d902c42db94e2f5caebfe182e5d203', 'committer_username': 'rossviljoen', 'committer_name': 'Ross Viljoen', 'committer_email': 'ross@viljoen.co.uk', 'commit_date': datetime.datetime(2017, 6, 16, 22, 30, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '873c1d8b5bcebf3086085fc39a4d93169f5a47d5', 'committer_username': 'rossviljoen', 'committer_name': 'Ross Viljoen', 'committer_email': 'ross@viljoen.co.uk', 'commit_date': datetime.datetime(2017, 6, 16, 22, 30, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '72058a00de0effed3edd40a5a68f913fb52949c9', 'committer_username': 'rossviljoen', 'committer_name': 'Ross Viljoen', 'committer_email': 'ross@viljoen.co.uk', 'commit_date': datetime.datetime(2017, 6, 16, 22, 30, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd615c15fb9ad63b6d8688f9979c0c73f25a21ecc', 'committer_username': 'rossviljoen', 'committer_name': 'Ross Viljoen', 'committer_email': 'ross@viljoen.co.uk', 'commit_date': datetime.datetime(2017, 6, 16, 22, 30, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '717a360e33a1500f84e8f2f7edf4db8323f146fe', 'committer_username': 'rossviljoen', 'committer_name': 'Ross Viljoen', 'committer_email': 'ross@viljoen.co.uk', 'commit_date': datetime.datetime(2017, 6, 16, 22, 30, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '27cb0eb47c06c7c16fc0737dbb288b87c9b92369', 'committer_username': 'rossviljoen', 'committer_name': 'Ross Viljoen', 'committer_email': 'ross@viljoen.co.uk', 'commit_date': datetime.datetime(2017, 6, 16, 22, 30, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '67bda0a4ce27c4b8fed614d642783fc9a54a11a2', 'committer_username': 'rossviljoen', 'committer_name': 'Ross Viljoen', 'committer_email': 'ross@viljoen.co.uk', 'commit_date': datetime.datetime(2017, 6, 16, 22, 30, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ec776ec1e90c6c0e948b2490f745e732f930c848', 'committer_username': 'rossviljoen', 'committer_name': 'Ross Viljoen', 'committer_email': 'ross@viljoen.co.uk', 'commit_date': datetime.datetime(2017, 6, 16, 22, 30, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0e1eb8a025e1266792ab717b3d0ee7d94b58cab0', 'committer_username': 'rossviljoen', 'committer_name': 'Ross Viljoen', 'committer_email': 'ross@viljoen.co.uk', 'commit_date': datetime.datetime(2017, 6, 16, 22, 30, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0dd4cff767b158d1852ab17fc47f6f43daf6aee7', 'committer_username': 'rossviljoen', 'committer_name': 'Ross Viljoen', 'committer_email': 'ross@viljoen.co.uk', 'commit_date': datetime.datetime(2017, 6, 16, 22, 30, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '600d3323a9d97b719c8d48a6f87304d4f9c04e7a', 'committer_username': 'rossviljoen', 'committer_name': 'Ross Viljoen', 'committer_email': 'ross@viljoen.co.uk', 'commit_date': datetime.datetime(2017, 6, 16, 22, 30, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4d88ae59fcbf4a4dc813f0b5d1ae0f049d739628', 'committer_username': 'rossviljoen', 'committer_name': 'Ross Viljoen', 'committer_email': 'ross@viljoen.co.uk', 'commit_date': datetime.datetime(2017, 6, 16, 22, 30, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f6bfc0cf5e399a2c0094f0e4784792d25ae167d1', 'committer_username': 'rossviljoen', 'committer_name': 'Ross Viljoen', 'committer_email': 'ross@viljoen.co.uk', 'commit_date': datetime.datetime(2017, 6, 16, 22, 30, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2d19d67b1863a7ecea56bb532a22c04cb7963358', 'committer_username': 'rossviljoen', 'committer_name': 'Ross Viljoen', 'committer_email': 'ross@viljoen.co.uk', 'commit_date': datetime.datetime(2017, 6, 16, 22, 30, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9f9d35e0d6364db0c0a0ebee40681824e4319a8c', 'committer_username': 'rossviljoen', 'committer_name': 'Ross Viljoen', 'committer_email': 'ross@viljoen.co.uk', 'commit_date': datetime.datetime(2017, 6, 16, 22, 30, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b85d440b208d636232b284e2324a9372bccab089', 'committer_username': 'rossviljoen', 'committer_name': 'Ross Viljoen', 'committer_email': 'ross@viljoen.co.uk', 'commit_date': datetime.datetime(2017, 6, 16, 22, 30, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '17c84f1f4d737df912639c7151a022321aa1e55d', 'committer_username': 'rossviljoen', 'committer_name': 'Ross Viljoen', 'committer_email': 'ross@viljoen.co.uk', 'commit_date': datetime.datetime(2017, 6, 16, 22, 30, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4c0c205b56d7c82a56cd410a79c7c3bd0ea71079', 'committer_username': 'rossviljoen', 'committer_name': 'Ross Viljoen', 'committer_email': 'ross@viljoen.co.uk', 'commit_date': datetime.datetime(2017, 6, 16, 22, 30, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dafb782122f35e4960a426bd06905786964019b4', 'committer_username': 'rossviljoen', 'committer_name': 'Ross Viljoen', 'committer_email': 'ross@viljoen.co.uk', 'commit_date': datetime.datetime(2017, 6, 16, 22, 30, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f3a83fbec9bf04c30c8d56cb2fd70a6b0b6aa5ca', 'committer_username': 'rossviljoen', 'committer_name': 'Ross Viljoen', 'committer_email': 'ross@viljoen.co.uk', 'commit_date': datetime.datetime(2017, 6, 16, 22, 30, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a0669199000af9e380d7f822628c9de8a7523249', 'committer_username': 'rossviljoen', 'committer_name': 'Ross Viljoen', 'committer_email': 'ross@viljoen.co.uk', 'commit_date': datetime.datetime(2017, 6, 16, 22, 30, 57, tzinfo=datetime.timezone.utc)}]",Ross Viljoen,29493846,ross@viljoen.co.uk,User,,17,,24,3
712281490,GPU Minimal Working Example,"**NOT INTENDED FOR MERGE**

This PR is meant to give an idea of what work is needed to allow AbstractGPs to run on GPU (although with no regard for performance). 

The main changes required are:
## In AbstractGPs
- `mean` functions need to return lazy Fill arrays for `ZeroMean` and `ConstMean` (should probably do this anyway?)
- Broadcasting over `Diagonal{<:Real,<:FillArrays.Fill}}` will produce an `Array`, not a `CuArray` (i.e. when computing `cov(fx) = cov(fx.f, fx.x) + fx.Σy`). I don't think there's an easy way to fix this in general, so either we don't use a lazy Fill array here - which is what I've implemented - or we define a custom `_add_broadcasted` function which overrides the default broadcasting logic.

## In KernelFunctions
- `Distances.jl` is not at all GPU compatible, so custom implementations of `pairwise` / `colwise` are needed (obviously, this should be done in `KernelFunctions`, but I've included it here to keep it in one place).
- https://github.com/JuliaGaussianProcesses/KernelFunctions.jl/issues/299

----
See also https://github.com/rossviljoen/SparseGPs.jl/issues/15",False,197,https://api.github.com/repos/JuliaGaussianProcesses/AbstractGPs.jl/pulls/197,https://github.com/JuliaGaussianProcesses/AbstractGPs.jl/pull/197,closed,1261,3,8,9,2,7,0,0,[],2021-08-13 11:23:14+00:00,2024-07-30 13:05:25+00:00,93490931.0,"1082 days, 1:42:11","[{'comment_id': 688440568, 'comment_body': '**[JuliaFormatter]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br>\n```suggestion\nfunction KernelFunctions.pairwise(\n    ::SqEuclidean, x::AbstractGPUArray{<:Real,2}, y::AbstractGPUArray{<:Real,2}, kwargs...\n)\n```\n', 'comment_created': datetime.datetime(2021, 8, 13, 11, 24, 37, tzinfo=datetime.timezone.utc), 'commenter': 'github-actions[bot]', 'type': 'Bot'}, {'comment_id': 688440569, 'comment_body': '**[JuliaFormatter]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br>\n```suggestion\nfunction KernelFunctions.pairwise(d::SqEuclidean, x::AbstractGPUArray{<:Real,2}, kwargs...)\n    return KernelFunctions.pairwise(d, x, x)\nend\n```\n', 'comment_created': datetime.datetime(2021, 8, 13, 11, 24, 37, tzinfo=datetime.timezone.utc), 'commenter': 'github-actions[bot]', 'type': 'Bot'}, {'comment_id': 688440571, 'comment_body': '**[JuliaFormatter]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br>\n```suggestion\nfunction KernelFunctions.pairwise(\n    ::Euclidean, x::AbstractGPUArray{<:Real,2}, y::AbstractGPUArray{<:Real,2}; kwargs...\n)\n    return .√KernelFunctions.pairwise(SqEuclidean(), x, y)\nend\nfunction KernelFunctions.pairwise(d::Euclidean, x::AbstractGPUArray{<:Real,2}; kwargs...)\n    return KernelFunctions.pairwise(d, x, x)\nend\n```\n', 'comment_created': datetime.datetime(2021, 8, 13, 11, 24, 37, tzinfo=datetime.timezone.utc), 'commenter': 'github-actions[bot]', 'type': 'Bot'}, {'comment_id': 688440572, 'comment_body': '**[JuliaFormatter]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br>\n```suggestion\nfunction KernelFunctions.pairwise(\n    ::Euclidean, x::AbstractGPUArray, y::AbstractGPUArray; kwargs...\n)\n```\n', 'comment_created': datetime.datetime(2021, 8, 13, 11, 24, 37, tzinfo=datetime.timezone.utc), 'commenter': 'github-actions[bot]', 'type': 'Bot'}, {'comment_id': 688440575, 'comment_body': '**[JuliaFormatter]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br>\n```suggestion\nfunction KernelFunctions.pairwise(d::Euclidean, x::AbstractGPUArray; kwargs...)\n    return KernelFunctions.pairwise(d, x, x)\nend\n```\n', 'comment_created': datetime.datetime(2021, 8, 13, 11, 24, 37, tzinfo=datetime.timezone.utc), 'commenter': 'github-actions[bot]', 'type': 'Bot'}, {'comment_id': 688440577, 'comment_body': '**[JuliaFormatter]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br>\n```suggestion\nfunction tr_Cf_invΣy(f::FiniteGP, Σy::Diagonal{<:Any,<:AbstractGPUArray}, chol_Σy::Cholesky)\n```\n', 'comment_created': datetime.datetime(2021, 8, 13, 11, 24, 38, tzinfo=datetime.timezone.utc), 'commenter': 'github-actions[bot]', 'type': 'Bot'}, {'comment_id': 688440579, 'comment_body': '**[JuliaFormatter]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br>\n```suggestion\nfunction _cholesky(X::Diagonal{<:Real,T}) where {T<:AbstractGPUArray}\n```\n', 'comment_created': datetime.datetime(2021, 8, 13, 11, 24, 38, tzinfo=datetime.timezone.utc), 'commenter': 'github-actions[bot]', 'type': 'Bot'}]","[{'commit_sha': '18b0891b1cc51265db826b0c0ebae4fc279e34c2', 'committer_username': 'rossviljoen', 'committer_name': 'Ross Viljoen', 'committer_email': 'ross@viljoen.co.uk', 'commit_date': datetime.datetime(2017, 6, 16, 22, 30, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fb37f575c15eb32bce09ef5a926c2ef25c744f66', 'committer_username': 'rossviljoen', 'committer_name': 'Ross Viljoen', 'committer_email': 'ross@viljoen.co.uk', 'commit_date': datetime.datetime(2017, 6, 16, 22, 30, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e241685b977edc4bcc78baf18e09948bab7c6dc4', 'committer_username': 'rossviljoen', 'committer_name': 'Ross Viljoen', 'committer_email': 'ross@viljoen.co.uk', 'commit_date': datetime.datetime(2017, 6, 16, 22, 30, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd59a9b960338a2c3edd55bdecadeb3ae0648c662', 'committer_username': 'rossviljoen', 'committer_name': 'Ross Viljoen', 'committer_email': 'ross@viljoen.co.uk', 'commit_date': datetime.datetime(2017, 6, 16, 22, 30, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f7d074ef177dcdc7fc7d4621405fbf0b25900fd7', 'committer_username': 'rossviljoen', 'committer_name': 'Ross Viljoen', 'committer_email': 'ross@viljoen.co.uk', 'commit_date': datetime.datetime(2017, 6, 16, 22, 30, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '08261cf9f213eff7d309afb761b1bfd9fa436d59', 'committer_username': 'rossviljoen', 'committer_name': 'Ross Viljoen', 'committer_email': 'ross@viljoen.co.uk', 'commit_date': datetime.datetime(2017, 6, 16, 22, 30, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd2037a5130b942c8a788d5bc2b32b52ee88a4d43', 'committer_username': 'rossviljoen', 'committer_name': 'Ross Viljoen', 'committer_email': 'ross@viljoen.co.uk', 'commit_date': datetime.datetime(2017, 6, 16, 22, 30, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ffa7fc552a2932564f524a2cdfe2f86a1856f4cd', 'committer_username': 'rossviljoen', 'committer_name': 'Ross Viljoen', 'committer_email': 'ross@viljoen.co.uk', 'commit_date': datetime.datetime(2017, 6, 16, 22, 30, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '945ae4390c8c3448683d09c986dd7036425d5d0d', 'committer_username': 'rossviljoen', 'committer_name': 'Ross Viljoen', 'committer_email': 'ross@viljoen.co.uk', 'commit_date': datetime.datetime(2017, 6, 16, 22, 30, 57, tzinfo=datetime.timezone.utc)}]",Ross Viljoen,29493846,ross@viljoen.co.uk,User,,17,,24,3
713750339,Fix copying Diagonal matrices,"Currently, attempting to copy a `Diagonal{<:AbstractGPUArray}` throws an error as it hits the generic [`copyto!`](https://github.com/JuliaGPU/GPUArrays.jl/blob/e1acd425854cba8de622d3757da9f9905a555771/src/host/abstractarray.jl#L95) and tries to assign to off-diagonal elements:

```
using LinearAlgebra
using CUDA

x = CUDA.ones(5, 5)
copy(Diagonal(x))  # Errors
```",True,374,https://api.github.com/repos/JuliaGPU/GPUArrays.jl/pulls/374,https://github.com/JuliaGPU/GPUArrays.jl/pull/374,closed,14,0,2,2,0,0,0,0,[],2021-08-16 21:14:06+00:00,2021-08-17 08:06:42+00:00,39156.0,10:52:36,[],"[{'commit_sha': '564dba27cb70bee07f3d92419658d146f0c4ce21', 'committer_username': 'rossviljoen', 'committer_name': 'Ross Viljoen', 'committer_email': 'ross@viljoen.co.uk', 'commit_date': datetime.datetime(2017, 6, 16, 22, 30, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1f7eaba822f1dfd3e43081a8f0ef80369722eaf9', 'committer_username': 'rossviljoen', 'committer_name': 'Ross Viljoen', 'committer_email': 'ross@viljoen.co.uk', 'commit_date': datetime.datetime(2017, 6, 16, 22, 30, 57, tzinfo=datetime.timezone.utc)}]",Ross Viljoen,29493846,ross@viljoen.co.uk,User,,17,,24,3
703695285,Refactor Approximate Inference,"Implements the idea in #193 (see also https://github.com/rossviljoen/SparseGPs.jl/issues/13)

Essentially, this replaces the current method for constructing approximate posteriors:
```approx_posterior(VFE(), fx, y, fz)```
with
```posterior(VFE(z), fx, y)```

(n.b. dropping the `approx_` prefix - should we keep it?)

The reasoning is that using this style of approximation generalises more easily to cases where you need more complex approximations such as in [SparseGPs](https://github.com/rossviljoen/SparseGPs.jl) - e.g. using a variational distribution `q`: ```posterior(SVGP(z, q), fx, y)```. 

Furthermore, it only requires passing the inducing inputs `z` instead of a full `fz isa FiniteGP` which enforces the fact that `fz` and `fx` are constructed from the same underlying process `fx.f`. 

It also moves the elbo and dtc from `finite_gp.jl` to `approx_posterior_gp.jl` and redefines them from:

```elbo(fx, y, fz)```
to
```elbo(VFE(z), fx, y)```

---

As @willtebbutt mentioned in #193 - it would be useful to define other functions like `logpdf` and `rand` on the approximation:

```
posterior(approximation, fx, y)
logpdf(approximation, fx, y)
rand(rng, approximation, fx)
```",True,194,https://api.github.com/repos/JuliaGaussianProcesses/AbstractGPs.jl/pulls/194,https://github.com/JuliaGaussianProcesses/AbstractGPs.jl/pull/194,closed,359,291,14,27,14,17,0,0,[],2021-08-04 16:26:07+00:00,2021-08-20 16:40:25+00:00,1383258.0,"16 days, 0:14:18","[{'comment_id': 684791490, 'comment_body': '```suggestion\r\nVFE(z::AbstractVector; jitter=default_jitter) = VFE(z, jitter)\r\n```', 'comment_created': datetime.datetime(2021, 8, 8, 15, 30, 9, tzinfo=datetime.timezone.utc), 'commenter': 'willtebbutt', 'type': 'User'}, {'comment_id': 684791667, 'comment_body': '```suggestion\r\n    VFE(z::AbstractVector; jitter=default_jitter)\r\n```\r\nMight be an idea to also discuss the `jitter` term in the docstring.', 'comment_created': datetime.datetime(2021, 8, 8, 15, 31, 30, tzinfo=datetime.timezone.utc), 'commenter': 'willtebbutt', 'type': 'User'}, {'comment_id': 686261164, 'comment_body': 'good catch! should we not run code snippets as some kind of doctests to ensure they at least _run_?', 'comment_created': datetime.datetime(2021, 8, 10, 19, 28, 15, tzinfo=datetime.timezone.utc), 'commenter': 'st--', 'type': 'User'}, {'comment_id': 686265786, 'comment_body': '```suggestion\r\nset of pseudo-points.\r\n```\r\nor\r\n```suggestion\r\npseudo-points.\r\n```', 'comment_created': datetime.datetime(2021, 8, 10, 19, 35, 11, tzinfo=datetime.timezone.utc), 'commenter': 'st--', 'type': 'User'}, {'comment_id': 686266141, 'comment_body': '```suggestion\r\n    function update_posterior(\r\n```', 'comment_created': datetime.datetime(2021, 8, 10, 19, 35, 44, tzinfo=datetime.timezone.utc), 'commenter': 'st--', 'type': 'User'}, {'comment_id': 686267529, 'comment_body': 'How about the more explicit\r\n```suggestion\r\n    _dtc, _ = _compute_intermediates(fx, y, fx.f(v.z, v.jitter))\r\n    return _dtc\r\n```\r\n?', 'comment_created': datetime.datetime(2021, 8, 10, 19, 37, 54, tzinfo=datetime.timezone.utc), 'commenter': 'st--', 'type': 'User'}, {'comment_id': 686267975, 'comment_body': ""I really like this change of `elbo` now depending on a specific type as it's quite a general concept and this makes it easy to extend it to other approximations:)"", 'comment_created': datetime.datetime(2021, 8, 10, 19, 38, 34, tzinfo=datetime.timezone.utc), 'commenter': 'st--', 'type': 'User'}, {'comment_id': 686269444, 'comment_body': 'Is the cast to `typeof(tmp)` necessary?\r\nAlso, is there a reason to use `log(2π)` here instead of the `log2π` constant? (that was already providing us a bit of grief with StatsFuns...)', 'comment_created': datetime.datetime(2021, 8, 10, 19, 40, 49, tzinfo=datetime.timezone.utc), 'commenter': 'st--', 'type': 'User'}, {'comment_id': 686269983, 'comment_body': '`y` is an AbstractVector so how about\r\n```suggestion\r\n    @assert length(fx) == length(y)\r\n```\r\n?', 'comment_created': datetime.datetime(2021, 8, 10, 19, 41, 41, tzinfo=datetime.timezone.utc), 'commenter': 'st--', 'type': 'User'}, {'comment_id': 686272257, 'comment_body': ""Ah I might've confused this with the KernelFunctions repo. But the question still stands (probably at @willtebbutt) and depending on the answer, maybe we should depend on IrrationalConstants here as well then?"", 'comment_created': datetime.datetime(2021, 8, 10, 19, 45, 39, tzinfo=datetime.timezone.utc), 'commenter': 'st--', 'type': 'User'}, {'comment_id': 686378463, 'comment_body': 'good idea - could just run them as is and hide the output?', 'comment_created': datetime.datetime(2021, 8, 10, 23, 6, 13, tzinfo=datetime.timezone.utc), 'commenter': 'rossviljoen', 'type': 'User'}, {'comment_id': 686686715, 'comment_body': ""Happy for this to change to use IrrationalConstants -- the reason to cast it was to ensure that e.g. `Float32`s don't accidentally get promoted to `Float64`s, so as long as we maintain that functionality, I don't particularly mind. (I'm not sure we actually test that that works though...)"", 'comment_created': datetime.datetime(2021, 8, 11, 10, 4, 53, tzinfo=datetime.timezone.utc), 'commenter': 'willtebbutt', 'type': 'User'}, {'comment_id': 686731530, 'comment_body': ""Yeah that makes sense that you don't want to accidentally promote due to internal constants. I think\r\n```suggestion\r\n    _dtc = -(length(y) * log2π) + tmp) / 2\r\n```\r\nwould be rather more pleasant to read, and KernelFunctions already depends on IrrationalConstants so it's not adding overhead:)"", 'comment_created': datetime.datetime(2021, 8, 11, 11, 13, 42, tzinfo=datetime.timezone.utc), 'commenter': 'st--', 'type': 'User'}, {'comment_id': 686732094, 'comment_body': '@rossviljoen should we just turn this into an issue so that we can get this PR merged?', 'comment_created': datetime.datetime(2021, 8, 11, 11, 14, 39, tzinfo=datetime.timezone.utc), 'commenter': 'st--', 'type': 'User'}, {'comment_id': 686912279, 'comment_body': ""changed it to use IrrationalConstants - I think you still need the cast though because `length(y) * log2π isa Float64` unless there's some way around that?"", 'comment_created': datetime.datetime(2021, 8, 11, 14, 55, 36, tzinfo=datetime.timezone.utc), 'commenter': 'rossviljoen', 'type': 'User'}, {'comment_id': 686938952, 'comment_body': '#195', 'comment_created': datetime.datetime(2021, 8, 11, 15, 25, 35, tzinfo=datetime.timezone.utc), 'commenter': 'rossviljoen', 'type': 'User'}, {'comment_id': 692162462, 'comment_body': ""```suggestion\r\n    @assert vfe.fz.f === fx.f\r\n```\r\nCorrect me if I'm wrong on this, but I suspect that we want to ensure that it's _literally_ the same object."", 'comment_created': datetime.datetime(2021, 8, 19, 14, 26, 14, tzinfo=datetime.timezone.utc), 'commenter': 'willtebbutt', 'type': 'User'}]","[{'commit_sha': '35c9dbe2f4e8d5895f29bea4dd52ad41311dbbed', 'committer_username': 'rossviljoen', 'committer_name': 'Ross Viljoen', 'committer_email': 'ross@viljoen.co.uk', 'commit_date': datetime.datetime(2017, 6, 16, 22, 30, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5dae447c9a3b247d3e4efd9038374427afdff1f7', 'committer_username': 'rossviljoen', 'committer_name': 'Ross Viljoen', 'committer_email': 'ross@viljoen.co.uk', 'commit_date': datetime.datetime(2017, 6, 16, 22, 30, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '90899d4e0ea92bb2beb36f185e5e397c59c725d6', 'committer_username': 'rossviljoen', 'committer_name': 'Ross Viljoen', 'committer_email': 'ross@viljoen.co.uk', 'commit_date': datetime.datetime(2017, 6, 16, 22, 30, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0b77d9406a1e6619664f8feee74b526bbf3a5991', 'committer_username': 'rossviljoen', 'committer_name': 'Ross Viljoen', 'committer_email': 'ross@viljoen.co.uk', 'commit_date': datetime.datetime(2017, 6, 16, 22, 30, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ece42b118925e298467b4c5084ce66dae68f45c2', 'committer_username': 'rossviljoen', 'committer_name': 'Ross Viljoen', 'committer_email': 'ross@viljoen.co.uk', 'commit_date': datetime.datetime(2017, 6, 16, 22, 30, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fec09917419cac0fe4b6940d84c09272c501947f', 'committer_username': 'rossviljoen', 'committer_name': 'Ross Viljoen', 'committer_email': 'ross@viljoen.co.uk', 'commit_date': datetime.datetime(2017, 6, 16, 22, 30, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cac1f57deacdb31a0972903a56d4096fef13f1d9', 'committer_username': 'rossviljoen', 'committer_name': 'Ross Viljoen', 'committer_email': 'ross@viljoen.co.uk', 'commit_date': datetime.datetime(2017, 6, 16, 22, 30, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e448a032fb5a51b5dac01c02c21cc7fa2cb9575e', 'committer_username': 'rossviljoen', 'committer_name': 'Ross Viljoen', 'committer_email': 'ross@viljoen.co.uk', 'commit_date': datetime.datetime(2017, 6, 16, 22, 30, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9c074ef376b28c4bd739d8bd55bffe4831445b46', 'committer_username': 'rossviljoen', 'committer_name': 'Ross Viljoen', 'committer_email': 'ross@viljoen.co.uk', 'commit_date': datetime.datetime(2017, 6, 16, 22, 30, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '74f127a4539d3f0277c89a60692049e497dc7f39', 'committer_username': 'rossviljoen', 'committer_name': 'Ross Viljoen', 'committer_email': 'ross@viljoen.co.uk', 'commit_date': datetime.datetime(2017, 6, 16, 22, 30, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f2c1592c0d670484c2bf61a9038b330e8c94646c', 'committer_username': 'rossviljoen', 'committer_name': 'Ross Viljoen', 'committer_email': 'ross@viljoen.co.uk', 'commit_date': datetime.datetime(2017, 6, 16, 22, 30, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '119eaa656955828fbeead416d9da82a2f333500c', 'committer_username': 'rossviljoen', 'committer_name': 'Ross Viljoen', 'committer_email': 'ross@viljoen.co.uk', 'commit_date': datetime.datetime(2017, 6, 16, 22, 30, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '331a2843f577a39de1c84ef0d3cd67051e02bbd6', 'committer_username': 'rossviljoen', 'committer_name': 'Ross Viljoen', 'committer_email': 'ross@viljoen.co.uk', 'commit_date': datetime.datetime(2017, 6, 16, 22, 30, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0c79cba8285ffc847bbd3aaa24c8ff9f871fc810', 'committer_username': 'rossviljoen', 'committer_name': 'Ross Viljoen', 'committer_email': 'ross@viljoen.co.uk', 'commit_date': datetime.datetime(2017, 6, 16, 22, 30, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c47a874a3323efc95c036bf452c61e8b3aa62643', 'committer_username': 'rossviljoen', 'committer_name': 'Ross Viljoen', 'committer_email': 'ross@viljoen.co.uk', 'commit_date': datetime.datetime(2017, 6, 16, 22, 30, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f5e60dd200c4ccac39c28b3b180205c26d39d14b', 'committer_username': 'rossviljoen', 'committer_name': 'Ross Viljoen', 'committer_email': 'ross@viljoen.co.uk', 'commit_date': datetime.datetime(2017, 6, 16, 22, 30, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '78a26a27af04a94d4f58fcdb92318dba687caa8f', 'committer_username': 'rossviljoen', 'committer_name': 'Ross Viljoen', 'committer_email': 'ross@viljoen.co.uk', 'commit_date': datetime.datetime(2017, 6, 16, 22, 30, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '87bcb041e6dfc0c7a3b4d15848799199216ac923', 'committer_username': 'rossviljoen', 'committer_name': 'Ross Viljoen', 'committer_email': 'ross@viljoen.co.uk', 'commit_date': datetime.datetime(2017, 6, 16, 22, 30, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1a404a6818cd4c8bda1cb044cb34420c4e01306a', 'committer_username': 'rossviljoen', 'committer_name': 'Ross Viljoen', 'committer_email': 'ross@viljoen.co.uk', 'commit_date': datetime.datetime(2017, 6, 16, 22, 30, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e07178a775ab4aedf802e211fe5afdfc15eb87e2', 'committer_username': 'rossviljoen', 'committer_name': 'Ross Viljoen', 'committer_email': 'ross@viljoen.co.uk', 'commit_date': datetime.datetime(2017, 6, 16, 22, 30, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'acfc2538eda1edcd9c7ce68bfedefffa1a05987e', 'committer_username': 'rossviljoen', 'committer_name': 'Ross Viljoen', 'committer_email': 'ross@viljoen.co.uk', 'commit_date': datetime.datetime(2017, 6, 16, 22, 30, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5867138f52e123c0f12056c2719465eebe0d402d', 'committer_username': 'rossviljoen', 'committer_name': 'Ross Viljoen', 'committer_email': 'ross@viljoen.co.uk', 'commit_date': datetime.datetime(2017, 6, 16, 22, 30, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e026ee6313b7cb663c831d54e3ba1a9cb6e819b8', 'committer_username': 'rossviljoen', 'committer_name': 'Ross Viljoen', 'committer_email': 'ross@viljoen.co.uk', 'commit_date': datetime.datetime(2017, 6, 16, 22, 30, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd035b381279a8c2d211505a80997c1b1f99c4c79', 'committer_username': 'rossviljoen', 'committer_name': 'Ross Viljoen', 'committer_email': 'ross@viljoen.co.uk', 'commit_date': datetime.datetime(2017, 6, 16, 22, 30, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '26095b29576cf86e951cd6d059287a116fcc25d2', 'committer_username': 'rossviljoen', 'committer_name': 'Ross Viljoen', 'committer_email': 'ross@viljoen.co.uk', 'commit_date': datetime.datetime(2017, 6, 16, 22, 30, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '28fdf00ca4830d300c5ab5401b9ded5e55a8789e', 'committer_username': 'rossviljoen', 'committer_name': 'Ross Viljoen', 'committer_email': 'ross@viljoen.co.uk', 'commit_date': datetime.datetime(2017, 6, 16, 22, 30, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cf23c30c1e34b2c9855b52a9eb491245a0140c02', 'committer_username': 'rossviljoen', 'committer_name': 'Ross Viljoen', 'committer_email': 'ross@viljoen.co.uk', 'commit_date': datetime.datetime(2017, 6, 16, 22, 30, 57, tzinfo=datetime.timezone.utc)}]",Ross Viljoen,29493846,ross@viljoen.co.uk,User,,17,,24,3
694303560,Add Gamma and Exponential likelihoods,This just adds a very simple `GammaLikelihood` and `ExponentialLikelihood`,True,30,https://api.github.com/repos/JuliaGaussianProcesses/GPLikelihoods.jl/pulls/30,https://github.com/JuliaGaussianProcesses/GPLikelihoods.jl/pull/30,closed,58,9,6,2,2,3,0,0,[],2021-07-21 11:52:36+00:00,2021-07-21 13:19:42+00:00,5226.0,1:27:06,"[{'comment_id': 673934114, 'comment_body': 'Just realised we\'re doing these wrong (they won\'t work on Windows).\r\nCould you replace these and the above with the appropriate `joinpath`, i.e.\r\n```suggestion\r\ninclude(joinpath(""likelihoods"", ""gamma.jl""))\r\ninclude(joinpath(""likelihoods"", ""exponential.jl""))\r\n```', 'comment_created': datetime.datetime(2021, 7, 21, 12, 38, 54, tzinfo=datetime.timezone.utc), 'commenter': 'willtebbutt', 'type': 'User'}, {'comment_id': 673934854, 'comment_body': 'Same here regarding joinpath.', 'comment_created': datetime.datetime(2021, 7, 21, 12, 40, 3, tzinfo=datetime.timezone.utc), 'commenter': 'willtebbutt', 'type': 'User'}, {'comment_id': 673937033, 'comment_body': ""Scratch that -- our CI is passing on Windows so apparently it works fine on Windows. I'm confused. Either way, `joinpath` is probably more idiomatic."", 'comment_created': datetime.datetime(2021, 7, 21, 12, 43, 8, tzinfo=datetime.timezone.utc), 'commenter': 'willtebbutt', 'type': 'User'}]","[{'commit_sha': '306a7c12eb5a2d357db92de794a8175c0db3b05b', 'committer_username': 'rossviljoen', 'committer_name': 'Ross Viljoen', 'committer_email': 'ross@viljoen.co.uk', 'commit_date': datetime.datetime(2017, 6, 16, 22, 30, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ff89e7f881c35c741349986531ddd1748543b6da', 'committer_username': 'rossviljoen', 'committer_name': 'Ross Viljoen', 'committer_email': 'ross@viljoen.co.uk', 'commit_date': datetime.datetime(2017, 6, 16, 22, 30, 57, tzinfo=datetime.timezone.utc)}]",Ross Viljoen,29493846,ross@viljoen.co.uk,User,,17,,24,3

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
378457747,ApproximateGPs.jl,JuliaGaussianProcesses/ApproximateGPs.jl,Julia,6,35,7,10,215,26,15,9,"[{'id': 924655654, 'number': 130, 'closed': datetime.datetime(2024, 7, 30, 13, 5, 16, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 4, 30, 13, 6, 54, tzinfo=datetime.timezone.utc), 'time_taken': 71020702.0, 'time_delta': '821 days, 23:58:22', 'additions': 11, 'deletions': 12, 'state': 'closed'}, {'id': 877791258, 'number': 113, 'closed': datetime.datetime(2022, 3, 11, 20, 44, 15, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 3, 11, 20, 24, 7, tzinfo=datetime.timezone.utc), 'time_taken': 1208.0, 'time_delta': '0:20:08', 'additions': 3, 'deletions': 3, 'state': 'closed'}, {'id': 865567017, 'number': 112, 'closed': datetime.datetime(2024, 7, 30, 13, 5, 21, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 2, 27, 3, 28, 58, tzinfo=datetime.timezone.utc), 'time_taken': 76412183.0, 'time_delta': '884 days, 9:36:23', 'additions': 290, 'deletions': 31, 'state': 'closed'}, {'id': 777921526, 'number': 79, 'closed': datetime.datetime(2021, 11, 10, 20, 54, 27, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 11, 10, 19, 17, 8, tzinfo=datetime.timezone.utc), 'time_taken': 5839.0, 'time_delta': '1:37:19', 'additions': 34, 'deletions': 1, 'state': 'closed'}, {'id': 777061012, 'number': 78, 'closed': datetime.datetime(2021, 11, 10, 18, 32, 3, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 11, 9, 22, 51, 17, tzinfo=datetime.timezone.utc), 'time_taken': 70846.0, 'time_delta': '19:40:46', 'additions': 442, 'deletions': 419, 'state': 'closed'}, {'id': 776491933, 'number': 74, 'closed': datetime.datetime(2021, 11, 9, 12, 54, 10, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 11, 9, 12, 25, 25, tzinfo=datetime.timezone.utc), 'time_taken': 1725.0, 'time_delta': '0:28:45', 'additions': 26, 'deletions': 0, 'state': 'closed'}, {'id': 773772665, 'number': 70, 'closed': datetime.datetime(2021, 11, 5, 13, 30, 10, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 11, 4, 23, 14, tzinfo=datetime.timezone.utc), 'time_taken': 51370.0, 'time_delta': '14:16:10', 'additions': 507, 'deletions': 565, 'state': 'closed'}, {'id': 754832331, 'number': 65, 'closed': datetime.datetime(2022, 2, 27, 3, 30, 28, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 10, 11, 1, 27, 6, tzinfo=datetime.timezone.utc), 'time_taken': 12017002.0, 'time_delta': '139 days, 2:03:22', 'additions': 157, 'deletions': 3, 'state': 'closed'}, {'id': 746649514, 'number': 63, 'closed': datetime.datetime(2021, 9, 30, 13, 27, 40, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 9, 30, 12, 27, 16, tzinfo=datetime.timezone.utc), 'time_taken': 3624.0, 'time_delta': '1:00:24', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 733766061, 'number': 52, 'closed': datetime.datetime(2021, 9, 14, 15, 35, 43, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 9, 14, 14, 58, 32, tzinfo=datetime.timezone.utc), 'time_taken': 2231.0, 'time_delta': '0:37:11', 'additions': 15, 'deletions': 0, 'state': 'closed'}, {'id': 726243084, 'number': 44, 'closed': datetime.datetime(2021, 9, 3, 11, 15, 31, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 9, 2, 20, 4, 38, tzinfo=datetime.timezone.utc), 'time_taken': 54653.0, 'time_delta': '15:10:53', 'additions': 228, 'deletions': 199, 'state': 'closed'}, {'id': 720816312, 'number': 40, 'closed': datetime.datetime(2021, 8, 31, 17, 29, 23, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 26, 20, 18, 27, tzinfo=datetime.timezone.utc), 'time_taken': 421856.0, 'time_delta': '4 days, 21:10:56', 'additions': 27, 'deletions': 52, 'state': 'closed'}, {'id': 717010564, 'number': 33, 'closed': datetime.datetime(2021, 8, 25, 21, 32, 15, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 20, 21, 35, 22, tzinfo=datetime.timezone.utc), 'time_taken': 431813.0, 'time_delta': '4 days, 23:56:53', 'additions': 97, 'deletions': 109, 'state': 'closed'}, {'id': 714603395, 'number': 32, 'closed': datetime.datetime(2021, 8, 26, 15, 44, 58, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 17, 22, 21, 30, tzinfo=datetime.timezone.utc), 'time_taken': 753808.0, 'time_delta': '8 days, 17:23:28', 'additions': 3534, 'deletions': 400, 'state': 'closed'}, {'id': 714547481, 'number': 31, 'closed': datetime.datetime(2021, 8, 25, 17, 6, 37, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 17, 20, 33, 9, tzinfo=datetime.timezone.utc), 'time_taken': 678808.0, 'time_delta': '7 days, 20:33:28', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 709169216, 'number': 30, 'closed': datetime.datetime(2021, 8, 13, 9, 45, 13, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 11, 15, 45, 56, tzinfo=datetime.timezone.utc), 'time_taken': 151157.0, 'time_delta': '1 day, 17:59:17', 'additions': 15, 'deletions': 0, 'state': 'closed'}, {'id': 702696883, 'number': 16, 'closed': datetime.datetime(2021, 8, 9, 22, 14, 48, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 3, 22, 56, 8, tzinfo=datetime.timezone.utc), 'time_taken': 515920.0, 'time_delta': '5 days, 23:18:40', 'additions': 135, 'deletions': 2, 'state': 'closed'}, {'id': 687101522, 'number': 10, 'closed': datetime.datetime(2022, 2, 27, 3, 31, 23, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 10, 1, 1, 53, tzinfo=datetime.timezone.utc), 'time_taken': 20053770.0, 'time_delta': '232 days, 2:29:30', 'additions': 245, 'deletions': 313, 'state': 'closed'}, {'id': 687101296, 'number': 9, 'closed': datetime.datetime(2021, 7, 30, 21, 8, 1, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 10, 1, 0, 29, tzinfo=datetime.timezone.utc), 'time_taken': 1800452.0, 'time_delta': '20 days, 20:07:32', 'additions': 925, 'deletions': 0, 'state': 'closed'}, {'id': 683180064, 'number': 6, 'closed': datetime.datetime(2021, 7, 14, 12, 16, 23, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 4, 14, 5, 18, tzinfo=datetime.timezone.utc), 'time_taken': 857465.0, 'time_delta': '9 days, 22:11:05', 'additions': 162, 'deletions': 0, 'state': 'closed'}, {'id': 683169081, 'number': 5, 'closed': datetime.datetime(2021, 7, 4, 13, 53, 44, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 4, 12, 48, 18, tzinfo=datetime.timezone.utc), 'time_taken': 3926.0, 'time_delta': '1:05:26', 'additions': 19, 'deletions': 0, 'state': 'closed'}]"
254674526,AbstractGPs.jl,JuliaGaussianProcesses/AbstractGPs.jl,Julia,20,217,9,18,220,39,30,9,"[{'id': 712281490, 'number': 197, 'closed': datetime.datetime(2024, 7, 30, 13, 5, 25, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 13, 11, 23, 14, tzinfo=datetime.timezone.utc), 'time_taken': 93490931.0, 'time_delta': '1082 days, 1:42:11', 'additions': 1261, 'deletions': 3, 'state': 'closed'}, {'id': 703695285, 'number': 194, 'closed': datetime.datetime(2021, 8, 20, 16, 40, 25, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 4, 16, 26, 7, tzinfo=datetime.timezone.utc), 'time_taken': 1383258.0, 'time_delta': '16 days, 0:14:18', 'additions': 359, 'deletions': 291, 'state': 'closed'}]"
63423582,GPUArrays.jl,JuliaGPU/GPUArrays.jl,Julia,75,316,15,59,1277,50,32,17,"[{'id': 713750339, 'number': 374, 'closed': datetime.datetime(2021, 8, 17, 8, 6, 42, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 16, 21, 14, 6, tzinfo=datetime.timezone.utc), 'time_taken': 39156.0, 'time_delta': '10:52:36', 'additions': 14, 'deletions': 0, 'state': 'closed'}]"
262063582,GPLikelihoods.jl,JuliaGaussianProcesses/GPLikelihoods.jl,Julia,5,43,5,10,268,23,6,3,"[{'id': 701652995, 'number': 35, 'closed': datetime.datetime(2021, 8, 2, 18, 9, 18, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 2, 17, 27, 2, tzinfo=datetime.timezone.utc), 'time_taken': 2536.0, 'time_delta': '0:42:16', 'additions': 0, 'deletions': 1, 'state': 'closed'}, {'id': 694303560, 'number': 30, 'closed': datetime.datetime(2021, 7, 21, 13, 19, 42, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 21, 11, 52, 36, tzinfo=datetime.timezone.utc), 'time_taken': 5226.0, 'time_delta': '1:27:06', 'additions': 58, 'deletions': 9, 'state': 'closed'}, {'id': 684639513, 'number': 26, 'closed': datetime.datetime(2021, 7, 7, 13, 23, 13, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 6, 19, 56, 36, tzinfo=datetime.timezone.utc), 'time_taken': 62797.0, 'time_delta': '17:26:37', 'additions': 6, 'deletions': 6, 'state': 'closed'}]"
