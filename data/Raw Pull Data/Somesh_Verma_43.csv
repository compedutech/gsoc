pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
1423128754,[Reduced Memory Use] calculating spectrum using vaex corrected,"This is in continuation of PR #576 and resolve the issues in that PR.

### Description


This  PR addresses memory use for computing Spectrum, existing Pandas implementation though efficient for small databases, doesn't perform well on larger line database.
To solve this issue, vaex is used which performs exceptionally well for memory uses.
The time efficiency of vaex is also better than Pandas.
Contributions of this PR : 
- There is  a factor of 10x improvement in memory performance for vaex implementation  as compared to pandas implementation.
- vaex implementation is done for loading_databank() and its associated functions , some parts of fetch_databank() is also implemented using vaex.
- calc_spectrum() function is also written in vaex ,keeping the existing implementation of pandas.Also its associated functions are refactored .
- eq_spectrum() and as well non_eq_spectrum are rafactored for vaex .Also there associated functions are refactored .
- Thus , both spectrum under equilibrium as well non-equilibrium can be calculated for larger databases using Vaex implementation .

### Usage

To use Vaex 
```python
from radis import config 
config[""DATAFRAME_ENGINE""] = ""vaex""
```
### Performances


![image](https://github.com/radis/radis/assets/78527441/cd25250e-c0a9-47d0-9e36-a7c8f859ec40)



Time Performance 
![image](https://github.com/radis/radis/assets/78527441/fdc4cd63-0ec9-452c-bc7a-06fa08272d16)


Code used to get this memory use comparison graph is 
```python
def compare_pandas_vs_vaex_memory():
    """"""
    Compare memory usage of `engine=""vaex""` and `engine=""pandas""` in calc_spectrum.
    Expected behavior is ""vaex"" using much less memory. This function takes tens of seconds to run.
    Returns
    -------
    None.
    """"""

    import tracemalloc

    for engine in [""pandas"", ""vaex""]:
        config[""DATAFRAME_ENGINE""] = engine
        tracemalloc.start()
        s = calc_spectrum(
            1000,
            1500,  # cm-1
            molecule=""H2O"",
            isotope=""1,2,3"",
            pressure=1.01325,  # bar
            Tgas=1000,  # K
            mole_fraction=0.1,
            wstep=""auto"",
            databank=""hitemp"",  # or 'hitemp', 'geisa', 'exomol'
            verbose=0,
        )
        snapshot = tracemalloc.take_snapshot()
        memory = tracemalloc.get_traced_memory()
        tracemalloc.stop()

        # Some raw outputs
        print(""\n******** Engine = {} ***********"".format(engine))
        print(
            ""Peak, current = {:.1e}, {:.1e} for {:} lines calculated"".format(
                *memory, s.conditions[""lines_calculated""]
            )
        )

        # More sophisticated
        print(""*** List of biggest objects ***"")
        top_stats = snapshot.statistics(""lineno"")
        for rank, stat in enumerate(top_stats[:3]):
            print(""#{}"".format(rank + 1))
            print(stat)

        # Clear for next engine in the loop
        tracemalloc.clear_traces()

```

The full code including the CPU time script is given in https://github.com/radis/radis/pull/580#issuecomment-1684943243

### Accuracy Validation

As an example to illustrate vaex and pandas spectrum are same here is a plot showing difference between Radiance. 
![diff](https://github.com/radis/radis/assets/78527441/1af029ae-5151-4398-8fec-3b1c6dae27b7)

Code used to calculate difference between radiance 
```
from radis import calc_spectrum
from radis import config
from radis.spectrum import plot_diff
config[""DATAFRAME_ENGINE""] = ""vaex""
s_vaex = calc_spectrum(1900, 2300,         # cm-1
                  molecule='CO',
                  isotope='1,2,3',
                  pressure=1.01325,   # bar
                  Tgas=700,           # K
                  mole_fraction=0.1,
                  path_length=1,      # cm
                  databank='hitran',  # or 'hitemp', 'geisa', 'exomol'
                  )
config[""DATAFRAME_ENGINE""] = ""pandas""
s_pandas = calc_spectrum(1900, 2300,         # cm-1
                  molecule='CO',
                  isotope='1,2,3',
                  pressure=1.01325,   # bar
                  Tgas=700,           # K
                  mole_fraction=0.1,
                  path_length=1,      # cm
                  databank='hitran',  # or 'hitemp', 'geisa', 'exomol'
                  )

plot_diff(s_vaex, s_pandas)
```


Fixes #118 
",True,580,https://api.github.com/repos/radis/radis/pulls/580,https://github.com/radis/radis/pull/580,closed,2159,648,23,39,33,88,1,0,[{'name': 'performance'}],2023-07-06 15:53:10+00:00,2023-08-16 12:39:49+00:00,3530799.0,"40 days, 20:46:39","[{'comment_id': 1271546336, 'comment_body': ""Does any user need this ? \r\nIf no, let's try to keep package dependencies minimal, and add developer-suggested dependencies elsewhere. For instance there are some developer-recommended tools in setup.py ; but there might be other ways to include them "", 'comment_created': datetime.datetime(2023, 7, 23, 19, 21, 3, tzinfo=datetime.timezone.utc), 'commenter': 'erwanp', 'type': 'User'}, {'comment_id': 1271547262, 'comment_body': 'why not use `self.output == ""vaex""` rather than testing on the df type ? ', 'comment_created': datetime.datetime(2023, 7, 23, 19, 27, 41, tzinfo=datetime.timezone.utc), 'commenter': 'erwanp', 'type': 'User'}, {'comment_id': 1271548067, 'comment_body': 'already exists `l329`, can you double check the architecture of this section ? ', 'comment_created': datetime.datetime(2023, 7, 23, 19, 33, 26, tzinfo=datetime.timezone.utc), 'commenter': 'erwanp', 'type': 'User'}, {'comment_id': 1271548586, 'comment_body': ""Might not be needed. I think we were doing this for a minor speed-optimization (integers columns are better handled better than strings columns in Pandas in terms of speed/memory ; and having missing values would automatically turn the column into a string column). \r\n\r\nIt might not be a limitation in Vaex. So instead of editing the columns in Vaex;  I'd only call the `cast_to_int64_with_missing_values` in Pandas-Dataframes.  And leave Vaex Dataframes as is. "", 'comment_created': datetime.datetime(2023, 7, 23, 19, 38, 5, tzinfo=datetime.timezone.utc), 'commenter': 'erwanp', 'type': 'User'}, {'comment_id': 1271549109, 'comment_body': 'just a detail now, but that might be important for long-term maintenance : can you make sure you use the same parsing string in Vaex and Pandas ? i.e. have a local variable. \r\n\r\nAnd maybe add a function that abstractizes the Parse; Convert and Clean  steps ; that you can reuse in every `_parse_HITRAN_class` function\r\n\r\n ', 'comment_created': datetime.datetime(2023, 7, 23, 19, 42, 17, tzinfo=datetime.timezone.utc), 'commenter': 'erwanp', 'type': 'User'}, {'comment_id': 1271549286, 'comment_body': ""Hard part.\r\n\r\nThis to_numpy() probably loads everything in memory; it's very likely you endure a large memory drop here.  It might be hard to bypass;  for the time being just add a `# TODO : check memory usage & if there is no other implementation without numpy conversion` \r\n\r\n"", 'comment_created': datetime.datetime(2023, 7, 23, 19, 44, 51, tzinfo=datetime.timezone.utc), 'commenter': 'erwanp', 'type': 'User'}, {'comment_id': 1271549319, 'comment_body': 'same as above', 'comment_created': datetime.datetime(2023, 7, 23, 19, 45, tzinfo=datetime.timezone.utc), 'commenter': 'erwanp', 'type': 'User'}, {'comment_id': 1271550363, 'comment_body': 'to_numpy() stores objects in RAM; and Log is probably faster once in RAM already; so you better turn wG_dat to a numpy array beforehand.', 'comment_created': datetime.datetime(2023, 7, 23, 19, 54, 17, tzinfo=datetime.timezone.utc), 'commenter': 'erwanp', 'type': 'User'}, {'comment_id': 1271550700, 'comment_body': ""looks overly complicated; here we're just parsing the dataframe with multiple chuncks. Can't you find a more direct way to do it in Vaex?  \r\n\r\nAt least : add a comment just before (~l2454) explaining what we're doing. "", 'comment_created': datetime.datetime(2023, 7, 23, 19, 57, 11, tzinfo=datetime.timezone.utc), 'commenter': 'erwanp', 'type': 'User'}, {'comment_id': 1271550727, 'comment_body': 'same as above', 'comment_created': datetime.datetime(2023, 7, 23, 19, 57, 22, tzinfo=datetime.timezone.utc), 'commenter': 'erwanp', 'type': 'User'}, {'comment_id': 1271550853, 'comment_body': 'why ?', 'comment_created': datetime.datetime(2023, 7, 23, 19, 58, 46, tzinfo=datetime.timezone.utc), 'commenter': 'erwanp', 'type': 'User'}, {'comment_id': 1271551150, 'comment_body': '```suggestion\r\n                        # to save some memory, we have added ""iso"" as an attribute rather than a column if it is the same for all lines \r\n                        if ""iso"" not in df.columns:\r\n```', 'comment_created': datetime.datetime(2023, 7, 23, 20, 1, 24, tzinfo=datetime.timezone.utc), 'commenter': 'erwanp', 'type': 'User'}, {'comment_id': 1271551499, 'comment_body': '@1someshverma @minouHub ; the ""iso"" as an attribute rather than a column is just a Pandas trick to save memory... Given than Vaex doesn\'t use any memory at all, I don\'t think it is necessary in the Vaex case', 'comment_created': datetime.datetime(2023, 7, 23, 20, 4, 53, tzinfo=datetime.timezone.utc), 'commenter': 'erwanp', 'type': 'User'}, {'comment_id': 1271551619, 'comment_body': 'why is rewriting the attrs needed ? add comment', 'comment_created': datetime.datetime(2023, 7, 23, 20, 6, 22, tzinfo=datetime.timezone.utc), 'commenter': 'erwanp', 'type': 'User'}, {'comment_id': 1271551726, 'comment_body': 'add in docstrings what you\'re testing, also add the link to this PR (e.g. ""testing Vaex as implemetned in https://github.com/radis/radis/pull/580""  ) ', 'comment_created': datetime.datetime(2023, 7, 23, 20, 7, 49, tzinfo=datetime.timezone.utc), 'commenter': 'erwanp', 'type': 'User'}, {'comment_id': 1271551952, 'comment_body': ""you're rewriting most of the code above,  there must be another way"", 'comment_created': datetime.datetime(2023, 7, 23, 20, 9, 31, tzinfo=datetime.timezone.utc), 'commenter': 'erwanp', 'type': 'User'}, {'comment_id': 1271552445, 'comment_body': ""@1someshverma @minouHub to my understanding of vaex, this is a massive move : you're removing all virtual columns here, and adding them in memory.\r\n\r\n1. Is it necessary ? \r\n2. If so (because CPU-time is slow for instance) we might want to have different modes; with a focus on saving memory or saving CPU-time.  \r\n"", 'comment_created': datetime.datetime(2023, 7, 23, 20, 14, 22, tzinfo=datetime.timezone.utc), 'commenter': 'erwanp', 'type': 'User'}, {'comment_id': 1271552524, 'comment_body': 'Maybe mention using Vaex mode to save memory ? ', 'comment_created': datetime.datetime(2023, 7, 23, 20, 15, 4, tzinfo=datetime.timezone.utc), 'commenter': 'erwanp', 'type': 'User'}, {'comment_id': 1271552876, 'comment_body': '```suggestion\r\n    sf.load_databank(""HITEMP-CO2-TEST"", output=""pandas"", load_columns=""all"")\r\n```\r\nLearning : in tests never assume the default value of a parameter. Be explicit. Default might change in the future', 'comment_created': datetime.datetime(2023, 7, 23, 20, 17, 47, tzinfo=datetime.timezone.utc), 'commenter': 'erwanp', 'type': 'User'}, {'comment_id': 1271552962, 'comment_body': 'Same as above, please write :  \r\n- what are you testing \r\n- what results do you expect', 'comment_created': datetime.datetime(2023, 7, 23, 20, 18, 30, tzinfo=datetime.timezone.utc), 'commenter': 'erwanp', 'type': 'User'}, {'comment_id': 1271553063, 'comment_body': 'why are you testing for multiple databases ? ', 'comment_created': datetime.datetime(2023, 7, 23, 20, 19, 12, tzinfo=datetime.timezone.utc), 'commenter': 'erwanp', 'type': 'User'}, {'comment_id': 1272537574, 'comment_body': 'ok,  I will change this.', 'comment_created': datetime.datetime(2023, 7, 24, 17, 13, 59, tzinfo=datetime.timezone.utc), 'commenter': '1someshverma', 'type': 'User'}, {'comment_id': 1272539273, 'comment_body': 'I will  add the comments ', 'comment_created': datetime.datetime(2023, 7, 24, 17, 15, 41, tzinfo=datetime.timezone.utc), 'commenter': '1someshverma', 'type': 'User'}, {'comment_id': 1272543583, 'comment_body': 'It is not necessary, but it improves time performance for vaex. But we can consider adding mode as saving memory or saving CPU time.', 'comment_created': datetime.datetime(2023, 7, 24, 17, 20, 22, tzinfo=datetime.timezone.utc), 'commenter': '1someshverma', 'type': 'User'}, {'comment_id': 1272546007, 'comment_body': "" Because dataframe returned by sort_values doesn't have attrs, so I have to add it again."", 'comment_created': datetime.datetime(2023, 7, 24, 17, 22, 54, tzinfo=datetime.timezone.utc), 'commenter': '1someshverma', 'type': 'User'}, {'comment_id': 1272548761, 'comment_body': 'This is because while pandas have df.attrs for vaex we need to declare explicitly. df.attrs is a dictionary, otherwise it raises an error.', 'comment_created': datetime.datetime(2023, 7, 24, 17, 25, 51, tzinfo=datetime.timezone.utc), 'commenter': '1someshverma', 'type': 'User'}, {'comment_id': 1278606187, 'comment_body': ""@1someshverma just so you don't forget"", 'comment_created': datetime.datetime(2023, 7, 30, 19, 17, 27, tzinfo=datetime.timezone.utc), 'commenter': 'erwanp', 'type': 'User'}, {'comment_id': 1280774859, 'comment_body': ""can you push your latest changes when you've done them ? "", 'comment_created': datetime.datetime(2023, 8, 1, 14, 59, 7, tzinfo=datetime.timezone.utc), 'commenter': 'erwanp', 'type': 'User'}, {'comment_id': 1281688156, 'comment_body': 'When output and engine are both vaex, fetch_databank() was returning all the columns. So, I added this line. \r\nCan you specify of which file line ```1329``` I need to check.', 'comment_created': datetime.datetime(2023, 8, 2, 10, 1, 35, tzinfo=datetime.timezone.utc), 'commenter': '1someshverma', 'type': 'User'}, {'comment_id': 1281695933, 'comment_body': 'I think that it will cost more time if we store ""iso"" as a virtual column instead of an attribute.', 'comment_created': datetime.datetime(2023, 8, 2, 10, 8, 49, tzinfo=datetime.timezone.utc), 'commenter': '1someshverma', 'type': 'User'}, {'comment_id': 1282879684, 'comment_body': 'When answering this, put a comment next to the import line (like for termcolor and vaex above) so that we know why you ask for this package', 'comment_created': datetime.datetime(2023, 8, 3, 8, 59, 37, tzinfo=datetime.timezone.utc), 'commenter': 'minouHub', 'type': 'User'}, {'comment_id': 1283106457, 'comment_body': '- You often do multiple checks that are mixed with the operations of the functions. This work and is ok, *but* it makes functions harder to understand when they are longer than 5 lines. I suggest to first check the inputs, and then do the operations. \r\n- Also, here is an implementation to avoid the need of an extra argument.\r\n\r\n```suggestion\r\n    #First checking if the input type is correct\r\n    import vaex\r\n    df_type = type(df)\r\n    if not(df_type == pd.DataFrame or df_type == vaex.dataframe.DataFrameLocal):\r\n        raise NotImplementedError(df_type)\r\n    \r\n    #Then do the actual mapping\r\n    if df.dtypes[""branch""] != np.int64:\r\n        mapping = {""P"": -1, ""Q"": 0, ""R"": 1}\r\n        if df_type == pd.DataFrame:                     #pandas\r\n            new_col = df[""branch""].replace(mapping)\r\n        else:                                           #vaex\r\n            new_col = df[""branch""].map(mapping, allow_missing=True)\r\n            df[""branch""].map(mapping, allow_missing=True)\r\n        df[""branch""] = new_col\r\n    \r\n    #Finally, check if other columns are not int64\r\n   \r\n```', 'comment_created': datetime.datetime(2023, 8, 3, 12, 4, 56, tzinfo=datetime.timezone.utc), 'commenter': 'minouHub', 'type': 'User'}, {'comment_id': 1283108855, 'comment_body': '- if the suggestion below is accepted, the argument ""dataframe_type"" is not needed anymore\r\n- other dependencies where you would have to apply the change can be shown by clicking on the function name in GitHub (see printscreen)\r\n```suggestion\r\ndef replace_PQR_with_m101(df):\r\n```\r\n\r\n![image](https://github.com/radis/radis/assets/36677294/a56432b2-ec16-4e67-8392-6b2cc85efc00)\r\n', 'comment_created': datetime.datetime(2023, 8, 3, 12, 7, 20, tzinfo=datetime.timezone.utc), 'commenter': 'minouHub', 'type': 'User'}, {'comment_id': 1283153176, 'comment_body': 'the `import vaex` should be at the beginning of the file obviously\r\n', 'comment_created': datetime.datetime(2023, 8, 3, 12, 46, 59, tzinfo=datetime.timezone.utc), 'commenter': 'minouHub', 'type': 'User'}, {'comment_id': 1283166116, 'comment_body': ""- Vaex [does not support](https://vaex.readthedocs.io/en/latest/guides/data_types.html#General-advice-on-data-types-in-Vaex) or load object types. So this function never actually does anything to vaex dataframes. Let's make it clear from the beginning in the code and avoid looping through the columns.\r\n- Also removed the need to specify the type of df in the function input\r\n\r\n```suggestion\r\n    import vaex #should be at the top of file\r\n    df_type = type(df)\r\n    if df_type == pd.DataFrame:\r\n        objects = [k for k, v in df.dtypes.items() if v == object]\r\n        df.drop(objects, axis=1)\r\n    elif df_type == vaex.dataframe.DataFrameLocal: #no objects in vaex\r\n        pass\r\n    else:\r\n        raise NotImplementedError(df_type)\r\n```"", 'comment_created': datetime.datetime(2023, 8, 3, 12, 57, 22, tzinfo=datetime.timezone.utc), 'commenter': 'minouHub', 'type': 'User'}, {'comment_id': 1283168380, 'comment_body': '```suggestion\r\ndef drop_object_format_columns(df, verbose=True):\r\n    """"""Remove \'object\' columns in a pandas DataFrame. If Vaex Dataframe, there is by construction no object in the Dataframe.\r\n```', 'comment_created': datetime.datetime(2023, 8, 3, 12, 59, 4, tzinfo=datetime.timezone.utc), 'commenter': 'minouHub', 'type': 'User'}, {'comment_id': 1283168584, 'comment_body': '```suggestion\r\n\r\n```', 'comment_created': datetime.datetime(2023, 8, 3, 12, 59, 13, tzinfo=datetime.timezone.utc), 'commenter': 'minouHub', 'type': 'User'}, {'comment_id': 1283169496, 'comment_body': ""Sorry, I would like to suggest changes with a single comment in the entire function but it doesn't seem to be possible"", 'comment_created': datetime.datetime(2023, 8, 3, 12, 59, 58, tzinfo=datetime.timezone.utc), 'commenter': 'minouHub', 'type': 'User'}, {'comment_id': 1283171201, 'comment_body': 'please move the import at the top of the file', 'comment_created': datetime.datetime(2023, 8, 3, 13, 1, 14, tzinfo=datetime.timezone.utc), 'commenter': 'minouHub', 'type': 'User'}, {'comment_id': 1283186919, 'comment_body': 'Let\'s check a single time that self.dataframe_type is properly given.\r\n```suggestion\r\n        if dataframe_type in [""pandas"", ""vaex""]:\r\n            self.dataframe_type = dataframe_type\r\n        else:\r\n            raise NotImplementedError\r\n```', 'comment_created': datetime.datetime(2023, 8, 3, 13, 13, 56, tzinfo=datetime.timezone.utc), 'commenter': 'minouHub', 'type': 'User'}, {'comment_id': 1283189443, 'comment_body': 'not needed with new SpectrumFactory definition\r\n```suggestion\r\n\r\n```', 'comment_created': datetime.datetime(2023, 8, 3, 13, 15, 53, tzinfo=datetime.timezone.utc), 'commenter': 'minouHub', 'type': 'User'}, {'comment_id': 1283201182, 'comment_body': 'Did you implement these functions to make it more readable to humans? *I think* they could be written in a shorter way:\r\n```suggestion\r\ndef true_for_all(E):\r\n    return E.unique() == [True]\r\ndef false_for_all(E):\r\n    return E.unique() == [False]\r\n```', 'comment_created': datetime.datetime(2023, 8, 3, 13, 24, 32, tzinfo=datetime.timezone.utc), 'commenter': 'minouHub', 'type': 'User'}, {'comment_id': 1283209668, 'comment_body': 'Please check which expression is actually faster (as Erwan said ""probably"")', 'comment_created': datetime.datetime(2023, 8, 3, 13, 30, 37, tzinfo=datetime.timezone.utc), 'commenter': 'minouHub', 'type': 'User'}, {'comment_id': 1283241477, 'comment_body': ""@erwanp  is there a reason why the grouped lines are alternate and not consecutive in the df? Is it just the way it was coded initially or for performance reasons? Here is an alternative that is actually more readable:\r\n\r\n```python\r\n# Calculate the number of rows in each smaller DataFrame\r\nrows_per_df = int(len(df) / N)\r\n\r\n# Create a new column for group index\r\ndf['group_index'] = df.index // rows_per_df\r\n\r\n# Group the DataFrame by the 'group_index' column\r\ngrouped = df.groupby('group_index')\r\n```"", 'comment_created': datetime.datetime(2023, 8, 3, 13, 53, 37, tzinfo=datetime.timezone.utc), 'commenter': 'minouHub', 'type': 'User'}, {'comment_id': 1283254901, 'comment_body': ""And for vaex:\r\n```python\r\n# Create a new virtual column for group index\r\ndf['group_index'] = vaex.vrange(0, len(df))\r\ndf['group_index'] = df['group_index'] // N\r\n\r\n# Group the DataFrame by the 'group_index' column\r\ngrouped = df.groupby('group_index')\r\n```"", 'comment_created': datetime.datetime(2023, 8, 3, 14, 2, 50, tzinfo=datetime.timezone.utc), 'commenter': 'minouHub', 'type': 'User'}, {'comment_id': 1283255451, 'comment_body': 'same as above :)', 'comment_created': datetime.datetime(2023, 8, 3, 14, 3, 16, tzinfo=datetime.timezone.utc), 'commenter': 'minouHub', 'type': 'User'}, {'comment_id': 1285093010, 'comment_body': 'To ensure that some commit has not changed vaex and pandas spectrum for some databanks and spectrum is same.', 'comment_created': datetime.datetime(2023, 8, 5, 17, 33, 13, tzinfo=datetime.timezone.utc), 'commenter': '1someshverma', 'type': 'User'}, {'comment_id': 1285623305, 'comment_body': 'This check is already performed at line 329 (above). This if statement is only triggered for `engine == ""pandas""` and `output == ""vaex""` which does not make sense. If you agree, please add a `NotImplementedError`', 'comment_created': datetime.datetime(2023, 8, 7, 9, 35, 1, tzinfo=datetime.timezone.utc), 'commenter': 'minouHub', 'type': 'User'}, {'comment_id': 1287042182, 'comment_body': 'for vaex engine=output so that line ```329``` is not executed for it .\r\n\r\n```\r\n        if engine == output:\r\n            df = df\r\n        elif engine == ""vaex"":\r\n            # in vaex, column selection has to happen now\r\n            if columns:  # load only these columns (if they exist)\r\n                columns = [c for c in columns if c in df.columns]\r\n            if output == ""pandas"":\r\n                df_pandas = df.to_pandas_df(column_names=columns)\r\n                df.close()\r\n                df = df_pandas\r\n```', 'comment_created': datetime.datetime(2023, 8, 8, 12, 25, 15, tzinfo=datetime.timezone.utc), 'commenter': '1someshverma', 'type': 'User'}, {'comment_id': 1287048297, 'comment_body': 'Alright. Then I would simply add a `if engine = ""vaex""` at the start. This would make the code just easier to read.', 'comment_created': datetime.datetime(2023, 8, 8, 12, 30, 35, tzinfo=datetime.timezone.utc), 'commenter': 'minouHub', 'type': 'User'}, {'comment_id': 1287309835, 'comment_body': '```suggestion\r\nCalculating a spectrum using pandas can be memory-intensive, as it loads data into memory for the computation. This can restrict the number of lines that can be processed on a device, especially for larger datasets. In such cases, Vaex is recommended as the engine. Vaex is a table management tool similar to PANDAS, but it utilizes memory mapping, a zero-memory-copy policy, and lazy computations for optimal performance.\r\n```', 'comment_created': datetime.datetime(2023, 8, 8, 15, 42, 36, tzinfo=datetime.timezone.utc), 'commenter': 'minouHub', 'type': 'User'}, {'comment_id': 1287312381, 'comment_body': 'add a `if verbose:` to avoid uncontrolled print', 'comment_created': datetime.datetime(2023, 8, 8, 15, 44, 39, tzinfo=datetime.timezone.utc), 'commenter': 'minouHub', 'type': 'User'}, {'comment_id': 1287317177, 'comment_body': 'Some conditions are repeated. To improve readability and conciseness, you can store the redundant conditions with\r\n```\r\nconditions = {\'molecule\': \'CO\', \'mole_fraction\':0.1, \'path_length\':1} #etc. \r\ns1 = calc_spectrum(**conditions, Trot=700, Tvib=710, Tgas=700, engine=""vaex"")\r\ns2 = calc_spectrum(**conditions, Trot=700, Tvib=710, Tgas=700, engine=""pandas"")\r\n```\r\n        \r\n', 'comment_created': datetime.datetime(2023, 8, 8, 15, 48, 40, tzinfo=datetime.timezone.utc), 'commenter': 'minouHub', 'type': 'User'}, {'comment_id': 1287318483, 'comment_body': 'no need to apply a slit, and checking only one quantity such as ""absorbance"" is enough :)', 'comment_created': datetime.datetime(2023, 8, 8, 15, 49, 42, tzinfo=datetime.timezone.utc), 'commenter': 'minouHub', 'type': 'User'}, {'comment_id': 1288855898, 'comment_body': 'I have removed this, test cases are passing after merging radis:develop', 'comment_created': datetime.datetime(2023, 8, 9, 16, 21, 30, tzinfo=datetime.timezone.utc), 'commenter': '1someshverma', 'type': 'User'}, {'comment_id': 1291377054, 'comment_body': '```suggestion\r\n================================================\r\nOut-of-RAM calculations for very large databases\r\n================================================\r\n```', 'comment_created': datetime.datetime(2023, 8, 11, 13, 59, 14, tzinfo=datetime.timezone.utc), 'commenter': 'erwanp', 'type': 'User'}, {'comment_id': 1291378240, 'comment_body': 'can you easily show the memory usage in both cases n this example ? ', 'comment_created': datetime.datetime(2023, 8, 11, 14, 0, 16, tzinfo=datetime.timezone.utc), 'commenter': 'erwanp', 'type': 'User'}, {'comment_id': 1291379475, 'comment_body': ""```suggestion\r\nVaex is a table management tool similar to PANDAS, but it utilizes memory mapping, a zero-\r\nmemory-copy policy, and lazy computations for optimal performance. \r\n\r\nThis means what whatever your RAM and whatever the size of the dataset, **you won't run out of memory**.\r\n```"", 'comment_created': datetime.datetime(2023, 8, 11, 14, 1, 21, tzinfo=datetime.timezone.utc), 'commenter': 'erwanp', 'type': 'User'}, {'comment_id': 1291384753, 'comment_body': 'add the comments in docstrings under the function, not above. Same for all other test functions', 'comment_created': datetime.datetime(2023, 8, 11, 14, 6, 12, tzinfo=datetime.timezone.utc), 'commenter': 'erwanp', 'type': 'User'}, {'comment_id': 1291386661, 'comment_body': ""Let me challenge this. I did not think the changes your made were dependant on the database, are they ?\r\n\r\nBy doing it you're increasing downloads & computation times for the test suite, which is both environmentally problematic and slightly annoying for the users => we want tests to be as minimal and as fast as possible.\r\nHowever, we want even more the test suite to be robust and trustworthy.\r\n\r\nTherefore, if there is **one** good reason to test Vaex vs Pandas for different databases (i.e. that Vaex & Pandas might be equal for HITRAN, but different for HITEMP), let's keep it. But from my point of view your work is database-indepednant. \r\nSo just use one database, and make sure the database is already used in other tests so we do not have to download one more database. \r\n\r\n\r\nTagging @minouHub too ; I think it's important to maintain a clean & efficient test suite "", 'comment_created': datetime.datetime(2023, 8, 11, 14, 7, 54, tzinfo=datetime.timezone.utc), 'commenter': 'erwanp', 'type': 'User'}, {'comment_id': 1291387854, 'comment_body': ""rename `s` as `s_vaex`, `s1` as `s1_pandas`, it's clearer"", 'comment_created': datetime.datetime(2023, 8, 11, 14, 8, 55, tzinfo=datetime.timezone.utc), 'commenter': 'erwanp', 'type': 'User'}, {'comment_id': 1291388517, 'comment_body': ""also you don't need to apply_slit() "", 'comment_created': datetime.datetime(2023, 8, 11, 14, 9, 31, tzinfo=datetime.timezone.utc), 'commenter': 'erwanp', 'type': 'User'}, {'comment_id': 1291390085, 'comment_body': 'also mention this in the function docstrings.\r\ne.g ""Here are the things we ensure in this test : \r\n- that spectra calculated with Vaex & Pandas are the same \r\n- that spectra calculated with Vaex & Pandas using Database cutoff are the same \r\n- etc.\r\n"" ', 'comment_created': datetime.datetime(2023, 8, 11, 14, 10, 57, tzinfo=datetime.timezone.utc), 'commenter': 'erwanp', 'type': 'User'}, {'comment_id': 1291392761, 'comment_body': 'do you really need this new parameter ""dataframe_type"" ?  \r\nCan\'t you get all you need later from the fetch_databank(output=""vaex"") value ?  ', 'comment_created': datetime.datetime(2023, 8, 11, 14, 12, 55, tzinfo=datetime.timezone.utc), 'commenter': 'erwanp', 'type': 'User'}, {'comment_id': 1291393952, 'comment_body': ""s1.compare_with(s)  should work here ; doesn't it ? "", 'comment_created': datetime.datetime(2023, 8, 11, 14, 13, 48, tzinfo=datetime.timezone.utc), 'commenter': 'erwanp', 'type': 'User'}, {'comment_id': 1291394725, 'comment_body': 'same docstrings remark as above', 'comment_created': datetime.datetime(2023, 8, 11, 14, 14, 30, tzinfo=datetime.timezone.utc), 'commenter': 'erwanp', 'type': 'User'}, {'comment_id': 1291397293, 'comment_body': 'do you need a SpectrumFactory, why not use fetch_databank() directly ? ', 'comment_created': datetime.datetime(2023, 8, 11, 14, 16, 35, tzinfo=datetime.timezone.utc), 'commenter': 'erwanp', 'type': 'User'}, {'comment_id': 1291398120, 'comment_body': ""assert that it's the right output\r\ni.e. something like \r\n```\r\nassert isinstance(df1, vaex.DataFrame)\r\n```\r\n\r\nSame idea for df2 below"", 'comment_created': datetime.datetime(2023, 8, 11, 14, 17, 21, tzinfo=datetime.timezone.utc), 'commenter': 'erwanp', 'type': 'User'}, {'comment_id': 1291404615, 'comment_body': ""Same remark as above in calc_spectrum. \r\nI do not understand why you're testing all of this ; i.e. what new information are you getting ? From what I see in your PR, you did not change fetch_databank(). \r\n\r\nHaving a Vaex/Pandas output in databank was done in 2021, and is already tested https://github.com/radis/radis/pull/306 (as far as I know. If they aren't, let's discuss !)"", 'comment_created': datetime.datetime(2023, 8, 11, 14, 22, 34, tzinfo=datetime.timezone.utc), 'commenter': 'erwanp', 'type': 'User'}, {'comment_id': 1291409468, 'comment_body': ""I dislike that we need HITEMP H2O ; it's a very large database. \r\nOk for your own performance tests, and to plot on the PR; but remember that these tests will be executed on every single commit during the next 5 years ! \r\nLet's be minimal. Use a database already downloaded in the other tests. \r\n\r\n\r\nAlso, there is no assert statement anywhere here. So it's probably more a Benchmark than a Test. \r\nIf confirmed, then add it in Radis/benchmarks : https://github.com/radis/radis-benchmark , where you can use whatever database you want as it's not ran on every new commit\r\n\r\n(as well as in this PR text ) "", 'comment_created': datetime.datetime(2023, 8, 11, 14, 26, 43, tzinfo=datetime.timezone.utc), 'commenter': 'erwanp', 'type': 'User'}, {'comment_id': 1291409817, 'comment_body': 'same as above', 'comment_created': datetime.datetime(2023, 8, 11, 14, 27, 3, tzinfo=datetime.timezone.utc), 'commenter': 'erwanp', 'type': 'User'}, {'comment_id': 1291441357, 'comment_body': 'any idea on this todo ? ', 'comment_created': datetime.datetime(2023, 8, 11, 14, 55, 24, tzinfo=datetime.timezone.utc), 'commenter': 'erwanp', 'type': 'User'}, {'comment_id': 1291448442, 'comment_body': 'Adding a new parameter makes the library more difficult to understand & use for new users; ideally we\'d like all the input parameters of calc_spectrum() to be only physical parameters (pressure, temperature, species, etc.)  but not computational parameters. \r\n\r\nOne alternative I\'m trying to push is to store the ""engine"" key in `radis.config` , which itself is read from the radis.json file. Each user can modify their own radis.json file. The default one is copied from [radis/default_radis.json](https://github.com/radis/radis/blob/develop/radis/default_radis.json) . All of this is implemented and working quite well. \r\n\r\nHave a look at how `MEMORY_MAPPING_ENGINE` is implemented there and in the code. You could do a similar thing for a new key `DATAFRAME_ENGINE`, for instance (default ""pandas"" then ""auto"" or ""vaex"" if it works well !) \r\n\r\nUsers can edit it either in radis.json ; or in their scripts : \r\n```python\r\nimport radis\r\nradis.config[""DATAFRAME_ENGINE""] = ""vaex""\r\n```\r\n\r\n\r\nAlso tagging @minouHub for reference', 'comment_created': datetime.datetime(2023, 8, 11, 15, 0, 56, tzinfo=datetime.timezone.utc), 'commenter': 'erwanp', 'type': 'User'}, {'comment_id': 1291451841, 'comment_body': 'sure about that ? ', 'comment_created': datetime.datetime(2023, 8, 11, 15, 3, 45, tzinfo=datetime.timezone.utc), 'commenter': 'erwanp', 'type': 'User'}, {'comment_id': 1291453709, 'comment_body': 'this function is used also for numpy arrays;  can you keep it as it is and create a different one for vaex ? \r\n\r\ni.e.\r\n\r\n```\r\ndef anynan_vaex\r\n```\r\n\r\nAlso, vaex seems to have its own functions : https://vaex.readthedocs.io/en/latest/guides/missing_or_invalid_data.html ', 'comment_created': datetime.datetime(2023, 8, 11, 15, 5, 36, tzinfo=datetime.timezone.utc), 'commenter': 'erwanp', 'type': 'User'}, {'comment_id': 1291456390, 'comment_body': ""when is _assertcm used in the code ? \r\n\r\nI'd like it better if we didn't touch _assertcm (which expects an array, not necessarily a Pandas column), but rather edit the function call"", 'comment_created': datetime.datetime(2023, 8, 11, 15, 8, 21, tzinfo=datetime.timezone.utc), 'commenter': 'erwanp', 'type': 'User'}, {'comment_id': 1291529965, 'comment_body': 'I think as the default value of engine is pandas, everything thing should work fine for new users and all the examples given in docs can be tested without bothering about engine parameter of calc_spectrum().Just by supplying physical conditions , user can calculate spectrum easily.\r\nAlso, updating the radis.json every time user wants to switch from calculating spectrum with a low number of lines to spectrum having a high number of lines is not that flexible.', 'comment_created': datetime.datetime(2023, 8, 11, 15, 51, 3, tzinfo=datetime.timezone.utc), 'commenter': '1someshverma', 'type': 'User'}, {'comment_id': 1291530589, 'comment_body': 'If you want changes i can make those.', 'comment_created': datetime.datetime(2023, 8, 11, 15, 51, 44, tzinfo=datetime.timezone.utc), 'commenter': '1someshverma', 'type': 'User'}, {'comment_id': 1291533439, 'comment_body': 'Ok, I will create a new function for vaex.', 'comment_created': datetime.datetime(2023, 8, 11, 15, 54, 24, tzinfo=datetime.timezone.utc), 'commenter': '1someshverma', 'type': 'User'}, {'comment_id': 1292066305, 'comment_body': 's1.compare_with works when data frames are of the same type, here data frames are of different types.', 'comment_created': datetime.datetime(2023, 8, 12, 4, 51, 46, tzinfo=datetime.timezone.utc), 'commenter': '1someshverma', 'type': 'User'}, {'comment_id': 1292096050, 'comment_body': ""These are not executed in every commit here is an example from last commit https://app.travis-ci.com/github/radis/radis/jobs/607697939. These functions were not executed in that as there name doesn't start or end with test so they are not detected by pytest and hence not executed.\r\n\r\nThe idea to use HITEMP CO2 was to have more clear idea about the performance of vaex for larger databases."", 'comment_created': datetime.datetime(2023, 8, 12, 5, 56, 9, tzinfo=datetime.timezone.utc), 'commenter': '1someshverma', 'type': 'User'}, {'comment_id': 1292143590, 'comment_body': 'Our target users aren\'t spectroscopy experts; and shouldn\'t even have to worry about which mode to use. Less parameters = less trouble for them, so I\'d like not to have a new parameter unless there is a strong argument against it. There are already too many parameters in calc_spectrum (and we\'ll have to remove some)  [just have a look at [calc_spectrum](https://radis.readthedocs.io/en/latest/source/radis.lbl.calc.html#radis.lbl.calc.calc_spectrum) docs, it\'s frightening for a 1st time user ! :) )  \r\n\r\nWhat you\'re suggesting (switch from one to another) is interesting and could (should !) be done under-the-hood, without the user noticing : \r\n- there could be an ""auto"" mode that automatically switch if we evaluate that Vaex might be faster when loading the database, \r\n\r\nDo not implement this now, as the goal is to merge the Vaex calculations (it won\'t be the default mode yet); but keep in mind that this is where we\'re heading to so that the underlying architecture is ready for this ""auto"" mode. \r\n\r\nSo to wrap is up\r\n\r\n1. for the time being, use `DATAFRAME_ENGINE = ""pandas""` as default, but `DATAFRAME_ENGINE = ""vaex""` should work \r\n2. we\'ll publish a new Radis release and ask people in the Slack to use DATAFRAME_ENGINE = ""vaex"" and see if it works for them, gather some user feedbacks\r\n3. if it works well we can implement `DATAFRAME_ENGINE = ""auto""`', 'comment_created': datetime.datetime(2023, 8, 12, 7, 58, 23, tzinfo=datetime.timezone.utc), 'commenter': 'erwanp', 'type': 'User'}, {'comment_id': 1292144762, 'comment_body': 'You\'re right, I did not notice function names don\'t start with `test*` so we\'re good. You can resolve my comment. Maybe start with ""benchmark_*""  and mention explicitely in the docstrings that they\'re long tests\r\n\r\n```\r\n.. warnings \r\n    This function will download the full H2O HITEMP database which requires > 10 (?) GB and many minutes if not hours of parsing. It is not executed by default in the test suite (name doesn\'t start with test_*)\r\n```\r\n\r\n', 'comment_created': datetime.datetime(2023, 8, 12, 8, 2, 6, tzinfo=datetime.timezone.utc), 'commenter': 'erwanp', 'type': 'User'}, {'comment_id': 1292175445, 'comment_body': 'I will make the changes.', 'comment_created': datetime.datetime(2023, 8, 12, 9, 17, 1, tzinfo=datetime.timezone.utc), 'commenter': '1someshverma', 'type': 'User'}, {'comment_id': 1292838713, 'comment_body': ""fetch_databank() is a method of DatabankLoader class so it can't be used directly"", 'comment_created': datetime.datetime(2023, 8, 13, 18, 43, 54, tzinfo=datetime.timezone.utc), 'commenter': '1someshverma', 'type': 'User'}, {'comment_id': 1292849452, 'comment_body': 'we actually already download HITEMP CO for other tests, so you can keep this one !', 'comment_created': datetime.datetime(2023, 8, 13, 20, 11, 31, tzinfo=datetime.timezone.utc), 'commenter': 'erwanp', 'type': 'User'}, {'comment_id': 1293108313, 'comment_body': 'From a quick look, the rest of the function would have to be refactored whether the dataframe is pandas or vaex. Please keep the comment open', 'comment_created': datetime.datetime(2023, 8, 14, 8, 3, 15, tzinfo=datetime.timezone.utc), 'commenter': 'minouHub', 'type': 'User'}, {'comment_id': 1294482921, 'comment_body': 'just as good practice, reset the initial state of config[""DATAFRAME_ENGINE""] at the end of the test  (""leave no trace"")', 'comment_created': datetime.datetime(2023, 8, 15, 11, 41, 39, tzinfo=datetime.timezone.utc), 'commenter': 'erwanp', 'type': 'User'}]","[{'commit_sha': '17430c423347c9d1f0e86aa039b9135619563350', 'committer_username': '1someshverma', 'committer_name': 'Somesh Verma', 'committer_email': None, 'commit_date': datetime.datetime(2021, 2, 4, 6, 43, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd6ba795f2f9739c1bbd7ed7c46554691d760aa18', 'committer_username': '1someshverma', 'committer_name': 'Somesh Verma', 'committer_email': None, 'commit_date': datetime.datetime(2021, 2, 4, 6, 43, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b01040526541ac7bf65fe258b419840ab78b908e', 'committer_username': '1someshverma', 'committer_name': 'Somesh Verma', 'committer_email': None, 'commit_date': datetime.datetime(2021, 2, 4, 6, 43, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '71ff3931365aa4a5e93e44984a1ec35d813d8418', 'committer_username': '1someshverma', 'committer_name': 'Somesh Verma', 'committer_email': None, 'commit_date': datetime.datetime(2021, 2, 4, 6, 43, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c9c5527ad72205d739b5f6409c045d6bde67d4c5', 'committer_username': '1someshverma', 'committer_name': 'Somesh Verma', 'committer_email': None, 'commit_date': datetime.datetime(2021, 2, 4, 6, 43, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd0a265d539c9f8027220e77dc6cc8655d39837e2', 'committer_username': '1someshverma', 'committer_name': 'Somesh Verma', 'committer_email': None, 'commit_date': datetime.datetime(2021, 2, 4, 6, 43, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a62cc08d0cceaf6b13720fb5486ad85eb9fafd33', 'committer_username': '1someshverma', 'committer_name': 'Somesh Verma', 'committer_email': None, 'commit_date': datetime.datetime(2021, 2, 4, 6, 43, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f9a7e68cdfd55ce05fc943a8c053ee2880f35bec', 'committer_username': '1someshverma', 'committer_name': 'Somesh Verma', 'committer_email': None, 'commit_date': datetime.datetime(2021, 2, 4, 6, 43, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '368c1cbd6d9ce37998d16422c747542cf60a5667', 'committer_username': '1someshverma', 'committer_name': 'Somesh Verma', 'committer_email': None, 'commit_date': datetime.datetime(2021, 2, 4, 6, 43, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2d2111d3f4a7414efcc76bf25952072db72c0a2e', 'committer_username': '1someshverma', 'committer_name': 'Somesh Verma', 'committer_email': None, 'commit_date': datetime.datetime(2021, 2, 4, 6, 43, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bbee6a3a1cb153cd105e9d08d5d039f44774752c', 'committer_username': 'minouHub', 'committer_name': 'Nicolas Minesi', 'committer_email': None, 'commit_date': datetime.datetime(2018, 2, 20, 19, 40, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e0fd0dc04ee510035c791b2b34d7e2e6190f520a', 'committer_username': '1someshverma', 'committer_name': 'Somesh Verma', 'committer_email': None, 'commit_date': datetime.datetime(2021, 2, 4, 6, 43, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a5a3f38b7f1d6b580ab4e170352499cab58b5f95', 'committer_username': '1someshverma', 'committer_name': 'Somesh Verma', 'committer_email': None, 'commit_date': datetime.datetime(2021, 2, 4, 6, 43, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '57ea81906f5067afb8c72b30c5d8d2c5242e8ba0', 'committer_username': '1someshverma', 'committer_name': 'Somesh Verma', 'committer_email': None, 'commit_date': datetime.datetime(2021, 2, 4, 6, 43, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fffdbef6e3bc1ad2bb9310c6837ed118302e623d', 'committer_username': '1someshverma', 'committer_name': 'Somesh Verma', 'committer_email': None, 'commit_date': datetime.datetime(2021, 2, 4, 6, 43, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8937201ef52fba1c6d0d521a304c6d23f52afecf', 'committer_username': '1someshverma', 'committer_name': 'Somesh Verma', 'committer_email': None, 'commit_date': datetime.datetime(2021, 2, 4, 6, 43, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '91d2573c1126c0ba68509510bed8960604918044', 'committer_username': '1someshverma', 'committer_name': 'Somesh Verma', 'committer_email': None, 'commit_date': datetime.datetime(2021, 2, 4, 6, 43, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7a359ec77691fed9d7fcfe9d1fc45c037e6484ad', 'committer_username': '1someshverma', 'committer_name': 'Somesh Verma', 'committer_email': None, 'commit_date': datetime.datetime(2021, 2, 4, 6, 43, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7324317c639e6a1d147c8788adc07f31e762e2a6', 'committer_username': '1someshverma', 'committer_name': 'Somesh Verma', 'committer_email': None, 'commit_date': datetime.datetime(2021, 2, 4, 6, 43, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7b12c54d64d73530d24f13b8efed5fcb58e1598c', 'committer_username': '1someshverma', 'committer_name': 'Somesh Verma', 'committer_email': None, 'commit_date': datetime.datetime(2021, 2, 4, 6, 43, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '561d3570870fa4b581c934eb216ab44765480245', 'committer_username': '1someshverma', 'committer_name': 'Somesh Verma', 'committer_email': None, 'commit_date': datetime.datetime(2021, 2, 4, 6, 43, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5c2c12405623c105ef890e6d7c8d516020d34deb', 'committer_username': 'minouHub', 'committer_name': 'Nicolas Minesi', 'committer_email': None, 'commit_date': datetime.datetime(2018, 2, 20, 19, 40, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ca08e605a292f5499f7345ab1037b684d97b87ee', 'committer_username': 'minouHub', 'committer_name': 'Nicolas Minesi', 'committer_email': None, 'commit_date': datetime.datetime(2018, 2, 20, 19, 40, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3fc39a25b4631bce0a8ff886f94c7467f740887d', 'committer_username': '1someshverma', 'committer_name': 'Somesh Verma', 'committer_email': None, 'commit_date': datetime.datetime(2021, 2, 4, 6, 43, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '174203dc30399a7d6b56ec5815246dd0f6d67546', 'committer_username': '1someshverma', 'committer_name': 'Somesh Verma', 'committer_email': None, 'commit_date': datetime.datetime(2021, 2, 4, 6, 43, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '995250290f826474fe1f53dd0b9edbb2307b436e', 'committer_username': '1someshverma', 'committer_name': 'Somesh Verma', 'committer_email': None, 'commit_date': datetime.datetime(2021, 2, 4, 6, 43, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '79dfc4f15380ee2a8ab7db408169ad7c7ebc5617', 'committer_username': '1someshverma', 'committer_name': 'Somesh Verma', 'committer_email': None, 'commit_date': datetime.datetime(2021, 2, 4, 6, 43, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0179028fcbd8c57acc45a5378db005cb302d1abe', 'committer_username': '1someshverma', 'committer_name': 'Somesh Verma', 'committer_email': None, 'commit_date': datetime.datetime(2021, 2, 4, 6, 43, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8a6433aa66a4f48f105efbd1fd582a8e53e2d35f', 'committer_username': '1someshverma', 'committer_name': 'Somesh Verma', 'committer_email': None, 'commit_date': datetime.datetime(2021, 2, 4, 6, 43, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '561d9f13a2b40e3267879a30303bd663bda927f5', 'committer_username': '1someshverma', 'committer_name': 'Somesh Verma', 'committer_email': None, 'commit_date': datetime.datetime(2021, 2, 4, 6, 43, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a205faa569731143b27a63e4dda28f63705cd130', 'committer_username': '1someshverma', 'committer_name': 'Somesh Verma', 'committer_email': None, 'commit_date': datetime.datetime(2021, 2, 4, 6, 43, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7f3106963479c34a16576b1a61a7594f5868cf7b', 'committer_username': '1someshverma', 'committer_name': 'Somesh Verma', 'committer_email': None, 'commit_date': datetime.datetime(2021, 2, 4, 6, 43, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd402d6eb5898c53ba35e50aa1a1da844904b0cbe', 'committer_username': '1someshverma', 'committer_name': 'Somesh Verma', 'committer_email': None, 'commit_date': datetime.datetime(2021, 2, 4, 6, 43, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '546a48675873a247ed281af63acd21844eeea781', 'committer_username': '1someshverma', 'committer_name': 'Somesh Verma', 'committer_email': None, 'commit_date': datetime.datetime(2021, 2, 4, 6, 43, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b62c7e081f34dee715e9e4cd309c378c2dd2054b', 'committer_username': '1someshverma', 'committer_name': 'Somesh Verma', 'committer_email': None, 'commit_date': datetime.datetime(2021, 2, 4, 6, 43, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4fe7d75a69cf2462de110392865527e4c3b30e93', 'committer_username': '1someshverma', 'committer_name': 'Somesh Verma', 'committer_email': None, 'commit_date': datetime.datetime(2021, 2, 4, 6, 43, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3151a7760570d3cc58c7b7af34c2221783e901df', 'committer_username': '1someshverma', 'committer_name': 'Somesh Verma', 'committer_email': None, 'commit_date': datetime.datetime(2021, 2, 4, 6, 43, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e8e2967ff9a290538b20204e0eb209136d7659bd', 'committer_username': '1someshverma', 'committer_name': 'Somesh Verma', 'committer_email': None, 'commit_date': datetime.datetime(2021, 2, 4, 6, 43, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5bd34acc821265be58d0cfdc623bf61599d0b02d', 'committer_username': '1someshverma', 'committer_name': 'Somesh Verma', 'committer_email': None, 'commit_date': datetime.datetime(2021, 2, 4, 6, 43, 12, tzinfo=datetime.timezone.utc)}]",Somesh Verma,78527441,,User,,29,,34,24
1306093424,Handles division by zero,"This is to fix #565 

To solve this issue I have added to methods div_safe and zero2inf to convert.py

zero2inf converts zeroes to infinity thus avoiding division by zero.
div_safe uses zero2inf to convert zeroes.

I have passed it to the parameter in secondary axis functions to avoid division by zero error.
",True,566,https://api.github.com/repos/radis/radis/pulls/566,https://github.com/radis/radis/pull/566,closed,26,4,3,5,11,0,0,0,[],2023-04-07 17:28:44+00:00,2023-08-01 16:41:35+00:00,10019571.0,"115 days, 23:12:51",[],"[{'commit_sha': 'a8513d00d01cc075581cd888255dfc22fef29e20', 'committer_username': '1someshverma', 'committer_name': 'Somesh Verma', 'committer_email': None, 'commit_date': datetime.datetime(2021, 2, 4, 6, 43, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '285739c4f6f7ae554ce61fbb0fc6a80999f9ad0c', 'committer_username': '1someshverma', 'committer_name': 'Somesh Verma', 'committer_email': None, 'commit_date': datetime.datetime(2021, 2, 4, 6, 43, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1879a548a9e74af239b77bf6f2fbd6cf214bc49b', 'committer_username': '1someshverma', 'committer_name': 'Somesh Verma', 'committer_email': None, 'commit_date': datetime.datetime(2021, 2, 4, 6, 43, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1a7b41ac1eb63cbd5328b94c33c4412f35bc6af7', 'committer_username': '1someshverma', 'committer_name': 'Somesh Verma', 'committer_email': None, 'commit_date': datetime.datetime(2021, 2, 4, 6, 43, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '905b94f6bb9094244efd13bccfb998cef6d0bf32', 'committer_username': '1someshverma', 'committer_name': 'Somesh Verma', 'committer_email': None, 'commit_date': datetime.datetime(2021, 2, 4, 6, 43, 12, tzinfo=datetime.timezone.utc)}]",Somesh Verma,78527441,,User,,29,,34,24

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
118933991,radis,radis/radis,Python,121,210,11,47,3450,76,11,8,"[{'id': 1479390975, 'number': 609, 'closed': datetime.datetime(2023, 8, 20, 20, 57, 45, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 8, 17, 17, 7, 46, tzinfo=datetime.timezone.utc), 'time_taken': 272999.0, 'time_delta': '3 days, 3:49:59', 'additions': 136, 'deletions': 134, 'state': 'closed'}, {'id': 1423128754, 'number': 580, 'closed': datetime.datetime(2023, 8, 16, 12, 39, 49, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 7, 6, 15, 53, 10, tzinfo=datetime.timezone.utc), 'time_taken': 3530799.0, 'time_delta': '40 days, 20:46:39', 'additions': 2159, 'deletions': 648, 'state': 'closed'}, {'id': 1408552221, 'number': 576, 'closed': datetime.datetime(2023, 7, 7, 15, 48, 26, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 6, 26, 19, 27, 4, tzinfo=datetime.timezone.utc), 'time_taken': 937282.0, 'time_delta': '10 days, 20:21:22', 'additions': 1124, 'deletions': 326, 'state': 'closed'}, {'id': 1306093424, 'number': 566, 'closed': datetime.datetime(2023, 8, 1, 16, 41, 35, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 4, 7, 17, 28, 44, tzinfo=datetime.timezone.utc), 'time_taken': 10019571.0, 'time_delta': '115 days, 23:12:51', 'additions': 26, 'deletions': 4, 'state': 'closed'}, {'id': 1299024173, 'number': 555, 'closed': datetime.datetime(2023, 5, 7, 15, 42, 15, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 4, 2, 7, 57, 57, tzinfo=datetime.timezone.utc), 'time_taken': 3051858.0, 'time_delta': '35 days, 7:44:18', 'additions': 85, 'deletions': 32, 'state': 'closed'}, {'id': 1237816936, 'number': 547, 'closed': datetime.datetime(2023, 2, 23, 17, 9, 12, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 2, 11, 18, 35, 37, tzinfo=datetime.timezone.utc), 'time_taken': 1031615.0, 'time_delta': '11 days, 22:33:35', 'additions': 35, 'deletions': 0, 'state': 'closed'}, {'id': 1217998025, 'number': 543, 'closed': datetime.datetime(2023, 2, 8, 13, 4, 54, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 1, 26, 15, 0, 55, tzinfo=datetime.timezone.utc), 'time_taken': 1116239.0, 'time_delta': '12 days, 22:03:59', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 1209948446, 'number': 539, 'closed': datetime.datetime(2023, 1, 19, 17, 59, 6, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 1, 19, 12, 17, 40, tzinfo=datetime.timezone.utc), 'time_taken': 20486.0, 'time_delta': '5:41:26', 'additions': 15, 'deletions': 17, 'state': 'closed'}, {'id': 1198118714, 'number': 537, 'closed': datetime.datetime(2023, 1, 17, 19, 43, 50, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 1, 15, 17, 34, 22, tzinfo=datetime.timezone.utc), 'time_taken': 180568.0, 'time_delta': '2 days, 2:09:28', 'additions': 31, 'deletions': 9, 'state': 'closed'}, {'id': 1194058486, 'number': 536, 'closed': datetime.datetime(2023, 1, 15, 17, 29, 42, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 1, 11, 16, 7, 40, tzinfo=datetime.timezone.utc), 'time_taken': 350522.0, 'time_delta': '4 days, 1:22:02', 'additions': 34, 'deletions': 8, 'state': 'closed'}, {'id': 1191157680, 'number': 535, 'closed': datetime.datetime(2023, 1, 11, 16, 4, 21, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 1, 9, 17, 23, 13, tzinfo=datetime.timezone.utc), 'time_taken': 168068.0, 'time_delta': '1 day, 22:41:08', 'additions': 33, 'deletions': 7, 'state': 'closed'}, {'id': 1188491798, 'number': 534, 'closed': datetime.datetime(2023, 1, 9, 17, 19, 25, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 1, 6, 18, 5, 52, tzinfo=datetime.timezone.utc), 'time_taken': 256413.0, 'time_delta': '2 days, 23:13:33', 'additions': 30, 'deletions': 7, 'state': 'closed'}]"
