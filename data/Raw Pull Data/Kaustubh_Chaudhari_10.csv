pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
614915134,Added `JITLinker`-based `NumbaLinker` ,"Adds a `NumbaLinker` based upon the new `JitLinker` class.

Based upon machinery from https://github.com/pymc-devs/aesara/pull/365 and https://github.com/pymc-devs/aesara/pull/371
",True,372,https://api.github.com/repos/aesara-devs/aesara/pulls/372,https://github.com/aesara-devs/aesara/pull/372,closed,455,15,6,9,6,1,2,0,"[{'name': 'important'}, {'name': 'Numba'}]",2021-04-14 04:25:18+00:00,2021-04-17 21:56:25+00:00,322267.0,"3 days, 17:31:07","[{'comment_id': 613409601, 'comment_body': 'I don\'t think we need these mappings; they should be picked up automatically from the `ScalarOp`s\' `nfunc_specs`&mdash;like they are in the JAX `dispatch` module.\r\n\r\nAlso, we might need to use ""primitive"" version of many of these basic math functions in order to make good use of `numba.vectorize`.  For instance, it\'s possible that the NumPy version of something like `+` is treated differently during Numba compilation, and the resulting loop might have more overhead when the NumPy function is used.  We might need to look at the compiled results to find out.', 'comment_created': datetime.datetime(2021, 4, 14, 16, 42, 46, tzinfo=datetime.timezone.utc), 'commenter': 'brandonwillard', 'type': 'User'}]","[{'commit_sha': '6008ccbb3eed29b2aa671e8c767b5c064066ea82', 'committer_username': 'kc611', 'committer_name': 'Kaustubh', 'committer_email': 'ckaustubhm06@gmail.com', 'commit_date': datetime.datetime(2019, 9, 15, 13, 33, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f5755c5e6ae4daa1b4acbc8a74bfa5495b35cc39', 'committer_username': 'kc611', 'committer_name': 'Kaustubh', 'committer_email': 'ckaustubhm06@gmail.com', 'commit_date': datetime.datetime(2019, 9, 15, 13, 33, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8f2f471426f3d50005837ebcdbdcc40d39fc2581', 'committer_username': 'brandonwillard', 'committer_name': 'Brandon T. Willard', 'committer_email': None, 'commit_date': datetime.datetime(2011, 8, 10, 14, 19, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '636cf019c991cc7fce2a0c1f5744585158514f2b', 'committer_username': 'kc611', 'committer_name': 'Kaustubh', 'committer_email': 'ckaustubhm06@gmail.com', 'commit_date': datetime.datetime(2019, 9, 15, 13, 33, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd21220e17bdba4d647917beb0a229c57bc9ca38d', 'committer_username': 'kc611', 'committer_name': 'Kaustubh', 'committer_email': 'ckaustubhm06@gmail.com', 'commit_date': datetime.datetime(2019, 9, 15, 13, 33, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7465f7f8d68dd715e59f3a7595f94347d0df4238', 'committer_username': 'brandonwillard', 'committer_name': 'Brandon T. Willard', 'committer_email': None, 'commit_date': datetime.datetime(2011, 8, 10, 14, 19, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '87489784f9b57657f07e2fc0c69408495c4791cd', 'committer_username': 'brandonwillard', 'committer_name': 'Brandon T. Willard', 'committer_email': None, 'commit_date': datetime.datetime(2011, 8, 10, 14, 19, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8e69ea1aa037d63aebb4e0837344685faf74c4b9', 'committer_username': 'kc611', 'committer_name': 'Kaustubh', 'committer_email': 'ckaustubhm06@gmail.com', 'commit_date': datetime.datetime(2019, 9, 15, 13, 33, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3a333c9cdea39ebae89ecf8add52443d226a4102', 'committer_username': 'brandonwillard', 'committer_name': 'Brandon T. Willard', 'committer_email': None, 'commit_date': datetime.datetime(2011, 8, 10, 14, 19, 12, tzinfo=datetime.timezone.utc)}]",Kaustubh,55352418,ckaustubhm06@gmail.com,User,,57,,48,65
613177581,Use flat AST-generated functions for JAX `FunctionGraph` conversion,"This PR changes the JAX translation process so that it converts `FunctionGraph`s into flattened AST-generated functions instead of nested functions.  The resulting code and JAXified functions are much simpler than the previous implementation's.

Here's an example:
```python
import inspect

import aesara.tensor as at

from aesara.link.jax.dispatch import jax_funcify
from aesara.graph.fg import FunctionGraph


x = at.vector(""x"")
y = at.vector(""y"")

out = at.exp(x**2 + x * y + 1)

out_fg = FunctionGraph([x, y], [out])

jax_fn = jax_funcify(out_fg)
```
```python
>>> print(inspect.getsource(jax_fn))

def jax_funcified_fgraph(x, y):
    auto_31 = dimshuffle(auto_30)
    auto_32 = elemwise(x, y)
    auto_34 = dimshuffle1(auto_33)
    auto_35 = power(x, auto_34)
    auto_36 = elemwise1(auto_35, auto_32)
    auto_37 = elemwise2(auto_36, auto_31)
    auto_38 = exp(auto_37)
    return (auto_38,)
```
This implementation uses the same basic idea as the prototype in #365, with the key differences being that it is very streamlined, requires minimal changes to be used with a simple `Linker` base class, and it generates the source _first_ then the AST from that.  Because of this, it requires no external libraries and produces easily debuggable functions.


This change addresses concerns over potential recomputation of outputs that are referenced more than once in a graph, or that are one of many outputs of a single `Apply` node.  A test has also been added to this PR that directly confirms such outputs are always reused and never recomputed (in both cases).

~Local tests replacing the `Elemwise` JAXification with `jax.vmap` also appear to work, so, now, we should seriously consider using `jax.vmap` in at least some cases (e.g. for `Composite` functions).~  This PR now contains a commit that uses `jax.numpy.vectorize` for `Elemwise` `Op`s with `Composite` scalar `Op`s.
",True,371,https://api.github.com/repos/aesara-devs/aesara/pulls/371,https://github.com/aesara-devs/aesara/pull/371,closed,1524,1329,10,5,1,0,3,1,"[{'name': 'enhancement'}, {'name': 'JAX'}, {'name': 'important'}]",2021-04-12 00:18:17+00:00,2021-04-14 04:00:06+00:00,186109.0,"2 days, 3:41:49",[],"[{'commit_sha': 'ae2009cbf3e7d69f889ec3619b9068743cd5d66d', 'committer_username': 'brandonwillard', 'committer_name': 'Brandon T. Willard', 'committer_email': None, 'commit_date': datetime.datetime(2011, 8, 10, 14, 19, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c5bb6e34bc12760a4ef6ff71f268813010188aac', 'committer_username': 'brandonwillard', 'committer_name': 'Brandon T. Willard', 'committer_email': None, 'commit_date': datetime.datetime(2011, 8, 10, 14, 19, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '536e2279d77bd8f222af6333d68486b5e7269ce0', 'committer_username': 'brandonwillard', 'committer_name': 'Brandon T. Willard', 'committer_email': None, 'commit_date': datetime.datetime(2011, 8, 10, 14, 19, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0a6ea4da03343d250b0a671a80e5436b8754c5e9', 'committer_username': 'brandonwillard', 'committer_name': 'Brandon T. Willard', 'committer_email': None, 'commit_date': datetime.datetime(2011, 8, 10, 14, 19, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd866d8e16a2e3d65a7840bc3d3cf8eca05845046', 'committer_username': 'brandonwillard', 'committer_name': 'Brandon T. Willard', 'committer_email': None, 'commit_date': datetime.datetime(2011, 8, 10, 14, 19, 12, tzinfo=datetime.timezone.utc)}]",Brandon T. Willard,971601,,User,,154,,92,236
613177581,Use flat AST-generated functions for JAX `FunctionGraph` conversion,"This PR changes the JAX translation process so that it converts `FunctionGraph`s into flattened AST-generated functions instead of nested functions.  The resulting code and JAXified functions are much simpler than the previous implementation's.

Here's an example:
```python
import inspect

import aesara.tensor as at

from aesara.link.jax.dispatch import jax_funcify
from aesara.graph.fg import FunctionGraph


x = at.vector(""x"")
y = at.vector(""y"")

out = at.exp(x**2 + x * y + 1)

out_fg = FunctionGraph([x, y], [out])

jax_fn = jax_funcify(out_fg)
```
```python
>>> print(inspect.getsource(jax_fn))

def jax_funcified_fgraph(x, y):
    auto_31 = dimshuffle(auto_30)
    auto_32 = elemwise(x, y)
    auto_34 = dimshuffle1(auto_33)
    auto_35 = power(x, auto_34)
    auto_36 = elemwise1(auto_35, auto_32)
    auto_37 = elemwise2(auto_36, auto_31)
    auto_38 = exp(auto_37)
    return (auto_38,)
```
This implementation uses the same basic idea as the prototype in #365, with the key differences being that it is very streamlined, requires minimal changes to be used with a simple `Linker` base class, and it generates the source _first_ then the AST from that.  Because of this, it requires no external libraries and produces easily debuggable functions.


This change addresses concerns over potential recomputation of outputs that are referenced more than once in a graph, or that are one of many outputs of a single `Apply` node.  A test has also been added to this PR that directly confirms such outputs are always reused and never recomputed (in both cases).

~Local tests replacing the `Elemwise` JAXification with `jax.vmap` also appear to work, so, now, we should seriously consider using `jax.vmap` in at least some cases (e.g. for `Composite` functions).~  This PR now contains a commit that uses `jax.numpy.vectorize` for `Elemwise` `Op`s with `Composite` scalar `Op`s.
",True,371,https://api.github.com/repos/aesara-devs/aesara/pulls/371,https://github.com/aesara-devs/aesara/pull/371,closed,1524,1329,10,5,1,0,3,1,"[{'name': 'enhancement'}, {'name': 'JAX'}, {'name': 'important'}]",2021-04-12 00:18:17+00:00,2021-04-14 04:00:06+00:00,186109.0,"2 days, 3:41:49",[],"[{'commit_sha': 'ae2009cbf3e7d69f889ec3619b9068743cd5d66d', 'committer_username': 'brandonwillard', 'committer_name': 'Brandon T. Willard', 'committer_email': None, 'commit_date': datetime.datetime(2011, 8, 10, 14, 19, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c5bb6e34bc12760a4ef6ff71f268813010188aac', 'committer_username': 'brandonwillard', 'committer_name': 'Brandon T. Willard', 'committer_email': None, 'commit_date': datetime.datetime(2011, 8, 10, 14, 19, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '536e2279d77bd8f222af6333d68486b5e7269ce0', 'committer_username': 'brandonwillard', 'committer_name': 'Brandon T. Willard', 'committer_email': None, 'commit_date': datetime.datetime(2011, 8, 10, 14, 19, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0a6ea4da03343d250b0a671a80e5436b8754c5e9', 'committer_username': 'brandonwillard', 'committer_name': 'Brandon T. Willard', 'committer_email': None, 'commit_date': datetime.datetime(2011, 8, 10, 14, 19, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd866d8e16a2e3d65a7840bc3d3cf8eca05845046', 'committer_username': 'brandonwillard', 'committer_name': 'Brandon T. Willard', 'committer_email': None, 'commit_date': datetime.datetime(2011, 8, 10, 14, 19, 12, tzinfo=datetime.timezone.utc)}]",Brandon T. Willard,971601,,User,,154,,92,236
640352905,Added Numba RV conversion,"
From what I gather :

 `_helperlib` stores a seperate state `ptr` value for Numba library. So during `RandomState` typification, we can sync this internal Numba state with Numpy's `RandomVariable` state. (However I'm not too sure that this will work every time.).

As for RandomVariable, it would be as simple as jitting the original Numpy function, as Numba has direct support for most of Numpy's `.random` methods. However Numba's implementations don't support `size` arguments. A simple way to overcome this would be looping over an empty array. However that's inefficient and I'm sure there are other better ways to do that. (Suggestions?)",True,403,https://api.github.com/repos/aesara-devs/aesara/pulls/403,https://github.com/aesara-devs/aesara/pull/403,closed,574,5,3,1,11,26,2,0,"[{'name': 'important'}, {'name': 'Numba'}]",2021-05-11 12:20:40+00:00,2021-06-25 22:52:39+00:00,3925919.0,"45 days, 10:31:59","[{'comment_id': 630203324, 'comment_body': 'Will this work for when dim of size is > 1?', 'comment_created': datetime.datetime(2021, 5, 11, 14, 9, 5, tzinfo=datetime.timezone.utc), 'commenter': 'twiecki', 'type': 'User'}, {'comment_id': 630258241, 'comment_body': 'Ah, no this was just supposed to show how this thing would work in general. I\'ll change this as soon as we finalize how this ""looping"" should be done.', 'comment_created': datetime.datetime(2021, 5, 11, 15, 1, 53, tzinfo=datetime.timezone.utc), 'commenter': 'kc611', 'type': 'User'}, {'comment_id': 630328062, 'comment_body': 'Got it, makes sense.', 'comment_created': datetime.datetime(2021, 5, 11, 16, 12, 52, tzinfo=datetime.timezone.utc), 'commenter': 'twiecki', 'type': 'User'}, {'comment_id': 630449523, 'comment_body': 'This line mentions JAX.', 'comment_created': datetime.datetime(2021, 5, 11, 19, 7, 32, tzinfo=datetime.timezone.utc), 'commenter': 'brandonwillard', 'type': 'User'}, {'comment_id': 630450728, 'comment_body': 'We should consider changing `numba_typify` so that it returns the ""storage"" list instead of just the contents of said list.  It seems like that would allow us to remove the explicit `RandomState` condition in this module.', 'comment_created': datetime.datetime(2021, 5, 11, 19, 9, 33, tzinfo=datetime.timezone.utc), 'commenter': 'brandonwillard', 'type': 'User'}, {'comment_id': 630454840, 'comment_body': 'Writing a manual loop here is fine&mdash;if necessary&mdash;because Numba can produce very performant loops.  My main concern is the overhead implied by a large number of independent calls to the underlying sampler code, instead of one call that handles the `size` parameter.  I still need to look at the Numba implementation to get a sense of that overhead, if any.\r\n\r\nRegardless, a loop will work for now, and, to handle arbitrary dimensions in such a loop, we can just use `np.ndindex`.', 'comment_created': datetime.datetime(2021, 5, 11, 19, 16, 29, tzinfo=datetime.timezone.utc), 'commenter': 'brandonwillard', 'type': 'User'}, {'comment_id': 631068071, 'comment_body': '@brandonwillard Is this what you meant by changing `numba_typify` so that it returns the ""storage"" list ?', 'comment_created': datetime.datetime(2021, 5, 12, 13, 59, 10, tzinfo=datetime.timezone.utc), 'commenter': 'kc611', 'type': 'User'}, {'comment_id': 631219870, 'comment_body': 'Yeah, just an implementation that takes/uses and returns a ""storage"" list, so that we can keep the `RandomState`-specific requirements in `numba_typify_RandomState` (i.e. recreate the ""storage"" list in _there_).\r\n\r\nThis particular change makes the primary `data` argument a `list`, though, which means we can\'t recreate a ""storage"" list in the dispatch specializations when/if that\'s needed.  Instead, we can change the first/`data` argument into a `storage` argument that contains the single-element ""storage"" list (i.e. `state` in `numba_typify_RandomState` will be a list containing the `RandomState` object) and make `numba_typify` return the same list.', 'comment_created': datetime.datetime(2021, 5, 12, 16, 45, 56, tzinfo=datetime.timezone.utc), 'commenter': 'brandonwillard', 'type': 'User'}, {'comment_id': 631670998, 'comment_body': ""I don't exactly understand how this will be implemented though.\r\n\r\nIf you have a particular implementation in mind (and you don't mind), can you go ahead and implement that in this PR. (Cause the current implementation of `numba_typify` in this PR will have quite bit of overhead because of looping over each data member. )\r\n\r\nEdit: For now I've removed the current implementation. "", 'comment_created': datetime.datetime(2021, 5, 13, 9, 3, 16, tzinfo=datetime.timezone.utc), 'commenter': 'kc611', 'type': 'User'}, {'comment_id': 632991381, 'comment_body': 'We should be able to avoid this costly jump to object mode by using `numba.np.unsafe.ndarray.to_fixed_tuple` or `create_tuple_creator` and `tuple_setitem`.  See [`numba_funcify_Reshape`](https://github.com/pymc-devs/aesara/blob/abf6026c9c2bad19216275e127e3043f30d93360/aesara/link/numba/dispatch.py#L965) for an example of the latter.', 'comment_created': datetime.datetime(2021, 5, 15, 18, 30, 21, tzinfo=datetime.timezone.utc), 'commenter': 'brandonwillard', 'type': 'User'}, {'comment_id': 632992372, 'comment_body': 'I just tried changing `numba_funcify_Reshape` so that it uses `to_fixed_tuple`, and that approach works well&mdash;while also being a lot more succinct.', 'comment_created': datetime.datetime(2021, 5, 15, 18, 39, 36, tzinfo=datetime.timezone.utc), 'commenter': 'brandonwillard', 'type': 'User'}, {'comment_id': 632994302, 'comment_body': ""[Here's a PR](https://github.com/pymc-devs/aesara/pull/413) with those changes."", 'comment_created': datetime.datetime(2021, 5, 15, 18, 59, 39, tzinfo=datetime.timezone.utc), 'commenter': 'brandonwillard', 'type': 'User'}, {'comment_id': 633091241, 'comment_body': '```suggestion\r\n    tuple_size = get_vector_length(node.inputs[1])\r\n```\r\nSomething like that should handle the non-`Constant` cases, as well.', 'comment_created': datetime.datetime(2021, 5, 16, 13, 26, 36, tzinfo=datetime.timezone.utc), 'commenter': 'brandonwillard', 'type': 'User'}, {'comment_id': 633580703, 'comment_body': 'This is something I tried (without much success) as an attempt to support custom implemented distributions. Somehow the output from this function gets classified as a `pyobject` rather than the `numba` type of the output value. (Even though both of the functions used inside are supported by Numba individually.)\r\n\r\nNote: This particular implementation is taken from `scipy.stats` which does something pretty close to this.\r\n\r\nhttps://github.com/scipy/scipy/blob/36af73c98f71f40bc69efbeb4501b1f2b9c3d00c/scipy/stats/_continuous_distns.py#L3504', 'comment_created': datetime.datetime(2021, 5, 17, 14, 27, 45, tzinfo=datetime.timezone.utc), 'commenter': 'kc611', 'type': 'User'}, {'comment_id': 633788363, 'comment_body': ""This is re-implementing single dispatch (inside of single dispatch); we can just create new `numba_funcify_*` functions for each custom implementation instead.\r\n\r\nIf we need to reuse some code from this function, let's abstract it out like we do in the other dispatch implementations."", 'comment_created': datetime.datetime(2021, 5, 17, 18, 59, 41, tzinfo=datetime.timezone.utc), 'commenter': 'brandonwillard', 'type': 'User'}, {'comment_id': 634003777, 'comment_body': 'Oh, also, if we want to simplify the process of creating dispatch functions and/or keep them closer/within their class definitions, we can consider doing something like we did for `Distribution` (see [here](https://github.com/pymc-devs/pymc3/blob/v4/pymc3/distributions/distribution.py#L99)).', 'comment_created': datetime.datetime(2021, 5, 18, 2, 56, 48, tzinfo=datetime.timezone.utc), 'commenter': 'brandonwillard', 'type': 'User'}, {'comment_id': 634467918, 'comment_body': ""> we can just create new numba_funcify_* functions for each custom implementation instead.\r\n\r\nSure, we can do this too. But I recommend we at-least put the implementation of specific `RandomVariable`s in a different file cause it'll become more and more cluttered as we start to support more and more custom RV's. \r\n\r\nThe exact implementation isn't the issue here though, I was (and still am) concerned  with why it isn't working. Or rather what am I missing here? "", 'comment_created': datetime.datetime(2021, 5, 18, 14, 59, 1, tzinfo=datetime.timezone.utc), 'commenter': 'kc611', 'type': 'User'}, {'comment_id': 637213653, 'comment_body': ""> But I recommend we at-least put the implementation of specific `RandomVariable`s in a different file cause it'll become more and more cluttered as we start to support more and more custom RV's.\r\n\r\nDefinitely; we should've already split `*.numba.dispatch` into separate modules.  I'm not sure when it would make sense to start keeping these dispatch functions in the modules of their respective `Op`s, but that time should come.  Once we've tested the Numba backend enough, and established it as a true replacement for the C backend, we can absolutely start doing that."", 'comment_created': datetime.datetime(2021, 5, 21, 20, 25, 14, tzinfo=datetime.timezone.utc), 'commenter': 'brandonwillard', 'type': 'User'}, {'comment_id': 645479497, 'comment_body': ""For now, we can get away with this way of implementing non numpy RV's but it'll be nice to have a 'object mode' to fall back to if this fails. (Since, this particular implementation assumes we can convert any RV from `scipy.stats` to it's corresponding Numpy/Numba version, but that might not be always the case)"", 'comment_created': datetime.datetime(2021, 6, 4, 10, 52, 51, tzinfo=datetime.timezone.utc), 'commenter': 'kc611', 'type': 'User'}, {'comment_id': 645897337, 'comment_body': 'Exactly!', 'comment_created': datetime.datetime(2021, 6, 4, 23, 4, 7, tzinfo=datetime.timezone.utc), 'commenter': 'brandonwillard', 'type': 'User'}, {'comment_id': 650392444, 'comment_body': ""Just a minor question. Over here, for distributions that accept arrays as inputs. (For instance `beta`) this doesn't accept anything other than a `float` value. If so then how is it that we can pass arrays (as `dvector`s) in Aesara graphs with Numba ? (like done in `test_random.test_RandomVariable`) "", 'comment_created': datetime.datetime(2021, 6, 12, 13, 24, 5, tzinfo=datetime.timezone.utc), 'commenter': 'kc611', 'type': 'User'}, {'comment_id': 650429199, 'comment_body': ""We're `numba.vectorize`ing these `np.random` functions via the Aesara Numba dispatch.  That's what makes them work with array inputs.\r\n\r\nWe can do the same for testing."", 'comment_created': datetime.datetime(2021, 6, 12, 19, 45, 40, tzinfo=datetime.timezone.utc), 'commenter': 'brandonwillard', 'type': 'User'}, {'comment_id': 650511666, 'comment_body': ""I tried doing a `numba.vectorize` but it still doesn't work with array inputs. There's probably something else I'm missing here.\r\n\r\nAlso a bit hackish but it seems functions compiled with `numba.vectorize` (without the decorator defining types, probably), they don't accept functions without any arguments. So I passed a single dummy variable(that `a`). Is this an issue with Numba or is it supposed to work this way."", 'comment_created': datetime.datetime(2021, 6, 13, 11, 30, 7, tzinfo=datetime.timezone.utc), 'commenter': 'kc611', 'type': 'User'}, {'comment_id': 651290348, 'comment_body': 'The body of the function is supposed to represent the _scalar_ operation that\'s broadcast across arrays (i.e. ""vectorized""), which, in this case, would be one of the `np.random` functions.  In other words, the `numba.vectorized` function should have the same signature as `numpy_fn`&mdash;more or less.\r\n\r\nVarargs (i.e. `*inputs`) might be an issue for `numba.vectorize`, though.  This is why we create functions via source code: to get past some vararg limitations in Numba.\r\n\r\nSee https://github.com/numba/numba/issues/6954.  Also, don\'t hesitate to attempt a solution for https://github.com/numba/numba/issues/6954 in Numba; the more we know about&mdash;and can help&mdash;Numba, the better.', 'comment_created': datetime.datetime(2021, 6, 14, 21, 28, 29, tzinfo=datetime.timezone.utc), 'commenter': 'brandonwillard', 'type': 'User'}, {'comment_id': 653691399, 'comment_body': ""> Varargs (i.e. *inputs) might be an issue for numba.vectorize, though.\r\n\r\nYeah, that's a problem. We can just use the `make_numba_random_fn` in this case, If our goal at the end is just comparing the inputs with and without the Numba function being in the graph. "", 'comment_created': datetime.datetime(2021, 6, 17, 15, 44, 2, tzinfo=datetime.timezone.utc), 'commenter': 'kc611', 'type': 'User'}, {'comment_id': 659051229, 'comment_body': ""We'll do this in a separate PR; I don't want to hold this up any longer."", 'comment_created': datetime.datetime(2021, 6, 25, 21, 39, 59, tzinfo=datetime.timezone.utc), 'commenter': 'brandonwillard', 'type': 'User'}]","[{'commit_sha': 'fcf784ee071f693d679be9e13d5a8c1adda803ca', 'committer_username': 'kc611', 'committer_name': 'Kaustubh', 'committer_email': 'ckaustubhm06@gmail.com', 'commit_date': datetime.datetime(2019, 9, 15, 13, 33, 26, tzinfo=datetime.timezone.utc)}]",Kaustubh,55352418,ckaustubhm06@gmail.com,User,,57,,48,65
647669348,Introduce Generator in RandomVariable,This PR will serve as the entry point of Numpy's new `Generator` API for use in `RandomVariable` class.,True,420,https://api.github.com/repos/aesara-devs/aesara/pulls/420,https://github.com/aesara-devs/aesara/pull/420,closed,2424,2064,79,6,16,6,1,1,[{'name': 'important'}],2021-05-19 13:30:05+00:00,2021-06-25 16:47:04+00:00,3208619.0,"37 days, 3:16:59","[{'comment_id': 637470311, 'comment_body': '```suggestion\r\n        if isinstance(a, (np.random.Generator, np.random.RandomState)):\r\n```', 'comment_created': datetime.datetime(2021, 5, 23, 1, 13, 34, tzinfo=datetime.timezone.utc), 'commenter': 'brandonwillard', 'type': 'User'}, {'comment_id': 640844469, 'comment_body': ""Regarding the Jax conversion. I was thinking maybe we could generate a `PRNG` over here (and do the same with `RandomState`) and store it in the `state` dictionary as `jax_key`.\r\n\r\nAnd in the `RandomVariable` conversion down below we could update this `jax_key` instead of the Numpy's state key. \r\n\r\nThis way we could implement support for all `Generators` since we'll simply have to change the way `PRNG` is created for each of them. Which is easy if it's being done in this part of code rather than the `RandomVariable` part."", 'comment_created': datetime.datetime(2021, 5, 27, 17, 54, 11, tzinfo=datetime.timezone.utc), 'commenter': 'kc611', 'type': 'User'}, {'comment_id': 640845873, 'comment_body': ""As long as `jax_key` stays localized to the JAX compilation process and its results (e.g. we don't have to alter the generic `RandomState`/`Generator` types to explicitly account for it), we should be fine."", 'comment_created': datetime.datetime(2021, 5, 27, 17, 56, 17, tzinfo=datetime.timezone.utc), 'commenter': 'brandonwillard', 'type': 'User'}, {'comment_id': 641962493, 'comment_body': 'It looks like this will reset the state on the second call to `random`.  Try creating `rng = np.random.default_rng(utt.fetch_seed())` once and using `rng` for both these cases.', 'comment_created': datetime.datetime(2021, 5, 29, 17, 17, 9, tzinfo=datetime.timezone.utc), 'commenter': 'brandonwillard', 'type': 'User'}, {'comment_id': 641964120, 'comment_body': ""Already tried, and also tried passing that rng all the way to `verify_grad` it still fails. And strangely I can't replicate any of this locally. I have to commit and 'uncommit' each time. \n\nThis is just one of my (random) unsuccessful attempts.\n\nI think it might be an issue with 'verify_grad' itself. Either that or its interface in unit test tools. Since there are also changes in both. "", 'comment_created': datetime.datetime(2021, 5, 29, 17, 34, 15, tzinfo=datetime.timezone.utc), 'commenter': 'kc611', 'type': 'User'}, {'comment_id': 641970454, 'comment_body': ""Well, let's keep that change anyway. \r\n\r\nOtherwise, the failures could simply be due to the underlying RNG change generating a new set of samples, so we can update the test for this difference (e.g. the accepted error ranges and such), find a more advantageous seed, or something else.  Changing the seed is the least preferrable, though."", 'comment_created': datetime.datetime(2021, 5, 29, 18, 32, 7, tzinfo=datetime.timezone.utc), 'commenter': 'brandonwillard', 'type': 'User'}]","[{'commit_sha': '34bea48a030fe682d94a155fa1ff25ff1d897cad', 'committer_username': 'kc611', 'committer_name': 'Kaustubh', 'committer_email': 'ckaustubhm06@gmail.com', 'commit_date': datetime.datetime(2019, 9, 15, 13, 33, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '438a536256254927a797d50c09098efce79bfdac', 'committer_username': 'kc611', 'committer_name': 'Kaustubh', 'committer_email': 'ckaustubhm06@gmail.com', 'commit_date': datetime.datetime(2019, 9, 15, 13, 33, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1e43902b1b0fa82467785a0b0faac905a4bf5564', 'committer_username': 'kc611', 'committer_name': 'Kaustubh', 'committer_email': 'ckaustubhm06@gmail.com', 'commit_date': datetime.datetime(2019, 9, 15, 13, 33, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '38d3e047cb92a1fcf1be8e9b0b3507a61b21c4d3', 'committer_username': 'kc611', 'committer_name': 'Kaustubh', 'committer_email': 'ckaustubhm06@gmail.com', 'commit_date': datetime.datetime(2019, 9, 15, 13, 33, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e2af2b94836c6c24c355f2cde95b2440958580aa', 'committer_username': 'kc611', 'committer_name': 'Kaustubh', 'committer_email': 'ckaustubhm06@gmail.com', 'commit_date': datetime.datetime(2019, 9, 15, 13, 33, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '08597552beb4db9799abfd51035acbd4c805edf7', 'committer_username': 'kc611', 'committer_name': 'Kaustubh', 'committer_email': 'ckaustubhm06@gmail.com', 'commit_date': datetime.datetime(2019, 9, 15, 13, 33, 26, tzinfo=datetime.timezone.utc)}]",Kaustubh,55352418,ckaustubhm06@gmail.com,User,,57,,48,65
663028217,"Refactored continuous distributions to v4 (AsymmetricLaplace, HalfStudentT, ExGaussian, Interpolated)","Linked Issue: #4686 

This PR refactors the following distributions:

- AsymmetricLaplace
- HalfStudentT
-  ExGaussian
-  Interpolated

(Random Note: It's strange how git is showing that many file changes in the test file `pymc3/tests/test_distributions.py` when only difference I made is of few lines ?)",True,4746,https://api.github.com/repos/pymc-devs/pymc/pulls/4746,https://github.com/pymc-devs/pymc/pull/4746,closed,261,225,3,5,7,34,0,0,[],2021-06-06 19:00:46+00:00,2021-06-14 07:13:41+00:00,648775.0,"7 days, 12:12:55","[{'comment_id': 646177523, 'comment_body': '`lam` and `sd` are not being used, they should be removed, no?', 'comment_created': datetime.datetime(2021, 6, 6, 19, 36, 27, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 646177654, 'comment_body': 'Only one default parametrization should go into `super().dist`, probably `[nu, sigma]`. You can check the already refactored t-student for an example. ', 'comment_created': datetime.datetime(2021, 6, 6, 19, 37, 52, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 646177775, 'comment_body': 'Similarly, the `logp` should receive only one default parametrization (the same you define in the `dist` classmethod.  ', 'comment_created': datetime.datetime(2021, 6, 6, 19, 39, 38, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 646177877, 'comment_body': 'Same here, `sd` should not be in here', 'comment_created': datetime.datetime(2021, 6, 6, 19, 40, 12, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 646178209, 'comment_body': 'the `interp_op` will not be reached from the`logp`, you will have to define it in there.', 'comment_created': datetime.datetime(2021, 6, 6, 19, 43, 14, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 646178267, 'comment_body': ""A bit confusingly, we are not using `self` instances, the logp has to work as a standard function dependent only on it's inputs. I am referring to the `self.interp_op`"", 'comment_created': datetime.datetime(2021, 6, 6, 19, 44, 12, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 646401178, 'comment_body': 'This new indentation is (probably) wrong', 'comment_created': datetime.datetime(2021, 6, 7, 9, 1, 52, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 646402207, 'comment_body': 'This will need to be refactored for this PR, otherwise we have no test that covers the `logp` method of the `Interpolated`, or do we?', 'comment_created': datetime.datetime(2021, 6, 7, 9, 3, 11, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 646443080, 'comment_body': 'Yea, I plan on doing exactly that in this PR. It seems some problem with the arguments not being passed correctly.', 'comment_created': datetime.datetime(2021, 6, 7, 9, 58, 1, tzinfo=datetime.timezone.utc), 'commenter': 'kc611', 'type': 'User'}, {'comment_id': 646447206, 'comment_body': ""I'm a bit skeptical about this particular parametrization, since that required removing this condition over here.(I don't know if this particular condition is important or not, though)"", 'comment_created': datetime.datetime(2021, 6, 7, 10, 3, 39, tzinfo=datetime.timezone.utc), 'commenter': 'kc611', 'type': 'User'}, {'comment_id': 646448160, 'comment_body': ""everything that is not going into `dist` can be commented for the time being (and doesn't need the `as_tensor_variable` call either. This is related to sampler starting point logic that has not been refactored."", 'comment_created': datetime.datetime(2021, 6, 7, 10, 5, 2, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 646449478, 'comment_body': 'The lam sigma is a bit weird in that one can be converted from the other, even if the original is negative. You can obtain the lam again from sigma by  using the `get_tau_sigma` inside the `logp`. This way you can keep the lam check in the `bound`, but probably we should just open a separate issue to fix `get_tau_sigma`', 'comment_created': datetime.datetime(2021, 6, 7, 10, 6, 59, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 646450134, 'comment_body': 'mean and variance can be commented out for the same reason as below. They are not being used by the current codebase', 'comment_created': datetime.datetime(2021, 6, 7, 10, 7, 55, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 646451288, 'comment_body': 'typo `ssigma`', 'comment_created': datetime.datetime(2021, 6, 7, 10, 9, 37, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 646451439, 'comment_body': 'leftover typo: `mu = mu`', 'comment_created': datetime.datetime(2021, 6, 7, 10, 9, 50, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 646453975, 'comment_body': ""Something is off with the `rng_fn` signature. `p` seems to be overwritten so it shouldn't be there, and if you want to pass the `cdf` already specified it should also be in the `dist` classmethod bellow and `ndim_params` shoud be 3 elements long."", 'comment_created': datetime.datetime(2021, 6, 7, 10, 13, 41, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 646454422, 'comment_body': 'I think `ndims_params` cannot be scalar (i.e., `0`), right? In that case it should be `ndims_params = [1, 1]`', 'comment_created': datetime.datetime(2021, 6, 7, 10, 14, 20, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 646455751, 'comment_body': ""`Z` is not being passed to `super().dist()` and as such won't reach the `logp`. It seems it is not necessary for the random draws so it's probably better to also specify it inside the `logp` from the `x_points` input."", 'comment_created': datetime.datetime(2021, 6, 7, 10, 16, 15, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 646467471, 'comment_body': 'Ah, okay got it.', 'comment_created': datetime.datetime(2021, 6, 7, 10, 34, 7, tzinfo=datetime.timezone.utc), 'commenter': 'kc611', 'type': 'User'}, {'comment_id': 646485296, 'comment_body': '`ndims_params` should be `[0, 0]`, i.e., the same length as the number of parameters', 'comment_created': datetime.datetime(2021, 6, 7, 11, 1, 36, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 646486380, 'comment_body': 'No need to add the assert here, it should just be in the `dist` classmethod', 'comment_created': datetime.datetime(2021, 6, 7, 11, 3, 30, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 646490859, 'comment_body': ""Inside `rng_fn` there shouldn't be any symbolic operations. I didn't realize you need `Z` here as well.\r\n\r\nYou can either use scipy equivalents or, if easier, have everything that's needed for both `logp` and the `rng_fn` defined once during the `dist classmethod` and passed to `super` as additional inputs (and expected in both the `logp` and `rng_fn`. This way, the `rng_fn` will receive the non-symbolic arguments as inputs during normal sampling, while the `logp` method will receive the `symbolic` ones. \r\n\r\nApologies if this sounds very confusing :D"", 'comment_created': datetime.datetime(2021, 6, 7, 11, 10, 55, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 646497385, 'comment_body': ""I think I should probably refactor the test first, just so that I'll have an intuition of how this entire `Interpolated` thing should work. "", 'comment_created': datetime.datetime(2021, 6, 7, 11, 19, 48, tzinfo=datetime.timezone.utc), 'commenter': 'kc611', 'type': 'User'}, {'comment_id': 646512708, 'comment_body': 'Yeah, you can also check it out in V3, and see how it works there (and in the test). That may help, since this is a very non-standard one', 'comment_created': datetime.datetime(2021, 6, 7, 11, 45, 18, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 647656554, 'comment_body': 'It looks like we cannot directly access the index of `pdf` or `x` like this. (The `index` variable is an `Elemwise` during the initial graph construction and hence this fails.). What class/function will be a good substitute for this?', 'comment_created': datetime.datetime(2021, 6, 8, 17, 39, 28, tzinfo=datetime.timezone.utc), 'commenter': 'kc611', 'type': 'User'}, {'comment_id': 647663424, 'comment_body': 'I think the problem is that you are using symbolic operations inside the rng_fn. Everything there should be non-symbolic AFAIK', 'comment_created': datetime.datetime(2021, 6, 8, 17, 49, 12, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 647682500, 'comment_body': ""That indeed is the problem. What I wanted to know was what is the non-symbolic substitute for such operation?\n\n (If there isn't I'll try your suggestion from https://github.com/pymc-devs/pymc3/pull/4746#discussion_r646490859 )"", 'comment_created': datetime.datetime(2021, 6, 8, 18, 9, 13, tzinfo=datetime.timezone.utc), 'commenter': 'kc611', 'type': 'User'}, {'comment_id': 647736335, 'comment_body': 'I think the symbolic ops used in here are all wrapping standard scipy function: https://github.com/pymc-devs/pymc3/blob/25eaa715018ed7add3ba1289b6ad068636e29e5e/pymc3/distributions/dist_math.py#L318', 'comment_created': datetime.datetime(2021, 6, 8, 19, 31, 42, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 648413900, 'comment_body': ""I tried fiddling around with `SplineWrapper` but I don't think that'll be of much use here since we are using different methods of `InterpolatedUnivariateSpline` like the `.integral()` and the `.antiderivate()` ( But can we actually use `SplineWrapper` like that ? )\r\n\r\nInstead as you mentioned in https://github.com/pymc-devs/pymc3/pull/4746#discussion_r646490859 I just kept the non-symbolic operations in `dist` and forwarded `cdf_points` as an extra argument. "", 'comment_created': datetime.datetime(2021, 6, 9, 15, 17, 40, tzinfo=datetime.timezone.utc), 'commenter': 'kc611', 'type': 'User'}, {'comment_id': 649418586, 'comment_body': 'should the import be at the top?', 'comment_created': datetime.datetime(2021, 6, 10, 18, 17, 4, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 649419682, 'comment_body': 'These tests that rely on `BaseTestCases.BaseTestCase` should be removed and replaced with tests using the new `BaseTestDistribution`', 'comment_created': datetime.datetime(2021, 6, 10, 18, 18, 41, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 649425823, 'comment_body': ""This one should be moved to it's own class. The reason for this is that after refactoring all distributions, the `TestScalarParameterSamples` where this one is will disappear, but this distribution is special enough that the test should be kept (i.e., we are not simply drawing from scipy / numpy distributions)."", 'comment_created': datetime.datetime(2021, 6, 10, 18, 28, 15, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 649429474, 'comment_body': 'These tests that are using a `ref_rand` should be removed as well, unless there is a good reason to test them against a reference. If we are just copying the same scipy/numpy expression we use in our `random Ops` the default tests in `BaseTestDistribution` should be used instead.', 'comment_created': datetime.datetime(2021, 6, 10, 18, 34, 1, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 649706884, 'comment_body': ""I just moved it to it's own class and named it `TestInterpolated`"", 'comment_created': datetime.datetime(2021, 6, 11, 5, 48, 56, tzinfo=datetime.timezone.utc), 'commenter': 'kc611', 'type': 'User'}]","[{'commit_sha': 'bfc384b06428c6805624a7d4bfd7104d48f25374', 'committer_username': 'kc611', 'committer_name': 'Kaustubh', 'committer_email': 'ckaustubhm06@gmail.com', 'commit_date': datetime.datetime(2019, 9, 15, 13, 33, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7e34e8622b3cb41877d6b8fa97ba8e66d7a8e2a3', 'committer_username': 'kc611', 'committer_name': 'Kaustubh', 'committer_email': 'ckaustubhm06@gmail.com', 'commit_date': datetime.datetime(2019, 9, 15, 13, 33, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '53e4e0ef1bbcaf4ab50af58ca3e01e7aec0b9835', 'committer_username': 'kc611', 'committer_name': 'Kaustubh', 'committer_email': 'ckaustubhm06@gmail.com', 'commit_date': datetime.datetime(2019, 9, 15, 13, 33, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c421634627cb2508a4a128f6b165121d0b861cbb', 'committer_username': 'kc611', 'committer_name': 'Kaustubh', 'committer_email': 'ckaustubhm06@gmail.com', 'commit_date': datetime.datetime(2019, 9, 15, 13, 33, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e684ede94d9b2a26eb2a4130111a1b9539f580ae', 'committer_username': 'ricardoV94', 'committer_name': 'Ricardo Vieira', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 26, 14, 9, 21, tzinfo=datetime.timezone.utc)}]",Kaustubh,55352418,ckaustubhm06@gmail.com,User,,57,,48,65
663028217,"Refactored continuous distributions to v4 (AsymmetricLaplace, HalfStudentT, ExGaussian, Interpolated)","Linked Issue: #4686 

This PR refactors the following distributions:

- AsymmetricLaplace
- HalfStudentT
-  ExGaussian
-  Interpolated

(Random Note: It's strange how git is showing that many file changes in the test file `pymc3/tests/test_distributions.py` when only difference I made is of few lines ?)",True,4746,https://api.github.com/repos/pymc-devs/pymc/pulls/4746,https://github.com/pymc-devs/pymc/pull/4746,closed,261,225,3,5,7,34,0,0,[],2021-06-06 19:00:46+00:00,2021-06-14 07:13:41+00:00,648775.0,"7 days, 12:12:55","[{'comment_id': 646177523, 'comment_body': '`lam` and `sd` are not being used, they should be removed, no?', 'comment_created': datetime.datetime(2021, 6, 6, 19, 36, 27, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 646177654, 'comment_body': 'Only one default parametrization should go into `super().dist`, probably `[nu, sigma]`. You can check the already refactored t-student for an example. ', 'comment_created': datetime.datetime(2021, 6, 6, 19, 37, 52, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 646177775, 'comment_body': 'Similarly, the `logp` should receive only one default parametrization (the same you define in the `dist` classmethod.  ', 'comment_created': datetime.datetime(2021, 6, 6, 19, 39, 38, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 646177877, 'comment_body': 'Same here, `sd` should not be in here', 'comment_created': datetime.datetime(2021, 6, 6, 19, 40, 12, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 646178209, 'comment_body': 'the `interp_op` will not be reached from the`logp`, you will have to define it in there.', 'comment_created': datetime.datetime(2021, 6, 6, 19, 43, 14, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 646178267, 'comment_body': ""A bit confusingly, we are not using `self` instances, the logp has to work as a standard function dependent only on it's inputs. I am referring to the `self.interp_op`"", 'comment_created': datetime.datetime(2021, 6, 6, 19, 44, 12, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 646401178, 'comment_body': 'This new indentation is (probably) wrong', 'comment_created': datetime.datetime(2021, 6, 7, 9, 1, 52, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 646402207, 'comment_body': 'This will need to be refactored for this PR, otherwise we have no test that covers the `logp` method of the `Interpolated`, or do we?', 'comment_created': datetime.datetime(2021, 6, 7, 9, 3, 11, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 646443080, 'comment_body': 'Yea, I plan on doing exactly that in this PR. It seems some problem with the arguments not being passed correctly.', 'comment_created': datetime.datetime(2021, 6, 7, 9, 58, 1, tzinfo=datetime.timezone.utc), 'commenter': 'kc611', 'type': 'User'}, {'comment_id': 646447206, 'comment_body': ""I'm a bit skeptical about this particular parametrization, since that required removing this condition over here.(I don't know if this particular condition is important or not, though)"", 'comment_created': datetime.datetime(2021, 6, 7, 10, 3, 39, tzinfo=datetime.timezone.utc), 'commenter': 'kc611', 'type': 'User'}, {'comment_id': 646448160, 'comment_body': ""everything that is not going into `dist` can be commented for the time being (and doesn't need the `as_tensor_variable` call either. This is related to sampler starting point logic that has not been refactored."", 'comment_created': datetime.datetime(2021, 6, 7, 10, 5, 2, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 646449478, 'comment_body': 'The lam sigma is a bit weird in that one can be converted from the other, even if the original is negative. You can obtain the lam again from sigma by  using the `get_tau_sigma` inside the `logp`. This way you can keep the lam check in the `bound`, but probably we should just open a separate issue to fix `get_tau_sigma`', 'comment_created': datetime.datetime(2021, 6, 7, 10, 6, 59, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 646450134, 'comment_body': 'mean and variance can be commented out for the same reason as below. They are not being used by the current codebase', 'comment_created': datetime.datetime(2021, 6, 7, 10, 7, 55, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 646451288, 'comment_body': 'typo `ssigma`', 'comment_created': datetime.datetime(2021, 6, 7, 10, 9, 37, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 646451439, 'comment_body': 'leftover typo: `mu = mu`', 'comment_created': datetime.datetime(2021, 6, 7, 10, 9, 50, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 646453975, 'comment_body': ""Something is off with the `rng_fn` signature. `p` seems to be overwritten so it shouldn't be there, and if you want to pass the `cdf` already specified it should also be in the `dist` classmethod bellow and `ndim_params` shoud be 3 elements long."", 'comment_created': datetime.datetime(2021, 6, 7, 10, 13, 41, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 646454422, 'comment_body': 'I think `ndims_params` cannot be scalar (i.e., `0`), right? In that case it should be `ndims_params = [1, 1]`', 'comment_created': datetime.datetime(2021, 6, 7, 10, 14, 20, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 646455751, 'comment_body': ""`Z` is not being passed to `super().dist()` and as such won't reach the `logp`. It seems it is not necessary for the random draws so it's probably better to also specify it inside the `logp` from the `x_points` input."", 'comment_created': datetime.datetime(2021, 6, 7, 10, 16, 15, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 646467471, 'comment_body': 'Ah, okay got it.', 'comment_created': datetime.datetime(2021, 6, 7, 10, 34, 7, tzinfo=datetime.timezone.utc), 'commenter': 'kc611', 'type': 'User'}, {'comment_id': 646485296, 'comment_body': '`ndims_params` should be `[0, 0]`, i.e., the same length as the number of parameters', 'comment_created': datetime.datetime(2021, 6, 7, 11, 1, 36, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 646486380, 'comment_body': 'No need to add the assert here, it should just be in the `dist` classmethod', 'comment_created': datetime.datetime(2021, 6, 7, 11, 3, 30, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 646490859, 'comment_body': ""Inside `rng_fn` there shouldn't be any symbolic operations. I didn't realize you need `Z` here as well.\r\n\r\nYou can either use scipy equivalents or, if easier, have everything that's needed for both `logp` and the `rng_fn` defined once during the `dist classmethod` and passed to `super` as additional inputs (and expected in both the `logp` and `rng_fn`. This way, the `rng_fn` will receive the non-symbolic arguments as inputs during normal sampling, while the `logp` method will receive the `symbolic` ones. \r\n\r\nApologies if this sounds very confusing :D"", 'comment_created': datetime.datetime(2021, 6, 7, 11, 10, 55, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 646497385, 'comment_body': ""I think I should probably refactor the test first, just so that I'll have an intuition of how this entire `Interpolated` thing should work. "", 'comment_created': datetime.datetime(2021, 6, 7, 11, 19, 48, tzinfo=datetime.timezone.utc), 'commenter': 'kc611', 'type': 'User'}, {'comment_id': 646512708, 'comment_body': 'Yeah, you can also check it out in V3, and see how it works there (and in the test). That may help, since this is a very non-standard one', 'comment_created': datetime.datetime(2021, 6, 7, 11, 45, 18, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 647656554, 'comment_body': 'It looks like we cannot directly access the index of `pdf` or `x` like this. (The `index` variable is an `Elemwise` during the initial graph construction and hence this fails.). What class/function will be a good substitute for this?', 'comment_created': datetime.datetime(2021, 6, 8, 17, 39, 28, tzinfo=datetime.timezone.utc), 'commenter': 'kc611', 'type': 'User'}, {'comment_id': 647663424, 'comment_body': 'I think the problem is that you are using symbolic operations inside the rng_fn. Everything there should be non-symbolic AFAIK', 'comment_created': datetime.datetime(2021, 6, 8, 17, 49, 12, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 647682500, 'comment_body': ""That indeed is the problem. What I wanted to know was what is the non-symbolic substitute for such operation?\n\n (If there isn't I'll try your suggestion from https://github.com/pymc-devs/pymc3/pull/4746#discussion_r646490859 )"", 'comment_created': datetime.datetime(2021, 6, 8, 18, 9, 13, tzinfo=datetime.timezone.utc), 'commenter': 'kc611', 'type': 'User'}, {'comment_id': 647736335, 'comment_body': 'I think the symbolic ops used in here are all wrapping standard scipy function: https://github.com/pymc-devs/pymc3/blob/25eaa715018ed7add3ba1289b6ad068636e29e5e/pymc3/distributions/dist_math.py#L318', 'comment_created': datetime.datetime(2021, 6, 8, 19, 31, 42, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 648413900, 'comment_body': ""I tried fiddling around with `SplineWrapper` but I don't think that'll be of much use here since we are using different methods of `InterpolatedUnivariateSpline` like the `.integral()` and the `.antiderivate()` ( But can we actually use `SplineWrapper` like that ? )\r\n\r\nInstead as you mentioned in https://github.com/pymc-devs/pymc3/pull/4746#discussion_r646490859 I just kept the non-symbolic operations in `dist` and forwarded `cdf_points` as an extra argument. "", 'comment_created': datetime.datetime(2021, 6, 9, 15, 17, 40, tzinfo=datetime.timezone.utc), 'commenter': 'kc611', 'type': 'User'}, {'comment_id': 649418586, 'comment_body': 'should the import be at the top?', 'comment_created': datetime.datetime(2021, 6, 10, 18, 17, 4, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 649419682, 'comment_body': 'These tests that rely on `BaseTestCases.BaseTestCase` should be removed and replaced with tests using the new `BaseTestDistribution`', 'comment_created': datetime.datetime(2021, 6, 10, 18, 18, 41, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 649425823, 'comment_body': ""This one should be moved to it's own class. The reason for this is that after refactoring all distributions, the `TestScalarParameterSamples` where this one is will disappear, but this distribution is special enough that the test should be kept (i.e., we are not simply drawing from scipy / numpy distributions)."", 'comment_created': datetime.datetime(2021, 6, 10, 18, 28, 15, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 649429474, 'comment_body': 'These tests that are using a `ref_rand` should be removed as well, unless there is a good reason to test them against a reference. If we are just copying the same scipy/numpy expression we use in our `random Ops` the default tests in `BaseTestDistribution` should be used instead.', 'comment_created': datetime.datetime(2021, 6, 10, 18, 34, 1, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 649706884, 'comment_body': ""I just moved it to it's own class and named it `TestInterpolated`"", 'comment_created': datetime.datetime(2021, 6, 11, 5, 48, 56, tzinfo=datetime.timezone.utc), 'commenter': 'kc611', 'type': 'User'}]","[{'commit_sha': 'bfc384b06428c6805624a7d4bfd7104d48f25374', 'committer_username': 'kc611', 'committer_name': 'Kaustubh', 'committer_email': 'ckaustubhm06@gmail.com', 'commit_date': datetime.datetime(2019, 9, 15, 13, 33, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7e34e8622b3cb41877d6b8fa97ba8e66d7a8e2a3', 'committer_username': 'kc611', 'committer_name': 'Kaustubh', 'committer_email': 'ckaustubhm06@gmail.com', 'commit_date': datetime.datetime(2019, 9, 15, 13, 33, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '53e4e0ef1bbcaf4ab50af58ca3e01e7aec0b9835', 'committer_username': 'kc611', 'committer_name': 'Kaustubh', 'committer_email': 'ckaustubhm06@gmail.com', 'commit_date': datetime.datetime(2019, 9, 15, 13, 33, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c421634627cb2508a4a128f6b165121d0b861cbb', 'committer_username': 'kc611', 'committer_name': 'Kaustubh', 'committer_email': 'ckaustubhm06@gmail.com', 'commit_date': datetime.datetime(2019, 9, 15, 13, 33, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e684ede94d9b2a26eb2a4130111a1b9539f580ae', 'committer_username': 'ricardoV94', 'committer_name': 'Ricardo Vieira', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 26, 14, 9, 21, tzinfo=datetime.timezone.utc)}]",Kaustubh,55352418,ckaustubhm06@gmail.com,User,,57,,48,65
671350704,[WIP] Porting kroneckernormal distribution to v4,This PR refactors the `KroneckerNormal` distribution to be compatible with `v4`.,True,4774,https://api.github.com/repos/pymc-devs/pymc/pulls/4774,https://github.com/pymc-devs/pymc/pull/4774,closed,112,200,4,1,2,28,0,1,[],2021-06-16 11:17:44+00:00,2021-06-27 04:39:32+00:00,926508.0,"10 days, 17:21:48","[{'comment_id': 652593751, 'comment_body': '@ricardoV94 The `chols` parameter here is a list of either `Cholesky` Ops or a pre-defined list of arrays. How do we turn this into the `TensorConstant` variant ?', 'comment_created': datetime.datetime(2021, 6, 16, 11, 20, 51, tzinfo=datetime.timezone.utc), 'commenter': 'kc611', 'type': 'User'}, {'comment_id': 652594715, 'comment_body': 'Again a few hacks were required over here (using `.shape` for checking an empty `TensorVariable` and `.data` for accessing the data inside)', 'comment_created': datetime.datetime(2021, 6, 16, 11, 22, 20, tzinfo=datetime.timezone.utc), 'commenter': 'kc611', 'type': 'User'}, {'comment_id': 652595505, 'comment_body': 'This is the part where the `chols` variable is required in `logp` method.', 'comment_created': datetime.datetime(2021, 6, 16, 11, 23, 30, tzinfo=datetime.timezone.utc), 'commenter': 'kc611', 'type': 'User'}, {'comment_id': 652645171, 'comment_body': '```suggestion\r\n    _print_name = (""KroneckerNormal"", ""\\\\operatorname{KroneckerNormal}"")\r\n```', 'comment_created': datetime.datetime(2021, 6, 16, 12, 36, 4, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 652658731, 'comment_body': ""I don't think we can make them Constants, it seems like everything can be symbolic here. What is the problem with `at.as_tensor_variable`?"", 'comment_created': datetime.datetime(2021, 6, 16, 12, 53, 24, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 652659743, 'comment_body': 'Can this be more easily computed in `.dist`? \r\n\r\nEdit: Nevermind it requires delta', 'comment_created': datetime.datetime(2021, 6, 16, 12, 54, 41, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 652691959, 'comment_body': ""The list gets converted into a `np.array` with `dtype` as `object` and `TensorVariable` doesn't support that."", 'comment_created': datetime.datetime(2021, 6, 16, 13, 31, 37, tzinfo=datetime.timezone.utc), 'commenter': 'kc611', 'type': 'User'}, {'comment_id': 654185735, 'comment_body': ""I don't know how practical it is to use an `eval()` in a `dist`. But this is one way to get the output's of the cholesky matrices from the `Op`."", 'comment_created': datetime.datetime(2021, 6, 18, 6, 54, 21, tzinfo=datetime.timezone.utc), 'commenter': 'kc611', 'type': 'User'}, {'comment_id': 654187774, 'comment_body': '@brandonwillard we discussed the possibility of using a parametrization of just `super().dist([mu, *cov], **kwargs)`. That will be fine for `rng_fn` but the extra args required for `logp` must be passed if we are to support `evd` there.', 'comment_created': datetime.datetime(2021, 6, 18, 6, 58, 16, tzinfo=datetime.timezone.utc), 'commenter': 'kc611', 'type': 'User'}, {'comment_id': 654191241, 'comment_body': ""@ricardoV94 mentioned that we aren't supporting broadcasting means of multivariate distributions anymore. \r\n\r\nTo me, this seems to be the case in the current test configuration. (Different `n` and `m` generate `covs` and `chols` matrices of different dimensions, and the domain is a vector of their product) But I'd like someone to confirm weather the current parameters of the test are still valid or weather they should be changed."", 'comment_created': datetime.datetime(2021, 6, 18, 7, 5, 7, tzinfo=datetime.timezone.utc), 'commenter': 'kc611', 'type': 'User'}, {'comment_id': 654247033, 'comment_body': 'We are supporting ""some"" cases, but not as many as in `v3`. There was a discussion about this in the port of the `MultivariateT` here: https://github.com/pymc-devs/pymc3/pull/4731', 'comment_created': datetime.datetime(2021, 6, 18, 8, 32, 58, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 654308009, 'comment_body': ""Thanks for the tip, I think I'm facing a case in `MatrixNormal` in #4777, where like `MVStudentT` the sample output is not scalar but matrix dependent on the parameters."", 'comment_created': datetime.datetime(2021, 6, 18, 10, 3, 43, tzinfo=datetime.timezone.utc), 'commenter': 'kc611', 'type': 'User'}, {'comment_id': 654320058, 'comment_body': 'Another, not very pretty option might be to use a specific `_logp` dispatcher, which extracts the extra non-numeric variables from the `tag` and passes them on to the `logp` function ', 'comment_created': datetime.datetime(2021, 6, 18, 10, 24, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 654531478, 'comment_body': '> We are supporting ""some"" cases, but not as many as in `v3`. There was a discussion about this in the port of the `MultivariateT` here: #4731\r\n\r\nHow do you mean?  We should be able to support _all_ well-defined forms of broadcasting, and with a lot less effort than it took in `v3`.', 'comment_created': datetime.datetime(2021, 6, 18, 15, 45, 34, tzinfo=datetime.timezone.utc), 'commenter': 'brandonwillard', 'type': 'User'}, {'comment_id': 654543297, 'comment_body': 'I guess it falls under the not well-defined category. Some cases like `pm.MvNormal.dist(0, np.eye(3), shape=(3,3))`, which would work in `V3` but not in `V4`.', 'comment_created': datetime.datetime(2021, 6, 18, 16, 5, 48, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 654554320, 'comment_body': '> I guess it falls under the not well-defined category. Some cases like `pm.MvNormal.dist(0, np.eye(3), shape=(3,3))`, which would work in `V3` but not in `V4`.\r\n\r\nYes, that is a mathematically misspecified distribution, and the problem isn\'t with broadcasting&mdash;the problem is that `v3` was incorrectly changing the user input to something that might make sense (emphasis on the ""might""), instead of raising an error like it should have.\r\n\r\n', 'comment_created': datetime.datetime(2021, 6, 18, 16, 26, 29, tzinfo=datetime.timezone.utc), 'commenter': 'brandonwillard', 'type': 'User'}, {'comment_id': 655341024, 'comment_body': ""So for now I removed the Eigen vector decomposition from here, and this works for all three cases of `cov`, `chol` and `evd`. However this leaves us unable to use `sigma` i.e. Gaussian white noise, over here in `logp`. \r\n\r\nRegardless can someone verify if this implementation is mathematically correct for the `evd` case ? (The test pass, however, I'm not too sure if this approach is mathematically correct for that case.)"", 'comment_created': datetime.datetime(2021, 6, 21, 12, 41, 17, tzinfo=datetime.timezone.utc), 'commenter': 'kc611', 'type': 'User'}, {'comment_id': 655341909, 'comment_body': ""I used `*covs` as @brandonwillard suggested and that handles the differently shaped matrices in the arguments. So I think we're good over here."", 'comment_created': datetime.datetime(2021, 6, 21, 12, 42, 31, tzinfo=datetime.timezone.utc), 'commenter': 'kc611', 'type': 'User'}, {'comment_id': 655467225, 'comment_body': ""Yeah, we almost never want to use `eval`/`aesara.function` outside of a place where it's intended to be used (e.g. posterior predictive sampling).\r\n\r\nRegardless, why would we want/need to use non-symbolic values here?"", 'comment_created': datetime.datetime(2021, 6, 21, 15, 13, 27, tzinfo=datetime.timezone.utc), 'commenter': 'brandonwillard', 'type': 'User'}, {'comment_id': 655562583, 'comment_body': ""The exact place this comment tags right now i.e. `dist` is `eval()` free. The `.eval()` is currently required over in `rng_fn` since the `kronecker()` method was returning `TensorVariable` (I'm working on replacing that with `scipy.linalg.kron` so we can count on `eval()` being removed from there too) The other place `.eval()` is in is `logp` where it is used to infer shapes (Theoretically that can also be removed with a bit of effort.)\r\n\r\nOverall with the current implementation (which is a whole lot of omitted code) I wouldn't worry about `eval()` as much as the inability of supporting `sigma` which us the bigger issue with this implementation. "", 'comment_created': datetime.datetime(2021, 6, 21, 17, 9, 19, tzinfo=datetime.timezone.utc), 'commenter': 'kc611', 'type': 'User'}, {'comment_id': 658873634, 'comment_body': '```suggestion\r\n        ""check_pymc_params_match_rv_op"",\r\n        ""check_pymc_draws_match_reference"",\r\n        ""check_rv_size"",\r\n```\r\n\r\nAny reason not to test the `params_match`?', 'comment_created': datetime.datetime(2021, 6, 25, 15, 59, 23, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 658912320, 'comment_body': ""Oh, that fails because the way we're handling the `cov` parameter internally. (as `*cov`) . So to that test it appears as a list of `TensorVariable` instead of a single `TensorVariable`"", 'comment_created': datetime.datetime(2021, 6, 25, 17, 2, 33, tzinfo=datetime.timezone.utc), 'commenter': 'kc611', 'type': 'User'}, {'comment_id': 658941468, 'comment_body': 'I see. Do you think there is any point in implementing an alternative test for this logic or given things are working on the logp / random side, it should be fine?', 'comment_created': datetime.datetime(2021, 6, 25, 17, 54, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 658980303, 'comment_body': ""We simply cannot evaluate things like this unless we place very strong and unnatural restrictions on _all_ of the terms involved.  More specifically, the graphs in `chols` must have no symbolic inputs; otherwise, this will fail.  If the tests are passing with this in place, then our testing isn't sufficient, because it's only ever testing `Constant`/`SharedVariable` inputs."", 'comment_created': datetime.datetime(2021, 6, 25, 19, 6, 47, tzinfo=datetime.timezone.utc), 'commenter': 'brandonwillard', 'type': 'User'}, {'comment_id': 659187257, 'comment_body': 'It should be fine, I think. ', 'comment_created': datetime.datetime(2021, 6, 26, 16, 19, 58, tzinfo=datetime.timezone.utc), 'commenter': 'kc611', 'type': 'User'}, {'comment_id': 659205541, 'comment_body': 'This line seems to not be doing anything.\r\n```suggestion\r\n```\r\n', 'comment_created': datetime.datetime(2021, 6, 26, 17, 57, 13, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 659205681, 'comment_body': '```suggestion\r\n            raise ValueError(f""Invalid dimension for value: {value.ndim}"")\r\n```', 'comment_created': datetime.datetime(2021, 6, 26, 17, 58, 37, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 659205859, 'comment_body': ""```suggestion\r\n        return a\r\n```\r\nI don't think we need the `as_tensor_variable`"", 'comment_created': datetime.datetime(2021, 6, 26, 18, 0, 45, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}]","[{'commit_sha': '08a81c0879d81138dfdb37fccee34012c174c930', 'committer_username': 'kc611', 'committer_name': 'Kaustubh', 'committer_email': 'ckaustubhm06@gmail.com', 'commit_date': datetime.datetime(2019, 9, 15, 13, 33, 26, tzinfo=datetime.timezone.utc)}]",Kaustubh,55352418,ckaustubhm06@gmail.com,User,,57,,48,65
672494427,Refactored Wishart and MatrixNormal distribution,This PR refactors the `Wishart` and `MatrixNormal` multivariate distributions. ,True,4777,https://api.github.com/repos/pymc-devs/pymc/pulls/4777,https://github.com/pymc-devs/pymc/pull/4777,closed,202,243,3,1,0,62,0,0,[],2021-06-17 10:35:42+00:00,2021-07-02 16:47:42+00:00,1318320.0,"15 days, 6:12:00","[{'comment_id': 653446257, 'comment_body': 'The `rowtau` and `choltau` arguments are not supported right now. Maybe there was a plan for supporting those (but was maybe abandoned midway?). ', 'comment_created': datetime.datetime(2021, 6, 17, 10, 42, 15, tzinfo=datetime.timezone.utc), 'commenter': 'kc611', 'type': 'User'}, {'comment_id': 654326026, 'comment_body': 'This fails for n=1 , maybe the dimensions are being downcasted to a scalar when matrix is shaped `1x1`.', 'comment_created': datetime.datetime(2021, 6, 18, 10, 34, 25, tzinfo=datetime.timezone.utc), 'commenter': 'kc611', 'type': 'User'}, {'comment_id': 654599555, 'comment_body': ""Kind-of counter-intuitive to use this function here as reference, since it's basically same as the internal one, but it looks like `st.matrix_normal.rvs(mean=mu, rowcov=rowcov, colcov=colcov, size=size)` used previously resulted in draws that are differently valued than our implementation and our previous testing just checked if the values came from similar distributions. (See previous commit https://github.com/pymc-devs/pymc3/pull/4777/commits/4ee1360158885556c7801b97bc166ae2a40c37bd).   "", 'comment_created': datetime.datetime(2021, 6, 18, 17, 59, 4, tzinfo=datetime.timezone.utc), 'commenter': 'kc611', 'type': 'User'}, {'comment_id': 654601276, 'comment_body': ""They weren't supported in `v3`?"", 'comment_created': datetime.datetime(2021, 6, 18, 18, 2, 37, tzinfo=datetime.timezone.utc), 'commenter': 'brandonwillard', 'type': 'User'}, {'comment_id': 654603493, 'comment_body': ""No, passing either of `rowtau` or `choltau` raised an error. (It's in the code right below this)"", 'comment_created': datetime.datetime(2021, 6, 18, 18, 7, 34, tzinfo=datetime.timezone.utc), 'commenter': 'kc611', 'type': 'User'}, {'comment_id': 654611055, 'comment_body': 'Does this help? https://github.com/pymc-devs/pymc3/blob/fe115b857ae42e84d1f359153fd1f7efb2c327ae/docs/source/distribution_implementation.md#notes-on-check_pymcs_draws_match_reference-test', 'comment_created': datetime.datetime(2021, 6, 18, 18, 23, 25, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 654612505, 'comment_body': 'In this case, it may be better to use something along the lines of the `pymc3_random` test and compare with the Scipy version. Maybe compare dimension by dimension since it is a multivariate distribution.', 'comment_created': datetime.datetime(2021, 6, 18, 18, 26, 41, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 654619238, 'comment_body': 'In that case we can add a seperate class which does this. (Similar to how we did with `Interpolated` distribution )', 'comment_created': datetime.datetime(2021, 6, 18, 18, 41, 42, tzinfo=datetime.timezone.utc), 'commenter': 'kc611', 'type': 'User'}, {'comment_id': 654633503, 'comment_body': 'If that `n` is being used to determine the number of output dimensions, then `n=1` might not make sense for a matrix-valued distribution like this.', 'comment_created': datetime.datetime(2021, 6, 18, 19, 14, 44, tzinfo=datetime.timezone.utc), 'commenter': 'brandonwillard', 'type': 'User'}, {'comment_id': 654633842, 'comment_body': 'You can also add it in that class to keep things organized, such as this: https://github.com/pymc-devs/pymc3/blob/f4343ca7ba112f843cf256378e88ff80a25342a6/pymc3/tests/test_distributions_random.py#L385-L390', 'comment_created': datetime.datetime(2021, 6, 18, 19, 15, 23, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 654634738, 'comment_body': ""Shouldn't this be `ndim_supp = 2` (i.e. the Wishart distribution is over matrices)?"", 'comment_created': datetime.datetime(2021, 6, 18, 19, 17, 37, tzinfo=datetime.timezone.utc), 'commenter': 'brandonwillard', 'type': 'User'}, {'comment_id': 654670293, 'comment_body': '```suggestion\n        nu = at.as_tensor_variable(intX(nu))\n        V = at.as_tensor_variable(floatX(V))\n```\n', 'comment_created': datetime.datetime(2021, 6, 18, 20, 49, 24, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 654751756, 'comment_body': 'I raised an error if such a matrix is passed.', 'comment_created': datetime.datetime(2021, 6, 19, 5, 32, 17, tzinfo=datetime.timezone.utc), 'commenter': 'kc611', 'type': 'User'}, {'comment_id': 654752099, 'comment_body': '```suggestion\n        mu = at.as_tensor_variable(floatX(mu))\n```\n', 'comment_created': datetime.datetime(2021, 6, 19, 5, 35, 38, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 654752286, 'comment_body': 'Do the tests pass if aesara `floatX` is set to ""float32""? Usually the default precision we use for float32 is `3`. Your change is increasing the precision compared to what we were testing before.', 'comment_created': datetime.datetime(2021, 6, 19, 5, 38, 6, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 654752672, 'comment_body': 'Also make sure you test all combinations locally by setting `n_samples=-1` (and test both in float32 and float64)', 'comment_created': datetime.datetime(2021, 6, 19, 5, 42, 37, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 654753920, 'comment_body': 'It somehow fails if we set `ndim_supp = 2`. Strangely, the samples returned by `rng_fn` are actually 2-dimensional. Any ideas why this might be happening.', 'comment_created': datetime.datetime(2021, 6, 19, 5, 57, 48, tzinfo=datetime.timezone.utc), 'commenter': 'kc611', 'type': 'User'}, {'comment_id': 654753993, 'comment_body': 'I set the precision to 2 decimals for `float32` just to be sure. ', 'comment_created': datetime.datetime(2021, 6, 19, 5, 58, 30, tzinfo=datetime.timezone.utc), 'commenter': 'kc611', 'type': 'User'}, {'comment_id': 654754227, 'comment_body': 'You should actually test it locally. 2 might not be necessary or it might not be enough.', 'comment_created': datetime.datetime(2021, 6, 19, 6, 1, 36, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 654754475, 'comment_body': 'You can check the notes 3 and 4 in here: https://github.com/pymc-devs/pymc3/blob/fe115b857ae42e84d1f359153fd1f7efb2c327ae/docs/source/distribution_implementation.md#4-adding-tests-for-the-logp--logcdf-methods', 'comment_created': datetime.datetime(2021, 6, 19, 6, 4, 28, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 654755729, 'comment_body': 'You might need to override `_shape_from_params` if the RV is failing to guess the shape with the default method. This is needed here for example: https://github.com/aesara-devs/aesara/blob/3a3adaee3b8ceccff6d0208996f117fcd5e5eb6f/aesara/tensor/random/basic.py#L518-L521\n\nWhat error are you seeing?', 'comment_created': datetime.datetime(2021, 6, 19, 6, 18, 39, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 654761155, 'comment_body': '> What error are you seeing?\r\n\r\n<details>\r\n<summary>Here\'s the full traceback</summary>\r\n<br>\r\n\r\n\r\n\r\n\r\n\r\n```\r\n________________________________________________________ TestWishart.test_distribution ________________________________________________________\r\n\r\nself = <pymc3.tests.test_distributions_random.TestWishart object at 0x7f53e0b50810>\r\n\r\n    def test_distribution(self):\r\n        self.validate_tests_list()\r\n>       self._instantiate_pymc_rv()\r\n\r\npymc3/tests/test_distributions_random.py:300: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\npymc3/tests/test_distributions_random.py:311: in _instantiate_pymc_rv\r\n    **params, size=self.size, rng=aesara.shared(self.get_random_state(reset=True))\r\npymc3/distributions/multivariate.py:816: in dist\r\n    return super().dist([nu, V], *args, **kwargs)\r\npymc3/distributions/distribution.py:285: in dist\r\n    rv_out = cls.rv_op(*dist_params, size=create_size, **kwargs)\r\n../../../miniconda3/envs/pymc3-dev-py37/lib/python3.7/site-packages/aesara/tensor/random/op.py:323: in __call__\r\n    res = super().__call__(rng, size, dtype, *args, **kwargs)\r\n../../../miniconda3/envs/pymc3-dev-py37/lib/python3.7/site-packages/aesara/graph/op.py:269: in __call__\r\n    node = self.make_node(*inputs, **kwargs)\r\n../../../miniconda3/envs/pymc3-dev-py37/lib/python3.7/site-packages/aesara/tensor/random/op.py:370: in make_node\r\n    bcast = self.compute_bcast(dist_params, size)\r\n../../../miniconda3/envs/pymc3-dev-py37/lib/python3.7/site-packages/aesara/configparser.py:49: in res\r\n    return f(*args, **kwargs)\r\n../../../miniconda3/envs/pymc3-dev-py37/lib/python3.7/site-packages/aesara/tensor/random/op.py:287: in compute_bcast\r\n    shape = self._infer_shape(size, dist_params)\r\n../../../miniconda3/envs/pymc3-dev-py37/lib/python3.7/site-packages/aesara/tensor/random/op.py:257: in _infer_shape\r\n    param_shapes=param_shapes,\r\npymc3/distributions/multivariate.py:750: in _shape_from_params\r\n    self.ndim_supp, dist_params, rep_param_idx, param_shapes\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n\r\nndim_supp = 2, dist_params = (TensorConstant{4}, TensorConstant{[[1. 0. 0...0. 0. 1.]]}), rep_param_idx = 2\r\nparam_shapes = [(), (Subtensor{int64}.0, Subtensor{int64}.0)]\r\n\r\n    def default_shape_from_params(\r\n        ndim_supp, dist_params, rep_param_idx=0, param_shapes=None\r\n    ):\r\n        """"""Infer the dimensions for the output of a `RandomVariable`.\r\n    \r\n        This is a function that derives a random variable\'s support\r\n        shape/dimensions from one of its parameters.\r\n    \r\n        XXX: It\'s not always possible to determine a random variable\'s support\r\n        shape from its parameters, so this function has fundamentally limited\r\n        applicability and must be replaced by custom logic in such cases.\r\n    \r\n        XXX: This function is not expected to handle `ndim_supp = 0` (i.e.\r\n        scalars), since that is already definitively handled in the `Op` that\r\n        calls this.\r\n    \r\n        TODO: Consider using `aesara.compile.ops.shape_i` alongside `ShapeFeature`.\r\n    \r\n        Parameters\r\n        ----------\r\n        ndim_supp: int\r\n            Total number of dimensions for a single draw of the random variable\r\n            (e.g. a multivariate normal draw is 1D, so `ndim_supp = 1`).\r\n        dist_params: list of `aesara.graph.basic.Variable`\r\n            The distribution parameters.\r\n        param_shapes: list of tuple of `ScalarVariable` (optional)\r\n            Symbolic shapes for each distribution parameter.  These will\r\n            be used in place of distribution parameter-generated shapes.\r\n        rep_param_idx: int (optional)\r\n            The index of the distribution parameter to use as a reference\r\n            In other words, a parameter in `dist_param` with a shape corresponding\r\n            to the support\'s shape.\r\n            The default is the first parameter (i.e. the value 0).\r\n    \r\n        Results\r\n        -------\r\n        out: a tuple representing the support shape for a distribution with the\r\n        given `dist_params`.\r\n    \r\n        """"""\r\n        if ndim_supp <= 0:\r\n            raise ValueError(""ndim_supp must be greater than 0"")\r\n        if param_shapes is not None:\r\n>           ref_param = param_shapes[rep_param_idx]\r\nE           IndexError: list index out of range\r\n\r\n../../../miniconda3/envs/pymc3-dev-py37/lib/python3.7/site-packages/aesara/tensor/random/op.py:69: IndexError\r\n```\r\n</details>\r\n\r\nAnd overriding `_shape_from_params` didn\'t work. You might also wanna take a look at the test first, just to see if the parameters are valid.', 'comment_created': datetime.datetime(2021, 6, 19, 7, 20, 27, tzinfo=datetime.timezone.utc), 'commenter': 'kc611', 'type': 'User'}, {'comment_id': 654767322, 'comment_body': ""It's definitely looks like you need to override that method. I didn't mean to imply that it should be the same overwrite, just that it needs one."", 'comment_created': datetime.datetime(2021, 6, 19, 8, 26, 31, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 654832110, 'comment_body': ""> It somehow fails if we set `ndim_supp = 2`. Strangely, the samples returned by `rng_fn` are actually 2-dimensional. Any ideas why this might be happening?\r\n\r\n`ndim_supp` is used for shape inference and a few other related things, but not necessarily for critical `RandomVariable.perform` operations, so it's not surprising that this value would be incorrect and still produce valid samples.\r\n\r\nRegardless, we need the `ndim_supp` values to be accurate.  We might also need to add some more sanity checks at the symbolic level using that property (i.e. when/if we can verify that the output dimensions match `ndim_supp`, we probably should).\r\n\r\nFor example, we might be missing a sanity check like `outputs[1].ndim >= self.ndim_supp` in `RandomVariable.make_node`.  It would be better if we could somehow guarantee that condition from the construction of `outputs`, but given how subclasses can override some of the steps involved, such a simple check might be worthwhile."", 'comment_created': datetime.datetime(2021, 6, 19, 19, 35, 50, tzinfo=datetime.timezone.utc), 'commenter': 'brandonwillard', 'type': 'User'}, {'comment_id': 654832945, 'comment_body': 'Otherwise, @ricardoV94 is correct; it looks like this needs a custom `_shape_from_params` that says the second parameter, `V`, determines the output shape.  I think the default assumes that the first parameter does, which is clearly wrong in this case.', 'comment_created': datetime.datetime(2021, 6, 19, 19, 45, 9, tzinfo=datetime.timezone.utc), 'commenter': 'brandonwillard', 'type': 'User'}, {'comment_id': 654833153, 'comment_body': ""OK, then we don't need to add that functionality here/now."", 'comment_created': datetime.datetime(2021, 6, 19, 19, 47, 10, tzinfo=datetime.timezone.utc), 'commenter': 'brandonwillard', 'type': 'User'}, {'comment_id': 655245854, 'comment_body': 'You were right, the passed all the way upto 4 decimal points in `float32` mode. And started showing failures at 5 decimal points. I left it at our default of 3 cause it may show flaky failures at 4 decimal points.', 'comment_created': datetime.datetime(2021, 6, 21, 10, 6, 55, tzinfo=datetime.timezone.utc), 'commenter': 'kc611', 'type': 'User'}, {'comment_id': 655247511, 'comment_body': 'The current approach should cover the correct `ndim_supp` value as well as the returned shape correctly. I simply returned the shape of `V` from the `param_shapes` list.', 'comment_created': datetime.datetime(2021, 6, 21, 10, 9, 26, tzinfo=datetime.timezone.utc), 'commenter': 'kc611', 'type': 'User'}, {'comment_id': 655276311, 'comment_body': 'Why did you remove that test?', 'comment_created': datetime.datetime(2021, 6, 21, 10, 55, 43, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 655323297, 'comment_body': ""The test was failing with `AssertionError` with different numeric values, and this is flaky (see e4d10d0a636761339cea20a3d8eb822acbfd4b67 for a passing instance) and considering https://github.com/pymc-devs/pymc3/blob/7be2025c4091e450f9e9dd050eb0dca08995c83f/pymc3/tests/test_distributions_random.py#L1620 I though it would be better to remove it and just check for shapes. The test for `Wishart` in `test_distributions.py` is also commented out giving the reason https://github.com/pymc-devs/pymc3/blob/7be2025c4091e450f9e9dd050eb0dca08995c83f/pymc3/tests/test_distributions.py#L2043-L2047\r\n\r\n(I don't know how applicable this is in the current scenario though)"", 'comment_created': datetime.datetime(2021, 6, 21, 12, 14, 23, tzinfo=datetime.timezone.utc), 'commenter': 'kc611', 'type': 'User'}, {'comment_id': 655328528, 'comment_body': 'This is about the random method, not the `logp`/`logdf` as in the second test you linked to. If the scipy method is not good for testing, it is also not good enough to be used inside the `rng_fn`. Unless I am missing something.', 'comment_created': datetime.datetime(2021, 6, 21, 12, 22, 35, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 655349592, 'comment_body': ""Alright I re-added it. It showed a flaky failure (only once) on my system, if it arises again, we can investigate into this further.\r\n\r\nMaybe it could've been caused by typecasting `nu` as `np.int(nu)` in `Wishart`'s `rng_fn`. I added a similar function in the test. "", 'comment_created': datetime.datetime(2021, 6, 21, 12, 53, 14, tzinfo=datetime.timezone.utc), 'commenter': 'kc611', 'type': 'User'}, {'comment_id': 655402615, 'comment_body': 'Should we remove this test / replace this test with `rng_fn` from MatrixNormal ?', 'comment_created': datetime.datetime(2021, 6, 21, 14, 0, tzinfo=datetime.timezone.utc), 'commenter': 'kc611', 'type': 'User'}, {'comment_id': 655406325, 'comment_body': 'I think the current one is better, as it provides a more independent check that our `rng_fn` is doing the correct thing. The standard test is used when we are just relying on a standard implementation in `rng_fn` (i.e., just calling scipy / numpy, without many steps in it). Is the test passing?', 'comment_created': datetime.datetime(2021, 6, 21, 14, 4, 28, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 655411700, 'comment_body': ""> Is the test passing?\r\n\r\nIt's flaky. Currently fails (in the current run of the Github jobs) but passed before."", 'comment_created': datetime.datetime(2021, 6, 21, 14, 10, 44, tzinfo=datetime.timezone.utc), 'commenter': 'kc611', 'type': 'User'}, {'comment_id': 655529487, 'comment_body': ""What extra logic (e.g. implemented in `WishartRV`) are all these sizes testing?  \r\n\r\nRemember, we don't want the test time to grow larger without proportionally increasing the actual test coverage (and that coverage **doesn't** include NumPy/SciPy's code).  This test module is easily one of the most egregious violators of that principal, so we should always be a little more critical of additions to it."", 'comment_created': datetime.datetime(2021, 6, 21, 16, 20, 54, tzinfo=datetime.timezone.utc), 'commenter': 'brandonwillard', 'type': 'User'}, {'comment_id': 655564804, 'comment_body': 'Should that be checking only for edge cases like `None` and `()` ? I just took the `sizes_to_check` list from the original function in `BaseTestDistribution` where the sizes are being checked by default. (And constructed the corresponding expected list.)', 'comment_created': datetime.datetime(2021, 6, 21, 17, 12, 50, tzinfo=datetime.timezone.utc), 'commenter': 'kc611', 'type': 'User'}, {'comment_id': 655584362, 'comment_body': 'To echo @kc611, this is not actually testing more than what the default test does, just setting the specific parameters of the size test, which usually have to be adapted for multivariate distributions. ', 'comment_created': datetime.datetime(2021, 6, 21, 17, 42, 56, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 656549544, 'comment_body': 'You might need to check dimension by dimension. The default test flattens everything and that might not be so comparable. This issue also cropped in here: https://github.com/pymc-devs/pymc3/pull/4596#issuecomment-822589620\n\n(I might also be completely off)', 'comment_created': datetime.datetime(2021, 6, 22, 20, 18, 9, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 657021744, 'comment_body': 'Looks like that could work, I added it for now. ', 'comment_created': datetime.datetime(2021, 6, 23, 11, 55, 18, tzinfo=datetime.timezone.utc), 'commenter': 'kc611', 'type': 'User'}, {'comment_id': 657040350, 'comment_body': 'Not sure about the `min` here.', 'comment_created': datetime.datetime(2021, 6, 23, 12, 22, 17, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 657043627, 'comment_body': '100 `n_fails` also seems extreme. ', 'comment_created': datetime.datetime(2021, 6, 23, 12, 26, 29, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 657245243, 'comment_body': 'I set it to the default of 10.', 'comment_created': datetime.datetime(2021, 6, 23, 15, 53, 15, tzinfo=datetime.timezone.utc), 'commenter': 'kc611', 'type': 'User'}, {'comment_id': 657245568, 'comment_body': 'We can take an mean maybe ?', 'comment_created': datetime.datetime(2021, 6, 23, 15, 53, 33, tzinfo=datetime.timezone.utc), 'commenter': 'kc611', 'type': 'User'}, {'comment_id': 657292758, 'comment_body': 'Nevermind, `min` is the strongest test, I thought about it the wrong way. nfails can be a bit bigger than 10 but 100 seemed too much.', 'comment_created': datetime.datetime(2021, 6, 23, 16, 54, 17, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 657297587, 'comment_body': 'Does this make sense like this @brandonwillard, I am not very familiar with the signature.', 'comment_created': datetime.datetime(2021, 6, 23, 17, 1, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 657364624, 'comment_body': 'We can also use `dist_params[1].shape`. Just needs to be same as shape of second argument `V`.', 'comment_created': datetime.datetime(2021, 6, 23, 18, 29, 9, tzinfo=datetime.timezone.utc), 'commenter': 'kc611', 'type': 'User'}, {'comment_id': 659496241, 'comment_body': 'Sorry for the earlier confusion, but I think the minimum is the right metric to use. If the 10 attempts are not enough you can increase those a bit, but we should still use the min. ', 'comment_created': datetime.datetime(2021, 6, 28, 5, 53, 1, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 661630419, 'comment_body': ""Over in #4824 I noticed that this test XPASS, but removing the XFAIL also doesn't make much sense, since the test has no active content.\r\nCan you bring this test back online?"", 'comment_created': datetime.datetime(2021, 6, 30, 16, 21, 40, tzinfo=datetime.timezone.utc), 'commenter': 'michaelosthege', 'type': 'User'}, {'comment_id': 661636630, 'comment_body': 'That tests requires the `checkd` which has not been refactored, and it seems the original test was no good either. I think the best is to just remove it.', 'comment_created': datetime.datetime(2021, 6, 30, 16, 29, 52, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 662495026, 'comment_body': 'Updated it to the standard `check_logp` test.', 'comment_created': datetime.datetime(2021, 7, 1, 18, 7, 12, tzinfo=datetime.timezone.utc), 'commenter': 'kc611', 'type': 'User'}, {'comment_id': 662544238, 'comment_body': 'Looks like @twiecki fixed the distribution in https://github.com/pymc-devs/pymc3/pull/701 ?\r\nDoes that mean we can remove the warning, or at least ""downgrade"" the warning into a recommendation to use LKJ dists instead?\r\n\r\n**Disclaimer:** I have no clue what either distributions are 😅', 'comment_created': datetime.datetime(2021, 7, 1, 19, 34, 32, tzinfo=datetime.timezone.utc), 'commenter': 'michaelosthege', 'type': 'User'}, {'comment_id': 662544957, 'comment_body': '```suggestion\r\n                ""1x1 Matrix was provided. Please use Normal distribution for such cases.""\r\n```', 'comment_created': datetime.datetime(2021, 7, 1, 19, 35, 58, tzinfo=datetime.timezone.utc), 'commenter': 'michaelosthege', 'type': 'User'}, {'comment_id': 662545544, 'comment_body': '```suggestion\r\n                ""Incompatible parameterization. Specify exactly one of rowcov, or rowchol.""\r\n```', 'comment_created': datetime.datetime(2021, 7, 1, 19, 37, 1, tzinfo=datetime.timezone.utc), 'commenter': 'michaelosthege', 'type': 'User'}, {'comment_id': 662545693, 'comment_body': '```suggestion\r\n                ""Incompatible parameterization. Specify exactly one of colcov, or colchol.""\r\n```', 'comment_created': datetime.datetime(2021, 7, 1, 19, 37, 22, tzinfo=datetime.timezone.utc), 'commenter': 'michaelosthege', 'type': 'User'}, {'comment_id': 662550402, 'comment_body': 'I agree to both: This implementations is very much in line with the defaults.\r\nThe the `BaseTestDistribution` for sure takes a sledgehammer to break a nut, but that problem is out of scope of this PR.', 'comment_created': datetime.datetime(2021, 7, 1, 19, 46, 58, tzinfo=datetime.timezone.utc), 'commenter': 'michaelosthege', 'type': 'User'}, {'comment_id': 662571434, 'comment_body': ""Pushing admittedly poor defaults forward is a great way to get into a bad situation, and an even better way to get deeper into existing ones.  \r\n\r\nAlso, the answer is not one big PR that removes all the testing redundancies; given the knowledge and effort required for that, it's quite unrealistic.  Plus, that won't prevent the problem from reappearing again and again after such a heroic PR.\r\n\r\nAt the very least, we need to stop adding to the testing redundancies on a *case-by-case basis*, and we can do that by looking for it during reviews; otherwise, we're just hoping that contributors will do that for us, and that's not how things have turned out.\r\n\r\n\r\nRegarding these exact tests, if they're only targeting `WishartRV.rng_fn`, it looks like we only need a test for an empty and non-empty `size` (and perhaps one other), because that's the only relevant condition in the code added by this PR.  Every other value besides the first two appears to be testing the code in `RandomVariable` and `scipy.stats.wishart.rvs`."", 'comment_created': datetime.datetime(2021, 7, 1, 20, 26, 3, tzinfo=datetime.timezone.utc), 'commenter': 'brandonwillard', 'type': 'User'}, {'comment_id': 662749723, 'comment_body': ""I think there's no harm in not testing the `[ (), (1,), 5,  (2, 4, 2)]` cases if we are testing for `[None, 1, (4, 5)]` cases since they're pretty much the same thing with different values. (Updated accordingly)"", 'comment_created': datetime.datetime(2021, 7, 2, 5, 40, 45, tzinfo=datetime.timezone.utc), 'commenter': 'kc611', 'type': 'User'}, {'comment_id': 662756137, 'comment_body': 'I think #701 adds the `WishartBartlett` as a solution for that, I updated the warning to recommend use of  `WishartBartlett` instead of `LKJCorr` or `LKJCholeskyCov`.\r\n\r\ncc @twiecki Is this correct ?', 'comment_created': datetime.datetime(2021, 7, 2, 5, 58, 25, tzinfo=datetime.timezone.utc), 'commenter': 'kc611', 'type': 'User'}, {'comment_id': 662959397, 'comment_body': 'No, LKJCorr should be used. `Wishart` itself is basically unusable, so if a user really wants that distribution, they can only use `WishartBartlett`, but they should always use either `LKJCorr` or `LKJCholeskyCov`.', 'comment_created': datetime.datetime(2021, 7, 2, 11, 58, 41, tzinfo=datetime.timezone.utc), 'commenter': 'twiecki', 'type': 'User'}, {'comment_id': 663059838, 'comment_body': ""Let's revert the warning to how it was before? Other than this PR looks pretty ready.\r\n\r\nAlso, should this warn be in `__new__`? Does it appear twice during a normal initialization inside a `pm.Model()`?"", 'comment_created': datetime.datetime(2021, 7, 2, 14, 36, 10, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 663117392, 'comment_body': ""I don't think it would appear twice. And implementing a `__new__` just because of this warning seems a little too much.\r\nLet's just rephrase to mention the entire recommendation from above and then go for it."", 'comment_created': datetime.datetime(2021, 7, 2, 16, 8, 36, tzinfo=datetime.timezone.utc), 'commenter': 'michaelosthege', 'type': 'User'}]","[{'commit_sha': 'a4bd0942c7bc1a7cd36ef00fc79004fe56f7fea6', 'committer_username': 'kc611', 'committer_name': 'Kaustubh', 'committer_email': 'ckaustubhm06@gmail.com', 'commit_date': datetime.datetime(2019, 9, 15, 13, 33, 26, tzinfo=datetime.timezone.utc)}]",Kaustubh,55352418,ckaustubhm06@gmail.com,User,,57,,48,65
686209130,Fixed MatrixNormal shape handling,"Linked Issue: #4845 

So it turns out that the shape handling was a bit off in `MatrixNormal` as it didn't support `mu` broadcasting, also it'll be better to just remove the `1x1` error since it won't make much sense if we have it supported already. 
",True,4848,https://api.github.com/repos/pymc-devs/pymc/pulls/4848,https://github.com/pymc-devs/pymc/pull/4848,closed,76,28,3,2,9,11,0,0,[],2021-07-08 17:43:27+00:00,2021-08-30 14:48:08+00:00,4568681.0,"52 days, 21:04:41","[{'comment_id': 674131719, 'comment_body': 'Turns out `size` was never supported in the first place in `MatrixNormal` in `v3`. (Thanks to @ricardoV94 for pointing that out.)', 'comment_created': datetime.datetime(2021, 7, 21, 16, 10, 49, tzinfo=datetime.timezone.utc), 'commenter': 'kc611', 'type': 'User'}, {'comment_id': 674138509, 'comment_body': 'Users may also pass shape (and invalid shapes) or ""dims"", so this check might not be enough. Can a ndim check be done inside the logp method instead? And what about the RV, does it work properly for non-default sizes?', 'comment_created': datetime.datetime(2021, 7, 21, 16, 17, 8, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 674141530, 'comment_body': 'Also just to be clear 2d shapes (rows x cols) were allowed, but not ""replication"" shapes. I am not sure if that maps to any non-`None` size because I don\'t really grasp what size means for multivariate distributions.', 'comment_created': datetime.datetime(2021, 7, 21, 16, 20, 38, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 674151991, 'comment_body': 'I added a warning for `shape` since if only `(m x n)` shape is allowed we can directly derive `m` and `n` from parameters. \r\n\r\n> And what about the RV, does it work properly for non-default sizes?\r\n\r\nWhat do you mean by non-default sizes?', 'comment_created': datetime.datetime(2021, 7, 21, 16, 34, 30, tzinfo=datetime.timezone.utc), 'commenter': 'kc611', 'type': 'User'}, {'comment_id': 674154418, 'comment_body': 'If you used the RV directly with some size like (2, 3, 3), would it do a sensible thing in the `rng_fn`? Or should it also raise there?', 'comment_created': datetime.datetime(2021, 7, 21, 16, 37, 37, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 674691539, 'comment_body': ""The RV can handle sizes like that because the main operation over there i.e. `np.matmul` will treat the random output (from `rng.standard_normal` ) as stack of matrices (which is what we intend) so I don't think we need to raise there. "", 'comment_created': datetime.datetime(2021, 7, 22, 10, 52, 3, tzinfo=datetime.timezone.utc), 'commenter': 'kc611', 'type': 'User'}, {'comment_id': 674726001, 'comment_body': ""I think size is one of the default arguments for distributions. Perhaps it's better to simply check it is `None`"", 'comment_created': datetime.datetime(2021, 7, 22, 11, 51, 15, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 684202761, 'comment_body': '```suggestion\r\n        if kwargs.get(""size"", None) is not None:\r\n```', 'comment_created': datetime.datetime(2021, 8, 6, 12, 39, 56, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 684203141, 'comment_body': 'Need a test that hits this branch', 'comment_created': datetime.datetime(2021, 8, 6, 12, 40, 33, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 684207902, 'comment_body': 'Should add a test for this warning. And it should be a DeprecationWarning', 'comment_created': datetime.datetime(2021, 8, 6, 12, 48, 19, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 684724007, 'comment_body': '```suggestion\n                ""The shape argument in MatrixNormal is deprecated and will be ignored.""\n```\n', 'comment_created': datetime.datetime(2021, 8, 8, 6, 36, 5, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}]","[{'commit_sha': 'dfad4bfea2ba0da52305fda1e7d4a5422fd7e32c', 'committer_username': 'kc611', 'committer_name': 'Kaustubh', 'committer_email': 'ckaustubhm06@gmail.com', 'commit_date': datetime.datetime(2019, 9, 15, 13, 33, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1e581fa3cb2e5a73d0ca72cceed78f4261eb07dd', 'committer_username': 'kc611', 'committer_name': 'Kaustubh', 'committer_email': 'ckaustubhm06@gmail.com', 'commit_date': datetime.datetime(2019, 9, 15, 13, 33, 26, tzinfo=datetime.timezone.utc)}]",Kaustubh,55352418,ckaustubhm06@gmail.com,User,,57,,48,65
678934182,Refactored Bound for v4,This PR refactors the `Bound` distribution for `v4`,True,4815,https://api.github.com/repos/pymc-devs/pymc/pulls/4815,https://github.com/pymc-devs/pymc/pull/4815,closed,382,344,7,1,5,38,0,0,[],2021-06-28 10:52:02+00:00,2021-08-13 15:09:07+00:00,3989825.0,"46 days, 4:17:05","[{'comment_id': 659682687, 'comment_body': 'Maybe we can apply a `Potential` internally?', 'comment_created': datetime.datetime(2021, 6, 28, 10, 53, 40, tzinfo=datetime.timezone.utc), 'commenter': 'kc611', 'type': 'User'}, {'comment_id': 659683246, 'comment_body': 'Not sure if `interval` is the right thing for `Discrete` distributions.', 'comment_created': datetime.datetime(2021, 6, 28, 10, 54, 29, tzinfo=datetime.timezone.utc), 'commenter': 'kc611', 'type': 'User'}, {'comment_id': 659683908, 'comment_body': '@ricardoV94, This is what you described in https://github.com/pymc-devs/pymc3/issues/4800 , right ?', 'comment_created': datetime.datetime(2021, 6, 28, 10, 55, 32, tzinfo=datetime.timezone.utc), 'commenter': 'kc611', 'type': 'User'}, {'comment_id': 659725109, 'comment_body': 'Yes. But it means you need to compute the `initval` instead, otherwise the model will raise an error when a bounded variable is created.', 'comment_created': datetime.datetime(2021, 6, 28, 12, 4, 16, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 659726586, 'comment_body': 'What do you mean?', 'comment_created': datetime.datetime(2021, 6, 28, 12, 6, 37, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 659726876, 'comment_body': 'What do you mean?', 'comment_created': datetime.datetime(2021, 6, 28, 12, 7, 3, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 659778358, 'comment_body': 'How is the `bounds` function different from `interval` ?', 'comment_created': datetime.datetime(2021, 6, 28, 13, 19, 27, tzinfo=datetime.timezone.utc), 'commenter': 'kc611', 'type': 'User'}, {'comment_id': 659782317, 'comment_body': ""In `v3` the implementation avoided use of `interval` transform upon `Discrete` (maybe because it uses `sigmoid` that would lead to values not in the allowed values of the discrete distribution) so I'm not sure about applying the same upon `Discrete`. What could be a good approach here ?"", 'comment_created': datetime.datetime(2021, 6, 28, 13, 24, 15, tzinfo=datetime.timezone.utc), 'commenter': 'kc611', 'type': 'User'}, {'comment_id': 659782998, 'comment_body': 'Nevermind, I confused it with something else. ', 'comment_created': datetime.datetime(2021, 6, 28, 13, 25, 8, tzinfo=datetime.timezone.utc), 'commenter': 'kc611', 'type': 'User'}, {'comment_id': 659871198, 'comment_body': 'I think you should follow the original, transform only continuous variables and not transform discrete ones. The bounding of discrete variables is achieved by the `bound` call in the `logp`', 'comment_created': datetime.datetime(2021, 6, 28, 15, 5, 33, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 659873802, 'comment_body': ""You mean `bound` from `distributions.dist_math`? It simply wraps a switch around the `logp` expression, which returns `-inf` if any of the bounds is not respected. In this case it's basically `at.switch((value < lower) or (value > upper), -np.inf, logp)`"", 'comment_created': datetime.datetime(2021, 6, 28, 15, 8, 37, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 659941976, 'comment_body': 'transform has a flag value of `UNSET` by default. If transform is `None`, the user is requesting no transform explicitly. https://github.com/pymc-devs/pymc3/blob/ce88e7392c172da78b2bd0ea86b9de10b5824124/pymc3/util.py#L30\r\n\r\nThis comment applies above, where transform first appears', 'comment_created': datetime.datetime(2021, 6, 28, 16, 34, 6, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 659943399, 'comment_body': ""Is distribution a `class` or a `rv_out`? If it's the former this will fail when the argument is passed to the `RandomVariable` no?"", 'comment_created': datetime.datetime(2021, 6, 28, 16, 36, 9, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 659945206, 'comment_body': 'These transforms have changed since this code was last touched, see here https://github.com/pymc-devs/pymc3/issues/4515#issuecomment-821250583', 'comment_created': datetime.datetime(2021, 6, 28, 16, 38, 56, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 659969798, 'comment_body': ""If it's a rv_out I don't think you can use the `isinstance` class checks above, but the RV op dtype can be used as a proxy. \n\nIf it's a Class, I don't think you can instantiate it because you would need to know the arguments, which the user has not provided yet. \n\nAnyway I think it makes more sense to work with a rv_out, as is done in the rest of the library (we will just need to raise a useful error because it will be a breaking change from V3). But I wonder if you'll have these intermediate rvs bothering you when creating the logp graph..."", 'comment_created': datetime.datetime(2021, 6, 28, 17, 12, 35, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 659976045, 'comment_body': 'Oh, this is one thing that needs discussion,\r\n\r\nDo we keep the previous `pm.Bound` interface of `call` upon a distribution class and then passing it the arguments ? Or do we make the distribution (just the `Distribution.dist`) separately in the Model and then `Bound` it ? \r\n\r\nThere is also a middle ground where we can pass the class and arguments of the distribution to `Bound` and it gets combined in the `dist` method of `Bound`.', 'comment_created': datetime.datetime(2021, 6, 28, 17, 22, 7, tzinfo=datetime.timezone.utc), 'commenter': 'kc611', 'type': 'User'}, {'comment_id': 659980354, 'comment_body': 'Yeah it needs discussion. Personally I prefer the `.dist` approach as that is much more coherent with the rest of the library.\n\nOn the other hand, pm.Bound is being refactored mostly for backwards compatibility because a lot of people have got used to it...\n\n', 'comment_created': datetime.datetime(2021, 6, 28, 17, 28, 39, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 660617444, 'comment_body': 'should not be applied to `Discrete` variables.', 'comment_created': datetime.datetime(2021, 6, 29, 13, 29, 10, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 662175007, 'comment_body': 'Not sure why but the value of `value` changes during the `logp` calculation hence the test failures.', 'comment_created': datetime.datetime(2021, 7, 1, 10, 32, 22, tzinfo=datetime.timezone.utc), 'commenter': 'kc611', 'type': 'User'}, {'comment_id': 665431457, 'comment_body': 'Actually it seems that because of the Distribution Metaclass magic we can check if a random `Op` is of type `Continuous`:\r\n\r\n```python\r\nisinstance(at.random.normal().owner.op, pm.Continuous)  # True\r\n```', 'comment_created': datetime.datetime(2021, 7, 7, 14, 33, 19, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 665434934, 'comment_body': 'You should probably keep the old Exception if a transform is provided for a Continuous distribution\r\n\r\n```python\r\n raise ValueError(""Cannot transform a discrete variable"")\r\n```', 'comment_created': datetime.datetime(2021, 7, 7, 14, 37, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 665444737, 'comment_body': 'This seems to duplicate a lot of the logic already implemented in:\r\nhttps://github.com/pymc-devs/pymc3/blob/9d90c891de5a2f491c51f8311b387f051e27538a/pymc3/distributions/continuous.py#L150\r\n\r\nWe can try to inherit from it in the current Class or make the `default_transform` in `BoundedContinuous` a `staticmethod` that can be called from other places. \r\n\r\nAlso this`Bound` class might still have to be split in `Discrete` and `Continuous` classes, which I think is necessary for some samplers to decide how to deal with the variables. In that case `Bound` can be just a wrapper that returns / instantiates the right type of Variable.', 'comment_created': datetime.datetime(2021, 7, 7, 14, 47, 34, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 673210928, 'comment_body': ""Not sure about the `ndims_params`. In fact the distribution is characterized by the `original params + [0, 0]`. Also the `dtype` should be the same as the original... But I don't know what is the best approach here, since obviously you won't know in advance which distribution is being bounded"", 'comment_created': datetime.datetime(2021, 7, 20, 15, 6, 38, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 673211753, 'comment_body': 'Does this work?\r\n\r\n```suggestion\r\n    rv_op = boundrv\r\n    cls.bound_args_indices = [-2, -1]\r\n```', 'comment_created': datetime.datetime(2021, 7, 20, 15, 7, 30, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 673220087, 'comment_body': ""Yes , that's probably a better way to do it."", 'comment_created': datetime.datetime(2021, 7, 20, 15, 17, 2, tzinfo=datetime.timezone.utc), 'commenter': 'kc611', 'type': 'User'}, {'comment_id': 673223673, 'comment_body': ""I thought it wouldn't matter in this case since we are never actually drawing values of that shape in the first place. `original ndims + [0, 0]` will probably be a good idea to implement here if that's not the case. "", 'comment_created': datetime.datetime(2021, 7, 20, 15, 21, 13, tzinfo=datetime.timezone.utc), 'commenter': 'kc611', 'type': 'User'}, {'comment_id': 673244403, 'comment_body': 'My bad...\r\n```suggestion\r\n    bound_args_indices = [-2, -1]\r\n```', 'comment_created': datetime.datetime(2021, 7, 20, 15, 44, 56, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 673244756, 'comment_body': 'I guess this removed section was a mistake?', 'comment_created': datetime.datetime(2021, 7, 20, 15, 45, 24, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 673249531, 'comment_body': 'Oh `pre-commit` was complaining about it not being used, I though it was some sort of residual code. What does it do anyway ? ', 'comment_created': datetime.datetime(2021, 7, 20, 15, 51, 2, tzinfo=datetime.timezone.utc), 'commenter': 'kc611', 'type': 'User'}, {'comment_id': 673250498, 'comment_body': 'For some reason doing this breaks `logp` generation.', 'comment_created': datetime.datetime(2021, 7, 20, 15, 52, 8, tzinfo=datetime.timezone.utc), 'commenter': 'kc611', 'type': 'User'}, {'comment_id': 673780835, 'comment_body': 'Does this fix it?\r\n```suggestion\r\n        if distribution.owner.op.ndim_supp != 0:\r\n```', 'comment_created': datetime.datetime(2021, 7, 21, 8, 44, 58, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 674730519, 'comment_body': 'If we are in a `modelcontext` we should check here that the `distribution` is not in `model` (which would mean the user did not use `.dist()` and the original variable would be accounted on the model logp as well. \r\n\r\n~~In addition we can add the check that it is a TensorVariable, if not, the user is probably trying to work with the old API~~ I see you already did this. Then the first error message can also go there', 'comment_created': datetime.datetime(2021, 7, 22, 11, 58, 38, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 675044907, 'comment_body': 'What was this TODO about?', 'comment_created': datetime.datetime(2021, 7, 22, 17, 57, 5, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 675164687, 'comment_body': 'Do we not support this use-case anymore?', 'comment_created': datetime.datetime(2021, 7, 22, 21, 10, 39, tzinfo=datetime.timezone.utc), 'commenter': 'twiecki', 'type': 'User'}, {'comment_id': 675296463, 'comment_body': ""No, you have to pass a .dist(). There is a very informative error message with a code example if users do that.\n\nThis was done to simplify the implementation and also be more in line with the rest of the API (e.g when you specify distributions for Mixtures, LKJCorr priors, RWs?). Also in the future, Truncated and Censored distributions would work the same way.\n\n~~I checked the original PRs for Bound and this was actually the initial intended API, but they couldn't make it work.~~ It was not, but it came up a couple of times, e.g: https://github.com/pymc-devs/pymc3/pull/2277#discussion_r124477153"", 'comment_created': datetime.datetime(2021, 7, 23, 4, 12, 1, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 678109824, 'comment_body': 'We need tests that cover the case where lower / upper is a vector, which were covered in these `ArrayNormal` checks', 'comment_created': datetime.datetime(2021, 7, 28, 8, 56, 30, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 678110405, 'comment_body': 'Codecov is suggesting some important error branches that are not covered by the new tests', 'comment_created': datetime.datetime(2021, 7, 28, 8, 57, 15, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 678111009, 'comment_body': 'This branch should be tested', 'comment_created': datetime.datetime(2021, 7, 28, 8, 58, 2, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}]","[{'commit_sha': 'd105682e48075db08e42e25963fb75c1de8184e3', 'committer_username': 'kc611', 'committer_name': 'Kaustubh', 'committer_email': 'ckaustubhm06@gmail.com', 'commit_date': datetime.datetime(2019, 9, 15, 13, 33, 26, tzinfo=datetime.timezone.utc)}]",Kaustubh,55352418,ckaustubhm06@gmail.com,User,,57,,48,65
673843130,Refactored LKJCorr and _LKJCholeskyCov,This PR refactors `LKJCorr` and `_LKJCholeskyCov` multivariate distributions for `v4`. ,False,4784,https://api.github.com/repos/pymc-devs/pymc/pulls/4784,https://github.com/pymc-devs/pymc/pull/4784,closed,273,239,6,1,18,15,0,1,[],2021-06-19 08:13:30+00:00,2022-01-25 12:10:13+00:00,19022203.0,"220 days, 3:56:43","[{'comment_id': 654766531, 'comment_body': ""This did 'fancy' indexing of the array `x` back in `v3`. Do we have an `Op` or a function which could handle it for `TensorVariable` in `v4`?\r\n\r\nEdit: Used `aesara.tensor.take()` here"", 'comment_created': datetime.datetime(2021, 6, 19, 8, 18, 11, tzinfo=datetime.timezone.utc), 'commenter': 'kc611', 'type': 'User'}, {'comment_id': 654767856, 'comment_body': ""`sd_dist` becomes a `rv.out`(for the given distribution) here. What would be the right was to access it's `logp` method here ?"", 'comment_created': datetime.datetime(2021, 6, 19, 8, 30, 49, tzinfo=datetime.timezone.utc), 'commenter': 'kc611', 'type': 'User'}, {'comment_id': 654768162, 'comment_body': 'You can call the _logp method on that `dist`. Check the ZeroInflatedBinomial logp for an example.', 'comment_created': datetime.datetime(2021, 6, 19, 8, 33, 55, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 654769531, 'comment_body': 'Something like `_logp(sd_dist.owner.op, {}, sd_vals, *sd_dist.owner.inputs)`\n\nOr `_logp(sd_dist.owner.op, {}, sd_vals, *sd_dist.owner.inputs[3:])`', 'comment_created': datetime.datetime(2021, 6, 19, 8, 48, 23, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 655121278, 'comment_body': ""Why is it that the `sd_dist` variable here becomes a `np.ndarray` over here? Even though it's an `rv.out` when passed from `.dist()`. Is `rv.out` somehow it being evaluated?\r\n\r\nNote: Specifically this happened when I was testing the test for `LKJCholeskyCov` from: https://github.com/pymc-devs/pymc3/blob/7be2025c4091e450f9e9dd050eb0dca08995c83f/pymc3/tests/test_distributions_random.py#L2187-L2197 and the `rng_fn` was called from `Model.set_initval`"", 'comment_created': datetime.datetime(2021, 6, 21, 6, 59, 26, tzinfo=datetime.timezone.utc), 'commenter': 'kc611', 'type': 'User'}, {'comment_id': 655124421, 'comment_body': ""There's a shape mismatch for `logp` in `LKJCov`. Is this because since the parameters `n` and `eta` are 0-dimensional it expects the `logp` to be be of shape equal to `x` which is not the case over here ? (It gives out a scalar value, which it should.). Maybe something like https://github.com/pymc-devs/pymc3/pull/4777#discussion_r654755729 is needed here, but for `logp`"", 'comment_created': datetime.datetime(2021, 6, 21, 7, 5, 39, tzinfo=datetime.timezone.utc), 'commenter': 'kc611', 'type': 'User'}, {'comment_id': 658106826, 'comment_body': ""@ricardoV94 is the case `(np.array([0.7,0,-0.7]), 0, 3, -np.inf)` here a extreme corner case ? \r\n\r\nIt looks like previously, this tests didn't pass through `random` (which now is it's `rng_fn`) for `logp`, now it does. And hence fails."", 'comment_created': datetime.datetime(2021, 6, 24, 16, 29, 59, tzinfo=datetime.timezone.utc), 'commenter': 'kc611', 'type': 'User'}, {'comment_id': 659773365, 'comment_body': 'One way to avoid the `sd_dist` problem is to ensure that the output shape of `dist` over here is (`n`) i.e. the number of random draws required in `LKJCholeskyCov` so that they automatically get evaluated as required.', 'comment_created': datetime.datetime(2021, 6, 28, 13, 12, 51, tzinfo=datetime.timezone.utc), 'commenter': 'kc611', 'type': 'User'}, {'comment_id': 659774058, 'comment_body': 'Note that this is just a temporary test and will need significant changes. ', 'comment_created': datetime.datetime(2021, 6, 28, 13, 13, 42, tzinfo=datetime.timezone.utc), 'commenter': 'kc611', 'type': 'User'}, {'comment_id': 659775968, 'comment_body': ""One thing I noticed is that `**kwargs` are not being passed over here, which means the distribution will always have a size of `None`. If thats the case, then I don't think we require most of the shapes logic in `rng_fn` of `LKJCholeskyCov` unless there are other use cases."", 'comment_created': datetime.datetime(2021, 6, 28, 13, 16, 6, tzinfo=datetime.timezone.utc), 'commenter': 'kc611', 'type': 'User'}, {'comment_id': 659777448, 'comment_body': 'Previously this drew from `.random` of `sd_dist`. But we can make sure the output shape of the `rv_out` in `sd_dist` is `(size, n)`. Which can be directly assigned over here.', 'comment_created': datetime.datetime(2021, 6, 28, 13, 18, 10, tzinfo=datetime.timezone.utc), 'commenter': 'kc611', 'type': 'User'}, {'comment_id': 720809167, 'comment_body': ""The issue with calling `logpt` directly over here is that `logpt` tries to filter the input values according to RV's shape. So we'd have to put an limitation on shapes if we try to do it like that. "", 'comment_created': datetime.datetime(2021, 10, 3, 10, 51, 14, tzinfo=datetime.timezone.utc), 'commenter': 'kc611', 'type': 'User'}, {'comment_id': 720809594, 'comment_body': ""The `LKJCorrRV` can be called over here if this particular operation (i.e. `np.linalg.cholesky(C)`) along with `C *= D[..., :, np.newaxis] * D[..., np.newaxis, :]` can be done after we index the `C` array as `C[..., tril_idx[0], tril_idx[1]]`.\r\n\r\nIf that's the case then sure we could avoid rewriting the code above and directly call `LKJCorrRV.rng_fn` upon these arguments."", 'comment_created': datetime.datetime(2021, 10, 3, 10, 54, 49, tzinfo=datetime.timezone.utc), 'commenter': 'kc611', 'type': 'User'}, {'comment_id': 720812689, 'comment_body': 'I am not sure, but worth investigating it', 'comment_created': datetime.datetime(2021, 10, 3, 11, 20, 42, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 720812958, 'comment_body': ""I didn't mean that. But this approach seems fine in any case. As long as it doesn't result in some value variable missing warnings"", 'comment_created': datetime.datetime(2021, 10, 3, 11, 22, 51, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}]","[{'commit_sha': 'f03976c94cfbbcc588386b35faf06688eb5f1293', 'committer_username': 'kc611', 'committer_name': 'Kaustubh', 'committer_email': 'ckaustubhm06@gmail.com', 'commit_date': datetime.datetime(2019, 9, 15, 13, 33, 26, tzinfo=datetime.timezone.utc)}]",Kaustubh,55352418,ckaustubhm06@gmail.com,User,,57,,48,65
681710201,Refactoring Mixture RV for v4,"This PR provides a `Mixture` refactor for `v4`. It takes an approach similar to https://github.com/pymc-devs/pymc3/pull/4802 and creates an `MixtureRV` 'on-the-fly', (not sure how good/bad this approach would be for `Mixture` though). 

",False,4825,https://api.github.com/repos/pymc-devs/pymc/pulls/4825,https://github.com/pymc-devs/pymc/pull/4825,closed,106,438,2,3,2,6,0,0,[],2021-07-01 10:15:39+00:00,2021-07-05 17:44:11+00:00,372512.0,"4 days, 7:28:32","[{'comment_id': 662169086, 'comment_body': 'Not sure how `Mixture` works when `w` is a distribution. Are the component weights drawn from the random of `w` ?', 'comment_created': datetime.datetime(2021, 7, 1, 10, 21, 35, tzinfo=datetime.timezone.utc), 'commenter': 'kc611', 'type': 'User'}, {'comment_id': 662170224, 'comment_body': ""Only tested for this way of 'mixing' as of now. "", 'comment_created': datetime.datetime(2021, 7, 1, 10, 23, 39, tzinfo=datetime.timezone.utc), 'commenter': 'kc611', 'type': 'User'}, {'comment_id': 662182460, 'comment_body': '`w` is never a distribution, but an explicit parameter, I think', 'comment_created': datetime.datetime(2021, 7, 1, 10, 45, 58, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 662186606, 'comment_body': '> `w` is never a distribution\r\n\r\nIt can be Dirichlet distribution/stickbreaking over beta distribution as well.', 'comment_created': datetime.datetime(2021, 7, 1, 10, 53, 19, tzinfo=datetime.timezone.utc), 'commenter': 'Sayam753', 'type': 'User'}, {'comment_id': 662186651, 'comment_body': 'I am not very optimistic about this approach, but in any case, you can try to call the `dist.rng_fn` directly to avoid creating and evaluating symbolic arguments in here.', 'comment_created': datetime.datetime(2021, 7, 1, 10, 53, 24, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 662188595, 'comment_body': 'But it\'s an explicit parameter, no? Not a `.dist()` kind of thing (unlike the `comp_dists`):\r\n\r\n```python\r\nw = pm.Dirichlet(""w"", [1, 1, 1])\r\ny = pm.Mixture(""y"", w, ...)  # w is an explicit parameter\r\n```', 'comment_created': datetime.datetime(2021, 7, 1, 10, 56, 48, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}]","[{'commit_sha': '364880ba87ffab894c429ddad2d424d77c3fe82f', 'committer_username': 'kc611', 'committer_name': 'Kaustubh', 'committer_email': 'ckaustubhm06@gmail.com', 'commit_date': datetime.datetime(2019, 9, 15, 13, 33, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd26712185be48acf94a7f1585edf4e466e847ae4', 'committer_username': 'kc611', 'committer_name': 'Kaustubh', 'committer_email': 'ckaustubhm06@gmail.com', 'commit_date': datetime.datetime(2019, 9, 15, 13, 33, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9d8c9ea3b88c528adbc8e44e691822827eb1a63e', 'committer_username': 'kc611', 'committer_name': 'Kaustubh', 'committer_email': 'ckaustubhm06@gmail.com', 'commit_date': datetime.datetime(2019, 9, 15, 13, 33, 26, tzinfo=datetime.timezone.utc)}]",Kaustubh,55352418,ckaustubhm06@gmail.com,User,,57,,48,65
698777329,Integration of `aeppl` with PyMC,"This PR refactors PyMC's `_logp` framework to be able to use `aeppl`'s `joint_logprob` framework. 

The changes this PR aims to make:

- [x] Registering the Log-probability functions of PyMC's distributions on `_logprob` instead of `_logp` so that `joint_logprob` can use them internally.
- [x] Separating `log-cdf` logic handling from `logp` logic (currently both are being handled in the same `logpt` function)
- [x] Removing redundant `logp` from Distribution classes (since `_logprob` registration present in `aeppl, for e.g. `NormalRV`)
- [x] Calling `factorized_joint_logprob` inside `logpt` function. and then return the appropriate RVs (since `joint_logprob` tends to return all of the RV's `logp` present in the graph)
- [x] Switching from `pymc`'s transforms to `aeppl`'s transforms.
  - [x] Refactor `transforms.py` and remove transforms already present in `aeppl`
  - [x] Updating transform related logic to match `aeppl`'s. 
  - [x] Passing transforms to `joint_logprob` correctly
  - [x] Refactoring `test_transforms.py`
- [x] Investigate test failures.
  - [x] test_distributions failures. 
  - [x] `test_transforms.py` test failures. 
  - [x] `test_logprob` failures.",True,4887,https://api.github.com/repos/pymc-devs/pymc/pulls/4887,https://github.com/pymc-devs/pymc/pull/4887,closed,595,1095,40,1,23,79,3,2,"[{'name': 'enhancements'}, {'name': 'v4'}, {'name': 'pytensor'}]",2021-07-28 15:04:49+00:00,2021-10-23 10:14:42+00:00,7499393.0,"86 days, 19:09:53","[{'comment_id': 678397888, 'comment_body': ""This way the `Op`s with no registered logp's in PyMC can 'fall back' to their aeppl implementation and can be replaced with appropriate RVs (For instance the current Mixture will be a `Subtensor` later replaced by `MixtureRV` and also the upcoming `Scan` which will be replaced by `ScanRV` )\r\n\r\nIs this a good entry point for `joint_logprob`? cc @brandonwillard  "", 'comment_created': datetime.datetime(2021, 7, 28, 15, 11, 32, tzinfo=datetime.timezone.utc), 'commenter': 'kc611', 'type': 'User'}, {'comment_id': 678401173, 'comment_body': ""Here we'll need to take care of the `size` argument passed to the Mixture distribution itself. "", 'comment_created': datetime.datetime(2021, 7, 28, 15, 14, 54, tzinfo=datetime.timezone.utc), 'commenter': 'kc611', 'type': 'User'}, {'comment_id': 678404493, 'comment_body': ""Something like that could work for now, but keep on mind that we'll probably want to entirely remove this module at some point after the integration is established."", 'comment_created': datetime.datetime(2021, 7, 28, 15, 18, 30, tzinfo=datetime.timezone.utc), 'commenter': 'brandonwillard', 'type': 'User'}, {'comment_id': 679979990, 'comment_body': ""For some reason these aren't being registered onto `_logprob`."", 'comment_created': datetime.datetime(2021, 7, 30, 14, 42, 18, tzinfo=datetime.timezone.utc), 'commenter': 'kc611', 'type': 'User'}, {'comment_id': 680099950, 'comment_body': ""We shouldn't need these anymore, right?  The functionality should already be covered by AePPL."", 'comment_created': datetime.datetime(2021, 7, 30, 17, 10, 21, tzinfo=datetime.timezone.utc), 'commenter': 'brandonwillard', 'type': 'User'}, {'comment_id': 687586754, 'comment_body': 'Separated the `logcdf` and `logp` frameworks since down the line we can expect changes to `logpt` function when `joint_logprob` supports the transforms being passed to it. (And the difference between the logic for handling one thing or other will increase)', 'comment_created': datetime.datetime(2021, 8, 12, 10, 26, 31, tzinfo=datetime.timezone.utc), 'commenter': 'kc611', 'type': 'User'}, {'comment_id': 687588224, 'comment_body': 'This was required since `joint_logprob` will simply ignore the RandomVariables which are not in the `rvs_to_values` list. Plus the transforms are not fully supported hence we still have to do the replacement logic below. (L-160 to L-167)', 'comment_created': datetime.datetime(2021, 8, 12, 10, 28, 52, tzinfo=datetime.timezone.utc), 'commenter': 'kc611', 'type': 'User'}, {'comment_id': 699586154, 'comment_body': 'Made a call to `joint_logprob` using transforms mapping. ', 'comment_created': datetime.datetime(2021, 8, 31, 18, 44, 59, tzinfo=datetime.timezone.utc), 'commenter': 'kc611', 'type': 'User'}, {'comment_id': 712552535, 'comment_body': 'You need to add this to the conda test and dev env, as this is auto-generated.', 'comment_created': datetime.datetime(2021, 9, 20, 22, 18, 19, tzinfo=datetime.timezone.utc), 'commenter': 'twiecki', 'type': 'User'}, {'comment_id': 712556820, 'comment_body': '```suggestion\n        logp = _logprob(normal, (value,), None, None, None, mu, sigma) - norm\n```\nSeems less error prone, same for others below.', 'comment_created': datetime.datetime(2021, 9, 20, 22, 27, 58, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 712557384, 'comment_body': ""```suggestion\n```\nI might be wrong but I don't think we are using this anymore"", 'comment_created': datetime.datetime(2021, 9, 20, 22, 29, 7, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 712558623, 'comment_body': 'Not sure about this one. Why did you add it?\n\nI would guess an exception might be better', 'comment_created': datetime.datetime(2021, 9, 20, 22, 31, 49, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 712560387, 'comment_body': ""```suggestion\n            tmp_rvs_to_values[curr_var] = rv_value\n            tmp_values_to_rvs[rv_value] = curr_var\n```\nThen you don't need the list of keys thing in the loop below"", 'comment_created': datetime.datetime(2021, 9, 20, 22, 36, 3, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 712561320, 'comment_body': ""```suggestion\n    scaling: bool = True,\n    sum: bool = False,\n```\n\nI don't think those 2 ever make sense for cdfs\n"", 'comment_created': datetime.datetime(2021, 9, 20, 22, 37, 59, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 712564455, 'comment_body': '```suggestion\nfrom aeppl import transforms\n```\n', 'comment_created': datetime.datetime(2021, 9, 20, 22, 45, 6, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 712565324, 'comment_body': 'We probably want to make the aeppl transforms available here for PyMC3 users', 'comment_created': datetime.datetime(2021, 9, 20, 22, 47, 14, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 712876994, 'comment_body': ""Ah okay, I added that because the `BART` class wasn't dispatching according to `NoDistribution`s `logp` so had to add that separately like this. "", 'comment_created': datetime.datetime(2021, 9, 21, 9, 46, 2, tzinfo=datetime.timezone.utc), 'commenter': 'kc611', 'type': 'User'}, {'comment_id': 713489633, 'comment_body': ""Let's set upper bounds on the minor version number and conciously update instead of getting surprised by breaking changes."", 'comment_created': datetime.datetime(2021, 9, 21, 23, 37, 22, tzinfo=datetime.timezone.utc), 'commenter': 'michaelosthege', 'type': 'User'}, {'comment_id': 713518633, 'comment_body': 'Why? Can we add a comment?', 'comment_created': datetime.datetime(2021, 9, 22, 1, 5, 27, tzinfo=datetime.timezone.utc), 'commenter': 'michaelosthege', 'type': 'User'}, {'comment_id': 713518979, 'comment_body': 'Is this on purpose?', 'comment_created': datetime.datetime(2021, 9, 22, 1, 6, 38, tzinfo=datetime.timezone.utc), 'commenter': 'michaelosthege', 'type': 'User'}, {'comment_id': 713520235, 'comment_body': 'Short explanation maybe? (same as above)', 'comment_created': datetime.datetime(2021, 9, 22, 1, 10, 33, tzinfo=datetime.timezone.utc), 'commenter': 'michaelosthege', 'type': 'User'}, {'comment_id': 713522500, 'comment_body': 'TODO replace 0 with None', 'comment_created': datetime.datetime(2021, 9, 22, 1, 18, 21, tzinfo=datetime.timezone.utc), 'commenter': 'michaelosthege', 'type': 'User'}, {'comment_id': 713523027, 'comment_body': 'If `value_var` is not the `value_var`, it should not be called `value_var` in the first place.\r\n(On one side of the `=` it should say something else than `value_var`.)', 'comment_created': datetime.datetime(2021, 9, 22, 1, 20, 20, tzinfo=datetime.timezone.utc), 'commenter': 'michaelosthege', 'type': 'User'}, {'comment_id': 713523526, 'comment_body': 'The existence of this method is not in line with actual distributions where this stuff is done through `pm.logp`.\r\nCan it be dispatched?\r\n**EDIT: ** It looks like it _is_ dispatched below?\r\n\r\nAlso the docstring does not account for all parameters.', 'comment_created': datetime.datetime(2021, 9, 22, 1, 21, 47, tzinfo=datetime.timezone.utc), 'commenter': 'michaelosthege', 'type': 'User'}, {'comment_id': 713524243, 'comment_body': 'Same thing with the `value_var` variable name. (mypy would also complain about it, because overwriting the variable name changes the type...)', 'comment_created': datetime.datetime(2021, 9, 22, 1, 24, 1, tzinfo=datetime.timezone.utc), 'commenter': 'michaelosthege', 'type': 'User'}, {'comment_id': 713524931, 'comment_body': '```suggestion\r\n    # Recompute test values for the changes introduced by the replacements above.\r\n    if config.compute_test_value != ""off"":\r\n        for node in io_toposort(graph_inputs((logp_var,)), (logp_var,)):\r\n            compute_test_value(node)\r\n\r\n    if var.name is not None:\r\n        logp_var.name = f""__logp_{var.name}""\r\n```', 'comment_created': datetime.datetime(2021, 9, 22, 1, 26, 27, tzinfo=datetime.timezone.utc), 'commenter': 'michaelosthege', 'type': 'User'}, {'comment_id': 713526229, 'comment_body': 'remove?', 'comment_created': datetime.datetime(2021, 9, 22, 1, 30, 25, tzinfo=datetime.timezone.utc), 'commenter': 'michaelosthege', 'type': 'User'}, {'comment_id': 716031951, 'comment_body': 'Is this an `aeppl` constraint ?\r\n', 'comment_created': datetime.datetime(2021, 9, 25, 11, 50, 57, tzinfo=datetime.timezone.utc), 'commenter': 'kc611', 'type': 'User'}, {'comment_id': 716032142, 'comment_body': 'This might need further investigation. The tests do pass for the value checks below but not for these dimension checks. ', 'comment_created': datetime.datetime(2021, 9, 25, 11, 52, 37, tzinfo=datetime.timezone.utc), 'commenter': 'kc611', 'type': 'User'}, {'comment_id': 716545146, 'comment_body': ""Don't all other logps take symbolic x too?"", 'comment_created': datetime.datetime(2021, 9, 27, 10, 3, 55, tzinfo=datetime.timezone.utc), 'commenter': 'michaelosthege', 'type': 'User'}, {'comment_id': 716566657, 'comment_body': 'The new kwarg is missing from the docstring', 'comment_created': datetime.datetime(2021, 9, 27, 10, 34, 47, tzinfo=datetime.timezone.utc), 'commenter': 'michaelosthege', 'type': 'User'}, {'comment_id': 716566971, 'comment_body': 'ToDo', 'comment_created': datetime.datetime(2021, 9, 27, 10, 35, 18, tzinfo=datetime.timezone.utc), 'commenter': 'michaelosthege', 'type': 'User'}, {'comment_id': 716569089, 'comment_body': 'It would be great to have comments explaining what these next code blocks are about. (Also for blocks above.)', 'comment_created': datetime.datetime(2021, 9, 27, 10, 38, 43, tzinfo=datetime.timezone.utc), 'commenter': 'michaelosthege', 'type': 'User'}, {'comment_id': 716569366, 'comment_body': '```suggestion\r\n    # Recompute test values for the changes introduced by the replacements above.\r\n```', 'comment_created': datetime.datetime(2021, 9, 27, 10, 39, 7, tzinfo=datetime.timezone.utc), 'commenter': 'michaelosthege', 'type': 'User'}, {'comment_id': 716569599, 'comment_body': '```suggestion\r\n        logp_var.name = f""__logp_{var.name}""\r\n```', 'comment_created': datetime.datetime(2021, 9, 27, 10, 39, 29, tzinfo=datetime.timezone.utc), 'commenter': 'michaelosthege', 'type': 'User'}, {'comment_id': 716570662, 'comment_body': 'To include it where?\r\n\r\nAlso is this kwarg even used somewhere?', 'comment_created': datetime.datetime(2021, 9, 27, 10, 41, 3, tzinfo=datetime.timezone.utc), 'commenter': 'michaelosthege', 'type': 'User'}, {'comment_id': 716571170, 'comment_body': 'ToDo', 'comment_created': datetime.datetime(2021, 9, 27, 10, 41, 46, tzinfo=datetime.timezone.utc), 'commenter': 'michaelosthege', 'type': 'User'}, {'comment_id': 716571994, 'comment_body': 'Maybe add an alias, or a placeholder class `Transform` for printing migration instructions?', 'comment_created': datetime.datetime(2021, 9, 27, 10, 43, 6, tzinfo=datetime.timezone.utc), 'commenter': 'michaelosthege', 'type': 'User'}, {'comment_id': 716636177, 'comment_body': ""From the text here I don't understand what this means.\r\n\r\nCan you open a corresponding issue?"", 'comment_created': datetime.datetime(2021, 9, 27, 12, 19, 58, tzinfo=datetime.timezone.utc), 'commenter': 'michaelosthege', 'type': 'User'}, {'comment_id': 716636773, 'comment_body': 'ToDo (convert to issue?)', 'comment_created': datetime.datetime(2021, 9, 27, 12, 20, 45, tzinfo=datetime.timezone.utc), 'commenter': 'michaelosthege', 'type': 'User'}, {'comment_id': 716637278, 'comment_body': 'Another ToDo', 'comment_created': datetime.datetime(2021, 9, 27, 12, 21, 22, tzinfo=datetime.timezone.utc), 'commenter': 'michaelosthege', 'type': 'User'}, {'comment_id': 716638383, 'comment_body': ""`interval` is a type? That's unexpected from a lowercase name =/"", 'comment_created': datetime.datetime(2021, 9, 27, 12, 22, 55, tzinfo=datetime.timezone.utc), 'commenter': 'michaelosthege', 'type': 'User'}, {'comment_id': 716639456, 'comment_body': 'Does that mean the circular transform is broken?', 'comment_created': datetime.datetime(2021, 9, 27, 12, 24, 32, tzinfo=datetime.timezone.utc), 'commenter': 'michaelosthege', 'type': 'User'}, {'comment_id': 716645341, 'comment_body': 'Specifically which new `kwarg` are you talking about ?', 'comment_created': datetime.datetime(2021, 9, 27, 12, 32, 45, tzinfo=datetime.timezone.utc), 'commenter': 'kc611', 'type': 'User'}, {'comment_id': 716646221, 'comment_body': '`jacobian` is being passed onto `factorized_joint_logprob` below. The functionality was recently added into `aeppl`. ', 'comment_created': datetime.datetime(2021, 9, 27, 12, 33, 55, tzinfo=datetime.timezone.utc), 'commenter': 'kc611', 'type': 'User'}, {'comment_id': 716647028, 'comment_body': ""There's already an issue running regarding this: https://github.com/pymc-devs/pymc3/issues/5023"", 'comment_created': datetime.datetime(2021, 9, 27, 12, 35, 4, tzinfo=datetime.timezone.utc), 'commenter': 'kc611', 'type': 'User'}, {'comment_id': 716648132, 'comment_body': 'Maybe. Otherwise the better way to do this would probably be to use a corresponding value variable while constructing the log probability graph and then passing the actual values onto the `.eval()`. Rather than directly passing those value. ', 'comment_created': datetime.datetime(2021, 9, 27, 12, 36, 36, tzinfo=datetime.timezone.utc), 'commenter': 'kc611', 'type': 'User'}, {'comment_id': 716650043, 'comment_body': ""It already is the case, no ?\r\n\r\nhttps://github.com/pymc-devs/pymc3/blob/8ae296bdf3ee58850824c9997293803d2df958ec/pymc/distributions/transforms.py#L224\r\n\r\nIt's just that the actual name of the class went from `Interval` to `IntervalTransform`"", 'comment_created': datetime.datetime(2021, 9, 27, 12, 38, 58, tzinfo=datetime.timezone.utc), 'commenter': 'kc611', 'type': 'User'}, {'comment_id': 716652481, 'comment_body': ""Oh this one can just be removed. I didn't know what the significance of this line https://github.com/pymc-devs/pymc3/blob/8ae296bdf3ee58850824c9997293803d2df958ec/pymc/distributions/simulator.py#L220 was. I just changed it to it's new corresponding form. "", 'comment_created': datetime.datetime(2021, 9, 27, 12, 41, 58, tzinfo=datetime.timezone.utc), 'commenter': 'kc611', 'type': 'User'}, {'comment_id': 716654244, 'comment_body': ""Yes they do, I'll change this doc-string accordingly. "", 'comment_created': datetime.datetime(2021, 9, 27, 12, 44, 6, tzinfo=datetime.timezone.utc), 'commenter': 'kc611', 'type': 'User'}, {'comment_id': 716656636, 'comment_body': ""This particular case was because `factorized_joint_logprob` returns an empty dictionary when there are no logp graph where-as PyMC expects it to be `None`. Hence this shortcut. Regardless you're right, I should probably add such information as comments."", 'comment_created': datetime.datetime(2021, 9, 27, 12, 46, 59, tzinfo=datetime.timezone.utc), 'commenter': 'kc611', 'type': 'User'}, {'comment_id': 716657742, 'comment_body': 'This was discussed during the call. We should probably open an issue regarding this. ', 'comment_created': datetime.datetime(2021, 9, 27, 12, 48, 21, tzinfo=datetime.timezone.utc), 'commenter': 'kc611', 'type': 'User'}, {'comment_id': 717638027, 'comment_body': 'CC @ricardoV94 ', 'comment_created': datetime.datetime(2021, 9, 28, 14, 28, 2, tzinfo=datetime.timezone.utc), 'commenter': 'kc611', 'type': 'User'}, {'comment_id': 719407372, 'comment_body': 'The sum kwarg', 'comment_created': datetime.datetime(2021, 9, 30, 13, 29, 38, tzinfo=datetime.timezone.utc), 'commenter': 'michaelosthege', 'type': 'User'}, {'comment_id': 723155535, 'comment_body': 'Can this raise a NotImplementedError?', 'comment_created': datetime.datetime(2021, 10, 6, 11, 40, 16, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 726085267, 'comment_body': 'Can you explain a bit of what you are doing here? Where there duplicated variables in graphs with IncSubtensors?', 'comment_created': datetime.datetime(2021, 10, 11, 12, 46, 19, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 726089780, 'comment_body': 'Also add an alias to the hold `stick_breaking`, with a deprecation warning (will have to subclass Simplex I think)', 'comment_created': datetime.datetime(2021, 10, 11, 12, 52, 1, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 726092260, 'comment_body': '```suggestion\r\n    @pytest.mark.xfail(\r\n        reason=""Fails due to brittle parametrization triggering numpy domain check in RandomVariable, see #5023""\r\n    )\r\n```', 'comment_created': datetime.datetime(2021, 10, 11, 12, 55, 23, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 726092942, 'comment_body': 'Can we revert these changes?', 'comment_created': datetime.datetime(2021, 10, 11, 12, 56, 14, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 726093191, 'comment_body': ""No point in changing things if it's still an x-fail"", 'comment_created': datetime.datetime(2021, 10, 11, 12, 56, 32, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 726094797, 'comment_body': ""Let's revert this one"", 'comment_created': datetime.datetime(2021, 10, 11, 12, 58, 34, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 726095342, 'comment_body': ""Let's open an issue to track this one"", 'comment_created': datetime.datetime(2021, 10, 11, 12, 59, 16, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 726095510, 'comment_body': 'Same here', 'comment_created': datetime.datetime(2021, 10, 11, 12, 59, 31, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 726096044, 'comment_body': ""Let's open an issue for tracking this"", 'comment_created': datetime.datetime(2021, 10, 11, 13, 0, 13, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 726098963, 'comment_body': 'I think so. For instance constants may have the same hash (no idea if they do), which would lead to issues in our dict output. Anyway this seems fine.', 'comment_created': datetime.datetime(2021, 10, 11, 13, 4, 6, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 728908852, 'comment_body': ""This failure happens with current `aeppl` version. We should probably open up an issue for this. The output values are losing precision somewhere along the chain transform. (It's a values deviation of about `10^-6` from expected)"", 'comment_created': datetime.datetime(2021, 10, 14, 11, 57, 16, tzinfo=datetime.timezone.utc), 'commenter': 'kc611', 'type': 'User'}, {'comment_id': 728910926, 'comment_body': ""No, essentially we don't have the shortcut which returned the same value in the `Stickbreaking`/`Simplex` transform in `aeppl` anymore for a particular case. And I don't think we'd should be doing that until we absolutely need to.  \r\n\r\nhttps://github.com/pymc-devs/pymc/blob/a8b475425f3cfe226043242cf0551eaeaf224cb2/pymc/distributions/transforms.py#L289-L292"", 'comment_created': datetime.datetime(2021, 10, 14, 12, 0, 13, tzinfo=datetime.timezone.utc), 'commenter': 'kc611', 'type': 'User'}, {'comment_id': 729189132, 'comment_body': ""This is expected for transformations whose inverse is not completely undone by the aesara rewrites. Do open an issue. I wanted to investigate it, but didn't have the time yet"", 'comment_created': datetime.datetime(2021, 10, 14, 17, 17, 49, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 729925339, 'comment_body': 'The tests end up raising that error. (During sampling from a model containing `BART`). Here is an exampe stack trace\r\n\r\n```\r\npymc/sampling.py:500: in sample\r\n    step = assign_step_methods(model, step, step_kwargs=kwargs)\r\npymc/sampling.py:219: in assign_step_methods\r\n    return instantiate_steppers(model, steps, selected_steps, step_kwargs)\r\npymc/sampling.py:143: in instantiate_steppers\r\n    step = step_class(vars=vars, model=model, **args)\r\npymc/bart/pgbart.py:184: in __init__\r\n    self.likelihood_logp = logp(initial_values, [model.datalogpt], vars, shared)\r\npymc/model.py:825: in datalogpt\r\n    obs_factors = logpt(self.observed_RVs, obs_values)\r\npymc/distributions/logprob.py:228: in logpt\r\n    tmp_rvs_to_values, extra_rewrites=transform_opt, use_jacobian=jacobian, **kwargs\r\n/home/kc611/anaconda3/envs/pymcv4/lib/python3.7/site-packages/aeppl/joint_logprob.py:190: in factorized_joint_logprob\r\n    **kwargs,\r\n/home/kc611/anaconda3/envs/pymcv4/lib/python3.7/functools.py:840: in wrapper\r\n    return dispatch(args[0].__class__)(*args, **kw)\r\npymc/bart/bart.py:181: in logp\r\n    return BART.logp(value_var, *_dist_params)\r\npymc/bart/bart.py:163: NotImplementedError()\r\n```\r\n\r\nIs this preventable ? ', 'comment_created': datetime.datetime(2021, 10, 15, 15, 34, 5, tzinfo=datetime.timezone.utc), 'commenter': 'kc611', 'type': 'User'}, {'comment_id': 733339071, 'comment_body': ""Not a blocker, but shouldn't this go into Aesara?"", 'comment_created': datetime.datetime(2021, 10, 21, 5, 51, 47, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 733339533, 'comment_body': 'What happened to these conditions?', 'comment_created': datetime.datetime(2021, 10, 21, 5, 52, 55, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 733802454, 'comment_body': ""Giving invalid parameters to a distribution now raises an `AsserionError` from `aeppl` (From the `assert` statements in each `logp` so this will no longer give infinite values). Plus the invalid values are being tested in `aeppl` so I didn't see a point adding such a test in PyMC."", 'comment_created': datetime.datetime(2021, 10, 21, 15, 32, 28, tzinfo=datetime.timezone.utc), 'commenter': 'kc611', 'type': 'User'}, {'comment_id': 733804352, 'comment_body': ""That is supposed to be just a temporary pass-through for `Assert` Op since Jax doesn't allow asserts in it's code. Though you're right we should be adding this functionality (maybe with a good workaround) in Aesara, I'll open an issue for this. "", 'comment_created': datetime.datetime(2021, 10, 21, 15, 34, 58, tzinfo=datetime.timezone.utc), 'commenter': 'kc611', 'type': 'User'}, {'comment_id': 733833776, 'comment_body': '@ricardoV94 is this is right way to test that issue ?', 'comment_created': datetime.datetime(2021, 10, 21, 16, 9, 14, tzinfo=datetime.timezone.utc), 'commenter': 'kc611', 'type': 'User'}, {'comment_id': 733834934, 'comment_body': ""~I think that's good, it fails on main locally!~\r\n\r\nI would add a comment referencing the relevant Github issue for context"", 'comment_created': datetime.datetime(2021, 10, 21, 16, 10, 40, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 733836933, 'comment_body': ""Nevermind, it's not that as it passes on main"", 'comment_created': datetime.datetime(2021, 10, 21, 16, 13, 7, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 733844519, 'comment_body': 'I pushed a test that passes now and fails on main', 'comment_created': datetime.datetime(2021, 10, 21, 16, 22, 1, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 734890481, 'comment_body': ""Disclaimer: I skimmed the discussion and have not reviewed the code\r\n\r\nWhat does this dependency mean for the users? Will using aeppl functions/methods be necessary? Or will it be handled under the hood and advanced users will be able to use it if they want?\r\n\r\nThis is a minor-medium concern for the beta release, but aeppl seems to be very little documented. I was unable to find the _link_ to it's docs anywhere. I also did check and saw there was a `gh-pages` branch so I went to https://aesara-devs.github.io/aeppl/ which has some api docs. We need to work on aeppl docs if we expect pymc **users** to work with it directly before releasing stable 4.0"", 'comment_created': datetime.datetime(2021, 10, 22, 23, 36, 43, tzinfo=datetime.timezone.utc), 'commenter': 'OriolAbril', 'type': 'User'}, {'comment_id': 734938817, 'comment_body': ""Users don't need to know about aeppl, it will be used by us developers to create more complex distributions.\n\nIndeed we need documentation building on aeppl, we have a PR opened for that, but we welcome help. All our methods and functions are quite well documented on the other hand"", 'comment_created': datetime.datetime(2021, 10, 23, 7, 47, 16, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}]","[{'commit_sha': 'a8545150639a9fb9246aac96612e875ce158a891', 'committer_username': 'kc611', 'committer_name': 'Kaustubh', 'committer_email': 'ckaustubhm06@gmail.com', 'commit_date': datetime.datetime(2019, 9, 15, 13, 33, 26, tzinfo=datetime.timezone.utc)}]",Kaustubh,55352418,ckaustubhm06@gmail.com,User,,57,,48,65
683039479,Add support for `Scan` `Op`s in `joint_logprob`,"This PR aims to implements `logprob` for Scan Ops. Linked Issue: #23 

```python
import aesara
import aesara.tensor as at


k = at.iscalar(""k"")

Y_rv, _ = aesara.scan(
    fn=lambda Y_tm1: Y_tm1 + at.random.normal(name=""Y_t""),
    outputs_info=[{""initial"": at.as_tensor([0.0]), ""taps"": [-1]}],
    n_steps=k,
    name=""Y""
)

y_vv = Y_rv.clone()
y_vv.name = ""y""

logp = joint_logprob(Y_rv, {Y_rv: y_vv})
```

Note : I am building this on top of replacement logic from #19 

***

- [x] Setting up a general `Scan` replacement framework from `symbolic-pymc`.
- [x] Calculating log-probability for Scan's output arguments 'all-at-once' in `logprob_ScanRV`.
  - [x] Passing proper values to `convert_outer_out_to_in` from `logprob_ScanRV`
  - [x] Using the `new_outer_input_vars` mapping to act as values for log probability of respective inner-graph output nodes.
    - [x] Figure out how to split `value` of each node according to iterations of Scan. (i.e. taps logic)
    - [x] Calculating joint-log-probability in `create_inner_out_logp` instead of a normal `_logprob` call for each node involved.
- [x] Investigating and handling test failures/unexpected behaviors.
   - [x] Find out cause of test failure in `test_scan_logprob`
   - [x] Figuring out how to handle `RandomStream` updates in Aesara's `FunctionGraphs` so that they do not require explicit handling in `aeppl` ",True,24,https://api.github.com/repos/aesara-devs/aeppl/pulls/24,https://github.com/aesara-devs/aeppl/pull/24,closed,928,7,5,3,12,31,2,1,"[{'name': 'enhancement'}, {'name': 'important'}]",2021-07-03 15:27:01+00:00,2021-10-06 02:26:11+00:00,8161150.0,"94 days, 10:59:10","[{'comment_id': 663377555, 'comment_body': 'So as my first try I did something similar to what we do with `MixtureRV`. \r\n\r\nThis replacement gets stuck in some long \'optimization\' computation.  I\'m not even sure if this logic will be able to handle ""Push-down"" correctly, since were basically converting Scan node to an `ScanRV` with just the `RV` inputs. ', 'comment_created': datetime.datetime(2021, 7, 3, 15, 29, 22, tzinfo=datetime.timezone.utc), 'commenter': 'kc611', 'type': 'User'}, {'comment_id': 663377733, 'comment_body': ""Is there a way we can get the Scan's inner graph as `FunctionGraph` so we can walk that instead of each output node. "", 'comment_created': datetime.datetime(2021, 7, 3, 15, 31, 17, tzinfo=datetime.timezone.utc), 'commenter': 'kc611', 'type': 'User'}, {'comment_id': 663388507, 'comment_body': 'Are you referring to the output nodes of the inner-graph?', 'comment_created': datetime.datetime(2021, 7, 3, 17, 22, 44, tzinfo=datetime.timezone.utc), 'commenter': 'brandonwillard', 'type': 'User'}, {'comment_id': 663390744, 'comment_body': ""Actually, here you can use `aesara.graph.basic.io_toposort` on the inner-inputs and inner-outputs (see [here](https://github.com/pymc-devs/symbolic-pymc/blob/master/symbolic_pymc/theano/opt.py#L575) for an example in this exact context).  To get the inner-inputs and inner-outputs, you can use the `symbolic_pymc.theano.opt.ScanArgs` helper-class.  There's already a `scan_args` in Aesara upon which `ScanArgs` is based, but we should really replace it with `ScanArgs`.\r\n\r\nOnce you have a `ScanArgs` instance, you can get all the parts of a `Scan` `Op` much more easily.  For instance, the `.inner_outputs` property will give you a list of the inner-outputs."", 'comment_created': datetime.datetime(2021, 7, 3, 17, 46, 1, tzinfo=datetime.timezone.utc), 'commenter': 'brandonwillard', 'type': 'User'}, {'comment_id': 663391681, 'comment_body': ""Remember, this example requires a convolution rewrite that isn't present yet.  Also, this example will return the same `at.random.normal` for every iteration.\r\n\r\nLet's start with a simpler example that doesn't require any other rewrites; that will allow us to create and check the log-probability steps.\r\n\r\nFor example:\r\n```python\r\nsrng = at.random.RandomStream()\r\nresult, _ = aesara.scan(lambda mu: srng.normal(mu, 1e-3), sequences=[at.pow(10, at.arange(k))])\r\n```\r\n\r\nThat will create a graph that is equivalent to `at.random.normal(at.pow(10, at.arange(k)), 1e-3)`.\r\n\r\nNB: There are some `Scan` rewrites that perform optimizations like this, but I don't think they apply to this case, because `at.random.normal` doesn't produce an `Elemwise`.  Regardless, at some point we should have these kinds of things in place, but, even if we did have them, we would want to disable them so that this extremely simple test could be used."", 'comment_created': datetime.datetime(2021, 7, 3, 17, 55, 26, tzinfo=datetime.timezone.utc), 'commenter': 'brandonwillard', 'type': 'User'}, {'comment_id': 663392698, 'comment_body': ""Yeah like making an entire temporary fgraph just to walk it through to find RV's seems a little bit redundant. Is there a better way to detect the RVs."", 'comment_created': datetime.datetime(2021, 7, 3, 18, 7, 24, tzinfo=datetime.timezone.utc), 'commenter': 'kc611', 'type': 'User'}, {'comment_id': 663393186, 'comment_body': ""The replacement performed by `scan_replace` should only occur when the inner-outputs that determine the outer-outputs are all `RandomVariable` nodes (i.e. the (relevant) outputs of scan are effectively a sequence of `RandomVariable` outputs), because that's when we can compute the log-probability with something like `at.sum(scan(lambda ..., value, ...: logprob(inner_out, value), ...))`.\r\n\r\nThe other rewrites are applied separately to the original `Scan`&mdash;through the normal course of running `logprob_rewrites_db`&mdash;until the inner-graph's `RandomVariable`s are pushed down enough to become the inner and/or outer-outputs.  `scan_replace` is only there to check that this has been done sufficiently enough to replace the `Scan`."", 'comment_created': datetime.datetime(2021, 7, 3, 18, 12, 20, tzinfo=datetime.timezone.utc), 'commenter': 'brandonwillard', 'type': 'User'}, {'comment_id': 664886788, 'comment_body': ""`FunctionGraph`s are simple containers that only hold a few `list`s (and sometimes a `dict`), so don't worry too much about creating and discarding them.  The same goes for `ScanArgs`."", 'comment_created': datetime.datetime(2021, 7, 6, 21, 22, 20, tzinfo=datetime.timezone.utc), 'commenter': 'brandonwillard', 'type': 'User'}, {'comment_id': 664887909, 'comment_body': ""This can go in a `utils` module, or, if a lot more code is needed for the `Scan` work, its own module entirely.\r\n\r\nAlso, we should replace Aesara's current `scan_args` with this `ScanArgs`."", 'comment_created': datetime.datetime(2021, 7, 6, 21, 24, 27, tzinfo=datetime.timezone.utc), 'commenter': 'brandonwillard', 'type': 'User'}, {'comment_id': 665079004, 'comment_body': ""I'll make a quick PR for `ScanArgs` in Aesara. "", 'comment_created': datetime.datetime(2021, 7, 7, 6, 28, 43, tzinfo=datetime.timezone.utc), 'commenter': 'kc611', 'type': 'User'}, {'comment_id': 665079307, 'comment_body': 'Did it in https://github.com/aesara-devs/aesara/pull/510', 'comment_created': datetime.datetime(2021, 7, 7, 6, 29, 16, tzinfo=datetime.timezone.utc), 'commenter': 'kc611', 'type': 'User'}, {'comment_id': 684293607, 'comment_body': 'This is not being registered as a Scan node. ', 'comment_created': datetime.datetime(2021, 8, 6, 14, 47, 23, tzinfo=datetime.timezone.utc), 'commenter': 'kc611', 'type': 'User'}, {'comment_id': 684436927, 'comment_body': ""Without this in place, we're assuming that every `Scan` is a `MeasurableScan` (because we turn every `Scan` into one below), but that's not necessarily true.\r\n\r\nWe can apply the `Scan` transforms here and then convert the output into a `MeasurableScan`, or we can attempt to determine if a `Scan` can be transformed and do that later.  The former seems easier, though."", 'comment_created': datetime.datetime(2021, 8, 6, 18, 44, 6, tzinfo=datetime.timezone.utc), 'commenter': 'brandonwillard', 'type': 'User'}, {'comment_id': 684437924, 'comment_body': ""Actually, it looks like we're letting `push_out_rvs_from_scan` run alongside this rewrite, and that should probably produce `MeasurableScan`s.  This makes me think that `check_scan_logprob` might not be necessary at all."", 'comment_created': datetime.datetime(2021, 8, 6, 18, 46, tzinfo=datetime.timezone.utc), 'commenter': 'brandonwillard', 'type': 'User'}, {'comment_id': 687026158, 'comment_body': ""Isn't the mode itself `None` over here ?"", 'comment_created': datetime.datetime(2021, 8, 11, 17, 16, 56, tzinfo=datetime.timezone.utc), 'commenter': 'kc611', 'type': 'User'}, {'comment_id': 687027742, 'comment_body': ""I just threw that in there to be safe, and it might not even be useful.  There are two `Mode` values attached to the `Op`, and I don't think `mode` is the one that's directly used to compile the inner-graph; however, it may be used in some other way."", 'comment_created': datetime.datetime(2021, 8, 11, 17, 19, 22, tzinfo=datetime.timezone.utc), 'commenter': 'brandonwillard', 'type': 'User'}, {'comment_id': 687028717, 'comment_body': ""I think the `rv_remapper` in `joint_logprob` takes care of that no ?\r\n\r\nThe only issue is it doesn't map variables that are not the `var` (i.e. `S_rv` in our test cases). Is that what you meant over here ?"", 'comment_created': datetime.datetime(2021, 8, 11, 17, 20, 40, tzinfo=datetime.timezone.utc), 'commenter': 'kc611', 'type': 'User'}, {'comment_id': 687030101, 'comment_body': ""If we dis-allow this kind of functions we wouldn't need the push-out functionality anymore. Right ? Cause all of the outputs are 'required' to be pushed out by the user himself. This function will just act as a check in that case. "", 'comment_created': datetime.datetime(2021, 8, 11, 17, 22, 37, tzinfo=datetime.timezone.utc), 'commenter': 'kc611', 'type': 'User'}, {'comment_id': 690463108, 'comment_body': 'Marking for convenience. ', 'comment_created': datetime.datetime(2021, 8, 17, 15, 6, 15, tzinfo=datetime.timezone.utc), 'commenter': 'kc611', 'type': 'User'}, {'comment_id': 690887356, 'comment_body': ""I don't believe this should pass, because the output `TensorVariable`s use identity (e.g. `is`) comparisons."", 'comment_created': datetime.datetime(2021, 8, 18, 4, 15, 33, tzinfo=datetime.timezone.utc), 'commenter': 'brandonwillard', 'type': 'User'}, {'comment_id': 690890047, 'comment_body': 'The original ""push-out"" functionality would automatically add `S_t` as an output to a new, reformulated `Scan`, as I recall; however, in our case, that\'s not particularly useful, because we need value variables for all the `MeasurableVariable`s in the model, but there isn\'t a (good) way to specify a value variable for an inner-graph variable like `S_t`.  The reason is that some inner-graph variables like `S_t` don\'t really exist at the user-level; e.g. when they\'re not inner-outputs that map to outer-outputs (outer-outputs are the only thing a user gets back from `aesara.scan`, aside from the updates).\r\n\r\nIn other words, yes, I think you have the right idea.\r\n\r\nThe only way I could see this being done without somehow specifying a value variable for terms like `S_t` is if we never even required value variables.  Instead, these `logprob`-related functions would also return a `dict` mapping `MeasurableVariable`s to value variables that are automatically generated for them when they\'re encountered/created by these rewrite functions.\r\n\r\n@kc611 @ricardoV94, this is an approach we should seriously consider.  It would involve a fundamental change to the way AePPL currently works, but we could do that sort of thing at this point.', 'comment_created': datetime.datetime(2021, 8, 18, 4, 24, 22, tzinfo=datetime.timezone.utc), 'commenter': 'brandonwillard', 'type': 'User'}, {'comment_id': 690895936, 'comment_body': ""> I think the `rv_remapper` in `joint_logprob` takes care of that no ?\r\n\r\nYes, it generally should.\r\n\r\n> The only issue is it doesn't map variables that are not the `var` (i.e. `S_rv` in our test cases). Is that what you meant over here ?\r\n\r\nThe `PreserveRVMappings` feature might not work for variables that aren't the literal inputs/outputs of a replacement.  I believe that was one of my concerns.  That might not be an issue, though.  We really need to set up some example and work through them to find out.\r\n"", 'comment_created': datetime.datetime(2021, 8, 18, 4, 42, 4, tzinfo=datetime.timezone.utc), 'commenter': 'brandonwillard', 'type': 'User'}, {'comment_id': 690908206, 'comment_body': ""It looks like [the current issue](https://github.com/aesara-devs/aeppl/pull/24/checks?check_run_id=3357658699#step:6:256) actually _is_ due to `PreserveRVMappings` not handling every variable that was replaced.\r\n\r\nIn this particular case, `PreserveRVMappings.on_change_input` is only ever called with `r` (i.e. the variable being replaced) equal to `Y_rv`.  This is because the `FunctionGraph` that's being used has only one output: `Y_rv`.  The second output of the `Scan` is `S_rv` and the test fails when that output appears in the `joint_logprob` loop.\r\n\r\nIf `PreserveRVMappings.on_change_input` were called with `r` equal to `S_rv` and `new_r` equal to the corresponding new output produced by `push_out_rvs_from_scan`, this problem wouldn't appear.\r\n\r\nWe might be able to add all the random variables as outputs to the `fgraph` created in `joint_logprob` and get this to work.  That would guarantee that `PreserveRVMappings.on_change_input` would be called for each one."", 'comment_created': datetime.datetime(2021, 8, 18, 5, 17, 7, tzinfo=datetime.timezone.utc), 'commenter': 'brandonwillard', 'type': 'User'}, {'comment_id': 690909880, 'comment_body': ""I've just added a fix to that effect."", 'comment_created': datetime.datetime(2021, 8, 18, 5, 21, 54, tzinfo=datetime.timezone.utc), 'commenter': 'brandonwillard', 'type': 'User'}, {'comment_id': 691421689, 'comment_body': ""I think that's how `symbolic-pymc` originally used to calculate the log-probability of Scan ops, no?\r\n\r\nhttps://github.com/pymc-devs/symbolic-pymc/blob/84e8d612c714f502f8d188c1766498f4ff7beecf/symbolic_pymc/theano/pymc3.py#L176-L177"", 'comment_created': datetime.datetime(2021, 8, 18, 16, 33, 49, tzinfo=datetime.timezone.utc), 'commenter': 'kc611', 'type': 'User'}, {'comment_id': 691423842, 'comment_body': ""> I think that's how `symbolic-pymc` originally used to calculate the log-probability of Scan ops, no?\r\n\r\nYeah, as I recall."", 'comment_created': datetime.datetime(2021, 8, 18, 16, 36, 37, tzinfo=datetime.timezone.utc), 'commenter': 'brandonwillard', 'type': 'User'}, {'comment_id': 694997565, 'comment_body': 'Temporarily changed `RandomStreams` to shared `Generators` for the current development run/testing purposes.', 'comment_created': datetime.datetime(2021, 8, 24, 16, 8, 8, tzinfo=datetime.timezone.utc), 'commenter': 'kc611', 'type': 'User'}, {'comment_id': 695000954, 'comment_body': ""This is where we should be passing the processed value of corresponding RV node using `new_outer_input_vars`. Issue is how do we make sure that each iteration of `Scan` in its `n_step`s of iterations receives the correct value from this array of value ?  (i.e. we'll probably need to modify the above `taps` logic for that which will correctly pass the values for each output node as a `seq` type input.)"", 'comment_created': datetime.datetime(2021, 8, 24, 16, 12, 6, tzinfo=datetime.timezone.utc), 'commenter': 'kc611', 'type': 'User'}, {'comment_id': 695001718, 'comment_body': ""We'll probably need a call to `joint_logprob` here rather than `_logprob`. "", 'comment_created': datetime.datetime(2021, 8, 24, 16, 13, 4, tzinfo=datetime.timezone.utc), 'commenter': 'kc611', 'type': 'User'}, {'comment_id': 695104783, 'comment_body': ""No problem; I don't think there's a strict requirement for either one, but both should be expected to work (although the `assert`s may need to change in response)."", 'comment_created': datetime.datetime(2021, 8, 24, 18, 35, 30, tzinfo=datetime.timezone.utc), 'commenter': 'brandonwillard', 'type': 'User'}, {'comment_id': 695123098, 'comment_body': 'Yeah, there are some design questions/issues with `convert_outer_out_to_in` and multiple value variables.  \r\n\r\nI believe `convert_outer_out_to_in` I designed to work with one value variable at a time via the `ScanArgs` (i.e. one would mutate the `ScanArgs` in-place for each random variable that\'s being replaced).\r\n\r\nIt should repurpose the original `Scan` so that each new value variable is a new outer-input and&mdash;thus&mdash;has a corresponding inner-input ""slice""/""scalar"".  All the `taps` logic should be handled by that existing logic, as long as the value variable replacements we use are correct.\r\n\r\nThese replacements probably need to be the un-`*Subtensor*`ed tensors, and not the ones returned by `aesara.scan`, which cut off the initial values via `*Subtensor*` slices.', 'comment_created': datetime.datetime(2021, 8, 24, 19, 1, 24, tzinfo=datetime.timezone.utc), 'commenter': 'brandonwillard', 'type': 'User'}]","[{'commit_sha': '76412053abf0ae6b913279fca9f44b9dc1941fb8', 'committer_username': 'brandonwillard', 'committer_name': 'Brandon T. Willard', 'committer_email': None, 'commit_date': datetime.datetime(2011, 8, 10, 14, 19, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bdfb4c8e805fce72807204226398b547d2ac84a9', 'committer_username': 'kc611', 'committer_name': 'Kaustubh', 'committer_email': 'ckaustubhm06@gmail.com', 'commit_date': datetime.datetime(2019, 9, 15, 13, 33, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7dd1b29fab3970078c28792ef4fe30a32bf1d788', 'committer_username': 'brandonwillard', 'committer_name': 'Brandon T. Willard', 'committer_email': None, 'commit_date': datetime.datetime(2011, 8, 10, 14, 19, 12, tzinfo=datetime.timezone.utc)}]",Kaustubh,55352418,ckaustubhm06@gmail.com,User,,57,,48,65
614915134,Added `JITLinker`-based `NumbaLinker` ,"Adds a `NumbaLinker` based upon the new `JitLinker` class.

Based upon machinery from https://github.com/pymc-devs/aesara/pull/365 and https://github.com/pymc-devs/aesara/pull/371
",True,372,https://api.github.com/repos/aesara-devs/aesara/pulls/372,https://github.com/aesara-devs/aesara/pull/372,closed,455,15,6,9,6,1,2,0,"[{'name': 'important'}, {'name': 'Numba'}]",2021-04-14 04:25:18+00:00,2021-04-17 21:56:25+00:00,322267.0,"3 days, 17:31:07","[{'comment_id': 613409601, 'comment_body': 'I don\'t think we need these mappings; they should be picked up automatically from the `ScalarOp`s\' `nfunc_specs`&mdash;like they are in the JAX `dispatch` module.\r\n\r\nAlso, we might need to use ""primitive"" version of many of these basic math functions in order to make good use of `numba.vectorize`.  For instance, it\'s possible that the NumPy version of something like `+` is treated differently during Numba compilation, and the resulting loop might have more overhead when the NumPy function is used.  We might need to look at the compiled results to find out.', 'comment_created': datetime.datetime(2021, 4, 14, 16, 42, 46, tzinfo=datetime.timezone.utc), 'commenter': 'brandonwillard', 'type': 'User'}]","[{'commit_sha': '6008ccbb3eed29b2aa671e8c767b5c064066ea82', 'committer_username': 'kc611', 'committer_name': 'Kaustubh', 'committer_email': 'ckaustubhm06@gmail.com', 'commit_date': datetime.datetime(2019, 9, 15, 13, 33, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f5755c5e6ae4daa1b4acbc8a74bfa5495b35cc39', 'committer_username': 'kc611', 'committer_name': 'Kaustubh', 'committer_email': 'ckaustubhm06@gmail.com', 'commit_date': datetime.datetime(2019, 9, 15, 13, 33, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8f2f471426f3d50005837ebcdbdcc40d39fc2581', 'committer_username': 'brandonwillard', 'committer_name': 'Brandon T. Willard', 'committer_email': None, 'commit_date': datetime.datetime(2011, 8, 10, 14, 19, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '636cf019c991cc7fce2a0c1f5744585158514f2b', 'committer_username': 'kc611', 'committer_name': 'Kaustubh', 'committer_email': 'ckaustubhm06@gmail.com', 'commit_date': datetime.datetime(2019, 9, 15, 13, 33, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd21220e17bdba4d647917beb0a229c57bc9ca38d', 'committer_username': 'kc611', 'committer_name': 'Kaustubh', 'committer_email': 'ckaustubhm06@gmail.com', 'commit_date': datetime.datetime(2019, 9, 15, 13, 33, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7465f7f8d68dd715e59f3a7595f94347d0df4238', 'committer_username': 'brandonwillard', 'committer_name': 'Brandon T. Willard', 'committer_email': None, 'commit_date': datetime.datetime(2011, 8, 10, 14, 19, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '87489784f9b57657f07e2fc0c69408495c4791cd', 'committer_username': 'brandonwillard', 'committer_name': 'Brandon T. Willard', 'committer_email': None, 'commit_date': datetime.datetime(2011, 8, 10, 14, 19, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8e69ea1aa037d63aebb4e0837344685faf74c4b9', 'committer_username': 'kc611', 'committer_name': 'Kaustubh', 'committer_email': 'ckaustubhm06@gmail.com', 'commit_date': datetime.datetime(2019, 9, 15, 13, 33, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3a333c9cdea39ebae89ecf8add52443d226a4102', 'committer_username': 'brandonwillard', 'committer_name': 'Brandon T. Willard', 'committer_email': None, 'commit_date': datetime.datetime(2011, 8, 10, 14, 19, 12, tzinfo=datetime.timezone.utc)}]",Kaustubh,55352418,ckaustubhm06@gmail.com,User,,57,,48,65
640352905,Added Numba RV conversion,"
From what I gather :

 `_helperlib` stores a seperate state `ptr` value for Numba library. So during `RandomState` typification, we can sync this internal Numba state with Numpy's `RandomVariable` state. (However I'm not too sure that this will work every time.).

As for RandomVariable, it would be as simple as jitting the original Numpy function, as Numba has direct support for most of Numpy's `.random` methods. However Numba's implementations don't support `size` arguments. A simple way to overcome this would be looping over an empty array. However that's inefficient and I'm sure there are other better ways to do that. (Suggestions?)",True,403,https://api.github.com/repos/aesara-devs/aesara/pulls/403,https://github.com/aesara-devs/aesara/pull/403,closed,574,5,3,1,11,26,2,0,"[{'name': 'important'}, {'name': 'Numba'}]",2021-05-11 12:20:40+00:00,2021-06-25 22:52:39+00:00,3925919.0,"45 days, 10:31:59","[{'comment_id': 630203324, 'comment_body': 'Will this work for when dim of size is > 1?', 'comment_created': datetime.datetime(2021, 5, 11, 14, 9, 5, tzinfo=datetime.timezone.utc), 'commenter': 'twiecki', 'type': 'User'}, {'comment_id': 630258241, 'comment_body': 'Ah, no this was just supposed to show how this thing would work in general. I\'ll change this as soon as we finalize how this ""looping"" should be done.', 'comment_created': datetime.datetime(2021, 5, 11, 15, 1, 53, tzinfo=datetime.timezone.utc), 'commenter': 'kc611', 'type': 'User'}, {'comment_id': 630328062, 'comment_body': 'Got it, makes sense.', 'comment_created': datetime.datetime(2021, 5, 11, 16, 12, 52, tzinfo=datetime.timezone.utc), 'commenter': 'twiecki', 'type': 'User'}, {'comment_id': 630449523, 'comment_body': 'This line mentions JAX.', 'comment_created': datetime.datetime(2021, 5, 11, 19, 7, 32, tzinfo=datetime.timezone.utc), 'commenter': 'brandonwillard', 'type': 'User'}, {'comment_id': 630450728, 'comment_body': 'We should consider changing `numba_typify` so that it returns the ""storage"" list instead of just the contents of said list.  It seems like that would allow us to remove the explicit `RandomState` condition in this module.', 'comment_created': datetime.datetime(2021, 5, 11, 19, 9, 33, tzinfo=datetime.timezone.utc), 'commenter': 'brandonwillard', 'type': 'User'}, {'comment_id': 630454840, 'comment_body': 'Writing a manual loop here is fine&mdash;if necessary&mdash;because Numba can produce very performant loops.  My main concern is the overhead implied by a large number of independent calls to the underlying sampler code, instead of one call that handles the `size` parameter.  I still need to look at the Numba implementation to get a sense of that overhead, if any.\r\n\r\nRegardless, a loop will work for now, and, to handle arbitrary dimensions in such a loop, we can just use `np.ndindex`.', 'comment_created': datetime.datetime(2021, 5, 11, 19, 16, 29, tzinfo=datetime.timezone.utc), 'commenter': 'brandonwillard', 'type': 'User'}, {'comment_id': 631068071, 'comment_body': '@brandonwillard Is this what you meant by changing `numba_typify` so that it returns the ""storage"" list ?', 'comment_created': datetime.datetime(2021, 5, 12, 13, 59, 10, tzinfo=datetime.timezone.utc), 'commenter': 'kc611', 'type': 'User'}, {'comment_id': 631219870, 'comment_body': 'Yeah, just an implementation that takes/uses and returns a ""storage"" list, so that we can keep the `RandomState`-specific requirements in `numba_typify_RandomState` (i.e. recreate the ""storage"" list in _there_).\r\n\r\nThis particular change makes the primary `data` argument a `list`, though, which means we can\'t recreate a ""storage"" list in the dispatch specializations when/if that\'s needed.  Instead, we can change the first/`data` argument into a `storage` argument that contains the single-element ""storage"" list (i.e. `state` in `numba_typify_RandomState` will be a list containing the `RandomState` object) and make `numba_typify` return the same list.', 'comment_created': datetime.datetime(2021, 5, 12, 16, 45, 56, tzinfo=datetime.timezone.utc), 'commenter': 'brandonwillard', 'type': 'User'}, {'comment_id': 631670998, 'comment_body': ""I don't exactly understand how this will be implemented though.\r\n\r\nIf you have a particular implementation in mind (and you don't mind), can you go ahead and implement that in this PR. (Cause the current implementation of `numba_typify` in this PR will have quite bit of overhead because of looping over each data member. )\r\n\r\nEdit: For now I've removed the current implementation. "", 'comment_created': datetime.datetime(2021, 5, 13, 9, 3, 16, tzinfo=datetime.timezone.utc), 'commenter': 'kc611', 'type': 'User'}, {'comment_id': 632991381, 'comment_body': 'We should be able to avoid this costly jump to object mode by using `numba.np.unsafe.ndarray.to_fixed_tuple` or `create_tuple_creator` and `tuple_setitem`.  See [`numba_funcify_Reshape`](https://github.com/pymc-devs/aesara/blob/abf6026c9c2bad19216275e127e3043f30d93360/aesara/link/numba/dispatch.py#L965) for an example of the latter.', 'comment_created': datetime.datetime(2021, 5, 15, 18, 30, 21, tzinfo=datetime.timezone.utc), 'commenter': 'brandonwillard', 'type': 'User'}, {'comment_id': 632992372, 'comment_body': 'I just tried changing `numba_funcify_Reshape` so that it uses `to_fixed_tuple`, and that approach works well&mdash;while also being a lot more succinct.', 'comment_created': datetime.datetime(2021, 5, 15, 18, 39, 36, tzinfo=datetime.timezone.utc), 'commenter': 'brandonwillard', 'type': 'User'}, {'comment_id': 632994302, 'comment_body': ""[Here's a PR](https://github.com/pymc-devs/aesara/pull/413) with those changes."", 'comment_created': datetime.datetime(2021, 5, 15, 18, 59, 39, tzinfo=datetime.timezone.utc), 'commenter': 'brandonwillard', 'type': 'User'}, {'comment_id': 633091241, 'comment_body': '```suggestion\r\n    tuple_size = get_vector_length(node.inputs[1])\r\n```\r\nSomething like that should handle the non-`Constant` cases, as well.', 'comment_created': datetime.datetime(2021, 5, 16, 13, 26, 36, tzinfo=datetime.timezone.utc), 'commenter': 'brandonwillard', 'type': 'User'}, {'comment_id': 633580703, 'comment_body': 'This is something I tried (without much success) as an attempt to support custom implemented distributions. Somehow the output from this function gets classified as a `pyobject` rather than the `numba` type of the output value. (Even though both of the functions used inside are supported by Numba individually.)\r\n\r\nNote: This particular implementation is taken from `scipy.stats` which does something pretty close to this.\r\n\r\nhttps://github.com/scipy/scipy/blob/36af73c98f71f40bc69efbeb4501b1f2b9c3d00c/scipy/stats/_continuous_distns.py#L3504', 'comment_created': datetime.datetime(2021, 5, 17, 14, 27, 45, tzinfo=datetime.timezone.utc), 'commenter': 'kc611', 'type': 'User'}, {'comment_id': 633788363, 'comment_body': ""This is re-implementing single dispatch (inside of single dispatch); we can just create new `numba_funcify_*` functions for each custom implementation instead.\r\n\r\nIf we need to reuse some code from this function, let's abstract it out like we do in the other dispatch implementations."", 'comment_created': datetime.datetime(2021, 5, 17, 18, 59, 41, tzinfo=datetime.timezone.utc), 'commenter': 'brandonwillard', 'type': 'User'}, {'comment_id': 634003777, 'comment_body': 'Oh, also, if we want to simplify the process of creating dispatch functions and/or keep them closer/within their class definitions, we can consider doing something like we did for `Distribution` (see [here](https://github.com/pymc-devs/pymc3/blob/v4/pymc3/distributions/distribution.py#L99)).', 'comment_created': datetime.datetime(2021, 5, 18, 2, 56, 48, tzinfo=datetime.timezone.utc), 'commenter': 'brandonwillard', 'type': 'User'}, {'comment_id': 634467918, 'comment_body': ""> we can just create new numba_funcify_* functions for each custom implementation instead.\r\n\r\nSure, we can do this too. But I recommend we at-least put the implementation of specific `RandomVariable`s in a different file cause it'll become more and more cluttered as we start to support more and more custom RV's. \r\n\r\nThe exact implementation isn't the issue here though, I was (and still am) concerned  with why it isn't working. Or rather what am I missing here? "", 'comment_created': datetime.datetime(2021, 5, 18, 14, 59, 1, tzinfo=datetime.timezone.utc), 'commenter': 'kc611', 'type': 'User'}, {'comment_id': 637213653, 'comment_body': ""> But I recommend we at-least put the implementation of specific `RandomVariable`s in a different file cause it'll become more and more cluttered as we start to support more and more custom RV's.\r\n\r\nDefinitely; we should've already split `*.numba.dispatch` into separate modules.  I'm not sure when it would make sense to start keeping these dispatch functions in the modules of their respective `Op`s, but that time should come.  Once we've tested the Numba backend enough, and established it as a true replacement for the C backend, we can absolutely start doing that."", 'comment_created': datetime.datetime(2021, 5, 21, 20, 25, 14, tzinfo=datetime.timezone.utc), 'commenter': 'brandonwillard', 'type': 'User'}, {'comment_id': 645479497, 'comment_body': ""For now, we can get away with this way of implementing non numpy RV's but it'll be nice to have a 'object mode' to fall back to if this fails. (Since, this particular implementation assumes we can convert any RV from `scipy.stats` to it's corresponding Numpy/Numba version, but that might not be always the case)"", 'comment_created': datetime.datetime(2021, 6, 4, 10, 52, 51, tzinfo=datetime.timezone.utc), 'commenter': 'kc611', 'type': 'User'}, {'comment_id': 645897337, 'comment_body': 'Exactly!', 'comment_created': datetime.datetime(2021, 6, 4, 23, 4, 7, tzinfo=datetime.timezone.utc), 'commenter': 'brandonwillard', 'type': 'User'}, {'comment_id': 650392444, 'comment_body': ""Just a minor question. Over here, for distributions that accept arrays as inputs. (For instance `beta`) this doesn't accept anything other than a `float` value. If so then how is it that we can pass arrays (as `dvector`s) in Aesara graphs with Numba ? (like done in `test_random.test_RandomVariable`) "", 'comment_created': datetime.datetime(2021, 6, 12, 13, 24, 5, tzinfo=datetime.timezone.utc), 'commenter': 'kc611', 'type': 'User'}, {'comment_id': 650429199, 'comment_body': ""We're `numba.vectorize`ing these `np.random` functions via the Aesara Numba dispatch.  That's what makes them work with array inputs.\r\n\r\nWe can do the same for testing."", 'comment_created': datetime.datetime(2021, 6, 12, 19, 45, 40, tzinfo=datetime.timezone.utc), 'commenter': 'brandonwillard', 'type': 'User'}, {'comment_id': 650511666, 'comment_body': ""I tried doing a `numba.vectorize` but it still doesn't work with array inputs. There's probably something else I'm missing here.\r\n\r\nAlso a bit hackish but it seems functions compiled with `numba.vectorize` (without the decorator defining types, probably), they don't accept functions without any arguments. So I passed a single dummy variable(that `a`). Is this an issue with Numba or is it supposed to work this way."", 'comment_created': datetime.datetime(2021, 6, 13, 11, 30, 7, tzinfo=datetime.timezone.utc), 'commenter': 'kc611', 'type': 'User'}, {'comment_id': 651290348, 'comment_body': 'The body of the function is supposed to represent the _scalar_ operation that\'s broadcast across arrays (i.e. ""vectorized""), which, in this case, would be one of the `np.random` functions.  In other words, the `numba.vectorized` function should have the same signature as `numpy_fn`&mdash;more or less.\r\n\r\nVarargs (i.e. `*inputs`) might be an issue for `numba.vectorize`, though.  This is why we create functions via source code: to get past some vararg limitations in Numba.\r\n\r\nSee https://github.com/numba/numba/issues/6954.  Also, don\'t hesitate to attempt a solution for https://github.com/numba/numba/issues/6954 in Numba; the more we know about&mdash;and can help&mdash;Numba, the better.', 'comment_created': datetime.datetime(2021, 6, 14, 21, 28, 29, tzinfo=datetime.timezone.utc), 'commenter': 'brandonwillard', 'type': 'User'}, {'comment_id': 653691399, 'comment_body': ""> Varargs (i.e. *inputs) might be an issue for numba.vectorize, though.\r\n\r\nYeah, that's a problem. We can just use the `make_numba_random_fn` in this case, If our goal at the end is just comparing the inputs with and without the Numba function being in the graph. "", 'comment_created': datetime.datetime(2021, 6, 17, 15, 44, 2, tzinfo=datetime.timezone.utc), 'commenter': 'kc611', 'type': 'User'}, {'comment_id': 659051229, 'comment_body': ""We'll do this in a separate PR; I don't want to hold this up any longer."", 'comment_created': datetime.datetime(2021, 6, 25, 21, 39, 59, tzinfo=datetime.timezone.utc), 'commenter': 'brandonwillard', 'type': 'User'}]","[{'commit_sha': 'fcf784ee071f693d679be9e13d5a8c1adda803ca', 'committer_username': 'kc611', 'committer_name': 'Kaustubh', 'committer_email': 'ckaustubhm06@gmail.com', 'commit_date': datetime.datetime(2019, 9, 15, 13, 33, 26, tzinfo=datetime.timezone.utc)}]",Kaustubh,55352418,ckaustubhm06@gmail.com,User,,57,,48,65
647669348,Introduce Generator in RandomVariable,This PR will serve as the entry point of Numpy's new `Generator` API for use in `RandomVariable` class.,True,420,https://api.github.com/repos/aesara-devs/aesara/pulls/420,https://github.com/aesara-devs/aesara/pull/420,closed,2424,2064,79,6,16,6,1,1,[{'name': 'important'}],2021-05-19 13:30:05+00:00,2021-06-25 16:47:04+00:00,3208619.0,"37 days, 3:16:59","[{'comment_id': 637470311, 'comment_body': '```suggestion\r\n        if isinstance(a, (np.random.Generator, np.random.RandomState)):\r\n```', 'comment_created': datetime.datetime(2021, 5, 23, 1, 13, 34, tzinfo=datetime.timezone.utc), 'commenter': 'brandonwillard', 'type': 'User'}, {'comment_id': 640844469, 'comment_body': ""Regarding the Jax conversion. I was thinking maybe we could generate a `PRNG` over here (and do the same with `RandomState`) and store it in the `state` dictionary as `jax_key`.\r\n\r\nAnd in the `RandomVariable` conversion down below we could update this `jax_key` instead of the Numpy's state key. \r\n\r\nThis way we could implement support for all `Generators` since we'll simply have to change the way `PRNG` is created for each of them. Which is easy if it's being done in this part of code rather than the `RandomVariable` part."", 'comment_created': datetime.datetime(2021, 5, 27, 17, 54, 11, tzinfo=datetime.timezone.utc), 'commenter': 'kc611', 'type': 'User'}, {'comment_id': 640845873, 'comment_body': ""As long as `jax_key` stays localized to the JAX compilation process and its results (e.g. we don't have to alter the generic `RandomState`/`Generator` types to explicitly account for it), we should be fine."", 'comment_created': datetime.datetime(2021, 5, 27, 17, 56, 17, tzinfo=datetime.timezone.utc), 'commenter': 'brandonwillard', 'type': 'User'}, {'comment_id': 641962493, 'comment_body': 'It looks like this will reset the state on the second call to `random`.  Try creating `rng = np.random.default_rng(utt.fetch_seed())` once and using `rng` for both these cases.', 'comment_created': datetime.datetime(2021, 5, 29, 17, 17, 9, tzinfo=datetime.timezone.utc), 'commenter': 'brandonwillard', 'type': 'User'}, {'comment_id': 641964120, 'comment_body': ""Already tried, and also tried passing that rng all the way to `verify_grad` it still fails. And strangely I can't replicate any of this locally. I have to commit and 'uncommit' each time. \n\nThis is just one of my (random) unsuccessful attempts.\n\nI think it might be an issue with 'verify_grad' itself. Either that or its interface in unit test tools. Since there are also changes in both. "", 'comment_created': datetime.datetime(2021, 5, 29, 17, 34, 15, tzinfo=datetime.timezone.utc), 'commenter': 'kc611', 'type': 'User'}, {'comment_id': 641970454, 'comment_body': ""Well, let's keep that change anyway. \r\n\r\nOtherwise, the failures could simply be due to the underlying RNG change generating a new set of samples, so we can update the test for this difference (e.g. the accepted error ranges and such), find a more advantageous seed, or something else.  Changing the seed is the least preferrable, though."", 'comment_created': datetime.datetime(2021, 5, 29, 18, 32, 7, tzinfo=datetime.timezone.utc), 'commenter': 'brandonwillard', 'type': 'User'}]","[{'commit_sha': '34bea48a030fe682d94a155fa1ff25ff1d897cad', 'committer_username': 'kc611', 'committer_name': 'Kaustubh', 'committer_email': 'ckaustubhm06@gmail.com', 'commit_date': datetime.datetime(2019, 9, 15, 13, 33, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '438a536256254927a797d50c09098efce79bfdac', 'committer_username': 'kc611', 'committer_name': 'Kaustubh', 'committer_email': 'ckaustubhm06@gmail.com', 'commit_date': datetime.datetime(2019, 9, 15, 13, 33, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1e43902b1b0fa82467785a0b0faac905a4bf5564', 'committer_username': 'kc611', 'committer_name': 'Kaustubh', 'committer_email': 'ckaustubhm06@gmail.com', 'commit_date': datetime.datetime(2019, 9, 15, 13, 33, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '38d3e047cb92a1fcf1be8e9b0b3507a61b21c4d3', 'committer_username': 'kc611', 'committer_name': 'Kaustubh', 'committer_email': 'ckaustubhm06@gmail.com', 'commit_date': datetime.datetime(2019, 9, 15, 13, 33, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e2af2b94836c6c24c355f2cde95b2440958580aa', 'committer_username': 'kc611', 'committer_name': 'Kaustubh', 'committer_email': 'ckaustubhm06@gmail.com', 'commit_date': datetime.datetime(2019, 9, 15, 13, 33, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '08597552beb4db9799abfd51035acbd4c805edf7', 'committer_username': 'kc611', 'committer_name': 'Kaustubh', 'committer_email': 'ckaustubhm06@gmail.com', 'commit_date': datetime.datetime(2019, 9, 15, 13, 33, 26, tzinfo=datetime.timezone.utc)}]",Kaustubh,55352418,ckaustubhm06@gmail.com,User,,57,,48,65
663028217,"Refactored continuous distributions to v4 (AsymmetricLaplace, HalfStudentT, ExGaussian, Interpolated)","Linked Issue: #4686 

This PR refactors the following distributions:

- AsymmetricLaplace
- HalfStudentT
-  ExGaussian
-  Interpolated

(Random Note: It's strange how git is showing that many file changes in the test file `pymc3/tests/test_distributions.py` when only difference I made is of few lines ?)",True,4746,https://api.github.com/repos/pymc-devs/pymc/pulls/4746,https://github.com/pymc-devs/pymc/pull/4746,closed,261,225,3,5,7,34,0,0,[],2021-06-06 19:00:46+00:00,2021-06-14 07:13:41+00:00,648775.0,"7 days, 12:12:55","[{'comment_id': 646177523, 'comment_body': '`lam` and `sd` are not being used, they should be removed, no?', 'comment_created': datetime.datetime(2021, 6, 6, 19, 36, 27, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 646177654, 'comment_body': 'Only one default parametrization should go into `super().dist`, probably `[nu, sigma]`. You can check the already refactored t-student for an example. ', 'comment_created': datetime.datetime(2021, 6, 6, 19, 37, 52, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 646177775, 'comment_body': 'Similarly, the `logp` should receive only one default parametrization (the same you define in the `dist` classmethod.  ', 'comment_created': datetime.datetime(2021, 6, 6, 19, 39, 38, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 646177877, 'comment_body': 'Same here, `sd` should not be in here', 'comment_created': datetime.datetime(2021, 6, 6, 19, 40, 12, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 646178209, 'comment_body': 'the `interp_op` will not be reached from the`logp`, you will have to define it in there.', 'comment_created': datetime.datetime(2021, 6, 6, 19, 43, 14, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 646178267, 'comment_body': ""A bit confusingly, we are not using `self` instances, the logp has to work as a standard function dependent only on it's inputs. I am referring to the `self.interp_op`"", 'comment_created': datetime.datetime(2021, 6, 6, 19, 44, 12, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 646401178, 'comment_body': 'This new indentation is (probably) wrong', 'comment_created': datetime.datetime(2021, 6, 7, 9, 1, 52, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 646402207, 'comment_body': 'This will need to be refactored for this PR, otherwise we have no test that covers the `logp` method of the `Interpolated`, or do we?', 'comment_created': datetime.datetime(2021, 6, 7, 9, 3, 11, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 646443080, 'comment_body': 'Yea, I plan on doing exactly that in this PR. It seems some problem with the arguments not being passed correctly.', 'comment_created': datetime.datetime(2021, 6, 7, 9, 58, 1, tzinfo=datetime.timezone.utc), 'commenter': 'kc611', 'type': 'User'}, {'comment_id': 646447206, 'comment_body': ""I'm a bit skeptical about this particular parametrization, since that required removing this condition over here.(I don't know if this particular condition is important or not, though)"", 'comment_created': datetime.datetime(2021, 6, 7, 10, 3, 39, tzinfo=datetime.timezone.utc), 'commenter': 'kc611', 'type': 'User'}, {'comment_id': 646448160, 'comment_body': ""everything that is not going into `dist` can be commented for the time being (and doesn't need the `as_tensor_variable` call either. This is related to sampler starting point logic that has not been refactored."", 'comment_created': datetime.datetime(2021, 6, 7, 10, 5, 2, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 646449478, 'comment_body': 'The lam sigma is a bit weird in that one can be converted from the other, even if the original is negative. You can obtain the lam again from sigma by  using the `get_tau_sigma` inside the `logp`. This way you can keep the lam check in the `bound`, but probably we should just open a separate issue to fix `get_tau_sigma`', 'comment_created': datetime.datetime(2021, 6, 7, 10, 6, 59, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 646450134, 'comment_body': 'mean and variance can be commented out for the same reason as below. They are not being used by the current codebase', 'comment_created': datetime.datetime(2021, 6, 7, 10, 7, 55, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 646451288, 'comment_body': 'typo `ssigma`', 'comment_created': datetime.datetime(2021, 6, 7, 10, 9, 37, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 646451439, 'comment_body': 'leftover typo: `mu = mu`', 'comment_created': datetime.datetime(2021, 6, 7, 10, 9, 50, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 646453975, 'comment_body': ""Something is off with the `rng_fn` signature. `p` seems to be overwritten so it shouldn't be there, and if you want to pass the `cdf` already specified it should also be in the `dist` classmethod bellow and `ndim_params` shoud be 3 elements long."", 'comment_created': datetime.datetime(2021, 6, 7, 10, 13, 41, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 646454422, 'comment_body': 'I think `ndims_params` cannot be scalar (i.e., `0`), right? In that case it should be `ndims_params = [1, 1]`', 'comment_created': datetime.datetime(2021, 6, 7, 10, 14, 20, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 646455751, 'comment_body': ""`Z` is not being passed to `super().dist()` and as such won't reach the `logp`. It seems it is not necessary for the random draws so it's probably better to also specify it inside the `logp` from the `x_points` input."", 'comment_created': datetime.datetime(2021, 6, 7, 10, 16, 15, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 646467471, 'comment_body': 'Ah, okay got it.', 'comment_created': datetime.datetime(2021, 6, 7, 10, 34, 7, tzinfo=datetime.timezone.utc), 'commenter': 'kc611', 'type': 'User'}, {'comment_id': 646485296, 'comment_body': '`ndims_params` should be `[0, 0]`, i.e., the same length as the number of parameters', 'comment_created': datetime.datetime(2021, 6, 7, 11, 1, 36, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 646486380, 'comment_body': 'No need to add the assert here, it should just be in the `dist` classmethod', 'comment_created': datetime.datetime(2021, 6, 7, 11, 3, 30, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 646490859, 'comment_body': ""Inside `rng_fn` there shouldn't be any symbolic operations. I didn't realize you need `Z` here as well.\r\n\r\nYou can either use scipy equivalents or, if easier, have everything that's needed for both `logp` and the `rng_fn` defined once during the `dist classmethod` and passed to `super` as additional inputs (and expected in both the `logp` and `rng_fn`. This way, the `rng_fn` will receive the non-symbolic arguments as inputs during normal sampling, while the `logp` method will receive the `symbolic` ones. \r\n\r\nApologies if this sounds very confusing :D"", 'comment_created': datetime.datetime(2021, 6, 7, 11, 10, 55, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 646497385, 'comment_body': ""I think I should probably refactor the test first, just so that I'll have an intuition of how this entire `Interpolated` thing should work. "", 'comment_created': datetime.datetime(2021, 6, 7, 11, 19, 48, tzinfo=datetime.timezone.utc), 'commenter': 'kc611', 'type': 'User'}, {'comment_id': 646512708, 'comment_body': 'Yeah, you can also check it out in V3, and see how it works there (and in the test). That may help, since this is a very non-standard one', 'comment_created': datetime.datetime(2021, 6, 7, 11, 45, 18, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 647656554, 'comment_body': 'It looks like we cannot directly access the index of `pdf` or `x` like this. (The `index` variable is an `Elemwise` during the initial graph construction and hence this fails.). What class/function will be a good substitute for this?', 'comment_created': datetime.datetime(2021, 6, 8, 17, 39, 28, tzinfo=datetime.timezone.utc), 'commenter': 'kc611', 'type': 'User'}, {'comment_id': 647663424, 'comment_body': 'I think the problem is that you are using symbolic operations inside the rng_fn. Everything there should be non-symbolic AFAIK', 'comment_created': datetime.datetime(2021, 6, 8, 17, 49, 12, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 647682500, 'comment_body': ""That indeed is the problem. What I wanted to know was what is the non-symbolic substitute for such operation?\n\n (If there isn't I'll try your suggestion from https://github.com/pymc-devs/pymc3/pull/4746#discussion_r646490859 )"", 'comment_created': datetime.datetime(2021, 6, 8, 18, 9, 13, tzinfo=datetime.timezone.utc), 'commenter': 'kc611', 'type': 'User'}, {'comment_id': 647736335, 'comment_body': 'I think the symbolic ops used in here are all wrapping standard scipy function: https://github.com/pymc-devs/pymc3/blob/25eaa715018ed7add3ba1289b6ad068636e29e5e/pymc3/distributions/dist_math.py#L318', 'comment_created': datetime.datetime(2021, 6, 8, 19, 31, 42, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 648413900, 'comment_body': ""I tried fiddling around with `SplineWrapper` but I don't think that'll be of much use here since we are using different methods of `InterpolatedUnivariateSpline` like the `.integral()` and the `.antiderivate()` ( But can we actually use `SplineWrapper` like that ? )\r\n\r\nInstead as you mentioned in https://github.com/pymc-devs/pymc3/pull/4746#discussion_r646490859 I just kept the non-symbolic operations in `dist` and forwarded `cdf_points` as an extra argument. "", 'comment_created': datetime.datetime(2021, 6, 9, 15, 17, 40, tzinfo=datetime.timezone.utc), 'commenter': 'kc611', 'type': 'User'}, {'comment_id': 649418586, 'comment_body': 'should the import be at the top?', 'comment_created': datetime.datetime(2021, 6, 10, 18, 17, 4, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 649419682, 'comment_body': 'These tests that rely on `BaseTestCases.BaseTestCase` should be removed and replaced with tests using the new `BaseTestDistribution`', 'comment_created': datetime.datetime(2021, 6, 10, 18, 18, 41, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 649425823, 'comment_body': ""This one should be moved to it's own class. The reason for this is that after refactoring all distributions, the `TestScalarParameterSamples` where this one is will disappear, but this distribution is special enough that the test should be kept (i.e., we are not simply drawing from scipy / numpy distributions)."", 'comment_created': datetime.datetime(2021, 6, 10, 18, 28, 15, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 649429474, 'comment_body': 'These tests that are using a `ref_rand` should be removed as well, unless there is a good reason to test them against a reference. If we are just copying the same scipy/numpy expression we use in our `random Ops` the default tests in `BaseTestDistribution` should be used instead.', 'comment_created': datetime.datetime(2021, 6, 10, 18, 34, 1, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 649706884, 'comment_body': ""I just moved it to it's own class and named it `TestInterpolated`"", 'comment_created': datetime.datetime(2021, 6, 11, 5, 48, 56, tzinfo=datetime.timezone.utc), 'commenter': 'kc611', 'type': 'User'}]","[{'commit_sha': 'bfc384b06428c6805624a7d4bfd7104d48f25374', 'committer_username': 'kc611', 'committer_name': 'Kaustubh', 'committer_email': 'ckaustubhm06@gmail.com', 'commit_date': datetime.datetime(2019, 9, 15, 13, 33, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7e34e8622b3cb41877d6b8fa97ba8e66d7a8e2a3', 'committer_username': 'kc611', 'committer_name': 'Kaustubh', 'committer_email': 'ckaustubhm06@gmail.com', 'commit_date': datetime.datetime(2019, 9, 15, 13, 33, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '53e4e0ef1bbcaf4ab50af58ca3e01e7aec0b9835', 'committer_username': 'kc611', 'committer_name': 'Kaustubh', 'committer_email': 'ckaustubhm06@gmail.com', 'commit_date': datetime.datetime(2019, 9, 15, 13, 33, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c421634627cb2508a4a128f6b165121d0b861cbb', 'committer_username': 'kc611', 'committer_name': 'Kaustubh', 'committer_email': 'ckaustubhm06@gmail.com', 'commit_date': datetime.datetime(2019, 9, 15, 13, 33, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e684ede94d9b2a26eb2a4130111a1b9539f580ae', 'committer_username': 'ricardoV94', 'committer_name': 'Ricardo Vieira', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 26, 14, 9, 21, tzinfo=datetime.timezone.utc)}]",Kaustubh,55352418,ckaustubhm06@gmail.com,User,,57,,48,65
671350704,[WIP] Porting kroneckernormal distribution to v4,This PR refactors the `KroneckerNormal` distribution to be compatible with `v4`.,True,4774,https://api.github.com/repos/pymc-devs/pymc/pulls/4774,https://github.com/pymc-devs/pymc/pull/4774,closed,112,200,4,1,2,28,0,1,[],2021-06-16 11:17:44+00:00,2021-06-27 04:39:32+00:00,926508.0,"10 days, 17:21:48","[{'comment_id': 652593751, 'comment_body': '@ricardoV94 The `chols` parameter here is a list of either `Cholesky` Ops or a pre-defined list of arrays. How do we turn this into the `TensorConstant` variant ?', 'comment_created': datetime.datetime(2021, 6, 16, 11, 20, 51, tzinfo=datetime.timezone.utc), 'commenter': 'kc611', 'type': 'User'}, {'comment_id': 652594715, 'comment_body': 'Again a few hacks were required over here (using `.shape` for checking an empty `TensorVariable` and `.data` for accessing the data inside)', 'comment_created': datetime.datetime(2021, 6, 16, 11, 22, 20, tzinfo=datetime.timezone.utc), 'commenter': 'kc611', 'type': 'User'}, {'comment_id': 652595505, 'comment_body': 'This is the part where the `chols` variable is required in `logp` method.', 'comment_created': datetime.datetime(2021, 6, 16, 11, 23, 30, tzinfo=datetime.timezone.utc), 'commenter': 'kc611', 'type': 'User'}, {'comment_id': 652645171, 'comment_body': '```suggestion\r\n    _print_name = (""KroneckerNormal"", ""\\\\operatorname{KroneckerNormal}"")\r\n```', 'comment_created': datetime.datetime(2021, 6, 16, 12, 36, 4, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 652658731, 'comment_body': ""I don't think we can make them Constants, it seems like everything can be symbolic here. What is the problem with `at.as_tensor_variable`?"", 'comment_created': datetime.datetime(2021, 6, 16, 12, 53, 24, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 652659743, 'comment_body': 'Can this be more easily computed in `.dist`? \r\n\r\nEdit: Nevermind it requires delta', 'comment_created': datetime.datetime(2021, 6, 16, 12, 54, 41, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 652691959, 'comment_body': ""The list gets converted into a `np.array` with `dtype` as `object` and `TensorVariable` doesn't support that."", 'comment_created': datetime.datetime(2021, 6, 16, 13, 31, 37, tzinfo=datetime.timezone.utc), 'commenter': 'kc611', 'type': 'User'}, {'comment_id': 654185735, 'comment_body': ""I don't know how practical it is to use an `eval()` in a `dist`. But this is one way to get the output's of the cholesky matrices from the `Op`."", 'comment_created': datetime.datetime(2021, 6, 18, 6, 54, 21, tzinfo=datetime.timezone.utc), 'commenter': 'kc611', 'type': 'User'}, {'comment_id': 654187774, 'comment_body': '@brandonwillard we discussed the possibility of using a parametrization of just `super().dist([mu, *cov], **kwargs)`. That will be fine for `rng_fn` but the extra args required for `logp` must be passed if we are to support `evd` there.', 'comment_created': datetime.datetime(2021, 6, 18, 6, 58, 16, tzinfo=datetime.timezone.utc), 'commenter': 'kc611', 'type': 'User'}, {'comment_id': 654191241, 'comment_body': ""@ricardoV94 mentioned that we aren't supporting broadcasting means of multivariate distributions anymore. \r\n\r\nTo me, this seems to be the case in the current test configuration. (Different `n` and `m` generate `covs` and `chols` matrices of different dimensions, and the domain is a vector of their product) But I'd like someone to confirm weather the current parameters of the test are still valid or weather they should be changed."", 'comment_created': datetime.datetime(2021, 6, 18, 7, 5, 7, tzinfo=datetime.timezone.utc), 'commenter': 'kc611', 'type': 'User'}, {'comment_id': 654247033, 'comment_body': 'We are supporting ""some"" cases, but not as many as in `v3`. There was a discussion about this in the port of the `MultivariateT` here: https://github.com/pymc-devs/pymc3/pull/4731', 'comment_created': datetime.datetime(2021, 6, 18, 8, 32, 58, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 654308009, 'comment_body': ""Thanks for the tip, I think I'm facing a case in `MatrixNormal` in #4777, where like `MVStudentT` the sample output is not scalar but matrix dependent on the parameters."", 'comment_created': datetime.datetime(2021, 6, 18, 10, 3, 43, tzinfo=datetime.timezone.utc), 'commenter': 'kc611', 'type': 'User'}, {'comment_id': 654320058, 'comment_body': 'Another, not very pretty option might be to use a specific `_logp` dispatcher, which extracts the extra non-numeric variables from the `tag` and passes them on to the `logp` function ', 'comment_created': datetime.datetime(2021, 6, 18, 10, 24, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 654531478, 'comment_body': '> We are supporting ""some"" cases, but not as many as in `v3`. There was a discussion about this in the port of the `MultivariateT` here: #4731\r\n\r\nHow do you mean?  We should be able to support _all_ well-defined forms of broadcasting, and with a lot less effort than it took in `v3`.', 'comment_created': datetime.datetime(2021, 6, 18, 15, 45, 34, tzinfo=datetime.timezone.utc), 'commenter': 'brandonwillard', 'type': 'User'}, {'comment_id': 654543297, 'comment_body': 'I guess it falls under the not well-defined category. Some cases like `pm.MvNormal.dist(0, np.eye(3), shape=(3,3))`, which would work in `V3` but not in `V4`.', 'comment_created': datetime.datetime(2021, 6, 18, 16, 5, 48, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 654554320, 'comment_body': '> I guess it falls under the not well-defined category. Some cases like `pm.MvNormal.dist(0, np.eye(3), shape=(3,3))`, which would work in `V3` but not in `V4`.\r\n\r\nYes, that is a mathematically misspecified distribution, and the problem isn\'t with broadcasting&mdash;the problem is that `v3` was incorrectly changing the user input to something that might make sense (emphasis on the ""might""), instead of raising an error like it should have.\r\n\r\n', 'comment_created': datetime.datetime(2021, 6, 18, 16, 26, 29, tzinfo=datetime.timezone.utc), 'commenter': 'brandonwillard', 'type': 'User'}, {'comment_id': 655341024, 'comment_body': ""So for now I removed the Eigen vector decomposition from here, and this works for all three cases of `cov`, `chol` and `evd`. However this leaves us unable to use `sigma` i.e. Gaussian white noise, over here in `logp`. \r\n\r\nRegardless can someone verify if this implementation is mathematically correct for the `evd` case ? (The test pass, however, I'm not too sure if this approach is mathematically correct for that case.)"", 'comment_created': datetime.datetime(2021, 6, 21, 12, 41, 17, tzinfo=datetime.timezone.utc), 'commenter': 'kc611', 'type': 'User'}, {'comment_id': 655341909, 'comment_body': ""I used `*covs` as @brandonwillard suggested and that handles the differently shaped matrices in the arguments. So I think we're good over here."", 'comment_created': datetime.datetime(2021, 6, 21, 12, 42, 31, tzinfo=datetime.timezone.utc), 'commenter': 'kc611', 'type': 'User'}, {'comment_id': 655467225, 'comment_body': ""Yeah, we almost never want to use `eval`/`aesara.function` outside of a place where it's intended to be used (e.g. posterior predictive sampling).\r\n\r\nRegardless, why would we want/need to use non-symbolic values here?"", 'comment_created': datetime.datetime(2021, 6, 21, 15, 13, 27, tzinfo=datetime.timezone.utc), 'commenter': 'brandonwillard', 'type': 'User'}, {'comment_id': 655562583, 'comment_body': ""The exact place this comment tags right now i.e. `dist` is `eval()` free. The `.eval()` is currently required over in `rng_fn` since the `kronecker()` method was returning `TensorVariable` (I'm working on replacing that with `scipy.linalg.kron` so we can count on `eval()` being removed from there too) The other place `.eval()` is in is `logp` where it is used to infer shapes (Theoretically that can also be removed with a bit of effort.)\r\n\r\nOverall with the current implementation (which is a whole lot of omitted code) I wouldn't worry about `eval()` as much as the inability of supporting `sigma` which us the bigger issue with this implementation. "", 'comment_created': datetime.datetime(2021, 6, 21, 17, 9, 19, tzinfo=datetime.timezone.utc), 'commenter': 'kc611', 'type': 'User'}, {'comment_id': 658873634, 'comment_body': '```suggestion\r\n        ""check_pymc_params_match_rv_op"",\r\n        ""check_pymc_draws_match_reference"",\r\n        ""check_rv_size"",\r\n```\r\n\r\nAny reason not to test the `params_match`?', 'comment_created': datetime.datetime(2021, 6, 25, 15, 59, 23, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 658912320, 'comment_body': ""Oh, that fails because the way we're handling the `cov` parameter internally. (as `*cov`) . So to that test it appears as a list of `TensorVariable` instead of a single `TensorVariable`"", 'comment_created': datetime.datetime(2021, 6, 25, 17, 2, 33, tzinfo=datetime.timezone.utc), 'commenter': 'kc611', 'type': 'User'}, {'comment_id': 658941468, 'comment_body': 'I see. Do you think there is any point in implementing an alternative test for this logic or given things are working on the logp / random side, it should be fine?', 'comment_created': datetime.datetime(2021, 6, 25, 17, 54, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 658980303, 'comment_body': ""We simply cannot evaluate things like this unless we place very strong and unnatural restrictions on _all_ of the terms involved.  More specifically, the graphs in `chols` must have no symbolic inputs; otherwise, this will fail.  If the tests are passing with this in place, then our testing isn't sufficient, because it's only ever testing `Constant`/`SharedVariable` inputs."", 'comment_created': datetime.datetime(2021, 6, 25, 19, 6, 47, tzinfo=datetime.timezone.utc), 'commenter': 'brandonwillard', 'type': 'User'}, {'comment_id': 659187257, 'comment_body': 'It should be fine, I think. ', 'comment_created': datetime.datetime(2021, 6, 26, 16, 19, 58, tzinfo=datetime.timezone.utc), 'commenter': 'kc611', 'type': 'User'}, {'comment_id': 659205541, 'comment_body': 'This line seems to not be doing anything.\r\n```suggestion\r\n```\r\n', 'comment_created': datetime.datetime(2021, 6, 26, 17, 57, 13, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 659205681, 'comment_body': '```suggestion\r\n            raise ValueError(f""Invalid dimension for value: {value.ndim}"")\r\n```', 'comment_created': datetime.datetime(2021, 6, 26, 17, 58, 37, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 659205859, 'comment_body': ""```suggestion\r\n        return a\r\n```\r\nI don't think we need the `as_tensor_variable`"", 'comment_created': datetime.datetime(2021, 6, 26, 18, 0, 45, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}]","[{'commit_sha': '08a81c0879d81138dfdb37fccee34012c174c930', 'committer_username': 'kc611', 'committer_name': 'Kaustubh', 'committer_email': 'ckaustubhm06@gmail.com', 'commit_date': datetime.datetime(2019, 9, 15, 13, 33, 26, tzinfo=datetime.timezone.utc)}]",Kaustubh,55352418,ckaustubhm06@gmail.com,User,,57,,48,65
672494427,Refactored Wishart and MatrixNormal distribution,This PR refactors the `Wishart` and `MatrixNormal` multivariate distributions. ,True,4777,https://api.github.com/repos/pymc-devs/pymc/pulls/4777,https://github.com/pymc-devs/pymc/pull/4777,closed,202,243,3,1,0,62,0,0,[],2021-06-17 10:35:42+00:00,2021-07-02 16:47:42+00:00,1318320.0,"15 days, 6:12:00","[{'comment_id': 653446257, 'comment_body': 'The `rowtau` and `choltau` arguments are not supported right now. Maybe there was a plan for supporting those (but was maybe abandoned midway?). ', 'comment_created': datetime.datetime(2021, 6, 17, 10, 42, 15, tzinfo=datetime.timezone.utc), 'commenter': 'kc611', 'type': 'User'}, {'comment_id': 654326026, 'comment_body': 'This fails for n=1 , maybe the dimensions are being downcasted to a scalar when matrix is shaped `1x1`.', 'comment_created': datetime.datetime(2021, 6, 18, 10, 34, 25, tzinfo=datetime.timezone.utc), 'commenter': 'kc611', 'type': 'User'}, {'comment_id': 654599555, 'comment_body': ""Kind-of counter-intuitive to use this function here as reference, since it's basically same as the internal one, but it looks like `st.matrix_normal.rvs(mean=mu, rowcov=rowcov, colcov=colcov, size=size)` used previously resulted in draws that are differently valued than our implementation and our previous testing just checked if the values came from similar distributions. (See previous commit https://github.com/pymc-devs/pymc3/pull/4777/commits/4ee1360158885556c7801b97bc166ae2a40c37bd).   "", 'comment_created': datetime.datetime(2021, 6, 18, 17, 59, 4, tzinfo=datetime.timezone.utc), 'commenter': 'kc611', 'type': 'User'}, {'comment_id': 654601276, 'comment_body': ""They weren't supported in `v3`?"", 'comment_created': datetime.datetime(2021, 6, 18, 18, 2, 37, tzinfo=datetime.timezone.utc), 'commenter': 'brandonwillard', 'type': 'User'}, {'comment_id': 654603493, 'comment_body': ""No, passing either of `rowtau` or `choltau` raised an error. (It's in the code right below this)"", 'comment_created': datetime.datetime(2021, 6, 18, 18, 7, 34, tzinfo=datetime.timezone.utc), 'commenter': 'kc611', 'type': 'User'}, {'comment_id': 654611055, 'comment_body': 'Does this help? https://github.com/pymc-devs/pymc3/blob/fe115b857ae42e84d1f359153fd1f7efb2c327ae/docs/source/distribution_implementation.md#notes-on-check_pymcs_draws_match_reference-test', 'comment_created': datetime.datetime(2021, 6, 18, 18, 23, 25, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 654612505, 'comment_body': 'In this case, it may be better to use something along the lines of the `pymc3_random` test and compare with the Scipy version. Maybe compare dimension by dimension since it is a multivariate distribution.', 'comment_created': datetime.datetime(2021, 6, 18, 18, 26, 41, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 654619238, 'comment_body': 'In that case we can add a seperate class which does this. (Similar to how we did with `Interpolated` distribution )', 'comment_created': datetime.datetime(2021, 6, 18, 18, 41, 42, tzinfo=datetime.timezone.utc), 'commenter': 'kc611', 'type': 'User'}, {'comment_id': 654633503, 'comment_body': 'If that `n` is being used to determine the number of output dimensions, then `n=1` might not make sense for a matrix-valued distribution like this.', 'comment_created': datetime.datetime(2021, 6, 18, 19, 14, 44, tzinfo=datetime.timezone.utc), 'commenter': 'brandonwillard', 'type': 'User'}, {'comment_id': 654633842, 'comment_body': 'You can also add it in that class to keep things organized, such as this: https://github.com/pymc-devs/pymc3/blob/f4343ca7ba112f843cf256378e88ff80a25342a6/pymc3/tests/test_distributions_random.py#L385-L390', 'comment_created': datetime.datetime(2021, 6, 18, 19, 15, 23, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 654634738, 'comment_body': ""Shouldn't this be `ndim_supp = 2` (i.e. the Wishart distribution is over matrices)?"", 'comment_created': datetime.datetime(2021, 6, 18, 19, 17, 37, tzinfo=datetime.timezone.utc), 'commenter': 'brandonwillard', 'type': 'User'}, {'comment_id': 654670293, 'comment_body': '```suggestion\n        nu = at.as_tensor_variable(intX(nu))\n        V = at.as_tensor_variable(floatX(V))\n```\n', 'comment_created': datetime.datetime(2021, 6, 18, 20, 49, 24, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 654751756, 'comment_body': 'I raised an error if such a matrix is passed.', 'comment_created': datetime.datetime(2021, 6, 19, 5, 32, 17, tzinfo=datetime.timezone.utc), 'commenter': 'kc611', 'type': 'User'}, {'comment_id': 654752099, 'comment_body': '```suggestion\n        mu = at.as_tensor_variable(floatX(mu))\n```\n', 'comment_created': datetime.datetime(2021, 6, 19, 5, 35, 38, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 654752286, 'comment_body': 'Do the tests pass if aesara `floatX` is set to ""float32""? Usually the default precision we use for float32 is `3`. Your change is increasing the precision compared to what we were testing before.', 'comment_created': datetime.datetime(2021, 6, 19, 5, 38, 6, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 654752672, 'comment_body': 'Also make sure you test all combinations locally by setting `n_samples=-1` (and test both in float32 and float64)', 'comment_created': datetime.datetime(2021, 6, 19, 5, 42, 37, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 654753920, 'comment_body': 'It somehow fails if we set `ndim_supp = 2`. Strangely, the samples returned by `rng_fn` are actually 2-dimensional. Any ideas why this might be happening.', 'comment_created': datetime.datetime(2021, 6, 19, 5, 57, 48, tzinfo=datetime.timezone.utc), 'commenter': 'kc611', 'type': 'User'}, {'comment_id': 654753993, 'comment_body': 'I set the precision to 2 decimals for `float32` just to be sure. ', 'comment_created': datetime.datetime(2021, 6, 19, 5, 58, 30, tzinfo=datetime.timezone.utc), 'commenter': 'kc611', 'type': 'User'}, {'comment_id': 654754227, 'comment_body': 'You should actually test it locally. 2 might not be necessary or it might not be enough.', 'comment_created': datetime.datetime(2021, 6, 19, 6, 1, 36, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 654754475, 'comment_body': 'You can check the notes 3 and 4 in here: https://github.com/pymc-devs/pymc3/blob/fe115b857ae42e84d1f359153fd1f7efb2c327ae/docs/source/distribution_implementation.md#4-adding-tests-for-the-logp--logcdf-methods', 'comment_created': datetime.datetime(2021, 6, 19, 6, 4, 28, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 654755729, 'comment_body': 'You might need to override `_shape_from_params` if the RV is failing to guess the shape with the default method. This is needed here for example: https://github.com/aesara-devs/aesara/blob/3a3adaee3b8ceccff6d0208996f117fcd5e5eb6f/aesara/tensor/random/basic.py#L518-L521\n\nWhat error are you seeing?', 'comment_created': datetime.datetime(2021, 6, 19, 6, 18, 39, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 654761155, 'comment_body': '> What error are you seeing?\r\n\r\n<details>\r\n<summary>Here\'s the full traceback</summary>\r\n<br>\r\n\r\n\r\n\r\n\r\n\r\n```\r\n________________________________________________________ TestWishart.test_distribution ________________________________________________________\r\n\r\nself = <pymc3.tests.test_distributions_random.TestWishart object at 0x7f53e0b50810>\r\n\r\n    def test_distribution(self):\r\n        self.validate_tests_list()\r\n>       self._instantiate_pymc_rv()\r\n\r\npymc3/tests/test_distributions_random.py:300: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\npymc3/tests/test_distributions_random.py:311: in _instantiate_pymc_rv\r\n    **params, size=self.size, rng=aesara.shared(self.get_random_state(reset=True))\r\npymc3/distributions/multivariate.py:816: in dist\r\n    return super().dist([nu, V], *args, **kwargs)\r\npymc3/distributions/distribution.py:285: in dist\r\n    rv_out = cls.rv_op(*dist_params, size=create_size, **kwargs)\r\n../../../miniconda3/envs/pymc3-dev-py37/lib/python3.7/site-packages/aesara/tensor/random/op.py:323: in __call__\r\n    res = super().__call__(rng, size, dtype, *args, **kwargs)\r\n../../../miniconda3/envs/pymc3-dev-py37/lib/python3.7/site-packages/aesara/graph/op.py:269: in __call__\r\n    node = self.make_node(*inputs, **kwargs)\r\n../../../miniconda3/envs/pymc3-dev-py37/lib/python3.7/site-packages/aesara/tensor/random/op.py:370: in make_node\r\n    bcast = self.compute_bcast(dist_params, size)\r\n../../../miniconda3/envs/pymc3-dev-py37/lib/python3.7/site-packages/aesara/configparser.py:49: in res\r\n    return f(*args, **kwargs)\r\n../../../miniconda3/envs/pymc3-dev-py37/lib/python3.7/site-packages/aesara/tensor/random/op.py:287: in compute_bcast\r\n    shape = self._infer_shape(size, dist_params)\r\n../../../miniconda3/envs/pymc3-dev-py37/lib/python3.7/site-packages/aesara/tensor/random/op.py:257: in _infer_shape\r\n    param_shapes=param_shapes,\r\npymc3/distributions/multivariate.py:750: in _shape_from_params\r\n    self.ndim_supp, dist_params, rep_param_idx, param_shapes\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n\r\nndim_supp = 2, dist_params = (TensorConstant{4}, TensorConstant{[[1. 0. 0...0. 0. 1.]]}), rep_param_idx = 2\r\nparam_shapes = [(), (Subtensor{int64}.0, Subtensor{int64}.0)]\r\n\r\n    def default_shape_from_params(\r\n        ndim_supp, dist_params, rep_param_idx=0, param_shapes=None\r\n    ):\r\n        """"""Infer the dimensions for the output of a `RandomVariable`.\r\n    \r\n        This is a function that derives a random variable\'s support\r\n        shape/dimensions from one of its parameters.\r\n    \r\n        XXX: It\'s not always possible to determine a random variable\'s support\r\n        shape from its parameters, so this function has fundamentally limited\r\n        applicability and must be replaced by custom logic in such cases.\r\n    \r\n        XXX: This function is not expected to handle `ndim_supp = 0` (i.e.\r\n        scalars), since that is already definitively handled in the `Op` that\r\n        calls this.\r\n    \r\n        TODO: Consider using `aesara.compile.ops.shape_i` alongside `ShapeFeature`.\r\n    \r\n        Parameters\r\n        ----------\r\n        ndim_supp: int\r\n            Total number of dimensions for a single draw of the random variable\r\n            (e.g. a multivariate normal draw is 1D, so `ndim_supp = 1`).\r\n        dist_params: list of `aesara.graph.basic.Variable`\r\n            The distribution parameters.\r\n        param_shapes: list of tuple of `ScalarVariable` (optional)\r\n            Symbolic shapes for each distribution parameter.  These will\r\n            be used in place of distribution parameter-generated shapes.\r\n        rep_param_idx: int (optional)\r\n            The index of the distribution parameter to use as a reference\r\n            In other words, a parameter in `dist_param` with a shape corresponding\r\n            to the support\'s shape.\r\n            The default is the first parameter (i.e. the value 0).\r\n    \r\n        Results\r\n        -------\r\n        out: a tuple representing the support shape for a distribution with the\r\n        given `dist_params`.\r\n    \r\n        """"""\r\n        if ndim_supp <= 0:\r\n            raise ValueError(""ndim_supp must be greater than 0"")\r\n        if param_shapes is not None:\r\n>           ref_param = param_shapes[rep_param_idx]\r\nE           IndexError: list index out of range\r\n\r\n../../../miniconda3/envs/pymc3-dev-py37/lib/python3.7/site-packages/aesara/tensor/random/op.py:69: IndexError\r\n```\r\n</details>\r\n\r\nAnd overriding `_shape_from_params` didn\'t work. You might also wanna take a look at the test first, just to see if the parameters are valid.', 'comment_created': datetime.datetime(2021, 6, 19, 7, 20, 27, tzinfo=datetime.timezone.utc), 'commenter': 'kc611', 'type': 'User'}, {'comment_id': 654767322, 'comment_body': ""It's definitely looks like you need to override that method. I didn't mean to imply that it should be the same overwrite, just that it needs one."", 'comment_created': datetime.datetime(2021, 6, 19, 8, 26, 31, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 654832110, 'comment_body': ""> It somehow fails if we set `ndim_supp = 2`. Strangely, the samples returned by `rng_fn` are actually 2-dimensional. Any ideas why this might be happening?\r\n\r\n`ndim_supp` is used for shape inference and a few other related things, but not necessarily for critical `RandomVariable.perform` operations, so it's not surprising that this value would be incorrect and still produce valid samples.\r\n\r\nRegardless, we need the `ndim_supp` values to be accurate.  We might also need to add some more sanity checks at the symbolic level using that property (i.e. when/if we can verify that the output dimensions match `ndim_supp`, we probably should).\r\n\r\nFor example, we might be missing a sanity check like `outputs[1].ndim >= self.ndim_supp` in `RandomVariable.make_node`.  It would be better if we could somehow guarantee that condition from the construction of `outputs`, but given how subclasses can override some of the steps involved, such a simple check might be worthwhile."", 'comment_created': datetime.datetime(2021, 6, 19, 19, 35, 50, tzinfo=datetime.timezone.utc), 'commenter': 'brandonwillard', 'type': 'User'}, {'comment_id': 654832945, 'comment_body': 'Otherwise, @ricardoV94 is correct; it looks like this needs a custom `_shape_from_params` that says the second parameter, `V`, determines the output shape.  I think the default assumes that the first parameter does, which is clearly wrong in this case.', 'comment_created': datetime.datetime(2021, 6, 19, 19, 45, 9, tzinfo=datetime.timezone.utc), 'commenter': 'brandonwillard', 'type': 'User'}, {'comment_id': 654833153, 'comment_body': ""OK, then we don't need to add that functionality here/now."", 'comment_created': datetime.datetime(2021, 6, 19, 19, 47, 10, tzinfo=datetime.timezone.utc), 'commenter': 'brandonwillard', 'type': 'User'}, {'comment_id': 655245854, 'comment_body': 'You were right, the passed all the way upto 4 decimal points in `float32` mode. And started showing failures at 5 decimal points. I left it at our default of 3 cause it may show flaky failures at 4 decimal points.', 'comment_created': datetime.datetime(2021, 6, 21, 10, 6, 55, tzinfo=datetime.timezone.utc), 'commenter': 'kc611', 'type': 'User'}, {'comment_id': 655247511, 'comment_body': 'The current approach should cover the correct `ndim_supp` value as well as the returned shape correctly. I simply returned the shape of `V` from the `param_shapes` list.', 'comment_created': datetime.datetime(2021, 6, 21, 10, 9, 26, tzinfo=datetime.timezone.utc), 'commenter': 'kc611', 'type': 'User'}, {'comment_id': 655276311, 'comment_body': 'Why did you remove that test?', 'comment_created': datetime.datetime(2021, 6, 21, 10, 55, 43, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 655323297, 'comment_body': ""The test was failing with `AssertionError` with different numeric values, and this is flaky (see e4d10d0a636761339cea20a3d8eb822acbfd4b67 for a passing instance) and considering https://github.com/pymc-devs/pymc3/blob/7be2025c4091e450f9e9dd050eb0dca08995c83f/pymc3/tests/test_distributions_random.py#L1620 I though it would be better to remove it and just check for shapes. The test for `Wishart` in `test_distributions.py` is also commented out giving the reason https://github.com/pymc-devs/pymc3/blob/7be2025c4091e450f9e9dd050eb0dca08995c83f/pymc3/tests/test_distributions.py#L2043-L2047\r\n\r\n(I don't know how applicable this is in the current scenario though)"", 'comment_created': datetime.datetime(2021, 6, 21, 12, 14, 23, tzinfo=datetime.timezone.utc), 'commenter': 'kc611', 'type': 'User'}, {'comment_id': 655328528, 'comment_body': 'This is about the random method, not the `logp`/`logdf` as in the second test you linked to. If the scipy method is not good for testing, it is also not good enough to be used inside the `rng_fn`. Unless I am missing something.', 'comment_created': datetime.datetime(2021, 6, 21, 12, 22, 35, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 655349592, 'comment_body': ""Alright I re-added it. It showed a flaky failure (only once) on my system, if it arises again, we can investigate into this further.\r\n\r\nMaybe it could've been caused by typecasting `nu` as `np.int(nu)` in `Wishart`'s `rng_fn`. I added a similar function in the test. "", 'comment_created': datetime.datetime(2021, 6, 21, 12, 53, 14, tzinfo=datetime.timezone.utc), 'commenter': 'kc611', 'type': 'User'}, {'comment_id': 655402615, 'comment_body': 'Should we remove this test / replace this test with `rng_fn` from MatrixNormal ?', 'comment_created': datetime.datetime(2021, 6, 21, 14, 0, tzinfo=datetime.timezone.utc), 'commenter': 'kc611', 'type': 'User'}, {'comment_id': 655406325, 'comment_body': 'I think the current one is better, as it provides a more independent check that our `rng_fn` is doing the correct thing. The standard test is used when we are just relying on a standard implementation in `rng_fn` (i.e., just calling scipy / numpy, without many steps in it). Is the test passing?', 'comment_created': datetime.datetime(2021, 6, 21, 14, 4, 28, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 655411700, 'comment_body': ""> Is the test passing?\r\n\r\nIt's flaky. Currently fails (in the current run of the Github jobs) but passed before."", 'comment_created': datetime.datetime(2021, 6, 21, 14, 10, 44, tzinfo=datetime.timezone.utc), 'commenter': 'kc611', 'type': 'User'}, {'comment_id': 655529487, 'comment_body': ""What extra logic (e.g. implemented in `WishartRV`) are all these sizes testing?  \r\n\r\nRemember, we don't want the test time to grow larger without proportionally increasing the actual test coverage (and that coverage **doesn't** include NumPy/SciPy's code).  This test module is easily one of the most egregious violators of that principal, so we should always be a little more critical of additions to it."", 'comment_created': datetime.datetime(2021, 6, 21, 16, 20, 54, tzinfo=datetime.timezone.utc), 'commenter': 'brandonwillard', 'type': 'User'}, {'comment_id': 655564804, 'comment_body': 'Should that be checking only for edge cases like `None` and `()` ? I just took the `sizes_to_check` list from the original function in `BaseTestDistribution` where the sizes are being checked by default. (And constructed the corresponding expected list.)', 'comment_created': datetime.datetime(2021, 6, 21, 17, 12, 50, tzinfo=datetime.timezone.utc), 'commenter': 'kc611', 'type': 'User'}, {'comment_id': 655584362, 'comment_body': 'To echo @kc611, this is not actually testing more than what the default test does, just setting the specific parameters of the size test, which usually have to be adapted for multivariate distributions. ', 'comment_created': datetime.datetime(2021, 6, 21, 17, 42, 56, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 656549544, 'comment_body': 'You might need to check dimension by dimension. The default test flattens everything and that might not be so comparable. This issue also cropped in here: https://github.com/pymc-devs/pymc3/pull/4596#issuecomment-822589620\n\n(I might also be completely off)', 'comment_created': datetime.datetime(2021, 6, 22, 20, 18, 9, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 657021744, 'comment_body': 'Looks like that could work, I added it for now. ', 'comment_created': datetime.datetime(2021, 6, 23, 11, 55, 18, tzinfo=datetime.timezone.utc), 'commenter': 'kc611', 'type': 'User'}, {'comment_id': 657040350, 'comment_body': 'Not sure about the `min` here.', 'comment_created': datetime.datetime(2021, 6, 23, 12, 22, 17, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 657043627, 'comment_body': '100 `n_fails` also seems extreme. ', 'comment_created': datetime.datetime(2021, 6, 23, 12, 26, 29, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 657245243, 'comment_body': 'I set it to the default of 10.', 'comment_created': datetime.datetime(2021, 6, 23, 15, 53, 15, tzinfo=datetime.timezone.utc), 'commenter': 'kc611', 'type': 'User'}, {'comment_id': 657245568, 'comment_body': 'We can take an mean maybe ?', 'comment_created': datetime.datetime(2021, 6, 23, 15, 53, 33, tzinfo=datetime.timezone.utc), 'commenter': 'kc611', 'type': 'User'}, {'comment_id': 657292758, 'comment_body': 'Nevermind, `min` is the strongest test, I thought about it the wrong way. nfails can be a bit bigger than 10 but 100 seemed too much.', 'comment_created': datetime.datetime(2021, 6, 23, 16, 54, 17, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 657297587, 'comment_body': 'Does this make sense like this @brandonwillard, I am not very familiar with the signature.', 'comment_created': datetime.datetime(2021, 6, 23, 17, 1, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 657364624, 'comment_body': 'We can also use `dist_params[1].shape`. Just needs to be same as shape of second argument `V`.', 'comment_created': datetime.datetime(2021, 6, 23, 18, 29, 9, tzinfo=datetime.timezone.utc), 'commenter': 'kc611', 'type': 'User'}, {'comment_id': 659496241, 'comment_body': 'Sorry for the earlier confusion, but I think the minimum is the right metric to use. If the 10 attempts are not enough you can increase those a bit, but we should still use the min. ', 'comment_created': datetime.datetime(2021, 6, 28, 5, 53, 1, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 661630419, 'comment_body': ""Over in #4824 I noticed that this test XPASS, but removing the XFAIL also doesn't make much sense, since the test has no active content.\r\nCan you bring this test back online?"", 'comment_created': datetime.datetime(2021, 6, 30, 16, 21, 40, tzinfo=datetime.timezone.utc), 'commenter': 'michaelosthege', 'type': 'User'}, {'comment_id': 661636630, 'comment_body': 'That tests requires the `checkd` which has not been refactored, and it seems the original test was no good either. I think the best is to just remove it.', 'comment_created': datetime.datetime(2021, 6, 30, 16, 29, 52, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 662495026, 'comment_body': 'Updated it to the standard `check_logp` test.', 'comment_created': datetime.datetime(2021, 7, 1, 18, 7, 12, tzinfo=datetime.timezone.utc), 'commenter': 'kc611', 'type': 'User'}, {'comment_id': 662544238, 'comment_body': 'Looks like @twiecki fixed the distribution in https://github.com/pymc-devs/pymc3/pull/701 ?\r\nDoes that mean we can remove the warning, or at least ""downgrade"" the warning into a recommendation to use LKJ dists instead?\r\n\r\n**Disclaimer:** I have no clue what either distributions are 😅', 'comment_created': datetime.datetime(2021, 7, 1, 19, 34, 32, tzinfo=datetime.timezone.utc), 'commenter': 'michaelosthege', 'type': 'User'}, {'comment_id': 662544957, 'comment_body': '```suggestion\r\n                ""1x1 Matrix was provided. Please use Normal distribution for such cases.""\r\n```', 'comment_created': datetime.datetime(2021, 7, 1, 19, 35, 58, tzinfo=datetime.timezone.utc), 'commenter': 'michaelosthege', 'type': 'User'}, {'comment_id': 662545544, 'comment_body': '```suggestion\r\n                ""Incompatible parameterization. Specify exactly one of rowcov, or rowchol.""\r\n```', 'comment_created': datetime.datetime(2021, 7, 1, 19, 37, 1, tzinfo=datetime.timezone.utc), 'commenter': 'michaelosthege', 'type': 'User'}, {'comment_id': 662545693, 'comment_body': '```suggestion\r\n                ""Incompatible parameterization. Specify exactly one of colcov, or colchol.""\r\n```', 'comment_created': datetime.datetime(2021, 7, 1, 19, 37, 22, tzinfo=datetime.timezone.utc), 'commenter': 'michaelosthege', 'type': 'User'}, {'comment_id': 662550402, 'comment_body': 'I agree to both: This implementations is very much in line with the defaults.\r\nThe the `BaseTestDistribution` for sure takes a sledgehammer to break a nut, but that problem is out of scope of this PR.', 'comment_created': datetime.datetime(2021, 7, 1, 19, 46, 58, tzinfo=datetime.timezone.utc), 'commenter': 'michaelosthege', 'type': 'User'}, {'comment_id': 662571434, 'comment_body': ""Pushing admittedly poor defaults forward is a great way to get into a bad situation, and an even better way to get deeper into existing ones.  \r\n\r\nAlso, the answer is not one big PR that removes all the testing redundancies; given the knowledge and effort required for that, it's quite unrealistic.  Plus, that won't prevent the problem from reappearing again and again after such a heroic PR.\r\n\r\nAt the very least, we need to stop adding to the testing redundancies on a *case-by-case basis*, and we can do that by looking for it during reviews; otherwise, we're just hoping that contributors will do that for us, and that's not how things have turned out.\r\n\r\n\r\nRegarding these exact tests, if they're only targeting `WishartRV.rng_fn`, it looks like we only need a test for an empty and non-empty `size` (and perhaps one other), because that's the only relevant condition in the code added by this PR.  Every other value besides the first two appears to be testing the code in `RandomVariable` and `scipy.stats.wishart.rvs`."", 'comment_created': datetime.datetime(2021, 7, 1, 20, 26, 3, tzinfo=datetime.timezone.utc), 'commenter': 'brandonwillard', 'type': 'User'}, {'comment_id': 662749723, 'comment_body': ""I think there's no harm in not testing the `[ (), (1,), 5,  (2, 4, 2)]` cases if we are testing for `[None, 1, (4, 5)]` cases since they're pretty much the same thing with different values. (Updated accordingly)"", 'comment_created': datetime.datetime(2021, 7, 2, 5, 40, 45, tzinfo=datetime.timezone.utc), 'commenter': 'kc611', 'type': 'User'}, {'comment_id': 662756137, 'comment_body': 'I think #701 adds the `WishartBartlett` as a solution for that, I updated the warning to recommend use of  `WishartBartlett` instead of `LKJCorr` or `LKJCholeskyCov`.\r\n\r\ncc @twiecki Is this correct ?', 'comment_created': datetime.datetime(2021, 7, 2, 5, 58, 25, tzinfo=datetime.timezone.utc), 'commenter': 'kc611', 'type': 'User'}, {'comment_id': 662959397, 'comment_body': 'No, LKJCorr should be used. `Wishart` itself is basically unusable, so if a user really wants that distribution, they can only use `WishartBartlett`, but they should always use either `LKJCorr` or `LKJCholeskyCov`.', 'comment_created': datetime.datetime(2021, 7, 2, 11, 58, 41, tzinfo=datetime.timezone.utc), 'commenter': 'twiecki', 'type': 'User'}, {'comment_id': 663059838, 'comment_body': ""Let's revert the warning to how it was before? Other than this PR looks pretty ready.\r\n\r\nAlso, should this warn be in `__new__`? Does it appear twice during a normal initialization inside a `pm.Model()`?"", 'comment_created': datetime.datetime(2021, 7, 2, 14, 36, 10, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 663117392, 'comment_body': ""I don't think it would appear twice. And implementing a `__new__` just because of this warning seems a little too much.\r\nLet's just rephrase to mention the entire recommendation from above and then go for it."", 'comment_created': datetime.datetime(2021, 7, 2, 16, 8, 36, tzinfo=datetime.timezone.utc), 'commenter': 'michaelosthege', 'type': 'User'}]","[{'commit_sha': 'a4bd0942c7bc1a7cd36ef00fc79004fe56f7fea6', 'committer_username': 'kc611', 'committer_name': 'Kaustubh', 'committer_email': 'ckaustubhm06@gmail.com', 'commit_date': datetime.datetime(2019, 9, 15, 13, 33, 26, tzinfo=datetime.timezone.utc)}]",Kaustubh,55352418,ckaustubhm06@gmail.com,User,,57,,48,65
686209130,Fixed MatrixNormal shape handling,"Linked Issue: #4845 

So it turns out that the shape handling was a bit off in `MatrixNormal` as it didn't support `mu` broadcasting, also it'll be better to just remove the `1x1` error since it won't make much sense if we have it supported already. 
",True,4848,https://api.github.com/repos/pymc-devs/pymc/pulls/4848,https://github.com/pymc-devs/pymc/pull/4848,closed,76,28,3,2,9,11,0,0,[],2021-07-08 17:43:27+00:00,2021-08-30 14:48:08+00:00,4568681.0,"52 days, 21:04:41","[{'comment_id': 674131719, 'comment_body': 'Turns out `size` was never supported in the first place in `MatrixNormal` in `v3`. (Thanks to @ricardoV94 for pointing that out.)', 'comment_created': datetime.datetime(2021, 7, 21, 16, 10, 49, tzinfo=datetime.timezone.utc), 'commenter': 'kc611', 'type': 'User'}, {'comment_id': 674138509, 'comment_body': 'Users may also pass shape (and invalid shapes) or ""dims"", so this check might not be enough. Can a ndim check be done inside the logp method instead? And what about the RV, does it work properly for non-default sizes?', 'comment_created': datetime.datetime(2021, 7, 21, 16, 17, 8, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 674141530, 'comment_body': 'Also just to be clear 2d shapes (rows x cols) were allowed, but not ""replication"" shapes. I am not sure if that maps to any non-`None` size because I don\'t really grasp what size means for multivariate distributions.', 'comment_created': datetime.datetime(2021, 7, 21, 16, 20, 38, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 674151991, 'comment_body': 'I added a warning for `shape` since if only `(m x n)` shape is allowed we can directly derive `m` and `n` from parameters. \r\n\r\n> And what about the RV, does it work properly for non-default sizes?\r\n\r\nWhat do you mean by non-default sizes?', 'comment_created': datetime.datetime(2021, 7, 21, 16, 34, 30, tzinfo=datetime.timezone.utc), 'commenter': 'kc611', 'type': 'User'}, {'comment_id': 674154418, 'comment_body': 'If you used the RV directly with some size like (2, 3, 3), would it do a sensible thing in the `rng_fn`? Or should it also raise there?', 'comment_created': datetime.datetime(2021, 7, 21, 16, 37, 37, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 674691539, 'comment_body': ""The RV can handle sizes like that because the main operation over there i.e. `np.matmul` will treat the random output (from `rng.standard_normal` ) as stack of matrices (which is what we intend) so I don't think we need to raise there. "", 'comment_created': datetime.datetime(2021, 7, 22, 10, 52, 3, tzinfo=datetime.timezone.utc), 'commenter': 'kc611', 'type': 'User'}, {'comment_id': 674726001, 'comment_body': ""I think size is one of the default arguments for distributions. Perhaps it's better to simply check it is `None`"", 'comment_created': datetime.datetime(2021, 7, 22, 11, 51, 15, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 684202761, 'comment_body': '```suggestion\r\n        if kwargs.get(""size"", None) is not None:\r\n```', 'comment_created': datetime.datetime(2021, 8, 6, 12, 39, 56, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 684203141, 'comment_body': 'Need a test that hits this branch', 'comment_created': datetime.datetime(2021, 8, 6, 12, 40, 33, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 684207902, 'comment_body': 'Should add a test for this warning. And it should be a DeprecationWarning', 'comment_created': datetime.datetime(2021, 8, 6, 12, 48, 19, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 684724007, 'comment_body': '```suggestion\n                ""The shape argument in MatrixNormal is deprecated and will be ignored.""\n```\n', 'comment_created': datetime.datetime(2021, 8, 8, 6, 36, 5, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}]","[{'commit_sha': 'dfad4bfea2ba0da52305fda1e7d4a5422fd7e32c', 'committer_username': 'kc611', 'committer_name': 'Kaustubh', 'committer_email': 'ckaustubhm06@gmail.com', 'commit_date': datetime.datetime(2019, 9, 15, 13, 33, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1e581fa3cb2e5a73d0ca72cceed78f4261eb07dd', 'committer_username': 'kc611', 'committer_name': 'Kaustubh', 'committer_email': 'ckaustubhm06@gmail.com', 'commit_date': datetime.datetime(2019, 9, 15, 13, 33, 26, tzinfo=datetime.timezone.utc)}]",Kaustubh,55352418,ckaustubhm06@gmail.com,User,,57,,48,65
678934182,Refactored Bound for v4,This PR refactors the `Bound` distribution for `v4`,True,4815,https://api.github.com/repos/pymc-devs/pymc/pulls/4815,https://github.com/pymc-devs/pymc/pull/4815,closed,382,344,7,1,5,38,0,0,[],2021-06-28 10:52:02+00:00,2021-08-13 15:09:07+00:00,3989825.0,"46 days, 4:17:05","[{'comment_id': 659682687, 'comment_body': 'Maybe we can apply a `Potential` internally?', 'comment_created': datetime.datetime(2021, 6, 28, 10, 53, 40, tzinfo=datetime.timezone.utc), 'commenter': 'kc611', 'type': 'User'}, {'comment_id': 659683246, 'comment_body': 'Not sure if `interval` is the right thing for `Discrete` distributions.', 'comment_created': datetime.datetime(2021, 6, 28, 10, 54, 29, tzinfo=datetime.timezone.utc), 'commenter': 'kc611', 'type': 'User'}, {'comment_id': 659683908, 'comment_body': '@ricardoV94, This is what you described in https://github.com/pymc-devs/pymc3/issues/4800 , right ?', 'comment_created': datetime.datetime(2021, 6, 28, 10, 55, 32, tzinfo=datetime.timezone.utc), 'commenter': 'kc611', 'type': 'User'}, {'comment_id': 659725109, 'comment_body': 'Yes. But it means you need to compute the `initval` instead, otherwise the model will raise an error when a bounded variable is created.', 'comment_created': datetime.datetime(2021, 6, 28, 12, 4, 16, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 659726586, 'comment_body': 'What do you mean?', 'comment_created': datetime.datetime(2021, 6, 28, 12, 6, 37, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 659726876, 'comment_body': 'What do you mean?', 'comment_created': datetime.datetime(2021, 6, 28, 12, 7, 3, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 659778358, 'comment_body': 'How is the `bounds` function different from `interval` ?', 'comment_created': datetime.datetime(2021, 6, 28, 13, 19, 27, tzinfo=datetime.timezone.utc), 'commenter': 'kc611', 'type': 'User'}, {'comment_id': 659782317, 'comment_body': ""In `v3` the implementation avoided use of `interval` transform upon `Discrete` (maybe because it uses `sigmoid` that would lead to values not in the allowed values of the discrete distribution) so I'm not sure about applying the same upon `Discrete`. What could be a good approach here ?"", 'comment_created': datetime.datetime(2021, 6, 28, 13, 24, 15, tzinfo=datetime.timezone.utc), 'commenter': 'kc611', 'type': 'User'}, {'comment_id': 659782998, 'comment_body': 'Nevermind, I confused it with something else. ', 'comment_created': datetime.datetime(2021, 6, 28, 13, 25, 8, tzinfo=datetime.timezone.utc), 'commenter': 'kc611', 'type': 'User'}, {'comment_id': 659871198, 'comment_body': 'I think you should follow the original, transform only continuous variables and not transform discrete ones. The bounding of discrete variables is achieved by the `bound` call in the `logp`', 'comment_created': datetime.datetime(2021, 6, 28, 15, 5, 33, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 659873802, 'comment_body': ""You mean `bound` from `distributions.dist_math`? It simply wraps a switch around the `logp` expression, which returns `-inf` if any of the bounds is not respected. In this case it's basically `at.switch((value < lower) or (value > upper), -np.inf, logp)`"", 'comment_created': datetime.datetime(2021, 6, 28, 15, 8, 37, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 659941976, 'comment_body': 'transform has a flag value of `UNSET` by default. If transform is `None`, the user is requesting no transform explicitly. https://github.com/pymc-devs/pymc3/blob/ce88e7392c172da78b2bd0ea86b9de10b5824124/pymc3/util.py#L30\r\n\r\nThis comment applies above, where transform first appears', 'comment_created': datetime.datetime(2021, 6, 28, 16, 34, 6, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 659943399, 'comment_body': ""Is distribution a `class` or a `rv_out`? If it's the former this will fail when the argument is passed to the `RandomVariable` no?"", 'comment_created': datetime.datetime(2021, 6, 28, 16, 36, 9, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 659945206, 'comment_body': 'These transforms have changed since this code was last touched, see here https://github.com/pymc-devs/pymc3/issues/4515#issuecomment-821250583', 'comment_created': datetime.datetime(2021, 6, 28, 16, 38, 56, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 659969798, 'comment_body': ""If it's a rv_out I don't think you can use the `isinstance` class checks above, but the RV op dtype can be used as a proxy. \n\nIf it's a Class, I don't think you can instantiate it because you would need to know the arguments, which the user has not provided yet. \n\nAnyway I think it makes more sense to work with a rv_out, as is done in the rest of the library (we will just need to raise a useful error because it will be a breaking change from V3). But I wonder if you'll have these intermediate rvs bothering you when creating the logp graph..."", 'comment_created': datetime.datetime(2021, 6, 28, 17, 12, 35, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 659976045, 'comment_body': 'Oh, this is one thing that needs discussion,\r\n\r\nDo we keep the previous `pm.Bound` interface of `call` upon a distribution class and then passing it the arguments ? Or do we make the distribution (just the `Distribution.dist`) separately in the Model and then `Bound` it ? \r\n\r\nThere is also a middle ground where we can pass the class and arguments of the distribution to `Bound` and it gets combined in the `dist` method of `Bound`.', 'comment_created': datetime.datetime(2021, 6, 28, 17, 22, 7, tzinfo=datetime.timezone.utc), 'commenter': 'kc611', 'type': 'User'}, {'comment_id': 659980354, 'comment_body': 'Yeah it needs discussion. Personally I prefer the `.dist` approach as that is much more coherent with the rest of the library.\n\nOn the other hand, pm.Bound is being refactored mostly for backwards compatibility because a lot of people have got used to it...\n\n', 'comment_created': datetime.datetime(2021, 6, 28, 17, 28, 39, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 660617444, 'comment_body': 'should not be applied to `Discrete` variables.', 'comment_created': datetime.datetime(2021, 6, 29, 13, 29, 10, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 662175007, 'comment_body': 'Not sure why but the value of `value` changes during the `logp` calculation hence the test failures.', 'comment_created': datetime.datetime(2021, 7, 1, 10, 32, 22, tzinfo=datetime.timezone.utc), 'commenter': 'kc611', 'type': 'User'}, {'comment_id': 665431457, 'comment_body': 'Actually it seems that because of the Distribution Metaclass magic we can check if a random `Op` is of type `Continuous`:\r\n\r\n```python\r\nisinstance(at.random.normal().owner.op, pm.Continuous)  # True\r\n```', 'comment_created': datetime.datetime(2021, 7, 7, 14, 33, 19, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 665434934, 'comment_body': 'You should probably keep the old Exception if a transform is provided for a Continuous distribution\r\n\r\n```python\r\n raise ValueError(""Cannot transform a discrete variable"")\r\n```', 'comment_created': datetime.datetime(2021, 7, 7, 14, 37, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 665444737, 'comment_body': 'This seems to duplicate a lot of the logic already implemented in:\r\nhttps://github.com/pymc-devs/pymc3/blob/9d90c891de5a2f491c51f8311b387f051e27538a/pymc3/distributions/continuous.py#L150\r\n\r\nWe can try to inherit from it in the current Class or make the `default_transform` in `BoundedContinuous` a `staticmethod` that can be called from other places. \r\n\r\nAlso this`Bound` class might still have to be split in `Discrete` and `Continuous` classes, which I think is necessary for some samplers to decide how to deal with the variables. In that case `Bound` can be just a wrapper that returns / instantiates the right type of Variable.', 'comment_created': datetime.datetime(2021, 7, 7, 14, 47, 34, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 673210928, 'comment_body': ""Not sure about the `ndims_params`. In fact the distribution is characterized by the `original params + [0, 0]`. Also the `dtype` should be the same as the original... But I don't know what is the best approach here, since obviously you won't know in advance which distribution is being bounded"", 'comment_created': datetime.datetime(2021, 7, 20, 15, 6, 38, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 673211753, 'comment_body': 'Does this work?\r\n\r\n```suggestion\r\n    rv_op = boundrv\r\n    cls.bound_args_indices = [-2, -1]\r\n```', 'comment_created': datetime.datetime(2021, 7, 20, 15, 7, 30, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 673220087, 'comment_body': ""Yes , that's probably a better way to do it."", 'comment_created': datetime.datetime(2021, 7, 20, 15, 17, 2, tzinfo=datetime.timezone.utc), 'commenter': 'kc611', 'type': 'User'}, {'comment_id': 673223673, 'comment_body': ""I thought it wouldn't matter in this case since we are never actually drawing values of that shape in the first place. `original ndims + [0, 0]` will probably be a good idea to implement here if that's not the case. "", 'comment_created': datetime.datetime(2021, 7, 20, 15, 21, 13, tzinfo=datetime.timezone.utc), 'commenter': 'kc611', 'type': 'User'}, {'comment_id': 673244403, 'comment_body': 'My bad...\r\n```suggestion\r\n    bound_args_indices = [-2, -1]\r\n```', 'comment_created': datetime.datetime(2021, 7, 20, 15, 44, 56, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 673244756, 'comment_body': 'I guess this removed section was a mistake?', 'comment_created': datetime.datetime(2021, 7, 20, 15, 45, 24, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 673249531, 'comment_body': 'Oh `pre-commit` was complaining about it not being used, I though it was some sort of residual code. What does it do anyway ? ', 'comment_created': datetime.datetime(2021, 7, 20, 15, 51, 2, tzinfo=datetime.timezone.utc), 'commenter': 'kc611', 'type': 'User'}, {'comment_id': 673250498, 'comment_body': 'For some reason doing this breaks `logp` generation.', 'comment_created': datetime.datetime(2021, 7, 20, 15, 52, 8, tzinfo=datetime.timezone.utc), 'commenter': 'kc611', 'type': 'User'}, {'comment_id': 673780835, 'comment_body': 'Does this fix it?\r\n```suggestion\r\n        if distribution.owner.op.ndim_supp != 0:\r\n```', 'comment_created': datetime.datetime(2021, 7, 21, 8, 44, 58, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 674730519, 'comment_body': 'If we are in a `modelcontext` we should check here that the `distribution` is not in `model` (which would mean the user did not use `.dist()` and the original variable would be accounted on the model logp as well. \r\n\r\n~~In addition we can add the check that it is a TensorVariable, if not, the user is probably trying to work with the old API~~ I see you already did this. Then the first error message can also go there', 'comment_created': datetime.datetime(2021, 7, 22, 11, 58, 38, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 675044907, 'comment_body': 'What was this TODO about?', 'comment_created': datetime.datetime(2021, 7, 22, 17, 57, 5, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 675164687, 'comment_body': 'Do we not support this use-case anymore?', 'comment_created': datetime.datetime(2021, 7, 22, 21, 10, 39, tzinfo=datetime.timezone.utc), 'commenter': 'twiecki', 'type': 'User'}, {'comment_id': 675296463, 'comment_body': ""No, you have to pass a .dist(). There is a very informative error message with a code example if users do that.\n\nThis was done to simplify the implementation and also be more in line with the rest of the API (e.g when you specify distributions for Mixtures, LKJCorr priors, RWs?). Also in the future, Truncated and Censored distributions would work the same way.\n\n~~I checked the original PRs for Bound and this was actually the initial intended API, but they couldn't make it work.~~ It was not, but it came up a couple of times, e.g: https://github.com/pymc-devs/pymc3/pull/2277#discussion_r124477153"", 'comment_created': datetime.datetime(2021, 7, 23, 4, 12, 1, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 678109824, 'comment_body': 'We need tests that cover the case where lower / upper is a vector, which were covered in these `ArrayNormal` checks', 'comment_created': datetime.datetime(2021, 7, 28, 8, 56, 30, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 678110405, 'comment_body': 'Codecov is suggesting some important error branches that are not covered by the new tests', 'comment_created': datetime.datetime(2021, 7, 28, 8, 57, 15, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 678111009, 'comment_body': 'This branch should be tested', 'comment_created': datetime.datetime(2021, 7, 28, 8, 58, 2, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}]","[{'commit_sha': 'd105682e48075db08e42e25963fb75c1de8184e3', 'committer_username': 'kc611', 'committer_name': 'Kaustubh', 'committer_email': 'ckaustubhm06@gmail.com', 'commit_date': datetime.datetime(2019, 9, 15, 13, 33, 26, tzinfo=datetime.timezone.utc)}]",Kaustubh,55352418,ckaustubhm06@gmail.com,User,,57,,48,65
673843130,Refactored LKJCorr and _LKJCholeskyCov,This PR refactors `LKJCorr` and `_LKJCholeskyCov` multivariate distributions for `v4`. ,False,4784,https://api.github.com/repos/pymc-devs/pymc/pulls/4784,https://github.com/pymc-devs/pymc/pull/4784,closed,273,239,6,1,18,15,0,1,[],2021-06-19 08:13:30+00:00,2022-01-25 12:10:13+00:00,19022203.0,"220 days, 3:56:43","[{'comment_id': 654766531, 'comment_body': ""This did 'fancy' indexing of the array `x` back in `v3`. Do we have an `Op` or a function which could handle it for `TensorVariable` in `v4`?\r\n\r\nEdit: Used `aesara.tensor.take()` here"", 'comment_created': datetime.datetime(2021, 6, 19, 8, 18, 11, tzinfo=datetime.timezone.utc), 'commenter': 'kc611', 'type': 'User'}, {'comment_id': 654767856, 'comment_body': ""`sd_dist` becomes a `rv.out`(for the given distribution) here. What would be the right was to access it's `logp` method here ?"", 'comment_created': datetime.datetime(2021, 6, 19, 8, 30, 49, tzinfo=datetime.timezone.utc), 'commenter': 'kc611', 'type': 'User'}, {'comment_id': 654768162, 'comment_body': 'You can call the _logp method on that `dist`. Check the ZeroInflatedBinomial logp for an example.', 'comment_created': datetime.datetime(2021, 6, 19, 8, 33, 55, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 654769531, 'comment_body': 'Something like `_logp(sd_dist.owner.op, {}, sd_vals, *sd_dist.owner.inputs)`\n\nOr `_logp(sd_dist.owner.op, {}, sd_vals, *sd_dist.owner.inputs[3:])`', 'comment_created': datetime.datetime(2021, 6, 19, 8, 48, 23, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 655121278, 'comment_body': ""Why is it that the `sd_dist` variable here becomes a `np.ndarray` over here? Even though it's an `rv.out` when passed from `.dist()`. Is `rv.out` somehow it being evaluated?\r\n\r\nNote: Specifically this happened when I was testing the test for `LKJCholeskyCov` from: https://github.com/pymc-devs/pymc3/blob/7be2025c4091e450f9e9dd050eb0dca08995c83f/pymc3/tests/test_distributions_random.py#L2187-L2197 and the `rng_fn` was called from `Model.set_initval`"", 'comment_created': datetime.datetime(2021, 6, 21, 6, 59, 26, tzinfo=datetime.timezone.utc), 'commenter': 'kc611', 'type': 'User'}, {'comment_id': 655124421, 'comment_body': ""There's a shape mismatch for `logp` in `LKJCov`. Is this because since the parameters `n` and `eta` are 0-dimensional it expects the `logp` to be be of shape equal to `x` which is not the case over here ? (It gives out a scalar value, which it should.). Maybe something like https://github.com/pymc-devs/pymc3/pull/4777#discussion_r654755729 is needed here, but for `logp`"", 'comment_created': datetime.datetime(2021, 6, 21, 7, 5, 39, tzinfo=datetime.timezone.utc), 'commenter': 'kc611', 'type': 'User'}, {'comment_id': 658106826, 'comment_body': ""@ricardoV94 is the case `(np.array([0.7,0,-0.7]), 0, 3, -np.inf)` here a extreme corner case ? \r\n\r\nIt looks like previously, this tests didn't pass through `random` (which now is it's `rng_fn`) for `logp`, now it does. And hence fails."", 'comment_created': datetime.datetime(2021, 6, 24, 16, 29, 59, tzinfo=datetime.timezone.utc), 'commenter': 'kc611', 'type': 'User'}, {'comment_id': 659773365, 'comment_body': 'One way to avoid the `sd_dist` problem is to ensure that the output shape of `dist` over here is (`n`) i.e. the number of random draws required in `LKJCholeskyCov` so that they automatically get evaluated as required.', 'comment_created': datetime.datetime(2021, 6, 28, 13, 12, 51, tzinfo=datetime.timezone.utc), 'commenter': 'kc611', 'type': 'User'}, {'comment_id': 659774058, 'comment_body': 'Note that this is just a temporary test and will need significant changes. ', 'comment_created': datetime.datetime(2021, 6, 28, 13, 13, 42, tzinfo=datetime.timezone.utc), 'commenter': 'kc611', 'type': 'User'}, {'comment_id': 659775968, 'comment_body': ""One thing I noticed is that `**kwargs` are not being passed over here, which means the distribution will always have a size of `None`. If thats the case, then I don't think we require most of the shapes logic in `rng_fn` of `LKJCholeskyCov` unless there are other use cases."", 'comment_created': datetime.datetime(2021, 6, 28, 13, 16, 6, tzinfo=datetime.timezone.utc), 'commenter': 'kc611', 'type': 'User'}, {'comment_id': 659777448, 'comment_body': 'Previously this drew from `.random` of `sd_dist`. But we can make sure the output shape of the `rv_out` in `sd_dist` is `(size, n)`. Which can be directly assigned over here.', 'comment_created': datetime.datetime(2021, 6, 28, 13, 18, 10, tzinfo=datetime.timezone.utc), 'commenter': 'kc611', 'type': 'User'}, {'comment_id': 720809167, 'comment_body': ""The issue with calling `logpt` directly over here is that `logpt` tries to filter the input values according to RV's shape. So we'd have to put an limitation on shapes if we try to do it like that. "", 'comment_created': datetime.datetime(2021, 10, 3, 10, 51, 14, tzinfo=datetime.timezone.utc), 'commenter': 'kc611', 'type': 'User'}, {'comment_id': 720809594, 'comment_body': ""The `LKJCorrRV` can be called over here if this particular operation (i.e. `np.linalg.cholesky(C)`) along with `C *= D[..., :, np.newaxis] * D[..., np.newaxis, :]` can be done after we index the `C` array as `C[..., tril_idx[0], tril_idx[1]]`.\r\n\r\nIf that's the case then sure we could avoid rewriting the code above and directly call `LKJCorrRV.rng_fn` upon these arguments."", 'comment_created': datetime.datetime(2021, 10, 3, 10, 54, 49, tzinfo=datetime.timezone.utc), 'commenter': 'kc611', 'type': 'User'}, {'comment_id': 720812689, 'comment_body': 'I am not sure, but worth investigating it', 'comment_created': datetime.datetime(2021, 10, 3, 11, 20, 42, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 720812958, 'comment_body': ""I didn't mean that. But this approach seems fine in any case. As long as it doesn't result in some value variable missing warnings"", 'comment_created': datetime.datetime(2021, 10, 3, 11, 22, 51, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}]","[{'commit_sha': 'f03976c94cfbbcc588386b35faf06688eb5f1293', 'committer_username': 'kc611', 'committer_name': 'Kaustubh', 'committer_email': 'ckaustubhm06@gmail.com', 'commit_date': datetime.datetime(2019, 9, 15, 13, 33, 26, tzinfo=datetime.timezone.utc)}]",Kaustubh,55352418,ckaustubhm06@gmail.com,User,,57,,48,65
705996695,Add support for symbolic initval using a singledispatch approach,"This PR was built upon #4867 as an simpler `singledispatch` based alternative.

Also Fixes: #4911 

cc @ricardoV94 @michaelosthege ",True,4912,https://api.github.com/repos/pymc-devs/pymc/pulls/4912,https://github.com/pymc-devs/pymc/pull/4912,closed,47,0,3,1,20,8,0,1,[],2021-08-08 07:17:55+00:00,2021-09-02 13:55:04+00:00,2183829.0,"25 days, 6:37:09","[{'comment_id': 691912910, 'comment_body': 'Actually size in `input[1]`, `input[2]` is dtype,', 'comment_created': datetime.datetime(2021, 8, 19, 8, 46, 11, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 693112430, 'comment_body': ""A random draw from a scalar RV has a `shape == ()`. Shouldn't the moment have the same scalar shape?"", 'comment_created': datetime.datetime(2021, 8, 20, 17, 35, 37, tzinfo=datetime.timezone.utc), 'commenter': 'michaelosthege', 'type': 'User'}, {'comment_id': 693113202, 'comment_body': '```suggestion\r\n            moment_method = clsdict.get(""get_moment"")\r\n            if moment_method:\r\n\r\n                @_get_moment.register(rv_type)\r\n                def get_moment(op, rv, size, *rv_inputs):\r\n                    return moment_method(rv, size, *rv_inputs)\r\n```', 'comment_created': datetime.datetime(2021, 8, 20, 17, 37, 3, tzinfo=datetime.timezone.utc), 'commenter': 'michaelosthege', 'type': 'User'}, {'comment_id': 701208830, 'comment_body': 'I know this was merged already, but this part of the docstrings is wrong', 'comment_created': datetime.datetime(2021, 9, 2, 15, 42, 42, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 701232137, 'comment_body': 'OK, we should fix that then. CC @kc611 ', 'comment_created': datetime.datetime(2021, 9, 2, 16, 11, 42, tzinfo=datetime.timezone.utc), 'commenter': 'twiecki', 'type': 'User'}, {'comment_id': 701247398, 'comment_body': ""Ah yes I missed that, those docstrings were supposed to be removed. \r\n\r\nI'm not sure what (docstring) will go in it's place though. Maybe I should just remove them for now ? We can add a proper explanation when we give the `get_moment` a proper entry point in the `initval` framework (if that's being planned)"", 'comment_created': datetime.datetime(2021, 9, 2, 16, 31, 56, tzinfo=datetime.timezone.utc), 'commenter': 'kc611', 'type': 'User'}, {'comment_id': 701728065, 'comment_body': 'Yes, then just remove them for now.', 'comment_created': datetime.datetime(2021, 9, 3, 9, 3, 41, tzinfo=datetime.timezone.utc), 'commenter': 'twiecki', 'type': 'User'}, {'comment_id': 701740129, 'comment_body': 'Did it in https://github.com/pymc-devs/pymc3/pull/4979', 'comment_created': datetime.datetime(2021, 9, 3, 9, 21, 32, tzinfo=datetime.timezone.utc), 'commenter': 'kc611', 'type': 'User'}]","[{'commit_sha': '46cb30a4653b6c07027c57c6f57d83f204d62e69', 'committer_username': 'kc611', 'committer_name': 'Kaustubh', 'committer_email': 'ckaustubhm06@gmail.com', 'commit_date': datetime.datetime(2019, 9, 15, 13, 33, 26, tzinfo=datetime.timezone.utc)}]",Kaustubh,55352418,ckaustubhm06@gmail.com,User,,57,,48,65
698777329,Integration of `aeppl` with PyMC,"This PR refactors PyMC's `_logp` framework to be able to use `aeppl`'s `joint_logprob` framework. 

The changes this PR aims to make:

- [x] Registering the Log-probability functions of PyMC's distributions on `_logprob` instead of `_logp` so that `joint_logprob` can use them internally.
- [x] Separating `log-cdf` logic handling from `logp` logic (currently both are being handled in the same `logpt` function)
- [x] Removing redundant `logp` from Distribution classes (since `_logprob` registration present in `aeppl, for e.g. `NormalRV`)
- [x] Calling `factorized_joint_logprob` inside `logpt` function. and then return the appropriate RVs (since `joint_logprob` tends to return all of the RV's `logp` present in the graph)
- [x] Switching from `pymc`'s transforms to `aeppl`'s transforms.
  - [x] Refactor `transforms.py` and remove transforms already present in `aeppl`
  - [x] Updating transform related logic to match `aeppl`'s. 
  - [x] Passing transforms to `joint_logprob` correctly
  - [x] Refactoring `test_transforms.py`
- [x] Investigate test failures.
  - [x] test_distributions failures. 
  - [x] `test_transforms.py` test failures. 
  - [x] `test_logprob` failures.",True,4887,https://api.github.com/repos/pymc-devs/pymc/pulls/4887,https://github.com/pymc-devs/pymc/pull/4887,closed,595,1095,40,1,23,79,3,2,"[{'name': 'enhancements'}, {'name': 'v4'}, {'name': 'pytensor'}]",2021-07-28 15:04:49+00:00,2021-10-23 10:14:42+00:00,7499393.0,"86 days, 19:09:53","[{'comment_id': 678397888, 'comment_body': ""This way the `Op`s with no registered logp's in PyMC can 'fall back' to their aeppl implementation and can be replaced with appropriate RVs (For instance the current Mixture will be a `Subtensor` later replaced by `MixtureRV` and also the upcoming `Scan` which will be replaced by `ScanRV` )\r\n\r\nIs this a good entry point for `joint_logprob`? cc @brandonwillard  "", 'comment_created': datetime.datetime(2021, 7, 28, 15, 11, 32, tzinfo=datetime.timezone.utc), 'commenter': 'kc611', 'type': 'User'}, {'comment_id': 678401173, 'comment_body': ""Here we'll need to take care of the `size` argument passed to the Mixture distribution itself. "", 'comment_created': datetime.datetime(2021, 7, 28, 15, 14, 54, tzinfo=datetime.timezone.utc), 'commenter': 'kc611', 'type': 'User'}, {'comment_id': 678404493, 'comment_body': ""Something like that could work for now, but keep on mind that we'll probably want to entirely remove this module at some point after the integration is established."", 'comment_created': datetime.datetime(2021, 7, 28, 15, 18, 30, tzinfo=datetime.timezone.utc), 'commenter': 'brandonwillard', 'type': 'User'}, {'comment_id': 679979990, 'comment_body': ""For some reason these aren't being registered onto `_logprob`."", 'comment_created': datetime.datetime(2021, 7, 30, 14, 42, 18, tzinfo=datetime.timezone.utc), 'commenter': 'kc611', 'type': 'User'}, {'comment_id': 680099950, 'comment_body': ""We shouldn't need these anymore, right?  The functionality should already be covered by AePPL."", 'comment_created': datetime.datetime(2021, 7, 30, 17, 10, 21, tzinfo=datetime.timezone.utc), 'commenter': 'brandonwillard', 'type': 'User'}, {'comment_id': 687586754, 'comment_body': 'Separated the `logcdf` and `logp` frameworks since down the line we can expect changes to `logpt` function when `joint_logprob` supports the transforms being passed to it. (And the difference between the logic for handling one thing or other will increase)', 'comment_created': datetime.datetime(2021, 8, 12, 10, 26, 31, tzinfo=datetime.timezone.utc), 'commenter': 'kc611', 'type': 'User'}, {'comment_id': 687588224, 'comment_body': 'This was required since `joint_logprob` will simply ignore the RandomVariables which are not in the `rvs_to_values` list. Plus the transforms are not fully supported hence we still have to do the replacement logic below. (L-160 to L-167)', 'comment_created': datetime.datetime(2021, 8, 12, 10, 28, 52, tzinfo=datetime.timezone.utc), 'commenter': 'kc611', 'type': 'User'}, {'comment_id': 699586154, 'comment_body': 'Made a call to `joint_logprob` using transforms mapping. ', 'comment_created': datetime.datetime(2021, 8, 31, 18, 44, 59, tzinfo=datetime.timezone.utc), 'commenter': 'kc611', 'type': 'User'}, {'comment_id': 712552535, 'comment_body': 'You need to add this to the conda test and dev env, as this is auto-generated.', 'comment_created': datetime.datetime(2021, 9, 20, 22, 18, 19, tzinfo=datetime.timezone.utc), 'commenter': 'twiecki', 'type': 'User'}, {'comment_id': 712556820, 'comment_body': '```suggestion\n        logp = _logprob(normal, (value,), None, None, None, mu, sigma) - norm\n```\nSeems less error prone, same for others below.', 'comment_created': datetime.datetime(2021, 9, 20, 22, 27, 58, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 712557384, 'comment_body': ""```suggestion\n```\nI might be wrong but I don't think we are using this anymore"", 'comment_created': datetime.datetime(2021, 9, 20, 22, 29, 7, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 712558623, 'comment_body': 'Not sure about this one. Why did you add it?\n\nI would guess an exception might be better', 'comment_created': datetime.datetime(2021, 9, 20, 22, 31, 49, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 712560387, 'comment_body': ""```suggestion\n            tmp_rvs_to_values[curr_var] = rv_value\n            tmp_values_to_rvs[rv_value] = curr_var\n```\nThen you don't need the list of keys thing in the loop below"", 'comment_created': datetime.datetime(2021, 9, 20, 22, 36, 3, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 712561320, 'comment_body': ""```suggestion\n    scaling: bool = True,\n    sum: bool = False,\n```\n\nI don't think those 2 ever make sense for cdfs\n"", 'comment_created': datetime.datetime(2021, 9, 20, 22, 37, 59, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 712564455, 'comment_body': '```suggestion\nfrom aeppl import transforms\n```\n', 'comment_created': datetime.datetime(2021, 9, 20, 22, 45, 6, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 712565324, 'comment_body': 'We probably want to make the aeppl transforms available here for PyMC3 users', 'comment_created': datetime.datetime(2021, 9, 20, 22, 47, 14, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 712876994, 'comment_body': ""Ah okay, I added that because the `BART` class wasn't dispatching according to `NoDistribution`s `logp` so had to add that separately like this. "", 'comment_created': datetime.datetime(2021, 9, 21, 9, 46, 2, tzinfo=datetime.timezone.utc), 'commenter': 'kc611', 'type': 'User'}, {'comment_id': 713489633, 'comment_body': ""Let's set upper bounds on the minor version number and conciously update instead of getting surprised by breaking changes."", 'comment_created': datetime.datetime(2021, 9, 21, 23, 37, 22, tzinfo=datetime.timezone.utc), 'commenter': 'michaelosthege', 'type': 'User'}, {'comment_id': 713518633, 'comment_body': 'Why? Can we add a comment?', 'comment_created': datetime.datetime(2021, 9, 22, 1, 5, 27, tzinfo=datetime.timezone.utc), 'commenter': 'michaelosthege', 'type': 'User'}, {'comment_id': 713518979, 'comment_body': 'Is this on purpose?', 'comment_created': datetime.datetime(2021, 9, 22, 1, 6, 38, tzinfo=datetime.timezone.utc), 'commenter': 'michaelosthege', 'type': 'User'}, {'comment_id': 713520235, 'comment_body': 'Short explanation maybe? (same as above)', 'comment_created': datetime.datetime(2021, 9, 22, 1, 10, 33, tzinfo=datetime.timezone.utc), 'commenter': 'michaelosthege', 'type': 'User'}, {'comment_id': 713522500, 'comment_body': 'TODO replace 0 with None', 'comment_created': datetime.datetime(2021, 9, 22, 1, 18, 21, tzinfo=datetime.timezone.utc), 'commenter': 'michaelosthege', 'type': 'User'}, {'comment_id': 713523027, 'comment_body': 'If `value_var` is not the `value_var`, it should not be called `value_var` in the first place.\r\n(On one side of the `=` it should say something else than `value_var`.)', 'comment_created': datetime.datetime(2021, 9, 22, 1, 20, 20, tzinfo=datetime.timezone.utc), 'commenter': 'michaelosthege', 'type': 'User'}, {'comment_id': 713523526, 'comment_body': 'The existence of this method is not in line with actual distributions where this stuff is done through `pm.logp`.\r\nCan it be dispatched?\r\n**EDIT: ** It looks like it _is_ dispatched below?\r\n\r\nAlso the docstring does not account for all parameters.', 'comment_created': datetime.datetime(2021, 9, 22, 1, 21, 47, tzinfo=datetime.timezone.utc), 'commenter': 'michaelosthege', 'type': 'User'}, {'comment_id': 713524243, 'comment_body': 'Same thing with the `value_var` variable name. (mypy would also complain about it, because overwriting the variable name changes the type...)', 'comment_created': datetime.datetime(2021, 9, 22, 1, 24, 1, tzinfo=datetime.timezone.utc), 'commenter': 'michaelosthege', 'type': 'User'}, {'comment_id': 713524931, 'comment_body': '```suggestion\r\n    # Recompute test values for the changes introduced by the replacements above.\r\n    if config.compute_test_value != ""off"":\r\n        for node in io_toposort(graph_inputs((logp_var,)), (logp_var,)):\r\n            compute_test_value(node)\r\n\r\n    if var.name is not None:\r\n        logp_var.name = f""__logp_{var.name}""\r\n```', 'comment_created': datetime.datetime(2021, 9, 22, 1, 26, 27, tzinfo=datetime.timezone.utc), 'commenter': 'michaelosthege', 'type': 'User'}, {'comment_id': 713526229, 'comment_body': 'remove?', 'comment_created': datetime.datetime(2021, 9, 22, 1, 30, 25, tzinfo=datetime.timezone.utc), 'commenter': 'michaelosthege', 'type': 'User'}, {'comment_id': 716031951, 'comment_body': 'Is this an `aeppl` constraint ?\r\n', 'comment_created': datetime.datetime(2021, 9, 25, 11, 50, 57, tzinfo=datetime.timezone.utc), 'commenter': 'kc611', 'type': 'User'}, {'comment_id': 716032142, 'comment_body': 'This might need further investigation. The tests do pass for the value checks below but not for these dimension checks. ', 'comment_created': datetime.datetime(2021, 9, 25, 11, 52, 37, tzinfo=datetime.timezone.utc), 'commenter': 'kc611', 'type': 'User'}, {'comment_id': 716545146, 'comment_body': ""Don't all other logps take symbolic x too?"", 'comment_created': datetime.datetime(2021, 9, 27, 10, 3, 55, tzinfo=datetime.timezone.utc), 'commenter': 'michaelosthege', 'type': 'User'}, {'comment_id': 716566657, 'comment_body': 'The new kwarg is missing from the docstring', 'comment_created': datetime.datetime(2021, 9, 27, 10, 34, 47, tzinfo=datetime.timezone.utc), 'commenter': 'michaelosthege', 'type': 'User'}, {'comment_id': 716566971, 'comment_body': 'ToDo', 'comment_created': datetime.datetime(2021, 9, 27, 10, 35, 18, tzinfo=datetime.timezone.utc), 'commenter': 'michaelosthege', 'type': 'User'}, {'comment_id': 716569089, 'comment_body': 'It would be great to have comments explaining what these next code blocks are about. (Also for blocks above.)', 'comment_created': datetime.datetime(2021, 9, 27, 10, 38, 43, tzinfo=datetime.timezone.utc), 'commenter': 'michaelosthege', 'type': 'User'}, {'comment_id': 716569366, 'comment_body': '```suggestion\r\n    # Recompute test values for the changes introduced by the replacements above.\r\n```', 'comment_created': datetime.datetime(2021, 9, 27, 10, 39, 7, tzinfo=datetime.timezone.utc), 'commenter': 'michaelosthege', 'type': 'User'}, {'comment_id': 716569599, 'comment_body': '```suggestion\r\n        logp_var.name = f""__logp_{var.name}""\r\n```', 'comment_created': datetime.datetime(2021, 9, 27, 10, 39, 29, tzinfo=datetime.timezone.utc), 'commenter': 'michaelosthege', 'type': 'User'}, {'comment_id': 716570662, 'comment_body': 'To include it where?\r\n\r\nAlso is this kwarg even used somewhere?', 'comment_created': datetime.datetime(2021, 9, 27, 10, 41, 3, tzinfo=datetime.timezone.utc), 'commenter': 'michaelosthege', 'type': 'User'}, {'comment_id': 716571170, 'comment_body': 'ToDo', 'comment_created': datetime.datetime(2021, 9, 27, 10, 41, 46, tzinfo=datetime.timezone.utc), 'commenter': 'michaelosthege', 'type': 'User'}, {'comment_id': 716571994, 'comment_body': 'Maybe add an alias, or a placeholder class `Transform` for printing migration instructions?', 'comment_created': datetime.datetime(2021, 9, 27, 10, 43, 6, tzinfo=datetime.timezone.utc), 'commenter': 'michaelosthege', 'type': 'User'}, {'comment_id': 716636177, 'comment_body': ""From the text here I don't understand what this means.\r\n\r\nCan you open a corresponding issue?"", 'comment_created': datetime.datetime(2021, 9, 27, 12, 19, 58, tzinfo=datetime.timezone.utc), 'commenter': 'michaelosthege', 'type': 'User'}, {'comment_id': 716636773, 'comment_body': 'ToDo (convert to issue?)', 'comment_created': datetime.datetime(2021, 9, 27, 12, 20, 45, tzinfo=datetime.timezone.utc), 'commenter': 'michaelosthege', 'type': 'User'}, {'comment_id': 716637278, 'comment_body': 'Another ToDo', 'comment_created': datetime.datetime(2021, 9, 27, 12, 21, 22, tzinfo=datetime.timezone.utc), 'commenter': 'michaelosthege', 'type': 'User'}, {'comment_id': 716638383, 'comment_body': ""`interval` is a type? That's unexpected from a lowercase name =/"", 'comment_created': datetime.datetime(2021, 9, 27, 12, 22, 55, tzinfo=datetime.timezone.utc), 'commenter': 'michaelosthege', 'type': 'User'}, {'comment_id': 716639456, 'comment_body': 'Does that mean the circular transform is broken?', 'comment_created': datetime.datetime(2021, 9, 27, 12, 24, 32, tzinfo=datetime.timezone.utc), 'commenter': 'michaelosthege', 'type': 'User'}, {'comment_id': 716645341, 'comment_body': 'Specifically which new `kwarg` are you talking about ?', 'comment_created': datetime.datetime(2021, 9, 27, 12, 32, 45, tzinfo=datetime.timezone.utc), 'commenter': 'kc611', 'type': 'User'}, {'comment_id': 716646221, 'comment_body': '`jacobian` is being passed onto `factorized_joint_logprob` below. The functionality was recently added into `aeppl`. ', 'comment_created': datetime.datetime(2021, 9, 27, 12, 33, 55, tzinfo=datetime.timezone.utc), 'commenter': 'kc611', 'type': 'User'}, {'comment_id': 716647028, 'comment_body': ""There's already an issue running regarding this: https://github.com/pymc-devs/pymc3/issues/5023"", 'comment_created': datetime.datetime(2021, 9, 27, 12, 35, 4, tzinfo=datetime.timezone.utc), 'commenter': 'kc611', 'type': 'User'}, {'comment_id': 716648132, 'comment_body': 'Maybe. Otherwise the better way to do this would probably be to use a corresponding value variable while constructing the log probability graph and then passing the actual values onto the `.eval()`. Rather than directly passing those value. ', 'comment_created': datetime.datetime(2021, 9, 27, 12, 36, 36, tzinfo=datetime.timezone.utc), 'commenter': 'kc611', 'type': 'User'}, {'comment_id': 716650043, 'comment_body': ""It already is the case, no ?\r\n\r\nhttps://github.com/pymc-devs/pymc3/blob/8ae296bdf3ee58850824c9997293803d2df958ec/pymc/distributions/transforms.py#L224\r\n\r\nIt's just that the actual name of the class went from `Interval` to `IntervalTransform`"", 'comment_created': datetime.datetime(2021, 9, 27, 12, 38, 58, tzinfo=datetime.timezone.utc), 'commenter': 'kc611', 'type': 'User'}, {'comment_id': 716652481, 'comment_body': ""Oh this one can just be removed. I didn't know what the significance of this line https://github.com/pymc-devs/pymc3/blob/8ae296bdf3ee58850824c9997293803d2df958ec/pymc/distributions/simulator.py#L220 was. I just changed it to it's new corresponding form. "", 'comment_created': datetime.datetime(2021, 9, 27, 12, 41, 58, tzinfo=datetime.timezone.utc), 'commenter': 'kc611', 'type': 'User'}, {'comment_id': 716654244, 'comment_body': ""Yes they do, I'll change this doc-string accordingly. "", 'comment_created': datetime.datetime(2021, 9, 27, 12, 44, 6, tzinfo=datetime.timezone.utc), 'commenter': 'kc611', 'type': 'User'}, {'comment_id': 716656636, 'comment_body': ""This particular case was because `factorized_joint_logprob` returns an empty dictionary when there are no logp graph where-as PyMC expects it to be `None`. Hence this shortcut. Regardless you're right, I should probably add such information as comments."", 'comment_created': datetime.datetime(2021, 9, 27, 12, 46, 59, tzinfo=datetime.timezone.utc), 'commenter': 'kc611', 'type': 'User'}, {'comment_id': 716657742, 'comment_body': 'This was discussed during the call. We should probably open an issue regarding this. ', 'comment_created': datetime.datetime(2021, 9, 27, 12, 48, 21, tzinfo=datetime.timezone.utc), 'commenter': 'kc611', 'type': 'User'}, {'comment_id': 717638027, 'comment_body': 'CC @ricardoV94 ', 'comment_created': datetime.datetime(2021, 9, 28, 14, 28, 2, tzinfo=datetime.timezone.utc), 'commenter': 'kc611', 'type': 'User'}, {'comment_id': 719407372, 'comment_body': 'The sum kwarg', 'comment_created': datetime.datetime(2021, 9, 30, 13, 29, 38, tzinfo=datetime.timezone.utc), 'commenter': 'michaelosthege', 'type': 'User'}, {'comment_id': 723155535, 'comment_body': 'Can this raise a NotImplementedError?', 'comment_created': datetime.datetime(2021, 10, 6, 11, 40, 16, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 726085267, 'comment_body': 'Can you explain a bit of what you are doing here? Where there duplicated variables in graphs with IncSubtensors?', 'comment_created': datetime.datetime(2021, 10, 11, 12, 46, 19, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 726089780, 'comment_body': 'Also add an alias to the hold `stick_breaking`, with a deprecation warning (will have to subclass Simplex I think)', 'comment_created': datetime.datetime(2021, 10, 11, 12, 52, 1, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 726092260, 'comment_body': '```suggestion\r\n    @pytest.mark.xfail(\r\n        reason=""Fails due to brittle parametrization triggering numpy domain check in RandomVariable, see #5023""\r\n    )\r\n```', 'comment_created': datetime.datetime(2021, 10, 11, 12, 55, 23, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 726092942, 'comment_body': 'Can we revert these changes?', 'comment_created': datetime.datetime(2021, 10, 11, 12, 56, 14, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 726093191, 'comment_body': ""No point in changing things if it's still an x-fail"", 'comment_created': datetime.datetime(2021, 10, 11, 12, 56, 32, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 726094797, 'comment_body': ""Let's revert this one"", 'comment_created': datetime.datetime(2021, 10, 11, 12, 58, 34, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 726095342, 'comment_body': ""Let's open an issue to track this one"", 'comment_created': datetime.datetime(2021, 10, 11, 12, 59, 16, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 726095510, 'comment_body': 'Same here', 'comment_created': datetime.datetime(2021, 10, 11, 12, 59, 31, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 726096044, 'comment_body': ""Let's open an issue for tracking this"", 'comment_created': datetime.datetime(2021, 10, 11, 13, 0, 13, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 726098963, 'comment_body': 'I think so. For instance constants may have the same hash (no idea if they do), which would lead to issues in our dict output. Anyway this seems fine.', 'comment_created': datetime.datetime(2021, 10, 11, 13, 4, 6, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 728908852, 'comment_body': ""This failure happens with current `aeppl` version. We should probably open up an issue for this. The output values are losing precision somewhere along the chain transform. (It's a values deviation of about `10^-6` from expected)"", 'comment_created': datetime.datetime(2021, 10, 14, 11, 57, 16, tzinfo=datetime.timezone.utc), 'commenter': 'kc611', 'type': 'User'}, {'comment_id': 728910926, 'comment_body': ""No, essentially we don't have the shortcut which returned the same value in the `Stickbreaking`/`Simplex` transform in `aeppl` anymore for a particular case. And I don't think we'd should be doing that until we absolutely need to.  \r\n\r\nhttps://github.com/pymc-devs/pymc/blob/a8b475425f3cfe226043242cf0551eaeaf224cb2/pymc/distributions/transforms.py#L289-L292"", 'comment_created': datetime.datetime(2021, 10, 14, 12, 0, 13, tzinfo=datetime.timezone.utc), 'commenter': 'kc611', 'type': 'User'}, {'comment_id': 729189132, 'comment_body': ""This is expected for transformations whose inverse is not completely undone by the aesara rewrites. Do open an issue. I wanted to investigate it, but didn't have the time yet"", 'comment_created': datetime.datetime(2021, 10, 14, 17, 17, 49, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 729925339, 'comment_body': 'The tests end up raising that error. (During sampling from a model containing `BART`). Here is an exampe stack trace\r\n\r\n```\r\npymc/sampling.py:500: in sample\r\n    step = assign_step_methods(model, step, step_kwargs=kwargs)\r\npymc/sampling.py:219: in assign_step_methods\r\n    return instantiate_steppers(model, steps, selected_steps, step_kwargs)\r\npymc/sampling.py:143: in instantiate_steppers\r\n    step = step_class(vars=vars, model=model, **args)\r\npymc/bart/pgbart.py:184: in __init__\r\n    self.likelihood_logp = logp(initial_values, [model.datalogpt], vars, shared)\r\npymc/model.py:825: in datalogpt\r\n    obs_factors = logpt(self.observed_RVs, obs_values)\r\npymc/distributions/logprob.py:228: in logpt\r\n    tmp_rvs_to_values, extra_rewrites=transform_opt, use_jacobian=jacobian, **kwargs\r\n/home/kc611/anaconda3/envs/pymcv4/lib/python3.7/site-packages/aeppl/joint_logprob.py:190: in factorized_joint_logprob\r\n    **kwargs,\r\n/home/kc611/anaconda3/envs/pymcv4/lib/python3.7/functools.py:840: in wrapper\r\n    return dispatch(args[0].__class__)(*args, **kw)\r\npymc/bart/bart.py:181: in logp\r\n    return BART.logp(value_var, *_dist_params)\r\npymc/bart/bart.py:163: NotImplementedError()\r\n```\r\n\r\nIs this preventable ? ', 'comment_created': datetime.datetime(2021, 10, 15, 15, 34, 5, tzinfo=datetime.timezone.utc), 'commenter': 'kc611', 'type': 'User'}, {'comment_id': 733339071, 'comment_body': ""Not a blocker, but shouldn't this go into Aesara?"", 'comment_created': datetime.datetime(2021, 10, 21, 5, 51, 47, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 733339533, 'comment_body': 'What happened to these conditions?', 'comment_created': datetime.datetime(2021, 10, 21, 5, 52, 55, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 733802454, 'comment_body': ""Giving invalid parameters to a distribution now raises an `AsserionError` from `aeppl` (From the `assert` statements in each `logp` so this will no longer give infinite values). Plus the invalid values are being tested in `aeppl` so I didn't see a point adding such a test in PyMC."", 'comment_created': datetime.datetime(2021, 10, 21, 15, 32, 28, tzinfo=datetime.timezone.utc), 'commenter': 'kc611', 'type': 'User'}, {'comment_id': 733804352, 'comment_body': ""That is supposed to be just a temporary pass-through for `Assert` Op since Jax doesn't allow asserts in it's code. Though you're right we should be adding this functionality (maybe with a good workaround) in Aesara, I'll open an issue for this. "", 'comment_created': datetime.datetime(2021, 10, 21, 15, 34, 58, tzinfo=datetime.timezone.utc), 'commenter': 'kc611', 'type': 'User'}, {'comment_id': 733833776, 'comment_body': '@ricardoV94 is this is right way to test that issue ?', 'comment_created': datetime.datetime(2021, 10, 21, 16, 9, 14, tzinfo=datetime.timezone.utc), 'commenter': 'kc611', 'type': 'User'}, {'comment_id': 733834934, 'comment_body': ""~I think that's good, it fails on main locally!~\r\n\r\nI would add a comment referencing the relevant Github issue for context"", 'comment_created': datetime.datetime(2021, 10, 21, 16, 10, 40, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 733836933, 'comment_body': ""Nevermind, it's not that as it passes on main"", 'comment_created': datetime.datetime(2021, 10, 21, 16, 13, 7, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 733844519, 'comment_body': 'I pushed a test that passes now and fails on main', 'comment_created': datetime.datetime(2021, 10, 21, 16, 22, 1, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 734890481, 'comment_body': ""Disclaimer: I skimmed the discussion and have not reviewed the code\r\n\r\nWhat does this dependency mean for the users? Will using aeppl functions/methods be necessary? Or will it be handled under the hood and advanced users will be able to use it if they want?\r\n\r\nThis is a minor-medium concern for the beta release, but aeppl seems to be very little documented. I was unable to find the _link_ to it's docs anywhere. I also did check and saw there was a `gh-pages` branch so I went to https://aesara-devs.github.io/aeppl/ which has some api docs. We need to work on aeppl docs if we expect pymc **users** to work with it directly before releasing stable 4.0"", 'comment_created': datetime.datetime(2021, 10, 22, 23, 36, 43, tzinfo=datetime.timezone.utc), 'commenter': 'OriolAbril', 'type': 'User'}, {'comment_id': 734938817, 'comment_body': ""Users don't need to know about aeppl, it will be used by us developers to create more complex distributions.\n\nIndeed we need documentation building on aeppl, we have a PR opened for that, but we welcome help. All our methods and functions are quite well documented on the other hand"", 'comment_created': datetime.datetime(2021, 10, 23, 7, 47, 16, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}]","[{'commit_sha': 'a8545150639a9fb9246aac96612e875ce158a891', 'committer_username': 'kc611', 'committer_name': 'Kaustubh', 'committer_email': 'ckaustubhm06@gmail.com', 'commit_date': datetime.datetime(2019, 9, 15, 13, 33, 26, tzinfo=datetime.timezone.utc)}]",Kaustubh,55352418,ckaustubhm06@gmail.com,User,,57,,48,65
683039479,Add support for `Scan` `Op`s in `joint_logprob`,"This PR aims to implements `logprob` for Scan Ops. Linked Issue: #23 

```python
import aesara
import aesara.tensor as at


k = at.iscalar(""k"")

Y_rv, _ = aesara.scan(
    fn=lambda Y_tm1: Y_tm1 + at.random.normal(name=""Y_t""),
    outputs_info=[{""initial"": at.as_tensor([0.0]), ""taps"": [-1]}],
    n_steps=k,
    name=""Y""
)

y_vv = Y_rv.clone()
y_vv.name = ""y""

logp = joint_logprob(Y_rv, {Y_rv: y_vv})
```

Note : I am building this on top of replacement logic from #19 

***

- [x] Setting up a general `Scan` replacement framework from `symbolic-pymc`.
- [x] Calculating log-probability for Scan's output arguments 'all-at-once' in `logprob_ScanRV`.
  - [x] Passing proper values to `convert_outer_out_to_in` from `logprob_ScanRV`
  - [x] Using the `new_outer_input_vars` mapping to act as values for log probability of respective inner-graph output nodes.
    - [x] Figure out how to split `value` of each node according to iterations of Scan. (i.e. taps logic)
    - [x] Calculating joint-log-probability in `create_inner_out_logp` instead of a normal `_logprob` call for each node involved.
- [x] Investigating and handling test failures/unexpected behaviors.
   - [x] Find out cause of test failure in `test_scan_logprob`
   - [x] Figuring out how to handle `RandomStream` updates in Aesara's `FunctionGraphs` so that they do not require explicit handling in `aeppl` ",True,24,https://api.github.com/repos/aesara-devs/aeppl/pulls/24,https://github.com/aesara-devs/aeppl/pull/24,closed,928,7,5,3,12,31,2,1,"[{'name': 'enhancement'}, {'name': 'important'}]",2021-07-03 15:27:01+00:00,2021-10-06 02:26:11+00:00,8161150.0,"94 days, 10:59:10","[{'comment_id': 663377555, 'comment_body': 'So as my first try I did something similar to what we do with `MixtureRV`. \r\n\r\nThis replacement gets stuck in some long \'optimization\' computation.  I\'m not even sure if this logic will be able to handle ""Push-down"" correctly, since were basically converting Scan node to an `ScanRV` with just the `RV` inputs. ', 'comment_created': datetime.datetime(2021, 7, 3, 15, 29, 22, tzinfo=datetime.timezone.utc), 'commenter': 'kc611', 'type': 'User'}, {'comment_id': 663377733, 'comment_body': ""Is there a way we can get the Scan's inner graph as `FunctionGraph` so we can walk that instead of each output node. "", 'comment_created': datetime.datetime(2021, 7, 3, 15, 31, 17, tzinfo=datetime.timezone.utc), 'commenter': 'kc611', 'type': 'User'}, {'comment_id': 663388507, 'comment_body': 'Are you referring to the output nodes of the inner-graph?', 'comment_created': datetime.datetime(2021, 7, 3, 17, 22, 44, tzinfo=datetime.timezone.utc), 'commenter': 'brandonwillard', 'type': 'User'}, {'comment_id': 663390744, 'comment_body': ""Actually, here you can use `aesara.graph.basic.io_toposort` on the inner-inputs and inner-outputs (see [here](https://github.com/pymc-devs/symbolic-pymc/blob/master/symbolic_pymc/theano/opt.py#L575) for an example in this exact context).  To get the inner-inputs and inner-outputs, you can use the `symbolic_pymc.theano.opt.ScanArgs` helper-class.  There's already a `scan_args` in Aesara upon which `ScanArgs` is based, but we should really replace it with `ScanArgs`.\r\n\r\nOnce you have a `ScanArgs` instance, you can get all the parts of a `Scan` `Op` much more easily.  For instance, the `.inner_outputs` property will give you a list of the inner-outputs."", 'comment_created': datetime.datetime(2021, 7, 3, 17, 46, 1, tzinfo=datetime.timezone.utc), 'commenter': 'brandonwillard', 'type': 'User'}, {'comment_id': 663391681, 'comment_body': ""Remember, this example requires a convolution rewrite that isn't present yet.  Also, this example will return the same `at.random.normal` for every iteration.\r\n\r\nLet's start with a simpler example that doesn't require any other rewrites; that will allow us to create and check the log-probability steps.\r\n\r\nFor example:\r\n```python\r\nsrng = at.random.RandomStream()\r\nresult, _ = aesara.scan(lambda mu: srng.normal(mu, 1e-3), sequences=[at.pow(10, at.arange(k))])\r\n```\r\n\r\nThat will create a graph that is equivalent to `at.random.normal(at.pow(10, at.arange(k)), 1e-3)`.\r\n\r\nNB: There are some `Scan` rewrites that perform optimizations like this, but I don't think they apply to this case, because `at.random.normal` doesn't produce an `Elemwise`.  Regardless, at some point we should have these kinds of things in place, but, even if we did have them, we would want to disable them so that this extremely simple test could be used."", 'comment_created': datetime.datetime(2021, 7, 3, 17, 55, 26, tzinfo=datetime.timezone.utc), 'commenter': 'brandonwillard', 'type': 'User'}, {'comment_id': 663392698, 'comment_body': ""Yeah like making an entire temporary fgraph just to walk it through to find RV's seems a little bit redundant. Is there a better way to detect the RVs."", 'comment_created': datetime.datetime(2021, 7, 3, 18, 7, 24, tzinfo=datetime.timezone.utc), 'commenter': 'kc611', 'type': 'User'}, {'comment_id': 663393186, 'comment_body': ""The replacement performed by `scan_replace` should only occur when the inner-outputs that determine the outer-outputs are all `RandomVariable` nodes (i.e. the (relevant) outputs of scan are effectively a sequence of `RandomVariable` outputs), because that's when we can compute the log-probability with something like `at.sum(scan(lambda ..., value, ...: logprob(inner_out, value), ...))`.\r\n\r\nThe other rewrites are applied separately to the original `Scan`&mdash;through the normal course of running `logprob_rewrites_db`&mdash;until the inner-graph's `RandomVariable`s are pushed down enough to become the inner and/or outer-outputs.  `scan_replace` is only there to check that this has been done sufficiently enough to replace the `Scan`."", 'comment_created': datetime.datetime(2021, 7, 3, 18, 12, 20, tzinfo=datetime.timezone.utc), 'commenter': 'brandonwillard', 'type': 'User'}, {'comment_id': 664886788, 'comment_body': ""`FunctionGraph`s are simple containers that only hold a few `list`s (and sometimes a `dict`), so don't worry too much about creating and discarding them.  The same goes for `ScanArgs`."", 'comment_created': datetime.datetime(2021, 7, 6, 21, 22, 20, tzinfo=datetime.timezone.utc), 'commenter': 'brandonwillard', 'type': 'User'}, {'comment_id': 664887909, 'comment_body': ""This can go in a `utils` module, or, if a lot more code is needed for the `Scan` work, its own module entirely.\r\n\r\nAlso, we should replace Aesara's current `scan_args` with this `ScanArgs`."", 'comment_created': datetime.datetime(2021, 7, 6, 21, 24, 27, tzinfo=datetime.timezone.utc), 'commenter': 'brandonwillard', 'type': 'User'}, {'comment_id': 665079004, 'comment_body': ""I'll make a quick PR for `ScanArgs` in Aesara. "", 'comment_created': datetime.datetime(2021, 7, 7, 6, 28, 43, tzinfo=datetime.timezone.utc), 'commenter': 'kc611', 'type': 'User'}, {'comment_id': 665079307, 'comment_body': 'Did it in https://github.com/aesara-devs/aesara/pull/510', 'comment_created': datetime.datetime(2021, 7, 7, 6, 29, 16, tzinfo=datetime.timezone.utc), 'commenter': 'kc611', 'type': 'User'}, {'comment_id': 684293607, 'comment_body': 'This is not being registered as a Scan node. ', 'comment_created': datetime.datetime(2021, 8, 6, 14, 47, 23, tzinfo=datetime.timezone.utc), 'commenter': 'kc611', 'type': 'User'}, {'comment_id': 684436927, 'comment_body': ""Without this in place, we're assuming that every `Scan` is a `MeasurableScan` (because we turn every `Scan` into one below), but that's not necessarily true.\r\n\r\nWe can apply the `Scan` transforms here and then convert the output into a `MeasurableScan`, or we can attempt to determine if a `Scan` can be transformed and do that later.  The former seems easier, though."", 'comment_created': datetime.datetime(2021, 8, 6, 18, 44, 6, tzinfo=datetime.timezone.utc), 'commenter': 'brandonwillard', 'type': 'User'}, {'comment_id': 684437924, 'comment_body': ""Actually, it looks like we're letting `push_out_rvs_from_scan` run alongside this rewrite, and that should probably produce `MeasurableScan`s.  This makes me think that `check_scan_logprob` might not be necessary at all."", 'comment_created': datetime.datetime(2021, 8, 6, 18, 46, tzinfo=datetime.timezone.utc), 'commenter': 'brandonwillard', 'type': 'User'}, {'comment_id': 687026158, 'comment_body': ""Isn't the mode itself `None` over here ?"", 'comment_created': datetime.datetime(2021, 8, 11, 17, 16, 56, tzinfo=datetime.timezone.utc), 'commenter': 'kc611', 'type': 'User'}, {'comment_id': 687027742, 'comment_body': ""I just threw that in there to be safe, and it might not even be useful.  There are two `Mode` values attached to the `Op`, and I don't think `mode` is the one that's directly used to compile the inner-graph; however, it may be used in some other way."", 'comment_created': datetime.datetime(2021, 8, 11, 17, 19, 22, tzinfo=datetime.timezone.utc), 'commenter': 'brandonwillard', 'type': 'User'}, {'comment_id': 687028717, 'comment_body': ""I think the `rv_remapper` in `joint_logprob` takes care of that no ?\r\n\r\nThe only issue is it doesn't map variables that are not the `var` (i.e. `S_rv` in our test cases). Is that what you meant over here ?"", 'comment_created': datetime.datetime(2021, 8, 11, 17, 20, 40, tzinfo=datetime.timezone.utc), 'commenter': 'kc611', 'type': 'User'}, {'comment_id': 687030101, 'comment_body': ""If we dis-allow this kind of functions we wouldn't need the push-out functionality anymore. Right ? Cause all of the outputs are 'required' to be pushed out by the user himself. This function will just act as a check in that case. "", 'comment_created': datetime.datetime(2021, 8, 11, 17, 22, 37, tzinfo=datetime.timezone.utc), 'commenter': 'kc611', 'type': 'User'}, {'comment_id': 690463108, 'comment_body': 'Marking for convenience. ', 'comment_created': datetime.datetime(2021, 8, 17, 15, 6, 15, tzinfo=datetime.timezone.utc), 'commenter': 'kc611', 'type': 'User'}, {'comment_id': 690887356, 'comment_body': ""I don't believe this should pass, because the output `TensorVariable`s use identity (e.g. `is`) comparisons."", 'comment_created': datetime.datetime(2021, 8, 18, 4, 15, 33, tzinfo=datetime.timezone.utc), 'commenter': 'brandonwillard', 'type': 'User'}, {'comment_id': 690890047, 'comment_body': 'The original ""push-out"" functionality would automatically add `S_t` as an output to a new, reformulated `Scan`, as I recall; however, in our case, that\'s not particularly useful, because we need value variables for all the `MeasurableVariable`s in the model, but there isn\'t a (good) way to specify a value variable for an inner-graph variable like `S_t`.  The reason is that some inner-graph variables like `S_t` don\'t really exist at the user-level; e.g. when they\'re not inner-outputs that map to outer-outputs (outer-outputs are the only thing a user gets back from `aesara.scan`, aside from the updates).\r\n\r\nIn other words, yes, I think you have the right idea.\r\n\r\nThe only way I could see this being done without somehow specifying a value variable for terms like `S_t` is if we never even required value variables.  Instead, these `logprob`-related functions would also return a `dict` mapping `MeasurableVariable`s to value variables that are automatically generated for them when they\'re encountered/created by these rewrite functions.\r\n\r\n@kc611 @ricardoV94, this is an approach we should seriously consider.  It would involve a fundamental change to the way AePPL currently works, but we could do that sort of thing at this point.', 'comment_created': datetime.datetime(2021, 8, 18, 4, 24, 22, tzinfo=datetime.timezone.utc), 'commenter': 'brandonwillard', 'type': 'User'}, {'comment_id': 690895936, 'comment_body': ""> I think the `rv_remapper` in `joint_logprob` takes care of that no ?\r\n\r\nYes, it generally should.\r\n\r\n> The only issue is it doesn't map variables that are not the `var` (i.e. `S_rv` in our test cases). Is that what you meant over here ?\r\n\r\nThe `PreserveRVMappings` feature might not work for variables that aren't the literal inputs/outputs of a replacement.  I believe that was one of my concerns.  That might not be an issue, though.  We really need to set up some example and work through them to find out.\r\n"", 'comment_created': datetime.datetime(2021, 8, 18, 4, 42, 4, tzinfo=datetime.timezone.utc), 'commenter': 'brandonwillard', 'type': 'User'}, {'comment_id': 690908206, 'comment_body': ""It looks like [the current issue](https://github.com/aesara-devs/aeppl/pull/24/checks?check_run_id=3357658699#step:6:256) actually _is_ due to `PreserveRVMappings` not handling every variable that was replaced.\r\n\r\nIn this particular case, `PreserveRVMappings.on_change_input` is only ever called with `r` (i.e. the variable being replaced) equal to `Y_rv`.  This is because the `FunctionGraph` that's being used has only one output: `Y_rv`.  The second output of the `Scan` is `S_rv` and the test fails when that output appears in the `joint_logprob` loop.\r\n\r\nIf `PreserveRVMappings.on_change_input` were called with `r` equal to `S_rv` and `new_r` equal to the corresponding new output produced by `push_out_rvs_from_scan`, this problem wouldn't appear.\r\n\r\nWe might be able to add all the random variables as outputs to the `fgraph` created in `joint_logprob` and get this to work.  That would guarantee that `PreserveRVMappings.on_change_input` would be called for each one."", 'comment_created': datetime.datetime(2021, 8, 18, 5, 17, 7, tzinfo=datetime.timezone.utc), 'commenter': 'brandonwillard', 'type': 'User'}, {'comment_id': 690909880, 'comment_body': ""I've just added a fix to that effect."", 'comment_created': datetime.datetime(2021, 8, 18, 5, 21, 54, tzinfo=datetime.timezone.utc), 'commenter': 'brandonwillard', 'type': 'User'}, {'comment_id': 691421689, 'comment_body': ""I think that's how `symbolic-pymc` originally used to calculate the log-probability of Scan ops, no?\r\n\r\nhttps://github.com/pymc-devs/symbolic-pymc/blob/84e8d612c714f502f8d188c1766498f4ff7beecf/symbolic_pymc/theano/pymc3.py#L176-L177"", 'comment_created': datetime.datetime(2021, 8, 18, 16, 33, 49, tzinfo=datetime.timezone.utc), 'commenter': 'kc611', 'type': 'User'}, {'comment_id': 691423842, 'comment_body': ""> I think that's how `symbolic-pymc` originally used to calculate the log-probability of Scan ops, no?\r\n\r\nYeah, as I recall."", 'comment_created': datetime.datetime(2021, 8, 18, 16, 36, 37, tzinfo=datetime.timezone.utc), 'commenter': 'brandonwillard', 'type': 'User'}, {'comment_id': 694997565, 'comment_body': 'Temporarily changed `RandomStreams` to shared `Generators` for the current development run/testing purposes.', 'comment_created': datetime.datetime(2021, 8, 24, 16, 8, 8, tzinfo=datetime.timezone.utc), 'commenter': 'kc611', 'type': 'User'}, {'comment_id': 695000954, 'comment_body': ""This is where we should be passing the processed value of corresponding RV node using `new_outer_input_vars`. Issue is how do we make sure that each iteration of `Scan` in its `n_step`s of iterations receives the correct value from this array of value ?  (i.e. we'll probably need to modify the above `taps` logic for that which will correctly pass the values for each output node as a `seq` type input.)"", 'comment_created': datetime.datetime(2021, 8, 24, 16, 12, 6, tzinfo=datetime.timezone.utc), 'commenter': 'kc611', 'type': 'User'}, {'comment_id': 695001718, 'comment_body': ""We'll probably need a call to `joint_logprob` here rather than `_logprob`. "", 'comment_created': datetime.datetime(2021, 8, 24, 16, 13, 4, tzinfo=datetime.timezone.utc), 'commenter': 'kc611', 'type': 'User'}, {'comment_id': 695104783, 'comment_body': ""No problem; I don't think there's a strict requirement for either one, but both should be expected to work (although the `assert`s may need to change in response)."", 'comment_created': datetime.datetime(2021, 8, 24, 18, 35, 30, tzinfo=datetime.timezone.utc), 'commenter': 'brandonwillard', 'type': 'User'}, {'comment_id': 695123098, 'comment_body': 'Yeah, there are some design questions/issues with `convert_outer_out_to_in` and multiple value variables.  \r\n\r\nI believe `convert_outer_out_to_in` I designed to work with one value variable at a time via the `ScanArgs` (i.e. one would mutate the `ScanArgs` in-place for each random variable that\'s being replaced).\r\n\r\nIt should repurpose the original `Scan` so that each new value variable is a new outer-input and&mdash;thus&mdash;has a corresponding inner-input ""slice""/""scalar"".  All the `taps` logic should be handled by that existing logic, as long as the value variable replacements we use are correct.\r\n\r\nThese replacements probably need to be the un-`*Subtensor*`ed tensors, and not the ones returned by `aesara.scan`, which cut off the initial values via `*Subtensor*` slices.', 'comment_created': datetime.datetime(2021, 8, 24, 19, 1, 24, tzinfo=datetime.timezone.utc), 'commenter': 'brandonwillard', 'type': 'User'}]","[{'commit_sha': '76412053abf0ae6b913279fca9f44b9dc1941fb8', 'committer_username': 'brandonwillard', 'committer_name': 'Brandon T. Willard', 'committer_email': None, 'commit_date': datetime.datetime(2011, 8, 10, 14, 19, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bdfb4c8e805fce72807204226398b547d2ac84a9', 'committer_username': 'kc611', 'committer_name': 'Kaustubh', 'committer_email': 'ckaustubhm06@gmail.com', 'commit_date': datetime.datetime(2019, 9, 15, 13, 33, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7dd1b29fab3970078c28792ef4fe30a32bf1d788', 'committer_username': 'brandonwillard', 'committer_name': 'Brandon T. Willard', 'committer_email': None, 'commit_date': datetime.datetime(2011, 8, 10, 14, 19, 12, tzinfo=datetime.timezone.utc)}]",Kaustubh,55352418,ckaustubhm06@gmail.com,User,,57,,48,65
698777329,Integration of `aeppl` with PyMC,"This PR refactors PyMC's `_logp` framework to be able to use `aeppl`'s `joint_logprob` framework. 

The changes this PR aims to make:

- [x] Registering the Log-probability functions of PyMC's distributions on `_logprob` instead of `_logp` so that `joint_logprob` can use them internally.
- [x] Separating `log-cdf` logic handling from `logp` logic (currently both are being handled in the same `logpt` function)
- [x] Removing redundant `logp` from Distribution classes (since `_logprob` registration present in `aeppl, for e.g. `NormalRV`)
- [x] Calling `factorized_joint_logprob` inside `logpt` function. and then return the appropriate RVs (since `joint_logprob` tends to return all of the RV's `logp` present in the graph)
- [x] Switching from `pymc`'s transforms to `aeppl`'s transforms.
  - [x] Refactor `transforms.py` and remove transforms already present in `aeppl`
  - [x] Updating transform related logic to match `aeppl`'s. 
  - [x] Passing transforms to `joint_logprob` correctly
  - [x] Refactoring `test_transforms.py`
- [x] Investigate test failures.
  - [x] test_distributions failures. 
  - [x] `test_transforms.py` test failures. 
  - [x] `test_logprob` failures.",True,4887,https://api.github.com/repos/pymc-devs/pymc/pulls/4887,https://github.com/pymc-devs/pymc/pull/4887,closed,595,1095,40,1,23,79,3,2,"[{'name': 'enhancements'}, {'name': 'v4'}, {'name': 'pytensor'}]",2021-07-28 15:04:49+00:00,2021-10-23 10:14:42+00:00,7499393.0,"86 days, 19:09:53","[{'comment_id': 678397888, 'comment_body': ""This way the `Op`s with no registered logp's in PyMC can 'fall back' to their aeppl implementation and can be replaced with appropriate RVs (For instance the current Mixture will be a `Subtensor` later replaced by `MixtureRV` and also the upcoming `Scan` which will be replaced by `ScanRV` )\r\n\r\nIs this a good entry point for `joint_logprob`? cc @brandonwillard  "", 'comment_created': datetime.datetime(2021, 7, 28, 15, 11, 32, tzinfo=datetime.timezone.utc), 'commenter': 'kc611', 'type': 'User'}, {'comment_id': 678401173, 'comment_body': ""Here we'll need to take care of the `size` argument passed to the Mixture distribution itself. "", 'comment_created': datetime.datetime(2021, 7, 28, 15, 14, 54, tzinfo=datetime.timezone.utc), 'commenter': 'kc611', 'type': 'User'}, {'comment_id': 678404493, 'comment_body': ""Something like that could work for now, but keep on mind that we'll probably want to entirely remove this module at some point after the integration is established."", 'comment_created': datetime.datetime(2021, 7, 28, 15, 18, 30, tzinfo=datetime.timezone.utc), 'commenter': 'brandonwillard', 'type': 'User'}, {'comment_id': 679979990, 'comment_body': ""For some reason these aren't being registered onto `_logprob`."", 'comment_created': datetime.datetime(2021, 7, 30, 14, 42, 18, tzinfo=datetime.timezone.utc), 'commenter': 'kc611', 'type': 'User'}, {'comment_id': 680099950, 'comment_body': ""We shouldn't need these anymore, right?  The functionality should already be covered by AePPL."", 'comment_created': datetime.datetime(2021, 7, 30, 17, 10, 21, tzinfo=datetime.timezone.utc), 'commenter': 'brandonwillard', 'type': 'User'}, {'comment_id': 687586754, 'comment_body': 'Separated the `logcdf` and `logp` frameworks since down the line we can expect changes to `logpt` function when `joint_logprob` supports the transforms being passed to it. (And the difference between the logic for handling one thing or other will increase)', 'comment_created': datetime.datetime(2021, 8, 12, 10, 26, 31, tzinfo=datetime.timezone.utc), 'commenter': 'kc611', 'type': 'User'}, {'comment_id': 687588224, 'comment_body': 'This was required since `joint_logprob` will simply ignore the RandomVariables which are not in the `rvs_to_values` list. Plus the transforms are not fully supported hence we still have to do the replacement logic below. (L-160 to L-167)', 'comment_created': datetime.datetime(2021, 8, 12, 10, 28, 52, tzinfo=datetime.timezone.utc), 'commenter': 'kc611', 'type': 'User'}, {'comment_id': 699586154, 'comment_body': 'Made a call to `joint_logprob` using transforms mapping. ', 'comment_created': datetime.datetime(2021, 8, 31, 18, 44, 59, tzinfo=datetime.timezone.utc), 'commenter': 'kc611', 'type': 'User'}, {'comment_id': 712552535, 'comment_body': 'You need to add this to the conda test and dev env, as this is auto-generated.', 'comment_created': datetime.datetime(2021, 9, 20, 22, 18, 19, tzinfo=datetime.timezone.utc), 'commenter': 'twiecki', 'type': 'User'}, {'comment_id': 712556820, 'comment_body': '```suggestion\n        logp = _logprob(normal, (value,), None, None, None, mu, sigma) - norm\n```\nSeems less error prone, same for others below.', 'comment_created': datetime.datetime(2021, 9, 20, 22, 27, 58, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 712557384, 'comment_body': ""```suggestion\n```\nI might be wrong but I don't think we are using this anymore"", 'comment_created': datetime.datetime(2021, 9, 20, 22, 29, 7, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 712558623, 'comment_body': 'Not sure about this one. Why did you add it?\n\nI would guess an exception might be better', 'comment_created': datetime.datetime(2021, 9, 20, 22, 31, 49, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 712560387, 'comment_body': ""```suggestion\n            tmp_rvs_to_values[curr_var] = rv_value\n            tmp_values_to_rvs[rv_value] = curr_var\n```\nThen you don't need the list of keys thing in the loop below"", 'comment_created': datetime.datetime(2021, 9, 20, 22, 36, 3, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 712561320, 'comment_body': ""```suggestion\n    scaling: bool = True,\n    sum: bool = False,\n```\n\nI don't think those 2 ever make sense for cdfs\n"", 'comment_created': datetime.datetime(2021, 9, 20, 22, 37, 59, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 712564455, 'comment_body': '```suggestion\nfrom aeppl import transforms\n```\n', 'comment_created': datetime.datetime(2021, 9, 20, 22, 45, 6, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 712565324, 'comment_body': 'We probably want to make the aeppl transforms available here for PyMC3 users', 'comment_created': datetime.datetime(2021, 9, 20, 22, 47, 14, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 712876994, 'comment_body': ""Ah okay, I added that because the `BART` class wasn't dispatching according to `NoDistribution`s `logp` so had to add that separately like this. "", 'comment_created': datetime.datetime(2021, 9, 21, 9, 46, 2, tzinfo=datetime.timezone.utc), 'commenter': 'kc611', 'type': 'User'}, {'comment_id': 713489633, 'comment_body': ""Let's set upper bounds on the minor version number and conciously update instead of getting surprised by breaking changes."", 'comment_created': datetime.datetime(2021, 9, 21, 23, 37, 22, tzinfo=datetime.timezone.utc), 'commenter': 'michaelosthege', 'type': 'User'}, {'comment_id': 713518633, 'comment_body': 'Why? Can we add a comment?', 'comment_created': datetime.datetime(2021, 9, 22, 1, 5, 27, tzinfo=datetime.timezone.utc), 'commenter': 'michaelosthege', 'type': 'User'}, {'comment_id': 713518979, 'comment_body': 'Is this on purpose?', 'comment_created': datetime.datetime(2021, 9, 22, 1, 6, 38, tzinfo=datetime.timezone.utc), 'commenter': 'michaelosthege', 'type': 'User'}, {'comment_id': 713520235, 'comment_body': 'Short explanation maybe? (same as above)', 'comment_created': datetime.datetime(2021, 9, 22, 1, 10, 33, tzinfo=datetime.timezone.utc), 'commenter': 'michaelosthege', 'type': 'User'}, {'comment_id': 713522500, 'comment_body': 'TODO replace 0 with None', 'comment_created': datetime.datetime(2021, 9, 22, 1, 18, 21, tzinfo=datetime.timezone.utc), 'commenter': 'michaelosthege', 'type': 'User'}, {'comment_id': 713523027, 'comment_body': 'If `value_var` is not the `value_var`, it should not be called `value_var` in the first place.\r\n(On one side of the `=` it should say something else than `value_var`.)', 'comment_created': datetime.datetime(2021, 9, 22, 1, 20, 20, tzinfo=datetime.timezone.utc), 'commenter': 'michaelosthege', 'type': 'User'}, {'comment_id': 713523526, 'comment_body': 'The existence of this method is not in line with actual distributions where this stuff is done through `pm.logp`.\r\nCan it be dispatched?\r\n**EDIT: ** It looks like it _is_ dispatched below?\r\n\r\nAlso the docstring does not account for all parameters.', 'comment_created': datetime.datetime(2021, 9, 22, 1, 21, 47, tzinfo=datetime.timezone.utc), 'commenter': 'michaelosthege', 'type': 'User'}, {'comment_id': 713524243, 'comment_body': 'Same thing with the `value_var` variable name. (mypy would also complain about it, because overwriting the variable name changes the type...)', 'comment_created': datetime.datetime(2021, 9, 22, 1, 24, 1, tzinfo=datetime.timezone.utc), 'commenter': 'michaelosthege', 'type': 'User'}, {'comment_id': 713524931, 'comment_body': '```suggestion\r\n    # Recompute test values for the changes introduced by the replacements above.\r\n    if config.compute_test_value != ""off"":\r\n        for node in io_toposort(graph_inputs((logp_var,)), (logp_var,)):\r\n            compute_test_value(node)\r\n\r\n    if var.name is not None:\r\n        logp_var.name = f""__logp_{var.name}""\r\n```', 'comment_created': datetime.datetime(2021, 9, 22, 1, 26, 27, tzinfo=datetime.timezone.utc), 'commenter': 'michaelosthege', 'type': 'User'}, {'comment_id': 713526229, 'comment_body': 'remove?', 'comment_created': datetime.datetime(2021, 9, 22, 1, 30, 25, tzinfo=datetime.timezone.utc), 'commenter': 'michaelosthege', 'type': 'User'}, {'comment_id': 716031951, 'comment_body': 'Is this an `aeppl` constraint ?\r\n', 'comment_created': datetime.datetime(2021, 9, 25, 11, 50, 57, tzinfo=datetime.timezone.utc), 'commenter': 'kc611', 'type': 'User'}, {'comment_id': 716032142, 'comment_body': 'This might need further investigation. The tests do pass for the value checks below but not for these dimension checks. ', 'comment_created': datetime.datetime(2021, 9, 25, 11, 52, 37, tzinfo=datetime.timezone.utc), 'commenter': 'kc611', 'type': 'User'}, {'comment_id': 716545146, 'comment_body': ""Don't all other logps take symbolic x too?"", 'comment_created': datetime.datetime(2021, 9, 27, 10, 3, 55, tzinfo=datetime.timezone.utc), 'commenter': 'michaelosthege', 'type': 'User'}, {'comment_id': 716566657, 'comment_body': 'The new kwarg is missing from the docstring', 'comment_created': datetime.datetime(2021, 9, 27, 10, 34, 47, tzinfo=datetime.timezone.utc), 'commenter': 'michaelosthege', 'type': 'User'}, {'comment_id': 716566971, 'comment_body': 'ToDo', 'comment_created': datetime.datetime(2021, 9, 27, 10, 35, 18, tzinfo=datetime.timezone.utc), 'commenter': 'michaelosthege', 'type': 'User'}, {'comment_id': 716569089, 'comment_body': 'It would be great to have comments explaining what these next code blocks are about. (Also for blocks above.)', 'comment_created': datetime.datetime(2021, 9, 27, 10, 38, 43, tzinfo=datetime.timezone.utc), 'commenter': 'michaelosthege', 'type': 'User'}, {'comment_id': 716569366, 'comment_body': '```suggestion\r\n    # Recompute test values for the changes introduced by the replacements above.\r\n```', 'comment_created': datetime.datetime(2021, 9, 27, 10, 39, 7, tzinfo=datetime.timezone.utc), 'commenter': 'michaelosthege', 'type': 'User'}, {'comment_id': 716569599, 'comment_body': '```suggestion\r\n        logp_var.name = f""__logp_{var.name}""\r\n```', 'comment_created': datetime.datetime(2021, 9, 27, 10, 39, 29, tzinfo=datetime.timezone.utc), 'commenter': 'michaelosthege', 'type': 'User'}, {'comment_id': 716570662, 'comment_body': 'To include it where?\r\n\r\nAlso is this kwarg even used somewhere?', 'comment_created': datetime.datetime(2021, 9, 27, 10, 41, 3, tzinfo=datetime.timezone.utc), 'commenter': 'michaelosthege', 'type': 'User'}, {'comment_id': 716571170, 'comment_body': 'ToDo', 'comment_created': datetime.datetime(2021, 9, 27, 10, 41, 46, tzinfo=datetime.timezone.utc), 'commenter': 'michaelosthege', 'type': 'User'}, {'comment_id': 716571994, 'comment_body': 'Maybe add an alias, or a placeholder class `Transform` for printing migration instructions?', 'comment_created': datetime.datetime(2021, 9, 27, 10, 43, 6, tzinfo=datetime.timezone.utc), 'commenter': 'michaelosthege', 'type': 'User'}, {'comment_id': 716636177, 'comment_body': ""From the text here I don't understand what this means.\r\n\r\nCan you open a corresponding issue?"", 'comment_created': datetime.datetime(2021, 9, 27, 12, 19, 58, tzinfo=datetime.timezone.utc), 'commenter': 'michaelosthege', 'type': 'User'}, {'comment_id': 716636773, 'comment_body': 'ToDo (convert to issue?)', 'comment_created': datetime.datetime(2021, 9, 27, 12, 20, 45, tzinfo=datetime.timezone.utc), 'commenter': 'michaelosthege', 'type': 'User'}, {'comment_id': 716637278, 'comment_body': 'Another ToDo', 'comment_created': datetime.datetime(2021, 9, 27, 12, 21, 22, tzinfo=datetime.timezone.utc), 'commenter': 'michaelosthege', 'type': 'User'}, {'comment_id': 716638383, 'comment_body': ""`interval` is a type? That's unexpected from a lowercase name =/"", 'comment_created': datetime.datetime(2021, 9, 27, 12, 22, 55, tzinfo=datetime.timezone.utc), 'commenter': 'michaelosthege', 'type': 'User'}, {'comment_id': 716639456, 'comment_body': 'Does that mean the circular transform is broken?', 'comment_created': datetime.datetime(2021, 9, 27, 12, 24, 32, tzinfo=datetime.timezone.utc), 'commenter': 'michaelosthege', 'type': 'User'}, {'comment_id': 716645341, 'comment_body': 'Specifically which new `kwarg` are you talking about ?', 'comment_created': datetime.datetime(2021, 9, 27, 12, 32, 45, tzinfo=datetime.timezone.utc), 'commenter': 'kc611', 'type': 'User'}, {'comment_id': 716646221, 'comment_body': '`jacobian` is being passed onto `factorized_joint_logprob` below. The functionality was recently added into `aeppl`. ', 'comment_created': datetime.datetime(2021, 9, 27, 12, 33, 55, tzinfo=datetime.timezone.utc), 'commenter': 'kc611', 'type': 'User'}, {'comment_id': 716647028, 'comment_body': ""There's already an issue running regarding this: https://github.com/pymc-devs/pymc3/issues/5023"", 'comment_created': datetime.datetime(2021, 9, 27, 12, 35, 4, tzinfo=datetime.timezone.utc), 'commenter': 'kc611', 'type': 'User'}, {'comment_id': 716648132, 'comment_body': 'Maybe. Otherwise the better way to do this would probably be to use a corresponding value variable while constructing the log probability graph and then passing the actual values onto the `.eval()`. Rather than directly passing those value. ', 'comment_created': datetime.datetime(2021, 9, 27, 12, 36, 36, tzinfo=datetime.timezone.utc), 'commenter': 'kc611', 'type': 'User'}, {'comment_id': 716650043, 'comment_body': ""It already is the case, no ?\r\n\r\nhttps://github.com/pymc-devs/pymc3/blob/8ae296bdf3ee58850824c9997293803d2df958ec/pymc/distributions/transforms.py#L224\r\n\r\nIt's just that the actual name of the class went from `Interval` to `IntervalTransform`"", 'comment_created': datetime.datetime(2021, 9, 27, 12, 38, 58, tzinfo=datetime.timezone.utc), 'commenter': 'kc611', 'type': 'User'}, {'comment_id': 716652481, 'comment_body': ""Oh this one can just be removed. I didn't know what the significance of this line https://github.com/pymc-devs/pymc3/blob/8ae296bdf3ee58850824c9997293803d2df958ec/pymc/distributions/simulator.py#L220 was. I just changed it to it's new corresponding form. "", 'comment_created': datetime.datetime(2021, 9, 27, 12, 41, 58, tzinfo=datetime.timezone.utc), 'commenter': 'kc611', 'type': 'User'}, {'comment_id': 716654244, 'comment_body': ""Yes they do, I'll change this doc-string accordingly. "", 'comment_created': datetime.datetime(2021, 9, 27, 12, 44, 6, tzinfo=datetime.timezone.utc), 'commenter': 'kc611', 'type': 'User'}, {'comment_id': 716656636, 'comment_body': ""This particular case was because `factorized_joint_logprob` returns an empty dictionary when there are no logp graph where-as PyMC expects it to be `None`. Hence this shortcut. Regardless you're right, I should probably add such information as comments."", 'comment_created': datetime.datetime(2021, 9, 27, 12, 46, 59, tzinfo=datetime.timezone.utc), 'commenter': 'kc611', 'type': 'User'}, {'comment_id': 716657742, 'comment_body': 'This was discussed during the call. We should probably open an issue regarding this. ', 'comment_created': datetime.datetime(2021, 9, 27, 12, 48, 21, tzinfo=datetime.timezone.utc), 'commenter': 'kc611', 'type': 'User'}, {'comment_id': 717638027, 'comment_body': 'CC @ricardoV94 ', 'comment_created': datetime.datetime(2021, 9, 28, 14, 28, 2, tzinfo=datetime.timezone.utc), 'commenter': 'kc611', 'type': 'User'}, {'comment_id': 719407372, 'comment_body': 'The sum kwarg', 'comment_created': datetime.datetime(2021, 9, 30, 13, 29, 38, tzinfo=datetime.timezone.utc), 'commenter': 'michaelosthege', 'type': 'User'}, {'comment_id': 723155535, 'comment_body': 'Can this raise a NotImplementedError?', 'comment_created': datetime.datetime(2021, 10, 6, 11, 40, 16, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 726085267, 'comment_body': 'Can you explain a bit of what you are doing here? Where there duplicated variables in graphs with IncSubtensors?', 'comment_created': datetime.datetime(2021, 10, 11, 12, 46, 19, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 726089780, 'comment_body': 'Also add an alias to the hold `stick_breaking`, with a deprecation warning (will have to subclass Simplex I think)', 'comment_created': datetime.datetime(2021, 10, 11, 12, 52, 1, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 726092260, 'comment_body': '```suggestion\r\n    @pytest.mark.xfail(\r\n        reason=""Fails due to brittle parametrization triggering numpy domain check in RandomVariable, see #5023""\r\n    )\r\n```', 'comment_created': datetime.datetime(2021, 10, 11, 12, 55, 23, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 726092942, 'comment_body': 'Can we revert these changes?', 'comment_created': datetime.datetime(2021, 10, 11, 12, 56, 14, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 726093191, 'comment_body': ""No point in changing things if it's still an x-fail"", 'comment_created': datetime.datetime(2021, 10, 11, 12, 56, 32, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 726094797, 'comment_body': ""Let's revert this one"", 'comment_created': datetime.datetime(2021, 10, 11, 12, 58, 34, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 726095342, 'comment_body': ""Let's open an issue to track this one"", 'comment_created': datetime.datetime(2021, 10, 11, 12, 59, 16, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 726095510, 'comment_body': 'Same here', 'comment_created': datetime.datetime(2021, 10, 11, 12, 59, 31, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 726096044, 'comment_body': ""Let's open an issue for tracking this"", 'comment_created': datetime.datetime(2021, 10, 11, 13, 0, 13, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 726098963, 'comment_body': 'I think so. For instance constants may have the same hash (no idea if they do), which would lead to issues in our dict output. Anyway this seems fine.', 'comment_created': datetime.datetime(2021, 10, 11, 13, 4, 6, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 728908852, 'comment_body': ""This failure happens with current `aeppl` version. We should probably open up an issue for this. The output values are losing precision somewhere along the chain transform. (It's a values deviation of about `10^-6` from expected)"", 'comment_created': datetime.datetime(2021, 10, 14, 11, 57, 16, tzinfo=datetime.timezone.utc), 'commenter': 'kc611', 'type': 'User'}, {'comment_id': 728910926, 'comment_body': ""No, essentially we don't have the shortcut which returned the same value in the `Stickbreaking`/`Simplex` transform in `aeppl` anymore for a particular case. And I don't think we'd should be doing that until we absolutely need to.  \r\n\r\nhttps://github.com/pymc-devs/pymc/blob/a8b475425f3cfe226043242cf0551eaeaf224cb2/pymc/distributions/transforms.py#L289-L292"", 'comment_created': datetime.datetime(2021, 10, 14, 12, 0, 13, tzinfo=datetime.timezone.utc), 'commenter': 'kc611', 'type': 'User'}, {'comment_id': 729189132, 'comment_body': ""This is expected for transformations whose inverse is not completely undone by the aesara rewrites. Do open an issue. I wanted to investigate it, but didn't have the time yet"", 'comment_created': datetime.datetime(2021, 10, 14, 17, 17, 49, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 729925339, 'comment_body': 'The tests end up raising that error. (During sampling from a model containing `BART`). Here is an exampe stack trace\r\n\r\n```\r\npymc/sampling.py:500: in sample\r\n    step = assign_step_methods(model, step, step_kwargs=kwargs)\r\npymc/sampling.py:219: in assign_step_methods\r\n    return instantiate_steppers(model, steps, selected_steps, step_kwargs)\r\npymc/sampling.py:143: in instantiate_steppers\r\n    step = step_class(vars=vars, model=model, **args)\r\npymc/bart/pgbart.py:184: in __init__\r\n    self.likelihood_logp = logp(initial_values, [model.datalogpt], vars, shared)\r\npymc/model.py:825: in datalogpt\r\n    obs_factors = logpt(self.observed_RVs, obs_values)\r\npymc/distributions/logprob.py:228: in logpt\r\n    tmp_rvs_to_values, extra_rewrites=transform_opt, use_jacobian=jacobian, **kwargs\r\n/home/kc611/anaconda3/envs/pymcv4/lib/python3.7/site-packages/aeppl/joint_logprob.py:190: in factorized_joint_logprob\r\n    **kwargs,\r\n/home/kc611/anaconda3/envs/pymcv4/lib/python3.7/functools.py:840: in wrapper\r\n    return dispatch(args[0].__class__)(*args, **kw)\r\npymc/bart/bart.py:181: in logp\r\n    return BART.logp(value_var, *_dist_params)\r\npymc/bart/bart.py:163: NotImplementedError()\r\n```\r\n\r\nIs this preventable ? ', 'comment_created': datetime.datetime(2021, 10, 15, 15, 34, 5, tzinfo=datetime.timezone.utc), 'commenter': 'kc611', 'type': 'User'}, {'comment_id': 733339071, 'comment_body': ""Not a blocker, but shouldn't this go into Aesara?"", 'comment_created': datetime.datetime(2021, 10, 21, 5, 51, 47, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 733339533, 'comment_body': 'What happened to these conditions?', 'comment_created': datetime.datetime(2021, 10, 21, 5, 52, 55, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 733802454, 'comment_body': ""Giving invalid parameters to a distribution now raises an `AsserionError` from `aeppl` (From the `assert` statements in each `logp` so this will no longer give infinite values). Plus the invalid values are being tested in `aeppl` so I didn't see a point adding such a test in PyMC."", 'comment_created': datetime.datetime(2021, 10, 21, 15, 32, 28, tzinfo=datetime.timezone.utc), 'commenter': 'kc611', 'type': 'User'}, {'comment_id': 733804352, 'comment_body': ""That is supposed to be just a temporary pass-through for `Assert` Op since Jax doesn't allow asserts in it's code. Though you're right we should be adding this functionality (maybe with a good workaround) in Aesara, I'll open an issue for this. "", 'comment_created': datetime.datetime(2021, 10, 21, 15, 34, 58, tzinfo=datetime.timezone.utc), 'commenter': 'kc611', 'type': 'User'}, {'comment_id': 733833776, 'comment_body': '@ricardoV94 is this is right way to test that issue ?', 'comment_created': datetime.datetime(2021, 10, 21, 16, 9, 14, tzinfo=datetime.timezone.utc), 'commenter': 'kc611', 'type': 'User'}, {'comment_id': 733834934, 'comment_body': ""~I think that's good, it fails on main locally!~\r\n\r\nI would add a comment referencing the relevant Github issue for context"", 'comment_created': datetime.datetime(2021, 10, 21, 16, 10, 40, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 733836933, 'comment_body': ""Nevermind, it's not that as it passes on main"", 'comment_created': datetime.datetime(2021, 10, 21, 16, 13, 7, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 733844519, 'comment_body': 'I pushed a test that passes now and fails on main', 'comment_created': datetime.datetime(2021, 10, 21, 16, 22, 1, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 734890481, 'comment_body': ""Disclaimer: I skimmed the discussion and have not reviewed the code\r\n\r\nWhat does this dependency mean for the users? Will using aeppl functions/methods be necessary? Or will it be handled under the hood and advanced users will be able to use it if they want?\r\n\r\nThis is a minor-medium concern for the beta release, but aeppl seems to be very little documented. I was unable to find the _link_ to it's docs anywhere. I also did check and saw there was a `gh-pages` branch so I went to https://aesara-devs.github.io/aeppl/ which has some api docs. We need to work on aeppl docs if we expect pymc **users** to work with it directly before releasing stable 4.0"", 'comment_created': datetime.datetime(2021, 10, 22, 23, 36, 43, tzinfo=datetime.timezone.utc), 'commenter': 'OriolAbril', 'type': 'User'}, {'comment_id': 734938817, 'comment_body': ""Users don't need to know about aeppl, it will be used by us developers to create more complex distributions.\n\nIndeed we need documentation building on aeppl, we have a PR opened for that, but we welcome help. All our methods and functions are quite well documented on the other hand"", 'comment_created': datetime.datetime(2021, 10, 23, 7, 47, 16, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}]","[{'commit_sha': 'a8545150639a9fb9246aac96612e875ce158a891', 'committer_username': 'kc611', 'committer_name': 'Kaustubh', 'committer_email': 'ckaustubhm06@gmail.com', 'commit_date': datetime.datetime(2019, 9, 15, 13, 33, 26, tzinfo=datetime.timezone.utc)}]",Kaustubh,55352418,ckaustubhm06@gmail.com,User,,57,,48,65
683039479,Add support for `Scan` `Op`s in `joint_logprob`,"This PR aims to implements `logprob` for Scan Ops. Linked Issue: #23 

```python
import aesara
import aesara.tensor as at


k = at.iscalar(""k"")

Y_rv, _ = aesara.scan(
    fn=lambda Y_tm1: Y_tm1 + at.random.normal(name=""Y_t""),
    outputs_info=[{""initial"": at.as_tensor([0.0]), ""taps"": [-1]}],
    n_steps=k,
    name=""Y""
)

y_vv = Y_rv.clone()
y_vv.name = ""y""

logp = joint_logprob(Y_rv, {Y_rv: y_vv})
```

Note : I am building this on top of replacement logic from #19 

***

- [x] Setting up a general `Scan` replacement framework from `symbolic-pymc`.
- [x] Calculating log-probability for Scan's output arguments 'all-at-once' in `logprob_ScanRV`.
  - [x] Passing proper values to `convert_outer_out_to_in` from `logprob_ScanRV`
  - [x] Using the `new_outer_input_vars` mapping to act as values for log probability of respective inner-graph output nodes.
    - [x] Figure out how to split `value` of each node according to iterations of Scan. (i.e. taps logic)
    - [x] Calculating joint-log-probability in `create_inner_out_logp` instead of a normal `_logprob` call for each node involved.
- [x] Investigating and handling test failures/unexpected behaviors.
   - [x] Find out cause of test failure in `test_scan_logprob`
   - [x] Figuring out how to handle `RandomStream` updates in Aesara's `FunctionGraphs` so that they do not require explicit handling in `aeppl` ",True,24,https://api.github.com/repos/aesara-devs/aeppl/pulls/24,https://github.com/aesara-devs/aeppl/pull/24,closed,928,7,5,3,12,31,2,1,"[{'name': 'enhancement'}, {'name': 'important'}]",2021-07-03 15:27:01+00:00,2021-10-06 02:26:11+00:00,8161150.0,"94 days, 10:59:10","[{'comment_id': 663377555, 'comment_body': 'So as my first try I did something similar to what we do with `MixtureRV`. \r\n\r\nThis replacement gets stuck in some long \'optimization\' computation.  I\'m not even sure if this logic will be able to handle ""Push-down"" correctly, since were basically converting Scan node to an `ScanRV` with just the `RV` inputs. ', 'comment_created': datetime.datetime(2021, 7, 3, 15, 29, 22, tzinfo=datetime.timezone.utc), 'commenter': 'kc611', 'type': 'User'}, {'comment_id': 663377733, 'comment_body': ""Is there a way we can get the Scan's inner graph as `FunctionGraph` so we can walk that instead of each output node. "", 'comment_created': datetime.datetime(2021, 7, 3, 15, 31, 17, tzinfo=datetime.timezone.utc), 'commenter': 'kc611', 'type': 'User'}, {'comment_id': 663388507, 'comment_body': 'Are you referring to the output nodes of the inner-graph?', 'comment_created': datetime.datetime(2021, 7, 3, 17, 22, 44, tzinfo=datetime.timezone.utc), 'commenter': 'brandonwillard', 'type': 'User'}, {'comment_id': 663390744, 'comment_body': ""Actually, here you can use `aesara.graph.basic.io_toposort` on the inner-inputs and inner-outputs (see [here](https://github.com/pymc-devs/symbolic-pymc/blob/master/symbolic_pymc/theano/opt.py#L575) for an example in this exact context).  To get the inner-inputs and inner-outputs, you can use the `symbolic_pymc.theano.opt.ScanArgs` helper-class.  There's already a `scan_args` in Aesara upon which `ScanArgs` is based, but we should really replace it with `ScanArgs`.\r\n\r\nOnce you have a `ScanArgs` instance, you can get all the parts of a `Scan` `Op` much more easily.  For instance, the `.inner_outputs` property will give you a list of the inner-outputs."", 'comment_created': datetime.datetime(2021, 7, 3, 17, 46, 1, tzinfo=datetime.timezone.utc), 'commenter': 'brandonwillard', 'type': 'User'}, {'comment_id': 663391681, 'comment_body': ""Remember, this example requires a convolution rewrite that isn't present yet.  Also, this example will return the same `at.random.normal` for every iteration.\r\n\r\nLet's start with a simpler example that doesn't require any other rewrites; that will allow us to create and check the log-probability steps.\r\n\r\nFor example:\r\n```python\r\nsrng = at.random.RandomStream()\r\nresult, _ = aesara.scan(lambda mu: srng.normal(mu, 1e-3), sequences=[at.pow(10, at.arange(k))])\r\n```\r\n\r\nThat will create a graph that is equivalent to `at.random.normal(at.pow(10, at.arange(k)), 1e-3)`.\r\n\r\nNB: There are some `Scan` rewrites that perform optimizations like this, but I don't think they apply to this case, because `at.random.normal` doesn't produce an `Elemwise`.  Regardless, at some point we should have these kinds of things in place, but, even if we did have them, we would want to disable them so that this extremely simple test could be used."", 'comment_created': datetime.datetime(2021, 7, 3, 17, 55, 26, tzinfo=datetime.timezone.utc), 'commenter': 'brandonwillard', 'type': 'User'}, {'comment_id': 663392698, 'comment_body': ""Yeah like making an entire temporary fgraph just to walk it through to find RV's seems a little bit redundant. Is there a better way to detect the RVs."", 'comment_created': datetime.datetime(2021, 7, 3, 18, 7, 24, tzinfo=datetime.timezone.utc), 'commenter': 'kc611', 'type': 'User'}, {'comment_id': 663393186, 'comment_body': ""The replacement performed by `scan_replace` should only occur when the inner-outputs that determine the outer-outputs are all `RandomVariable` nodes (i.e. the (relevant) outputs of scan are effectively a sequence of `RandomVariable` outputs), because that's when we can compute the log-probability with something like `at.sum(scan(lambda ..., value, ...: logprob(inner_out, value), ...))`.\r\n\r\nThe other rewrites are applied separately to the original `Scan`&mdash;through the normal course of running `logprob_rewrites_db`&mdash;until the inner-graph's `RandomVariable`s are pushed down enough to become the inner and/or outer-outputs.  `scan_replace` is only there to check that this has been done sufficiently enough to replace the `Scan`."", 'comment_created': datetime.datetime(2021, 7, 3, 18, 12, 20, tzinfo=datetime.timezone.utc), 'commenter': 'brandonwillard', 'type': 'User'}, {'comment_id': 664886788, 'comment_body': ""`FunctionGraph`s are simple containers that only hold a few `list`s (and sometimes a `dict`), so don't worry too much about creating and discarding them.  The same goes for `ScanArgs`."", 'comment_created': datetime.datetime(2021, 7, 6, 21, 22, 20, tzinfo=datetime.timezone.utc), 'commenter': 'brandonwillard', 'type': 'User'}, {'comment_id': 664887909, 'comment_body': ""This can go in a `utils` module, or, if a lot more code is needed for the `Scan` work, its own module entirely.\r\n\r\nAlso, we should replace Aesara's current `scan_args` with this `ScanArgs`."", 'comment_created': datetime.datetime(2021, 7, 6, 21, 24, 27, tzinfo=datetime.timezone.utc), 'commenter': 'brandonwillard', 'type': 'User'}, {'comment_id': 665079004, 'comment_body': ""I'll make a quick PR for `ScanArgs` in Aesara. "", 'comment_created': datetime.datetime(2021, 7, 7, 6, 28, 43, tzinfo=datetime.timezone.utc), 'commenter': 'kc611', 'type': 'User'}, {'comment_id': 665079307, 'comment_body': 'Did it in https://github.com/aesara-devs/aesara/pull/510', 'comment_created': datetime.datetime(2021, 7, 7, 6, 29, 16, tzinfo=datetime.timezone.utc), 'commenter': 'kc611', 'type': 'User'}, {'comment_id': 684293607, 'comment_body': 'This is not being registered as a Scan node. ', 'comment_created': datetime.datetime(2021, 8, 6, 14, 47, 23, tzinfo=datetime.timezone.utc), 'commenter': 'kc611', 'type': 'User'}, {'comment_id': 684436927, 'comment_body': ""Without this in place, we're assuming that every `Scan` is a `MeasurableScan` (because we turn every `Scan` into one below), but that's not necessarily true.\r\n\r\nWe can apply the `Scan` transforms here and then convert the output into a `MeasurableScan`, or we can attempt to determine if a `Scan` can be transformed and do that later.  The former seems easier, though."", 'comment_created': datetime.datetime(2021, 8, 6, 18, 44, 6, tzinfo=datetime.timezone.utc), 'commenter': 'brandonwillard', 'type': 'User'}, {'comment_id': 684437924, 'comment_body': ""Actually, it looks like we're letting `push_out_rvs_from_scan` run alongside this rewrite, and that should probably produce `MeasurableScan`s.  This makes me think that `check_scan_logprob` might not be necessary at all."", 'comment_created': datetime.datetime(2021, 8, 6, 18, 46, tzinfo=datetime.timezone.utc), 'commenter': 'brandonwillard', 'type': 'User'}, {'comment_id': 687026158, 'comment_body': ""Isn't the mode itself `None` over here ?"", 'comment_created': datetime.datetime(2021, 8, 11, 17, 16, 56, tzinfo=datetime.timezone.utc), 'commenter': 'kc611', 'type': 'User'}, {'comment_id': 687027742, 'comment_body': ""I just threw that in there to be safe, and it might not even be useful.  There are two `Mode` values attached to the `Op`, and I don't think `mode` is the one that's directly used to compile the inner-graph; however, it may be used in some other way."", 'comment_created': datetime.datetime(2021, 8, 11, 17, 19, 22, tzinfo=datetime.timezone.utc), 'commenter': 'brandonwillard', 'type': 'User'}, {'comment_id': 687028717, 'comment_body': ""I think the `rv_remapper` in `joint_logprob` takes care of that no ?\r\n\r\nThe only issue is it doesn't map variables that are not the `var` (i.e. `S_rv` in our test cases). Is that what you meant over here ?"", 'comment_created': datetime.datetime(2021, 8, 11, 17, 20, 40, tzinfo=datetime.timezone.utc), 'commenter': 'kc611', 'type': 'User'}, {'comment_id': 687030101, 'comment_body': ""If we dis-allow this kind of functions we wouldn't need the push-out functionality anymore. Right ? Cause all of the outputs are 'required' to be pushed out by the user himself. This function will just act as a check in that case. "", 'comment_created': datetime.datetime(2021, 8, 11, 17, 22, 37, tzinfo=datetime.timezone.utc), 'commenter': 'kc611', 'type': 'User'}, {'comment_id': 690463108, 'comment_body': 'Marking for convenience. ', 'comment_created': datetime.datetime(2021, 8, 17, 15, 6, 15, tzinfo=datetime.timezone.utc), 'commenter': 'kc611', 'type': 'User'}, {'comment_id': 690887356, 'comment_body': ""I don't believe this should pass, because the output `TensorVariable`s use identity (e.g. `is`) comparisons."", 'comment_created': datetime.datetime(2021, 8, 18, 4, 15, 33, tzinfo=datetime.timezone.utc), 'commenter': 'brandonwillard', 'type': 'User'}, {'comment_id': 690890047, 'comment_body': 'The original ""push-out"" functionality would automatically add `S_t` as an output to a new, reformulated `Scan`, as I recall; however, in our case, that\'s not particularly useful, because we need value variables for all the `MeasurableVariable`s in the model, but there isn\'t a (good) way to specify a value variable for an inner-graph variable like `S_t`.  The reason is that some inner-graph variables like `S_t` don\'t really exist at the user-level; e.g. when they\'re not inner-outputs that map to outer-outputs (outer-outputs are the only thing a user gets back from `aesara.scan`, aside from the updates).\r\n\r\nIn other words, yes, I think you have the right idea.\r\n\r\nThe only way I could see this being done without somehow specifying a value variable for terms like `S_t` is if we never even required value variables.  Instead, these `logprob`-related functions would also return a `dict` mapping `MeasurableVariable`s to value variables that are automatically generated for them when they\'re encountered/created by these rewrite functions.\r\n\r\n@kc611 @ricardoV94, this is an approach we should seriously consider.  It would involve a fundamental change to the way AePPL currently works, but we could do that sort of thing at this point.', 'comment_created': datetime.datetime(2021, 8, 18, 4, 24, 22, tzinfo=datetime.timezone.utc), 'commenter': 'brandonwillard', 'type': 'User'}, {'comment_id': 690895936, 'comment_body': ""> I think the `rv_remapper` in `joint_logprob` takes care of that no ?\r\n\r\nYes, it generally should.\r\n\r\n> The only issue is it doesn't map variables that are not the `var` (i.e. `S_rv` in our test cases). Is that what you meant over here ?\r\n\r\nThe `PreserveRVMappings` feature might not work for variables that aren't the literal inputs/outputs of a replacement.  I believe that was one of my concerns.  That might not be an issue, though.  We really need to set up some example and work through them to find out.\r\n"", 'comment_created': datetime.datetime(2021, 8, 18, 4, 42, 4, tzinfo=datetime.timezone.utc), 'commenter': 'brandonwillard', 'type': 'User'}, {'comment_id': 690908206, 'comment_body': ""It looks like [the current issue](https://github.com/aesara-devs/aeppl/pull/24/checks?check_run_id=3357658699#step:6:256) actually _is_ due to `PreserveRVMappings` not handling every variable that was replaced.\r\n\r\nIn this particular case, `PreserveRVMappings.on_change_input` is only ever called with `r` (i.e. the variable being replaced) equal to `Y_rv`.  This is because the `FunctionGraph` that's being used has only one output: `Y_rv`.  The second output of the `Scan` is `S_rv` and the test fails when that output appears in the `joint_logprob` loop.\r\n\r\nIf `PreserveRVMappings.on_change_input` were called with `r` equal to `S_rv` and `new_r` equal to the corresponding new output produced by `push_out_rvs_from_scan`, this problem wouldn't appear.\r\n\r\nWe might be able to add all the random variables as outputs to the `fgraph` created in `joint_logprob` and get this to work.  That would guarantee that `PreserveRVMappings.on_change_input` would be called for each one."", 'comment_created': datetime.datetime(2021, 8, 18, 5, 17, 7, tzinfo=datetime.timezone.utc), 'commenter': 'brandonwillard', 'type': 'User'}, {'comment_id': 690909880, 'comment_body': ""I've just added a fix to that effect."", 'comment_created': datetime.datetime(2021, 8, 18, 5, 21, 54, tzinfo=datetime.timezone.utc), 'commenter': 'brandonwillard', 'type': 'User'}, {'comment_id': 691421689, 'comment_body': ""I think that's how `symbolic-pymc` originally used to calculate the log-probability of Scan ops, no?\r\n\r\nhttps://github.com/pymc-devs/symbolic-pymc/blob/84e8d612c714f502f8d188c1766498f4ff7beecf/symbolic_pymc/theano/pymc3.py#L176-L177"", 'comment_created': datetime.datetime(2021, 8, 18, 16, 33, 49, tzinfo=datetime.timezone.utc), 'commenter': 'kc611', 'type': 'User'}, {'comment_id': 691423842, 'comment_body': ""> I think that's how `symbolic-pymc` originally used to calculate the log-probability of Scan ops, no?\r\n\r\nYeah, as I recall."", 'comment_created': datetime.datetime(2021, 8, 18, 16, 36, 37, tzinfo=datetime.timezone.utc), 'commenter': 'brandonwillard', 'type': 'User'}, {'comment_id': 694997565, 'comment_body': 'Temporarily changed `RandomStreams` to shared `Generators` for the current development run/testing purposes.', 'comment_created': datetime.datetime(2021, 8, 24, 16, 8, 8, tzinfo=datetime.timezone.utc), 'commenter': 'kc611', 'type': 'User'}, {'comment_id': 695000954, 'comment_body': ""This is where we should be passing the processed value of corresponding RV node using `new_outer_input_vars`. Issue is how do we make sure that each iteration of `Scan` in its `n_step`s of iterations receives the correct value from this array of value ?  (i.e. we'll probably need to modify the above `taps` logic for that which will correctly pass the values for each output node as a `seq` type input.)"", 'comment_created': datetime.datetime(2021, 8, 24, 16, 12, 6, tzinfo=datetime.timezone.utc), 'commenter': 'kc611', 'type': 'User'}, {'comment_id': 695001718, 'comment_body': ""We'll probably need a call to `joint_logprob` here rather than `_logprob`. "", 'comment_created': datetime.datetime(2021, 8, 24, 16, 13, 4, tzinfo=datetime.timezone.utc), 'commenter': 'kc611', 'type': 'User'}, {'comment_id': 695104783, 'comment_body': ""No problem; I don't think there's a strict requirement for either one, but both should be expected to work (although the `assert`s may need to change in response)."", 'comment_created': datetime.datetime(2021, 8, 24, 18, 35, 30, tzinfo=datetime.timezone.utc), 'commenter': 'brandonwillard', 'type': 'User'}, {'comment_id': 695123098, 'comment_body': 'Yeah, there are some design questions/issues with `convert_outer_out_to_in` and multiple value variables.  \r\n\r\nI believe `convert_outer_out_to_in` I designed to work with one value variable at a time via the `ScanArgs` (i.e. one would mutate the `ScanArgs` in-place for each random variable that\'s being replaced).\r\n\r\nIt should repurpose the original `Scan` so that each new value variable is a new outer-input and&mdash;thus&mdash;has a corresponding inner-input ""slice""/""scalar"".  All the `taps` logic should be handled by that existing logic, as long as the value variable replacements we use are correct.\r\n\r\nThese replacements probably need to be the un-`*Subtensor*`ed tensors, and not the ones returned by `aesara.scan`, which cut off the initial values via `*Subtensor*` slices.', 'comment_created': datetime.datetime(2021, 8, 24, 19, 1, 24, tzinfo=datetime.timezone.utc), 'commenter': 'brandonwillard', 'type': 'User'}]","[{'commit_sha': '76412053abf0ae6b913279fca9f44b9dc1941fb8', 'committer_username': 'brandonwillard', 'committer_name': 'Brandon T. Willard', 'committer_email': None, 'commit_date': datetime.datetime(2011, 8, 10, 14, 19, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bdfb4c8e805fce72807204226398b547d2ac84a9', 'committer_username': 'kc611', 'committer_name': 'Kaustubh', 'committer_email': 'ckaustubhm06@gmail.com', 'commit_date': datetime.datetime(2019, 9, 15, 13, 33, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7dd1b29fab3970078c28792ef4fe30a32bf1d788', 'committer_username': 'brandonwillard', 'committer_name': 'Brandon T. Willard', 'committer_email': None, 'commit_date': datetime.datetime(2011, 8, 10, 14, 19, 12, tzinfo=datetime.timezone.utc)}]",Kaustubh,55352418,ckaustubhm06@gmail.com,User,,57,,48,65

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
221231590,aesara,aesara-devs/aesara,Python,156,1173,20,596,30109,332,9,48,"[{'id': 830652739, 'number': 789, 'closed': datetime.datetime(2022, 1, 30, 21, 30, 58, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 1, 24, 17, 27, 24, tzinfo=datetime.timezone.utc), 'time_taken': 533014.0, 'time_delta': '6 days, 4:03:34', 'additions': 79, 'deletions': 12, 'state': 'closed'}, {'id': 830523277, 'number': 787, 'closed': datetime.datetime(2022, 1, 24, 20, 39, 56, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 1, 24, 15, 22, 8, tzinfo=datetime.timezone.utc), 'time_taken': 19068.0, 'time_delta': '5:17:48', 'additions': 15, 'deletions': 26, 'state': 'closed'}, {'id': 829431969, 'number': 779, 'closed': datetime.datetime(2022, 3, 18, 19, 42, 28, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 1, 22, 11, 36, 31, tzinfo=datetime.timezone.utc), 'time_taken': 4781157.0, 'time_delta': '55 days, 8:05:57', 'additions': 59, 'deletions': 0, 'state': 'closed'}, {'id': 826712645, 'number': 769, 'closed': datetime.datetime(2022, 1, 20, 3, 57, 22, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 1, 19, 16, 56, 15, tzinfo=datetime.timezone.utc), 'time_taken': 39667.0, 'time_delta': '11:01:07', 'additions': 20, 'deletions': 13, 'state': 'closed'}, {'id': 823952165, 'number': 755, 'closed': None, 'created': datetime.datetime(2022, 1, 16, 17, 24, 6, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 461, 'deletions': 1133, 'state': 'open'}, {'id': 781858367, 'number': 667, 'closed': datetime.datetime(2021, 11, 21, 21, 58, 44, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 11, 16, 16, 29, 9, tzinfo=datetime.timezone.utc), 'time_taken': 451775.0, 'time_delta': '5 days, 5:29:35', 'additions': 98, 'deletions': 3, 'state': 'closed'}, {'id': 780111260, 'number': 666, 'closed': None, 'created': datetime.datetime(2021, 11, 14, 15, 46, 25, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 637, 'deletions': 517, 'state': 'open'}, {'id': 775026394, 'number': 657, 'closed': None, 'created': datetime.datetime(2021, 11, 7, 18, 36, 47, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 669, 'deletions': 218, 'state': 'open'}, {'id': 769426279, 'number': 639, 'closed': datetime.datetime(2022, 1, 18, 16, 38, 54, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 10, 29, 17, 29, 14, tzinfo=datetime.timezone.utc), 'time_taken': 6995380.0, 'time_delta': '80 days, 23:09:40', 'additions': 266, 'deletions': 148, 'state': 'closed'}, {'id': 768501825, 'number': 634, 'closed': None, 'created': datetime.datetime(2021, 10, 28, 16, 12, 21, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 154, 'deletions': 0, 'state': 'open'}, {'id': 764320454, 'number': 628, 'closed': datetime.datetime(2021, 10, 22, 20, 50, 58, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 10, 22, 15, 51, 14, tzinfo=datetime.timezone.utc), 'time_taken': 17984.0, 'time_delta': '4:59:44', 'additions': 6, 'deletions': 2, 'state': 'closed'}, {'id': 763577313, 'number': 627, 'closed': datetime.datetime(2021, 10, 22, 18, 21, 36, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 10, 21, 19, 0, 3, tzinfo=datetime.timezone.utc), 'time_taken': 84093.0, 'time_delta': '23:21:33', 'additions': 29, 'deletions': 0, 'state': 'closed'}, {'id': 763556021, 'number': 626, 'closed': datetime.datetime(2021, 10, 22, 20, 50, 36, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 10, 21, 18, 39, 27, tzinfo=datetime.timezone.utc), 'time_taken': 94269.0, 'time_delta': '1 day, 2:11:09', 'additions': 13, 'deletions': 6, 'state': 'closed'}, {'id': 763529914, 'number': 625, 'closed': datetime.datetime(2021, 10, 22, 20, 50, 21, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 10, 21, 18, 13, 54, tzinfo=datetime.timezone.utc), 'time_taken': 95787.0, 'time_delta': '1 day, 2:36:27', 'additions': 33, 'deletions': 15, 'state': 'closed'}, {'id': 760676838, 'number': 619, 'closed': datetime.datetime(2021, 10, 18, 17, 51, 37, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 10, 18, 17, 1, 1, tzinfo=datetime.timezone.utc), 'time_taken': 3036.0, 'time_delta': '0:50:36', 'additions': 8, 'deletions': 34, 'state': 'closed'}, {'id': 760664634, 'number': 618, 'closed': datetime.datetime(2022, 1, 1, 17, 23, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 10, 18, 16, 43, 50, tzinfo=datetime.timezone.utc), 'time_taken': 6482350.0, 'time_delta': '75 days, 0:39:10', 'additions': 34, 'deletions': 71, 'state': 'closed'}, {'id': 759113600, 'number': 615, 'closed': datetime.datetime(2021, 10, 19, 0, 59, 12, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 10, 15, 11, 4, 7, tzinfo=datetime.timezone.utc), 'time_taken': 309305.0, 'time_delta': '3 days, 13:55:05', 'additions': 92, 'deletions': 1, 'state': 'closed'}, {'id': 748899803, 'number': 607, 'closed': datetime.datetime(2021, 10, 9, 17, 42, 48, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 10, 4, 12, 46, 37, tzinfo=datetime.timezone.utc), 'time_taken': 449771.0, 'time_delta': '5 days, 4:56:11', 'additions': 329, 'deletions': 0, 'state': 'closed'}, {'id': 744893992, 'number': 599, 'closed': datetime.datetime(2022, 1, 20, 17, 54, 58, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 9, 28, 14, 52, 12, tzinfo=datetime.timezone.utc), 'time_taken': 9860566.0, 'time_delta': '114 days, 3:02:46', 'additions': 572, 'deletions': 170, 'state': 'closed'}, {'id': 700468886, 'number': 540, 'closed': datetime.datetime(2021, 8, 10, 3, 40, 30, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 30, 17, 46, 22, tzinfo=datetime.timezone.utc), 'time_taken': 899648.0, 'time_delta': '10 days, 9:54:08', 'additions': 27, 'deletions': 3, 'state': 'closed'}, {'id': 684903937, 'number': 510, 'closed': datetime.datetime(2021, 7, 17, 23, 40, 38, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 7, 6, 29, 2, tzinfo=datetime.timezone.utc), 'time_taken': 925896.0, 'time_delta': '10 days, 17:11:36', 'additions': 338, 'deletions': 18, 'state': 'closed'}, {'id': 647669348, 'number': 420, 'closed': datetime.datetime(2021, 6, 25, 16, 47, 4, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 5, 19, 13, 30, 5, tzinfo=datetime.timezone.utc), 'time_taken': 3208619.0, 'time_delta': '37 days, 3:16:59', 'additions': 2424, 'deletions': 2064, 'state': 'closed'}, {'id': 640352905, 'number': 403, 'closed': datetime.datetime(2021, 6, 25, 22, 52, 39, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 5, 11, 12, 20, 40, tzinfo=datetime.timezone.utc), 'time_taken': 3925919.0, 'time_delta': '45 days, 10:31:59', 'additions': 574, 'deletions': 5, 'state': 'closed'}, {'id': 621129313, 'number': 385, 'closed': datetime.datetime(2021, 6, 25, 22, 4, 19, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 4, 22, 14, 5, 32, tzinfo=datetime.timezone.utc), 'time_taken': 5558327.0, 'time_delta': '64 days, 7:58:47', 'additions': 29, 'deletions': 1, 'state': 'closed'}, {'id': 614915134, 'number': 372, 'closed': datetime.datetime(2021, 4, 17, 21, 56, 25, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 4, 14, 4, 25, 18, tzinfo=datetime.timezone.utc), 'time_taken': 322267.0, 'time_delta': '3 days, 17:31:07', 'additions': 455, 'deletions': 15, 'state': 'closed'}, {'id': 594894964, 'number': 342, 'closed': None, 'created': datetime.datetime(2021, 3, 17, 16, 51, 10, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 478, 'deletions': 725, 'state': 'open'}, {'id': 586278151, 'number': 321, 'closed': datetime.datetime(2021, 3, 10, 6, 28, 20, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 3, 7, 16, 8, 40, tzinfo=datetime.timezone.utc), 'time_taken': 224380.0, 'time_delta': '2 days, 14:19:40', 'additions': 43, 'deletions': 0, 'state': 'closed'}, {'id': 568790367, 'number': 297, 'closed': datetime.datetime(2021, 2, 18, 18, 49, 52, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 2, 6, 13, 32, 9, tzinfo=datetime.timezone.utc), 'time_taken': 1055863.0, 'time_delta': '12 days, 5:17:43', 'additions': 170, 'deletions': 213, 'state': 'closed'}, {'id': 568723497, 'number': 296, 'closed': datetime.datetime(2021, 3, 12, 9, 40, 46, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 2, 6, 5, 18, 39, tzinfo=datetime.timezone.utc), 'time_taken': 2953327.0, 'time_delta': '34 days, 4:22:07', 'additions': 155, 'deletions': 24, 'state': 'closed'}]"
192904,pymc,pymc-devs/pymc,Python,1984,8588,224,503,10018,298,17,62,"[{'id': 754631798, 'number': 5067, 'closed': datetime.datetime(2021, 11, 25, 16, 38, 53, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 10, 10, 4, 40, 58, tzinfo=datetime.timezone.utc), 'time_taken': 4017475.0, 'time_delta': '46 days, 11:57:55', 'additions': 29, 'deletions': 2, 'state': 'closed'}, {'id': 726645169, 'number': 4979, 'closed': datetime.datetime(2021, 9, 3, 11, 58, 7, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 9, 3, 9, 21, 9, tzinfo=datetime.timezone.utc), 'time_taken': 9418.0, 'time_delta': '2:36:58', 'additions': 5, 'deletions': 8, 'state': 'closed'}, {'id': 725437687, 'number': 4978, 'closed': datetime.datetime(2021, 9, 2, 8, 37, 10, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 9, 2, 6, 16, 14, tzinfo=datetime.timezone.utc), 'time_taken': 8456.0, 'time_delta': '2:20:56', 'additions': 12, 'deletions': 8, 'state': 'closed'}, {'id': 713552044, 'number': 4934, 'closed': datetime.datetime(2021, 8, 16, 19, 30, 38, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 16, 15, 48, 59, tzinfo=datetime.timezone.utc), 'time_taken': 13299.0, 'time_delta': '3:41:39', 'additions': 9, 'deletions': 2, 'state': 'closed'}, {'id': 705996695, 'number': 4912, 'closed': datetime.datetime(2021, 9, 2, 13, 55, 4, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 8, 7, 17, 55, tzinfo=datetime.timezone.utc), 'time_taken': 2183829.0, 'time_delta': '25 days, 6:37:09', 'additions': 47, 'deletions': 0, 'state': 'closed'}, {'id': 698777329, 'number': 4887, 'closed': datetime.datetime(2021, 10, 23, 10, 14, 42, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 28, 15, 4, 49, tzinfo=datetime.timezone.utc), 'time_taken': 7499393.0, 'time_delta': '86 days, 19:09:53', 'additions': 595, 'deletions': 1095, 'state': 'closed'}, {'id': 686209130, 'number': 4848, 'closed': datetime.datetime(2021, 8, 30, 14, 48, 8, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 8, 17, 43, 27, tzinfo=datetime.timezone.utc), 'time_taken': 4568681.0, 'time_delta': '52 days, 21:04:41', 'additions': 76, 'deletions': 28, 'state': 'closed'}, {'id': 681710201, 'number': 4825, 'closed': datetime.datetime(2021, 7, 5, 17, 44, 11, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 1, 10, 15, 39, tzinfo=datetime.timezone.utc), 'time_taken': 372512.0, 'time_delta': '4 days, 7:28:32', 'additions': 106, 'deletions': 438, 'state': 'closed'}, {'id': 678934182, 'number': 4815, 'closed': datetime.datetime(2021, 8, 13, 15, 9, 7, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 28, 10, 52, 2, tzinfo=datetime.timezone.utc), 'time_taken': 3989825.0, 'time_delta': '46 days, 4:17:05', 'additions': 382, 'deletions': 344, 'state': 'closed'}, {'id': 673843130, 'number': 4784, 'closed': datetime.datetime(2022, 1, 25, 12, 10, 13, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 19, 8, 13, 30, tzinfo=datetime.timezone.utc), 'time_taken': 19022203.0, 'time_delta': '220 days, 3:56:43', 'additions': 273, 'deletions': 239, 'state': 'closed'}, {'id': 672494427, 'number': 4777, 'closed': datetime.datetime(2021, 7, 2, 16, 47, 42, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 17, 10, 35, 42, tzinfo=datetime.timezone.utc), 'time_taken': 1318320.0, 'time_delta': '15 days, 6:12:00', 'additions': 202, 'deletions': 243, 'state': 'closed'}, {'id': 672287198, 'number': 4776, 'closed': datetime.datetime(2022, 3, 18, 10, 24, 46, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 17, 6, 48, 33, tzinfo=datetime.timezone.utc), 'time_taken': 23686573.0, 'time_delta': '274 days, 3:36:13', 'additions': 200, 'deletions': 1, 'state': 'closed'}, {'id': 671350704, 'number': 4774, 'closed': datetime.datetime(2021, 6, 27, 4, 39, 32, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 16, 11, 17, 44, tzinfo=datetime.timezone.utc), 'time_taken': 926508.0, 'time_delta': '10 days, 17:21:48', 'additions': 112, 'deletions': 200, 'state': 'closed'}, {'id': 663028217, 'number': 4746, 'closed': datetime.datetime(2021, 6, 14, 7, 13, 41, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 6, 19, 0, 46, tzinfo=datetime.timezone.utc), 'time_taken': 648775.0, 'time_delta': '7 days, 12:12:55', 'additions': 261, 'deletions': 225, 'state': 'closed'}, {'id': 586278517, 'number': 4508, 'closed': datetime.datetime(2021, 3, 16, 4, 31, 45, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 3, 7, 16, 10, 48, tzinfo=datetime.timezone.utc), 'time_taken': 735657.0, 'time_delta': '8 days, 12:20:57', 'additions': 625, 'deletions': 978, 'state': 'closed'}, {'id': 563971765, 'number': 4447, 'closed': datetime.datetime(2021, 6, 6, 6, 21, 24, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 1, 29, 13, 3, 47, tzinfo=datetime.timezone.utc), 'time_taken': 11035057.0, 'time_delta': '127 days, 17:17:37', 'additions': 58, 'deletions': 0, 'state': 'closed'}, {'id': 563319648, 'number': 4445, 'closed': datetime.datetime(2021, 1, 31, 10, 29, 31, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 1, 28, 14, 55, 26, tzinfo=datetime.timezone.utc), 'time_taken': 243245.0, 'time_delta': '2 days, 19:34:05', 'additions': 30, 'deletions': 7, 'state': 'closed'}, {'id': 555492125, 'number': 4418, 'closed': datetime.datetime(2021, 1, 19, 11, 32, 28, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 1, 15, 6, 57, 33, tzinfo=datetime.timezone.utc), 'time_taken': 362095.0, 'time_delta': '4 days, 4:34:55', 'additions': 15, 'deletions': 1, 'state': 'closed'}, {'id': 554700143, 'number': 4416, 'closed': datetime.datetime(2021, 1, 18, 12, 0, 43, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 1, 14, 7, 1, 53, tzinfo=datetime.timezone.utc), 'time_taken': 363530.0, 'time_delta': '4 days, 4:58:50', 'additions': 23, 'deletions': 23, 'state': 'closed'}]"
371181735,aeppl,aesara-devs/aeppl,Python,21,63,2,14,253,44,5,6,"[{'id': 683039479, 'number': 24, 'closed': datetime.datetime(2021, 10, 6, 2, 26, 11, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 3, 15, 27, 1, tzinfo=datetime.timezone.utc), 'time_taken': 8161150.0, 'time_delta': '94 days, 10:59:10', 'additions': 928, 'deletions': 7, 'state': 'closed'}]"
