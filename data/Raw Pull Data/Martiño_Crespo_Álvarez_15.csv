pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
440549236,Optical Tactile Sensor Plugin,"**Optical Tactile Sensor Plugin for GSoC 2020.**

It retrieves the contacts given by a contact sensor and computes the normal surfaces of an object given the data returned by a Depth Camera. It also visualizes these forces in a similar way as Gazebo Classic, so this PR partially addresses #112.

Future work will be focused on:

- Tutorial explaining the plugin.
- Computation performance.
- Merging the data returned by contact and camera sensors.

![out2](https://user-images.githubusercontent.com/14854080/87320244-fe104980-c52a-11ea-9696-07d5fb824874.png)



",True,229,https://api.github.com/repos/gazebosim/gz-sim/pulls/229,https://github.com/gazebosim/gz-sim/pull/229,closed,1407,0,7,33,27,224,1,1,[{'name': 'ðŸ”® dome'}],2020-06-26 12:09:27+00:00,2020-12-12 13:10:24+00:00,14605257.0,"169 days, 1:00:57","[{'comment_id': 447190749, 'comment_body': ""We should document this somewhere, but in general, we don't recommend using `System::Update` call unless absolutely necessary. This is the phase where physics is running and the contact points may not be ready yet. Consider putting this in `PostUpdate`."", 'comment_created': datetime.datetime(2020, 6, 29, 19, 6, 41, tzinfo=datetime.timezone.utc), 'commenter': 'azeey', 'type': 'User'}, {'comment_id': 447203608, 'comment_body': 'Thanks! I was not aware of that.', 'comment_created': datetime.datetime(2020, 6, 29, 19, 31, 6, tzinfo=datetime.timezone.utc), 'commenter': 'mabelzhang', 'type': 'User'}, {'comment_id': 447300915, 'comment_body': ""> We should document this somewhere,\r\n\r\nThere's a bit [here](https://ignitionrobotics.org/api/gazebo/3.0/createsystemplugins.html):\r\n\r\n_Generally, systems that do not manage physics stepping will not need to implement the ISystemUpdate interface._\r\n\r\nAnd the [System](https://ignitionrobotics.org/api/gazebo/3.0/classignition_1_1gazebo_1_1System.html) API docs also mention:\r\n\r\n_Update (...) Used for physics simulation step_\r\n\r\nBut we can always make it clearer or the documentation easier to find."", 'comment_created': datetime.datetime(2020, 6, 29, 22, 43, 14, tzinfo=datetime.timezone.utc), 'commenter': 'chapulina', 'type': 'User'}, {'comment_id': 447306325, 'comment_body': ""I will admit we did find that page (I see it in our Slack records), but I didn't read it closely... oops."", 'comment_created': datetime.datetime(2020, 6, 29, 22, 59, tzinfo=datetime.timezone.utc), 'commenter': 'mabelzhang', 'type': 'User'}, {'comment_id': 447351941, 'comment_body': 'Maybe just use a generic name for the contact sensor? Because if anything, the depth camera is more the optical sensor than the contact sensor, which is only used as a peripheral.', 'comment_created': datetime.datetime(2020, 6, 30, 1, 22, 17, tzinfo=datetime.timezone.utc), 'commenter': 'mabelzhang', 'type': 'User'}, {'comment_id': 447389914, 'comment_body': '2020', 'comment_created': datetime.datetime(2020, 6, 30, 3, 42, 20, tzinfo=datetime.timezone.utc), 'commenter': 'mabelzhang', 'type': 'User'}, {'comment_id': 447389966, 'comment_body': '2020 here as well', 'comment_created': datetime.datetime(2020, 6, 30, 3, 42, 31, tzinfo=datetime.timezone.utc), 'commenter': 'mabelzhang', 'type': 'User'}, {'comment_id': 447390807, 'comment_body': ""I think it's a general enough method that we don't need to cite it explicitly. @azeey is that true? What do we normally do about implementations we find on answers forums? It's just a calculation of normals from a depth image."", 'comment_created': datetime.datetime(2020, 6, 30, 3, 45, 59, tzinfo=datetime.timezone.utc), 'commenter': 'mabelzhang', 'type': 'User'}, {'comment_id': 447391401, 'comment_body': 'bool?\r\nCamel case variable name', 'comment_created': datetime.datetime(2020, 6, 30, 3, 48, 32, tzinfo=datetime.timezone.utc), 'commenter': 'mabelzhang', 'type': 'User'}, {'comment_id': 447392020, 'comment_body': 'Typo: Whether', 'comment_created': datetime.datetime(2020, 6, 30, 3, 50, 55, tzinfo=datetime.timezone.utc), 'commenter': 'mabelzhang', 'type': 'User'}, {'comment_id': 447392759, 'comment_body': 'Typo: Length', 'comment_created': datetime.datetime(2020, 6, 30, 3, 53, 27, tzinfo=datetime.timezone.utc), 'commenter': 'mabelzhang', 'type': 'User'}, {'comment_id': 447393631, 'comment_body': 'Since the size of the image is known, this should use a more optimized type than 3 nested std::vectors.\r\nYou can use a raw float array, or ignition::common::Image https://github.com/ignitionrobotics/ign-common/blob/master/graphics/include/ignition/common/Image.hh\r\nSee here for usage https://github.com/ignitionrobotics/ign-sensors/blob/master/src/DepthCameraSensor.cc ConvertDepthToImage() also shows how to calculate the indexing to use a raw 1D array for 3D data.', 'comment_created': datetime.datetime(2020, 6, 30, 3, 56, 16, tzinfo=datetime.timezone.utc), 'commenter': 'mabelzhang', 'type': 'User'}, {'comment_id': 447406160, 'comment_body': 'Indentation size should be consistent; 2 spaces for this and several other methods.', 'comment_created': datetime.datetime(2020, 6, 30, 4, 45, 1, tzinfo=datetime.timezone.utc), 'commenter': 'mabelzhang', 'type': 'User'}, {'comment_id': 447406903, 'comment_body': ""Since resolution is by default initialized to 100, if the user doesn't provide one, we can just use the default value and print `ignlog` saying that value is what we're assuming. That way this SDF arg will be optional."", 'comment_created': datetime.datetime(2020, 6, 30, 4, 47, 47, tzinfo=datetime.timezone.utc), 'commenter': 'mabelzhang', 'type': 'User'}, {'comment_id': 447407404, 'comment_body': ""Maybe `unsigned int`. It couuuld make sense for it to be negative but I can't think of a case when someone would want to do that for a good reason."", 'comment_created': datetime.datetime(2020, 6, 30, 4, 49, 43, tzinfo=datetime.timezone.utc), 'commenter': 'mabelzhang', 'type': 'User'}, {'comment_id': 447409857, 'comment_body': 'unsigned int here as well if changed above', 'comment_created': datetime.datetime(2020, 6, 30, 4, 58, 52, tzinfo=datetime.timezone.utc), 'commenter': 'mabelzhang', 'type': 'User'}, {'comment_id': 447410248, 'comment_body': 'Similar to above, this can be an optional arg. The provided SDF should specify it as a usage example, but the plugin can use a default value.', 'comment_created': datetime.datetime(2020, 6, 30, 5, 0, 6, tzinfo=datetime.timezone.utc), 'commenter': 'mabelzhang', 'type': 'User'}, {'comment_id': 447412350, 'comment_body': 'These loops should probably use reference & type to avoid copying the items.', 'comment_created': datetime.datetime(2020, 6, 30, 5, 7, 46, tzinfo=datetime.timezone.utc), 'commenter': 'mabelzhang', 'type': 'User'}, {'comment_id': 447413196, 'comment_body': 'Same as above, reference & type for for-loop', 'comment_created': datetime.datetime(2020, 6, 30, 5, 10, 52, tzinfo=datetime.timezone.utc), 'commenter': 'mabelzhang', 'type': 'User'}, {'comment_id': 447415980, 'comment_body': 'There is potential race condition here, depending on how long everything takes to run, that this flag could be set to true again and cameraMsg updated in the callback function, while this if-statement is being executed. Consider using a `std::mutex` to protect these two variables. There are examples in other plugins, e.g. TouchPlugin.', 'comment_created': datetime.datetime(2020, 6, 30, 5, 20, 32, tzinfo=datetime.timezone.utc), 'commenter': 'mabelzhang', 'type': 'User'}, {'comment_id': 447416969, 'comment_body': ""A comment saying why this looks for 4 would be helpful.\r\nNote that with meshes, we might see very different contacts, and this assumption might not hold then. We'll see if the interpolation will still make sense. I suspect with only position data, this doesn't do much for us. It might be more useful once we have normals."", 'comment_created': datetime.datetime(2020, 6, 30, 5, 24, 5, tzinfo=datetime.timezone.utc), 'commenter': 'mabelzhang', 'type': 'User'}, {'comment_id': 447418314, 'comment_body': 'Does it work if we just keep a reference pointer to the SDF, as opposed to making a copy?', 'comment_created': datetime.datetime(2020, 6, 30, 5, 28, 40, tzinfo=datetime.timezone.utc), 'commenter': 'mabelzhang', 'type': 'User'}, {'comment_id': 447420002, 'comment_body': 'A comment saying why `Load()` is called here as opposed to in `Configure()` would help. I see that this is how `TouchPlugin` has it set up.', 'comment_created': datetime.datetime(2020, 6, 30, 5, 34, 7, tzinfo=datetime.timezone.utc), 'commenter': 'mabelzhang', 'type': 'User'}, {'comment_id': 447420241, 'comment_body': 'indentation', 'comment_created': datetime.datetime(2020, 6, 30, 5, 34, 52, tzinfo=datetime.timezone.utc), 'commenter': 'mabelzhang', 'type': 'User'}, {'comment_id': 447421964, 'comment_body': 'Going from d to f potentially loses precision. Might be negligible here... or the entire pose computation can be in double in case we deal with something very small. Nothing to change now, I guess we could leave it for now.', 'comment_created': datetime.datetime(2020, 6, 30, 5, 40, 27, tzinfo=datetime.timezone.utc), 'commenter': 'mabelzhang', 'type': 'User'}, {'comment_id': 447422126, 'comment_body': 'See mutex comment above.', 'comment_created': datetime.datetime(2020, 6, 30, 5, 41, tzinfo=datetime.timezone.utc), 'commenter': 'mabelzhang', 'type': 'User'}, {'comment_id': 447430643, 'comment_body': ""Is it necessary to subscribe to the point cloud message? Processing a point cloud is very time-consuming. Are you using the point cloud just to get the XYZ in the world frame? You should be able to calculate this using the camera matrix. It's a lot faster to do the matrix calculation rather than looping through the point cloud. Matrix speed >> for-loop speed."", 'comment_created': datetime.datetime(2020, 6, 30, 6, 5, 47, tzinfo=datetime.timezone.utc), 'commenter': 'mabelzhang', 'type': 'User'}, {'comment_id': 447431430, 'comment_body': 'Extra empty line', 'comment_created': datetime.datetime(2020, 6, 30, 6, 8, 6, tzinfo=datetime.timezone.utc), 'commenter': 'mabelzhang', 'type': 'User'}, {'comment_id': 447432144, 'comment_body': ""A more descriptive variable name for the index, since there's a lot of indexing going on here."", 'comment_created': datetime.datetime(2020, 6, 30, 6, 10, 13, tzinfo=datetime.timezone.utc), 'commenter': 'mabelzhang', 'type': 'User'}, {'comment_id': 447432447, 'comment_body': 'indentation', 'comment_created': datetime.datetime(2020, 6, 30, 6, 11, 2, tzinfo=datetime.timezone.utc), 'commenter': 'mabelzhang', 'type': 'User'}, {'comment_id': 447432547, 'comment_body': 'Extra blank line', 'comment_created': datetime.datetime(2020, 6, 30, 6, 11, 18, tzinfo=datetime.timezone.utc), 'commenter': 'mabelzhang', 'type': 'User'}, {'comment_id': 447432990, 'comment_body': 'indentation', 'comment_created': datetime.datetime(2020, 6, 30, 6, 12, 25, tzinfo=datetime.timezone.utc), 'commenter': 'mabelzhang', 'type': 'User'}, {'comment_id': 447433527, 'comment_body': 'Maybe this can be simplified to `visualizeRow = _visualizeForces;`?', 'comment_created': datetime.datetime(2020, 6, 30, 6, 13, 55, tzinfo=datetime.timezone.utc), 'commenter': 'mabelzhang', 'type': 'User'}, {'comment_id': 447433982, 'comment_body': ""I guess right now there isn't a reason to compute the normals at all if visualizeForce == false. You can add a todo that the normals will be published. That can be in a later PR as this one is already pretty long."", 'comment_created': datetime.datetime(2020, 6, 30, 6, 15, 4, tzinfo=datetime.timezone.utc), 'commenter': 'mabelzhang', 'type': 'User'}, {'comment_id': 447615717, 'comment_body': ""My bad, I was aware of that documentation as well. I would suggest to specify what exactly _physics simulation step_ is or writing an example, so it's easy to know for newcomers if they should implement `Update` or not. I'm not sure what it is. \r\n\r\nAnyway, moving to `PostUpdate`. Thanks!"", 'comment_created': datetime.datetime(2020, 6, 30, 11, 37, 37, tzinfo=datetime.timezone.utc), 'commenter': 'mcres', 'type': 'User'}, {'comment_id': 447621255, 'comment_body': ""You're right."", 'comment_created': datetime.datetime(2020, 6, 30, 11, 48, 32, tzinfo=datetime.timezone.utc), 'commenter': 'mcres', 'type': 'User'}, {'comment_id': 447622949, 'comment_body': 'FYI, I saw [this method](https://ignitionrobotics.org/api/math/6.4/classignition_1_1math_1_1Quaternion.html#ab8d157cebd35fcc2a4420c1cb4949b36) in the API and just decided to do the same.', 'comment_created': datetime.datetime(2020, 6, 30, 11, 51, 53, tzinfo=datetime.timezone.utc), 'commenter': 'mcres', 'type': 'User'}, {'comment_id': 447675182, 'comment_body': ""Great, I'll make `<visualize_forces>` optional as well."", 'comment_created': datetime.datetime(2020, 6, 30, 13, 19, 38, tzinfo=datetime.timezone.utc), 'commenter': 'mcres', 'type': 'User'}, {'comment_id': 447715155, 'comment_body': 'Fair point! However, I\'ll keep the `int` type and check for positive values. If the user specifies a negative value in the `.sdf` file, `_sdf->Get<uint64_t>(""resolution"")` would convert it to some really big positive number. Besides, seems that [Google Style Guide](https://google.github.io/styleguide/cppguide.html#Integer_Types) doesn\'t recommend using unsigned types, so that\'s another good reason.', 'comment_created': datetime.datetime(2020, 6, 30, 14, 12, 40, tzinfo=datetime.timezone.utc), 'commenter': 'mcres', 'type': 'User'}, {'comment_id': 447769413, 'comment_body': 'Totally agree!', 'comment_created': datetime.datetime(2020, 6, 30, 15, 22, 3, tzinfo=datetime.timezone.utc), 'commenter': 'mcres', 'type': 'User'}, {'comment_id': 447803084, 'comment_body': ""Yes, it does. I understand that this is more efficient, but ~9/10 plugins use the `Clone()` way. Maybe it is not safe having two pointers pointing to the same variable? Besides, the purpose of `sdfConfig` is to read the `sdf` in the `Load()` function, so it's only read."", 'comment_created': datetime.datetime(2020, 6, 30, 16, 8, 24, tzinfo=datetime.timezone.utc), 'commenter': 'mcres', 'type': 'User'}, {'comment_id': 447822730, 'comment_body': ""This seems like it's looking for the `<sensor>` tag in the first `<link>` element. What if the sensor is in a different link? You probably want to either specify the sensor name in the plugin or look for entities that have either `components::DepthCamera` or `components::RgbdCamera`."", 'comment_created': datetime.datetime(2020, 6, 30, 16, 34, 39, tzinfo=datetime.timezone.utc), 'commenter': 'azeey', 'type': 'User'}, {'comment_id': 447823988, 'comment_body': ""`Clone` is used because `sdf::Element::GetElement` is not a const function. If you don't need `GetElement`, you can use `_sdf` directly."", 'comment_created': datetime.datetime(2020, 6, 30, 16, 36, 13, tzinfo=datetime.timezone.utc), 'commenter': 'azeey', 'type': 'User'}, {'comment_id': 447826298, 'comment_body': 'In `UnpackPointCloudMsg` I am getting the XYZ point in the camera frame corresponding to each (i,j) pixel, out of the message returned by the Depth Camera. This message is a string, so I have to iterate through it anyways.\r\n\r\nMaybe you are referring to `ComputeNormalForces` method? In that one, I iterate again through the point cloud in order to access each pixel and compute the corresponding normal force according to this and the contiguous pixels.', 'comment_created': datetime.datetime(2020, 6, 30, 16, 39, 40, tzinfo=datetime.timezone.utc), 'commenter': 'mcres', 'type': 'User'}, {'comment_id': 447845900, 'comment_body': ""Currently it couldn't, as I keep incrementing `columnCounter` and `rowCounter` even if there's no visualization. I could fix this with some more `if` statements. This wouldn't simplify the method, but I guess that avoiding to increment those variables is worth it. What do you think?"", 'comment_created': datetime.datetime(2020, 6, 30, 17, 9, 28, tzinfo=datetime.timezone.utc), 'commenter': 'mcres', 'type': 'User'}, {'comment_id': 448188877, 'comment_body': ""So the Tactile sensor is supposed to have one link only, with one depth camera and one contact sensor. I guess that the user should be able to add more links to the model, but I think we should keep it simple for this PR. \r\nI should still be able to differentiate between those two kind of sensors, because they could be placed in different order. Right now it takes the first sensor it finds.\r\n\r\nApart from that, maybe I'm missing checks on how the `sdf` model should be built (one link with two specific sensors)?\r\n**Update**: I've managed to make those checks with the ECM. I've also updated the plugin description in the header file. "", 'comment_created': datetime.datetime(2020, 7, 1, 8, 4, 53, tzinfo=datetime.timezone.utc), 'commenter': 'mcres', 'type': 'User'}, {'comment_id': 448477524, 'comment_body': ""I had tried `ignition::common::Image` but [it is not](https://github.com/ignitionrobotics/ign-common/blob/master/graphics/src/Image.cc#L191) compatible with the data format of `ignition::msgs::PointCloudPacked`. \r\nWhat I can do is work with a raw pointer and somehow map the (i, j, XYZ) to the pointer position (basically what I'm doing [here](https://github.com/mcres/ign-gazebo/blob/optical_tactile_plugin/src/systems/optical_tactile_plugin/OpticalTactilePlugin.cc#L565)). That way I would get rid of `UnpackPointCloudMsg()` and I'd just run `ComputeNormalForces()`."", 'comment_created': datetime.datetime(2020, 7, 1, 16, 23, 10, tzinfo=datetime.timezone.utc), 'commenter': 'mcres', 'type': 'User'}, {'comment_id': 448602086, 'comment_body': ""I don't know if we have a general policy about this, but I think it's good to cite it. At the very least, it serves as some documentation as to what the code is doing."", 'comment_created': datetime.datetime(2020, 7, 1, 20, 35, 5, tzinfo=datetime.timezone.utc), 'commenter': 'azeey', 'type': 'User'}, {'comment_id': 448606527, 'comment_body': ""I see. I didn't know about the one link assumption. I was thinking that a user can add this system to any model that has a depth camera sensor. I'm good with keeping it simple for now and adding more configuration options later. I would suggest adding a TODO about it though."", 'comment_created': datetime.datetime(2020, 7, 1, 20, 44, 44, tzinfo=datetime.timezone.utc), 'commenter': 'azeey', 'type': 'User'}, {'comment_id': 454729877, 'comment_body': 'Is it necessary / correct to use a `<=` here? Unconventional practice to use 0 with `<=`. Can you get the desired result by using `<` here and comparing `index1 != steps1 - 1`?\r\nRight now, the loop produces (steps1+1) * steps2 iterations. I would have thought either you want steps1 * steps2 iterations, or (steps1+1) * (steps2+1) iterations. Why have 1 extra in one direction and not in the other?', 'comment_created': datetime.datetime(2020, 7, 15, 1, 4, 35, tzinfo=datetime.timezone.utc), 'commenter': 'mabelzhang', 'type': 'User'}, {'comment_id': 454731760, 'comment_body': 'Would be good to also print the value here. Same for printouts below.\r\nRemove `required` since we have a default, then it is optional.', 'comment_created': datetime.datetime(2020, 7, 15, 1, 11, 13, tzinfo=datetime.timezone.utc), 'commenter': 'mabelzhang', 'type': 'User'}, {'comment_id': 454732266, 'comment_body': 'Add `exactly` before `1`', 'comment_created': datetime.datetime(2020, 7, 15, 1, 13, 5, tzinfo=datetime.timezone.utc), 'commenter': 'mabelzhang', 'type': 'User'}, {'comment_id': 454732557, 'comment_body': 'Missing `S`', 'comment_created': datetime.datetime(2020, 7, 15, 1, 14, 11, tzinfo=datetime.timezone.utc), 'commenter': 'mabelzhang', 'type': 'User'}, {'comment_id': 454733313, 'comment_body': ""Is it redundant to check `sensorsInsideLink`, since it's already being checked that one each of the two sensors are required? The user should be allowed to have > 2 sensors, if they want to add something else to the link."", 'comment_created': datetime.datetime(2020, 7, 15, 1, 16, 29, tzinfo=datetime.timezone.utc), 'commenter': 'mabelzhang', 'type': 'User'}, {'comment_id': 454733745, 'comment_body': 'Thanks for adding the explanation! Probably also add a TODO at the end of the comment above to remove this assumption later.', 'comment_created': datetime.datetime(2020, 7, 15, 1, 18, 13, tzinfo=datetime.timezone.utc), 'commenter': 'mabelzhang', 'type': 'User'}, {'comment_id': 454764324, 'comment_body': ""Hmm is `columnCounter` being incremented? Looks like `if (!_visualizeForces)`, the `continue` will skip the increment lines for `column`. `rowCounter` is incremented.\r\n\r\nAnyway, I think it would help if the visualization code is separated into another method. Currently, the file is pretty large, and it's hard to tell which part of the code is for computing the actual output message data (necessary), and which part is only for visualization (optional). It might make sense to just refactor all the visualization into a separate file, or at least separate methods. If they're in a separate file, it's also easier to change them if #234 eventually allows us to reuse some utility code in both places."", 'comment_created': datetime.datetime(2020, 7, 15, 3, 12, tzinfo=datetime.timezone.utc), 'commenter': 'mabelzhang', 'type': 'User'}, {'comment_id': 454768793, 'comment_body': ""That sounds about right. The file has changed quite a bit since the comment and I'm not seeing the line you meant. Could you point to the line again? If you use 3 separate variables, e.g. imgX, imgY, imgZ, one for each channel, then you only need to index (i, j).\r\n\r\n@azeey Is there something equivalent to Eigen::MatrixXf that can be used to manipulate a floating point matrix of size width * height * 3, where width and height are passed in by the user? Or even just 3 variables, each of width * height? Or does it need to be a raw array with manual indexing?"", 'comment_created': datetime.datetime(2020, 7, 15, 3, 29, 41, tzinfo=datetime.timezone.utc), 'commenter': 'mabelzhang', 'type': 'User'}, {'comment_id': 455113910, 'comment_body': ""Yup, here's the updated link: https://github.com/mcres/ign-gazebo/blob/optical_tactile_plugin/src/systems/optical_tactile_plugin/OpticalTactilePlugin.cc#L807. Instead of the `imageXYZ[i][j][k]` vector when computing `dxdi` and `dxdj`, there would be a mapping function instead, for instance `imageXYZ(i,j,k)`."", 'comment_created': datetime.datetime(2020, 7, 15, 14, 52, 24, tzinfo=datetime.timezone.utc), 'commenter': 'mcres', 'type': 'User'}, {'comment_id': 455129611, 'comment_body': 'You should be able to use Eigen since ign-gazebo depends on it indirectly via the eigen3 component of ign-math6. We already use it in the multicopter_control system. If you do use Eigen, be sure to specify the appropriate [storage option](https://eigen.tuxfamily.org/dox/group__TopicStorageOrders.html) (RowMajor or ColumnMajor) to improve performance ', 'comment_created': datetime.datetime(2020, 7, 15, 15, 12, 45, tzinfo=datetime.timezone.utc), 'commenter': 'azeey', 'type': 'User'}, {'comment_id': 455149120, 'comment_body': ""I agree on the fact that the user should have that choice. However, if they have either +1 contact sensors or depth cameras, currently I don't have a way to know which one I should use for the plugin. I guess I could use the `name` attribute?"", 'comment_created': datetime.datetime(2020, 7, 15, 15, 40, 42, tzinfo=datetime.timezone.utc), 'commenter': 'mcres', 'type': 'User'}, {'comment_id': 455725422, 'comment_body': ""> Unconventional practice to use 0 with `<=`\r\n\r\nJust so I don't make the same error, should it be `0` with `<` and `1` with `<=`?\r\n\r\n> Right now, the loop produces (steps1+1) * steps2 iterations.\r\n\r\nError there"", 'comment_created': datetime.datetime(2020, 7, 16, 11, 45, 8, tzinfo=datetime.timezone.utc), 'commenter': 'mcres', 'type': 'User'}, {'comment_id': 455835883, 'comment_body': ""It seems that we have two options here:\r\n\r\n1. Using MatrixXf: I would have to unpack the data anyways but it would be more efficient than a nested vector (I assume?).\r\n2. Manually indexing the raw array returned in the camera msg: I wouldn't have to unpack the data, but I would have to call the previously mentioned indexing function each time I want to access a point at (i,j).\r\n\r\nI'd go with no. 2, what do you think?"", 'comment_created': datetime.datetime(2020, 7, 16, 14, 35, 56, tzinfo=datetime.timezone.utc), 'commenter': 'mcres', 'type': 'User'}, {'comment_id': 455902033, 'comment_body': ""@mabelzhang, I think I was too quick to answer about `MatrixXf` because I now realize that you really want a ndarray/tensor, which exists in Eigen, but is unsupported. @mcres, option 2 makes sense. I don't think you can get more efficient than calculating the index into the raw array in the point cloud message. Copying them into a new 3d std::vector incurs allocation costs and the allocated memory is unlikely to be contiguous between dimensions, which would result in unnecessary cache misses."", 'comment_created': datetime.datetime(2020, 7, 16, 16, 7, 53, tzinfo=datetime.timezone.utc), 'commenter': 'azeey', 'type': 'User'}, {'comment_id': 457267042, 'comment_body': ""I totally agree, it's quite mixed up currently. \r\nIs it possible to span the same class into more than one file? I'm thinking about defining the visualization methods into two separate `.cc` and `.hh` files."", 'comment_created': datetime.datetime(2020, 7, 20, 10, 38, 43, tzinfo=datetime.timezone.utc), 'commenter': 'mcres', 'type': 'User'}, {'comment_id': 462150155, 'comment_body': 'I was thinking if they wanted to have some other sensor in the link, like an IMU or something completely different from what this plugin deals with. Looks like `sensorsInsideLink` is counting not just depth and contact but all sensors. I think what you want is to only count depth and contact, then you would keep a counter that increments within the two if-statements above this, as opposed to checking the number of sensors in the link.', 'comment_created': datetime.datetime(2020, 7, 29, 9, 3, 21, tzinfo=datetime.timezone.utc), 'commenter': 'mabelzhang', 'type': 'User'}, {'comment_id': 462150782, 'comment_body': ""Yes usually `0` with `<` is the preference (unless you're in MATLAB, which is......... another story)."", 'comment_created': datetime.datetime(2020, 7, 29, 9, 4, 30, tzinfo=datetime.timezone.utc), 'commenter': 'mabelzhang', 'type': 'User'}, {'comment_id': 462152821, 'comment_body': 'I think you can split into more than one file. For example, [`multicopter_control` plugin does this.](https://github.com/ignitionrobotics/ign-gazebo/tree/master/src/systems/multicopter_control).', 'comment_created': datetime.datetime(2020, 7, 29, 9, 7, 49, tzinfo=datetime.timezone.utc), 'commenter': 'mabelzhang', 'type': 'User'}, {'comment_id': 462932384, 'comment_body': ""Ok, thanks!\r\n\r\n> Error there\r\n\r\nI think I was too quick saying that. The for loop actually computes `(steps1+1) * (steps2+1)` points that way. If you take for instance a 3x3 cm with a 1 cm resolution you get 4x4 points that way. I do `index1 <= steps1` because otherwise I don't get the last column. Does that makes sense?"", 'comment_created': datetime.datetime(2020, 7, 30, 11, 30, 45, tzinfo=datetime.timezone.utc), 'commenter': 'mcres', 'type': 'User'}, {'comment_id': 466187854, 'comment_body': ""Does it compute steps2+1 in the inner loop? That was my original question. Currently, it looks like it's only computing steps2 iterations, in `[0, steps2)`. The outer loop is computing `[0, steps1]`. So the total right now is (steps1+1) * steps2, I think."", 'comment_created': datetime.datetime(2020, 8, 6, 7, 2, 45, tzinfo=datetime.timezone.utc), 'commenter': 'mabelzhang', 'type': 'User'}, {'comment_id': 466820797, 'comment_body': ""One per line would be more readable here for the parameters and initialization list. Looks like Ignition style doesn't strictly require this, but it helps to see diffs easier when parameters are added or deleted later."", 'comment_created': datetime.datetime(2020, 8, 7, 4, 57, 1, tzinfo=datetime.timezone.utc), 'commenter': 'mabelzhang', 'type': 'User'}, {'comment_id': 466860641, 'comment_body': ""Modulo division, and division in general, is by far the slowest arithmetic operation, and in general should be avoided. Instead of checking so many modulo divisions' results, a few things will make this much more efficient.\r\n1. Checks that involve only `i` can be done outside of the function, and outside of the `j` loop altogether. You can then save that variable for `i`, and that way you only do that operation once at the beginning of the `i` loop, instead of repeating it for every `j` iteration.\r\n2. If you can have i and j start from 0 (and adjust the rest of the loop accordingly), then modulo will always return 0, and you don't need to have 4 different OR conditions to check for the beginning of the row/column when i or j is 1. You would only need to check one condition, modulo == 0. In general, in the case you need to use the actual value `1` when i and j are 0, just `+1`. Addition is a much cheaper operation than modulo.\r\n3. Instead of doing modulo at all, you can simply increment the i and j loops by `visualizationResolution`. That should eliminate all of the modulo operations and would not need any conditional checks."", 'comment_created': datetime.datetime(2020, 8, 7, 7, 6, 19, tzinfo=datetime.timezone.utc), 'commenter': 'mabelzhang', 'type': 'User'}, {'comment_id': 466865143, 'comment_body': ""I mentioned in the tutorial PR, but here is where publishing all the markers at once as a `/list` can save a lot of time. First, every function call does a lot of operations on the stack frame just passing in the parameters and returning values. So in a large loop, if a heavy function is repeatedly called, it adds a lot of running time. Once you change the loop to increment by `visualizationResolution` (see the other comment), this function will be called many fewer times.\r\n\r\nAnother change here is, only create the markers in `VisualizeNormalForce` and return them, do not publish the markers on every call. Publishing adds a lot of delays. When you have `/list`, publish only once, after you've gotten all the messages at the end of the whole loop."", 'comment_created': datetime.datetime(2020, 8, 7, 7, 17, 29, tzinfo=datetime.timezone.utc), 'commenter': 'mabelzhang', 'type': 'User'}, {'comment_id': 466866887, 'comment_body': 'This comment needs to be more explicit as to what needs to be done. It should be moved to where the variable is declared that needs be replaced with `MatrixX`.\r\n```suggestion\r\n  // todo(anyone) Replace with MatrixX and use vector multiplication instead of for-loops once the following issue is completed:\r\n```', 'comment_created': datetime.datetime(2020, 8, 7, 7, 21, 42, tzinfo=datetime.timezone.utc), 'commenter': 'mabelzhang', 'type': 'User'}, {'comment_id': 466872146, 'comment_body': 'I think you do not need to set nsec to 0, as the default value is already 0:\r\nhttps://developers.google.com/protocol-buffers/docs/proto3#default That eliminates a line called many times in the initialization. This applies to all the `set_nsec(0)` lines, the RGB lines setting them to 0, and other lines setting to 0.', 'comment_created': datetime.datetime(2020, 8, 7, 7, 32, 55, tzinfo=datetime.timezone.utc), 'commenter': 'mabelzhang', 'type': 'User'}, {'comment_id': 466872484, 'comment_body': 'As in the other comment, I think you do not need the lines setting the color components to 0 as that is already the default.', 'comment_created': datetime.datetime(2020, 8, 7, 7, 33, 44, tzinfo=datetime.timezone.utc), 'commenter': 'mabelzhang', 'type': 'User'}, {'comment_id': 466877423, 'comment_body': ""I'm not sure these marker messages should be class variables. It can introduce error, in that if a marker message is configured a certain way, and is reused for another marker, some of the information might not be overwritten and carry to the second marker. Usually markers are created locally within a function, and we let them go out of scope at the end of it. This is what enables you to eliminate function calls setting fields to 0 (see other comment), when the default is already 0. It's arguable that creating and deleting repeatedly takes more time, but you have to be very careful to clear all the values, and someone maintaining the code in the future might not be aware of that. The possibility for error may not be worth it.\r\n\r\nIn any case, once we use `/list` to publish marker arrays, they definitely should not be kept as class variables, because the number of items in the list will be changing, and trying to overwrite an existing list is another source of error. Less error-prone to just start fresh. (We will see if performance drops, and can visualize less frequently or make other tweaks.)"", 'comment_created': datetime.datetime(2020, 8, 7, 7, 44, 26, tzinfo=datetime.timezone.utc), 'commenter': 'mabelzhang', 'type': 'User'}, {'comment_id': 466881455, 'comment_body': 'Does this need to be a class variable? Looks like it is only used in `VisualizeNormalForce`, which is only called from `ComputeNormalForces`, which is only called once every `PostUpdate`. Seems it can be a local variable to `ComputeNormalForces`.', 'comment_created': datetime.datetime(2020, 8, 7, 7, 52, 36, tzinfo=datetime.timezone.utc), 'commenter': 'mabelzhang', 'type': 'User'}, {'comment_id': 466888296, 'comment_body': 'These long lines of multiple `mutable_*` calls look very crowded.\r\nWith nested messages like these, you can initialize each field as a local variable and set them with a short call. It would look a lot cleaner.\r\nFor example, initialize a local variable of type `math::Vector3d`, set its xyz, and call `msgs::Set()` to pass in that `Vector3d` in one go, as opposed to putting each of x, y, and z on a separate line. See example here https://github.com/ignitionrobotics/ign-gazebo/blob/master/src/gui/plugins/component_inspector/ComponentInspector.cc#L688-L691\r\n\r\nSame for Quaternion and Color. This will make the code a lot less repetitive.', 'comment_created': datetime.datetime(2020, 8, 7, 8, 6, 45, tzinfo=datetime.timezone.utc), 'commenter': 'mabelzhang', 'type': 'User'}, {'comment_id': 466891055, 'comment_body': 'The second sentence contradicts the first one in saying one vector is computed for ""each of the camera pixels."" It\'s really talking about each pixel after skipping.\r\n\r\n```suggestion\r\n    /// <visualization_resolution> Number n of pixels to skip when visualizing\r\n    /// the forces. One vector representing a normal force is computed for every nth\r\n    /// pixel. This element must be positive and it is optional.\r\n```', 'comment_created': datetime.datetime(2020, 8, 7, 8, 12, 35, tzinfo=datetime.timezone.utc), 'commenter': 'mabelzhang', 'type': 'User'}, {'comment_id': 466893237, 'comment_body': ""```suggestion\r\n  /// camera's origin in the world frame\r\n```"", 'comment_created': datetime.datetime(2020, 8, 7, 8, 17, 11, tzinfo=datetime.timezone.utc), 'commenter': 'mabelzhang', 'type': 'User'}, {'comment_id': 466894213, 'comment_body': 'Nit: Either do `DepthCamera` for the specific class name, or `depth camera` lowercase for the common noun. Applies to entire file.', 'comment_created': datetime.datetime(2020, 8, 7, 8, 19, 15, tzinfo=datetime.timezone.utc), 'commenter': 'mabelzhang', 'type': 'User'}, {'comment_id': 466895994, 'comment_body': '```suggestion\r\n  /// \\brief Check if a specific point from the Depth Camera is inside\r\n  /// the contact surface.\r\n  /// \\param[in] _point Point from the Depth Camera\r\n```\r\nbecause `return` in a function header is confusing. Sounds like return value.', 'comment_created': datetime.datetime(2020, 8, 7, 8, 22, 49, tzinfo=datetime.timezone.utc), 'commenter': 'mabelzhang', 'type': 'User'}, {'comment_id': 466896211, 'comment_body': '```suggestion\r\n  /// \\param[in] _msg Message from the Depth Camera\r\n```', 'comment_created': datetime.datetime(2020, 8, 7, 8, 23, 18, tzinfo=datetime.timezone.utc), 'commenter': 'mabelzhang', 'type': 'User'}, {'comment_id': 466897987, 'comment_body': 'This comment right now sounds like ""the depth camera is going to preprocess something and then return this data to us.""\r\nInstead, it can simply be:\r\n```suggestion\r\n  /// \\brief Preprocessed depth camera data\r\n```', 'comment_created': datetime.datetime(2020, 8, 7, 8, 26, 50, tzinfo=datetime.timezone.utc), 'commenter': 'mabelzhang', 'type': 'User'}, {'comment_id': 466899138, 'comment_body': 'These `<...>` comments are obvious in code and can be removed. Applies to the following if-statements.', 'comment_created': datetime.datetime(2020, 8, 7, 8, 29, 11, tzinfo=datetime.timezone.utc), 'commenter': 'mabelzhang', 'type': 'User'}, {'comment_id': 466900646, 'comment_body': '`nullptr`s need to be checked in this chain of pointer dereferencing. Each dereference will need to be wrapped in a `if (... != nullptr)`', 'comment_created': datetime.datetime(2020, 8, 7, 8, 32, 6, tzinfo=datetime.timezone.utc), 'commenter': 'mabelzhang', 'type': 'User'}, {'comment_id': 466904176, 'comment_body': ""This variable is never used after it's set, correct? Can it be removed? If so, then this for-loop can be removed too?\r\nUnless you want to check there is > 0 object in contact? Then that should be checked right after the loop."", 'comment_created': datetime.datetime(2020, 8, 7, 8, 39, 19, tzinfo=datetime.timezone.utc), 'commenter': 'mabelzhang', 'type': 'User'}, {'comment_id': 466907096, 'comment_body': ""The comment says depth camera pose, but this is actually getting the model pose. The camera's `<sensor>` tag can additionally have its own pose http://sdformat.org/spec?ver=1.7&elem=sensor#sensor_pose\r\nSo, either update the comment to model pose, or if you indeed meant to get the pose of the camera, then you probably want to get the depth camera within this model, and then get its pose too, and then overlay the two poses.\r\n\r\nNote that there is a `relative_to` attribute within `<pose>` as well. I don't know how easy it is to get everything else's poses. For the sake of time, you could check that that attribute does not exist, or if it exists and specifies something that's not the model's frame, print a warning saying the plugin assumes the sensor pose is wrt the model. Then add a todo here to take care of `<relative_to>` tag. I think the frame name is just the model's name, but to be sure, you'll want to test this to make sure if it does specify the model's frame, that warning is not printed, and the visualizations still look right."", 'comment_created': datetime.datetime(2020, 8, 7, 8, 45, 7, tzinfo=datetime.timezone.utc), 'commenter': 'mabelzhang', 'type': 'User'}, {'comment_id': 466913065, 'comment_body': '```suggestion\r\n  auto *contacts =\r\n```', 'comment_created': datetime.datetime(2020, 8, 7, 8, 56, 58, tzinfo=datetime.timezone.utc), 'commenter': 'mabelzhang', 'type': 'User'}, {'comment_id': 466915015, 'comment_body': 'We can comment out this interpolation block now before we forget. Not having to do this should help performance.', 'comment_created': datetime.datetime(2020, 8, 7, 9, 0, 37, tzinfo=datetime.timezone.utc), 'commenter': 'mabelzhang', 'type': 'User'}, {'comment_id': 466919495, 'comment_body': ""Reordering lines so that the todo doesn't lose its context in case lines get inserted between the two blocks.\r\n```suggestion\r\n  // Check plugin structure\r\n  auto allLinks =\r\n    _ecm.ChildrenByComponents(this->model.Entity(), components::Link());\r\n  // Model should only have 1 link\r\n  // todo(anyone) The plugin should be able to handle more than one link. In\r\n  // that case, one of the links would be the actual tactile sensor.\r\n```"", 'comment_created': datetime.datetime(2020, 8, 7, 9, 9, 19, tzinfo=datetime.timezone.utc), 'commenter': 'mabelzhang', 'type': 'User'}, {'comment_id': 466922131, 'comment_body': ""The `initialized` variable should be set within `Load()`, because there are possibilities of error and the plugin fails to initialize if some conditions, e.g. 1 link, aren't met.\r\n\r\nIt should not be set here. Currently, the following if-statement checking for `initialized` is always true, because if it's not initialized, it is always initialized and set to true here."", 'comment_created': datetime.datetime(2020, 8, 7, 9, 14, 40, tzinfo=datetime.timezone.utc), 'commenter': 'mabelzhang', 'type': 'User'}, {'comment_id': 466923141, 'comment_body': ""`PoseUpdate()` needs to check for `this->dataPtr->initialized` as well. In fact, all methods should check for this flag, in case someone later doesn't know about this assumption and add more calls to other functions from places that have not checked this."", 'comment_created': datetime.datetime(2020, 8, 7, 9, 16, 42, tzinfo=datetime.timezone.utc), 'commenter': 'mabelzhang', 'type': 'User'}, {'comment_id': 466924415, 'comment_body': 'Set `initialized` to true at the end of `Load()`. That way, all of the `ignerr`s that returned would not have set it.', 'comment_created': datetime.datetime(2020, 8, 7, 9, 19, 15, tzinfo=datetime.timezone.utc), 'commenter': 'mabelzhang', 'type': 'User'}, {'comment_id': 466925257, 'comment_body': 'If this turns out to have 0 collision components, you should check for that and `ignerr` and `return`.', 'comment_created': datetime.datetime(2020, 8, 7, 9, 20, 57, tzinfo=datetime.timezone.utc), 'commenter': 'mabelzhang', 'type': 'User'}, {'comment_id': 466925899, 'comment_body': '```suggestion\r\n  // Link should have exactly 1 ContactSensor and 1 DepthCamera sensor\r\n```', 'comment_created': datetime.datetime(2020, 8, 7, 9, 22, 7, tzinfo=datetime.timezone.utc), 'commenter': 'mabelzhang', 'type': 'User'}, {'comment_id': 466926315, 'comment_body': '```suggestion\r\n    ignerr << ""Link must have exactly 1 Depth Camera sensor and ""\r\n```', 'comment_created': datetime.datetime(2020, 8, 7, 9, 22, 54, tzinfo=datetime.timezone.utc), 'commenter': 'mabelzhang', 'type': 'User'}, {'comment_id': 466927399, 'comment_body': ""`<pose>` is an optional tag http://sdformat.org/spec?ver=1.7&elem=sensor#sensor_pose\r\nIf you don't specify a sensor `<pose>` in the SDF file, does this give you identity? If not, you will need to check it is specified and otherwise default to identity."", 'comment_created': datetime.datetime(2020, 8, 7, 9, 25, tzinfo=datetime.timezone.utc), 'commenter': 'mabelzhang', 'type': 'User'}, {'comment_id': 466929143, 'comment_body': ""`<topic>` is an optional tag and has a default value `__default__` http://sdformat.org/spec?ver=1.7&elem=sensor#sensor_topic\r\nThat specification should be respected here. If they don't specify one, just print a warning and say it is assumed to be `__default__`. If it's under a namespace, then just print `ignlog`. Warning is needed if there's any possibility of confusing this topic with the topic of another depth camera in the world."", 'comment_created': datetime.datetime(2020, 8, 7, 9, 28, 35, tzinfo=datetime.timezone.utc), 'commenter': 'mabelzhang', 'type': 'User'}, {'comment_id': 466931351, 'comment_body': 'Do we expect this to be implemented in the next few weeks? If not, you can comment out the parameter like so, and remove the dangling `_value;` line in the method:\r\n```suggestion\r\nvoid OpticalTactilePluginPrivate::Enable(const bool /*_value*/)\r\n```', 'comment_created': datetime.datetime(2020, 8, 7, 9, 32, 50, tzinfo=datetime.timezone.utc), 'commenter': 'mabelzhang', 'type': 'User'}, {'comment_id': 466931804, 'comment_body': '```suggestion\r\n  // The Optical Tactile Sensor is assumed to be box-shaped.\r\n```', 'comment_created': datetime.datetime(2020, 8, 7, 9, 33, 44, tzinfo=datetime.timezone.utc), 'commenter': 'mabelzhang', 'type': 'User'}, {'comment_id': 466931955, 'comment_body': '```suggestion\r\n  // Contacts returned by the ContactSensor in a box shape should be\r\n```', 'comment_created': datetime.datetime(2020, 8, 7, 9, 34, 5, tzinfo=datetime.timezone.utc), 'commenter': 'mabelzhang', 'type': 'User'}, {'comment_id': 466933315, 'comment_body': 'Why is one `u_int32_t`, and the other `uint32_t`? Do they need to be different types?', 'comment_created': datetime.datetime(2020, 8, 7, 9, 36, 52, tzinfo=datetime.timezone.utc), 'commenter': 'mabelzhang', 'type': 'User'}, {'comment_id': 466934796, 'comment_body': 'It is safer to initialize a new temporary pointer to use for processing, instead of changing the original `msgBuffer` and then changing it back.', 'comment_created': datetime.datetime(2020, 8, 7, 9, 39, 59, tzinfo=datetime.timezone.utc), 'commenter': 'mabelzhang', 'type': 'User'}, {'comment_id': 466937765, 'comment_body': ""This `float` cast, should you check `field.datatype == field.DataType.FLOAT32` ahead of time, to make sure the data is really 32-bit float? It only needs to be checked once, so outside the for-ij-loop. If it isn't, it should probably error saying `FLOAT32` is expected for a casting to `float *`, so that the developer knows what to change in code."", 'comment_created': datetime.datetime(2020, 8, 7, 9, 46, 11, tzinfo=datetime.timezone.utc), 'commenter': 'mabelzhang', 'type': 'User'}, {'comment_id': 466940183, 'comment_body': 'Elaborate what -X means conceptually with respect to what', 'comment_created': datetime.datetime(2020, 8, 7, 9, 51, 17, tzinfo=datetime.timezone.utc), 'commenter': 'mabelzhang', 'type': 'User'}, {'comment_id': 466942423, 'comment_body': 'These 3 blocks are very hard to read, especially this block.\r\nSee if you can make it easier to read without upsetting the linter, like this?\r\n```suggestion\r\n  bool insideX =\r\n    (_point.X() >= std::abs(this->depthCameraOffset.X()) -\r\n      this->extendedSensing) &&\r\n    (_point.X() <= (std::abs(this->depthCameraOffset.X()) +\r\n      this->sensorSize.X() + this->extendedSensing));\r\n```', 'comment_created': datetime.datetime(2020, 8, 7, 9, 55, 44, tzinfo=datetime.timezone.utc), 'commenter': 'mabelzhang', 'type': 'User'}, {'comment_id': 466942978, 'comment_body': 'Similarly for this block and the block below. Try this with linter for readability:\r\n```suggestion\r\n  bool insideY =\r\n    (_point.Y() <= this->sensorSize.Y() / 2 + this->extendedSensing) &&\r\n    (_point.Y() >= - this->sensorSize.Y() / 2 - this->extendedSensing);\r\n```', 'comment_created': datetime.datetime(2020, 8, 7, 9, 56, 50, tzinfo=datetime.timezone.utc), 'commenter': 'mabelzhang', 'type': 'User'}, {'comment_id': 466944677, 'comment_body': 'Replace `will be` with something more clear. `should be` (i.e. and are not)? Or `are`?', 'comment_created': datetime.datetime(2020, 8, 7, 10, 0, 23, tzinfo=datetime.timezone.utc), 'commenter': 'mabelzhang', 'type': 'User'}, {'comment_id': 467111964, 'comment_body': 'The problem is that `msgs::Set()` are [implemented](https://ignitionrobotics.org/api/msgs/5.1/Utility_8hh.html) for `Vector3d`, `Quaterniond` and `Pose3d` and I am using `float`. \r\n`Color` can be changed though.', 'comment_created': datetime.datetime(2020, 8, 7, 15, 28, 51, tzinfo=datetime.timezone.utc), 'commenter': 'mcres', 'type': 'User'}, {'comment_id': 467115492, 'comment_body': ""That's actually used for publishing the messages, which is not in the scope of this PR: https://github.com/mcres/ign-gazebo/blob/optical_tactile_plugin_2/src/systems/optical_tactile_plugin/OpticalTactilePlugin.cc#L648\r\n\r\nIf it's not a problem I'd like to merge it that way"", 'comment_created': datetime.datetime(2020, 8, 7, 15, 35, 18, tzinfo=datetime.timezone.utc), 'commenter': 'mcres', 'type': 'User'}, {'comment_id': 467116077, 'comment_body': 'Do you say that because `InterpolateContactData` is not publishing the contacts?\r\nShould I write a comment explaining why is it commented out?', 'comment_created': datetime.datetime(2020, 8, 7, 15, 36, 20, tzinfo=datetime.timezone.utc), 'commenter': 'mcres', 'type': 'User'}, {'comment_id': 467132442, 'comment_body': 'Already implemented in another branch: https://github.com/mcres/ign-gazebo/blob/optical_tactile_plugin_2/src/systems/optical_tactile_plugin/OpticalTactilePlugin.cc#L613-L626', 'comment_created': datetime.datetime(2020, 8, 7, 16, 6, tzinfo=datetime.timezone.utc), 'commenter': 'mcres', 'type': 'User'}, {'comment_id': 467133672, 'comment_body': 'Nope, error there.', 'comment_created': datetime.datetime(2020, 8, 7, 16, 8, 14, tzinfo=datetime.timezone.utc), 'commenter': 'mcres', 'type': 'User'}, {'comment_id': 467752738, 'comment_body': 'If not specified, it gives you a `(0, 0, 0, 0, 0, 0)` pose. I think this is well documented in the tutorial and in the example world, so if the user skips the `<pose>` tag I should store that value.', 'comment_created': datetime.datetime(2020, 8, 10, 8, 21, 43, tzinfo=datetime.timezone.utc), 'commenter': 'mcres', 'type': 'User'}, {'comment_id': 467762675, 'comment_body': 'Yeah we should check that.\r\nI understand that you suggest checking only the first time we receive a message from the depth camera? Or is it every time? Probably the former is enough.', 'comment_created': datetime.datetime(2020, 8, 10, 8, 42, 15, tzinfo=datetime.timezone.utc), 'commenter': 'mcres', 'type': 'User'}, {'comment_id': 467792581, 'comment_body': ""About `/list`, check this comment: https://github.com/ignitionrobotics/ign-gazebo/pull/250#discussion_r467732754\r\n\r\nLooking at what the `/marker` service [does](https://github.com/ignitionrobotics/ign-gazebo/blob/master/src/rendering/MarkerManager.cc#L592-L597), it shouldn't be very difficult to implement the service we're looking for.\r\nShould I make an issue + TODO comment?"", 'comment_created': datetime.datetime(2020, 8, 10, 9, 41, 29, tzinfo=datetime.timezone.utc), 'commenter': 'mcres', 'type': 'User'}, {'comment_id': 467796376, 'comment_body': ""> Instead of doing modulo at all, you can simply increment the i and j loops by visualizationResolution. That should eliminate all of the modulo operations and would not need any conditional checks.\r\n\r\nI like this one, but regarding normal forces we have computation (which will be published in a message in the future) and visualization inside the loop. Does it make sense to not computing the normal forces for the whole range of the depth camera? And if it does, should that resolution be the same as the visualization's?"", 'comment_created': datetime.datetime(2020, 8, 10, 9, 49, 28, tzinfo=datetime.timezone.utc), 'commenter': 'mcres', 'type': 'User'}, {'comment_id': 467805844, 'comment_body': ""> It can introduce error, in that if a marker message is configured a certain way, and is reused for another marker, some of the information might not be overwritten and carry to the second marker.\r\n\r\nHmm, I see your point. However, we've seen the plugin's performance is not that good when it comes to visualization, so continuously creating and deleting will make things worse (significantly?). Besides, I can't think why somebody would overwrite the messages variables to use them for something else. These variables are documented and the structure of the `OpticalTactilePluginVisualization` class makes sense to me (I'll admit I'm probably biased there!)\r\n\r\n> once we use /list to publish marker arrays\r\n\r\n(see comment above)"", 'comment_created': datetime.datetime(2020, 8, 10, 10, 8, 53, tzinfo=datetime.timezone.utc), 'commenter': 'mcres', 'type': 'User'}, {'comment_id': 467819439, 'comment_body': 'It computes `steps2` in the inner loop and `steps1 + 1` in the outer loop, but the thing is that the total number of steps is not the same than the total number of points `interpolatedVector` passes through', 'comment_created': datetime.datetime(2020, 8, 10, 10, 39, 23, tzinfo=datetime.timezone.utc), 'commenter': 'mcres', 'type': 'User'}, {'comment_id': 467972075, 'comment_body': ""> The comment says depth camera pose, but this is actually getting the model pose\r\n\r\nYes, I was actually referring to the model pose.\r\n\r\n> I think the frame name is just the model's name, but to be sure, you'll want to test this\r\n\r\nI thought the same, but I've actually tested removing the attribute, setting it to `ground_plane` and even names not related to simulation and it seems the plugin keeps doing OK... weird. I think that an `ignwarn` if the model's name and `relative_to` value are not equal is still a good idea.\r\n"", 'comment_created': datetime.datetime(2020, 8, 10, 15, 9, 22, tzinfo=datetime.timezone.utc), 'commenter': 'mcres', 'type': 'User'}, {'comment_id': 468264294, 'comment_body': 'Float can always be automatically promoted to double. It should let you do it. Does the compiler complain?', 'comment_created': datetime.datetime(2020, 8, 11, 0, 50, 28, tzinfo=datetime.timezone.utc), 'commenter': 'mabelzhang', 'type': 'User'}, {'comment_id': 468265024, 'comment_body': 'Yeah just once should be sufficient, to save time as much as possible. Presumably the user would not have two nodes both publishing depth images to the same topic - they can, but that is not usually recommended as it would mess up the topic, timing, etc.', 'comment_created': datetime.datetime(2020, 8, 11, 0, 53, 3, tzinfo=datetime.timezone.utc), 'commenter': 'mabelzhang', 'type': 'User'}, {'comment_id': 468266171, 'comment_body': ""I think we said we don't need to interpolate anymore, because it is limited to a box shape, and we only did it as a placeholder before we had depth camera images, right? I don't remember if we decided something else. I think we only need to keep the actual contacts from the physics engine, and not the ones interpolated, because they can be very off if the contacts are on a mesh.\r\n\r\nYou could comment out for now and put a TODO to remove it, so that we remember to remove it in the final version."", 'comment_created': datetime.datetime(2020, 8, 11, 0, 57, 47, tzinfo=datetime.timezone.utc), 'commenter': 'mabelzhang', 'type': 'User'}, {'comment_id': 468268114, 'comment_body': 'So to clarify, why does the inner loop only needs `steps2` iterations? Does it not also need `steps2 + 1`, to get the last row?', 'comment_created': datetime.datetime(2020, 8, 11, 1, 5, 11, tzinfo=datetime.timezone.utc), 'commenter': 'mabelzhang', 'type': 'User'}, {'comment_id': 468269008, 'comment_body': ""Hmm I don't understand what you mean when you say error there. Do you mean compiler error, or that it was a typo in code?\r\nActually, I took another look in the code where they are initialized in lines 721-723. They are both initialized to `uint64_t`, so the method should take the same type as what they're initialized to be."", 'comment_created': datetime.datetime(2020, 8, 11, 1, 8, 47, tzinfo=datetime.timezone.utc), 'commenter': 'mabelzhang', 'type': 'User'}, {'comment_id': 468271747, 'comment_body': ""Right. I am saying this should not be a required tag, as is implied by the following if-block, which errors and returns if it's not specified. It should be kept optional and the identity be used if it's not specified."", 'comment_created': datetime.datetime(2020, 8, 11, 1, 18, 36, tzinfo=datetime.timezone.utc), 'commenter': 'mabelzhang', 'type': 'User'}, {'comment_id': 468274884, 'comment_body': ""Do you mean the normals represented as an RGB image? Yes, I think we will need to sacrifice the resolution at the benefit of performance. It should also be more intuitive to the user, that the resolution they specify applies to all the visualizations.\r\n\r\nFor the other messages (ones that are not an RGB image), the resolution of the normals is independent of the original depth resolution. The normal computation is only using the raw depth values, right? At that, it is only using the immediate neighboring pixels, with indices changing at a magnitude of 1 (i.e. i +/- 1, j +/- 1). So it shouldn't matter what resolution the normals are computed on, the pixel operations on the raw depth values will be the same."", 'comment_created': datetime.datetime(2020, 8, 11, 1, 29, 31, tzinfo=datetime.timezone.utc), 'commenter': 'mabelzhang', 'type': 'User'}, {'comment_id': 468276686, 'comment_body': ""We will keep this comment on hold, until we figure out whether the markers can be published in a list. It is a big hit on performance, and it is not an option - it's a must. It's just a matter of when.\r\n\r\nReusing the variable is not a deliberate act, it is usually an unintended bug, which can happen in future maintenance and additions. Usually, variables that don't need to be class scope are declared at a local scope just as good practice."", 'comment_created': datetime.datetime(2020, 8, 11, 1, 35, 56, tzinfo=datetime.timezone.utc), 'commenter': 'mabelzhang', 'type': 'User'}, {'comment_id': 468278088, 'comment_body': ""Ah, sorry I did not look at the method body closely for `/list`. Looks like Ignition doesn't have the capability to publish an array of markers.\r\n\r\nHowever, @chapulina has suggested using lines and points, instead of cylinders and spheres. https://github.com/ignitionrobotics/ign-msgs/blob/6b4430a91e39e66ad6e9c2844c824e36aebc8b48/proto/ignition/msgs/marker.proto#L147-L154\r\n\r\nLINE_LIST and POINTS probably do the same as their counterparts in RViz and should give you similar results. They are essentially arrays, but they only need to be published once. You would `push_back` each point into the vector, and only publish the vector once. http://wiki.ros.org/rviz/DisplayTypes/Marker#Line_List_.28LINE_LIST.3D5.29"", 'comment_created': datetime.datetime(2020, 8, 11, 1, 41, 31, tzinfo=datetime.timezone.utc), 'commenter': 'mabelzhang', 'type': 'User'}, {'comment_id': 468278421, 'comment_body': 'Following up on https://github.com/ignitionrobotics/ign-gazebo/pull/229#discussion_r468278088 , if that improves the performance a lot, we can demote this to a local variable.\r\n\r\nWith a `std::vector`, reusing the variable is especially error-prone, because the developer needs to remember to do `vector.clear()` at the beginning of every iteration. That can be easily forgotten, for example, it is cleared in preUpdate, then someone removes preUpdate() in the future, and forgets to move the `clear` line to another method. Or they move the clear to postUpdate, and then decide to add preUpdate back in, changes something to the markers vector in preUpdate, but forget to move the clear from postUpdate to preUpdate so the changes are cleared by mistake, etc. Unnecessary bugs happen a lot with not clearing vectors, and they can be very time-consuming to debug. That is why keeping variables at the scope they should be at is good practice.', 'comment_created': datetime.datetime(2020, 8, 11, 1, 43, tzinfo=datetime.timezone.utc), 'commenter': 'mabelzhang', 'type': 'User'}, {'comment_id': 468281803, 'comment_body': ""Huh! That is weird. I'm seeing sdformat tests that in `ign_TEST.cc` https://github.com/osrf/sdformat/blob/master/src/ign_TEST.cc#L499\r\n\r\nLooks like it wants link, joint, or frame name. Here's an example usage https://github.com/osrf/sdformat/blob/master/test/sdf/model_frame_relative_to.sdf\r\n\r\nSo probably use the link name instead of model name for the `ignwarn` check."", 'comment_created': datetime.datetime(2020, 8, 11, 1, 56, 32, tzinfo=datetime.timezone.utc), 'commenter': 'mabelzhang', 'type': 'User'}, {'comment_id': 468288940, 'comment_body': ""The `relative_to` attribute of poses for sensors is resolved during [creation]( https://github.com/ignitionrobotics/ign-gazebo/blob/fd37a777122e214b8051ea404eaaa151d110b52e/src/SdfEntityCreator.cc#L519) and it is expressed relative to the parent element (link or joint) that contains the sensor, so there is no need to handle the `relative_to` attribute here. This is true for all other SDFormat elements as well so long as their pose is defined in the SDFormat spec. i.e, this doesn't include `<pose>` elements inside `<plugin>` for example."", 'comment_created': datetime.datetime(2020, 8, 11, 2, 23, 58, tzinfo=datetime.timezone.utc), 'commenter': 'azeey', 'type': 'User'}, {'comment_id': 468301936, 'comment_body': 'Cool, thanks for the clarification!', 'comment_created': datetime.datetime(2020, 8, 11, 3, 14, 10, tzinfo=datetime.timezone.utc), 'commenter': 'mabelzhang', 'type': 'User'}, {'comment_id': 468634575, 'comment_body': ""> LINE_LIST and POINTS probably do the same as their counterparts in RViz and should give you similar results. They are essentially arrays, but they only need to be published once\r\n\r\nI've tried that, and it makes a huge difference. I don't know if that difference comes from transporting only one message or rendering a simpler figure though.\r\n\r\n> Looking at what the /marker service does, it shouldn't be very difficult to implement the service we're looking for.\r\nShould I make an issue + TODO comment?\r\n\r\nI think that I should do this as well, it could be a nice `good first issue`. Besides, if the performance using cylinders and spheres is the same, we should probably use those because it looks way cooler (see the difference between the image below and the one on top).\r\n\r\nHere's a screenshot with LINE_LIST and POINTS. Btw, distinguishing the points is really difficult, so I'll probably remove those:\r\n\r\n![line_list](https://user-images.githubusercontent.com/14854080/89909840-cc54d600-dbef-11ea-92f8-582a2ccca9f5.png)\r\n"", 'comment_created': datetime.datetime(2020, 8, 11, 14, 41, 9, tzinfo=datetime.timezone.utc), 'commenter': 'mcres', 'type': 'User'}, {'comment_id': 468651834, 'comment_body': ""> Reusing the variable is not a deliberate act, it is usually an unintended bug, which can happen in future maintenance and additions. Usually, variables that don't need to be class scope are declared at a local scope just as good practice.\r\n\r\nI understand. As seen in https://github.com/ignitionrobotics/ign-gazebo/pull/229#discussion_r468634575, publishing a list improves the performance, so I'm demoting to a local variable. Should I do this for the normal forces _and_ the sensor marker? They are published each time the depth camera publishes an image and in each `PostUpdate` call, respectively."", 'comment_created': datetime.datetime(2020, 8, 11, 15, 4, 6, tzinfo=datetime.timezone.utc), 'commenter': 'mcres', 'type': 'User'}, {'comment_id': 468658301, 'comment_body': ""I meant I'm using `Vector3f`, `Quaternionf` and `Pose3f` (float) instead of `Vector3d`, `Quaterniond` and `Pose3d` (double), so I can't use `msgs::Set()` between those types"", 'comment_created': datetime.datetime(2020, 8, 11, 15, 13, 7, tzinfo=datetime.timezone.utc), 'commenter': 'mcres', 'type': 'User'}, {'comment_id': 468668668, 'comment_body': ""Oh I see, but I'm checking the `<update_rate>` tag in that block."", 'comment_created': datetime.datetime(2020, 8, 11, 15, 26, 55, tzinfo=datetime.timezone.utc), 'commenter': 'mcres', 'type': 'User'}, {'comment_id': 468670543, 'comment_body': 'Sorry, I meant it was a typo.', 'comment_created': datetime.datetime(2020, 8, 11, 15, 29, 22, tzinfo=datetime.timezone.utc), 'commenter': 'mcres', 'type': 'User'}, {'comment_id': 468697496, 'comment_body': ""Because one of the rows is already being got [here](https://github.com/ignitionrobotics/ign-gazebo/blob/16732f6f7b7a1e36f743fed07458296bafa177c1/src/systems/optical_tactile_plugin/OpticalTactilePlugin.cc#L409). The reason of that if-block statement is to not make `interpolatedVector` go outside of the rectangle drawn by the contacts' data."", 'comment_created': datetime.datetime(2020, 8, 11, 16, 9, 26, tzinfo=datetime.timezone.utc), 'commenter': 'mcres', 'type': 'User'}, {'comment_id': 468980593, 'comment_body': ""Both. The simpler geometry certainly makes a difference, but the reduction in messages as well. That is my experience with RViz. The performance would not be the same with cylinders and spheres, because they are each rendering many faces. Round geometry especially takes longer. I think we should keep it lines and points for this plugin, because that will enable adding many more instances of the plugin. I didn't think of this at the beginning but that is where we should have started.\r\n\r\nTry making the point size larger. In RViz, the points are rendered as a single square, and as you rotate the view, you can see them better. Don't remove them, because there are cases when normals may be invalid and the points are the only information the user can go by.\r\n\r\nFeel free to create an issue, but we don't need it for this plugin."", 'comment_created': datetime.datetime(2020, 8, 12, 3, 15, 44, tzinfo=datetime.timezone.utc), 'commenter': 'mabelzhang', 'type': 'User'}, {'comment_id': 468981765, 'comment_body': 'I was thinking definitely `positionMarkerMsg` and `forceMarkerMsg`, which are the arrays I believe. The sensor can be kept as a box. I think it is a good idea to keep it local as well.', 'comment_created': datetime.datetime(2020, 8, 12, 3, 20, 50, tzinfo=datetime.timezone.utc), 'commenter': 'mabelzhang', 'type': 'User'}, {'comment_id': 468984924, 'comment_body': ""The variables like `forceMarkerSensorPosition` in this method are all local scope, and you can use `Vector3d` etc for them. That will not take up much extra space since it's only a few variables, and they only exist for the duration of this method. With the messages being in double, you won't be saving much space anyway. That way, the following blocks will be a lot cleaner."", 'comment_created': datetime.datetime(2020, 8, 12, 3, 33, 56, tzinfo=datetime.timezone.utc), 'commenter': 'mabelzhang', 'type': 'User'}, {'comment_id': 468985419, 'comment_body': 'Oh oops sorry I misread.', 'comment_created': datetime.datetime(2020, 8, 12, 3, 35, 49, tzinfo=datetime.timezone.utc), 'commenter': 'mabelzhang', 'type': 'User'}, {'comment_id': 468988831, 'comment_body': ""Hmm I think a few comments in this loop, at least a comment at the top of this loop noting what the indexing is doing, and changing the variable names `1` and `2` to something referring to row and column like `r` and `c`, would make this method more readable. Or is it not known whether it's row or column because the directions might change?\r\nAre the 4 points returned in clockwise / counterclockwise order? A comment on that where contacts 1-4 are declared also helps the reader.\r\n\r\nI just realized that this is a method that I said elsewhere that we should remove / comment out? I can't find that spot anymore. Is this that method? If we're going to remove it anyway, then we don't need to spend time on it."", 'comment_created': datetime.datetime(2020, 8, 12, 3, 49, 54, tzinfo=datetime.timezone.utc), 'commenter': 'mabelzhang', 'type': 'User'}, {'comment_id': 469072832, 'comment_body': ""> I just realized that this is a method that I said elsewhere that we should remove / comment out? I can't find that spot anymore. Is this that method? If we're going to remove it anyway, then we don't need to spend time on it.\r\n\r\nYeah, here's the comment https://github.com/ignitionrobotics/ign-gazebo/pull/229#discussion_r466915015"", 'comment_created': datetime.datetime(2020, 8, 12, 7, 52, 40, tzinfo=datetime.timezone.utc), 'commenter': 'mcres', 'type': 'User'}, {'comment_id': 469259046, 'comment_body': ""> So it shouldn't matter what resolution the normals are computed on, the pixel operations on the raw depth values will be the same.\r\n\r\nCorrect, just asked in case we wouldn't want different visualization & computation resolutions."", 'comment_created': datetime.datetime(2020, 8, 12, 13, 28, 31, tzinfo=datetime.timezone.utc), 'commenter': 'mcres', 'type': 'User'}, {'comment_id': 469294540, 'comment_body': 'In that case, if it fails to initialize it will continuously try to `Load()` and printing an error/warning many times per second.\r\nOn the other hand, if `initialize` is set like it currently is, it will print the error/warning once and will continue running, probably failing or doing weird things.\r\n\r\nAnother option is using another flag, e.g. `triedToLoad` to make sure we only `Load()` once. That way, if the plugin fails to load, the error/warning will only be printed once, and after that the plugin will do nothing.', 'comment_created': datetime.datetime(2020, 8, 12, 14, 18, 49, tzinfo=datetime.timezone.utc), 'commenter': 'mcres', 'type': 'User'}, {'comment_id': 469313751, 'comment_body': ""> Try making the point size larger\r\n\r\nHmm I don't know if this is currently possible. I've tried the `scale` field, but all it does is changing the pose of the marker, but the size is always the same. The `pose` field also changes the pose of the marker."", 'comment_created': datetime.datetime(2020, 8, 12, 14, 45, 3, tzinfo=datetime.timezone.utc), 'commenter': 'mcres', 'type': 'User'}, {'comment_id': 469472514, 'comment_body': ""Yeah I saw that, but the line number and method name there didn't match with this version, so I was confused. Now I see that that comment is from the 20th commit, and this set is only the first 19, so that comment wasn't showing here.\r\n\r\nSo here are the two options. I would say just remove this method since we're not going to use it anymore. You can always retrieve it from Git history if you need it later. If you really want to keep it now, then it should be tidied up with additional comments as mentioned above, and then the method call commented out."", 'comment_created': datetime.datetime(2020, 8, 12, 18, 54, 43, tzinfo=datetime.timezone.utc), 'commenter': 'mabelzhang', 'type': 'User'}, {'comment_id': 469474039, 'comment_body': ""Sounds like a bug, either in Ignition or in the plugin. I looked for where the marker rendering code sets the scale, and it looks very simple, one block handling all types of markers https://github.com/ignitionrobotics/ign-gazebo/blob/master/src/rendering/MarkerManager.cc#L255\r\n\r\nMaybe add a printout from the `has_scale` block and `has_pose` block there and see if it's getting the values you input? Then you can go from there to see where the bug is. If you find the bug is in Ignition, we should open an issue."", 'comment_created': datetime.datetime(2020, 8, 12, 18, 57, 27, tzinfo=datetime.timezone.utc), 'commenter': 'mabelzhang', 'type': 'User'}, {'comment_id': 469474806, 'comment_body': ""It's typical practice to have a class Boolean variable e.g. `initErrorPrinted`, so that it only prints once. In the printout, you can add in parentheses `(only printed once)`. You don't need to limit how many times `Load()` is called, because something could have changed dynamically that make later calls to `Load()` succeed, e.g. someone injects into the SDF or changes the components in the ECM."", 'comment_created': datetime.datetime(2020, 8, 12, 18, 58, 55, tzinfo=datetime.timezone.utc), 'commenter': 'mabelzhang', 'type': 'User'}, {'comment_id': 469805612, 'comment_body': 'Removed the method in e216bb2', 'comment_created': datetime.datetime(2020, 8, 13, 9, 3, 23, tzinfo=datetime.timezone.utc), 'commenter': 'mcres', 'type': 'User'}, {'comment_id': 469805980, 'comment_body': 'e216bb2', 'comment_created': datetime.datetime(2020, 8, 13, 9, 4, 1, tzinfo=datetime.timezone.utc), 'commenter': 'mcres', 'type': 'User'}, {'comment_id': 469806533, 'comment_body': 'e216bb2', 'comment_created': datetime.datetime(2020, 8, 13, 9, 4, 56, tzinfo=datetime.timezone.utc), 'commenter': 'mcres', 'type': 'User'}, {'comment_id': 469808099, 'comment_body': ""> Maybe add a printout from the has_scale block and has_pose block there and see if it's getting the values you input? \r\n\r\nThe data passed is the same that I set. I couldn't find the issue though, but it must be in `ign-rendering`.\r\nThe rest of these comments is addressed in e216bb2"", 'comment_created': datetime.datetime(2020, 8, 13, 9, 7, 14, tzinfo=datetime.timezone.utc), 'commenter': 'mcres', 'type': 'User'}, {'comment_id': 469808301, 'comment_body': 'e216bb2', 'comment_created': datetime.datetime(2020, 8, 13, 9, 7, 36, tzinfo=datetime.timezone.utc), 'commenter': 'mcres', 'type': 'User'}, {'comment_id': 469808542, 'comment_body': 'e216bb2', 'comment_created': datetime.datetime(2020, 8, 13, 9, 7, 57, tzinfo=datetime.timezone.utc), 'commenter': 'mcres', 'type': 'User'}, {'comment_id': 469808642, 'comment_body': 'e216bb2', 'comment_created': datetime.datetime(2020, 8, 13, 9, 8, 7, tzinfo=datetime.timezone.utc), 'commenter': 'mcres', 'type': 'User'}, {'comment_id': 469808790, 'comment_body': 'e216bb2', 'comment_created': datetime.datetime(2020, 8, 13, 9, 8, 23, tzinfo=datetime.timezone.utc), 'commenter': 'mcres', 'type': 'User'}, {'comment_id': 469810053, 'comment_body': ""e216bb2\r\n\r\nI deleted the variable, as now I'm using one marker only (a list of points and another one lines)."", 'comment_created': datetime.datetime(2020, 8, 13, 9, 10, 25, tzinfo=datetime.timezone.utc), 'commenter': 'mcres', 'type': 'User'}, {'comment_id': 469812759, 'comment_body': ""e216bb2\r\n\r\nI've `msgs::Set` the `Color` msgs, and for the remaining `Pose3d` msg needed I wrote [this](https://github.com/ignitionrobotics/ign-gazebo/blob/e216bb2132d0a77ca77dc31a50435487273fbe09/src/systems/optical_tactile_plugin/Visualization.cc#L79-L83). [Same](https://github.com/ignitionrobotics/ign-gazebo/blob/e216bb2132d0a77ca77dc31a50435487273fbe09/src/systems/optical_tactile_plugin/Visualization.cc#L181-L191) for the `Vector3d` msgs."", 'comment_created': datetime.datetime(2020, 8, 13, 9, 14, 46, tzinfo=datetime.timezone.utc), 'commenter': 'mcres', 'type': 'User'}, {'comment_id': 469813227, 'comment_body': 'e216bb2', 'comment_created': datetime.datetime(2020, 8, 13, 9, 15, 24, tzinfo=datetime.timezone.utc), 'commenter': 'mcres', 'type': 'User'}, {'comment_id': 469813289, 'comment_body': 'e216bb2', 'comment_created': datetime.datetime(2020, 8, 13, 9, 15, 30, tzinfo=datetime.timezone.utc), 'commenter': 'mcres', 'type': 'User'}, {'comment_id': 469813375, 'comment_body': 'e216bb2', 'comment_created': datetime.datetime(2020, 8, 13, 9, 15, 37, tzinfo=datetime.timezone.utc), 'commenter': 'mcres', 'type': 'User'}, {'comment_id': 469813641, 'comment_body': 'e216bb2', 'comment_created': datetime.datetime(2020, 8, 13, 9, 15, 58, tzinfo=datetime.timezone.utc), 'commenter': 'mcres', 'type': 'User'}, {'comment_id': 469813909, 'comment_body': 'e216bb2', 'comment_created': datetime.datetime(2020, 8, 13, 9, 16, 26, tzinfo=datetime.timezone.utc), 'commenter': 'mcres', 'type': 'User'}, {'comment_id': 469814147, 'comment_body': 'e216bb2', 'comment_created': datetime.datetime(2020, 8, 13, 9, 16, 49, tzinfo=datetime.timezone.utc), 'commenter': 'mcres', 'type': 'User'}, {'comment_id': 469814215, 'comment_body': 'e216bb2', 'comment_created': datetime.datetime(2020, 8, 13, 9, 16, 56, tzinfo=datetime.timezone.utc), 'commenter': 'mcres', 'type': 'User'}, {'comment_id': 469814288, 'comment_body': 'e216bb2', 'comment_created': datetime.datetime(2020, 8, 13, 9, 17, 4, tzinfo=datetime.timezone.utc), 'commenter': 'mcres', 'type': 'User'}, {'comment_id': 469814786, 'comment_body': 'e216bb2', 'comment_created': datetime.datetime(2020, 8, 13, 9, 17, 52, tzinfo=datetime.timezone.utc), 'commenter': 'mcres', 'type': 'User'}, {'comment_id': 469815051, 'comment_body': 'e216bb2', 'comment_created': datetime.datetime(2020, 8, 13, 9, 18, 19, tzinfo=datetime.timezone.utc), 'commenter': 'mcres', 'type': 'User'}, {'comment_id': 469815633, 'comment_body': 'Removed method: https://github.com/ignitionrobotics/ign-gazebo/pull/229#discussion_r469805612', 'comment_created': datetime.datetime(2020, 8, 13, 9, 19, 19, tzinfo=datetime.timezone.utc), 'commenter': 'mcres', 'type': 'User'}, {'comment_id': 469817074, 'comment_body': 'Removed method: https://github.com/ignitionrobotics/ign-gazebo/pull/229#discussion_r469805612', 'comment_created': datetime.datetime(2020, 8, 13, 9, 21, 42, tzinfo=datetime.timezone.utc), 'commenter': 'mcres', 'type': 'User'}, {'comment_id': 469817268, 'comment_body': 'e216bb2', 'comment_created': datetime.datetime(2020, 8, 13, 9, 22, 3, tzinfo=datetime.timezone.utc), 'commenter': 'mcres', 'type': 'User'}, {'comment_id': 469817353, 'comment_body': 'e216bb2', 'comment_created': datetime.datetime(2020, 8, 13, 9, 22, 11, tzinfo=datetime.timezone.utc), 'commenter': 'mcres', 'type': 'User'}, {'comment_id': 469817613, 'comment_body': 'e216bb2', 'comment_created': datetime.datetime(2020, 8, 13, 9, 22, 42, tzinfo=datetime.timezone.utc), 'commenter': 'mcres', 'type': 'User'}, {'comment_id': 469817769, 'comment_body': 'e216bb2', 'comment_created': datetime.datetime(2020, 8, 13, 9, 22, 59, tzinfo=datetime.timezone.utc), 'commenter': 'mcres', 'type': 'User'}, {'comment_id': 469817965, 'comment_body': 'e216bb2', 'comment_created': datetime.datetime(2020, 8, 13, 9, 23, 21, tzinfo=datetime.timezone.utc), 'commenter': 'mcres', 'type': 'User'}, {'comment_id': 469818249, 'comment_body': 'e216bb2', 'comment_created': datetime.datetime(2020, 8, 13, 9, 23, 52, tzinfo=datetime.timezone.utc), 'commenter': 'mcres', 'type': 'User'}, {'comment_id': 469818863, 'comment_body': 'e216bb2', 'comment_created': datetime.datetime(2020, 8, 13, 9, 24, 52, tzinfo=datetime.timezone.utc), 'commenter': 'mcres', 'type': 'User'}, {'comment_id': 469819644, 'comment_body': 'Removed method: #229 (comment)', 'comment_created': datetime.datetime(2020, 8, 13, 9, 26, 8, tzinfo=datetime.timezone.utc), 'commenter': 'mcres', 'type': 'User'}, {'comment_id': 469820253, 'comment_body': 'Removed method: #229 (comment)', 'comment_created': datetime.datetime(2020, 8, 13, 9, 27, 13, tzinfo=datetime.timezone.utc), 'commenter': 'mcres', 'type': 'User'}, {'comment_id': 469820444, 'comment_body': 'e216bb2', 'comment_created': datetime.datetime(2020, 8, 13, 9, 27, 34, tzinfo=datetime.timezone.utc), 'commenter': 'mcres', 'type': 'User'}, {'comment_id': 469820576, 'comment_body': 'e216bb2', 'comment_created': datetime.datetime(2020, 8, 13, 9, 27, 50, tzinfo=datetime.timezone.utc), 'commenter': 'mcres', 'type': 'User'}, {'comment_id': 469820877, 'comment_body': 'e216bb2', 'comment_created': datetime.datetime(2020, 8, 13, 9, 28, 21, tzinfo=datetime.timezone.utc), 'commenter': 'mcres', 'type': 'User'}, {'comment_id': 469821067, 'comment_body': 'e216bb2', 'comment_created': datetime.datetime(2020, 8, 13, 9, 28, 44, tzinfo=datetime.timezone.utc), 'commenter': 'mcres', 'type': 'User'}, {'comment_id': 469821292, 'comment_body': 'e216bb2', 'comment_created': datetime.datetime(2020, 8, 13, 9, 29, 7, tzinfo=datetime.timezone.utc), 'commenter': 'mcres', 'type': 'User'}, {'comment_id': 469821523, 'comment_body': 'e216bb2', 'comment_created': datetime.datetime(2020, 8, 13, 9, 29, 33, tzinfo=datetime.timezone.utc), 'commenter': 'mcres', 'type': 'User'}, {'comment_id': 469821775, 'comment_body': 'e216bb2', 'comment_created': datetime.datetime(2020, 8, 13, 9, 29, 58, tzinfo=datetime.timezone.utc), 'commenter': 'mcres', 'type': 'User'}, {'comment_id': 474255083, 'comment_body': 'The version should be `1.7` since you are using frame semantics features like the `relative_to` attribute of `<pose>`', 'comment_created': datetime.datetime(2020, 8, 20, 20, 30, 48, tzinfo=datetime.timezone.utc), 'commenter': 'azeey', 'type': 'User'}, {'comment_id': 474260228, 'comment_body': 'nit: This can be removed. The compiler generator destructor should be sufficient.', 'comment_created': datetime.datetime(2020, 8, 20, 20, 41, 16, tzinfo=datetime.timezone.utc), 'commenter': 'azeey', 'type': 'User'}, {'comment_id': 474260760, 'comment_body': 'nit: Touch plugin', 'comment_created': datetime.datetime(2020, 8, 20, 20, 42, 17, tzinfo=datetime.timezone.utc), 'commenter': 'azeey', 'type': 'User'}, {'comment_id': 474263016, 'comment_body': ""I see you're using `ignlog`. I haven't seen that used to communicate parameter related messages in other systems. Consider using `igndbg` or `ignmsg`."", 'comment_created': datetime.datetime(2020, 8, 20, 20, 47, 1, tzinfo=datetime.timezone.utc), 'commenter': 'azeey', 'type': 'User'}, {'comment_id': 474269882, 'comment_body': ""I don't think this is a reliable way of getting the `<collision>`. For one thing, [`sdf::Element::GetElement`](http://osrf-distributions.s3.amazonaws.com/sdformat/api/9.0.0/classsdf_1_1v9_1_1Element.html#a1dfae8b668269dbd8c6ced89007aa259) never returns a `nullptr` because it creates the queried element if it doesn't exist. My suggestions are the following:\r\n1. Since a contact sensor is required, you can first check through the links to see which link has the contact sensor. If there is no contact sensor, emit an error because the plugin requires it. If you found one, use the collision specified by the sensor in the `<contact>` parameter.\r\n2. Or, add new parameters to the OpticalTacticlePlugin that specify which link and which collision within that link to associate the plugin."", 'comment_created': datetime.datetime(2020, 8, 20, 21, 0, 32, tzinfo=datetime.timezone.utc), 'commenter': 'azeey', 'type': 'User'}, {'comment_id': 474302167, 'comment_body': 'FYI: All entities within the model should have been created by the time `Configure` is called. However, other models might not have been created, so if this system depends on other models, it is appropriate to do this here. Otherwise, it can go into `Configure`.', 'comment_created': datetime.datetime(2020, 8, 20, 22, 15, 31, tzinfo=datetime.timezone.utc), 'commenter': 'azeey', 'type': 'User'}, {'comment_id': 474303389, 'comment_body': '`allLinks` might be empty if `this->initErrorPrinted == true`. Can you ensure that this returns if `allLinks.size() != 1`?', 'comment_created': datetime.datetime(2020, 8, 20, 22, 18, 57, tzinfo=datetime.timezone.utc), 'commenter': 'azeey', 'type': 'User'}, {'comment_id': 474306501, 'comment_body': ""I don't recommend accessing the pose directly from the SDF because this is the raw/unresolved pose. The resolved pose of the entity relative to it's parent is in the `Pose` component of the entity."", 'comment_created': datetime.datetime(2020, 8, 20, 22, 27, 39, tzinfo=datetime.timezone.utc), 'commenter': 'azeey', 'type': 'User'}, {'comment_id': 474308183, 'comment_body': ""It's better to use the DOM API via `sdf::Sensor` than `sdf::Element`. Is there a reason for choosing the latter here?"", 'comment_created': datetime.datetime(2020, 8, 20, 22, 32, 51, tzinfo=datetime.timezone.utc), 'commenter': 'azeey', 'type': 'User'}, {'comment_id': 474310265, 'comment_body': 'Can you leave a comment with a todo?', 'comment_created': datetime.datetime(2020, 8, 20, 22, 39, 13, tzinfo=datetime.timezone.utc), 'commenter': 'azeey', 'type': 'User'}, {'comment_id': 474311256, 'comment_body': 'nit: `sensorPose -> modelPose`?', 'comment_created': datetime.datetime(2020, 8, 20, 22, 42, 15, tzinfo=datetime.timezone.utc), 'commenter': 'azeey', 'type': 'User'}, {'comment_id': 474313871, 'comment_body': ""I don't recommend storing a pointer as a member variable when you can just pass it directly to `MapPointCloudData`. This is especially true since the pointer is invalid once this function returns."", 'comment_created': datetime.datetime(2020, 8, 20, 22, 50, 6, tzinfo=datetime.timezone.utc), 'commenter': 'azeey', 'type': 'User'}, {'comment_id': 474314099, 'comment_body': 'This copies the string. Is there a way to do this without the copy? If you just need the raw c string, would `_msg.data().data()` not work?', 'comment_created': datetime.datetime(2020, 8, 20, 22, 50, 42, tzinfo=datetime.timezone.utc), 'commenter': 'azeey', 'type': 'User'}, {'comment_id': 474315698, 'comment_body': 'Calling `ComputeNormalForces` while holding the mutex could potentially be an issue because `DepthCameraCallback` will block on this mutex before setting `cameraMsg`. If it is an issue, you can lock the mutex only long enough to copy `cameraMsg` to a local variable and use that when calling `ComputeNormalForces`.', 'comment_created': datetime.datetime(2020, 8, 20, 22, 55, 30, tzinfo=datetime.timezone.utc), 'commenter': 'azeey', 'type': 'User'}, {'comment_id': 474567716, 'comment_body': ""For some reason, If I write everything inside `Configure` I get a segmentation fault in [this line](https://github.com/ignitionrobotics/ign-gazebo/blob/b321a0044e4feab3e6a1406139691581b90ad892/src/systems/optical_tactile_plugin/OpticalTactilePlugin.cc#L328). \r\n\r\n> other models might not have been created\r\n\r\nCould that fall into this category?\r\n\r\nIf I remove that for loop, everything seems fine.\r\nHowever, even though `objectCollisionEntity` isn't currently used, it should be used in the future, so I'll keep using `Load` if possible."", 'comment_created': datetime.datetime(2020, 8, 21, 9, 21, 14, tzinfo=datetime.timezone.utc), 'commenter': 'mcres', 'type': 'User'}, {'comment_id': 474598883, 'comment_body': ""Got it.\r\n\r\nJust curious: as a general rule, should I access the elements' properties from the `ECM` rather than the `sdf` file, if possible? I understand that the actual values specified in the `sdf` file could be changed when the system loads that file?"", 'comment_created': datetime.datetime(2020, 8, 21, 9, 57, 1, tzinfo=datetime.timezone.utc), 'commenter': 'mcres', 'type': 'User'}, {'comment_id': 474608345, 'comment_body': '> Is there a reason for choosing the latter here?\r\n\r\nNope, I just thought it was the only way. Changing to `sdf::Sensor`.', 'comment_created': datetime.datetime(2020, 8, 21, 10, 17, 25, tzinfo=datetime.timezone.utc), 'commenter': 'mcres', 'type': 'User'}, {'comment_id': 474614165, 'comment_body': ""I'm referring to the tactile sensor pose, which is the same as the model pose.\r\nI see that can be confusing, I'll modify the comment above and change `sensorPose -> tactileSensorPose`"", 'comment_created': datetime.datetime(2020, 8, 21, 10, 28, 49, tzinfo=datetime.timezone.utc), 'commenter': 'mcres', 'type': 'User'}, {'comment_id': 474636591, 'comment_body': ""`_msg.data().data()` gives me the following error at compile time: \r\n`error: invalid conversion from â€˜const char*â€™ to â€˜char*â€™ [-fpermissive]`\r\n\r\nI've basically copied that from [this test](https://github.com/ignitionrobotics/ign-sensors/blob/master/test/integration/depth_camera_plugin.cc#L52-L53)."", 'comment_created': datetime.datetime(2020, 8, 21, 11, 23, 13, tzinfo=datetime.timezone.utc), 'commenter': 'mcres', 'type': 'User'}, {'comment_id': 474673390, 'comment_body': '`ComputeNormalForces` takes relatively short time (around 12 ms). I think this could be an issue if the user sets an extremely low `<update_rate>` for very fast measurements or high precision, but I think this is not the case yet.', 'comment_created': datetime.datetime(2020, 8, 21, 12, 45, 20, tzinfo=datetime.timezone.utc), 'commenter': 'mcres', 'type': 'User'}, {'comment_id': 474711072, 'comment_body': ""I don't follow option no. 1. I can get the `<collision>` string in the contact sensor and compare that to the names of `<collision>` elements inside the link to check if they are the same. However, I still need to use some `sdf::ElementPtr` to get the `<size>`, right? I can't see how I can get that value from a `components::Collision`"", 'comment_created': datetime.datetime(2020, 8, 21, 13, 51, 6, tzinfo=datetime.timezone.utc), 'commenter': 'mcres', 'type': 'User'}, {'comment_id': 476057683, 'comment_body': ""I think the `Geometry` component could be used to get the size:\r\n\r\n* https://github.com/ignitionrobotics/ign-gazebo/blob/master/include/ignition/gazebo/components/Geometry.hh\r\n\r\nalso, you can use the [TouchPlugin](https://github.com/ignitionrobotics/ign-gazebo/blob/master/src/systems/touch_plugin/TouchPlugin.cc#L139-L157) as a reference, though it doesn't get the object size"", 'comment_created': datetime.datetime(2020, 8, 25, 1, 56, 48, tzinfo=datetime.timezone.utc), 'commenter': 'scpeters', 'type': 'User'}, {'comment_id': 476058289, 'comment_body': 'yes, I think accessing the ECM values is preferred', 'comment_created': datetime.datetime(2020, 8, 25, 1, 57, 38, tzinfo=datetime.timezone.utc), 'commenter': 'scpeters', 'type': 'User'}, {'comment_id': 476059722, 'comment_body': 'can you try changing the definition of `msgBuffer` from `char*` to `const char*` at line 141?', 'comment_created': datetime.datetime(2020, 8, 25, 1, 59, 49, tzinfo=datetime.timezone.utc), 'commenter': 'scpeters', 'type': 'User'}, {'comment_id': 476226367, 'comment_body': 'Thanks!', 'comment_created': datetime.datetime(2020, 8, 25, 7, 12, 42, tzinfo=datetime.timezone.utc), 'commenter': 'mcres', 'type': 'User'}, {'comment_id': 476253037, 'comment_body': ""Ahh, silly me, I didn't realize I could still modify the pointer that way. Thanks!"", 'comment_created': datetime.datetime(2020, 8, 25, 8, 0, 8, tzinfo=datetime.timezone.utc), 'commenter': 'mcres', 'type': 'User'}, {'comment_id': 482524013, 'comment_body': ""My suggestion was just for `Load`. `components::ContactSensorData` may not be available during `Configure` because the `Contact` system creates it in `PreUpdate`. Either way, I suggest checking if `csd` is null before doing anything with it because it's not guaranteed to exist.\r\nhttps://github.com/ignitionrobotics/ign-gazebo/blob/b321a0044e4feab3e6a1406139691581b90ad892/src/systems/optical_tactile_plugin/OpticalTactilePlugin.cc#L326  This would be the case, for example, if the `Contact` system was not added to the SDF file."", 'comment_created': datetime.datetime(2020, 9, 2, 22, 10, 6, tzinfo=datetime.timezone.utc), 'commenter': 'azeey', 'type': 'User'}, {'comment_id': 482529180, 'comment_body': ""The added benefit of calling `Load` in `Configure` is you don't have to check `initErrorPrinted`. `Configure` is called only once."", 'comment_created': datetime.datetime(2020, 9, 2, 22, 16, 56, tzinfo=datetime.timezone.utc), 'commenter': 'azeey', 'type': 'User'}, {'comment_id': 488240762, 'comment_body': ""@mcres Friendly ping. Do you have time to address the comment above? Looks like that is the last comment (and the previous Mac compiler error on CI, which is rerunning now), unless @azeey has more to review.\r\nLet us know if you want us to help with the branch. Ideally, we'd like to get this in before code freeze on Sep 23."", 'comment_created': datetime.datetime(2020, 9, 14, 21, 52, 19, tzinfo=datetime.timezone.utc), 'commenter': 'mabelzhang', 'type': 'User'}, {'comment_id': 513151118, 'comment_body': ""Okay I see what's going on here. @azeey So I tried moving the `Load()` call into `Configure()`, and as @mcres mentioned, the `csd` pointer in `PreUpdate()` is then just always null. I left it running for a while, and it never went non-null.\r\n\r\nThe same approach is used in the `TouchPlugin`, to call `Load()` from `PreUpdate()` instead of `Configure()`. I guess it must be similar here?\r\nhttps://github.com/ignitionrobotics/ign-gazebo/blob/main/src/systems/touch_plugin/TouchPlugin.cc#L368-L374"", 'comment_created': datetime.datetime(2020, 10, 28, 3, 1, 16, tzinfo=datetime.timezone.utc), 'commenter': 'mabelzhang', 'type': 'User'}, {'comment_id': 516970608, 'comment_body': ""Ah, the issue is that we're checking for `ContactSensorData` in `Load` to determine the Collision associated with a contact sensor. That component won't be available until the `Contact` system has ran once.\r\nhttps://github.com/ignitionrobotics/ign-gazebo/blob/b17e904d5d7884aa592ce3e4f38019f03f866bb1/src/systems/optical_tactile_plugin/OpticalTactilePlugin.cc#L402-L403\r\n\r\nSo, yeah, you guys are correct. `Load` needs to be in `PreUpdate`. And since currently, world systems are ran before model systems, the `Contact` system is guaranteed to run before the `OpticalTactilePlugin`."", 'comment_created': datetime.datetime(2020, 11, 3, 21, 39, 5, tzinfo=datetime.timezone.utc), 'commenter': 'azeey', 'type': 'User'}, {'comment_id': 518471498, 'comment_body': 'Cool! Thanks @azeey for looking into it. Could you approve the PR? I think it won\'t let us merge if there are remaining ""Requested changes"" marks. I made a PR to the fork to fix the Mac warning.', 'comment_created': datetime.datetime(2020, 11, 6, 1, 32, 24, tzinfo=datetime.timezone.utc), 'commenter': 'mabelzhang', 'type': 'User'}, {'comment_id': 518993807, 'comment_body': ""Consider using `Pose3f::operator*` instead of `Pose3f::operator+` since the latter is [discouraged](https://github.com/ignitionrobotics/ign-math/issues/60). If you do, note that you'll have to swap the order of operations"", 'comment_created': datetime.datetime(2020, 11, 6, 20, 39, 52, tzinfo=datetime.timezone.utc), 'commenter': 'azeey', 'type': 'User'}, {'comment_id': 518994464, 'comment_body': 'Should these be const refs?', 'comment_created': datetime.datetime(2020, 11, 6, 20, 41, 30, tzinfo=datetime.timezone.utc), 'commenter': 'azeey', 'type': 'User'}]","[{'commit_sha': '0aca10d84b7ad4741d25c67bd4785fb93268b59d', 'committer_username': 'mcres', 'committer_name': 'MartiÃ±o Crespo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 9, 26, 20, 39, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': '222d65b95e77708d6631b583aafc45b9002145d8', 'committer_username': 'mcres', 'committer_name': 'MartiÃ±o Crespo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 9, 26, 20, 39, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7be1771ff5e054f526e7089573e238bd9fc86532', 'committer_username': 'mcres', 'committer_name': 'MartiÃ±o Crespo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 9, 26, 20, 39, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c3d91fbd7c97f77ef9c3a179ff1a2b4debcb3157', 'committer_username': 'mcres', 'committer_name': 'MartiÃ±o Crespo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 9, 26, 20, 39, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': '16a268e579817cde60d75b87ed04dfceb5cf3ad0', 'committer_username': 'mcres', 'committer_name': 'MartiÃ±o Crespo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 9, 26, 20, 39, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5cd5d5fec660bf18e5e1e918015d339f92fa6824', 'committer_username': 'mcres', 'committer_name': 'MartiÃ±o Crespo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 9, 26, 20, 39, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cd58ae636a009b388968b9298eada0a31b7992e9', 'committer_username': 'mcres', 'committer_name': 'MartiÃ±o Crespo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 9, 26, 20, 39, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': '40a87ef5fd35e46a15235bbb5db055e5a2457500', 'committer_username': 'mcres', 'committer_name': 'MartiÃ±o Crespo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 9, 26, 20, 39, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5b85a48dff959620e514b422aa58c696e7a1aebb', 'committer_username': 'mcres', 'committer_name': 'MartiÃ±o Crespo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 9, 26, 20, 39, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': '93918ebce3e6f17ef7c76d7ad075bc71b31a7997', 'committer_username': 'mcres', 'committer_name': 'MartiÃ±o Crespo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 9, 26, 20, 39, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd480c54b16a709671071c8f7d13e60f6c17c3ff0', 'committer_username': 'mcres', 'committer_name': 'MartiÃ±o Crespo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 9, 26, 20, 39, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3774efcd60ec3c9ee32083384cca59633ad9f96d', 'committer_username': 'mcres', 'committer_name': 'MartiÃ±o Crespo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 9, 26, 20, 39, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2bab9c83ee11401cae84c6888c66c64721cece71', 'committer_username': 'mcres', 'committer_name': 'MartiÃ±o Crespo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 9, 26, 20, 39, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6c32ba08c37ecbd11f8583bfbf905d3c36c863de', 'committer_username': 'mcres', 'committer_name': 'MartiÃ±o Crespo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 9, 26, 20, 39, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'badd572123488308439c4bb34d7e9819dda38a08', 'committer_username': 'mcres', 'committer_name': 'MartiÃ±o Crespo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 9, 26, 20, 39, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': '70774f4bd77e0c1359ea11e8f81ed29f31bcbab7', 'committer_username': 'mcres', 'committer_name': 'MartiÃ±o Crespo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 9, 26, 20, 39, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1652081a763c74f39300b59f6e93a0ed3f173889', 'committer_username': 'mcres', 'committer_name': 'MartiÃ±o Crespo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 9, 26, 20, 39, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4bccc6cd3a6fe3a97217d7b2c0930d6189c49d6b', 'committer_username': 'mcres', 'committer_name': 'MartiÃ±o Crespo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 9, 26, 20, 39, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': '16732f6f7b7a1e36f743fed07458296bafa177c1', 'committer_username': 'mcres', 'committer_name': 'MartiÃ±o Crespo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 9, 26, 20, 39, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2a45a84f83ba3c3087d45f6c7221e6caf399abe1', 'committer_username': 'mcres', 'committer_name': 'MartiÃ±o Crespo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 9, 26, 20, 39, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6050673a23b1f31dc0f3dbabae7977d17e37b3c0', 'committer_username': 'mcres', 'committer_name': 'MartiÃ±o Crespo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 9, 26, 20, 39, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e216bb2132d0a77ca77dc31a50435487273fbe09', 'committer_username': 'mcres', 'committer_name': 'MartiÃ±o Crespo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 9, 26, 20, 39, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b321a0044e4feab3e6a1406139691581b90ad892', 'committer_username': 'mcres', 'committer_name': 'MartiÃ±o Crespo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 9, 26, 20, 39, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': '886f9042fccfa235a15676c1706873f7a3fe7d6d', 'committer_username': 'mcres', 'committer_name': 'MartiÃ±o Crespo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 9, 26, 20, 39, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5331ec5084269b3596388119c6c92e90472bb04c', 'committer_username': 'mcres', 'committer_name': 'MartiÃ±o Crespo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 9, 26, 20, 39, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bfce5ee15d5226e1b5794d295e771b981133e53a', 'committer_username': 'chapulina', 'committer_name': 'Louise Poubel', 'committer_email': None, 'commit_date': datetime.datetime(2013, 10, 22, 22, 20, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7dd644e175213d63e545f11400a0384a11069b5a', 'committer_username': 'chapulina', 'committer_name': 'Louise Poubel', 'committer_email': None, 'commit_date': datetime.datetime(2013, 10, 22, 22, 20, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ee80a3de7cb3f1a67889bed9bf2109d13b741af4', 'committer_username': 'chapulina', 'committer_name': 'Louise Poubel', 'committer_email': None, 'commit_date': datetime.datetime(2013, 10, 22, 22, 20, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b17e904d5d7884aa592ce3e4f38019f03f866bb1', 'committer_username': 'chapulina', 'committer_name': 'Louise Poubel', 'committer_email': None, 'commit_date': datetime.datetime(2013, 10, 22, 22, 20, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '16807b60c77246072b6fcfb0e9878b82db534ff3', 'committer_username': 'mabelzhang', 'committer_name': 'Mabel Zhang', 'committer_email': None, 'commit_date': datetime.datetime(2014, 5, 17, 5, 32, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4a47c9232e4288e43696fa34d71a8e44778b05b9', 'committer_username': 'mcres', 'committer_name': 'MartiÃ±o Crespo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 9, 26, 20, 39, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': '703a916e3c9f71baa26898c0f83da325643ece33', 'committer_username': 'mabelzhang', 'committer_name': 'Mabel Zhang', 'committer_email': None, 'commit_date': datetime.datetime(2014, 5, 17, 5, 32, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'af74f4ca430710d0db7acecaab12877cef511cf9', 'committer_username': 'mabelzhang', 'committer_name': 'Mabel Zhang', 'committer_email': None, 'commit_date': datetime.datetime(2014, 5, 17, 5, 32, 57, tzinfo=datetime.timezone.utc)}]",MartiÃ±o Crespo,14854080,,User,,13,,9,7
471810189,Add functionalities for optical tactile plugin,"This PR adds the following to https://github.com/ignitionrobotics/ign-gazebo/pull/229:
- Service for enabling/disabling the plugin
- Topic for the normal forces computed
- Test
- Visualize the contacts from the contact sensor",False,1,https://api.github.com/repos/mcres/ign-gazebo/pulls/1,https://github.com/mcres/ign-gazebo/pull/1,closed,482,42,8,7,12,9,0,0,[],2020-08-21 19:07:38+00:00,2020-10-28 19:12:02+00:00,5875464.0,"68 days, 0:04:24","[{'comment_id': 476065314, 'comment_body': 'Nit: remove `sensor_` in the file name, because the directory name is actually just `optical_tactile_plugin`, so is the file name and class name. The real reason is to distinguish it from an actual `<sensor>` like depth camera, GPU lidar, etc.\r\nSimilarly for the test SDF file for consistency.', 'comment_created': datetime.datetime(2020, 8, 25, 2, 8, 27, tzinfo=datetime.timezone.utc), 'commenter': 'mabelzhang', 'type': 'User'}, {'comment_id': 476070060, 'comment_body': '`relative_to` needs to take the name of a link or joint, as we saw here https://github.com/ignitionrobotics/ign-gazebo/pull/229#discussion_r468288940\r\nI would name the link something more specific than `""link""` and use that.', 'comment_created': datetime.datetime(2020, 8, 25, 2, 15, 37, tzinfo=datetime.timezone.utc), 'commenter': 'mabelzhang', 'type': 'User'}, {'comment_id': 476070854, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2020, 8, 25, 2, 16, 49, tzinfo=datetime.timezone.utc), 'commenter': 'mabelzhang', 'type': 'User'}, {'comment_id': 476184764, 'comment_body': '2020', 'comment_created': datetime.datetime(2020, 8, 25, 5, 23, 35, tzinfo=datetime.timezone.utc), 'commenter': 'mabelzhang', 'type': 'User'}, {'comment_id': 476217023, 'comment_body': 'Should use more meaningful names, such as startPoint and endPoint.', 'comment_created': datetime.datetime(2020, 8, 25, 6, 53, 12, tzinfo=datetime.timezone.utc), 'commenter': 'mabelzhang', 'type': 'User'}, {'comment_id': 476234087, 'comment_body': '```suggestion\r\n  // Advertise topic for normal forces\r\n```', 'comment_created': datetime.datetime(2020, 8, 25, 7, 27, 15, tzinfo=datetime.timezone.utc), 'commenter': 'mabelzhang', 'type': 'User'}, {'comment_id': 476238452, 'comment_body': 'Should it return here, or should it still keep going and try to advertise the enable service? Seems it should keep going.\r\nWhat happens if it returns here, the plugin still runs, just no services are advertised?', 'comment_created': datetime.datetime(2020, 8, 25, 7, 35, 12, tzinfo=datetime.timezone.utc), 'commenter': 'mabelzhang', 'type': 'User'}, {'comment_id': 476241774, 'comment_body': 'Spaces around operators.', 'comment_created': datetime.datetime(2020, 8, 25, 7, 41, 20, tzinfo=datetime.timezone.utc), 'commenter': 'mabelzhang', 'type': 'User'}, {'comment_id': 476374188, 'comment_body': ""Yeah both the topic and the service should keep going if they fail to advertise.\r\n\r\nI thought that `Publish()` would give problems if the topic was not correctly advertised, but instead the message doesn't get published and that's all.\r\nOn the other hand, if the service doesn't get advertised, there's simply no service to request."", 'comment_created': datetime.datetime(2020, 8, 25, 11, 26, 48, tzinfo=datetime.timezone.utc), 'commenter': 'mcres', 'type': 'User'}]","[{'commit_sha': 'f3dc1838cc0e541ec2ec03af9070bf6895c1d22b', 'committer_username': 'mcres', 'committer_name': 'MartiÃ±o Crespo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 9, 26, 20, 39, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a9402fd1bf9900f57413b3d9d719ef8c447f468d', 'committer_username': 'mcres', 'committer_name': 'MartiÃ±o Crespo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 9, 26, 20, 39, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': '17c5b87b9785070c0ac3e4a268b30747649d13f2', 'committer_username': 'mcres', 'committer_name': 'MartiÃ±o Crespo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 9, 26, 20, 39, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ee79d64f663d6388510010e8dd5c524dcd3c80a8', 'committer_username': 'mcres', 'committer_name': 'MartiÃ±o Crespo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 9, 26, 20, 39, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b7e7056bb058e96da37d4035217f984ecfcb7e00', 'committer_username': 'mcres', 'committer_name': 'MartiÃ±o Crespo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 9, 26, 20, 39, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': '90c29b5e8b6d25fb8ce73e82ff60cf2cfe127389', 'committer_username': 'mcres', 'committer_name': 'MartiÃ±o Crespo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 9, 26, 20, 39, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2db11bc9cabf753fd9838cd1182fd0e0f65ca372', 'committer_username': 'mcres', 'committer_name': 'MartiÃ±o Crespo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 9, 26, 20, 39, 20, tzinfo=datetime.timezone.utc)}]",MartiÃ±o Crespo,14854080,,User,,13,,9,7
421890166,Fix for issue 43,"Issue #43 

This will filter the record menu and write the format to the file according to which button the user pushed (mp4 or ogv). 

This is my first PR, I apologize if there are any obvious errors!",True,153,https://api.github.com/repos/gazebosim/gz-sim/pulls/153,https://github.com/gazebosim/gz-sim/pull/153,closed,76,11,5,9,10,5,2,0,"[{'name': 'enhancement'}, {'name': 'ðŸ”® dome'}]",2020-05-22 12:22:46+00:00,2020-06-12 17:53:33+00:00,1834247.0,"21 days, 5:30:47","[{'comment_id': 434785738, 'comment_body': ""@iche033 I'd really appreciate if you could tell me if there's anything wrong with this. I made research and it works for me, but I've got the feeling that on a screen other than my laptop's weirds things could happen. \r\n\r\nThank you!"", 'comment_created': datetime.datetime(2020, 6, 3, 18, 56, 41, tzinfo=datetime.timezone.utc), 'commenter': 'mcres', 'type': 'User'}, {'comment_id': 436232467, 'comment_body': 'Not sure about our style guide for QML, but I have a feeling the things in the braces `{}` should be on a new line, and then one line per field like the other existing items.', 'comment_created': datetime.datetime(2020, 6, 6, 3, 14, 2, tzinfo=datetime.timezone.utc), 'commenter': 'mabelzhang', 'type': 'User'}, {'comment_id': 436570873, 'comment_body': 'Thanks! Yes, I think so.', 'comment_created': datetime.datetime(2020, 6, 8, 9, 35, 8, tzinfo=datetime.timezone.utc), 'commenter': 'mcres', 'type': 'User'}, {'comment_id': 436925877, 'comment_body': 'Last nit, remove spaces within the brackets.', 'comment_created': datetime.datetime(2020, 6, 8, 19, 0, 17, tzinfo=datetime.timezone.utc), 'commenter': 'mabelzhang', 'type': 'User'}, {'comment_id': 436925994, 'comment_body': 'Same as above', 'comment_created': datetime.datetime(2020, 6, 8, 19, 0, 26, tzinfo=datetime.timezone.utc), 'commenter': 'mabelzhang', 'type': 'User'}]","[{'commit_sha': '7db0326356281304cfe7cc225fc3d4e2559cb224', 'committer_username': 'mcres', 'committer_name': 'MartiÃ±o Crespo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 9, 26, 20, 39, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5e6d96bfa01a3ca435eb003b871abef077484f0e', 'committer_username': 'mcres', 'committer_name': 'MartiÃ±o Crespo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 9, 26, 20, 39, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'becf06a1da036bbfe662edfb88ae97660363e842', 'committer_username': 'mcres', 'committer_name': 'MartiÃ±o Crespo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 9, 26, 20, 39, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': '03a3bb2b28d4f0c619de3c4c1e1a0bfebdafbf90', 'committer_username': 'mcres', 'committer_name': 'MartiÃ±o Crespo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 9, 26, 20, 39, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a0818be1eaf7a002fb1cd6a94e77e537ed90457e', 'committer_username': 'mcres', 'committer_name': 'MartiÃ±o Crespo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 9, 26, 20, 39, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9fb155c8ae125ca7afc3ddf54373cae81d507262', 'committer_username': 'mcres', 'committer_name': 'MartiÃ±o Crespo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 9, 26, 20, 39, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4e35bcb733a90a727c151b6fef1a13f7edc81522', 'committer_username': 'mcres', 'committer_name': 'MartiÃ±o Crespo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 9, 26, 20, 39, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9213a9ecd7e4ee8a3bb0b8f46985541e7f54321b', 'committer_username': 'mcres', 'committer_name': 'MartiÃ±o Crespo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 9, 26, 20, 39, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2a6742cb6aac436c3af523a2692415befb741fc1', 'committer_username': 'mcres', 'committer_name': 'MartiÃ±o Crespo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 9, 26, 20, 39, 20, tzinfo=datetime.timezone.utc)}]",MartiÃ±o Crespo,14854080,,User,,13,,9,7
446360425,Visualize ContactSensorData,"Fixes issue #112 

This requires #272 

It currently visualizes the position of the contacts returned by the Contact sensors.
It also allows the user to change the size of the markers (radius and length) through a couple of spin boxes.

In order to show the contacts of all of the `components::Collision`, it appears it's not enough to create a `components::ContactSensorData` as stated [here](https://github.com/ignitionrobotics/ign-gazebo/issues/112#issuecomment-654998572), because this is a GUI system.


![issue_112](https://user-images.githubusercontent.com/14854080/86945173-04787d00-c149-11ea-8de9-fa538347f1f5.gif)
",True,234,https://api.github.com/repos/gazebosim/gz-sim/pulls/234,https://github.com/gazebosim/gz-sim/pull/234,closed,1161,12,10,17,19,41,2,1,"[{'name': 'ðŸ”® dome'}, {'name': 'close the gap'}]",2020-07-08 16:39:10+00:00,2021-05-05 01:42:13+00:00,25952583.0,"300 days, 9:03:03","[{'comment_id': 455508138, 'comment_body': '`Length` misspelled', 'comment_created': datetime.datetime(2020, 7, 16, 4, 49, 46, tzinfo=datetime.timezone.utc), 'commenter': 'mabelzhang', 'type': 'User'}, {'comment_id': 455509722, 'comment_body': ""Can the length vary based on the force? I don't remember how the length is in Gazebo Classic, but even if it were constant there, we still have the opportunity to vary it based on the force in Ignition. I think the inertia visualization in Gazebo Classic does vary the length of the segments based on the magnitude. So the variable should probably leave room for that and be called a `scale` rather than length. Then in addition, what it means exactly should also be specified, since it would be a relative quantity. Probably the easiest to interpret is with respect to the unit vector, like, the variable specifies how long a unit vector of force appears in visualization. (When the force becomes available, I think that would be how it'd be implemented anyway.)"", 'comment_created': datetime.datetime(2020, 7, 16, 4, 55, 48, tzinfo=datetime.timezone.utc), 'commenter': 'mabelzhang', 'type': 'User'}, {'comment_id': 455513180, 'comment_body': ""Maybe there should also be a way for the user to change the lifetime, like the `UpdateLength()` methods. I can think of a possible scenario where, since the life time is hardcoded to 350 ms right now, if something is really dynamic and say, a contact switches to true and then false within those 350 ms, then the user will never get to know that contact ever happened. If we let the user set it, there should be a reasonable minimum to what the user can set it to, maybe 100 or something, just so that it doesn't get so fast that it crashes people's computers. I don't know how fast is too fast."", 'comment_created': datetime.datetime(2020, 7, 16, 5, 9, 29, tzinfo=datetime.timezone.utc), 'commenter': 'mabelzhang', 'type': 'User'}, {'comment_id': 455514764, 'comment_body': 'indentation', 'comment_created': datetime.datetime(2020, 7, 16, 5, 15, 42, tzinfo=datetime.timezone.utc), 'commenter': 'mabelzhang', 'type': 'User'}, {'comment_id': 455515633, 'comment_body': 'Extra spaces before semicolons. Same below', 'comment_created': datetime.datetime(2020, 7, 16, 5, 18, 33, tzinfo=datetime.timezone.utc), 'commenter': 'mabelzhang', 'type': 'User'}, {'comment_id': 455523605, 'comment_body': ""I ran `tools/clang_tidy.sh` and it's telling me \r\n```\r\nVisualizeContacts.cc:239:23: warning: the loop variable's type is not a reference type; this creates a copy in each iteration; consider making this a reference [performance-for-range-copy]\r\n      for (const auto contact : _contacts->Data().contact())\r\n                      ^\r\n                     &\r\n```"", 'comment_created': datetime.datetime(2020, 7, 16, 5, 46, 46, tzinfo=datetime.timezone.utc), 'commenter': 'mabelzhang', 'type': 'User'}, {'comment_id': 455528503, 'comment_body': 'I would suggest simply saying `Show Contacts` as opposed to `Show/Hide`. Right now checking the box is show, unchecking is hide. But before I did anything, it was confusing, ""what would happen if I check it, would it show or hide?""\r\n', 'comment_created': datetime.datetime(2020, 7, 16, 6, 2, 8, tzinfo=datetime.timezone.utc), 'commenter': 'mabelzhang', 'type': 'User'}, {'comment_id': 457577847, 'comment_body': ""Don't think you need this if you already used `SetData` above."", 'comment_created': datetime.datetime(2020, 7, 20, 17, 33, 44, tzinfo=datetime.timezone.utc), 'commenter': 'azeey', 'type': 'User'}, {'comment_id': 457951658, 'comment_body': 'Yup, I agree.\r\n\r\nNow that you mention that, I just realized that when I uncheck the box, the contacts ""hide"" because there\'s a lifetime set for the markers. Should I explicitly delete all the markers when the box is unchecked or do you think this is enough?', 'comment_created': datetime.datetime(2020, 7, 21, 9, 10, 33, tzinfo=datetime.timezone.utc), 'commenter': 'mcres', 'type': 'User'}, {'comment_id': 457957144, 'comment_body': 'I left a [todo comment](https://github.com/ignitionrobotics/ign-gazebo/blob/1817a9ad193e2076bdb823d32da0151d6ef366d2/src/gui/plugins/visualize_contacts/VisualizeContacts.cc#L241) for that, but leaving room for the scale and explaining it is definitely a good idea.', 'comment_created': datetime.datetime(2020, 7, 21, 9, 19, 55, tzinfo=datetime.timezone.utc), 'commenter': 'mcres', 'type': 'User'}, {'comment_id': 458634128, 'comment_body': ""I think the user would expect them to disappear when it's unchecked. So deleting seems more reasonable."", 'comment_created': datetime.datetime(2020, 7, 22, 8, 44, 21, tzinfo=datetime.timezone.utc), 'commenter': 'mabelzhang', 'type': 'User'}, {'comment_id': 460959059, 'comment_body': 'You can add `components::ContactSensor()` to the arguments of `EntitiesByComponent` and it will give you just the contact sensors.', 'comment_created': datetime.datetime(2020, 7, 27, 15, 5, 13, tzinfo=datetime.timezone.utc), 'commenter': 'azeey', 'type': 'User'}, {'comment_id': 474138646, 'comment_body': 'Hmm I get a vector of size `0` when I try either\r\n```\r\necm->EntitiesByComponents(\r\n      components::Sensor(),\r\n      components::ContactSensor(),\r\n      components::ParentEntity(*linkEntity));\r\n```\r\nor\r\n```\r\necm->EntitiesByComponents(\r\n      components::ContactSensor(),\r\n      components::ParentEntity(*linkEntity));\r\n```\r\n', 'comment_created': datetime.datetime(2020, 8, 20, 16, 58, 49, tzinfo=datetime.timezone.utc), 'commenter': 'mcres', 'type': 'User'}, {'comment_id': 474232100, 'comment_body': 'My bad. `components::ContactSensor` is a component that holds an `sdf::ElementPtr`, so the comparison will fail if the default constructed `components::ContactSensor()` is used. Please ignore my suggestion.', 'comment_created': datetime.datetime(2020, 8, 20, 19, 44, 53, tzinfo=datetime.timezone.utc), 'commenter': 'azeey', 'type': 'User'}, {'comment_id': 486496551, 'comment_body': ""I think many of these includes aren't needed, like `Animation`, `KeyFrame`, `VideoEncoder`..."", 'comment_created': datetime.datetime(2020, 9, 10, 16, 59, 52, tzinfo=datetime.timezone.utc), 'commenter': 'chapulina', 'type': 'User'}, {'comment_id': 486496701, 'comment_body': 'Please keep the alphabetical order', 'comment_created': datetime.datetime(2020, 9, 10, 17, 0, 8, tzinfo=datetime.timezone.utc), 'commenter': 'chapulina', 'type': 'User'}, {'comment_id': 486497209, 'comment_body': 'Also be sure to alphabetize all the includes within their groups', 'comment_created': datetime.datetime(2020, 9, 10, 17, 0, 55, tzinfo=datetime.timezone.utc), 'commenter': 'chapulina', 'type': 'User'}, {'comment_id': 486497934, 'comment_body': ""I think this isn't necessary, because there's no `eventFilter` function to receive the filtered events. This is only needed by plugins that receive events."", 'comment_created': datetime.datetime(2020, 9, 10, 17, 2, 10, tzinfo=datetime.timezone.utc), 'commenter': 'chapulina', 'type': 'User'}, {'comment_id': 486510448, 'comment_body': ""I'm a bit concerned about displaying force data that's not real. I think it's good that we have everything in place to display the force once that's available, but the end user doesn't know that this isn't the real data, so it may cause confusion. How about commenting this out for now?"", 'comment_created': datetime.datetime(2020, 9, 10, 17, 23, 33, tzinfo=datetime.timezone.utc), 'commenter': 'chapulina', 'type': 'User'}, {'comment_id': 486511605, 'comment_body': 'I think `Dialogs` is not needed', 'comment_created': datetime.datetime(2020, 9, 10, 17, 25, 26, tzinfo=datetime.timezone.utc), 'commenter': 'chapulina', 'type': 'User'}, {'comment_id': 486512961, 'comment_body': 'Is this still needed now that the GUI knows of removed components? (#272)', 'comment_created': datetime.datetime(2020, 9, 10, 17, 27, 51, tzinfo=datetime.timezone.utc), 'commenter': 'chapulina', 'type': 'User'}, {'comment_id': 486516389, 'comment_body': 'The `DisableCollisionCommand::HasContactSensor` and `EnableCollisionCommand::HasContactSensor` functions look duplicate. It would be nice to reuse the same function so that if we change one of them, we change both at the same time. Maybe it could be a function in `UserCommandsInterface`?', 'comment_created': datetime.datetime(2020, 9, 10, 17, 33, 53, tzinfo=datetime.timezone.utc), 'commenter': 'chapulina', 'type': 'User'}, {'comment_id': 487798144, 'comment_body': ""I don't understand, do you mean commenting out the `force` declaration and using a hardcoded value instead?"", 'comment_created': datetime.datetime(2020, 9, 14, 10, 7, 2, tzinfo=datetime.timezone.utc), 'commenter': 'mcres', 'type': 'User'}, {'comment_id': 487807980, 'comment_body': ""Yep, they are duplicate. I just wasn't sure where to put that, thanks for the suggestion ;)"", 'comment_created': datetime.datetime(2020, 9, 14, 10, 24, 19, tzinfo=datetime.timezone.utc), 'commenter': 'mcres', 'type': 'User'}, {'comment_id': 488115375, 'comment_body': ""Maybe I didn't understand the implementation then. I thought it was already hardcoded? Now it's always 1 scaled to the value the user inputs. It's not the real force, right? Also, the normal direction also doesn't seem to be correct?"", 'comment_created': datetime.datetime(2020, 9, 14, 17, 49, 47, tzinfo=datetime.timezone.utc), 'commenter': 'chapulina', 'type': 'User'}, {'comment_id': 488134668, 'comment_body': ""Yep, all questions are correct. I don't get what's the suggestion for avoiding confusion for the user."", 'comment_created': datetime.datetime(2020, 9, 14, 18, 23, 56, tzinfo=datetime.timezone.utc), 'commenter': 'mcres', 'type': 'User'}, {'comment_id': 488137451, 'comment_body': ""Hmm for some reason when I delete that code, the forces are only displayed once and then they don't get updated.\r\n\r\nAlso, when I try to disable a collision by requesting the `disable_collision` service, forces keep showing up most of the times. I'll take a look at the `SerializedState` msg to see what's going on."", 'comment_created': datetime.datetime(2020, 9, 14, 18, 28, 54, tzinfo=datetime.timezone.utc), 'commenter': 'mcres', 'type': 'User'}, {'comment_id': 488185441, 'comment_body': ""Oh gotcha, so I'd remove the green cylinders completely. We can leave all the code related to them commented out."", 'comment_created': datetime.datetime(2020, 9, 14, 19, 58, 20, tzinfo=datetime.timezone.utc), 'commenter': 'chapulina', 'type': 'User'}, {'comment_id': 493679913, 'comment_body': 'Agree.', 'comment_created': datetime.datetime(2020, 9, 23, 15, 19, 33, tzinfo=datetime.timezone.utc), 'commenter': 'mcres', 'type': 'User'}, {'comment_id': 537733147, 'comment_body': ""@chapulina I know we've said we should keep this POC in the past, but I can't remember why.  Do you know what the problem was? Removing it was the easiest way I found to fix the test failures because the workaround of this POC was to send dummy messages that caused expectations to fail in other tests."", 'comment_created': datetime.datetime(2020, 12, 7, 18, 31, 33, tzinfo=datetime.timezone.utc), 'commenter': 'azeey', 'type': 'User'}, {'comment_id': 537899015, 'comment_body': ""My guess is that we don't want to reset the value of components that can't be serialized. Those components would send an empty value through the wire. We don't run into this much because most of the default components can be serialized."", 'comment_created': datetime.datetime(2020, 12, 7, 23, 2, 13, tzinfo=datetime.timezone.utc), 'commenter': 'chapulina', 'type': 'User'}, {'comment_id': 537911924, 'comment_body': ""I see. Would it be possible to not send components that can't be serialized in the first place instead of sending an empty value? "", 'comment_created': datetime.datetime(2020, 12, 7, 23, 25, 4, tzinfo=datetime.timezone.utc), 'commenter': 'azeey', 'type': 'User'}, {'comment_id': 537931633, 'comment_body': ""It's valuable to know that the component is present, even if the value isn't serializable. We get around that for `NoData` components by adding dummy data to the serialized message, which isn't great:\r\n\r\nhttps://github.com/ignitionrobotics/ign-gazebo/blob/a5abacfa74db6e8db0218bd32c55980e15cf249b/include/ignition/gazebo/components/Component.hh#L211-L218\r\n\r\n"", 'comment_created': datetime.datetime(2020, 12, 8, 0, 10, 53, tzinfo=datetime.timezone.utc), 'commenter': 'chapulina', 'type': 'User'}, {'comment_id': 537963173, 'comment_body': 'Can you elaborate more? If the ""data"" of a component is its mere presence, as in `NoData`, I think sending an empty message makes sense and doesn\'t break anything. But if the ""data"" of the component is more than its presence, I don\'t see how sending an empty message is useful. i.e, What\'s the use case of knowing a component exists if we can\'t see its data (with the exception of `NoData` components)?', 'comment_created': datetime.datetime(2020, 12, 8, 1, 32, 5, tzinfo=datetime.timezone.utc), 'commenter': 'azeey', 'type': 'User'}, {'comment_id': 537975217, 'comment_body': 'There are 2 use cases for the state, so let\'s look at them separately.\r\n\r\n## GUI\r\n\r\nImagine you have a `CustomComponent` with `UnserializableData`. We can\'t send the data from the server to the client, but we can at least tell the client that an entity has that component. `CustomComponent` will be listed on the Component Inspector, without data.\r\n\r\nThat\'s more useful than not displaying it at all, right? Helps debugging to a certain extent. Right now, the assumption for any GUI systems is that they have the complete list of entities and components, even if they may not be able to peek inside some of them.\r\n\r\nGUI systems aren\'t doing much component setting through, so I think we shouldn\'t expect the situation I mentioned above (""we don\'t want to reset the value of components that can\'t be serialized."") to be an important issue\r\n\r\n## Distributed sim\r\n\r\nIn this case, the presence of some component without can be helpful to let systems know that it needs to be populated.\r\n\r\nI think the resetting issue could come into play during distributed simulation though. For example:\r\n\r\n* Robot A is being simulated by secondary 1. It has `CustomComponent`.\r\n* Parts of Robot A\'s state are sent to secondary 2.\r\n* Some system in secondary 2 sets the value of `CustomComponent` for Robot A\r\n* Syncing the state from secondary 1 to 2 sends an empty `CustomComponent`, resetting its data by mistake\r\n\r\n---\r\n\r\nThis is very hypothetical, but do you see where I\'m going? In summary, it would be nice to be able to tell default data from no data.', 'comment_created': datetime.datetime(2020, 12, 8, 2, 1, 40, tzinfo=datetime.timezone.utc), 'commenter': 'chapulina', 'type': 'User'}, {'comment_id': 545990550, 'comment_body': ""For the first use case, I think the change I made still allows sending components without any data. The change I'm proposing removes\r\nhttps://github.com/ignitionrobotics/ign-gazebo/blob/2f7f33d4fa34657badec81558d5953fe7643769f/src/EntityComponentManager.cc#L1160-L1163\r\n\r\nwhich was actually skipping components without data.\r\n\r\nFor the second use case, yes, the `CustomComponent` will end up being reset in secondary 1 instead of having the value set by secondary 2. However, I think this would be an issue without the change I'm proposing as well. Without this change, `CustomComponent` will keep its old value even though it's being updated by secondary 2.\r\n\r\nSo if there is a component that can't be serialized, but both sides (server/client or 2 secondaries) want to set the value, we'll end up in an error condition.\r\n\r\nBut I feel like we're giving up a functionality, i.e, the ability to set arbitrary values, for an alternative that's still ends up in an error condition. \r\n\r\n> In summary, it would be nice to be able to tell default data from no data.\r\n\r\nWhat if we used the [iostate](https://en.cppreference.com/w/cpp/io/ios_base/iostate) flags to indicate this. For example, we can set `failbit` in the `DefaultSerializer` when a component cannot be serialized. It's still kind of a hack, but it would allow us to tell the difference between a component that cannot be serialized and a component whose serialization returned an empty string.\r\n"", 'comment_created': datetime.datetime(2020, 12, 18, 17, 47, 54, tzinfo=datetime.timezone.utc), 'commenter': 'azeey', 'type': 'User'}, {'comment_id': 549471504, 'comment_body': "">  we can set failbit in the DefaultSerializer when a component cannot be serialized\r\n\r\nThat sounds like a good idea. I wonder if protobuf is happy to serialize that.\r\n\r\n> Without this change, CustomComponent will keep its old value even though it's being updated by secondary 2.\r\n\r\nI think the difference is that secondary 2 will know that `CustomComponent` has changed, and that it doesn't know what the changes are. So at least it could have a fallback for that case.\r\n\r\n> But I feel like we're giving up a functionality, i.e, the ability to set arbitrary values\r\n\r\nYeah you're right, the current situation is still less than ideal."", 'comment_created': datetime.datetime(2020, 12, 28, 20, 4, 44, tzinfo=datetime.timezone.utc), 'commenter': 'chapulina', 'type': 'User'}, {'comment_id': 556197540, 'comment_body': ""I don't think this block needs to be inside an `else`, because the `if` above is returning. We could save some indentation by removing the `else`.\r\n\r\nAlternatively, you could remove the block that's inside the `if` and let the `SetData` below set the empty `contactsComp`. Makes sense?"", 'comment_created': datetime.datetime(2021, 1, 13, 1, 8, 35, tzinfo=datetime.timezone.utc), 'commenter': 'chapulina', 'type': 'User'}, {'comment_id': 556199194, 'comment_body': 'This is something new since this PR was opened. We should pass these service names through the `AsValidTopic` function like was done on #522.', 'comment_created': datetime.datetime(2021, 1, 13, 1, 13, 33, tzinfo=datetime.timezone.utc), 'commenter': 'chapulina', 'type': 'User'}, {'comment_id': 556201888, 'comment_body': ""Ok, so, after some thought, let's go with the current implementation and we can add the `failbit` approach if we have a concrete use case for it."", 'comment_created': datetime.datetime(2021, 1, 13, 1, 21, 42, tzinfo=datetime.timezone.utc), 'commenter': 'chapulina', 'type': 'User'}, {'comment_id': 556203278, 'comment_body': 'When I uncheck the ""Show Contacts"" box, I get this warning:\r\n\r\n`[GUI] [Wrn] [MarkerManager.cc:555] Unable to delete all markers in namespace[forces], namespace can\'t be found.`\r\n\r\nSince we\'re never creating the forces markers,  I recommend removing all the logic around them. The reason is that it\'s hard to maintain commented out code. Leaving it out makes the plugin simpler and easier to maintain. Whenever we have support for contact normals and forces and want to show them, we can come back to this PR\'s history and revive the code. What do you think?', 'comment_created': datetime.datetime(2021, 1, 13, 1, 25, 51, tzinfo=datetime.timezone.utc), 'commenter': 'chapulina', 'type': 'User'}]","[{'commit_sha': '1817a9ad193e2076bdb823d32da0151d6ef366d2', 'committer_username': 'mcres', 'committer_name': 'MartiÃ±o Crespo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 9, 26, 20, 39, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a7677cb4eff763346f4103ec22ea1e335185270e', 'committer_username': 'mcres', 'committer_name': 'MartiÃ±o Crespo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 9, 26, 20, 39, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1898b18fa0a5ef4eac355b16390b4fa6acdec8c2', 'committer_username': 'mcres', 'committer_name': 'MartiÃ±o Crespo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 9, 26, 20, 39, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f3012de7e0240810fc10312da034dea4aee8b860', 'committer_username': 'mcres', 'committer_name': 'MartiÃ±o Crespo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 9, 26, 20, 39, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': '87bd92b1dab21cd50546903cec019677d38f0dae', 'committer_username': 'mcres', 'committer_name': 'MartiÃ±o Crespo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 9, 26, 20, 39, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd4ff151e33a0f932ea87eae98762a556adfa0a23', 'committer_username': 'mcres', 'committer_name': 'MartiÃ±o Crespo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 9, 26, 20, 39, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': '85aa8106623b0a56ef9c8916de3733eb057d3092', 'committer_username': 'chapulina', 'committer_name': 'Louise Poubel', 'committer_email': None, 'commit_date': datetime.datetime(2013, 10, 22, 22, 20, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dc76a4a517a2d9c5e4a440a9643616bed7913438', 'committer_username': 'chapulina', 'committer_name': 'Louise Poubel', 'committer_email': None, 'commit_date': datetime.datetime(2013, 10, 22, 22, 20, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c86bd7f2865be651abc816745d0c6c6c8e030224', 'committer_username': 'chapulina', 'committer_name': 'Louise Poubel', 'committer_email': None, 'commit_date': datetime.datetime(2013, 10, 22, 22, 20, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1030417c25c8d282244050b2c068053c32e642ba', 'committer_username': 'mcres', 'committer_name': 'MartiÃ±o Crespo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 9, 26, 20, 39, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': '675e1ad117880e90d687c25257f752b31bf6d8c3', 'committer_username': 'mcres', 'committer_name': 'MartiÃ±o Crespo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 9, 26, 20, 39, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': '30cc3aed704b8edb56e2c51bf89ad25ce28333aa', 'committer_username': 'mcres', 'committer_name': 'MartiÃ±o Crespo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 9, 26, 20, 39, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd2828cc240f8fa67abacdb53e5d7ade8538eefd3', 'committer_username': 'azeey', 'committer_name': 'Addisu Z. Taddese', 'committer_email': None, 'commit_date': datetime.datetime(2010, 2, 18, 16, 29, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1e42e2e99aa5a6d4d0fbb16cb76ee4f1032dd6d2', 'committer_username': 'azeey', 'committer_name': 'Addisu Z. Taddese', 'committer_email': None, 'commit_date': datetime.datetime(2010, 2, 18, 16, 29, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3c116d83495c86bb5ca273567e7fc3848411b29c', 'committer_username': 'chapulina', 'committer_name': 'Louise Poubel', 'committer_email': None, 'commit_date': datetime.datetime(2013, 10, 22, 22, 20, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5c416f025157f83686f002fbe8da42be2f1b9d7f', 'committer_username': 'chapulina', 'committer_name': 'Louise Poubel', 'committer_email': None, 'commit_date': datetime.datetime(2013, 10, 22, 22, 20, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c28fc2053deeea0c179171a90897e2e32d1f9936', 'committer_username': 'chapulina', 'committer_name': 'Louise Poubel', 'committer_email': None, 'commit_date': datetime.datetime(2013, 10, 22, 22, 20, 7, tzinfo=datetime.timezone.utc)}]",MartiÃ±o Crespo,14854080,,User,,13,,9,7
463249149,Sync components removal,"It sets the `SerializedStateMap` and `SerializedState` messages when a component is removed after `EntityComponentManager::RemoveComponent` is called. This allows a more precise synchronization between the server and GUI `EntityComponentManager`.

This PR is made in order to solve an issue in #234 already described [here](https://github.com/ignitionrobotics/ign-gazebo/pull/234#issuecomment-664414267) (no. 3).

A couple of comments about the PR:

- [This](https://github.com/ignitionrobotics/ign-gazebo/compare/master...mcres:sync_components_removal?expand=1#diff-f62ca607b3aece56b7217a0fb98c1253R864) TODO comment wasn't removed, given that the PR doesn't do any queuing.
- I think the PR should have 2 tests: one that checks the `SerializedStateMap` message after calling `RemoveComponent`, and another one that checks that a component is actually removed when its `remove` flag in the message is set to true. I've implemented the first one and the second should be already done [here](https://github.com/mcres/ign-gazebo/blob/61841ca5548145e364c8aeb832950289ac6b121c/src/EntityComponentManager_TEST.cc#L1628-L1693).",True,272,https://api.github.com/repos/gazebosim/gz-sim/pulls/272,https://github.com/gazebosim/gz-sim/pull/272,closed,332,5,5,9,4,33,1,1,[{'name': 'ðŸ”® dome'}],2020-08-05 09:02:35+00:00,2020-08-28 02:58:12+00:00,1965337.0,"22 days, 17:55:37","[{'comment_id': 465780181, 'comment_body': 'I recommend using an unordered map for efficiency.\r\n\r\nAlso, do we need to assume one removed component per entity? We can easily support multiple components by using a `unordered_multimap`. ', 'comment_created': datetime.datetime(2020, 8, 5, 14, 44, 31, tzinfo=datetime.timezone.utc), 'commenter': 'azeey', 'type': 'User'}, {'comment_id': 465789908, 'comment_body': ""I think this should go outside of the for loop, `  for (const ComponentKey &comp : this->dataPtr->entityComponents[_entity])`, because it doesn't need `comp`."", 'comment_created': datetime.datetime(2020, 8, 5, 14, 57, 31, tzinfo=datetime.timezone.utc), 'commenter': 'azeey', 'type': 'User'}, {'comment_id': 465791416, 'comment_body': ""Looks like we also need this in `void EntityComponentManager::AddEntityToMessage(msgs::SerializedState &_msg,\r\n    Entity _entity, const std::unordered_set<ComponentTypeId> &_types) const`. Consider making it a function and calling it from both places.\r\n\r\nWhile we're here, @chapulina, do we still need both `msgs::SerializedState` and `msgs::SerializedStateMap`? From looking at our code base, I only found `msgs::SerializedState` used in the LogRecorder/LogPlayback and in tests, but LogRecorder also supports `msgs::SerializedStateMap`."", 'comment_created': datetime.datetime(2020, 8, 5, 14, 59, 31, tzinfo=datetime.timezone.utc), 'commenter': 'azeey', 'type': 'User'}, {'comment_id': 465811460, 'comment_body': ""We should make it possible to clear `removedComponents` outside of this function. For example, `GuiRunner` calls `SetState` to synchronize its ECM and ends up calling `RemoveComponent`, but since it doesn't publish its ECM, `removedComponents` is never cleared and would grow indefinitely. I suggest creating a function `ClearRemovedComponents` and whoever uses the ECM is responsible for calling it after a time step or a sync, just like `ClearNewlyCreatedEntities` and `ProcessRemoveEntityRequests`. \r\n\r\nhttps://github.com/ignitionrobotics/ign-gazebo/blob/139020c8ec0af219efd848b84b4954c2c65936e9/src/SimulationRunner.cc#L713-L716\r\nhttps://github.com/ignitionrobotics/ign-gazebo/blob/139020c8ec0af219efd848b84b4954c2c65936e9/src/gui/GuiRunner.cc#L103-L104\r\n"", 'comment_created': datetime.datetime(2020, 8, 5, 15, 27, 26, tzinfo=datetime.timezone.utc), 'commenter': 'azeey', 'type': 'User'}, {'comment_id': 466351395, 'comment_body': ""> do we need to assume one removed component per entity?\r\n\r\nI don't really know how the sync works, but I supposed that it would occur immediately after `RemoveComponent` is called. \r\nIf you want to remove two different components of the same entity you would have to call `RemoveComponent` twice. My question is, in this case sync would take place after the first call or after the second?"", 'comment_created': datetime.datetime(2020, 8, 6, 11, 38, 59, tzinfo=datetime.timezone.utc), 'commenter': 'mcres', 'type': 'User'}, {'comment_id': 466371075, 'comment_body': ""I assume that `this->dataPtr->removedComponents.erase(_entity)` wouldn't be needed there, even if the ECM is actually publishing the message? I mean, in this case it would be the responsibility of the server to call that method?"", 'comment_created': datetime.datetime(2020, 8, 6, 12, 19, 32, tzinfo=datetime.timezone.utc), 'commenter': 'mcres', 'type': 'User'}, {'comment_id': 466507188, 'comment_body': ""No, I believe sync happens once every iteration when the `SceneBroadcaster` publishes the state message in its `PostUpdate` https://github.com/ignitionrobotics/ign-gazebo/blob/139020c8ec0af219efd848b84b4954c2c65936e9/src/systems/scene_broadcaster/SceneBroadcaster.cc#L302 So, calling `RemoveComponent` doesn't cause a sync."", 'comment_created': datetime.datetime(2020, 8, 6, 15, 43, 47, tzinfo=datetime.timezone.utc), 'commenter': 'azeey', 'type': 'User'}, {'comment_id': 466515836, 'comment_body': ""Well, remember that the server and the GUI have their own instances of the `EntityComponentManager` (ECM) class. What the GUI does on its own ECM doesn't affect the server. In the future, we will probably add a way for the GUI's ECM to be sent to the server, but that's not the case right now.\r\n\r\nWhen the GUI calls `RemoveComponent` on its instance of ECM,  the removed component is added to `removeComponents` of the GUI ECM. But since the GUI doesn't call `AddEntityToMessage` (because it doesn't need to publish its state),  the `removedComponents` container inside the GUI ECM will not be cleared.\r\n\r\nIt would be better if `removedComponents` gets cleared every time step regardless of whether `AddEntityToMessage` is called."", 'comment_created': datetime.datetime(2020, 8, 6, 15, 56, 26, tzinfo=datetime.timezone.utc), 'commenter': 'azeey', 'type': 'User'}, {'comment_id': 467633767, 'comment_body': '7992720 ', 'comment_created': datetime.datetime(2020, 8, 9, 22, 1, 37, tzinfo=datetime.timezone.utc), 'commenter': 'mcres', 'type': 'User'}, {'comment_id': 467633888, 'comment_body': '7992720 ', 'comment_created': datetime.datetime(2020, 8, 9, 22, 2, 48, tzinfo=datetime.timezone.utc), 'commenter': 'mcres', 'type': 'User'}, {'comment_id': 467634101, 'comment_body': ""Addressed in 7992720\r\n\r\nI've created 2 overloaded functions to deal with `msgs::SerializedState` and `msgs::SerializedStateMap`.\r\nAlso added a test for the `SerializedState` message."", 'comment_created': datetime.datetime(2020, 8, 9, 22, 4, 59, tzinfo=datetime.timezone.utc), 'commenter': 'mcres', 'type': 'User'}, {'comment_id': 467634873, 'comment_body': ""I think I didn't explain myself very well.\r\n\r\nI've added the `ClearRemovedComponents` function in 7992720, but I'm not sure if [this](https://github.com/ignitionrobotics/ign-gazebo/blob/79927200d07cd5bc5953dde14ee15182988b06ff/src/EntityComponentManager.cc#L796) is still necessary or it's enough if `SimulationRunner.cc` and `GuiRunner.cc` call `ClearRemovedComponents`?"", 'comment_created': datetime.datetime(2020, 8, 9, 22, 13, 37, tzinfo=datetime.timezone.utc), 'commenter': 'mcres', 'type': 'User'}, {'comment_id': 468292455, 'comment_body': ""Ah, I see. Yeah, I don't think its necessary. In fact, I think we should remove it because leaving it in would make it so that only one caller of `EntityComponentManager::State` would get the list of removed components. The second caller won't get the removed components because `removedComponents` would have been cleared by the first call."", 'comment_created': datetime.datetime(2020, 8, 11, 2, 37, 7, tzinfo=datetime.timezone.utc), 'commenter': 'azeey', 'type': 'User'}, {'comment_id': 468295024, 'comment_body': 'These tests look great! One more check would be to create another instance of `EntityComponentManager` that is synced with `manager` via `SetState` before and after the components are removed. This will test that deserialization is working properly without actually publishing messages.', 'comment_created': datetime.datetime(2020, 8, 11, 2, 46, 44, tzinfo=datetime.timezone.utc), 'commenter': 'azeey', 'type': 'User'}, {'comment_id': 468295744, 'comment_body': 'Now that this exists, can you add a call to `ClearRemovedComponents` from https://github.com/ignitionrobotics/ign-gazebo/blob/139020c8ec0af219efd848b84b4954c2c65936e9/src/SimulationRunner.cc#L713-L716 and https://github.com/ignitionrobotics/ign-gazebo/blob/139020c8ec0af219efd848b84b4954c2c65936e9/src/gui/GuiRunner.cc#L103-L104', 'comment_created': datetime.datetime(2020, 8, 11, 2, 49, 40, tzinfo=datetime.timezone.utc), 'commenter': 'azeey', 'type': 'User'}, {'comment_id': 468295999, 'comment_body': 'The documentation is out of date now.', 'comment_created': datetime.datetime(2020, 8, 11, 2, 50, 27, tzinfo=datetime.timezone.utc), 'commenter': 'azeey', 'type': 'User'}, {'comment_id': 468296829, 'comment_body': ""It would also be great if you could add checks that cover `ClearRemovedComponents`? You'll have to add a member function `EntityCompMgrTest` that in turn calls `ClearRemovedComponents`. If you are running out of time, let me know and I can add this test."", 'comment_created': datetime.datetime(2020, 8, 11, 2, 53, 41, tzinfo=datetime.timezone.utc), 'commenter': 'azeey', 'type': 'User'}, {'comment_id': 468881241, 'comment_body': ""Thank you!\r\nAddressed in 942c6d4.\r\n\r\n> It would also be great if you could add checks that cover ClearRemovedComponents\r\n\r\nFollowing up on https://github.com/ignitionrobotics/ign-gazebo/pull/272#discussion_r468292455, I've added a `ClearRemovedComponents` on the first two tests, so I think I don't need to add an extra test for that? Let me know.\r\nI've also added the sync test between managers."", 'comment_created': datetime.datetime(2020, 8, 11, 21, 42, tzinfo=datetime.timezone.utc), 'commenter': 'mcres', 'type': 'User'}, {'comment_id': 468881547, 'comment_body': '942c6d4 ', 'comment_created': datetime.datetime(2020, 8, 11, 21, 42, 46, tzinfo=datetime.timezone.utc), 'commenter': 'mcres', 'type': 'User'}, {'comment_id': 468881605, 'comment_body': '942c6d4 ', 'comment_created': datetime.datetime(2020, 8, 11, 21, 42, 53, tzinfo=datetime.timezone.utc), 'commenter': 'mcres', 'type': 'User'}, {'comment_id': 468922862, 'comment_body': 'Before calling `guiManager.State()`,  it would be good to check if the components are not there via the `Component` API\r\n\r\n```suggestion\r\n  EXPECT_TRUE(nullptr != guiManager.Component<IntComponent>(e1));\r\n  EXPECT_TRUE(nullptr != guiManager.Component<DoubleComponent>(e1));\r\n  EXPECT_TRUE(nullptr != guiManager.Component<StringComponent>(e1));\r\n  guiManager.SetState(newStateMsg);\r\n  EXPECT_TRUE(nullptr != guiManager.Component<IntComponent>(e1));\r\n  EXPECT_TRUE(nullptr == guiManager.Component<DoubleComponent>(e1));\r\n  EXPECT_TRUE(nullptr == guiManager.Component<StringComponent>(e1));\r\n  \r\n```', 'comment_created': datetime.datetime(2020, 8, 11, 23, 37, 10, tzinfo=datetime.timezone.utc), 'commenter': 'azeey', 'type': 'User'}, {'comment_id': 468924561, 'comment_body': 'That will do. Thanks!', 'comment_created': datetime.datetime(2020, 8, 11, 23, 42, 28, tzinfo=datetime.timezone.utc), 'commenter': 'azeey', 'type': 'User'}, {'comment_id': 469542699, 'comment_body': '2f3cd6e ', 'comment_created': datetime.datetime(2020, 8, 12, 20, 58, 5, tzinfo=datetime.timezone.utc), 'commenter': 'mcres', 'type': 'User'}, {'comment_id': 469577651, 'comment_body': 'I think these TODOs can be removed now, right? We\'re not ""queuing"" the removal, but for the purposes of this function, keeping track of what components were removed should be all that\'s needed.', 'comment_created': datetime.datetime(2020, 8, 12, 22, 17, 13, tzinfo=datetime.timezone.utc), 'commenter': 'chapulina', 'type': 'User'}, {'comment_id': 469581245, 'comment_body': ""I noticed that the order between `ClearRemovedComponents` and `ProcessRemoveEntityRequests` is swapped on the server and client.\r\n\r\nIt probably doesn't matter, right? But just for consistency in case the internal implementation of these functions change in the future, it would be nice to be consistent with the ordering."", 'comment_created': datetime.datetime(2020, 8, 12, 22, 26, 15, tzinfo=datetime.timezone.utc), 'commenter': 'chapulina', 'type': 'User'}, {'comment_id': 469745952, 'comment_body': ""Should I move them to where they originally were?\r\nI didn't remove them because I though maybe some kind of queuing should need to be done in the future?"", 'comment_created': datetime.datetime(2020, 8, 13, 7, 18, 5, tzinfo=datetime.timezone.utc), 'commenter': 'mcres', 'type': 'User'}, {'comment_id': 470146820, 'comment_body': ""I'd just remove these lines. The queuing is still needed, but not by this function"", 'comment_created': datetime.datetime(2020, 8, 13, 18, 3, 23, tzinfo=datetime.timezone.utc), 'commenter': 'chapulina', 'type': 'User'}, {'comment_id': 470301738, 'comment_body': ""I just saw this question. I think we've been keeping it for backwards compatibility. We can deprecate the use of anything non-map. We'll probably have to deprecate on dome and remove on E."", 'comment_created': datetime.datetime(2020, 8, 13, 23, 24, 55, tzinfo=datetime.timezone.utc), 'commenter': 'chapulina', 'type': 'User'}, {'comment_id': 470477461, 'comment_body': 'b913c32', 'comment_created': datetime.datetime(2020, 8, 14, 8, 14, 10, tzinfo=datetime.timezone.utc), 'commenter': 'mcres', 'type': 'User'}, {'comment_id': 470477535, 'comment_body': 'b913c32', 'comment_created': datetime.datetime(2020, 8, 14, 8, 14, 19, tzinfo=datetime.timezone.utc), 'commenter': 'mcres', 'type': 'User'}, {'comment_id': 470813861, 'comment_body': ""This expectation is failing on macOS, as well as line 2052:\r\n\r\nhttps://build.osrfoundation.org/job/ignition_gazebo-ci-pr_any-homebrew-amd64/3546/testReport/(root)/EntityComponentManagerRepeat_EntityComponentManagerFixture/SerializedStateMapMsgAfterRemoveComponent_1/\r\n\r\nI'm not sure yet what could be different there."", 'comment_created': datetime.datetime(2020, 8, 14, 18, 59, 34, tzinfo=datetime.timezone.utc), 'commenter': 'chapulina', 'type': 'User'}, {'comment_id': 471299369, 'comment_body': ""It must be the way I access the components with `compIter`. It seems that the order the components are accessed is different for macOS than for Linux. I think this has been solved [like this](https://github.com/ignitionrobotics/ign-gazebo/blob/master/src/EntityComponentManager_TEST.cc#L1528-L1554) in the `State` test. Should I do the same?\r\n\r\nI'd say that `compIter` access the components in decreasing order for Linux (i.e. the last added component being the first pointed by the iterator returned by `begin()`), and increasing order for macOS. A fancier solution than the previously proposed could be getting the normal or reversed pointer based on the OS that's running, but I don't know if that's possible. That would save us a bunch of `if-else` statements."", 'comment_created': datetime.datetime(2020, 8, 17, 7, 44, 12, tzinfo=datetime.timezone.utc), 'commenter': 'mcres', 'type': 'User'}, {'comment_id': 471600287, 'comment_body': ""The order of elements in `components()` seems like an implementation detail that we probably don't want to rely on because it depends on the (undetermined) order in `removedComponents` which is an `std::unordered_multimap`. If we want to preserve the order of components, you can use `std::unordered_map<Entity, std::vector<ComponentKey>>` for `removedComponents` instead.\r\n\r\nA different solution would be to have the expectations in a map from `component type id` -> `bool expectation` when creating the components at the beginning of the test. The component type id is returned by `CreateComponent` as the first element of a pair. Once you have the map, you can iterate through the components in `stateMsg` and look them up from the map based on their type."", 'comment_created': datetime.datetime(2020, 8, 17, 16, 35, 25, tzinfo=datetime.timezone.utc), 'commenter': 'azeey', 'type': 'User'}]","[{'commit_sha': 'b630cfd0d112886b81ec9c2acca1042ca06da6ca', 'committer_username': 'mcres', 'committer_name': 'MartiÃ±o Crespo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 9, 26, 20, 39, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': '61841ca5548145e364c8aeb832950289ac6b121c', 'committer_username': 'mcres', 'committer_name': 'MartiÃ±o Crespo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 9, 26, 20, 39, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': '79927200d07cd5bc5953dde14ee15182988b06ff', 'committer_username': 'mcres', 'committer_name': 'MartiÃ±o Crespo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 9, 26, 20, 39, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': '942c6d400b18dfa8f963f87baf32b27e860d1a8c', 'committer_username': 'mcres', 'committer_name': 'MartiÃ±o Crespo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 9, 26, 20, 39, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2f3cd6e2693db0f3c566054fffcbef11484774e0', 'committer_username': 'mcres', 'committer_name': 'MartiÃ±o Crespo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 9, 26, 20, 39, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b913c32da2aa35cb9664e4a834b4808efd21467d', 'committer_username': 'mcres', 'committer_name': 'MartiÃ±o Crespo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 9, 26, 20, 39, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1137c86ad8ae56a04c1743b69c88ab493fb60d43', 'committer_username': 'mcres', 'committer_name': 'MartiÃ±o Crespo', 'committer_email': None, 'commit_date': datetime.datetime(2015, 9, 26, 20, 39, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ea3af3bde861be7865f830626bf6cf4fe39023b1', 'committer_username': 'azeey', 'committer_name': 'Addisu Z. Taddese', 'committer_email': None, 'commit_date': datetime.datetime(2010, 2, 18, 16, 29, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0bb612a07cad43b961b02ccdef21bbbfd46578bf', 'committer_username': 'chapulina', 'committer_name': 'Louise Poubel', 'committer_email': None, 'commit_date': datetime.datetime(2013, 10, 22, 22, 20, 7, tzinfo=datetime.timezone.utc)}]",MartiÃ±o Crespo,14854080,,User,,13,,9,7

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
255865265,gz-sim,gazebosim/gz-sim,C++,253,654,17,136,6994,333,176,24,"[{'id': 511781049, 'number': 431, 'closed': datetime.datetime(2021, 5, 3, 22, 32, 19, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 10, 28, 19, 18, 24, tzinfo=datetime.timezone.utc), 'time_taken': 16168435.0, 'time_delta': '187 days, 3:13:55', 'additions': 676, 'deletions': 136, 'state': 'closed'}, {'id': 463249149, 'number': 272, 'closed': datetime.datetime(2020, 8, 28, 2, 58, 12, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 5, 9, 2, 35, tzinfo=datetime.timezone.utc), 'time_taken': 1965337.0, 'time_delta': '22 days, 17:55:37', 'additions': 332, 'deletions': 5, 'state': 'closed'}, {'id': 450081410, 'number': 250, 'closed': datetime.datetime(2020, 10, 14, 22, 53, 1, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 16, 10, 26, 28, tzinfo=datetime.timezone.utc), 'time_taken': 7820793.0, 'time_delta': '90 days, 12:26:33', 'additions': 246, 'deletions': 2, 'state': 'closed'}, {'id': 448358825, 'number': 238, 'closed': datetime.datetime(2020, 7, 13, 17, 51, 26, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 13, 16, 21, 22, tzinfo=datetime.timezone.utc), 'time_taken': 5404.0, 'time_delta': '1:30:04', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 446360425, 'number': 234, 'closed': datetime.datetime(2021, 5, 5, 1, 42, 13, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 8, 16, 39, 10, tzinfo=datetime.timezone.utc), 'time_taken': 25952583.0, 'time_delta': '300 days, 9:03:03', 'additions': 1161, 'deletions': 12, 'state': 'closed'}, {'id': 440549236, 'number': 229, 'closed': datetime.datetime(2020, 12, 12, 13, 10, 24, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 26, 12, 9, 27, tzinfo=datetime.timezone.utc), 'time_taken': 14605257.0, 'time_delta': '169 days, 1:00:57', 'additions': 1407, 'deletions': 0, 'state': 'closed'}, {'id': 421890166, 'number': 153, 'closed': datetime.datetime(2020, 6, 12, 17, 53, 33, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 5, 22, 12, 22, 46, tzinfo=datetime.timezone.utc), 'time_taken': 1834247.0, 'time_delta': '21 days, 5:30:47', 'additions': 76, 'deletions': 11, 'state': 'closed'}]"
266074309,ign-gazebo,mcres/ign-gazebo,C++,0,0,1,35,5199,0,111,0,"[{'id': 471810189, 'number': 1, 'closed': datetime.datetime(2020, 10, 28, 19, 12, 2, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 21, 19, 7, 38, tzinfo=datetime.timezone.utc), 'time_taken': 5875464.0, 'time_delta': '68 days, 0:04:24', 'additions': 482, 'deletions': 42, 'state': 'closed'}]"
