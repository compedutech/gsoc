pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
396360293,Fixed #31169 -- Adapted the parallel test runner to use spawn. [GSoC],"ticket-31169

# TO DO:
- ~Ensure test runner works with ```--reverse```~ Fixed (not sure how)
- PostgreSQL:
   - ~Investigate inspectdb failure~ [Patch submitted to fix](https://code.djangoproject.com/ticket/31736)
   - ~Fix m2m_through failure (fails on Windows with ```--parallel=1``` as well)~ Fixed
- ~Add parallel support for Oracle, whether spawned or forked~ [PR](https://github.com/django/django/pull/13326)",False,12646,https://api.github.com/repos/django/django/pulls/12646,https://github.com/django/django/pull/12646,closed,625,344,13,1,37,59,0,0,[],2020-03-31 14:06:02+00:00,2022-02-14 05:15:57+00:00,59152195.0,"684 days, 15:09:55","[{'comment_id': 443284677, 'comment_body': ""@adamchainz  I'm currently pre-deleting all contenttypes before each contenttypes test to work around app labels being incorrectly selected as stale.\r\n\r\nI have a feeling there's a better more elegant solution than this. One that will feel less astonishing and less like a hack.\r\n\r\nP.S sorry for the double mention, accidentally pressed start a review instead of add single comment\r\n"", 'comment_created': datetime.datetime(2020, 6, 22, 1, 59, 16, tzinfo=datetime.timezone.utc), 'commenter': 'lothemar', 'type': 'User'}, {'comment_id': 453747532, 'comment_body': 'Can you not apply this decorator up in `PostgreSQLTestCase` instead?', 'comment_created': datetime.datetime(2020, 7, 13, 15, 45, 12, tzinfo=datetime.timezone.utc), 'commenter': 'adamchainz', 'type': 'User'}, {'comment_id': 453749118, 'comment_body': 'If you split this small test fix into separate commits with a title like ""Made inspectdb tests pass on PostgreSQL Windows"", it could be merged to master ahead of the main PR. Same with some other fixes like `databases = \'__all__\'` on the checks tests and the `with tempfile...`', 'comment_created': datetime.datetime(2020, 7, 13, 15, 47, 31, tzinfo=datetime.timezone.utc), 'commenter': 'adamchainz', 'type': 'User'}, {'comment_id': 453749603, 'comment_body': ""`setUpTestData` only runs once at the start of the test case, so I don't think this is particularly bad. But if we coudl avoid app labels being incorrectly marked as stale, tath would be better."", 'comment_created': datetime.datetime(2020, 7, 13, 15, 48, 14, tzinfo=datetime.timezone.utc), 'commenter': 'adamchainz', 'type': 'User'}, {'comment_id': 453750145, 'comment_body': 'You can put this import at the top of the file', 'comment_created': datetime.datetime(2020, 7, 13, 15, 49, 7, tzinfo=datetime.timezone.utc), 'commenter': 'adamchainz', 'type': 'User'}, {'comment_id': 453762398, 'comment_body': ""```suggestion\r\n    pass\r\n```\r\n\r\nYou can actually drop this field, since the test is doing `.exists()` - the implicit `AutoField` is all that's needed to create the table."", 'comment_created': datetime.datetime(2020, 7, 13, 16, 7, 36, tzinfo=datetime.timezone.utc), 'commenter': 'adamchainz', 'type': 'User'}, {'comment_id': 453762612, 'comment_body': '```suggestion\r\n    CheckModel.objects.create(check_ran=True)\r\n```\r\n\r\nNo need to call `save()` - `create()` already saves under the hood.', 'comment_created': datetime.datetime(2020, 7, 13, 16, 7, 58, tzinfo=datetime.timezone.utc), 'commenter': 'adamchainz', 'type': 'User'}, {'comment_id': 453763414, 'comment_body': ""Why doesn't the row get copied in the database dump, along with others like the migrations and content types? Don't the system checks run before the new test processes and the database cloning?"", 'comment_created': datetime.datetime(2020, 7, 13, 16, 9, 15, tzinfo=datetime.timezone.utc), 'commenter': 'adamchainz', 'type': 'User'}, {'comment_id': 453763747, 'comment_body': ""It shouldn't be necessary to have two ways of checking this, the model instance should be enough?"", 'comment_created': datetime.datetime(2020, 7, 13, 16, 9, 47, tzinfo=datetime.timezone.utc), 'commenter': 'adamchainz', 'type': 'User'}, {'comment_id': 453845728, 'comment_body': 'Already done in #13102. This PR just needs rebasing.', 'comment_created': datetime.datetime(2020, 7, 13, 18, 26, 34, tzinfo=datetime.timezone.utc), 'commenter': 'ngnpope', 'type': 'User'}, {'comment_id': 453910306, 'comment_body': '👍 ', 'comment_created': datetime.datetime(2020, 7, 13, 20, 24, 25, tzinfo=datetime.timezone.utc), 'commenter': 'adamchainz', 'type': 'User'}, {'comment_id': 455142851, 'comment_body': 'Agreed, I forgot to remove this', 'comment_created': datetime.datetime(2020, 7, 15, 15, 30, 54, tzinfo=datetime.timezone.utc), 'commenter': 'lothemar', 'type': 'User'}, {'comment_id': 455145383, 'comment_body': ""The system checks run after we setup the databases, including their clones. So this row does not exist in cloned databases.\r\n\r\nWe could rewrite it so cloning happens after system checks are run and sidestep this ugly bit of code, and I'm personally leaning towards that. I'm currently cloning SQLite after system checks are run because I couldn't find a good way to redirect the connection for this test. "", 'comment_created': datetime.datetime(2020, 7, 15, 15, 34, 58, tzinfo=datetime.timezone.utc), 'commenter': 'lothemar', 'type': 'User'}, {'comment_id': 455145551, 'comment_body': 'Good catch!', 'comment_created': datetime.datetime(2020, 7, 15, 15, 35, 12, tzinfo=datetime.timezone.utc), 'commenter': 'lothemar', 'type': 'User'}, {'comment_id': 455147561, 'comment_body': ""The ```databases='__all__'``` change isn't a fix. It's a needed change since we're querying the databases every time we do run system checks because of the change in the ```my_check``` test. \r\n\r\nWill do for the ```with tempfile```!"", 'comment_created': datetime.datetime(2020, 7, 15, 15, 38, 18, tzinfo=datetime.timezone.utc), 'commenter': 'lothemar', 'type': 'User'}, {'comment_id': 455148674, 'comment_body': 'It led to a couple of unexpected errors and test failures. We could subclass PostgreSQLTestCase and apply the decorator on the subclass. That was something I wanted to do but forgot it in my backlog.', 'comment_created': datetime.datetime(2020, 7, 15, 15, 40, 2, tzinfo=datetime.timezone.utc), 'commenter': 'lothemar', 'type': 'User'}, {'comment_id': 455179445, 'comment_body': ""> We could rewrite it so cloning happens after system checks are run\r\n\r\nIf that's easy enough I think it's a good idea. It means that check errors will be displayed and stop the test process sooner, speeding up feedback."", 'comment_created': datetime.datetime(2020, 7, 15, 16, 31, 23, tzinfo=datetime.timezone.utc), 'commenter': 'adamchainz', 'type': 'User'}, {'comment_id': 456891730, 'comment_body': ""Perhaps lets override this method and handle it there?\r\n\r\n```python\r\ndef _create_test_user(self, ...):\r\n    try:\r\n        return super()._create_test_user(...)\r\n    except Exception as e:\r\n        if 'ORA-01920' in str(e):\r\n            self._destroy_test_user(...)\r\n            self._create_test_user(...) \r\n```\r\n\r\nSame for `_execute_test_db_creation`. I would also add a small comment explaining what `ORA-01920` and `ORA-01543` means"", 'comment_created': datetime.datetime(2020, 7, 19, 10, 37, 12, tzinfo=datetime.timezone.utc), 'commenter': 'orf', 'type': 'User'}, {'comment_id': 456892016, 'comment_body': 'I would use `subprocess.run(..., check=True)` to throw an exception if `expdp` fails. Same for the `impdp` below.\r\n\r\nWould it be helpful to display the output from this command? If so, `subprocess.check_call()` might be helpful.', 'comment_created': datetime.datetime(2020, 7, 19, 10, 40, 23, tzinfo=datetime.timezone.utc), 'commenter': 'orf', 'type': 'User'}, {'comment_id': 456892548, 'comment_body': 'Do we accept f-strings now?', 'comment_created': datetime.datetime(2020, 7, 19, 10, 45, 34, tzinfo=datetime.timezone.utc), 'commenter': 'laymonage', 'type': 'User'}, {'comment_id': 456892715, 'comment_body': ""We're only supporting 3.6 and above in master, so f-strings are acceptable. "", 'comment_created': datetime.datetime(2020, 7, 19, 10, 47, 33, tzinfo=datetime.timezone.utc), 'commenter': 'orf', 'type': 'User'}, {'comment_id': 456893467, 'comment_body': 'Yeah, but the last time I encountered it, we still avoided its use. I may have missed something.', 'comment_created': datetime.datetime(2020, 7, 19, 10, 54, 46, tzinfo=datetime.timezone.utc), 'commenter': 'laymonage', 'type': 'User'}, {'comment_id': 456893755, 'comment_body': ""Ahh right, I'm not sure if there's an official policy on it but it's appearing in [a few PRs now](https://github.com/django/django/pull/13207/files#diff-b31c0b9609438fe2598d068a906814f7R132). If we need to switch to `.format` or `%s` we can do this later on, it should be easy enough."", 'comment_created': datetime.datetime(2020, 7, 19, 10, 56, 53, tzinfo=datetime.timezone.utc), 'commenter': 'orf', 'type': 'User'}, {'comment_id': 456897552, 'comment_body': ""I ran into an interesting bug with this. If you define two databases:\r\n\r\n```\r\nDATABASES = {\r\n    'default': {\r\n        'ENGINE': 'django.db.backends.mysql',\r\n        ....\r\n    },\r\n    'other': {\r\n        'ENGINE': 'django.db.backends.mysql',\r\n        ....\r\n    }\r\n}\r\n```\r\n\r\nAnd execute the `model_options` test suite, `mysqldump` will be executed with `''` as the database name for the `other` databases. I tracked this down to the call to `databases = self.get_databases(suite)` in `run_tests()` - this returns a _subset_ of databases that the test suite requires to run. In the case of `model_options` it only requires the `default` database.\r\n\r\nOnly these selected databases have a `NAME` set to `test_`, which means `connections['other'].settings_dict['NAME']` is an empty string.\r\n\r\nLong story short - I think you need to pass in the `databases` set [from this line here](https://github.com/django/django/blob/297df97119639c0e49b9a26fce60ce2ff41e0e73/django/test/runner.py#L743) into this method rather than iterating over the global `connections` object."", 'comment_created': datetime.datetime(2020, 7, 19, 11, 36, 50, tzinfo=datetime.timezone.utc), 'commenter': 'orf', 'type': 'User'}, {'comment_id': 456944114, 'comment_body': 'Ah yes, the databases created depend on which databases are needed by the test suite. Good catch! ', 'comment_created': datetime.datetime(2020, 7, 19, 19, 12, 46, tzinfo=datetime.timezone.utc), 'commenter': 'lothemar', 'type': 'User'}, {'comment_id': 456944188, 'comment_body': ""I found it a lot easier than having to use ```%s``` every time. If we have to switch, it'll be pretty simple"", 'comment_created': datetime.datetime(2020, 7, 19, 19, 13, 35, tzinfo=datetime.timezone.utc), 'commenter': 'lothemar', 'type': 'User'}, {'comment_id': 456944292, 'comment_body': 'The output is already shown by default when it runs. Adding exception handling is a nice touch!', 'comment_created': datetime.datetime(2020, 7, 19, 19, 14, 27, tzinfo=datetime.timezone.utc), 'commenter': 'lothemar', 'type': 'User'}, {'comment_id': 457887703, 'comment_body': ""So I've [opened another discussion re f-strings](https://groups.google.com/d/topic/django-developers/XNhpOHam0zE/discussion). \r\n\r\nBut, whether they're allowed or not, I'm not quite convinced by the readability of this particular example... 😬"", 'comment_created': datetime.datetime(2020, 7, 21, 7, 19, 25, tzinfo=datetime.timezone.utc), 'commenter': 'carltongibson', 'type': 'User'}, {'comment_id': 458249430, 'comment_body': ""Could we possibly run checks before setup'ing test databases? What are the benefits of running checks on test databases in the first place?"", 'comment_created': datetime.datetime(2020, 7, 21, 16, 58, 40, tzinfo=datetime.timezone.utc), 'commenter': 'charettes', 'type': 'User'}, {'comment_id': 458264472, 'comment_body': ""Some checks require database access e.g. mysql.W002 ( https://docs.djangoproject.com/en/3.0/ref/checks/#database ) , django-mysql's checks ( https://django-mysql.readthedocs.io/en/latest/checks.html ).\r\n\r\nThose I've linked to don't strictly need access to an existing schema but I think changing this could be considered a breaking change."", 'comment_created': datetime.datetime(2020, 7, 21, 17, 23, 23, tzinfo=datetime.timezone.utc), 'commenter': 'adamchainz', 'type': 'User'}, {'comment_id': 475244928, 'comment_body': ""@adamchainz I've taken a stab at this and added a ```call_command('check', ....)``` call inside ```setup_databases```.\r\n\r\nMotivation is splitting up that adding a ```clone_databases``` doesn't gel well with the [timings patch](https://github.com/django/django/pull/13224) and there isn't much justification for adding it other than the check_framework test failure.\r\n\r\nWith that in mind, I suggest two possible paths to move forward with this discussion:\r\n- Add a ```call_command('check', ...)``` inside setup_databases (possibly breaking tests and expected behavior)\r\n- Rewrite the check_framework test\r\n\r\nI'm currently exploring option 1, but I think it might be more trouble than it's worth and introduce more headaches because the test runner's code is written using the assumption that setup_databases would never handle exceptions raised by running checks.\r\n\r\nWhat do you think?"", 'comment_created': datetime.datetime(2020, 8, 23, 17, 34, 2, tzinfo=datetime.timezone.utc), 'commenter': 'lothemar', 'type': 'User'}, {'comment_id': 496585479, 'comment_body': '`VACUUM INTO` was [added in 3.27.0](https://sqlite.org/releaselog/3_27_0.html). This would bump requirements in `databases.txt` and `check_sqlite_version()` check in `django/db/backends/sqlite3/base.py`', 'comment_created': datetime.datetime(2020, 9, 29, 9, 46, 34, tzinfo=datetime.timezone.utc), 'commenter': 'carltongibson', 'type': 'User'}, {'comment_id': 496600644, 'comment_body': 'We cannot bump to SQLite 3.27 because it will break all installations with Python 3.6.', 'comment_created': datetime.datetime(2020, 9, 29, 10, 11, 25, tzinfo=datetime.timezone.utc), 'commenter': 'felixxm', 'type': 'User'}, {'comment_id': 549951228, 'comment_body': 'You are checking for Python versions less than 3.7 here? Something like this should work?\n\n```suggestion\n    if sys.version_info < (3, 7)\n```', 'comment_created': datetime.datetime(2020, 12, 30, 6, 38, 45, tzinfo=datetime.timezone.utc), 'commenter': 'smithdc1', 'type': 'User'}, {'comment_id': 549969207, 'comment_body': 'This is not a reliable check, Python can be shipped/compiled with different versions of SQLite (see https://github.com/django/django/pull/12646#issuecomment-745138590) You should check SQLite version instead:\r\n```python\r\ncan_clone_databases = Database.sqlite_version_info >= (3, 27, 0)\r\n```', 'comment_created': datetime.datetime(2020, 12, 30, 7, 6, 27, tzinfo=datetime.timezone.utc), 'commenter': 'felixxm', 'type': 'User'}, {'comment_id': 550109430, 'comment_body': ""I've changed the cloning method from ```VACUUM INTO``` which only supports SQLite 3.27+ to ```backup()``` which supports SQLite 3.6.11+, but the catch is that ```backup()``` doesn't support any python 3.6 since it was introduced in 3.7."", 'comment_created': datetime.datetime(2020, 12, 30, 10, 11, 25, tzinfo=datetime.timezone.utc), 'commenter': 'lothemar', 'type': 'User'}, {'comment_id': 550129725, 'comment_body': ""OK, we're talking about https://bugs.python.org/issue27645 ~, so for this we should check both `SQLite` and Python versions~:\r\n```suggestion\r\n    can_clone_databases = PY37\r\n```"", 'comment_created': datetime.datetime(2020, 12, 30, 10, 39, 45, tzinfo=datetime.timezone.utc), 'commenter': 'felixxm', 'type': 'User'}, {'comment_id': 550142847, 'comment_body': ""> ... the catch is that backup() doesn't support any python 3.6 since it was introduced in 3.7.\r\n\r\nHappy to see us hit 3.2, but we'll be dropping Python 3.6 and 3.7 from `master` after we branch `stable/3.2.x` —\xa0so it might be that we target that (if it makes everything simpler). That means users wouldn't get it in their own projects for another version, but we would have it for development from just as soon now. Thoughts? "", 'comment_created': datetime.datetime(2020, 12, 30, 10, 58, 24, tzinfo=datetime.timezone.utc), 'commenter': 'carltongibson', 'type': 'User'}, {'comment_id': 550156080, 'comment_body': ""Looking at the Django survey about 4% of users use exclusively Windows+sqlite, and about 10% of users use this combination some of the time. (Have I understood correctly that we're looking at sqlite and windows users here)"", 'comment_created': datetime.datetime(2020, 12, 30, 11, 15, 38, tzinfo=datetime.timezone.utc), 'commenter': 'smithdc1', 'type': 'User'}, {'comment_id': 550167068, 'comment_body': ""Well... `./manage.py test` would benefit across all DBs no? (The issue is can we make it work for that combo... —\xa0but also some macOS user who's got version IDK of SQLite —\xa0i.e. can we fallback gracefully.) \r\n\r\nMy thought is just that maybe (**maybe**) we can opt for the easier path, if that's available after branching 3.2… (First preference is to get it in, but balancing effort/complexity to reward) "", 'comment_created': datetime.datetime(2020, 12, 30, 11, 47, 49, tzinfo=datetime.timezone.utc), 'commenter': 'carltongibson', 'type': 'User'}, {'comment_id': 550753587, 'comment_body': ""@carltongibson I'd rather see users get access to it now excluding 3.6 support than waiting for another version or using it experimentally on the dev version.\r\n\r\nIf we miss the time for balancing it over the next two weeks, we can delay as suggested, but the sooner we get this in the better I believe.\r\n\r\nAre there issues running this patch on macOS?"", 'comment_created': datetime.datetime(2021, 1, 1, 10, 12, 26, tzinfo=datetime.timezone.utc), 'commenter': 'lothemar', 'type': 'User'}, {'comment_id': 550753632, 'comment_body': ""Wouldn't this disable SQLite cloning on Linux with 3.6?"", 'comment_created': datetime.datetime(2021, 1, 1, 10, 13, 29, tzinfo=datetime.timezone.utc), 'commenter': 'lothemar', 'type': 'User'}, {'comment_id': 605237099, 'comment_body': ""This adds complexity to `DiscoverRunner` when it seems like `DiscoverRunner` shouldn't have to know about these two arguments. One alternative would be for the caller to set `DiscoverRunner.parallel_test_suite` to a partial function that passes these arguments."", 'comment_created': datetime.datetime(2021, 3, 31, 21, 37, 29, tzinfo=datetime.timezone.utc), 'commenter': 'cjerdonek', 'type': 'User'}, {'comment_id': 605239661, 'comment_body': ""Similarly, it seems like `DiscoverRunner` shouldn't have to know about details like `suite.initial_settings`, `suite.serialized_contents`, and `multiprocessing.get_start_method()`. One alternative would be to make this a method of `ParallelTestSuite` called something like `initialize_suite()`. Then, inside `run_suite()` and before calling `runner.run(suite)`, `DiscoverRunner` could do a `hasattr` check for that method and call it if present."", 'comment_created': datetime.datetime(2021, 3, 31, 21, 42, 46, tzinfo=datetime.timezone.utc), 'commenter': 'cjerdonek', 'type': 'User'}, {'comment_id': 605241221, 'comment_body': ""Similar to my other comments, it seems like `ParallelTestSuite` shouldn't have to know about `process_setup` and `process_setup_args`. It looks like this could be handled by setting `ParallelTestSuite.init_worker` to a partial function that includes those arguments, as `init_worker` is designed with subclassing in mind."", 'comment_created': datetime.datetime(2021, 3, 31, 21, 45, 53, tzinfo=datetime.timezone.utc), 'commenter': 'cjerdonek', 'type': 'User'}, {'comment_id': 605540304, 'comment_body': 'Django 4.0+ will not support Python 3.7 anymore:\r\n```suggestion\r\n    can_clone_databases = True\r\n```', 'comment_created': datetime.datetime(2021, 4, 1, 10, 15, 20, tzinfo=datetime.timezone.utc), 'commenter': 'felixxm', 'type': 'User'}, {'comment_id': 605549054, 'comment_body': ""The naming is inconsistent `worker_db`, `sourcedb`, `second_db`, also f-strings should not contain function calls. This guideline is from [Python coding style](https://docs.djangoproject.com/en/dev/internals/contributing/writing-code/coding-style/#python-style). IMO, it's more readable with %-formatting:\r\n```suggestion\r\n        worker_db = 'file:memorydb_%s_%s?mode=memory&cache=shared' % (alias, _worker_id)\r\n        source_db = sqlite3.connect('file:%s_%s.sqlite3' % (alias, _worker_id), uri=True)\r\n```\r\n\r\nI would try to reuse `get_test_db_clone_settings()` :thinking: "", 'comment_created': datetime.datetime(2021, 4, 1, 10, 29, 49, tzinfo=datetime.timezone.utc), 'commenter': 'felixxm', 'type': 'User'}, {'comment_id': 686432273, 'comment_body': 'Keep the style the same here and below', 'comment_created': datetime.datetime(2021, 8, 11, 1, 46, 43, tzinfo=datetime.timezone.utc), 'commenter': 'cjerdonek', 'type': 'User'}, {'comment_id': 686432431, 'comment_body': 'Also keep the style the same in this file.', 'comment_created': datetime.datetime(2021, 8, 11, 1, 47, 16, tzinfo=datetime.timezone.utc), 'commenter': 'cjerdonek', 'type': 'User'}, {'comment_id': 686599908, 'comment_body': ""As the start method can also be `forkserver` we ought to guard against that and any potential future values instead of falling through to the implicit `return None`.\r\n\r\nIn addition, we can remove some indentation here:\r\n\r\n```python\r\n    def get_test_db_clone_settings(self, suffix):\r\n        settings_dict = self.connection.settings_dict\r\n\r\n        source_database_name = settings_dict['NAME']\r\n        if not self.is_in_memory_db(source_database_name):\r\n            root, ext = os.path.splitext(source_database_name)\r\n            return {**settings_dict, 'NAME': f'{root}_{suffix}{ext}'\r\n\r\n        start_method = multiprocessing.get_start_method()\r\n        if start_method == 'fork':\r\n            return settings_dict\r\n        if start_method == 'spawn':\r\n            return {**settings_dict, 'NAME': f'{self.connection.alias}_{suffix}.sqlite3'}\r\n        raise NotImplementedError(f'Cloning with start method {start_method!r} is not supported.')\r\n```\r\n\r\nDon't forget to add a test for the exception."", 'comment_created': datetime.datetime(2021, 8, 11, 8, 9, 34, tzinfo=datetime.timezone.utc), 'commenter': 'ngnpope', 'type': 'User'}, {'comment_id': 686600771, 'comment_body': ""```suggestion\r\n        elif multiprocessing.get_start_method() == 'spawn':\r\n```"", 'comment_created': datetime.datetime(2021, 8, 11, 8, 10, 33, tzinfo=datetime.timezone.utc), 'commenter': 'ngnpope', 'type': 'User'}, {'comment_id': 686604688, 'comment_body': ""Maybe I'm missing something, but why do these need to be wrapped with `str()` anyway? You could do `{alias!s}` instead of `{str(alias)}`, but if it isn't required, just use `{alias}`. In that case you can use f-strings."", 'comment_created': datetime.datetime(2021, 8, 11, 8, 15, 36, tzinfo=datetime.timezone.utc), 'commenter': 'ngnpope', 'type': 'User'}, {'comment_id': 686612538, 'comment_body': ""I'm confused. Is there something incorrect here or can this just be:\r\n```suggestion\r\n        self.connection.settings_dict['NAME'] = worker_db\r\n```\r\n\r\nIf the intent was to avoid mutating the original then do this (although I'm not sure it's required):\r\n\r\n```python\r\n        self.connection.settings_dict = {**self.connection.settings_dict, 'NAME': worker_db}\r\n```"", 'comment_created': datetime.datetime(2021, 8, 11, 8, 25, 48, tzinfo=datetime.timezone.utc), 'commenter': 'ngnpope', 'type': 'User'}, {'comment_id': 686614258, 'comment_body': ""If we keep this - instead of a fix for the stale app labels issue - it'd be worth a comment to explain why we're doing it."", 'comment_created': datetime.datetime(2021, 8, 11, 8, 27, 54, tzinfo=datetime.timezone.utc), 'commenter': 'ngnpope', 'type': 'User'}, {'comment_id': 686626858, 'comment_body': ""You've added `PostgreSQLHStoreTestCase` but left the `@modify_settings` decorator in place.\r\n\r\nI think Adam only [suggested](https://github.com/django/django/pull/12646/files#r453747532) seeing if the decorator could be applied to `PostgreSQLTestCase` in general. Given that it didn't seem to work I'd just stick with the decorator here and not bother with creating a separate class.\r\n\r\n(Also `PostgreSQLHStoreTestCase` isn't a great name for is as it is more like a `PostgreSQLWithInstalledContribTestCase`... But let's not do that! 😆)"", 'comment_created': datetime.datetime(2021, 8, 11, 8, 44, 28, tzinfo=datetime.timezone.utc), 'commenter': 'ngnpope', 'type': 'User'}, {'comment_id': 686637848, 'comment_body': ""So it looks as though you've run `black` over this as there are changes other than quotes.\r\nWe're not currently ready to use `black` as it is still in pre-release."", 'comment_created': datetime.datetime(2021, 8, 11, 8, 58, 31, tzinfo=datetime.timezone.utc), 'commenter': 'ngnpope', 'type': 'User'}, {'comment_id': 686675463, 'comment_body': 'Honestly not sure why I did it this way, will change it & see if something breaks', 'comment_created': datetime.datetime(2021, 8, 11, 9, 49, 13, tzinfo=datetime.timezone.utc), 'commenter': 'lothemar', 'type': 'User'}, {'comment_id': 686696429, 'comment_body': 'Yes, I did. My editor was set to auto-format on save, and I forgot to disable it while committing. Will revert all stylistic changes.', 'comment_created': datetime.datetime(2021, 8, 11, 10, 18, 31, tzinfo=datetime.timezone.utc), 'commenter': 'lothemar', 'type': 'User'}, {'comment_id': 812757067, 'comment_body': 'I moved this hook to a separate PR, see #15457.', 'comment_created': datetime.datetime(2022, 2, 23, 10, 37, 23, tzinfo=datetime.timezone.utc), 'commenter': 'felixxm', 'type': 'User'}]","[{'commit_sha': '2eccf36874cb275a7201e694453a15c322127e67', 'committer_username': 'lothemar', 'committer_name': 'Ahmad A. Hussein', 'committer_email': 'ahmadahussein0@gmail.com', 'commit_date': datetime.datetime(2016, 2, 20, 21, 52, 46, tzinfo=datetime.timezone.utc)}]",Ahmad A. Hussein,17365134,ahmadahussein0@gmail.com,User,,6,,11,12
470264949,Fixed #31908 -- Implemented Oracle parallel test support. [GSoC],"ticket-31908

",False,13326,https://api.github.com/repos/django/django/pulls/13326,https://github.com/django/django/pull/13326,closed,109,26,4,1,1,10,0,0,[],2020-08-19 16:00:05+00:00,2022-03-03 11:38:06+00:00,48454681.0,"560 days, 19:38:01","[{'comment_id': 474728266, 'comment_body': ""```suggestion\r\n        orig_settings_dict['TEST']['PASSWORD'] = orig_settings_dict['PASSWORD']\r\n```\r\nNot sure how the tests passed here... Unless username and password are the same..."", 'comment_created': datetime.datetime(2020, 8, 21, 14, 19, 29, tzinfo=datetime.timezone.utc), 'commenter': 'ngnpope', 'type': 'User'}, {'comment_id': 474740145, 'comment_body': ""The rest of the patch is using f-strings. Hopefully we can make a final decision on that in #13214 soon.\r\n\r\n`original_settings_dict` feels a bit clunky. Also note that unpacking a dictionary works like a shallow copy, so modifying the value of the `'TEST'` sub-ditctionary will affect the original. Perhaps this would be simpler:\r\n\r\n```suggestion\r\n        original = self.connection.settings_dict\r\n        user = original['USER']\r\n        password = original['PASSWORD']\r\n        return {\r\n            **original,\r\n            'USER': f'{user}_{suffix}',\r\n            'PASSWORD': f'{password}_{suffix}',\r\n            'TEST': {\r\n                **original['TEST'],\r\n                'USER': f'{user}_{suffix}',\r\n                'PASSWORD': f'{password}_{suffix}',\r\n            },\r\n        }\r\n```"", 'comment_created': datetime.datetime(2020, 8, 21, 14, 38, 19, tzinfo=datetime.timezone.utc), 'commenter': 'ngnpope', 'type': 'User'}, {'comment_id': 474748551, 'comment_body': ""```suggestion\r\n```\r\n\r\nI wasn't sure why `datafile` and `datafile_tmp` were handled like this.\r\n\r\nMaybe we should get rid of `_get_cloned_db_params(self, suffix)` and just extend `django.db.backend.oracle.creation.DatabaseCreation._get_test_db_params()` to have a `suffix=None` parameter and pass that down to the individual methods such that `_test_database_tblspace_datafile()` can accept `suffix` and insert the value before the `.dbf` extension?"", 'comment_created': datetime.datetime(2020, 8, 21, 14, 52, 31, tzinfo=datetime.timezone.utc), 'commenter': 'ngnpope', 'type': 'User'}, {'comment_id': 474749547, 'comment_body': 'Then we could do this:\r\n\r\n```suggestion\r\n        parameters = self._get_test_db_params(suffix)\r\n```', 'comment_created': datetime.datetime(2020, 8, 21, 14, 54, 7, tzinfo=datetime.timezone.utc), 'commenter': 'ngnpope', 'type': 'User'}, {'comment_id': 474749898, 'comment_body': 'And this:\r\n\r\n```suggestion\r\n        parameters = self._get_test_db_params(suffix)\r\n```', 'comment_created': datetime.datetime(2020, 8, 21, 14, 54, 38, tzinfo=datetime.timezone.utc), 'commenter': 'ngnpope', 'type': 'User'}, {'comment_id': 475207270, 'comment_body': 'They are, good catch. I missed this when I copy-pasted the line.', 'comment_created': datetime.datetime(2020, 8, 23, 11, 23, 7, tzinfo=datetime.timezone.utc), 'commenter': 'lothemar', 'type': 'User'}, {'comment_id': 484315138, 'comment_body': ""`BaseDatabaseCreation` shouldn't contain branches for specific backends."", 'comment_created': datetime.datetime(2020, 9, 7, 9, 37, 24, tzinfo=datetime.timezone.utc), 'commenter': 'felixxm', 'type': 'User'}, {'comment_id': 484325433, 'comment_body': 'You should try to reuse `connection._connect_string()`.', 'comment_created': datetime.datetime(2020, 9, 7, 9, 54, 50, tzinfo=datetime.timezone.utc), 'commenter': 'felixxm', 'type': 'User'}, {'comment_id': 513437539, 'comment_body': ""To fix this, I changed ```_destroy_test_db```'s signature to use the cloned db's ```test_settings_dict``` instead of just the ```test_database_name```. Let me know your thoughts on that change. I wanted to add docs for it but I want to hear your opinion on it in case I should change it before finalizing the patch with the relevant documentation."", 'comment_created': datetime.datetime(2020, 10, 28, 13, 23, 20, tzinfo=datetime.timezone.utc), 'commenter': 'lothemar', 'type': 'User'}, {'comment_id': 818571517, 'comment_body': ""It's rather rare that folks have the Oracle database engine installed locally, so it crashes because `expdp` and `impdp` are not available."", 'comment_created': datetime.datetime(2022, 3, 3, 11, 37, 48, tzinfo=datetime.timezone.utc), 'commenter': 'felixxm', 'type': 'User'}]","[{'commit_sha': '6ce0bbd49e9a8e2b5ca5f86f9af21e324178f96e', 'committer_username': 'lothemar', 'committer_name': 'Ahmad A. Hussein', 'committer_email': 'ahmadahussein0@gmail.com', 'commit_date': datetime.datetime(2016, 2, 20, 21, 52, 46, tzinfo=datetime.timezone.utc)}]",Ahmad A. Hussein,17365134,ahmadahussein0@gmail.com,User,,6,,11,12

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
4164482,django,django/django,Python,31399,78591,2301,3158,32852,240,28,240,"[{'id': 470264949, 'number': 13326, 'closed': datetime.datetime(2022, 3, 3, 11, 38, 6, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 19, 16, 0, 5, tzinfo=datetime.timezone.utc), 'time_taken': 48454681.0, 'time_delta': '560 days, 19:38:01', 'additions': 109, 'deletions': 26, 'state': 'closed'}, {'id': 468569619, 'number': 13314, 'closed': datetime.datetime(2023, 3, 15, 12, 48, 6, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 17, 4, 21, 38, tzinfo=datetime.timezone.utc), 'time_taken': 81246388.0, 'time_delta': '940 days, 8:26:28', 'additions': 69, 'deletions': 16, 'state': 'closed'}, {'id': 468165463, 'number': 13309, 'closed': datetime.datetime(2020, 8, 17, 8, 0, 33, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 14, 20, 14, 44, tzinfo=datetime.timezone.utc), 'time_taken': 215149.0, 'time_delta': '2 days, 11:45:49', 'additions': 31, 'deletions': 34, 'state': 'closed'}, {'id': 455213048, 'number': 13224, 'closed': datetime.datetime(2020, 8, 13, 15, 17, 19, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 22, 16, 4, 39, tzinfo=datetime.timezone.utc), 'time_taken': 1897960.0, 'time_delta': '21 days, 23:12:40', 'additions': 144, 'deletions': 38, 'state': 'closed'}, {'id': 454618914, 'number': 13217, 'closed': datetime.datetime(2020, 7, 30, 12, 27, 56, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 21, 16, 33, 52, tzinfo=datetime.timezone.utc), 'time_taken': 762844.0, 'time_delta': '8 days, 19:54:04', 'additions': 132, 'deletions': 18, 'state': 'closed'}, {'id': 438558932, 'number': 13102, 'closed': datetime.datetime(2020, 6, 23, 19, 0, 3, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 23, 13, 7, 8, tzinfo=datetime.timezone.utc), 'time_taken': 21175.0, 'time_delta': '5:52:55', 'additions': 3, 'deletions': 2, 'state': 'closed'}, {'id': 418727173, 'number': 12917, 'closed': datetime.datetime(2020, 5, 27, 8, 38, 3, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 5, 15, 17, 59, 20, tzinfo=datetime.timezone.utc), 'time_taken': 1003123.0, 'time_delta': '11 days, 14:38:43', 'additions': 53, 'deletions': 2, 'state': 'closed'}, {'id': 396360293, 'number': 12646, 'closed': datetime.datetime(2022, 2, 14, 5, 15, 57, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 3, 31, 14, 6, 2, tzinfo=datetime.timezone.utc), 'time_taken': 59152195.0, 'time_delta': '684 days, 15:09:55', 'additions': 625, 'deletions': 344, 'state': 'closed'}, {'id': 377428680, 'number': 12477, 'closed': datetime.datetime(2020, 2, 27, 10, 33, 31, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 2, 19, 22, 26, 20, tzinfo=datetime.timezone.utc), 'time_taken': 648431.0, 'time_delta': '7 days, 12:07:11', 'additions': 151, 'deletions': 12, 'state': 'closed'}]"
